{
    "wicket_03078b2": {
        "bug_id": "wicket_03078b2",
        "commit": "https://github.com/apache/wicket/commit/03078b2231f0022c65e931f22cae6c1219ae2d06",
        "file": [
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/wicket/blob/03078b2231f0022c65e931f22cae6c1219ae2d06/wicket-core/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebRequest.java",
                "changes": 53,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebRequest.java?ref=03078b2231f0022c65e931f22cae6c1219ae2d06",
                "deletions": 25,
                "filename": "wicket-core/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebRequest.java",
                "patch": "@@ -304,38 +304,41 @@ private static boolean isMultiPart(ServletRequest request)\n \t\t\tfinal String name = param.getKey();\n \t\t\tfinal String[] values = param.getValue();\n \n-\t\t\t// build a mutable list of query params that have the same name as the post param\n-\t\t\tList<StringValue> queryValues = queryParams.getParameterValues(name);\n-\t\t\tif (queryValues == null)\n+\t\t\tif (name != null && values != null)\n \t\t\t{\n-\t\t\t\tqueryValues = Collections.emptyList();\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\tqueryValues = new ArrayList<StringValue>(queryValues);\n-\t\t\t}\n-\n-\t\t\t// the list that will contain accepted post param values\n-\t\t\tList<StringValue> postValues = new ArrayList<StringValue>();\n-\n-\t\t\tfor (String value : values)\n-\t\t\t{\n-\t\t\t\tStringValue val = StringValue.valueOf(value);\n-\t\t\t\tif (queryValues.contains(val))\n+\t\t\t\t// build a mutable list of query params that have the same name as the post param\n+\t\t\t\tList<StringValue> queryValues = queryParams.getParameterValues(name);\n+\t\t\t\tif (queryValues == null)\n \t\t\t\t{\n-\t\t\t\t\t// if a query param with this value exists remove it and continue\n-\t\t\t\t\tqueryValues.remove(val);\n+\t\t\t\t\tqueryValues = Collections.emptyList();\n \t\t\t\t}\n \t\t\t\telse\n \t\t\t\t{\n-\t\t\t\t\t// there is no query param with this value, assume post\n-\t\t\t\t\tpostValues.add(val);\n+\t\t\t\t\tqueryValues = new ArrayList<StringValue>(queryValues);\n \t\t\t\t}\n-\t\t\t}\n \n-\t\t\tif (!postValues.isEmpty())\n-\t\t\t{\n-\t\t\t\tpostParameters.put(name, postValues);\n+\t\t\t\t// the list that will contain accepted post param values\n+\t\t\t\tList<StringValue> postValues = new ArrayList<StringValue>();\n+\n+\t\t\t\tfor (String value : values)\n+\t\t\t\t{\n+\t\t\t\t\tStringValue val = StringValue.valueOf(value);\n+\t\t\t\t\tif (queryValues.contains(val))\n+\t\t\t\t\t{\n+\t\t\t\t\t\t// if a query param with this value exists remove it and continue\n+\t\t\t\t\t\tqueryValues.remove(val);\n+\t\t\t\t\t}\n+\t\t\t\t\telse\n+\t\t\t\t\t{\n+\t\t\t\t\t\t// there is no query param with this value, assume post\n+\t\t\t\t\t\tpostValues.add(val);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\tif (!postValues.isEmpty())\n+\t\t\t\t{\n+\t\t\t\t\tpostParameters.put(name, postValues);\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t\treturn postParameters;",
                "raw_url": "https://github.com/apache/wicket/raw/03078b2231f0022c65e931f22cae6c1219ae2d06/wicket-core/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebRequest.java",
                "sha": "9de1381780432cb0e0697b109338e0a2370587e8",
                "status": "modified"
            }
        ],
        "message": "WICKET-4818 NullPointerException while reading the POST parameters\n\nAdd a check that the parameter name and values are not null.",
        "parent": "https://github.com/apache/wicket/commit/9ed74a4e21df8dff0398439a8c6e612f20d729df",
        "patched_files": [
            "ServletWebRequest.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "ServletWebRequestTest.java"
        ]
    },
    "wicket_065cb03": {
        "bug_id": "wicket_065cb03",
        "commit": "https://github.com/apache/wicket/commit/065cb0398fbcb5ca3e83f9ed614756ab81de13f3",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/wicket/blob/065cb0398fbcb5ca3e83f9ed614756ab81de13f3/wicket-core/src/main/java/org/apache/wicket/protocol/http/IRequestLogger.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/protocol/http/IRequestLogger.java?ref=065cb0398fbcb5ca3e83f9ed614756ab81de13f3",
                "deletions": 3,
                "filename": "wicket-core/src/main/java/org/apache/wicket/protocol/http/IRequestLogger.java",
                "patch": "@@ -163,14 +163,14 @@\n \t/**\n \t * Perform the actual logging\n \t */\n-\tpublic void performLogging();\n+\tvoid performLogging();\n \n \t/**\n \t * This class hold the information one request of a session has.\n \t * \n \t * @author jcompagner\n \t */\n-\tpublic static class SessionData implements IClusterable, Comparable<SessionData>\n+\tclass SessionData implements IClusterable, Comparable<SessionData>\n \t{\n \t\tprivate static final long serialVersionUID = 1L;\n \n@@ -304,7 +304,7 @@ else if (sd.startDate < startDate)\n \t * \n \t * @author jcompagner\n \t */\n-\tpublic static class RequestData implements IClusterable\n+\tclass RequestData implements IClusterable\n \t{\n \t\tprivate static final long serialVersionUID = 1L;\n ",
                "raw_url": "https://github.com/apache/wicket/raw/065cb0398fbcb5ca3e83f9ed614756ab81de13f3/wicket-core/src/main/java/org/apache/wicket/protocol/http/IRequestLogger.java",
                "sha": "36f0ca7d0832b27317dc8a6c53615cf2d6572a7b",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/wicket/blob/065cb0398fbcb5ca3e83f9ed614756ab81de13f3/wicket-core/src/test/java/org/apache/wicket/protocol/http/AbstractRequestLoggerTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/test/java/org/apache/wicket/protocol/http/AbstractRequestLoggerTest.java?ref=065cb0398fbcb5ca3e83f9ed614756ab81de13f3",
                "deletions": 1,
                "filename": "wicket-core/src/test/java/org/apache/wicket/protocol/http/AbstractRequestLoggerTest.java",
                "patch": "@@ -25,7 +25,6 @@\n  */\n public class AbstractRequestLoggerTest extends WicketTestCase\n {\n-\n \tprivate int counter;\n \t\n \t@Test",
                "raw_url": "https://github.com/apache/wicket/raw/065cb0398fbcb5ca3e83f9ed614756ab81de13f3/wicket-core/src/test/java/org/apache/wicket/protocol/http/AbstractRequestLoggerTest.java",
                "sha": "86ec61e6a8a53896d48d81b44cc47f8a44c9431f",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/065cb0398fbcb5ca3e83f9ed614756ab81de13f3/wicket-jmx/src/main/java/org/apache/wicket/jmx/wrapper/ResourceSettings.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-jmx/src/main/java/org/apache/wicket/jmx/wrapper/ResourceSettings.java?ref=065cb0398fbcb5ca3e83f9ed614756ab81de13f3",
                "deletions": 1,
                "filename": "wicket-jmx/src/main/java/org/apache/wicket/jmx/wrapper/ResourceSettings.java",
                "patch": "@@ -120,7 +120,7 @@ public String getResourceStreamLocator()\n \t\t\t{\n \t\t\t\tlist.add(loader.toString());\n \t\t\t}\n-\t\t\treturn list.toArray(new String[loaders.size()]);\n+\t\t\treturn list.toArray(new String[0]);\n \t\t}\n \t\treturn null;\n \t}",
                "raw_url": "https://github.com/apache/wicket/raw/065cb0398fbcb5ca3e83f9ed614756ab81de13f3/wicket-jmx/src/main/java/org/apache/wicket/jmx/wrapper/ResourceSettings.java",
                "sha": "863804df4efbbfa70ff667eab829288e4b748f92",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/065cb0398fbcb5ca3e83f9ed614756ab81de13f3/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/HttpSessionCopy.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/HttpSessionCopy.java?ref=065cb0398fbcb5ca3e83f9ed614756ab81de13f3",
                "deletions": 1,
                "filename": "wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/HttpSessionCopy.java",
                "patch": "@@ -117,7 +117,7 @@ public Object getValue(String name)\n \t@Override\n \tpublic String[] getValueNames()\n \t{\n-\t\treturn Collections.list(attributes.keys()).toArray(new String[attributes.size()]);\n+\t\treturn Collections.list(attributes.keys()).toArray(new String[0]);\n \t}\n \n \t@Override",
                "raw_url": "https://github.com/apache/wicket/raw/065cb0398fbcb5ca3e83f9ed614756ab81de13f3/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/HttpSessionCopy.java",
                "sha": "1b9da35ebbba6ea5ca546de0fa6ef03b37a80cff",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/065cb0398fbcb5ca3e83f9ed614756ab81de13f3/wicket-native-websocket/wicket-native-websocket-javax/src/main/java/org/apache/wicket/protocol/ws/javax/JavaxUpgradeHttpRequest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-native-websocket/wicket-native-websocket-javax/src/main/java/org/apache/wicket/protocol/ws/javax/JavaxUpgradeHttpRequest.java?ref=065cb0398fbcb5ca3e83f9ed614756ab81de13f3",
                "deletions": 1,
                "filename": "wicket-native-websocket/wicket-native-websocket-javax/src/main/java/org/apache/wicket/protocol/ws/javax/JavaxUpgradeHttpRequest.java",
                "patch": "@@ -87,7 +87,7 @@ public JavaxUpgradeHttpRequest(final Session session, EndpointConfig endpointCon\n \t\t\t{\n \t\t\t\tString name = entry.getKey();\n \t\t\t\tList<String> value = entry.getValue();\n-\t\t\t\tparametersMap.put(name, value.toArray(new String[value.size()]));\n+\t\t\t\tparametersMap.put(name, value.toArray(new String[0]));\n \t\t\t}\n \t\t}\n \t}",
                "raw_url": "https://github.com/apache/wicket/raw/065cb0398fbcb5ca3e83f9ed614756ab81de13f3/wicket-native-websocket/wicket-native-websocket-javax/src/main/java/org/apache/wicket/protocol/ws/javax/JavaxUpgradeHttpRequest.java",
                "sha": "bf22062b46fa055d5b7fc6522659f16fe62f25af",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/065cb0398fbcb5ca3e83f9ed614756ab81de13f3/wicket-spring/src/main/java/org/apache/wicket/spring/test/ApplicationContextMock.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-spring/src/main/java/org/apache/wicket/spring/test/ApplicationContextMock.java?ref=065cb0398fbcb5ca3e83f9ed614756ab81de13f3",
                "deletions": 1,
                "filename": "wicket-spring/src/main/java/org/apache/wicket/spring/test/ApplicationContextMock.java",
                "patch": "@@ -256,7 +256,7 @@ public int getBeanDefinitionCount()\n \t@Override\n \tpublic String[] getBeanDefinitionNames()\n \t{\n-\t\treturn beans.keySet().toArray(new String[beans.size()]);\n+\t\treturn beans.keySet().toArray(new String[0]);\n \t}\n \n \t@Override",
                "raw_url": "https://github.com/apache/wicket/raw/065cb0398fbcb5ca3e83f9ed614756ab81de13f3/wicket-spring/src/main/java/org/apache/wicket/spring/test/ApplicationContextMock.java",
                "sha": "4365abb4223319c665abf38746ad649295fe3612",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/065cb0398fbcb5ca3e83f9ed614756ab81de13f3/wicket-util/src/main/java/org/apache/wicket/util/string/StringList.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-util/src/main/java/org/apache/wicket/util/string/StringList.java?ref=065cb0398fbcb5ca3e83f9ed614756ab81de13f3",
                "deletions": 1,
                "filename": "wicket-util/src/main/java/org/apache/wicket/util/string/StringList.java",
                "patch": "@@ -376,7 +376,7 @@ public void sort()\n \t@Override\r\n \tpublic String[] toArray()\r\n \t{\r\n-\t\treturn strings.toArray(new String[size()]);\r\n+\t\treturn strings.toArray(new String[0]);\r\n \t}\r\n \r\n \t/**\r",
                "raw_url": "https://github.com/apache/wicket/raw/065cb0398fbcb5ca3e83f9ed614756ab81de13f3/wicket-util/src/main/java/org/apache/wicket/util/string/StringList.java",
                "sha": "e052cf8548f9817c7d58d0b734468d317ecacdd6",
                "status": "modified"
            }
        ],
        "message": "WICKET-6169 NullPointerException accessing AbstractRequestLogger.getLiveSessions\n\nFix some more candidates for the same problem.\nRemove implicit modifiers",
        "parent": "https://github.com/apache/wicket/commit/809b2da16cc0796ee4e5aca8ef816c200c01baf2",
        "patched_files": [
            "ResourceSettings.java",
            "ApplicationContextMock.java",
            "JavaxUpgradeHttpRequest.java",
            "HttpSessionCopy.java",
            "IRequestLogger.java",
            "AbstractRequestLogger.java",
            "StringList.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "AbstractRequestLoggerTest.java",
            "StringListTest.java"
        ]
    },
    "wicket_2236a28": {
        "bug_id": "wicket_2236a28",
        "commit": "https://github.com/apache/wicket/commit/2236a28f9a93a29b2dc7a83823017bb833338910",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/wicket/blob/2236a28f9a93a29b2dc7a83823017bb833338910/wicket/src/java/wicket/behavior/AttributeAppender.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/behavior/AttributeAppender.java?ref=2236a28f9a93a29b2dc7a83823017bb833338910",
                "deletions": 0,
                "filename": "wicket/src/java/wicket/behavior/AttributeAppender.java",
                "patch": "@@ -102,6 +102,11 @@ public AttributeAppender(String attribute, IModel appendModel, String separator)\n \t */\n \tprotected String newValue(String currentValue, String appendValue)\n \t{\n+\t\tif(currentValue==null)\n+\t\t{\n+\t\t    return null;\n+\t\t}\n+\n \t\tStringBuffer sb = new StringBuffer(currentValue);\n \n \t\t// if the current value or the append value is empty, the separator is",
                "raw_url": "https://github.com/apache/wicket/raw/2236a28f9a93a29b2dc7a83823017bb833338910/wicket/src/java/wicket/behavior/AttributeAppender.java",
                "sha": "cbe030ce23ce425fe2dfa7f91361bf591a61ec0e",
                "status": "modified"
            }
        ],
        "message": "fix for [ 1433377 ] NPE at AttributeAppender\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@459387 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/bef8e5317da136b795036a41fe59df4b9e8cf719",
        "patched_files": [
            "AttributeAppender.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "AttributeAppenderTest.java"
        ]
    },
    "wicket_2c19418": {
        "bug_id": "wicket_2c19418",
        "commit": "https://github.com/apache/wicket/commit/2c194180a5c2660a70ae1121cd12ce355afebc52",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/2c194180a5c2660a70ae1121cd12ce355afebc52/jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java?ref=2c194180a5c2660a70ae1121cd12ce355afebc52",
                "deletions": 1,
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java",
                "patch": "@@ -1979,7 +1979,8 @@ public final void render(final MarkupStream markupStream)\n \t\t\t\tlog.debug(\"End render \" + this);\n \t\t\t}\n \t\t}\n-\t\telse\n+\t\t// markupStream is null when rendering a page\n+\t\telse if (markupStream != null)\n \t\t{\n \t\t\tif (getFlag(FLAG_PLACEHOLDER))\n \t\t\t{",
                "raw_url": "https://github.com/apache/wicket/raw/2c194180a5c2660a70ae1121cd12ce355afebc52/jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java",
                "sha": "8dc71e8c5edd275c83f2ab196f363adc5c3d7bdc",
                "status": "modified"
            }
        ],
        "message": "WICKET-738 setVisible(false) on Page throws NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@555407 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/cd6e324a6751689013539f14d55085f3efc9c2ba",
        "patched_files": [
            "Component.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "ComponentTest.java",
            "TestComponent.java"
        ]
    },
    "wicket_2e5daa6": {
        "bug_id": "wicket_2e5daa6",
        "commit": "https://github.com/apache/wicket/commit/2e5daa658a8be6467bb922180ce8167e205a95d9",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/wicket/blob/2e5daa658a8be6467bb922180ce8167e205a95d9/wicket-auth-roles/src/main/java/wicket/authorization/strategies/role/annotations/AnnotationsRoleAuthorizationStrategy.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-auth-roles/src/main/java/wicket/authorization/strategies/role/annotations/AnnotationsRoleAuthorizationStrategy.java?ref=2e5daa658a8be6467bb922180ce8167e205a95d9",
                "deletions": 3,
                "filename": "wicket-auth-roles/src/main/java/wicket/authorization/strategies/role/annotations/AnnotationsRoleAuthorizationStrategy.java",
                "patch": "@@ -116,11 +116,14 @@ public boolean isActionAuthorized(final Component component, final Action action\n \t */\n \tprivate boolean check(final Action action, final AuthorizeAction authorizeActionAnnotation)\n \t{\n-\t\tif (action.getName().equals(authorizeActionAnnotation.action()))\n+\t\tif (authorizeActionAnnotation != null)\n \t\t{\n-\t\t\tif (!hasAny(new Roles(authorizeActionAnnotation.roles())))\n+\t\t\tif (action.getName().equals(authorizeActionAnnotation.action()))\n \t\t\t{\n-\t\t\t\treturn false;\n+\t\t\t\tif (!hasAny(new Roles(authorizeActionAnnotation.roles())))\n+\t\t\t\t{\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t\treturn true;",
                "raw_url": "https://github.com/apache/wicket/raw/2e5daa658a8be6467bb922180ce8167e205a95d9/wicket-auth-roles/src/main/java/wicket/authorization/strategies/role/annotations/AnnotationsRoleAuthorizationStrategy.java",
                "sha": "d1196680f64a08a1940079004dfa5216c9d10e27",
                "status": "modified"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/wicket/blob/2e5daa658a8be6467bb922180ce8167e205a95d9/wicket-auth-roles/src/test/java/wicket/authorization/strategies/role/annotations/AnnotationsRoleTest.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-auth-roles/src/test/java/wicket/authorization/strategies/role/annotations/AnnotationsRoleTest.java?ref=2e5daa658a8be6467bb922180ce8167e205a95d9",
                "deletions": 0,
                "filename": "wicket-auth-roles/src/test/java/wicket/authorization/strategies/role/annotations/AnnotationsRoleTest.java",
                "patch": "@@ -18,9 +18,12 @@\n package wicket.authorization.strategies.role.annotations;\n \n import java.io.Serializable;\n+import java.lang.reflect.InvocationTargetException;\n \n import junit.framework.TestCase;\n import wicket.Page;\n+import wicket.WicketRuntimeException;\n+import wicket.authorization.UnauthorizedInstantiationException;\n import wicket.authorization.strategies.role.IRoleCheckingStrategy;\n import wicket.authorization.strategies.role.RoleAuthorizationStrategy;\n import wicket.authorization.strategies.role.Roles;\n@@ -52,6 +55,24 @@ public AnnotationsRoleTest(String arg0)\n \t\tsuper(arg0);\n \t}\n \n+\t/**\n+\t * @throws Exception\n+\t */\n+\tpublic void testClear() throws Exception\n+\t{\n+\t\tWicketTester tester = new WicketTester();\n+\t\ttester.getSecuritySettings().setAuthorizationStrategy(\n+\t\t\t\tnew RoleAuthorizationStrategy(new UserRolesAuthorizer(\"FOO\")));\n+\t\ttester.startPage(new ITestPageSource()\n+\t\t{\n+\t\t\tpublic Page getTestPage()\n+\t\t\t{\n+\t\t\t\treturn new NormalPage();\n+\t\t\t}\n+\t\t});\n+\t\ttester.assertRenderedPage(NormalPage.class);\n+\t}\n+\n \t/**\n \t * @throws Exception\n \t */\n@@ -91,6 +112,11 @@ public Page getTestPage()\n \t\t}\n \t\tcatch (Exception e)\n \t\t{\n+\t\t\tif (!(e.getCause() instanceof InvocationTargetException && ((InvocationTargetException)e\n+\t\t\t\t\t.getCause()).getTargetException() instanceof UnauthorizedInstantiationException))\n+\t\t\t{\n+\t\t\t\tthrow e;\n+\t\t\t}\n \t\t}\n \t}\n ",
                "raw_url": "https://github.com/apache/wicket/raw/2e5daa658a8be6467bb922180ce8167e205a95d9/wicket-auth-roles/src/test/java/wicket/authorization/strategies/role/annotations/AnnotationsRoleTest.java",
                "sha": "944c16fccccdbe2178683514e20917ba88e4a320",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/wicket/blob/2e5daa658a8be6467bb922180ce8167e205a95d9/wicket-auth-roles/src/test/java/wicket/authorization/strategies/role/annotations/NormalPage.html",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-auth-roles/src/test/java/wicket/authorization/strategies/role/annotations/NormalPage.html?ref=2e5daa658a8be6467bb922180ce8167e205a95d9",
                "deletions": 0,
                "filename": "wicket-auth-roles/src/test/java/wicket/authorization/strategies/role/annotations/NormalPage.html",
                "patch": "@@ -0,0 +1,7 @@\n+<html>\n+\t<head>\n+\t</head>\n+\t<body>\n+\t\tHELLO\n+\t</body>\n+</html>",
                "raw_url": "https://github.com/apache/wicket/raw/2e5daa658a8be6467bb922180ce8167e205a95d9/wicket-auth-roles/src/test/java/wicket/authorization/strategies/role/annotations/NormalPage.html",
                "sha": "07f9c7051a2b7176e850668b351f451adfe730e4",
                "status": "added"
            },
            {
                "additions": 37,
                "blob_url": "https://github.com/apache/wicket/blob/2e5daa658a8be6467bb922180ce8167e205a95d9/wicket-auth-roles/src/test/java/wicket/authorization/strategies/role/annotations/NormalPage.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-auth-roles/src/test/java/wicket/authorization/strategies/role/annotations/NormalPage.java?ref=2e5daa658a8be6467bb922180ce8167e205a95d9",
                "deletions": 0,
                "filename": "wicket-auth-roles/src/test/java/wicket/authorization/strategies/role/annotations/NormalPage.java",
                "patch": "@@ -0,0 +1,37 @@\n+/*\n+ * $Id$ $Revision$\n+ * $Date$\n+ * \n+ * ==============================================================================\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package wicket.authorization.strategies.role.annotations;\n+\n+import wicket.markup.html.WebPage;\n+\n+/**\n+ * Test page that has no annotation and should thus be available.\n+ * \n+ * @author Eelco Hillenius\n+ */\n+public class NormalPage extends WebPage\n+{\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\t/**\n+\t * Construct.\n+\t */\n+\tpublic NormalPage()\n+\t{\n+\t}\n+}",
                "raw_url": "https://github.com/apache/wicket/raw/2e5daa658a8be6467bb922180ce8167e205a95d9/wicket-auth-roles/src/test/java/wicket/authorization/strategies/role/annotations/NormalPage.java",
                "sha": "11f4f087cfda0c249c42a91a6d237e0d26307546",
                "status": "added"
            }
        ],
        "message": "NPE fix & unit test for fix\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@459301 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/1d9e3f86003812b0e963e2334c831949898ea9b4",
        "patched_files": [
            "AnnotationsRoleAuthorizationStrategy.java",
            "NormalPage.java",
            "NormalPage.html"
        ],
        "repo": "wicket",
        "unit_tests": [
            "AnnotationsRoleTest.java"
        ]
    },
    "wicket_32a40bc": {
        "bug_id": "wicket_32a40bc",
        "commit": "https://github.com/apache/wicket/commit/32a40bc1de5302f17bbcc19cd3ab769b0dc0f274",
        "file": [
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/wicket/blob/32a40bc1de5302f17bbcc19cd3ab769b0dc0f274/wicket-core/src/main/java/org/apache/wicket/markup/parser/AbstractMarkupFilter.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/markup/parser/AbstractMarkupFilter.java?ref=32a40bc1de5302f17bbcc19cd3ab769b0dc0f274",
                "deletions": 1,
                "filename": "wicket-core/src/main/java/org/apache/wicket/markup/parser/AbstractMarkupFilter.java",
                "patch": "@@ -17,14 +17,17 @@\n package org.apache.wicket.markup.parser;\n \n import java.text.ParseException;\n+import java.util.concurrent.atomic.AtomicLong;\n \n+import org.apache.wicket.MetaDataKey;\n import org.apache.wicket.markup.ComponentTag;\n import org.apache.wicket.markup.HtmlSpecialTag;\n import org.apache.wicket.markup.Markup;\n import org.apache.wicket.markup.MarkupElement;\n import org.apache.wicket.markup.MarkupParser;\n import org.apache.wicket.markup.MarkupResourceStream;\n import org.apache.wicket.markup.MarkupStream;\n+import org.apache.wicket.request.cycle.RequestCycle;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -45,7 +48,12 @@\n \n \t/** The next MarkupFilter in the chain */\n \tprivate IMarkupFilter parent;\n-\n+\t\n+\t/** A key for a request-relative counter (see {@link #getRequestUniqueId()}) **/\n+\tprivate final static MetaDataKey<AtomicLong> REQUEST_COUNTER_KEY = new MetaDataKey<AtomicLong>()\n+\t{\n+\t};\n+\t\t\n \t/**\n \t * Construct.\n \t */\n@@ -190,4 +198,25 @@ else if (markupResourceStream != null)\n \t\t}\n \t\treturn wicketNamespace;\n \t}\n+\t\n+\t/**\n+\t * Returns an id using a request-relative counter. This can be\n+\t * useful for autocomponent tags that needs to get tag id.\n+\t * \n+\t * @return\n+\t * \t\tthe request-relative id\n+\t */\n+\tprotected long getRequestUniqueId()\n+\t{\n+\t\tAtomicLong counter = RequestCycle.get().getMetaData(REQUEST_COUNTER_KEY);\n+\t\t\n+\t\tif (counter == null)\n+\t\t{\n+\t\t\tcounter = new AtomicLong();\n+\t\t\t\n+\t\t\tRequestCycle.get().setMetaData(REQUEST_COUNTER_KEY, counter);\n+\t\t}\n+\t\t\n+\t\treturn counter.getAndIncrement();\n+\t}\n }",
                "raw_url": "https://github.com/apache/wicket/raw/32a40bc1de5302f17bbcc19cd3ab769b0dc0f274/wicket-core/src/main/java/org/apache/wicket/markup/parser/AbstractMarkupFilter.java",
                "sha": "6478da26547d265dbe05a1edea4f5749e4c42d8c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/32a40bc1de5302f17bbcc19cd3ab769b0dc0f274/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/EnclosureHandler.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/EnclosureHandler.java?ref=32a40bc1de5302f17bbcc19cd3ab769b0dc0f274",
                "deletions": 10,
                "filename": "wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/EnclosureHandler.java",
                "patch": "@@ -19,7 +19,6 @@\n import java.text.ParseException;\n import java.util.ArrayDeque;\n import java.util.Deque;\n-import java.util.concurrent.atomic.AtomicLong;\n \n import org.apache.wicket.Component;\n import org.apache.wicket.MarkupContainer;\n@@ -73,14 +72,6 @@ public Component newComponent(MarkupContainer container, ComponentTag tag)\n \t/** Stack of <wicket:enclosure> tags */\n \tprivate Deque<ComponentTag> stack;\n \n-\t/**\n-\t * Used to assign unique ids to enclosures\n-\t * \n-\t * TODO queueing: there has to be a better way of doing this, perhaps some merged-markup-unique\n-\t * counter\n-\t */\n-\tprivate static final AtomicLong index = new AtomicLong();\n-\n \t/** The id of the first wicket tag inside the enclosure */\n \tprivate String childId;\n \n@@ -109,7 +100,7 @@ protected final MarkupElement onComponentTag(ComponentTag tag) throws ParseExcep\n \t\t\t// If open tag, than put the tag onto the stack\n \t\t\tif (tag.isOpen())\n \t\t\t{\n-\t\t\t\ttag.setId(tag.getId() + index.getAndIncrement());\n+\t\t\t\ttag.setId(tag.getId() + getRequestUniqueId());\n \t\t\t\ttag.setModified(true);\n \t\t\t\ttag.setAutoComponentFactory(FACTORY);\n ",
                "raw_url": "https://github.com/apache/wicket/raw/32a40bc1de5302f17bbcc19cd3ab769b0dc0f274/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/EnclosureHandler.java",
                "sha": "b29da3bef70a4499a7c830f2b446d40c5f4e4453",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/32a40bc1de5302f17bbcc19cd3ab769b0dc0f274/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java?ref=32a40bc1de5302f17bbcc19cd3ab769b0dc0f274",
                "deletions": 10,
                "filename": "wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java",
                "patch": "@@ -18,7 +18,6 @@\n \n import java.text.ParseException;\n import java.util.Iterator;\n-import java.util.concurrent.atomic.AtomicInteger;\n \n import org.apache.wicket.Component;\n import org.apache.wicket.MarkupContainer;\n@@ -109,14 +108,6 @@ public Component newComponent(MarkupContainer container, ComponentTag tag)\n \t\t}\n \t};\n \n-\t\n-\t/** \n-\t * https://issues.apache.org/jira/browse/WICKET-5724\n-\t * \n-\t * Unique index to generate new tag ids.\n-\t * */\n-\tprivate final AtomicInteger componentIndex = new AtomicInteger();\n-\n \t/**\n \t * Constructor for the IComponentResolver role.\n \t */\n@@ -164,7 +155,7 @@ protected final MarkupElement onComponentTag(ComponentTag tag) throws ParseExcep\n \t\t\t\tif (tag.getId() == null)\n \t\t\t\t{\n \t\t\t\t\ttag.setId(getWicketRelativePathPrefix(null)\n-\t\t\t\t\t\t+ componentIndex.getAndIncrement());\n+\t\t\t\t\t\t+ getRequestUniqueId());\n \t\t\t\t\ttag.setAutoComponentTag(true);\n \t\t\t\t}\n ",
                "raw_url": "https://github.com/apache/wicket/raw/32a40bc1de5302f17bbcc19cd3ab769b0dc0f274/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java",
                "sha": "554df3edb071d8a2de01aebbf1fe95e8d5a371b1",
                "status": "modified"
            }
        ],
        "message": "WICKET-5904 NPE after editing a markup file in debug mode",
        "parent": "https://github.com/apache/wicket/commit/52d99f303bea3994a28d2f08c878909ef56044f1",
        "patched_files": [
            "RelativePathPrefixHandler.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "RelativePathPrefixHandlerTest.java"
        ]
    },
    "wicket_35e9a11": {
        "bug_id": "wicket_35e9a11",
        "commit": "https://github.com/apache/wicket/commit/35e9a11b577db1cd427bc893fb4d95f091ead2b1",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/wicket/blob/35e9a11b577db1cd427bc893fb4d95f091ead2b1/wicket-core/src/main/java/org/apache/wicket/page/PersistentPageManager.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/page/PersistentPageManager.java?ref=35e9a11b577db1cd427bc893fb4d95f091ead2b1",
                "deletions": 16,
                "filename": "wicket-core/src/main/java/org/apache/wicket/page/PersistentPageManager.java",
                "patch": "@@ -218,26 +218,29 @@ private void writeObject(final ObjectOutputStream s) throws IOException\n \t\t\ts.defaultWriteObject();\n \n \t\t\t// prepare for serialization and store the pages\n-\t\t\tList<Serializable> l = new ArrayList<Serializable>();\n-\t\t\tIPageStore pageStore = getPageStore();\n-\t\t\tfor (IManageablePage p : pages)\n+\t\t\tList<Serializable> serializedPages = new ArrayList<Serializable>();\n+\t\t\tif (pages != null)\n \t\t\t{\n-\t\t\t\tSerializable preparedPage;\n-\t\t\t\tif (pageStore != null)\n-\t\t\t\t{\n-\t\t\t\t\tpreparedPage = pageStore.prepareForSerialization(sessionId, p);\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tpreparedPage = p;\n-\t\t\t\t}\n-\n-\t\t\t\tif (preparedPage != null)\n+\t\t\t\tIPageStore pageStore = getPageStore();\n+\t\t\t\tfor (IManageablePage p : pages)\n \t\t\t\t{\n-\t\t\t\t\tl.add(preparedPage);\n+\t\t\t\t\tSerializable preparedPage;\n+\t\t\t\t\tif (pageStore != null)\n+\t\t\t\t\t{\n+\t\t\t\t\t\tpreparedPage = pageStore.prepareForSerialization(sessionId, p);\n+\t\t\t\t\t}\n+\t\t\t\t\telse\n+\t\t\t\t\t{\n+\t\t\t\t\t\tpreparedPage = p;\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tif (preparedPage != null)\n+\t\t\t\t\t{\n+\t\t\t\t\t\tserializedPages.add(preparedPage);\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n-\t\t\ts.writeObject(l);\n+\t\t\ts.writeObject(serializedPages);\n \t\t}\n \n \t\t/**",
                "raw_url": "https://github.com/apache/wicket/raw/35e9a11b577db1cd427bc893fb4d95f091ead2b1/wicket-core/src/main/java/org/apache/wicket/page/PersistentPageManager.java",
                "sha": "c9fd4731e98007ad423cb7d7783425725c8e1033",
                "status": "modified"
            }
        ],
        "message": "WICKET-3691 NPE in PersistentPageManager.SessionEntry.writeObject(ObjectOutputStream) when using embedded Tomcat\n\nAdd check for pages == null.\nRename local variable to have more meaningful name (l -> serializedPages).\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1101019 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/af9cae20fa58d20fd8e833e0366ad99f4207bb9c",
        "patched_files": [
            "PersistentPageManager.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "PersistentPageManagerTest.java"
        ]
    },
    "wicket_381b90f": {
        "bug_id": "wicket_381b90f",
        "commit": "https://github.com/apache/wicket/commit/381b90fd0a55e40983d0e826139363a7d965ee0e",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/wicket/blob/381b90fd0a55e40983d0e826139363a7d965ee0e/wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java?ref=381b90fd0a55e40983d0e826139363a7d965ee0e",
                "deletions": 2,
                "filename": "wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java",
                "patch": "@@ -19,6 +19,7 @@\n import javax.servlet.http.Cookie;\n \n import org.apache.wicket.util.lang.Args;\n+import org.apache.wicket.util.lang.Objects;\n \n /**\n  * A helper class for dealing with cookies\n@@ -59,7 +60,7 @@ public static boolean isEqual(Cookie c1, Cookie c2)\n \t\tArgs.notNull(c2, \"c2\");\n \n \t\treturn c1.getName().equals(c2.getName()) &&\n-\t\t\t\t((c1.getPath() == null && c2.getPath() == null) || (c1.getPath().equals(c2.getPath()))) &&\n-\t\t\t\t((c1.getDomain() == null && c2.getDomain() == null) || (c1.getDomain().equals(c2.getDomain())));\n+\t\t\t\tObjects.isEqual(c1.getPath(), c2.getPath()) &&\n+\t\t\t\tObjects.isEqual(c1.getDomain(), c2.getDomain());\n \t}\n }",
                "raw_url": "https://github.com/apache/wicket/raw/381b90fd0a55e40983d0e826139363a7d965ee0e/wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java",
                "sha": "d3a8a6e17e889aca52c09cb0b9673d815f231a39",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/wicket/blob/381b90fd0a55e40983d0e826139363a7d965ee0e/wicket-core/src/test/java/org/apache/wicket/protocol/http/mock/CookiesTest.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/test/java/org/apache/wicket/protocol/http/mock/CookiesTest.java?ref=381b90fd0a55e40983d0e826139363a7d965ee0e",
                "deletions": 0,
                "filename": "wicket-core/src/test/java/org/apache/wicket/protocol/http/mock/CookiesTest.java",
                "patch": "@@ -0,0 +1,33 @@\n+package org.apache.wicket.protocol.http.mock;\n+\n+import javax.servlet.http.Cookie;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Tests for Cookies helper class\n+ */\n+public class CookiesTest extends Assert\n+{\n+\t@Test\n+\tpublic void testIsEqual() throws Exception\n+\t{\n+\t\tCookie c1 = new Cookie(\"Name\", \"Value\");\n+\t\tCookie c2 = new Cookie(\"Name\", \"Value\");\n+\n+\t\tassertTrue(Cookies.isEqual(c1, c2));\n+\n+\t\tc2.setPath(\"Path\");\n+\t\tassertFalse(Cookies.isEqual(c1, c2));\n+\n+\t\tc1.setPath(\"Path\");\n+\t\tassertTrue(Cookies.isEqual(c1, c2));\n+\n+\t\tc2.setDomain(\"Domain\");\n+\t\tassertFalse(Cookies.isEqual(c1, c2));\n+\n+\t\tc1.setDomain(\"Domain\");\n+\t\tassertTrue(Cookies.isEqual(c1, c2));\n+\t}\n+}",
                "raw_url": "https://github.com/apache/wicket/raw/381b90fd0a55e40983d0e826139363a7d965ee0e/wicket-core/src/test/java/org/apache/wicket/protocol/http/mock/CookiesTest.java",
                "sha": "9e7755bf1638998e8e3ad218412f0a7591393b80",
                "status": "added"
            }
        ],
        "message": "WICKET-5072 Cookies#isEqual(Cookie, Cookie) may fail with NullPointerException",
        "parent": "https://github.com/apache/wicket/commit/b1e68de911c0ccb71df58a6744bf3ad18c2f265d",
        "patched_files": [
            "Cookies.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "CookiesTest.java"
        ]
    },
    "wicket_3b14566": {
        "bug_id": "wicket_3b14566",
        "commit": "https://github.com/apache/wicket/commit/3b1456662e3c75aa492921157c989e63e40f2a79",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/wicket/blob/3b1456662e3c75aa492921157c989e63e40f2a79/wicket/src/java/wicket/Localizer.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/Localizer.java?ref=3b1456662e3c75aa492921157c989e63e40f2a79",
                "deletions": 4,
                "filename": "wicket/src/java/wicket/Localizer.java",
                "patch": "@@ -93,7 +93,7 @@ public void propertiesLoaded(final String key)\n \t * @param key\n \t *            The key to obtain the resource for\n \t * @param component\n-\t *            The component to get the resource for (optional)\n+\t *            The component to get the resource for\n \t * @return The string resource\n \t * @throws MissingResourceException\n \t *             If resource not found and configuration dictates that\n@@ -111,7 +111,7 @@ public String getString(final String key, final Component component)\n \t * @param key\n \t *            The key to obtain the resource for\n \t * @param component\n-\t *            The component to get the resource for (optional)\n+\t *            The component to get the resource for\n \t * @param model\n \t *            The model to use for OGNL substitutions in the strings\n \t *            (optional)\n@@ -132,7 +132,7 @@ public String getString(final String key, final Component component, final IMode\n \t * @param key\n \t *            The key to obtain the resource for\n \t * @param component\n-\t *            The component to get the resource for (optional)\n+\t *            The component to get the resource for\n \t * @param model\n \t *            The model to use for OGNL substitutions in the strings\n \t *            (optional)\n@@ -156,7 +156,7 @@ public String getString(final String key, final Component component, final IMode\n \t * @param key\n \t *            The key to obtain the resource for\n \t * @param component\n-\t *            The component to get the resource for (optional)\n+\t *            The component to get the resource for\n \t * @param defaultValue\n \t *            The default value (optional)\n \t * @return The string resource",
                "raw_url": "https://github.com/apache/wicket/raw/3b1456662e3c75aa492921157c989e63e40f2a79/wicket/src/java/wicket/Localizer.java",
                "sha": "f83752067143e8814b52d383e016053ec7a10462",
                "status": "modified"
            }
        ],
        "message": "fixed: javadoc changed: [ 1350108 ] NPE in wicket.Localizer.getString()\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@458241 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/c2cde5946a27fdaf3904545871ce776f27958748",
        "patched_files": [
            "Localizer.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "LocalizerTest.java"
        ]
    },
    "wicket_3dd37b3": {
        "bug_id": "wicket_3dd37b3",
        "commit": "https://github.com/apache/wicket/commit/3dd37b3fb67a44cc44390848d18a96ebd3db220e",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/wicket/blob/3dd37b3fb67a44cc44390848d18a96ebd3db220e/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java?ref=3dd37b3fb67a44cc44390848d18a96ebd3db220e",
                "deletions": 3,
                "filename": "wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "patch": "@@ -727,8 +727,8 @@ public MarkupContainer replace(final Component child)\n \n \t\tif (child.getParent() != this)\n \t\t{\n-\t\t\t// Add to map\n-\t\t\tfinal Component replaced = put(child);\n+\t\t\t// Get the child component to replace\n+\t\t\tfinal Component replaced = children_get(child.getId());\n \n \t\t\t// Look up to make sure it was already in the map\n \t\t\tif (replaced == null)\n@@ -737,7 +737,10 @@ public MarkupContainer replace(final Component child)\n \t\t\t\t\texceptionMessage(\"Cannot replace a component which has not been added: id='\" +\n \t\t\t\t\t\tchild.getId() + \"', component=\" + child));\n \t\t\t}\n-\n+\t\t\t\n+\t\t\t// Add to map\n+\t\t\tput(child);\n+\t\t\t\n \t\t\t// first remove the component.\n \t\t\tremovedComponent(replaced);\n ",
                "raw_url": "https://github.com/apache/wicket/raw/3dd37b3fb67a44cc44390848d18a96ebd3db220e/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "sha": "c01b90e4e56a54735917313c4c0ce8cc91a77dfa",
                "status": "modified"
            }
        ],
        "message": "WICKET-5912 NPE in Page#hasInvisibleTransparentChild",
        "parent": "https://github.com/apache/wicket/commit/5c5490dafbc29748abfda0441e002fe456c1ff31",
        "patched_files": [
            "MarkupContainer.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "MarkupContainerTest.java"
        ]
    },
    "wicket_3f0e3c7": {
        "bug_id": "wicket_3f0e3c7",
        "commit": "https://github.com/apache/wicket/commit/3f0e3c7d94e8729f4d1ac30839481d653cbcf651",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/3f0e3c7d94e8729f4d1ac30839481d653cbcf651/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/INamedParameters.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/INamedParameters.java?ref=3f0e3c7d94e8729f4d1ac30839481d653cbcf651",
                "deletions": 1,
                "filename": "wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/INamedParameters.java",
                "patch": "@@ -59,7 +59,7 @@\n \t * @author Matej Knopp\r\n \t */\r\n \t@SuppressWarnings(\"serial\")\r\n-\tpublic static class NamedPair implements IClusterable\r\n+\tclass NamedPair implements IClusterable\r\n \t{\r\n \t\tprivate final String key;\r\n \t\tprivate final String value;\r",
                "raw_url": "https://github.com/apache/wicket/raw/3f0e3c7d94e8729f4d1ac30839481d653cbcf651/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/INamedParameters.java",
                "sha": "000e34f8731abdb16387e78b596f4e25c48e2ffe",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/3f0e3c7d94e8729f4d1ac30839481d653cbcf651/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParameters.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParameters.java?ref=3f0e3c7d94e8729f4d1ac30839481d653cbcf651",
                "deletions": 0,
                "filename": "wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParameters.java",
                "patch": "@@ -467,6 +467,8 @@ else if (!indexedParameters.equals(other.indexedParameters))\n \t\t\tif (other.namedParameters != null)\n \t\t\t\treturn false;\n \t\t}\n+\t\telse if (other.namedParameters == null)\n+\t\t\treturn false;\n \t\telse if (!CollectionUtils.isEqualCollection(namedParameters, other.namedParameters))\n \t\t\treturn false;\n \t\treturn true;",
                "raw_url": "https://github.com/apache/wicket/raw/3f0e3c7d94e8729f4d1ac30839481d653cbcf651/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParameters.java",
                "sha": "c985dcbc7db2466013a180e80c64b20d56c61738",
                "status": "modified"
            },
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/wicket/blob/3f0e3c7d94e8729f4d1ac30839481d653cbcf651/wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersTest.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersTest.java?ref=3f0e3c7d94e8729f4d1ac30839481d653cbcf651",
                "deletions": 1,
                "filename": "wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersTest.java",
                "patch": "@@ -18,6 +18,7 @@\n \n import static org.hamcrest.CoreMatchers.equalTo;\n import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.not;\n \n import java.util.List;\n \n@@ -300,7 +301,7 @@ public void equality()\n \t * https://issues.apache.org/jira/browse/WICKET-6283\n \t */\n \t@Test\n-\tpublic void equalityOfDiferenteNamedParametersOrder()\n+\tpublic void equalityOfDifferentNamedParametersOrder()\n \t{\n \t\tPageParameters p1 = new PageParameters()\n \t\t\t\t.add(\"a\", \"b\")\n@@ -313,6 +314,38 @@ public void equalityOfDiferenteNamedParametersOrder()\n \t\tassertThat(p1, is(equalTo(p2)));\n \t}\n \n+\t/**\n+\t * namedParameters equality should handle null namedParameters instance.\n+\t *\n+\t * https://issues.apache.org/jira/browse/WICKET-6332\n+\t */\n+\t@Test\n+\tpublic void equalityWithEmptyNamedParameters()\n+\t{\n+\t\tPageParameters p1 = new PageParameters()\n+\t\t\t\t.add(\"a\", \"b\");\n+\n+\t\tPageParameters p2 = new PageParameters();\n+\n+\t\tassertThat(p1, is(not(equalTo(p2))));\n+\t}\n+\n+\t/**\n+\t * indexedParameters equality should handle null namedParameters instance.\n+\t *\n+\t * https://issues.apache.org/jira/browse/WICKET-6332\n+\t */\n+\t@Test\n+\tpublic void equalityWithEmptyIndexedParameters()\n+\t{\n+\t\tPageParameters p1 = new PageParameters()\n+\t\t\t\t.set(0, \"b\");\n+\n+\t\tPageParameters p2 = new PageParameters();\n+\n+\t\tassertThat(p1, is(not(equalTo(p2))));\n+\t}\n+\n \t/**\n \t * NamedPairs hashCode should not depend on the type\n \t *",
                "raw_url": "https://github.com/apache/wicket/raw/3f0e3c7d94e8729f4d1ac30839481d653cbcf651/wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersTest.java",
                "sha": "d390eeee73b66ddf916ed1cc5c4c5184ef249800",
                "status": "modified"
            }
        ],
        "message": "WICKET-6332 NullPointerException in PageParameters#equals()",
        "parent": "https://github.com/apache/wicket/commit/21ae5a9fb26eba66e593bf8566004c9296548001",
        "patched_files": [
            "PageParameters.java",
            "INamedParameters.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "PageParametersTest.java"
        ]
    },
    "wicket_40790b6": {
        "bug_id": "wicket_40790b6",
        "commit": "https://github.com/apache/wicket/commit/40790b6e424b74008247900402c80ce1201c0806",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/wicket/blob/40790b6e424b74008247900402c80ce1201c0806/jdk-1.4/wicket-velocity/src/main/java/org/apache/wicket/velocity/markup/html/VelocityPanel.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket-velocity/src/main/java/org/apache/wicket/velocity/markup/html/VelocityPanel.java?ref=40790b6e424b74008247900402c80ce1201c0806",
                "deletions": 1,
                "filename": "jdk-1.4/wicket-velocity/src/main/java/org/apache/wicket/velocity/markup/html/VelocityPanel.java",
                "patch": "@@ -81,11 +81,19 @@ public VelocityPanel(final String name, final IModel/* <Map> */model)\n \t */\n \tprivate Reader getTemplateReader()\n \t{\n-\t\tfinal String template = getTemplateResource().asString();\n+\t\tfinal IStringResourceStream resource = getTemplateResource();\n+\t\tif (resource == null)\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"getTemplateResource must return a resource\");\n+\t\t}\n+\n+\t\tfinal String template = resource.asString();\n \t\tif (template != null)\n \t\t{\n \t\t\treturn new StringReader(template);\n \t\t}\n+\n \t\treturn null;\n \t}\n ",
                "raw_url": "https://github.com/apache/wicket/raw/40790b6e424b74008247900402c80ce1201c0806/jdk-1.4/wicket-velocity/src/main/java/org/apache/wicket/velocity/markup/html/VelocityPanel.java",
                "sha": "64eef4ce7670002f4dfccd1e0d74b67a7283e4a0",
                "status": "modified"
            }
        ],
        "message": "throw exception with message rather than NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@535928 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/e6f106f7abb5bc78aa1634ff57e212acdd9588c0",
        "patched_files": [
            "VelocityPanel.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "VelocityPanelTest.java"
        ]
    },
    "wicket_42a640a": {
        "bug_id": "wicket_42a640a",
        "commit": "https://github.com/apache/wicket/commit/42a640a57b4a773f2507bbb485ca24dd5fb0dfc5",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/wicket/blob/42a640a57b4a773f2507bbb485ca24dd5fb0dfc5/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Check.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Check.java?ref=42a640a57b4a773f2507bbb485ca24dd5fb0dfc5",
                "deletions": 10,
                "filename": "wicket-core/src/main/java/org/apache/wicket/markup/html/form/Check.java",
                "patch": "@@ -174,19 +174,15 @@ protected void onComponentTag(final ComponentTag tag)\n \t\t\t\t\"] contains a null model object, must be an object of type java.util.Collection\");\n \t\t}\n \n-\t\tif (group.hasRawInput())\n+\t\tfinal String raw = group.getRawInput();\n+\t\tif (!Strings.isEmpty(raw))\n \t\t{\n-\t\t\t// Wicket-2949 getInputAsArray() might not be the raw input\n-\t\t\tfinal String[] inputArray = group.getRawInput().split(FormComponent.VALUE_SEPARATOR);\n-\n-\t\t\tif (inputArray != null)\n+\t\t\tfinal String[] values = raw.split(FormComponent.VALUE_SEPARATOR);\n+\t\t\tfor (String value : values)\n \t\t\t{\n-\t\t\t\tfor (String input : inputArray)\n+\t\t\t\tif (uuid.equals(value))\n \t\t\t\t{\n-\t\t\t\t\tif (uuid.equals(input))\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttag.put(\"checked\", \"checked\");\n-\t\t\t\t\t}\n+\t\t\t\t\ttag.put(\"checked\", \"checked\");\n \t\t\t\t}\n \t\t\t}\n \t\t}",
                "raw_url": "https://github.com/apache/wicket/raw/42a640a57b4a773f2507bbb485ca24dd5fb0dfc5/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Check.java",
                "sha": "f0f6b1c3771ba057eeb31398d0bfc7226e7afb73",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/wicket/blob/42a640a57b4a773f2507bbb485ca24dd5fb0dfc5/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/select/Select.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/select/Select.java?ref=42a640a57b4a773f2507bbb485ca24dd5fb0dfc5",
                "deletions": 11,
                "filename": "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/select/Select.java",
                "patch": "@@ -221,22 +221,19 @@ boolean isSelected(final SelectOption<?> option)\n \t\tArgs.notNull(option, \"option\");\n \n \t\t// if the raw input is specified use that, otherwise use model\n-\t\tif (hasRawInput())\n+\t\tfinal String raw = getRawInput();\n+\t\tif (!Strings.isEmpty(raw))\n \t\t{\n-\t\t\t// Wicket-2949 getInputAsArray() might not be the raw input\n-\t\t\tString[] values = getRawInput().split(VALUE_SEPARATOR);\n-\t\t\tif (values != null && values.length > 0)\n+\t\t\tString[] values = raw.split(VALUE_SEPARATOR);\n+\t\t\tfor (int i = 0; i < values.length; i++)\n \t\t\t{\n-\t\t\t\tfor (int i = 0; i < values.length; i++)\n+\t\t\t\tString value = values[i];\n+\t\t\t\tif (value.equals(option.getValue()))\n \t\t\t\t{\n-\t\t\t\t\tString value = values[i];\n-\t\t\t\t\tif (value.equals(option.getValue()))\n-\t\t\t\t\t{\n-\t\t\t\t\t\treturn true;\n-\t\t\t\t\t}\n+\t\t\t\t\treturn true;\n \t\t\t\t}\n-\t\t\t\treturn false;\n \t\t\t}\n+\t\t\treturn false;\n \t\t}\n \n \t\treturn compareModels(getDefaultModelObject(), option.getDefaultModelObject());",
                "raw_url": "https://github.com/apache/wicket/raw/42a640a57b4a773f2507bbb485ca24dd5fb0dfc5/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/select/Select.java",
                "sha": "45f8b373938ff16c9ac32e89cfb5baa6d2b84394",
                "status": "modified"
            }
        ],
        "message": "AAU-2949 fix NPE. hasRawInput() can return null for check boxes...",
        "parent": "https://github.com/apache/wicket/commit/b2dc52d6f522ad9c9aabcd6f25c1242f5071bc25",
        "patched_files": [
            "Select.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "SelectTest.java"
        ]
    },
    "wicket_44f3c5f": {
        "bug_id": "wicket_44f3c5f",
        "commit": "https://github.com/apache/wicket/commit/44f3c5f7217f2c83e1eb4c80f3680964fe1c03d7",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/wicket/blob/44f3c5f7217f2c83e1eb4c80f3680964fe1c03d7/wicket/src/test/wicket/WicketTestCase.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/WicketTestCase.java?ref=44f3c5f7217f2c83e1eb4c80f3680964fe1c03d7",
                "deletions": 1,
                "filename": "wicket/src/test/wicket/WicketTestCase.java",
                "patch": "@@ -49,7 +49,6 @@ public WicketTestCase(String name)\n \tprotected void setUp() throws Exception\n \t{\n \t\tapplication = new MockWebApplication(null);\n-\t\tapplication.createRequestCycle();\n \t}\n \n \t/**",
                "raw_url": "https://github.com/apache/wicket/raw/44f3c5f7217f2c83e1eb4c80f3680964fe1c03d7/wicket/src/test/wicket/WicketTestCase.java",
                "sha": "da879462a94e3827b933781d8333ea47a765c242",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/wicket/blob/44f3c5f7217f2c83e1eb4c80f3680964fe1c03d7/wicket/src/test/wicket/model/StringResourceModelTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/model/StringResourceModelTest.java?ref=44f3c5f7217f2c83e1eb4c80f3680964fe1c03d7",
                "deletions": 1,
                "filename": "wicket/src/test/wicket/model/StringResourceModelTest.java",
                "patch": "@@ -62,7 +62,6 @@ protected void setUp() throws Exception\n \t\tapplication = new MockWebApplication(null);\n \t\tapplication.getResourceSettings().addStringResourceLoader(\n \t\t\t\tnew BundleStringResourceLoader(\"wicket.model.StringResourceModelTest\"));\n-\t\tapplication.createRequestCycle();\n \t\tpage = new MockPage();\n \t\tws = new WeatherStation();\n \t\twsModel = new Model(ws);",
                "raw_url": "https://github.com/apache/wicket/raw/44f3c5f7217f2c83e1eb4c80f3680964fe1c03d7/wicket/src/test/wicket/model/StringResourceModelTest.java",
                "sha": "49fe9e069671e555f1b7b21e6855cdacf70abf81",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/wicket/blob/44f3c5f7217f2c83e1eb4c80f3680964fe1c03d7/wicket/src/test/wicket/resource/StringResourceLoaderTestBase.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/resource/StringResourceLoaderTestBase.java?ref=44f3c5f7217f2c83e1eb4c80f3680964fe1c03d7",
                "deletions": 6,
                "filename": "wicket/src/test/wicket/resource/StringResourceLoaderTestBase.java",
                "patch": "@@ -22,11 +22,7 @@\n \n import junit.framework.Assert;\n import junit.framework.TestCase;\n-import wicket.Application;\n import wicket.Component;\n-import wicket.IRequestCycleFactory;\n-import wicket.RequestCycle;\n-import wicket.Session;\n import wicket.resource.loader.IStringResourceLoader;\n \n /**\n@@ -65,12 +61,10 @@ protected void setUp() throws Exception\n \t{\n \t\tsuper.setUp();\n \t\tthis.application = new DummyApplication();\n-\t\tthis.application.createRequestCycle();\n \t\tthis.component = new DummyComponent(\"test\", this.application);\n \t\tDummyPage page = new DummyPage();\n \t\tpage.add(this.component);\n \t\tthis.loader = createLoader();\n-\n \t}\n \n \t/**",
                "raw_url": "https://github.com/apache/wicket/raw/44f3c5f7217f2c83e1eb4c80f3680964fe1c03d7/wicket/src/test/wicket/resource/StringResourceLoaderTestBase.java",
                "sha": "9968accc197e8ca00bd93e2fee2b8031de246822",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/wicket/blob/44f3c5f7217f2c83e1eb4c80f3680964fe1c03d7/wicket/src/test/wicket/util/tester/WicketTesterTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/util/tester/WicketTesterTest.java?ref=44f3c5f7217f2c83e1eb4c80f3680964fe1c03d7",
                "deletions": 1,
                "filename": "wicket/src/test/wicket/util/tester/WicketTesterTest.java",
                "patch": "@@ -138,7 +138,6 @@ public Page getTestPage()\n \tpublic void testPageConstructor() throws Exception\n \t{\n \t\tMyMockApplication tester = new MyMockApplication();\n-\t\ttester.createRequestCycle();\n \t\tBook mockBook = new Book(\"xxId\", \"xxName\");\n \t\tPage page = new ViewBook(mockBook);\n \t\ttester.startPage(page);",
                "raw_url": "https://github.com/apache/wicket/raw/44f3c5f7217f2c83e1eb4c80f3680964fe1c03d7/wicket/src/test/wicket/util/tester/WicketTesterTest.java",
                "sha": "a8780780fb3614bf1ca121561e79a51d5b4f74e3",
                "status": "modified"
            }
        ],
        "message": "avoid NPE, lazy create SessionStore and move creation of request cycle which is now required to create page to \na central place (MockWebApplication)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@460207 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/7e2b92ff6cdc839832d514c3a41e716051e558cf",
        "patched_files": [
            "StringResourceModel.java",
            "WicketTestCase.java",
            "StringResourceLoaderTestBase.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "WicketTesterTest.java",
            "StringResourceModelTest.java"
        ]
    },
    "wicket_4b8ac4c": {
        "bug_id": "wicket_4b8ac4c",
        "commit": "https://github.com/apache/wicket/commit/4b8ac4c8cc14f2926312e2572fee4299256e7b11",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/4b8ac4c8cc14f2926312e2572fee4299256e7b11/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/AbstractWebSocketProcessor.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/AbstractWebSocketProcessor.java?ref=4b8ac4c8cc14f2926312e2572fee4299256e7b11",
                "deletions": 1,
                "filename": "wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/AbstractWebSocketProcessor.java",
                "patch": "@@ -102,7 +102,7 @@\n \t */\n \tpublic AbstractWebSocketProcessor(final HttpServletRequest request, final WebApplication application)\n \t{\n-\t\tfinal HttpSession httpSession = request.getSession(false);\n+\t\tfinal HttpSession httpSession = request.getSession(true);\n \t\tif (httpSession == null)\n \t\t{\n \t\t\tthrow new IllegalStateException(\"There is no HTTP Session bound. Without a session Wicket won't be \" +",
                "raw_url": "https://github.com/apache/wicket/raw/4b8ac4c8cc14f2926312e2572fee4299256e7b11/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/AbstractWebSocketProcessor.java",
                "sha": "ca3569d63a39727e6a6a4cc2430ac1e1f64f6253",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/4b8ac4c8cc14f2926312e2572fee4299256e7b11/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/util/tester/WebSocketTester.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/util/tester/WebSocketTester.java?ref=4b8ac4c8cc14f2926312e2572fee4299256e7b11",
                "deletions": 1,
                "filename": "wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/util/tester/WebSocketTester.java",
                "patch": "@@ -39,7 +39,7 @@\n \n \t/**\n \t * Constructor.\n-\t * Prepares a WebSockConnection that will be used to send messages from the client (the test case)\n+\t * Prepares a WebSocketConnection that will be used to send messages from the client (the test case)\n \t * to the server.\n \t *\n \t * @param page",
                "raw_url": "https://github.com/apache/wicket/raw/4b8ac4c8cc14f2926312e2572fee4299256e7b11/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/util/tester/WebSocketTester.java",
                "sha": "f83894f77921f632724c199cfcd8e7c33571c901",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/wicket/blob/4b8ac4c8cc14f2926312e2572fee4299256e7b11/wicket-native-websocket/wicket-native-websocket-core/src/test/java/org/apache/wicket/protocol/ws/util/tester/WebSocketTesterProcessorTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-native-websocket/wicket-native-websocket-core/src/test/java/org/apache/wicket/protocol/ws/util/tester/WebSocketTesterProcessorTest.java?ref=4b8ac4c8cc14f2926312e2572fee4299256e7b11",
                "deletions": 1,
                "filename": "wicket-native-websocket/wicket-native-websocket-core/src/test/java/org/apache/wicket/protocol/ws/util/tester/WebSocketTesterProcessorTest.java",
                "patch": "@@ -100,7 +100,6 @@ public void onConnectNoOrigin()\n \t\tassertTrue(TestWebSocketResource.ON_ABORT_CALLED.get());\n \t}\n \n-//\t@Ignore\n \t@Test\n \tpublic void onConnectMultipleOrigins()\n \t{",
                "raw_url": "https://github.com/apache/wicket/raw/4b8ac4c8cc14f2926312e2572fee4299256e7b11/wicket-native-websocket/wicket-native-websocket-core/src/test/java/org/apache/wicket/protocol/ws/util/tester/WebSocketTesterProcessorTest.java",
                "sha": "0a7dd1041ef8b0d4859042dd57bcca4986437c2d",
                "status": "modified"
            }
        ],
        "message": "WICKET-6483 JavaxUpgradeHttpRequest can cause NullPointerException\n\nWICKET-6493 WebSocket SessionIds are wrong (HttpSession one used instead of Websocket one) + NPE if no HttpSession is found during Handshake Request\n\nRevert the change to use 'request.getSession(false) because this breaks WicketTester/WebSocketTester infrastructure",
        "parent": "https://github.com/apache/wicket/commit/39d7ac1f80c4ea5366e91eb0fd6deceb219e1b26",
        "patched_files": [
            "AbstractWebSocketProcessor.java",
            "WebSocketTester.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "WebSocketTesterProcessorTest.java"
        ]
    },
    "wicket_4fc4621": {
        "bug_id": "wicket_4fc4621",
        "commit": "https://github.com/apache/wicket/commit/4fc462187d294222372ef73951c5d4c849c148d5",
        "file": [
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/wicket/blob/4fc462187d294222372ef73951c5d4c849c148d5/wicket/src/main/java/wicket/RequestCycle.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/wicket/RequestCycle.java?ref=4fc462187d294222372ef73951c5d4c849c148d5",
                "deletions": 12,
                "filename": "wicket/src/main/java/wicket/RequestCycle.java",
                "patch": "@@ -890,14 +890,6 @@ private void detach()\n \t\t// clear the used pagemap for this thread, \n \t\t// maybe we can move this a few lines above to have a but more\n \t\t// concurrency (session.update)\n-\t\ttry\n-\t\t{\n-\t\t\tsession.requestDetached();\n-\t\t}\n-\t\tcatch(RuntimeException re)\n-\t\t{\n-\t\t\tlog.error(\"there was an error detaching the request from the session \" + session + \".\", re);\n-\t\t}\n \t\tif (getResponse() instanceof BufferedWebResponse)\n \t\t{\n \t\t\ttry\n@@ -910,12 +902,28 @@ private void detach()\n \t\t\t}\n \t\t}\n \n-\t\tIRequestLogger requestLogger = getApplication().getRequestLogger();\n-\t\tif (requestLogger != null)\n+\t\ttry\n \t\t{\n-\t\t\trequestLogger.requestTime((System.currentTimeMillis() - startTime));\n+\t\t\tIRequestLogger requestLogger = getApplication().getRequestLogger();\n+\t\t\tif (requestLogger != null)\n+\t\t\t{\n+\t\t\t\trequestLogger.requestTime((System.currentTimeMillis() - startTime));\n+\t\t\t}\n \t\t}\n-\t\t\n+\t\tcatch(RuntimeException re)\n+\t\t{\n+\t\t\tlog.error(\"there was an error in the RequestLogger ending.\", re);\n+\t\t}\n+\n+\t\ttry\n+\t\t{\n+\t\t\tsession.requestDetached();\n+\t\t}\n+\t\tcatch(RuntimeException re)\n+\t\t{\n+\t\t\tlog.error(\"there was an error detaching the request from the session \" + session + \".\", re);\n+\t\t}\n+\n \t\ttry\n \t\t{\n \t\t\tonEndRequest();",
                "raw_url": "https://github.com/apache/wicket/raw/4fc462187d294222372ef73951c5d4c849c148d5/wicket/src/main/java/wicket/RequestCycle.java",
                "sha": "2cadf154c26b9eb5c6c645cab720bae1745beca3",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/wicket/blob/4fc462187d294222372ef73951c5d4c849c148d5/wicket/src/main/java/wicket/protocol/http/RequestLogger.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/wicket/protocol/http/RequestLogger.java?ref=4fc462187d294222372ef73951c5d4c849c148d5",
                "deletions": 10,
                "filename": "wicket/src/main/java/wicket/protocol/http/RequestLogger.java",
                "patch": "@@ -202,28 +202,28 @@ public void requestTime(long timeTaken)\n \t\tRequestData rd = (RequestData)currentRequest.get();\n \t\tif(rd != null)\n \t\t{\n+\t\t\tsynchronized (this)\n+\t\t\t{\n+\t\t\t\tif(active > 0)\n+\t\t\t\t{\n+\t\t\t\t\trd.setActiveRequest(active--);\n+\t\t\t\t}\n+\t\t\t}\n \t\t\tSession session = Session.get();\n \t\t\tString sessionId = session.getId();\n \t\t\trd.setSessionId(sessionId);\n-\t\t\t\n+\n \t\t\tObject sessionInfo = getSessionInfo(session);\n \t\t\trd.setSessionInfo(sessionInfo);\n-\t\t\t\n+\n \t\t\tlong sizeInBytes = -1;\n \t\t\tif(Application.get().getRequestLoggerSettings().getRecordSessionSize())\n \t\t\t{\n \t\t\t\tsizeInBytes = session.getSizeInBytes();\n \t\t\t}\n \t\t\trd.setSessionSize(sizeInBytes);\n \t\t\trd.setTimeTaken(timeTaken);\n-\t\t\tsynchronized (this)\n-\t\t\t{\n-\t\t\t\tif(active > 0)\n-\t\t\t\t{\n-\t\t\t\t\trd.setActiveRequest(active--);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t\n+\n \t\t\trequests.add(0, rd);\n \t\t\tcurrentRequest.set(null);\n \t\t\tif(sessionId != null)",
                "raw_url": "https://github.com/apache/wicket/raw/4fc462187d294222372ef73951c5d4c849c148d5/wicket/src/main/java/wicket/protocol/http/RequestLogger.java",
                "sha": "77402191b69e23c326d5aecd6c427062ad4baf79",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/wicket/blob/4fc462187d294222372ef73951c5d4c849c148d5/wicket/src/main/java/wicket/util/lang/Objects.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/wicket/util/lang/Objects.java?ref=4fc462187d294222372ef73951c5d4c849c148d5",
                "deletions": 2,
                "filename": "wicket/src/main/java/wicket/util/lang/Objects.java",
                "patch": "@@ -1052,16 +1052,18 @@ public static Number newInteger(int type, long value)\n \t */\n \tpublic static long sizeof(final Object object)\n \t{\n+\t\tif (object == null) return 0;\n \t\ttry\n \t\t{\n \t\t\tfinal ByteCountingOutputStream out = new ByteCountingOutputStream();\n \t\t\tnew ObjectOutputStream(out).writeObject(object);\n \t\t\tout.close();\n \t\t\treturn out.size();\n \t\t}\n-\t\tcatch (IOException e)\n+\t\tcatch (Exception e)\n \t\t{\n-\t\t\treturn -1;\n+\t\t\tlog.warn(\"Size of failed of object: \" + object.getClass().getName(), e);\n+\t\t\treturn 0;\n \t\t}\n \t}\n ",
                "raw_url": "https://github.com/apache/wicket/raw/4fc462187d294222372ef73951c5d4c849c148d5/wicket/src/main/java/wicket/util/lang/Objects.java",
                "sha": "c5f166c38b1712e073263b39c2eeb0918020ad19",
                "status": "modified"
            }
        ],
        "message": "WICKET-241, WICKET-240, all stages in requestcycle called again by wrapping methods that can generate exceptions in a try/catch block. Possible NPE's in calculation of size also captured, which was the cause of resource leaks (e.g. non-closed database connections when resource clean up is done in requestcycle.detach)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/branches/wicket-1.x@501911 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/697a5cf7909733bc41f176dfc8969f96144713ee",
        "patched_files": [
            "Objects.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "ObjectsTest.java"
        ]
    },
    "wicket_4fe91d8": {
        "bug_id": "wicket_4fe91d8",
        "commit": "https://github.com/apache/wicket/commit/4fe91d81aee44702ad547920f3ed48982eeeeec2",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/4fe91d81aee44702ad547920f3ed48982eeeeec2/wicket/src/java/wicket/Localizer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/Localizer.java?ref=4fe91d81aee44702ad547920f3ed48982eeeeec2",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/Localizer.java",
                "patch": "@@ -405,7 +405,7 @@ private List getComponentStack(final Component component)\n \t\tif (!(component instanceof Page))\n \t\t{\n \t\t\tMarkupContainer container = component.getParent();\n-\t\t\twhile (true)\n+\t\t\twhile (container != null)\n \t\t\t{\n \t\t\t\tsearchStack.add(container.getClass());\n \t\t\t\tif (container instanceof Page)",
                "raw_url": "https://github.com/apache/wicket/raw/4fe91d81aee44702ad547920f3ed48982eeeeec2/wicket/src/java/wicket/Localizer.java",
                "sha": "7dc2b13dc0448b0321e56d9e3b4fe4f806ae7fb8",
                "status": "modified"
            }
        ],
        "message": "fixed NPE if getParent() returned null\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@458757 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/7756a1904a49e4f850e1401be63d761a4627b28a",
        "patched_files": [
            "Localizer.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "LocalizerTest.java"
        ]
    },
    "wicket_55eb521": {
        "bug_id": "wicket_55eb521",
        "commit": "https://github.com/apache/wicket/commit/55eb52123ee45d5ffc70e3cac5e05b4400f2279e",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/55eb52123ee45d5ffc70e3cac5e05b4400f2279e/wicket-core/src/main/java/org/apache/wicket/core/util/string/ComponentRenderer.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/core/util/string/ComponentRenderer.java?ref=55eb52123ee45d5ffc70e3cac5e05b4400f2279e",
                "deletions": 0,
                "filename": "wicket-core/src/main/java/org/apache/wicket/core/util/string/ComponentRenderer.java",
                "patch": "@@ -100,6 +100,7 @@ public static CharSequence renderComponent(final Component component)\n \n \t\t\tRenderPage page = new RenderPage();\n \t\t\tpage.add(component);\n+\t\t\tpage.internalInitialize();\n \n \t\t\tcomponent.render();\n \t\t}",
                "raw_url": "https://github.com/apache/wicket/raw/55eb52123ee45d5ffc70e3cac5e05b4400f2279e/wicket-core/src/main/java/org/apache/wicket/core/util/string/ComponentRenderer.java",
                "sha": "41704a65c8cfa8e41e075062b367fcb13b3fb35f",
                "status": "modified"
            },
            {
                "additions": 39,
                "blob_url": "https://github.com/apache/wicket/blob/55eb52123ee45d5ffc70e3cac5e05b4400f2279e/wicket-core/src/test/java/org/apache/wicket/core/util/string/ComponentRendererTest.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/test/java/org/apache/wicket/core/util/string/ComponentRendererTest.java?ref=55eb52123ee45d5ffc70e3cac5e05b4400f2279e",
                "deletions": 0,
                "filename": "wicket-core/src/test/java/org/apache/wicket/core/util/string/ComponentRendererTest.java",
                "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.wicket.core.util.string;\n+\n+import org.apache.wicket.WicketTestCase;\n+import org.junit.Test;\n+\n+/**\n+ * Tests for ComponentRenderer\n+ */\n+public class ComponentRendererTest extends WicketTestCase\n+{\n+\n+\t/**\n+\t * https://issues.apache.org/jira/browse/WICKET-5209\n+\t *\n+\t * Tests that the page and the components in it are initialized.\n+\t * Enclosure won't know its child component without being initialized\n+\t */\n+\t@Test\n+\tpublic void componentsAreInitialized()\n+\t{\n+\t\tComponentRenderer.renderComponent(new EnclosurePanel(ComponentRenderer.COMP_ID));\n+\t}\n+}",
                "raw_url": "https://github.com/apache/wicket/raw/55eb52123ee45d5ffc70e3cac5e05b4400f2279e/wicket-core/src/test/java/org/apache/wicket/core/util/string/ComponentRendererTest.java",
                "sha": "80922f8f6020d03b4a67a32af1f31cf13cf7a4dd",
                "status": "added"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/wicket/blob/55eb52123ee45d5ffc70e3cac5e05b4400f2279e/wicket-core/src/test/java/org/apache/wicket/core/util/string/EnclosurePanel.html",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/test/java/org/apache/wicket/core/util/string/EnclosurePanel.html?ref=55eb52123ee45d5ffc70e3cac5e05b4400f2279e",
                "deletions": 0,
                "filename": "wicket-core/src/test/java/org/apache/wicket/core/util/string/EnclosurePanel.html",
                "patch": "@@ -0,0 +1,22 @@\n+<!--\n+    ====================================================================\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+     http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+-->\n+<!DOCTYPE html>\n+<html xmlns:wicket=\"http://wicket.apache.org/dtds.data/wicket-xhtml1.4-strict.dtd\">\n+\t<wicket:panel>\n+\t\t<wicket:enclosure child=\"externalLink\">\n+\t\t\t<a wicket:id=\"externalLink\">Google</a>\n+\t\t</wicket:enclosure>\n+\t</wicket:panel>\n+</html>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/wicket/raw/55eb52123ee45d5ffc70e3cac5e05b4400f2279e/wicket-core/src/test/java/org/apache/wicket/core/util/string/EnclosurePanel.html",
                "sha": "2977d1bd73e82d39222af38a8ef68d0b0ff38a28",
                "status": "added"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/wicket/blob/55eb52123ee45d5ffc70e3cac5e05b4400f2279e/wicket-core/src/test/java/org/apache/wicket/core/util/string/EnclosurePanel.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/test/java/org/apache/wicket/core/util/string/EnclosurePanel.java?ref=55eb52123ee45d5ffc70e3cac5e05b4400f2279e",
                "deletions": 0,
                "filename": "wicket-core/src/test/java/org/apache/wicket/core/util/string/EnclosurePanel.java",
                "patch": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.wicket.core.util.string;\n+\n+import org.apache.wicket.markup.html.link.ExternalLink;\n+import org.apache.wicket.markup.html.panel.Panel;\n+\n+class EnclosurePanel extends Panel\n+{\n+\t\n+\tprivate static final long serialVersionUID = 1L;\n+\t\n+\tprivate static final String TEST_LINK = \"http://google.com\";\n+\n+\tpublic EnclosurePanel(String id) {\n+\t\tsuper(id);\n+\t\t\n+\t\tExternalLink externalLink = new ExternalLink(\"externalLink\", TEST_LINK);\n+\t\tadd(externalLink);\n+\t}\n+}",
                "raw_url": "https://github.com/apache/wicket/raw/55eb52123ee45d5ffc70e3cac5e05b4400f2279e/wicket-core/src/test/java/org/apache/wicket/core/util/string/EnclosurePanel.java",
                "sha": "d204ed4c53b95eab3425771c57f1079b48de2406",
                "status": "added"
            }
        ],
        "message": "WICKET-5209 NPE when using ComponentRenderer.renderComponent on a panel with <wicket:enclosure>",
        "parent": "https://github.com/apache/wicket/commit/415e6debab43dc59235f54e79d6e52f62359ac66",
        "patched_files": [
            "ComponentRenderer.java",
            "EnclosurePanel.java",
            "EnclosurePanel.html"
        ],
        "repo": "wicket",
        "unit_tests": [
            "ComponentRendererTest.java"
        ]
    },
    "wicket_59b3e31": {
        "bug_id": "wicket_59b3e31",
        "commit": "https://github.com/apache/wicket/commit/59b3e318762733adea00cfe3b31c5dd25e4d2147",
        "file": [
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/wicket/blob/59b3e318762733adea00cfe3b31c5dd25e4d2147/wicket-core/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java?ref=59b3e318762733adea00cfe3b31c5dd25e4d2147",
                "deletions": 21,
                "filename": "wicket-core/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java",
                "patch": "@@ -1503,38 +1503,38 @@ protected final void validateValidators()\n \n \t\tIValidator<T> validator = null;\n \n-\t\ttry\n+\t\tfor (Behavior behavior : getBehaviors())\n \t\t{\n-\t\t\tfor (Behavior behavior : getBehaviors())\n+\t\t\tvalidator = null;\n+\t\t\tif (behavior instanceof ValidatorAdapter)\n \t\t\t{\n-\t\t\t\tvalidator = null;\n-\t\t\t\tif (behavior instanceof ValidatorAdapter)\n-\t\t\t\t{\n-\t\t\t\t\tvalidator = ((ValidatorAdapter<T>)behavior).getValidator();\n-\t\t\t\t}\n-\t\t\t\telse if (behavior instanceof IValidator)\n-\t\t\t\t{\n-\t\t\t\t\tvalidator = (IValidator<T>)behavior;\n-\t\t\t\t}\n-\t\t\t\tif (validator != null)\n+\t\t\t\tvalidator = ((ValidatorAdapter<T>)behavior).getValidator();\n+\t\t\t}\n+\t\t\telse if (behavior instanceof IValidator)\n+\t\t\t{\n+\t\t\t\tvalidator = (IValidator<T>)behavior;\n+\t\t\t}\n+\t\t\tif (validator != null)\n+\t\t\t{\n+\t\t\t\tif (isNull == false || validator instanceof INullAcceptingValidator<?>)\n \t\t\t\t{\n-\t\t\t\t\tif (isNull == false || validator instanceof INullAcceptingValidator<?>)\n+\t\t\t\t\ttry\n \t\t\t\t\t{\n \t\t\t\t\t\tvalidator.validate(validatable);\n \t\t\t\t\t}\n-\t\t\t\t\tif (!isValid())\n+\t\t\t\t\tcatch (Exception e)\n \t\t\t\t\t{\n-\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tthrow new WicketRuntimeException(\"Exception '\" + e.getMessage() +\n+\t\t\t\t\t\t\t\t\"' occurred during validation \" + validator.getClass().getName() +\n+\t\t\t\t\t\t\t\t\" on component \" + getPath(), e);\n \t\t\t\t\t}\n \t\t\t\t}\n+\t\t\t\tif (!isValid())\n+\t\t\t\t{\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n-\t\tcatch (Exception e)\n-\t\t{\n-\t\t\tthrow new WicketRuntimeException(\"Exception '\" + e.getMessage() +\n-\t\t\t\t\"' occurred during validation \" + validator.getClass().getName() +\n-\t\t\t\t\" on component \" + getPath(), e);\n-\t\t}\n \t}\n \n \t/**",
                "raw_url": "https://github.com/apache/wicket/raw/59b3e318762733adea00cfe3b31c5dd25e4d2147/wicket-core/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java",
                "sha": "660cf5393620e7f470c83c30ab4eef91f6f37916",
                "status": "modified"
            }
        ],
        "message": "Move the try/catch just around the 'validator.validate()' call. Otherwise the construction of the error message will fail with NPE because 'validator' my be null",
        "parent": "https://github.com/apache/wicket/commit/9575f0d93901b7163a46c2ea38f43f135ecd7d50",
        "patched_files": [
            "FormComponent.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "FormComponentTest.java"
        ]
    },
    "wicket_5d78b71": {
        "bug_id": "wicket_5d78b71",
        "commit": "https://github.com/apache/wicket/commit/5d78b712740665f876dbfa6ed8159b24dcd76434",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/wicket/blob/5d78b712740665f876dbfa6ed8159b24dcd76434/wicket/src/main/java/wicket/util/string/interpolator/MapVariableInterpolator.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/wicket/util/string/interpolator/MapVariableInterpolator.java?ref=5d78b712740665f876dbfa6ed8159b24dcd76434",
                "deletions": 3,
                "filename": "wicket/src/main/java/wicket/util/string/interpolator/MapVariableInterpolator.java",
                "patch": "@@ -18,6 +18,8 @@\n \n import java.util.Map;\n \n+import wicket.util.string.Strings;\n+\n /**\n  * Interpolates variables into a string from a Map.\n  * \n@@ -42,7 +44,6 @@ public MapVariableInterpolator(final String string, final Map<?, ?> variables)\n \t\tthis.variables = variables;\n \t}\n \n-\n \t/**\n \t * Constructor\n \t * \n@@ -63,7 +64,6 @@ public MapVariableInterpolator(String string, final Map<?, ?> variables,\n \t\tthis.variables = variables;\n \t}\n \n-\n \t/**\n \t * Accessor to set variables\n \t * \n@@ -85,7 +85,7 @@ public final void setVariables(final Map<?, ?> variables)\n \t@Override\n \tprotected final String getValue(final String variableName)\n \t{\n-\t\treturn variables.get(variableName).toString();\n+\t\treturn Strings.toString(variables.get(variableName));\n \t}\n \n \t/**",
                "raw_url": "https://github.com/apache/wicket/raw/5d78b712740665f876dbfa6ed8159b24dcd76434/wicket/src/main/java/wicket/util/string/interpolator/MapVariableInterpolator.java",
                "sha": "726d6f7abe7efe73ccd275b661bd901889405c42",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/wicket/blob/5d78b712740665f876dbfa6ed8159b24dcd76434/wicket/src/main/java/wicket/util/string/interpolator/VariableInterpolator.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/wicket/util/string/interpolator/VariableInterpolator.java?ref=5d78b712740665f876dbfa6ed8159b24dcd76434",
                "deletions": 1,
                "filename": "wicket/src/main/java/wicket/util/string/interpolator/VariableInterpolator.java",
                "patch": "@@ -65,7 +65,6 @@ public VariableInterpolator(final String string, boolean exceptionOnNullVarValue\n \t\tthis.exceptionOnNullVarValue = exceptionOnNullVarValue;\n \t}\n \n-\n \t/**\n \t * Gets a value for a variable name during interpolation\n \t * ",
                "raw_url": "https://github.com/apache/wicket/raw/5d78b712740665f876dbfa6ed8159b24dcd76434/wicket/src/main/java/wicket/util/string/interpolator/VariableInterpolator.java",
                "sha": "e5a95619e56fa5d055dd2f0bb7a29a5be529dbba",
                "status": "modified"
            },
            {
                "additions": 61,
                "blob_url": "https://github.com/apache/wicket/blob/5d78b712740665f876dbfa6ed8159b24dcd76434/wicket/src/test/java/wicket/util/string/interpolator/VariableInterpolatorTest.java",
                "changes": 61,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/java/wicket/util/string/interpolator/VariableInterpolatorTest.java?ref=5d78b712740665f876dbfa6ed8159b24dcd76434",
                "deletions": 0,
                "filename": "wicket/src/test/java/wicket/util/string/interpolator/VariableInterpolatorTest.java",
                "patch": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package wicket.util.string.interpolator;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import junit.framework.TestCase;\n+import wicket.util.string.interpolator.MapVariableInterpolator;\n+\n+/**\n+ * Tests {@link MapVariableInterpolator}\n+ * \n+ * @author <a href=\"mailto:jbq@apache.org\">Jean-Baptiste Quenot</a>\n+ */\n+public class VariableInterpolatorTest extends TestCase\n+{\n+\tpublic void testWithValue()\n+\t{\n+\t\tMap params = new HashMap();\n+\t\tparams.put(\"key\", \"value\");\n+\t\tMapVariableInterpolator in = new MapVariableInterpolator(\"${key}\", params);\n+\t\tassertEquals(\"value\", in.toString());\n+\t}\n+\n+\tpublic void testWithoutValue()\n+\t{\n+\t\tMap params = new HashMap();\n+\t\tMapVariableInterpolator in = new MapVariableInterpolator(\"${key}\", params);\n+\t\tassertEquals(\"${key}\", in.toString());\n+\t}\n+\n+\tpublic void testWithoutValueAndException()\n+\t{\n+\t\tMap params = new HashMap();\n+\t\tMapVariableInterpolator in = new MapVariableInterpolator(\"${key}\", params, true);\n+\t\ttry\n+\t\t{\n+\t\t\tin.toString();\n+\t\t\tfail(\"Should throw an exception\");\n+\t\t}\n+\t\tcatch (Exception e)\n+\t\t{\n+\n+\t\t}\n+\t}\n+}",
                "raw_url": "https://github.com/apache/wicket/raw/5d78b712740665f876dbfa6ed8159b24dcd76434/wicket/src/test/java/wicket/util/string/interpolator/VariableInterpolatorTest.java",
                "sha": "10fb665f229c17de93912bcbf6b0114ed70dad2f",
                "status": "added"
            }
        ],
        "message": "WICKET-340 Unexpected NPE in MapVariableInterpolator\n\nApplied patch and backported exceptionOnNullVarValue from trunk\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@515082 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/4db6b180a43e6c5cadc0aa29ca0af2d6da72690d",
        "patched_files": [
            "MapVariableInterpolator.java",
            "VariableInterpolator.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "VariableInterpolatorTest.java"
        ]
    },
    "wicket_6073fbd": {
        "bug_id": "wicket_6073fbd",
        "commit": "https://github.com/apache/wicket/commit/6073fbd0585602fcca3d09e10dc89fcbc6a629c4",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/6073fbd0585602fcca3d09e10dc89fcbc6a629c4/wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/AnnotProxyFieldValueFactory.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/AnnotProxyFieldValueFactory.java?ref=6073fbd0585602fcca3d09e10dc89fcbc6a629c4",
                "deletions": 1,
                "filename": "wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/AnnotProxyFieldValueFactory.java",
                "patch": "@@ -188,7 +188,8 @@ private final String getBeanNameOfClass(final ApplicationContext ctx, final Clas\n \t\t\t\tBeanDefinition beanDef = getBeanDefinition(\n \t\t\t\t\t((AbstractApplicationContext)ctx).getBeanFactory(), possibility);\n \t\t\t\tif (BeanFactoryUtils.isFactoryDereference(possibility) ||\n-\t\t\t\t\tpossibility.startsWith(\"scopedTarget.\") || !beanDef.isAutowireCandidate())\n+\t\t\t\t\tpossibility.startsWith(\"scopedTarget.\") ||\n+\t\t\t\t\t(beanDef != null && !beanDef.isAutowireCandidate()))\n \t\t\t\t{\n \t\t\t\t\tit.remove();\n \t\t\t\t}",
                "raw_url": "https://github.com/apache/wicket/raw/6073fbd0585602fcca3d09e10dc89fcbc6a629c4/wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/AnnotProxyFieldValueFactory.java",
                "sha": "4a8880c05e58e76b6a753329d71f51fa36eeda78",
                "status": "modified"
            }
        ],
        "message": "Fixes WICKET-3632: NPE while injecting\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1095885 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/90d7803ba60c644eef9bbbbf3dc792d2ab137aa6",
        "patched_files": [
            "AnnotProxyFieldValueFactory.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "AnnotProxyFieldValueFactoryTest.java"
        ]
    },
    "wicket_69f2d0a": {
        "bug_id": "wicket_69f2d0a",
        "commit": "https://github.com/apache/wicket/commit/69f2d0ad9820e8ada6907ff1fa8138c89970713c",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/wicket/blob/69f2d0ad9820e8ada6907ff1fa8138c89970713c/wicket-core/src/main/java/org/apache/wicket/core/util/lang/WicketObjects.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/core/util/lang/WicketObjects.java?ref=69f2d0ad9820e8ada6907ff1fa8138c89970713c",
                "deletions": 0,
                "filename": "wicket-core/src/main/java/org/apache/wicket/core/util/lang/WicketObjects.java",
                "patch": "@@ -310,6 +310,11 @@ protected Object replaceObject(Object obj) throws IOException\n \t\t\t\tserializer = new JavaSerializer(WicketObjects.class.getName());\r\n \t\t\t}\r\n \t\t\tbyte[] serialized = serializer.serialize(object);\r\n+\t\t\tif (serialized == null)\r\n+\t\t\t{\r\n+\t\t\t\tthrow new IllegalStateException(\"A problem occurred while serializing an object. \" +\r\n+\t\t\t\t\t\t\"Please check the earlier logs for more details. Problematic object: \" + object);\r\n+\t\t\t}\r\n \t\t\tObject deserialized = serializer.deserialize(serialized);\r\n \t\t\treturn (T) deserialized;\r\n \t\t}\r",
                "raw_url": "https://github.com/apache/wicket/raw/69f2d0ad9820e8ada6907ff1fa8138c89970713c/wicket-core/src/main/java/org/apache/wicket/core/util/lang/WicketObjects.java",
                "sha": "0f4564c164b86875b0f5c0ba140addba6a3f08de",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/69f2d0ad9820e8ada6907ff1fa8138c89970713c/wicket-core/src/main/java/org/apache/wicket/serialize/java/JavaSerializer.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/serialize/java/JavaSerializer.java?ref=69f2d0ad9820e8ada6907ff1fa8138c89970713c",
                "deletions": 5,
                "filename": "wicket-core/src/main/java/org/apache/wicket/serialize/java/JavaSerializer.java",
                "patch": "@@ -134,14 +134,10 @@ public Object deserialize(final byte[] data)\n \t\t\t\t}\n \t\t\t}\n \t\t}\n-\t\tcatch (ClassNotFoundException cnfx)\n+\t\tcatch (ClassNotFoundException | IOException cnfx)\n \t\t{\n \t\t\tthrow new RuntimeException(\"Could not deserialize object from byte[]\", cnfx);\n \t\t}\n-\t\tcatch (IOException iox)\n-\t\t{\n-\t\t\tthrow new RuntimeException(\"Could not deserialize object from byte[]\", iox);\n-\t\t}\n \t\tfinally\n \t\t{\n \t\t\tThreadContext.restore(old);",
                "raw_url": "https://github.com/apache/wicket/raw/69f2d0ad9820e8ada6907ff1fa8138c89970713c/wicket-core/src/main/java/org/apache/wicket/serialize/java/JavaSerializer.java",
                "sha": "1ca239b9ea797fec23a74205689371b2c5426fd5",
                "status": "modified"
            }
        ],
        "message": "WICKET-6151 DebugBar/PageSizeDebugPanel throws NullPointerException (need wrapper exception with more detail)\n\nThrow an exception if the result of serializing an object is null.\nPassing null to deserialization will lead to NullPointerException without details of the problematic object",
        "parent": "https://github.com/apache/wicket/commit/b9a1ae901b8add3285d29a29d4a18ac2c23c8f86",
        "patched_files": [
            "WicketObjects.java",
            "JavaSerializer.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "JavaSerializerTest.java",
            "WicketObjectsTest.java"
        ]
    },
    "wicket_724066f": {
        "bug_id": "wicket_724066f",
        "commit": "https://github.com/apache/wicket/commit/724066f406590a1b383a2476ee9983974f40ab80",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/wicket/blob/724066f406590a1b383a2476ee9983974f40ab80/wicket-core/src/main/java/org/apache/wicket/ajax/json/JsonUtils.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/ajax/json/JsonUtils.java?ref=724066f406590a1b383a2476ee9983974f40ab80",
                "deletions": 12,
                "filename": "wicket-core/src/main/java/org/apache/wicket/ajax/json/JsonUtils.java",
                "patch": "@@ -58,23 +58,23 @@ public static JSONArray asArray(Map<String, Object> map) throws JSONException\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\telse if (value.getClass().isArray())\n+\t\t\t\telse if (value != null)\n \t\t\t\t{\n-\t\t\t\t\tObject[] array = (Object[]) value;\n-\t\t\t\t\tfor (Object v : array)\n+\t\t\t\t\tif (value.getClass().isArray())\n \t\t\t\t\t{\n-\t\t\t\t\t\tif (v != null)\n+\t\t\t\t\t\tObject[] array = (Object[]) value;\n+\t\t\t\t\t\tfor (Object v : array)\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\tJSONObject object = new JSONObject();\n-\t\t\t\t\t\t\tobject.put(\"name\", name);\n-\t\t\t\t\t\t\tobject.put(\"value\", v);\n-\t\t\t\t\t\t\tjsonArray.put(object);\n+\t\t\t\t\t\t\tif (v != null)\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tJSONObject object = new JSONObject();\n+\t\t\t\t\t\t\t\tobject.put(\"name\", name);\n+\t\t\t\t\t\t\t\tobject.put(\"value\", v);\n+\t\t\t\t\t\t\t\tjsonArray.put(object);\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tif (value != null)\n+\t\t\t\t\telse\n \t\t\t\t\t{\n \t\t\t\t\t\tJSONObject object = new JSONObject();\n \t\t\t\t\t\tobject.put(\"name\", name);",
                "raw_url": "https://github.com/apache/wicket/raw/724066f406590a1b383a2476ee9983974f40ab80/wicket-core/src/main/java/org/apache/wicket/ajax/json/JsonUtils.java",
                "sha": "ece49971528276158f163328eac2e31285412653",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/wicket/blob/724066f406590a1b383a2476ee9983974f40ab80/wicket-core/src/test/java/org/apache/wicket/ajax/json/JsonUtilsTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/test/java/org/apache/wicket/ajax/json/JsonUtilsTest.java?ref=724066f406590a1b383a2476ee9983974f40ab80",
                "deletions": 0,
                "filename": "wicket-core/src/test/java/org/apache/wicket/ajax/json/JsonUtilsTest.java",
                "patch": "@@ -56,5 +56,11 @@ public void asArray() throws Exception\n \t\tObject[] arrayValues = {\"arrayValue\", 3, null, true};\n \t\tmap.put(\"array\", arrayValues);\n \t\tassertEquals(\"[{\\\"name\\\":\\\"array\\\",\\\"value\\\":\\\"arrayValue\\\"},{\\\"name\\\":\\\"array\\\",\\\"value\\\":3},{\\\"name\\\":\\\"array\\\",\\\"value\\\":true}]\", JsonUtils.asArray(map).toString());\n+\n+\t\tmap.clear();\n+\t\tmap.put(\"null\", null);\n+\t\tassertEquals(\"[]\", JsonUtils.asArray(map).toString());\n+\t\tmap.put(\"notNull\", \"notNull\");\n+\t\tassertEquals(\"[{\\\"name\\\":\\\"notNull\\\",\\\"value\\\":\\\"notNull\\\"}]\", JsonUtils.asArray(map).toString());\n \t}\n }",
                "raw_url": "https://github.com/apache/wicket/raw/724066f406590a1b383a2476ee9983974f40ab80/wicket-core/src/test/java/org/apache/wicket/ajax/json/JsonUtilsTest.java",
                "sha": "b78003bcfd3f3906670deba8cb173e2621591127",
                "status": "modified"
            }
        ],
        "message": "WICKET-5497 NPE in JsonUtils when the value is null",
        "parent": "https://github.com/apache/wicket/commit/972c71522caddfa3c6836dafab6831a9643cbd08",
        "patched_files": [
            "JsonUtils.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "JsonUtilsTest.java"
        ]
    },
    "wicket_7614520": {
        "bug_id": "wicket_7614520",
        "commit": "https://github.com/apache/wicket/commit/7614520e94eb49cb2e5c2c560d055b18c8785301",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/wicket/blob/7614520e94eb49cb2e5c2c560d055b18c8785301/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java?ref=7614520e94eb49cb2e5c2c560d055b18c8785301",
                "deletions": 8,
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java",
                "patch": "@@ -1319,9 +1319,9 @@ protected void delegateSubmit(IFormSubmittingComponent submittingComponent)\n \t\tForm formToProcess = this;\n \t\tif (submittingComponent != null)\n \t\t{\n-\t\t\tsubmittingComponent.onSubmit();\n \t\t\t// use the form which the submittingComponent has submitted for further processing\n \t\t\tformToProcess = submittingComponent.getForm();\n+\t\t\tsubmittingComponent.onSubmit();\n \t\t}\n \n \t\t// Model was successfully updated with valid data\n@@ -1368,13 +1368,12 @@ protected final String getJavascriptId()\n \n \n \t/**\n-\t * Gets the HTTP submit method that will appear in form markup. If no method is specified in \n-\t * the template, \"post\" is the default. Note that the markup-declared HTTP method may not\n-\t * correspond to the one actually used to submit the form; in an Ajax submit, for example, \n-\t * JavaScript event handlers may submit the form with a \"get\" even when the form method is \n-\t * declared as \"post.\" Therefore this method should not be considered a guarantee of the \n-\t * HTTP method used, but a value for the markup only.\n-\t * Override if you have a requirement to alter this behavior.\n+\t * Gets the HTTP submit method that will appear in form markup. If no method is specified in the\n+\t * template, \"post\" is the default. Note that the markup-declared HTTP method may not correspond\n+\t * to the one actually used to submit the form; in an Ajax submit, for example, JavaScript event\n+\t * handlers may submit the form with a \"get\" even when the form method is declared as \"post.\"\n+\t * Therefore this method should not be considered a guarantee of the HTTP method used, but a\n+\t * value for the markup only. Override if you have a requirement to alter this behavior.\n \t * \n \t * @return the submit method specified in markup.\n \t */",
                "raw_url": "https://github.com/apache/wicket/raw/7614520e94eb49cb2e5c2c560d055b18c8785301/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java",
                "sha": "0d712f2df35f973b53ace581e2ba31bb7ca108d8",
                "status": "modified"
            }
        ],
        "message": "WICKET-1430: Form processing throws NPE if button.onsubmit() moves the button or its parents out of the component hierarchy\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@638021 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/0d0a8b78760f7dd7a984df0ab6e6329755fb7f3f",
        "patched_files": [
            "Form.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "FormTest.java",
            "TestForm.java"
        ]
    },
    "wicket_7e2b92f": {
        "bug_id": "wicket_7e2b92f",
        "commit": "https://github.com/apache/wicket/commit/7e2b92ff6cdc839832d514c3a41e716051e558cf",
        "file": [
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/wicket/blob/7e2b92ff6cdc839832d514c3a41e716051e558cf/wicket/src/java/wicket/Session.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/Session.java?ref=7e2b92ff6cdc839832d514c3a41e716051e558cf",
                "deletions": 5,
                "filename": "wicket/src/java/wicket/Session.java",
                "patch": "@@ -795,15 +795,25 @@ protected final void dirty()\n \t */\n \tprotected final Object getAttribute(final String name)\n \t{\n-\t\treturn getSessionStore().getAttribute(RequestCycle.get().getRequest(), name);\n+\t\tRequestCycle cycle = RequestCycle.get();\n+\t\tif (cycle != null)\n+\t\t{\n+\t\t\treturn getSessionStore().getAttribute(cycle.getRequest(), name);\n+\t\t}\n+\t\treturn null;\n \t}\n \n \t/**\n \t * @return List of attributes for this session\n \t */\n \tprotected final List getAttributeNames()\n \t{\n-\t\treturn getSessionStore().getAttributeNames(RequestCycle.get().getRequest());\n+\t\tRequestCycle cycle = RequestCycle.get();\n+\t\tif (cycle != null)\n+\t\t{\n+\t\t\treturn getSessionStore().getAttributeNames(cycle.getRequest());\n+\t\t}\n+\t\treturn null;\n \t}\n \n \t/**\n@@ -833,7 +843,11 @@ protected final ISessionStore getSessionStore()\n \t */\n \tprotected final void removeAttribute(String name)\n \t{\n-\t\tgetSessionStore().removeAttribute(RequestCycle.get().getRequest(), name);\n+\t\tRequestCycle cycle = RequestCycle.get();\n+\t\tif (cycle != null)\n+\t\t{\n+\t\t\tgetSessionStore().removeAttribute(cycle.getRequest(), name);\n+\t\t}\n \t}\n \n \t/**\n@@ -846,8 +860,15 @@ protected final void removeAttribute(String name)\n \t */\n \tprotected final void setAttribute(String name, Object value)\n \t{\n-\t\t// Set the actual attribute\n-\t\tgetSessionStore().setAttribute(RequestCycle.get().getRequest(), name, value);\n+\t\tRequestCycle cycle = RequestCycle.get();\n+\t\tif (cycle != null)\n+\t\t{\n+\t\t\t// Set the actual attribute\n+\t\t\tgetSessionStore().setAttribute(cycle.getRequest(), name, value);\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tthrow new WicketRuntimeException(\"Can not set the attribute. No RequestCycle available\");\n \t}\n \n \t/**",
                "raw_url": "https://github.com/apache/wicket/raw/7e2b92ff6cdc839832d514c3a41e716051e558cf/wicket/src/java/wicket/Session.java",
                "sha": "aac6b76ca0a091f18307df09080dd1e614538bf1",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/7e2b92ff6cdc839832d514c3a41e716051e558cf/wicket/src/java/wicket/protocol/http/MockWebApplication.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/protocol/http/MockWebApplication.java?ref=7e2b92ff6cdc839832d514c3a41e716051e558cf",
                "deletions": 0,
                "filename": "wicket/src/java/wicket/protocol/http/MockWebApplication.java",
                "patch": "@@ -169,6 +169,8 @@ public String getServletName()\n \n \t\tgetRequestCycleSettings().setRenderStrategy(IRequestCycleSettings.ONE_PASS_RENDER);\n \t\tgetResourceSettings().setResourceFinder(new WebApplicationPath(context));\n+\t\t\n+\t\tcreateRequestCycle();\n \t}\n \n \t/**",
                "raw_url": "https://github.com/apache/wicket/raw/7e2b92ff6cdc839832d514c3a41e716051e558cf/wicket/src/java/wicket/protocol/http/MockWebApplication.java",
                "sha": "97d36fbd91a50c7c1af0fbd2bf6465bd4ed9ca9a",
                "status": "modified"
            }
        ],
        "message": "avoid NPE, lazy create SessionStore and move creation of request cycle which is now required to create page to \na central place (MockWebApplication)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@460206 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/891c5691ed4b147de544af8da5100bd0fc66b674",
        "patched_files": [
            "MockWebApplication.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "MockWebApplicationTest.java"
        ]
    },
    "wicket_7ebae30": {
        "bug_id": "wicket_7ebae30",
        "commit": "https://github.com/apache/wicket/commit/7ebae3095e7ee9ad914a6d96f634e81b07e6020a",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/7ebae3095e7ee9ad914a6d96f634e81b07e6020a/jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupContainer.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupContainer.java?ref=7ebae3095e7ee9ad914a6d96f634e81b07e6020a",
                "deletions": 7,
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupContainer.java",
                "patch": "@@ -23,7 +23,6 @@\n import java.util.Iterator;\n import java.util.List;\n \n-import org.apache.wicket.feedback.IFeedback;\n import org.apache.wicket.markup.ComponentTag;\n import org.apache.wicket.markup.MarkupElement;\n import org.apache.wicket.markup.MarkupException;\n@@ -1394,12 +1393,8 @@ void onBeforeRenderChildren()\n \t\t\t\t// Get next child\n \t\t\t\tfinal Component child = children_get(i);\n \n-\t\t\t\t// Ignore feedback as that was done in Page\n-\t\t\t\tif (!(child instanceof IFeedback))\n-\t\t\t\t{\n-\t\t\t\t\t// Call begin request on the child\n-\t\t\t\t\tchild.beforeRender();\n-\t\t\t\t}\n+\t\t\t\t// Call begin request on the child\n+\t\t\t\tchild.beforeRender();\n \t\t\t}\n \t\t}\n \t\tcatch (RuntimeException ex)",
                "raw_url": "https://github.com/apache/wicket/raw/7ebae3095e7ee9ad914a6d96f634e81b07e6020a/jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupContainer.java",
                "sha": "27560128b0a5a3b2c2f3f56b591d71d58e67afb5",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/wicket/blob/7ebae3095e7ee9ad914a6d96f634e81b07e6020a/jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java?ref=7ebae3095e7ee9ad914a6d96f634e81b07e6020a",
                "deletions": 1,
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java",
                "patch": "@@ -814,7 +814,6 @@ public final void renderPage()\n \t\t\tpublic Object component(Component component)\n \t\t\t{\n \t\t\t\t((IFeedback)component).updateFeedback();\n-\t\t\t\tcomponent.beforeRender();\n \t\t\t\treturn IVisitor.CONTINUE_TRAVERSAL;\n \t\t\t}\n \t\t});",
                "raw_url": "https://github.com/apache/wicket/raw/7ebae3095e7ee9ad914a6d96f634e81b07e6020a/jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java",
                "sha": "b4fbb7cadfcc397c6ab7e3933862e5cee4cd8779",
                "status": "modified"
            }
        ],
        "message": "Fix for NPE in ListView on AJAX calls.  The problem was with IFeedback implementing components, which were special cased in onBeforeRenderChildren() based on the assumption that Page had already called beforeRender() on them.  This is not the case with an AJAX rendering.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@537919 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/5db310ad78875869177502a2d15581de227dc0cd",
        "patched_files": [
            "Page.java",
            "MarkupContainer.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "TestPage.java",
            "MarkupContainerTest.java"
        ]
    },
    "wicket_809b2da": {
        "bug_id": "wicket_809b2da",
        "commit": "https://github.com/apache/wicket/commit/809b2da16cc0796ee4e5aca8ef816c200c01baf2",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/809b2da16cc0796ee4e5aca8ef816c200c01baf2/wicket-core/src/main/java/org/apache/wicket/protocol/http/AbstractRequestLogger.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/protocol/http/AbstractRequestLogger.java?ref=809b2da16cc0796ee4e5aca8ef816c200c01baf2",
                "deletions": 2,
                "filename": "wicket-core/src/main/java/org/apache/wicket/protocol/http/AbstractRequestLogger.java",
                "patch": "@@ -134,8 +134,7 @@ public int getPeakActiveRequestCount()\n \t@Override\n \tpublic SessionData[] getLiveSessions()\n \t{\n-\t\tfinal SessionData[] sessions = liveSessions.values().toArray(\n-\t\t\tnew SessionData[liveSessions.values().size()]);\n+\t\tfinal SessionData[] sessions = liveSessions.values().toArray(new SessionData[0]);\n \t\tArrays.sort(sessions);\n \t\treturn sessions;\n \t}",
                "raw_url": "https://github.com/apache/wicket/raw/809b2da16cc0796ee4e5aca8ef816c200c01baf2/wicket-core/src/main/java/org/apache/wicket/protocol/http/AbstractRequestLogger.java",
                "sha": "8cb8fcd76b5559b221aa8ac808f512e435f32a14",
                "status": "modified"
            },
            {
                "additions": 123,
                "blob_url": "https://github.com/apache/wicket/blob/809b2da16cc0796ee4e5aca8ef816c200c01baf2/wicket-core/src/test/java/org/apache/wicket/protocol/http/RequestLoggerLiveSessionsTest.java",
                "changes": 123,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/test/java/org/apache/wicket/protocol/http/RequestLoggerLiveSessionsTest.java?ref=809b2da16cc0796ee4e5aca8ef816c200c01baf2",
                "deletions": 0,
                "filename": "wicket-core/src/test/java/org/apache/wicket/protocol/http/RequestLoggerLiveSessionsTest.java",
                "patch": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.wicket.protocol.http;\n+\n+import org.apache.wicket.util.SlowTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.util.ArrayList;\n+import java.util.Random;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Test for https://issues.apache.org/jira/browse/WICKET-6169\n+ */\n+@Category(SlowTests.class)\n+public class RequestLoggerLiveSessionsTest \n+{\n+\tprivate final RequestLogger requestLogger = new RequestLogger();\n+\t\n+\tprivate final ArrayList<String> sessionIds = new ArrayList<>();\n+\n+\t@Test\n+\tpublic void concurrentModification() {\n+\t\tSessionCreateThread sct = new SessionCreateThread();\n+\t\tSessionDestroyThread sdt = new SessionDestroyThread();\n+\t\tsct.start();\n+\t\tsdt.start();\n+\t\tAtomicBoolean nullPointerExceptionThrown = new AtomicBoolean(false);\n+\n+\t\tint count = 10000000;\n+\n+\t\twhile (count-- > 0)\n+\t\t{\n+\t\t\ttry {\n+\t\t\t\trequestLogger.getLiveSessions();\n+\t\t\t}\n+\t\t\tcatch (NullPointerException e)\n+\t\t\t{\n+\t\t\t\te.printStackTrace();\n+\t\t\t\tnullPointerExceptionThrown.set(true);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\tsct.interrupt();\n+\t\tsdt.interrupt();\n+\n+\t\tif (nullPointerExceptionThrown.get()) {\n+\t\t\tAssert.fail(\"The test should not fail with NullPointerException\");\n+\t\t}\n+\t}\n+\t\n+\tprivate class SessionCreateThread extends Thread\n+\t{\n+\t\tprivate final Random random = new Random();\n+\t\t\n+\t\tpublic void run()\n+\t\t{\n+\t\t\twhile (!isInterrupted())\n+\t\t\t{\n+\t\t\t\tif (sessionIds.size() < 50)\n+\t\t\t\t{\n+\t\t\t\t\tString sessionId = UUID.randomUUID().toString();\n+\t\t\t\t\tsynchronized (sessionIds) {\n+\t\t\t\t\t\tsessionIds.add(sessionId);\n+\t\t\t\t\t}\n+\t\t\t\t\trequestLogger.sessionCreated(sessionId);\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\ttry\n+\t\t\t\t{\n+\t\t\t\t\tThread.sleep(random.nextInt(20));\n+\t\t\t\t}\n+\t\t\t\t\tcatch (InterruptedException e) {\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate class SessionDestroyThread extends Thread\n+\t{\n+\t\tprivate final Random random = new Random();\n+\t\t\n+\t\tpublic void run()\n+\t\t{\n+\t\t\twhile (!isInterrupted())\n+\t\t\t{\n+\t\t\t\tif (sessionIds.size() > 0)\n+\t\t\t\t{\n+\t\t\t\t\tString sessionId = sessionIds.get(random.nextInt(sessionIds.size()));\n+\t\t\t\t\trequestLogger.sessionDestroyed(sessionId);\n+\t\t\t\t\tsynchronized (sessionIds) {\n+\t\t\t\t\t\tsessionIds.remove(sessionId);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\ttry\n+\t\t\t\t{\n+\t\t\t\t\tThread.sleep(random.nextInt(20));\n+\t\t\t\t}\n+\t\t\t\t\tcatch (InterruptedException e) {\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+}",
                "raw_url": "https://github.com/apache/wicket/raw/809b2da16cc0796ee4e5aca8ef816c200c01baf2/wicket-core/src/test/java/org/apache/wicket/protocol/http/RequestLoggerLiveSessionsTest.java",
                "sha": "edbc5521a291800425148073ad71f2a3cf80a6c3",
                "status": "added"
            }
        ],
        "message": "WICKET-6169 NullPointerException accessing AbstractRequestLogger.getLiveSessions",
        "parent": "https://github.com/apache/wicket/commit/e1157cb783cb82d791bdf97869d4924bd369a1f0",
        "patched_files": [
            "AbstractRequestLogger.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "AbstractRequestLoggerTest.java",
            "RequestLoggerLiveSessionsTest.java"
        ]
    },
    "wicket_823b30b": {
        "bug_id": "wicket_823b30b",
        "commit": "https://github.com/apache/wicket/commit/823b30b5f818630f9b75c70a564566e9af36c937",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/wicket/blob/823b30b5f818630f9b75c70a564566e9af36c937/wicket-core/src/main/java/org/apache/wicket/ConverterLocator.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/ConverterLocator.java?ref=823b30b5f818630f9b75c70a564566e9af36c937",
                "deletions": 20,
                "filename": "wicket-core/src/main/java/org/apache/wicket/ConverterLocator.java",
                "patch": "@@ -42,6 +42,7 @@\n import org.apache.wicket.util.convert.converter.SqlDateConverter;\n import org.apache.wicket.util.convert.converter.SqlTimeConverter;\n import org.apache.wicket.util.convert.converter.SqlTimestampConverter;\n+import org.apache.wicket.util.lang.Args;\n import org.apache.wicket.util.lang.Objects;\n \n \n@@ -58,7 +59,7 @@\n public class ConverterLocator implements IConverterLocator\n {\n \t/**\n-\t * CoverterLocator that is to be used when no registered converter is found.\n+\t * ConverterLocator that is to be used when no registered converter is found.\n \t * \n \t * @param <C>\n \t *            The object to convert from and to String\n@@ -79,10 +80,6 @@ private DefaultConverter(Class<C> type)\n \t\t\tthis.type = new WeakReference<>(type);\n \t\t}\n \n-\t\t/**\n-\t\t * @see org.apache.wicket.util.convert.IConverter#convertToObject(java.lang.String,\n-\t\t *      java.util.Locale)\n-\t\t */\n \t\t@Override\n \t\tpublic C convertToObject(String value, Locale locale)\n \t\t{\n@@ -108,7 +105,7 @@ public C convertToObject(String value, Locale locale)\n \t\t\t\t\treturn converted;\n \t\t\t\t}\n \n-\t\t\t\tif (theType.isInstance(value))\n+\t\t\t\tif (theType != null && theType.isInstance(value))\n \t\t\t\t{\n \t\t\t\t\treturn theType.cast(value);\n \t\t\t\t}\n@@ -122,10 +119,6 @@ public C convertToObject(String value, Locale locale)\n \t\t\t\ttheType.getName() + \". Could not find compatible converter.\").setSourceValue(value);\n \t\t}\n \n-\t\t/**\n-\t\t * @see org.apache.wicket.util.convert.IConverter#convertToString(java.lang.Object,\n-\t\t *      java.util.Locale)\n-\t\t */\n \t\t@Override\n \t\tpublic String convertToString(C value, Locale locale)\n \t\t{\n@@ -141,7 +134,7 @@ public String convertToString(C value, Locale locale)\n \t\t\tcatch (RuntimeException e)\n \t\t\t{\n \t\t\t\tthrow new ConversionException(\"Could not convert object of type: \" +\n-\t\t\t\t\tvalue.getClass() + \" to string. Possible its #toString() returned null. \" +\n+\t\t\t\t\tvalue.getClass() + \" to String. Possible its #toString() returned null. \" +\n \t\t\t\t\t\"Either install a custom converter (see IConverterLocator) or \" +\n \t\t\t\t\t\"override #toString() to return a non-null value.\", e).setSourceValue(value)\n \t\t\t\t\t.setConverter(this);\n@@ -224,7 +217,7 @@ public ConverterLocator()\n \t\tfinal IConverter<C> converter = get(type);\n \t\tif (converter == null)\n \t\t{\n-\t\t\treturn new DefaultConverter<C>(type);\n+\t\t\treturn new DefaultConverter<>(type);\n \t\t}\n \t\treturn converter;\n \t}\n@@ -254,14 +247,8 @@ public ConverterLocator()\n \t */\n \tpublic final IConverter<?> set(final Class<?> c, final IConverter<?> converter)\n \t{\n-\t\tif (converter == null)\n-\t\t{\n-\t\t\tthrow new IllegalArgumentException(\"CoverterLocator cannot be null\");\n-\t\t}\n-\t\tif (c == null)\n-\t\t{\n-\t\t\tthrow new IllegalArgumentException(\"Class cannot be null\");\n-\t\t}\n+\t\tArgs.notNull(c, \"Class\");\n+\t\tArgs.notNull(converter, \"converter\");\n \t\treturn classToConverter.put(c.getName(), converter);\n \t}\n }",
                "raw_url": "https://github.com/apache/wicket/raw/823b30b5f818630f9b75c70a564566e9af36c937/wicket-core/src/main/java/org/apache/wicket/ConverterLocator.java",
                "sha": "ea03de989da252227382897f6fe90a05f3f37e08",
                "status": "modified"
            }
        ],
        "message": "Fix a possible NullPointerException\n\nFix typo in javadoc.\nRemove useless javadoc.",
        "parent": "https://github.com/apache/wicket/commit/41776c423ae6c018026430d32a8490492de038e8",
        "patched_files": [
            "ConverterLocator.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "ConverterLocatorTest.java"
        ]
    },
    "wicket_8468de3": {
        "bug_id": "wicket_8468de3",
        "commit": "https://github.com/apache/wicket/commit/8468de343669cdd482f41359acaaadc6ae4d5653",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/wicket/blob/8468de343669cdd482f41359acaaadc6ae4d5653/jdk-1.4/wicket/src/main/java/org/apache/wicket/resource/loader/BundleStringResourceLoader.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/resource/loader/BundleStringResourceLoader.java?ref=8468de343669cdd482f41359acaaadc6ae4d5653",
                "deletions": 2,
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/resource/loader/BundleStringResourceLoader.java",
                "patch": "@@ -62,7 +62,7 @@ public BundleStringResourceLoader(final String bundleName)\n \t * @return The string resource value or null if resource not found\n \t */\n \tpublic final String loadStringResource(final Class clazz, final String key, Locale locale,\n-\t\t\tfinal String style)\n+\t\tfinal String style)\n \t{\n \t\tif (locale == null)\n \t\t{\n@@ -91,6 +91,7 @@ public final String loadStringResource(final Class clazz, final String key, Loca\n \t */\n \tpublic final String loadStringResource(final Component component, final String key)\n \t{\n-\t\treturn loadStringResource(null, key, component.getLocale(), null);\n+\t\tfinal Locale locale = (component != null) ? component.getLocale() : null;\n+\t\treturn loadStringResource(null, key, locale, null);\n \t}\n }",
                "raw_url": "https://github.com/apache/wicket/raw/8468de343669cdd482f41359acaaadc6ae4d5653/jdk-1.4/wicket/src/main/java/org/apache/wicket/resource/loader/BundleStringResourceLoader.java",
                "sha": "2651fcf450c59a145e6cfa843eea3b89a648ef39",
                "status": "modified"
            }
        ],
        "message": "WICKET-1415: BundleStringResourceLoader throws NPE if component is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@640155 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/7536a80d5183c8a00050dae51a0fa008ab0c40d9",
        "patched_files": [
            "BundleStringResourceLoader.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "BundleStringResourceLoaderTest.java"
        ]
    },
    "wicket_876355f": {
        "bug_id": "wicket_876355f",
        "commit": "https://github.com/apache/wicket/commit/876355f5152d28fe4c5b67eeb91e5f6de2471a68",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/wicket/blob/876355f5152d28fe4c5b67eeb91e5f6de2471a68/wicket/src/java/wicket/util/convert/converters/AbstractNumberConverter.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/util/convert/converters/AbstractNumberConverter.java?ref=876355f5152d28fe4c5b67eeb91e5f6de2471a68",
                "deletions": 0,
                "filename": "wicket/src/java/wicket/util/convert/converters/AbstractNumberConverter.java",
                "patch": "@@ -53,16 +53,24 @@ protected Number parse(final Object value, final double min, final double max, L\n \t{\n \t\tfinal NumberFormat numberFormat = getNumberFormat(locale);\n \t\tfinal Number number = (Number)parse(numberFormat, value);\n+\n+\t\tif (number == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n+\n \t\tif (number.doubleValue() < min)\n \t\t{\n \t\t\tthrow newConversionException(\"Value cannot be less than \" + min, value,locale).setFormat(\n \t\t\t\t\tnumberFormat);\n \t\t}\n+\n \t\tif (number.doubleValue() > max)\n \t\t{\n \t\t\tthrow newConversionException(\"Value cannot be greater than \" + max, value,locale).setFormat(\n \t\t\t\t\tnumberFormat);\n \t\t}\n+\n \t\treturn number;\n \t}\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/wicket/raw/876355f5152d28fe4c5b67eeb91e5f6de2471a68/wicket/src/java/wicket/util/convert/converters/AbstractNumberConverter.java",
                "sha": "d05256c05953981a68e77b630d041703a36ab4cc",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/wicket/blob/876355f5152d28fe4c5b67eeb91e5f6de2471a68/wicket/src/java/wicket/util/convert/converters/ByteConverter.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/util/convert/converters/ByteConverter.java?ref=876355f5152d28fe4c5b67eeb91e5f6de2471a68",
                "deletions": 0,
                "filename": "wicket/src/java/wicket/util/convert/converters/ByteConverter.java",
                "patch": "@@ -42,6 +42,12 @@ public Object convert(final Object value, Locale locale)\n     {\n         final Number number = value instanceof Number ? (Number)value : parse(value,\n                 Byte.MIN_VALUE, Byte.MAX_VALUE,locale);\n+\n+        if (number == null)\n+        {\n+        \treturn null;\n+        }\n+\n         return new Byte(number.byteValue());\n     }\n ",
                "raw_url": "https://github.com/apache/wicket/raw/876355f5152d28fe4c5b67eeb91e5f6de2471a68/wicket/src/java/wicket/util/convert/converters/ByteConverter.java",
                "sha": "6fae117eef378f2b00868da14b0cbe16e6ecc029",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/wicket/blob/876355f5152d28fe4c5b67eeb91e5f6de2471a68/wicket/src/java/wicket/util/convert/converters/CharacterConverter.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/util/convert/converters/CharacterConverter.java?ref=876355f5152d28fe4c5b67eeb91e5f6de2471a68",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/util/convert/converters/CharacterConverter.java",
                "patch": "@@ -40,7 +40,12 @@\n \tpublic Object convert(final Object value, Locale locale)\n \t{\n \t\tfinal String stringValue = value.toString();\n-\t\tif (stringValue.length() == 1)\n+\t\tint length = stringValue.length();\n+\t\tif (length == 0)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n+\t\telse if (length == 1)\n \t\t{\n \t\t\treturn new Character(value.toString().charAt(0));\n \t\t}",
                "raw_url": "https://github.com/apache/wicket/raw/876355f5152d28fe4c5b67eeb91e5f6de2471a68/wicket/src/java/wicket/util/convert/converters/CharacterConverter.java",
                "sha": "e46702ad057a220e276e5b1042f94a70bf8f47d8",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/wicket/blob/876355f5152d28fe4c5b67eeb91e5f6de2471a68/wicket/src/java/wicket/util/convert/converters/DoubleConverter.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/util/convert/converters/DoubleConverter.java?ref=876355f5152d28fe4c5b67eeb91e5f6de2471a68",
                "deletions": 0,
                "filename": "wicket/src/java/wicket/util/convert/converters/DoubleConverter.java",
                "patch": "@@ -42,6 +42,12 @@ public Object convert(final Object value, Locale locale)\n         final Number number = value instanceof Number ? (Number)value : parse(value,\n                 Double.MAX_VALUE*-1, Double.MAX_VALUE,locale);\n         //Double.MIN is the smallest nonzero positive number, not the largest negative number\n+\n+        if (number == null)\n+        {\n+        \treturn null;\n+        }\n+\n         return new Double(number.doubleValue());\n \t}\n ",
                "raw_url": "https://github.com/apache/wicket/raw/876355f5152d28fe4c5b67eeb91e5f6de2471a68/wicket/src/java/wicket/util/convert/converters/DoubleConverter.java",
                "sha": "38acd3d43cd86ee4e452c8a5265e706bf99b42df",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/wicket/blob/876355f5152d28fe4c5b67eeb91e5f6de2471a68/wicket/src/java/wicket/util/convert/converters/FloatConverter.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/util/convert/converters/FloatConverter.java?ref=876355f5152d28fe4c5b67eeb91e5f6de2471a68",
                "deletions": 0,
                "filename": "wicket/src/java/wicket/util/convert/converters/FloatConverter.java",
                "patch": "@@ -41,6 +41,12 @@ public Object convert(final Object value, Locale locale)\n \t{\n \t\tfinal Number number = value instanceof Number ? (Number)value : parse(value,\n \t\t\t\tFloat.MIN_VALUE, Float.MAX_VALUE,locale);\n+\n+        if (number == null)\n+        {\n+        \treturn null;\n+        }\n+\n \t\treturn new Float(number.floatValue());\n \t}\n ",
                "raw_url": "https://github.com/apache/wicket/raw/876355f5152d28fe4c5b67eeb91e5f6de2471a68/wicket/src/java/wicket/util/convert/converters/FloatConverter.java",
                "sha": "f19d55a2ac98428ef6b523e012f787ff9931bc66",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/wicket/blob/876355f5152d28fe4c5b67eeb91e5f6de2471a68/wicket/src/java/wicket/util/convert/converters/IntegerConverter.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/util/convert/converters/IntegerConverter.java?ref=876355f5152d28fe4c5b67eeb91e5f6de2471a68",
                "deletions": 0,
                "filename": "wicket/src/java/wicket/util/convert/converters/IntegerConverter.java",
                "patch": "@@ -41,6 +41,12 @@ public Object convert(final Object value, Locale locale)\n \t{\n \t\tfinal Number number = value instanceof Number ? (Number)value : parse(value,\n \t\t\t\tInteger.MIN_VALUE, Integer.MAX_VALUE,locale);\n+\n+        if (number == null)\n+        {\n+        \treturn null;\n+        }\n+\n \t\treturn new Integer(number.intValue());\n \t}\n ",
                "raw_url": "https://github.com/apache/wicket/raw/876355f5152d28fe4c5b67eeb91e5f6de2471a68/wicket/src/java/wicket/util/convert/converters/IntegerConverter.java",
                "sha": "68c0e23eb59dd64507870bd756da8dad788bef18",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/wicket/blob/876355f5152d28fe4c5b67eeb91e5f6de2471a68/wicket/src/java/wicket/util/convert/converters/LongConverter.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/util/convert/converters/LongConverter.java?ref=876355f5152d28fe4c5b67eeb91e5f6de2471a68",
                "deletions": 0,
                "filename": "wicket/src/java/wicket/util/convert/converters/LongConverter.java",
                "patch": "@@ -41,6 +41,12 @@ public Object convert(final Object value, Locale locale)\n \t{\n \t\tfinal Number number = value instanceof Number ? (Number)value : parse(value,\n \t\t\t\tLong.MIN_VALUE, Long.MAX_VALUE,locale);\n+\n+        if (number == null)\n+        {\n+        \treturn null;\n+        }\n+\n \t\treturn new Long(number.longValue());\n \t}\n ",
                "raw_url": "https://github.com/apache/wicket/raw/876355f5152d28fe4c5b67eeb91e5f6de2471a68/wicket/src/java/wicket/util/convert/converters/LongConverter.java",
                "sha": "fcda0bf53bdee3bee7673201551beb5ff8e3d209",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/wicket/blob/876355f5152d28fe4c5b67eeb91e5f6de2471a68/wicket/src/java/wicket/util/convert/converters/ShortConverter.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/util/convert/converters/ShortConverter.java?ref=876355f5152d28fe4c5b67eeb91e5f6de2471a68",
                "deletions": 0,
                "filename": "wicket/src/java/wicket/util/convert/converters/ShortConverter.java",
                "patch": "@@ -41,6 +41,12 @@ public Object convert(final Object value, Locale locale)\n \t{\n \t\tfinal Number number = value instanceof Number ? (Number)value : parse(value,\n \t\t\t\tShort.MIN_VALUE, Short.MAX_VALUE,locale);\n+\n+        if (number == null)\n+        {\n+        \treturn null;\n+        }\n+\n \t\treturn new Short(number.shortValue());\n \t}\n ",
                "raw_url": "https://github.com/apache/wicket/raw/876355f5152d28fe4c5b67eeb91e5f6de2471a68/wicket/src/java/wicket/util/convert/converters/ShortConverter.java",
                "sha": "7d0dcff42c2ed11fb667ef4c0c784eb8e1caa80b",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/wicket/blob/876355f5152d28fe4c5b67eeb91e5f6de2471a68/wicket/src/test/wicket/util/convert/converters/ConvertersTest.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/util/convert/converters/ConvertersTest.java?ref=876355f5152d28fe4c5b67eeb91e5f6de2471a68",
                "deletions": 0,
                "filename": "wicket/src/test/wicket/util/convert/converters/ConvertersTest.java",
                "patch": "@@ -63,6 +63,18 @@ public void testConversion()\n \n \t\tassertEquals(date, converter.convert(\"24-10-02\", Date.class));\n \t\tassertEquals(\"24-10-02\", converter.convert(date, String.class));\n+\n+\t\t// empty strings should return null, NOT throw NPEs\n+\t\tassertNull(converter.convert(\"\", Double.class));\n+\t\tassertNull(converter.convert(\"\", Long.class));\n+\t\tassertNull(converter.convert(\"\", Float.class));\n+\t\tassertNull(converter.convert(\"\", Integer.class));\n+\t\tassertNull(converter.convert(\"\", Byte.class));\n+\t\tassertNull(converter.convert(\"\", Character.class));\n+\t\tassertNull(converter.convert(\"\", Date.class));\n+\t\tassertNull(converter.convert(\"\", Short.class));\n+\t\tassertEquals(Boolean.FALSE, converter.convert(\"\", Boolean.class));\n+\t\tassertNotNull(converter.convert(\"\", String.class));\n \t}\n \n \t/**",
                "raw_url": "https://github.com/apache/wicket/raw/876355f5152d28fe4c5b67eeb91e5f6de2471a68/wicket/src/test/wicket/util/convert/converters/ConvertersTest.java",
                "sha": "2c77a840e75aba5bf1dce014432c264176f5b9f2",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/876355f5152d28fe4c5b67eeb91e5f6de2471a68/wicket/xdocs/changes.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/xdocs/changes.xml?ref=876355f5152d28fe4c5b67eeb91e5f6de2471a68",
                "deletions": 0,
                "filename": "wicket/xdocs/changes.xml",
                "patch": "@@ -11,6 +11,7 @@\n \t  <action type=\"add\" dev=\"Eelco Hillenius\">Added component wicket.markup.html.include.Include for including content from non-Wicket resources.</action>\n     </release>\n     <release version=\"1.0.0\" date=\"tbd\" description=\"1.0.0 final\">\n+      <action type=\"fix\" dev=\"Eelco Hillenius\" issue=\"1211663\" due-to=\"Martijn Dashorst\">Fixed converters once and for all. Null check results so that e.g., empty strings for numbers (e.g.) now return null instead of throwing a NPE</action>\n       <action type=\"fix\" dev=\"Eelco Hillenius\" issue=\"1209027\">The UploadForm now considers the encoding</action>\n       <action type=\"add\" dev=\"Juergen Donnerstag\">By means of Component.setRenderBodyOnly(boolean) it is now easily possible to print the tag's body only. This is e.g. necessary with &lt;span&gt; tags and Panels where in cases you want to be strictly HTML compliant the &lt;span&gt; tag itself must be removed. The (tag's) body will always be printed.</action>\n     </release>",
                "raw_url": "https://github.com/apache/wicket/raw/876355f5152d28fe4c5b67eeb91e5f6de2471a68/wicket/xdocs/changes.xml",
                "sha": "75cdd5900dcc623f77e3fbde2f29e610c1550699",
                "status": "modified"
            }
        ],
        "message": "Fixed converters once and for all. Null check results so that e.g., empty strings for numbers (e.g.) now return null instead of throwing a NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@456811 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/fd99af0d57e70329c24797a71b2e1cbba1c7e00f",
        "patched_files": [
            "AbstractNumberConverter.java",
            "DoubleConverter.java",
            "FloatConverter.java",
            "changes.xml",
            "CharacterConverter.java",
            "IntegerConverter.java",
            "LongConverter.java",
            "ShortConverter.java",
            "ByteConverter.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "ConvertersTest.java"
        ]
    },
    "wicket_8cb7d48": {
        "bug_id": "wicket_8cb7d48",
        "commit": "https://github.com/apache/wicket/commit/8cb7d48aa7bbc058255abd1f282252897a9d9baa",
        "file": [
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/wicket/blob/8cb7d48aa7bbc058255abd1f282252897a9d9baa/wicket/src/java/wicket/util/string/Strings.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/util/string/Strings.java?ref=8cb7d48aa7bbc058255abd1f282252897a9d9baa",
                "deletions": 0,
                "filename": "wicket/src/java/wicket/util/string/Strings.java",
                "patch": "@@ -61,6 +61,10 @@\n \t */\n \tpublic static String afterFirst(final String s, final char c)\n \t{\n+\t\tif(s == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n \t\tfinal int index = s.indexOf(c);\n \n \t\tif (index == -1)\n@@ -90,6 +94,8 @@ public static String afterFirstPathComponent(final String path, final char separ\n \t}\n \n \t/**\n+\t * Returns everything after the last occurence of the given character in s.\n+\t *\n \t * @param s\n \t *            The string\n \t * @param c\n@@ -99,6 +105,10 @@ public static String afterFirstPathComponent(final String path, final char separ\n \t */\n \tpublic static String afterLast(final String s, final char c)\n \t{\n+\t\tif(s == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n \t\tfinal int index = s.lastIndexOf(c);\n \n \t\tif (index == -1)\n@@ -119,6 +129,10 @@ public static String afterLast(final String s, final char c)\n \t */\n \tpublic static String beforeFirst(final String s, final char c)\n \t{\n+\t\tif(s == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n \t\tfinal int index = s.indexOf(c);\n \n \t\tif (index == -1)\n@@ -139,6 +153,10 @@ public static String beforeFirst(final String s, final char c)\n \t */\n \tpublic static String beforeLast(final String s, final char c)\n \t{\n+\t\tif(s == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n \t\tfinal int index = s.lastIndexOf(c);\n \n \t\tif (index == -1)\n@@ -176,6 +194,10 @@ public static String beforeLastPathComponent(final String path, final char separ\n \t */\n \tpublic static String capitalize(final String s)\n \t{\n+\t\tif(s == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n \t\tfinal char[] chars = s.toCharArray();\n \n \t\tif (chars.length > 0)",
                "raw_url": "https://github.com/apache/wicket/raw/8cb7d48aa7bbc058255abd1f282252897a9d9baa/wicket/src/java/wicket/util/string/Strings.java",
                "sha": "7e2c85225cfd87a84769f440903693d6bdf25228",
                "status": "modified"
            },
            {
                "additions": 142,
                "blob_url": "https://github.com/apache/wicket/blob/8cb7d48aa7bbc058255abd1f282252897a9d9baa/wicket/src/test/wicket/util/string/StringsTest.java",
                "changes": 166,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/util/string/StringsTest.java?ref=8cb7d48aa7bbc058255abd1f282252897a9d9baa",
                "deletions": 24,
                "filename": "wicket/src/test/wicket/util/string/StringsTest.java",
                "patch": "@@ -25,33 +25,151 @@\n \n /**\n  * Test cases for this object\n+ * \n  * @author Jonathan Locke\n  */\n public final class StringsTest extends TestCase\n {\n-    /**\n-     *\n-     */\n-    public void test()\n-    {\n-        Assert.assertEquals(\"foo\", Strings.lastPathComponent(\"bar.garply.foo\", '.'));\n-        Assert.assertEquals(\"foo\", Strings.lastPathComponent(\"foo\", '.'));\n-        Assert.assertEquals(\"bar\", Strings.firstPathComponent(\"bar.garply.foo\", '.'));\n-        Assert.assertEquals(\"foo\", Strings.lastPathComponent(\"foo\", '.'));\n-        Assert.assertEquals(\"garply.foo\", Strings.afterFirstPathComponent(\"bar.garply.foo\", '.'));\n-        Assert.assertEquals(\"\", Strings.afterFirstPathComponent(\"foo\", '.'));\n-        Assert.assertEquals(\"bar.baz\", Strings.beforeLast(\"bar.baz.foo\", '.'));\n-        Assert.assertEquals(\"\", Strings.beforeLast(\"bar\", '.'));\n-        Assert.assertEquals(\"bar\", Strings.beforeFirst(\"bar.baz.foo\", '.'));\n-        Assert.assertEquals(\"\", Strings.beforeFirst(\"bar\", '.'));\n-        Assert.assertEquals(\"baz.foo\", Strings.afterFirst(\"bar.baz.foo\", '.'));\n-        Assert.assertEquals(\"\", Strings.afterFirst(\"bar\", '.'));\n-        Assert.assertEquals(\"foo\", Strings.afterLast(\"bar.baz.foo\", '.'));\n-        Assert.assertEquals(\"\", Strings.afterLast(\"bar\", '.'));\n-        Assert.assertEquals(\"foo\", Strings.replaceAll(\"afaooaaa\", \"a\", \"\"));\n-        Assert.assertEquals(\"fuzzyffuzzyoofuzzyfuzzyfuzzy\", Strings.replaceAll(\"afaooaaa\", \"a\",\n-                \"fuzzy\"));\n-    }\n-}\n+\t/**\n+\t * \n+\t */\n+\tpublic void test()\n+\t{\n+\t\tAssert.assertEquals(\"foo\", Strings.lastPathComponent(\"bar.garply.foo\", '.'));\n+\t\tAssert.assertEquals(\"foo\", Strings.lastPathComponent(\"foo\", '.'));\n+\t\tAssert.assertEquals(\"bar\", Strings.firstPathComponent(\"bar.garply.foo\", '.'));\n+\t\tAssert.assertEquals(\"foo\", Strings.lastPathComponent(\"foo\", '.'));\n+\t\tAssert.assertEquals(\"garply.foo\", Strings.afterFirstPathComponent(\"bar.garply.foo\", '.'));\n+\t\tAssert.assertEquals(\"\", Strings.afterFirstPathComponent(\"foo\", '.'));\n+\t\tAssert.assertEquals(\"bar.baz\", Strings.beforeLast(\"bar.baz.foo\", '.'));\n+\t\tAssert.assertEquals(\"\", Strings.beforeLast(\"bar\", '.'));\n+\t\tAssert.assertEquals(\"bar\", Strings.beforeFirst(\"bar.baz.foo\", '.'));\n+\t\tAssert.assertEquals(\"\", Strings.beforeFirst(\"bar\", '.'));\n+\t\tAssert.assertEquals(\"baz.foo\", Strings.afterFirst(\"bar.baz.foo\", '.'));\n+\t\tAssert.assertEquals(\"\", Strings.afterFirst(\"bar\", '.'));\n+\t\tAssert.assertEquals(\"foo\", Strings.afterLast(\"bar.baz.foo\", '.'));\n+\t\tAssert.assertEquals(\"\", Strings.afterLast(\"bar\", '.'));\n+\t\tAssert.assertEquals(\"foo\", Strings.replaceAll(\"afaooaaa\", \"a\", \"\"));\n+\t\tAssert.assertEquals(\"fuzzyffuzzyoofuzzyfuzzyfuzzy\", Strings.replaceAll(\"afaooaaa\", \"a\",\n+\t\t\t\t\"fuzzy\"));\n+\t}\n+\n+\t/**\n+\t * Tests the <code>beforeFirst</code> method.\n+\t */\n+\tpublic void testBeforeFirst()\n+\t{\n+\t\tassertNull(Strings.beforeFirst(null, '.'));\n+\t\tassertEquals(\"\", Strings.beforeFirst(\"\", '.'));\n+\t\tassertEquals(\"\", Strings.beforeFirst(\"\", ' '));\n+\t\tassertEquals(\"\", Strings.beforeFirst(\".\", '.'));\n+\t\tassertEquals(\"\", Strings.beforeFirst(\"..\", '.'));\n+\t\tassertEquals(\"com\", Strings.beforeFirst(\"com.foo.bar\", '.'));\n+\t\tassertEquals(\"com\", Strings.beforeFirst(\"com foo bar\", ' '));\n+\t\tassertEquals(\"com foo\", Strings.beforeFirst(\"com foo.bar\", '.'));\n+\t}\n+\n+\t/**\n+\t * Tests the <code>afterFirst</code> method.\n+\t */\n+\tpublic void testAfterFirst()\n+\t{\n+\t\tassertNull(Strings.afterFirst(null, '.'));\n+\t\tassertEquals(\"\", Strings.afterFirst(\"\", '.'));\n+\t\tassertEquals(\"\", Strings.afterFirst(\"\", ' '));\n+\t\tassertEquals(\"\", Strings.afterFirst(\".\", '.'));\n+\t\tassertEquals(\".\", Strings.afterFirst(\"..\", '.'));\n+\t\tassertEquals(\"foo.bar\", Strings.afterFirst(\"com.foo.bar\", '.'));\n+\t\tassertEquals(\"foo bar\", Strings.afterFirst(\"com foo bar\", ' '));\n+\t\tassertEquals(\"bar\", Strings.afterFirst(\"com.foo bar\", ' '));\n+\t}\n+\n+\t/**\n+\t * Tests the <code>afterLast</code> method.\n+\t */\n+\tpublic void testAfterLast()\n+\t{\n+\t\tassertNull(Strings.afterLast(null, '.'));\n+\t\tassertEquals(\"\", Strings.afterLast(\"\", '.'));\n+\t\tassertEquals(\"\", Strings.afterLast(\"\", ' '));\n+\t\tassertEquals(\"\", Strings.afterLast(\".\", '.'));\n+\t\tassertEquals(\"\", Strings.afterLast(\"..\", '.'));\n+\t\tassertEquals(\"bar\", Strings.afterLast(\"com.foo.bar\", '.'));\n+\t\tassertEquals(\"bar\", Strings.afterLast(\"com foo bar\", ' '));\n+\t\tassertEquals(\"bar\", Strings.afterLast(\"com foo.bar\", '.'));\n+\t}\n+\n+\t/**\n+\t * Tests the beforeLastPathComponent method\n+\t */\n+\tpublic void testBeforeLastPathComponent()\n+\t{\n+\t\tassertNull(Strings.beforeLastPathComponent(null, '.'));\n+\t\tassertEquals(\"\", Strings.beforeLastPathComponent(\"\", '.'));\n+\t\tassertEquals(\"\", Strings.beforeLastPathComponent(\"\", ' '));\n+\t\tassertEquals(\"\", Strings.beforeLastPathComponent(\".\", '.'));\n+\t\tassertEquals(\".\", Strings.beforeLastPathComponent(\"..\", '.'));\n+\t\tassertEquals(\"foo\", Strings.beforeLastPathComponent(\"foo.bar\", '.'));\n+\t\tassertEquals(\"\", Strings.beforeLastPathComponent(\"foo.bar\", ' '));\n+\t\tassertEquals(\"foo.ba\", Strings.beforeLastPathComponent(\"foo.bar\", 'r'));\n+\t\tassertEquals(\"com.foo\", Strings.beforeLastPathComponent(\"com.foo.bar\", '.'));\n+\t}\n \n+\t/**\n+\t * Tests the capitalize method.\n+\t */\n+\tpublic void testCapitalize()\n+\t{\n+\t\tassertEquals(\"Lorem ipsum dolor sit amet\", Strings.capitalize(\"lorem ipsum dolor sit amet\"));\n+\t\tassertEquals(\"Lorem ipsum dolor sit amet\", Strings.capitalize(\"Lorem ipsum dolor sit amet\"));\n+\t\tassertEquals(\" abcdefghijklm\", Strings.capitalize(\" abcdefghijklm\"));\n+\t\tassertEquals(\"\", Strings.capitalize(\"\"));\n+\t\tassertNull(Strings.capitalize(null));\n+\t}\n \n+\t/**\n+\t * Tests the escapeMarkup method.\n+\t */\n+\tpublic void testEscapeMarkup()\n+\t{\n+\t\tassertNull(Strings.escapeMarkup(null));\n+\t\tassertEquals(\"\", Strings.escapeMarkup(\"\"));\n+\n+\t\tassertEquals(\"&amp;\", Strings.escapeMarkup(\"&\"));\n+\t\tassertEquals(\"&#\", Strings.escapeMarkup(\"&#\"));\n+\t\tassertEquals(\"&#0000;\", Strings.escapeMarkup(\"&#0000;\"));\n+\t\t\n+\t\tassertEquals(\"&amp;amp;\", Strings.escapeMarkup(\"&amp;\"));\n+\t\tassertEquals(\"&lt; &gt;&amp;&quot;&#039;?:;{}[]-_+=()*^%$#@!~`\", Strings.escapeMarkup(\"< >&\\\"'?:;{}[]-_+=()*^%$#@!~`\"));\n+\t\tassertEquals(\"&lt;&nbsp;&gt;&amp;&quot;&#039;?:;{}[]-_+=()*^%$#@!~`\", Strings.escapeMarkup(\"< >&\\\"'?:;{}[]-_+=()*^%$#@!~`\", true));\n+\t}\n+\t\n+\t/**\n+\t * Tests the escapeMarkup method with whitespace.\n+\t */\n+\tpublic void testEscapeMarkupWhiteSpace()\n+\t{\n+\t\tassertNull(Strings.escapeMarkup(null, true));\n+\t\tassertEquals(\"\", Strings.escapeMarkup(\"\", true));\n+\t\t\n+\t\tassertEquals(\"\\n \\t\", Strings.escapeMarkup(\"\\n \\t\", false));\n+\t\tassertEquals(\"\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\", Strings.escapeMarkup(\"\\n \\t\", true));\n+\t\tassertEquals(\"  \", Strings.escapeMarkup(\"  \", false));\n+\t\tassertEquals(\"&nbsp;&nbsp;\", Strings.escapeMarkup(\"  \", true));\n+\t}\n+\n+\t/**\n+\t * Tests the escapeMarkup method with unicode escapes.\n+\t */\n+\tpublic void testEscapeMarkupUnicode()\n+\t{\n+\t\tassertNull(Strings.escapeMarkup(null, true, true));\n+\t\tassertEquals(\"\", Strings.escapeMarkup(\"\", true, true));\n+\n+\t\tassertEquals(\"&#199;&#252;&#233;&#226;&#228;&#224;&#229;&#231;&#234;&#235;\", \n+\t\t\t\tStrings.escapeMarkup(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", false, true));\n+\n+\t\tassertEquals(\"\\n \\t&#233;\", Strings.escapeMarkup(\"\\n \\t\ufffd\", false, true));\n+\t\tassertEquals(\"\\n \\t\ufffd\", Strings.escapeMarkup(\"\\n \\t\ufffd\", false, false));\n+\t}\n+}",
                "raw_url": "https://github.com/apache/wicket/raw/8cb7d48aa7bbc058255abd1f282252897a9d9baa/wicket/src/test/wicket/util/string/StringsTest.java",
                "sha": "097bd817cf560dac355616e6ad022e2c5d20f2df",
                "status": "modified"
            }
        ],
        "message": "Fixed possible NPE's, upped coverage from <25% to >30%\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@457539 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/e8c477fadf373f35a068acc0d710d6a91ffa9ff7",
        "patched_files": [
            "Strings.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "StringsTest.java"
        ]
    },
    "wicket_8cd64ee": {
        "bug_id": "wicket_8cd64ee",
        "commit": "https://github.com/apache/wicket/commit/8cd64ee40d1ac5444d7136e9a68c71010085f65a",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/wicket/blob/8cd64ee40d1ac5444d7136e9a68c71010085f65a/wicket/src/main/java/org/apache/wicket/resource/loader/ComponentStringResourceLoader.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/org/apache/wicket/resource/loader/ComponentStringResourceLoader.java?ref=8cd64ee40d1ac5444d7136e9a68c71010085f65a",
                "deletions": 7,
                "filename": "wicket/src/main/java/org/apache/wicket/resource/loader/ComponentStringResourceLoader.java",
                "patch": "@@ -110,7 +110,7 @@ public ComponentStringResourceLoader()\n \t * @see org.apache.wicket.resource.loader.IStringResourceLoader#loadStringResource(java.lang.Class,\n \t *      java.lang.String, java.util.Locale, java.lang.String)\n \t */\n-\tpublic String loadStringResource(Class< ? > clazz, final String key, final Locale locale,\n+\tpublic String loadStringResource(Class<?> clazz, final String key, final Locale locale,\n \t\tfinal String style)\n \t{\n \t\tif (clazz == null)\n@@ -132,7 +132,7 @@ public String loadStringResource(Class< ? > clazz, final String key, final Local\n \t\t\tResourceNameIterator iter = new ResourceNameIterator(path, style, locale, null);\n \t\t\twhile (iter.hasNext())\n \t\t\t{\n-\t\t\t\tString newPath = (String)iter.next();\n+\t\t\t\tString newPath = iter.next();\n \n \t\t\t\tfinal Properties props = propertiesFactory.load(clazz, newPath);\n \t\t\t\tif (props != null)\n@@ -159,6 +159,12 @@ public String loadStringResource(Class< ? > clazz, final String key, final Local\n \n \t\t\t// Move to the next superclass\n \t\t\tclazz = clazz.getSuperclass();\n+\n+\t\t\tif (clazz == null)\n+\t\t\t{\n+\t\t\t\t// nothing more to search, done\n+\t\t\t\tbreak;\n+\t\t\t}\n \t\t}\n \n \t\t// not found\n@@ -188,12 +194,12 @@ public String loadStringResource(final Component component, final String key)\n \n \t\t// The reason why we need to create that stack is because we need to\n \t\t// walk it downwards starting with Page down to the Component\n-\t\tList<Class< ? >> searchStack = getComponentStack(component);\n+\t\tList<Class<?>> searchStack = getComponentStack(component);\n \n \t\t// Walk the component hierarchy down from page to the component\n \t\tfor (int i = searchStack.size() - 1; (i >= 0) && (string == null); i--)\n \t\t{\n-\t\t\tClass< ? > clazz = searchStack.get(i);\n+\t\t\tClass<?> clazz = searchStack.get(i);\n \n \t\t\t// First, try the fully qualified resource name relative to the\n \t\t\t// component on the path from page down.\n@@ -226,10 +232,10 @@ public String loadStringResource(final Component component, final String key)\n \t *            The component to evaluate\n \t * @return The stack of classes\n \t */\n-\tprivate List<Class< ? >> getComponentStack(final Component component)\n+\tprivate List<Class<?>> getComponentStack(final Component component)\n \t{\n \t\t// Build the search stack\n-\t\tfinal List<Class< ? >> searchStack = new ArrayList<Class< ? >>();\n+\t\tfinal List<Class<?>> searchStack = new ArrayList<Class<?>>();\n \t\tsearchStack.add(component.getClass());\n \n \t\tif (!(component instanceof Page))\n@@ -258,7 +264,7 @@ public String loadStringResource(final Component component, final String key)\n \t *            The class to check\n \t * @return Whether to stop the search\n \t */\n-\tprotected boolean isStopResourceSearch(final Class< ? > clazz)\n+\tprotected boolean isStopResourceSearch(final Class<?> clazz)\n \t{\n \t\tif ((clazz == null) || clazz.equals(Object.class) || clazz.equals(Application.class))\n \t\t{",
                "raw_url": "https://github.com/apache/wicket/raw/8cd64ee40d1ac5444d7136e9a68c71010085f65a/wicket/src/main/java/org/apache/wicket/resource/loader/ComponentStringResourceLoader.java",
                "sha": "a9554af89fb74d05902eade24f4accfe338a6fbc",
                "status": "modified"
            }
        ],
        "message": "patch possible npe when interface is passed in\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@683701 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/02c85dba31a0d5c315f5e90a994df2263a61b2d9",
        "patched_files": [
            "ComponentStringResourceLoader.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "ComponentStringResourceLoaderTest.java"
        ]
    },
    "wicket_932f0f2": {
        "bug_id": "wicket_932f0f2",
        "commit": "https://github.com/apache/wicket/commit/932f0f2728768e8fb4c209ec5dc1c6fe2f4b882d",
        "file": [
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/wicket/blob/932f0f2728768e8fb4c209ec5dc1c6fe2f4b882d/wicket/src/java/wicket/Session.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/Session.java?ref=932f0f2728768e8fb4c209ec5dc1c6fe2f4b882d",
                "deletions": 21,
                "filename": "wicket/src/java/wicket/Session.java",
                "patch": "@@ -755,31 +755,34 @@ protected void update()\n \t\t}\n \n \t\t// Go through all dirty entries, replicating any dirty objects\n-\t\tfor (final Iterator iterator = dirtyObjects.iterator(); iterator.hasNext();)\n+\t\tif (dirtyObjects != null)\n \t\t{\n-\t\t\tString attribute = null;\n-\t\t\tObject object = iterator.next();\n-\t\t\tif (object instanceof Page)\n+\t\t\tfor (final Iterator iterator = dirtyObjects.iterator(); iterator.hasNext();)\n \t\t\t{\n-\t\t\t\tfinal Page page = (Page)object;\n-\t\t\t\tattribute = page.getPageMap().attributeForId(page.getNumericId());\n-\t\t\t\tobject = page.getPageMapEntry();\n-\t\t\t}\n-\t\t\telse if (object instanceof PageMap)\n-\t\t\t{\n-\t\t\t\tattribute = attributeForPageMapName(((PageMap)object).getName());\n-\t\t\t}\n-\n-\t\t\t// only replicate if the object was really already in the map.\n-\t\t\t// for example stateless pages will not be in the map so they\n-\t\t\t// shouldn't be added\n-\t\t\tObject previous = getAttribute(attribute);\n-\t\t\tif (previous != null)\n-\t\t\t{\n-\t\t\t\tsetAttribute(attribute, object);\n+\t\t\t\tString attribute = null;\n+\t\t\t\tObject object = iterator.next();\n+\t\t\t\tif (object instanceof Page)\n+\t\t\t\t{\n+\t\t\t\t\tfinal Page page = (Page)object;\n+\t\t\t\t\tattribute = page.getPageMap().attributeForId(page.getNumericId());\n+\t\t\t\t\tobject = page.getPageMapEntry();\n+\t\t\t\t}\n+\t\t\t\telse if (object instanceof PageMap)\n+\t\t\t\t{\n+\t\t\t\t\tattribute = attributeForPageMapName(((PageMap)object).getName());\n+\t\t\t\t}\n+\t\n+\t\t\t\t// only replicate if the object was really already in the map.\n+\t\t\t\t// for example stateless pages will not be in the map so they\n+\t\t\t\t// shouldn't be added\n+\t\t\t\tObject previous = getAttribute(attribute);\n+\t\t\t\tif (previous != null)\n+\t\t\t\t{\n+\t\t\t\t\tsetAttribute(attribute, object);\n+\t\t\t\t}\n \t\t\t}\n+\t\t\tdirtyObjects = null;\n \t\t}\n-\t\tdirtyObjects = null;\n \t}\n \n \t/**",
                "raw_url": "https://github.com/apache/wicket/raw/932f0f2728768e8fb4c209ec5dc1c6fe2f4b882d/wicket/src/java/wicket/Session.java",
                "sha": "2c40bd72bf0986790c81a1b49f6dd75661c1a11e",
                "status": "modified"
            }
        ],
        "message": "avoid NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@458816 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/f6436bd1a6c935fb1b8f17f606b2eb2381c7d5d7",
        "patched_files": [
            "Session.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "TestSession.java"
        ]
    },
    "wicket_aa24d76": {
        "bug_id": "wicket_aa24d76",
        "commit": "https://github.com/apache/wicket/commit/aa24d761bfcf0cae32aa6d41589b2b7ed2b31191",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/wicket/blob/aa24d761bfcf0cae32aa6d41589b2b7ed2b31191/wicket/src/java/wicket/markup/html/form/Form.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/markup/html/form/Form.java?ref=aa24d761bfcf0cae32aa6d41589b2b7ed2b31191",
                "deletions": 0,
                "filename": "wicket/src/java/wicket/markup/html/form/Form.java",
                "patch": "@@ -925,6 +925,11 @@ private void dispatchEvent(final Page page, final String url)\n \t{\n \t\tfinal RequestParameters requestParameters = getRequest().getRequestParameters();\n \t\tfinal Component component = page.get(requestParameters.getComponentPath());\n+\t\tif (component == null)\n+\t\t{\n+\t\t\tthrow new WicketRuntimeException(\n+\t\t\t\t\t\"Component not found: \" + requestParameters.getComponentPath());\n+\t\t}\n \t\tif (!component.isVisible())\n \t\t{\n \t\t\tthrow new WicketRuntimeException(",
                "raw_url": "https://github.com/apache/wicket/raw/aa24d761bfcf0cae32aa6d41589b2b7ed2b31191/wicket/src/java/wicket/markup/html/form/Form.java",
                "sha": "f63de6a4fd0ce458103997d5ff6fca87eb7abbf1",
                "status": "modified"
            }
        ],
        "message": "avoid NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@459396 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/a96383b0210468fd4ee0087fec3961fb82a668ec",
        "patched_files": [
            "Form.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "TestForm.java"
        ]
    },
    "wicket_af05b3d": {
        "bug_id": "wicket_af05b3d",
        "commit": "https://github.com/apache/wicket/commit/af05b3d68ca8b8021db8e205d39557782eb68a7b",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/wicket/blob/af05b3d68ca8b8021db8e205d39557782eb68a7b/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java?ref=af05b3d68ca8b8021db8e205d39557782eb68a7b",
                "deletions": 3,
                "filename": "wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java",
                "patch": "@@ -774,10 +774,10 @@ else if (hasError())\n \t\t\tcallOnError(submitter);\n \t\t}\n \n-\n-\t\tif (((WebRequest)getRequest()).isAjax())\n+\t\t// update auto labels if we are inside an ajax request\n+\t\tfinal AjaxRequestTarget target = getRequestCycle().find(AjaxRequestTarget.class);\n+\t\tif (target != null)\n \t\t{\n-\t\t\tfinal AjaxRequestTarget target = getRequestCycle().find(AjaxRequestTarget.class);\n \t\t\tvisitChildren(FormComponent.class, new IVisitor<FormComponent<?>, Void>()\n \t\t\t{\n \t\t\t\t@Override",
                "raw_url": "https://github.com/apache/wicket/raw/af05b3d68ca8b8021db8e205d39557782eb68a7b/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java",
                "sha": "7eeb1e17c4c76b9726b4859279bd15f8034abf08",
                "status": "modified"
            }
        ],
        "message": "WICKET-5462 fix npe in ajax form component label repainting",
        "parent": "https://github.com/apache/wicket/commit/a3a5a40fcea53384554d7a8ada08ef7bb021bf1d",
        "patched_files": [
            "Form.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "FormTest.java",
            "TestForm.java"
        ]
    },
    "wicket_af8bc0c": {
        "bug_id": "wicket_af8bc0c",
        "commit": "https://github.com/apache/wicket/commit/af8bc0ceff7d99d4bb431a9538974acee58d3680",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/wicket/blob/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/AutolinkTest.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/autolink/AutolinkTest.java?ref=af8bc0ceff7d99d4bb431a9538974acee58d3680",
                "deletions": 4,
                "filename": "wicket/src/test/wicket/markup/html/autolink/AutolinkTest.java",
                "patch": "@@ -21,6 +21,7 @@\n import org.apache.commons.logging.LogFactory;\n \n import wicket.WicketTestCase;\n+import wicket.markup.html.autolink.sub.PageB;\n import wicket.markup.resolver.AutoLinkResolver;\n \n /**\n@@ -41,15 +42,29 @@ public AutolinkTest(String name)\n \t}\n \n \t/**\n-\t * TODO Autolink: see https://sourceforge.net/tracker/index.php?func=detail&aid=1448200&group_id=119783&atid=684975\n-\t * The AnchorResolverDelegate implementation solves the problem. In that\n-\t * context it actually is not a test, rather than a solution which has not yet\n-\t * found its way into the core.\n \t * \n \t * @throws Exception\n \t */\n \tpublic void test_1() throws Exception\n \t{\n \t\texecuteTest(MyPage.class, \"MyPageExpectedResult.html\");\n \t}\n+\n+\t/**\n+\t * \n+\t * @throws Exception\n+\t */\n+\tpublic void test_2() throws Exception\n+\t{\n+\t\texecuteTest(PageA.class, \"PageAExpectedResult.html\");\n+\t}\n+\n+\t/**\n+\t * \n+\t * @throws Exception\n+\t */\n+\tpublic void test_3() throws Exception\n+\t{\n+\t\texecuteTest(PageB.class, \"PageBExpectedResult.html\");\n+\t}\n }",
                "raw_url": "https://github.com/apache/wicket/raw/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/AutolinkTest.java",
                "sha": "1bbc1ba0644cd50df3740da51e95f24100d1a099",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/wicket/blob/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/BasePage.html",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/autolink/BasePage.html?ref=af8bc0ceff7d99d4bb431a9538974acee58d3680",
                "deletions": 0,
                "filename": "wicket/src/test/wicket/markup/html/autolink/BasePage.html",
                "patch": "@@ -0,0 +1,13 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n+<html>\n+  <body>\n+    <wicket:link>\n+      <a href=\"MyPage.html\">My Page</a>\n+      <a href=\"PageA.html\">Page A</a>\n+      <a href=\"sub/PageB.html\">Page B</a>\n+    </wicket:link>\n+    START<br>\n+    <wicket:child/>\n+    END<br>\n+  </body>\n+</html>",
                "raw_url": "https://github.com/apache/wicket/raw/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/BasePage.html",
                "sha": "0a04d9c4b750de00a1fc1acf43c90c4685c8bd36",
                "status": "added"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/wicket/blob/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/BasePage.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/autolink/BasePage.java?ref=af8bc0ceff7d99d4bb431a9538974acee58d3680",
                "deletions": 0,
                "filename": "wicket/src/test/wicket/markup/html/autolink/BasePage.java",
                "patch": "@@ -0,0 +1,36 @@\n+/*\n+ * $Id: ContainerWithAssociatedMarkupHelper.java,v 1.1 2006/03/10 22:20:42\n+ * jdonnerstag Exp $ $Revision$ $Date: 2006/03/10 22:20:42 $\n+ * \n+ * ==============================================================================\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package wicket.markup.html.autolink;\n+\n+import wicket.markup.html.WebPage;\n+\n+/**\n+ * \n+ */\n+public class BasePage extends WebPage\n+{\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\t/** \n+\t * Creates a new instance of BasePanel\n+\t * \n+\t */\n+\tpublic BasePage()\n+\t{\n+\t}\n+}",
                "raw_url": "https://github.com/apache/wicket/raw/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/BasePage.java",
                "sha": "e2583d7ddf3f9979cd666d7850bff21906f18f46",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/wicket/blob/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/MyPage.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/autolink/MyPage.java?ref=af8bc0ceff7d99d4bb431a9538974acee58d3680",
                "deletions": 1,
                "filename": "wicket/src/test/wicket/markup/html/autolink/MyPage.java",
                "patch": "@@ -17,7 +17,6 @@\n  */\n package wicket.markup.html.autolink;\n \n-import wicket.markup.html.autolink.sub.BasePage;\n \n /**\n  * ",
                "raw_url": "https://github.com/apache/wicket/raw/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/MyPage.java",
                "sha": "a5b593efc711e3227a2067e14f9c81b501125d19",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/MyPageExpectedResult.html",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/autolink/MyPageExpectedResult.html?ref=af8bc0ceff7d99d4bb431a9538974acee58d3680",
                "deletions": 0,
                "filename": "wicket/src/test/wicket/markup/html/autolink/MyPageExpectedResult.html",
                "patch": "@@ -2,6 +2,8 @@\n <html>\r\n   <body>\r\n     <wicket:link>\r\n+      <span><em>My Page</em></span>\r\n+      <a href=\"/MockWebApplication/MockWebApplication?wicket:bookmarkablePage=:wicket.markup.html.autolink.PageA\">Page A</a>\r\n       <a href=\"/MockWebApplication/MockWebApplication?wicket:bookmarkablePage=:wicket.markup.html.autolink.sub.PageB\">Page B</a>\r\n     </wicket:link>\r\n     START<br>\r",
                "raw_url": "https://github.com/apache/wicket/raw/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/MyPageExpectedResult.html",
                "sha": "01f9ad375df56b3e7819ff70261e9d288c3d906a",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/wicket/blob/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/PageA.html",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/autolink/PageA.html?ref=af8bc0ceff7d99d4bb431a9538974acee58d3680",
                "deletions": 6,
                "filename": "wicket/src/test/wicket/markup/html/autolink/PageA.html",
                "patch": "@@ -1,6 +1,7 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n-<html>\n-  <body>\n-    Page A\n-  </body>\n-</html>\n+\n+<wicket:extend>\n+  <wicket:link>\n+    <a href=\"PageA.html\">Page A</a>\n+  </wicket:link>\n+  Page A\n+</wicket:extend>",
                "raw_url": "https://github.com/apache/wicket/raw/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/PageA.html",
                "sha": "9e59faa483289aac0bb2ff4d68971f28b89b2ffa",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/PageA.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/autolink/PageA.java?ref=af8bc0ceff7d99d4bb431a9538974acee58d3680",
                "deletions": 3,
                "filename": "wicket/src/test/wicket/markup/html/autolink/PageA.java",
                "patch": "@@ -17,13 +17,11 @@\n  */\n package wicket.markup.html.autolink;\n \n-import wicket.markup.html.WebPage;\n-\n /**\n  * \n  * @author Juergen Donnerstag\n  */\n-public class PageA extends WebPage\n+public class PageA extends BasePage\n {\n \tprivate static final long serialVersionUID = 1L;\n ",
                "raw_url": "https://github.com/apache/wicket/raw/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/PageA.java",
                "sha": "498814b4be75b22557d9e2a7ed13dbc0cb4ef2bf",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/wicket/blob/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/PageAExpectedResult.html",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/autolink/PageAExpectedResult.html?ref=af8bc0ceff7d99d4bb431a9538974acee58d3680",
                "deletions": 0,
                "filename": "wicket/src/test/wicket/markup/html/autolink/PageAExpectedResult.html",
                "patch": "@@ -0,0 +1,18 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\r\n+<html>\r\n+  <body>\r\n+    <wicket:link>\r\n+      <a href=\"/MockWebApplication/MockWebApplication?wicket:bookmarkablePage=:wicket.markup.html.autolink.MyPage\">My Page</a>\r\n+      <span><em>Page A</em></span>\r\n+      <a href=\"/MockWebApplication/MockWebApplication?wicket:bookmarkablePage=:wicket.markup.html.autolink.sub.PageB\">Page B</a>\r\n+    </wicket:link>\r\n+    START<br>\r\n+    <wicket:child><wicket:extend>\r\n+  <wicket:link>\r\n+    <span><em>Page A</em></span>\r\n+  </wicket:link>\r\n+  Page A\r\n+</wicket:extend></wicket:child>\r\n+    END<br>\r\n+  </body>\r\n+</html>\r",
                "raw_url": "https://github.com/apache/wicket/raw/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/PageAExpectedResult.html",
                "sha": "9506f717b55efd93867380c3dbeff4178844e721",
                "status": "added"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/wicket/blob/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/PageBExpectedResult.html",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/autolink/PageBExpectedResult.html?ref=af8bc0ceff7d99d4bb431a9538974acee58d3680",
                "deletions": 0,
                "filename": "wicket/src/test/wicket/markup/html/autolink/PageBExpectedResult.html",
                "patch": "@@ -0,0 +1,16 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\r\n+<html>\r\n+  <body>\r\n+    <wicket:link>\r\n+      <span><em>Page B</em></span>\r\n+    </wicket:link>\r\n+    START<br>\r\n+    <wicket:child><wicket:extend>\r\n+  <wicket:link>\r\n+    <a href=\"PageA.html\">Page A</a>\r\n+  </wicket:link>\r\n+  Page B\r\n+</wicket:extend></wicket:child>\r\n+    END<br>\r\n+  </body>\r\n+</html>\r",
                "raw_url": "https://github.com/apache/wicket/raw/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/PageBExpectedResult.html",
                "sha": "592bbbe2df992bfcb9fdd607a610a2a757f4d4a3",
                "status": "added"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/wicket/blob/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/sub/PageB.html",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/autolink/sub/PageB.html?ref=af8bc0ceff7d99d4bb431a9538974acee58d3680",
                "deletions": 6,
                "filename": "wicket/src/test/wicket/markup/html/autolink/sub/PageB.html",
                "patch": "@@ -1,6 +1,7 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n-<html>\n-  <body>\n-    Page B\n-  </body>\n-</html>\n+\n+<wicket:extend>\n+  <wicket:link>\n+    <a href=\"PageA.html\">Page A</a>\n+  </wicket:link>\n+  Page B\n+</wicket:extend>",
                "raw_url": "https://github.com/apache/wicket/raw/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/sub/PageB.html",
                "sha": "05da0c93fede142a2594675d9747e7944b750281",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/sub/PageB.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/autolink/sub/PageB.java?ref=af8bc0ceff7d99d4bb431a9538974acee58d3680",
                "deletions": 2,
                "filename": "wicket/src/test/wicket/markup/html/autolink/sub/PageB.java",
                "patch": "@@ -17,13 +17,12 @@\n  */\n package wicket.markup.html.autolink.sub;\n \n-import wicket.markup.html.WebPage;\n \n /**\n  * \n  * @author Juergen Donnerstag\n  */\n-public class PageB extends WebPage\n+public class PageB extends BasePage\n {\n \tprivate static final long serialVersionUID = 1L;\n ",
                "raw_url": "https://github.com/apache/wicket/raw/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/sub/PageB.java",
                "sha": "339c6c8767ef4b017c26e917722269723bf77946",
                "status": "modified"
            }
        ],
        "message": "fixed NPE and extended the unit test (provided by Thomas Singer)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@460161 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/153dd8404e080e1a4b70e05d6e0f55e34188e5bd",
        "patched_files": [
            "PageA.java",
            "PageB.html",
            "PageBExpectedResult.html",
            "MyPageExpectedResult.html",
            "PageA.html",
            "PageAExpectedResult.html",
            "PageB.java",
            "BasePage.java",
            "MyPage.java",
            "BasePage.html"
        ],
        "repo": "wicket",
        "unit_tests": [
            "AutolinkTest.java"
        ]
    },
    "wicket_b02ba6d": {
        "bug_id": "wicket_b02ba6d",
        "commit": "https://github.com/apache/wicket/commit/b02ba6d5f4810ab70f0144f9c16273311b976b9a",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/wicket/blob/b02ba6d5f4810ab70f0144f9c16273311b976b9a/wicket/src/main/java/org/apache/wicket/markup/MarkupCache.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/org/apache/wicket/markup/MarkupCache.java?ref=b02ba6d5f4810ab70f0144f9c16273311b976b9a",
                "deletions": 0,
                "filename": "wicket/src/main/java/org/apache/wicket/markup/MarkupCache.java",
                "patch": "@@ -694,6 +694,10 @@ public void clear()\n \t\t */\n \t\tpublic boolean containsKey(Object key)\n \t\t{\n+\t\t\tif (key == null)\n+\t\t\t{\n+\t\t\t\treturn false;\n+\t\t\t}\n \t\t\treturn cache.containsKey(key);\n \t\t}\n \n@@ -702,6 +706,10 @@ public boolean containsKey(Object key)\n \t\t */\n \t\tpublic V get(Object key)\n \t\t{\n+\t\t\tif (key == null)\n+\t\t\t{\n+\t\t\t\treturn null;\n+\t\t\t}\n \t\t\treturn cache.get(key);\n \t\t}\n ",
                "raw_url": "https://github.com/apache/wicket/raw/b02ba6d5f4810ab70f0144f9c16273311b976b9a/wicket/src/main/java/org/apache/wicket/markup/MarkupCache.java",
                "sha": "3328337be9948e0ad20976b1f8e96de96be93aba",
                "status": "modified"
            }
        ],
        "message": "fixed: NPE after application hot redeployment (MarkupCache)\nIssue: WICKET-2475\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@816867 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/9771e6b210e353c3e91aeefbf7c7214ef30b6d75",
        "patched_files": [
            "MarkupCache.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "MarkupCacheTest.java"
        ]
    },
    "wicket_b719561": {
        "bug_id": "wicket_b719561",
        "commit": "https://github.com/apache/wicket/commit/b719561b4429941ccbd705ac1ddd13e4aa1aec0e",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/wicket/blob/b719561b4429941ccbd705ac1ddd13e4aa1aec0e/wicket-core/src/main/java/org/apache/wicket/core/util/io/SerializableChecker.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/core/util/io/SerializableChecker.java?ref=b719561b4429941ccbd705ac1ddd13e4aa1aec0e",
                "deletions": 0,
                "filename": "wicket-core/src/main/java/org/apache/wicket/core/util/io/SerializableChecker.java",
                "patch": "@@ -349,6 +349,15 @@ public void reset() throws IOException\n \t\twriteObjectMethodMissing.clear();\n \t}\n \n+\t@Override\n+\tpublic void close() throws IOException\n+\t{\n+\t\t// do not call super.close() because SerializableChecker uses ObjectOutputStream's no-arg constructor\n+\n+\t\t// just null-ify the declared members\n+\t\treset();\n+\t}\n+\n \tprivate void check(Object obj)\n \t{\n \t\tif (obj == null)",
                "raw_url": "https://github.com/apache/wicket/raw/b719561b4429941ccbd705ac1ddd13e4aa1aec0e/wicket-core/src/main/java/org/apache/wicket/core/util/io/SerializableChecker.java",
                "sha": "57f831716882a7750bc29cb274e46a8c3b771e81",
                "status": "modified"
            }
        ],
        "message": "WICKET-4706 SerializableChecker.close throws NPE",
        "parent": "https://github.com/apache/wicket/commit/4fc82e3598ec6d790fe13c05ef99b1a69095779e",
        "patched_files": [
            "SerializableChecker.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "SerializableCheckerTest.java"
        ]
    },
    "wicket_bbaedf4": {
        "bug_id": "wicket_bbaedf4",
        "commit": "https://github.com/apache/wicket/commit/bbaedf45534cc9d7ca4055be907d42b5cb2f7cd6",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/wicket/blob/bbaedf45534cc9d7ca4055be907d42b5cb2f7cd6/wicket/src/test/wicket/markup/html/list/TableTest.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/list/TableTest.java?ref=bbaedf45534cc9d7ca4055be907d42b5cb2f7cd6",
                "deletions": 5,
                "filename": "wicket/src/test/wicket/markup/html/list/TableTest.java",
                "patch": "@@ -20,19 +20,25 @@\n \n import java.util.ArrayList;\n \n-import wicket.markup.html.list.ListItem;\n-import wicket.markup.html.list.PageableListView;\n+import wicket.WicketTestCase;\n import wicket.model.Model;\n \n-import junit.framework.TestCase;\n-\n \n /**\n  * Test for tables.\n  * @author Juergen Donnerstag\n  */\n-public class TableTest extends TestCase\n+public class TableTest extends WicketTestCase\n {\n+\t/**\n+\t * Construct.\n+\t * @param name\n+\t */\n+\tpublic TableTest(String name)\n+\t{\n+\t\tsuper(name);\n+\t}\n+\n \t/**\n \t * creates a table.\n \t * @param modelListSize",
                "raw_url": "https://github.com/apache/wicket/raw/bbaedf45534cc9d7ca4055be907d42b5cb2f7cd6/wicket/src/test/wicket/markup/html/list/TableTest.java",
                "sha": "230a550e6f32d6ea146950f665f8c64e76a3536a",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/wicket/blob/bbaedf45534cc9d7ca4055be907d42b5cb2f7cd6/wicket/src/test/wicket/model/ModelToStringTest.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/model/ModelToStringTest.java?ref=bbaedf45534cc9d7ca4055be907d42b5cb2f7cd6",
                "deletions": 3,
                "filename": "wicket/src/test/wicket/model/ModelToStringTest.java",
                "patch": "@@ -3,15 +3,23 @@\n import java.util.Properties;\n \n import wicket.Component;\n+import wicket.WicketTestCase;\n import wicket.markup.html.basic.Label;\n \n-import junit.framework.TestCase;\n-\n /**\n  * Tests the toString() method on the models in the wicket.model package.\n  */\n-public class ModelToStringTest extends TestCase\n+public class ModelToStringTest extends WicketTestCase\n {\n+\t/**\n+\t * Construct.\n+\t * @param name\n+\t */\n+\tpublic ModelToStringTest(String name)\n+\t{\n+\t\tsuper(name);\n+\t}\n+\n \t/**\n \t * Used for models in testing.\n \t */",
                "raw_url": "https://github.com/apache/wicket/raw/bbaedf45534cc9d7ca4055be907d42b5cb2f7cd6/wicket/src/test/wicket/model/ModelToStringTest.java",
                "sha": "2b7ee573a7d213f80d4f15b7270fd4d6782c4669",
                "status": "modified"
            }
        ],
        "message": "fixed core unit test failure (NPE) due to getApplication().getAuthorizationStrategy() returning null (application not initialized)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@458014 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/273f7c3fc0949e5bac4c6a4329baa7206387f7c6",
        "patched_files": [],
        "repo": "wicket",
        "unit_tests": [
            "ModelToStringTest.java",
            "TableTest.java"
        ]
    },
    "wicket_bc10ba5": {
        "bug_id": "wicket_bc10ba5",
        "commit": "https://github.com/apache/wicket/commit/bc10ba570fd6ef9867351d7f7d9e960eb2ba3dfc",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/bc10ba570fd6ef9867351d7f7d9e960eb2ba3dfc/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java?ref=bc10ba570fd6ef9867351d7f7d9e960eb2ba3dfc",
                "deletions": 5,
                "filename": "wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "patch": "@@ -710,12 +710,9 @@ public final void renderAssociatedMarkup(final String openTagName, final String\n \t */\n \tpublic MarkupContainer replace(final Component child)\n \t{\n-\t\tcheckHierarchyChange(child);\n+\t\tArgs.notNull(child, \"child\");\n \n-\t\tif (child == null)\n-\t\t{\n-\t\t\tthrow new IllegalArgumentException(\"argument child must be not null\");\n-\t\t}\n+\t\tcheckHierarchyChange(child);\n \n \t\tif (log.isDebugEnabled())\n \t\t{",
                "raw_url": "https://github.com/apache/wicket/raw/bc10ba570fd6ef9867351d7f7d9e960eb2ba3dfc/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "sha": "731065c5f3aa82804f1f3fe85de5c0c7cc2bd4fb",
                "status": "modified"
            }
        ],
        "message": "Move the check for non-null earlier in the method body. It would throw NPE in #checkHierarchyChange() otherwise.\n\nUse Args.",
        "parent": "https://github.com/apache/wicket/commit/0b78d759220c1b09abb0d47b5007757bbfeb4e0c",
        "patched_files": [
            "MarkupContainer.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "MarkupContainerTest.java"
        ]
    },
    "wicket_bcea89f": {
        "bug_id": "wicket_bcea89f",
        "commit": "https://github.com/apache/wicket/commit/bcea89fc8a196d2e1ebdcecf9c81298a06b4f5cb",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/bcea89fc8a196d2e1ebdcecf9c81298a06b4f5cb/wicket-util/src/main/java/org/apache/wicket/util/collections/IntHashMap.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-util/src/main/java/org/apache/wicket/util/collections/IntHashMap.java?ref=bcea89fc8a196d2e1ebdcecf9c81298a06b4f5cb",
                "deletions": 0,
                "filename": "wicket-util/src/main/java/org/apache/wicket/util/collections/IntHashMap.java",
                "patch": "@@ -1145,6 +1145,8 @@ private void writeObject(final java.io.ObjectOutputStream s) throws IOException\n \tprivate void readObject(final java.io.ObjectInputStream s) throws IOException,\n \t\tClassNotFoundException\n \t{\n+\t\tmodCount = new AtomicInteger(0);\n+\n \t\t// Read in the threshold, loadfactor, and any hidden stuff\n \t\ts.defaultReadObject();\n ",
                "raw_url": "https://github.com/apache/wicket/raw/bcea89fc8a196d2e1ebdcecf9c81298a06b4f5cb/wicket-util/src/main/java/org/apache/wicket/util/collections/IntHashMap.java",
                "sha": "7a8d1809295dc8ece761157c1df44a83e8143948",
                "status": "modified"
            },
            {
                "additions": 61,
                "blob_url": "https://github.com/apache/wicket/blob/bcea89fc8a196d2e1ebdcecf9c81298a06b4f5cb/wicket-util/src/test/java/org/apache/wicket/util/collections/IntHashMapTest.java",
                "changes": 61,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-util/src/test/java/org/apache/wicket/util/collections/IntHashMapTest.java?ref=bcea89fc8a196d2e1ebdcecf9c81298a06b4f5cb",
                "deletions": 0,
                "filename": "wicket-util/src/test/java/org/apache/wicket/util/collections/IntHashMapTest.java",
                "patch": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.wicket.util.collections;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Iterator;\n+\n+import org.apache.wicket.util.io.ByteArrayOutputStream;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class IntHashMapTest extends Assert\n+{\n+\n+\t@Test\n+\tpublic void serialize() throws IOException, ClassNotFoundException\n+\t{\n+\t\tIntHashMap<String> map = new IntHashMap<>();\n+\t\tmap.put(1, \"one\");\n+\t\tmap.put(2, \"two\");\n+\n+\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\t\tObjectOutputStream oos = new ObjectOutputStream(baos);\n+\t\toos.writeObject(map);\n+\n+\t\tbyte[] serialized = baos.toByteArray();\n+\t\tByteArrayInputStream bais = new ByteArrayInputStream(serialized);\n+\t\tObjectInputStream ois = new ObjectInputStream(bais);\n+\t\tIntHashMap<String> deserialized = (IntHashMap<String>) ois.readObject();\n+\t\tassertThat(deserialized, is(notNullValue()));\n+\t\tassertThat(deserialized.get(1), is(equalTo(\"one\")));\n+\t\tassertThat(deserialized.get(2), is(equalTo(\"two\")));\n+\n+\t\t// WICKET-5584\n+\t\tdeserialized.put(3, \"three\");\n+\n+\t\t// WICKET-5751\n+\t\tdeserialized.entrySet().iterator();\n+\t}\n+}",
                "raw_url": "https://github.com/apache/wicket/raw/bcea89fc8a196d2e1ebdcecf9c81298a06b4f5cb/wicket-util/src/test/java/org/apache/wicket/util/collections/IntHashMapTest.java",
                "sha": "f38ee54e6ab5335b3063529e05ef7413f76e7bf8",
                "status": "added"
            }
        ],
        "message": "WICKET-5751 NullPointerException in IntHashMap\nWICKET-5584 DiskDataStore error\n\nInitialize modCount in readObject()",
        "parent": "https://github.com/apache/wicket/commit/988f0fa57195ed60fcf1ac00d1023ca024647ca5",
        "patched_files": [
            "IntHashMap.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "IntHashMapTest.java"
        ]
    },
    "wicket_bd61e91": {
        "bug_id": "wicket_bd61e91",
        "commit": "https://github.com/apache/wicket/commit/bd61e915a12ed1690df182e6e8745d477396bd25",
        "file": [
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/wicket/blob/bd61e915a12ed1690df182e6e8745d477396bd25/jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java?ref=bd61e915a12ed1690df182e6e8745d477396bd25",
                "deletions": 11,
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java",
                "patch": "@@ -82,7 +82,10 @@ public WebResponse(final HttpServletResponse httpServletResponse)\n \t */\n \tpublic void addCookie(final Cookie cookie)\n \t{\n-\t\tgetHttpServletResponse().addCookie(cookie);\n+\t\tif (httpServletResponse != null)\n+\t\t{\n+\t\t\thttpServletResponse.addCookie(cookie);\n+\t\t}\n \t}\n \n \t/**\n@@ -94,9 +97,12 @@ public void addCookie(final Cookie cookie)\n \t */\n \tpublic void clearCookie(final Cookie cookie)\n \t{\n-\t\tcookie.setMaxAge(0);\n-\t\tcookie.setValue(null);\n-\t\taddCookie(cookie);\n+\t\tif (httpServletResponse != null)\n+\t\t{\n+\t\t\tcookie.setMaxAge(0);\n+\t\t\tcookie.setValue(null);\n+\t\t\taddCookie(cookie);\n+\t\t}\n \t}\n \n \t/**\n@@ -229,25 +235,34 @@ public void redirect(String url)\n \t */\n \tpublic final void setContentType(final String mimeType)\n \t{\n-\t\thttpServletResponse.setContentType(mimeType);\n+\t\tif (httpServletResponse != null)\n+\t\t{\n+\t\t\thttpServletResponse.setContentType(mimeType);\n+\t\t}\n \t}\n \n \t/**\n \t * @see org.apache.wicket.Response#setContentLength(long)\n \t */\n \tpublic void setContentLength(long length)\n \t{\n-\t\thttpServletResponse.setContentLength((int)length);\n+\t\tif (httpServletResponse != null)\n+\t\t{\n+\t\t\thttpServletResponse.setContentLength((int)length);\n+\t\t}\n \t}\n \n \t/**\n \t * @see org.apache.wicket.Response#setLastModifiedTime(org.apache.wicket.util.time.Time)\n \t */\n \tpublic void setLastModifiedTime(Time time)\n \t{\n-\t\tif (time != null && time.getMilliseconds() != -1)\n+\t\tif (httpServletResponse != null)\n \t\t{\n-\t\t\thttpServletResponse.setDateHeader(\"Last-Modified\", time.getMilliseconds());\n+\t\t\tif (time != null && time.getMilliseconds() != -1)\n+\t\t\t{\n+\t\t\t\thttpServletResponse.setDateHeader(\"Last-Modified\", time.getMilliseconds());\n+\t\t\t}\n \t\t}\n \t}\n \n@@ -265,7 +280,10 @@ public void setLastModifiedTime(Time time)\n \t */\n \tpublic final void setLocale(final Locale locale)\n \t{\n-\t\thttpServletResponse.setLocale(locale);\n+\t\tif (httpServletResponse != null)\n+\t\t{\n+\t\t\thttpServletResponse.setLocale(locale);\n+\t\t}\n \t}\n \n \t/**\n@@ -333,7 +351,10 @@ public void write(AppendingStringBuffer asb)\n \t */\n \tpublic void setDateHeader(String header, long date)\n \t{\n-\t\thttpServletResponse.setDateHeader(header, date);\n+\t\tif (httpServletResponse != null)\n+\t\t{\n+\t\t\thttpServletResponse.setDateHeader(header, date);\n+\t\t}\n \t}\n \n \n@@ -345,7 +366,10 @@ public void setDateHeader(String header, long date)\n \t */\n \tpublic void setHeader(String header, String value)\n \t{\n-\t\thttpServletResponse.setHeader(header, value);\n+\t\tif (httpServletResponse != null)\n+\t\t{\n+\t\t\thttpServletResponse.setHeader(header, value);\n+\t\t}\n \t}\n \n \t/**",
                "raw_url": "https://github.com/apache/wicket/raw/bd61e915a12ed1690df182e6e8745d477396bd25/jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java",
                "sha": "b872c892497b18f8e02ae882dd7ade15af814530",
                "status": "modified"
            }
        ],
        "message": "backport of npe checks in webresponse\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/branches/wicket-1.x@528855 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/25c519429533d73bba7f5b2ad45162ee32acae76",
        "patched_files": [
            "WebResponse.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "WebResponseTest.java"
        ]
    },
    "wicket_c0d3864": {
        "bug_id": "wicket_c0d3864",
        "commit": "https://github.com/apache/wicket/commit/c0d38640f267939c3c8e46d381f62f8f48f912ae",
        "file": [
            {
                "additions": 63,
                "blob_url": "https://github.com/apache/wicket/blob/c0d38640f267939c3c8e46d381f62f8f48f912ae/wicket/src/java/wicket/AutoLinkResolver.java",
                "changes": 125,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/AutoLinkResolver.java?ref=c0d38640f267939c3c8e46d381f62f8f48f912ae",
                "deletions": 62,
                "filename": "wicket/src/java/wicket/AutoLinkResolver.java",
                "patch": "@@ -160,77 +160,78 @@ private final Component resolveAutomaticLink(final MarkupContainer container, fi\n \t\t{\n \t\t\textension = infoPath.substring(pos + 1);\n \t\t\tinfoPath = infoPath.substring(0, pos);\n-\t\t}\n-\n-\t\t// HTML hrefs are handled first\n-\t\tif (supportedPageExtensions.containsKey(extension.toLowerCase()))\n-\t\t{\n-\t\t\t// Obviously a href like href=\"myPkg.MyLabel.html\" will do as well.\n-\t\t\t// Wicket will not throw an exception. It accepts it.\n-\t\t\tinfoPath = Strings.replaceAll(infoPath, \"/\", \".\");\n \n-\t\t\tfinal ApplicationSettings appSettings = page.getApplicationSettings();\n-\t\t\tfinal IClassResolver defaultClassResolver = appSettings.getDefaultClassResolver();\n-\t\t\t\n-\t\t\tfinal String className;\n-\t\t\tif (!infoPath.startsWith(\".\"))\n-\t\t\t{\n-\t\t\t\t// Href is relative. Resolve the url given relative to the\n-\t\t\t\t// current page\n-\t\t\t\tclassName = Packages.extractPackageName(page.getClass()) + \".\" + infoPath;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\t// href is absolute. If class with the same absolute path\n-\t\t\t\t// exists, use it. Else don't change the href.\n-\t\t\t\tclassName = infoPath.substring(1);\n-\t\t\t}\n-\t\t\t\n-\t\t\ttry\n-\t\t\t{\n-\t\t\t\tfinal Class clazz = defaultClassResolver.resolveClass(className);\n-\t\t\t\treturn new AutolinkBookmarkablePageLink(autoId, clazz, pageParameters);\n-\t\t\t}\n-\t\t\tcatch (WicketRuntimeException ex)\n-\t\t\t{\n-\t\t\t\t// fall through\n-\t\t\t}\n-\t\t}\n-\t\t// It is not \"*.html\". Create a static resource reference\n-\t\telse\n-\t\t{\n-\t\t\tif (infoPath.startsWith(\"/\") || infoPath.startsWith(\"\\\\\"))\n-\t\t\t{\n-\t\t\t\t// href is absolute. Don't change it at all.\n-\t\t\t}\n-\t\t\telse\n+\t\t\t// HTML hrefs are handled first\n+\t\t\tif (supportedPageExtensions.containsKey(extension.toLowerCase()))\n \t\t\t{\n-\t\t\t\t// Href is relative. Create a resource reference pointing at\n-\t\t\t\t// this file\n-\n-\t\t\t\t// <wicket:head> components are handled differently. We can not\n-\t\t\t\t// use the container, because it is the container the header\n-\t\t\t\t// has been added to (e.g. the Page). What we need however, is\n-\t\t\t\t// the component (e.g. a Panel) which contributed it.\n-\t\t\t\tComponent relevantContainer = container;\n-\t\t\t\twhile ((relevantContainer instanceof IComponentResolver) \n-\t\t\t\t\t\t&& !(relevantContainer instanceof IComponentResolverMarker))\n+\t\t\t\t// Obviously a href like href=\"myPkg.MyLabel.html\" will do as well.\n+\t\t\t\t// Wicket will not throw an exception. It accepts it.\n+\t\t\t\tinfoPath = Strings.replaceAll(infoPath, \"/\", \".\");\n+\t\n+\t\t\t\tfinal ApplicationSettings appSettings = page.getApplicationSettings();\n+\t\t\t\tfinal IClassResolver defaultClassResolver = appSettings.getDefaultClassResolver();\n+\t\t\t\t\n+\t\t\t\tfinal String className;\n+\t\t\t\tif (!infoPath.startsWith(\".\"))\n \t\t\t\t{\n-\t\t\t\t\trelevantContainer = relevantContainer.getParent(); \n+\t\t\t\t\t// Href is relative. Resolve the url given relative to the\n+\t\t\t\t\t// current page\n+\t\t\t\t\tclassName = Packages.extractPackageName(page.getClass()) + \".\" + infoPath;\n \t\t\t\t}\n-\n+\t\t\t\telse\n+\t\t\t\t{\n+\t\t\t\t\t// href is absolute. If class with the same absolute path\n+\t\t\t\t\t// exists, use it. Else don't change the href.\n+\t\t\t\t\tclassName = infoPath.substring(1);\n+\t\t\t\t}\n+\t\t\t\t\n \t\t\t\ttry\n \t\t\t\t{\n-\t\t\t\t\t// Create the component implementing the link\n-\t\t\t\t\treturn new CssLink(autoId, relevantContainer.getClass(), href);\n+\t\t\t\t\tfinal Class clazz = defaultClassResolver.resolveClass(className);\n+\t\t\t\t\treturn new AutolinkBookmarkablePageLink(autoId, clazz, pageParameters);\n \t\t\t\t}\n \t\t\t\tcatch (WicketRuntimeException ex)\n \t\t\t\t{\n-\t\t\t\t\t// Provided the resource does not exist, assume the user did\n-\t\t\t\t\t// deliberately not point it to a page or resource. The href\n-\t\t\t\t\t// might still point to a valid homepage outside of wicket.\n-\t\t\t\t\tlog.info(\"Did not find autolink resource: \" + href \n-\t\t\t\t\t\t\t+ \"; Assume it is a valid external URL\");\n+\t\t\t\t\tlog.info(\"Did not find corresponding java class: \" + className);\n+\t\t\t\t\t// fall through\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// It is not \"*.html\". Create a static resource reference\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\tif (infoPath.startsWith(\"/\") || infoPath.startsWith(\"\\\\\"))\n+\t\t\t\t{\n+\t\t\t\t\t// href is absolute. Don't change it at all.\n+\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t{\n+\t\t\t\t\t// Href is relative. Create a resource reference pointing at\n+\t\t\t\t\t// this file\n+\t\n+\t\t\t\t\t// <wicket:head> components are handled differently. We can not\n+\t\t\t\t\t// use the container, because it is the container the header\n+\t\t\t\t\t// has been added to (e.g. the Page). What we need however, is\n+\t\t\t\t\t// the component (e.g. a Panel) which contributed it.\n+\t\t\t\t\tComponent relevantContainer = container;\n+\t\t\t\t\twhile ((relevantContainer instanceof IComponentResolver) \n+\t\t\t\t\t\t\t&& !(relevantContainer instanceof IComponentResolverMarker))\n+\t\t\t\t\t{\n+\t\t\t\t\t\trelevantContainer = relevantContainer.getParent(); \n+\t\t\t\t\t}\n+\t\n+\t\t\t\t\ttry\n+\t\t\t\t\t{\n+\t\t\t\t\t\t// Create the component implementing the link\n+\t\t\t\t\t\treturn new CssLink(autoId, relevantContainer.getClass(), href);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (WicketRuntimeException ex)\n+\t\t\t\t\t{\n+\t\t\t\t\t\t// Provided the resource does not exist, assume the user did\n+\t\t\t\t\t\t// deliberately not point it to a page or resource. The href\n+\t\t\t\t\t\t// might still point to a valid homepage outside of wicket.\n+\t\t\t\t\t\tlog.info(\"Did not find autolink resource: \" + href \n+\t\t\t\t\t\t\t\t+ \"; Assume it is a valid external URL\");\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}",
                "raw_url": "https://github.com/apache/wicket/raw/c0d38640f267939c3c8e46d381f62f8f48f912ae/wicket/src/java/wicket/AutoLinkResolver.java",
                "sha": "e787a0e7ff2014261ee3647a7baa843a1ed14d52",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/wicket/blob/c0d38640f267939c3c8e46d381f62f8f48f912ae/wicket/src/test/wicket/markup/html/link/AutolinkPageExpectedResult_4.html",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/link/AutolinkPageExpectedResult_4.html?ref=c0d38640f267939c3c8e46d381f62f8f48f912ae",
                "deletions": 0,
                "filename": "wicket/src/test/wicket/markup/html/link/AutolinkPageExpectedResult_4.html",
                "patch": "@@ -0,0 +1,14 @@\n+<html xmlns:wicket>\n+<body>\n+<wicket:link autolink=\"true\">\n+  <!-- File/page does not exist => Do not change href at all -->\n+  <a href=\"PageDoesNotExist.html\">Home</a>\n+  <!-- Reference an internal target => Do not change href at all -->\n+  <a href=\"#link1\">Link 1</a>\n+  <!-- Not sure what it should do, but it is obviously valid => Do not change href at all -->\n+  <a href=\"\">Link 1</a>\n+  <!-- Not supported yet: Reference an internal target on an existing page -->\n+  <a href=\"SamePage.html#link1\">Link 1</a>\n+</wicket:link>\n+</body>\n+</html>",
                "raw_url": "https://github.com/apache/wicket/raw/c0d38640f267939c3c8e46d381f62f8f48f912ae/wicket/src/test/wicket/markup/html/link/AutolinkPageExpectedResult_4.html",
                "sha": "297ba3abe2080774f09d8cf232053a2e7280d428",
                "status": "added"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/wicket/blob/c0d38640f267939c3c8e46d381f62f8f48f912ae/wicket/src/test/wicket/markup/html/link/AutolinkPage_4.html",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/link/AutolinkPage_4.html?ref=c0d38640f267939c3c8e46d381f62f8f48f912ae",
                "deletions": 0,
                "filename": "wicket/src/test/wicket/markup/html/link/AutolinkPage_4.html",
                "patch": "@@ -0,0 +1,14 @@\n+<html xmlns:wicket>\n+<body>\n+<wicket:link autolink=true>\n+  <!-- File/page does not exist => Do not change href at all -->\n+  <a href=\"PageDoesNotExist.html\">Home</a>\n+  <!-- Reference an internal target => Do not change href at all -->\n+  <a href=\"#link1\">Link 1</a>\n+  <!-- Not sure what it should do, but it is obviously valid => Do not change href at all -->\n+  <a href=\"\">Link 1</a>\n+  <!-- Not supported yet: Reference an internal target on an existing page -->\n+  <a href=\"SamePage.html#link1\">Link 1</a>\n+</wicket:link>\n+</body>\n+</html>",
                "raw_url": "https://github.com/apache/wicket/raw/c0d38640f267939c3c8e46d381f62f8f48f912ae/wicket/src/test/wicket/markup/html/link/AutolinkPage_4.html",
                "sha": "0127b353c448344943876f6b331c9adb7a43772c",
                "status": "added"
            },
            {
                "additions": 41,
                "blob_url": "https://github.com/apache/wicket/blob/c0d38640f267939c3c8e46d381f62f8f48f912ae/wicket/src/test/wicket/markup/html/link/AutolinkPage_4.java",
                "changes": 41,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/link/AutolinkPage_4.java?ref=c0d38640f267939c3c8e46d381f62f8f48f912ae",
                "deletions": 0,
                "filename": "wicket/src/test/wicket/markup/html/link/AutolinkPage_4.java",
                "patch": "@@ -0,0 +1,41 @@\n+/*\n+ * $Id$\n+ * $Revision$\n+ * $Date$\n+ *\n+ * ====================================================================\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package wicket.markup.html.link;\n+\n+import wicket.PageParameters;\n+import wicket.markup.html.WebPage;\n+\n+\n+/**\n+ * Mock page for testing.\n+ *\n+ * @author Chris Turner\n+ */\n+public class AutolinkPage_4 extends WebPage \n+{\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\t/**\n+\t * Construct.\n+\t * @param parameters\n+\t */\n+\tpublic AutolinkPage_4(final PageParameters parameters) \n+\t{\n+    }\n+}",
                "raw_url": "https://github.com/apache/wicket/raw/c0d38640f267939c3c8e46d381f62f8f48f912ae/wicket/src/test/wicket/markup/html/link/AutolinkPage_4.java",
                "sha": "ce87975437157afc279e34486952d80bdf6651f8",
                "status": "added"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/wicket/blob/c0d38640f267939c3c8e46d381f62f8f48f912ae/wicket/src/test/wicket/markup/html/link/AutolinkTest.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/link/AutolinkTest.java?ref=c0d38640f267939c3c8e46d381f62f8f48f912ae",
                "deletions": 0,
                "filename": "wicket/src/test/wicket/markup/html/link/AutolinkTest.java",
                "patch": "@@ -70,4 +70,13 @@ public void testRenderHomePage_3() throws Exception\n         application.getSettings().setAutomaticLinking(true);\n \t    executeTest(AutolinkPage_3.class, \"AutolinkPageExpectedResult_3.html\");\n \t}\n+    \n+\t/**\n+\t * @throws Exception\n+\t */\n+\tpublic void testRenderHomePage_4() throws Exception\n+\t{\n+        application.getSettings().setAutomaticLinking(true);\n+\t    executeTest(AutolinkPage_4.class, \"AutolinkPageExpectedResult_4.html\");\n+\t}\n }",
                "raw_url": "https://github.com/apache/wicket/raw/c0d38640f267939c3c8e46d381f62f8f48f912ae/wicket/src/test/wicket/markup/html/link/AutolinkTest.java",
                "sha": "c489be2858cdd028ca3787e33d6d7029d7083fcc",
                "status": "modified"
            }
        ],
        "message": "Fixed autolink NPE bug\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@457979 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/ce994531ed150f40de63a6a4e32adfcc164800ec",
        "patched_files": [
            "AutolinkPageExpectedResult_4.html",
            "AutolinkPage_4.html",
            "AutolinkPage_4.java",
            "AutoLinkResolver.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "AutolinkTest.java"
        ]
    },
    "wicket_c14a1e1": {
        "bug_id": "wicket_c14a1e1",
        "commit": "https://github.com/apache/wicket/commit/c14a1e127d7e324383ba5fc6c0c42aa1c3817449",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/wicket/blob/c14a1e127d7e324383ba5fc6c0c42aa1c3817449/wicket-core/src/main/java/org/apache/wicket/request/mapper/BasicResourceReferenceMapper.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/request/mapper/BasicResourceReferenceMapper.java?ref=c14a1e127d7e324383ba5fc6c0c42aa1c3817449",
                "deletions": 7,
                "filename": "wicket-core/src/main/java/org/apache/wicket/request/mapper/BasicResourceReferenceMapper.java",
                "patch": "@@ -92,13 +92,6 @@ public IRequestHandler mapRequest(Request request)\n \t\t\t\t// should be stripped of timestamps\n \t\t\t\tif (i + 1 == segmentsSize)\n \t\t\t\t{\n-\t\t\t\t\t// since we need mutable page parameters for \n-\t\t\t\t\t// the caching strategy ensure they are not null \n-\t\t\t\t\tif (pageParameters == null)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tpageParameters = new PageParameters();\n-\t\t\t\t\t}\n-\t\t\t\t\t\n \t\t\t\t\t// The filename + parameters eventually contain caching\n \t\t\t\t\t// related information which needs to be removed\n \t\t\t\t\tResourceUrl resourceUrl = new ResourceUrl(segment, pageParameters);",
                "raw_url": "https://github.com/apache/wicket/raw/c14a1e127d7e324383ba5fc6c0c42aa1c3817449/wicket-core/src/main/java/org/apache/wicket/request/mapper/BasicResourceReferenceMapper.java",
                "sha": "cdc5ac7fd169ea5e328234d98316edcd5e1fe5ed",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/wicket/blob/c14a1e127d7e324383ba5fc6c0c42aa1c3817449/wicket-core/src/main/java/org/apache/wicket/request/resource/caching/QueryStringWithTimestampResourceCachingStrategy.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/request/resource/caching/QueryStringWithTimestampResourceCachingStrategy.java?ref=c14a1e127d7e324383ba5fc6c0c42aa1c3817449",
                "deletions": 1,
                "filename": "wicket-core/src/main/java/org/apache/wicket/request/resource/caching/QueryStringWithTimestampResourceCachingStrategy.java",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.wicket.request.resource.caching;\n \n import org.apache.wicket.request.http.WebResponse;\n+import org.apache.wicket.request.mapper.parameter.INamedParameters;\n import org.apache.wicket.request.resource.AbstractResource;\n import org.apache.wicket.request.resource.ResourceReference;\n import org.apache.wicket.util.lang.Args;\n@@ -75,7 +76,12 @@ public void decorateUrl(ResourceUrl url, final ResourceReference reference)\n \n \tpublic void undecorateUrl(ResourceUrl url)\n \t{\n-\t\turl.getParameters().remove(timestampParameter);\n+\t\tfinal INamedParameters parameters = url.getParameters();\n+\t\t\n+\t\tif (parameters != null)\n+\t\t{\n+\t\t\tparameters.remove(timestampParameter);\n+\t\t}\n \t}\n \n \tpublic void decorateResponse(AbstractResource.ResourceResponse response)",
                "raw_url": "https://github.com/apache/wicket/raw/c14a1e127d7e324383ba5fc6c0c42aa1c3817449/wicket-core/src/main/java/org/apache/wicket/request/resource/caching/QueryStringWithTimestampResourceCachingStrategy.java",
                "sha": "654114ee84431de46c1c3c5d5d0da7a79ef9f7ef",
                "status": "modified"
            }
        ],
        "message": "WICKET-3828 QueryStringWithTimestampResourceCachingStrategy#undecorateUrl(ResourceUrl) can causes NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1138591 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/f5a62da5b38c504db8945a88857a53aae6b5d7b7",
        "patched_files": [
            "BasicResourceReferenceMapper.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "BasicResourceReferenceMapperTest.java"
        ]
    },
    "wicket_c29d8a5": {
        "bug_id": "wicket_c29d8a5",
        "commit": "https://github.com/apache/wicket/commit/c29d8a5a672770bab08f675269963f73e2c5c84d",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/wicket/blob/c29d8a5a672770bab08f675269963f73e2c5c84d/wicket/src/main/java/org/apache/wicket/resource/loader/PackageStringResourceLoader.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/org/apache/wicket/resource/loader/PackageStringResourceLoader.java?ref=c29d8a5a672770bab08f675269963f73e2c5c84d",
                "deletions": 3,
                "filename": "wicket/src/main/java/org/apache/wicket/resource/loader/PackageStringResourceLoader.java",
                "patch": "@@ -79,13 +79,18 @@ public String loadStringResource(Class<?> clazz, final String key, final Locale\n \r\n \t\twhile (true)\r\n \t\t{\r\n-\t\t\tString packageName = clazz.getPackage().getName();\r\n+\t\t\tPackage pkg = clazz.getPackage();\r\n+\t\t\tString packageName = (pkg == null) ? \"\" : pkg.getName();\r\n \t\t\tpackageName = packageName.replace('.', '/');\r\n \r\n-\t\t\twhile (packageName.length() > 0)\r\n+\t\t\tdo\r\n \t\t\t{\r\n \t\t\t\t// Create the base path\r\n-\t\t\t\tString path = packageName + \"/\" + filename;\r\n+\t\t\t\tString path = filename;\r\n+\t\t\t\tif (packageName.length() > 0)\r\n+\t\t\t\t{\r\n+\t\t\t\t\tpath = packageName + \"/\" + path;\r\n+\t\t\t\t}\r\n \r\n \t\t\t\t// Iterator over all the combinations\r\n \t\t\t\tResourceNameIterator iter = new ResourceNameIterator(path, style, variation,\r\n@@ -114,6 +119,7 @@ public String loadStringResource(Class<?> clazz, final String key, final Locale\n \t\t\t\t// Didn't find the key yet, continue searching if possible\r\n \t\t\t\tpackageName = Strings.beforeLast(packageName, '/');\r\n \t\t\t}\r\n+\t\t\twhile (packageName.length() > 0);\r\n \r\n \t\t\tclazz = clazz.getSuperclass();\r\n \t\t\tif (clazz == null)\r",
                "raw_url": "https://github.com/apache/wicket/raw/c29d8a5a672770bab08f675269963f73e2c5c84d/wicket/src/main/java/org/apache/wicket/resource/loader/PackageStringResourceLoader.java",
                "sha": "ae8e7722ca9fcab49cc9ceabe18894a03e1fd621",
                "status": "modified"
            }
        ],
        "message": "WICKET-2856: PackageStringResourceLoader.loadStringResource() causes NullPointerException when used in a Class within the root package (i.e. it has no package declaration)\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@945910 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/9b440862570d0404cbf0fb5df833855b36a1d8e8",
        "patched_files": [
            "PackageStringResourceLoader.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "PackageStringResourceLoaderTest.java"
        ]
    },
    "wicket_c48ef46": {
        "bug_id": "wicket_c48ef46",
        "commit": "https://github.com/apache/wicket/commit/c48ef460a9c570dcedfe50bf5ab92872dd0aa682",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/wicket/blob/c48ef460a9c570dcedfe50bf5ab92872dd0aa682/wicket/src/java/wicket/util/string/Strings.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/util/string/Strings.java?ref=c48ef460a9c570dcedfe50bf5ab92872dd0aa682",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/util/string/Strings.java",
                "patch": "@@ -807,8 +807,12 @@ else if (aChar == 'f')\n \t *            The unicode string\n \t * @return The escaped unicode string, like '\\u4F60\\u597D'.\n \t */\n-\tpublic static String toEscapedUnicode(String unicodeString)\n+\tpublic static String toEscapedUnicode(final String unicodeString)\n \t{\n+\t\tif ((unicodeString == null) || (unicodeString.length() == 0))\n+\t\t{\n+\t\t\treturn unicodeString;\n+\t\t}\n \t\tint len = unicodeString.length();\n \t\tint bufLen = len * 2;\n \t\tStringBuffer outBuffer = new StringBuffer(bufLen);",
                "raw_url": "https://github.com/apache/wicket/raw/c48ef460a9c570dcedfe50bf5ab92872dd0aa682/wicket/src/java/wicket/util/string/Strings.java",
                "sha": "715860c1747a3476ad59555680bb34f2bb9b7254",
                "status": "modified"
            }
        ],
        "message": "avoid NPE in unicode conversion\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@462131 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/ae260354840d0a55a9d19524940a913c0cf3aab5",
        "patched_files": [
            "Strings.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "StringsTest.java"
        ]
    },
    "wicket_c940a37": {
        "bug_id": "wicket_c940a37",
        "commit": "https://github.com/apache/wicket/commit/c940a378736e728ba959ec62d9a1f10fb0bc6a0f",
        "file": [
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/wicket/blob/c940a378736e728ba959ec62d9a1f10fb0bc6a0f/wicket-core/src/main/java/org/apache/wicket/markup/MarkupCache.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/markup/MarkupCache.java?ref=c940a378736e728ba959ec62d9a1f10fb0bc6a0f",
                "deletions": 0,
                "filename": "wicket-core/src/main/java/org/apache/wicket/markup/MarkupCache.java",
                "patch": "@@ -96,18 +96,27 @@ protected MarkupCache()\n \t\t}\n \t}\n \n+\t/**\n+\t * {@inheritDoc}\n+\t */\n \tpublic void clear()\n \t{\n \t\tmarkupCache.clear();\n \t\tmarkupKeyCache.clear();\n \t}\n \n+\t/**\n+\t * {@inheritDoc}\n+\t */\n \tpublic void shutdown()\n \t{\n \t\tmarkupCache.shutdown();\n \t\tmarkupKeyCache.shutdown();\n \t}\n \n+\t/**\n+\t * {@inheritDoc}\n+\t */\n \tpublic final IMarkupFragment removeMarkup(final String cacheKey)\n \t{\n \t\tArgs.notNull(cacheKey, \"cacheKey\");\n@@ -188,6 +197,10 @@ private boolean isBaseMarkupCached(final CharSequence key)\n \t{\n \t\t// Get the markup associated with key\n \t\tMarkup markup = markupCache.get(key);\n+\t\tif (markup == null)\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n \n \t\t// Get the base markup resource stream from the markup\n \t\tMarkupResourceStream resourceStream = markup.getMarkupResourceStream()\n@@ -215,6 +228,9 @@ private boolean isMarkupCached(final MarkupResourceStream resourceStream)\n \t\treturn false;\n \t}\n \n+\t/**\n+\t * {@inheritDoc}\n+\t */\n \tpublic final int size()\n \t{\n \t\treturn markupCache.size();\n@@ -610,11 +626,17 @@ public DefaultCacheImplementation()\n \t\t{\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic void clear()\n \t\t{\n \t\t\tcache.clear();\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic boolean containsKey(Object key)\n \t\t{\n \t\t\tif (key == null)\n@@ -624,6 +646,9 @@ public boolean containsKey(Object key)\n \t\t\treturn cache.containsKey(key);\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic V get(Object key)\n \t\t{\n \t\t\tif (key == null)\n@@ -633,26 +658,41 @@ public V get(Object key)\n \t\t\treturn cache.get(key);\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic Collection<K> getKeys()\n \t\t{\n \t\t\treturn cache.keySet();\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic void put(K key, V value)\n \t\t{\n \t\t\tcache.put(key, value);\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic boolean remove(K key)\n \t\t{\n \t\t\treturn cache.remove(key) == null;\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic int size()\n \t\t{\n \t\t\treturn cache.size();\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic void shutdown()\n \t\t{\n \t\t\tclear();",
                "raw_url": "https://github.com/apache/wicket/raw/c940a378736e728ba959ec62d9a1f10fb0bc6a0f/wicket-core/src/main/java/org/apache/wicket/markup/MarkupCache.java",
                "sha": "dd4c4bc1a7a13a40d7dfb4c1e0a65be7c513c170",
                "status": "modified"
            }
        ],
        "message": "fixed NPE when reloading updated markup in development mode\nIssue: WICKET-3336\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1059368 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/b40d5d6d529720e41948fa3ad55aa4bd29e527c4",
        "patched_files": [
            "MarkupCache.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "MarkupCacheTest.java"
        ]
    },
    "wicket_d35517e": {
        "bug_id": "wicket_d35517e",
        "commit": "https://github.com/apache/wicket/commit/d35517e5e8c6fb4730e60af2d7be1e20197f8c4a",
        "file": [
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/wicket/blob/d35517e5e8c6fb4730e60af2d7be1e20197f8c4a/wicket/src/test/java/org/apache/wicket/ResourceTest.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/java/org/apache/wicket/ResourceTest.java?ref=d35517e5e8c6fb4730e60af2d7be1e20197f8c4a",
                "deletions": 9,
                "filename": "wicket/src/test/java/org/apache/wicket/ResourceTest.java",
                "patch": "@@ -25,6 +25,8 @@\n import org.apache.wicket.request.resource.IResource;\n import org.apache.wicket.request.resource.ResourceStreamResource;\n import org.apache.wicket.util.resource.FileResourceStream;\n+import org.apache.wicket.util.resource.IResourceStream;\n+import org.apache.wicket.util.resource.StringResourceStream;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -40,7 +42,7 @@\n \t/**\n \t * tests a resource that is not cacheable.\n \t */\n-\tpublic void testResource()\n+\tpublic void testFileResourceStream()\n \t{\n \t\tfinal File testFile;\n \t\ttry\n@@ -54,19 +56,29 @@ public void testResource()\n \t\t{\n \t\t\tthrow new RuntimeException(e);\n \t\t}\n-\n-\t\tIResource file = new ResourceStreamResource(new FileResourceStream(\n+\t\tbindToApplicationAsResourceAndRequestIt(new FileResourceStream(\n \t\t\tnew org.apache.wicket.util.file.File(testFile)));\n-\t\ttester.getApplication().getSharedResources().add(\"file\", file);\n+\t\tassertEquals(MockHttpServletResponse.formatDate(testFile.lastModified()),\n+\t\t\ttester.getLastModifiedFromResponseHeader());\n+\t\tassertEquals(TEST_STRING.length(), tester.getContentLengthFromResponseHeader());\n+\t}\n+\n+\tpublic void testStringResourceStream()\n+\t{\n+\t\tStringResourceStream resourceStream = new StringResourceStream(TEST_STRING);\n+\t\tbindToApplicationAsResourceAndRequestIt(resourceStream);\n+\t\tassertEquals(TEST_STRING.length(), tester.getContentLengthFromResponseHeader());\n+\t}\n+\n+\tprivate void bindToApplicationAsResourceAndRequestIt(IResourceStream iResourceStream)\n+\t{\n+\t\tIResource resource = new ResourceStreamResource(iResourceStream);\n+\t\ttester.getApplication().getSharedResources().add(\"resource\", resource);\n \t\ttester.getRequest().setUrl(\n \t\t\ttester.getRequestCycle().mapUrlFor(\n \t\t\t\ttester.getApplication()\n \t\t\t\t\t.getSharedResources()\n-\t\t\t\t\t.get(Application.class, \"file\", null, null, null, true), null));\n+\t\t\t\t\t.get(Application.class, \"resource\", null, null, null, true), null));\n \t\ttester.processRequest();\n-\n-\t\tassertEquals(MockHttpServletResponse.formatDate(testFile.lastModified()),\n-\t\t\ttester.getLastModifiedFromResponseHeader());\n-\t\tassertEquals(TEST_STRING.length(), tester.getContentLengthFromResponseHeader());\n \t}\n }",
                "raw_url": "https://github.com/apache/wicket/raw/d35517e5e8c6fb4730e60af2d7be1e20197f8c4a/wicket/src/test/java/org/apache/wicket/ResourceTest.java",
                "sha": "ab431686d6316e4889a601d14767bfc0a7c909ae",
                "status": "modified"
            }
        ],
        "message": "test preventing the NPE requesting an StringResourceStream binded to the application as an resource\nIssue: WICKET-3187\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1038300 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/947823f922143d00103b2309c8afdcfa5669091b",
        "patched_files": [],
        "repo": "wicket",
        "unit_tests": [
            "ResourceTest.java"
        ]
    },
    "wicket_d7c2804": {
        "bug_id": "wicket_d7c2804",
        "commit": "https://github.com/apache/wicket/commit/d7c28049e464cc7a12952913c15095158b97a7f2",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/wicket/blob/d7c28049e464cc7a12952913c15095158b97a7f2/wicket-ioc/src/main/java/org/apache/wicket/injection/CompoundFieldValueFactory.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-ioc/src/main/java/org/apache/wicket/injection/CompoundFieldValueFactory.java?ref=d7c28049e464cc7a12952913c15095158b97a7f2",
                "deletions": 1,
                "filename": "wicket-ioc/src/main/java/org/apache/wicket/injection/CompoundFieldValueFactory.java",
                "patch": "@@ -44,7 +44,9 @@\n \t */\n \tpublic CompoundFieldValueFactory(final IFieldValueFactory[] factories)\n \t{\n-\t\tthis(Arrays.asList(factories));\n+\t\tArgs.notNull(factories, \"factories\");\n+\n+\t\tdelegates.addAll(Arrays.asList(factories));\n \t}\n \n \t/**",
                "raw_url": "https://github.com/apache/wicket/raw/d7c28049e464cc7a12952913c15095158b97a7f2/wicket-ioc/src/main/java/org/apache/wicket/injection/CompoundFieldValueFactory.java",
                "sha": "54f96de90ea586a87548793c4fa8976a43413c6a",
                "status": "modified"
            }
        ],
        "message": "Do not chain the constructors because this causes NullPointerException when the parameter to Arrays.asList is  null",
        "parent": "https://github.com/apache/wicket/commit/ba2a4177d1391d875ae60f25c69e1dc5186112c0",
        "patched_files": [
            "CompoundFieldValueFactory.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "CompoundFieldValueFactoryTest.java"
        ]
    },
    "wicket_db0a4db": {
        "bug_id": "wicket_db0a4db",
        "commit": "https://github.com/apache/wicket/commit/db0a4db0510392331298f7179193ef6c2b4b6053",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/wicket/blob/db0a4db0510392331298f7179193ef6c2b4b6053/wicket-examples/src/java/wicket/examples/forminput/FormInput.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-examples/src/java/wicket/examples/forminput/FormInput.java?ref=db0a4db0510392331298f7179193ef6c2b4b6053",
                "deletions": 1,
                "filename": "wicket-examples/src/java/wicket/examples/forminput/FormInput.java",
                "patch": "@@ -89,7 +89,10 @@ public FormInput()\n \t */\n \tpublic void setLocale(Locale locale)\n \t{\n-\t\tgetSession().setLocale(locale);\n+\t\tif (locale != null)\n+\t\t{\n+\t\t\tgetSession().setLocale(locale);\n+\t\t}\n \t}\n \n \t/**",
                "raw_url": "https://github.com/apache/wicket/raw/db0a4db0510392331298f7179193ef6c2b4b6053/wicket-examples/src/java/wicket/examples/forminput/FormInput.java",
                "sha": "31a127a8ab3c1bd381f1b1dce36f24eafd495343",
                "status": "modified"
            }
        ],
        "message": "avoid NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@459438 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/cfcaf4af4065396d7e1b6b940d7947c02f8d3fee",
        "patched_files": [
            "FormInput.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "FormInputTest.java"
        ]
    },
    "wicket_dbd2be6": {
        "bug_id": "wicket_dbd2be6",
        "commit": "https://github.com/apache/wicket/commit/dbd2be6157cb74332921166867ceacf6f613d1f5",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/RequestCycle.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/RequestCycle.java?ref=dbd2be6157cb74332921166867ceacf6f613d1f5",
                "deletions": 2,
                "filename": "wicket/src/java/wicket/RequestCycle.java",
                "patch": "@@ -199,11 +199,11 @@\n \tprivate static final int RESOLVE_TARGET = 2;\n \n \t/** Responding using the currently set {@link IRequestTarget}. */\n-\tprivate static final int RESPOND = 4;;\n+\tprivate static final int RESPOND = 4;\n \n \t/**\n \t * Gets request cycle for calling thread.\n-\t * \n+\t *\n \t * @return Request cycle for calling thread\n \t */\n \tpublic final static RequestCycle get()",
                "raw_url": "https://github.com/apache/wicket/raw/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/RequestCycle.java",
                "sha": "9514d5465075f93f8e2d46d010a868ccf550d05e",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/wicket/blob/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/behavior/AbstractAjaxBehavior.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/behavior/AbstractAjaxBehavior.java?ref=dbd2be6157cb74332921166867ceacf6f613d1f5",
                "deletions": 6,
                "filename": "wicket/src/java/wicket/behavior/AbstractAjaxBehavior.java",
                "patch": "@@ -118,12 +118,6 @@ public final CharSequence getCallbackUrl(final boolean recordPageVersion,\n \t\t\t\t\t\"Behavior must be bound to a component to create the URL\");\n \t\t}\n \n-\t\tif (!(this instanceof IBehaviorListener))\n-\t\t{\n-\t\t\tthrow new IllegalArgumentException(\n-\t\t\t\t\t\"The behavior must implement IBehaviorListener to accept requests\");\n-\t\t}\n-\n \t\tint index = getComponent().getBehaviors().indexOf(this);\n \t\tif (index == -1)\n \t\t{",
                "raw_url": "https://github.com/apache/wicket/raw/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/behavior/AbstractAjaxBehavior.java",
                "sha": "a16afe11136170c03e5676bb312bb165a2ada9a1",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/wicket/blob/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/markup/html/form/FormComponent.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/markup/html/form/FormComponent.java?ref=dbd2be6157cb74332921166867ceacf6f613d1f5",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/markup/html/form/FormComponent.java",
                "patch": "@@ -739,8 +739,13 @@ protected final void validateValidators()\n \t\t}\n \t\tcatch (Exception e)\n \t\t{\n+\t\t\tString name = \"<null>\";\n+\t\t\tif (validator != null)\n+\t\t\t{\n+\t\t\t\tname = validator.getClass().getName();\n+\t\t\t}\n \t\t\tthrow new WicketRuntimeException(\"Exception '\" + e + \"' occurred during validation \"\n-\t\t\t\t\t+ validator.getClass().getName() + \" on component \" + this.getPath(), e);\n+\t\t\t\t\t+ name + \" on component \" + this.getPath(), e);\n \t\t}\n \t}\n ",
                "raw_url": "https://github.com/apache/wicket/raw/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/markup/html/form/FormComponent.java",
                "sha": "935ea84c4ae7e856071a59ba7381bb07502ffb3a",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/markup/html/form/RadioChoice.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/markup/html/form/RadioChoice.java?ref=dbd2be6157cb74332921166867ceacf6f613d1f5",
                "deletions": 2,
                "filename": "wicket/src/java/wicket/markup/html/form/RadioChoice.java",
                "patch": "@@ -411,8 +411,8 @@ protected final void onComponentTagBody(final MarkupStream markupStream,\n \n \t\t\t// Get label for choice\n \t\t\tfinal String label = (String)getConverter().convert(\n-\t\t\t\t\tgetChoiceRenderer().getDisplayValue(choice), String.class);\n-\t\t\t;\n+\t\t\t\t\tgetChoiceRenderer().getDisplayValue(choice), String.class\n+\t\t\t);\n \n \t\t\t// If there is a display value for the choice, then we know that the\n \t\t\t// choice is automatic in some way. If label is /null/ then we know",
                "raw_url": "https://github.com/apache/wicket/raw/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/markup/html/form/RadioChoice.java",
                "sha": "00d7820d41812045e299d152dd3b91932e364d96",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/markup/html/tree/AbstractTree.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/markup/html/tree/AbstractTree.java?ref=dbd2be6157cb74332921166867ceacf6f613d1f5",
                "deletions": 0,
                "filename": "wicket/src/java/wicket/markup/html/tree/AbstractTree.java",
                "patch": "@@ -105,6 +105,7 @@ public void collapseSiblings(final DefaultMutableTreeNode node)\n \t\t{\n \t\t\tfinal TreePath siblingSelection = new TreePath(nextNode.getPath());\n \t\t\tsetExpandedState(siblingSelection, false); // inverse\n+\t\t\t// ToDo: Check if previousNode can be null? If so, needs trapping - Gwyn\n \t\t\tnextNode = previousNode.getNextSibling();\n \t\t}\n \t}",
                "raw_url": "https://github.com/apache/wicket/raw/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/markup/html/tree/AbstractTree.java",
                "sha": "5f7c2695d12d3b6922c1f876c4e031e24a5366fc",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/protocol/http/MockWebApplication.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/protocol/http/MockWebApplication.java?ref=dbd2be6157cb74332921166867ceacf6f613d1f5",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/protocol/http/MockWebApplication.java",
                "patch": "@@ -138,7 +138,7 @@ public MockWebApplication(final String path)\n \t\t\tpublic ServletContext getServletContext()\n \t\t\t{\n \t\t\t\treturn context;\n-\t\t\t};\n+\t\t\t}\n \n \t\t\t/**\n \t\t\t * @see javax.servlet.GenericServlet#getInitParameter(java.lang.String)",
                "raw_url": "https://github.com/apache/wicket/raw/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/protocol/http/MockWebApplication.java",
                "sha": "86fc39812e7de1407850849260282cec7b1d1f85",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/protocol/http/WebRequestCycle.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/protocol/http/WebRequestCycle.java?ref=dbd2be6157cb74332921166867ceacf6f613d1f5",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/protocol/http/WebRequestCycle.java",
                "patch": "@@ -149,7 +149,7 @@ public final void redirectTo(final Page page)\n \t\t\t\t\tpublic CharSequence encodeURL(CharSequence url)\n \t\t\t\t\t{\n \t\t\t\t\t\treturn currentResponse.encodeURL(url);\n-\t\t\t\t\t};\n+\t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tredirectResponse.setCharacterEncoding(currentResponse.getCharacterEncoding());\n ",
                "raw_url": "https://github.com/apache/wicket/raw/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/protocol/http/WebRequestCycle.java",
                "sha": "3cbeba6f6eb8cb8b72f7ed7af5ddfcd5cb22b103",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/request/target/coding/SharedResourceRequestTargetUrlCodingStrategy.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/request/target/coding/SharedResourceRequestTargetUrlCodingStrategy.java?ref=dbd2be6157cb74332921166867ceacf6f613d1f5",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/request/target/coding/SharedResourceRequestTargetUrlCodingStrategy.java",
                "patch": "@@ -91,7 +91,7 @@ public boolean matches(IRequestTarget requestTarget)\n \t{\r\n \t\tif (requestTarget instanceof ISharedResourceRequestTarget)\r\n \t\t{\r\n-\t\t\tSharedResourceRequestTarget target = (SharedResourceRequestTarget)requestTarget;\r\n+\t\t\tISharedResourceRequestTarget target = (ISharedResourceRequestTarget)requestTarget;\r\n \t\t\treturn target.getRequestParameters().getResourceKey().equals(resourceKey);\r\n \t\t}\r\n \t\telse\r",
                "raw_url": "https://github.com/apache/wicket/raw/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/request/target/coding/SharedResourceRequestTargetUrlCodingStrategy.java",
                "sha": "17986902b884af26048814811a06ef4caed6a883",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/util/collections/IntHashMap.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/util/collections/IntHashMap.java?ref=dbd2be6157cb74332921166867ceacf6f613d1f5",
                "deletions": 2,
                "filename": "wicket/src/java/wicket/util/collections/IntHashMap.java",
                "patch": "@@ -625,7 +625,7 @@ private boolean containsNullValue()\n \t * \r\n \t * @return a shallow copy of this map.\r\n \t */\r\n-\tpublic Object clone()\r\n+\tpublic Object clone() throws CloneNotSupportedException\r\n \t{\r\n \t\tIntHashMap result = null;\r\n \t\ttry\r\n@@ -791,7 +791,7 @@ void createEntry(int key, Object value, int bucketIndex)\n \t\t\t{ // advance to first entry\r\n \t\t\t\twhile (i > 0 && (n = t[--i]) == null)\r\n \t\t\t\t{\r\n-\t\t\t\t\t;\r\n+\t\t\t\t\t/* NoOp*/ ;\r\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t\tnext = n;\r",
                "raw_url": "https://github.com/apache/wicket/raw/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/util/collections/IntHashMap.java",
                "sha": "c12727acaba280e8ae9a74224a01dcfa061a1272",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/util/concurrent/ConcurrentReaderHashMap.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/util/concurrent/ConcurrentReaderHashMap.java?ref=dbd2be6157cb74332921166867ceacf6f613d1f5",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/util/concurrent/ConcurrentReaderHashMap.java",
                "patch": "@@ -916,7 +916,7 @@ public synchronized void clear()\n \t * \n \t * @return a shallow copy of this map.\n \t */\n-\tpublic synchronized Object clone()\n+\tpublic synchronized Object clone() throws CloneNotSupportedException\n \t{\n \t\ttry\n \t\t{",
                "raw_url": "https://github.com/apache/wicket/raw/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/util/concurrent/ConcurrentReaderHashMap.java",
                "sha": "4dd115bb2a5aa5c80d3542e04c63eb1cda15ce92",
                "status": "modified"
            }
        ],
        "message": "Some minor tiding up of surplus ';'s, places where the code can't reach & a check against a NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/branches/wicket-1.x@462049 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/9639728fab956de03e218ecc65aa5b8da7525944",
        "patched_files": [
            "MockWebApplication.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "MockWebApplicationTest.java"
        ]
    },
    "wicket_dd001de": {
        "bug_id": "wicket_dd001de",
        "commit": "https://github.com/apache/wicket/commit/dd001de3106579673028bf9223b812d2039510fd",
        "file": [
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/wicket/blob/dd001de3106579673028bf9223b812d2039510fd/wicket/src/main/java/wicket/util/string/interpolator/MapVariableInterpolator.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/wicket/util/string/interpolator/MapVariableInterpolator.java?ref=dd001de3106579673028bf9223b812d2039510fd",
                "deletions": 6,
                "filename": "wicket/src/main/java/wicket/util/string/interpolator/MapVariableInterpolator.java",
                "patch": "@@ -18,6 +18,8 @@\n \n import java.util.Map;\n \n+import wicket.util.string.Strings;\n+\n /**\n  * Interpolates variables into a string from a Map.\n  * \n@@ -42,6 +44,26 @@ public MapVariableInterpolator(final String string, final Map variables)\n \t\tthis.variables = variables;\n \t}\n \n+\t/**\n+\t * Constructor\n+\t * \n+\t * @param string\n+\t *            The string to interpolate into\n+\t * @param variables\n+\t *            The variables to substitute\n+\t * @param exceptionOnNullVarValue\n+\t *            if true an {@link IllegalStateException} will be thrown if a\n+\t *            {@link #getValue(String)} returns null, otherwise the\n+\t *            ${varname} string will be left in the <code>string</code> so\n+\t *            multiple interpolators can be chained\n+\t */\n+\tpublic MapVariableInterpolator(String string, final Map variables,\n+\t\t\tboolean exceptionOnNullVarValue)\n+\t{\n+\t\tsuper(string, exceptionOnNullVarValue);\n+\t\tthis.variables = variables;\n+\t}\n+\n \t/**\n \t * Accessor to set variables\n \t * \n@@ -62,12 +84,7 @@ public final void setVariables(final Map variables)\n \t */\n \tprotected final String getValue(final String variableName)\n \t{\n-\t\tfinal Object value = variables.get(variableName);\n-\t\tif (value != null)\n-\t\t{\n-\t\t\treturn value.toString();\n-\t\t}\n-\t\tthrow new IllegalStateException(\"Interpolated variable '\" + variableName + \"' not found.\");\n+\t\treturn Strings.toString(variables.get(variableName));\n \t}\n \n \t/**",
                "raw_url": "https://github.com/apache/wicket/raw/dd001de3106579673028bf9223b812d2039510fd/wicket/src/main/java/wicket/util/string/interpolator/MapVariableInterpolator.java",
                "sha": "e106816b4a79adb3c6fbdd9407d6589625995c5e",
                "status": "modified"
            },
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/wicket/blob/dd001de3106579673028bf9223b812d2039510fd/wicket/src/main/java/wicket/util/string/interpolator/VariableInterpolator.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/wicket/util/string/interpolator/VariableInterpolator.java?ref=dd001de3106579673028bf9223b812d2039510fd",
                "deletions": 4,
                "filename": "wicket/src/main/java/wicket/util/string/interpolator/VariableInterpolator.java",
                "patch": "@@ -35,6 +35,8 @@\n \t/** The string to interpolate within */\n \tprotected final String string;\n \n+\tprivate boolean exceptionOnNullVarValue = false;\n+\n \t/**\n \t * Constructor\n \t * \n@@ -46,6 +48,23 @@ public VariableInterpolator(final String string)\n \t\tthis.string = string;\n \t}\n \n+\t/**\n+\t * Constructor\n+\t * \n+\t * @param string\n+\t *            String to interpolate with variable values\n+\t * @param exceptionOnNullVarValue\n+\t *            if true an {@link IllegalStateException} will be thrown if a\n+\t *            {@link #getValue(String)} returns null, otherwise the\n+\t *            ${varname} string will be left in the <code>string</code> so\n+\t *            multiple interpolators can be chained\n+\t */\n+\tpublic VariableInterpolator(final String string, boolean exceptionOnNullVarValue)\n+\t{\n+\t\tthis.string = string;\n+\t\tthis.exceptionOnNullVarValue = exceptionOnNullVarValue;\n+\t}\n+\n \t/**\n \t * Gets a value for a variable name during interpolation\n \t * \n@@ -93,10 +112,18 @@ public String toString()\n \t\t\t\t// If there's no value\n \t\t\t\tif (value == null)\n \t\t\t\t{\n-\t\t\t\t\t// Leave variable uninterpolated, allowing multiple\n-\t\t\t\t\t// interpolators to\n-\t\t\t\t\t// do their work on the same string\n-\t\t\t\t\tbuffer.append(\"${\" + variableName + \"}\");\n+\t\t\t\t\tif (exceptionOnNullVarValue)\n+\t\t\t\t\t{\n+\t\t\t\t\t\tthrow new IllegalArgumentException(\"Value of variable [[\" + variableName\n+\t\t\t\t\t\t\t\t+ \"]] could not be resolved while interpolating [[\" + string + \"]]\");\n+\t\t\t\t\t}\n+\t\t\t\t\telse\n+\t\t\t\t\t{\n+\t\t\t\t\t\t// Leave variable uninterpolated, allowing multiple\n+\t\t\t\t\t\t// interpolators to\n+\t\t\t\t\t\t// do their work on the same string\n+\t\t\t\t\t\tbuffer.append(\"${\" + variableName + \"}\");\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\telse\n \t\t\t\t{",
                "raw_url": "https://github.com/apache/wicket/raw/dd001de3106579673028bf9223b812d2039510fd/wicket/src/main/java/wicket/util/string/interpolator/VariableInterpolator.java",
                "sha": "c62981ff1e9963c6623291671972a6b197f5940d",
                "status": "modified"
            },
            {
                "additions": 61,
                "blob_url": "https://github.com/apache/wicket/blob/dd001de3106579673028bf9223b812d2039510fd/wicket/src/test/java/wicket/util/string/interpolator/VariableInterpolatorTest.java",
                "changes": 61,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/java/wicket/util/string/interpolator/VariableInterpolatorTest.java?ref=dd001de3106579673028bf9223b812d2039510fd",
                "deletions": 0,
                "filename": "wicket/src/test/java/wicket/util/string/interpolator/VariableInterpolatorTest.java",
                "patch": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package wicket.util.string.interpolator;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import junit.framework.TestCase;\n+import wicket.util.string.interpolator.MapVariableInterpolator;\n+\n+/**\n+ * Tests {@link MapVariableInterpolator}\n+ * \n+ * @author <a href=\"mailto:jbq@apache.org\">Jean-Baptiste Quenot</a>\n+ */\n+public class VariableInterpolatorTest extends TestCase\n+{\n+\tpublic void testWithValue()\n+\t{\n+\t\tMap params = new HashMap();\n+\t\tparams.put(\"key\", \"value\");\n+\t\tMapVariableInterpolator in = new MapVariableInterpolator(\"${key}\", params);\n+\t\tassertEquals(\"value\", in.toString());\n+\t}\n+\n+\tpublic void testWithoutValue()\n+\t{\n+\t\tMap params = new HashMap();\n+\t\tMapVariableInterpolator in = new MapVariableInterpolator(\"${key}\", params);\n+\t\tassertEquals(\"${key}\", in.toString());\n+\t}\n+\n+\tpublic void testWithoutValueAndException()\n+\t{\n+\t\tMap params = new HashMap();\n+\t\tMapVariableInterpolator in = new MapVariableInterpolator(\"${key}\", params, true);\n+\t\ttry\n+\t\t{\n+\t\t\tin.toString();\n+\t\t\tfail(\"Should throw an exception\");\n+\t\t}\n+\t\tcatch (Exception e)\n+\t\t{\n+\n+\t\t}\n+\t}\n+}",
                "raw_url": "https://github.com/apache/wicket/raw/dd001de3106579673028bf9223b812d2039510fd/wicket/src/test/java/wicket/util/string/interpolator/VariableInterpolatorTest.java",
                "sha": "10fb665f229c17de93912bcbf6b0114ed70dad2f",
                "status": "added"
            }
        ],
        "message": "WICKET-340 Unexpected NPE in MapVariableInterpolator\n\nApplied patch and backported exceptionOnNullVarValue from trunk\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/branches/wicket-1.x@515082 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/c0b1eab708e6cd49a0085ebb929c396d293cee63",
        "patched_files": [
            "MapVariableInterpolator.java",
            "VariableInterpolator.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "VariableInterpolatorTest.java"
        ]
    },
    "wicket_e37a9e1": {
        "bug_id": "wicket_e37a9e1",
        "commit": "https://github.com/apache/wicket/commit/e37a9e101f6ee74aa03bff9a6797a16d304b3d0c",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/e37a9e101f6ee74aa03bff9a6797a16d304b3d0c/wicket-core/src/main/java/org/apache/wicket/feedback/FencedFeedbackPanel.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/feedback/FencedFeedbackPanel.java?ref=e37a9e101f6ee74aa03bff9a6797a16d304b3d0c",
                "deletions": 1,
                "filename": "wicket-core/src/main/java/org/apache/wicket/feedback/FencedFeedbackPanel.java",
                "patch": "@@ -152,7 +152,7 @@ protected void onRemove()\n \t\t\t// decrement the fence count\n \n \t\t\tInteger count = fence.getMetaData(FENCE_KEY);\n-\t\t\tcount = count == 1 ? null : count - 1;\n+\t\t\tcount = (count == null || count == 1) ? null : count - 1;\n \t\t\tfence.setMetaData(FENCE_KEY, count);\n \t\t}\n \t}",
                "raw_url": "https://github.com/apache/wicket/raw/e37a9e101f6ee74aa03bff9a6797a16d304b3d0c/wicket-core/src/main/java/org/apache/wicket/feedback/FencedFeedbackPanel.java",
                "sha": "f6916f2c8f0e19f04d4de8cbe3d0dc4210f3a43f",
                "status": "modified"
            }
        ],
        "message": "WICKET-4968 NPE in FencedFeedbackPanel#onRemove",
        "parent": "https://github.com/apache/wicket/commit/af3f84485ccf7a10a7fafe9246d80ff83b13daed",
        "patched_files": [
            "FencedFeedbackPanel.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "FencedFeedbackPanelTest.java"
        ]
    },
    "wicket_e4399d7": {
        "bug_id": "wicket_e4399d7",
        "commit": "https://github.com/apache/wicket/commit/e4399d74234b657435f44eb137969db1a22896d5",
        "file": [
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/wicket/blob/e4399d74234b657435f44eb137969db1a22896d5/wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResourceReference.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResourceReference.java?ref=e4399d74234b657435f44eb137969db1a22896d5",
                "deletions": 8,
                "filename": "wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResourceReference.java",
                "patch": "@@ -111,10 +111,16 @@ public PackageResource getResource()\n \t\tfinal String extension = getExtension();\n \n \t\tfinal PackageResource resource;\n-\t\t\n-\t\tfinal Url url = RequestCycle.get().getRequest().getUrl();\n-\t\t//resource attributes (locale, style, variation) might be encoded in the URL\n-\t\tfinal UrlAttributes urlAttributes = ResourceUtil.decodeResourceReferenceAttributes(url);\n+\n+\t\tRequestCycle requestCycle = RequestCycle.get();\n+\t\tUrlAttributes urlAttributes = null;\n+\t\tif (requestCycle != null)\n+\t\t{\n+\t\t\t//resource attributes (locale, style, variation) might be encoded in the URL\n+\t\t\tfinal Url url = requestCycle.getRequest().getUrl();\n+\t\t\turlAttributes = ResourceUtil.decodeResourceReferenceAttributes(url);\n+\t\t}\n+\n \t\tfinal String currentVariation = getCurrentVariation(urlAttributes);\n \t\tfinal String currentStyle = getCurrentStyle(urlAttributes);\n \t\tfinal Locale currentLocale = getCurrentLocale(urlAttributes);\n@@ -185,7 +191,11 @@ private Locale getCurrentLocale(UrlAttributes attributes)\n \t{\n \t\tLocale currentLocale = getCurrentLocale();\n \n-\t\treturn currentLocale != null ? currentLocale : attributes.getLocale();\n+\t\treturn currentLocale != null\n+\t\t\t\t? currentLocale\n+\t\t\t\t: attributes != null\n+\t\t\t\t\t? attributes.getLocale()\n+\t\t\t\t\t: null;\n \t}\n \n \tprivate Locale getCurrentLocale()\n@@ -208,8 +218,12 @@ private Locale getCurrentLocale()\n \tprivate String getCurrentStyle(UrlAttributes attributes)\n \t{\n \t\tString currentStyle = getCurrentStyle();\n-\t\t\n-\t\treturn currentStyle != null ? currentStyle : attributes.getStyle();\n+\n+\t\treturn currentStyle != null\n+\t\t\t\t? currentStyle\n+\t\t\t\t: attributes != null\n+\t\t\t\t\t? attributes.getStyle()\n+\t\t\t\t\t: null;\n \t}\n \t\n \tprivate String getCurrentStyle()\n@@ -233,7 +247,11 @@ private String getCurrentVariation(UrlAttributes attributes)\n \t{\n \t\tfinal String variation = getVariation();\n \n-\t\treturn variation != null ? variation : attributes.getVariation();\n+\t\treturn variation != null\n+\t\t\t\t? variation\n+\t\t\t\t: attributes != null\n+\t\t\t\t\t? attributes.getVariation()\n+\t\t\t\t\t: null;\n \t}\n \n \t/**",
                "raw_url": "https://github.com/apache/wicket/raw/e4399d74234b657435f44eb137969db1a22896d5/wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResourceReference.java",
                "sha": "f10a01cb83b22133f83f457d6db6fbc5c0dbb966",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/wicket/blob/e4399d74234b657435f44eb137969db1a22896d5/wicket-core/src/test/java/org/apache/wicket/request/resource/PackageResourceReferenceTest.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/test/java/org/apache/wicket/request/resource/PackageResourceReferenceTest.java?ref=e4399d74234b657435f44eb137969db1a22896d5",
                "deletions": 0,
                "filename": "wicket-core/src/test/java/org/apache/wicket/request/resource/PackageResourceReferenceTest.java",
                "patch": "@@ -21,6 +21,7 @@\n import java.util.Locale;\r\n \r\n import org.apache.wicket.Application;\r\n+import org.apache.wicket.ThreadContext;\r\n import org.apache.wicket.protocol.http.mock.MockHttpServletRequest;\r\n import org.apache.wicket.protocol.http.mock.MockHttpServletResponse;\r\n import org.apache.wicket.request.Request;\r\n@@ -355,5 +356,23 @@ public void testContentRangeHeaders()\n \t\t\tnew String(mockHttpServletResponse.getBinaryContent()));\r\n \t}\r\n \r\n+\t/**\r\n+\t * https://issues.apache.org/jira/browse/WICKET-6031\r\n+\t */\r\n+\t@Test\r\n+\tpublic void noRequestCycle()\r\n+\t{\r\n+\t\tThreadContext.setRequestCycle(null);\r\n+\r\n+\t\tPackageResourceReference reference = new PackageResourceReference(scope, \"resource.txt\",\r\n+\t\t\t\tlocales[1], styles[1], variations[1]);\r\n+\r\n+\t\tPackageResource resource = reference.getResource();\r\n+\t\tassertNotNull(resource);\r\n+\r\n+\t\tassertEquals(locales[1], resource.getResourceStream().getLocale());\r\n+\t\tassertEquals(styles[1], resource.getResourceStream().getStyle());\r\n+\t\tassertEquals(variations[1], resource.getResourceStream().getVariation());\r\n+\t}\r\n \r\n }\r",
                "raw_url": "https://github.com/apache/wicket/raw/e4399d74234b657435f44eb137969db1a22896d5/wicket-core/src/test/java/org/apache/wicket/request/resource/PackageResourceReferenceTest.java",
                "sha": "de7a0a55b3f91d97e34e9685dbf9aef74a77c3e0",
                "status": "modified"
            }
        ],
        "message": "WICKET-6031 NPE in PackageResourceReference#getResource() when there is no request",
        "parent": "https://github.com/apache/wicket/commit/490fdf67646f1b987c2c1065a3fa6c55f6c5b338",
        "patched_files": [
            "PackageResourceReference.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "PackageResourceReferenceTest.java"
        ]
    },
    "wicket_e519c90": {
        "bug_id": "wicket_e519c90",
        "commit": "https://github.com/apache/wicket/commit/e519c90e9c5243347f3b0b9c89be0c28e83c7239",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/wicket/blob/e519c90e9c5243347f3b0b9c89be0c28e83c7239/jdk-1.4/wicket/src/main/java/org/apache/wicket/util/tester/FormTester.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/util/tester/FormTester.java?ref=e519c90e9c5243347f3b0b9c89be0c28e83c7239",
                "deletions": 0,
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/util/tester/FormTester.java",
                "patch": "@@ -274,6 +274,11 @@ protected void assignValueToFormComponent(FormComponent formComponent, String va\n \t\t */\n \t\tprotected ChoiceSelector create(FormComponent formComponent)\n \t\t{\n+\t\t\tif (formComponent == null)\n+\t\t\t{\n+\t\t\t\tfail(\"Trying to select on null component.\");\n+\t\t\t}\n+\n \t\t\tif (formComponent instanceof RadioGroup || formComponent instanceof DropDownChoice\n \t\t\t\t\t|| formComponent instanceof RadioChoice)\n \t\t\t{",
                "raw_url": "https://github.com/apache/wicket/raw/e519c90e9c5243347f3b0b9c89be0c28e83c7239/jdk-1.4/wicket/src/main/java/org/apache/wicket/util/tester/FormTester.java",
                "sha": "9bf28fcf0826c87f6ad93443abee2c8821096abe",
                "status": "modified"
            }
        ],
        "message": "fixed (WICKET-697) FormTester crashes with NullPointerException, if FormComponent is not found\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@550715 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/975462a13ac37bd2e56d85339d6be6fe763801dc",
        "patched_files": [
            "FormTester.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "FormTesterTest.java"
        ]
    },
    "wicket_e9170eb": {
        "bug_id": "wicket_e9170eb",
        "commit": "https://github.com/apache/wicket/commit/e9170ebd658342d5871a3a93397dbe85314e6a53",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/wicket/blob/e9170ebd658342d5871a3a93397dbe85314e6a53/wicket-core/src/main/java/org/apache/wicket/protocol/http/StoredResponsesMap.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/protocol/http/StoredResponsesMap.java?ref=e9170ebd658342d5871a3a93397dbe85314e6a53",
                "deletions": 4,
                "filename": "wicket-core/src/main/java/org/apache/wicket/protocol/http/StoredResponsesMap.java",
                "patch": "@@ -70,11 +70,14 @@ protected boolean removeEldestEntry(java.util.Map.Entry<String, Object> eldest)\n \t\tif (removed == false)\n \t\t{\n \t\t\tValue value = (Value)eldest.getValue();\n-\t\t\tDuration elapsedTime = Time.now().subtract(value.creationTime);\n-\t\t\tif (lifetime.lessThanOrEqual(elapsedTime))\n+\t\t\tif (value != null)\n \t\t\t{\n-\t\t\t\tremovedValue = value.response;\n-\t\t\t\tremoved = true;\n+\t\t\t\tDuration elapsedTime = Time.now().subtract(value.creationTime);\n+\t\t\t\tif (lifetime.lessThanOrEqual(elapsedTime))\n+\t\t\t\t{\n+\t\t\t\t\tremovedValue = value.response;\n+\t\t\t\t\tremoved = true;\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t\treturn removed;",
                "raw_url": "https://github.com/apache/wicket/raw/e9170ebd658342d5871a3a93397dbe85314e6a53/wicket-core/src/main/java/org/apache/wicket/protocol/http/StoredResponsesMap.java",
                "sha": "29b61774d4da20daace5d1415130d124294461ec",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/wicket/blob/e9170ebd658342d5871a3a93397dbe85314e6a53/wicket-core/src/main/java/org/apache/wicket/protocol/http/WebApplication.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/protocol/http/WebApplication.java?ref=e9170ebd658342d5871a3a93397dbe85314e6a53",
                "deletions": 9,
                "filename": "wicket-core/src/main/java/org/apache/wicket/protocol/http/WebApplication.java",
                "patch": "@@ -16,6 +16,13 @@\n  */\n package org.apache.wicket.protocol.http;\n \n+import java.io.UnsupportedEncodingException;\n+\n+import javax.servlet.ServletContext;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+\n import org.apache.wicket.Application;\n import org.apache.wicket.IPageRendererProvider;\n import org.apache.wicket.Page;\n@@ -62,13 +69,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.io.UnsupportedEncodingException;\n-\n-import javax.servlet.ServletContext;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.servlet.http.HttpSession;\n-\n \n /**\n  * A web application is a subclass of Application which associates with an instance of WicketServlet\n@@ -681,8 +681,8 @@ protected void outputDevelopmentModeWarning()\n \t}\n \n \t/*\n-\t * Can contain at most 1000 responses and each entry can live at most one minute for now there\n-\t * is no need to configure these parameters externally\n+\t * Can contain at most 1000 responses and each entry can live at most one minute. For now there\n+\t * is no need to configure these parameters externally.\n \t */\n \tprivate final StoredResponsesMap storedResponses = new StoredResponsesMap(1000,\n \t\tDuration.seconds(60));",
                "raw_url": "https://github.com/apache/wicket/raw/e9170ebd658342d5871a3a93397dbe85314e6a53/wicket-core/src/main/java/org/apache/wicket/protocol/http/WebApplication.java",
                "sha": "62fa114656fe7a2eba15288f4b47872bfd435805",
                "status": "modified"
            },
            {
                "additions": 64,
                "blob_url": "https://github.com/apache/wicket/blob/e9170ebd658342d5871a3a93397dbe85314e6a53/wicket-core/src/test/java/org/apache/wicket/protocol/http/StoredResponsesMapTest.java",
                "changes": 64,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/test/java/org/apache/wicket/protocol/http/StoredResponsesMapTest.java?ref=e9170ebd658342d5871a3a93397dbe85314e6a53",
                "deletions": 0,
                "filename": "wicket-core/src/test/java/org/apache/wicket/protocol/http/StoredResponsesMapTest.java",
                "patch": "@@ -20,10 +20,16 @@\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n+import java.security.SecureRandom;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n \n import org.apache.wicket.util.time.Duration;\n+import org.junit.Ignore;\n import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n \n /**\n  * @see <a href=\"https://issues.apache.org/jira/browse/WICKET-3209\">WICKET-3209</a>\n@@ -75,4 +81,62 @@ public void cannotPutArbitraryValue()\n \t\tStoredResponsesMap map = new StoredResponsesMap(1000, Duration.days(1));\n \t\tmap.put(\"1\", new Object());\n \t}\n+\n+\t/**\n+\t * <a href=\"https://issues.apache.org/jira/browse/WICKET-3736\">WICKET-3736</a>\n+\t * \n+\t * Tries to simulate heavy load on the {@link StoredResponsesMap} by putting many entries and\n+\t * removing randomly them.\n+\t * \n+\t * The test is disabled by default because it is slow (~ 30secs). Enable it when we have\n+\t * categorized tests ({@link Category}) and run slow ones only at Apache CI servers\n+\t * \n+\t * @throws InterruptedException\n+\t */\n+\t@Test\n+\t@Ignore\n+\tpublic void heavyLoad() throws InterruptedException\n+\t{\n+\t\tint numberOfThreads = 100;\n+\t\tfinal int iterations = 10000;\n+\t\tfinal CountDownLatch startLatch = new CountDownLatch(numberOfThreads);\n+\t\tfinal CountDownLatch endLatch = new CountDownLatch(numberOfThreads);\n+\t\tfinal SecureRandom rnd = new SecureRandom();\n+\t\tfinal StoredResponsesMap map = new StoredResponsesMap(1000, Duration.seconds(60));\n+\t\tfinal List<String> keys = new ArrayList<String>();\n+\n+\t\tRunnable r = new Runnable()\n+\t\t{\n+\t\t\tpublic void run()\n+\t\t\t{\n+\t\t\t\tstartLatch.countDown();\n+\t\t\t\ttry\n+\t\t\t\t{\n+\t\t\t\t\t// wait all threads before starting the test\n+\t\t\t\t\tstartLatch.await();\n+\t\t\t\t}\n+\t\t\t\tcatch (InterruptedException e)\n+\t\t\t\t{\n+\t\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t\t}\n+\n+\t\t\t\tfor (int i = 0; i < iterations; i++)\n+\t\t\t\t{\n+\t\t\t\t\tString key = \"abc\" + (rnd.nextDouble() * iterations);\n+\t\t\t\t\tkeys.add(key);\n+\t\t\t\t\tmap.put(key, new BufferedWebResponse(null));\n+\n+\t\t\t\t\tString key2 = keys.get(rnd.nextInt(keys.size() - 1));\n+\t\t\t\t\tmap.remove(key2);\n+\t\t\t\t}\n+\t\t\t\tendLatch.countDown();\n+\t\t\t}\n+\t\t};\n+\n+\t\tfor (int t = 0; t < numberOfThreads; t++)\n+\t\t{\n+\t\t\tnew Thread(r).start();\n+\t\t}\n+\t\tendLatch.await();\n+\t}\n }",
                "raw_url": "https://github.com/apache/wicket/raw/e9170ebd658342d5871a3a93397dbe85314e6a53/wicket-core/src/test/java/org/apache/wicket/protocol/http/StoredResponsesMapTest.java",
                "sha": "12effe3d29f700ede7140ab0eb44c1f4f7f332e6",
                "status": "modified"
            }
        ],
        "message": "WICKET-3736 npe in StoredResponsesMap\n\nAdd a check for null for the last entry.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1126429 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/802995c6f1be706d9c4f1f618e8d365a2fc9e971",
        "patched_files": [
            "StoredResponsesMap.java",
            "WebApplication.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "StoredResponsesMapTest.java"
        ]
    },
    "wicket_ed5bfed": {
        "bug_id": "wicket_ed5bfed",
        "commit": "https://github.com/apache/wicket/commit/ed5bfed401b658b2f23c91e126c8492c8e87a1e0",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/wicket/blob/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket-examples/src/main/webapp/WEB-INF/web.xml",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-examples/src/main/webapp/WEB-INF/web.xml?ref=ed5bfed401b658b2f23c91e126c8492c8e87a1e0",
                "deletions": 3,
                "filename": "wicket-examples/src/main/webapp/WEB-INF/web.xml",
                "patch": "@@ -707,18 +707,18 @@\n \t\t  <param-value>org.apache.wicket.examples.events.EventsApplication</param-value>\n \t\t</init-param>\n \t</filter>\n+\t\n \t<filter-mapping>\n \t\t<filter-name>EventsApplication</filter-name>\n         <url-pattern>/events/*</url-pattern>\n \t</filter-mapping>\n \n-\n-\n-\n+\t<!-- LISTENER -->\n \t<listener>\n \t\t<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n \t</listener>\n \n+\t<!-- SERVLET -->\n \t<servlet>\n \t\t<servlet-name>HelloWorldServlet</servlet-name>\n \t\t<servlet-class>org.apache.wicket.examples.HelloWorldServlet</servlet-class>\n@@ -729,6 +729,22 @@\n \t\t<url-pattern>/helloworldservlet/*</url-pattern>\n \t</servlet-mapping>\n \n+\t<servlet>\n+   \t\t<servlet-name>ServletTest</servlet-name>\n+   \t\t<servlet-class>org.apache.wicket.protocol.http.WicketServlet</servlet-class>\n+   \t\t<init-param>\n+     \t\t<param-name>applicationClassName</param-name>\n+     \t\t<param-value>org.apache.wicket.examples.helloworld.HelloWorldApplication</param-value>\n+   \t\t</init-param>\n+   \t\t<load-on-startup>0</load-on-startup>\n+ \t</servlet>\n+\n+\t<servlet-mapping>\n+\t\t<servlet-name>ServletTest</servlet-name>\n+\t\t<url-pattern>/servlettest/*</url-pattern>\n+\t</servlet-mapping>\n+\n+\n \t<session-config>\n \t\t<session-timeout>5</session-timeout>\n \t</session-config>",
                "raw_url": "https://github.com/apache/wicket/raw/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket-examples/src/main/webapp/WEB-INF/web.xml",
                "sha": "f045b84707738d282065fc91a31990986c649fad",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/wicket/blob/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket-util/src/main/java/org/apache/wicket/util/file/WebXmlFile.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-util/src/main/java/org/apache/wicket/util/file/WebXmlFile.java?ref=ed5bfed401b658b2f23c91e126c8492c8e87a1e0",
                "deletions": 8,
                "filename": "wicket-util/src/main/java/org/apache/wicket/util/file/WebXmlFile.java",
                "patch": "@@ -52,29 +52,35 @@ public WebXmlFile()\n \t/**\r\n \t * Gets Wicket filter path via FilterConfig\r\n \t * \r\n+\t * @param isServlet\r\n+\t *            true if Servlet, false if Filter\r\n \t * @param filterConfig\r\n \t * @return Filter path retrieved from \"url-pattern\". Null if not found or error occured\r\n \t */\r\n-\tpublic final String getFilterPath(final FilterConfig filterConfig)\r\n+\tpublic final String getFilterPath(final boolean isServlet, final FilterConfig filterConfig)\r\n \t{\r\n-\t\treturn getFilterPath(filterConfig.getServletContext(), filterConfig.getFilterName());\r\n+\t\treturn getFilterPath(isServlet, filterConfig.getServletContext(),\r\n+\t\t\tfilterConfig.getFilterName());\r\n \t}\r\n \r\n \t/**\r\n \t * Gets Wicket filter path via ServletContext and the filter name\r\n \t * \r\n+\t * @param isServlet\r\n+\t *            true if Servlet, false if Filter\r\n \t * @param servletContext\r\n \t * @param filterName\r\n \t * @return Filter path retrieved from \"url-pattern\". Null if not found or error occured\r\n \t */\r\n-\tpublic final String getFilterPath(final ServletContext servletContext, final String filterName)\r\n+\tpublic final String getFilterPath(final boolean isServlet, final ServletContext servletContext,\r\n+\t\tfinal String filterName)\r\n \t{\r\n \t\tInputStream is = servletContext.getResourceAsStream(\"/WEB-INF/web.xml\");\r\n \t\tif (is != null)\r\n \t\t{\r\n \t\t\ttry\r\n \t\t\t{\r\n-\t\t\t\treturn getFilterPath(filterName, is);\r\n+\t\t\t\treturn getFilterPath(isServlet, filterName, is);\r\n \t\t\t}\r\n \t\t\tcatch (ParserConfigurationException ex)\r\n \t\t\t{\r\n@@ -124,6 +130,8 @@ public final String getFilterPath(final ServletContext servletContext, final Str\n \t * </code>\r\n \t * </pre>\r\n \t * \r\n+\t * @param isServlet\r\n+\t *            true if Servlet, false if Filter\r\n \t * @param filterName\r\n \t * @param is\r\n \t *            The web.xml file\r\n@@ -132,17 +140,31 @@ public final String getFilterPath(final ServletContext servletContext, final Str\n \t * @throws IOException\r\n \t * @throws SAXException\r\n \t */\r\n-\tpublic final String getFilterPath(final String filterName, final InputStream is)\r\n-\t\tthrows ParserConfigurationException, SAXException, IOException\r\n+\tpublic final String getFilterPath(final boolean isServlet, final String filterName,\r\n+\t\tfinal InputStream is) throws ParserConfigurationException, SAXException, IOException\r\n \t{\r\n \t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\r\n \t\tDocumentBuilder builder = factory.newDocumentBuilder();\r\n \t\tDocument document = builder.parse(is);\r\n \r\n-\t\tString mapping = \"filter-mapping\";\r\n-\t\tString name = \"filter-name\";\r\n+\t\tString tag = (isServlet ? \"servlet\" : \"filter\");\r\n+\t\tString mapping = tag + \"-mapping\";\r\n+\t\tString name = tag + \"-name\";\r\n \r\n \t\tString urlPattern = getFilterPath(filterName, mapping, name, document.getChildNodes());\r\n+\t\tif (urlPattern == null)\r\n+\t\t{\r\n+\t\t\tif (log.isWarnEnabled())\r\n+\t\t\t{\r\n+\t\t\t\tlog.warn(\"web.xml: No url-pattern found for \" + tag + \" with name \" + filterName);\r\n+\t\t\t}\r\n+\t\t\treturn null;\r\n+\t\t}\r\n+\t\telse if (log.isInfoEnabled())\r\n+\t\t{\r\n+\t\t\tlog.info(\"web.xml: found \" + tag + \" with name \" + filterName + \". url-pattern=\" +\r\n+\t\t\t\turlPattern);\r\n+\t\t}\r\n \r\n \t\t// remove leading \"/\" and trailing \"*\"\r\n \t\treturn urlPattern.substring(1, urlPattern.length() - 1);\r",
                "raw_url": "https://github.com/apache/wicket/raw/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket-util/src/main/java/org/apache/wicket/util/file/WebXmlFile.java",
                "sha": "3dfd04486f3eadcc25785a103a447094e27d2eab",
                "status": "modified"
            },
            {
                "additions": 70,
                "blob_url": "https://github.com/apache/wicket/blob/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket-util/src/test/java/org/apache/wicket/util/file/WebXmlFileTest.java",
                "changes": 82,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-util/src/test/java/org/apache/wicket/util/file/WebXmlFileTest.java?ref=ed5bfed401b658b2f23c91e126c8492c8e87a1e0",
                "deletions": 12,
                "filename": "wicket-util/src/test/java/org/apache/wicket/util/file/WebXmlFileTest.java",
                "patch": "@@ -31,29 +31,87 @@\n  */\r\n public class WebXmlFileTest extends TestCase\r\n {\r\n-\tpublic void test_1() throws ParserConfigurationException, SAXException, IOException\r\n+\t/**\r\n+\t * \r\n+\t * @throws ParserConfigurationException\r\n+\t * @throws SAXException\r\n+\t * @throws IOException\r\n+\t */\r\n+\tpublic void test_filter() throws ParserConfigurationException, SAXException, IOException\r\n+\t{\r\n+\t\tfilterOrServlet(false);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * \r\n+\t * @throws ParserConfigurationException\r\n+\t * @throws SAXException\r\n+\t * @throws IOException\r\n+\t */\r\n+\tpublic void test_servlet() throws ParserConfigurationException, SAXException, IOException\r\n+\t{\r\n+\t\tfilterOrServlet(true);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * \r\n+\t * @param servlet\r\n+\t * @throws ParserConfigurationException\r\n+\t * @throws SAXException\r\n+\t * @throws IOException\r\n+\t */\r\n+\tpublic void filterOrServlet(boolean servlet) throws ParserConfigurationException, SAXException,\r\n+\t\tIOException\r\n+\t{\r\n+\t\tString tag = servlet ? \"servlet\" : \"filter\";\r\n+\r\n+\t\tString webxml = getWebXml(tag, \"/*\");\r\n+\t\tString path = new WebXmlFile().getFilterPath(servlet, \"HelloWorldApplication\",\r\n+\t\t\tnew ByteArrayInputStream(webxml.toString().getBytes()));\r\n+\t\tassertEquals(\"\", path);\r\n+\r\n+\t\twebxml = getWebXml(tag, \"/test/*\");\r\n+\t\tpath = new WebXmlFile().getFilterPath(servlet, \"HelloWorldApplication\",\r\n+\t\t\tnew ByteArrayInputStream(webxml.toString().getBytes()));\r\n+\t\tassertEquals(\"test/\", path);\r\n+\r\n+\t\tpath = new WebXmlFile().getFilterPath(servlet, \"xxx\", new ByteArrayInputStream(\r\n+\t\t\twebxml.toString().getBytes()));\r\n+\t\tassertNull(path);\r\n+\r\n+\t\tpath = new WebXmlFile().getFilterPath(!servlet, \"HelloWorldApplication\",\r\n+\t\t\tnew ByteArrayInputStream(webxml.toString().getBytes()));\r\n+\t\tassertNull(path);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * \r\n+\t * @param filter\r\n+\t * @param url\r\n+\t * @return webxml\r\n+\t */\r\n+\tprivate String getWebXml(String filter, String url)\r\n \t{\r\n \t\tStringBuffer webxml = new StringBuffer();\r\n \t\twebxml.append(\"<web-app>\");\r\n-\t\twebxml.append(\"<filter>\");\r\n-\t\twebxml.append(\" <filter-name>HelloWorldApplication</filter-name>\");\r\n-\t\twebxml.append(\" <filter-class>org.apache.wicket.protocol.http.WicketFilter</filter-class>\");\r\n+\t\twebxml.append(\"<\" + filter + \">\");\r\n+\t\twebxml.append(\" <\" + filter + \"-name>HelloWorldApplication</\" + filter + \"-name>\");\r\n+\t\twebxml.append(\" <\" + filter + \"-class>org.apache.wicket.protocol.http.WicketFilter</\" +\r\n+\t\t\tfilter + \"-class>\");\r\n \t\twebxml.append(\" <init-param>\");\r\n \t\twebxml.append(\"  <param-name>applicationClassName</param-name>\");\r\n \t\twebxml.append(\"  <param-value>org.apache.wicket.examples.helloworld.HelloWorldApplication</param-value>\");\r\n \t\twebxml.append(\" </init-param>\");\r\n-\t\twebxml.append(\"</filter>\");\r\n+\t\twebxml.append(\"</\" + filter + \">\");\r\n \t\twebxml.append(\"\");\r\n-\t\twebxml.append(\"<filter-mapping>\");\r\n-\t\twebxml.append(\" <filter-name>HelloWorldApplication</filter-name>\");\r\n-\t\twebxml.append(\" <url-pattern>/*</url-pattern>\");\r\n+\t\twebxml.append(\"<\" + filter + \"-mapping>\");\r\n+\t\twebxml.append(\" <\" + filter + \"-name>HelloWorldApplication</\" + filter + \"-name>\");\r\n+\t\twebxml.append(\" <url-pattern>\" + url + \"</url-pattern>\");\r\n \t\twebxml.append(\" <dispatcher>REQUEST</dispatcher>\");\r\n \t\twebxml.append(\" <dispatcher>INCLUDE</dispatcher>\");\r\n-\t\twebxml.append(\"</filter-mapping>\");\r\n+\t\twebxml.append(\"</\" + filter + \"-mapping>\");\r\n \t\twebxml.append(\"</web-app>\");\r\n \r\n-\t\tString path = new WebXmlFile().getFilterPath(\"HelloWorldApplication\",\r\n-\t\t\tnew ByteArrayInputStream(webxml.toString().getBytes()));\r\n-\t\tassertEquals(\"\", path);\r\n+\t\treturn webxml.toString();\r\n \t}\r\n }\r",
                "raw_url": "https://github.com/apache/wicket/raw/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket-util/src/test/java/org/apache/wicket/util/file/WebXmlFileTest.java",
                "sha": "2b6003e118b53bf7ce2763a8c0077a55da875128",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket/src/main/disabled/org/apache/wicket/protocol/http/MockWebApplication.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/disabled/org/apache/wicket/protocol/http/MockWebApplication.java?ref=ed5bfed401b658b2f23c91e126c8492c8e87a1e0",
                "deletions": 7,
                "filename": "wicket/src/main/disabled/org/apache/wicket/protocol/http/MockWebApplication.java",
                "patch": "@@ -37,6 +37,7 @@\n import org.apache.wicket.PageParameters;\n import org.apache.wicket.Session;\n import org.apache.wicket.markup.html.pages.ExceptionErrorPage;\n+import org.apache.wicket.protocol.http.WicketFilter;\n import org.apache.wicket.protocol.http.request.WebErrorCodeResponseHandler;\n import org.apache.wicket.protocol.http.request.WebRequestCodingStrategy;\n import org.apache.wicket.request.target.coding.WebRequestEncoder;\n@@ -172,7 +173,6 @@ public void destroy()\n \t\t{\n \t\t\tfilter.init(new FilterConfig()\n \t\t\t{\n-\n \t\t\t\tpublic ServletContext getServletContext()\n \t\t\t\t{\n \t\t\t\t\treturn context;\n@@ -185,12 +185,6 @@ public ServletContext getServletContext()\n \n \t\t\t\tpublic String getInitParameter(String name)\n \t\t\t\t{\n-\t\t\t\t\tif (name.equals(WicketFilter.FILTER_MAPPING_PARAM))\n-\t\t\t\t\t{\n-\t\t\t\t\t\treturn WicketFilter.SERVLET_PATH_HOLDER;\n-\t\t\t\t\t\t// return \"/\" + MockWebApplication.this.getName() +\n-\t\t\t\t\t\t// \"/*\";\n-\t\t\t\t\t}\n \t\t\t\t\treturn null;\n \t\t\t\t}\n ",
                "raw_url": "https://github.com/apache/wicket/raw/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket/src/main/disabled/org/apache/wicket/protocol/http/MockWebApplication.java",
                "sha": "2093ead3fef79577e5af660dcf7c5644240c22c7",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/wicket/blob/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket/src/main/java/org/apache/wicket/protocol/http/ReloadingWicketFilter.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/org/apache/wicket/protocol/http/ReloadingWicketFilter.java?ref=ed5bfed401b658b2f23c91e126c8492c8e87a1e0",
                "deletions": 3,
                "filename": "wicket/src/main/java/org/apache/wicket/protocol/http/ReloadingWicketFilter.java",
                "patch": "@@ -143,10 +143,11 @@ protected ClassLoader getClassLoader()\n \t}\n \n \t/**\n-\t * @see org.apache.wicket.protocol.http.WicketFilter#init(javax.servlet.FilterConfig)\n+\t * @see org.apache.wicket.protocol.http.WicketFilter#init(boolean, javax.servlet.FilterConfig)\n \t */\n \t@Override\n-\tpublic void init(final FilterConfig filterConfig) throws ServletException\n+\tpublic void init(final boolean isServlet, final FilterConfig filterConfig)\n+\t\tthrows ServletException\n \t{\n \t\treloadingClassLoader.setListener(new IChangeListener()\n \t\t{\n@@ -172,6 +173,6 @@ public void onChange()\n \t\t\t}\n \t\t});\n \n-\t\tsuper.init(filterConfig);\n+\t\tsuper.init(isServlet, filterConfig);\n \t}\n }",
                "raw_url": "https://github.com/apache/wicket/raw/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket/src/main/java/org/apache/wicket/protocol/http/ReloadingWicketFilter.java",
                "sha": "def56f3faf69ee9434376cb0dc2aa09f2d883a3d",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/wicket/blob/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java?ref=ed5bfed401b658b2f23c91e126c8492c8e87a1e0",
                "deletions": 5,
                "filename": "wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java",
                "patch": "@@ -67,8 +67,6 @@\n \t/** The name of the context parameter that specifies application factory class */\n \tpublic static final String APP_FACT_PARAM = \"applicationFactoryClassName\";\n \n-\tstatic final String SERVLET_PATH_HOLDER = \"<servlet>\";\n-\n \t// Wicket's Application object\n \tprivate WebApplication application;\n \n@@ -245,9 +243,28 @@ protected IWebApplicationFactory getApplicationFactory()\n \t}\n \n \t/**\n+\t * If you do have a need to subclass, you may subclass {@link #init(boolean, FilterConfig)}\n+\t * \n \t * @see javax.servlet.Filter#init(javax.servlet.FilterConfig)\n \t */\n-\tpublic void init(final FilterConfig filterConfig) throws ServletException\n+\tpublic final void init(final FilterConfig filterConfig) throws ServletException\n+\t{\n+\t\tinit(false, filterConfig);\n+\t}\n+\n+\t/**\n+\t * Servlets and Filters are treated essentially the same with Wicket. This is the entry point\n+\t * for both of them.\n+\t * \n+\t * @see #init(FilterConfig)\n+\t * \n+\t * @param isServlet\n+\t *            True if Servlet, false of Filter\n+\t * @param filterConfig\n+\t * @throws ServletException\n+\t */\n+\tpublic void init(final boolean isServlet, final FilterConfig filterConfig)\n+\t\tthrows ServletException\n \t{\n \t\tthis.filterConfig = filterConfig;\n \n@@ -259,8 +276,8 @@ public void init(final FilterConfig filterConfig) throws ServletException\n \t\t// Allow the filterPath to tbe preset via setFilterPath()\n \t\tif (filterPath == null)\n \t\t{\n-\t\t\tfilterPath = new WebXmlFile().getFilterPath(filterConfig);\n-\t\t\tif (filterPath == null)\n+\t\t\tfilterPath = new WebXmlFile().getFilterPath(isServlet, filterConfig);\n+\t\t\tif ((filterPath == null) && log.isInfoEnabled())\n \t\t\t{\n \t\t\t\tlog.info(\"Unable to parse filter mapping web.xml for \" +\n \t\t\t\t\tfilterConfig.getFilterName() + \". \" + \"Configure with init-param \" +",
                "raw_url": "https://github.com/apache/wicket/raw/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java",
                "sha": "062fab42f3bd36accdc661f40ddb82ca152da9a4",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/wicket/blob/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java?ref=ed5bfed401b658b2f23c91e126c8492c8e87a1e0",
                "deletions": 11,
                "filename": "wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java",
                "patch": "@@ -162,7 +162,12 @@ public final void doPost(final HttpServletRequest servletRequest,\n \t\t}\n \t}\n \n-\tprivate static String getURL(HttpServletRequest httpServletRequest)\n+\t/**\n+\t * \n+\t * @param httpServletRequest\n+\t * @return URL\n+\t */\n+\tprivate static String getURL(final HttpServletRequest httpServletRequest)\n \t{\n \t\t/*\n \t\t * Servlet 2.3 specification :\n@@ -183,8 +188,7 @@ private static String getURL(HttpServletRequest httpServletRequest)\n \t\t\turl += pathInfo;\n \t\t}\n \n-\t\tfinal String queryString = httpServletRequest.getQueryString();\n-\n+\t\tString queryString = httpServletRequest.getQueryString();\n \t\tif (queryString != null)\n \t\t{\n \t\t\turl += (\"?\" + queryString);\n@@ -199,7 +203,13 @@ private static String getURL(HttpServletRequest httpServletRequest)\n \t\treturn url;\n \t}\n \n-\tprivate void fallback(HttpServletRequest request, HttpServletResponse response)\n+\t/**\n+\t * \n+\t * @param request\n+\t * @param response\n+\t * @throws IOException\n+\t */\n+\tprivate void fallback(final HttpServletRequest request, final HttpServletResponse response)\n \t\tthrows IOException\n \t{\n \t\t// The ServletWebRequest is created here to avoid code duplication. The getURL call doesn't\n@@ -251,7 +261,7 @@ private void fallback(HttpServletRequest request, HttpServletResponse response)\n \tpublic void init() throws ServletException\n \t{\n \t\twicketFilter = newWicketFilter();\n-\t\twicketFilter.init(new FilterConfig()\n+\t\twicketFilter.init(true, new FilterConfig()\n \t\t{\n \t\t\t/**\n \t\t\t * @see javax.servlet.FilterConfig#getServletContext()\n@@ -273,12 +283,8 @@ public ServletContext getServletContext()\n \t\t\t/**\n \t\t\t * @see javax.servlet.FilterConfig#getInitParameter(java.lang.String)\n \t\t\t */\n-\t\t\tpublic String getInitParameter(String name)\n+\t\t\tpublic String getInitParameter(final String name)\n \t\t\t{\n-\t\t\t\tif (WicketFilter.FILTER_MAPPING_PARAM.equals(name))\n-\t\t\t\t{\n-\t\t\t\t\treturn WicketFilter.SERVLET_PATH_HOLDER;\n-\t\t\t\t}\n \t\t\t\treturn WicketServlet.this.getInitParameter(name);\n \t\t\t}\n \n@@ -309,5 +315,4 @@ public void destroy()\n \t\twicketFilter.destroy();\n \t\twicketFilter = null;\n \t}\n-\n }",
                "raw_url": "https://github.com/apache/wicket/raw/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java",
                "sha": "90dee580e390942f0a66982b1719dd66d5c9610f",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket/src/test/java/org/apache/wicket/protocol/http/WicketFilterTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/java/org/apache/wicket/protocol/http/WicketFilterTest.java?ref=ed5bfed401b658b2f23c91e126c8492c8e87a1e0",
                "deletions": 1,
                "filename": "wicket/src/test/java/org/apache/wicket/protocol/http/WicketFilterTest.java",
                "patch": "@@ -143,7 +143,7 @@ private String getFilterPath(String string, InputStream in)\n \t{\n \t\ttry\n \t\t{\n-\t\t\treturn new WebXmlFile().getFilterPath(string, in);\n+\t\t\treturn new WebXmlFile().getFilterPath(false, string, in);\n \t\t}\n \t\tcatch (ParserConfigurationException ex)\n \t\t{",
                "raw_url": "https://github.com/apache/wicket/raw/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket/src/test/java/org/apache/wicket/protocol/http/WicketFilterTest.java",
                "sha": "f614b2786f2feff4183b7c2bcf3ce6621c4ee6a8",
                "status": "modified"
            }
        ],
        "message": "fixed WICKET-3039 and added test case: WicketServlet failes to initialise with NullPointerException in WebXmlFile.getFilterPath()\nIssue: WICKET-3029\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@995709 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/c00b2b84f910bcb0b39822c968bfde9faf50bbd1",
        "patched_files": [
            "WicketServlet.java",
            "web.xml",
            "ReloadingWicketFilter.java",
            "WicketFilter.java",
            "MockWebApplication.java",
            "WebXmlFile.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "WebXmlFileTest.java",
            "WicketFilterTest.java"
        ]
    },
    "wicket_ee868b4": {
        "bug_id": "wicket_ee868b4",
        "commit": "https://github.com/apache/wicket/commit/ee868b494942a75ab1b2f6e1f45fdba019cf270e",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket-examples/src/java/wicket/examples/compref/NonBookmarkablePage.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-examples/src/java/wicket/examples/compref/NonBookmarkablePage.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 1,
                "filename": "wicket-examples/src/java/wicket/examples/compref/NonBookmarkablePage.java",
                "patch": "@@ -37,7 +37,7 @@ public NonBookmarkablePage(final WebPage referer)\n     {\n     \tif (referer == null)\n     \t{\n-    \t\tthrow new NullPointerException(\"argument referer must not be null\");\n+    \t\tthrow new IllegalArgumentException(\"Argument referer must not be null\");\n     \t}\n \n     \t// Add a link to navigate back to the refering page. We now use the PageLink",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket-examples/src/java/wicket/examples/compref/NonBookmarkablePage.java",
                "sha": "807b553b5593a99f94d157eefa405e34749aa4b8",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket-examples/src/java/wicket/examples/niceurl/NiceUrlApplication.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-examples/src/java/wicket/examples/niceurl/NiceUrlApplication.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 3,
                "filename": "wicket-examples/src/java/wicket/examples/niceurl/NiceUrlApplication.java",
                "patch": "@@ -21,6 +21,7 @@\n import wicket.examples.niceurl.mounted.Page3;\n import wicket.markup.parser.IMarkupFilter;\n import wicket.markup.parser.filter.PrependContextPathHandler;\n+import wicket.util.lang.PackageName;\n \n /**\n  * Application class for this example.\n@@ -48,10 +49,10 @@ public NiceUrlApplication()\n \t\t// maybe not the neatest sight, but for package mounting it makes\n \t\t// sense to use one of the (important) classes in your package, so\n \t\t// that any refactoring (like a package rename) will automatically\n-\t\t// be applied here. \n-\t\tmountPackage(\"/my/mounted/package\", Page3.class);\n+\t\t// be applied here.\n+\t\tmount(\"/my/mounted/package\", PackageName.forClass(Page3.class));\n \t}\n-\t\n+\n \t/**\n \t * Make sure all hrefs (and src) attributes have the correct prefix.\n \t * ",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket-examples/src/java/wicket/examples/niceurl/NiceUrlApplication.java",
                "sha": "5321a6f204944109daf96e9fb923c437eda01f02",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket-extensions/src/java/wicket/extensions/markup/html/beanedit/AbstractBeanPanel.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-extensions/src/java/wicket/extensions/markup/html/beanedit/AbstractBeanPanel.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 1,
                "filename": "wicket-extensions/src/java/wicket/extensions/markup/html/beanedit/AbstractBeanPanel.java",
                "patch": "@@ -50,7 +50,7 @@ public AbstractBeanPanel(String id, BeanModel beanModel)\n \t\tsuper(id, beanModel);\n \t\tif (beanModel == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"argument beanModel must not be null\");\n+\t\t\tthrow new IllegalArgumentException(\"Argument beanModel must not be null\");\n \t\t}\n \t}\n ",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket-extensions/src/java/wicket/extensions/markup/html/beanedit/AbstractBeanPanel.java",
                "sha": "c229d99aa4d8f35c51085cd606c4e309df72e809",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket-extensions/src/java/wicket/extensions/markup/html/beanedit/BeanPanel.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-extensions/src/java/wicket/extensions/markup/html/beanedit/BeanPanel.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 2,
                "filename": "wicket-extensions/src/java/wicket/extensions/markup/html/beanedit/BeanPanel.java",
                "patch": "@@ -80,7 +80,7 @@ public BeanPanel(String id, BeanModel beanModel)\n \t\tPanel header = newHeader(\"header\", beanModel);\n \t\tif (header == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"header must be not null\");\n+\t\t\tthrow new IllegalArgumentException(\"Header must be not null\");\n \t\t}\n \t\tadd(header);\n \t\tadd(new PropertyList(\"propertiesList\", new BeanPropertiesListModel(beanModel)));\n@@ -278,7 +278,7 @@ protected void populateItem(ListItem item)\n \t\t\tPanel propertyEditor = newPropertyEditor(\"editor\", propertyMeta);\n \t\t\tif (propertyEditor == null)\n \t\t\t{\n-\t\t\t\tthrow new NullPointerException(\"propertyEditor must be not null\");\n+\t\t\t\tthrow new IllegalStateException(\"Value propertyEditor must be not null\");\n \t\t\t}\n \t\t\titem.add(propertyEditor);\n \t\t}",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket-extensions/src/java/wicket/extensions/markup/html/beanedit/BeanPanel.java",
                "sha": "78c29cb312c9db15f060895b2eec3c288d91da61",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket-extensions/src/java/wicket/extensions/markup/html/beanedit/PropertyEditorFactory.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-extensions/src/java/wicket/extensions/markup/html/beanedit/PropertyEditorFactory.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 2,
                "filename": "wicket-extensions/src/java/wicket/extensions/markup/html/beanedit/PropertyEditorFactory.java",
                "patch": "@@ -68,11 +68,11 @@ public final void set(Class c, IPropertyEditorFactory factory)\n \t{\n \t\tif (factory == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"argument factory may not be null\");\n+\t\t\tthrow new IllegalArgumentException(\"Argument factory may not be null\");\n \t\t}\n \t\tif (c == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"argument c (class) may not be null\");\n+\t\t\tthrow new IllegalArgumentException(\"Argument c (class) may not be null\");\n \t\t}\n \n \t\tIPropertyEditorFactory replaced =",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket-extensions/src/java/wicket/extensions/markup/html/beanedit/PropertyEditorFactory.java",
                "sha": "9a48581f76d9a045a2cb9aa9b1a363714f3b576b",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket-extensions/src/java/wicket/extensions/markup/html/beanedit/PropertyMeta.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-extensions/src/java/wicket/extensions/markup/html/beanedit/PropertyMeta.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 2,
                "filename": "wicket-extensions/src/java/wicket/extensions/markup/html/beanedit/PropertyMeta.java",
                "patch": "@@ -48,12 +48,12 @@ public PropertyMeta(final BeanModel beanModel, final PropertyDescriptor property\n \t{\n \t\tif (propertyDescriptor == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"argument propertyDescriptor may not be null\");\n+\t\t\tthrow new IllegalArgumentException(\"Argument propertyDescriptor may not be null\");\n \t\t}\n \n \t\tif (beanModel == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"argument beanModel may not be null\");\n+\t\t\tthrow new IllegalArgumentException(\"Argument beanModel may not be null\");\n \t\t}\n \n \t\tthis.beanModel = beanModel;",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket-extensions/src/java/wicket/extensions/markup/html/beanedit/PropertyMeta.java",
                "sha": "03b4611ae50d6b29290bd0aca0454b8255a007fc",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket-extensions/src/java/wicket/extensions/markup/html/datepicker/DatePicker.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-extensions/src/java/wicket/extensions/markup/html/datepicker/DatePicker.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 2,
                "filename": "wicket-extensions/src/java/wicket/extensions/markup/html/datepicker/DatePicker.java",
                "patch": "@@ -216,14 +216,14 @@ public DatePicker(final String id, final Component label, final Component target\n \n \t\tif (settings == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"settings must be non null when using this constructor\");\n+\t\t\tthrow new IllegalArgumentException(\"Settings must be non null when using this constructor\");\n \t\t}\n \n \t\tthis.settings = settings;\n \n \t\tif (target == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"targetTextField must be not null\");\n+\t\t\tthrow new IllegalArgumentException(\"Target must be not null\");\n \t\t}\n \n \t\ttarget.add(new PathAttributeModifier(\"id\", target));",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket-extensions/src/java/wicket/extensions/markup/html/datepicker/DatePicker.java",
                "sha": "ca180f52951268203800ada6c34984016b5897b0",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket-extensions/src/java/wicket/extensions/markup/html/image/resource/ThumbnailImageResource.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-extensions/src/java/wicket/extensions/markup/html/image/resource/ThumbnailImageResource.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 1,
                "filename": "wicket-extensions/src/java/wicket/extensions/markup/html/image/resource/ThumbnailImageResource.java",
                "patch": "@@ -72,7 +72,7 @@ public ThumbnailImageResource(WebResource unscaledImageResource, int maxSize)\n \t\tsuper();\n \t\tif (unscaledImageResource == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"unscaledImageResource must be not null\");\n+\t\t\tthrow new IllegalArgumentException(\"Argument unscaledImageResource must be not null\");\n \t\t}\n \t\tthis.unscaledImageResource = unscaledImageResource;\n \t\tthis.maxSize = maxSize;",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket-extensions/src/java/wicket/extensions/markup/html/image/resource/ThumbnailImageResource.java",
                "sha": "2a70c62256ef921e108f14579406a852bdd0b582",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/AjaxHandler.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/AjaxHandler.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/AjaxHandler.java",
                "patch": "@@ -303,7 +303,7 @@ public final void bind(Component hostComponent)\n \t{\n \t\tif (hostComponent == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"argument hostComponent must be not null\");\n+\t\t\tthrow new IllegalArgumentException(\"Argument hostComponent must be not null\");\n \t\t}\n \n \t\tif (this.component != null)",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/AjaxHandler.java",
                "sha": "877e1ca8f44a47cbd3b65a71ff626080738135f5",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/ApplicationPages.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/ApplicationPages.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 2,
                "filename": "wicket/src/java/wicket/ApplicationPages.java",
                "patch": "@@ -121,7 +121,7 @@ public final ApplicationPages setInternalErrorPage(final Class internalErrorPage\n \t{\n \t\tif (internalErrorPage == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"argument internalErrorPage may not be null\");\n+\t\t\tthrow new IllegalArgumentException(\"Argument internalErrorPage may not be null\");\n \t\t}\n \t\tcheckPageClass(internalErrorPage);\n \n@@ -141,7 +141,7 @@ public final ApplicationPages setPageExpiredErrorPage(final Class pageExpiredErr\n \t{\n \t\tif (pageExpiredErrorPage == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"argument pageExpiredErrorPage may not be null\");\n+\t\t\tthrow new IllegalArgumentException(\"Argument pageExpiredErrorPage may not be null\");\n \t\t}\n \t\tcheckPageClass(pageExpiredErrorPage);\n ",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/ApplicationPages.java",
                "sha": "db862e29fd66bcedae04dba7666163bb4d244e73",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/ApplicationSettings.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/ApplicationSettings.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 2,
                "filename": "wicket/src/java/wicket/ApplicationSettings.java",
                "patch": "@@ -932,9 +932,9 @@ public final ApplicationSettings setEncryptionKey(String encryptionKey)\n \t * Sets pageMapEvictionStrategy.\n \t * @param pageMapEvictionStrategy pageMapEvictionStrategy\n \t */\n-\tpublic final void setPageMapEvictionStrategy(IPageMapEvictionStrategy evictionStrategy)\n+\tpublic final void setPageMapEvictionStrategy(IPageMapEvictionStrategy pageMapEvictionStrategy)\n \t{\n-\t\tthis.pageMapEvictionStrategy = evictionStrategy;\n+\t\tthis.pageMapEvictionStrategy = pageMapEvictionStrategy;\n \t}\n \n \t/**",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/ApplicationSettings.java",
                "sha": "45efa7bd265a5600c31705d64b8c3ed7a1856ef8",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/Component.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/Component.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 2,
                "filename": "wicket/src/java/wicket/Component.java",
                "patch": "@@ -504,7 +504,7 @@ public final Component add(final IBehaviour behaviour)\n \t{\n \t\tif (behaviour == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"argument may not be null\");\n+\t\t\tthrow new IllegalArgumentException(\"Argument may not be null\");\n \t\t}\n \n \t\t// Lazy create\n@@ -1761,7 +1761,7 @@ public final String urlFor(final IBehaviourListener behaviourListener)\n \t{\n \t\tif (behaviourListener == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"argument behaviourListener must be not null\");\n+\t\t\tthrow new IllegalArgumentException(\"Argument behaviourListener must be not null\");\n \t\t}\n \n \t\tif (behaviours == null)",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/Component.java",
                "sha": "141440e0ab1b08870ddf558f7a978665c0d7cce7",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/Session.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/Session.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/Session.java",
                "patch": "@@ -195,7 +195,7 @@ public static void set(final Session session)\n \t{\n \t\tif (session == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"argument session must me not null\");\n+\t\t\tthrow new IllegalArgumentException(\"Argument session must me not null\");\n \t\t}\n \t\tCURRENT.set(session);\n \t}",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/Session.java",
                "sha": "b0413b86d49a18a9817f0dccd1741530edc3f4ab",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/markup/html/pages/BrowserInfoPage.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/markup/html/pages/BrowserInfoPage.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/markup/html/pages/BrowserInfoPage.java",
                "patch": "@@ -130,7 +130,7 @@ public BrowserInfoPage(final String continueTo)\n \t{\n \t\tif (continueTo == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"argument continueTo must be not null\");\n+\t\t\tthrow new IllegalArgumentException(\"Argument continueTo must be not null\");\n \t\t}\n \t\tsetContinueTo(continueTo);\n \t\tinitComps();",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/markup/html/pages/BrowserInfoPage.java",
                "sha": "0fd84909654047dc8015f3a433e35084f55df19a",
                "status": "modified"
            },
            {
                "additions": 65,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/markup/html/resources/PackagedResourceReference.java",
                "changes": 114,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/markup/html/resources/PackagedResourceReference.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 49,
                "filename": "wicket/src/java/wicket/markup/html/resources/PackagedResourceReference.java",
                "patch": "@@ -1,7 +1,6 @@\n /*\n  * $Id$\n- * $Revision$\n- * $Date$\n+ * $Revision$ $Date$\n  * \n  * ==============================================================================\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n@@ -22,59 +21,69 @@\n import wicket.AttributeModifier;\n import wicket.Component;\n import wicket.ResourceReference;\n-import wicket.WicketRuntimeException;\n import wicket.markup.html.PackageResourceReference;\n import wicket.markup.html.WebMarkupContainer;\n import wicket.model.IModel;\n import wicket.model.Model;\n \n /**\n  * Base class for components that render references to packaged resources.\n- *\n+ * \n  * @author Eelco Hillenius\n  */\n public class PackagedResourceReference extends WebMarkupContainer\n {\n \tprivate static final long serialVersionUID = 1L;\n+\n \t/**\n \t * Construct.\n-\t * @param id component id\n-\t * @param referer the class that is refering; is used as the relative\n-\t * root for gettting the resource\n-\t * @param file relative location of the packaged file\n-\t * @param attributeToReplace the attribute to replace of the target tag\n+\t * \n+\t * @param id\n+\t *            component id\n+\t * @param referer\n+\t *            the class that is refering; is used as the relative root for\n+\t *            gettting the resource\n+\t * @param file\n+\t *            relative location of the packaged file\n+\t * @param attributeToReplace\n+\t *            the attribute to replace of the target tag\n \t */\n-\tpublic PackagedResourceReference(final String id, final Class referer,\n-\t\t\tfinal String file, final String attributeToReplace)\n+\tpublic PackagedResourceReference(final String id, final Class referer, final String file,\n+\t\t\tfinal String attributeToReplace)\n \t{\n \t\tthis(id, referer, new Model(file), attributeToReplace);\n \t}\n \n \t/**\n \t * Construct.\n-\t * @param id component id\n-\t * @param referer the class that is refering; is used as the relative\n-\t * root for gettting the resource\n-\t * @param file model that supplies the relative location of the packaged file.\n-\t * \t\tMust return an instance of {@link String}\n-\t * @param attributeToReplace the attribute to replace of the target tag\n+\t * \n+\t * @param id\n+\t *            component id\n+\t * @param referer\n+\t *            the class that is refering; is used as the relative root for\n+\t *            gettting the resource\n+\t * @param file\n+\t *            model that supplies the relative location of the packaged\n+\t *            file. Must return an instance of {@link String}\n+\t * @param attributeToReplace\n+\t *            the attribute to replace of the target tag\n \t */\n-\tpublic PackagedResourceReference(final String id, final Class referer,\n-\t\t\tfinal IModel file, final String attributeToReplace)\n+\tpublic PackagedResourceReference(final String id, final Class referer, final IModel file,\n+\t\t\tfinal String attributeToReplace)\n \t{\n \t\tsuper(id);\n \n \t\tif (referer == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"referer may not be null\");\n+\t\t\tthrow new IllegalArgumentException(\"Referer may not be null\");\n \t\t}\n \t\tif (file == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"file may not be null\");\n+\t\t\tthrow new IllegalArgumentException(\"File may not be null\");\n \t\t}\n \t\tif (attributeToReplace == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"attributeToReplace may not be null\");\n+\t\t\tthrow new IllegalArgumentException(\"AttributeToReplace may not be null\");\n \t\t}\n \n \t\tIModel srcReplacement = new Model()\n@@ -86,18 +95,19 @@ public Object getObject(Component component)\n \t\t\t\tObject o = file.getObject(component);\n \t\t\t\tif (o == null)\n \t\t\t\t{\n-\t\t\t\t\tthrow new NullPointerException(\n-\t\t\t\t\t\t\t\"the model must provide a non-null object (component == \" +\n-\t\t\t\t\t\t\tcomponent + \")\");\n+\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\"The model must provide a non-null object (component == \" + component\n+\t\t\t\t\t\t\t\t\t+ \")\");\n \t\t\t\t}\n \t\t\t\tif (!(o instanceof String))\n \t\t\t\t{\n-\t\t\t\t\tthrow new WicketRuntimeException(\n-\t\t\t\t\t\t\t\"the model must provide an instance of String\");\n+\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\"The model must provide an instance of String\");\n \t\t\t\t}\n-\t\t\t\tString f = (String)component.getConverter().convert(\n-\t\t\t\t\t\t\tfile.getObject(component), String.class);\t\n-\t\t\t\tPackageResourceReference ref = new PackageResourceReference(Application.get(), referer, f);\n+\t\t\t\tString f = (String)component.getConverter().convert(file.getObject(component),\n+\t\t\t\t\t\tString.class);\n+\t\t\t\tPackageResourceReference ref = new PackageResourceReference(Application.get(),\n+\t\t\t\t\t\treferer, f);\n \t\t\t\tString url = getPage().urlFor(ref.getPath());\n \t\t\t\treturn url;\n \t\t\t}\n@@ -107,37 +117,43 @@ public Object getObject(Component component)\n \n \t/**\n \t * Construct.\n-\t * @param id component id\n-\t * @param resourceReference the reference to the resource\n-\t * @param attributeToReplace the attribute to replace of the target tag\n+\t * \n+\t * @param id\n+\t *            component id\n+\t * @param resourceReference\n+\t *            the reference to the resource\n+\t * @param attributeToReplace\n+\t *            the attribute to replace of the target tag\n \t */\n-\tpublic PackagedResourceReference(final String id,\n-\t\t\tfinal ResourceReference resourceReference,\n+\tpublic PackagedResourceReference(final String id, final ResourceReference resourceReference,\n \t\t\tfinal String attributeToReplace)\n \t{\n \t\tthis(id, new Model(resourceReference), attributeToReplace);\n \t}\n \n \t/**\n \t * Construct.\n-\t * @param id component id\n-\t * @param resourceReference the reference to the resource.\n-\t * \t\tMust return an instance of {@link ResourceReference}\n-\t * @param attributeToReplace the attribute to replace of the target tag\n+\t * \n+\t * @param id\n+\t *            component id\n+\t * @param resourceReference\n+\t *            the reference to the resource. Must return an instance of\n+\t *            {@link ResourceReference}\n+\t * @param attributeToReplace\n+\t *            the attribute to replace of the target tag\n \t */\n-\tpublic PackagedResourceReference(final String id,\n-\t\t\tfinal IModel resourceReference,\n+\tpublic PackagedResourceReference(final String id, final IModel resourceReference,\n \t\t\tfinal String attributeToReplace)\n \t{\n \t\tsuper(id);\n \n \t\tif (resourceReference == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"resourceReference may not be null\");\n+\t\t\tthrow new IllegalArgumentException(\"ResourceReference may not be null\");\n \t\t}\n \t\tif (attributeToReplace == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"attributeToReplace may not be null\");\n+\t\t\tthrow new IllegalArgumentException(\"AttributeToReplace may not be null\");\n \t\t}\n \n \t\tIModel srcReplacement = new Model()\n@@ -149,16 +165,16 @@ public Object getObject(Component component)\n \t\t\t\tObject o = resourceReference.getObject(component);\n \t\t\t\tif (o == null)\n \t\t\t\t{\n-\t\t\t\t\tthrow new NullPointerException(\n-\t\t\t\t\t\t\t\"the model must provide a non-null object (component == \" +\n-\t\t\t\t\t\t\tcomponent + \")\");\n+\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\"The model must provide a non-null object (component == \" + component\n+\t\t\t\t\t\t\t\t\t+ \")\");\n \t\t\t\t}\n \t\t\t\tif (!(o instanceof ResourceReference))\n \t\t\t\t{\n-\t\t\t\t\tthrow new WicketRuntimeException(\n-\t\t\t\t\t\t\t\"the model must provide an instance of ResourceReference\");\n+\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\"The model must provide an instance of ResourceReference\");\n \t\t\t\t}\n-\t\t\t\t\n+\n \t\t\t\tResourceReference ref = (ResourceReference)o;\n \t\t\t\tString url = getPage().urlFor(ref.getPath());\n \t\t\t\treturn url;",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/markup/html/resources/PackagedResourceReference.java",
                "sha": "f806eae1100dbb6a8d39fb90710290b8affe6215",
                "status": "modified"
            },
            {
                "additions": 67,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/protocol/http/WebApplication.java",
                "changes": 97,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/protocol/http/WebApplication.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 30,
                "filename": "wicket/src/java/wicket/protocol/http/WebApplication.java",
                "patch": "@@ -1,6 +1,6 @@\n /*\n- * $Id$ $Revision:\n- * 1.64 $ $Date$\n+ * $Id$\n+ * $Revision$ $Date$\n  * \n  * ==============================================================================\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n@@ -45,6 +45,7 @@\n import wicket.util.collections.MostRecentlyUsedMap;\n import wicket.util.file.IResourceFinder;\n import wicket.util.file.WebApplicationPath;\n+import wicket.util.lang.PackageName;\n \n \n /**\n@@ -64,13 +65,27 @@\n  * init() method. For example:\n  * \n  * <pre>\n- *                                      \n- *        public void init()\n- *        {\n- *          \tString webXMLParameter = getWicketServlet().getInitParameter(&quot;myWebXMLParameter&quot;);\n- *           URL schedulersConfig = getWicketServlet().getServletContext().getResource(&quot;/WEB-INF/schedulers.xml&quot;);\n- *           ...\n+ * \n+ *  \n+ *   \n+ *    \n+ *     \n+ *      \n+ *       \n+ *                                             \n+ *               public void init()\n+ *               {\n+ *                 \tString webXMLParameter = getWicketServlet().getInitParameter(&quot;myWebXMLParameter&quot;);\n+ *                  URL schedulersConfig = getWicketServlet().getServletContext().getResource(&quot;/WEB-INF/schedulers.xml&quot;);\n+ *                  ...\n+ *            \n+ *        \n+ *       \n+ *      \n  *     \n+ *    \n+ *   \n+ *  \n  * </pre>\n  * \n  * @see WicketServlet\n@@ -201,12 +216,53 @@ public final void mount(String path, IRequestTargetEncoderDecoder encoder)\n \n \t\tif (encoder == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"encoder must be not null\");\n+\t\t\tthrow new IllegalArgumentException(\"Encoder must be not null\");\n \t\t}\n \n \t\tgetDefaultRequestCycleProcessor().getRequestEncoder().mount(path, encoder);\n \t}\n \n+\t/**\n+\t * Mounts all bookmarkable pages in a given package.\n+\t * \n+\t * @param path\n+\t *            The path to mount at\n+\t * @param p\n+\t *            The package for which all bookmarkable pages or\n+\t *            sharedresources should be mounted\n+\t */\n+\tpublic final void mount(String path, Package p)\n+\t{\n+\t\tif (p == null)\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\"Null Package argument not allowed.  \"\n+\t\t\t\t\t+ \"If you called Class.getPackage() and it returned null, \"\n+\t\t\t\t\t+ \"there may be no Package object for the given class!  \"\n+\t\t\t\t\t+ \"You can instead call mount(path, PackageName), passing \"\n+\t\t\t\t\t+ \"in wicket.util.lang.PackageName.forClass(c)\");\n+\t\t}\n+\t\tmount(path, PackageName.forPackage(p));\n+\t}\n+\n+\t/**\n+\t * Mounts all bookmarkable pages at the given path.\n+\t * \n+\t * @param path\n+\t *            the path to mount the bookmarkable page class on\n+\t * @param packageName\n+\t *            the name of the package for which all bookmarkable pages or\n+\t *            sharedresources should be mounted\n+\t */\n+\tpublic final void mount(String path, PackageName packageName)\n+\t{\n+\t\tcheckMountPath(path);\n+\t\tif (packageName == null)\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\"PackageName cannot be null\");\n+\t\t}\n+\t\tmount(path, new PackageRequestTargetEncoderDecoder(path, packageName));\n+\t}\n+\n \t/**\n \t * Mounts a bookmarkable page class to the given path.\n \t * \n@@ -218,7 +274,8 @@ public final void mount(String path, IRequestTargetEncoderDecoder encoder)\n \tpublic final void mountBookmarkablePage(String path, Class bookmarkablePageClass)\n \t{\n \t\tcheckMountPath(path);\n-\t\tmount(path, new BookmarkablePageRequestTargetEncoderDecoder(path, bookmarkablePageClass, null));\n+\t\tmount(path, new BookmarkablePageRequestTargetEncoderDecoder(path, bookmarkablePageClass,\n+\t\t\t\tnull));\n \t}\n \n \t/**\n@@ -239,26 +296,6 @@ public final void mountBookmarkablePage(String path, Class bookmarkablePageClass\n \t\t\t\tpageMapName));\n \t}\n \n-\t/**\n-\t * Mounts all bookmarkable pages at the given path.\n-\t * \n-\t * @param path\n-\t *            the path to mount the bookmarkable page class on\n-\t * @param classOfPackageToMount\n-\t *            the class for which package of which all bookmarkable pages or\n-\t *            sharedresources should be mounted\n-\t */\n-\tpublic final void mountPackage(String path, Class classOfPackageToMount)\n-\t{\n-\t\tcheckMountPath(path);\n-\n-\t\tif (classOfPackageToMount == null)\n-\t\t{\n-\t\t\tthrow new NullPointerException(\"class for mounting a package can't be null\");\n-\t\t}\n-\t\tmount(path, new PackageRequestTargetEncoderDecoder(path, classOfPackageToMount));\n-\t}\n-\n \t/**\n \t * @param sessionFactory\n \t *            The session factory to use",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/protocol/http/WebApplication.java",
                "sha": "e29926f95d05c18332091caa1920cf43734927dc",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/protocol/http/request/WebExternalResourceRequestTarget.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/protocol/http/request/WebExternalResourceRequestTarget.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/protocol/http/request/WebExternalResourceRequestTarget.java",
                "patch": "@@ -60,7 +60,7 @@ public WebExternalResourceRequestTarget(String url)\n \t{\n \t\tif (url == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"argument url must be not null\");\n+\t\t\tthrow new IllegalArgumentException(\"Argument url must be not null\");\n \t\t}\n \n \t\tthis.url = url;",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/protocol/http/request/WebExternalResourceRequestTarget.java",
                "sha": "b69e0cc6f274b8ce947cacfc6ce0d9b031f14d5a",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/protocol/http/request/WebRequestEncoder.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/protocol/http/request/WebRequestEncoder.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 4,
                "filename": "wicket/src/java/wicket/protocol/http/request/WebRequestEncoder.java",
                "patch": "@@ -105,7 +105,8 @@ else if (o2 == null)\n \t * match the longest possible path first.\n \t * </p>\n \t */\n-\tprivate SortedMap/* <String,IRequestTargetEncoderDecoder> */mountsOnPath = new TreeMap(lengthComparator);\n+\tprivate SortedMap/* <String,IRequestTargetEncoderDecoder> */mountsOnPath = new TreeMap(\n+\t\t\tlengthComparator);\n \n \t/** cached url prefix. */\n \tprivate String urlPrefix;\n@@ -210,12 +211,12 @@ public final void mount(String path, IRequestTargetEncoderDecoder encoder)\n \t{\n \t\tif (path == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"argument path must be not-null\");\n+\t\t\tthrow new IllegalArgumentException(\"Argument path must be not-null\");\n \t\t}\n \n \t\tif (encoder == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"argument encoder must be not-null\");\n+\t\t\tthrow new IllegalArgumentException(\"Argument encoder must be not-null\");\n \t\t}\n \n \t\t// sanity check\n@@ -262,7 +263,7 @@ public final void unmount(String path)\n \t{\n \t\tif (path == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"argument path must be not-null\");\n+\t\t\tthrow new IllegalArgumentException(\"Argument path must be not-null\");\n \t\t}\n \n \t\t// sanity check",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/protocol/http/request/WebRequestEncoder.java",
                "sha": "b1df4ab42dd164391ee48d13620dd3b111582ea2",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/request/target/AbstractListenerInterfaceRequestTarget.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/request/target/AbstractListenerInterfaceRequestTarget.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 4,
                "filename": "wicket/src/java/wicket/request/target/AbstractListenerInterfaceRequestTarget.java",
                "patch": "@@ -84,14 +84,14 @@ public AbstractListenerInterfaceRequestTarget(Page page, Component component,\n \n \t\tif (component == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"argument component must be not null\");\n+\t\t\tthrow new IllegalArgumentException(\"Argument component must be not null\");\n \t\t}\n \n \t\tthis.component = component;\n \n \t\tif (listenerMethod == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"argument listenerMethod must be not null\");\n+\t\t\tthrow new IllegalArgumentException(\"Argument listenerMethod must be not null\");\n \t\t}\n \n \t\tthis.listenerMethod = listenerMethod;\n@@ -164,8 +164,8 @@ public int hashCode()\n \tpublic String toString()\n \t{\n \t\tStringBuffer b = new StringBuffer(getClass().getName()).append(\"@\").append(hashCode())\n-\t\t\t\t.append(getPage().toString()).append(\"->\").append(getTarget().getId()).append(\n-\t\t\t\t\t\t\"->\").append(getListenerMethod().getDeclaringClass()).append(\".\").append(\n+\t\t\t\t.append(getPage().toString()).append(\"->\").append(getTarget().getId()).append(\"->\")\n+\t\t\t\t.append(getListenerMethod().getDeclaringClass()).append(\".\").append(\n \t\t\t\t\t\tgetListenerMethod().getName());\n \t\tif (getBehaviourId() != null)\n \t\t{",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/request/target/AbstractListenerInterfaceRequestTarget.java",
                "sha": "774dcd69fba28d3538f27c3adc04d22ab9b6249d",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/request/target/BookmarkablePageRequestTarget.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/request/target/BookmarkablePageRequestTarget.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 2,
                "filename": "wicket/src/java/wicket/request/target/BookmarkablePageRequestTarget.java",
                "patch": "@@ -103,12 +103,12 @@ public BookmarkablePageRequestTarget(String pageMapName, Class pageClass,\n \t{\n \t\tif (pageClass == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"argument pageClass must be not null\");\n+\t\t\tthrow new IllegalArgumentException(\"Argument pageClass must be not null\");\n \t\t}\n \n \t\tif (!Page.class.isAssignableFrom(pageClass))\n \t\t{\n-\t\t\tthrow new IllegalArgumentException(\"pageClass must be an instance of \"\n+\t\t\tthrow new IllegalArgumentException(\"Argument pageClass must be an instance of \"\n \t\t\t\t\t+ Page.class.getName());\n \t\t}\n \t\tthis.pageClass = pageClass;",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/request/target/BookmarkablePageRequestTarget.java",
                "sha": "01f54e1317d9cf882034b645fed79e34b245488e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/request/target/ComponentRequestTarget.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/request/target/ComponentRequestTarget.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/request/target/ComponentRequestTarget.java",
                "patch": "@@ -43,7 +43,7 @@ public ComponentRequestTarget(final Component component)\n \t{\n \t\tif (component == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"Argument 'component' must be not null\");\n+\t\t\tthrow new IllegalArgumentException(\"Argument 'component' must be not null\");\n \t\t}\n \n \t\tthis.component = component;",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/request/target/ComponentRequestTarget.java",
                "sha": "2eb4b75d4b1d74a3696471647d54878f7f7191d8",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/request/target/PageRequestTarget.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/request/target/PageRequestTarget.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/request/target/PageRequestTarget.java",
                "patch": "@@ -46,7 +46,7 @@ public PageRequestTarget(Page page)\n \t{\n \t\tif (page == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"argument page must be not null\");\n+\t\t\tthrow new IllegalArgumentException(\"Argument page must be not null\");\n \t\t}\n \n \t\tthis.page = page;",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/request/target/PageRequestTarget.java",
                "sha": "3bd73b61d36bbc3c7b831ff61d35a4a333c71112",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/request/target/ResourceStreamRequestTarget.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/request/target/ResourceStreamRequestTarget.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 2,
                "filename": "wicket/src/java/wicket/request/target/ResourceStreamRequestTarget.java",
                "patch": "@@ -51,12 +51,12 @@ public ResourceStreamRequestTarget(IResourceStream resourceStream, String respon\n \t{\n \t\tif (resourceStream == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"argument resourceStream must be not null\");\n+\t\t\tthrow new IllegalArgumentException(\"Argument resourceStream must be not null\");\n \t\t}\n \n \t\tif (responseType == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"argument responseType must be not null\");\n+\t\t\tthrow new IllegalArgumentException(\"Argument responseType must be not null\");\n \t\t}\n \n \t\tthis.resourceStream = resourceStream;",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/request/target/ResourceStreamRequestTarget.java",
                "sha": "75c233f49f51046481d7a467c81e796c81b225bf",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/request/target/SharedResourceRequestTarget.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/request/target/SharedResourceRequestTarget.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/request/target/SharedResourceRequestTarget.java",
                "patch": "@@ -44,7 +44,7 @@ public SharedResourceRequestTarget(String resourceKey)\n \t{\n \t\tif (resourceKey == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"argument resourceKey must be not-null\");\n+\t\t\tthrow new IllegalArgumentException(\"Argument resourceKey must be not-null\");\n \t\t}\n \n \t\tthis.resourceKey = resourceKey;",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/request/target/SharedResourceRequestTarget.java",
                "sha": "37be1335878b1fb70d215424a01bdd50d613391d",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/request/target/StringRequestTarget.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/request/target/StringRequestTarget.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/request/target/StringRequestTarget.java",
                "patch": "@@ -46,7 +46,7 @@ public StringRequestTarget(String string)\n \t{\n \t\tif (string == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"argument string must be not null\");\n+\t\t\tthrow new IllegalArgumentException(\"Argument string must be not null\");\n \t\t}\n \n \t\tthis.string = string;",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/request/target/StringRequestTarget.java",
                "sha": "3d2a56c0b042a3a69c21d249cb99feff5c1f07c7",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/request/target/mixin/AbstractRequestTargetEncoderDecoder.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/request/target/mixin/AbstractRequestTargetEncoderDecoder.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/request/target/mixin/AbstractRequestTargetEncoderDecoder.java",
                "patch": "@@ -43,7 +43,7 @@ public AbstractRequestTargetEncoderDecoder(final String mountPath)\n \t{\n \t\tif (mountPath == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"argument mountPath must be not null\");\n+\t\t\tthrow new IllegalArgumentException(\"Argument mountPath must be not null\");\n \t\t}\n \n \t\tthis.mountPath = mountPath;",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/request/target/mixin/AbstractRequestTargetEncoderDecoder.java",
                "sha": "5bb31b43689b33006c3c01b4e0581f8134302062",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/request/target/mixin/BookmarkablePageRequestTargetEncoderDecoder.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/request/target/mixin/BookmarkablePageRequestTargetEncoderDecoder.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/request/target/mixin/BookmarkablePageRequestTargetEncoderDecoder.java",
                "patch": "@@ -52,7 +52,7 @@ public BookmarkablePageRequestTargetEncoderDecoder(final String mountPath,\n \n \t\tif (bookmarkablePageClass == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"argument bookmarkablePageClass must be not null\");\n+\t\t\tthrow new IllegalArgumentException(\"Argument bookmarkablePageClass must be not null\");\n \t\t}\n \n \t\tthis.bookmarkablePageClass = bookmarkablePageClass;",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/request/target/mixin/BookmarkablePageRequestTargetEncoderDecoder.java",
                "sha": "765996c65d99efe9fdd9ef309c3e90fd7f6bac5e",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/request/target/mixin/PackageRequestTargetEncoderDecoder.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/request/target/mixin/PackageRequestTargetEncoderDecoder.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 22,
                "filename": "wicket/src/java/wicket/request/target/mixin/PackageRequestTargetEncoderDecoder.java",
                "patch": "@@ -1,6 +1,6 @@\n /*\n- * $Id: BookmarkablePageRequestTargetEncoderDecoder.java,v 1.1 2005/12/10 21:28:56 eelco12\n- * Exp $ $Revision$ $Date$\n+ * $Id: BookmarkablePageRequestTargetEncoderDecoder.java,v 1.1 2005/12/10\n+ * 21:28:56 eelco12 Exp $ $Revision$ $Date$\n  * \n  * ==============================================================================\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n@@ -23,6 +23,7 @@\n import wicket.request.IBookmarkablePageRequestTarget;\n import wicket.request.target.BookmarkablePageRequestTarget;\n import wicket.util.lang.Classes;\n+import wicket.util.lang.PackageName;\n \n /**\n  * Encodes and decodes mounts for a whole package.\n@@ -32,20 +33,20 @@\n public class PackageRequestTargetEncoderDecoder extends AbstractRequestTargetEncoderDecoder\n {\n \t/** package for this mount. */\n-\tprivate final String mountedPackageName;\n+\tprivate final PackageName packageName;\n \n \t/**\n \t * Construct.\n \t * \n-\t * @param mountPath\n+\t * @param path\n \t *            the mount path\n-\t * @param classOfPackageToMount\n-\t *            class from which the package name must be extracted for this mount\n+\t * @param packageName\n+\t *            The name of the package to mount\n \t */\n-\tpublic PackageRequestTargetEncoderDecoder(final String mountPath, Class classOfPackageToMount)\n+\tpublic PackageRequestTargetEncoderDecoder(final String path, PackageName packageName)\n \t{\n-\t\tsuper(mountPath);\n-\t\tmountedPackageName = getPackageName(classOfPackageToMount);\n+\t\tsuper(path);\n+\t\tthis.packageName = packageName;\n \t}\n \n \t/**\n@@ -65,7 +66,7 @@ public IRequestTarget decode(String urlFragment)\n \t\t{\n \t\t\tparametersFragment = remainder.substring(ix);\n \t\t}\n-\t\tfinal String bookmarkablePageClassName = mountedPackageName + remainder.substring(1, ix);\n+\t\tfinal String bookmarkablePageClassName = packageName + remainder.substring(1, ix);\n \t\tClass bookmarkablePageClass = Session.get().getClassResolver().resolveClass(\n \t\t\t\tbookmarkablePageClassName);\n \t\tPageParameters parameters = decodePageParameters(parametersFragment);\n@@ -100,22 +101,11 @@ public boolean matches(IRequestTarget requestTarget)\n \t\tif (requestTarget instanceof IBookmarkablePageRequestTarget)\n \t\t{\n \t\t\tIBookmarkablePageRequestTarget target = (IBookmarkablePageRequestTarget)requestTarget;\n-\t\t\tif ( mountedPackageName.equals(getPackageName(target.getPageClass())) )\n+\t\t\tif (packageName.equals(PackageName.forClass(target.getPageClass())))\n \t\t\t{\n \t\t\t\treturn true;\n \t\t\t}\n \t\t}\n \t\treturn false;\n \t}\n-\n-\tprivate String getPackageName(Class classOfPackageToMount)\n-\t{\n-\t\tString className = classOfPackageToMount.getName();\n-\t\tint index = className.lastIndexOf(\".\");\n-\t\tif(index != -1)\n-\t\t{\n-\t\t\treturn className.substring(0,index+1); // including '.';\n-\t\t}\n-\t\treturn \"\";\n-\t}\n }",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/request/target/mixin/PackageRequestTargetEncoderDecoder.java",
                "sha": "6516185c3f8fac01aa9c4bf9ea85d376e4511949",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/util/concurrent/ConcurrentHashMap.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/util/concurrent/ConcurrentHashMap.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 6,
                "filename": "wicket/src/java/wicket/util/concurrent/ConcurrentHashMap.java",
                "patch": "@@ -535,8 +535,9 @@ public boolean containsKey(Object key)\n \tpublic Object put(Object key, Object value)\n \t{\n \t\tif (value == null)\n-\t\t\tthrow new NullPointerException();\n-\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\"Value must not be null\");\n+\t\t}\n \t\tint hash = hash(key);\n \t\tSegment seg = segments[hash & SEGMENT_MASK];\n \t\tint segcount;\n@@ -779,10 +780,10 @@ protected Object remove(Object key, Object value)\n \t */\n \tpublic boolean containsValue(Object value)\n \t{\n-\n \t\tif (value == null)\n-\t\t\tthrow new NullPointerException();\n-\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\"Value must not be null\");\n+\t\t}\n \t\tfor (int s = 0; s < segments.length; ++s)\n \t\t{\n \t\t\tSegment seg = segments[s];\n@@ -1202,7 +1203,9 @@ public Object getValue()\n \t\tpublic Object setValue(Object value)\n \t\t{\n \t\t\tif (value == null)\n-\t\t\t\tthrow new NullPointerException();\n+\t\t\t{\n+\t\t\t\tthrow new IllegalArgumentException(\"Value must not be null\");\n+\t\t\t}\n \t\t\tObject oldValue = this.value;\n \t\t\tthis.value = value;\n \t\t\treturn oldValue;",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/util/concurrent/ConcurrentHashMap.java",
                "sha": "b781bd08134f5ea21332e6148fb07b8c63689713",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/util/concurrent/ConcurrentReaderHashMap.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/util/concurrent/ConcurrentReaderHashMap.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 5,
                "filename": "wicket/src/java/wicket/util/concurrent/ConcurrentReaderHashMap.java",
                "patch": "@@ -502,8 +502,9 @@ public boolean containsKey(Object key)\n \tpublic Object put(Object key, Object value)\n \t{\n \t\tif (value == null)\n-\t\t\tthrow new NullPointerException();\n-\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\"Value must not be null\");\n+\t\t}\n \t\tint hash = hash(key);\n \t\tEntry[] tab = table;\n \t\tint index = hash & (tab.length - 1);\n@@ -775,8 +776,10 @@ protected Object sremove(Object key, int hash)\n \tpublic boolean containsValue(Object value)\n \t{\n \t\tif (value == null)\n-\t\t\tthrow new NullPointerException();\n-\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\"Value must not be null\");\n+\t\t}\n+\t\t\n \t\tEntry tab[] = getTableForReading();\n \n \t\tfor (int i = 0; i < tab.length; ++i)\n@@ -1210,7 +1213,10 @@ public Object getValue()\n \t\tpublic Object setValue(Object value)\n \t\t{\n \t\t\tif (value == null)\n-\t\t\t\tthrow new NullPointerException();\n+\t\t\t{\n+\t\t\t\tthrow new IllegalArgumentException(\"Value must not be null\");\n+\t\t\t}\n+\t\t\t\n \t\t\tObject oldValue = this.value;\n \t\t\tthis.value = value;\n \t\t\treturn oldValue;",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/util/concurrent/ConcurrentReaderHashMap.java",
                "sha": "8f0f7551f02ff8e382b1d00bdbbcd1ac78ff83b3",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/util/convert/Converter.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/util/convert/Converter.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 3,
                "filename": "wicket/src/java/wicket/util/convert/Converter.java",
                "patch": "@@ -175,7 +175,7 @@ public Object convert(Object value, Class c)\n \t\t// Class cannot be null\n \t\tif (c == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"Class cannot be null\");\n+\t\t\tthrow new IllegalArgumentException(\"Class cannot be null\");\n \t\t}\n \n \t\t// Catch all cases where value is already the right type\n@@ -263,11 +263,11 @@ public ITypeConverter set(final Class c, final ITypeConverter converter)\n \t{\n \t\tif (converter == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"Converter cannot be null\");\n+\t\t\tthrow new IllegalArgumentException(\"Converter cannot be null\");\n \t\t}\n \t\tif (c == null)\n \t\t{\n-\t\t\tthrow new NullPointerException(\"Class cannot be null\");\n+\t\t\tthrow new IllegalArgumentException(\"Class cannot be null\");\n \t\t}\n \t\treturn (ITypeConverter)classToConverter.put(c, converter);\n \t}",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/util/convert/Converter.java",
                "sha": "f48a3febeb1ce24c7fdaf1aef63902d14b7dc5c6",
                "status": "modified"
            },
            {
                "additions": 90,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/util/lang/PackageName.java",
                "changes": 90,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/util/lang/PackageName.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 0,
                "filename": "wicket/src/java/wicket/util/lang/PackageName.java",
                "patch": "@@ -0,0 +1,90 @@\n+/*\n+ * $Id$ $Revision$\n+ * $Date$\n+ * \n+ * ==============================================================================\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package wicket.util.lang;\n+\n+/**\n+ * A type-safe package name class since Package is unreliable (it's not a\n+ * Package object, but rather a sometimes-available holder for versioning\n+ * information).\n+ * \n+ * @author Jonathan Locke\n+ */\n+public class PackageName\n+{\n+\t// The name of this package\n+\tprivate final String name;\n+\n+\t/**\n+\t * @param c\n+\t *            The class to get a PackageName object for\n+\t * @return The PackageName object\n+\t */\n+\tpublic static PackageName forClass(final Class c)\n+\t{\n+\t\treturn new PackageName(Packages.extractPackageName(c));\n+\t}\n+\n+\t/**\n+\t * @param p\n+\t *            The package to get a PackageName object for\n+\t * @return The package name\n+\t */\n+\tpublic static PackageName forPackage(final Package p)\n+\t{\n+\t\treturn new PackageName(p.getName());\n+\t}\n+\n+\t/**\n+\t * Constructor\n+\t * \n+\t * @param name\n+\t *            The name of this package\n+\t */\n+\tprivate PackageName(final String name)\n+\t{\n+\t\tthis.name = name;\n+\t}\n+\n+\t/**\n+\t * @see java.lang.Object#equals(java.lang.Object)\n+\t */\n+\tpublic boolean equals(Object that)\n+\t{\n+\t\tif (that instanceof PackageName)\n+\t\t{\n+\t\t\treturn ((PackageName)that).name.equals(this.name);\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * @return The fully qualified name of this package\n+\t */\n+\tpublic String getName()\n+\t{\n+\t\treturn name;\n+\t}\n+\n+\t/**\n+\t * @see java.lang.Object#toString()\n+\t */\n+\tpublic String toString()\n+\t{\n+\t\treturn name;\n+\t}\n+}",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/util/lang/PackageName.java",
                "sha": "afd8ce991f1df3b50e515160d451c5dc4e60bb6d",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/wicket/blob/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/util/upload/FileUploadBase.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/util/upload/FileUploadBase.java?ref=ee868b494942a75ab1b2f6e1f45fdba019cf270e",
                "deletions": 2,
                "filename": "wicket/src/java/wicket/util/upload/FileUploadBase.java",
                "patch": "@@ -226,8 +226,9 @@ public void setHeaderEncoding(String encoding) {\n      */\n     public List /* FileItem */ parseRequest(RequestContext ctx)\n             throws FileUploadException {\n-        if (ctx == null) {\n-            throw new NullPointerException(\"ctx parameter\");\n+        if (ctx == null) \n+        {\n+            throw new IllegalArgumentException(\"ctx parameter cannot be null\");\n         }\n \n         ArrayList items = new ArrayList();",
                "raw_url": "https://github.com/apache/wicket/raw/ee868b494942a75ab1b2f6e1f45fdba019cf270e/wicket/src/java/wicket/util/upload/FileUploadBase.java",
                "sha": "9941e161ec0ce9f2280906652d3b51e0889b7d85",
                "status": "modified"
            }
        ],
        "message": "Straightened out Package mounting mess and converted NullPointerExceptions (which only the VM should ever throw when a null reference is dereferenced!) into IllegalArgument and IllegalState exceptions, as appropriate.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@458405 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/4ed7a7f56104a9f11b33aae98f5540db95f6f501",
        "patched_files": [
            "Session.java",
            "ApplicationSettings.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "ApplicationSettingsTest.java",
            "TestSession.java"
        ]
    },
    "wicket_f2adf1c": {
        "bug_id": "wicket_f2adf1c",
        "commit": "https://github.com/apache/wicket/commit/f2adf1c86369638ad5bb465c00924fec0428cfae",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/f2adf1c86369638ad5bb465c00924fec0428cfae/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/INamedParameters.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/INamedParameters.java?ref=f2adf1c86369638ad5bb465c00924fec0428cfae",
                "deletions": 1,
                "filename": "wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/INamedParameters.java",
                "patch": "@@ -59,7 +59,7 @@\n \t * @author Matej Knopp\r\n \t */\r\n \t@SuppressWarnings(\"serial\")\r\n-\tpublic static class NamedPair implements IClusterable\r\n+\tclass NamedPair implements IClusterable\r\n \t{\r\n \t\tprivate final String key;\r\n \t\tprivate final String value;\r",
                "raw_url": "https://github.com/apache/wicket/raw/f2adf1c86369638ad5bb465c00924fec0428cfae/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/INamedParameters.java",
                "sha": "000e34f8731abdb16387e78b596f4e25c48e2ffe",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/f2adf1c86369638ad5bb465c00924fec0428cfae/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParameters.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParameters.java?ref=f2adf1c86369638ad5bb465c00924fec0428cfae",
                "deletions": 0,
                "filename": "wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParameters.java",
                "patch": "@@ -467,6 +467,8 @@ else if (!indexedParameters.equals(other.indexedParameters))\n \t\t\tif (other.namedParameters != null)\n \t\t\t\treturn false;\n \t\t}\n+\t\telse if (other.namedParameters == null)\n+\t\t\treturn false;\n \t\telse if (!CollectionUtils.isEqualCollection(namedParameters, other.namedParameters))\n \t\t\treturn false;\n \t\treturn true;",
                "raw_url": "https://github.com/apache/wicket/raw/f2adf1c86369638ad5bb465c00924fec0428cfae/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParameters.java",
                "sha": "c985dcbc7db2466013a180e80c64b20d56c61738",
                "status": "modified"
            },
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/wicket/blob/f2adf1c86369638ad5bb465c00924fec0428cfae/wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersTest.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersTest.java?ref=f2adf1c86369638ad5bb465c00924fec0428cfae",
                "deletions": 1,
                "filename": "wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersTest.java",
                "patch": "@@ -18,6 +18,7 @@\n \n import static org.hamcrest.CoreMatchers.equalTo;\n import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.not;\n \n import java.util.List;\n \n@@ -300,7 +301,7 @@ public void equality()\n \t * https://issues.apache.org/jira/browse/WICKET-6283\n \t */\n \t@Test\n-\tpublic void equalityOfDiferenteNamedParametersOrder()\n+\tpublic void equalityOfDifferentNamedParametersOrder()\n \t{\n \t\tPageParameters p1 = new PageParameters()\n \t\t\t\t.add(\"a\", \"b\")\n@@ -313,6 +314,38 @@ public void equalityOfDiferenteNamedParametersOrder()\n \t\tassertThat(p1, is(equalTo(p2)));\n \t}\n \n+\t/**\n+\t * namedParameters equality should handle null namedParameters instance.\n+\t *\n+\t * https://issues.apache.org/jira/browse/WICKET-6332\n+\t */\n+\t@Test\n+\tpublic void equalityWithEmptyNamedParameters()\n+\t{\n+\t\tPageParameters p1 = new PageParameters()\n+\t\t\t\t.add(\"a\", \"b\");\n+\n+\t\tPageParameters p2 = new PageParameters();\n+\n+\t\tassertThat(p1, is(not(equalTo(p2))));\n+\t}\n+\n+\t/**\n+\t * indexedParameters equality should handle null namedParameters instance.\n+\t *\n+\t * https://issues.apache.org/jira/browse/WICKET-6332\n+\t */\n+\t@Test\n+\tpublic void equalityWithEmptyIndexedParameters()\n+\t{\n+\t\tPageParameters p1 = new PageParameters()\n+\t\t\t\t.set(0, \"b\");\n+\n+\t\tPageParameters p2 = new PageParameters();\n+\n+\t\tassertThat(p1, is(not(equalTo(p2))));\n+\t}\n+\n \t/**\n \t * NamedPairs hashCode should not depend on the type\n \t *",
                "raw_url": "https://github.com/apache/wicket/raw/f2adf1c86369638ad5bb465c00924fec0428cfae/wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersTest.java",
                "sha": "d390eeee73b66ddf916ed1cc5c4c5184ef249800",
                "status": "modified"
            }
        ],
        "message": "WICKET-6332 NullPointerException in PageParameters#equals()",
        "parent": "https://github.com/apache/wicket/commit/093893684984a2fcac04b4330fbacb3a81bac3a2",
        "patched_files": [
            "PageParameters.java",
            "INamedParameters.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "PageParametersTest.java"
        ]
    },
    "wicket_f54d28e": {
        "bug_id": "wicket_f54d28e",
        "commit": "https://github.com/apache/wicket/commit/f54d28e18f2d0d6b4f8c1280cf29b36fe9d04a62",
        "file": [
            {
                "additions": 84,
                "blob_url": "https://github.com/apache/wicket/blob/f54d28e18f2d0d6b4f8c1280cf29b36fe9d04a62/wicket/src/java/wicket/util/string/Strings.java",
                "changes": 121,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/util/string/Strings.java?ref=f54d28e18f2d0d6b4f8c1280cf29b36fe9d04a62",
                "deletions": 37,
                "filename": "wicket/src/java/wicket/util/string/Strings.java",
                "patch": "@@ -49,7 +49,7 @@\n  */\n public final class Strings\n {\n-    private static final Pattern htmlNumber = Pattern.compile(\"\\\\&\\\\#\\\\d+\\\\;\");\n+\tprivate static final Pattern htmlNumber = Pattern.compile(\"\\\\&\\\\#\\\\d+\\\\;\");\n \n \t/**\n \t * @param s\n@@ -61,7 +61,7 @@\n \t */\n \tpublic static String afterFirst(final String s, final char c)\n \t{\n-\t\tif(s == null)\n+\t\tif (s == null)\n \t\t{\n \t\t\treturn null;\n \t\t}\n@@ -95,7 +95,7 @@ public static String afterFirstPathComponent(final String path, final char separ\n \n \t/**\n \t * Returns everything after the last occurence of the given character in s.\n-\t *\n+\t * \n \t * @param s\n \t *            The string\n \t * @param c\n@@ -105,7 +105,7 @@ public static String afterFirstPathComponent(final String path, final char separ\n \t */\n \tpublic static String afterLast(final String s, final char c)\n \t{\n-\t\tif(s == null)\n+\t\tif (s == null)\n \t\t{\n \t\t\treturn null;\n \t\t}\n@@ -129,7 +129,7 @@ public static String afterLast(final String s, final char c)\n \t */\n \tpublic static String beforeFirst(final String s, final char c)\n \t{\n-\t\tif(s == null)\n+\t\tif (s == null)\n \t\t{\n \t\t\treturn null;\n \t\t}\n@@ -153,7 +153,7 @@ public static String beforeFirst(final String s, final char c)\n \t */\n \tpublic static String beforeLast(final String s, final char c)\n \t{\n-\t\tif(s == null)\n+\t\tif (s == null)\n \t\t{\n \t\t\treturn null;\n \t\t}\n@@ -194,7 +194,7 @@ public static String beforeLastPathComponent(final String path, final char separ\n \t */\n \tpublic static String capitalize(final String s)\n \t{\n-\t\tif(s == null)\n+\t\tif (s == null)\n \t\t{\n \t\t\treturn null;\n \t\t}\n@@ -255,8 +255,8 @@ public static String escapeMarkup(final String s, final boolean escapeSpaces)\n \t *            True to convert non-7 bit characters to unicode HTML (&#...)\n \t * @return The escaped string\n \t */\n-\tpublic static String escapeMarkup(final String s,\n-\t\t\tfinal boolean escapeSpaces, final boolean convertToHtmlUnicodeEscapes)\n+\tpublic static String escapeMarkup(final String s, final boolean escapeSpaces,\n+\t\t\tfinal boolean convertToHtmlUnicodeEscapes)\n \t{\n \t\tif (s == null)\n \t\t{\n@@ -305,46 +305,46 @@ public static String escapeMarkup(final String s,\n \t\t\t\t\t\tbuffer.append(\"&gt;\");\n \t\t\t\t\t\tbreak;\n \n-\t\t\t\t\tcase '&':\n+\t\t\t\t\tcase '&' :\n \n \t\t\t\t\t\t// if this is an entity (&#), then do not convert\n \t\t\t\t\t\tif ((i < len - 1) && (s.charAt(i + 1) == '#'))\n-\t\t\t\t\t    {\n+\t\t\t\t\t\t{\n \t\t\t\t\t\t\tbuffer.append(c);\n-\t\t\t\t\t\t\t\n-\t\t\t\t\t    }\n+\n+\t\t\t\t\t\t}\n \t\t\t\t\t\telse\n \t\t\t\t\t\t{\n \t\t\t\t\t\t\t// it is not an entity, so convert it to &amp;\n \t\t\t\t\t\t\tbuffer.append(\"&amp;\");\n \t\t\t\t\t\t}\n-\t\t\t\t\t    break;\n+\t\t\t\t\t\tbreak;\n \n-\t\t\t\t\tcase '\"':\n-\t\t\t\t\t    buffer.append(\"&quot;\");\n-\t\t\t\t\t    break;\n+\t\t\t\t\tcase '\"' :\n+\t\t\t\t\t\tbuffer.append(\"&quot;\");\n+\t\t\t\t\t\tbreak;\n \n-\t\t\t\t\tcase '\\'':\n-\t\t\t\t\t    buffer.append(\"&#039;\");\n-\t\t\t\t\t    break;\n+\t\t\t\t\tcase '\\'' :\n+\t\t\t\t\t\tbuffer.append(\"&#039;\");\n+\t\t\t\t\t\tbreak;\n \n \t\t\t\t\tdefault :\n \n \t\t\t\t\t\tif (convertToHtmlUnicodeEscapes)\n \t\t\t\t\t\t{\n-\t\t\t                int ci = 0xffff & c;\n-\t\t\t                if (ci < 160 )\n-\t\t\t\t\t\t\t{   \n+\t\t\t\t\t\t\tint ci = 0xffff & c;\n+\t\t\t\t\t\t\tif (ci < 160)\n+\t\t\t\t\t\t\t{\n \t\t\t\t\t\t\t\t// nothing special only 7 Bit\n \t\t\t\t\t\t\t\tbuffer.append(c);\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t\telse\n \t\t\t\t\t\t\t{\n-\t\t\t                    // Not 7 Bit use the unicode system\n+\t\t\t\t\t\t\t\t// Not 7 Bit use the unicode system\n \t\t\t\t\t\t\t\tbuffer.append(\"&#\");\n \t\t\t\t\t\t\t\tbuffer.append(new Integer(ci).toString());\n \t\t\t\t\t\t\t\tbuffer.append(';');\n-\t\t\t                }\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t\telse\n \t\t\t\t\t\t{\n@@ -362,23 +362,28 @@ public static String escapeMarkup(final String s,\n \t/**\n \t * Replace HTML numbers like &#20540 by the appropriate character.\n \t * \n-\t * @param str The text to be evaluated\n+\t * @param str\n+\t *            The text to be evaluated\n \t * @return The text with \"numbers\" replaced\n \t */\n \tpublic static String replaceHtmlEscapeNumber(String str)\n \t{\n+\t\tif (str == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n \t\tMatcher matcher = htmlNumber.matcher(str);\n \t\twhile (matcher.find())\n \t\t{\n-\t\t    int pos = matcher.start();\n-\t\t    int end = matcher.end();\n-\t\t    int number = Integer.parseInt(str.substring(pos+2, end-1));\n-\t\t    char ch = (char)number;\n-\t\t    str = str.substring(0, pos) + ch + str.substring(end);\n+\t\t\tint pos = matcher.start();\n+\t\t\tint end = matcher.end();\n+\t\t\tint number = Integer.parseInt(str.substring(pos + 2, end - 1));\n+\t\t\tchar ch = (char)number;\n+\t\t\tstr = str.substring(0, pos) + ch + str.substring(end);\n \t\t\tmatcher = htmlNumber.matcher(str);\n \t\t}\n-\t\t\n-\t    return str;\n+\n+\t\treturn str;\n \t}\n \n \t/**\n@@ -397,6 +402,10 @@ public static String replaceHtmlEscapeNumber(String str)\n \t */\n \tpublic static String firstPathComponent(final String path, final char separator)\n \t{\n+\t\tif (path == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n \t\tfinal int index = path.indexOf(separator);\n \n \t\tif (index == -1)\n@@ -408,6 +417,11 @@ public static String firstPathComponent(final String path, final char separator)\n \t}\n \n \t/**\n+\t * Checks whether the <code>string</code> is considered empty. Empty means\n+\t * that the string may contain whitespace, but no visible characters.\n+\t * \n+\t * \"\\n\\t \" is considered empty, while \" a\" is not.\n+\t * \n \t * @param string\n \t *            The string\n \t * @return True if the string is null or \"\"\n@@ -418,10 +432,20 @@ public static boolean isEmpty(final String string)\n \t}\n \n \t/**\n+\t * Converts the text in <code>s</code> to a corresponding boolean. On,\n+\t * yes, y, true and 1 are converted to <code>true</code>. Off, no, n,\n+\t * false and 0 (zero) are converted to <code>false</code>. An empty\n+\t * string is converted to <code>false</code>. Conversion is\n+\t * case-insensitive, and does <em>not</em> take internationalization into\n+\t * account.\n+\t * \n+\t * 'Ja', 'Oui', 'Igen', 'Nein', 'Nee', 'Non', 'Nem' are all illegal values.\n+\t * \n \t * @param s\n-\t *            String\n-\t * @return Boolean value\n+\t *            the value to convert into a boolean\n+\t * @return Boolean the converted value of <code>s</code>\n \t * @throws StringValueConversionException\n+\t *             when the value of <code>s</code> is not recognized.\n \t */\n \tpublic static boolean isTrue(final String s) throws StringValueConversionException\n \t{\n@@ -487,7 +511,7 @@ public static String lastPathComponent(final String path, final char separator)\n \t}\n \n \t/**\n-\t * Replace all occurrences of one string replaceWith another string\n+\t * Replace all occurrences of one string replaceWith another string.\n \t * \n \t * @param s\n \t *            The string to process\n@@ -497,8 +521,27 @@ public static String lastPathComponent(final String path, final char separator)\n \t *            The value to searchFor replaceWith\n \t * @return The resulting string with searchFor replaced with replaceWith\n \t */\n-\tpublic static String replaceAll(final String s, final String searchFor, final String replaceWith)\n+\tpublic static String replaceAll(final String s, final String searchFor, String replaceWith)\n \t{\n+\t\tif (s == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\t// if searchFor is null or the empty string, then there is nothing to\n+\t\t// replace, so returning s is the only option here.\n+\t\tif (searchFor == null || \"\".equals(searchFor))\n+\t\t{\n+\t\t\treturn s;\n+\t\t}\n+\n+\t\t// if replaceWith is null, then the searchFor should be replaced with\n+\t\t// nothing,\n+\t\t// which can be seen as the empty string.\n+\t\tif (replaceWith == null)\n+\t\t{\n+\t\t\treplaceWith = \"\";\n+\t\t}\n \t\t// Look for first occurrence of searchFor\n \t\tint matchIndex = s.indexOf(searchFor);\n \t\tif (matchIndex == -1)\n@@ -554,6 +597,10 @@ public static String replaceAll(final String s, final String searchFor, final St\n \t */\n \tpublic static String[] split(final String s, final char c)\n \t{\n+\t\tif (s == null)\n+\t\t{\n+\t\t\treturn new String[0];\n+\t\t}\n \t\tfinal List strings = new ArrayList();\n \t\tint pos = 0;\n \t\twhile (true)",
                "raw_url": "https://github.com/apache/wicket/raw/f54d28e18f2d0d6b4f8c1280cf29b36fe9d04a62/wicket/src/java/wicket/util/string/Strings.java",
                "sha": "728fd44719916ef7bc6bcdfaa9b0309014aa4e0d",
                "status": "modified"
            },
            {
                "additions": 172,
                "blob_url": "https://github.com/apache/wicket/blob/f54d28e18f2d0d6b4f8c1280cf29b36fe9d04a62/wicket/src/test/wicket/util/string/StringsTest.java",
                "changes": 179,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/util/string/StringsTest.java?ref=f54d28e18f2d0d6b4f8c1280cf29b36fe9d04a62",
                "deletions": 7,
                "filename": "wicket/src/test/wicket/util/string/StringsTest.java",
                "patch": "@@ -138,20 +138,22 @@ public void testEscapeMarkup()\n \t\tassertEquals(\"&amp;\", Strings.escapeMarkup(\"&\"));\n \t\tassertEquals(\"&#\", Strings.escapeMarkup(\"&#\"));\n \t\tassertEquals(\"&#0000;\", Strings.escapeMarkup(\"&#0000;\"));\n-\t\t\n+\n \t\tassertEquals(\"&amp;amp;\", Strings.escapeMarkup(\"&amp;\"));\n-\t\tassertEquals(\"&lt; &gt;&amp;&quot;&#039;?:;{}[]-_+=()*^%$#@!~`\", Strings.escapeMarkup(\"< >&\\\"'?:;{}[]-_+=()*^%$#@!~`\"));\n-\t\tassertEquals(\"&lt;&nbsp;&gt;&amp;&quot;&#039;?:;{}[]-_+=()*^%$#@!~`\", Strings.escapeMarkup(\"< >&\\\"'?:;{}[]-_+=()*^%$#@!~`\", true));\n+\t\tassertEquals(\"&lt; &gt;&amp;&quot;&#039;?:;{}[]-_+=()*^%$#@!~`\", Strings\n+\t\t\t\t.escapeMarkup(\"< >&\\\"'?:;{}[]-_+=()*^%$#@!~`\"));\n+\t\tassertEquals(\"&lt;&nbsp;&gt;&amp;&quot;&#039;?:;{}[]-_+=()*^%$#@!~`\", Strings.escapeMarkup(\n+\t\t\t\t\"< >&\\\"'?:;{}[]-_+=()*^%$#@!~`\", true));\n \t}\n-\t\n+\n \t/**\n \t * Tests the escapeMarkup method with whitespace.\n \t */\n \tpublic void testEscapeMarkupWhiteSpace()\n \t{\n \t\tassertNull(Strings.escapeMarkup(null, true));\n \t\tassertEquals(\"\", Strings.escapeMarkup(\"\", true));\n-\t\t\n+\n \t\tassertEquals(\"\\n \\t\", Strings.escapeMarkup(\"\\n \\t\", false));\n \t\tassertEquals(\"\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\", Strings.escapeMarkup(\"\\n \\t\", true));\n \t\tassertEquals(\"  \", Strings.escapeMarkup(\"  \", false));\n@@ -166,10 +168,173 @@ public void testEscapeMarkupUnicode()\n \t\tassertNull(Strings.escapeMarkup(null, true, true));\n \t\tassertEquals(\"\", Strings.escapeMarkup(\"\", true, true));\n \n-\t\tassertEquals(\"&#199;&#252;&#233;&#226;&#228;&#224;&#229;&#231;&#234;&#235;\", \n-\t\t\t\tStrings.escapeMarkup(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", false, true));\n+\t\tassertEquals(\"&#199;&#252;&#233;&#226;&#228;&#224;&#229;&#231;&#234;&#235;\", Strings\n+\t\t\t\t.escapeMarkup(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", false, true));\n \n \t\tassertEquals(\"\\n \\t&#233;\", Strings.escapeMarkup(\"\\n \\t\ufffd\", false, true));\n \t\tassertEquals(\"\\n \\t\ufffd\", Strings.escapeMarkup(\"\\n \\t\ufffd\", false, false));\n \t}\n+\n+\t/**\n+\t * Tests the <code>replaceHtmlEscapeNumber</code> method.\n+\t */\n+\tpublic void testReplaceHtmlEscapeNumber()\n+\t{\n+\t\tassertNull(Strings.replaceHtmlEscapeNumber(null));\n+\t\tassertEquals(\"\", Strings.replaceHtmlEscapeNumber(\"\"));\n+\t\tassertEquals(\"abcdefghijklm\ufffd\", Strings.replaceHtmlEscapeNumber(\"abcdefghijklm\ufffd\"));\n+\t\tassertEquals(\"a &#\", Strings.replaceHtmlEscapeNumber(\"a &#\"));\n+\t\tassertEquals(\n+\t\t\t\t\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\",\n+\t\t\t\tStrings\n+\t\t\t\t\t\t.replaceHtmlEscapeNumber(\"&#199;&#252;&#233;&#226;&#228;&#224;&#229;&#231;&#234;&#235;\"));\n+\t}\n+\n+\t/**\n+\t * Tests the <code>firstPathComponent</code> method.\n+\t */\n+\tpublic void testFirstPathComponent()\n+\t{\n+\t\tassertNull(Strings.firstPathComponent(null, '.'));\n+\t\tassertEquals(\"\", Strings.firstPathComponent(\"\", '.'));\n+\t\tassertEquals(\"foo\", Strings.firstPathComponent(\"foo\", '.'));\n+\t\tassertEquals(\"foo\", Strings.firstPathComponent(\"foo.bar\", '.'));\n+\t\tassertEquals(\"foo bar\", Strings.firstPathComponent(\"foo bar\", '.'));\n+\t}\n+\n+\t/**\n+\t * Tests the <code>isEmpty</code> method.\n+\t */\n+\tpublic void testIsEmpty()\n+\t{\n+\t\tassertTrue(Strings.isEmpty(null));\n+\t\tassertTrue(Strings.isEmpty(\"\"));\n+\t\tassertTrue(Strings.isEmpty(\" \"));\n+\t\tassertTrue(Strings.isEmpty(\"           \"));\n+\t\tassertTrue(Strings.isEmpty(\" \\n\\t\"));\n+\t\tassertFalse(Strings.isEmpty(\"a\"));\n+\t\tassertFalse(Strings.isEmpty(\" a\"));\n+\t}\n+\n+\t/**\n+\t * Tests the <code>isTrue</code> method.\n+\t * \n+\t * @throws StringValueConversionException\n+\t */\n+\tpublic void testIsTrue() throws StringValueConversionException\n+\t{\n+\t\tassertFalse(Strings.isTrue(null));\n+\t\tassertFalse(Strings.isTrue(\"\"));\n+\t\tassertFalse(Strings.isTrue(\" \\n \\t\"));\n+\n+\t\tassertFalse(Strings.isTrue(\"no\"));\n+\t\tassertFalse(Strings.isTrue(\"n\"));\n+\t\tassertFalse(Strings.isTrue(\"false\"));\n+\t\tassertFalse(Strings.isTrue(\"nO\"));\n+\t\tassertFalse(Strings.isTrue(\"N\"));\n+\t\tassertFalse(Strings.isTrue(\"fAlSe\"));\n+\t\tassertFalse(Strings.isTrue(\"0\"));\n+\n+\t\tassertTrue(Strings.isTrue(\"yes\"));\n+\t\tassertTrue(Strings.isTrue(\"y\"));\n+\t\tassertTrue(Strings.isTrue(\"true\"));\n+\t\tassertTrue(Strings.isTrue(\"1\"));\n+\t\tassertTrue(Strings.isTrue(\"YeS\"));\n+\t\tassertTrue(Strings.isTrue(\"Y\"));\n+\t\tassertTrue(Strings.isTrue(\"tRuE\"));\n+\t\tassertTrue(Strings.isTrue(\"1\"));\n+\n+\t\ttry\n+\t\t{\n+\t\t\tStrings.isTrue(\"foo\");\n+\t\t\tfail(\"Exception expected\");\n+\t\t}\n+\t\tcatch (StringValueConversionException e)\n+\t\t{\n+\t\t\tassertTrue(true);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Tests the <code>replaceAll</code> method.\n+\t */\n+\tpublic void testReplaceAll()\n+\t{\n+\t\tassertNull(Strings.replaceAll(null, null, null));\n+\t\tassertNull(Strings.replaceAll(null, \"\", null));\n+\t\tassertNull(Strings.replaceAll(null, null, \"\"));\n+\t\tassertNull(Strings.replaceAll(null, \"\", \"\"));\n+\n+\t\tassertEquals(\"\", Strings.replaceAll(\"\", null, null));\n+\t\tassertEquals(\"\", Strings.replaceAll(\"\", \"\", null));\n+\t\tassertEquals(\"\", Strings.replaceAll(\"\", null, \"\"));\n+\t\tassertEquals(\"\", Strings.replaceAll(\"\", \"\", \"\"));\n+\t\tassertEquals(\"\", Strings.replaceAll(\"\", \"\", \"abc\"));\n+\t\tassertEquals(\"\", Strings.replaceAll(\"\", \"abc\", \"def\"));\n+\t\tassertEquals(\"\", Strings.replaceAll(\"abc\", \"abc\", \"\"));\n+\n+\t\tassertEquals(\"abc\", Strings.replaceAll(\"abc\", \"\", \"\"));\n+\t\tassertEquals(\"abc\", Strings.replaceAll(\"abc\", \"abc\", \"abc\"));\n+\t\tassertEquals(\"def\", Strings.replaceAll(\"abc\", \"abc\", \"def\"));\n+\t\tassertEquals(\"abc\", Strings.replaceAll(\"abc\", \"ABC\", \"\"));\n+\n+\t\tassertEquals(\"abc\", Strings.replaceAll(\"abc\", \"d\", null));\n+\t\tassertEquals(\"ab\", Strings.replaceAll(\"abc\", \"c\", null));\n+\t\tassertEquals(\"bc\", Strings.replaceAll(\"abc\", \"a\", null));\n+\n+\t\tassertEquals(\"aaaa\", Strings.replaceAll(\"aa\", \"a\", \"aa\"));\n+\t}\n+\n+\t/**\n+\t * Tests the <code>split</code> method.\n+\t */\n+\tpublic void testSplit()\n+\t{\n+\t\tassertEquals(new String[0], Strings.split(null, '.'));\n+\t\tassertEquals(new String[0], Strings.split(\"\", '.'));\n+\t\tassertEquals(new String[] { \"\", \"\" }, Strings.split(\".\", '.'));\n+\t\tassertEquals(new String[] { \"a\", \"\" }, Strings.split(\"a.\", '.'));\n+\t\tassertEquals(new String[] { \"a\", \"b\" }, Strings.split(\"a.b\", '.'));\n+\t\tassertEquals(new String[] { \"a\", \"b\", \"c\" }, Strings.split(\"a.b.c\", '.'));\n+\t\tassertEquals(new String[] { \"a\", \"b\", \"c\" }, Strings.split(\"a b c\", ' '));\n+\t\tassertEquals(new String[] { \"abc\" }, Strings.split(\"abc\", ' '));\n+\t}\n+\n+\t/**\n+\t * Asserts that both string arrays are equal.\n+\t * \n+\t * @param expected\n+\t *            the expected value\n+\t * @param actual\n+\t *            the actual value\n+\t */\n+\tprivate void assertEquals(String[] expected, String[] actual)\n+\t{\n+\t\tif (expected == null)\n+\t\t{\n+\t\t\tassertNull(actual);\n+\t\t}\n+\t\tassertEquals(stringValue(expected), stringValue(actual));\n+\t}\n+\n+\t/**\n+\t * Converts an array of strings to a String. {\"a\", \"b\"} becomes: \"{a,b}\"\n+\t * \n+\t * @param arrayOfStrings\n+\t *            the array to convert\n+\t * @return the array as a string.\n+\t */\n+\tprivate String stringValue(String[] arrayOfStrings)\n+\t{\n+\t\tStringBuffer sb = new StringBuffer(\"{\");\n+\t\tString komma = \"\";\n+\t\tfor (int i = 0; i < arrayOfStrings.length; i++)\n+\t\t{\n+\t\t\tsb.append(komma);\n+\t\t\tsb.append(arrayOfStrings[i]);\n+\t\t\tkomma = \",\";\n+\t\t}\n+\t\tsb.append(\"}\");\n+\t\treturn sb.toString();\n+\t}\n }",
                "raw_url": "https://github.com/apache/wicket/raw/f54d28e18f2d0d6b4f8c1280cf29b36fe9d04a62/wicket/src/test/wicket/util/string/StringsTest.java",
                "sha": "6079168de19acc14f5bceb821387efec70e7cea8",
                "status": "modified"
            }
        ],
        "message": "Fixed possible NPE's, and removed an endless loop construct (replaceAll(\"foo\", \"\", \"a\")).\n\nAdded more unittests.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@457544 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/7b3d8dd66861684ee73b1bbc4ad926c4f9568fb7",
        "patched_files": [
            "Strings.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "StringsTest.java"
        ]
    },
    "wicket_f5a62da": {
        "bug_id": "wicket_f5a62da",
        "commit": "https://github.com/apache/wicket/commit/f5a62da5b38c504db8945a88857a53aae6b5d7b7",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/wicket/blob/f5a62da5b38c504db8945a88857a53aae6b5d7b7/wicket-core/src/main/java/org/apache/wicket/request/mapper/BasicResourceReferenceMapper.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/request/mapper/BasicResourceReferenceMapper.java?ref=f5a62da5b38c504db8945a88857a53aae6b5d7b7",
                "deletions": 0,
                "filename": "wicket-core/src/main/java/org/apache/wicket/request/mapper/BasicResourceReferenceMapper.java",
                "patch": "@@ -92,6 +92,13 @@ public IRequestHandler mapRequest(Request request)\n \t\t\t\t// should be stripped of timestamps\n \t\t\t\tif (i + 1 == segmentsSize)\n \t\t\t\t{\n+\t\t\t\t\t// since we need mutable page parameters for \n+\t\t\t\t\t// the caching strategy ensure they are not null \n+\t\t\t\t\tif (pageParameters == null)\n+\t\t\t\t\t{\n+\t\t\t\t\t\tpageParameters = new PageParameters();\n+\t\t\t\t\t}\n+\t\t\t\t\t\n \t\t\t\t\t// The filename + parameters eventually contain caching\n \t\t\t\t\t// related information which needs to be removed\n \t\t\t\t\tResourceUrl resourceUrl = new ResourceUrl(segment, pageParameters);",
                "raw_url": "https://github.com/apache/wicket/raw/f5a62da5b38c504db8945a88857a53aae6b5d7b7/wicket-core/src/main/java/org/apache/wicket/request/mapper/BasicResourceReferenceMapper.java",
                "sha": "c1530cfdd5da3dbce6a5fb760db2933994625e47",
                "status": "modified"
            }
        ],
        "message": "WICKET-3828 QueryStringWithTimestampResourceCachingStrategy#undecorateUrl(ResourceUrl) can causes NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1138587 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/d997f7e9d4939eaa4074e185bd06ac07361e9ccd",
        "patched_files": [
            "BasicResourceReferenceMapper.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "BasicResourceReferenceMapperTest.java"
        ]
    },
    "wicket_f81ad2a": {
        "bug_id": "wicket_f81ad2a",
        "commit": "https://github.com/apache/wicket/commit/f81ad2a53a7bcba321d3faa7f0b484b0bb431da9",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/wicket/blob/f81ad2a53a7bcba321d3faa7f0b484b0bb431da9/wicket-core/src/main/java/org/apache/wicket/serialize/java/JavaSerializer.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/serialize/java/JavaSerializer.java?ref=f81ad2a53a7bcba321d3faa7f0b484b0bb431da9",
                "deletions": 4,
                "filename": "wicket-core/src/main/java/org/apache/wicket/serialize/java/JavaSerializer.java",
                "patch": "@@ -134,13 +134,13 @@ public Object deserialize(final byte[] data)\n \t\t\t\t}\n \t\t\t}\n \t\t}\n-\t\tcatch (ClassNotFoundException e)\n+\t\tcatch (ClassNotFoundException cnfx)\n \t\t{\n-\t\t\tthrow new RuntimeException(\"Could not deserialize object using: \" + ois.getClass(), e);\n+\t\t\tthrow new RuntimeException(\"Could not deserialize object from byte[]\", cnfx);\n \t\t}\n-\t\tcatch (IOException e)\n+\t\tcatch (IOException iox)\n \t\t{\n-\t\t\tthrow new RuntimeException(\"Could not deserialize object using: \" + ois.getClass(), e);\n+\t\t\tthrow new RuntimeException(\"Could not deserialize object from byte[]\", iox);\n \t\t}\n \t\tfinally\n \t\t{",
                "raw_url": "https://github.com/apache/wicket/raw/f81ad2a53a7bcba321d3faa7f0b484b0bb431da9/wicket-core/src/main/java/org/apache/wicket/serialize/java/JavaSerializer.java",
                "sha": "7e201e225eb327c965f5ae06072a74a6e27aa18f",
                "status": "modified"
            }
        ],
        "message": "Do not try to print the class name of the used input stream.\n\nIf there is an error often the variable 'ois' is not initialized and causes NullPointerException and thus hides the real cause of the problem",
        "parent": "https://github.com/apache/wicket/commit/c8abde8be1c0c983a7ac837a1b057a476478b783",
        "patched_files": [
            "JavaSerializer.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "JavaSerializerTest.java"
        ]
    },
    "wicket_feed0b7": {
        "bug_id": "wicket_feed0b7",
        "commit": "https://github.com/apache/wicket/commit/feed0b7814855c9d8815826ecd4c75f96da090cf",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/wicket/blob/feed0b7814855c9d8815826ecd4c75f96da090cf/wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResource.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResource.java?ref=feed0b7814855c9d8815826ecd4c75f96da090cf",
                "deletions": 1,
                "filename": "wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResource.java",
                "patch": "@@ -30,8 +30,11 @@\n import org.apache.wicket.core.util.lang.WicketObjects;\n import org.apache.wicket.core.util.resource.locator.IResourceStreamLocator;\n import org.apache.wicket.markup.html.IPackageResourceGuard;\n+import org.apache.wicket.mock.MockWebRequest;\n+import org.apache.wicket.request.Url;\n import org.apache.wicket.request.cycle.RequestCycle;\n import org.apache.wicket.request.resource.caching.IStaticCacheableResource;\n+import org.apache.wicket.response.StringResponse;\n import org.apache.wicket.util.io.IOUtils;\n import org.apache.wicket.util.lang.Classes;\n import org.apache.wicket.util.lang.Packages;\n@@ -493,7 +496,16 @@ public InputStream getInputStream() throws ResourceStreamNotFoundException\n \t\t\t}\n \n \t\t\tRequestCycle cycle = RequestCycle.get();\n-\t\t\tAttributes attributes = new Attributes(cycle.getRequest(), cycle.getResponse());\n+\t\t\tAttributes attributes;\n+\t\t\tif (cycle != null)\n+\t\t\t{\n+\t\t\t\tattributes = new Attributes(cycle.getRequest(), cycle.getResponse());\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\t// use empty request and response in case of non-http thread. WICKET-5532\n+\t\t\t\tattributes = new Attributes(new MockWebRequest(Url.parse(\"\")), new StringResponse());\n+\t\t\t}\n \t\t\tbyte[] processedBytes = processResponse(attributes, bytes);\n \t\t\treturn new ByteArrayInputStream(processedBytes);\n \t\t}",
                "raw_url": "https://github.com/apache/wicket/raw/feed0b7814855c9d8815826ecd4c75f96da090cf/wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResource.java",
                "sha": "403d1f7da77e6859b25ac03d5b1174c046c1f8ef",
                "status": "modified"
            }
        ],
        "message": "WICKET-5532 NPE calling PackageResource.getResourceStream() if there is no RequestCycle defined\n\nUse empty request and response when a PackageResource is used out of a request cycle\n\n(cherry picked from commit ae44d26db32587f4ddb9b8c52460ec1450dc96f5)",
        "parent": "https://github.com/apache/wicket/commit/5fe57410df21141d1a8db05fcb95728ab0ab8065",
        "patched_files": [
            "PackageResource.java"
        ],
        "repo": "wicket",
        "unit_tests": [
            "PackageResourceTest.java"
        ]
    }
}