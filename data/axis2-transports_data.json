[{"commit": "https://github.com/apache/axis2-transports/commit/5d624dc0874252a239b209795f8f8d13e7eafe0d", "parent": "https://github.com/apache/axis2-transports/commit/d446e0f8c053c5229d5974430ca8f13baefa753e", "message": "JMS transport: Avoid NPE if we can't get the JMSOutTransportInfo.\n\ngit-svn-id: https://svn.apache.org/repos/asf/webservices/commons/trunk/modules/transport@712169 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "axis2-transports_1", "file": [{"additions": 4, "raw_url": "https://github.com/apache/axis2-transports/raw/5d624dc0874252a239b209795f8f8d13e7eafe0d/modules/jms/src/main/java/org/apache/axis2/transport/jms/JMSSender.java", "blob_url": "https://github.com/apache/axis2-transports/blob/5d624dc0874252a239b209795f8f8d13e7eafe0d/modules/jms/src/main/java/org/apache/axis2/transport/jms/JMSSender.java", "sha": "0e5791a9d3114a77e2410b4eaf15937a74e6db01", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/axis2-transports/contents/modules/jms/src/main/java/org/apache/axis2/transport/jms/JMSSender.java?ref=5d624dc0874252a239b209795f8f8d13e7eafe0d", "patch": "@@ -103,7 +103,7 @@ public void sendMessage(MessageContext msgCtx, String targetAddress,\n \n         JMSConnectionFactory jmsConnectionFactory = null;\n         Connection connection = null;   // holds a one time connection if used\n-        JMSOutTransportInfo jmsOut = null;\n+        JMSOutTransportInfo jmsOut;\n         Session session = null;\n         Destination replyDestination = null;\n \n@@ -146,6 +146,9 @@ public void sendMessage(MessageContext msgCtx, String targetAddress,\n \n                 session = jmsConnectionFactory.getSessionForDestination(\n                     jmsOut.getDestination().toString());\n+            } else {\n+                handleException(\"Unable to get JMSOutTransportInfo\");\n+                return; // We never get here. Just make the compiler happy.\n             }\n             \n             Destination destination = jmsOut.getDestination();", "filename": "modules/jms/src/main/java/org/apache/axis2/transport/jms/JMSSender.java"}], "repo": "axis2-transports"}, {"commit": "https://github.com/apache/axis2-transports/commit/d63f751ca389fd08c0357f3931a40ec21e46918d", "parent": "https://github.com/apache/axis2-transports/commit/34624c78e93d093af6570c42650d8465cfb6b3c2", "message": "Fixing NPE when shutting down the XMPP transport,Fixing EPR address\n\ngit-svn-id: https://svn.apache.org/repos/asf/webservices/commons/trunk/modules/transport@709998 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "axis2-transports_2", "file": [{"additions": 10, "raw_url": "https://github.com/apache/axis2-transports/raw/d63f751ca389fd08c0357f3931a40ec21e46918d/modules/xmpp/src/org/apache/axis2/transport/xmpp/XMPPListener.java", "blob_url": "https://github.com/apache/axis2-transports/blob/d63f751ca389fd08c0357f3931a40ec21e46918d/modules/xmpp/src/org/apache/axis2/transport/xmpp/XMPPListener.java", "sha": "7ddcb617b47b443a9e3c516846b14077ab77af47", "changes": 21, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/axis2-transports/contents/modules/xmpp/src/org/apache/axis2/transport/xmpp/XMPPListener.java?ref=d63f751ca389fd08c0357f3931a40ec21e46918d", "patch": "@@ -49,7 +49,8 @@\n public class XMPPListener implements TransportListener {\n     private static Log log = LogFactory.getLog(XMPPListener.class);\n     private ConfigurationContext configurationContext = null;\n-    private String replyTo = \"\";\n+    private String xmppServerUsername = \"\";\n+    private String xmppServerUrl = \"\";\n \n     /**\n      * A Map containing the connection factories managed by this, \n@@ -76,7 +77,7 @@ public void init(ConfigurationContext configurationCtx, TransportInDescription t\n             throws AxisFault {\n     \tlog.info(\"Initializing XMPPListener...\");\n         configurationContext = configurationCtx;\n-        initializeConnectionFactories(configurationContext,transportIn);\n+        initializeConnectionFactories(transportIn);\n         if (connectionFactories.isEmpty()) {\n             log.warn(\"No XMPP connection factories defined.\" +\n                      \"Will not listen for any XMPP messages\");\n@@ -90,10 +91,7 @@ public void init(ConfigurationContext configurationCtx, TransportInDescription t\n      * @param configurationContext\n      * @param transportIn\n      */\n-    private void initializeConnectionFactories(\n-\t\t\tConfigurationContext configurationContext,\n-\t\t\tTransportInDescription transportIn) throws AxisFault{\n-    \t\n+    private void initializeConnectionFactories(TransportInDescription transportIn) throws AxisFault{    \t\n         Iterator serversToListenOn = transportIn.getParameters().iterator();\n         while (serversToListenOn.hasNext()) {\n             Parameter connection = (Parameter) serversToListenOn.next();\n@@ -112,9 +110,11 @@ private void initializeConnectionFactories(\n             while (params.hasNext()) {\n                 Parameter param = (Parameter) params.next();\n                 if(XMPPConstants.XMPP_SERVER_URL.equals(param.getName())){\n-        \t\t\tserverCredentials.setServerUrl((String)param.getValue());                \t\n+                \txmppServerUrl = (String)param.getValue();\n+        \t\t\tserverCredentials.setServerUrl(xmppServerUrl);                \t\n                 }else if(XMPPConstants.XMPP_SERVER_USERNAME.equals(param.getName())){\n-        \t\t\tserverCredentials.setAccountName((String)param.getValue());                \t\n+                \txmppServerUsername = (String) param.getValue();\n+                \tserverCredentials.setAccountName(xmppServerUsername);\n                 }else if(XMPPConstants.XMPP_SERVER_PASSWORD.equals(param.getName())){\n         \t\t\tserverCredentials.setPassword((String)param.getValue());                \t\n                 }else if(XMPPConstants.XMPP_SERVER_TYPE.equals(param.getName())){\n@@ -133,7 +133,7 @@ private void initializeConnectionFactories(\n      * Stop XMPP listener & disconnect from all XMPP Servers\n      */\n     public void stop() {\n-        if (!workerPool.isShutdown()) {\n+        if (workerPool != null && !workerPool.isShutdown()) {\n             workerPool.shutdown();\n         }\n         //TODO : Iterate through all connections in connectionFactories & call disconnect()\n@@ -155,8 +155,7 @@ public EndpointReference getEPRForService(String serviceName, String ip) throws\n      */    \n     public EndpointReference[] getEPRsForService(String serviceName, String ip) throws AxisFault {\n         return new EndpointReference[]{new EndpointReference(XMPPConstants.XMPP_PREFIX +\n-                replyTo + \"?\" + configurationContext\n-                .getServiceContextPath() + \"/\" + serviceName)};\n+        \t\txmppServerUsername +\"@\"+ xmppServerUrl +\"/\" + serviceName)};\n     }\n \n ", "filename": "modules/xmpp/src/org/apache/axis2/transport/xmpp/XMPPListener.java"}, {"additions": 21, "raw_url": "https://github.com/apache/axis2-transports/raw/d63f751ca389fd08c0357f3931a40ec21e46918d/modules/xmpp/src/org/apache/axis2/transport/xmpp/XMPPSender.java", "blob_url": "https://github.com/apache/axis2-transports/blob/d63f751ca389fd08c0357f3931a40ec21e46918d/modules/xmpp/src/org/apache/axis2/transport/xmpp/XMPPSender.java", "sha": "dae5cbebdf69bf436236f56cd01fe5c28ee11417", "changes": 35, "status": "modified", "deletions": 14, "contents_url": "https://api.github.com/repos/apache/axis2-transports/contents/modules/xmpp/src/org/apache/axis2/transport/xmpp/XMPPSender.java?ref=d63f751ca389fd08c0357f3931a40ec21e46918d", "patch": "@@ -47,10 +47,12 @@\n import org.jivesoftware.smack.filter.PacketFilter;\r\n import org.jivesoftware.smack.filter.PacketTypeFilter;\r\n import org.jivesoftware.smack.packet.Message;\r\n+import org.apache.axis2.description.AxisOperation;\r\n \r\n public class XMPPSender extends AbstractHandler implements TransportSender {\r\n \tLog log = null;\r\n     XMPPConnectionFactory connectionFactory;\r\n+    XMPPServerCredentials serverCredentials;    \r\n \t\r\n     public XMPPSender() {\r\n         log = LogFactory.getLog(XMPPSender.class);\r\n@@ -71,8 +73,8 @@ public void init(ConfigurationContext confContext,\n \t\t\tTransportOutDescription transportOut) throws AxisFault {\r\n \t\t//if connection details are available from axis configuration\r\n \t\t//use those & connect to jabber server(s)\r\n-\t\tXMPPServerCredentials serverCredentials = new XMPPServerCredentials();\r\n-\t\tgetConnectionDetailsFromAxisConfiguration(serverCredentials,transportOut);\r\n+\t\tserverCredentials = new XMPPServerCredentials();\r\n+\t\tgetConnectionDetailsFromAxisConfiguration(transportOut);\t\t\r\n \t\tconnectionFactory = new XMPPConnectionFactory();\r\n \t\tconnectionFactory.connect(serverCredentials);\t\t\r\n \t}\r\n@@ -82,8 +84,7 @@ public void init(ConfigurationContext confContext,\n \t * @param msgCtx\r\n \t */\r\n \tprivate void connectUsingClientOptions(MessageContext msgCtx) throws AxisFault{\t\t\r\n-\t\tXMPPServerCredentials serverCredentials = new XMPPServerCredentials();\r\n-\t\tgetConnectionDetailsFromClientOptions(serverCredentials,msgCtx);\r\n+\t\tgetConnectionDetailsFromClientOptions(msgCtx);\r\n \t\tconnectionFactory = new XMPPConnectionFactory();\r\n \t\tconnectionFactory.connect(serverCredentials);\r\n \t}\r\n@@ -151,11 +152,19 @@ public void sendMessage(MessageContext msgCtx, String targetAddress,\n \t\t\tmessage.setProperty(XMPPConstants.IN_REPLY_TO, xmppOutTransportInfo.getInReplyTo());\r\n \t\t}else{\r\n \t\t\txmppConnection = xmppOutTransportInfo.getConnectionFactory().getXmppConnection();\r\n-\t\t\tmessage.setProperty(XMPPConstants.IS_SERVER_SIDE, new Boolean(true));\r\n+\t\t\tmessage.setProperty(XMPPConstants.IS_SERVER_SIDE,new Boolean(true));\r\n \t\t\tmessage.setProperty(XMPPConstants.SERVICE_NAME, serviceName);\r\n-\t\t\tmessage.setProperty(XMPPConstants.ACTION, options.getAction());\r\n-\t\t}\r\n-\t\t\r\n+\t\t\tString action = options.getAction();\r\n+\t\t\tif (action == null) {\r\n+\t\t\t\tAxisOperation axisOperation = msgCtx.getAxisOperation();\r\n+\t\t\t\tif (axisOperation != null) {\r\n+\t\t\t\t\taction = axisOperation.getSoapAction();\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t\tif (action != null) {\r\n+\t\t\t\tmessage.setProperty(XMPPConstants.ACTION, action);\r\n+\t\t\t}\r\n+\t\t}\t\t\r\n     \tif(xmppConnection == null){\r\n     \t\thandleException(\"Connection to XMPP Server is not established.\");    \t\t\r\n     \t}\r\n@@ -220,9 +229,8 @@ public void sendMessage(MessageContext msgCtx, String targetAddress,\n      * @param serverCredentials\r\n      * @param transportOut\r\n      */\r\n-\tprivate void getConnectionDetailsFromAxisConfiguration(XMPPServerCredentials serverCredentials,\r\n-\t\t\tTransportOutDescription transportOut){\r\n-\t\tif(transportOut != null){\r\n+    private void getConnectionDetailsFromAxisConfiguration(TransportOutDescription transportOut){\r\n+    \tif(transportOut != null){\r\n \t\t\tParameter serverUrl = transportOut.getParameter(XMPPConstants.XMPP_SERVER_URL);\r\n \t\t\tif (serverUrl != null) {\r\n \t\t\t\tserverCredentials.setServerUrl(Utils.getParameterValue(serverUrl));\r\n@@ -250,9 +258,8 @@ private void getConnectionDetailsFromAxisConfiguration(XMPPServerCredentials ser\n \t * @param serverCredentials\r\n \t * @param msgContext\r\n \t */\r\n-\tprivate void getConnectionDetailsFromClientOptions(XMPPServerCredentials serverCredentials,\r\n-\t\t\tMessageContext msgContext){\r\n-\t\tOptions clientOptions = msgContext.getOptions();\r\n+    private void getConnectionDetailsFromClientOptions(MessageContext msgContext){\r\n+    \tOptions clientOptions = msgContext.getOptions();\r\n \r\n \t\tif (clientOptions.getProperty(XMPPConstants.XMPP_SERVER_USERNAME) != null){\r\n \t\t\tserverCredentials.setAccountName((String)clientOptions.getProperty(XMPPConstants.XMPP_SERVER_USERNAME));\r", "filename": "modules/xmpp/src/org/apache/axis2/transport/xmpp/XMPPSender.java"}], "repo": "axis2-transports"}, {"commit": "https://github.com/apache/axis2-transports/commit/b322d962fd9fa55ae4a5d34404aa7af72f10ae0f", "parent": "https://github.com/apache/axis2-transports/commit/4d7c8e23f2906fbe79088f6050db51ed99495fdb", "message": "Solved a problem with AbstractTransportListener#startListeningForService.\n\nProblem description: When a runtime exception is thrown by the implementation of the startListeningForService (either explicitly or e.g. a NPE), it is not caught by AbstractTransportListener, but in AxisConfiguration#notifyObservers. The exception then gets logged at DEBUG level without a full stack trace. Also the service will not be disabled for the transport and not be marked as faulty.\n\nIn addition, the transports built on AbstractTransportListener behave quite differently when a problem occurs in startListeningForService:\n* JMSListener marks the service as faulty and disables it for the transport.\n* AbstractPollingTransportListener and AbstractDatagramTransportListener only disable the service for the transport, but will not mark it as faulty.\n* FIXTransportListener only logs the error.\n\nChanges:\n* Intercept exceptions thrown by startListeningForService (including runtime exceptions) in AbstractTransportListener and take appropriate action, i.e. disable the service for the transport and mark it as faulty.\n* Allow startListeningForService to throw AxisFaults, so that implementations can simply throw this exception and don't need to care themselves about disabling the service or marking it as faulty.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/webservices/commons/trunk/modules/transport@712501 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "axis2-transports_3", "file": [{"additions": 6, "raw_url": "https://github.com/apache/axis2-transports/raw/b322d962fd9fa55ae4a5d34404aa7af72f10ae0f/modules/base/src/main/java/org/apache/axis2/transport/base/AbstractPollingTransportListener.java", "blob_url": "https://github.com/apache/axis2-transports/blob/b322d962fd9fa55ae4a5d34404aa7af72f10ae0f/modules/base/src/main/java/org/apache/axis2/transport/base/AbstractPollingTransportListener.java", "sha": "7a50d4d9de1cd43a84a4bf793154910541d20945", "changes": 24, "status": "modified", "deletions": 18, "contents_url": "https://api.github.com/repos/apache/axis2-transports/contents/modules/base/src/main/java/org/apache/axis2/transport/base/AbstractPollingTransportListener.java?ref=b322d962fd9fa55ae4a5d34404aa7af72f10ae0f", "patch": "@@ -160,26 +160,14 @@ private long getPollInterval(ParameterInclude params) {\n     }\n     \n     @Override\n-    protected void startListeningForService(AxisService service) {\n-        T entry;\n-        try {\n-            entry = createPollTableEntry(service);\n-            if (entry == null) {\n-                log.warn(\"The service \" + service.getName() + \" has no configuration for the \" +\n-                        getTransportName() + \" transport and will be disabled for that transport\");\n-            }\n-        } catch (AxisFault ex) {\n-            log.warn(\"Error configuring the \" + getTransportName() + \" transport for Service : \" +\n-                    service.getName() + \" :: \" + ex.getMessage());\n-            entry = null;\n-        }\n+    protected void startListeningForService(AxisService service) throws AxisFault {\n+        T entry = createPollTableEntry(service);\n         if (entry == null) {\n-            disableTransportForService(service);\n-        } else {\n-            entry.setService(service);\n-            schedulePoll(entry, getPollInterval(service));\n-            pollTable.add(entry);\n+            throw new AxisFault(\"The service has no configuration for the transport\");\n         }\n+        entry.setService(service);\n+        schedulePoll(entry, getPollInterval(service));\n+        pollTable.add(entry);\n     }\n     \n     /**", "filename": "modules/base/src/main/java/org/apache/axis2/transport/base/AbstractPollingTransportListener.java"}, {"additions": 22, "raw_url": "https://github.com/apache/axis2-transports/raw/b322d962fd9fa55ae4a5d34404aa7af72f10ae0f/modules/base/src/main/java/org/apache/axis2/transport/base/AbstractTransportListener.java", "blob_url": "https://github.com/apache/axis2-transports/blob/b322d962fd9fa55ae4a5d34404aa7af72f10ae0f/modules/base/src/main/java/org/apache/axis2/transport/base/AbstractTransportListener.java", "sha": "03f176d274acf63ccdd15d7843f39a60e53c7be3", "changes": 24, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/axis2-transports/contents/modules/base/src/main/java/org/apache/axis2/transport/base/AbstractTransportListener.java?ref=b322d962fd9fa55ae4a5d34404aa7af72f10ae0f", "patch": "@@ -196,8 +196,28 @@ public void disableTransportForService(AxisService service) {\n     }\n \n     private void internalStartListeningForService(AxisService service) {\n-        startListeningForService(service);\n         String serviceName = service.getName();\n+        try {\n+            startListeningForService(service);\n+        } catch (AxisFault ex) {\n+            String transportName = getTransportName().toUpperCase();\n+            String msg = \"Unable to configure the service \" + serviceName + \" for the \" +\n+                    transportName + \" transport: \" + ex.getMessage() + \". \" + \n+                    \"This service is being marked as faulty and will not be available over the \" +\n+                    transportName + \" transport.\";\n+            log.warn(msg, ex);\n+            BaseUtils.markServiceAsFaulty(serviceName, msg, service.getAxisConfiguration());\n+            disableTransportForService(service);\n+            return;\n+        } catch (Throwable ex) {\n+            String msg = \"Unexpected error when configuring service \" + serviceName +\n+                    \" for the \" + getTransportName().toUpperCase() + \" transport. It will be\" +\n+                    \" disabled for this transport and marked as faulty.\";\n+            log.error(msg, ex);\n+            BaseUtils.markServiceAsFaulty(serviceName, msg, service.getAxisConfiguration());\n+            disableTransportForService(service);\n+            return;\n+        }\n         registerMBean(new TransportListenerEndpointView(this, serviceName),\n                       getEndpointMBeanName(serviceName));\n     }\n@@ -207,7 +227,7 @@ private void internalStopListeningForService(AxisService service) {\n         stopListeningForService(service);\n     }\n     \n-    protected abstract void startListeningForService(AxisService service);\n+    protected abstract void startListeningForService(AxisService service) throws AxisFault;\n \n     protected abstract void stopListeningForService(AxisService service);\n ", "filename": "modules/base/src/main/java/org/apache/axis2/transport/base/AbstractTransportListener.java"}, {"additions": 8, "raw_url": "https://github.com/apache/axis2-transports/raw/b322d962fd9fa55ae4a5d34404aa7af72f10ae0f/modules/base/src/main/java/org/apache/axis2/transport/base/datagram/AbstractDatagramTransportListener.java", "blob_url": "https://github.com/apache/axis2-transports/blob/b322d962fd9fa55ae4a5d34404aa7af72f10ae0f/modules/base/src/main/java/org/apache/axis2/transport/base/datagram/AbstractDatagramTransportListener.java", "sha": "5b6f581a2d2c784f726240be8169afa6a450ee8c", "changes": 26, "status": "modified", "deletions": 18, "contents_url": "https://api.github.com/repos/apache/axis2-transports/contents/modules/base/src/main/java/org/apache/axis2/transport/base/datagram/AbstractDatagramTransportListener.java?ref=b322d962fd9fa55ae4a5d34404aa7af72f10ae0f", "patch": "@@ -61,29 +61,19 @@ public void receive(DatagramEndpoint endpoint, byte[] data, int length) {\n     }\n \t\n     @Override\n-    protected void startListeningForService(AxisService service) {\n-        E endpoint;\n-        try {\n-        \tendpoint = createEndpoint(service);\n-            endpoint.setListener(this);\n-            endpoint.setService(service);\n-            endpoint.setContentType(ParamUtils.getRequiredParam(\n-                    service, \"transport.\" + getTransportName() + \".contentType\"));\n-            endpoint.setMetrics(metrics);\n-        } catch (AxisFault ex) {\n-            log.warn(\"Error configuring the \" + getTransportName()\n-                    + \" transport for service '\" + service.getName() + \"': \" + ex.getMessage());\n-            disableTransportForService(service);\n-            return;\n-        }\n+    protected void startListeningForService(AxisService service) throws AxisFault {\n+        E endpoint = createEndpoint(service);\n+        endpoint.setListener(this);\n+        endpoint.setService(service);\n+        endpoint.setContentType(ParamUtils.getRequiredParam(\n+                service, \"transport.\" + getTransportName() + \".contentType\"));\n+        endpoint.setMetrics(metrics);\n         \n         try {\n             dispatcher.addEndpoint(endpoint);\n         } catch (IOException ex) {\n-            log.error(\"Unable to listen on endpoint \"\n+            throw new AxisFault(\"Unable to listen on endpoint \"\n                     + endpoint.getEndpointReference(defaultIp), ex);\n-            disableTransportForService(service);\n-            return;\n         }\n         if (log.isDebugEnabled()) {\n             log.debug(\"Started listening on endpoint \" + endpoint.getEndpointReference(defaultIp)", "filename": "modules/base/src/main/java/org/apache/axis2/transport/base/datagram/AbstractDatagramTransportListener.java"}, {"additions": 5, "raw_url": "https://github.com/apache/axis2-transports/raw/b322d962fd9fa55ae4a5d34404aa7af72f10ae0f/modules/jms/src/main/java/org/apache/axis2/transport/jms/JMSListener.java", "blob_url": "https://github.com/apache/axis2-transports/blob/b322d962fd9fa55ae4a5d34404aa7af72f10ae0f/modules/jms/src/main/java/org/apache/axis2/transport/jms/JMSListener.java", "sha": "50ec892811ab708f9711d7f0a424462db4dccf64", "changes": 21, "status": "modified", "deletions": 16, "contents_url": "https://api.github.com/repos/apache/axis2-transports/contents/modules/jms/src/main/java/org/apache/axis2/transport/jms/JMSListener.java?ref=b322d962fd9fa55ae4a5d34404aa7af72f10ae0f", "patch": "@@ -144,17 +144,11 @@ public void stop() throws AxisFault {\n      *\n      * @param service the service for which to listen for messages\n      */\n-    protected void startListeningForService(AxisService service) {\n+    protected void startListeningForService(AxisService service) throws AxisFault {\n         JMSConnectionFactory cf = getConnectionFactory(service);\n         if (cf == null) {\n-            String msg = \"Service \" + service.getName() + \" does not specify\" +\n-                         \"a JMS connection factory or refers to an invalid factory. \" +\n-                         \"This service is being marked as faulty and will not be \" +\n-                         \"available over the JMS transport\";\n-            log.warn(msg);\n-            BaseUtils.markServiceAsFaulty(service.getName(), msg, service.getAxisConfiguration());\n-            disableTransportForService(service);\n-            return;\n+            throw new AxisFault(\"The service doesn't specify a JMS connection factory or refers \" +\n+            \t\t\"to an invalid factory.\");\n         }\n \n         JMSEndpoint endpoint = new JMSEndpoint();\n@@ -175,7 +169,7 @@ protected void startListeningForService(AxisService service) {\n                     JMSConstants.DESTINATION_TYPE_TOPIC.equals(paramValue) )  {\n                 endpoint.setDestinationType(paramValue);\n             } else {\n-                throw new AxisJMSException(\"Invalid destinaton type value \" + paramValue);\n+                throw new AxisFault(\"Invalid destinaton type value \" + paramValue);\n             }\n         } else {\n             log.debug(\"JMS destination type not given. default queue\");\n@@ -195,12 +189,7 @@ protected void startListeningForService(AxisService service) {\n             contentTypeRuleSet.addRule(new MessageTypeRule(TextMessage.class, \"text/plain\"));\n             endpoint.setContentTypeRuleSet(contentTypeRuleSet);\n         } else {\n-            try {\n-                endpoint.setContentTypeRuleSet(ContentTypeRuleFactory.parse(contentTypeParam));\n-            } catch (AxisFault ex) {\n-                // TODO: this is ugly; we should allow startListeningForService to throw AxisFaults\n-                throw new AxisJMSException(\"Invalid value in parameter \" + JMSConstants.CONTENT_TYPE_PARAM, ex);\n-            }\n+            endpoint.setContentTypeRuleSet(ContentTypeRuleFactory.parse(contentTypeParam));\n         }\n         \n         log.info(\"Starting to listen on destination : \" + endpoint.getJndiDestinationName() + \" of type \"", "filename": "modules/jms/src/main/java/org/apache/axis2/transport/jms/JMSListener.java"}], "repo": "axis2-transports"}]
