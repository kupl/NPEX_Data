{
    "synapse_13bcc2a": {
        "bug_id": "synapse_13bcc2a",
        "commit": "https://github.com/apache/synapse/commit/13bcc2a11be1cf6fac002ece3c3de2ce4cbd22f3",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/synapse/blob/13bcc2a11be1cf6fac002ece3c3de2ce4cbd22f3/java/modules/extensions/src/main/java/org/apache/synapse/mediators/bsf/ScriptMediator.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/synapse/contents/java/modules/extensions/src/main/java/org/apache/synapse/mediators/bsf/ScriptMediator.java?ref=13bcc2a11be1cf6fac002ece3c3de2ce4cbd22f3",
                "deletions": 1,
                "filename": "java/modules/extensions/src/main/java/org/apache/synapse/mediators/bsf/ScriptMediator.java",
                "patch": "@@ -154,7 +154,12 @@ private boolean mediateWithExternalScript(MessageContext synCtx) {\n             } else {\r\n                 // load script if not already loaded\r\n                 if (scriptSourceCode == null) {\r\n-                    scriptSourceCode = ((OMElement) (synCtx.getEntry(key))).getText();\r\n+                    Object o = synCtx.getEntry(key);\r\n+                    if (o instanceof OMElement) {\r\n+                        scriptSourceCode = ((OMElement) (o)).getText();\r\n+                    } else if (o instanceof String) {\r\n+                        scriptSourceCode = (String) o;\r\n+                    }\r\n                 }\r\n                 // load BSFEngine if not already loaded\r\n                 if (bsfEngine == null) {\r",
                "raw_url": "https://github.com/apache/synapse/raw/13bcc2a11be1cf6fac002ece3c3de2ce4cbd22f3/java/modules/extensions/src/main/java/org/apache/synapse/mediators/bsf/ScriptMediator.java",
                "sha": "10acf22272f6f362d79d9f14e05bdae54a178516",
                "status": "modified"
            }
        ],
        "message": "fix NPE and support loading text scripts from local registry and OMElements from remote\n\ngit-svn-id: https://svn.apache.org/repos/asf/webservices/synapse/trunk@518561 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/synapse/commit/0819a17529fbbaa22e241f909cd7e906805e1ab3",
        "repo": "synapse",
        "unit_tests": [
            "ScriptMediatorTest.java"
        ]
    },
    "synapse_3d3a6e0": {
        "bug_id": "synapse_3d3a6e0",
        "commit": "https://github.com/apache/synapse/commit/3d3a6e0454590031cc4cea4d02b1aef27e5dbd43",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/synapse/blob/3d3a6e0454590031cc4cea4d02b1aef27e5dbd43/java/modules/extensions/src/main/java/org/apache/synapse/mediators/throttle/ThrottleMediator.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/synapse/contents/java/modules/extensions/src/main/java/org/apache/synapse/mediators/throttle/ThrottleMediator.java?ref=3d3a6e0454590031cc4cea4d02b1aef27e5dbd43",
                "deletions": 5,
                "filename": "java/modules/extensions/src/main/java/org/apache/synapse/mediators/throttle/ThrottleMediator.java",
                "patch": "@@ -83,10 +83,11 @@ public boolean mediate(MessageContext synCtx) {\n      * @return boolean which indicate whether this caller can or not access\n      */\n     protected boolean canAccess(MessageContext synContext, boolean shouldTrace) {\n-        boolean canAccess = true;\n         if (throttle == null) {\n             log.debug(\"Can not find a throttle\");\n+            return true;\n         }\n+        boolean canAccess = true;               \n         org.apache.axis2.context.MessageContext axis2MessageContext\n                 = ((Axis2MessageContext) synContext).getAxis2MessageContext();\n         //IP based throttling\n@@ -173,16 +174,16 @@ protected void init(MessageContext synContext, boolean shouldTrace) {\n         if (policyKey != null) {\n             Entry entry = synContext.getConfiguration().getEntryDefinition(policyKey);\n             if (entry == null) {\n-                log.warn(\"Cant not find a Entry from the Entry key \" + policyKey);\n+                log.debug(\"Cant not find a Entry from the Entry key \" + policyKey);\n                 return;\n             }\n             Object entryValue = entry.getValue();\n             if (entryValue == null) {\n-                log.warn(\"Cant not find a Policy(Enrty value) from the Entry key \" + policyKey);\n+                log.debug(\"Cant not find a Policy(Enrty value) from the Entry key \" + policyKey);\n                 return;\n             }\n             if (!(entryValue instanceof OMElement)) {\n-                log.warn(\"Entry value which is refered from the key \" + policyKey + \" is Incompatible \" +\n+                log.debug(\"Entry value which is refered from the key \" + policyKey + \" is Incompatible \" +\n                         \"for the policy element\");\n                 return;\n             }\n@@ -195,7 +196,7 @@ protected void init(MessageContext synContext, boolean shouldTrace) {\n             policyOmElement = inLinePolicy;\n         }\n         if (policyOmElement == null) {\n-            log.warn(\"Cant not find a Policy - Throttling will not occur\");\n+            log.debug(\"Cant not find a Policy - Throttling will not occur\");\n             return;\n         }\n         if (shouldTrace) {",
                "raw_url": "https://github.com/apache/synapse/raw/3d3a6e0454590031cc4cea4d02b1aef27e5dbd43/java/modules/extensions/src/main/java/org/apache/synapse/mediators/throttle/ThrottleMediator.java",
                "sha": "d7bec17f4ae308503841608d48eda3fd52079b95",
                "status": "modified"
            }
        ],
        "message": "fixed NPE in the throttle mediator \n\ngit-svn-id: https://svn.apache.org/repos/asf/webservices/synapse/trunk@540501 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/synapse/commit/83bb7b082271fa061d94d7840007234ce51ced0a",
        "repo": "synapse",
        "unit_tests": [
            "ThrottleMediatorTest.java"
        ]
    },
    "synapse_5ac5aa6": {
        "bug_id": "synapse_5ac5aa6",
        "commit": "https://github.com/apache/synapse/commit/5ac5aa645cff6c2be6809bb08431ab3089b9a1f3",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/synapse/blob/5ac5aa645cff6c2be6809bb08431ab3089b9a1f3/java/modules/extensions/src/main/java/org/apache/synapse/mediators/xquery/XQueryMediator.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/synapse/contents/java/modules/extensions/src/main/java/org/apache/synapse/mediators/xquery/XQueryMediator.java?ref=5ac5aa645cff6c2be6809bb08431ab3089b9a1f3",
                "deletions": 1,
                "filename": "java/modules/extensions/src/main/java/org/apache/synapse/mediators/xquery/XQueryMediator.java",
                "patch": "@@ -305,7 +305,7 @@ private void performQuery(MessageContext synCtx, SynapseLog synLog) {\n                 }\n \n                 //Bind the external variables to the DynamicContext\n-                if (variables != null & !variables.isEmpty()) {\n+                if (variables != null && !variables.isEmpty()) {\n                     synLog.traceOrDebug(\"Binding  external variables to the DynamicContext\");\n                     for (int i = 0; i < variables.size(); i++) {\n                         MediatorVariable variable = (MediatorVariable) variables.get(i);",
                "raw_url": "https://github.com/apache/synapse/raw/5ac5aa645cff6c2be6809bb08431ab3089b9a1f3/java/modules/extensions/src/main/java/org/apache/synapse/mediators/xquery/XQueryMediator.java",
                "sha": "fba246d686a67c25f99dc00623e863591a9fc194",
                "status": "modified"
            }
        ],
        "message": "SYNAPSE-505: Fix NPE in XQueryMediator due to invalid non short-circuited if. Thanks to Dave Brosius for catching this.\n\ngit-svn-id: https://svn.apache.org/repos/asf/synapse/trunk@744661 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/synapse/commit/66329ea0fcd6538502bdb2d06db18461f04469db",
        "repo": "synapse",
        "unit_tests": [
            "XQueryMediatorTest.java"
        ]
    },
    "synapse_a84e85f": {
        "bug_id": "synapse_a84e85f",
        "commit": "https://github.com/apache/synapse/commit/a84e85f46ea045bc4205daba27765f42705aaf02",
        "file": [
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/synapse/blob/a84e85f46ea045bc4205daba27765f42705aaf02/java/modules/extensions/src/main/java/org/apache/synapse/mediators/throttle/ThrottleMediator.java",
                "changes": 48,
                "contents_url": "https://api.github.com/repos/apache/synapse/contents/java/modules/extensions/src/main/java/org/apache/synapse/mediators/throttle/ThrottleMediator.java?ref=a84e85f46ea045bc4205daba27765f42705aaf02",
                "deletions": 23,
                "filename": "java/modules/extensions/src/main/java/org/apache/synapse/mediators/throttle/ThrottleMediator.java",
                "patch": "@@ -352,32 +352,34 @@ private synchronized void createThrottleMetaData(OMElement policy,\n                 }\n             }\n \n-            includesIPThrottling = (\n-                throttle.getThrottleContext(ThrottleConstants.IP_BASED_THROTTLE_KEY) != null);\n+            if (throttle != null) {\n \n-            if (id != null) {\n-                concurrentAccessController = throttle.getConcurrentAccessController();\n-                concurrentLimit = concurrentAccessController.getLimit();\n+                includesIPThrottling = (\n+                    throttle.getThrottleContext(ThrottleConstants.IP_BASED_THROTTLE_KEY) != null);\n \n-                if (traceOrDebugOn) {\n-                    traceOrDebug(traceOn,\n-                        \"Initiating ConcurrentAccessControler for throttle group id : \" + id\n-                            + \" limit : \" + concurrentLimit);\n-                }\n-                \n-                org.apache.axis2.context.MessageContext axis2MessageContext\n-                    = ((Axis2MessageContext) synCtx).getAxis2MessageContext();\n-                ConfigurationContext configctx = axis2MessageContext.getConfigurationContext();\n-                Map accessContollers = (Map) configctx.getProperty(KEY);\n+                if (id != null) {\n+                    concurrentAccessController = throttle.getConcurrentAccessController();\n \n-                if(accessContollers == null){\n-                    accessContollers = new HashMap();\n-                    configctx.setProperty(KEY,accessContollers);\n-                }\n-                if (concurrentAccessController == null) {\n-                    accessContollers.remove(id);\n-                } else {\n-                    accessContollers.put(id, concurrentAccessController);\n+                    org.apache.axis2.context.MessageContext axis2MessageContext\n+                        = ((Axis2MessageContext) synCtx).getAxis2MessageContext();\n+                    ConfigurationContext configctx = axis2MessageContext.getConfigurationContext();\n+                    Map accessContollers = (Map) configctx.getProperty(KEY);\n+\n+                    if (accessContollers == null) {\n+                        accessContollers = new HashMap();\n+                        configctx.setProperty(KEY, accessContollers);\n+                    }\n+                    if (concurrentAccessController == null) {\n+                        accessContollers.remove(id);\n+                    } else {\n+                        concurrentLimit = concurrentAccessController.getLimit();\n+                        if (traceOrDebugOn) {\n+                            traceOrDebug(traceOn,\n+                                \"Initiating ConcurrentAccessControler for throttle group id : \" + id\n+                                    + \" limit : \" + concurrentLimit);\n+                        }\n+                        accessContollers.put(id, concurrentAccessController);\n+                    }\n                 }\n             }\n         }",
                "raw_url": "https://github.com/apache/synapse/raw/a84e85f46ea045bc4205daba27765f42705aaf02/java/modules/extensions/src/main/java/org/apache/synapse/mediators/throttle/ThrottleMediator.java",
                "sha": "161a232f9996e330345ba9a2f9bfde431bcc09fa",
                "status": "modified"
            }
        ],
        "message": "fixed NPE issue in throttle mediator\n\ngit-svn-id: https://svn.apache.org/repos/asf/webservices/synapse/trunk@592020 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/synapse/commit/3ee12ded1107f4292d2394b60fb2cd13721a0c2c",
        "repo": "synapse",
        "unit_tests": [
            "ThrottleMediatorTest.java"
        ]
    }
}