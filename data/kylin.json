{
    "kylin_023866b": {
        "bug_id": "kylin_023866b",
        "commit": "https://github.com/apache/kylin/commit/023866b0cc57632a8a90259a0c0073966875fdd3",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/kylin/blob/023866b0cc57632a8a90259a0c0073966875fdd3/server/src/main/java/org/apache/kylin/rest/service/CubeService.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server/src/main/java/org/apache/kylin/rest/service/CubeService.java?ref=023866b0cc57632a8a90259a0c0073966875fdd3",
                "deletions": 3,
                "filename": "server/src/main/java/org/apache/kylin/rest/service/CubeService.java",
                "patch": "@@ -216,8 +216,10 @@ public CubeInstance createCubeAndDesc(String cubeName, String projectName, CubeD\n         for (RealizationEntry projectDataModel : project.getRealizationEntries()) {\n             if (projectDataModel.getType() == RealizationType.CUBE) {\n                 CubeInstance cube = getCubeManager().getCube(projectDataModel.getRealization());\n-                assert cube != null;\n-                result.add(cube);\n+                if (cube != null)\n+                    result.add(cube);\n+                else\n+                    logger.error(\"Cube instance \" + projectDataModel.getRealization() + \" is failed to load\");\n             }\n         }\n         return result;\n@@ -232,7 +234,10 @@ private boolean isCubeInProject(String projectName, CubeInstance target) {\n         for (RealizationEntry projectDataModel : project.getRealizationEntries()) {\n             if (projectDataModel.getType() == RealizationType.CUBE) {\n                 CubeInstance cube = getCubeManager().getCube(projectDataModel.getRealization());\n-                assert cube != null;\n+                if (cube == null) {\n+                    logger.error(\"Project \" + projectName + \" contains realization \" + projectDataModel.getRealization() + \" which is not found by CubeManager\");\n+                    continue;\n+                }\n                 if (cube.equals(target)) {\n                     return true;\n                 }",
                "raw_url": "https://github.com/apache/kylin/raw/023866b0cc57632a8a90259a0c0073966875fdd3/server/src/main/java/org/apache/kylin/rest/service/CubeService.java",
                "sha": "c3a19f6b0785b9554ecb792f2cdb7e7f7c88067d",
                "status": "modified"
            }
        ],
        "message": "minor, patch a NPE in CubeService.isCubeInProject() and CubeService.listAllCubes()",
        "parent": "https://github.com/apache/kylin/commit/2d4c5097d37982ca84ff9b9d641fa39c056f1d74",
        "repo": "kylin",
        "unit_tests": [
            "CubeServiceTest.java"
        ]
    },
    "kylin_052d609": {
        "bug_id": "kylin_052d609",
        "commit": "https://github.com/apache/kylin/commit/052d6096779d5826ba24517b0b4cc9a45b78bf4a",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/kylin/blob/052d6096779d5826ba24517b0b4cc9a45b78bf4a/server-base/src/main/java/org/apache/kylin/rest/service/AccessService.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/service/AccessService.java?ref=052d6096779d5826ba24517b0b4cc9a45b78bf4a",
                "deletions": 1,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/service/AccessService.java",
                "patch": "@@ -19,6 +19,7 @@\n package org.apache.kylin.rest.service;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n \n import org.apache.kylin.common.persistence.AclEntity;\n@@ -297,8 +298,11 @@ public Sid getSid(String sid, boolean isPrincepal) {\n     }\n \n     public List<AccessEntryResponse> generateAceResponses(Acl acl) {\n-        List<AccessEntryResponse> result = new ArrayList<AccessEntryResponse>();\n+        if (null == acl) {\n+            return Collections.emptyList();\n+        }\n \n+        List<AccessEntryResponse> result = new ArrayList<AccessEntryResponse>();\n         for (AccessControlEntry ace : acl.getEntries()) {\n             result.add(new AccessEntryResponse(ace.getId(), ace.getSid(), ace.getPermission(), ace.isGranting()));\n         }",
                "raw_url": "https://github.com/apache/kylin/raw/052d6096779d5826ba24517b0b4cc9a45b78bf4a/server-base/src/main/java/org/apache/kylin/rest/service/AccessService.java",
                "sha": "ae7ac6e045e610a17334e4b5446bf6e2d32d94fa",
                "status": "modified"
            }
        ],
        "message": "minor, fix ACL NPE",
        "parent": "https://github.com/apache/kylin/commit/8ca0d3217453929d0ac0c3078d9e78e769f852b0",
        "repo": "kylin",
        "unit_tests": [
            "AccessServiceTest.java"
        ]
    },
    "kylin_0e675cf": {
        "bug_id": "kylin_0e675cf",
        "commit": "https://github.com/apache/kylin/commit/0e675cf2cbaa9f2bc9a520aaef82443641efb8ca",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/kylin/blob/0e675cf2cbaa9f2bc9a520aaef82443641efb8ca/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/JobInfoConverter.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/JobInfoConverter.java?ref=0e675cf2cbaa9f2bc9a520aaef82443641efb8ca",
                "deletions": 1,
                "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/common/JobInfoConverter.java",
                "patch": "@@ -63,11 +63,16 @@ public static JobInstance parseToJobInstance(AbstractExecutable job, Map<String,\n     }\n \n     public static JobInstance.JobStep parseToJobStep(AbstractExecutable task, int i, Output stepOutput) {\n-        Preconditions.checkNotNull(stepOutput);\n         JobInstance.JobStep result = new JobInstance.JobStep();\n         result.setId(task.getId());\n         result.setName(task.getName());\n         result.setSequenceID(i);\n+\n+        if (stepOutput == null) {\n+            result.setStatus(JobStepStatusEnum.ERROR);\n+            return result;\n+        }\n+\n         result.setStatus(parseToJobStepStatus(stepOutput.getState()));\n         for (Map.Entry<String, String> entry : stepOutput.getExtra().entrySet()) {\n             if (entry.getKey() != null && entry.getValue() != null) {",
                "raw_url": "https://github.com/apache/kylin/raw/0e675cf2cbaa9f2bc9a520aaef82443641efb8ca/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/JobInfoConverter.java",
                "sha": "ec5aef1f0c16a7ea9c78938049710023b82b1b1a",
                "status": "modified"
            }
        ],
        "message": "KYLIN-2707 Fix NPE in JobInfoConverter",
        "parent": "https://github.com/apache/kylin/commit/0dc2cd4665efd32d2f782e53382f86e5dadb720a",
        "repo": "kylin",
        "unit_tests": [
            "JobInfoConverterTest.java"
        ]
    },
    "kylin_2415fd9": {
        "bug_id": "kylin_2415fd9",
        "commit": "https://github.com/apache/kylin/commit/2415fd9e65b7bf483c375eda7d074c6804edb60e",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/kylin/blob/2415fd9e65b7bf483c375eda7d074c6804edb60e/server-base/src/main/java/org/apache/kylin/rest/util/ValidateUtil.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/util/ValidateUtil.java?ref=2415fd9e65b7bf483c375eda7d074c6804edb60e",
                "deletions": 2,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/util/ValidateUtil.java",
                "patch": "@@ -122,8 +122,10 @@ public void validateColumn(String project, String table, Collection<String> colu\n         ProjectInstance prj = projectService.getProjectManager().getProject(project);\n         AclEntity ae = accessService.getAclEntity(\"ProjectInstance\", prj.getUuid());\n         Acl acl = accessService.getAcl(ae);\n-        for (AccessControlEntry ace : acl.getEntries()) {\n-            allUsers.add(((PrincipalSid) ace.getSid()).getPrincipal());\n+        if (acl != null && acl.getEntries() != null) {\n+            for (AccessControlEntry ace : acl.getEntries()) {\n+                allUsers.add(((PrincipalSid) ace.getSid()).getPrincipal());\n+            }\n         }\n         return allUsers;\n     }",
                "raw_url": "https://github.com/apache/kylin/raw/2415fd9e65b7bf483c375eda7d074c6804edb60e/server-base/src/main/java/org/apache/kylin/rest/util/ValidateUtil.java",
                "sha": "7e513aeb07029dae76e9b4ca7453b2485714b73f",
                "status": "modified"
            }
        ],
        "message": "minor, fix NPE in ACL ValidateUtil getALlUsers",
        "parent": "https://github.com/apache/kylin/commit/bd7cb9c9570f3d3cb0ceeb8f4c6be81853eb59bd",
        "repo": "kylin",
        "unit_tests": [
            "ValidateUtilTest.java"
        ]
    },
    "kylin_263791d": {
        "bug_id": "kylin_263791d",
        "commit": "https://github.com/apache/kylin/commit/263791d2bed483a1a496450ee33d8a1c73ec0a98",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/kylin/blob/263791d2bed483a1a496450ee33d8a1c73ec0a98/server-base/src/main/java/org/apache/kylin/rest/service/ModelService.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/service/ModelService.java?ref=263791d2bed483a1a496450ee33d8a1c73ec0a98",
                "deletions": 1,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/service/ModelService.java",
                "patch": "@@ -365,7 +365,7 @@ private String checkIfBreakExistingCubes(DataModelDesc dataModelDesc, String pro\n \n         StringBuilder checkRet = new StringBuilder();\n         if (cubes != null && cubes.size() != 0) {\n-            dataModelDesc.init(getConfig(), getMetadataManager().getAllTablesMap(dataModelDesc.getProject()),\n+            dataModelDesc.init(getConfig(), getMetadataManager().getAllTablesMap(project),\n                     getMetadataManager().listDataModels());\n \n             List<String> curModelDims = getModelCols(dataModelDesc);",
                "raw_url": "https://github.com/apache/kylin/raw/263791d2bed483a1a496450ee33d8a1c73ec0a98/server-base/src/main/java/org/apache/kylin/rest/service/ModelService.java",
                "sha": "8b1ebb34ce7234d9c6d8a6a39281604fa1906f81",
                "status": "modified"
            }
        ],
        "message": "minor, fix NPE when saving model",
        "parent": "https://github.com/apache/kylin/commit/5d8adbf0def0a2c034d7a1547e736c8044889fd9",
        "repo": "kylin",
        "unit_tests": [
            "ModelServiceTest.java"
        ]
    },
    "kylin_2a8d994": {
        "bug_id": "kylin_2a8d994",
        "commit": "https://github.com/apache/kylin/commit/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/BatchCubingJobBuilder2.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/BatchCubingJobBuilder2.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468",
                "deletions": 5,
                "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/BatchCubingJobBuilder2.java",
                "patch": "@@ -72,7 +72,7 @@ public CubingJob build() {\n         result.addTask(createSaveStatisticsStep(jobId));\n \n         // add materialize lookup tables if needed\n-        addMaterializeLookupTableSteps(result);\n+        LookupMaterializeContext lookupMaterializeContext = addMaterializeLookupTableSteps(result);\n \n         outputSide.addStepPhase2_BuildDictionary(result);\n \n@@ -82,7 +82,7 @@ public CubingJob build() {\n         outputSide.addStepPhase3_BuildCube(result);\n \n         // Phase 4: Update Metadata & Cleanup\n-        result.addTask(createUpdateCubeInfoAfterBuildStep(jobId));\n+        result.addTask(createUpdateCubeInfoAfterBuildStep(jobId, lookupMaterializeContext));\n         inputSide.addStepPhase4_Cleanup(result);\n         outputSide.addStepPhase4_Cleanup(result);\n \n@@ -102,16 +102,19 @@ private boolean isEnableUHCDictStep() {\n         return true;\n     }\n \n-    private void addMaterializeLookupTableSteps(final CubingJob result) {\n+    private LookupMaterializeContext addMaterializeLookupTableSteps(final CubingJob result) {\n+        LookupMaterializeContext lookupMaterializeContext = new LookupMaterializeContext(result);\n         CubeDesc cubeDesc = seg.getCubeDesc();\n         List<String> allSnapshotTypes = cubeDesc.getAllExtLookupSnapshotTypes();\n         if (allSnapshotTypes.isEmpty()) {\n-            return;\n+            return null;\n         }\n         for (String snapshotType : allSnapshotTypes) {\n+            logger.info(\"add lookup table materialize steps for storage type:{}\", snapshotType);\n             ILookupMaterializer materializer = MRUtil.getExtLookupMaterializer(snapshotType);\n-            materializer.materializeLookupTablesForCube(result, seg.getCubeInstance());\n+            materializer.materializeLookupTablesForCube(lookupMaterializeContext, seg.getCubeInstance());\n         }\n+        return lookupMaterializeContext;\n     }\n \n     protected void addLayerCubingSteps(final CubingJob result, final String jobId, final String cuboidRootPath) {",
                "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/BatchCubingJobBuilder2.java",
                "sha": "b1149edf092134c845f334971a2eaa0163a45e1c",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/ILookupMaterializer.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/ILookupMaterializer.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468",
                "deletions": 3,
                "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/ILookupMaterializer.java",
                "patch": "@@ -19,10 +19,22 @@\n package org.apache.kylin.engine.mr;\n \n import org.apache.kylin.cube.CubeInstance;\n-import org.apache.kylin.job.execution.DefaultChainedExecutable;\n \n public interface ILookupMaterializer {\n-    void materializeLookupTable(DefaultChainedExecutable jobFlow, CubeInstance cube, String lookupTableName);\n+    /**\n+     * materialize lookup table\n+     * @param context materialize context, the snapshotPath of lookup table should be put into context\n+     *                via {@code LookupMaterializeContext.addLookupSnapshotPath} method\n+     * @param cube\n+     * @param lookupTableName\n+     */\n+    void materializeLookupTable(LookupMaterializeContext context, CubeInstance cube, String lookupTableName);\n \n-    void materializeLookupTablesForCube(DefaultChainedExecutable jobFlow, CubeInstance cube);\n+    /**\n+     * materialize all ext lookup tables in the cube\n+     * @param context materialize context, the snapshotPath of lookup table should be put into context\n+     *                via {@code LookupMaterializeContext.addLookupSnapshotPath} method\n+     * @param cube\n+     */\n+    void materializeLookupTablesForCube(LookupMaterializeContext context, CubeInstance cube);\n }",
                "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/ILookupMaterializer.java",
                "sha": "6ec485765ef75a7c0eb20f9c73d7306e9ddb6831",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/JobBuilderSupport.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/JobBuilderSupport.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468",
                "deletions": 1,
                "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/JobBuilderSupport.java",
                "patch": "@@ -135,10 +135,13 @@ public HadoopShellExecutable createBuildDictionaryStep(String jobId) {\n         return buildDictionaryStep;\n     }\n \n-    public UpdateCubeInfoAfterBuildStep createUpdateCubeInfoAfterBuildStep(String jobId) {\n+    public UpdateCubeInfoAfterBuildStep createUpdateCubeInfoAfterBuildStep(String jobId, LookupMaterializeContext lookupMaterializeContext) {\n         final UpdateCubeInfoAfterBuildStep result = new UpdateCubeInfoAfterBuildStep();\n         result.setName(ExecutableConstants.STEP_NAME_UPDATE_CUBE_INFO);\n         result.getParams().put(BatchConstants.CFG_OUTPUT_PATH, getFactDistinctColumnsPath(jobId));\n+        if (lookupMaterializeContext != null) {\n+            result.getParams().put(BatchConstants.ARG_EXT_LOOKUP_SNAPSHOTS_INFO, lookupMaterializeContext.getAllLookupSnapshotsInString());\n+        }\n \n         CubingExecutableUtil.setCubeName(seg.getRealization().getName(), result.getParams());\n         CubingExecutableUtil.setSegmentId(seg.getUuid(), result.getParams());",
                "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/JobBuilderSupport.java",
                "sha": "6458a6a4cbba0659b774373caae43258e16a61d2",
                "status": "modified"
            },
            {
                "additions": 84,
                "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupMaterializeContext.java",
                "changes": 84,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupMaterializeContext.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468",
                "deletions": 0,
                "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupMaterializeContext.java",
                "patch": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.apache.kylin.engine.mr;\n+\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.apache.kylin.job.execution.DefaultChainedExecutable;\n+\n+import com.google.common.collect.Maps;\n+\n+public class LookupMaterializeContext {\n+    private DefaultChainedExecutable jobFlow;\n+    private Map<String, String> lookupSnapshotMap;\n+\n+    public LookupMaterializeContext(DefaultChainedExecutable jobFlow) {\n+        this.jobFlow = jobFlow;\n+        this.lookupSnapshotMap = Maps.newHashMap();\n+    }\n+\n+    public DefaultChainedExecutable getJobFlow() {\n+        return jobFlow;\n+    }\n+\n+    /**\n+     * add snapshot path info into the context\n+     * @param lookupTable\n+     * @param snapshotPath\n+     */\n+    public void addLookupSnapshotPath(String lookupTable, String snapshotPath) {\n+        lookupSnapshotMap.put(lookupTable, snapshotPath);\n+    }\n+\n+    /**\n+     *\n+     * @return string format of lookup snapshotPath info, it will return like: \"lookup1=/path/uuid1,lookup2=/path/uuid2\"\n+     *\n+     */\n+    public String getAllLookupSnapshotsInString() {\n+        StringBuilder result = new StringBuilder();\n+        boolean first = true;\n+        for (Entry<String, String> lookupSnapshotEntry : lookupSnapshotMap.entrySet()) {\n+            if (!first) {\n+                result.append(\",\");\n+            }\n+            first = false;\n+            result.append(lookupSnapshotEntry.getKey());\n+            result.append(\"=\");\n+            result.append(lookupSnapshotEntry.getValue());\n+        }\n+        return result.toString();\n+    }\n+\n+    /**\n+     * parse the lookup snapshot string to lookup snapshot path map.\n+     * @param snapshotsString\n+     * @return\n+     */\n+    public static Map<String, String> parseLookupSnapshots(String snapshotsString) {\n+        Map<String, String> lookupSnapshotMap = Maps.newHashMap();\n+        String[] lookupSnapshotEntries = snapshotsString.split(\",\");\n+        for (String lookupSnapshotEntryStr : lookupSnapshotEntries) {\n+            String[] split = lookupSnapshotEntryStr.split(\"=\");\n+            lookupSnapshotMap.put(split[0], split[1]);\n+        }\n+        return lookupSnapshotMap;\n+    }\n+}",
                "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupMaterializeContext.java",
                "sha": "f235283576e4fa8c616de8c696c90bbc8831b777",
                "status": "added"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupSnapshotJobBuilder.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupSnapshotJobBuilder.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468",
                "deletions": 1,
                "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupSnapshotJobBuilder.java",
                "patch": "@@ -24,6 +24,7 @@\n import org.apache.kylin.cube.CubeInstance;\n import org.apache.kylin.cube.model.CubeDesc;\n import org.apache.kylin.cube.model.SnapshotTableDesc;\n+import org.apache.kylin.engine.mr.common.BatchConstants;\n import org.apache.kylin.engine.mr.steps.lookup.LookupExecutableUtil;\n import org.apache.kylin.engine.mr.steps.lookup.LookupSnapshotToMetaStoreStep;\n import org.apache.kylin.engine.mr.steps.lookup.UpdateCubeAfterSnapshotStep;\n@@ -62,11 +63,14 @@ public LookupSnapshotBuildJob build() {\n \n     private void addExtMaterializeLookupTableSteps(final LookupSnapshotBuildJob result,\n             SnapshotTableDesc snapshotTableDesc) {\n+        LookupMaterializeContext lookupMaterializeContext = new LookupMaterializeContext(result);\n         ILookupMaterializer materializer = MRUtil.getExtLookupMaterializer(snapshotTableDesc.getStorageType());\n-        materializer.materializeLookupTable(result, cube, lookupTable);\n+        materializer.materializeLookupTable(lookupMaterializeContext, cube, lookupTable);\n \n         UpdateCubeAfterSnapshotStep afterSnapshotStep = new UpdateCubeAfterSnapshotStep();\n         afterSnapshotStep.setName(ExecutableConstants.STEP_NAME_MATERIALIZE_LOOKUP_TABLE_UPDATE_CUBE);\n+\n+        afterSnapshotStep.getParams().put(BatchConstants.ARG_EXT_LOOKUP_SNAPSHOTS_INFO, lookupMaterializeContext.getAllLookupSnapshotsInString());\n         LookupExecutableUtil.setCubeName(cube.getName(), afterSnapshotStep.getParams());\n         LookupExecutableUtil.setLookupTableName(lookupTable, afterSnapshotStep.getParams());\n         LookupExecutableUtil.setSegments(segments, afterSnapshotStep.getParams());",
                "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupSnapshotJobBuilder.java",
                "sha": "fff9bcf19a1d40d882375fbdd8bfc422f60d19de",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/BatchConstants.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/BatchConstants.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468",
                "deletions": 5,
                "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/common/BatchConstants.java",
                "patch": "@@ -99,6 +99,7 @@\n     String ARG_DICT_PATH = \"dictPath\";\n     String ARG_TABLE_NAME = \"tableName\";\n     String ARG_LOOKUP_SNAPSHOT_ID = \"snapshotID\";\n+    String ARG_EXT_LOOKUP_SNAPSHOTS_INFO = \"extlookupsnapshots\";\n \n     /**\n      * logger and counter\n@@ -111,10 +112,5 @@\n      */\n     String GLOBAL_DICTIONNARY_CLASS = \"org.apache.kylin.dict.GlobalDictionaryBuilder\";\n \n-    /**\n-     * the prefix of ext lookup table snapshot resource path that stored in the build context\n-     */\n-    String LOOKUP_EXT_SNAPSHOT_CONTEXT_PFX = \"lookup.ext.snapshot.res.path.\";\n-\n     String LOOKUP_EXT_SNAPSHOT_SRC_RECORD_CNT_PFX = \"lookup.ext.snapshot.src.record.cnt.\";\n }",
                "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/BatchConstants.java",
                "sha": "18ac4ac0aecc303a4743bcb4c3526a86cca1d963",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/UpdateCubeInfoAfterBuildStep.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/UpdateCubeInfoAfterBuildStep.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468",
                "deletions": 6,
                "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/UpdateCubeInfoAfterBuildStep.java",
                "patch": "@@ -22,6 +22,7 @@\n import java.io.IOException;\n import java.io.InputStreamReader;\n import java.util.List;\n+import java.util.Map;\n \n import org.apache.commons.io.IOUtils;\n import org.apache.hadoop.fs.FSDataInputStream;\n@@ -33,6 +34,7 @@\n import org.apache.kylin.cube.CubeSegment;\n import org.apache.kylin.cube.model.SnapshotTableDesc;\n import org.apache.kylin.engine.mr.CubingJob;\n+import org.apache.kylin.engine.mr.LookupMaterializeContext;\n import org.apache.kylin.engine.mr.common.BatchConstants;\n import org.apache.kylin.job.exception.ExecuteException;\n import org.apache.kylin.job.execution.AbstractExecutable;\n@@ -73,7 +75,7 @@ protected ExecuteResult doWork(ExecutableContext context) throws ExecuteExceptio\n         segment.setInputRecordsSize(sourceSizeBytes);\n \n         try {\n-            saveExtSnapshotIfNeeded(cubeManager, cubingJob, cube, segment);\n+            saveExtSnapshotIfNeeded(cubeManager, cube, segment);\n             if (segment.isOffsetCube()) {\n                 updateTimeRange(segment);\n             }\n@@ -86,19 +88,26 @@ protected ExecuteResult doWork(ExecutableContext context) throws ExecuteExceptio\n         }\n     }\n \n-    private void saveExtSnapshotIfNeeded(CubeManager cubeManager, CubingJob cubingJob, CubeInstance cube, CubeSegment segment) throws IOException {\n+    private void saveExtSnapshotIfNeeded(CubeManager cubeManager, CubeInstance cube, CubeSegment segment) throws IOException {\n+        String extLookupSnapshotStr = this.getParam(BatchConstants.ARG_EXT_LOOKUP_SNAPSHOTS_INFO);\n+        if (extLookupSnapshotStr == null || extLookupSnapshotStr.isEmpty()) {\n+            return;\n+        }\n+        Map<String, String> extLookupSnapshotMap = LookupMaterializeContext.parseLookupSnapshots(extLookupSnapshotStr);\n+        logger.info(\"update ext lookup snapshots:{}\", extLookupSnapshotMap);\n         List<SnapshotTableDesc> snapshotTableDescList = cube.getDescriptor().getSnapshotTableDescList();\n         for (SnapshotTableDesc snapshotTableDesc : snapshotTableDescList) {\n             String tableName = snapshotTableDesc.getTableName();\n             if (snapshotTableDesc.isExtSnapshotTable()) {\n-                String contextKey = BatchConstants.LOOKUP_EXT_SNAPSHOT_CONTEXT_PFX + tableName;\n-                String newSnapshotResPath = cubingJob.getExtraInfo(contextKey);\n-                if (newSnapshotResPath == null) {\n+                String newSnapshotResPath = extLookupSnapshotMap.get(tableName);\n+                if (newSnapshotResPath == null || newSnapshotResPath.isEmpty()) {\n                     continue;\n                 }\n \n                 if (snapshotTableDesc.isGlobal()) {\n-                    cubeManager.updateCubeLookupSnapshot(cube, tableName, newSnapshotResPath);\n+                    if (!newSnapshotResPath.equals(cube.getSnapshotResPath(tableName))) {\n+                        cubeManager.updateCubeLookupSnapshot(cube, tableName, newSnapshotResPath);\n+                    }\n                 } else {\n                     segment.putSnapshotResPath(tableName, newSnapshotResPath);\n                 }",
                "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/UpdateCubeInfoAfterBuildStep.java",
                "sha": "f749c80a09a72ad32109eb7b748c343904b46edb",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/lookup/UpdateCubeAfterSnapshotStep.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/lookup/UpdateCubeAfterSnapshotStep.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468",
                "deletions": 5,
                "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/lookup/UpdateCubeAfterSnapshotStep.java",
                "patch": "@@ -20,15 +20,16 @@\n \n import java.io.IOException;\n import java.util.List;\n+import java.util.Map;\n \n import org.apache.kylin.common.KylinConfig;\n import org.apache.kylin.cube.CubeInstance;\n import org.apache.kylin.cube.CubeManager;\n import org.apache.kylin.cube.model.CubeDesc;\n+import org.apache.kylin.engine.mr.LookupMaterializeContext;\n import org.apache.kylin.engine.mr.common.BatchConstants;\n import org.apache.kylin.job.exception.ExecuteException;\n import org.apache.kylin.job.execution.AbstractExecutable;\n-import org.apache.kylin.job.execution.DefaultChainedExecutable;\n import org.apache.kylin.job.execution.ExecutableContext;\n import org.apache.kylin.job.execution.ExecuteResult;\n import org.slf4j.Logger;\n@@ -53,17 +54,21 @@ protected ExecuteResult doWork(ExecutableContext context) throws ExecuteExceptio\n         CubeInstance cube = cubeManager.getCube(LookupExecutableUtil.getCubeName(this.getParams()));\n         List<String> segmentIDs = LookupExecutableUtil.getSegments(this.getParams());\n         String lookupTableName = LookupExecutableUtil.getLookupTableName(this.getParams());\n-        DefaultChainedExecutable job = (DefaultChainedExecutable) getManager().getJob(LookupExecutableUtil.getJobID(this.getParams()));\n \n-        String contextKey = BatchConstants.LOOKUP_EXT_SNAPSHOT_CONTEXT_PFX + lookupTableName;\n-        String snapshotResPath = job.getExtraInfo(contextKey);\n+        String extLookupSnapshotStr = this.getParam(BatchConstants.ARG_EXT_LOOKUP_SNAPSHOTS_INFO);\n+        if (extLookupSnapshotStr == null || extLookupSnapshotStr.isEmpty()) {\n+            return new ExecuteResult();\n+        }\n+\n+        Map<String, String> extLookupSnapshotMap = LookupMaterializeContext.parseLookupSnapshots(extLookupSnapshotStr);\n+        String snapshotResPath = extLookupSnapshotMap.get(lookupTableName);\n         if (snapshotResPath == null) {\n             logger.info(\"no snapshot path exist in the context, so no need to update snapshot path\");\n             return new ExecuteResult();\n         }\n         CubeDesc cubeDesc = cube.getDescriptor();\n         try {\n-            logger.info(\"update snapshot path to cube metadata\");\n+            logger.info(\"update snapshot path:{} to cube:{}\", snapshotResPath, cube.getName());\n             if (cubeDesc.isGlobalSnapshotTable(lookupTableName)) {\n                 if (!snapshotResPath.equals(cube.getSnapshotResPath(lookupTableName))) {\n                     LookupExecutableUtil.updateSnapshotPathToCube(cubeManager, cube, lookupTableName,",
                "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/lookup/UpdateCubeAfterSnapshotStep.java",
                "sha": "514c9409a9c903a2247b80dc2608301dc618a689",
                "status": "modified"
            },
            {
                "additions": 41,
                "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/test/java/org/apache/kylin/engine/mr/steps/LookupMaterializeContextTest.java",
                "changes": 41,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/test/java/org/apache/kylin/engine/mr/steps/LookupMaterializeContextTest.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468",
                "deletions": 0,
                "filename": "engine-mr/src/test/java/org/apache/kylin/engine/mr/steps/LookupMaterializeContextTest.java",
                "patch": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.apache.kylin.engine.mr.steps;\n+\n+import org.apache.kylin.engine.mr.LookupMaterializeContext;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class LookupMaterializeContextTest {\n+    @Test\n+    public void parseAndToStringTest() throws Exception {\n+        LookupMaterializeContext context = new LookupMaterializeContext(null);\n+        context.addLookupSnapshotPath(\"lookup1\", \"/ext_snapshot/uuid1\");\n+        context.addLookupSnapshotPath(\"lookup2\", \"/ext_snapshot/uuid2\");\n+\n+        String lookupSnapshotsStr = context.getAllLookupSnapshotsInString();\n+        Map<String, String> lookupSnapshotMap = LookupMaterializeContext.parseLookupSnapshots(lookupSnapshotsStr);\n+        assertEquals(2, lookupSnapshotMap.size());\n+        assertEquals(\"/ext_snapshot/uuid1\", lookupSnapshotMap.get(\"lookup1\"));\n+        assertEquals(\"/ext_snapshot/uuid2\", lookupSnapshotMap.get(\"lookup2\"));\n+    }\n+}",
                "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/test/java/org/apache/kylin/engine/mr/steps/LookupMaterializeContextTest.java",
                "sha": "a876cb23ea2d0063862094dab9b1a1823882a090",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468",
                "deletions": 0,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java",
                "patch": "@@ -512,6 +512,7 @@ private void releaseAllSegments(CubeInstance cube) throws IOException {\n         update.setToRemoveSegs(cube.getSegments().toArray(new CubeSegment[cube.getSegments().size()]));\n         update.setCuboids(Maps.<Long, Long> newHashMap());\n         update.setCuboidsRecommend(Sets.<Long> newHashSet());\n+        update.setUpdateTableSnapshotPath(Maps.<String, String>newHashMap());\n         CubeManager.getInstance(getConfig()).updateCube(update);\n     }\n ",
                "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java",
                "sha": "da907719fa5cc5360875d789c3b4db1c93b4cc80",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/HBaseLookupMRSteps.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/HBaseLookupMRSteps.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468",
                "deletions": 9,
                "filename": "storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/HBaseLookupMRSteps.java",
                "patch": "@@ -31,6 +31,7 @@\n import org.apache.kylin.dict.lookup.ExtTableSnapshotInfo;\n import org.apache.kylin.dict.lookup.ExtTableSnapshotInfoManager;\n import org.apache.kylin.engine.mr.JobBuilderSupport;\n+import org.apache.kylin.engine.mr.LookupMaterializeContext;\n import org.apache.kylin.engine.mr.common.BatchConstants;\n import org.apache.kylin.engine.mr.common.HadoopShellExecutable;\n import org.apache.kylin.engine.mr.common.MapReduceExecutable;\n@@ -59,7 +60,7 @@ public HBaseLookupMRSteps(CubeInstance cube) {\n         this.config = new JobEngineConfig(cube.getConfig());\n     }\n \n-    public void addMaterializeLookupTablesSteps(DefaultChainedExecutable jobFlow) {\n+    public void addMaterializeLookupTablesSteps(LookupMaterializeContext context) {\n         CubeDesc cubeDesc = cube.getDescriptor();\n         Set<String> allLookupTables = Sets.newHashSet();\n         for (DimensionDesc dim : cubeDesc.getDimensions()) {\n@@ -72,33 +73,34 @@ public void addMaterializeLookupTablesSteps(DefaultChainedExecutable jobFlow) {\n         for (SnapshotTableDesc snapshotTableDesc : snapshotTableDescs) {\n             if (ExtTableSnapshotInfo.STORAGE_TYPE_HBASE.equals(snapshotTableDesc.getStorageType())\n                     && allLookupTables.contains(snapshotTableDesc.getTableName())) {\n-                addMaterializeLookupTableSteps(jobFlow, snapshotTableDesc.getTableName(), snapshotTableDesc);\n+                addMaterializeLookupTableSteps(context, snapshotTableDesc.getTableName(), snapshotTableDesc);\n             }\n         }\n     }\n \n-    public void addMaterializeLookupTableSteps(DefaultChainedExecutable jobFlow, String tableName, SnapshotTableDesc snapshotTableDesc) {\n+    public void addMaterializeLookupTableSteps(LookupMaterializeContext context, String tableName, SnapshotTableDesc snapshotTableDesc) {\n         KylinConfig kylinConfig = KylinConfig.getInstanceFromEnv();\n         ExtTableSnapshotInfoManager extTableSnapshotInfoManager = ExtTableSnapshotInfoManager.getInstance(kylinConfig);\n         TableDesc tableDesc = TableMetadataManager.getInstance(kylinConfig).getTableDesc(tableName, cube.getProject());\n         IReadableTable sourceTable = SourceManager.createReadableTable(tableDesc);\n         try {\n-            ExtTableSnapshotInfo latestSnapshot = extTableSnapshotInfoManager.getLatestSnapshot(sourceTable.getSignature(), tableName);\n+            ExtTableSnapshotInfo latestSnapshot = extTableSnapshotInfoManager.getLatestSnapshot(\n+                    sourceTable.getSignature(), tableName);\n             if (latestSnapshot != null) {\n                 logger.info(\"there is latest snapshot exist for table:{}, skip build snapshot step.\", tableName);\n-                jobFlow.addExtraInfo(BatchConstants.LOOKUP_EXT_SNAPSHOT_CONTEXT_PFX + latestSnapshot.getTableName(),\n-                        latestSnapshot.getResourcePath());\n+                context.addLookupSnapshotPath(tableName, latestSnapshot.getResourcePath());\n                 return;\n             }\n         } catch (IOException ioException) {\n             throw new RuntimeException(ioException);\n         }\n         logger.info(\"add build snapshot steps for table:{}\", tableName);\n         String snapshotID = genLookupSnapshotID();\n-        addLookupTableConvertToHFilesStep(jobFlow, tableName, snapshotID);\n-        addLookupTableHFilesBulkLoadStep(jobFlow, tableName, snapshotID);\n+        context.addLookupSnapshotPath(tableName, ExtTableSnapshotInfo.getResourcePath(tableName, snapshotID));\n+        addLookupTableConvertToHFilesStep(context.getJobFlow(), tableName, snapshotID);\n+        addLookupTableHFilesBulkLoadStep(context.getJobFlow(), tableName, snapshotID);\n         if (snapshotTableDesc !=null && snapshotTableDesc.isEnableLocalCache()) {\n-            addUpdateSnapshotQueryCacheStep(jobFlow, tableName, snapshotID);\n+            addUpdateSnapshotQueryCacheStep(context.getJobFlow(), tableName, snapshotID);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/HBaseLookupMRSteps.java",
                "sha": "1c91be2604170b18cba5d16d9e84af422a0a5f01",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/HBaseLookupMaterializer.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/HBaseLookupMaterializer.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468",
                "deletions": 5,
                "filename": "storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/HBaseLookupMaterializer.java",
                "patch": "@@ -21,20 +21,20 @@\n import org.apache.kylin.cube.CubeInstance;\n import org.apache.kylin.cube.model.SnapshotTableDesc;\n import org.apache.kylin.engine.mr.ILookupMaterializer;\n-import org.apache.kylin.job.execution.DefaultChainedExecutable;\n+import org.apache.kylin.engine.mr.LookupMaterializeContext;\n \n public class HBaseLookupMaterializer implements ILookupMaterializer{\n \n     @Override\n-    public void materializeLookupTable(DefaultChainedExecutable jobFlow, CubeInstance cube, String lookupTableName) {\n+    public void materializeLookupTable(LookupMaterializeContext context, CubeInstance cube, String lookupTableName) {\n         HBaseLookupMRSteps lookupMRSteps = new HBaseLookupMRSteps(cube);\n         SnapshotTableDesc snapshotTableDesc = cube.getDescriptor().getSnapshotTableDesc(lookupTableName);\n-        lookupMRSteps.addMaterializeLookupTableSteps(jobFlow, lookupTableName, snapshotTableDesc);\n+        lookupMRSteps.addMaterializeLookupTableSteps(context, lookupTableName, snapshotTableDesc);\n     }\n \n     @Override\n-    public void materializeLookupTablesForCube(DefaultChainedExecutable jobFlow, CubeInstance cube) {\n+    public void materializeLookupTablesForCube(LookupMaterializeContext context, CubeInstance cube) {\n         HBaseLookupMRSteps lookupMRSteps = new HBaseLookupMRSteps(cube);\n-        lookupMRSteps.addMaterializeLookupTablesSteps(jobFlow);\n+        lookupMRSteps.addMaterializeLookupTablesSteps(context);\n     }\n }",
                "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/HBaseLookupMaterializer.java",
                "sha": "31d9150605bae255ccee0345e214fa778f30ff6c",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/LookupTableToHFileJob.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/LookupTableToHFileJob.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468",
                "deletions": 11,
                "filename": "storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/LookupTableToHFileJob.java",
                "patch": "@@ -52,8 +52,6 @@\n import org.apache.kylin.engine.mr.MRUtil;\n import org.apache.kylin.engine.mr.common.AbstractHadoopJob;\n import org.apache.kylin.engine.mr.common.BatchConstants;\n-import org.apache.kylin.job.execution.DefaultChainedExecutable;\n-import org.apache.kylin.job.execution.ExecutableManager;\n import org.apache.kylin.metadata.TableMetadataManager;\n import org.apache.kylin.metadata.model.DataModelDesc;\n import org.apache.kylin.metadata.model.JoinDesc;\n@@ -91,7 +89,6 @@ public int run(String[] args) throws Exception {\n             Path output = new Path(getOptionValue(OPTION_OUTPUT_PATH));\n             String cubeName = getOptionValue(OPTION_CUBE_NAME).toUpperCase();\n             String tableName = getOptionValue(OPTION_TABLE_NAME);\n-            String cubingJobID = getOptionValue(OPTION_CUBING_JOB_ID);\n             String lookupSnapshotID = getOptionValue(OPTION_LOOKUP_SNAPSHOT_ID);\n \n             KylinConfig kylinConfig = KylinConfig.getInstanceFromEnv();\n@@ -112,7 +109,6 @@ public int run(String[] args) throws Exception {\n             ExtTableSnapshotInfo snapshot = createSnapshotResource(extSnapshotInfoManager, tableName, lookupSnapshotID,\n                     keyColumns, hTableNameAndShard.getFirst(), hTableNameAndShard.getSecond(), sourceTable);\n             logger.info(\"created snapshot information at:{}\", snapshot.getResourcePath());\n-            saveSnapshotInfoToJobContext(kylinConfig, cubingJobID, snapshot);\n \n             job = Job.getInstance(HBaseConfiguration.create(getConf()), getOptionValue(OPTION_JOB_NAME));\n \n@@ -194,13 +190,6 @@ private void removeSnapshotIfExist(ExtTableSnapshotInfoManager extSnapshotInfoMa\n         return result;\n     }\n \n-    private void saveSnapshotInfoToJobContext(KylinConfig kylinConfig, String jobID, ExtTableSnapshotInfo snapshot) {\n-        ExecutableManager execMgr = ExecutableManager.getInstance(kylinConfig);\n-        DefaultChainedExecutable job = (DefaultChainedExecutable) execMgr.getJob(jobID);\n-        job.addExtraInfo(BatchConstants.LOOKUP_EXT_SNAPSHOT_CONTEXT_PFX + snapshot.getTableName(),\n-                snapshot.getResourcePath());\n-    }\n-\n     /**\n      *\n      * @param sourceTableName",
                "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/LookupTableToHFileJob.java",
                "sha": "39ebe996a67f283aa695f928ee3a0c2d4f3091b0",
                "status": "modified"
            }
        ],
        "message": "KYLIN-3396 NPE throws when materialize lookup table to HBase\n\nSigned-off-by: shaofengshi <shaofengshi@apache.org>",
        "parent": "https://github.com/apache/kylin/commit/e3dcafb097d04f50f22994dc722d8bc0736dccbb",
        "repo": "kylin",
        "unit_tests": [
            "LookupTableToHFileJobTest.java"
        ]
    },
    "kylin_3003d9f": {
        "bug_id": "kylin_3003d9f",
        "commit": "https://github.com/apache/kylin/commit/3003d9fba7c0b20a74785cbc431f9e708e775418",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/kylin/blob/3003d9fba7c0b20a74785cbc431f9e708e775418/query/src/main/java/org/apache/kylin/query/schema/OLAPTable.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/query/src/main/java/org/apache/kylin/query/schema/OLAPTable.java?ref=3003d9fba7c0b20a74785cbc431f9e708e775418",
                "deletions": 7,
                "filename": "query/src/main/java/org/apache/kylin/query/schema/OLAPTable.java",
                "patch": "@@ -43,13 +43,13 @@\n import org.apache.calcite.sql.type.SqlTypeName;\n import org.apache.calcite.sql.type.SqlTypeUtil;\n import org.apache.calcite.util.ImmutableBitSet;\n-import org.apache.kylin.metadata.MetadataManager;\n import org.apache.kylin.metadata.datatype.DataType;\n import org.apache.kylin.metadata.model.ColumnDesc;\n import org.apache.kylin.metadata.model.DataModelDesc;\n import org.apache.kylin.metadata.model.FunctionDesc;\n import org.apache.kylin.metadata.model.MeasureDesc;\n import org.apache.kylin.metadata.model.TableDesc;\n+import org.apache.kylin.metadata.model.TblColRef;\n import org.apache.kylin.metadata.project.ProjectManager;\n import org.apache.kylin.metadata.realization.IRealization;\n import org.apache.kylin.metadata.realization.RealizationType;\n@@ -198,14 +198,13 @@ else if (precision >= 0)\n             }\n         }\n         //2. All integer measures in non-cube realizations\n-        MetadataManager metadataManager = MetadataManager.getInstance(olapSchema.getConfig());\n         for (IRealization realization : mgr.listAllRealizations(olapSchema.getProjectName())) {\n             if (realization.getType() == RealizationType.INVERTED_INDEX && realization.getModel().isFactTable(sourceTable.getIdentity())) {\n-                DataModelDesc dataModelDesc = realization.getModel();\n-                for (String metricColumn : dataModelDesc.getMetrics()) {\n-                    ColumnDesc columnDesc = metadataManager.getColumnDesc(dataModelDesc.getRootFactTable().getTableIdentity() + \".\" + metricColumn);\n-                    if (columnDesc.getType().isIntegerFamily() && !columnDesc.getType().isBigInt())\n-                        updateColumns.add(columnDesc);\n+                DataModelDesc model = realization.getModel();\n+                for (String metricColumn : model.getMetrics()) {\n+                    TblColRef col = model.findColumn(metricColumn);\n+                    if (col.getType().isIntegerFamily() && !col.getType().isBigInt())\n+                        updateColumns.add(col.getColumnDesc());\n                 }\n             }\n         }",
                "raw_url": "https://github.com/apache/kylin/raw/3003d9fba7c0b20a74785cbc431f9e708e775418/query/src/main/java/org/apache/kylin/query/schema/OLAPTable.java",
                "sha": "c33c4edadc4dfa385272ac132b1f2c58e8df40ef",
                "status": "modified"
            }
        ],
        "message": "minor, fix NPE in OLAPTable",
        "parent": "https://github.com/apache/kylin/commit/1c2c43cb88d2abc5a1ea1cbf18cbede02fe8c4f5",
        "repo": "kylin",
        "unit_tests": [
            "OLAPTableTest.java"
        ]
    },
    "kylin_3bb93c3": {
        "bug_id": "kylin_3bb93c3",
        "commit": "https://github.com/apache/kylin/commit/3bb93c32d073c10cf9a045e32a25715524324421",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/kylin/blob/3bb93c32d073c10cf9a045e32a25715524324421/core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java?ref=3bb93c32d073c10cf9a045e32a25715524324421",
                "deletions": 3,
                "filename": "core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java",
                "patch": "@@ -114,11 +114,12 @@ public void onEntityChange(Broadcaster broadcaster, String entity, Event event,\n                 throws IOException {\n             String project = cacheKey;\n \n-            if (event == Event.DROP)\n+            if (event == Event.DROP) {\n                 removeProjectLocal(project);\n-            else\n-                reloadProjectLocal(project);\n+                return;\n+            }\n \n+            reloadProjectLocal(project);\n             broadcaster.notifyProjectSchemaUpdate(project);\n             broadcaster.notifyProjectDataUpdate(project);\n         }",
                "raw_url": "https://github.com/apache/kylin/raw/3bb93c32d073c10cf9a045e32a25715524324421/core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java",
                "sha": "afa3dede1e141f1653c681ef4723899d8a15f64f",
                "status": "modified"
            }
        ],
        "message": "minor, fix NPE when droping a project",
        "parent": "https://github.com/apache/kylin/commit/a509186f6c1d54776edf34dc961ea50ff37e1c8d",
        "repo": "kylin",
        "unit_tests": [
            "ProjectManagerTest.java"
        ]
    },
    "kylin_3e9bc5b": {
        "bug_id": "kylin_3e9bc5b",
        "commit": "https://github.com/apache/kylin/commit/3e9bc5bd2e818d9e855ac2b917c8942800e0788e",
        "file": [
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/kylin/blob/3e9bc5bd2e818d9e855ac2b917c8942800e0788e/server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java?ref=3e9bc5bd2e818d9e855ac2b917c8942800e0788e",
                "deletions": 18,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java",
                "patch": "@@ -797,27 +797,29 @@ public void cuboidsExport(@PathVariable String cubeName, @RequestParam(value = \"\n             HttpServletResponse response) throws IOException {\n         CubeInstance cube = cubeService.getCubeManager().getCube(cubeName);\n         if (cube == null) {\n-            logger.error(\"Get cube: [\" + cubeName + \"] failed when get recommend cuboids\");\n-            throw new BadRequestException(\"Get cube: [\" + cubeName + \"] failed when get recommend cuboids\");\n-        }\n-        Map<Long, Long> cuboidList = getRecommendCuboidList(cube);\n-        if (cuboidList == null || cuboidList.isEmpty()) {\n-            logger.warn(\"Cannot get recommend cuboid list for cube \" + cubeName);\n+            throw new BadRequestException(\"Cube: [\" + cubeName + \"] not exist.\");\n         }\n-        if (cuboidList.size() < top) {\n-            logger.info(\"Only recommend \" + cuboidList.size() + \" cuboids less than topn \" + top);\n-        }\n-        Iterator<Long> cuboidIterator = cuboidList.keySet().iterator();\n-        RowKeyColDesc[] rowKeyColDescList = cube.getDescriptor().getRowkey().getRowKeyColumns();\n \n+        Map<Long, Long> cuboidList = getRecommendCuboidList(cube);\n         List<Set<String>> dimensionSetList = Lists.newLinkedList();\n-        while (top-- > 0 && cuboidIterator.hasNext()) {\n-            Set<String> dimensionSet = Sets.newHashSet();\n-            dimensionSetList.add(dimensionSet);\n-            long cuboid = cuboidIterator.next();\n-            for (int i = 0; i < rowKeyColDescList.length; i++) {\n-                if ((cuboid & (1L << rowKeyColDescList[i].getBitIndex())) > 0) {\n-                    dimensionSet.add(rowKeyColDescList[i].getColumn());\n+\n+        if (cuboidList == null || cuboidList.isEmpty()) {\n+            logger.info(\"Cannot get recommended cuboid list for cube \" + cubeName);\n+        }else {\n+            if (cuboidList.size() < top) {\n+                logger.info(\"Require \" + top + \" recommended cuboids, but only \" + cuboidList.size() + \" is found.\");\n+            }\n+            Iterator<Long> cuboidIterator = cuboidList.keySet().iterator();\n+            RowKeyColDesc[] rowKeyColDescList = cube.getDescriptor().getRowkey().getRowKeyColumns();\n+\n+            while (top-- > 0 && cuboidIterator.hasNext()) {\n+                Set<String> dimensionSet = Sets.newHashSet();\n+                dimensionSetList.add(dimensionSet);\n+                long cuboid = cuboidIterator.next();\n+                for (int i = 0; i < rowKeyColDescList.length; i++) {\n+                    if ((cuboid & (1L << rowKeyColDescList[i].getBitIndex())) > 0) {\n+                        dimensionSet.add(rowKeyColDescList[i].getColumn());\n+                    }\n                 }\n             }\n         }",
                "raw_url": "https://github.com/apache/kylin/raw/3e9bc5bd2e818d9e855ac2b917c8942800e0788e/server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java",
                "sha": "20ba9ae5de29d4d40415a1022d0eefa4d7e61902",
                "status": "modified"
            }
        ],
        "message": "KYLIN-3081, fix potential NPE\n\nSigned-off-by: shaofengshi <shaofengshi@apache.org>",
        "parent": "https://github.com/apache/kylin/commit/3ec60100454bd2ff841a77581c32bdb3d9b7074e",
        "repo": "kylin",
        "unit_tests": [
            "CubeControllerTest.java"
        ]
    },
    "kylin_444302b": {
        "bug_id": "kylin_444302b",
        "commit": "https://github.com/apache/kylin/commit/444302b2afe05940ec8fed43f437d8cd1ffbf62c",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/kylin/blob/444302b2afe05940ec8fed43f437d8cd1ffbf62c/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/MapReduceExecutable.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/MapReduceExecutable.java?ref=444302b2afe05940ec8fed43f437d8cd1ffbf62c",
                "deletions": 1,
                "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/common/MapReduceExecutable.java",
                "patch": "@@ -74,7 +74,7 @@ protected void onExecuteStart(ExecutableContext executableContext) {\n             try {\n                 Configuration conf = HadoopUtil.getCurrentConfiguration();\n                 Job job = new Cluster(conf).getJob(JobID.forName(mrJobId));\n-                if (job.getJobState() == JobStatus.State.FAILED) {\n+                if (job == null || job.getJobState() == JobStatus.State.FAILED) {\n                     //remove previous mr job info\n                     super.onExecuteStart(executableContext);\n                 } else {",
                "raw_url": "https://github.com/apache/kylin/raw/444302b2afe05940ec8fed43f437d8cd1ffbf62c/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/MapReduceExecutable.java",
                "sha": "19d888cf09b6b3d0307199cab6726857f8614fd0",
                "status": "modified"
            }
        ],
        "message": "KYLIN-1581 NPE in Job engine when execute MR job",
        "parent": "https://github.com/apache/kylin/commit/96bd3c455ffb2fd37466bd4cfc0ce9a5866925d3",
        "repo": "kylin",
        "unit_tests": [
            "MapReduceExecutableTest.java"
        ]
    },
    "kylin_4632254": {
        "bug_id": "kylin_4632254",
        "commit": "https://github.com/apache/kylin/commit/4632254541ce25dc1b3ca8c812d0ae8af3195f86",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/kylin/blob/4632254541ce25dc1b3ca8c812d0ae8af3195f86/common/src/main/java/org/apache/kylin/common/KylinConfig.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/common/src/main/java/org/apache/kylin/common/KylinConfig.java?ref=4632254541ce25dc1b3ca8c812d0ae8af3195f86",
                "deletions": 1,
                "filename": "common/src/main/java/org/apache/kylin/common/KylinConfig.java",
                "patch": "@@ -452,7 +452,7 @@ public int getHBaseKeyValueSize() {\n     }\n \n     public String getHbaseDefaultCompressionCodec() {\n-        return getOptional(HTABLE_DEFAULT_COMPRESSION_CODEC);\n+        return getOptional(HTABLE_DEFAULT_COMPRESSION_CODEC, \"\");\n \n     }\n ",
                "raw_url": "https://github.com/apache/kylin/raw/4632254541ce25dc1b3ca8c812d0ae8af3195f86/common/src/main/java/org/apache/kylin/common/KylinConfig.java",
                "sha": "deb2eda77bc7f23583a4508b62187061fd1970d2",
                "status": "modified"
            }
        ],
        "message": "KYLIN_956, fix NPE when there is no value for kylin.hbase.default.compression.codec",
        "parent": "https://github.com/apache/kylin/commit/dd53d7138fc27fce2bb16167fa5a81176915f78d",
        "repo": "kylin",
        "unit_tests": [
            "KylinConfigTest.java"
        ]
    },
    "kylin_4c39fcb": {
        "bug_id": "kylin_4c39fcb",
        "commit": "https://github.com/apache/kylin/commit/4c39fcb0eaab053d43554ac6add377343d585065",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/kylin/blob/4c39fcb0eaab053d43554ac6add377343d585065/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/FactDistinctColumnsReducer.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/FactDistinctColumnsReducer.java?ref=4c39fcb0eaab053d43554ac6add377343d585065",
                "deletions": 4,
                "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/FactDistinctColumnsReducer.java",
                "patch": "@@ -117,7 +117,6 @@ protected void setup(Context context) throws IOException {\n             isPartitionCol = true;\n             col = cubeDesc.getModel().getPartitionDesc().getPartitionDateColumnRef();\n             if (col == null) {\n-                isPartitionCol = false;\n                 logger.info(\"Do not have partition col. This reducer will keep empty\");\n             }\n             colValues = Lists.newLinkedList();\n@@ -283,9 +282,9 @@ protected void doCleanup(Context context) throws IOException, InterruptedExcepti\n                     cuboidHLLMap, samplingPercentage, mapperNumber, mapperOverlapRatio);\n         } else if (isPartitionCol) {\n             // partition col\n-            if (col == null)\n-                return;\n-            outputPartitionInfo(context);\n+            if (col != null) {\n+                outputPartitionInfo(context);\n+            }\n         } else {\n             // normal col\n             if (isReducerLocalBuildDict) {",
                "raw_url": "https://github.com/apache/kylin/raw/4c39fcb0eaab053d43554ac6add377343d585065/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/FactDistinctColumnsReducer.java",
                "sha": "776d7509280a83e386f39e4d715cb754d226ba8e",
                "status": "modified"
            }
        ],
        "message": "KYLIN-2217 fix NPE in FactDistinctColumnsReducer",
        "parent": "https://github.com/apache/kylin/commit/c0c56f4b6b05bb108a4952a56af992b237c1bbe6",
        "repo": "kylin",
        "unit_tests": [
            "FactDistinctColumnsReducerTest.java"
        ]
    },
    "kylin_4e8e2f7": {
        "bug_id": "kylin_4e8e2f7",
        "commit": "https://github.com/apache/kylin/commit/4e8e2f755c28e746acbbfa9cd6cfa3e53d3593ee",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/kylin/blob/4e8e2f755c28e746acbbfa9cd6cfa3e53d3593ee/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/JobInfoConverter.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/JobInfoConverter.java?ref=4e8e2f755c28e746acbbfa9cd6cfa3e53d3593ee",
                "deletions": 0,
                "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/common/JobInfoConverter.java",
                "patch": "@@ -62,6 +62,11 @@ public static JobInstance parseToJobInstance(CubingJob job, Map<String, Output>\n         }\n \n         Output output = outputs.get(job.getId());\n+        if (output == null) {\n+            logger.warn(\"job output is null.\");\n+            return null;\n+        }\n+\n         final JobInstance result = new JobInstance();\n         result.setName(job.getName());\n         result.setRelatedCube(CubingExecutableUtil.getCubeName(job.getParams()));\n@@ -91,6 +96,11 @@ public static JobInstance parseToJobInstance(CheckpointExecutable job, Map<Strin\n         }\n \n         Output output = outputs.get(job.getId());\n+        if (output == null) {\n+            logger.warn(\"job output is null.\");\n+            return null;\n+        }\n+\n         final JobInstance result = new JobInstance();\n         result.setName(job.getName());\n         result.setRelatedCube(CubingExecutableUtil.getCubeName(job.getParams()));",
                "raw_url": "https://github.com/apache/kylin/raw/4e8e2f755c28e746acbbfa9cd6cfa3e53d3593ee/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/JobInfoConverter.java",
                "sha": "a2305170d8289c5a6e0c55e32242571e66d4c7c3",
                "status": "modified"
            }
        ],
        "message": "APACHE-KYLIN-2707: fix NPE\n\nSigned-off-by: Zhong <nju_yaho@apache.org>",
        "parent": "https://github.com/apache/kylin/commit/35774a14118618ec8a355a325ba343f0b291a197",
        "repo": "kylin",
        "unit_tests": [
            "JobInfoConverterTest.java"
        ]
    },
    "kylin_4f32927": {
        "bug_id": "kylin_4f32927",
        "commit": "https://github.com/apache/kylin/commit/4f32927558ff6ebc1899241af87e93bd2747e242",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/kylin/blob/4f32927558ff6ebc1899241af87e93bd2747e242/core-common/src/main/java/org/apache/kylin/common/KylinVersion.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-common/src/main/java/org/apache/kylin/common/KylinVersion.java?ref=4f32927558ff6ebc1899241af87e93bd2747e242",
                "deletions": 1,
                "filename": "core-common/src/main/java/org/apache/kylin/common/KylinVersion.java",
                "patch": "@@ -126,7 +126,7 @@ public static void main(String[] args) {\n     public static String getKylinClientInformation() {\n         StringBuilder buf = new StringBuilder();\n \n-        buf.append(\"kylin.home: \").append(new File(KylinConfig.getKylinHome()).getAbsolutePath()).append(\"\\n\");\n+        buf.append(\"kylin.home: \").append(KylinConfig.getKylinHome() == null ? \"UNKNOWN\" : new File(KylinConfig.getKylinHome()).getAbsolutePath()).append(\"\\n\");\n         buf.append(\"kylin.version:\").append(KylinVersion.getCurrentVersion()).append(\"\\n\");\n         buf.append(\"commit:\").append(getGitCommitInfo()).append(\"\\n\");\n         buf.append(\"os.name:\").append(System.getProperty(\"os.name\")).append(\"\\n\");",
                "raw_url": "https://github.com/apache/kylin/raw/4f32927558ff6ebc1899241af87e93bd2747e242/core-common/src/main/java/org/apache/kylin/common/KylinVersion.java",
                "sha": "d1d2f7a8a345ffdb37e31f2269acd643cbe068f9",
                "status": "modified"
            }
        ],
        "message": "minor, fix an NPE",
        "parent": "https://github.com/apache/kylin/commit/cabd2f9cb9f4fd50c21bcfcaceb37c1fa122bb94",
        "repo": "kylin",
        "unit_tests": [
            "KylinVersionTest.java"
        ]
    },
    "kylin_51c6fce": {
        "bug_id": "kylin_51c6fce",
        "commit": "https://github.com/apache/kylin/commit/51c6fce10e35f2543e745d6136a1b380e39deef1",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/kylin/blob/51c6fce10e35f2543e745d6136a1b380e39deef1/kylin-it/src/test/java/org/apache/kylin/query/KylinTestBase.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/kylin-it/src/test/java/org/apache/kylin/query/KylinTestBase.java?ref=51c6fce10e35f2543e745d6136a1b380e39deef1",
                "deletions": 1,
                "filename": "kylin-it/src/test/java/org/apache/kylin/query/KylinTestBase.java",
                "patch": "@@ -263,7 +263,11 @@ protected int executeQuery(String sql, boolean needDisplay) throws Exception {\n         } catch (SQLException sqlException) {\n             List<List<String>> results = Lists.newArrayList();\n             List<SelectedColumnMeta> columnMetas = Lists.newArrayList();\n-            PushDownUtil.doPushDownQuery(ProjectInstance.DEFAULT_PROJECT_NAME, sql, results, columnMetas, sqlException);\n+            boolean b = PushDownUtil.doPushDownQuery(ProjectInstance.DEFAULT_PROJECT_NAME, sql, results, columnMetas,\n+                    sqlException);\n+            if (!b) {\n+                throw sqlException;\n+            }\n             return results.size();\n         } finally {\n             if (resultSet != null) {",
                "raw_url": "https://github.com/apache/kylin/raw/51c6fce10e35f2543e745d6136a1b380e39deef1/kylin-it/src/test/java/org/apache/kylin/query/KylinTestBase.java",
                "sha": "404cb7fbc59d83240b16a570c6608ac868a6d84f",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/kylin/blob/51c6fce10e35f2543e745d6136a1b380e39deef1/server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java?ref=51c6fce10e35f2543e745d6136a1b380e39deef1",
                "deletions": 1,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java",
                "patch": "@@ -487,7 +487,8 @@ private SQLResponse queryWithSqlMassage(SQLRequest sqlRequest) throws Exception\n             return fakeResponse;\n         }\n \n-        String correctedSql = QueryUtil.massageSql(sqlRequest.getSql(), sqlRequest.getProject(), sqlRequest.getLimit(), sqlRequest.getOffset());\n+        String correctedSql = QueryUtil.massageSql(sqlRequest.getSql(), sqlRequest.getProject(), sqlRequest.getLimit(),\n+                sqlRequest.getOffset());\n         if (!correctedSql.equals(sqlRequest.getSql())) {\n             logger.info(\"The corrected query: \" + correctedSql);\n \n@@ -792,6 +793,9 @@ private SQLResponse execute(String correctedSql, SQLRequest sqlRequest) throws E\n         } catch (SQLException sqlException) {\n             isPushDown = PushDownUtil.doPushDownQuery(sqlRequest.getProject(), correctedSql, results, columnMetas,\n                     sqlException);\n+            if (!isPushDown) {\n+                throw sqlException;\n+            }\n         } finally {\n             close(resultSet, stat, conn);\n         }",
                "raw_url": "https://github.com/apache/kylin/raw/51c6fce10e35f2543e745d6136a1b380e39deef1/server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java",
                "sha": "f4ae06ca1e9cad5999c5603d665f485ea3bbc010",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/kylin/blob/51c6fce10e35f2543e745d6136a1b380e39deef1/server-base/src/main/java/org/apache/kylin/rest/util/PushDownUtil.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/util/PushDownUtil.java?ref=51c6fce10e35f2543e745d6136a1b380e39deef1",
                "deletions": 4,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/util/PushDownUtil.java",
                "patch": "@@ -49,11 +49,15 @@\n     public static boolean doPushDownQuery(String project, String sql, List<List<String>> results,\n             List<SelectedColumnMeta> columnMetas, SQLException sqlException) throws Exception {\n \n-        boolean isExpectedCause = (ExceptionUtils.getRootCause(sqlException).getClass()\n-                .equals(NoRealizationFoundException.class));\n         KylinConfig kylinConfig = KylinConfig.getInstanceFromEnv();\n+        if (!kylinConfig.isPushDownEnabled()) {\n+            return false;\n+        }\n+\n+        Throwable rootCause = ExceptionUtils.getRootCause(sqlException);\n+        boolean isExpectedCause = rootCause != null && (rootCause.getClass().equals(NoRealizationFoundException.class));\n \n-        if (isExpectedCause && kylinConfig.isPushDownEnabled()) {\n+        if (isExpectedCause) {\n \n             logger.info(\"Query failed to utilize pre-calculation, routing to other engines\", sqlException);\n             IPushDownRunner runner = (IPushDownRunner) ClassUtil.newInstance(kylinConfig.getPushDownRunnerClassName());\n@@ -78,7 +82,7 @@ public static boolean doPushDownQuery(String project, String sql, List<List<Stri\n \n             return true;\n         } else {\n-            throw sqlException;\n+            return false;\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/kylin/raw/51c6fce10e35f2543e745d6136a1b380e39deef1/server-base/src/main/java/org/apache/kylin/rest/util/PushDownUtil.java",
                "sha": "0802718243f4e38629826146065581385e282f0a",
                "status": "modified"
            }
        ],
        "message": "minor, avoid NPE in doPushDownQuery check",
        "parent": "https://github.com/apache/kylin/commit/68efbc2d1bfdb1ce53794fd4263f41b287ff5baf",
        "repo": "kylin",
        "unit_tests": [
            "PushDownUtilTest.java"
        ]
    },
    "kylin_5ec65be": {
        "bug_id": "kylin_5ec65be",
        "commit": "https://github.com/apache/kylin/commit/5ec65be735ce0f0581859da326df50a1fcc79bb6",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/kylin/blob/5ec65be735ce0f0581859da326df50a1fcc79bb6/server/src/main/java/com/kylinolap/rest/service/JobService.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server/src/main/java/com/kylinolap/rest/service/JobService.java?ref=5ec65be735ce0f0581859da326df50a1fcc79bb6",
                "deletions": 0,
                "filename": "server/src/main/java/com/kylinolap/rest/service/JobService.java",
                "patch": "@@ -156,6 +156,9 @@ public JobInstance getJobInstance(String uuid) throws IOException, JobException\n     }\n \n     private JobInstance parseToJobInstance(AbstractExecutable job) {\n+        if (job == null) {\n+            return null;\n+        }\n         Preconditions.checkState(job instanceof CubingJob, \"illegal job type, id:\" + job.getId());\n         CubingJob cubeJob = (CubingJob) job;\n         final JobInstance result = new JobInstance();",
                "raw_url": "https://github.com/apache/kylin/raw/5ec65be735ce0f0581859da326df50a1fcc79bb6/server/src/main/java/com/kylinolap/rest/service/JobService.java",
                "sha": "5b4ddf0aa09c2d0817b54e2fcccd58880e805666",
                "status": "modified"
            }
        ],
        "message": "fix NPE",
        "parent": "https://github.com/apache/kylin/commit/81b2914919e856070708120eae01da598cd6bcd6",
        "repo": "kylin",
        "unit_tests": [
            "JobServiceTest.java"
        ]
    },
    "kylin_64dfa7b": {
        "bug_id": "kylin_64dfa7b",
        "commit": "https://github.com/apache/kylin/commit/64dfa7b9f7ef95a3edd8548d46a21ea9e71facc7",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/kylin/blob/64dfa7b9f7ef95a3edd8548d46a21ea9e71facc7/server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java?ref=64dfa7b9f7ef95a3edd8548d46a21ea9e71facc7",
                "deletions": 0,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java",
                "patch": "@@ -86,6 +86,7 @@\n import org.apache.kylin.metadata.model.ModelDimensionDesc;\n import org.apache.kylin.metadata.model.TableRef;\n import org.apache.kylin.metadata.project.ProjectInstance;\n+import org.apache.kylin.metadata.project.ProjectManager;\n import org.apache.kylin.metadata.querymeta.ColumnMeta;\n import org.apache.kylin.metadata.querymeta.ColumnMetaWithType;\n import org.apache.kylin.metadata.querymeta.SelectedColumnMeta;\n@@ -359,6 +360,11 @@ public SQLResponse doQueryWithCache(SQLRequest sqlRequest, boolean isQueryInspec\n         if (StringUtils.isBlank(sqlRequest.getProject())) {\n             throw new BadRequestException(msg.getEMPTY_PROJECT_NAME());\n         }\n+        // project not found\n+        ProjectManager mgr = ProjectManager.getInstance(KylinConfig.getInstanceFromEnv());\n+        if (mgr.getProject(sqlRequest.getProject()) == null) {\n+            throw new BadRequestException(msg.getPROJECT_NOT_FOUND());\n+        }\n         if (StringUtils.isBlank(sqlRequest.getSql())) {\n             throw new BadRequestException(msg.getNULL_EMPTY_SQL());\n         }",
                "raw_url": "https://github.com/apache/kylin/raw/64dfa7b9f7ef95a3edd8548d46a21ea9e71facc7/server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java",
                "sha": "16358e4141359c3ee02b428db7ac332816664f53",
                "status": "modified"
            }
        ],
        "message": "KYLIN-3507 Avoid NPE when project is not found",
        "parent": "https://github.com/apache/kylin/commit/2372b96ad3ab483591e68d184ad0ecc37507b78a",
        "repo": "kylin",
        "unit_tests": [
            "QueryServiceTest.java"
        ]
    },
    "kylin_6bc2aae": {
        "bug_id": "kylin_6bc2aae",
        "commit": "https://github.com/apache/kylin/commit/6bc2aaeb7032aa89feed91316a2179263c4c4c35",
        "file": [
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/kylin/blob/6bc2aaeb7032aa89feed91316a2179263c4c4c35/core-common/src/main/java/org/apache/kylin/common/util/StringUtil.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-common/src/main/java/org/apache/kylin/common/util/StringUtil.java?ref=6bc2aaeb7032aa89feed91316a2179263c4c4c35",
                "deletions": 15,
                "filename": "core-common/src/main/java/org/apache/kylin/common/util/StringUtil.java",
                "patch": "@@ -75,26 +75,34 @@ public static String trimSuffix(String str, String suffix) {\n     }\n \n     public static String join(Iterable<String> parts, String separator) {\n-        StringBuilder buf = new StringBuilder();\n-        Iterator<String> iterator = parts.iterator();\n-        if (iterator == null || (!iterator.hasNext())) {\n+        if (parts == null) {\n             return null;\n         }\n-        final String first = iterator.next();\n-        if (first != null) {\n-            buf.append(first);\n-        }\n-        while (iterator.hasNext()) {\n-            if (separator != null) {\n-                buf.append(separator);\n+\n+        Iterator<String> iterator = parts.iterator();\n+\n+        if (iterator == null) {\n+            return null;\n+        } else if (!iterator.hasNext()) {\n+            return \"\";\n+        } else {\n+            StringBuilder buf = new StringBuilder();\n+            final String first = iterator.next();\n+            if (first != null) {\n+                buf.append(first);\n             }\n-            final String part = iterator.next();\n-            if (part != null) {\n-                buf.append(part);\n+            while (iterator.hasNext()) {\n+                if (separator != null) {\n+                    buf.append(separator);\n+                }\n+                final String part = iterator.next();\n+                if (part != null) {\n+                    buf.append(part);\n+                }\n             }\n-        }\n \n-        return buf.toString();\n+            return buf.toString();\n+        }\n     }\n \n     public static void toUpperCaseArray(String[] source, String[] target) {",
                "raw_url": "https://github.com/apache/kylin/raw/6bc2aaeb7032aa89feed91316a2179263c4c4c35/core-common/src/main/java/org/apache/kylin/common/util/StringUtil.java",
                "sha": "5dde9cf5f34e5ea09a8bafa7d992372ec588f43e",
                "status": "modified"
            }
        ],
        "message": "KYLIN-3836 fix Kylin StringUtil.join() may cause NPE if iterator is empty",
        "parent": "https://github.com/apache/kylin/commit/e5c7c0de0a93a89b97d9427f95e3bbf6bada61dc",
        "repo": "kylin",
        "unit_tests": [
            "StringUtilTest.java"
        ]
    },
    "kylin_714b225": {
        "bug_id": "kylin_714b225",
        "commit": "https://github.com/apache/kylin/commit/714b225122bd6686ef6e1c1d7075bc662b5a6eb2",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/kylin/blob/714b225122bd6686ef6e1c1d7075bc662b5a6eb2/server-base/src/main/java/org/apache/kylin/rest/service/AclService.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/service/AclService.java?ref=714b225122bd6686ef6e1c1d7075bc662b5a6eb2",
                "deletions": 2,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/service/AclService.java",
                "patch": "@@ -151,9 +151,9 @@ public Acl readAclById(ObjectIdentity object, List<Sid> sids) throws NotFoundExc\n             for (ObjectIdentity oid : oids) {\n                 AclRecord record = aclStore.getResource(getQueryKeyById(String.valueOf(oid.getIdentifier())),\n                         AclRecord.class, SERIALIZER);\n-                if (record != null) {\n+                if (record != null && record.getOwnerInfo() != null) {\n                     SidInfo owner = record.getOwnerInfo();\n-                    Sid ownerSid = (null == owner) ? null : (owner.isPrincipal() ? new PrincipalSid(owner.getSid()) : new GrantedAuthoritySid(owner.getSid()));\n+                    Sid ownerSid = owner.isPrincipal() ? new PrincipalSid(owner.getSid()) : new GrantedAuthoritySid(owner.getSid());\n                     boolean entriesInheriting = record.isEntriesInheriting();\n \n                     Acl parentAcl = null;",
                "raw_url": "https://github.com/apache/kylin/raw/714b225122bd6686ef6e1c1d7075bc662b5a6eb2/server-base/src/main/java/org/apache/kylin/rest/service/AclService.java",
                "sha": "fe31bd94c50c22859b39f2cc01cae4529513eb7c",
                "status": "modified"
            }
        ],
        "message": "KYLIN-2778 avoid NPE in AclService.java",
        "parent": "https://github.com/apache/kylin/commit/4f16f1cdc61f9bd01edad27151abff1bf4aa3596",
        "repo": "kylin",
        "unit_tests": [
            "AclServiceTest.java"
        ]
    },
    "kylin_781588a": {
        "bug_id": "kylin_781588a",
        "commit": "https://github.com/apache/kylin/commit/781588a3845250df7000439a5dd3db06c726b7bf",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/kylin/blob/781588a3845250df7000439a5dd3db06c726b7bf/job/src/main/java/com/kylinolap/job2/service/ExecutableManager.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/job/src/main/java/com/kylinolap/job2/service/ExecutableManager.java?ref=781588a3845250df7000439a5dd3db06c726b7bf",
                "deletions": 0,
                "filename": "job/src/main/java/com/kylinolap/job2/service/ExecutableManager.java",
                "patch": "@@ -291,6 +291,9 @@ private JobPO getJobPO(AbstractExecutable executable) {\n     }\n \n     private AbstractExecutable parseTo(JobPO jobPO) {\n+        if (jobPO == null) {\n+            return null;\n+        }\n         String type = jobPO.getType();\n         try {\n             Class<? extends AbstractExecutable> clazz = (Class<? extends AbstractExecutable>) Class.forName(type);",
                "raw_url": "https://github.com/apache/kylin/raw/781588a3845250df7000439a5dd3db06c726b7bf/job/src/main/java/com/kylinolap/job2/service/ExecutableManager.java",
                "sha": "2c9f21bfe04bdf8c0a591ba3392bead668d1965c",
                "status": "modified"
            }
        ],
        "message": "fix NPE",
        "parent": "https://github.com/apache/kylin/commit/6fd43046382d0d445979b176abda8f17084d935c",
        "repo": "kylin",
        "unit_tests": [
            "ExecutableManagerTest.java"
        ]
    },
    "kylin_7a5469e": {
        "bug_id": "kylin_7a5469e",
        "commit": "https://github.com/apache/kylin/commit/7a5469e07f68aaa882a3d924b8f4d99cc2660cf7",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/kylin/blob/7a5469e07f68aaa882a3d924b8f4d99cc2660cf7/common/src/main/java/org/apache/kylin/common/KylinConfig.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/common/src/main/java/org/apache/kylin/common/KylinConfig.java?ref=7a5469e07f68aaa882a3d924b8f4d99cc2660cf7",
                "deletions": 1,
                "filename": "common/src/main/java/org/apache/kylin/common/KylinConfig.java",
                "patch": "@@ -452,7 +452,7 @@ public int getHBaseKeyValueSize() {\n     }\n \n     public String getHbaseDefaultCompressionCodec() {\n-        return getOptional(HTABLE_DEFAULT_COMPRESSION_CODEC);\n+        return getOptional(HTABLE_DEFAULT_COMPRESSION_CODEC, \"\");\n \n     }\n ",
                "raw_url": "https://github.com/apache/kylin/raw/7a5469e07f68aaa882a3d924b8f4d99cc2660cf7/common/src/main/java/org/apache/kylin/common/KylinConfig.java",
                "sha": "deb2eda77bc7f23583a4508b62187061fd1970d2",
                "status": "modified"
            }
        ],
        "message": "KYLIN_956, fix NPE when there is no value for kylin.hbase.default.compression.codec",
        "parent": "https://github.com/apache/kylin/commit/74ceea9723e1b56f2b8be135109c29e7f6aa6e44",
        "repo": "kylin",
        "unit_tests": [
            "KylinConfigTest.java"
        ]
    },
    "kylin_8a2e128": {
        "bug_id": "kylin_8a2e128",
        "commit": "https://github.com/apache/kylin/commit/8a2e128c12460d63e581ceef182f9b287da623d6",
        "file": [
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/kylin/blob/8a2e128c12460d63e581ceef182f9b287da623d6/job/src/main/java/org/apache/kylin/job/hadoop/cube/MetadataCleanupJob.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/job/src/main/java/org/apache/kylin/job/hadoop/cube/MetadataCleanupJob.java?ref=8a2e128c12460d63e581ceef182f9b287da623d6",
                "deletions": 20,
                "filename": "job/src/main/java/org/apache/kylin/job/hadoop/cube/MetadataCleanupJob.java",
                "patch": "@@ -107,33 +107,37 @@ public void cleanup() throws Exception {\n         for (String resourceRoot : new String[]{ResourceStore.SNAPSHOT_RESOURCE_ROOT}) {\n             ArrayList<String> snapshotTables = getStore().listResources(resourceRoot);\n \n-            for (String snapshotTable : snapshotTables) {\n-                ArrayList<String> snapshotNames = getStore().listResources(snapshotTable);\n-                if (snapshotNames != null)\n-                    for (String snapshot : snapshotNames) {\n-                        if (!activeResourceList.contains(snapshot)) {\n-                            if (isOlderThanThreshold(getStore().getResourceTimestamp(snapshot)))\n-                                toDeleteResource.add(snapshot);\n+            if (snapshotTables != null) {\n+                for (String snapshotTable : snapshotTables) {\n+                    ArrayList<String> snapshotNames = getStore().listResources(snapshotTable);\n+                    if (snapshotNames != null)\n+                        for (String snapshot : snapshotNames) {\n+                            if (!activeResourceList.contains(snapshot)) {\n+                                if (isOlderThanThreshold(getStore().getResourceTimestamp(snapshot)))\n+                                    toDeleteResource.add(snapshot);\n+                            }\n                         }\n-                    }\n+                }\n             }\n         }\n \n         // three level resources, only dictionaries\n         ArrayList<String> dictTables = getStore().listResources(ResourceStore.DICT_RESOURCE_ROOT);\n \n-        for (String table : dictTables) {\n-            ArrayList<String> tableColNames = getStore().listResources(table);\n-            if (tableColNames != null)\n-                for (String tableCol : tableColNames) {\n-                    ArrayList<String> dictionaries = getStore().listResources(tableCol);\n-                    if (dictionaries != null)\n-                        for (String dict : dictionaries)\n-                            if (!activeResourceList.contains(dict)) {\n-                                if (isOlderThanThreshold(getStore().getResourceTimestamp(dict)))\n-                                    toDeleteResource.add(dict);\n-                            }\n-                }\n+        if (dictTables != null) {\n+            for (String table : dictTables) {\n+                ArrayList<String> tableColNames = getStore().listResources(table);\n+                if (tableColNames != null)\n+                    for (String tableCol : tableColNames) {\n+                        ArrayList<String> dictionaries = getStore().listResources(tableCol);\n+                        if (dictionaries != null)\n+                            for (String dict : dictionaries)\n+                                if (!activeResourceList.contains(dict)) {\n+                                    if (isOlderThanThreshold(getStore().getResourceTimestamp(dict)))\n+                                        toDeleteResource.add(dict);\n+                                }\n+                    }\n+            }\n         }\n \n ",
                "raw_url": "https://github.com/apache/kylin/raw/8a2e128c12460d63e581ceef182f9b287da623d6/job/src/main/java/org/apache/kylin/job/hadoop/cube/MetadataCleanupJob.java",
                "sha": "8b842770621273c02349cfbe627c7670d9e85c3f",
                "status": "modified"
            }
        ],
        "message": "KYLIN-901 fix a NPE",
        "parent": "https://github.com/apache/kylin/commit/aad62c256ece98ee33cc9cdc9462f44b3a353ec9",
        "repo": "kylin",
        "unit_tests": [
            "MetadataCleanupJobTest.java"
        ]
    },
    "kylin_8b6d211": {
        "bug_id": "kylin_8b6d211",
        "commit": "https://github.com/apache/kylin/commit/8b6d21133aab18b65ae571d9463089283b7dcbe1",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/kylin/blob/8b6d21133aab18b65ae571d9463089283b7dcbe1/core-common/src/main/java/org/apache/kylin/common/persistence/ResourceStore.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-common/src/main/java/org/apache/kylin/common/persistence/ResourceStore.java?ref=8b6d21133aab18b65ae571d9463089283b7dcbe1",
                "deletions": 1,
                "filename": "core-common/src/main/java/org/apache/kylin/common/persistence/ResourceStore.java",
                "patch": "@@ -68,7 +68,7 @@\n             try {\n                 knownImpl.add(ClassUtil.forName(\"org.apache.kylin.storage.hbase.HBaseResourceStore\", ResourceStore.class));\n             } catch (Throwable e) {\n-                logger.warn(\"Failed to load ResourceStore impl class\", e);\n+                logger.warn(\"Failed to load ResourceStore impl class: \" + e.toString());\n             }\n         }\n         return knownImpl;",
                "raw_url": "https://github.com/apache/kylin/raw/8b6d21133aab18b65ae571d9463089283b7dcbe1/core-common/src/main/java/org/apache/kylin/common/persistence/ResourceStore.java",
                "sha": "630477b01d3de3b8973480d20ae3890748ea5e6a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/kylin/blob/8b6d21133aab18b65ae571d9463089283b7dcbe1/core-dictionary/src/main/java/org/apache/kylin/dict/DictionaryManager.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-dictionary/src/main/java/org/apache/kylin/dict/DictionaryManager.java?ref=8b6d21133aab18b65ae571d9463089283b7dcbe1",
                "deletions": 1,
                "filename": "core-dictionary/src/main/java/org/apache/kylin/dict/DictionaryManager.java",
                "patch": "@@ -248,7 +248,7 @@ public DictionaryInfo buildDictionary(DataModelDesc model, String dict, TblColRe\n             srcCol = col.getName();\n             srcColIdx = col.getColumnDesc().getZeroBasedIndex();\n             if (model.isFactTable(col.getTable())) {\n-                table = factTableValueProvider.getDistinctValuesFor(col);\n+                table = (factTableValueProvider == null) ? null : factTableValueProvider.getDistinctValuesFor(col);\n             } else {\n                 table = TableSourceFactory.createReadableTable(metaMgr.getTableDesc(col.getTable()));\n             }",
                "raw_url": "https://github.com/apache/kylin/raw/8b6d21133aab18b65ae571d9463089283b7dcbe1/core-dictionary/src/main/java/org/apache/kylin/dict/DictionaryManager.java",
                "sha": "f7a407b6e5f5e522a2512a70ccbcb4428b6be154",
                "status": "modified"
            }
        ],
        "message": "KYLIN-875 Fix CI, NPE in DictionaryManager.decideSourceData()",
        "parent": "https://github.com/apache/kylin/commit/5500cbba042975699a98b8ccb75ffb364ae5c199",
        "repo": "kylin",
        "unit_tests": [
            "DictionaryManagerTest.java"
        ]
    },
    "kylin_8be842e": {
        "bug_id": "kylin_8be842e",
        "commit": "https://github.com/apache/kylin/commit/8be842e9b845477541c2569ae1c2484e9d627214",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/kylin/blob/8be842e9b845477541c2569ae1c2484e9d627214/tool/src/main/java/org/apache/kylin/tool/CubeMetaExtractor.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/tool/src/main/java/org/apache/kylin/tool/CubeMetaExtractor.java?ref=8be842e9b845477541c2569ae1c2484e9d627214",
                "deletions": 3,
                "filename": "tool/src/main/java/org/apache/kylin/tool/CubeMetaExtractor.java",
                "patch": "@@ -65,6 +65,7 @@\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.SerializationFeature;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.base.Preconditions;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Sets;\n \n@@ -172,6 +173,7 @@ protected void executeExtract(OptionsHelper optionsHelper, File exportDir) throw\n             String projectNames = optionsHelper.getOptionValue(OPTION_PROJECT);\n             for (String projectName : projectNames.split(\",\")) {\n                 ProjectInstance projectInstance = projectManager.getProject(projectName);\n+                Preconditions.checkNotNull(projectInstance, \"Project \" + projectName + \" does not exist.\");\n                 requireProject(projectInstance);\n             }\n         } else if (optionsHelper.hasOption(OPTION_CUBE)) {\n@@ -202,9 +204,6 @@ protected void executeExtract(OptionsHelper optionsHelper, File exportDir) throw\n     }\n \n     private void requireProject(ProjectInstance projectInstance) throws IOException {\n-        if (projectInstance == null) {\n-            throw new IllegalArgumentException(\"Project \" + projectInstance.getName() + \" does not exist\");\n-        }\n         addRequired(projectInstance.getResourcePath());\n         List<RealizationEntry> realizationEntries = projectInstance.getRealizationEntries();\n         for (RealizationEntry realizationEntry : realizationEntries) {",
                "raw_url": "https://github.com/apache/kylin/raw/8be842e9b845477541c2569ae1c2484e9d627214/tool/src/main/java/org/apache/kylin/tool/CubeMetaExtractor.java",
                "sha": "188524db8162a3da368e611d7d2562e71e3b5b11",
                "status": "modified"
            }
        ],
        "message": "KYLIN-2510 Fix unintended NPE in CubeMetaExtractor",
        "parent": "https://github.com/apache/kylin/commit/dde297e48a6886f662cd153c6f834f7e26560522",
        "repo": "kylin",
        "unit_tests": [
            "CubeMetaExtractorTest.java"
        ]
    },
    "kylin_971b109": {
        "bug_id": "kylin_971b109",
        "commit": "https://github.com/apache/kylin/commit/971b10905e23a1b2b97d2aa19de93d38d4f527f4",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/kylin/blob/971b10905e23a1b2b97d2aa19de93d38d4f527f4/core-job/src/main/java/org/apache/kylin/job/execution/ExecutableManager.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-job/src/main/java/org/apache/kylin/job/execution/ExecutableManager.java?ref=971b10905e23a1b2b97d2aa19de93d38d4f527f4",
                "deletions": 1,
                "filename": "core-job/src/main/java/org/apache/kylin/job/execution/ExecutableManager.java",
                "patch": "@@ -312,7 +312,7 @@ public void updateJobOutput(String jobId, ExecutableState newStatus, Map<String,\n             executableDao.updateJobOutput(jobOutput);\n             logger.info(\"job id:\" + jobId + \" from \" + oldStatus + \" to \" + newStatus);\n         } catch (PersistentException e) {\n-            logger.error(\"error change job:\" + jobId + \" to \" + newStatus.toString());\n+            logger.error(\"error change job:\" + jobId + \" to \" + newStatus);\n             throw new RuntimeException(e);\n         }\n     }",
                "raw_url": "https://github.com/apache/kylin/raw/971b10905e23a1b2b97d2aa19de93d38d4f527f4/core-job/src/main/java/org/apache/kylin/job/execution/ExecutableManager.java",
                "sha": "0e39ad1069fac99049e36a154d0f558e5de738d7",
                "status": "modified"
            }
        ],
        "message": "KYLIN-2172 fix potential NPE",
        "parent": "https://github.com/apache/kylin/commit/297730dc97e705f2c8526dcdc7718cee900e40e9",
        "repo": "kylin",
        "unit_tests": [
            "ExecutableManagerTest.java"
        ]
    },
    "kylin_9ae2bd1": {
        "bug_id": "kylin_9ae2bd1",
        "commit": "https://github.com/apache/kylin/commit/9ae2bd17489e87efacd7b177735c9ddc8e03e09f",
        "file": [
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/kylin/blob/9ae2bd17489e87efacd7b177735c9ddc8e03e09f/core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java?ref=9ae2bd17489e87efacd7b177735c9ddc8e03e09f",
                "deletions": 16,
                "filename": "core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java",
                "patch": "@@ -1235,31 +1235,35 @@ public SnapshotTable buildSnapshotTable(CubeSegment cubeSeg, String lookupTable,\n     public CubeInstance findLatestSnapshot(List<RealizationEntry> realizationEntries, String lookupTableName,\n             CubeInstance cubeInstance) {\n         CubeInstance cube = null;\n-        if (!realizationEntries.isEmpty()) {\n-            long maxBuildTime = Long.MIN_VALUE;\n-            RealizationRegistry registry = RealizationRegistry.getInstance(config);\n-            for (RealizationEntry entry : realizationEntries) {\n-                IRealization realization = registry.getRealization(entry.getType(), entry.getRealization());\n-                if (realization != null && realization.isReady() && realization instanceof CubeInstance) {\n-                    CubeInstance current = (CubeInstance) realization;\n-                    if (checkMeetSnapshotTable(current, lookupTableName)) {\n-                        CubeSegment segment = current.getLatestReadySegment();\n-                        if (segment != null) {\n-                            long latestBuildTime = segment.getLastBuildTime();\n-                            if (latestBuildTime > maxBuildTime) {\n-                                maxBuildTime = latestBuildTime;\n-                                cube = current;\n+        try {\n+            if (!realizationEntries.isEmpty()) {\n+                long maxBuildTime = Long.MIN_VALUE;\n+                RealizationRegistry registry = RealizationRegistry.getInstance(config);\n+                for (RealizationEntry entry : realizationEntries) {\n+                    IRealization realization = registry.getRealization(entry.getType(), entry.getRealization());\n+                    if (realization != null && realization.isReady() && realization instanceof CubeInstance) {\n+                        CubeInstance current = (CubeInstance) realization;\n+                        if (checkMeetSnapshotTable(current, lookupTableName)) {\n+                            CubeSegment segment = current.getLatestReadySegment();\n+                            if (segment != null) {\n+                                long latestBuildTime = segment.getLastBuildTime();\n+                                if (latestBuildTime > maxBuildTime) {\n+                                    maxBuildTime = latestBuildTime;\n+                                    cube = current;\n+                                }\n                             }\n                         }\n                     }\n                 }\n             }\n+        } catch (Exception e) {\n+            logger.info(\"Unexpected error.\", e);\n         }\n         if (!cubeInstance.equals(cube)) {\n             logger.debug(\"Picked cube {} over {} as it provides a more recent snapshot of the lookup table {}\", cube,\n                     cubeInstance, lookupTableName);\n         }\n-        return cube;\n+        return cube == null ? cubeInstance : cube;\n     }\n \n     /**\n@@ -1274,7 +1278,7 @@ private boolean checkMeetSnapshotTable(CubeInstance toCheck, String lookupTableN\n             lookupTbl = strArr[strArr.length - 1];\n         }\n         for (DimensionDesc dimensionDesc : toCheck.getDescriptor().getDimensions()) {\n-            if (dimensionDesc.getTable().equalsIgnoreCase(lookupTbl)) {\n+            if (dimensionDesc.getTableRef().getTableName().equalsIgnoreCase(lookupTbl)) {\n                 checkRes = true;\n                 break;\n             }",
                "raw_url": "https://github.com/apache/kylin/raw/9ae2bd17489e87efacd7b177735c9ddc8e03e09f/core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java",
                "sha": "7ad4dd3f7baa1ba10e183d35ec159e11c9a6d42a",
                "status": "modified"
            }
        ],
        "message": "KYLIN-3628 Fix regression bug\n\nPrevious code change will cause NPE for \"SELECT * from DIMENSION_TABLE\" when dimension table name use alias.",
        "parent": "https://github.com/apache/kylin/commit/566ded888733dec7aba241944675169c4ef869d3",
        "repo": "kylin",
        "unit_tests": [
            "CubeManagerTest.java"
        ]
    },
    "kylin_a038656": {
        "bug_id": "kylin_a038656",
        "commit": "https://github.com/apache/kylin/commit/a0386564f5c095f924cef56c33ccb42093d25b9f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/kylin/blob/a0386564f5c095f924cef56c33ccb42093d25b9f/core-dictionary/src/main/java/org/apache/kylin/dict/TableColumnValueEnumerator.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-dictionary/src/main/java/org/apache/kylin/dict/TableColumnValueEnumerator.java?ref=a0386564f5c095f924cef56c33ccb42093d25b9f",
                "deletions": 1,
                "filename": "core-dictionary/src/main/java/org/apache/kylin/dict/TableColumnValueEnumerator.java",
                "patch": "@@ -53,7 +53,7 @@ public boolean moveNext() throws IOException {\n                 colStrValue = split[colIndex];\n             }\n \n-            colValue = Bytes.toBytes(colStrValue);\n+            colValue = colStrValue == null ? null : Bytes.toBytes(colStrValue);\n             return true;\n \n         } else {",
                "raw_url": "https://github.com/apache/kylin/raw/a0386564f5c095f924cef56c33ccb42093d25b9f/core-dictionary/src/main/java/org/apache/kylin/dict/TableColumnValueEnumerator.java",
                "sha": "5f9460c4aacbe5f0501288029f3047ef6732e699",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/kylin/blob/a0386564f5c095f924cef56c33ccb42093d25b9f/core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupBytesTable.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupBytesTable.java?ref=a0386564f5c095f924cef56c33ccb42093d25b9f",
                "deletions": 0,
                "filename": "core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupBytesTable.java",
                "patch": "@@ -49,4 +49,8 @@ protected String toString(ByteArray cell) {\n         return cell.toString();\r\n     }\r\n \r\n+    public Class<?> getType() {\n+        return ByteArray.class;\n+    }\n+\n }\r",
                "raw_url": "https://github.com/apache/kylin/raw/a0386564f5c095f924cef56c33ccb42093d25b9f/core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupBytesTable.java",
                "sha": "0758edccf5a44b90dd74704374d84604e895da87",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/kylin/blob/a0386564f5c095f924cef56c33ccb42093d25b9f/core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupStringTable.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupStringTable.java?ref=a0386564f5c095f924cef56c33ccb42093d25b9f",
                "deletions": 0,
                "filename": "core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupStringTable.java",
                "patch": "@@ -43,4 +43,7 @@ protected String toString(String cell) {\n         return cell;\r\n     }\r\n \r\n+    public Class<?> getType() {\n+        return String.class;\n+    }\n }\r",
                "raw_url": "https://github.com/apache/kylin/raw/a0386564f5c095f924cef56c33ccb42093d25b9f/core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupStringTable.java",
                "sha": "ce73febf1e467490387fb7d24828e690d8f2a584",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/kylin/blob/a0386564f5c095f924cef56c33ccb42093d25b9f/core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupTable.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupTable.java?ref=a0386564f5c095f924cef56c33ccb42093d25b9f",
                "deletions": 2,
                "filename": "core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupTable.java",
                "patch": "@@ -36,7 +36,7 @@\n /**\r\n  * An in-memory lookup table, in which each cell is an object of type T. The\r\n  * table is indexed by specified PK for fast lookup.\r\n- * \r\n+ *\n  * @author yangli9\r\n  */\r\n abstract public class LookupTable<T extends Comparable<T>> {\r\n@@ -73,7 +73,7 @@ protected void init() throws IOException {\n     @SuppressWarnings(\"unchecked\")\r\n     private void initRow(String[] cols, int[] keyIndex) {\r\n         T[] value = convertRow(cols);\r\n-        T[] keyCols = (T[]) java.lang.reflect.Array.newInstance(value[0].getClass(), keyIndex.length);\r\n+        T[] keyCols = (T[]) java.lang.reflect.Array.newInstance(getType(), keyIndex.length);\n         for (int i = 0; i < keyCols.length; i++)\r\n             keyCols[i] = value[keyIndex[i]];\r\n \r\n@@ -162,6 +162,8 @@ protected String toString(T[] cols) {\n \r\n     abstract protected String toString(T cell);\r\n \r\n+    abstract public Class<?> getType();\n+\n     public void dump() {\r\n         for (Array<T> key : data.keySet()) {\r\n             System.out.println(toString(key.data) + \" => \" + toString(data.get(key)));\r",
                "raw_url": "https://github.com/apache/kylin/raw/a0386564f5c095f924cef56c33ccb42093d25b9f/core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupTable.java",
                "sha": "eb2b9633fa460a6207e94f99069af8f07942309d",
                "status": "modified"
            }
        ],
        "message": "KYLIN-1180 Fix some NPE on Dictionary\n\nSigned-off-by: honma <honma@ebay.com>",
        "parent": "https://github.com/apache/kylin/commit/1fa447a52d378242005296fd168fe5743ba4aec5",
        "repo": "kylin",
        "unit_tests": [
            "LookupTableTest.java"
        ]
    },
    "kylin_b8f2292": {
        "bug_id": "kylin_b8f2292",
        "commit": "https://github.com/apache/kylin/commit/b8f2292641ae6d00b207196f6294de36e2a17bd6",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/kylin/blob/b8f2292641ae6d00b207196f6294de36e2a17bd6/server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java?ref=b8f2292641ae6d00b207196f6294de36e2a17bd6",
                "deletions": 1,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java",
                "patch": "@@ -69,7 +69,10 @@\n             }\n         }\n \n-        JobTimeFilterEnum timeFilter = JobTimeFilterEnum.getByCode(jobRequest.getTimeFilter());\n+        JobTimeFilterEnum timeFilter = JobTimeFilterEnum.LAST_ONE_WEEK;\n+        if (null != jobRequest.getTimeFilter()) {\n+            timeFilter = JobTimeFilterEnum.getByCode(jobRequest.getTimeFilter());\n+        }\n \n         try {\n             jobInstanceList = jobService.searchJobs(jobRequest.getCubeName(), jobRequest.getProjectName(), statusList,",
                "raw_url": "https://github.com/apache/kylin/raw/b8f2292641ae6d00b207196f6294de36e2a17bd6/server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java",
                "sha": "ca3be992de81247667d33f1a4c6635532752d92b",
                "status": "modified"
            }
        ],
        "message": "KYLIN-2940 List job restful throw NPE when time filter not set\n\nSigned-off-by: shaofengshi <shaofengshi@apache.org>",
        "parent": "https://github.com/apache/kylin/commit/e0d8dda58819786076d028d4ba0a571dddb8afe9",
        "repo": "kylin",
        "unit_tests": [
            "JobControllerTest.java"
        ]
    },
    "kylin_c0569ba": {
        "bug_id": "kylin_c0569ba",
        "commit": "https://github.com/apache/kylin/commit/c0569baa169f26f911be05baeab568139bb45670",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/kylin/blob/c0569baa169f26f911be05baeab568139bb45670/server/src/main/java/org/apache/kylin/rest/service/CacheService.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server/src/main/java/org/apache/kylin/rest/service/CacheService.java?ref=c0569baa169f26f911be05baeab568139bb45670",
                "deletions": 0,
                "filename": "server/src/main/java/org/apache/kylin/rest/service/CacheService.java",
                "patch": "@@ -125,9 +125,11 @@ public void removeCache(Broadcaster.TYPE cacheType, String cacheKey) {\n         try {\n             switch (cacheType) {\n                 case CUBE:\n+                if (getCubeManager().getCube(cacheKey) != null) {\n                     String storageUUID = getCubeManager().getCube(cacheKey).getUuid();\n                     getCubeManager().removeCubeLocal(cacheKey);\n                     super.cleanDataCache(storageUUID);\n+                }\n                     break;\n                 case CUBE_DESC:\n                     getCubeDescManager().removeLocalCubeDesc(cacheKey);",
                "raw_url": "https://github.com/apache/kylin/raw/c0569baa169f26f911be05baeab568139bb45670/server/src/main/java/org/apache/kylin/rest/service/CacheService.java",
                "sha": "63fe8c4d30e1dfd199871ac8733d80a8e23d4b10",
                "status": "modified"
            }
        ],
        "message": "KYLIN-1127 fix a NPE",
        "parent": "https://github.com/apache/kylin/commit/d2cbc8f26df02147c4040655f0470d7bc271f90f",
        "repo": "kylin",
        "unit_tests": [
            "CacheServiceTest.java"
        ]
    },
    "kylin_c487fe4": {
        "bug_id": "kylin_c487fe4",
        "commit": "https://github.com/apache/kylin/commit/c487fe4990473afa11d30a2e16ceb133e3f25b6d",
        "file": [
            {
                "additions": 63,
                "blob_url": "https://github.com/apache/kylin/blob/c487fe4990473afa11d30a2e16ceb133e3f25b6d/server-base/src/main/java/org/apache/kylin/rest/service/JobService.java",
                "changes": 127,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/service/JobService.java?ref=c487fe4990473afa11d30a2e16ceb133e3f25b6d",
                "deletions": 64,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/service/JobService.java",
                "patch": "@@ -18,18 +18,12 @@\n \n package org.apache.kylin.rest.service;\n \n-import java.io.IOException;\n-import java.util.Calendar;\n-import java.util.Collections;\n-import java.util.Date;\n-import java.util.EnumSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.TimeZone;\n-\n-import javax.annotation.Nullable;\n-\n+import com.google.common.base.Function;\n+import com.google.common.base.Predicate;\n+import com.google.common.base.Predicates;\n+import com.google.common.collect.FluentIterable;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Sets;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.directory.api.util.Strings;\n import org.apache.kylin.common.KylinConfig;\n@@ -72,12 +66,16 @@\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n \n-import com.google.common.base.Function;\n-import com.google.common.base.Predicate;\n-import com.google.common.base.Predicates;\n-import com.google.common.collect.FluentIterable;\n-import com.google.common.collect.Lists;\n-import com.google.common.collect.Sets;\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TimeZone;\n \n /**\n  * @author ysong1\n@@ -158,53 +156,53 @@ private ExecutableState parseToExecutableState(JobStatusEnum status) {\n         Message msg = MsgPicker.getMsg();\n \n         switch (status) {\n-        case DISCARDED:\n-            return ExecutableState.DISCARDED;\n-        case ERROR:\n-            return ExecutableState.ERROR;\n-        case FINISHED:\n-            return ExecutableState.SUCCEED;\n-        case NEW:\n-            return ExecutableState.READY;\n-        case PENDING:\n-            return ExecutableState.READY;\n-        case RUNNING:\n-            return ExecutableState.RUNNING;\n-        case STOPPED:\n-            return ExecutableState.STOPPED;\n-        default:\n-            throw new BadRequestException(String.format(msg.getILLEGAL_EXECUTABLE_STATE(), status));\n+            case DISCARDED:\n+                return ExecutableState.DISCARDED;\n+            case ERROR:\n+                return ExecutableState.ERROR;\n+            case FINISHED:\n+                return ExecutableState.SUCCEED;\n+            case NEW:\n+                return ExecutableState.READY;\n+            case PENDING:\n+                return ExecutableState.READY;\n+            case RUNNING:\n+                return ExecutableState.RUNNING;\n+            case STOPPED:\n+                return ExecutableState.STOPPED;\n+            default:\n+                throw new BadRequestException(String.format(msg.getILLEGAL_EXECUTABLE_STATE(), status));\n         }\n     }\n \n     private long getTimeStartInMillis(Calendar calendar, JobTimeFilterEnum timeFilter) {\n         Message msg = MsgPicker.getMsg();\n \n         switch (timeFilter) {\n-        case LAST_ONE_DAY:\n-            calendar.add(Calendar.DAY_OF_MONTH, -1);\n-            return calendar.getTimeInMillis();\n-        case LAST_ONE_WEEK:\n-            calendar.add(Calendar.WEEK_OF_MONTH, -1);\n-            return calendar.getTimeInMillis();\n-        case LAST_ONE_MONTH:\n-            calendar.add(Calendar.MONTH, -1);\n-            return calendar.getTimeInMillis();\n-        case LAST_ONE_YEAR:\n-            calendar.add(Calendar.YEAR, -1);\n-            return calendar.getTimeInMillis();\n-        case ALL:\n-            return 0;\n-        default:\n-            throw new BadRequestException(String.format(msg.getILLEGAL_TIME_FILTER(), timeFilter));\n+            case LAST_ONE_DAY:\n+                calendar.add(Calendar.DAY_OF_MONTH, -1);\n+                return calendar.getTimeInMillis();\n+            case LAST_ONE_WEEK:\n+                calendar.add(Calendar.WEEK_OF_MONTH, -1);\n+                return calendar.getTimeInMillis();\n+            case LAST_ONE_MONTH:\n+                calendar.add(Calendar.MONTH, -1);\n+                return calendar.getTimeInMillis();\n+            case LAST_ONE_YEAR:\n+                calendar.add(Calendar.YEAR, -1);\n+                return calendar.getTimeInMillis();\n+            case ALL:\n+                return 0;\n+            default:\n+                throw new BadRequestException(String.format(msg.getILLEGAL_TIME_FILTER(), timeFilter));\n         }\n     }\n \n     @PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN\n             + \" or hasPermission(#cube, 'ADMINISTRATION') or hasPermission(#cube, 'OPERATION') or hasPermission(#cube, 'MANAGEMENT')\")\n     public JobInstance submitJob(CubeInstance cube, long startDate, long endDate, long startOffset, long endOffset, //\n-            Map<Integer, Long> sourcePartitionOffsetStart, Map<Integer, Long> sourcePartitionOffsetEnd,\n-            CubeBuildTypeEnum buildType, boolean force, String submitter) throws IOException {\n+                                 Map<Integer, Long> sourcePartitionOffsetStart, Map<Integer, Long> sourcePartitionOffsetEnd,\n+                                 CubeBuildTypeEnum buildType, boolean force, String submitter) throws IOException {\n         JobInstance jobInstance = submitJobInternal(cube, startDate, endDate, startOffset, endOffset, sourcePartitionOffsetStart,\n                 sourcePartitionOffsetEnd, buildType, force, submitter);\n \n@@ -215,9 +213,9 @@ public JobInstance submitJob(CubeInstance cube, long startDate, long endDate, lo\n     }\n \n     public JobInstance submitJobInternal(CubeInstance cube, long startDate, long endDate, long startOffset,\n-            long endOffset, //\n-            Map<Integer, Long> sourcePartitionOffsetStart, Map<Integer, Long> sourcePartitionOffsetEnd,\n-            CubeBuildTypeEnum buildType, boolean force, String submitter) throws IOException {\n+                                         long endOffset, //\n+                                         Map<Integer, Long> sourcePartitionOffsetStart, Map<Integer, Long> sourcePartitionOffsetEnd,\n+                                         CubeBuildTypeEnum buildType, boolean force, String submitter) throws IOException {\n         Message msg = MsgPicker.getMsg();\n \n         if (cube.getStatus() == RealizationStatusEnum.DESCBROKEN) {\n@@ -330,7 +328,7 @@ public void rollbackJob(JobInstance job, String stepId) {\n     @PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN\n             + \" or hasPermission(#job, 'ADMINISTRATION') or hasPermission(#job, 'OPERATION') or hasPermission(#job, 'MANAGEMENT')\")\n     public JobInstance cancelJob(JobInstance job) throws IOException {\n-        if (null == job.getRelatedCube() || null == getCubeManager().getCube(job.getRelatedCube())) {\n+        if (null == job.getRelatedCube() || null == getCubeManager().getCube(job.getRelatedCube()) || null == job.getRelatedSegment()) {\n             getExecutableManager().discardJob(job.getId());\n             return job;\n         }\n@@ -366,11 +364,12 @@ public void dropJob(JobInstance job) throws IOException {\n \n     /**\n      * currently only support substring match\n+     *\n      * @return\n      */\n     public List<JobInstance> searchJobs(final String cubeNameSubstring, final String projectName,\n-            final List<JobStatusEnum> statusList, final Integer limitValue, final Integer offsetValue,\n-            final JobTimeFilterEnum timeFilter) {\n+                                        final List<JobStatusEnum> statusList, final Integer limitValue, final Integer offsetValue,\n+                                        final JobTimeFilterEnum timeFilter) {\n         Integer limit = (null == limitValue) ? 30 : limitValue;\n         Integer offset = (null == offsetValue) ? 0 : offsetValue;\n         List<JobInstance> jobs = searchJobsByCubeName(cubeNameSubstring, projectName, statusList, timeFilter);\n@@ -388,17 +387,17 @@ public void dropJob(JobInstance job) throws IOException {\n     }\n \n     public List<JobInstance> searchJobsByCubeName(final String cubeNameSubstring, final String projectName,\n-            final List<JobStatusEnum> statusList, final JobTimeFilterEnum timeFilter) {\n+                                                  final List<JobStatusEnum> statusList, final JobTimeFilterEnum timeFilter) {\n         return innerSearchCubingJobs(cubeNameSubstring, null, projectName, statusList, timeFilter);\n     }\n \n     public List<JobInstance> searchJobsByJobName(final String jobName, final String projectName,\n-            final List<JobStatusEnum> statusList, final JobTimeFilterEnum timeFilter) {\n+                                                 final List<JobStatusEnum> statusList, final JobTimeFilterEnum timeFilter) {\n         return innerSearchCubingJobs(null, jobName, projectName, statusList, timeFilter);\n     }\n \n     public List<JobInstance> innerSearchCubingJobs(final String cubeName, final String jobName,\n-            final String projectName, final List<JobStatusEnum> statusList, final JobTimeFilterEnum timeFilter) {\n+                                                   final String projectName, final List<JobStatusEnum> statusList, final JobTimeFilterEnum timeFilter) {\n         // prepare time range\n         Calendar calendar = Calendar.getInstance();\n         calendar.setTime(new Date());\n@@ -421,8 +420,8 @@ public JobInstance apply(CubingJob cubingJob) {\n     }\n \n     public List<CubingJob> innerSearchCubingJobs(final String cubeName, final String jobName,\n-            final Set<ExecutableState> statusList, long timeStartInMillis, long timeEndInMillis,\n-            final Map<String, Output> allOutputs, final boolean nameExactMatch, final String projectName) {\n+                                                 final Set<ExecutableState> statusList, long timeStartInMillis, long timeEndInMillis,\n+                                                 final Map<String, Output> allOutputs, final boolean nameExactMatch, final String projectName) {\n         List<CubingJob> results = Lists.newArrayList(FluentIterable.from(\n                 getExecutableManager().getAllAbstractExecutables(timeStartInMillis, timeEndInMillis, CubingJob.class))\n                 .filter(new Predicate<AbstractExecutable>() {\n@@ -491,7 +490,7 @@ public boolean apply(@Nullable CubingJob cubeJob) {\n     }\n \n     public List<CubingJob> listJobsByRealizationName(final String realizationName, final String projectName,\n-            final Set<ExecutableState> statusList) {\n+                                                     final Set<ExecutableState> statusList) {\n         return innerSearchCubingJobs(realizationName, null, statusList, 0L, Long.MAX_VALUE,\n                 getExecutableManager().getAllOutputs(), true, projectName);\n     }",
                "raw_url": "https://github.com/apache/kylin/raw/c487fe4990473afa11d30a2e16ceb133e3f25b6d/server-base/src/main/java/org/apache/kylin/rest/service/JobService.java",
                "sha": "5dafa08bd9d382b5ada8693811d5e6fcee8c87d7",
                "status": "modified"
            }
        ],
        "message": "#1949, fix NPE when discarding model check job (#1952)",
        "parent": "https://github.com/apache/kylin/commit/2eca43c40723cce0f12a56a1299894bbf5803d03",
        "repo": "kylin",
        "unit_tests": [
            "JobServiceTest.java"
        ]
    },
    "kylin_c94d218": {
        "bug_id": "kylin_c94d218",
        "commit": "https://github.com/apache/kylin/commit/c94d2182904b0f1174eaba2504ce242b7d509168",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/kylin/blob/c94d2182904b0f1174eaba2504ce242b7d509168/server-base/src/main/java/org/apache/kylin/rest/controller/StreamingController.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/controller/StreamingController.java?ref=c94d2182904b0f1174eaba2504ce242b7d509168",
                "deletions": 5,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/controller/StreamingController.java",
                "patch": "@@ -26,9 +26,9 @@\n import org.apache.kylin.common.KylinConfig;\n import org.apache.kylin.common.util.JsonUtil;\n import org.apache.kylin.engine.mr.HadoopUtil;\n-import org.apache.kylin.metadata.streaming.StreamingConfig;\n import org.apache.kylin.metadata.MetadataManager;\n import org.apache.kylin.metadata.model.TableDesc;\n+import org.apache.kylin.metadata.streaming.StreamingConfig;\n import org.apache.kylin.rest.exception.BadRequestException;\n import org.apache.kylin.rest.exception.ForbiddenException;\n import org.apache.kylin.rest.exception.InternalErrorException;\n@@ -104,6 +104,10 @@ public StreamingRequest saveStreamingConfig(@RequestBody StreamingRequest stream\n \n         String project = streamingRequest.getProject();\n         TableDesc tableDesc = deserializeTableDesc(streamingRequest);\n+        if (null == tableDesc) {\n+            throw new BadRequestException(\"Failed to add streaming table.\");\n+        }\n+\n         StreamingConfig streamingConfig = deserializeSchemalDesc(streamingRequest);\n         KafkaConfig kafkaConfig = deserializeKafkaSchemalDesc(streamingRequest);\n         boolean saveStreamingSuccess = false, saveKafkaSuccess = false;\n@@ -235,10 +239,12 @@ private TableDesc deserializeTableDesc(StreamingRequest streamingRequest) {\n             throw new InternalErrorException(\"Failed to deal with the request:\" + e.getMessage(), e);\n         }\n \n-        String[] dbTable = HadoopUtil.parseHiveTableName(desc.getName());\n-        desc.setName(dbTable[1]);\n-        desc.setDatabase(dbTable[0]);\n-        desc.getIdentity();\n+        if (null != desc) {\n+            String[] dbTable = HadoopUtil.parseHiveTableName(desc.getName());\n+            desc.setName(dbTable[1]);\n+            desc.setDatabase(dbTable[0]);\n+            desc.getIdentity();\n+        }\n         return desc;\n     }\n ",
                "raw_url": "https://github.com/apache/kylin/raw/c94d2182904b0f1174eaba2504ce242b7d509168/server-base/src/main/java/org/apache/kylin/rest/controller/StreamingController.java",
                "sha": "e04ebc838b33499b72f4c18e7f8132358be43e03",
                "status": "modified"
            }
        ],
        "message": "KYLIN-2209 fix potential NPE\n\nSigned-off-by: Li Yang <liyang@apache.org>",
        "parent": "https://github.com/apache/kylin/commit/c0b87039eb45ee94c6ecab71e27d14ee81bac8e2",
        "repo": "kylin",
        "unit_tests": [
            "StreamingControllerTest.java"
        ]
    },
    "kylin_ca42b92": {
        "bug_id": "kylin_ca42b92",
        "commit": "https://github.com/apache/kylin/commit/ca42b92b6d86eb6cb3eb22a212e77f2155b19890",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/kylin/blob/ca42b92b6d86eb6cb3eb22a212e77f2155b19890/core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java?ref=ca42b92b6d86eb6cb3eb22a212e77f2155b19890",
                "deletions": 0,
                "filename": "core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java",
                "patch": "@@ -132,6 +132,10 @@ public ProjectInstance reloadProjectQuietly(String project) throws IOException {\n     }\n \n     public ProjectInstance getProject(String projectName) {\n+        // Null check is needed for ConcurrentMap does not supporting .get(null)\n+        if (projectName == null)\n+            return null;\n+\n         try (AutoLock lock = prjMapLock.lockForRead()) {\n             return projectMap.get(projectName);\n         }",
                "raw_url": "https://github.com/apache/kylin/raw/ca42b92b6d86eb6cb3eb22a212e77f2155b19890/core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java",
                "sha": "0dd364d124c6832de0c6b40d2c582b8d358d010f",
                "status": "modified"
            }
        ],
        "message": "Add null pointer check for ProjectManager#getProject to avoid NPE",
        "parent": "https://github.com/apache/kylin/commit/f37fbce17f6e25775877290ba1f0de076c62f32f",
        "repo": "kylin",
        "unit_tests": [
            "ProjectManagerTest.java"
        ]
    },
    "kylin_cc1ca2d": {
        "bug_id": "kylin_cc1ca2d",
        "commit": "https://github.com/apache/kylin/commit/cc1ca2d32b508a758bd85d3da58006d70eeb9104",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/kylin/blob/cc1ca2d32b508a758bd85d3da58006d70eeb9104/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MetadataCleanupJob.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MetadataCleanupJob.java?ref=cc1ca2d32b508a758bd85d3da58006d70eeb9104",
                "deletions": 8,
                "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MetadataCleanupJob.java",
                "patch": "@@ -111,15 +111,17 @@ public void cleanup() throws Exception {\n         for (String resourceRoot : new String[]{ResourceStore.SNAPSHOT_RESOURCE_ROOT, ResourceStore.CUBE_STATISTICS_ROOT}) {\n             ArrayList<String> snapshotTables = getStore().listResources(resourceRoot);\n \n-            for (String snapshotTable : snapshotTables) {\n-                ArrayList<String> snapshotNames = getStore().listResources(snapshotTable);\n-                if (snapshotNames != null)\n-                    for (String snapshot : snapshotNames) {\n-                        if (!activeResourceList.contains(snapshot)) {\n-                            if (isOlderThanThreshold(getStore().getResourceTimestamp(snapshot)))\n-                                toDeleteResource.add(snapshot);\n+            if (snapshotTables != null) {\n+                for (String snapshotTable : snapshotTables) {\n+                    ArrayList<String> snapshotNames = getStore().listResources(snapshotTable);\n+                    if (snapshotNames != null)\n+                        for (String snapshot : snapshotNames) {\n+                            if (!activeResourceList.contains(snapshot)) {\n+                                if (isOlderThanThreshold(getStore().getResourceTimestamp(snapshot)))\n+                                    toDeleteResource.add(snapshot);\n+                            }\n                         }\n-                    }\n+                }\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/kylin/raw/cc1ca2d32b508a758bd85d3da58006d70eeb9104/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MetadataCleanupJob.java",
                "sha": "43bdf6ef3f5fa2051f533eaf0cdcfc9130b7cf28",
                "status": "modified"
            }
        ],
        "message": "KYLIN-901 fix a NPE",
        "parent": "https://github.com/apache/kylin/commit/d8fcfeac84f4fce4217ec955d0cfbd7303332e4c",
        "repo": "kylin",
        "unit_tests": [
            "MetadataCleanupJobTest.java"
        ]
    },
    "kylin_d48e5eb": {
        "bug_id": "kylin_d48e5eb",
        "commit": "https://github.com/apache/kylin/commit/d48e5eb6905a1bd7e4263e8efef8e451088d326f",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/kylin/blob/d48e5eb6905a1bd7e4263e8efef8e451088d326f/tool/src/main/java/org/apache/kylin/tool/CubeMetaExtractor.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/tool/src/main/java/org/apache/kylin/tool/CubeMetaExtractor.java?ref=d48e5eb6905a1bd7e4263e8efef8e451088d326f",
                "deletions": 7,
                "filename": "tool/src/main/java/org/apache/kylin/tool/CubeMetaExtractor.java",
                "patch": "@@ -321,13 +321,7 @@ private void retrieveResourcePath(IRealization realization) {\n \n             dealWithStreaming(cube);\n \n-            for (TableRef table : modelDesc.getAllTables()) {\n-                String tableName = table.getTableIdentity();\n-                addRequired(TableDesc.concatResourcePath(tableName));\n-                addOptional(TableDesc.concatExdResourcePath(tableName));\n-            }\n-\n-            addRequired(DataModelDesc.concatResourcePath(modelDesc.getName()));\n+            retrieveDataModelDesc(modelDesc);\n             addRequired(CubeDesc.concatResourcePath(cubeDesc.getName()));\n \n             if (includeSegments) {\n@@ -389,6 +383,19 @@ private void retrieveResourcePath(IRealization realization) {\n         }\n     }\n \n+    private void retrieveDataModelDesc(DataModelDesc modelDesc) {\n+        if (modelDesc == null) {\n+            return;\n+        }\n+        for (TableRef table : modelDesc.getAllTables()) {\n+            String tableName = table.getTableIdentity();\n+            addRequired(TableDesc.concatResourcePath(tableName));\n+            addOptional(TableDesc.concatExdResourcePath(tableName));\n+        }\n+\n+        addRequired(DataModelDesc.concatResourcePath(modelDesc.getName()));\n+    }\n+\n     private void addRequired(String record) {\n         logger.info(\"adding required resource {}\", record);\n         requiredResources.add(record);",
                "raw_url": "https://github.com/apache/kylin/raw/d48e5eb6905a1bd7e4263e8efef8e451088d326f/tool/src/main/java/org/apache/kylin/tool/CubeMetaExtractor.java",
                "sha": "5bfe96b91c49a03571f3b477fe0d9485481989f2",
                "status": "modified"
            }
        ],
        "message": "minor, fix model desc NPE in diagnosis, broken cube can be exported",
        "parent": "https://github.com/apache/kylin/commit/6ce341dbdfd02f06fbc9c0013e2638e4a5954879",
        "repo": "kylin",
        "unit_tests": [
            "CubeMetaExtractorTest.java"
        ]
    },
    "kylin_d7cf675": {
        "bug_id": "kylin_d7cf675",
        "commit": "https://github.com/apache/kylin/commit/d7cf675541771000ff37f164070a686e61f7fa8f",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/kylin/blob/d7cf675541771000ff37f164070a686e61f7fa8f/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MetadataCleanupJob.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MetadataCleanupJob.java?ref=d7cf675541771000ff37f164070a686e61f7fa8f",
                "deletions": 10,
                "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MetadataCleanupJob.java",
                "patch": "@@ -122,16 +122,18 @@ public void cleanup() throws Exception {\n         // three level resources, only dictionaries\n         NavigableSet<String> dictTables = getStore().listResources(ResourceStore.DICT_RESOURCE_ROOT);\n \n-        for (String table : dictTables) {\n-            NavigableSet<String> tableColNames = getStore().listResources(table);\n-            if (tableColNames != null)\n-                for (String tableCol : tableColNames) {\n-                    NavigableSet<String> dictionaries = getStore().listResources(tableCol);\n-                    if (dictionaries != null)\n-                        for (String dict : dictionaries)\n-                            if (isOlderThanThreshold(getStore().getResourceTimestamp(dict)))\n-                                toDeleteResource.add(dict);\n-                }\n+        if (dictTables != null) {\n+            for (String table : dictTables) {\n+                NavigableSet<String> tableColNames = getStore().listResources(table);\n+                if (tableColNames != null)\n+                    for (String tableCol : tableColNames) {\n+                        NavigableSet<String> dictionaries = getStore().listResources(tableCol);\n+                        if (dictionaries != null)\n+                            for (String dict : dictionaries)\n+                                if (isOlderThanThreshold(getStore().getResourceTimestamp(dict)))\n+                                    toDeleteResource.add(dict);\n+                    }\n+            }\n         }\n \n         Set<String> activeResourceList = Sets.newHashSet();",
                "raw_url": "https://github.com/apache/kylin/raw/d7cf675541771000ff37f164070a686e61f7fa8f/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MetadataCleanupJob.java",
                "sha": "f3ab31065200c744a3f7290b7ec772e8776aef75",
                "status": "modified"
            }
        ],
        "message": "minor, fix NPE when metastore cleanup\n\nSigned-off-by: shaofengshi <shaofengshi@apache.org>",
        "parent": "https://github.com/apache/kylin/commit/696fb89aa2eb684408d1009218f80fe323dffd3b",
        "repo": "kylin",
        "unit_tests": [
            "MetadataCleanupJobTest.java"
        ]
    },
    "kylin_ddac497": {
        "bug_id": "kylin_ddac497",
        "commit": "https://github.com/apache/kylin/commit/ddac497a2cf62bccba8618829a03e3be1a030098",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/kylin/blob/ddac497a2cf62bccba8618829a03e3be1a030098/examples/test_case_data/localmeta/cube_desc/test_kylin_cube_without_slr_desc.json",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/examples/test_case_data/localmeta/cube_desc/test_kylin_cube_without_slr_desc.json?ref=ddac497a2cf62bccba8618829a03e3be1a030098",
                "deletions": 1,
                "filename": "examples/test_case_data/localmeta/cube_desc/test_kylin_cube_without_slr_desc.json",
                "patch": "@@ -172,7 +172,7 @@\n       \"dictionary\" : \"true\",\n       \"mandatory\" : false\n     } ],\n-    \"aggregation_groups\" : [ [ \"lstg_format_name\", \"lstg_site_id\", \"slr_segment_cd\" ], [ \"leaf_categ_id\", \"meta_categ_name\", \"categ_lvl3_name\", \"categ_lvl2_name\", ] ]\n+    \"aggregation_groups\" : [ [ \"lstg_format_name\", \"lstg_site_id\", \"slr_segment_cd\" ], [ \"leaf_categ_id\", \"meta_categ_name\", \"categ_lvl3_name\", \"categ_lvl2_name\" ] ]\n   },\n   \"last_modified\" : 1422435345362,\n   \"model_name\" : \"test_kylin_inner_join_model_desc\",",
                "raw_url": "https://github.com/apache/kylin/raw/ddac497a2cf62bccba8618829a03e3be1a030098/examples/test_case_data/localmeta/cube_desc/test_kylin_cube_without_slr_desc.json",
                "sha": "567a0991148aac7331c8c163e1a2d0ade2738e13",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/kylin/blob/ddac497a2cf62bccba8618829a03e3be1a030098/server/src/main/java/org/apache/kylin/rest/service/CacheService.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server/src/main/java/org/apache/kylin/rest/service/CacheService.java?ref=ddac497a2cf62bccba8618829a03e3be1a030098",
                "deletions": 1,
                "filename": "server/src/main/java/org/apache/kylin/rest/service/CacheService.java",
                "patch": "@@ -49,7 +49,6 @@\n     @Autowired\n     private CacheUpdater cacheUpdater;\n \n-\n     @Autowired\n     private CubeService cubeService;\n \n@@ -63,6 +62,10 @@ public void initCacheUpdater(CacheUpdater cacheUpdater) {\n         AbstractRestCache.setCacheUpdater(cacheUpdater);\n     }\n \n+    public void setCubeService(CubeService cubeService) {\n+        this.cubeService = cubeService;\n+    }\n+\n     private static final Logger logger = LoggerFactory.getLogger(CacheService.class);\n \n     public void rebuildCache(Broadcaster.TYPE cacheType, String cacheKey) {",
                "raw_url": "https://github.com/apache/kylin/raw/ddac497a2cf62bccba8618829a03e3be1a030098/server/src/main/java/org/apache/kylin/rest/service/CacheService.java",
                "sha": "14f0a433b28d59110358f0e31278e8b8e5d676f4",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/kylin/blob/ddac497a2cf62bccba8618829a03e3be1a030098/server/src/main/java/org/apache/kylin/rest/service/CubeService.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server/src/main/java/org/apache/kylin/rest/service/CubeService.java?ref=ddac497a2cf62bccba8618829a03e3be1a030098",
                "deletions": 2,
                "filename": "server/src/main/java/org/apache/kylin/rest/service/CubeService.java",
                "patch": "@@ -76,7 +76,7 @@\n \n     private static final Logger logger = LoggerFactory.getLogger(CubeService.class);\n \n-    private static WeakHashMap<String, HBaseResponse> htableInfoCache = new WeakHashMap<>();\n+    private WeakHashMap<String, HBaseResponse> htableInfoCache = new WeakHashMap<>();\n \n     @Autowired\n     private AccessService accessService;\n@@ -580,7 +580,7 @@ public void mergeCubeOnNewSegmentReady(String cubeName) {\n             CubeSegment newSeg;\n             CubeInstance cube = getCubeManager().getCube(cubeName);\n             if (cube.needAutoMerge()) {\n-                synchronized (CacheService.class) {\n+                synchronized (CubeService.class) {\n                     try {\n                         newSeg = getCubeManager().autoMergeCubeSegments(cube);\n                         if (newSeg != null) {",
                "raw_url": "https://github.com/apache/kylin/raw/ddac497a2cf62bccba8618829a03e3be1a030098/server/src/main/java/org/apache/kylin/rest/service/CubeService.java",
                "sha": "43ecfd584959553343d68cdfe6a814248ed1cbc9",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/kylin/blob/ddac497a2cf62bccba8618829a03e3be1a030098/server/src/test/java/org/apache/kylin/rest/service/CacheServiceTest.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server/src/test/java/org/apache/kylin/rest/service/CacheServiceTest.java?ref=ddac497a2cf62bccba8618829a03e3be1a030098",
                "deletions": 0,
                "filename": "server/src/test/java/org/apache/kylin/rest/service/CacheServiceTest.java",
                "patch": "@@ -86,8 +86,25 @@ public KylinConfig getConfig() {\n             }\n         };\n \n+\n+        final CubeService cubeServiceA = new CubeService() {\n+            @Override\n+            public KylinConfig getConfig() {\n+                return configA;\n+            }\n+        };\n+        final CubeService cubeServiceB = new CubeService() {\n+            @Override\n+            public KylinConfig getConfig() {\n+                return configB;\n+            }\n+        };\n+\n+\n         serviceA.initCacheUpdater(new RemoteCacheUpdater());\n+        serviceA.setCubeService(cubeServiceA);\n         serviceB.initCacheUpdater(new RemoteCacheUpdater());\n+        serviceB.setCubeService(cubeServiceB);\n \n         context.addServlet(new ServletHolder(new BroadcasterReceiveServlet(new BroadcasterReceiveServlet.BroadcasterHandler() {\n             @Override",
                "raw_url": "https://github.com/apache/kylin/raw/ddac497a2cf62bccba8618829a03e3be1a030098/server/src/test/java/org/apache/kylin/rest/service/CacheServiceTest.java",
                "sha": "8860d223ee8987da935854b21569d1245365ea16",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/kylin/blob/ddac497a2cf62bccba8618829a03e3be1a030098/storage/src/main/java/org/apache/kylin/storage/hybrid/HybridInstance.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/storage/src/main/java/org/apache/kylin/storage/hybrid/HybridInstance.java?ref=ddac497a2cf62bccba8618829a03e3be1a030098",
                "deletions": 1,
                "filename": "storage/src/main/java/org/apache/kylin/storage/hybrid/HybridInstance.java",
                "patch": "@@ -70,7 +70,7 @@ private void init() {\n             for (int i = 0; i < realizationEntries.size(); i++) {\n                 IRealization realization = registry.getRealization(realizationEntries.get(i).getType(), realizationEntries.get(i).getRealization());\n                 if (realization == null) {\n-                    logger.error(\"Realization '\" + realization.getName() + \" is not found, remove from Hybrid '\" + this.getName() + \"'\");\n+                    logger.error(\"Realization '\" + realizationEntries.get(i) + \" is not found, remove from Hybrid '\" + this.getName() + \"'\");\n                     continue;\n                 }\n                 if (realization.isReady() == false) {",
                "raw_url": "https://github.com/apache/kylin/raw/ddac497a2cf62bccba8618829a03e3be1a030098/storage/src/main/java/org/apache/kylin/storage/hybrid/HybridInstance.java",
                "sha": "fee3bab875e0360da0d19d797fbfb52630581a4e",
                "status": "modified"
            }
        ],
        "message": "KYLIN-867 fix a NPE in CacheServiceTest",
        "parent": "https://github.com/apache/kylin/commit/eb86239c22bfb292ea854442848a8ee62be16d11",
        "repo": "kylin",
        "unit_tests": [
            "HybridInstanceTest.java"
        ]
    },
    "kylin_de2f754": {
        "bug_id": "kylin_de2f754",
        "commit": "https://github.com/apache/kylin/commit/de2f75458b3a5d76390173fdd9359eadbcb11764",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/kylin/blob/de2f75458b3a5d76390173fdd9359eadbcb11764/server/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java?ref=de2f75458b3a5d76390173fdd9359eadbcb11764",
                "deletions": 0,
                "filename": "server/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
                "patch": "@@ -63,4 +63,11 @@ public String dumpJobDiagnosisInfo(String jobId) throws IOException {\n         jobInfoExtractor.execute(args);\n         return jobInfoExtractor.getExportDest();\n     }\n+\n+    public static void main(String args1[]) {\n+        String[] args = { \"-project\", \"learn_kylin\", \"-destDir\", Files.createTempDir().getAbsolutePath() };\n+        logger.info(\"DiagnosisInfoCLI args: \" + args);\n+        DiagnosisInfoCLI diagnosisInfoCli = new DiagnosisInfoCLI();\n+        diagnosisInfoCli.execute(args);\n+    }\n }",
                "raw_url": "https://github.com/apache/kylin/raw/de2f75458b3a5d76390173fdd9359eadbcb11764/server/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
                "sha": "b530586f72663d59cba9157b1fc9da2f21715cd4",
                "status": "modified"
            }
        ],
        "message": "minor, fix an NPE",
        "parent": "https://github.com/apache/kylin/commit/4f32927558ff6ebc1899241af87e93bd2747e242",
        "repo": "kylin",
        "unit_tests": [
            "DiagnosisServiceTest.java"
        ]
    },
    "kylin_fd745c8": {
        "bug_id": "kylin_fd745c8",
        "commit": "https://github.com/apache/kylin/commit/fd745c8804848a60ac96eff1bd9b30bbe38bdafc",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/kylin/blob/fd745c8804848a60ac96eff1bd9b30bbe38bdafc/server-base/src/main/java/org/apache/kylin/rest/service/JobService.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/service/JobService.java?ref=fd745c8804848a60ac96eff1bd9b30bbe38bdafc",
                "deletions": 2,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/service/JobService.java",
                "patch": "@@ -536,10 +536,13 @@ private String getServerName() {\n             @Override\n             public boolean apply(AbstractExecutable executable) {\n                 if (executable instanceof CubingJob) {\n-                    if (cubeName == null) {\n+                    if (StringUtils.isEmpty(cubeName)) {\n                         return true;\n                     }\n-                    return CubingExecutableUtil.getCubeName(executable.getParams()).equalsIgnoreCase(cubeName);\n+                    String executableCubeName = CubingExecutableUtil.getCubeName(executable.getParams());\n+                    if (executableCubeName == null)\n+                        return true;\n+                    return executableCubeName.contains(cubeName);\n                 } else {\n                     return false;\n                 }",
                "raw_url": "https://github.com/apache/kylin/raw/fd745c8804848a60ac96eff1bd9b30bbe38bdafc/server-base/src/main/java/org/apache/kylin/rest/service/JobService.java",
                "sha": "4709a919de777f306a3790fcf99c04f763f909aa",
                "status": "modified"
            }
        ],
        "message": "minor, fix NPE when filter Non-Cubing Job",
        "parent": "https://github.com/apache/kylin/commit/73a7c25dfeb28764658af3e73065aa04cc1b92cd",
        "repo": "kylin",
        "unit_tests": [
            "JobServiceTest.java"
        ]
    }
}