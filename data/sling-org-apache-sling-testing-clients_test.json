{
    "sling-org-apache-sling-testing-clients_609cb61": {
        "bug_id": "sling-org-apache-sling-testing-clients_609cb61",
        "commit": "https://github.com/apache/sling-org-apache-sling-testing-clients/commit/609cb61fd2dec08657556b9adc91e889911a230e",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-testing-clients/blob/609cb61fd2dec08657556b9adc91e889911a230e/src/main/java/org/apache/sling/testing/clients/SlingClient.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-testing-clients/contents/src/main/java/org/apache/sling/testing/clients/SlingClient.java?ref=609cb61fd2dec08657556b9adc91e889911a230e",
                "deletions": 1,
                "filename": "src/main/java/org/apache/sling/testing/clients/SlingClient.java",
                "patch": "@@ -672,7 +672,7 @@ protected CloseableHttpClient buildHttpClient() {\n             return httpClientBuilder.build();\n         }\n \n-        protected SlingClientConfig buildSlingClientConfig() {\n+        protected SlingClientConfig buildSlingClientConfig() throws ClientException {\n             return configBuilder.build();\n         }\n ",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-testing-clients/raw/609cb61fd2dec08657556b9adc91e889911a230e/src/main/java/org/apache/sling/testing/clients/SlingClient.java",
                "sha": "b96e979e125fb72b67d35f9ce460ba52fcb1749e",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-testing-clients/blob/609cb61fd2dec08657556b9adc91e889911a230e/src/main/java/org/apache/sling/testing/clients/SlingClientConfig.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-testing-clients/contents/src/main/java/org/apache/sling/testing/clients/SlingClientConfig.java?ref=609cb61fd2dec08657556b9adc91e889911a230e",
                "deletions": 3,
                "filename": "src/main/java/org/apache/sling/testing/clients/SlingClientConfig.java",
                "patch": "@@ -207,12 +207,20 @@ public Builder setCookieStore(CookieStore cookieStore) {\n             return this;\n         }\n \n-        public SlingClientConfig build() {\n+        public SlingClientConfig build() throws ClientException {\n+            if (!this.url.isAbsolute()) {\n+                throw new ClientException(\"Url must be absolute: \" + url);\n+            }\n+\n+            HttpHost targetHost = URIUtils.extractHost(this.url);\n+            if (targetHost == null) {\n+                throw new ClientException(\"Failed to extract hostname from url \" + url);\n+            }\n+\n             // Create default CredentialsProvider if not set\n             if (credsProvider == null) {\n                 credsProvider = new BasicCredentialsProvider();\n                 if (StringUtils.isNotEmpty(this.user)) {\n-                    HttpHost targetHost = URIUtils.extractHost(this.url);\n                     credsProvider.setCredentials(new AuthScope(targetHost.getHostName(), targetHost.getPort()),\n                             new UsernamePasswordCredentials(this.user, this.password));\n                 }\n@@ -222,7 +230,7 @@ public SlingClientConfig build() {\n             if (authCache == null) {\n                 BasicScheme basicScheme = new BasicScheme();\n                 authCache = new BasicAuthCache();\n-                authCache.put(URIUtils.extractHost(url), basicScheme);\n+                authCache.put(targetHost, basicScheme);\n             }\n \n             // if preemptive auth is disabled, force auth cache to be null",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-testing-clients/raw/609cb61fd2dec08657556b9adc91e889911a230e/src/main/java/org/apache/sling/testing/clients/SlingClientConfig.java",
                "sha": "825dfe8c04445e0766d167e715ce9e7ba7b9e5a5",
                "status": "modified"
            },
            {
                "additions": 44,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-testing-clients/blob/609cb61fd2dec08657556b9adc91e889911a230e/src/test/java/org/apache/sling/testing/clients/SlingClientConfigTest.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-testing-clients/contents/src/test/java/org/apache/sling/testing/clients/SlingClientConfigTest.java?ref=609cb61fd2dec08657556b9adc91e889911a230e",
                "deletions": 0,
                "filename": "src/test/java/org/apache/sling/testing/clients/SlingClientConfigTest.java",
                "patch": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.sling.testing.clients;\n+\n+import org.junit.Test;\n+\n+import java.net.URISyntaxException;\n+\n+public class SlingClientConfigTest {\n+\n+    @Test(expected = ClientException.class)\n+    public void testUrlNoProtocolUnauthenticated() throws URISyntaxException, ClientException {\n+        // Should fail because URL doesn't start with http or https\n+        SlingClientConfig.Builder\n+                .create()\n+                .setUrl(\"example.com\")\n+                .build();\n+    }\n+\n+    @Test(expected = ClientException.class)\n+    public void testUrlNoProtocolAuthenticated() throws URISyntaxException, ClientException {\n+        // Should fail because URL doesn't start with http or https\n+        SlingClientConfig.Builder\n+                .create()\n+                .setUser(\"username\")\n+                .setPassword(\"pass\")\n+                .setUrl(\"example.com\")\n+                .build();\n+    }\n+}",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-testing-clients/raw/609cb61fd2dec08657556b9adc91e889911a230e/src/test/java/org/apache/sling/testing/clients/SlingClientConfigTest.java",
                "sha": "eb810a633b481d52e08c49b9fb13d3ff99facf25",
                "status": "added"
            },
            {
                "additions": 70,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-testing-clients/blob/609cb61fd2dec08657556b9adc91e889911a230e/src/test/java/org/apache/sling/testing/clients/SlingClientConstructorTest.java",
                "changes": 70,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-testing-clients/contents/src/test/java/org/apache/sling/testing/clients/SlingClientConstructorTest.java?ref=609cb61fd2dec08657556b9adc91e889911a230e",
                "deletions": 0,
                "filename": "src/test/java/org/apache/sling/testing/clients/SlingClientConstructorTest.java",
                "patch": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.sling.testing.clients;\n+\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpRequest;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.protocol.HttpRequestHandler;\n+import org.codehaus.jackson.JsonNode;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class SlingClientConstructorTest {\n+\n+    @Test\n+    public void testConstructorUrlHttp() throws Exception {\n+        URI url = URI.create(\"http://example.com/\");\n+        SlingClient c = new SlingClient(url, \"user\", \"pass\");\n+        assertEquals(url, c.getUrl());\n+    }\n+\n+    @Test\n+    public void testConstructorUrlHttps() throws Exception {\n+        URI url = URI.create(\"https://example.com/\");\n+        SlingClient c = new SlingClient(url, \"user\", \"pass\");\n+        assertEquals(url, c.getUrl());\n+    }\n+\n+    @Test\n+    public void testConstructorUrlBasePath() throws Exception {\n+        URI url = URI.create(\"https://example.com/mypath/\");\n+        SlingClient c = new SlingClient(url, \"user\", \"pass\");\n+        assertEquals(url, c.getUrl());\n+    }\n+\n+    @Test\n+    public void testConstructorAnonymous() throws Exception {\n+        URI url = URI.create(\"https://example.com/\");\n+        SlingClient c = new SlingClient(url, null, null);\n+        assertEquals(url, c.getUrl());\n+    }\n+\n+    @Test(expected = ClientException.class)\n+    public void testConstructorUrlNoProtocol() throws Exception {\n+        URI url = URI.create(\"example.com/\");\n+        SlingClient c = new SlingClient(url, \"user\", \"pass\");\n+        assertEquals(url, c.getUrl());\n+    }\n+}",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-testing-clients/raw/609cb61fd2dec08657556b9adc91e889911a230e/src/test/java/org/apache/sling/testing/clients/SlingClientConstructorTest.java",
                "sha": "ed4bf08af6df0225d2b7f6a82fdab407b80349e7",
                "status": "added"
            }
        ],
        "message": "SLING-8727 - NPE in SlingClient constructor when url doesn't have a protocol",
        "parent": "https://github.com/apache/sling-org-apache-sling-testing-clients/commit/5853e020cadd98a59bfde27432ffdc5838da9ea3",
        "patched_files": [
            "SlingClient.java",
            "SlingClientConfig.java"
        ],
        "repo": "sling-org-apache-sling-testing-clients",
        "unit_tests": [
            "SlingClientConstructorTest.java",
            "SlingClientConfigTest.java"
        ]
    }
}