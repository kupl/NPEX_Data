{
    "openwebbeans_52fae33": {
        "repo": "openwebbeans",
        "message": "OWB-169 NPE in PrimitiveProducerTest fixed by startUp() the PluginLoader\n\nThe PluginLoader has to be initialised before we can use them. I moved the\nstartUp from the TestContext#init() function to it's constructor to make sure\nthis will always be called.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openwebbeans/trunk@881060 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/openwebbeans/commit/52fae3352f62aa0ae632ece1e7bfbb6f01ea88a4",
        "parent": "https://github.com/apache/openwebbeans/commit/77278f0d04eb583fde565e031c622d2e3e862c5b",
        "bug_id": "openwebbeans_52fae33",
        "file": [
            {
                "sha": "d40c0e46d57e9dec2b5ac3070deb72ba5cf823c6",
                "filename": "webbeans-impl/src/test/java/org/apache/webbeans/common/TestContext.java",
                "blob_url": "https://github.com/apache/openwebbeans/blob/52fae3352f62aa0ae632ece1e7bfbb6f01ea88a4/webbeans-impl/src/test/java/org/apache/webbeans/common/TestContext.java",
                "raw_url": "https://github.com/apache/openwebbeans/raw/52fae3352f62aa0ae632ece1e7bfbb6f01ea88a4/webbeans-impl/src/test/java/org/apache/webbeans/common/TestContext.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/test/java/org/apache/webbeans/common/TestContext.java?ref=52fae3352f62aa0ae632ece1e7bfbb6f01ea88a4",
                "patch": "@@ -117,6 +117,7 @@ protected TestContext(String clazzName)\n         TestContext.testContexts.add(this);\n         this.manager = new MockManager();\n         this.xmlConfigurator = new WebBeansXMLConfigurator();\n+        PluginLoader.getInstance().startUp();            \n     }\n     \n \n@@ -134,8 +135,6 @@ public void init()\n         initDecorators();\n         initStereoTypes();\n         initDependentContext();            \n-\n-        PluginLoader.getInstance().startUp();            \n     }\n \n     /**",
                "deletions": 2
            }
        ],
        "patched_files": [
            "Context.java"
        ],
        "unit_tests": [
            "TestContext.java"
        ]
    },
    "openwebbeans_2732091": {
        "repo": "openwebbeans",
        "message": "OWB-902 test for NPE in createNormalScopeProxy\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1528409 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/openwebbeans/commit/2732091ad157106dbee6b5a2051230a8f4c16a96",
        "parent": "https://github.com/apache/openwebbeans/commit/e43be1d427e2828bcda0f75b80e03396e7b7ceab",
        "bug_id": "openwebbeans_2732091",
        "file": [
            {
                "sha": "24cea4e31b826ee4b4c889b3ff69d845f858151b",
                "filename": "webbeans-impl/src/test/java/org/apache/webbeans/newtests/interceptors/factory/NormalScopeProxyFactoryTest.java",
                "blob_url": "https://github.com/apache/openwebbeans/blob/2732091ad157106dbee6b5a2051230a8f4c16a96/webbeans-impl/src/test/java/org/apache/webbeans/newtests/interceptors/factory/NormalScopeProxyFactoryTest.java",
                "raw_url": "https://github.com/apache/openwebbeans/raw/2732091ad157106dbee6b5a2051230a8f4c16a96/webbeans-impl/src/test/java/org/apache/webbeans/newtests/interceptors/factory/NormalScopeProxyFactoryTest.java",
                "status": "modified",
                "changes": 138,
                "additions": 133,
                "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/test/java/org/apache/webbeans/newtests/interceptors/factory/NormalScopeProxyFactoryTest.java?ref=2732091ad157106dbee6b5a2051230a8f4c16a96",
                "patch": "@@ -18,24 +18,152 @@\n  */\n package org.apache.webbeans.newtests.interceptors.factory;\n \n-import javax.inject.Provider;\n-import java.net.URL;\n-import java.net.URLClassLoader;\n-\n+import org.apache.webbeans.component.OwbBean;\n+import org.apache.webbeans.component.WebBeansType;\n import org.apache.webbeans.config.WebBeansContext;\n import org.apache.webbeans.newtests.AbstractUnitTest;\n import org.apache.webbeans.newtests.interceptors.factory.beans.ClassInterceptedClass;\n import org.apache.webbeans.newtests.interceptors.factory.beans.SomeBaseClass;\n-import org.apache.webbeans.newtests.interceptors.factory.SubPackageInterceptedClass;\n import org.apache.webbeans.proxy.NormalScopeProxyFactory;\n import org.junit.Assert;\n import org.junit.Test;\n \n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.spi.CreationalContext;\n+import javax.enterprise.inject.spi.InjectionPoint;\n+import javax.enterprise.inject.spi.Producer;\n+import javax.inject.Provider;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.Set;\n+\n+import static org.junit.Assert.assertNotNull;\n+\n /**\n  * Test for the {@link NormalScopeProxyFactory}\n  */\n public class NormalScopeProxyFactoryTest extends AbstractUnitTest\n {\n+    @Test\n+    public void noBeanClassProxy()\n+    {\n+        final WebBeansContext webBeansContext = new WebBeansContext();\n+        final NormalScopeProxyFactory pf = new NormalScopeProxyFactory(webBeansContext);\n+        final Object proxy = pf.createNormalScopeProxy(new OwbBean<Provider>() {\n+            @Override\n+            public Set<Type> getTypes() {\n+                return null;\n+            }\n+\n+            @Override\n+            public Set<Annotation> getQualifiers() {\n+                return null;\n+            }\n+\n+            @Override\n+            public Class<? extends Annotation> getScope() {\n+                return ApplicationScoped.class;\n+            }\n+\n+            @Override\n+            public String getName() {\n+                return null;\n+            }\n+\n+            @Override\n+            public boolean isNullable() {\n+                return false;\n+            }\n+\n+            @Override\n+            public Set<InjectionPoint> getInjectionPoints() {\n+                return null;\n+            }\n+\n+            @Override\n+            public Class<?> getBeanClass() {\n+                return null; // this is what we test\n+            }\n+\n+            @Override\n+            public Set<Class<? extends Annotation>> getStereotypes() {\n+                return null;\n+            }\n+\n+            @Override\n+            public boolean isAlternative() {\n+                return false;\n+            }\n+\n+            @Override\n+            public Provider create(final CreationalContext<Provider> context) {\n+                return null;\n+            }\n+\n+            @Override\n+            public void destroy(final Provider instance, final CreationalContext<Provider> context) {\n+\n+            }\n+\n+            @Override\n+            public Producer<Provider> getProducer() {\n+                return null;\n+            }\n+\n+            @Override\n+            public WebBeansType getWebBeansType() {\n+                return null;\n+            }\n+\n+            @Override\n+            public Class<Provider> getReturnType() {\n+                return Provider.class;\n+            }\n+\n+            @Override\n+            public void setSpecializedBean(boolean specialized) {\n+\n+            }\n+\n+            @Override\n+            public boolean isSpecializedBean() {\n+                return false;\n+            }\n+\n+            @Override\n+            public void setEnabled(boolean enabled) {\n+\n+            }\n+\n+            @Override\n+            public boolean isEnabled() {\n+                return false;\n+            }\n+\n+            @Override\n+            public String getId() {\n+                return null;\n+            }\n+\n+            @Override\n+            public boolean isPassivationCapable() {\n+                return false;\n+            }\n+\n+            @Override\n+            public boolean isDependent() {\n+                return false;\n+            }\n+\n+            @Override\n+            public WebBeansContext getWebBeansContext() {\n+                return null;\n+            }\n+        });\n+        assertNotNull(proxy);\n+    }\n \n     @Test\n     public void textSimpleProxyCreation() throws Exception",
                "deletions": 5
            }
        ],
        "patched_files": [
            "NormalScopeProxyFactory.java"
        ],
        "unit_tests": [
            "NormalScopeProxyFactoryTest.java"
        ]
    },
    "openwebbeans_5905c8b": {
        "repo": "openwebbeans",
        "message": "OWB-1213 fix NPE when scanning for self-intercepting bean \n\nDid happen on producermethods which return a class with a private ct.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1805243 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/openwebbeans/commit/5905c8bc4ac4541ee66147d15177c2d4d05456ef",
        "parent": "https://github.com/apache/openwebbeans/commit/a5a6a30e103a46174536f07757fbbfc37080ba4e",
        "bug_id": "openwebbeans_5905c8b",
        "file": [
            {
                "sha": "fe51899bc0f175a467bb6d3c3a465afe456c983f",
                "filename": "webbeans-impl/src/main/java/org/apache/webbeans/intercept/InterceptorResolutionService.java",
                "blob_url": "https://github.com/apache/openwebbeans/blob/5905c8bc4ac4541ee66147d15177c2d4d05456ef/webbeans-impl/src/main/java/org/apache/webbeans/intercept/InterceptorResolutionService.java",
                "raw_url": "https://github.com/apache/openwebbeans/raw/5905c8bc4ac4541ee66147d15177c2d4d05456ef/webbeans-impl/src/main/java/org/apache/webbeans/intercept/InterceptorResolutionService.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/intercept/InterceptorResolutionService.java?ref=5905c8bc4ac4541ee66147d15177c2d4d05456ef",
                "patch": "@@ -336,7 +336,13 @@ else if (interceptorBindings != null)\n     private <T> SelfInterceptorBean<T> resolveSelfInterceptorBean(AnnotatedType<T> annotatedType)\n     {\n         BeanAttributesImpl<T> beanAttributes = BeanAttributesBuilder.forContext(webBeansContext).newBeanAttibutes(annotatedType).build();\n-        SelfInterceptorBeanBuilder<T>sibb = new SelfInterceptorBeanBuilder<>(webBeansContext, annotatedType, beanAttributes);\n+        if (beanAttributes == null)\n+        {\n+            // might happen if a proxying rule eefines that this is not a valid bean type.\n+            return null;\n+        }\n+\n+        SelfInterceptorBeanBuilder<T> sibb = new SelfInterceptorBeanBuilder<>(webBeansContext, annotatedType, beanAttributes);\n         sibb.defineSelfInterceptorRules();\n         if (!sibb.isInterceptorEnabled())\n         {",
                "deletions": 1
            },
            {
                "sha": "6356d34c2bcfc447a5317fc33a19daf83a42a8cd",
                "filename": "webbeans-impl/src/test/java/org/apache/webbeans/test/producer/ProducerBean.java",
                "blob_url": "https://github.com/apache/openwebbeans/blob/5905c8bc4ac4541ee66147d15177c2d4d05456ef/webbeans-impl/src/test/java/org/apache/webbeans/test/producer/ProducerBean.java",
                "raw_url": "https://github.com/apache/openwebbeans/raw/5905c8bc4ac4541ee66147d15177c2d4d05456ef/webbeans-impl/src/test/java/org/apache/webbeans/test/producer/ProducerBean.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/test/java/org/apache/webbeans/test/producer/ProducerBean.java?ref=5905c8bc4ac4541ee66147d15177c2d4d05456ef",
                "patch": "@@ -20,6 +20,7 @@\n \n import javax.enterprise.inject.Produces;\n import javax.inject.Named;\n+import java.net.URI;\n \n public class ProducerBean {\n \n@@ -58,4 +59,10 @@ public String getName5() {\n     public boolean isName6() {\n         return true;\n     }\n+\n+    @Produces\n+    public URI createUri()\n+    {\n+        return URI.create(\"http://invalid.invalid\");\n+    }\n }",
                "deletions": 0
            }
        ],
        "patched_files": [
            "InterceptorResolutionService.java"
        ],
        "unit_tests": [
            "InterceptorResolutionServiceTest.java"
        ]
    },
    "openwebbeans_64338ed": {
        "repo": "openwebbeans",
        "message": "avoiding NPE + few more generics\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1607310 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/openwebbeans/commit/64338ed836d29436bfc67f79f8611d4d0d92824c",
        "parent": "https://github.com/apache/openwebbeans/commit/711860eb9f22abd3113fc9767b4392be057b97e7",
        "bug_id": "openwebbeans_64338ed",
        "file": [
            {
                "sha": "6722b401210ccae3f7ffff4926027d40c7abc25f",
                "filename": "webbeans-impl/src/main/java/org/apache/webbeans/container/BeanManagerImpl.java",
                "blob_url": "https://github.com/apache/openwebbeans/blob/64338ed836d29436bfc67f79f8611d4d0d92824c/webbeans-impl/src/main/java/org/apache/webbeans/container/BeanManagerImpl.java",
                "raw_url": "https://github.com/apache/openwebbeans/raw/64338ed836d29436bfc67f79f8611d4d0d92824c/webbeans-impl/src/main/java/org/apache/webbeans/container/BeanManagerImpl.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/container/BeanManagerImpl.java?ref=64338ed836d29436bfc67f79f8611d4d0d92824c",
                "patch": "@@ -1247,7 +1247,7 @@ public void addAdditionalScope(ExternalScope additionalScope)\n         final Collection<AnnotatedType<T>> types = new ArrayList<AnnotatedType<T>>(2);\n         types.add(annotatedElementFactory.getAnnotatedType(type));\n         final ConcurrentMap<String, AnnotatedType<?>> aTypes = additionalAnnotatedTypes.get(type);\n-        if (types != null)\n+        if (aTypes != null)\n         {\n             for (final AnnotatedType at : aTypes.values())\n             {",
                "deletions": 1
            },
            {
                "sha": "7b663aa284e32164788487edd72e4d9a4d39e2dd",
                "filename": "webbeans-impl/src/main/java/org/apache/webbeans/util/GenericsUtil.java",
                "blob_url": "https://github.com/apache/openwebbeans/blob/64338ed836d29436bfc67f79f8611d4d0d92824c/webbeans-impl/src/main/java/org/apache/webbeans/util/GenericsUtil.java",
                "raw_url": "https://github.com/apache/openwebbeans/raw/64338ed836d29436bfc67f79f8611d4d0d92824c/webbeans-impl/src/main/java/org/apache/webbeans/util/GenericsUtil.java",
                "status": "modified",
                "changes": 11,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/util/GenericsUtil.java?ref=64338ed836d29436bfc67f79f8611d4d0d92824c",
                "patch": "@@ -338,6 +338,11 @@ private static boolean isAssignableFrom(boolean isDelegate, WildcardType injecti\n     {\n         for (Type bounds: injectionPointType.getLowerBounds())\n         {\n+            if (!isAssignableFrom(isDelegate, beanType, bounds))\n+            {\n+                return false;\n+            }\n+            /*\n             Set<Type> beanTypeClosure = getTypeClosure(beanType);\n             boolean isAssignable = false;\n             for (Type beanSupertype: beanTypeClosure)\n@@ -352,14 +357,18 @@ private static boolean isAssignableFrom(boolean isDelegate, WildcardType injecti\n             { \n                 return false;\n             }\n+            */\n         }\n         for (Type bounds: injectionPointType.getUpperBounds())\n         {\n             Set<Type> beanTypeClosure = getTypeClosure(beanType);\n             boolean isAssignable = false;\n             for (Type beanSupertype: beanTypeClosure)\n             {\n-                if (isAssignableFrom(isDelegate, bounds, beanSupertype))\n+                if (isAssignableFrom(isDelegate, bounds, beanSupertype)\n+                    || (Class.class.isInstance(bounds)\n+                        && ParameterizedType.class.isInstance(beanSupertype)\n+                        && bounds == ParameterizedType.class.cast(beanSupertype).getRawType()))\n                 {\n                     isAssignable = true;\n                     break;",
                "deletions": 1
            },
            {
                "sha": "f69504237f01fc1fa11ce1595a424da8a55eb8c3",
                "filename": "webbeans-tck/testng-dev.xml",
                "blob_url": "https://github.com/apache/openwebbeans/blob/64338ed836d29436bfc67f79f8611d4d0d92824c/webbeans-tck/testng-dev.xml",
                "raw_url": "https://github.com/apache/openwebbeans/raw/64338ed836d29436bfc67f79f8611d4d0d92824c/webbeans-tck/testng-dev.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-tck/testng-dev.xml?ref=64338ed836d29436bfc67f79f8611d4d0d92824c",
                "patch": "@@ -18,7 +18,7 @@\n <suite name=\"JSR-346-TCK\" verbose=\"2\" configfailurepolicy=\"continue\">\n   <test name=\"JSR-346 TCK\">\n     <classes>\n-      <class name=\"org.jboss.cdi.tck.tests.event.observer.wildcardAndTypeVariable.ObserverMethodWithParametertizedTypeTest\" />\n+      <class name=\"org.jboss.cdi.tck.tests.event.resolve.typeWithParameters.CheckTypeParametersWhenResolvingObserversTest\" />\n       <!--\n       <class name=\"org.jboss.cdi.tck.tests.event.parameterized.ParameterizedEventTest\" />\n       <class name=\"org.jboss.cdi.tck.tests.event.fires.FireEventTest\" />",
                "deletions": 1
            }
        ],
        "patched_files": [
            "GenericsUtil.java"
        ],
        "unit_tests": [
            "GenericsUtilTest.java"
        ]
    },
    "openwebbeans_82d296b": {
        "repo": "openwebbeans",
        "message": "[OWB-381] Fix NPE in AbstractInjectable when injected is null.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@950749 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/openwebbeans/commit/82d296b5ec6189d1faed1484aa7da46dd762798f",
        "parent": "https://github.com/apache/openwebbeans/commit/80f0ebb2f78ea00297a2cedc9e993eebe0ec7f3a",
        "bug_id": "openwebbeans_82d296b",
        "file": [
            {
                "sha": "3f34608c3b26dd25747a9e07f48bb4b5f15310a8",
                "filename": "webbeans-impl/src/main/java/org/apache/webbeans/inject/AbstractInjectable.java",
                "blob_url": "https://github.com/apache/openwebbeans/blob/82d296b5ec6189d1faed1484aa7da46dd762798f/webbeans-impl/src/main/java/org/apache/webbeans/inject/AbstractInjectable.java",
                "raw_url": "https://github.com/apache/openwebbeans/raw/82d296b5ec6189d1faed1484aa7da46dd762798f/webbeans-impl/src/main/java/org/apache/webbeans/inject/AbstractInjectable.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/inject/AbstractInjectable.java?ref=82d296b5ec6189d1faed1484aa7da46dd762798f",
                "patch": "@@ -129,7 +129,7 @@ else if(isEventProviderInjection(injectionPoint))\n         \n         if(dependentProducer)\n         {\n-            if(!Serializable.class.isAssignableFrom(injected.getClass()))\n+            if(injected != null && !Serializable.class.isAssignableFrom(injected.getClass()))\n             {\n                 throw new IllegalProductException(\"If a producer method or field of scope @Dependent returns an serializable object for injection \" +\n                                                         \"into an injection point \"+ injectionPoint +\" that requires a passivation capable dependency\");",
                "deletions": 1
            },
            {
                "sha": "b59d6d26c8a90402f5b3719bfd6929f8a943c372",
                "filename": "webbeans-impl/src/test/java/org/apache/webbeans/newtests/promethods/PersonProducerTest.java",
                "blob_url": "https://github.com/apache/openwebbeans/blob/82d296b5ec6189d1faed1484aa7da46dd762798f/webbeans-impl/src/test/java/org/apache/webbeans/newtests/promethods/PersonProducerTest.java",
                "raw_url": "https://github.com/apache/openwebbeans/raw/82d296b5ec6189d1faed1484aa7da46dd762798f/webbeans-impl/src/test/java/org/apache/webbeans/newtests/promethods/PersonProducerTest.java",
                "status": "modified",
                "changes": 26,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/test/java/org/apache/webbeans/newtests/promethods/PersonProducerTest.java?ref=82d296b5ec6189d1faed1484aa7da46dd762798f",
                "patch": "@@ -68,4 +68,30 @@ public void testPersonProducer()\n         \n         shutDownContainer();\n     }\n+    \n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void testNullPersonProducer()\n+    {\n+        Collection<URL> beanXmls = new ArrayList<URL>();\n+        \n+        Collection<Class<?>> beanClasses = new ArrayList<Class<?>>();\n+        beanClasses.add(Person.class);\n+        beanClasses.add(PersonProducerBean.class);\n+        \n+        startContainer(beanClasses, beanXmls);      \n+        \n+        Set<Bean<?>> beans = getBeanManager().getBeans(\"nullInjectedPersonProducer\");\n+        Assert.assertNotNull(beans);        \n+        Bean<Person> bean = (Bean<Person>)beans.iterator().next();\n+        \n+        Assert.assertTrue(bean instanceof ProducerMethodBean);\n+        \n+        CreationalContext<Person> ctx = getBeanManager().createCreationalContext(bean);\n+        \n+        Object reference = getBeanManager().getReference(bean, Person.class, ctx);\n+        Assert.assertNull(reference);\n+        \n+        shutDownContainer();\n+    }\n }",
                "deletions": 0
            },
            {
                "sha": "af102d9550b86dab827955d3f0d15fd90c794b50",
                "filename": "webbeans-impl/src/test/java/org/apache/webbeans/newtests/promethods/beans/PersonProducerBean.java",
                "blob_url": "https://github.com/apache/openwebbeans/blob/82d296b5ec6189d1faed1484aa7da46dd762798f/webbeans-impl/src/test/java/org/apache/webbeans/newtests/promethods/beans/PersonProducerBean.java",
                "raw_url": "https://github.com/apache/openwebbeans/raw/82d296b5ec6189d1faed1484aa7da46dd762798f/webbeans-impl/src/test/java/org/apache/webbeans/newtests/promethods/beans/PersonProducerBean.java",
                "status": "modified",
                "changes": 15,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/test/java/org/apache/webbeans/newtests/promethods/beans/PersonProducerBean.java?ref=82d296b5ec6189d1faed1484aa7da46dd762798f",
                "patch": "@@ -18,7 +18,7 @@\n  */\n package org.apache.webbeans.newtests.promethods.beans;\n \n-import javax.enterprise.context.SessionScoped;\n+import javax.enterprise.context.Dependent;\n import javax.enterprise.inject.Produces;\n import javax.inject.Named;\n \n@@ -27,9 +27,20 @@\n public class PersonProducerBean\n {\n     \n-    @Produces @SessionScoped @Named(\"personProducer\")\n+    @Produces @Named(\"personProducer\")\n     public Person producer()\n     {\n         return new Person();\n     }\n+    \n+    @Produces @Dependent @Named(\"nullPersonProducer\")\n+    public Person nullProducer()\n+    {\n+        return null;\n+    }\n+    \n+    @Produces @Dependent @Named(\"nullInjectedPersonProducer\")\n+    public Person nullInjectedPersonProducer(@Named(\"nullPersonProducer\") Person p){\n+        return p;\n+    }\n }",
                "deletions": 2
            }
        ],
        "patched_files": [
            "AbstractInjectable.java",
            "PersonProducerBean.java"
        ],
        "unit_tests": [
            "PersonProducerTest.java"
        ]
    },
    "openwebbeans_592af6f": {
        "repo": "openwebbeans",
        "message": "OWB-339 Injecting Non-Contextual Beans Causes NPE in WebBeansUtil\n\nthanks to James Carman!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@928358 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/openwebbeans/commit/592af6fca8e6d707942b38de993ceb684c2c5d1e",
        "parent": "https://github.com/apache/openwebbeans/commit/d53f681bcec264b0547fad8462e5f6c8d60b66c9",
        "bug_id": "openwebbeans_592af6f",
        "file": [
            {
                "sha": "67600401943b1a48c0ca75b67d0a1999358fb371",
                "filename": "webbeans-impl/src/main/java/org/apache/webbeans/util/WebBeansUtil.java",
                "blob_url": "https://github.com/apache/openwebbeans/blob/592af6fca8e6d707942b38de993ceb684c2c5d1e/webbeans-impl/src/main/java/org/apache/webbeans/util/WebBeansUtil.java",
                "raw_url": "https://github.com/apache/openwebbeans/raw/592af6fca8e6d707942b38de993ceb684c2c5d1e/webbeans-impl/src/main/java/org/apache/webbeans/util/WebBeansUtil.java",
                "status": "modified",
                "changes": 15,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/util/WebBeansUtil.java?ref=592af6fca8e6d707942b38de993ceb684c2c5d1e",
                "patch": "@@ -2640,16 +2640,15 @@ public static Object getObjectFromCreationalContext(Bean<?> bean,CreationalConte\n             throw new IllegalArgumentException(\"Creational context is null\");\n         }\n         \n-        if(cc.getBean().equals(bean))\n+        final Contextual<?> existing = cc.getBean();\n+        if(existing != null && existing.equals(bean))\n         {\n-            return cc.getProxyInstance();   \n-        }            \n-        else\n+            return cc.getProxyInstance();\n+        }\n+\n+        if(cc.getOwnerCreational() != null)\n         {\n-            if(cc.getOwnerCreational() != null)\n-            {\n-                return getObjectFromCreationalContext(bean, cc.getOwnerCreational());   \n-            }\n+            return getObjectFromCreationalContext(bean, cc.getOwnerCreational());\n         }\n         \n         return null;",
                "deletions": 8
            },
            {
                "sha": "7b1ceb47e6077943bb18ea23ecfef56c359ac5f1",
                "filename": "webbeans-impl/src/test/java/org/apache/webbeans/newtests/injection/noncontextual/ContextualBean.java",
                "blob_url": "https://github.com/apache/openwebbeans/blob/592af6fca8e6d707942b38de993ceb684c2c5d1e/webbeans-impl/src/test/java/org/apache/webbeans/newtests/injection/noncontextual/ContextualBean.java",
                "raw_url": "https://github.com/apache/openwebbeans/raw/592af6fca8e6d707942b38de993ceb684c2c5d1e/webbeans-impl/src/test/java/org/apache/webbeans/newtests/injection/noncontextual/ContextualBean.java",
                "status": "added",
                "changes": 26,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/test/java/org/apache/webbeans/newtests/injection/noncontextual/ContextualBean.java?ref=592af6fca8e6d707942b38de993ceb684c2c5d1e",
                "patch": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.webbeans.newtests.injection.noncontextual;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+@ApplicationScoped\n+public class ContextualBean\n+{\n+}",
                "deletions": 0
            },
            {
                "sha": "12a00c3329c726fba2dc2e2bdd69918c3e0bb8b7",
                "filename": "webbeans-impl/src/test/java/org/apache/webbeans/newtests/injection/noncontextual/InjectNonContextualTest.java",
                "blob_url": "https://github.com/apache/openwebbeans/blob/592af6fca8e6d707942b38de993ceb684c2c5d1e/webbeans-impl/src/test/java/org/apache/webbeans/newtests/injection/noncontextual/InjectNonContextualTest.java",
                "raw_url": "https://github.com/apache/openwebbeans/raw/592af6fca8e6d707942b38de993ceb684c2c5d1e/webbeans-impl/src/test/java/org/apache/webbeans/newtests/injection/noncontextual/InjectNonContextualTest.java",
                "status": "added",
                "changes": 67,
                "additions": 67,
                "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/test/java/org/apache/webbeans/newtests/injection/noncontextual/InjectNonContextualTest.java?ref=592af6fca8e6d707942b38de993ceb684c2c5d1e",
                "patch": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.webbeans.newtests.injection.noncontextual;\n+\n+import junit.framework.Assert;\n+import org.apache.webbeans.container.BeanManagerImpl;\n+import org.apache.webbeans.newtests.AbstractUnitTest;\n+import org.junit.Test;\n+\n+import javax.enterprise.context.spi.CreationalContext;\n+import javax.enterprise.inject.spi.AnnotatedType;\n+import javax.enterprise.inject.spi.BeanManager;\n+import javax.enterprise.inject.spi.InjectionTarget;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+public class InjectNonContextualTest extends AbstractUnitTest\n+{\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> void inject(T instance)\n+    {\n+        BeanManager mgr = BeanManagerImpl.getManager();\n+        AnnotatedType<T> annotatedType = mgr.createAnnotatedType((Class<T>) instance.getClass());\n+        InjectionTarget<T> injectionTarget = mgr.createInjectionTarget(annotatedType);\n+        CreationalContext<T> context = mgr.createCreationalContext(null);\n+        injectionTarget.inject(instance, context);\n+    }\n+\n+\n+    @Test\n+    public void testInjectingNonContextualBean()\n+    {\n+        Collection<URL> beanXmls = new ArrayList<URL>();\n+\n+        Collection<Class<?>> beanClasses = new ArrayList<Class<?>>();\n+        beanClasses.add(ContextualBean.class);\n+        startContainer(beanClasses, beanXmls);\n+        try\n+        {\n+            final NonContextualBean bean = new NonContextualBean();\n+            inject(bean);\n+            Assert.assertNotNull(bean.getContextual());\n+        }\n+        finally\n+        {\n+            shutDownContainer();\n+        }\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "499f0cb6c47949e708a78a0b4fe3464b15cd1eab",
                "filename": "webbeans-impl/src/test/java/org/apache/webbeans/newtests/injection/noncontextual/NonContextualBean.java",
                "blob_url": "https://github.com/apache/openwebbeans/blob/592af6fca8e6d707942b38de993ceb684c2c5d1e/webbeans-impl/src/test/java/org/apache/webbeans/newtests/injection/noncontextual/NonContextualBean.java",
                "raw_url": "https://github.com/apache/openwebbeans/raw/592af6fca8e6d707942b38de993ceb684c2c5d1e/webbeans-impl/src/test/java/org/apache/webbeans/newtests/injection/noncontextual/NonContextualBean.java",
                "status": "added",
                "changes": 44,
                "additions": 44,
                "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/test/java/org/apache/webbeans/newtests/injection/noncontextual/NonContextualBean.java?ref=592af6fca8e6d707942b38de993ceb684c2c5d1e",
                "patch": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.webbeans.newtests.injection.noncontextual;\n+\n+import javax.inject.Inject;\n+\n+public class NonContextualBean\n+{\n+//**********************************************************************************************************************\n+// Fields\n+//**********************************************************************************************************************\n+\n+    @Inject private ContextualBean contextual;\n+\n+//**********************************************************************************************************************\n+// Getter/Setter Methods\n+//**********************************************************************************************************************\n+\n+    public ContextualBean getContextual()\n+    {\n+        return contextual;\n+    }\n+\n+    public void setContextual(ContextualBean contextual)\n+    {\n+        this.contextual = contextual;\n+    }\n+}",
                "deletions": 0
            }
        ],
        "patched_files": [
            "WebBeansUtil.java",
            "ContextualBean.java",
            "NonContextualBean.java"
        ],
        "unit_tests": [
            "InjectNonContextualTest.java"
        ]
    },
    "openwebbeans_8683219": {
        "repo": "openwebbeans",
        "message": "avoid NPE in InstanceImpl\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1631174 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/openwebbeans/commit/8683219416647e69ff55c703a5e559493a982aef",
        "parent": "https://github.com/apache/openwebbeans/commit/472e160a8d0b5594493ee3686d859d8bc7046249",
        "bug_id": "openwebbeans_8683219",
        "file": [
            {
                "sha": "4d60b17f395f93b697cb8bd83742d3f88f8f39f5",
                "filename": "webbeans-impl/src/main/java/org/apache/webbeans/container/OwbCDI.java",
                "blob_url": "https://github.com/apache/openwebbeans/blob/8683219416647e69ff55c703a5e559493a982aef/webbeans-impl/src/main/java/org/apache/webbeans/container/OwbCDI.java",
                "raw_url": "https://github.com/apache/openwebbeans/raw/8683219416647e69ff55c703a5e559493a982aef/webbeans-impl/src/main/java/org/apache/webbeans/container/OwbCDI.java",
                "status": "modified",
                "changes": 7,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/container/OwbCDI.java?ref=8683219416647e69ff55c703a5e559493a982aef",
                "patch": "@@ -26,17 +26,12 @@\n import javax.enterprise.inject.Instance;\n import javax.enterprise.inject.spi.BeanManager;\n import javax.enterprise.inject.spi.CDI;\n-import javax.enterprise.inject.spi.InjectionPoint;\n import javax.enterprise.util.TypeLiteral;\n-import javax.inject.Inject;\n import java.lang.annotation.Annotation;\n import java.util.Iterator;\n \n public class OwbCDI extends CDI<Object>\n {\n-    @Inject\n-    private Instance<Object> injectionPoint;\n-\n     private WebBeansContext getWebBeansContext()\n     {\n         return WebBeansContext.currentInstance();\n@@ -47,8 +42,6 @@ private WebBeansContext getWebBeansContext()\n         final WebBeansContext webBeansContext = getWebBeansContext();\n         final BeanManagerImpl bm = webBeansContext.getBeanManagerImpl();\n         final CreationalContextImpl<Instance<Object>> creationalContext = bm.createCreationalContext(null);\n-        final InjectionPoint injectionPoint1 = bm.createInjectionTarget(bm.createAnnotatedType(OwbCDI.class)).getInjectionPoints().iterator().next();\n-        creationalContext.putInjectionPoint(injectionPoint1);\n         return new InstanceBean<Object>(webBeansContext).create(creationalContext);\n     }\n ",
                "deletions": 7
            },
            {
                "sha": "c881207c0ca9984927afe2b6e44477a02e1430d8",
                "filename": "webbeans-impl/src/main/java/org/apache/webbeans/inject/instance/InstanceImpl.java",
                "blob_url": "https://github.com/apache/openwebbeans/blob/8683219416647e69ff55c703a5e559493a982aef/webbeans-impl/src/main/java/org/apache/webbeans/inject/instance/InstanceImpl.java",
                "raw_url": "https://github.com/apache/openwebbeans/raw/8683219416647e69ff55c703a5e559493a982aef/webbeans-impl/src/main/java/org/apache/webbeans/inject/instance/InstanceImpl.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/inject/instance/InstanceImpl.java?ref=8683219416647e69ff55c703a5e559493a982aef",
                "patch": "@@ -163,7 +163,7 @@ public T get()\n \n         InjectionResolver injectionResolver = webBeansContext.getBeanManagerImpl().getInjectionResolver();\n \n-        Bean<?> injectionPointBean = injectionPoint.getBean();\n+        Bean<?> injectionPointBean = injectionPoint != null ? injectionPoint.getBean() : null;\n         Class<?> injectionPointClass = null;\n         if (injectionPointBean != null)\n         {",
                "deletions": 1
            },
            {
                "sha": "4996812a86949af714ab940f14961d304c8e25f4",
                "filename": "webbeans-impl/src/test/java/org/apache/webbeans/container/OwbCDIProviderTest.java",
                "blob_url": "https://github.com/apache/openwebbeans/blob/8683219416647e69ff55c703a5e559493a982aef/webbeans-impl/src/test/java/org/apache/webbeans/container/OwbCDIProviderTest.java",
                "raw_url": "https://github.com/apache/openwebbeans/raw/8683219416647e69ff55c703a5e559493a982aef/webbeans-impl/src/test/java/org/apache/webbeans/container/OwbCDIProviderTest.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/test/java/org/apache/webbeans/container/OwbCDIProviderTest.java?ref=8683219416647e69ff55c703a5e559493a982aef",
                "patch": "@@ -36,6 +36,7 @@ public void run()\n         assertNotNull(CDI.current());\n         assertNotNull(CDI.current().getBeanManager());\n         assertFalse(CDI.current().isUnsatisfied());\n-        assertTrue(CDI.current().isAmbiguous());\n+        assertFalse(CDI.current().isAmbiguous());\n+        assertNotNull(CDI.current().get());\n     }\n }",
                "deletions": 1
            }
        ],
        "patched_files": [
            "OwbCDIProvider.java",
            "OwbCDI.java",
            "InstanceImpl.java"
        ],
        "unit_tests": [
            "OwbCDIProviderTest.java"
        ]
    }
}