[
    {
        "repo": "jackrabbit-oak",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/e2945fb8f0cf6cffa3bc1f823ce8a088a120560a",
        "bug_id": "jackrabbit-oak_e2945fb",
        "message": "OAK-8700 : ExternalIdentityConflictHandler prone to NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1869187 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/fc73eb4c80f1c30fa2256ab7c6b1e07a95e21ea9",
        "patched_files": [
            "pom.xml",
            "ExternalIdentityConflictHandler.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 5,
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/e2945fb8f0cf6cffa3bc1f823ce8a088a120560a/oak-auth-external/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-auth-external/pom.xml?ref=e2945fb8f0cf6cffa3bc1f823ce8a088a120560a",
                "filename": "oak-auth-external/pom.xml",
                "deletions": 0,
                "sha": "336bdd0d94a43e1e647033beecc18740c0821a44",
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/e2945fb8f0cf6cffa3bc1f823ce8a088a120560a/oak-auth-external/pom.xml",
                "patch": "@@ -179,6 +179,11 @@\n             <artifactId>easymock</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.mockito</groupId>\n+            <artifactId>mockito-core</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n         <dependency>\n             <groupId>org.slf4j</groupId>\n             <artifactId>jul-to-slf4j</artifactId>",
                "changes": 5
            },
            {
                "status": "modified",
                "additions": 17,
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/e2945fb8f0cf6cffa3bc1f823ce8a088a120560a/oak-auth-external/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/principal/ExternalIdentityConflictHandler.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-auth-external/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/principal/ExternalIdentityConflictHandler.java?ref=e2945fb8f0cf6cffa3bc1f823ce8a088a120560a",
                "filename": "oak-auth-external/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/principal/ExternalIdentityConflictHandler.java",
                "deletions": 12,
                "sha": "c70b1be4311e94af178377e5d728b99da0bf682f",
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/e2945fb8f0cf6cffa3bc1f823ce8a088a120560a/oak-auth-external/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/principal/ExternalIdentityConflictHandler.java",
                "patch": "@@ -40,36 +40,41 @@\n \n     @NotNull\n     @Override\n-    public Resolution addExistingProperty(NodeBuilder parent, PropertyState ours, PropertyState theirs) {\n+    public Resolution addExistingProperty(@NotNull NodeBuilder parent, @NotNull PropertyState ours, @NotNull PropertyState theirs) {\n         if (ExternalIdentityConstants.REP_LAST_SYNCED.equals(ours.getName())) {\n-            merge(parent, ours, theirs);\n-            return Resolution.MERGED;\n+            return merge(parent, ours, theirs);\n         }\n         return Resolution.IGNORED;\n     }\n \n     @NotNull\n     @Override\n-    public Resolution changeChangedProperty(NodeBuilder parent, PropertyState ours, PropertyState theirs,\n-            PropertyState base) {\n+    public Resolution changeChangedProperty(@NotNull NodeBuilder parent, @NotNull PropertyState ours, @NotNull PropertyState theirs,\n+                                            @NotNull PropertyState base) {\n         if (ExternalIdentityConstants.REP_LAST_SYNCED.equals(ours.getName())) {\n-            merge(parent, ours, theirs);\n-            return Resolution.MERGED;\n+            return merge(parent, ours, theirs);\n         }\n         return Resolution.IGNORED;\n     }\n \n-    private static void merge(NodeBuilder parent, PropertyState ours, PropertyState theirs) {\n+    private static Resolution merge(@NotNull NodeBuilder parent, @NotNull PropertyState ours, @NotNull PropertyState theirs) {\n         Calendar o = parse(ours.getValue(Type.DATE));\n         Calendar t = parse(theirs.getValue(Type.DATE));\n-        Calendar v = o.before(t) ? t : o;\n-        parent.setProperty(ours.getName(), v);\n+        if (o != null) {\n+            Calendar v = o.before(t) ? t : o;\n+            parent.setProperty(ours.getName(), v);\n+            return Resolution.MERGED;\n+        } else if (t != null) {\n+            parent.setProperty(ours.getName(), t);\n+            return Resolution.MERGED;\n+        } else {\n+            return Resolution.IGNORED;\n+        }\n     }\n \n     @Override\n     @NotNull\n-    public Resolution changeDeletedProperty(@NotNull NodeBuilder parent, @NotNull PropertyState ours,\n-            @NotNull PropertyState base) {\n+    public Resolution changeDeletedProperty(@NotNull NodeBuilder parent, @NotNull PropertyState ours, @NotNull PropertyState base) {\n         return Resolution.IGNORED;\n     }\n ",
                "changes": 29
            },
            {
                "status": "added",
                "additions": 151,
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/e2945fb8f0cf6cffa3bc1f823ce8a088a120560a/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/principal/ExternalIdentityConflictHandlerTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/principal/ExternalIdentityConflictHandlerTest.java?ref=e2945fb8f0cf6cffa3bc1f823ce8a088a120560a",
                "filename": "oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/principal/ExternalIdentityConflictHandlerTest.java",
                "deletions": 0,
                "sha": "2ef23ffa720ce77b6d90a15eb45128fa53c18ff6",
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/e2945fb8f0cf6cffa3bc1f823ce8a088a120560a/oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/principal/ExternalIdentityConflictHandlerTest.java",
                "patch": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal;\n+\n+import org.apache.jackrabbit.oak.api.PropertyState;\n+import org.apache.jackrabbit.oak.api.Type;\n+import org.apache.jackrabbit.oak.spi.commit.ThreeWayConflictHandler;\n+import org.apache.jackrabbit.oak.spi.state.NodeBuilder;\n+import org.apache.jackrabbit.oak.spi.state.NodeState;\n+import org.apache.jackrabbit.util.ISO8601;\n+import org.junit.Test;\n+\n+import java.util.Calendar;\n+\n+import static org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalIdentityConstants.REP_LAST_SYNCED;\n+import static org.junit.Assert.assertSame;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.verify;\n+\n+public class ExternalIdentityConflictHandlerTest {\n+\n+    private ExternalIdentityConflictHandler handler = new ExternalIdentityConflictHandler();\n+\n+    @Test\n+    public void testAddExistingProperty() {\n+        assertSame(ThreeWayConflictHandler.Resolution.IGNORED, handler.addExistingProperty(mock(NodeBuilder.class), mock(PropertyState.class), mock(PropertyState.class)));\n+    }\n+\n+    @Test\n+    public void testAddExistingPropertyRepLastSynced() {\n+        Calendar cal = Calendar.getInstance();\n+        String calStr = ISO8601.format(cal);\n+        cal.set(Calendar.YEAR, 2000);\n+        String calStr2 = ISO8601.format(cal);\n+\n+        PropertyState ours = when(mock(PropertyState.class).getName()).thenReturn(REP_LAST_SYNCED).getMock();\n+        when(ours.getValue(Type.DATE)).thenReturn(calStr);\n+        PropertyState theirs = when(mock(PropertyState.class).getValue(Type.DATE)).thenReturn(calStr2).getMock();\n+\n+        assertSame(ThreeWayConflictHandler.Resolution.MERGED, handler.addExistingProperty(mock(NodeBuilder.class), ours, theirs));\n+    }\n+\n+    @Test\n+    public void testChangeChangedProperty() {\n+        assertSame(ThreeWayConflictHandler.Resolution.IGNORED, handler.changeChangedProperty(mock(NodeBuilder.class), mock(PropertyState.class), mock(PropertyState.class), mock(PropertyState.class)));\n+    }\n+\n+    @Test\n+    public void testChangeChangedPropertyRepLastSynced() {\n+        Calendar cal = Calendar.getInstance();\n+        String calStr = ISO8601.format(cal);\n+        cal.set(Calendar.YEAR, 2000);\n+        String calStr2 = ISO8601.format(cal);\n+\n+        PropertyState ours = when(mock(PropertyState.class).getName()).thenReturn(REP_LAST_SYNCED).getMock();\n+        when(ours.getValue(Type.DATE)).thenReturn(calStr2);\n+        PropertyState theirs = when(mock(PropertyState.class).getValue(Type.DATE)).thenReturn(calStr).getMock();\n+\n+        assertSame(ThreeWayConflictHandler.Resolution.MERGED, handler.changeChangedProperty(mock(NodeBuilder.class), ours, theirs, mock(PropertyState.class)));\n+    }\n+\n+    @Test\n+    public void testChangeDeletedProperty() {\n+        assertSame(ThreeWayConflictHandler.Resolution.IGNORED, handler.changeDeletedProperty(mock(NodeBuilder.class), mock(PropertyState.class), mock(PropertyState.class)));\n+    }\n+\n+    @Test\n+    public void testDeleteDeletedProperty() {\n+        assertSame(ThreeWayConflictHandler.Resolution.IGNORED, handler.deleteDeletedProperty(mock(NodeBuilder.class), mock(PropertyState.class)));\n+    }\n+\n+    @Test\n+    public void testDeleteChangedProperty() {\n+        assertSame(ThreeWayConflictHandler.Resolution.IGNORED, handler.deleteChangedProperty(mock(NodeBuilder.class), mock(PropertyState.class), mock(PropertyState.class)));\n+    }\n+\n+    @Test\n+    public void testAddExistingNode() {\n+        assertSame(ThreeWayConflictHandler.Resolution.IGNORED, handler.addExistingNode(mock(NodeBuilder.class), \"name\", mock(NodeState.class), mock(NodeState.class)));\n+    }\n+\n+    @Test\n+    public void testChangeDeletedNode() {\n+        assertSame(ThreeWayConflictHandler.Resolution.IGNORED, handler.changeDeletedNode(mock(NodeBuilder.class), \"name\", mock(NodeState.class), mock(NodeState.class)));\n+    }\n+\n+    @Test\n+    public void testDeleteChangedNode() {\n+        assertSame(ThreeWayConflictHandler.Resolution.IGNORED, handler.deleteChangedNode(mock(NodeBuilder.class), \"name\", mock(NodeState.class), mock(NodeState.class)));\n+    }\n+\n+    @Test\n+    public void testDeleteDeletedNode() {\n+        assertSame(ThreeWayConflictHandler.Resolution.IGNORED, handler.deleteDeletedNode(mock(NodeBuilder.class), \"name\", mock(NodeState.class)));\n+    }\n+\n+    @Test\n+    public void testMergeOursCannotBeParsed() {\n+        Calendar cal = Calendar.getInstance();\n+        String calStr = ISO8601.format(cal);\n+\n+        PropertyState ours = when(mock(PropertyState.class).getName()).thenReturn(REP_LAST_SYNCED).getMock();\n+        when(ours.getValue(Type.DATE)).thenReturn(\"notParseable\");\n+        PropertyState theirs = when(mock(PropertyState.class).getValue(Type.DATE)).thenReturn(calStr).getMock();\n+\n+        NodeBuilder parent = mock(NodeBuilder.class);\n+        assertSame(ThreeWayConflictHandler.Resolution.MERGED, handler.changeChangedProperty(parent, ours, theirs, mock(PropertyState.class)));\n+        verify(parent, times(1)).setProperty(REP_LAST_SYNCED, ISO8601.parse(theirs.getValue(Type.DATE)));\n+    }\n+\n+    @Test\n+    public void testMergeTheirsCannotBeParsed() {\n+        Calendar cal = Calendar.getInstance();\n+        String calStr = ISO8601.format(cal);\n+\n+        PropertyState ours = when(mock(PropertyState.class).getName()).thenReturn(REP_LAST_SYNCED).getMock();\n+        when(ours.getValue(Type.DATE)).thenReturn(calStr);\n+        PropertyState theirs = when(mock(PropertyState.class).getValue(Type.DATE)).thenReturn(\"notParseable\").getMock();\n+\n+        NodeBuilder parent = mock(NodeBuilder.class);\n+        assertSame(ThreeWayConflictHandler.Resolution.MERGED, handler.changeChangedProperty(parent, ours, theirs, mock(PropertyState.class)));\n+        verify(parent, times(1)).setProperty(REP_LAST_SYNCED, ISO8601.parse(ours.getValue(Type.DATE)));\n+    }\n+\n+    @Test\n+    public void testMergeNoneCannotBeParsed() {\n+        PropertyState ours = when(mock(PropertyState.class).getName()).thenReturn(REP_LAST_SYNCED).getMock();\n+        when(ours.getValue(Type.DATE)).thenReturn(\"notParseable1\");\n+        PropertyState theirs = when(mock(PropertyState.class).getValue(Type.DATE)).thenReturn(\"notParseable2\").getMock();\n+\n+        NodeBuilder parent = mock(NodeBuilder.class);\n+        assertSame(ThreeWayConflictHandler.Resolution.IGNORED, handler.changeChangedProperty(parent, ours, theirs, mock(PropertyState.class)));\n+        assertSame(ThreeWayConflictHandler.Resolution.IGNORED, handler.addExistingProperty(parent, ours, theirs));\n+    }\n+}\n\\ No newline at end of file",
                "changes": 151
            }
        ],
        "unit_tests": [
            "ExternalIdentityConflictHandlerTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "oak-auth-external/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/principal/ExternalIdentityConflictHandlerTest.java",
        "buggy_files": [
            "pom.xml",
            "oak-it/pom.xml",
            "oak-api/pom.xml",
            "oak-run-commons/pom.xml",
            "oak-upgrade/pom.xml",
            "oak-auth-ldap/pom.xml",
            "oak-query-spi/pom.xml",
            "oak-jcr/pom.xml",
            "oak-http/pom.xml",
            "oak-solr-osgi/pom.xml",
            "oak-parent/pom.xml",
            "oak-segment-azure/pom.xml",
            "oak-commons/pom.xml",
            "oak-examples/pom.xml",
            "oak-examples/standalone/pom.xml",
            "oak-examples/webapp/pom.xml",
            "oak-authorization-cug/pom.xml",
            "oak-blob-plugins/pom.xml",
            "oak-doc-railroad-macro/pom.xml",
            "oak-it-osgi/pom.xml",
            "oak-search-mt/pom.xml",
            "oak-exercise/pom.xml",
            "oak-lucene/pom.xml",
            "oak-store-spi/pom.xml",
            "oak-blob-cloud-azure/pom.xml",
            "oak-run/pom.xml",
            "oak-core/pom.xml",
            "oak-security-spi/pom.xml",
            "oak-doc/pom.xml",
            "oak-search-elastic/pom.xml",
            "oak-blob/pom.xml",
            "oak-segment-tar/pom.xml",
            "oak-store-composite/pom.xml",
            "oak-search/pom.xml",
            "oak-pojosr/pom.xml",
            "oak-solr-core/pom.xml",
            "oak-jackrabbit-api/pom.xml",
            "oak-benchmarks/pom.xml",
            "oak-authorization-principalbased/pom.xml",
            "oak-blob-cloud/pom.xml",
            "oak-core-spi/pom.xml",
            "oak-store-document/pom.xml",
            "oak-auth-external/pom.xml",
            "oak-auth-external/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/principal/ExternalIdentityConflictHandler.java"
        ],
        "fixed": true
    }
]