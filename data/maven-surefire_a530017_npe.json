[
    {
        "repo": "maven-surefire",
        "commit": "https://github.com/apache/maven-surefire/commit/a5300171935196e87dda7a03ec8f346628af7062",
        "bug_id": "maven-surefire_a530017",
        "message": "[SUREFIRE-1506] Sporadic NullPointerException in ConsoleOutputFileReporter#close()",
        "parent": "https://github.com/apache/maven-surefire/commit/f63d6ec83d85daa538d75803a749d08b08eed8ff",
        "patched_files": [
            "ConsoleOutputFileReporter.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 103,
                "raw_url": "https://github.com/apache/maven-surefire/raw/a5300171935196e87dda7a03ec8f346628af7062/maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/report/ConsoleOutputFileReporter.java",
                "contents_url": "https://api.github.com/repos/apache/maven-surefire/contents/maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/report/ConsoleOutputFileReporter.java?ref=a5300171935196e87dda7a03ec8f346628af7062",
                "filename": "maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/report/ConsoleOutputFileReporter.java",
                "deletions": 36,
                "sha": "bbbd9c4ed93104666595f97b0db810ef70653b3e",
                "blob_url": "https://github.com/apache/maven-surefire/blob/a5300171935196e87dda7a03ec8f346628af7062/maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/report/ConsoleOutputFileReporter.java",
                "patch": "@@ -22,31 +22,39 @@\n import java.io.BufferedOutputStream;\n import java.io.File;\n import java.io.FileOutputStream;\n+import java.io.FilterOutputStream;\n import java.io.IOException;\n-import java.io.OutputStream;\n+import java.util.concurrent.atomic.AtomicStampedReference;\n+import java.util.concurrent.locks.ReentrantLock;\n \n+import org.apache.maven.surefire.booter.DumpErrorSingleton;\n import org.apache.maven.surefire.report.ReportEntry;\n \n import static org.apache.maven.plugin.surefire.report.FileReporter.getReportFile;\n \n /**\n  * Surefire output consumer proxy that writes test output to a {@link java.io.File} for each test suite.\n- * <br>\n- * This class is not threadsafe, but can be serially handed off from thread to thread.\n  *\n  * @author Kristian Rosenvold\n  * @author Carlos Sanchez\n  */\n public class ConsoleOutputFileReporter\n     implements TestcycleConsoleOutputReceiver\n {\n-    private final File reportsDirectory;\n+    private static final int STREAM_BUFFER_SIZE = 16 * 1024;\n+    private static final int OPEN = 0;\n+    private static final int CLOSED_TO_REOPEN = 1;\n+    private static final int CLOSED = 2;\n \n+    private final File reportsDirectory;\n     private final String reportNameSuffix;\n \n-    private String reportEntryName;\n+    private final AtomicStampedReference<FilterOutputStream> fileOutputStream =\n+            new AtomicStampedReference<FilterOutputStream>( null, OPEN );\n \n-    private OutputStream fileOutputStream;\n+    private final ReentrantLock lock = new ReentrantLock();\n+\n+    private volatile String reportEntryName;\n \n     public ConsoleOutputFileReporter( File reportsDirectory, String reportNameSuffix )\n     {\n@@ -57,8 +65,15 @@ public ConsoleOutputFileReporter( File reportsDirectory, String reportNameSuffix\n     @Override\n     public void testSetStarting( ReportEntry reportEntry )\n     {\n-        close();\n-        reportEntryName = reportEntry.getName();\n+        lock.lock();\n+        try\n+        {\n+            closeNullReportFile( reportEntry );\n+        }\n+        finally\n+        {\n+            lock.unlock();\n+        }\n     }\n \n     @Override\n@@ -67,53 +82,105 @@ public void testSetCompleted( ReportEntry report )\n     }\n \n     @Override\n-    @SuppressWarnings( \"checkstyle:emptyblock\" )\n     public void close()\n     {\n-        if ( fileOutputStream != null )\n+        // The close() method is called in main Thread T2.\n+        lock.lock();\n+        try\n         {\n-            //noinspection EmptyCatchBlock\n-            try\n-            {\n-                fileOutputStream.flush();\n-            }\n-            catch ( IOException e )\n-            {\n-            }\n-            finally\n-            {\n-                try\n-                {\n-                    fileOutputStream.close();\n-                }\n-                catch ( IOException ignored )\n-                {\n-                }\n-            }\n-            fileOutputStream = null;\n+            closeReportFile();\n+        }\n+        finally\n+        {\n+            lock.unlock();\n         }\n     }\n \n     @Override\n     public void writeTestOutput( byte[] buf, int off, int len, boolean stdout )\n     {\n+        lock.lock();\n         try\n         {\n-            if ( fileOutputStream == null )\n+            // This method is called in single thread T1 per fork JVM (see ThreadedStreamConsumer).\n+            // The close() method is called in main Thread T2.\n+            int[] status = new int[1];\n+            FilterOutputStream os = fileOutputStream.get( status );\n+            if ( status[0] != CLOSED )\n             {\n-                if ( !reportsDirectory.exists() )\n+                if ( os == null )\n                 {\n-                    //noinspection ResultOfMethodCallIgnored\n-                    reportsDirectory.mkdirs();\n+                    if ( !reportsDirectory.exists() )\n+                    {\n+                        //noinspection ResultOfMethodCallIgnored\n+                        reportsDirectory.mkdirs();\n+                    }\n+                    File file = getReportFile( reportsDirectory, reportEntryName, reportNameSuffix, \"-output.txt\" );\n+                    os = new BufferedOutputStream( new FileOutputStream( file ), STREAM_BUFFER_SIZE );\n+                    fileOutputStream.set( os, OPEN );\n                 }\n-                File file = getReportFile( reportsDirectory, reportEntryName, reportNameSuffix, \"-output.txt\" );\n-                fileOutputStream = new BufferedOutputStream( new FileOutputStream( file ), 16 * 1024 );\n+                os.write( buf, off, len );\n             }\n-            fileOutputStream.write( buf, off, len );\n         }\n         catch ( IOException e )\n         {\n+            DumpErrorSingleton.getSingleton()\n+                    .dumpException( e );\n+\n             throw new RuntimeException( e );\n         }\n+        finally\n+        {\n+            lock.unlock();\n+        }\n+    }\n+\n+    @SuppressWarnings( \"checkstyle:emptyblock\" )\n+    private void closeNullReportFile( ReportEntry reportEntry )\n+    {\n+        try\n+        {\n+            // close null-output.txt report file\n+            close( true );\n+        }\n+        catch ( IOException ignored )\n+        {\n+            DumpErrorSingleton.getSingleton()\n+                    .dumpException( ignored );\n+        }\n+        finally\n+        {\n+            // prepare <class>-output.txt report file\n+            reportEntryName = reportEntry.getName();\n+        }\n+    }\n+\n+    @SuppressWarnings( \"checkstyle:emptyblock\" )\n+    private void closeReportFile()\n+    {\n+        try\n+        {\n+            close( false );\n+        }\n+        catch ( IOException ignored )\n+        {\n+            DumpErrorSingleton.getSingleton()\n+                    .dumpException( ignored );\n+        }\n+    }\n+\n+    private void close( boolean closeReattempt )\n+            throws IOException\n+    {\n+        int[] status = new int[1];\n+        FilterOutputStream os = fileOutputStream.get( status );\n+        if ( status[0] != CLOSED )\n+        {\n+            fileOutputStream.set( null, closeReattempt ? CLOSED_TO_REOPEN : CLOSED );\n+            if ( os != null && status[0] == OPEN )\n+            {\n+                os.close();\n+            }\n+        }\n     }\n }",
                "changes": 139
            },
            {
                "status": "modified",
                "additions": 89,
                "raw_url": "https://github.com/apache/maven-surefire/raw/a5300171935196e87dda7a03ec8f346628af7062/maven-surefire-common/src/test/java/org/apache/maven/surefire/report/ConsoleOutputFileReporterTest.java",
                "contents_url": "https://api.github.com/repos/apache/maven-surefire/contents/maven-surefire-common/src/test/java/org/apache/maven/surefire/report/ConsoleOutputFileReporterTest.java?ref=a5300171935196e87dda7a03ec8f346628af7062",
                "filename": "maven-surefire-common/src/test/java/org/apache/maven/surefire/report/ConsoleOutputFileReporterTest.java",
                "deletions": 17,
                "sha": "df011d94c37ea9be6a472aded6418be23d04d2ae",
                "blob_url": "https://github.com/apache/maven-surefire/blob/a5300171935196e87dda7a03ec8f346628af7062/maven-surefire-common/src/test/java/org/apache/maven/surefire/report/ConsoleOutputFileReporterTest.java",
                "patch": "@@ -21,6 +21,10 @@\n \n import java.io.File;\n import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n \n import org.apache.maven.plugin.surefire.report.ConsoleOutputFileReporter;\n \n@@ -33,32 +37,29 @@\n public class ConsoleOutputFileReporterTest\n     extends TestCase\n {\n-\n-    private ConsoleOutputFileReporter reporter;\n-\n-    private ReportEntry reportEntry;\n-\n-    private static final String testName = ConsoleOutputFileReporterTest.class.getName();\n-\n     /*\n      * Test method for 'org.codehaus.surefire.report.ConsoleOutputFileReporter.testSetCompleted(ReportEntry report)'\n      */\n     public void testFileNameWithoutSuffix() throws IOException\n     {\n-        File reportDir = new File( new File( System.getProperty( \"user.dir\" ), \"target\" ), \"tmp\" );\n+        File reportDir = new File( new File( System.getProperty( \"user.dir\" ), \"target\" ), \"tmp1\" );\n         //noinspection ResultOfMethodCallIgnored\n         reportDir.mkdirs();\n-        reportEntry = new SimpleReportEntry( getClass().getName(), testName );\n-        reporter = new ConsoleOutputFileReporter( reportDir, null );\n+        ReportEntry reportEntry = new SimpleReportEntry( getClass().getName(), getClass().getName() );\n+        ConsoleOutputFileReporter reporter = new ConsoleOutputFileReporter( reportDir, null );\n         reporter.testSetStarting( reportEntry );\n         reporter.writeTestOutput( \"some text\".getBytes( US_ASCII ), 0, 5, true );\n         reporter.testSetCompleted( reportEntry );\n         reporter.close();\n \n-        File expectedReportFile = new File( reportDir, testName + \"-output.txt\" );\n+        File expectedReportFile = new File( reportDir, getClass().getName() + \"-output.txt\" );\n+\n         assertTrue( \"Report file (\" + expectedReportFile.getAbsolutePath() + \") doesn't exist\",\n                     expectedReportFile.exists() );\n-        assertThat( FileUtils.fileRead( expectedReportFile, US_ASCII.name() ) ).contains( \"some \" );\n+\n+        assertThat( FileUtils.fileRead( expectedReportFile, US_ASCII.name() ) )\n+                .contains( \"some \" );\n+\n         //noinspection ResultOfMethodCallIgnored\n         expectedReportFile.delete();\n     }\n@@ -68,23 +69,94 @@ public void testFileNameWithoutSuffix() throws IOException\n      */\n     public void testFileNameWithSuffix() throws IOException\n     {\n-        File reportDir = new File( new File( System.getProperty( \"user.dir\" ), \"target\" ), \"tmp\" );\n+        File reportDir = new File( new File( System.getProperty( \"user.dir\" ), \"target\" ), \"tmp2\" );\n         //noinspection ResultOfMethodCallIgnored\n         reportDir.mkdirs();\n         String suffixText = \"sampleSuffixText\";\n-        reportEntry = new SimpleReportEntry( getClass().getName(), testName );\n-        reporter = new ConsoleOutputFileReporter( reportDir, suffixText );\n+        ReportEntry reportEntry = new SimpleReportEntry( getClass().getName(), getClass().getName() );\n+        ConsoleOutputFileReporter reporter = new ConsoleOutputFileReporter( reportDir, suffixText );\n         reporter.testSetStarting( reportEntry );\n         reporter.writeTestOutput( \"some text\".getBytes( US_ASCII ), 0, 5, true );\n         reporter.testSetCompleted( reportEntry );\n         reporter.close();\n \n-        File expectedReportFile = new File( reportDir, testName + \"-\" + suffixText + \"-output.txt\" );\n+        File expectedReportFile = new File( reportDir, getClass().getName() + \"-\" + suffixText + \"-output.txt\" );\n+\n         assertTrue( \"Report file (\" + expectedReportFile.getAbsolutePath() + \") doesn't exist\",\n                     expectedReportFile.exists() );\n-        assertThat( FileUtils.fileRead( expectedReportFile, US_ASCII.name() ) ).contains( \"some \" );\n+\n+        assertThat( FileUtils.fileRead( expectedReportFile, US_ASCII.name() ) )\n+                .contains( \"some \" );\n+\n+        //noinspection ResultOfMethodCallIgnored\n+        expectedReportFile.delete();\n+    }\n+\n+    public void testNullReportFile() throws IOException\n+    {\n+        File reportDir = new File( new File( System.getProperty( \"user.dir\" ), \"target\" ), \"tmp3\" );\n+        //noinspection ResultOfMethodCallIgnored\n+        reportDir.mkdirs();\n+        ConsoleOutputFileReporter reporter = new ConsoleOutputFileReporter( reportDir, null );\n+        reporter.writeTestOutput( \"some text\".getBytes( US_ASCII ), 0, 5, true );\n+        reporter.testSetCompleted( new SimpleReportEntry( getClass().getName(), getClass().getName() ) );\n+        reporter.close();\n+\n+        File expectedReportFile = new File( reportDir, \"null-output.txt\" );\n+\n+        assertTrue( \"Report file (\" + expectedReportFile.getAbsolutePath() + \") doesn't exist\",\n+                expectedReportFile.exists() );\n+\n+        assertThat( FileUtils.fileRead( expectedReportFile, US_ASCII.name() ) )\n+                .contains( \"some \" );\n+\n         //noinspection ResultOfMethodCallIgnored\n         expectedReportFile.delete();\n     }\n \n+    public void testConcurrentAccessReportFile() throws Exception\n+    {\n+        File reportDir = new File( new File( System.getProperty( \"user.dir\" ), \"target\" ), \"tmp4\" );\n+        //noinspection ResultOfMethodCallIgnored\n+        reportDir.mkdirs();\n+        final ConsoleOutputFileReporter reporter = new ConsoleOutputFileReporter( reportDir, null );\n+        reporter.testSetStarting( new SimpleReportEntry( getClass().getName(), getClass().getName() ) );\n+        ExecutorService scheduler = Executors.newFixedThreadPool( 10 );\n+        final ArrayList<Callable<Void>> jobs = new ArrayList<Callable<Void>>();\n+        for ( int i = 0; i < 10; i++ )\n+        {\n+            jobs.add( new Callable<Void>() {\n+                @Override\n+                public Void call()\n+                {\n+                    byte[] stream = \"some text\\n\".getBytes( US_ASCII );\n+                    reporter.writeTestOutput( stream, 0, stream.length, true );\n+                    return null;\n+                }\n+            } );\n+        }\n+        scheduler.invokeAll( jobs );\n+        scheduler.shutdown();\n+        reporter.close();\n+\n+        File expectedReportFile = new File( reportDir, getClass().getName() + \"-output.txt\" );\n+\n+        assertTrue( \"Report file (\" + expectedReportFile.getAbsolutePath() + \") doesn't exist\",\n+                expectedReportFile.exists() );\n+\n+        assertThat( FileUtils.fileRead( expectedReportFile, US_ASCII.name() ) )\n+                .contains( \"some text\" );\n+\n+        StringBuilder expectedText = new StringBuilder();\n+        for ( int i = 0; i < 10; i++ )\n+        {\n+            expectedText.append( \"some text\\n\" );\n+        }\n+\n+        assertThat( FileUtils.fileRead( expectedReportFile, US_ASCII.name() ) )\n+                .isEqualTo( expectedText.toString() );\n+\n+        //noinspection ResultOfMethodCallIgnored\n+        expectedReportFile.delete();\n+    }\n }",
                "changes": 106
            }
        ],
        "unit_tests": [
            "ConsoleOutputFileReporterTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "maven-surefire-common/src/test/java/org/apache/maven/surefire/report/ConsoleOutputFileReporterTest.java",
        "buggy_files": [
            "maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/report/ConsoleOutputFileReporter.java"
        ],
        "fixed": true
    }
]