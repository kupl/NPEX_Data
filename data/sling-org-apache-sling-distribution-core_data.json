[{"commit": "https://github.com/apache/sling-org-apache-sling-distribution-core/commit/57abab27db7adfc3bcd06083e090c83f8e82e10b", "parent": "https://github.com/apache/sling-org-apache-sling-distribution-core/commit/b066d5452017bdb4ed26d3468e041a2b02e0ea09", "message": "SLING-7229 - DistributionAgentServlet throws NPE upon test action", "bug_id": "sling-org-apache-sling-distribution-core_1", "file": [{"additions": 35, "raw_url": "https://github.com/apache/sling-org-apache-sling-distribution-core/raw/57abab27db7adfc3bcd06083e090c83f8e82e10b/src/main/java/org/apache/sling/distribution/servlet/ServletJsonUtils.java", "blob_url": "https://github.com/apache/sling-org-apache-sling-distribution-core/blob/57abab27db7adfc3bcd06083e090c83f8e82e10b/src/main/java/org/apache/sling/distribution/servlet/ServletJsonUtils.java", "sha": "4c4b9251ab7277fc3d14d702e130bc598daf0b10", "changes": 55, "status": "modified", "deletions": 20, "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-distribution-core/contents/src/main/java/org/apache/sling/distribution/servlet/ServletJsonUtils.java?ref=57abab27db7adfc3bcd06083e090c83f8e82e10b", "patch": "@@ -43,15 +43,6 @@\n     private final static Logger log = LoggerFactory.getLogger(ServletJsonUtils.class);\n \n     public static void writeJson(SlingHttpServletResponse response, DistributionResponse distributionResponse) throws IOException {\n-        JsonObjectBuilder json = Json.createObjectBuilder();\n-        try {\n-            json.add(\"success\", distributionResponse.isSuccessful());\n-            json.add(\"state\", distributionResponse.getState().name());\n-            json.add(\"message\", distributionResponse.getMessage());\n-\n-        } catch (JsonException e) {\n-            log.error(\"Cannot write json\", e);\n-        }\n \n         switch (distributionResponse.getState()) {\n             case DISTRIBUTED:\n@@ -67,14 +58,46 @@ public static void writeJson(SlingHttpServletResponse response, DistributionResp\n                 // TODO\n                 break;\n         }\n-        append(json.build(), response.getWriter());\n+        JsonObject body = buildBody(distributionResponse);\n+        append(body, response.getWriter());\n     }\n \n     public static void writeJson(SlingHttpServletResponse response, int status, String message,\n                                  @Nullable Map<String, String> kv) throws IOException {\n+\n+        response.setStatus(status);\n+        JsonObject body = buildBody(message, kv);\n+        append(body, response.getWriter());\n+    }\n+\n+    private static void append(JsonObject json, Writer writer) throws IOException {\n+        StringWriter buffer = new StringWriter();\n+        Json.createWriter(buffer).writeObject(json);\n+        writer.append(buffer.toString());\n+    }\n+\n+    protected static JsonObject buildBody(DistributionResponse distributionResponse) {\n         JsonObjectBuilder json = Json.createObjectBuilder();\n         try {\n-            json.add(\"message\", message);\n+            json.add(\"success\", distributionResponse.isSuccessful());\n+            json.add(\"state\", distributionResponse.getState().name());\n+            String message = distributionResponse.getMessage();\n+            if (message != null) {\n+                json.add(\"message\", message);\n+            }\n+\n+        } catch (JsonException e) {\n+            log.error(\"Cannot write json\", e);\n+        }\n+        return json.build();\n+    }\n+\n+    protected static JsonObject buildBody(String message, @Nullable Map<String, String> kv) {\n+        JsonObjectBuilder json = Json.createObjectBuilder();\n+        try {\n+            if (message != null) {\n+                json.add(\"message\", message);\n+            }\n             if (kv != null && kv.size() > 0) {\n                 for (Map.Entry<String, String> entry : kv.entrySet()) {\n                     json.add(entry.getKey(), entry.getValue());\n@@ -83,14 +106,6 @@ public static void writeJson(SlingHttpServletResponse response, int status, Stri\n         } catch (JsonException e) {\n             log.error(\"Cannot write json\", e);\n         }\n-        response.setStatus(status);\n-\n-        append(json.build(), response.getWriter());\n-    }\n-    \n-    private static void append(JsonObject json, Writer writer) throws IOException {\n-        StringWriter buffer = new StringWriter();\n-        Json.createWriter(buffer).writeObject(json);\n-        writer.append(buffer.toString());\n+        return json.build();\n     }\n }", "filename": "src/main/java/org/apache/sling/distribution/servlet/ServletJsonUtils.java"}, {"additions": 69, "raw_url": "https://github.com/apache/sling-org-apache-sling-distribution-core/raw/57abab27db7adfc3bcd06083e090c83f8e82e10b/src/test/java/org/apache/sling/distribution/servlet/ServletJsonUtilsTest.java", "blob_url": "https://github.com/apache/sling-org-apache-sling-distribution-core/blob/57abab27db7adfc3bcd06083e090c83f8e82e10b/src/test/java/org/apache/sling/distribution/servlet/ServletJsonUtilsTest.java", "sha": "1ccbe4e87c78332208899fa332594e1e0fe45ee3", "changes": 69, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-distribution-core/contents/src/test/java/org/apache/sling/distribution/servlet/ServletJsonUtilsTest.java?ref=57abab27db7adfc3bcd06083e090c83f8e82e10b", "patch": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.sling.distribution.servlet;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.json.JsonObject;\n+\n+import org.apache.sling.distribution.DistributionRequestState;\n+import org.apache.sling.distribution.DistributionResponse;\n+import org.apache.sling.distribution.impl.SimpleDistributionResponse;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+public class ServletJsonUtilsTest {\n+\n+    @Test\n+    public void testBuildBodyWithMessageAndNoProperties() throws Exception {\n+        String message1 = \"message #1\";\n+        JsonObject body = ServletJsonUtils.buildBody(message1, null);\n+        assertEquals(message1, body.getString(\"message\"));\n+    }\n+\n+    @Test\n+    public void testBuildBodyWithMessageAndProperties() throws Exception {\n+        String message2 = \"message #2\";\n+        String k1 = \"keyOne\", v1 = \"value #1\";\n+        Map<String,String> props = Collections.singletonMap(k1, v1);\n+        JsonObject body = ServletJsonUtils.buildBody(message2, props);\n+        assertEquals(message2, body.getString(\"message\"));\n+        assertEquals(v1, body.getString(k1));\n+    }\n+\n+    @Test\n+    public void testBuildBodyWithDistributionResponseContainingMessage() throws Exception {\n+        String message1 = \"message #1\";\n+        DistributionRequestState state = DistributionRequestState.ACCEPTED;\n+        DistributionResponse response = new SimpleDistributionResponse(state, message1);\n+        JsonObject body = ServletJsonUtils.buildBody(response);\n+        assertEquals(message1, body.getString(\"message\"));\n+    }\n+\n+    @Test\n+    public void testBuildBodyWithDistributionResponseContainingNoMessage() throws Exception {\n+        DistributionRequestState state = DistributionRequestState.ACCEPTED;\n+        DistributionResponse response = new SimpleDistributionResponse(state, null);\n+        JsonObject body = ServletJsonUtils.buildBody(response);\n+        assertFalse(body.containsKey(\"message\"));\n+    }\n+\n+}\n\\ No newline at end of file", "filename": "src/test/java/org/apache/sling/distribution/servlet/ServletJsonUtilsTest.java"}], "repo": "sling-org-apache-sling-distribution-core"}, {"commit": "https://github.com/apache/sling-org-apache-sling-distribution-core/commit/5828a5269b2a67933086019dbf762f4ce5b322c6", "parent": "https://github.com/apache/sling-org-apache-sling-distribution-core/commit/b0e05576d5d6ed27d3bff27fd6a3668c9674d332", "message": "SLING-7020 - DefaultDistributionComponentProvider is causing an NPE when agents are listed\n\n* Add mapping for missing component kinds (DistributionRequestAuthorizationStrategy, DistributionTrigger)\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1802937 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "sling-org-apache-sling-distribution-core_2", "file": [{"additions": 30, "raw_url": "https://github.com/apache/sling-org-apache-sling-distribution-core/raw/5828a5269b2a67933086019dbf762f4ce5b322c6/src/main/java/org/apache/sling/distribution/component/impl/DefaultDistributionComponentProvider.java", "blob_url": "https://github.com/apache/sling-org-apache-sling-distribution-core/blob/5828a5269b2a67933086019dbf762f4ce5b322c6/src/main/java/org/apache/sling/distribution/component/impl/DefaultDistributionComponentProvider.java", "sha": "d76091fa9c6039379788612d11ae673ae8762a5e", "changes": 31, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-distribution-core/contents/src/main/java/org/apache/sling/distribution/component/impl/DefaultDistributionComponentProvider.java?ref=5828a5269b2a67933086019dbf762f4ce5b322c6", "patch": "@@ -32,12 +32,14 @@\n import org.apache.felix.scr.annotations.Service;\n import org.apache.sling.commons.osgi.PropertiesUtil;\n import org.apache.sling.distribution.agent.DistributionAgent;\n+import org.apache.sling.distribution.agent.impl.DistributionRequestAuthorizationStrategy;\n import org.apache.sling.distribution.packaging.DistributionPackageBuilder;\n import org.apache.sling.distribution.packaging.DistributionPackageExporter;\n import org.apache.sling.distribution.packaging.DistributionPackageImporter;\n import org.apache.sling.distribution.queue.DistributionQueueProvider;\n import org.apache.sling.distribution.queue.impl.DistributionQueueDispatchingStrategy;\n import org.apache.sling.distribution.transport.DistributionTransportSecretProvider;\n+import org.apache.sling.distribution.trigger.DistributionTrigger;\n \n /**\n  * {@link DistributionComponentProvider} OSGi service.\n@@ -51,6 +53,8 @@\n         @Reference(name = \"distributionQueueProvider\", referenceInterface = DistributionQueueProvider.class, cardinality = ReferenceCardinality.OPTIONAL_MULTIPLE, policy = ReferencePolicy.DYNAMIC),\n         @Reference(name = \"distributionQueueDistributionStrategy\", referenceInterface = DistributionQueueDispatchingStrategy.class, cardinality = ReferenceCardinality.OPTIONAL_MULTIPLE, policy = ReferencePolicy.DYNAMIC),\n         @Reference(name = \"distributionTransportSecretProvider\", referenceInterface = DistributionTransportSecretProvider.class, cardinality = ReferenceCardinality.OPTIONAL_MULTIPLE, policy = ReferencePolicy.DYNAMIC),\n+        @Reference(name = \"distributionTrigger\", referenceInterface = DistributionTrigger.class, cardinality = ReferenceCardinality.OPTIONAL_MULTIPLE, policy = ReferencePolicy.DYNAMIC),\n+        @Reference(name = \"distributionRequestAuthorizationStrategy\", referenceInterface = DistributionRequestAuthorizationStrategy.class, cardinality = ReferenceCardinality.OPTIONAL_MULTIPLE, policy = ReferencePolicy.DYNAMIC),\n         @Reference(name = \"distributionPackageBuilder\", referenceInterface = DistributionPackageBuilder.class, cardinality = ReferenceCardinality.OPTIONAL_MULTIPLE, policy = ReferencePolicy.DYNAMIC)\n })\n @Service(DistributionComponentProvider.class)\n@@ -72,6 +76,10 @@\n \n     private final Map<String, DistributionComponent<DistributionPackageBuilder>> distributionPackageBuilderMap = new ConcurrentHashMap<String, DistributionComponent<DistributionPackageBuilder>>();\n \n+    private final Map<String, DistributionComponent<DistributionTrigger>> distributionTriggerMap = new ConcurrentHashMap<String, DistributionComponent<DistributionTrigger>>();\n+\n+    private final Map<String, DistributionComponent<DistributionRequestAuthorizationStrategy>> distributionRequestAuthorizationStrategy = new ConcurrentHashMap<String, DistributionComponent<DistributionRequestAuthorizationStrategy>>();\n+\n     public DistributionComponent<?> getComponent(DistributionComponentKind kind, String componentName) {\n         Map<String, DistributionComponent<?>> componentMap = getComponentMap(kind.asClass());\n         return componentMap.get(componentName);\n@@ -114,9 +122,13 @@\n             return (Map) distributionTransportSecretProviderMap;\n         } else if (type.isAssignableFrom(DistributionPackageBuilder.class)) {\n             return (Map) distributionPackageBuilderMap;\n+        } else if (type.isAssignableFrom(DistributionTrigger.class)) {\n+            return (Map) distributionTriggerMap;\n+        } else if (type.isAssignableFrom(DistributionRequestAuthorizationStrategy.class)) {\n+            return (Map) distributionRequestAuthorizationStrategy;\n         }\n \n-        return null;\n+        throw new IllegalArgumentException(String.format(\"Components of type: %s\u00a0are not supported\", type));\n     }\n \n     // (un)binding methods\n@@ -177,6 +189,23 @@ public void unbindDistributionPackageBuilder(DistributionPackageBuilder distribu\n         remove(DistributionPackageBuilder.class, distributionPackageBuilder, config);\n     }\n \n+    public void bindDistributionTrigger(DistributionTrigger distributionTrigger, Map<String, Object> config) {\n+        put(DistributionTrigger.class, distributionTrigger, config);\n+    }\n+\n+    public void unbindDistributionTrigger(DistributionTrigger distributionTrigger, Map<String, Object> config) {\n+        remove(DistributionTrigger.class, distributionTrigger, config);\n+    }\n+\n+    public void bindDistributionRequestAuthorizationStrategy(DistributionRequestAuthorizationStrategy distributionRequestAuthorizationStrategy, Map<String, Object> config) {\n+        put(DistributionRequestAuthorizationStrategy.class, distributionRequestAuthorizationStrategy, config);\n+    }\n+\n+    public void unbindDistributionRequestAuthorizationStrategy(DistributionRequestAuthorizationStrategy distributionRequestAuthorizationStrategy, Map<String, Object> config) {\n+        remove(DistributionRequestAuthorizationStrategy.class, distributionRequestAuthorizationStrategy, config);\n+    }\n+\n+\n     // internals\n \n     private <ComponentType> void put(Class<ComponentType> typeClass, ComponentType service, Map<String, Object> config) {", "filename": "src/main/java/org/apache/sling/distribution/component/impl/DefaultDistributionComponentProvider.java"}], "repo": "sling-org-apache-sling-distribution-core"}, {"commit": "https://github.com/apache/sling-org-apache-sling-distribution-core/commit/f995b1d0a3530f20c664b553e1f96943dcf3bb1c", "parent": "https://github.com/apache/sling-org-apache-sling-distribution-core/commit/d567292e8d940af5c5092cef028989ab91df8528", "message": "SLING-6418 - NPE in o.a.s.d.p.i.e.AgentDistributionPackageExporter#exportPackages\n\n* Throw specific exception when the queue can't be found in AgentDistributionPackageExporter or DistributionAgentQueueServlet\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1775099 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "sling-org-apache-sling-distribution-core_3", "file": [{"additions": 12, "raw_url": "https://github.com/apache/sling-org-apache-sling-distribution-core/raw/f995b1d0a3530f20c664b553e1f96943dcf3bb1c/src/main/java/org/apache/sling/distribution/packaging/impl/exporter/AgentDistributionPackageExporter.java", "blob_url": "https://github.com/apache/sling-org-apache-sling-distribution-core/blob/f995b1d0a3530f20c664b553e1f96943dcf3bb1c/src/main/java/org/apache/sling/distribution/packaging/impl/exporter/AgentDistributionPackageExporter.java", "sha": "160d0ee5c236ad3fde8e414512b3a65c44b49f2d", "changes": 14, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-distribution-core/contents/src/main/java/org/apache/sling/distribution/packaging/impl/exporter/AgentDistributionPackageExporter.java?ref=f995b1d0a3530f20c664b553e1f96943dcf3bb1c", "patch": "@@ -83,7 +83,7 @@ public void exportPackages(@Nonnull ResourceResolver resourceResolver, @Nonnull\n         try {\n             log.debug(\"getting packages from queue {}\", queueName);\n \n-            DistributionQueue queue = agent.getQueue(queueName);\n+            DistributionQueue queue = getQueueOrThrow(queueName);\n             DistributionQueueEntry entry = queue.getHead();\n             if (entry != null) {\n                 DistributionQueueItem queueItem = entry.getItem();\n@@ -118,7 +118,7 @@ public DistributionPackage getPackage(@Nonnull ResourceResolver resourceResolver\n         try {\n             log.debug(\"getting package from queue {}\", queueName);\n \n-            DistributionQueue queue = agent.getQueue(queueName);\n+            DistributionQueue queue = getQueueOrThrow(queueName);\n             DistributionQueueEntry entry = queue.getItem(distributionPackageId);\n             DistributionPackage distributionPackage;\n \n@@ -183,4 +183,14 @@ private void agentLog(String message, Object[] values) {\n             ((DefaultDistributionLog) agentLog).info(message, values);\n         }\n     }\n+\n+    @Nonnull\n+    private DistributionQueue getQueueOrThrow(@Nonnull String queueName)\n+            throws DistributionException {\n+        DistributionQueue queue = agent.getQueue(queueName);\n+        if (queue == null) {\n+            throw new DistributionException(String.format(\"Could not find queue %s\", queueName));\n+        }\n+        return queue;\n+    }\n }", "filename": "src/main/java/org/apache/sling/distribution/packaging/impl/exporter/AgentDistributionPackageExporter.java"}, {"additions": 12, "raw_url": "https://github.com/apache/sling-org-apache-sling-distribution-core/raw/f995b1d0a3530f20c664b553e1f96943dcf3bb1c/src/main/java/org/apache/sling/distribution/servlet/DistributionAgentQueueServlet.java", "blob_url": "https://github.com/apache/sling-org-apache-sling-distribution-core/blob/f995b1d0a3530f20c664b553e1f96943dcf3bb1c/src/main/java/org/apache/sling/distribution/servlet/DistributionAgentQueueServlet.java", "sha": "cd1c56d5df4eade65a8a1bc55e56ecc692c28b2d", "changes": 20, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-distribution-core/contents/src/main/java/org/apache/sling/distribution/servlet/DistributionAgentQueueServlet.java?ref=f995b1d0a3530f20c664b553e1f96943dcf3bb1c", "patch": "@@ -18,6 +18,7 @@\n  */\n package org.apache.sling.distribution.servlet;\n \n+import javax.annotation.Nonnull;\n import javax.servlet.ServletException;\n import java.io.IOException;\n \n@@ -86,7 +87,7 @@ protected void doPost(SlingHttpServletRequest request, SlingHttpServletResponse\n \n             if (idParam != null && from != null) {\n                 DistributionAgent agent = request.getResource().getParent().getParent().adaptTo(DistributionAgent.class);\n-                DistributionQueue sourceQueue = agent.getQueue(from);\n+                DistributionQueue sourceQueue = getQueueOrThrow(agent,from);\n \n                 addItems(resourceResolver, queue, sourceQueue, idParam);\n             }\n@@ -96,7 +97,7 @@ protected void doPost(SlingHttpServletRequest request, SlingHttpServletResponse\n \n             if (idParam != null && from != null) {\n                 DistributionAgent agent = request.getResource().getParent().getParent().adaptTo(DistributionAgent.class);\n-                DistributionQueue sourceQueue = agent.getQueue(from);\n+                DistributionQueue sourceQueue = getQueueOrThrow(agent,from);\n \n                 addItems(resourceResolver, queue, sourceQueue, idParam);\n                 deleteItems(resourceResolver, sourceQueue, idParam);\n@@ -105,12 +106,6 @@ protected void doPost(SlingHttpServletRequest request, SlingHttpServletResponse\n     }\n \n     private void addItems(ResourceResolver resourceResolver, DistributionQueue targetQueue, DistributionQueue sourceQueue, String[] ids) {\n-\n-\n-        if (sourceQueue == null) {\n-            log.warn(\"cannot find source queue {}\", sourceQueue);\n-        }\n-\n         for (String id: ids) {\n             DistributionQueueEntry entry = sourceQueue.getItem(id);\n             if (entry != null) {\n@@ -160,4 +155,13 @@ private DistributionPackage getPackage(ResourceResolver resourceResolver, Distri\n \n         return null;\n     }\n+\n+    @Nonnull\n+    private static DistributionQueue getQueueOrThrow(@Nonnull DistributionAgent agent, @Nonnull String queueName) {\n+        DistributionQueue queue = agent.getQueue(queueName);\n+        if (queue == null) {\n+            throw new IllegalArgumentException(String.format(\"Could not find queue %s\", queueName));\n+        }\n+        return queue;\n+    }\n }", "filename": "src/main/java/org/apache/sling/distribution/servlet/DistributionAgentQueueServlet.java"}], "repo": "sling-org-apache-sling-distribution-core"}]
