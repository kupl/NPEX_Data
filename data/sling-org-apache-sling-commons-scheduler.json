{
    "sling-org-apache-sling-commons-scheduler_2940edc": {
        "bug_id": "sling-org-apache-sling-commons-scheduler_2940edc",
        "commit": "https://github.com/apache/sling-org-apache-sling-commons-scheduler/commit/2940edc507e84b5586fd67919e65aa49f5b8be93",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-commons-scheduler/blob/2940edc507e84b5586fd67919e65aa49f5b8be93/pom.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-commons-scheduler/contents/pom.xml?ref=2940edc507e84b5586fd67919e65aa49f5b8be93",
                "deletions": 1,
                "filename": "pom.xml",
                "patch": "@@ -182,7 +182,7 @@\n         <dependency>\n             <groupId>org.quartz-scheduler</groupId>\n             <artifactId>quartz</artifactId>\n-            <version>2.2.1</version>\n+            <version>2.2.2</version>\n         </dependency>\n         <dependency>\n             <groupId>junit</groupId>",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-commons-scheduler/raw/2940edc507e84b5586fd67919e65aa49f5b8be93/pom.xml",
                "sha": "1c455bdee53cab08efb2bac40a86f0b868ce6326",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-commons-scheduler/blob/2940edc507e84b5586fd67919e65aa49f5b8be93/src/main/java/org/apache/sling/commons/scheduler/impl/QuartzScheduler.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-commons-scheduler/contents/src/main/java/org/apache/sling/commons/scheduler/impl/QuartzScheduler.java?ref=2940edc507e84b5586fd67919e65aa49f5b8be93",
                "deletions": 8,
                "filename": "src/main/java/org/apache/sling/commons/scheduler/impl/QuartzScheduler.java",
                "patch": "@@ -144,6 +144,7 @@ protected void deactivate(final BundleContext ctx) {\n     /**\n      * @see org.osgi.framework.BundleListener#bundleChanged(org.osgi.framework.BundleEvent)\n      */\n+    @Override\n     public void bundleChanged(final BundleEvent event) {\n         if ( event.getType() == BundleEvent.STOPPED ) {\n             final Long bundleId = event.getBundle().getBundleId();\n@@ -157,14 +158,16 @@ public void bundleChanged(final BundleEvent event) {\n                             final Set<JobKey> keys = s.getJobKeys(GroupMatcher.jobGroupEquals(group));\n                             for(final JobKey key : keys) {\n                                 final JobDetail detail = s.getJobDetail(key);\n-                                final String jobName = (String) detail.getJobDataMap().get(QuartzScheduler.DATA_MAP_NAME);\n-                                final Object job = detail.getJobDataMap().get(QuartzScheduler.DATA_MAP_OBJECT);\n-\n-                                if ( jobName != null && job != null ) {\n-                                    final Long jobBundleId = (Long) detail.getJobDataMap().get(QuartzScheduler.DATA_MAP_BUNDLE_ID);\n-                                    if ( jobBundleId != null && jobBundleId.equals(bundleId) ) {\n-                                        s.deleteJob(key);\n-                                        this.logger.debug(\"Unscheduling job with name {}\", jobName);\n+                                if ( detail != null ) {\n+                                    final String jobName = (String) detail.getJobDataMap().get(QuartzScheduler.DATA_MAP_NAME);\n+                                    final Object job = detail.getJobDataMap().get(QuartzScheduler.DATA_MAP_OBJECT);\n+\n+                                    if ( jobName != null && job != null ) {\n+                                        final Long jobBundleId = (Long) detail.getJobDataMap().get(QuartzScheduler.DATA_MAP_BUNDLE_ID);\n+                                        if ( jobBundleId != null && jobBundleId.equals(bundleId) ) {\n+                                            s.deleteJob(key);\n+                                            this.logger.debug(\"Unscheduling job with name {}\", jobName);\n+                                        }\n                                     }\n                                 }\n                             }\n@@ -457,34 +460,39 @@ public QuartzThreadPool(final ThreadPool executor) {\n         /**\n          * @see org.quartz.spi.QuartzThreadPool#getPoolSize()\n          */\n+        @Override\n         public int getPoolSize() {\n             return this.executor.getConfiguration().getMaxPoolSize();\n         }\n \n         /**\n          * @see org.quartz.spi.QuartzThreadPool#initialize()\n          */\n+        @Override\n         public void initialize() {\n             // nothing to do\n         }\n \n         /**\n          * @see org.quartz.spi.ThreadPool#setInstanceId(java.lang.String)\n          */\n+        @Override\n         public void setInstanceId(final String id) {\n             // we ignore this\n         }\n \n         /**\n          * @see org.quartz.spi.ThreadPool#setInstanceName(java.lang.String)\n          */\n+        @Override\n         public void setInstanceName(final String name) {\n             // we ignore this\n         }\n \n         /**\n          * @see org.quartz.spi.QuartzThreadPool#runInThread(java.lang.Runnable)\n          */\n+        @Override\n         public boolean runInThread(final Runnable job) {\n             this.executor.execute(job);\n \n@@ -494,13 +502,15 @@ public boolean runInThread(final Runnable job) {\n         /**\n          * @see org.quartz.spi.ThreadPool#blockForAvailableThreads()\n          */\n+        @Override\n         public int blockForAvailableThreads() {\n             return this.executor.getConfiguration().getMaxPoolSize() - this.executor.getConfiguration().getQueueSize();\n         }\n \n         /**\n          * @see org.quartz.spi.QuartzThreadPool#shutdown(boolean)\n          */\n+        @Override\n         public void shutdown(final boolean waitForJobsToComplete) {\n             // the pool is managed by the thread pool manager,\n             // so we can just return",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-commons-scheduler/raw/2940edc507e84b5586fd67919e65aa49f5b8be93/src/main/java/org/apache/sling/commons/scheduler/impl/QuartzScheduler.java",
                "sha": "4dbc1556c98b5bc79ee924749840a6e57cc0b940",
                "status": "modified"
            }
        ],
        "message": "SLING-5381 : NPE in QuartzScheduler\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1720554 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/sling-org-apache-sling-commons-scheduler/commit/a4615dc34ad1f539c3e6b8ca2587ad41f4036a15",
        "repo": "sling-org-apache-sling-commons-scheduler",
        "unit_tests": [
            "QuartzSchedulerTest.java"
        ]
    },
    "sling-org-apache-sling-commons-scheduler_8efd769": {
        "bug_id": "sling-org-apache-sling-commons-scheduler_8efd769",
        "commit": "https://github.com/apache/sling-org-apache-sling-commons-scheduler/commit/8efd7696b37f14f9b2561352458e3c77108263e9",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-commons-scheduler/blob/8efd7696b37f14f9b2561352458e3c77108263e9/src/main/java/org/apache/sling/commons/scheduler/impl/WhiteboardHandler.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-commons-scheduler/contents/src/main/java/org/apache/sling/commons/scheduler/impl/WhiteboardHandler.java?ref=8efd7696b37f14f9b2561352458e3c77108263e9",
                "deletions": 2,
                "filename": "src/main/java/org/apache/sling/commons/scheduler/impl/WhiteboardHandler.java",
                "patch": "@@ -48,7 +48,7 @@\n     /** Default logger. */\n     private final Logger logger = LoggerFactory.getLogger(this.getClass());\n \n-    @Reference\n+    @Reference(name = \"first\") // by using this name this reference is set first (alphabetic order -> order in XML)\n     private QuartzScheduler scheduler;\n \n     private final Map<Long, String> idToNameMap = new ConcurrentHashMap<>();\n@@ -200,7 +200,8 @@ void register(final ServiceReference<?> ref, final Object job) {\n      * @param reference The service reference.\n      */\n     void unregister(final ServiceReference<?> reference) {\n-        final String name = idToNameMap.remove(getLongProperty(reference, Constants.SERVICE_ID));\n+        final Long key = getLongProperty(reference, Constants.SERVICE_ID);\n+        final String name = idToNameMap.remove(key);\n         if ( name != null ) {\n             this.scheduler.unschedule(reference.getBundle().getBundleId(), name);\n         }",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-commons-scheduler/raw/8efd7696b37f14f9b2561352458e3c77108263e9/src/main/java/org/apache/sling/commons/scheduler/impl/WhiteboardHandler.java",
                "sha": "ed02e48dc8c3bc79b63aaf4215cc1c3a8759e00d",
                "status": "modified"
            }
        ],
        "message": "SLING-6856 : NPE in scheduler whiteboard handler\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1795171 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/sling-org-apache-sling-commons-scheduler/commit/adc6fcf8ca97eed763c83abc2a96f4c753899e98",
        "repo": "sling-org-apache-sling-commons-scheduler",
        "unit_tests": [
            "WhiteboardHandlerTest.java"
        ]
    }
}