[
    {
        "parent": "https://github.com/apache/tomcat/commit/b51052483ec3687c6b4db05288d7546d8431eaf0",
        "bug_id": "tomcat_1",
        "file": [
            {
                "additions": 9,
                "sha": "765935ec684ae8a20bc920bc3fb0aebd22e8a6ad",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/7046644bf361b89afc246b6643e24ce2ae60cacc/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "deletions": 3,
                "filename": "java/org/apache/tomcat/util/net/NioEndpoint.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/NioEndpoint.java?ref=7046644bf361b89afc246b6643e24ce2ae60cacc",
                "patch": "@@ -27,6 +27,7 @@\n import java.nio.ByteBuffer;\n import java.nio.channels.CancelledKeyException;\n import java.nio.channels.Channel;\n+import java.nio.channels.ClosedChannelException;\n import java.nio.channels.CompletionHandler;\n import java.nio.channels.FileChannel;\n import java.nio.channels.NetworkChannel;\n@@ -52,6 +53,7 @@\n import org.apache.tomcat.util.collections.SynchronizedQueue;\n import org.apache.tomcat.util.collections.SynchronizedStack;\n import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;\n+import org.apache.tomcat.util.net.NioChannel.ClosedNioChannel;\n import org.apache.tomcat.util.net.jsse.JSSESupport;\n \n /**\n@@ -1240,6 +1242,10 @@ private int fillReadBuffer(boolean block, ByteBuffer to) throws IOException {\n \n         @Override\n         protected void doWrite(boolean block, ByteBuffer from) throws IOException {\n+            NioChannel socket = getSocket();\n+            if (socket instanceof ClosedNioChannel) {\n+                throw new ClosedChannelException();\n+            }\n             if (block) {\n                 long writeTimeout = getWriteTimeout();\n                 Selector selector = null;\n@@ -1249,11 +1255,11 @@ protected void doWrite(boolean block, ByteBuffer from) throws IOException {\n                     // Ignore\n                 }\n                 try {\n-                    pool.write(from, getSocket(), selector, writeTimeout);\n+                    pool.write(from, socket, selector, writeTimeout);\n                     if (block) {\n                         // Make sure we are flushed\n                         do {\n-                            if (getSocket().flush(true, selector, writeTimeout)) {\n+                            if (socket.flush(true, selector, writeTimeout)) {\n                                 break;\n                             }\n                         } while (true);\n@@ -1268,7 +1274,7 @@ protected void doWrite(boolean block, ByteBuffer from) throws IOException {\n                 // registered for write once as both container and user code can trigger\n                 // write registration.\n             } else {\n-                if (getSocket().write(from) == -1) {\n+                if (socket.write(from) == -1) {\n                     throw new EOFException();\n                 }\n             }",
                "changes": 12,
                "blob_url": "https://github.com/apache/tomcat/blob/7046644bf361b89afc246b6643e24ce2ae60cacc/java/org/apache/tomcat/util/net/NioEndpoint.java"
            }
        ],
        "repo": "tomcat",
        "message": "Follow-up to c2d6278. NPE->ClosedChannelException for closed socket\n\nIf an attempt is made to use a closed socket, throw a\nClosedChannelException rather than a NullPointerException",
        "commit": "https://github.com/apache/tomcat/commit/7046644bf361b89afc246b6643e24ce2ae60cacc"
    },
    {
        "parent": "https://github.com/apache/tomcat/commit/4aac8d4b06bcf5a0ff5246d54d4fa4e00372f743",
        "bug_id": "tomcat_2",
        "file": [
            {
                "additions": 1,
                "sha": "da01da8cbcd70ea5519ddbef2843830cae217e31",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af/java/org/apache/catalina/valves/CrawlerSessionManagerValve.java",
                "deletions": 1,
                "filename": "java/org/apache/catalina/valves/CrawlerSessionManagerValve.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/valves/CrawlerSessionManagerValve.java?ref=6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af",
                "patch": "@@ -265,7 +265,7 @@ private String getClientIdentifier(Host host, Context context, String clientIp)\n         if (isHostAware) {\n             result.append('-').append(host.getName());\n         }\n-        if (isContextAware) {\n+        if (isContextAware && context != null) {\n             result.append(context.getName());\n         }\n         return result.toString();",
                "changes": 2,
                "blob_url": "https://github.com/apache/tomcat/blob/6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af/java/org/apache/catalina/valves/CrawlerSessionManagerValve.java"
            },
            {
                "additions": 35,
                "sha": "56d07b82024110482996f693628f7fc5c88f3793",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af/test/org/apache/catalina/valves/TestCrawlerSessionManagerValve.java",
                "deletions": 6,
                "filename": "test/org/apache/catalina/valves/TestCrawlerSessionManagerValve.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/valves/TestCrawlerSessionManagerValve.java?ref=6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af",
                "patch": "@@ -97,6 +97,18 @@ public void testCrawlerMultipleHostsHostAware() throws Exception {\n         verifyCrawlingLocalhost(valve, \"example.invalid\");\n     }\n \n+    @Test\n+    public void testCrawlerMultipleContextsContextAware() throws Exception {\n+        CrawlerSessionManagerValve valve = new CrawlerSessionManagerValve();\n+        valve.setCrawlerUserAgents(valve.getCrawlerUserAgents());\n+        valve.setHostAware(true);\n+        valve.setContextAware(true);\n+        valve.setNext(EasyMock.createMock(Valve.class));\n+\n+        verifyCrawlingContext(valve, \"/examples\");\n+        verifyCrawlingContext(valve, null);\n+    }\n+\n     @Test\n     public void testCrawlersSessionIdIsRemovedAfterSessionExpiry() throws IOException, ServletException {\n         CrawlerSessionManagerValve valve = new CrawlerSessionManagerValve();\n@@ -127,7 +139,20 @@ public void testCrawlersSessionIdIsRemovedAfterSessionExpiry() throws IOExceptio\n     private void verifyCrawlingLocalhost(CrawlerSessionManagerValve valve, String hostname)\n             throws IOException, ServletException {\n         HttpSession session = createSessionExpectations(valve, true);\n-        Request request = createRequestExpectations(\"127.0.0.1\", session, true, hostname, \"tomcatBot 1.0\");\n+        Request request = createRequestExpectations(\"127.0.0.1\", session, true, hostname, \"/examples\", \"tomcatBot 1.0\");\n+\n+        EasyMock.replay(request, session);\n+\n+        valve.invoke(request, EasyMock.createMock(Response.class));\n+\n+        EasyMock.verify(request, session);\n+    }\n+\n+\n+    private void verifyCrawlingContext(CrawlerSessionManagerValve valve, String contextPath)\n+            throws IOException, ServletException {\n+        HttpSession session = createSessionExpectations(valve, true);\n+        Request request = createRequestExpectations(\"127.0.0.1\", session, true, \"localhost\", contextPath, \"tomcatBot 1.0\");\n \n         EasyMock.replay(request, session);\n \n@@ -151,14 +176,15 @@ private HttpSession createSessionExpectations(CrawlerSessionManagerValve valve,\n \n \n     private Request createRequestExpectations(String ip, HttpSession session, boolean isBot) {\n-        return createRequestExpectations(ip, session, isBot, \"localhost\", \"something 1.0\");\n+        return createRequestExpectations(ip, session, isBot, \"localhost\", \"/examples\", \"something 1.0\");\n     }\n \n-    private Request createRequestExpectations(String ip, HttpSession session, boolean isBot, String hostname, String userAgent) {\n+    private Request createRequestExpectations(String ip, HttpSession session, boolean isBot, String hostname,\n+            String contextPath, String userAgent) {\n         Request request = EasyMock.createMock(Request.class);\n         EasyMock.expect(request.getRemoteAddr()).andReturn(ip);\n         EasyMock.expect(request.getHost()).andReturn(simpleHostWithName(hostname));\n-        EasyMock.expect(request.getContext()).andReturn(simpleContextWithName());\n+        EasyMock.expect(request.getContext()).andReturn(simpleContextWithName(contextPath));\n         IExpectationSetters<HttpSession> setter = EasyMock.expect(request.getSession(false))\n                 .andReturn(null);\n         if (isBot) {\n@@ -175,9 +201,12 @@ private Host simpleHostWithName(String hostname) {\n         return host;\n     }\n \n-    private Context simpleContextWithName() {\n+    private Context simpleContextWithName(String contextPath) {\n+        if (contextPath == null) {\n+            return null;\n+        }\n         Context context = EasyMock.createMock(Context.class);\n-        EasyMock.expect(context.getName()).andReturn(\"/examples\");\n+        EasyMock.expect(context.getName()).andReturn(contextPath);\n         EasyMock.replay(context);\n         return context;\n     }",
                "changes": 41,
                "blob_url": "https://github.com/apache/tomcat/blob/6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af/test/org/apache/catalina/valves/TestCrawlerSessionManagerValve.java"
            },
            {
                "additions": 6,
                "sha": "7e544a2131efe6bdcf8d614f1a291b7744644ef2",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af/webapps/docs/changelog.xml",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af",
                "patch": "@@ -87,6 +87,12 @@\n         for patterns used with the <code>RewriteValve</code> with the\n         description in the documentation. (markt)\n       </fix>\n+      <fix>\n+        Avoid a <code>NullPointerException</code> in the\n+        <code>CrawlerSessionManagerValve</code> if no ROOT Context is deployed\n+        and a request does not map to any of the other deployed Contexts. Patch\n+        provided by Jop Zinkweg. (markt)\n+      </fix>\n      </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "changes": 6,
                "blob_url": "https://github.com/apache/tomcat/blob/6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af/webapps/docs/changelog.xml"
            }
        ],
        "repo": "tomcat",
        "message": "Fix https://github.com/apache/tomcat/pull/187 Avoid NPE\n\nAvoid a NullPointerException in the CrawlerSessionManagerValve if no\nROOT Context is deployed and a request does not map to any of the other\ndeployed Contexts.\nPatch provided by Jop Zinkweg.",
        "commit": "https://github.com/apache/tomcat/commit/6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af"
    },
    {
        "parent": "https://github.com/apache/tomcat/commit/163c0ad70540e59b75fc922d6fd19eacc7febd3e",
        "bug_id": "tomcat_3",
        "file": [
            {
                "additions": 1,
                "sha": "744619aafe4d19401b20be05c628e2114b6dbd18",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/LocalStrings.properties",
                "deletions": 0,
                "filename": "java/org/apache/tomcat/websocket/LocalStrings.properties",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/LocalStrings.properties?ref=5bf2a8504f5965410e82242667b71f54912fe766",
                "patch": "@@ -35,6 +35,7 @@ caseInsensitiveKeyMap.nullKey=Null keys are not permitted\n \n futureToSendHandler.timeout=Operation timed out after waiting [{0}] [{1}] to complete\n \n+perMessageDeflate.alreadyClosed=The transformer has been closed and may no longer be used\n perMessageDeflate.deflateFailed=Failed to decompress a compressed WebSocket frame\n perMessageDeflate.duplicateParameter=Duplicate definition of the [{0}] extension parameter\n perMessageDeflate.invalidState=Invalid state",
                "changes": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/LocalStrings.properties"
            },
            {
                "additions": 28,
                "sha": "afcfcf02eb68ca851d53059a8355862127b74ebc",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/PerMessageDeflate.java",
                "deletions": 9,
                "filename": "java/org/apache/tomcat/websocket/PerMessageDeflate.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/PerMessageDeflate.java?ref=5bf2a8504f5965410e82242667b71f54912fe766",
                "patch": "@@ -204,6 +204,8 @@ public TransformationResult getMoreData(byte opCode, boolean fin, int rsv, ByteB\n                         dest.array(), dest.arrayOffset() + dest.position(), dest.remaining());\n             } catch (DataFormatException e) {\n                 throw new IOException(sm.getString(\"perMessageDeflate.deflateFailed\"), e);\n+            } catch (NullPointerException e) {\n+                throw new IOException(sm.getString(\"perMessageDeflate.alreadyClosed\"), e);\n             }\n             dest.position(dest.position() + written);\n \n@@ -229,7 +231,11 @@ public TransformationResult getMoreData(byte opCode, boolean fin, int rsv, ByteB\n             } else if (written == 0) {\n                 if (fin && (isServer && !clientContextTakeover ||\n                         !isServer && !serverContextTakeover)) {\n-                    inflater.reset();\n+                    try {\n+                        inflater.reset();\n+                    } catch (NullPointerException e) {\n+                        throw new IOException(sm.getString(\"perMessageDeflate.alreadyClosed\"), e);\n+                    }\n                 }\n                 return TransformationResult.END_OF_FRAME;\n             }\n@@ -314,7 +320,7 @@ public boolean validateRsvBits(int i) {\n \n \n     @Override\n-    public List<MessagePart> sendMessagePart(List<MessagePart> uncompressedParts) {\n+    public List<MessagePart> sendMessagePart(List<MessagePart> uncompressedParts) throws IOException {\n         List<MessagePart> allCompressedParts = new ArrayList<>();\n \n         for (MessagePart uncompressedPart : uncompressedParts) {\n@@ -345,10 +351,14 @@ public boolean validateRsvBits(int i) {\n                 while (deflateRequired) {\n                     ByteBuffer compressedPayload = writeBuffer;\n \n-                    int written = deflater.deflate(compressedPayload.array(),\n-                            compressedPayload.arrayOffset() + compressedPayload.position(),\n-                            compressedPayload.remaining(), flush);\n-                    compressedPayload.position(compressedPayload.position() + written);\n+                    try {\n+                        int written = deflater.deflate(compressedPayload.array(),\n+                                compressedPayload.arrayOffset() + compressedPayload.position(),\n+                                compressedPayload.remaining(), flush);\n+                        compressedPayload.position(compressedPayload.position() + written);\n+                    } catch (NullPointerException e) {\n+                        throw new IOException(sm.getString(\"perMessageDeflate.alreadyClosed\"), e);\n+                    }\n \n                     if (!uncompressedPart.isFin() && compressedPayload.hasRemaining() && deflater.needsInput()) {\n                         // This message part has been fully processed by the\n@@ -401,7 +411,12 @@ public boolean validateRsvBits(int i) {\n                         // - in middle of EOM bytes\n                         // - about to write EOM bytes\n                         // - more data to write\n-                        int eomBufferWritten = deflater.deflate(EOM_BUFFER, 0, EOM_BUFFER.length, Deflater.SYNC_FLUSH);\n+                        int eomBufferWritten;\n+                        try {\n+                            eomBufferWritten = deflater.deflate(EOM_BUFFER, 0, EOM_BUFFER.length, Deflater.SYNC_FLUSH);\n+                        } catch (NullPointerException e) {\n+                            throw new IOException(sm.getString(\"perMessageDeflate.alreadyClosed\"), e);\n+                        }\n                         if (eomBufferWritten < EOM_BUFFER.length) {\n                             // EOM has just been completed\n                             compressedPayload.limit(compressedPayload.limit() - EOM_BYTES.length + eomBufferWritten);\n@@ -447,11 +462,15 @@ public boolean validateRsvBits(int i) {\n     }\n \n \n-    private void startNewMessage() {\n+    private void startNewMessage() throws IOException {\n         firstCompressedFrameWritten = false;\n         emptyMessage = true;\n         if (isServer && !serverContextTakeover || !isServer && !clientContextTakeover) {\n-            deflater.reset();\n+            try {\n+                deflater.reset();\n+            } catch (NullPointerException e) {\n+                throw new IOException(sm.getString(\"perMessageDeflate.alreadyClosed\"), e);\n+            }\n         }\n     }\n ",
                "changes": 37,
                "blob_url": "https://github.com/apache/tomcat/blob/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/PerMessageDeflate.java"
            },
            {
                "additions": 4,
                "sha": "14d809303fcfe2edea9cdb6106e805b8c0e51112",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/Transformation.java",
                "deletions": 1,
                "filename": "java/org/apache/tomcat/websocket/Transformation.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/Transformation.java?ref=5bf2a8504f5965410e82242667b71f54912fe766",
                "patch": "@@ -101,8 +101,11 @@\n      * @return  The list of messages after this any any subsequent\n      *          transformations have been applied. The size of the returned list\n      *          may be bigger or smaller than the size of the input list\n+     *\n+     * @throws IOException If an error occurs during the transformation of the\n+     *                     message parts\n      */\n-    List<MessagePart> sendMessagePart(List<MessagePart> messageParts);\n+    List<MessagePart> sendMessagePart(List<MessagePart> messageParts) throws IOException;\n \n     /**\n      * Clean-up any resources that were used by the transformation.",
                "changes": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/Transformation.java"
            },
            {
                "additions": 6,
                "sha": "f022132bb1de3291a8f31a68cf2a359b2af2f44f",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "deletions": 1,
                "filename": "java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java?ref=5bf2a8504f5965410e82242667b71f54912fe766",
                "patch": "@@ -338,7 +338,12 @@ void startMessage(byte opCode, ByteBuffer payload, boolean last,\n                 intermediateMessageHandler,\n                 new EndMessageHandler(this, handler), -1));\n \n-        messageParts = transformation.sendMessagePart(messageParts);\n+        try {\n+            messageParts = transformation.sendMessagePart(messageParts);\n+        } catch (IOException ioe) {\n+            handler.onResult(new SendResult(ioe));\n+            return;\n+        }\n \n         // Some extensions/transformations may buffer messages so it is possible\n         // that no message parts will be returned. If this is the case the",
                "changes": 7,
                "blob_url": "https://github.com/apache/tomcat/blob/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java"
            },
            {
                "additions": 1,
                "sha": "9139460c7402e0c02fee3a345c41e0add54e4da1",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/5bf2a8504f5965410e82242667b71f54912fe766/test/org/apache/tomcat/websocket/TestPerMessageDeflate.java",
                "deletions": 1,
                "filename": "test/org/apache/tomcat/websocket/TestPerMessageDeflate.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/tomcat/websocket/TestPerMessageDeflate.java?ref=5bf2a8504f5965410e82242667b71f54912fe766",
                "patch": "@@ -34,7 +34,7 @@\n      * https://bz.apache.org/bugzilla/show_bug.cgi?id=61491\n      */\n     @Test\n-    public void testSendEmptyMessagePartWithContextTakeover() {\n+    public void testSendEmptyMessagePartWithContextTakeover() throws IOException {\n \n         // Set up the extension using defaults\n         List<Parameter> parameters = Collections.emptyList();",
                "changes": 2,
                "blob_url": "https://github.com/apache/tomcat/blob/5bf2a8504f5965410e82242667b71f54912fe766/test/org/apache/tomcat/websocket/TestPerMessageDeflate.java"
            },
            {
                "additions": 11,
                "sha": "8a19840ab9dcbcc7970394638b9063cbeb715e4b",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/5bf2a8504f5965410e82242667b71f54912fe766/webapps/docs/changelog.xml",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=5bf2a8504f5965410e82242667b71f54912fe766",
                "patch": "@@ -157,6 +157,17 @@\n       </fix>\n     </changelog>\n   </subsection>\n+  <subsection name=\"WebSocket\">\n+    <changelog>\n+      <fix>\n+        <bug>63913</bug>: Wrap any <code>NullPointerException</code>s throw by\n+        the <code>Inflater</code> or <code>Deflater</code> used by the\n+        <code>PerMessageDeflate</code> extension in an <code>IOException</code>\n+        so that the error can be caught and handled by the WebSocket error\n+        handling mechanism. (markt)\n+      </fix>\n+    </changelog>\n+  </subsection>\n   <subsection name=\"Web applications\">\n     <changelog>\n       <fix>",
                "changes": 11,
                "blob_url": "https://github.com/apache/tomcat/blob/5bf2a8504f5965410e82242667b71f54912fe766/webapps/docs/changelog.xml"
            }
        ],
        "repo": "tomcat",
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=63913 Wrap NPEs\n\nWrap any NullPointerExceptions throw by the Inflater or Deflater used by\nthe PerMessageDeflate extension in an IOException so that the error can\nbe caught and handled by the WebSocket error handling mechanism.",
        "commit": "https://github.com/apache/tomcat/commit/5bf2a8504f5965410e82242667b71f54912fe766"
    },
    {
        "parent": "https://github.com/apache/tomcat/commit/65bf0dba83cde35bdf39629c300d5a113bcca5dd",
        "bug_id": "tomcat_4",
        "file": [
            {
                "additions": 10,
                "sha": "712a46374764e962095531148b5ebbae901fccb7",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/2f514255fc0032786de3a12fb3656c76c9c7e457/java/org/apache/catalina/webresources/CachedResource.java",
                "deletions": 0,
                "filename": "java/org/apache/catalina/webresources/CachedResource.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/webresources/CachedResource.java?ref=2f514255fc0032786de3a12fb3656c76c9c7e457",
                "patch": "@@ -26,6 +26,7 @@\n import java.net.URLStreamHandler;\n import java.security.Permission;\n import java.security.cert.Certificate;\n+import java.util.jar.JarEntry;\n import java.util.jar.JarFile;\n import java.util.jar.Manifest;\n \n@@ -557,5 +558,14 @@ private WebResource getResource() {\n         public JarFile getJarFile() throws IOException {\n             return ((JarURLConnection) resourceURL.openConnection()).getJarFile();\n         }\n+\n+        @Override\n+        public JarEntry getJarEntry() throws IOException {\n+            if (getEntryName() == null) {\n+                return null;\n+            } else {\n+                return super.getJarEntry();\n+            }\n+        }\n     }\n }",
                "changes": 10,
                "blob_url": "https://github.com/apache/tomcat/blob/2f514255fc0032786de3a12fb3656c76c9c7e457/java/org/apache/catalina/webresources/CachedResource.java"
            },
            {
                "additions": 5,
                "sha": "f69a9710e95c8f3e40225d3f83ee36e4f8d2ec41",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/2f514255fc0032786de3a12fb3656c76c9c7e457/webapps/docs/changelog.xml",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=2f514255fc0032786de3a12fb3656c76c9c7e457",
                "patch": "@@ -55,6 +55,11 @@\n         Avoid useless environment restore when not using GSSCredential\n         in JNDIRealm. (remm)\n       </fix>\n+      <fix>\n+        <bug>64005</bug>: Correct a regression in the static resource caching\n+        changes introduced in 9.0.28. Avoid a <code>NullPointerException</code>\n+        when working with the URL provided for the root of a packed WAR. (markt)\n+      </fix>\n       <fix>\n         <bug>64006</bug>: Provide default configuration source based on the\n         current directory if none has been set, for full compatibility with",
                "changes": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/2f514255fc0032786de3a12fb3656c76c9c7e457/webapps/docs/changelog.xml"
            }
        ],
        "repo": "tomcat",
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=64005 avoid NPE\n\nAvoid the NPE when working with the URL for the root of a packed WAR",
        "commit": "https://github.com/apache/tomcat/commit/2f514255fc0032786de3a12fb3656c76c9c7e457"
    },
    {
        "parent": "https://github.com/apache/tomcat/commit/c298138dc774ec1844c929413f11e08855e17c87",
        "bug_id": "tomcat_5",
        "file": [
            {
                "additions": 4,
                "sha": "24fd9e97e88a133936f3493d4800b2f6bcd59baa",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/3d73dfc42e13a5d0eeb4c0e50009cdb67e1ab7dd/java/org/apache/coyote/http11/Http11Processor.java",
                "deletions": 1,
                "filename": "java/org/apache/coyote/http11/Http11Processor.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/Http11Processor.java?ref=3d73dfc42e13a5d0eeb4c0e50009cdb67e1ab7dd",
                "patch": "@@ -995,7 +995,10 @@ private static boolean isConnectionToken(MimeHeaders headers, String token) thro\n         Enumeration<String> values = headers.values(Constants.CONNECTION);\n         Set<String> result = new HashSet<>();\n         while (values.hasMoreElements()) {\n-            TokenList.parseTokenList(new StringReader(values.nextElement()), result);\n+            String nextHeaderValue = values.nextElement();\n+            if (nextHeaderValue != null) {\n+                TokenList.parseTokenList(new StringReader(nextHeaderValue), result);\n+            }\n         }\n \n         return result.contains(token);",
                "changes": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/3d73dfc42e13a5d0eeb4c0e50009cdb67e1ab7dd/java/org/apache/coyote/http11/Http11Processor.java"
            }
        ],
        "repo": "tomcat",
        "message": "Fix possible NPE with excessive header size",
        "commit": "https://github.com/apache/tomcat/commit/3d73dfc42e13a5d0eeb4c0e50009cdb67e1ab7dd"
    },
    {
        "parent": "https://github.com/apache/tomcat/commit/2fb245b844fc9fefaa5e0c8002a481a72c502963",
        "bug_id": "tomcat_6",
        "file": [
            {
                "additions": 6,
                "sha": "d6a902770e139489b401abaf65096b5946684978",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/ae08febd4d053d38df876b039d4b632a79465510/java/javax/el/StaticFieldELResolver.java",
                "deletions": 4,
                "filename": "java/javax/el/StaticFieldELResolver.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/javax/el/StaticFieldELResolver.java?ref=ae08febd4d053d38df876b039d4b632a79465510",
                "patch": "@@ -113,11 +113,13 @@ public Object invoke(ELContext context, Object base, Object method,\n                 return result;\n \n             } else {\n-                Method match =\n-                        Util.findMethod(clazz, base, methodName, paramTypes, params);\n+                // Static method so base should be null\n+                Method match = Util.findMethod(clazz, null, methodName, paramTypes, params);\n \n-                int modifiers = match.getModifiers();\n-                if (!Modifier.isStatic(modifiers)) {\n+                // Note: On Java 9 and above, the isStatic check becomes\n+                // unnecessary because the canAccess() call in Util.findMethod()\n+                // effectively performs the same check\n+                if (match == null || !Modifier.isStatic(match.getModifiers())) {\n                     throw new MethodNotFoundException(Util.message(context,\n                             \"staticFieldELResolver.methodNotFound\", methodName,\n                             clazz.getName()));",
                "changes": 10,
                "blob_url": "https://github.com/apache/tomcat/blob/ae08febd4d053d38df876b039d4b632a79465510/java/javax/el/StaticFieldELResolver.java"
            },
            {
                "additions": 5,
                "sha": "2e06837233b0efd09bb25f33cccc769e96df6092",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/ae08febd4d053d38df876b039d4b632a79465510/java/javax/el/Util.java",
                "deletions": 1,
                "filename": "java/javax/el/Util.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/javax/el/Util.java?ref=ae08febd4d053d38df876b039d4b632a79465510",
                "patch": "@@ -541,7 +541,11 @@ private static boolean isCoercibleFrom(Object src, Class<?> target) {\n      */\n     static Method getMethod(Class<?> type, Object base, Method m) {\n         JreCompat jreCompat = JreCompat.getInstance();\n-        if (m == null || (Modifier.isPublic(type.getModifiers()) && jreCompat.canAcccess(base, m))) {\n+        // If base is null, method MUST be static\n+        // If base is non-null, method may be static or non-static\n+        if (m == null ||\n+                (Modifier.isPublic(type.getModifiers()) &&\n+                        (jreCompat.canAcccess(base, m) || base != null && jreCompat.canAcccess(null, m)))) {\n             return m;\n         }\n         Class<?>[] inf = type.getInterfaces();",
                "changes": 6,
                "blob_url": "https://github.com/apache/tomcat/blob/ae08febd4d053d38df876b039d4b632a79465510/java/javax/el/Util.java"
            },
            {
                "additions": 5,
                "sha": "c9f1f2e285eef363bbd159f4513f3bb809e4a767",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/ae08febd4d053d38df876b039d4b632a79465510/java/org/apache/el/util/ReflectionUtil.java",
                "deletions": 1,
                "filename": "java/org/apache/el/util/ReflectionUtil.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/el/util/ReflectionUtil.java?ref=ae08febd4d053d38df876b039d4b632a79465510",
                "patch": "@@ -424,7 +424,11 @@ private static boolean isCoercibleFrom(EvaluationContext ctx, Object src, Class<\n      */\n     private static Method getMethod(Class<?> type, Object base, Method m) {\n         JreCompat jreCompat = JreCompat.getInstance();\n-        if (m == null || (Modifier.isPublic(type.getModifiers()) && jreCompat.canAcccess(base, m))) {\n+        // If base is null, method MUST be static\n+        // If base is non-null, method may be static or non-static\n+        if (m == null ||\n+                (Modifier.isPublic(type.getModifiers()) &&\n+                        (jreCompat.canAcccess(base, m) || base != null && jreCompat.canAcccess(null, m)))) {\n             return m;\n         }\n         Class<?>[] inf = type.getInterfaces();",
                "changes": 6,
                "blob_url": "https://github.com/apache/tomcat/blob/ae08febd4d053d38df876b039d4b632a79465510/java/org/apache/el/util/ReflectionUtil.java"
            }
        ],
        "repo": "tomcat",
        "message": "Fix NPEs when looking for static methods",
        "commit": "https://github.com/apache/tomcat/commit/ae08febd4d053d38df876b039d4b632a79465510"
    },
    {
        "parent": "https://github.com/apache/tomcat/commit/083cd5ac2dc18ca94aceb83c6c28715febc0831c",
        "bug_id": "tomcat_7",
        "file": [
            {
                "additions": 6,
                "sha": "88c17cccd35f1c50314ec5f3de1f72100459c2db",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/a47066f28d778aca8b04e5e1ebf2f92c57cf8d0b/java/org/apache/tomcat/util/net/Nio2Endpoint.java",
                "deletions": 4,
                "filename": "java/org/apache/tomcat/util/net/Nio2Endpoint.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/Nio2Endpoint.java?ref=a47066f28d778aca8b04e5e1ebf2f92c57cf8d0b",
                "patch": "@@ -1578,11 +1578,13 @@ protected void populateLocalPort() {\n         public SSLSupport getSslSupport(String clientCertProvider) {\n             if (getSocket() instanceof SecureNio2Channel) {\n                 SecureNio2Channel ch = (SecureNio2Channel) getSocket();\n-                SSLSession session = ch.getSslEngine().getSession();\n-                return ((Nio2Endpoint) getEndpoint()).getSslImplementation().getSSLSupport(session);\n-            } else {\n-                return null;\n+                SSLEngine sslEngine = ch.getSslEngine();\n+                if (sslEngine != null) {\n+                    SSLSession session = sslEngine.getSession();\n+                    return ((Nio2Endpoint) getEndpoint()).getSslImplementation().getSSLSupport(session);\n+                }\n             }\n+            return null;\n         }\n \n ",
                "changes": 10,
                "blob_url": "https://github.com/apache/tomcat/blob/a47066f28d778aca8b04e5e1ebf2f92c57cf8d0b/java/org/apache/tomcat/util/net/Nio2Endpoint.java"
            },
            {
                "additions": 6,
                "sha": "78a74f002f1673bd15422c810dd2ed5840b1ad3f",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/a47066f28d778aca8b04e5e1ebf2f92c57cf8d0b/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "deletions": 4,
                "filename": "java/org/apache/tomcat/util/net/NioEndpoint.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/NioEndpoint.java?ref=a47066f28d778aca8b04e5e1ebf2f92c57cf8d0b",
                "patch": "@@ -1389,11 +1389,13 @@ protected void populateLocalPort() {\n         public SSLSupport getSslSupport(String clientCertProvider) {\n             if (getSocket() instanceof SecureNioChannel) {\n                 SecureNioChannel ch = (SecureNioChannel) getSocket();\n-                SSLSession session = ch.getSslEngine().getSession();\n-                return ((NioEndpoint) getEndpoint()).getSslImplementation().getSSLSupport(session);\n-            } else {\n-                return null;\n+                SSLEngine sslEngine = ch.getSslEngine();\n+                if (sslEngine != null) {\n+                    SSLSession session = sslEngine.getSession();\n+                    return ((NioEndpoint) getEndpoint()).getSslImplementation().getSSLSupport(session);\n+                }\n             }\n+            return null;\n         }\n \n ",
                "changes": 10,
                "blob_url": "https://github.com/apache/tomcat/blob/a47066f28d778aca8b04e5e1ebf2f92c57cf8d0b/java/org/apache/tomcat/util/net/NioEndpoint.java"
            },
            {
                "additions": 7,
                "sha": "18277caed9760ee4b07361c7d6d21bfcfd2f4850",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/a47066f28d778aca8b04e5e1ebf2f92c57cf8d0b/webapps/docs/changelog.xml",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=a47066f28d778aca8b04e5e1ebf2f92c57cf8d0b",
                "patch": "@@ -58,6 +58,13 @@\n       </fix>\n     </changelog>\n   </subsection>\n+  <subsection name=\"Coyote\">\n+    <changelog>\n+      <fix>\n+        <bug>63706</bug>: Avoid NPE accessing https port with plaintext. (remm)\n+      </fix>\n+    </changelog>\n+  </subsection>\n   <subsection name=\"Web applications\">\n     <changelog>\n       <fix>",
                "changes": 7,
                "blob_url": "https://github.com/apache/tomcat/blob/a47066f28d778aca8b04e5e1ebf2f92c57cf8d0b/webapps/docs/changelog.xml"
            }
        ],
        "repo": "tomcat",
        "message": "63706: Avoid NPE accessing https port with plaintext",
        "commit": "https://github.com/apache/tomcat/commit/a47066f28d778aca8b04e5e1ebf2f92c57cf8d0b"
    },
    {
        "parent": "https://github.com/apache/tomcat/commit/bee2dbb19986dbc060de30c31c3956ee31b04a01",
        "bug_id": "tomcat_8",
        "file": [
            {
                "additions": 5,
                "sha": "0cacd3feaffb0680c0bb7d501e230380b0fd57b2",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/e469527d8da572b0483b485d7ed8cd1b998497ba/java/org/apache/catalina/core/NamingContextListener.java",
                "deletions": 1,
                "filename": "java/org/apache/catalina/core/NamingContextListener.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/NamingContextListener.java?ref=e469527d8da572b0483b485d7ed8cd1b998497ba",
                "patch": "@@ -1102,7 +1102,11 @@ public void addResourceLink(ContextResourceLink resourceLink) {\n     private javax.naming.Context getGlobalNamingContext() {\n         if (container instanceof Context) {\n             Engine e = (Engine) ((Context) container).getParent().getParent();\n-            return e.getService().getServer().getGlobalNamingContext();\n+            Server s = e.getService().getServer();\n+            // When the Service is an embedded Service, there is no Server\n+            if (s != null) {\n+                return s.getGlobalNamingContext();\n+            }\n         }\n         return null;\n     }",
                "changes": 6,
                "blob_url": "https://github.com/apache/tomcat/blob/e469527d8da572b0483b485d7ed8cd1b998497ba/java/org/apache/catalina/core/NamingContextListener.java"
            },
            {
                "additions": 5,
                "sha": "3b19889069a23fffa49c782e2feed957da5af6fb",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/e469527d8da572b0483b485d7ed8cd1b998497ba/webapps/docs/changelog.xml",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=e469527d8da572b0483b485d7ed8cd1b998497ba",
                "patch": "@@ -61,6 +61,11 @@\n         <code>Host</code> is configured with an <code>xmlBase</code>. Patch\n         provided by uk4sx. (markt)\n       </fix>\n+      <fix>\n+        Avoid a potential <code>NullPointerException</code> on Service stop if a\n+        Service is embedded directly (i.e. with no Server) in an applciation\n+        and JNDI is enabled. Patch provided by S. Ali Tokmen. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "changes": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/e469527d8da572b0483b485d7ed8cd1b998497ba/webapps/docs/changelog.xml"
            }
        ],
        "repo": "tomcat",
        "message": "Fix potential NPE in some embedding scenarios.\n\nWhen embedding a Service directly and JNDI is enabled there is no Server",
        "commit": "https://github.com/apache/tomcat/commit/e469527d8da572b0483b485d7ed8cd1b998497ba"
    },
    {
        "parent": "https://github.com/apache/tomcat/commit/b228431569ee9ab6d1269b9ff59e5ada2186abb9",
        "bug_id": "tomcat_9",
        "file": [
            {
                "additions": 3,
                "sha": "5c3893cc50f815ca7534acaf34a17534cd676996",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/e6eb0f38c5c2137b212d7182bfb9926c656b59f3/java/org/apache/catalina/tribes/jmx/JmxRegistry.java",
                "deletions": 0,
                "filename": "java/org/apache/catalina/tribes/jmx/JmxRegistry.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/tribes/jmx/JmxRegistry.java?ref=e6eb0f38c5c2137b212d7182bfb9926c656b59f3",
                "patch": "@@ -96,6 +96,9 @@ private static ObjectName createBaseObjectName(String domain, String prefix, Str\n     }\n \n     public ObjectName registerJmx(String keyprop, Object bean) {\n+        if (mbserver == null) {\n+            return null;\n+        }\n         String oNameStr = baseOname.toString() + keyprop;\n         ObjectName oName = null;\n         try {",
                "changes": 3,
                "blob_url": "https://github.com/apache/tomcat/blob/e6eb0f38c5c2137b212d7182bfb9926c656b59f3/java/org/apache/catalina/tribes/jmx/JmxRegistry.java"
            },
            {
                "additions": 3,
                "sha": "a322c061e45ac05cf52816e1283ad3c72a5bad50",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/e6eb0f38c5c2137b212d7182bfb9926c656b59f3/webapps/docs/changelog.xml",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=e6eb0f38c5c2137b212d7182bfb9926c656b59f3",
                "patch": "@@ -70,6 +70,9 @@\n         membership. The namespace is still a failure on startup but it is easy\n         to provide. (remm)\n       </fix>\n+      <fix>\n+        Avoid non fatal NPEs with Tribes when JMX is not available. (remm)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Other\">",
                "changes": 3,
                "blob_url": "https://github.com/apache/tomcat/blob/e6eb0f38c5c2137b212d7182bfb9926c656b59f3/webapps/docs/changelog.xml"
            }
        ],
        "repo": "tomcat",
        "message": "Avoid non fatal NPEs with Tribes when JMX is not available",
        "commit": "https://github.com/apache/tomcat/commit/e6eb0f38c5c2137b212d7182bfb9926c656b59f3"
    },
    {
        "parent": "https://github.com/apache/tomcat/commit/c01cfa33f583e8dba232b8f66f26ccef007df566",
        "bug_id": "tomcat_10",
        "file": [
            {
                "additions": 68,
                "sha": "66f9e20d4ff7686eb24e8b958660c8aabd01dfcd",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/b7384c2f3444a31d5bdd97ad985c9a952d906220/java/org/apache/tomcat/util/net/Nio2Endpoint.java",
                "deletions": 50,
                "filename": "java/org/apache/tomcat/util/net/Nio2Endpoint.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/Nio2Endpoint.java?ref=b7384c2f3444a31d5bdd97ad985c9a952d906220",
                "patch": "@@ -1467,87 +1467,105 @@ public SendfileState processSendfile(SendfileDataBase sendfileData) {\n \n         @Override\n         protected void populateRemoteAddr() {\n-            SocketAddress socketAddress = null;\n-            try {\n-                socketAddress = getSocket().getIOChannel().getRemoteAddress();\n-            } catch (IOException e) {\n-                // Ignore\n-            }\n-            if (socketAddress instanceof InetSocketAddress) {\n-                remoteAddr = ((InetSocketAddress) socketAddress).getAddress().getHostAddress();\n+            AsynchronousSocketChannel sc = getSocket().getIOChannel();\n+            if (sc != null) {\n+                SocketAddress socketAddress = null;\n+                try {\n+                    socketAddress = sc.getRemoteAddress();\n+                } catch (IOException e) {\n+                    // Ignore\n+                }\n+                if (socketAddress instanceof InetSocketAddress) {\n+                    remoteAddr = ((InetSocketAddress) socketAddress).getAddress().getHostAddress();\n+                }\n             }\n         }\n \n \n         @Override\n         protected void populateRemoteHost() {\n-            SocketAddress socketAddress = null;\n-            try {\n-                socketAddress = getSocket().getIOChannel().getRemoteAddress();\n-            } catch (IOException e) {\n-                log.warn(sm.getString(\"endpoint.warn.noRemoteHost\", getSocket()), e);\n-            }\n-            if (socketAddress instanceof InetSocketAddress) {\n-                remoteHost = ((InetSocketAddress) socketAddress).getAddress().getHostName();\n-                if (remoteAddr == null) {\n-                    remoteAddr = ((InetSocketAddress) socketAddress).getAddress().getHostAddress();\n+            AsynchronousSocketChannel sc = getSocket().getIOChannel();\n+            if (sc != null) {\n+                SocketAddress socketAddress = null;\n+                try {\n+                    socketAddress = sc.getRemoteAddress();\n+                } catch (IOException e) {\n+                    log.warn(sm.getString(\"endpoint.warn.noRemoteHost\", getSocket()), e);\n+                }\n+                if (socketAddress instanceof InetSocketAddress) {\n+                    remoteHost = ((InetSocketAddress) socketAddress).getAddress().getHostName();\n+                    if (remoteAddr == null) {\n+                        remoteAddr = ((InetSocketAddress) socketAddress).getAddress().getHostAddress();\n+                    }\n                 }\n             }\n         }\n \n \n         @Override\n         protected void populateRemotePort() {\n-            SocketAddress socketAddress = null;\n-            try {\n-                socketAddress = getSocket().getIOChannel().getRemoteAddress();\n-            } catch (IOException e) {\n-                log.warn(sm.getString(\"endpoint.warn.noRemotePort\", getSocket()), e);\n-            }\n-            if (socketAddress instanceof InetSocketAddress) {\n-                remotePort = ((InetSocketAddress) socketAddress).getPort();\n+            AsynchronousSocketChannel sc = getSocket().getIOChannel();\n+            if (sc != null) {\n+                SocketAddress socketAddress = null;\n+                try {\n+                    socketAddress = sc.getRemoteAddress();\n+                } catch (IOException e) {\n+                    log.warn(sm.getString(\"endpoint.warn.noRemotePort\", getSocket()), e);\n+                }\n+                if (socketAddress instanceof InetSocketAddress) {\n+                    remotePort = ((InetSocketAddress) socketAddress).getPort();\n+                }\n             }\n         }\n \n \n         @Override\n         protected void populateLocalName() {\n-            SocketAddress socketAddress = null;\n-            try {\n-                socketAddress = getSocket().getIOChannel().getLocalAddress();\n-            } catch (IOException e) {\n-                log.warn(sm.getString(\"endpoint.warn.noLocalName\", getSocket()), e);\n-            }\n-            if (socketAddress instanceof InetSocketAddress) {\n-                localName = ((InetSocketAddress) socketAddress).getHostName();\n+            AsynchronousSocketChannel sc = getSocket().getIOChannel();\n+            if (sc != null) {\n+                SocketAddress socketAddress = null;\n+                try {\n+                    socketAddress = sc.getLocalAddress();\n+                } catch (IOException e) {\n+                    log.warn(sm.getString(\"endpoint.warn.noLocalName\", getSocket()), e);\n+                }\n+                if (socketAddress instanceof InetSocketAddress) {\n+                    localName = ((InetSocketAddress) socketAddress).getHostName();\n+                }\n             }\n         }\n \n \n         @Override\n         protected void populateLocalAddr() {\n-            SocketAddress socketAddress = null;\n-            try {\n-                socketAddress = getSocket().getIOChannel().getLocalAddress();\n-            } catch (IOException e) {\n-                log.warn(sm.getString(\"endpoint.warn.noLocalAddr\", getSocket()), e);\n-            }\n-            if (socketAddress instanceof InetSocketAddress) {\n-                localAddr = ((InetSocketAddress) socketAddress).getAddress().getHostAddress();\n+            AsynchronousSocketChannel sc = getSocket().getIOChannel();\n+            if (sc != null) {\n+                SocketAddress socketAddress = null;\n+                try {\n+                    socketAddress = sc.getLocalAddress();\n+                } catch (IOException e) {\n+                    log.warn(sm.getString(\"endpoint.warn.noLocalAddr\", getSocket()), e);\n+                }\n+                if (socketAddress instanceof InetSocketAddress) {\n+                    localAddr = ((InetSocketAddress) socketAddress).getAddress().getHostAddress();\n+                }\n             }\n         }\n \n \n         @Override\n         protected void populateLocalPort() {\n-            SocketAddress socketAddress = null;\n-            try {\n-                socketAddress = getSocket().getIOChannel().getLocalAddress();\n-            } catch (IOException e) {\n-                log.warn(sm.getString(\"endpoint.warn.noLocalPort\", getSocket()), e);\n-            }\n-            if (socketAddress instanceof InetSocketAddress) {\n-                localPort = ((InetSocketAddress) socketAddress).getPort();\n+            AsynchronousSocketChannel sc = getSocket().getIOChannel();\n+            if (sc != null) {\n+                SocketAddress socketAddress = null;\n+                try {\n+                    socketAddress = sc.getLocalAddress();\n+                } catch (IOException e) {\n+                    log.warn(sm.getString(\"endpoint.warn.noLocalPort\", getSocket()), e);\n+                }\n+                if (socketAddress instanceof InetSocketAddress) {\n+                    localPort = ((InetSocketAddress) socketAddress).getPort();\n+                }\n             }\n         }\n ",
                "changes": 118,
                "blob_url": "https://github.com/apache/tomcat/blob/b7384c2f3444a31d5bdd97ad985c9a952d906220/java/org/apache/tomcat/util/net/Nio2Endpoint.java"
            }
        ],
        "repo": "tomcat",
        "message": "Port NPE prevention fix from NIO",
        "commit": "https://github.com/apache/tomcat/commit/b7384c2f3444a31d5bdd97ad985c9a952d906220"
    },
    {
        "parent": "https://github.com/apache/tomcat/commit/1fa57f587e9154f2a69d806274c815abf5739360",
        "bug_id": "tomcat_11",
        "file": [
            {
                "additions": 34,
                "sha": "d41898d3f3c9f11cbf18a05647e6d73426d99df0",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/65fb1ee548111021edde247f3b3c409ec95a5183/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "deletions": 16,
                "filename": "java/org/apache/tomcat/util/net/NioEndpoint.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/NioEndpoint.java?ref=65fb1ee548111021edde247f3b3c409ec95a5183",
                "patch": "@@ -1314,52 +1314,70 @@ public SendfileState processSendfile(SendfileDataBase sendfileData) {\n \n         @Override\n         protected void populateRemoteAddr() {\n-            InetAddress inetAddr = getSocket().getIOChannel().socket().getInetAddress();\n-            if (inetAddr != null) {\n-                remoteAddr = inetAddr.getHostAddress();\n+            SocketChannel sc = getSocket().getIOChannel();\n+            if (sc != null) {\n+                InetAddress inetAddr = sc.socket().getInetAddress();\n+                if (inetAddr != null) {\n+                    remoteAddr = inetAddr.getHostAddress();\n+                }\n             }\n         }\n \n \n         @Override\n         protected void populateRemoteHost() {\n-            InetAddress inetAddr = getSocket().getIOChannel().socket().getInetAddress();\n-            if (inetAddr != null) {\n-                remoteHost = inetAddr.getHostName();\n-                if (remoteAddr == null) {\n-                    remoteAddr = inetAddr.getHostAddress();\n+            SocketChannel sc = getSocket().getIOChannel();\n+            if (sc != null) {\n+                InetAddress inetAddr = sc.socket().getInetAddress();\n+                if (inetAddr != null) {\n+                    remoteHost = inetAddr.getHostName();\n+                    if (remoteAddr == null) {\n+                        remoteAddr = inetAddr.getHostAddress();\n+                    }\n                 }\n             }\n         }\n \n \n         @Override\n         protected void populateRemotePort() {\n-            remotePort = getSocket().getIOChannel().socket().getPort();\n+            SocketChannel sc = getSocket().getIOChannel();\n+            if (sc != null) {\n+                remotePort = sc.socket().getPort();\n+            }\n         }\n \n \n         @Override\n         protected void populateLocalName() {\n-            InetAddress inetAddr = getSocket().getIOChannel().socket().getLocalAddress();\n-            if (inetAddr != null) {\n-                localName = inetAddr.getHostName();\n+            SocketChannel sc = getSocket().getIOChannel();\n+            if (sc != null) {\n+                InetAddress inetAddr = sc.socket().getInetAddress();\n+                if (inetAddr != null) {\n+                    localName = inetAddr.getHostName();\n+                }\n             }\n         }\n \n \n         @Override\n         protected void populateLocalAddr() {\n-            InetAddress inetAddr = getSocket().getIOChannel().socket().getLocalAddress();\n-            if (inetAddr != null) {\n-                localAddr = inetAddr.getHostAddress();\n+            SocketChannel sc = getSocket().getIOChannel();\n+            if (sc != null) {\n+                InetAddress inetAddr = sc.socket().getInetAddress();\n+                if (inetAddr != null) {\n+                    localAddr = inetAddr.getHostAddress();\n+                }\n             }\n         }\n \n \n         @Override\n         protected void populateLocalPort() {\n-            localPort = getSocket().getIOChannel().socket().getLocalPort();\n+            SocketChannel sc = getSocket().getIOChannel();\n+            if (sc != null) {\n+                localPort = sc.socket().getLocalPort();\n+            }\n         }\n \n ",
                "changes": 50,
                "blob_url": "https://github.com/apache/tomcat/blob/65fb1ee548111021edde247f3b3c409ec95a5183/java/org/apache/tomcat/util/net/NioEndpoint.java"
            }
        ],
        "repo": "tomcat",
        "message": "NPE protection primarily for access log",
        "commit": "https://github.com/apache/tomcat/commit/65fb1ee548111021edde247f3b3c409ec95a5183"
    },
    {
        "parent": "https://github.com/apache/tomcat/commit/e9e9b2201069f8b0857c541018a7aa81a9cebe52",
        "bug_id": "tomcat_12",
        "file": [
            {
                "additions": 4,
                "sha": "62d5223226d84bf4e9d3f478372d2476a603bcc3",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/659b28c00d94e2a9049e0a8ac1e02bd4d36dd005/java/org/apache/coyote/http11/Http11OutputBuffer.java",
                "deletions": 1,
                "filename": "java/org/apache/coyote/http11/Http11OutputBuffer.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/Http11OutputBuffer.java?ref=659b28c00d94e2a9049e0a8ac1e02bd4d36dd005",
                "patch": "@@ -303,7 +303,10 @@ protected void commit() throws IOException {\n             // Sending the response header buffer\n             headerBuffer.flip();\n             try {\n-                socketWrapper.write(isBlocking(), headerBuffer);\n+                SocketWrapperBase<?> socketWrapper = this.socketWrapper;\n+                if (socketWrapper != null) {\n+                    socketWrapper.write(isBlocking(), headerBuffer);\n+                }\n             } finally {\n                 headerBuffer.position(0).limit(headerBuffer.capacity());\n             }",
                "changes": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/659b28c00d94e2a9049e0a8ac1e02bd4d36dd005/java/org/apache/coyote/http11/Http11OutputBuffer.java"
            },
            {
                "additions": 4,
                "sha": "a11513764d9fc054e0c1c2ee2ed08e97b446d446",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/659b28c00d94e2a9049e0a8ac1e02bd4d36dd005/webapps/docs/changelog.xml",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=659b28c00d94e2a9049e0a8ac1e02bd4d36dd005",
                "patch": "@@ -75,6 +75,10 @@\n         was the only other sensible value, but without and impact beyond\n         certain microbenchmarks. (remm)\n       </fix>\n+      <fix>\n+        Avoid possible NPE in <code>Http11OutputBuffer.commit</code> on\n+        connector stopclose. (remm)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Other\">",
                "changes": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/659b28c00d94e2a9049e0a8ac1e02bd4d36dd005/webapps/docs/changelog.xml"
            }
        ],
        "repo": "tomcat",
        "message": "Avoid possible NPE on commit",
        "commit": "https://github.com/apache/tomcat/commit/659b28c00d94e2a9049e0a8ac1e02bd4d36dd005"
    },
    {
        "parent": "https://github.com/apache/tomcat/commit/7a471d3238bc771d17f23ac07c84a4147253b458",
        "bug_id": "tomcat_13",
        "file": [
            {
                "additions": 1,
                "sha": "407414e19e8e92b4660928aa2514d8bfe2e14c91",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/1488552190f3272ab1c57baa4ed34e3e1f84e6c9/java/org/apache/catalina/realm/JAASCallbackHandler.java",
                "deletions": 1,
                "filename": "java/org/apache/catalina/realm/JAASCallbackHandler.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/realm/JAASCallbackHandler.java?ref=1488552190f3272ab1c57baa4ed34e3e1f84e6c9",
                "patch": "@@ -90,7 +90,7 @@ public JAASCallbackHandler(JAASRealm realm, String username,\n         this.realm = realm;\n         this.username = username;\n \n-        if (realm.hasMessageDigest()) {\n+        if (password != null && realm.hasMessageDigest()) {\n             this.password = realm.getCredentialHandler().mutate(password);\n         }\n         else {",
                "changes": 2,
                "blob_url": "https://github.com/apache/tomcat/blob/1488552190f3272ab1c57baa4ed34e3e1f84e6c9/java/org/apache/catalina/realm/JAASCallbackHandler.java"
            }
        ],
        "repo": "tomcat",
        "message": "Avoid possible NPE reported by Coverity scan",
        "commit": "https://github.com/apache/tomcat/commit/1488552190f3272ab1c57baa4ed34e3e1f84e6c9"
    },
    {
        "parent": "https://github.com/apache/tomcat/commit/21ee1c0b33aed7908a7aa5f415ff8775cfd92119",
        "bug_id": "tomcat_14",
        "file": [
            {
                "additions": 4,
                "sha": "de572e603b467544c2ff0c13aa807ad05d3948df",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/0483c93ddd4ab0ac7742e154d1e1e1b3c4475f6c/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "deletions": 2,
                "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/CoyoteAdapter.java?ref=0483c93ddd4ab0ac7742e154d1e1e1b3c4475f6c",
                "patch": "@@ -816,7 +816,7 @@ protected boolean postParseRequest(org.apache.coyote.Request req, Request reques\n             if (wrapper != null) {\n                 String[] methods = wrapper.getServletMethods();\n                 if (methods != null) {\n-                    for (int i=0; i<methods.length; i++) {\n+                    for (int i=0; i < methods.length; i++) {\n                         if (\"TRACE\".equals(methods[i])) {\n                             continue;\n                         }\n@@ -828,7 +828,9 @@ protected boolean postParseRequest(org.apache.coyote.Request req, Request reques\n                     }\n                 }\n             }\n-            res.addHeader(\"Allow\", header);\n+            if (header != null) {\n+                res.addHeader(\"Allow\", header);\n+            }\n             response.sendError(405, \"TRACE method is not allowed\");\n             // Safe to skip the remainder of this method.\n             return true;",
                "changes": 6,
                "blob_url": "https://github.com/apache/tomcat/blob/0483c93ddd4ab0ac7742e154d1e1e1b3c4475f6c/java/org/apache/catalina/connector/CoyoteAdapter.java"
            },
            {
                "additions": 4,
                "sha": "24cc2b067a9b35bae5ecde3eeb191a26209bb0b8",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/0483c93ddd4ab0ac7742e154d1e1e1b3c4475f6c/webapps/docs/changelog.xml",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=0483c93ddd4ab0ac7742e154d1e1e1b3c4475f6c",
                "patch": "@@ -72,6 +72,10 @@\n         Ensure that the default servlet reads the entire global XSLT file if\n         one is defined. Identified by Coverity Scan. (markt)\n       </fix>\n+      <fix>\n+        Avoid potential <code>NullPointerException</code> when generating an\n+        HTTP <code>Allow</code> header. Identified by Coverity Scan. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "changes": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/0483c93ddd4ab0ac7742e154d1e1e1b3c4475f6c/webapps/docs/changelog.xml"
            }
        ],
        "repo": "tomcat",
        "message": "Fix rare potential NPE identified by Coverity Scan.",
        "commit": "https://github.com/apache/tomcat/commit/0483c93ddd4ab0ac7742e154d1e1e1b3c4475f6c"
    },
    {
        "parent": "https://github.com/apache/tomcat/commit/a1cb1ac77e3a8fec1b00eb0e944842555da14f7d",
        "bug_id": "tomcat_15",
        "file": [
            {
                "additions": 8,
                "sha": "46216449add1b563f59b51247f143ed8b888bf60",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/eb2db582dd7cc0e1d3deb271bc19c6236db8a6ba/java/org/apache/catalina/core/AsyncContextImpl.java",
                "deletions": 3,
                "filename": "java/org/apache/catalina/core/AsyncContextImpl.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/AsyncContextImpl.java?ref=eb2db582dd7cc0e1d3deb271bc19c6236db8a6ba",
                "patch": "@@ -176,7 +176,7 @@ public void dispatch(String path) {\n     }\n \n     @Override\n-    public void dispatch(ServletContext context, String path) {\n+    public void dispatch(ServletContext servletContext, String path) {\n         synchronized (asyncContextLock) {\n             if (log.isDebugEnabled()) {\n                 logDebug(\"dispatch   \");\n@@ -193,7 +193,7 @@ public void dispatch(ServletContext context, String path) {\n                 request.setAttribute(ASYNC_PATH_INFO, request.getPathInfo());\n                 request.setAttribute(ASYNC_QUERY_STRING, request.getQueryString());\n             }\n-            final RequestDispatcher requestDispatcher = context.getRequestDispatcher(path);\n+            final RequestDispatcher requestDispatcher = servletContext.getRequestDispatcher(path);\n             if (!(requestDispatcher instanceof AsyncDispatcher)) {\n                 throw new UnsupportedOperationException(\n                         sm.getString(\"asyncContextImpl.noAsyncDispatcher\"));\n@@ -202,11 +202,16 @@ public void dispatch(ServletContext context, String path) {\n                     (AsyncDispatcher) requestDispatcher;\n             final ServletRequest servletRequest = getRequest();\n             final ServletResponse servletResponse = getResponse();\n+            // https://bz.apache.org/bugzilla/show_bug.cgi?id=63246\n+            // Take a local copy as the dispatch may complete the\n+            // request/response and that in turn may trigger recycling of this\n+            // object before the in-progress count can be decremented\n+            final Context context = this.context;\n             this.dispatch = new AsyncRunnable(\n                     request, applicationDispatcher, servletRequest, servletResponse);\n             this.request.getCoyoteRequest().action(ActionCode.ASYNC_DISPATCH, null);\n             clearServletRequestResponse();\n-            this.context.decrementInProgressAsyncCount();\n+            context.decrementInProgressAsyncCount();\n         }\n     }\n ",
                "changes": 11,
                "blob_url": "https://github.com/apache/tomcat/blob/eb2db582dd7cc0e1d3deb271bc19c6236db8a6ba/java/org/apache/catalina/core/AsyncContextImpl.java"
            },
            {
                "additions": 4,
                "sha": "cc21008244ac457d7d4bc56e957f15c3d02c5b2b",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/eb2db582dd7cc0e1d3deb271bc19c6236db8a6ba/webapps/docs/changelog.xml",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=eb2db582dd7cc0e1d3deb271bc19c6236db8a6ba",
                "patch": "@@ -88,6 +88,10 @@\n         thanks to YourKit Java profiler for helping to track down the wasted\n         memory and the root causes. (markt)\n       </fix>\n+      <fix>\n+        <bug>63246</bug>: Fix a potential <code>NullPointerException</code> when\n+        calling <code>AsyncContext.dispatch()</code>. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "changes": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/eb2db582dd7cc0e1d3deb271bc19c6236db8a6ba/webapps/docs/changelog.xml"
            }
        ],
        "repo": "tomcat",
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=63246\n\nFix a potential NullPointerException when calling\nAsyncContext.dispatch()",
        "commit": "https://github.com/apache/tomcat/commit/eb2db582dd7cc0e1d3deb271bc19c6236db8a6ba"
    },
    {
        "parent": "https://github.com/apache/tomcat/commit/82960cc64160419765335c238a8f596c3986b386",
        "bug_id": "tomcat_16",
        "file": [
            {
                "additions": 12,
                "sha": "2f561d53bde5ca93c33ccdf3b683041f6a722757",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/9480788ead029add98c146b44cb7484da619ee9d/java/org/apache/catalina/core/StandardHost.java",
                "deletions": 2,
                "filename": "java/org/apache/catalina/core/StandardHost.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/StandardHost.java?ref=9480788ead029add98c146b44cb7484da619ee9d",
                "patch": "@@ -41,6 +41,7 @@\n import org.apache.catalina.LifecycleListener;\n import org.apache.catalina.Valve;\n import org.apache.catalina.loader.WebappClassLoaderBase;\n+import org.apache.catalina.util.ContextName;\n import org.apache.juli.logging.Log;\n import org.apache.juli.logging.LogFactory;\n import org.apache.tomcat.util.ExceptionUtils;\n@@ -687,11 +688,20 @@ public void addAlias(String alias) {\n     @Override\n     public void addChild(Container child) {\n \n-        child.addLifecycleListener(new MemoryLeakTrackingListener());\n-\n         if (!(child instanceof Context))\n             throw new IllegalArgumentException\n                 (sm.getString(\"standardHost.notContext\"));\n+\n+        child.addLifecycleListener(new MemoryLeakTrackingListener());\n+\n+        // Avoid NPE for case where Context is defined in server.xml with only a\n+        // docBase\n+        Context context = (Context) child;\n+        if (context.getPath() == null) {\n+            ContextName cn = new ContextName(context.getDocBase(), true);\n+            context.setPath(cn.getPath());\n+        }\n+\n         super.addChild(child);\n \n     }",
                "changes": 14,
                "blob_url": "https://github.com/apache/tomcat/blob/9480788ead029add98c146b44cb7484da619ee9d/java/org/apache/catalina/core/StandardHost.java"
            },
            {
                "additions": 5,
                "sha": "1636b0a9752273433a7632acbb7afec92ed91c0e",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/9480788ead029add98c146b44cb7484da619ee9d/webapps/docs/changelog.xml",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=9480788ead029add98c146b44cb7484da619ee9d",
                "patch": "@@ -95,6 +95,11 @@\n         <code>ArrayIndexOutOfBoundsException</code>s when accessing large files\n         via the default servlet when resource caching has been disabled. (markt)\n       </fix>\n+      <fix>\n+        Avoid a <code>NullPointerException</code> when a <code>Context</code> is\n+        defined in <code>server.xml</code> with a <code>docBase</code> but not\n+        the optional <code>path</code>. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "changes": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/9480788ead029add98c146b44cb7484da619ee9d/webapps/docs/changelog.xml"
            }
        ],
        "repo": "tomcat",
        "message": "Avoid NPE when minimal Context defined in server.xml",
        "commit": "https://github.com/apache/tomcat/commit/9480788ead029add98c146b44cb7484da619ee9d"
    },
    {
        "parent": "https://github.com/apache/tomcat/commit/c51c0ac04f5e37c327e9b1aa48e92889d1885d97",
        "bug_id": "tomcat_17",
        "file": [
            {
                "additions": 2,
                "sha": "ef7d34118749acb07f3371a619e89978ca2e1b8d",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/1b7f49ce6dfa2f7e7b33bb1b367575c75d5cf865/java/org/apache/tomcat/util/modeler/NoDescriptorRegistry.java",
                "deletions": 2,
                "filename": "java/org/apache/tomcat/util/modeler/NoDescriptorRegistry.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/modeler/NoDescriptorRegistry.java?ref=1b7f49ce6dfa2f7e7b33bb1b367575c75d5cf865",
                "patch": "@@ -203,13 +203,13 @@ public ObjectInstance getObjectInstance(ObjectName name) throws InstanceNotFound\n \n         @Override\n         public Set<ObjectInstance> queryMBeans(ObjectName name, QueryExp query) {\n-            return null;\n+            return Collections.emptySet();\n         }\n \n \n         @Override\n         public Set<ObjectName> queryNames(ObjectName name, QueryExp query) {\n-            return null;\n+            return Collections.emptySet();\n         }\n \n ",
                "changes": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/1b7f49ce6dfa2f7e7b33bb1b367575c75d5cf865/java/org/apache/tomcat/util/modeler/NoDescriptorRegistry.java"
            }
        ],
        "repo": "tomcat",
        "message": "Fix NPE when using with a default Tomcat configuration",
        "commit": "https://github.com/apache/tomcat/commit/1b7f49ce6dfa2f7e7b33bb1b367575c75d5cf865"
    },
    {
        "parent": "https://github.com/apache/tomcat/commit/dc3741107ee6ffcbe0860e46d7f7d05a4d9f63c4",
        "bug_id": "tomcat_18",
        "file": [
            {
                "additions": 2,
                "sha": "aff0b425b6775f2ea7d10b72517aa1c0982702cb",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/f562edd3302866f34c0ca9fa97f6ff414450f1ae/java/org/apache/catalina/core/StandardWrapperValve.java",
                "deletions": 0,
                "filename": "java/org/apache/catalina/core/StandardWrapperValve.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/StandardWrapperValve.java?ref=f562edd3302866f34c0ca9fa97f6ff414450f1ae",
                "patch": "@@ -29,6 +29,7 @@\n import javax.servlet.UnavailableException;\n import javax.servlet.http.HttpServletResponse;\n \n+import org.apache.catalina.Container;\n import org.apache.catalina.Context;\n import org.apache.catalina.Globals;\n import org.apache.catalina.LifecycleException;\n@@ -174,6 +175,7 @@ public final void invoke(Request request, Response response)\n \n         // Call the filter chain for this request\n         // NOTE: This also calls the servlet's service() method\n+        Container container = this.container;\n         try {\n             if ((servlet != null) && (filterChain != null)) {\n                 // Swallow output if needed",
                "changes": 2,
                "blob_url": "https://github.com/apache/tomcat/blob/f562edd3302866f34c0ca9fa97f6ff414450f1ae/java/org/apache/catalina/core/StandardWrapperValve.java"
            },
            {
                "additions": 8,
                "sha": "5632de212c8d3704fea71bf7b0ff130588a33529",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/f562edd3302866f34c0ca9fa97f6ff414450f1ae/java/org/apache/coyote/http11/Http11InputBuffer.java",
                "deletions": 1,
                "filename": "java/org/apache/coyote/http11/Http11InputBuffer.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/Http11InputBuffer.java?ref=f562edd3302866f34c0ca9fa97f6ff414450f1ae",
                "patch": "@@ -22,6 +22,7 @@\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n \n+import org.apache.coyote.CloseNowException;\n import org.apache.coyote.InputBuffer;\n import org.apache.coyote.Request;\n import org.apache.juli.logging.Log;\n@@ -728,7 +729,13 @@ private boolean fill(boolean block) throws IOException {\n             byteBuffer.position(byteBuffer.limit());\n         }\n         byteBuffer.limit(byteBuffer.capacity());\n-        int nRead = wrapper.read(block, byteBuffer);\n+        SocketWrapperBase<?> socketWrapper = this.wrapper;\n+        int nRead = -1;\n+        if (socketWrapper != null) {\n+            nRead = socketWrapper.read(block, byteBuffer);\n+        } else {\n+            throw new CloseNowException(sm.getString(\"iib.eof.error\"));\n+        }\n         byteBuffer.limit(byteBuffer.position()).reset();\n         if (nRead > 0) {\n             return true;",
                "changes": 9,
                "blob_url": "https://github.com/apache/tomcat/blob/f562edd3302866f34c0ca9fa97f6ff414450f1ae/java/org/apache/coyote/http11/Http11InputBuffer.java"
            },
            {
                "additions": 9,
                "sha": "c369837b42587d06ff9aa45d1db104ed669bc4d8",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/f562edd3302866f34c0ca9fa97f6ff414450f1ae/java/org/apache/coyote/http11/Http11OutputBuffer.java",
                "deletions": 1,
                "filename": "java/org/apache/coyote/http11/Http11OutputBuffer.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/Http11OutputBuffer.java?ref=f562edd3302866f34c0ca9fa97f6ff414450f1ae",
                "patch": "@@ -21,6 +21,7 @@\n import java.util.Arrays;\n \n import org.apache.coyote.ActionCode;\n+import org.apache.coyote.CloseNowException;\n import org.apache.coyote.Response;\n import org.apache.tomcat.util.buf.ByteChunk;\n import org.apache.tomcat.util.buf.MessageBytes;\n@@ -306,6 +307,8 @@ protected void commit() throws IOException {\n                 SocketWrapperBase<?> socketWrapper = this.socketWrapper;\n                 if (socketWrapper != null) {\n                     socketWrapper.write(isBlocking(), headerBuffer);\n+                } else {\n+                    throw new CloseNowException(sm.getString(\"iob.failedwrite\"));\n                 }\n             } finally {\n                 headerBuffer.position(0).limit(headerBuffer.capacity());\n@@ -530,7 +533,12 @@ boolean isChunking() {\n         public int doWrite(ByteBuffer chunk) throws IOException {\n             try {\n                 int len = chunk.remaining();\n-                socketWrapper.write(isBlocking(), chunk);\n+                SocketWrapperBase<?> socketWrapper = Http11OutputBuffer.this.socketWrapper;\n+                if (socketWrapper != null) {\n+                    socketWrapper.write(isBlocking(), chunk);\n+                } else {\n+                    throw new CloseNowException(sm.getString(\"iob.failedwrite\"));\n+                }\n                 len -= chunk.remaining();\n                 byteCount += len;\n                 return len;",
                "changes": 10,
                "blob_url": "https://github.com/apache/tomcat/blob/f562edd3302866f34c0ca9fa97f6ff414450f1ae/java/org/apache/coyote/http11/Http11OutputBuffer.java"
            },
            {
                "additions": 1,
                "sha": "194686319384f6de2b3f20a1f642f67696339385",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/f562edd3302866f34c0ca9fa97f6ff414450f1ae/webapps/docs/changelog.xml",
                "deletions": 2,
                "filename": "webapps/docs/changelog.xml",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=f562edd3302866f34c0ca9fa97f6ff414450f1ae",
                "patch": "@@ -81,8 +81,7 @@\n         certain microbenchmarks. (remm)\n       </fix>\n       <fix>\n-        Avoid possible NPE in <code>Http11OutputBuffer.commit</code> on\n-        connector stopclose. (remm)\n+        Avoid possible NPEs in on connector stop. (remm)\n       </fix>\n     </changelog>\n   </subsection>",
                "changes": 3,
                "blob_url": "https://github.com/apache/tomcat/blob/f562edd3302866f34c0ca9fa97f6ff414450f1ae/webapps/docs/changelog.xml"
            }
        ],
        "repo": "tomcat",
        "message": "Avoid other cases of NPEs on stop\n\nAs found in the CI logs.",
        "commit": "https://github.com/apache/tomcat/commit/f562edd3302866f34c0ca9fa97f6ff414450f1ae"
    },
    {
        "parent": "https://github.com/apache/tomcat/commit/41131b791394d0fcb186c2fd63c4f0752a34ce16",
        "bug_id": "tomcat_19",
        "file": [
            {
                "additions": 19,
                "sha": "9767111150b7fb90a101ac858ef478b25924aa5e",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/32d82429b158d29ea1176fd1b4cb0b548cb9b78c/java/org/apache/tomcat/util/net/AprEndpoint.java",
                "deletions": 25,
                "filename": "java/org/apache/tomcat/util/net/AprEndpoint.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/AprEndpoint.java?ref=32d82429b158d29ea1176fd1b4cb0b548cb9b78c",
                "patch": "@@ -122,7 +122,7 @@ public AprEndpoint() {\n         // - no IO vectoring\n         // - mandatory use of direct buffers causing required output buffering\n         // - needs extra output flushes due to the buffering\n-        setUseAsyncIO(false);\n+        //setUseAsyncIO(false);\n     }\n \n     // ------------------------------------------------------------- Properties\n@@ -1319,15 +1319,17 @@ private synchronized void maintain() {\n                             Long.valueOf(socket)));\n                 }\n                 AprSocketWrapper socketWrapper = connections.get(Long.valueOf(socket));\n-                socketWrapper.setError(new SocketTimeoutException());\n-                if (socketWrapper.readOperation != null || socketWrapper.writeOperation != null) {\n-                    if (socketWrapper.readOperation != null) {\n-                        socketWrapper.readOperation.process();\n+                if (socketWrapper != null) {\n+                    socketWrapper.setError(new SocketTimeoutException());\n+                    if (socketWrapper.readOperation != null || socketWrapper.writeOperation != null) {\n+                        if (socketWrapper.readOperation != null) {\n+                            socketWrapper.readOperation.process();\n+                        } else {\n+                            socketWrapper.writeOperation.process();\n+                        }\n                     } else {\n-                        socketWrapper.writeOperation.process();\n+                        processSocket(socketWrapper, SocketEvent.ERROR, true);\n                     }\n-                } else {\n-                    processSocket(socketWrapper, SocketEvent.ERROR, true);\n                 }\n                 socket = timeouts.check(date);\n             }\n@@ -2790,11 +2792,6 @@ public void run() {\n                                 }\n                                 return;\n                             }\n-                            if (!read && flush(false)) {\n-                                inline = false;\n-                                registerWriteInterest();\n-                                return;\n-                            }\n                             // Find the buffer on which the operation will be performed (no vectoring with APR)\n                             ByteBuffer buffer = null;\n                             for (int i = 0; i < length; i++) {\n@@ -2803,23 +2800,20 @@ public void run() {\n                                     break;\n                                 }\n                             }\n-                            if (buffer == null ) {\n+                            if (buffer == null) {\n                                 // Nothing to do\n                                 return;\n                             }\n                             if (read) {\n                                 nBytes = read(false, buffer);\n                             } else {\n-                                int remaining = buffer.remaining();\n-                                writeNonBlockingDirect(buffer);\n-                                nBytes = remaining - buffer.remaining();\n-                                if (nBytes > 0) {\n-                                    try {\n-                                        if (flush(false)) {\n-                                            registerWriteInterest();\n-                                        }\n-                                    } catch (IOException e) {\n-                                        // Ignore, will be delayed to later\n+                                if (!flush(false)) {\n+                                    int remaining = buffer.remaining();\n+                                    writeNonBlockingDirect(buffer);\n+                                    nBytes = remaining - buffer.remaining();\n+                                    if (nBytes > 0 && !buffer.isDirect() && flush(block == BlockingMode.BLOCK)) {\n+                                        inline = false;\n+                                        registerWriteInterest();\n                                     }\n                                 }\n                             }\n@@ -2832,7 +2826,7 @@ public void run() {\n                     }\n                 }\n                 if (nBytes > 0) {\n-                    // The bytes read are only updated in the completion handler\n+                    // The bytes processed are only updated in the completion handler\n                     completion.completed(Long.valueOf(nBytes), this);\n                 } else if (nBytes < 0 || getError() != null) {\n                     IOException error = getError();",
                "changes": 44,
                "blob_url": "https://github.com/apache/tomcat/blob/32d82429b158d29ea1176fd1b4cb0b548cb9b78c/java/org/apache/tomcat/util/net/AprEndpoint.java"
            },
            {
                "additions": 1,
                "sha": "a23448b1ed7462da09fb903ee3051dd3361c182b",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/32d82429b158d29ea1176fd1b4cb0b548cb9b78c/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "deletions": 1,
                "filename": "java/org/apache/tomcat/util/net/NioEndpoint.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/NioEndpoint.java?ref=32d82429b158d29ea1176fd1b4cb0b548cb9b78c",
                "patch": "@@ -1481,7 +1481,7 @@ public void run() {\n                     }\n                 }\n                 if (nBytes > 0) {\n-                    // The bytes read are only updated in the completion handler\n+                    // The bytes processed are only updated in the completion handler\n                     completion.completed(Long.valueOf(nBytes), this);\n                 } else if (nBytes < 0 || getError() != null) {\n                     IOException error = getError();",
                "changes": 2,
                "blob_url": "https://github.com/apache/tomcat/blob/32d82429b158d29ea1176fd1b4cb0b548cb9b78c/java/org/apache/tomcat/util/net/NioEndpoint.java"
            }
        ],
        "repo": "tomcat",
        "message": "Attempt to fix APR flush\n\nFix NPE I saw in maintain. Do a CI run to see the results (will still be\ndisabled afterwards since the performance is obviously worse).",
        "commit": "https://github.com/apache/tomcat/commit/32d82429b158d29ea1176fd1b4cb0b548cb9b78c"
    },
    {
        "parent": "https://github.com/apache/tomcat/commit/7046644bf361b89afc246b6643e24ce2ae60cacc",
        "bug_id": "tomcat_20",
        "file": [
            {
                "additions": 4,
                "sha": "f6b9f0c02ca34b001299a9f39e201e10147c1ecb",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/339b40bc07bdba9ded565929b9a3448c5a78f015/java/org/apache/tomcat/util/net/Nio2Channel.java",
                "deletions": 1,
                "filename": "java/org/apache/tomcat/util/net/Nio2Channel.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/Nio2Channel.java?ref=339b40bc07bdba9ded565929b9a3448c5a78f015",
                "patch": "@@ -251,7 +251,7 @@ public Integer get(long timeout, TimeUnit unit)\n     static final Nio2Channel CLOSED_NIO2_CHANNEL = new ClosedNio2Channel();\n     public static class ClosedNio2Channel extends Nio2Channel {\n         public ClosedNio2Channel() {\n-            super(null);\n+            super(SocketBufferHandler.EMPTY);\n         }\n         @Override\n         public void close() throws IOException {\n@@ -267,6 +267,9 @@ public void reset(AsynchronousSocketChannel channel, SocketWrapperBase<Nio2Chann\n         public void free() {\n         }\n         @Override\n+        public void setAppReadBufHandler(ApplicationBufferHandler handler) {\n+        }\n+        @Override\n         public Future<Integer> read(ByteBuffer dst) {\n             return DONE_INT;\n         }",
                "changes": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/339b40bc07bdba9ded565929b9a3448c5a78f015/java/org/apache/tomcat/util/net/Nio2Channel.java"
            },
            {
                "additions": 11,
                "sha": "1de1e803e6a6674b9ef9f30122e3d9f10e57b3cd",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/339b40bc07bdba9ded565929b9a3448c5a78f015/java/org/apache/tomcat/util/net/NioChannel.java",
                "deletions": 2,
                "filename": "java/org/apache/tomcat/util/net/NioChannel.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/NioChannel.java?ref=339b40bc07bdba9ded565929b9a3448c5a78f015",
                "patch": "@@ -246,7 +246,6 @@ protected void checkInterruptStatus() throws IOException {\n         }\n     }\n \n-\n     private ApplicationBufferHandler appReadBufHandler;\n     public void setAppReadBufHandler(ApplicationBufferHandler handler) {\n         this.appReadBufHandler = handler;\n@@ -258,7 +257,7 @@ protected ApplicationBufferHandler getAppReadBufHandler() {\n     static final NioChannel CLOSED_NIO_CHANNEL = new ClosedNioChannel();\n     public static class ClosedNioChannel extends NioChannel {\n         public ClosedNioChannel() {\n-            super(null, null);\n+            super(null, SocketBufferHandler.EMPTY);\n         }\n         @Override\n         public void close() throws IOException {\n@@ -274,6 +273,15 @@ public void reset() throws IOException {\n         public void free() {\n         }\n         @Override\n+        void setSocketWrapper(NioSocketWrapper socketWrapper) {\n+        }\n+        @Override\n+        public void setIOChannel(SocketChannel sc) {\n+        }\n+        @Override\n+        public void setAppReadBufHandler(ApplicationBufferHandler handler) {\n+        }\n+        @Override\n         public int read(ByteBuffer dst) throws IOException {\n             return -1;\n         }\n@@ -297,4 +305,5 @@ public String toString() {\n             return \"Closed NioChannel\";\n         }\n     }\n+\n }",
                "changes": 13,
                "blob_url": "https://github.com/apache/tomcat/blob/339b40bc07bdba9ded565929b9a3448c5a78f015/java/org/apache/tomcat/util/net/NioChannel.java"
            },
            {
                "additions": 6,
                "sha": "68f401a5e0e75064dc9942181105d333a7ac5b9c",
                "status": "modified",
                "raw_url": "https://github.com/apache/tomcat/raw/339b40bc07bdba9ded565929b9a3448c5a78f015/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "deletions": 3,
                "filename": "java/org/apache/tomcat/util/net/NioEndpoint.java",
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/NioEndpoint.java?ref=339b40bc07bdba9ded565929b9a3448c5a78f015",
                "patch": "@@ -1215,7 +1215,10 @@ private int fillReadBuffer(boolean block) throws IOException {\n \n         private int fillReadBuffer(boolean block, ByteBuffer to) throws IOException {\n             int nRead;\n-            NioChannel channel = getSocket();\n+            NioChannel socket = getSocket();\n+            if (socket instanceof ClosedNioChannel) {\n+                throw new ClosedChannelException();\n+            }\n             if (block) {\n                 Selector selector = null;\n                 try {\n@@ -1224,14 +1227,14 @@ private int fillReadBuffer(boolean block, ByteBuffer to) throws IOException {\n                     // Ignore\n                 }\n                 try {\n-                    nRead = pool.read(to, channel, selector, getReadTimeout());\n+                    nRead = pool.read(to, socket, selector, getReadTimeout());\n                 } finally {\n                     if (selector != null) {\n                         pool.put(selector);\n                     }\n                 }\n             } else {\n-                nRead = channel.read(to);\n+                nRead = socket.read(to);\n                 if (nRead == -1) {\n                     throw new EOFException();\n                 }",
                "changes": 9,
                "blob_url": "https://github.com/apache/tomcat/blob/339b40bc07bdba9ded565929b9a3448c5a78f015/java/org/apache/tomcat/util/net/NioEndpoint.java"
            }
        ],
        "repo": "tomcat",
        "message": "The closed channels need to be immutable so override a few more methods\n\nAvoiding a NPE in NioBlockignSelector is not possible however and\ngetting there is wasteful, so filter out read as well. In theory ==\nCLOSED_NIO_CHANNEL would be enough but use instanceof for now.",
        "commit": "https://github.com/apache/tomcat/commit/339b40bc07bdba9ded565929b9a3448c5a78f015"
    }
]