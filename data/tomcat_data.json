[
    {
        "repo": "tomcat",
        "message": "Follow-up to c2d6278. NPE->ClosedChannelException for closed socket\n\nIf an attempt is made to use a closed socket, throw a\nClosedChannelException rather than a NullPointerException",
        "commit": "https://github.com/apache/tomcat/commit/7046644bf361b89afc246b6643e24ce2ae60cacc",
        "parent": "https://github.com/apache/tomcat/commit/b51052483ec3687c6b4db05288d7546d8431eaf0",
        "bug_id": "tomcat_1",
        "file": [
            {
                "sha": "765935ec684ae8a20bc920bc3fb0aebd22e8a6ad",
                "filename": "java/org/apache/tomcat/util/net/NioEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/7046644bf361b89afc246b6643e24ce2ae60cacc/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/7046644bf361b89afc246b6643e24ce2ae60cacc/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "status": "modified",
                "changes": 12,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/NioEndpoint.java?ref=7046644bf361b89afc246b6643e24ce2ae60cacc",
                "patch": "@@ -27,6 +27,7 @@\n import java.nio.ByteBuffer;\n import java.nio.channels.CancelledKeyException;\n import java.nio.channels.Channel;\n+import java.nio.channels.ClosedChannelException;\n import java.nio.channels.CompletionHandler;\n import java.nio.channels.FileChannel;\n import java.nio.channels.NetworkChannel;\n@@ -52,6 +53,7 @@\n import org.apache.tomcat.util.collections.SynchronizedQueue;\n import org.apache.tomcat.util.collections.SynchronizedStack;\n import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;\n+import org.apache.tomcat.util.net.NioChannel.ClosedNioChannel;\n import org.apache.tomcat.util.net.jsse.JSSESupport;\n \n /**\n@@ -1240,6 +1242,10 @@ private int fillReadBuffer(boolean block, ByteBuffer to) throws IOException {\n \n         @Override\n         protected void doWrite(boolean block, ByteBuffer from) throws IOException {\n+            NioChannel socket = getSocket();\n+            if (socket instanceof ClosedNioChannel) {\n+                throw new ClosedChannelException();\n+            }\n             if (block) {\n                 long writeTimeout = getWriteTimeout();\n                 Selector selector = null;\n@@ -1249,11 +1255,11 @@ protected void doWrite(boolean block, ByteBuffer from) throws IOException {\n                     // Ignore\n                 }\n                 try {\n-                    pool.write(from, getSocket(), selector, writeTimeout);\n+                    pool.write(from, socket, selector, writeTimeout);\n                     if (block) {\n                         // Make sure we are flushed\n                         do {\n-                            if (getSocket().flush(true, selector, writeTimeout)) {\n+                            if (socket.flush(true, selector, writeTimeout)) {\n                                 break;\n                             }\n                         } while (true);\n@@ -1268,7 +1274,7 @@ protected void doWrite(boolean block, ByteBuffer from) throws IOException {\n                 // registered for write once as both container and user code can trigger\n                 // write registration.\n             } else {\n-                if (getSocket().write(from) == -1) {\n+                if (socket.write(from) == -1) {\n                     throw new EOFException();\n                 }\n             }",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://github.com/apache/tomcat/pull/187 Avoid NPE\n\nAvoid a NullPointerException in the CrawlerSessionManagerValve if no\nROOT Context is deployed and a request does not map to any of the other\ndeployed Contexts.\nPatch provided by Jop Zinkweg.",
        "commit": "https://github.com/apache/tomcat/commit/6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af",
        "parent": "https://github.com/apache/tomcat/commit/4aac8d4b06bcf5a0ff5246d54d4fa4e00372f743",
        "bug_id": "tomcat_2",
        "file": [
            {
                "sha": "da01da8cbcd70ea5519ddbef2843830cae217e31",
                "filename": "java/org/apache/catalina/valves/CrawlerSessionManagerValve.java",
                "blob_url": "https://github.com/apache/tomcat/blob/6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af/java/org/apache/catalina/valves/CrawlerSessionManagerValve.java",
                "raw_url": "https://github.com/apache/tomcat/raw/6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af/java/org/apache/catalina/valves/CrawlerSessionManagerValve.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/valves/CrawlerSessionManagerValve.java?ref=6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af",
                "patch": "@@ -265,7 +265,7 @@ private String getClientIdentifier(Host host, Context context, String clientIp)\n         if (isHostAware) {\n             result.append('-').append(host.getName());\n         }\n-        if (isContextAware) {\n+        if (isContextAware && context != null) {\n             result.append(context.getName());\n         }\n         return result.toString();",
                "deletions": 1
            },
            {
                "sha": "56d07b82024110482996f693628f7fc5c88f3793",
                "filename": "test/org/apache/catalina/valves/TestCrawlerSessionManagerValve.java",
                "blob_url": "https://github.com/apache/tomcat/blob/6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af/test/org/apache/catalina/valves/TestCrawlerSessionManagerValve.java",
                "raw_url": "https://github.com/apache/tomcat/raw/6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af/test/org/apache/catalina/valves/TestCrawlerSessionManagerValve.java",
                "status": "modified",
                "changes": 41,
                "additions": 35,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/valves/TestCrawlerSessionManagerValve.java?ref=6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af",
                "patch": "@@ -97,6 +97,18 @@ public void testCrawlerMultipleHostsHostAware() throws Exception {\n         verifyCrawlingLocalhost(valve, \"example.invalid\");\n     }\n \n+    @Test\n+    public void testCrawlerMultipleContextsContextAware() throws Exception {\n+        CrawlerSessionManagerValve valve = new CrawlerSessionManagerValve();\n+        valve.setCrawlerUserAgents(valve.getCrawlerUserAgents());\n+        valve.setHostAware(true);\n+        valve.setContextAware(true);\n+        valve.setNext(EasyMock.createMock(Valve.class));\n+\n+        verifyCrawlingContext(valve, \"/examples\");\n+        verifyCrawlingContext(valve, null);\n+    }\n+\n     @Test\n     public void testCrawlersSessionIdIsRemovedAfterSessionExpiry() throws IOException, ServletException {\n         CrawlerSessionManagerValve valve = new CrawlerSessionManagerValve();\n@@ -127,7 +139,20 @@ public void testCrawlersSessionIdIsRemovedAfterSessionExpiry() throws IOExceptio\n     private void verifyCrawlingLocalhost(CrawlerSessionManagerValve valve, String hostname)\n             throws IOException, ServletException {\n         HttpSession session = createSessionExpectations(valve, true);\n-        Request request = createRequestExpectations(\"127.0.0.1\", session, true, hostname, \"tomcatBot 1.0\");\n+        Request request = createRequestExpectations(\"127.0.0.1\", session, true, hostname, \"/examples\", \"tomcatBot 1.0\");\n+\n+        EasyMock.replay(request, session);\n+\n+        valve.invoke(request, EasyMock.createMock(Response.class));\n+\n+        EasyMock.verify(request, session);\n+    }\n+\n+\n+    private void verifyCrawlingContext(CrawlerSessionManagerValve valve, String contextPath)\n+            throws IOException, ServletException {\n+        HttpSession session = createSessionExpectations(valve, true);\n+        Request request = createRequestExpectations(\"127.0.0.1\", session, true, \"localhost\", contextPath, \"tomcatBot 1.0\");\n \n         EasyMock.replay(request, session);\n \n@@ -151,14 +176,15 @@ private HttpSession createSessionExpectations(CrawlerSessionManagerValve valve,\n \n \n     private Request createRequestExpectations(String ip, HttpSession session, boolean isBot) {\n-        return createRequestExpectations(ip, session, isBot, \"localhost\", \"something 1.0\");\n+        return createRequestExpectations(ip, session, isBot, \"localhost\", \"/examples\", \"something 1.0\");\n     }\n \n-    private Request createRequestExpectations(String ip, HttpSession session, boolean isBot, String hostname, String userAgent) {\n+    private Request createRequestExpectations(String ip, HttpSession session, boolean isBot, String hostname,\n+            String contextPath, String userAgent) {\n         Request request = EasyMock.createMock(Request.class);\n         EasyMock.expect(request.getRemoteAddr()).andReturn(ip);\n         EasyMock.expect(request.getHost()).andReturn(simpleHostWithName(hostname));\n-        EasyMock.expect(request.getContext()).andReturn(simpleContextWithName());\n+        EasyMock.expect(request.getContext()).andReturn(simpleContextWithName(contextPath));\n         IExpectationSetters<HttpSession> setter = EasyMock.expect(request.getSession(false))\n                 .andReturn(null);\n         if (isBot) {\n@@ -175,9 +201,12 @@ private Host simpleHostWithName(String hostname) {\n         return host;\n     }\n \n-    private Context simpleContextWithName() {\n+    private Context simpleContextWithName(String contextPath) {\n+        if (contextPath == null) {\n+            return null;\n+        }\n         Context context = EasyMock.createMock(Context.class);\n-        EasyMock.expect(context.getName()).andReturn(\"/examples\");\n+        EasyMock.expect(context.getName()).andReturn(contextPath);\n         EasyMock.replay(context);\n         return context;\n     }",
                "deletions": 6
            },
            {
                "sha": "7e544a2131efe6bdcf8d614f1a291b7744644ef2",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af",
                "patch": "@@ -87,6 +87,12 @@\n         for patterns used with the <code>RewriteValve</code> with the\n         description in the documentation. (markt)\n       </fix>\n+      <fix>\n+        Avoid a <code>NullPointerException</code> in the\n+        <code>CrawlerSessionManagerValve</code> if no ROOT Context is deployed\n+        and a request does not map to any of the other deployed Contexts. Patch\n+        provided by Jop Zinkweg. (markt)\n+      </fix>\n      </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=63913 Wrap NPEs\n\nWrap any NullPointerExceptions throw by the Inflater or Deflater used by\nthe PerMessageDeflate extension in an IOException so that the error can\nbe caught and handled by the WebSocket error handling mechanism.",
        "commit": "https://github.com/apache/tomcat/commit/5bf2a8504f5965410e82242667b71f54912fe766",
        "parent": "https://github.com/apache/tomcat/commit/163c0ad70540e59b75fc922d6fd19eacc7febd3e",
        "bug_id": "tomcat_3",
        "file": [
            {
                "sha": "744619aafe4d19401b20be05c628e2114b6dbd18",
                "filename": "java/org/apache/tomcat/websocket/LocalStrings.properties",
                "blob_url": "https://github.com/apache/tomcat/blob/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/LocalStrings.properties",
                "raw_url": "https://github.com/apache/tomcat/raw/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/LocalStrings.properties",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/LocalStrings.properties?ref=5bf2a8504f5965410e82242667b71f54912fe766",
                "patch": "@@ -35,6 +35,7 @@ caseInsensitiveKeyMap.nullKey=Null keys are not permitted\n \n futureToSendHandler.timeout=Operation timed out after waiting [{0}] [{1}] to complete\n \n+perMessageDeflate.alreadyClosed=The transformer has been closed and may no longer be used\n perMessageDeflate.deflateFailed=Failed to decompress a compressed WebSocket frame\n perMessageDeflate.duplicateParameter=Duplicate definition of the [{0}] extension parameter\n perMessageDeflate.invalidState=Invalid state",
                "deletions": 0
            },
            {
                "sha": "afcfcf02eb68ca851d53059a8355862127b74ebc",
                "filename": "java/org/apache/tomcat/websocket/PerMessageDeflate.java",
                "blob_url": "https://github.com/apache/tomcat/blob/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/PerMessageDeflate.java",
                "raw_url": "https://github.com/apache/tomcat/raw/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/PerMessageDeflate.java",
                "status": "modified",
                "changes": 37,
                "additions": 28,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/PerMessageDeflate.java?ref=5bf2a8504f5965410e82242667b71f54912fe766",
                "patch": "@@ -204,6 +204,8 @@ public TransformationResult getMoreData(byte opCode, boolean fin, int rsv, ByteB\n                         dest.array(), dest.arrayOffset() + dest.position(), dest.remaining());\n             } catch (DataFormatException e) {\n                 throw new IOException(sm.getString(\"perMessageDeflate.deflateFailed\"), e);\n+            } catch (NullPointerException e) {\n+                throw new IOException(sm.getString(\"perMessageDeflate.alreadyClosed\"), e);\n             }\n             dest.position(dest.position() + written);\n \n@@ -229,7 +231,11 @@ public TransformationResult getMoreData(byte opCode, boolean fin, int rsv, ByteB\n             } else if (written == 0) {\n                 if (fin && (isServer && !clientContextTakeover ||\n                         !isServer && !serverContextTakeover)) {\n-                    inflater.reset();\n+                    try {\n+                        inflater.reset();\n+                    } catch (NullPointerException e) {\n+                        throw new IOException(sm.getString(\"perMessageDeflate.alreadyClosed\"), e);\n+                    }\n                 }\n                 return TransformationResult.END_OF_FRAME;\n             }\n@@ -314,7 +320,7 @@ public boolean validateRsvBits(int i) {\n \n \n     @Override\n-    public List<MessagePart> sendMessagePart(List<MessagePart> uncompressedParts) {\n+    public List<MessagePart> sendMessagePart(List<MessagePart> uncompressedParts) throws IOException {\n         List<MessagePart> allCompressedParts = new ArrayList<>();\n \n         for (MessagePart uncompressedPart : uncompressedParts) {\n@@ -345,10 +351,14 @@ public boolean validateRsvBits(int i) {\n                 while (deflateRequired) {\n                     ByteBuffer compressedPayload = writeBuffer;\n \n-                    int written = deflater.deflate(compressedPayload.array(),\n-                            compressedPayload.arrayOffset() + compressedPayload.position(),\n-                            compressedPayload.remaining(), flush);\n-                    compressedPayload.position(compressedPayload.position() + written);\n+                    try {\n+                        int written = deflater.deflate(compressedPayload.array(),\n+                                compressedPayload.arrayOffset() + compressedPayload.position(),\n+                                compressedPayload.remaining(), flush);\n+                        compressedPayload.position(compressedPayload.position() + written);\n+                    } catch (NullPointerException e) {\n+                        throw new IOException(sm.getString(\"perMessageDeflate.alreadyClosed\"), e);\n+                    }\n \n                     if (!uncompressedPart.isFin() && compressedPayload.hasRemaining() && deflater.needsInput()) {\n                         // This message part has been fully processed by the\n@@ -401,7 +411,12 @@ public boolean validateRsvBits(int i) {\n                         // - in middle of EOM bytes\n                         // - about to write EOM bytes\n                         // - more data to write\n-                        int eomBufferWritten = deflater.deflate(EOM_BUFFER, 0, EOM_BUFFER.length, Deflater.SYNC_FLUSH);\n+                        int eomBufferWritten;\n+                        try {\n+                            eomBufferWritten = deflater.deflate(EOM_BUFFER, 0, EOM_BUFFER.length, Deflater.SYNC_FLUSH);\n+                        } catch (NullPointerException e) {\n+                            throw new IOException(sm.getString(\"perMessageDeflate.alreadyClosed\"), e);\n+                        }\n                         if (eomBufferWritten < EOM_BUFFER.length) {\n                             // EOM has just been completed\n                             compressedPayload.limit(compressedPayload.limit() - EOM_BYTES.length + eomBufferWritten);\n@@ -447,11 +462,15 @@ public boolean validateRsvBits(int i) {\n     }\n \n \n-    private void startNewMessage() {\n+    private void startNewMessage() throws IOException {\n         firstCompressedFrameWritten = false;\n         emptyMessage = true;\n         if (isServer && !serverContextTakeover || !isServer && !clientContextTakeover) {\n-            deflater.reset();\n+            try {\n+                deflater.reset();\n+            } catch (NullPointerException e) {\n+                throw new IOException(sm.getString(\"perMessageDeflate.alreadyClosed\"), e);\n+            }\n         }\n     }\n ",
                "deletions": 9
            },
            {
                "sha": "14d809303fcfe2edea9cdb6106e805b8c0e51112",
                "filename": "java/org/apache/tomcat/websocket/Transformation.java",
                "blob_url": "https://github.com/apache/tomcat/blob/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/Transformation.java",
                "raw_url": "https://github.com/apache/tomcat/raw/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/Transformation.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/Transformation.java?ref=5bf2a8504f5965410e82242667b71f54912fe766",
                "patch": "@@ -101,8 +101,11 @@\n      * @return  The list of messages after this any any subsequent\n      *          transformations have been applied. The size of the returned list\n      *          may be bigger or smaller than the size of the input list\n+     *\n+     * @throws IOException If an error occurs during the transformation of the\n+     *                     message parts\n      */\n-    List<MessagePart> sendMessagePart(List<MessagePart> messageParts);\n+    List<MessagePart> sendMessagePart(List<MessagePart> messageParts) throws IOException;\n \n     /**\n      * Clean-up any resources that were used by the transformation.",
                "deletions": 1
            },
            {
                "sha": "f022132bb1de3291a8f31a68cf2a359b2af2f44f",
                "filename": "java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "blob_url": "https://github.com/apache/tomcat/blob/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "raw_url": "https://github.com/apache/tomcat/raw/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java?ref=5bf2a8504f5965410e82242667b71f54912fe766",
                "patch": "@@ -338,7 +338,12 @@ void startMessage(byte opCode, ByteBuffer payload, boolean last,\n                 intermediateMessageHandler,\n                 new EndMessageHandler(this, handler), -1));\n \n-        messageParts = transformation.sendMessagePart(messageParts);\n+        try {\n+            messageParts = transformation.sendMessagePart(messageParts);\n+        } catch (IOException ioe) {\n+            handler.onResult(new SendResult(ioe));\n+            return;\n+        }\n \n         // Some extensions/transformations may buffer messages so it is possible\n         // that no message parts will be returned. If this is the case the",
                "deletions": 1
            },
            {
                "sha": "9139460c7402e0c02fee3a345c41e0add54e4da1",
                "filename": "test/org/apache/tomcat/websocket/TestPerMessageDeflate.java",
                "blob_url": "https://github.com/apache/tomcat/blob/5bf2a8504f5965410e82242667b71f54912fe766/test/org/apache/tomcat/websocket/TestPerMessageDeflate.java",
                "raw_url": "https://github.com/apache/tomcat/raw/5bf2a8504f5965410e82242667b71f54912fe766/test/org/apache/tomcat/websocket/TestPerMessageDeflate.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/tomcat/websocket/TestPerMessageDeflate.java?ref=5bf2a8504f5965410e82242667b71f54912fe766",
                "patch": "@@ -34,7 +34,7 @@\n      * https://bz.apache.org/bugzilla/show_bug.cgi?id=61491\n      */\n     @Test\n-    public void testSendEmptyMessagePartWithContextTakeover() {\n+    public void testSendEmptyMessagePartWithContextTakeover() throws IOException {\n \n         // Set up the extension using defaults\n         List<Parameter> parameters = Collections.emptyList();",
                "deletions": 1
            },
            {
                "sha": "8a19840ab9dcbcc7970394638b9063cbeb715e4b",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/5bf2a8504f5965410e82242667b71f54912fe766/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/5bf2a8504f5965410e82242667b71f54912fe766/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 11,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=5bf2a8504f5965410e82242667b71f54912fe766",
                "patch": "@@ -157,6 +157,17 @@\n       </fix>\n     </changelog>\n   </subsection>\n+  <subsection name=\"WebSocket\">\n+    <changelog>\n+      <fix>\n+        <bug>63913</bug>: Wrap any <code>NullPointerException</code>s throw by\n+        the <code>Inflater</code> or <code>Deflater</code> used by the\n+        <code>PerMessageDeflate</code> extension in an <code>IOException</code>\n+        so that the error can be caught and handled by the WebSocket error\n+        handling mechanism. (markt)\n+      </fix>\n+    </changelog>\n+  </subsection>\n   <subsection name=\"Web applications\">\n     <changelog>\n       <fix>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE reported by CI system",
        "commit": "https://github.com/apache/tomcat/commit/24713fab3d5f35d86f709f40c29a65d528edab4c",
        "parent": "https://github.com/apache/tomcat/commit/9e50f37d6aa0c6726a82eca70bd559753d72794f",
        "bug_id": "tomcat_4",
        "file": [
            {
                "sha": "bd3bfe54d72b5a216de52ad7d63d5db3a18b6bc0",
                "filename": "java/org/apache/catalina/startup/WebappServiceLoader.java",
                "blob_url": "https://github.com/apache/tomcat/blob/24713fab3d5f35d86f709f40c29a65d528edab4c/java/org/apache/catalina/startup/WebappServiceLoader.java",
                "raw_url": "https://github.com/apache/tomcat/raw/24713fab3d5f35d86f709f40c29a65d528edab4c/java/org/apache/catalina/startup/WebappServiceLoader.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/startup/WebappServiceLoader.java?ref=24713fab3d5f35d86f709f40c29a65d528edab4c",
                "patch": "@@ -114,7 +114,9 @@ public WebappServiceLoader(Context context) {\n             // Ordered libs so only use services defined in those libs and any\n             // in WEB-INF/classes\n             URL unpacked = servletContext.getResource(CLASSES + configFile);\n-            parseConfigFile(applicationServicesFound, unpacked);\n+            if (unpacked != null) {\n+                parseConfigFile(applicationServicesFound, unpacked);\n+            }\n \n             for (String lib : orderedLibs) {\n                 URL jarUrl = servletContext.getResource(LIB + lib);",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Do not throw NPE when MBean operation cannot be found.",
        "commit": "https://github.com/apache/tomcat/commit/4db28a41774f15e9e4a3e7f1a4ec94a38959e3e7",
        "parent": "https://github.com/apache/tomcat/commit/72184080517b59a0afe155665c212e8f451b986b",
        "bug_id": "tomcat_5",
        "file": [
            {
                "sha": "e4cdf8ef27290283d259fc09d48aef68aa078856",
                "filename": "java/org/apache/catalina/manager/JMXProxyServlet.java",
                "blob_url": "https://github.com/apache/tomcat/blob/4db28a41774f15e9e4a3e7f1a4ec94a38959e3e7/java/org/apache/catalina/manager/JMXProxyServlet.java",
                "raw_url": "https://github.com/apache/tomcat/raw/4db28a41774f15e9e4a3e7f1a4ec94a38959e3e7/java/org/apache/catalina/manager/JMXProxyServlet.java",
                "status": "modified",
                "changes": 16,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/manager/JMXProxyServlet.java?ref=4db28a41774f15e9e4a3e7f1a4ec94a38959e3e7",
                "patch": "@@ -22,6 +22,7 @@\n \n import javax.management.Attribute;\n import javax.management.MBeanException;\n+import javax.management.MBeanInfo;\n import javax.management.MBeanOperationInfo;\n import javax.management.MBeanParameterInfo;\n import javax.management.MBeanServer;\n@@ -35,6 +36,7 @@\n import javax.servlet.http.HttpServletResponse;\n \n import org.apache.catalina.mbeans.MBeanDumper;\n+import org.apache.catalina.tribes.util.StringManager;\n import org.apache.tomcat.util.modeler.Registry;\n \n /**\n@@ -51,6 +53,8 @@\n     // without any parameters.\n     private static final String[] NO_PARAMETERS = new String[0];\n \n+    private static final StringManager sm = StringManager.getManager(JMXProxyServlet.class);\n+\n     // ----------------------------------------------------- Instance Variables\n     /**\n      * MBean server.\n@@ -261,6 +265,18 @@ private Object invokeOperationInternal(String onameStr, String operation, String\n             throws OperationsException, MBeanException, ReflectionException {\n         ObjectName oname = new ObjectName(onameStr);\n         MBeanOperationInfo methodInfo = registry.getMethodInfo(oname, operation);\n+        if(null == methodInfo) {\n+            // getMethodInfo returns null for both \"object not found\" and \"operation not found\"\n+            MBeanInfo info = null;\n+            try {\n+                info = registry.getMBeanServer().getMBeanInfo(oname);\n+\n+                throw new IllegalArgumentException(sm.getString(\"jmxProxyServlet.noOperationOnBean\", operation, onameStr, info.getClassName()));\n+            } catch (Exception e) {\n+                throw new IllegalArgumentException(sm.getString(\"jmxProxyServlet.noBeanFound\", onameStr));\n+            }\n+        }\n+\n         MBeanParameterInfo[] signature = methodInfo.getSignature();\n         String[] signatureTypes = new String[signature.length];\n         Object[] values = new Object[signature.length];",
                "deletions": 0
            },
            {
                "sha": "51acc291670d6a872deb2ffed2d367106de89ab5",
                "filename": "java/org/apache/catalina/manager/LocalStrings.properties",
                "blob_url": "https://github.com/apache/tomcat/blob/4db28a41774f15e9e4a3e7f1a4ec94a38959e3e7/java/org/apache/catalina/manager/LocalStrings.properties",
                "raw_url": "https://github.com/apache/tomcat/raw/4db28a41774f15e9e4a3e7f1a4ec94a38959e3e7/java/org/apache/catalina/manager/LocalStrings.properties",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/manager/LocalStrings.properties?ref=4db28a41774f15e9e4a3e7f1a4ec94a38959e3e7",
                "patch": "@@ -192,3 +192,6 @@ managerServlet.vminfo=OK - VM info\n \n statusServlet.complete=Complete Server Status\n statusServlet.title=Server Status\n+\n+jmxProxyServlet.noOperationOnBean=Cannot find operation [{0}] on object name [{1}], which is a [{2}]\n+jmxProxyServlet.noBeanFound=Cannot find MBean with object name [{0}]",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=64005 avoid NPE\n\nAvoid the NPE when working with the URL for the root of a packed WAR",
        "commit": "https://github.com/apache/tomcat/commit/2f514255fc0032786de3a12fb3656c76c9c7e457",
        "parent": "https://github.com/apache/tomcat/commit/65bf0dba83cde35bdf39629c300d5a113bcca5dd",
        "bug_id": "tomcat_6",
        "file": [
            {
                "sha": "712a46374764e962095531148b5ebbae901fccb7",
                "filename": "java/org/apache/catalina/webresources/CachedResource.java",
                "blob_url": "https://github.com/apache/tomcat/blob/2f514255fc0032786de3a12fb3656c76c9c7e457/java/org/apache/catalina/webresources/CachedResource.java",
                "raw_url": "https://github.com/apache/tomcat/raw/2f514255fc0032786de3a12fb3656c76c9c7e457/java/org/apache/catalina/webresources/CachedResource.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/webresources/CachedResource.java?ref=2f514255fc0032786de3a12fb3656c76c9c7e457",
                "patch": "@@ -26,6 +26,7 @@\n import java.net.URLStreamHandler;\n import java.security.Permission;\n import java.security.cert.Certificate;\n+import java.util.jar.JarEntry;\n import java.util.jar.JarFile;\n import java.util.jar.Manifest;\n \n@@ -557,5 +558,14 @@ private WebResource getResource() {\n         public JarFile getJarFile() throws IOException {\n             return ((JarURLConnection) resourceURL.openConnection()).getJarFile();\n         }\n+\n+        @Override\n+        public JarEntry getJarEntry() throws IOException {\n+            if (getEntryName() == null) {\n+                return null;\n+            } else {\n+                return super.getJarEntry();\n+            }\n+        }\n     }\n }",
                "deletions": 0
            },
            {
                "sha": "f69a9710e95c8f3e40225d3f83ee36e4f8d2ec41",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/2f514255fc0032786de3a12fb3656c76c9c7e457/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/2f514255fc0032786de3a12fb3656c76c9c7e457/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=2f514255fc0032786de3a12fb3656c76c9c7e457",
                "patch": "@@ -55,6 +55,11 @@\n         Avoid useless environment restore when not using GSSCredential\n         in JNDIRealm. (remm)\n       </fix>\n+      <fix>\n+        <bug>64005</bug>: Correct a regression in the static resource caching\n+        changes introduced in 9.0.28. Avoid a <code>NullPointerException</code>\n+        when working with the URL provided for the root of a packed WAR. (markt)\n+      </fix>\n       <fix>\n         <bug>64006</bug>: Provide default configuration source based on the\n         current directory if none has been set, for full compatibility with",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix possible NPE with excessive header size",
        "commit": "https://github.com/apache/tomcat/commit/3d73dfc42e13a5d0eeb4c0e50009cdb67e1ab7dd",
        "parent": "https://github.com/apache/tomcat/commit/c298138dc774ec1844c929413f11e08855e17c87",
        "bug_id": "tomcat_7",
        "file": [
            {
                "sha": "24fd9e97e88a133936f3493d4800b2f6bcd59baa",
                "filename": "java/org/apache/coyote/http11/Http11Processor.java",
                "blob_url": "https://github.com/apache/tomcat/blob/3d73dfc42e13a5d0eeb4c0e50009cdb67e1ab7dd/java/org/apache/coyote/http11/Http11Processor.java",
                "raw_url": "https://github.com/apache/tomcat/raw/3d73dfc42e13a5d0eeb4c0e50009cdb67e1ab7dd/java/org/apache/coyote/http11/Http11Processor.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/Http11Processor.java?ref=3d73dfc42e13a5d0eeb4c0e50009cdb67e1ab7dd",
                "patch": "@@ -995,7 +995,10 @@ private static boolean isConnectionToken(MimeHeaders headers, String token) thro\n         Enumeration<String> values = headers.values(Constants.CONNECTION);\n         Set<String> result = new HashSet<>();\n         while (values.hasMoreElements()) {\n-            TokenList.parseTokenList(new StringReader(values.nextElement()), result);\n+            String nextHeaderValue = values.nextElement();\n+            if (nextHeaderValue != null) {\n+                TokenList.parseTokenList(new StringReader(nextHeaderValue), result);\n+            }\n         }\n \n         return result.contains(token);",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPEs when looking for static methods",
        "commit": "https://github.com/apache/tomcat/commit/ae08febd4d053d38df876b039d4b632a79465510",
        "parent": "https://github.com/apache/tomcat/commit/2fb245b844fc9fefaa5e0c8002a481a72c502963",
        "bug_id": "tomcat_8",
        "file": [
            {
                "sha": "d6a902770e139489b401abaf65096b5946684978",
                "filename": "java/javax/el/StaticFieldELResolver.java",
                "blob_url": "https://github.com/apache/tomcat/blob/ae08febd4d053d38df876b039d4b632a79465510/java/javax/el/StaticFieldELResolver.java",
                "raw_url": "https://github.com/apache/tomcat/raw/ae08febd4d053d38df876b039d4b632a79465510/java/javax/el/StaticFieldELResolver.java",
                "status": "modified",
                "changes": 10,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/javax/el/StaticFieldELResolver.java?ref=ae08febd4d053d38df876b039d4b632a79465510",
                "patch": "@@ -113,11 +113,13 @@ public Object invoke(ELContext context, Object base, Object method,\n                 return result;\n \n             } else {\n-                Method match =\n-                        Util.findMethod(clazz, base, methodName, paramTypes, params);\n+                // Static method so base should be null\n+                Method match = Util.findMethod(clazz, null, methodName, paramTypes, params);\n \n-                int modifiers = match.getModifiers();\n-                if (!Modifier.isStatic(modifiers)) {\n+                // Note: On Java 9 and above, the isStatic check becomes\n+                // unnecessary because the canAccess() call in Util.findMethod()\n+                // effectively performs the same check\n+                if (match == null || !Modifier.isStatic(match.getModifiers())) {\n                     throw new MethodNotFoundException(Util.message(context,\n                             \"staticFieldELResolver.methodNotFound\", methodName,\n                             clazz.getName()));",
                "deletions": 4
            },
            {
                "sha": "2e06837233b0efd09bb25f33cccc769e96df6092",
                "filename": "java/javax/el/Util.java",
                "blob_url": "https://github.com/apache/tomcat/blob/ae08febd4d053d38df876b039d4b632a79465510/java/javax/el/Util.java",
                "raw_url": "https://github.com/apache/tomcat/raw/ae08febd4d053d38df876b039d4b632a79465510/java/javax/el/Util.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/javax/el/Util.java?ref=ae08febd4d053d38df876b039d4b632a79465510",
                "patch": "@@ -541,7 +541,11 @@ private static boolean isCoercibleFrom(Object src, Class<?> target) {\n      */\n     static Method getMethod(Class<?> type, Object base, Method m) {\n         JreCompat jreCompat = JreCompat.getInstance();\n-        if (m == null || (Modifier.isPublic(type.getModifiers()) && jreCompat.canAcccess(base, m))) {\n+        // If base is null, method MUST be static\n+        // If base is non-null, method may be static or non-static\n+        if (m == null ||\n+                (Modifier.isPublic(type.getModifiers()) &&\n+                        (jreCompat.canAcccess(base, m) || base != null && jreCompat.canAcccess(null, m)))) {\n             return m;\n         }\n         Class<?>[] inf = type.getInterfaces();",
                "deletions": 1
            },
            {
                "sha": "c9f1f2e285eef363bbd159f4513f3bb809e4a767",
                "filename": "java/org/apache/el/util/ReflectionUtil.java",
                "blob_url": "https://github.com/apache/tomcat/blob/ae08febd4d053d38df876b039d4b632a79465510/java/org/apache/el/util/ReflectionUtil.java",
                "raw_url": "https://github.com/apache/tomcat/raw/ae08febd4d053d38df876b039d4b632a79465510/java/org/apache/el/util/ReflectionUtil.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/el/util/ReflectionUtil.java?ref=ae08febd4d053d38df876b039d4b632a79465510",
                "patch": "@@ -424,7 +424,11 @@ private static boolean isCoercibleFrom(EvaluationContext ctx, Object src, Class<\n      */\n     private static Method getMethod(Class<?> type, Object base, Method m) {\n         JreCompat jreCompat = JreCompat.getInstance();\n-        if (m == null || (Modifier.isPublic(type.getModifiers()) && jreCompat.canAcccess(base, m))) {\n+        // If base is null, method MUST be static\n+        // If base is non-null, method may be static or non-static\n+        if (m == null ||\n+                (Modifier.isPublic(type.getModifiers()) &&\n+                        (jreCompat.canAcccess(base, m) || base != null && jreCompat.canAcccess(null, m)))) {\n             return m;\n         }\n         Class<?>[] inf = type.getInterfaces();",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "63706: Avoid NPE accessing https port with plaintext",
        "commit": "https://github.com/apache/tomcat/commit/a47066f28d778aca8b04e5e1ebf2f92c57cf8d0b",
        "parent": "https://github.com/apache/tomcat/commit/083cd5ac2dc18ca94aceb83c6c28715febc0831c",
        "bug_id": "tomcat_9",
        "file": [
            {
                "sha": "88c17cccd35f1c50314ec5f3de1f72100459c2db",
                "filename": "java/org/apache/tomcat/util/net/Nio2Endpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/a47066f28d778aca8b04e5e1ebf2f92c57cf8d0b/java/org/apache/tomcat/util/net/Nio2Endpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/a47066f28d778aca8b04e5e1ebf2f92c57cf8d0b/java/org/apache/tomcat/util/net/Nio2Endpoint.java",
                "status": "modified",
                "changes": 10,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/Nio2Endpoint.java?ref=a47066f28d778aca8b04e5e1ebf2f92c57cf8d0b",
                "patch": "@@ -1578,11 +1578,13 @@ protected void populateLocalPort() {\n         public SSLSupport getSslSupport(String clientCertProvider) {\n             if (getSocket() instanceof SecureNio2Channel) {\n                 SecureNio2Channel ch = (SecureNio2Channel) getSocket();\n-                SSLSession session = ch.getSslEngine().getSession();\n-                return ((Nio2Endpoint) getEndpoint()).getSslImplementation().getSSLSupport(session);\n-            } else {\n-                return null;\n+                SSLEngine sslEngine = ch.getSslEngine();\n+                if (sslEngine != null) {\n+                    SSLSession session = sslEngine.getSession();\n+                    return ((Nio2Endpoint) getEndpoint()).getSslImplementation().getSSLSupport(session);\n+                }\n             }\n+            return null;\n         }\n \n ",
                "deletions": 4
            },
            {
                "sha": "78a74f002f1673bd15422c810dd2ed5840b1ad3f",
                "filename": "java/org/apache/tomcat/util/net/NioEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/a47066f28d778aca8b04e5e1ebf2f92c57cf8d0b/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/a47066f28d778aca8b04e5e1ebf2f92c57cf8d0b/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "status": "modified",
                "changes": 10,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/NioEndpoint.java?ref=a47066f28d778aca8b04e5e1ebf2f92c57cf8d0b",
                "patch": "@@ -1389,11 +1389,13 @@ protected void populateLocalPort() {\n         public SSLSupport getSslSupport(String clientCertProvider) {\n             if (getSocket() instanceof SecureNioChannel) {\n                 SecureNioChannel ch = (SecureNioChannel) getSocket();\n-                SSLSession session = ch.getSslEngine().getSession();\n-                return ((NioEndpoint) getEndpoint()).getSslImplementation().getSSLSupport(session);\n-            } else {\n-                return null;\n+                SSLEngine sslEngine = ch.getSslEngine();\n+                if (sslEngine != null) {\n+                    SSLSession session = sslEngine.getSession();\n+                    return ((NioEndpoint) getEndpoint()).getSslImplementation().getSSLSupport(session);\n+                }\n             }\n+            return null;\n         }\n \n ",
                "deletions": 4
            },
            {
                "sha": "18277caed9760ee4b07361c7d6d21bfcfd2f4850",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/a47066f28d778aca8b04e5e1ebf2f92c57cf8d0b/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/a47066f28d778aca8b04e5e1ebf2f92c57cf8d0b/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=a47066f28d778aca8b04e5e1ebf2f92c57cf8d0b",
                "patch": "@@ -58,6 +58,13 @@\n       </fix>\n     </changelog>\n   </subsection>\n+  <subsection name=\"Coyote\">\n+    <changelog>\n+      <fix>\n+        <bug>63706</bug>: Avoid NPE accessing https port with plaintext. (remm)\n+      </fix>\n+    </changelog>\n+  </subsection>\n   <subsection name=\"Web applications\">\n     <changelog>\n       <fix>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix potential NPE in some embedding scenarios.\n\nWhen embedding a Service directly and JNDI is enabled there is no Server",
        "commit": "https://github.com/apache/tomcat/commit/e469527d8da572b0483b485d7ed8cd1b998497ba",
        "parent": "https://github.com/apache/tomcat/commit/bee2dbb19986dbc060de30c31c3956ee31b04a01",
        "bug_id": "tomcat_10",
        "file": [
            {
                "sha": "0cacd3feaffb0680c0bb7d501e230380b0fd57b2",
                "filename": "java/org/apache/catalina/core/NamingContextListener.java",
                "blob_url": "https://github.com/apache/tomcat/blob/e469527d8da572b0483b485d7ed8cd1b998497ba/java/org/apache/catalina/core/NamingContextListener.java",
                "raw_url": "https://github.com/apache/tomcat/raw/e469527d8da572b0483b485d7ed8cd1b998497ba/java/org/apache/catalina/core/NamingContextListener.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/NamingContextListener.java?ref=e469527d8da572b0483b485d7ed8cd1b998497ba",
                "patch": "@@ -1102,7 +1102,11 @@ public void addResourceLink(ContextResourceLink resourceLink) {\n     private javax.naming.Context getGlobalNamingContext() {\n         if (container instanceof Context) {\n             Engine e = (Engine) ((Context) container).getParent().getParent();\n-            return e.getService().getServer().getGlobalNamingContext();\n+            Server s = e.getService().getServer();\n+            // When the Service is an embedded Service, there is no Server\n+            if (s != null) {\n+                return s.getGlobalNamingContext();\n+            }\n         }\n         return null;\n     }",
                "deletions": 1
            },
            {
                "sha": "3b19889069a23fffa49c782e2feed957da5af6fb",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/e469527d8da572b0483b485d7ed8cd1b998497ba/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/e469527d8da572b0483b485d7ed8cd1b998497ba/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=e469527d8da572b0483b485d7ed8cd1b998497ba",
                "patch": "@@ -61,6 +61,11 @@\n         <code>Host</code> is configured with an <code>xmlBase</code>. Patch\n         provided by uk4sx. (markt)\n       </fix>\n+      <fix>\n+        Avoid a potential <code>NullPointerException</code> on Service stop if a\n+        Service is embedded directly (i.e. with no Server) in an applciation\n+        and JNDI is enabled. Patch provided by S. Ali Tokmen. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Port NPE prevention fix from NIO",
        "commit": "https://github.com/apache/tomcat/commit/b7384c2f3444a31d5bdd97ad985c9a952d906220",
        "parent": "https://github.com/apache/tomcat/commit/c01cfa33f583e8dba232b8f66f26ccef007df566",
        "bug_id": "tomcat_11",
        "file": [
            {
                "sha": "66f9e20d4ff7686eb24e8b958660c8aabd01dfcd",
                "filename": "java/org/apache/tomcat/util/net/Nio2Endpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/b7384c2f3444a31d5bdd97ad985c9a952d906220/java/org/apache/tomcat/util/net/Nio2Endpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/b7384c2f3444a31d5bdd97ad985c9a952d906220/java/org/apache/tomcat/util/net/Nio2Endpoint.java",
                "status": "modified",
                "changes": 118,
                "additions": 68,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/Nio2Endpoint.java?ref=b7384c2f3444a31d5bdd97ad985c9a952d906220",
                "patch": "@@ -1467,87 +1467,105 @@ public SendfileState processSendfile(SendfileDataBase sendfileData) {\n \n         @Override\n         protected void populateRemoteAddr() {\n-            SocketAddress socketAddress = null;\n-            try {\n-                socketAddress = getSocket().getIOChannel().getRemoteAddress();\n-            } catch (IOException e) {\n-                // Ignore\n-            }\n-            if (socketAddress instanceof InetSocketAddress) {\n-                remoteAddr = ((InetSocketAddress) socketAddress).getAddress().getHostAddress();\n+            AsynchronousSocketChannel sc = getSocket().getIOChannel();\n+            if (sc != null) {\n+                SocketAddress socketAddress = null;\n+                try {\n+                    socketAddress = sc.getRemoteAddress();\n+                } catch (IOException e) {\n+                    // Ignore\n+                }\n+                if (socketAddress instanceof InetSocketAddress) {\n+                    remoteAddr = ((InetSocketAddress) socketAddress).getAddress().getHostAddress();\n+                }\n             }\n         }\n \n \n         @Override\n         protected void populateRemoteHost() {\n-            SocketAddress socketAddress = null;\n-            try {\n-                socketAddress = getSocket().getIOChannel().getRemoteAddress();\n-            } catch (IOException e) {\n-                log.warn(sm.getString(\"endpoint.warn.noRemoteHost\", getSocket()), e);\n-            }\n-            if (socketAddress instanceof InetSocketAddress) {\n-                remoteHost = ((InetSocketAddress) socketAddress).getAddress().getHostName();\n-                if (remoteAddr == null) {\n-                    remoteAddr = ((InetSocketAddress) socketAddress).getAddress().getHostAddress();\n+            AsynchronousSocketChannel sc = getSocket().getIOChannel();\n+            if (sc != null) {\n+                SocketAddress socketAddress = null;\n+                try {\n+                    socketAddress = sc.getRemoteAddress();\n+                } catch (IOException e) {\n+                    log.warn(sm.getString(\"endpoint.warn.noRemoteHost\", getSocket()), e);\n+                }\n+                if (socketAddress instanceof InetSocketAddress) {\n+                    remoteHost = ((InetSocketAddress) socketAddress).getAddress().getHostName();\n+                    if (remoteAddr == null) {\n+                        remoteAddr = ((InetSocketAddress) socketAddress).getAddress().getHostAddress();\n+                    }\n                 }\n             }\n         }\n \n \n         @Override\n         protected void populateRemotePort() {\n-            SocketAddress socketAddress = null;\n-            try {\n-                socketAddress = getSocket().getIOChannel().getRemoteAddress();\n-            } catch (IOException e) {\n-                log.warn(sm.getString(\"endpoint.warn.noRemotePort\", getSocket()), e);\n-            }\n-            if (socketAddress instanceof InetSocketAddress) {\n-                remotePort = ((InetSocketAddress) socketAddress).getPort();\n+            AsynchronousSocketChannel sc = getSocket().getIOChannel();\n+            if (sc != null) {\n+                SocketAddress socketAddress = null;\n+                try {\n+                    socketAddress = sc.getRemoteAddress();\n+                } catch (IOException e) {\n+                    log.warn(sm.getString(\"endpoint.warn.noRemotePort\", getSocket()), e);\n+                }\n+                if (socketAddress instanceof InetSocketAddress) {\n+                    remotePort = ((InetSocketAddress) socketAddress).getPort();\n+                }\n             }\n         }\n \n \n         @Override\n         protected void populateLocalName() {\n-            SocketAddress socketAddress = null;\n-            try {\n-                socketAddress = getSocket().getIOChannel().getLocalAddress();\n-            } catch (IOException e) {\n-                log.warn(sm.getString(\"endpoint.warn.noLocalName\", getSocket()), e);\n-            }\n-            if (socketAddress instanceof InetSocketAddress) {\n-                localName = ((InetSocketAddress) socketAddress).getHostName();\n+            AsynchronousSocketChannel sc = getSocket().getIOChannel();\n+            if (sc != null) {\n+                SocketAddress socketAddress = null;\n+                try {\n+                    socketAddress = sc.getLocalAddress();\n+                } catch (IOException e) {\n+                    log.warn(sm.getString(\"endpoint.warn.noLocalName\", getSocket()), e);\n+                }\n+                if (socketAddress instanceof InetSocketAddress) {\n+                    localName = ((InetSocketAddress) socketAddress).getHostName();\n+                }\n             }\n         }\n \n \n         @Override\n         protected void populateLocalAddr() {\n-            SocketAddress socketAddress = null;\n-            try {\n-                socketAddress = getSocket().getIOChannel().getLocalAddress();\n-            } catch (IOException e) {\n-                log.warn(sm.getString(\"endpoint.warn.noLocalAddr\", getSocket()), e);\n-            }\n-            if (socketAddress instanceof InetSocketAddress) {\n-                localAddr = ((InetSocketAddress) socketAddress).getAddress().getHostAddress();\n+            AsynchronousSocketChannel sc = getSocket().getIOChannel();\n+            if (sc != null) {\n+                SocketAddress socketAddress = null;\n+                try {\n+                    socketAddress = sc.getLocalAddress();\n+                } catch (IOException e) {\n+                    log.warn(sm.getString(\"endpoint.warn.noLocalAddr\", getSocket()), e);\n+                }\n+                if (socketAddress instanceof InetSocketAddress) {\n+                    localAddr = ((InetSocketAddress) socketAddress).getAddress().getHostAddress();\n+                }\n             }\n         }\n \n \n         @Override\n         protected void populateLocalPort() {\n-            SocketAddress socketAddress = null;\n-            try {\n-                socketAddress = getSocket().getIOChannel().getLocalAddress();\n-            } catch (IOException e) {\n-                log.warn(sm.getString(\"endpoint.warn.noLocalPort\", getSocket()), e);\n-            }\n-            if (socketAddress instanceof InetSocketAddress) {\n-                localPort = ((InetSocketAddress) socketAddress).getPort();\n+            AsynchronousSocketChannel sc = getSocket().getIOChannel();\n+            if (sc != null) {\n+                SocketAddress socketAddress = null;\n+                try {\n+                    socketAddress = sc.getLocalAddress();\n+                } catch (IOException e) {\n+                    log.warn(sm.getString(\"endpoint.warn.noLocalPort\", getSocket()), e);\n+                }\n+                if (socketAddress instanceof InetSocketAddress) {\n+                    localPort = ((InetSocketAddress) socketAddress).getPort();\n+                }\n             }\n         }\n ",
                "deletions": 50
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "NPE protection primarily for access log",
        "commit": "https://github.com/apache/tomcat/commit/65fb1ee548111021edde247f3b3c409ec95a5183",
        "parent": "https://github.com/apache/tomcat/commit/1fa57f587e9154f2a69d806274c815abf5739360",
        "bug_id": "tomcat_12",
        "file": [
            {
                "sha": "d41898d3f3c9f11cbf18a05647e6d73426d99df0",
                "filename": "java/org/apache/tomcat/util/net/NioEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/65fb1ee548111021edde247f3b3c409ec95a5183/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/65fb1ee548111021edde247f3b3c409ec95a5183/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "status": "modified",
                "changes": 50,
                "additions": 34,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/NioEndpoint.java?ref=65fb1ee548111021edde247f3b3c409ec95a5183",
                "patch": "@@ -1314,52 +1314,70 @@ public SendfileState processSendfile(SendfileDataBase sendfileData) {\n \n         @Override\n         protected void populateRemoteAddr() {\n-            InetAddress inetAddr = getSocket().getIOChannel().socket().getInetAddress();\n-            if (inetAddr != null) {\n-                remoteAddr = inetAddr.getHostAddress();\n+            SocketChannel sc = getSocket().getIOChannel();\n+            if (sc != null) {\n+                InetAddress inetAddr = sc.socket().getInetAddress();\n+                if (inetAddr != null) {\n+                    remoteAddr = inetAddr.getHostAddress();\n+                }\n             }\n         }\n \n \n         @Override\n         protected void populateRemoteHost() {\n-            InetAddress inetAddr = getSocket().getIOChannel().socket().getInetAddress();\n-            if (inetAddr != null) {\n-                remoteHost = inetAddr.getHostName();\n-                if (remoteAddr == null) {\n-                    remoteAddr = inetAddr.getHostAddress();\n+            SocketChannel sc = getSocket().getIOChannel();\n+            if (sc != null) {\n+                InetAddress inetAddr = sc.socket().getInetAddress();\n+                if (inetAddr != null) {\n+                    remoteHost = inetAddr.getHostName();\n+                    if (remoteAddr == null) {\n+                        remoteAddr = inetAddr.getHostAddress();\n+                    }\n                 }\n             }\n         }\n \n \n         @Override\n         protected void populateRemotePort() {\n-            remotePort = getSocket().getIOChannel().socket().getPort();\n+            SocketChannel sc = getSocket().getIOChannel();\n+            if (sc != null) {\n+                remotePort = sc.socket().getPort();\n+            }\n         }\n \n \n         @Override\n         protected void populateLocalName() {\n-            InetAddress inetAddr = getSocket().getIOChannel().socket().getLocalAddress();\n-            if (inetAddr != null) {\n-                localName = inetAddr.getHostName();\n+            SocketChannel sc = getSocket().getIOChannel();\n+            if (sc != null) {\n+                InetAddress inetAddr = sc.socket().getInetAddress();\n+                if (inetAddr != null) {\n+                    localName = inetAddr.getHostName();\n+                }\n             }\n         }\n \n \n         @Override\n         protected void populateLocalAddr() {\n-            InetAddress inetAddr = getSocket().getIOChannel().socket().getLocalAddress();\n-            if (inetAddr != null) {\n-                localAddr = inetAddr.getHostAddress();\n+            SocketChannel sc = getSocket().getIOChannel();\n+            if (sc != null) {\n+                InetAddress inetAddr = sc.socket().getInetAddress();\n+                if (inetAddr != null) {\n+                    localAddr = inetAddr.getHostAddress();\n+                }\n             }\n         }\n \n \n         @Override\n         protected void populateLocalPort() {\n-            localPort = getSocket().getIOChannel().socket().getLocalPort();\n+            SocketChannel sc = getSocket().getIOChannel();\n+            if (sc != null) {\n+                localPort = sc.socket().getLocalPort();\n+            }\n         }\n \n ",
                "deletions": 16
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid non fatal NPEs with Tribes when JMX is not available",
        "commit": "https://github.com/apache/tomcat/commit/e6eb0f38c5c2137b212d7182bfb9926c656b59f3",
        "parent": "https://github.com/apache/tomcat/commit/b228431569ee9ab6d1269b9ff59e5ada2186abb9",
        "bug_id": "tomcat_13",
        "file": [
            {
                "sha": "5c3893cc50f815ca7534acaf34a17534cd676996",
                "filename": "java/org/apache/catalina/tribes/jmx/JmxRegistry.java",
                "blob_url": "https://github.com/apache/tomcat/blob/e6eb0f38c5c2137b212d7182bfb9926c656b59f3/java/org/apache/catalina/tribes/jmx/JmxRegistry.java",
                "raw_url": "https://github.com/apache/tomcat/raw/e6eb0f38c5c2137b212d7182bfb9926c656b59f3/java/org/apache/catalina/tribes/jmx/JmxRegistry.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/tribes/jmx/JmxRegistry.java?ref=e6eb0f38c5c2137b212d7182bfb9926c656b59f3",
                "patch": "@@ -96,6 +96,9 @@ private static ObjectName createBaseObjectName(String domain, String prefix, Str\n     }\n \n     public ObjectName registerJmx(String keyprop, Object bean) {\n+        if (mbserver == null) {\n+            return null;\n+        }\n         String oNameStr = baseOname.toString() + keyprop;\n         ObjectName oName = null;\n         try {",
                "deletions": 0
            },
            {
                "sha": "a322c061e45ac05cf52816e1283ad3c72a5bad50",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/e6eb0f38c5c2137b212d7182bfb9926c656b59f3/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/e6eb0f38c5c2137b212d7182bfb9926c656b59f3/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=e6eb0f38c5c2137b212d7182bfb9926c656b59f3",
                "patch": "@@ -70,6 +70,9 @@\n         membership. The namespace is still a failure on startup but it is easy\n         to provide. (remm)\n       </fix>\n+      <fix>\n+        Avoid non fatal NPEs with Tribes when JMX is not available. (remm)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Other\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid possible NPE on commit",
        "commit": "https://github.com/apache/tomcat/commit/659b28c00d94e2a9049e0a8ac1e02bd4d36dd005",
        "parent": "https://github.com/apache/tomcat/commit/e9e9b2201069f8b0857c541018a7aa81a9cebe52",
        "bug_id": "tomcat_14",
        "file": [
            {
                "sha": "62d5223226d84bf4e9d3f478372d2476a603bcc3",
                "filename": "java/org/apache/coyote/http11/Http11OutputBuffer.java",
                "blob_url": "https://github.com/apache/tomcat/blob/659b28c00d94e2a9049e0a8ac1e02bd4d36dd005/java/org/apache/coyote/http11/Http11OutputBuffer.java",
                "raw_url": "https://github.com/apache/tomcat/raw/659b28c00d94e2a9049e0a8ac1e02bd4d36dd005/java/org/apache/coyote/http11/Http11OutputBuffer.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/Http11OutputBuffer.java?ref=659b28c00d94e2a9049e0a8ac1e02bd4d36dd005",
                "patch": "@@ -303,7 +303,10 @@ protected void commit() throws IOException {\n             // Sending the response header buffer\n             headerBuffer.flip();\n             try {\n-                socketWrapper.write(isBlocking(), headerBuffer);\n+                SocketWrapperBase<?> socketWrapper = this.socketWrapper;\n+                if (socketWrapper != null) {\n+                    socketWrapper.write(isBlocking(), headerBuffer);\n+                }\n             } finally {\n                 headerBuffer.position(0).limit(headerBuffer.capacity());\n             }",
                "deletions": 1
            },
            {
                "sha": "a11513764d9fc054e0c1c2ee2ed08e97b446d446",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/659b28c00d94e2a9049e0a8ac1e02bd4d36dd005/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/659b28c00d94e2a9049e0a8ac1e02bd4d36dd005/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=659b28c00d94e2a9049e0a8ac1e02bd4d36dd005",
                "patch": "@@ -75,6 +75,10 @@\n         was the only other sensible value, but without and impact beyond\n         certain microbenchmarks. (remm)\n       </fix>\n+      <fix>\n+        Avoid possible NPE in <code>Http11OutputBuffer.commit</code> on\n+        connector stopclose. (remm)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Other\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=63246\n\nFix a potential NullPointerException when calling\nAsyncContext.dispatch()",
        "commit": "https://github.com/apache/tomcat/commit/eb2db582dd7cc0e1d3deb271bc19c6236db8a6ba",
        "parent": "https://github.com/apache/tomcat/commit/a1cb1ac77e3a8fec1b00eb0e944842555da14f7d",
        "bug_id": "tomcat_15",
        "file": [
            {
                "sha": "46216449add1b563f59b51247f143ed8b888bf60",
                "filename": "java/org/apache/catalina/core/AsyncContextImpl.java",
                "blob_url": "https://github.com/apache/tomcat/blob/eb2db582dd7cc0e1d3deb271bc19c6236db8a6ba/java/org/apache/catalina/core/AsyncContextImpl.java",
                "raw_url": "https://github.com/apache/tomcat/raw/eb2db582dd7cc0e1d3deb271bc19c6236db8a6ba/java/org/apache/catalina/core/AsyncContextImpl.java",
                "status": "modified",
                "changes": 11,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/AsyncContextImpl.java?ref=eb2db582dd7cc0e1d3deb271bc19c6236db8a6ba",
                "patch": "@@ -176,7 +176,7 @@ public void dispatch(String path) {\n     }\n \n     @Override\n-    public void dispatch(ServletContext context, String path) {\n+    public void dispatch(ServletContext servletContext, String path) {\n         synchronized (asyncContextLock) {\n             if (log.isDebugEnabled()) {\n                 logDebug(\"dispatch   \");\n@@ -193,7 +193,7 @@ public void dispatch(ServletContext context, String path) {\n                 request.setAttribute(ASYNC_PATH_INFO, request.getPathInfo());\n                 request.setAttribute(ASYNC_QUERY_STRING, request.getQueryString());\n             }\n-            final RequestDispatcher requestDispatcher = context.getRequestDispatcher(path);\n+            final RequestDispatcher requestDispatcher = servletContext.getRequestDispatcher(path);\n             if (!(requestDispatcher instanceof AsyncDispatcher)) {\n                 throw new UnsupportedOperationException(\n                         sm.getString(\"asyncContextImpl.noAsyncDispatcher\"));\n@@ -202,11 +202,16 @@ public void dispatch(ServletContext context, String path) {\n                     (AsyncDispatcher) requestDispatcher;\n             final ServletRequest servletRequest = getRequest();\n             final ServletResponse servletResponse = getResponse();\n+            // https://bz.apache.org/bugzilla/show_bug.cgi?id=63246\n+            // Take a local copy as the dispatch may complete the\n+            // request/response and that in turn may trigger recycling of this\n+            // object before the in-progress count can be decremented\n+            final Context context = this.context;\n             this.dispatch = new AsyncRunnable(\n                     request, applicationDispatcher, servletRequest, servletResponse);\n             this.request.getCoyoteRequest().action(ActionCode.ASYNC_DISPATCH, null);\n             clearServletRequestResponse();\n-            this.context.decrementInProgressAsyncCount();\n+            context.decrementInProgressAsyncCount();\n         }\n     }\n ",
                "deletions": 3
            },
            {
                "sha": "cc21008244ac457d7d4bc56e957f15c3d02c5b2b",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/eb2db582dd7cc0e1d3deb271bc19c6236db8a6ba/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/eb2db582dd7cc0e1d3deb271bc19c6236db8a6ba/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=eb2db582dd7cc0e1d3deb271bc19c6236db8a6ba",
                "patch": "@@ -88,6 +88,10 @@\n         thanks to YourKit Java profiler for helping to track down the wasted\n         memory and the root causes. (markt)\n       </fix>\n+      <fix>\n+        <bug>63246</bug>: Fix a potential <code>NullPointerException</code> when\n+        calling <code>AsyncContext.dispatch()</code>. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid possible NPE reported by Coverity scan",
        "commit": "https://github.com/apache/tomcat/commit/1488552190f3272ab1c57baa4ed34e3e1f84e6c9",
        "parent": "https://github.com/apache/tomcat/commit/7a471d3238bc771d17f23ac07c84a4147253b458",
        "bug_id": "tomcat_16",
        "file": [
            {
                "sha": "407414e19e8e92b4660928aa2514d8bfe2e14c91",
                "filename": "java/org/apache/catalina/realm/JAASCallbackHandler.java",
                "blob_url": "https://github.com/apache/tomcat/blob/1488552190f3272ab1c57baa4ed34e3e1f84e6c9/java/org/apache/catalina/realm/JAASCallbackHandler.java",
                "raw_url": "https://github.com/apache/tomcat/raw/1488552190f3272ab1c57baa4ed34e3e1f84e6c9/java/org/apache/catalina/realm/JAASCallbackHandler.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/realm/JAASCallbackHandler.java?ref=1488552190f3272ab1c57baa4ed34e3e1f84e6c9",
                "patch": "@@ -90,7 +90,7 @@ public JAASCallbackHandler(JAASRealm realm, String username,\n         this.realm = realm;\n         this.username = username;\n \n-        if (realm.hasMessageDigest()) {\n+        if (password != null && realm.hasMessageDigest()) {\n             this.password = realm.getCredentialHandler().mutate(password);\n         }\n         else {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix rare potential NPE identified by Coverity Scan.",
        "commit": "https://github.com/apache/tomcat/commit/0483c93ddd4ab0ac7742e154d1e1e1b3c4475f6c",
        "parent": "https://github.com/apache/tomcat/commit/21ee1c0b33aed7908a7aa5f415ff8775cfd92119",
        "bug_id": "tomcat_17",
        "file": [
            {
                "sha": "de572e603b467544c2ff0c13aa807ad05d3948df",
                "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
                "blob_url": "https://github.com/apache/tomcat/blob/0483c93ddd4ab0ac7742e154d1e1e1b3c4475f6c/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "raw_url": "https://github.com/apache/tomcat/raw/0483c93ddd4ab0ac7742e154d1e1e1b3c4475f6c/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/CoyoteAdapter.java?ref=0483c93ddd4ab0ac7742e154d1e1e1b3c4475f6c",
                "patch": "@@ -816,7 +816,7 @@ protected boolean postParseRequest(org.apache.coyote.Request req, Request reques\n             if (wrapper != null) {\n                 String[] methods = wrapper.getServletMethods();\n                 if (methods != null) {\n-                    for (int i=0; i<methods.length; i++) {\n+                    for (int i=0; i < methods.length; i++) {\n                         if (\"TRACE\".equals(methods[i])) {\n                             continue;\n                         }\n@@ -828,7 +828,9 @@ protected boolean postParseRequest(org.apache.coyote.Request req, Request reques\n                     }\n                 }\n             }\n-            res.addHeader(\"Allow\", header);\n+            if (header != null) {\n+                res.addHeader(\"Allow\", header);\n+            }\n             response.sendError(405, \"TRACE method is not allowed\");\n             // Safe to skip the remainder of this method.\n             return true;",
                "deletions": 2
            },
            {
                "sha": "24cc2b067a9b35bae5ecde3eeb191a26209bb0b8",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/0483c93ddd4ab0ac7742e154d1e1e1b3c4475f6c/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/0483c93ddd4ab0ac7742e154d1e1e1b3c4475f6c/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=0483c93ddd4ab0ac7742e154d1e1e1b3c4475f6c",
                "patch": "@@ -72,6 +72,10 @@\n         Ensure that the default servlet reads the entire global XSLT file if\n         one is defined. Identified by Coverity Scan. (markt)\n       </fix>\n+      <fix>\n+        Avoid potential <code>NullPointerException</code> when generating an\n+        HTTP <code>Allow</code> header. Identified by Coverity Scan. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE when minimal Context defined in server.xml",
        "commit": "https://github.com/apache/tomcat/commit/9480788ead029add98c146b44cb7484da619ee9d",
        "parent": "https://github.com/apache/tomcat/commit/82960cc64160419765335c238a8f596c3986b386",
        "bug_id": "tomcat_18",
        "file": [
            {
                "sha": "2f561d53bde5ca93c33ccdf3b683041f6a722757",
                "filename": "java/org/apache/catalina/core/StandardHost.java",
                "blob_url": "https://github.com/apache/tomcat/blob/9480788ead029add98c146b44cb7484da619ee9d/java/org/apache/catalina/core/StandardHost.java",
                "raw_url": "https://github.com/apache/tomcat/raw/9480788ead029add98c146b44cb7484da619ee9d/java/org/apache/catalina/core/StandardHost.java",
                "status": "modified",
                "changes": 14,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/StandardHost.java?ref=9480788ead029add98c146b44cb7484da619ee9d",
                "patch": "@@ -41,6 +41,7 @@\n import org.apache.catalina.LifecycleListener;\n import org.apache.catalina.Valve;\n import org.apache.catalina.loader.WebappClassLoaderBase;\n+import org.apache.catalina.util.ContextName;\n import org.apache.juli.logging.Log;\n import org.apache.juli.logging.LogFactory;\n import org.apache.tomcat.util.ExceptionUtils;\n@@ -687,11 +688,20 @@ public void addAlias(String alias) {\n     @Override\n     public void addChild(Container child) {\n \n-        child.addLifecycleListener(new MemoryLeakTrackingListener());\n-\n         if (!(child instanceof Context))\n             throw new IllegalArgumentException\n                 (sm.getString(\"standardHost.notContext\"));\n+\n+        child.addLifecycleListener(new MemoryLeakTrackingListener());\n+\n+        // Avoid NPE for case where Context is defined in server.xml with only a\n+        // docBase\n+        Context context = (Context) child;\n+        if (context.getPath() == null) {\n+            ContextName cn = new ContextName(context.getDocBase(), true);\n+            context.setPath(cn.getPath());\n+        }\n+\n         super.addChild(child);\n \n     }",
                "deletions": 2
            },
            {
                "sha": "1636b0a9752273433a7632acbb7afec92ed91c0e",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/9480788ead029add98c146b44cb7484da619ee9d/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/9480788ead029add98c146b44cb7484da619ee9d/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=9480788ead029add98c146b44cb7484da619ee9d",
                "patch": "@@ -95,6 +95,11 @@\n         <code>ArrayIndexOutOfBoundsException</code>s when accessing large files\n         via the default servlet when resource caching has been disabled. (markt)\n       </fix>\n+      <fix>\n+        Avoid a <code>NullPointerException</code> when a <code>Context</code> is\n+        defined in <code>server.xml</code> with a <code>docBase</code> but not\n+        the optional <code>path</code>. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE when using with a default Tomcat configuration",
        "commit": "https://github.com/apache/tomcat/commit/1b7f49ce6dfa2f7e7b33bb1b367575c75d5cf865",
        "parent": "https://github.com/apache/tomcat/commit/c51c0ac04f5e37c327e9b1aa48e92889d1885d97",
        "bug_id": "tomcat_19",
        "file": [
            {
                "sha": "ef7d34118749acb07f3371a619e89978ca2e1b8d",
                "filename": "java/org/apache/tomcat/util/modeler/NoDescriptorRegistry.java",
                "blob_url": "https://github.com/apache/tomcat/blob/1b7f49ce6dfa2f7e7b33bb1b367575c75d5cf865/java/org/apache/tomcat/util/modeler/NoDescriptorRegistry.java",
                "raw_url": "https://github.com/apache/tomcat/raw/1b7f49ce6dfa2f7e7b33bb1b367575c75d5cf865/java/org/apache/tomcat/util/modeler/NoDescriptorRegistry.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/modeler/NoDescriptorRegistry.java?ref=1b7f49ce6dfa2f7e7b33bb1b367575c75d5cf865",
                "patch": "@@ -203,13 +203,13 @@ public ObjectInstance getObjectInstance(ObjectName name) throws InstanceNotFound\n \n         @Override\n         public Set<ObjectInstance> queryMBeans(ObjectName name, QueryExp query) {\n-            return null;\n+            return Collections.emptySet();\n         }\n \n \n         @Override\n         public Set<ObjectName> queryNames(ObjectName name, QueryExp query) {\n-            return null;\n+            return Collections.emptySet();\n         }\n \n ",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid other cases of NPEs on stop\n\nAs found in the CI logs.",
        "commit": "https://github.com/apache/tomcat/commit/f562edd3302866f34c0ca9fa97f6ff414450f1ae",
        "parent": "https://github.com/apache/tomcat/commit/dc3741107ee6ffcbe0860e46d7f7d05a4d9f63c4",
        "bug_id": "tomcat_20",
        "file": [
            {
                "sha": "aff0b425b6775f2ea7d10b72517aa1c0982702cb",
                "filename": "java/org/apache/catalina/core/StandardWrapperValve.java",
                "blob_url": "https://github.com/apache/tomcat/blob/f562edd3302866f34c0ca9fa97f6ff414450f1ae/java/org/apache/catalina/core/StandardWrapperValve.java",
                "raw_url": "https://github.com/apache/tomcat/raw/f562edd3302866f34c0ca9fa97f6ff414450f1ae/java/org/apache/catalina/core/StandardWrapperValve.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/StandardWrapperValve.java?ref=f562edd3302866f34c0ca9fa97f6ff414450f1ae",
                "patch": "@@ -29,6 +29,7 @@\n import javax.servlet.UnavailableException;\n import javax.servlet.http.HttpServletResponse;\n \n+import org.apache.catalina.Container;\n import org.apache.catalina.Context;\n import org.apache.catalina.Globals;\n import org.apache.catalina.LifecycleException;\n@@ -174,6 +175,7 @@ public final void invoke(Request request, Response response)\n \n         // Call the filter chain for this request\n         // NOTE: This also calls the servlet's service() method\n+        Container container = this.container;\n         try {\n             if ((servlet != null) && (filterChain != null)) {\n                 // Swallow output if needed",
                "deletions": 0
            },
            {
                "sha": "5632de212c8d3704fea71bf7b0ff130588a33529",
                "filename": "java/org/apache/coyote/http11/Http11InputBuffer.java",
                "blob_url": "https://github.com/apache/tomcat/blob/f562edd3302866f34c0ca9fa97f6ff414450f1ae/java/org/apache/coyote/http11/Http11InputBuffer.java",
                "raw_url": "https://github.com/apache/tomcat/raw/f562edd3302866f34c0ca9fa97f6ff414450f1ae/java/org/apache/coyote/http11/Http11InputBuffer.java",
                "status": "modified",
                "changes": 9,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/Http11InputBuffer.java?ref=f562edd3302866f34c0ca9fa97f6ff414450f1ae",
                "patch": "@@ -22,6 +22,7 @@\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n \n+import org.apache.coyote.CloseNowException;\n import org.apache.coyote.InputBuffer;\n import org.apache.coyote.Request;\n import org.apache.juli.logging.Log;\n@@ -728,7 +729,13 @@ private boolean fill(boolean block) throws IOException {\n             byteBuffer.position(byteBuffer.limit());\n         }\n         byteBuffer.limit(byteBuffer.capacity());\n-        int nRead = wrapper.read(block, byteBuffer);\n+        SocketWrapperBase<?> socketWrapper = this.wrapper;\n+        int nRead = -1;\n+        if (socketWrapper != null) {\n+            nRead = socketWrapper.read(block, byteBuffer);\n+        } else {\n+            throw new CloseNowException(sm.getString(\"iib.eof.error\"));\n+        }\n         byteBuffer.limit(byteBuffer.position()).reset();\n         if (nRead > 0) {\n             return true;",
                "deletions": 1
            },
            {
                "sha": "c369837b42587d06ff9aa45d1db104ed669bc4d8",
                "filename": "java/org/apache/coyote/http11/Http11OutputBuffer.java",
                "blob_url": "https://github.com/apache/tomcat/blob/f562edd3302866f34c0ca9fa97f6ff414450f1ae/java/org/apache/coyote/http11/Http11OutputBuffer.java",
                "raw_url": "https://github.com/apache/tomcat/raw/f562edd3302866f34c0ca9fa97f6ff414450f1ae/java/org/apache/coyote/http11/Http11OutputBuffer.java",
                "status": "modified",
                "changes": 10,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/Http11OutputBuffer.java?ref=f562edd3302866f34c0ca9fa97f6ff414450f1ae",
                "patch": "@@ -21,6 +21,7 @@\n import java.util.Arrays;\n \n import org.apache.coyote.ActionCode;\n+import org.apache.coyote.CloseNowException;\n import org.apache.coyote.Response;\n import org.apache.tomcat.util.buf.ByteChunk;\n import org.apache.tomcat.util.buf.MessageBytes;\n@@ -306,6 +307,8 @@ protected void commit() throws IOException {\n                 SocketWrapperBase<?> socketWrapper = this.socketWrapper;\n                 if (socketWrapper != null) {\n                     socketWrapper.write(isBlocking(), headerBuffer);\n+                } else {\n+                    throw new CloseNowException(sm.getString(\"iob.failedwrite\"));\n                 }\n             } finally {\n                 headerBuffer.position(0).limit(headerBuffer.capacity());\n@@ -530,7 +533,12 @@ boolean isChunking() {\n         public int doWrite(ByteBuffer chunk) throws IOException {\n             try {\n                 int len = chunk.remaining();\n-                socketWrapper.write(isBlocking(), chunk);\n+                SocketWrapperBase<?> socketWrapper = Http11OutputBuffer.this.socketWrapper;\n+                if (socketWrapper != null) {\n+                    socketWrapper.write(isBlocking(), chunk);\n+                } else {\n+                    throw new CloseNowException(sm.getString(\"iob.failedwrite\"));\n+                }\n                 len -= chunk.remaining();\n                 byteCount += len;\n                 return len;",
                "deletions": 1
            },
            {
                "sha": "194686319384f6de2b3f20a1f642f67696339385",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/f562edd3302866f34c0ca9fa97f6ff414450f1ae/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/f562edd3302866f34c0ca9fa97f6ff414450f1ae/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=f562edd3302866f34c0ca9fa97f6ff414450f1ae",
                "patch": "@@ -81,8 +81,7 @@\n         certain microbenchmarks. (remm)\n       </fix>\n       <fix>\n-        Avoid possible NPE in <code>Http11OutputBuffer.commit</code> on\n-        connector stopclose. (remm)\n+        Avoid possible NPEs in on connector stop. (remm)\n       </fix>\n     </changelog>\n   </subsection>",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Attempt to fix APR flush\n\nFix NPE I saw in maintain. Do a CI run to see the results (will still be\ndisabled afterwards since the performance is obviously worse).",
        "commit": "https://github.com/apache/tomcat/commit/32d82429b158d29ea1176fd1b4cb0b548cb9b78c",
        "parent": "https://github.com/apache/tomcat/commit/41131b791394d0fcb186c2fd63c4f0752a34ce16",
        "bug_id": "tomcat_21",
        "file": [
            {
                "sha": "9767111150b7fb90a101ac858ef478b25924aa5e",
                "filename": "java/org/apache/tomcat/util/net/AprEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/32d82429b158d29ea1176fd1b4cb0b548cb9b78c/java/org/apache/tomcat/util/net/AprEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/32d82429b158d29ea1176fd1b4cb0b548cb9b78c/java/org/apache/tomcat/util/net/AprEndpoint.java",
                "status": "modified",
                "changes": 44,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/AprEndpoint.java?ref=32d82429b158d29ea1176fd1b4cb0b548cb9b78c",
                "patch": "@@ -122,7 +122,7 @@ public AprEndpoint() {\n         // - no IO vectoring\n         // - mandatory use of direct buffers causing required output buffering\n         // - needs extra output flushes due to the buffering\n-        setUseAsyncIO(false);\n+        //setUseAsyncIO(false);\n     }\n \n     // ------------------------------------------------------------- Properties\n@@ -1319,15 +1319,17 @@ private synchronized void maintain() {\n                             Long.valueOf(socket)));\n                 }\n                 AprSocketWrapper socketWrapper = connections.get(Long.valueOf(socket));\n-                socketWrapper.setError(new SocketTimeoutException());\n-                if (socketWrapper.readOperation != null || socketWrapper.writeOperation != null) {\n-                    if (socketWrapper.readOperation != null) {\n-                        socketWrapper.readOperation.process();\n+                if (socketWrapper != null) {\n+                    socketWrapper.setError(new SocketTimeoutException());\n+                    if (socketWrapper.readOperation != null || socketWrapper.writeOperation != null) {\n+                        if (socketWrapper.readOperation != null) {\n+                            socketWrapper.readOperation.process();\n+                        } else {\n+                            socketWrapper.writeOperation.process();\n+                        }\n                     } else {\n-                        socketWrapper.writeOperation.process();\n+                        processSocket(socketWrapper, SocketEvent.ERROR, true);\n                     }\n-                } else {\n-                    processSocket(socketWrapper, SocketEvent.ERROR, true);\n                 }\n                 socket = timeouts.check(date);\n             }\n@@ -2790,11 +2792,6 @@ public void run() {\n                                 }\n                                 return;\n                             }\n-                            if (!read && flush(false)) {\n-                                inline = false;\n-                                registerWriteInterest();\n-                                return;\n-                            }\n                             // Find the buffer on which the operation will be performed (no vectoring with APR)\n                             ByteBuffer buffer = null;\n                             for (int i = 0; i < length; i++) {\n@@ -2803,23 +2800,20 @@ public void run() {\n                                     break;\n                                 }\n                             }\n-                            if (buffer == null ) {\n+                            if (buffer == null) {\n                                 // Nothing to do\n                                 return;\n                             }\n                             if (read) {\n                                 nBytes = read(false, buffer);\n                             } else {\n-                                int remaining = buffer.remaining();\n-                                writeNonBlockingDirect(buffer);\n-                                nBytes = remaining - buffer.remaining();\n-                                if (nBytes > 0) {\n-                                    try {\n-                                        if (flush(false)) {\n-                                            registerWriteInterest();\n-                                        }\n-                                    } catch (IOException e) {\n-                                        // Ignore, will be delayed to later\n+                                if (!flush(false)) {\n+                                    int remaining = buffer.remaining();\n+                                    writeNonBlockingDirect(buffer);\n+                                    nBytes = remaining - buffer.remaining();\n+                                    if (nBytes > 0 && !buffer.isDirect() && flush(block == BlockingMode.BLOCK)) {\n+                                        inline = false;\n+                                        registerWriteInterest();\n                                     }\n                                 }\n                             }\n@@ -2832,7 +2826,7 @@ public void run() {\n                     }\n                 }\n                 if (nBytes > 0) {\n-                    // The bytes read are only updated in the completion handler\n+                    // The bytes processed are only updated in the completion handler\n                     completion.completed(Long.valueOf(nBytes), this);\n                 } else if (nBytes < 0 || getError() != null) {\n                     IOException error = getError();",
                "deletions": 25
            },
            {
                "sha": "a23448b1ed7462da09fb903ee3051dd3361c182b",
                "filename": "java/org/apache/tomcat/util/net/NioEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/32d82429b158d29ea1176fd1b4cb0b548cb9b78c/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/32d82429b158d29ea1176fd1b4cb0b548cb9b78c/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/NioEndpoint.java?ref=32d82429b158d29ea1176fd1b4cb0b548cb9b78c",
                "patch": "@@ -1481,7 +1481,7 @@ public void run() {\n                     }\n                 }\n                 if (nBytes > 0) {\n-                    // The bytes read are only updated in the completion handler\n+                    // The bytes processed are only updated in the completion handler\n                     completion.completed(Long.valueOf(nBytes), this);\n                 } else if (nBytes < 0 || getError() != null) {\n                     IOException error = getError();",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "The closed channels need to be immutable so override a few more methods\n\nAvoiding a NPE in NioBlockignSelector is not possible however and\ngetting there is wasteful, so filter out read as well. In theory ==\nCLOSED_NIO_CHANNEL would be enough but use instanceof for now.",
        "commit": "https://github.com/apache/tomcat/commit/339b40bc07bdba9ded565929b9a3448c5a78f015",
        "parent": "https://github.com/apache/tomcat/commit/7046644bf361b89afc246b6643e24ce2ae60cacc",
        "bug_id": "tomcat_22",
        "file": [
            {
                "sha": "f6b9f0c02ca34b001299a9f39e201e10147c1ecb",
                "filename": "java/org/apache/tomcat/util/net/Nio2Channel.java",
                "blob_url": "https://github.com/apache/tomcat/blob/339b40bc07bdba9ded565929b9a3448c5a78f015/java/org/apache/tomcat/util/net/Nio2Channel.java",
                "raw_url": "https://github.com/apache/tomcat/raw/339b40bc07bdba9ded565929b9a3448c5a78f015/java/org/apache/tomcat/util/net/Nio2Channel.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/Nio2Channel.java?ref=339b40bc07bdba9ded565929b9a3448c5a78f015",
                "patch": "@@ -251,7 +251,7 @@ public Integer get(long timeout, TimeUnit unit)\n     static final Nio2Channel CLOSED_NIO2_CHANNEL = new ClosedNio2Channel();\n     public static class ClosedNio2Channel extends Nio2Channel {\n         public ClosedNio2Channel() {\n-            super(null);\n+            super(SocketBufferHandler.EMPTY);\n         }\n         @Override\n         public void close() throws IOException {\n@@ -267,6 +267,9 @@ public void reset(AsynchronousSocketChannel channel, SocketWrapperBase<Nio2Chann\n         public void free() {\n         }\n         @Override\n+        public void setAppReadBufHandler(ApplicationBufferHandler handler) {\n+        }\n+        @Override\n         public Future<Integer> read(ByteBuffer dst) {\n             return DONE_INT;\n         }",
                "deletions": 1
            },
            {
                "sha": "1de1e803e6a6674b9ef9f30122e3d9f10e57b3cd",
                "filename": "java/org/apache/tomcat/util/net/NioChannel.java",
                "blob_url": "https://github.com/apache/tomcat/blob/339b40bc07bdba9ded565929b9a3448c5a78f015/java/org/apache/tomcat/util/net/NioChannel.java",
                "raw_url": "https://github.com/apache/tomcat/raw/339b40bc07bdba9ded565929b9a3448c5a78f015/java/org/apache/tomcat/util/net/NioChannel.java",
                "status": "modified",
                "changes": 13,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/NioChannel.java?ref=339b40bc07bdba9ded565929b9a3448c5a78f015",
                "patch": "@@ -246,7 +246,6 @@ protected void checkInterruptStatus() throws IOException {\n         }\n     }\n \n-\n     private ApplicationBufferHandler appReadBufHandler;\n     public void setAppReadBufHandler(ApplicationBufferHandler handler) {\n         this.appReadBufHandler = handler;\n@@ -258,7 +257,7 @@ protected ApplicationBufferHandler getAppReadBufHandler() {\n     static final NioChannel CLOSED_NIO_CHANNEL = new ClosedNioChannel();\n     public static class ClosedNioChannel extends NioChannel {\n         public ClosedNioChannel() {\n-            super(null, null);\n+            super(null, SocketBufferHandler.EMPTY);\n         }\n         @Override\n         public void close() throws IOException {\n@@ -274,6 +273,15 @@ public void reset() throws IOException {\n         public void free() {\n         }\n         @Override\n+        void setSocketWrapper(NioSocketWrapper socketWrapper) {\n+        }\n+        @Override\n+        public void setIOChannel(SocketChannel sc) {\n+        }\n+        @Override\n+        public void setAppReadBufHandler(ApplicationBufferHandler handler) {\n+        }\n+        @Override\n         public int read(ByteBuffer dst) throws IOException {\n             return -1;\n         }\n@@ -297,4 +305,5 @@ public String toString() {\n             return \"Closed NioChannel\";\n         }\n     }\n+\n }",
                "deletions": 2
            },
            {
                "sha": "68f401a5e0e75064dc9942181105d333a7ac5b9c",
                "filename": "java/org/apache/tomcat/util/net/NioEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/339b40bc07bdba9ded565929b9a3448c5a78f015/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/339b40bc07bdba9ded565929b9a3448c5a78f015/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/NioEndpoint.java?ref=339b40bc07bdba9ded565929b9a3448c5a78f015",
                "patch": "@@ -1215,7 +1215,10 @@ private int fillReadBuffer(boolean block) throws IOException {\n \n         private int fillReadBuffer(boolean block, ByteBuffer to) throws IOException {\n             int nRead;\n-            NioChannel channel = getSocket();\n+            NioChannel socket = getSocket();\n+            if (socket instanceof ClosedNioChannel) {\n+                throw new ClosedChannelException();\n+            }\n             if (block) {\n                 Selector selector = null;\n                 try {\n@@ -1224,14 +1227,14 @@ private int fillReadBuffer(boolean block, ByteBuffer to) throws IOException {\n                     // Ignore\n                 }\n                 try {\n-                    nRead = pool.read(to, channel, selector, getReadTimeout());\n+                    nRead = pool.read(to, socket, selector, getReadTimeout());\n                 } finally {\n                     if (selector != null) {\n                         pool.put(selector);\n                     }\n                 }\n             } else {\n-                nRead = channel.read(to);\n+                nRead = socket.read(to);\n                 if (nRead == -1) {\n                     throw new EOFException();\n                 }",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Protect from NPE in testcase.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1849121 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/fb6769d7307a4b20a516b2e0869f5ae5e6b3c660",
        "parent": "https://github.com/apache/tomcat/commit/088c36c306314c0c79eba22f75ed76275683e2ff",
        "bug_id": "tomcat_23",
        "file": [
            {
                "sha": "43d02f10f90b143e1332e7d9652db9317483f837",
                "filename": "java/org/apache/catalina/tribes/membership/cloud/DNSMembershipProvider.java",
                "blob_url": "https://github.com/apache/tomcat/blob/fb6769d7307a4b20a516b2e0869f5ae5e6b3c660/java/org/apache/catalina/tribes/membership/cloud/DNSMembershipProvider.java",
                "raw_url": "https://github.com/apache/tomcat/raw/fb6769d7307a4b20a516b2e0869f5ae5e6b3c660/java/org/apache/catalina/tribes/membership/cloud/DNSMembershipProvider.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/tribes/membership/cloud/DNSMembershipProvider.java?ref=fb6769d7307a4b20a516b2e0869f5ae5e6b3c660",
                "patch": "@@ -80,7 +80,7 @@ public boolean stop(int level) throws Exception {\n                 String ip = inetAddress.getHostAddress();\n                 byte[] id = md5.digest(ip.getBytes());\n                 // We found ourselves, ignore\n-                if (localIp.equals(ip)) {\n+                if (ip.equals(localIp)) {\n                     // Update the UID on initial lookup\n                     Member localMember = service.getLocalMember(false);\n                     if (localMember.getUniqueId() == CloudMembershipService.INITIAL_ID && localMember instanceof MemberImpl) {",
                "deletions": 1
            },
            {
                "sha": "153359dc5339dd19af691fab823a413026fe8207",
                "filename": "java/org/apache/catalina/tribes/membership/cloud/KubernetesMembershipProvider.java",
                "blob_url": "https://github.com/apache/tomcat/blob/fb6769d7307a4b20a516b2e0869f5ae5e6b3c660/java/org/apache/catalina/tribes/membership/cloud/KubernetesMembershipProvider.java",
                "raw_url": "https://github.com/apache/tomcat/raw/fb6769d7307a4b20a516b2e0869f5ae5e6b3c660/java/org/apache/catalina/tribes/membership/cloud/KubernetesMembershipProvider.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/tribes/membership/cloud/KubernetesMembershipProvider.java?ref=fb6769d7307a4b20a516b2e0869f5ae5e6b3c660",
                "patch": "@@ -200,7 +200,7 @@ protected void parsePods(Reader reader, List<MemberImpl> members) {\n                 String uid = (objectUid == null) ? podIP : objectUid.toString();\n \n                 // We found ourselves, ignore\n-                if (localIp.equals(podIP)) {\n+                if (podIP.equals(localIp)) {\n                     // Update the UID on initial lookup\n                     Member localMember = service.getLocalMember(false);\n                     if (localMember.getUniqueId() == CloudMembershipService.INITIAL_ID && localMember instanceof MemberImpl) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix regression (NPE) caused by r1845903\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1845923 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/0bd720df61ac1c9520455ae68f71d02a8d76e030",
        "parent": "https://github.com/apache/tomcat/commit/8ea043d94472f4befd3eda7125b06fee734f6eaa",
        "bug_id": "tomcat_24",
        "file": [
            {
                "sha": "5b9124544abef897835c305279b1663fd4c31363",
                "filename": "test/org/apache/juli/TestFileHandlerNonRotatable.java",
                "blob_url": "https://github.com/apache/tomcat/blob/0bd720df61ac1c9520455ae68f71d02a8d76e030/test/org/apache/juli/TestFileHandlerNonRotatable.java",
                "raw_url": "https://github.com/apache/tomcat/raw/0bd720df61ac1c9520455ae68f71d02a8d76e030/test/org/apache/juli/TestFileHandlerNonRotatable.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/juli/TestFileHandlerNonRotatable.java?ref=0bd720df61ac1c9520455ae68f71d02a8d76e030",
                "patch": "@@ -31,6 +31,8 @@\n \n     @BeforeClass\n     public static void setUpPerTestClass() throws Exception {\n+        LoggingBaseTest.setUpPerTestClass();\n+\n         System.setProperty(\"java.util.logging.manager\",\n                 \"org.apache.juli.ClassLoaderLogManager\");\n         String configLoggingPath = TestFileHandlerNonRotatable.class",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix potential NullPointerException in replaceSystemProperties() seemingly caused by changing StringManager sm declaration to static\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1832856 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/bf5c4a875b0d3ac0f03dca773aa47d0b6b9ad625",
        "parent": "https://github.com/apache/tomcat/commit/7f77c55d8bec8f52dd58ed55271b3fa1d395d9a3",
        "bug_id": "tomcat_25",
        "file": [
            {
                "sha": "6fcb60b433416d6ea65df729d0af1fc2f782010e",
                "filename": "java/org/apache/tomcat/util/digester/Digester.java",
                "blob_url": "https://github.com/apache/tomcat/blob/bf5c4a875b0d3ac0f03dca773aa47d0b6b9ad625/java/org/apache/tomcat/util/digester/Digester.java",
                "raw_url": "https://github.com/apache/tomcat/raw/bf5c4a875b0d3ac0f03dca773aa47d0b6b9ad625/java/org/apache/tomcat/util/digester/Digester.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/digester/Digester.java?ref=bf5c4a875b0d3ac0f03dca773aa47d0b6b9ad625",
                "patch": "@@ -84,6 +84,7 @@\n \n     protected static IntrospectionUtils.PropertySource propertySource;\n     private static boolean propertySourceSet = false;\n+    protected static final StringManager sm = StringManager.getManager(Digester.class);\n \n     static {\n         String className = System.getProperty(\"org.apache.tomcat.util.digester.PROPERTY_SOURCE\");\n@@ -309,7 +310,6 @@ public String getProperty(String key) {\n      * The Log to which most logging calls will be made.\n      */\n     protected Log log = LogFactory.getLog(Digester.class);\n-    protected static final StringManager sm = StringManager.getManager(Digester.class);\n \n     /**\n      * The Log to which all SAX event related logging calls will be made.",
                "deletions": 1
            },
            {
                "sha": "f17d02520afe8a5604d6bf65707c106e153077e7",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/bf5c4a875b0d3ac0f03dca773aa47d0b6b9ad625/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/bf5c4a875b0d3ac0f03dca773aa47d0b6b9ad625/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=bf5c4a875b0d3ac0f03dca773aa47d0b6b9ad625",
                "patch": "@@ -191,6 +191,10 @@\n         not contain leading zeros in the IPv4 part. Based on a patch by Katya\n         Stoycheva. (markt)\n       </fix>\n+      <fix>\n+        Fix <code>NullPointerException</code> thrown from <code>\n+        replaceSystemProperties()</code> when trying to log messages. (csutherl)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Jasper\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=62757\nCorrect a regression in the fix for bug 62603 that caused NullPointerExceptions when compiling tag files on first access when development mode was disabled and background compilation was enabled.\nBased on a patch by Jordi Llach.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1842725 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/1ea1e41a11e6feae448ab01c5c2d2226d178e564",
        "parent": "https://github.com/apache/tomcat/commit/a24ae7d26e9cc98024e77916bcabc84d930db0e7",
        "bug_id": "tomcat_26",
        "file": [
            {
                "sha": "92c8661bce686c10b9d21b96d1b582c8cd17ba75",
                "filename": "java/org/apache/jasper/compiler/JspRuntimeContext.java",
                "blob_url": "https://github.com/apache/tomcat/blob/1ea1e41a11e6feae448ab01c5c2d2226d178e564/java/org/apache/jasper/compiler/JspRuntimeContext.java",
                "raw_url": "https://github.com/apache/tomcat/raw/1ea1e41a11e6feae448ab01c5c2d2226d178e564/java/org/apache/jasper/compiler/JspRuntimeContext.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/JspRuntimeContext.java?ref=1ea1e41a11e6feae448ab01c5c2d2226d178e564",
                "patch": "@@ -378,8 +378,7 @@ public void checkCompile() {\n         for (int i = 0; i < wrappers.length; i++ ) {\n             JspServletWrapper jsw = (JspServletWrapper)wrappers[i];\n             JspCompilationContext ctxt = jsw.getJspEngineContext();\n-            // JspServletWrapper also synchronizes on this when\n-            // it detects it has to do a reload\n+            // Sync on JspServletWrapper when calling ctxt.compile()\n             synchronized(jsw) {\n                 try {\n                     ctxt.compile();",
                "deletions": 2
            },
            {
                "sha": "3b3300d3661fef4b3b942c5614a0308874795203",
                "filename": "java/org/apache/jasper/compiler/TagFileProcessor.java",
                "blob_url": "https://github.com/apache/tomcat/blob/1ea1e41a11e6feae448ab01c5c2d2226d178e564/java/org/apache/jasper/compiler/TagFileProcessor.java",
                "raw_url": "https://github.com/apache/tomcat/raw/1ea1e41a11e6feae448ab01c5c2d2226d178e564/java/org/apache/jasper/compiler/TagFileProcessor.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/TagFileProcessor.java?ref=1ea1e41a11e6feae448ab01c5c2d2226d178e564",
                "patch": "@@ -543,12 +543,11 @@ public static TagInfo parseTagFileDirectives(ParserController pc,\n                         wrapper = new JspServletWrapper(ctxt.getServletContext(), ctxt\n                                 .getOptions(), tagFilePath, tagInfo, ctxt\n                                 .getRuntimeContext(), tagJar);\n-                        rctxt.addWrapper(wrapperUri, wrapper);\n-\n                         // Use same classloader and classpath for compiling tag files\n                         wrapper.getJspEngineContext().setClassLoader(\n                                 ctxt.getClassLoader());\n                         wrapper.getJspEngineContext().setClassPath(ctxt.getClassPath());\n+                        rctxt.addWrapper(wrapperUri, wrapper);\n                     } else {\n                         // Make sure that JspCompilationContext gets the latest TagInfo\n                         // for the tag file. TagInfo instance was created the last",
                "deletions": 2
            },
            {
                "sha": "7ba6bad3780119026d5ca995a7912f0e40e9da92",
                "filename": "java/org/apache/jasper/servlet/JspServletWrapper.java",
                "blob_url": "https://github.com/apache/tomcat/blob/1ea1e41a11e6feae448ab01c5c2d2226d178e564/java/org/apache/jasper/servlet/JspServletWrapper.java",
                "raw_url": "https://github.com/apache/tomcat/raw/1ea1e41a11e6feae448ab01c5c2d2226d178e564/java/org/apache/jasper/servlet/JspServletWrapper.java",
                "status": "modified",
                "changes": 59,
                "additions": 39,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/servlet/JspServletWrapper.java?ref=1ea1e41a11e6feae448ab01c5c2d2226d178e564",
                "patch": "@@ -89,13 +89,20 @@\n     private long available = 0L;\n     private final ServletConfig config;\n     private final Options options;\n-    private volatile boolean firstTime = true;\n-    /** Whether the servlet needs reloading on next access */\n+    /*\n+     * The servlet / tag file needs a compilation check on first access. Use a\n+     * separate flag (rather then theServlet == null / tagHandlerClass == null\n+     * as it avoids the potentially expensive isOutDated() calls in\n+     * ctxt.compile() if there are multiple concurrent requests for the servlet\n+     * / tag before the class has been loaded.\n+     */\n+    private volatile boolean mustCompile = true;\n+    /* Whether the servlet/tag file needs reloading on next access */\n     private volatile boolean reload = true;\n     private final boolean isTagFile;\n     private int tripCount;\n     private JasperException compileException;\n-    /** Timestamp of last time servlet resource was modified */\n+    /* Timestamp of last time servlet resource was modified */\n     private volatile long servletClassLastModifiedTime;\n     private long lastModificationTest = 0L;\n     private long lastUsageTime = System.currentTimeMillis();\n@@ -158,7 +165,7 @@ public boolean getReload() {\n     }\n \n     private boolean getReloadInternal() {\n-        return firstTime || reload && !ctxt.getRuntimeContext().isCompileCheckInProgress();\n+        return reload && !ctxt.getRuntimeContext().isCompileCheckInProgress();\n     }\n \n     public Servlet getServlet() throws ServletException {\n@@ -171,11 +178,11 @@ public Servlet getServlet() throws ServletException {\n          * possible (see BZ 62603) for a race condition to cause failures\n          * if a Servlet or tag is reloaded while a compile check is running\n          */\n-        if (getReloadInternal()) {\n+        if (getReloadInternal() || theServlet == null) {\n             synchronized (this) {\n                 // Synchronizing on jsw enables simultaneous loading\n                 // of different pages, but not the same page.\n-                if (getReloadInternal()) {\n+                if (getReloadInternal() || theServlet == null) {\n                     // This is to maintain the original protocol.\n                     destroy();\n \n@@ -193,7 +200,7 @@ public Servlet getServlet() throws ServletException {\n \n                     servlet.init(config);\n \n-                    if (!firstTime) {\n+                    if (theServlet != null) {\n                         ctxt.getRuntimeContext().incrementJspReloadCount();\n                     }\n \n@@ -257,20 +264,27 @@ public void setServletClassLastModifiedTime(long lastModified) {\n             if (ctxt.isRemoved()) {\n                 throw new FileNotFoundException(jspUri);\n             }\n-            if (options.getDevelopment() || firstTime ) {\n+            if (options.getDevelopment() || mustCompile) {\n                 synchronized (this) {\n-                    firstTime = false;\n-                    ctxt.compile();\n+                    if (options.getDevelopment() || mustCompile) {\n+                        ctxt.compile();\n+                        mustCompile = false;\n+                    }\n                 }\n             } else {\n                 if (compileException != null) {\n                     throw compileException;\n                 }\n             }\n \n-            if (getReloadInternal()) {\n-                tagHandlerClass = ctxt.load();\n-                reload = false;\n+            if (getReloadInternal() || tagHandlerClass == null) {\n+                synchronized (this) {\n+                    if (getReloadInternal() || tagHandlerClass == null) {\n+                        tagHandlerClass = ctxt.load();\n+                        // Volatile 'reload' forces in order write of 'tagHandlerClass'\n+                        reload = false;\n+                    }\n+                }\n             }\n         } catch (FileNotFoundException ex) {\n             throw new JasperException(ex);\n@@ -306,8 +320,12 @@ public void setServletClassLastModifiedTime(long lastModified) {\n             Object target;\n             if (isTagFile) {\n                 if (reload) {\n-                    tagHandlerClass = ctxt.load();\n-                    reload = false;\n+                    synchronized (this) {\n+                        if (reload) {\n+                            tagHandlerClass = ctxt.load();\n+                            reload = false;\n+                        }\n+                    }\n                 }\n                 target = tagHandlerClass.newInstance();\n             } else {\n@@ -375,12 +393,13 @@ public void service(HttpServletRequest request,\n             /*\n              * (1) Compile\n              */\n-            if (options.getDevelopment() || firstTime ) {\n+            if (options.getDevelopment() || mustCompile) {\n                 synchronized (this) {\n-                    firstTime = false;\n-\n-                    // The following sets reload to true, if necessary\n-                    ctxt.compile();\n+                    if (options.getDevelopment() || mustCompile) {\n+                        // The following sets reload to true, if necessary\n+                        ctxt.compile();\n+                        mustCompile = false;\n+                    }\n                 }\n             } else {\n                 if (compileException != null) {",
                "deletions": 20
            },
            {
                "sha": "c5a8fdfdcad54e1be57088e6944348b7a0feb462",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/1ea1e41a11e6feae448ab01c5c2d2226d178e564/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/1ea1e41a11e6feae448ab01c5c2d2226d178e564/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=1ea1e41a11e6feae448ab01c5c2d2226d178e564",
                "patch": "@@ -126,6 +126,12 @@\n         utility, <code>JspC</code>, caused by the fix for <bug>53492</bug>, that\n         caused the JSP compiler to hang. (markt)\n       </fix>\n+      <fix>\n+        <bug>62757</bug>: Correct a regression in the fix for <bug>62603</bug>\n+        that caused <code>NullPointerException</code>s when compiling tag files\n+        on first access when development mode was disabled and background\n+        compilation was enabled. Based on a patch by Jordi Llach. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"WebSocket\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix ClassCastException when we try to cast a\n\nNullPointerException to an ELException.\nI still need to investigate where the NPE came from,\nbut simply casting seems unsafe in any case.\n\nUse a cast if possible and recreate exception\notherwise.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@696716 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/2954e1e277c66494ac2a6d2af1e97c9f80cc8804",
        "parent": "https://github.com/apache/tomcat/commit/656b87501ea028b9f16b6345904933ded61486eb",
        "bug_id": "tomcat_27",
        "file": [
            {
                "sha": "006dca9a2aaa0f44606f73f005b0b47574820680",
                "filename": "java/org/apache/el/lang/ExpressionBuilder.java",
                "blob_url": "https://github.com/apache/tomcat/blob/2954e1e277c66494ac2a6d2af1e97c9f80cc8804/java/org/apache/el/lang/ExpressionBuilder.java",
                "raw_url": "https://github.com/apache/tomcat/raw/2954e1e277c66494ac2a6d2af1e97c9f80cc8804/java/org/apache/el/lang/ExpressionBuilder.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/el/lang/ExpressionBuilder.java?ref=2954e1e277c66494ac2a6d2af1e97c9f80cc8804",
                "patch": "@@ -132,7 +132,11 @@ private void prepare(Node node) throws ELException {\n         try {\n             node.accept(this);\n         } catch (Exception e) {\n-            throw (ELException) e;\n+            if (e instanceof ELException) {\n+                throw (ELException) e;\n+            } else {\n+                throw (new ELException(e));\n+            }\n         }\n         if (this.fnMapper instanceof FunctionMapperFactory) {\n             this.fnMapper = ((FunctionMapperFactory) this.fnMapper).create();",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "prevent NPE during shutdown where the logger has been shutdown and delayed resources still trying to log\njava.lang.NullPointerException\n\tat org.apache.juli.FileHandler.publish(FileHandler.java:136)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@666232 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/5b1b01deb280fe044a009dc6730891170853259c",
        "parent": "https://github.com/apache/tomcat/commit/64ad90015352bb637bcb4dd24384e53f18fde9e5",
        "bug_id": "tomcat_28",
        "file": [
            {
                "sha": "eb23fb564af2f38884597aef7d4dd70aec0eefea",
                "filename": "java/org/apache/juli/FileHandler.java",
                "blob_url": "https://github.com/apache/tomcat/blob/5b1b01deb280fe044a009dc6730891170853259c/java/org/apache/juli/FileHandler.java",
                "raw_url": "https://github.com/apache/tomcat/raw/5b1b01deb280fe044a009dc6730891170853259c/java/org/apache/juli/FileHandler.java",
                "status": "modified",
                "changes": 8,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/juli/FileHandler.java?ref=5b1b01deb280fe044a009dc6730891170853259c",
                "patch": "@@ -133,8 +133,12 @@ public void publish(LogRecord record) {\n         }\n         \n         try {\n-            writer.write(result);\n-            writer.flush();\n+            if (writer!=null) {\n+                writer.write(result);\n+                writer.flush();\n+            } else {\n+                reportError(\"FileHandler is closed or not yet initialized, unable to log [\"+result+\"]\", null, ErrorManager.WRITE_FAILURE);\n+            }\n         } catch (Exception e) {\n             reportError(null, e, ErrorManager.WRITE_FAILURE);\n             return;",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1833071 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/d606f11cdb9568a277fa2ac53f8b6f4579a63261",
        "parent": "https://github.com/apache/tomcat/commit/b5ca3e08b8cdd998e22f486293bca6b89e2644e3",
        "bug_id": "tomcat_29",
        "file": [
            {
                "sha": "03fedeb39b3907fc659fa6ba29a5d43ad7c31843",
                "filename": "java/org/apache/catalina/mbeans/MBeanFactory.java",
                "blob_url": "https://github.com/apache/tomcat/blob/d606f11cdb9568a277fa2ac53f8b6f4579a63261/java/org/apache/catalina/mbeans/MBeanFactory.java",
                "raw_url": "https://github.com/apache/tomcat/raw/d606f11cdb9568a277fa2ac53f8b6f4579a63261/java/org/apache/catalina/mbeans/MBeanFactory.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/mbeans/MBeanFactory.java?ref=d606f11cdb9568a277fa2ac53f8b6f4579a63261",
                "patch": "@@ -686,7 +686,10 @@ public void removeConnector(String name) throws Exception {\n         ObjectName oname = new ObjectName(name);\n         Service service = getService(oname);\n         String port = oname.getKeyProperty(\"port\");\n-        String address = ObjectName.unquote(oname.getKeyProperty(\"address\"));\n+        String address = oname.getKeyProperty(\"address\");\n+        if (address != null) {\n+            address = ObjectName.unquote(address);\n+        }\n \n         Connector conns[] = service.findConnectors();\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid unlikely NPE\nIdentified by SpotBugs\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1833029 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/cbf79b0fd5365fef5844c3319de0cd0008c6fd46",
        "parent": "https://github.com/apache/tomcat/commit/7e4246ae6487b37002e593435c2a295591d86077",
        "bug_id": "tomcat_30",
        "file": [
            {
                "sha": "f3dec673051806afa82d7b6795ecbe79d318b50e",
                "filename": "java/org/apache/catalina/mapper/Mapper.java",
                "blob_url": "https://github.com/apache/tomcat/blob/cbf79b0fd5365fef5844c3319de0cd0008c6fd46/java/org/apache/catalina/mapper/Mapper.java",
                "raw_url": "https://github.com/apache/tomcat/raw/cbf79b0fd5365fef5844c3319de0cd0008c6fd46/java/org/apache/catalina/mapper/Mapper.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/mapper/Mapper.java?ref=cbf79b0fd5365fef5844c3319de0cd0008c6fd46",
                "patch": "@@ -1545,7 +1545,7 @@ private static final int slashCount(String name) {\n      * wild card host names from the external to internal form.\n      */\n     private static String renameWildcardHost(String hostName) {\n-        if (hostName.startsWith(\"*.\")) {\n+        if (hostName != null && hostName.startsWith(\"*.\")) {\n             return hostName.substring(1);\n         } else {\n             return hostName;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Prevent NullPointerException and other errors if the stock ticker example is running when the examples web application is stopped.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1820705 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/22beea7a0f4d9ace803ab3d2bd0faa80163ee81a",
        "parent": "https://github.com/apache/tomcat/commit/1d105f832ff80dbabd061195d146a605f1f0e8cd",
        "bug_id": "tomcat_31",
        "file": [
            {
                "sha": "1ab165eedf8464f035002b5b982444a984316a20",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/22beea7a0f4d9ace803ab3d2bd0faa80163ee81a/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/22beea7a0f4d9ace803ab3d2bd0faa80163ee81a/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=22beea7a0f4d9ace803ab3d2bd0faa80163ee81a",
                "patch": "@@ -182,6 +182,11 @@\n         when running the asynchronous stock ticker in the examples web\n         application. (markt)\n       </fix>\n+      <fix>\n+        <bug>61886</bug>: Prevent <code>NullPointerException</code> and other\n+        errors if the stock ticker example is running when the examples web\n+        application is stopped. (markt)\n+      </fix>\n       <fix>\n         <bug>61910</bug>: Clarify the meaning of the <code>allowLinking</code>\n         option in the documentation web application. (markt)",
                "deletions": 0
            },
            {
                "sha": "685ac239fb2822c24ff184ff5724d108f4ded2c4",
                "filename": "webapps/examples/WEB-INF/classes/async/AsyncStockContextListener.java",
                "blob_url": "https://github.com/apache/tomcat/blob/22beea7a0f4d9ace803ab3d2bd0faa80163ee81a/webapps/examples/WEB-INF/classes/async/AsyncStockContextListener.java",
                "raw_url": "https://github.com/apache/tomcat/raw/22beea7a0f4d9ace803ab3d2bd0faa80163ee81a/webapps/examples/WEB-INF/classes/async/AsyncStockContextListener.java",
                "status": "added",
                "changes": 44,
                "additions": 44,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/examples/WEB-INF/classes/async/AsyncStockContextListener.java?ref=22beea7a0f4d9ace803ab3d2bd0faa80163ee81a",
                "patch": "@@ -0,0 +1,44 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package async;\n+\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletContextEvent;\n+import javax.servlet.ServletContextListener;\n+\n+/*\n+ * Ensures the Stockticker is shut down cleanly when the context stops. This\n+ * also covers the case when the server shuts down.\n+ */\n+public class AsyncStockContextListener implements ServletContextListener {\n+\n+    public static final String STOCK_TICKER_KEY = \"StockTicker\";\n+\n+    @Override\n+    public void contextInitialized(ServletContextEvent sce) {\n+        Stockticker stockticker = new Stockticker();\n+        ServletContext sc = sce.getServletContext();\n+        sc.setAttribute(STOCK_TICKER_KEY, stockticker);\n+    }\n+\n+    @Override\n+    public void contextDestroyed(ServletContextEvent sce) {\n+        ServletContext sc = sce.getServletContext();\n+        Stockticker stockticker = (Stockticker) sc.getAttribute(STOCK_TICKER_KEY);\n+        stockticker.shutdown();\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "8b3ac152a1ebfe7d384064addf00f84e62e97719",
                "filename": "webapps/examples/WEB-INF/classes/async/AsyncStockServlet.java",
                "blob_url": "https://github.com/apache/tomcat/blob/22beea7a0f4d9ace803ab3d2bd0faa80163ee81a/webapps/examples/WEB-INF/classes/async/AsyncStockServlet.java",
                "raw_url": "https://github.com/apache/tomcat/raw/22beea7a0f4d9ace803ab3d2bd0faa80163ee81a/webapps/examples/WEB-INF/classes/async/AsyncStockServlet.java",
                "status": "modified",
                "changes": 23,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/examples/WEB-INF/classes/async/AsyncStockServlet.java?ref=22beea7a0f4d9ace803ab3d2bd0faa80163ee81a",
                "patch": "@@ -25,6 +25,7 @@\n import javax.servlet.AsyncContext;\n import javax.servlet.AsyncEvent;\n import javax.servlet.AsyncListener;\n+import javax.servlet.ServletContext;\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServlet;\n import javax.servlet.http.HttpServletRequest;\n@@ -45,7 +46,6 @@\n     private static final ConcurrentLinkedQueue<AsyncContext> clients =\n             new ConcurrentLinkedQueue<>();\n     private static final AtomicInteger clientcount = new AtomicInteger(0);\n-    private static final Stockticker ticker = new Stockticker();\n \n     public AsyncStockServlet() {\n         log.info(\"AsyncStockServlet created\");\n@@ -63,6 +63,8 @@ protected void service(HttpServletRequest req, HttpServletResponse resp)\n             resp.setContentType(\"text/plain\");\n             clients.add(actx);\n             if (clientcount.incrementAndGet()==1) {\n+                Stockticker ticker = (Stockticker) req.getServletContext().getAttribute(\n+                        AsyncStockContextListener.STOCK_TICKER_KEY);\n                 ticker.addTickListener(this);\n             }\n         } else {\n@@ -103,9 +105,28 @@ public void writeStock(AsyncContext actx, Stock stock) throws IOException {\n     }\n \n \n+    @Override\n+    public void shutdown() {\n+        // The web application is shutting down. Complete any AsyncContexts\n+        // associated with an active client.\n+        Iterator<AsyncContext> it = clients.iterator();\n+        while (it.hasNext()) {\n+            AsyncContext actx = it.next();\n+            try {\n+                actx.complete();\n+            } catch (Exception e) {\n+                // Ignore. The async error handling will deal with this.\n+            }\n+        }\n+    }\n+\n+\n     @Override\n     public void onComplete(AsyncEvent event) throws IOException {\n         if (clients.remove(event.getAsyncContext()) && clientcount.decrementAndGet()==0) {\n+            ServletContext sc = event.getAsyncContext().getRequest().getServletContext();\n+            Stockticker ticker = (Stockticker) sc.getAttribute(\n+                    AsyncStockContextListener.STOCK_TICKER_KEY);\n             ticker.removeTickListener(this);\n         }\n     }",
                "deletions": 1
            },
            {
                "sha": "e87744e357e43025795c2172f9c3c48a99dc02a4",
                "filename": "webapps/examples/WEB-INF/classes/async/Stockticker.java",
                "blob_url": "https://github.com/apache/tomcat/blob/22beea7a0f4d9ace803ab3d2bd0faa80163ee81a/webapps/examples/WEB-INF/classes/async/Stockticker.java",
                "raw_url": "https://github.com/apache/tomcat/raw/22beea7a0f4d9ace803ab3d2bd0faa80163ee81a/webapps/examples/WEB-INF/classes/async/Stockticker.java",
                "status": "modified",
                "changes": 18,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/examples/WEB-INF/classes/async/Stockticker.java?ref=22beea7a0f4d9ace803ab3d2bd0faa80163ee81a",
                "patch": "@@ -37,6 +37,12 @@ public synchronized void start() {\n         }\n \n         public synchronized void stop() {\n+            // On context stop this can be called multiple times.\n+            // NO-OP is the ticker thread is not set\n+            // (i.e. stop() has already completed)\n+            if (ticker == null) {\n+                return;\n+            }\n             run = false;\n             try {\n                 ticker.join();\n@@ -47,6 +53,17 @@ public synchronized void stop() {\n             ticker = null;\n         }\n \n+        public void shutdown() {\n+            // Notify each listener of the shutdown. This enables them to\n+            // trigger any necessary clean-up.\n+            for (TickListener l : listeners) {\n+                l.shutdown();\n+            }\n+            // Wait for the thread to stop. This prevents warnings in the logs\n+            // that the thread is still active when the context stops.\n+            stop();\n+        }\n+\n         public void addTickListener(TickListener listener) {\n             if (listeners.add(listener)) {\n                 if (counter.incrementAndGet()==1) start();\n@@ -98,6 +115,7 @@ public void run() {\n \n     public static interface TickListener {\n         public void tick(Stock stock);\n+        public void shutdown();\n     }\n \n     public static final class Stock implements Cloneable {",
                "deletions": 0
            },
            {
                "sha": "4fb4d16ac95b3929ceb5418e14c1f4ee48f69cf1",
                "filename": "webapps/examples/WEB-INF/web.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/22beea7a0f4d9ace803ab3d2bd0faa80163ee81a/webapps/examples/WEB-INF/web.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/22beea7a0f4d9ace803ab3d2bd0faa80163ee81a/webapps/examples/WEB-INF/web.xml",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/examples/WEB-INF/web.xml?ref=22beea7a0f4d9ace803ab3d2bd0faa80163ee81a",
                "patch": "@@ -95,6 +95,11 @@\n         <listener-class>listeners.SessionListener</listener-class>\n     </listener>\n \n+    <!-- Define listeners required by examples -->\n+    <listener>\n+        <listener-class>async.AsyncStockContextListener</listener-class>\n+    </listener>\n+\n     <!-- Define servlets that are included in the example application -->\n \n     <servlet>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid a possible NullPointerException when timing out AsyncContext instances during shut down.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1815505 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/860a0e6dde5639dba70d53fa706b8dc65340c902",
        "parent": "https://github.com/apache/tomcat/commit/badf6363c5eca4e313323f50789c0eec7e1c625e",
        "bug_id": "tomcat_32",
        "file": [
            {
                "sha": "16cb8f21e7f41bb3de44f46d1951287bc391fd69",
                "filename": "java/org/apache/catalina/core/AsyncContextImpl.java",
                "blob_url": "https://github.com/apache/tomcat/blob/860a0e6dde5639dba70d53fa706b8dc65340c902/java/org/apache/catalina/core/AsyncContextImpl.java",
                "raw_url": "https://github.com/apache/tomcat/raw/860a0e6dde5639dba70d53fa706b8dc65340c902/java/org/apache/catalina/core/AsyncContextImpl.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/AsyncContextImpl.java?ref=860a0e6dde5639dba70d53fa706b8dc65340c902",
                "patch": "@@ -123,6 +123,8 @@ public void fireOnComplete() {\n     public boolean timeout() {\n         AtomicBoolean result = new AtomicBoolean();\n         request.getCoyoteRequest().action(ActionCode.ASYNC_TIMEOUT, result);\n+        // Avoids NPEs during shutdown. A call to recycle will null this field.\n+        Context context = this.context;\n \n         if (result.get()) {\n             ClassLoader oldCL = context.bind(false, null);",
                "deletions": 0
            },
            {
                "sha": "d52a3d12f5c79c6c2a84b6e90ccf6137fa04c680",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/860a0e6dde5639dba70d53fa706b8dc65340c902/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/860a0e6dde5639dba70d53fa706b8dc65340c902/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=860a0e6dde5639dba70d53fa706b8dc65340c902",
                "patch": "@@ -78,6 +78,10 @@\n         <code>javax.security.auth.message.config.AuthConfigFactory</code> in the\n         JASPIC API implementation. Based on a patch by Pavan Kumar. (markt)\n       </fix>\n+      <fix>\n+        Avoid a possible <code>NullPointerException</code> when timing out\n+        <code>AsyncContext</code> instances during shut down. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=62263\nAvoid a NullPointerException when the RemoteIpValve processes a request for which no Context can be found.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1828565 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/5ace8c3e883c36a4dc6d20523c4ca6ee7f8bcd1b",
        "parent": "https://github.com/apache/tomcat/commit/61c3a72b3f5eaa3cf043530f49c5cd0442fc9997",
        "bug_id": "tomcat_33",
        "file": [
            {
                "sha": "09f99c2bd285dddcbe40a905289f78578c77bfb0",
                "filename": "java/org/apache/catalina/connector/Request.java",
                "blob_url": "https://github.com/apache/tomcat/blob/5ace8c3e883c36a4dc6d20523c4ca6ee7f8bcd1b/java/org/apache/catalina/connector/Request.java",
                "raw_url": "https://github.com/apache/tomcat/raw/5ace8c3e883c36a4dc6d20523c4ca6ee7f8bcd1b/java/org/apache/catalina/connector/Request.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/Request.java?ref=5ace8c3e883c36a4dc6d20523c4ca6ee7f8bcd1b",
                "patch": "@@ -1522,6 +1522,9 @@ public void setAttribute(String name, Object value) {\n     private void notifyAttributeAssigned(String name, Object value,\n             Object oldValue) {\n         Context context = getContext();\n+        if (context == null) {\n+            return;\n+        }\n         Object listeners[] = context.getApplicationEventListeners();\n         if ((listeners == null) || (listeners.length == 0)) {\n             return;",
                "deletions": 0
            },
            {
                "sha": "e2b74f0934c458b22cde4cd5dc91b10114f66647",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/5ace8c3e883c36a4dc6d20523c4ca6ee7f8bcd1b/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/5ace8c3e883c36a4dc6d20523c4ca6ee7f8bcd1b/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=5ace8c3e883c36a4dc6d20523c4ca6ee7f8bcd1b",
                "patch": "@@ -45,6 +45,15 @@\n   issues do not \"pop up\" wrt. others).\n -->\n <section name=\"Tomcat 9.0.8 (markt)\" rtext=\"in development\">\n+  <subsection name=\"Catalina\">\n+    <changelog>\n+      <fix>\n+        <bug>62263</bug>: Avoid a <code>NullPointerException</code> when the\n+        <code>RemoteIpValve</code> processes a request for which no Context can\n+        be found. (markt)\n+      </fix>\n+    </changelog>\n+  </subsection>\n   <subsection name=\"Coyote\">\n     <changelog>\n       <fix>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "SpotBugs\nAvoid NPEs on concurrent calls to stop()\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1827033 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/057de9443e1ae973440252028a792f3a8896069a",
        "parent": "https://github.com/apache/tomcat/commit/bcd6513dbf3df471a67522fbe278c96e75596f4f",
        "bug_id": "tomcat_34",
        "file": [
            {
                "sha": "725f5d3ebc0db97ee45cd0bc1595f271d9c3baf2",
                "filename": "java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java",
                "blob_url": "https://github.com/apache/tomcat/blob/057de9443e1ae973440252028a792f3a8896069a/java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java",
                "raw_url": "https://github.com/apache/tomcat/raw/057de9443e1ae973440252028a792f3a8896069a/java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java?ref=057de9443e1ae973440252028a792f3a8896069a",
                "patch": "@@ -88,9 +88,9 @@ public synchronized void start(int svc) throws ChannelException {\n     }\n \n     @Override\n-    public void stop(int svc) throws ChannelException {\n+    public synchronized void stop(int svc) throws ChannelException {\n         running = false;\n-        if ( thread != null ) {\n+        if (thread != null) {\n             thread.interrupt();\n             thread = null;\n         }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=62712\nCorrect NPE in Manager application when attempting to view configured certificates for an APR/native TLS connector.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1840737 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/ae0b2a6024a60af75cdb63a6be4413a23f2730bf",
        "parent": "https://github.com/apache/tomcat/commit/d7fead597578d60a05a4fb98fe57c331fe933a7c",
        "bug_id": "tomcat_35",
        "file": [
            {
                "sha": "a844bf53a5739d403dc651c2ede9a46503b5c6e2",
                "filename": "java/org/apache/catalina/manager/ManagerServlet.java",
                "blob_url": "https://github.com/apache/tomcat/blob/ae0b2a6024a60af75cdb63a6be4413a23f2730bf/java/org/apache/catalina/manager/ManagerServlet.java",
                "raw_url": "https://github.com/apache/tomcat/raw/ae0b2a6024a60af75cdb63a6be4413a23f2730bf/java/org/apache/catalina/manager/ManagerServlet.java",
                "status": "modified",
                "changes": 42,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/manager/ManagerServlet.java?ref=ae0b2a6024a60af75cdb63a6be4413a23f2730bf",
                "patch": "@@ -1806,25 +1806,33 @@ public static boolean copyInternal(File src, File dest, byte[] buf) {\n             if (Boolean.TRUE.equals(connector.getProperty(\"SSLEnabled\"))) {\n                 SSLHostConfig[] sslHostConfigs = connector.getProtocolHandler().findSslHostConfigs();\n                 for (SSLHostConfig sslHostConfig : sslHostConfigs) {\n-                    Set<SSLHostConfigCertificate> sslHostConfigCerts =\n-                            sslHostConfig.getCertificates();\n-                    for (SSLHostConfigCertificate sslHostConfigCert : sslHostConfigCerts) {\n-                        String name = connector.toString() + \"-\" + sslHostConfig.getHostName() +\n-                                \"-\" + sslHostConfigCert.getType();\n-                        List<String> certList = new ArrayList<>();\n-                        SSLContext sslContext = sslHostConfigCert.getSslContext();\n-                        String alias = sslHostConfigCert.getCertificateKeyAlias();\n-                        if (alias == null) {\n-                            alias = \"tomcat\";\n-                        }\n-                        X509Certificate[] certs = sslContext.getCertificateChain(alias);\n-                        if (certs == null) {\n-                            certList.add(sm.getString(\"managerServlet.certsNotAvailable\"));\n-                        } else {\n-                            for (Certificate cert : certs) {\n-                                certList.add(cert.toString());\n+                    if (sslHostConfig.getOpenSslContext().longValue() == 0) {\n+                        // Not set. Must be JSSE based.\n+                        Set<SSLHostConfigCertificate> sslHostConfigCerts =\n+                                sslHostConfig.getCertificates();\n+                        for (SSLHostConfigCertificate sslHostConfigCert : sslHostConfigCerts) {\n+                            String name = connector.toString() + \"-\" + sslHostConfig.getHostName() +\n+                                    \"-\" + sslHostConfigCert.getType();\n+                            List<String> certList = new ArrayList<>();\n+                            SSLContext sslContext = sslHostConfigCert.getSslContext();\n+                            String alias = sslHostConfigCert.getCertificateKeyAlias();\n+                            if (alias == null) {\n+                                alias = \"tomcat\";\n+                            }\n+                            X509Certificate[] certs = sslContext.getCertificateChain(alias);\n+                            if (certs == null) {\n+                                certList.add(sm.getString(\"managerServlet.certsNotAvailable\"));\n+                            } else {\n+                                for (Certificate cert : certs) {\n+                                    certList.add(cert.toString());\n+                                }\n                             }\n+                            result.put(name, certList);\n                         }\n+                    } else {\n+                        List<String> certList = new ArrayList<>();\n+                        certList.add(sm.getString(\"managerServlet.certsNotAvailable\"));\n+                        String name = connector.toString() + \"-\" + sslHostConfig.getHostName();\n                         result.put(name, certList);\n                     }\n                 }",
                "deletions": 17
            },
            {
                "sha": "d64d2291ae5d1472435e1f0eac8f97798349cf13",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/ae0b2a6024a60af75cdb63a6be4413a23f2730bf/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/ae0b2a6024a60af75cdb63a6be4413a23f2730bf/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=ae0b2a6024a60af75cdb63a6be4413a23f2730bf",
                "patch": "@@ -70,6 +70,14 @@\n       </fix>\n     </changelog>\n   </subsection>\n+  <subsection name=\"Web applications\">\n+    <changelog>\n+      <fix>\n+        <bug>62712</bug>: Correct NPE in Manager application when attempting to\n+        view configured certificates for an APR/native TLS connector. (markt)\n+      </fix>\n+    </changelog>\n+  </subsection>\n   <subsection name=\"Other\">\n     <changelog>\n       <fix>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix a SpotBugs warning (inconsistent sync)\nMake setting of server thread-safe\nFix potential NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1831700 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/94edba1752b4db0af60a3cf2f8ea2ee5fa9c41f9",
        "parent": "https://github.com/apache/tomcat/commit/cadc65a76f3c4138cc8f02da054aa220f87a5ee8",
        "bug_id": "tomcat_36",
        "file": [
            {
                "sha": "663aa9581dd1ad83ac5611b8d5759b4fb301ead9",
                "filename": "java/org/apache/tomcat/util/modeler/Registry.java",
                "blob_url": "https://github.com/apache/tomcat/blob/94edba1752b4db0af60a3cf2f8ea2ee5fa9c41f9/java/org/apache/tomcat/util/modeler/Registry.java",
                "raw_url": "https://github.com/apache/tomcat/raw/94edba1752b4db0af60a3cf2f8ea2ee5fa9c41f9/java/org/apache/tomcat/util/modeler/Registry.java",
                "status": "modified",
                "changes": 41,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/modeler/Registry.java?ref=94edba1752b4db0af60a3cf2f8ea2ee5fa9c41f9",
                "patch": "@@ -91,7 +91,8 @@ the methods ( before 1.1 final )\n      * The <code>MBeanServer</code> instance that we will use to register\n      * management beans.\n      */\n-    private MBeanServer server = null;\n+    private volatile MBeanServer server = null;\n+    private final Object serverLock = new Object();\n \n     /**\n      * The set of ManagedBean instances for the beans this registry\n@@ -367,7 +368,7 @@ public String getType( ObjectName oname, String attName )\n         String type=null;\n         MBeanInfo info=null;\n         try {\n-            info=server.getMBeanInfo(oname);\n+            info = getMBeanServer().getMBeanInfo(oname);\n         } catch (Exception e) {\n             log.info( \"Can't find metadata for object\" + oname );\n             return null;\n@@ -394,7 +395,7 @@ public MBeanOperationInfo getMethodInfo( ObjectName oname, String opName )\n     {\n         MBeanInfo info=null;\n         try {\n-            info=server.getMBeanInfo(oname);\n+            info = getMBeanServer().getMBeanInfo(oname);\n         } catch (Exception e) {\n             log.info( \"Can't find metadata \" + oname );\n             return null;\n@@ -429,18 +430,22 @@ public void unregisterComponent( ObjectName oname ) {\n      * <code>MBeanServer</code> instance.\n      * @return the MBean server\n      */\n-    public synchronized MBeanServer getMBeanServer() {\n+    public MBeanServer getMBeanServer() {\n         if (server == null) {\n-            long t1 = System.currentTimeMillis();\n-            if (MBeanServerFactory.findMBeanServer(null).size() > 0) {\n-                server = MBeanServerFactory.findMBeanServer(null).get(0);\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"Using existing MBeanServer \" + (System.currentTimeMillis() - t1));\n-                }\n-            } else {\n-                server = ManagementFactory.getPlatformMBeanServer();\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"Creating MBeanServer\" + (System.currentTimeMillis() - t1));\n+            synchronized (serverLock) {\n+                if (server == null) {\n+                    long t1 = System.currentTimeMillis();\n+                    if (MBeanServerFactory.findMBeanServer(null).size() > 0) {\n+                        server = MBeanServerFactory.findMBeanServer(null).get(0);\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(\"Using existing MBeanServer \" + (System.currentTimeMillis() - t1));\n+                        }\n+                    } else {\n+                        server = ManagementFactory.getPlatformMBeanServer();\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(\"Creating MBeanServer\" + (System.currentTimeMillis() - t1));\n+                        }\n+                    }\n                 }\n             }\n         }\n@@ -719,10 +724,10 @@ private ModelerSource getModelerSource( String type )\n     // -------------------- Registration  --------------------\n \n     @Override\n-    public ObjectName preRegister(MBeanServer server,\n-                                  ObjectName name) throws Exception\n-    {\n-        this.server=server;\n+    public ObjectName preRegister(MBeanServer server, ObjectName name) throws Exception {\n+        synchronized (serverLock) {\n+            this.server = server;\n+        }\n         return name;\n     }\n ",
                "deletions": 18
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE if there is no Engine.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1822111 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/0e7f89c96e3e0122a5f2e8c0338e69d1c4647b86",
        "parent": "https://github.com/apache/tomcat/commit/41c19cbde385643de99943015556b1366b466c4c",
        "bug_id": "tomcat_37",
        "file": [
            {
                "sha": "696e7348876caeec7c8ca2199f0c81a431de3cc2",
                "filename": "java/org/apache/catalina/core/ThreadLocalLeakPreventionListener.java",
                "blob_url": "https://github.com/apache/tomcat/blob/0e7f89c96e3e0122a5f2e8c0338e69d1c4647b86/java/org/apache/catalina/core/ThreadLocalLeakPreventionListener.java",
                "raw_url": "https://github.com/apache/tomcat/raw/0e7f89c96e3e0122a5f2e8c0338e69d1c4647b86/java/org/apache/catalina/core/ThreadLocalLeakPreventionListener.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/ThreadLocalLeakPreventionListener.java?ref=0e7f89c96e3e0122a5f2e8c0338e69d1c4647b86",
                "patch": "@@ -128,8 +128,10 @@ public void containerEvent(ContainerEvent event) {\n     private void registerListenersForServer(Server server) {\n         for (Service service : server.findServices()) {\n             Engine engine = service.getContainer();\n-            engine.addContainerListener(this);\n-            registerListenersForEngine(engine);\n+            if (engine != null) {\n+                engine.addContainerListener(this);\n+                registerListenersForEngine(engine);\n+            }\n         }\n \n     }",
                "deletions": 2
            },
            {
                "sha": "1bb383e8a3d80124d5ed33ac4880a63b738d09c0",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/0e7f89c96e3e0122a5f2e8c0338e69d1c4647b86/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/0e7f89c96e3e0122a5f2e8c0338e69d1c4647b86/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=0e7f89c96e3e0122a5f2e8c0338e69d1c4647b86",
                "patch": "@@ -54,6 +54,10 @@\n       <fix>\n         Avoid duplicate load attempts if one has been made already. (remm)\n       </fix>\n+      <fix>\n+        Avoid NPE in ThreadLocalLeakPreventionListener if there is no Engine.\n+        (remm)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Use short circuit logic to prevent potential NPE in CorsFilter.\n\nThe same logic is used a few lines below, so it was most probably\nintended that way anyways. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1837786 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/d6191c408e9d0e97eefd7a4273b6b895fcaee2c5",
        "parent": "https://github.com/apache/tomcat/commit/6b4aa7935dd025a805adaf82b927b5ef2626e8a9",
        "bug_id": "tomcat_38",
        "file": [
            {
                "sha": "35ed49c093bda7b6ba323b2cc75d34630a1186e9",
                "filename": "java/org/apache/catalina/filters/CorsFilter.java",
                "blob_url": "https://github.com/apache/tomcat/blob/d6191c408e9d0e97eefd7a4273b6b895fcaee2c5/java/org/apache/catalina/filters/CorsFilter.java",
                "raw_url": "https://github.com/apache/tomcat/raw/d6191c408e9d0e97eefd7a4273b6b895fcaee2c5/java/org/apache/catalina/filters/CorsFilter.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/filters/CorsFilter.java?ref=d6191c408e9d0e97eefd7a4273b6b895fcaee2c5",
                "patch": "@@ -453,7 +453,7 @@ private void addStandardHeaders(final HttpServletRequest request,\n                         String.valueOf(preflightMaxAge));\n             }\n \n-            if  ((allowedHttpMethods != null & !allowedHttpMethods.isEmpty())) {\n+            if  ((allowedHttpMethods != null) && (!allowedHttpMethods.isEmpty())) {\n                 response.addHeader(\n                         CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_METHODS,\n                         join(allowedHttpMethods, \",\"));",
                "deletions": 1
            },
            {
                "sha": "479f70d74f9bb0c347784e5642d7fe2de0f501d0",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/d6191c408e9d0e97eefd7a4273b6b895fcaee2c5/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/d6191c408e9d0e97eefd7a4273b6b895fcaee2c5/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=d6191c408e9d0e97eefd7a4273b6b895fcaee2c5",
                "patch": "@@ -103,6 +103,9 @@\n         <bug>62607</bug>: Return a non-zero exit code from\n         <code>catalina.[bat|sh] run</code> if Tomcat fails to start. (markt)\n       </add>\n+      <fix>\n+        Use short circuit logic to prevent potential NPE in CorsFilter. (fschumacher)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=61312\nPrevent NullPointerException when using the statement cache of connection that has been closed.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1820816 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/cf73eb2346563d256b0e4de0590f793b6b393c5d",
        "parent": "https://github.com/apache/tomcat/commit/c3d79e2143de51ecbc0a98a97b21ce9d262f6796",
        "bug_id": "tomcat_39",
        "file": [
            {
                "sha": "fd151ff18e1bb7ee1a607c7a7be5df91368d18cb",
                "filename": "modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementCache.java",
                "blob_url": "https://github.com/apache/tomcat/blob/cf73eb2346563d256b0e4de0590f793b6b393c5d/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementCache.java",
                "raw_url": "https://github.com/apache/tomcat/raw/cf73eb2346563d256b0e4de0590f793b6b393c5d/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementCache.java",
                "status": "modified",
                "changes": 29,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementCache.java?ref=cf73eb2346563d256b0e4de0590f793b6b393c5d",
                "patch": "@@ -25,6 +25,8 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.atomic.AtomicInteger;\n \n+import org.apache.juli.logging.Log;\n+import org.apache.juli.logging.LogFactory;\n import org.apache.tomcat.jdbc.pool.ConnectionPool;\n import org.apache.tomcat.jdbc.pool.PoolProperties.InterceptorProperty;\n import org.apache.tomcat.jdbc.pool.PooledConnection;\n@@ -34,6 +36,7 @@\n  * {@code CallableStatement} instances on a connection.\n  */\n public class StatementCache extends StatementDecoratorInterceptor {\n+    private static final Log log = LogFactory.getLog(StatementCache.class);\n     protected static final String[] ALL_TYPES = new String[] {PREPARE_STATEMENT,PREPARE_CALL};\n     protected static final String[] CALLABLE_TYPE = new String[] {PREPARE_CALL};\n     protected static final String[] PREPARED_TYPE = new String[] {PREPARE_STATEMENT};\n@@ -186,16 +189,14 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl\n     }\n \n     public CachedStatement isCached(Method method, Object[] args) {\n-        @SuppressWarnings(\"unchecked\")\n-        ConcurrentHashMap<CacheKey,CachedStatement> cache =\n-            (ConcurrentHashMap<CacheKey,CachedStatement>)pcon.getAttributes().get(STATEMENT_CACHE_ATTR);\n+        ConcurrentHashMap<CacheKey,CachedStatement> cache = getCache();\n+        if (cache == null) return null;\n         return cache.get(createCacheKey(method, args));\n     }\n \n     public boolean cacheStatement(CachedStatement proxy) {\n-        @SuppressWarnings(\"unchecked\")\n-        ConcurrentHashMap<CacheKey,CachedStatement> cache =\n-            (ConcurrentHashMap<CacheKey,CachedStatement>)pcon.getAttributes().get(STATEMENT_CACHE_ATTR);\n+        ConcurrentHashMap<CacheKey,CachedStatement> cache = getCache();\n+        if (cache == null) return false;\n         if (proxy.getCacheKey()==null) {\n             return false;\n         } else if (cache.containsKey(proxy.getCacheKey())) {\n@@ -213,9 +214,8 @@ public boolean cacheStatement(CachedStatement proxy) {\n     }\n \n     public boolean removeStatement(CachedStatement proxy) {\n-        @SuppressWarnings(\"unchecked\")\n-        ConcurrentHashMap<CacheKey,CachedStatement> cache =\n-            (ConcurrentHashMap<CacheKey,CachedStatement>)pcon.getAttributes().get(STATEMENT_CACHE_ATTR);\n+        ConcurrentHashMap<CacheKey,CachedStatement> cache = getCache();\n+        if (cache == null) return false;\n         if (cache.remove(proxy.getCacheKey()) != null) {\n             cacheSize.decrementAndGet();\n             return true;\n@@ -225,6 +225,17 @@ public boolean removeStatement(CachedStatement proxy) {\n     }\n     /*end the actual statement cache*/\n \n+    protected ConcurrentHashMap<CacheKey,CachedStatement> getCache() {\n+        PooledConnection pCon = this.pcon;\n+        if (pCon == null) {\n+            if (log.isWarnEnabled()) log.warn(\"Connection has already been closed or abandoned\");\n+            return null;\n+        }\n+        @SuppressWarnings(\"unchecked\")\n+        ConcurrentHashMap<CacheKey,CachedStatement> cache =\n+                (ConcurrentHashMap<CacheKey,CachedStatement>)pCon.getAttributes().get(STATEMENT_CACHE_ATTR);\n+        return cache;\n+    }\n \n     protected class CachedStatement extends StatementDecoratorInterceptor.StatementProxy<Statement> {\n         boolean cached = false;",
                "deletions": 9
            },
            {
                "sha": "ccd44d196206268c6ce69e45b60ce2fb3539a937",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/cf73eb2346563d256b0e4de0590f793b6b393c5d/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/cf73eb2346563d256b0e4de0590f793b6b393c5d/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=cf73eb2346563d256b0e4de0590f793b6b393c5d",
                "patch": "@@ -197,6 +197,14 @@\n       </add>\n     </changelog>\n   </subsection>\n+  <subsection name=\"jdbc-pool\">\n+    <changelog>\n+      <fix>\n+        <bug>61312</bug>: Prevent <code>NullPointerException</code>n when using\n+        the statement cache of connection that has been closed. (kfujino)\n+      </fix>\n+    </changelog>\n+  </subsection>\n   <subsection name=\"Other\">\n     <changelog>\n       <fix>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Add NPEs to ServletContext to match the javadoc.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1816541 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/72627da6afca2f54a8b205519a4f62f182d08910",
        "parent": "https://github.com/apache/tomcat/commit/a34bf2d74d0aaf78ea2027c68a5df0838f2bf514",
        "bug_id": "tomcat_40",
        "file": [
            {
                "sha": "09d611059dd3fac0f18ba7aefbc2a77c0751c9ce",
                "filename": "java/org/apache/catalina/core/ApplicationContext.java",
                "blob_url": "https://github.com/apache/tomcat/blob/72627da6afca2f54a8b205519a4f62f182d08910/java/org/apache/catalina/core/ApplicationContext.java",
                "raw_url": "https://github.com/apache/tomcat/raw/72627da6afca2f54a8b205519a4f62f182d08910/java/org/apache/catalina/core/ApplicationContext.java",
                "status": "modified",
                "changes": 10,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/ApplicationContext.java?ref=72627da6afca2f54a8b205519a4f62f182d08910",
                "patch": "@@ -690,9 +690,10 @@ public void removeAttribute(String name) {\n     @Override\n     public void setAttribute(String name, Object value) {\n         // Name cannot be null\n-        if (name == null)\n-            throw new IllegalArgumentException\n+        if (name == null) {\n+            throw new NullPointerException\n                 (sm.getString(\"applicationContext.setAttribute.namenull\"));\n+        }\n \n         // Null value is the same as removeAttribute()\n         if (value == null) {\n@@ -1053,6 +1054,11 @@ public void setSessionTrackingModes(Set<SessionTrackingMode> sessionTrackingMode\n \n     @Override\n     public boolean setInitParameter(String name, String value) {\n+        // Name cannot be null\n+        if (name == null) {\n+            throw new NullPointerException\n+                (sm.getString(\"applicationContext.setAttribute.namenull\"));\n+        }\n         if (!context.getState().equals(LifecycleState.STARTING_PREP)) {\n             throw new IllegalStateException(\n                     sm.getString(\"applicationContext.setInitParam.ise\",",
                "deletions": 2
            },
            {
                "sha": "20bd47b00ef27436aee4861baac2db3d932c1bbe",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/72627da6afca2f54a8b205519a4f62f182d08910/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/72627da6afca2f54a8b205519a4f62f182d08910/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=72627da6afca2f54a8b205519a4f62f182d08910",
                "patch": "@@ -45,6 +45,13 @@\n   issues do not \"pop up\" wrt. others).\n -->\n <section name=\"Tomcat 9.0.3 (markt)\" rtext=\"in development\">\n+  <subsection name=\"Catalina\">\n+    <changelog>\n+      <fix>\n+        Add some missing NPEs to ServletContext. (remm)\n+      </fix>\n+    </changelog>\n+  </subsection>\n </section>\n <section name=\"Tomcat 9.0.2 (markt)\" rtext=\"release in progress\">\n   <subsection name=\"Catalina\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid a NullPointerException when reading attributes for a initialised HTTP connector where TLS is enabled.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1792791 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/613b11651d9ed07468940dc373a1262d14c04d21",
        "parent": "https://github.com/apache/tomcat/commit/d80155903b1034a61ea6335d58a08cf119eb06c0",
        "bug_id": "tomcat_41",
        "file": [
            {
                "sha": "d9c22b9af552f97734836951d28a32d0623db693",
                "filename": "java/org/apache/coyote/http11/AbstractHttp11Protocol.java",
                "blob_url": "https://github.com/apache/tomcat/blob/613b11651d9ed07468940dc373a1262d14c04d21/java/org/apache/coyote/http11/AbstractHttp11Protocol.java",
                "raw_url": "https://github.com/apache/tomcat/raw/613b11651d9ed07468940dc373a1262d14c04d21/java/org/apache/coyote/http11/AbstractHttp11Protocol.java",
                "status": "modified",
                "changes": 14,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/AbstractHttp11Protocol.java?ref=613b11651d9ed07468940dc373a1262d14c04d21",
                "patch": "@@ -562,9 +562,17 @@ public void addSslHostConfig(SSLHostConfig sslHostConfig) {\n     private SSLHostConfig defaultSSLHostConfig = null;\n     private void registerDefaultSSLHostConfig() {\n         if (defaultSSLHostConfig == null) {\n-            defaultSSLHostConfig = new SSLHostConfig();\n-            defaultSSLHostConfig.setHostName(getDefaultSSLHostConfigName());\n-            getEndpoint().addSslHostConfig(defaultSSLHostConfig);\n+            for (SSLHostConfig sslHostConfig : findSslHostConfigs()) {\n+                if (getDefaultSSLHostConfigName().equals(sslHostConfig.getHostName())) {\n+                    defaultSSLHostConfig = sslHostConfig;\n+                    break;\n+                }\n+            }\n+            if (defaultSSLHostConfig == null) {\n+                defaultSSLHostConfig = new SSLHostConfig();\n+                defaultSSLHostConfig.setHostName(getDefaultSSLHostConfigName());\n+                getEndpoint().addSslHostConfig(defaultSSLHostConfig);\n+            }\n         }\n     }\n ",
                "deletions": 3
            },
            {
                "sha": "41c84c01e471a0c17b595fce797605203d84269a",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/613b11651d9ed07468940dc373a1262d14c04d21/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/613b11651d9ed07468940dc373a1262d14c04d21/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=613b11651d9ed07468940dc373a1262d14c04d21",
                "patch": "@@ -61,6 +61,10 @@\n         ensure that that correct encoding (path differs from query string) is\n         applied and that the encoding is applied consistently. (markt)\n       </fix>\n+      <fix>\n+        Avoid a <code>NullPointerException</code> when reading attributes for a\n+        initialised HTTP connector where TLS is enabled. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Jasper\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid potential NullPointerExceptions related to access logging during shutdown, some of which have been observed when running the unit tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1790991 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/5f7c28ac317aba3eaba0f797a7fd587abd53bea6",
        "parent": "https://github.com/apache/tomcat/commit/c4c3d5fb4a4a5bcda801acd33c5bcfddb0f2c8c0",
        "bug_id": "tomcat_42",
        "file": [
            {
                "sha": "66574d6bc9459e5619c49b13bc80301d85b7fa2d",
                "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
                "blob_url": "https://github.com/apache/tomcat/blob/5f7c28ac317aba3eaba0f797a7fd587abd53bea6/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "raw_url": "https://github.com/apache/tomcat/raw/5f7c28ac317aba3eaba0f797a7fd587abd53bea6/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "status": "modified",
                "changes": 32,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/CoyoteAdapter.java?ref=5f7c28ac317aba3eaba0f797a7fd587abd53bea6",
                "patch": "@@ -276,8 +276,9 @@ public boolean asyncDispatch(org.apache.coyote.Request req, org.apache.coyote.Re\n                 if (req.getStartTime() != -1) {\n                     time = System.currentTimeMillis() - req.getStartTime();\n                 }\n-                if (request.getMappingData().context != null) {\n-                    request.getMappingData().context.logAccess(request, response, time, false);\n+                Context context = request.getContext();\n+                if (context != null) {\n+                    context.logAccess(request, response, time, false);\n                 } else {\n                     log(req, res, time);\n                 }\n@@ -390,8 +391,16 @@ public void service(org.apache.coyote.Request req, org.apache.coyote.Response re\n             if (!async && postParseSuccess) {\n                 // Log only if processing was invoked.\n                 // If postParseRequest() failed, it has already logged it.\n-                request.getMappingData().context.logAccess(request, response,\n-                        System.currentTimeMillis() - req.getStartTime(), false);\n+                Context context = request.getContext();\n+                // If the context is null, it is likely that the endpoint was\n+                // shutdown, this connection closed and the request recycled in\n+                // a different thread. That thread will have updated the access\n+                // log so it is OK not to update the access log here in that\n+                // case.\n+                if (context != null) {\n+                    context.logAccess(request, response,\n+                            System.currentTimeMillis() - req.getStartTime(), false);\n+                }\n             }\n \n             req.getRequestProcessor().setWorkerThreadName(null);\n@@ -446,18 +455,17 @@ public void log(org.apache.coyote.Request req,\n             // Log at the lowest level available. logAccess() will be\n             // automatically called on parent containers.\n             boolean logged = false;\n-            if (request.mappingData.context != null) {\n+            Context context = request.mappingData.context;\n+            Host host = request.mappingData.host;\n+            if (context != null) {\n                 logged = true;\n-                request.mappingData.context.logAccess(\n-                        request, response, time, true);\n-            } else if (request.mappingData.host != null) {\n+                context.logAccess(request, response, time, true);\n+            } else if (host != null) {\n                 logged = true;\n-                request.mappingData.host.logAccess(\n-                        request, response, time, true);\n+                host.logAccess(request, response, time, true);\n             }\n             if (!logged) {\n-                connector.getService().getContainer().logAccess(\n-                        request, response, time, true);\n+                connector.getService().getContainer().logAccess(request, response, time, true);\n             }\n         } catch (Throwable t) {\n             ExceptionUtils.handleThrowable(t);",
                "deletions": 12
            },
            {
                "sha": "77d09720cef1746e4abfaa56ccf52032bb8c1639",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/5f7c28ac317aba3eaba0f797a7fd587abd53bea6/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/5f7c28ac317aba3eaba0f797a7fd587abd53bea6/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=5f7c28ac317aba3eaba0f797a7fd587abd53bea6",
                "patch": "@@ -85,6 +85,11 @@\n         failure to load this class masking the true problem during error\n         handling. (markt)\n       </fix>\n+      <fix>\n+        Avoid potential <code>NullPointerException</code>s related to access\n+        logging during shutdown, some of which have been observed when running\n+        the unit tests. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Jasper\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid possible NPE if no manifest is present.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1815325 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/1e43950a5980fd88c27cad203eb022dcc751a81c",
        "parent": "https://github.com/apache/tomcat/commit/4e2e6b6d730823e027b6c4bdf2ec4872f95799b7",
        "bug_id": "tomcat_43",
        "file": [
            {
                "sha": "4d1d6ac31efbccd9190ac8fb2199b46c94167293",
                "filename": "java/org/apache/tomcat/util/scan/AbstractInputStreamJar.java",
                "blob_url": "https://github.com/apache/tomcat/blob/1e43950a5980fd88c27cad203eb022dcc751a81c/java/org/apache/tomcat/util/scan/AbstractInputStreamJar.java",
                "raw_url": "https://github.com/apache/tomcat/raw/1e43950a5980fd88c27cad203eb022dcc751a81c/java/org/apache/tomcat/util/scan/AbstractInputStreamJar.java",
                "status": "modified",
                "changes": 10,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/scan/AbstractInputStreamJar.java?ref=1e43950a5980fd88c27cad203eb022dcc751a81c",
                "patch": "@@ -156,11 +156,15 @@ public void reset() throws IOException {\n         if (multiRelease == null) {\n             if (JreCompat.isJre9Available()) {\n                 Manifest manifest = jarInputStream.getManifest();\n-                String mrValue = manifest.getMainAttributes().getValue(\"Multi-Release\");\n-                if (mrValue == null) {\n+                if (manifest == null) {\n                     multiRelease = Boolean.FALSE;\n                 } else {\n-                    multiRelease = Boolean.valueOf(mrValue);\n+                    String mrValue = manifest.getMainAttributes().getValue(\"Multi-Release\");\n+                    if (mrValue == null) {\n+                        multiRelease = Boolean.FALSE;\n+                    } else {\n+                        multiRelease = Boolean.valueOf(mrValue);\n+                    }\n                 }\n             } else {\n                 multiRelease = Boolean.FALSE;",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid a NullPointerException when reading attributes for a running HTTP connector where TLS is not enabled.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1789984 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/10f754d3912306833fc95ee69d322d53647df6ee",
        "parent": "https://github.com/apache/tomcat/commit/2f4285bf8218a5d2937e6be000236512a0e43110",
        "bug_id": "tomcat_44",
        "file": [
            {
                "sha": "8232a4d0c7d35338a76c6250d58a0154697c5666",
                "filename": "java/org/apache/tomcat/util/net/AbstractEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/10f754d3912306833fc95ee69d322d53647df6ee/java/org/apache/tomcat/util/net/AbstractEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/10f754d3912306833fc95ee69d322d53647df6ee/java/org/apache/tomcat/util/net/AbstractEndpoint.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/AbstractEndpoint.java?ref=10f754d3912306833fc95ee69d322d53647df6ee",
                "patch": "@@ -188,7 +188,7 @@ public void addSslHostConfig(SSLHostConfig sslHostConfig) throws IllegalArgument\n             throw new IllegalArgumentException(sm.getString(\"endpoint.noSslHostName\"));\n         }\n         sslHostConfig.setConfigType(getSslConfigType());\n-        if (bindState != BindState.UNBOUND) {\n+        if (bindState != BindState.UNBOUND && isSSLEnabled()) {\n             try {\n                 createSSLContext(sslHostConfig);\n             } catch (Exception e) {",
                "deletions": 1
            },
            {
                "sha": "069f92484d569cf66cb77f13fdb2a5982283ce68",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/10f754d3912306833fc95ee69d322d53647df6ee/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/10f754d3912306833fc95ee69d322d53647df6ee/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=10f754d3912306833fc95ee69d322d53647df6ee",
                "patch": "@@ -60,6 +60,10 @@\n         Correct a regression in the X to comma refactoring that broke JMX\n         operations that take parameters. (markt)\n       </fix>\n+      <fix>\n+        Avoid a <code>NullPointerException</code> when reading attributes for a\n+        running HTTP connector where TLS is not enabled. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Jasper\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "In StatementFacade, the method call on the statements that have been closed throw SQLException rather than NullPointerException.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1789917 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/e4161168a16b85fccf27c4bf7d90b05b55bc0830",
        "parent": "https://github.com/apache/tomcat/commit/603efb41f77f045105c69dcd2f8e18abaeae9944",
        "bug_id": "tomcat_45",
        "file": [
            {
                "sha": "eac84838d46b4f07db1748f5b9274b6b341fda34",
                "filename": "modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/StatementFacade.java",
                "blob_url": "https://github.com/apache/tomcat/blob/e4161168a16b85fccf27c4bf7d90b05b55bc0830/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/StatementFacade.java",
                "raw_url": "https://github.com/apache/tomcat/raw/e4161168a16b85fccf27c4bf7d90b05b55bc0830/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/StatementFacade.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/StatementFacade.java?ref=e4161168a16b85fccf27c4bf7d90b05b55bc0830",
                "patch": "@@ -25,6 +25,7 @@\n import java.lang.reflect.Proxy;\n import java.sql.CallableStatement;\n import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n import java.sql.Statement;\n \n import org.apache.juli.logging.Log;\n@@ -106,7 +107,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl\n             if (compare(ISCLOSED_VAL, method)) {\n                 if (delegate == null) return Boolean.TRUE;\n             }\n-\n+            if (delegate == null) throw new SQLException(\"Statement closed.\");\n             Object result =  null;\n             try {\n                 //invoke next",
                "deletions": 1
            },
            {
                "sha": "37c13684a1c7631dc624a09a62869cd183a3b823",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/e4161168a16b85fccf27c4bf7d90b05b55bc0830/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/e4161168a16b85fccf27c4bf7d90b05b55bc0830/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=e4161168a16b85fccf27c4bf7d90b05b55bc0830",
                "patch": "@@ -73,6 +73,11 @@\n         Refactor the creating a constructor for a proxy class to reduce\n         duplicate code. (kfujino)\n       </scode>\n+      <fix>\n+        In <code>StatementFacade</code>, the method call on the statements that\n+        have been closed throw <code>SQLException</code> rather than\n+        <code>NullPointerException</code>. (kfujino)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Other\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1803622 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/ddb4248ff1394499e70bb17ea6040d45f9633ec2",
        "parent": "https://github.com/apache/tomcat/commit/97d86d44bfc701a9aae963d94f745f88d3f75106",
        "bug_id": "tomcat_46",
        "file": [
            {
                "sha": "fea74eb1f932aab2032524f92f277ad7d5d158d3",
                "filename": "java/org/apache/catalina/core/StandardContext.java",
                "blob_url": "https://github.com/apache/tomcat/blob/ddb4248ff1394499e70bb17ea6040d45f9633ec2/java/org/apache/catalina/core/StandardContext.java",
                "raw_url": "https://github.com/apache/tomcat/raw/ddb4248ff1394499e70bb17ea6040d45f9633ec2/java/org/apache/catalina/core/StandardContext.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/StandardContext.java?ref=ddb4248ff1394499e70bb17ea6040d45f9633ec2",
                "patch": "@@ -840,7 +840,11 @@ public void setResponseCharacterEncoding(String responseEncoding) {\n          * differentiate between a Response using this default encoding and one\n          * that has been explicitly configured.\n          */\n-        this.responseEncoding = new String(responseEncoding);\n+        if (responseEncoding == null) {\n+            this.responseEncoding = null;\n+        } else {\n+            this.responseEncoding = new String(responseEncoding);\n+        }\n     }\n \n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=61779\nAvoid a NullPointerException when a null RegistrationListener is passed to AuthConfigFactory.getConfigProvider()\nPatch provided by Lazar.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1815802 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/d28f926228e637a18032c95d9e832f608e64d8cc",
        "parent": "https://github.com/apache/tomcat/commit/2c5c659d30a4a3c9af06ac58f1e1199c3c5a86b2",
        "bug_id": "tomcat_47",
        "file": [
            {
                "sha": "18e136c6e2988a7310c64b13d718537eb1ccdee8",
                "filename": "java/org/apache/catalina/authenticator/jaspic/AuthConfigFactoryImpl.java",
                "blob_url": "https://github.com/apache/tomcat/blob/d28f926228e637a18032c95d9e832f608e64d8cc/java/org/apache/catalina/authenticator/jaspic/AuthConfigFactoryImpl.java",
                "raw_url": "https://github.com/apache/tomcat/raw/d28f926228e637a18032c95d9e832f608e64d8cc/java/org/apache/catalina/authenticator/jaspic/AuthConfigFactoryImpl.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/authenticator/jaspic/AuthConfigFactoryImpl.java?ref=d28f926228e637a18032c95d9e832f608e64d8cc",
                "patch": "@@ -75,9 +75,11 @@ public AuthConfigProvider getConfigProvider(String layer, String appContext,\n         RegistrationContextImpl registrationContext =\n                 findRegistrationContextImpl(layer, appContext);\n         if (registrationContext != null) {\n-            RegistrationListenerWrapper wrapper = new RegistrationListenerWrapper(\n-                    layer, appContext, listener);\n-            registrationContext.addListener(wrapper);\n+            if (listener != null) {\n+                RegistrationListenerWrapper wrapper = new RegistrationListenerWrapper(\n+                        layer, appContext, listener);\n+                registrationContext.addListener(wrapper);\n+            }\n             return registrationContext.getProvider();\n         }\n         return null;",
                "deletions": 3
            },
            {
                "sha": "40d0beb5d1839dad01e6f6b95553d6f7d18691df",
                "filename": "test/org/apache/catalina/authenticator/jaspic/TestAuthConfigFactoryImpl.java",
                "blob_url": "https://github.com/apache/tomcat/blob/d28f926228e637a18032c95d9e832f608e64d8cc/test/org/apache/catalina/authenticator/jaspic/TestAuthConfigFactoryImpl.java",
                "raw_url": "https://github.com/apache/tomcat/raw/d28f926228e637a18032c95d9e832f608e64d8cc/test/org/apache/catalina/authenticator/jaspic/TestAuthConfigFactoryImpl.java",
                "status": "modified",
                "changes": 13,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/authenticator/jaspic/TestAuthConfigFactoryImpl.java?ref=d28f926228e637a18032c95d9e832f608e64d8cc",
                "patch": "@@ -274,6 +274,19 @@ public void testDetachListener() {\n     }\n \n \n+    @Test\n+    public void testRegistrationNullListener() {\n+        AuthConfigFactory factory = new AuthConfigFactoryImpl();\n+        AuthConfigProvider acp1 = new SimpleAuthConfigProvider(null, null);\n+        String registrationId = factory.registerConfigProvider(acp1, \"L_1\", \"AC_1\", null);\n+\n+        factory.getConfigProvider(\"L_1\", \"AC_1\", null);\n+\n+        boolean result = factory.removeRegistration(registrationId);\n+        Assert.assertTrue(result);\n+    }\n+\n+\n     private static class SimpleRegistrationListener implements RegistrationListener {\n \n         private final String layer;",
                "deletions": 0
            },
            {
                "sha": "8a96f64c3de8165d096c65643b8810804ed59268",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/d28f926228e637a18032c95d9e832f608e64d8cc/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/d28f926228e637a18032c95d9e832f608e64d8cc/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=d28f926228e637a18032c95d9e832f608e64d8cc",
                "patch": "@@ -91,6 +91,12 @@\n         <bug>61778</bug>: Correct the return value when detaching a JASPIC\n         <code>RegistrationListener</code>. Patch provided by Lazar. (markt)\n       </fix>\n+      <fix>\n+        <bug>61779</bug>: Avoid a <code>NullPointerException</code> when a\n+        <code>null</code> <code>RegistrationListener</code> is passed to\n+        <code>AuthConfigFactory.getConfigProvider()</code>. Patch provided by\n+        Lazar. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=61777\nAvoid a NullPointerException when detaching a JASPIC RegistrationListener.\nPatch provided by Lazar.\nThis closes #85\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1815793 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/277d583b32b874357626f16182eebbc30cc8d1d8",
        "parent": "https://github.com/apache/tomcat/commit/12967ea85ef26450854a7b13ca14c26fa9e281e3",
        "bug_id": "tomcat_48",
        "file": [
            {
                "sha": "e2c7e311d539e2a415cf91422683e2b565c98dc6",
                "filename": "java/org/apache/catalina/authenticator/jaspic/AuthConfigFactoryImpl.java",
                "blob_url": "https://github.com/apache/tomcat/blob/277d583b32b874357626f16182eebbc30cc8d1d8/java/org/apache/catalina/authenticator/jaspic/AuthConfigFactoryImpl.java",
                "raw_url": "https://github.com/apache/tomcat/raw/277d583b32b874357626f16182eebbc30cc8d1d8/java/org/apache/catalina/authenticator/jaspic/AuthConfigFactoryImpl.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/authenticator/jaspic/AuthConfigFactoryImpl.java?ref=277d583b32b874357626f16182eebbc30cc8d1d8",
                "patch": "@@ -243,7 +243,7 @@ public boolean removeRegistration(String registrationID) {\n     public String[] detachListener(RegistrationListener listener, String layer, String appContext) {\n         String registrationID = getRegistrationID(layer, appContext);\n         RegistrationContextImpl registrationContext = findRegistrationContextImpl(layer, appContext);\n-        if (registrationContext.removeListener(listener)) {\n+        if (registrationContext != null && registrationContext.removeListener(listener)) {\n             return new String[] { registrationID };\n         }\n         return EMPTY_STRING_ARRAY;",
                "deletions": 1
            },
            {
                "sha": "524e524d5ed48c61ee778e6b430134cfe435dd2c",
                "filename": "test/org/apache/catalina/authenticator/jaspic/TestAuthConfigFactoryImpl.java",
                "blob_url": "https://github.com/apache/tomcat/blob/277d583b32b874357626f16182eebbc30cc8d1d8/test/org/apache/catalina/authenticator/jaspic/TestAuthConfigFactoryImpl.java",
                "raw_url": "https://github.com/apache/tomcat/raw/277d583b32b874357626f16182eebbc30cc8d1d8/test/org/apache/catalina/authenticator/jaspic/TestAuthConfigFactoryImpl.java",
                "status": "modified",
                "changes": 15,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/authenticator/jaspic/TestAuthConfigFactoryImpl.java?ref=277d583b32b874357626f16182eebbc30cc8d1d8",
                "patch": "@@ -244,6 +244,21 @@ private void doTestRegistrationInsert(String newLayer, String newAppContext,\n     }\n \n \n+    @Test\n+    public void testDetachListenerNonexistingRegistration() {\n+        AuthConfigFactory factory = new AuthConfigFactoryImpl();\n+        AuthConfigProvider acp1 = new SimpleAuthConfigProvider(null, null);\n+        String registrationId = factory.registerConfigProvider(acp1, \"L_1\", \"AC_1\", null);\n+\n+        SimpleRegistrationListener listener1 = new SimpleRegistrationListener(\"L_1\", \"AC_1\");\n+        factory.getConfigProvider(\"L_1\", \"AC_1\", listener1);\n+\n+        factory.removeRegistration(registrationId);\n+        String[] registrationIds = factory.detachListener(listener1, \"L_1\", \"AC_1\");\n+        Assert.assertTrue(registrationIds.length == 0);\n+    }\n+\n+\n     private static class SimpleRegistrationListener implements RegistrationListener {\n \n         private final String layer;",
                "deletions": 0
            },
            {
                "sha": "107d104b6430bdebe9f943522844dc42f924b044",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/277d583b32b874357626f16182eebbc30cc8d1d8/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/277d583b32b874357626f16182eebbc30cc8d1d8/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=277d583b32b874357626f16182eebbc30cc8d1d8",
                "patch": "@@ -82,6 +82,11 @@\n         Avoid a possible <code>NullPointerException</code> when timing out\n         <code>AsyncContext</code> instances during shut down. (markt)\n       </fix>\n+      <fix>\n+        <bug>61777</bug>: Avoid a <code>NullPointerException</code> when\n+        detaching a JASPIC <code>RegistrationListener</code>. Patch provided by\n+        Lazar. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "62053: Fix NPE when writing push headers with HTTP/2 NIO2. Patch submitted by Holger Sunke.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1822867 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/dff44b9391cb2d768e9a39f7a5cb0a064158ab3f",
        "parent": "https://github.com/apache/tomcat/commit/b89ca2bc4b485edaa3373a2fa62b45bbec7fcf7a",
        "bug_id": "tomcat_49",
        "file": [
            {
                "sha": "2d5965d4e7389edc3a43e6f128af324722d85db9",
                "filename": "java/org/apache/coyote/http2/Http2AsyncUpgradeHandler.java",
                "blob_url": "https://github.com/apache/tomcat/blob/dff44b9391cb2d768e9a39f7a5cb0a064158ab3f/java/org/apache/coyote/http2/Http2AsyncUpgradeHandler.java",
                "raw_url": "https://github.com/apache/tomcat/raw/dff44b9391cb2d768e9a39f7a5cb0a064158ab3f/java/org/apache/coyote/http2/Http2AsyncUpgradeHandler.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http2/Http2AsyncUpgradeHandler.java?ref=dff44b9391cb2d768e9a39f7a5cb0a064158ab3f",
                "patch": "@@ -155,7 +155,9 @@ void writeHeaders(Stream stream, int pushedStreamId, MimeHeaders mimeHeaders,\n         synchronized (socketWrapper) {\n             AsyncHeaderFrameBuffers headerFrameBuffers = (AsyncHeaderFrameBuffers)\n                     doWriteHeaders(stream, pushedStreamId, mimeHeaders, endOfStream, payloadSize);\n-            bufs = headerFrameBuffers.bufs.toArray(BYTEBUFFER_ARRAY);\n+            if (headerFrameBuffers != null) {\n+                bufs = headerFrameBuffers.bufs.toArray(BYTEBUFFER_ARRAY);\n+            }\n         }\n         if (bufs != null) {\n             socketWrapper.write(BlockingMode.SEMI_BLOCK, protocol.getWriteTimeout(),",
                "deletions": 1
            },
            {
                "sha": "2fb2f4f7a379c460ec5de43dab6baffe8fbc7ff9",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/dff44b9391cb2d768e9a39f7a5cb0a064158ab3f/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/dff44b9391cb2d768e9a39f7a5cb0a064158ab3f/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=dff44b9391cb2d768e9a39f7a5cb0a064158ab3f",
                "patch": "@@ -135,6 +135,10 @@\n         names (excluding top-level domains) to start with a number and to ensure\n         that top-level domains are fully alphabetic. (markt)\n       </fix>\n+      <fix>\n+        <bug>62053</bug>: Fix NPE when writing push headers with HTTP/2 NIO2.\n+        Patch submitted by Holger Sunke. (remm)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Jasper\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Handle possible NPE in unit test\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1807755 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/3dc8a68d6cbf4fc31ae8dbb030c6148c36cc623e",
        "parent": "https://github.com/apache/tomcat/commit/956893e387af4ffbbba83afc6bc22907abb9c889",
        "bug_id": "tomcat_50",
        "file": [
            {
                "sha": "2739569fb169ba6ac06352b4d306a7cb0b498236",
                "filename": "test/org/apache/tomcat/util/net/openssl/TestOpenSSLConf.java",
                "blob_url": "https://github.com/apache/tomcat/blob/3dc8a68d6cbf4fc31ae8dbb030c6148c36cc623e/test/org/apache/tomcat/util/net/openssl/TestOpenSSLConf.java",
                "raw_url": "https://github.com/apache/tomcat/raw/3dc8a68d6cbf4fc31ae8dbb030c6148c36cc623e/test/org/apache/tomcat/util/net/openssl/TestOpenSSLConf.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/tomcat/util/net/openssl/TestOpenSSLConf.java?ref=3dc8a68d6cbf4fc31ae8dbb030c6148c36cc623e",
                "patch": "@@ -41,8 +41,8 @@ public SSLHostConfig initOpenSSLConfCmdCipher(String name, String value) throws\n         String protocol = tomcat.getConnector().getProtocolHandlerClassName();\n         // The tests are only supported for APR and OpenSSL\n         if (!protocol.contains(\"Apr\")) {\n-            String sslImplementation =\n-                tomcat.getConnector().getProperty(\"sslImplementationName\").toString();\n+            String sslImplementation = String.valueOf(\n+                    tomcat.getConnector().getProperty(\"sslImplementationName\"));\n             Assume.assumeTrue(\"This test is only for OpenSSL based SSL connectors\",\n                 sslImplementation.contains(\"openssl\"));\n         }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPEs in tests after refactoring\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1807334 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/f6784e67622fe9f09ffc31b03e093988c9224fcd",
        "parent": "https://github.com/apache/tomcat/commit/1dc8594099e24426b799bb0acf80aa3462a8bf70",
        "bug_id": "tomcat_51",
        "file": [
            {
                "sha": "1ff210fd7b3490b7e1ca3ad3e9828945c71d02b4",
                "filename": "test/org/apache/coyote/http2/TestAbstractStream.java",
                "blob_url": "https://github.com/apache/tomcat/blob/f6784e67622fe9f09ffc31b03e093988c9224fcd/test/org/apache/coyote/http2/TestAbstractStream.java",
                "raw_url": "https://github.com/apache/tomcat/raw/f6784e67622fe9f09ffc31b03e093988c9224fcd/test/org/apache/coyote/http2/TestAbstractStream.java",
                "status": "modified",
                "changes": 12,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/coyote/http2/TestAbstractStream.java?ref=f6784e67622fe9f09ffc31b03e093988c9224fcd",
                "patch": "@@ -28,7 +28,7 @@\n     @Test\n     public void testDependenciesFig3() {\n         // Setup\n-        Http2UpgradeHandler handler = new Http2UpgradeHandler(null, null, null);\n+        Http2UpgradeHandler handler = new Http2UpgradeHandler(new Http2Protocol(), null, null);\n         Stream a = new Stream(Integer.valueOf(1), handler);\n         Stream b = new Stream(Integer.valueOf(2), handler);\n         Stream c = new Stream(Integer.valueOf(3), handler);\n@@ -59,7 +59,7 @@ public void testDependenciesFig3() {\n     @Test\n     public void testDependenciesFig4() {\n         // Setup\n-        Http2UpgradeHandler handler = new Http2UpgradeHandler(null, null, null);\n+        Http2UpgradeHandler handler = new Http2UpgradeHandler(new Http2Protocol(), null, null);\n         Stream a = new Stream(Integer.valueOf(1), handler);\n         Stream b = new Stream(Integer.valueOf(2), handler);\n         Stream c = new Stream(Integer.valueOf(3), handler);\n@@ -90,7 +90,7 @@ public void testDependenciesFig4() {\n     @Test\n     public void testDependenciesFig5NonExclusive() {\n         // Setup\n-        Http2UpgradeHandler handler = new Http2UpgradeHandler(null, null, null);\n+        Http2UpgradeHandler handler = new Http2UpgradeHandler(new Http2Protocol(), null, null);\n         Stream a = new Stream(Integer.valueOf(1), handler);\n         Stream b = new Stream(Integer.valueOf(2), handler);\n         Stream c = new Stream(Integer.valueOf(3), handler);\n@@ -132,7 +132,7 @@ public void testDependenciesFig5NonExclusive() {\n     @Test\n     public void testDependenciesFig5Exclusive() {\n         // Setup\n-        Http2UpgradeHandler handler = new Http2UpgradeHandler(null, null, null);\n+        Http2UpgradeHandler handler = new Http2UpgradeHandler(new Http2Protocol(), null, null);\n         Stream a = new Stream(Integer.valueOf(1), handler);\n         Stream b = new Stream(Integer.valueOf(2), handler);\n         Stream c = new Stream(Integer.valueOf(3), handler);\n@@ -174,7 +174,7 @@ public void testDependenciesFig5Exclusive() {\n     @Test\n     public void testCircular01() {\n         // Setup\n-        Http2UpgradeHandler handler = new Http2UpgradeHandler(null, null, null);\n+        Http2UpgradeHandler handler = new Http2UpgradeHandler(new Http2Protocol(), null, null);\n         Stream a = new Stream(Integer.valueOf(1), handler);\n         Stream b = new Stream(Integer.valueOf(2), handler);\n         Stream c = new Stream(Integer.valueOf(3), handler);\n@@ -204,7 +204,7 @@ public void testCircular01() {\n     @Test\n     public void testCircular02() {\n         // Setup\n-        Http2UpgradeHandler handler = new Http2UpgradeHandler(null, null, null);\n+        Http2UpgradeHandler handler = new Http2UpgradeHandler(new Http2Protocol(), null, null);\n         Stream a = new Stream(Integer.valueOf(1), handler);\n         Stream b = new Stream(Integer.valueOf(2), handler);\n         Stream c = new Stream(Integer.valueOf(3), handler);",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Ensure that the toString(), toBytes() and toChars() methods of\nMessageBytes behave consistently and do not throw a\nNullPointerException both on newly created objects and immediately after\na call to recycle().\nThis should not impact typical Tomcat users.\nIt may impact users who use these classes directly in their own code.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1822499 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/99ef72084d13385276ead3640017a8c0e4c3fe2e",
        "parent": "https://github.com/apache/tomcat/commit/c95560ad973ba2adaf3bb88e4f451d4bacc45841",
        "bug_id": "tomcat_52",
        "file": [
            {
                "sha": "de4942fe4416fc3e37ce839d5c58fc39c3074130",
                "filename": "java/org/apache/tomcat/util/buf/MessageBytes.java",
                "blob_url": "https://github.com/apache/tomcat/blob/99ef72084d13385276ead3640017a8c0e4c3fe2e/java/org/apache/tomcat/util/buf/MessageBytes.java",
                "raw_url": "https://github.com/apache/tomcat/raw/99ef72084d13385276ead3640017a8c0e4c3fe2e/java/org/apache/tomcat/util/buf/MessageBytes.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/buf/MessageBytes.java?ref=99ef72084d13385276ead3640017a8c0e4c3fe2e",
                "patch": "@@ -230,10 +230,14 @@ public void setCharset(Charset charset) {\n         byteC.setCharset(charset);\n     }\n \n+\n     /**\n      * Do a char-&gt;byte conversion.\n      */\n     public void toBytes() {\n+        if (isNull()) {\n+            return;\n+        }\n         if (!byteC.isNull()) {\n             type = T_BYTES;\n             return;\n@@ -245,11 +249,15 @@ public void toBytes() {\n         byteC.setBytes(result.array(), result.arrayOffset(), result.limit());\n     }\n \n+\n     /**\n      * Convert to char[] and fill the CharChunk.\n      * XXX Not optimized - it converts to String first.\n      */\n     public void toChars() {\n+        if (isNull()) {\n+            return;\n+        }\n         if (!charC.isNull()) {\n             type = T_CHARS;\n             return;",
                "deletions": 0
            },
            {
                "sha": "f9af7fd19dcc906683263507b9722dc1bc118ba1",
                "filename": "test/org/apache/tomcat/util/buf/TestMessageBytes.java",
                "blob_url": "https://github.com/apache/tomcat/blob/99ef72084d13385276ead3640017a8c0e4c3fe2e/test/org/apache/tomcat/util/buf/TestMessageBytes.java",
                "raw_url": "https://github.com/apache/tomcat/raw/99ef72084d13385276ead3640017a8c0e4c3fe2e/test/org/apache/tomcat/util/buf/TestMessageBytes.java",
                "status": "added",
                "changes": 69,
                "additions": 69,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/tomcat/util/buf/TestMessageBytes.java?ref=99ef72084d13385276ead3640017a8c0e4c3fe2e",
                "patch": "@@ -0,0 +1,69 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.tomcat.util.buf;\n+\n+import org.junit.Test;\n+\n+public class TestMessageBytes {\n+\n+    @Test\n+    public void testToStringFromNull() {\n+        MessageBytes mb = MessageBytes.newInstance();\n+        mb.toString();\n+    }\n+\n+\n+    @Test\n+    public void testToBytesFromNull() {\n+        MessageBytes mb = MessageBytes.newInstance();\n+        mb.toBytes();\n+    }\n+\n+\n+    @Test\n+    public void testToCharsFromNull() {\n+        MessageBytes mb = MessageBytes.newInstance();\n+        mb.toChars();\n+    }\n+\n+\n+    @Test\n+    public void testToStringAfterRecycle() {\n+        MessageBytes mb = MessageBytes.newInstance();\n+        mb.setString(\"foo\");\n+        mb.recycle();\n+        mb.toString();\n+    }\n+\n+\n+    @Test\n+    public void testToBytesAfterRecycle() {\n+        MessageBytes mb = MessageBytes.newInstance();\n+        mb.setString(\"foo\");\n+        mb.recycle();\n+        mb.toBytes();\n+    }\n+\n+\n+    @Test\n+    public void testToCharsAfterRecycle() {\n+        MessageBytes mb = MessageBytes.newInstance();\n+        mb.setString(\"foo\");\n+        mb.recycle();\n+        mb.toChars();\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "93c8aad3cc0bdfaed6827de8001a70d098d4683e",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/99ef72084d13385276ead3640017a8c0e4c3fe2e/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/99ef72084d13385276ead3640017a8c0e4c3fe2e/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=99ef72084d13385276ead3640017a8c0e4c3fe2e",
                "patch": "@@ -106,6 +106,15 @@\n         may impact users who use these classes directly in their own code.\n         (markt)\n       </fix>\n+      <fix>\n+        Ensure that the <code>toString()</code>, <code>toBytes()</code> and\n+        <code>toChars()</code> methods of <code>MessageBytes</code> behave\n+        consistently and do not throw a <code>NullPointerException</code> both\n+        on newly created objects and immediately after a call to\n+        <code>recycle()</code>. This should not impact typical Tomcat users. It\n+        may impact users who use these classes directly in their own code.\n+        (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Jasper\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "61914: Avoid possible NPE on Java 9 when creating a SSL engine. Patch submitted by Evgenij Ryazanov.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1818919 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/81bca3a2c9dbf9d6d857cc06b8b8a6ca3dda4259",
        "parent": "https://github.com/apache/tomcat/commit/d6088b055ab7b12fa923545d1f953629f22f4e4f",
        "bug_id": "tomcat_53",
        "file": [
            {
                "sha": "463d9ce8849f242d893504f46f97f2c21332c29b",
                "filename": "java/org/apache/tomcat/util/net/AbstractJsseEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/81bca3a2c9dbf9d6d857cc06b8b8a6ca3dda4259/java/org/apache/tomcat/util/net/AbstractJsseEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/81bca3a2c9dbf9d6d857cc06b8b8a6ca3dda4259/java/org/apache/tomcat/util/net/AbstractJsseEndpoint.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/AbstractJsseEndpoint.java?ref=81bca3a2c9dbf9d6d857cc06b8b8a6ca3dda4259",
                "patch": "@@ -177,8 +177,9 @@ protected SSLEngine createSSLEngine(String sniHostName, List<Cipher> clientReque\n \n         SSLParameters sslParameters = engine.getSSLParameters();\n         sslParameters.setUseCipherSuitesOrder(sslHostConfig.getHonorCipherOrder());\n-        if (JreCompat.isJre9Available() && clientRequestedApplicationProtocols.size() > 0 &&\n-                negotiableProtocols.size() > 0) {\n+        if (JreCompat.isJre9Available() && clientRequestedApplicationProtocols != null\n+                && clientRequestedApplicationProtocols.size() > 0\n+                && negotiableProtocols.size() > 0) {\n             // Only try to negotiate if both client and server have at least\n             // one protocol in common\n             // Note: Tomcat does not explicitly negotiate http/1.1",
                "deletions": 2
            },
            {
                "sha": "3c18ac4dd2bd5d9f8db8e7c4f8aed21607102374",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/81bca3a2c9dbf9d6d857cc06b8b8a6ca3dda4259/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/81bca3a2c9dbf9d6d857cc06b8b8a6ca3dda4259/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=81bca3a2c9dbf9d6d857cc06b8b8a6ca3dda4259",
                "patch": "@@ -75,6 +75,10 @@\n         <bug>61918</bug>: Fix connectionLimitLatch counting when closing an\n         already closed socket. Based on a patch by Ryan Fong. (remm)\n       </fix>\n+      <fix>\n+        <bug>61914</bug>: Possible NPE with Java 9 when creating a SSL engine.\n+        Patch submitted by Evgenij Ryazanov. (remm)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Jasper\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1793910 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/2732a76d1da6509ffbcdc490b5357f5c86614133",
        "parent": "https://github.com/apache/tomcat/commit/92567fd01d590f4885bccbf600d9e2c0e28c7e44",
        "bug_id": "tomcat_54",
        "file": [
            {
                "sha": "4fa593e4c837ab87242eb47915ece21fa6f8f89f",
                "filename": "java/org/apache/catalina/connector/Request.java",
                "blob_url": "https://github.com/apache/tomcat/blob/2732a76d1da6509ffbcdc490b5357f5c86614133/java/org/apache/catalina/connector/Request.java",
                "raw_url": "https://github.com/apache/tomcat/raw/2732a76d1da6509ffbcdc490b5357f5c86614133/java/org/apache/catalina/connector/Request.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/Request.java?ref=2732a76d1da6509ffbcdc490b5357f5c86614133",
                "patch": "@@ -2826,8 +2826,7 @@ private void parseParts(boolean explicit) {\n                         String name = part.getName();\n                         String value = null;\n                         try {\n-                            Charset paramCharset = parameters.getCharset();\n-                            value = part.getString(paramCharset.name());\n+                            value = part.getString(charset.name());\n                         } catch (UnsupportedEncodingException uee) {\n                             // Not possible\n                         }",
                "deletions": 2
            },
            {
                "sha": "5bd9ba73eae2fa299412410979d36beaa2c7c20d",
                "filename": "java/org/apache/tomcat/util/http/Parameters.java",
                "blob_url": "https://github.com/apache/tomcat/blob/2732a76d1da6509ffbcdc490b5357f5c86614133/java/org/apache/tomcat/util/http/Parameters.java",
                "raw_url": "https://github.com/apache/tomcat/raw/2732a76d1da6509ffbcdc490b5357f5c86614133/java/org/apache/tomcat/util/http/Parameters.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/http/Parameters.java?ref=2732a76d1da6509ffbcdc490b5357f5c86614133",
                "patch": "@@ -129,7 +129,7 @@ public void recycle() {\n         parameterCount = 0;\n         paramHashValues.clear();\n         didQueryParameters = false;\n-        charset = null;\n+        charset = DEFAULT_BODY_CHARSET;\n         decodedQuery.recycle();\n         parseFailedReason = null;\n     }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1793907 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/92567fd01d590f4885bccbf600d9e2c0e28c7e44",
        "parent": "https://github.com/apache/tomcat/commit/a68887cfef6b306663f5115871d19f9b732304e2",
        "bug_id": "tomcat_55",
        "file": [
            {
                "sha": "3146c5a671ec5f64a8b80d4d5fabbc4c43d04f98",
                "filename": "java/org/apache/catalina/connector/Request.java",
                "blob_url": "https://github.com/apache/tomcat/blob/92567fd01d590f4885bccbf600d9e2c0e28c7e44/java/org/apache/catalina/connector/Request.java",
                "raw_url": "https://github.com/apache/tomcat/raw/92567fd01d590f4885bccbf600d9e2c0e28c7e44/java/org/apache/catalina/connector/Request.java",
                "status": "modified",
                "changes": 10,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/Request.java?ref=92567fd01d590f4885bccbf600d9e2c0e28c7e44",
                "patch": "@@ -994,10 +994,12 @@ private Charset getCharset() {\n         Context context = getContext();\n         if (context != null) {\n             String encoding = context.getRequestCharacterEncoding();\n-            try {\n-                return B2CConverter.getCharset(encoding);\n-            } catch (UnsupportedEncodingException e) {\n-                // Ignore\n+            if (encoding != null) {\n+                try {\n+                    return B2CConverter.getCharset(encoding);\n+                } catch (UnsupportedEncodingException e) {\n+                    // Ignore\n+                }\n             }\n         }\n ",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1793449 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/289b6fbf31acde9f27152868c2f7ed3720305265",
        "parent": "https://github.com/apache/tomcat/commit/b6de81309c40dba3bb282736dfb6b5f7b9543598",
        "bug_id": "tomcat_56",
        "file": [
            {
                "sha": "b64838560f7731a9ce1e66cd43a4ab65df286dae",
                "filename": "java/org/apache/tomcat/util/digester/Digester.java",
                "blob_url": "https://github.com/apache/tomcat/blob/289b6fbf31acde9f27152868c2f7ed3720305265/java/org/apache/tomcat/util/digester/Digester.java",
                "raw_url": "https://github.com/apache/tomcat/raw/289b6fbf31acde9f27152868c2f7ed3720305265/java/org/apache/tomcat/util/digester/Digester.java",
                "status": "modified",
                "changes": 10,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/digester/Digester.java?ref=289b6fbf31acde9f27152868c2f7ed3720305265",
                "patch": "@@ -1124,10 +1124,12 @@ public void startDocument() throws SAXException {\n         if (locator instanceof Locator2) {\n             if (root instanceof DocumentProperties.Charset) {\n                 String enc = ((Locator2) locator).getEncoding();\n-                try {\n-                    ((DocumentProperties.Charset) root).setCharset(B2CConverter.getCharset(enc));\n-                } catch (UnsupportedEncodingException e) {\n-                    log.warn(sm.getString(\"disgester.encodingInvalid\", enc), e);\n+                if (enc != null) {\n+                    try {\n+                        ((DocumentProperties.Charset) root).setCharset(B2CConverter.getCharset(enc));\n+                    } catch (UnsupportedEncodingException e) {\n+                        log.warn(sm.getString(\"disgester.encodingInvalid\", enc), e);\n+                    }\n                 }\n             }\n         }",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE and dead store warnings.\nReported by FindBugs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1800988 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/d27fbc0d650e1bd8d669bb5c6d9a186109df4e94",
        "parent": "https://github.com/apache/tomcat/commit/b8fbf59a24f0b6a13ed78b36a2b7415142e5e65e",
        "bug_id": "tomcat_57",
        "file": [
            {
                "sha": "1c300ec2db021d23621b1ffe73cb8a4f502cf0f9",
                "filename": "test/org/apache/juli/TestFileHandler.java",
                "blob_url": "https://github.com/apache/tomcat/blob/d27fbc0d650e1bd8d669bb5c6d9a186109df4e94/test/org/apache/juli/TestFileHandler.java",
                "raw_url": "https://github.com/apache/tomcat/raw/d27fbc0d650e1bd8d669bb5c6d9a186109df4e94/test/org/apache/juli/TestFileHandler.java",
                "status": "modified",
                "changes": 21,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/juli/TestFileHandler.java?ref=d27fbc0d650e1bd8d669bb5c6d9a186109df4e94",
                "patch": "@@ -65,18 +65,21 @@ public void setUp() throws Exception {\n \n     @After\n     public void tearDown() {\n-        for (File file : logsDir.listFiles()) {\n-            file.delete();\n+        File[] files = logsDir.listFiles();\n+        if (files != null) {\n+            for (File file : files) {\n+                file.delete();\n+            }\n+            logsDir.delete();\n         }\n-        logsDir.delete();\n     }\n \n     @SuppressWarnings(\"unused\")\n     @Test\n     public void testCleanOnInitOneHandler() throws Exception {\n         generateLogFiles(logsDir, PREFIX_1, SUFIX_1, 3);\n \n-        FileHandler handler = new FileHandler(logsDir.getAbsolutePath(), PREFIX_1, SUFIX_1, 2);\n+        new FileHandler(logsDir.getAbsolutePath(), PREFIX_1, SUFIX_1, 2);\n \n         Thread.sleep(1000);\n \n@@ -88,10 +91,10 @@ public void testCleanOnInitOneHandler() throws Exception {\n     public void testCleanOnInitMultipleHandlers() throws Exception {\n         generateLogFiles(logsDir, PREFIX_1, SUFIX_1, 3);\n \n-        FileHandler handler1 = new FileHandler(logsDir.getAbsolutePath(), PREFIX_1, SUFIX_1, 2);\n-        FileHandler handler2 = new FileHandler(logsDir.getAbsolutePath(), PREFIX_1, SUFIX_2, 2);\n-        FileHandler handler3 = new FileHandler(logsDir.getAbsolutePath(), PREFIX_2, SUFIX_1, 2);\n-        FileHandler handler4 = new FileHandler(logsDir.getAbsolutePath(), PREFIX_3, SUFIX_1, 2);\n+        new FileHandler(logsDir.getAbsolutePath(), PREFIX_1, SUFIX_1, 2);\n+        new FileHandler(logsDir.getAbsolutePath(), PREFIX_1, SUFIX_2, 2);\n+        new FileHandler(logsDir.getAbsolutePath(), PREFIX_2, SUFIX_1, 2);\n+        new FileHandler(logsDir.getAbsolutePath(), PREFIX_3, SUFIX_1, 2);\n \n         Thread.sleep(1000);\n \n@@ -103,7 +106,7 @@ public void testCleanOnInitMultipleHandlers() throws Exception {\n     public void testCleanDisabled() throws Exception {\n         generateLogFiles(logsDir, PREFIX_1, SUFIX_1, 3);\n \n-        FileHandler handler = new FileHandler(logsDir.getAbsolutePath(), PREFIX_1, SUFIX_1, -1);\n+        new FileHandler(logsDir.getAbsolutePath(), PREFIX_1, SUFIX_1, -1);\n \n         Thread.sleep(1000);\n ",
                "deletions": 9
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid possible NPE.\nReported by FindBugs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1800981 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/50c1a3f47409e50cb5b5d9936c7994365b063d87",
        "parent": "https://github.com/apache/tomcat/commit/82ba6fc37616c553d7a4b4f68763d78663bcdddf",
        "bug_id": "tomcat_58",
        "file": [
            {
                "sha": "a6f8d614c958adbe18b43ad8d0a38ba28ec59fd5",
                "filename": "java/org/apache/juli/FileHandler.java",
                "blob_url": "https://github.com/apache/tomcat/blob/50c1a3f47409e50cb5b5d9936c7994365b063d87/java/org/apache/juli/FileHandler.java",
                "raw_url": "https://github.com/apache/tomcat/raw/50c1a3f47409e50cb5b5d9936c7994365b063d87/java/org/apache/juli/FileHandler.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/juli/FileHandler.java?ref=50c1a3f47409e50cb5b5d9936c7994365b063d87",
                "patch": "@@ -542,7 +542,11 @@ private void clean() {\n     }\n \n     private String obtainDateFromPath(Path path) {\n-        String date = path.getFileName().toString();\n+        Path fileName = path.getFileName();\n+        if (fileName == null) {\n+            return null;\n+        }\n+        String date = fileName.toString();\n         if (pattern.matcher(date).matches()) {\n             date = date.substring(prefix.length());\n             return date.substring(0, date.length() - suffix.length());",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE during non-container thread error handling\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1799916 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/8733b9835f17219048d3e51c0318a36400929476",
        "parent": "https://github.com/apache/tomcat/commit/7702811772709abdcb9b4c2107f9bfacec78de90",
        "bug_id": "tomcat_59",
        "file": [
            {
                "sha": "522768535cbb3dd2c074390bf176a723b81bcb71",
                "filename": "java/org/apache/catalina/core/AsyncContextImpl.java",
                "blob_url": "https://github.com/apache/tomcat/blob/8733b9835f17219048d3e51c0318a36400929476/java/org/apache/catalina/core/AsyncContextImpl.java",
                "raw_url": "https://github.com/apache/tomcat/raw/8733b9835f17219048d3e51c0318a36400929476/java/org/apache/catalina/core/AsyncContextImpl.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/AsyncContextImpl.java?ref=8733b9835f17219048d3e51c0318a36400929476",
                "patch": "@@ -407,6 +407,10 @@ public void setErrorState(Throwable t, boolean fireOnError) {\n         if (result.get()) {\n             // No listener called dispatch() or complete(). This is an error.\n             // SRV.2.3.3.3 (search for \"error dispatch\")\n+            // Take a local copy to avoid threading issues if another thread\n+            // clears this (can happen during error handling with non-container\n+            // threads)\n+            ServletResponse servletResponse = this.servletResponse;\n             if (servletResponse instanceof HttpServletResponse) {\n                 ((HttpServletResponse) servletResponse).setStatus(\n                         HttpServletResponse.SC_INTERNAL_SERVER_ERROR);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "NPE protection. Note NPE only possible with test code.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1630199 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/153b0df7d2dba5eeef1917766fc8578387841867",
        "parent": "https://github.com/apache/tomcat/commit/68bdec3732b8b34d95a88117453f480b1d86ec07",
        "bug_id": "tomcat_60",
        "file": [
            {
                "sha": "22d3b4514d1a79e8f2407efd3b3235646a1107a0",
                "filename": "java/org/apache/tomcat/websocket/Util.java",
                "blob_url": "https://github.com/apache/tomcat/blob/153b0df7d2dba5eeef1917766fc8578387841867/java/org/apache/tomcat/websocket/Util.java",
                "raw_url": "https://github.com/apache/tomcat/raw/153b0df7d2dba5eeef1917766fc8578387841867/java/org/apache/tomcat/websocket/Util.java",
                "status": "modified",
                "changes": 30,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/Util.java?ref=153b0df7d2dba5eeef1917766fc8578387841867",
                "patch": "@@ -332,21 +332,23 @@ public static Object coerceToType(Class<?> type, String value) {\n                     throws DeploymentException{\n \n         List<DecoderEntry> result = new ArrayList<>();\n-        for (Class<? extends Decoder> decoderClazz : decoderClazzes) {\n-            // Need to instantiate decoder to ensure it is valid and that\n-            // deployment can be failed if it is not\n-            @SuppressWarnings(\"unused\")\n-            Decoder instance;\n-            try {\n-                instance = decoderClazz.newInstance();\n-            } catch (InstantiationException | IllegalAccessException e) {\n-                throw new DeploymentException(\n-                        sm.getString(\"pojoMethodMapping.invalidDecoder\",\n-                                decoderClazz.getName()), e);\n+        if (decoderClazzes != null) {\n+            for (Class<? extends Decoder> decoderClazz : decoderClazzes) {\n+                // Need to instantiate decoder to ensure it is valid and that\n+                // deployment can be failed if it is not\n+                @SuppressWarnings(\"unused\")\n+                Decoder instance;\n+                try {\n+                    instance = decoderClazz.newInstance();\n+                } catch (InstantiationException | IllegalAccessException e) {\n+                    throw new DeploymentException(\n+                            sm.getString(\"pojoMethodMapping.invalidDecoder\",\n+                                    decoderClazz.getName()), e);\n+                }\n+                DecoderEntry entry = new DecoderEntry(\n+                        Util.getDecoderType(decoderClazz), decoderClazz);\n+                result.add(entry);\n             }\n-            DecoderEntry entry = new DecoderEntry(\n-                    Util.getDecoderType(decoderClazz), decoderClazz);\n-            result.add(entry);\n         }\n \n         return result;",
                "deletions": 14
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "fix NPE\njava.lang.NullPointerException at org.apache.catalina.session.ManagerBase.processExpires(ManagerBase.java:682)\n        at org.apache.catalina.session.ManagerBase.backgroundProcess(ManagerBase.java:667)\n        at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1316)\n        at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1601)\n        at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1610)\n        at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1610)\n        at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1590)\n        at java.lang.Thread.run(Thread.java:619)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@627689 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/ec7e6c88fe12592fcb6368617246a22e8e09b7d4",
        "parent": "https://github.com/apache/tomcat/commit/a4e9dec6e37a2ba73f440f8bf82241b6cfe7e2b7",
        "bug_id": "tomcat_61",
        "file": [
            {
                "sha": "ae71cf9dc3bd3ba3a4ccdfcb65679fe0a209d48c",
                "filename": "java/org/apache/catalina/session/ManagerBase.java",
                "blob_url": "https://github.com/apache/tomcat/blob/ec7e6c88fe12592fcb6368617246a22e8e09b7d4/java/org/apache/catalina/session/ManagerBase.java",
                "raw_url": "https://github.com/apache/tomcat/raw/ec7e6c88fe12592fcb6368617246a22e8e09b7d4/java/org/apache/catalina/session/ManagerBase.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/session/ManagerBase.java?ref=ec7e6c88fe12592fcb6368617246a22e8e09b7d4",
                "patch": "@@ -679,7 +679,7 @@ public void processExpires() {\n         if(log.isDebugEnabled())\n             log.debug(\"Start expire sessions \" + getName() + \" at \" + timeNow + \" sessioncount \" + sessions.length);\n         for (int i = 0; i < sessions.length; i++) {\n-            if (!sessions[i].isValid()) {\n+            if (sessions[i]!=null && !sessions[i].isValid()) {\n                 expireHere++;\n             }\n         }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "WS and fix NPE in testsuite.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1790840 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/d1dbb13dfe4d125b7231374a1dcfd62f8c0c9ae2",
        "parent": "https://github.com/apache/tomcat/commit/72d7021a038e3f26eaea64445c2032730133db4b",
        "bug_id": "tomcat_62",
        "file": [
            {
                "sha": "97999d7c7ed2aeee67634c0bef452c4af4bbde39",
                "filename": "java/org/apache/catalina/tribes/group/GroupChannel.java",
                "blob_url": "https://github.com/apache/tomcat/blob/d1dbb13dfe4d125b7231374a1dcfd62f8c0c9ae2/java/org/apache/catalina/tribes/group/GroupChannel.java",
                "raw_url": "https://github.com/apache/tomcat/raw/d1dbb13dfe4d125b7231374a1dcfd62f8c0c9ae2/java/org/apache/catalina/tribes/group/GroupChannel.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/tribes/group/GroupChannel.java?ref=d1dbb13dfe4d125b7231374a1dcfd62f8c0c9ae2",
                "patch": "@@ -133,7 +133,7 @@\n     private boolean jmxEnabled = true;\n \n     /**\n-     * the ObjectName of this channel. \n+     * the ObjectName of this channel.\n      */\n     private ObjectName oname = null;\n ",
                "deletions": 1
            },
            {
                "sha": "afc9245aa65e393ae9bb0c90a58527f21d615891",
                "filename": "java/org/apache/catalina/tribes/jmx/JmxRegistry.java",
                "blob_url": "https://github.com/apache/tomcat/blob/d1dbb13dfe4d125b7231374a1dcfd62f8c0c9ae2/java/org/apache/catalina/tribes/jmx/JmxRegistry.java",
                "raw_url": "https://github.com/apache/tomcat/raw/d1dbb13dfe4d125b7231374a1dcfd62f8c0c9ae2/java/org/apache/catalina/tribes/jmx/JmxRegistry.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/tribes/jmx/JmxRegistry.java?ref=d1dbb13dfe4d125b7231374a1dcfd62f8c0c9ae2",
                "patch": "@@ -45,6 +45,9 @@ private JmxRegistry() {\n     }\n \n     public static JmxRegistry getRegistry(Channel channel) {\n+        if (channel == null || channel.getName() == null) {\n+            return null;\n+        }\n         JmxRegistry registry = registryCache.get(channel.getName());\n         if (registry != null) return registry;\n \n@@ -88,7 +91,7 @@ private static ObjectName createBaseObjectName(String domain, String prefix, Str\n         }\n         return on;\n     }\n-    \n+\n     public ObjectName registerJmx(String keyprop, Object bean) {\n         String oNameStr = baseOname.toString() + keyprop;\n         ObjectName oName = null;",
                "deletions": 1
            },
            {
                "sha": "496f4a5f33dad186d95ce585dc182466f333ff96",
                "filename": "java/org/apache/catalina/tribes/membership/McastService.java",
                "blob_url": "https://github.com/apache/tomcat/blob/d1dbb13dfe4d125b7231374a1dcfd62f8c0c9ae2/java/org/apache/catalina/tribes/membership/McastService.java",
                "raw_url": "https://github.com/apache/tomcat/raw/d1dbb13dfe4d125b7231374a1dcfd62f8c0c9ae2/java/org/apache/catalina/tribes/membership/McastService.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/tribes/membership/McastService.java?ref=d1dbb13dfe4d125b7231374a1dcfd62f8c0c9ae2",
                "patch": "@@ -85,7 +85,7 @@\n     private Channel channel;\n \n     /**\n-     * the ObjectName of this McastService. \n+     * the ObjectName of this McastService.\n      */\n     private ObjectName oname = null;\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=60900\nAvoid a NullPointerException in the APR Poller if a connection is closed at the same time as new data arrives on that connection.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1788224 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/5d71df9a045386225303d2d0f8201a79ee4e4f00",
        "parent": "https://github.com/apache/tomcat/commit/02c65e1a2911281a817efc93dd11bba1449a9e81",
        "bug_id": "tomcat_63",
        "file": [
            {
                "sha": "250909381fc2517472040660e58f4026d301eb79",
                "filename": "java/org/apache/tomcat/util/net/AprEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/5d71df9a045386225303d2d0f8201a79ee4e4f00/java/org/apache/tomcat/util/net/AprEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/5d71df9a045386225303d2d0f8201a79ee4e4f00/java/org/apache/tomcat/util/net/AprEndpoint.java",
                "status": "modified",
                "changes": 12,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/AprEndpoint.java?ref=5d71df9a045386225303d2d0f8201a79ee4e4f00",
                "patch": "@@ -1617,15 +1617,21 @@ public void run() {\n                             pollerSpace[i] += rv;\n                             connectionCount.addAndGet(-rv);\n                             for (int n = 0; n < rv; n++) {\n-                                long timeout = timeouts.remove(desc[n*2+1]);\n-                                AprSocketWrapper wrapper = connections.get(\n-                                        Long.valueOf(desc[n*2+1]));\n                                 if (getLog().isDebugEnabled()) {\n                                     log.debug(sm.getString(\n                                             \"endpoint.debug.pollerProcess\",\n                                             Long.valueOf(desc[n*2+1]),\n                                             Long.valueOf(desc[n*2])));\n                                 }\n+                                long timeout = timeouts.remove(desc[n*2+1]);\n+                                AprSocketWrapper wrapper = connections.get(\n+                                        Long.valueOf(desc[n*2+1]));\n+                                if (wrapper == null) {\n+                                    // Socket was closed in another thread while still in\n+                                    // the Poller but wasn't removed from the Poller before\n+                                    // new data arrived.\n+                                    continue;\n+                                }\n                                 wrapper.pollerFlags = wrapper.pollerFlags & ~((int) desc[n*2]);\n                                 // Check for failed sockets and hand this socket off to a worker\n                                 if (((desc[n*2] & Poll.APR_POLLHUP) == Poll.APR_POLLHUP)",
                "deletions": 3
            },
            {
                "sha": "48069b5660a374be3fe661152001477f5c2947cb",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/5d71df9a045386225303d2d0f8201a79ee4e4f00/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/5d71df9a045386225303d2d0f8201a79ee4e4f00/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=5d71df9a045386225303d2d0f8201a79ee4e4f00",
                "patch": "@@ -108,6 +108,11 @@\n         that is not consistent with the current state of that connection.\n         (markt)\n       </fix>\n+      <fix>\n+        <bug>60900</bug>: Avoid a <code>NullPointerException</code> in the APR\n+        Poller if a connection is closed at the same time as new data arrives on\n+        that connection. (markt) \n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"jdbc-pool\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Correct a bug in the implementation of the new Servlet 4.0 feature that allows specifying a default request and/or response character encoding per web application. null values passed via the programmatic interface no longer trigger a NullPointerException.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1786375 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/0173dbc402b1611c101921839cc3775e46a5f82f",
        "parent": "https://github.com/apache/tomcat/commit/687f3a2e2647287638b372e88f3a9fe57626efc4",
        "bug_id": "tomcat_64",
        "file": [
            {
                "sha": "6441571da7d77c4e0b194c6ff546defc945297b0",
                "filename": "java/org/apache/tomcat/util/descriptor/web/WebXml.java",
                "blob_url": "https://github.com/apache/tomcat/blob/0173dbc402b1611c101921839cc3775e46a5f82f/java/org/apache/tomcat/util/descriptor/web/WebXml.java",
                "raw_url": "https://github.com/apache/tomcat/raw/0173dbc402b1611c101921839cc3775e46a5f82f/java/org/apache/tomcat/util/descriptor/web/WebXml.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/descriptor/web/WebXml.java?ref=0173dbc402b1611c101921839cc3775e46a5f82f",
                "patch": "@@ -615,7 +615,7 @@ public String getRequestEncoding() {\n         return requestEncoding;\n     }\n     public void setRequestEncoding(String requestEncoding) {\n-        if (requestEncoding == null) {\n+        if (requestEncoding != null) {\n             try {\n                 B2CConverter.getCharset(requestEncoding);\n             } catch (UnsupportedEncodingException e) {\n@@ -630,7 +630,7 @@ public String getResponseEncoding() {\n         return responseEncoding;\n     }\n     public void setResponseEncoding(String responseEncoding) {\n-        if (responseEncoding == null) {\n+        if (responseEncoding != null) {\n             try {\n                 B2CConverter.getCharset(responseEncoding);\n             } catch (UnsupportedEncodingException e) {",
                "deletions": 2
            },
            {
                "sha": "5b292bfc5c70235e4fdcd12bc89ec8879fbf873f",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/0173dbc402b1611c101921839cc3775e46a5f82f/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/0173dbc402b1611c101921839cc3775e46a5f82f/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=0173dbc402b1611c101921839cc3775e46a5f82f",
                "patch": "@@ -52,6 +52,13 @@\n         <code>HttpHeaderSecurityFilter</code> for the HSTS preload parameter.\n         (markt)\n       </add>\n+      <fix>\n+        Correct a bug in the implementation of the Servlet 4.0 feature that\n+        allows specifying a default request and/or response character encoding\n+        per web application. <code>null</code> values passed via the\n+        programmatic interface no longer trigger a\n+        <code>NullPointerException</code>. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Restore NPE check as I got a NPE on:\norg.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.onWritePossible(WsRemoteEndpointImplServer.java:125)\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1662731 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/3e2d806f3f68c3b702e3673c58dd50ee77f2a429",
        "parent": "https://github.com/apache/tomcat/commit/46af1d05914590a9856fd93e8287a328006bed32",
        "bug_id": "tomcat_65",
        "file": [
            {
                "sha": "f134c9eb9a26dd5c4d23a72f14398f179ce1af0f",
                "filename": "java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java",
                "blob_url": "https://github.com/apache/tomcat/blob/3e2d806f3f68c3b702e3673c58dd50ee77f2a429/java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java",
                "raw_url": "https://github.com/apache/tomcat/raw/3e2d806f3f68c3b702e3673c58dd50ee77f2a429/java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java?ref=3e2d806f3f68c3b702e3673c58dd50ee77f2a429",
                "patch": "@@ -116,6 +116,11 @@ protected void doWrite(SendHandler handler, long blockingWriteTimeoutExpiry,\n \n     public void onWritePossible(boolean useDispatch) {\n         ByteBuffer[] buffers = this.buffers;\n+        if (buffers == null) {\n+            // Servlet 3.1 will call the write listener once even if nothing\n+            // was written\n+            return;\n+        }\n         boolean complete = false;\n         try {\n             socketWrapper.flush(false);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fixed https://bz.apache.org/bugzilla/show_bug.cgi?id=62032\nFix NullPointerException when certificateFile is not defined on an SSLHostConfig and unify the behavior when a certificateFile is defined but the file does not exist for both JKS and PEM file types.\n\nI also fixed one TODO in SSLHostConfig and changed how the IllegalArgumentException is thrown in AbstractJsseEndpoint so that it's message is consistent with other logging messages.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1822150 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/01960e2b1f30b8b722d9954c039f5b3d89993a99",
        "parent": "https://github.com/apache/tomcat/commit/d6945a8dd9916e68dcb2b92d055af8aae1bd3c8d",
        "bug_id": "tomcat_66",
        "file": [
            {
                "sha": "d4cd9132cc79113e7940f8dc379dea79844bafab",
                "filename": "java/org/apache/tomcat/util/net/AbstractJsseEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/01960e2b1f30b8b722d9954c039f5b3d89993a99/java/org/apache/tomcat/util/net/AbstractJsseEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/01960e2b1f30b8b722d9954c039f5b3d89993a99/java/org/apache/tomcat/util/net/AbstractJsseEndpoint.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/AbstractJsseEndpoint.java?ref=01960e2b1f30b8b722d9954c039f5b3d89993a99",
                "patch": "@@ -111,7 +111,7 @@ protected void createSSLContext(SSLHostConfig sslHostConfig) throws IllegalArgum\n                 sslContext = sslUtil.createSSLContext(negotiableProtocols);\n                 sslContext.init(sslUtil.getKeyManagers(), sslUtil.getTrustManagers(), null);\n             } catch (Exception e) {\n-                throw new IllegalArgumentException(e);\n+                throw new IllegalArgumentException(e.getMessage(), e);\n             }\n \n             SSLSessionContext sessionContext = sslContext.getServerSessionContext();",
                "deletions": 1
            },
            {
                "sha": "b344e884ae399d6ca5edf2324a9f60ff7b5de689",
                "filename": "java/org/apache/tomcat/util/net/LocalStrings.properties",
                "blob_url": "https://github.com/apache/tomcat/blob/01960e2b1f30b8b722d9954c039f5b3d89993a99/java/org/apache/tomcat/util/net/LocalStrings.properties",
                "raw_url": "https://github.com/apache/tomcat/raw/01960e2b1f30b8b722d9954c039f5b3d89993a99/java/org/apache/tomcat/util/net/LocalStrings.properties",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/LocalStrings.properties?ref=01960e2b1f30b8b722d9954c039f5b3d89993a99",
                "patch": "@@ -146,6 +146,7 @@ sslHostConfig.prefix_missing=The protocol [{0}] was added to the list of protoco\n sslHostConfigCertificate.mismatch=The property [{0}] was set on the SSLHostConfigCertificate named [{1}] and is for certificate storage type [{2}] but the certificate is being used with a storage of type [{3}]\n sslHostConfig.opensslconf.null=Attempt to set null OpenSSLConf ignored\n sslHostConfig.opensslconf.alreadyset=Attempt to set another OpenSSLConf ignored\n+sslHostConfig.fileNotFound=Configured file [{0}] does not exist\n \n sslImplementation.cnfe= Unable to create SSLImplementation for class [{0}]\n ",
                "deletions": 0
            },
            {
                "sha": "c11b31ab5d84750dbe8656b33473adc4470960cd",
                "filename": "java/org/apache/tomcat/util/net/SSLHostConfig.java",
                "blob_url": "https://github.com/apache/tomcat/blob/01960e2b1f30b8b722d9954c039f5b3d89993a99/java/org/apache/tomcat/util/net/SSLHostConfig.java",
                "raw_url": "https://github.com/apache/tomcat/raw/01960e2b1f30b8b722d9954c039f5b3d89993a99/java/org/apache/tomcat/util/net/SSLHostConfig.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/SSLHostConfig.java?ref=01960e2b1f30b8b722d9954c039f5b3d89993a99",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.tomcat.util.net;\n \n import java.io.File;\n+import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.Serializable;\n import java.security.KeyStore;\n@@ -824,7 +825,7 @@ public boolean getInsecureRenegotiation() {\n \n     // --------------------------------------------------------- Support methods\n \n-    public static String adjustRelativePath(String path) {\n+    public static String adjustRelativePath(String path) throws FileNotFoundException {\n         // Empty or null path can't point to anything useful. The assumption is\n         // that the value is deliberately empty / null so leave it that way.\n         if (path == null || path.length() == 0) {\n@@ -837,8 +838,7 @@ public static String adjustRelativePath(String path) {\n             f = new File(newPath);\n         }\n         if (!f.exists()) {\n-            // TODO i18n, sm\n-            log.warn(\"configured file:[\"+newPath+\"] does not exist.\");\n+            throw new FileNotFoundException(sm.getString(\"sslHostConfig.fileNotFound\", newPath));\n         }\n         return newPath;\n     }",
                "deletions": 3
            },
            {
                "sha": "f72b52b6963ccb6ff404f576087b19bacd4a2fd1",
                "filename": "java/org/apache/tomcat/util/net/SSLUtilBase.java",
                "blob_url": "https://github.com/apache/tomcat/blob/01960e2b1f30b8b722d9954c039f5b3d89993a99/java/org/apache/tomcat/util/net/SSLUtilBase.java",
                "raw_url": "https://github.com/apache/tomcat/raw/01960e2b1f30b8b722d9954c039f5b3d89993a99/java/org/apache/tomcat/util/net/SSLUtilBase.java",
                "status": "modified",
                "changes": 2,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/SSLUtilBase.java?ref=01960e2b1f30b8b722d9954c039f5b3d89993a99",
                "patch": "@@ -138,8 +138,6 @@ static KeyStore getStore(String type, String provider, String path,\n             }\n             ks.load(istream, storePass);\n         } catch (FileNotFoundException fnfe) {\n-            log.error(sm.getString(\"jsse.keystore_load_failed\", type, path,\n-                    fnfe.getMessage()), fnfe);\n             throw fnfe;\n         } catch (IOException ioe) {\n             // May be expected when working with a trust store",
                "deletions": 2
            },
            {
                "sha": "7b5b80666a44a59cdda9795395b8f1baa09206a1",
                "filename": "java/org/apache/tomcat/util/net/jsse/JSSEUtil.java",
                "blob_url": "https://github.com/apache/tomcat/blob/01960e2b1f30b8b722d9954c039f5b3d89993a99/java/org/apache/tomcat/util/net/jsse/JSSEUtil.java",
                "raw_url": "https://github.com/apache/tomcat/raw/01960e2b1f30b8b722d9954c039f5b3d89993a99/java/org/apache/tomcat/util/net/jsse/JSSEUtil.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/jsse/JSSEUtil.java?ref=01960e2b1f30b8b722d9954c039f5b3d89993a99",
                "patch": "@@ -199,6 +199,10 @@ public SSLContext createSSLContext(List<String> negotiableProtocols) throws NoSu\n         char[] keyPassArray = keyPass.toCharArray();\n \n         if (ks == null) {\n+            if (certificate.getCertificateFile() == null) {\n+                throw new IOException(sm.getString(\"jsse.noCertFile\"));\n+            }\n+\n             PEMFile privateKeyFile = new PEMFile(SSLHostConfig.adjustRelativePath\n                     (certificate.getCertificateKeyFile() != null ? certificate.getCertificateKeyFile() : certificate.getCertificateFile()),\n                     keyPass);",
                "deletions": 0
            },
            {
                "sha": "aa3fe77c8be3135b40add94656b69b1c20ac9ea1",
                "filename": "java/org/apache/tomcat/util/net/jsse/LocalStrings.properties",
                "blob_url": "https://github.com/apache/tomcat/blob/01960e2b1f30b8b722d9954c039f5b3d89993a99/java/org/apache/tomcat/util/net/jsse/LocalStrings.properties",
                "raw_url": "https://github.com/apache/tomcat/raw/01960e2b1f30b8b722d9954c039f5b3d89993a99/java/org/apache/tomcat/util/net/jsse/LocalStrings.properties",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/jsse/LocalStrings.properties?ref=01960e2b1f30b8b722d9954c039f5b3d89993a99",
                "patch": "@@ -25,6 +25,7 @@ jsse.noDefaultProtocols=Unable to determine a default for sslEnabledProtocols. S\n jsse.noKeys=No aliases for private keys found in key store\n jsse.exceptionOnClose=Failure to close socket.\n jsse.pemParseError=Unable to parse the key from [{0}]\n+jsse.noCertFile=SSLHostConfig attribute certificateFile must be defined when using an SSL connector\n \n jsseSupport.clientCertError=Error trying to obtain a certificate from the client\n jseeSupport.certTranslationError=Error translating certificate [{0}]\n@@ -38,4 +39,4 @@ jsseUtil.invalidTrustCert=The certificate for [{0}] in the trust store is not va\n jsseUtil.noCrlSupport=The truststoreProvider [{0}] does not support the certificateRevocationFile configuration option\n jsseUtil.noVerificationDepth=The truststoreProvider [{0}] does not support the certificateVerificationDepth configuration option\n jsseUtil.trustedCertNotChecked=The validity dates of the trusted certificate with alias [{0}] were not checked as the certificate was of an unknown type\n-jsseUtil.trustedCertNotValid=The trusted certificate with alias [{0}] and DN [{1}] is not valid due to [{2}]. Certificates signed by this trusted certificate WILL be accepted\n\\ No newline at end of file\n+jsseUtil.trustedCertNotValid=The trusted certificate with alias [{0}] and DN [{1}] is not valid due to [{2}]. Certificates signed by this trusted certificate WILL be accepted",
                "deletions": 1
            },
            {
                "sha": "7e50e193c2840fcb4d7d6d8d989129e86610e23c",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/01960e2b1f30b8b722d9954c039f5b3d89993a99/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/01960e2b1f30b8b722d9954c039f5b3d89993a99/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=01960e2b1f30b8b722d9954c039f5b3d89993a99",
                "patch": "@@ -73,6 +73,12 @@\n         <bug>62023</bug>: Log error reporting multiple SSLHostConfig elements\n         when using the APR Connector instead of crashing Tomcat. (csutherl)\n       </fix>\n+      <fix>\n+        <bug>62032</bug>: Fix NullPointerException when certificateFile is not\n+        defined on an SSLHostConfig and unify the behavior when a\n+        certificateFile is defined but the file does not exist for both\n+        JKS and PEM file types.\n+      </fix>\n     </changelog>\n   </subsection>\n </section>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Refactor.\nIt is more verbose but it stops Eclipse complaining about a possible NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1800202 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/77b1a501e35f35947835ab83340fee437e0889ab",
        "parent": "https://github.com/apache/tomcat/commit/93ae8bd2a6adf9f615bf14eca23e1ec406d777f6",
        "bug_id": "tomcat_67",
        "file": [
            {
                "sha": "b6a5d5e2dc0f9c100e03dc79ed75a5b412e11dd1",
                "filename": "java/org/apache/juli/FileHandler.java",
                "blob_url": "https://github.com/apache/tomcat/blob/77b1a501e35f35947835ab83340fee437e0889ab/java/org/apache/juli/FileHandler.java",
                "raw_url": "https://github.com/apache/tomcat/raw/77b1a501e35f35947835ab83340fee437e0889ab/java/org/apache/juli/FileHandler.java",
                "status": "modified",
                "changes": 10,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/juli/FileHandler.java?ref=77b1a501e35f35947835ab83340fee437e0889ab",
                "patch": "@@ -106,9 +106,13 @@\n \n                 {\n                     SecurityManager s = System.getSecurityManager();\n-                    this.isSecurityEnabled = s != null;\n-                    this.group = isSecurityEnabled ? s.getThreadGroup()\n-                            : Thread.currentThread().getThreadGroup();\n+                    if (s == null) {\n+                        this.isSecurityEnabled = false;\n+                        this.group = Thread.currentThread().getThreadGroup();\n+                    } else {\n+                        this.isSecurityEnabled = true;\n+                        this.group = s.getThreadGroup();\n+                    }\n                 }\n \n                 @Override",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix possible NPE on response recycle.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1777167 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/6536c0e0a6bb96667eb1acfd2b7308780b6b2d15",
        "parent": "https://github.com/apache/tomcat/commit/e26c36265dd75ac9fe160634c883773591ad8757",
        "bug_id": "tomcat_68",
        "file": [
            {
                "sha": "84517bcfcca1d65a21371183e3a2c4d4afdced83",
                "filename": "java/org/apache/catalina/connector/Response.java",
                "blob_url": "https://github.com/apache/tomcat/blob/6536c0e0a6bb96667eb1acfd2b7308780b6b2d15/java/org/apache/catalina/connector/Response.java",
                "raw_url": "https://github.com/apache/tomcat/raw/6536c0e0a6bb96667eb1acfd2b7308780b6b2d15/java/org/apache/catalina/connector/Response.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/Response.java?ref=6536c0e0a6bb96667eb1acfd2b7308780b6b2d15",
                "patch": "@@ -272,7 +272,7 @@ public void recycle() {\n                 writer.clear();\n                 writer = null;\n             }\n-        } else {\n+        } else if (writer != null) {\n             writer.recycle();\n         }\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE when starting async\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1772607 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/2cea9f903f7399d948fd782239ad11cea9942edb",
        "parent": "https://github.com/apache/tomcat/commit/0e5f9fdd9dcb16e39215f6ce58d67dcbf93b4add",
        "bug_id": "tomcat_69",
        "file": [
            {
                "sha": "c01ae23e21f4b7256c21120f36aded3a0368eae7",
                "filename": "java/org/apache/coyote/AbstractProcessor.java",
                "blob_url": "https://github.com/apache/tomcat/blob/2cea9f903f7399d948fd782239ad11cea9942edb/java/org/apache/coyote/AbstractProcessor.java",
                "raw_url": "https://github.com/apache/tomcat/raw/2cea9f903f7399d948fd782239ad11cea9942edb/java/org/apache/coyote/AbstractProcessor.java",
                "status": "modified",
                "changes": 12,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/AbstractProcessor.java?ref=2cea9f903f7399d948fd782239ad11cea9942edb",
                "patch": "@@ -59,22 +59,12 @@\n     private ErrorState errorState = ErrorState.NONE;\n \n \n-    /**\n-     * Used by HTTP/2.\n-     * @param coyoteRequest The request\n-     * @param coyoteResponse The response\n-     */\n-    protected AbstractProcessor(Request coyoteRequest, Response coyoteResponse) {\n-        this(null, coyoteRequest, coyoteResponse);\n-    }\n-\n-\n     public AbstractProcessor(AbstractEndpoint<?> endpoint) {\n         this(endpoint, new Request(), new Response());\n     }\n \n \n-    private AbstractProcessor(AbstractEndpoint<?> endpoint, Request coyoteRequest,\n+    protected AbstractProcessor(AbstractEndpoint<?> endpoint, Request coyoteRequest,\n             Response coyoteResponse) {\n         this.endpoint = endpoint;\n         asyncStateMachine = new AsyncStateMachine(this);",
                "deletions": 11
            },
            {
                "sha": "7ac856f74bf94a09af1c29df521785ac0bd94644",
                "filename": "java/org/apache/coyote/http2/StreamProcessor.java",
                "blob_url": "https://github.com/apache/tomcat/blob/2cea9f903f7399d948fd782239ad11cea9942edb/java/org/apache/coyote/http2/StreamProcessor.java",
                "raw_url": "https://github.com/apache/tomcat/raw/2cea9f903f7399d948fd782239ad11cea9942edb/java/org/apache/coyote/http2/StreamProcessor.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http2/StreamProcessor.java?ref=2cea9f903f7399d948fd782239ad11cea9942edb",
                "patch": "@@ -43,8 +43,9 @@\n     private final Stream stream;\n \n \n-    StreamProcessor(Http2UpgradeHandler handler, Stream stream, Adapter adapter, SocketWrapperBase<?> socketWrapper) {\n-        super(stream.getCoyoteRequest(), stream.getCoyoteResponse());\n+    StreamProcessor(Http2UpgradeHandler handler, Stream stream, Adapter adapter,\n+            SocketWrapperBase<?> socketWrapper) {\n+        super(socketWrapper.getEndpoint(), stream.getCoyoteRequest(), stream.getCoyoteResponse());\n         this.handler = handler;\n         this.stream = stream;\n         setAdapter(adapter);",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1742187 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/dffbd1a29252384db42cfc312b75744fbc5051b3",
        "parent": "https://github.com/apache/tomcat/commit/009d07d73a1f2e432feab3e4d25c9ff6ba275928",
        "bug_id": "tomcat_70",
        "file": [
            {
                "sha": "647195db0e161d97665e72d2c80cdb93d9cd6b08",
                "filename": "java/org/apache/tomcat/util/scan/UrlJar.java",
                "blob_url": "https://github.com/apache/tomcat/blob/dffbd1a29252384db42cfc312b75744fbc5051b3/java/org/apache/tomcat/util/scan/UrlJar.java",
                "raw_url": "https://github.com/apache/tomcat/raw/dffbd1a29252384db42cfc312b75744fbc5051b3/java/org/apache/tomcat/util/scan/UrlJar.java",
                "status": "modified",
                "changes": 14,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/scan/UrlJar.java?ref=dffbd1a29252384db42cfc312b75744fbc5051b3",
                "patch": "@@ -124,13 +124,22 @@ private NonClosingJarInputStream createJarInputStream() throws IOException {\n \n     @Override\n     public void nextEntry() {\n+        if (jarInputStream == null) {\n+            try {\n+                jarInputStream = createJarInputStream();\n+            } catch (IOException e) {\n+                entry = null;\n+                return;\n+            }\n+        }\n         try {\n             entry = jarInputStream.getNextJarEntry();\n         } catch (IOException ioe) {\n             entry = null;\n         }\n     }\n \n+\n     @Override\n     public String getEntryName() {\n         if (entry == null) {\n@@ -140,11 +149,16 @@ public String getEntryName() {\n         }\n     }\n \n+\n     @Override\n     public InputStream getEntryInputStream() throws IOException {\n+        if (jarInputStream == null) {\n+            jarInputStream = createJarInputStream();\n+        }\n         return jarInputStream;\n     }\n \n+\n     @Override\n     public void reset() throws IOException {\n         close();",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE reported by FindBugs\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1763477 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/52f59ae3c72068f699dd174657b4d6448dc50392",
        "parent": "https://github.com/apache/tomcat/commit/fedeb0e010f0011b7f1d833ac5e3c178e49133cb",
        "bug_id": "tomcat_71",
        "file": [
            {
                "sha": "2ec89573fa1eb02abfedbf771db01c72a66e6020",
                "filename": "java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java",
                "blob_url": "https://github.com/apache/tomcat/blob/52f59ae3c72068f699dd174657b4d6448dc50392/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java",
                "raw_url": "https://github.com/apache/tomcat/raw/52f59ae3c72068f699dd174657b4d6448dc50392/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java?ref=52f59ae3c72068f699dd174657b4d6448dc50392",
                "patch": "@@ -412,6 +412,9 @@ public boolean equals(Object o) {\n     }\n \n     public Member[] getMapMembersExcl(Member[] exclude) {\n+        if (exclude == null) {\n+            return null;\n+        }\n         synchronized (mapMembers) {\n             @SuppressWarnings(\"unchecked\") // mapMembers has the correct type\n             HashMap<Member, Long> list = (HashMap<Member, Long>)mapMembers.clone();",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "61719: Add a null check for apparent NPE possibility (all other places ensure the buffer is not null). Not sure if there's a worrying root cause.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1814195 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/a9622e70568229caaece82d6673238a9d1fb0d0c",
        "parent": "https://github.com/apache/tomcat/commit/bbbee0d96e82fb2a5cbac730366ac49ccb0d366d",
        "bug_id": "tomcat_72",
        "file": [
            {
                "sha": "34e91abfdfaef415d3ba956c8fbd8a8c4c156c4f",
                "filename": "java/org/apache/coyote/http2/Stream.java",
                "blob_url": "https://github.com/apache/tomcat/blob/a9622e70568229caaece82d6673238a9d1fb0d0c/java/org/apache/coyote/http2/Stream.java",
                "raw_url": "https://github.com/apache/tomcat/raw/a9622e70568229caaece82d6673238a9d1fb0d0c/java/org/apache/coyote/http2/Stream.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http2/Stream.java?ref=a9622e70568229caaece82d6673238a9d1fb0d0c",
                "patch": "@@ -916,8 +916,10 @@ public final int doRead(ApplicationBufferHandler applicationBufferHandler)\n \n \n         final void registerReadInterest() {\n-            synchronized (inBuffer) {\n-                readInterest = true;\n+            if (inBuffer != null) {\n+                synchronized (inBuffer) {\n+                    readInterest = true;\n+                }\n             }\n         }\n ",
                "deletions": 2
            },
            {
                "sha": "0e9a63c0010cdb40e369519774c2c7ad374babd0",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/a9622e70568229caaece82d6673238a9d1fb0d0c/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/a9622e70568229caaece82d6673238a9d1fb0d0c/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=a9622e70568229caaece82d6673238a9d1fb0d0c",
                "patch": "@@ -87,6 +87,10 @@\n         Reduce default HTTP/2 stream concurrent execution within a connection\n         from 200 to 20. (remm)\n       </fix>\n+      <fix>\n+        <bug>61719</bug>: Avoid possible NPE calling\n+        InputStream.setReadListener with HTTP/2. (remm)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Jasper\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56246\nFix NullPointerException in MemoryRealm when authenticating an unknown user.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1576768 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/7bbef5aa8a73cad65899995a39ca78cbce02e9e2",
        "parent": "https://github.com/apache/tomcat/commit/c9473af059e62c0ea03bdc47d9203526b6c3cf95",
        "bug_id": "tomcat_73",
        "file": [
            {
                "sha": "52aad26752aebdbe7cfa91c5ae100fef9203433d",
                "filename": "java/org/apache/catalina/realm/MemoryRealm.java",
                "blob_url": "https://github.com/apache/tomcat/blob/7bbef5aa8a73cad65899995a39ca78cbce02e9e2/java/org/apache/catalina/realm/MemoryRealm.java",
                "raw_url": "https://github.com/apache/tomcat/raw/7bbef5aa8a73cad65899995a39ca78cbce02e9e2/java/org/apache/catalina/realm/MemoryRealm.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/realm/MemoryRealm.java?ref=7bbef5aa8a73cad65899995a39ca78cbce02e9e2",
                "patch": "@@ -113,7 +113,12 @@ public Principal authenticate(String username, String credentials) {\n \n         GenericPrincipal principal = principals.get(username);\n \n-        boolean validated = compareCredentials(credentials, principal.getPassword());\n+        boolean validated;\n+        if (principal == null) {\n+            validated = false;\n+        } else {\n+            validated = compareCredentials(credentials, principal.getPassword());\n+        }\n \n         if (validated) {\n             if (log.isDebugEnabled())",
                "deletions": 1
            },
            {
                "sha": "27c1af172be84688fe0fdc9028623cefb3626dee",
                "filename": "test/org/apache/catalina/realm/TestMemoryRealm.java",
                "blob_url": "https://github.com/apache/tomcat/blob/7bbef5aa8a73cad65899995a39ca78cbce02e9e2/test/org/apache/catalina/realm/TestMemoryRealm.java",
                "raw_url": "https://github.com/apache/tomcat/raw/7bbef5aa8a73cad65899995a39ca78cbce02e9e2/test/org/apache/catalina/realm/TestMemoryRealm.java",
                "status": "added",
                "changes": 37,
                "additions": 37,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/realm/TestMemoryRealm.java?ref=7bbef5aa8a73cad65899995a39ca78cbce02e9e2",
                "patch": "@@ -0,0 +1,37 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*     http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+package org.apache.catalina.realm;\n+\n+import java.security.Principal;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestMemoryRealm {\n+\n+    /**\n+     * Unknown user triggers NPE.\n+     */\n+    @Test\n+    public void testBug56246() {\n+        MemoryRealm memoryRealm = new MemoryRealm();\n+\n+        Principal p = memoryRealm.authenticate(\"foo\", \"bar\");\n+\n+        Assert.assertNull(p);\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "22a882d50443f0e2c73afd58593fac90bc87315e",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/7bbef5aa8a73cad65899995a39ca78cbce02e9e2/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/7bbef5aa8a73cad65899995a39ca78cbce02e9e2/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=7bbef5aa8a73cad65899995a39ca78cbce02e9e2",
                "patch": "@@ -108,6 +108,10 @@\n         Add methods of get the idle time from last client access time to\n         <code>org.apache.catalina.Session</code>. (kfujino)\n       </add>\n+      <fix>\n+        <bug>56246</bug>: Fix NullPointerException in MemoryRealm when\n+        authenticating an unknown user. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid internal NullPointerExceptions if a resource is requested from outside the web application root.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1573321 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/497e3d05f7156fd9529fc6571a949d6721da1700",
        "parent": "https://github.com/apache/tomcat/commit/27715340cba5f8517e2959363830edce9ddee6e5",
        "bug_id": "tomcat_74",
        "file": [
            {
                "sha": "16aa5ede9275616a65dac2bc49eaca6b7d0c8c0b",
                "filename": "java/org/apache/catalina/webresources/StandardRoot.java",
                "blob_url": "https://github.com/apache/tomcat/blob/497e3d05f7156fd9529fc6571a949d6721da1700/java/org/apache/catalina/webresources/StandardRoot.java",
                "raw_url": "https://github.com/apache/tomcat/raw/497e3d05f7156fd9529fc6571a949d6721da1700/java/org/apache/catalina/webresources/StandardRoot.java",
                "status": "modified",
                "changes": 21,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/webresources/StandardRoot.java?ref=497e3d05f7156fd9529fc6571a949d6721da1700",
                "patch": "@@ -117,6 +117,9 @@ public StandardRoot(Context context) {\n         if (validate) {\n             path = validate(path);\n         }\n+        if (path == null) {\n+            return new String[] {};\n+        }\n \n         // Set because we don't want duplicates\n         // LinkedHashSet to retain the order. It is the order of the\n@@ -140,6 +143,9 @@ public StandardRoot(Context context) {\n     @Override\n     public Set<String> listWebAppPaths(String path) {\n         path = validate(path);\n+        if (path == null) {\n+            return null;\n+        }\n \n         // Set because we don't want duplicates\n         HashSet<String> result = new HashSet<>();\n@@ -159,6 +165,9 @@ public StandardRoot(Context context) {\n     @Override\n     public boolean mkdir(String path) {\n         path = validate(path);\n+        if (path == null) {\n+            return false;\n+        }\n \n         if (preResourceExists(path)) {\n             return false;\n@@ -170,6 +179,9 @@ public boolean mkdir(String path) {\n     @Override\n     public boolean write(String path, InputStream is, boolean overwrite) {\n         path = validate(path);\n+        if (path == null) {\n+            return false;\n+        }\n \n         if (!overwrite && preResourceExists(path)) {\n             return false;\n@@ -198,6 +210,9 @@ private WebResource getResource(String path, boolean validate,\n         if (validate) {\n             path = validate(path);\n         }\n+        if (path == null) {\n+            return null;\n+        }\n \n         if (isCachingAllowed()) {\n             return cache.getResource(path, useClassLoaderResources);\n@@ -280,6 +295,9 @@ protected final WebResource getResourceInternal(String path,\n     private WebResource[] getResources(String path,\n             boolean useClassLoaderResources) {\n         path = validate(path);\n+        if (path == null) {\n+            return new WebResource[] {};\n+        }\n \n         ArrayList<WebResource> result = new ArrayList<>();\n         for (ArrayList<WebResourceSet> list : allResources) {\n@@ -309,6 +327,9 @@ protected final WebResource getResourceInternal(String path,\n         if (validate) {\n             path = validate(path);\n         }\n+        if (path == null) {\n+            return new WebResource[] {};\n+        }\n \n         String[] resources = list(path, false);\n         WebResource[] result = new WebResource[resources.length];",
                "deletions": 0
            },
            {
                "sha": "bbb5d0efff926a06afebb2083c21e72333c15039",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/497e3d05f7156fd9529fc6571a949d6721da1700/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/497e3d05f7156fd9529fc6571a949d6721da1700/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=497e3d05f7156fd9529fc6571a949d6721da1700",
                "patch": "@@ -74,6 +74,10 @@\n         elements and attributes supported by the Servlet version of the merged\n         file. (markt)\n       </fix>\n+      <fix>\n+        Avoid internal <code>NullPointerException</code>s if a resource is\n+        requested from outside the web application root. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE for the server push example if HTTP/2 is not supported.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1786292 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/3886b5e20a803e2bbbc8900cac17a7b0ee09456b",
        "parent": "https://github.com/apache/tomcat/commit/2f08c6ab5e88ff2da2122cde5689053226c5e2af",
        "bug_id": "tomcat_75",
        "file": [
            {
                "sha": "d92d70af45f69847c97987a54d6dd63a2ebc911a",
                "filename": "webapps/examples/WEB-INF/classes/http2/SimpleImagePush.java",
                "blob_url": "https://github.com/apache/tomcat/blob/3886b5e20a803e2bbbc8900cac17a7b0ee09456b/webapps/examples/WEB-INF/classes/http2/SimpleImagePush.java",
                "raw_url": "https://github.com/apache/tomcat/raw/3886b5e20a803e2bbbc8900cac17a7b0ee09456b/webapps/examples/WEB-INF/classes/http2/SimpleImagePush.java",
                "status": "modified",
                "changes": 29,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/examples/WEB-INF/classes/http2/SimpleImagePush.java?ref=3886b5e20a803e2bbbc8900cac17a7b0ee09456b",
                "patch": "@@ -33,18 +33,27 @@\n     protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n             throws ServletException, IOException {\n \n-        PushBuilder pb = req.getPushBuilder().path(\"servlets/images/code.gif\");\n-        pb.push();\n-\n         resp.setCharacterEncoding(\"UTF-8\");\n         resp.setContentType(\"text/html\");\n         PrintWriter pw = resp.getWriter();\n-        pw.println(\"<html>\");\n-        pw.println(\"<body>\");\n-        pw.println(\"<p>The following image was provided via a push request.</p>\");\n-        pw.println(\"<img src=\\\"\" + req.getContextPath() + \"/servlets/images/code.gif\\\"/>\");\n-        pw.println(\"</body>\");\n-        pw.println(\"</html>\");\n-        pw.flush();\n+\n+        PushBuilder pb = req.getPushBuilder();\n+        if (pb != null) {\n+            pb.path(\"servlets/images/code.gif\");\n+            pb.push();\n+            pw.println(\"<html>\");\n+            pw.println(\"<body>\");\n+            pw.println(\"<p>The following image was provided via a push request.</p>\");\n+            pw.println(\"<img src=\\\"\" + req.getContextPath() + \"/servlets/images/code.gif\\\"/>\");\n+            pw.println(\"</body>\");\n+            pw.println(\"</html>\");\n+            pw.flush();\n+        } else {\n+            pw.println(\"<html>\");\n+            pw.println(\"<body>\");\n+            pw.println(\"<p>Server push requests are not supported by this protocol.</p>\");\n+            pw.println(\"</body>\");\n+            pw.println(\"</html>\");\n+        }\n     }\n }",
                "deletions": 10
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1713346 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/6c42c5fb6117d495dbab46563f187ce9b4077189",
        "parent": "https://github.com/apache/tomcat/commit/a83a8aa714e6e7969c838bc09784eef244b7dd62",
        "bug_id": "tomcat_76",
        "file": [
            {
                "sha": "5c079decbc68fa9286acb28f94f32a688ca193ab",
                "filename": "java/org/apache/coyote/AbstractProtocol.java",
                "blob_url": "https://github.com/apache/tomcat/blob/6c42c5fb6117d495dbab46563f187ce9b4077189/java/org/apache/coyote/AbstractProtocol.java",
                "raw_url": "https://github.com/apache/tomcat/raw/6c42c5fb6117d495dbab46563f187ce9b4077189/java/org/apache/coyote/AbstractProtocol.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/AbstractProtocol.java?ref=6c42c5fb6117d495dbab46563f187ce9b4077189",
                "patch": "@@ -607,7 +607,9 @@ public void stop() throws Exception {\n             getLog().info(sm.getString(\"abstractProtocolHandler.stop\",\n                     getName()));\n \n-        asyncTimeout.stop();\n+        if (asyncTimeout != null) {\n+            asyncTimeout.stop();\n+        }\n \n         try {\n             endpoint.stop();",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=60694\nPrevent NPE during authentication when no JASPIC AuthConfigFactory is available.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1782934 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/0f7b72c64be95abf038f26f5ab7dd6e01fedb7d3",
        "parent": "https://github.com/apache/tomcat/commit/797d57cc245f6afb541963adf8be2bf099b6eb59",
        "bug_id": "tomcat_77",
        "file": [
            {
                "sha": "c71089398970ad87b5c499e5b995c70b32610ce6",
                "filename": "java/org/apache/catalina/authenticator/AuthenticatorBase.java",
                "blob_url": "https://github.com/apache/tomcat/blob/0f7b72c64be95abf038f26f5ab7dd6e01fedb7d3/java/org/apache/catalina/authenticator/AuthenticatorBase.java",
                "raw_url": "https://github.com/apache/tomcat/raw/0f7b72c64be95abf038f26f5ab7dd6e01fedb7d3/java/org/apache/catalina/authenticator/AuthenticatorBase.java",
                "status": "modified",
                "changes": 11,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/authenticator/AuthenticatorBase.java?ref=0f7b72c64be95abf038f26f5ab7dd6e01fedb7d3",
                "patch": "@@ -1194,14 +1194,21 @@ private AuthConfigProvider getJaspicProvider() {\n         return provider.orElse(null);\n     }\n \n+\n     private Optional<AuthConfigProvider> findJaspicProvider() {\n         AuthConfigFactory factory = AuthConfigFactory.getFactory();\n-        Optional<AuthConfigProvider> provider =\n-                Optional.ofNullable(factory.getConfigProvider(\"HttpServlet\", jaspicAppContextID, this));\n+        Optional<AuthConfigProvider> provider;\n+        if (factory == null) {\n+            provider = Optional.empty();\n+        } else {\n+            provider = Optional.ofNullable(\n+                    factory.getConfigProvider(\"HttpServlet\", jaspicAppContextID, this));\n+        }\n         jaspicProvider = provider;\n         return provider;\n     }\n \n+\n     @Override\n     public void notify(String layer, String appContext) {\n         findJaspicProvider();",
                "deletions": 2
            },
            {
                "sha": "9d15d278e28e1920fe7f13b49c9d5e21e29bfd63",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/0f7b72c64be95abf038f26f5ab7dd6e01fedb7d3/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/0f7b72c64be95abf038f26f5ab7dd6e01fedb7d3/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=0f7b72c64be95abf038f26f5ab7dd6e01fedb7d3",
                "patch": "@@ -79,6 +79,10 @@\n         r1782855 to add early access Java 9 support to the annotation scanning\n         code. (markt)\n       </fix>\n+      <fix>\n+        <bug>60694</bug>: Prevent NPE during authentication when no JASPIC\n+        <code>AuthConfigFactory</code> is available. (markt)\n+      </fix>\n       <fix>\n         <bug>60720</bug>: Replace \"WWW-Authenticate\" literal with static final\n         AUTH_HEADER_NAME in SpnegoAuthenticator. Patch provided by Michael",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NullPointerException in JULI FileHandler if formatter is misconfigured\nFixes https://issues.apache.org/bugzilla/show_bug.cgi?id=51403\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1137996 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/f2dd57ba7f3c73d64aabb83f21884b93860d2bc0",
        "parent": "https://github.com/apache/tomcat/commit/7c274bb05867022495919eda006c084d09902482",
        "bug_id": "tomcat_78",
        "file": [
            {
                "sha": "500a245c32033c254f0d7947603c117f100e28e9",
                "filename": "java/org/apache/juli/FileHandler.java",
                "blob_url": "https://github.com/apache/tomcat/blob/f2dd57ba7f3c73d64aabb83f21884b93860d2bc0/java/org/apache/juli/FileHandler.java",
                "raw_url": "https://github.com/apache/tomcat/raw/f2dd57ba7f3c73d64aabb83f21884b93860d2bc0/java/org/apache/juli/FileHandler.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/juli/FileHandler.java?ref=f2dd57ba7f3c73d64aabb83f21884b93860d2bc0",
                "patch": "@@ -327,7 +327,8 @@ private void configure() {\n             try {\n                 setFormatter((Formatter) cl.loadClass(formatterName).newInstance());\n             } catch (Exception e) {\n-                // Ignore\n+                // Ignore and fallback to defaults\n+                setFormatter(new SimpleFormatter());\n             }\n         } else {\n             setFormatter(new SimpleFormatter());",
                "deletions": 1
            },
            {
                "sha": "94d25953a10eb5f3c4eaafc750fbd34c83d7f3f0",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/f2dd57ba7f3c73d64aabb83f21884b93860d2bc0/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/f2dd57ba7f3c73d64aabb83f21884b93860d2bc0/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=f2dd57ba7f3c73d64aabb83f21884b93860d2bc0",
                "patch": "@@ -112,6 +112,10 @@\n         multiple occurrences of elements that are only allowed to appear once in\n         web.xml and web-fragment.xml. (kfujino)\n       </fix>\n+      <add>\n+        <bug>51403</bug>: Avoid NPE in JULI FileHandler if formatter is\n+        misconfigured. (kkolinko)\n+      </add>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50591\nDo not throw NullPointerException when ReplicationValve#filter is not set.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1059379 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/d8f8be11af0571c6eaa45961eac8407bce9096a3",
        "parent": "https://github.com/apache/tomcat/commit/a580b59581cc5c9357c7e6fb3f161720809dffd9",
        "bug_id": "tomcat_79",
        "file": [
            {
                "sha": "e2fca4d94457b05f37ed247dba1270947d47c2c3",
                "filename": "java/org/apache/catalina/ha/tcp/ReplicationValve.java",
                "blob_url": "https://github.com/apache/tomcat/blob/d8f8be11af0571c6eaa45961eac8407bce9096a3/java/org/apache/catalina/ha/tcp/ReplicationValve.java",
                "raw_url": "https://github.com/apache/tomcat/raw/d8f8be11af0571c6eaa45961eac8407bce9096a3/java/org/apache/catalina/ha/tcp/ReplicationValve.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/ha/tcp/ReplicationValve.java?ref=d8f8be11af0571c6eaa45961eac8407bce9096a3",
                "patch": "@@ -551,7 +551,8 @@ protected void sendInvalidSessions(ClusterManager manager, CatalinaCluster clust\n      * @return True if no session change\n      */\n     protected boolean isRequestWithoutSessionChange(String uri) {\n-        return filter.matcher(uri).matches();\n+        Pattern f = filter;\n+        return f != null && f.matcher(uri).matches();\n     }\n \n     /**",
                "deletions": 1
            },
            {
                "sha": "7075092cc0a790f73a7eeae1f1f257191249654a",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/d8f8be11af0571c6eaa45961eac8407bce9096a3/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/d8f8be11af0571c6eaa45961eac8407bce9096a3/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=d8f8be11af0571c6eaa45961eac8407bce9096a3",
                "patch": "@@ -80,6 +80,9 @@\n   </subsection>\n   <subsection name=\"Cluster\">\n     <changelog>\n+      <fix>\n+        <bug>50591</bug>: Fix NPE in ReplicationValve. (kkolinko)\n+      </fix>\n       <add>\n         Internationalise the log messages for the FarmWarDeployer. (markt)\n       </add>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPEs with not found TLDs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1742984 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/1f32fb3eaff6cff6ec0e9997e3207a37767b057b",
        "parent": "https://github.com/apache/tomcat/commit/44dec3f746c07a15063a57b4352a612e2d2a8591",
        "bug_id": "tomcat_80",
        "file": [
            {
                "sha": "48bd789db1e8b2bf1da13faede737224e07ea1f3",
                "filename": "java/org/apache/jasper/compiler/TagLibraryInfoImpl.java",
                "blob_url": "https://github.com/apache/tomcat/blob/1f32fb3eaff6cff6ec0e9997e3207a37767b057b/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java",
                "raw_url": "https://github.com/apache/tomcat/raw/1f32fb3eaff6cff6ec0e9997e3207a37767b057b/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java?ref=1f32fb3eaff6cff6ec0e9997e3207a37767b057b",
                "patch": "@@ -172,8 +172,16 @@ public TagLibraryInfoImpl(JspCompilationContext ctxt, ParserController pc,\n             }\n \n             // Get the representation of the TLD\n+            System.out.println(\"tldResourcePath: \" + tldResourcePath.getUrl());\n+            if (tldResourcePath.getUrl() == null) {\n+                err.jspError(\"jsp.error.tld.missing\", prefix, uri);\n+            }\n             TaglibXml taglibXml =\n                     ctxt.getOptions().getTldCache().getTaglibXml(tldResourcePath);\n+            System.out.println(\"taglibXml: \" + taglibXml);\n+            if (taglibXml == null) {\n+                err.jspError(\"jsp.error.tld.missing\", prefix, uri);\n+            }\n \n             // Populate the TagLibraryInfo attributes\n             this.jspversion = taglibXml.getJspVersion();",
                "deletions": 0
            },
            {
                "sha": "60daed583daf61a1fc617b29cd05008988ac040a",
                "filename": "java/org/apache/jasper/compiler/TldCache.java",
                "blob_url": "https://github.com/apache/tomcat/blob/1f32fb3eaff6cff6ec0e9997e3207a37767b057b/java/org/apache/jasper/compiler/TldCache.java",
                "raw_url": "https://github.com/apache/tomcat/raw/1f32fb3eaff6cff6ec0e9997e3207a37767b057b/java/org/apache/jasper/compiler/TldCache.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/TldCache.java?ref=1f32fb3eaff6cff6ec0e9997e3207a37767b057b",
                "patch": "@@ -93,6 +93,9 @@ public TldResourcePath getTldResourcePath(String uri) {\n \n     public TaglibXml getTaglibXml(TldResourcePath tldResourcePath) throws JasperException {\n         TaglibXmlCacheEntry cacheEntry = tldResourcePathTaglibXmlMap.get(tldResourcePath);\n+        if (cacheEntry == null) {\n+            return null;\n+        }\n         long lastModified[] = getLastModified(tldResourcePath);\n         if (lastModified[0] != cacheEntry.getWebAppPathLastModified() ||\n                 lastModified[1] != cacheEntry.getEntryLastModified()) {",
                "deletions": 0
            },
            {
                "sha": "7473095f27b147f03aaf57915acdc710934889f8",
                "filename": "java/org/apache/jasper/resources/LocalStrings.properties",
                "blob_url": "https://github.com/apache/tomcat/blob/1f32fb3eaff6cff6ec0e9997e3207a37767b057b/java/org/apache/jasper/resources/LocalStrings.properties",
                "raw_url": "https://github.com/apache/tomcat/raw/1f32fb3eaff6cff6ec0e9997e3207a37767b057b/java/org/apache/jasper/resources/LocalStrings.properties",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/resources/LocalStrings.properties?ref=1f32fb3eaff6cff6ec0e9997e3207a37767b057b",
                "patch": "@@ -140,6 +140,7 @@ jsp.error.file.not.found=File [{0}] not found\n jsp.error.missing_attribute=According to the TLD or the tag file, attribute {0} is mandatory for tag {1}\n jsp.error.bad_attribute=Attribute {0} invalid for tag {1} according to TLD\n jsp.error.tld.unable_to_get_jar=Unable to get JAR resource \\\"{0}\\\" containing TLD: {1}\n+jsp.error.tld.missing=Unable to find taglib \\\"{0}\\\" for URI: {1}\n jsp.error.tld.missing_jar=Missing JAR resource \\\"{0}\\\" containing TLD\n jsp.error.unable.to_find_method=Unable to find setter method for attribute: {0}\n jsp.error.bad_tag=No tag \\\"{0}\\\" defined in tag library imported with prefix \\\"{1}\\\"",
                "deletions": 0
            },
            {
                "sha": "b43da71fed7de1c7c1f2a98ebde5859941b6be8c",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/1f32fb3eaff6cff6ec0e9997e3207a37767b057b/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/1f32fb3eaff6cff6ec0e9997e3207a37767b057b/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=1f32fb3eaff6cff6ec0e9997e3207a37767b057b",
                "patch": "@@ -283,6 +283,9 @@\n         JAR has been exploded into <code>WEB-INF/classes</code> and the web\n         application is deployed as a packed WAR. (markt)\n       </fix>\n+      <fix>\n+        NPEs with not found TLDs. (remm)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"WebSocket\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NullPointerException, when copyXML=true and META-INF/context.xml does not exist.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@963599 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/df1244e430b78efe02a2f10f48e8ea3ad39c5aa9",
        "parent": "https://github.com/apache/tomcat/commit/16ccf74f63d055bdfa95e75cdcbe93e9b08ee749",
        "bug_id": "tomcat_81",
        "file": [
            {
                "sha": "f6b6582d4d2373e503a094abf34bdb3e8ba4d467",
                "filename": "java/org/apache/catalina/startup/HostConfig.java",
                "blob_url": "https://github.com/apache/tomcat/blob/df1244e430b78efe02a2f10f48e8ea3ad39c5aa9/java/org/apache/catalina/startup/HostConfig.java",
                "raw_url": "https://github.com/apache/tomcat/raw/df1244e430b78efe02a2f10f48e8ea3ad39c5aa9/java/org/apache/catalina/startup/HostConfig.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/startup/HostConfig.java?ref=df1244e430b78efe02a2f10f48e8ea3ad39c5aa9",
                "patch": "@@ -846,7 +846,7 @@ protected void deployWAR(String contextPath, File war, String file) {\n                 if (entry != null) {\n                     xmlInWar = true;\n                 }\n-                if (copyXML) {\n+                if (copyXML && xmlInWar) {\n                     istream = jar.getInputStream(entry);\n                     \n                     ostream =",
                "deletions": 1
            },
            {
                "sha": "902f392bb3bd0a52d1b4507642bf4eb45ff98d0e",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/df1244e430b78efe02a2f10f48e8ea3ad39c5aa9/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/df1244e430b78efe02a2f10f48e8ea3ad39c5aa9/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=df1244e430b78efe02a2f10f48e8ea3ad39c5aa9",
                "patch": "@@ -29,6 +29,7 @@\n     <author email=\"rjung@apache.org\">Rainer Jung</author>\n     <author email=\"kkolinko@apache.org\">Konstantin Kolinko</author>\n     <author email=\"pero@apache.org\">Peter Rossbach</author>\n+    <author email=\"kfujino@apache.org\">Keiichi Fujino</author>    \n     <title>Changelog</title>\n   </properties>\n \n@@ -140,6 +141,10 @@\n         Random to generate nonces. Also make the implementation class used user\n         configurable. (markt)\n       </fix>\n+      <fix>\n+        Avoid NullPointerException, when copyXML=true and META-INF/context.xml \n+        does not exist. (kfujino)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Jasper\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1687434 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/e0c4e8ba55b18172258b52abf25b8015cb961dd5",
        "parent": "https://github.com/apache/tomcat/commit/4f0bbe03b0ed6b0ac8f1fde72d567cbcdfab342f",
        "bug_id": "tomcat_82",
        "file": [
            {
                "sha": "cb4e8fdb3a2e6393ddc0e43064c2dfa77fba614f",
                "filename": "java/org/apache/catalina/filters/RemoteIpFilter.java",
                "blob_url": "https://github.com/apache/tomcat/blob/e0c4e8ba55b18172258b52abf25b8015cb961dd5/java/org/apache/catalina/filters/RemoteIpFilter.java",
                "raw_url": "https://github.com/apache/tomcat/raw/e0c4e8ba55b18172258b52abf25b8015cb961dd5/java/org/apache/catalina/filters/RemoteIpFilter.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/filters/RemoteIpFilter.java?ref=e0c4e8ba55b18172258b52abf25b8015cb961dd5",
                "patch": "@@ -859,8 +859,9 @@ public void doFilter(HttpServletRequest request, HttpServletResponse response, F\n             }\n \n             HttpServletResponse xResponse;\n-            if (!xRequest.getScheme().equals(request.getScheme()) ||\n-                    xRequest.getServerPort() != request.getServerPort()) {\n+            if (xRequest.getScheme() != null &&\n+                    (!xRequest.getScheme().equals(request.getScheme()) ||\n+                    xRequest.getServerPort() != request.getServerPort())) {\n                 xResponse = new XForwardedResponse(response, xRequest.getScheme(), xRequest.getServerPort());\n             } else {\n                 xResponse = response;",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "JNDIRealm does not catch NullPointerException for Sun's LDAP provider\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@539907 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/7ea6c2e3c0fc391276dc67e6f9ac2609d784a06c",
        "parent": "https://github.com/apache/tomcat/commit/33c9949d674a90ca0a29803b4523513f502b2e4f",
        "bug_id": "tomcat_83",
        "file": [
            {
                "sha": "6b99df5da97ce176d0d7be1aecf614532afa5d9c",
                "filename": "java/org/apache/catalina/realm/JNDIRealm.java",
                "blob_url": "https://github.com/apache/tomcat/blob/7ea6c2e3c0fc391276dc67e6f9ac2609d784a06c/java/org/apache/catalina/realm/JNDIRealm.java",
                "raw_url": "https://github.com/apache/tomcat/raw/7ea6c2e3c0fc391276dc67e6f9ac2609d784a06c/java/org/apache/catalina/realm/JNDIRealm.java",
                "status": "modified",
                "changes": 17,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/realm/JNDIRealm.java?ref=7ea6c2e3c0fc391276dc67e6f9ac2609d784a06c",
                "patch": "@@ -808,6 +808,23 @@ public Principal authenticate(String username, String credentials) {\n                 // Authenticate the specified username if possible\n                 principal = authenticate(context, username, credentials);\n \n+            } catch (NullPointerException e) {\n+                /* BZ 42449 - Kludge Sun's LDAP provider\n+                   with broken SSL\n+                */\n+                // log the exception so we know it's there.\n+                containerLog.warn(sm.getString(\"jndiRealm.exception\"), e);\n+\n+                // close the connection so we know it will be reopened.\n+                if (context != null)\n+                    close(context);\n+\n+                // open a new directory context.\n+                context = open();\n+\n+                // Try the authentication again.\n+                principal = authenticate(context, username, credentials);\n+\n             } catch (CommunicationException e) {\n \n                 // log the exception so we know it's there.",
                "deletions": 0
            },
            {
                "sha": "c45001169d518da437159821b4583ec3daf6fd5a",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/7ea6c2e3c0fc391276dc67e6f9ac2609d784a06c/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/7ea6c2e3c0fc391276dc67e6f9ac2609d784a06c/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=7ea6c2e3c0fc391276dc67e6f9ac2609d784a06c",
                "patch": "@@ -18,7 +18,12 @@\n   <subsection name=\"Catalina\">\n     <changelog>\n       <fix>\n-         <bug>42444</bug>: prevent NPE \n+         <bug>42449</bug>:\n+         JNDIRealm does not catch NullPointerException for Sun's\n+         LDAP provider (See bug for details) (funkman)\n+      </fix>\n+      <fix>\n+         <bug>42444</bug>: prevent NPE for AccessLogValve\n          Patch provided by Nils Hammar (funkman)\n       </fix>\n       <fix>",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=60882\nFix a NullPointerException when obtaining a RequestDispatcher for a request that will not have any pathInfo associated with it.\nThis was a regression in the changes in 9.0.0.M18 for the Servlet 4.0 API changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1787405 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/39aff4e3310797fc1e1a1ce772f6b10359cd3dea",
        "parent": "https://github.com/apache/tomcat/commit/f678f956cfcd32ba30df0905a2cb9b457da67e6e",
        "bug_id": "tomcat_84",
        "file": [
            {
                "sha": "42a5865c99c1a3350a63f99cbecac19ed8c4b380",
                "filename": "java/org/apache/catalina/core/ApplicationMapping.java",
                "blob_url": "https://github.com/apache/tomcat/blob/39aff4e3310797fc1e1a1ce772f6b10359cd3dea/java/org/apache/catalina/core/ApplicationMapping.java",
                "raw_url": "https://github.com/apache/tomcat/raw/39aff4e3310797fc1e1a1ce772f6b10359cd3dea/java/org/apache/catalina/core/ApplicationMapping.java",
                "status": "modified",
                "changes": 9,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/ApplicationMapping.java?ref=39aff4e3310797fc1e1a1ce772f6b10359cd3dea",
                "patch": "@@ -57,8 +57,13 @@ public ServletMapping getServletMapping() {\n                             \"*\" + path.substring(extIndex), mappingData.matchType, servletName);\n                     break;\n                 case PATH:\n-                    mapping = new MappingImpl(mappingData.pathInfo.toString().substring(1),\n-                            mappingData.wrapperPath.toString() + \"/*\",\n+                    String matchValue;\n+                    if (mappingData.pathInfo.isNull()) {\n+                        matchValue = null;\n+                    } else {\n+                        matchValue = mappingData.pathInfo.toString().substring(1);\n+                    }\n+                    mapping = new MappingImpl(matchValue, mappingData.wrapperPath.toString() + \"/*\",\n                             mappingData.matchType, servletName);\n                     break;\n                 case UNKNOWN:",
                "deletions": 2
            },
            {
                "sha": "b3a8382e91c804fd4c3fbf8bdd68eeacb5cf9e69",
                "filename": "test/org/apache/catalina/core/TestApplicationMapping.java",
                "blob_url": "https://github.com/apache/tomcat/blob/39aff4e3310797fc1e1a1ce772f6b10359cd3dea/test/org/apache/catalina/core/TestApplicationMapping.java",
                "raw_url": "https://github.com/apache/tomcat/raw/39aff4e3310797fc1e1a1ce772f6b10359cd3dea/test/org/apache/catalina/core/TestApplicationMapping.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/core/TestApplicationMapping.java?ref=39aff4e3310797fc1e1a1ce772f6b10359cd3dea",
                "patch": "@@ -58,6 +58,16 @@ public void testContextNonRootMappingExact() throws Exception {\n         doTestMapping(\"/dummy\", \"/foo/bar\", \"/foo/bar\", \"foo/bar\", \"EXACT\");\n     }\n \n+    @Test\n+    public void testContextNonRootMappingPathNone() throws Exception {\n+        doTestMapping(\"/dummy\", \"/foo/bar/*\", \"/foo/bar\", null, \"PATH\");\n+    }\n+\n+    @Test\n+    public void testContextNonRootMappingPathSeparatorOnly() throws Exception {\n+        doTestMapping(\"/dummy\", \"/foo/bar/*\", \"/foo/bar/\", \"\", \"PATH\");\n+    }\n+\n     @Test\n     public void testContextNonRootMappingPath() throws Exception {\n         doTestMapping(\"/dummy\", \"/foo/bar/*\", \"/foo/bar/foo2\", \"foo2\", \"PATH\");",
                "deletions": 0
            },
            {
                "sha": "a5eeb46e5cad571088c8e610f17e6ecd3f4f8580",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/39aff4e3310797fc1e1a1ce772f6b10359cd3dea/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/39aff4e3310797fc1e1a1ce772f6b10359cd3dea/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=39aff4e3310797fc1e1a1ce772f6b10359cd3dea",
                "patch": "@@ -69,6 +69,12 @@\n         by the <code>Rfc6265CookieProcessor</code> are aligned with the\n         specification. Patch provided by Jim Griswold. (markt)\n       </fix>\n+      <fix>\n+        <bug>60882</bug>: Fix a <code>NullPointerException</code> when obtaining\n+        a <code>RequestDispatcher</code> for a request that will not have any\n+        pathInfo associated with it. This was a regression in the changes in\n+        9.0.0.M18 for the Servlet 4.0 API changes. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE in some error conditions / edge cases\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1738650 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/be7e11ef3e7d0cac6daee6852c01596b248f4f1d",
        "parent": "https://github.com/apache/tomcat/commit/66c57a48a0eb054bb525ca0edb054b1b949f1f99",
        "bug_id": "tomcat_85",
        "file": [
            {
                "sha": "9bb4213c7c9765ac3c984dfa5f5345f728016175",
                "filename": "java/org/apache/catalina/core/ApplicationMapping.java",
                "blob_url": "https://github.com/apache/tomcat/blob/be7e11ef3e7d0cac6daee6852c01596b248f4f1d/java/org/apache/catalina/core/ApplicationMapping.java",
                "raw_url": "https://github.com/apache/tomcat/raw/be7e11ef3e7d0cac6daee6852c01596b248f4f1d/java/org/apache/catalina/core/ApplicationMapping.java",
                "status": "modified",
                "changes": 23,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/ApplicationMapping.java?ref=be7e11ef3e7d0cac6daee6852c01596b248f4f1d",
                "patch": "@@ -33,35 +33,36 @@ public ApplicationMapping(MappingData mappingData) {\n \n     public Mapping getMapping() {\n         if (mapping == null) {\n+            String servletName;\n+            if (mappingData.wrapper == null) {\n+                servletName = \"\";\n+            } else {\n+                servletName = mappingData.wrapper.getName();\n+            }\n             switch (mappingData.matchType) {\n                 case CONTEXT_ROOT:\n-                    mapping = new MappingImpl(\"\", \"\", mappingData.matchType,\n-                            mappingData.wrapper.getName());\n+                    mapping = new MappingImpl(\"\", \"\", mappingData.matchType, servletName);\n                     break;\n                 case DEFAULT:\n-                    mapping = new MappingImpl(\"/\", \"/\", mappingData.matchType,\n-                            mappingData.wrapper.getName());\n+                    mapping = new MappingImpl(\"/\", \"/\", mappingData.matchType, servletName);\n                     break;\n                 case EXACT:\n                     mapping = new MappingImpl(mappingData.wrapperPath.toString(),\n-                            mappingData.wrapperPath.toString(), mappingData.matchType,\n-                            mappingData.wrapper.getName());\n+                            mappingData.wrapperPath.toString(), mappingData.matchType, servletName);\n                     break;\n                 case EXTENSION:\n                     String path = mappingData.wrapperPath.toString();\n                     int extIndex = path.lastIndexOf('.');\n                     mapping = new MappingImpl(path.substring(0, extIndex),\n-                            \"*\" + path.substring(extIndex), mappingData.matchType,\n-                            mappingData.wrapper.getName());\n+                            \"*\" + path.substring(extIndex), mappingData.matchType, servletName);\n                     break;\n                 case PATH:\n                     mapping = new MappingImpl(mappingData.pathInfo.toString(),\n                             mappingData.wrapperPath.toString() + \"/*\",\n-                            mappingData.matchType, mappingData.wrapper.getName());\n+                            mappingData.matchType, servletName);\n                     break;\n                 case UNKNOWN:\n-                    mapping = new MappingImpl(\"\", \"\", mappingData.matchType,\n-                            mappingData.wrapper.getName());\n+                    mapping = new MappingImpl(\"\", \"\", mappingData.matchType, servletName);\n                     break;\n             }\n         }",
                "deletions": 11
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Investigating BZ 59261\nAvoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1738059 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/cce5d396132935565945d58f7e8dec5866d0f4b9",
        "parent": "https://github.com/apache/tomcat/commit/1994ef720b117799bb21b8642e155044cf462580",
        "bug_id": "tomcat_86",
        "file": [
            {
                "sha": "48366a46791ce2ebce18d85fbb2d76a8e97028b3",
                "filename": "test/org/apache/catalina/core/TestAsyncContextImpl.java",
                "blob_url": "https://github.com/apache/tomcat/blob/cce5d396132935565945d58f7e8dec5866d0f4b9/test/org/apache/catalina/core/TestAsyncContextImpl.java",
                "raw_url": "https://github.com/apache/tomcat/raw/cce5d396132935565945d58f7e8dec5866d0f4b9/test/org/apache/catalina/core/TestAsyncContextImpl.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/core/TestAsyncContextImpl.java?ref=cce5d396132935565945d58f7e8dec5866d0f4b9",
                "patch": "@@ -1169,6 +1169,7 @@ public void run() {\n \n     @Test\n     public void testErrorHandling() throws Exception {\n+        resetTracker();\n         // Setup Tomcat instance\n         Tomcat tomcat = getTomcatInstance();\n ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "59255: Fix posible NPE in mapper, using Konstantin Kolinko's idea.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1737270 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/b7d9ef8afa4854c3dbf0a195c74cd2f07c4590e0",
        "parent": "https://github.com/apache/tomcat/commit/99772ce460459d409971098dccac8cd015a97f36",
        "bug_id": "tomcat_87",
        "file": [
            {
                "sha": "d26aa6aa898098d24e6e8371dfa5205218da55f4",
                "filename": "java/org/apache/catalina/mapper/Mapper.java",
                "blob_url": "https://github.com/apache/tomcat/blob/b7d9ef8afa4854c3dbf0a195c74cd2f07c4590e0/java/org/apache/catalina/mapper/Mapper.java",
                "raw_url": "https://github.com/apache/tomcat/raw/b7d9ef8afa4854c3dbf0a195c74cd2f07c4590e0/java/org/apache/catalina/mapper/Mapper.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/mapper/Mapper.java?ref=b7d9ef8afa4854c3dbf0a195c74cd2f07c4590e0",
                "patch": "@@ -879,7 +879,7 @@ private final void internalMapWrapper(ContextVersion contextVersion,\n         }\n \n         if(mappingData.wrapper == null && noServletPath &&\n-                mappingData.context.getMapperContextRootRedirectEnabled()) {\n+                contextVersion.object.getMapperContextRootRedirectEnabled()) {\n             // The path is empty, redirect to \"/\"\n             path.append('/');\n             pathEnd = path.getEnd();\n@@ -1008,7 +1008,7 @@ private final void internalMapWrapper(ContextVersion contextVersion,\n                     file = contextVersion.resources.getResource(pathStr);\n                 }\n                 if (file != null && file.isDirectory() &&\n-                        mappingData.context.getMapperDirectoryRedirectEnabled()) {\n+                        contextVersion.object.getMapperDirectoryRedirectEnabled()) {\n                     // Note: this mutates the path: do not do any processing\n                     // after this (since we set the redirectPath, there\n                     // shouldn't be any)",
                "deletions": 2
            },
            {
                "sha": "e7a6f2103e4c8b963770ec52575eb5f7f6015c3d",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/b7d9ef8afa4854c3dbf0a195c74cd2f07c4590e0/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/b7d9ef8afa4854c3dbf0a195c74cd2f07c4590e0/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=b7d9ef8afa4854c3dbf0a195c74cd2f07c4590e0",
                "patch": "@@ -84,6 +84,9 @@\n         Based on a patch submitted by Coty Sutherland.\n         (remm)\n       </fix>\n+      <fix>\n+        <bug>59255</bug>: Fix posible NPE in mapper. (kkolinko/remm)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fixed possible NPE in o.a.catalina.loader.WebappClassLoaderBase.getResourceAsStream\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1736489 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/d6ca54c645dba6dc7d1d88aa8c01295cefab0073",
        "parent": "https://github.com/apache/tomcat/commit/8c04488f49a6f0ecbfdfab296cd1689d77c24f5b",
        "bug_id": "tomcat_88",
        "file": [
            {
                "sha": "ac7bdae710f1d9928125ea76d8601bc5e1a40e84",
                "filename": "java/org/apache/catalina/loader/WebappClassLoaderBase.java",
                "blob_url": "https://github.com/apache/tomcat/blob/d6ca54c645dba6dc7d1d88aa8c01295cefab0073/java/org/apache/catalina/loader/WebappClassLoaderBase.java",
                "raw_url": "https://github.com/apache/tomcat/raw/d6ca54c645dba6dc7d1d88aa8c01295cefab0073/java/org/apache/catalina/loader/WebappClassLoaderBase.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/loader/WebappClassLoaderBase.java?ref=d6ca54c645dba6dc7d1d88aa8c01295cefab0073",
                "patch": "@@ -1086,7 +1086,9 @@ public InputStream getResourceAsStream(String name) {\n         try {\n             if (hasExternalRepositories && stream == null) {\n                 URL url = super.findResource(name);\n-                stream = url.openStream();\n+                if (url != null) {\n+                    stream = url.openStream();\n+                }\n             }\n         } catch (IOException e) {\n             // Ignore",
                "deletions": 1
            },
            {
                "sha": "55a9ace08a86c0abd153576ab838ae7e66d70808",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/d6ca54c645dba6dc7d1d88aa8c01295cefab0073/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/d6ca54c645dba6dc7d1d88aa8c01295cefab0073/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=d6ca54c645dba6dc7d1d88aa8c01295cefab0073",
                "patch": "@@ -62,6 +62,11 @@\n         <code>o.a.tomcat.util.http.ServerCookie</code>. Patch is provided by\n         Kyohei Nakamura. (violetagg)\n       </fix>\n+      <fix>\n+        Fixed possible NPE in\n+        <code>o.a.catalina.loader.WebappClassLoaderBase.getResourceAsStream</code>\n+        (violetagg)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1662718 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/66fe1904a3a4e39a86bbdc095cd388f7ecd12391",
        "parent": "https://github.com/apache/tomcat/commit/eff8241fba71491997827e08e3ad8203ee5cf53e",
        "bug_id": "tomcat_89",
        "file": [
            {
                "sha": "dbfdb92c5e3dff5607d29efcf2d5fabaf60d1e25",
                "filename": "java/org/apache/coyote/http11/AbstractHttp11Protocol.java",
                "blob_url": "https://github.com/apache/tomcat/blob/66fe1904a3a4e39a86bbdc095cd388f7ecd12391/java/org/apache/coyote/http11/AbstractHttp11Protocol.java",
                "raw_url": "https://github.com/apache/tomcat/raw/66fe1904a3a4e39a86bbdc095cd388f7ecd12391/java/org/apache/coyote/http11/AbstractHttp11Protocol.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/AbstractHttp11Protocol.java?ref=66fe1904a3a4e39a86bbdc095cd388f7ecd12391",
                "patch": "@@ -289,7 +289,7 @@ protected Processor createUpgradeProcessor(\n                 return new UpgradeProcessorInternal(socket, leftoverInput,\n                         (InternalHttpUpgradeHandler) httpUpgradeHandler);\n             } else {\n-                return new UpgradeProcessorExternal(socket, leftoverInput);\n+                return new UpgradeProcessorExternal(socket, leftoverInput, httpUpgradeHandler);\n             }\n         }\n     }",
                "deletions": 1
            },
            {
                "sha": "ca32dcb708996f53a41f072e9155103dde017b14",
                "filename": "java/org/apache/coyote/http11/upgrade/UpgradeProcessorBase.java",
                "blob_url": "https://github.com/apache/tomcat/blob/66fe1904a3a4e39a86bbdc095cd388f7ecd12391/java/org/apache/coyote/http11/upgrade/UpgradeProcessorBase.java",
                "raw_url": "https://github.com/apache/tomcat/raw/66fe1904a3a4e39a86bbdc095cd388f7ecd12391/java/org/apache/coyote/http11/upgrade/UpgradeProcessorBase.java",
                "status": "modified",
                "changes": 18,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/upgrade/UpgradeProcessorBase.java?ref=66fe1904a3a4e39a86bbdc095cd388f7ecd12391",
                "patch": "@@ -34,7 +34,11 @@\n \n     protected static final int INFINITE_TIMEOUT = -1;\n \n-    public UpgradeProcessorBase(SocketWrapperBase<?> wrapper, ByteBuffer leftOverInput) {\n+    private final HttpUpgradeHandler httpUpgradeHandler;\n+\n+    public UpgradeProcessorBase(SocketWrapperBase<?> wrapper, ByteBuffer leftOverInput,\n+            HttpUpgradeHandler httpUpgradeHandler) {\n+        this.httpUpgradeHandler = httpUpgradeHandler;\n         wrapper.unRead(leftOverInput);\n     }\n \n@@ -48,19 +52,19 @@ public final boolean isUpgrade() {\n \n \n     @Override\n-    public final void recycle() {\n-        // Currently a NO-OP as upgrade processors are not recycled.\n+    public HttpUpgradeHandler getHttpUpgradeHandler() {\n+        return httpUpgradeHandler;\n     }\n \n \n-    // ---------------------------- Processor methods that are NO-OP for upgrade\n-\n     @Override\n-    public HttpUpgradeHandler getHttpUpgradeHandler() {\n-        return null;\n+    public final void recycle() {\n+        // Currently a NO-OP as upgrade processors are not recycled.\n     }\n \n \n+    // ---------------------------- Processor methods that are NO-OP for upgrade\n+\n     @Override\n     public final Executor getExecutor() {\n         return null;",
                "deletions": 7
            },
            {
                "sha": "0d4c2a12d11d159927e71c74716c38bf736167f3",
                "filename": "java/org/apache/coyote/http11/upgrade/UpgradeProcessorExternal.java",
                "blob_url": "https://github.com/apache/tomcat/blob/66fe1904a3a4e39a86bbdc095cd388f7ecd12391/java/org/apache/coyote/http11/upgrade/UpgradeProcessorExternal.java",
                "raw_url": "https://github.com/apache/tomcat/raw/66fe1904a3a4e39a86bbdc095cd388f7ecd12391/java/org/apache/coyote/http11/upgrade/UpgradeProcessorExternal.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/upgrade/UpgradeProcessorExternal.java?ref=66fe1904a3a4e39a86bbdc095cd388f7ecd12391",
                "patch": "@@ -21,6 +21,7 @@\n \n import javax.servlet.ServletInputStream;\n import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpUpgradeHandler;\n \n import org.apache.juli.logging.Log;\n import org.apache.juli.logging.LogFactory;\n@@ -38,8 +39,9 @@\n     private final UpgradeServletOutputStream upgradeServletOutputStream;\n \n \n-    public UpgradeProcessorExternal(SocketWrapperBase<?> wrapper, ByteBuffer leftOverInput) {\n-        super(wrapper, leftOverInput);\n+    public UpgradeProcessorExternal(SocketWrapperBase<?> wrapper, ByteBuffer leftOverInput,\n+            HttpUpgradeHandler httpUpgradeHandler) {\n+        super(wrapper, leftOverInput, httpUpgradeHandler);\n         this.upgradeServletInputStream = new UpgradeServletInputStream(wrapper);\n         this.upgradeServletOutputStream = new UpgradeServletOutputStream(wrapper);\n ",
                "deletions": 2
            },
            {
                "sha": "74e887714c62018ced80fd3e2980ce4fa38655e0",
                "filename": "java/org/apache/coyote/http11/upgrade/UpgradeProcessorInternal.java",
                "blob_url": "https://github.com/apache/tomcat/blob/66fe1904a3a4e39a86bbdc095cd388f7ecd12391/java/org/apache/coyote/http11/upgrade/UpgradeProcessorInternal.java",
                "raw_url": "https://github.com/apache/tomcat/raw/66fe1904a3a4e39a86bbdc095cd388f7ecd12391/java/org/apache/coyote/http11/upgrade/UpgradeProcessorInternal.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/upgrade/UpgradeProcessorInternal.java?ref=66fe1904a3a4e39a86bbdc095cd388f7ecd12391",
                "patch": "@@ -32,7 +32,7 @@\n \n     public UpgradeProcessorInternal(SocketWrapperBase<?> wrapper, ByteBuffer leftOverInput,\n             InternalHttpUpgradeHandler internalHttpUpgradeHandler) {\n-        super(wrapper, leftOverInput);\n+        super(wrapper, leftOverInput, internalHttpUpgradeHandler);\n         this.internalHttpUpgradeHandler = internalHttpUpgradeHandler;\n         /*\n          * Leave timeouts in the hands of the upgraded protocol.",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=60436\nAvoid a potential NPE when processing async timeouts.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1772318 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/5969fbb8dcd147783372ece1b6b7486e8447e3f1",
        "parent": "https://github.com/apache/tomcat/commit/e3d0f0d051b5b9190671187377e0e0c756a73405",
        "bug_id": "tomcat_90",
        "file": [
            {
                "sha": "38601a68cb872a8d67c5d1e18b282a5bfbec9bbb",
                "filename": "java/org/apache/coyote/AbstractProcessor.java",
                "blob_url": "https://github.com/apache/tomcat/blob/5969fbb8dcd147783372ece1b6b7486e8447e3f1/java/org/apache/coyote/AbstractProcessor.java",
                "raw_url": "https://github.com/apache/tomcat/raw/5969fbb8dcd147783372ece1b6b7486e8447e3f1/java/org/apache/coyote/AbstractProcessor.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/AbstractProcessor.java?ref=5969fbb8dcd147783372ece1b6b7486e8447e3f1",
                "patch": "@@ -525,7 +525,10 @@ public void timeoutAsync(long now) {\n     private void doTimeoutAsync() {\n         // Avoid multiple timeouts\n         setAsyncTimeout(-1);\n-        socketWrapper.processSocket(SocketEvent.TIMEOUT, true);\n+        SocketWrapperBase<?> socketWrapper = getSocketWrapper();\n+        if (socketWrapper != null) {\n+            socketWrapper.processSocket(SocketEvent.TIMEOUT, true);\n+        }\n     }\n \n ",
                "deletions": 1
            },
            {
                "sha": "49039073e31ca3dc9542c3d5817705e2cd56052c",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/5969fbb8dcd147783372ece1b6b7486e8447e3f1/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/5969fbb8dcd147783372ece1b6b7486e8447e3f1/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=5969fbb8dcd147783372ece1b6b7486e8447e3f1",
                "patch": "@@ -190,6 +190,10 @@\n         any local port. This reduces the likelihood of the unlock failing.\n         (markt)\n       </fix>\n+      <fix>\n+        <bug>60436</bug>: Avoid a potential NPE when processing async timeouts.\n+        (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Jasper\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Prevent NPEs on some error conditions.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1728672 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/942afd8dfff1ef3eb2c1d51e1250c7980630bdfb",
        "parent": "https://github.com/apache/tomcat/commit/8314e1d986732934728a81fa2c7c50e24c311dad",
        "bug_id": "tomcat_91",
        "file": [
            {
                "sha": "a4384c6f437fdab6c82b17eb7119e3dcad824c8c",
                "filename": "java/org/apache/tomcat/util/modeler/Registry.java",
                "blob_url": "https://github.com/apache/tomcat/blob/942afd8dfff1ef3eb2c1d51e1250c7980630bdfb/java/org/apache/tomcat/util/modeler/Registry.java",
                "raw_url": "https://github.com/apache/tomcat/raw/942afd8dfff1ef3eb2c1d51e1250c7980630bdfb/java/org/apache/tomcat/util/modeler/Registry.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/modeler/Registry.java?ref=942afd8dfff1ef3eb2c1d51e1250c7980630bdfb",
                "patch": "@@ -418,11 +418,11 @@ public MBeanOperationInfo getMethodInfo( ObjectName oname, String opName )\n      */\n     public void unregisterComponent( ObjectName oname ) {\n         try {\n-            if( getMBeanServer().isRegistered(oname)) {\n+            if (oname != null && getMBeanServer().isRegistered(oname)) {\n                 getMBeanServer().unregisterMBean(oname);\n             }\n-        } catch( Throwable t ) {\n-            log.error( \"Error unregistering mbean \", t);\n+        } catch (Throwable t) {\n+            log.error(\"Error unregistering mbean\", t);\n         }\n     }\n ",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix potential NPE when clustering\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1727670 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/f9593220aa1007a038f307f157fa4b3e9f35d117",
        "parent": "https://github.com/apache/tomcat/commit/530186ab0cb166e825405b64f3c91a712a6c0544",
        "bug_id": "tomcat_92",
        "file": [
            {
                "sha": "05ebfeea6469f456831f865973937258c214186c",
                "filename": "java/org/apache/catalina/session/StandardSession.java",
                "blob_url": "https://github.com/apache/tomcat/blob/f9593220aa1007a038f307f157fa4b3e9f35d117/java/org/apache/catalina/session/StandardSession.java",
                "raw_url": "https://github.com/apache/tomcat/raw/f9593220aa1007a038f307f157fa4b3e9f35d117/java/org/apache/catalina/session/StandardSession.java",
                "status": "modified",
                "changes": 11,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/session/StandardSession.java?ref=f9593220aa1007a038f307f157fa4b3e9f35d117",
                "patch": "@@ -1755,8 +1755,17 @@ protected boolean exclude(String name, Object value) {\n         if (Constants.excludedAttributeNames.contains(name)) {\n             return true;\n         }\n+\n+        // Manager is required for remaining check\n+        Manager manager = getManager();\n+        if (manager == null) {\n+            // Manager may be null during replication of new sessions in a\n+            // cluster. Avoid the NPE.\n+            return false;\n+        }\n+\n         // Last check so use a short-cut\n-        return !getManager().willAttributeDistribute(name, value);\n+        return !manager.willAttributeDistribute(name, value);\n     }\n \n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE when sessionAttributeNameFilter and sessionAttributeValueClassNameFilter is unset in cluster environment.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1726575 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/f280f2af0e3ef749e2c01aa6018f397af5ba7d6e",
        "parent": "https://github.com/apache/tomcat/commit/2e3530675649a874aa5f0a6fce3f9adc65b3a322",
        "bug_id": "tomcat_93",
        "file": [
            {
                "sha": "2e2efc96512833f8c9a6d3660af3a7d6f6a3578a",
                "filename": "java/org/apache/catalina/session/ManagerBase.java",
                "blob_url": "https://github.com/apache/tomcat/blob/f280f2af0e3ef749e2c01aa6018f397af5ba7d6e/java/org/apache/catalina/session/ManagerBase.java",
                "raw_url": "https://github.com/apache/tomcat/raw/f280f2af0e3ef749e2c01aa6018f397af5ba7d6e/java/org/apache/catalina/session/ManagerBase.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/session/ManagerBase.java?ref=f280f2af0e3ef749e2c01aa6018f397af5ba7d6e",
                "patch": "@@ -243,8 +243,9 @@ public void setSessionAttributeNameFilter(String sessionAttributeNameFilter)\n             throws PatternSyntaxException {\n         if (sessionAttributeNameFilter == null || sessionAttributeNameFilter.length() == 0) {\n             sessionAttributeNamePattern = null;\n+        } else {\n+            sessionAttributeNamePattern = Pattern.compile(sessionAttributeNameFilter);\n         }\n-        sessionAttributeNamePattern = Pattern.compile(sessionAttributeNameFilter);\n     }\n \n \n@@ -309,9 +310,10 @@ public void setSessionAttributeValueClassNameFilter(String sessionAttributeValue\n         if (sessionAttributeValueClassNameFilter == null ||\n                 sessionAttributeValueClassNameFilter.length() == 0) {\n             sessionAttributeValueClassNamePattern = null;\n+        } else {\n+            sessionAttributeValueClassNamePattern =\n+                    Pattern.compile(sessionAttributeValueClassNameFilter);\n         }\n-        sessionAttributeValueClassNamePattern =\n-                Pattern.compile(sessionAttributeValueClassNameFilter);\n     }\n \n ",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE on bind for APR when using SSL.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1726515 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/2e3530675649a874aa5f0a6fce3f9adc65b3a322",
        "parent": "https://github.com/apache/tomcat/commit/3225b7428c8b0d79ad2629f1dd6b05a5ca068510",
        "bug_id": "tomcat_94",
        "file": [
            {
                "sha": "cc3067f562a4b919a6014cf56609bea344fbaaf6",
                "filename": "java/org/apache/tomcat/util/net/AprEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/2e3530675649a874aa5f0a6fce3f9adc65b3a322/java/org/apache/tomcat/util/net/AprEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/2e3530675649a874aa5f0a6fce3f9adc65b3a322/java/org/apache/tomcat/util/net/AprEndpoint.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/AprEndpoint.java?ref=2e3530675649a874aa5f0a6fce3f9adc65b3a322",
                "patch": "@@ -363,7 +363,7 @@ public void bind() throws Exception {\n                     // Native fallback used if protocols=\"\"\n                     value = SSL.SSL_PROTOCOL_ALL;\n                 } else {\n-                    for (String protocol : sslHostConfig.getEnabledProtocols()) {\n+                    for (String protocol : sslHostConfig.getProtocols()) {\n                         if (Constants.SSL_PROTO_SSLv2Hello.equalsIgnoreCase(protocol)) {\n                             // NO-OP. OpenSSL always supports SSLv2Hello\n                         } else if (Constants.SSL_PROTO_SSLv2.equalsIgnoreCase(protocol)) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1619765 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/9e7392c7df19b75d34488a33fed74e2b4c0ac454",
        "parent": "https://github.com/apache/tomcat/commit/2be1ca7714c1e12120e4d10326cf54a1a9d14b86",
        "bug_id": "tomcat_95",
        "file": [
            {
                "sha": "fb6b257d51b31eae8f90dba8cc230f239df5975c",
                "filename": "java/org/apache/tomcat/util/net/jsse/openssl/OpenSSLCipherConfigurationParser.java",
                "blob_url": "https://github.com/apache/tomcat/blob/9e7392c7df19b75d34488a33fed74e2b4c0ac454/java/org/apache/tomcat/util/net/jsse/openssl/OpenSSLCipherConfigurationParser.java",
                "raw_url": "https://github.com/apache/tomcat/raw/9e7392c7df19b75d34488a33fed74e2b4c0ac454/java/org/apache/tomcat/util/net/jsse/openssl/OpenSSLCipherConfigurationParser.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/jsse/openssl/OpenSSLCipherConfigurationParser.java?ref=9e7392c7df19b75d34488a33fed74e2b4c0ac454",
                "patch": "@@ -632,7 +632,7 @@ static void remove(final LinkedHashSet<Cipher> ciphers, final String alias) {\n                 add(ciphers, element);\n             } else if (element.contains(AND)) {\n                 String[] intersections = element.split(\"\\\\\" + AND);\n-                if(intersections.length > 0) {\n+                if(intersections.length > 0 && aliases.containsKey(intersections[0])) {\n                     List<Cipher> result = new ArrayList<>(aliases.get(intersections[0]));\n                     for(int i = 1; i < intersections.length; i++) {\n                         if(aliases.containsKey(intersections[i])) {",
                "deletions": 1
            },
            {
                "sha": "9a0893553c54c2573f9d77500c5781a230d6d3d6",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/9e7392c7df19b75d34488a33fed74e2b4c0ac454/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/9e7392c7df19b75d34488a33fed74e2b4c0ac454/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=9e7392c7df19b75d34488a33fed74e2b4c0ac454",
                "patch": "@@ -45,6 +45,15 @@\n   issues to not \"pop up\" wrt. others).\n -->\n <section name=\"Tomcat 8.0.12 (markt)\">\n+  <subsection name=\"Coyote\">\n+    <changelog>\n+      <fix>\n+        When building a list of JSSE ciphers from an OpenSSL cipher defintiion,\n+        ignore unknown criteria rather than throwing a\n+        <code>NullPointerException</code>. (markt)\n+      </fix>\n+    </changelog>\n+  </subsection>\n   <subsection name=\"Jasper\">\n     <changelog>\n       <fix>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=59154\nFix a NullPointerException in the JASSMemoryLoginModue resulting from the introduction of the CredentialHandler to Realms\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1734466 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/eda3c4e65341f77182b4b2dc8337334b189d1075",
        "parent": "https://github.com/apache/tomcat/commit/9795d5428a77a3d08b00ad27e48bcc5424e45947",
        "bug_id": "tomcat_96",
        "file": [
            {
                "sha": "d3b1a1b3786e74a58db8720c09a1390eaaa64724",
                "filename": "java/org/apache/catalina/realm/JAASMemoryLoginModule.java",
                "blob_url": "https://github.com/apache/tomcat/blob/eda3c4e65341f77182b4b2dc8337334b189d1075/java/org/apache/catalina/realm/JAASMemoryLoginModule.java",
                "raw_url": "https://github.com/apache/tomcat/raw/eda3c4e65341f77182b4b2dc8337334b189d1075/java/org/apache/catalina/realm/JAASMemoryLoginModule.java",
                "status": "modified",
                "changes": 27,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/realm/JAASMemoryLoginModule.java?ref=eda3c4e65341f77182b4b2dc8337334b189d1075",
                "patch": "@@ -18,6 +18,7 @@\n \n import java.io.File;\n import java.io.IOException;\n+import java.security.NoSuchAlgorithmException;\n import java.security.Principal;\n import java.util.Map;\n \n@@ -41,8 +42,7 @@\n  * <p>Implementation of the JAAS <strong>LoginModule</strong> interface,\n  * primarily for use in testing <code>JAASRealm</code>.  It utilizes an\n  * XML-format data file of username/password/role information identical to\n- * that supported by <code>org.apache.catalina.realm.MemoryRealm</code>\n- * (except that digested passwords are not supported).</p>\n+ * that supported by <code>org.apache.catalina.realm.MemoryRealm</code>.</p>\n  *\n  * <p>This class recognizes the following string-valued options, which are\n  * specified in the configuration file and passed to {@link\n@@ -54,6 +54,14 @@\n  *     XML file containing our user information, in the format supported by\n  *     {@link MemoryRealm}.  The default value matches the MemoryRealm\n  *     default.</li>\n+ * <li><strong>digest</strong> - Digest used to protect credentials in the XML\n+ *     file. If not specified, the passwords will be assumed to be in clear\n+ *     text.</li>\n+ * <li><strong>iterations</strong> - The number of iterations of the associated\n+ *     algorithm that will be used when creating a new stored credential for a\n+ *     given input credential.</li>\n+ * <li><strong>saltLength</strong> - The salt length that will be used when\n+ *     creating a new stored credential for a given input credential.</li>\n  * </ul>\n  *\n  * <p><strong>IMPLEMENTATION NOTE</strong> - This class implements\n@@ -223,9 +231,24 @@ public void initialize(Subject subject, CallbackHandler callbackHandler,\n         this.options = options;\n \n         // Perform instance-specific initialization\n+        MessageDigestCredentialHandler credentialHandler = new MessageDigestCredentialHandler();\n+        setCredentialHandler(credentialHandler);\n         if (options.get(\"pathname\") != null) {\n             this.pathname = (String) options.get(\"pathname\");\n         }\n+        if (options.get(\"digest\") != null) {\n+            try {\n+                credentialHandler.setAlgorithm((String) options.get(\"digest\"));\n+            } catch (NoSuchAlgorithmException e) {\n+                log.warn(\"Invalid digest algorithm for JAASMemoryLoginModule\", e);\n+            }\n+        }\n+        if (options.get(\"iterations\") != null) {\n+            credentialHandler.setIterations(Integer.parseInt((String) options.get(\"iterations\")));\n+        }\n+        if (options.get(\"saltLength\") != null) {\n+            credentialHandler.setIterations(Integer.parseInt((String) options.get(\"saltLength\")));\n+        }\n \n         // Load our defined Principals\n         load();",
                "deletions": 2
            },
            {
                "sha": "7d42b2883d850c3d8071ecf0626f8afb9c8d4747",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/eda3c4e65341f77182b4b2dc8337334b189d1075/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/eda3c4e65341f77182b4b2dc8337334b189d1075/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=eda3c4e65341f77182b4b2dc8337334b189d1075",
                "patch": "@@ -188,6 +188,11 @@\n         added additional (and arguably unnecessary) validation to the provided\n         redirect location. (markt)\n       </fix>\n+      <fix>\n+        <bug>59154</bug>: Fix a <code>NullPointerException</code> in the\n+        <code>JASSMemoryLoginModue</code> resulting from the introduction of the\n+        <code>CredentialHandler</code> to <code>Realm</code>s. (schultz/markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix potential NPE in AbstractReplicatedMap.breakdown().\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1718247 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/99820b8798b8c9929e4eee395fbc53b289eae45e",
        "parent": "https://github.com/apache/tomcat/commit/7a7b0a93edb7443221f59a6cd035dc331422e818",
        "bug_id": "tomcat_97",
        "file": [
            {
                "sha": "345b7a4460e5918449dd5a07ccfcce0009d55094",
                "filename": "java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java",
                "blob_url": "https://github.com/apache/tomcat/blob/99820b8798b8c9929e4eee395fbc53b289eae45e/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java",
                "raw_url": "https://github.com/apache/tomcat/raw/99820b8798b8c9929e4eee395fbc53b289eae45e/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java?ref=99820b8798b8c9929e4eee395fbc53b289eae45e",
                "patch": "@@ -336,9 +336,9 @@ public void breakdown() {\n         if (this.rpcChannel != null) {\n             this.rpcChannel.breakdown();\n         }\n-        try {broadcast(MapMessage.MSG_STOP,false); }catch ( Exception ignore){}\n-        //cleanup\n         if (this.channel != null) {\n+            try {broadcast(MapMessage.MSG_STOP,false); }catch ( Exception ignore){}\n+            //cleanup\n             this.channel.removeChannelListener(this);\n             this.channel.removeMembershipListener(this);\n         }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix potential NPE reported by FindBugs\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1716640 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/7332e233fb36a1acea815382634237c980b9eb99",
        "parent": "https://github.com/apache/tomcat/commit/d6968864e24cbdc0b69b9a614c7fd125b22190b1",
        "bug_id": "tomcat_98",
        "file": [
            {
                "sha": "43f903b5688993c47c236349609b9a50d147f15e",
                "filename": "java/org/apache/catalina/session/FileStore.java",
                "blob_url": "https://github.com/apache/tomcat/blob/7332e233fb36a1acea815382634237c980b9eb99/java/org/apache/catalina/session/FileStore.java",
                "raw_url": "https://github.com/apache/tomcat/raw/7332e233fb36a1acea815382634237c980b9eb99/java/org/apache/catalina/session/FileStore.java",
                "status": "modified",
                "changes": 10,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/session/FileStore.java?ref=7332e233fb36a1acea815382634237c980b9eb99",
                "patch": "@@ -149,12 +149,14 @@ public int getSize() throws IOException {\n \n         // Figure out which files are sessions\n         int keycount = 0;\n-        for (int i = 0; i < files.length; i++) {\n-            if (files[i].endsWith(FILE_EXT)) {\n-                keycount++;\n+        if (files != null) {\n+            for (int i = 0; i < files.length; i++) {\n+                if (files[i].endsWith(FILE_EXT)) {\n+                    keycount++;\n+                }\n             }\n         }\n-        return (keycount);\n+        return keycount;\n \n     }\n ",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Follow-up to r1800867\nAvoid NPE when no alias is specified.\nNow an in memory key store with a single key is used, there is no need for the JSSEKeyManager - so remove it.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1800874 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/31aab10ee126f6e365f58cce56acf5eb1974658b",
        "parent": "https://github.com/apache/tomcat/commit/c5aff0d532f67578650ae47db0a24526ea59e141",
        "bug_id": "tomcat_99",
        "file": [
            {
                "sha": "e68e0df03fa58c33ece9cf6d25f8c1fb01e85682",
                "filename": "java/org/apache/tomcat/util/net/jsse/JSSEKeyManager.java",
                "blob_url": "https://github.com/apache/tomcat/blob/c5aff0d532f67578650ae47db0a24526ea59e141/java/org/apache/tomcat/util/net/jsse/JSSEKeyManager.java",
                "raw_url": "https://github.com/apache/tomcat/raw/c5aff0d532f67578650ae47db0a24526ea59e141/java/org/apache/tomcat/util/net/jsse/JSSEKeyManager.java",
                "status": "removed",
                "changes": 123,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/jsse/JSSEKeyManager.java?ref=c5aff0d532f67578650ae47db0a24526ea59e141",
                "patch": "@@ -1,123 +0,0 @@\n-/*\n- *  Licensed to the Apache Software Foundation (ASF) under one or more\n- *  contributor license agreements.  See the NOTICE file distributed with\n- *  this work for additional information regarding copyright ownership.\n- *  The ASF licenses this file to You under the Apache License, Version 2.0\n- *  (the \"License\"); you may not use this file except in compliance with\n- *  the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-\n-package org.apache.tomcat.util.net.jsse;\n-\n-import java.net.Socket;\n-import java.security.Principal;\n-import java.security.PrivateKey;\n-import java.security.cert.X509Certificate;\n-\n-import javax.net.ssl.SSLEngine;\n-import javax.net.ssl.X509ExtendedKeyManager;\n-import javax.net.ssl.X509KeyManager;\n-\n-/**\n- * X509KeyManager which allows selection of a specific keypair and certificate\n- * chain (identified by their keystore alias name) to be used by the server to\n- * authenticate itself to SSL clients.\n- *\n- * @author Jan Luehe\n- */\n-public final class JSSEKeyManager extends X509ExtendedKeyManager {\n-\n-    private X509KeyManager delegate;\n-    private String serverKeyAlias;\n-\n-\n-    /**\n-     * Constructor.\n-     *\n-     * @param mgr The X509KeyManager used as a delegate\n-     * @param serverKeyAlias The alias name of the server's keypair and\n-     * supporting certificate chain\n-     */\n-    public JSSEKeyManager(X509KeyManager mgr, String serverKeyAlias) {\n-        super();\n-        this.delegate = mgr;\n-        this.serverKeyAlias = serverKeyAlias;\n-    }\n-\n-\n-    /**\n-     * Returns the server key alias that was provided in the constructor or the\n-     * result from {@link X509KeyManager#chooseServerAlias(String, Principal[],\n-     * Socket)} for the delegate if no alias is specified.\n-     */\n-    @Override\n-    public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {\n-        if (serverKeyAlias != null) {\n-            return serverKeyAlias;\n-        }\n-\n-        return delegate.chooseServerAlias(keyType, issuers, socket);\n-    }\n-\n-\n-    /**\n-     * Returns the server key alias that was provided in the constructor or the\n-     * result from {@link X509ExtendedKeyManager#chooseEngineServerAlias(String,\n-     * Principal[], SSLEngine)} for the delegate if no alias is specified.\n-     */\n-    @Override\n-    public String chooseEngineServerAlias(String keyType, Principal[] issuers,\n-            SSLEngine engine) {\n-        if (serverKeyAlias!=null) {\n-            return serverKeyAlias;\n-        }\n-\n-        return super.chooseEngineServerAlias(keyType, issuers, engine);\n-    }\n-\n-\n-    @Override\n-    public String chooseClientAlias(String[] keyType, Principal[] issuers,\n-                                    Socket socket) {\n-        return delegate.chooseClientAlias(keyType, issuers, socket);\n-    }\n-\n-\n-    @Override\n-    public X509Certificate[] getCertificateChain(String alias) {\n-        return delegate.getCertificateChain(alias);\n-    }\n-\n-\n-    @Override\n-    public String[] getClientAliases(String keyType, Principal[] issuers) {\n-        return delegate.getClientAliases(keyType, issuers);\n-    }\n-\n-\n-    @Override\n-    public String[] getServerAliases(String keyType, Principal[] issuers) {\n-        return delegate.getServerAliases(keyType, issuers);\n-    }\n-\n-\n-    @Override\n-    public PrivateKey getPrivateKey(String alias) {\n-        return delegate.getPrivateKey(alias);\n-    }\n-\n-\n-    @Override\n-    public String chooseEngineClientAlias(String[] keyType, Principal[] issuers,\n-            SSLEngine engine) {\n-        return delegate.chooseClientAlias(keyType, issuers, null);\n-    }\n-}",
                "deletions": 123
            },
            {
                "sha": "7d3853a7d595fba8789fe8b80fce45b3bc8e7151",
                "filename": "java/org/apache/tomcat/util/net/jsse/JSSEUtil.java",
                "blob_url": "https://github.com/apache/tomcat/blob/31aab10ee126f6e365f58cce56acf5eb1974658b/java/org/apache/tomcat/util/net/jsse/JSSEUtil.java",
                "raw_url": "https://github.com/apache/tomcat/raw/31aab10ee126f6e365f58cce56acf5eb1974658b/java/org/apache/tomcat/util/net/jsse/JSSEUtil.java",
                "status": "modified",
                "changes": 24,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/jsse/JSSEUtil.java?ref=31aab10ee126f6e365f58cce56acf5eb1974658b",
                "patch": "@@ -52,7 +52,6 @@\n import javax.net.ssl.SSLSessionContext;\n import javax.net.ssl.TrustManager;\n import javax.net.ssl.TrustManagerFactory;\n-import javax.net.ssl.X509KeyManager;\n \n import org.apache.juli.logging.Log;\n import org.apache.juli.logging.LogFactory;\n@@ -171,7 +170,6 @@ public SSLContext createSSLContext(List<String> negotiableProtocols) throws NoSu\n \n     @Override\n     public KeyManager[] getKeyManagers() throws Exception {\n-        String keystoreType = certificate.getCertificateKeystoreType();\n         String keyAlias = certificate.getCertificateKeyAlias();\n         String algorithm = sslHostConfig.getKeyManagerAlgorithm();\n         String keyPass = certificate.getCertificateKeyPassword();\n@@ -181,8 +179,6 @@ public SSLContext createSSLContext(List<String> negotiableProtocols) throws NoSu\n             keyPass = certificate.getCertificateKeystorePassword();\n         }\n \n-        KeyManager[] kms = null;\n-\n         KeyStore ks = certificate.getCertificateKeystore();\n \n         /*\n@@ -219,6 +215,8 @@ public SSLContext createSSLContext(List<String> negotiableProtocols) throws NoSu\n         } else {\n             if (keyAlias != null && !ks.isKeyEntry(keyAlias)) {\n                 throw new IOException(sm.getString(\"jsse.alias_no_key_entry\", keyAlias));\n+            } else if (keyAlias == null) {\n+                keyAlias = \"tomcat\";\n             }\n \n             inMemoryKeyStore.setKeyEntry(keyAlias, ks.getKey(keyAlias, keyPassArray), keyPassArray,\n@@ -229,23 +227,7 @@ public SSLContext createSSLContext(List<String> negotiableProtocols) throws NoSu\n         KeyManagerFactory kmf = KeyManagerFactory.getInstance(algorithm);\n         kmf.init(inMemoryKeyStore, keyPassArray);\n \n-        kms = kmf.getKeyManagers();\n-        if (kms == null) {\n-            return kms;\n-        }\n-\n-        if (keyAlias != null) {\n-            String alias = keyAlias;\n-            // JKS keystores always convert the alias name to lower case\n-            if (\"JKS\".equals(keystoreType)) {\n-                alias = alias.toLowerCase(Locale.ENGLISH);\n-            }\n-            for(int i = 0; i < kms.length; i++) {\n-                kms[i] = new JSSEKeyManager((X509KeyManager)kms[i], alias);\n-            }\n-        }\n-\n-        return kms;\n+        return kmf.getKeyManagers();\n     }\n \n ",
                "deletions": 21
            },
            {
                "sha": "2e45aa3da0ea10db2b0d1b97b405ebce31a3ba30",
                "filename": "java/org/apache/tomcat/util/net/openssl/OpenSSLContext.java",
                "blob_url": "https://github.com/apache/tomcat/blob/31aab10ee126f6e365f58cce56acf5eb1974658b/java/org/apache/tomcat/util/net/openssl/OpenSSLContext.java",
                "raw_url": "https://github.com/apache/tomcat/raw/31aab10ee126f6e365f58cce56acf5eb1974658b/java/org/apache/tomcat/util/net/openssl/OpenSSLContext.java",
                "status": "modified",
                "changes": 6,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/openssl/OpenSSLContext.java?ref=31aab10ee126f6e365f58cce56acf5eb1974658b",
                "patch": "@@ -50,7 +50,6 @@\n import org.apache.tomcat.util.net.SSLHostConfig;\n import org.apache.tomcat.util.net.SSLHostConfigCertificate;\n import org.apache.tomcat.util.net.SSLHostConfigCertificate.Type;\n-import org.apache.tomcat.util.net.jsse.JSSEKeyManager;\n import org.apache.tomcat.util.net.openssl.ciphers.OpenSSLCipherConfigurationParser;\n import org.apache.tomcat.util.res.StringManager;\n \n@@ -364,11 +363,6 @@ private static String findAlias(X509KeyManager keyManager,\n     }\n \n     private static X509KeyManager chooseKeyManager(KeyManager[] managers) throws Exception {\n-        for (KeyManager manager : managers) {\n-            if (manager instanceof JSSEKeyManager) {\n-                return (JSSEKeyManager) manager;\n-            }\n-        }\n         for (KeyManager manager : managers) {\n             if (manager instanceof X509KeyManager) {\n                 return (X509KeyManager) manager;",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Add NPE protection\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1607931 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/4948428de536188a3e9b32908647926b422ad8b4",
        "parent": "https://github.com/apache/tomcat/commit/4c1d9100d8e63ddbc279070591910d327ef85a6b",
        "bug_id": "tomcat_100",
        "file": [
            {
                "sha": "298ba6c58d439e9f287e3f0fd096a1a71259f99f",
                "filename": "java/org/apache/catalina/core/ApplicationHttpRequest.java",
                "blob_url": "https://github.com/apache/tomcat/blob/4948428de536188a3e9b32908647926b422ad8b4/java/org/apache/catalina/core/ApplicationHttpRequest.java",
                "raw_url": "https://github.com/apache/tomcat/raw/4948428de536188a3e9b32908647926b422ad8b4/java/org/apache/catalina/core/ApplicationHttpRequest.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/ApplicationHttpRequest.java?ref=4948428de536188a3e9b32908647926b422ad8b4",
                "patch": "@@ -440,6 +440,10 @@ public String getPathInfo() {\n      */\n     @Override\n     public String getPathTranslated() {\n+        if (getPathInfo() == null) {\n+            return null;\n+        }\n+\n         return getServletContext().getRealPath(getPathInfo());\n     }\n ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1606147 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/b8326eb785b10f4dbba8e89a2a357b482b181ec9",
        "parent": "https://github.com/apache/tomcat/commit/835f697c4fe343c0ae60dcc9f908cfe421bbe86c",
        "bug_id": "tomcat_101",
        "file": [
            {
                "sha": "6d05b28ebe54370a7454f3fef48425de71b51bf8",
                "filename": "java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "blob_url": "https://github.com/apache/tomcat/blob/b8326eb785b10f4dbba8e89a2a357b482b181ec9/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "raw_url": "https://github.com/apache/tomcat/raw/b8326eb785b10f4dbba8e89a2a357b482b181ec9/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java?ref=b8326eb785b10f4dbba8e89a2a357b482b181ec9",
                "patch": "@@ -260,7 +260,9 @@ void startMessage(byte opCode, ByteBuffer payload, boolean last,\n         messageParts.add(new MessagePart(opCode, payload, last,\n                 new EndMessageHandler(this, handler)));\n \n-        messageParts = transformation.sendMessagePart(messageParts);\n+        if (transformation != null) {\n+            messageParts = transformation.sendMessagePart(messageParts);\n+        }\n \n         MessagePart mp = messageParts.remove(0);\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE when there is no request body\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1709843 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/8eedabba90bbb33806de2ac0d4ba0627328500c0",
        "parent": "https://github.com/apache/tomcat/commit/cb78de4caaead3d063689827824838709e56fcab",
        "bug_id": "tomcat_102",
        "file": [
            {
                "sha": "0e8f3d3600a700c2222aade20e87b0e736fb2c56",
                "filename": "java/org/apache/coyote/http2/Stream.java",
                "blob_url": "https://github.com/apache/tomcat/blob/8eedabba90bbb33806de2ac0d4ba0627328500c0/java/org/apache/coyote/http2/Stream.java",
                "raw_url": "https://github.com/apache/tomcat/raw/8eedabba90bbb33806de2ac0d4ba0627328500c0/java/org/apache/coyote/http2/Stream.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http2/Stream.java?ref=8eedabba90bbb33806de2ac0d4ba0627328500c0",
                "patch": "@@ -611,7 +611,7 @@ void registerReadInterest() {\n \n \n         synchronized boolean isRequestBodyFullyRead() {\n-            return inBuffer.position() == 0 && isInputFinished();\n+            return (inBuffer == null || inBuffer.position() == 0) && isInputFinished();\n         }\n \n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid possible NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1574167 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/8745b9677b78920dd24e8bc09a688effc816d582",
        "parent": "https://github.com/apache/tomcat/commit/1984c834e6b577a0a33a22da2d2c4e75f24c2005",
        "bug_id": "tomcat_103",
        "file": [
            {
                "sha": "296a7cb3b664bf8dba6b9d6725526462da6c0e48",
                "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
                "blob_url": "https://github.com/apache/tomcat/blob/8745b9677b78920dd24e8bc09a688effc816d582/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "raw_url": "https://github.com/apache/tomcat/raw/8745b9677b78920dd24e8bc09a688effc816d582/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "status": "modified",
                "changes": 10,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/CoyoteAdapter.java?ref=8745b9677b78920dd24e8bc09a688effc816d582",
                "patch": "@@ -426,10 +426,12 @@ public boolean asyncDispatch(org.apache.coyote.Request req,\n             if (!request.isAsync() && !comet) {\n                 request.finishRequest();\n                 response.finishResponse();\n-                request.getMappingData().context.logAccess(\n-                        request, response,\n-                        System.currentTimeMillis() - req.getStartTime(),\n-                        false);\n+                if (request.getMappingData().context != null) {\n+                    request.getMappingData().context.logAccess(\n+                            request, response,\n+                            System.currentTimeMillis() - req.getStartTime(),\n+                            false);\n+                }\n             }\n \n         } catch (IOException e) {",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1552804 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/83239f1f0af63c480bb168b29afe27ecaa3a4415",
        "parent": "https://github.com/apache/tomcat/commit/bdfb26a3586536c9921aa22d1bc183a3a07dc950",
        "bug_id": "tomcat_104",
        "file": [
            {
                "sha": "b2eca8fe7ffa9fa5fc9d4575a156893ae8f8cc38",
                "filename": "java/org/apache/coyote/Response.java",
                "blob_url": "https://github.com/apache/tomcat/blob/83239f1f0af63c480bb168b29afe27ecaa3a4415/java/org/apache/coyote/Response.java",
                "raw_url": "https://github.com/apache/tomcat/raw/83239f1f0af63c480bb168b29afe27ecaa3a4415/java/org/apache/coyote/Response.java",
                "status": "modified",
                "changes": 11,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/Response.java?ref=83239f1f0af63c480bb168b29afe27ecaa3a4415",
                "patch": "@@ -464,11 +464,14 @@ public void setContentType(String type) {\n \n         this.contentType = m.toStringNoCharset();\n \n-        String charsetValue = m.getCharset().trim();\n+        String charsetValue = m.getCharset();\n \n-        if (charsetValue != null && charsetValue.length() > 0) {\n-            charsetSet = true;\n-            this.characterEncoding = charsetValue;\n+        if (charsetValue != null) {\n+            charsetValue = charsetValue.trim();\n+            if (charsetValue.length() > 0) {\n+                charsetSet = true;\n+                this.characterEncoding = charsetValue;\n+            }\n         }\n     }\n ",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Protect against NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1543897 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/5543e768cdc219fd49bf1ed5f0a60c5b7b2186de",
        "parent": "https://github.com/apache/tomcat/commit/554fb1409b9c45b3378391d43374b4672b734a25",
        "bug_id": "tomcat_105",
        "file": [
            {
                "sha": "7bd1d95f4c3cea4439ada162e9113bd0d58314d9",
                "filename": "java/org/apache/coyote/AbstractProtocol.java",
                "blob_url": "https://github.com/apache/tomcat/blob/5543e768cdc219fd49bf1ed5f0a60c5b7b2186de/java/org/apache/coyote/AbstractProtocol.java",
                "raw_url": "https://github.com/apache/tomcat/raw/5543e768cdc219fd49bf1ed5f0a60c5b7b2186de/java/org/apache/coyote/AbstractProtocol.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/AbstractProtocol.java?ref=5543e768cdc219fd49bf1ed5f0a60c5b7b2186de",
                "patch": "@@ -590,8 +590,12 @@ public void recycle() {\n \n         public SocketState process(SocketWrapper<S> wrapper,\n                 SocketStatus status) {\n-            S socket = wrapper.getSocket();\n+            if (wrapper == null) {\n+                // Nothing to do. Socket has been closed.\n+                return SocketState.CLOSED;\n+            }\n \n+            S socket = wrapper.getSocket();\n             if (socket == null) {\n                 // Nothing to do. Socket has been closed.\n                 return SocketState.CLOSED;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1541963 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/3390623cf790669d78397ff8e9372eaab1a57b3b",
        "parent": "https://github.com/apache/tomcat/commit/98ddc9cf133dd48b9b7f45b644f91f549e623d72",
        "bug_id": "tomcat_106",
        "file": [
            {
                "sha": "be9940fbfb93231aa916d0724d1d690639192931",
                "filename": "java/org/apache/tomcat/util/scan/JarFileUrlNestedJar.java",
                "blob_url": "https://github.com/apache/tomcat/blob/3390623cf790669d78397ff8e9372eaab1a57b3b/java/org/apache/tomcat/util/scan/JarFileUrlNestedJar.java",
                "raw_url": "https://github.com/apache/tomcat/raw/3390623cf790669d78397ff8e9372eaab1a57b3b/java/org/apache/tomcat/util/scan/JarFileUrlNestedJar.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/scan/JarFileUrlNestedJar.java?ref=3390623cf790669d78397ff8e9372eaab1a57b3b",
                "patch": "@@ -93,6 +93,7 @@ public InputStream getInputStream(String name) throws IOException {\n \n     @Override\n     public long getLastModified(String name) throws IOException {\n+        reset();\n         JarEntry entry = jarInputStream.getNextJarEntry();\n         while (entry != null) {\n             if (name.equals(entry.getName())) {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix a NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1541958 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/bba23e1e457ad2f09ba1537914213061acc28d4a",
        "parent": "https://github.com/apache/tomcat/commit/14da0f21d48770ccf50efca2e252a30cbf2a595f",
        "bug_id": "tomcat_107",
        "file": [
            {
                "sha": "b59ed76762d0573754549f0e0b4b8b800f11600e",
                "filename": "java/org/apache/jasper/compiler/TagLibraryInfoImpl.java",
                "blob_url": "https://github.com/apache/tomcat/blob/bba23e1e457ad2f09ba1537914213061acc28d4a/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java",
                "raw_url": "https://github.com/apache/tomcat/raw/bba23e1e457ad2f09ba1537914213061acc28d4a/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java?ref=bba23e1e457ad2f09ba1537914213061acc28d4a",
                "patch": "@@ -446,6 +446,10 @@ else if (\"declare\".equals(tname)) {\n     private TagLibraryValidator createValidator(ValidatorXml validatorXml)\n             throws JasperException {\n \n+        if (validatorXml == null) {\n+            return null;\n+        }\n+\n         String validatorClass = validatorXml.getValidatorClass();\n \n         Map<String,Object> initParams = new Hashtable<>();",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1529793 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/18f631a2c5e6416099b8918fcb0bda4f5d15c15c",
        "parent": "https://github.com/apache/tomcat/commit/6176072587fbb3f91f4636f8614eae5e5e5d2522",
        "bug_id": "tomcat_108",
        "file": [
            {
                "sha": "a6f8f4f608b2d8499d76468adb632fadeefc783f",
                "filename": "java/org/apache/tomcat/util/net/AbstractEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/18f631a2c5e6416099b8918fcb0bda4f5d15c15c/java/org/apache/tomcat/util/net/AbstractEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/18f631a2c5e6416099b8918fcb0bda4f5d15c15c/java/org/apache/tomcat/util/net/AbstractEndpoint.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/AbstractEndpoint.java?ref=18f631a2c5e6416099b8918fcb0bda4f5d15c15c",
                "patch": "@@ -639,7 +639,7 @@ public abstract void processSocket(SocketWrapper<S> socketWrapper,\n     public void executeNonBlockingDispatches(SocketWrapper<S> socketWrapper) {\n         Iterator<DispatchType> dispatches = socketWrapper.getIteratorAndClearDispatches();\n \n-        while (dispatches.hasNext()) {\n+        while (dispatches != null && dispatches.hasNext()) {\n             DispatchType dispatchType = dispatches.next();\n             processSocket(socketWrapper, dispatchType.getSocketStatus(), false);\n         }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix potential NPE in QueryTimeoutInterceptor.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1692055 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/dfd69b3f189cfb1aabc79b1143d599f4ae899174",
        "parent": "https://github.com/apache/tomcat/commit/8cd35979a2a5e3526afd48bb1094e430fffb19ba",
        "bug_id": "tomcat_109",
        "file": [
            {
                "sha": "3d35cb6eb384218a86fdc7d5567d1e9c7bd1dd2d",
                "filename": "modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/QueryTimeoutInterceptor.java",
                "blob_url": "https://github.com/apache/tomcat/blob/dfd69b3f189cfb1aabc79b1143d599f4ae899174/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/QueryTimeoutInterceptor.java",
                "raw_url": "https://github.com/apache/tomcat/raw/dfd69b3f189cfb1aabc79b1143d599f4ae899174/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/QueryTimeoutInterceptor.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/QueryTimeoutInterceptor.java?ref=dfd69b3f189cfb1aabc79b1143d599f4ae899174",
                "patch": "@@ -28,12 +28,13 @@\n \n public class QueryTimeoutInterceptor extends AbstractCreateStatementInterceptor {\n     private static Log log = LogFactory.getLog(QueryTimeoutInterceptor.class);\n-    int timeout;\n+    int timeout = 1;\n \n     @Override\n     public void setProperties(Map<String,InterceptorProperty> properties) {\n         super.setProperties(properties);\n-        timeout = properties.get(\"queryTimeout\").getValueAsInt(-1);\n+        InterceptorProperty p = properties.get(\"queryTimeout\");\n+        if (p!=null) timeout = p.getValueAsInt(timeout);\n     }\n \n     @Override",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE on empty realm name \nPatch by fjodorver\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1689034 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/e0e6e1ed45c056f6a6daac6a4f80c214ca13caa4",
        "parent": "https://github.com/apache/tomcat/commit/de9fa0d56249d2cbc0da9478793355b82426d72f",
        "bug_id": "tomcat_110",
        "file": [
            {
                "sha": "6b157ac943919fe00b67cadd57f0e7da3270fb5a",
                "filename": "java/org/apache/catalina/authenticator/jaspic/provider/modules/TomcatAuthModule.java",
                "blob_url": "https://github.com/apache/tomcat/blob/e0e6e1ed45c056f6a6daac6a4f80c214ca13caa4/java/org/apache/catalina/authenticator/jaspic/provider/modules/TomcatAuthModule.java",
                "raw_url": "https://github.com/apache/tomcat/raw/e0e6e1ed45c056f6a6daac6a4f80c214ca13caa4/java/org/apache/catalina/authenticator/jaspic/provider/modules/TomcatAuthModule.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/authenticator/jaspic/provider/modules/TomcatAuthModule.java?ref=e0e6e1ed45c056f6a6daac6a4f80c214ca13caa4",
                "patch": "@@ -66,7 +66,7 @@ public final void initialize(MessagePolicy requestPolicy, MessagePolicy response\n \n \n     public String getRealmName() {\n-        return Optional.of(realmName).orElse(DEFAULT_REALM_NAME);\n+        return Optional.ofNullable(realmName).orElse(DEFAULT_REALM_NAME);\n     }\n \n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "FindBugs - avoid NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1434735 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/8353b96e2b252484389f3de74c2fc34c7f056e7d",
        "parent": "https://github.com/apache/tomcat/commit/1777669b9a0595dde2b0fae7a1b6f3669c2d53cc",
        "bug_id": "tomcat_111",
        "file": [
            {
                "sha": "f01730925feb2e1abce3670b8cc67e6fad74ad76",
                "filename": "test/org/apache/coyote/http11/upgrade/TestUpgrade.java",
                "blob_url": "https://github.com/apache/tomcat/blob/8353b96e2b252484389f3de74c2fc34c7f056e7d/test/org/apache/coyote/http11/upgrade/TestUpgrade.java",
                "raw_url": "https://github.com/apache/tomcat/raw/8353b96e2b252484389f3de74c2fc34c7f056e7d/test/org/apache/coyote/http11/upgrade/TestUpgrade.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/coyote/http11/upgrade/TestUpgrade.java?ref=8353b96e2b252484389f3de74c2fc34c7f056e7d",
                "patch": "@@ -132,12 +132,15 @@ private UpgradeConnection doUpgrade(\n \n         String status = reader.readLine();\n \n+        Assert.assertNotNull(status);\n         Assert.assertEquals(\"HTTP/1.1 101 Switching Protocols\",\n                 status.substring(0, 32));\n \n         // Skip the remaining response headers\n-        while (reader.readLine().length() > 0) {\n+        String line = reader.readLine();\n+        while (line != null && line.length() > 0) {\n             // Skip\n+            line = reader.readLine();\n         }\n \n         return new UpgradeConnection(writer, reader);",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1425143 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/1d27f522eeb2a4244345a8512f2f617c3a4fdfbe",
        "parent": "https://github.com/apache/tomcat/commit/7d81a83b4f83156b34a79b25226156dfa1708c0d",
        "bug_id": "tomcat_112",
        "file": [
            {
                "sha": "a5a5db95fbc44c4f588260fdb45a1da6d79ce35f",
                "filename": "java/org/apache/coyote/http11/upgrade/AbstractServletInputStream.java",
                "blob_url": "https://github.com/apache/tomcat/blob/1d27f522eeb2a4244345a8512f2f617c3a4fdfbe/java/org/apache/coyote/http11/upgrade/AbstractServletInputStream.java",
                "raw_url": "https://github.com/apache/tomcat/raw/1d27f522eeb2a4244345a8512f2f617c3a4fdfbe/java/org/apache/coyote/http11/upgrade/AbstractServletInputStream.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/upgrade/AbstractServletInputStream.java?ref=1d27f522eeb2a4244345a8512f2f617c3a4fdfbe",
                "patch": "@@ -62,6 +62,7 @@ public final boolean isReady() {\n             ready = Boolean.valueOf(doIsReady());\n         } catch (IOException e) {\n             listener.onError(e);\n+            ready = Boolean.FALSE;\n         }\n         return ready.booleanValue();\n     }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "More NPE avoidance\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1424173 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/74752e98aa22e870aa5c757ced538a8a59d3e38b",
        "parent": "https://github.com/apache/tomcat/commit/ec44e08c2722d1aaa872448b5e033f7f8a5317c0",
        "bug_id": "tomcat_113",
        "file": [
            {
                "sha": "f9abbdf6b8ef9369d575d3cdc40a752e46b3a296",
                "filename": "java/org/apache/tomcat/websocket/PojoMethodMapping.java",
                "blob_url": "https://github.com/apache/tomcat/blob/74752e98aa22e870aa5c757ced538a8a59d3e38b/java/org/apache/tomcat/websocket/PojoMethodMapping.java",
                "raw_url": "https://github.com/apache/tomcat/raw/74752e98aa22e870aa5c757ced538a8a59d3e38b/java/org/apache/tomcat/websocket/PojoMethodMapping.java",
                "status": "modified",
                "changes": 9,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/PojoMethodMapping.java?ref=74752e98aa22e870aa5c757ced538a8a59d3e38b",
                "patch": "@@ -19,6 +19,7 @@\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n import java.nio.ByteBuffer;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n@@ -155,6 +156,7 @@ public Method getOnError() {\n             }\n         }\n         if (!foundError) {\n+            // TODO i18n\n             throw new IllegalArgumentException();\n         }\n         return result;\n@@ -165,7 +167,12 @@ public Method getOnError() {\n             UriTemplate template, String pathInfo, Session session,\n             Throwable throwable) {\n         Object[] result = new Object[pathParams.length];\n-        Map<String,String> pathValues = template.match(pathInfo);\n+        Map<String,String> pathValues;\n+        if (template != null && pathInfo != null) {\n+            pathValues = template.match(pathInfo);\n+        } else {\n+            pathValues = Collections.EMPTY_MAP;\n+        }\n         for (int i = 0; i < pathParams.length; i++) {\n             Class<?> type = pathParams[i].getType();\n             if (type.equals(Session.class)) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE if connection has been abandoned.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1686974 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/f9e7d6e5fed07dd92c7fa9240fc41e905f3484e5",
        "parent": "https://github.com/apache/tomcat/commit/f784a13be22f3359c152990c8f79a97b9e770cd7",
        "bug_id": "tomcat_114",
        "file": [
            {
                "sha": "7f7a4021f1c3646d78e49f2fe923b7004f14b4ba",
                "filename": "modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java",
                "blob_url": "https://github.com/apache/tomcat/blob/f9e7d6e5fed07dd92c7fa9240fc41e905f3484e5/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java",
                "raw_url": "https://github.com/apache/tomcat/raw/f9e7d6e5fed07dd92c7fa9240fc41e905f3484e5/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java",
                "status": "modified",
                "changes": 27,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java?ref=f9e7d6e5fed07dd92c7fa9240fc41e905f3484e5",
                "patch": "@@ -102,9 +102,11 @@ protected String reportFailedQuery(String query, Object[] args, String name, lon\n             long now = System.currentTimeMillis();\n             long delta = now - start;\n             QueryStats qs = this.getQueryStats(sql);\n-            qs.failure(delta, now);\n-            if (isLogFailed() && log.isWarnEnabled()) {\n-                log.warn(\"Failed Query Report SQL=\"+sql+\"; time=\"+delta+\" ms;\");\n+            if (qs != null) {\n+                qs.failure(delta, now);\n+                if (isLogFailed() && log.isWarnEnabled()) {\n+                    log.warn(\"Failed Query Report SQL=\"+sql+\"; time=\"+delta+\" ms;\");\n+                }\n             }\n         }\n         return sql;\n@@ -115,7 +117,7 @@ protected String reportQuery(String query, Object[] args, final String name, lon\n         String sql = super.reportQuery(query, args, name, start, delta);\n         if (this.maxQueries > 0 ) {\n             QueryStats qs = this.getQueryStats(sql);\n-            qs.add(delta, start);\n+            if (qs != null) qs.add(delta, start);\n         }\n         return sql;\n     }\n@@ -125,9 +127,11 @@ protected String reportSlowQuery(String query, Object[] args, String name, long\n         String sql = super.reportSlowQuery(query, args, name, start, delta);\n         if (this.maxQueries > 0 ) {\n             QueryStats qs = this.getQueryStats(sql);\n-            qs.add(delta, start);\n-            if (isLogSlow() && log.isWarnEnabled()) {\n-                log.warn(\"Slow Query Report SQL=\"+sql+\"; time=\"+delta+\" ms;\");\n+            if (qs != null) {\n+                qs.add(delta, start);\n+                if (isLogSlow() && log.isWarnEnabled()) {\n+                    log.warn(\"Slow Query Report SQL=\"+sql+\"; time=\"+delta+\" ms;\");\n+                }\n             }\n         }\n         return sql;\n@@ -145,13 +149,13 @@ public void closeInvoked() {\n     @Override\n     public void prepareStatement(String sql, long time) {\n         QueryStats qs = getQueryStats(sql);\n-        qs.prepare(time);\n+        if (qs != null) qs.prepare(time);\n     }\n \n     @Override\n     public void prepareCall(String sql, long time) {\n         QueryStats qs = getQueryStats(sql);\n-        qs.prepare(time);\n+        if (qs != null) qs.prepare(time);\n     }\n \n     /**\n@@ -186,7 +190,10 @@ public void poolClosed(ConnectionPool pool) {\n     protected QueryStats getQueryStats(String sql) {\n         if (sql==null) sql = \"\";\n         ConcurrentHashMap<String,QueryStats> queries = SlowQueryReport.this.queries;\n-        if (queries==null) return null;\n+        if (queries==null) {\n+            if (log.isWarnEnabled()) log.warn(\"Connection has already been closed or abandoned\");\n+            return null;\n+        }\n         QueryStats qs = queries.get(sql);\n         if (qs == null) {\n             qs = new QueryStats(sql);",
                "deletions": 10
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1422334 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/220eae927148d5c526110bc6e058d2ac39b09e34",
        "parent": "https://github.com/apache/tomcat/commit/599fcdcdcdecc28021cb387a4c2ab976d5a80439",
        "bug_id": "tomcat_115",
        "file": [
            {
                "sha": "457730034d5f9326344d8de62d8dd7237a758a63",
                "filename": "java/org/apache/tomcat/websocket/PojoMethodMapping.java",
                "blob_url": "https://github.com/apache/tomcat/blob/220eae927148d5c526110bc6e058d2ac39b09e34/java/org/apache/tomcat/websocket/PojoMethodMapping.java",
                "raw_url": "https://github.com/apache/tomcat/raw/220eae927148d5c526110bc6e058d2ac39b09e34/java/org/apache/tomcat/websocket/PojoMethodMapping.java",
                "status": "modified",
                "changes": 9,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/PojoMethodMapping.java?ref=220eae927148d5c526110bc6e058d2ac39b09e34",
                "patch": "@@ -117,7 +117,7 @@ public Method getOnError() {\n             Session session) {\n         Set<MessageHandler> result = new HashSet<>();\n         for (MessageMethod messageMethod : onMessage) {\n-            result.add(messageMethod.getMessageHandler(pojo, pathInfo,session));\n+            result.add(messageMethod.getMessageHandler(pojo, pathInfo, session));\n         }\n         return result;\n     }\n@@ -331,7 +331,12 @@ public MessageHandler getMessageHandler(Object pojo, String pathInfo,\n                 Session session) {\n             Object[] params = new Object[m.getParameterTypes().length];\n \n-            Map<String,String> pathParams = template.match(pathInfo);\n+            Map<String,String> pathParams;\n+            if (template == null) {\n+                pathParams = new HashMap<>();\n+            } else {\n+                pathParams = template.match(pathInfo);\n+            }\n \n             for (Map.Entry<Integer,PathParam> entry :\n                     indexPathParams.entrySet()) {",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1393943 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/fba66301a7a058b5f78496a199569a08c720c533",
        "parent": "https://github.com/apache/tomcat/commit/17efe4ffef5afa1e40f668bddd0ddc9bbdc23b13",
        "bug_id": "tomcat_116",
        "file": [
            {
                "sha": "f3688efc8df14c85d285eca674f10c07d4de80e0",
                "filename": "java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java",
                "blob_url": "https://github.com/apache/tomcat/blob/fba66301a7a058b5f78496a199569a08c720c533/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java",
                "raw_url": "https://github.com/apache/tomcat/raw/fba66301a7a058b5f78496a199569a08c720c533/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java?ref=fba66301a7a058b5f78496a199569a08c720c533",
                "patch": "@@ -623,7 +623,10 @@ public void messageReceived(Serializable msg, Member sender) {\n             MapEntry<K,V> entry = innerMap.get(mapmsg.getKey());\n             if ( entry==null ) {\n                 entry = new MapEntry<>((K) mapmsg.getKey(), (V) mapmsg.getValue());\n-                entry = innerMap.putIfAbsent(entry.getKey(), entry);\n+                MapEntry<K,V> old = innerMap.putIfAbsent(entry.getKey(), entry);\n+                if (old != null) {\n+                    entry = old;\n+                }\n             }\n             entry.setProxy(true);\n             entry.setBackup(false);",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid unlikely NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1367330 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/a346ea8f295b0810698869ac1b340b4442a1fadd",
        "parent": "https://github.com/apache/tomcat/commit/9108f90462368e88ced5cd0773182e634d81a694",
        "bug_id": "tomcat_117",
        "file": [
            {
                "sha": "3dd168d5229dacaf2543a01c30cd8374c7ca56de",
                "filename": "java/org/apache/catalina/mapper/Mapper.java",
                "blob_url": "https://github.com/apache/tomcat/blob/a346ea8f295b0810698869ac1b340b4442a1fadd/java/org/apache/catalina/mapper/Mapper.java",
                "raw_url": "https://github.com/apache/tomcat/raw/a346ea8f295b0810698869ac1b340b4442a1fadd/java/org/apache/catalina/mapper/Mapper.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/mapper/Mapper.java?ref=a346ea8f295b0810698869ac1b340b4442a1fadd",
                "patch": "@@ -740,7 +740,7 @@ private final void internalMap(CharChunk host, CharChunk uri,\n         }\n \n         // Context mapping\n-        if (mappingData.context == null) {\n+        if (mappingData.context == null && contexts != null) {\n             int pos = find(contexts, uri);\n             if (pos == -1) {\n                 return;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPEs so tests fail rather than error\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1681773 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/9c4b70a19fa65a2491a05aebae41ec6f49331e8c",
        "parent": "https://github.com/apache/tomcat/commit/e80a91356b807c036763f8bc092bd02bceb1d311",
        "bug_id": "tomcat_118",
        "file": [
            {
                "sha": "f366475b3c6daf0d8a70ee6498759d05a28d91c1",
                "filename": "test/org/apache/catalina/startup/SimpleHttpClient.java",
                "blob_url": "https://github.com/apache/tomcat/blob/9c4b70a19fa65a2491a05aebae41ec6f49331e8c/test/org/apache/catalina/startup/SimpleHttpClient.java",
                "raw_url": "https://github.com/apache/tomcat/raw/9c4b70a19fa65a2491a05aebae41ec6f49331e8c/test/org/apache/catalina/startup/SimpleHttpClient.java",
                "status": "modified",
                "changes": 32,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/startup/SimpleHttpClient.java?ref=9c4b70a19fa65a2491a05aebae41ec6f49331e8c",
                "patch": "@@ -394,52 +394,60 @@ public void resetResponse() {\n         responseBody = null;\n     }\n \n+    public boolean responseLineStartsWith(String expected) {\n+        String line = getResponseLine();\n+        if (line == null) {\n+            return false;\n+        }\n+        return line.startsWith(expected);\n+    }\n+\n     public boolean isResponse100() {\n-        return getResponseLine().startsWith(INFO_100);\n+        return responseLineStartsWith(INFO_100);\n     }\n \n     public boolean isResponse200() {\n-        return getResponseLine().startsWith(OK_200);\n+        return responseLineStartsWith(OK_200);\n     }\n \n     public boolean isResponse302() {\n-        return getResponseLine().startsWith(REDIRECT_302);\n+        return responseLineStartsWith(REDIRECT_302);\n     }\n \n     public boolean isResponse303() {\n-        return getResponseLine().startsWith(REDIRECT_303);\n+        return responseLineStartsWith(REDIRECT_303);\n     }\n \n     public boolean isResponse400() {\n-        return getResponseLine().startsWith(FAIL_400);\n+        return responseLineStartsWith(FAIL_400);\n     }\n \n     public boolean isResponse404() {\n-        return getResponseLine().startsWith(FAIL_404);\n+        return responseLineStartsWith(FAIL_404);\n     }\n \n     public boolean isResponse408() {\n-        return getResponseLine().startsWith(TIMEOUT_408);\n+        return responseLineStartsWith(TIMEOUT_408);\n     }\n \n     public boolean isResponse413() {\n-        return getResponseLine().startsWith(FAIL_413);\n+        return responseLineStartsWith(FAIL_413);\n     }\n \n     public boolean isResponse417() {\n-        return getResponseLine().startsWith(FAIL_417);\n+        return responseLineStartsWith(FAIL_417);\n     }\n \n     public boolean isResponse50x() {\n-        return getResponseLine().startsWith(FAIL_50X);\n+        return responseLineStartsWith(FAIL_50X);\n     }\n \n     public boolean isResponse500() {\n-        return getResponseLine().startsWith(FAIL_500);\n+        return responseLineStartsWith(FAIL_500);\n     }\n \n     public boolean isResponse501() {\n-        return getResponseLine().startsWith(FAIL_501);\n+        return responseLineStartsWith(FAIL_501);\n     }\n \n     public Socket getSocket() {",
                "deletions": 12
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1226177 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/ab4121bb29fcb4bb659d8162ee80cf2638c140f2",
        "parent": "https://github.com/apache/tomcat/commit/bc8f9d64752894b06f2ead65aef1e3b0b6a5d410",
        "bug_id": "tomcat_119",
        "file": [
            {
                "sha": "dd1385d2bf0599b52eb5b89866a71c512a95ecbe",
                "filename": "java/org/apache/catalina/startup/Tomcat.java",
                "blob_url": "https://github.com/apache/tomcat/blob/ab4121bb29fcb4bb659d8162ee80cf2638c140f2/java/org/apache/catalina/startup/Tomcat.java",
                "raw_url": "https://github.com/apache/tomcat/raw/ab4121bb29fcb4bb659d8162ee80cf2638c140f2/java/org/apache/catalina/startup/Tomcat.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/startup/Tomcat.java?ref=ab4121bb29fcb4bb659d8162ee80cf2638c140f2",
                "patch": "@@ -668,7 +668,11 @@ public void setSilent(boolean silent) {\n \n     private void silence(Host host, String ctx) {\n         String base = \"org.apache.catalina.core.ContainerBase.[default].[\";\n-        base += host.getName();\n+        if (host == null) {\n+            base += getHost().getName();\n+        } else {\n+            base += host.getName();\n+        }\n         base += \"].[\";\n         base += ctx;\n         base += \"]\";",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1190279 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/f4878ef9e4360cc3e1f0b94cc2e6d110b8defb78",
        "parent": "https://github.com/apache/tomcat/commit/fa8b615205fec383a71fd3c6c6ec150ec2b3a353",
        "bug_id": "tomcat_120",
        "file": [
            {
                "sha": "6a941a289699e8bfb47f78102046084b509028af",
                "filename": "java/org/apache/catalina/core/ContainerBase.java",
                "blob_url": "https://github.com/apache/tomcat/blob/f4878ef9e4360cc3e1f0b94cc2e6d110b8defb78/java/org/apache/catalina/core/ContainerBase.java",
                "raw_url": "https://github.com/apache/tomcat/raw/f4878ef9e4360cc3e1f0b94cc2e6d110b8defb78/java/org/apache/catalina/core/ContainerBase.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/ContainerBase.java?ref=f4878ef9e4360cc3e1f0b94cc2e6d110b8defb78",
                "patch": "@@ -1190,7 +1190,10 @@ protected void destroyInternal() throws LifecycleException {\n             parent.removeChild(this);\n         }\n \n-        startStopExecutor.shutdownNow();\n+        // If init fails, this may be null\n+        if (startStopExecutor != null) {\n+            startStopExecutor.shutdownNow();\n+        }\n \n         super.destroyInternal();\n     }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE in TestSlowQueryReport test\n\nThe TestSlowQueryReport L107 calls \"new SlowQueryReportJmx().getObjectName(..)\",\nand thus properties field in new SlowQueryReportJmx is never set\nand accessing it caused NPE in getObjectName(..).\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1460313 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/5a9c013dcc27161e1d0c10b191511c1fcdcef46b",
        "parent": "https://github.com/apache/tomcat/commit/7cd7798122299b6911805b861bab814228c1431c",
        "bug_id": "tomcat_121",
        "file": [
            {
                "sha": "2630768bc3b2784f3831a028782cfccb3aee8a85",
                "filename": "modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReportJmx.java",
                "blob_url": "https://github.com/apache/tomcat/blob/5a9c013dcc27161e1d0c10b191511c1fcdcef46b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReportJmx.java",
                "raw_url": "https://github.com/apache/tomcat/raw/5a9c013dcc27161e1d0c10b191511c1fcdcef46b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReportJmx.java",
                "status": "modified",
                "changes": 7,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReportJmx.java?ref=5a9c013dcc27161e1d0c10b191511c1fcdcef46b",
                "patch": "@@ -270,9 +270,10 @@ protected void deregisterJmx() {\n \n \n     public ObjectName getObjectName(Class<?> clazz, String poolName) throws MalformedObjectNameException {\n-        ObjectName oname = null;\n-        if (getProperties().containsKey(objectNameAttribute)) {\n-            oname = new ObjectName(getProperties().get(objectNameAttribute).getValue());\n+        ObjectName oname;\n+        Map<String,InterceptorProperty> properties = getProperties();\n+        if (properties != null && properties.containsKey(objectNameAttribute)) {\n+            oname = new ObjectName(properties.get(objectNameAttribute).getValue());\n         } else {\n             oname = new ObjectName(ConnectionPool.POOL_JMX_TYPE_PREFIX+clazz.getName()+\",name=\" + poolName);\n         }",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1142430 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/20fc91ea3cc0ec44bd77fb00450281dd92092438",
        "parent": "https://github.com/apache/tomcat/commit/f4afa92d24dcc161dd8a970cc241aa093e0e234f",
        "bug_id": "tomcat_122",
        "file": [
            {
                "sha": "bf4268cbc3a5e2ea17d6b4044ba36aa9e7b7428b",
                "filename": "java/org/apache/catalina/valves/CrawlerSessionManagerValve.java",
                "blob_url": "https://github.com/apache/tomcat/blob/20fc91ea3cc0ec44bd77fb00450281dd92092438/java/org/apache/catalina/valves/CrawlerSessionManagerValve.java",
                "raw_url": "https://github.com/apache/tomcat/raw/20fc91ea3cc0ec44bd77fb00450281dd92092438/java/org/apache/catalina/valves/CrawlerSessionManagerValve.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/valves/CrawlerSessionManagerValve.java?ref=20fc91ea3cc0ec44bd77fb00450281dd92092438",
                "patch": "@@ -27,6 +27,7 @@\n import javax.servlet.http.HttpSessionBindingEvent;\n import javax.servlet.http.HttpSessionBindingListener;\n \n+import org.apache.catalina.LifecycleException;\n import org.apache.catalina.connector.Request;\n import org.apache.catalina.connector.Response;\n import org.apache.juli.logging.Log;\n@@ -113,6 +114,14 @@ public int getSessionInactiveInterval() {\n     }\n \n \n+    @Override\n+    protected void initInternal() throws LifecycleException {\n+        super.initInternal();\n+        \n+        uaPattern = Pattern.compile(crawlerUserAgents);\n+    }\n+\n+\n     @Override\n     public void invoke(Request request, Response response) throws IOException,\n             ServletException {",
                "deletions": 0
            },
            {
                "sha": "2e8efcb055ce5d635c37aa373d80e2129c267caf",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/20fc91ea3cc0ec44bd77fb00450281dd92092438/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/20fc91ea3cc0ec44bd77fb00450281dd92092438/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=20fc91ea3cc0ec44bd77fb00450281dd92092438",
                "patch": "@@ -54,6 +54,15 @@\n   issues to not \"pop up\" wrt. others).\n -->\n <section name=\"Tomcat 7.0.18 (markt)\">\n+  <subsection name=\"Catalina\">\n+    <changelog>\n+      <fix>\n+        Correct regression introduced in 7.0.17 that triggered an NPE if a\n+        CrawlerSessionManagerValve was used without setting crawlerUserAgents.\n+        (markt)\n+      </fix>\n+    </changelog>\n+  </subsection>\n   <subsection name=\"Other\">\n     <changelog>\n       <fix>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1133401 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/e2a10a73c32e98fa0db4e44bd753d1b5c0b442ca",
        "parent": "https://github.com/apache/tomcat/commit/9546590537dd5a92b6dcca9411ee21eb20bd78f7",
        "bug_id": "tomcat_123",
        "file": [
            {
                "sha": "7fef9b9690741c10c79096b58c266fcf310a4ebf",
                "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
                "blob_url": "https://github.com/apache/tomcat/blob/e2a10a73c32e98fa0db4e44bd753d1b5c0b442ca/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "raw_url": "https://github.com/apache/tomcat/raw/e2a10a73c32e98fa0db4e44bd753d1b5c0b442ca/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/CoyoteAdapter.java?ref=e2a10a73c32e98fa0db4e44bd753d1b5c0b442ca",
                "patch": "@@ -26,6 +26,7 @@\n import javax.servlet.SessionTrackingMode;\n \n import org.apache.catalina.Context;\n+import org.apache.catalina.Host;\n import org.apache.catalina.Wrapper;\n import org.apache.catalina.comet.CometEvent;\n import org.apache.catalina.comet.CometEvent.EventType;\n@@ -642,7 +643,11 @@ protected boolean postParseRequest(org.apache.coyote.Request req,\n                 res.setStatus(404);\n                 res.setMessage(\"Not found\");\n                 // No context, so use host\n-                request.getHost().logAccess(request, response, 0, true);\n+                Host host = request.getHost();\n+                // Make sure there is a host (might not be during shutdown)\n+                if (host != null) {\n+                    host.logAccess(request, response, 0, true);\n+                }\n                 return false;\n             }\n         ",
                "deletions": 1
            },
            {
                "sha": "34374e6a6470a8bd70256a1f9539d4a4a724121a",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/e2a10a73c32e98fa0db4e44bd753d1b5c0b442ca/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/e2a10a73c32e98fa0db4e44bd753d1b5c0b442ca/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=e2a10a73c32e98fa0db4e44bd753d1b5c0b442ca",
                "patch": "@@ -67,6 +67,10 @@\n         Enable remaining valves for Servlet 3 asynchronous processing support.\n         (markt)\n       </fix>\n+      <fix>\n+        Avoid possible NPE when logging requests received during embedded Tomcat\n+        shutdown. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1078004 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/1cc234b59319301bd423a3eff43ea418068c797f",
        "parent": "https://github.com/apache/tomcat/commit/ece65c1a428094b1c6c17de3d7593f64e1bb1286",
        "bug_id": "tomcat_124",
        "file": [
            {
                "sha": "92a768f8fecf6ca0ad6b8ba3796ea809df9843a5",
                "filename": "java/org/apache/catalina/authenticator/AuthenticatorBase.java",
                "blob_url": "https://github.com/apache/tomcat/blob/1cc234b59319301bd423a3eff43ea418068c797f/java/org/apache/catalina/authenticator/AuthenticatorBase.java",
                "raw_url": "https://github.com/apache/tomcat/raw/1cc234b59319301bd423a3eff43ea418068c797f/java/org/apache/catalina/authenticator/AuthenticatorBase.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/authenticator/AuthenticatorBase.java?ref=1cc234b59319301bd423a3eff43ea418068c797f",
                "patch": "@@ -481,8 +481,10 @@ public void invoke(Request request, Response response)\n \n         // The Servlet may specify security constraints through annotations.\n         // Ensure that they have been processed before constraints are checked\n-        Wrapper wrapper = (Wrapper) request.getMappingData().wrapper; \n-        wrapper.servletSecurityAnnotationScan();\n+        Wrapper wrapper = (Wrapper) request.getMappingData().wrapper;\n+        if (wrapper != null) {\n+            wrapper.servletSecurityAnnotationScan();\n+        }\n \n         Realm realm = this.context.getRealm();\n         // Is this request URI subject to a security constraint?",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@966570 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/a7943936df210a5ada2c07a4348951f4ccc1712d",
        "parent": "https://github.com/apache/tomcat/commit/2357fb52763c69aa8cf493e8af2f5a508b188409",
        "bug_id": "tomcat_125",
        "file": [
            {
                "sha": "a463f449cc05d4fd5c2c34c847e927cf771efd3d",
                "filename": "java/org/apache/catalina/core/StandardEngine.java",
                "blob_url": "https://github.com/apache/tomcat/blob/a7943936df210a5ada2c07a4348951f4ccc1712d/java/org/apache/catalina/core/StandardEngine.java",
                "raw_url": "https://github.com/apache/tomcat/raw/a7943936df210a5ada2c07a4348951f4ccc1712d/java/org/apache/catalina/core/StandardEngine.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/StandardEngine.java?ref=a7943936df210a5ada2c07a4348951f4ccc1712d",
                "patch": "@@ -317,7 +317,9 @@ public void logAccess(Request request, Response response, long time,\n                 if (defaultAccessLog == null) {\n                     // Try the ROOT context of default host\n                     Context context = (Context) host.findChild(\"\");\n-                    defaultAccessLog = context.getAccessLog();\n+                    if (context != null) {\n+                        defaultAccessLog = context.getAccessLog();\n+                    }\n \n                     if (defaultAccessLog == null) {\n                         defaultAccessLog = new NoopAccessLog();",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "NPE protection\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@943112 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/2a193ad82beeeb869c10bdb4b23cc9f271297a64",
        "parent": "https://github.com/apache/tomcat/commit/dbbd555a79dc06a767055ad219bbf33400710713",
        "bug_id": "tomcat_126",
        "file": [
            {
                "sha": "c9d61b81d657e0f1cd9c6a88581e1dc680ab9e82",
                "filename": "java/org/apache/catalina/core/ContainerBase.java",
                "blob_url": "https://github.com/apache/tomcat/blob/2a193ad82beeeb869c10bdb4b23cc9f271297a64/java/org/apache/catalina/core/ContainerBase.java",
                "raw_url": "https://github.com/apache/tomcat/raw/2a193ad82beeeb869c10bdb4b23cc9f271297a64/java/org/apache/catalina/core/ContainerBase.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/ContainerBase.java?ref=2a193ad82beeeb869c10bdb4b23cc9f271297a64",
                "patch": "@@ -899,6 +899,10 @@ public void invoke(Request request, Response response)\n      */\n     public void removeChild(Container child) {\n \n+        if (child == null) {\n+            return;\n+        }\n+        \n         synchronized(children) {\n             if (children.get(child.getName()) == null)\n                 return;",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@907497 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/bdd3f33b708c247b110cbb3d483659cfe7892570",
        "parent": "https://github.com/apache/tomcat/commit/8cf599cf1ffbf56756fdfa2e1beb52eeda6cbda7",
        "bug_id": "tomcat_127",
        "file": [
            {
                "sha": "8b3b528294f3709a01f4af847ab9ea3163999ecf",
                "filename": "java/org/apache/catalina/deploy/WebXml.java",
                "blob_url": "https://github.com/apache/tomcat/blob/bdd3f33b708c247b110cbb3d483659cfe7892570/java/org/apache/catalina/deploy/WebXml.java",
                "raw_url": "https://github.com/apache/tomcat/raw/bdd3f33b708c247b110cbb3d483659cfe7892570/java/org/apache/catalina/deploy/WebXml.java",
                "status": "modified",
                "changes": 12,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/deploy/WebXml.java?ref=bdd3f33b708c247b110cbb3d483659cfe7892570",
                "patch": "@@ -1934,7 +1934,9 @@ private static boolean mergeServlet(ServletDef src, ServletDef dest,\n         }\n         \n         if (dest.getLoadOnStartup() == null) {\n-            dest.setLoadOnStartup(src.getLoadOnStartup().toString());\n+            if (src.getLoadOnStartup() != null) {\n+                dest.setLoadOnStartup(src.getLoadOnStartup().toString());\n+            }\n         } else if (src.getLoadOnStartup() != null) {\n             if (failOnConflict &&\n                     !src.getLoadOnStartup().equals(dest.getLoadOnStartup())) {\n@@ -1943,7 +1945,9 @@ private static boolean mergeServlet(ServletDef src, ServletDef dest,\n         }\n         \n         if (dest.getEnabled() == null) {\n-            dest.setEnabled(src.getEnabled().toString());\n+            if (src.getEnabled() != null) {\n+                dest.setEnabled(src.getEnabled().toString());\n+            }\n         } else if (src.getEnabled() != null) {\n             if (failOnConflict &&\n                     !src.getEnabled().equals(dest.getEnabled())) {\n@@ -1971,7 +1975,9 @@ private static boolean mergeServlet(ServletDef src, ServletDef dest,\n         }\n         \n         if (dest.getAsyncSupported() == null) {\n-            dest.setAsyncSupported(src.getAsyncSupported().toString());\n+            if (src.getAsyncSupported() != null) {\n+                dest.setAsyncSupported(src.getAsyncSupported().toString());\n+            }\n         } else if (src.getAsyncSupported() != null) {\n             if (failOnConflict &&\n                     !src.getAsyncSupported().equals(dest.getAsyncSupported())) {",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@882004 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/71776754130aab126f540c862face67a6afe6ac0",
        "parent": "https://github.com/apache/tomcat/commit/242b6a3d6ee95370dd91a49fb81969ca6dfc7deb",
        "bug_id": "tomcat_128",
        "file": [
            {
                "sha": "397e1bbd767f588e54a0a6a3b74a6799b5758673",
                "filename": "java/org/apache/jasper/compiler/JspRuntimeContext.java",
                "blob_url": "https://github.com/apache/tomcat/blob/71776754130aab126f540c862face67a6afe6ac0/java/org/apache/jasper/compiler/JspRuntimeContext.java",
                "raw_url": "https://github.com/apache/tomcat/raw/71776754130aab126f540c862face67a6afe6ac0/java/org/apache/jasper/compiler/JspRuntimeContext.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/JspRuntimeContext.java?ref=71776754130aab126f540c862face67a6afe6ac0",
                "patch": "@@ -64,7 +64,7 @@\n     /*\n      * Counts how many times the webapp's JSPs have been reloaded.\n      */\n-    private AtomicInteger jspReloadCount;\n+    private AtomicInteger jspReloadCount = new AtomicInteger(0);\n \n     /**\n      * Preload classes required at runtime by a JSP servlet so that",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix unlikely NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@763190 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/62482a9ca5b419b08709fcf8a82753f6f8ed522c",
        "parent": "https://github.com/apache/tomcat/commit/23c47da32762578e916511aa78660d0c063622aa",
        "bug_id": "tomcat_129",
        "file": [
            {
                "sha": "39d623b908a9c0177cd01c7af98189d8a861f015",
                "filename": "java/org/apache/catalina/manager/ManagerServlet.java",
                "blob_url": "https://github.com/apache/tomcat/blob/62482a9ca5b419b08709fcf8a82753f6f8ed522c/java/org/apache/catalina/manager/ManagerServlet.java",
                "raw_url": "https://github.com/apache/tomcat/raw/62482a9ca5b419b08709fcf8a82753f6f8ed522c/java/org/apache/catalina/manager/ManagerServlet.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/manager/ManagerServlet.java?ref=62482a9ca5b419b08709fcf8a82753f6f8ed522c",
                "patch": "@@ -834,10 +834,10 @@ protected void list(PrintWriter writer) {\n         Container[] contexts = host.findChildren();\n         for (int i = 0; i < contexts.length; i++) {\n             Context context = (Context) contexts[i];\n-            String displayPath = context.getPath();\n-            if( displayPath.equals(\"\") )\n-                displayPath = \"/\";\n             if (context != null ) {\n+                String displayPath = context.getPath();\n+                if( displayPath.equals(\"\") )\n+                    displayPath = \"/\";\n                 if (context.getAvailable()) {\n                     writer.println(sm.getString(\"managerServlet.listitem\",\n                                                 displayPath,",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@747834 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/c2d9e7a99b26b0873cce9ab78c68e074403ed3b0",
        "parent": "https://github.com/apache/tomcat/commit/a6ed74abcc8dfe1759a27bfda8b9cee6b99ee649",
        "bug_id": "tomcat_130",
        "file": [
            {
                "sha": "c6ec6e93aed329c3441d60d1da00f22e085265db",
                "filename": "java/org/apache/catalina/realm/DataSourceRealm.java",
                "blob_url": "https://github.com/apache/tomcat/blob/c2d9e7a99b26b0873cce9ab78c68e074403ed3b0/java/org/apache/catalina/realm/DataSourceRealm.java",
                "raw_url": "https://github.com/apache/tomcat/raw/c2d9e7a99b26b0873cce9ab78c68e074403ed3b0/java/org/apache/catalina/realm/DataSourceRealm.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/realm/DataSourceRealm.java?ref=c2d9e7a99b26b0873cce9ab78c68e074403ed3b0",
                "patch": "@@ -270,8 +270,9 @@ public void setUserTable( String userTable ) {\n      */\n     public Principal authenticate(String username, String credentials) {\n     \t\n-    \t// No user - can't possibly authenticate, don't bother the database then\n-    \tif (username == null) {\n+    \t// No user or no credentials\n+        // Can't possibly authenticate, don't bother the database then\n+    \tif (username == null || credentials == null) {\n     \t\treturn null;\n     \t}\n         ",
                "deletions": 2
            },
            {
                "sha": "05fd1fa888a0d373cabfd89824428bdd60a7b59a",
                "filename": "java/org/apache/catalina/realm/JDBCRealm.java",
                "blob_url": "https://github.com/apache/tomcat/blob/c2d9e7a99b26b0873cce9ab78c68e074403ed3b0/java/org/apache/catalina/realm/JDBCRealm.java",
                "raw_url": "https://github.com/apache/tomcat/raw/c2d9e7a99b26b0873cce9ab78c68e074403ed3b0/java/org/apache/catalina/realm/JDBCRealm.java",
                "status": "modified",
                "changes": 7,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/realm/JDBCRealm.java?ref=c2d9e7a99b26b0873cce9ab78c68e074403ed3b0",
                "patch": "@@ -393,9 +393,10 @@ public synchronized Principal authenticate(Connection dbConnection,\n                                                String username,\n                                                String credentials) {\n \n-        // No user - can't possibly authenticate\n-        if (username == null) {\n-            return (null);\n+        // No user or no credentials\n+        // Can't possibly authenticate, don't bother the database then\n+        if (username == null || credentials == null) {\n+            return null;\n         }\n \n         // Look up the user's credentials",
                "deletions": 3
            },
            {
                "sha": "343a8d45d4fc0d1f108722d3b9d0385e48b81f78",
                "filename": "java/org/apache/catalina/realm/MemoryRealm.java",
                "blob_url": "https://github.com/apache/tomcat/blob/c2d9e7a99b26b0873cce9ab78c68e074403ed3b0/java/org/apache/catalina/realm/MemoryRealm.java",
                "raw_url": "https://github.com/apache/tomcat/raw/c2d9e7a99b26b0873cce9ab78c68e074403ed3b0/java/org/apache/catalina/realm/MemoryRealm.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/realm/MemoryRealm.java?ref=c2d9e7a99b26b0873cce9ab78c68e074403ed3b0",
                "patch": "@@ -147,7 +147,7 @@ public Principal authenticate(String username, String credentials) {\n         GenericPrincipal principal = principals.get(username);\n \n         boolean validated = false;\n-        if (principal != null) {\n+        if (principal != null && credentials != null) {\n             if (hasMessageDigest()) {\n                 // Hex hashes should be compared case-insensitive\n                 validated = (digest(credentials)",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@720173 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/16cbaf1048c8005f7c6feed69c58fe6b726dd773",
        "parent": "https://github.com/apache/tomcat/commit/8d5db6f51c02bc59ad44267c5915b4a3b4b8b638",
        "bug_id": "tomcat_131",
        "file": [
            {
                "sha": "818b594403bf59594b839616208b0207bd5a4d53",
                "filename": "java/org/apache/coyote/http11/Http11NioProcessor.java",
                "blob_url": "https://github.com/apache/tomcat/blob/16cbaf1048c8005f7c6feed69c58fe6b726dd773/java/org/apache/coyote/http11/Http11NioProcessor.java",
                "raw_url": "https://github.com/apache/tomcat/raw/16cbaf1048c8005f7c6feed69c58fe6b726dd773/java/org/apache/coyote/http11/Http11NioProcessor.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/Http11NioProcessor.java?ref=16cbaf1048c8005f7c6feed69c58fe6b726dd773",
                "patch": "@@ -1208,6 +1208,7 @@ public void action(ActionCode actionCode, Object param) {\n         } else if (actionCode == ActionCode.ACTION_COMET_END) {\n             comet = false;\n         }  else if (actionCode == ActionCode.ACTION_COMET_CLOSE) {\n+            if (socket==null || socket.getAttachment(false)==null) return;\n             NioEndpoint.KeyAttachment attach = (NioEndpoint.KeyAttachment)socket.getAttachment(false);\n             attach.setCometOps(NioEndpoint.OP_CALLBACK);\n             //notify poller if not on a tomcat thread\n@@ -1216,6 +1217,7 @@ public void action(ActionCode actionCode, Object param) {\n                 socket.getPoller().cometInterest(socket);\n         } else if (actionCode == ActionCode.ACTION_COMET_SETTIMEOUT) {\n             if (param==null) return;\n+            if (socket==null || socket.getAttachment(false)==null) return;\n             NioEndpoint.KeyAttachment attach = (NioEndpoint.KeyAttachment)socket.getAttachment(false);\n             long timeout = ((Long)param).longValue();\n             //if we are not piggy backing on a worker thread, set the timeout",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "fix NPE risk\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@719096 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/1d4e201c05fa67748862ca1ad834122b2131f715",
        "parent": "https://github.com/apache/tomcat/commit/e378b56f35100932c1a7dd96084efdd2ddaf3ff0",
        "bug_id": "tomcat_132",
        "file": [
            {
                "sha": "ce5941a82853b8720fb3095cecee7724fbd05d16",
                "filename": "java/org/apache/tomcat/util/net/NioEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/1d4e201c05fa67748862ca1ad834122b2131f715/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/1d4e201c05fa67748862ca1ad834122b2131f715/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "status": "modified",
                "changes": 16,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/NioEndpoint.java?ref=1d4e201c05fa67748862ca1ad834122b2131f715",
                "patch": "@@ -1429,7 +1429,8 @@ public void cancelledKey(SelectionKey key, SocketStatus status, boolean dispatch\n                         processSocket(ka.getChannel(), status, false); //don't dispatch if the lines below are cancelling the key\n                     }                    \n                 }\n-                handler.release(ka.getChannel());\n+                \n+                if (ka!=null) handler.release(ka.getChannel());\n                 if (key.isValid()) key.cancel();\n                 if (key.channel().isOpen()) try {key.channel().close();}catch (Exception ignore){}\n                 try {ka.channel.close(true);}catch (Exception ignore){}\n@@ -1610,13 +1611,26 @@ public boolean processSendfile(SelectionKey sk, KeyAttachment attachment, boolea\n                     sd.length -= written;\n                 }\n                 if ( sd.length <= 0 ) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Send file complete for:\"+sd.fileName);\n+                    }\n                     attachment.setSendfileData(null);\n                     if ( sd.keepAlive ) {\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(\"Connection is keep alive, registering back for OP_READ\");\n+                        }\n                         if (reg) reg(sk,attachment,SelectionKey.OP_READ);\n                     } else {\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(\"Send file connection is being closed\");\n+                        }\n                         cancelledKey(sk,SocketStatus.STOP,false);\n                     }\n                 } else if ( attachment.interestOps() == 0 && reg ) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"OP_WRITE for sendilfe:\"+sd.fileName);\n+                    }\n+\n                     reg(sk,attachment,SelectionKey.OP_WRITE);\n                 }\n             }catch ( IOException x ) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE in tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1667630 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/e4ea10ad1f0940141081802922bd5653089b8f9c",
        "parent": "https://github.com/apache/tomcat/commit/dca86400d08568dcfbb339162f61e0e3a88501c8",
        "bug_id": "tomcat_133",
        "file": [
            {
                "sha": "68a4d59f6a01ecfedf70001601dba09ef5817253",
                "filename": "test/org/apache/catalina/authenticator/TesterDigestAuthenticatorPerformance.java",
                "blob_url": "https://github.com/apache/tomcat/blob/e4ea10ad1f0940141081802922bd5653089b8f9c/test/org/apache/catalina/authenticator/TesterDigestAuthenticatorPerformance.java",
                "raw_url": "https://github.com/apache/tomcat/raw/e4ea10ad1f0940141081802922bd5653089b8f9c/test/org/apache/catalina/authenticator/TesterDigestAuthenticatorPerformance.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/authenticator/TesterDigestAuthenticatorPerformance.java?ref=e4ea10ad1f0940141081802922bd5653089b8f9c",
                "patch": "@@ -266,5 +266,10 @@ public String getQueryString() {\n         public String getRequestURI() {\n             return CONTEXT_PATH + URI;\n         }\n+\n+        @Override\n+        public org.apache.coyote.Request getCoyoteRequest() {\n+            return new org.apache.coyote.Request();\n+        }\n     }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Follow-up to r1665736\nFix another NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1665803 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/cbca32c512779961cd8ec6875092f425df6c648a",
        "parent": "https://github.com/apache/tomcat/commit/38c633c583713097142ef3ea8d0792921fee1364",
        "bug_id": "tomcat_134",
        "file": [
            {
                "sha": "9cc606ab2196c605639e2c40520b7fff5302d924",
                "filename": "java/org/apache/tomcat/util/net/NioEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/cbca32c512779961cd8ec6875092f425df6c648a/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/cbca32c512779961cd8ec6875092f425df6c648a/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/NioEndpoint.java?ref=cbca32c512779961cd8ec6875092f425df6c648a",
                "patch": "@@ -892,6 +892,7 @@ public boolean events() {\n         public void register(final NioChannel socket) {\n             socket.setPoller(this);\n             NioSocketWrapper ka = new NioSocketWrapper(socket, NioEndpoint.this);\n+            ka.setPoller(this);\n             ka.setReadTimeout(getSocketProperties().getSoTimeout());\n             ka.setWriteTimeout(getSocketProperties().getSoTimeout());\n             ka.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Follow-up to r1665736\nFix NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1665781 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/38c633c583713097142ef3ea8d0792921fee1364",
        "parent": "https://github.com/apache/tomcat/commit/e956096ee46c8249382017b965cd8534d1aa81cd",
        "bug_id": "tomcat_135",
        "file": [
            {
                "sha": "17f4351f462a0dd9a2d5fcf81b13cb32d2a2cd73",
                "filename": "java/org/apache/tomcat/util/net/Nio2Endpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/38c633c583713097142ef3ea8d0792921fee1364/java/org/apache/tomcat/util/net/Nio2Endpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/38c633c583713097142ef3ea8d0792921fee1364/java/org/apache/tomcat/util/net/Nio2Endpoint.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/Nio2Endpoint.java?ref=38c633c583713097142ef3ea8d0792921fee1364",
                "patch": "@@ -757,6 +757,7 @@ public void failed(Throwable exc, SocketWrapperBase<Nio2Channel> attachment) {\n \n         public Nio2SocketWrapper(Nio2Channel channel, Nio2Endpoint endpoint) {\n             super(channel, endpoint);\n+            socketBufferHandler = channel.getBufHandler();\n \n             this.readCompletionHandler = new CompletionHandler<Integer, SocketWrapperBase<Nio2Channel>>() {\n                 @Override",
                "deletions": 0
            },
            {
                "sha": "58068a9158c64611f2da721c2a2d40b2958cbe57",
                "filename": "java/org/apache/tomcat/util/net/NioEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/38c633c583713097142ef3ea8d0792921fee1364/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/38c633c583713097142ef3ea8d0792921fee1364/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/NioEndpoint.java?ref=38c633c583713097142ef3ea8d0792921fee1364",
                "patch": "@@ -1295,6 +1295,7 @@ protected void timeout(int keyCount, boolean hasEvents) {\n         public NioSocketWrapper(NioChannel channel, NioEndpoint endpoint) {\n             super(channel, endpoint);\n             pool = endpoint.getSelectorPool();\n+            socketBufferHandler = channel.getBufHandler();\n         }\n \n         public Poller getPoller() { return poller;}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE and fix JAR names.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1662843 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/ad6421b4539277569ee426c40681a8529846d76a",
        "parent": "https://github.com/apache/tomcat/commit/ac10a5867cf1b9f942c835954449c19a94ac0dc5",
        "bug_id": "tomcat_136",
        "file": [
            {
                "sha": "c3c818f95f7a0cb3c48a2a7f49e09ff603893010",
                "filename": "test/org/apache/catalina/core/TestStandardContextAliases.java",
                "blob_url": "https://github.com/apache/tomcat/blob/ad6421b4539277569ee426c40681a8529846d76a/test/org/apache/catalina/core/TestStandardContextAliases.java",
                "raw_url": "https://github.com/apache/tomcat/raw/ad6421b4539277569ee426c40681a8529846d76a/test/org/apache/catalina/core/TestStandardContextAliases.java",
                "status": "modified",
                "changes": 11,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/core/TestStandardContextAliases.java?ref=ad6421b4539277569ee426c40681a8529846d76a",
                "patch": "@@ -63,6 +63,9 @@ public void testDirContextAliases() throws Exception {\n         ByteChunk res = getUrl(\"http://localhost:\" + getPort() + \"/\");\n \n         String result = res.toString();\n+        if (result == null) {\n+            result = \"\";\n+        }\n \n         assertTrue(result.indexOf(\"00-PASS\") > -1);\n         assertTrue(result.indexOf(\"01-PASS\") > -1);\n@@ -86,12 +89,12 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n             ServletContext context = getServletContext();\n \n             // Check resources individually\n-            URL url = context.getResource(\"/WEB-INF/lib/jstl.jar\");\n+            URL url = context.getResource(\"/WEB-INF/lib/taglibs-standard-spec-1.2.3.jar\");\n             if (url != null) {\n                 resp.getWriter().write(\"00-PASS\\n\");\n             }\n \n-            url = context.getResource(\"/WEB-INF/lib/standard.jar\");\n+            url = context.getResource(\"/WEB-INF/lib/taglibs-standard-impl-1.2.3.jar\");\n             if (url != null) {\n                 resp.getWriter().write(\"01-PASS\\n\");\n             }\n@@ -102,10 +105,10 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n                 return;\n             }\n \n-            if (!libs.contains(\"/WEB-INF/lib/jstl.jar\")) {\n+            if (!libs.contains(\"/WEB-INF/lib/taglibs-standard-spec-1.2.3.jar\")) {\n                 return;\n             }\n-            if (!libs.contains(\"/WEB-INF/lib/standard.jar\")) {\n+            if (!libs.contains(\"/WEB-INF/lib/taglibs-standard-impl-1.2.3.jar\")) {\n                 return;\n             }\n ",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Guard against a NPE I see in the test CI logs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1659299 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/7f6aef1e7b550c9c6fe81adb1b36855d3b0a7896",
        "parent": "https://github.com/apache/tomcat/commit/e685933f250f397d5349b1f2c2fec9083005a3ae",
        "bug_id": "tomcat_137",
        "file": [
            {
                "sha": "ac67d333e755841bb2cdc19e98fd8bb9d7af6ff7",
                "filename": "java/org/apache/coyote/http11/Http11Nio2Protocol.java",
                "blob_url": "https://github.com/apache/tomcat/blob/7f6aef1e7b550c9c6fe81adb1b36855d3b0a7896/java/org/apache/coyote/http11/Http11Nio2Protocol.java",
                "raw_url": "https://github.com/apache/tomcat/raw/7f6aef1e7b550c9c6fe81adb1b36855d3b0a7896/java/org/apache/coyote/http11/Http11Nio2Protocol.java",
                "status": "modified",
                "changes": 11,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/Http11Nio2Protocol.java?ref=7f6aef1e7b550c9c6fe81adb1b36855d3b0a7896",
                "patch": "@@ -110,10 +110,13 @@ protected Log getLog() {\n          */\n         @Override\n         public void release(SocketWrapperBase<Nio2Channel> socket) {\n-            Processor processor = connections.remove(socket.getSocket());\n-            if (processor != null) {\n-                processor.recycle();\n-                recycledProcessors.push(processor);\n+            Nio2Channel channel = socket.getSocket();\n+            if (channel != null) {\n+                Processor processor = connections.remove(channel);\n+                if (processor != null) {\n+                    processor.recycle();\n+                    recycledProcessors.push(processor);\n+                }\n             }\n         }\n ",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix another NPE observed in logs during unit test runs\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1655812 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/a8955911dbb8d86e378c1480c9d1233e3115a4fd",
        "parent": "https://github.com/apache/tomcat/commit/c9db3fe106fa8a97a6ba5e0c9a3b51103e6f8529",
        "bug_id": "tomcat_138",
        "file": [
            {
                "sha": "a56cdc28b3930212ab8c2dd381414f9d4cef3747",
                "filename": "java/org/apache/tomcat/util/net/SocketWrapperBase.java",
                "blob_url": "https://github.com/apache/tomcat/blob/a8955911dbb8d86e378c1480c9d1233e3115a4fd/java/org/apache/tomcat/util/net/SocketWrapperBase.java",
                "raw_url": "https://github.com/apache/tomcat/raw/a8955911dbb8d86e378c1480c9d1233e3115a4fd/java/org/apache/tomcat/util/net/SocketWrapperBase.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/SocketWrapperBase.java?ref=a8955911dbb8d86e378c1480c9d1233e3115a4fd",
                "patch": "@@ -27,9 +27,13 @@\n import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;\n \n import org.apache.tomcat.util.buf.ByteBufferHolder;\n+import org.apache.tomcat.util.res.StringManager;\n \n public abstract class SocketWrapperBase<E> {\n \n+    protected static final StringManager sm = StringManager.getManager(\n+            SocketWrapperBase.class.getPackage().getName());\n+\n     private volatile E socket;\n     private final AbstractEndpoint<E> endpoint;\n \n@@ -284,6 +288,9 @@ public boolean isReadyForWrite() {\n \n \n     public boolean canWrite() {\n+        if (socketBufferHandler == null) {\n+            throw new IllegalStateException(sm.getString(\"socket.closed\"));\n+        }\n         return socketBufferHandler.isWriteBufferWritable() && bufferedWrites.size() == 0;\n     }\n ",
                "deletions": 0
            },
            {
                "sha": "70deb3ba9b3681f59004a29dff28d9b72bb9009f",
                "filename": "java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java",
                "blob_url": "https://github.com/apache/tomcat/blob/a8955911dbb8d86e378c1480c9d1233e3115a4fd/java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java",
                "raw_url": "https://github.com/apache/tomcat/raw/a8955911dbb8d86e378c1480c9d1233e3115a4fd/java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java?ref=a8955911dbb8d86e378c1480c9d1233e3115a4fd",
                "patch": "@@ -115,9 +115,9 @@ public void onWritePossible(boolean useDispatch) {\n                     break;\n                 }\n             }\n-        } catch (IOException ioe) {\n+        } catch (IOException | IllegalStateException e) {\n             wsWriteTimeout.unregister(this);\n-            clearHandler(ioe, useDispatch);\n+            clearHandler(e, useDispatch);\n             close();\n         }\n ",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix an NPE appearing in the unit test logs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1655811 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/c9db3fe106fa8a97a6ba5e0c9a3b51103e6f8529",
        "parent": "https://github.com/apache/tomcat/commit/8073f373bf4af516d574cc5422c518801649d928",
        "bug_id": "tomcat_139",
        "file": [
            {
                "sha": "2d06d3d4b3c5fe6c51e022c4de6bf1d539253961",
                "filename": "java/org/apache/tomcat/util/net/LocalStrings.properties",
                "blob_url": "https://github.com/apache/tomcat/blob/c9db3fe106fa8a97a6ba5e0c9a3b51103e6f8529/java/org/apache/tomcat/util/net/LocalStrings.properties",
                "raw_url": "https://github.com/apache/tomcat/raw/c9db3fe106fa8a97a6ba5e0c9a3b51103e6f8529/java/org/apache/tomcat/util/net/LocalStrings.properties",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/LocalStrings.properties?ref=c9db3fe106fa8a97a6ba5e0c9a3b51103e6f8529",
                "patch": "@@ -91,6 +91,8 @@ channel.nio.ssl.incompleteHandshake=Handshake incomplete, you must complete hand\n channel.nio.ssl.closing=Channel is in closing state.\n channel.nio.ssl.invalidBuffer=You can only read using the application read buffer provided by the handler.\n \n+socket.closed=The socket associated with this connection has been closed.\n+\n socket.apr.clientAbort=The client aborted the connection.\n socket.apr.read.error=Unexpected error [{0}] reading data from the APR/native socket [{1}] with wrapper [{2}].\n socket.apr.read.sslGeneralError=An APR general error was returned by the SSL read operation on APR/native socket [{0}] with wrapper [{1}]. It will be treated as EAGAIN and the socket returned to the poller.",
                "deletions": 0
            },
            {
                "sha": "9d2ca7f697d9645d883c403528f4c22d6438e793",
                "filename": "java/org/apache/tomcat/util/net/Nio2Endpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/c9db3fe106fa8a97a6ba5e0c9a3b51103e6f8529/java/org/apache/tomcat/util/net/Nio2Endpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/c9db3fe106fa8a97a6ba5e0c9a3b51103e6f8529/java/org/apache/tomcat/util/net/Nio2Endpoint.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/Nio2Endpoint.java?ref=c9db3fe106fa8a97a6ba5e0c9a3b51103e6f8529",
                "patch": "@@ -1002,6 +1002,9 @@ public int read(boolean block, byte[] b, int off, int len) throws IOException {\n                 }\n             }\n \n+            if (socketBufferHandler == null) {\n+                throw new IOException(sm.getString(\"socket.closed\"));\n+            }\n             socketBufferHandler.configureReadBufferForRead();\n \n             int remaining = socketBufferHandler.getReadBuffer().remaining();",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE in CoyoteAdapter when postParseRequest() call fails.\n\nThat was caused by mappingData.context being null.\nThis NPE occurence in 7.0.7 was reported on the users list.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1067072 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/8d0f87b8b1050a7d3957ac8d12fef527393383fc",
        "parent": "https://github.com/apache/tomcat/commit/56c576fcfb35de2d2ea79b15187e131a243b6606",
        "bug_id": "tomcat_140",
        "file": [
            {
                "sha": "153788f91449be1349457c63c925f30a8e21ee6b",
                "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
                "blob_url": "https://github.com/apache/tomcat/blob/8d0f87b8b1050a7d3957ac8d12fef527393383fc/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "raw_url": "https://github.com/apache/tomcat/raw/8d0f87b8b1050a7d3957ac8d12fef527393383fc/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "status": "modified",
                "changes": 14,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/CoyoteAdapter.java?ref=8d0f87b8b1050a7d3957ac8d12fef527393383fc",
                "patch": "@@ -375,7 +375,8 @@ public void service(org.apache.coyote.Request req,\n             // Parse and set Catalina and configuration specific \n             // request parameters\n             req.getRequestProcessor().setWorkerThreadName(Thread.currentThread().getName());\n-            if (postParseRequest(req, request, res, response)) {\n+            boolean postParseSuccess = postParseRequest(req, request, res, response);\n+            if (postParseSuccess) {\n                 //check valves if we support async\n                 request.setAsyncSupported(connector.getService().getContainer().getPipeline().isAsyncSupported());\n                 // Calling the container\n@@ -406,9 +407,14 @@ public void service(org.apache.coyote.Request req,\n                 async = true;\n             } else if (!comet) {\n                 response.finishResponse();\n-                ((Context) request.getMappingData().context).logAccess(request,\n-                        response,\n-                        System.currentTimeMillis() - req.getStartTime(), false);\n+                if (postParseSuccess) {\n+                    // Log only if processing was invoked.\n+                    // If postParseRequest() failed, it has already logged it.\n+                    ((Context) request.getMappingData().context).logAccess(\n+                            request, response,\n+                            System.currentTimeMillis() - req.getStartTime(),\n+                            false);\n+                }\n                 req.action(ActionCode.POST_REQUEST , null);\n             }\n ",
                "deletions": 4
            },
            {
                "sha": "c0f994d8d5e44c83186a8e2b3015e847b37fb76b",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/8d0f87b8b1050a7d3957ac8d12fef527393383fc/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/8d0f87b8b1050a7d3957ac8d12fef527393383fc/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=8d0f87b8b1050a7d3957ac8d12fef527393383fc",
                "patch": "@@ -41,6 +41,15 @@\n <!--\n   General, Catalina, Coyote, Jasper, Cluster, Web applications, Extras, Other\n -->\n+<section name=\"Tomcat 7.0.8 (markt)\">\n+  <subsection name=\"Catalina\">\n+    <changelog>\n+      <fix>\n+        Fix NPE in CoyoteAdapter when postParseRequest() call fails. (kkolinko)\n+      </fix>\n+    </changelog>\n+  </subsection>\n+</section>\n <section name=\"Tomcat 7.0.7 (markt)\">\n   <subsection name=\"Catalina\">\n     <changelog>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE that was swallowed.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1650535 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/a5f134cd40bc8e759ffc32184e6ec918ab2d0c84",
        "parent": "https://github.com/apache/tomcat/commit/0b21a8a02fa58b05a57f89ad0dd159354952936c",
        "bug_id": "tomcat_141",
        "file": [
            {
                "sha": "610376091eb48e191fd08cb17d735423d83351b0",
                "filename": "java/org/apache/tomcat/util/net/Nio2Endpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/a5f134cd40bc8e759ffc32184e6ec918ab2d0c84/java/org/apache/tomcat/util/net/Nio2Endpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/a5f134cd40bc8e759ffc32184e6ec918ab2d0c84/java/org/apache/tomcat/util/net/Nio2Endpoint.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/Nio2Endpoint.java?ref=a5f134cd40bc8e759ffc32184e6ec918ab2d0c84",
                "patch": "@@ -911,7 +911,7 @@ public void reset(Nio2Channel channel, long soTimeout) {\n             super.reset(channel, soTimeout);\n             upgradeInit = false;\n             sendfileData = null;\n-            socketWriteBuffer = channel.getBufHandler().getWriteBuffer();\n+            socketWriteBuffer = (channel == null) ? null : channel.getBufHandler().getWriteBuffer();\n         }\n \n         @Override",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Ensure NPE will not be thrown during deployment when scanning jar files without MANIFEST.MF file.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1744194 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/f53bc9960826d97996abb75ba9a529275a605695",
        "parent": "https://github.com/apache/tomcat/commit/4df28619d4b4a9cb598121ddc63602175fff60ea",
        "bug_id": "tomcat_142",
        "file": [
            {
                "sha": "834e510c5ed74f0f6b6960f5744941839d2bfc6a",
                "filename": "java/org/apache/tomcat/util/scan/StandardJarScanner.java",
                "blob_url": "https://github.com/apache/tomcat/blob/f53bc9960826d97996abb75ba9a529275a605695/java/org/apache/tomcat/util/scan/StandardJarScanner.java",
                "raw_url": "https://github.com/apache/tomcat/raw/f53bc9960826d97996abb75ba9a529275a605695/java/org/apache/tomcat/util/scan/StandardJarScanner.java",
                "status": "modified",
                "changes": 64,
                "additions": 33,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/scan/StandardJarScanner.java?ref=f53bc9960826d97996abb75ba9a529275a605695",
                "patch": "@@ -370,40 +370,42 @@ private static void processManifest(Jar jar, boolean isWebapp,\n         }\n \n         Manifest manifest = jar.getManifest();\n-        Attributes attributes = manifest.getMainAttributes();\n-        String classPathAttribute = attributes.getValue(\"Class-Path\");\n-        if (classPathAttribute == null) {\n-            return;\n-        }\n-        String[] classPathEntries = classPathAttribute.split(\" \");\n-        for (String classPathEntry : classPathEntries) {\n-            classPathEntry = classPathEntry.trim();\n-            if (classPathEntry.length() == 0) {\n-                continue;\n+        if (manifest != null) {\n+            Attributes attributes = manifest.getMainAttributes();\n+            String classPathAttribute = attributes.getValue(\"Class-Path\");\n+            if (classPathAttribute == null) {\n+                return;\n             }\n-            URL jarURL = jar.getJarFileURL();\n-            URI jarURI;\n-            try {\n-                jarURI = jarURL.toURI();\n-            } catch (URISyntaxException e) {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(sm.getString(\"jarScan.invalidUri\", jarURL));\n+            String[] classPathEntries = classPathAttribute.split(\" \");\n+            for (String classPathEntry : classPathEntries) {\n+                classPathEntry = classPathEntry.trim();\n+                if (classPathEntry.length() == 0) {\n+                    continue;\n+                }\n+                URL jarURL = jar.getJarFileURL();\n+                URI jarURI;\n+                try {\n+                    jarURI = jarURL.toURI();\n+                } catch (URISyntaxException e) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(sm.getString(\"jarScan.invalidUri\", jarURL));\n+                    }\n+                    continue;\n                 }\n-                continue;\n+                /*\n+                 * Note: Resolving the relative URLs from the manifest has the\n+                 *       potential to introduce security concerns. However, since\n+                 *       only JARs provided by the container and NOT those provided\n+                 *       by web applications are processed, there should be no\n+                 *       issues.\n+                 *       If this feature is ever extended to include JARs provided\n+                 *       by web applications, checks should be added to ensure that\n+                 *       any relative URL does not step outside the web application.\n+                 */\n+                URI classPathEntryURI = jarURI.resolve(classPathEntry);\n+                URL classPathEntryURL = classPathEntryURI.toURL();\n+                classPathUrlsToProcess.add(classPathEntryURL);\n             }\n-            /*\n-             * Note: Resolving the relative URLs from the manifest has the\n-             *       potential to introduce security concerns. However, since\n-             *       only JARs provided by the container and NOT those provided\n-             *       by web applications are processed, there should be no\n-             *       issues.\n-             *       If this feature is ever extended to include JARs provided\n-             *       by web applications, checks should be added to ensure that\n-             *       any relative URL does not step outside the web application.\n-             */\n-            URI classPathEntryURI = jarURI.resolve(classPathEntry);\n-            URL classPathEntryURL = classPathEntryURI.toURL();\n-            classPathUrlsToProcess.add(classPathEntryURL);\n         }\n     }\n ",
                "deletions": 31
            },
            {
                "sha": "5058a8c7b75b1351641f27ae4b3080f2d054fcec",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/f53bc9960826d97996abb75ba9a529275a605695/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/f53bc9960826d97996abb75ba9a529275a605695/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=f53bc9960826d97996abb75ba9a529275a605695",
                "patch": "@@ -53,6 +53,10 @@\n         around. Therefore, start logging RMI Target related memory leaks on web\n         application stop. (markt)\n       </fix>\n+      <fix>\n+        Ensure NPE will not be thrown during deployment when scanning jar files\n+        without MANIFEST.MF file. (violetagg)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=57855\nExplicitly handle the case where a MethodExpression is invoked with null or the wrong number of parameters. Rather than failing with ArrayIndexOutOfBoundsException or NullPointerException throw an IllegalArgumentException with a useful error message.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1676231 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/62268605c5dcda064fb69ea587e4d0fbfce7f8fc",
        "parent": "https://github.com/apache/tomcat/commit/ea094b25e08f5cf24e81850542145f442a7da28f",
        "bug_id": "tomcat_143",
        "file": [
            {
                "sha": "f3d87089a630e3d8ad8e85cb821429b123d29731",
                "filename": "java/org/apache/el/Messages.properties",
                "blob_url": "https://github.com/apache/tomcat/blob/62268605c5dcda064fb69ea587e4d0fbfce7f8fc/java/org/apache/el/Messages.properties",
                "raw_url": "https://github.com/apache/tomcat/raw/62268605c5dcda064fb69ea587e4d0fbfce7f8fc/java/org/apache/el/Messages.properties",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/el/Messages.properties?ref=62268605c5dcda064fb69ea587e4d0fbfce7f8fc",
                "patch": "@@ -21,6 +21,8 @@ error.unreachable.base=Target Unreachable, identifier ''{0}'' resolved to null\n error.unreachable.property=Target Unreachable, ''{0}'' returned null\n error.resolver.unhandled=ELResolver did not handle type: {0} with property of ''{1}''\n error.resolver.unhandled.null=ELResolver cannot handle a null base Object with identifier ''{0}''\n+error.invoke.wrongParams=The method [{0}] was called with [{1}] parameter(s) when it expected [{2}]\n+error.invoke.tooFewParams=The method [{0}] was called with [{1}] parameter(s) when it expected at least [{2}]\n \n # ValueExpressionLiteral\n error.value.literal.write=ValueExpression is a literal and not writable: {0}",
                "deletions": 0
            },
            {
                "sha": "f20b170200e3a1f2a086ebf5d986f8e66be43a39",
                "filename": "java/org/apache/el/parser/AstValue.java",
                "blob_url": "https://github.com/apache/tomcat/blob/62268605c5dcda064fb69ea587e4d0fbfce7f8fc/java/org/apache/el/parser/AstValue.java",
                "raw_url": "https://github.com/apache/tomcat/raw/62268605c5dcda064fb69ea587e4d0fbfce7f8fc/java/org/apache/el/parser/AstValue.java",
                "status": "modified",
                "changes": 20,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/el/parser/AstValue.java?ref=62268605c5dcda064fb69ea587e4d0fbfce7f8fc",
                "patch": "@@ -237,7 +237,7 @@ public Object invoke(EvaluationContext ctx,\n         }\n         m = ReflectionUtil.getMethod(ctx, t.base, t.property, types, values);\n \n-        // Handle varArgs and any co-ercion required\n+        // Handle varArgs and any coercion required\n         values = convertArgs(ctx, values, m);\n \n         Object result = null;\n@@ -268,6 +268,24 @@ public Object invoke(EvaluationContext ctx,\n \n         int paramCount = types.length;\n \n+        if (paramCount > 0 && src == null ||\n+                m.isVarArgs() && src.length < paramCount ||\n+                !m.isVarArgs() && src.length != paramCount) {\n+            String inputParamCount = null;\n+            if (src != null) {\n+                inputParamCount = Integer.toString(src.length);\n+            }\n+            String msg;\n+            if (m.isVarArgs()) {\n+                msg = MessageFactory.get(\"error.invoke.tooFewParams\",\n+                        m.getName(), inputParamCount, Integer.toString(paramCount));\n+            } else {\n+                msg = MessageFactory.get(\"error.invoke.wrongParams\",\n+                        m.getName(), inputParamCount, Integer.toString(paramCount));\n+            }\n+            throw new IllegalArgumentException(msg);\n+        }\n+\n         Object[] dest = new Object[paramCount];\n \n         for (int i = 0; i < paramCount - 1; i++) {",
                "deletions": 1
            },
            {
                "sha": "1ddea069db1e1c93866cc17bf603e3e1851fcf6e",
                "filename": "test/org/apache/el/TestMethodExpressionImpl.java",
                "blob_url": "https://github.com/apache/tomcat/blob/62268605c5dcda064fb69ea587e4d0fbfce7f8fc/test/org/apache/el/TestMethodExpressionImpl.java",
                "raw_url": "https://github.com/apache/tomcat/raw/62268605c5dcda064fb69ea587e4d0fbfce7f8fc/test/org/apache/el/TestMethodExpressionImpl.java",
                "status": "modified",
                "changes": 16,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/el/TestMethodExpressionImpl.java?ref=62268605c5dcda064fb69ea587e4d0fbfce7f8fc",
                "patch": "@@ -482,4 +482,20 @@ public void testBug56797b() {\n         Object r = me.invoke(context, null);\n         assertEquals(\"AA2Hello World!\", r.toString());\n     }\n+\n+\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testBug57855a() {\n+        MethodExpression me = factory.createMethodExpression(context,\n+                \"${beanAA.echo2}\", null , new Class[]{String.class});\n+        me.invoke(context, new Object[0]);\n+    }\n+\n+\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testBug57855b() {\n+        MethodExpression me = factory.createMethodExpression(context,\n+                \"${beanAA.echo2}\", null , new Class[]{String.class});\n+        me.invoke(context, null);\n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=60911\nEnsure NPE will not be thrown when looking for SSL session ID. Based on a pacth by Didier Gutacker.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1788741 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/3792c68ced15ce707f112a5044a78dc7880fb7ba",
        "parent": "https://github.com/apache/tomcat/commit/ed9c8b665ae52176cd415228a972f4381a68e411",
        "bug_id": "tomcat_144",
        "file": [
            {
                "sha": "c0d73ffa382a00b82b6c5c0a52873f2a8a2af550",
                "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
                "blob_url": "https://github.com/apache/tomcat/blob/3792c68ced15ce707f112a5044a78dc7880fb7ba/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "raw_url": "https://github.com/apache/tomcat/raw/3792c68ced15ce707f112a5044a78dc7880fb7ba/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/CoyoteAdapter.java?ref=3792c68ced15ce707f112a5044a78dc7880fb7ba",
                "patch": "@@ -980,9 +980,11 @@ protected void parseSessionSslId(Request request) {\n                 SSL_ONLY.equals(request.getServletContext()\n                         .getEffectiveSessionTrackingModes()) &&\n                         request.connector.secure) {\n-            request.setRequestedSessionId(\n-                    request.getAttribute(SSLSupport.SESSION_ID_KEY).toString());\n-            request.setRequestedSessionSSL(true);\n+            String sessionId = (String) request.getAttribute(SSLSupport.SESSION_ID_KEY);\n+            if (sessionId != null) {\n+                request.setRequestedSessionId(sessionId.toString());\n+                request.setRequestedSessionSSL(true);\n+            }\n         }\n     }\n ",
                "deletions": 3
            },
            {
                "sha": "5b7691398572b75121bd8b86eb8319f6b0c7cc16",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/3792c68ced15ce707f112a5044a78dc7880fb7ba/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/3792c68ced15ce707f112a5044a78dc7880fb7ba/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=3792c68ced15ce707f112a5044a78dc7880fb7ba",
                "patch": "@@ -93,6 +93,10 @@\n         single utility class and update the code to use the new utility class.\n         (markt)\n       </scode>\n+      <fix>\n+        <bug>60911</bug>: Ensure NPE will not be thrown when looking for SSL\n+        session ID. Based on a pacth by Didier Gutacker. (violetagg)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix potential NPE that depends on the setting order of attributes of static member when using the static cluster.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1738706 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/0494551d90abfb9d4c644c320e135f61dcc608ba",
        "parent": "https://github.com/apache/tomcat/commit/be7e11ef3e7d0cac6daee6852c01596b248f4f1d",
        "bug_id": "tomcat_145",
        "file": [
            {
                "sha": "df96c28c4f675d9ab81fad4e37d8faa018e74f99",
                "filename": "java/org/apache/catalina/tribes/membership/MemberImpl.java",
                "blob_url": "https://github.com/apache/tomcat/blob/0494551d90abfb9d4c644c320e135f61dcc608ba/java/org/apache/catalina/tribes/membership/MemberImpl.java",
                "raw_url": "https://github.com/apache/tomcat/raw/0494551d90abfb9d4c644c320e135f61dcc608ba/java/org/apache/catalina/tribes/membership/MemberImpl.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/tribes/membership/MemberImpl.java?ref=0494551d90abfb9d4c644c320e135f61dcc608ba",
                "patch": "@@ -48,7 +48,7 @@\n     /**\n      * The listen host for this member\n      */\n-    protected volatile byte[] host;\n+    protected volatile byte[] host = new byte[0];\n     protected transient volatile String hostname;\n     /**\n      * The tcp listen port for this member",
                "deletions": 1
            },
            {
                "sha": "b7cb179c0ca682ec6d499645f6929ddc844e720b",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/0494551d90abfb9d4c644c320e135f61dcc608ba/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/0494551d90abfb9d4c644c320e135f61dcc608ba/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=0494551d90abfb9d4c644c320e135f61dcc608ba",
                "patch": "@@ -210,6 +210,10 @@\n       <add>\n         Add the flag indicating that member is a localMember. (kfujino)\n       </add>\n+      <fix>\n+        Fix potential NPE that depends on the setting order of attributes of\n+        static member when using the static cluster. (kfujino)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Other\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE when using JspC\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1620822 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/7af96a21715e6fc86c3727ed665c68d45240144d",
        "parent": "https://github.com/apache/tomcat/commit/40378221b1824612beccb4940fd9d2315b275fbb",
        "bug_id": "tomcat_146",
        "file": [
            {
                "sha": "6d2182273ea420c83c5977ecf890f681c346a046",
                "filename": "java/org/apache/jasper/compiler/Compiler.java",
                "blob_url": "https://github.com/apache/tomcat/blob/7af96a21715e6fc86c3727ed665c68d45240144d/java/org/apache/jasper/compiler/Compiler.java",
                "raw_url": "https://github.com/apache/tomcat/raw/7af96a21715e6fc86c3727ed665c68d45240144d/java/org/apache/jasper/compiler/Compiler.java",
                "status": "modified",
                "changes": 10,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/Compiler.java?ref=7af96a21715e6fc86c3727ed665c68d45240144d",
                "patch": "@@ -255,10 +255,12 @@ public void init(JspCompilationContext ctxt, JspServletWrapper jsw) {\n             // to be GC'd and save memory.\n             ctxt.setWriter(null);\n \n-            // Need to know if the JSP is an error page at runtime to determine\n-            // which HTTP methods are permitted. Error pages permit any. Normal\n-            // pages only permit GET, POST or HEAD.\n-            jsw.setErrorPage(pageInfo.isErrorPage());\n+            if (jsw != null) {\n+                // Need to know if the JSP is an error page at runtime to determine\n+                // which HTTP methods are permitted. Error pages permit any. Normal\n+                // pages only permit GET, POST or HEAD.\n+                jsw.setErrorPage(pageInfo.isErrorPage());\n+            }\n \n             if (log.isDebugEnabled()) {\n                 t4 = System.currentTimeMillis();",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix possible NPE highlighted by Eclipse\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1616759 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/e63770752f7a4269cc133be2b497a6bf5d8a6c2e",
        "parent": "https://github.com/apache/tomcat/commit/634f2ac68abb37a7d9dba7b06bd82084d03ad399",
        "bug_id": "tomcat_147",
        "file": [
            {
                "sha": "f67a9c27c98d159f77dfc5c6e6d1911bd6b55af8",
                "filename": "modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ClassLoaderUtil.java",
                "blob_url": "https://github.com/apache/tomcat/blob/e63770752f7a4269cc133be2b497a6bf5d8a6c2e/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ClassLoaderUtil.java",
                "raw_url": "https://github.com/apache/tomcat/raw/e63770752f7a4269cc133be2b497a6bf5d8a6c2e/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ClassLoaderUtil.java",
                "status": "modified",
                "changes": 16,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ClassLoaderUtil.java?ref=e63770752f7a4269cc133be2b497a6bf5d8a6c2e",
                "patch": "@@ -22,11 +22,11 @@\n \n public class ClassLoaderUtil {\n     private static final Log log = LogFactory.getLog(ClassLoaderUtil.class);\n-    \n-    private static final boolean onlyAttemptFirstLoader = \n-        Boolean.getBoolean(System.getProperty(\"org.apache.tomcat.jdbc.pool.onlyAttemptCurrentClassLoader\", \"false\")); \n-    \n-    public static Class loadClass(String className, ClassLoader... classLoaders) throws ClassNotFoundException {\n+\n+    private static final boolean onlyAttemptFirstLoader =\n+        Boolean.getBoolean(System.getProperty(\"org.apache.tomcat.jdbc.pool.onlyAttemptCurrentClassLoader\", \"false\"));\n+\n+    public static Class<?> loadClass(String className, ClassLoader... classLoaders) throws ClassNotFoundException {\n         ClassNotFoundException last = null;\n         StringBuffer errorMsg = null;\n         for (ClassLoader cl : classLoaders) {\n@@ -47,7 +47,11 @@ public static Class loadClass(String className, ClassLoader... classLoaders) thr\n                     errorMsg.append(\";\");\n                 }\n                 errorMsg.append(\"ClassLoader:\");\n-                errorMsg.append(cl.toString());\n+                if (cl == null) {\n+                    errorMsg.append(\"null\");\n+                } else {\n+                    errorMsg.append(cl.toString());\n+                }\n             }\n             if (onlyAttemptFirstLoader) {\n                 break;",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE when a proxy node failed to retrieve a backup entry.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1736129 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/bd646ed6c0667949945f011540a3df8573192d15",
        "parent": "https://github.com/apache/tomcat/commit/5eed276e0d283f5c3d34b4a456654e3280f944b0",
        "bug_id": "tomcat_148",
        "file": [
            {
                "sha": "a0a3a293eb651ba78eae182ba8a1ab7ef4294aa8",
                "filename": "java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java",
                "blob_url": "https://github.com/apache/tomcat/blob/bd646ed6c0667949945f011540a3df8573192d15/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java",
                "raw_url": "https://github.com/apache/tomcat/raw/bd646ed6c0667949945f011540a3df8573192d15/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java?ref=bd646ed6c0667949945f011540a3df8573192d15",
                "patch": "@@ -940,7 +940,7 @@ public V get(Object key) {\n                     msg = new MapMessage(getMapContextName(), MapMessage.MSG_RETRIEVE_BACKUP, false,\n                                          (Serializable) key, null, null, null,null);\n                     Response[] resp = getRpcChannel().send(entry.getBackupNodes(),msg, RpcChannel.FIRST_REPLY, Channel.SEND_OPTIONS_DEFAULT, getRpcTimeout());\n-                    if (resp == null || resp.length == 0) {\n+                    if (resp == null || resp.length == 0 || resp[0].getMessage() == null) {\n                         //no responses\n                         log.warn(sm.getString(\"abstractReplicatedMap.unable.retrieve\", key));\n                         return null;",
                "deletions": 1
            },
            {
                "sha": "e7301c379a90bda76f5b4cc4114e272620b9d07a",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/bd646ed6c0667949945f011540a3df8573192d15/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/bd646ed6c0667949945f011540a3df8573192d15/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=bd646ed6c0667949945f011540a3df8573192d15",
                "patch": "@@ -75,6 +75,13 @@\n       </fix>\n     </changelog>\n   </subsection>\n+  <subsection name=\"Tribes\">\n+    <changelog>\n+      <fix>\n+        Avoid NPE when a proxy node failed to retrieve a backup entry. (kfujino)\n+      </fix>\n+    </changelog>\n+  </subsection>\n </section>\n <section name=\"Tomcat 9.0.0.M4\" rtext=\"2016-03-16\">\n   <subsection name=\"Catalina\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "kkolinko review: Extend NPE protection\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1608301 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/1401ea1592b4b7a864d3cc2b92ff70c2ee4bd8d4",
        "parent": "https://github.com/apache/tomcat/commit/0bbbee02b1159715b32fba02ac52e77d1431c651",
        "bug_id": "tomcat_149",
        "file": [
            {
                "sha": "c0fabf5e6d7464d10b8dbb03243243b1d304bb3b",
                "filename": "java/org/apache/catalina/core/ApplicationHttpRequest.java",
                "blob_url": "https://github.com/apache/tomcat/blob/1401ea1592b4b7a864d3cc2b92ff70c2ee4bd8d4/java/org/apache/catalina/core/ApplicationHttpRequest.java",
                "raw_url": "https://github.com/apache/tomcat/raw/1401ea1592b4b7a864d3cc2b92ff70c2ee4bd8d4/java/org/apache/catalina/core/ApplicationHttpRequest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/ApplicationHttpRequest.java?ref=1401ea1592b4b7a864d3cc2b92ff70c2ee4bd8d4",
                "patch": "@@ -449,7 +449,7 @@ public String getPathInfo() {\n      */\n     @Override\n     public String getPathTranslated() {\n-        if (getPathInfo() == null) {\n+        if (getPathInfo() == null || getServletContext() == null) {\n             return null;\n         }\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix root cause of NPE when using WebSocket clients.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1606653 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/4ad2bffd5e922156182b1eebe775c1e1019a4595",
        "parent": "https://github.com/apache/tomcat/commit/a135d07df4215861b262bde5aa199a694e745543",
        "bug_id": "tomcat_150",
        "file": [
            {
                "sha": "41cf71287fe18937d559e046ea7a06e1a0d5ead2",
                "filename": "java/org/apache/tomcat/websocket/WsFrameClient.java",
                "blob_url": "https://github.com/apache/tomcat/blob/4ad2bffd5e922156182b1eebe775c1e1019a4595/java/org/apache/tomcat/websocket/WsFrameClient.java",
                "raw_url": "https://github.com/apache/tomcat/raw/4ad2bffd5e922156182b1eebe775c1e1019a4595/java/org/apache/tomcat/websocket/WsFrameClient.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/WsFrameClient.java?ref=4ad2bffd5e922156182b1eebe775c1e1019a4595",
                "patch": "@@ -37,7 +37,10 @@ public WsFrameClient(ByteBuffer response, AsyncChannelWrapper channel,\n         this.response = response;\n         this.channel = channel;\n         this.handler = new WsFrameClientCompletionHandler();\n+    }\n+\n \n+    void startInputProcessing() {\n         try {\n             processSocketRead();\n         } catch (IOException e) {",
                "deletions": 0
            },
            {
                "sha": "e4a16e04bad51ca96b4ea09611ea255bb279576c",
                "filename": "java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "blob_url": "https://github.com/apache/tomcat/blob/4ad2bffd5e922156182b1eebe775c1e1019a4595/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "raw_url": "https://github.com/apache/tomcat/raw/4ad2bffd5e922156182b1eebe775c1e1019a4595/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "status": "modified",
                "changes": 4,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java?ref=4ad2bffd5e922156182b1eebe775c1e1019a4595",
                "patch": "@@ -260,9 +260,7 @@ void startMessage(byte opCode, ByteBuffer payload, boolean last,\n         messageParts.add(new MessagePart(opCode, payload, last,\n                 new EndMessageHandler(this, handler)));\n \n-        if (transformation != null) {\n-            messageParts = transformation.sendMessagePart(messageParts);\n-        }\n+        messageParts = transformation.sendMessagePart(messageParts);\n \n         MessagePart mp = messageParts.remove(0);\n ",
                "deletions": 3
            },
            {
                "sha": "591e42965df958a2121c2f99a9e8590fbe99dd56",
                "filename": "java/org/apache/tomcat/websocket/WsWebSocketContainer.java",
                "blob_url": "https://github.com/apache/tomcat/blob/4ad2bffd5e922156182b1eebe775c1e1019a4595/java/org/apache/tomcat/websocket/WsWebSocketContainer.java",
                "raw_url": "https://github.com/apache/tomcat/raw/4ad2bffd5e922156182b1eebe775c1e1019a4595/java/org/apache/tomcat/websocket/WsWebSocketContainer.java",
                "status": "modified",
                "changes": 14,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/WsWebSocketContainer.java?ref=4ad2bffd5e922156182b1eebe775c1e1019a4595",
                "patch": "@@ -316,22 +316,24 @@ public Session connectToServer(Endpoint endpoint,\n                     sm.getString(\"wsWebSocketContainer.httpRequestFailed\"), e);\n         }\n \n-        // TODO Add extension/transformation support to the client\n-\n         // Switch to WebSocket\n         WsRemoteEndpointImplClient wsRemoteEndpointClient = new WsRemoteEndpointImplClient(channel);\n \n         WsSession wsSession = new WsSession(endpoint, wsRemoteEndpointClient,\n                 this, null, null, null, null, null, subProtocol,\n                 Collections.<String, String> emptyMap(), secure,\n                 clientEndpointConfiguration);\n-        endpoint.onOpen(wsSession, clientEndpointConfiguration);\n-        registerSession(endpoint, wsSession);\n \n-        // Object creation will trigger input processing\n-        @SuppressWarnings(\"unused\")\n         WsFrameClient wsFrameClient = new WsFrameClient(response, channel,\n                 wsSession);\n+        // WsFrame adds the necessary final transformations. Copy the\n+        // completed transformation chain to the remote end point.\n+        wsRemoteEndpointClient.setTransformation(wsFrameClient.getTransformation());\n+\n+        endpoint.onOpen(wsSession, clientEndpointConfiguration);\n+        registerSession(endpoint, wsSession);\n+\n+        wsFrameClient.startInputProcessing();\n \n         return wsSession;\n     }",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE with storeconfig.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1605723 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/005b44a7c483f18e4d88b87c66810c4f0f9f63cc",
        "parent": "https://github.com/apache/tomcat/commit/8cb48b378a8986f9c4aacb18d0282b5d261f9794",
        "bug_id": "tomcat_151",
        "file": [
            {
                "sha": "07f90d40f3234bc389ba42f3360a9e496129018b",
                "filename": "java/org/apache/catalina/webresources/StandardRoot.java",
                "blob_url": "https://github.com/apache/tomcat/blob/005b44a7c483f18e4d88b87c66810c4f0f9f63cc/java/org/apache/catalina/webresources/StandardRoot.java",
                "raw_url": "https://github.com/apache/tomcat/raw/005b44a7c483f18e4d88b87c66810c4f0f9f63cc/java/org/apache/catalina/webresources/StandardRoot.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/webresources/StandardRoot.java?ref=005b44a7c483f18e4d88b87c66810c4f0f9f63cc",
                "patch": "@@ -592,7 +592,7 @@ public void deregisterTrackedResource(TrackedWebResource trackedResource) {\n     // ----------------------------------------------------------- JMX Lifecycle\n     @Override\n     protected String getDomainInternal() {\n-        return context.getDomain();\n+        return (context != null) ? context.getDomain() : null;\n     }\n \n     @Override",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "FindBugs: Avoid NPE when flushing batched WebSocket messages.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1574493 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/761bf75d3ba14882f1d550adacd589b515d37d43",
        "parent": "https://github.com/apache/tomcat/commit/08b4bd60ec800a3edb1599f209daeb552f04de8b",
        "bug_id": "tomcat_152",
        "file": [
            {
                "sha": "29cc2403629bbb6f675a1d0bba0afdd8d7c3b747",
                "filename": "java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "blob_url": "https://github.com/apache/tomcat/blob/761bf75d3ba14882f1d550adacd589b515d37d43/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "raw_url": "https://github.com/apache/tomcat/raw/761bf75d3ba14882f1d550adacd589b515d37d43/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java?ref=761bf75d3ba14882f1d550adacd589b515d37d43",
                "patch": "@@ -234,7 +234,9 @@ void startMessageBlock(byte opCode, ByteBuffer payload, boolean last)\n             } else {\n                 f2sh.get(timeout, TimeUnit.MILLISECONDS);\n             }\n-            payload.clear();\n+            if (payload != null) {\n+                payload.clear();\n+            }\n         } catch (InterruptedException | ExecutionException |\n                 TimeoutException e) {\n             throw new IOException(e);",
                "deletions": 1
            },
            {
                "sha": "409aafcf1032ee0a9feec107c6ee928f6ab10e9a",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/761bf75d3ba14882f1d550adacd589b515d37d43/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/761bf75d3ba14882f1d550adacd589b515d37d43/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=761bf75d3ba14882f1d550adacd589b515d37d43",
                "patch": "@@ -116,6 +116,9 @@\n         Avoid a possible deadlock when one thread is shutting down a connection\n         while another thread is trying to write to it. (markt)\n       </fix>\n+      <fix>\n+        Avoid NPE when flushing batched messages. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Web Applications\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPEs in test\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1553605 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/8c3166364f9c5f40b0325a29db739e439ea8d3e5",
        "parent": "https://github.com/apache/tomcat/commit/8aa1bcd0e555ae1df9c174661e0c8d9b60a35ca2",
        "bug_id": "tomcat_153",
        "file": [
            {
                "sha": "c5c37b6376fec08c89c58bcf49f21cfec0c3cefc",
                "filename": "test/org/apache/catalina/core/TestDefaultInstanceManager.java",
                "blob_url": "https://github.com/apache/tomcat/blob/8c3166364f9c5f40b0325a29db739e439ea8d3e5/test/org/apache/catalina/core/TestDefaultInstanceManager.java",
                "raw_url": "https://github.com/apache/tomcat/raw/8c3166364f9c5f40b0325a29db739e439ea8d3e5/test/org/apache/catalina/core/TestDefaultInstanceManager.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/core/TestDefaultInstanceManager.java?ref=8c3166364f9c5f40b0325a29db739e439ea8d3e5",
                "patch": "@@ -24,6 +24,7 @@\n import org.apache.catalina.Wrapper;\n import org.apache.catalina.startup.Tomcat;\n import org.apache.catalina.startup.TomcatBaseTest;\n+import org.apache.jasper.servlet.JasperInitializer;\n \n \n public class TestDefaultInstanceManager extends TomcatBaseTest {\n@@ -73,6 +74,8 @@ private DefaultInstanceManager doClassUnloadingPrep() throws Exception {\n         StandardContext ctxt = (StandardContext) tomcat.addContext(\n                 null, \"/test\", appDir.getAbsolutePath());\n \n+        ctxt.addServletContainerInitializer(new JasperInitializer(), null);\n+\n         // Configure the defaults and then tweak the JSP servlet settings\n         // Note: Min value for maxLoadedJsps is 2\n         Tomcat.initWebappDefaults(ctxt);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE on shutdown if application doesn't use WebSocket\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1551481 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/0f0dbda485bad6a1c3dca6d4ccc3c28846ebe0b8",
        "parent": "https://github.com/apache/tomcat/commit/6119681cbe3722bcbc03157dc2e76dccf582639d",
        "bug_id": "tomcat_154",
        "file": [
            {
                "sha": "ff3f636e01b3284957340c2bf860662b9b218f11",
                "filename": "java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "blob_url": "https://github.com/apache/tomcat/blob/0f0dbda485bad6a1c3dca6d4ccc3c28846ebe0b8/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "raw_url": "https://github.com/apache/tomcat/raw/0f0dbda485bad6a1c3dca6d4ccc3c28846ebe0b8/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/server/WsServerContainer.java?ref=0f0dbda485bad6a1c3dca6d4ccc3c28846ebe0b8",
                "patch": "@@ -451,6 +451,9 @@ ExecutorService getExecutorService() {\n \n \n     void shutdownExecutor() {\n+        if (executorService == null) {\n+            return;\n+        }\n         executorService.shutdown();\n         try {\n             executorService.awaitTermination(10, TimeUnit.SECONDS);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE reported on users list when HTTP session ends\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1546372 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/15c23b522ef46f3cea851cc1c3721d0cc94069b7",
        "parent": "https://github.com/apache/tomcat/commit/571b7b0cd63ce09dc1fb266aa30aca8a94539b4b",
        "bug_id": "tomcat_155",
        "file": [
            {
                "sha": "4f196825dcd3b43783345bbaf7b851cf60b86bc2",
                "filename": "java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "blob_url": "https://github.com/apache/tomcat/blob/15c23b522ef46f3cea851cc1c3721d0cc94069b7/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "raw_url": "https://github.com/apache/tomcat/raw/15c23b522ef46f3cea851cc1c3721d0cc94069b7/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/server/WsServerContainer.java?ref=15c23b522ef46f3cea851cc1c3721d0cc94069b7",
                "patch": "@@ -403,7 +403,10 @@ private void registerAuthenticatedSession(WsSession wsSession,\n     private void unregisterAuthenticatedSession(WsSession wsSession,\n             String httpSessionId) {\n         Set<WsSession> wsSessions = authenticatedSessions.get(httpSessionId);\n-        wsSessions.remove(wsSession);\n+        // wsSessions will be null if the HTTP session has ended\n+        if (wsSessions != null) {\n+            wsSessions.remove(wsSession);\n+        }\n     }\n \n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPEs if asyncContext is completed by listener\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1545801 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/7952f97e4b2cee0067e7cc01a60377256b2153e3",
        "parent": "https://github.com/apache/tomcat/commit/55a694ca6b475cc4f9f12cf8866cce6b7d48e804",
        "bug_id": "tomcat_156",
        "file": [
            {
                "sha": "c59b5ffdbf48fdcef108e76cf5bda99fe3ead964",
                "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
                "blob_url": "https://github.com/apache/tomcat/blob/7952f97e4b2cee0067e7cc01a60377256b2153e3/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "raw_url": "https://github.com/apache/tomcat/raw/7952f97e4b2cee0067e7cc01a60377256b2153e3/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "status": "modified",
                "changes": 27,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/CoyoteAdapter.java?ref=7952f97e4b2cee0067e7cc01a60377256b2153e3",
                "patch": "@@ -25,6 +25,7 @@\n import javax.servlet.ReadListener;\n import javax.servlet.RequestDispatcher;\n import javax.servlet.SessionTrackingMode;\n+import javax.servlet.WriteListener;\n import javax.servlet.http.HttpServletResponse;\n \n import org.apache.catalina.Context;\n@@ -313,14 +314,15 @@ public boolean asyncDispatch(org.apache.coyote.Request req,\n                 Throwable t = (Throwable)req.getAttribute(\n                         RequestDispatcher.ERROR_EXCEPTION);\n                 req.getAttributes().remove(RequestDispatcher.ERROR_EXCEPTION);\n-                if (req.getReadListener() != null) {\n+                ReadListener readListener = req.getReadListener();\n+                if (readListener != null) {\n                     ClassLoader oldCL =\n                             Thread.currentThread().getContextClassLoader();\n                     ClassLoader newCL =\n                             request.getContext().getLoader().getClassLoader();\n                     try {\n                         Thread.currentThread().setContextClassLoader(newCL);\n-                        req.getReadListener().onError(t);\n+                        readListener.onError(t);\n                     } finally {\n                         Thread.currentThread().setContextClassLoader(oldCL);\n                     }\n@@ -355,41 +357,42 @@ public boolean asyncDispatch(org.apache.coyote.Request req,\n \n             // Check to see if non-blocking writes or reads are being used\n             if (!request.isAsyncDispatching() && request.isAsync()) {\n-                if (res.getWriteListener() != null &&\n-                        status == SocketStatus.OPEN_WRITE) {\n+                WriteListener writeListener = res.getWriteListener();\n+                ReadListener readListener = req.getReadListener();\n+                if (writeListener != null && status == SocketStatus.OPEN_WRITE) {\n                     ClassLoader oldCL =\n                             Thread.currentThread().getContextClassLoader();\n                     ClassLoader newCL =\n                             request.getContext().getLoader().getClassLoader();\n                     try {\n                         Thread.currentThread().setContextClassLoader(newCL);\n                         res.onWritePossible();\n-                        if (request.isFinished() && req.sendAllDataReadEvent()) {\n-                            req.getReadListener().onAllDataRead();\n+                        if (request.isFinished() && req.sendAllDataReadEvent() &&\n+                                readListener != null) {\n+                            readListener.onAllDataRead();\n                         }\n                     } catch (Throwable t) {\n                         ExceptionUtils.handleThrowable(t);\n-                        res.getWriteListener().onError(t);\n+                        writeListener.onError(t);\n                         throw t;\n                     } finally {\n                         Thread.currentThread().setContextClassLoader(oldCL);\n                     }\n                     success = true;\n-                } else if (req.getReadListener() != null &&\n-                        status == SocketStatus.OPEN_READ) {\n+                } else if (readListener != null && status == SocketStatus.OPEN_READ) {\n                     ClassLoader oldCL =\n                             Thread.currentThread().getContextClassLoader();\n                     ClassLoader newCL =\n                             request.getContext().getLoader().getClassLoader();\n                     try {\n                         Thread.currentThread().setContextClassLoader(newCL);\n-                        req.getReadListener().onDataAvailable();\n+                        readListener.onDataAvailable();\n                         if (request.isFinished() && req.sendAllDataReadEvent()) {\n-                            req.getReadListener().onAllDataRead();\n+                            readListener.onAllDataRead();\n                         }\n                     } catch (Throwable t) {\n                         ExceptionUtils.handleThrowable(t);\n-                        req.getReadListener().onError(t);\n+                        readListener.onError(t);\n                         throw t;\n                     } finally {\n                         Thread.currentThread().setContextClassLoader(oldCL);",
                "deletions": 12
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix a FindBugs warning.\nThrow NPE rather than triggering one.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1542841 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/3db7e27e09591e63b4eb75df36fa40ce79afb1e9",
        "parent": "https://github.com/apache/tomcat/commit/fa0ec772f314329c1c485f8d8baa2454fe12765e",
        "bug_id": "tomcat_157",
        "file": [
            {
                "sha": "0aab7ecd0529d07363dac9c2611907dbcac04414",
                "filename": "webapps/examples/WEB-INF/classes/websocket/drawboard/Room.java",
                "blob_url": "https://github.com/apache/tomcat/blob/3db7e27e09591e63b4eb75df36fa40ce79afb1e9/webapps/examples/WEB-INF/classes/websocket/drawboard/Room.java",
                "raw_url": "https://github.com/apache/tomcat/raw/3db7e27e09591e63b4eb75df36fa40ce79afb1e9/webapps/examples/WEB-INF/classes/websocket/drawboard/Room.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/examples/WEB-INF/classes/websocket/drawboard/Room.java?ref=3db7e27e09591e63b4eb75df36fa40ce79afb1e9",
                "patch": "@@ -480,7 +480,7 @@ public void handleDrawMessage(DrawMessage msg, long msgId) {\n          */\n         private void sendRoomMessage(MessageType type, String content) {\n             if (content == null || type == null)\n-                throw null;\n+                throw new NullPointerException();\n \n             String completeMsg = String.valueOf(type.flag) + content;\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Protect against possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1539872 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/fcb3ac7c26687127001fe435d9d38e7fb9da8471",
        "parent": "https://github.com/apache/tomcat/commit/59db853354051bae3ff39231689b49a10059f0e5",
        "bug_id": "tomcat_158",
        "file": [
            {
                "sha": "c98df7235fa85e916764f4320b357cacebafb383",
                "filename": "java/org/apache/catalina/webresources/CachedResource.java",
                "blob_url": "https://github.com/apache/tomcat/blob/fcb3ac7c26687127001fe435d9d38e7fb9da8471/java/org/apache/catalina/webresources/CachedResource.java",
                "raw_url": "https://github.com/apache/tomcat/raw/fcb3ac7c26687127001fe435d9d38e7fb9da8471/java/org/apache/catalina/webresources/CachedResource.java",
                "status": "modified",
                "changes": 8,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/webresources/CachedResource.java?ref=fcb3ac7c26687127001fe435d9d38e7fb9da8471",
                "patch": "@@ -170,8 +170,12 @@ public String getName() {\n     public long getContentLength() {\n         Long cachedContentLength = this.cachedContentLength;\n         if (cachedContentLength == null) {\n-            cachedContentLength = Long.valueOf(webResource.getContentLength());\n-            this.cachedContentLength = cachedContentLength;\n+            long result = 0;\n+            if (webResource != null) {\n+                cachedContentLength = Long.valueOf(webResource.getContentLength());\n+                this.cachedContentLength = cachedContentLength;\n+            }\n+            return result;\n         }\n         return cachedContentLength.longValue();\n     }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Simplify the code of JvmRouteBinderValve.startInternal().\nAvoid potential NPE when JvmRouteBinderValve is configured directly at Engine element.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1724366 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/2d850ffb3d2ea5cbfba718653136e9653966e0fa",
        "parent": "https://github.com/apache/tomcat/commit/dfbddc1f6be7b32a57d98fb0c8ed930017c2ebcb",
        "bug_id": "tomcat_159",
        "file": [
            {
                "sha": "37919e36ff39e8c801677ba654f363661db4e74a",
                "filename": "java/org/apache/catalina/ha/session/JvmRouteBinderValve.java",
                "blob_url": "https://github.com/apache/tomcat/blob/2d850ffb3d2ea5cbfba718653136e9653966e0fa/java/org/apache/catalina/ha/session/JvmRouteBinderValve.java",
                "raw_url": "https://github.com/apache/tomcat/raw/2d850ffb3d2ea5cbfba718653136e9653966e0fa/java/org/apache/catalina/ha/session/JvmRouteBinderValve.java",
                "status": "modified",
                "changes": 25,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/ha/session/JvmRouteBinderValve.java?ref=2d850ffb3d2ea5cbfba718653136e9653966e0fa",
                "patch": "@@ -20,9 +20,7 @@\n \n import javax.servlet.ServletException;\n \n-import org.apache.catalina.Container;\n-import org.apache.catalina.Engine;\n-import org.apache.catalina.Host;\n+import org.apache.catalina.Cluster;\n import org.apache.catalina.LifecycleException;\n import org.apache.catalina.Manager;\n import org.apache.catalina.Session;\n@@ -381,24 +379,9 @@ protected void changeRequestSessionID(Request request, String sessionId, String\n     protected synchronized void startInternal() throws LifecycleException {\n \n         if (cluster == null) {\n-            Container hostContainer = getContainer();\n-            // compatibility with JvmRouteBinderValve version 1.1\n-            // ( setup at context.xml or context.xml.default )\n-            if (!(hostContainer instanceof Host)) {\n-                if (log.isWarnEnabled()) {\n-                    log.warn(sm.getString(\"jvmRoute.configure.warn\"));\n-                }\n-                hostContainer = hostContainer.getParent();\n-            }\n-            if (hostContainer instanceof Host\n-                    && ((Host) hostContainer).getCluster() != null) {\n-                cluster = (CatalinaCluster) ((Host) hostContainer).getCluster();\n-            } else {\n-                Container engine = hostContainer.getParent() ;\n-                if (engine instanceof Engine\n-                        && ((Engine) engine).getCluster() != null) {\n-                    cluster = (CatalinaCluster) ((Engine) engine).getCluster();\n-                }\n+            Cluster containerCluster = getContainer().getCluster();\n+            if (containerCluster instanceof CatalinaCluster) {\n+                setCluster((CatalinaCluster)containerCluster);\n             }\n         }\n ",
                "deletions": 21
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Quick hack to avoid NPE when running with an APR/native SSL connector and listing enabled ciphers.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1723183 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/21eecfd9c40ba1e7ff5a87d612a9eb2eaa10138f",
        "parent": "https://github.com/apache/tomcat/commit/002e0d1731e48f4f9f940aaf002a32f5eb107489",
        "bug_id": "tomcat_160",
        "file": [
            {
                "sha": "8bda74abfaaf3781da2707711807ffdbd9194aa7",
                "filename": "java/org/apache/tomcat/util/net/SSLHostConfigCertificate.java",
                "blob_url": "https://github.com/apache/tomcat/blob/21eecfd9c40ba1e7ff5a87d612a9eb2eaa10138f/java/org/apache/tomcat/util/net/SSLHostConfigCertificate.java",
                "raw_url": "https://github.com/apache/tomcat/raw/21eecfd9c40ba1e7ff5a87d612a9eb2eaa10138f/java/org/apache/tomcat/util/net/SSLHostConfigCertificate.java",
                "status": "modified",
                "changes": 9,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/SSLHostConfigCertificate.java?ref=21eecfd9c40ba1e7ff5a87d612a9eb2eaa10138f",
                "patch": "@@ -18,6 +18,7 @@\n \n import java.util.HashSet;\n import java.util.Set;\n+import java.util.stream.Collectors;\n \n import org.apache.tomcat.util.net.AbstractJsseEndpoint.SSLContextWrapper;\n import org.apache.tomcat.util.net.openssl.ciphers.Authentication;\n@@ -193,7 +194,13 @@ public String getCertificateKeyFile() {\n \n \n     public String[] getEnabledCiphers() {\n-        return getSslContextWrapper().getEnabledCiphers();\n+        SSLContextWrapper wrapper = getSslContextWrapper();\n+        if (wrapper != null) {\n+            return wrapper.getEnabledCiphers();\n+        }\n+\n+        return sslHostConfig.getCipherList().stream().map(c -> c.toString()).\n+                collect(Collectors.toList()).toArray(new String[0]);\n     }\n \n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid possible NPE during shutdown.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1523788 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/b6323f78fefe7e0c0fe0b5fcf980f636de6f6299",
        "parent": "https://github.com/apache/tomcat/commit/b529f2020bf02843e122d425e67f120cf1a7ab64",
        "bug_id": "tomcat_161",
        "file": [
            {
                "sha": "473e0233b44b9cb8ec40943b9b1a81928e79d382",
                "filename": "java/org/apache/tomcat/util/net/AprEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/b6323f78fefe7e0c0fe0b5fcf980f636de6f6299/java/org/apache/tomcat/util/net/AprEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/b6323f78fefe7e0c0fe0b5fcf980f636de6f6299/java/org/apache/tomcat/util/net/AprEndpoint.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/AprEndpoint.java?ref=b6323f78fefe7e0c0fe0b5fcf980f636de6f6299",
                "patch": "@@ -905,7 +905,10 @@ private void destroySocket(long socket) {\n         // countDownConnection(). Once the connector is stopped, the latch is\n         // removed so it does not matter that destroySocket() does not call\n         // countDownConnection() in that case\n-        poller.removeFromPoller(socket);\n+        Poller poller = this.poller;\n+        if (poller != null) {\n+            poller.removeFromPoller(socket);\n+        }\n         connections.remove(Long.valueOf(socket));\n         destroySocket(socket, running);\n     }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Prevent NPE if dispatch results in a nested call to process()\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1519501 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/1a2df7f783619ddec2ecf4debf8ade29be24dac4",
        "parent": "https://github.com/apache/tomcat/commit/978dcbf0672f6d093c2617a4de3f263b509ecf33",
        "bug_id": "tomcat_162",
        "file": [
            {
                "sha": "a66d48d1149639842cb966dc6bcd240ecb68875e",
                "filename": "java/org/apache/coyote/AbstractProtocol.java",
                "blob_url": "https://github.com/apache/tomcat/blob/1a2df7f783619ddec2ecf4debf8ade29be24dac4/java/org/apache/coyote/AbstractProtocol.java",
                "raw_url": "https://github.com/apache/tomcat/raw/1a2df7f783619ddec2ecf4debf8ade29be24dac4/java/org/apache/coyote/AbstractProtocol.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/AbstractProtocol.java?ref=1a2df7f783619ddec2ecf4debf8ade29be24dac4",
                "patch": "@@ -618,6 +618,9 @@ public SocketState process(SocketWrapper<S> wrapper,\n                 SocketState state = SocketState.CLOSED;\n                 do {\n                     if (wrapper.hasNextDispatch()) {\n+                        // Associate with the processor with the connection as\n+                        // these calls may result in a nested call to process()\n+                        connections.put(socket, processor);\n                         DispatchType nextDispatch = wrapper.getNextDispatch();\n                         state = processor.asyncDispatch(\n                                 nextDispatch.getSocketStatus());",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE observed in testing logs\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1516416 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/7919ecf1dd297182db156afceaf1663d23fbbc31",
        "parent": "https://github.com/apache/tomcat/commit/b9c005b9eceebdbda1b447012f45fccaac93317b",
        "bug_id": "tomcat_163",
        "file": [
            {
                "sha": "53fbe57e0060948319d21a73b3df741705dcb3f2",
                "filename": "java/org/apache/juli/OneLineFormatter.java",
                "blob_url": "https://github.com/apache/tomcat/blob/7919ecf1dd297182db156afceaf1663d23fbbc31/java/org/apache/juli/OneLineFormatter.java",
                "raw_url": "https://github.com/apache/tomcat/raw/7919ecf1dd297182db156afceaf1663d23fbbc31/java/org/apache/juli/OneLineFormatter.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/juli/OneLineFormatter.java?ref=7919ecf1dd297182db156afceaf1663d23fbbc31",
                "patch": "@@ -191,7 +191,9 @@ private static String getThreadName(int logRecordThreadId) {\n             }\n             ThreadInfo threadInfo =\n                     threadMxBean.getThreadInfo(logRecordThreadId);\n-            result = threadInfo.getThreadName();\n+            if (threadInfo == null) {\n+                return Long.toString(logRecordThreadId);\n+            }\n         }\n \n         cache.put(Integer.valueOf(logRecordThreadId), result);",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56785\nAvoid NullPointerException if directory exists on the class path that is not readable by the Tomcat user.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1615920 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/a29ec48655334b521fb59651003dd762cc2596e1",
        "parent": "https://github.com/apache/tomcat/commit/cac669fb45d87afa78cfd575348fb4f12a7aeeab",
        "bug_id": "tomcat_164",
        "file": [
            {
                "sha": "82e5ed9e0f869e7a33934b463b100c555e3d03c6",
                "filename": "java/org/apache/catalina/startup/ContextConfig.java",
                "blob_url": "https://github.com/apache/tomcat/blob/a29ec48655334b521fb59651003dd762cc2596e1/java/org/apache/catalina/startup/ContextConfig.java",
                "raw_url": "https://github.com/apache/tomcat/raw/a29ec48655334b521fb59651003dd762cc2596e1/java/org/apache/catalina/startup/ContextConfig.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/startup/ContextConfig.java?ref=a29ec48655334b521fb59651003dd762cc2596e1",
                "patch": "@@ -1960,10 +1960,13 @@ protected void processAnnotationsFile(File file, WebXml fragment,\n             boolean handlesTypesOnly) {\n \n         if (file.isDirectory()) {\n+            // Returns null if directory is not readable\n             String[] dirs = file.list();\n-            for (String dir : dirs) {\n-                processAnnotationsFile(\n-                        new File(file,dir), fragment, handlesTypesOnly);\n+            if (dirs != null) {\n+                for (String dir : dirs) {\n+                    processAnnotationsFile(\n+                            new File(file,dir), fragment, handlesTypesOnly);\n+                }\n             }\n         } else if (file.canRead() && file.getName().endsWith(\".class\")) {\n             try (FileInputStream fis = new FileInputStream(file)) {",
                "deletions": 3
            },
            {
                "sha": "a2c78120754d345073ac9fa34416ee866128ca5c",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/a29ec48655334b521fb59651003dd762cc2596e1/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/a29ec48655334b521fb59651003dd762cc2596e1/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=a29ec48655334b521fb59651003dd762cc2596e1",
                "patch": "@@ -80,6 +80,11 @@\n         and it need not be fatal when the Realm starts. Based on a patch by\n         C\u00e9dric Couralet. (markt)\n       </fix>\n+      <fix>\n+        <bug>56785</bug>: Avoid <code>NullPointerException</code> if directory\n+        exists on the class path that is not readable by the Tomcat user.\n+        (markt)\n+      </fix>\n       <fix>\n         <bug>56796</bug>: Remove unnecessary sleep when stopping a web\n         application. (markt)",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE in FileMessageFactory.main when specify empty file as arguments.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1509134 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/130bb72597ed5ee86e41ba0779125217b4fd0f38",
        "parent": "https://github.com/apache/tomcat/commit/a5c8f422a2ff2ff26f735975cb35f25578158355",
        "bug_id": "tomcat_165",
        "file": [
            {
                "sha": "36eb7152d38ad7150a6f6b823425fd84f07b3dce",
                "filename": "java/org/apache/catalina/ha/deploy/FileMessageFactory.java",
                "blob_url": "https://github.com/apache/tomcat/blob/130bb72597ed5ee86e41ba0779125217b4fd0f38/java/org/apache/catalina/ha/deploy/FileMessageFactory.java",
                "raw_url": "https://github.com/apache/tomcat/raw/130bb72597ed5ee86e41ba0779125217b4fd0f38/java/org/apache/catalina/ha/deploy/FileMessageFactory.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/ha/deploy/FileMessageFactory.java?ref=130bb72597ed5ee86e41ba0779125217b4fd0f38",
                "patch": "@@ -374,6 +374,10 @@ public static void main(String[] args) throws Exception {\n         FileMessageFactory write = getInstance(new File(args[1]), true);\n         FileMessage msg = new FileMessage(null, args[0], args[0]);\n         msg = read.readMessage(msg);\n+        if (msg == null) {\n+            System.out.println(\"Empty input file : \" + args[0]);\n+            return;\n+        }\n         System.out.println(\"Expecting to write \" + msg.getTotalNrOfMsgs()\n                 + \" messages.\");\n         int cnt = 0;",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE. If the channel fails to start, localMember is null.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1505637 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/3c1ba5605615bd4fa3522837e30f1244632c414e",
        "parent": "https://github.com/apache/tomcat/commit/c7a633d78b26c44f93198887ddf0bb0e89bb8f4d",
        "bug_id": "tomcat_166",
        "file": [
            {
                "sha": "0efd660a9eb327a053d406602a5473c3ef33b7ad",
                "filename": "java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java",
                "blob_url": "https://github.com/apache/tomcat/blob/3c1ba5605615bd4fa3522837e30f1244632c414e/java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java",
                "raw_url": "https://github.com/apache/tomcat/raw/3c1ba5605615bd4fa3522837e30f1244632c414e/java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java?ref=3c1ba5605615bd4fa3522837e30f1244632c414e",
                "patch": "@@ -875,6 +875,7 @@ private void registerMember(Member member) {\n     }\n \n     private void unregisterMember(Member member) {\n+        if (member == null) return;\n         ObjectName oname = memberOnameMap.remove(member);\n         if (oname != null) {\n             unregister(oname);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix logic error that triggered an NPE and associated test failures\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1497308 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/a9fa88e244bb94ea516b36ca186acb9e6295cb98",
        "parent": "https://github.com/apache/tomcat/commit/0653f24c24fed8328ca5e80eec044ea5c54e5407",
        "bug_id": "tomcat_167",
        "file": [
            {
                "sha": "6729ff22c7c902819b4fcad35e686cb9cf952c4d",
                "filename": "java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java",
                "blob_url": "https://github.com/apache/tomcat/blob/a9fa88e244bb94ea516b36ca186acb9e6295cb98/java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java",
                "raw_url": "https://github.com/apache/tomcat/raw/a9fa88e244bb94ea516b36ca186acb9e6295cb98/java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java?ref=a9fa88e244bb94ea516b36ca186acb9e6295cb98",
                "patch": "@@ -375,7 +375,7 @@ public MessageHandlerInfo(Method m, List<DecoderEntry> decoderEntries) {\n                                 m.getName(), m.getDeclaringClass().getName()));\n                     }\n                 } else {\n-                    if (decoderMatch != null || decoderMatch.hasMatches()) {\n+                    if (decoderMatch != null && decoderMatch.hasMatches()) {\n                         throw new IllegalArgumentException(sm.getString(\n                                 \"pojoMethodMapping.duplicateMessageParam\",\n                                 m.getName(), m.getDeclaringClass().getName()));",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Add some NPE protection\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1485847 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/890e2eb275b3654a38151b95caf16a605870b49f",
        "parent": "https://github.com/apache/tomcat/commit/a49fc6c60b00c70e7822ae7489c016bda6cd8ec1",
        "bug_id": "tomcat_168",
        "file": [
            {
                "sha": "c5dc5caefc35d4d579e989ecdad54cebbad9da79",
                "filename": "java/org/apache/tomcat/util/net/AprEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/890e2eb275b3654a38151b95caf16a605870b49f/java/org/apache/tomcat/util/net/AprEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/890e2eb275b3654a38151b95caf16a605870b49f/java/org/apache/tomcat/util/net/AprEndpoint.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/AprEndpoint.java?ref=890e2eb275b3654a38151b95caf16a605870b49f",
                "patch": "@@ -1600,9 +1600,12 @@ public void run() {\n                                         info.socket);\n                             }\n                             timeouts.remove(info.socket);\n+                            AprSocketWrapper wrapper = connections.get(\n+                                    Long.valueOf(info.socket));\n+                            if (wrapper == null) {\n+                                continue;\n+                            }\n                             if (info.read() || info.write()) {\n-                                AprSocketWrapper wrapper = connections.get(\n-                                        Long.valueOf(info.socket));\n                                 boolean comet = wrapper.isComet();\n                                 if (comet || wrapper.pollerFlags != 0) {\n                                     removeFromPoller(info.socket);",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Correctly init WebSocket to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1485833 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/a49fc6c60b00c70e7822ae7489c016bda6cd8ec1",
        "parent": "https://github.com/apache/tomcat/commit/3d81f573e2b40c19dbc8548278557b2950693d85",
        "bug_id": "tomcat_169",
        "file": [
            {
                "sha": "651b178e8dc4066bb80c6b2bc1c56d7c0a4b5e65",
                "filename": "test/org/apache/tomcat/util/net/TestSsl.java",
                "blob_url": "https://github.com/apache/tomcat/blob/a49fc6c60b00c70e7822ae7489c016bda6cd8ec1/test/org/apache/tomcat/util/net/TestSsl.java",
                "raw_url": "https://github.com/apache/tomcat/raw/a49fc6c60b00c70e7822ae7489c016bda6cd8ec1/test/org/apache/tomcat/util/net/TestSsl.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/tomcat/util/net/TestSsl.java?ref=a49fc6c60b00c70e7822ae7489c016bda6cd8ec1",
                "patch": "@@ -35,6 +35,7 @@\n \n import org.junit.Test;\n \n+import org.apache.catalina.Context;\n import org.apache.catalina.startup.Tomcat;\n import org.apache.catalina.startup.TomcatBaseTest;\n import org.apache.tomcat.util.buf.ByteChunk;\n@@ -167,7 +168,9 @@ public void testRenegotiateWorks() throws Exception {\n \n         File appDir = new File(getBuildDirectory(), \"webapps/examples\");\n         // app dir is relative to server home\n-        tomcat.addWebapp(null, \"/examples\", appDir.getAbsolutePath());\n+        Context ctx = tomcat.addWebapp(null, \"/examples\",\n+                appDir.getAbsolutePath());\n+        ctx.addApplicationListener(WsListener.class.getName());\n \n         TesterSupport.initSsl(tomcat);\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPEs when attempting to destroy contexts that failed to start.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1482602 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/7524163c9d4ac865cbb71bbfe4119df788e2b663",
        "parent": "https://github.com/apache/tomcat/commit/43006577c9663ef078d517f611f0759d878b3804",
        "bug_id": "tomcat_170",
        "file": [
            {
                "sha": "ceee4af447aa6a75bcc2e909e76eeb75f3a3ee05",
                "filename": "java/org/apache/catalina/core/StandardContext.java",
                "blob_url": "https://github.com/apache/tomcat/blob/7524163c9d4ac865cbb71bbfe4119df788e2b663/java/org/apache/catalina/core/StandardContext.java",
                "raw_url": "https://github.com/apache/tomcat/raw/7524163c9d4ac865cbb71bbfe4119df788e2b663/java/org/apache/catalina/core/StandardContext.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/StandardContext.java?ref=7524163c9d4ac865cbb71bbfe4119df788e2b663",
                "patch": "@@ -5755,7 +5755,7 @@ protected ClassLoader bindThread() {\n         ClassLoader oldContextClassLoader =\n             Thread.currentThread().getContextClassLoader();\n \n-        if (getLoader().getClassLoader() != null) {\n+        if (getLoader() != null && getLoader().getClassLoader() != null) {\n             Thread.currentThread().setContextClassLoader\n                 (getLoader().getClassLoader());\n         }",
                "deletions": 1
            },
            {
                "sha": "047783c0be32542cb60f028a39d3fa5deec040b4",
                "filename": "java/org/apache/catalina/webresources/StandardRoot.java",
                "blob_url": "https://github.com/apache/tomcat/blob/7524163c9d4ac865cbb71bbfe4119df788e2b663/java/org/apache/catalina/webresources/StandardRoot.java",
                "raw_url": "https://github.com/apache/tomcat/raw/7524163c9d4ac865cbb71bbfe4119df788e2b663/java/org/apache/catalina/webresources/StandardRoot.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/webresources/StandardRoot.java?ref=7524163c9d4ac865cbb71bbfe4119df788e2b663",
                "patch": "@@ -486,7 +486,9 @@ protected void stopInternal() throws LifecycleException {\n             }\n         }\n \n-        main.destroy();\n+        if (main != null) {\n+            main.destroy();\n+        }\n         mainResources.clear();\n \n         for (WebResourceSet webResourceSet : jarResources) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Another NPE in the WebSocket tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1476177 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/df229fc4328487df9232605a7f505053dcf6907b",
        "parent": "https://github.com/apache/tomcat/commit/e44ab58e0601fe7aceb89b13313c97a4e280bda5",
        "bug_id": "tomcat_171",
        "file": [
            {
                "sha": "2d0eacd9e367f765f1433b8883a77b94a79c632e",
                "filename": "java/org/apache/coyote/http11/InternalNioInputBuffer.java",
                "blob_url": "https://github.com/apache/tomcat/blob/df229fc4328487df9232605a7f505053dcf6907b/java/org/apache/coyote/http11/InternalNioInputBuffer.java",
                "raw_url": "https://github.com/apache/tomcat/raw/df229fc4328487df9232605a7f505053dcf6907b/java/org/apache/coyote/http11/InternalNioInputBuffer.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/InternalNioInputBuffer.java?ref=df229fc4328487df9232605a7f505053dcf6907b",
                "patch": "@@ -789,6 +789,10 @@ protected void init(SocketWrapper<NioChannel> socketWrapper,\n             AbstractEndpoint endpoint) throws IOException {\n \n         socket = socketWrapper.getSocket();\n+        if (socket == null) {\n+            // Socket has been closed in another thread\n+            throw new IOException(sm.getString(\"iib.socketClosed\"));\n+        }\n         socketReadBufferSize =\n             socket.getBufHandler().getReadBuffer().capacity();\n ",
                "deletions": 0
            },
            {
                "sha": "3e06e144e8a3ddb2b756c169bc9209a75ca933e9",
                "filename": "java/org/apache/coyote/http11/LocalStrings.properties",
                "blob_url": "https://github.com/apache/tomcat/blob/df229fc4328487df9232605a7f505053dcf6907b/java/org/apache/coyote/http11/LocalStrings.properties",
                "raw_url": "https://github.com/apache/tomcat/raw/df229fc4328487df9232605a7f505053dcf6907b/java/org/apache/coyote/http11/LocalStrings.properties",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/LocalStrings.properties?ref=df229fc4328487df9232605a7f505053dcf6907b",
                "patch": "@@ -30,5 +30,6 @@ iib.invalidheader=The HTTP header line [{0}] does not conform to RFC 2616 and ha\n iib.invalidmethod=Invalid character (CR or LF) found in method name\n iib.parseheaders.ise.error=Unexpected state: headers already parsed. Buffer not recycled?\n iib.requestheadertoolarge.error=Request header is too large\n+iib.socketClosed=The socket has been closed in another thread\n \n iob.responseheadertoolarge.error=An attempt was made to write more data to the response headers than there was room available in the buffer. Increase maxHttpHeaderSize on the connector or write less data into the response headers.",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix some NPEs observed while investigating some unit test failures.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1475900 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/fca8bfe7333717ed43d7cdff3b5c8eecce3f1b35",
        "parent": "https://github.com/apache/tomcat/commit/3c380ba0d23004a5d52a3efc47c633e99a9b4134",
        "bug_id": "tomcat_172",
        "file": [
            {
                "sha": "21011fd27892065f65d75242b5436b525d9827f9",
                "filename": "java/org/apache/coyote/AbstractProtocol.java",
                "blob_url": "https://github.com/apache/tomcat/blob/fca8bfe7333717ed43d7cdff3b5c8eecce3f1b35/java/org/apache/coyote/AbstractProtocol.java",
                "raw_url": "https://github.com/apache/tomcat/raw/fca8bfe7333717ed43d7cdff3b5c8eecce3f1b35/java/org/apache/coyote/AbstractProtocol.java",
                "status": "modified",
                "changes": 11,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/AbstractProtocol.java?ref=fca8bfe7333717ed43d7cdff3b5c8eecce3f1b35",
                "patch": "@@ -582,11 +582,16 @@ public void recycle() {\n         public SocketState process(SocketWrapper<S> wrapper,\n                 SocketStatus status) {\n             S socket = wrapper.getSocket();\n-            Processor<S> processor = connections.get(socket);\n \n+            if (socket == null) {\n+                // Nothing to do. Socket has been closed.\n+                return SocketState.CLOSED;\n+            }\n+\n+            Processor<S> processor = connections.get(socket);\n             if (status == SocketStatus.DISCONNECT && processor == null) {\n-                //nothing more to be done endpoint requested a close\n-                //and there are no object associated with this connection\n+                // Nothing to do. Endpoint requested a close and there is no\n+                // longer a processor associated with this socket.\n                 return SocketState.CLOSED;\n             }\n ",
                "deletions": 3
            },
            {
                "sha": "6a2755c95f0963b6ccfc3697ba2ea5726244a7f1",
                "filename": "java/org/apache/coyote/http11/Http11NioProcessor.java",
                "blob_url": "https://github.com/apache/tomcat/blob/fca8bfe7333717ed43d7cdff3b5c8eecce3f1b35/java/org/apache/coyote/http11/Http11NioProcessor.java",
                "raw_url": "https://github.com/apache/tomcat/raw/fca8bfe7333717ed43d7cdff3b5c8eecce3f1b35/java/org/apache/coyote/http11/Http11NioProcessor.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/Http11NioProcessor.java?ref=fca8bfe7333717ed43d7cdff3b5c8eecce3f1b35",
                "patch": "@@ -234,7 +234,7 @@ public SocketState process(SocketWrapper<NioChannel> socketWrapper) throws IOExc\n         SocketState state = super.process(socketWrapper);\n         final NioEndpoint.KeyAttachment attach = (NioEndpoint.KeyAttachment)socket.getSocket().getAttachment(false);\n         //return if we have more data to write\n-        if (isRegisteredForWrite(attach)) {\n+        if (attach != null && isRegisteredForWrite(attach)) {\n             return SocketState.LONG;\n         } else {\n             return state;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Add NPE protection and add missing filtering of POJOs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1459677 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/f8bcb5610c1974c4921caf5cb225bdb4d02a5fe2",
        "parent": "https://github.com/apache/tomcat/commit/3240fe928ead449c9432cc677bdf5e63abdf1d76",
        "bug_id": "tomcat_173",
        "file": [
            {
                "sha": "097fe35453742baadd16d8ac2e927c1be9c82743",
                "filename": "java/org/apache/tomcat/websocket/server/WsSci.java",
                "blob_url": "https://github.com/apache/tomcat/blob/f8bcb5610c1974c4921caf5cb225bdb4d02a5fe2/java/org/apache/tomcat/websocket/server/WsSci.java",
                "raw_url": "https://github.com/apache/tomcat/raw/f8bcb5610c1974c4921caf5cb225bdb4d02a5fe2/java/org/apache/tomcat/websocket/server/WsSci.java",
                "status": "modified",
                "changes": 13,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/server/WsSci.java?ref=f8bcb5610c1974c4921caf5cb225bdb4d02a5fe2",
                "patch": "@@ -92,8 +92,17 @@ public void onStartup(Set<Class<?>> clazzes, ServletContext ctx)\n             filteredPojoEndpoints.addAll(scannedPojoEndpoints);\n         } else {\n             for (ServerApplicationConfig config : serverApplicationConfigs) {\n-                filteredEndpointConfigs.addAll(\n-                        config.getEndpointConfigs(scannedEndpointClazzes));\n+                Set<ServerEndpointConfig> configFilteredEndpoints =\n+                        config.getEndpointConfigs(scannedEndpointClazzes);\n+                if (configFilteredEndpoints != null) {\n+                    filteredEndpointConfigs.addAll(configFilteredEndpoints);\n+                }\n+                Set<Class<?>> configFilteredPojos =\n+                        config.getAnnotatedEndpointClasses(\n+                                scannedPojoEndpoints);\n+                if (configFilteredPojos != null) {\n+                    filteredPojoEndpoints.addAll(configFilteredPojos);\n+                }\n             }\n         }\n ",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fixed potential NPE in HostConfig while deploying an application. Issue reported by coverity scan.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1717264 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/8871d4b9fdbe2bf35ac41a5d0fc6c858c0caa31a",
        "parent": "https://github.com/apache/tomcat/commit/2a96e2320bf1a6e4e3cf2c623dea80a335c1c5b8",
        "bug_id": "tomcat_174",
        "file": [
            {
                "sha": "0c8c9fe99606d468e3584b282c8770a2469593fe",
                "filename": "java/org/apache/catalina/startup/HostConfig.java",
                "blob_url": "https://github.com/apache/tomcat/blob/8871d4b9fdbe2bf35ac41a5d0fc6c858c0caa31a/java/org/apache/catalina/startup/HostConfig.java",
                "raw_url": "https://github.com/apache/tomcat/raw/8871d4b9fdbe2bf35ac41a5d0fc6c858c0caa31a/java/org/apache/catalina/startup/HostConfig.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/startup/HostConfig.java?ref=8871d4b9fdbe2bf35ac41a5d0fc6c858c0caa31a",
                "patch": "@@ -405,13 +405,13 @@ protected void deployApps() {\n      * Filter the list of application file paths to remove those that match\n      * the regular expression defined by {@link Host#getDeployIgnore()}.\n      *\n-     * @param unfilteredAppPaths    The list of application paths to filtert\n+     * @param unfilteredAppPaths    The list of application paths to filter\n      *\n      * @return  The filtered list of application paths\n      */\n     protected String[] filterAppPaths(String[] unfilteredAppPaths) {\n         Pattern filter = host.getDeployIgnorePattern();\n-        if (filter == null) {\n+        if (filter == null || unfilteredAppPaths == null) {\n             return unfilteredAppPaths;\n         }\n ",
                "deletions": 2
            },
            {
                "sha": "756b00fad2209efe7b04330d894ca3ca86e52ee0",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/8871d4b9fdbe2bf35ac41a5d0fc6c858c0caa31a/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/8871d4b9fdbe2bf35ac41a5d0fc6c858c0caa31a/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=8871d4b9fdbe2bf35ac41a5d0fc6c858c0caa31a",
                "patch": "@@ -90,6 +90,10 @@\n         running Tomcat with a Java agent. Based on a patch by Huxing Zhang.\n         (markt)\n       </fix>\n+      <fix>\n+        Fixed potential NPE in <code>HostConfig</code> while deploying an\n+        application. Issue reported by coverity scan. (violetagg)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix copy and paste error highlighted by Eclipse NPE warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1444611 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/3c0ee8cae3ef998d115147b047782a951677d973",
        "parent": "https://github.com/apache/tomcat/commit/0a07f5d49c1b6f96efb7047dfdd5255959330ac2",
        "bug_id": "tomcat_175",
        "file": [
            {
                "sha": "a1d663b518b57d310894c8e1991fb52a03b720ca",
                "filename": "java/org/apache/catalina/storeconfig/WebResourceRootSF.java",
                "blob_url": "https://github.com/apache/tomcat/blob/3c0ee8cae3ef998d115147b047782a951677d973/java/org/apache/catalina/storeconfig/WebResourceRootSF.java",
                "raw_url": "https://github.com/apache/tomcat/raw/3c0ee8cae3ef998d115147b047782a951677d973/java/org/apache/catalina/storeconfig/WebResourceRootSF.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/storeconfig/WebResourceRootSF.java?ref=3c0ee8cae3ef998d115147b047782a951677d973",
                "patch": "@@ -65,7 +65,7 @@ public void storeChilds(PrintWriter aWriter, int indent, Object aResourceRoot,\n                             + \".[JarResources]\");\n             if (jarResourcesElementDesc != null) {\n                 for (WebResourceSet jarResources : jarResourcesArray) {\n-                    preResourcesElementDesc.getStoreFactory().store(aWriter, indent,\n+                    jarResourcesElementDesc.getStoreFactory().store(aWriter, indent,\n                             jarResources);\n                 }\n             }\n@@ -77,7 +77,7 @@ public void storeChilds(PrintWriter aWriter, int indent, Object aResourceRoot,\n                             + \".[PostResources]\");\n             if (postResourcesElementDesc != null) {\n                 for (WebResourceSet postResources : postResourcesArray) {\n-                    preResourcesElementDesc.getStoreFactory().store(aWriter, indent,\n+                    postResourcesElementDesc.getStoreFactory().store(aWriter, indent,\n                             postResources);\n                 }\n             }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE when in blocking mode\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1413236 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/6a4e8a925f9e5db37f731ec59d05ac1eba5b8b3b",
        "parent": "https://github.com/apache/tomcat/commit/2bb862189f7b2e25fdffdcf75f36324ef5a6255d",
        "bug_id": "tomcat_176",
        "file": [
            {
                "sha": "cd74260edee9f018ddc51eeea6798d6711812d19",
                "filename": "java/org/apache/coyote/http11/upgrade/UpgradeServletInputStream.java",
                "blob_url": "https://github.com/apache/tomcat/blob/6a4e8a925f9e5db37f731ec59d05ac1eba5b8b3b/java/org/apache/coyote/http11/upgrade/UpgradeServletInputStream.java",
                "raw_url": "https://github.com/apache/tomcat/raw/6a4e8a925f9e5db37f731ec59d05ac1eba5b8b3b/java/org/apache/coyote/http11/upgrade/UpgradeServletInputStream.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/upgrade/UpgradeServletInputStream.java?ref=6a4e8a925f9e5db37f731ec59d05ac1eba5b8b3b",
                "patch": "@@ -101,7 +101,7 @@ public int read(byte[] b, int off, int len) throws IOException {\n \r\n \r\n     private void preReadChecks() {\r\n-        if (ready == null || !ready.booleanValue()) {\r\n+        if (listener != null && (ready == null || !ready.booleanValue())) {\r\n             // TODO i18n\r\n             throw new IllegalStateException();\r\n         }\r",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix an NPE caused by r1408517\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1408562 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/47a8f547ba83304087508cf6bf2c889dde1df2c8",
        "parent": "https://github.com/apache/tomcat/commit/a956a1239199723e6af894862aad283de46f6cc1",
        "bug_id": "tomcat_177",
        "file": [
            {
                "sha": "7beef4ca3b012952d0f756b5b158b97f8ded153a",
                "filename": "test/org/apache/catalina/startup/SimpleHttpClient.java",
                "blob_url": "https://github.com/apache/tomcat/blob/47a8f547ba83304087508cf6bf2c889dde1df2c8/test/org/apache/catalina/startup/SimpleHttpClient.java",
                "raw_url": "https://github.com/apache/tomcat/raw/47a8f547ba83304087508cf6bf2c889dde1df2c8/test/org/apache/catalina/startup/SimpleHttpClient.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/startup/SimpleHttpClient.java?ref=47a8f547ba83304087508cf6bf2c889dde1df2c8",
                "patch": "@@ -222,7 +222,9 @@ public void readResponse(boolean wantBody) throws IOException {\n         // clear any residual data before starting on this response\n         responseHeaders.clear();\n         responseBody = null;\n-        bodyUriElements.clear();\n+        if (bodyUriElements != null) {\n+            bodyUriElements.clear();\n+        }\n \n         // Read the response status line\n         responseLine = readLine();",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Prevent NPEs with background processing and a failed deployment.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1408162 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/9d3cd9770362f94d5b8917c07004c23f52a8ffda",
        "parent": "https://github.com/apache/tomcat/commit/922f736940f1a8b3f61ac44ce4b26ff4fadfa257",
        "bug_id": "tomcat_178",
        "file": [
            {
                "sha": "3c6b28bd4cfd54614ee70b92a93a74262d40e2f7",
                "filename": "java/org/apache/catalina/core/ContainerBase.java",
                "blob_url": "https://github.com/apache/tomcat/blob/9d3cd9770362f94d5b8917c07004c23f52a8ffda/java/org/apache/catalina/core/ContainerBase.java",
                "raw_url": "https://github.com/apache/tomcat/raw/9d3cd9770362f94d5b8917c07004c23f52a8ffda/java/org/apache/catalina/core/ContainerBase.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/ContainerBase.java?ref=9d3cd9770362f94d5b8917c07004c23f52a8ffda",
                "patch": "@@ -58,6 +58,7 @@\n import org.apache.catalina.Wrapper;\n import org.apache.catalina.connector.Request;\n import org.apache.catalina.connector.Response;\n+import org.apache.catalina.startup.FailedContext;\n import org.apache.catalina.util.ContextName;\n import org.apache.catalina.util.LifecycleMBeanBase;\n import org.apache.juli.logging.Log;\n@@ -1342,6 +1343,9 @@ protected void processChildren(Container container) {\n \n             try {\n                 if (container instanceof Context) {\n+                    if (container instanceof FailedContext) {\n+                        return;\n+                    }\n                     // Ensure background processing for Contexts and Wrappers\n                     // is performed under the web app's class loader\n                     originalClassLoader =",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "FindBugs: Protect against NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1401104 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/edffc9f7555be8bb4078c4589d34025e00a7b1e3",
        "parent": "https://github.com/apache/tomcat/commit/b93fe158107ee79df480603069503c106eba20a9",
        "bug_id": "tomcat_179",
        "file": [
            {
                "sha": "6aa560d58f28726227e90c02cb3b31224cd2f936",
                "filename": "java/org/apache/coyote/AbstractProtocol.java",
                "blob_url": "https://github.com/apache/tomcat/blob/edffc9f7555be8bb4078c4589d34025e00a7b1e3/java/org/apache/coyote/AbstractProtocol.java",
                "raw_url": "https://github.com/apache/tomcat/raw/edffc9f7555be8bb4078c4589d34025e00a7b1e3/java/org/apache/coyote/AbstractProtocol.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/AbstractProtocol.java?ref=edffc9f7555be8bb4078c4589d34025e00a7b1e3",
                "patch": "@@ -678,7 +678,7 @@ public SocketState process(SocketWrapper<S> socket,\n                         sm.getString(\"abstractConnectionHandler.error\"), e);\n             }\n             // Don't try to add upgrade processors back into the pool\n-            if (!processor.isUpgrade()) {\n+            if (processor !=null && !processor.isUpgrade()) {\n                 release(socket, processor, true, false);\n             }\n             return SocketState.CLOSED;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "FindBugs: Avoid possible NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1401092 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/3fa27bb9956d707ae6225af886d3e8ac61162425",
        "parent": "https://github.com/apache/tomcat/commit/1f2933fae204d0aefd4f7e2e623f3d8fa7c788a8",
        "bug_id": "tomcat_180",
        "file": [
            {
                "sha": "05a66365a5177b055e7ad8c776df3843efaf54a4",
                "filename": "java/org/apache/catalina/connector/Connector.java",
                "blob_url": "https://github.com/apache/tomcat/blob/3fa27bb9956d707ae6225af886d3e8ac61162425/java/org/apache/catalina/connector/Connector.java",
                "raw_url": "https://github.com/apache/tomcat/raw/3fa27bb9956d707ae6225af886d3e8ac61162425/java/org/apache/catalina/connector/Connector.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/Connector.java?ref=3fa27bb9956d707ae6225af886d3e8ac61162425",
                "patch": "@@ -765,7 +765,11 @@ public String getURIEncodingLower() {\n       */\n      public void setURIEncoding(String URIEncoding) {\n          this.URIEncoding = URIEncoding;\n-         this.URIEncodingLower = URIEncoding.toLowerCase(Locale.US);\n+         if (URIEncoding == null) {\n+             URIEncodingLower = null;\n+         } else {\n+             this.URIEncodingLower = URIEncoding.toLowerCase(Locale.US);\n+         }\n          setProperty(\"uRIEncoding\", URIEncoding);\n      }\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "58578: Avoid NPE when trying to do access logging on cookies for an unmapped request.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1712357 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/6cfc356d855f32911a30b70a9d2c39963be09980",
        "parent": "https://github.com/apache/tomcat/commit/0054ac699bece117427d426a7b509eb9753ecf18",
        "bug_id": "tomcat_181",
        "file": [
            {
                "sha": "048ac8b6618d06713e0c484d1e6f265d0d811abf",
                "filename": "java/org/apache/catalina/connector/Request.java",
                "blob_url": "https://github.com/apache/tomcat/blob/6cfc356d855f32911a30b70a9d2c39963be09980/java/org/apache/catalina/connector/Request.java",
                "raw_url": "https://github.com/apache/tomcat/raw/6cfc356d855f32911a30b70a9d2c39963be09980/java/org/apache/catalina/connector/Request.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/Request.java?ref=6cfc356d855f32911a30b70a9d2c39963be09980",
                "patch": "@@ -2892,6 +2892,10 @@ protected void convertCookies() {\n \n         cookiesConverted = true;\n \n+        if (getContext() == null) {\n+            return;\n+        }\n+\n         parseCookies();\n \n         ServerCookies serverCookies = coyoteRequest.getCookies();",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "FindBugs: Fix potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1366910 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/cbef331def8e088cc4199970f6716668acbc00bd",
        "parent": "https://github.com/apache/tomcat/commit/811fed0f4b585bcf130f3a4d86192cc635172664",
        "bug_id": "tomcat_182",
        "file": [
            {
                "sha": "3ce3f04137af023627d7c459645e58c5277a02d6",
                "filename": "java/org/apache/catalina/tribes/io/ReplicationStream.java",
                "blob_url": "https://github.com/apache/tomcat/blob/cbef331def8e088cc4199970f6716668acbc00bd/java/org/apache/catalina/tribes/io/ReplicationStream.java",
                "raw_url": "https://github.com/apache/tomcat/raw/cbef331def8e088cc4199970f6716668acbc00bd/java/org/apache/catalina/tribes/io/ReplicationStream.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/tribes/io/ReplicationStream.java?ref=cbef331def8e088cc4199970f6716668acbc00bd",
                "patch": "@@ -104,7 +104,12 @@ public ReplicationStream(InputStream stream,\n     protected Class<?> resolveProxyClass(String[] interfaces)\n             throws IOException, ClassNotFoundException {\n \n-        ClassLoader latestLoader = (classLoaders!=null && classLoaders.length==0)?null:classLoaders[0];\n+        ClassLoader latestLoader;\n+        if (classLoaders != null && classLoaders.length > 0) {\n+            latestLoader = classLoaders[0];\n+        } else {\n+            latestLoader = null;\n+        }\n         ClassLoader nonPublicLoader = null;\n         boolean hasNonPublicInterface = false;\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fingbugs: Fix possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1364419 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/6adec98e76da703363a82af6fa2b9cc0835e7b77",
        "parent": "https://github.com/apache/tomcat/commit/5b6ff1894787fd7214c6a40af6238cf8506e79fd",
        "bug_id": "tomcat_183",
        "file": [
            {
                "sha": "3fc157f7472a035ca22dcd9672852a1dbd24f520",
                "filename": "java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java",
                "blob_url": "https://github.com/apache/tomcat/blob/6adec98e76da703363a82af6fa2b9cc0835e7b77/java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java",
                "raw_url": "https://github.com/apache/tomcat/raw/6adec98e76da703363a82af6fa2b9cc0835e7b77/java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java",
                "status": "modified",
                "changes": 13,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java?ref=6adec98e76da703363a82af6fa2b9cc0835e7b77",
                "patch": "@@ -122,13 +122,14 @@ public boolean getStaticOnly() {\n     }\n \n     protected void sendPing() {\n-        if (failureDetector.get()!=null) {\n-            //we have a reference to the failure detector\n-            //piggy back on that dude\n+        if (failureDetector.get() != null) {\n+            // We have a reference to the failure detector\n+            // Piggy back on it\n             failureDetector.get().checkMembers(true);\n-        }else {\n-            if (staticOnly && staticMembers.get()!=null) {\n-                sendPingMessage(staticMembers.get().getMembers());\n+        } else {\n+            StaticMembershipInterceptor smi = staticMembers.get();\n+            if (staticOnly && smi != null) {\n+                sendPingMessage(smi.getMembers());\n             } else {\n                 sendPingMessage(getMembers());\n             }",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "FindBugs. Fix some possible NPEs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1361435 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/fe2a53e4c32cceca8019e180b8e538f851b72816",
        "parent": "https://github.com/apache/tomcat/commit/5498a4f8a58288d8084198399598d84b0e7a1cfa",
        "bug_id": "tomcat_184",
        "file": [
            {
                "sha": "4f9df6661291b693ff65e4dc32eddc25dc804bff",
                "filename": "java/org/apache/catalina/loader/LocalStrings.properties",
                "blob_url": "https://github.com/apache/tomcat/blob/fe2a53e4c32cceca8019e180b8e538f851b72816/java/org/apache/catalina/loader/LocalStrings.properties",
                "raw_url": "https://github.com/apache/tomcat/raw/fe2a53e4c32cceca8019e180b8e538f851b72816/java/org/apache/catalina/loader/LocalStrings.properties",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/loader/LocalStrings.properties?ref=fe2a53e4c32cceca8019e180b8e538f851b72816",
                "patch": "@@ -48,6 +48,7 @@ webappLoader.deploy=Deploying class repositories to work directory {0}\n webappLoader.jarDeploy=Deploy JAR {0} to {1}\n webappLoader.classDeploy=Deploy class files {0} to {1}\n webappLoader.reloadable=Cannot set reloadable property to {0}\n+webappLoader.setContext.ise=Setting the Context is not permitted while the loader is started.\n webappLoader.starting=Starting this Loader\n webappLoader.stopping=Stopping this Loader\n webappLoader.copyFailure=Failed to copy resources",
                "deletions": 0
            },
            {
                "sha": "6f74adf973a3c2e2ab00478b907d1978c01ae475",
                "filename": "java/org/apache/catalina/loader/WebappLoader.java",
                "blob_url": "https://github.com/apache/tomcat/blob/fe2a53e4c32cceca8019e180b8e538f851b72816/java/org/apache/catalina/loader/WebappLoader.java",
                "raw_url": "https://github.com/apache/tomcat/raw/fe2a53e4c32cceca8019e180b8e538f851b72816/java/org/apache/catalina/loader/WebappLoader.java",
                "status": "modified",
                "changes": 17,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/loader/WebappLoader.java?ref=fe2a53e4c32cceca8019e180b8e538f851b72816",
                "patch": "@@ -215,6 +215,15 @@ public Context getContext() {\n     @Override\n     public void setContext(Context context) {\n \n+        if (this.context == context) {\n+            return;\n+        }\n+\n+        if (getState().isAvailable()) {\n+            throw new IllegalStateException(\n+                    sm.getString(\"webappLoader.setContext.ise\"));\n+        }\n+\n         // Deregister from the old Context (if any)\n         if (this.context != null) {\n             this.context.removePropertyChangeListener(this);\n@@ -391,7 +400,7 @@ public void backgroundProcess() {\n                     context.reload();\n                 }\n             } finally {\n-                if (context.getLoader() != null) {\n+                if (context != null && context.getLoader() != null) {\n                     Thread.currentThread().setContextClassLoader\n                         (context.getLoader().getClassLoader());\n                 }\n@@ -602,10 +611,8 @@ protected void stopInternal() throws LifecycleException {\n         setState(LifecycleState.STOPPING);\n \n         // Remove context attributes as appropriate\n-        if (context != null) {\n-            ServletContext servletContext = context.getServletContext();\n-            servletContext.removeAttribute(Globals.CLASS_PATH_ATTR);\n-        }\n+        ServletContext servletContext = context.getServletContext();\n+        servletContext.removeAttribute(Globals.CLASS_PATH_ATTR);\n \n         // Throw away our current class loader\n         ((Lifecycle) classLoader).stop();",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE observed running unit tests with APR on Linux\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1359102 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/0c3740facb1793e25e9b114fd0457b12263b7863",
        "parent": "https://github.com/apache/tomcat/commit/4c03dfff1b9eb5aa61f7b35b835c29d4292c6e97",
        "bug_id": "tomcat_185",
        "file": [
            {
                "sha": "c0ecf7910241966fd6eabcf61ce84305504deb94",
                "filename": "java/org/apache/coyote/http11/Http11AprProtocol.java",
                "blob_url": "https://github.com/apache/tomcat/blob/0c3740facb1793e25e9b114fd0457b12263b7863/java/org/apache/coyote/http11/Http11AprProtocol.java",
                "raw_url": "https://github.com/apache/tomcat/raw/0c3740facb1793e25e9b114fd0457b12263b7863/java/org/apache/coyote/http11/Http11AprProtocol.java",
                "status": "modified",
                "changes": 11,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/Http11AprProtocol.java?ref=0c3740facb1793e25e9b114fd0457b12263b7863",
                "patch": "@@ -280,10 +280,13 @@ protected void longPoll(SocketWrapper<Long> socket,\n             if (processor.isAsync()) {\n                 // Async\n                 socket.setAsync(true);\n-            } else if (processor.isComet() && proto.endpoint.isRunning()) {\n-                ((AprEndpoint) proto.endpoint).getCometPoller().add(\n-                        socket.getSocket().longValue(),\n-                        proto.endpoint.getSoTimeout());\n+            } else if (processor.isComet()) {\n+                // Comet\n+                if (proto.endpoint.isRunning()) {\n+                    ((AprEndpoint) proto.endpoint).getCometPoller().add(\n+                            socket.getSocket().longValue(),\n+                            proto.endpoint.getSoTimeout());\n+                }\n             } else {\n                 // Upgraded\n                 ((AprEndpoint) proto.endpoint).getPoller().add(",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE triggered by r1356852\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1356867 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/1df18a4fe73729d9a4deda143ddedd2b3de8d408",
        "parent": "https://github.com/apache/tomcat/commit/bc782575de0aa9487861d26fe3994b49d57f6106",
        "bug_id": "tomcat_186",
        "file": [
            {
                "sha": "fd03a912861a28bfb1d8d07e9aea05a29005bbec",
                "filename": "test/org/apache/catalina/startup/TomcatBaseTest.java",
                "blob_url": "https://github.com/apache/tomcat/blob/1df18a4fe73729d9a4deda143ddedd2b3de8d408/test/org/apache/catalina/startup/TomcatBaseTest.java",
                "raw_url": "https://github.com/apache/tomcat/raw/1df18a4fe73729d9a4deda143ddedd2b3de8d408/test/org/apache/catalina/startup/TomcatBaseTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/startup/TomcatBaseTest.java?ref=1df18a4fe73729d9a4deda143ddedd2b3de8d408",
                "patch": "@@ -304,7 +304,7 @@ public int getLength() {\n \n             @Override\n             public int available() {\n-                if (done) return 0;\n+                if (done || body == null) return 0;\n                 else return body.length;\n             }\n         };",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix an NPE if available() is called before the input buffer is created.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1710022 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/15cad1c44d7b24f7cee262b95b21ded1766970d9",
        "parent": "https://github.com/apache/tomcat/commit/33b7954bc0c669714daa245aaec6634aae603acb",
        "bug_id": "tomcat_187",
        "file": [
            {
                "sha": "87534049fc3e1d279ff4392387cf17f648de5a06",
                "filename": "java/org/apache/coyote/http2/Stream.java",
                "blob_url": "https://github.com/apache/tomcat/blob/15cad1c44d7b24f7cee262b95b21ded1766970d9/java/org/apache/coyote/http2/Stream.java",
                "raw_url": "https://github.com/apache/tomcat/raw/15cad1c44d7b24f7cee262b95b21ded1766970d9/java/org/apache/coyote/http2/Stream.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http2/Stream.java?ref=15cad1c44d7b24f7cee262b95b21ded1766970d9",
                "patch": "@@ -616,6 +616,9 @@ synchronized boolean isRequestBodyFullyRead() {\n \n \n         synchronized int available() {\n+            if (inBuffer == null) {\n+                return 0;\n+            }\n             return inBuffer.position();\n         }\n ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE in tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1293016 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/a90c72b3dc4bfbbc3d875268e9151a69c62a9eb6",
        "parent": "https://github.com/apache/tomcat/commit/0211c3e37e450df95f8c86f0085f128433a1cd77",
        "bug_id": "tomcat_188",
        "file": [
            {
                "sha": "3acfc7d40bb25753076fe5f4dfbc7399975ddb63",
                "filename": "java/org/apache/catalina/websocket/WsOutbound.java",
                "blob_url": "https://github.com/apache/tomcat/blob/a90c72b3dc4bfbbc3d875268e9151a69c62a9eb6/java/org/apache/catalina/websocket/WsOutbound.java",
                "raw_url": "https://github.com/apache/tomcat/raw/a90c72b3dc4bfbbc3d875268e9151a69c62a9eb6/java/org/apache/catalina/websocket/WsOutbound.java",
                "status": "modified",
                "changes": 21,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/websocket/WsOutbound.java?ref=a90c72b3dc4bfbbc3d875268e9151a69c62a9eb6",
                "patch": "@@ -61,6 +61,10 @@ public WsOutbound(UpgradeOutbound upgradeOutbound) {\n      *                      the WebSocket frame to the client\n      */\n     public void writeBinaryData(int b) throws IOException {\n+        if (closed) {\n+            throw new IOException(\"Closed\");\n+        }\n+\n         if (bb.position() == bb.capacity()) {\n             doFlush(false);\n         }\n@@ -87,6 +91,10 @@ public void writeBinaryData(int b) throws IOException {\n      *                      the WebSocket frame to the client\n      */\n     public void writeTextData(char c) throws IOException {\n+        if (closed) {\n+            throw new IOException(\"Closed\");\n+        }\n+\n         if (cb.position() == cb.capacity()) {\n             doFlush(false);\n         }\n@@ -112,6 +120,10 @@ public void writeTextData(char c) throws IOException {\n      * @throws IOException  If an error occurs writing to the client\n      */\n     public void writeBinaryMessage(ByteBuffer msgBb) throws IOException {\n+        if (closed) {\n+            throw new IOException(\"Closed\");\n+        }\n+\n         if (text != null) {\n             // Empty the buffer\n             flush();\n@@ -131,6 +143,10 @@ public void writeBinaryMessage(ByteBuffer msgBb) throws IOException {\n      * @throws IOException  If an error occurs writing to the client\n      */\n     public void writeTextMessage(CharBuffer msgCb) throws IOException {\n+        if (closed) {\n+            throw new IOException(\"Closed\");\n+        }\n+\n         if (text != null) {\n             // Empty the buffer\n             flush();\n@@ -146,6 +162,9 @@ public void writeTextMessage(CharBuffer msgCb) throws IOException {\n      * @throws IOException  If an error occurs writing to the client\n      */\n     public void flush() throws IOException {\n+        if (closed) {\n+            throw new IOException(\"Closed\");\n+        }\n         doFlush(true);\n     }\n \n@@ -264,7 +283,7 @@ public void pong(ByteBuffer data) throws IOException {\n         // TODO Think about threading requirements for writing. This is not\n         // currently thread safe and writing almost certainly needs to be.\n         if (closed) {\n-            // TODO - handle this - ISE?\n+            throw new IOException(\"Closed\");\n         }\n \n         doFlush(true);",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE if class / interface is not present\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1239024 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/c099bfbbe496f8dd6b23fcb634dfb2acbb895757",
        "parent": "https://github.com/apache/tomcat/commit/de1c9099d7f94a8e04438db68424e40ad17d3898",
        "bug_id": "tomcat_189",
        "file": [
            {
                "sha": "cf4887b9113bdad2cdc6c9dd8434d1456dc197da",
                "filename": "java/org/apache/catalina/startup/ContextConfig.java",
                "blob_url": "https://github.com/apache/tomcat/blob/c099bfbbe496f8dd6b23fcb634dfb2acbb895757/java/org/apache/catalina/startup/ContextConfig.java",
                "raw_url": "https://github.com/apache/tomcat/raw/c099bfbbe496f8dd6b23fcb634dfb2acbb895757/java/org/apache/catalina/startup/ContextConfig.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/startup/ContextConfig.java?ref=c099bfbbe496f8dd6b23fcb634dfb2acbb895757",
                "patch": "@@ -2101,6 +2101,9 @@ private void populateJavaClassCache(String className) {\n             String name = className.replace('.', '/') + \".class\";\n             InputStream is =\n                     context.getLoader().getClassLoader().getResourceAsStream(name);\n+            if (is == null) {\n+                return;\n+            }\n             ClassParser parser = new ClassParser(is, null);\n             try {\n                 JavaClass clazz = parser.parse();",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE in parameter re-factoring identified by JSP TCK.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1190481 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/7f8fa746e81fb3dd851a107717e37d519b922157",
        "parent": "https://github.com/apache/tomcat/commit/e06c7d5f6f6bc3c6401c95bebbd7abd20ace96e3",
        "bug_id": "tomcat_190",
        "file": [
            {
                "sha": "8270e1e55b213d46aa3979f2c2a2271290a5c577",
                "filename": "java/org/apache/tomcat/util/http/Parameters.java",
                "blob_url": "https://github.com/apache/tomcat/blob/7f8fa746e81fb3dd851a107717e37d519b922157/java/org/apache/tomcat/util/http/Parameters.java",
                "raw_url": "https://github.com/apache/tomcat/raw/7f8fa746e81fb3dd851a107717e37d519b922157/java/org/apache/tomcat/util/http/Parameters.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/http/Parameters.java?ref=7f8fa746e81fb3dd851a107717e37d519b922157",
                "patch": "@@ -122,6 +122,9 @@ public void addParameterValues( String key, String[] newValues) {\n         handleQueryParameters();\n         // no \"facade\"\n         ArrayList<String> values = paramHashValues.get(name);\n+        if (values == null) {\n+            return null;\n+        }\n         return values.toArray(new String[values.size()]);\n     }\n ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Prevent NPE if JNDI is disabled.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1172546 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/dea2921c43c4b74871abd4e772ce4d5b1ee22c2b",
        "parent": "https://github.com/apache/tomcat/commit/8b5228b0ccb5bf4b2504cbbb2f8f04a682a8b70c",
        "bug_id": "tomcat_191",
        "file": [
            {
                "sha": "a542e3db19058e12311a4964ce7d2a2d259a39e9",
                "filename": "java/org/apache/catalina/core/DefaultInstanceManager.java",
                "blob_url": "https://github.com/apache/tomcat/blob/dea2921c43c4b74871abd4e772ce4d5b1ee22c2b/java/org/apache/catalina/core/DefaultInstanceManager.java",
                "raw_url": "https://github.com/apache/tomcat/raw/dea2921c43c4b74871abd4e772ce4d5b1ee22c2b/java/org/apache/catalina/core/DefaultInstanceManager.java",
                "status": "modified",
                "changes": 16,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/DefaultInstanceManager.java?ref=dea2921c43c4b74871abd4e772ce4d5b1ee22c2b",
                "patch": "@@ -179,13 +179,15 @@ protected void postConstruct(Object instance, final Class<?> clazz)\n         // At the end the postconstruct annotated\n         // method is invoked\n         List<AnnotationCacheEntry> annotations = annotationCache.get(clazz);\n-        for (AnnotationCacheEntry entry : annotations) {\n-            if (entry.getType() == AnnotationCacheEntryType.POST_CONSTRUCT) {\n-                Method postConstruct = (Method) entry.getAccessibleObject();\n-                boolean accessibility = postConstruct.isAccessible();\n-                postConstruct.setAccessible(true);\n-                postConstruct.invoke(instance);\n-                postConstruct.setAccessible(accessibility);\n+        if (annotations != null) {\n+            for (AnnotationCacheEntry entry : annotations) {\n+                if (entry.getType() == AnnotationCacheEntryType.POST_CONSTRUCT) {\n+                    Method postConstruct = (Method) entry.getAccessibleObject();\n+                    boolean accessibility = postConstruct.isAccessible();\n+                    postConstruct.setAccessible(true);\n+                    postConstruct.invoke(instance);\n+                    postConstruct.setAccessible(accessibility);\n+                }\n             }\n         }\n     }",
                "deletions": 7
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix some false npe warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1154579 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/8953fc375e00efad97d64a73116c912766828ae7",
        "parent": "https://github.com/apache/tomcat/commit/7be73e4ea17e68bb455177c9a1c1f32844c0feb7",
        "bug_id": "tomcat_192",
        "file": [
            {
                "sha": "1383f16d3d109da1c02a96a59a2d3ad1e97e6079",
                "filename": "java/org/apache/jasper/compiler/JspUtil.java",
                "blob_url": "https://github.com/apache/tomcat/blob/8953fc375e00efad97d64a73116c912766828ae7/java/org/apache/jasper/compiler/JspUtil.java",
                "raw_url": "https://github.com/apache/tomcat/raw/8953fc375e00efad97d64a73116c912766828ae7/java/org/apache/jasper/compiler/JspUtil.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/JspUtil.java?ref=8953fc375e00efad97d64a73116c912766828ae7",
                "patch": "@@ -119,6 +119,7 @@ public static void checkAttributes(String typeOfTag, Node n,\n         int tempLength = (attrs == null) ? 0 : attrs.getLength();\n         Vector<String> temp = new Vector<String>(tempLength, 1);\n         for (int i = 0; i < tempLength; i++) {\n+            @SuppressWarnings(\"null\")  // If attrs==null, tempLength == 0\n             String qName = attrs.getQName(i);\n             if ((!qName.equals(\"xmlns\")) && (!qName.startsWith(\"xmlns:\")))\n                 temp.addElement(qName);",
                "deletions": 0
            },
            {
                "sha": "665d74393d9042d9ef8be44f36a455bb7734a8b2",
                "filename": "java/org/apache/jasper/compiler/PageDataImpl.java",
                "blob_url": "https://github.com/apache/tomcat/blob/8953fc375e00efad97d64a73116c912766828ae7/java/org/apache/jasper/compiler/PageDataImpl.java",
                "raw_url": "https://github.com/apache/tomcat/raw/8953fc375e00efad97d64a73116c912766828ae7/java/org/apache/jasper/compiler/PageDataImpl.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/PageDataImpl.java?ref=8953fc375e00efad97d64a73116c912766828ae7",
                "patch": "@@ -510,6 +510,7 @@ private void appendPageDirective(Node.PageDirective n) {\n             Attributes attrs = n.getAttributes();\n             int len = (attrs == null) ? 0 : attrs.getLength();\n             for (int i=0; i<len; i++) {\n+                @SuppressWarnings(\"null\")  // If attrs==null, len == 0\n                 String attrName = attrs.getQName(i);\n                 if (!\"pageEncoding\".equals(attrName)\n                         && !\"contentType\".equals(attrName)) {\n@@ -530,6 +531,7 @@ private void appendPageDirective(Node.PageDirective n) {\n \n             // append remaining attributes\n             for (int i=0; i<len; i++) {\n+                @SuppressWarnings(\"null\")  // If attrs==null, len == 0\n                 String attrName = attrs.getQName(i);\n                 if (\"import\".equals(attrName) || \"contentType\".equals(attrName)\n                         || \"pageEncoding\".equals(attrName)) {\n@@ -601,6 +603,7 @@ private void appendTagDirective(Node.TagDirective n)\n             Attributes attrs = n.getAttributes();\n             int len = (attrs == null) ? 0 : attrs.getLength();\n             for (int i=0; i<len; i++) {\n+                @SuppressWarnings(\"null\")  // If attrs==null, len == 0\n                 String attrName = attrs.getQName(i);\n                 if (!\"pageEncoding\".equals(attrName)) {\n                     append = true;\n@@ -696,6 +699,7 @@ private void printAttributes(Node n, boolean addDefaultNS) {\n             Attributes attrs = n.getTaglibAttributes();\n             int len = (attrs == null) ? 0 : attrs.getLength();\n             for (int i=0; i<len; i++) {\n+                @SuppressWarnings(\"null\")  // If attrs==null, len == 0\n                 String name = attrs.getQName(i);\n                 String value = attrs.getValue(i);\n                 buf.append(\"  \").append(name).append(\"=\\\"\").append(value).append(\"\\\"\\n\");\n@@ -708,6 +712,7 @@ private void printAttributes(Node n, boolean addDefaultNS) {\n             len = (attrs == null) ? 0 : attrs.getLength();\n             boolean defaultNSSeen = false;\n             for (int i=0; i<len; i++) {\n+                @SuppressWarnings(\"null\")  // If attrs==null, len == 0\n                 String name = attrs.getQName(i);\n                 String value = attrs.getValue(i);\n                 buf.append(\"  \").append(name).append(\"=\\\"\").append(value).append(\"\\\"\\n\");\n@@ -724,6 +729,7 @@ private void printAttributes(Node n, boolean addDefaultNS) {\n             attrs = n.getAttributes();\n             len = (attrs == null) ? 0 : attrs.getLength();\n             for (int i=0; i<len; i++) {\n+                @SuppressWarnings(\"null\")  // If attrs==null, len == 0\n                 String name = attrs.getQName(i);\n                 String value = attrs.getValue(i);\n                 buf.append(\"  \").append(name).append(\"=\\\"\");",
                "deletions": 0
            },
            {
                "sha": "ce6ee9f3b9f9a41b5cbabd0ec743d376328cdbd6",
                "filename": "java/org/apache/jasper/compiler/Validator.java",
                "blob_url": "https://github.com/apache/tomcat/blob/8953fc375e00efad97d64a73116c912766828ae7/java/org/apache/jasper/compiler/Validator.java",
                "raw_url": "https://github.com/apache/tomcat/raw/8953fc375e00efad97d64a73116c912766828ae7/java/org/apache/jasper/compiler/Validator.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/Validator.java?ref=8953fc375e00efad97d64a73116c912766828ae7",
                "patch": "@@ -896,6 +896,7 @@ public void visit(Node.JspElement n) throws JasperException {\n             if (attrs == null) {\n                 err.jspError(n, \"jsp.error.jspelement.missing.name\");\n             }\n+            @SuppressWarnings(\"null\") // Exception will have been thrown above\n             int xmlAttrLen = attrs.getLength();\n \n             Node.Nodes namedAttrs = n.getNamedAttributeNodes();",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Refactor to avoid NPEs during test\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1143488 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/ad5915faa2319a4d9323ef32c563e2005897ff75",
        "parent": "https://github.com/apache/tomcat/commit/496ea9096544f1ac2f073628eee591e93eafab53",
        "bug_id": "tomcat_193",
        "file": [
            {
                "sha": "1c9559604df4cfb9ff78c7230af5204b59de5902",
                "filename": "test/org/apache/tomcat/util/threads/TestLimitLatch.java",
                "blob_url": "https://github.com/apache/tomcat/blob/ad5915faa2319a4d9323ef32c563e2005897ff75/test/org/apache/tomcat/util/threads/TestLimitLatch.java",
                "raw_url": "https://github.com/apache/tomcat/raw/ad5915faa2319a4d9323ef32c563e2005897ff75/test/org/apache/tomcat/util/threads/TestLimitLatch.java",
                "status": "modified",
                "changes": 39,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/tomcat/util/threads/TestLimitLatch.java?ref=ad5915faa2319a4d9323ef32c563e2005897ff75",
                "patch": "@@ -20,26 +20,17 @@\n \n public class TestLimitLatch extends TestCase {\n \n-    private volatile LimitLatch latch = null;\n-\n-    @Override\n-    public void tearDown() {\n-        LimitLatch temp = latch;\n-        if (temp!=null) temp.releaseAll();\n-        latch = null;\n-    }\n-\n     public void testNoThreads() throws Exception {\n-        latch = new LimitLatch(0);\n+        LimitLatch latch = new LimitLatch(0);\n         assertEquals(\"No threads should be waiting\", false,\n                 latch.hasQueuedThreads());\n     }\n \n     public void testOneThreadNoWait() throws Exception {\n-        latch = new LimitLatch(1);\n+        LimitLatch latch = new LimitLatch(1);\n         assertEquals(\"No threads should be waiting\", false,\n                 latch.hasQueuedThreads());\n-        Thread testThread = new TestThread();\n+        Thread testThread = new TestThread(latch);\n         testThread.start();\n         Thread.sleep(50);\n         assertEquals(\"0 threads should be waiting\", 0,\n@@ -51,10 +42,10 @@ public void testOneThreadNoWait() throws Exception {\n     }\n \n     public void testOneThreadWaitCountUp() throws Exception {\n-        latch = new LimitLatch(1);\n+        LimitLatch latch = new LimitLatch(1);\n         assertEquals(\"No threads should be waiting\", false,\n                 latch.hasQueuedThreads());\n-        Thread testThread = new TestThread();\n+        Thread testThread = new TestThread(latch);\n         latch.countUpOrAwait();\n         testThread.start();\n         Thread.sleep(50);\n@@ -67,10 +58,10 @@ public void testOneThreadWaitCountUp() throws Exception {\n     }\n \n     public void testOneRelease() throws Exception {\n-        latch = new LimitLatch(1);\n+        LimitLatch latch = new LimitLatch(1);\n         assertEquals(\"No threads should be waiting\", false,\n                 latch.hasQueuedThreads());\n-        Thread testThread = new TestThread();\n+        Thread testThread = new TestThread(latch);\n         latch.countUpOrAwait();\n         testThread.start();\n         Thread.sleep(50);\n@@ -83,12 +74,12 @@ public void testOneRelease() throws Exception {\n     }\n \n     public void testTenWait() throws Exception {\n-        latch = new LimitLatch(10);\n+        LimitLatch latch = new LimitLatch(10);\n         assertEquals(\"No threads should be waiting\", false,\n                 latch.hasQueuedThreads());\n         Thread[] testThread = new TestThread[30];\n         for (int i = 0; i < 30; i++) {\n-            testThread[i] = new TestThread(1000);\n+            testThread[i] = new TestThread(latch, 1000);\n             testThread[i].start();\n         }\n         Thread.sleep(50);\n@@ -105,12 +96,14 @@ public void testTenWait() throws Exception {\n     private class TestThread extends Thread {\n         \n         private int holdTime;\n-        \n-        public TestThread() {\n-            this(100);\n+        private LimitLatch latch;\n+\n+        public TestThread(LimitLatch latch) {\n+            this(latch, 100);\n         }\n         \n-        public TestThread(int holdTime) {\n+        public TestThread(LimitLatch latch, int holdTime) {\n+            this.latch = latch;\n             this.holdTime = holdTime;\n         }\n  \n@@ -120,6 +113,8 @@ public void run() {\n                 latch.countUpOrAwait();\n                 Thread.sleep(holdTime);\n                 latch.countDown();\n+            } catch (NullPointerException npe) {\n+                npe.printStackTrace();\n             } catch (InterruptedException x) {\n                 x.printStackTrace();\n             }",
                "deletions": 22
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix possible NPE when serving STM servlets\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1141948 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/b67bf9b557fc1e3af66c26ae93d4dc1b353ca504",
        "parent": "https://github.com/apache/tomcat/commit/ea2a5298e04a7ceba033d44ff84b1bd2fdeb0056",
        "bug_id": "tomcat_194",
        "file": [
            {
                "sha": "95d857fb8822fa5d3581093ba8920243fe92460d",
                "filename": "java/org/apache/catalina/core/StandardWrapper.java",
                "blob_url": "https://github.com/apache/tomcat/blob/b67bf9b557fc1e3af66c26ae93d4dc1b353ca504/java/org/apache/catalina/core/StandardWrapper.java",
                "raw_url": "https://github.com/apache/tomcat/raw/b67bf9b557fc1e3af66c26ae93d4dc1b353ca504/java/org/apache/catalina/core/StandardWrapper.java",
                "status": "modified",
                "changes": 7,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/StandardWrapper.java?ref=b67bf9b557fc1e3af66c26ae93d4dc1b353ca504",
                "patch": "@@ -1115,10 +1115,11 @@ public synchronized Servlet loadServlet() throws ServletException {\n \n             classLoadTime=(int) (System.currentTimeMillis() -t1);\n \n-            singleThreadModel = servlet instanceof SingleThreadModel;\n-            if (singleThreadModel) {\n-                if (instancePool == null)\n+            if (servlet instanceof SingleThreadModel) {\n+                if (instancePool == null) {\n                     instancePool = new Stack<Servlet>();\n+                }\n+                singleThreadModel = true;\n             }\n \n             initServlet(servlet);",
                "deletions": 3
            },
            {
                "sha": "1408706322c26e2bf4cada206b61ea90e1eacfac",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/b67bf9b557fc1e3af66c26ae93d4dc1b353ca504/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/b67bf9b557fc1e3af66c26ae93d4dc1b353ca504/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=b67bf9b557fc1e3af66c26ae93d4dc1b353ca504",
                "patch": "@@ -186,6 +186,10 @@\n         support (enhancement <bug>12428</bug>) that could trigger authentication\n         even if preemptive authentication was disabled. (markt) \n       </fix>\n+      <fix>\n+        Prevent possible NPE when serving Servlets that implement the\n+        SingleThreadModel interface. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE triggered by r1127962\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1128386 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/6f3cce6bb887ee5cca7e84674b4b2d8a09ddcfc0",
        "parent": "https://github.com/apache/tomcat/commit/bd3e05ff9b9a0868e614732bb2055e79a069997a",
        "bug_id": "tomcat_195",
        "file": [
            {
                "sha": "84fa371cd4deeeba3d21dcf6ba8d1430c2a96e56",
                "filename": "java/org/apache/tomcat/util/net/AbstractEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/6f3cce6bb887ee5cca7e84674b4b2d8a09ddcfc0/java/org/apache/tomcat/util/net/AbstractEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/6f3cce6bb887ee5cca7e84674b4b2d8a09ddcfc0/java/org/apache/tomcat/util/net/AbstractEndpoint.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/AbstractEndpoint.java?ref=6f3cce6bb887ee5cca7e84674b4b2d8a09ddcfc0",
                "patch": "@@ -114,8 +114,10 @@ public SocketProperties getSocketProperties() {\n     public void setMaxConnections(int maxCon) {\n         this.maxConnections = maxCon;\n         LimitLatch latch = this.connectionLimitLatch;\n-        // Update the latch that enforces this\n-        latch.setLimit(maxCon);\n+        if (latch != null) {\n+            // Update the latch that enforces this\n+            latch.setLimit(maxCon);\n+        }\n     }\n \n     public int  getMaxConnections() { return this.maxConnections; }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE is lastWrite is not being used\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1103228 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/27e98589422ce4ebeebe742e0af8959eff5a61b8",
        "parent": "https://github.com/apache/tomcat/commit/3542f441d907cc7ab4911761131c406220a9b795",
        "bug_id": "tomcat_196",
        "file": [
            {
                "sha": "cc0b1d84ddc07f6a6ed0d23f85cd3ce1d43cbb86",
                "filename": "java/org/apache/tomcat/util/net/NioBlockingSelector.java",
                "blob_url": "https://github.com/apache/tomcat/blob/27e98589422ce4ebeebe742e0af8959eff5a61b8/java/org/apache/tomcat/util/net/NioBlockingSelector.java",
                "raw_url": "https://github.com/apache/tomcat/raw/27e98589422ce4ebeebe742e0af8959eff5a61b8/java/org/apache/tomcat/util/net/NioBlockingSelector.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/NioBlockingSelector.java?ref=27e98589422ce4ebeebe742e0af8959eff5a61b8",
                "patch": "@@ -92,7 +92,7 @@ public int write(ByteBuffer buf, NioChannel socket, long writeTimeout,MutableInt\n             while ( (!timedout) && buf.hasRemaining()) {\n                 if (keycount > 0) { //only write if we were registered for a write\n                     int cnt = socket.write(buf); //write the data\n-                    lastWrite.set(cnt);\n+                    if (lastWrite != null) lastWrite.set(cnt);\n                     if (cnt == -1)\n                         throw new EOFException();\n                     written += cnt;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPEs trying to re-negotiate with NIO\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1074597 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/ed4ff14f6314446e75a5f00c59166690d08b2d27",
        "parent": "https://github.com/apache/tomcat/commit/9d542ed0cdab0d5ef58af4bddfbbcb5482e9ef98",
        "bug_id": "tomcat_197",
        "file": [
            {
                "sha": "757b7b8805ff50f120aa09284e98449ffd5c089d",
                "filename": "java/org/apache/tomcat/util/net/jsse/JSSESupport.java",
                "blob_url": "https://github.com/apache/tomcat/blob/ed4ff14f6314446e75a5f00c59166690d08b2d27/java/org/apache/tomcat/util/net/jsse/JSSESupport.java",
                "raw_url": "https://github.com/apache/tomcat/raw/ed4ff14f6314446e75a5f00c59166690d08b2d27/java/org/apache/tomcat/util/net/jsse/JSSESupport.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/jsse/JSSESupport.java?ref=ed4ff14f6314446e75a5f00c59166690d08b2d27",
                "patch": "@@ -143,7 +143,7 @@ public String getCipherSuite() throws IOException {\n         }\n         if (jsseCerts == null)\n             jsseCerts = new X509Certificate[0];\n-        if(jsseCerts.length <= 0 && force) {\n+        if(jsseCerts.length <= 0 && force && ssl != null) {\n             session.invalidate();\n             handShake();\n             session = ssl.getSession();",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE if no u-a header\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1074159 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/6d692c02a8bf55b61a8f127e79d5a9c660750517",
        "parent": "https://github.com/apache/tomcat/commit/acac2a20bdcc7db049d7a95e87a3a58f06494c1c",
        "bug_id": "tomcat_198",
        "file": [
            {
                "sha": "c0f88818a937c0a9acfb104ed69381a2e7f52451",
                "filename": "java/org/apache/catalina/valves/CrawlerSessionManagerValve.java",
                "blob_url": "https://github.com/apache/tomcat/blob/6d692c02a8bf55b61a8f127e79d5a9c660750517/java/org/apache/catalina/valves/CrawlerSessionManagerValve.java",
                "raw_url": "https://github.com/apache/tomcat/raw/6d692c02a8bf55b61a8f127e79d5a9c660750517/java/org/apache/catalina/valves/CrawlerSessionManagerValve.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/valves/CrawlerSessionManagerValve.java?ref=6d692c02a8bf55b61a8f127e79d5a9c660750517",
                "patch": "@@ -125,10 +125,13 @@ public void invoke(Request request, Response response) throws IOException,\n \n             // Is this a crawler - cheack the UA headers\n             Enumeration<String> uaHeaders = request.getHeaders(\"user-agent\");\n-            String uaHeader = uaHeaders.nextElement();\n+            String uaHeader = null;\n+            if (uaHeaders.hasMoreElements()) {\n+                uaHeader = uaHeaders.nextElement();\n+            }\n             \n             // If more than one UA header - assume not a bot\n-            if (!uaHeaders.hasMoreElements()) {\n+            if (uaHeader != null && !uaHeaders.hasMoreElements()) {\n \n                 if (log.isDebugEnabled()) {\n                     log.debug(request.hashCode() + \": UserAgent=\" + uaHeader);",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Prevent NPE in unit tests as a result of r1067718\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1071559 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/15afcc8bd79d949508987e9d1a8b5c11235f5d0c",
        "parent": "https://github.com/apache/tomcat/commit/ff80284498395f24e05728e1c5fc2ca52cd6448b",
        "bug_id": "tomcat_199",
        "file": [
            {
                "sha": "13812533fe71d2e464b1fe4275c5a7af6b37448d",
                "filename": "test/org/apache/catalina/valves/TestRemoteIpValve.java",
                "blob_url": "https://github.com/apache/tomcat/blob/15afcc8bd79d949508987e9d1a8b5c11235f5d0c/test/org/apache/catalina/valves/TestRemoteIpValve.java",
                "raw_url": "https://github.com/apache/tomcat/raw/15afcc8bd79d949508987e9d1a8b5c11235f5d0c/test/org/apache/catalina/valves/TestRemoteIpValve.java",
                "status": "modified",
                "changes": 31,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/valves/TestRemoteIpValve.java?ref=15afcc8bd79d949508987e9d1a8b5c11235f5d0c",
                "patch": "@@ -70,7 +70,14 @@ public void invoke(Request request, Response response) throws IOException, Servl\n             this.serverPort = request.getServerPort();\n         }\n     }\n-    \n+\n+    public static class MockRequest extends Request {\n+        @Override\n+        public void setAttribute(String name, Object value) {\n+            // NOOP. Prevents NPE during testing.\n+        }\n+    }\n+\n     public void testListToCommaDelimitedString() {\n         List<String> elements = Arrays.asList(\"element1\", \"element2\", \"element3\");\n         String actual = RemoteIpValve.listToCommaDelimitedString(elements);\n@@ -98,7 +105,7 @@ public void testInvokeAllowedRemoteAddrWithNullRemoteIpHeader() throws Exception\n         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();\n         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);\n         \n-        Request request = new Request();\n+        Request request = new MockRequest();\n         request.setCoyoteRequest(new org.apache.coyote.Request());\n         request.setRemoteAddr(\"192.168.0.10\");\n         request.setRemoteHost(\"remote-host-original-value\");\n@@ -138,7 +145,7 @@ public void testInvokeAllProxiesAreTrusted() throws Exception {\n         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();\n         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);\n         \n-        Request request = new Request();\n+        Request request = new MockRequest();\n         request.setCoyoteRequest(new org.apache.coyote.Request());\n         request.setRemoteAddr(\"192.168.0.10\");\n         request.setRemoteHost(\"remote-host-original-value\");\n@@ -178,7 +185,7 @@ public void testInvokeAllProxiesAreTrustedOrInternal() throws Exception {\n         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();\n         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);\n         \n-        Request request = new Request();\n+        Request request = new MockRequest();\n         request.setCoyoteRequest(new org.apache.coyote.Request());\n         request.setRemoteAddr(\"192.168.0.10\");\n         request.setRemoteHost(\"remote-host-original-value\");\n@@ -219,7 +226,7 @@ public void testInvokeAllProxiesAreInternal() throws Exception {\n         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();\n         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);\n         \n-        Request request = new Request();\n+        Request request = new MockRequest();\n         request.setCoyoteRequest(new org.apache.coyote.Request());\n         request.setRemoteAddr(\"192.168.0.10\");\n         request.setRemoteHost(\"remote-host-original-value\");\n@@ -259,7 +266,7 @@ public void testInvokeAllProxiesAreTrustedAndRemoteAddrMatchRegexp() throws Exce\n         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();\n         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);\n         \n-        Request request = new Request();\n+        Request request = new MockRequest();\n         request.setCoyoteRequest(new org.apache.coyote.Request());\n         request.setRemoteAddr(\"192.168.0.10\");\n         request.setRemoteHost(\"remote-host-original-value\");\n@@ -299,7 +306,7 @@ public void testInvokeXforwardedProtoSaysHttpsForIncomingHttpRequest() throws Ex\n         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();\n         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);\n         \n-        Request request = new Request();\n+        Request request = new MockRequest();\n         request.setCoyoteRequest(new org.apache.coyote.Request());\n         // client ip\n         request.setRemoteAddr(\"192.168.0.10\");\n@@ -363,7 +370,7 @@ public void testInvokeXforwardedProtoIsNullForIncomingHttpRequest() throws Excep\n         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();\n         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);\n         \n-        Request request = new Request();\n+        Request request = new MockRequest();\n         request.setCoyoteRequest(new org.apache.coyote.Request());\n         // client ip\n         request.setRemoteAddr(\"192.168.0.10\");\n@@ -427,7 +434,7 @@ public void testInvokeXforwardedProtoSaysHttpForIncomingHttpsRequest() throws Ex\n         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();\n         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);\n         \n-        Request request = new Request();\n+        Request request = new MockRequest();\n         request.setCoyoteRequest(new org.apache.coyote.Request());\n         // client ip\n         request.setRemoteAddr(\"192.168.0.10\");\n@@ -491,7 +498,7 @@ public void testInvokeXforwardedProtoIsNullForIncomingHttpsRequest() throws Exce\n         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();\n         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);\n         \n-        Request request = new Request();\n+        Request request = new MockRequest();\n         request.setCoyoteRequest(new org.apache.coyote.Request());\n         // client ip\n         request.setRemoteAddr(\"192.168.0.10\");\n@@ -556,7 +563,7 @@ public void testInvokeNotAllowedRemoteAddr() throws Exception {\n         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();\n         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);\n         \n-        Request request = new Request();\n+        Request request = new MockRequest();\n         request.setCoyoteRequest(new org.apache.coyote.Request());\n         request.setRemoteAddr(\"not-allowed-internal-proxy\");\n         request.setRemoteHost(\"not-allowed-internal-proxy-host\");\n@@ -595,7 +602,7 @@ public void testInvokeUntrustedProxyInTheChain() throws Exception {\n         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();\n         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);\n         \n-        Request request = new Request();\n+        Request request = new MockRequest();\n         request.setCoyoteRequest(new org.apache.coyote.Request());\n         request.setRemoteAddr(\"192.168.0.10\");\n         request.setRemoteHost(\"remote-host-original-value\");",
                "deletions": 12
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Prevent NPE in unit tests as a result of r1067718\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1071556 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/459b921d6d852ae542fd14af3ebce5a6eb238621",
        "parent": "https://github.com/apache/tomcat/commit/9b1f855256ab63434eb2cc4b3e9df3dd5a4a01b9",
        "bug_id": "tomcat_200",
        "file": [
            {
                "sha": "4c3be0f9cc392f791a8e73aac02ae5dab3ef0071",
                "filename": "test/org/apache/catalina/filters/TestRemoteIpFilter.java",
                "blob_url": "https://github.com/apache/tomcat/blob/459b921d6d852ae542fd14af3ebce5a6eb238621/test/org/apache/catalina/filters/TestRemoteIpFilter.java",
                "raw_url": "https://github.com/apache/tomcat/raw/459b921d6d852ae542fd14af3ebce5a6eb238621/test/org/apache/catalina/filters/TestRemoteIpFilter.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/filters/TestRemoteIpFilter.java?ref=459b921d6d852ae542fd14af3ebce5a6eb238621",
                "patch": "@@ -118,6 +118,11 @@ public void addHeader(String name, String value) {\n         public void setScheme(String scheme) {\n             getCoyoteRequest().scheme().setString(scheme);\n         }\n+\n+        @Override\n+        public void setAttribute(String name, Object value) {\n+            // NOOP. Prevents NPE during testing.\n+        }\n     }\n \n     public static final String TEMP_DIR = System.getProperty(\"java.io.tmpdir\");",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPEs\nRemove FindBugs warning\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1059587 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/74c31b8e0d698935cc3d35167d90a3a8bdf727a1",
        "parent": "https://github.com/apache/tomcat/commit/36bd9859328a21583178659d01ae29dcf63eebfc",
        "bug_id": "tomcat_201",
        "file": [
            {
                "sha": "16aeb79031197547be2dd41165acc28a65f2c145",
                "filename": "java/org/apache/naming/factory/SendMailFactory.java",
                "blob_url": "https://github.com/apache/tomcat/blob/74c31b8e0d698935cc3d35167d90a3a8bdf727a1/java/org/apache/naming/factory/SendMailFactory.java",
                "raw_url": "https://github.com/apache/tomcat/raw/74c31b8e0d698935cc3d35167d90a3a8bdf727a1/java/org/apache/naming/factory/SendMailFactory.java",
                "status": "modified",
                "changes": 12,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/naming/factory/SendMailFactory.java?ref=74c31b8e0d698935cc3d35167d90a3a8bdf727a1",
                "patch": "@@ -111,10 +111,16 @@ public MimePartDataSource run() {\n                     MimeMessage message = new MimeMessage(\n                         Session.getInstance(props));\n                     try {\n-                        String from = (String)ref.get(\"mail.from\").getContent();\n-                        message.setFrom(new InternetAddress(from));\n+                        RefAddr fromAddr = ref.get(\"mail.from\");\n+                        String from = null;\n+                        if (fromAddr != null) {\n+                            from = (String)ref.get(\"mail.from\").getContent();\n+                        }\n+                        if (from != null) {\n+                            message.setFrom(new InternetAddress(from));\n+                        }\n                         message.setSubject(\"\");\n-                    } catch (Exception e) {}\n+                    } catch (Exception e) {/*Ignore*/}\n                     MimePartDataSource mds = new MimePartDataSource(message);\n                     return mds;\n                 }",
                "deletions": 3
            },
            {
                "sha": "27d436837317d488fc7840a5835dc58a2b69d727",
                "filename": "res/findbugs/filter-false-positives.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/74c31b8e0d698935cc3d35167d90a3a8bdf727a1/res/findbugs/filter-false-positives.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/74c31b8e0d698935cc3d35167d90a3a8bdf727a1/res/findbugs/filter-false-positives.xml",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/res/findbugs/filter-false-positives.xml?ref=74c31b8e0d698935cc3d35167d90a3a8bdf727a1",
                "patch": "@@ -48,6 +48,13 @@\n     <Method name=\"run\"/>\n     <Bug code=\"NS\"/>\n   </Match>\n+  <Match>\n+    <!-- Simpler to catch Exception than to create dummy implementations of the\n+         necessary exception hierarchy -->\n+    <Class name=\"org.apache.naming.factory.SendMailFactory$1\" />\n+    <Method name=\"run\" />\n+    <Bug code=\"DE\" />\n+  </Match>\n   <Match>\n     <!-- Class name needs to start with a lower case letter in this case -->\n     <Class name=\"org.apache.naming.java.javaURLContextFactory\" />",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Protect against unlikely NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1041458 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/e844680a876000fee1b1454f9ff6bb5b06fe58a5",
        "parent": "https://github.com/apache/tomcat/commit/34b6bf0820684afc5011fbfaa3e56b757760232c",
        "bug_id": "tomcat_202",
        "file": [
            {
                "sha": "7a62c2d24f19632b82ef86da5ec9d6f9e997b43e",
                "filename": "java/org/apache/catalina/mbeans/MBeanUtils.java",
                "blob_url": "https://github.com/apache/tomcat/blob/e844680a876000fee1b1454f9ff6bb5b06fe58a5/java/org/apache/catalina/mbeans/MBeanUtils.java",
                "raw_url": "https://github.com/apache/tomcat/raw/e844680a876000fee1b1454f9ff6bb5b06fe58a5/java/org/apache/catalina/mbeans/MBeanUtils.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/mbeans/MBeanUtils.java?ref=e844680a876000fee1b1454f9ff6bb5b06fe58a5",
                "patch": "@@ -1648,7 +1648,7 @@ public static String getDomain(Container container) {\n         \n         Container c = container;\n         \n-        while (!(c instanceof Engine)) {\n+        while (!(c instanceof Engine) && c != null) {\n             c = c.getParent();\n         }\n         ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE when removing sessions\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1035685 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/379f7c0c8015a24d482e5edd5f59dfcbbc185616",
        "parent": "https://github.com/apache/tomcat/commit/19951c2888a44baf7e7174bebd9e15d512bf8711",
        "bug_id": "tomcat_203",
        "file": [
            {
                "sha": "4b2acd5f8546d1877b102f3029e5a2c8057519f8",
                "filename": "java/org/apache/catalina/session/ManagerBase.java",
                "blob_url": "https://github.com/apache/tomcat/blob/379f7c0c8015a24d482e5edd5f59dfcbbc185616/java/org/apache/catalina/session/ManagerBase.java",
                "raw_url": "https://github.com/apache/tomcat/raw/379f7c0c8015a24d482e5edd5f59dfcbbc185616/java/org/apache/catalina/session/ManagerBase.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/session/ManagerBase.java?ref=379f7c0c8015a24d482e5edd5f59dfcbbc185616",
                "patch": "@@ -905,9 +905,9 @@ public Session findSession(String id) throws IOException {\n      */\n     @Override\n     public void remove(Session session) {\n-\n-        sessions.remove(session.getIdInternal());\n-\n+        if (session.getIdInternal() != null) {\n+            sessions.remove(session.getIdInternal());\n+        }\n     }\n \n ",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE\nDon't use exception.printStackTrace()\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1026784 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/3ec4954142afdb2dbf003b2769794290b9a396c7",
        "parent": "https://github.com/apache/tomcat/commit/ac66fb09edc421326f2ad8384963c6c1f57c5903",
        "bug_id": "tomcat_204",
        "file": [
            {
                "sha": "8a7d3c8bf04e0df5f8fa13a8896c71ae83ff6f08",
                "filename": "java/org/apache/catalina/session/PersistentManagerBase.java",
                "blob_url": "https://github.com/apache/tomcat/blob/3ec4954142afdb2dbf003b2769794290b9a396c7/java/org/apache/catalina/session/PersistentManagerBase.java",
                "raw_url": "https://github.com/apache/tomcat/raw/3ec4954142afdb2dbf003b2769794290b9a396c7/java/org/apache/catalina/session/PersistentManagerBase.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/session/PersistentManagerBase.java?ref=3ec4954142afdb2dbf003b2769794290b9a396c7",
                "patch": "@@ -551,7 +551,7 @@ public void load() {\n                     Exception exception = ex.getException();\n                     log.error(\"Exception in the Store during load: \"\n                               + exception);\n-                    exception.printStackTrace();                        \n+                    return;\n                 }\n             } else {\n                 ids = store.keys();",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE triggered when running TCK tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1022478 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/01faa109fe0da49056818dcc6dd90bc63328c6a5",
        "parent": "https://github.com/apache/tomcat/commit/de2a6c34c52cb03995f6b66b126f9d1157e94e62",
        "bug_id": "tomcat_205",
        "file": [
            {
                "sha": "4468b0d900eddc93d9dfba0fb2ff3e5ec886f093",
                "filename": "java/org/apache/coyote/http11/InternalNioOutputBuffer.java",
                "blob_url": "https://github.com/apache/tomcat/blob/01faa109fe0da49056818dcc6dd90bc63328c6a5/java/org/apache/coyote/http11/InternalNioOutputBuffer.java",
                "raw_url": "https://github.com/apache/tomcat/raw/01faa109fe0da49056818dcc6dd90bc63328c6a5/java/org/apache/coyote/http11/InternalNioOutputBuffer.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/InternalNioOutputBuffer.java?ref=01faa109fe0da49056818dcc6dd90bc63328c6a5",
                "patch": "@@ -144,8 +144,10 @@ public void flush() throws IOException {\n     @Override\n     public void recycle() {\n         super.recycle();\n-        socket.getBufHandler().getWriteBuffer().clear();\n-        socket = null;\n+        if (socket != null) {\n+            socket.getBufHandler().getWriteBuffer().clear();\n+            socket = null;\n+        }\n         lastWrite.set(1);\n     }\n ",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE when mapOwner is null.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1002935 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/47f2b9584d56161903ae747bb7c87de5836e3511",
        "parent": "https://github.com/apache/tomcat/commit/1192b1d40b0f6bd95d317049491a4af6eb0d1a01",
        "bug_id": "tomcat_206",
        "file": [
            {
                "sha": "2c9afd6d51682b8eb6ab77a98ceca8826e022eb1",
                "filename": "java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java",
                "blob_url": "https://github.com/apache/tomcat/blob/47f2b9584d56161903ae747bb7c87de5836e3511/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java",
                "raw_url": "https://github.com/apache/tomcat/raw/47f2b9584d56161903ae747bb7c87de5836e3511/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java?ref=47f2b9584d56161903ae747bb7c87de5836e3511",
                "patch": "@@ -902,7 +902,7 @@ public Object get(Object key) {\n                 entry.setBackupNodes(backup);\n                 entry.setBackup(false);\n                 entry.setProxy(false);\n-                getMapOwner().objectMadePrimay(key, entry.getValue());\n+                if ( getMapOwner()!=null ) getMapOwner().objectMadePrimay(key, entry.getValue());\n \n             } catch (Exception x) {\n                 log.error(\"Unable to replicate out data for a LazyReplicatedMap.get operation\", x);",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "More NPE avoidance.\nKeep process methods aligned.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1001552 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/7568602d202a00950df62d87cf7a417e22d2f7ee",
        "parent": "https://github.com/apache/tomcat/commit/a020de1a7db3c45b88df707dae784fac13860b0c",
        "bug_id": "tomcat_207",
        "file": [
            {
                "sha": "6d5dc613edbbd39200bf6a905a8c5fd0b759983d",
                "filename": "java/org/apache/tomcat/util/net/JIoEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/7568602d202a00950df62d87cf7a417e22d2f7ee/java/org/apache/tomcat/util/net/JIoEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/7568602d202a00950df62d87cf7a417e22d2f7ee/java/org/apache/tomcat/util/net/JIoEndpoint.java",
                "status": "modified",
                "changes": 12,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/JIoEndpoint.java?ref=7568602d202a00950df62d87cf7a417e22d2f7ee",
                "patch": "@@ -508,11 +508,10 @@ protected boolean processSocket(Socket socket) {\n             SocketWrapper<Socket> wrapper = new SocketWrapper<Socket>(socket);\n             wrapper.setKeepAliveLeft(getMaxKeepAliveRequests());\n             // During shutdown, executor may be null - avoid NPE\n-            if (running) {\n-                getExecutor().execute(new SocketProcessor(wrapper));\n-                return true;\n+            if (!running) {\n+                return false;\n             }\n-            return false;\n+            getExecutor().execute(new SocketProcessor(wrapper));\n         } catch (RejectedExecutionException x) {\n             log.warn(\"Socket processing request was rejected for:\"+socket,x);\n             return false;\n@@ -522,6 +521,7 @@ protected boolean processSocket(Socket socket) {\n             log.error(sm.getString(\"endpoint.process.fail\"), t);\n             return false;\n         }\n+        return true;\n     }\n     \n     \n@@ -553,6 +553,10 @@ public boolean processSocket(SocketWrapper<Socket> socket, SocketStatus status)\n                         Thread.currentThread().setContextClassLoader(\n                                 getClass().getClassLoader());\n                     }\n+                    // During shutdown, executor may be null - avoid NPE\n+                    if (!running) {\n+                        return false;\n+                    }\n                     getExecutor().execute(proc);\n                 }finally {\n                     if (Globals.IS_SECURITY_ENABLED) {",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE when a parallel request invalidates the current session\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@993042 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/02dd7401f5d611976d5059e8ba280bee64cf1343",
        "parent": "https://github.com/apache/tomcat/commit/9b6357e2d230ff238dadb2226b807535756c596e",
        "bug_id": "tomcat_208",
        "file": [
            {
                "sha": "1388efdbe42dcc428f290798ab7ce319f6d4859e",
                "filename": "java/org/apache/catalina/ha/session/DeltaManager.java",
                "blob_url": "https://github.com/apache/tomcat/blob/02dd7401f5d611976d5059e8ba280bee64cf1343/java/org/apache/catalina/ha/session/DeltaManager.java",
                "raw_url": "https://github.com/apache/tomcat/raw/02dd7401f5d611976d5059e8ba280bee64cf1343/java/org/apache/catalina/ha/session/DeltaManager.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/ha/session/DeltaManager.java?ref=02dd7401f5d611976d5059e8ba280bee64cf1343",
                "patch": "@@ -1033,6 +1033,11 @@ public ClusterMessage requestCompleted(String sessionId, boolean expires) {\n         DeltaSession session = null;\n         try {\n             session = (DeltaSession) findSession(sessionId);\n+            if (session == null) {\n+                // A parallel request has called session.invalidate() which has\n+                // remove the session from the Manager.\n+                return null;\n+            }\n             DeltaRequest deltaRequest = session.getDeltaRequest();\n             session.lock();\n             SessionMessage msg = null;",
                "deletions": 0
            },
            {
                "sha": "4c4cbf86a5d72e8de36476b928f09b62eafe048d",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/02dd7401f5d611976d5059e8ba280bee64cf1343/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/02dd7401f5d611976d5059e8ba280bee64cf1343/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=02dd7401f5d611976d5059e8ba280bee64cf1343",
                "patch": "@@ -186,6 +186,11 @@\n         Add support for LAST_ACCESS_AT_START system property to DeltaSession. \n         (kfujino)\n       </fix>\n+      <fix>\n+        Avoid a NPE in the DeltaManager when a parallel request invalidates the\n+        session before the current request has a chance to send the replication\n+        message. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Web applications\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE and add small test case to check VirtualWebappLoader.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@960284 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/ac547de282e57229a19efd268a722a5f3f13a45c",
        "parent": "https://github.com/apache/tomcat/commit/741e000b2463514971057bdae9133f8815728aa3",
        "bug_id": "tomcat_209",
        "file": [
            {
                "sha": "f5bcac311ded08843a0f5fc87b6ae560a2ed02a1",
                "filename": "java/org/apache/catalina/loader/WebappLoader.java",
                "blob_url": "https://github.com/apache/tomcat/blob/ac547de282e57229a19efd268a722a5f3f13a45c/java/org/apache/catalina/loader/WebappLoader.java",
                "raw_url": "https://github.com/apache/tomcat/raw/ac547de282e57229a19efd268a722a5f3f13a45c/java/org/apache/catalina/loader/WebappLoader.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/loader/WebappLoader.java?ref=ac547de282e57229a19efd268a722a5f3f13a45c",
                "patch": "@@ -483,17 +483,15 @@ public String getClasspath() {\n      * such that the loaded classes should be reloaded?\n      */\n     public boolean modified() {\n-\n-        return (classLoader.modified());\n-\n+        return classLoader != null ? classLoader.modified() : false ;\n     }\n \n \n     /**\n      * Used to periodically signal to the classloader to release JAR resources.\n      */\n     public void closeJARs(boolean force) {\n-        if (classLoader !=null){\n+        if (classLoader !=null) {\n             classLoader.closeJARs(force);\n         }\n     }",
                "deletions": 4
            },
            {
                "sha": "4e3cdb7d2d46094f1b6a67ac5ebc2efd668776f1",
                "filename": "test/org/apache/catalina/loader/TestVirtualWebappLoader.java",
                "blob_url": "https://github.com/apache/tomcat/blob/ac547de282e57229a19efd268a722a5f3f13a45c/test/org/apache/catalina/loader/TestVirtualWebappLoader.java",
                "raw_url": "https://github.com/apache/tomcat/raw/ac547de282e57229a19efd268a722a5f3f13a45c/test/org/apache/catalina/loader/TestVirtualWebappLoader.java",
                "status": "added",
                "changes": 67,
                "additions": 67,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/loader/TestVirtualWebappLoader.java?ref=ac547de282e57229a19efd268a722a5f3f13a45c",
                "patch": "@@ -0,0 +1,67 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.catalina.loader;\n+\n+import java.io.File;\n+\n+import org.apache.catalina.core.StandardContext;\n+import org.apache.catalina.startup.Tomcat;\n+import org.apache.catalina.startup.TomcatBaseTest;\n+import org.apache.naming.resources.FileDirContext;\n+\n+public class TestVirtualWebappLoader extends TomcatBaseTest {\n+\n+    public void testModified() throws Exception {\n+        WebappLoader loader = new WebappLoader();\n+        assertNull(loader.getClassLoader());\n+        assertFalse(loader.modified());\n+    }\n+    \n+    public void testStartInternal() throws Exception {\n+        Tomcat tomcat = getTomcatInstance();\n+        File appDir = new File(\"test/webapp-3.0\");      \n+        // Must have a real docBase - just use temp\n+        StandardContext ctx = \n+            (StandardContext)tomcat.addContext(\"/\",  appDir.getAbsolutePath());\n+\n+        VirtualWebappLoader loader = new VirtualWebappLoader();\n+         \n+        loader.setContainer(ctx);\n+        ctx.setLoader(loader);\n+        ctx.setResources(new FileDirContext());\n+        ctx.resourcesStart();\n+        File dir = new File(\"test/webapp-3.0-fragments/WEB-INF/lib\");\n+        loader.setVirtualClasspath(dir.getAbsolutePath() + \"/*.jar\");\n+        loader.startInternal();\n+        String[] repos = loader.getRepositories();\n+        assertEquals(2,repos.length);\n+        loader.stopInternal();\n+        // ToDo: Why doesn't remove repositories?\n+        repos = loader.getRepositories();\n+        assertEquals(2, repos.length);\n+        \n+        // no leak\n+        loader.startInternal();\n+        repos = loader.getRepositories();\n+        assertEquals(2,repos.length);\n+        \n+        // clear loader\n+        ctx.setLoader(null);\n+        // see tearDown()!\n+        tomcat.start();\n+    }\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE if no encoding parameter exists at request!\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@939639 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/a58a11008f577b7beb8346dbfa8383d41c5d35cc",
        "parent": "https://github.com/apache/tomcat/commit/d7080b9ea942d3bdb2a72b42c775ac3bd83f7cfa",
        "bug_id": "tomcat_210",
        "file": [
            {
                "sha": "f187eacdfc96caed57f84524c4057d2297eb2755",
                "filename": "java/org/apache/catalina/connector/Request.java",
                "blob_url": "https://github.com/apache/tomcat/blob/a58a11008f577b7beb8346dbfa8383d41c5d35cc/java/org/apache/catalina/connector/Request.java",
                "raw_url": "https://github.com/apache/tomcat/raw/a58a11008f577b7beb8346dbfa8383d41c5d35cc/java/org/apache/catalina/connector/Request.java",
                "status": "modified",
                "changes": 10,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/Request.java?ref=a58a11008f577b7beb8346dbfa8383d41c5d35cc",
                "patch": "@@ -2513,9 +2513,13 @@ private void parseParts() {\n                 parts.add(part);\n                 if (part.getFilename() == null) {\n                     try {\n-                        parameters.addParameterValues(part.getName(),\n+                        String encoding = parameters.getEncoding();\n+                        if(encoding == null) {\n+                        \tencoding = Parameters.DEFAULT_ENCODING;\n+                        }\n+ \t\t\t\t\t\tparameters.addParameterValues(part.getName(),\n                                 new String[] {part.getString(\n-                                        parameters.getEncoding())});\n+                                        encoding)});\n                     } catch (UnsupportedEncodingException uee) {\n                         try {\n                             parameters.addParameterValues(part.getName(),\n@@ -2533,7 +2537,7 @@ private void parseParts() {\n         } catch (FileUploadBase.SizeException e) {\n             partsParseException = new IllegalStateException(e);\n         } catch (FileUploadException e) {\n-            partsParseException = new IOException();\n+            partsParseException = new IOException(e);\n         }\n         \n         return;",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Protect against NPE whilst running the test\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@907651 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/6afe00181775e027cedd87a9f0cf1b2e0a6e5d2c",
        "parent": "https://github.com/apache/tomcat/commit/9252fc38e80b3def1b15df7f532c3956799551b2",
        "bug_id": "tomcat_211",
        "file": [
            {
                "sha": "52882bd68e7d16e8979e67509f705814e8ebb113",
                "filename": "test/org/apache/catalina/loader/TestWebappClassLoaderMemoryLeak.java",
                "blob_url": "https://github.com/apache/tomcat/blob/6afe00181775e027cedd87a9f0cf1b2e0a6e5d2c/test/org/apache/catalina/loader/TestWebappClassLoaderMemoryLeak.java",
                "raw_url": "https://github.com/apache/tomcat/raw/6afe00181775e027cedd87a9f0cf1b2e0a6e5d2c/test/org/apache/catalina/loader/TestWebappClassLoaderMemoryLeak.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/loader/TestWebappClassLoaderMemoryLeak.java?ref=6afe00181775e027cedd87a9f0cf1b2e0a6e5d2c",
                "patch": "@@ -36,7 +36,8 @@ public void testTimerThreadLeak() throws Exception {\n         // If the thread still exists, we have a thread/memory leak\n         Thread[] threads = getThreads();\n         for (Thread thread : threads) {\n-            if (thread.getName().equals(TaskServlet.TIMER_THREAD_NAME)) {\n+            if (thread != null &&\n+                    TaskServlet.TIMER_THREAD_NAME.equals(thread.getName())) {\n                 fail(\"Timer thread still running\");\n             }\n         }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE if bundle is missing\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@898297 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/329bdf6f96609e2e643b8ef0fc9159c14387232d",
        "parent": "https://github.com/apache/tomcat/commit/dcf28d75bfa1da72fa90e8d2ba025419a9d6e28f",
        "bug_id": "tomcat_212",
        "file": [
            {
                "sha": "4f3eb189e803b275d44db891ed3ede214229e8de",
                "filename": "java/org/apache/tomcat/util/res/StringManager.java",
                "blob_url": "https://github.com/apache/tomcat/blob/329bdf6f96609e2e643b8ef0fc9159c14387232d/java/org/apache/tomcat/util/res/StringManager.java",
                "raw_url": "https://github.com/apache/tomcat/raw/329bdf6f96609e2e643b8ef0fc9159c14387232d/java/org/apache/tomcat/util/res/StringManager.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/res/StringManager.java?ref=329bdf6f96609e2e643b8ef0fc9159c14387232d",
                "patch": "@@ -109,7 +109,10 @@ public String getString(String key) {\n         String str = null;\n \n         try {\n-            str = bundle.getString(key);\n+            // Avoid NPE if bundle is null and treat it like an MRE\n+            if (bundle != null) {\n+                str = bundle.getString(key);\n+            }\n         } catch(MissingResourceException mre) {\n             //bad: shouldn't mask an exception the following way:\n             //   str = \"[cannot find message associated with key '\" + key + \"' due to \" + mre + \"]\";",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix a couple of potential NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@888203 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/fe22689c4232140e9b28692d4b65a3072283121f",
        "parent": "https://github.com/apache/tomcat/commit/6a9d98ea5dc20dc04fc6bb8c607a95be21a1de14",
        "bug_id": "tomcat_213",
        "file": [
            {
                "sha": "f258459e5de670dd42ccf9682718cdc81bf36588",
                "filename": "java/org/apache/catalina/startup/WebXml.java",
                "blob_url": "https://github.com/apache/tomcat/blob/fe22689c4232140e9b28692d4b65a3072283121f/java/org/apache/catalina/startup/WebXml.java",
                "raw_url": "https://github.com/apache/tomcat/raw/fe22689c4232140e9b28692d4b65a3072283121f/java/org/apache/catalina/startup/WebXml.java",
                "status": "modified",
                "changes": 44,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/startup/WebXml.java?ref=fe22689c4232140e9b28692d4b65a3072283121f",
                "patch": "@@ -706,15 +706,19 @@ public boolean merge(Set<WebXml> fragments) {\n                     mergeFilter(entry.getValue(),\n                             filters.get(entry.getKey()), false);\n                 } else {\n-                    if (!(mergeFilter(entry.getValue(),\n-                            temp.getFilters().get(entry.getKey()), true))) {\n-                        log.error(sm.getString(\n-                                \"webXml.mergeConflictFilter\",\n-                                entry.getKey(),\n-                                fragment.getName(),\n-                                fragment.getURL()));\n-\n-                        return false;\n+                    if (temp.getFilters().containsKey(entry.getKey())) {\n+                        if (!(mergeFilter(entry.getValue(),\n+                                temp.getFilters().get(entry.getKey()), true))) {\n+                            log.error(sm.getString(\n+                                    \"webXml.mergeConflictFilter\",\n+                                    entry.getKey(),\n+                                    fragment.getName(),\n+                                    fragment.getURL()));\n+    \n+                            return false;\n+                        }\n+                    } else {\n+                        temp.getFilters().put(entry.getKey(), entry.getValue());\n                     }\n                 }\n             }\n@@ -845,15 +849,19 @@ public boolean merge(Set<WebXml> fragments) {\n                     mergeServlet(entry.getValue(),\n                             servlets.get(entry.getKey()), false);\n                 } else {\n-                    if (!(mergeServlet(entry.getValue(),\n-                            temp.getServlets().get(entry.getKey()), true))) {\n-                        log.error(sm.getString(\n-                                \"webXml.mergeConflictServlet\",\n-                                entry.getKey(),\n-                                fragment.getName(),\n-                                fragment.getURL()));\n-\n-                        return false;\n+                    if (temp.getServlets().containsKey(entry.getKey())) {\n+                        if (!(mergeServlet(entry.getValue(),\n+                                temp.getServlets().get(entry.getKey()), true))) {\n+                            log.error(sm.getString(\n+                                    \"webXml.mergeConflictServlet\",\n+                                    entry.getKey(),\n+                                    fragment.getName(),\n+                                    fragment.getURL()));\n+    \n+                            return false;\n+                        }\n+                    } else {\n+                        temp.getServlets().put(entry.getKey(), entry.getValue());\n                     }\n                 }\n             }",
                "deletions": 18
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix possible NPE when embedded\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@817204 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/4c0daf200f1f153d36586329f4e4ce5095020077",
        "parent": "https://github.com/apache/tomcat/commit/189181ab2ffedcc2048d58acb872e48096a1b2e7",
        "bug_id": "tomcat_214",
        "file": [
            {
                "sha": "97f3951c6a53a81b4ade2f45bc90c2d9f46d4ba9",
                "filename": "java/org/apache/catalina/startup/ContextConfig.java",
                "blob_url": "https://github.com/apache/tomcat/blob/4c0daf200f1f153d36586329f4e4ce5095020077/java/org/apache/catalina/startup/ContextConfig.java",
                "raw_url": "https://github.com/apache/tomcat/raw/4c0daf200f1f153d36586329f4e4ce5095020077/java/org/apache/catalina/startup/ContextConfig.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/startup/ContextConfig.java?ref=4c0daf200f1f153d36586329f4e4ce5095020077",
                "patch": "@@ -1191,9 +1191,14 @@ protected InputSource getGlobalWebXmlSource() {\n     protected InputSource getHostWebXmlSource() {\n         String resourceName = getHostConfigPath(Constants.HostWebXml);\n         \n+        // In an embedded environment, configBase might not be set\n+        File configBase = getConfigBase();\n+        if (configBase == null)\n+            return null;\n+        \n         String basePath = null;\n         try {\n-            basePath = getConfigBase().getCanonicalPath();\n+            basePath = configBase.getCanonicalPath();\n         } catch (IOException e) {\n             log.error(sm.getString(\"contectConfig.baseError\"), e);\n             return null;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE if no filters are configured.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@815290 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/7c21d1fd8909169effd019a0d00ce662b3e8454a",
        "parent": "https://github.com/apache/tomcat/commit/f87896d499fc53706109ab346ddfbf28951f220e",
        "bug_id": "tomcat_215",
        "file": [
            {
                "sha": "d9dbc1bcfdc20c68dd0be1526cce88321ad4b890",
                "filename": "java/org/apache/catalina/core/StandardWrapperValve.java",
                "blob_url": "https://github.com/apache/tomcat/blob/7c21d1fd8909169effd019a0d00ce662b3e8454a/java/org/apache/catalina/core/StandardWrapperValve.java",
                "raw_url": "https://github.com/apache/tomcat/raw/7c21d1fd8909169effd019a0d00ce662b3e8454a/java/org/apache/catalina/core/StandardWrapperValve.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/StandardWrapperValve.java?ref=7c21d1fd8909169effd019a0d00ce662b3e8454a",
                "patch": "@@ -199,7 +199,9 @@ public final void invoke(Request request, Response response)\n         // Reset comet flag value after creating the filter chain\n         request.setComet(false);\n         //check filters to see if we support async or not.\n-        request.setAsyncSupported(filterChain.isAsyncSupported());\n+        if (filterChain != null) {\n+            request.setAsyncSupported(filterChain.isAsyncSupported());\n+        }\n \n         // Call the filter chain for this request\n         // NOTE: This also calls the servlet's service() method",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE when not using cookies for session IDs\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@763322 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/92b18d2150a71e3ea01795604f273afb5986ab7f",
        "parent": "https://github.com/apache/tomcat/commit/a228c06d32ebb0a11f45f11f3b743cdb4a4aa9d5",
        "bug_id": "tomcat_216",
        "file": [
            {
                "sha": "ad9995784ad66a5d478e67a8b2ece3778b8e56bf",
                "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
                "blob_url": "https://github.com/apache/tomcat/blob/92b18d2150a71e3ea01795604f273afb5986ab7f/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "raw_url": "https://github.com/apache/tomcat/raw/92b18d2150a71e3ea01795604f273afb5986ab7f/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "status": "modified",
                "changes": 14,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/CoyoteAdapter.java?ref=92b18d2150a71e3ea01795604f273afb5986ab7f",
                "patch": "@@ -510,6 +510,16 @@ protected boolean postParseRequest(org.apache.coyote.Request req,\n         }\n \n         // Parse session Id\n+        if (!request.getServletContext().getEffectiveSessionTrackingModes()\n+                .contains(SessionTrackingMode.URL)) {\n+            /* \n+             * If we saw an ID in the URL but this is disabled - remove it\n+             * Can't handle it when we parse the URL as we don't have the\n+             * context at that point\n+             */\n+            request.setRequestedSessionId(null);\n+            request.setRequestedSessionURL(false);\n+        }\n         parseSessionCookiesId(req, request);\n         parseSessionSslId(request);\n         return true;\n@@ -543,9 +553,7 @@ protected void parseSessionId(org.apache.coyote.Request req, Request request) {\n         ByteChunk uriBC = req.requestURI().getByteChunk();\n         int semicolon = uriBC.indexOf(match, 0, match.length(), 0);\n \n-        if (semicolon > 0 &&\n-                request.getServletContext().getEffectiveSessionTrackingModes()\n-                        .contains(SessionTrackingMode.URL)) {\n+        if (semicolon > 0) {\n \n             // Parse session ID, and extract it from the decoded request URI\n             int start = uriBC.getStart();",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix possible NPE reported by Eclipse\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@734507 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/435b912b35f8a6fd02594beaa97246adf259ab46",
        "parent": "https://github.com/apache/tomcat/commit/ec6b852b2a7c4411a7ea00bdb069f5dbd9724560",
        "bug_id": "tomcat_217",
        "file": [
            {
                "sha": "bd236b92c3c7f1a3def6447bbb9b13cc7f341f64",
                "filename": "java/org/apache/catalina/tribes/io/BufferPool.java",
                "blob_url": "https://github.com/apache/tomcat/blob/435b912b35f8a6fd02594beaa97246adf259ab46/java/org/apache/catalina/tribes/io/BufferPool.java",
                "raw_url": "https://github.com/apache/tomcat/raw/435b912b35f8a6fd02594beaa97246adf259ab46/java/org/apache/catalina/tribes/io/BufferPool.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/tribes/io/BufferPool.java?ref=435b912b35f8a6fd02594beaa97246adf259ab46",
                "patch": "@@ -68,9 +68,11 @@ public static BufferPool getBufferPool() {\n                        log.warn(\"Unable to initilize BufferPool, not pooling XByteBuffer objects:\"+x.getMessage());\n                        if ( log.isDebugEnabled() ) log.debug(\"Unable to initilize BufferPool, not pooling XByteBuffer objects:\",x);\n                    }\n-                   pool.setMaxSize(DEFAULT_POOL_SIZE);\n-                   log.info(\"Created a buffer pool with max size:\"+DEFAULT_POOL_SIZE+\" bytes of type:\"+(clazz!=null?clazz.getName():\"null\"));\n-                   instance = new BufferPool(pool);\n+                   if (pool != null) {\n+                       pool.setMaxSize(DEFAULT_POOL_SIZE);\n+                       log.info(\"Created a buffer pool with max size:\"+DEFAULT_POOL_SIZE+\" bytes of type:\"+(clazz!=null?clazz.getName():\"null\"));\n+                       instance = new BufferPool(pool);\n+                   }\n                 }//end if\n             }//sync\n         }//end if",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "socket properties NPE fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@718428 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/e92b3b26143fb95e764bc1f1ba0a3c62fdd4f5a4",
        "parent": "https://github.com/apache/tomcat/commit/1cc61f3500f1221a3dfdc0e98a15ab263a0b8cbc",
        "bug_id": "tomcat_218",
        "file": [
            {
                "sha": "a49567fcecb3ba7ea3171c58ce2116af39f214f8",
                "filename": "java/org/apache/coyote/http11/Http11NioProtocol.java",
                "blob_url": "https://github.com/apache/tomcat/blob/e92b3b26143fb95e764bc1f1ba0a3c62fdd4f5a4/java/org/apache/coyote/http11/Http11NioProtocol.java",
                "raw_url": "https://github.com/apache/tomcat/raw/e92b3b26143fb95e764bc1f1ba0a3c62fdd4f5a4/java/org/apache/coyote/http11/Http11NioProtocol.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/Http11NioProtocol.java?ref=e92b3b26143fb95e764bc1f1ba0a3c62fdd4f5a4",
                "patch": "@@ -761,8 +761,8 @@ public SocketState process(NioChannel socket) {\n \n         public Http11NioProcessor createProcessor() {\n             Http11NioProcessor processor = new Http11NioProcessor(\n-              proto.ep.getSocketProperties().getRxBufSize(),\n-              proto.ep.getSocketProperties().getTxBufSize(), \n+              0,\n+              0, \n               proto.maxHttpHeaderSize,\n               proto.ep);\n             processor.setAdapter(proto.adapter);",
                "deletions": 2
            },
            {
                "sha": "d061baa39300325db0be1441d4b6012f209b93f3",
                "filename": "java/org/apache/tomcat/util/net/SocketProperties.java",
                "blob_url": "https://github.com/apache/tomcat/blob/e92b3b26143fb95e764bc1f1ba0a3c62fdd4f5a4/java/org/apache/tomcat/util/net/SocketProperties.java",
                "raw_url": "https://github.com/apache/tomcat/raw/e92b3b26143fb95e764bc1f1ba0a3c62fdd4f5a4/java/org/apache/tomcat/util/net/SocketProperties.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/SocketProperties.java?ref=e92b3b26143fb95e764bc1f1ba0a3c62fdd4f5a4",
                "patch": "@@ -134,9 +134,9 @@\n     protected Integer soLingerTime = null;\n \n     /**\n-     * SO_TIMEOUT option. JVM default used if not set.\n+     * SO_TIMEOUT option. default is 20000.\n      */\n-    protected Integer soTimeout = null;\n+    protected Integer soTimeout = new Integer(20000);\n \n     /**\n      * Traffic class option, value between 0 and 255",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Add Remy's NPE fix to trunk.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@653038 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/483f58649c1e1081a3423aa09e9ddea5df95c295",
        "parent": "https://github.com/apache/tomcat/commit/e2524a84edf4265e1f5ddccfe445e07be126f589",
        "bug_id": "tomcat_219",
        "file": [
            {
                "sha": "5bddf4fc91bde4bca552c233ccad267ffce59ce0",
                "filename": "java/org/apache/el/lang/ELSupport.java",
                "blob_url": "https://github.com/apache/tomcat/blob/483f58649c1e1081a3423aa09e9ddea5df95c295/java/org/apache/el/lang/ELSupport.java",
                "raw_url": "https://github.com/apache/tomcat/raw/483f58649c1e1081a3423aa09e9ddea5df95c295/java/org/apache/el/lang/ELSupport.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/el/lang/ELSupport.java?ref=483f58649c1e1081a3423aa09e9ddea5df95c295",
                "patch": "@@ -341,7 +341,7 @@ public final static void checkType(final Object obj, final Class type)\n     public final static Object coerceToType(final Object obj, final Class type)\n             throws IllegalArgumentException {\n         if (type == null || Object.class.equals(type) ||\n-                type.equals(obj.getClass())) {\n+                (obj != null && type.equals(obj.getClass()))) {\n             return obj;\n         }\n         if (String.class.equals(type)) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix bug 43468. Prevent NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@612632 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/e14afee1ba5934c1dd6544032d6ca1b3e19eb879",
        "parent": "https://github.com/apache/tomcat/commit/f806ed1a25a47b904215f5fab484b700c0e61929",
        "bug_id": "tomcat_220",
        "file": [
            {
                "sha": "5ed8ebb54f376af5f16f0780739bd3a7ad56be2c",
                "filename": "build.properties.default",
                "blob_url": "https://github.com/apache/tomcat/blob/e14afee1ba5934c1dd6544032d6ca1b3e19eb879/build.properties.default",
                "raw_url": "https://github.com/apache/tomcat/raw/e14afee1ba5934c1dd6544032d6ca1b3e19eb879/build.properties.default",
                "status": "modified",
                "changes": 14,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/build.properties.default?ref=e14afee1ba5934c1dd6544032d6ca1b3e19eb879",
                "patch": "@@ -43,12 +43,12 @@ compile.source=1.5\n compile.target=1.5\n compile.debug=true\n \n-base-jakarta.loc=http://archive.apache.org/dist/jakarta\n+base-commons.loc=http://archive.apache.org/dist/commons\n base-tomcat.loc=http://archive.apache.org/dist/tomcat\n \n # ----- Commons Logging, version 1.1 or later -----\n commons-logging-version=1.1.1\n-commons-logging-src.loc=${base-jakarta.loc}/commons/logging/source/commons-logging-${commons-logging-version}-src.tar.gz\n+commons-logging-src.loc=${base-commons.loc}/logging/source/commons-logging-${commons-logging-version}-src.tar.gz\n \n # ----- Webservices -----\n jaxrpc-src.loc=http://repo1.maven.org/maven2/geronimo-spec/geronimo-spec-jaxrpc/1.1-rc4/geronimo-spec-jaxrpc-1.1-rc4.jar\n@@ -68,18 +68,18 @@ tomcat-native.loc=${base-tomcat.loc}/tomcat-connectors/native/tomcat-native-1.1.\n # ----- Commons DBCP, version 1.1 or later -----\n commons-dbcp.version=1.2.2\n commons-dbcp.home=${base.path}/commons-dbcp-1.2.2-src\n-commons-dbcp-src.loc=${base-jakarta.loc}/commons/dbcp/source/commons-dbcp-1.2.2-src.tar.gz\n+commons-dbcp-src.loc=${base-commons.loc}/dbcp/source/commons-dbcp-1.2.2-src.tar.gz\n \n # ----- Commons Pool, version 1.1 or later -----\n-commons-pool.home=${base.path}/commons-pool-1.3-src\n-commons-pool-src.loc=${base-jakarta.loc}/commons/pool/source/commons-pool-1.3-src.tar.gz\n+commons-pool.home=${base.path}/commons-pool-1.4-src\n+commons-pool-src.loc=${base-commons.loc}/pool/source/commons-pool-1.4-src.tar.gz\n \n # ----- Commons Collections, version 2.0 or later -----\n commons-collections.home=${base.path}/commons-collections-3.2-src\n commons-collections.lib=${commons-collections.home}\n commons-collections.jar=${commons-collections.lib}/commons-collections-3.2.jar\n commons-collections.loc=${base-jakarta.loc}/commons/collections/binaries/commons-collections-3.2.tar.gz\n-commons-collections-src.loc=${base-jakarta.loc}/commons/collections/source/commons-collections-3.2-src.tar.gz\n+commons-collections-src.loc=${base-commons.loc}/collections/source/commons-collections-3.2-src.tar.gz\n \n # ----- NSIS, version 2.0 or later -----\n nsis.home=${base.path}/nsis-2.34\n@@ -93,5 +93,5 @@ nsis.loc=${base-sf.loc}/nsis/nsis-2.34-setup.exe\n commons-daemon.home=${base.path}/commons-daemon-1.0.1\n commons-daemon.lib=${commons-daemon.home}\n commons-daemon.jar=${commons-daemon.lib}/commons-daemon.jar\n-commons-daemon.loc=${base-jakarta.loc}/commons/daemon/binaries/commons-daemon-1.0.1.tar.gz\n+commons-daemon.loc=${base-commons.loc}/daemon/binaries/commons-daemon-1.0.1.tar.gz\n commons-daemon.jsvc.tar.gz=${commons-daemon.lib}/bin/jsvc.tar.gz",
                "deletions": 7
            },
            {
                "sha": "79ef115c94349fcb88da53d51df63b313f8a5ca5",
                "filename": "java/org/apache/catalina/manager/HTMLManagerServlet.java",
                "blob_url": "https://github.com/apache/tomcat/blob/e14afee1ba5934c1dd6544032d6ca1b3e19eb879/java/org/apache/catalina/manager/HTMLManagerServlet.java",
                "raw_url": "https://github.com/apache/tomcat/raw/e14afee1ba5934c1dd6544032d6ca1b3e19eb879/java/org/apache/catalina/manager/HTMLManagerServlet.java",
                "status": "modified",
                "changes": 9,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/manager/HTMLManagerServlet.java?ref=e14afee1ba5934c1dd6544032d6ca1b3e19eb879",
                "patch": "@@ -38,6 +38,7 @@\n \n import org.apache.catalina.Container;\n import org.apache.catalina.Context;\n+import org.apache.catalina.Manager;\n import org.apache.catalina.Session;\n import org.apache.catalina.manager.util.BaseSessionComparator;\n import org.apache.catalina.manager.util.ReverseComparator;\n@@ -440,7 +441,13 @@ public void list(HttpServletRequest request,\n                      \"/html/expire?path=\" + displayPath);\n                 args[9] = appsExpire;\n                 args[10] = sm.getString(\"htmlManagerServlet.expire.explain\");\n-                args[11] = new Integer(context.getManager().getMaxInactiveInterval()/60);\n+                Manager manager = context.getManager();\n+                if (manager == null) {\n+                    args[11] = sm.getString(\"htmlManagerServlet.noManager\");\n+                } else {\n+                    args[11] = new Integer(\n+                            context.getManager().getMaxInactiveInterval()/60);\n+                }\n                 args[12] = sm.getString(\"htmlManagerServlet.expire.unit\");\n                 \n                 args[13] = highlightColor;",
                "deletions": 1
            },
            {
                "sha": "bf9916812f79e9f4302935b504273fba6934e1a2",
                "filename": "java/org/apache/catalina/manager/LocalStrings.properties",
                "blob_url": "https://github.com/apache/tomcat/blob/e14afee1ba5934c1dd6544032d6ca1b3e19eb879/java/org/apache/catalina/manager/LocalStrings.properties",
                "raw_url": "https://github.com/apache/tomcat/raw/e14afee1ba5934c1dd6544032d6ca1b3e19eb879/java/org/apache/catalina/manager/LocalStrings.properties",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/manager/LocalStrings.properties?ref=e14afee1ba5934c1dd6544032d6ca1b3e19eb879",
                "patch": "@@ -46,6 +46,7 @@ htmlManagerServlet.deployWar=WAR or Directory URL:\n htmlManagerServlet.list=List Applications\n htmlManagerServlet.manager=Manager\n htmlManagerServlet.messageLabel=Message:\n+htmlManagerServlet.noManager=N/A\n htmlManagerServlet.serverJVMVendor=JVM Vendor\n htmlManagerServlet.serverJVMVersion=JVM Version\n htmlManagerServlet.serverOSArch=OS Architecture",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE if no classpath is set\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@567163 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/a409acd292c0fbab03aa62eb2751db6f3a554944",
        "parent": "https://github.com/apache/tomcat/commit/7ac21f93a816a4f835a8ae8773151b72ffa3a3c8",
        "bug_id": "tomcat_221",
        "file": [
            {
                "sha": "b218e50bd2c49d59aa1e4511c29074762456f359",
                "filename": "java/org/apache/catalina/loader/VirtualWebappLoader.java",
                "blob_url": "https://github.com/apache/tomcat/blob/a409acd292c0fbab03aa62eb2751db6f3a554944/java/org/apache/catalina/loader/VirtualWebappLoader.java",
                "raw_url": "https://github.com/apache/tomcat/raw/a409acd292c0fbab03aa62eb2751db6f3a554944/java/org/apache/catalina/loader/VirtualWebappLoader.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/loader/VirtualWebappLoader.java?ref=a409acd292c0fbab03aa62eb2751db6f3a554944",
                "patch": "@@ -82,11 +82,10 @@ public void setVirtualClasspath(String path) {\n \n     @Override\n     public void start() throws LifecycleException {\n-\n         // just add any jar/directory set in virtual classpath to the\n         // repositories list before calling start on the standard WebappLoader\n         StringTokenizer tkn = new StringTokenizer(virtualClasspath, \";\");\n-        while (tkn.hasMoreTokens()) {\n+        while (tkn!=null && tkn.hasMoreTokens()) {\n             File file = new File(tkn.nextToken());\n             if (!file.exists()) {\n                 continue;",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "protect against a NPE when a member disappears\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@565433 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/89bc591b1c8b7c6f350fd3ab50f0c9770cc77599",
        "parent": "https://github.com/apache/tomcat/commit/5892633ef03899382517bbe29a420f10e225b4bb",
        "bug_id": "tomcat_222",
        "file": [
            {
                "sha": "f6acac5e9bdc3ec86a2cb980aabf9a0bacb36f88",
                "filename": "java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java",
                "blob_url": "https://github.com/apache/tomcat/blob/89bc591b1c8b7c6f350fd3ab50f0c9770cc77599/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java",
                "raw_url": "https://github.com/apache/tomcat/raw/89bc591b1c8b7c6f350fd3ab50f0c9770cc77599/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java",
                "status": "modified",
                "changes": 7,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java?ref=89bc591b1c8b7c6f350fd3ab50f0c9770cc77599",
                "patch": "@@ -511,7 +511,7 @@ public Serializable replyRequest(Serializable msg, final Member sender) {\n                 while (i.hasNext()) {\n                     Map.Entry e = (Map.Entry) i.next();\n                     MapEntry entry = (MapEntry) super.get(e.getKey());\n-                    if ( entry.isSerializable() ) {\n+                    if ( entry != null && entry.isSerializable() ) {\n                         boolean copy = (mapmsg.getMsgType() == mapmsg.MSG_STATE_COPY);\n                         MapMessage me = new MapMessage(mapContextName, \n                                                        copy?MapMessage.MSG_COPY:MapMessage.MSG_PROXY,\n@@ -719,6 +719,7 @@ public void memberDisappeared(Member member) {\n         while (i.hasNext()) {\n             Map.Entry e = (Map.Entry) i.next();\n             MapEntry entry = (MapEntry) super.get(e.getKey());\n+            if (entry==null) continue;\n             if (entry.isPrimary() && inSet(member,entry.getBackupNodes())) {\n                 if (log.isDebugEnabled()) log.debug(\"[1] Primary choosing a new backup\");\n                 try {\n@@ -977,7 +978,7 @@ public boolean containsValue(Object value) {\n                 while (i.hasNext()) {\n                     Map.Entry e = (Map.Entry) i.next();\n                     MapEntry entry = (MapEntry) super.get(e.getKey());\n-                    if (entry.isPrimary() && value.equals(entry.getValue())) return true;\n+                    if (entry!=null && entry.isPrimary() && value.equals(entry.getValue())) return true;\n                 }//while\n                 return false;\n             }//end if\n@@ -1062,7 +1063,7 @@ public Collection values() {\n             while ( i.hasNext() ) {\n                 Map.Entry e = (Map.Entry)i.next();\n                 MapEntry entry = (MapEntry)super.get(e.getKey());\n-                if ( entry.isPrimary() && entry.getValue()!=null) values.add(entry.getValue());\n+                if (entry!=null && entry.isPrimary() && entry.getValue()!=null) values.add(entry.getValue());\n             }\n             return Collections.unmodifiableCollection(values);\n         }",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE in the map, add accessors to stats information\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@565352 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/564347efe96415f37babd6c21f26404c7bc30327",
        "parent": "https://github.com/apache/tomcat/commit/361993fe8fede093f49defcf48d27f2c31071de2",
        "bug_id": "tomcat_223",
        "file": [
            {
                "sha": "2d4935fdddf6b452258bbba8f1c45a97d08a0b43",
                "filename": "java/org/apache/catalina/tribes/group/interceptors/ThroughputInterceptor.java",
                "blob_url": "https://github.com/apache/tomcat/blob/564347efe96415f37babd6c21f26404c7bc30327/java/org/apache/catalina/tribes/group/interceptors/ThroughputInterceptor.java",
                "raw_url": "https://github.com/apache/tomcat/raw/564347efe96415f37babd6c21f26404c7bc30327/java/org/apache/catalina/tribes/group/interceptors/ThroughputInterceptor.java",
                "status": "modified",
                "changes": 50,
                "additions": 45,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/tribes/group/interceptors/ThroughputInterceptor.java?ref=564347efe96415f37babd6c21f26404c7bc30327",
                "patch": "@@ -16,17 +16,17 @@\n \n package org.apache.catalina.tribes.group.interceptors;\n \n+import java.text.DecimalFormat;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n import org.apache.catalina.tribes.ChannelException;\n import org.apache.catalina.tribes.ChannelMessage;\n import org.apache.catalina.tribes.Member;\n import org.apache.catalina.tribes.group.ChannelInterceptorBase;\n import org.apache.catalina.tribes.group.InterceptorPayload;\n import org.apache.catalina.tribes.io.ChannelData;\n import org.apache.catalina.tribes.io.XByteBuffer;\n-import java.text.DecimalFormat;\n-import org.apache.catalina.tribes.membership.MemberImpl;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.concurrent.atomic.AtomicLong;\n \n \n \n@@ -61,7 +61,7 @@ public void sendMessage(Member[] destination, ChannelMessage msg, InterceptorPay\n             super.sendMessage(destination, msg, payload);\n         }catch ( ChannelException x ) {\n             msgTxErr.addAndGet(1);\n-            access.addAndGet(-1);\n+            if ( access.get() == 1 ) access.addAndGet(-1);\n             throw x;\n         } \n         mbTx += ((double)(bytes*destination.length))/(1024d*1024d);\n@@ -117,4 +117,44 @@ public int getInterval() {\n         return interval;\n     }\n \n+    public double getLastCnt() {\n+        return lastCnt;\n+    }\n+\n+    public double getMbAppTx() {\n+        return mbAppTx;\n+    }\n+\n+    public double getMbRx() {\n+        return mbRx;\n+    }\n+\n+    public double getMbTx() {\n+        return mbTx;\n+    }\n+\n+    public AtomicLong getMsgRxCnt() {\n+        return msgRxCnt;\n+    }\n+\n+    public AtomicLong getMsgTxCnt() {\n+        return msgTxCnt;\n+    }\n+\n+    public AtomicLong getMsgTxErr() {\n+        return msgTxErr;\n+    }\n+\n+    public long getRxStart() {\n+        return rxStart;\n+    }\n+\n+    public double getTimeTx() {\n+        return timeTx;\n+    }\n+\n+    public long getTxStart() {\n+        return txStart;\n+    }\n+\n }",
                "deletions": 5
            },
            {
                "sha": "f6acac5e9bdc3ec86a2cb980aabf9a0bacb36f88",
                "filename": "java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java",
                "blob_url": "https://github.com/apache/tomcat/blob/564347efe96415f37babd6c21f26404c7bc30327/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java",
                "raw_url": "https://github.com/apache/tomcat/raw/564347efe96415f37babd6c21f26404c7bc30327/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java",
                "status": "modified",
                "changes": 7,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java?ref=564347efe96415f37babd6c21f26404c7bc30327",
                "patch": "@@ -511,7 +511,7 @@ public Serializable replyRequest(Serializable msg, final Member sender) {\n                 while (i.hasNext()) {\n                     Map.Entry e = (Map.Entry) i.next();\n                     MapEntry entry = (MapEntry) super.get(e.getKey());\n-                    if ( entry.isSerializable() ) {\n+                    if ( entry != null && entry.isSerializable() ) {\n                         boolean copy = (mapmsg.getMsgType() == mapmsg.MSG_STATE_COPY);\n                         MapMessage me = new MapMessage(mapContextName, \n                                                        copy?MapMessage.MSG_COPY:MapMessage.MSG_PROXY,\n@@ -719,6 +719,7 @@ public void memberDisappeared(Member member) {\n         while (i.hasNext()) {\n             Map.Entry e = (Map.Entry) i.next();\n             MapEntry entry = (MapEntry) super.get(e.getKey());\n+            if (entry==null) continue;\n             if (entry.isPrimary() && inSet(member,entry.getBackupNodes())) {\n                 if (log.isDebugEnabled()) log.debug(\"[1] Primary choosing a new backup\");\n                 try {\n@@ -977,7 +978,7 @@ public boolean containsValue(Object value) {\n                 while (i.hasNext()) {\n                     Map.Entry e = (Map.Entry) i.next();\n                     MapEntry entry = (MapEntry) super.get(e.getKey());\n-                    if (entry.isPrimary() && value.equals(entry.getValue())) return true;\n+                    if (entry!=null && entry.isPrimary() && value.equals(entry.getValue())) return true;\n                 }//while\n                 return false;\n             }//end if\n@@ -1062,7 +1063,7 @@ public Collection values() {\n             while ( i.hasNext() ) {\n                 Map.Entry e = (Map.Entry)i.next();\n                 MapEntry entry = (MapEntry)super.get(e.getKey());\n-                if ( entry.isPrimary() && entry.getValue()!=null) values.add(entry.getValue());\n+                if (entry!=null && entry.isPrimary() && entry.getValue()!=null) values.add(entry.getValue());\n             }\n             return Collections.unmodifiableCollection(values);\n         }",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE when using Executor\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@521342 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/c7c8bd647790194ca4aea787c2b20f62d65170ba",
        "parent": "https://github.com/apache/tomcat/commit/d2a1c2df5ecbaf7fb720a7f74cfb336a63247c7f",
        "bug_id": "tomcat_224",
        "file": [
            {
                "sha": "7f2af0fb4efcb750343451cd47b1fa5b203bc6fb",
                "filename": "java/org/apache/tomcat/util/net/JIoEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/c7c8bd647790194ca4aea787c2b20f62d65170ba/java/org/apache/tomcat/util/net/JIoEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/c7c8bd647790194ca4aea787c2b20f62d65170ba/java/org/apache/tomcat/util/net/JIoEndpoint.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/JIoEndpoint.java?ref=c7c8bd647790194ca4aea787c2b20f62d65170ba",
                "patch": "@@ -261,7 +261,7 @@ public int getCurrentThreadCount() {\n     }\n     \n     public int getCurrentThreadsBusy() {\n-        return curThreads - workers.size();\n+        return workers!=null?curThreads - workers.size():0;\n     }\n     \n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "- Avoid NPE (quick fix).\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@492182 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/d8633d7dbd4c830585d2b1a8789d4a4150e0b70e",
        "parent": "https://github.com/apache/tomcat/commit/8a92701368f746c1fa3b49eecb78236c5335b85c",
        "bug_id": "tomcat_225",
        "file": [
            {
                "sha": "6532f27104d5ffd20bacfe2f3fddffdda9d58610",
                "filename": "java/org/apache/jasper/compiler/Generator.java",
                "blob_url": "https://github.com/apache/tomcat/blob/d8633d7dbd4c830585d2b1a8789d4a4150e0b70e/java/org/apache/jasper/compiler/Generator.java",
                "raw_url": "https://github.com/apache/tomcat/raw/d8633d7dbd4c830585d2b1a8789d4a4150e0b70e/java/org/apache/jasper/compiler/Generator.java",
                "status": "modified",
                "changes": 8,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/Generator.java?ref=d8633d7dbd4c830585d2b1a8789d4a4150e0b70e",
                "patch": "@@ -2774,9 +2774,7 @@ private String evaluateAttribute(TagHandlerInfo handlerInfo,\n                 StringBuffer sb = new StringBuffer(64);\n \n                 TagAttributeInfo tai = attr.getTagAttributeInfo();\n-                String type = tai.getTypeName();\n-                String returnType = JspUtil.toJavaSourceTypeFromTld(attr\n-                        .getExpectedTypeName());\n+                String returnType = JspUtil.toJavaSourceTypeFromTld(attr.getExpectedTypeName());\n \n                 // generate elContext reference\n                 sb.append(getJspContextVar());\n@@ -2807,7 +2805,7 @@ private String evaluateAttribute(TagHandlerInfo handlerInfo,\n \n                 // depending on type\n                 if (attr.isDeferredInput()\n-                        || ValueExpression.class.getName().equals(type)) {\n+                        || ((tai != null) && ValueExpression.class.getName().equals(tai.getTypeName()))) {\n                     sb.append(\"new org.apache.jasper.el.JspValueExpression(\");\n                     sb.append(quote(mark));\n                     sb.append(',');\n@@ -2841,7 +2839,7 @@ private String evaluateAttribute(TagHandlerInfo handlerInfo,\n                     }\n                     attrValue = sb.toString();\n                 } else if (attr.isDeferredMethodInput()\n-                        || MethodExpression.class.getName().equals(type)) {\n+                        || ((tai != null) && MethodExpression.class.getName().equals(tai.getTypeName()))) {\n                     sb.append(\"new org.apache.jasper.el.JspMethodExpression(\");\n                     sb.append(quote(mark));\n                     sb.append(',');",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE on session state transfer\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@465031 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/509fabfa69d66e99b416fd9d827cf2a7814375ee",
        "parent": "https://github.com/apache/tomcat/commit/d9ba113a3efcbb1f4afa171c4bc349336b7cba3d",
        "bug_id": "tomcat_226",
        "file": [
            {
                "sha": "683e2da1fffebedec58e3243df6d5529b9f5eae5",
                "filename": "java/org/apache/catalina/ha/session/DeltaSession.java",
                "blob_url": "https://github.com/apache/tomcat/blob/509fabfa69d66e99b416fd9d827cf2a7814375ee/java/org/apache/catalina/ha/session/DeltaSession.java",
                "raw_url": "https://github.com/apache/tomcat/raw/509fabfa69d66e99b416fd9d827cf2a7814375ee/java/org/apache/catalina/ha/session/DeltaSession.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/ha/session/DeltaSession.java?ref=509fabfa69d66e99b416fd9d827cf2a7814375ee",
                "patch": "@@ -698,7 +698,8 @@ public void setVersion(long version) {\n     }\n \n     protected void setAccessCount(int count) {\n-        super.accessCount.set(count);\n+        if ( accessCount == null && ACTIVITY_CHECK ) accessCount = new AtomicInteger();\n+        if ( accessCount != null ) super.accessCount.set(count);\n     }\n }\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE in unconfigured VirtualWebappLoader.\nStringTokenizer throws the NPE if the virtualClassPath\nwasn't explicitely configured (null by default).\n\nThis might not be observed in the wild because a\nVirtualWebappLoader without a configured virtualClassPath\nisn't expected. But if you extend the class and add\nfeatures, then this might well happen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1401472 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/4618e42968e29d1049b2c6fb70189fcc1b1a4c0e",
        "parent": "https://github.com/apache/tomcat/commit/f99273f634a5dd9926d9f4cf762ab1e140be9881",
        "bug_id": "tomcat_227",
        "file": [
            {
                "sha": "2d69c4cee05ad8c69f5e84a525852e0476fba7a5",
                "filename": "java/org/apache/catalina/loader/VirtualWebappLoader.java",
                "blob_url": "https://github.com/apache/tomcat/blob/4618e42968e29d1049b2c6fb70189fcc1b1a4c0e/java/org/apache/catalina/loader/VirtualWebappLoader.java",
                "raw_url": "https://github.com/apache/tomcat/raw/4618e42968e29d1049b2c6fb70189fcc1b1a4c0e/java/org/apache/catalina/loader/VirtualWebappLoader.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/loader/VirtualWebappLoader.java?ref=4618e42968e29d1049b2c6fb70189fcc1b1a4c0e",
                "patch": "@@ -57,7 +57,7 @@\n     /**\n      * <code>;</code> separated list of additional path elements.\n      */\n-    private String virtualClasspath;\n+    private String virtualClasspath = \"\";\n \n     /**\n      * Construct a new WebappLoader with no defined parent class loader (so that",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=51095\nDon't trigger a NullPointerException when the SSL handshake fails with the HTTP-APR connector.\nPatch provided by Mike Glazer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1096244 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/75d28d4c84db5ba6b709c36ff7bfefab78b7393a",
        "parent": "https://github.com/apache/tomcat/commit/5ffc0a8c83c63238ddac1c95784c791253c9283c",
        "bug_id": "tomcat_228",
        "file": [
            {
                "sha": "e26a9388d7bf48dfea8cb7b423635f20a2fe6317",
                "filename": "java/org/apache/tomcat/util/net/AprEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/75d28d4c84db5ba6b709c36ff7bfefab78b7393a/java/org/apache/tomcat/util/net/AprEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/75d28d4c84db5ba6b709c36ff7bfefab78b7393a/java/org/apache/tomcat/util/net/AprEndpoint.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/AprEndpoint.java?ref=75d28d4c84db5ba6b709c36ff7bfefab78b7393a",
                "patch": "@@ -1681,6 +1681,7 @@ public void run() {\n                         // Close socket and pool\n                         destroySocket(socket.getSocket().longValue());\n                         socket = null;\n+                        return;\n                     }\n                     // Process the request from this socket\n                     Handler.SocketState state = handler.process(socket);",
                "deletions": 0
            },
            {
                "sha": "c1a5647ae6e25bfa89ecd5db4e324239ec19f179",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/75d28d4c84db5ba6b709c36ff7bfefab78b7393a/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/75d28d4c84db5ba6b709c36ff7bfefab78b7393a/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=75d28d4c84db5ba6b709c36ff7bfefab78b7393a",
                "patch": "@@ -120,6 +120,11 @@\n         calculating connection and keep-alive timeouts for the HTTP BIO\n         connector. (markt)\n       </fix>\n+      <fix>\n+        <bug>51095</bug>: Don&apos;t trigger a NullPointerException when the SSL\n+        handshake fails with the HTTP-APR connector. Patch provided by Mike\n+        Glazer. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Jasper\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Add NPE avoidance code from NIO2 when a socket is concurrently closed. Maybe it could be logged for debugging (same in NIO2).\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1662018 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/9224ade1ee7c99196cffc8ec6dbcd91f899f569f",
        "parent": "https://github.com/apache/tomcat/commit/bbdb467d8d1b8d45289d3601ea904c626a313c27",
        "bug_id": "tomcat_229",
        "file": [
            {
                "sha": "593c11d3115ef9896b8fffc6b3c50b7a78aea662",
                "filename": "java/org/apache/tomcat/util/net/NioEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/9224ade1ee7c99196cffc8ec6dbcd91f899f569f/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/9224ade1ee7c99196cffc8ec6dbcd91f899f569f/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "status": "modified",
                "changes": 19,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/NioEndpoint.java?ref=9224ade1ee7c99196cffc8ec6dbcd91f899f569f",
                "patch": "@@ -1681,6 +1681,9 @@ public void reset(NioSocketWrapper ka, SocketStatus status) {\n         @Override\n         public void run() {\n             NioChannel socket = ka.getSocket();\n+            if (socket == null) {\n+                return;\n+            }\n             SelectionKey key = socket.getIOChannel().keyFor(\n                     socket.getPoller().getSelector());\n \n@@ -1704,7 +1707,7 @@ private void doRun(SelectionKey key, NioSocketWrapper ka) {\n                 int handshake = -1;\n \n                 try {\n-                    if (key != null) {\n+                    if (key != null && socket != null) {\n                         // For STOP there is no point trying to handshake as the\n                         // Poller has been stopped.\n                         if (socket.isHandshakeComplete() ||\n@@ -1761,13 +1764,15 @@ private void doRun(SelectionKey key, NioSocketWrapper ka) {\n                         }\n                     }\n                 } else if (handshake == -1 ) {\n-                    if (key != null) {\n-                        socket.getPoller().cancelledKey(key);\n-                    }\n-                    if (running && !paused) {\n-                        nioChannels.push(socket);\n+                    if (socket != null) {\n+                        if (key != null) {\n+                            socket.getPoller().cancelledKey(key);\n+                        }\n+                        if (running && !paused) {\n+                            nioChannels.push(socket);\n+                        }\n+                        socket = null;\n                     }\n-                    socket = null;\n                     if (running && !paused) {\n                         keyCache.push(ka);\n                     }",
                "deletions": 7
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Related to BZ57528: improve the algorithm to handle an exception or null return value in getContent and avoid NPE or returning corrupted data.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1657764 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/8b431868b06095777dbd360d9af21e27b6832d92",
        "parent": "https://github.com/apache/tomcat/commit/80ef554f0970dcb4cdcd62d18704c80fc0775216",
        "bug_id": "tomcat_230",
        "file": [
            {
                "sha": "3365982550082cd12e8af63dbec5f51b16aa830c",
                "filename": "java/org/apache/catalina/webresources/AbstractArchiveResource.java",
                "blob_url": "https://github.com/apache/tomcat/blob/8b431868b06095777dbd360d9af21e27b6832d92/java/org/apache/catalina/webresources/AbstractArchiveResource.java",
                "raw_url": "https://github.com/apache/tomcat/raw/8b431868b06095777dbd360d9af21e27b6832d92/java/org/apache/catalina/webresources/AbstractArchiveResource.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/webresources/AbstractArchiveResource.java?ref=8b431868b06095777dbd360d9af21e27b6832d92",
                "patch": "@@ -172,6 +172,10 @@ public URL getCodeBase() {\n \n         int pos = 0;\n         try (JarInputStreamWrapper jisw = getJarInputStreamWrapper()) {\n+            if (jisw == null) {\n+                // An error occurred, don't return corrupted content\n+                return null;\n+            }\n             while (pos < size) {\n                 int n = jisw.read(result, pos, size - pos);\n                 if (n < 0) {\n@@ -187,6 +191,8 @@ public URL getCodeBase() {\n                 getLog().debug(sm.getString(\"abstractResource.getContentFail\",\n                         getWebappPath()), ioe);\n             }\n+            // Don't return corrupted content\n+            return null;\n         }\n \n         return result;",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Don't add orderedLibs attribute if it is null.\nReplicatedContext will fail otherwise.\n\nAvoid NPE on shutdown of ReplicatedContext.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1651120 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/82d2c0e07f6bb63604ba1af67f0858a4eca809b8",
        "parent": "https://github.com/apache/tomcat/commit/498216a7eb36ccb4b2bd225465e19897db230c48",
        "bug_id": "tomcat_231",
        "file": [
            {
                "sha": "c0b5bb5c4d9e4926c7a0f49c66be1e2409160390",
                "filename": "java/org/apache/catalina/ha/context/ReplicatedContext.java",
                "blob_url": "https://github.com/apache/tomcat/blob/82d2c0e07f6bb63604ba1af67f0858a4eca809b8/java/org/apache/catalina/ha/context/ReplicatedContext.java",
                "raw_url": "https://github.com/apache/tomcat/raw/82d2c0e07f6bb63604ba1af67f0858a4eca809b8/java/org/apache/catalina/ha/context/ReplicatedContext.java",
                "status": "modified",
                "changes": 15,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/ha/context/ReplicatedContext.java?ref=82d2c0e07f6bb63604ba1af67f0858a4eca809b8",
                "patch": "@@ -83,13 +83,15 @@ protected synchronized void startInternal() throws LifecycleException {\n     @Override\n     protected synchronized void stopInternal() throws LifecycleException {\n \n+        Map<String, Object> map = ((ReplApplContext) this.context)\n+                .getAttributeMap();\n+\n         super.stopInternal();\n \n-        Map<String,Object> map =\n-                ((ReplApplContext)this.context).getAttributeMap();\n         if (map instanceof ReplicatedMap) {\n-            ((ReplicatedMap<?,?>)map).breakdown();\n+            ((ReplicatedMap<?, ?>) map).breakdown();\n         }\n+\n     }\n \n \n@@ -160,6 +162,13 @@ public void removeAttribute(String name) {\n \n         @Override\n         public void setAttribute(String name, Object value) {\n+            if (name == null) {\n+                throw new IllegalArgumentException(sm.getString(\"applicationContext.setAttribute.namenull\"));\n+            }\n+            if (value == null) {\n+                removeAttribute(name);\n+                return;\n+            }\n             if ( (!getParent().getState().isAvailable()) || \"org.apache.jasper.runtime.JspApplicationContextImpl\".equals(name) ){\n                 tomcatAttributes.put(name,value);\n             } else",
                "deletions": 3
            },
            {
                "sha": "ab0c978e4961bb7fb2a9079b4cd3779effc4459b",
                "filename": "test/org/apache/catalina/ha/context/TestReplicatedContext.java",
                "blob_url": "https://github.com/apache/tomcat/blob/82d2c0e07f6bb63604ba1af67f0858a4eca809b8/test/org/apache/catalina/ha/context/TestReplicatedContext.java",
                "raw_url": "https://github.com/apache/tomcat/raw/82d2c0e07f6bb63604ba1af67f0858a4eca809b8/test/org/apache/catalina/ha/context/TestReplicatedContext.java",
                "status": "added",
                "changes": 56,
                "additions": 56,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/ha/context/TestReplicatedContext.java?ref=82d2c0e07f6bb63604ba1af67f0858a4eca809b8",
                "patch": "@@ -0,0 +1,56 @@\n+package org.apache.catalina.ha.context;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.catalina.Context;\n+import org.apache.catalina.Host;\n+import org.apache.catalina.LifecycleException;\n+import org.apache.catalina.core.StandardHost;\n+import org.apache.catalina.startup.Tomcat;\n+import org.apache.catalina.startup.TomcatBaseTest;\n+import org.apache.tomcat.util.buf.ByteChunk;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestReplicatedContext extends TomcatBaseTest {\n+\n+    @Test\n+    public void testBug57425() throws LifecycleException, IOException, ServletException {\n+        Tomcat tomcat = getTomcatInstance();\n+        Host host = tomcat.getHost();\n+        if (host instanceof StandardHost) {\n+            ((StandardHost) host).setContextClass(ReplicatedContext.class.getName());\n+        }\n+\n+        File root = new File(\"test/webapp\");\n+        Context context = tomcat.addWebapp(host, \"\", \"\", root.getAbsolutePath());\n+\n+        Tomcat.addServlet(context, \"test\", new AccessContextServlet());\n+        context.addServletMapping(\"/access\", \"test\");\n+\n+        tomcat.start();\n+\n+        ByteChunk result = getUrl(\"http://localhost:\" + getPort() + \"/access\");\n+\n+        Assert.assertEquals(\"OK\", result.toString());\n+\n+    }\n+\n+    private static class AccessContextServlet extends HttpServlet {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        @Override\n+        protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n+                throws ServletException, IOException {\n+            getServletContext().setAttribute(\"NULL\", null);\n+            resp.getWriter().print(\"OK\");\n+        }\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "fa620e170e9c0fe57548701b7069d3ce7ffd9a31",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/82d2c0e07f6bb63604ba1af67f0858a4eca809b8/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/82d2c0e07f6bb63604ba1af67f0858a4eca809b8/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=82d2c0e07f6bb63604ba1af67f0858a4eca809b8",
                "patch": "@@ -62,6 +62,9 @@\n   </subsection>\n   <subsection name=\"Catalina\">\n     <changelog>\n+      <fix>\n+        <bug>57425</bug> Don't add attributes with null value or name to the replicated context. (fschumacher)\n+      </fix>\n       <add>\n         <bug>57431</bug> Enable usage of custom class for context creation when using embedded tomcat. (fschumacher)\n       </add>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Refactor test to stop IDE complaining about possible NPEs.\nAlso requires slightly less code.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1643128 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/210bf11a31e3cdcceac0afdd35bfac5747bcec99",
        "parent": "https://github.com/apache/tomcat/commit/962fc58c18783fc914b69ac96cad67ca605ab10c",
        "bug_id": "tomcat_232",
        "file": [
            {
                "sha": "3ddcf2f7acdba50c8ceeb05d74eaacb5ce38efef",
                "filename": "test/org/apache/catalina/valves/TestRequestFilterValve.java",
                "blob_url": "https://github.com/apache/tomcat/blob/210bf11a31e3cdcceac0afdd35bfac5747bcec99/test/org/apache/catalina/valves/TestRequestFilterValve.java",
                "raw_url": "https://github.com/apache/tomcat/raw/210bf11a31e3cdcceac0afdd35bfac5747bcec99/test/org/apache/catalina/valves/TestRequestFilterValve.java",
                "status": "modified",
                "changes": 8,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/valves/TestRequestFilterValve.java?ref=210bf11a31e3cdcceac0afdd35bfac5747bcec99",
                "patch": "@@ -24,6 +24,7 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.fail;\n \n+import org.junit.Assert;\n import org.junit.Test;\n \n import org.apache.catalina.Context;\n@@ -97,9 +98,7 @@ private void oneTest(String allow, String deny, boolean denyStatus,\n         request.getMappingData().context = context;\n         request.setCoyoteRequest(new org.apache.coyote.Request());\n \n-        if (type == null) {\n-            fail(\"Invalid test with null type\");\n-        }\n+        Assert.assertNotNull(\"Invalid test with null type\", type);\n         if (property != null) {\n             if (type.equals(\"Addr\")) {\n                 valve = new RemoteAddrValve();\n@@ -109,10 +108,9 @@ private void oneTest(String allow, String deny, boolean denyStatus,\n                 valve = new RemoteHostValve();\n                 request.setRemoteHost(property);\n                 msg.append(\" host='\" + property + \"'\");\n-            } else {\n-                fail(\"Invalid test type\" + type);\n             }\n         }\n+        Assert.assertNotNull(\"Invalid test type\" + type, valve);\n         valve.setNext(new TerminatingValve());\n \n         if (allow != null) {",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Throw a NPE if a null string is passed to the write(String,int,int) method of the PrintWriter obtained from the ServletResponse.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1634139 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/b36dbecb46527f4a50215e2861ce902aee73d134",
        "parent": "https://github.com/apache/tomcat/commit/5f0c274665504ae0d246d7eda1ac591215bba639",
        "bug_id": "tomcat_233",
        "file": [
            {
                "sha": "14c40ad98bf9feda3bd156d5a1c021ad9413a07c",
                "filename": "java/org/apache/catalina/connector/LocalStrings.properties",
                "blob_url": "https://github.com/apache/tomcat/blob/b36dbecb46527f4a50215e2861ce902aee73d134/java/org/apache/catalina/connector/LocalStrings.properties",
                "raw_url": "https://github.com/apache/tomcat/raw/b36dbecb46527f4a50215e2861ce902aee73d134/java/org/apache/catalina/connector/LocalStrings.properties",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/LocalStrings.properties?ref=b36dbecb46527f4a50215e2861ce902aee73d134",
                "patch": "@@ -63,6 +63,8 @@ coyoteResponse.setBufferSize.ise=Cannot change buffer size after data has been w\n \n inputBuffer.streamClosed=Stream closed\n \n+outputBuffer.writeNull=The String argument to write(String,int,int) may not be null\n+\n request.asyncNotSupported=A filter or servlet of the current chain does not support asynchronous operations.\n \n requestFacade.nullRequest=The request object has been recycled and is no longer associated with this facade",
                "deletions": 0
            },
            {
                "sha": "4a3265061517afd1bb17440d500d5fda7c4c6739",
                "filename": "java/org/apache/catalina/connector/OutputBuffer.java",
                "blob_url": "https://github.com/apache/tomcat/blob/b36dbecb46527f4a50215e2861ce902aee73d134/java/org/apache/catalina/connector/OutputBuffer.java",
                "raw_url": "https://github.com/apache/tomcat/raw/b36dbecb46527f4a50215e2861ce902aee73d134/java/org/apache/catalina/connector/OutputBuffer.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/OutputBuffer.java?ref=b36dbecb46527f4a50215e2861ce902aee73d134",
                "patch": "@@ -32,6 +32,7 @@\n import org.apache.tomcat.util.buf.ByteChunk;\n import org.apache.tomcat.util.buf.C2BConverter;\n import org.apache.tomcat.util.buf.CharChunk;\n+import org.apache.tomcat.util.res.StringManager;\n \n /**\n  * The buffer used by Tomcat response. This is a derivative of the Tomcat 3.3\n@@ -44,6 +45,9 @@\n public class OutputBuffer extends Writer\n     implements ByteChunk.ByteOutputChannel, CharChunk.CharOutputChannel {\n \n+    private static final StringManager sm =\n+            StringManager.getManager(Constants.Package);\n+\n     // -------------------------------------------------------------- Constants\n \n     public static final String DEFAULT_ENCODING =\n@@ -524,7 +528,7 @@ public void write(String s, int off, int len)\n         }\n \n         if (s == null) {\n-            s = \"null\";\n+            throw new NullPointerException(sm.getString(\"outputBuffer.writeNull\"));\n         }\n         cb.append(s, off, len);\n         charsWritten += len;",
                "deletions": 1
            },
            {
                "sha": "00aaa1221e7e43a8336b52a060929aead5c53f1a",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/b36dbecb46527f4a50215e2861ce902aee73d134/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/b36dbecb46527f4a50215e2861ce902aee73d134/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=b36dbecb46527f4a50215e2861ce902aee73d134",
                "patch": "@@ -169,6 +169,12 @@\n         Update storeconfig with newly introduced elements: SessionIdGenerator,\n         CookieProcessor, JarScanner and JarScanFilter. (remm)\n       </fix>\n+      <fix>\n+        Throw a <code>NullPointerException</code> if a null string is passed to\n+        the <code>write(String,int,int)</code> method of the\n+        <code>PrintWriter</code> obtained from the <code>ServletResponse</code>.\n+        (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Correct a couple of NPEs in the JNDI Realm that could be triggered with when not specifying a roleBase and enabling roleSearchAsUser.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1628524 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/ebb4d448ee75d24840fa70236ff7ac6445f3960e",
        "parent": "https://github.com/apache/tomcat/commit/0d9738e76f66ac3d8c945158c7d2059731234da5",
        "bug_id": "tomcat_234",
        "file": [
            {
                "sha": "5b0b92a30b7c9c5abd7a8b7d234ab50b6e1cceb4",
                "filename": "java/org/apache/catalina/realm/JNDIRealm.java",
                "blob_url": "https://github.com/apache/tomcat/blob/ebb4d448ee75d24840fa70236ff7ac6445f3960e/java/org/apache/catalina/realm/JNDIRealm.java",
                "raw_url": "https://github.com/apache/tomcat/raw/ebb4d448ee75d24840fa70236ff7ac6445f3960e/java/org/apache/catalina/realm/JNDIRealm.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/realm/JNDIRealm.java?ref=ebb4d448ee75d24840fa70236ff7ac6445f3960e",
                "patch": "@@ -1280,6 +1280,13 @@ protected User getUser(DirContext context, String username,\n             user = getUserBySearch(context, username, attrIds);\n         }\n \n+        if (userPassword == null && credentials != null) {\n+            // The password is available. Insert it since it may be required for\n+            // role searches.\n+            return new User(user.getUserName(), user.getDN(), credentials,\n+                    user.getRoles(), user.getUserRoleId());\n+        }\n+\n         return user;\n     }\n \n@@ -1708,6 +1715,8 @@ private void userCredentialsRemove(DirContext context)\n                 nameParts[i] = name.get(i);\n             }\n             base = roleBaseFormat.format(nameParts);\n+        } else {\n+            base = \"\";\n         }\n \n         // Perform the configured search and process the results",
                "deletions": 0
            },
            {
                "sha": "31b918871f52fba66fb0206e5451521b6162b251",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/ebb4d448ee75d24840fa70236ff7ac6445f3960e/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/ebb4d448ee75d24840fa70236ff7ac6445f3960e/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=ebb4d448ee75d24840fa70236ff7ac6445f3960e",
                "patch": "@@ -90,6 +90,10 @@\n         it in the web application class loader to set the correct code base for\n         resources loaded from JARs and WARs. (markt)\n       </fix>\n+      <fix>\n+        Correct a couple of NPEs in the JNDI Realm that could be triggered with\n+        when not specifying a roleBase and enabling roleSearchAsUser. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Web applications\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Doh! Fix NPE.\nNote digest isn't tested for zero length anywhere else so don't introduce a test here.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1623851 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/00d920d0d2177fadb52242f694b62d1221fd5b4a",
        "parent": "https://github.com/apache/tomcat/commit/f45739e7a39500d757208d68152a79d0176e6e4f",
        "bug_id": "tomcat_235",
        "file": [
            {
                "sha": "cedb63a5457f817521ea549e6d31c6fc1f0887af",
                "filename": "java/org/apache/catalina/realm/RealmBase.java",
                "blob_url": "https://github.com/apache/tomcat/blob/00d920d0d2177fadb52242f694b62d1221fd5b4a/java/org/apache/catalina/realm/RealmBase.java",
                "raw_url": "https://github.com/apache/tomcat/raw/00d920d0d2177fadb52242f694b62d1221fd5b4a/java/org/apache/catalina/realm/RealmBase.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/realm/RealmBase.java?ref=00d920d0d2177fadb52242f694b62d1221fd5b4a",
                "patch": "@@ -1200,7 +1200,7 @@ protected String digest(String credentials)  {\n     }\n \n     protected boolean hasMessageDigest() {\n-        return !(getDigest() == null && getDigest().length() > 0);\n+        return getDigest() != null;\n     }\n \n     /**",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid possible NPE (unlikely but observed while stepping through code investogating BZ 56739)\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1616204 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/6857b05b1d8ec5b577a09b15a6a070f725f5386c",
        "parent": "https://github.com/apache/tomcat/commit/661d6f38dc88f861b05d2cb5468b18376c985302",
        "bug_id": "tomcat_236",
        "file": [
            {
                "sha": "57f66cb542f1d301e6730d8c55abc6705773c0ae",
                "filename": "java/org/apache/coyote/http11/AbstractHttp11Processor.java",
                "blob_url": "https://github.com/apache/tomcat/blob/6857b05b1d8ec5b577a09b15a6a070f725f5386c/java/org/apache/coyote/http11/AbstractHttp11Processor.java",
                "raw_url": "https://github.com/apache/tomcat/raw/6857b05b1d8ec5b577a09b15a6a070f725f5386c/java/org/apache/coyote/http11/AbstractHttp11Processor.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/AbstractHttp11Processor.java?ref=6857b05b1d8ec5b577a09b15a6a070f725f5386c",
                "patch": "@@ -898,7 +898,10 @@ public final void action(ActionCode actionCode, Object param) {\n             break;\n         }\n         case DISPATCH_EXECUTE: {\n-            getEndpoint().executeNonBlockingDispatches(socketWrapper);\n+            SocketWrapper<S> wrapper = socketWrapper;\n+            if (wrapper != null) {\n+                getEndpoint().executeNonBlockingDispatches(wrapper);\n+            }\n             break;\n         }\n         case CLOSE_NOW: {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix regression with r1611506: NPE on stop (only threadStop should set thread to null, or it needs a sync).\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1611551 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/99029882cb020f8d354ad4e2ef46e8edacb0c73d",
        "parent": "https://github.com/apache/tomcat/commit/93cd8ffb0b6a40f243d9f5f41a5edffd2d9f0ed7",
        "bug_id": "tomcat_237",
        "file": [
            {
                "sha": "475fe796caeee2e7f78b6eb4a3dd1a7abc06f461",
                "filename": "java/org/apache/catalina/core/ContainerBase.java",
                "blob_url": "https://github.com/apache/tomcat/blob/99029882cb020f8d354ad4e2ef46e8edacb0c73d/java/org/apache/catalina/core/ContainerBase.java",
                "raw_url": "https://github.com/apache/tomcat/raw/99029882cb020f8d354ad4e2ef46e8edacb0c73d/java/org/apache/catalina/core/ContainerBase.java",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/ContainerBase.java?ref=99029882cb020f8d354ad4e2ef46e8edacb0c73d",
                "patch": "@@ -1354,7 +1354,6 @@ public void run() {\n                 t = e;\n                 throw e;\n             } finally {\n-                thread = null;\n                 if (!threadDone) {\n                     log.error(unexpectedDeathMessage, t);\n                 }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56343\nAvoid NPE if WebSocket API JAR from RI is used.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1584922 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/8c0b14bff2887dcfd5306991eadc1e31378d08b3",
        "parent": "https://github.com/apache/tomcat/commit/8c53cd705a4ae79b5e44249b3d4e2a78286592cb",
        "bug_id": "tomcat_238",
        "file": [
            {
                "sha": "8d099367c75fceb5ba77fece996007e6080e819b",
                "filename": "java/org/apache/tomcat/websocket/WsWebSocketContainer.java",
                "blob_url": "https://github.com/apache/tomcat/blob/8c0b14bff2887dcfd5306991eadc1e31378d08b3/java/org/apache/tomcat/websocket/WsWebSocketContainer.java",
                "raw_url": "https://github.com/apache/tomcat/raw/8c0b14bff2887dcfd5306991eadc1e31378d08b3/java/org/apache/tomcat/websocket/WsWebSocketContainer.java",
                "status": "modified",
                "changes": 8,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/WsWebSocketContainer.java?ref=8c0b14bff2887dcfd5306991eadc1e31378d08b3",
                "patch": "@@ -190,8 +190,12 @@ public Session connectToServer(Object pojo, URI path)\n             }\n         }\n \n-        ClientEndpointConfig config = ClientEndpointConfig.Builder.create().\n-                configurator(configurator).\n+        ClientEndpointConfig.Builder builder = ClientEndpointConfig.Builder.create();\n+        // Avoid NPE when using RI API JAR - see BZ 56343\n+        if (configurator != null) {\n+            builder.configurator(configurator);\n+        }\n+        ClientEndpointConfig config = builder.\n                 decoders(Arrays.asList(annotation.decoders())).\n                 encoders(Arrays.asList(annotation.encoders())).\n                 build();",
                "deletions": 2
            },
            {
                "sha": "a3f18a11f9e8b3b84a5585c01460fc289f8dc5f7",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/8c0b14bff2887dcfd5306991eadc1e31378d08b3/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/8c0b14bff2887dcfd5306991eadc1e31378d08b3/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=8c0b14bff2887dcfd5306991eadc1e31378d08b3",
                "patch": "@@ -138,6 +138,15 @@\n       </fix>\n     </changelog>\n   </subsection>\n+  <subsection name=\"WebSocket\">\n+    <changelog>\n+      <fix>\n+        <bug>56343</bug>: Avoid a NPE if Tomcat&apos;s Java WebSocket 1.0\n+        implementation is used with the Java WebSocket 1.0 API JAR from the\n+        reference implementation. (markt)\n+      </fix>\n+    </changelog>\n+  </subsection>\n   <subsection name=\"Web applications\">\n     <changelog>\n       <fix>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid possible NPE (it really needs to throw a rejected execution instead anyway).\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1574162 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/830e1d8c66f93b247b18731e239765d469fd6a66",
        "parent": "https://github.com/apache/tomcat/commit/c4488d932e45ed1b136a3ce0f15c71943d44c8c3",
        "bug_id": "tomcat_239",
        "file": [
            {
                "sha": "ad67f28e4305114fdacef11dbc74fc2a4c901541",
                "filename": "java/org/apache/tomcat/util/threads/TaskQueue.java",
                "blob_url": "https://github.com/apache/tomcat/blob/830e1d8c66f93b247b18731e239765d469fd6a66/java/org/apache/tomcat/util/threads/TaskQueue.java",
                "raw_url": "https://github.com/apache/tomcat/raw/830e1d8c66f93b247b18731e239765d469fd6a66/java/org/apache/tomcat/util/threads/TaskQueue.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/threads/TaskQueue.java?ref=830e1d8c66f93b247b18731e239765d469fd6a66",
                "patch": "@@ -55,12 +55,12 @@ public void setParent(ThreadPoolExecutor tp) {\n     }\n \n     public boolean force(Runnable o) {\n-        if ( parent.isShutdown() ) throw new RejectedExecutionException(\"Executor not running, can't force a command into the queue\");\n+        if ( parent==null || parent.isShutdown() ) throw new RejectedExecutionException(\"Executor not running, can't force a command into the queue\");\n         return super.offer(o); //forces the item onto the queue, to be used if the task is rejected\n     }\n \n     public boolean force(Runnable o, long timeout, TimeUnit unit) throws InterruptedException {\n-        if ( parent.isShutdown() ) throw new RejectedExecutionException(\"Executor not running, can't force a command into the queue\");\n+        if ( parent==null || parent.isShutdown() ) throw new RejectedExecutionException(\"Executor not running, can't force a command into the queue\");\n         return super.offer(o,timeout,unit); //forces the item onto the queue, to be used if the task is rejected\n     }\n ",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE in resource cache when making an invalid request for a resource outside of the web application.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1573368 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/be469f5c52bc5df1fe132ce101b07160a604f0aa",
        "parent": "https://github.com/apache/tomcat/commit/17ef26fba2160d912f748b4e69266967e5c04081",
        "bug_id": "tomcat_240",
        "file": [
            {
                "sha": "186734ed0a6cfe19eb6574442cdfd6a5dc100657",
                "filename": "java/org/apache/catalina/webresources/Cache.java",
                "blob_url": "https://github.com/apache/tomcat/blob/be469f5c52bc5df1fe132ce101b07160a604f0aa/java/org/apache/catalina/webresources/Cache.java",
                "raw_url": "https://github.com/apache/tomcat/raw/be469f5c52bc5df1fe132ce101b07160a604f0aa/java/org/apache/catalina/webresources/Cache.java",
                "status": "modified",
                "changes": 4,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/webresources/Cache.java?ref=be469f5c52bc5df1fe132ce101b07160a604f0aa",
                "patch": "@@ -145,9 +145,7 @@ protected void backgroundProcess() {\n \n     private boolean noCache(String path) {\n         // Don't cache resources used by the class loader (it has its own cache)\n-        // TODO. Review these exclusions once class loader resource handling is\n-        // complete\n-        if (path.startsWith(\"/WEB-INF/classes\") ||\n+        if (path == null || path.startsWith(\"/WEB-INF/classes\") ||\n                 path.startsWith(\"/WEB-INF/lib\")) {\n             return true;\n         }",
                "deletions": 3
            },
            {
                "sha": "087cc7d3039c94044e5ec8e03eb3be127cfe4eff",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/be469f5c52bc5df1fe132ce101b07160a604f0aa/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/be469f5c52bc5df1fe132ce101b07160a604f0aa/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=be469f5c52bc5df1fe132ce101b07160a604f0aa",
                "patch": "@@ -74,6 +74,10 @@\n         elements and attributes supported by the Servlet version of the merged\n         file. (markt)\n       </fix>\n+      <fix>\n+        Avoid <code>NullPointerException</code> in resource cache when making an\n+        invalid request for a resource outside of the web application. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix for NPE introduced by r1559707 that caused ELParser test to fail.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1559798 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/2a22bfc02d40db038932e95103709c41e849972b",
        "parent": "https://github.com/apache/tomcat/commit/66430452a5b8793c689486ea5ae72a3991a19527",
        "bug_id": "tomcat_241",
        "file": [
            {
                "sha": "c4e22b3ee3d297135b3c61de2f04212c3498f9e5",
                "filename": "java/org/apache/jasper/compiler/ELParser.java",
                "blob_url": "https://github.com/apache/tomcat/blob/2a22bfc02d40db038932e95103709c41e849972b/java/org/apache/jasper/compiler/ELParser.java",
                "raw_url": "https://github.com/apache/tomcat/raw/2a22bfc02d40db038932e95103709c41e849972b/java/org/apache/jasper/compiler/ELParser.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/ELParser.java?ref=2a22bfc02d40db038932e95103709c41e849972b",
                "patch": "@@ -152,7 +152,7 @@ private boolean parseFunction() {\n                 if (hasNext()) {\n                     Token t2 = nextToken();\n                     if (t2 instanceof Id) {\n-                        s1 = s2;\n+                        s1 = s2.trim();\n                         s2 = t2.toString();\n                         if (hasNext()) {\n                             curToken = nextToken();\n@@ -161,7 +161,7 @@ private boolean parseFunction() {\n                 }\n             }\n             if (curToken.toChar() == '(') {\n-                ELexpr.add(new ELNode.Function(s1.trim(), s2.trim()));\n+                ELexpr.add(new ELNode.Function(s1, s2.trim()));\n                 return true;\n             }\n             curToken = original;",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55905\nPrevent NPE when the specified tld resource does not exists.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1552071 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/bcb9c58d3855614f6e5252d27c26ceb9dceb9e13",
        "parent": "https://github.com/apache/tomcat/commit/82cf5dc6c2fc1a1dd0611267d5115aaeeaf48f2d",
        "bug_id": "tomcat_242",
        "file": [
            {
                "sha": "cc26ee3847a5aff98468701412ce27b9cb6e7da7",
                "filename": "java/org/apache/jasper/resources/LocalStrings.properties",
                "blob_url": "https://github.com/apache/tomcat/blob/bcb9c58d3855614f6e5252d27c26ceb9dceb9e13/java/org/apache/jasper/resources/LocalStrings.properties",
                "raw_url": "https://github.com/apache/tomcat/raw/bcb9c58d3855614f6e5252d27c26ceb9dceb9e13/java/org/apache/jasper/resources/LocalStrings.properties",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/resources/LocalStrings.properties?ref=bcb9c58d3855614f6e5252d27c26ceb9dceb9e13",
                "patch": "@@ -402,4 +402,4 @@ org.apache.jasper.compiler.TldCache.servletContextNull=The provided SevletContex\n org.apache.jasper.servlet.JasperInitializer.onStartup=Initializing Jasper for context [{0}]\n org.apache.jasper.servlet.TldScanner.webxmlSkip=Skipping load of TLD for URI {1} from resource path {0} as it has already been defined in <jsp-config>\n org.apache.jasper.servlet.TldScanner.webxmlAdd=Loading TLD for URI {1} from resource path {0}\n-\n+org.apache.jasper.servlet.TldScanner.webxmlFailPathDoesNotExist=Failed to process TLD with path [{0}] and URI [{1}]. The specified path does not exist.",
                "deletions": 1
            },
            {
                "sha": "8d56b5f1ed5c1420302d9d4e28d7ccfcee8c5347",
                "filename": "java/org/apache/jasper/servlet/TldScanner.java",
                "blob_url": "https://github.com/apache/tomcat/blob/bcb9c58d3855614f6e5252d27c26ceb9dceb9e13/java/org/apache/jasper/servlet/TldScanner.java",
                "raw_url": "https://github.com/apache/tomcat/raw/bcb9c58d3855614f6e5252d27c26ceb9dceb9e13/java/org/apache/jasper/servlet/TldScanner.java",
                "status": "modified",
                "changes": 34,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/servlet/TldScanner.java?ref=bcb9c58d3855614f6e5252d27c26ceb9dceb9e13",
                "patch": "@@ -175,21 +175,27 @@ protected void scanJspConfig() throws IOException, SAXException {\n             }\n \n             URL url = context.getResource(resourcePath);\n-            TldResourcePath tldResourcePath;\n-            if (resourcePath.endsWith(\".jar\")) {\n-                // if the path points to a jar file, the TLD is presumed to be\n-                // inside at META-INF/taglib.tld\n-                tldResourcePath = new TldResourcePath(\n-                        url, resourcePath, \"META-INF/taglib.tld\");\n+            if (url != null) {\n+                TldResourcePath tldResourcePath;\n+                if (resourcePath.endsWith(\".jar\")) {\n+                    // if the path points to a jar file, the TLD is presumed to be\n+                    // inside at META-INF/taglib.tld\n+                    tldResourcePath = new TldResourcePath(url, resourcePath, \"META-INF/taglib.tld\");\n+                } else {\n+                    tldResourcePath = new TldResourcePath(url, resourcePath);\n+                }\n+                // parse TLD but store using the URI supplied in the descriptor\n+                TaglibXml tld = tldParser.parse(tldResourcePath);\n+                uriTldResourcePathMap.put(taglibURI, tldResourcePath);\n+                tldResourcePathTaglibXmlMap.put(tldResourcePath, tld);\n+                if (tld.getListeners() != null) {\n+                    listeners.addAll(tld.getListeners());\n+                }\n             } else {\n-                tldResourcePath = new TldResourcePath(url, resourcePath);\n-            }\n-            // parse TLD but store using the URI supplied in the descriptor\n-            TaglibXml tld = tldParser.parse(tldResourcePath);\n-            uriTldResourcePathMap.put(taglibURI, tldResourcePath);\n-            tldResourcePathTaglibXmlMap.put(tldResourcePath, tld);\n-            if (tld.getListeners() != null) {\n-                listeners.addAll(tld.getListeners());\n+                log.warn(Localizer.getMessage(MSG + \".webxmlFailPathDoesNotExist\",\n+                        resourcePath,\n+                        taglibURI));\n+                continue;\n             }\n         }\n     }",
                "deletions": 14
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55454\nFixed NPE thrown when parsing an invalid content type.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1515841 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/8b03dcf4b400bd36314fcc8004fa74228b02990a",
        "parent": "https://github.com/apache/tomcat/commit/03aa4334d67cc44cf4ff95efb7a6d5ef73c075f1",
        "bug_id": "tomcat_243",
        "file": [
            {
                "sha": "69654048060c2d3872049a646932ad002f5e3c49",
                "filename": "java/org/apache/tomcat/util/http/parser/HttpParser.java",
                "blob_url": "https://github.com/apache/tomcat/blob/8b03dcf4b400bd36314fcc8004fa74228b02990a/java/org/apache/tomcat/util/http/parser/HttpParser.java",
                "raw_url": "https://github.com/apache/tomcat/raw/8b03dcf4b400bd36314fcc8004fa74228b02990a/java/org/apache/tomcat/util/http/parser/HttpParser.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/http/parser/HttpParser.java?ref=8b03dcf4b400bd36314fcc8004fa74228b02990a",
                "patch": "@@ -208,11 +208,13 @@ public static MediaType parseMediaType(StringReader input)\n         while (lookForSemiColon == SkipConstantResult.FOUND) {\n             String attribute = readToken(input);\n \n+            String value = \"\";\n             if (skipConstant(input, \"=\") == SkipConstantResult.FOUND) {\n-                String value = readTokenOrQuotedString(input, true);\n+                value = readTokenOrQuotedString(input, true);\n+            }\n+\n+            if (attribute != null) {\n                 parameters.put(attribute.toLowerCase(Locale.ENGLISH), value);\n-            } else {\n-                parameters.put(attribute.toLowerCase(Locale.ENGLISH), \"\");\n             }\n \n             lookForSemiColon = skipConstant(input, \";\");",
                "deletions": 3
            },
            {
                "sha": "b564ed8afa327430cdb919d8ec196a78bab1a500",
                "filename": "test/org/apache/tomcat/util/http/parser/TestMediaType.java",
                "blob_url": "https://github.com/apache/tomcat/blob/8b03dcf4b400bd36314fcc8004fa74228b02990a/test/org/apache/tomcat/util/http/parser/TestMediaType.java",
                "raw_url": "https://github.com/apache/tomcat/raw/8b03dcf4b400bd36314fcc8004fa74228b02990a/test/org/apache/tomcat/util/http/parser/TestMediaType.java",
                "status": "modified",
                "changes": 19,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/tomcat/util/http/parser/TestMediaType.java?ref=8b03dcf4b400bd36314fcc8004fa74228b02990a",
                "patch": "@@ -212,6 +212,25 @@ public void testBug53353() throws IOException {\n     }\n \n \n+    @Test\n+    public void testBug55454() throws IOException {\n+        String input = \"text/html;;charset=UTF-8\";\n+\n+        StringReader sr = new StringReader(input);\n+        MediaType m = HttpParser.parseMediaType(sr);\n+\n+        assertEquals(\"text\", m.getType());\n+        assertEquals(\"html\", m.getSubtype());\n+\n+        assertTrue(m.getParameterCount() == 1);\n+\n+        assertEquals(\"UTF-8\", m.getParameterValue(\"charset\"));\n+        assertEquals(\"UTF-8\", m.getCharset());\n+\n+        assertEquals(\"text/html; charset=UTF-8\", m.toString());\n+    }\n+\n+\n     private void doTest(Parameter... parameters) throws IOException {\n         for (String lws : LWS_VALUES) {\n             doTest(lws, parameters);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "More clearly differentiate between resetting the stream and just sending the reset frame. Ensure that the correct approach is taken. This reduces the instance of NPEs when running unit tests as reported by rjung.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1745145 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/bc35f8cede273ed991b2c21d474132fbd48a635e",
        "parent": "https://github.com/apache/tomcat/commit/f7def7230b38d10644839c3f073bc510c2061f4f",
        "bug_id": "tomcat_244",
        "file": [
            {
                "sha": "ce22357d344f8cd37b2530bdd69a5181392c34f3",
                "filename": "java/org/apache/coyote/http2/Http2UpgradeHandler.java",
                "blob_url": "https://github.com/apache/tomcat/blob/bc35f8cede273ed991b2c21d474132fbd48a635e/java/org/apache/coyote/http2/Http2UpgradeHandler.java",
                "raw_url": "https://github.com/apache/tomcat/raw/bc35f8cede273ed991b2c21d474132fbd48a635e/java/org/apache/coyote/http2/Http2UpgradeHandler.java",
                "status": "modified",
                "changes": 25,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http2/Http2UpgradeHandler.java?ref=bc35f8cede273ed991b2c21d474132fbd48a635e",
                "patch": "@@ -293,7 +293,12 @@ public SocketState upgradeDispatch(SocketEvent status) {\n                         } catch (StreamException se) {\n                             // Stream errors are not fatal to the connection so\n                             // continue reading frames\n-                            resetStream(se);\n+                            Stream stream = getStream(se.getStreamId(), false);\n+                            if (stream == null) {\n+                                sendStreamReset(se);\n+                            } else {\n+                                stream.close(se);\n+                            }\n                         }\n                     }\n                     // No more frames to read so switch to the keep-alive\n@@ -384,7 +389,7 @@ private void checkPauseState() throws IOException {\n     }\n \n \n-    void resetStream(StreamException se) throws IOException {\n+    void sendStreamReset(StreamException se) throws IOException {\n \n         if (log.isDebugEnabled()) {\n             log.debug(sm.getString(\"upgradeHandler.rst.debug\", connectionId,\n@@ -1234,17 +1239,11 @@ public void setting(Setting setting, long value) throws ConnectionException {\n                 try {\n                     stream.incrementWindowSize(diff);\n                 } catch (Http2Exception h2e) {\n-                    try {\n-                        resetStream(new StreamException(sm.getString(\n-                                \"upgradeHandler.windowSizeTooBig\", connectionId,\n-                                stream.getIdentifier()),\n-                                h2e.getError(), stream.getIdentifier().intValue()));\n-                    } catch (IOException ioe) {\n-                        if (log.isDebugEnabled()) {\n-                            log.debug(sm.getString(\"upgradeHandler.socketCloseFailed\"), ioe);\n-                        }\n-                    }\n-                }\n+                    stream.close(new StreamException(sm.getString(\n+                            \"upgradeHandler.windowSizeTooBig\", connectionId,\n+                            stream.getIdentifier()),\n+                            h2e.getError(), stream.getIdentifier().intValue()));\n+               }\n             }\n         } else {\n             remoteSettings.set(setting, value);",
                "deletions": 13
            },
            {
                "sha": "60a443b59f4aff2377f17c832576c6ae03f65233",
                "filename": "java/org/apache/coyote/http2/Stream.java",
                "blob_url": "https://github.com/apache/tomcat/blob/bc35f8cede273ed991b2c21d474132fbd48a635e/java/org/apache/coyote/http2/Stream.java",
                "raw_url": "https://github.com/apache/tomcat/raw/bc35f8cede273ed991b2c21d474132fbd48a635e/java/org/apache/coyote/http2/Stream.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http2/Stream.java?ref=bc35f8cede273ed991b2c21d474132fbd48a635e",
                "patch": "@@ -369,7 +369,9 @@ boolean isInputFinished() {\n     void close(Http2Exception http2Exception) {\n         if (http2Exception instanceof StreamException) {\n             try {\n-                handler.resetStream((StreamException) http2Exception);\n+                StreamException se = (StreamException) http2Exception;\n+                reset(se.getError().getCode());\n+                handler.sendStreamReset(se);\n             } catch (IOException ioe) {\n                 ConnectionException ce = new ConnectionException(\n                         sm.getString(\"stream.reset.fail\"), Http2Error.PROTOCOL_ERROR);",
                "deletions": 1
            },
            {
                "sha": "a8a343a7d0e6fc14c2cc3972e2e0e9b3885de46c",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/bc35f8cede273ed991b2c21d474132fbd48a635e/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/bc35f8cede273ed991b2c21d474132fbd48a635e/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=bc35f8cede273ed991b2c21d474132fbd48a635e",
                "patch": "@@ -84,6 +84,9 @@\n         that request processing has fully completed before starting the next\n         request. (markt)\n       </fix>\n+      <fix>\n+        Improve handling of HTTP/2 stream resets. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Jasper\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55291\nAvoid NPE when registering a session. Patch provided by rstoyanchev.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1505689 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/ab6f21da230df89dd383ee84a5ba88f271453a8e",
        "parent": "https://github.com/apache/tomcat/commit/2be5be837aa1e5b222afb856f0444badf62b47e1",
        "bug_id": "tomcat_245",
        "file": [
            {
                "sha": "d111cb4917321692eae7b72265bc657c89787e37",
                "filename": "java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "blob_url": "https://github.com/apache/tomcat/blob/ab6f21da230df89dd383ee84a5ba88f271453a8e/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "raw_url": "https://github.com/apache/tomcat/raw/ab6f21da230df89dd383ee84a5ba88f271453a8e/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/server/WsServerContainer.java?ref=ab6f21da230df89dd383ee84a5ba88f271453a8e",
                "patch": "@@ -347,7 +347,7 @@ protected void unregisterSession(Endpoint endpoint, WsSession wsSession) {\n     private void registerAuthenticatedSession(WsSession wsSession,\n             String httpSessionId) {\n         Set<WsSession> wsSessions = authenticatedSessions.get(httpSessionId);\n-        if (wsSession == null) {\n+        if (wsSessions == null) {\n             wsSessions = Collections.newSetFromMap(\n                      new ConcurrentHashMap<WsSession,Boolean>());\n              authenticatedSessions.putIfAbsent(httpSessionId, wsSessions);",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE when sending buffered data from the server (there is no mask in this case).\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1502175 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/25b3443a380f596b9ad5b455ca7a6c30abef1f7e",
        "parent": "https://github.com/apache/tomcat/commit/9526e682aac9b9d52750b10d68cc0f1455da3b25",
        "bug_id": "tomcat_246",
        "file": [
            {
                "sha": "aac37bd29a4c0aec5efc776300e69b952c18599d",
                "filename": "java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "blob_url": "https://github.com/apache/tomcat/blob/25b3443a380f596b9ad5b455ca7a6c30abef1f7e/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "raw_url": "https://github.com/apache/tomcat/raw/25b3443a380f596b9ad5b455ca7a6c30abef1f7e/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "status": "modified",
                "changes": 12,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java?ref=25b3443a380f596b9ad5b455ca7a6c30abef1f7e",
                "patch": "@@ -675,10 +675,14 @@ public void write() {\n \n             // Write the payload\n             while (payload.hasRemaining() && outputBuffer.hasRemaining()) {\n-                outputBuffer.put(\n-                        (byte) (payload.get() ^ (mask[maskIndex++] & 0xFF)));\n-                if (maskIndex > 3) {\n-                    maskIndex = 0;\n+                if (mask == null) {\n+                    outputBuffer.put(payload.get());\n+                } else {\n+                    outputBuffer.put(\n+                            (byte) (payload.get() ^ (mask[maskIndex++] & 0xFF)));\n+                    if (maskIndex > 3) {\n+                        maskIndex = 0;\n+                    }\n                 }\n             }\n             if (payload.hasRemaining()) {",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Another NPE fox after the switch to obtaining the JspConfigDescription from the ServletContext\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1501926 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/de9bafd981cfc1490a822efcb218f7cbcf650bea",
        "parent": "https://github.com/apache/tomcat/commit/29a20ca27b2ca1be4725ec1a67b4fed1924f89c5",
        "bug_id": "tomcat_247",
        "file": [
            {
                "sha": "2d7f05c0af347c75f92813c4c34aa48eb2cfb08b",
                "filename": "java/org/apache/jasper/compiler/JspConfig.java",
                "blob_url": "https://github.com/apache/tomcat/blob/de9bafd981cfc1490a822efcb218f7cbcf650bea/java/org/apache/jasper/compiler/JspConfig.java",
                "raw_url": "https://github.com/apache/tomcat/raw/de9bafd981cfc1490a822efcb218f7cbcf650bea/java/org/apache/jasper/compiler/JspConfig.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/JspConfig.java?ref=de9bafd981cfc1490a822efcb218f7cbcf650bea",
                "patch": "@@ -83,6 +83,7 @@ private void processWebDotXml() {\n             return;\n         }\n \n+        jspProperties = new Vector<>();\n         Collection<JspPropertyGroupDescriptor> jspPropertyGroups =\n                 jspConfig.getJspPropertyGroups();\n ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "59567: Fix a rare NPE case scanning TLDs [if no files are found, then the return value of getResourcePaths is null, that is correct].\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1744432 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/825fe2cfa661d7e492b8e0d1cdd04dcc5ca31859",
        "parent": "https://github.com/apache/tomcat/commit/05f900ca5ed7cbccb62ea76f703c391a89bf8358",
        "bug_id": "tomcat_248",
        "file": [
            {
                "sha": "f6c64b44cb1819947c550a2033e23367a438c21d",
                "filename": "java/org/apache/jasper/servlet/TldScanner.java",
                "blob_url": "https://github.com/apache/tomcat/blob/825fe2cfa661d7e492b8e0d1cdd04dcc5ca31859/java/org/apache/jasper/servlet/TldScanner.java",
                "raw_url": "https://github.com/apache/tomcat/raw/825fe2cfa661d7e492b8e0d1cdd04dcc5ca31859/java/org/apache/jasper/servlet/TldScanner.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/servlet/TldScanner.java?ref=825fe2cfa661d7e492b8e0d1cdd04dcc5ca31859",
                "patch": "@@ -391,6 +391,9 @@ public void scanWebInfClasses() throws IOException {\n             // IDEs.\n \n             Set<String> paths = context.getResourcePaths(WEB_INF + \"classes/META-INF\");\n+            if (paths == null) {\n+                return;\n+            }\n \n             for (String path : paths) {\n                 if (path.endsWith(TLD_EXT)) {",
                "deletions": 0
            },
            {
                "sha": "2cc40f85dc4e68b936fca57f11560b485664c758",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/825fe2cfa661d7e492b8e0d1cdd04dcc5ca31859/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/825fe2cfa661d7e492b8e0d1cdd04dcc5ca31859/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=825fe2cfa661d7e492b8e0d1cdd04dcc5ca31859",
                "patch": "@@ -74,6 +74,14 @@\n       </fix>\n     </changelog>\n   </subsection>\n+  <subsection name=\"Jasper\">\n+    <changelog>\n+      <fix>\n+        <bug>59567</bug>: Fix NPE scanning webapps for TLDs when an exploded\n+        JAR has an empty WEB-INF/classes/META-INF folder. (remm)\n+      </fix>\n+    </changelog>\n+  </subsection>\n   <subsection name=\"Other\">\n     <changelog>\n       <update>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Since EL 2.2 javadoc ELContext.getContext must throw NPE when the key that is provided in NULL.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1499953 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/702fd3c53d45e3a8d7c4c860083e2fccb6344868",
        "parent": "https://github.com/apache/tomcat/commit/8e81e493c584bda010d071bfd254a79a06f4cc9f",
        "bug_id": "tomcat_249",
        "file": [
            {
                "sha": "014e802d4c259b4bd78b48fa5aed7fe3153a27af",
                "filename": "java/javax/el/ELContext.java",
                "blob_url": "https://github.com/apache/tomcat/blob/702fd3c53d45e3a8d7c4c860083e2fccb6344868/java/javax/el/ELContext.java",
                "raw_url": "https://github.com/apache/tomcat/raw/702fd3c53d45e3a8d7c4c860083e2fccb6344868/java/javax/el/ELContext.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/javax/el/ELContext.java?ref=702fd3c53d45e3a8d7c4c860083e2fccb6344868",
                "patch": "@@ -77,7 +77,14 @@ public void putContext(@SuppressWarnings(\"rawtypes\") Class key,\n     }\n \n     // Can't use Class<?> because API needs to match specification\n+    /**\n+     * @throws NullPointerException\n+     *              If the key is <code>null</code>\n+     */\n     public Object getContext(@SuppressWarnings(\"rawtypes\") Class key) {\n+        if (key == null) {\n+            throw new NullPointerException();\n+        }\n         if (this.map == null) {\n             return null;\n         }",
                "deletions": 0
            },
            {
                "sha": "d59b19a5e46b738878505df81ea0a2c0605feb64",
                "filename": "test/javax/el/TestELContext.java",
                "blob_url": "https://github.com/apache/tomcat/blob/702fd3c53d45e3a8d7c4c860083e2fccb6344868/test/javax/el/TestELContext.java",
                "raw_url": "https://github.com/apache/tomcat/raw/702fd3c53d45e3a8d7c4c860083e2fccb6344868/test/javax/el/TestELContext.java",
                "status": "added",
                "changes": 32,
                "additions": 32,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/javax/el/TestELContext.java?ref=702fd3c53d45e3a8d7c4c860083e2fccb6344868",
                "patch": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package javax.el;\n+\n+import org.junit.Test;\n+\n+public class TestELContext {\n+\n+    /**\n+     * Tests that a null key results in an NPE as per EL Javadoc.\n+     */\n+    @Test(expected = NullPointerException.class)\n+    public void testGetContext() {\n+        ELContext elContext = new TesterELContext();\n+        elContext.getContext(null);\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "c0fd1a2f7c1ddf2cac43c0f64463a1888da788ce",
                "filename": "test/javax/el/TesterELContext.java",
                "blob_url": "https://github.com/apache/tomcat/blob/702fd3c53d45e3a8d7c4c860083e2fccb6344868/test/javax/el/TesterELContext.java",
                "raw_url": "https://github.com/apache/tomcat/raw/702fd3c53d45e3a8d7c4c860083e2fccb6344868/test/javax/el/TesterELContext.java",
                "status": "added",
                "changes": 36,
                "additions": 36,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/javax/el/TesterELContext.java?ref=702fd3c53d45e3a8d7c4c860083e2fccb6344868",
                "patch": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package javax.el;\n+\n+public class TesterELContext extends ELContext {\n+\n+    @Override\n+    public ELResolver getELResolver() {\n+        return null;\n+    }\n+\n+    @Override\n+    public FunctionMapper getFunctionMapper() {\n+        return null;\n+    }\n+\n+    @Override\n+    public VariableMapper getVariableMapper() {\n+        return null;\n+    }\n+\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE when a background thread tries to expire the HTTP sessions.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1499534 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/f773ff326eaa681a65804a6d9e989a63b3f3a608",
        "parent": "https://github.com/apache/tomcat/commit/06832c66086f1c3cd6a14f66262c474a41bf5751",
        "bug_id": "tomcat_250",
        "file": [
            {
                "sha": "c704d9fd21cc8b1e28272c9700230f6c0fd681ad",
                "filename": "java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "blob_url": "https://github.com/apache/tomcat/blob/f773ff326eaa681a65804a6d9e989a63b3f3a608/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "raw_url": "https://github.com/apache/tomcat/raw/f773ff326eaa681a65804a6d9e989a63b3f3a608/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "status": "modified",
                "changes": 14,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/server/WsServerContainer.java?ref=f773ff326eaa681a65804a6d9e989a63b3f3a608",
                "patch": "@@ -367,12 +367,14 @@ private void unregisterAuthenticatedSession(WsSession wsSession,\n     public void closeAuthenticatedSession(String httpSessionId) {\n         Set<WsSession> wsSessions = authenticatedSessions.remove(httpSessionId);\n \n-        for (WsSession wsSession : wsSessions) {\n-            try {\n-                wsSession.close(AUTHENTICATED_HTTP_SESSION_CLOSED);\n-            } catch (IOException e) {\n-                // Any IOExceptions during close will have been caught and the\n-                // onError method called.\n+        if (wsSessions != null && !wsSessions.isEmpty()) {\n+            for (WsSession wsSession : wsSessions) {\n+                try {\n+                    wsSession.close(AUTHENTICATED_HTTP_SESSION_CLOSED);\n+                } catch (IOException e) {\n+                    // Any IOExceptions during close will have been caught and the\n+                    // onError method called.\n+                }\n             }\n         }\n     }",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55184\nAvoid NPE.\nPatch provided by Niki Dokovski.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1499011 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/a267dbf064a04b82a398df22212bf5948109d806",
        "parent": "https://github.com/apache/tomcat/commit/a634d85f5906283a1d42d9dbb9295bdc00cf29b8",
        "bug_id": "tomcat_251",
        "file": [
            {
                "sha": "9ade75aa3ec7057f38640c99ebd460349b8b202b",
                "filename": "java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java",
                "blob_url": "https://github.com/apache/tomcat/blob/a267dbf064a04b82a398df22212bf5948109d806/java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java",
                "raw_url": "https://github.com/apache/tomcat/raw/a267dbf064a04b82a398df22212bf5948109d806/java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java?ref=a267dbf064a04b82a398df22212bf5948109d806",
                "patch": "@@ -553,7 +553,7 @@ public MessageHandlerInfo(Method m, List<DecoderEntry> decoderEntries) {\n                             m, session, config, null, params, indexInputStream,\n                             true, indexSession, true, maxMessageSize);\n                     results.add(mh);\n-                } else if (decoderMatch.hasMatches()) {\n+                } else if (decoderMatch != null && decoderMatch.hasMatches()) {\n                     if (decoderMatch.getBinaryDecoders().size() > 0) {\n                         MessageHandler mh = new PojoMessageHandlerWholeBinary(\n                                 pojo, m, session, config,",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54382\nAvoid NPE with an empty SSI directive\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1430550 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/d83a5e52615fa63b72d4e78fc0326d070cfa27ce",
        "parent": "https://github.com/apache/tomcat/commit/5f7af1bc0b97b65dfc3151de22de043e043daff3",
        "bug_id": "tomcat_252",
        "file": [
            {
                "sha": "420972834a5c80cee002a7af8f058649a8a31c5e",
                "filename": "java/org/apache/catalina/ssi/SSIProcessor.java",
                "blob_url": "https://github.com/apache/tomcat/blob/d83a5e52615fa63b72d4e78fc0326d070cfa27ce/java/org/apache/catalina/ssi/SSIProcessor.java",
                "raw_url": "https://github.com/apache/tomcat/raw/d83a5e52615fa63b72d4e78fc0326d070cfa27ce/java/org/apache/catalina/ssi/SSIProcessor.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/ssi/SSIProcessor.java?ref=d83a5e52615fa63b72d4e78fc0326d070cfa27ce",
                "patch": "@@ -307,11 +307,11 @@ private String parseCmd(StringBuilder cmd) {\n                 break;\n             }\n         }\n-        String command = null;\n-        if (firstLetter != -1) {\n-            command = cmd.substring(firstLetter, lastLetter + 1);\n+        if (firstLetter == -1) {\n+            return \"\";\n+        } else {\n+            return cmd.substring(firstLetter, lastLetter + 1);\n         }\n-        return command;\n     }\n \n ",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54260\nAvoid NPE when using JSP unloading and tag files.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1428355 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/94da50724f8fbad501873b1103c4f88e2825fa9c",
        "parent": "https://github.com/apache/tomcat/commit/ec4cb8f8a519531e75922e6ab94129d32008b7c6",
        "bug_id": "tomcat_253",
        "file": [
            {
                "sha": "3a7cc220f182bfd692b74aa515cc47ffecf97791",
                "filename": "java/org/apache/jasper/util/FastRemovalDequeue.java",
                "blob_url": "https://github.com/apache/tomcat/blob/94da50724f8fbad501873b1103c4f88e2825fa9c/java/org/apache/jasper/util/FastRemovalDequeue.java",
                "raw_url": "https://github.com/apache/tomcat/raw/94da50724f8fbad501873b1103c4f88e2825fa9c/java/org/apache/jasper/util/FastRemovalDequeue.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/util/FastRemovalDequeue.java?ref=94da50724f8fbad501873b1103c4f88e2825fa9c",
                "patch": "@@ -174,7 +174,7 @@ public synchronized T pop() {\n      * Removes any element of the list and returns its content.\n      **/\n     public synchronized void remove(final Entry element) {\n-        if (!element.getValid()) {\n+        if (element == null || !element.getValid()) {\n             return;\n         }\n         Entry next = element.getNext();",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix FindBugs warning\nAvoid NPE (although given an OOME has occurred I'm not sure it matters)\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1417201 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/cc196506f2b89b20e00dc8a67dc21e2f244f917b",
        "parent": "https://github.com/apache/tomcat/commit/da327f49e6b3b9485f6be39de2c61cfd1cb75f0e",
        "bug_id": "tomcat_254",
        "file": [
            {
                "sha": "bc62b153d9524ea3e2d7b5f3c41fd0804823a657",
                "filename": "java/org/apache/tomcat/util/net/NioEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/cc196506f2b89b20e00dc8a67dc21e2f244f917b/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/cc196506f2b89b20e00dc8a67dc21e2f244f917b/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/NioEndpoint.java?ref=cc196506f2b89b20e00dc8a67dc21e2f244f917b",
                "patch": "@@ -1617,7 +1617,9 @@ public void run() {\n                 } catch (OutOfMemoryError oom) {\n                     try {\n                         oomParachuteData = null;\n-                        socket.getPoller().cancelledKey(key,SocketStatus.ERROR);\n+                        if (socket != null) {\n+                            socket.getPoller().cancelledKey(key,SocketStatus.ERROR);\n+                        }\n                         releaseCaches();\n                         log.error(\"\", oom);\n                     }catch ( Throwable oomt ) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix warnings in IntrospectionUtils.\nOne functional change to replace a debug message and a subsequent NPE with an IAE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1406394 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/1b900b6b26d6aa3f683b610311251306c9b11838",
        "parent": "https://github.com/apache/tomcat/commit/c45676bee5926c913f5bbe47f2e7d48d4fea280d",
        "bug_id": "tomcat_255",
        "file": [
            {
                "sha": "bc3b9c334857b46a5f3d30a9bb1d5bfa7c30220b",
                "filename": "java/org/apache/tomcat/util/IntrospectionUtils.java",
                "blob_url": "https://github.com/apache/tomcat/blob/1b900b6b26d6aa3f683b610311251306c9b11838/java/org/apache/tomcat/util/IntrospectionUtils.java",
                "raw_url": "https://github.com/apache/tomcat/raw/1b900b6b26d6aa3f683b610311251306c9b11838/java/org/apache/tomcat/util/IntrospectionUtils.java",
                "status": "modified",
                "changes": 10,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/IntrospectionUtils.java?ref=1b900b6b26d6aa3f683b610311251306c9b11838",
                "patch": "@@ -40,6 +40,8 @@\n     public static boolean setProperty(Object o, String name, String value) {\n         return setProperty(o,name,value,true);\n     }\n+\n+    @SuppressWarnings(\"null\") // setPropertyMethodVoid is not null when used\n     public static boolean setProperty(Object o, String name, String value,\n             boolean invokeSetProperty) {\n         if (log.isDebugEnabled())\n@@ -308,6 +310,8 @@ public static void clear() {\n         return methods;\n     }\n \n+    @SuppressWarnings(\"null\") // Neither params nor methodParams can be null\n+                              // when comparing their lengths\n     public static Method findMethod(Class<?> c, String name,\n             Class<?> params[]) {\n         Method methods[] = findMethods(c);\n@@ -341,9 +345,9 @@ public static Method findMethod(Class<?> c, String name,\n     public static Object callMethod1(Object target, String methodN,\n             Object param1, String typeParam1, ClassLoader cl) throws Exception {\n         if (target == null || param1 == null) {\n-            if (log.isDebugEnabled())\n-                log.debug(\"IntrospectionUtils: Assert: Illegal params \" +\n-                        target + \" \" + param1);\n+            throw new IllegalArgumentException(\n+                    \"IntrospectionUtils: Assert: Illegal params \" +\n+                    target + \" \" + param1);\n         }\n         if (log.isDebugEnabled())\n             log.debug(\"IntrospectionUtils: callMethod1 \" +",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=53993\nAvoid NPE when the session is invalidated\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1397868 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/39c4270acadaf605a9201bb60b8a8ff118fccdf1",
        "parent": "https://github.com/apache/tomcat/commit/4b1dee68b3838016ca5a4390ac0a046499209692",
        "bug_id": "tomcat_256",
        "file": [
            {
                "sha": "b795ddd6117fb4b010957ce99774a307ec878769",
                "filename": "java/org/apache/catalina/valves/AccessLogValve.java",
                "blob_url": "https://github.com/apache/tomcat/blob/39c4270acadaf605a9201bb60b8a8ff118fccdf1/java/org/apache/catalina/valves/AccessLogValve.java",
                "raw_url": "https://github.com/apache/tomcat/raw/39c4270acadaf605a9201bb60b8a8ff118fccdf1/java/org/apache/catalina/valves/AccessLogValve.java",
                "status": "modified",
                "changes": 15,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/valves/AccessLogValve.java?ref=39c4270acadaf605a9201bb60b8a8ff118fccdf1",
                "patch": "@@ -46,6 +46,7 @@\n import org.apache.catalina.Globals;\n import org.apache.catalina.LifecycleException;\n import org.apache.catalina.LifecycleState;\n+import org.apache.catalina.Session;\n import org.apache.catalina.connector.Request;\n import org.apache.catalina.connector.Response;\n import org.apache.coyote.RequestInfo;\n@@ -1860,15 +1861,15 @@ public void addElement(CharArrayWriter buf, Date date, Request request,\n         @Override\n         public void addElement(CharArrayWriter buf, Date date, Request request,\n                 Response response, long time) {\n-            if (request != null) {\n-                if (request.getSession(false) != null) {\n-                    buf.append(request.getSessionInternal(false)\n-                            .getIdInternal());\n-                } else {\n+            if (request == null) {\n+                buf.append('-');\n+            } else {\n+                Session session = request.getSessionInternal(false);\n+                if (session == null) {\n                     buf.append('-');\n+                } else {\n+                    buf.append(session.getIdInternal());\n                 }\n-            } else {\n-                buf.append('-');\n             }\n         }\n     }",
                "deletions": 7
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Clean-up\n- fix false positive NPE warnings by removing redundant code and suppressing remaining warning\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1380381 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/7a9d7d71a29ddc90670a9df7bca9a35ac4b6941e",
        "parent": "https://github.com/apache/tomcat/commit/7c018980950d39b12959adf37ff5175a4fc02bc5",
        "bug_id": "tomcat_257",
        "file": [
            {
                "sha": "2f99c32f8b9de80c2b524183472744e0890d5644",
                "filename": "java/org/apache/jasper/compiler/PageInfo.java",
                "blob_url": "https://github.com/apache/tomcat/blob/7a9d7d71a29ddc90670a9df7bca9a35ac4b6941e/java/org/apache/jasper/compiler/PageInfo.java",
                "raw_url": "https://github.com/apache/tomcat/raw/7a9d7d71a29ddc90670a9df7bca9a35ac4b6941e/java/org/apache/jasper/compiler/PageInfo.java",
                "status": "modified",
                "changes": 4,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/PageInfo.java?ref=7a9d7d71a29ddc90670a9df7bca9a35ac4b6941e",
                "patch": "@@ -337,9 +337,6 @@ public void pushPrefixMapping(String prefix, String uri) {\n      */\n     public void popPrefixMapping(String prefix) {\n         LinkedList<String> stack = xmlPrefixMapper.get(prefix);\n-        if (stack == null || stack.size() == 0) {\n-            // XXX throw new Exception(\"XXX\");\n-        }\n         stack.removeFirst();\n     }\n \n@@ -465,6 +462,7 @@ public void setBufferValue(String value, Node n, ErrorDispatcher err)\n                 }\n             }\n             try {\n+                @SuppressWarnings(\"null\") // value can't be null here\n                 Integer k = new Integer(value.substring(0, value.length()-2));\n                 buffer = k.intValue() * 1024;\n             } catch (NumberFormatException e) {",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Clean-up\n- fix false positive NPE warnings by removing redundant tests and suppressing remaining warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1380380 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/7c018980950d39b12959adf37ff5175a4fc02bc5",
        "parent": "https://github.com/apache/tomcat/commit/f557a283c4426f79f701d6b6a3946fa3d5d16585",
        "bug_id": "tomcat_258",
        "file": [
            {
                "sha": "0d3a5ad6147a25c30dfaa0caa00dd2439389a929",
                "filename": "java/org/apache/jasper/compiler/Validator.java",
                "blob_url": "https://github.com/apache/tomcat/blob/7c018980950d39b12959adf37ff5175a4fc02bc5/java/org/apache/jasper/compiler/Validator.java",
                "raw_url": "https://github.com/apache/tomcat/raw/7c018980950d39b12959adf37ff5175a4fc02bc5/java/org/apache/jasper/compiler/Validator.java",
                "status": "modified",
                "changes": 10,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/Validator.java?ref=7c018980950d39b12959adf37ff5175a4fc02bc5",
                "patch": "@@ -652,6 +652,7 @@ public void visit(Node.UseBean n) throws JasperException {\n             visitBody(n);\n         }\n \n+        @SuppressWarnings(\"null\") // type can't be null after initial test\n         @Override\n         public void visit(Node.PlugIn n) throws JasperException {\n             JspUtil.checkAttributes(\"Plugin\", n, plugInAttrs, err);\n@@ -803,6 +804,7 @@ private boolean containsDeferredSyntax(String value) {\n             return false;\n         }\n \n+        @SuppressWarnings(\"null\") // tagInfo can't be null after initial test\n         @Override\n         public void visit(Node.CustomTag n) throws JasperException {\n \n@@ -1071,9 +1073,6 @@ private void checkXmlAttributes(Node.CustomTag n,\n                 throws JasperException {\n \n             TagInfo tagInfo = n.getTagInfo();\n-            if (tagInfo == null) {\n-                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n-            }\n             TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n             Attributes attrs = n.getAttributes();\n \n@@ -1279,9 +1278,6 @@ private void checkNamedAttributes(Node.CustomTag n,\n                 throws JasperException {\n \n             TagInfo tagInfo = n.getTagInfo();\n-            if (tagInfo == null) {\n-                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n-            }\n             TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n             Node.Nodes naNodes = n.getNamedAttributeNodes();\n \n@@ -1663,6 +1659,7 @@ public Method resolveFunction(String prefix, String localName) {\n                     this.fmapper = fmapper;\n                 }\n \n+                @SuppressWarnings(\"null\") // c can't be null after catch block\n                 @Override\n                 public void visit(ELNode.Function n) throws JasperException {\n \n@@ -1726,6 +1723,7 @@ public void visit(Node.CustomTag n) throws JasperException {\n                 err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n             }\n \n+            @SuppressWarnings(\"null\") // tagInfo can't be null here\n             ValidationMessage[] errors = tagInfo.validate(n.getTagData());\n             if (errors != null && errors.length != 0) {\n                 StringBuilder errMsg = new StringBuilder();",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Clean-up\n- Fix FindBugs NPE warnings\n- Java 7 <>\n- Remove static imports (auto completes are easier without them)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1377835 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/6e424d91405fee4210f6b6400c07f545f6ec2e3b",
        "parent": "https://github.com/apache/tomcat/commit/af3e70b58bbc773aff26b64cd7cd001d8054c3d8",
        "bug_id": "tomcat_259",
        "file": [
            {
                "sha": "0f4b4e4a0a02cc05bb12adee9611e936f3952d0d",
                "filename": "test/org/apache/catalina/websocket/TestWebSocket.java",
                "blob_url": "https://github.com/apache/tomcat/blob/6e424d91405fee4210f6b6400c07f545f6ec2e3b/test/org/apache/catalina/websocket/TestWebSocket.java",
                "raw_url": "https://github.com/apache/tomcat/raw/6e424d91405fee4210f6b6400c07f545f6ec2e3b/test/org/apache/catalina/websocket/TestWebSocket.java",
                "status": "modified",
                "changes": 49,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/websocket/TestWebSocket.java?ref=6e424d91405fee4210f6b6400c07f545f6ec2e3b",
                "patch": "@@ -38,10 +38,7 @@\n import javax.naming.NamingException;\n import javax.servlet.http.HttpServletRequest;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-\n+import org.junit.Assert;\n import org.junit.Test;\n \n import org.apache.catalina.Context;\n@@ -84,19 +81,20 @@ public void testSimple() throws Exception {\n \n         // Make sure we got an upgrade response\n         String responseLine = client.reader.readLine();\n-        assertTrue(responseLine.startsWith(\"HTTP/1.1 101\"));\n+        Assert.assertNotNull(responseLine);\n+        Assert.assertTrue(responseLine.startsWith(\"HTTP/1.1 101\"));\n \n         // Swallow the headers\n         String responseHeaderLine = client.reader.readLine();\n-        while (!responseHeaderLine.equals(\"\")) {\n+        while (!\"\".equals(responseHeaderLine)) {\n             responseHeaderLine = client.reader.readLine();\n         }\n \n         // Now we can do WebSocket\n         client.sendMessage(\"foo\", false);\n         client.sendMessage(\"foo\", true);\n \n-        assertEquals(\"foofoo\", client.readMessage());\n+        Assert.assertEquals(\"foofoo\", client.readMessage());\n \n         // Finished with the socket\n         client.close();\n@@ -123,17 +121,18 @@ public void testDetectWrongVersion() throws Exception {\n \n         // Make sure we got an upgrade response\n         String responseLine = client.reader.readLine();\n-        assertTrue(responseLine.startsWith(\"HTTP/1.1 426\"));\n+        Assert.assertNotNull(responseLine);\n+        Assert.assertTrue(responseLine.startsWith(\"HTTP/1.1 426\"));\n \n-        List<String> headerlines = new ArrayList<String>();\n+        List<String> headerlines = new ArrayList<>();\n \n         String responseHeaderLine = client.reader.readLine();\n-        while (!responseHeaderLine.equals(\"\")) {\n+        while (!\"\".equals(responseHeaderLine)) {\n             headerlines.add(responseHeaderLine);\n             responseHeaderLine = client.reader.readLine();\n         }\n \n-        assertTrue(headerlines.contains(\"Sec-WebSocket-Version: 13\"));\n+        Assert.assertTrue(headerlines.contains(\"Sec-WebSocket-Version: 13\"));\n         // Finished with the socket\n         client.close();\n     }\n@@ -159,7 +158,8 @@ public void testNoConnection() throws Exception {\n \n         // Make sure we got an upgrade response\n         String responseLine = client.reader.readLine();\n-        assertTrue(responseLine.startsWith(\"HTTP/1.1 400\"));\n+        Assert.assertNotNull(responseLine);\n+        Assert.assertTrue(responseLine.startsWith(\"HTTP/1.1 400\"));\n \n         // Finished with the socket\n         client.close();\n@@ -186,7 +186,8 @@ public void testNoUpgrade() throws Exception {\n \n         // Make sure we got an upgrade response\n         String responseLine = client.reader.readLine();\n-        assertTrue(responseLine.startsWith(\"HTTP/1.1 400\"));\n+        Assert.assertNotNull(responseLine);\n+        Assert.assertTrue(responseLine.startsWith(\"HTTP/1.1 400\"));\n \n         // Finished with the socket\n         client.close();\n@@ -213,28 +214,29 @@ public void testKey() throws Exception {\n \n         // Make sure we got an upgrade response\n         String responseLine = client.reader.readLine();\n-        assertTrue(responseLine.startsWith(\"HTTP/1.1 101\"));\n+        Assert.assertNotNull(responseLine);\n+        Assert.assertTrue(responseLine.startsWith(\"HTTP/1.1 101\"));\n \n         String accept = null;\n         String responseHeaderLine = client.reader.readLine();\n-        while (!responseHeaderLine.equals(\"\")) {\n+        while (!\"\".equals(responseHeaderLine)) {\n             if(responseHeaderLine.startsWith(\"Sec-WebSocket-Accept: \")) {\n                 accept = responseHeaderLine.substring(responseHeaderLine.indexOf(\":\")+2);\n                 break;\n             }\n             responseHeaderLine = client.reader.readLine();\n         }\n-        assertTrue(accept != null);\n+        Assert.assertTrue(accept != null);\n         MessageDigest sha1Helper = MessageDigest.getInstance(\"SHA1\");\n         sha1Helper.reset();\n         sha1Helper.update(\"TODO\".getBytes(B2CConverter.ISO_8859_1));\n         String source = Base64.encode(sha1Helper.digest(WS_ACCEPT));\n-        assertEquals(source,accept);\n+        Assert.assertEquals(source,accept);\n \n         sha1Helper.reset();\n         sha1Helper.update(\"TOD\".getBytes(B2CConverter.ISO_8859_1));\n         source = Base64.encode(sha1Helper.digest(WS_ACCEPT));\n-        assertFalse(source.equals(accept));\n+        Assert.assertFalse(source.equals(accept));\n         // Finished with the socket\n         client.close();\n     }\n@@ -275,17 +277,18 @@ public void testBug53339() throws Exception {\n \n         // Make sure we got an upgrade response\n         String responseLine = client.reader.readLine();\n-        assertTrue(responseLine.startsWith(\"HTTP/1.1 101\"));\n+        Assert.assertNotNull(responseLine);\n+        Assert.assertTrue(responseLine.startsWith(\"HTTP/1.1 101\"));\n \n         // Swallow the headers\n         String responseHeaderLine = client.reader.readLine();\n-        while (!responseHeaderLine.equals(\"\")) {\n+        while (!\"\".equals(responseHeaderLine)) {\n             responseHeaderLine = client.reader.readLine();\n         }\n \n         // Now we can do WebSocket\n         String msg = client.readMessage();\n-        assertEquals(Bug53339WsInbound.TEST_MESSAGE, msg);\n+        Assert.assertEquals(Bug53339WsInbound.TEST_MESSAGE, msg);\n \n         // Finished with the socket\n         client.close();\n@@ -377,7 +380,7 @@ private void sendMessage(String message, boolean finalFragment)\n             c2b.flushBuffer();\n \n             int len = bc.getLength();\n-            assertTrue(len < 126);\n+            Assert.assertTrue(len < 126);\n \n             byte first;\n             if (isContinuation) {\n@@ -416,7 +419,7 @@ private String readMessage() throws IOException {\n \n             // Get payload length\n             int len = is.read() & 0x7F;\n-            assertTrue(len < 126);\n+            Assert.assertTrue(len < 126);\n \n             // Read payload\n             int read = 0;",
                "deletions": 23
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=53607.\nTo avoid NPE, set TCP PING data to ChannelMessage.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1367454 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/57b56f21fdd8016a7c42aa363980dc68d8a6f89a",
        "parent": "https://github.com/apache/tomcat/commit/1742b481bfca7ff17f043100beb44d77bc05eb01",
        "bug_id": "tomcat_260",
        "file": [
            {
                "sha": "211c3308f2fd229e0a4bcfdb90e9dd029ac4a20b",
                "filename": "java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java",
                "blob_url": "https://github.com/apache/tomcat/blob/57b56f21fdd8016a7c42aa363980dc68d8a6f89a/java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java",
                "raw_url": "https://github.com/apache/tomcat/raw/57b56f21fdd8016a7c42aa363980dc68d8a6f89a/java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java?ref=57b56f21fdd8016a7c42aa363980dc68d8a6f89a",
                "patch": "@@ -27,6 +27,7 @@\n import org.apache.catalina.tribes.Member;\n import org.apache.catalina.tribes.group.ChannelInterceptorBase;\n import org.apache.catalina.tribes.io.ChannelData;\n+import org.apache.catalina.tribes.io.XByteBuffer;\n import org.apache.juli.logging.Log;\n import org.apache.juli.logging.LogFactory;\n \n@@ -145,6 +146,7 @@ protected void sendPingMessage(Member[] members) {\n         data.setAddress(getLocalMember(false));\n         data.setTimestamp(System.currentTimeMillis());\n         data.setOptions(getOptionFlag());\n+        data.setMessage(new XByteBuffer(TCP_PING_DATA, false));\n         try {\n             super.sendMessage(members, data, null);\n         }catch (ChannelException x) {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "FindBugs - Possible NPE\nUse consistent approach to exception handling and the creation of the FailedContext instance\ncontext cannot be null\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1364154 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/3f84e8d907b015fa96b0cc1f60e63c923c6bae93",
        "parent": "https://github.com/apache/tomcat/commit/ac754354006f07dff4bfb26638c67afc5b49528a",
        "bug_id": "tomcat_261",
        "file": [
            {
                "sha": "6ef867d7855004ba5fe9a4a38bac4dbf03e30726",
                "filename": "java/org/apache/catalina/startup/HostConfig.java",
                "blob_url": "https://github.com/apache/tomcat/blob/3f84e8d907b015fa96b0cc1f60e63c923c6bae93/java/org/apache/catalina/startup/HostConfig.java",
                "raw_url": "https://github.com/apache/tomcat/raw/3f84e8d907b015fa96b0cc1f60e63c923c6bae93/java/org/apache/catalina/startup/HostConfig.java",
                "status": "modified",
                "changes": 16,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/startup/HostConfig.java?ref=3f84e8d907b015fa96b0cc1f60e63c923c6bae93",
                "patch": "@@ -547,8 +547,10 @@ protected void deployDescriptor(ContextName cn, File contextXml) {\n                     log.error(sm.getString(\n                             \"hostConfig.deployDescriptor.error\",\n                             contextXml.getAbsolutePath()));\n-                    context = new FailedContext();\n                 } finally {\n+                    if (context == null) {\n+                        context = new FailedContext();\n+                    }\n                     digester.reset();\n                 }\n             }\n@@ -598,7 +600,7 @@ protected void deployDescriptor(ContextName cn, File contextXml) {\n \n             // default to appBase dir + name\n             expandedDocBase = new File(host.getAppBaseFile(), cn.getBaseName());\n-            if (context != null && context.getDocBase() != null) {\n+            if (context.getDocBase() != null) {\n                 // first assume docBase is absolute\n                 expandedDocBase = new File(context.getDocBase());\n                 if (!expandedDocBase.isAbsolute()) {\n@@ -644,7 +646,7 @@ protected void deployDescriptor(ContextName cn, File contextXml) {\n             addGlobalRedeployResources(deployedApp);\n         }\n \n-        if (context != null && host.findChild(context.getName()) != null) {\n+        if (host.findChild(context.getName()) != null) {\n             deployed.put(context.getName(), deployedApp);\n         }\n     }\n@@ -834,8 +836,10 @@ protected void deployWAR(ContextName cn, File war) {\n                         log.error(sm.getString(\n                                 \"hostConfig.deployDescriptor.error\",\n                                 war.getAbsolutePath()));\n-                        context = new FailedContext();\n                     } finally {\n+                        if (context == null) {\n+                            context = new FailedContext();\n+                        }\n                         digester.reset();\n                     }\n                 }\n@@ -995,8 +999,10 @@ protected void deployDirectory(ContextName cn, File dir) {\n                         log.error(sm.getString(\n                                 \"hostConfig.deployDescriptor.error\",\n                                 xml));\n-                        context = new FailedContext();\n                     } finally {\n+                        if (context == null) {\n+                            context = new FailedContext();\n+                        }\n                         digester.reset();\n                     }\n                 }",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Clean-up: avoid NPE and immediate catch when init parameter does not exist. Also do not assign default value unless necessary.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1346683 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/768a4126c36fc2d3b7f045753b2b696c2882579d",
        "parent": "https://github.com/apache/tomcat/commit/957d33b998312ced87a3698cd9d861c2999e7485",
        "bug_id": "tomcat_262",
        "file": [
            {
                "sha": "1806dd5e2458641a3a1fb763a0ebd4107ae76838",
                "filename": "webapps/examples/WEB-INF/classes/websocket/echo/EchoMessage.java",
                "blob_url": "https://github.com/apache/tomcat/blob/768a4126c36fc2d3b7f045753b2b696c2882579d/webapps/examples/WEB-INF/classes/websocket/echo/EchoMessage.java",
                "raw_url": "https://github.com/apache/tomcat/raw/768a4126c36fc2d3b7f045753b2b696c2882579d/webapps/examples/WEB-INF/classes/websocket/echo/EchoMessage.java",
                "status": "modified",
                "changes": 14,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/examples/WEB-INF/classes/websocket/echo/EchoMessage.java?ref=768a4126c36fc2d3b7f045753b2b696c2882579d",
                "patch": "@@ -42,11 +42,17 @@ public void init() throws ServletException {\n \n     public int getInitParameterIntValue(String name, int defaultValue) {\n         String val = this.getInitParameter(name);\n-        int result = defaultValue;\n-        try {\n-            result = Integer.parseInt(val);\n-        }catch (Exception x) {\n+        int result;\n+        if(null != val) {\n+            try {\n+                result = Integer.parseInt(val);\n+            }catch (Exception x) {\n+                result = defaultValue;\n+            }\n+        } else {\n+            result = defaultValue;\n         }\n+\n         return result;\n     }\n ",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE when reload if a state of a BackupManager is FAILED.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1324575 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/19e0437188af8a8e2eed13f1d87525246457d1ab",
        "parent": "https://github.com/apache/tomcat/commit/98016411ad2d6e66b531a7f4d67c91bc5ae8009e",
        "bug_id": "tomcat_263",
        "file": [
            {
                "sha": "174792119a323c27def5d29069c75cef4262c820",
                "filename": "java/org/apache/catalina/ha/session/BackupManager.java",
                "blob_url": "https://github.com/apache/tomcat/blob/19e0437188af8a8e2eed13f1d87525246457d1ab/java/org/apache/catalina/ha/session/BackupManager.java",
                "raw_url": "https://github.com/apache/tomcat/raw/19e0437188af8a8e2eed13f1d87525246457d1ab/java/org/apache/catalina/ha/session/BackupManager.java",
                "status": "modified",
                "changes": 11,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/ha/session/BackupManager.java?ref=19e0437188af8a8e2eed13f1d87525246457d1ab",
                "patch": "@@ -20,10 +20,12 @@\n import java.util.Iterator;\n import java.util.Set;\n \n+import org.apache.catalina.Cluster;\n import org.apache.catalina.DistributedManager;\n import org.apache.catalina.LifecycleException;\n import org.apache.catalina.LifecycleState;\n import org.apache.catalina.Session;\n+import org.apache.catalina.ha.CatalinaCluster;\n import org.apache.catalina.ha.ClusterManager;\n import org.apache.catalina.ha.ClusterMessage;\n import org.apache.catalina.tribes.Channel;\n@@ -143,6 +145,15 @@ protected synchronized void startInternal() throws LifecycleException {\n         super.startInternal();\n \n         try {\n+            if (getCluster() == null) {\n+                Cluster cluster = getContainer().getCluster();\n+                if (cluster instanceof CatalinaCluster) {\n+                    setCluster((CatalinaCluster)cluster);\n+                } else {\n+                    throw new LifecycleException(\n+                            \"no cluster associated with this context: \" + getName());\n+                }\n+            }\n             cluster.registerManager(this);\n             LazyReplicatedMap<String,Session> map =\n                     new LazyReplicatedMap<String,Session>(this,",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Observed strange NPE while running tests. This isn't much more than a guess at what might have caused it.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1304037 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/dc4e03968ba3756919f19cbb0952adacec9f23d1",
        "parent": "https://github.com/apache/tomcat/commit/be5748a42d800312aba270320ff3c0fdb8fd87c5",
        "bug_id": "tomcat_264",
        "file": [
            {
                "sha": "641066980b548bd7f4d25c01b88c7f2b664d3366",
                "filename": "test/org/apache/catalina/loader/TestWebappClassLoaderExecutorMemoryLeak.java",
                "blob_url": "https://github.com/apache/tomcat/blob/dc4e03968ba3756919f19cbb0952adacec9f23d1/test/org/apache/catalina/loader/TestWebappClassLoaderExecutorMemoryLeak.java",
                "raw_url": "https://github.com/apache/tomcat/raw/dc4e03968ba3756919f19cbb0952adacec9f23d1/test/org/apache/catalina/loader/TestWebappClassLoaderExecutorMemoryLeak.java",
                "status": "modified",
                "changes": 9,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/loader/TestWebappClassLoaderExecutorMemoryLeak.java?ref=dc4e03968ba3756919f19cbb0952adacec9f23d1",
                "patch": "@@ -49,7 +49,8 @@ public void testTimerThreadLeak() throws Exception {\n             ((StandardContext) ctx).setClearReferencesStopThreads(true);\n         }\n \n-        Tomcat.addServlet(ctx, \"taskServlet\", new ExecutorServlet());\n+        ExecutorServlet executorServlet = new ExecutorServlet();\n+        Tomcat.addServlet(ctx, \"taskServlet\", executorServlet);\n         ctx.addServletMapping(\"/\", \"taskServlet\");\n \n         tomcat.start();\n@@ -67,8 +68,8 @@ public void testTimerThreadLeak() throws Exception {\n             // ignore\n         }\n \n-        Assert.assertTrue(ExecutorServlet.tpe.isShutdown());\n-        Assert.assertTrue(ExecutorServlet.tpe.isTerminated());\n+        Assert.assertTrue(executorServlet.tpe.isShutdown());\n+        Assert.assertTrue(executorServlet.tpe.isTerminated());\n     }\n \n     static class ExecutorServlet extends HttpServlet {\n@@ -79,7 +80,7 @@ public void testTimerThreadLeak() throws Exception {\n         long n = 1000L;\n         int tpSize = 10;\n \n-        public static ThreadPoolExecutor tpe;\n+        public volatile ThreadPoolExecutor tpe;\n \n         @Override\n         protected void doGet(HttpServletRequest req, HttpServletResponse resp)",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=52671\nLog NPEs for attributes that are not set at debug.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1244719 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/3fe64a54bd3cfd4a233335875b278fa5cf091ce2",
        "parent": "https://github.com/apache/tomcat/commit/34b1a7e0e8d985dab7d3b7eef3c3be8dfdf30a33",
        "bug_id": "tomcat_265",
        "file": [
            {
                "sha": "9f94eea1040f3173d320bfb3cfb28e3e0cbd4899",
                "filename": "java/org/apache/catalina/mbeans/MBeanDumper.java",
                "blob_url": "https://github.com/apache/tomcat/blob/3fe64a54bd3cfd4a233335875b278fa5cf091ce2/java/org/apache/catalina/mbeans/MBeanDumper.java",
                "raw_url": "https://github.com/apache/tomcat/raw/3fe64a54bd3cfd4a233335875b278fa5cf091ce2/java/org/apache/catalina/mbeans/MBeanDumper.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/mbeans/MBeanDumper.java?ref=3fe64a54bd3cfd4a233335875b278fa5cf091ce2",
                "patch": "@@ -85,6 +85,9 @@ public static String dumpBeans(MBeanServer mbeanServer, Set<ObjectName> names)\n                         if (cause instanceof UnsupportedOperationException) {\n                             log.debug(\"Error getting attribute \" + oname +\n                                     \" \" + attName, rme);\n+                        } else if (cause instanceof NullPointerException) {\n+                            log.debug(\"Error getting attribute \" + oname +\n+                                    \" \" + attName, rme);\n                         } else {\n                             log.error(\"Error getting attribute \" + oname +\n                                     \" \" + attName, rme);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=52208\nAvoid possible NPEs if stopListening is called in a different thread\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1212118 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/9403e4f9ec10757a9194a434215ddb178125c52e",
        "parent": "https://github.com/apache/tomcat/commit/98cbe045efe4037ea8e90d86d083a9feb1385821",
        "bug_id": "tomcat_266",
        "file": [
            {
                "sha": "6ff701130240776089552f63bdc3d436f0468e20",
                "filename": "java/org/apache/catalina/tribes/transport/nio/NioReceiver.java",
                "blob_url": "https://github.com/apache/tomcat/blob/9403e4f9ec10757a9194a434215ddb178125c52e/java/org/apache/catalina/tribes/transport/nio/NioReceiver.java",
                "raw_url": "https://github.com/apache/tomcat/raw/9403e4f9ec10757a9194a434215ddb178125c52e/java/org/apache/catalina/tribes/transport/nio/NioReceiver.java",
                "status": "modified",
                "changes": 8,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/tribes/transport/nio/NioReceiver.java?ref=9403e4f9ec10757a9194a434215ddb178125c52e",
                "patch": "@@ -236,6 +236,10 @@ protected void listen() throws Exception {\n         }\n \n         setListen(true);\n+\n+        // Avoid NPEs if selector is set to null on stop.\n+        Selector selector = this.selector;\n+\n         if (selector!=null && datagramChannel!=null) {\n             ObjectReader oreader = new ObjectReader(MAX_UDP_SIZE); //max size for a datagram packet\n             datagramChannel.socket().setSendBufferSize(getUdpTxBufSize());\n@@ -267,7 +271,7 @@ protected void listen() throws Exception {\n                     continue; // nothing to do\n                 }\n                 // get an iterator over the set of selected keys\n-                Iterator<SelectionKey> it = (selector!=null)?selector.selectedKeys().iterator():null;\n+                Iterator<SelectionKey> it = selector.selectedKeys().iterator();\n                 // look at each key in the selected set\n                 while (it!=null && it.hasNext()) {\n                     SelectionKey key = it.next();\n@@ -298,7 +302,7 @@ protected void listen() throws Exception {\n                     }\n \n                     // remove key from selected set, it's been handled\n-                    if (selector!=null) it.remove();\n+                    it.remove();\n                 }\n             } catch (java.nio.channels.ClosedSelectorException cse) {\n                 // ignore is normal at shutdown or stop listen socket",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Check state and throw ISE only if the new value differs from the old one.\nThrows NPE for invalid null values.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1201180 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/b41f755ae9daa0efdfbdb882f80455f46b62dbf3",
        "parent": "https://github.com/apache/tomcat/commit/61a4ed519072b614b6bda74a944b15179257872f",
        "bug_id": "tomcat_267",
        "file": [
            {
                "sha": "ac5bc0f839d3ce10721588cd198c76118bd15c1b",
                "filename": "java/org/apache/catalina/core/AprLifecycleListener.java",
                "blob_url": "https://github.com/apache/tomcat/blob/b41f755ae9daa0efdfbdb882f80455f46b62dbf3/java/org/apache/catalina/core/AprLifecycleListener.java",
                "raw_url": "https://github.com/apache/tomcat/raw/b41f755ae9daa0efdfbdb882f80455f46b62dbf3/java/org/apache/catalina/core/AprLifecycleListener.java",
                "status": "modified",
                "changes": 42,
                "additions": 24,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/AprLifecycleListener.java?ref=b41f755ae9daa0efdfbdb882f80455f46b62dbf3",
                "patch": "@@ -277,41 +277,47 @@ public String getSSLEngine() {\n     }\n \n     public void setSSLEngine(String SSLEngine) {\n-        // Ensure that the SSLEngine is consistent with that used for SSL init\n-        if (sslInitialized) {\n-            throw new IllegalStateException(\n-                    sm.getString(\"aprListener.tooLateForSSLEngine\"));\n-        }\n+        if (!SSLEngine.equals(AprLifecycleListener.SSLEngine)) {\n+            // Ensure that the SSLEngine is consistent with that used for SSL init\n+            if (sslInitialized) {\n+                throw new IllegalStateException(\n+                        sm.getString(\"aprListener.tooLateForSSLEngine\"));\n+            }\n \n-        AprLifecycleListener.SSLEngine = SSLEngine;\n+            AprLifecycleListener.SSLEngine = SSLEngine;\n+        }\n     }\n \n     public String getSSLRandomSeed() {\n         return SSLRandomSeed;\n     }\n \n     public void setSSLRandomSeed(String SSLRandomSeed) {\n-        // Ensure that the random seed is consistent with that used for SSL init\n-        if (sslInitialized) {\n-            throw new IllegalStateException(\n-                    sm.getString(\"aprListener.tooLateForSSLRandomSeed\"));\n-        }\n+        if (!SSLRandomSeed.equals(AprLifecycleListener.SSLRandomSeed)) {\n+            // Ensure that the random seed is consistent with that used for SSL init\n+            if (sslInitialized) {\n+                throw new IllegalStateException(\n+                        sm.getString(\"aprListener.tooLateForSSLRandomSeed\"));\n+            }\n \n-        AprLifecycleListener.SSLRandomSeed = SSLRandomSeed;\n+            AprLifecycleListener.SSLRandomSeed = SSLRandomSeed;\n+        }\n     }\n \n     public String getFIPSMode() {\n         return FIPSMode;\n     }\n \n     public void setFIPSMode(String FIPSMode) {\n-        // Ensure that the FIPS mode is consistent with that used for SSL init\n-        if (sslInitialized) {\n-            throw new IllegalStateException(\n-                    sm.getString(\"aprListener.tooLateForFIPSMode\"));\n-        }\n+        if (!FIPSMode.equals(AprLifecycleListener.FIPSMode)) {\n+            // Ensure that the FIPS mode is consistent with that used for SSL init\n+            if (sslInitialized) {\n+                throw new IllegalStateException(\n+                        sm.getString(\"aprListener.tooLateForFIPSMode\"));\n+            }\n \n-        AprLifecycleListener.FIPSMode = FIPSMode;\n+            AprLifecycleListener.FIPSMode = FIPSMode;\n+        }\n     }\n \n     public boolean isFIPSModeActive() {",
                "deletions": 18
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Don't add to Poller when socket is closing to prevent NPEs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1172711 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/8853ee4c182c69a87bf72b116f3016cd06ce1a39",
        "parent": "https://github.com/apache/tomcat/commit/aaab10b35d818bdfeadddce2c2e73493411a3bb4",
        "bug_id": "tomcat_268",
        "file": [
            {
                "sha": "163c4a489b0fa752a80494a48e8154964b93cf51",
                "filename": "java/org/apache/coyote/http11/Http11AprProtocol.java",
                "blob_url": "https://github.com/apache/tomcat/blob/8853ee4c182c69a87bf72b116f3016cd06ce1a39/java/org/apache/coyote/http11/Http11AprProtocol.java",
                "raw_url": "https://github.com/apache/tomcat/raw/8853ee4c182c69a87bf72b116f3016cd06ce1a39/java/org/apache/coyote/http11/Http11AprProtocol.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/Http11AprProtocol.java?ref=8853ee4c182c69a87bf72b116f3016cd06ce1a39",
                "patch": "@@ -215,7 +215,7 @@ public void release(SocketWrapper<Long> socket,\n                 boolean addToPoller) {\n             processor.recycle();\n             recycledProcessors.offer(processor);\n-            if (addToPoller) {\n+            if (addToPoller && proto.endpoint.isRunning()) {\n                 ((AprEndpoint)proto.endpoint).getPoller().add(\n                         socket.getSocket().longValue(), true);\n             }\n@@ -234,7 +234,7 @@ protected void longPoll(SocketWrapper<Long> socket,\n \n             if (processor.isAsync()) {\n                 socket.setAsync(true);\n-            } else if (processor.comet) {\n+            } else if (processor.comet && proto.endpoint.isRunning()) {\n                 ((AprEndpoint) proto.endpoint).getCometPoller().add(\n                         socket.getSocket().longValue(), false);\n             }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix possible NPE if instances aren't created through the DefaultInstanceManager but are destroyed through it.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1166752 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/02995d20ef4db02eb1b79b5458047cd6f719bb83",
        "parent": "https://github.com/apache/tomcat/commit/9b93c31f38fc89bc455738b8bb20e7f69eb09f6b",
        "bug_id": "tomcat_269",
        "file": [
            {
                "sha": "b354fc26b1a981db821f3b2093c9d68f0f29bc78",
                "filename": "java/org/apache/catalina/core/DefaultInstanceManager.java",
                "blob_url": "https://github.com/apache/tomcat/blob/02995d20ef4db02eb1b79b5458047cd6f719bb83/java/org/apache/catalina/core/DefaultInstanceManager.java",
                "raw_url": "https://github.com/apache/tomcat/raw/02995d20ef4db02eb1b79b5458047cd6f719bb83/java/org/apache/catalina/core/DefaultInstanceManager.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/DefaultInstanceManager.java?ref=02995d20ef4db02eb1b79b5458047cd6f719bb83",
                "patch": "@@ -205,6 +205,10 @@ protected void preDestroy(Object instance, final Class<?> clazz)\n         // At the end the postconstruct annotated\n         // method is invoked\n         List<AnnotationCacheEntry> annotations = annotationCache.get(clazz);\n+        if (annotations == null) {\n+            // instance not created through the instance manager\n+            return;\n+        }\n         for (AnnotationCacheEntry entry : annotations) {\n             if (entry.getType() == AnnotationCacheEntryType.PRE_DESTROY) {\n                 Method preDestroy = (Method) entry.getAccessibleObject();",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=59206\nEnsure NPE will not be thrown by when catalina.base is not specified.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1736209 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/0ff4217e05fef6cb3de0f2857fc378471386cc71",
        "parent": "https://github.com/apache/tomcat/commit/f0687f6f8068a6487d968b0212ebb8eeac66c129",
        "bug_id": "tomcat_270",
        "file": [
            {
                "sha": "12cc533276d87c05e47a32b2ea7b74afd4f239c4",
                "filename": "java/org/apache/tomcat/util/file/ConfigFileLoader.java",
                "blob_url": "https://github.com/apache/tomcat/blob/0ff4217e05fef6cb3de0f2857fc378471386cc71/java/org/apache/tomcat/util/file/ConfigFileLoader.java",
                "raw_url": "https://github.com/apache/tomcat/raw/0ff4217e05fef6cb3de0f2857fc378471386cc71/java/org/apache/tomcat/util/file/ConfigFileLoader.java",
                "status": "modified",
                "changes": 30,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/file/ConfigFileLoader.java?ref=0ff4217e05fef6cb3de0f2857fc378471386cc71",
                "patch": "@@ -24,19 +24,30 @@\n import java.net.URI;\n import java.net.URL;\n \n+import org.apache.tomcat.util.res.StringManager;\n+\n /**\n  * This class is used to obtain {@link InputStream}s for configuration files\n  * from a given location String. This allows greater flexibility than these\n  * files having to be loaded directly from a file system.\n  */\n public class ConfigFileLoader {\n \n+    private static final StringManager sm = StringManager.getManager(ConfigFileLoader.class\n+            .getPackage().getName());\n+\n     private static final File CATALINA_BASE_FILE;\n     private static final URI CATALINA_BASE_URI;\n \n     static {\n-        CATALINA_BASE_FILE = new File(System.getProperty(\"catalina.base\"));\n-        CATALINA_BASE_URI = CATALINA_BASE_FILE.toURI();\n+        String catalinaBase = System.getProperty(\"catalina.base\");\n+        if (catalinaBase != null) {\n+            CATALINA_BASE_FILE = new File(catalinaBase);\n+            CATALINA_BASE_URI = CATALINA_BASE_FILE.toURI();\n+        } else {\n+            CATALINA_BASE_FILE = null;\n+            CATALINA_BASE_URI = null;\n+        }\n     }\n \n     private ConfigFileLoader() {\n@@ -72,10 +83,19 @@ public static InputStream getInputStream(String location) throws IOException {\n         // File didn't work so try URI.\n         // Using resolve() enables the code to handle relative paths that did\n         // not point to a file\n-        URI uri = CATALINA_BASE_URI.resolve(location);\n+        URI uri;\n+        if (CATALINA_BASE_URI != null) {\n+            uri = CATALINA_BASE_URI.resolve(location);\n+        } else {\n+            uri = URI.create(location);\n+        }\n \n         // Obtain the input stream we need\n-        URL url = uri.toURL();\n-        return url.openConnection().getInputStream();\n+        try {\n+            URL url = uri.toURL();\n+            return url.openConnection().getInputStream();\n+        } catch (IllegalArgumentException e) {\n+            throw new IOException(sm.getString(\"configFileLoader.cannotObtainURL\", location), e);\n+        }\n     }\n }",
                "deletions": 5
            },
            {
                "sha": "5bbf626ba2a62320493984e1086fb0ba9da612e1",
                "filename": "java/org/apache/tomcat/util/file/LocalStrings.properties",
                "blob_url": "https://github.com/apache/tomcat/blob/0ff4217e05fef6cb3de0f2857fc378471386cc71/java/org/apache/tomcat/util/file/LocalStrings.properties",
                "raw_url": "https://github.com/apache/tomcat/raw/0ff4217e05fef6cb3de0f2857fc378471386cc71/java/org/apache/tomcat/util/file/LocalStrings.properties",
                "status": "added",
                "changes": 16,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/file/LocalStrings.properties?ref=0ff4217e05fef6cb3de0f2857fc378471386cc71",
                "patch": "@@ -0,0 +1,16 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+configFileLoader.cannotObtainURL=Cannot obtain URL for the relative path [{0}]. Check that catalina.base is set.\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "c25c408e9e5fc09d13299ab8cf0381cc0e4fb30f",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/0ff4217e05fef6cb3de0f2857fc378471386cc71/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/0ff4217e05fef6cb3de0f2857fc378471386cc71/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=0ff4217e05fef6cb3de0f2857fc378471386cc71",
                "patch": "@@ -52,6 +52,11 @@\n         date formatting in Tomcat's internal request object. Based on a patch\n         provided by Ondrej Medek. (markt)\n       </fix>\n+      <fix>\n+        <bug>59206</bug>: Ensure NPE will not be thrown by\n+        <code>o.a.tomcat.util.file.ConfigFileLoader</code> when\n+        <code>catalina.base</code> is not specified. (violetagg)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=51348\nPrevent possible NPE when processing WebDAV locks.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1134048 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/71b18c88ad15a1754de63ce05a41371e587fd627",
        "parent": "https://github.com/apache/tomcat/commit/4892b57de2aa75872c2f1203680e4da30468c8cb",
        "bug_id": "tomcat_271",
        "file": [
            {
                "sha": "d08dbd0207b2d76f9ef28e2dec898005cf6d3fbb",
                "filename": "java/org/apache/catalina/servlets/WebdavServlet.java",
                "blob_url": "https://github.com/apache/tomcat/blob/71b18c88ad15a1754de63ce05a41371e587fd627/java/org/apache/catalina/servlets/WebdavServlet.java",
                "raw_url": "https://github.com/apache/tomcat/raw/71b18c88ad15a1754de63ce05a41371e587fd627/java/org/apache/catalina/servlets/WebdavServlet.java",
                "status": "modified",
                "changes": 16,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/servlets/WebdavServlet.java?ref=71b18c88ad15a1754de63ce05a41371e587fd627",
                "patch": "@@ -1337,13 +1337,15 @@ protected void doLock(HttpServletRequest req, HttpServletResponse resp)\n             LockInfo toRenew = resourceLocks.get(path);\n             Enumeration<String> tokenList = null;\n \n-            // At least one of the tokens of the locks must have been given\n-            tokenList = toRenew.tokens.elements();\n-            while (tokenList.hasMoreElements()) {\n-                String token = tokenList.nextElement();\n-                if (ifHeader.indexOf(token) != -1) {\n-                    toRenew.expiresAt = lock.expiresAt;\n-                    lock = toRenew;\n+            if (toRenew != null) {\n+                // At least one of the tokens of the locks must have been given\n+                tokenList = toRenew.tokens.elements();\n+                while (tokenList.hasMoreElements()) {\n+                    String token = tokenList.nextElement();\n+                    if (ifHeader.indexOf(token) != -1) {\n+                        toRenew.expiresAt = lock.expiresAt;\n+                        lock = toRenew;\n+                    }\n                 }\n             }\n ",
                "deletions": 7
            },
            {
                "sha": "9545dcecf1d6c72dcce4376492ae69b7d70d4da4",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/71b18c88ad15a1754de63ce05a41371e587fd627/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/71b18c88ad15a1754de63ce05a41371e587fd627/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=71b18c88ad15a1754de63ce05a41371e587fd627",
                "patch": "@@ -85,6 +85,9 @@\n         <bug>51344</bug>: Fix problem with Lifecycle re-factoring for deprecated\n         embedded class that prevented events being triggered. (markt) \n       </fix>\n+      <fix>\n+        Prevent possible NPE when processing WebDAV locks. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50855\nFix NPE on HttpServletRequest.logout() when debug logging is enabled.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1078412 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/b24b0c09cd50a4d6f559a8ece2216f7c405b7490",
        "parent": "https://github.com/apache/tomcat/commit/22c9c9b6113ab614cc23766e98b82281798f5623",
        "bug_id": "tomcat_272",
        "file": [
            {
                "sha": "e40587f5ddc6aa62911a1599c14ab3bfcd92436e",
                "filename": "java/org/apache/catalina/authenticator/AuthenticatorBase.java",
                "blob_url": "https://github.com/apache/tomcat/blob/b24b0c09cd50a4d6f559a8ece2216f7c405b7490/java/org/apache/catalina/authenticator/AuthenticatorBase.java",
                "raw_url": "https://github.com/apache/tomcat/raw/b24b0c09cd50a4d6f559a8ece2216f7c405b7490/java/org/apache/catalina/authenticator/AuthenticatorBase.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/authenticator/AuthenticatorBase.java?ref=b24b0c09cd50a4d6f559a8ece2216f7c405b7490",
                "patch": "@@ -686,9 +686,11 @@ public void register(Request request, HttpServletResponse response,\n                             Principal principal, String authType,\n                             String username, String password) {\n \n-        if (log.isDebugEnabled())\n-            log.debug(\"Authenticated '\" + principal.getName() + \"' with type '\"\n-                + authType + \"'\");\n+        if (log.isDebugEnabled()) {\n+            String name = (principal == null) ? \"none\" : principal.getName(); \n+            log.debug(\"Authenticated '\" + name + \"' with type '\" + authType +\n+                    \"'\");\n+        }\n \n         // Cache the authentication information in our request\n         request.setAuthType(authType);",
                "deletions": 3
            },
            {
                "sha": "c7e43d37cf4eac2fc7dc913517426451d5481761",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/b24b0c09cd50a4d6f559a8ece2216f7c405b7490/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/b24b0c09cd50a4d6f559a8ece2216f7c405b7490/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=b24b0c09cd50a4d6f559a8ece2216f7c405b7490",
                "patch": "@@ -43,6 +43,14 @@\n   Other\n -->\n <section name=\"Tomcat 7.0.11 (markt)\">\n+  <subsection name=\"Catalina\">\n+    <changelog>\n+      <fix>\n+        <bug>50855</bug>: Fix NPE on HttpServletRequest.logout() when debug\n+        logging is enabled. (markt)\n+      </fix>\n+    </changelog>\n+  </subsection>\n   <subsection name=\"Jasper\">\n     <changelog>\n       <fix>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPEs on shutdown. Loop is prevented above when the child is removed.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1071601 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/5e93b90c5d25f7fae0531d6537b2d4239a0803cd",
        "parent": "https://github.com/apache/tomcat/commit/3beb97324160094cab59f6c51d89816b6b433b7c",
        "bug_id": "tomcat_273",
        "file": [
            {
                "sha": "a2e6200fc8b37c315b4f631584695ca493364dbc",
                "filename": "java/org/apache/catalina/core/ContainerBase.java",
                "blob_url": "https://github.com/apache/tomcat/blob/5e93b90c5d25f7fae0531d6537b2d4239a0803cd/java/org/apache/catalina/core/ContainerBase.java",
                "raw_url": "https://github.com/apache/tomcat/raw/5e93b90c5d25f7fae0531d6537b2d4239a0803cd/java/org/apache/catalina/core/ContainerBase.java",
                "status": "modified",
                "changes": 2,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/ContainerBase.java?ref=5e93b90c5d25f7fae0531d6537b2d4239a0803cd",
                "patch": "@@ -959,8 +959,6 @@ public void removeChild(Container child) {\n         \n         fireContainerEvent(REMOVE_CHILD_EVENT, child);\n         \n-        // Set child's parent to null to prevent a loop\n-        child.setParent(null);\n         try {\n             // child.destroy() may have already been called which would have\n             // triggered this call. If that is the case, no need to destroy the",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50552\nAvoid NPE that hides error when using Ant tasks (schultz)\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1056264 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/a6b37af5c9b194045dd6f0d4f7fd2bdb71341ef7",
        "parent": "https://github.com/apache/tomcat/commit/a7e4b8b099e6642ff3e9707fae4a8a7839bda352",
        "bug_id": "tomcat_274",
        "file": [
            {
                "sha": "26685b317be7c75b7f83d8ba6f5b4f408b20e6e3",
                "filename": "java/org/apache/catalina/ant/BaseRedirectorHelperTask.java",
                "blob_url": "https://github.com/apache/tomcat/blob/a6b37af5c9b194045dd6f0d4f7fd2bdb71341ef7/java/org/apache/catalina/ant/BaseRedirectorHelperTask.java",
                "raw_url": "https://github.com/apache/tomcat/raw/a6b37af5c9b194045dd6f0d4f7fd2bdb71341ef7/java/org/apache/catalina/ant/BaseRedirectorHelperTask.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/ant/BaseRedirectorHelperTask.java?ref=a6b37af5c9b194045dd6f0d4f7fd2bdb71341ef7",
                "patch": "@@ -263,7 +263,7 @@ protected void openRedirector() {\n      */\n     protected void closeRedirector() {\n         try {\n-            if (redirectOutput) {\n+            if (redirectOutput && redirectOutPrintStream != null) {\n                 redirector.complete();\n             }\n         } catch (IOException ioe) {",
                "deletions": 1
            },
            {
                "sha": "2a89d92d65e4edcf7ca614c201547d1b0ca035d5",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/a6b37af5c9b194045dd6f0d4f7fd2bdb71341ef7/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/a6b37af5c9b194045dd6f0d4f7fd2bdb71341ef7/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=a6b37af5c9b194045dd6f0d4f7fd2bdb71341ef7",
                "patch": "@@ -305,6 +305,10 @@\n         <bug>14416</bug>: Make <code>TagLibraryInfo.getTag()</code> more robust\n         at handling <code>null</code>s. (markt)\n       </fix>\n+      <fix>\n+        <bug>50552</bug>: Avoid NPE that hides error message when using Ant\n+        tasks. (schultz)\n+      </fix>\n     </changelog>\n   </subsection>\n </section>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50467\nProtect against NPE that will cause Poller to fail\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1055458 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/688e61e86d1d55acaf24b260a481c05aad722bc1",
        "parent": "https://github.com/apache/tomcat/commit/160373e12a17cec7ffca1dbfaf8e6e10c9446c29",
        "bug_id": "tomcat_275",
        "file": [
            {
                "sha": "e37712164eee14a669b1543e58708db0a1464186",
                "filename": "java/org/apache/tomcat/util/net/NioEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/688e61e86d1d55acaf24b260a481c05aad722bc1/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/688e61e86d1d55acaf24b260a481c05aad722bc1/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "status": "modified",
                "changes": 12,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/NioEndpoint.java?ref=688e61e86d1d55acaf24b260a481c05aad722bc1",
                "patch": "@@ -1141,9 +1141,15 @@ public void run() {\n                     while (iterator != null && iterator.hasNext()) {\n                         SelectionKey sk = iterator.next();\n                         KeyAttachment attachment = (KeyAttachment)sk.attachment();\n-                        attachment.access();\n-                        iterator.remove();\n-                        processKey(sk, attachment);\n+                        // Attachment may be null if another thread has called\n+                        // cancelledKey()\n+                        if (attachment == null) {\n+                            iterator.remove();\n+                        } else {\n+                            attachment.access();\n+                            iterator.remove();\n+                            processKey(sk, attachment);\n+                        }\n                     }//while\n \n                     //process timeouts",
                "deletions": 3
            },
            {
                "sha": "f655372f3a1fcd27408520089a828e7162538541",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/688e61e86d1d55acaf24b260a481c05aad722bc1/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/688e61e86d1d55acaf24b260a481c05aad722bc1/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=688e61e86d1d55acaf24b260a481c05aad722bc1",
                "patch": "@@ -195,6 +195,11 @@\n         Remove a huge memory leak in the NIO connector introduced by the fix\n         for <bug>49884</bug>. (markt)\n       </fix>\n+      <fix>\n+        <bug>50467</bug>: Protected against NPE triggered by a race condition\n+        that causes the NIO poller to fail, preventing the processing of further\n+        requests. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Jasper\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid a possible NPE that in turn was masking the root cause from JspC\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1050384 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/0f2a110b6b0f3945fc8c93b8367495fe048401ad",
        "parent": "https://github.com/apache/tomcat/commit/a885504b7b41fbd5fe6588b5336686b341e5007f",
        "bug_id": "tomcat_276",
        "file": [
            {
                "sha": "ac9720d1d19f197dbfb896ae276ec1ab4d4b023d",
                "filename": "java/javax/servlet/jsp/tagext/TagLibraryInfo.java",
                "blob_url": "https://github.com/apache/tomcat/blob/0f2a110b6b0f3945fc8c93b8367495fe048401ad/java/javax/servlet/jsp/tagext/TagLibraryInfo.java",
                "raw_url": "https://github.com/apache/tomcat/raw/0f2a110b6b0f3945fc8c93b8367495fe048401ad/java/javax/servlet/jsp/tagext/TagLibraryInfo.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/javax/servlet/jsp/tagext/TagLibraryInfo.java?ref=0f2a110b6b0f3945fc8c93b8367495fe048401ad",
                "patch": "@@ -137,12 +137,12 @@ public String getRequiredVersion() {\n     public TagInfo getTag(String shortname) {\n         TagInfo tags[] = getTags();\n \n-        if (tags == null || tags.length == 0) {\n+        if (tags == null || tags.length == 0 || shortname == null) {\n             return null;\n         }\n \n         for (int i = 0; i < tags.length; i++) {\n-            if (tags[i].getTagName().equals(shortname)) {\n+            if (shortname.equals(tags[i].getTagName())) {\n                 return tags[i];\n             }\n         }",
                "deletions": 2
            },
            {
                "sha": "b19926acd80f24d23f73b37945963a452b54c73a",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/0f2a110b6b0f3945fc8c93b8367495fe048401ad/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/0f2a110b6b0f3945fc8c93b8367495fe048401ad/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=0f2a110b6b0f3945fc8c93b8367495fe048401ad",
                "patch": "@@ -230,6 +230,10 @@\n         removed when the service stops which prevents the service from starting.\n         (markt)\n       </fix>\n+      <fix>\n+        <bug>14416</bug>: Make <code>TagLibraryInfo.getTag()</code> more robust\n+        at handling <code>null</code>s. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n </section>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50318\nAvoid NPE when viewing session detail for expired sessions\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1038235 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/0770d057f5c0b502ac218463a290f1547339424a",
        "parent": "https://github.com/apache/tomcat/commit/46e7d1e58a034debcd23ba74db06719de6ce5efd",
        "bug_id": "tomcat_277",
        "file": [
            {
                "sha": "6d72bcb33e0bad7e86f40a1d0b68f689315caf62",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/0770d057f5c0b502ac218463a290f1547339424a/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/0770d057f5c0b502ac218463a290f1547339424a/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 26,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=0770d057f5c0b502ac218463a290f1547339424a",
                "patch": "@@ -290,31 +290,35 @@\n         Improve Tomcat Logging documentation. (kkolinko)\n       </update>\n       <fix>\n-        <bug>50303</bug>: Update JNDI how-to to reflect new JavaMail download\n-        location and that JAF is now included in Java SE 6. (markt) \n+        <bug>50303</bug>: Update JNDI how-to to reflect the new JavaMail\n+        download location and that JAF is now included in Java SE 6. (markt) \n       </fix>\n       <fix>\n-        Fix ordering functionality on sessions page for HTML Manager \n+        Fix ordering functionality on sessions page for the HTML Manager \n         application. (markt)\n       </fix>\n       <fix>\n-        Fix primary sessions not always being treated as such in HTML Manager \n-        application. (markt)\n+        Fix primary sessions not always being treated as such in the HTML\n+        Manager application. (markt)\n       </fix>\n       <fix>\n-        Fix message not being displayed after session attribute removal in HTML\n-        Manager application. (markt)\n+        Fix message not being displayed after session attribute removal in the\n+        HTML Manager application. (markt)\n       </fix>\n       <fix>\n-        <bug>50310</bug>: Fix display of Servlet information in Manager\n+        <bug>50310</bug>: Fix display of Servlet information in the Manager\n         application. (markt)\n       </fix>\n       <fix>\n-        CVE-2010-4172: Multiple XSS in Manager application. (markt/kkolinko)\n+        CVE-2010-4172: Multiple XSS in the Manager application. (markt/kkolinko)\n       </fix>\n       <fix>\n-        <bug>50316</bug>: Fix display of negative values in Manager application.\n-        (kkolinko)\n+        <bug>50316</bug>: Fix display of negative values in the Manager \n+        application. (kkolinko)\n+      </fix>\n+      <fix>\n+        <bug>50318</bug>: Avoid NPE when trying to view session detail for an\n+        expired session in the Manager application. (markt)\n       </fix>\n     </changelog>\n   </subsection>",
                "deletions": 11
            },
            {
                "sha": "d711f7f6c0ec33dc60dc3aff21af1730034181f9",
                "filename": "webapps/manager/WEB-INF/jsp/sessionDetail.jsp",
                "blob_url": "https://github.com/apache/tomcat/blob/0770d057f5c0b502ac218463a290f1547339424a/webapps/manager/WEB-INF/jsp/sessionDetail.jsp",
                "raw_url": "https://github.com/apache/tomcat/raw/0770d057f5c0b502ac218463a290f1547339424a/webapps/manager/WEB-INF/jsp/sessionDetail.jsp",
                "status": "modified",
                "changes": 236,
                "additions": 123,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/manager/WEB-INF/jsp/sessionDetail.jsp?ref=0770d057f5c0b502ac218463a290f1547339424a",
                "patch": "@@ -32,8 +32,14 @@\n    String version = (String) request.getAttribute(\"version\");\n    ContextName cn = new ContextName(path, version);\n    Session currentSession = (Session)request.getAttribute(\"currentSession\");\n-   HttpSession currentHttpSession = currentSession.getSession();\n-   String currentSessionId = JspHelper.escapeXml(currentSession.getId());\n+   String currentSessionId = null;\n+   HttpSession currentHttpSession = null;\n+   if (currentSession != null) {\n+       currentHttpSession = currentSession.getSession();\n+       currentSessionId = JspHelper.escapeXml(currentSession.getId());\n+   } else {\n+       currentSessionId = \"Session invalidated\";\n+   }\n    String submitUrl = JspHelper.escapeXml(response.encodeURL(\n            ((HttpServletRequest) pageContext.getRequest()).getRequestURI() +\n            \"?path=\" + path + \"&version=\" + version));\n@@ -50,118 +56,122 @@\n     <title>Sessions Administration: details for <%= currentSessionId %></title>\n </head>\n <body>\n-<h1>Details for Session <%= currentSessionId %></h1>\n-\n-<table style=\"text-align: left;\" border=\"0\">\n-  <tr>\n-    <th>Session Id</th>\n-    <td><%= currentSessionId %></td>\n-  </tr>\n-  <tr>\n-    <th>Guessed Locale</th>\n-    <td><%= JspHelper.guessDisplayLocaleFromSession(currentSession) %></td>\n-  </tr>\n-  <tr>\n-    <th>Guessed User</th>\n-    <td><%= JspHelper.guessDisplayUserFromSession(currentSession) %></td>\n-  </tr>\n-  <tr>\n-    <th>Creation Time</th>\n-    <td><%= JspHelper.getDisplayCreationTimeForSession(currentSession) %></td>\n-  </tr>\n-  <tr>\n-    <th>Last Accessed Time</th>\n-    <td><%= JspHelper.getDisplayLastAccessedTimeForSession(currentSession) %></td>\n-  </tr>\n-  <tr>\n-    <th>Session Max Inactive Interval</th>\n-    <td><%= JspHelper.secondsToTimeString(currentSession.getMaxInactiveInterval()) %></td>\n-  </tr>\n-  <tr>\n-    <th>Used Time</th>\n-    <td><%= JspHelper.getDisplayUsedTimeForSession(currentSession) %></td>\n-  </tr>\n-  <tr>\n-    <th>Inactive Time</th>\n-    <td><%= JspHelper.getDisplayInactiveTimeForSession(currentSession) %></td>\n-  </tr>\n-  <tr>\n-    <th>TTL</th>\n-    <td><%= JspHelper.getDisplayTTLForSession(currentSession) %></td>\n-  </tr>\n-</table>\n-\n-<form method=\"post\" action=\"<%= submitUrl %>\">\n-  <div>\n-    <input type=\"hidden\" name=\"sessionId\" value=\"<%= currentSessionId %>\" />\n-    <input type=\"hidden\" name=\"action\" value=\"sessionDetail\" />\n-    <%\n-    if (\"Primary\".equals(request.getParameter(\"sessionType\"))) {\n-    %>\n-      <input type=\"hidden\" name=\"sessionType\" value=\"Primary\" />\n-    <%\n-    }\n-    %>    <input type=\"submit\" value=\"Refresh\" />\n-  </div>\n-</form>\n+<% if (currentHttpSession == null) { %>\n+   <h1><%=currentSessionId%></h1>\n+<% } else { %>\n+   <h1>Details for Session <%= currentSessionId %></h1>\n \n-<div class=\"error\"><%= JspHelper.escapeXml(request.getAttribute(\"error\")) %></div>\n-<div class=\"message\"><%= JspHelper.escapeXml(request.getAttribute(\"message\")) %></div>\n-\n-<table style=\"text-align: left;\" border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n-<% int nAttributes = 0;\n-   Enumeration attributeNamesEnumeration = currentHttpSession.getAttributeNames();\n-   while (attributeNamesEnumeration.hasMoreElements()) {\n-       attributeNamesEnumeration.nextElement();\n-       ++nAttributes;\n-   }\n-%>\n-    <caption style=\"font-variant: small-caps;\"><%= JspHelper.formatNumber(nAttributes) %> attributes</caption>\n-    <thead>\n-        <tr>\n-            <th>Remove Attribute</th>\n-            <th>Attribute name</th>\n-            <th>Attribute value</th>\n-        </tr>\n-    </thead>\n-    <%--tfoot>\n-        <tr>\n-            <td colspan=\"3\" style=\"text-align: center;\">\n-                TODO: set Max Inactive Interval on sessions\n-            </td>\n-        </tr>\n-    </tfoot--%>\n-    <tbody>\n-<% attributeNamesEnumeration = currentHttpSession.getAttributeNames();\n-   while (attributeNamesEnumeration.hasMoreElements()) {\n-       String attributeName = (String) attributeNamesEnumeration.nextElement();\n-%>\n-        <tr>\n-            <td align=\"center\">\n-                <form method=\"post\" action=\"<%= submitUrl %>\">\n-                    <div>\n-                        <input type=\"hidden\" name=\"action\" value=\"removeSessionAttribute\" />\n-                        <input type=\"hidden\" name=\"sessionId\" value=\"<%= currentSessionId %>\" />\n-                        <input type=\"hidden\" name=\"attributeName\" value=\"<%= JspHelper.escapeXml(attributeName) %>\" />\n-                        <%\n-                          if (\"Primary\".equals(request.getParameter(\"sessionType\"))) {\n-                        %>\n-                          <input type=\"submit\" value=\"Remove\" />\n-                          <input type=\"hidden\" name=\"sessionType\" value=\"Primary\" />\n-                        <%\n-                          } else {\n-                            out.print(\"Primary sessions only\");\n-                          }\n-                        %>\n-                    </div>\n-                </form>\n-            </td>\n-            <td><%= JspHelper.escapeXml(attributeName) %></td>\n-            <td><% Object attributeValue = currentHttpSession.getAttribute(attributeName); %><span title=\"<%= attributeValue == null ? \"\" : attributeValue.getClass().toString() %>\"><%= JspHelper.escapeXml(attributeValue) %></span></td>\n-        </tr>\n-<% } // end while %>\n-    </tbody>\n-</table>\n+   <table style=\"text-align: left;\" border=\"0\">\n+     <tr>\n+       <th>Session Id</th>\n+       <td><%= currentSessionId %></td>\n+     </tr>\n+     <tr>\n+       <th>Guessed Locale</th>\n+       <td><%= JspHelper.guessDisplayLocaleFromSession(currentSession) %></td>\n+     </tr>\n+     <tr>\n+       <th>Guessed User</th>\n+       <td><%= JspHelper.guessDisplayUserFromSession(currentSession) %></td>\n+     </tr>\n+     <tr>\n+       <th>Creation Time</th>\n+       <td><%= JspHelper.getDisplayCreationTimeForSession(currentSession) %></td>\n+     </tr>\n+     <tr>\n+       <th>Last Accessed Time</th>\n+       <td><%= JspHelper.getDisplayLastAccessedTimeForSession(currentSession) %></td>\n+     </tr>\n+     <tr>\n+       <th>Session Max Inactive Interval</th>\n+       <td><%= JspHelper.secondsToTimeString(currentSession.getMaxInactiveInterval()) %></td>\n+     </tr>\n+     <tr>\n+       <th>Used Time</th>\n+       <td><%= JspHelper.getDisplayUsedTimeForSession(currentSession) %></td>\n+     </tr>\n+     <tr>\n+       <th>Inactive Time</th>\n+       <td><%= JspHelper.getDisplayInactiveTimeForSession(currentSession) %></td>\n+     </tr>\n+     <tr>\n+       <th>TTL</th>\n+       <td><%= JspHelper.getDisplayTTLForSession(currentSession) %></td>\n+     </tr>\n+   </table>\n+   \n+   <form method=\"post\" action=\"<%= submitUrl %>\">\n+     <div>\n+       <input type=\"hidden\" name=\"sessionId\" value=\"<%= currentSessionId %>\" />\n+       <input type=\"hidden\" name=\"action\" value=\"sessionDetail\" />\n+       <%\n+       if (\"Primary\".equals(request.getParameter(\"sessionType\"))) {\n+       %>\n+         <input type=\"hidden\" name=\"sessionType\" value=\"Primary\" />\n+       <%\n+       }\n+       %>    <input type=\"submit\" value=\"Refresh\" />\n+     </div>\n+   </form>\n+    \n+   <div class=\"error\"><%= JspHelper.escapeXml(request.getAttribute(\"error\")) %></div>\n+   <div class=\"message\"><%= JspHelper.escapeXml(request.getAttribute(\"message\")) %></div>\n+   \n+   <table style=\"text-align: left;\" border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n+   <% int nAttributes = 0;\n+      Enumeration attributeNamesEnumeration = currentHttpSession.getAttributeNames();\n+      while (attributeNamesEnumeration.hasMoreElements()) {\n+          attributeNamesEnumeration.nextElement();\n+          ++nAttributes;\n+      }\n+   %>\n+       <caption style=\"font-variant: small-caps;\"><%= JspHelper.formatNumber(nAttributes) %> attributes</caption>\n+       <thead>\n+           <tr>\n+               <th>Remove Attribute</th>\n+               <th>Attribute name</th>\n+               <th>Attribute value</th>\n+           </tr>\n+       </thead>\n+       <%--tfoot>\n+           <tr>\n+               <td colspan=\"3\" style=\"text-align: center;\">\n+                   TODO: set Max Inactive Interval on sessions\n+               </td>\n+           </tr>\n+       </tfoot--%>\n+       <tbody>\n+   <% attributeNamesEnumeration = currentHttpSession.getAttributeNames();\n+      while (attributeNamesEnumeration.hasMoreElements()) {\n+          String attributeName = (String) attributeNamesEnumeration.nextElement();\n+   %>\n+           <tr>\n+               <td align=\"center\">\n+                   <form method=\"post\" action=\"<%= submitUrl %>\">\n+                       <div>\n+                           <input type=\"hidden\" name=\"action\" value=\"removeSessionAttribute\" />\n+                           <input type=\"hidden\" name=\"sessionId\" value=\"<%= currentSessionId %>\" />\n+                           <input type=\"hidden\" name=\"attributeName\" value=\"<%= JspHelper.escapeXml(attributeName) %>\" />\n+                           <%\n+                             if (\"Primary\".equals(request.getParameter(\"sessionType\"))) {\n+                           %>\n+                             <input type=\"submit\" value=\"Remove\" />\n+                             <input type=\"hidden\" name=\"sessionType\" value=\"Primary\" />\n+                           <%\n+                             } else {\n+                               out.print(\"Primary sessions only\");\n+                             }\n+                           %>\n+                       </div>\n+                   </form>\n+               </td>\n+               <td><%= JspHelper.escapeXml(attributeName) %></td>\n+               <td><% Object attributeValue = currentHttpSession.getAttribute(attributeName); %><span title=\"<%= attributeValue == null ? \"\" : attributeValue.getClass().toString() %>\"><%= JspHelper.escapeXml(attributeValue) %></span></td>\n+           </tr>\n+   <% } // end while %>\n+       </tbody>\n+   </table>\n+<% } // endif%>\n \n <form method=\"post\" action=\"<%=submitUrl%>\">\n   <p style=\"text-align: center;\">",
                "deletions": 113
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE and TCK failures caused by previous fix for bug 49799.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1003891 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/557ef4ecccddbedffe26ae6e7cd192c6b499b99d",
        "parent": "https://github.com/apache/tomcat/commit/b893eee710c64a9ade486b6729794047c6882a61",
        "bug_id": "tomcat_278",
        "file": [
            {
                "sha": "0d4321e10adbe300b26fc378a515bb33f7e092c3",
                "filename": "java/org/apache/jasper/compiler/Generator.java",
                "blob_url": "https://github.com/apache/tomcat/blob/557ef4ecccddbedffe26ae6e7cd192c6b499b99d/java/org/apache/jasper/compiler/Generator.java",
                "raw_url": "https://github.com/apache/tomcat/raw/557ef4ecccddbedffe26ae6e7cd192c6b499b99d/java/org/apache/jasper/compiler/Generator.java",
                "status": "modified",
                "changes": 16,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/Generator.java?ref=557ef4ecccddbedffe26ae6e7cd192c6b499b99d",
                "patch": "@@ -1868,18 +1868,24 @@ public void visit(Node.JspElement n) throws JasperException {\n                 if (attrs[i].isNamedAttribute()) {\n                     NamedAttribute attr = attrs[i].getNamedAttributeNode();\n                     Node.JspAttribute omitAttr = attr.getOmit();\n-                    String omit = attributeValue(omitAttr, false, boolean.class);\n-                    if (\"true\".equals(omit)) {\n-                        continue;\n+                    String omit;\n+                    if (omitAttr == null) {\n+                        omit = \"false\";\n+                    } else {\n+                        omit = attributeValue(omitAttr, false, boolean.class);\n+                        if (\"true\".equals(omit)) {\n+                            continue;\n+                        }\n                     }\n                     value = generateNamedAttributeValue(\n                             attrs[i].getNamedAttributeNode());\n                     if (\"false\".equals(omit)) {\n                         nvp = \" + \\\" \" + attrs[i].getName() + \"=\\\\\\\"\\\" + \" +\n                                 value + \" + \\\"\\\\\\\"\\\"\";\n                     } else {\n-                        nvp = \" + (Boolean.valueOf(\" + omit + \")?\\\"\\\":\\\" \" + attrs[i].getName() +\n-                                \"=\\\\\\\"\\\" + \" + value + \" + \\\"\\\\\\\"\\\")\";\n+                        nvp = \" + (Boolean.valueOf(\" + omit + \")?\\\"\\\":\\\" \" +\n+                                attrs[i].getName() + \"=\\\\\\\"\\\" + \" + value +\n+                                \" + \\\"\\\\\\\"\\\")\";\n                     }\n                 } else {\n                     value = attributeValue(attrs[i], false, Object.class);",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Also handle NPEs (seen during testing of new async re-factoring) and ignore them if the endpoint is shutting down.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@998190 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/7f783f4a5cea56a9b4726ab9cc16e7434b0ecad3",
        "parent": "https://github.com/apache/tomcat/commit/1aed38ebafac218bb259867355c290b5981331ef",
        "bug_id": "tomcat_279",
        "file": [
            {
                "sha": "8371449f83b46fddcbc85d382a9de0151c814ebf",
                "filename": "java/org/apache/tomcat/util/net/JIoEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/7f783f4a5cea56a9b4726ab9cc16e7434b0ecad3/java/org/apache/tomcat/util/net/JIoEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/7f783f4a5cea56a9b4726ab9cc16e7434b0ecad3/java/org/apache/tomcat/util/net/JIoEndpoint.java",
                "status": "modified",
                "changes": 14,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/JIoEndpoint.java?ref=7f783f4a5cea56a9b4726ab9cc16e7434b0ecad3",
                "patch": "@@ -193,18 +193,20 @@ public void run() {\n                             // Ignore\n                         }\n                     }\n-                }catch ( IOException x ) {\n-                    if ( running ) log.error(sm.getString(\"endpoint.accept.fail\"), x);\n+                } catch (IOException x) {\n+                    if (running) {\n+                        log.error(sm.getString(\"endpoint.accept.fail\"), x);\n+                    }\n+                } catch (NullPointerException npe) {\n+                    if (running) {\n+                        log.error(sm.getString(\"endpoint.accept.fail\"), npe);\n+                    }\n                 } catch (Throwable t) {\n                     log.error(sm.getString(\"endpoint.accept.fail\"), t);\n                 }\n-\n                 // The processor will recycle itself when it finishes\n-\n             }\n-\n         }\n-\n     }\n \n ",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=49196\nAvoid NPE on PageContext.getErrorData()\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@948057 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/788126b22629c843d487917d62530af106f428af",
        "parent": "https://github.com/apache/tomcat/commit/88adbcb0351ae276421d3f0631fcb1a649858bdf",
        "bug_id": "tomcat_280",
        "file": [
            {
                "sha": "b3507fa7ff596be198368dbb58e92cf67a349125",
                "filename": "java/javax/servlet/jsp/PageContext.java",
                "blob_url": "https://github.com/apache/tomcat/blob/788126b22629c843d487917d62530af106f428af/java/javax/servlet/jsp/PageContext.java",
                "raw_url": "https://github.com/apache/tomcat/raw/788126b22629c843d487917d62530af106f428af/java/javax/servlet/jsp/PageContext.java",
                "status": "modified",
                "changes": 12,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/javax/servlet/jsp/PageContext.java?ref=788126b22629c843d487917d62530af106f428af",
                "patch": "@@ -513,10 +513,18 @@ public BodyContent pushBody() {\n      * @since 2.0\n      */\n     public ErrorData getErrorData() {\n+        int status = 0;\n+        \n+        Integer status_code = (Integer)getRequest().getAttribute( \n+                \"javax.servlet.error.status_code\");\n+        // Avoid NPE if attribute is not set\n+        if (status_code != null) {\n+            status = status_code.intValue();\n+        }\n+\n         return new ErrorData( \n             (Throwable)getRequest().getAttribute( \"javax.servlet.error.exception\" ),\n-            ((Integer)getRequest().getAttribute( \n-                \"javax.servlet.error.status_code\" )).intValue(),\n+            status,\n             (String)getRequest().getAttribute( \"javax.servlet.error.request_uri\" ),\n             (String)getRequest().getAttribute( \"javax.servlet.error.servlet_name\" ) );\n     }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix TCK failure\nRestore initialisation of logger that was triggering an NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@943664 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/55fb0eeb4d1a39fe3e058c5a38e6ae9bd74ae22d",
        "parent": "https://github.com/apache/tomcat/commit/fd5657b4e416ec8c527d01e2637c40db216fb5f1",
        "bug_id": "tomcat_281",
        "file": [
            {
                "sha": "64c0b1133225a3d00bb8fdecdb0953f3cfcaf81a",
                "filename": "java/org/apache/catalina/valves/ValveBase.java",
                "blob_url": "https://github.com/apache/tomcat/blob/55fb0eeb4d1a39fe3e058c5a38e6ae9bd74ae22d/java/org/apache/catalina/valves/ValveBase.java",
                "raw_url": "https://github.com/apache/tomcat/raw/55fb0eeb4d1a39fe3e058c5a38e6ae9bd74ae22d/java/org/apache/catalina/valves/ValveBase.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/valves/ValveBase.java?ref=55fb0eeb4d1a39fe3e058c5a38e6ae9bd74ae22d",
                "patch": "@@ -218,6 +218,14 @@ public void event(Request request, Response response, CometEvent event)\n     }\n \n \n+    @Override\n+    protected void initInternal() throws LifecycleException {\n+        super.initInternal();\n+        \n+        containerLog = getContainer().getLogger();\n+    }\n+    \n+    \n     /**\n      * Start this component and implement the requirements\n      * of {@link LifecycleBase#startInternal()}.",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=49075\nNPE protection if roles is null and roles needs to be modifiable\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@932357 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/e59ba8f0f660be4c649d5763070276a31de0b5e7",
        "parent": "https://github.com/apache/tomcat/commit/667768cf54e2bc83905ad3c992aba0423645168d",
        "bug_id": "tomcat_282",
        "file": [
            {
                "sha": "bf5a21e27431a70ea3d1b96ac5092b379d5cb590",
                "filename": "java/org/apache/catalina/realm/JNDIRealm.java",
                "blob_url": "https://github.com/apache/tomcat/blob/e59ba8f0f660be4c649d5763070276a31de0b5e7/java/org/apache/catalina/realm/JNDIRealm.java",
                "raw_url": "https://github.com/apache/tomcat/raw/e59ba8f0f660be4c649d5763070276a31de0b5e7/java/org/apache/catalina/realm/JNDIRealm.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/realm/JNDIRealm.java?ref=e59ba8f0f660be4c649d5763070276a31de0b5e7",
                "patch": "@@ -2229,14 +2229,16 @@ protected String getDistinguishedName(DirContext context, String base,\n          final private String username;\n          final private String dn;\n          final private String password;\n-         final private List<String> roles;\n+         final private List<String> roles = new ArrayList<String>();\n \n          public User(String username, String dn, String password,\n                  List<String> roles) {\n              this.username = username;\n              this.dn = dn;\n              this.password = password;\n-             this.roles = Collections.unmodifiableList(roles);\n+             if (roles != null) {\n+                 this.roles.addAll(roles);\n+             }\n          }\n     \n          public String getUserName() {",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48582\nAvoid NPE as config may be null but ctxt won't be\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@910471 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/7301a105ca15ee30d29be061206ee514ad0fe450",
        "parent": "https://github.com/apache/tomcat/commit/9e55819e9e7efe4a4a3398ba10f53246978d13d5",
        "bug_id": "tomcat_283",
        "file": [
            {
                "sha": "8f16a574c2b90876af16454490e8a62d587be2dc",
                "filename": "java/org/apache/jasper/servlet/JspServletWrapper.java",
                "blob_url": "https://github.com/apache/tomcat/blob/7301a105ca15ee30d29be061206ee514ad0fe450/java/org/apache/jasper/servlet/JspServletWrapper.java",
                "raw_url": "https://github.com/apache/tomcat/raw/7301a105ca15ee30d29be061206ee514ad0fe450/java/org/apache/jasper/servlet/JspServletWrapper.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/servlet/JspServletWrapper.java?ref=7301a105ca15ee30d29be061206ee514ad0fe450",
                "patch": "@@ -162,7 +162,7 @@ public Servlet getServlet() throws ServletException {\n     }\n \n     public ServletContext getServletContext() {\n-        return config.getServletContext();\n+        return ctxt.getServletContext();\n     }\n \n     /**",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Prevent NPE in emebedded case when no web.xml is provided at all\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@896622 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/61cb11eb9bee77d563bd0980ea24b5afab8a5e75",
        "parent": "https://github.com/apache/tomcat/commit/11810fb96d0d6ab5c9538359777632b74f819e35",
        "bug_id": "tomcat_284",
        "file": [
            {
                "sha": "944cda60ee7a1e463b943f9c890a05fc622bc40f",
                "filename": "java/org/apache/jasper/compiler/JspConfig.java",
                "blob_url": "https://github.com/apache/tomcat/blob/61cb11eb9bee77d563bd0980ea24b5afab8a5e75/java/org/apache/jasper/compiler/JspConfig.java",
                "raw_url": "https://github.com/apache/tomcat/raw/61cb11eb9bee77d563bd0980ea24b5afab8a5e75/java/org/apache/jasper/compiler/JspConfig.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/JspConfig.java?ref=61cb11eb9bee77d563bd0980ea24b5afab8a5e75",
                "patch": "@@ -77,9 +77,12 @@ private void processWebDotXml() throws JasperException {\n         try {\n             webXml = new WebXml(ctxt);\n             \n-            ParserUtils pu = new ParserUtils();\n-            TreeNode webApp = pu.parseXMLDocument(webXml.getSystemId(),\n-                    webXml.getInputSource());\n+            TreeNode webApp = null;\n+            if (webXml.getInputSource() != null) {\n+                ParserUtils pu = new ParserUtils();\n+                webApp = pu.parseXMLDocument(webXml.getSystemId(),\n+                        webXml.getInputSource());\n+            }\n \n             if (webApp == null\n                     || getVersion(webApp) < 2.4) {",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Test for null rather than waiting for the NPE ot be thrown.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@890265 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/064af24b1eef57fec66bc717c52a86e2af37361f",
        "parent": "https://github.com/apache/tomcat/commit/65eefd719501453fd1b6c8d27971eced2f938587",
        "bug_id": "tomcat_285",
        "file": [
            {
                "sha": "b0267ec76a142de64b50975cbe8fec0f3ae52325",
                "filename": "java/org/apache/jasper/servlet/JspServletWrapper.java",
                "blob_url": "https://github.com/apache/tomcat/blob/064af24b1eef57fec66bc717c52a86e2af37361f/java/org/apache/jasper/servlet/JspServletWrapper.java",
                "raw_url": "https://github.com/apache/tomcat/raw/064af24b1eef57fec66bc717c52a86e2af37361f/java/org/apache/jasper/servlet/JspServletWrapper.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/servlet/JspServletWrapper.java?ref=064af24b1eef57fec66bc717c52a86e2af37361f",
                "patch": "@@ -476,9 +476,12 @@ protected JasperException handleJspException(Exception ex) {\n                 }\n             }\n \n-            if (jspFrame == null) {\n+            \n+            if (jspFrame == null ||\n+                    this.ctxt.getCompiler().getPageNodes() == null) {\n                 // If we couldn't find a frame in the stack trace corresponding\n-                // to the generated servlet class, we can't really add anything\n+                // to the generated servlet class or we don't have a copy of the\n+                // parsed JSP to hand, we can't really add anything\n                 return new JasperException(ex);\n             }\n             else {",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48282\nCorrect possible NPE\nPatch provided by sebb\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@884914 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/56897bec89c3dc62e2e27752c0c48fe075fd6a07",
        "parent": "https://github.com/apache/tomcat/commit/632e68c830312d12eb5292fe15599f4f21ac70b5",
        "bug_id": "tomcat_286",
        "file": [
            {
                "sha": "2ac06d208e01ca750dc46c4ad90624161dde1a97",
                "filename": "java/org/apache/tomcat/util/modeler/Registry.java",
                "blob_url": "https://github.com/apache/tomcat/blob/56897bec89c3dc62e2e27752c0c48fe075fd6a07/java/org/apache/tomcat/util/modeler/Registry.java",
                "raw_url": "https://github.com/apache/tomcat/raw/56897bec89c3dc62e2e27752c0c48fe075fd6a07/java/org/apache/tomcat/util/modeler/Registry.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/modeler/Registry.java?ref=56897bec89c3dc62e2e27752c0c48fe075fd6a07",
                "patch": "@@ -429,8 +429,10 @@ public ManagedBean findManagedBean(String name) {\n         Iterator<ManagedBean> items = descriptors.values().iterator();\n         while (items.hasNext()) {\n             ManagedBean item = items.next();\n-            if ((group == null) && (item.getGroup() == null)) {\n-                results.add(item.getName());\n+            if ((group == null)) {\n+                if (item.getGroup() == null){\n+                    results.add(item.getName());\n+                }\n             } else if (group.equals(item.getGroup())) {\n                 results.add(item.getName());\n             }\n@@ -678,7 +680,7 @@ public Object convertValue(String type, String value)\n         } else if( source instanceof InputStream ) {\n             type=param;\n             inputsource=source;\n-        } else if( source instanceof Class ) {\n+        } else if( source instanceof Class<?> ) {\n             location=((Class<?>)source).getName();\n             type=param;\n             inputsource=source;",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix failing SSL test\nPrevent NPE in NIO connector when using SSL and the default keystore password\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@883196 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/380c01129ecd4244d92782b179921172c6d8f6c9",
        "parent": "https://github.com/apache/tomcat/commit/97aa81963840b7fd3afa0b29537b70069cd7e94a",
        "bug_id": "tomcat_287",
        "file": [
            {
                "sha": "7796e71eea846b6e9a1b8ce7c675bdcee6127be3",
                "filename": "java/org/apache/tomcat/util/net/AbstractEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/380c01129ecd4244d92782b179921172c6d8f6c9/java/org/apache/tomcat/util/net/AbstractEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/380c01129ecd4244d92782b179921172c6d8f6c9/java/org/apache/tomcat/util/net/AbstractEndpoint.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/AbstractEndpoint.java?ref=380c01129ecd4244d92782b179921172c6d8f6c9",
                "patch": "@@ -26,6 +26,7 @@\n import org.apache.juli.logging.Log;\n import org.apache.juli.logging.LogFactory;\n import org.apache.tomcat.util.IntrospectionUtils;\n+import org.apache.tomcat.util.net.jsse.JSSESocketFactory;\n import org.apache.tomcat.util.res.StringManager;\n import org.apache.tomcat.util.threads.ResizableExecutor;\n import org.apache.tomcat.util.threads.TaskQueue;\n@@ -503,7 +504,7 @@ public void setCiphers(String s) {\n     public String getKeyAlias() { return keyAlias;}\n     public void setKeyAlias(String s ) { keyAlias = s;}\n     \n-    private String keyPass = \"changeit\";\n+    private String keyPass = JSSESocketFactory.DEFAULT_KEY_PASS;\n     public String getKeyPass() { return keyPass;}\n     public void setKeyPass(String s ) { this.keyPass = s;}\n ",
                "deletions": 1
            },
            {
                "sha": "808808f9b16ac5aa1a4b9e5a579fed60e4f181ef",
                "filename": "java/org/apache/tomcat/util/net/NioEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/380c01129ecd4244d92782b179921172c6d8f6c9/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/380c01129ecd4244d92782b179921172c6d8f6c9/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/NioEndpoint.java?ref=380c01129ecd4244d92782b179921172c6d8f6c9",
                "patch": "@@ -53,6 +53,7 @@\n import org.apache.juli.logging.LogFactory;\n import org.apache.tomcat.util.IntrospectionUtils;\n import org.apache.tomcat.util.net.SecureNioChannel.ApplicationBufferHandler;\n+import org.apache.tomcat.util.net.jsse.JSSESocketFactory;\n import org.apache.tomcat.util.net.jsse.NioX509KeyManager;\n \n /**\n@@ -504,7 +505,11 @@ public void init()\n         // Initialize SSL if needed\n         if (isSSLEnabled()) {\n             // Initialize SSL\n-            char[] passphrase = getKeystorePass().toCharArray();\n+            String keystorePass = getKeystorePass();\n+            if (keystorePass == null) {\n+                keystorePass = JSSESocketFactory.DEFAULT_KEY_PASS;\n+            }\n+            char[] passphrase = keystorePass.toCharArray();\n \n             char[] tpassphrase = (getTruststorePass()!=null)?getTruststorePass().toCharArray():passphrase;\n             String ttype = (getTruststoreType()!=null)?getTruststoreType():getKeystoreType();",
                "deletions": 1
            },
            {
                "sha": "a6d54e8dd740a51e24a242a21b74fbb0ac3fbcd8",
                "filename": "java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java",
                "blob_url": "https://github.com/apache/tomcat/blob/380c01129ecd4244d92782b179921172c6d8f6c9/java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java",
                "raw_url": "https://github.com/apache/tomcat/raw/380c01129ecd4244d92782b179921172c6d8f6c9/java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java?ref=380c01129ecd4244d92782b179921172c6d8f6c9",
                "patch": "@@ -84,15 +84,15 @@\n     private static final StringManager sm =\n         StringManager.getManager(\"org.apache.tomcat.util.net.jsse.res\");\n \n-    // defaults\n+    // Defaults - made public where re-used\n     static String defaultProtocol = \"TLS\";\n     static boolean defaultClientAuth = false;\n     static String defaultKeystoreType = \"JKS\";\n     private static final String defaultKeystoreFile\n         = System.getProperty(\"user.home\") + \"/.keystore\";\n-    private static final String defaultKeyPass = \"changeit\";\n     private static final int defaultSessionCacheSize = 0;\n     private static final int defaultSessionTimeout = 86400;\n+    public static final String DEFAULT_KEY_PASS = \"changeit\";\n     \n     static final org.apache.juli.logging.Log log =\n         org.apache.juli.logging.LogFactory.getLog(JSSESocketFactory.class);\n@@ -259,7 +259,7 @@ protected String getKeystorePassword() {\n         String keyPass = (String)attributes.get(\n                 AbstractEndpoint.SSL_ATTR_KEY_PASS);\n         if (keyPass == null) {\n-            keyPass = defaultKeyPass;\n+            keyPass = DEFAULT_KEY_PASS;\n         }\n         String keystorePass = (String)attributes.get(\n                 AbstractEndpoint.SSL_ATTR_KEYSTORE_PASS);",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPEs on startup with relative ordering and provide somewhere to store results of annotation scanning when that is implemented\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@835567 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/5407b46f5d47b8b4959a2129fd4e30252876c47e",
        "parent": "https://github.com/apache/tomcat/commit/d4e7e0a832c3bbec975d8ac9288bfe93dc7bfe28",
        "bug_id": "tomcat_288",
        "file": [
            {
                "sha": "2a1378c6d9164abbd4323e99415eed3596a893fa",
                "filename": "java/org/apache/catalina/startup/ContextConfig.java",
                "blob_url": "https://github.com/apache/tomcat/blob/5407b46f5d47b8b4959a2129fd4e30252876c47e/java/org/apache/catalina/startup/ContextConfig.java",
                "raw_url": "https://github.com/apache/tomcat/raw/5407b46f5d47b8b4959a2129fd4e30252876c47e/java/org/apache/catalina/startup/ContextConfig.java",
                "status": "modified",
                "changes": 15,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/startup/ContextConfig.java?ref=5407b46f5d47b8b4959a2129fd4e30252876c47e",
                "patch": "@@ -1472,7 +1472,7 @@ public void scan(JarURLConnection urlConn) throws IOException {\n             \n             JarFile jarFile = null;\n             InputStream stream = null;\n-            WebXml fragment = null;\n+            WebXml fragment = new WebXml();\n \n             try {\n                 urlConn.setUseCaches(false);\n@@ -1485,7 +1485,6 @@ public void scan(JarURLConnection urlConn) throws IOException {\n                             urlConn.getJarFileURL().toString() +\n                             File.separatorChar + FRAGMENT_LOCATION);\n                     source.setByteStream(stream);\n-                    fragment = new WebXml();\n                     parseWebXml(source, fragment, true);\n                 }\n             } finally {\n@@ -1503,15 +1502,11 @@ public void scan(JarURLConnection urlConn) throws IOException {\n                         // ignore\n                     }\n                 }\n-                if (fragment == null) {\n-                    fragments.put(urlConn.getURL().toString(), fragment);\n-                } else {\n-                    fragment.setURL(urlConn.getURL());\n-                    if (fragment.getName() == null) {\n-                        fragment.setName(fragment.getURL().toString());\n-                    }\n-                    fragments.put(fragment.getName(), fragment);\n+                fragment.setURL(urlConn.getURL());\n+                if (fragment.getName() == null) {\n+                    fragment.setName(fragment.getURL().toString());\n                 }\n+                fragments.put(fragment.getName(), fragment);\n             }\n         }\n ",
                "deletions": 10
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix 47080: NPE in RealmBase.findSecurityConstraints when uri is null \nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=47080\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@770809 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/f34455d975e8d7b78a36c15c07bcf4019a211793",
        "parent": "https://github.com/apache/tomcat/commit/e1d738d18890e2ec35c1c1c05d0b043010712a6f",
        "bug_id": "tomcat_289",
        "file": [
            {
                "sha": "c5de0b11b7c9f229c71023b64cb8b31796c382fe",
                "filename": "java/org/apache/catalina/realm/RealmBase.java",
                "blob_url": "https://github.com/apache/tomcat/blob/f34455d975e8d7b78a36c15c07bcf4019a211793/java/org/apache/catalina/realm/RealmBase.java",
                "raw_url": "https://github.com/apache/tomcat/raw/f34455d975e8d7b78a36c15c07bcf4019a211793/java/org/apache/catalina/realm/RealmBase.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/realm/RealmBase.java?ref=f34455d975e8d7b78a36c15c07bcf4019a211793",
                "patch": "@@ -471,6 +471,11 @@ public void backgroundProcess() {\n \n         // Check each defined security constraint\n         String uri = request.getRequestPathMB().toString();\n+        // Bug47080 - in rare cases this may be null\n+        // Mapper treats as '/' do the same to prevent NPE\n+        if (uri == null) {\n+            uri = \"/\";\n+        }\n         \n         String method = request.getMethod();\n         int i;",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/attachment.cgi?id=23066\nSync issue leads to NPE in rare circumstances\nPatch provided by Konstantin Kolinko\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@730735 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/e93168d6e1791b533f89701574972713147fe283",
        "parent": "https://github.com/apache/tomcat/commit/1ca03ff93b98553ea1bdcbea2e452f0a69ac186f",
        "bug_id": "tomcat_290",
        "file": [
            {
                "sha": "6988bc105ced75b454516bbd3d2d184e2c5f990b",
                "filename": "java/org/apache/catalina/loader/WebappClassLoader.java",
                "blob_url": "https://github.com/apache/tomcat/blob/e93168d6e1791b533f89701574972713147fe283/java/org/apache/catalina/loader/WebappClassLoader.java",
                "raw_url": "https://github.com/apache/tomcat/raw/e93168d6e1791b533f89701574972713147fe283/java/org/apache/catalina/loader/WebappClassLoader.java",
                "status": "modified",
                "changes": 40,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/loader/WebappClassLoader.java?ref=e93168d6e1791b533f89701574972713147fe283",
                "patch": "@@ -1794,7 +1794,11 @@ protected boolean openJARs() {\n             return clazz;\n \n         synchronized (this) {\n-            if (entry.binaryContent == null && entry.loadedClass == null)\n+            clazz = entry.loadedClass;\n+            if (clazz != null)\n+                return clazz;\n+\n+            if (entry.binaryContent == null)\n                 throw new ClassNotFoundException(name);\n \n             // Looking up the package\n@@ -1843,26 +1847,22 @@ protected boolean openJARs() {\n     \n             }\n \n-            if (entry.loadedClass == null) {\n-                try {\n-                    clazz = defineClass(name, entry.binaryContent, 0,\n-                            entry.binaryContent.length, \n-                            new CodeSource(entry.codeBase, entry.certificates));\n-                } catch (UnsupportedClassVersionError ucve) {\n-                    throw new UnsupportedClassVersionError(\n-                            ucve.getLocalizedMessage() + \" \" +\n-                            sm.getString(\"webappClassLoader.wrongVersion\",\n-                                    name));\n-                }\n-                entry.loadedClass = clazz;\n-                entry.binaryContent = null;\n-                entry.source = null;\n-                entry.codeBase = null;\n-                entry.manifest = null;\n-                entry.certificates = null;\n-            } else {\n-                clazz = entry.loadedClass;\n+            try {\n+                clazz = defineClass(name, entry.binaryContent, 0,\n+                        entry.binaryContent.length, \n+                        new CodeSource(entry.codeBase, entry.certificates));\n+            } catch (UnsupportedClassVersionError ucve) {\n+                throw new UnsupportedClassVersionError(\n+                        ucve.getLocalizedMessage() + \" \" +\n+                        sm.getString(\"webappClassLoader.wrongVersion\",\n+                                name));\n             }\n+            entry.loadedClass = clazz;\n+            entry.binaryContent = null;\n+            entry.source = null;\n+            entry.codeBase = null;\n+            entry.manifest = null;\n+            entry.certificates = null;\n         }\n         \n         return clazz;",
                "deletions": 20
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Generics for o.a.c.loader\nFix various eclipse warnings (remove unused code, fix possible NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@729634 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/4456b6ccf9a86a8e7bf3a41558e7cf3e8e86b365",
        "parent": "https://github.com/apache/tomcat/commit/2b6b1a887c0137eb52a5a2fed127112fb238885f",
        "bug_id": "tomcat_291",
        "file": [
            {
                "sha": "b4098a7733170d2a03e8e3d04dc27dc6719b3441",
                "filename": "java/org/apache/catalina/loader/ResourceEntry.java",
                "blob_url": "https://github.com/apache/tomcat/blob/4456b6ccf9a86a8e7bf3a41558e7cf3e8e86b365/java/org/apache/catalina/loader/ResourceEntry.java",
                "raw_url": "https://github.com/apache/tomcat/raw/4456b6ccf9a86a8e7bf3a41558e7cf3e8e86b365/java/org/apache/catalina/loader/ResourceEntry.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/loader/ResourceEntry.java?ref=4456b6ccf9a86a8e7bf3a41558e7cf3e8e86b365",
                "patch": "@@ -47,7 +47,7 @@\n     /**\n      * Loaded class.\n      */\n-    public Class loadedClass = null;\n+    public Class<?> loadedClass = null;\n \n \n     /**",
                "deletions": 1
            },
            {
                "sha": "5a911453b1f0113f3e1a094636718c40867a688e",
                "filename": "java/org/apache/catalina/loader/WebappClassLoader.java",
                "blob_url": "https://github.com/apache/tomcat/blob/4456b6ccf9a86a8e7bf3a41558e7cf3e8e86b365/java/org/apache/catalina/loader/WebappClassLoader.java",
                "raw_url": "https://github.com/apache/tomcat/raw/4456b6ccf9a86a8e7bf3a41558e7cf3e8e86b365/java/org/apache/catalina/loader/WebappClassLoader.java",
                "status": "modified",
                "changes": 102,
                "additions": 52,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/loader/WebappClassLoader.java?ref=4456b6ccf9a86a8e7bf3a41558e7cf3e8e86b365",
                "patch": "@@ -50,6 +50,7 @@\n import java.util.jar.Manifest;\n import java.util.jar.Attributes.Name;\n \n+import javax.naming.Binding;\n import javax.naming.NameClassPair;\n import javax.naming.NamingEnumeration;\n import javax.naming.NamingException;\n@@ -114,7 +115,7 @@\n         Boolean.valueOf(System.getProperty(\"org.apache.catalina.loader.WebappClassLoader.ENABLE_CLEAR_REFERENCES\", \"true\")).booleanValue();\n     \n     protected class PrivilegedFindResource\n-        implements PrivilegedAction {\n+        implements PrivilegedAction<ResourceEntry> {\n \n         protected File file;\n         protected String path;\n@@ -124,7 +125,7 @@\n             this.path = path;\n         }\n \n-        public Object run() {\n+        public ResourceEntry run() {\n             return findResourceInternal(file, path);\n         }\n \n@@ -239,13 +240,13 @@ public WebappClassLoader(ClassLoader parent) {\n      * The cache of ResourceEntry for classes and resources we have loaded,\n      * keyed by resource name.\n      */\n-    protected HashMap resourceEntries = new HashMap();\n+    protected HashMap<String, ResourceEntry> resourceEntries = new HashMap<String, ResourceEntry>();\n \n \n     /**\n      * The list of not found resources.\n      */\n-    protected HashMap notFoundResources = new HashMap();\n+    protected HashMap<String, String> notFoundResources = new HashMap<String, String>();\n \n \n     /**\n@@ -331,7 +332,8 @@ public WebappClassLoader(ClassLoader parent) {\n      * A list of read File and Jndi Permission's required if this loader\n      * is for a web application context.\n      */\n-    protected ArrayList permissionList = new ArrayList();\n+    protected ArrayList<Permission> permissionList =\n+        new ArrayList<Permission>();\n \n \n     /**\n@@ -344,7 +346,7 @@ public WebappClassLoader(ClassLoader parent) {\n      * The PermissionCollection for each CodeSource for a web\n      * application context.\n      */\n-    protected HashMap loaderPC = new HashMap();\n+    protected HashMap<String, PermissionCollection> loaderPC = new HashMap<String, PermissionCollection>();\n \n \n     /**\n@@ -706,7 +708,7 @@ synchronized void addJar(String jar, JarFile jarFile, File file)\n      */\n     public String[] findRepositories() {\n \n-        return ((String[])repositories.clone());\n+        return (repositories.clone());\n \n     }\n \n@@ -755,10 +757,11 @@ public boolean modified() {\n         if (getJarPath() != null) {\n \n             try {\n-                NamingEnumeration enumeration = resources.listBindings(getJarPath());\n+                NamingEnumeration<Binding> enumeration =\n+                    resources.listBindings(getJarPath());\n                 int i = 0;\n                 while (enumeration.hasMoreElements() && (i < length)) {\n-                    NameClassPair ncPair = (NameClassPair) enumeration.nextElement();\n+                    NameClassPair ncPair = enumeration.nextElement();\n                     String name = ncPair.getName();\n                     // Ignore non JARs present in the lib folder\n                     if (!name.endsWith(\".jar\"))\n@@ -773,8 +776,7 @@ public boolean modified() {\n                 }\n                 if (enumeration.hasMoreElements()) {\n                     while (enumeration.hasMoreElements()) {\n-                        NameClassPair ncPair = \n-                            (NameClassPair) enumeration.nextElement();\n+                        NameClassPair ncPair = enumeration.nextElement();\n                         String name = ncPair.getName();\n                         // Additional non-JAR files are allowed\n                         if (name.endsWith(\".jar\")) {\n@@ -853,7 +855,7 @@ protected void addURL(URL url) {\n      *\n      * @exception ClassNotFoundException if the class was not found\n      */\n-    public Class findClass(String name) throws ClassNotFoundException {\n+    public Class<?> findClass(String name) throws ClassNotFoundException {\n \n         if (log.isDebugEnabled())\n             log.debug(\"    findClass(\" + name + \")\");\n@@ -881,7 +883,7 @@ public Class findClass(String name) throws ClassNotFoundException {\n \n         // Ask our superclass to locate this class, if possible\n         // (throws ClassNotFoundException if it is not found)\n-        Class clazz = null;\n+        Class<?> clazz = null;\n         try {\n             if (log.isTraceEnabled())\n                 log.trace(\"      findClassInternal(\" + name + \")\");\n@@ -926,7 +928,7 @@ public Class findClass(String name) throws ClassNotFoundException {\n         if (log.isTraceEnabled())\n             log.debug(\"      Returning class \" + clazz);\n         \n-        if ((log.isTraceEnabled()) && (clazz != null)) {\n+        if (log.isTraceEnabled()) {\n             ClassLoader cl;\n             if (Globals.IS_SECURITY_ENABLED){\n                 cl = AccessController.doPrivileged(\n@@ -955,7 +957,7 @@ public URL findResource(final String name) {\n \n         URL url = null;\n \n-        ResourceEntry entry = (ResourceEntry) resourceEntries.get(name);\n+        ResourceEntry entry = resourceEntries.get(name);\n         if (entry == null) {\n             entry = findResourceInternal(name, name);\n         }\n@@ -986,12 +988,12 @@ public URL findResource(final String name) {\n      *\n      * @exception IOException if an input/output error occurs\n      */\n-    public Enumeration findResources(String name) throws IOException {\n+    public Enumeration<URL> findResources(String name) throws IOException {\n \n         if (log.isDebugEnabled())\n             log.debug(\"    findResources(\" + name + \")\");\n \n-        Vector result = new Vector();\n+        Vector<URL> result = new Vector<URL>();\n \n         int jarFilesLength = jarFiles.length;\n         int repositoriesLength = repositories.length;\n@@ -1035,7 +1037,7 @@ public Enumeration findResources(String name) throws IOException {\n         // Adding the results of a call to the superclass\n         if (hasExternalRepositories) {\n \n-            Enumeration otherResourcePaths = super.findResources(name);\n+            Enumeration<URL> otherResourcePaths = super.findResources(name);\n \n             while (otherResourcePaths.hasMoreElements()) {\n                 result.addElement(otherResourcePaths.nextElement());\n@@ -1097,7 +1099,7 @@ public URL getResource(String name) {\n             // Locating the repository for special handling in the case \n             // of a JAR\n             if (antiJARLocking) {\n-                ResourceEntry entry = (ResourceEntry) resourceEntries.get(name);\n+                ResourceEntry entry = resourceEntries.get(name);\n                 try {\n                     String repository = entry.codeBase.toString();\n                     if ((repository.endsWith(\".jar\")) \n@@ -1188,7 +1190,7 @@ public InputStream getResourceAsStream(String name) {\n                 if (hasExternalRepositories && (stream == null))\n                     stream = url.openStream();\n             } catch (IOException e) {\n-                ; // Ignore\n+                // Ignore\n             }\n             if (stream != null)\n                 return (stream);\n@@ -1227,7 +1229,7 @@ public InputStream getResourceAsStream(String name) {\n      *\n      * @exception ClassNotFoundException if the class was not found\n      */\n-    public Class loadClass(String name) throws ClassNotFoundException {\n+    public Class<?> loadClass(String name) throws ClassNotFoundException {\n \n         return (loadClass(name, false));\n \n@@ -1259,12 +1261,12 @@ public Class loadClass(String name) throws ClassNotFoundException {\n      *\n      * @exception ClassNotFoundException if the class was not found\n      */\n-    public Class loadClass(String name, boolean resolve)\n+    public Class<?> loadClass(String name, boolean resolve)\n         throws ClassNotFoundException {\n \n         if (log.isDebugEnabled())\n             log.debug(\"loadClass(\" + name + \", \" + resolve + \")\");\n-        Class clazz = null;\n+        Class<?> clazz = null;\n \n         // Log access to stopped classloader\n         if (!started) {\n@@ -1342,7 +1344,7 @@ public Class loadClass(String name, boolean resolve)\n                     return (clazz);\n                 }\n             } catch (ClassNotFoundException e) {\n-                ;\n+                // Ignore\n             }\n         }\n \n@@ -1359,7 +1361,7 @@ public Class loadClass(String name, boolean resolve)\n                 return (clazz);\n             }\n         } catch (ClassNotFoundException e) {\n-            ;\n+            // Ignore\n         }\n \n         // (3) Delegate to parent unconditionally\n@@ -1379,7 +1381,7 @@ public Class loadClass(String name, boolean resolve)\n                     return (clazz);\n                 }\n             } catch (ClassNotFoundException e) {\n-                ;\n+                // Ignore\n             }\n         }\n \n@@ -1401,12 +1403,12 @@ protected PermissionCollection getPermissions(CodeSource codeSource) {\n \n         String codeUrl = codeSource.getLocation().toString();\n         PermissionCollection pc;\n-        if ((pc = (PermissionCollection)loaderPC.get(codeUrl)) == null) {\n+        if ((pc = loaderPC.get(codeUrl)) == null) {\n             pc = super.getPermissions(codeSource);\n             if (pc != null) {\n-                Iterator perms = permissionList.iterator();\n+                Iterator<Permission> perms = permissionList.iterator();\n                 while (perms.hasNext()) {\n-                    Permission p = (Permission)perms.next();\n+                    Permission p = perms.next();\n                     pc.add(p);\n                 }\n                 loaderPC.put(codeUrl,pc);\n@@ -1602,9 +1604,9 @@ public void closeJARs(boolean force) {\n     protected void clearReferences() {\n \n         // Unregister any JDBC drivers loaded by this classloader\n-        Enumeration drivers = DriverManager.getDrivers();\n+        Enumeration<Driver> drivers = DriverManager.getDrivers();\n         while (drivers.hasMoreElements()) {\n-            Driver driver = (Driver) drivers.nextElement();\n+            Driver driver = drivers.nextElement();\n             if (driver.getClass().getClassLoader() == this) {\n                 try {\n                     DriverManager.deregisterDriver(driver);\n@@ -1617,11 +1619,11 @@ protected void clearReferences() {\n         // Null out any static or final fields from loaded classes,\n         // as a workaround for apparent garbage collection bugs\n         if (ENABLE_CLEAR_REFERENCES) {\n-            Iterator loadedClasses = ((HashMap) resourceEntries.clone()).values().iterator();\n+            Iterator<ResourceEntry> loadedClasses = ((HashMap<String, ResourceEntry>) resourceEntries.clone()).values().iterator();\n             while (loadedClasses.hasNext()) {\n-                ResourceEntry entry = (ResourceEntry) loadedClasses.next();\n+                ResourceEntry entry = loadedClasses.next();\n                 if (entry.loadedClass != null) {\n-                    Class clazz = entry.loadedClass;\n+                    Class<?> clazz = entry.loadedClass;\n                     try {\n                         Field[] fields = clazz.getDeclaredFields();\n                         for (int i = 0; i < fields.length; i++) {\n@@ -1695,7 +1697,7 @@ protected void nullInstance(Object instance) {\n                 } else {\n                     Object value = field.get(instance);\n                     if (null != value) {\n-                        Class valueClass = value.getClass();\n+                        Class<? extends Object> valueClass = value.getClass();\n                         if (!loadedByThisOrChild(valueClass)) {\n                             if (log.isDebugEnabled()) {\n                                 log.debug(\"Not setting field \" + field.getName() +\n@@ -1729,7 +1731,7 @@ protected void nullInstance(Object instance) {\n      * Determine whether a class was loaded by this class loader or one of\n      * its child class loaders.\n      */\n-    protected boolean loadedByThisOrChild(Class clazz)\n+    protected boolean loadedByThisOrChild(Class<? extends Object> clazz)\n     {\n         boolean result = false;\n         for (ClassLoader classLoader = clazz.getClassLoader();\n@@ -1771,7 +1773,7 @@ protected boolean openJARs() {\n      *\n      * @return the loaded class, or null if the class isn't found\n      */\n-    protected Class findClassInternal(String name)\n+    protected Class<?> findClassInternal(String name)\n         throws ClassNotFoundException {\n \n         if (!validate(name))\n@@ -1787,7 +1789,7 @@ protected Class findClassInternal(String name)\n         if (entry == null)\n             throw new ClassNotFoundException(name);\n \n-        Class clazz = entry.loadedClass;\n+        Class<?> clazz = entry.loadedClass;\n         if (clazz != null)\n             return clazz;\n \n@@ -1900,7 +1902,7 @@ protected ResourceEntry findResourceInternal(String name, String path) {\n         if ((name == null) || (path == null))\n             return null;\n \n-        ResourceEntry entry = (ResourceEntry) resourceEntries.get(name);\n+        ResourceEntry entry = resourceEntries.get(name);\n         if (entry != null)\n             return entry;\n \n@@ -1929,9 +1931,9 @@ protected ResourceEntry findResourceInternal(String name, String path) {\n                 // Note : Not getting an exception here means the resource was\n                 // found\n                  if (securityManager != null) {\n-                    PrivilegedAction dp =\n+                    PrivilegedAction<ResourceEntry> dp =\n                         new PrivilegedFindResource(files[i], path);\n-                    entry = (ResourceEntry)AccessController.doPrivileged(dp);\n+                    entry = AccessController.doPrivileged(dp);\n                  } else {\n                     entry = findResourceInternal(files[i], path);\n                  }\n@@ -2025,10 +2027,10 @@ protected ResourceEntry findResourceInternal(String name, String path) {\n                         File resourceFile = new File\n                             (loaderDir, jarEntry.getName());\n                         if (!resourceFile.exists()) {\n-                            Enumeration entries = jarFiles[i].entries();\n+                            Enumeration<JarEntry> entries =\n+                                jarFiles[i].entries();\n                             while (entries.hasMoreElements()) {\n-                                JarEntry jarEntry2 = \n-                                    (JarEntry) entries.nextElement();\n+                                JarEntry jarEntry2 =  entries.nextElement();\n                                 if (!(jarEntry2.isDirectory()) \n                                     && (!jarEntry2.getName().endsWith\n                                         (\".class\"))) {\n@@ -2129,7 +2131,7 @@ protected ResourceEntry findResourceInternal(String name, String path) {\n             // Ensures that all the threads which may be in a race to load\n             // a particular class all end up with the same ResourceEntry\n             // instance\n-            ResourceEntry entry2 = (ResourceEntry) resourceEntries.get(name);\n+            ResourceEntry entry2 = resourceEntries.get(name);\n             if (entry2 == null) {\n                 resourceEntries.put(name, entry);\n             } else {\n@@ -2174,7 +2176,7 @@ protected boolean isPackageSealed(String name, Manifest man) {\n      */\n     protected InputStream findLoadedResource(String name) {\n \n-        ResourceEntry entry = (ResourceEntry) resourceEntries.get(name);\n+        ResourceEntry entry = resourceEntries.get(name);\n         if (entry != null) {\n             if (entry.binaryContent != null)\n                 return new ByteArrayInputStream(entry.binaryContent);\n@@ -2191,9 +2193,9 @@ protected InputStream findLoadedResource(String name) {\n      *\n      * @param name Name of the resource to return\n      */\n-    protected Class findLoadedClass0(String name) {\n+    protected Class<?> findLoadedClass0(String name) {\n \n-        ResourceEntry entry = (ResourceEntry) resourceEntries.get(name);\n+        ResourceEntry entry = resourceEntries.get(name);\n         if (entry != null) {\n             return entry.loadedClass;\n         }\n@@ -2287,7 +2289,7 @@ protected boolean validateJarFile(File jarfile)\n             return (true);\n         JarFile jarFile = new JarFile(jarfile);\n         for (int i = 0; i < triggers.length; i++) {\n-            Class clazz = null;\n+            Class<?> clazz = null;\n             try {\n                 if (parent != null) {\n                     clazz = parent.loadClass(triggers[i]);\n@@ -2332,7 +2334,7 @@ protected URL getURL(File file, boolean encoded)\n         if(encoded) {\n             return getURI(realFile);\n         } else {\n-            return realFile.toURL();\n+            return realFile.toURI().toURL();\n         }\n \n     }",
                "deletions": 50
            },
            {
                "sha": "753b995d83007f48d614cfacc32d7f22739204b4",
                "filename": "java/org/apache/catalina/loader/WebappLoader.java",
                "blob_url": "https://github.com/apache/tomcat/blob/4456b6ccf9a86a8e7bf3a41558e7cf3e8e86b365/java/org/apache/catalina/loader/WebappLoader.java",
                "raw_url": "https://github.com/apache/tomcat/raw/4456b6ccf9a86a8e7bf3a41558e7cf3e8e86b365/java/org/apache/catalina/loader/WebappLoader.java",
                "status": "modified",
                "changes": 50,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/loader/WebappLoader.java?ref=4456b6ccf9a86a8e7bf3a41558e7cf3e8e86b365",
                "patch": "@@ -49,7 +49,6 @@\n \n import org.apache.catalina.Container;\n import org.apache.catalina.Context;\n-import org.apache.catalina.Engine;\n import org.apache.catalina.Globals;\n import org.apache.catalina.Lifecycle;\n import org.apache.catalina.LifecycleException;\n@@ -207,7 +206,7 @@ public WebappLoader(ClassLoader parent) {\n     /**\n      * Repositories that are set in the loader, for JMX.\n      */\n-    private ArrayList loaderRepositories = null;\n+    private ArrayList<String> loaderRepositories = null;\n \n \n     // ------------------------------------------------------------- Properties\n@@ -218,7 +217,7 @@ public WebappLoader(ClassLoader parent) {\n      */\n     public ClassLoader getClassLoader() {\n \n-        return ((ClassLoader) classLoader);\n+        return classLoader;\n \n     }\n \n@@ -423,12 +422,12 @@ public void backgroundProcess() {\n      */\n     public String[] findRepositories() {\n \n-        return ((String[])repositories.clone());\n+        return repositories.clone();\n \n     }\n \n     public String[] getRepositories() {\n-        return ((String[])repositories.clone());\n+        return repositories.clone();\n     }\n \n     /** Extra repositories for this loader\n@@ -564,7 +563,6 @@ public void init() {\n                 // Register ourself. The container must be a webapp\n                 try {\n                     StandardContext ctx=(StandardContext)container;\n-                    Engine eng=(Engine)ctx.getParent().getParent();\n                     String path = ctx.getPath();\n                     if (path.equals(\"\")) {\n                         path = \"/\";\n@@ -652,15 +650,13 @@ public void start() throws LifecycleException {\n \n             setPermissions();\n \n-            if (classLoader instanceof Lifecycle)\n-                ((Lifecycle) classLoader).start();\n+            ((Lifecycle) classLoader).start();\n \n             // Binding the Webapp class loader to the directory context\n-            DirContextURLStreamHandler.bind\n-                ((ClassLoader) classLoader, this.container.getResources());\n+            DirContextURLStreamHandler.bind(classLoader,\n+                    this.container.getResources());\n \n             StandardContext ctx=(StandardContext)container;\n-            Engine eng=(Engine)ctx.getParent().getParent();\n             String path = ctx.getPath();\n             if (path.equals(\"\")) {\n                 path = \"/\";\n@@ -703,13 +699,11 @@ public void stop() throws LifecycleException {\n         }\n \n         // Throw away our current class loader\n-        if (classLoader instanceof Lifecycle)\n-            ((Lifecycle) classLoader).stop();\n-        DirContextURLStreamHandler.unbind((ClassLoader) classLoader);\n+        ((Lifecycle) classLoader).stop();\n+        DirContextURLStreamHandler.unbind(classLoader);\n \n         try {\n             StandardContext ctx=(StandardContext)container;\n-            Engine eng=(Engine)ctx.getParent().getParent();\n             String path = ctx.getPath();\n             if (path.equals(\"\")) {\n                 path = \"/\";\n@@ -742,7 +736,6 @@ public void propertyChange(PropertyChangeEvent event) {\n         // Validate the source of this event\n         if (!(event.getSource() instanceof Context))\n             return;\n-        Context context = (Context) event.getSource();\n \n         // Process a relevant property change\n         if (event.getPropertyName().equals(\"reloadable\")) {\n@@ -767,15 +760,15 @@ public void propertyChange(PropertyChangeEvent event) {\n     private WebappClassLoader createClassLoader()\n         throws Exception {\n \n-        Class clazz = Class.forName(loaderClass);\n+        Class<?> clazz = Class.forName(loaderClass);\n         WebappClassLoader classLoader = null;\n \n         if (parentClassLoader == null) {\n             parentClassLoader = container.getParentClassLoader();\n         }\n-        Class[] argTypes = { ClassLoader.class };\n+        Class<?>[] argTypes = { ClassLoader.class };\n         Object[] args = { parentClassLoader };\n-        Constructor constr = clazz.getConstructor(argTypes);\n+        Constructor<?> constr = clazz.getConstructor(argTypes);\n         classLoader = (WebappClassLoader) constr.newInstance(args);\n \n         return classLoader;\n@@ -887,15 +880,15 @@ private void setRepositories() {\n         if (servletContext == null)\n             return;\n \n-        loaderRepositories=new ArrayList();\n+        loaderRepositories=new ArrayList<String>();\n         // Loading the work directory\n         File workDir =\n             (File) servletContext.getAttribute(Globals.WORK_DIR_ATTR);\n         if (workDir == null) {\n             log.info(\"No work dir for \" + servletContext);\n         }\n \n-        if( log.isDebugEnabled()) \n+        if( log.isDebugEnabled() && workDir != null) \n             log.debug(sm.getString(\"webappLoader.deploy\", workDir.getAbsolutePath()));\n \n         classLoader.setWorkDir(workDir);\n@@ -981,10 +974,11 @@ private void setRepositories() {\n \n             // Looking up directory /WEB-INF/lib in the context\n             try {\n-                NamingEnumeration enumeration = resources.listBindings(libPath);\n+                NamingEnumeration<Binding> enumeration =\n+                    resources.listBindings(libPath);\n                 while (enumeration.hasMoreElements()) {\n \n-                    Binding binding = (Binding) enumeration.nextElement();\n+                    Binding binding = enumeration.nextElement();\n                     String filename = libPath + \"/\" + binding.getName();\n                     if (!filename.endsWith(\".jar\"))\n                         continue;\n@@ -1139,10 +1133,9 @@ private boolean copyDir(DirContext srcDir, File destDir) {\n \n         try {\n \n-            NamingEnumeration enumeration = srcDir.list(\"\");\n+            NamingEnumeration<NameClassPair> enumeration = srcDir.list(\"\");\n             while (enumeration.hasMoreElements()) {\n-                NameClassPair ncPair =\n-                    (NameClassPair) enumeration.nextElement();\n+                NameClassPair ncPair = enumeration.nextElement();\n                 String name = ncPair.getName();\n                 Object object = srcDir.lookup(name);\n                 File currentFile = new File(destDir, name);\n@@ -1201,16 +1194,11 @@ private boolean copy(InputStream is, OutputStream os) {\n         org.apache.juli.logging.LogFactory.getLog( WebappLoader.class );\n \n     private ObjectName oname;\n-    private MBeanServer mserver;\n-    private String domain;\n     private ObjectName controller;\n \n     public ObjectName preRegister(MBeanServer server,\n                                   ObjectName name) throws Exception {\n         oname=name;\n-        mserver=server;\n-        domain=name.getDomain();\n-\n         return name;\n     }\n ",
                "deletions": 31
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "FIX possible NPE as Engine level configuration, as context dosen't exists!\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@712274 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/c29ffe9366baa21284d162091ad41b0df73d4e90",
        "parent": "https://github.com/apache/tomcat/commit/7f4db9f511ea98c2220c469c46306eb0c7924a91",
        "bug_id": "tomcat_292",
        "file": [
            {
                "sha": "0c17f36f0ed66018938015052c5128e4e6710f06",
                "filename": "java/org/apache/catalina/ha/tcp/ReplicationValve.java",
                "blob_url": "https://github.com/apache/tomcat/blob/c29ffe9366baa21284d162091ad41b0df73d4e90/java/org/apache/catalina/ha/tcp/ReplicationValve.java",
                "raw_url": "https://github.com/apache/tomcat/raw/c29ffe9366baa21284d162091ad41b0df73d4e90/java/org/apache/catalina/ha/tcp/ReplicationValve.java",
                "status": "modified",
                "changes": 36,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/ha/tcp/ReplicationValve.java?ref=c29ffe9366baa21284d162091ad41b0df73d4e90",
                "patch": "@@ -345,24 +345,26 @@ public void invoke(Request request, Response response)\n                 crossContextSessions.set(new ArrayList());\n             }\n             getNext().invoke(request, response);\n-            Manager manager = request.getContext().getManager();\n-            if (manager != null && manager instanceof ClusterManager) {\n-                ClusterManager clusterManager = (ClusterManager) manager;\n-                CatalinaCluster containerCluster = (CatalinaCluster) getContainer().getCluster();\n-                if (containerCluster == null) {\n-                    if (log.isWarnEnabled())\n-                        log.warn(sm.getString(\"ReplicationValve.nocluster\"));\n-                    return;\n+            if(context != null) {\n+                Manager manager = context.getManager();            \n+                if (manager != null && manager instanceof ClusterManager) {\n+                    ClusterManager clusterManager = (ClusterManager) manager;\n+                    CatalinaCluster containerCluster = (CatalinaCluster) getContainer().getCluster();\n+                    if (containerCluster == null) {\n+                        if (log.isWarnEnabled())\n+                            log.warn(sm.getString(\"ReplicationValve.nocluster\"));\n+                        return;\n+                    }\n+                    // valve cluster can access manager - other cluster handle replication \n+                    // at host level - hopefully!\n+                    if(containerCluster.getManager(clusterManager.getName()) == null)\n+                        return ;\n+                    if(containerCluster.hasMembers()) {\n+                        sendReplicationMessage(request, totalstart, isCrossContext, clusterManager, containerCluster);\n+                    } else {\n+                        resetReplicationRequest(request,isCrossContext);\n+                    }        \n                 }\n-                // valve cluster can access manager - other cluster handle replication \n-                // at host level - hopefully!\n-                if(containerCluster.getManager(clusterManager.getName()) == null)\n-                    return ;\n-                if(containerCluster.hasMembers()) {\n-                    sendReplicationMessage(request, totalstart, isCrossContext, clusterManager, containerCluster);\n-                } else {\n-                    resetReplicationRequest(request,isCrossContext);\n-                }        \n             }\n         } finally {\n             // Array must be remove: Current master request send endAccess at recycle. ",
                "deletions": 17
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=45591 - NPE on start-up failure in some cases\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@683982 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/38a62a63ee17672ec6de898b4b6b9eb3c6668a26",
        "parent": "https://github.com/apache/tomcat/commit/5bcc55f589f1bd7e6a4869eb61f2b7ab36f5cc03",
        "bug_id": "tomcat_293",
        "file": [
            {
                "sha": "079ee9f9693ac5d6c10c12853bf155c0670cd628",
                "filename": "java/org/apache/jk/server/JkMain.java",
                "blob_url": "https://github.com/apache/tomcat/blob/38a62a63ee17672ec6de898b4b6b9eb3c6668a26/java/org/apache/jk/server/JkMain.java",
                "raw_url": "https://github.com/apache/tomcat/raw/38a62a63ee17672ec6de898b4b6b9eb3c6668a26/java/org/apache/jk/server/JkMain.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jk/server/JkMain.java?ref=38a62a63ee17672ec6de898b4b6b9eb3c6668a26",
                "patch": "@@ -676,9 +676,12 @@ public void postDeregister() {\n     }\n \n     public void pause() throws Exception {\n-        for( int i=0; i<wEnv.getHandlerCount(); i++ ) {\n-            if( wEnv.getHandler(i) != null ) {\n-                wEnv.getHandler(i).pause();\n+        // wEnv sometime null at shutdown - bug45591\n+        if (wEnv != null) {\n+            for( int i=0; i<wEnv.getHandlerCount(); i++ ) {\n+                if( wEnv.getHandler(i) != null ) {\n+                    wEnv.getHandler(i).pause();\n+                }\n             }\n         }\n     }",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=42722\nPossible NPE in CGIServlet.java\nPatch provided by Nils Hammar\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@675751 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/d41f610b423a068cc3020c61a030e136b8de84fd",
        "parent": "https://github.com/apache/tomcat/commit/a594e32ce204e7cb91bfca4f8b68390613f2ceab",
        "bug_id": "tomcat_294",
        "file": [
            {
                "sha": "1de39acd17e6f2e99cc3bc25f6ae340286112ffa",
                "filename": "java/org/apache/catalina/servlets/CGIServlet.java",
                "blob_url": "https://github.com/apache/tomcat/blob/d41f610b423a068cc3020c61a030e136b8de84fd/java/org/apache/catalina/servlets/CGIServlet.java",
                "raw_url": "https://github.com/apache/tomcat/raw/d41f610b423a068cc3020c61a030e136b8de84fd/java/org/apache/catalina/servlets/CGIServlet.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/servlets/CGIServlet.java?ref=d41f610b423a068cc3020c61a030e136b8de84fd",
                "patch": "@@ -1728,8 +1728,10 @@ public void run () {\n                     }\n                 } //replacement for Process.waitFor()\n     \n-                // Close the output stream used\n-                cgiOutput.close();\n+                // Close the output stream if used\n+                if (cgiOutput != null) {\n+                    cgiOutput.close();\n+                }\n             }\n             catch (IOException e){\n                 log (\"Caught exception \" + e);",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix bug 45195. NPE when calling getAttribute(null).\nThe spec is unclear but this is a regression from 5.0.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@667604 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/9b7c3a1c6ac6e26a8e8fcdae2406fa1e1451f430",
        "parent": "https://github.com/apache/tomcat/commit/bc49ff4f8e799d741000604fe3557ad36ea7557d",
        "bug_id": "tomcat_295",
        "file": [
            {
                "sha": "3f9e4610f12222affa8c32f9f1bdff863c15035a",
                "filename": "java/org/apache/catalina/session/StandardSession.java",
                "blob_url": "https://github.com/apache/tomcat/blob/9b7c3a1c6ac6e26a8e8fcdae2406fa1e1451f430/java/org/apache/catalina/session/StandardSession.java",
                "raw_url": "https://github.com/apache/tomcat/raw/9b7c3a1c6ac6e26a8e8fcdae2406fa1e1451f430/java/org/apache/catalina/session/StandardSession.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/session/StandardSession.java?ref=9b7c3a1c6ac6e26a8e8fcdae2406fa1e1451f430",
                "patch": "@@ -1032,6 +1032,8 @@ public Object getAttribute(String name) {\n             throw new IllegalStateException\n                 (sm.getString(\"standardSession.getAttribute.ise\"));\n \n+        if (name == null) return null;\n+\n         return (attributes.get(name));\n \n     }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Revert previous patch to fix obvious potential NPE as pointed out by Remy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@650645 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/a6e47de005655732d330630d0caa93a3ef38eabc",
        "parent": "https://github.com/apache/tomcat/commit/0ea3e15e3ab543c35bb6f588549dcd41566df9d3",
        "bug_id": "tomcat_296",
        "file": [
            {
                "sha": "c473590a0abcdc0bd4171fe0ce76f6ffcb032273",
                "filename": "java/org/apache/catalina/core/StandardContextValve.java",
                "blob_url": "https://github.com/apache/tomcat/blob/a6e47de005655732d330630d0caa93a3ef38eabc/java/org/apache/catalina/core/StandardContextValve.java",
                "raw_url": "https://github.com/apache/tomcat/raw/a6e47de005655732d330630d0caa93a3ef38eabc/java/org/apache/catalina/core/StandardContextValve.java",
                "status": "modified",
                "changes": 7,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/StandardContextValve.java?ref=a6e47de005655732d330630d0caa93a3ef38eabc",
                "patch": "@@ -136,13 +136,6 @@ public final void invoke(Request request, Response response)\n \n         // Select the Wrapper to be used for this Request\n         Wrapper wrapper = request.getWrapper();\n-\n-        if (wrapper.isUnavailable()) {\n-            // May be as a result of a reload\n-            // Try and find the new wrapper\n-            wrapper = (Wrapper) container.findChild(wrapper.getName());\n-        }\n-\n         if (wrapper == null) {\n             String requestURI = request.getDecodedRequestURI();\n             notFound(requestURI, response);",
                "deletions": 7
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix bug 44428. Make sure m is not null to prevent NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@646574 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/0035fd4284e9da69dba27ef7e6d5d3ac8cb6d9c7",
        "parent": "https://github.com/apache/tomcat/commit/9640fc401bc6112b22a24a4b8b0c1931d51f61c4",
        "bug_id": "tomcat_297",
        "file": [
            {
                "sha": "de60ddb015e05bc9323bed3c24a519772ffde920",
                "filename": "java/org/apache/el/lang/FunctionMapperImpl.java",
                "blob_url": "https://github.com/apache/tomcat/blob/0035fd4284e9da69dba27ef7e6d5d3ac8cb6d9c7/java/org/apache/el/lang/FunctionMapperImpl.java",
                "raw_url": "https://github.com/apache/tomcat/raw/0035fd4284e9da69dba27ef7e6d5d3ac8cb6d9c7/java/org/apache/el/lang/FunctionMapperImpl.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/el/lang/FunctionMapperImpl.java?ref=0035fd4284e9da69dba27ef7e6d5d3ac8cb6d9c7",
                "patch": "@@ -120,6 +120,8 @@ public Function() {\n         public void writeExternal(ObjectOutput out) throws IOException {\n             out.writeUTF((this.prefix != null) ? this.prefix : \"\");\n             out.writeUTF(this.localName);\n+            // make sure m isn't null\n+            getMethod();\n             out.writeUTF((this.owner != null) ? \n                      this.owner : \n                      this.m.getDeclaringClass().getName());",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix possible NPE when no ROOT application is deployed in fix for bug 43839.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@609003 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/7196ac08d6568554f80db3ee32b9dad14c78fad3",
        "parent": "https://github.com/apache/tomcat/commit/32f20e8f1a63f22f7e484e885df0c8d6c37302cd",
        "bug_id": "tomcat_298",
        "file": [
            {
                "sha": "e3ce60b5e1b031cc02a2ef5a6bc80ad16197221f",
                "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
                "blob_url": "https://github.com/apache/tomcat/blob/7196ac08d6568554f80db3ee32b9dad14c78fad3/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "raw_url": "https://github.com/apache/tomcat/raw/7196ac08d6568554f80db3ee32b9dad14c78fad3/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/CoyoteAdapter.java?ref=7196ac08d6568554f80db3ee32b9dad14c78fad3",
                "patch": "@@ -551,7 +551,8 @@ protected void parseSessionCookiesId(org.apache.coyote.Request req, Request requ\n         // context, don't go looking for a session ID in a cookie as a cookie\n         // from a parent context with a session ID may be present which would\n         // overwrite the valid session ID encoded in the URL\n-        if (!((Context)request.getMappingData().context).getCookies())\n+        Context context = (Context) request.getMappingData().context;\n+        if (context != null && !context.getCookies())\n             return;\n         \n         // Parse session id from cookies",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix bug 43758. Return empty string rather than null to prevent the NPEs that happen otherwise.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@607903 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/61ce1a32d4066fc4d779fcbe28d924ed1fdb3c14",
        "parent": "https://github.com/apache/tomcat/commit/5c8c055bca8aedcaa9a51479ea398e3db9ebdc23",
        "bug_id": "tomcat_299",
        "file": [
            {
                "sha": "f4a8d8f8762f6c90a80e3dee1247e2c9bd809ee3",
                "filename": "java/org/apache/jasper/compiler/Node.java",
                "blob_url": "https://github.com/apache/tomcat/blob/61ce1a32d4066fc4d779fcbe28d924ed1fdb3c14/java/org/apache/jasper/compiler/Node.java",
                "raw_url": "https://github.com/apache/tomcat/raw/61ce1a32d4066fc4d779fcbe28d924ed1fdb3c14/java/org/apache/jasper/compiler/Node.java",
                "status": "modified",
                "changes": 15,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/Node.java?ref=61ce1a32d4066fc4d779fcbe28d924ed1fdb3c14",
                "patch": "@@ -831,12 +831,17 @@ public ScriptingElement(String qName, String localName,\n          */\n         public String getText() {\n             String ret = text;\n-            if ((ret == null) && (body != null)) {\n-                StringBuffer buf = new StringBuffer();\n-                for (int i = 0; i < body.size(); i++) {\n-                    buf.append(body.getNode(i).getText());\n+            if (ret == null) {\n+                if (body != null) {\n+                    StringBuffer buf = new StringBuffer();\n+                    for (int i = 0; i < body.size(); i++) {\n+                        buf.append(body.getNode(i).getText());\n+                    }\n+                    ret = buf.toString();\n+                } else {\n+                    // Nulls cause NPEs further down the line\n+                    ret = \"\";\n                 }\n-                ret = buf.toString();\n             }\n             return ret;\n         }",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "bug 41797: CNFE/NPE thrown from function mapper when externalizing\nPatch by Tuomas Kiviaho- tuomas.kiviahos at ikis fi\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@578466 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/4461a96d8bb2c2f6132e5f370cf0d47ad18c7adb",
        "parent": "https://github.com/apache/tomcat/commit/5aed2f54983fc39ea488e9a199f895316b2510d9",
        "bug_id": "tomcat_300",
        "file": [
            {
                "sha": "a101994f92eeae7333c5464164f9e905921eda52",
                "filename": "java/org/apache/el/lang/FunctionMapperImpl.java",
                "blob_url": "https://github.com/apache/tomcat/blob/4461a96d8bb2c2f6132e5f370cf0d47ad18c7adb/java/org/apache/el/lang/FunctionMapperImpl.java",
                "raw_url": "https://github.com/apache/tomcat/raw/4461a96d8bb2c2f6132e5f370cf0d47ad18c7adb/java/org/apache/el/lang/FunctionMapperImpl.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/el/lang/FunctionMapperImpl.java?ref=4461a96d8bb2c2f6132e5f370cf0d47ad18c7adb",
                "patch": "@@ -144,7 +144,7 @@ public void readExternal(ObjectInput in) throws IOException,\n         public Method getMethod() {\n             if (this.m == null) {\n                 try {\n-                    Class t = Class.forName(this.owner);\n+                    Class t = ReflectionUtil.forName(this.owner);\n                     Class[] p = ReflectionUtil.toTypeArray(this.types);\n                     this.m = t.getMethod(this.name, p);\n                 } catch (Exception e) {",
                "deletions": 1
            },
            {
                "sha": "66ce17dfcaa38d412cdca0bebf51cd06c85b656a",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/4461a96d8bb2c2f6132e5f370cf0d47ad18c7adb/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/4461a96d8bb2c2f6132e5f370cf0d47ad18c7adb/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=4461a96d8bb2c2f6132e5f370cf0d47ad18c7adb",
                "patch": "@@ -98,6 +98,10 @@\n         <bug>43338</bug>: Support '*' servlet-name mapping at filter-mapping.\n         Patch provided by Keiichi Fujino. (pero)\n       </fix>\n+      <fix>\n+        <bug>41797</bug>: CNFE/NPE thrown from function mapper when externalizing\n+        Patch by Tuomas Kiviaho- tuomas.kiviahos at ikis fi\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Port fix for 39212. Possible NPE and redundant code.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@561077 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/8aa247eb346880dde8b6a84865f5689e955190f9",
        "parent": "https://github.com/apache/tomcat/commit/6f210e6baa86c3d8dd557fd0aebab851dc9640a0",
        "bug_id": "tomcat_301",
        "file": [
            {
                "sha": "3e5023a9d5d1db322c0a1b8f436a87582835f450",
                "filename": "webapps/examples/WEB-INF/classes/sessions/DummyCart.java",
                "blob_url": "https://github.com/apache/tomcat/blob/8aa247eb346880dde8b6a84865f5689e955190f9/webapps/examples/WEB-INF/classes/sessions/DummyCart.java",
                "raw_url": "https://github.com/apache/tomcat/raw/8aa247eb346880dde8b6a84865f5689e955190f9/webapps/examples/WEB-INF/classes/sessions/DummyCart.java",
                "status": "modified",
                "changes": 8,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/examples/WEB-INF/classes/sessions/DummyCart.java?ref=8aa247eb346880dde8b6a84865f5689e955190f9",
                "patch": "@@ -16,7 +16,6 @@\n */\n package sessions;\n \n-import javax.servlet.http.*;\n import java.util.Vector;\n \n public class DummyCart {\n@@ -46,13 +45,10 @@ public void setSubmit(String s) {\n         return s;\n     }\n     \n-    public void processRequest(HttpServletRequest request) {\n+    public void processRequest() {\n         // null value for submit - user hit enter instead of clicking on \n         // \"add\" or \"remove\"\n-        if (submit == null) \n-            addItem(item);\n-\n-        if (submit.equals(\"add\"))\n+        if (submit == null || submit.equals(\"add\"))\n             addItem(item);\n         else if (submit.equals(\"remove\")) \n             removeItem(item);",
                "deletions": 6
            },
            {
                "sha": "187d50182713dee56353f8337368daec6d75e68e",
                "filename": "webapps/examples/jsp/sessions/carts.jsp",
                "blob_url": "https://github.com/apache/tomcat/blob/8aa247eb346880dde8b6a84865f5689e955190f9/webapps/examples/jsp/sessions/carts.jsp",
                "raw_url": "https://github.com/apache/tomcat/raw/8aa247eb346880dde8b6a84865f5689e955190f9/webapps/examples/jsp/sessions/carts.jsp",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/examples/jsp/sessions/carts.jsp?ref=8aa247eb346880dde8b6a84865f5689e955190f9",
                "patch": "@@ -20,7 +20,7 @@\n \n <jsp:setProperty name=\"cart\" property=\"*\" />\n <%\n-\tcart.processRequest(request);\n+\tcart.processRequest();\n %>\n \n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Port fix for bug 42547. Fix NPE when a ResourceLink tries to override an env-entry.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@550048 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/53add24c46d3298b5236d9285a13745c105162a2",
        "parent": "https://github.com/apache/tomcat/commit/428b4716f45fe8705f2a5ea6b0bda0f8f94d76c4",
        "bug_id": "tomcat_302",
        "file": [
            {
                "sha": "cff59666df054788be9b79ef0731ac5f933e53c0",
                "filename": "java/org/apache/catalina/deploy/NamingResources.java",
                "blob_url": "https://github.com/apache/tomcat/blob/53add24c46d3298b5236d9285a13745c105162a2/java/org/apache/catalina/deploy/NamingResources.java",
                "raw_url": "https://github.com/apache/tomcat/raw/53add24c46d3298b5236d9285a13745c105162a2/java/org/apache/catalina/deploy/NamingResources.java",
                "status": "modified",
                "changes": 24,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/deploy/NamingResources.java?ref=53add24c46d3298b5236d9285a13745c105162a2",
                "patch": "@@ -25,6 +25,8 @@\n import java.util.Hashtable;\n import java.io.Serializable;\n \n+import org.apache.catalina.ServerFactory;\n+\n \n /**\n  * Holds and manages the naming resources defined in the J2EE Enterprise \n@@ -191,9 +193,27 @@ public void addEjb(ContextEjb ejb) {\n     public void addEnvironment(ContextEnvironment environment) {\n \n         if (entries.containsKey(environment.getName())) {\n-            if (findEnvironment(environment.getName()).getOverride()) {\n-                removeEnvironment(environment.getName());\n+            ContextEnvironment ce = findEnvironment(environment.getName());\n+            ContextResourceLink rl = findResourceLink(environment.getName());\n+            if (ce != null) {\n+                if (ce.getOverride()) {\n+                    removeEnvironment(environment.getName());\n+                } else {\n+                    return;\n+                }\n+            } else if (rl != null) {\n+                // Link. Need to look at the global resources\n+                NamingResources global =\n+                    ServerFactory.getServer().getGlobalNamingResources();\n+                if (global.findEnvironment(rl.getGlobal()) != null) {\n+                    if (global.findEnvironment(rl.getGlobal()).getOverride()) {\n+                        removeResourceLink(environment.getName());\n+                    } else {\n+                        return;\n+                    }\n+                }\n             } else {\n+                // It exists but it isn't an env or a res link...\n                 return;\n             }\n         }",
                "deletions": 2
            },
            {
                "sha": "2b7ad50a9bbe0f468c3c2d432a3cc5f4c7c56628",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/53add24c46d3298b5236d9285a13745c105162a2/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/53add24c46d3298b5236d9285a13745c105162a2/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=53add24c46d3298b5236d9285a13745c105162a2",
                "patch": "@@ -51,6 +51,10 @@\n         Fix XSS security vulnerability (CVE-2007-2450) in the Manager and Host\n         Manager. Reported by Daiki Fukumori. (markt)\n       </fix>\n+      <fix>\n+        <bug>42547</bug>: Fix NPE when a ResourceLink in context.xml tries to\n+        override an env-entry in web.xml.\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Jasper\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "- NPE check (when using JMX, if I remember correctly).\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@540979 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/536bff44e288a599f07c77f5c455f546f15eeffe",
        "parent": "https://github.com/apache/tomcat/commit/0ea4c7cb5b91cc8ad0ab9ee16fad676d5cad48de",
        "bug_id": "tomcat_303",
        "file": [
            {
                "sha": "b5b218419bc63ad44290afb5b28e96f2a9b0b2da",
                "filename": "java/org/apache/catalina/core/StandardContext.java",
                "blob_url": "https://github.com/apache/tomcat/blob/536bff44e288a599f07c77f5c455f546f15eeffe/java/org/apache/catalina/core/StandardContext.java",
                "raw_url": "https://github.com/apache/tomcat/raw/536bff44e288a599f07c77f5c455f546f15eeffe/java/org/apache/catalina/core/StandardContext.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/StandardContext.java?ref=536bff44e288a599f07c77f5c455f546f15eeffe",
                "patch": "@@ -1875,6 +1875,9 @@ public void setCharsetMapperClass(String mapper) {\n      * @return The work path\n      */ \n     public String getWorkPath() {\n+        if (getWorkDir() == null) {\n+            return null;\n+        }\n         File workDir = new File(getWorkDir());\n         if (!workDir.isAbsolute()) {\n             File catalinaHome = engineBase();",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "bug 42444: prevent NPE \nPatch provided by Nils Hammar (funkman)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@539787 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/776736fe577b13fc51d3e155e14d0aaf201915cd",
        "parent": "https://github.com/apache/tomcat/commit/59ef801965220af88f90e4f8bd8350fd8753e210",
        "bug_id": "tomcat_304",
        "file": [
            {
                "sha": "3556e74b8ef0f07bda3be77854ff061c224f99c7",
                "filename": "java/org/apache/catalina/valves/AccessLogValve.java",
                "blob_url": "https://github.com/apache/tomcat/blob/776736fe577b13fc51d3e155e14d0aaf201915cd/java/org/apache/catalina/valves/AccessLogValve.java",
                "raw_url": "https://github.com/apache/tomcat/raw/776736fe577b13fc51d3e155e14d0aaf201915cd/java/org/apache/catalina/valves/AccessLogValve.java",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/valves/AccessLogValve.java?ref=776736fe577b13fc51d3e155e14d0aaf201915cd",
                "patch": "@@ -1035,7 +1035,6 @@ public void addElement(StringBuffer buf, Date date, Request request,\n                 buf.append(request.getProtocol());\n             } else {\n                 buf.append(\"- - \");\n-                buf.append(request.getProtocol());\n             }\n         }\n     }",
                "deletions": 1
            },
            {
                "sha": "dcf8dec913867568063c3f6e7f177c616101e813",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/776736fe577b13fc51d3e155e14d0aaf201915cd/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/776736fe577b13fc51d3e155e14d0aaf201915cd/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=776736fe577b13fc51d3e155e14d0aaf201915cd",
                "patch": "@@ -17,6 +17,10 @@\n <section name=\"Tomcat 6.0.14 (remm)\">\n   <subsection name=\"Catalina\">\n     <changelog>\n+      <fix>\n+         <bug>42444</bug>: prevent NPE \n+         Patch provided by Nils Hammar (funkman)\n+      </fix>\n       <fix>\n          <bug>42361</bug>: Handle multi-part forms when saving requests during\n          FORM authentication process. Patch provided by Peter Runge. (markt)",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Prevent NPE on a key that was cancelled by the poller\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@528528 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/37b5f5be0a53a5d163162cd925f598677da36946",
        "parent": "https://github.com/apache/tomcat/commit/851b1af3b55fa9f2fd802e3b8b6db45df86ac262",
        "bug_id": "tomcat_305",
        "file": [
            {
                "sha": "1bd8a1eaa56db44a2c1a39d3ca3cef4054fc1602",
                "filename": "java/org/apache/tomcat/util/net/NioEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/37b5f5be0a53a5d163162cd925f598677da36946/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/37b5f5be0a53a5d163162cd925f598677da36946/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/NioEndpoint.java?ref=37b5f5be0a53a5d163162cd925f598677da36946",
                "patch": "@@ -1862,7 +1862,7 @@ public void run() {\n                         SelectionKey key = socket.getIOChannel().keyFor(socket.getPoller().getSelector());\n                         int handshake = -1;\n                         try {\n-                            handshake = socket.handshake(key.isReadable(), key.isWritable());\n+                            if (key!=null) handshake = socket.handshake(key.isReadable(), key.isWritable());\n                         }catch ( IOException x ) {\n                             handshake = -1;\n                             if ( log.isDebugEnabled() ) log.debug(\"Error during SSL handshake\",x);",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "- Fix NPE on isValid for an expired session when activity check is enabled.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@465195 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/9c6f1b7af968648eaa8f69312521d0fcc42ccaa2",
        "parent": "https://github.com/apache/tomcat/commit/9cb5aff441ce67c3bd907c62ddd93b9348477e75",
        "bug_id": "tomcat_306",
        "file": [
            {
                "sha": "fcec6ee9a21a285714e9c3e4d3dc8111ba78acde",
                "filename": "java/org/apache/catalina/session/StandardSession.java",
                "blob_url": "https://github.com/apache/tomcat/blob/9c6f1b7af968648eaa8f69312521d0fcc42ccaa2/java/org/apache/catalina/session/StandardSession.java",
                "raw_url": "https://github.com/apache/tomcat/raw/9c6f1b7af968648eaa8f69312521d0fcc42ccaa2/java/org/apache/catalina/session/StandardSession.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/session/StandardSession.java?ref=9c6f1b7af968648eaa8f69312521d0fcc42ccaa2",
                "patch": "@@ -710,7 +710,9 @@ public void expire(boolean notify) {\n                     }\n                 }\n             }\n-            accessCount = null;\n+            if (ACTIVITY_CHECK) {\n+                accessCount.set(0);\n+            }\n             setValid(false);\n \n             /*",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "- Add the Jasper listener in the config.\n- Fix (harmless) NPE when request processing doesn't proceed (ex: empty path).\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@432584 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/bcbfbe89fc649c69f14610dea7dace80654f14ec",
        "parent": "https://github.com/apache/tomcat/commit/7cebaf4bd0856432505c81959424db3a3fec94cf",
        "bug_id": "tomcat_307",
        "file": [
            {
                "sha": "671e8eeced754ade12afd97483f17582813fbae7",
                "filename": "conf/server.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/bcbfbe89fc649c69f14610dea7dace80654f14ec/conf/server.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/bcbfbe89fc649c69f14610dea7dace80654f14ec/conf/server.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/conf/server.xml?ref=bcbfbe89fc649c69f14610dea7dace80654f14ec",
                "patch": "@@ -15,6 +15,7 @@\n   <!-- Comment these entries out to disable JMX MBeans support used for the \n        administration web application -->\n   <Listener className=\"org.apache.catalina.core.AprLifecycleListener\" />\n+  <Listener className=\"org.apache.catalina.core.JasperListener\" />\n   <Listener className=\"org.apache.catalina.mbeans.ServerLifecycleListener\" />\n   <Listener className=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\" />\n   <!--<Listener className=\"org.apache.catalina.storeconfig.StoreConfigLifecycleListener\"/>-->",
                "deletions": 0
            },
            {
                "sha": "70e202b1fd429f0c8801efcfbdf4983305ce7561",
                "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
                "blob_url": "https://github.com/apache/tomcat/blob/bcbfbe89fc649c69f14610dea7dace80654f14ec/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "raw_url": "https://github.com/apache/tomcat/raw/bcbfbe89fc649c69f14610dea7dace80654f14ec/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "status": "modified",
                "changes": 16,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/CoyoteAdapter.java?ref=bcbfbe89fc649c69f14610dea7dace80654f14ec",
                "patch": "@@ -218,16 +218,18 @@ public void service(org.apache.coyote.Request req,\n \n             // Parse and set Catalina and configuration specific \n             // request parameters\n-            if ( postParseRequest(req, request, res, response) ) {\n+            if (postParseRequest(req, request, res, response)) {\n+\n                 // Calling the container\n                 connector.getContainer().getPipeline().getFirst().invoke(request, response);\n-            }\n \n-            if (request.getWrapper().getServlet() instanceof CometProcessor \n-                    && !response.isClosed()\n-                    && req.getAttribute(\"org.apache.tomcat.comet.support\") == Boolean.TRUE) {\n-                comet = true;\n-                res.action(ActionCode.ACTION_COMET_BEGIN, null);\n+                if (request.getWrapper().getServlet() instanceof CometProcessor \n+                        && !response.isClosed()\n+                        && req.getAttribute(\"org.apache.tomcat.comet.support\") == Boolean.TRUE) {\n+                    comet = true;\n+                    res.action(ActionCode.ACTION_COMET_BEGIN, null);\n+                }\n+\n             }\n \n             if (!comet) {",
                "deletions": 7
            },
            {
                "sha": "425e7d82882e2f6d443b787ce83948b330b4a5e4",
                "filename": "res/confinstall/server_1.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/bcbfbe89fc649c69f14610dea7dace80654f14ec/res/confinstall/server_1.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/bcbfbe89fc649c69f14610dea7dace80654f14ec/res/confinstall/server_1.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/res/confinstall/server_1.xml?ref=bcbfbe89fc649c69f14610dea7dace80654f14ec",
                "patch": "@@ -15,6 +15,7 @@\n   <!-- Comment these entries out to disable JMX MBeans support used for the \n        administration web application -->\n   <Listener className=\"org.apache.catalina.core.AprLifecycleListener\" />\n+  <Listener className=\"org.apache.catalina.core.JasperListener\" />\n   <Listener className=\"org.apache.catalina.mbeans.ServerLifecycleListener\" />\n   <Listener className=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\" />\n   <!--<Listener className=\"org.apache.catalina.storeconfig.StoreConfigLifecycleListener\"/>-->",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix an NPE in the Manager web application when displaying ciphers for APR/native\nAlign OpenSsl's handling of enabled ciphers/protocols with JSSE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1727667 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/530186ab0cb166e825405b64f3c91a712a6c0544",
        "parent": "https://github.com/apache/tomcat/commit/14b7d11c511cdc0f73102d6efd6373ccac320a90",
        "bug_id": "tomcat_308",
        "file": [
            {
                "sha": "1b179575a9e48c3a1c0c42ebd0f937b2af2719da",
                "filename": "java/org/apache/tomcat/util/net/AprEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/530186ab0cb166e825405b64f3c91a712a6c0544/java/org/apache/tomcat/util/net/AprEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/530186ab0cb166e825405b64f3c91a712a6c0544/java/org/apache/tomcat/util/net/AprEndpoint.java",
                "status": "modified",
                "changes": 28,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/AprEndpoint.java?ref=530186ab0cb166e825405b64f3c91a712a6c0544",
                "patch": "@@ -24,7 +24,9 @@\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.Executor;\n import java.util.concurrent.RejectedExecutionException;\n@@ -54,6 +56,7 @@\n import org.apache.tomcat.util.net.AbstractEndpoint.Acceptor.AcceptorState;\n import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;\n import org.apache.tomcat.util.net.SSLHostConfig.Type;\n+import org.apache.tomcat.util.net.openssl.OpenSSLEngine;\n \n \n /**\n@@ -346,13 +349,32 @@ public void bind() throws Exception {\n         if (isSSLEnabled()) {\n             for (SSLHostConfig sslHostConfig : sslHostConfigs.values()) {\n \n-                for (SSLHostConfigCertificate certificate : sslHostConfig.getCertificates(true)) {\n+                Set<SSLHostConfigCertificate> certificates = sslHostConfig.getCertificates(true);\n+                boolean firstCertificate = true;\n+                for (SSLHostConfigCertificate certificate : certificates) {\n                     if (SSLHostConfig.adjustRelativePath(certificate.getCertificateFile()) == null) {\n                         // This is required\n                         throw new Exception(sm.getString(\"endpoint.apr.noSslCertFile\"));\n                     }\n+                    if (firstCertificate) {\n+                        // TODO: Duplicates code in SSLUtilBase. Consider\n+                        //       refactoring to reduce duplication\n+                        firstCertificate = false;\n+                        // Configure the enabled protocols\n+                        List<String> enabledProtocols = SSLUtilBase.getEnabled(\"protocols\", log,\n+                                true, sslHostConfig.getProtocols(),\n+                                OpenSSLEngine.IMPLEMENTED_PROTOCOLS_SET);\n+                        sslHostConfig.setEnabledProtocols(\n+                                enabledProtocols.toArray(new String[enabledProtocols.size()]));\n+                        // Configure the enabled ciphers\n+                        List<String> enabledCiphers = SSLUtilBase.getEnabled(\"ciphers\", log,\n+                                false, sslHostConfig.getJsseCipherNames(),\n+                                OpenSSLEngine.AVAILABLE_CIPHER_SUITES);\n+                        sslHostConfig.setEnabledCiphers(\n+                                enabledCiphers.toArray(new String[enabledCiphers.size()]));\n+                    }\n                 }\n-                if (sslHostConfig.getCertificates().size() > 2) {\n+                if (certificates.size() > 2) {\n                     // TODO: Can this limitation be removed?\n                     throw new Exception(sm.getString(\"endpoint.apr.tooManyCertFiles\"));\n                 }\n@@ -363,7 +385,7 @@ public void bind() throws Exception {\n                     // Native fallback used if protocols=\"\"\n                     value = SSL.SSL_PROTOCOL_ALL;\n                 } else {\n-                    for (String protocol : sslHostConfig.getProtocols()) {\n+                    for (String protocol : sslHostConfig.getEnabledProtocols()) {\n                         if (Constants.SSL_PROTO_SSLv2Hello.equalsIgnoreCase(protocol)) {\n                             // NO-OP. OpenSSL always supports SSLv2Hello\n                         } else if (Constants.SSL_PROTO_SSLv2.equalsIgnoreCase(protocol)) {",
                "deletions": 3
            },
            {
                "sha": "f4dd847a60fb9eb2086d785672bdfc02b0577d41",
                "filename": "java/org/apache/tomcat/util/net/SSLUtilBase.java",
                "blob_url": "https://github.com/apache/tomcat/blob/530186ab0cb166e825405b64f3c91a712a6c0544/java/org/apache/tomcat/util/net/SSLUtilBase.java",
                "raw_url": "https://github.com/apache/tomcat/raw/530186ab0cb166e825405b64f3c91a712a6c0544/java/org/apache/tomcat/util/net/SSLUtilBase.java",
                "status": "modified",
                "changes": 16,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/SSLUtilBase.java?ref=530186ab0cb166e825405b64f3c91a712a6c0544",
                "patch": "@@ -45,19 +45,19 @@ protected SSLUtilBase(SSLHostConfigCertificate certificate) {\n         Set<String> configuredProtocols = sslHostConfig.getProtocols();\n         Set<String> implementedProtocols = getImplementedProtocols();\n         List<String> enabledProtocols =\n-                getEnabled(\"protocols\", true, configuredProtocols, implementedProtocols);\n+                getEnabled(\"protocols\", getLog(), true, configuredProtocols, implementedProtocols);\n         this.enabledProtocols = enabledProtocols.toArray(new String[enabledProtocols.size()]);\n \n         // Calculate the enabled ciphers\n         List<String> configuredCiphers = sslHostConfig.getJsseCipherNames();\n         Set<String> implementedCiphers = getImplementedCiphers();\n         List<String> enabledCiphers =\n-                getEnabled(\"ciphers\", false, configuredCiphers, implementedCiphers);\n+                getEnabled(\"ciphers\", getLog(), false, configuredCiphers, implementedCiphers);\n         this.enabledCiphers = enabledCiphers.toArray(new String[enabledCiphers.size()]);\n     }\n \n \n-    private <T> List<T> getEnabled(String name, boolean warnOnSkip, Collection<T> configured,\n+    static <T> List<T> getEnabled(String name, Log log, boolean warnOnSkip, Collection<T> configured,\n             Collection<T> implemented) {\n \n         List<T> enabled = new ArrayList<>();\n@@ -80,19 +80,19 @@ protected SSLUtilBase(SSLHostConfigCertificate certificate) {\n                 throw new IllegalArgumentException(\n                         sm.getString(\"sslUtilBase.noneSupported\", name, configured));\n             }\n-            if (getLog().isDebugEnabled()) {\n-                getLog().debug(sm.getString(\"sslUtilBase.active\", name, enabled));\n+            if (log.isDebugEnabled()) {\n+                log.debug(sm.getString(\"sslUtilBase.active\", name, enabled));\n             }\n-            if (getLog().isDebugEnabled() || warnOnSkip) {\n+            if (log.isDebugEnabled() || warnOnSkip) {\n                 if (enabled.size() != configured.size()) {\n                     List<T> skipped = new ArrayList<>();\n                     skipped.addAll(configured);\n                     skipped.removeAll(enabled);\n                     String msg = sm.getString(\"sslUtilBase.skipped\", name, skipped);\n                     if (warnOnSkip) {\n-                        getLog().warn(msg);\n+                        log.warn(msg);\n                     } else {\n-                        getLog().debug(msg);\n+                        log.debug(msg);\n                     }\n                 }\n             }",
                "deletions": 8
            },
            {
                "sha": "cd5a690dde0c5ecdaad26c39a8172e145ca64733",
                "filename": "java/org/apache/tomcat/util/net/openssl/OpenSSLEngine.java",
                "blob_url": "https://github.com/apache/tomcat/blob/530186ab0cb166e825405b64f3c91a712a6c0544/java/org/apache/tomcat/util/net/openssl/OpenSSLEngine.java",
                "raw_url": "https://github.com/apache/tomcat/raw/530186ab0cb166e825405b64f3c91a712a6c0544/java/org/apache/tomcat/util/net/openssl/OpenSSLEngine.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/openssl/OpenSSLEngine.java?ref=530186ab0cb166e825405b64f3c91a712a6c0544",
                "patch": "@@ -68,7 +68,7 @@\n     private static final SSLException ENGINE_CLOSED = new SSLException(sm.getString(\"engine.engineClosed\"));\n     private static final SSLException ENCRYPTED_PACKET_OVERSIZED = new SSLException(sm.getString(\"engine.oversizedPacket\"));\n \n-    protected static final Set<String> AVAILABLE_CIPHER_SUITES;\n+    public static final Set<String> AVAILABLE_CIPHER_SUITES;\n \n     static {\n         final Set<String> availableCipherSuites = new LinkedHashSet<>(128);\n@@ -122,8 +122,8 @@\n         Constants.SSL_PROTO_TLSv1_1,\n         Constants.SSL_PROTO_TLSv1_2\n     };\n-    protected static final Set<String> IMPLEMENTED_PROTOCOLS_SET =\n-            new HashSet<>(Arrays.asList(IMPLEMENTED_PROTOCOLS));\n+    public static final Set<String> IMPLEMENTED_PROTOCOLS_SET =\n+            Collections.unmodifiableSet(new HashSet<>(Arrays.asList(IMPLEMENTED_PROTOCOLS)));\n \n     // Header (5) + Data (2^14) + Compression (1024) + Encryption (1024) + MAC (20) + Padding (256)\n     static final int MAX_ENCRYPTED_PACKET_LENGTH = MAX_CIPHERTEXT_LENGTH + 5 + 20 + 256;",
                "deletions": 3
            },
            {
                "sha": "592f0e9c269ebe1c536156162b4246d83b7bb602",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/530186ab0cb166e825405b64f3c91a712a6c0544/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/530186ab0cb166e825405b64f3c91a712a6c0544/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=530186ab0cb166e825405b64f3c91a712a6c0544",
                "patch": "@@ -78,6 +78,18 @@\n       </fix>\n     </changelog>\n   </subsection>\n+  <subsection name=\"Coyote\">\n+    <changelog>\n+      <fix>\n+        Correct a regression in the connector refactoring in 9.0.0.M2 that broke\n+        TLS support for the APR/native connector. (remm)\n+      </fix>\n+      <fix>\n+        Correct an NPE when listing the enabled ciphers (e.g. via the Manager\n+        web application) for a TLS enabled APR/native connector. (markt)\n+      </fix>\n+    </changelog>\n+  </subsection>\n </section>\n <section name=\"Tomcat 9.0.0.M2\" rtext=\"Voting in progress\">\n   <subsection name=\"Catalina\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Store.load() implementations assume (in places) that getManager().getContext() always returns a non-null and we haven't had reports of NPEs so make the assumption consistently throughout the method.\nAdd a local reference to the Context's logger to shorten some of the logging lines\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1723736 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/2cd5fd92c0a357ec43791237c4ba5264e7d35c47",
        "parent": "https://github.com/apache/tomcat/commit/283a9b6d3bfaa8b7418aff149a78f6fbcd06fad5",
        "bug_id": "tomcat_309",
        "file": [
            {
                "sha": "1146d0c3c44fc5266db44f9afea6fc5641aefd1f",
                "filename": "java/org/apache/catalina/session/FileStore.java",
                "blob_url": "https://github.com/apache/tomcat/blob/2cd5fd92c0a357ec43791237c4ba5264e7d35c47/java/org/apache/catalina/session/FileStore.java",
                "raw_url": "https://github.com/apache/tomcat/raw/2cd5fd92c0a357ec43791237c4ba5264e7d35c47/java/org/apache/catalina/session/FileStore.java",
                "status": "modified",
                "changes": 19,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/session/FileStore.java?ref=2cd5fd92c0a357ec43791237c4ba5264e7d35c47",
                "patch": "@@ -33,6 +33,7 @@\n import org.apache.catalina.Loader;\n import org.apache.catalina.Session;\n import org.apache.catalina.util.CustomObjectInputStream;\n+import org.apache.juli.logging.Log;\n \n /**\n  * Concrete implementation of the <b>Store</b> interface that utilizes\n@@ -217,9 +218,12 @@ public Session load(String id) throws ClassNotFoundException, IOException {\n         if (!file.exists()) {\n             return null;\n         }\n-        if (manager.getContext().getLogger().isDebugEnabled()) {\n-            manager.getContext().getLogger().debug(sm.getString(getStoreName()+\".loading\",\n-                             id, file.getAbsolutePath()));\n+\n+        Context context = getManager().getContext();\n+        Log contextLog = context.getLogger();\n+\n+        if (contextLog.isDebugEnabled()) {\n+            contextLog.debug(sm.getString(getStoreName()+\".loading\", id, file.getAbsolutePath()));\n         }\n \n         ObjectInputStream ois = null;\n@@ -228,10 +232,7 @@ public Session load(String id) throws ClassNotFoundException, IOException {\n         ClassLoader oldThreadContextCL = Thread.currentThread().getContextClassLoader();\n         try (FileInputStream fis = new FileInputStream(file.getAbsolutePath());\n                 BufferedInputStream bis = new BufferedInputStream(fis)) {\n-            Context context = manager.getContext();\n-            if (context != null) {\n-                loader = context.getLoader();\n-            }\n+            loader = context.getLoader();\n             if (loader != null) {\n                 classLoader = loader.getClassLoader();\n             }\n@@ -247,8 +248,8 @@ public Session load(String id) throws ClassNotFoundException, IOException {\n             session.setManager(manager);\n             return session;\n         } catch (FileNotFoundException e) {\n-            if (manager.getContext().getLogger().isDebugEnabled()) {\n-                manager.getContext().getLogger().debug(\"No persisted data file found\");\n+            if (contextLog.isDebugEnabled()) {\n+                contextLog.debug(\"No persisted data file found\");\n             }\n             return null;\n         } finally {",
                "deletions": 9
            },
            {
                "sha": "8ab2cb1a8e538e73e608006fc4d6018fd5db1ed7",
                "filename": "java/org/apache/catalina/session/JDBCStore.java",
                "blob_url": "https://github.com/apache/tomcat/blob/2cd5fd92c0a357ec43791237c4ba5264e7d35c47/java/org/apache/catalina/session/JDBCStore.java",
                "raw_url": "https://github.com/apache/tomcat/raw/2cd5fd92c0a357ec43791237c4ba5264e7d35c47/java/org/apache/catalina/session/JDBCStore.java",
                "status": "modified",
                "changes": 21,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/session/JDBCStore.java?ref=2cd5fd92c0a357ec43791237c4ba5264e7d35c47",
                "patch": "@@ -43,6 +43,7 @@\n import org.apache.catalina.Loader;\n import org.apache.catalina.Session;\n import org.apache.catalina.util.CustomObjectInputStream;\n+import org.apache.juli.logging.Log;\n import org.apache.tomcat.util.ExceptionUtils;\n \n /**\n@@ -595,7 +596,8 @@ public Session load(String id) throws ClassNotFoundException, IOException {\n         ClassLoader classLoader = null;\n         ObjectInputStream ois = null;\n         BufferedInputStream bis = null;\n-        org.apache.catalina.Context context = manager.getContext();\n+        org.apache.catalina.Context context = getManager().getContext();\n+        Log contextLog = context.getLogger();\n \n         synchronized (this) {\n             int numberOfTries = 2;\n@@ -620,10 +622,7 @@ public Session load(String id) throws ClassNotFoundException, IOException {\n                     try (ResultSet rst = preparedLoadSql.executeQuery()) {\n                         if (rst.next()) {\n                             bis = new BufferedInputStream(rst.getBinaryStream(2));\n-\n-                            if (context != null) {\n-                                loader = context.getLoader();\n-                            }\n+                            loader = context.getLoader();\n                             if (loader != null) {\n                                 classLoader = loader.getClassLoader();\n                             }\n@@ -634,22 +633,22 @@ public Session load(String id) throws ClassNotFoundException, IOException {\n                             }\n                             ois = new CustomObjectInputStream(bis, classLoader);\n \n-                            if (manager.getContext().getLogger().isDebugEnabled()) {\n-                                manager.getContext().getLogger().debug(sm.getString(getStoreName() + \".loading\",\n-                                        id, sessionTable));\n+                            if (contextLog.isDebugEnabled()) {\n+                                contextLog.debug(\n+                                        sm.getString(getStoreName() + \".loading\", id, sessionTable));\n                             }\n \n                             _session = (StandardSession) manager.createEmptySession();\n                             _session.readObjectData(ois);\n                             _session.setManager(manager);\n-                          } else if (manager.getContext().getLogger().isDebugEnabled()) {\n-                            manager.getContext().getLogger().debug(getStoreName() + \": No persisted data object found\");\n+                        } else if (context.getLogger().isDebugEnabled()) {\n+                            contextLog.debug(getStoreName() + \": No persisted data object found\");\n                         }\n                         // Break out after the finally block\n                         numberOfTries = 0;\n                     }\n                 } catch (SQLException e) {\n-                    manager.getContext().getLogger().error(sm.getString(getStoreName() + \".SQLException\", e));\n+                    contextLog.error(sm.getString(getStoreName() + \".SQLException\", e));\n                     if (dbConnection != null)\n                         close(dbConnection);\n                 } finally {",
                "deletions": 11
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix the connector cipher listing in the Manager app. It isn't ideal. It lists configured rather than available ciphers but it is better than the NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1723165 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/dcfa7154a54935bef17dc5b977363227fde4d54d",
        "parent": "https://github.com/apache/tomcat/commit/8b0568bcdbc57717a59d67fc80ef1b7edcd3bc62",
        "bug_id": "tomcat_310",
        "file": [
            {
                "sha": "bd6e1abadcfbfa99c085652f433ba39439b3f451",
                "filename": "java/org/apache/catalina/manager/ManagerServlet.java",
                "blob_url": "https://github.com/apache/tomcat/blob/dcfa7154a54935bef17dc5b977363227fde4d54d/java/org/apache/catalina/manager/ManagerServlet.java",
                "raw_url": "https://github.com/apache/tomcat/raw/dcfa7154a54935bef17dc5b977363227fde4d54d/java/org/apache/catalina/manager/ManagerServlet.java",
                "status": "modified",
                "changes": 39,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/manager/ManagerServlet.java?ref=dcfa7154a54935bef17dc5b977363227fde4d54d",
                "patch": "@@ -24,7 +24,6 @@\n import java.io.PrintWriter;\n import java.util.Enumeration;\n import java.util.HashMap;\n-import java.util.HashSet;\n import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n@@ -61,6 +60,8 @@\n import org.apache.tomcat.util.Diagnostics;\n import org.apache.tomcat.util.ExceptionUtils;\n import org.apache.tomcat.util.modeler.Registry;\n+import org.apache.tomcat.util.net.SSLHostConfig;\n+import org.apache.tomcat.util.net.openssl.ciphers.Cipher;\n import org.apache.tomcat.util.res.StringManager;\n \n \n@@ -562,16 +563,19 @@ protected void threadDump(PrintWriter writer, StringManager smClient,\n         writer.print(Diagnostics.getThreadDump(requestedLocales));\n     }\n \n-    protected void sslConnectorCiphers(PrintWriter writer,\n-            StringManager smClient) {\n-        writer.println(smClient.getString(\n-                \"managerServlet.sslConnectorCiphers\"));\n-        Map<String,Set<String>> connectorCiphers = getConnectorCiphers();\n-        for (Map.Entry<String,Set<String>> entry : connectorCiphers.entrySet()) {\n+    protected void sslConnectorCiphers(PrintWriter writer, StringManager smClient) {\n+        writer.println(smClient.getString(\"managerServlet.sslConnectorCiphers\"));\n+        Map<String,Set<Cipher>> connectorCiphers = getConnectorCiphers();\n+        for (Map.Entry<String,Set<Cipher>> entry : connectorCiphers.entrySet()) {\n             writer.println(entry.getKey());\n-            for (String cipher : entry.getValue()) {\n+            if (entry.getValue() == null) {\n                 writer.print(\"  \");\n-                writer.println(cipher);\n+                writer.println(smClient.getString(\"managerServlet.notSslConnector\"));\n+            } else {\n+                for (Cipher cipher : entry.getValue()) {\n+                    writer.print(\"  \");\n+                    writer.println(cipher);\n+                }\n             }\n         }\n     }\n@@ -1650,24 +1654,23 @@ public static boolean copyInternal(File src, File dest, byte[] buf) {\n     }\n \n \n-    protected Map<String,Set<String>> getConnectorCiphers() {\n-        Map<String,Set<String>> result = new HashMap<>();\n+    protected Map<String,Set<Cipher>> getConnectorCiphers() {\n+        // TODO: Returned available ciphers rather than configured ciphers.\n+        Map<String,Set<Cipher>> result = new HashMap<>();\n \n         Engine e = (Engine) host.getParent();\n         Service s = e.getService();\n         Connector connectors[] = s.findConnectors();\n         for (Connector connector : connectors) {\n-            Set<String> cipherList = new HashSet<>();\n             if (Boolean.TRUE.equals(connector.getProperty(\"SSLEnabled\"))) {\n-                String[] ciphersUsed =\n-                        (String[]) connector.getProperty(\"ciphersUsed\");\n-                for (String cipherUsed : ciphersUsed) {\n-                    cipherList.add(cipherUsed);\n+                SSLHostConfig[] sslHostConfigs = connector.getProtocolHandler().findSslHostConfigs();\n+                for (SSLHostConfig sslHostConfig : sslHostConfigs) {\n+                    result.put(connector.toString() + \"-\" + sslHostConfig.getHostName(),\n+                            sslHostConfig.getCipherList());\n                 }\n             } else {\n-                cipherList.add(sm.getString(\"managerServlet.notSslConnector\"));\n+                result.put(connector.toString(), null);\n             }\n-            result.put(connector.toString(), cipherList);\n         }\n         return result;\n     }",
                "deletions": 18
            },
            {
                "sha": "35e37e9c5c8697e3b46ca3026960f3d737b13105",
                "filename": "webapps/manager/WEB-INF/jsp/connectorCiphers.jsp",
                "blob_url": "https://github.com/apache/tomcat/blob/dcfa7154a54935bef17dc5b977363227fde4d54d/webapps/manager/WEB-INF/jsp/connectorCiphers.jsp",
                "raw_url": "https://github.com/apache/tomcat/raw/dcfa7154a54935bef17dc5b977363227fde4d54d/webapps/manager/WEB-INF/jsp/connectorCiphers.jsp",
                "status": "modified",
                "changes": 25,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/manager/WEB-INF/jsp/connectorCiphers.jsp?ref=dcfa7154a54935bef17dc5b977363227fde4d54d",
                "patch": "@@ -19,12 +19,13 @@\n <%@page import=\"java.util.Map\" %>\n <%@page import=\"java.util.Map.Entry\" %>\n <%@page import=\"java.util.Set\" %>\n+<%@page import=\"org.apache.tomcat.util.net.openssl.ciphers.Cipher\" %>\n <!DOCTYPE html\n      PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n      \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n \n <html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n-<% Map<String,Set<String>> cipherList = (Map<String,Set<String>>) request.getAttribute(\"cipherList\");\n+<% Map<String,Set<Cipher>> cipherList = (Map<String,Set<Cipher>>) request.getAttribute(\"cipherList\");\n %>\n <head>\n     <meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\"/>\n@@ -43,21 +44,27 @@\n     <thead>\n         <tr>\n             <th>Connector</th>\n-            <th>Enabled Ciphers</th>\n+            <th>Configured Ciphers</th>\n         </tr>\n     </thead>\n     <tbody>\n         <%\n-        for (Map.Entry<String, Set<String>> entry : cipherList.entrySet()) {\n+        for (Map.Entry<String, Set<Cipher>> entry : cipherList.entrySet()) {\n         %>\n         <tr>\n             <td><%=entry.getKey()%></td>\n             <td>\n             <%\n-            for (String cipher : entry.getValue()) {\n-            %>\n-                <p><%=cipher%></p>\n-            <%\n+            if (entry.getValue() == null) {\n+                %>\n+                    <p>Not an SSL connector.</p>\n+                <%\n+            } else {\n+                for (Cipher cipher : entry.getValue()) {\n+                %>\n+                    <p><%=cipher%></p>\n+                <%\n+                }\n             }\n             %>\n             </td>\n@@ -68,6 +75,10 @@\n     </tbody>\n </table>\n \n+<p>Note: The actual ciphers available for clients to use will be the subset of\n+those listed above that are supported by the SSL implementation configured for\n+the connector.</p>\n+\n <form method=\"get\" action=\"<%=request.getContextPath()%>/html\">\n   <p style=\"text-align: center;\">\n     <input type=\"submit\" value=\"Return to main page\" />",
                "deletions": 7
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=58581\nIf custom error page fails, fall back to standard error page rather than throwing an NPE.\nBased on a patch by Huxing Zhang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1712974 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/70e6f4c26fa3677dd19db8debd2d4282d80473e6",
        "parent": "https://github.com/apache/tomcat/commit/571dc79448655caa6fd1e809c9c603efc57098b1",
        "bug_id": "tomcat_311",
        "file": [
            {
                "sha": "6df94be23971c6ffb02a5abd6bb11bc886e078ca",
                "filename": "java/org/apache/catalina/core/LocalStrings.properties",
                "blob_url": "https://github.com/apache/tomcat/blob/70e6f4c26fa3677dd19db8debd2d4282d80473e6/java/org/apache/catalina/core/LocalStrings.properties",
                "raw_url": "https://github.com/apache/tomcat/raw/70e6f4c26fa3677dd19db8debd2d4282d80473e6/java/org/apache/catalina/core/LocalStrings.properties",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/LocalStrings.properties?ref=70e6f4c26fa3677dd19db8debd2d4282d80473e6",
                "patch": "@@ -185,6 +185,7 @@ standardHost.noContext=No Context configured to process this request\n standardHost.notContext=Child of a Host must be a Context\n standardHost.nullName=Host name is required\n standardHost.problematicAppBase=Using an empty string for appBase on host [{0}] will set it to CATALINA_BASE, which is a bad idea\n+standardHostValue.customStatusFailed=Custom error page [{0}] could not be dispatched correctly\n standardServer.accept.timeout=The socket listening for the shutdown command experienced an unexpected timeout [{0}] milliseconds after the call to accept(). Is this an instance of bug 56684?\n standardServer.shutdownViaPort=A valid shutdown command was received via the shutdown port. Stopping the Server instance.\n standardServer.storeConfig.notAvailable=No StoreConfig implementation was registered as an MBean named [{0}] so no configuration could be saved. A suitable MBean is normally registered via the StoreConfigLifecyleListener.",
                "deletions": 0
            },
            {
                "sha": "d9384df51b67d19ebb7e87f3f2d9bcbf95432b2f",
                "filename": "java/org/apache/catalina/core/StandardHostValve.java",
                "blob_url": "https://github.com/apache/tomcat/blob/70e6f4c26fa3677dd19db8debd2d4282d80473e6/java/org/apache/catalina/core/StandardHostValve.java",
                "raw_url": "https://github.com/apache/tomcat/raw/70e6f4c26fa3677dd19db8debd2d4282d80473e6/java/org/apache/catalina/core/StandardHostValve.java",
                "status": "modified",
                "changes": 9,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/StandardHostValve.java?ref=70e6f4c26fa3677dd19db8debd2d4282d80473e6",
                "patch": "@@ -231,7 +231,7 @@ private void status(Request request, Response response) {\n             // Look for a default error page\n             errorPage = context.findErrorPage(0);\n         }\n-        if (errorPage != null && response.setErrorReported()) {\n+        if (errorPage != null && response.isErrorReportRequired()) {\n             response.setAppCommitted(false);\n             request.setAttribute(RequestDispatcher.ERROR_STATUS_CODE,\n                               Integer.valueOf(statusCode));\n@@ -255,6 +255,7 @@ private void status(Request request, Response response) {\n             request.setAttribute(RequestDispatcher.ERROR_REQUEST_URI,\n                                  request.getRequestURI());\n             if (custom(request, response, errorPage)) {\n+                response.setErrorReported();\n                 try {\n                     response.finishResponse();\n                 } catch (ClientAbortException e) {\n@@ -379,6 +380,12 @@ private boolean custom(Request request, Response response,\n             RequestDispatcher rd =\n                 servletContext.getRequestDispatcher(errorPage.getLocation());\n \n+            if (rd == null) {\n+                container.getLogger().error(\n+                    sm.getString(\"standardHostValue.customStatusFailed\", errorPage.getLocation()));\n+                return false;\n+            }\n+\n             if (response.isCommitted()) {\n                 // Response is committed - including the error page is the\n                 // best we can do",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=58490\nFix NPE when searching for SCIs in case the web app is not extracted \n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1710134 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/78ea65bba2a03faa6c9cb5e081ce985920f2c929",
        "parent": "https://github.com/apache/tomcat/commit/0ab607c6c2ec33ccc209e4a938b7076837cd0459",
        "bug_id": "tomcat_312",
        "file": [
            {
                "sha": "03811a4eb23c9823e84f67624011375f13642a0c",
                "filename": "java/org/apache/catalina/startup/WebappServiceLoader.java",
                "blob_url": "https://github.com/apache/tomcat/blob/78ea65bba2a03faa6c9cb5e081ce985920f2c929/java/org/apache/catalina/startup/WebappServiceLoader.java",
                "raw_url": "https://github.com/apache/tomcat/raw/78ea65bba2a03faa6c9cb5e081ce985920f2c929/java/org/apache/catalina/startup/WebappServiceLoader.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/startup/WebappServiceLoader.java?ref=78ea65bba2a03faa6c9cb5e081ce985920f2c929",
                "patch": "@@ -34,6 +34,7 @@\n import javax.servlet.ServletContext;\n \n import org.apache.catalina.Context;\n+import org.apache.tomcat.util.scan.JarFactory;\n \n /**\n  * A variation of Java's JAR ServiceLoader that respects exclusion rules for\n@@ -112,7 +113,7 @@ public WebappServiceLoader(Context context) {\n                 if (base.endsWith(\"/\")) {\n                     url = new URL(base + configFile);\n                 } else {\n-                    url = new URL(\"jar:\" + base + \"!/\" + configFile);\n+                    url = JarFactory.getJarEntryURL(jarUrl, configFile);\n                 }\n                 try {\n                     parseConfigFile(applicationServicesFound, url);",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Correct various edge cases in the new HTTP Host header validation parser.\nPatch provided by Katya Todorova.\nThis closes #48\n\nFix IPv6/IPv4 parsing for host header:\n    - chars other than : should not be allowed in IPv6 address after ]\n    - ::: should not present in IPv6 address\n    - IPv4 part of IPv6 address was not correctly parsed (1 symbol of IPv4 part was ignored)\n    - tests added to cover IPv4/6 parsing \n    - parsed test class fixed not to throw NPE when an exception is expected but not thrown \n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1789685 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/ca92f04362e99c2a378b08f108521493c7ac505d",
        "parent": "https://github.com/apache/tomcat/commit/3e17ef57715cd8df4751a833e59aa50f9b6c1443",
        "bug_id": "tomcat_313",
        "file": [
            {
                "sha": "6baf7e699ad48ca52d4a2a094ac5d077f61e1d3d",
                "filename": "java/org/apache/tomcat/util/http/parser/HttpParser.java",
                "blob_url": "https://github.com/apache/tomcat/blob/ca92f04362e99c2a378b08f108521493c7ac505d/java/org/apache/tomcat/util/http/parser/HttpParser.java",
                "raw_url": "https://github.com/apache/tomcat/raw/ca92f04362e99c2a378b08f108521493c7ac505d/java/org/apache/tomcat/util/http/parser/HttpParser.java",
                "status": "modified",
                "changes": 44,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/http/parser/HttpParser.java?ref=ca92f04362e99c2a378b08f108521493c7ac505d",
                "patch": "@@ -553,45 +553,50 @@ static int readHostIPv6(Reader reader) throws IOException {\n         int h16Size = 0;\n         int pos = 1;\n         boolean parsedDoubleColon = false;\n-        boolean previousWasColon = false;\n+        int precedingColonsCount = 0;\n \n         do {\n             c = reader.read();\n-            if (h16Count == 0 && previousWasColon && c != ':') {\n+            if (h16Count == 0 && precedingColonsCount == 1 && c != ':') {\n                 // Can't start with a single :\n                 throw new IllegalArgumentException();\n             }\n             if (HttpParser.isHex(c)) {\n                 if (h16Size == 0) {\n                     // Start of a new h16 block\n-                    previousWasColon = false;\n+                    precedingColonsCount = 0;\n                     h16Count++;\n-                    reader.mark(4);\n                 }\n                 h16Size++;\n                 if (h16Size > 4) {\n                     throw new IllegalArgumentException();\n                 }\n             } else if (c == ':') {\n-                if (previousWasColon) {\n-                    // End of ::\n-                    if (parsedDoubleColon) {\n-                        // Only allowed one :: sequence\n-                        throw new IllegalArgumentException();\n-                    }\n-                    parsedDoubleColon = true;\n-                    previousWasColon = false;\n-                    // :: represents at least one h16 block\n-                    h16Count++;\n+                if (precedingColonsCount >=2 ) {\n+                    // ::: is not allowed\n+                    throw new IllegalArgumentException();\n                 } else {\n-                    previousWasColon = true;\n+                    if(precedingColonsCount == 1) {\n+                        // End of ::\n+                        if (parsedDoubleColon ) {\n+                            // Only allowed one :: sequence\n+                            throw new IllegalArgumentException();\n+                        }\n+                        parsedDoubleColon = true;\n+                        // :: represents at least one h16 block\n+                        h16Count++;\n+                    }\n+                    precedingColonsCount++;\n+                    // mark if the next symbol is hex before the actual read\n+                    reader.mark(4);\n                 }\n                 h16Size = 0;\n             } else if (c == ']') {\n-                if (previousWasColon) {\n+                if (precedingColonsCount == 1) {\n                     // Can't end on a single ':'\n                     throw new IllegalArgumentException();\n                 }\n+                pos++;\n                 break;\n             } else if (c == '.') {\n                 if (h16Count == 7 || h16Count < 7 && parsedDoubleColon) {\n@@ -617,9 +622,12 @@ static int readHostIPv6(Reader reader) throws IOException {\n \n         c = reader.read();\n         if (c == ':') {\n-            return pos + 1;\n+            return pos;\n         } else {\n-            return -1;\n+            if(c == -1) {\n+                return -1;\n+            }\n+            throw new IllegalArgumentException();\n         }\n     }\n ",
                "deletions": 18
            },
            {
                "sha": "5b2b8ec1b9ebae8611985d768b0d5c7a4a2c915a",
                "filename": "res/maven/mvn-pub.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/ca92f04362e99c2a378b08f108521493c7ac505d/res/maven/mvn-pub.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/ca92f04362e99c2a378b08f108521493c7ac505d/res/maven/mvn-pub.xml",
                "status": "modified",
                "changes": 133,
                "additions": 53,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/res/maven/mvn-pub.xml?ref=ca92f04362e99c2a378b08f108521493c7ac505d",
                "patch": "@@ -49,35 +49,18 @@\n     </copy>\n \n     <!--sign the jar, the source and the pom -->\n-    <exec executable=\"${gpg.exec}\" failonerror=\"true\"\n-          inputstring=\"${gpg.passphrase}\">\n-      <arg value=\"--batch\"/>\n-      <arg value=\"--passphrase-fd\"/>\n-      <arg value=\"0\"/>\n-      <arg value=\"-a\"/>\n-      <arg value=\"-b\"/>\n-      <arg value=\"${file}\"/>\n-    </exec>\n-    <exec executable=\"${gpg.exec}\" failonerror=\"true\"\n-          inputstring=\"${gpg.passphrase}\">\n-      <arg value=\"--batch\"/>\n-      <arg value=\"--passphrase-fd\"/>\n-      <arg value=\"0\"/>\n-      <arg value=\"-a\"/>\n-      <arg value=\"-b\"/>\n-      <arg value=\"${src}\"/>\n-    </exec>\n-    <exec executable=\"${gpg.exec}\" failonerror=\"true\"\n-          inputstring=\"${gpg.passphrase}\">\n-      <arg value=\"--batch\"/>\n-      <arg value=\"--passphrase-fd\"/>\n-      <arg value=\"0\"/>\n-      <arg value=\"-a\"/>\n-      <arg value=\"-b\"/>\n-      <arg value=\"-o\"/>\n-      <arg value=\"${pom}.asc\"/>\n-      <arg value=\"${pom}.tmp\"/>\n-    </exec>\n+    <antcall target=\"-sign\" >\n+      <param name=\"file.in\" value=\"@{file}\" />\n+      <param name=\"file.out\" value=\"@{file}.asc\" />\n+    </antcall>\n+    <antcall target=\"-sign\" >\n+      <param name=\"file.in\" value=\"@{src}\" />\n+      <param name=\"file.out\" value=\"@{src}.asc\" />\n+    </antcall>\n+    <antcall target=\"-sign\" >\n+      <param name=\"file.in\" value=\"@{pom}.tmp\" />\n+      <param name=\"file.out\" value=\"@{pom}.asc\" />\n+    </antcall>\n \n     <artifact:deploy file=\"${file}\">\n         <pom file=\"${pom}.tmp\"/>\n@@ -131,26 +114,14 @@\n     </copy>\n \n     <!--sign the file and pom -->\n-    <exec executable=\"${gpg.exec}\" failonerror=\"true\"\n-          inputstring=\"${gpg.passphrase}\">\n-      <arg value=\"--batch\"/>\n-      <arg value=\"--passphrase-fd\"/>\n-      <arg value=\"0\"/>\n-      <arg value=\"-a\"/>\n-      <arg value=\"-b\"/>\n-      <arg value=\"${file}\"/>\n-    </exec>\n-    <exec executable=\"${gpg.exec}\" failonerror=\"true\"\n-          inputstring=\"${gpg.passphrase}\">\n-      <arg value=\"--batch\"/>\n-      <arg value=\"--passphrase-fd\"/>\n-      <arg value=\"0\"/>\n-      <arg value=\"-a\"/>\n-      <arg value=\"-b\"/>\n-      <arg value=\"-o\"/>\n-      <arg value=\"${pom}.asc\"/>\n-      <arg value=\"${pom}.tmp\"/>\n-    </exec>\n+    <antcall target=\"-sign\" >\n+      <param name=\"file.in\" value=\"@{file}\" />\n+      <param name=\"file.out\" value=\"@{file}.asc\" />\n+    </antcall>\n+    <antcall target=\"-sign\" >\n+      <param name=\"file.in\" value=\"@{pom}.tmp\" />\n+      <param name=\"file.out\" value=\"@{pom}.asc\" />\n+    </antcall>\n \n     <artifact:deploy file=\"${file}\">\n       <pom file=\"${pom}.tmp\"/>\n@@ -198,35 +169,18 @@\n     </copy>\n \n     <!--sign the zip, the tar.gz and the pom -->\n-    <exec executable=\"${gpg.exec}\" failonerror=\"true\"\n-          inputstring=\"${gpg.passphrase}\">\n-      <arg value=\"--batch\"/>\n-      <arg value=\"--passphrase-fd\"/>\n-      <arg value=\"0\"/>\n-      <arg value=\"-a\"/>\n-      <arg value=\"-b\"/>\n-      <arg value=\"${file}.zip\"/>\n-    </exec>\n-    <exec executable=\"${gpg.exec}\" failonerror=\"true\"\n-          inputstring=\"${gpg.passphrase}\">\n-      <arg value=\"--batch\"/>\n-      <arg value=\"--passphrase-fd\"/>\n-      <arg value=\"0\"/>\n-      <arg value=\"-a\"/>\n-      <arg value=\"-b\"/>\n-      <arg value=\"${file}.tar.gz\"/>\n-    </exec>\n-    <exec executable=\"${gpg.exec}\" failonerror=\"true\"\n-          inputstring=\"${gpg.passphrase}\">\n-      <arg value=\"--batch\"/>\n-      <arg value=\"--passphrase-fd\"/>\n-      <arg value=\"0\"/>\n-      <arg value=\"-a\"/>\n-      <arg value=\"-b\"/>\n-      <arg value=\"-o\"/>\n-      <arg value=\"${pom}.asc\"/>\n-      <arg value=\"${pom}.tmp\"/>\n-    </exec>\n+    <antcall target=\"-sign\" >\n+      <param name=\"file.in\" value=\"@{file}\" />\n+      <param name=\"file.out\" value=\"@{file}.asc\" />\n+    </antcall>\n+    <antcall target=\"-sign\" >\n+      <param name=\"file.in\" value=\"@{file}.tar.gz\" />\n+      <param name=\"file.out\" value=\"@{file}.tar.gz.asc\" />\n+    </antcall>\n+    <antcall target=\"-sign\" >\n+      <param name=\"file.in\" value=\"@{pom}.tmp\" />\n+      <param name=\"file.out\" value=\"@{pom}.asc\" />\n+    </antcall>\n \n     <artifact:deploy file=\"${pom}\">\n         <pom file=\"${pom}.tmp\"/>\n@@ -262,7 +216,7 @@\n     </sequential>\n   </macrodef>\n \n-  <target name=\"generic-deploy\" depends=\"init-maven,init-gpg,init-ldap\">\n+  <target name=\"generic-deploy\" depends=\"init-maven,init-gpg-1,init-gpg-2,init-ldap\">\n     <!-- Standard jars in bin directory -->\n     <!-- Skip bootstrap.jar - it is just a subset of catalina.jar -->\n     <doMavenDeploy artifactId=\"tomcat-juli\"\n@@ -399,7 +353,11 @@\n     </antcall>\n   </target>\n \n-  <target name=\"init-gpg\">\n+  <target name=\"init-gpg-1\">\n+    <available file=\"${gpg.exec}\" property=\"gpg.exec.available\"/>\n+  </target>\n+\n+  <target name=\"init-gpg-2\" if=\"${gpg.exec.available}\">\n     <input message=\"Enter GPG pass-phrase\" addproperty=\"gpg.passphrase\" >\n       <handler type=\"secure\"/>\n     </input>\n@@ -412,4 +370,19 @@\n     </input>\n   </target>\n \n+  <target name=\"-sign\" if=\"gpg.passphrase\">\n+    <fail unless=\"file\" />\n+    <exec executable=\"${gpg.exec}\" failonerror=\"true\"\n+          inputstring=\"${gpg.passphrase}\">\n+      <arg value=\"--batch\"/>\n+      <arg value=\"--passphrase-fd\"/>\n+      <arg value=\"0\"/>\n+      <arg value=\"-a\"/>\n+      <arg value=\"-b\"/>\n+      <arg value=\"-o\"/>\n+      <arg value=\"${file.out}\"/>\n+      <arg value=\"${file.in}\"/>\n+    </exec>\n+  </target>\n+\n </project>",
                "deletions": 80
            },
            {
                "sha": "a6f98ba54d53ac329258e403b3875985918e0a6e",
                "filename": "test/org/apache/tomcat/util/http/parser/TestHttpParserHost.java",
                "blob_url": "https://github.com/apache/tomcat/blob/ca92f04362e99c2a378b08f108521493c7ac505d/test/org/apache/tomcat/util/http/parser/TestHttpParserHost.java",
                "raw_url": "https://github.com/apache/tomcat/raw/ca92f04362e99c2a378b08f108521493c7ac505d/test/org/apache/tomcat/util/http/parser/TestHttpParserHost.java",
                "status": "modified",
                "changes": 15,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/tomcat/util/http/parser/TestHttpParserHost.java?ref=ca92f04362e99c2a378b08f108521493c7ac505d",
                "patch": "@@ -66,6 +66,7 @@\n         result.add(new Object[] { TestType.IPv4, \"0.0.0.256\", Integer.valueOf(-1), IAE} );\n         result.add(new Object[] { TestType.IPv4, \"0.a.0.0\", Integer.valueOf(-1), IAE} );\n         result.add(new Object[] { TestType.IPv4, \"0..0.0\", Integer.valueOf(-1), IAE} );\n+        result.add(new Object[] { TestType.IPv4, \"0]\", Integer.valueOf(-1), IAE} );\n         // Domain Name - valid\n         result.add(new Object[] { TestType.DOMAIN_NAME, \"localhost\", Integer.valueOf(-1), null} );\n         result.add(new Object[] { TestType.DOMAIN_NAME, \"localhost:8080\", Integer.valueOf(9), null} );\n@@ -121,6 +122,7 @@\n         result.add(new Object[] { TestType.IPv6, \"[0:0:0:0:0:0:127.0.0.1]\", Integer.valueOf(-1), null} );\n         result.add(new Object[] { TestType.IPv6, \"[0:0:0:0:0:0:127.0.0.1]:8080\",\n                 Integer.valueOf(23), null} );\n+        result.add(new Object[] { TestType.IPv6, \"[::1.2.3.4]\", Integer.valueOf(-1), null} );\n         // IPv6 - invalid\n         result.add(new Object[] { TestType.IPv6, \"[1234:5678:90AB:CDEF:1234:127.0.0.1]\",\n                 Integer.valueOf(-1), IAE} );\n@@ -136,6 +138,18 @@\n         result.add(new Object[] { TestType.IPv6, \"[0::0::127.0.0.1]\", Integer.valueOf(-1), IAE} );\n         result.add(new Object[] { TestType.IPv6, \"[0:0:G:0:0:0:127.0.0.1]\", Integer.valueOf(-1), IAE} );\n         result.add(new Object[] { TestType.IPv6, \"[00000:0:0:0:0:0:127.0.0.1]\", Integer.valueOf(-1), IAE} );\n+        result.add(new Object[] { TestType.IPv6, \"[::1]'\", Integer.valueOf(-1), IAE} );\n+        result.add(new Object[] { TestType.IPv6, \"[:2222:3333:4444:5555:6666:7777:8888]\",\n+                Integer.valueOf(-1), IAE} );\n+        result.add(new Object[] { TestType.IPv6, \"[1111:::3333:4444:5555:6666:7777:8888]\",\n+                Integer.valueOf(-1), IAE} );\n+        result.add(new Object[] { TestType.IPv6, \"::1]\", Integer.valueOf(-1), IAE} );\n+        result.add(new Object[] { TestType.IPv6, \"[1111:2222:3333:4444:5555:6666:7777:8888:9999]\",\n+                Integer.valueOf(-1), IAE} );\n+        result.add(new Object[] { TestType.IPv6, \"[1111:2222:3333:4444:5555:6666:7777:1.2.3.4]\",\n+            Integer.valueOf(-1), IAE} );\n+        result.add(new Object[] { TestType.IPv6, \"[1111:2222:3333]\",\n+            Integer.valueOf(-1), IAE} );\n         return result;\n     }\n \n@@ -165,6 +179,7 @@ public void testHost() {\n         if (expectedException == null) {\n             Assert.assertNull(input, exceptionClass);\n         } else {\n+            Assert.assertNotNull(exceptionClass);\n             Assert.assertTrue(input, expectedException.isAssignableFrom(exceptionClass));\n         }\n     }",
                "deletions": 0
            },
            {
                "sha": "f3603eac1a67f95254f67210700453eb52dbfcfc",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/ca92f04362e99c2a378b08f108521493c7ac505d/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/ca92f04362e99c2a378b08f108521493c7ac505d/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=ca92f04362e99c2a378b08f108521493c7ac505d",
                "patch": "@@ -52,6 +52,10 @@\n         method name from <code>getPushBuilder()</code> to\n         <code>newPushBuilder()</code>. (markt)\n       </update>\n+      <fix>\n+        Correct various edge cases in the new HTTP Host header validation\n+        parser. Patch provided by Katya Todorova. (martk)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Jasper\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=58232\nWhen ServerEndpointConfig is added programatically and the endpoint class that it provides is annotated, NPE is thrown while initializing HTTP upgrade handler.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1695706 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/3927743c96ce2fc2ecec63321ae05109caa2b5aa",
        "parent": "https://github.com/apache/tomcat/commit/16b4854c01d3407209877d729f2daea2b44a6c8a",
        "bug_id": "tomcat_314",
        "file": [
            {
                "sha": "228ac8c127384932de0f195f506153d4dd3a36a1",
                "filename": "java/org/apache/tomcat/websocket/Util.java",
                "blob_url": "https://github.com/apache/tomcat/blob/3927743c96ce2fc2ecec63321ae05109caa2b5aa/java/org/apache/tomcat/websocket/Util.java",
                "raw_url": "https://github.com/apache/tomcat/raw/3927743c96ce2fc2ecec63321ae05109caa2b5aa/java/org/apache/tomcat/websocket/Util.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/Util.java?ref=3927743c96ce2fc2ecec63321ae05109caa2b5aa",
                "patch": "@@ -331,7 +331,7 @@ public static Object coerceToType(Class<?> type, String value) {\n \n \n     public static List<DecoderEntry> getDecoders(\n-            Class<? extends Decoder>[] decoderClazzes)\n+            List<Class<? extends Decoder>> decoderClazzes)\n                     throws DeploymentException{\n \n         List<DecoderEntry> result = new ArrayList<>();\n@@ -464,9 +464,7 @@ private static DecoderMatch matchDecoders(Class<?> target,\n         try {\n             List<Class<? extends Decoder>> decoders =\n                     endpointConfig.getDecoders();\n-            @SuppressWarnings(\"unchecked\")\n-            List<DecoderEntry> decoderEntries = getDecoders(\n-                    decoders.toArray(new Class[decoders.size()]));\n+            List<DecoderEntry> decoderEntries = getDecoders(decoders);\n             decoderMatch = new DecoderMatch(target, decoderEntries);\n         } catch (DeploymentException e) {\n             throw new IllegalArgumentException(e);",
                "deletions": 4
            },
            {
                "sha": "5017ef7956858540b1ccad58e1268383f2492578",
                "filename": "java/org/apache/tomcat/websocket/WsWebSocketContainer.java",
                "blob_url": "https://github.com/apache/tomcat/blob/3927743c96ce2fc2ecec63321ae05109caa2b5aa/java/org/apache/tomcat/websocket/WsWebSocketContainer.java",
                "raw_url": "https://github.com/apache/tomcat/raw/3927743c96ce2fc2ecec63321ae05109caa2b5aa/java/org/apache/tomcat/websocket/WsWebSocketContainer.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/WsWebSocketContainer.java?ref=3927743c96ce2fc2ecec63321ae05109caa2b5aa",
                "patch": "@@ -108,7 +108,7 @@ public Session connectToServer(Object pojo, URI path)\n                             pojo.getClass().getName()));\n         }\n \n-        Endpoint ep = new PojoEndpointClient(pojo, annotation.decoders());\n+        Endpoint ep = new PojoEndpointClient(pojo, Arrays.asList(annotation.decoders()));\n \n         Class<? extends ClientEndpointConfig.Configurator> configuratorClazz =\n                 annotation.configurator();",
                "deletions": 1
            },
            {
                "sha": "f4d0567a3b1dd23c78a6ac1e1e6204ad2c38569c",
                "filename": "java/org/apache/tomcat/websocket/pojo/PojoEndpointClient.java",
                "blob_url": "https://github.com/apache/tomcat/blob/3927743c96ce2fc2ecec63321ae05109caa2b5aa/java/org/apache/tomcat/websocket/pojo/PojoEndpointClient.java",
                "raw_url": "https://github.com/apache/tomcat/raw/3927743c96ce2fc2ecec63321ae05109caa2b5aa/java/org/apache/tomcat/websocket/pojo/PojoEndpointClient.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/pojo/PojoEndpointClient.java?ref=3927743c96ce2fc2ecec63321ae05109caa2b5aa",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.tomcat.websocket.pojo;\n \n import java.util.Collections;\n+import java.util.List;\n \n import javax.websocket.Decoder;\n import javax.websocket.DeploymentException;\n@@ -32,7 +33,7 @@\n public class PojoEndpointClient extends PojoEndpointBase {\n \n     public PojoEndpointClient(Object pojo,\n-            Class<? extends Decoder>[] decoders) throws DeploymentException {\n+            List<Class<? extends Decoder>> decoders) throws DeploymentException {\n         setPojo(pojo);\n         setMethodMapping(\n                 new PojoMethodMapping(pojo.getClass(), decoders, null));",
                "deletions": 1
            },
            {
                "sha": "32060f7b8b2cc7b79ce4ec7abced8b1709e95b11",
                "filename": "java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java",
                "blob_url": "https://github.com/apache/tomcat/blob/3927743c96ce2fc2ecec63321ae05109caa2b5aa/java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java",
                "raw_url": "https://github.com/apache/tomcat/raw/3927743c96ce2fc2ecec63321ae05109caa2b5aa/java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java?ref=3927743c96ce2fc2ecec63321ae05109caa2b5aa",
                "patch": "@@ -71,7 +71,7 @@\n \n \n     public PojoMethodMapping(Class<?> clazzPojo,\n-            Class<? extends Decoder>[] decoderClazzes, String wsPath)\n+            List<Class<? extends Decoder>> decoderClazzes, String wsPath)\n                     throws DeploymentException {\n \n         this.wsPath = wsPath;",
                "deletions": 1
            },
            {
                "sha": "7a3788cbd20eb593a71bb394927e7f7fb3e17423",
                "filename": "java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "blob_url": "https://github.com/apache/tomcat/blob/3927743c96ce2fc2ecec63321ae05109caa2b5aa/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "raw_url": "https://github.com/apache/tomcat/raw/3927743c96ce2fc2ecec63321ae05109caa2b5aa/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "status": "modified",
                "changes": 14,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/server/WsServerContainer.java?ref=3927743c96ce2fc2ecec63321ae05109caa2b5aa",
                "patch": "@@ -182,6 +182,13 @@ public void addEndpoint(ServerEndpointConfig sec)\n         }\n         String path = sec.getPath();\n \n+        // Add method mapping to user properties\n+        PojoMethodMapping methodMapping = new PojoMethodMapping(sec.getEndpointClass(),\n+                sec.getDecoders(), path);\n+        sec.getUserProperties().put(\n+                org.apache.tomcat.websocket.pojo.Constants.POJO_METHOD_MAPPING_KEY,\n+                methodMapping);\n+\n         UriTemplate uriTemplate = new UriTemplate(path);\n         if (uriTemplate.hasParameters()) {\n             Integer key = Integer.valueOf(uriTemplate.getSegmentCount());\n@@ -239,10 +246,6 @@ public void addEndpoint(Class<?> pojo) throws DeploymentException {\n         // Validate encoders\n         validateEncoders(annotation.encoders());\n \n-        // Method mapping\n-        PojoMethodMapping methodMapping = new PojoMethodMapping(pojo,\n-                annotation.decoders(), path);\n-\n         // ServerEndpointConfig\n         ServerEndpointConfig sec;\n         Class<? extends Configurator> configuratorClazz =\n@@ -264,9 +267,6 @@ public void addEndpoint(Class<?> pojo) throws DeploymentException {\n                 subprotocols(Arrays.asList(annotation.subprotocols())).\n                 configurator(configurator).\n                 build();\n-        sec.getUserProperties().put(\n-                org.apache.tomcat.websocket.pojo.Constants.POJO_METHOD_MAPPING_KEY,\n-                methodMapping);\n \n         addEndpoint(sec);\n     }",
                "deletions": 7
            },
            {
                "sha": "558c70a9523f1b2d9a0a792c97680e6029ff8b26",
                "filename": "test/org/apache/tomcat/websocket/server/TestWsServerContainer.java",
                "blob_url": "https://github.com/apache/tomcat/blob/3927743c96ce2fc2ecec63321ae05109caa2b5aa/test/org/apache/tomcat/websocket/server/TestWsServerContainer.java",
                "raw_url": "https://github.com/apache/tomcat/raw/3927743c96ce2fc2ecec63321ae05109caa2b5aa/test/org/apache/tomcat/websocket/server/TestWsServerContainer.java",
                "status": "modified",
                "changes": 47,
                "additions": 47,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/tomcat/websocket/server/TestWsServerContainer.java?ref=3927743c96ce2fc2ecec63321ae05109caa2b5aa",
                "patch": "@@ -16,8 +16,16 @@\n  */\n package org.apache.tomcat.websocket.server;\n \n+import java.net.URI;\n+import java.util.Queue;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n import javax.servlet.ServletContextEvent;\n+import javax.websocket.ContainerProvider;\n import javax.websocket.DeploymentException;\n+import javax.websocket.Session;\n+import javax.websocket.WebSocketContainer;\n import javax.websocket.server.ServerContainer;\n import javax.websocket.server.ServerEndpointConfig;\n \n@@ -31,6 +39,8 @@\n import org.apache.catalina.startup.Tomcat;\n import org.apache.catalina.startup.TomcatBaseTest;\n import org.apache.tomcat.websocket.TesterEchoServer;\n+import org.apache.tomcat.websocket.TesterMessageCountClient.BasicText;\n+import org.apache.tomcat.websocket.pojo.TesterUtil.SimpleClient;\n \n \n public class TestWsServerContainer extends TomcatBaseTest {\n@@ -50,6 +60,43 @@ public void testBug54807() throws Exception {\n     }\n \n \n+    @Test\n+    public void testBug58232() throws Exception {\n+        Tomcat tomcat = getTomcatInstance();\n+        // No file system docBase required\n+        Context ctx = tomcat.addContext(\"\", null);\n+        ctx.addApplicationListener(Bug54807Config.class.getName());\n+        Tomcat.addServlet(ctx, \"default\", new DefaultServlet());\n+        ctx.addServletMapping(\"/\", \"default\");\n+\n+        WebSocketContainer wsContainer =\n+                ContainerProvider.getWebSocketContainer();\n+\n+        tomcat.start();\n+\n+        Assert.assertEquals(LifecycleState.STARTED, ctx.getState());\n+\n+        SimpleClient client = new SimpleClient();\n+        URI uri = new URI(\"ws://localhost:\" + getPort() + \"/echoBasic\");\n+\n+        try (Session session = wsContainer.connectToServer(client, uri);) {\n+            CountDownLatch latch = new CountDownLatch(1);\n+            BasicText handler = new BasicText(latch);\n+            session.addMessageHandler(handler);\n+            session.getBasicRemote().sendText(\"echoBasic\");\n+\n+            boolean latchResult = handler.getLatch().await(10, TimeUnit.SECONDS);\n+            Assert.assertTrue(latchResult);\n+\n+            Queue<String> messages = handler.getMessages();\n+            Assert.assertEquals(1, messages.size());\n+            for (String message : messages) {\n+                Assert.assertEquals(\"echoBasic\", message);\n+            }\n+        }\n+    }\n+\n+\n     public static class Bug54807Config extends WsContextListener {\n \n         @Override",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=57788\n57788: Avoid NPE if nothing is found after going through the whole class hierarchy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1672628 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/8d5157897bac61a127255eca343e8b338c3df817",
        "parent": "https://github.com/apache/tomcat/commit/5b44ac56c385cac48f0414b8179df7e6cf939199",
        "bug_id": "tomcat_315",
        "file": [
            {
                "sha": "b304c82c944310f3d09b77dd10ecef67464e9e0a",
                "filename": "java/org/apache/tomcat/websocket/Util.java",
                "blob_url": "https://github.com/apache/tomcat/blob/8d5157897bac61a127255eca343e8b338c3df817/java/org/apache/tomcat/websocket/Util.java",
                "raw_url": "https://github.com/apache/tomcat/raw/8d5157897bac61a127255eca343e8b338c3df817/java/org/apache/tomcat/websocket/Util.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/Util.java?ref=8d5157897bac61a127255eca343e8b338c3df817",
                "patch": "@@ -207,6 +207,10 @@ static CloseCode getCloseCode(int code) {\n         @SuppressWarnings(\"unchecked\")\n         Class<? extends T> superClazz =\n                 (Class<? extends T>) clazz.getSuperclass();\n+        if (superClazz == null) {\n+            // Finished looking up the class hierarchy without finding anything\n+            return null;\n+        }\n \n         TypeResult superClassTypeResult = getGenericType(type, superClazz);\n         int dimension = superClassTypeResult.getDimension();",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Provide a better mechanism for the RewriteValve to inject a re-written request that avoids:\n- NPEs appearing in the log every time the Valve re-writes a request.\n- unnecessary duplication of post-processing in the adapter\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1644935 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/1d442a735cc3fd793030d05a0f8b9bbe71cb16cf",
        "parent": "https://github.com/apache/tomcat/commit/71c3ea89be771550bb8e0a07d26ba2e0d5f5b8b4",
        "bug_id": "tomcat_316",
        "file": [
            {
                "sha": "8b65005332d8f1b8d4f566f0a460af359bd6967d",
                "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
                "blob_url": "https://github.com/apache/tomcat/blob/1d442a735cc3fd793030d05a0f8b9bbe71cb16cf/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "raw_url": "https://github.com/apache/tomcat/raw/1d442a735cc3fd793030d05a0f8b9bbe71cb16cf/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/CoyoteAdapter.java?ref=1d442a735cc3fd793030d05a0f8b9bbe71cb16cf",
                "patch": "@@ -415,6 +415,15 @@ public void service(org.apache.coyote.Request req,\n     }\n \n \n+    @Override\n+    public boolean prepare(org.apache.coyote.Request req, org.apache.coyote.Response res)\n+            throws IOException, ServletException {\n+        Request request = (Request) req.getNote(ADAPTER_NOTES);\n+        Response response = (Response) res.getNote(ADAPTER_NOTES);\n+\n+        return postParseRequest(req, request, res, response);\n+    }\n+\n \n     @Override\n     public void errorDispatch(org.apache.coyote.Request req,",
                "deletions": 0
            },
            {
                "sha": "5b15f359294b63fd61fa2f7eed16420651d36188",
                "filename": "java/org/apache/catalina/valves/rewrite/RewriteValve.java",
                "blob_url": "https://github.com/apache/tomcat/blob/1d442a735cc3fd793030d05a0f8b9bbe71cb16cf/java/org/apache/catalina/valves/rewrite/RewriteValve.java",
                "raw_url": "https://github.com/apache/tomcat/raw/1d442a735cc3fd793030d05a0f8b9bbe71cb16cf/java/org/apache/catalina/valves/rewrite/RewriteValve.java",
                "status": "modified",
                "changes": 16,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/valves/rewrite/RewriteValve.java?ref=1d442a735cc3fd793030d05a0f8b9bbe71cb16cf",
                "patch": "@@ -41,6 +41,8 @@\n import org.apache.catalina.Lifecycle;\n import org.apache.catalina.LifecycleException;\n import org.apache.catalina.LifecycleListener;\n+import org.apache.catalina.Pipeline;\n+import org.apache.catalina.connector.Connector;\n import org.apache.catalina.connector.Request;\n import org.apache.catalina.connector.Response;\n import org.apache.catalina.util.LifecycleSupport;\n@@ -486,8 +488,14 @@ else if (index == urlString.length() - 1) {\n                     request.getMappingData().recycle();\n                     // Reinvoke the whole request recursively\n                     try {\n-                        request.getConnector().getProtocolHandler().getAdapter().service\n-                        (request.getCoyoteRequest(), response.getCoyoteResponse());\n+                        Connector connector = request.getConnector();\n+                        if (!connector.getProtocolHandler().getAdapter().prepare(\n+                                request.getCoyoteRequest(), response.getCoyoteResponse())) {\n+                            return;\n+                        }\n+                        Pipeline pipeline = connector.getService().getContainer().getPipeline();\n+                        request.setAsyncSupported(pipeline.isAsyncSupported());\n+                        pipeline.getFirst().invoke(request, response);\n                     } catch (Exception e) {\n                         // This doesn't actually happen in the Catalina adapter implementation\n                     }\n@@ -552,7 +560,9 @@ protected String getHostConfigPath(String resourceName) {\n      * Example:\n      *  RewriteCond %{REMOTE_HOST}  ^host1.*  [OR]\n      *\n-     * @param line\n+     * @param line A line from the rewrite configuration\n+     *\n+     * @return The condition, rule or map resulting from parsing the line\n      */\n     public static Object parse(String line) {\n         StringTokenizer tokenizer = new StringTokenizer(line);",
                "deletions": 3
            },
            {
                "sha": "ecae1d94472ae5f4705ac089e6c49f735d0af7cb",
                "filename": "java/org/apache/coyote/Adapter.java",
                "blob_url": "https://github.com/apache/tomcat/blob/1d442a735cc3fd793030d05a0f8b9bbe71cb16cf/java/org/apache/coyote/Adapter.java",
                "raw_url": "https://github.com/apache/tomcat/raw/1d442a735cc3fd793030d05a0f8b9bbe71cb16cf/java/org/apache/coyote/Adapter.java",
                "status": "modified",
                "changes": 22,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/Adapter.java?ref=1d442a735cc3fd793030d05a0f8b9bbe71cb16cf",
                "patch": "@@ -30,6 +30,9 @@\n     /**\n      * Call the service method, and notify all listeners\n      *\n+     * @param req The request object\n+     * @param res The response object\n+     *\n      * @exception Exception if an error happens during handling of\n      *   the request. Common errors are:\n      *   <ul><li>IOException if an input/output error occurs and we are\n@@ -42,8 +45,23 @@\n      *  Tomcat should be able to handle and log any other exception ( including\n      *  runtime exceptions )\n      */\n-    public void service(Request req, Response res)\n-            throws Exception;\n+    public void service(Request req, Response res) throws Exception;\n+\n+    /**\n+     * Prepare the given request/response for processing. This method requires\n+     * that the request object has been populated with the information available\n+     * from the HTTP headers.\n+     *\n+     * @param req The request object\n+     * @param res The response object\n+     *\n+     * @return <code>true</code> if processing can continue, otherwise\n+     *         <code>false</code> in which case an appropriate error will have\n+     *         been set on the response\n+     *\n+     * @throws Exception If the processing fails unexpectedly\n+     */\n+    public boolean prepare(Request req, Response res) throws Exception;\n \n     public boolean asyncDispatch(Request req,Response res, SocketStatus status)\n             throws Exception;",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=57208\nFixed NPE in JNDIRealm when \"getUserBySearch\" is performed, and no results are found. Based on a patch made by Jason McIntosh.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1639653 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/aa5249e63ea3b9844adae1c11755437bf653cac8",
        "parent": "https://github.com/apache/tomcat/commit/e362a8c9e77414ab7340cba5bf12f456a3cbee42",
        "bug_id": "tomcat_317",
        "file": [
            {
                "sha": "451f45a4c46b9d5e34dabac34d25499797878975",
                "filename": "java/org/apache/catalina/realm/JNDIRealm.java",
                "blob_url": "https://github.com/apache/tomcat/blob/aa5249e63ea3b9844adae1c11755437bf653cac8/java/org/apache/catalina/realm/JNDIRealm.java",
                "raw_url": "https://github.com/apache/tomcat/raw/aa5249e63ea3b9844adae1c11755437bf653cac8/java/org/apache/catalina/realm/JNDIRealm.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/realm/JNDIRealm.java?ref=aa5249e63ea3b9844adae1c11755437bf653cac8",
                "patch": "@@ -1276,11 +1276,17 @@ protected User getUser(DirContext context, String username,\n         // Use pattern or search for user entry\n         if (userPatternFormatArray != null && curUserPattern >= 0) {\n             user = getUserByPattern(context, username, credentials, attrIds, curUserPattern);\n+            if (containerLog.isDebugEnabled()) {\n+                containerLog.debug(\"Found user by pattern [\" + user + \"]\");\n+            }\n         } else {\n             user = getUserBySearch(context, username, attrIds);\n+            if (containerLog.isDebugEnabled()) {\n+                containerLog.debug(\"Found user by search [\" + user + \"]\");\n+            }\n         }\n \n-        if (userPassword == null && credentials != null) {\n+        if (userPassword == null && credentials != null && user != null) {\n             // The password is available. Insert it since it may be required for\n             // role searches.\n             return new User(user.getUserName(), user.getDN(), credentials,",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Further improve processing of null arguments in remote endpoint (followup to r1632625):\n1) Document IllegalArgumentException in javadoc\n2) Handle null arguments in sendObject() methods to throw IllegalArgumentException instead of NPE.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1632965 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/f529a1a8487e8c00654baec21ae75b181cf8d2f7",
        "parent": "https://github.com/apache/tomcat/commit/523b4975efc336b559210b0c0ef16843f8524e1a",
        "bug_id": "tomcat_318",
        "file": [
            {
                "sha": "7e9e3b6a33a23dc1bee3f60245e8db59a0c2a73f",
                "filename": "java/javax/websocket/PongMessage.java",
                "blob_url": "https://github.com/apache/tomcat/blob/f529a1a8487e8c00654baec21ae75b181cf8d2f7/java/javax/websocket/PongMessage.java",
                "raw_url": "https://github.com/apache/tomcat/raw/f529a1a8487e8c00654baec21ae75b181cf8d2f7/java/javax/websocket/PongMessage.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/javax/websocket/PongMessage.java?ref=f529a1a8487e8c00654baec21ae75b181cf8d2f7",
                "patch": "@@ -24,7 +24,7 @@\n  */\n public interface PongMessage {\n     /**\n-     * Get the payload of the Pong message..\n+     * Get the payload of the Pong message.\n      *\n      * @return  The payload of the Pong message.\n      */",
                "deletions": 1
            },
            {
                "sha": "19c7a10028bb5673bb7e1da28d3b7238a2bb5c40",
                "filename": "java/javax/websocket/RemoteEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/f529a1a8487e8c00654baec21ae75b181cf8d2f7/java/javax/websocket/RemoteEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/f529a1a8487e8c00654baec21ae75b181cf8d2f7/java/javax/websocket/RemoteEndpoint.java",
                "status": "modified",
                "changes": 35,
                "additions": 34,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/javax/websocket/RemoteEndpoint.java?ref=f529a1a8487e8c00654baec21ae75b181cf8d2f7",
                "patch": "@@ -68,6 +68,7 @@\n          * when the message has been sent.\n          * @param data          The text message to send\n          * @return A Future that signals when the message has been sent.\n+         * @throws IllegalArgumentException if {@code data} is {@code null}.\n          */\n         Future<Void> sendBinary(ByteBuffer data);\n \n@@ -77,11 +78,29 @@\n          * @param data          The text message to send\n          * @param completion    Used to signal to the client when the message has\n          *                      been sent\n+         * @throws IllegalArgumentException if {@code data} or {@code completion}\n+         *                      is {@code null}.\n          */\n         void sendBinary(ByteBuffer data, SendHandler completion);\n \n+        /**\n+         * Encodes object as a message and sends it asynchronously, using the\n+         * Future to signal to the client when the message has been sent.\n+         * @param obj           The object to be sent.\n+         * @return A Future that signals when the message has been sent.\n+         * @throws IllegalArgumentException if {@code obj} is {@code null}.\n+         */\n         Future<Void> sendObject(Object obj);\n \n+        /**\n+         * Encodes object as a message and sends it asynchronously, using the\n+         * SendHandler to signal to the client when the message has been sent.\n+         * @param obj           The object to be sent.\n+         * @param completion    Used to signal to the client when the message has\n+         *                      been sent\n+         * @throws IllegalArgumentException if {@code obj} or\n+         *                      {@code completion} is {@code null}.\n+         */\n         void sendObject(Object obj, SendHandler completion);\n \n     }\n@@ -91,6 +110,7 @@\n         /**\n          * Send the message, blocking until the message is sent.\n          * @param text  The text message to send.\n+         * @throws IllegalArgumentException if {@code text} is {@code null}.\n          * @throws IOException if an I/O error occurs during the sending of the\n          *                     message.\n          */\n@@ -99,6 +119,7 @@\n         /**\n          * Send the message, blocking until the message is sent.\n          * @param data  The binary message to send\n+         * @throws IllegalArgumentException if {@code data} is {@code null}.\n          * @throws IOException if an I/O error occurs during the sending of the\n          *                     message.\n          */\n@@ -112,6 +133,7 @@\n          * @param fragment  The partial message to send\n          * @param isLast    <code>true</code> if this is the last part of the\n          *                  message, otherwise <code>false</code>\n+         * @throws IllegalArgumentException if {@code fragment} is {@code null}.\n          * @throws IOException if an I/O error occurs during the sending of the\n          *                     message.\n          */\n@@ -125,6 +147,8 @@\n          * @param partialByte   The partial message to send\n          * @param isLast        <code>true</code> if this is the last part of the\n          *                      message, otherwise <code>false</code>\n+         * @throws IllegalArgumentException if {@code partialByte} is\n+         *                     {@code null}.\n          * @throws IOException if an I/O error occurs during the sending of the\n          *                     message.\n          */\n@@ -134,7 +158,16 @@\n \n         Writer getSendWriter() throws IOException;\n \n-        void sendObject(Object o) throws IOException, EncodeException;\n+        /**\n+         * Encodes object as a message and sends it to the remote endpoint.\n+         * @param data  The object to be sent.\n+         * @throws EncodeException if there was a problem encoding the\n+         *                     {@code data} object as a websocket message.\n+         * @throws IllegalArgumentException if {@code data} is {@code null}.\n+         * @throws IOException if an I/O error occurs during the sending of the\n+         *                     message.\n+         */\n+        void sendObject(Object data) throws IOException, EncodeException;\n \n     }\n     /**",
                "deletions": 1
            },
            {
                "sha": "e053bc09d5cd0c054ca5051d97bcb5dd02c2b370",
                "filename": "java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "blob_url": "https://github.com/apache/tomcat/blob/f529a1a8487e8c00654baec21ae75b181cf8d2f7/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "raw_url": "https://github.com/apache/tomcat/raw/f529a1a8487e8c00654baec21ae75b181cf8d2f7/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java?ref=f529a1a8487e8c00654baec21ae75b181cf8d2f7",
                "patch": "@@ -528,6 +528,13 @@ public void sendObject(Object obj) throws IOException {\n     @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n     public void sendObjectByCompletion(Object obj, SendHandler completion) {\n \n+        if (obj == null) {\n+            throw new IllegalArgumentException(sm.getString(\"wsRemoteEndpoint.nullData\"));\n+        }\n+        if (completion == null) {\n+            throw new IllegalArgumentException(sm.getString(\"wsRemoteEndpoint.nullHandler\"));\n+        }\n+\n         if (Util.isPrimitive(obj.getClass())) {\n             String msg = obj.toString();\n             sendStringByCompletion(msg, completion);",
                "deletions": 0
            },
            {
                "sha": "2bd34d763e5a881a8ffc152df5c79a9d2ea9291c",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/f529a1a8487e8c00654baec21ae75b181cf8d2f7/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/f529a1a8487e8c00654baec21ae75b181cf8d2f7/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=f529a1a8487e8c00654baec21ae75b181cf8d2f7",
                "patch": "@@ -213,7 +213,7 @@\n         Fix client subprotocol handling. (remm)\n       </fix>\n       <fix>\n-        Add null checks for arguments in remote endpoint. (remm)\n+        Add null checks for arguments in remote endpoint. (remm/kkolinko)\n       </fix>\n     </changelog>\n   </subsection>",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Some constant types are never used so they can be swallowed which means returning null. That could trigger an NPE so make sure it doesn't.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1624139 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/a906bab725ec10320a5a8e31e7b9751c9ae6b880",
        "parent": "https://github.com/apache/tomcat/commit/c3450e35afaca95aaf16cb20a34424f8a36960c5",
        "bug_id": "tomcat_319",
        "file": [
            {
                "sha": "28b337822247a68240225f1989961fb854d80e6b",
                "filename": "java/org/apache/tomcat/util/bcel/classfile/ConstantPool.java",
                "blob_url": "https://github.com/apache/tomcat/blob/a906bab725ec10320a5a8e31e7b9751c9ae6b880/java/org/apache/tomcat/util/bcel/classfile/ConstantPool.java",
                "raw_url": "https://github.com/apache/tomcat/raw/a906bab725ec10320a5a8e31e7b9751c9ae6b880/java/org/apache/tomcat/util/bcel/classfile/ConstantPool.java",
                "status": "modified",
                "changes": 9,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/bcel/classfile/ConstantPool.java?ref=a906bab725ec10320a5a8e31e7b9751c9ae6b880",
                "patch": "@@ -49,7 +49,6 @@\n      * @throws ClassFormatException\n      */\n     ConstantPool(DataInputStream file) throws IOException, ClassFormatException {\n-        byte tag;\n         constant_pool_count = file.readUnsignedShort();\n         constant_pool = new Constant[constant_pool_count];\n         /* constant_pool[0] is unused by the compiler and may be used freely\n@@ -64,9 +63,11 @@\n              *\n              * Thus we have to increment the index counter.\n              */\n-            tag = constant_pool[i].getTag();\n-            if ((tag == Constants.CONSTANT_Double) || (tag == Constants.CONSTANT_Long)) {\n-                i++;\n+            if (constant_pool[i] != null) {\n+                byte tag = constant_pool[i].getTag();\n+                if ((tag == Constants.CONSTANT_Double) || (tag == Constants.CONSTANT_Long)) {\n+                    i++;\n+                }\n             }\n         }\n     }",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Add back the NPE check for now since the testsuite confirms it with all connectors.\nhttp://ci.apache.org/builders/tomcat-trunk/builds/224/steps/compile_1/logs/stdio\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1606271 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/7dd13751192e3d299a23d871b9d678ca20c55ed7",
        "parent": "https://github.com/apache/tomcat/commit/6304f2b5651f1915b535c6bc9d061e4768cb85b6",
        "bug_id": "tomcat_320",
        "file": [
            {
                "sha": "6d05b28ebe54370a7454f3fef48425de71b51bf8",
                "filename": "java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "blob_url": "https://github.com/apache/tomcat/blob/7dd13751192e3d299a23d871b9d678ca20c55ed7/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "raw_url": "https://github.com/apache/tomcat/raw/7dd13751192e3d299a23d871b9d678ca20c55ed7/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java?ref=7dd13751192e3d299a23d871b9d678ca20c55ed7",
                "patch": "@@ -260,7 +260,9 @@ void startMessage(byte opCode, ByteBuffer payload, boolean last,\n         messageParts.add(new MessagePart(opCode, payload, last,\n                 new EndMessageHandler(this, handler)));\n \n-        messageParts = transformation.sendMessagePart(messageParts);\n+        if (transformation != null) {\n+            messageParts = transformation.sendMessagePart(messageParts);\n+        }\n \n         MessagePart mp = messageParts.remove(0);\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Better way to avoid NPE in resource cache - don't let the request get that far when we know we are going to fail it anyway.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1573370 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/979b3c0a867665afaa8d1b11f354151240423e76",
        "parent": "https://github.com/apache/tomcat/commit/be469f5c52bc5df1fe132ce101b07160a604f0aa",
        "bug_id": "tomcat_321",
        "file": [
            {
                "sha": "05e14eb705d13530dda9760a17448c25cfa7eb14",
                "filename": "java/org/apache/catalina/webresources/AbstractResourceSet.java",
                "blob_url": "https://github.com/apache/tomcat/blob/979b3c0a867665afaa8d1b11f354151240423e76/java/org/apache/catalina/webresources/AbstractResourceSet.java",
                "raw_url": "https://github.com/apache/tomcat/raw/979b3c0a867665afaa8d1b11f354151240423e76/java/org/apache/catalina/webresources/AbstractResourceSet.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/webresources/AbstractResourceSet.java?ref=979b3c0a867665afaa8d1b11f354151240423e76",
                "patch": "@@ -39,7 +39,8 @@\n \n     protected final void checkPath(String path) {\n         if (path == null || path.length() == 0 || path.charAt(0) != '/') {\n-            throw new IllegalArgumentException();\n+            throw new IllegalArgumentException(\n+                    sm.getString(\"abstractResourceSet.checkPath\", path));\n         }\n     }\n ",
                "deletions": 1
            },
            {
                "sha": "f5abdbf0c3af67a7e08b393b9f91a333cd3b1adf",
                "filename": "java/org/apache/catalina/webresources/Cache.java",
                "blob_url": "https://github.com/apache/tomcat/blob/979b3c0a867665afaa8d1b11f354151240423e76/java/org/apache/catalina/webresources/Cache.java",
                "raw_url": "https://github.com/apache/tomcat/raw/979b3c0a867665afaa8d1b11f354151240423e76/java/org/apache/catalina/webresources/Cache.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/webresources/Cache.java?ref=979b3c0a867665afaa8d1b11f354151240423e76",
                "patch": "@@ -145,7 +145,7 @@ protected void backgroundProcess() {\n \n     private boolean noCache(String path) {\n         // Don't cache resources used by the class loader (it has its own cache)\n-        if (path == null || path.startsWith(\"/WEB-INF/classes\") ||\n+        if (path.startsWith(\"/WEB-INF/classes\") ||\n                 path.startsWith(\"/WEB-INF/lib\")) {\n             return true;\n         }",
                "deletions": 1
            },
            {
                "sha": "770b5e83125334114b9313d762a6593d2d3de2e6",
                "filename": "java/org/apache/catalina/webresources/LocalStrings.properties",
                "blob_url": "https://github.com/apache/tomcat/blob/979b3c0a867665afaa8d1b11f354151240423e76/java/org/apache/catalina/webresources/LocalStrings.properties",
                "raw_url": "https://github.com/apache/tomcat/raw/979b3c0a867665afaa8d1b11f354151240423e76/java/org/apache/catalina/webresources/LocalStrings.properties",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/webresources/LocalStrings.properties?ref=979b3c0a867665afaa8d1b11f354151240423e76",
                "patch": "@@ -14,9 +14,12 @@\n # limitations under the License.\n \n abstractArchiveResourceSet.setReadOnlyFalse=Archive based WebResourceSets such as those based on JARs are hard-coded to be read-only and may not be configured to be read-write\n+\n abstractResource.getContentFail=Unable to return [{0}] as a byte array\n abstractResource.getContentTooLarge=Unable to return [{0}] as a byte array since the resource is [{1}] bytes in size which is larger than the maximum size of a byte array\n \n+abstractResourceSet.checkPath=The requested path [{0}] is not valid. It must begin with \"/\".\n+\n cache.addFail=Unable to add the resource at [{0}] to the cache because there was insufficient free space available after evicting expired cache entries - consider increasing the maximum size of the cache\n cache.backgroundEvictFail=The background cache eviction process was unable to free [{0}] percent of the cache for Context [{1}] - consider increasing the maximum size of the cache. After eviction approximately [{2}] KB of data remained in the cache.\n cache.objectMaxSizeTooBig=The value of [{0}]kB for objectMaxSize is larger than the limit of maxSize/20 so has been reduced to [{1}]kB\n@@ -37,6 +40,7 @@ standardRoot.createInvalidFile=Unable to create WebResourceSet from [{0}]\n standardRoot.createNoFileResourceSet=The FileResourceSet feature has not yet been implemented\n standardRoot.createUnknownType=Unable to create WebResourceSet of unknown type [{0}]\n standardRoot.invalidPath=The resource path [{0}] is not valid\n+standardRoot.invalidPathNormal=The resource path [{0}] has been normalized to [{1}] which is not valid\n standardRoot.lockedFile=The web application [{0}] failed to close the file [{1}] opened via the following stack trace\n standardRoot.noContext=A Context has not been configured for this WebResourceRoot\n standardRoot.startInvalidMain=The main resource set specified [{0}] is not valid",
                "deletions": 0
            },
            {
                "sha": "0020ddb67e88fe8386547ff6c05d260b80743495",
                "filename": "java/org/apache/catalina/webresources/StandardRoot.java",
                "blob_url": "https://github.com/apache/tomcat/blob/979b3c0a867665afaa8d1b11f354151240423e76/java/org/apache/catalina/webresources/StandardRoot.java",
                "raw_url": "https://github.com/apache/tomcat/raw/979b3c0a867665afaa8d1b11f354151240423e76/java/org/apache/catalina/webresources/StandardRoot.java",
                "status": "modified",
                "changes": 9,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/webresources/StandardRoot.java?ref=979b3c0a867665afaa8d1b11f354151240423e76",
                "patch": "@@ -237,7 +237,14 @@ private String validate(String path) {\n             throw new IllegalArgumentException(\n                     sm.getString(\"standardRoot.invalidPath\", path));\n         }\n-        return RequestUtil.normalize(path);\n+\n+        String result = RequestUtil.normalize(path);\n+        if (result == null || result.length() == 0 || !result.startsWith(\"/\")) {\n+            throw new IllegalArgumentException(\n+                    sm.getString(\"standardRoot.invalidPathNormal\", path, result));\n+        }\n+\n+        return result;\n     }\n \n     protected final WebResource getResourceInternal(String path,",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55995\nFix NPE when using JspC and there are JARs containing TLDs on the classpath\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1558019 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/5e6b8848167194e958f1e73c3e0a1cff81be74f0",
        "parent": "https://github.com/apache/tomcat/commit/1c1dc3b18fb5b63ebee35f4bff311bd10bdc8329",
        "bug_id": "tomcat_322",
        "file": [
            {
                "sha": "cfa046518bdf5ed8d351de7c9062524803930ae4",
                "filename": "java/org/apache/jasper/compiler/TldCache.java",
                "blob_url": "https://github.com/apache/tomcat/blob/5e6b8848167194e958f1e73c3e0a1cff81be74f0/java/org/apache/jasper/compiler/TldCache.java",
                "raw_url": "https://github.com/apache/tomcat/raw/5e6b8848167194e958f1e73c3e0a1cff81be74f0/java/org/apache/jasper/compiler/TldCache.java",
                "status": "modified",
                "changes": 21,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/TldCache.java?ref=5e6b8848167194e958f1e73c3e0a1cff81be74f0",
                "patch": "@@ -121,14 +121,19 @@ public TaglibXml getTaglibXml(TldResourcePath tldResourcePath) throws JasperExce\n         result[0] = -1;\n         result[1] = -1;\n         try {\n-            URL url = servletContext.getResource(tldResourcePath.getWebappPath());\n-            URLConnection conn = url.openConnection();\n-            result[0] = conn.getLastModified();\n-            if (\"file\".equals(url.getProtocol())) {\n-                // Reading the last modified time opens an input stream so we\n-                // need to make sure it is closed again otherwise the TLD file\n-                // will be locked until GC runs.\n-                conn.getInputStream().close();\n+            String webappPath = tldResourcePath.getWebappPath();\n+            if (webappPath != null) {\n+                // webappPath will be null for JARs containing TLDs that are on\n+                // the class path but not part of the web application\n+                URL url = servletContext.getResource(tldResourcePath.getWebappPath());\n+                URLConnection conn = url.openConnection();\n+                result[0] = conn.getLastModified();\n+                if (\"file\".equals(url.getProtocol())) {\n+                    // Reading the last modified time opens an input stream so we\n+                    // need to make sure it is closed again otherwise the TLD file\n+                    // will be locked until GC runs.\n+                    conn.getInputStream().close();\n+                }\n             }\n             Jar jar = tldResourcePath.getJar();\n             if (jar != null) {",
                "deletions": 8
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54693.\n- Add a validationQueryTimeout property\n- Avoid NPE caused by createConnection(..) returns null. (see Comment 6)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1521024 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a",
        "parent": "https://github.com/apache/tomcat/commit/f4c1e4f78a8b7a6e38ea84fbd06fc006e88e6a11",
        "bug_id": "tomcat_323",
        "file": [
            {
                "sha": "81eecf25d44ef6f2c942da19eddd330ac26e8d99",
                "filename": "modules/jdbc-pool/doc/jdbc-pool.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/doc/jdbc-pool.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/doc/jdbc-pool.xml",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/doc/jdbc-pool.xml?ref=b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a",
                "patch": "@@ -274,6 +274,15 @@\n          Example values are <code>SELECT 1</code>(mysql), <code>select 1 from dual</code>(oracle), <code>SELECT 1</code>(MS Sql Server)\n       </p>\n     </attribute>\n+    \n+    <attribute name=\"validationQueryTimeout\" required=\"false\">\n+      <p>(int) The timeout in seconds before a connection validation queries fail.  This works by calling \n+         <code>java.sql.Statement.setQueryTimeout(seconds)</code> on the statement that executes the <code>validationQuery</code>.\n+         The pool itself doesn't timeout the query, it is still up to the JDBC driver to enforce query timeouts. \n+         A value less than or equal to zero will disable this feature. \n+         The default value is <code>-1</code>.\n+      </p>\n+    </attribute>\n \n     <attribute name=\"validatorClassName\" required=\"false\">\n       <p>(String) The name of a class which implements the",
                "deletions": 0
            },
            {
                "sha": "0b2dcdb4b323466be340ff9f678b30c5c7ea32f4",
                "filename": "modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java",
                "blob_url": "https://github.com/apache/tomcat/blob/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java",
                "raw_url": "https://github.com/apache/tomcat/raw/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java?ref=b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a",
                "patch": "@@ -712,7 +712,7 @@ protected PooledConnection createConnection(long now, PooledConnection notUsed,\n             } else {\n                 //validation failed, make sure we disconnect\n                 //and clean up\n-                error =true;\n+                throw new SQLException(\"Validation Query Failed, enable logValidationErrors for more details.\");\n             } //end if\n         } catch (Exception e) {\n             error = true;\n@@ -732,7 +732,6 @@ protected PooledConnection createConnection(long now, PooledConnection notUsed,\n             }\n             con.unlock();\n         }//catch\n-        return null;\n     }\n \n     /**",
                "deletions": 2
            },
            {
                "sha": "6d204ee7d6af4397485488620d583a96c57f432a",
                "filename": "modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java",
                "blob_url": "https://github.com/apache/tomcat/blob/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java",
                "raw_url": "https://github.com/apache/tomcat/raw/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java?ref=b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a",
                "patch": "@@ -80,6 +80,7 @@\n     protected static final String PROP_TESTWHILEIDLE = \"testWhileIdle\";\n     protected static final String PROP_TESTONCONNECT = \"testOnConnect\";\n     protected static final String PROP_VALIDATIONQUERY = \"validationQuery\";\n+    protected static final String PROP_VALIDATIONQUERY_TIMEOUT = \"validationQueryTimeout\";\n     protected static final String PROP_VALIDATOR_CLASS_NAME = \"validatorClassName\";\n \n     protected static final String PROP_NUMTESTSPEREVICTIONRUN = \"numTestsPerEvictionRun\";\n@@ -151,6 +152,7 @@\n         PROP_URL,\n         PROP_USERNAME,\n         PROP_VALIDATIONQUERY,\n+        PROP_VALIDATIONQUERY_TIMEOUT,\n         PROP_VALIDATOR_CLASS_NAME,\n         PROP_VALIDATIONINTERVAL,\n         PROP_ACCESSTOUNDERLYINGCONNECTIONALLOWED,\n@@ -369,6 +371,11 @@ public static PoolConfiguration parsePoolProperties(Properties properties) {\n         if (value != null) {\n             poolProperties.setValidationQuery(value);\n         }\n+        \n+        value = properties.getProperty(PROP_VALIDATIONQUERY_TIMEOUT);\n+        if (value != null) {\n+            poolProperties.setValidationQueryTimeout(Integer.parseInt(value));\n+        }\n \n         value = properties.getProperty(PROP_VALIDATOR_CLASS_NAME);\n         if (value != null) {",
                "deletions": 0
            },
            {
                "sha": "3e3af9ada851b61fda4329a3aa10621e1e1de22d",
                "filename": "modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java",
                "blob_url": "https://github.com/apache/tomcat/blob/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java",
                "raw_url": "https://github.com/apache/tomcat/raw/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java",
                "status": "modified",
                "changes": 18,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java?ref=b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a",
                "patch": "@@ -452,6 +452,15 @@ public void setValidationQuery(String validationQuery) {\n     public void setValidatorClassName(String className) {\n         this.poolProperties.setValidatorClassName(className);\n     }\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n+    \n+    @Override\n+    public void setValidationQueryTimeout(int validationQueryTimeout) {\n+        this.poolProperties.setValidationQueryTimeout(validationQueryTimeout);\n+    }\n \n     /**\n      * {@inheritDoc}\n@@ -925,6 +934,15 @@ public String getValidationQuery() {\n         return getPoolProperties().getValidationQuery();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    \n+    @Override\n+    public int getValidationQueryTimeout() {\n+        return getPoolProperties().getValidationQueryTimeout();\n+    }\n+    \n     /**\n      * {@inheritDoc}\n      */",
                "deletions": 0
            },
            {
                "sha": "bc854cc7440da9a03bcc6f98cb978384c3a16caa",
                "filename": "modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java",
                "blob_url": "https://github.com/apache/tomcat/blob/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java",
                "raw_url": "https://github.com/apache/tomcat/raw/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java",
                "status": "modified",
                "changes": 13,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java?ref=b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a",
                "patch": "@@ -523,6 +523,19 @@\n      */\n     public void setValidationQuery(String validationQuery);\n \n+    /**\n+     * The timeout in seconds before a connection validation queries fail.\n+     * A value less than or equal to zero will disable this feature.  Defaults to -1. \n+     * @return the timeout value in seconds \n+     */\n+    public int getValidationQueryTimeout();\n+    \n+    /**\n+     * The timeout in seconds before a connection validation queries fail.\n+     * A value less than or equal to zero will disable this feature.  Defaults to -1. \n+     */\n+    public void setValidationQueryTimeout(int validationQueryTimeout);\n+    \n     /**\n      * Return the name of the optional validator class - may be null.\n      *",
                "deletions": 0
            },
            {
                "sha": "136a2c5fdcfbdd9a019036d93727e3164d70b686",
                "filename": "modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java",
                "blob_url": "https://github.com/apache/tomcat/blob/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java",
                "raw_url": "https://github.com/apache/tomcat/raw/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java",
                "status": "modified",
                "changes": 17,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java?ref=b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a",
                "patch": "@@ -57,6 +57,7 @@\n     private volatile int minIdle = initialSize;\n     private volatile int maxWait = 30000;\n     private volatile String validationQuery;\n+    private volatile int validationQueryTimeout = -1;\n     private volatile String validatorClassName;\n     private volatile Validator validator;\n     private volatile boolean testOnBorrow = false;\n@@ -379,6 +380,22 @@ public String getValidationQuery() {\n         return validationQuery;\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public int getValidationQueryTimeout() {\n+        return validationQueryTimeout;\n+    }\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void setValidationQueryTimeout(int validationQueryTimeout) {\n+        this.validationQueryTimeout = validationQueryTimeout;\n+    }\n+    \n     /**\n      * {@inheritDoc}\n      */",
                "deletions": 0
            },
            {
                "sha": "02a986896348af8594d1038f89d43f9c3d907c59",
                "filename": "modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnection.java",
                "blob_url": "https://github.com/apache/tomcat/blob/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnection.java",
                "raw_url": "https://github.com/apache/tomcat/raw/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnection.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnection.java?ref=b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a",
                "patch": "@@ -451,6 +451,12 @@ public boolean validate(int validateAction,String sql) {\n         Statement stmt = null;\n         try {\n             stmt = connection.createStatement();\n+            \n+            int validationQueryTimeout = poolProperties.getValidationQueryTimeout();\n+            if (validationQueryTimeout > 0) {\n+                stmt.setQueryTimeout(validationQueryTimeout);\n+            }\n+            \n             stmt.execute(query);\n             stmt.close();\n             this.lastValidated = now;",
                "deletions": 0
            },
            {
                "sha": "66013d9a30b8dd9bab9343151cdc183618c663c5",
                "filename": "modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java",
                "blob_url": "https://github.com/apache/tomcat/blob/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java",
                "raw_url": "https://github.com/apache/tomcat/raw/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java?ref=b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a",
                "patch": "@@ -310,6 +310,11 @@ public long getValidationInterval() {\n     public String getValidationQuery() {\n         return getPoolProperties().getValidationQuery();\n     }\n+    \n+    @Override\n+    public int getValidationQueryTimeout() {\n+        return getPoolProperties().getValidationQueryTimeout();\n+    }\n \n     /**\n      * {@inheritDoc}\n@@ -664,6 +669,11 @@ public void setValidationQuery(String validationQuery) {\n         getPoolProperties().setValidationQuery(validationQuery);\n     }\n \n+    @Override\n+    public void setValidationQueryTimeout(int validationQueryTimeout) {\n+        getPoolProperties().setValidationQueryTimeout(validationQueryTimeout);\n+    }\n+    \n     /**\n      * {@inheritDoc}\n      */",
                "deletions": 0
            },
            {
                "sha": "0e6682ebdd6085491af58b824ec4fccb37d994c2",
                "filename": "modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/mbeans-descriptors.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/mbeans-descriptors.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/mbeans-descriptors.xml",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/mbeans-descriptors.xml?ref=b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a",
                "patch": "@@ -125,6 +125,11 @@\n            description=\"The query to run during validation\"\n                   type=\"java.lang.String\"\n              writeable=\"false\"/>\n+             \n+    <attribute    name=\"validationQueryTimeout\"\n+           description=\"The timeout in seconds before a connection validation queries fail\"\n+                  type=\"java.lang.Integer\"\n+             writeable=\"false\" />\n \n     <attribute    name=\"testOnBorrow\"\n            description=\"True if validation happens when a connection is requested\"",
                "deletions": 0
            },
            {
                "sha": "c681e52828c5818f982d82473635d7ea65f99204",
                "filename": "modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/TestValidationQueryTimeout.java",
                "blob_url": "https://github.com/apache/tomcat/blob/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/TestValidationQueryTimeout.java",
                "raw_url": "https://github.com/apache/tomcat/raw/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/TestValidationQueryTimeout.java",
                "status": "added",
                "changes": 249,
                "additions": 249,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/TestValidationQueryTimeout.java?ref=b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a",
                "patch": "@@ -0,0 +1,249 @@\n+package org.apache.tomcat.jdbc.test;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.DriverPropertyInfo;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.sql.Statement;\n+import java.util.Properties;\n+import java.util.logging.Logger;\n+\n+import junit.framework.Assert;\n+\n+import org.apache.tomcat.jdbc.pool.interceptor.QueryTimeoutInterceptor;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class TestValidationQueryTimeout extends DefaultTestCase {\n+    \n+    private static int TIMEOUT = 10;\n+    private static boolean isTimeoutSet;\n+    private static final String longQuery = \"select * from test as A, test as B, test as C, test as D, test as E\";\n+    \n+    @Before\n+    public void setUp() throws SQLException {\n+        DriverManager.registerDriver(new MockDriver());\n+        \n+        // use our mock driver\n+        this.datasource.setDriverClassName(MockDriver.class.getName());\n+        this.datasource.setUrl(MockDriver.url);\n+        \n+        // Required to trigger validation query's execution \n+        this.datasource.setInitialSize(1);\n+        this.datasource.setTestOnBorrow(true);\n+        this.datasource.setValidationInterval(-1);\n+        this.datasource.setValidationQuery(\"SELECT 1\");\n+        this.datasource.setValidationQueryTimeout(TIMEOUT);\n+        \n+        TIMEOUT = 10;\n+        isTimeoutSet = false;\n+    }\n+    \n+    @After\n+    public void tearDown() throws SQLException {\n+        DriverManager.deregisterDriver(new MockDriver());\n+    }\n+    \n+    @Test\n+    public void testValidationQueryTimeoutEnabled() throws Exception {\n+        // because testOnBorrow is true, this triggers the validation query\n+        this.datasource.getConnection();\n+        Assert.assertTrue(isTimeoutSet);\n+    }\n+    \n+    @Test\n+    public void testValidationQueryTimeoutDisabled() throws Exception {\n+        this.datasource.setValidationQueryTimeout(-1);\n+        \n+        // because testOnBorrow is true, this triggers the validation query\n+        this.datasource.getConnection();\n+        Assert.assertFalse(isTimeoutSet);\n+    }\n+    \n+    @Test\n+    public void testValidationQueryTimeoutWithQueryTimeoutInterceptor() throws Exception {\n+        int interceptorTimeout = 30;\n+        this.datasource.setJdbcInterceptors(\n+                            QueryTimeoutInterceptor.class.getName()+\n+                            \"(queryTimeout=\"+ interceptorTimeout +\")\");\n+        \n+        // because testOnBorrow is true, this triggers the validation query\n+        Connection con = this.datasource.getConnection();\n+        Assert.assertTrue(isTimeoutSet);\n+        \n+        // increase the expected timeout to 30, which is what we set for the interceptor\n+        TIMEOUT = 30;\n+        \n+        // now create a statement, make sure the query timeout is set by the interceptor\n+        Statement st = con.createStatement();\n+        Assert.assertEquals(interceptorTimeout, st.getQueryTimeout());\n+        st.close();\n+        st = con.prepareStatement(\"\");\n+        Assert.assertEquals(interceptorTimeout, st.getQueryTimeout());\n+        st.close();\n+        st = con.prepareCall(\"\");\n+        Assert.assertEquals(interceptorTimeout, st.getQueryTimeout());\n+        st.close();\n+        con.close();\n+        \n+        // pull another connection and check it\n+        TIMEOUT = 10;\n+        isTimeoutSet = false;\n+        this.datasource.getConnection();\n+        Assert.assertTrue(isTimeoutSet);\n+    }\n+    \n+    // this test depends on the execution time of the validation query\n+    //   specifically, it needs to run for longer than 1 second to pass\n+    //   if this fails\n+    @Test(expected=SQLException.class) \n+    public void testValidationQueryTimeoutOnConnection() throws Exception {\n+        // use our mock driver\n+        this.datasource.setDriverClassName(\"org.h2.Driver\");\n+        this.datasource.setUrl(\"jdbc:h2:~/.h2/test;QUERY_TIMEOUT=0;DB_CLOSE_ON_EXIT=FALSE\");\n+        \n+        // Required to trigger validation query's execution \n+        this.datasource.setTestOnConnect(true);\n+        this.datasource.setValidationInterval(-1);\n+        this.datasource.setValidationQuery(longQuery);\n+        this.datasource.setValidationQueryTimeout(1);\n+        \n+        this.datasource.getConnection();\n+    }\n+    \n+    @Test(expected=SQLException.class)\n+    public void testValidationInvalidOnConnection() throws Exception {\n+        // use our mock driver\n+        this.datasource.setDriverClassName(\"org.h2.Driver\");\n+        this.datasource.setUrl(\"jdbc:h2:~/.h2/test;QUERY_TIMEOUT=0;DB_CLOSE_ON_EXIT=FALSE\");\n+        \n+        // Required to trigger validation query's execution \n+        this.datasource.setTestOnBorrow(true);\n+        this.datasource.setInitialSize(1);\n+        this.datasource.setTestOnConnect(true);\n+        this.datasource.setValidationInterval(-1);\n+        this.datasource.setValidationQuery(\"SELECT\");\n+        this.datasource.setValidationQueryTimeout(1);\n+        \n+        this.datasource.getConnection();\n+    }\n+    \n+    @Test\n+    public void testLongValidationQueryTime() throws Exception {\n+        // use our mock driver\n+        this.datasource.setDriverClassName(\"org.h2.Driver\");\n+        this.datasource.setUrl(\"jdbc:h2:~/.h2/test;QUERY_TIMEOUT=0;DB_CLOSE_ON_EXIT=FALSE\");\n+        Connection con = this.datasource.getConnection();\n+        Statement stmt = null;\n+        long start = 0, end = 0;\n+        try {\n+            stmt = con.createStatement();\n+            // set the query timeout to 2 sec\n+            //  this keeps this test from slowing things down too much\n+            stmt.setQueryTimeout(2);\n+            // assert that our long query takes longer than one second to run\n+            //  this is a requirement for other tests to run properly\n+            start = System.currentTimeMillis();\n+            stmt.execute(longQuery);\n+        } catch (SQLException ex) {}\n+        finally {\n+            end = System.currentTimeMillis();\n+        \n+            if (stmt != null) { stmt.close(); }\n+            if (con != null) { con.close(); }\n+            \n+            Assert.assertTrue(start != 0 && end != 0);\n+            Assert.assertTrue((end - start) > 1000);\n+        }\n+    }\n+    \n+    @Test\n+    public void testValidationQueryTimeoutOnBorrow() throws Exception {\n+        // use our mock driver\n+        this.datasource.setDriverClassName(\"org.h2.Driver\");\n+        this.datasource.setUrl(\"jdbc:h2:~/.h2/test;QUERY_TIMEOUT=0;DB_CLOSE_ON_EXIT=FALSE\");\n+        \n+        // Required to trigger validation query's execution \n+        this.datasource.setTestOnBorrow(true);\n+        this.datasource.setValidationInterval(-1);\n+        this.datasource.setValidationQuery(longQuery);\n+        this.datasource.setValidationQueryTimeout(1);\n+        \n+        // assert that even though the validation query times out, we still get a connection\n+        Connection con = this.datasource.getConnection();\n+        Assert.assertNotNull(con);\n+        Statement st = con.createStatement();\n+        ResultSet rs = st.executeQuery(\"SELECT 1\");\n+        rs.close();\n+        st.close();\n+        con.close();\n+    }\n+    \n+    /**\n+     * Mock Driver, Connection and Statement implementations use to verify setQueryTimeout was called.\n+     */\n+    public static class MockDriver implements java.sql.Driver {\n+        public static final String url = \"jdbc:tomcat:mock\";\n+\n+        public MockDriver() {\n+        }\n+\n+        @Override\n+        public boolean acceptsURL(String url) throws SQLException {\n+            return url!=null && url.equals(MockDriver.url);\n+        }\n+\n+        @Override\n+        public Connection connect(String url, Properties info) throws SQLException {\n+            return new MockConnection(info);\n+        }\n+\n+        @Override\n+        public int getMajorVersion() {\n+            return 0;\n+        }\n+\n+        @Override\n+        public int getMinorVersion() {\n+            return 0;\n+        }\n+\n+        @Override\n+        public DriverPropertyInfo[] getPropertyInfo(String url, Properties info) throws SQLException {\n+            return null;\n+        }\n+\n+        @Override\n+        public boolean jdbcCompliant() {\n+            return false;\n+        }\n+\n+        @Override\n+        public Logger getParentLogger() throws SQLFeatureNotSupportedException {\n+            return null;\n+        }\n+    }\n+    \n+    public static class MockConnection extends org.apache.tomcat.jdbc.test.driver.Connection {\n+        public MockConnection(Properties info) {\n+            super(info);\n+        }\n+\n+        @Override\n+        public Statement createStatement() throws SQLException {\n+            return new MockStatement();\n+        }\n+    }\n+    \n+    public static class MockStatement extends org.apache.tomcat.jdbc.test.driver.Statement {\n+        @Override\n+        public void setQueryTimeout(int seconds) throws SQLException {\n+            super.setQueryTimeout(seconds);\n+            Assert.assertEquals(TIMEOUT, seconds);\n+            isTimeoutSet = true;\n+        }\n+    }\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "javax.el.BeanELResolver:\n- getFeatureDescriptors, getCommonPropertyType do not throw NPE when the supplied context is null.\n- setValue will throw PropertyNotWritableException instead of PropertyNotFoundException when there is no setter for the property.\n- unit test is added\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1517536 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/b92d9be3771e92d1108f5dbd2df663c4e187c1cc",
        "parent": "https://github.com/apache/tomcat/commit/909def5c24f31bed5bae31c3090c5734057d0d09",
        "bug_id": "tomcat_324",
        "file": [
            {
                "sha": "8a6c02f1325afeb35eea09a0700ba8255da6fdea",
                "filename": "java/javax/el/BeanELResolver.java",
                "blob_url": "https://github.com/apache/tomcat/blob/b92d9be3771e92d1108f5dbd2df663c4e187c1cc/java/javax/el/BeanELResolver.java",
                "raw_url": "https://github.com/apache/tomcat/raw/b92d9be3771e92d1108f5dbd2df663c4e187c1cc/java/javax/el/BeanELResolver.java",
                "status": "modified",
                "changes": 10,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/javax/el/BeanELResolver.java?ref=b92d9be3771e92d1108f5dbd2df663c4e187c1cc",
                "patch": "@@ -205,10 +205,6 @@ public boolean isReadOnly(ELContext context, Object base, Object property) {\n \n     @Override\n     public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {\n-        if (context == null) {\n-            throw new NullPointerException();\n-        }\n-\n         if (base == null) {\n             return null;\n         }\n@@ -230,10 +226,6 @@ public boolean isReadOnly(ELContext context, Object base, Object property) {\n \n     @Override\n     public Class<?> getCommonPropertyType(ELContext context, Object base) {\n-        if (context == null) {\n-            throw new NullPointerException();\n-        }\n-\n         if (base != null) {\n             return Object.class;\n         }\n@@ -319,7 +311,7 @@ private Method write(ELContext ctx) {\n             if (this.write == null) {\n                 this.write = Util.getMethod(this.owner, descriptor.getWriteMethod());\n                 if (this.write == null) {\n-                    throw new PropertyNotFoundException(Util.message(ctx,\n+                    throw new PropertyNotWritableException(Util.message(ctx,\n                             \"propertyNotWritable\", new Object[] {\n                                     owner.getName(), descriptor.getName() }));\n                 }",
                "deletions": 9
            },
            {
                "sha": "44fbdc32bb9d60a5f332e105910c161bfa3e3747",
                "filename": "test/javax/el/TestBeanELResolver.java",
                "blob_url": "https://github.com/apache/tomcat/blob/b92d9be3771e92d1108f5dbd2df663c4e187c1cc/test/javax/el/TestBeanELResolver.java",
                "raw_url": "https://github.com/apache/tomcat/raw/b92d9be3771e92d1108f5dbd2df663c4e187c1cc/test/javax/el/TestBeanELResolver.java",
                "status": "modified",
                "changes": 446,
                "additions": 445,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/javax/el/TestBeanELResolver.java?ref=b92d9be3771e92d1108f5dbd2df663c4e187c1cc",
                "patch": "@@ -16,14 +16,26 @@\n  */\n package javax.el;\n \n-import org.junit.Assert;\n+import java.beans.FeatureDescriptor;\n+import java.beans.PropertyDescriptor;\n+import java.util.Iterator;\n \n+import org.junit.Assert;\n import org.junit.Test;\n \n import org.apache.jasper.el.ELContextImpl;\n \n public class TestBeanELResolver {\n \n+    private static final String METHOD01_NAME = \"toString\";\n+    private static final String METHOD02_NAME = \"<init>\";\n+    private static final String METHOD03_NAME = \"nonExistingMethod\";\n+    private static final String BEAN_NAME = \"test\";\n+    private static final String PROPERTY01_NAME = \"valueA\";\n+    private static final String PROPERTY02_NAME = \"valueB\";\n+    private static final String PROPERTY03_NAME = \"name\";\n+    private static final String PROPERTY_VALUE = \"test1\";\n+\n     @Test\n     public void testBug53421() {\n         ExpressionFactory factory = ExpressionFactory.newInstance();\n@@ -54,11 +66,443 @@ public void testBug53421() {\n                 msg.contains(type));\n     }\n \n+    /**\n+     * Tests that a null context results in an NPE as per EL Javadoc.\n+     */\n+    @Test(expected = NullPointerException.class)\n+    public void testGetType01() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        resolver.getType(null, new Object(), new Object());\n+    }\n+\n+    /**\n+     * Tests that a valid property is not resolved if base is null.\n+     */\n+    @Test\n+    public void testGetType02() {\n+        doNegativeTest(null, new Object(), MethodUnderTest.GET_TYPE, true);\n+    }\n+\n+    /**\n+     * Tests that a valid property is resolved.\n+     */\n+    @Test\n+    public void testGetType03() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        Class<?> result = resolver.getType(context, new Bean(), PROPERTY01_NAME);\n+\n+        Assert.assertEquals(String.class, result);\n+        Assert.assertTrue(context.isPropertyResolved());\n+    }\n+\n+    /**\n+     * Tests that an exception will be thrown when the property does not exist.\n+     */\n+    @Test(expected = PropertyNotFoundException.class)\n+    public void testGetType04() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        resolver.getType(context, new Bean(), PROPERTY02_NAME);\n+    }\n+\n+    /**\n+     * Tests that an exception will be thrown when a coercion cannot be\n+     * performed.\n+     */\n+    @Test(expected = PropertyNotFoundException.class)\n+    public void testGetType05() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        resolver.getType(context, new Bean(), new Object());\n+    }\n+\n+    /**\n+     * Tests that a null context results in an NPE as per EL Javadoc.\n+     */\n+    @Test(expected = NullPointerException.class)\n+    public void testGetValue01() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        resolver.getValue(null, new Object(), new Object());\n+    }\n+\n+    /**\n+     * Tests that a valid property is not resolved if base is null.\n+     */\n+    @Test\n+    public void testGetValue02() {\n+        doNegativeTest(null, new Object(), MethodUnderTest.GET_VALUE, true);\n+    }\n+\n+    /**\n+     * Tests that a valid property is resolved.\n+     */\n+    @Test\n+    public void testGetValue03() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        Object result = resolver.getValue(context, new TesterBean(BEAN_NAME), PROPERTY03_NAME);\n+\n+        Assert.assertEquals(BEAN_NAME, result);\n+        Assert.assertTrue(context.isPropertyResolved());\n+    }\n+\n+    /**\n+     * Tests that an exception will be thrown when the property does not exist.\n+     */\n+    @Test(expected = PropertyNotFoundException.class)\n+    public void testGetValue04() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        resolver.getValue(context, new Bean(), PROPERTY02_NAME);\n+    }\n+\n+    /**\n+     * Tests that an exception will be thrown when a coercion cannot be\n+     * performed.\n+     */\n+    @Test(expected = PropertyNotFoundException.class)\n+    public void testGetValue05() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        resolver.getValue(context, new Bean(), new Object());\n+    }\n+\n+    /**\n+     * Tests that an exception will be thrown when the property is not readable.\n+     */\n+    @Test(expected = PropertyNotFoundException.class)\n+    public void testGetValue06() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        resolver.getValue(context, new Bean(), PROPERTY01_NAME);\n+    }\n+\n+    /**\n+     * Tests that getter method throws exception which should be propagated.\n+     */\n+    @Test(expected = ELException.class)\n+    public void testGetValue07() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        resolver.getValue(context, new TesterBean(BEAN_NAME), PROPERTY01_NAME);\n+    }\n+\n+    /**\n+     * Tests that a null context results in an NPE as per EL Javadoc.\n+     */\n+    @Test(expected = NullPointerException.class)\n+    public void testSetValue01() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        resolver.setValue(null, new Object(), new Object(), new Object());\n+    }\n+\n+    /**\n+     * Tests that a valid property is not resolved if base is null.\n+     */\n+    @Test\n+    public void testSetValue02() {\n+        doNegativeTest(null, new Object(), MethodUnderTest.SET_VALUE, true);\n+    }\n+\n+    /**\n+     * Tests that an exception is thrown when readOnly is true.\n+     */\n+    @Test(expected = PropertyNotWritableException.class)\n+    public void testSetValue03() {\n+        BeanELResolver resolver = new BeanELResolver(true);\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        resolver.setValue(context, new Bean(), new Object(), new Object());\n+    }\n+\n+    /**\n+     * Tests that a valid property is resolved.\n+     */\n+    @Test\n+    public void testSetValue04() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        TesterBean bean = new TesterBean(BEAN_NAME);\n+        resolver.setValue(context, bean, PROPERTY03_NAME, PROPERTY_VALUE);\n+\n+        Assert.assertEquals(PROPERTY_VALUE, resolver.getValue(context, bean, PROPERTY03_NAME));\n+        Assert.assertTrue(context.isPropertyResolved());\n+    }\n+\n+    /**\n+     * Tests that an exception will be thrown when a coercion cannot be\n+     * performed.\n+     */\n+    @Test(expected = PropertyNotFoundException.class)\n+    public void testSetValue05() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        resolver.setValue(context, new Bean(), new Object(), PROPERTY_VALUE);\n+    }\n+\n+    /**\n+     * Tests that an exception will be thrown when the property does not exist.\n+     */\n+    @Test(expected = PropertyNotFoundException.class)\n+    public void testSetValue06() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        resolver.setValue(context, new Bean(), PROPERTY02_NAME, PROPERTY_VALUE);\n+    }\n+\n+    /**\n+     * Tests that an exception will be thrown when the property does not have\n+     * setter method.\n+     */\n+    @Test(expected = PropertyNotWritableException.class)\n+    public void testSetValue07() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        resolver.setValue(context, new TesterBean(BEAN_NAME), PROPERTY01_NAME, PROPERTY_VALUE);\n+    }\n+\n+    /**\n+     * Tests that a null context results in an NPE as per EL Javadoc.\n+     */\n+    @Test(expected = NullPointerException.class)\n+    public void testIsReadOnly01() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        resolver.isReadOnly(null, new Object(), new Object());\n+    }\n+\n+    /**\n+     * Tests that the propertyResolved is false if base is null.\n+     */\n+    @Test\n+    public void testIsReadOnly02() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        resolver.isReadOnly(context, null, new Object());\n+\n+        Assert.assertFalse(context.isPropertyResolved());\n+\n+        resolver = new BeanELResolver(true);\n+\n+        resolver.isReadOnly(context, null, new Object());\n+\n+        Assert.assertFalse(context.isPropertyResolved());\n+    }\n+\n+    /**\n+     * Tests that if the BeanELResolver is constructed with readOnly the method\n+     * will return always true.\n+     */\n+    @Test\n+    public void testIsReadOnly03() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        boolean result = resolver.isReadOnly(context, new TesterBean(BEAN_NAME), PROPERTY03_NAME);\n+\n+        Assert.assertFalse(result);\n+        Assert.assertTrue(context.isPropertyResolved());\n+\n+        resolver = new BeanELResolver(true);\n+\n+        result = resolver.isReadOnly(context, new TesterBean(BEAN_NAME), PROPERTY03_NAME);\n+\n+        Assert.assertTrue(result);\n+        Assert.assertTrue(context.isPropertyResolved());\n+    }\n+\n+    /**\n+     * Tests that an exception is thrown when a coercion cannot be performed.\n+     */\n+    @Test(expected = PropertyNotFoundException.class)\n+    public void testIsReadOnly04() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        resolver.isReadOnly(context, new TesterBean(BEAN_NAME), new Integer(0));\n+    }\n+\n+    /**\n+     * Tests that an exception will be thrown when the property does not exist.\n+     */\n+    @Test(expected = PropertyNotFoundException.class)\n+    public void testIsReadOnly05() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        resolver.isReadOnly(context, new Bean(), PROPERTY02_NAME);\n+    }\n+\n+    /**\n+     * Tests that true will be returned when the property does not have setter\n+     * method.\n+     */\n+    @Test\n+    public void testIsReadOnly06() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        boolean result = resolver.isReadOnly(context, new TesterBean(BEAN_NAME), PROPERTY01_NAME);\n+\n+        Assert.assertTrue(result);\n+        Assert.assertTrue(context.isPropertyResolved());\n+    }\n+\n+    /**\n+     * Tests that a valid FeatureDescriptors are not returned if base is not\n+     * Map.\n+     */\n+    @Test\n+    public void testGetFeatureDescriptors01() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        Iterator<FeatureDescriptor> result = resolver.getFeatureDescriptors(context, null);\n+\n+        Assert.assertNull(result);\n+    }\n+\n+    /**\n+     * Tests that a valid FeatureDescriptors are returned.\n+     */\n+    @Test\n+    public void testGetFeatureDescriptors02() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        Iterator<FeatureDescriptor> result = resolver.getFeatureDescriptors(context, new Bean());\n+\n+        while (result.hasNext()) {\n+            PropertyDescriptor featureDescriptor = (PropertyDescriptor) result.next();\n+            Assert.assertEquals(featureDescriptor.getPropertyType(),\n+                    featureDescriptor.getValue(ELResolver.TYPE));\n+            Assert.assertEquals(Boolean.TRUE,\n+                    featureDescriptor.getValue(ELResolver.RESOLVABLE_AT_DESIGN_TIME));\n+        }\n+    }\n+\n+    /**\n+     * Tests that a null context results in an NPE as per EL Javadoc.\n+     */\n+    @Test(expected = NullPointerException.class)\n+    public void testInvoke01() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        resolver.invoke(null, new Object(), new Object(), new Class<?>[0], new Object[0]);\n+    }\n+\n+    /**\n+     * Tests that a valid property is not resolved if base is null.\n+     */\n+    @Test\n+    public void testInvoke02() {\n+        doNegativeTest(null, new Object(), MethodUnderTest.INVOKE, true);\n+    }\n+\n+    /**\n+     * Tests a method invocation.\n+     */\n+    @Test\n+    public void testInvoke03() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), METHOD01_NAME,\n+                new Class<?>[] {}, new Object[] {});\n+\n+        Assert.assertEquals(BEAN_NAME, result);\n+        Assert.assertTrue(context.isPropertyResolved());\n+    }\n+\n+    /**\n+     * Tests that the method name cannot be coerced to String.\n+     */\n+    @Test\n+    public void testInvoke04() {\n+        doNegativeTest(new Bean(), null, MethodUnderTest.INVOKE, true);\n+    }\n+\n+    /**\n+     * Tests that a call to &lt;init&gt; as a method name will throw an exception.\n+     */\n+    @Test(expected = MethodNotFoundException.class)\n+    public void testInvoke05() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        resolver.invoke(context, new TesterBean(BEAN_NAME), METHOD02_NAME, new Class<?>[] {},\n+                new Object[] {});\n+    }\n+\n+    /**\n+     * Tests that a call to a non existing method will throw an exception.\n+     */\n+    @Test(expected = MethodNotFoundException.class)\n+    public void testInvoke06() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        resolver.invoke(context, new TesterBean(BEAN_NAME), METHOD03_NAME, new Class<?>[] {},\n+                new Object[] {});\n+    }\n+\n     private static class Bean {\n \n         @SuppressWarnings(\"unused\")\n         public void setValueA(String valueA) {\n             // NOOP\n         }\n     }\n+\n+    private void doNegativeTest(Object base, Object trigger, MethodUnderTest method,\n+            boolean checkResult) {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        Object result = null;\n+        switch (method) {\n+        case GET_VALUE: {\n+            result = resolver.getValue(context, base, trigger);\n+            break;\n+        }\n+        case SET_VALUE: {\n+            resolver.setValue(context, base, trigger, new Object());\n+            break;\n+        }\n+        case GET_TYPE: {\n+            result = resolver.getType(context, base, trigger);\n+            break;\n+        }\n+        case INVOKE: {\n+            result = resolver.invoke(context, base, trigger, new Class<?>[0], new Object[0]);\n+            break;\n+        }\n+        default: {\n+            // Should never happen\n+            Assert.fail(\"Missing case for method\");\n+        }\n+        }\n+\n+        if (checkResult) {\n+            Assert.assertNull(result);\n+        }\n+        Assert.assertFalse(context.isPropertyResolved());\n+    }\n+\n+    private static enum MethodUnderTest {\n+        GET_VALUE, SET_VALUE, GET_TYPE, INVOKE\n+    }\n+\n }",
                "deletions": 1
            },
            {
                "sha": "2169d5952f514fc4ebf28b31168b4e113a4783c3",
                "filename": "test/javax/el/TesterBean.java",
                "blob_url": "https://github.com/apache/tomcat/blob/b92d9be3771e92d1108f5dbd2df663c4e187c1cc/test/javax/el/TesterBean.java",
                "raw_url": "https://github.com/apache/tomcat/raw/b92d9be3771e92d1108f5dbd2df663c4e187c1cc/test/javax/el/TesterBean.java",
                "status": "modified",
                "changes": 10,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/javax/el/TesterBean.java?ref=b92d9be3771e92d1108f5dbd2df663c4e187c1cc",
                "patch": "@@ -18,7 +18,7 @@\n \n public class TesterBean {\n \n-    private final String name;\n+    private String name;\n \n     public TesterBean(String name) {\n         this.name = name;\n@@ -28,8 +28,16 @@ public String getName() {\n         return name;\n     }\n \n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n     @Override\n     public String toString() {\n         return getName();\n     }\n+\n+    public String getValueA() throws Exception {\n+        throw new Exception();\n+    }\n }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55238\nAvoid possible NPE.\nPatch by Niki Dokovski.\nAlso added a check to onTimeout() to save creating an Exception unnecessarily\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1502265 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/475879607bc20d7d128dfa823f665d2b242e302a",
        "parent": "https://github.com/apache/tomcat/commit/95ee699c7f17458dc439fa088feb3da91742fb11",
        "bug_id": "tomcat_325",
        "file": [
            {
                "sha": "8816933e7205dc8491842d46e9d0e2896f959652",
                "filename": "java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java",
                "blob_url": "https://github.com/apache/tomcat/blob/475879607bc20d7d128dfa823f665d2b242e302a/java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java",
                "raw_url": "https://github.com/apache/tomcat/raw/475879607bc20d7d128dfa823f665d2b242e302a/java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java",
                "status": "modified",
                "changes": 14,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java?ref=475879607bc20d7d128dfa823f665d2b242e302a",
                "patch": "@@ -142,18 +142,22 @@ protected long getTimeoutExpiry() {\n \n \n     protected void onTimeout() {\n-        clearHandler(new SocketTimeoutException());\n+        if (handler != null) {\n+            clearHandler(new SocketTimeoutException());\n+        }\n         close();\n     }\n \n \n     private void clearHandler(Throwable t) {\n         SendHandler sh = handler;\n         handler = null;\n-        if (t == null) {\n-            sh.onResult(new SendResult());\n-        } else {\n-            sh.onResult(new SendResult(t));\n+        if (sh != null) {\n+            if (t == null) {\n+                sh.onResult(new SendResult());\n+            } else {\n+                sh.onResult(new SendResult(t));\n+            }\n         }\n     }\n }",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54781\nFix NPE if no matching Endpoint is found.\nHandle forwarded requests as well.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1471123 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/67ed3e7190a6349d3e8123a49642bedd7b98f315",
        "parent": "https://github.com/apache/tomcat/commit/e26d61d6678525fefe68301351481b4c878b14f0",
        "bug_id": "tomcat_326",
        "file": [
            {
                "sha": "1770a819789ccd8485b2d3e1cca809c5dfafa21d",
                "filename": "java/org/apache/tomcat/websocket/server/WsFilter.java",
                "blob_url": "https://github.com/apache/tomcat/blob/67ed3e7190a6349d3e8123a49642bedd7b98f315/java/org/apache/tomcat/websocket/server/WsFilter.java",
                "raw_url": "https://github.com/apache/tomcat/raw/67ed3e7190a6349d3e8123a49642bedd7b98f315/java/org/apache/tomcat/websocket/server/WsFilter.java",
                "status": "modified",
                "changes": 9,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/server/WsFilter.java?ref=67ed3e7190a6349d3e8123a49642bedd7b98f315",
                "patch": "@@ -78,7 +78,7 @@ public void doFilter(ServletRequest request, ServletResponse response,\n                 !headerContainsToken((HttpServletRequest) request,\n                         Constants.UPGRADE_HEADER_NAME,\n                         Constants.UPGRADE_HEADER_VALUE)) {\n-            // Note an HTTP request that includes a valid upgrade request to\n+            // Not an HTTP request that includes a valid upgrade request to\n             // web socket\n             chain.doFilter(request, response);\n             return;\n@@ -122,6 +122,13 @@ public void doFilter(ServletRequest request, ServletResponse response,\n         }\n         WsMappingResult mappingResult = sc.findMapping(path);\n \n+        if (mappingResult == null) {\n+            // No endpoint registered for the requested path. Let the\n+            // application handle it (it might redirect or forward for example)\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+\n         ServerEndpointConfig sec = mappingResult.getConfig();\n \n         // Origin check",
                "deletions": 1
            },
            {
                "sha": "7102a9561812c17d108821e1d12244472d046358",
                "filename": "java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "blob_url": "https://github.com/apache/tomcat/blob/67ed3e7190a6349d3e8123a49642bedd7b98f315/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "raw_url": "https://github.com/apache/tomcat/raw/67ed3e7190a6349d3e8123a49642bedd7b98f315/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "status": "modified",
                "changes": 14,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/server/WsServerContainer.java?ref=67ed3e7190a6349d3e8123a49642bedd7b98f315",
                "patch": "@@ -19,12 +19,14 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.Comparator;\n+import java.util.EnumSet;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.SortedSet;\n import java.util.TreeSet;\n import java.util.WeakHashMap;\n \n+import javax.servlet.DispatcherType;\n import javax.servlet.FilterRegistration;\n import javax.servlet.ServletContext;\n import javax.websocket.DeploymentException;\n@@ -111,7 +113,11 @@ public void setServletContext(ServletContext servletContext) {\n \n         FilterRegistration fr = servletContext.addFilter(\n                 WsFilter.class.getName(), WsFilter.class);\n-        fr.addMappingForUrlPatterns(null, false, \"/*\");\n+\n+        EnumSet<DispatcherType> types = EnumSet.of(DispatcherType.REQUEST,\n+                DispatcherType.FORWARD);\n+\n+        fr.addMappingForUrlPatterns(types, false, \"/*\");\n     }\n \n \n@@ -233,6 +239,12 @@ public WsMappingResult findMapping(String path) {\n         SortedSet<TemplatePathMatch> templateMatches =\n                 configTemplateMatchMap.get(key);\n \n+        if (templateMatches == null) {\n+            // No templates with an equal number of segments so there will be\n+            // no matches\n+            return null;\n+        }\n+\n         // List is in alphabetical order of normalised templates.\n         // Correct match is the first one that matches.\n         Map<String,String> pathParams = null;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54716\nAdditional fix. Avoid NPE on session de-registration.\nBased on a patch by Nick Williams.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1458484 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/8fdcf63f22ea84ee499bb9fe519e5d4690a950c8",
        "parent": "https://github.com/apache/tomcat/commit/12f89ffd9121dd6ffb9d8f56e979bc8e9a715e04",
        "bug_id": "tomcat_327",
        "file": [
            {
                "sha": "ccb6d868b77052ae0be5a2621a08760585bff352",
                "filename": "java/org/apache/tomcat/websocket/BackgroundProcessManager.java",
                "blob_url": "https://github.com/apache/tomcat/blob/8fdcf63f22ea84ee499bb9fe519e5d4690a950c8/java/org/apache/tomcat/websocket/BackgroundProcessManager.java",
                "raw_url": "https://github.com/apache/tomcat/raw/8fdcf63f22ea84ee499bb9fe519e5d4690a950c8/java/org/apache/tomcat/websocket/BackgroundProcessManager.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/BackgroundProcessManager.java?ref=8fdcf63f22ea84ee499bb9fe519e5d4690a950c8",
                "patch": "@@ -71,7 +71,7 @@ public void register(BackgroundProcess process) {\n     public void unregister(BackgroundProcess process) {\n         synchronized (processesLock) {\n             processes.remove(process);\n-            if (processes.size() == 0) {\n+            if (wsBackgroundThread != null && processes.size() == 0) {\n                 wsBackgroundThread.halt();\n                 wsBackgroundThread = null;\n             }",
                "deletions": 1
            },
            {
                "sha": "b7ff5d6f5fb239276aba824d9b5b0ffb4f9b4623",
                "filename": "java/org/apache/tomcat/websocket/WsWebSocketContainer.java",
                "blob_url": "https://github.com/apache/tomcat/blob/8fdcf63f22ea84ee499bb9fe519e5d4690a950c8/java/org/apache/tomcat/websocket/WsWebSocketContainer.java",
                "raw_url": "https://github.com/apache/tomcat/raw/8fdcf63f22ea84ee499bb9fe519e5d4690a950c8/java/org/apache/tomcat/websocket/WsWebSocketContainer.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/WsWebSocketContainer.java?ref=8fdcf63f22ea84ee499bb9fe519e5d4690a950c8",
                "patch": "@@ -256,6 +256,10 @@ public Session connectToServer(Endpoint endpoint,\n \n \n     protected void registerSession(Class<?> endpoint, WsSession wsSession) {\n+        if (!wsSession.isOpen()) {\n+            // The session was closed during onOpen. No need to register it.\n+            return;\n+        }\n         synchronized (endPointSessionMapLock) {\n             if (endpointSessionMap.size() == 0) {\n                 BackgroundProcessManager.getInstance().register(this);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix concurrency issue.\ndoWrite() add the socket to the poller if there are bytes left to wrote. The may poller fire and execution could reach onWritePossible() before the remaining bytes have been copied to the buffer thereby triggering an NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1455201 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/bb963485b17f50a421caa7a0bbadc5454860bfe4",
        "parent": "https://github.com/apache/tomcat/commit/b24447d00b86694e9ac72e0ed0922c58479b7a86",
        "bug_id": "tomcat_328",
        "file": [
            {
                "sha": "bb5aa4150cfb56a1c49c20883dab17fc7a043fbc",
                "filename": "java/org/apache/coyote/http11/upgrade/AbstractServletOutputStream.java",
                "blob_url": "https://github.com/apache/tomcat/blob/bb963485b17f50a421caa7a0bbadc5454860bfe4/java/org/apache/coyote/http11/upgrade/AbstractServletOutputStream.java",
                "raw_url": "https://github.com/apache/tomcat/raw/bb963485b17f50a421caa7a0bbadc5454860bfe4/java/org/apache/coyote/http11/upgrade/AbstractServletOutputStream.java",
                "status": "modified",
                "changes": 85,
                "additions": 43,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/upgrade/AbstractServletOutputStream.java?ref=bb963485b17f50a421caa7a0bbadc5454860bfe4",
                "patch": "@@ -68,17 +68,19 @@ protected final boolean isCloseRequired() {\n \n     @Override\n     public void write(int b) throws IOException {\n-        preWriteChecks();\n-\n-        writeInternal(new byte[] { (byte) b }, 0, 1);\n+        synchronized (writeLock) {\n+            preWriteChecks();\n+            writeInternal(new byte[] { (byte) b }, 0, 1);\n+        }\n     }\n \n \n     @Override\n     public void write(byte[] b, int off, int len) throws IOException {\n-        preWriteChecks();\n-\n-        writeInternal(b, off, len);\n+        synchronized (writeLock) {\n+            preWriteChecks();\n+            writeInternal(b, off, len);\n+        }\n     }\n \n \n@@ -97,51 +99,50 @@ private void preWriteChecks() {\n \n \n     private void writeInternal(byte[] b, int off, int len) throws IOException {\n-        synchronized (writeLock) {\n-            if (listener == null) {\n-                // Simple case - blocking IO\n-                doWrite(true, b, off, len);\n+        if (listener == null) {\n+            // Simple case - blocking IO\n+            doWrite(true, b, off, len);\n+        } else {\n+            // Non-blocking IO\n+            // If the non-blocking read does not complete, doWrite() will add\n+            // the socket back into the poller. The poller way trigger a new\n+            // write event before this method has finished updating buffer. This\n+            // sync makes sure that buffer is updated before the next write\n+            // executes.\n+            int written = doWrite(false, b, off, len);\n+            if (written < len) {\n+                // TODO: - Reuse the buffer\n+                //       - Only reallocate if it gets too big (>8k?)\n+                buffer = new byte[len - written];\n+                System.arraycopy(b, off + written, buffer, 0, len - written);\n             } else {\n-                // Non-blocking IO\n-                // If the non-blocking read does not complete, doWrite() will add\n-                // the socket back into the poller. The poller way trigger a new\n-                // write event before this method has finished updating buffer. This\n-                // sync makes sure that buffer is updated before the next write\n-                // executes.\n-                int written = doWrite(false, b, off, len);\n-                if (written < len) {\n-                    // TODO: - Reuse the buffer\n-                    //       - Only reallocate if it gets too big (>8k?)\n-                    buffer = new byte[len - written];\n-                    System.arraycopy(b, off + written, buffer, 0, len - written);\n-                } else {\n-                    buffer = null;\n-                }\n+                buffer = null;\n             }\n         }\n     }\n \n \n     protected final void onWritePossible() {\n-        try {\n-            writeInternal(buffer, 0, buffer.length);\n-        } catch (IOException ioe) {\n-            throw new RuntimeException(ioe);\n-        }\n-        // Make sure isReady() and onWritePossible() have a consistent view of\n-        // buffer and fireListener when determining if the listener should fire\n-        boolean fire = false;\n-\n-        synchronized (fireListenerLock) {\n-            if (buffer == null && fireListener) {\n-                fireListener = false;\n-                fire = true;\n+        synchronized (writeLock) {\n+            try {\n+                writeInternal(buffer, 0, buffer.length);\n+            } catch (IOException ioe) {\n+                throw new RuntimeException(ioe);\n+            }\n+            // Make sure isReady() and onWritePossible() have a consistent view of\n+            // buffer and fireListener when determining if the listener should fire\n+            boolean fire = false;\n+\n+            synchronized (fireListenerLock) {\n+                if (buffer == null && fireListener) {\n+                    fireListener = false;\n+                    fire = true;\n+                }\n+            }\n+            if (fire) {\n+                listener.onWritePossible();\n             }\n         }\n-        if (fire) {\n-            listener.onWritePossible();\n-        }\n-\n     }\n \n     /**",
                "deletions": 42
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54438\nFix a regression in the fix for BZ 52953 that triggered an NPE when digested passwords were used and an authentication attempt was made for a user that did not exist in the realm.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1434685 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/c8d5d885f12cb86c882379939dd5e37da77cba5b",
        "parent": "https://github.com/apache/tomcat/commit/297b26af4baddd7363a971abde7df6d1203fe152",
        "bug_id": "tomcat_329",
        "file": [
            {
                "sha": "8a0369a6f10639cf8ef19dfa6052fd6f6e1cea6a",
                "filename": "java/org/apache/catalina/realm/RealmBase.java",
                "blob_url": "https://github.com/apache/tomcat/blob/c8d5d885f12cb86c882379939dd5e37da77cba5b/java/org/apache/catalina/realm/RealmBase.java",
                "raw_url": "https://github.com/apache/tomcat/raw/c8d5d885f12cb86c882379939dd5e37da77cba5b/java/org/apache/catalina/realm/RealmBase.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/realm/RealmBase.java?ref=c8d5d885f12cb86c882379939dd5e37da77cba5b",
                "patch": "@@ -376,9 +376,10 @@ public Principal authenticate(String username, String clientDigest,\n                                   String md5a2) {\n \n         // In digest auth, digests are always lower case\n-        String md5a1 = getDigest(username, realm).toLowerCase(Locale.ENGLISH);\n+        String md5a1 = getDigest(username, realm);\n         if (md5a1 == null)\n             return null;\n+        md5a1 = md5a1.toLowerCase(Locale.ENGLISH);\n         String serverDigestValue;\n         if (qop == null) {\n             serverDigestValue = md5a1 + \":\" + nonce + \":\" + md5a2;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE in WebappLoader that happens when stop() is called after a failed start.\nAdd tests that a context can be started again after a failure.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1430165 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/b96fe4cc1ffb1ec144be9ce8ee153cdc6766ecd7",
        "parent": "https://github.com/apache/tomcat/commit/3a9990b5648538abca2d6621502f564753d8d5e1",
        "bug_id": "tomcat_330",
        "file": [
            {
                "sha": "be429bdf1fdc65de0bf6e0cdc292196d2d0a7aa1",
                "filename": "java/org/apache/catalina/loader/WebappLoader.java",
                "blob_url": "https://github.com/apache/tomcat/blob/b96fe4cc1ffb1ec144be9ce8ee153cdc6766ecd7/java/org/apache/catalina/loader/WebappLoader.java",
                "raw_url": "https://github.com/apache/tomcat/raw/b96fe4cc1ffb1ec144be9ce8ee153cdc6766ecd7/java/org/apache/catalina/loader/WebappLoader.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/loader/WebappLoader.java?ref=b96fe4cc1ffb1ec144be9ce8ee153cdc6766ecd7",
                "patch": "@@ -487,7 +487,9 @@ protected void stopInternal() throws LifecycleException {\n         servletContext.removeAttribute(Globals.CLASS_PATH_ATTR);\n \n         // Throw away our current class loader\n-        ((Lifecycle) classLoader).stop();\n+        if (classLoader != null) {\n+            ((Lifecycle) classLoader).stop();\n+        }\n \n         try {\n             String contextName = context.getName();",
                "deletions": 1
            },
            {
                "sha": "47f9ddc3f752949bcdc6d77460760480ab3ae7cb",
                "filename": "test/org/apache/catalina/core/TestStandardContext.java",
                "blob_url": "https://github.com/apache/tomcat/blob/b96fe4cc1ffb1ec144be9ce8ee153cdc6766ecd7/test/org/apache/catalina/core/TestStandardContext.java",
                "raw_url": "https://github.com/apache/tomcat/raw/b96fe4cc1ffb1ec144be9ce8ee153cdc6766ecd7/test/org/apache/catalina/core/TestStandardContext.java",
                "status": "modified",
                "changes": 107,
                "additions": 106,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/core/TestStandardContext.java?ref=b96fe4cc1ffb1ec144be9ce8ee153cdc6766ecd7",
                "patch": "@@ -49,12 +49,17 @@\n import org.junit.Test;\n \n import org.apache.catalina.Context;\n+import org.apache.catalina.Lifecycle;\n+import org.apache.catalina.LifecycleEvent;\n+import org.apache.catalina.LifecycleException;\n+import org.apache.catalina.LifecycleListener;\n import org.apache.catalina.LifecycleState;\n import org.apache.catalina.Wrapper;\n import org.apache.catalina.authenticator.BasicAuthenticator;\n import org.apache.catalina.deploy.FilterDef;\n import org.apache.catalina.deploy.FilterMap;\n import org.apache.catalina.deploy.LoginConfig;\n+import org.apache.catalina.loader.WebappLoader;\n import org.apache.catalina.startup.SimpleHttpClient;\n import org.apache.catalina.startup.TestTomcat.MapRealm;\n import org.apache.catalina.startup.Tomcat;\n@@ -166,13 +171,113 @@ public void doFilter(ServletRequest request, ServletResponse response,\n         public void init(FilterConfig filterConfig) throws ServletException {\n             boolean fail = filterConfig.getInitParameter(\"fail\").equals(\"true\");\n             if (fail) {\n-                throw new ServletException(\"Init fail\",\n+                throw new ServletException(\"Init fail (test)\",\n                         new ClassNotFoundException());\n             }\n         }\n \n     }\n \n+    @Test\n+    public void testWebappLoaderStartFail() throws Exception {\n+        // Test that if WebappLoader start() fails and if the cause of\n+        // the failure is gone, the context can be started without\n+        // a need to redeploy it.\n+\n+        // Set up a container\n+        Tomcat tomcat = getTomcatInstance();\n+        tomcat.start();\n+        // To not start Context automatically, as we have to configure it first\n+        ((ContainerBase) tomcat.getHost()).setStartChildren(false);\n+\n+        FailingWebappLoader loader = new FailingWebappLoader();\n+        File root = new File(\"test/webapp-3.0\");\n+        Context context = tomcat.addWebapp(\"\", root.getAbsolutePath());\n+        context.setLoader(loader);\n+\n+        try {\n+            context.start();\n+            fail();\n+        } catch (LifecycleException ex) {\n+            // As expected\n+        }\n+        assertEquals(LifecycleState.FAILED, context.getState());\n+\n+        // The second attempt\n+        loader.setFail(false);\n+        context.start();\n+        assertEquals(LifecycleState.STARTED, context.getState());\n+\n+        // Using a test from testBug49922() to check that the webapp is running\n+        ByteChunk result = getUrl(\"http://localhost:\" + getPort() +\n+                \"/bug49922/target\");\n+        assertEquals(\"Target\", result.toString());\n+    }\n+\n+    @Test\n+    public void testWebappListenerConfigureFail() throws Exception {\n+        // Test that if LifecycleListener on webapp fails during\n+        // configure_start event and if the cause of the failure is gone,\n+        // the context can be started without a need to redeploy it.\n+\n+        // Set up a container\n+        Tomcat tomcat = getTomcatInstance();\n+        tomcat.start();\n+        // To not start Context automatically, as we have to configure it first\n+        ((ContainerBase) tomcat.getHost()).setStartChildren(false);\n+\n+        FailingLifecycleListener listener = new FailingLifecycleListener();\n+        File root = new File(\"test/webapp-3.0\");\n+        Context context = tomcat.addWebapp(\"\", root.getAbsolutePath());\n+        context.addLifecycleListener(listener);\n+\n+        try {\n+            context.start();\n+            fail();\n+        } catch (LifecycleException ex) {\n+            // As expected\n+        }\n+        assertEquals(LifecycleState.FAILED, context.getState());\n+\n+        // The second attempt\n+        listener.setFail(false);\n+        context.start();\n+        assertEquals(LifecycleState.STARTED, context.getState());\n+\n+        // Using a test from testBug49922() to check that the webapp is running\n+        ByteChunk result = getUrl(\"http://localhost:\" + getPort() +\n+                \"/bug49922/target\");\n+        assertEquals(\"Target\", result.toString());\n+    }\n+\n+    private static class FailingWebappLoader extends WebappLoader {\n+        private boolean fail = true;\n+        protected void setFail(boolean fail) {\n+            this.fail = fail;\n+        }\n+        @Override\n+        protected void startInternal() throws LifecycleException {\n+            if (fail) {\n+                throw new RuntimeException(\"Start fail (test)\");\n+            }\n+            super.startInternal();\n+        }\n+    }\n+\n+    private static class FailingLifecycleListener implements LifecycleListener {\n+        private final String failEvent = Lifecycle.CONFIGURE_START_EVENT;\n+        private boolean fail = true;\n+        protected void setFail(boolean fail) {\n+            this.fail = fail;\n+        }\n+        @Override\n+        public void lifecycleEvent(LifecycleEvent event) {\n+            if (fail && event.getType().equals(failEvent)) {\n+                throw new RuntimeException(failEvent + \" fail (test)\");\n+            }\n+        }\n+    }\n+\n     @Test\n     public void testBug49922() throws Exception {\n         // Test that filter mapping works. Test that the same filter is",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54242\nFix NPE in tagPlugins:ForEach when iteration is null. JSTL spec says it should be treated like an empty iteration.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1427846 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/86be1ebf056b2fb532dd5d610bbae753d3fbfe60",
        "parent": "https://github.com/apache/tomcat/commit/ffc45253757b591f8d1b8c73be50b41804900273",
        "bug_id": "tomcat_331",
        "file": [
            {
                "sha": "6c25497bd39baa25ff49376f056dd0e5aa62111b",
                "filename": "java/org/apache/jasper/tagplugins/jstl/core/ForEach.java",
                "blob_url": "https://github.com/apache/tomcat/blob/86be1ebf056b2fb532dd5d610bbae753d3fbfe60/java/org/apache/jasper/tagplugins/jstl/core/ForEach.java",
                "raw_url": "https://github.com/apache/tomcat/raw/86be1ebf056b2fb532dd5d610bbae753d3fbfe60/java/org/apache/jasper/tagplugins/jstl/core/ForEach.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/tagplugins/jstl/core/ForEach.java?ref=86be1ebf056b2fb532dd5d610bbae753d3fbfe60",
                "patch": "@@ -155,6 +155,9 @@ private void doCollection(TagPluginContext ctxt) {\n         ctxt.generateJavaSource(\"else if (\" + itemsV + \" instanceof Map)\");\n         ctxt.generateJavaSource(iterV + \"=((Map)\" + itemsV + \").entrySet().iterator();\");\n \n+        // Not null\n+        ctxt.generateJavaSource(\"if (\" + iterV + \" != null) {\");\n+\n         if (hasBegin) {\n             String tV = ctxt.getTemporaryVariableName();\n             ctxt.generateJavaSource(\"for (int \" + tV + \"=\" + beginV + \";\" +\n@@ -196,6 +199,7 @@ private void doCollection(TagPluginContext ctxt) {\n             ctxt.generateJavaSource(\"break;\");\n         }\n         ctxt.generateJavaSource(\"}\"); // while\n+        ctxt.generateJavaSource(\"}\"); // Not Null\n     }\n \n     /**",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=53606\nFix possible NPE when sending pings between cluster nodes\nBased on a patch by F.Arnoud\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1366959 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/eb9f94ee0f1092c4acdaa77a3512f792ffd4205c",
        "parent": "https://github.com/apache/tomcat/commit/7db08d394004b209edad8a27b32d710c385b1d73",
        "bug_id": "tomcat_332",
        "file": [
            {
                "sha": "b7b5ebd524af6fb1be27489436bc1a27a5bf1a11",
                "filename": "java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java",
                "blob_url": "https://github.com/apache/tomcat/blob/eb9f94ee0f1092c4acdaa77a3512f792ffd4205c/java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java",
                "raw_url": "https://github.com/apache/tomcat/raw/eb9f94ee0f1092c4acdaa77a3512f792ffd4205c/java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java",
                "status": "modified",
                "changes": 11,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java?ref=eb9f94ee0f1092c4acdaa77a3512f792ffd4205c",
                "patch": "@@ -122,13 +122,16 @@ public boolean getStaticOnly() {\n     }\n \n     protected void sendPing() {\n-        if (failureDetector.get() != null) {\n+        TcpFailureDetector tcpFailureDetector =\n+                failureDetector != null ? failureDetector.get() : null;\n+        if (tcpFailureDetector != null) {\n             // We have a reference to the failure detector\n             // Piggy back on it\n-            failureDetector.get().checkMembers(true);\n+            tcpFailureDetector.checkMembers(true);\n         } else {\n-            StaticMembershipInterceptor smi = staticMembers.get();\n-            if (staticOnly && smi != null) {\n+            StaticMembershipInterceptor smi =\n+                    staticOnly && staticMembers != null ? staticMembers.get() : null;\n+            if (smi != null) {\n                 sendPingMessage(smi.getMembers());\n             } else {\n                 sendPingMessage(getMembers());",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=52833\nFix NPE in some embedded / osgi scenarios where the class loader my not have the system class loader as a parent.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1305943 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/6a8e4803833c2ccfb807aadc99c595421986614e",
        "parent": "https://github.com/apache/tomcat/commit/fe16ac21e89ed0ef83b93d95bcb33e1586a5c971",
        "bug_id": "tomcat_333",
        "file": [
            {
                "sha": "03e55db4548a48c4056ee2566f7f8d604968258e",
                "filename": "java/org/apache/catalina/core/StandardServer.java",
                "blob_url": "https://github.com/apache/tomcat/blob/6a8e4803833c2ccfb807aadc99c595421986614e/java/org/apache/catalina/core/StandardServer.java",
                "raw_url": "https://github.com/apache/tomcat/raw/6a8e4803833c2ccfb807aadc99c595421986614e/java/org/apache/catalina/core/StandardServer.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/StandardServer.java?ref=6a8e4803833c2ccfb807aadc99c595421986614e",
                "patch": "@@ -796,11 +796,10 @@ protected void initInternal() throws LifecycleException {\n         // Populate the extension validator with JARs from common and shared\n         // class loaders\n         if (getCatalina() != null) {\n-            ClassLoader cl =\n-                    getCatalina().getParentClassLoader();\n+            ClassLoader cl = getCatalina().getParentClassLoader();\n             // Walk the class loader hierarchy. Stop at the system class loader.\n             // This will add the shared (if present) and common class loaders\n-            while (cl != ClassLoader.getSystemClassLoader()) {\n+            while (cl != null && cl != ClassLoader.getSystemClassLoader()) {\n                 if (cl instanceof URLClassLoader) {\n                     URL[] urls = ((URLClassLoader) cl).getURLs();\n                     for (URL url : urls) {",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=52926\nProtect against a NPE if the socket has been closed on another thread\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1302837 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/dcb88087980f0ada253ed3441a61afd197af7f43",
        "parent": "https://github.com/apache/tomcat/commit/fc39f8f8dd0475c1b9c708cccd88c0f6ff5a8828",
        "bug_id": "tomcat_334",
        "file": [
            {
                "sha": "69bc1106843ae03eed563254c14cb625e5b3c360",
                "filename": "java/org/apache/tomcat/util/net/NioEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/dcb88087980f0ada253ed3441a61afd197af7f43/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/dcb88087980f0ada253ed3441a61afd197af7f43/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/NioEndpoint.java?ref=dcb88087980f0ada253ed3441a61afd197af7f43",
                "patch": "@@ -718,6 +718,9 @@ protected boolean isWorkerAvailable() {\n     public boolean processSocket(NioChannel socket, SocketStatus status, boolean dispatch) {\n         try {\n             KeyAttachment attachment = (KeyAttachment)socket.getAttachment(false);\n+            if (attachment == null) {\n+                return false;\n+            }\n             attachment.setCometNotify(false); //will get reset upon next reg\n             SocketProcessor sc = processorCache.poll();\n             if ( sc == null ) sc = new SocketProcessor(socket,status);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "https://issues.apache.org/bugzilla/show_bug.cgi?id=51582\nFix NPE when the query is not available. This is a temporary work around until we know why SQL is null\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1189978 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/989985d4ea91043305882299234d62da5680abb4",
        "parent": "https://github.com/apache/tomcat/commit/3b8fc6a93f287619ff3ad8fff7ad6b5c10dc6aff",
        "bug_id": "tomcat_335",
        "file": [
            {
                "sha": "585ea18bbf4e370d323ed1ccee655761255a00b9",
                "filename": "modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java",
                "blob_url": "https://github.com/apache/tomcat/blob/989985d4ea91043305882299234d62da5680abb4/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java",
                "raw_url": "https://github.com/apache/tomcat/raw/989985d4ea91043305882299234d62da5680abb4/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java?ref=989985d4ea91043305882299234d62da5680abb4",
                "patch": "@@ -149,6 +149,7 @@ public void poolClosed(ConnectionPool pool) {\n     }\n \n     protected QueryStats getQueryStats(String sql) {\n+        if (sql==null) sql = \"\";\n         ConcurrentHashMap<String,QueryStats> queries = SlowQueryReport.this.queries;\n         if (queries==null) return null;\n         QueryStats qs = queries.get(sql);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=52042\nCorrect threading issue in annotation caching that could lead to an\nNPE if multiple threads were processing the same class hierarchy for\nannotations\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1186042 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/82dd643d8c48b87bd847641bbfdc7f443cd993ad",
        "parent": "https://github.com/apache/tomcat/commit/1aa53d0ffa4ca233fa32e3c48812756fde69e7a5",
        "bug_id": "tomcat_336",
        "file": [
            {
                "sha": "eaac06f76936b5d27e37ac7727e42ee140deaf3b",
                "filename": "java/org/apache/catalina/core/DefaultInstanceManager.java",
                "blob_url": "https://github.com/apache/tomcat/blob/82dd643d8c48b87bd847641bbfdc7f443cd993ad/java/org/apache/catalina/core/DefaultInstanceManager.java",
                "raw_url": "https://github.com/apache/tomcat/raw/82dd643d8c48b87bd847641bbfdc7f443cd993ad/java/org/apache/catalina/core/DefaultInstanceManager.java",
                "status": "modified",
                "changes": 5,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/DefaultInstanceManager.java?ref=82dd643d8c48b87bd847641bbfdc7f443cd993ad",
                "patch": "@@ -423,11 +423,6 @@ protected void populateAnnotationsCache(Class<?> clazz,\n                             new WeakReference<List<AnnotationCacheEntry>>(\n                                     annotations));\n                 }\n-            } else {\n-                // If the annotations for this class have been cached, the\n-                // annotations for all the super classes will have been cachced\n-                // as well\n-                break;\n             }\n             clazz = clazz.getSuperclass();\n         }",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=52009\nFix the NPE if an error occurs during comet processing\nAdd test cases for errors during comet processing\nEnsure access log entries are made if an error occurs\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1183494 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/b90c0a19b0f0b619cf4a1177b92691ae407238b3",
        "parent": "https://github.com/apache/tomcat/commit/fadcc4cdd092822999d7538af063e01c4b143917",
        "bug_id": "tomcat_337",
        "file": [
            {
                "sha": "e38fcdcb86439a4f0301e5c575e4ca0bb12f03b4",
                "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
                "blob_url": "https://github.com/apache/tomcat/blob/b90c0a19b0f0b619cf4a1177b92691ae407238b3/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "raw_url": "https://github.com/apache/tomcat/raw/b90c0a19b0f0b619cf4a1177b92691ae407238b3/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "status": "modified",
                "changes": 9,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/CoyoteAdapter.java?ref=b90c0a19b0f0b619cf4a1177b92691ae407238b3",
                "patch": "@@ -249,6 +249,10 @@ public boolean event(org.apache.coyote.Request req,\n             req.getRequestProcessor().setWorkerThreadName(null);\n             // Recycle the wrapper request and response\n             if (error || response.isClosed() || !request.isComet()) {\n+                ((Context) request.getMappingData().context).logAccess(\n+                        request, response,\n+                        System.currentTimeMillis() - req.getStartTime(),\n+                        false);\n                 request.recycle();\n                 request.setFilterChain(null);\n                 response.recycle();\n@@ -430,9 +434,12 @@ public void service(org.apache.coyote.Request req,\n             } else if (!comet) {\n                 request.finishRequest();\n                 response.finishResponse();\n-                if (postParseSuccess) {\n+                if (postParseSuccess &&\n+                        request.getMappingData().context != null) {\n                     // Log only if processing was invoked.\n                     // If postParseRequest() failed, it has already logged it.\n+                    // If context is null this was the start of a comet request\n+                    // that failed and has already been logged.\n                     ((Context) request.getMappingData().context).logAccess(\n                             request, response,\n                             System.currentTimeMillis() - req.getStartTime(),",
                "deletions": 1
            },
            {
                "sha": "481bdd3bf4243671392c32ca3c96670c4953f6fc",
                "filename": "test/org/apache/catalina/comet/TestCometProcessor.java",
                "blob_url": "https://github.com/apache/tomcat/blob/b90c0a19b0f0b619cf4a1177b92691ae407238b3/test/org/apache/catalina/comet/TestCometProcessor.java",
                "raw_url": "https://github.com/apache/tomcat/raw/b90c0a19b0f0b619cf4a1177b92691ae407238b3/test/org/apache/catalina/comet/TestCometProcessor.java",
                "status": "modified",
                "changes": 131,
                "additions": 101,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/comet/TestCometProcessor.java?ref=b90c0a19b0f0b619cf4a1177b92691ae407238b3",
                "patch": "@@ -36,12 +36,14 @@\n import org.junit.Test;\n \n import org.apache.catalina.Context;\n+import org.apache.catalina.Wrapper;\n import org.apache.catalina.comet.CometEvent.EventType;\n import org.apache.catalina.connector.CometEventImpl;\n import org.apache.catalina.connector.Request;\n import org.apache.catalina.connector.Response;\n import org.apache.catalina.startup.Tomcat;\n import org.apache.catalina.startup.TomcatBaseTest;\n+import org.apache.catalina.valves.TesterAccessLogValve;\n import org.apache.catalina.valves.ValveBase;\n \n public class TestCometProcessor extends TomcatBaseTest {\n@@ -116,16 +118,41 @@ public void testAsyncClose() throws Exception {\n \n     @Test\n     public void testSimpleCometClient() throws Exception {\n+        doSimpleCometTest(null);\n+    }\n+\n+    @Test\n+    public void testSimpleCometClientBeginFail() throws Exception {\n+        doSimpleCometTest(SimpleCometServlet.FAIL_ON_BEGIN);\n+    }\n \n+    @Test\n+    public void testSimpleCometClientReadFail() throws Exception {\n+        doSimpleCometTest(SimpleCometServlet.FAIL_ON_READ);\n+    }\n+\n+    @Test\n+    public void testSimpleCometClientEndFail() throws Exception {\n+        doSimpleCometTest(SimpleCometServlet.FAIL_ON_END);\n+    }\n+\n+    private void doSimpleCometTest(String initParam) throws Exception {\n         if (!isCometSupported()) {\n             return;\n         }\n \n         // Setup Tomcat instance\n         Tomcat tomcat = getTomcatInstance();\n         Context root = tomcat.addContext(\"\", TEMP_DIR);\n-        Tomcat.addServlet(root, \"comet\", new SimpleCometServlet());\n+        Wrapper w = Tomcat.addServlet(root, \"comet\", new SimpleCometServlet());\n+        if (initParam != null) {\n+            w.addInitParameter(initParam, \"true\");\n+        }\n         root.addServletMapping(\"/\", \"comet\");\n+\n+        TesterAccessLogValve alv = new TesterAccessLogValve();\n+        root.getPipeline().addValve(alv);\n+\n         tomcat.start();\n \n         // Create connection to Comet servlet\n@@ -151,36 +178,51 @@ public void testSimpleCometClient() throws Exception {\n         os.close();\n         is.close();\n \n-        // Validate response\n         String[] response = readThread.getResponse().split(\"\\r\\n\");\n-        assertEquals(\"HTTP/1.1 200 OK\", response[0]);\n-        assertEquals(\"Server: Apache-Coyote/1.1\", response[1]);\n-        assertTrue(response[2].startsWith(\"Set-Cookie: JSESSIONID=\"));\n-        assertEquals(\"Content-Type: text/plain;charset=ISO-8859-1\", response[3]);\n-        assertEquals(\"Transfer-Encoding: chunked\", response[4]);\n-        assertTrue(response[5].startsWith(\"Date: \"));\n-        assertEquals(\"\", response[6]);\n-        assertEquals(\"7\", response[7]);\n-        assertEquals(\"BEGIN\", response[8]);\n-        assertEquals(\"\", response[9]);\n-        assertEquals(\"17\", response[10]);\n-        assertEquals(\"Client: READ: 4 bytes\", response[11]);\n-        assertEquals(\"\", response[12]);\n-        assertEquals(\"17\", response[13]);\n-        assertEquals(\"Client: READ: 4 bytes\", response[14]);\n-        assertEquals(\"\", response[15]);\n-        assertEquals(\"17\", response[16]);\n-        assertEquals(\"Client: READ: 4 bytes\", response[17]);\n-        assertEquals(\"\", response[18]);\n-        assertEquals(\"17\", response[19]);\n-        assertEquals(\"Client: READ: 4 bytes\", response[20]);\n-        assertEquals(\"\", response[21]);\n-        assertEquals(\"d\", response[22]);\n-        assertEquals(\"Client: END\", response[23]);\n-        assertEquals(\"\", response[24]);\n-        assertEquals(\"0\", response[25]);\n-        // Expect 26 lines\n-        assertEquals(26, response.length);\n+        if (initParam == null) {\n+            // Normal response expected\n+            // Validate response\n+            assertEquals(\"HTTP/1.1 200 OK\", response[0]);\n+            assertEquals(\"Server: Apache-Coyote/1.1\", response[1]);\n+            assertTrue(response[2].startsWith(\"Set-Cookie: JSESSIONID=\"));\n+            assertEquals(\"Content-Type: text/plain;charset=ISO-8859-1\", response[3]);\n+            assertEquals(\"Transfer-Encoding: chunked\", response[4]);\n+            assertTrue(response[5].startsWith(\"Date: \"));\n+            assertEquals(\"\", response[6]);\n+            assertEquals(\"7\", response[7]);\n+            assertEquals(\"BEGIN\", response[8]);\n+            assertEquals(\"\", response[9]);\n+            assertEquals(\"17\", response[10]);\n+            assertEquals(\"Client: READ: 4 bytes\", response[11]);\n+            assertEquals(\"\", response[12]);\n+            assertEquals(\"17\", response[13]);\n+            assertEquals(\"Client: READ: 4 bytes\", response[14]);\n+            assertEquals(\"\", response[15]);\n+            assertEquals(\"17\", response[16]);\n+            assertEquals(\"Client: READ: 4 bytes\", response[17]);\n+            assertEquals(\"\", response[18]);\n+            assertEquals(\"17\", response[19]);\n+            assertEquals(\"Client: READ: 4 bytes\", response[20]);\n+            assertEquals(\"\", response[21]);\n+            assertEquals(\"d\", response[22]);\n+            assertEquals(\"Client: END\", response[23]);\n+            assertEquals(\"\", response[24]);\n+            assertEquals(\"0\", response[25]);\n+            // Expect 26 lines\n+            assertEquals(26, response.length);\n+        } else {\n+            // Failure expected only expected for the fail on begin\n+            // Failure at any later stage and the reponse headers (including the\n+            // 200 response code will already have been sent to the client\n+            if (initParam == SimpleCometServlet.FAIL_ON_BEGIN) {\n+                assertEquals(\"HTTP/1.1 500 Internal Server Error\", response[0]);\n+                alv.validateAccessLog(1, 500, 0, 1000);\n+            } else {\n+                assertEquals(\"HTTP/1.1 200 OK\", response[0]);\n+                alv.validateAccessLog(1, 200, 0, 5000);\n+            }\n+\n+        }\n     }\n \n     /**\n@@ -267,6 +309,26 @@ private boolean isCometSupported() {\n \n         private static final long serialVersionUID = 1L;\n \n+        public static final String FAIL_ON_BEGIN = \"failOnBegin\";\n+        public static final String FAIL_ON_READ = \"failOnRead\";\n+        public static final String FAIL_ON_END = \"failOnEnd\";\n+\n+        private boolean failOnBegin = false;\n+        private boolean failOnRead = false;\n+        private boolean failOnEnd = false;\n+\n+\n+        @Override\n+        public void init() throws ServletException {\n+            failOnBegin = Boolean.valueOf(getServletConfig().getInitParameter(\n+                    FAIL_ON_BEGIN)).booleanValue();\n+            failOnRead = Boolean.valueOf(getServletConfig().getInitParameter(\n+                    FAIL_ON_READ)).booleanValue();\n+            failOnEnd = Boolean.valueOf(getServletConfig().getInitParameter(\n+                    FAIL_ON_END)).booleanValue();\n+        }\n+\n+\n         @Override\n         public void event(CometEvent event) throws IOException,\n                 ServletException {\n@@ -278,9 +340,15 @@ public void event(CometEvent event) throws IOException,\n             session.setMaxInactiveInterval(30);\n \n             if (event.getEventType() == EventType.BEGIN) {\n+                if (failOnBegin) {\n+                    throw new IOException(\"Fail on begin\");\n+                }\n                 response.setContentType(\"text/plain\");\n                 response.getWriter().print(\"BEGIN\" + \"\\r\\n\");\n             } else if (event.getEventType() == EventType.READ) {\n+                if (failOnRead) {\n+                    throw new IOException(\"Fail on read\");\n+                }\n                 InputStream is = request.getInputStream();\n                 int count = 0;\n                 while (is.available() > 0) {\n@@ -290,6 +358,9 @@ public void event(CometEvent event) throws IOException,\n                 String msg = \"READ: \" + count + \" bytes\";\n                 response.getWriter().print(\"Client: \" + msg + \"\\r\\n\");\n             } else if (event.getEventType() == EventType.END) {\n+                if (failOnEnd) {\n+                    throw new IOException(\"Fail on end\");\n+                }\n                 String msg = \"END\";\n                 response.getWriter().print(\"Client: \" + msg + \"\\r\\n\");\n                 event.close();",
                "deletions": 30
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=51658\nFix copy/paste error that could trigger an NPE.\nBased on a suggestion by Felix Schumacher\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1158155 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/5d5584294d08c7a8f531b266d2d0de517787036b",
        "parent": "https://github.com/apache/tomcat/commit/f82aea1d7c8e36b79d8dda00482790774774401b",
        "bug_id": "tomcat_338",
        "file": [
            {
                "sha": "428868164369c064569838e5b54b2554ca35dbf3",
                "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
                "blob_url": "https://github.com/apache/tomcat/blob/5d5584294d08c7a8f531b266d2d0de517787036b/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "raw_url": "https://github.com/apache/tomcat/raw/5d5584294d08c7a8f531b266d2d0de517787036b/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/CoyoteAdapter.java?ref=5d5584294d08c7a8f531b266d2d0de517787036b",
                "patch": "@@ -500,7 +500,7 @@ public void log(org.apache.coyote.Request req,\n                             request, response, time, true);\n                 } else if (request.mappingData.host != null) {\n                     logged = true;\n-                    ((Context) request.mappingData.context).logAccess(\n+                    ((Host) request.mappingData.host).logAccess(\n                             request, response, time, true);\n                 }\n             }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=51494\nPrevent an NPE when a long running request completes if the associated web application was destroyed while the request was processing\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1145160 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/3a95db48a9009a0d713c2c53d13f3d6cc492002b",
        "parent": "https://github.com/apache/tomcat/commit/ee01da8ac28170524f45160114d4d15a350ae29e",
        "bug_id": "tomcat_339",
        "file": [
            {
                "sha": "bdaa792ab11237d98d17cd66b56209d752e6ecf4",
                "filename": "java/org/apache/catalina/core/StandardContextValve.java",
                "blob_url": "https://github.com/apache/tomcat/blob/3a95db48a9009a0d713c2c53d13f3d6cc492002b/java/org/apache/catalina/core/StandardContextValve.java",
                "raw_url": "https://github.com/apache/tomcat/raw/3a95db48a9009a0d713c2c53d13f3d6cc492002b/java/org/apache/catalina/core/StandardContextValve.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/StandardContextValve.java?ref=3a95db48a9009a0d713c2c53d13f3d6cc492002b",
                "patch": "@@ -180,7 +180,12 @@ public final void invoke(Request request, Response response)\n             // place\n             if (!(request.isAsync() || (asyncAtStart && request.getAttribute(\n                         RequestDispatcher.ERROR_EXCEPTION) != null))) {\n-                context.fireRequestDestroyEvent(request);\n+                // Protect against NPEs if context was destroyed during a long\n+                // running request.\n+                StandardContext c = context;\n+                if (c != null && c.getState().isAvailable()) {\n+                    context.fireRequestDestroyEvent(request);\n+                }\n             }\n         }\n     }",
                "deletions": 1
            },
            {
                "sha": "14c653f640a29cfff860283405bc421e42092ba4",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/3a95db48a9009a0d713c2c53d13f3d6cc492002b/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/3a95db48a9009a0d713c2c53d13f3d6cc492002b/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=3a95db48a9009a0d713c2c53d13f3d6cc492002b",
                "patch": "@@ -62,6 +62,11 @@\n       <fix>\n         Fix regression in year number formatting for AccessLogValve. (rjung)\n       </fix>\n+      <fix>\n+        <bug>51494</bug>: Prevent an NPE when a long running request completes\n+        if the associated web application was destroyed while the request was\n+        processing. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50353\nRather than the eventual NPE, throw an ISE if an application attempts to access an AsyncContext after the request processing has ended.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1140738 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/d36c5d9bd1a5bec19514c18e11e60813eaeb6b36",
        "parent": "https://github.com/apache/tomcat/commit/3d85a8581ab6a38ff0b0b3b7a38abf2236942062",
        "bug_id": "tomcat_340",
        "file": [
            {
                "sha": "2e6d6e0ca33eb2b9d77e6d8340e97788d2b1e188",
                "filename": "java/org/apache/catalina/core/AsyncContextImpl.java",
                "blob_url": "https://github.com/apache/tomcat/blob/d36c5d9bd1a5bec19514c18e11e60813eaeb6b36/java/org/apache/catalina/core/AsyncContextImpl.java",
                "raw_url": "https://github.com/apache/tomcat/raw/d36c5d9bd1a5bec19514c18e11e60813eaeb6b36/java/org/apache/catalina/core/AsyncContextImpl.java",
                "status": "modified",
                "changes": 35,
                "additions": 31,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/AsyncContextImpl.java?ref=d36c5d9bd1a5bec19514c18e11e60813eaeb6b36",
                "patch": "@@ -48,6 +48,7 @@\n import org.apache.juli.logging.Log;\n import org.apache.juli.logging.LogFactory;\n import org.apache.tomcat.InstanceManager;\n+import org.apache.tomcat.util.res.StringManager;\n /**\n  * \n  * @author fhanik\n@@ -57,6 +58,9 @@\n     \n     private static final Log log = LogFactory.getLog(AsyncContextImpl.class);\n     \n+    protected static final StringManager sm =\n+        StringManager.getManager(Constants.Package);\n+\n     private ServletRequest servletRequest = null;\n     private ServletResponse servletResponse = null;\n     private List<AsyncListenerWrapper> listeners = new ArrayList<AsyncListenerWrapper>();\n@@ -80,6 +84,7 @@ public void complete() {\n         if (log.isDebugEnabled()) {\n             logDebug(\"complete   \");\n         }\n+        check();\n         request.getCoyoteRequest().action(ActionCode.COMMIT, null);\n         request.getCoyoteRequest().action(ActionCode.ASYNC_COMPLETE, null);\n     }\n@@ -126,6 +131,7 @@ public boolean timeout() throws IOException {\n \n     @Override\n     public void dispatch() {\n+        check();\n         HttpServletRequest sr = (HttpServletRequest)getRequest();\n         String path = sr.getRequestURI();\n         String cpath = sr.getContextPath();\n@@ -135,6 +141,7 @@ public void dispatch() {\n \n     @Override\n     public void dispatch(String path) {\n+        check();\n         dispatch(request.getServletContext(),path);\n     }\n \n@@ -143,6 +150,7 @@ public void dispatch(ServletContext context, String path) {\n         if (log.isDebugEnabled()) {\n             logDebug(\"dispatch   \");\n         }\n+        check();\n         if (request.getAttribute(ASYNC_REQUEST_URI)==null) {\n             request.setAttribute(ASYNC_REQUEST_URI, request.getRequestURI()+\"?\"+request.getQueryString());\n             request.setAttribute(ASYNC_CONTEXT_PATH, request.getContextPath());\n@@ -178,11 +186,13 @@ public void run() {\n \n     @Override\n     public ServletRequest getRequest() {\n+        check();\n         return servletRequest;\n     }\n \n     @Override\n     public ServletResponse getResponse() {\n+        check();\n         return servletResponse;\n     }\n \n@@ -191,13 +201,14 @@ public void start(final Runnable run) {\n         if (log.isDebugEnabled()) {\n             logDebug(\"start      \");\n         }\n-\n+        check();\n         Runnable wrapper = new RunnableWrapper(run, context);\n         this.request.getCoyoteRequest().action(ActionCode.ASYNC_RUN, wrapper);\n     }\n     \n     @Override\n     public void addListener(AsyncListener listener) {\n+        check();\n         AsyncListenerWrapper wrapper = new AsyncListenerWrapper();\n         wrapper.setListener(listener);\n         listeners.add(wrapper);\n@@ -206,6 +217,7 @@ public void addListener(AsyncListener listener) {\n     @Override\n     public void addListener(AsyncListener listener, ServletRequest servletRequest,\n             ServletResponse servletResponse) {\n+        check();\n         AsyncListenerWrapper wrapper = new AsyncListenerWrapper();\n         wrapper.setListener(listener);\n         listeners.add(wrapper);\n@@ -215,6 +227,7 @@ public void addListener(AsyncListener listener, ServletRequest servletRequest,\n     @Override\n     public <T extends AsyncListener> T createListener(Class<T> clazz)\n             throws ServletException {\n+        check();\n         T listener = null;\n         try {\n              listener = (T) getInstanceManager().newInstance(clazz.getName(),\n@@ -242,12 +255,16 @@ public void recycle() {\n         if (log.isDebugEnabled()) {\n             logDebug(\"recycle    \");\n         }\n+        context = null;\n+        dispatch = null;\n+        event = null;\n+        hasOriginalRequestAndResponse = true;\n+        instanceManager = null;\n+        listeners.clear();\n+        request = null;\n         servletRequest = null;\n         servletResponse = null;\n-        hasOriginalRequestAndResponse = true;\n-        context = null;\n         timeout = -1;\n-        event = null;\n     }\n \n     public boolean isStarted() {\n@@ -285,6 +302,7 @@ public void setStarted(Context context, ServletRequest request,\n \n     @Override\n     public boolean hasOriginalRequestAndResponse() {\n+        check();\n         return hasOriginalRequestAndResponse;\n     }\n \n@@ -309,12 +327,14 @@ protected void doInternalDispatch() throws ServletException, IOException {\n     \n     @Override\n     public long getTimeout() {\n+        check();\n         return timeout;\n     }\n \n \n     @Override\n     public void setTimeout(long timeout) {\n+        check();\n         this.timeout = timeout;\n         request.getCoyoteRequest().action(ActionCode.ASYNC_SETTIMEOUT,\n                 Long.valueOf(timeout));\n@@ -407,6 +427,13 @@ private InstanceManager getInstanceManager() {\n         return instanceManager;\n     }\n \n+    private void check() {\n+        if (request == null) {\n+            // AsyncContext has been recycled and should not be being used\n+            throw new IllegalStateException(sm.getString(\n+                    \"asyncContextImpl.requestEnded\"));\n+        }\n+    }\n     private static class DebugException extends Exception {\n         private static final long serialVersionUID = 1L;\n     }",
                "deletions": 4
            },
            {
                "sha": "f49e83198edb8ca1d7ceb9a96a9fdd053804ec61",
                "filename": "java/org/apache/catalina/core/LocalStrings.properties",
                "blob_url": "https://github.com/apache/tomcat/blob/d36c5d9bd1a5bec19514c18e11e60813eaeb6b36/java/org/apache/catalina/core/LocalStrings.properties",
                "raw_url": "https://github.com/apache/tomcat/raw/d36c5d9bd1a5bec19514c18e11e60813eaeb6b36/java/org/apache/catalina/core/LocalStrings.properties",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/LocalStrings.properties?ref=d36c5d9bd1a5bec19514c18e11e60813eaeb6b36",
                "patch": "@@ -59,6 +59,7 @@ aprListener.aprDestroy=Failed shutdown of APR based Apache Tomcat Native library\n aprListener.sslInit=Failed to initialize the SSLEngine.\n aprListener.tcnValid=Loaded APR based Apache Tomcat Native library {0}.\n aprListener.flags=APR capabilities: IPv6 [{0}], sendfile [{1}], accept filters [{2}], random [{3}].\n+asyncContextImpl.requestEnded=The request associated with the AsyncContext has already completed processing.\n containerBase.alreadyStarted=Container {0} has already been started\n containerBase.notConfigured=No basic Valve has been configured\n containerBase.notStarted=Container {0} has not been started",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=51306.\nAvoid NPE when handleSESSION_EXPIRED is processed while handleSESSION_CREATED is being processed. \n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1135069 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/4e5571f289855487812a14333cb8dd291d2c55b5",
        "parent": "https://github.com/apache/tomcat/commit/747642b4e5cae0c1464d1a06e189011a1a6141f7",
        "bug_id": "tomcat_341",
        "file": [
            {
                "sha": "9521272258c7bc32d4cb556d49f9d15d675da8d2",
                "filename": "java/org/apache/catalina/ha/session/DeltaManager.java",
                "blob_url": "https://github.com/apache/tomcat/blob/4e5571f289855487812a14333cb8dd291d2c55b5/java/org/apache/catalina/ha/session/DeltaManager.java",
                "raw_url": "https://github.com/apache/tomcat/raw/4e5571f289855487812a14333cb8dd291d2c55b5/java/org/apache/catalina/ha/session/DeltaManager.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/ha/session/DeltaManager.java?ref=4e5571f289855487812a14333cb8dd291d2c55b5",
                "patch": "@@ -1385,7 +1385,7 @@ protected void handleSESSION_CREATED(SessionMessage msg,Member sender) {\n         session.setPrimarySession(false);\n         session.setCreationTime(msg.getTimestamp());\n         // use container maxInactiveInterval so that session will expire correctly in case of primary transfer\n-        session.setMaxInactiveInterval(getMaxInactiveInterval());\n+        session.setMaxInactiveInterval(getMaxInactiveInterval(), false);\n         session.access();\n         session.setId(msg.getSessionID(), notifySessionListenersOnReplication);\n         session.resetDeltaRequest();",
                "deletions": 1
            },
            {
                "sha": "acea43272dc10634b12d19e681389013d4240afa",
                "filename": "java/org/apache/catalina/ha/session/DeltaSession.java",
                "blob_url": "https://github.com/apache/tomcat/blob/4e5571f289855487812a14333cb8dd291d2c55b5/java/org/apache/catalina/ha/session/DeltaSession.java",
                "raw_url": "https://github.com/apache/tomcat/raw/4e5571f289855487812a14333cb8dd291d2c55b5/java/org/apache/catalina/ha/session/DeltaSession.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/ha/session/DeltaSession.java?ref=4e5571f289855487812a14333cb8dd291d2c55b5",
                "patch": "@@ -429,7 +429,7 @@ public void expire(boolean notify, boolean notifyCluster) {\n             return;\n         String expiredId = getIdInternal();\n \n-        if(expiredId != null && manager != null &&\n+        if(notifyCluster && expiredId != null && manager != null &&\n            manager instanceof DeltaManager) {\n             DeltaManager dmanager = (DeltaManager)manager;\n             CatalinaCluster cluster = dmanager.getCluster();",
                "deletions": 1
            },
            {
                "sha": "ffb336a39ca6c10cfcf80cf440e81484e9322d55",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/4e5571f289855487812a14333cb8dd291d2c55b5/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/4e5571f289855487812a14333cb8dd291d2c55b5/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=4e5571f289855487812a14333cb8dd291d2c55b5",
                "patch": "@@ -55,6 +55,14 @@\n       </fix>\n     </changelog>\n   </subsection>\n+  <subsection name=\"Cluster\">\n+    <changelog>\n+      <fix>\n+        <bug>51306</bug>: Avoid NPE when handleSESSION_EXPIRED is processed \n+        while handleSESSION_CREATED is being processed. (kfujino)\n+      </fix>\n+    </changelog>\n+  </subsection>\n   <subsection>\n     <changelog name=\"Web applications\">\n       <fix>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE that can happen during concurrency (connection being abandoned, misconfiguration in abandon timeout or lack of ResetAbandonedTimer interceptor)\nhttp://markmail.org/message/yhshyvyunddb5ngt\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1087442 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/d99433d9b1f9db3647fe44fdd828c921ab5c7308",
        "parent": "https://github.com/apache/tomcat/commit/7c85287d7be3b484456927481cdb0d79497ab0d3",
        "bug_id": "tomcat_342",
        "file": [
            {
                "sha": "76d17e34146dc43ddcd1002ef68266efbf4b0d68",
                "filename": "modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ProxyConnection.java",
                "blob_url": "https://github.com/apache/tomcat/blob/d99433d9b1f9db3647fe44fdd828c921ab5c7308/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ProxyConnection.java",
                "raw_url": "https://github.com/apache/tomcat/raw/d99433d9b1f9db3647fe44fdd828c921ab5c7308/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ProxyConnection.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ProxyConnection.java?ref=d99433d9b1f9db3647fe44fdd828c921ab5c7308",
                "patch": "@@ -122,7 +122,12 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl\n             return this.isWrapperFor((Class<?>)args[0]);\n         }\n         try {\n-            return method.invoke(connection.getConnection(),args);\n+            PooledConnection poolc = connection;\n+            if (poolc!=null) {\n+                return method.invoke(poolc.getConnection(),args);    \n+            } else {\n+                throw new SQLException(\"Connection has already been closed.\");\n+            }\n         }catch (Throwable t) {\n             if (t instanceof InvocationTargetException) {\n                 InvocationTargetException it = (InvocationTargetException)t;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50680\nPrevent an NPE when using tag files from an exploded JAR file, e.g. from within an IDE.\nPatch provided by Larry Isaacs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1064890 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/af4549f8eabc30f0e9eb1be7fb2b1fe58444a3fd",
        "parent": "https://github.com/apache/tomcat/commit/2377f51377e7a3f4970daf30a37a4f3212b944bd",
        "bug_id": "tomcat_343",
        "file": [
            {
                "sha": "9da39788c3bea208f323c865fc80f5449f5d8a7d",
                "filename": "java/org/apache/jasper/compiler/TagFileProcessor.java",
                "blob_url": "https://github.com/apache/tomcat/blob/af4549f8eabc30f0e9eb1be7fb2b1fe58444a3fd/java/org/apache/jasper/compiler/TagFileProcessor.java",
                "raw_url": "https://github.com/apache/tomcat/raw/af4549f8eabc30f0e9eb1be7fb2b1fe58444a3fd/java/org/apache/jasper/compiler/TagFileProcessor.java",
                "status": "modified",
                "changes": 13,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/TagFileProcessor.java?ref=af4549f8eabc30f0e9eb1be7fb2b1fe58444a3fd",
                "patch": "@@ -626,10 +626,15 @@ public void visit(Node.CustomTag n) throws JasperException {\n                         compiler.getCompilationContext().getTldLocation(\n                             tagFileInfo.getTagInfo().getTagLibrary().getURI());\n                     JarResource jarResource = location.getJarResource();\n-                    // Add TLD\n-                    pageInfo.addDependant(jarResource.getEntry(location.getName()).toString());\n-                    // Add Tag\n-                    pageInfo.addDependant(jarResource.getEntry(tagFilePath.substring(1)).toString());\n+                    if (jarResource != null) {\n+                        // Add TLD\n+                        pageInfo.addDependant(jarResource.getEntry(location.getName()).toString());\n+                        // Add Tag\n+                        pageInfo.addDependant(jarResource.getEntry(tagFilePath.substring(1)).toString());\n+                    }\n+                    else {\n+                        pageInfo.addDependant(tagFilePath);\n+                    }\n                 } else {\n                     pageInfo.addDependant(tagFilePath);\n                 }",
                "deletions": 4
            },
            {
                "sha": "957e3473b5caf424e2380c017a51fa603b67b850",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/af4549f8eabc30f0e9eb1be7fb2b1fe58444a3fd/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/af4549f8eabc30f0e9eb1be7fb2b1fe58444a3fd/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=af4549f8eabc30f0e9eb1be7fb2b1fe58444a3fd",
                "patch": "@@ -150,6 +150,11 @@\n         Improve error message when EL identifiers are not valid Java identifiers\n         and use i18n for the error message. (markt)\n       </update>\n+      <fix>\n+        <bug>50680</bug>: Prevent an NPE when using tag files from an exploded\n+        JAR file, e.g. from within an IDE. Patch provided by Larry Isaacs.\n+        (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Cluster\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Correct a typo in RequestFilter, that would lead to an NPE in RemoteAddrFilter, RemoteHostFilter when \"allow\" attribute is empty.\nThe RequestFilterValve class is not affected by this issue.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1059409 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/b49faea67aaaaacbf48214b49e2d1688a6b3c019",
        "parent": "https://github.com/apache/tomcat/commit/95e521d4e33163d1a88739a68976665ca170d6c1",
        "bug_id": "tomcat_344",
        "file": [
            {
                "sha": "a417ebc2c925fb4ca2be229a045ed203b8d4e37f",
                "filename": "java/org/apache/catalina/filters/RequestFilter.java",
                "blob_url": "https://github.com/apache/tomcat/blob/b49faea67aaaaacbf48214b49e2d1688a6b3c019/java/org/apache/catalina/filters/RequestFilter.java",
                "raw_url": "https://github.com/apache/tomcat/raw/b49faea67aaaaacbf48214b49e2d1688a6b3c019/java/org/apache/catalina/filters/RequestFilter.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/filters/RequestFilter.java?ref=b49faea67aaaaacbf48214b49e2d1688a6b3c019",
                "patch": "@@ -224,7 +224,7 @@ private boolean isAllowed(String property) {\n         }\n      \n         // Check the allow patterns, if any\n-        if (allow != null & allow.matcher(property).matches()) {\n+        if (allow != null && allow.matcher(property).matches()) {\n             return true;\n         }\n ",
                "deletions": 1
            },
            {
                "sha": "0c1d8bbce24808f274ddb1b131cce07d6534447f",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/b49faea67aaaaacbf48214b49e2d1688a6b3c019/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/b49faea67aaaaacbf48214b49e2d1688a6b3c019/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=b49faea67aaaaacbf48214b49e2d1688a6b3c019",
                "patch": "@@ -62,6 +62,9 @@\n         Provide additional control over component class loaders, primarily for\n         use when embedding. (markt)\n       </add>\n+      <fix>\n+        Fix NPE in RemoteAddrFilter, RemoteHostFilter. (kkolinko)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Jasper\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50027\nAvoid NPE on start when a Context is defined in server.xml with one or more JNDI resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1006037 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/6ce21f42c96b5c9b3a1d10b25e26d7fd91137b48",
        "parent": "https://github.com/apache/tomcat/commit/da36bd1fd5642993e66e13a149a71f8c9cffeb30",
        "bug_id": "tomcat_345",
        "file": [
            {
                "sha": "e810ebf38dba7291a070d21b9eac83438571cf5e",
                "filename": "java/org/apache/catalina/core/StandardContext.java",
                "blob_url": "https://github.com/apache/tomcat/blob/6ce21f42c96b5c9b3a1d10b25e26d7fd91137b48/java/org/apache/catalina/core/StandardContext.java",
                "raw_url": "https://github.com/apache/tomcat/raw/6ce21f42c96b5c9b3a1d10b25e26d7fd91137b48/java/org/apache/catalina/core/StandardContext.java",
                "status": "modified",
                "changes": 10,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/StandardContext.java?ref=6ce21f42c96b5c9b3a1d10b25e26d7fd91137b48",
                "patch": "@@ -1760,9 +1760,13 @@ public void setNamingResources(NamingResources namingResources) {\n         support.firePropertyChange(\"namingResources\",\n                                    oldNamingResources, this.namingResources);\n         \n-        unregister(onameNamingResources);\n-        onameNamingResources = register(namingResources,\n-                \"type=NamingResources,\" + getObjectKeyPropertiesNameOnly());\n+        // If set from server.xml, getObjectKeyPropertiesNameOnly() will\n+        // trigger an NPE. Initial registration takes place on INIT. \n+        if (getState() != LifecycleState.NEW) {\n+            unregister(onameNamingResources);\n+            onameNamingResources = register(namingResources,\n+                    \"type=NamingResources,\" + getObjectKeyPropertiesNameOnly());\n+        }\n     }\n \n ",
                "deletions": 3
            },
            {
                "sha": "9175867b56af57c14d57ae5d8a1b9d882f578dc3",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/6ce21f42c96b5c9b3a1d10b25e26d7fd91137b48/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/6ce21f42c96b5c9b3a1d10b25e26d7fd91137b48/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=6ce21f42c96b5c9b3a1d10b25e26d7fd91137b48",
                "patch": "@@ -103,6 +103,10 @@\n         <bug>50017</bug>: Code clean-up. No functional change. Patch provided by\n         sebb. (markt)\n       </update>\n+      <fix>\n+        <bug>50027</bug>: Avoid NPE on start when a Context is defined in\n+        server.xml with one or more JNDI resources. (markt)\n+      </fix>\n       <fix>\n         <bug>50059</bug>: JARs should always be searched for static resources\n         even if the web application is marked as meta-data complete. (markt)",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=49424\nAvoid NPE if no input data is provided in a chunked POST request\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@953434 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/bd87fe127b5c7a7bcb75c380dfe5cd2a5a11ddc8",
        "parent": "https://github.com/apache/tomcat/commit/734bee9d8d8550c9f1cd30c5fe499e63e6073c33",
        "bug_id": "tomcat_346",
        "file": [
            {
                "sha": "4ed0f6061b2c98e1652c71ea421b901c561a4adc",
                "filename": "java/org/apache/catalina/connector/Request.java",
                "blob_url": "https://github.com/apache/tomcat/blob/bd87fe127b5c7a7bcb75c380dfe5cd2a5a11ddc8/java/org/apache/catalina/connector/Request.java",
                "raw_url": "https://github.com/apache/tomcat/raw/bd87fe127b5c7a7bcb75c380dfe5cd2a5a11ddc8/java/org/apache/catalina/connector/Request.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/Request.java?ref=bd87fe127b5c7a7bcb75c380dfe5cd2a5a11ddc8",
                "patch": "@@ -2818,7 +2818,9 @@ protected void parseParameters() {\n                 }\n                 return;\n             }\n-            parameters.processParameters(formData, 0, formData.length);\n+            if (formData != null) {\n+                parameters.processParameters(formData, 0, formData.length);\n+            }\n         }\n \n     }\n@@ -2864,6 +2866,9 @@ protected int readPostBody(byte body[], int len)\n                 body.append(buffer, 0, len);\n             }\n         }\n+        if (body.getLength() == 0) {\n+            return null;\n+        }\n         if (body.getLength() < body.getBuffer().length) {\n             int length = body.getLength();\n             byte[] result = new byte[length];",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48516\nFix possible NPE when user does not exist in directory\nPatch provided by Kevin Conaway\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@898558 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/62d29b648534305956775a29dd6c3cdbc1e9f0ec",
        "parent": "https://github.com/apache/tomcat/commit/413c5bc4abf5854ade42a518ea6e15db59bc34a5",
        "bug_id": "tomcat_347",
        "file": [
            {
                "sha": "72a07171c70019f59f3af585b08de710cd42b4de",
                "filename": "java/org/apache/catalina/realm/JNDIRealm.java",
                "blob_url": "https://github.com/apache/tomcat/blob/62d29b648534305956775a29dd6c3cdbc1e9f0ec/java/org/apache/catalina/realm/JNDIRealm.java",
                "raw_url": "https://github.com/apache/tomcat/raw/62d29b648534305956775a29dd6c3cdbc1e9f0ec/java/org/apache/catalina/realm/JNDIRealm.java",
                "status": "modified",
                "changes": 8,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/realm/JNDIRealm.java?ref=62d29b648534305956775a29dd6c3cdbc1e9f0ec",
                "patch": "@@ -1929,8 +1929,12 @@ protected synchronized Principal getPrincipal(DirContext context,\n \n         User user = getUser(context, username);\n \n-        return new GenericPrincipal(user.username, user.password ,\n-                getRoles(context, user));\n+        if (user != null) {\n+            return new GenericPrincipal(user.username, user.password,\n+                    getRoles(context, user));\n+        }\n+        \n+        return null;\n     }\n \n     /**",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "XML output tweaks\nFix some NPEs in the merge of session-config elements\nFix a copy and paste error in the merge of session-config elements\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@894457 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/4c97c10e49e65c7abe5e8065438cf9df71441054",
        "parent": "https://github.com/apache/tomcat/commit/5fe4b535da9b030328d98fe523d4a269cedfa4b9",
        "bug_id": "tomcat_348",
        "file": [
            {
                "sha": "64d0d91826f6d0968cfc8366c740866a401a8592",
                "filename": "java/org/apache/catalina/startup/WebXml.java",
                "blob_url": "https://github.com/apache/tomcat/blob/4c97c10e49e65c7abe5e8065438cf9df71441054/java/org/apache/catalina/startup/WebXml.java",
                "raw_url": "https://github.com/apache/tomcat/raw/4c97c10e49e65c7abe5e8065438cf9df71441054/java/org/apache/catalina/startup/WebXml.java",
                "status": "modified",
                "changes": 36,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/startup/WebXml.java?ref=4c97c10e49e65c7abe5e8065438cf9df71441054",
                "patch": "@@ -590,9 +590,11 @@ public String toXml() {\n             appendElement(sb, INDENT4, \"enabled\", servletDef.getEnabled());\n             appendElement(sb, INDENT4, \"async-supported\",\n                     servletDef.getAsyncSupported());\n-            sb.append(\"    <run-as>\\n\");\n-            appendElement(sb, INDENT6, \"role-name\", servletDef.getRunAs());\n-            sb.append(\"    </run-as>\\n\");\n+            if (servletDef.getRunAs() != null) {\n+                sb.append(\"    <run-as>\\n\");\n+                appendElement(sb, INDENT6, \"role-name\", servletDef.getRunAs());\n+                sb.append(\"    </run-as>\\n\");\n+            }\n             for (SecurityRoleRef roleRef : servletDef.getSecurityRoleRefs()) {\n                 sb.append(\"    <security-role-ref>\\n\");\n                 appendElement(sb, INDENT6, \"role-name\", roleRef.getName());\n@@ -1491,8 +1493,10 @@ public boolean merge(Set<WebXml> fragments) {\n                     }\n                 }\n             }\n-            sessionConfig.setSessionTimeout(\n-                    temp.getSessionConfig().getSessionTimeout().toString());\n+            if (temp.getSessionConfig().getSessionTimeout() != null) {\n+                sessionConfig.setSessionTimeout(\n+                        temp.getSessionConfig().getSessionTimeout().toString());\n+            }\n         }\n         \n         if (sessionConfig.getCookieName() == null) {\n@@ -1597,8 +1601,10 @@ public boolean merge(Set<WebXml> fragments) {\n                     }\n                 }\n             }\n-            sessionConfig.setCookieHttpOnly(\n-                    temp.getSessionConfig().getCookieHttpOnly().toString());\n+            if (temp.getSessionConfig().getCookieHttpOnly() != null) {\n+                sessionConfig.setCookieHttpOnly(\n+                        temp.getSessionConfig().getCookieHttpOnly().toString());\n+            }\n         }\n         if (sessionConfig.getCookieSecure() == null) {\n             for (WebXml fragment : fragments) {\n@@ -1618,8 +1624,10 @@ public boolean merge(Set<WebXml> fragments) {\n                     }\n                 }\n             }\n-            sessionConfig.setCookieSecure(\n-                    temp.getSessionConfig().getCookieSecure().toString());\n+            if (temp.getSessionConfig().getCookieSecure() != null) {\n+                sessionConfig.setCookieSecure(\n+                        temp.getSessionConfig().getCookieSecure().toString());\n+            }\n         }\n         if (sessionConfig.getCookieMaxAge() == null) {\n             for (WebXml fragment : fragments) {\n@@ -1639,8 +1647,10 @@ public boolean merge(Set<WebXml> fragments) {\n                     }\n                 }\n             }\n-            sessionConfig.setCookieMaxAge(\n-                    temp.getSessionConfig().getCookieMaxAge().toString());\n+            if (temp.getSessionConfig().getCookieMaxAge() != null) {\n+                sessionConfig.setCookieMaxAge(\n+                        temp.getSessionConfig().getCookieMaxAge().toString());\n+            }\n         }\n \n         if (sessionConfig.getSessionTrackingModes().size() == 0) {\n@@ -1662,8 +1672,8 @@ public boolean merge(Set<WebXml> fragments) {\n                     }\n                 }\n             }\n-            sessionConfig.setSessionTimeout(\n-                    temp.getSessionConfig().getSessionTimeout().toString());\n+            sessionConfig.getSessionTrackingModes().addAll(\n+                    temp.getSessionConfig().getSessionTrackingModes());\n         }\n         \n         for (WebXml fragment : fragments) {",
                "deletions": 13
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE if something tries to access resources accessed during a stop.\nThis was seen when unpackWARs=\"false\" and the JDBC clean up code tried to load the leak prevention class during a context stop.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@805153 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/3326be061383ab84ee89913b1eca132e128e642a",
        "parent": "https://github.com/apache/tomcat/commit/f1a62e32f65132c2656570d6542912fef2ff3f28",
        "bug_id": "tomcat_349",
        "file": [
            {
                "sha": "9a4293feb573fc11e61b1d6c83c284a284522783",
                "filename": "java/org/apache/naming/resources/WARDirContext.java",
                "blob_url": "https://github.com/apache/tomcat/blob/3326be061383ab84ee89913b1eca132e128e642a/java/org/apache/naming/resources/WARDirContext.java",
                "raw_url": "https://github.com/apache/tomcat/raw/3326be061383ab84ee89913b1eca132e128e642a/java/org/apache/naming/resources/WARDirContext.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/naming/resources/WARDirContext.java?ref=3326be061383ab84ee89913b1eca132e128e642a",
                "patch": "@@ -797,7 +797,7 @@ protected void loadEntries() {\n      * Entry tree lookup.\n      */\n     protected Entry treeLookup(Name name) {\n-        if (name.isEmpty())\n+        if (name.isEmpty() || entries == null)\n             return entries;\n         Entry currentEntry = entries;\n         for (int i = 0; i < name.size(); i++) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=45851\nCorrect NPE when cluster is defined at engine level\nEnsure that only 1 thread writes the replicated WAR to disk and that the messages containing the WAR are processed in the correct order.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@699427 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/c340c69ea8a07fc1470bc359e6c85ea852fc7c7d",
        "parent": "https://github.com/apache/tomcat/commit/65b398839ec435869d2b1f481576b069186733ae",
        "bug_id": "tomcat_350",
        "file": [
            {
                "sha": "ce31bb3999412c071d6b80ae7c03d3390cb9b23b",
                "filename": "java/org/apache/catalina/ha/deploy/FarmWarDeployer.java",
                "blob_url": "https://github.com/apache/tomcat/blob/c340c69ea8a07fc1470bc359e6c85ea852fc7c7d/java/org/apache/catalina/ha/deploy/FarmWarDeployer.java",
                "raw_url": "https://github.com/apache/tomcat/raw/c340c69ea8a07fc1470bc359e6c85ea852fc7c7d/java/org/apache/catalina/ha/deploy/FarmWarDeployer.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/ha/deploy/FarmWarDeployer.java?ref=c340c69ea8a07fc1470bc359e6c85ea852fc7c7d",
                "patch": "@@ -158,6 +158,7 @@ public void start() throws Exception {\n         }else {\n             engine = (Engine)parent;\n             hostname = engine.getDefaultHost();\n+            host = (Host) engine.findChild(hostname);\n         }\n         try {\n             oname = new ObjectName(engine.getName() + \":type=Deployer,host=\"",
                "deletions": 0
            },
            {
                "sha": "971e11a1da9c2e4ec6541b53f46a9bdd4ff70aa1",
                "filename": "java/org/apache/catalina/ha/deploy/FileMessageFactory.java",
                "blob_url": "https://github.com/apache/tomcat/blob/c340c69ea8a07fc1470bc359e6c85ea852fc7c7d/java/org/apache/catalina/ha/deploy/FileMessageFactory.java",
                "raw_url": "https://github.com/apache/tomcat/raw/c340c69ea8a07fc1470bc359e6c85ea852fc7c7d/java/org/apache/catalina/ha/deploy/FileMessageFactory.java",
                "status": "modified",
                "changes": 96,
                "additions": 80,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/ha/deploy/FileMessageFactory.java?ref=c340c69ea8a07fc1470bc359e6c85ea852fc7c7d",
                "patch": "@@ -22,6 +22,9 @@\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import java.io.FileNotFoundException;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicLong;\n \n /**\n  * This factory is used to read files and write files by splitting them up into\n@@ -74,7 +77,7 @@\n     protected FileOutputStream out;\n \n     /**\n-     * The number of messages we have read or written\n+     * The number of messages we have written\n      */\n     protected int nrOfMessagesProcessed = 0;\n \n@@ -87,12 +90,31 @@\n      * The total number of packets that we split this file into\n      */\n     protected long totalNrOfMessages = 0;\n+    \n+    /**\n+     * The number of the last message procssed. Message IDs are 1 based.\n+     */\n+    protected AtomicLong lastMessageProcessed = new AtomicLong(0);\n+    \n+    /**\n+     * Messages received out of order are held in the buffer until required. If\n+     * everything is worked as expected, messages will spend very little time in\n+     * the buffer.\n+     */\n+    protected Map<Long, FileMessage> msgBuffer =\n+        new ConcurrentHashMap<Long, FileMessage>();\n \n     /**\n      * The bytes that we hold the data in, not thread safe.\n      */\n     protected byte[] data = new byte[READ_SIZE];\n \n+    /**\n+     * Flag that indicates if a thread is writing messages to disk. Access to\n+     * this flag must be synchronised.\n+     */\n+    protected boolean isWriting = false;\n+\n     /**\n      * Private constructor, either instantiates a factory to read or write. <BR>\n      * When openForWrite==true, then a the file, f, will be created and an\n@@ -205,25 +227,65 @@ public boolean writeMessage(FileMessage msg)\n         if (log.isDebugEnabled())\n             log.debug(\"Message \" + msg + \" data \" + msg.getData()\n                     + \" data length \" + msg.getDataLength() + \" out \" + out);\n-        if (out != null) {\n-            out.write(msg.getData(), 0, msg.getDataLength());\n-            nrOfMessagesProcessed++;\n+        \n+        if (msg.getMessageNumber() <= lastMessageProcessed.get()) {\n+            // Duplicate of message already processed\n+            log.warn(\"Receive Message again -- Sender ActTimeout too short [ path: \"\n+                    + msg.getContextPath()\n+                    + \" war: \"\n+                    + msg.getFileName()\n+                    + \" data: \"\n+                    + msg.getData()\n+                    + \" data length: \" + msg.getDataLength() + \" ]\");\n+            return false;\n+        }\n+        \n+        FileMessage previous =\n+            msgBuffer.put(new Long(msg.getMessageNumber()), msg);\n+        if (previous !=null) {\n+            // Duplicate of message not yet processed\n+            log.warn(\"Receive Message again -- Sender ActTimeout too short [ path: \"\n+                    + msg.getContextPath()\n+                    + \" war: \"\n+                    + msg.getFileName()\n+                    + \" data: \"\n+                    + msg.getData()\n+                    + \" data length: \" + msg.getDataLength() + \" ]\");\n+            return false;\n+        }\n+        \n+        FileMessage next = null;\n+        synchronized (this) {\n+            if (!isWriting) {\n+                next = msgBuffer.get(new Long(lastMessageProcessed.get() + 1));\n+                if (next != null) {\n+                    isWriting = true;\n+                } else {\n+                    return false;\n+                }\n+            } else {\n+                return false;\n+            }\n+        }\n+        \n+        while (next != null) {\n+            out.write(next.getData(), 0, next.getDataLength());\n+            lastMessageProcessed.incrementAndGet();\n             out.flush();\n-            if (msg.getMessageNumber() == msg.getTotalNrOfMsgs()) {\n+            if (next.getMessageNumber() == next.getTotalNrOfMsgs()) {\n                 out.close();\n                 cleanup();\n                 return true;\n-            }//end if\n-        } else {\n-            if (log.isWarnEnabled())\n-                log.warn(\"Receive Message again -- Sender ActTimeout to short [ path: \"\n-                                + msg.getContextPath()\n-                                + \" war: \"\n-                                + msg.getFileName()\n-                                + \" data: \"\n-                                + msg.getData()\n-                                + \" data length: \" + msg.getDataLength() + \" ]\");\n+            }\n+            synchronized(this) {\n+                next =\n+                    msgBuffer.get(new Long(lastMessageProcessed.get() + 1));\n+                if (next == null) {\n+                    isWriting = false;\n+                }\n+            }\n         }\n+        \n         return false;\n     }//writeMessage\n \n@@ -248,6 +310,8 @@ public void cleanup() {\n         data = null;\n         nrOfMessagesProcessed = 0;\n         totalNrOfMessages = 0;\n+        msgBuffer.clear();\n+        lastMessageProcessed = null;\n     }\n \n     /**\n@@ -309,4 +373,4 @@ public File getFile() {\n         return file;\n     }\n \n-}\n\\ No newline at end of file\n+}",
                "deletions": 16
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE reported on the dev list. The other toUpperCase() calls should be safe since the String will be non-null when the method is called.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@657149 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/85435021f16116a7f8b89060eab3975caa60c527",
        "parent": "https://github.com/apache/tomcat/commit/4607cef3d13df6b42e0259b528ea671925609933",
        "bug_id": "tomcat_351",
        "file": [
            {
                "sha": "cbc9fd69bd3829e59d2495b4c8ef0e2e964c6160",
                "filename": "java/org/apache/jasper/compiler/Validator.java",
                "blob_url": "https://github.com/apache/tomcat/blob/85435021f16116a7f8b89060eab3975caa60c527/java/org/apache/jasper/compiler/Validator.java",
                "raw_url": "https://github.com/apache/tomcat/raw/85435021f16116a7f8b89060eab3975caa60c527/java/org/apache/jasper/compiler/Validator.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/Validator.java?ref=85435021f16116a7f8b89060eab3975caa60c527",
                "patch": "@@ -326,7 +326,7 @@ private String comparePageEncodings(String thePageDirEnc,\n                 Node.PageDirective pageDir) throws JasperException {\n \n             Node.Root root = pageDir.getRoot();\n-            String configEnc = root.getJspConfigPageEncoding().toUpperCase();\n+            String configEnc = root.getJspConfigPageEncoding();\n             String pageDirEnc = thePageDirEnc.toUpperCase();\n \n             /*\n@@ -336,6 +336,7 @@ private String comparePageEncodings(String thePageDirEnc,\n              * \"UTF-16LE\" as identical.\n              */\n             if (configEnc != null) {\n+                configEnc = configEnc.toUpperCase();\n                 if (!pageDirEnc.equals(configEnc)\n                         && (!pageDirEnc.startsWith(\"UTF-16\") || !configEnc\n                                 .startsWith(\"UTF-16\"))) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Continue to give Remy a headache by fixing the problem where when the outer most wrapper is a ServetRequest/ResponseWrapper, but not a HttpServletRequest/ResponseWrapper would cause an NPE.\n\nFix for bug: #43668\nReported by:   Mailmur  \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@588477 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/7b93f573331df0e7dd92ab5ff5e36f3df7629cc6",
        "parent": "https://github.com/apache/tomcat/commit/cd93610f029c73bb2c17d85bac05a65485fa1dfc",
        "bug_id": "tomcat_352",
        "file": [
            {
                "sha": "d7225bdb72661aa709e6e63346574b139925b245",
                "filename": "java/org/apache/catalina/core/ApplicationDispatcher.java",
                "blob_url": "https://github.com/apache/tomcat/blob/7b93f573331df0e7dd92ab5ff5e36f3df7629cc6/java/org/apache/catalina/core/ApplicationDispatcher.java",
                "raw_url": "https://github.com/apache/tomcat/raw/7b93f573331df0e7dd92ab5ff5e36f3df7629cc6/java/org/apache/catalina/core/ApplicationDispatcher.java",
                "status": "modified",
                "changes": 51,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/ApplicationDispatcher.java?ref=7b93f573331df0e7dd92ab5ff5e36f3df7629cc6",
                "patch": "@@ -138,6 +138,16 @@ public Object run() throws ServletException, IOException {\n          * Are we performing an include() instead of a forward()?\n          */\n         boolean including = false;\n+\n+        /**\n+         * Outer most HttpServletRequest in the chain\n+         */\n+        HttpServletRequest hrequest = null;\n+\n+        /**\n+         * Outermost HttpServletResponse in the chain\n+         */\n+        HttpServletResponse hresponse = null;\n     }\n \n     // ----------------------------------------------------------- Constructors\n@@ -316,24 +326,13 @@ private void doForward(ServletRequest request, ServletResponse response)\n             checkSameObjects(request, response);\n         }\n \n-        // Identify the HTTP-specific request and response objects (if any)\n-        HttpServletRequest hrequest = null;\n-        if (request instanceof HttpServletRequest)\n-            hrequest = (HttpServletRequest) request;\n-        HttpServletResponse hresponse = null;\n-        if (response instanceof HttpServletResponse)\n-            hresponse = (HttpServletResponse) response;\n-\n-        // Handle a non-HTTP forward by passing the existing request/response\n-        if ((hrequest == null) || (hresponse == null)) {\n-            processRequest(hrequest,hresponse,state);\n-        }\n-\n+        wrapResponse(state);\n         // Handle an HTTP named dispatcher forward\n-        else if ((servletPath == null) && (pathInfo == null)) {\n+        if ((servletPath == null) && (pathInfo == null)) {\n \n             ApplicationHttpRequest wrequest =\n                 (ApplicationHttpRequest) wrapRequest(state);\n+            HttpServletRequest hrequest = state.hrequest;\n             wrequest.setRequestURI(hrequest.getRequestURI());\n             wrequest.setContextPath(hrequest.getContextPath());\n             wrequest.setServletPath(hrequest.getServletPath());\n@@ -349,7 +348,7 @@ else if ((servletPath == null) && (pathInfo == null)) {\n             ApplicationHttpRequest wrequest =\n                 (ApplicationHttpRequest) wrapRequest(state);\n             String contextPath = context.getPath();\n-\n+            HttpServletRequest hrequest = state.hrequest;\n             if (hrequest.getAttribute(Globals.FORWARD_REQUEST_URI_ATTR) == null) {\n                 wrequest.setAttribute(Globals.FORWARD_REQUEST_URI_ATTR,\n                                       hrequest.getRequestURI());\n@@ -488,19 +487,8 @@ private void doInclude(ServletRequest request, ServletResponse response)\n         // Create a wrapped response to use for this request\n         wrapResponse(state);\n \n-        // Handle a non-HTTP include\n-        if (!(request instanceof HttpServletRequest) ||\n-            !(response instanceof HttpServletResponse)) {\n-            request.setAttribute(ApplicationFilterFactory.DISPATCHER_TYPE_ATTR,\n-                    Integer.valueOf(ApplicationFilterFactory.INCLUDE));\n-            request.setAttribute(\n-                    ApplicationFilterFactory.DISPATCHER_REQUEST_PATH_ATTR,\n-                    servletPath);\n-            invoke(request, state.outerResponse, state);\n-        }\n-\n         // Handle an HTTP named dispatcher include\n-        else if (name != null) {\n+        if (name != null) {\n \n             ApplicationHttpRequest wrequest =\n                 (ApplicationHttpRequest) wrapRequest(state);\n@@ -584,7 +572,7 @@ private void invoke(ServletRequest request, ServletResponse response,\n         }\n \n         // Initialize local variables we may need\n-        HttpServletResponse hresponse = (HttpServletResponse) response;\n+        HttpServletResponse hresponse = state.hresponse;\n         Servlet servlet = null;\n         IOException ioException = null;\n         ServletException servletException = null;\n@@ -817,6 +805,8 @@ private ServletRequest wrapRequest(State state) {\n         ServletRequest previous = null;\n         ServletRequest current = state.outerRequest;\n         while (current != null) {\n+            if(state.hrequest == null && (current instanceof HttpServletRequest))\n+                state.hrequest = (HttpServletRequest)current;\n             if (\"org.apache.catalina.servlets.InvokerHttpRequest\".\n                 equals(current.getClass().getName()))\n                 break; // KLUDGE - Make nested RD.forward() using invoker work\n@@ -878,6 +868,11 @@ private ServletResponse wrapResponse(State state) {\n         ServletResponse previous = null;\n         ServletResponse current = state.outerResponse;\n         while (current != null) {\n+            if(state.hresponse == null && (current instanceof HttpServletResponse)) {\n+                state.hresponse = (HttpServletResponse)current;\n+                if(!state.including) // Forward only needs hresponse\n+                    return null;\n+            }\n             if (!(current instanceof ServletResponseWrapper))\n                 break;\n             if (current instanceof ApplicationHttpResponse)",
                "deletions": 28
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "bug 41797: CNFE/NPE thrown from function mapper when externalizing\nPatch by Tuomas Kiviaho- tuomas.kiviahos at ikis fi\n(submit part2 of the patch as seem in comment #3)\n\n(Format police - help!!! I did my best)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@578610 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/4b17634ed0bacda764384e271cb0d3eace61282e",
        "parent": "https://github.com/apache/tomcat/commit/4461a96d8bb2c2f6132e5f370cf0d47ad18c7adb",
        "bug_id": "tomcat_353",
        "file": [
            {
                "sha": "a225e3b73aadc651f4c273a0d4335b653a92e6f9",
                "filename": "java/org/apache/el/lang/FunctionMapperImpl.java",
                "blob_url": "https://github.com/apache/tomcat/blob/4b17634ed0bacda764384e271cb0d3eace61282e/java/org/apache/el/lang/FunctionMapperImpl.java",
                "raw_url": "https://github.com/apache/tomcat/raw/4b17634ed0bacda764384e271cb0d3eace61282e/java/org/apache/el/lang/FunctionMapperImpl.java",
                "status": "modified",
                "changes": 13,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/el/lang/FunctionMapperImpl.java?ref=4b17634ed0bacda764384e271cb0d3eace61282e",
                "patch": "@@ -120,9 +120,16 @@ public Function() {\n         public void writeExternal(ObjectOutput out) throws IOException {\n             out.writeUTF((this.prefix != null) ? this.prefix : \"\");\n             out.writeUTF(this.localName);\n-            out.writeUTF(this.m.getDeclaringClass().getName());\n-            out.writeUTF(this.m.getName());\n-            out.writeObject(ReflectionUtil.toTypeNameArray(this.m.getParameterTypes()));\n+            out.writeUTF((this.owner != null) ? \n+                     this.owner : \n+                     this.m.getDeclaringClass().getName());\n+            out.writeUTF((this.name != null) ? \n+                     this.name : \n+                     this.m.getName());\n+            out.writeObject((this.types != null) ? \n+                     this.types : \n+                     ReflectionUtil.toTypeNameArray(this.m.getParameterTypes()));\n+\n         }\n     \n         /*",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Start preparing for non blocking writes, the underlying code has to have the ability if there is ever gonna be a need\nfix NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@526577 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/007b833097f471226dd754d089e1f26b5cf50701",
        "parent": "https://github.com/apache/tomcat/commit/6d0d89bce774074ba9bda3b785ba305a72c93ed8",
        "bug_id": "tomcat_354",
        "file": [
            {
                "sha": "34716c5fc4a35a779f1b67c7f0f569a7cc282e34",
                "filename": "java/org/apache/tomcat/util/net/NioEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/007b833097f471226dd754d089e1f26b5cf50701/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/007b833097f471226dd754d089e1f26b5cf50701/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "status": "modified",
                "changes": 10,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/NioEndpoint.java?ref=007b833097f471226dd754d089e1f26b5cf50701",
                "patch": "@@ -2063,8 +2063,9 @@ public void run() {\n             try {\n                 key = socket.getIOChannel().keyFor(socket.getPoller().getSelector());\n                 int handshake = -1;\n+                \n                 try {\n-                    handshake = socket.handshake(key.isReadable(), key.isWritable());\n+                    if (key!=null) handshake = socket.handshake(key.isReadable(), key.isWritable());\n                 }catch ( IOException x ) {\n                     handshake = -1;\n                     if ( log.isDebugEnabled() ) log.debug(\"Error during SSL handshake\",x);\n@@ -2091,8 +2092,11 @@ public void run() {\n                         }\n                     } \n                 } else if (handshake == -1 ) {\n-                    KeyAttachment ka = (KeyAttachment)key.attachment();\n-                    socket.getPoller().cancelledKey(key,SocketStatus.DISCONNECT,false);\n+                    KeyAttachment ka = null;\n+                    if (key!=null) {\n+                        ka = (KeyAttachment) key.attachment();\n+                        socket.getPoller().cancelledKey(key, SocketStatus.DISCONNECT, false);\n+                    }\n                     try {socket.close(true);}catch (IOException ignore){}\n                     nioChannels.offer(socket);\n                     if ( ka!=null ) keyCache.offer(ka);",
                "deletions": 3
            },
            {
                "sha": "0910d919e3288b6f0ce10631fc091b7079797a15",
                "filename": "java/org/apache/tomcat/util/net/NioSelectorPool.java",
                "blob_url": "https://github.com/apache/tomcat/blob/007b833097f471226dd754d089e1f26b5cf50701/java/org/apache/tomcat/util/net/NioSelectorPool.java",
                "raw_url": "https://github.com/apache/tomcat/raw/007b833097f471226dd754d089e1f26b5cf50701/java/org/apache/tomcat/util/net/NioSelectorPool.java",
                "status": "modified",
                "changes": 42,
                "additions": 34,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/NioSelectorPool.java?ref=007b833097f471226dd754d089e1f26b5cf50701",
                "patch": "@@ -126,7 +126,11 @@ public void open() throws IOException {\n      * @throws IOException if an IO Exception occurs in the underlying socket logic\n      */\n     public int write(ByteBuffer buf, NioChannel socket, Selector selector, long writeTimeout) throws IOException {\n-        if ( SHARED ) {\n+        return write(buf,socket,selector,writeTimeout,true);\n+    }\n+    \n+    public int write(ByteBuffer buf, NioChannel socket, Selector selector, long writeTimeout, boolean block) throws IOException {\n+        if ( SHARED && block) {\n             return NioBlockingSelector.write(buf,socket,writeTimeout);\n         }\n         SelectionKey key = null;\n@@ -140,14 +144,16 @@ public int write(ByteBuffer buf, NioChannel socket, Selector selector, long writ\n         }\n         try {\n             while ( (!timedout) && buf.hasRemaining() ) {\n+                int cnt = 0;\n                 if ( keycount > 0 ) { //only write if we were registered for a write\n-                    int cnt = socket.write(buf); //write the data\n+                    cnt = socket.write(buf); //write the data\n                     if (cnt == -1) throw new EOFException();\n                     written += cnt;\n                     if (cnt > 0) {\n                         time = System.currentTimeMillis(); //reset our timeout timer\n                         continue; //we successfully wrote, try again without a selector\n                     }\n+                    if (cnt==0 && (!block)) break; //don't block\n                 }\n                 if ( selector != null ) {\n                     //register OP_WRITE to the selector\n@@ -181,7 +187,25 @@ public int write(ByteBuffer buf, NioChannel socket, Selector selector, long writ\n      * @throws IOException if an IO Exception occurs in the underlying socket logic\n      */\n     public int read(ByteBuffer buf, NioChannel socket, Selector selector, long readTimeout) throws IOException {\n-        if ( SHARED ) {\n+        return read(buf,socket,selector,readTimeout,true);\n+    }\n+    /**\n+     * Performs a read using the bytebuffer for data to be read and a selector to register for events should \n+     * you have the block=true.\n+     * If the <code>selector</code> parameter is null, then it will perform a busy read that could\n+     * take up a lot of CPU cycles.\n+     * @param buf ByteBuffer - the buffer containing the data, we will read as until we have read at least one byte or we timed out\n+     * @param socket SocketChannel - the socket to write data to\n+     * @param selector Selector - the selector to use for blocking, if null then a busy read will be initiated\n+     * @param readTimeout long - the timeout for this read operation in milliseconds, -1 means no timeout\n+     * @param block - true if you want to block until data becomes available or timeout time has been reached\n+     * @return int - returns the number of bytes read\n+     * @throws EOFException if read returns -1\n+     * @throws SocketTimeoutException if the read times out\n+     * @throws IOException if an IO Exception occurs in the underlying socket logic\n+     */\n+    public int read(ByteBuffer buf, NioChannel socket, Selector selector, long readTimeout, boolean block) throws IOException {\n+        if ( SHARED && block) {\n             return NioBlockingSelector.read(buf,socket,readTimeout);\n         }\n         SelectionKey key = null;\n@@ -190,14 +214,16 @@ public int read(ByteBuffer buf, NioChannel socket, Selector selector, long readT\n         int keycount = 1; //assume we can write\n         long time = System.currentTimeMillis(); //start the timeout timer\n         try {\n-            while ( (!timedout) && read == 0 ) {\n+            while ( (!timedout) ) {\n+                int cnt = 0;\n                 if ( keycount > 0 ) { //only read if we were registered for a read\n-                    int cnt = socket.read(buf);\n+                    cnt = socket.read(buf);\n                     if (cnt == -1) throw new EOFException();\n                     read += cnt;\n-                    if (cnt > 0) break;\n-                }\n-                if ( selector != null ) {\n+                    if (cnt > 0) continue; //read some more\n+                    if (cnt==0 && (read>0 || (!block) ) ) break; //we are done reading\n+                } \n+                if ( selector != null ) {//perform a blocking read\n                     //register OP_WRITE to the selector\n                     if (key==null) key = socket.getIOChannel().register(selector, SelectionKey.OP_READ);\n                     else key.interestOps(SelectionKey.OP_READ);",
                "deletions": 8
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Port fix bug 37458. Remove the possibility of some NPE and IAE issues.\nNote for Remy - you had some ideas to improve this patch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@471263 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/79631bba45a132c8c614355cc11303fc113ffb0e",
        "parent": "https://github.com/apache/tomcat/commit/4d3fffe70980a88c39abd7b9747f9197875bf40a",
        "bug_id": "tomcat_355",
        "file": [
            {
                "sha": "8b29ffe3343c1b4f93a42de5bb0a5559390308ee",
                "filename": "java/org/apache/catalina/loader/WebappClassLoader.java",
                "blob_url": "https://github.com/apache/tomcat/blob/79631bba45a132c8c614355cc11303fc113ffb0e/java/org/apache/catalina/loader/WebappClassLoader.java",
                "raw_url": "https://github.com/apache/tomcat/raw/79631bba45a132c8c614355cc11303fc113ffb0e/java/org/apache/catalina/loader/WebappClassLoader.java",
                "status": "modified",
                "changes": 87,
                "additions": 41,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/loader/WebappClassLoader.java?ref=79631bba45a132c8c614355cc11303fc113ffb0e",
                "patch": "@@ -1758,63 +1758,58 @@ protected Class findClassInternal(String name)\n         if (clazz != null)\n             return clazz;\n \n-        synchronized (this) {\n+        synchronized (entry) {\n             if (entry.binaryContent == null && entry.loadedClass == null)\n                 throw new ClassNotFoundException(name);\n-        }\n-\n-        // Looking up the package\n-        String packageName = null;\n-        int pos = name.lastIndexOf('.');\n-        if (pos != -1)\n-            packageName = name.substring(0, pos);\n \n-        Package pkg = null;\n-\n-        if (packageName != null) {\n-\n-            pkg = getPackage(packageName);\n-\n-            // Define the package (if null)\n-            if (pkg == null) {\n-                if (entry.manifest == null) {\n-                    definePackage(packageName, null, null, null, null, null,\n-                                  null, null);\n-                } else {\n-                    definePackage(packageName, entry.manifest, entry.codeBase);\n+            // Looking up the package\n+            String packageName = null;\n+            int pos = name.lastIndexOf('.');\n+            if (pos != -1)\n+                packageName = name.substring(0, pos);\n+        \n+            Package pkg = null;\n+        \n+            if (packageName != null) {\n+                synchronized (this) {\n+                    pkg = getPackage(packageName);\n+            \n+                    // Define the package (if null)\n+                    if (pkg == null) {\n+                        if (entry.manifest == null) {\n+                            definePackage(packageName, null, null, null, null,\n+                                    null, null, null);\n+                        } else {\n+                            definePackage(packageName, entry.manifest,\n+                                    entry.codeBase);\n+                        }\n+                    }\n                 }\n             }\n-\n-        }\n-\n-        // Create the code source object\n-        CodeSource codeSource =\n-            new CodeSource(entry.codeBase, entry.certificates);\n-\n-        if (securityManager != null) {\n-\n-            // Checking sealing\n-            if (pkg != null) {\n-                boolean sealCheck = true;\n-                if (pkg.isSealed()) {\n-                    sealCheck = pkg.isSealed(entry.codeBase);\n-                } else {\n-                    sealCheck = (entry.manifest == null)\n-                        || !isPackageSealed(packageName, entry.manifest);\n+    \n+            if (securityManager != null) {\n+\n+                // Checking sealing\n+                if (pkg != null) {\n+                    boolean sealCheck = true;\n+                    if (pkg.isSealed()) {\n+                        sealCheck = pkg.isSealed(entry.codeBase);\n+                    } else {\n+                        sealCheck = (entry.manifest == null)\n+                            || !isPackageSealed(packageName, entry.manifest);\n+                    }\n+                    if (!sealCheck)\n+                        throw new SecurityException\n+                            (\"Sealing violation loading \" + name + \" : Package \"\n+                             + packageName + \" is sealed.\");\n                 }\n-                if (!sealCheck)\n-                    throw new SecurityException\n-                        (\"Sealing violation loading \" + name + \" : Package \"\n-                         + packageName + \" is sealed.\");\n+    \n             }\n \n-        }\n-\n-        synchronized (this) {\n             if (entry.loadedClass == null) {\n                 clazz = defineClass(name, entry.binaryContent, 0,\n                         entry.binaryContent.length, \n-                        codeSource);\n+                        new CodeSource(entry.codeBase, entry.certificates));\n                 entry.loadedClass = clazz;\n                 entry.binaryContent = null;\n                 entry.source = null;",
                "deletions": 46
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=57704\nAccess instanceManager via get/set methods.\nFix potential NPEs. In web app start if a problem occur prior to instanceManager initialization then:\n- SCI.onStart will fail if it tries to use instanceManager\n- During web app stop, StandardContext.listenerStop will fail if it tries to use instanceManager\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1666649 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/61bb48a7ac7965fcbd2911c25fb26bf1916dc7b2",
        "parent": "https://github.com/apache/tomcat/commit/65873d94cf6d5e8ca90503d5c721d94becb0c8db",
        "bug_id": "tomcat_356",
        "file": [
            {
                "sha": "4c8805f2d9dae74ddd552aa23891d9c648a45798",
                "filename": "java/org/apache/catalina/core/ApplicationContext.java",
                "blob_url": "https://github.com/apache/tomcat/blob/61bb48a7ac7965fcbd2911c25fb26bf1916dc7b2/java/org/apache/catalina/core/ApplicationContext.java",
                "raw_url": "https://github.com/apache/tomcat/raw/61bb48a7ac7965fcbd2911c25fb26bf1916dc7b2/java/org/apache/catalina/core/ApplicationContext.java",
                "status": "modified",
                "changes": 18,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/ApplicationContext.java?ref=61bb48a7ac7965fcbd2911c25fb26bf1916dc7b2",
                "patch": "@@ -1248,16 +1248,18 @@ public void addListener(Class<? extends EventListener> listenerClass) {\n     public void addListener(String className) {\n \n         try {\n-            Object obj = context.getInstanceManager().newInstance(className);\n+            if (context.getInstanceManager() != null) {\n+                Object obj = context.getInstanceManager().newInstance(className);\n \n-            if (!(obj instanceof EventListener)) {\n-                throw new IllegalArgumentException(sm.getString(\n-                        \"applicationContext.addListener.iae.wrongType\",\n-                        className));\n-            }\n+                if (!(obj instanceof EventListener)) {\n+                    throw new IllegalArgumentException(sm.getString(\n+                            \"applicationContext.addListener.iae.wrongType\",\n+                            className));\n+                }\n \n-            EventListener listener = (EventListener) obj;\n-            addListener(listener);\n+                EventListener listener = (EventListener) obj;\n+                addListener(listener);\n+            }\n         } catch (IllegalAccessException e) {\n             throw new IllegalArgumentException(sm.getString(\n                     \"applicationContext.addListener.iae.cnfe\", className),",
                "deletions": 8
            },
            {
                "sha": "9abe57a71d6c72e5303a8c9000e6c5ecce6959bd",
                "filename": "java/org/apache/catalina/core/StandardContext.java",
                "blob_url": "https://github.com/apache/tomcat/blob/61bb48a7ac7965fcbd2911c25fb26bf1916dc7b2/java/org/apache/catalina/core/StandardContext.java",
                "raw_url": "https://github.com/apache/tomcat/raw/61bb48a7ac7965fcbd2911c25fb26bf1916dc7b2/java/org/apache/catalina/core/StandardContext.java",
                "status": "modified",
                "changes": 12,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/StandardContext.java?ref=61bb48a7ac7965fcbd2911c25fb26bf1916dc7b2",
                "patch": "@@ -4644,7 +4644,7 @@ public boolean listenerStart() {\n                     listeners[i] + \"'\");\n             try {\n                 String listener = listeners[i];\n-                results[i] = instanceManager.newInstance(listener);\n+                results[i] = getInstanceManager().newInstance(listener);\n             } catch (Throwable t) {\n                 t = ExceptionUtils.unwrapInvocationTargetException(t);\n                 ExceptionUtils.handleThrowable(t);\n@@ -4782,7 +4782,9 @@ public boolean listenerStop() {\n                     }\n                 }\n                 try {\n-                    getInstanceManager().destroyInstance(listeners[j]);\n+                    if (getInstanceManager() != null) {\n+                        getInstanceManager().destroyInstance(listeners[j]);\n+                    }\n                 } catch (Throwable t) {\n                     t = ExceptionUtils.unwrapInvocationTargetException(t);\n                     ExceptionUtils.handleThrowable(t);\n@@ -4802,7 +4804,9 @@ public boolean listenerStop() {\n                 if (listeners[j] == null)\n                     continue;\n                 try {\n-                    getInstanceManager().destroyInstance(listeners[j]);\n+                    if (getInstanceManager() != null) {\n+                        getInstanceManager().destroyInstance(listeners[j]);\n+                    }\n                 } catch (Throwable t) {\n                     t = ExceptionUtils.unwrapInvocationTargetException(t);\n                     ExceptionUtils.handleThrowable(t);\n@@ -5452,7 +5456,7 @@ protected synchronized void stopInternal() throws LifecycleException {\n         }\n \n         //reset the instance manager\n-        instanceManager = null;\n+        setInstanceManager(null);\n \n         if (log.isDebugEnabled())\n             log.debug(\"Stopping complete\");",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid doing anything if the endpoint is not running (avoids possible NPE with the caches (?) ) and create caches first in start (just in case).\nNote: I still don't see much real benefit in these caches, and their configuration is even more questionable (but it is there and documented).\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1608737 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/bc8ecc002255166414c9e76267c062c641081f2f",
        "parent": "https://github.com/apache/tomcat/commit/27e24abc774118d3c63521960267cd6d8fcf29b4",
        "bug_id": "tomcat_357",
        "file": [
            {
                "sha": "a653409dc989ea6f566275fef9221fa49f0395e7",
                "filename": "java/org/apache/tomcat/util/net/Nio2Endpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/bc8ecc002255166414c9e76267c062c641081f2f/java/org/apache/tomcat/util/net/Nio2Endpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/bc8ecc002255166414c9e76267c062c641081f2f/java/org/apache/tomcat/util/net/Nio2Endpoint.java",
                "status": "modified",
                "changes": 54,
                "additions": 27,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/Nio2Endpoint.java?ref=bc8ecc002255166414c9e76267c062c641081f2f",
                "patch": "@@ -345,11 +345,6 @@ public void startInternal() throws Exception {\n             running = true;\n             paused = false;\n \n-            // Create worker collection\n-            if ( getExecutor() == null ) {\n-                createExecutor();\n-            }\n-\n             if (useCaches) {\n                 processorCache = new SynchronizedStack<>(SynchronizedStack.DEFAULT_SIZE,\n                         socketProperties.getProcessorCache());\n@@ -359,6 +354,11 @@ public void startInternal() throws Exception {\n                         socketProperties.getBufferPool());\n             }\n \n+            // Create worker collection\n+            if ( getExecutor() == null ) {\n+                createExecutor();\n+            }\n+\n             initializeConnectionLatch();\n             startAcceptorThreads();\n \n@@ -384,30 +384,30 @@ public void stopInternal() {\n             running = false;\n             getAsyncTimeout().stop();\n             unlockAccept();\n-        }\n-        // Use the executor to avoid binding the main thread if something bad\n-        // occurs and unbind will also wait for a bit for it to complete\n-        getExecutor().execute(new Runnable() {\n-            @Override\n-            public void run() {\n-                // Timeout any pending async request\n-                for (SocketWrapper<Nio2Channel> socket : waitingRequests) {\n-                    processSocket(socket, SocketStatus.TIMEOUT, false);\n-                }\n-                // Then close all active connections if any remains\n-                try {\n-                    handler.closeAll();\n-                } catch (Throwable t) {\n-                    ExceptionUtils.handleThrowable(t);\n-                } finally {\n-                    allClosed = true;\n+            // Use the executor to avoid binding the main thread if something bad\n+            // occurs and unbind will also wait for a bit for it to complete\n+            getExecutor().execute(new Runnable() {\n+                @Override\n+                public void run() {\n+                    // Timeout any pending async request\n+                    for (SocketWrapper<Nio2Channel> socket : waitingRequests) {\n+                        processSocket(socket, SocketStatus.TIMEOUT, false);\n+                    }\n+                    // Then close all active connections if any remains\n+                    try {\n+                        handler.closeAll();\n+                    } catch (Throwable t) {\n+                        ExceptionUtils.handleThrowable(t);\n+                    } finally {\n+                        allClosed = true;\n+                    }\n                 }\n+            });\n+            if (useCaches) {\n+                socketWrapperCache.clear();\n+                nioChannels.clear();\n+                processorCache.clear();\n             }\n-        });\n-        if (useCaches) {\n-            socketWrapperCache.clear();\n-            nioChannels.clear();\n-            processorCache.clear();\n         }\n     }\n ",
                "deletions": 27
            },
            {
                "sha": "e64586f1b46879292cefe2ccdb5fca522c80e36f",
                "filename": "java/org/apache/tomcat/util/net/NioEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/bc8ecc002255166414c9e76267c062c641081f2f/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/bc8ecc002255166414c9e76267c062c641081f2f/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "status": "modified",
                "changes": 20,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/NioEndpoint.java?ref=bc8ecc002255166414c9e76267c062c641081f2f",
                "patch": "@@ -401,11 +401,6 @@ public void startInternal() throws Exception {\n             running = true;\n             paused = false;\n \n-            // Create worker collection\n-            if ( getExecutor() == null ) {\n-                createExecutor();\n-            }\n-\n             processorCache = new SynchronizedStack<>(SynchronizedStack.DEFAULT_SIZE,\n                     socketProperties.getProcessorCache());\n             keyCache = new SynchronizedStack<>(SynchronizedStack.DEFAULT_SIZE,\n@@ -415,6 +410,11 @@ public void startInternal() throws Exception {\n             nioChannels = new SynchronizedStack<>(SynchronizedStack.DEFAULT_SIZE,\n                     socketProperties.getBufferPool());\n \n+            // Create worker collection\n+            if ( getExecutor() == null ) {\n+                createExecutor();\n+            }\n+\n             initializeConnectionLatch();\n \n             // Start poller threads\n@@ -453,12 +453,12 @@ public void stopInternal() {\n                 stopLatch.await(selectorTimeout + 100, TimeUnit.MILLISECONDS);\n             } catch (InterruptedException ignore) {\n             }\n+            shutdownExecutor();\n+            eventCache.clear();\n+            keyCache.clear();\n+            nioChannels.clear();\n+            processorCache.clear();\n         }\n-        eventCache.clear();\n-        keyCache.clear();\n-        nioChannels.clear();\n-        processorCache.clear();\n-        shutdownExecutor();\n \n     }\n ",
                "deletions": 10
            },
            {
                "sha": "5adf618a53e08911f6b6d1e05d2e890b8053af74",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/bc8ecc002255166414c9e76267c062c641081f2f/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/bc8ecc002255166414c9e76267c062c641081f2f/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=bc8ecc002255166414c9e76267c062c641081f2f",
                "patch": "@@ -131,6 +131,10 @@\n         to data available, remaining and extra write events, mostly occurring\n         with non blocking Servlet 3.1. (remm)\n       </fix>\n+      <fix>\n+        Avoid possible NPE stopping endpoints that are not started (stop\n+        shouldn't do anything in that case). (remm)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Jasper\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Avoid NPE if the write listener is called once immediately after being set, even if no data was written (= the app doesn't send any message during the init of the connection).\nI don't think Tomcat does it yet (this doesn't need to be ported to Tomcat 7 since it is not a Servlet 3.1 impl).\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1556071 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/22703729adbc2b2da4a32502be68989d1ae95684",
        "parent": "https://github.com/apache/tomcat/commit/3585a9267bfa90fe181710948d0f9d03fa94c7e3",
        "bug_id": "tomcat_358",
        "file": [
            {
                "sha": "998bafd59d931d7edfc6a2cce9dae54629af68a6",
                "filename": "java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java",
                "blob_url": "https://github.com/apache/tomcat/blob/22703729adbc2b2da4a32502be68989d1ae95684/java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java",
                "raw_url": "https://github.com/apache/tomcat/raw/22703729adbc2b2da4a32502be68989d1ae95684/java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java?ref=22703729adbc2b2da4a32502be68989d1ae95684",
                "patch": "@@ -83,6 +83,11 @@ protected void doWrite(SendHandler handler, ByteBuffer... buffers) {\n \n \n     public void onWritePossible(boolean useDispatch) {\n+        if (buffers == null) {\n+            // Servlet 3.1 will call the write listener once even if nothing\n+            // was written\n+            return;\n+        }\n         boolean complete = true;\n         try {\n             // If this is false there will be a call back when it is true",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Yet another attempt to fix Comet test failures for Connector stop.\nIf the endpoint is stopped - don't add sockets to the poller (it may have been stopped already) and process the STOP event directly.\nIf the connector stop has completed then the executor may be null so protect against NPEs and log when a socket couldn't be processed.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1379580 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/cfcd6a0711374149d6ca453f20451116addca75d",
        "parent": "https://github.com/apache/tomcat/commit/0cc4cf493b3ae792e82b863e8a5155462a00ae75",
        "bug_id": "tomcat_359",
        "file": [
            {
                "sha": "ca430954d9d6990bfeb7239b4e7df91ee4960855",
                "filename": "java/org/apache/coyote/http11/Http11AprProtocol.java",
                "blob_url": "https://github.com/apache/tomcat/blob/cfcd6a0711374149d6ca453f20451116addca75d/java/org/apache/coyote/http11/Http11AprProtocol.java",
                "raw_url": "https://github.com/apache/tomcat/raw/cfcd6a0711374149d6ca453f20451116addca75d/java/org/apache/coyote/http11/Http11AprProtocol.java",
                "status": "modified",
                "changes": 13,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/Http11AprProtocol.java?ref=cfcd6a0711374149d6ca453f20451116addca75d",
                "patch": "@@ -293,9 +293,16 @@ protected void longPoll(SocketWrapper<Long> socket,\n                 socket.setAsync(true);\n             } else if (processor.isComet()) {\n                 // Comet\n-                ((AprEndpoint) proto.endpoint).getCometPoller().add(\n-                        socket.getSocket().longValue(),\n-                        proto.endpoint.getSoTimeout());\n+                if (proto.endpoint.isRunning()) {\n+                    ((AprEndpoint) proto.endpoint).getCometPoller().add(\n+                            socket.getSocket().longValue(),\n+                            proto.endpoint.getSoTimeout());\n+                } else {\n+                    // Process a STOP directly\n+                    ((AprEndpoint) proto.endpoint).processSocket(\n+                            socket.getSocket().longValue(),\n+                            SocketStatus.STOP);\n+                }\n             } else {\n                 // Upgraded\n                 ((AprEndpoint) proto.endpoint).getPoller().add(",
                "deletions": 3
            },
            {
                "sha": "552f0ac889032722ef6ecc6eaae7256709e4a5eb",
                "filename": "java/org/apache/tomcat/util/net/AprEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/cfcd6a0711374149d6ca453f20451116addca75d/java/org/apache/tomcat/util/net/AprEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/cfcd6a0711374149d6ca453f20451116addca75d/java/org/apache/tomcat/util/net/AprEndpoint.java",
                "status": "modified",
                "changes": 36,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/AprEndpoint.java?ref=cfcd6a0711374149d6ca453f20451116addca75d",
                "patch": "@@ -23,6 +23,7 @@\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.Executor;\n import java.util.concurrent.RejectedExecutionException;\n \n import org.apache.juli.logging.Log;\n@@ -845,9 +846,15 @@ protected boolean processSocketWithOptions(long socket) {\n      */\n     protected boolean processSocket(long socket) {\n         try {\n-            SocketWrapper<Long> wrapper =\n-                new SocketWrapper<Long>(Long.valueOf(socket));\n-            getExecutor().execute(new SocketProcessor(wrapper, null));\n+            Executor executor = getExecutor();\n+            if (executor == null) {\n+                log.warn(sm.getString(\"endpoint.warn.noExector\",\n+                        Long.valueOf(socket), null));\n+            } else {\n+                SocketWrapper<Long> wrapper =\n+                    new SocketWrapper<Long>(Long.valueOf(socket));\n+                executor.execute(new SocketProcessor(wrapper, null));\n+            }\n         } catch (RejectedExecutionException x) {\n             log.warn(\"Socket processing request was rejected for:\"+socket,x);\n             return false;\n@@ -865,11 +872,17 @@ protected boolean processSocket(long socket) {\n     /**\n      * Process given socket for an event.\n      */\n-    protected boolean processSocket(long socket, SocketStatus status) {\n+    public boolean processSocket(long socket, SocketStatus status) {\n         try {\n-            SocketWrapper<Long> wrapper =\n-                    new SocketWrapper<Long>(Long.valueOf(socket));\n-            getExecutor().execute(new SocketEventProcessor(wrapper, status));\n+            Executor executor = getExecutor();\n+            if (executor == null) {\n+                log.warn(sm.getString(\"endpoint.warn.noExector\",\n+                        Long.valueOf(socket), status));\n+            } else {\n+                SocketWrapper<Long> wrapper =\n+                        new SocketWrapper<Long>(Long.valueOf(socket));\n+                executor.execute(new SocketEventProcessor(wrapper, status));\n+            }\n         } catch (RejectedExecutionException x) {\n             log.warn(\"Socket processing request was rejected for:\"+socket,x);\n             return false;\n@@ -900,11 +913,14 @@ public boolean processSocketAsync(SocketWrapper<Long> socket,\n                             Thread.currentThread().setContextClassLoader(\n                                     getClass().getClassLoader());\n                         }\n-                        // During shutdown, executor may be null - avoid NPE\n-                        if (!running) {\n+                        Executor executor = getExecutor();\n+                        if (executor == null) {\n+                            log.warn(sm.getString(\"endpoint.warn.noExector\",\n+                                    socket, status));\n                             return false;\n+                        } else {\n+                            executor.execute(proc);\n                         }\n-                        getExecutor().execute(proc);\n                     } finally {\n                         if (Constants.IS_SECURITY_ENABLED) {\n                             PrivilegedAction<Void> pa = new PrivilegedSetTccl(loader);",
                "deletions": 10
            },
            {
                "sha": "56f4a1560272f4922650bed5f6503140a9fcd4cb",
                "filename": "java/org/apache/tomcat/util/net/res/LocalStrings.properties",
                "blob_url": "https://github.com/apache/tomcat/blob/cfcd6a0711374149d6ca453f20451116addca75d/java/org/apache/tomcat/util/net/res/LocalStrings.properties",
                "raw_url": "https://github.com/apache/tomcat/raw/cfcd6a0711374149d6ca453f20451116addca75d/java/org/apache/tomcat/util/net/res/LocalStrings.properties",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/res/LocalStrings.properties?ref=cfcd6a0711374149d6ca453f20451116addca75d",
                "patch": "@@ -38,3 +38,4 @@ endpoint.debug.socketCloseFail=Failed to close socket\n endpoint.apr.noSslCertFile=Connector attribute SSLCertificateFile must be defined when using SSL with APR\n endpoint.apr.invalidSslProtocol=An invalid value [{0}] was provided for the SSLProtocol attribute\n endpoint.nio.selectorCloseFail=Failed to close selector when closing the poller\n+endpoint.warn.noExector=Failed to process socket [{0}] in state [{1}] because the executor had already been shutdown",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Address some review comments:\n1. Avoid possible NPEs by using a local variable for the newDefaultAccessLog\n2. PropertyChangeListener should be added to the Engine\n3. Add the listener when the Noop logger is used so changes can be detected that could cause a different logger to be used.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1042413 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/e069ccede199d397df9627499ace941fec07d85c",
        "parent": "https://github.com/apache/tomcat/commit/c67f558fe32fba4a9f67194d56d280b4a87d04a9",
        "bug_id": "tomcat_360",
        "file": [
            {
                "sha": "eebb93727d51b10d6b143ce0c3d5eb7e1071b7b4",
                "filename": "java/org/apache/catalina/core/StandardEngine.java",
                "blob_url": "https://github.com/apache/tomcat/blob/e069ccede199d397df9627499ace941fec07d85c/java/org/apache/catalina/core/StandardEngine.java",
                "raw_url": "https://github.com/apache/tomcat/raw/e069ccede199d397df9627499ace941fec07d85c/java/org/apache/catalina/core/StandardEngine.java",
                "status": "modified",
                "changes": 35,
                "additions": 24,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/StandardEngine.java?ref=e069ccede199d397df9627499ace941fec07d85c",
                "patch": "@@ -321,41 +321,54 @@ public void logAccess(Request request, Response response, long time,\n         }\n \n         if (!logged && useDefault) {\n-            if (defaultAccessLog == null) {\n+            AccessLog newDefaultAccessLog = defaultAccessLog;\n+            if (newDefaultAccessLog == null) {\n                 // If we reached this point, this Engine can't have an AccessLog\n                 // Look in the defaultHost\n                 Host host = (Host) findChild(getDefaultHost());\n+                Context context = null;\n                 if (host != null && host.getState().isAvailable()) {\n-                    defaultAccessLog = host.getAccessLog();\n+                    newDefaultAccessLog = host.getAccessLog();\n \n-                    if (defaultAccessLog != null) {\n+                    if (newDefaultAccessLog != null) {\n                         AccessLogListener l = new AccessLogListener(this);\n-                        host.addPropertyChangeListener(l);\n+                        this.addPropertyChangeListener(l);\n                         host.addContainerListener(l);\n                         host.addLifecycleListener(l);\n                     } else {\n                         // Try the ROOT context of default host\n-                        Context context = (Context) host.findChild(\"\");\n+                        context = (Context) host.findChild(\"\");\n                         if (context != null &&\n                                 context.getState().isAvailable()) {\n-                            defaultAccessLog = context.getAccessLog();\n+                            newDefaultAccessLog = context.getAccessLog();\n                             \n-                            if (defaultAccessLog != null) {\n+                            if (newDefaultAccessLog != null) {\n                                 AccessLogListener l =\n                                     new AccessLogListener(this);\n-                                context.addPropertyChangeListener(l);\n+                                this.addPropertyChangeListener(l);\n                                 context.addLifecycleListener(l);\n                             }\n                         }\n                     }\n                 }\n \n-                if (defaultAccessLog == null) {\n-                    defaultAccessLog = new NoopAccessLog();\n+                if (newDefaultAccessLog == null) {\n+                    newDefaultAccessLog = new NoopAccessLog();\n+                    AccessLogListener l = new AccessLogListener(this);\n+                    this.addPropertyChangeListener(l);\n+                    if (host != null) {\n+                        host.addContainerListener(l);\n+                        host.addLifecycleListener(l);\n+                    }\n+                    if (context != null) {\n+                        context.addLifecycleListener(l);\n+                    }\n+                    \n                 }\n+                defaultAccessLog = newDefaultAccessLog;\n             }\n \n-            defaultAccessLog.log(request, response, time);\n+            newDefaultAccessLog.log(request, response, time);\n         }\n     }\n ",
                "deletions": 11
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "When the key is null (i.e., a stale entry), it cannot be removed with an explicit remove(key) call: you'll get an NPE. Those can be removed with expungeStaleEntries() call.\nAlso, simplified the code: Reference.referent can be accessed by calling get() - no need to use reflection for that.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@909212 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/ca89c78cf9b0bdd35d22eb136fe04ac4101eb0b9",
        "parent": "https://github.com/apache/tomcat/commit/651b596680dee51360e5fa818b82d1e5a4cd4882",
        "bug_id": "tomcat_361",
        "file": [
            {
                "sha": "4e98b1bfad902754c9ab24a644016997cb15400b",
                "filename": "java/org/apache/catalina/loader/WebappClassLoader.java",
                "blob_url": "https://github.com/apache/tomcat/blob/ca89c78cf9b0bdd35d22eb136fe04ac4101eb0b9/java/org/apache/catalina/loader/WebappClassLoader.java",
                "raw_url": "https://github.com/apache/tomcat/raw/ca89c78cf9b0bdd35d22eb136fe04ac4101eb0b9/java/org/apache/catalina/loader/WebappClassLoader.java",
                "status": "modified",
                "changes": 19,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/loader/WebappClassLoader.java?ref=ca89c78cf9b0bdd35d22eb136fe04ac4101eb0b9",
                "patch": "@@ -2177,15 +2177,13 @@ private void clearThreadLocalMap(Object map, Field internalTableField)\n                         ThreadLocal.class);\n             mapRemove.setAccessible(true);\n             Object[] table = (Object[]) internalTableField.get(map);\n+            int staleEntriesCount = 0;\n             if (table != null) {\n                 for (int j =0; j < table.length; j++) {\n                     if (table[j] != null) {\n                         boolean remove = false;\n                         // Check the key\n-                        Field keyField =\n-                            Reference.class.getDeclaredField(\"referent\");\n-                        keyField.setAccessible(true);\n-                        Object key = keyField.get(table[j]);\n+                        Object key = ((Reference<?>) table[j]).get();\n                         if (this.equals(key) || (key != null &&\n                                 this == key.getClass().getClassLoader())) {\n                             remove = true;\n@@ -2200,7 +2198,6 @@ private void clearThreadLocalMap(Object map, Field internalTableField)\n                             remove = true;\n                         }\n                         if (remove) {\n-                            Object entry = ((Reference<?>) table[j]).get();\n                             Object[] args = new Object[4];\n                             if (key != null) {\n                                 args[0] = key.getClass().getCanonicalName();\n@@ -2221,11 +2218,21 @@ private void clearThreadLocalMap(Object map, Field internalTableField)\n                                         \"webappClassLoader.clearThreadLocal\",\n                                         args));\n                             }\n-                            mapRemove.invoke(map, entry);\n+                            if (key == null) {\n+                              staleEntriesCount++;\n+                            } else {\n+                              mapRemove.invoke(map, key);\n+                            }\n                         }\n                     }\n                 }\n             }\n+            if (staleEntriesCount > 0) {\n+                Method mapRemoveStale =\n+                    map.getClass().getDeclaredMethod(\"expungeStaleEntries\");\n+                mapRemoveStale.setAccessible(true);\n+                mapRemoveStale.invoke(map);\n+            }\n         }\n     }\n ",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Patch provided by Cyrille Le Clerc\n* fix NPE in log statement if protocolHeader has not been defined and the servlet container does not support request.getHeader(null)\n* fix mismatch between javadoc  and code for filter parameter name \"allowedInternalProxies\" -> \"internalProxies\"\n* finish javadoc refactoring \"XForwardedFilter\" -> \"RemoteIpFilter\"\nAlso fix some Eclipse warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@834081 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/535b9a14314296ef787381f8834e5b4404b502cb",
        "parent": "https://github.com/apache/tomcat/commit/b9bbc3f2f7ad9bd68e9ce720a506e31941b6aaaa",
        "bug_id": "tomcat_362",
        "file": [
            {
                "sha": "7710febf9e1a3a1158888adaf3b7c2403e824a9d",
                "filename": "java/org/apache/catalina/filters/RemoteIpFilter.java",
                "blob_url": "https://github.com/apache/tomcat/blob/535b9a14314296ef787381f8834e5b4404b502cb/java/org/apache/catalina/filters/RemoteIpFilter.java",
                "raw_url": "https://github.com/apache/tomcat/raw/535b9a14314296ef787381f8834e5b4404b502cb/java/org/apache/catalina/filters/RemoteIpFilter.java",
                "status": "modified",
                "changes": 74,
                "additions": 35,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/filters/RemoteIpFilter.java?ref=535b9a14314296ef787381f8834e5b4404b502cb",
                "patch": "@@ -156,8 +156,8 @@\n  * </p>\n  * <code><pre>\n  * &lt;filter&gt;\n- *    &lt;filter-name&gt;XForwardedFilter&lt;/filter-name&gt;\n- *    &lt;filter-class&gt;fr.xebia.servlet.filter.XForwardedFilter&lt;/filter-class&gt;\n+ *    &lt;filter-name&gt;RemoteIpFilter&lt;/filter-name&gt;\n+ *    &lt;filter-class&gt;org.apache.catalina.filters.RemoteIpFilter&lt;/filter-class&gt;\n  *    &lt;init-param&gt;\n  *       &lt;param-name&gt;internalProxies&lt;/param-name&gt;&lt;param-value&gt;192\\.168\\.0\\.10, 192\\.168\\.0\\.11&lt;/param-value&gt;\n  *    &lt;/init-param&gt;\n@@ -173,7 +173,7 @@\n  * &lt;/filter&gt;\n  * \n  * &lt;filter-mapping&gt;\n- *    &lt;filter-name&gt;XForwardedFilter&lt;/filter-name&gt;\n+ *    &lt;filter-name&gt;RemoteIpFilter&lt;/filter-name&gt;\n  *    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n  *    &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt;\n  * &lt;/filter-mapping&gt;</pre></code>\n@@ -182,8 +182,8 @@\n  * <table border=\"1\">\n  * <tr>\n  * <th>property</th>\n- * <th>Value Before XForwardedFilter</th>\n- * <th>Value After XForwardedFilter</th>\n+ * <th>Value Before RemoteIpFilter</th>\n+ * <th>Value After RemoteIpFilter</th>\n  * </tr>\n  * <tr>\n  * <td>request.remoteAddr</td>\n@@ -229,12 +229,12 @@\n  * <strong>Sample with trusted proxies</strong>\n  * </p>\n  * <p>\n- * XForwardedFilter configuration:\n+ * RemoteIpFilter configuration:\n  * </p>\n  * <code><pre>\n  * &lt;filter&gt;\n- *    &lt;filter-name&gt;XForwardedFilter&lt;/filter-name&gt;\n- *    &lt;filter-class&gt;fr.xebia.servlet.filter.XForwardedFilter&lt;/filter-class&gt;\n+ *    &lt;filter-name&gt;RemoteIpFilter&lt;/filter-name&gt;\n+ *    &lt;filter-class&gt;org.apache.catalina.filters.RemoteIpFilter&lt;/filter-class&gt;\n  *    &lt;init-param&gt;\n  *       &lt;param-name&gt;internalProxies&lt;/param-name&gt;&lt;param-value&gt;192\\.168\\.0\\.10, 192\\.168\\.0\\.11&lt;/param-value&gt;\n  *    &lt;/init-param&gt;\n@@ -250,7 +250,7 @@\n  * &lt;/filter&gt;\n  * \n  * &lt;filter-mapping&gt;\n- *    &lt;filter-name&gt;XForwardedFilter&lt;/filter-name&gt;\n+ *    &lt;filter-name&gt;RemoteIpFilter&lt;/filter-name&gt;\n  *    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n  *    &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt;\n  * &lt;/filter-mapping&gt;</pre></code>\n@@ -259,8 +259,8 @@\n  * <table border=\"1\">\n  * <tr>\n  * <th>property</th>\n- * <th>Value Before XForwardedFilter</th>\n- * <th>Value After XForwardedFilter</th>\n+ * <th>Value Before RemoteIpFilter</th>\n+ * <th>Value After RemoteIpFilter</th>\n  * </tr>\n  * <tr>\n  * <td>request.remoteAddr</td>\n@@ -286,12 +286,12 @@\n  * <strong>Sample with internal and trusted proxies</strong>\n  * </p>\n  * <p>\n- * XForwardedFilter configuration:\n+ * RemoteIpFilter configuration:\n  * </p>\n  * <code><pre>\n  * &lt;filter&gt;\n- *    &lt;filter-name&gt;XForwardedFilter&lt;/filter-name&gt;\n- *    &lt;filter-class&gt;fr.xebia.servlet.filter.XForwardedFilter&lt;/filter-class&gt;\n+ *    &lt;filter-name&gt;RemoteIpFilter&lt;/filter-name&gt;\n+ *    &lt;filter-class&gt;org.apache.catalina.filters.RemoteIpFilter&lt;/filter-class&gt;\n  *    &lt;init-param&gt;\n  *       &lt;param-name&gt;internalProxies&lt;/param-name&gt;&lt;param-value&gt;192\\.168\\.0\\.10, 192\\.168\\.0\\.11&lt;/param-value&gt;\n  *    &lt;/init-param&gt;\n@@ -307,7 +307,7 @@\n  * &lt;/filter&gt;\n  * \n  * &lt;filter-mapping&gt;\n- *    &lt;filter-name&gt;XForwardedFilter&lt;/filter-name&gt;\n+ *    &lt;filter-name&gt;RemoteIpFilter&lt;/filter-name&gt;\n  *    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n  *    &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt;\n  * &lt;/filter-mapping&gt;</pre></code>\n@@ -316,8 +316,8 @@\n  * <table border=\"1\">\n  * <tr>\n  * <th>property</th>\n- * <th>Value Before XForwardedFilter</th>\n- * <th>Value After XForwardedFilter</th>\n+ * <th>Value Before RemoteIpFilter</th>\n+ * <th>Value After RemoteIpFilter</th>\n  * </tr>\n  * <tr>\n  * <td>request.remoteAddr</td>\n@@ -344,12 +344,12 @@\n  * <strong>Sample with an untrusted proxy</strong>\n  * </p>\n  * <p>\n- * XForwardedFilter configuration:\n+ * RemoteIpFilter configuration:\n  * </p>\n  * <code><pre>\n  * &lt;filter&gt;\n- *    &lt;filter-name&gt;XForwardedFilter&lt;/filter-name&gt;\n- *    &lt;filter-class&gt;fr.xebia.servlet.filter.XForwardedFilter&lt;/filter-class&gt;\n+ *    &lt;filter-name&gt;RemoteIpFilter&lt;/filter-name&gt;\n+ *    &lt;filter-class&gt;org.apache.catalina.filters.RemoteIpFilter&lt;/filter-class&gt;\n  *    &lt;init-param&gt;\n  *       &lt;param-name&gt;internalProxies&lt;/param-name&gt;&lt;param-value&gt;192\\.168\\.0\\.10, 192\\.168\\.0\\.11&lt;/param-value&gt;\n  *    &lt;/init-param&gt;\n@@ -365,7 +365,7 @@\n  * &lt;/filter&gt;\n  * \n  * &lt;filter-mapping&gt;\n- *    &lt;filter-name&gt;XForwardedFilter&lt;/filter-name&gt;\n+ *    &lt;filter-name&gt;RemoteIpFilter&lt;/filter-name&gt;\n  *    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n  *    &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt;\n  * &lt;/filter-mapping&gt;</pre></code>\n@@ -374,8 +374,8 @@\n  * <table border=\"1\">\n  * <tr>\n  * <th>property</th>\n- * <th>Value Before XForwardedFilter</th>\n- * <th>Value After XForwardedFilter</th>\n+ * <th>Value Before RemoteIpFilter</th>\n+ * <th>Value After RemoteIpFilter</th>\n  * </tr>\n  * <tr>\n  * <td>request.remoteAddr</td>\n@@ -460,19 +460,17 @@ public long getDateHeader(String name) {\n             }\n             if (date == null) {\n                 throw new IllegalArgumentException(value);\n-            } else {\n-                return date.getTime();\n             }\n+            return date.getTime();\n         }\n         \n         @Override\n         public String getHeader(String name) {\n             Map.Entry<String, List<String>> header = getHeaderEntry(name);\n             if (header == null || header.getValue() == null || header.getValue().isEmpty()) {\n                 return null;\n-            } else {\n-                return header.getValue().get(0);\n             }\n+            return header.getValue().get(0);\n         }\n         \n         protected Map.Entry<String, List<String>> getHeaderEntry(String name) {\n@@ -494,19 +492,17 @@ public String getHeader(String name) {\n             Map.Entry<String, List<String>> header = getHeaderEntry(name);\n             if (header == null || header.getValue() == null) {\n                 return Collections.enumeration(Collections.<String>emptyList());\n-            } else {\n-                return Collections.enumeration(header.getValue());\n             }\n+            return Collections.enumeration(header.getValue());\n         }\n         \n         @Override\n         public int getIntHeader(String name) {\n             String value = getHeader(name);\n             if (value == null) {\n                 return -1;\n-            } else {\n-                return Integer.parseInt(value);\n             }\n+            return Integer.parseInt(value);\n         }\n         \n         @Override\n@@ -580,7 +576,7 @@ public void setServerPort(int serverPort) {\n     \n     protected static final String HTTPS_SERVER_PORT_PARAMETER = \"httpsServerPort\";\n     \n-    protected static final String INTERNAL_PROXIES_PARAMETER = \"allowedInternalProxies\";\n+    protected static final String INTERNAL_PROXIES_PARAMETER = \"internalProxies\";\n     \n     /**\n      * Logger\n@@ -756,13 +752,13 @@ public void doFilter(HttpServletRequest request, HttpServletResponse response, F\n             \n             if (log.isDebugEnabled()) {\n                 log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n-                          + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n-                          + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIPHeader + \"]='\"\n-                          + request.getHeader(remoteIPHeader) + \", original[\" + protocolHeader + \"]='\"\n-                          + request.getHeader(protocolHeader) + \"' will be seen as newRemoteAddr='\" + xRequest.getRemoteAddr()\n-                          + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\" + xRequest.getScheme() + \"', newSecure='\"\n-                          + xRequest.isSecure() + \"', new[\" + remoteIPHeader + \"]='\" + xRequest.getHeader(remoteIPHeader) + \", new[\"\n-                          + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n+                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n+                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIPHeader + \"]='\"\n+                        + request.getHeader(remoteIPHeader) + \", original[\" + protocolHeader + \"]='\"\n+                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n+                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n+                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIPHeader + \"]='\"\n+                        + xRequest.getHeader(remoteIPHeader) + \", new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n             }\n             chain.doFilter(xRequest, response);\n         } else {",
                "deletions": 39
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=47451\nDon't trigger an NPE if headers with null or zero length name or set or if a null value is specified. Silently ignore any such calls in the same way the calls are ignored if the response has already been committed.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@831774 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/14084acbd85e6100df3ad108b92eaccb593eeb78",
        "parent": "https://github.com/apache/tomcat/commit/69ef22bb8b2fde34b91063d2e36688139015ee5a",
        "bug_id": "tomcat_363",
        "file": [
            {
                "sha": "dbfbeaa1ed09aa0bc7f500ca4240d7f8c5eafb7c",
                "filename": "java/org/apache/catalina/connector/Response.java",
                "blob_url": "https://github.com/apache/tomcat/blob/14084acbd85e6100df3ad108b92eaccb593eeb78/java/org/apache/catalina/connector/Response.java",
                "raw_url": "https://github.com/apache/tomcat/raw/14084acbd85e6100df3ad108b92eaccb593eeb78/java/org/apache/catalina/connector/Response.java",
                "status": "modified",
                "changes": 24,
                "additions": 24,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/Response.java?ref=14084acbd85e6100df3ad108b92eaccb593eeb78",
                "patch": "@@ -1009,6 +1009,10 @@ public Void run(){\n      */\n     public void addDateHeader(String name, long value) {\n \n+        if (name == null || name.length() == 0) {\n+            return;\n+        }\n+\n         if (isCommitted())\n             return;\n \n@@ -1036,6 +1040,10 @@ public void addDateHeader(String name, long value) {\n      */\n     public void addHeader(String name, String value) {\n \n+        if (name == null || name.length() == 0 || value == null) {\n+            return;\n+        }\n+\n         if (isCommitted())\n             return;\n \n@@ -1056,6 +1064,10 @@ public void addHeader(String name, String value) {\n      */\n     public void addIntHeader(String name, int value) {\n \n+        if (name == null || name.length() == 0) {\n+            return;\n+        }\n+\n         if (isCommitted())\n             return;\n \n@@ -1281,6 +1293,10 @@ public void sendRedirect(String location)\n      */\n     public void setDateHeader(String name, long value) {\n \n+        if (name == null || name.length() == 0) {\n+            return;\n+        }\n+\n         if (isCommitted())\n             return;\n \n@@ -1308,6 +1324,10 @@ public void setDateHeader(String name, long value) {\n      */\n     public void setHeader(String name, String value) {\n \n+        if (name == null || name.length() == 0 || value == null) {\n+            return;\n+        }\n+\n         if (isCommitted())\n             return;\n \n@@ -1328,6 +1348,10 @@ public void setHeader(String name, String value) {\n      */\n     public void setIntHeader(String name, int value) {\n \n+        if (name == null || name.length() == 0) {\n+            return;\n+        }\n+\n         if (isCommitted())\n             return;\n ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix NPE to use Http11NioProtocol handler with default parameters!\n# example:\n<Executor name=\"tomcatThreadPool\" namePrefix=\"catalina-exec-\" \n        maxThreads=\"150\" minSpareThreads=\"4\"/>\n<Connector executor=\"tomcatThreadPool\"\n               port=\"8080\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\" \n               connectionTimeout=\"20000\" \n               redirectPort=\"8443\" />\n\nUsed at MAC OS X with \"-Djava.net.preferIPv4Stack=true\"\n\nI am not sure that default returns are correct!\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@712278 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/82ba76c711234cd8d41cff915dfce1371aea4ad0",
        "parent": "https://github.com/apache/tomcat/commit/c29ffe9366baa21284d162091ad41b0df73d4e90",
        "bug_id": "tomcat_364",
        "file": [
            {
                "sha": "57f61ddd7f26ec7e4a0cc34736d681d4a3ef5650",
                "filename": "java/org/apache/tomcat/util/net/NioEndpoint.java",
                "blob_url": "https://github.com/apache/tomcat/blob/82ba76c711234cd8d41cff915dfce1371aea4ad0/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "raw_url": "https://github.com/apache/tomcat/raw/82ba76c711234cd8d41cff915dfce1371aea4ad0/java/org/apache/tomcat/util/net/NioEndpoint.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/NioEndpoint.java?ref=82ba76c711234cd8d41cff915dfce1371aea4ad0",
                "patch": "@@ -735,7 +735,12 @@ public void init()\n             return;\n \n         serverSock = ServerSocketChannel.open();\n-        serverSock.socket().setPerformancePreferences(socketProperties.getPerformanceConnectionTime(),\n+        int performanceConnectionTime = socketProperties.getPerformanceConnectionTime();\n+        int performanceLatency= socketProperties.getPerformanceLatency();\n+        int performanceBandwidth = socketProperties.getPerformanceBandwidth();\n+        if (performanceConnectionTime != -1 && performanceLatency != -1 &&\n+                performanceBandwidth != -1)\n+            serverSock.socket().setPerformancePreferences(socketProperties.getPerformanceConnectionTime(),\n                                                       socketProperties.getPerformanceLatency(),\n                                                       socketProperties.getPerformanceBandwidth());\n         InetSocketAddress addr = (address!=null?new InetSocketAddress(address,port):new InetSocketAddress(port));",
                "deletions": 1
            },
            {
                "sha": "1a39718a2ceb3047eab7b543ce88fecddc8776b8",
                "filename": "java/org/apache/tomcat/util/net/SocketProperties.java",
                "blob_url": "https://github.com/apache/tomcat/blob/82ba76c711234cd8d41cff915dfce1371aea4ad0/java/org/apache/tomcat/util/net/SocketProperties.java",
                "raw_url": "https://github.com/apache/tomcat/raw/82ba76c711234cd8d41cff915dfce1371aea4ad0/java/org/apache/tomcat/util/net/SocketProperties.java",
                "status": "modified",
                "changes": 53,
                "additions": 40,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/SocketProperties.java?ref=82ba76c711234cd8d41cff915dfce1371aea4ad0",
                "patch": "@@ -210,55 +210,82 @@ public boolean getDirectBuffer() {\n     }\n \n     public boolean getOoBInline() {\n-        return ooBInline.booleanValue();\n+        if(ooBInline != null)\n+            return ooBInline.booleanValue();\n+        return false;\n     }\n \n     public int getPerformanceBandwidth() {\n-        return performanceBandwidth.intValue();\n+        if(performanceBandwidth != null)\n+            return performanceBandwidth.intValue();\n+        return -1;\n     }\n \n     public int getPerformanceConnectionTime() {\n-        return performanceConnectionTime.intValue();\n+        if(performanceConnectionTime!= null)\n+            return performanceConnectionTime.intValue();\n+        return -1;\n+          \n     }\n \n     public int getPerformanceLatency() {\n-        return performanceLatency.intValue();\n+        if(performanceLatency != null)\n+            return performanceLatency.intValue();\n+        return -1 ;\n     }\n \n     public int getRxBufSize() {\n-        return rxBufSize.intValue();\n+        if(rxBufSize != null)\n+            return rxBufSize.intValue();\n+        return -1;\n     }\n \n     public boolean getSoKeepAlive() {\n-        return soKeepAlive.booleanValue();\n+        if(soKeepAlive != null)\n+            return soKeepAlive.booleanValue();\n+        return false;\n     }\n \n     public boolean getSoLingerOn() {\n-        return soLingerOn.booleanValue();\n+        if(soLingerOn != null)\n+            return soLingerOn.booleanValue();\n+        return false;\n     }\n \n     public int getSoLingerTime() {\n-        return soLingerTime.intValue();\n+        if(soLingerTime != null)\n+            return soLingerTime.intValue();\n+        return -1;\n     }\n \n     public boolean getSoReuseAddress() {\n-        return soReuseAddress.booleanValue();\n+        if(soReuseAddress != null)\n+            return soReuseAddress.booleanValue();\n+        return false;\n     }\n \n     public int getSoTimeout() {\n-        return soTimeout.intValue();\n+        if(soTimeout != null)\n+            return soTimeout.intValue();\n+        return -1;\n     }\n \n     public int getSoTrafficClass() {\n-        return soTrafficClass.intValue();\n+        if(soTrafficClass != null)\n+            return soTrafficClass.intValue();\n+        return -1;\n     }\n \n     public boolean getTcpNoDelay() {\n-        return tcpNoDelay.booleanValue();\n+        if(tcpNoDelay != null)\n+            return tcpNoDelay.booleanValue();\n+        return false;\n     }\n \n     public int getTxBufSize() {\n-        return txBufSize.intValue();\n+        if(txBufSize != null)\n+            return txBufSize.intValue();\n+        return -1;\n     }\n \n     public int getBufferPool() {",
                "deletions": 13
            }
        ]
    },
    {
        "repo": "tomcat",
        "message": "Fix http://issues.apache.org/bugzilla/show_bug.cgi?id=44312\nLog an error if there is a conflict between Host and Alias names.\n\nThis also includes the following:\n\n1. Implemented exactFind() methods that combine find() with a check that an exact match was found.\nThis allows to simplify the code.\n\n2. Fixed behaviour of Mapper.removeHost() in case if the host is not found. Now it won't throw an NPE.\n\n3. Fixed error logging of various Mapper.removeXxx() methods, where only \"(pos<0)\" case was logged as \"not found\". The change is that now it logs in wrong-match-found case as well.\nI did not introduce i18n there, as I do not see a real use case for those messages.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1604066 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/tomcat/commit/4a333449a56163c5c66f0eaf34393e654b7547fa",
        "parent": "https://github.com/apache/tomcat/commit/08f457c81313b4e500f8ce0a49ab54873dd4bc1f",
        "bug_id": "tomcat_365",
        "file": [
            {
                "sha": "df0734c091c3b386e6e96faf69794d24e0626a8d",
                "filename": "java/org/apache/catalina/mapper/LocalStrings.properties",
                "blob_url": "https://github.com/apache/tomcat/blob/4a333449a56163c5c66f0eaf34393e654b7547fa/java/org/apache/catalina/mapper/LocalStrings.properties",
                "raw_url": "https://github.com/apache/tomcat/raw/4a333449a56163c5c66f0eaf34393e654b7547fa/java/org/apache/catalina/mapper/LocalStrings.properties",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/mapper/LocalStrings.properties?ref=4a333449a56163c5c66f0eaf34393e654b7547fa",
                "patch": "@@ -14,6 +14,8 @@\n # limitations under the License.\n \n mapper.removeWrapper=Removing wrapper from Context [{0}] with path [{1}]\n+mapper.duplicateHost=Duplicate Host [{0}]. The name is already used by Host [{1}]. This Host will be ignored.\n+mapper.duplicateHostAlias=Duplicate host Alias [{0}] in Host [{1}]. The name is already used by Host [{2}]. This Alias will be ignored.\n \n mapperListener.unknownDefaultHost=Unknown default host [{0}] for service [{1}]\n mapperListener.registerHost=Register host [{0}] at domain [{1}] for service [{2}]",
                "deletions": 0
            },
            {
                "sha": "7a963a558edf777b189ef5019e2e76332a8e76f4",
                "filename": "java/org/apache/catalina/mapper/Mapper.java",
                "blob_url": "https://github.com/apache/tomcat/blob/4a333449a56163c5c66f0eaf34393e654b7547fa/java/org/apache/catalina/mapper/Mapper.java",
                "raw_url": "https://github.com/apache/tomcat/raw/4a333449a56163c5c66f0eaf34393e654b7547fa/java/org/apache/catalina/mapper/Mapper.java",
                "status": "modified",
                "changes": 543,
                "additions": 273,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/mapper/Mapper.java?ref=4a333449a56163c5c66f0eaf34393e654b7547fa",
                "patch": "@@ -94,16 +94,16 @@ public synchronized void addHost(String name, String[] aliases,\n         newHost.object = host;\n         if (insertMap(hosts, newHosts, newHost)) {\n             hosts = newHosts;\n+        } else {\n+            MappedHost duplicate = hosts[find(hosts, name)];\n+            String duplicateHostName = duplicate.object.getName();\n+            log.error(sm.getString(\"mapper.duplicateHost\", name,\n+                    duplicateHostName));\n+            // Do not add aliases, as removeHost(hostName) won't be able to remove them\n+            return;\n         }\n-        for (int i = 0; i < aliases.length; i++) {\n-            newHosts = new MappedHost[hosts.length + 1];\n-            newHost = new MappedHost();\n-            newHost.name = aliases[i];\n-            newHost.contextList = contextList;\n-            newHost.object = host;\n-            if (insertMap(hosts, newHosts, newHost)) {\n-                hosts = newHosts;\n-            }\n+        for (String alias : aliases) {\n+            addHostAliasImpl(newHost, alias);\n         }\n     }\n \n@@ -115,15 +115,16 @@ public synchronized void addHost(String name, String[] aliases,\n      */\n     public synchronized void removeHost(String name) {\n         // Find and remove the old host\n-        int pos = find(hosts, name);\n-        if (pos < 0) {\n+        MappedHost mappedHost = exactFind(hosts, name);\n+        if (mappedHost == null) {\n             return;\n         }\n-        Host host = hosts[pos].object;\n+        Host host = mappedHost.object;\n         MappedHost[] newHosts = new MappedHost[hosts.length - 1];\n         if (removeMap(hosts, newHosts, name)) {\n             hosts = newHosts;\n         }\n+\n         // Remove all aliases (they will map to the same host object)\n         for (int i = 0; i < newHosts.length; i++) {\n             if (newHosts[i].object == host) {\n@@ -141,21 +142,34 @@ public synchronized void removeHost(String name) {\n      * @param alias The alias to add\n      */\n     public synchronized void addHostAlias(String name, String alias) {\n-        int pos = find(hosts, name);\n-        if (pos < 0) {\n+        MappedHost realHost = exactFind(hosts, name);\n+        if (realHost == null) {\n             // Should not be adding an alias for a host that doesn't exist but\n             // just in case...\n             return;\n         }\n-        MappedHost realHost = hosts[pos];\n+        addHostAliasImpl(realHost, alias);\n+    }\n \n+    private void addHostAliasImpl(MappedHost realHost, String alias) {\n+        if (alias.equals(realHost.name)) {\n+            // An Alias with the same name as its own Host.\n+            // A harmless redundancy. E.g.\n+            // <Host name=\"localhost\"><Alias>localhost</Alias></Host>\n+            return;\n+        }\n         MappedHost[] newHosts = new MappedHost[hosts.length + 1];\n         MappedHost newHost = new MappedHost();\n         newHost.name = alias;\n         newHost.contextList = realHost.contextList;\n         newHost.object = realHost.object;\n         if (insertMap(hosts, newHosts, newHost)) {\n             hosts = newHosts;\n+        } else {\n+            MappedHost duplicate = hosts[find(hosts, alias)];\n+            String duplicateHostName = duplicate.object.getName();\n+            log.error(sm.getString(\"mapper.duplicateHostAlias\", alias,\n+                    realHost.name, duplicateHostName));\n         }\n     }\n \n@@ -165,8 +179,7 @@ public synchronized void addHostAlias(String name, String alias) {\n      */\n     public synchronized void removeHostAlias(String alias) {\n         // Find and remove the alias\n-        int pos = find(hosts, alias);\n-        if (pos < 0) {\n+        if (exactFind(hosts, alias) == null) {\n             return;\n         }\n         MappedHost[] newHosts = new MappedHost[hosts.length - 1];\n@@ -193,52 +206,51 @@ public void addContextVersion(String hostName, Host host, String path,\n             WebResourceRoot resources) {\n \n         MappedHost[] hosts = this.hosts;\n-        int pos = find(hosts, hostName);\n-        if( pos <0 ) {\n+        MappedHost mappedHost = exactFind(hosts, hostName);\n+        if (mappedHost == null) {\n             addHost(hostName, new String[0], host);\n             hosts = this.hosts;\n-            pos = find(hosts, hostName);\n-        }\n-        if (pos < 0) {\n-            log.error(\"No host found: \" + hostName);\n+            mappedHost = exactFind(hosts, hostName);\n+            if (mappedHost == null) {\n+                log.error(\"No host found: \" + hostName);\n+                return;\n+            }\n         }\n-        MappedHost mappedHost = hosts[pos];\n-        if (mappedHost.name.equals(hostName)) {\n-            int slashCount = slashCount(path);\n-            synchronized (mappedHost) {\n+        int slashCount = slashCount(path);\n+        synchronized (mappedHost) {\n+            // Update nesting\n+            if (slashCount > mappedHost.contextList.nesting) {\n+                mappedHost.contextList.nesting = slashCount;\n+            }\n+            MappedContext mappedContext;\n+            {\n                 MappedContext[] contexts = mappedHost.contextList.contexts;\n-                // Update nesting\n-                if (slashCount > mappedHost.contextList.nesting) {\n-                    mappedHost.contextList.nesting = slashCount;\n-                }\n-                int pos2 = find(contexts, path);\n-                if (pos2 < 0 || !path.equals(contexts[pos2].name)) {\n-                    MappedContext newContext = new MappedContext();\n-                    newContext.name = path;\n+                mappedContext = exactFind(contexts, path);\n+                if (mappedContext == null) {\n+                    mappedContext = new MappedContext();\n+                    mappedContext.name = path;\n                     MappedContext[] newContexts = new MappedContext[contexts.length + 1];\n-                    if (insertMap(contexts, newContexts, newContext)) {\n+                    if (insertMap(contexts, newContexts, mappedContext)) {\n                         mappedHost.contextList.contexts = newContexts;\n+                        // contexts = newContexts;\n                     }\n-                    pos2 = find(newContexts, path);\n                 }\n+            }\n \n-                MappedContext mappedContext = mappedHost.contextList.contexts[pos2];\n-\n-                ContextVersion[] contextVersions = mappedContext.versions;\n-                ContextVersion[] newContextVersions =\n-                    new ContextVersion[contextVersions.length + 1];\n-                ContextVersion newContextVersion = new ContextVersion();\n-                newContextVersion.path = path;\n-                newContextVersion.slashCount = slashCount;\n-                newContextVersion.name = version;\n-                newContextVersion.object = context;\n-                newContextVersion.welcomeResources = welcomeResources;\n-                newContextVersion.resources = resources;\n-                if (insertMap(contextVersions, newContextVersions, newContextVersion)) {\n-                    mappedContext.versions = newContextVersions;\n-                    contextObjectToContextVersionMap.put(\n-                            context, newContextVersion);\n-                }\n+            ContextVersion[] contextVersions = mappedContext.versions;\n+            ContextVersion[] newContextVersions =\n+                new ContextVersion[contextVersions.length + 1];\n+            ContextVersion newContextVersion = new ContextVersion();\n+            newContextVersion.path = path;\n+            newContextVersion.slashCount = slashCount;\n+            newContextVersion.name = version;\n+            newContextVersion.object = context;\n+            newContextVersion.welcomeResources = welcomeResources;\n+            newContextVersion.resources = resources;\n+            if (insertMap(contextVersions, newContextVersions, newContextVersion)) {\n+                mappedContext.versions = newContextVersions;\n+                contextObjectToContextVersionMap.put(\n+                        context, newContextVersion);\n             }\n         }\n \n@@ -258,43 +270,39 @@ public void removeContextVersion(Context ctxt, String hostName,\n \n         contextObjectToContextVersionMap.remove(ctxt);\n \n-        MappedHost[] hosts = this.hosts;\n-        int pos = find(hosts, hostName);\n-        if (pos < 0) {\n+        MappedHost host = exactFind(this.hosts, hostName);\n+        if (host == null) {\n             return;\n         }\n-        MappedHost host = hosts[pos];\n-        if (host.name.equals(hostName)) {\n-            synchronized (host) {\n-                MappedContext[] contexts = host.contextList.contexts;\n-                if (contexts.length == 0 ){\n-                    return;\n-                }\n \n-                int pos2 = find(contexts, path);\n-                if (pos2 < 0 || !path.equals(contexts[pos2].name)) {\n-                    return;\n-                }\n-                MappedContext context = contexts[pos2];\n-\n-                ContextVersion[] contextVersions = context.versions;\n-                ContextVersion[] newContextVersions =\n-                    new ContextVersion[contextVersions.length - 1];\n-                if (removeMap(contextVersions, newContextVersions, version)) {\n-                    context.versions = newContextVersions;\n-\n-                    if (context.versions.length == 0) {\n-                        // Remove the context\n-                        MappedContext[] newContexts = new MappedContext[contexts.length -1];\n-                        if (removeMap(contexts, newContexts, path)) {\n-                            host.contextList.contexts = newContexts;\n-                            // Recalculate nesting\n-                            host.contextList.nesting = 0;\n-                            for (int i = 0; i < newContexts.length; i++) {\n-                                int slashCount = slashCount(newContexts[i].name);\n-                                if (slashCount > host.contextList.nesting) {\n-                                    host.contextList.nesting = slashCount;\n-                                }\n+        synchronized (host) {\n+            MappedContext[] contexts = host.contextList.contexts;\n+            if (contexts.length == 0 ){\n+                return;\n+            }\n+\n+            MappedContext context = exactFind(contexts, path);\n+            if (context == null) {\n+                return;\n+            }\n+\n+            ContextVersion[] contextVersions = context.versions;\n+            ContextVersion[] newContextVersions =\n+                new ContextVersion[contextVersions.length - 1];\n+            if (removeMap(contextVersions, newContextVersions, version)) {\n+                context.versions = newContextVersions;\n+\n+                if (context.versions.length == 0) {\n+                    // Remove the context\n+                    MappedContext[] newContexts = new MappedContext[contexts.length -1];\n+                    if (removeMap(contexts, newContexts, path)) {\n+                        host.contextList.contexts = newContexts;\n+                        // Recalculate nesting\n+                        host.contextList.nesting = 0;\n+                        for (int i = 0; i < newContexts.length; i++) {\n+                            int slashCount = slashCount(newContexts[i].name);\n+                            if (slashCount > host.contextList.nesting) {\n+                                host.contextList.nesting = slashCount;\n                             }\n                         }\n                     }\n@@ -308,34 +316,24 @@ public void addWrapper(String hostName, String contextPath, String version,\n                            String path, Wrapper wrapper, boolean jspWildCard,\n                            boolean resourceOnly) {\n         MappedHost[] hosts = this.hosts;\n-        int pos = find(hosts, hostName);\n-        if (pos < 0) {\n+        MappedHost host = exactFind(hosts, hostName);\n+        if (host == null) {\n             return;\n         }\n-        MappedHost host = hosts[pos];\n-        if (host.name.equals(hostName)) {\n-            MappedContext[] contexts = host.contextList.contexts;\n-            int pos2 = find(contexts, contextPath);\n-            if (pos2 < 0) {\n-                log.error(\"No context found: \" + contextPath );\n-                return;\n-            }\n-            MappedContext context = contexts[pos2];\n-            if (context.name.equals(contextPath)) {\n-                ContextVersion[] contextVersions = context.versions;\n-                int pos3 = find(contextVersions, version);\n-                if( pos3<0 ) {\n-                    log.error(\"No context version found: \" + contextPath + \" \" +\n-                            version);\n-                    return;\n-                }\n-                ContextVersion contextVersion = contextVersions[pos3];\n-                if (contextVersion.name.equals(version)) {\n-                    addWrapper(contextVersion, path, wrapper, jspWildCard,\n-                            resourceOnly);\n-                }\n-            }\n+        MappedContext[] contexts = host.contextList.contexts;\n+        MappedContext context = exactFind(contexts, contextPath);\n+        if (context == null) {\n+            log.error(\"No context found: \" + contextPath );\n+            return;\n+        }\n+        ContextVersion[] contextVersions = context.versions;\n+        ContextVersion contextVersion = exactFind(contextVersions, version);\n+        if (contextVersion == null) {\n+            log.error(\"No context version found: \" + contextPath + \" \" +\n+                    version);\n+            return;\n         }\n+        addWrapper(contextVersion, path, wrapper, jspWildCard, resourceOnly);\n     }\n \n \n@@ -411,33 +409,24 @@ protected void addWrapper(ContextVersion context, String path,\n      * @param contextPath Context path this wrapper belongs to\n      * @param path Wrapper mapping\n      */\n-    public void removeWrapper\n-        (String hostName, String contextPath, String version, String path) {\n+    public void removeWrapper(String hostName, String contextPath,\n+            String version, String path) {\n         MappedHost[] hosts = this.hosts;\n-        int pos = find(hosts, hostName);\n-        if (pos < 0) {\n+        MappedHost host = exactFind(hosts, hostName);\n+        if (host == null) {\n             return;\n         }\n-        MappedHost host = hosts[pos];\n-        if (host.name.equals(hostName)) {\n-            MappedContext[] contexts = host.contextList.contexts;\n-            int pos2 = find(contexts, contextPath);\n-            if (pos2 < 0) {\n-                return;\n-            }\n-            MappedContext context = contexts[pos2];\n-            if (context.name.equals(contextPath)) {\n-                ContextVersion[] contextVersions = context.versions;\n-                int pos3 = find(contextVersions, version);\n-                if( pos3<0 ) {\n-                    return;\n-                }\n-                ContextVersion contextVersion = contextVersions[pos3];\n-                if (contextVersion.name.equals(version)) {\n-                    removeWrapper(contextVersion, path);\n-                }\n-            }\n+        MappedContext[] contexts = host.contextList.contexts;\n+        MappedContext context = exactFind(contexts, contextPath);\n+        if (context == null) {\n+            return;\n+        }\n+        ContextVersion[] contextVersions = context.versions;\n+        ContextVersion contextVersion = exactFind(contextVersions, version);\n+        if (contextVersion == null) {\n+            return;\n         }\n+        removeWrapper(contextVersion, path);\n     }\n \n     protected void removeWrapper(ContextVersion context, String path) {\n@@ -516,41 +505,31 @@ protected void removeWrapper(ContextVersion context, String path) {\n     public void addWelcomeFile(String hostName, String contextPath,\n             String version, String welcomeFile) {\n         MappedHost[] hosts = this.hosts;\n-        int pos = find(hosts, hostName);\n-        if (pos < 0) {\n+        MappedHost host = exactFind(hosts, hostName);\n+        if (host == null) {\n             return;\n         }\n-        MappedHost host = hosts[pos];\n-        if (host.name.equals(hostName)) {\n-            MappedContext[] contexts = host.contextList.contexts;\n-            int pos2 = find(contexts, contextPath);\n-            if (pos2 < 0) {\n-                log.error(\"No context found: \" + contextPath );\n-                return;\n-            }\n-            MappedContext context = contexts[pos2];\n-            if (context.name.equals(contextPath)) {\n-                ContextVersion[] contextVersions = context.versions;\n-                int pos3 = find(contextVersions, version);\n-                if( pos3<0 ) {\n-                    log.error(\"No context version found: \" + contextPath + \" \" +\n-                            version);\n-                    return;\n-                }\n-                ContextVersion contextVersion = contextVersions[pos3];\n-                if (contextVersion.name.equals(version)) {\n-                    int len = contextVersion.welcomeResources.length + 1;\n-                    String[] newWelcomeResources = new String[len];\n-                    System.arraycopy(contextVersion.welcomeResources, 0,\n-                            newWelcomeResources, 0, len - 1);\n-                    newWelcomeResources[len - 1] = welcomeFile;\n-                    contextVersion.welcomeResources = newWelcomeResources;\n-                }\n-            }\n+        MappedContext[] contexts = host.contextList.contexts;\n+        MappedContext context = exactFind(contexts, contextPath);\n+        if (context == null) {\n+            log.error(\"No context found: \" + contextPath);\n+            return;\n         }\n+        ContextVersion[] contextVersions = context.versions;\n+        ContextVersion contextVersion = exactFind(contextVersions, version);\n+        if (contextVersion == null) {\n+            log.error(\"No context version found: \" + contextPath + \" \"\n+                    + version);\n+            return;\n+        }\n+        int len = contextVersion.welcomeResources.length + 1;\n+        String[] newWelcomeResources = new String[len];\n+        System.arraycopy(contextVersion.welcomeResources, 0,\n+                newWelcomeResources, 0, len - 1);\n+        newWelcomeResources[len - 1] = welcomeFile;\n+        contextVersion.welcomeResources = newWelcomeResources;\n     }\n \n-\n     /**\n      * Remove a welcome file from the given context.\n      *\n@@ -561,53 +540,43 @@ public void addWelcomeFile(String hostName, String contextPath,\n     public void removeWelcomeFile(String hostName, String contextPath,\n             String version, String welcomeFile) {\n         MappedHost[] hosts = this.hosts;\n-        int pos = find(hosts, hostName);\n-        if (pos < 0) {\n+        MappedHost host = exactFind(hosts, hostName);\n+        if (host == null) {\n             return;\n         }\n-        MappedHost host = hosts[pos];\n-        if (host.name.equals(hostName)) {\n-            MappedContext[] contexts = host.contextList.contexts;\n-            int pos2 = find(contexts, contextPath);\n-            if (pos2 < 0) {\n-                log.error(\"No context found: \" + contextPath );\n-                return;\n+        MappedContext[] contexts = host.contextList.contexts;\n+        MappedContext context = exactFind(contexts, contextPath);\n+        if (context == null) {\n+            log.error(\"No context found: \" + contextPath);\n+            return;\n+        }\n+        ContextVersion[] contextVersions = context.versions;\n+        ContextVersion contextVersion = exactFind(contextVersions, version);\n+        if (contextVersion == null) {\n+            log.error(\"No context version found: \" + contextPath + \" \"\n+                    + version);\n+            return;\n+        }\n+        int match = -1;\n+        for (int i = 0; i < contextVersion.welcomeResources.length; i++) {\n+            if (welcomeFile.equals(contextVersion.welcomeResources[i])) {\n+                match = i;\n+                break;\n             }\n-            MappedContext context = contexts[pos2];\n-            if (context.name.equals(contextPath)) {\n-                ContextVersion[] contextVersions = context.versions;\n-                int pos3 = find(contextVersions, version);\n-                if( pos3<0 ) {\n-                    log.error(\"No context version found: \" + contextPath + \" \" +\n-                            version);\n-                    return;\n-                }\n-                ContextVersion contextVersion = contextVersions[pos3];\n-                if (contextVersion.name.equals(version)) {\n-                    int match = -1;\n-                    for (int i = 0; i < contextVersion.welcomeResources.length; i++) {\n-                        if (welcomeFile.equals(contextVersion.welcomeResources[i])) {\n-                            match = i;\n-                            break;\n-                        }\n-                    }\n-                    if (match > -1) {\n-                        int len = contextVersion.welcomeResources.length - 1;\n-                        String[] newWelcomeResources = new String[len];\n-                        System.arraycopy(contextVersion.welcomeResources, 0,\n-                                newWelcomeResources, 0, match);\n-                        if (match < len) {\n-                            System.arraycopy(contextVersion.welcomeResources, match + 1,\n-                                    newWelcomeResources, match, len - match);\n-                        }\n-                        contextVersion.welcomeResources = newWelcomeResources;\n-                    }\n-                }\n+        }\n+        if (match > -1) {\n+            int len = contextVersion.welcomeResources.length - 1;\n+            String[] newWelcomeResources = new String[len];\n+            System.arraycopy(contextVersion.welcomeResources, 0,\n+                    newWelcomeResources, 0, match);\n+            if (match < len) {\n+                System.arraycopy(contextVersion.welcomeResources, match + 1,\n+                        newWelcomeResources, match, len - match);\n             }\n+            contextVersion.welcomeResources = newWelcomeResources;\n         }\n     }\n \n-\n     /**\n      * Clear the welcome files for the given context.\n      *\n@@ -617,36 +586,26 @@ public void removeWelcomeFile(String hostName, String contextPath,\n     public void clearWelcomeFiles(String hostName, String contextPath,\n             String version) {\n         MappedHost[] hosts = this.hosts;\n-        int pos = find(hosts, hostName);\n-        if (pos < 0) {\n+        MappedHost host = exactFind(hosts, hostName);\n+        if (host == null) {\n             return;\n         }\n-        MappedHost host = hosts[pos];\n-        if (host.name.equals(hostName)) {\n-            MappedContext[] contexts = host.contextList.contexts;\n-            int pos2 = find(contexts, contextPath);\n-            if (pos2 < 0) {\n-                log.error(\"No context found: \" + contextPath );\n-                return;\n-            }\n-            MappedContext context = contexts[pos2];\n-            if (context.name.equals(contextPath)) {\n-                ContextVersion[] contextVersions = context.versions;\n-                int pos3 = find(contextVersions, version);\n-                if( pos3<0 ) {\n-                    log.error(\"No context version found: \" + contextPath + \" \" +\n-                            version);\n-                    return;\n-                }\n-                ContextVersion contextVersion = contextVersions[pos3];\n-                if (contextVersion.name.equals(version)) {\n-                    contextVersion.welcomeResources = new String[0];\n-                }\n-            }\n+        MappedContext[] contexts = host.contextList.contexts;\n+        MappedContext context = exactFind(contexts, contextPath);\n+        if (context == null) {\n+            log.error(\"No context found: \" + contextPath);\n+            return;\n+        }\n+        ContextVersion[] contextVersions = context.versions;\n+        ContextVersion contextVersion = exactFind(contextVersions, version);\n+        if (contextVersion == null) {\n+            log.error(\"No context version found: \" + contextPath + \" \"\n+                    + version);\n+            return;\n         }\n+        contextVersion.welcomeResources = new String[0];\n     }\n \n-\n     /**\n      * Map the specified host name and URI, mutating the given mapping data.\n      *\n@@ -712,24 +671,19 @@ private final void internalMap(CharChunk host, CharChunk uri,\n         // Virtual host mapping\n         if (mappingData.host == null) {\n             MappedHost[] hosts = this.hosts;\n-            int pos = findIgnoreCase(hosts, host);\n-            if ((pos != -1) && (host.equalsIgnoreCase(hosts[pos].name))) {\n-                mappingData.host = hosts[pos].object;\n-                contexts = hosts[pos].contextList.contexts;\n-                nesting = hosts[pos].contextList.nesting;\n-            } else {\n+            MappedHost mappedHost = exactFindIgnoreCase(hosts, host);\n+            if (mappedHost == null) {\n                 if (defaultHostName == null) {\n                     return;\n                 }\n-                pos = find(hosts, defaultHostName);\n-                if ((pos != -1) && (defaultHostName.equals(hosts[pos].name))) {\n-                    mappingData.host = hosts[pos].object;\n-                    contexts = hosts[pos].contextList.contexts;\n-                    nesting = hosts[pos].contextList.nesting;\n-                } else {\n+                mappedHost = exactFind(hosts, defaultHostName);\n+                if (mappedHost == null) {\n                     return;\n                 }\n             }\n+            mappingData.host = mappedHost.object;\n+            contexts = mappedHost.contextList.contexts;\n+            nesting = mappedHost.contextList.nesting;\n         }\n \n         // Context mapping\n@@ -764,13 +718,12 @@ private final void internalMap(CharChunk host, CharChunk uri,\n             }\n             uri.setEnd(uriEnd);\n \n-            if (!found) {\n-                if (contexts[0].name.equals(\"\")) {\n-                    context = contexts[0];\n-                }\n-            } else {\n+            if (found) {\n                 context = contexts[pos];\n+            } else if (contexts[0].name.equals(\"\")) {\n+                context = contexts[0];\n             }\n+\n             if (context != null) {\n                 mappingData.contextPath.setString(context.name);\n             }\n@@ -787,17 +740,12 @@ private final void internalMap(CharChunk host, CharChunk uri,\n                 mappingData.contexts = contextObjects;\n             }\n \n-            if (version == null) {\n+            if (version != null) {\n+                contextVersion = exactFind(contextVersions, version);\n+            }\n+            if (contextVersion == null) {\n                 // Return the latest version\n                 contextVersion = contextVersions[versionCount - 1];\n-            } else {\n-                int pos = find(contextVersions, version);\n-                if (pos < 0 || !contextVersions[pos].name.equals(version)) {\n-                    // Return the latest version\n-                    contextVersion = contextVersions[versionCount - 1];\n-                } else {\n-                    contextVersion = contextVersions[pos];\n-                }\n             }\n             mappingData.context = contextVersion.object;\n             mappingData.contextSlashCount = contextVersion.slashCount;\n@@ -1015,18 +963,18 @@ private final void internalMapWrapper(ContextVersion contextVersion,\n      */\n     private final void internalMapExactWrapper\n         (MappedWrapper[] wrappers, CharChunk path, MappingData mappingData) {\n-        int pos = find(wrappers, path);\n-        if ((pos != -1) && (path.equals(wrappers[pos].name))) {\n-            mappingData.requestPath.setString(wrappers[pos].name);\n-            mappingData.wrapper = wrappers[pos].object;\n+        MappedWrapper wrapper = exactFind(wrappers, path);\n+        if (wrapper != null) {\n+            mappingData.requestPath.setString(wrapper.name);\n+            mappingData.wrapper = wrapper.object;\n             if (path.equals(\"/\")) {\n                 // Special handling for Context Root mapped servlet\n                 mappingData.pathInfo.setString(\"/\");\n                 mappingData.wrapperPath.setString(\"\");\n                 // This seems wrong but it is what the spec says...\n                 mappingData.contextPath.setString(\"\");\n             } else {\n-                mappingData.wrapperPath.setString(wrappers[pos].name);\n+                mappingData.wrapperPath.setString(wrapper.name);\n             }\n         }\n     }\n@@ -1114,14 +1062,14 @@ private final void internalMapExtensionWrapper(MappedWrapper[] wrappers,\n             if (period >= 0) {\n                 path.setOffset(period + 1);\n                 path.setEnd(pathEnd);\n-                int pos = find(wrappers, path);\n-                if ((pos != -1) && (path.equals(wrappers[pos].name)) &&\n-                        (resourceExpected || !wrappers[pos].resourceOnly)) {\n-                    mappingData.wrapperPath.setChars\n-                        (buf, servletPath, pathEnd - servletPath);\n-                    mappingData.requestPath.setChars\n-                        (buf, servletPath, pathEnd - servletPath);\n-                    mappingData.wrapper = wrappers[pos].object;\n+                MappedWrapper wrapper = exactFind(wrappers, path);\n+                if (wrapper != null\n+                        && (resourceExpected || !wrapper.resourceOnly)) {\n+                    mappingData.wrapperPath.setChars(buf, servletPath, pathEnd\n+                            - servletPath);\n+                    mappingData.requestPath.setChars(buf, servletPath, pathEnd\n+                            - servletPath);\n+                    mappingData.wrapper = wrapper.object;\n                 }\n                 path.setOffset(servletPath);\n                 path.setEnd(pathEnd);\n@@ -1246,6 +1194,7 @@ private final void internalMapExtensionWrapper(MappedWrapper[] wrappers,\n      * Find a map element given its name in a sorted array of map elements.\n      * This will return the index for the closest inferior or equal item in the\n      * given array.\n+     * @see #exactFind(MapElement[], String)\n      */\n     private static final <T> int find(MapElement<T>[] map, String name) {\n \n@@ -1288,6 +1237,60 @@ private final void internalMapExtensionWrapper(MappedWrapper[] wrappers,\n     }\n \n \n+    /**\n+     * Find a map element given its name in a sorted array of map elements. This\n+     * will return the element that you were searching for. Otherwise it will\n+     * return <code>null</code>.\n+     * @see #find(MapElement[], String)\n+     */\n+    private static final <T, E extends MapElement<T>> E exactFind(E[] map,\n+            String name) {\n+        int pos = find(map, name);\n+        if (pos >= 0) {\n+            E result = map[pos];\n+            if (name.equals(result.name)) {\n+                return result;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Find a map element given its name in a sorted array of map elements. This\n+     * will return the element that you were searching for. Otherwise it will\n+     * return <code>null</code>.\n+     */\n+    private static final <T, E extends MapElement<T>> E exactFind(E[] map,\n+            CharChunk name) {\n+        int pos = find(map, name);\n+        if (pos >= 0) {\n+            E result = map[pos];\n+            if (name.equals(result.name)) {\n+                return result;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Find a map element given its name in a sorted array of map elements. This\n+     * will return the element that you were searching for. Otherwise it will\n+     * return <code>null</code>.\n+     * @see #findIgnoreCase(MapElement[], CharChunk)\n+     */\n+    private static final <T, E extends MapElement<T>> E exactFindIgnoreCase(\n+            E[] map, CharChunk name) {\n+        int pos = findIgnoreCase(map, name);\n+        if (pos >= 0) {\n+            E result = map[pos];\n+            if (name.equalsIgnoreCase(result.name)) {\n+                return result;\n+            }\n+        }\n+        return null;\n+    }\n+\n+\n     /**\n      * Compare given char chunk with String.\n      * Return -1, 0 or +1 if inferior, equal, or superior to the String.",
                "deletions": 270
            },
            {
                "sha": "5e0c393e9c202cce1b93ce4852c03c2361ac66c4",
                "filename": "webapps/docs/changelog.xml",
                "blob_url": "https://github.com/apache/tomcat/blob/4a333449a56163c5c66f0eaf34393e654b7547fa/webapps/docs/changelog.xml",
                "raw_url": "https://github.com/apache/tomcat/raw/4a333449a56163c5c66f0eaf34393e654b7547fa/webapps/docs/changelog.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=4a333449a56163c5c66f0eaf34393e654b7547fa",
                "patch": "@@ -47,6 +47,10 @@\n <section name=\"Tomcat 8.0.10 (markt)\">\n   <subsection name=\"Catalina\">\n     <changelog>\n+      <fix>\n+        <bug>44312</bug>: Log an error if there is a conflict between Host and\n+        Alias names. (kkolinko)\n+      </fix>\n       <scode>\n         <bug>56611</bug>: Refactor code to remove inefficient calls to\n         <code>Method.isAnnotationPresent()</code>. Based on a patch by Jian Mou.",
                "deletions": 0
            }
        ]
    }
]