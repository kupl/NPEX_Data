[{"commit": "https://github.com/apache/incubator-shardingsphere/commit/c7fcb4cbb968bd286006eb6fc106dfa9974fc59d", "parent": "https://github.com/apache/incubator-shardingsphere/commit/3cdc700a2bfa5465f8fb5ccf68b21f9bbb78fb7c", "message": "fixes QueryHeader NPE bug.(#3397) (#3401)", "bug_id": "incubator-shardingsphere_1", "file": [{"additions": 5, "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/c7fcb4cbb968bd286006eb6fc106dfa9974fc59d/sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/response/query/QueryHeader.java", "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/c7fcb4cbb968bd286006eb6fc106dfa9974fc59d/sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/response/query/QueryHeader.java", "sha": "42721f6d9e4df966d4ab57f64ac4420d4e5925a4", "changes": 10, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/response/query/QueryHeader.java?ref=c7fcb4cbb968bd286006eb6fc106dfa9974fc59d", "patch": "@@ -62,17 +62,17 @@ public QueryHeader(final ResultSetMetaData resultSetMetaData, final LogicSchema\n         if (logicSchema instanceof ShardingSchema) {\n             Collection<String> tableNames = logicSchema.getShardingRule().getLogicTableNames(resultSetMetaData.getTableName(columnIndex));\n             this.table = tableNames.isEmpty() ? \"\" : tableNames.iterator().next();\n-            if (resultSetMetaData.getTableName(columnIndex).isEmpty()) {\n-                this.primaryKey = false;\n-                this.notNull = false;\n-                this.autoIncrement = false;\n-            } else {\n+            if (logicSchema.getMetaData().getTables().containsTable(resultSetMetaData.getTableName(columnIndex))) {\n                 this.primaryKey = logicSchema.getMetaData().getTables().get(resultSetMetaData.getTableName(columnIndex)).getColumns()\n                         .get(resultSetMetaData.getColumnName(columnIndex).toLowerCase()).isPrimaryKey();\n                 this.notNull = logicSchema.getMetaData().getTables().get(resultSetMetaData.getTableName(columnIndex)).getColumns()\n                         .get(resultSetMetaData.getColumnName(columnIndex).toLowerCase()).isNotNull();\n                 this.autoIncrement = logicSchema.getMetaData().getTables().get(resultSetMetaData.getTableName(columnIndex)).getColumns()\n                         .get(resultSetMetaData.getColumnName(columnIndex).toLowerCase()).isAutoIncrement();\n+            } else {\n+                this.primaryKey = false;\n+                this.notNull = false;\n+                this.autoIncrement = false;\n             }\n         } else {\n             this.table = resultSetMetaData.getTableName(columnIndex);", "filename": "sharding-proxy/sharding-proxy-backend/src/main/java/org/apache/shardingsphere/shardingproxy/backend/response/query/QueryHeader.java"}, {"additions": 1, "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/c7fcb4cbb968bd286006eb6fc106dfa9974fc59d/sharding-proxy/sharding-proxy-backend/src/test/java/org/apache/shardingsphere/shardingproxy/backend/response/query/QueryHeaderTest.java", "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/c7fcb4cbb968bd286006eb6fc106dfa9974fc59d/sharding-proxy/sharding-proxy-backend/src/test/java/org/apache/shardingsphere/shardingproxy/backend/response/query/QueryHeaderTest.java", "sha": "dcd187f5d7c8f027419ed123a89e27a7c0a254be", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-proxy/sharding-proxy-backend/src/test/java/org/apache/shardingsphere/shardingproxy/backend/response/query/QueryHeaderTest.java?ref=c7fcb4cbb968bd286006eb6fc106dfa9974fc59d", "patch": "@@ -112,6 +112,7 @@ private ShardingSchema getShardingSchema() {\n         ColumnMetaData columnMetaData = new ColumnMetaData(\"order_id\", \"int\", true, true, true);\n         TableMetas tableMetas = mock(TableMetas.class);\n         when(tableMetas.get(\"t_order\")).thenReturn(new TableMetaData(Arrays.asList(columnMetaData), Arrays.asList(\"order_id\")));\n+        when(tableMetas.containsTable(\"t_order\")).thenReturn(true);\n         ShardingSphereMetaData metaData = mock(ShardingSphereMetaData.class);\n         when(metaData.getTables()).thenReturn(tableMetas);\n         DataSourceMetas dataSourceMetas = mock(DataSourceMetas.class);", "filename": "sharding-proxy/sharding-proxy-backend/src/test/java/org/apache/shardingsphere/shardingproxy/backend/response/query/QueryHeaderTest.java"}], "repo": "incubator-shardingsphere"}, {"commit": "https://github.com/apache/incubator-shardingsphere/commit/bfd6c9fecad69ac51a8a65a851ddd0ee057fae31", "parent": "https://github.com/apache/incubator-shardingsphere/commit/975d5bfb41b2efd23e44b7aad51016c3275acd50", "message": "resolve NPE", "bug_id": "incubator-shardingsphere_2", "file": [{"additions": 15, "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/bfd6c9fecad69ac51a8a65a851ddd0ee057fae31/sharding-core/sharding-core-parse/sharding-core-parse-common/src/main/java/org/apache/shardingsphere/core/parse/extractor/impl/dml/select/SelectItemsExtractor.java", "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/bfd6c9fecad69ac51a8a65a851ddd0ee057fae31/sharding-core/sharding-core-parse/sharding-core-parse-common/src/main/java/org/apache/shardingsphere/core/parse/extractor/impl/dml/select/SelectItemsExtractor.java", "sha": "18e36572ca30cfda57913aa160300d9df40e6df8", "changes": 28, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-parse/sharding-core-parse-common/src/main/java/org/apache/shardingsphere/core/parse/extractor/impl/dml/select/SelectItemsExtractor.java?ref=bfd6c9fecad69ac51a8a65a851ddd0ee057fae31", "patch": "@@ -40,18 +40,18 @@\n  * @author panjuan\n  */\n public final class SelectItemsExtractor implements OptionalSQLSegmentExtractor {\n-    \n+\n     // TODO recognize database type, only oracle and sqlserver can use row number\n     private final Collection<String> rowNumberIdentifiers;\n-    \n+\n     private final SelectItemExtractor selectItemExtractor = new SelectItemExtractor();\n-    \n+\n     public SelectItemsExtractor() {\n         rowNumberIdentifiers = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n         rowNumberIdentifiers.add(\"rownum\");\n         rowNumberIdentifiers.add(\"ROW_NUMBER\");\n     }\n-    \n+\n     @Override\n     public Optional<SelectItemsSegment> extract(final ParserRuleContext ancestorNode, final Map<ParserRuleContext, Integer> parameterMarkerIndexes) {\n         ParserRuleContext selectItemsNode = ExtractorUtils.getFirstChildNode(findMainQueryNode(ancestorNode), RuleName.SELECT_ITEMS);\n@@ -64,15 +64,15 @@ public SelectItemsExtractor() {\n         result.getSelectItems().addAll(extractRowNumberSelectItem(ancestorNode, parameterMarkerIndexes));\n         return Optional.of(result);\n     }\n-    \n-    private void setUnqualifiedShorthandSelectItemSegment(final ParserRuleContext unqualifiedShorthandNode, \n+\n+    private void setUnqualifiedShorthandSelectItemSegment(final ParserRuleContext unqualifiedShorthandNode,\n                                                           final SelectItemsSegment selectItemsSegment, final Map<ParserRuleContext, Integer> parameterMarkerIndexes) {\n         Optional<? extends SelectItemSegment> unqualifiedShorthandSelectItemSegment = selectItemExtractor.extract(unqualifiedShorthandNode, parameterMarkerIndexes);\n         if (unqualifiedShorthandSelectItemSegment.isPresent()) {\n             selectItemsSegment.getSelectItems().add(unqualifiedShorthandSelectItemSegment.get());\n         }\n     }\n-    \n+\n     private void setSelectItemSegment(final ParserRuleContext selectItemsNode, final SelectItemsSegment selectItemsSegment, final Map<ParserRuleContext, Integer> parameterMarkerIndexes) {\n         for (ParserRuleContext each : ExtractorUtils.getAllDescendantNodes(selectItemsNode, RuleName.SELECT_ITEM)) {\n             Optional<? extends SelectItemSegment> selectItemSegment = selectItemExtractor.extract(each, parameterMarkerIndexes);\n@@ -81,14 +81,16 @@ private void setSelectItemSegment(final ParserRuleContext selectItemsNode, final\n             }\n         }\n     }\n-    \n+\n     private boolean extractDistinct(final ParserRuleContext selectItemsNode) {\n         Optional<ParserRuleContext> duplicateSpecificationNode = ExtractorUtils.findFirstChildNode(selectItemsNode, RuleName.DUPLICATE_SPECIFICATION);\n-        String text = duplicateSpecificationNode.get().getText();\n-        return duplicateSpecificationNode.isPresent()\n-                && (\"DISTINCT\".equalsIgnoreCase(text) || \"DISTINCTROW\".equalsIgnoreCase(text));\n+        if (duplicateSpecificationNode.isPresent()) {\n+            String text = duplicateSpecificationNode.get().getText();\n+            return \"DISTINCT\".equalsIgnoreCase(text) || \"DISTINCTROW\".equalsIgnoreCase(text);\n+        }\n+        return false;\n     }\n-    \n+\n     private ParserRuleContext findMainQueryNode(final ParserRuleContext ancestorNode) {\n         Optional<ParserRuleContext> tableReferencesNode = ExtractorUtils.findFirstChildNode(ancestorNode, RuleName.TABLE_REFERENCES);\n         if (!tableReferencesNode.isPresent()) {\n@@ -100,7 +102,7 @@ private ParserRuleContext findMainQueryNode(final ParserRuleContext ancestorNode\n         }\n         return ancestorNode;\n     }\n-    \n+\n     private Collection<SelectItemSegment> extractRowNumberSelectItem(final ParserRuleContext ancestorNode, final Map<ParserRuleContext, Integer> parameterMarkerIndexes) {\n         Collection<SelectItemSegment> result = new LinkedList<>();\n         Collection<ParserRuleContext> selectItemNodes = ExtractorUtils.getAllDescendantNodes(ancestorNode, RuleName.SELECT_ITEM);", "filename": "sharding-core/sharding-core-parse/sharding-core-parse-common/src/main/java/org/apache/shardingsphere/core/parse/extractor/impl/dml/select/SelectItemsExtractor.java"}], "repo": "incubator-shardingsphere"}, {"commit": "https://github.com/apache/incubator-shardingsphere/commit/975d5bfb41b2efd23e44b7aad51016c3275acd50", "parent": "https://github.com/apache/incubator-shardingsphere/commit/cc3e62c6137acdc4dba03dfcfde66129d555ac57", "message": "resolve possible NPE", "bug_id": "incubator-shardingsphere_3", "file": [{"additions": 2, "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/975d5bfb41b2efd23e44b7aad51016c3275acd50/sharding-core/sharding-core-parse/sharding-core-parse-common/src/main/java/org/apache/shardingsphere/core/parse/extractor/impl/dml/select/SelectItemsExtractor.java", "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/975d5bfb41b2efd23e44b7aad51016c3275acd50/sharding-core/sharding-core-parse/sharding-core-parse-common/src/main/java/org/apache/shardingsphere/core/parse/extractor/impl/dml/select/SelectItemsExtractor.java", "sha": "f5e0a616db34dd0af24e340bfc95d1b8f771718b", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-parse/sharding-core-parse-common/src/main/java/org/apache/shardingsphere/core/parse/extractor/impl/dml/select/SelectItemsExtractor.java?ref=975d5bfb41b2efd23e44b7aad51016c3275acd50", "patch": "@@ -84,8 +84,9 @@ private void setSelectItemSegment(final ParserRuleContext selectItemsNode, final\n     \n     private boolean extractDistinct(final ParserRuleContext selectItemsNode) {\n         Optional<ParserRuleContext> duplicateSpecificationNode = ExtractorUtils.findFirstChildNode(selectItemsNode, RuleName.DUPLICATE_SPECIFICATION);\n+        String text = duplicateSpecificationNode.get().getText();\n         return duplicateSpecificationNode.isPresent()\n-                && (duplicateSpecificationNode.get().getText().equalsIgnoreCase(\"DISTINCT\") || duplicateSpecificationNode.get().getText().equalsIgnoreCase(\"DISTINCTROW\"));\n+                && (\"DISTINCT\".equalsIgnoreCase(text) || \"DISTINCTROW\".equalsIgnoreCase(text));\n     }\n     \n     private ParserRuleContext findMainQueryNode(final ParserRuleContext ancestorNode) {", "filename": "sharding-core/sharding-core-parse/sharding-core-parse-common/src/main/java/org/apache/shardingsphere/core/parse/extractor/impl/dml/select/SelectItemsExtractor.java"}], "repo": "incubator-shardingsphere"}, {"commit": "https://github.com/apache/incubator-shardingsphere/commit/d367e25213a530a87c9242225dcf64310f70691d", "parent": "https://github.com/apache/incubator-shardingsphere/commit/6981f690ae2864fa4927fdb5fc74f795a981191e", "message": "Fixes #2527, NPE in CachedDatabaseMetaData when use masterSlaveDataSource", "bug_id": "incubator-shardingsphere_4", "file": [{"additions": 4, "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/d367e25213a530a87c9242225dcf64310f70691d/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/datasource/metadata/ResultSetReturnedDatabaseMetaData.java", "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/d367e25213a530a87c9242225dcf64310f70691d/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/datasource/metadata/ResultSetReturnedDatabaseMetaData.java", "sha": "13c2a12d1e173a903fd24c795f8337e787f4e95f", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/datasource/metadata/ResultSetReturnedDatabaseMetaData.java?ref=d367e25213a530a87c9242225dcf64310f70691d", "patch": "@@ -263,7 +263,10 @@ private String getCurrentDataSourceName() {\n     }\n     \n     private String getActualTableNamePattern(final String tableNamePattern) {\n-        return null == tableNamePattern ? tableNamePattern : (shardingRule.findTableRule(tableNamePattern).isPresent() ? \"%\" + tableNamePattern + \"%\" : tableNamePattern);\n+        if (null == tableNamePattern || null == shardingRule) {\n+            return tableNamePattern;\n+        }\n+        return shardingRule.findTableRule(tableNamePattern).isPresent() ? \"%\" + tableNamePattern + \"%\" : tableNamePattern;\n     }\n     \n     private String getActualTable(final String table) {", "filename": "sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/datasource/metadata/ResultSetReturnedDatabaseMetaData.java"}, {"additions": 2, "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/d367e25213a530a87c9242225dcf64310f70691d/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/DatabaseMetaDataResultSet.java", "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/d367e25213a530a87c9242225dcf64310f70691d/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/DatabaseMetaDataResultSet.java", "sha": "5aff76a5d4bbebcb55b7a12a036650218dd46e27", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/DatabaseMetaDataResultSet.java?ref=d367e25213a530a87c9242225dcf64310f70691d", "patch": "@@ -30,6 +30,7 @@\n import java.sql.Timestamp;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n@@ -100,7 +101,7 @@ private DatabaseMetaDataObject generateDatabaseMetaDataObject(final int tableNam\n         for (int i = 1; i <= columnLabelIndexMap.size(); i++) {\n             if (tableNameColumnIndex == i) {\n                 String tableName = resultSet.getString(i);\n-                Collection<String> logicTableNames = shardingRule.getLogicTableNames(tableName);\n+                Collection<String> logicTableNames = null == shardingRule ? Collections.<String>emptyList() : shardingRule.getLogicTableNames(tableName);\n                 result.addObject(logicTableNames.isEmpty() ? tableName : logicTableNames.iterator().next());\n             } else if (indexNameColumnIndex == i) {\n                 String tableName = resultSet.getString(tableNameColumnIndex);", "filename": "sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/resultset/DatabaseMetaDataResultSet.java"}, {"additions": 2, "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/d367e25213a530a87c9242225dcf64310f70691d/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/datasource/metadata/CachedDatabaseMetaDataTest.java", "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/d367e25213a530a87c9242225dcf64310f70691d/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/datasource/metadata/CachedDatabaseMetaDataTest.java", "sha": "7b3c07fc90e30810e4ab554fd04d180a1a2c3aa1", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/datasource/metadata/CachedDatabaseMetaDataTest.java?ref=d367e25213a530a87c9242225dcf64310f70691d", "patch": "@@ -858,8 +858,8 @@ public void assertGetProcedureColumns() throws SQLException {\n     \n     @Test\n     public void assertGetTables() throws SQLException {\n-        when(databaseMetaData.getTables(\"test\", null, null, null)).thenReturn(resultSet);\n-        assertThat(cachedDatabaseMetaData.getTables(\"test\", null, null, null), instanceOf(DatabaseMetaDataResultSet.class));\n+        when(databaseMetaData.getTables(\"test\", null, \"%\" + TABLE_NAME + \"%\", null)).thenReturn(resultSet);\n+        assertThat(cachedDatabaseMetaData.getTables(\"test\", null, TABLE_NAME, null), instanceOf(DatabaseMetaDataResultSet.class));\n     }\n     \n     @Test", "filename": "sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/datasource/metadata/CachedDatabaseMetaDataTest.java"}], "repo": "incubator-shardingsphere"}, {"commit": "https://github.com/apache/incubator-shardingsphere/commit/3ba18348c228fceb6610bd97a2ac21caea25d6b9", "parent": "https://github.com/apache/incubator-shardingsphere/commit/7f4faf2cfc42e8cf34458226b85f95ff013d92a0", "message": "fix npe problem", "bug_id": "incubator-shardingsphere_5", "file": [{"additions": 8, "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/3ba18348c228fceb6610bd97a2ac21caea25d6b9/sharding-opentracing/src/main/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHook.java", "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/3ba18348c228fceb6610bd97a2ac21caea25d6b9/sharding-opentracing/src/main/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHook.java", "sha": "2d97263930cefc1c51e53d5369aaa64698c17c9c", "changes": 9, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-opentracing/src/main/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHook.java?ref=3ba18348c228fceb6610bd97a2ac21caea25d6b9", "patch": "@@ -18,6 +18,9 @@\n package org.apache.shardingsphere.opentracing.hook;\n \n import com.google.common.base.Joiner;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.Collections2;\n+import com.google.common.collect.Lists;\n import io.opentracing.ActiveSpan;\n import io.opentracing.Span;\n import io.opentracing.tag.Tags;\n@@ -61,7 +64,11 @@ public void start(final RouteUnit routeUnit, final DataSourceMetaData dataSource\n     }\n     \n     private String toString(final List<Object> parameterSets) {\n-        return parameterSets.isEmpty() ? \"\" : String.format(\"[%s]\", Joiner.on(\", \").join(parameterSets));\n+\n+        if (null == parameterSets || parameterSets.isEmpty()) {\n+            return \"\";\n+        }\n+        return String.format(\"[%s]\", Joiner.on(\", \").join(parameterSets));\n     }\n     \n     @Override", "filename": "sharding-opentracing/src/main/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHook.java"}, {"additions": 24, "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/3ba18348c228fceb6610bd97a2ac21caea25d6b9/sharding-opentracing/src/test/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHookTest.java", "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/3ba18348c228fceb6610bd97a2ac21caea25d6b9/sharding-opentracing/src/test/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHookTest.java", "sha": "38108e6e7bf162787f1908940b413f33fd260d9e", "changes": 24, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-opentracing/src/test/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHookTest.java?ref=3ba18348c228fceb6610bd97a2ac21caea25d6b9", "patch": "@@ -95,6 +95,30 @@ public void assertExecuteSuccessForTrunkThread() {\n         assertThat(actualTags.get(Tags.DB_STATEMENT.getKey()), CoreMatchers.<Object>is(\"SELECT * FROM success_tbl;\"));\n         assertThat(actualTags.get(ShardingTags.DB_BIND_VARIABLES.getKey()), CoreMatchers.<Object>is(\"[1, 2]\"));\n         verify(activeSpan, times(0)).deactivate();\n+\n+        sqlExecutionHook.start(createRouteUnit(\"success_ds\", \"SELECT * FROM success_tbl;\", null), dataSourceMetaData, true, null);\n+        sqlExecutionHook.finishSuccess();\n+    }\n+\n+    @Test\n+    public void assertExecuteSuccessForTrunkThreadWhenParamsIsNull() {\n+        DataSourceMetaData dataSourceMetaData = mock(DataSourceMetaData.class);\n+        when(dataSourceMetaData.getHostName()).thenReturn(\"localhost\");\n+        when(dataSourceMetaData.getPort()).thenReturn(8888);\n+        sqlExecutionHook.start(createRouteUnit(\"success_ds\", \"SELECT * FROM success_tbl;\", null), dataSourceMetaData, true, null);\n+        sqlExecutionHook.finishSuccess();\n+        MockSpan actual = getActualSpan();\n+        assertThat(actual.operationName(), is(\"/Sharding-Sphere/executeSQL/\"));\n+        Map<String, Object> actualTags = actual.tags();\n+        assertThat(actualTags.get(Tags.COMPONENT.getKey()), CoreMatchers.<Object>is(ShardingTags.COMPONENT_NAME));\n+        assertThat(actualTags.get(Tags.SPAN_KIND.getKey()), CoreMatchers.<Object>is(Tags.SPAN_KIND_CLIENT));\n+        assertThat(actualTags.get(Tags.PEER_HOSTNAME.getKey()), CoreMatchers.<Object>is(\"localhost\"));\n+        assertThat(actualTags.get(Tags.PEER_PORT.getKey()), CoreMatchers.<Object>is(8888));\n+        assertThat(actualTags.get(Tags.DB_TYPE.getKey()), CoreMatchers.<Object>is(\"sql\"));\n+        assertThat(actualTags.get(Tags.DB_INSTANCE.getKey()), CoreMatchers.<Object>is(\"success_ds\"));\n+        assertThat(actualTags.get(Tags.DB_STATEMENT.getKey()), CoreMatchers.<Object>is(\"SELECT * FROM success_tbl;\"));\n+        assertThat(actualTags.get(ShardingTags.DB_BIND_VARIABLES.getKey()), CoreMatchers.<Object>is(\"\"));\n+        verify(activeSpan, times(0)).deactivate();\n     }\n     \n     @Test", "filename": "sharding-opentracing/src/test/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHookTest.java"}], "repo": "incubator-shardingsphere"}, {"commit": "https://github.com/apache/incubator-shardingsphere/commit/42aa6d15896c7fb15f87368403c6b1a62ac7772e", "parent": "https://github.com/apache/incubator-shardingsphere/commit/6186ae4d3b4979c23eda6442fb208462ccda07e1", "message": "for expression extract NPE (#1837)\n\n* for expression extract NPE\r\n\r\n* for StackOverflowError", "bug_id": "incubator-shardingsphere_6", "file": [{"additions": 25, "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/42aa6d15896c7fb15f87368403c6b1a62ac7772e/sharding-core/src/main/java/org/apache/shardingsphere/core/parsing/antlr/extractor/impl/PredicateExtractor.java", "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/42aa6d15896c7fb15f87368403c6b1a62ac7772e/sharding-core/src/main/java/org/apache/shardingsphere/core/parsing/antlr/extractor/impl/PredicateExtractor.java", "sha": "0d816016464d269c7803811d782ae3f144d0496a", "changes": 50, "status": "modified", "deletions": 25, "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/src/main/java/org/apache/shardingsphere/core/parsing/antlr/extractor/impl/PredicateExtractor.java?ref=42aa6d15896c7fb15f87368403c6b1a62ac7772e", "patch": "@@ -52,7 +52,7 @@\n @RequiredArgsConstructor\n public final class PredicateExtractor implements OptionalSQLSegmentExtractor {\n     \n-    private ExpressionExtractor expressionExtractor;\n+    private ExpressionExtractor expressionExtractor = new ExpressionExtractor();\n     \n     @Override\n     public Optional<PredicateSegment> extract(final ParserRuleContext ancestorNode) {\n@@ -67,11 +67,10 @@\n      * @return or condition\n      */\n     public Optional<OrConditionSegment> extractCondition(final Map<ParserRuleContext, Integer> placeholderIndexes, final ParserRuleContext exprNode) {\n-        expressionExtractor = new ExpressionExtractor(placeholderIndexes);\n-        return extractConditionInternal(exprNode);\n+        return extractConditionInternal(placeholderIndexes, exprNode);\n     }\n     \n-    private Optional<OrConditionSegment> extractConditionInternal(final ParserRuleContext exprNode) {\n+    private Optional<OrConditionSegment> extractConditionInternal(final Map<ParserRuleContext, Integer> placeholderIndexes, final ParserRuleContext exprNode) {\n         int index = -1;\n         for (int i = 0; i < exprNode.getChildCount(); i++) {\n             if (LogicalOperator.isLogicalOperator(exprNode.getChild(i).getText())) {\n@@ -80,17 +79,18 @@\n             }\n         }\n         if (index > 0) {\n-            Optional<OrConditionSegment> leftOrCondition = extractConditionInternal((ParserRuleContext) exprNode.getChild(index - 1));\n-            Optional<OrConditionSegment> rightOrCondition = extractConditionInternal((ParserRuleContext) exprNode.getChild(index + 1));\n+            Optional<OrConditionSegment> leftOrCondition = extractConditionInternal(placeholderIndexes, (ParserRuleContext) exprNode.getChild(index - 1));\n+            Optional<OrConditionSegment> rightOrCondition = extractConditionInternal(placeholderIndexes, (ParserRuleContext) exprNode.getChild(index + 1));\n             if (leftOrCondition.isPresent() && rightOrCondition.isPresent()) {\n-                return Optional.of(mergeCondition(leftOrCondition.get(), rightOrCondition.get(), exprNode.getChild(index).getText()));\n+                return Optional.of(mergeCondition(placeholderIndexes, leftOrCondition.get(), rightOrCondition.get(), exprNode.getChild(index).getText()));\n             }\n             return leftOrCondition.isPresent() ? leftOrCondition : rightOrCondition;\n         }\n-        return extractConditionForParen(exprNode);\n+        return extractConditionForParen(placeholderIndexes, exprNode);\n     }\n     \n-    private OrConditionSegment mergeCondition(final OrConditionSegment leftOrCondition, final OrConditionSegment rightOrCondition, final String operator) {\n+    private OrConditionSegment mergeCondition(final Map<ParserRuleContext, Integer> placeholderIndexes, final OrConditionSegment leftOrCondition,\n+                                              final OrConditionSegment rightOrCondition, final String operator) {\n         if (LogicalOperator.isOrOperator(operator)) {\n             leftOrCondition.getAndConditions().addAll(rightOrCondition.getAndConditions());\n             return leftOrCondition;\n@@ -107,7 +107,7 @@ private OrConditionSegment mergeCondition(final OrConditionSegment leftOrConditi\n         return result;\n     }\n     \n-    private Optional<OrConditionSegment> extractConditionForParen(final ParserRuleContext exprNode) {\n+    private Optional<OrConditionSegment> extractConditionForParen(final Map<ParserRuleContext, Integer> placeholderIndexes, final ParserRuleContext exprNode) {\n         int index = -1;\n         for (int i = 0; i < exprNode.getChildCount(); i++) {\n             if (Paren.isLeftParen(exprNode.getChild(i).getText())) {\n@@ -118,11 +118,11 @@ private OrConditionSegment mergeCondition(final OrConditionSegment leftOrConditi\n         if (-1 != index) {\n             Preconditions.checkState(Paren.match(exprNode.getChild(index).getText(), exprNode.getChild(index + 2).getText()), \"Missing right paren.\");\n             if (RuleName.EXPR.getName().equals(exprNode.getChild(index + 1).getClass().getSimpleName())) {\n-                return extractConditionInternal((ParserRuleContext) exprNode.getChild(index + 1));\n+                return extractConditionInternal(placeholderIndexes, (ParserRuleContext) exprNode.getChild(index + 1));\n             }\n             return Optional.absent();\n         }\n-        Optional<ConditionSegment> condition = buildCondition(exprNode);\n+        Optional<ConditionSegment> condition = buildCondition(placeholderIndexes, exprNode);\n         if (!condition.isPresent()) {\n             return Optional.absent();\n         }\n@@ -133,15 +133,15 @@ private OrConditionSegment mergeCondition(final OrConditionSegment leftOrConditi\n         return Optional.of(result);\n     }\n     \n-    private Optional<ConditionSegment> buildCondition(final ParserRuleContext exprNode) {\n-        Optional<ConditionSegment> result = buildEqualCondition(exprNode);\n+    private Optional<ConditionSegment> buildCondition(final Map<ParserRuleContext, Integer> placeholderIndexes, final ParserRuleContext exprNode) {\n+        Optional<ConditionSegment> result = buildEqualCondition(placeholderIndexes, exprNode);\n         if (result.isPresent()) {\n             return result;\n         }\n-        return buildPredicateCondition(exprNode);\n+        return buildPredicateCondition(placeholderIndexes, exprNode);\n     }\n     \n-    private Optional<ConditionSegment> buildEqualCondition(final ParserRuleContext exprNode) {\n+    private Optional<ConditionSegment> buildEqualCondition(final Map<ParserRuleContext, Integer> placeholderIndexes, final ParserRuleContext exprNode) {\n         Optional<ParserRuleContext> comparisionNode = ExtractorUtils.findFirstChildNode(exprNode, RuleName.COMPARISON_OPERATOR);\n         if (!comparisionNode.isPresent() || !isValidEqualCondition(comparisionNode.get())) {\n             return Optional.absent();\n@@ -160,7 +160,7 @@ private OrConditionSegment mergeCondition(final OrConditionSegment leftOrConditi\n         Optional<ColumnSegment> column = buildColumn(exprNode);\n         Preconditions.checkState(column.isPresent());\n         ParserRuleContext valueNode = leftNode.isPresent() ? (ParserRuleContext) comparisionNode.get().parent.getChild(2) : (ParserRuleContext) comparisionNode.get().parent.getChild(0);\n-        Optional<? extends ExpressionSegment> sqlExpression = expressionExtractor.extract(valueNode);\n+        Optional<? extends ExpressionSegment> sqlExpression = expressionExtractor.extract(placeholderIndexes, valueNode);\n         return sqlExpression.isPresent()\n                 ? Optional.of(new ConditionSegment(column.get(), ShardingOperator.EQUAL, new EqualsValueExpressionSegment(sqlExpression.get()))) : Optional.<ConditionSegment>absent();\n     }\n@@ -169,7 +169,7 @@ private boolean isValidEqualCondition(final ParserRuleContext comparisionNode) {\n         return Symbol.EQ.getLiterals().equalsIgnoreCase(comparisionNode.getText()) && 3 == comparisionNode.getParent().getChildCount();\n     }\n     \n-    private Optional<ConditionSegment> buildPredicateCondition(final ParserRuleContext exprNode) {\n+    private Optional<ConditionSegment> buildPredicateCondition(final Map<ParserRuleContext, Integer> placeholderIndexes, final ParserRuleContext exprNode) {\n         Optional<ParserRuleContext> predicateNode = ExtractorUtils.findFirstChildNode(exprNode, RuleName.PREDICATE);\n         if (!predicateNode.isPresent()) {\n             return Optional.absent();\n@@ -178,42 +178,42 @@ private boolean isValidEqualCondition(final ParserRuleContext comparisionNode) {\n             return Optional.absent();\n         }\n         if (5 == predicateNode.get().getChildCount() && DefaultKeyword.BETWEEN.name().equalsIgnoreCase(predicateNode.get().getChild(1).getText())) {\n-            Optional<ConditionSegment> result = buildBetweenCondition(predicateNode.get());\n+            Optional<ConditionSegment> result = buildBetweenCondition(placeholderIndexes, predicateNode.get());\n             if (result.isPresent()) {\n                 return result;\n             }\n         }\n         if (5 <= predicateNode.get().getChildCount() && DefaultKeyword.IN.name().equalsIgnoreCase(predicateNode.get().getChild(1).getText())) {\n-            Optional<ConditionSegment> result = buildInCondition(predicateNode.get());\n+            Optional<ConditionSegment> result = buildInCondition(placeholderIndexes, predicateNode.get());\n             if (result.isPresent()) {\n                 return result;\n             }\n         }\n         return Optional.absent();\n     }\n     \n-    private Optional<ConditionSegment> buildBetweenCondition(final ParserRuleContext predicateNode) {\n+    private Optional<ConditionSegment> buildBetweenCondition(final Map<ParserRuleContext, Integer> placeholderIndexes, final ParserRuleContext predicateNode) {\n         Optional<ColumnSegment> column = buildColumn((ParserRuleContext) predicateNode.getChild(0));\n         if (!column.isPresent()) {\n             return Optional.absent();\n         }\n-        Optional<? extends ExpressionSegment> beginSQLExpression = expressionExtractor.extract((ParserRuleContext) predicateNode.getChild(2));\n-        Optional<? extends ExpressionSegment> endSQLExpression = expressionExtractor.extract((ParserRuleContext) predicateNode.getChild(4));\n+        Optional<? extends ExpressionSegment> beginSQLExpression = expressionExtractor.extract(placeholderIndexes, (ParserRuleContext) predicateNode.getChild(2));\n+        Optional<? extends ExpressionSegment> endSQLExpression = expressionExtractor.extract(placeholderIndexes, (ParserRuleContext) predicateNode.getChild(4));\n         if (beginSQLExpression.isPresent() && endSQLExpression.isPresent()) {\n             return Optional.of(new ConditionSegment(column.get(), ShardingOperator.BETWEEN, new BetweenValueExpressionSegment(beginSQLExpression.get(), endSQLExpression.get())));\n         }\n         return Optional.absent();\n     }\n     \n-    private Optional<ConditionSegment> buildInCondition(final ParserRuleContext predicateNode) {\n+    private Optional<ConditionSegment> buildInCondition(final Map<ParserRuleContext, Integer> placeholderIndexes, final ParserRuleContext predicateNode) {\n         Optional<ColumnSegment> column = buildColumn((ParserRuleContext) predicateNode.getChild(0));\n         if (!column.isPresent()) {\n             return Optional.absent();\n         }\n         List<ExpressionSegment> sqlExpressions = new LinkedList<>();\n         for (int i = 3; i < predicateNode.getChildCount(); i++) {\n             if (RuleName.SIMPLE_EXPR.getName().equals(predicateNode.getChild(i).getClass().getSimpleName())) {\n-                Optional<? extends ExpressionSegment> expression = expressionExtractor.extract((ParserRuleContext) predicateNode.getChild(i));\n+                Optional<? extends ExpressionSegment> expression = expressionExtractor.extract(placeholderIndexes, (ParserRuleContext) predicateNode.getChild(i));\n                 if (!expression.isPresent()) {\n                     sqlExpressions.clear();\n                     break;", "filename": "sharding-core/src/main/java/org/apache/shardingsphere/core/parsing/antlr/extractor/impl/PredicateExtractor.java"}, {"additions": 12, "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/42aa6d15896c7fb15f87368403c6b1a62ac7772e/sharding-core/src/main/java/org/apache/shardingsphere/core/parsing/antlr/extractor/impl/dml/InsertExtractor.java", "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/42aa6d15896c7fb15f87368403c6b1a62ac7772e/sharding-core/src/main/java/org/apache/shardingsphere/core/parsing/antlr/extractor/impl/dml/InsertExtractor.java", "sha": "c23653b87a80e11c262de3a6f7883ab1ca4b5132", "changes": 25, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/src/main/java/org/apache/shardingsphere/core/parsing/antlr/extractor/impl/dml/InsertExtractor.java?ref=42aa6d15896c7fb15f87368403c6b1a62ac7772e", "patch": "@@ -41,35 +41,34 @@\n  */\n public final class InsertExtractor implements OptionalSQLSegmentExtractor {\n     \n-    private ExpressionExtractor expressionExtractor;\n+    private ExpressionExtractor expressionExtractor = new ExpressionExtractor();\n     \n-    private ColumnSegmentExtractor columnSegmentExtractor;\n+    private ColumnSegmentExtractor columnSegmentExtractor = new ColumnSegmentExtractor();\n     \n     @Override\n     public Optional<InsertSegment> extract(final ParserRuleContext ancestorNode) {\n         InsertSegment result = new InsertSegment();\n-        expressionExtractor = new ExpressionExtractor(getPlaceholderIndexes(ancestorNode));\n-        columnSegmentExtractor = new ColumnSegmentExtractor();\n-        extractValuesColumn(ancestorNode, result);\n+        Map<ParserRuleContext, Integer> placeholderIndexes = getPlaceholderIndexes(ancestorNode);\n+        extractValuesColumn(placeholderIndexes, ancestorNode, result);\n         if (result.getValuesList().isEmpty()) {\n-            extractSetColumn(ancestorNode, result);\n+            extractSetColumn(placeholderIndexes, ancestorNode, result);\n         }\n         extractDuplicateKeys(ancestorNode, result);\n         result.setInsertValuesListLastIndex(ancestorNode.getStop().getStopIndex());\n         return Optional.of(result);\n     }\n     \n     private Map<ParserRuleContext, Integer> getPlaceholderIndexes(final ParserRuleContext rootNode) {\n-        Collection<ParserRuleContext> questionNodes = ExtractorUtils.getAllDescendantNodes(rootNode, RuleName.QUESTION);\n-        Map<ParserRuleContext, Integer> result = new HashMap<>(questionNodes.size(), 1);\n+        Collection<ParserRuleContext> placeholderNodes = ExtractorUtils.getAllDescendantNodes(rootNode, RuleName.QUESTION);\n+        Map<ParserRuleContext, Integer> result = new HashMap<>(placeholderNodes.size(), 1);\n         int index = 0;\n-        for (ParserRuleContext each : questionNodes) {\n+        for (ParserRuleContext each : placeholderNodes) {\n             result.put(each, index++);\n         }\n         return result;\n     }\n     \n-    private void extractValuesColumn(final ParserRuleContext ancestorNode, final InsertSegment insertSegment) {\n+    private void extractValuesColumn(final Map<ParserRuleContext, Integer> placeholderIndexes, final ParserRuleContext ancestorNode, final InsertSegment insertSegment) {\n         Optional<ParserRuleContext> columnClauseNode = ExtractorUtils.findFirstChildNode(ancestorNode, RuleName.COLUMN_CLAUSE);\n         if (!columnClauseNode.isPresent()) {\n             return;\n@@ -95,12 +94,12 @@ private void extractValuesColumn(final ParserRuleContext ancestorNode, final Ins\n             InsertValuesSegment insertValuesSegment = new InsertValuesSegment(DefaultKeyword.VALUES, each.getStart().getStartIndex(), each.getStop().getStopIndex(), questionNodes.size());\n             insertSegment.getValuesList().add(insertValuesSegment);\n             for (ParserRuleContext eachValue : ExtractorUtils.getAllDescendantNodes(each, RuleName.ASSIGNMENT_VALUE)) {\n-                insertValuesSegment.getValues().add(expressionExtractor.extractCommonExpressionSegment(eachValue));\n+                insertValuesSegment.getValues().add(expressionExtractor.extractCommonExpressionSegment(placeholderIndexes, eachValue));\n             }\n         }\n     }\n     \n-    private void extractSetColumn(final ParserRuleContext ancestorNode, final InsertSegment insertSegment) {\n+    private void extractSetColumn(final Map<ParserRuleContext, Integer> placeholderIndexes, final ParserRuleContext ancestorNode, final InsertSegment insertSegment) {\n         Optional<ParserRuleContext> setClauseNode = ExtractorUtils.findFirstChildNode(ancestorNode, RuleName.SET_CLAUSE);\n         if (!setClauseNode.isPresent()) {\n             return;\n@@ -119,7 +118,7 @@ private void extractSetColumn(final ParserRuleContext ancestorNode, final Insert\n         for (ParserRuleContext each : assignments) {\n             ParserRuleContext columnNode = (ParserRuleContext) each.getChild(0);\n             insertSegment.getColumns().add(columnSegmentExtractor.extract(columnNode).get());\n-            insertValuesSegment.getValues().add(expressionExtractor.extractCommonExpressionSegment((ParserRuleContext) each.getChild(2)));\n+            insertValuesSegment.getValues().add(expressionExtractor.extractCommonExpressionSegment(placeholderIndexes, (ParserRuleContext) each.getChild(2)));\n         }\n     }\n     ", "filename": "sharding-core/src/main/java/org/apache/shardingsphere/core/parsing/antlr/extractor/impl/dml/InsertExtractor.java"}, {"additions": 3, "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/42aa6d15896c7fb15f87368403c6b1a62ac7772e/sharding-core/src/main/java/org/apache/shardingsphere/core/parsing/antlr/extractor/impl/dml/UpdateSetWhereExtractor.java", "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/42aa6d15896c7fb15f87368403c6b1a62ac7772e/sharding-core/src/main/java/org/apache/shardingsphere/core/parsing/antlr/extractor/impl/dml/UpdateSetWhereExtractor.java", "sha": "46ec88b61abd0f86ca9ff65cbec5df3288b6feeb", "changes": 5, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/src/main/java/org/apache/shardingsphere/core/parsing/antlr/extractor/impl/dml/UpdateSetWhereExtractor.java?ref=42aa6d15896c7fb15f87368403c6b1a62ac7772e", "patch": "@@ -38,6 +38,8 @@\n  */\n public final class UpdateSetWhereExtractor extends AbstractFromWhereExtractor {\n     \n+    private final ExpressionExtractor expressionExtractor = new ExpressionExtractor();\n+    \n     protected FromWhereSegment createSegment() {\n         return new UpdateSetWhereSegment();\n     }\n@@ -59,10 +61,9 @@ private void extractSetColumns(final ParserRuleContext ancestorNode, final Updat\n             return;\n         }\n         ColumnSegmentExtractor columnSegmentExtractor = new ColumnSegmentExtractor();\n-        ExpressionExtractor expressionExtractor = new ExpressionExtractor(placeholderIndexes);\n         for (ParserRuleContext each : ExtractorUtils.getAllDescendantNodes(setClauseNode.get(), RuleName.ASSIGNMENT)) {\n             Optional<ColumnSegment> columnSegment = columnSegmentExtractor.extract((ParserRuleContext) each.getChild(0));\n-            updateSetWhereSegment.getUpdateColumns().put(columnSegment.get().getName(), expressionExtractor.extract((ParserRuleContext) each.getChild(2)).get());\n+            updateSetWhereSegment.getUpdateColumns().put(columnSegment.get().getName(), expressionExtractor.extract(placeholderIndexes, (ParserRuleContext) each.getChild(2)).get());\n         }\n     }\n }", "filename": "sharding-core/src/main/java/org/apache/shardingsphere/core/parsing/antlr/extractor/impl/dml/UpdateSetWhereExtractor.java"}, {"additions": 17, "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/42aa6d15896c7fb15f87368403c6b1a62ac7772e/sharding-core/src/main/java/org/apache/shardingsphere/core/parsing/antlr/extractor/impl/expression/ExpressionExtractor.java", "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/42aa6d15896c7fb15f87368403c6b1a62ac7772e/sharding-core/src/main/java/org/apache/shardingsphere/core/parsing/antlr/extractor/impl/expression/ExpressionExtractor.java", "sha": "f98df872310c3ba407d67b73372d32eaa51c227e", "changes": 26, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/src/main/java/org/apache/shardingsphere/core/parsing/antlr/extractor/impl/expression/ExpressionExtractor.java?ref=42aa6d15896c7fb15f87368403c6b1a62ac7772e", "patch": "@@ -44,25 +44,32 @@\n @RequiredArgsConstructor\n public final class ExpressionExtractor implements OptionalSQLSegmentExtractor {\n     \n-    private final SubqueryExtractor subqueryExtractor = new SubqueryExtractor();\n-    \n-    private final Map<ParserRuleContext, Integer> placeholderIndexes;\n-    \n     @Override\n-    public Optional<? extends ExpressionSegment> extract(final ParserRuleContext expressionNode) {\n+    public Optional<? extends ExpressionSegment> extract(final ParserRuleContext ancestorNode) {\n+        throw new RuntimeException();\n+    }\n+    \n+    /**\n+     *  Extract expression.\n+     *\n+     * @param placeholderIndexes  place holder index\n+     * @param expressionNode expression node\n+     * @return expression segment\n+     */\n+    public Optional<? extends ExpressionSegment> extract(final Map<ParserRuleContext, Integer> placeholderIndexes, final ParserRuleContext expressionNode) {\n         Optional<ParserRuleContext> subqueryNode = ExtractorUtils.findFirstChildNode(expressionNode, RuleName.SUBQUERY);\n-        return subqueryNode.isPresent() ? subqueryExtractor.extract(subqueryNode.get()) : Optional.of(extractExpression(expressionNode));\n+        return subqueryNode.isPresent() ? new SubqueryExtractor().extract(subqueryNode.get()) : Optional.of(extractExpression(placeholderIndexes, expressionNode));\n     }\n     \n-    private ExpressionSegment extractExpression(final ParserRuleContext expressionNode) {\n+    private ExpressionSegment extractExpression(final Map<ParserRuleContext, Integer> placeholderIndexes, final ParserRuleContext expressionNode) {\n         Optional<ParserRuleContext> functionNode = ExtractorUtils.findFirstChildNode(expressionNode, RuleName.FUNCTION_CALL);\n         if (functionNode.isPresent()) {\n             return extractFunctionExpressionSegment(functionNode.get());\n         }\n         if (RuleName.COLUMN_NAME.getName().equals(expressionNode.getChild(0).getClass().getSimpleName())) {\n             return extractPropertyExpressionSegment(expressionNode);\n         }\n-        return extractCommonExpressionSegment(expressionNode);\n+        return extractCommonExpressionSegment(placeholderIndexes, expressionNode);\n     }\n     \n     // TODO extract column name and value from function\n@@ -81,10 +88,11 @@ private ExpressionSegment extractPropertyExpressionSegment(final ParserRuleConte\n     /**\n      * Extract common expression segment.\n      *\n+     * @param placeholderIndexes place holder index\n      * @param expressionNode expression node\n      * @return common expression segment\n      */\n-    public CommonExpressionSegment extractCommonExpressionSegment(final ParserRuleContext expressionNode) {\n+    public CommonExpressionSegment extractCommonExpressionSegment(final Map<ParserRuleContext, Integer> placeholderIndexes, final ParserRuleContext expressionNode) {\n         CommonExpressionSegment result = new CommonExpressionSegment(expressionNode.getStart().getStartIndex(), expressionNode.getStop().getStopIndex());\n         Optional<ParserRuleContext> questionNode = ExtractorUtils.findFirstChildNode(expressionNode, RuleName.QUESTION);\n         if (questionNode.isPresent()) {", "filename": "sharding-core/src/main/java/org/apache/shardingsphere/core/parsing/antlr/extractor/impl/expression/ExpressionExtractor.java"}], "repo": "incubator-shardingsphere"}, {"commit": "https://github.com/apache/incubator-shardingsphere/commit/b3ebe4265f6abf7934d622c82418073ca783f073", "parent": "https://github.com/apache/incubator-shardingsphere/commit/ffc9eec96262f4e2e2034bd1c1fad4430d3f860c", "message": "Feature/bug fix (#2240)\n\n* fix npe problem\r\n\r\n* remove useless import\r\n\r\n* remove empty line", "bug_id": "incubator-shardingsphere_7", "file": [{"additions": 4, "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/b3ebe4265f6abf7934d622c82418073ca783f073/sharding-opentracing/src/main/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHook.java", "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/b3ebe4265f6abf7934d622c82418073ca783f073/sharding-opentracing/src/main/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHook.java", "sha": "62e6c4c52b40abdd9b3090dcccf02f131f8d39cd", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-opentracing/src/main/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHook.java?ref=b3ebe4265f6abf7934d622c82418073ca783f073", "patch": "@@ -61,7 +61,10 @@ public void start(final RouteUnit routeUnit, final DataSourceMetaData dataSource\n     }\n     \n     private String toString(final List<Object> parameterSets) {\n-        return parameterSets.isEmpty() ? \"\" : String.format(\"[%s]\", Joiner.on(\", \").join(parameterSets));\n+        if (null == parameterSets || parameterSets.isEmpty()) {\n+            return \"\";\n+        }\n+        return String.format(\"[%s]\", Joiner.on(\", \").join(parameterSets));\n     }\n     \n     @Override", "filename": "sharding-opentracing/src/main/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHook.java"}, {"additions": 23, "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/b3ebe4265f6abf7934d622c82418073ca783f073/sharding-opentracing/src/test/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHookTest.java", "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/b3ebe4265f6abf7934d622c82418073ca783f073/sharding-opentracing/src/test/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHookTest.java", "sha": "3e953d72b7a6e2d30e5abfdf8e3dfa7b80e16e79", "changes": 23, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-opentracing/src/test/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHookTest.java?ref=b3ebe4265f6abf7934d622c82418073ca783f073", "patch": "@@ -95,6 +95,29 @@ public void assertExecuteSuccessForTrunkThread() {\n         assertThat(actualTags.get(Tags.DB_STATEMENT.getKey()), CoreMatchers.<Object>is(\"SELECT * FROM success_tbl;\"));\n         assertThat(actualTags.get(ShardingTags.DB_BIND_VARIABLES.getKey()), CoreMatchers.<Object>is(\"[1, 2]\"));\n         verify(activeSpan, times(0)).deactivate();\n+        sqlExecutionHook.start(createRouteUnit(\"success_ds\", \"SELECT * FROM success_tbl;\", null), dataSourceMetaData, true, null);\n+        sqlExecutionHook.finishSuccess();\n+    }\n+\n+    @Test\n+    public void assertExecuteSuccessForTrunkThreadWhenParamsIsNull() {\n+        DataSourceMetaData dataSourceMetaData = mock(DataSourceMetaData.class);\n+        when(dataSourceMetaData.getHostName()).thenReturn(\"localhost\");\n+        when(dataSourceMetaData.getPort()).thenReturn(8888);\n+        sqlExecutionHook.start(createRouteUnit(\"success_ds\", \"SELECT * FROM success_tbl;\", null), dataSourceMetaData, true, null);\n+        sqlExecutionHook.finishSuccess();\n+        MockSpan actual = getActualSpan();\n+        assertThat(actual.operationName(), is(\"/Sharding-Sphere/executeSQL/\"));\n+        Map<String, Object> actualTags = actual.tags();\n+        assertThat(actualTags.get(Tags.COMPONENT.getKey()), CoreMatchers.<Object>is(ShardingTags.COMPONENT_NAME));\n+        assertThat(actualTags.get(Tags.SPAN_KIND.getKey()), CoreMatchers.<Object>is(Tags.SPAN_KIND_CLIENT));\n+        assertThat(actualTags.get(Tags.PEER_HOSTNAME.getKey()), CoreMatchers.<Object>is(\"localhost\"));\n+        assertThat(actualTags.get(Tags.PEER_PORT.getKey()), CoreMatchers.<Object>is(8888));\n+        assertThat(actualTags.get(Tags.DB_TYPE.getKey()), CoreMatchers.<Object>is(\"sql\"));\n+        assertThat(actualTags.get(Tags.DB_INSTANCE.getKey()), CoreMatchers.<Object>is(\"success_ds\"));\n+        assertThat(actualTags.get(Tags.DB_STATEMENT.getKey()), CoreMatchers.<Object>is(\"SELECT * FROM success_tbl;\"));\n+        assertThat(actualTags.get(ShardingTags.DB_BIND_VARIABLES.getKey()), CoreMatchers.<Object>is(\"\"));\n+        verify(activeSpan, times(0)).deactivate();\n     }\n     \n     @Test", "filename": "sharding-opentracing/src/test/java/org/apache/shardingsphere/opentracing/hook/OpenTracingSQLExecutionHookTest.java"}], "repo": "incubator-shardingsphere"}, {"commit": "https://github.com/apache/incubator-shardingsphere/commit/1bac181ff19727317f773293a51ed53195a8644e", "parent": "https://github.com/apache/incubator-shardingsphere/commit/081c00916148844366ab83827af15e5218062896", "message": "fix NPE", "bug_id": "incubator-shardingsphere_8", "file": [{"additions": 1, "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/1bac181ff19727317f773293a51ed53195a8644e/sharding-core/src/main/java/io/shardingsphere/core/parsing/antlr/extractor/statement/handler/RenameTableExtractHandler.java", "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/1bac181ff19727317f773293a51ed53195a8644e/sharding-core/src/main/java/io/shardingsphere/core/parsing/antlr/extractor/statement/handler/RenameTableExtractHandler.java", "sha": "b6276211714bc46708e686759c5637039e386efa", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/src/main/java/io/shardingsphere/core/parsing/antlr/extractor/statement/handler/RenameTableExtractHandler.java?ref=1bac181ff19727317f773293a51ed53195a8644e", "patch": "@@ -50,6 +50,6 @@ public ExtractResult extract(ParserRuleContext ancestorNode) {\n         if (renameTableNode.isPresent() && 0 < renameTableNode.get().getChildCount()) {\n             extractResult.setNewTableName(renameTableNode.get().getChild(renameTableNode.get().getChildCount() - 1).getText());\n         }\n-        return null;\n+        return extractResult;\n     }\n }", "filename": "sharding-core/src/main/java/io/shardingsphere/core/parsing/antlr/extractor/statement/handler/RenameTableExtractHandler.java"}], "repo": "incubator-shardingsphere"}, {"commit": "https://github.com/apache/incubator-shardingsphere/commit/8f4354a2c5b85ca8af7147d3e270d1b3d603e038", "parent": "https://github.com/apache/incubator-shardingsphere/commit/ba168bdc7d56eadd3419f66028ec4248e11cebf4", "message": "add postgreSQL show transaction statement (#1841)\n\n* for expression extract NPE\r\n\r\n* for StackOverflowError\r\n\r\n* add postgreSQL show transaction statement", "bug_id": "incubator-shardingsphere_9", "file": [{"additions": 1, "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/8f4354a2c5b85ca8af7147d3e270d1b3d603e038/sharding-core/src/main/antlr4/imports/PostgreSQLDALStatement.g4", "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/8f4354a2c5b85ca8af7147d3e270d1b3d603e038/sharding-core/src/main/antlr4/imports/PostgreSQLDALStatement.g4", "sha": "e90e482093348e016ee3858158b6a69382ca7a80", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/src/main/antlr4/imports/PostgreSQLDALStatement.g4?ref=8f4354a2c5b85ca8af7147d3e270d1b3d603e038", "patch": "@@ -3,7 +3,7 @@ grammar PostgreSQLDALStatement;\n import PostgreSQLKeyword, Keyword, BaseRule, DataType, Symbol;\n \n show\n-    : SHOW (ALL | ID)\n+    : SHOW (ALL | ID | TRANSACTION ISOLATION LEVEL)\n     ;\n     \n setParam", "filename": "sharding-core/src/main/antlr4/imports/PostgreSQLDALStatement.g4"}, {"additions": 1, "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/8f4354a2c5b85ca8af7147d3e270d1b3d603e038/sharding-sql-test/src/main/resources/antlr_supported_sql/postgre/dal/show.xml", "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/8f4354a2c5b85ca8af7147d3e270d1b3d603e038/sharding-sql-test/src/main/resources/antlr_supported_sql/postgre/dal/show.xml", "sha": "64e4d0f2ad9955f6ecbef348e5e6ba6b4ec2fbc8", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-sql-test/src/main/resources/antlr_supported_sql/postgre/dal/show.xml?ref=8f4354a2c5b85ca8af7147d3e270d1b3d603e038", "patch": "@@ -2,4 +2,5 @@\n <sql-cases db-types=\"PostgreSQL\" namespace=\"postgre.dal.show\">\n     <sql-case id=\"show_all\" value=\"SHOW ALL\" />\n     <sql-case id=\"show_server_version\" value=\"SHOW SERVER_VERSION\" />\n+    <sql-case id=\"show_transaction_isolation_level\" value=\"SHOW TRANSACTION ISOLATION LEVEL\" />\n </sql-cases>", "filename": "sharding-sql-test/src/main/resources/antlr_supported_sql/postgre/dal/show.xml"}], "repo": "incubator-shardingsphere"}, {"commit": "https://github.com/apache/incubator-shardingsphere/commit/db14dbfee81c7e57945bad9479cf60deb2b61efe", "parent": "https://github.com/apache/incubator-shardingsphere/commit/124ac0b761fcf0165a1ccae49f4f50977bfb4f6c", "message": "fix multiple thread read connection throw npe", "bug_id": "incubator-shardingsphere_10", "file": [{"additions": 2, "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/db14dbfee81c7e57945bad9479cf60deb2b61efe/sharding-proxy/src/main/java/io/shardingsphere/proxy/backend/common/jdbc/BackendConnection.java", "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/db14dbfee81c7e57945bad9479cf60deb2b61efe/sharding-proxy/src/main/java/io/shardingsphere/proxy/backend/common/jdbc/BackendConnection.java", "sha": "117e030b7ed05fcb85f5e43c5105a0ba02efef1d", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-proxy/src/main/java/io/shardingsphere/proxy/backend/common/jdbc/BackendConnection.java?ref=db14dbfee81c7e57945bad9479cf60deb2b61efe", "patch": "@@ -23,7 +23,7 @@\n import java.sql.Connection;\n import java.sql.SQLException;\n import java.util.Collection;\n-import java.util.LinkedList;\n+import java.util.concurrent.CopyOnWriteArrayList;\n \n /**\n  * Backend connection.\n@@ -33,7 +33,7 @@\n  */\n public final class BackendConnection implements AutoCloseable {\n     \n-    private final Collection<Connection> cachedConnections = new LinkedList<>();\n+    private final Collection<Connection> cachedConnections = new CopyOnWriteArrayList<>();\n     \n     /**\n      * Get connection of current thread datasource.", "filename": "sharding-proxy/src/main/java/io/shardingsphere/proxy/backend/common/jdbc/BackendConnection.java"}], "repo": "incubator-shardingsphere"}]
