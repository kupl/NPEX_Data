{
    "freemarker_00412e7": {
        "bug_id": "freemarker_00412e7",
        "commit": "https://github.com/apache/freemarker/commit/00412e7ed9340c6356f6887482edc6b3c7fe11fd",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/.classpath",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/.classpath?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": ".classpath",
                "patch": "@@ -4,7 +4,11 @@\n \t<classpathentry kind=\"src\" path=\"src/main/resources\"/>\n \t<classpathentry kind=\"src\" path=\"src/test/java\"/>\n \t<classpathentry kind=\"src\" path=\"src/test/resources\"/>\n-\t<classpathentry kind=\"src\" path=\"build/generated-sources/java\"/>\n+\t<classpathentry kind=\"src\" path=\"build/generated-sources/java\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"ignore_optional_problems\" value=\"true\"/>\n+\t\t</attributes>\n+\t</classpathentry>\n \t<classpathentry kind=\"con\" path=\"org.apache.ivyde.eclipse.cpcontainer.IVYDE_CONTAINER/?project=FreeMarker-master&amp;ivyXmlPath=ivy.xml&amp;confs=IDE&amp;ivySettingsPath=%24%7Bworkspace_loc%3AFreeMarker-master%2Fivysettings.xml%7D&amp;loadSettingsOnDemand=false&amp;propertyFiles=\"/>\n \t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5\"/>\n \t<classpathentry kind=\"output\" path=\".bin/\"/>",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/.classpath",
                "sha": "6308901df6055b38c4a53a8007030b2541df56cb",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/cache/URLTemplateSource.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/cache/URLTemplateSource.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/cache/URLTemplateSource.java",
                "patch": "@@ -55,8 +55,8 @@\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.net.URL;\n import java.net.JarURLConnection;\n+import java.net.URL;\n import java.net.URLConnection;\n \n /**",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/cache/URLTemplateSource.java",
                "sha": "00a3ce87a8bd199fb4654a43d003e7a9ad1ba713",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/AddConcatExpression.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/AddConcatExpression.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 2,
                "filename": "src/main/java/freemarker/core/AddConcatExpression.java",
                "patch": "@@ -52,8 +52,22 @@\n \n package freemarker.core;\n \n-import freemarker.template.*;\n-import java.util.*;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import freemarker.template.SimpleNumber;\n+import freemarker.template.SimpleScalar;\n+import freemarker.template.SimpleSequence;\n+import freemarker.template.TemplateCollectionModel;\n+import freemarker.template.TemplateException;\n+import freemarker.template.TemplateHashModel;\n+import freemarker.template.TemplateHashModelEx;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateModelException;\n+import freemarker.template.TemplateModelIterator;\n+import freemarker.template.TemplateNumberModel;\n+import freemarker.template.TemplateScalarModel;\n+import freemarker.template.TemplateSequenceModel;\n \n /**\n  * An operator for the + operator. Note that this is treated",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/AddConcatExpression.java",
                "sha": "617e39031a57dfbcb6692b29248f37a4c5976369",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/ArithmeticEngine.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/ArithmeticEngine.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 2,
                "filename": "src/main/java/freemarker/core/ArithmeticEngine.java",
                "patch": "@@ -52,11 +52,12 @@\n \n package freemarker.core;\n \n-import java.math.*;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n import java.util.HashMap;\n import java.util.Map;\n \n-import freemarker.template.*;\n+import freemarker.template.TemplateException;\n import freemarker.template.utility.NumberUtil;\n import freemarker.template.utility.OptimizerUtil;\n import freemarker.template.utility.StringUtil;",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/ArithmeticEngine.java",
                "sha": "fce69ea8c4006383723f4facae644af8fa52c5b4",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/ArithmeticExpression.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/ArithmeticExpression.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 28,
                "filename": "src/main/java/freemarker/core/ArithmeticExpression.java",
                "patch": "@@ -52,8 +52,9 @@\n \n package freemarker.core;\n \n-import freemarker.template.*;\n-import freemarker.template.utility.ClassUtil;\n+import freemarker.template.SimpleNumber;\n+import freemarker.template.TemplateException;\n+import freemarker.template.TemplateModel;\n \n /**\n  * An operator for arithmetic operations. Note that the + operator\n@@ -81,42 +82,24 @@\n \n     TemplateModel _getAsTemplateModel(Environment env) throws TemplateException \n     {\n-        TemplateModel leftModel = left.getAsTemplateModel(env);\n-        TemplateModel rightModel = right.getAsTemplateModel(env);\n-        boolean leftIsNumber = (leftModel instanceof TemplateNumberModel);\n-        boolean rightIsNumber = (rightModel instanceof TemplateNumberModel);\n-        boolean bothNumbers = leftIsNumber && rightIsNumber;\n-        if (!bothNumbers) {\n-            String msg = \"Error \" + getStartLocation();\n-            if (!leftIsNumber) {\n-                msg += \":\\nExpected a number, but this evaluated to value s of type \"\n-                        + ClassUtil.getFTLTypeDescription(leftModel) + \":\\n\"\n-                        + left;\n-            }\n-            if (!rightIsNumber) {\n-                msg += \":\\nExpected a number, but this evaluated to value of type \"\n-                       + ClassUtil.getFTLTypeDescription(rightModel) + \":\\n\"\n-                       + right;\n-            }\n-            throw new NonNumericalException(msg, env);\n-        }\n-        Number first = EvaluationUtil.getNumber(leftModel, left, env);\n-        Number second = EvaluationUtil.getNumber(rightModel, right, env);\n+        Number leftNumber = EvaluationUtil.getNumber(left.getAsTemplateModel(env), left, env);\n+        Number rightNumber = EvaluationUtil.getNumber(right.getAsTemplateModel(env), right, env);\n+        \n         ArithmeticEngine ae = \n             env != null \n                 ? env.getArithmeticEngine()\n                 : getTemplate().getArithmeticEngine();\n         switch (operation) {\n             case SUBSTRACTION : \n-                return new SimpleNumber(ae.subtract(first, second));\n+                return new SimpleNumber(ae.subtract(leftNumber, rightNumber));\n             case MULTIPLICATION :\n-                return new SimpleNumber(ae.multiply(first, second));\n+                return new SimpleNumber(ae.multiply(leftNumber, rightNumber));\n             case DIVISION :\n-                return new SimpleNumber(ae.divide(first, second));\n+                return new SimpleNumber(ae.divide(leftNumber, rightNumber));\n             case MODULUS :\n-                return new SimpleNumber(ae.modulus(first, second));\n+                return new SimpleNumber(ae.modulus(leftNumber, rightNumber));\n             default:\n-                throw new TemplateException(\"unknown operation : \" + operation, env);\n+                throw this.newTemplateException(\"Unknown operation : \" + operation);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/ArithmeticExpression.java",
                "sha": "e4aabe408d89ba685bb6636ab53c5285f6159e0e",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/Assignment.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/Assignment.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 12,
                "filename": "src/main/java/freemarker/core/Assignment.java",
                "patch": "@@ -52,7 +52,9 @@\n \n package freemarker.core;\n \n-import freemarker.template.*;\n+import freemarker.template.TemplateException;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateScalarModel;\n \n /**\n  * An instruction that assigns a literal or reference, to a single-identifier\n@@ -87,28 +89,26 @@ void setNamespaceExp(Expression namespaceExp) {\n     }\n \n     void accept(Environment env) throws TemplateException {\n-        TemplateModel tm = value.getAsTemplateModel(env);\n         Environment.Namespace namespace = null;\n         if (namespaceExp != null) {\n-            boolean oops = false;\n+            TemplateModel namespaceTM = namespaceExp.getAsTemplateModel(env);\n             try {\n-                namespace = (Environment.Namespace) namespaceExp.getAsTemplateModel(env);\n-            } catch (ClassCastException cce) {\n-                oops = true;\n+                namespace = (Environment.Namespace) namespaceTM;\n+            } catch (ClassCastException e) {\n+                throw namespaceExp.newUnexpectedTypeException(namespaceTM, \"namespace\");\n             }\n-            if (oops || namespace==null) {\n-                throw new InvalidReferenceException(getStartLocation() + \"\\nInvalid reference to namespace: \" + namespaceExp, env);\n+            if (namespace == null) {\n+                throw namespaceExp.newInvalidReferenceException();\n             }\n         }\n+        \n+        TemplateModel tm = value.getAsTemplateModel(env);\n         if (tm == null) {\n             if (env.isClassicCompatible()) {\n                 tm = TemplateScalarModel.EMPTY_STRING;\n             }\n             else {\n-                String msg = \"Error \" + getStartLocation()\n-                            +\"\\n\" + value + \" is undefined.\"\n-                            +\"\\nIt cannot be assigned to \" + variableName;\n-                throw new InvalidReferenceException(msg, env);\n+                throw value.newInvalidReferenceException();\n             }\n         }\n         if (scope == LOCAL) {\n@@ -122,6 +122,9 @@ void accept(Environment env) throws TemplateException {\n                 else if (scope == NAMESPACE) {\n                     namespace = env.getCurrentNamespace();\n                 }\n+                else {\n+                    throw new RuntimeException(\"Unexpected scope type: \" + scope);\n+                }\n             }\n             namespace.put(variableName, tm);\n         }",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/Assignment.java",
                "sha": "082ba49baa5ec1edb61dc322f4a38c77ac7ca768",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/AssignmentInstruction.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/AssignmentInstruction.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/core/AssignmentInstruction.java",
                "patch": "@@ -53,7 +53,8 @@\n package freemarker.core;\n \n import java.io.IOException;\n-import java.util.*;\n+import java.util.ArrayList;\n+\n import freemarker.template.TemplateException;\n \n /**",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/AssignmentInstruction.java",
                "sha": "3e42be3e40524b2b9b487961180a4ca3d08c1704",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/AttemptBlock.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/AttemptBlock.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/core/AttemptBlock.java",
                "patch": "@@ -54,7 +54,8 @@\n \n import java.io.IOException;\n import java.util.ArrayList;\n-import freemarker.template.*;\n+\n+import freemarker.template.TemplateException;\n \n final class AttemptBlock extends TemplateElement {\n     ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/AttemptBlock.java",
                "sha": "c588154c352949af95e65a7b4393c190c5d74799",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/BlockAssignment.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/BlockAssignment.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 4,
                "filename": "src/main/java/freemarker/core/BlockAssignment.java",
                "patch": "@@ -103,10 +103,7 @@ void accept(Environment env) throws TemplateException, IOException {\n             if(namespaceExp != null) {\n                 nsModel = namespaceExp.getAsTemplateModel(env);\n                 if (!(nsModel instanceof Environment.Namespace)) {\n-                    throw new TemplateException(\n-                        \"namespace parameter does not specify \"\n-                        + \"a namespace. It is a \" \n-                        + nsModel.getClass().getName(), env);\n+                    throw namespaceExp.newUnexpectedTypeException(nsModel, \"namespace\");\n                 }\n             }\n             fnsModel = (Environment.Namespace )nsModel; ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/BlockAssignment.java",
                "sha": "94714e90db5502115628badd316013e209df55e1",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/BooleanExpression.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/BooleanExpression.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/core/BooleanExpression.java",
                "patch": "@@ -52,7 +52,9 @@\n \n package freemarker.core;\n \n-import freemarker.template.*;\n+import freemarker.template.TemplateBooleanModel;\n+import freemarker.template.TemplateException;\n+import freemarker.template.TemplateModel;\n \n abstract class BooleanExpression extends Expression {\n ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/BooleanExpression.java",
                "sha": "f65201678d9e5fb9939673205a853fc97bfc25bb",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/BooleanLiteral.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/BooleanLiteral.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/core/BooleanLiteral.java",
                "patch": "@@ -52,7 +52,8 @@\n \n package freemarker.core;\n \n-import freemarker.template.*;\n+import freemarker.template.TemplateBooleanModel;\n+import freemarker.template.TemplateModel;\n \n final class BooleanLiteral extends Expression {\n ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/BooleanLiteral.java",
                "sha": "2904346514167da6fa851ab15c604f2e79f9ad54",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/BreakInstruction.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/BreakInstruction.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/core/BreakInstruction.java",
                "patch": "@@ -67,7 +67,7 @@ public String getCanonicalForm() {\n     }\n \n     public String getDescription() {\n-        return \"break\" + \" [\" + getStartLocation() + \"]\";\n+        return \"break\";\n     }\n \n     static class Break extends RuntimeException {",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/BreakInstruction.java",
                "sha": "3328a09fc9330d7679f1190c1cd82f39e88f9f65",
                "status": "modified"
            },
            {
                "additions": 43,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/BuiltIn.java",
                "changes": 88,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/BuiltIn.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 45,
                "filename": "src/main/java/freemarker/core/BuiltIn.java",
                "patch": "@@ -387,9 +387,9 @@ TemplateModel _getAsTemplateModel(Environment env)\n                 if(dtype == TemplateDateModel.UNKNOWN || dtype == TemplateDateModel.DATETIME) {\n                     return new SimpleDate(dmodel.getAsDate(), dateType);\n                 }\n-                throw new TemplateException(\n+                throw newTemplateException(\n                     \"Cannot convert \" + TemplateDateModel.TYPE_NAMES.get(dtype)\n-                    + \" into \" + TemplateDateModel.TYPE_NAMES.get(dateType), env);\n+                    + \" into \" + TemplateDateModel.TYPE_NAMES.get(dateType));\n             }\n             // Otherwise, interpret as a string and attempt \n             // to parse it into a date.\n@@ -460,14 +460,14 @@ private Date parse(DateFormat df)\n                     if (df instanceof SimpleDateFormat) {\n                         pattern = ((SimpleDateFormat) df).toPattern();\n                     }\n-                    String mess = \"Error: \" + getStartLocation() + \":\\n\"\n-                                 + \"The string doesn't match the expected date/time format. \"\n-                                 + \"The string to parse was: \" + StringUtil.jQuote(text)\n-                                 + (pattern != null\n-                                         ? \". The expected format was: \"\n-                                           + StringUtil.jQuote(pattern) + \".\"\n-                                         : \"\");\n-                    throw new TemplateModelException(mess, e);\n+                    throw newTemplateModelException(\n+                            \"The string doesn't match the expected date/time format. \"\n+                            + \"The string to parse was: \" + StringUtil.jQuote(text)\n+                            + (pattern != null\n+                                    ? \". The expected format was: \"\n+                                      + StringUtil.jQuote(pattern) + \".\"\n+                                    : \"\")\n+                            + \" The string-to-date converter was created here:\", e);\n                 }\n             }\n         }\n@@ -495,7 +495,7 @@ TemplateModel _getAsTemplateModel(Environment env)\n             if (model instanceof TemplateScalarModel) {\n                 return new SimpleScalar(((TemplateScalarModel) model).getAsString());\n             }\n-            throw target.invalidTypeException(model, env, \"number, date, or string\");\n+            throw target.newUnexpectedTypeException(model, \"number, date, or string\");\n         }\n \n         private static class NumberFormatter\n@@ -733,12 +733,12 @@ TemplateModel _getAsTemplateModel(Environment env)\n             TemplateModel model = target.getAsTemplateModel(env);\n             if (model instanceof TemplateHashModelEx) {\n                 TemplateCollectionModel keys = ((TemplateHashModelEx) model).keys();\n-                assertNonNull(keys, env);\n+                assertNonNull(keys);\n                 if (!(keys instanceof TemplateSequenceModel))\n                     keys = new CollectionAndSequence(keys);\n                 return keys;\n             }\n-            throw target.invalidTypeException(model, env, \"extended hash\");\n+            throw target.newUnexpectedTypeException(model, \"extended hash\");\n         }\n     }\n \n@@ -749,12 +749,12 @@ TemplateModel _getAsTemplateModel(Environment env)\n             TemplateModel model = target.getAsTemplateModel(env);\n             if (model instanceof TemplateHashModelEx) {\n                 TemplateCollectionModel values = ((TemplateHashModelEx) model).values();\n-                assertNonNull(values, env);\n+                assertNonNull(values);\n                 if (!(values instanceof TemplateSequenceModel))\n                     values = new CollectionAndSequence(values);\n                 return values;\n             }\n-            throw target.invalidTypeException(model, env, \"extended hash\");\n+            throw target.newUnexpectedTypeException(model, \"extended hash\");\n         }\n     }\n \n@@ -771,7 +771,7 @@ TemplateModel _getAsTemplateModel(Environment env)\n                 int size = ((TemplateHashModelEx) model).size();\n                 return new SimpleNumber(size);\n             }\n-            throw target.invalidTypeException(model, env, \"extended-hash or sequence\");\n+            throw target.newUnexpectedTypeException(model, \"extended-hash or sequence\");\n         }\n     }\n \n@@ -835,7 +835,7 @@ TemplateModel _getAsTemplateModel(Environment env)\n     static class is_stringBI extends BuiltIn {\n         TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n             TemplateModel tm = target.getAsTemplateModel(env);\n-            target.assertNonNull(tm, env);\n+            target.assertNonNull(tm);\n             return (tm instanceof TemplateScalarModel)  ?\n                 TemplateBooleanModel.TRUE : TemplateBooleanModel.FALSE;\n         }\n@@ -844,7 +844,7 @@ TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n     static class is_numberBI extends BuiltIn {\n         TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n             TemplateModel tm = target.getAsTemplateModel(env);\n-            target.assertNonNull(tm, env);\n+            target.assertNonNull(tm);\n             return (tm instanceof TemplateNumberModel)  ?\n                 TemplateBooleanModel.TRUE : TemplateBooleanModel.FALSE;\n         }\n@@ -853,7 +853,7 @@ TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n     static class is_nodeBI extends BuiltIn {\n         TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n             TemplateModel tm = target.getAsTemplateModel(env);\n-            target.assertNonNull(tm, env);\n+            target.assertNonNull(tm);\n             return (tm instanceof TemplateNodeModel)  ?\n                 TemplateBooleanModel.TRUE : TemplateBooleanModel.FALSE;\n         }\n@@ -862,7 +862,7 @@ TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n     static class is_booleanBI extends BuiltIn {\n         TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n             TemplateModel tm = target.getAsTemplateModel(env);\n-            target.assertNonNull(tm, env);\n+            target.assertNonNull(tm);\n             return (tm instanceof TemplateBooleanModel)  ?\n                 TemplateBooleanModel.TRUE : TemplateBooleanModel.FALSE;\n         }\n@@ -871,7 +871,7 @@ TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n     static class is_dateBI extends BuiltIn {\n         TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n             TemplateModel tm = target.getAsTemplateModel(env);\n-            target.assertNonNull(tm, env);\n+            target.assertNonNull(tm);\n             return (tm instanceof TemplateDateModel)  ?\n                 TemplateBooleanModel.TRUE : TemplateBooleanModel.FALSE;\n         }\n@@ -880,7 +880,7 @@ TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n     static class is_methodBI extends BuiltIn {\n         TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n             TemplateModel tm = target.getAsTemplateModel(env);\n-            target.assertNonNull(tm, env);\n+            target.assertNonNull(tm);\n             return (tm instanceof TemplateMethodModel)  ?\n                 TemplateBooleanModel.TRUE : TemplateBooleanModel.FALSE;\n         }\n@@ -889,7 +889,7 @@ TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n     static class is_macroBI extends BuiltIn {\n         TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n             TemplateModel tm = target.getAsTemplateModel(env);\n-            target.assertNonNull(tm, env);\n+            target.assertNonNull(tm);\n             return (tm instanceof Macro)  ?\n                 TemplateBooleanModel.TRUE : TemplateBooleanModel.FALSE;\n         }\n@@ -898,7 +898,7 @@ TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n     static class is_transformBI extends BuiltIn {\n         TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n             TemplateModel tm = target.getAsTemplateModel(env);\n-            target.assertNonNull(tm, env);\n+            target.assertNonNull(tm);\n             return (tm instanceof TemplateTransformModel)  ?\n                 TemplateBooleanModel.TRUE : TemplateBooleanModel.FALSE;\n         }\n@@ -907,47 +907,47 @@ TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n     static class is_hashBI extends BuiltIn {\n         TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n             TemplateModel tm = target.getAsTemplateModel(env);\n-            target.assertNonNull(tm, env);\n+            target.assertNonNull(tm);\n             return (tm instanceof TemplateHashModel) ? TemplateBooleanModel.TRUE : TemplateBooleanModel.FALSE;\n         }\n     }\n \n     static class is_hash_exBI extends BuiltIn {\n         TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n             TemplateModel tm = target.getAsTemplateModel(env);\n-            target.assertNonNull(tm, env);\n+            target.assertNonNull(tm);\n             return (tm instanceof TemplateHashModelEx) ? TemplateBooleanModel.TRUE : TemplateBooleanModel.FALSE;\n         }\n     }\n \n     static class is_sequenceBI extends BuiltIn {\n         TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n             TemplateModel tm = target.getAsTemplateModel(env);\n-            target.assertNonNull(tm, env);\n+            target.assertNonNull(tm);\n             return (tm instanceof TemplateSequenceModel) ? TemplateBooleanModel.TRUE : TemplateBooleanModel.FALSE;\n         }\n     }\n \n     static class is_collectionBI extends BuiltIn {\n         TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n             TemplateModel tm = target.getAsTemplateModel(env);\n-            target.assertNonNull(tm, env);\n+            target.assertNonNull(tm);\n             return (tm instanceof TemplateCollectionModel) ? TemplateBooleanModel.TRUE : TemplateBooleanModel.FALSE;\n         }\n     }\n \n     static class is_indexableBI extends BuiltIn {\n         TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n             TemplateModel tm = target.getAsTemplateModel(env);\n-            target.assertNonNull(tm, env);\n+            target.assertNonNull(tm);\n             return (tm instanceof TemplateSequenceModel) ? TemplateBooleanModel.TRUE : TemplateBooleanModel.FALSE;\n         }\n     }\n \n     static class is_enumerableBI extends BuiltIn {\n         TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n             TemplateModel tm = target.getAsTemplateModel(env);\n-            target.assertNonNull(tm, env);\n+            target.assertNonNull(tm);\n             return (tm instanceof TemplateSequenceModel || tm instanceof TemplateCollectionModel)  ?\n                 TemplateBooleanModel.TRUE : TemplateBooleanModel.FALSE;\n         }\n@@ -956,7 +956,7 @@ TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n     static class is_directiveBI extends BuiltIn {\n         TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n             TemplateModel tm = target.getAsTemplateModel(env);\n-            target.assertNonNull(tm, env);\n+            target.assertNonNull(tm);\n             return (tm instanceof TemplateTransformModel || tm instanceof Macro || tm instanceof TemplateDirectiveModel) ?\n                 TemplateBooleanModel.TRUE : TemplateBooleanModel.FALSE;\n         }\n@@ -966,7 +966,7 @@ TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n         TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n             TemplateModel tm = target.getAsTemplateModel(env);\n             if (!(tm instanceof Macro)) {\n-                target.invalidTypeException(tm, env, \"macro or function\");\n+                target.newUnexpectedTypeException(tm, \"macro or function\");\n             }\n             return env.getMacroNamespace((Macro) tm);\n         }\n@@ -1033,9 +1033,8 @@ TemplateModel _getAsTemplateModel(Environment env)\n             if (model instanceof TemplateScalarModel) {\n                 return new BIMethod(((TemplateScalarModel) model).getAsString());\n             } else {\n-                throw target.invalidTypeException(\n-                        model, env, \"string\",\n-                        model instanceof TemplateSequenceModel || model instanceof TemplateCollectionModel\n+                throw target.newUnexpectedTypeException(\n+                        model, \"string\", model instanceof TemplateSequenceModel || model instanceof TemplateCollectionModel\n                                 ? \"To find items in sequences/collections (lists and such) you need to use \"\n                                 + \"\\\"?seq_contains\\\" instead.\"\n                                 : null\n@@ -1083,9 +1082,8 @@ TemplateModel _getAsTemplateModel(Environment env)\n             if (model instanceof TemplateScalarModel) {\n                 return new BIMethod(((TemplateScalarModel) model).getAsString());\n             } else {\n-                throw target.invalidTypeException(\n-                        model, env, \"string\",\n-                        model instanceof TemplateSequenceModel || model instanceof TemplateCollectionModel\n+                throw target.newUnexpectedTypeException(\n+                        model, \"string\", model instanceof TemplateSequenceModel || model instanceof TemplateCollectionModel\n                             ? \"To find items in sequences/collections (lists and such) you need to use \"\n                               + \"\\\"?seq_index_of\\\" instead.\"\n                             : null\n@@ -1147,7 +1145,7 @@ TemplateModel _getAsTemplateModel(Environment env)\n             if (model instanceof TemplateScalarModel) {\n                 return new BIMethod(((TemplateScalarModel) model).getAsString());\n             }\n-            throw target.invalidTypeException(model, env, \"string\");\n+            throw target.newUnexpectedTypeException(model, \"string\");\n         }\n \n         private static class BIMethod implements TemplateMethodModelEx {\n@@ -1202,7 +1200,7 @@ TemplateModel _getAsTemplateModel(Environment env)\n             if (model instanceof TemplateScalarModel) {\n                 return new BIMethod(((TemplateScalarModel) model).getAsString());\n             }\n-            throw target.invalidTypeException(model, env, \"string\");\n+            throw target.newUnexpectedTypeException(model, \"string\");\n         }\n \n         private static class BIMethod implements TemplateMethodModelEx {\n@@ -1240,7 +1238,7 @@ TemplateModel _getAsTemplateModel(Environment env)\n             if (model instanceof TemplateScalarModel) {\n                 return new BIMethod(((TemplateScalarModel) model).getAsString());\n             }\n-            throw target.invalidTypeException(model, env, \"string\");\n+            throw target.newUnexpectedTypeException(model, \"string\");\n         }\n \n         private static class BIMethod implements TemplateMethodModelEx {\n@@ -1278,7 +1276,7 @@ TemplateModel _getAsTemplateModel(Environment env)\n             if (model instanceof TemplateScalarModel) {\n                 return new BIMethod(((TemplateScalarModel) model).getAsString());\n             }\n-            throw target.invalidTypeException(model, env, \"string\");\n+            throw target.newUnexpectedTypeException(model, \"string\");\n         }\n \n         private static class BIMethod implements TemplateMethodModel {\n@@ -1315,7 +1313,7 @@ TemplateModel _getAsTemplateModel(Environment env)\n             if (model instanceof TemplateScalarModel) {\n                 return new BIMethod(((TemplateScalarModel) model).getAsString());\n             }\n-            throw target.invalidTypeException(model, env, \"string\");\n+            throw target.newUnexpectedTypeException(model, \"string\");\n         }\n \n         private static class BIMethod implements TemplateMethodModel {\n@@ -1350,7 +1348,7 @@ TemplateModel _getAsTemplateModel(Environment env)\n             if (model instanceof TemplateScalarModel) {\n                 return new BIMethod(((TemplateScalarModel) model).getAsString());\n             }\n-            throw target.invalidTypeException(model, env, \"string\");\n+            throw target.newUnexpectedTypeException(model, \"string\");\n         }\n \n         private static class BIMethod implements TemplateMethodModelEx {\n@@ -1416,7 +1414,7 @@ TemplateModel _getAsTemplateModel(Environment env)\n             if (model instanceof TemplateScalarModel) {\n                 return new BIMethod(((TemplateScalarModel) model).getAsString());\n             }\n-            throw target.invalidTypeException(model, env, \"string\");\n+            throw target.newUnexpectedTypeException(model, \"string\");\n         }\n \n         private static class BIMethod implements TemplateMethodModelEx {",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/BuiltIn.java",
                "sha": "68407818fe1e9db21af242c0c480197bcf0ced59",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/BuiltinVariable.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/BuiltinVariable.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/core/BuiltinVariable.java",
                "patch": "@@ -165,7 +165,7 @@ TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n         if (name == NOW) {\n             return new SimpleDate(new Date(), TemplateDateModel.DATETIME);\n         }\n-        throw new TemplateException(\"Invalid built-in variable: \" + this, env);\n+        throw newTemplateException(\"Invalid built-in variable: \" + this);\n     }\n \n     public String toString() {",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/BuiltinVariable.java",
                "sha": "55f6fea356a1f05003704d4b54c2b5fe134f6523",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/Case.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/Case.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/core/Case.java",
                "patch": "@@ -53,7 +53,8 @@\n package freemarker.core;\n \n import java.io.IOException;\n-import freemarker.template.*;\n+\n+import freemarker.template.TemplateException;\n \n /**\n  * Represents a case in a switch statement.",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/Case.java",
                "sha": "a8e8df524cd5f19940a4c0599136a985d531eaf8",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/CollectionAndSequence.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/CollectionAndSequence.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 2,
                "filename": "src/main/java/freemarker/core/CollectionAndSequence.java",
                "patch": "@@ -52,9 +52,14 @@\n \n package freemarker.core;\n \n-import freemarker.template.*;\n-import java.util.*;\n import java.io.Serializable;\n+import java.util.ArrayList;\n+\n+import freemarker.template.TemplateCollectionModel;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateModelException;\n+import freemarker.template.TemplateModelIterator;\n+import freemarker.template.TemplateSequenceModel;\n \n /**\n  * Add sequence capabilities to an existing collection, or",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/CollectionAndSequence.java",
                "sha": "d3f25cfe435ef1d2947ec9b683ba3274f2294361",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/CompressedBlock.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/CompressedBlock.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 2,
                "filename": "src/main/java/freemarker/core/CompressedBlock.java",
                "patch": "@@ -52,9 +52,10 @@\n \n package freemarker.core;\n \n-import freemarker.template.*;\n+import java.io.IOException;\n+\n+import freemarker.template.TemplateException;\n import freemarker.template.utility.StandardCompress;\n-import java.io.*;\n \n /**\n  * An instruction that reduces all sequences of whitespace to a single",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/CompressedBlock.java",
                "sha": "d601cd6817799df64c7d9d6b08609c46346efc5d",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/ConditionalBlock.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/ConditionalBlock.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/core/ConditionalBlock.java",
                "patch": "@@ -53,7 +53,8 @@\n package freemarker.core;\n \n import java.io.IOException;\n-import freemarker.template.*;\n+\n+import freemarker.template.TemplateException;\n \n /**\n  * An element that represents a conditionally executed block.",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/ConditionalBlock.java",
                "sha": "1fc3b8d3c1611ae83596869c701e1067c7a6fd47",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/Configurable.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/Configurable.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 3,
                "filename": "src/main/java/freemarker/core/Configurable.java",
                "patch": "@@ -55,13 +55,28 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.Writer;\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.TimeZone;\n \n-import freemarker.template.*;\n+import freemarker.ext.beans.BeansWrapper;\n+import freemarker.template.ObjectWrapper;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateException;\n+import freemarker.template.TemplateExceptionHandler;\n import freemarker.template.utility.ClassUtil;\n import freemarker.template.utility.NullArgumentException;\n import freemarker.template.utility.StringUtil;\n-import freemarker.ext.beans.BeansWrapper;\n \n /**\n  * This is a common superclass of {@link freemarker.template.Configuration},",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/Configurable.java",
                "sha": "938accd5d7669633fdca5694e2bcd6fd7e058bc9",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/DateBuiltins.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/DateBuiltins.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 16,
                "filename": "src/main/java/freemarker/core/DateBuiltins.java",
                "patch": "@@ -64,7 +64,6 @@\n import freemarker.template.TemplateModel;\n import freemarker.template.TemplateModelException;\n import freemarker.template.TemplateScalarModel;\n-import freemarker.template.utility.ClassUtil;\n import freemarker.template.utility.DateUtil;\n import freemarker.template.utility.StringUtil;\n import freemarker.template.utility.UnrecognizedTimeZoneException;\n@@ -83,14 +82,10 @@ TemplateModel _getAsTemplateModel(Environment env)\n                 return calculateResult(EvaluationUtil.getDate(tdm, target, env), tdm.getDateType(), env);\n             } else {\n                 if(model == null) {\n-                    throw new InvalidReferenceException(target + \" is undefined.\", env);\n+                    throw target.newInvalidReferenceException();\n+                } else {\n+                    throw target.newUnexpectedTypeException(model, \"date\");\n                 }\n-                throw new NonDateException(\n-                        \"Error \" + target.getStartLocation() + \":\\n\"\n-                        + \"Expected a date (date or time or date-time), but this evaluted to a value of type \"\n-                        + ClassUtil.getFTLTypeDescription(model) + \":\\n\"\n-                        + target,\n-                        env);                \n             }\n         }\n \n@@ -113,15 +108,18 @@ protected AbstractISOBI(String biName,\n             this.accuracy = accuracy;\n         }\n         \n-        protected void checkDateTypeNotUnknown(int dateType, Environment env)\n+        protected void checkDateTypeNotUnknown(int dateType)\n         throws TemplateException {\n             if (dateType == TemplateDateModel.UNKNOWN) {\n-                throw new TemplateException(\n-                        \"Unknown date type: ?\" + biName + \" needs a date value \"\n+                throw target.newTemplateException(\n+                        \"The value of the following has unknown date type, but ?\" + biName + \" needs a date value \"\n                         + \"where it's known if it's a date-only, time-only, or \"\n-                        + \"date+time value. Use ?time, ?date or ?datetime \"\n-                        + \"before ? \" + biName + \" to estabilish that.\",\n-                        env);\n+                        + \"date+time value:\",\n+                        new String[] {\n+                            \"Use ?time, ?date or ?datetime to tell FreeMarker which parts of the date is used.\",\n+                            \"For programmers: Use java.sql.Date/Time/Timestamp instead of java.util.Date in the \"\n+                            + \"data-model to avoid this ambiguity.\"\n+                        });\n             }\n         }\n     }\n@@ -143,7 +141,7 @@ protected void checkDateTypeNotUnknown(int dateType, Environment env)\n         protected TemplateModel calculateResult(\n                 Date date, int dateType, Environment env)\n         throws TemplateException {\n-            checkDateTypeNotUnknown(dateType, env);\n+            checkDateTypeNotUnknown(dateType);\n             return new SimpleScalar(DateUtil.dateToISO8601String(\n                     date,\n                     dateType != TemplateDateModel.TIME,\n@@ -169,7 +167,7 @@ protected TemplateModel calculateResult(\n         protected TemplateModel calculateResult(\n                 Date date, int dateType, Environment env)\n         throws TemplateException {\n-            checkDateTypeNotUnknown(dateType, env);\n+            checkDateTypeNotUnknown(dateType);\n             return new Result(date, dateType, env);\n         }\n         ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/DateBuiltins.java",
                "sha": "342f0240d7e37ce24c61cf8d0981c1610c58d90e",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/DefaultToExpression.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/DefaultToExpression.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/core/DefaultToExpression.java",
                "patch": "@@ -53,7 +53,13 @@\n package freemarker.core;\n \n \n-import freemarker.template.*;\n+import freemarker.template.SimpleCollection;\n+import freemarker.template.TemplateCollectionModel;\n+import freemarker.template.TemplateException;\n+import freemarker.template.TemplateHashModelEx;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateScalarModel;\n+import freemarker.template.TemplateSequenceModel;\n \n class DefaultToExpression extends Expression {\n \t",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/DefaultToExpression.java",
                "sha": "1f46ae0b206146f02ec4991b0b279ace4c6e4982",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/Dot.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/Dot.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/core/Dot.java",
                "patch": "@@ -78,7 +78,7 @@ TemplateModel _getAsTemplateModel(Environment env) throws TemplateException\n         if (leftModel == null && env.isClassicCompatible()) {\n             return null; // ${noSuchVar.foo} has just printed nothing in FM 1.\n         }\n-        throw target.invalidTypeException(leftModel, env, \"hash\");\n+        throw target.newUnexpectedTypeException(leftModel, \"hash\");\n     }\n \n     public String getCanonicalForm() {",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/Dot.java",
                "sha": "7fa801e4839a0d078a63dee11222772e9735d360",
                "status": "modified"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/DynamicKeyName.java",
                "changes": 75,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/DynamicKeyName.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 40,
                "filename": "src/main/java/freemarker/core/DynamicKeyName.java",
                "patch": "@@ -53,7 +53,15 @@\n package freemarker.core;\n \n import java.util.ArrayList;\n-import freemarker.template.*;\n+\n+import freemarker.template.SimpleScalar;\n+import freemarker.template.SimpleSequence;\n+import freemarker.template.TemplateException;\n+import freemarker.template.TemplateHashModel;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateNumberModel;\n+import freemarker.template.TemplateScalarModel;\n+import freemarker.template.TemplateSequenceModel;\n \n /**\n  * A unary operator that uses the string value of an expression as a hash key.\n@@ -76,7 +84,7 @@ TemplateModel _getAsTemplateModel(Environment env) throws TemplateException\n             if (env.isClassicCompatible()) {\n                 return null;\n             } else {\n-                throw target.invalidReferenceException(env);\n+                throw target.newInvalidReferenceException();\n             }\n         }\n         if (nameExpression instanceof Range) {\n@@ -88,7 +96,7 @@ TemplateModel _getAsTemplateModel(Environment env) throws TemplateException\n                 keyModel = TemplateScalarModel.EMPTY_STRING;\n             }\n             else {\n-                nameExpression.assertNonNull(keyModel, env);\n+                nameExpression.assertNonNull(keyModel);\n             }\n         }\n         if (keyModel instanceof TemplateNumberModel) {\n@@ -97,9 +105,9 @@ TemplateModel _getAsTemplateModel(Environment env) throws TemplateException\n         }\n         if (keyModel instanceof TemplateScalarModel) {\n             String key = EvaluationUtil.getString((TemplateScalarModel)keyModel, nameExpression, env);\n-            return dealWithStringKey(targetModel, key, env);\n+            return dealWithStringKey(targetModel, key);\n         }\n-        throw nameExpression.invalidTypeException(keyModel, env, \"number, range, or string\");\n+        throw nameExpression.newUnexpectedTypeException(keyModel, \"number, range, or string\");\n     }\n \n \n@@ -130,21 +138,17 @@ private TemplateModel dealWithNumericalKey(TemplateModel targetModel,\n         }\n         catch(NonStringException e)\n         {\n-            throw target.invalidTypeException(targetModel, env,\n-                    \"sequence or string (or something that's implicitly convertible to string)\");\n+            throw target.newUnexpectedTypeException(targetModel, \"sequence or string (or something that's implicitly convertible to string)\");\n         }\n     }\n \n-\n-    private TemplateModel dealWithStringKey(TemplateModel targetModel, \n-                                            String key,\n-                                            Environment env)\n+    private TemplateModel dealWithStringKey(TemplateModel targetModel, String key)\n         throws TemplateException\n     {\n         if(targetModel instanceof TemplateHashModel) {\n             return((TemplateHashModel) targetModel).get(key);\n         }\n-        throw target.invalidTypeException(targetModel, env, \"hash\");\n+        throw target.newUnexpectedTypeException(targetModel, \"hash\");\n     }\n \n     private TemplateModel dealWithRangeKey(TemplateModel targetModel, \n@@ -162,26 +166,22 @@ private TemplateModel dealWithRangeKey(TemplateModel targetModel,\n             TemplateSequenceModel sequence = (TemplateSequenceModel) targetModel;\n             if (!hasRhs) end = sequence.size() -1;\n             if (start < 0) {\n-                String msg = range.left.getStartLocation() + \"\\nNegative starting index for range, is \" + range;\n-                throw new TemplateException(msg, env);\n+                throw range.left.newTemplateException(\"Negative starting index \" + start + \" for slicing range.\");\n             }\n             if (end < 0) {\n-                String msg = range.left.getStartLocation() + \"\\nNegative ending index for range, is \" + range;\n-                throw new TemplateException(msg, env);\n+                throw range.right.newTemplateException(\"Negative ending index \" + end + \" for slicing range.\");\n             }\n             if (start >= sequence.size()) {\n-                String msg = range.left.getStartLocation() \n-                            + \"\\nLeft side index of range out of bounds, is \" + start\n-                            + \", but the sequence has only \" + sequence.size() + \" element(s) \"\n-                            + \"(note that indices are 0 based, and ranges are inclusive).\";\n-                throw new TemplateException(msg, env);\n+                throw range.left.newTemplateException(\n+                        \"Left side index of range out of bounds, is \" + start\n+                        + \", but the sequence has only \" + sequence.size() + \" element(s) \"\n+                        + \"(note that indices are 0 based, and ranges are inclusive).\");\n             }\n             if (end >= sequence.size()) {\n-                String msg = range.right.getStartLocation() \n-                             + \"\\nRight side index of range out of bounds, is \" + end\n-                             + \", but the sequence has only \" + sequence.size() + \" element(s).\"\n-                             + \"(note that indices are 0 based, and ranges are inclusive).\";\n-                throw new TemplateException(msg, env);\n+                throw range.right.newTemplateException(\n+                        \"Right side index of range out of bounds, is \" + end\n+                        + \", but the sequence has only \" + sequence.size() + \" element(s).\"\n+                        + \"(note that indices are 0 based, and ranges are inclusive).\");\n             }\n             ArrayList list = new ArrayList(1+Math.abs(start-end));\n             if (start>end) {\n@@ -202,36 +202,31 @@ private TemplateModel dealWithRangeKey(TemplateModel targetModel,\n             String s = target.getStringValue(env);\n             if (!hasRhs) end = s.length() -1;\n             if (start < 0) {\n-                String msg = range.left.getStartLocation() + \"\\nNegative starting index for range \" + range + \" : \" + start;\n-                throw new TemplateException(msg, env);\n+                throw range.left.newTemplateException(\"Negative starting index \" + start + \" for slicing range.\");\n             }\n             if (end < 0) {\n-                String msg = range.left.getStartLocation() + \"\\nNegative ending index for range \" + range + \" : \" + end;\n-                throw new TemplateException(msg, env);\n+                throw range.right.newTemplateException(\"Negative ending index \" + end + \" for slicing range.\");\n             }\n             if (start > s.length()) {\n-                String msg = range.left.getStartLocation() \n-                            + \"\\nLeft side of range out of bounds, is: \" + start\n+                String msg = \"Left side of range out of bounds, is: \" + start\n                             + \"\\nbut string \" + targetModel + \" has \" + s.length() + \" elements.\";\n-                throw new TemplateException(msg, env);\n+                throw range.left.newTemplateException(msg);\n             }\n             if (end > s.length()) {\n-                String msg = range.right.getStartLocation() \n-                             + \"\\nRight side of range out of bounds, is: \" + end\n+                String msg = \"Right side of range out of bounds, is: \" + end\n                              + \"\\nbut string \" + targetModel + \" is only \" + s.length() + \" characters.\";\n-                throw new TemplateException(msg, env);\n+                throw range.right.newTemplateException(msg);\n             }\n             try {\n                 return new SimpleScalar(s.substring(start, end+1));\n             } catch (RuntimeException re) {\n-                String msg = \"Error \" + getStartLocation();\n-                throw new TemplateException(msg, re, env);\n+                throw this.newTemplateException(re);\n             }\n         }\n         catch(NonStringException e)\n         {\n-            throw target.invalidTypeException(target.getAsTemplateModel(env), env,\n-                    \"string or sequence (or something implicilty convertible to string)\");\n+            throw target.newUnexpectedTypeException(\n+                    target.getAsTemplateModel(env), MessageUtil.TYPES_USABLE_WHERE_STRING_IS_EXPECTED + \" or sequence\");\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/DynamicKeyName.java",
                "sha": "067f8560d7ac336f05d744dbf1801483859b143b",
                "status": "modified"
            },
            {
                "additions": 78,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/Environment.java",
                "changes": 114,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/Environment.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 36,
                "filename": "src/main/java/freemarker/core/Environment.java",
                "patch": "@@ -52,13 +52,52 @@\n \n package freemarker.core;\n \n-import java.io.*;\n-import java.text.*;\n-import java.util.*;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.text.Collator;\n+import java.text.DateFormat;\n+import java.text.DecimalFormat;\n+import java.text.DecimalFormatSymbols;\n+import java.text.NumberFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.StringTokenizer;\n+import java.util.TimeZone;\n \n import freemarker.ext.beans.BeansWrapper;\n import freemarker.log.Logger;\n-import freemarker.template.*;\n+import freemarker.template.Configuration;\n+import freemarker.template.ObjectWrapper;\n+import freemarker.template.SimpleHash;\n+import freemarker.template.SimpleSequence;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateCollectionModel;\n+import freemarker.template.TemplateDateModel;\n+import freemarker.template.TemplateDirectiveBody;\n+import freemarker.template.TemplateDirectiveModel;\n+import freemarker.template.TemplateException;\n+import freemarker.template.TemplateExceptionHandler;\n+import freemarker.template.TemplateHashModel;\n+import freemarker.template.TemplateHashModelEx;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateModelException;\n+import freemarker.template.TemplateModelIterator;\n+import freemarker.template.TemplateNodeModel;\n+import freemarker.template.TemplateScalarModel;\n+import freemarker.template.TemplateSequenceModel;\n+import freemarker.template.TemplateTransformModel;\n+import freemarker.template.TransformControl;\n import freemarker.template.utility.DateUtil;\n import freemarker.template.utility.DateUtil.DateToISO8601CalendarFactory;\n import freemarker.template.utility.StringUtil;\n@@ -383,7 +422,7 @@ void visit(TemplateElement attemptBlock, TemplateElement recoveryBlock)\n      String getCurrentRecoveredErrorMesssage() throws TemplateException {\n          if(recoveredErrorStack.isEmpty()) {\n              throw new TemplateException(\n-                 \".error is not available outside of a <#recover> block\", this);\n+                 \".error is not available outside of a #recover block\", this);\n          }\n          return (String) recoveredErrorStack.get(recoveredErrorStack.size() -1);\n      }\n@@ -483,35 +522,15 @@ else if (!nodeType.equals(\"pi\")\n                          && !nodeType.equals(\"comment\") \n                          && !nodeType.equals(\"document_type\")) \n                     {\n-                        String nsBit = \"\";\n-                        String ns = node.getNodeNamespace();\n-                        if (ns != null) {\n-                            if (ns.length() >0) {\n-                                nsBit = \" and namespace \" + ns;\n-                            } else {\n-                                nsBit = \" and no namespace\";\n-                            }\n-                        }\n-                        throw new TemplateException(\"No macro or transform defined for node named \"  \n-                                    + node.getNodeName() + nsBit\n-                                    + \", and there is no fallback handler called @\" + nodeType + \" either.\",\n-                                    this);\n+                        throw new TemplateException(\n+                                noNodeHandlerDefinedMessage(node, node.getNodeNamespace(), nodeType),\n+                                this);\n                     }\n                 }\n                 else {\n-                    String nsBit = \"\";\n-                    String ns = node.getNodeNamespace();\n-                    if (ns != null) {\n-                        if (ns.length() >0) {\n-                            nsBit = \" and namespace \" + ns;\n-                        } else {\n-                            nsBit = \" and no namespace\";\n-                        }\n-                    }\n-                    throw new TemplateException(\"No macro or transform defined for node with name \" \n-                                + node.getNodeName() + nsBit \n-                                + \", and there is no macro or transform called @default either.\",\n-                                this);\n+                    throw new TemplateException(\n+                            noNodeHandlerDefinedMessage(node, node.getNodeNamespace(), \"default\"),\n+                            this);\n                 }\n             }\n         } \n@@ -523,6 +542,23 @@ else if (!nodeType.equals(\"pi\")\n             this.nodeNamespaces = prevNodeNamespaces;\n         }\n     }\n+\n+    private String noNodeHandlerDefinedMessage(TemplateNodeModel node, String ns, String nodeType)\n+            throws TemplateModelException {\n+        String nsBit;\n+        if (ns != null) {\n+            if (ns.length() > 0) {\n+                nsBit = \" and namespace \" + ns;\n+            } else {\n+                nsBit = \" and no namespace\";\n+            }\n+        } else {\n+            nsBit = \"\";\n+        }\n+        return \"No macro or directive is defined for node named \"  \n+                + StringUtil.jQuote(node.getNodeName()) + nsBit\n+                + \", and there is no fallback handler called @\" + nodeType + \" either.\";\n+    }\n     \n     void fallback() throws TemplateException, IOException {\n         TemplateModel macroOrTransform = getNodeProcessor(currentNodeName, currentNodeNS, nodeNamespaceIndex);\n@@ -572,8 +608,9 @@ void visit(Macro macro,\n                             ((SimpleHash)unknownVars).put(varName, value);\n                         }\n                     } else {\n-                        String msg = \"Macro \" + macro.getName() + \" has no such argument: \" + varName;\n-                        throw new TemplateException(msg, this);\n+                        throw new TemplateException(\n+                                \"Macro \" + StringUtil.jQuote(macro.getName()) + \" has no such argument: \" + varName,\n+                                this);\n                     }\n                 }\n             }\n@@ -583,8 +620,10 @@ else if (positionalArgs != null) {\n                 String[] argumentNames = macro.getArgumentNamesInternal();\n                 int size = positionalArgs.size();\n                 if (argumentNames.length < size && catchAll == null) {\n-                    throw new TemplateException(\"Macro \" + macro.getName() \n-                      + \" only accepts \" + argumentNames.length + \" parameters.\", this);\n+                    throw new TemplateException(\n+                      \"Macro \" + StringUtil.jQuote(macro.getName()) + \" only accepts \"\n+                      + argumentNames.length + \" parameters.\",\n+                      this);\n                 }\n                 for (int i = 0; i < size; i++) {\n                     Expression argExp = (Expression) positionalArgs.get(i);\n@@ -1438,7 +1477,10 @@ private TemplateModel getNodeProcessor(final String nodeName, final String nsURI\n             try {                                   \n                 ns = (Namespace) nodeNamespaces.get(i);\n             } catch (ClassCastException cce) {\n-                throw new InvalidReferenceException(\"A using clause should contain a sequence of namespaces or strings that indicate the location of importable macro libraries.\", this);\n+                throw new TemplateException(\n+                        \"A \\\"using\\\" clause should contain a sequence of namespaces or strings that indicate the \"\n+                        + \"location of importable macro libraries.\",\n+                        this);\n             }\n             result = getNodeProcessor(ns, nodeName, nsURI);\n             if (result != null) ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/Environment.java",
                "sha": "84201542321b09b5a58421a3314c57b07a05b355",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/EscapeBlock.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/EscapeBlock.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/core/EscapeBlock.java",
                "patch": "@@ -55,7 +55,7 @@\n import java.io.IOException;\n \n import freemarker.core.Expression.ReplacemenetState;\n-import freemarker.template.*;\n+import freemarker.template.TemplateException;\n \n /**\n  * Representation of the compile-time Escape directive.",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/EscapeBlock.java",
                "sha": "23cf91739f12f5b79cb147d232cd5dc9f9b288ac",
                "status": "modified"
            },
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/EvaluationUtil.java",
                "changes": 68,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/EvaluationUtil.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 37,
                "filename": "src/main/java/freemarker/core/EvaluationUtil.java",
                "patch": "@@ -93,12 +93,7 @@ static String getString(TemplateScalarModel model, Expression expr, Environment\n             }\n             else\n             {\n-                throw new TemplateException(\n-                        (expr != null\n-                            ? expr.toString()\n-                            : \"The \" + model.getClass().getName() + \"object \")\n-                        + \" has returned null instead of a String.\",\n-                        env);\n+                throw newModelHasStoredNullException(String.class, model, expr, env);\n             }\n         }\n         return value;\n@@ -121,16 +116,11 @@ static Number getNumber(TemplateModel model, Expression expr, Environment env)\n             return getNumber((TemplateNumberModel)model, expr, env);\n         }\n         else if(model == null) {\n-            throw new InvalidReferenceException(expr + \" is undefined or null.\", env);\n+            throw expr.newInvalidReferenceException();\n         }\n         else\n         {\n-            throw new NonNumericalException(\n-                    \"Error \" + expr.getStartLocation() + \":\\n\"\n-                    + \"Expected a number, but this evaluated to a value of type \"\n-                    + ClassUtil.getFTLTypeDescription(model) + \":\\n\"\n-                    + expr,\n-                    env);\n+            throw expr.newNonNumericalException(model);\n         }\n     }\n \n@@ -141,14 +131,7 @@ static Number getNumber(TemplateNumberModel model, Expression expr, Environment\n         throws TemplateModelException, TemplateException\n     {\n         Number value = model.getAsNumber();\n-        if(value == null) {\n-            throw new TemplateException(\n-                    (expr != null\n-                        ? expr.toString()\n-                        : \"The \" + model.getClass().getName() + \"object \")\n-                    + \" has returned null instead of a number.\",\n-                    env);\n-        }\n+        if(value == null) throw newModelHasStoredNullException(Number.class, model, expr, env);\n         return value;\n     }\n \n@@ -159,17 +142,19 @@ static Date getDate(TemplateDateModel model, Expression expr, Environment env)\n         throws TemplateModelException, TemplateException\n     {\n         Date value = model.getAsDate();\n-        if(value == null) {\n-            throw new TemplateException(\n-                    (expr != null\n-                        ? expr.toString()\n-                        : \"The \" + model.getClass().getName() + \"object \")\n-                    + \" has returned null instead of a date/time value.\",\n-                    env);\n-        }\n+        if(value == null) throw newModelHasStoredNullException(Date.class, model, expr, env);\n         return value;\n     }\n     \n+    /** Handles the buggy case where we have a non-null model, but its wraps a null. */\n+    private static TemplateException newModelHasStoredNullException(\n+            Class expected, TemplateModel tm, Expression expr, Environment env) {\n+        String msg = \"The FreeMarker value exists, but has nothing inside it; the TemplateModel object (class: \"\n+                +  tm.getClass().getName() + \") has returned a null instead of a \" + expected.getName() + \". \"\n+                + \"This is probably a bug in the non-FreeMarker code that builds the data-model.\";\n+        return expr != null ? expr.newTemplateException(msg) : new TemplateException(msg, env);\n+    }\n+    \n     /**\n      * Compares two expressions according the rules of the FTL comparator operators.\n      * \n@@ -238,6 +223,7 @@ static boolean compareLenient(\n             = \"You may use the expression?date, expression?time or expression?date_time to specify the missing \"\n               + \"informaton.\";\n     \n+    // TODO: A lot of errors aren't bound to the left or right expression, so the exceptions will be unbound. Not good.\n     /**\n      * @param leftExp {@code null} is allowed, but may results in less helpful error messages\n      * @param operator one of the {@code COMP_OP_...} constants, like {@link #CMP_OP_EQUALS}.\n@@ -265,7 +251,7 @@ static boolean compare(\n                     return false;\n                 } else {\n                     if (leftExp != null) {\n-                        leftExp.assertNonNull(leftValue, env);\n+                        leftExp.assertNonNull(leftValue);\n                     } else {\n                         throw new TemplateException(\"The left operand of the comparison was undefined or null.\", env);\n                     }\n@@ -281,7 +267,7 @@ static boolean compare(\n                     return false;\n                 } else {\n                     if (rightExp != null) {\n-                        throw rightExp.invalidReferenceException(env);\n+                        throw rightExp.newInvalidReferenceException();\n                     } else {\n                         throw new TemplateException(\"The right operand of the comparison was undefined or null.\", env);\n                     }\n@@ -317,14 +303,22 @@ static boolean compare(\n                         env);\n             }\n             if (leftDateType == TemplateDateModel.UNKNOWN) {\n-                throw new TemplateException(\"The left \" + DATE_OF_THE_COMPARISON_IS_OF_TYPE_UNKNOWN\n-                        + (leftExp != null ? \" \" + USE_DATE_TIME_TYPE_BUILTINS : \"\"),\n-                        env);\n+                if (leftExp != null) {\n+                    leftExp.newTemplateException(\n+                            \"The left \" + DATE_OF_THE_COMPARISON_IS_OF_TYPE_UNKNOWN + \" \" + USE_DATE_TIME_TYPE_BUILTINS);                    \n+                } else {\n+                    throw new TemplateException(\"The left \" + DATE_OF_THE_COMPARISON_IS_OF_TYPE_UNKNOWN,\n+                            env);\n+                }\n             }\n             if (rightDateType == TemplateDateModel.UNKNOWN) {\n-                throw new TemplateException(\"The right \" + DATE_OF_THE_COMPARISON_IS_OF_TYPE_UNKNOWN\n-                        + (rightExp != null ? \" \" + USE_DATE_TIME_TYPE_BUILTINS : \"\"),\n-                        env);\n+                if (rightExp != null) {\n+                    rightExp.newTemplateException(\n+                            \"The right \" + DATE_OF_THE_COMPARISON_IS_OF_TYPE_UNKNOWN + \" \" + USE_DATE_TIME_TYPE_BUILTINS);                    \n+                } else {\n+                    throw new TemplateException(\"The right \" + DATE_OF_THE_COMPARISON_IS_OF_TYPE_UNKNOWN,\n+                            env);\n+                }\n             }\n \n             Date leftDate = EvaluationUtil.getDate(leftDateModel, leftExp, env);",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/EvaluationUtil.java",
                "sha": "cbcf3d689d70ca4dee4cb3a410a17705f6de7319",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/ExistsExpression.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/ExistsExpression.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/core/ExistsExpression.java",
                "patch": "@@ -53,7 +53,9 @@\n \n package freemarker.core;\n \n-import freemarker.template.*;\n+import freemarker.template.TemplateBooleanModel;\n+import freemarker.template.TemplateException;\n+import freemarker.template.TemplateModel;\n \n \n class ExistsExpression extends Expression {",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/ExistsExpression.java",
                "sha": "90afccd66c5544a71097295ad1b8d1f853c280f9",
                "status": "modified"
            },
            {
                "additions": 179,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/Expression.java",
                "changes": 195,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/Expression.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 16,
                "filename": "src/main/java/freemarker/core/Expression.java",
                "patch": "@@ -52,9 +52,20 @@\n \n package freemarker.core;\n \n-import freemarker.template.*;\n-import freemarker.template.utility.ClassUtil;\n import freemarker.ext.beans.BeanModel;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateBooleanModel;\n+import freemarker.template.TemplateCollectionModel;\n+import freemarker.template.TemplateDateModel;\n+import freemarker.template.TemplateException;\n+import freemarker.template.TemplateHashModel;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateModelException;\n+import freemarker.template.TemplateNumberModel;\n+import freemarker.template.TemplateScalarModel;\n+import freemarker.template.TemplateSequenceModel;\n+import freemarker.template.utility.ClassUtil;\n+import freemarker.template.utility.StringUtil;\n \n /**\n  * An abstract class for nodes in the parse tree \n@@ -109,7 +120,7 @@ static String getStringValue(TemplateModel referentModel, Expression exp, Enviro\n             if (env.isClassicCompatible()) {\n                 return \"\";\n             } else {\n-                throw exp.invalidReferenceException(env);\n+                throw exp.newInvalidReferenceException();\n             }\n         } else if (referentModel instanceof TemplateBooleanModel) {\n             // This should be before TemplateScalarModel, but automatic boolean-to-string is only non-error since 2.3.20\n@@ -122,13 +133,7 @@ static String getStringValue(TemplateModel referentModel, Expression exp, Enviro\n                 return env.formatBoolean(booleanValue);\n             }\n         } else {\n-            throw new NonStringException(\n-                    \"Error \" + exp.getStartLocation()\n-                    +\"\\nExpected a \" + MessageUtil.TYPES_AUTOMATICALLY_CONVERTIBLE_TO_STRING\n-                    + \", but this evaluated to a value of type \"\n-                    + ClassUtil.getFTLTypeDescription(referentModel) + \":\\n\"\n-                    + exp,\n-                    env);\n+            throw exp.newNonStringException(referentModel);\n         }\n     }\n \n@@ -163,12 +168,8 @@ boolean isTrue(Environment env) throws TemplateException {\n         if (env.isClassicCompatible()) {\n             return referent != null && !isEmpty(referent);\n         }\n-        assertNonNull(referent, env);\n-        String msg = \"Error \" + getStartLocation()\n-                     + \"\\nExpecting a boolean (true/false) expression here\"\n-                     + \"\\nExpression \" + this + \" does not evaluate to true/false \"\n-                     + \"\\nit is an instance of \" + referent.getClass().getName();\n-        throw new NonBooleanException(msg, env);\n+        assertNonNull(referent);\n+        throw newNonBooleanException(referent);\n     }\n \n     static boolean isEmpty(TemplateModel model) throws TemplateModelException\n@@ -192,4 +193,166 @@ static boolean isEmpty(TemplateModel model) throws TemplateModelException\n             return true;\n         }\n     }\n+    \n+    void assertNonNull(TemplateModel model) throws InvalidReferenceException {\n+        if (model == null) {\n+            throw newInvalidReferenceException();\n+        }\n+    }\n+\n+    TemplateException newTemplateException(Exception cause) {\n+        return newTemplateException(\"Unexpected error: \" + cause, (String) null, cause);\n+    }\n+    \n+    TemplateException newTemplateException(String description) {\n+        return newTemplateException(description, (String) null, null);\n+    }\n+\n+    TemplateException newTemplateException(String description, String[] tips) {\n+        return newTemplateException(description, tips, (Exception) null);\n+    }\n+    \n+    TemplateException newTemplateException(String description, Exception cause) {\n+        return newTemplateException(description, (String) null, cause);\n+    }\n+    \n+    TemplateException newTemplateException(String description, String tip, Exception cause) {\n+        return new TemplateException(\n+                MessageUtil.decorateErrorDescription(description, this, tip),\n+                cause,\n+                Environment.getCurrentEnvironment());\n+    }\n+\n+    TemplateException newTemplateException(String description, String[] tips, Exception cause) {\n+        return new TemplateException(\n+                MessageUtil.decorateErrorDescription(description, this, tips),\n+                cause,\n+                Environment.getCurrentEnvironment());\n+    }\n+    \n+    TemplateModelException newTemplateModelException(String description) {\n+        return newTemplateModelException(description, null, null);\n+    }\n+    \n+    TemplateModelException newTemplateModelException(String description, Exception cause) {\n+        return newTemplateModelException(description, null, cause);\n+    }\n+    \n+    // TODO: The newTemplateModelException-s shouldn't exist at all. TemplateModelException-s should be blamed on\n+    // the expression who has called the failing TM method. Wherever we use these, we blame the wrong expression.\n+    TemplateModelException newTemplateModelException(String description, String tip, Exception cause) {\n+        return new TemplateModelException(\n+                MessageUtil.decorateErrorDescription(description, this, tip),\n+                cause);\n+    }\n+\n+    InvalidReferenceException newInvalidReferenceException() {\n+        return new InvalidReferenceException(\n+                MessageUtil.decorateErrorDescription(\n+                        \"The following has evaluated to null or missing:\",\n+                        this,\n+                        \"If the failing expression is known to be legally null/missing, either specify a default value\"\n+                        + \" with myOptionalVar!myDefault, or use \"\n+                        + StringUtil.encloseAsTag(this.getTemplate(), \"#if myOptionalVar??\") + \"when-present\"\n+                        + StringUtil.encloseAsTag(this.getTemplate(), \"#else\") + \"when-missing\"\n+                        + StringUtil.encloseAsTag(this.getTemplate(), \"/#if\") + \".\"),\n+                    Environment.getCurrentEnvironment());\n+    }\n+    \n+    UnexpectedTypeException newUnexpectedTypeException(TemplateModel model, String expected)\n+    throws TemplateException {\n+        return newUnexpectedTypeException(model, expected, null);\n+    }\n+    \n+    UnexpectedTypeException newUnexpectedTypeException(\n+            TemplateModel model, String expected, String tip)\n+    throws InvalidReferenceException\n+    {\n+        Environment env = Environment.getCurrentEnvironment();\n+        assertNonNull(model);\n+        return new UnexpectedTypeException(\n+                MessageUtil.decorateErrorDescription(\n+                        unexpectedTypeErrorDescription(expected, model),\n+                        this,\n+                        tip),\n+                env);\n+    }\n+    \n+    NonNumericalException newNonNumericalException(TemplateModel model)\n+    throws InvalidReferenceException {\n+        return newNonNumericalException(model, null);\n+    }\n+    \n+    NonNumericalException newNonNumericalException(TemplateModel model, String tip)\n+    throws InvalidReferenceException\n+    {\n+        Environment env = Environment.getCurrentEnvironment();\n+        assertNonNull(model);\n+        return new NonNumericalException(\n+                MessageUtil.decorateErrorDescription(\n+                        unexpectedTypeErrorDescription(\"number\", model),\n+                        this,\n+                        tip),\n+                env);\n+    }\n+\n+    NonNumericalException newMalformedNumberException(String text) {\n+        return new NonNumericalException(\n+                MessageUtil.decorateErrorDescription(\n+                        \"Can't convert this string to number: \" + StringUtil.jQuote(text),\n+                        this),\n+                Environment.getCurrentEnvironment());\n+    }\n+    \n+    NonStringException newNonStringException(TemplateModel model)\n+    throws InvalidReferenceException {\n+        Environment env = Environment.getCurrentEnvironment();\n+        assertNonNull(model);\n+        return new NonStringException(\n+                MessageUtil.decorateErrorDescription(\n+                        unexpectedTypeErrorDescription(MessageUtil.TYPES_USABLE_WHERE_STRING_IS_EXPECTED, model),\n+                        this),\n+                env);\n+    }\n+    \n+    NonDateException newNonDateException(TemplateModel model)\n+    throws InvalidReferenceException {\n+        Environment env = Environment.getCurrentEnvironment();\n+        assertNonNull(model);\n+        return new NonDateException(\n+                MessageUtil.decorateErrorDescription(\n+                        unexpectedTypeErrorDescription(\"date\", model),\n+                        this),\n+                env);\n+    }\n+\n+    NonBooleanException newNonBooleanException(TemplateModel model)\n+    throws InvalidReferenceException {\n+        Environment env = Environment.getCurrentEnvironment();\n+        assertNonNull(model);\n+        return new NonBooleanException(\n+                MessageUtil.decorateErrorDescription(\n+                        unexpectedTypeErrorDescription(\"boolean\", model),\n+                        this),\n+                env);\n+    }\n+\n+    NonBooleanException newNonBooleanException(String actualType)\n+    throws InvalidReferenceException {\n+        return new NonBooleanException(\n+                MessageUtil.decorateErrorDescription(\n+                        unexpectedTypeErrorDescription(\"boolean\", actualType),\n+                        this),\n+                Environment.getCurrentEnvironment());\n+    }\n+    \n+    private static String unexpectedTypeErrorDescription(String expectedType, TemplateModel model) {\n+        return unexpectedTypeErrorDescription(expectedType, ClassUtil.getFTLTypeDescription(model));\n+    }\n+\n+    private static String unexpectedTypeErrorDescription(String expectedType, String actualType) {\n+        return \"Expected a(n) \" + expectedType + \", but this evaluated to a value of type \" \n+                + actualType + \":\";\n+    }\n+    \n }",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/Expression.java",
                "sha": "6dba4a28318904ca4ed78272b45c675cf172fb02",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/FreeMarkerTree.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/FreeMarkerTree.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/core/FreeMarkerTree.java",
                "patch": "@@ -56,11 +56,12 @@\n import java.util.HashMap;\n import java.util.Map;\n \n-import freemarker.template.*;\n import javax.swing.JTree;\n import javax.swing.tree.DefaultTreeModel;\n import javax.swing.tree.TreeNode;\n \n+import freemarker.template.Template;\n+\n /**\n  * Allows exposure of a FreeMarker template's AST as a Swing tree.\n  * @author Attila Szegedi",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/FreeMarkerTree.java",
                "sha": "4764ce0f6a0eaf38899629adbca5120394d54592",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/HashLiteral.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/HashLiteral.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 3,
                "filename": "src/main/java/freemarker/core/HashLiteral.java",
                "patch": "@@ -52,8 +52,15 @@\n \n package freemarker.core;\n \n-import freemarker.template.*;\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.ListIterator;\n+\n+import freemarker.template.SimpleSequence;\n+import freemarker.template.TemplateCollectionModel;\n+import freemarker.template.TemplateException;\n+import freemarker.template.TemplateHashModelEx;\n+import freemarker.template.TemplateModel;\n \n final class HashLiteral extends Expression {\n \n@@ -133,7 +140,7 @@ protected Expression deepCloneWithIdentifierReplaced_inner(\n                 String key = keyExp.getStringValue(env);\n                 TemplateModel value = valExp.getAsTemplateModel(env);\n                 if (env == null || !env.isClassicCompatible()) {\n-                    valExp.assertNonNull(value, env);\n+                    valExp.assertNonNull(value);\n                 }\n                 keyMap.put(key, value);\n                 keyList.add(key);",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/HashLiteral.java",
                "sha": "176aea99deba824e90488e23a7d0192c06b23a01",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/Identifier.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/Identifier.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 3,
                "filename": "src/main/java/freemarker/core/Identifier.java",
                "patch": "@@ -52,7 +52,8 @@\n \n package freemarker.core;\n \n-import freemarker.template.*;\n+import freemarker.template.TemplateException;\n+import freemarker.template.TemplateModel;\n \n /**\n  * A reference to a top-level variable\n@@ -70,9 +71,9 @@ TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n             return env.getVariable(name);\n         } catch (NullPointerException e) {\n             if (env == null) {\n-                throw new TemplateException(\"Variables are not available \"\n+                throw newTemplateException(\"Variables are not available \"\n                 + \"(certainly you are in a parse-time executed directive). The name of the variable \"\n-                + \"you tried to read: \" + name, null);\n+                + \"you tried to read: \" + name);\n             } else {\n                 throw e;\n             }",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/Identifier.java",
                "sha": "6d031ab06ddd2c513f379fc82ef7bbdf3d227af4",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/IfBlock.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/IfBlock.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/core/IfBlock.java",
                "patch": "@@ -52,8 +52,9 @@\n \n package freemarker.core;\n \n-import java.util.ArrayList;\n import java.io.IOException;\n+import java.util.ArrayList;\n+\n import freemarker.template.TemplateException;\n \n /**",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/IfBlock.java",
                "sha": "c7106c17183feda02d1a884eb1450cc086d0eb7f",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/Include.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/Include.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 12,
                "filename": "src/main/java/freemarker/core/Include.java",
                "patch": "@@ -55,7 +55,10 @@\n import java.io.IOException;\n \n import freemarker.cache.TemplateCache;\n-import freemarker.template.*;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateException;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateScalarModel;\n import freemarker.template.utility.StringUtil;\n import freemarker.template.utility.UndeclaredThrowableException;\n \n@@ -126,11 +129,6 @@ else if(parseExp.isLiteral()) {\n \n     void accept(Environment env) throws TemplateException, IOException {\n         String templateNameString = includedTemplateName.getStringValue(env);\n-        if( templateNameString == null ) {\n-            String msg = \"Error \" + getStartLocation()\n-                        + \"The expression \" + includedTemplateName + \" is undefined.\";\n-            throw new InvalidReferenceException(msg, env);\n-        }\n         String enc = encoding;\n         if (encoding == null && encodingExp != null) {\n             enc = encodingExp.getStringValue(env);\n@@ -144,7 +142,7 @@ void accept(Environment env) throws TemplateException, IOException {\n                     parse = false;\n                 }\n                 else {\n-                    parseExp.assertNonNull(tm, env);\n+                    parseExp.assertNonNull(tm);\n                 }\n             }\n             if (tm instanceof TemplateScalarModel) {\n@@ -195,16 +193,15 @@ public String getDescription() {\n         return \"include \" + includedTemplateName;\n     }\n \n-    private boolean getYesNo(String s) throws ParseException {\n+    private boolean getYesNo(String s) throws TemplateException {\n         try {\n            return StringUtil.getYesNo(s);\n         }\n         catch (IllegalArgumentException iae) {\n-            throw new ParseException(\"Error \" + getStartLocation()\n-                 + \"\\nValue of include parse parameter \"\n+            throw parseExp.newTemplateException(\n+                 \"Value of include parse parameter \"\n                  + \"must be boolean or one of these strings: \"\n-                 + \"\\\"n\\\", \\\"no\\\", \\\"f\\\", \\\"false\\\", \\\"y\\\", \\\"yes\\\", \\\"t\\\", \\\"true\\\"\"\n-                 + \"\\nFound: \" + parseExp, parseExp);\n+                 + \"\\\"n\\\", \\\"no\\\", \\\"f\\\", \\\"false\\\", \\\"y\\\", \\\"yes\\\", \\\"t\\\", \\\"true\\\"\");\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/Include.java",
                "sha": "9c8017da6dfb972306c83e2e09dae7c2bc3640f9",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/Internal_CoreAPI.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/Internal_CoreAPI.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/core/Internal_CoreAPI.java",
                "patch": "@@ -19,6 +19,6 @@ private Internal_CoreAPI() { }\n      */\n     public static Set/*<String>*/ getSupportedBuiltInNames() {\n         return Collections.unmodifiableSet(BuiltIn.builtins.keySet());\n-    }    \n+    }\n     \n }",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/Internal_CoreAPI.java",
                "sha": "b625ffefcb310f1ec10f45d31fb288ecacd9dbf9",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/Interpret.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/Interpret.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 12,
                "filename": "src/main/java/freemarker/core/Interpret.java",
                "patch": "@@ -52,9 +52,18 @@\n \n package freemarker.core;\n \n-import java.io.*;\n-import java.util.*;\n-import freemarker.template.*;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.Writer;\n+import java.util.Map;\n+\n+import freemarker.template.Template;\n+import freemarker.template.TemplateException;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateModelException;\n+import freemarker.template.TemplateScalarModel;\n+import freemarker.template.TemplateSequenceModel;\n+import freemarker.template.TemplateTransformModel;\n \n \n /**\n@@ -105,7 +114,7 @@ else if (model instanceof TemplateScalarModel)\n         }\n         else\n         {\n-            throw target.invalidTypeException(model, env, \"sequence or string\");\n+            throw target.newUnexpectedTypeException(model, \"sequence or string\");\n         }\n         String templateSource = sourceExpr.getStringValue(env);\n         Template parentTemplate = env.getTemplate();\n@@ -120,10 +129,10 @@ else if (model instanceof TemplateScalarModel)\n         }\n         catch(IOException e)\n         {\n-            throw new TemplateException(\n-                    \"Error \" + getStartLocation() + \":\\n\"\n-                    + \"\\\"?interpret\\\" has failed with this parsing error:\\n\" + e.getMessage(),\n-                    e, env);\n+            throw newTemplateException(\n+                    \"\\\"?interpret\\\" has failed with this parsing error:\\n\" + e.getMessage()\n+                    + \"\\nThe failed expression:\",\n+                    e);\n         }\n         \n         interpretedTemplate.setLocale(env.getLocale());\n@@ -150,10 +159,9 @@ public Writer getWriter(final Writer out, Map args) throws TemplateModelExceptio\n             }\n             catch(Exception e)\n             {\n-                throw new TemplateModelException(\n-                        \"Error \" + getStartLocation() + \":\\n\"\n-                        + \"Interpreted template has stopped with error:\\n\"\n-                        + e.getMessage(),\n+                throw newTemplateModelException(\n+                        \"Template created with \\\"?interpret\\\" has stopped with error:\\n\" + e.getMessage()\n+                        + \"\\n\\nThe interpreted template was created here:\",\n                         e);\n             }\n     ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/Interpret.java",
                "sha": "dca795eec0569dbffb19c8abca1a85b9711db36f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/InvalidReferenceException.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/InvalidReferenceException.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/core/InvalidReferenceException.java",
                "patch": "@@ -62,10 +62,11 @@\n public class InvalidReferenceException extends TemplateException {\n \n     public InvalidReferenceException(Environment env) {\n-        super(\"invalid reference\", env);\n+        super(\"Invalid reference\", env);\n     }\n \n     public InvalidReferenceException(String description, Environment env) {\n         super(description, env);\n     }\n+    \n }",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/InvalidReferenceException.java",
                "sha": "a3bb41e592265b3292c5f1922095a71d5d88d4cf",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/IteratorBlock.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/IteratorBlock.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 2,
                "filename": "src/main/java/freemarker/core/IteratorBlock.java",
                "patch": "@@ -97,7 +97,7 @@ void accept(Environment env) throws TemplateException, IOException\n                 // Classic behavior of simply ignoring null references.\n                 return;\n             }\n-            listExpression.assertNonNull(baseModel, env);\n+            listExpression.assertNonNull(baseModel);\n         }\n         env.visit(new Context(baseModel));\n     }\n@@ -187,7 +187,7 @@ else if (env.isClassicCompatible()) {\n                 }\n             }\n             else {\n-                throw listExpression.invalidTypeException(list, env, \"collection or sequence\");\n+                throw listExpression.newUnexpectedTypeException(list, \"collection or sequence\");\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/IteratorBlock.java",
                "sha": "a2f1ce25c414e5c50325c8dbeed2d05f3c8484e6",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/LibraryLoad.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/LibraryLoad.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 5,
                "filename": "src/main/java/freemarker/core/LibraryLoad.java",
                "patch": "@@ -90,11 +90,6 @@\n \n     void accept(Environment env) throws TemplateException, IOException {\n         String templateNameString = templateName.getStringValue(env);\n-        if( templateNameString == null ) {\n-            String msg = \"Error \" + getStartLocation()\n-                        + \"The expression \" + templateName + \" is undefined.\";\n-            throw new InvalidReferenceException(msg, env);\n-        }\n         Template importedTemplate;\n         try {\n             if(!env.isClassicCompatible()) {",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/LibraryLoad.java",
                "sha": "fa65e725e0f1c0aabad0606a39f254d37cc79e7b",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/ListLiteral.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/ListLiteral.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 4,
                "filename": "src/main/java/freemarker/core/ListLiteral.java",
                "patch": "@@ -52,14 +52,18 @@\n \n package freemarker.core;\n \n+import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n import java.util.ListIterator;\n-import freemarker.template.*;\n+\n+import freemarker.template.SimpleSequence;\n+import freemarker.template.TemplateException;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateSequenceModel;\n import freemarker.template.utility.Collections12;\n-import java.io.IOException;\n \n final class ListLiteral extends Expression {\n \n@@ -76,7 +80,7 @@ TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n             Expression exp = (Expression) it.next();\n             TemplateModel tm = exp.getAsTemplateModel(env);\n             if (env == null || !env.isClassicCompatible()) {            \n-                exp.assertNonNull(tm, env);\n+                exp.assertNonNull(tm);\n             }\n             list.add(tm);\n         }\n@@ -171,7 +175,8 @@ TemplateSequenceModel evaluateStringsToNamespaces(Environment env) throws Templa\n                     result.add(ns);\n                 } \n                 catch (IOException ioe) {\n-                    throw new TemplateException(\"Could not import library '\" + s + \"', \" + ioe.getMessage(), env); \n+                    throw ((Expression) values.get(i)).newTemplateException(\n+                            \"Could not import library '\" + s + \"', \" + ioe.getMessage()); \n                 }\n             }\n             else {",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/ListLiteral.java",
                "sha": "fdb0a02edf0e331cd8c80925f225b171a59bd2d7",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/LocalContext.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/LocalContext.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/core/LocalContext.java",
                "patch": "@@ -54,7 +54,8 @@\n \n import java.util.Collection;\n \n-import freemarker.template.*;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateModelException;\n \n /**\n   * An interface that represents a local context. This is used as the abstraction for  ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/LocalContext.java",
                "sha": "25ed631f9e11be09aabecdd38adcea4bf73b35e8",
                "status": "modified"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/Macro.java",
                "changes": 51,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/Macro.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 19,
                "filename": "src/main/java/freemarker/core/Macro.java",
                "patch": "@@ -53,8 +53,17 @@\n package freemarker.core;\n \n import java.io.IOException;\n-import java.util.*;\n-import freemarker.template.*;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+\n+import freemarker.template.TemplateException;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateModelException;\n+import freemarker.template.TemplateModelIterator;\n import freemarker.template.utility.StringUtil;\n \n /**\n@@ -209,23 +218,27 @@ void sanityCheck(Environment env) throws TemplateException {\n                             }\n                         }\n                         else if (!env.isClassicCompatible()) {\n-                            throw new TemplateException(\n-                                    \"When calling macro \" + StringUtil.jQuote(name) \n+                            String desc = \"When calling macro \" + StringUtil.jQuote(name) \n                                     + \", required parameter \" + StringUtil.jQuote(argName)\n-                                    + \" (parameter #\" + (i + 1) + \") was \"\n-                                    + (localVars.containsKey(argName)\n-                                            ? \"specified, but had null/missing value.\\n\"\n-                                              + \"(Tip: If the parameter value expression on the caller side is known \"\n-                                              + \"to be legally null/missing, you may want to specify a default value \"\n-                                              + \"for it with the \\\"!\\\" operator, like \"\n-                                              + \"paramValueExpression!defaultValueExpression.)\"\n-                                            : \"not specified.\\n\"\n-                                    \t\t  + \"(Tip: If the omission was deliberate, you may consider making \"\n-                                              + \"the parameter optional in the macro by specifying a default value for \"\n-                                              + \"it, like \"\n-                                              + StringUtil.encloseAsTag(\n-                                                      getTemplate(), \"#macro myMacro paramName=defaultExpr\")\n-                                              + \".)\"),\n+                                    + \" (parameter #\" + (i + 1) + \") was \";\n+                            String hint;\n+                            if (localVars.containsKey(argName)) {\n+                                desc += \"specified, but had null/missing value.\";\n+                                hint = \"If the parameter value expression on the caller side is known \"\n+                                        + \"to be legally null/missing, you may want to specify a default value \"\n+                                        + \"for it with the \\\"!\\\" operator, like \"\n+                                        + \"paramValueExpression!defaultValueExpression.\";\n+                            } else {\n+                                desc += \"not specified.\";\n+                                hint = \"If the omission was deliberate, you may consider making \"\n+                                        + \"the parameter optional in the macro by specifying a default value for \"\n+                                        + \"it, like \"\n+                                        + StringUtil.encloseAsTag(\n+                                                getTemplate(), \"#macro myMacro paramName=defaultExpr\")\n+                                        + \")\";\n+                            }\n+                            throw new TemplateException(\n+                                    MessageUtil.decorateErrorDescription(desc, null, hint),\n                                     env);\n                         }\n                     }\n@@ -236,7 +249,7 @@ else if (!env.isClassicCompatible()) {\n                 if(firstReferenceException != null) {\n                     throw firstReferenceException;\n                 } else if (!env.isClassicCompatible()) {\n-                    firstUnresolvedExpression.invalidReferenceException(env);\n+                    firstUnresolvedExpression.newInvalidReferenceException();\n                 }\n             }\n         }",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/Macro.java",
                "sha": "7046c76ea5311846e8dee645381a296c9a7e5c8d",
                "status": "modified"
            },
            {
                "additions": 60,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/MessageUtil.java",
                "changes": 61,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/MessageUtil.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/core/MessageUtil.java",
                "patch": "@@ -9,7 +9,7 @@\n  */\n class MessageUtil {\n \n-    static final String TYPES_AUTOMATICALLY_CONVERTIBLE_TO_STRING\n+    static final String TYPES_USABLE_WHERE_STRING_IS_EXPECTED\n             = \"string or something automatically convertible to string (number, date or boolean)\";\n \n     private MessageUtil() { }\n@@ -49,5 +49,64 @@ private static String formatLocation(String preposition, String templateName, in\n         return \"in \" + templateDesc + \" \"\n               + preposition + \" line \" + line + \", column \" + column;\n     }\n+\n+    static String decorateErrorDescription(String description, String tip) {\n+        return decorateErrorDescription(description, null, tip);\n+    }\n+\n+    static String decorateErrorDescription(String description, String[] tip) {\n+        return decorateErrorDescription(description, null, tip);\n+    }\n+\n+    static String decorateErrorDescription(String description, Expression blamedExpr) {\n+        return decorateErrorDescription(description, blamedExpr, (String[]) null);\n+    }\n+\n+    static String decorateErrorDescription(String description, Expression blamedExpr, String tip) {\n+        return decorateErrorDescription(description, blamedExpr, tip != null ? new String[] { tip } : null);\n+    }\n+    \n+    static String decorateErrorDescription(String description, Expression blamedExpr, String[] tips) {\n+        if (blamedExpr != null || tips != null) {\n+            StringBuffer sb = new StringBuffer();\n+            sb.append(description);\n+            if (blamedExpr != null) {\n+                // Right-trim:\n+                for (int idx = sb.length() - 1; idx >= 0 && Character.isWhitespace(sb.charAt(idx)); idx --) {\n+                    sb.deleteCharAt(idx);\n+                }\n+                \n+                char lastChar = sb.length() > 0 ? (sb.charAt(sb.length() - 1)) : 0;\n+                if (lastChar == ':') {\n+                    sb.append('\\n');\n+                } else {\n+                    if (lastChar == '.' || lastChar == '?' || lastChar == '!') {\n+                        sb.append(' ');\n+                    } else if (lastChar != 0) {\n+                        sb.append('\\n');\n+                    }\n+                    sb.append(\"The blamed expression:\\n\");\n+                }\n+                sb.append(\"==> \");\n+                sb.append(blamedExpr);\n+                sb.append(\"  [\");\n+                sb.append(blamedExpr.getStartLocation());\n+                sb.append(']');\n+            }\n+            if (tips != null && tips.length > 0) {\n+                sb.append(\"\\n\");\n+                sb.append(\"\\n\");\n+                for (int i = 0; i < tips.length; i++) {\n+                    if (i != 0) sb.append('\\n');\n+                    sb.append(\"Tip: \");\n+                    sb.append(tips[i]);\n+                }\n+                sb.append(\"\");\n+            }\n+            return sb.toString();\n+        } else {\n+            return  description;\n+        }\n+    }\n     \n }",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/MessageUtil.java",
                "sha": "d8c76c855dc764ac7228b15518a4ce209e88f9cb",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/MethodCall.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/MethodCall.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 5,
                "filename": "src/main/java/freemarker/core/MethodCall.java",
                "patch": "@@ -56,11 +56,15 @@\n \n package freemarker.core;\n \n+import java.io.IOException;\n+import java.io.Writer;\n import java.util.ArrayList;\n import java.util.List;\n-import java.io.Writer;\n-import freemarker.template.*;\n-import java.io.IOException;\n+\n+import freemarker.template.TemplateException;\n+import freemarker.template.TemplateMethodModel;\n+import freemarker.template.TemplateMethodModelEx;\n+import freemarker.template.TemplateModel;\n \n \n /**\n@@ -97,7 +101,7 @@ else if (targetModel instanceof Macro) {\n             Macro func = (Macro) targetModel;\n             env.setLastReturnValue(null);\n             if (!func.isFunction) {\n-                throw new TemplateException(\"A macro cannot be called in an expression.\", env);\n+                throw newTemplateException(\"A macro cannot be called in an expression.\");\n             }\n             Writer prevOut = env.getOut();\n             try {\n@@ -111,7 +115,7 @@ else if (targetModel instanceof Macro) {\n             return env.getLastReturnValue();\n         }\n         else {\n-            throw target.invalidTypeException(targetModel, env, \"method\");\n+            throw target.newUnexpectedTypeException(targetModel, \"method\");\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/MethodCall.java",
                "sha": "083d47a6e2e93d033a348283cbacf453ffba409e",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/MixedContent.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/MixedContent.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/core/MixedContent.java",
                "patch": "@@ -52,8 +52,9 @@\n \n package freemarker.core;\n \n-import java.util.*;\n import java.io.IOException;\n+import java.util.ArrayList;\n+\n import freemarker.template.TemplateException;\n \n /**",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/MixedContent.java",
                "sha": "18e56b2813a8adc059086b0c936efacb02e945bf",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/NewBI.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/NewBI.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 8,
                "filename": "src/main/java/freemarker/core/NewBI.java",
                "patch": "@@ -92,31 +92,30 @@ TemplateModel _getAsTemplateModel(Environment env)\n             classname = ((TemplateScalarModel) tm).getAsString();\n         } \n         catch (ClassCastException cce) {\n-            target.invalidTypeException(tm, env, \"string\");\n+            target.newUnexpectedTypeException(tm, \"string\");\n         } \n         catch (NullPointerException npe) {\n-            throw new InvalidReferenceException(getStartLocation() \n-                + \"\\nCould not resolve expression: \" + target, env);\n+            throw target.newInvalidReferenceException();\n         }\n-        return new ConstructorFunction(classname, env, target.getTemplate());\n+        return new ConstructorFunction(classname, env, this, target.getTemplate());\n     }\n \n     static class ConstructorFunction implements TemplateMethodModelEx {\n \n         private final Class cl;\n         private final Environment env;\n         \n-        public ConstructorFunction(String classname, Environment env, Template template) throws TemplateException {\n+        public ConstructorFunction(String classname, Environment env, Expression bi, Template template) throws TemplateException {\n             this.env = env;\n             cl = env.getNewBuiltinClassResolver().resolve(classname, env, template);\n             if (!TM_CLASS.isAssignableFrom(cl)) {\n-                throw new TemplateException(\"Class \" + cl.getName() + \" does not implement freemarker.template.TemplateModel\", env);\n+                throw bi.newTemplateException(\"Class \" + cl.getName() + \" does not implement freemarker.template.TemplateModel\");\n             }\n             if (BEAN_MODEL_CLASS.isAssignableFrom(cl)) {\n-                throw new TemplateException(\"Bean Models cannot be instantiated using the ?new built-in\", env);\n+                throw bi.newTemplateException(\"Bean Models cannot be instantiated using the ?new built-in\");\n             }\n             if (JYTHON_MODEL_CLASS != null && JYTHON_MODEL_CLASS.isAssignableFrom(cl)) {\n-                throw new TemplateException(\"Jython Models cannot be instantiated using the ?new built-in\", env);\n+                throw bi.newTemplateException(\"Jython Models cannot be instantiated using the ?new built-in\");\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/NewBI.java",
                "sha": "a685b0000a12675fa5639f7e37e843026c632593",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/NoEscapeBlock.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/NoEscapeBlock.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 0,
                "filename": "src/main/java/freemarker/core/NoEscapeBlock.java",
                "patch": "@@ -53,6 +53,7 @@\n package freemarker.core;\n \n import java.io.IOException;\n+\n import freemarker.template.TemplateException;\n \n /**",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/NoEscapeBlock.java",
                "sha": "557a079baee922315d861f413a86dd2b59fc4ec4",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/NodeBuiltins.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/NodeBuiltins.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 3,
                "filename": "src/main/java/freemarker/core/NodeBuiltins.java",
                "patch": "@@ -52,10 +52,17 @@\n \n package freemarker.core;\n \n-import freemarker.template.*;\n-import freemarker.template.utility.StringUtil;\n import java.util.List;\n \n+import freemarker.template.SimpleScalar;\n+import freemarker.template.SimpleSequence;\n+import freemarker.template.TemplateException;\n+import freemarker.template.TemplateMethodModel;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateModelException;\n+import freemarker.template.TemplateNodeModel;\n+import freemarker.template.utility.StringUtil;\n+\n /**\n  * A holder for builtins that operate on TemplateNodeModels.\n  */\n@@ -68,7 +75,7 @@ TemplateModel _getAsTemplateModel(Environment env)\n         {\n             TemplateModel model = target.getAsTemplateModel(env);\n             if (!(model instanceof TemplateNodeModel)) {\n-                throw target.invalidTypeException(model, env, \"node\");\n+                throw target.newUnexpectedTypeException(model, \"node\");\n             }\n             return calculateResult((TemplateNodeModel) model, env);\n         }",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/NodeBuiltins.java",
                "sha": "7e1d409c409d6d10efa7eb325f624ac0d88a88c1",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/NonBooleanException.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/NonBooleanException.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 2,
                "filename": "src/main/java/freemarker/core/NonBooleanException.java",
                "patch": "@@ -55,12 +55,12 @@\n import freemarker.template.TemplateException;\n \n /**\n- * A subclass of TemplateException that \n+ * A {@link TemplateException} that \n  * indicates that the internals expected an expression\n  * to evaluate to a boolean value and it didn't.\n  * @author <a href=\"mailto:jon@revusky.com\">Jonathan Revusky</a>\n  */\n-public class NonBooleanException extends TemplateException {\n+public class NonBooleanException extends UnexpectedTypeException {\n \n     public NonBooleanException(Environment env) {\n         super(\"expecting boolean value here\", env);\n@@ -69,4 +69,5 @@ public NonBooleanException(Environment env) {\n     public NonBooleanException(String description, Environment env) {\n         super(description, env);\n     }\n+    \n }",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/NonBooleanException.java",
                "sha": "783a8ed7f84e21d699afe5e52f9181bd2ceb19cf",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/NonDateException.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/NonDateException.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 2,
                "filename": "src/main/java/freemarker/core/NonDateException.java",
                "patch": "@@ -52,12 +52,11 @@\n \n package freemarker.core;\n \n-import freemarker.template.TemplateException;\n \n /**\n  * Indicates that a date, time or date+time was expected.\n  */\n-public class NonDateException extends TemplateException {\n+public class NonDateException extends UnexpectedTypeException {\n \n     public NonDateException(Environment env) {\n         super(\"expecting date/time value here\", env);\n@@ -66,4 +65,5 @@ public NonDateException(Environment env) {\n     public NonDateException(String description, Environment env) {\n         super(description, env);\n     }\n+    \n }",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/NonDateException.java",
                "sha": "d33d14deed2295210ba6f180b514e114112053f4",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/NonNumericalException.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/NonNumericalException.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 3,
                "filename": "src/main/java/freemarker/core/NonNumericalException.java",
                "patch": "@@ -55,18 +55,19 @@\n import freemarker.template.TemplateException;\n \n /**\n- * A subclass of TemplateException that \n+ * A {@link TemplateException} that \n  * indicates that the internals expected an expression\n  * to evaluate to a numerical value and it didn't.\n  * @author <a href=\"mailto:jon@revusky.com\">Jonathan Revusky</a>\n  */\n-public class NonNumericalException extends TemplateException {\n+public class NonNumericalException extends UnexpectedTypeException {\n \n     public NonNumericalException(Environment env) {\n-        super(\"expecting numerical value here\", env);\n+        super(\"Expecting numerical value here\", env);\n     }\n \n     public NonNumericalException(String description, Environment env) {\n         super(description, env);\n     }\n+    \n }",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/NonNumericalException.java",
                "sha": "6838bdd1811a0d54f944bf74f7916799365085c8",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/NonStringException.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/NonStringException.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 3,
                "filename": "src/main/java/freemarker/core/NonStringException.java",
                "patch": "@@ -55,18 +55,19 @@\n import freemarker.template.TemplateException;\n \n /**\n- * A subclass of TemplateException that \n+ * A {@link TemplateException} that \n  * indicates that the internals expected an expression\n  * to evaluate to a string or numeric value and it didn't.\n  * @author Attila Szegedi\n  */\n-public class NonStringException extends TemplateException {\n+public class NonStringException extends UnexpectedTypeException {\n \n     public NonStringException(Environment env) {\n-        super(\"expecting string or numerical value here\", env);\n+        super(\"Expecting \" + MessageUtil.TYPES_USABLE_WHERE_STRING_IS_EXPECTED + \" value here\", env);\n     }\n \n     public NonStringException(String description, Environment env) {\n         super(description, env);\n     }\n+    \n }",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/NonStringException.java",
                "sha": "27e47e63e31a38f8fb4799042f117cfa3af1c251",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/NumberLiteral.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/NumberLiteral.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/core/NumberLiteral.java",
                "patch": "@@ -52,7 +52,9 @@\n \n package freemarker.core;\n \n-import freemarker.template.*;\n+import freemarker.template.SimpleNumber;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateNumberModel;\n \n /**\n  * A simple implementation of the <tt>TemplateNumberModel</tt>",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/NumberLiteral.java",
                "sha": "6788d899f143b324c3ef1fd9e2cb52c5d272085f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/NumericalOutput.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/NumericalOutput.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/core/NumericalOutput.java",
                "patch": "@@ -55,7 +55,8 @@\n import java.io.IOException;\n import java.text.NumberFormat;\n import java.util.Locale;\n-import freemarker.template.*;\n+\n+import freemarker.template.TemplateException;\n \n /**\n  * An instruction that outputs the value of a numerical expression.",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/NumericalOutput.java",
                "sha": "fc87378e4e8d19388cf62b38f5d6a60266354bb2",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/NumericalRange.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/NumericalRange.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/core/NumericalRange.java",
                "patch": "@@ -52,7 +52,10 @@\n \n package freemarker.core;\n \n-import freemarker.template.*;\n+import freemarker.template.SimpleNumber;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateModelException;\n+import freemarker.template.TemplateSequenceModel;\n \n /**\n  * A class that represents a Range between two integers.",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/NumericalRange.java",
                "sha": "e912b13aafb8c96027c4d363282bb9f059f00271",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/ParentheticalExpression.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/ParentheticalExpression.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/core/ParentheticalExpression.java",
                "patch": "@@ -52,7 +52,8 @@\n \n package freemarker.core;\n \n-import freemarker.template.*;\n+import freemarker.template.TemplateException;\n+import freemarker.template.TemplateModel;\n \n final class ParentheticalExpression extends Expression {\n ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/ParentheticalExpression.java",
                "sha": "0d724610d72c19866ea3c01bff724f9ab3f4bb60",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/ParseException.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/ParseException.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 19,
                "filename": "src/main/java/freemarker/core/ParseException.java",
                "patch": "@@ -202,7 +202,7 @@ private ParseException(String details, String templateName, int lineNumber, int\n   }\n   \n   private static String formatMessage(String details, String templateName, int lineNumber, int columnNumber) {\n-      return \"Error \"\n+      return \"Parsing error \"\n               + MessageUtil.formatLocationForSimpleParsingError(templateName, lineNumber, columnNumber)\n               + \":\\n\" + details;      \n   }\n@@ -236,19 +236,20 @@ public String getMessage() {\n         String details = getCustomUnexpectedTokenDetails();\n         if (details == null) {\n             // The default JavaCC message generation stuff follows.\n-            String expected = \"\";\n+            StringBuffer expected = new StringBuffer();\n             int maxSize = 0;\n             for (int i = 0; i < expectedTokenSequences.length; i++) {\n+              if (i != 0) {\n+                  expected.append(eol);\n+              }\n+              expected.append(\"    \");\n               if (maxSize < expectedTokenSequences[i].length) {\n                 maxSize = expectedTokenSequences[i].length;\n               }\n               for (int j = 0; j < expectedTokenSequences[i].length; j++) {\n-                expected += tokenImage[expectedTokenSequences[i][j]] + \" \";\n-              }\n-              if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\n-                expected += \"...\";\n+                if (j != 0) expected.append(' ');\n+                expected.append(tokenImage[expectedTokenSequences[i][j]]);\n               }\n-              expected += eol + \"    \";\n             }\n             details = \"Encountered \\\"\";\n             Token tok = currentToken.next;\n@@ -264,9 +265,9 @@ public String getMessage() {\n             details += \"\\\"\" + eol;\n             \n             if (expectedTokenSequences.length == 1) {\n-              details += \"Was expecting:\" + eol + \"    \";\n+              details += \"Was expecting:\" + eol;\n             } else {\n-              details += \"Was expecting one of:\" + eol + \"    \";\n+              details += \"Was expecting one of:\" + eol;\n             }\n             details += expected;\n         }\n@@ -310,34 +311,34 @@ private String getCustomUnexpectedTokenDetails() {\n               int[] sequence = expectedTokenSequences[i];\n               switch (sequence[0]) {\n                   case END_FOREACH :\n-                      buf.append(\"Unclosed \\\"foreach\\\" directive.\\n\");\n+                      buf.append(\"Unclosed \\\"foreach\\\" directive.\");\n                       break;\n                   case END_LIST :\n-                      buf.append(\"Unclosed \\\"list\\\" directive.\\n\");\n+                      buf.append(\"Unclosed \\\"list\\\" directive.\");\n                       break;\n                   case END_SWITCH :\n-                      buf.append(\"Unclosed \\\"switch\\\" directive.\\n\");\n+                      buf.append(\"Unclosed \\\"switch\\\" directive.\");\n                       break;\n                   case END_IF :\n-                      buf.append(\"Unclosed \\\"if\\\" directive.\\n\");\n+                      buf.append(\"Unclosed \\\"if\\\" directive.\");\n                       break;\n                   case END_COMPRESS :\n-                      buf.append(\"Unclosed \\\"compress\\\" directive.\\n\");\n+                      buf.append(\"Unclosed \\\"compress\\\" directive.\");\n                       break;\n                   case END_MACRO :\n-                      buf.append(\"Unclosed \\\"macro\\\" directive.\\n\");\n+                      buf.append(\"Unclosed \\\"macro\\\" directive.\");\n                       break;\n                   case END_FUNCTION :\n-                      buf.append(\"Unclosed \\\"function\\\" directive.\\n\");\n+                      buf.append(\"Unclosed \\\"function\\\" directive.\");\n                       break;\n                   case END_TRANSFORM :\n-                      buf.append(\"Unclosed \\\"transform\\\" directive.\\n\");\n+                      buf.append(\"Unclosed \\\"transform\\\" directive.\");\n                       break;\n                   case END_ESCAPE :\n-                      buf.append(\"Unclosed \\\"escape\\\" directive.\\n\");\n+                      buf.append(\"Unclosed \\\"escape\\\" directive.\");\n                       break;\n                   case END_NOESCAPE :\n-                      buf.append(\"Unclosed \\\"noescape\\\" directive.\\n\");\n+                      buf.append(\"Unclosed \\\"noescape\\\" directive.\");\n                       break;\n               }\n           }",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/ParseException.java",
                "sha": "9757899d6f2997446db71580b688f97172898030",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/PropertySetting.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/PropertySetting.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 5,
                "filename": "src/main/java/freemarker/core/PropertySetting.java",
                "patch": "@@ -78,6 +78,7 @@ void setLocation(Template template, int beginColumn, int beginLine, int endColum\n         ParseException\n     {\n         super.setLocation(template, beginColumn, beginLine, endColumn, endLine);\n+        \n         if (!key.equals(Configurable.LOCALE_KEY) &&\n             !key.equals(Configurable.NUMBER_FORMAT_KEY) &&\n             !key.equals(Configurable.TIME_FORMAT_KEY) &&\n@@ -89,11 +90,10 @@ void setLocation(Template template, int beginColumn, int beginLine, int endColum\n             !key.equals(Configurable.URL_ESCAPING_CHARSET_KEY)) \n         {\n             throw new ParseException(\n-                    \"Error \" + getStartLocation()\n-                    + \"\\nInvalid setting name, or it is not allowed to change \"\n+                    \"Invalid setting name, or it is not allowed to change \"\n                     + \"the value of the setting with FTL: \"\n                     + key,\n-                    beginLine, beginColumn);\n+                    template, beginLine, beginColumn);\n         }\n     }\n \n@@ -117,7 +117,6 @@ public String getCanonicalForm() {\n     }\n \n     public String getDescription() {\n-        return \"setting \" + key + \" set to \" + \"\\\"\" + value + \"\\\" \"\n-\t    + \"[\" + getStartLocation() + \"]\";\n+        return \"setting \" + key + \"=\" + value;\n     }\n }",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/PropertySetting.java",
                "sha": "e8b8fc3387a31f846d7d9e767f4a2cfdde93f4cd",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/Range.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/Range.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 5,
                "filename": "src/main/java/freemarker/core/Range.java",
                "patch": "@@ -52,7 +52,8 @@\n \n package freemarker.core;\n \n-import freemarker.template.*;\n+import freemarker.template.TemplateException;\n+import freemarker.template.TemplateModel;\n \n /**\n  * A class that represents a Range between two integers.\n@@ -83,11 +84,9 @@ TemplateModel _getAsTemplateModel(Environment env)\n         return new NumericalRange(min);\n     }\n     \n+    // Surely this way we can tell that it won't be a boolean without evaluating the range, but why was this important?\n     boolean isTrue(Environment env) throws TemplateException {\n-        String msg = \"Error \" + getStartLocation() + \". \" \n-                    + \"\\nExpecting a boolean here.\"\n-                    + \" Expression \" + this + \" is a range.\";\n-        throw new NonBooleanException(msg, env);\n+        throw newNonBooleanException(\"sequence (numerical range)\");\n     }\n \n     public String getCanonicalForm() {",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/Range.java",
                "sha": "da7ea9c9fa257febde3cc9e1feb3c32eb8f5b8fb",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/RecoveryBlock.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/RecoveryBlock.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/core/RecoveryBlock.java",
                "patch": "@@ -53,7 +53,8 @@\n package freemarker.core;\n \n import java.io.IOException;\n-import freemarker.template.*;\n+\n+import freemarker.template.TemplateException;\n \n final class RecoveryBlock extends TemplateElement {\n     ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/RecoveryBlock.java",
                "sha": "85138a0812b08a26e581f0e344a52532c99900c1",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/RecurseNode.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/RecurseNode.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 5,
                "filename": "src/main/java/freemarker/core/RecurseNode.java",
                "patch": "@@ -53,7 +53,14 @@\n package freemarker.core;\n \n import java.io.IOException;\n-import freemarker.template.*;\n+\n+import freemarker.template.SimpleSequence;\n+import freemarker.template.TemplateException;\n+import freemarker.template.TemplateHashModel;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateNodeModel;\n+import freemarker.template.TemplateScalarModel;\n+import freemarker.template.TemplateSequenceModel;\n \n \n /**\n@@ -70,24 +77,30 @@\n \n     void accept(Environment env) throws IOException, TemplateException {\n         TemplateModel node = targetNode == null ? null : targetNode.getAsTemplateModel(env);\n+        if (node != null && !(node instanceof TemplateNodeModel)) {\n+            throw targetNode.newUnexpectedTypeException(node, \"node\");\n+        }\n+        \n         TemplateModel nss = namespaces == null ? null : namespaces.getAsTemplateModel(env);\n         if (namespaces instanceof StringLiteral) {\n             nss = env.importLib(((TemplateScalarModel) nss).getAsString(), null);\n         }\n         else if (namespaces instanceof ListLiteral) {\n             nss = ((ListLiteral) namespaces).evaluateStringsToNamespaces(env);\n         }\n-        if (node != null && !(node instanceof TemplateNodeModel)) {\n-            throw new TemplateException(\"Expecting an XML node here, for expression: \" + targetNode + \", found a: \" + node.getClass().getName(), env);\n-        }\n         if (nss != null) {\n             if (nss instanceof TemplateHashModel) {\n                 SimpleSequence ss = new SimpleSequence(1);\n                 ss.add(nss);\n                 nss = ss;\n             }\n             else if (!(nss instanceof TemplateSequenceModel)) {\n-                throw new TemplateException(\"Expecting a sequence of namespaces after 'using'\", env);\n+                if (namespaces != null) {\n+                    throw namespaces.newUnexpectedTypeException(nss, \"sequence\");\n+                } else {\n+                    // Should not occur\n+                    throw new TemplateException(\"Expecting a sequence of namespaces after \\\"using\\\"\", env);\n+                }\n             }\n         }\n         ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/RecurseNode.java",
                "sha": "107f7815ece2e7304fa8b96ff71595f544f0abb2",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/RegexBuiltins.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/RegexBuiltins.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 6,
                "filename": "src/main/java/freemarker/core/RegexBuiltins.java",
                "patch": "@@ -218,9 +218,9 @@ private static void logFlagWarning(String message) {\n     static class matchesBI extends BuiltIn {\n         TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n             TemplateModel targetModel = target.getAsTemplateModel(env);\n-            assertNonNull(targetModel, env);\n+            assertNonNull(targetModel);\n             if (!(targetModel instanceof TemplateScalarModel)) {\n-                throw target.invalidTypeException(targetModel, env, \"string\");\n+                throw target.newUnexpectedTypeException(targetModel, \"string\");\n             }\n             return new MatcherBuilder((TemplateScalarModel) targetModel);\n         }\n@@ -229,14 +229,14 @@ TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n     static class groupsBI extends BuiltIn {\n         TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n             TemplateModel targetModel = target.getAsTemplateModel(env);\n-            assertNonNull(targetModel, env);\n+            assertNonNull(targetModel);\n             if (targetModel instanceof RegexMatchModel) {\n                 return ((RegexMatchModel) targetModel).getGroups();\n             }\n             if (targetModel instanceof RegexMatchModel.Match) {\n                 return ((RegexMatchModel.Match) targetModel).subs;\n             }\n-            throw target.invalidTypeException(targetModel, env, \"a regular expression matcher\");\n+            throw target.newUnexpectedTypeException(targetModel, \"a regular expression matcher\");\n         }\n     }\n     \n@@ -248,7 +248,7 @@ TemplateModel _getAsTemplateModel(Environment env)\n             if (model instanceof TemplateScalarModel) {\n                 return new ReplaceMethod(((TemplateScalarModel) model).getAsString());\n             }\n-            throw target.invalidTypeException(model, env, \"string\");\n+            throw target.newUnexpectedTypeException(model, \"string\");\n         }\n     }\n     \n@@ -259,7 +259,7 @@ TemplateModel _getAsTemplateModel(Environment env)\n             if (model instanceof TemplateScalarModel) {\n                 return new SplitMethod(((TemplateScalarModel) model).getAsString());\n             }\n-            throw target.invalidTypeException(model, env, \"string\");\n+            throw target.newUnexpectedTypeException(model, \"string\");\n         }\n     }\n     ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/RegexBuiltins.java",
                "sha": "6f6927f7c4c8855bd2a94a37658cd1d4a5cc73b1",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/ReturnInstruction.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/ReturnInstruction.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/core/ReturnInstruction.java",
                "patch": "@@ -86,7 +86,7 @@ public String getCanonicalForm() {\n     }\n \n     public String getDescription() {\n-        return \"return\" + \" [\" + getStartLocation() + \"]\";\n+        return \"return\";\n     }\n \n     public static class Return extends RuntimeException {",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/ReturnInstruction.java",
                "sha": "1c57e710d4df73cc1b6891718c302ac9f0b1621b",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/SequenceBuiltins.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/SequenceBuiltins.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 5,
                "filename": "src/main/java/freemarker/core/SequenceBuiltins.java",
                "patch": "@@ -63,18 +63,18 @@\n import freemarker.ext.beans.CollectionModel;\n import freemarker.template.SimpleNumber;\n import freemarker.template.TemplateBooleanModel;\n+import freemarker.template.TemplateCollectionModel;\n import freemarker.template.TemplateDateModel;\n import freemarker.template.TemplateException;\n import freemarker.template.TemplateHashModel;\n import freemarker.template.TemplateMethodModelEx;\n import freemarker.template.TemplateModel;\n import freemarker.template.TemplateModelException;\n+import freemarker.template.TemplateModelIterator;\n import freemarker.template.TemplateModelListSequence;\n import freemarker.template.TemplateNumberModel;\n import freemarker.template.TemplateScalarModel;\n import freemarker.template.TemplateSequenceModel;\n-import freemarker.template.TemplateCollectionModel;\n-import freemarker.template.TemplateModelIterator;\n import freemarker.template.utility.Constants;\n import freemarker.template.utility.StringUtil;\n \n@@ -89,7 +89,7 @@ TemplateModel _getAsTemplateModel(Environment env)\n         {\n             TemplateModel model = target.getAsTemplateModel(env);\n             if (!(model instanceof TemplateSequenceModel)) {\n-                throw target.invalidTypeException(model, env, \"sequence\");\n+                throw target.newUnexpectedTypeException(model, \"sequence\");\n             }\n             return calculateResult((TemplateSequenceModel) model);\n         }\n@@ -489,7 +489,7 @@ TemplateModel _getAsTemplateModel(Environment env)\n             } else if (model instanceof TemplateCollectionModel) {\n                 return new BIMethodForCollection((TemplateCollectionModel) model, env);\n             } else {\n-                throw target.invalidTypeException(model, env, \"sequence or collection\");\n+                throw target.newUnexpectedTypeException(model, \"sequence or collection\");\n             }\n         }\n \n@@ -582,7 +582,7 @@ private BIMethod(Environment env)\n                         ? (TemplateCollectionModel) model\n                         : null;\n                 if (m_seq == null && m_col == null) {\n-                    throw target.invalidTypeException(model, env, \"sequence or collection\");\n+                    throw target.newUnexpectedTypeException(model, \"sequence or collection\");\n                 }\n                 \n                 m_env = env;",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/SequenceBuiltins.java",
                "sha": "4ed508c13741a7a1e9f9fc98c32fcdd1caf55722",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/StopException.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/StopException.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/core/StopException.java",
                "patch": "@@ -52,8 +52,8 @@\n \n package freemarker.core;\n \n-import java.io.PrintWriter;\n import java.io.PrintStream;\n+import java.io.PrintWriter;\n \n import freemarker.template.TemplateException;\n ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/StopException.java",
                "sha": "939cf21b51c09b5afaf3c57ad690d7c6c57038c5",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/StopInstruction.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/StopInstruction.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/core/StopInstruction.java",
                "patch": "@@ -79,7 +79,7 @@ public String getCanonicalForm() {\n     }\n \n     public String getDescription() {\n-        return \"stop\" + \" [\" + getStartLocation() + \"]\";\n+        return \"stop\";\n     }\n }\n ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/StopInstruction.java",
                "sha": "9517cda06d6caf029999cb1e36cdfb0338708360",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/StringBuiltins.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/StringBuiltins.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 11,
                "filename": "src/main/java/freemarker/core/StringBuiltins.java",
                "patch": "@@ -52,12 +52,19 @@\n \n package freemarker.core;\n \n-import freemarker.template.*;\n-import freemarker.template.utility.StringUtil;\n-\n import java.io.StringReader;\n import java.util.StringTokenizer;\n \n+import freemarker.template.SimpleNumber;\n+import freemarker.template.SimpleScalar;\n+import freemarker.template.SimpleSequence;\n+import freemarker.template.TemplateException;\n+import freemarker.template.TemplateMethodModelEx;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateModelException;\n+import freemarker.template.TemplateNumberModel;\n+import freemarker.template.utility.StringUtil;\n+\n \n /**\n  * A holder for builtins that operate exclusively on strings.\n@@ -180,7 +187,8 @@ TemplateModel calculateResult(String s, Environment env) throws TemplateExceptio\n                 }\n             } catch (ParseException pe) {\n                 pe.setTemplateName(getTemplate().getName());\n-                throw new TemplateException(pe, env);\n+                throw newTemplateException(\"Failed to \\\"?eval\\\" string value:\\n\"\n+                        + pe.getMessage() + \"\\nThe failing expression:\");\n             }\n             return exp.getAsTemplateModel(env);\n         }\n@@ -193,10 +201,7 @@ TemplateModel calculateResult(String s, Environment env)  throws TemplateExcepti\n                 return new SimpleNumber(env.getArithmeticEngine().toNumber(s));\n             }\n             catch(NumberFormatException nfe) {\n-                throw new NonNumericalException(\n-                        \"Error \" + getStartLocation() + \":\\n\"\n-                        + \"Can't convert this string to number: \" + StringUtil.jQuote(s),\n-                        env);\n+                throw newMalformedNumberException(s);\n             }\n         }\n     }\n@@ -206,7 +211,8 @@ TemplateModel calculateResult(final String s, final Environment env) throws Temp\n     \t\t\tpublic Object exec(java.util.List args) throws TemplateModelException {\n     \t\t\t\tint argCount = args.size(), left=0, right=0;\n     \t\t\t\tif (argCount != 1 && argCount != 2) {\n-    \t\t\t\t\tthrow new TemplateModelException(\"Error: \" + getStartLocation() + \"\\nExpecting 1 or 2 numerical arguments here\");\n+    \t\t\t\t\tthrow newTemplateModelException(\n+    \t\t\t\t\t        \"Expecting 1 or 2 numerical arguments passed to the method coming from:\");\n     \t\t\t\t}\n    \t\t\t\t\ttry {\n    \t\t\t\t\t\tTemplateNumberModel tnm = (TemplateNumberModel) args.get(0);\n@@ -216,8 +222,7 @@ public Object exec(java.util.List args) throws TemplateModelException {\n    \t\t\t\t\t\t\tright = tnm.getAsNumber().intValue();\n    \t\t\t\t\t\t}\n    \t\t\t\t\t} catch (ClassCastException cce) {\n-   \t\t\t\t\t\tString mess = \"Error: \" + getStartLocation() + \"\\nExpecting numerical argument here\";\n-   \t\t\t\t\t\tthrow new TemplateModelException(mess);\n+   \t\t\t\t\t\tthrow newTemplateModelException(\"Expecting numerical argument passed to the method coming from:\");\n    \t\t\t\t\t}\n     \t\t\t\tif (argCount == 1) {\n     \t\t\t\t\treturn new SimpleScalar(s.substring(left));",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/StringBuiltins.java",
                "sha": "64cdc015339d4748ebecdf42ba2a16e9bf0d1d93",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/StringLiteral.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/StringLiteral.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 2,
                "filename": "src/main/java/freemarker/core/StringLiteral.java",
                "patch": "@@ -52,8 +52,14 @@\n \n package freemarker.core;\n \n-import freemarker.template.*;\n-import java.io.*;\n+import java.io.IOException;\n+import java.io.StringReader;\n+\n+import freemarker.template.SimpleScalar;\n+import freemarker.template.TemplateException;\n+import freemarker.template.TemplateExceptionHandler;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateScalarModel;\n \n final class StringLiteral extends Expression implements TemplateScalarModel {\n     ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/StringLiteral.java",
                "sha": "e5d3e20db28f4c1cc38d329f21728cce82724eea",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/SwitchBlock.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/SwitchBlock.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 2,
                "filename": "src/main/java/freemarker/core/SwitchBlock.java",
                "patch": "@@ -52,9 +52,11 @@\n \n package freemarker.core;\n \n-import java.util.*;\n import java.io.IOException;\n-import freemarker.template.*;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+\n+import freemarker.template.TemplateException;\n \n /**\n  * An instruction representing a switch-case structure.",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/SwitchBlock.java",
                "sha": "ec8dc9fe9373f6c74444d0b9a010756a1ea2fb16",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/TemplateElement.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/TemplateElement.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 3,
                "filename": "src/main/java/freemarker/core/TemplateElement.java",
                "patch": "@@ -52,10 +52,17 @@\n \n package freemarker.core;\n \n-import java.util.*;\n import java.io.IOException;\n-\n-import freemarker.template.*;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import freemarker.template.SimpleSequence;\n+import freemarker.template.TemplateException;\n+import freemarker.template.TemplateNodeModel;\n+import freemarker.template.TemplateSequenceModel;\n import freemarker.template.utility.Collections12;\n \n /**",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/TemplateElement.java",
                "sha": "2d14b84cee4f898a3d3fcd6f79c29b1b6c22d928",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/TemplateObject.java",
                "changes": 66,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/TemplateObject.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 54,
                "filename": "src/main/java/freemarker/core/TemplateObject.java",
                "patch": "@@ -52,9 +52,7 @@\n \n package freemarker.core;\n \n-import freemarker.template.*;\n-import freemarker.template.utility.ClassUtil;\n-import freemarker.template.utility.StringUtil;\n+import freemarker.template.Template;\n \n /**\n  * Objects that represent instructions or expressions\n@@ -94,22 +92,6 @@ final void setLocation(Template template, TemplateObject begin, TemplateObject e\n         setLocation(template, begin.beginColumn, begin.beginLine, end.endColumn, end.endLine);\n     }\n \n-    public final int getBeginColumn() {\n-        return beginColumn;\n-    }\n-\n-    public final int getBeginLine() {\n-        return beginLine;\n-    }\n-\n-    public final int getEndColumn() {\n-        return endColumn;\n-    }\n-\n-    public final int getEndLine() {\n-        return endLine;\n-    }\n-\n     void setLocation(Template template, int beginColumn, int beginLine, int endColumn, int endLine)\n     throws\n         ParseException\n@@ -121,45 +103,22 @@ void setLocation(Template template, int beginColumn, int beginLine, int endColum\n         this.endLine = endLine;\n     }\n     \n-    void assertNonNull(TemplateModel model, Environment env) throws InvalidReferenceException {\n-        if (model == null) {\n-            throw invalidReferenceException(env);\n-        }\n+    public final int getBeginColumn() {\n+        return beginColumn;\n     }\n \n-    InvalidReferenceException invalidReferenceException(Environment env) {\n-        return new InvalidReferenceException(\n-                \"Error \" + this.getStartLocation() + \":\\n\"\n-                + \"The following has evaluated to null or missing:\\n\" + this\n-                + \"\\n(Tip: If the failing variable is known to be legally null/missing, either specify a default value\"\n-                + \" with myOptionalVar!myDefault, or use \"\n-                + StringUtil.encloseAsTag(this.getTemplate(), \"#if myOptionalVar??\") + \"when-present\"\n-                + StringUtil.encloseAsTag(this.getTemplate(), \"#else\") + \"when-missing\"\n-                + StringUtil.encloseAsTag(this.getTemplate(), \"/#if\") + \".)\",\n-                env);\n+    public final int getBeginLine() {\n+        return beginLine;\n     }\n-    \n-    TemplateException invalidTypeException(TemplateModel model, Environment env, String expected)\n-    throws TemplateException {\n-        return invalidTypeException(model, env, expected, null);\n+\n+    public final int getEndColumn() {\n+        return endColumn;\n     }\n-    \n-    TemplateException invalidTypeException(\n-            TemplateModel model, Environment env, String expected,\n-            String tip)\n-    throws\n-        TemplateException\n-    {\n-        assertNonNull(model, env);\n-        return new TemplateException(\n-            \"Error \" + this.getStartLocation() + \":\\n\"\n-            + \"Expected a value of type \" + expected + \", but this evaluated to a value of type \" \n-            + ClassUtil.getFTLTypeDescription(model) + \":\\n\"\n-            + this\n-            + (tip == null ? \"\" : \"\\n(Tip: \" + tip + \")\"),\n-            env);\n+\n+    public final int getEndLine() {\n+        return endLine;\n     }\n-    \n+\n     /**\n      * Returns a string that indicates\n      * where in the template source, this object is.\n@@ -204,7 +163,6 @@ public String toString() {\n     \t}\n     }\n \n-\n     /**\n      * @return whether the point in the template file specified by the \n      * column and line numbers is contained within this template object.",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/TemplateObject.java",
                "sha": "d73e7c374447a8cfca5aab0d731e9654a7870f64",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/TokenMgrError.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/TokenMgrError.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 2,
                "filename": "src/main/java/freemarker/core/TokenMgrError.java",
                "patch": "@@ -160,9 +160,9 @@ protected static final String addEscapes(String str) {\n     * Note: You can customize the lexical error message by modifying this method.\n     */\n    protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n-      return(\"Lexical error. Encountered: \" +\n+      return(\"Lexical error: encountered \" +\n            (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n-           \"after \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n+           \"after \\\"\" + addEscapes(errorAfter) + \"\\\".\");\n    }\n \n    /**",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/TokenMgrError.java",
                "sha": "19a7e7c19e22851c2947ead6ece0bacdc3d7a1db",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/TransformBlock.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/TransformBlock.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 4,
                "filename": "src/main/java/freemarker/core/TransformBlock.java",
                "patch": "@@ -52,9 +52,15 @@\n \n package freemarker.core;\n \n-import java.io.*;\n-import java.util.*;\n-import freemarker.template.*;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import freemarker.template.EmptyMap;\n+import freemarker.template.TemplateException;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateTransformModel;\n \n /**\n  * A template element that contains a nested block\n@@ -99,7 +105,7 @@ void accept(Environment env)\n         }\n         else {\n             TemplateModel tm = transformExpression.getAsTemplateModel(env);\n-            throw transformExpression.invalidTypeException(tm, env, \"transform\");\n+            throw transformExpression.newUnexpectedTypeException(tm, \"transform\");\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/TransformBlock.java",
                "sha": "d9e1f05d21cb29721ce9d199d9c3f945d5be09cc",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/UnaryPlusMinusExpression.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/UnaryPlusMinusExpression.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 8,
                "filename": "src/main/java/freemarker/core/UnaryPlusMinusExpression.java",
                "patch": "@@ -52,8 +52,10 @@\n \n package freemarker.core;\n \n-import freemarker.template.*;\n-import freemarker.template.utility.ClassUtil;\n+import freemarker.template.SimpleNumber;\n+import freemarker.template.TemplateException;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateNumberModel;\n \n final class UnaryPlusMinusExpression extends Expression {\n \n@@ -72,16 +74,12 @@ TemplateModel _getAsTemplateModel(Environment env) throws TemplateException {\n         try {\n             targetModel = (TemplateNumberModel) tm;\n         } catch (ClassCastException cce) {\n-            throw new NonNumericalException(\n-                    \"Error \" + getStartLocation() + \":\\n\"\n-                    + \"Expected a number, but this evaluated to a value of type \"\n-                    + ClassUtil.getFTLTypeDescription(tm) + \":\\n\"\n-                    + target,\n-                    env);\n+            throw newNonNumericalException(tm);\n         }\n         if (!isMinus) {\n             return targetModel;\n         }\n+        target.assertNonNull(targetModel);\n         Number n = targetModel.getAsNumber();\n         n = ArithmeticEngine.CONSERVATIVE_ENGINE.multiply(MINUS_ONE, n);\n         return new SimpleNumber(n);",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/UnaryPlusMinusExpression.java",
                "sha": "8d1d35630700f3b3a2c3ce0beca7eefa3438d499",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/UnexpectedTypeException.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/UnexpectedTypeException.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 0,
                "filename": "src/main/java/freemarker/core/UnexpectedTypeException.java",
                "patch": "@@ -0,0 +1,16 @@\n+package freemarker.core;\n+\n+import freemarker.template.TemplateException;\n+\n+/**\n+ * The type of a value differs from what was expected.\n+ * \n+ * @since 2.3.20\n+ */\n+public class UnexpectedTypeException extends TemplateException {\n+\n+    public UnexpectedTypeException(String description, Environment env) {\n+        super(description, env);\n+    }\n+    \n+}",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/UnexpectedTypeException.java",
                "sha": "0897010ff7624040943c1794f73deab7cd8b4965",
                "status": "added"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/UnifiedCall.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/UnifiedCall.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 3,
                "filename": "src/main/java/freemarker/core/UnifiedCall.java",
                "patch": "@@ -109,7 +109,8 @@ void accept(Environment env) throws TemplateException, IOException {\n             if (macro.isFunction && !legacySyntax) {\n                 throw new TemplateException(\"Routine \" + macro.getName() + \n                         \" is a function. A function can only be called \" +\n-                        \"within the evaluation of an expression.\", env);\n+                        \"within the evaluation of an expression, like from inside ${...}.\",\n+                        env);\n             }    \n             env.visit(macro, namedArgs, positionalArgs, bodyParameterNames,\n                     nestedBlock);\n@@ -139,9 +140,9 @@ void accept(Environment env) throws TemplateException, IOException {\n                 }\n             }\n             else if (tm == null) {\n-                throw nameExp.invalidReferenceException(env);\n+                throw nameExp.newInvalidReferenceException();\n             } else {\n-                throw nameExp.invalidTypeException(tm, env, \"user-defined directive (macro, etc.)\");\n+                throw nameExp.newUnexpectedTypeException(tm, \"user-defined directive (macro, etc.)\");\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/UnifiedCall.java",
                "sha": "1530d3d556b265199dbffa5998b06488bfd3de5f",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/VisitNode.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/VisitNode.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 5,
                "filename": "src/main/java/freemarker/core/VisitNode.java",
                "patch": "@@ -53,7 +53,13 @@\n package freemarker.core;\n \n import java.io.IOException;\n-import freemarker.template.*;\n+\n+import freemarker.template.SimpleSequence;\n+import freemarker.template.TemplateException;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateNodeModel;\n+import freemarker.template.TemplateScalarModel;\n+import freemarker.template.TemplateSequenceModel;\n \n \n /**\n@@ -70,10 +76,10 @@\n \n     void accept(Environment env) throws IOException, TemplateException {\n         TemplateModel node = targetNode.getAsTemplateModel(env);\n-        targetNode.assertNonNull(node, env);\n         if (!(node instanceof TemplateNodeModel)) {\n-            throw new TemplateException(\"Expecting an XML node here\", env);\n+            throw targetNode.newUnexpectedTypeException(node, \"node\");\n         }\n+        \n         TemplateModel nss = namespaces == null ? null : namespaces.getAsTemplateModel(env);\n         if (namespaces instanceof StringLiteral) {\n             nss = env.importLib(((TemplateScalarModel) nss).getAsString(), null);\n@@ -88,7 +94,12 @@ else if (namespaces instanceof ListLiteral) {\n                 nss = ss;\n             }\n             else if (!(nss instanceof TemplateSequenceModel)) {\n-                throw new TemplateException(\"Expecting a sequence of namespaces after 'using'\", env);\n+                if (namespaces != null) {\n+                    throw namespaces.newUnexpectedTypeException(nss, \"sequence\");\n+                } else {\n+                    // Should not occur\n+                    throw new TemplateException(\"Expecting a sequence of namespaces after \\\"using\\\"\", env);\n+                }\n             }\n         }\n         env.visit((TemplateNodeModel) node, (TemplateSequenceModel) nss);\n@@ -102,6 +113,7 @@ public String getCanonicalForm() {\n     }\n \n     public String getDescription() {\n-        return \"visit instruction\";\n+        return \"visit\";\n     }\n+    \n }",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/core/VisitNode.java",
                "sha": "ccecce57e130c6e2359ede538302b176c9b457ca",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/ant/FreemarkerXmlTask.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/ext/ant/FreemarkerXmlTask.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 6,
                "filename": "src/main/java/freemarker/ext/ant/FreemarkerXmlTask.java",
                "patch": "@@ -52,11 +52,17 @@\n \n package freemarker.ext.ant;\n \n-import java.io.*;\n-import java.util.*;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.io.Writer;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.StringTokenizer;\n \n-import org.w3c.dom.*;\n-import org.xml.sax.SAXParseException;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n import javax.xml.parsers.ParserConfigurationException;\n@@ -65,11 +71,19 @@\n import org.apache.tools.ant.DirectoryScanner;\n import org.apache.tools.ant.Project;\n import org.apache.tools.ant.taskdefs.MatchingTask;\n-import freemarker.ext.xml.NodeListModel;\n+import org.w3c.dom.Document;\n+import org.xml.sax.SAXParseException;\n+\n import freemarker.ext.dom.NodeModel;\n+import freemarker.ext.xml.NodeListModel;\n+import freemarker.template.Configuration;\n+import freemarker.template.SimpleHash;\n+import freemarker.template.SimpleScalar;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateNodeModel;\n import freemarker.template.utility.ClassUtil;\n import freemarker.template.utility.SecurityUtilities;\n-import freemarker.template.*;\n \n \n /**",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/ant/FreemarkerXmlTask.java",
                "sha": "b927ade2fc8daae16fecfdfeb1e9e9741815b0ec",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/ant/JythonAntTask.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/ext/ant/JythonAntTask.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/ext/ant/JythonAntTask.java",
                "patch": "@@ -52,7 +52,7 @@\n \n package freemarker.ext.ant;\n \n-import java.io.*;\n+import java.io.File;\n import java.util.Map;\n \n import org.apache.tools.ant.BuildException;",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/ant/JythonAntTask.java",
                "sha": "39b68eeadbcddc5295482d6221e61c3d7c72b3f7",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/ant/UnlinkedJythonOperationsImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/ext/ant/UnlinkedJythonOperationsImpl.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/ext/ant/UnlinkedJythonOperationsImpl.java",
                "patch": "@@ -52,7 +52,8 @@\n \n package freemarker.ext.ant;\n \n-import java.io.*;\n+import java.io.File;\n+import java.io.IOException;\n import java.util.Iterator;\n import java.util.Map;\n ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/ant/UnlinkedJythonOperationsImpl.java",
                "sha": "6cad7c52d72dcdbd80efacaca99535b264f663d2",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/beans/BeansWrapper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/ext/beans/BeansWrapper.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 2,
                "filename": "src/main/java/freemarker/ext/beans/BeansWrapper.java",
                "patch": "@@ -85,14 +85,12 @@\n import java.util.StringTokenizer;\n \n import freemarker.core.Internal_ConcurrentMapFactory;\n-import freemarker.core.Version;\n import freemarker.ext.util.IdentityHashMap;\n import freemarker.ext.util.ModelCache;\n import freemarker.ext.util.ModelFactory;\n import freemarker.ext.util.WrapperTemplateModel;\n import freemarker.log.Logger;\n import freemarker.template.AdapterTemplateModel;\n-import freemarker.template.Configuration;\n import freemarker.template.ObjectWrapper;\n import freemarker.template.TemplateBooleanModel;\n import freemarker.template.TemplateCollectionModel;",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/beans/BeansWrapper.java",
                "sha": "7efe822e1518b5351dc1886cc0093e73fa6da25a",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/beans/SimpleMemberModel.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/ext/beans/SimpleMemberModel.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/ext/beans/SimpleMemberModel.java",
                "patch": "@@ -60,7 +60,6 @@\n import freemarker.template.TemplateModel;\n import freemarker.template.TemplateModelException;\n import freemarker.template.utility.ClassUtil;\n-import freemarker.template.utility.StringUtil;\n \n /**\n  * This class is used for constructors and as a base for non-overloaded methods",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/beans/SimpleMemberModel.java",
                "sha": "a53e4a41b261213bb1166ef02a4f41eb394698ff",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/dom/AttributeNodeModel.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/ext/dom/AttributeNodeModel.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 2,
                "filename": "src/main/java/freemarker/ext/dom/AttributeNodeModel.java",
                "patch": "@@ -52,9 +52,10 @@\n  \n package freemarker.ext.dom;\n \n-import freemarker.template.*;\n+import org.w3c.dom.Attr;\n+\n import freemarker.core.Environment;\n-import org.w3c.dom.*;\n+import freemarker.template.TemplateScalarModel;\n \n class AttributeNodeModel extends NodeModel implements TemplateScalarModel {\n     ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/dom/AttributeNodeModel.java",
                "sha": "0f7e1677c27a5ff41166a11ed07db90a4d9ac7fb",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/dom/CharacterDataNodeModel.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/ext/dom/CharacterDataNodeModel.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 2,
                "filename": "src/main/java/freemarker/ext/dom/CharacterDataNodeModel.java",
                "patch": "@@ -52,8 +52,10 @@\n  \n package freemarker.ext.dom;\n \n-import org.w3c.dom.*;\n-import freemarker.template.*;\n+import org.w3c.dom.CharacterData;\n+import org.w3c.dom.Comment;\n+\n+import freemarker.template.TemplateScalarModel;\n \n class CharacterDataNodeModel extends NodeModel implements TemplateScalarModel {\n     ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/dom/CharacterDataNodeModel.java",
                "sha": "08f39e056db21f0fb4ab12feb971a3976cf31c3a",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/dom/DocumentModel.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/ext/dom/DocumentModel.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 2,
                "filename": "src/main/java/freemarker/ext/dom/DocumentModel.java",
                "patch": "@@ -52,9 +52,13 @@\n  \n package freemarker.ext.dom; \n  \n-import org.w3c.dom.*;\n-import freemarker.template.*;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.NodeList;\n+\n import freemarker.core.Environment;\n+import freemarker.template.TemplateHashModel;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateModelException;\n import freemarker.template.utility.StringUtil;\n \n /**",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/dom/DocumentModel.java",
                "sha": "22dd142a9dda3f038832dbd1ccf2ebcc98539de4",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/dom/DocumentTypeModel.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/ext/dom/DocumentTypeModel.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 2,
                "filename": "src/main/java/freemarker/ext/dom/DocumentTypeModel.java",
                "patch": "@@ -52,8 +52,12 @@\n  \n package freemarker.ext.dom;\n \n-import org.w3c.dom.*;\n-import freemarker.template.*;\n+import org.w3c.dom.DocumentType;\n+import org.w3c.dom.ProcessingInstruction;\n+\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateModelException;\n+import freemarker.template.TemplateSequenceModel;\n \n class DocumentTypeModel extends NodeModel {\n     ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/dom/DocumentTypeModel.java",
                "sha": "59cc5200d287d547724ca836da79f9f93e361716",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/dom/ElementModel.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/ext/dom/ElementModel.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 5,
                "filename": "src/main/java/freemarker/ext/dom/ElementModel.java",
                "patch": "@@ -52,10 +52,19 @@\n  \n package freemarker.ext.dom;\n \n-import org.w3c.dom.*;\n-import freemarker.template.*;\n-import freemarker.template.utility.StringUtil;\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n import freemarker.core.Environment;\n+import freemarker.template.SimpleScalar;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateModelException;\n+import freemarker.template.TemplateScalarModel;\n+import freemarker.template.TemplateSequenceModel;\n+import freemarker.template.utility.StringUtil;\n \n class ElementModel extends NodeModel implements TemplateScalarModel {\n     \n@@ -113,7 +122,7 @@ public TemplateModel get(String key) throws TemplateModelException {\n                 return new SimpleScalar(buf.toString().trim());\n             }\n             if (StringUtil.isXMLID(key.substring(1))) {\n-                Attr att = getAttribute(key.substring(1), Environment.getCurrentEnvironment());\n+                Attr att = getAttribute(key.substring(1));\n                 if (att == null) { \n                     return new NodeListModel(this);\n                 }\n@@ -182,7 +191,7 @@ String getQualifiedName() {\n         return prefix + nodeName;\n     }\n     \n-    private Attr getAttribute(String qname, Environment env) {\n+    private Attr getAttribute(String qname) {\n         Element element = (Element) node;\n         Attr result = element.getAttributeNode(qname);\n         if (result != null)",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/dom/ElementModel.java",
                "sha": "cbaa394b041e85094e40629bed73c72ead3a33d1",
                "status": "modified"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/dom/JaxenXPathSupport.java",
                "changes": 49,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/ext/dom/JaxenXPathSupport.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 14,
                "filename": "src/main/java/freemarker/ext/dom/JaxenXPathSupport.java",
                "patch": "@@ -52,27 +52,48 @@\n  \n package freemarker.ext.dom;\n \n-import freemarker.template.*;\n-import freemarker.template.utility.Collections12;\n-import freemarker.template.utility.UndeclaredThrowableException;\n-import freemarker.cache.TemplateCache;\n-import freemarker.core.CustomAttribute;\n-import freemarker.core.Environment;\n-import org.jaxen.*;\n-import org.jaxen.dom.DocumentNavigator;\n-import org.w3c.dom.Document;\n-import org.xml.sax.EntityResolver;\n-import org.xml.sax.InputSource;\n-import org.xml.sax.SAXException;\n-\n import java.io.IOException;\n import java.io.StringReader;\n import java.io.StringWriter;\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n \n+import org.jaxen.BaseXPath;\n+import org.jaxen.Function;\n+import org.jaxen.FunctionCallException;\n+import org.jaxen.FunctionContext;\n+import org.jaxen.JaxenException;\n+import org.jaxen.NamespaceContext;\n+import org.jaxen.Navigator;\n+import org.jaxen.UnresolvableException;\n+import org.jaxen.VariableContext;\n+import org.jaxen.XPathFunctionContext;\n+import org.jaxen.dom.DocumentNavigator;\n+import org.w3c.dom.Document;\n+import org.xml.sax.EntityResolver;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+import freemarker.cache.TemplateCache;\n+import freemarker.core.CustomAttribute;\n+import freemarker.core.Environment;\n+import freemarker.template.ObjectWrapper;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateBooleanModel;\n+import freemarker.template.TemplateDateModel;\n+import freemarker.template.TemplateException;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateModelException;\n+import freemarker.template.TemplateNumberModel;\n+import freemarker.template.TemplateScalarModel;\n+import freemarker.template.utility.Collections12;\n+import freemarker.template.utility.UndeclaredThrowableException;\n+\n \n /**\n  * @author Jonathan Revusky",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/dom/JaxenXPathSupport.java",
                "sha": "fe77b6c5b0751e682e776832acacd41e9c2bfaa4",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/dom/NodeListModel.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/ext/dom/NodeListModel.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 5,
                "filename": "src/main/java/freemarker/ext/dom/NodeListModel.java",
                "patch": "@@ -52,12 +52,23 @@\n  \n package freemarker.ext.dom;\n \n-import freemarker.template.*;\n-import freemarker.template.utility.StringUtil;\n-import freemarker.core.Environment;\n-import org.w3c.dom.*;\n-import java.util.List; \n import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+import freemarker.core.Environment;\n+import freemarker.template.ObjectWrapper;\n+import freemarker.template.SimpleScalar;\n+import freemarker.template.SimpleSequence;\n+import freemarker.template.TemplateHashModel;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateModelException;\n+import freemarker.template.TemplateScalarModel;\n+import freemarker.template.TemplateSequenceModel;\n+import freemarker.template.utility.StringUtil;\n \n class NodeListModel extends SimpleSequence implements TemplateHashModel {\n     ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/dom/NodeListModel.java",
                "sha": "0440e0c9f12396a1858c6a3706d90f24a0378061",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/dom/NodeOutputter.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/ext/dom/NodeOutputter.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 4,
                "filename": "src/main/java/freemarker/ext/dom/NodeOutputter.java",
                "patch": "@@ -52,11 +52,20 @@\n  \n package freemarker.ext.dom;\n \n-import freemarker.template.utility.StringUtil;\n-import freemarker.template.Template;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.DocumentType;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n import freemarker.core.Environment;\n-import java.util.*;\n-import org.w3c.dom.*;\n+import freemarker.template.Template;\n+import freemarker.template.utility.StringUtil;\n \n class NodeOutputter {\n     ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/dom/NodeOutputter.java",
                "sha": "c23eb5e5382833d60451282a7fb1cee72dc56fe1",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/dom/PINodeModel.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/ext/dom/PINodeModel.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 2,
                "filename": "src/main/java/freemarker/ext/dom/PINodeModel.java",
                "patch": "@@ -52,8 +52,9 @@\n  \n package freemarker.ext.dom;\n \n-import org.w3c.dom.*;\n-import freemarker.template.*;\n+import org.w3c.dom.ProcessingInstruction;\n+\n+import freemarker.template.TemplateScalarModel;\n \n class PINodeModel extends NodeModel implements TemplateScalarModel {\n     ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/dom/PINodeModel.java",
                "sha": "59bb2f0315c24998a8891aba29a9a6e0e4640347",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/dom/Transform.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/ext/dom/Transform.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 3,
                "filename": "src/main/java/freemarker/ext/dom/Transform.java",
                "patch": "@@ -53,10 +53,18 @@\n package freemarker.ext.dom;\n \n \n-import java.io.*;\n-import java.util.*;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.Writer;\n+import java.util.Locale;\n+import java.util.StringTokenizer;\n+\n import freemarker.core.Environment;\n-import freemarker.template.*;\n+import freemarker.template.Configuration;\n+import freemarker.template.Template;\n \n /**\n  * A class that contains a main() method for command-line invocation",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/dom/Transform.java",
                "sha": "49c1c2d89a28f6357af2f0bb4f0ef024500bb8bf",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/dom/XalanXPathSupport.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/ext/dom/XalanXPathSupport.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 7,
                "filename": "src/main/java/freemarker/ext/dom/XalanXPathSupport.java",
                "patch": "@@ -52,16 +52,30 @@\n  \n package freemarker.ext.dom;\n \n-import freemarker.template.*;\n-import freemarker.core.Environment;\n-import org.w3c.dom.*;\n-import org.w3c.dom.traversal.NodeIterator;\n-import org.apache.xpath.*;\n-import org.apache.xpath.objects.*;\n-import org.apache.xml.utils.PrefixResolver;\n import java.util.List;\n+\n import javax.xml.transform.TransformerException;\n \n+import org.apache.xml.utils.PrefixResolver;\n+import org.apache.xpath.XPath;\n+import org.apache.xpath.XPathContext;\n+import org.apache.xpath.objects.XBoolean;\n+import org.apache.xpath.objects.XNodeSet;\n+import org.apache.xpath.objects.XNull;\n+import org.apache.xpath.objects.XNumber;\n+import org.apache.xpath.objects.XObject;\n+import org.apache.xpath.objects.XString;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.traversal.NodeIterator;\n+\n+import freemarker.core.Environment;\n+import freemarker.template.SimpleNumber;\n+import freemarker.template.SimpleScalar;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateBooleanModel;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateModelException;\n+\n /**\n  * Some glue code that bridges the Xalan XPath stuff (that is built into the JDK 1.4.x)\n  * with FreeMarker TemplateModel semantics",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/dom/XalanXPathSupport.java",
                "sha": "6df1932a6b9bf0f5f1bbbae48ee51db33a273afe",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/jdom/NodeListModel.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/ext/jdom/NodeListModel.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 0,
                "filename": "src/main/java/freemarker/ext/jdom/NodeListModel.java",
                "patch": "@@ -81,6 +81,7 @@\n import org.jdom.ProcessingInstruction;\n import org.jdom.Text;\n import org.jdom.output.XMLOutputter;\n+\n import freemarker.template.SimpleHash;\n import freemarker.template.SimpleScalar;\n import freemarker.template.Template;",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/jdom/NodeListModel.java",
                "sha": "cc6275f0d29dbec2fd29666852de9ec840f7b297",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/servlet/FreemarkerServlet.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/ext/servlet/FreemarkerServlet.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/ext/servlet/FreemarkerServlet.java",
                "patch": "@@ -59,6 +59,8 @@\n import java.util.Calendar;\n import java.util.Enumeration;\n import java.util.GregorianCalendar;\n+import java.util.Locale;\n+\n import javax.servlet.ServletContext;\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServlet;\n@@ -81,7 +83,6 @@\n import freemarker.template.TemplateModel;\n import freemarker.template.TemplateModelException;\n import freemarker.template.utility.StringUtil;\n-import java.util.Locale;\n \n /**\n  * <p>This is a general-purpose FreeMarker view servlet.</p>",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/servlet/FreemarkerServlet.java",
                "sha": "88da0a25d38e10c478c03f3712dd96c06f904214",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/servlet/HttpRequestHashModel.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/ext/servlet/HttpRequestHashModel.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 2,
                "filename": "src/main/java/freemarker/ext/servlet/HttpRequestHashModel.java",
                "patch": "@@ -52,10 +52,18 @@\n \n package freemarker.ext.servlet;\n \n+import java.util.ArrayList;\n+import java.util.Enumeration;\n+\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n-import java.util.*;\n-import freemarker.template.*;\n+\n+import freemarker.template.ObjectWrapper;\n+import freemarker.template.SimpleCollection;\n+import freemarker.template.TemplateCollectionModel;\n+import freemarker.template.TemplateHashModelEx;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateModelException;\n \n /**\n  * TemplateHashModel wrapper for a HttpServletRequest attributes.",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/servlet/HttpRequestHashModel.java",
                "sha": "5b4cd05124b5120e85979fdc37ec81fa76d71657",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/servlet/HttpRequestParametersHashModel.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/ext/servlet/HttpRequestParametersHashModel.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 3,
                "filename": "src/main/java/freemarker/ext/servlet/HttpRequestParametersHashModel.java",
                "patch": "@@ -52,9 +52,18 @@\n \n package freemarker.ext.servlet;\n \n-import freemarker.template.*;\n-import java.util.*;\n-import javax.servlet.http.*;\n+import java.util.ArrayList;\n+import java.util.Enumeration;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import freemarker.template.SimpleCollection;\n+import freemarker.template.SimpleScalar;\n+import freemarker.template.TemplateCollectionModel;\n+import freemarker.template.TemplateHashModelEx;\n+import freemarker.template.TemplateModel;\n \n /**\n  * TemplateHashModel wrapper for a HttpServletRequest parameters.",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/servlet/HttpRequestParametersHashModel.java",
                "sha": "5c5be45f8763633941f1653254f7d63f2c5459b0",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/xml/Internal_Dom4jNavigator.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/ext/xml/Internal_Dom4jNavigator.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 2,
                "filename": "src/main/java/freemarker/ext/xml/Internal_Dom4jNavigator.java",
                "patch": "@@ -56,8 +56,6 @@\n import java.util.Iterator;\n import java.util.List;\n \n-import freemarker.template.TemplateModelException;\n-\n import org.dom4j.Attribute;\n import org.dom4j.Branch;\n import org.dom4j.Document;\n@@ -70,6 +68,8 @@\n import org.jaxen.NamespaceContext;\n import org.jaxen.dom4j.Dom4jXPath;\n \n+import freemarker.template.TemplateModelException;\n+\n /**\n  * Don't use this class; it's only public to work around Google App Engine Java\n  * compliance issues. FreeMarker developers only: treat this class as package-visible.",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/xml/Internal_Dom4jNavigator.java",
                "sha": "df544226f091810739c1ed9e8b27d9e3152f0be6",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/xml/Internal_DomNavigator.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/ext/xml/Internal_DomNavigator.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 0,
                "filename": "src/main/java/freemarker/ext/xml/Internal_DomNavigator.java",
                "patch": "@@ -67,6 +67,7 @@\n import org.w3c.dom.NodeList;\n import org.w3c.dom.ProcessingInstruction;\n import org.w3c.dom.Text;\n+\n import freemarker.template.TemplateModelException;\n import freemarker.template.utility.StringUtil;\n ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/xml/Internal_DomNavigator.java",
                "sha": "4712e290914a0e8df24630d0b404013d9dd1102b",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/xml/Internal_JdomNavigator.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/ext/xml/Internal_JdomNavigator.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 3,
                "filename": "src/main/java/freemarker/ext/xml/Internal_JdomNavigator.java",
                "patch": "@@ -57,23 +57,23 @@\n import java.util.Iterator;\n import java.util.List;\n \n-import freemarker.template.TemplateModelException;\n-\n import org.jaxen.Context;\n import org.jaxen.NamespaceContext;\n import org.jaxen.jdom.JDOMXPath;\n-import org.jdom.Element;\n import org.jdom.Attribute;\n import org.jdom.CDATA;\n import org.jdom.Comment;\n import org.jdom.DocType;\n import org.jdom.Document;\n+import org.jdom.Element;\n import org.jdom.EntityRef;\n import org.jdom.Namespace;\n import org.jdom.ProcessingInstruction;\n import org.jdom.Text;\n import org.jdom.output.XMLOutputter;\n \n+import freemarker.template.TemplateModelException;\n+\n /**\n  * Don't use this class; it's only public to work around Google App Engine Java\n  * compliance issues. FreeMarker developers only: treat this class as package-visible.",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/xml/Internal_JdomNavigator.java",
                "sha": "e0b3aa09d1ed3fc058cc812e18a40e1c0968ad76",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/xml/Namespaces.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/ext/xml/Namespaces.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 4,
                "filename": "src/main/java/freemarker/ext/xml/Namespaces.java",
                "patch": "@@ -51,12 +51,12 @@\n  */\n \n package freemarker.ext.xml;\n-import freemarker.template.TemplateMethodModel;\n-import java.lang.String;\n+import java.util.HashMap;\n import java.util.List;\n-import freemarker.template.TemplateScalarModel;\n+\n+import freemarker.template.TemplateMethodModel;\n import freemarker.template.TemplateModelException;\n-import java.util.HashMap;\n+import freemarker.template.TemplateScalarModel;\n \n /**\n  * @author Attila Szegedi",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/ext/xml/Namespaces.java",
                "sha": "77872f5c4512d318a77448ebf7cf9c052adb0b87",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/Configuration.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/template/Configuration.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/template/Configuration.java",
                "patch": "@@ -80,9 +80,9 @@\n import freemarker.cache.TemplateCache;\n import freemarker.cache.TemplateLoader;\n import freemarker.cache.WebappTemplateLoader;\n-import freemarker.core.Internal_ConcurrentMapFactory;\n import freemarker.core.Configurable;\n import freemarker.core.Environment;\n+import freemarker.core.Internal_ConcurrentMapFactory;\n import freemarker.core.Internal_CoreAPI;\n import freemarker.core.ParseException;\n import freemarker.core.Version;",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/Configuration.java",
                "sha": "cfee83a8650bef059099de9846d6d76280f1bf7c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/DefaultObjectWrapper.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/template/DefaultObjectWrapper.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 0,
                "filename": "src/main/java/freemarker/template/DefaultObjectWrapper.java",
                "patch": "@@ -57,6 +57,7 @@\n import java.util.Collection;\n import java.util.Iterator;\n import java.util.Map;\n+\n import freemarker.ext.dom.NodeModel;\n \n /**",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/DefaultObjectWrapper.java",
                "sha": "33aec69a12861df7a7894c559be47770d8110b99",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/GeneralPurposeNothing.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/template/GeneralPurposeNothing.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/template/GeneralPurposeNothing.java",
                "patch": "@@ -52,8 +52,8 @@\n \n package freemarker.template;\n \n-import java.util.List;\n import java.util.ArrayList;\n+import java.util.List;\n \n /**\n  * Singleton object representing nothing, used by ?if_exists built-in.",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/GeneralPurposeNothing.java",
                "sha": "77fb6cafd8fbc380e929b00a38a6e84b4567b7b2",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/LocalizedString.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/template/LocalizedString.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/template/LocalizedString.java",
                "patch": "@@ -1,8 +1,9 @@\n package freemarker.template;\n \n-import freemarker.core.Environment;\n import java.util.Locale;\n \n+import freemarker.core.Environment;\n+\n /**\n  * An abstract base class for scalars that vary by locale.\n  * Here is a silly usage example.",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/LocalizedString.java",
                "sha": "dcb7435f41b59a4335cf9f42477b524e214b84da",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/ResourceBundleLocalizedString.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/template/ResourceBundleLocalizedString.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/template/ResourceBundleLocalizedString.java",
                "patch": "@@ -1,8 +1,8 @@\n package freemarker.template;\n \n import java.util.Locale;\n-import java.util.ResourceBundle;\n import java.util.MissingResourceException;\n+import java.util.ResourceBundle;\n \n /**\n  * A concrete implementation of {@link LocalizedString} that gets ",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/ResourceBundleLocalizedString.java",
                "sha": "68c0eaa7c23310825c392c04934502cd59ebf55e",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/SimpleCollection.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/template/SimpleCollection.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/template/SimpleCollection.java",
                "patch": "@@ -53,7 +53,8 @@\n package freemarker.template;\n \n import java.io.Serializable;\n-import java.util.*;\n+import java.util.Collection;\n+import java.util.Iterator;\n \n /**\n  * A simple implementation of {@link TemplateCollectionModel}.",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/SimpleCollection.java",
                "sha": "0eac9a6c99c7b9a87372ebc8db54a83588ec8b07",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/TemplateException.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/template/TemplateException.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 8,
                "filename": "src/main/java/freemarker/template/TemplateException.java",
                "patch": "@@ -81,7 +81,7 @@ private static boolean before14() {\n     private static final Object[] EMPTY_OBJECT_ARRAY = new Object[]{};\n     \n     /** The underlying cause of this exception, if any */\n-    private final Exception causeException;\n+    private final Throwable causeException;\n     private final transient Environment env;\n     private final String ftlInstructionStack;\n     \n@@ -128,7 +128,7 @@ public TemplateException(Exception cause, Environment env) {\n      * exception to be raised\n      */\n     public TemplateException(String description, Exception cause, Environment env) {\n-        super(getDescription(description, cause));\n+        super(ensureNonEmptyDescription(description, cause));\n         causeException = cause;\n         this.env = env;\n         if(env != null)\n@@ -145,7 +145,7 @@ public TemplateException(String description, Exception cause, Environment env) {\n         }\n     }\n \n-    private static String getDescription(String description, Exception cause)  {\n+    private static String ensureNonEmptyDescription(String description, Throwable cause)  {\n         if(description != null && description.length() != 0) {\n             return description;\n         }\n@@ -166,14 +166,17 @@ private static String getDescription(String description, Exception cause)  {\n      *\n      * @return the underlying <code>Exception</code>, if any, that caused this\n      * exception to be raised\n+     * \n+     * @deprecated Use {@link #getCause()} instead, as this can't return runtime exceptions and errors as is.\n      */\n     public Exception getCauseException() {\n-        return causeException;\n+        return causeException instanceof Exception\n+                ? (Exception) causeException\n+                : new Exception(\"Wrapped to exception: \" + causeException);\n     }\n \n     /**\n-     * Returns the same exception as <code>getCauseException</code>. Provided\n-     * to enable full JDK-generated stack traces when running under JDK 1.4.\n+     * Returns the cause exception.\n      *\n      * @see Throwable#getCause()\n      * @return the underlying <code>Exception</code>, if any, that caused this\n@@ -208,13 +211,14 @@ public void printStackTrace(java.io.PrintStream ps) {\n \n     public void printStackTrace(PrintWriter pw) {\n         synchronized (pw) {\n+            pw.println(\"FreeMarker template error:\");\n             pw.println(getMessage());\n             if (ftlInstructionStack != null && ftlInstructionStack.length() != 0) {\n                 pw.println();\n-                pw.println(\"The problematic instruction:\");\n+                pw.println(\"The problematic instruction (FTL stack trace):\");\n                 pw.println(ftlInstructionStack);\n             }\n-            pw.println(\"Java backtrace for programmers:\");\n+            pw.println(\"Java stack trace (for programmers):\");\n             pw.println(\"----------\");\n             synchronized (lock) {\n                 if (messageWasAlreadyPrintedForThisTrace == null) {",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/TemplateException.java",
                "sha": "f604d609a1adb2fe2a20ad1f9a9eefe345f1dfac",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/TemplateExceptionHandler.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/template/TemplateExceptionHandler.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/template/TemplateExceptionHandler.java",
                "patch": "@@ -52,8 +52,9 @@\n \n package freemarker.template;\n \n-import java.io.Writer;\n import java.io.PrintWriter;\n+import java.io.Writer;\n+\n import freemarker.core.Environment;\n \n /**",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/TemplateExceptionHandler.java",
                "sha": "38c30cbf50a63fa1a431a00d633fe2d39076bfc4",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/TemplateModelListSequence.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/template/TemplateModelListSequence.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 3,
                "filename": "src/main/java/freemarker/template/TemplateModelListSequence.java",
                "patch": "@@ -54,9 +54,6 @@\n \n import java.util.List;\n \n-import freemarker.template.TemplateModel;\n-import freemarker.template.TemplateSequenceModel;\n-\n /**\n  * Sequence that wraps a <code>java.util.List</code> of already wrapped objects\n  * directly, with minimal resource usage. Warning! It does not copy the original",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/TemplateModelListSequence.java",
                "sha": "d8daa108f63804debc6428cd9721b86155853ce3",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/utility/CaptureOutput.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/template/utility/CaptureOutput.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 3,
                "filename": "src/main/java/freemarker/template/utility/CaptureOutput.java",
                "patch": "@@ -52,11 +52,17 @@\n \n package freemarker.template.utility;\n \n-import freemarker.template.*;\n-import freemarker.core.Environment;\n-import java.io.*;\n+import java.io.IOException;\n+import java.io.Writer;\n import java.util.Map;\n \n+import freemarker.core.Environment;\n+import freemarker.template.SimpleScalar;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateModelException;\n+import freemarker.template.TemplateScalarModel;\n+import freemarker.template.TemplateTransformModel;\n+\n /**\n  * A transform that captures the output of a block of FTL code and stores that in a variable.\n  *",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/utility/CaptureOutput.java",
                "sha": "d9df4edabd4892fdc855fe16a2f82927264c7f45",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/utility/ClassUtil.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/template/utility/ClassUtil.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/template/utility/ClassUtil.java",
                "patch": "@@ -246,7 +246,7 @@ private static void appendTemplateModelTypeName(StringBuffer sb, Set typeNamesAp\n         if (Environment.Namespace.class.isAssignableFrom(cl)) {\n             appendTypeName(sb, typeNamesAppended, \"namespace\");\n         } else if (TemplateHashModelEx.class.isAssignableFrom(cl)) {\n-            appendTypeName(sb, typeNamesAppended, \"extendedHash\");\n+            appendTypeName(sb, typeNamesAppended, \"extended_hash\");\n         } else if (TemplateHashModel.class.isAssignableFrom(cl)) {\n             appendTypeName(sb, typeNamesAppended, \"hash\");\n         }",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/utility/ClassUtil.java",
                "sha": "28e1477392f3be700b10eda443fdf29586c579ba",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/utility/DOMNodeModel.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/template/utility/DOMNodeModel.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 3,
                "filename": "src/main/java/freemarker/template/utility/DOMNodeModel.java",
                "patch": "@@ -52,9 +52,24 @@\n \n package freemarker.template.utility;\n \n-import freemarker.template.*;\n-import org.w3c.dom.*;\n-import java.util.*;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.Text;\n+\n+import freemarker.template.SimpleHash;\n+import freemarker.template.SimpleScalar;\n+import freemarker.template.TemplateBooleanModel;\n+import freemarker.template.TemplateHashModel;\n+import freemarker.template.TemplateMethodModel;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateModelException;\n+import freemarker.template.TemplateSequenceModel;\n \n /**\n  * A convenient wrapper class for wrapping a Node in the W3C DOM API.",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/utility/DOMNodeModel.java",
                "sha": "303bed9ccf2354d0f7b82c73975fdd9532702d91",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/utility/Execute.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/template/utility/Execute.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 3,
                "filename": "src/main/java/freemarker/template/utility/Execute.java",
                "patch": "@@ -52,9 +52,13 @@\n \n package freemarker.template.utility;\n \n-import freemarker.template.*;\n-import java.io.*;\n-import java.util.*;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.util.List;\n+\n+import freemarker.template.TemplateModelException;\n \n /**\n  * <p>Gives FreeMarker the the ability to execute external commands. Will fork",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/utility/Execute.java",
                "sha": "18f46277548bbd058602d730e58e84571c1a3473",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/utility/JythonRuntime.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/template/utility/JythonRuntime.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/main/java/freemarker/template/utility/JythonRuntime.java",
                "patch": "@@ -55,10 +55,12 @@\n import java.io.IOException;\n import java.io.Writer;\n import java.util.Map;\n+\n import org.python.core.PyObject;\n import org.python.util.PythonInterpreter;\n-import freemarker.template.TemplateTransformModel;\n+\n import freemarker.core.Environment;\n+import freemarker.template.TemplateTransformModel;\n \n /**\n  * A crude first pass at an embeddable Jython interpreter",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/utility/JythonRuntime.java",
                "sha": "2d664bdeea4fa0e66db2db5d241791b1131a0cd6",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/utility/NormalizeNewlines.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/template/utility/NormalizeNewlines.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 2,
                "filename": "src/main/java/freemarker/template/utility/NormalizeNewlines.java",
                "patch": "@@ -52,10 +52,17 @@\n \n package freemarker.template.utility;\n \n-import freemarker.template.TemplateTransformModel;\n-import java.io.*;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.io.Writer;\n import java.util.Map;\n \n+import freemarker.template.TemplateTransformModel;\n+\n /**\n  * <p>Transformer that supports FreeMarker legacy behavior: all newlines appearing\n  * within the transformed area will be transformed into the platform's default",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/utility/NormalizeNewlines.java",
                "sha": "33fa3b2296b5334db99c55ee5c558440e2d26a0b",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/utility/ObjectConstructor.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/template/utility/ObjectConstructor.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 2,
                "filename": "src/main/java/freemarker/template/utility/ObjectConstructor.java",
                "patch": "@@ -53,9 +53,10 @@\n package freemarker.template.utility;\n \n import java.util.List;\n+\n import freemarker.ext.beans.BeansWrapper;\n-import freemarker.template.*;\n-import freemarker.template.utility.ClassUtil;\n+import freemarker.template.TemplateMethodModelEx;\n+import freemarker.template.TemplateModelException;\n \n /**\n  * An object that you can make available in a template",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/utility/ObjectConstructor.java",
                "sha": "81cd2095feffeb5aa0591e4dbaba9f0f00eb998b",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/utility/ToCanonical.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/template/utility/ToCanonical.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 2,
                "filename": "src/main/java/freemarker/template/utility/ToCanonical.java",
                "patch": "@@ -52,8 +52,12 @@\n \n package freemarker.template.utility;\n \n-import freemarker.template.*;\n-import java.io.*;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+\n+import freemarker.template.Configuration;\n+import freemarker.template.Template;\n \n /**\n  * Read in a template and convert it to a canonical format.",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/java/freemarker/template/utility/ToCanonical.java",
                "sha": "bd2cff9d2b03fc418903ead220a734684cc678a6",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/javacc/FTL.jj",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/javacc/FTL.jj?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 13,
                "filename": "src/main/javacc/FTL.jj",
                "patch": "@@ -629,26 +629,26 @@ TOKEN:\n \t\t\t    int index = s.indexOf('#');\n \t\t\t    s = s.substring(index);\n \t\t\t    \n-\t\t\t    String hint = null;\n+\t\t\t    String tip = null;\n \t\t\t    if (!s.toLowerCase().equals(s))\r\t\t\t    {\n-\t\t\t        hint = \"Directive names are all-lower-case.\";\r\t\t\t    }\n-\t\t\t    else if (s.equals(\"#set\"))\r\t\t\t    {\r\t\t\t        hint = \"Use #assign or #local or #global, depending on the intented scope (#assign is template-scope).\";\n+\t\t\t        tip = \"Directive names are all-lower-case.\";\r\t\t\t    }\n+\t\t\t    else if (s.equals(\"#set\"))\r\t\t\t    {\r\t\t\t        tip = \"Use #assign or #local or #global, depending on the intented scope (#assign is template-scope).\";\n \t\t\t    }\n-\t\t\t    else if (s.equals(\"#else_if\")) hint = \"Use #elseif.\";\n-\t\t\t    else if (s.equals(\"#no_escape\")) hint = \"Use #noescape instead.\";\n-\t\t\t    else if (s.equals(\"#method\")) hint = \"Use #function instead.\";\n-\t\t\t    else if (s.equals(\"#head\") || s.equals(\"#template\") || s.equals(\"#fm\")) hint = \"You may meant #ftl.\";\n-\t\t\t    else if (s.equals(\"#try\") || s.equals(\"#atempt\")) hint = \"You may meant #attempt.\";\n-\t\t\t    else if (s.equals(\"#for\") || s.equals(\"#each\") || s.equals(\"#iterate\") || s.equals(\"#iterator\"))\r\t\t\t    {\r\t\t\t        hint = \"You may meant #list \"\n+\t\t\t    else if (s.equals(\"#else_if\")) tip = \"Use #elseif.\";\n+\t\t\t    else if (s.equals(\"#no_escape\")) tip = \"Use #noescape instead.\";\n+\t\t\t    else if (s.equals(\"#method\")) tip = \"Use #function instead.\";\n+\t\t\t    else if (s.equals(\"#head\") || s.equals(\"#template\") || s.equals(\"#fm\")) tip = \"You may meant #ftl.\";\n+\t\t\t    else if (s.equals(\"#try\") || s.equals(\"#atempt\")) tip = \"You may meant #attempt.\";\n+\t\t\t    else if (s.equals(\"#for\") || s.equals(\"#each\") || s.equals(\"#iterate\") || s.equals(\"#iterator\"))\r\t\t\t    {\r\t\t\t        tip = \"You may meant #list \"\n \t\t\t               + \"(http://freemarker.org/docs/ref_directive_list.html).\";\n \t\t\t    }\n \t\t\t    else\n-\t\t\t    {\r\t\t\t        hint = \"Check the Directive Reference in the manual: \"\n+\t\t\t    {\r\t\t\t        tip = \"Check the Directive Reference in the manual: \"\n \t\t\t      \t\t   + \"http://freemarker.org/docs/ref_directive_alphaidx.html. If the name is there, \"\n \t\t\t      \t\t   + \"check the version; you are using FreeMarker \" + Configuration.getVersion() +\")\";\n \t\t\t    }\n \t\t\t    throw new TokenMgrError(\n-\t\t\t      \t\t\"Unknown directive: \" + s + (hint != null ? \"\\n(Hint: \" + hint + \")\" : \"\"),\n+\t\t\t      \t\t\"Unknown directive: \" + s + (tip != null ? \"\\nTip: \" + tip : \"\"),\n \t\t\t      \t\tTokenMgrError.LEXICAL_ERROR, matchedToken.beginLine, matchedToken.beginColumn + 1);\n \t\t\t}\n         }\n@@ -1664,8 +1664,8 @@ DollarVariable StringOutput() :\n    begin=<OUTPUT_ESCAPE>\n    exp=Expression()\n    {\n-      notHashLiteral(exp, MessageUtil.TYPES_AUTOMATICALLY_CONVERTIBLE_TO_STRING);\n-      notListLiteral(exp, MessageUtil.TYPES_AUTOMATICALLY_CONVERTIBLE_TO_STRING);\n+      notHashLiteral(exp, MessageUtil.TYPES_USABLE_WHERE_STRING_IS_EXPECTED);\n+      notListLiteral(exp, MessageUtil.TYPES_USABLE_WHERE_STRING_IS_EXPECTED);\n    }\n    end=<CLOSE_BRACE>\n    {",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/main/javacc/FTL.jj",
                "sha": "a338bf4c81097c4906fb9dca2cbeeb11034decb5",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/test/java/freemarker/test/templatesuite/servlets/TestJspTaglibs.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/test/java/freemarker/test/templatesuite/servlets/TestJspTaglibs.java?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/test/java/freemarker/test/templatesuite/servlets/TestJspTaglibs.java",
                "patch": "@@ -63,7 +63,6 @@\n import java.net.URL;\n import java.security.Principal;\n import java.util.Arrays;\n-import java.util.Collections;\n import java.util.Enumeration;\n import java.util.HashSet;\n import java.util.Hashtable;",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/test/java/freemarker/test/templatesuite/servlets/TestJspTaglibs.java",
                "sha": "6c6d30a23c5ed58da53f874711cc0ae13e5400db",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/test/resources/freemarker/test/templatesuite/references/recover.ftl",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/test/resources/freemarker/test/templatesuite/references/recover.ftl?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 4,
                "filename": "src/test/resources/freemarker/test/templatesuite/references/recover.ftl",
                "patch": "@@ -1,8 +1,8 @@\n  Hello, World\n- Well, that did not work. Here is the error: Error in template \\\"recover.ftl\\\" at line 8, column 47:\\nThe following has evaluated to null or missing:\\nundefined[...]\n+ Well, that did not work.\n  Now we nest another attempt/recover here:\n-   Oops: Error in template \"re[...]\n+   Oops...\n    Remember, freeMarker sequences are zero-based! Hello, World\n- Now we output the current error message: Error in template \\\"recover.ftl\\\" at line 8, column 47:\\nThe following has evaluated to null or missing:\\nundefined[...]\n+ Now we check the current error message.\n   The template is not currently available\n-  The included template has a problem: Error in template \\\"undefined.ftl\\\" at line 1, column 3:\\nThe following has evaluated to null or missing:\\nundefine[...]\n+  The included template had a problem.\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/test/resources/freemarker/test/templatesuite/references/recover.ftl",
                "sha": "f6754e0c59a9d16faf91b4a794cb154ec0d76a0c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/test/resources/freemarker/test/templatesuite/templates/boolean-formatting.txt",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/test/resources/freemarker/test/templatesuite/templates/boolean-formatting.txt?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 1,
                "filename": "src/test/resources/freemarker/test/templatesuite/templates/boolean-formatting.txt",
                "patch": "@@ -12,7 +12,7 @@ ${x?string('ja', 'nein')} ${true?string('ja', 'nein')}\n ${beansBoolean} ${beansBoolean?string}\n ${booleanAndString} ${booleanAndString?string}\n <#assign n = 123><#assign m = { x: 'foo', n: 'bar' }><@assertEquals actual=m['n'] + m['123'] expected='foobar' />\n-<@assertFails message=\"Expected a value of type\">${m[false]}</@>\n+<@assertFails exception=\"UnexpectedTypeException\">${m[false]}</@>\n <@assertFails message=\"can't compare\">${x == 'false'}</@>\n <@assertFails message=\"can't compare\">${x != 'false'}</@>\n <@assertFails message=\"can't convert\">${booleanVsStringMethods.expectsString(x)}</@>",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/test/resources/freemarker/test/templatesuite/templates/boolean-formatting.txt",
                "sha": "68d331dc91a14479dfb81cada16fe6d404f2e8ad",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/freemarker/blob/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/test/resources/freemarker/test/templatesuite/templates/recover.ftl",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/test/resources/freemarker/test/templatesuite/templates/recover.ftl?ref=00412e7ed9340c6356f6887482edc6b3c7fe11fd",
                "deletions": 12,
                "filename": "src/test/resources/freemarker/test/templatesuite/templates/recover.ftl",
                "patch": "@@ -5,17 +5,17 @@\n   We should never get here.\n </#recover>\n <#attempt>\n- Let's try to output an undefined variable: ${undefined}\n+ Let's try to output an undefined variable: ${undefinedVariable}\n <#recover>\n- Well, that did not work. Here is the error: ${truncate(.error)}\n+ Well, that did not work.<@assert test=.error?contains('undefinedVariable') />\n  Now we nest another attempt/recover here:\n  <#attempt>\n    ${sequence[1]}\n  <#recover>\n-   Oops: ${.error[0..20]}[...]\n+   Oops...<@assert test=.error?contains('sequence[1]') />\n    Remember, freeMarker sequences are zero-based! ${sequence[0]}\n  </#recover>\n- Now we output the current error message: ${truncate(.error)}\n+ Now we check the current error message.<@assert test=.error?contains('undefinedVariable') />\n </#recover>\n <#attempt>\n   <#include \"nonexistent_template\">\n@@ -25,12 +25,5 @@\n <#attempt>\n   <#include \"undefined.ftl\">\n <#recover>\n-  The included template has a problem: ${truncate(.error)}\n+  The included template had a problem.<@assert test=.error?contains('undefined_variable') />\n </#attempt>\n-<#function truncate str>\n-  <#if str?length gt 110>\n-    <#return str[0..110]?j_string + '[...]'>\n-  <#else>\n-    <#return str>\n-  </#if>\n-</#function>",
                "raw_url": "https://github.com/apache/freemarker/raw/00412e7ed9340c6356f6887482edc6b3c7fe11fd/src/test/resources/freemarker/test/templatesuite/templates/recover.ftl",
                "sha": "2b19493911d5b0c295a72a9cd68dee3cbe403a80",
                "status": "modified"
            }
        ],
        "message": "Code celanup in the error handling code. Some random smaller fixes (-exp NPE). Changed TemplateException format. Improvements in error message quality.",
        "parent": "https://github.com/apache/freemarker/commit/16178e861645be34a41fdb1ebe62e911015160f2",
        "patched_files": [
            "TemplateException.java",
            "Namespaces.java",
            "ClassUtil.java",
            "Macro.java",
            "DateBuiltins.java",
            "SequenceBuiltins.java",
            "ParseException.java",
            "DynamicKeyName.java",
            "DocumentModel.java",
            "Expression.java",
            "NonBooleanException.java",
            "ObjectConstructor.java",
            "TemplateExceptionHandler.java",
            "RecurseNode.java",
            "recover.ftl",
            "NoEscapeBlock.java",
            "FTL.jj",
            "NumericalOutput.java",
            "StringLiteral.java",
            "ReturnInstruction.java",
            "Environment.java",
            "TemplateObject.java",
            "TokenMgrError.java",
            "BuiltIn.java",
            "FreemarkerXmlTask.java",
            "TransformBlock.java",
            "Range.java",
            "ConditionalBlock.java",
            "Internal_Dom4jNavigator.java",
            "NumericalRange.java",
            "NodeListModel.java",
            "StopInstruction.java",
            "Internal_CoreAPI.java",
            "AttemptBlock.java",
            "BooleanLiteral.java",
            "boolean-formatting.txt",
            "UnlinkedJythonOperationsImpl.java",
            "EscapeBlock.java",
            "NodeBuiltins.java",
            "Execute.java",
            "AddConcatExpression.java",
            "Internal_DomNavigator.java",
            "BlockAssignment.java",
            "HashLiteral.java",
            "HttpRequestHashModel.java",
            "ElementModel.java",
            "LibraryLoad.java",
            "CollectionAndSequence.java",
            "Dot.java",
            "Configurable.java",
            "SwitchBlock.java",
            "StopException.java",
            "UnexpectedTypeException.java",
            "Configuration.java",
            "LocalizedString.java",
            "MixedContent.java",
            "FreeMarkerTree.java",
            "DefaultObjectWrapper.java",
            "BeansWrapper.java",
            "VisitNode.java",
            "UnaryPlusMinusExpression.java",
            "MessageUtil.java",
            "TemplateElement.java",
            "NonNumericalException.java",
            "GeneralPurposeNothing.java",
            "CompressedBlock.java",
            "BreakInstruction.java",
            "NonDateException.java",
            "JythonRuntime.java",
            "DefaultToExpression.java",
            "ArithmeticExpression.java",
            "XalanXPathSupport.java",
            "LocalContext.java",
            "NormalizeNewlines.java",
            "ListLiteral.java",
            "MethodCall.java",
            "DOMNodeModel.java",
            "HttpRequestParametersHashModel.java",
            "URLTemplateSource.java",
            "Include.java",
            "InvalidReferenceException.java",
            "AssignmentInstruction.java",
            "AttributeNodeModel.java",
            "PINodeModel.java",
            "StringBuiltins.java",
            "UnifiedCall.java",
            "BooleanExpression.java",
            "JythonAntTask.java",
            ".classpath",
            "NumberLiteral.java",
            "JaxenXPathSupport.java",
            "FreemarkerServlet.java",
            "EvaluationUtil.java",
            "BuiltinVariable.java",
            "Internal_JdomNavigator.java",
            "ExistsExpression.java",
            "IteratorBlock.java",
            "ToCanonical.java",
            "CharacterDataNodeModel.java",
            "PropertySetting.java",
            "Identifier.java",
            "SimpleCollection.java",
            "SimpleMemberModel.java",
            "RegexBuiltins.java",
            "Transform.java",
            "NodeOutputter.java",
            "RecoveryBlock.java",
            "NonStringException.java",
            "ParentheticalExpression.java",
            "ArithmeticEngine.java",
            "TemplateModelListSequence.java",
            "Case.java",
            "Assignment.java",
            "Interpret.java",
            "CaptureOutput.java",
            "IfBlock.java",
            "NewBI.java",
            "ResourceBundleLocalizedString.java",
            "DocumentTypeModel.java"
        ],
        "repo": "freemarker",
        "unit_tests": [
            "TestJspTaglibs.java"
        ]
    },
    "freemarker_2d27bc5": {
        "bug_id": "freemarker_2d27bc5",
        "commit": "https://github.com/apache/freemarker/commit/2d27bc57643cb1d780c98bb0332dda06c4c58577",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/freemarker/blob/2d27bc57643cb1d780c98bb0332dda06c4c58577/src/main/java/freemarker/template/utility/StringUtil.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/template/utility/StringUtil.java?ref=2d27bc57643cb1d780c98bb0332dda06c4c58577",
                "deletions": 1,
                "filename": "src/main/java/freemarker/template/utility/StringUtil.java",
                "patch": "@@ -578,8 +578,9 @@ public static String FTLStringLiteralDec(String s) throws ParseException {\n     }\n \n     public static Locale deduceLocale(String input) {\n+       if (input == null) return null;\n        Locale locale = Locale.getDefault();\n-       if (input.charAt(0) == '\"') input = input.substring(1, input.length() -1);\n+       if (input.length() > 0 && input.charAt(0) == '\"') input = input.substring(1, input.length() -1);\n        StringTokenizer st = new StringTokenizer(input, \",_ \");\n        String lang = \"\", country = \"\";\n        if (st.hasMoreTokens()) {",
                "raw_url": "https://github.com/apache/freemarker/raw/2d27bc57643cb1d780c98bb0332dda06c4c58577/src/main/java/freemarker/template/utility/StringUtil.java",
                "sha": "383a053f941d96cce20e15bb568f90318a56f761",
                "status": "modified"
            }
        ],
        "message": "Fixing an OutOfBoundsException (and NPE) in StringUtils.",
        "parent": "https://github.com/apache/freemarker/commit/b098e034764a435181149e4836d3dcaf9cded574",
        "patched_files": [
            "StringUtil.java"
        ],
        "repo": "freemarker",
        "unit_tests": [
            "StringUtilTest.java"
        ]
    },
    "freemarker_51c4c5e": {
        "bug_id": "freemarker_51c4c5e",
        "commit": "https://github.com/apache/freemarker/commit/51c4c5ecab816c60e6f0580535ce6c5cb8ddc98b",
        "file": [
            {
                "additions": 169,
                "blob_url": "https://github.com/apache/freemarker/blob/51c4c5ecab816c60e6f0580535ce6c5cb8ddc98b/src/main/java/freemarker/ext/jsp/TaglibFactory.java",
                "changes": 271,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/ext/jsp/TaglibFactory.java?ref=51c4c5ecab816c60e6f0580535ce6c5cb8ddc98b",
                "deletions": 102,
                "filename": "src/main/java/freemarker/ext/jsp/TaglibFactory.java",
                "patch": "@@ -135,11 +135,11 @@ public TaglibFactory(ServletContext ctx, ObjectWrapper wrapper) {\n      * name, and custom servlets that want to integrate JSP taglib support\n      * should do the same.\n      * \n-     * @return a hash representing the JSP taglib. Each element of this\n-     * hash model represents a single custom tag or function from the library, implemented\n+     * @return a {@link TemplateHashModel} representing the JSP taglib. Each element of this\n+     * hash represents a single custom tag or function from the library, implemented\n      * as a {@link TemplateTransformModel} or {@link TemplateMethodModelEx}, respectively.\n      */\n-    public TemplateHashModel get(String uri) throws TemplateModelException {\n+    public TemplateModel get(String uri) throws TemplateModelException {\n         synchronized (taglibs) {\n             final Taglib taglib = (Taglib) taglibs.get(uri);\n             if(taglib != null) {\n@@ -585,24 +585,34 @@ private static String resolveRelativeUri(String uri)\n     }\n \n     static final class TldParser extends DefaultHandler {\n+        private static final String TAG = \"tag\";\n+        private static final String NAME = \"name\";\n+        private static final String TAG_CLASS = \"tag-class\";\n+        private static final String TAG_CLASS_LEGACY = \"tagclass\";\n+        \n+        private static final String FUNCTION = \"function\";\n+        private static final String FUNCTION_CLASS = \"function-class\";\n+        private static final String FUNCTION_SIGNATURE = \"function-signature\";\n+        \n+        private static final String LISTENER = \"listener\";\n+        private static final String LISTENER_CLASS = \"listener-class\";\n+\n         private final BeansWrapper beansWrapper;\n \n         private final Map tagsAndFunctions = new HashMap();\n         private final List listeners = new ArrayList();\n \n         private Locator locator;\n-        private StringBuffer buf;\n+        private StringBuffer cDataCollector;\n \n         private Stack stack = new Stack();\n \n-        private String tagName;\n-        private String tagClassName;\n-\n-        private String listenerClassName;\n-\n-        private String functionName;\n-        private String functionClassName;\n-        private String functionSignature;\n+        private String tagNameCData;\n+        private String tagClassCData;\n+        private String functionNameCData;\n+        private String functionClassCData;\n+        private String functionSignatureCData;\n+        private String listenerClassCData;\n \n         TldParser(ObjectWrapper wrapper) {\n             if (wrapper instanceof BeansWrapper) {\n@@ -632,132 +642,188 @@ public void setDocumentLocator(Locator locator) {\n             this.locator = locator;\n         }\n \n-        public void startElement(\n-            String nsuri,\n-            String localName,\n-            String qName,\n-            Attributes atts) {\n+        public void startElement(String nsUri, String localName, String qName, Attributes atts) {\n             stack.push(qName);\n             if (stack.size() == 3) {\n-                if (\"name\".equals(qName) || \"tagclass\".equals(qName) || \"tag-class\".equals(qName)\n-                        || \"listener-class\".equals(qName) || \"function-class\".equals(qName)\n-                        || \"function-signature\".equals(qName)) {\n-                    buf = new StringBuffer();\n+                if (NAME.equals(qName) || TAG_CLASS_LEGACY.equals(qName) || TAG_CLASS.equals(qName)\n+                        || LISTENER_CLASS.equals(qName) || FUNCTION_CLASS.equals(qName)\n+                        || FUNCTION_SIGNATURE.equals(qName)) {\n+                    cDataCollector = new StringBuffer();\n                 }\n             }\n         }\n \n         public void characters(char[] chars, int off, int len) {\n-            if (buf != null) {\n-                buf.append(chars, off, len);\n+            if (cDataCollector != null) {\n+                cDataCollector.append(chars, off, len);\n             }\n         }\n \n-        public void endElement(String nsuri, String localName, String qName)\n-            throws TLDParsingException {\n+        public void endElement(String nsuri, String localName, String qName) throws TLDParsingException {\n             if(!stack.peek().equals(qName)) {\n-                throw new TLDParsingException(\"Invalid element nesting.\", locator);\n+                throw new TLDParsingException(\"Unbalanced tag nesting at \\\"\" + qName + \"\\\" end-tag.\", locator);\n             }\n \n             if (stack.size() == 3) {\n-                if (\"name\".equals(qName)) {\n-                    if (\"tag\".equals(stack.get(1))) {\n-                        tagName = buf.toString();\n-                        buf = null;\n+                if (NAME.equals(qName)) {\n+                    if (TAG.equals(stack.get(1))) {\n+                        tagNameCData = cDataCollector.toString();\n+                        cDataCollector = null;\n                     }\n-                    else if (\"function\".equals(stack.get(1))) {\n-                        functionName = buf.toString();\n-                        buf = null;\n+                    else if (FUNCTION.equals(stack.get(1))) {\n+                        functionNameCData = cDataCollector.toString();\n+                        cDataCollector = null;\n                     }\n                 }\n-                else if (\"tagclass\".equals(qName) || \"tag-class\".equals(qName)) {\n-                    tagClassName = buf.toString();\n-                    buf = null;\n+                else if (TAG_CLASS_LEGACY.equals(qName) || TAG_CLASS.equals(qName)) {\n+                    tagClassCData = cDataCollector.toString();\n+                    cDataCollector = null;\n                 }\n-                else if (\"listener-class\".equals(qName)) {\n-                    listenerClassName = buf.toString();\n-                    buf = null;\n+                else if (LISTENER_CLASS.equals(qName)) {\n+                    listenerClassCData = cDataCollector.toString();\n+                    cDataCollector = null;\n                 }\n-                else if (\"function-class\".equals(qName)) {\n-                    functionClassName = buf.toString();\n-                    buf = null;\n+                else if (FUNCTION_CLASS.equals(qName)) {\n+                    functionClassCData = cDataCollector.toString();\n+                    cDataCollector = null;\n                 }\n-                else if (\"function-signature\".equals(qName)) {\n-                    functionSignature = buf.toString();\n-                    buf = null;\n+                else if (FUNCTION_SIGNATURE.equals(qName)) {\n+                    functionSignatureCData = cDataCollector.toString();\n+                    cDataCollector = null;\n                 }\n-            }\n-            else if (stack.size() == 2) {\n-                if (\"tag\".equals(qName)) {\n+            } else if (stack.size() == 2) {\n+                if (TAG.equals(qName)) {\n+                    checkChildElementNotNull(qName, NAME, tagNameCData);\n+                    checkChildElementNotNull(qName, TAG_CLASS, tagClassCData);\n+                    \n+                    final Class tagClass = resoveClassFromTLD(tagClassCData, \"custom tag\", tagNameCData);\n+                    \n+                    final TemplateModel impl;\n                     try {\n-                        Class tagClass = ClassUtil.forName(tagClassName);\n-                        TemplateModel impl;\n                         if (Tag.class.isAssignableFrom(tagClass)) {\n-                            impl = new TagTransformModel(tagClass); \n+                            impl = new TagTransformModel(tagClass);\n                         }\n                         else {\n-                            impl = new SimpleTagDirectiveModel(tagClass); \n+                            impl = new SimpleTagDirectiveModel(tagClass);\n                         }\n-                        tagsAndFunctions.put(tagName, impl);\n-                        tagName = null;\n-                        tagClassName = null;\n+                    } catch (IntrospectionException e) {\n+                        throw new TLDParsingException(\n+                                \"JavaBean introspection failed on custom tag class \" + tagClassCData,\n+                                locator,\n+                                e);\n                     }\n-                    catch (IntrospectionException e) {\n+                    \n+                    tagsAndFunctions.put(tagNameCData, impl);\n+                    \n+                    tagNameCData = null;\n+                    tagClassCData = null;\n+                } else if (FUNCTION.equals(qName) && beansWrapper != null) {\n+                    checkChildElementNotNull(qName, FUNCTION_CLASS, functionClassCData);\n+                    checkChildElementNotNull(qName, FUNCTION_SIGNATURE, functionSignatureCData);\n+                    checkChildElementNotNull(qName, NAME, functionNameCData);\n+                    \n+                    final Class functionClass = resoveClassFromTLD(\n+                            functionClassCData, \"custom EL function\", functionNameCData);\n+                    \n+                    final Method functionMethod;\n+                    try {\n+                        functionMethod = TaglibMethodUtil.getMethodByFunctionSignature(\n+                                functionClass, functionSignatureCData);\n+                    } catch (Exception e) {\n                         throw new TLDParsingException(\n-                            \"Can't introspect tag class \" + tagClassName,\n-                            locator,\n-                            e);\n+                                \"Error while trying to resolve signature \" + StringUtil.jQuote(functionSignatureCData)\n+                                + \" on class \" + StringUtil.jQuote(functionClass.getName())\n+                                + \" for custom EL function \" + StringUtil.jQuote(functionNameCData) + \".\",\n+                                locator,\n+                                e);\n                     }\n-                    catch (ClassNotFoundException e) {\n+                    \n+                    final int modifiers =  functionMethod.getModifiers ();\n+                    if (!Modifier.isPublic (modifiers) || !Modifier.isStatic (modifiers)) {\n                         throw new TLDParsingException(\n-                            \"Can't find tag class \" + tagClassName,\n-                            locator,\n-                            e);\n+                                \"The custom EL function method must be public and static: \" + functionMethod,\n+                                locator);\n                     }\n-                }\n-                else if (\"listener\".equals(qName)) {\n+                    \n+                    final TemplateMethodModelEx methodModel;\n                     try {\n-                        listeners.add(ClassUtil.forName(listenerClassName).newInstance());\n+                        methodModel = beansWrapper.wrap(null, functionMethod);\n+                    } catch (Exception e) {\n+                        throw new TLDParsingException(\n+                                \"FreeMarker object wrapping failed on method : \" + functionMethod,\n+                                locator);\n                     }\n-                    catch(Exception e) {\n+                    \n+                    tagsAndFunctions.put(functionNameCData, methodModel);\n+                    \n+                    functionNameCData = null;\n+                    functionClassCData = null;\n+                    functionSignatureCData = null;\n+                } else if (LISTENER.equals(qName)) {\n+                    checkChildElementNotNull(qName, LISTENER_CLASS, listenerClassCData);\n+                    \n+                    final Class listenerClass = resoveClassFromTLD(listenerClassCData, LISTENER, null);\n+                    \n+                    final Object listener;\n+                    try {\n+                        listener = listenerClass.newInstance();\n+                    } catch (Exception e) {\n                         throw new TLDParsingException(\n-                            \"Can't instantiate listener class \" + listenerClassName,\n+                            \"Failed to create new instantiate from listener class \" + listenerClassCData,\n                             locator,\n                             e);\n                     }\n-                }\n-                else if (\"function\".equals(qName) && beansWrapper != null) {\n-                        Class functionClass;\n-                        try {\n-                            functionClass = ClassUtil.forName(functionClassName);\n-                        } catch (ClassNotFoundException e) {\n-                            throw new TLDParsingException(\n-                                    \"Can't find class \" + StringUtil.jQuote(functionClassName)\n-                                    + \" for custom EL function \" + StringUtil.jQuote(functionName) + \".\",\n-                                    locator,\n-                                    e);\n-                        }\n-                        Method functionMethod;\n-                        try {\n-                            functionMethod = TaglibMethodUtil.getMethodByFunctionSignature(functionClass, functionSignature);\n-                        } catch (Exception e) {\n-                            throw new TLDParsingException(\n-                                    \"Error while trying to resolve signature \" + StringUtil.jQuote(functionSignature)\n-                                    + \" on class \" + StringUtil.jQuote(functionClass.getName())\n-                                    + \" for custom EL function \" + StringUtil.jQuote(functionName) + \".\",\n-                                    locator,\n-                                    e);\n-                        }\n-                        int modifiers =  functionMethod.getModifiers ();\n-                        if (!Modifier.isPublic (modifiers) || !Modifier.isStatic (modifiers)) {\n-                            throw new IllegalArgumentException(\"The function method is non-public or non-static.\");\n-                        }\n-                        tagsAndFunctions.put(functionName, beansWrapper.wrap(null, functionMethod));\n+                    \n+                    listeners.add(listener);\n+                    \n+                    listenerClassCData = null;\n                 }\n             }\n \n             stack.pop();\n         }\n+\n+        private void checkChildElementNotNull(String parentElementName, String childElementName, String value)\n+                throws TLDParsingException {\n+            if (value == null) {\n+                throw new TLDParsingException(\n+                        \"Missing required \\\"\" + childElementName + \"\\\" element inside the \\\"\"\n+                        + parentElementName + \"\\\" element.\", locator);\n+            }\n+        }\n+\n+        private Class resoveClassFromTLD(String className, String entryType, String entryName)\n+                throws TLDParsingException {\n+            try {\n+                return ClassUtil.forName(className);\n+            } catch (LinkageError e) {\n+                throw newTLDEntryClassLoadingException(e, className, entryType, entryName);\n+            } catch (ClassNotFoundException e) {\n+                throw newTLDEntryClassLoadingException(e, className, entryType, entryName);\n+            }            \n+        }\n+        \n+        private TLDParsingException newTLDEntryClassLoadingException(Throwable e, String className,\n+                String entryType, String entryName)\n+                throws TLDParsingException {\n+            int dotIdx = className.lastIndexOf('.');\n+            if (dotIdx != -1) {\n+                dotIdx = className.lastIndexOf('.', dotIdx - 1);\n+            }\n+            boolean looksLikeNestedClass =\n+                    dotIdx != -1 && className.length() > dotIdx + 1\n+                    && Character.isUpperCase(className.charAt(dotIdx + 1));\n+            return new TLDParsingException(\n+                    (e instanceof ClassNotFoundException ? \"Not found class \" : \"Can't load class \")\n+                    + StringUtil.jQuote(className) + \" for \" + entryType\n+                    + (entryName != null ? \" \" + StringUtil.jQuote(entryName) : \"\") + \".\"\n+                    + (looksLikeNestedClass\n+                            ? \" Hint: Before nested classes, use \\\"$\\\", not \\\".\\\".\"\n+                            : \"\"),\n+                    locator,\n+                    e);\n+        }\n+        \n     }\n \n     private static final Map dtds = new HashMap();\n@@ -815,16 +881,18 @@ public InputSource resolveEntity(String publicId, String systemId)\n      *  Java 1.6 and earlier.\n      */\n     private static class TLDParsingException extends SAXParseException {\n+        \n+        private final Throwable cause;\n \n         TLDParsingException(String message, Locator locator) {\n             this(message, locator, null);\n         }\n         \n-        TLDParsingException(String message, Locator locator, Exception e) {\n-            super(message, locator, e);\n+        TLDParsingException(String message, Locator locator, Throwable e) {\n+            super(message, locator, e instanceof Exception ? (Exception) e : new Exception(\"Unchecked exception; see cause\", e));\n+            cause = e;\n         }\n \n-        @Override\n         public String toString() {\n             StringBuffer sb = new StringBuffer(getClass().getName());\n             sb.append(\": \");\n@@ -871,10 +939,9 @@ public String toString() {\n             return sb.toString();\n         }\n \n-        @Override\n         public Throwable getCause() {\n-            Throwable cause = super.getCause();\n-            return cause == null ? getException() : cause;\n+            Throwable superCause = super.getCause();\n+            return superCause == null ? this.cause : superCause;\n         }\n         \n     }",
                "raw_url": "https://github.com/apache/freemarker/raw/51c4c5ecab816c60e6f0580535ce6c5cb8ddc98b/src/main/java/freemarker/ext/jsp/TaglibFactory.java",
                "sha": "4d5e924c3191c317a93fd565ade4c148f6a4605e",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/freemarker/blob/51c4c5ecab816c60e6f0580535ce6c5cb8ddc98b/src/manual/book.xml",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/manual/book.xml?ref=51c4c5ecab816c60e6f0580535ce6c5cb8ddc98b",
                "deletions": 1,
                "filename": "src/manual/book.xml",
                "patch": "@@ -21551,14 +21551,18 @@ TemplateModel x = env.getVariable(\"x\");  // get variable x</programlisting>\n           <itemizedlist>\n             <listitem>\n               <para><literal>FreemarkerServlet</literal> now supports custom\n-              EL functions defined in the TLD-s (via the\n+              JSP EL functions defined in TLD-s (via the\n               <literal>function</literal> XML element). Earlier it has ignored\n               them. The custom EL function can be called like a Java method,\n               for example: <literal>&lt;#assign\n               u=JspTaglibs[\"/WEB-INF/utils.tld\"]&gt; ... ${u.truncate(title,\n               25)}</literal>.</para>\n             </listitem>\n \n+            <listitem>\n+              <para>Improved JSP TLD parsing error message quality.</para>\n+            </listitem>\n+\n             <listitem>\n               <para>Added <literal>TemplateMethodModelEx\n               BeansWrapper.wrap(Object object, Method method)</literal> for",
                "raw_url": "https://github.com/apache/freemarker/raw/51c4c5ecab816c60e6f0580535ce6c5cb8ddc98b/src/manual/book.xml",
                "sha": "08a119271beda5b6b62bb183c98f5eeeb3a52ea7",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/freemarker/blob/51c4c5ecab816c60e6f0580535ce6c5cb8ddc98b/src/test/java/freemarker/ext/jsp/mocked/TestFunctions.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/test/java/freemarker/ext/jsp/mocked/TestFunctions.java?ref=51c4c5ecab816c60e6f0580535ce6c5cb8ddc98b",
                "deletions": 1,
                "filename": "src/test/java/freemarker/ext/jsp/mocked/TestFunctions.java",
                "patch": "@@ -1,7 +1,7 @@\n package freemarker.ext.jsp.mocked;\n \n public final class TestFunctions {\n-\n+    \n     private TestFunctions() {\n         // Not meant to be instantiated\n     }",
                "raw_url": "https://github.com/apache/freemarker/raw/51c4c5ecab816c60e6f0580535ce6c5cb8ddc98b/src/test/java/freemarker/ext/jsp/mocked/TestFunctions.java",
                "sha": "553240b5afbd6d0d0b7ec8915220a2261c4170d4",
                "status": "modified"
            }
        ],
        "message": "Better TLD parsing error messages, fixed NPE-s on invalid TLD-s, fixed class loading Error catching, some clean up of old code.",
        "parent": "https://github.com/apache/freemarker/commit/d130d9910cd67cbe0fb26c33a0a70a33734ff997",
        "patched_files": [
            "book.xml",
            "TaglibFactory.java"
        ],
        "repo": "freemarker",
        "unit_tests": [
            "TestFunctions.java"
        ]
    },
    "freemarker_53da2fb": {
        "bug_id": "freemarker_53da2fb",
        "commit": "https://github.com/apache/freemarker/commit/53da2fb0be728416c44f8b158a6b96f9cd61e0f7",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/freemarker/blob/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/main/java/freemarker/core/BreakOrContinueException.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/BreakOrContinueException.java?ref=53da2fb0be728416c44f8b158a6b96f9cd61e0f7",
                "deletions": 1,
                "filename": "src/main/java/freemarker/core/BreakOrContinueException.java",
                "patch": "@@ -3,7 +3,7 @@\n /**\n  * Used for implementing #break and #continue. \n  */\n-class BreakOrContinueException extends RuntimeException {\n+class BreakOrContinueException extends FlowControlException {\n     \n     static final BreakOrContinueException BREAK_INSTANCE = new BreakOrContinueException();\n     static final BreakOrContinueException CONTINUE_INSTANCE = new BreakOrContinueException();",
                "raw_url": "https://github.com/apache/freemarker/raw/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/main/java/freemarker/core/BreakOrContinueException.java",
                "sha": "222bc286244b6a7e276e102809bd7b7f2f018273",
                "status": "modified"
            },
            {
                "additions": 56,
                "blob_url": "https://github.com/apache/freemarker/blob/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/main/java/freemarker/core/Configurable.java",
                "changes": 58,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/Configurable.java?ref=53da2fb0be728416c44f8b158a6b96f9cd61e0f7",
                "deletions": 2,
                "filename": "src/main/java/freemarker/core/Configurable.java",
                "patch": "@@ -60,6 +60,7 @@\n import freemarker.template.Template;\n import freemarker.template.TemplateException;\n import freemarker.template.TemplateExceptionHandler;\n+import freemarker.template.TemplateMethodModel;\n import freemarker.template.TemplateModel;\n import freemarker.template.Version;\n import freemarker.template._TemplateAPI;\n@@ -247,6 +248,13 @@\n     /** Alias to the {@code ..._SNAKE_CASE} variation due to backward compatibility constraints. @since 2.3.22 */\n     public static final String LOG_TEMPLATE_EXCEPTIONS_KEY = LOG_TEMPLATE_EXCEPTIONS_KEY_SNAKE_CASE;\n \n+    /** Legacy, snake case ({@code like_this}) variation of the setting name. @since 2.3.27 */\n+    public static final String WRAP_UNCHECKED_EXCEPTIONS_KEY_SNAKE_CASE = \"wrap_unchecked_exceptions\";\n+    /** Modern, camel case ({@code likeThis}) variation of the setting name. @since 2.3.27 */\n+    public static final String WRAP_UNCHECKED_EXCEPTIONS_KEY_CAMEL_CASE = \"wrapUncheckedExceptions\";\n+    /** Alias to the {@code ..._SNAKE_CASE} variation due to backward compatibility constraints. @since 2.3.27 */\n+    public static final String WRAP_UNCHECKED_EXCEPTIONS_KEY = WRAP_UNCHECKED_EXCEPTIONS_KEY_SNAKE_CASE;\n+    \n     /** Legacy, snake case ({@code like_this}) variation of the setting name. @since 2.3.25 */\n     public static final String LAZY_IMPORTS_KEY_SNAKE_CASE = \"lazy_imports\";\n     /** Modern, camel case ({@code likeThis}) variation of the setting name. @since 2.3.25 */\n@@ -307,7 +315,8 @@\n         TEMPLATE_EXCEPTION_HANDLER_KEY_SNAKE_CASE,\n         TIME_FORMAT_KEY_SNAKE_CASE,\n         TIME_ZONE_KEY_SNAKE_CASE,\n-        URL_ESCAPING_CHARSET_KEY_SNAKE_CASE\n+        URL_ESCAPING_CHARSET_KEY_SNAKE_CASE,\n+        WRAP_UNCHECKED_EXCEPTIONS_KEY_SNAKE_CASE\n     };\n     \n     private static final String[] SETTING_NAMES_CAMEL_CASE = new String[] {\n@@ -338,7 +347,8 @@\n         TEMPLATE_EXCEPTION_HANDLER_KEY_CAMEL_CASE,\n         TIME_FORMAT_KEY_CAMEL_CASE,\n         TIME_ZONE_KEY_CAMEL_CASE,\n-        URL_ESCAPING_CHARSET_KEY_CAMEL_CASE\n+        URL_ESCAPING_CHARSET_KEY_CAMEL_CASE,\n+        WRAP_UNCHECKED_EXCEPTIONS_KEY_CAMEL_CASE\n     };\n \n     private Configurable parent;\n@@ -370,6 +380,7 @@\n     private Boolean showErrorTips;\n     private Boolean apiBuiltinEnabled;\n     private Boolean logTemplateExceptions;\n+    private Boolean wrapUncheckedExceptions;\n     private Map<String, ? extends TemplateDateFormatFactory> customDateFormats;\n     private Map<String, ? extends TemplateNumberFormatFactory> customNumberFormats;\n     private LinkedHashMap<String, String> autoImports;\n@@ -425,6 +436,8 @@ protected Configurable(Version incompatibleImprovements) {\n         \n         templateExceptionHandler = _TemplateAPI.getDefaultTemplateExceptionHandler(incompatibleImprovements);\n         properties.setProperty(TEMPLATE_EXCEPTION_HANDLER_KEY, templateExceptionHandler.getClass().getName());\n+        \n+        wrapUncheckedExceptions = _TemplateAPI.getDefaultWrapUncheckedExceptions(incompatibleImprovements);\n \n         attemptExceptionReporter = _TemplateAPI.getDefaultAttemptExceptionReporter(incompatibleImprovements);\n         \n@@ -1690,6 +1703,44 @@ public boolean getLogTemplateExceptions() {\n     public boolean isLogTemplateExceptionsSet() {\n         return logTemplateExceptions != null;\n     }\n+\n+    /**\n+     * Specifies if unchecked exceptions thrown during expression evaluation or during executing custom directives (and\n+     * transform) will be wrapped into {@link TemplateException}-s, or will bubble up to the caller of\n+     * {@link Template#process(Object, Writer, ObjectWrapper)} as is. The default is {@code false} for backward\n+     * compatibility (as some applications catch certain unchecked exceptions thrown by the template processing to do\n+     * something special), but the recommended value is {@code true}.    \n+     * When this is {@code true}, the unchecked exceptions will be wrapped into a {@link TemplateException}-s, thus the\n+     * exception will include the location in the template (not\n+     * just the Java stack trace). Another consequence of the wrapping is that the {@link TemplateExceptionHandler} will\n+     * be invoked for the exception (as that only handles {@link TemplateException}-s, it wasn't invoked for unchecked\n+     * exceptions). When this setting is {@code false}, unchecked exception will be thrown by\n+     * {@link Template#process(Object, Writer, ObjectWrapper)}.\n+     * Note that plain Java methods called from templates aren't user defined {@link TemplateMethodModel}-s, and have\n+     * always wrapped the thrown exception into {@link TemplateException}, regardless of this setting.  \n+     * \n+     * @since 2.3.27\n+     */\n+    public void setWrapUncheckedExceptions(boolean wrapUncheckedExceptions) {\n+        this.wrapUncheckedExceptions = wrapUncheckedExceptions;\n+    }\n+    \n+    /**\n+     * The getter pair of {@link #setWrapUncheckedExceptions(boolean)}.\n+     * \n+     * @since 2.3.27\n+     */\n+    public boolean getWrapUncheckedExceptions() {\n+        return wrapUncheckedExceptions != null ? wrapUncheckedExceptions\n+                : (parent != null ? parent.getWrapUncheckedExceptions() : false /* [2.4] true */);\n+    }\n+\n+    /**\n+     * @since 2.3.27\n+     */\n+    public boolean isWrapUncheckedExceptionsSet() {\n+        return wrapUncheckedExceptions != null;\n+    }\n     \n     /**\n      * The getter pair of {@link #setLazyImports(boolean)}.\n@@ -2647,6 +2698,9 @@ public void setSetting(String name, String value) throws TemplateException {\n             } else if (LOG_TEMPLATE_EXCEPTIONS_KEY_SNAKE_CASE.equals(name)\n                     || LOG_TEMPLATE_EXCEPTIONS_KEY_CAMEL_CASE.equals(name)) {\n                 setLogTemplateExceptions(StringUtil.getYesNo(value));\n+            } else if (WRAP_UNCHECKED_EXCEPTIONS_KEY_SNAKE_CASE.equals(name)\n+                    || WRAP_UNCHECKED_EXCEPTIONS_KEY_CAMEL_CASE.equals(name)) {\n+                setWrapUncheckedExceptions(StringUtil.getYesNo(value));\n             } else if (LAZY_AUTO_IMPORTS_KEY_SNAKE_CASE.equals(name) || LAZY_AUTO_IMPORTS_KEY_CAMEL_CASE.equals(name)) {\n                 setLazyAutoImports(value.equals(NULL) ? null : Boolean.valueOf(StringUtil.getYesNo(value)));\n             } else if (LAZY_IMPORTS_KEY_SNAKE_CASE.equals(name) || LAZY_IMPORTS_KEY_CAMEL_CASE.equals(name)) {",
                "raw_url": "https://github.com/apache/freemarker/raw/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/main/java/freemarker/core/Configurable.java",
                "sha": "f1a905b59a7747e5b9930ca8b186df9ea09a20dd",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/freemarker/blob/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/main/java/freemarker/core/Environment.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/Environment.java?ref=53da2fb0be728416c44f8b158a6b96f9cd61e0f7",
                "deletions": 3,
                "filename": "src/main/java/freemarker/core/Environment.java",
                "patch": "@@ -438,6 +438,22 @@ public Collection getLocalVariableNames() {\n         }\n         try {\n             directiveModel.execute(this, args, outArgs, nested);\n+        } catch (FlowControlException e) {\n+            throw e;\n+        } catch (TemplateException e) {\n+            throw e;\n+        } catch (IOException e) {\n+            // For backward compatibility, we assume that this is because the output Writer has thrown it.\n+            throw e;\n+        } catch (Exception e) {\n+            if (EvalUtil.shouldWrapUncheckedException(e, this)) {\n+                throw new _MiscTemplateException(\n+                        e, this, \"Directive has thrown an unchecked exception; see the cause exception.\");\n+            } else if (e instanceof RuntimeException) {\n+                throw (RuntimeException) e;\n+            } else {\n+                throw new UndeclaredThrowableException(e);\n+            }\n         } finally {\n             if (outArgs.length > 0) {\n                 localContextStack.pop();\n@@ -485,12 +501,17 @@ void visitAndTransform(TemplateElement[] elementBuffer,\n                     throw e;\n                 } catch (IOException e) {\n                     throw e;\n-                } catch (RuntimeException e) {\n-                    throw e;\n                 } catch (Error e) {\n                     throw e;\n                 } catch (Throwable e) {\n-                    throw new UndeclaredThrowableException(e);\n+                    if (EvalUtil.shouldWrapUncheckedException(e, this)) {\n+                        throw new _MiscTemplateException(\n+                                e, this, \"Transform has thrown an unchecked exception; see the cause exception.\");\n+                    } else if (e instanceof RuntimeException) {\n+                        throw (RuntimeException) e;\n+                    } else {\n+                        throw new UndeclaredThrowableException(e);\n+                    }\n                 }\n             } finally {\n                 out = prevOut;",
                "raw_url": "https://github.com/apache/freemarker/raw/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/main/java/freemarker/core/Environment.java",
                "sha": "5faacddf9e0a35c997e95cc0468f2c5b5fd770b6",
                "status": "modified"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/freemarker/blob/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/main/java/freemarker/core/EvalUtil.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/EvalUtil.java?ref=53da2fb0be728416c44f8b158a6b96f9cd61e0f7",
                "deletions": 0,
                "filename": "src/main/java/freemarker/core/EvalUtil.java",
                "patch": "@@ -19,6 +19,7 @@\n \n package freemarker.core;\n \n+import java.lang.reflect.InvocationTargetException;\n import java.util.Date;\n \n import freemarker.ext.beans.BeanModel;\n@@ -32,6 +33,7 @@\n import freemarker.template.TemplateNumberModel;\n import freemarker.template.TemplateScalarModel;\n import freemarker.template.TemplateSequenceModel;\n+import freemarker.template._TemplateAPI;\n \n /**\n  * Internally used static utilities for evaluation expressions.\n@@ -579,5 +581,26 @@ static ArithmeticEngine getArithmeticEngine(Environment env, TemplateObject tObj\n                 ? env.getArithmeticEngine()\n                 : tObj.getTemplate().getParserConfiguration().getArithmeticEngine();\n     }\n+\n+    static boolean shouldWrapUncheckedException(Throwable e, Environment env) {\n+        if (FlowControlException.class.isInstance(e)) {\n+            return false;\n+        }\n+        if (env.getWrapUncheckedExceptions()) {\n+            return true;\n+        } else if (env.getConfiguration().getIncompatibleImprovements().intValue() >= _TemplateAPI.VERSION_INT_2_3_27) {\n+            // We have to judge if we dare to wrap this exception, or it's too likely that some applications try to\n+            // catch it around the template processing to do something special. For the same reason, we only wrap very\n+            // frequent exceptions.\n+            // We use \"==\" instead of \"instanceof\" deliberately; user defined subclasses must not match.\n+            Class<? extends Throwable> c = e.getClass();\n+            return c == NullPointerException.class\n+                    || c == ClassCastException.class\n+                    || c == IndexOutOfBoundsException.class\n+                    || c == InvocationTargetException.class;\n+        } else {\n+            return false;\n+        }\n+    }\n     \n }",
                "raw_url": "https://github.com/apache/freemarker/raw/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/main/java/freemarker/core/EvalUtil.java",
                "sha": "4b03e27629517de31f76ceddee3b6f5fd3771839",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/freemarker/blob/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/main/java/freemarker/core/Expression.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/Expression.java?ref=53da2fb0be728416c44f8b158a6b96f9cd61e0f7",
                "deletions": 1,
                "filename": "src/main/java/freemarker/core/Expression.java",
                "patch": "@@ -32,6 +32,7 @@\n import freemarker.template.TemplateNumberModel;\n import freemarker.template.TemplateScalarModel;\n import freemarker.template.TemplateSequenceModel;\n+import freemarker.template.utility.UndeclaredThrowableException;\n \n /**\n  * <b>Internal API - subject to change:</b> Represent expression nodes in the parsed template.\n@@ -78,7 +79,22 @@ public final TemplateModel getAsTemplateModel(Environment env) throws TemplateEx\n     }\n     \n     final TemplateModel eval(Environment env) throws TemplateException {\n-        return constantValue != null ? constantValue : _eval(env);\n+        try {\n+            return constantValue != null ? constantValue : _eval(env);\n+        } catch (FlowControlException e) {\n+            throw e;\n+        } catch (TemplateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            if (env != null && EvalUtil.shouldWrapUncheckedException(e, env)) {\n+                throw new _MiscTemplateException(\n+                        this, e, env, \"Expression has thrown an unchecked exception; see the cause exception.\");\n+            } else if (e instanceof RuntimeException) {\n+                throw (RuntimeException) e;\n+            } else {\n+                throw new UndeclaredThrowableException(e);\n+            }\n+        }\n     }\n     \n     String evalAndCoerceToPlainText(Environment env) throws TemplateException {",
                "raw_url": "https://github.com/apache/freemarker/raw/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/main/java/freemarker/core/Expression.java",
                "sha": "45da3c95435d5ca2fbcea5c3ff643b61bf85ee86",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/freemarker/blob/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/main/java/freemarker/core/FlowControlException.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/FlowControlException.java?ref=53da2fb0be728416c44f8b158a6b96f9cd61e0f7",
                "deletions": 0,
                "filename": "src/main/java/freemarker/core/FlowControlException.java",
                "patch": "@@ -0,0 +1,9 @@\n+package freemarker.core;\n+\n+/**\n+ * Exception that's not really an exception, just used for flow control.\n+ */\n+@SuppressWarnings(\"serial\")\n+class FlowControlException extends RuntimeException {\n+    //\n+}",
                "raw_url": "https://github.com/apache/freemarker/raw/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/main/java/freemarker/core/FlowControlException.java",
                "sha": "7865dc5f111de2489e986fd06957ada45ec5a96b",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/freemarker/blob/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/main/java/freemarker/core/ReturnInstruction.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/ReturnInstruction.java?ref=53da2fb0be728416c44f8b158a6b96f9cd61e0f7",
                "deletions": 1,
                "filename": "src/main/java/freemarker/core/ReturnInstruction.java",
                "patch": "@@ -62,7 +62,7 @@ String getNodeTypeSymbol() {\n         return \"#return\";\n     }\n     \n-    public static class Return extends RuntimeException {\n+    public static class Return extends FlowControlException {\n         static final Return INSTANCE = new Return();\n         private Return() {\n         }",
                "raw_url": "https://github.com/apache/freemarker/raw/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/main/java/freemarker/core/ReturnInstruction.java",
                "sha": "8b5e9233b3bb90e5f63b2816ffde094ffaf2296b",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/freemarker/blob/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/main/java/freemarker/core/TemplateConfiguration.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/TemplateConfiguration.java?ref=53da2fb0be728416c44f8b158a6b96f9cd61e0f7",
                "deletions": 0,
                "filename": "src/main/java/freemarker/core/TemplateConfiguration.java",
                "patch": "@@ -198,6 +198,9 @@ public void merge(TemplateConfiguration tc) {\n         if (tc.isLogTemplateExceptionsSet()) {\n             setLogTemplateExceptions(tc.getLogTemplateExceptions());\n         }\n+        if (tc.isWrapUncheckedExceptionsSet()) {\n+            setWrapUncheckedExceptions(tc.getWrapUncheckedExceptions());\n+        }\n         if (tc.isNamingConventionSet()) {\n             setNamingConvention(tc.getNamingConvention());\n         }\n@@ -331,6 +334,9 @@ public void apply(Template template) {\n         if (isLogTemplateExceptionsSet() && !template.isLogTemplateExceptionsSet()) {\n             template.setLogTemplateExceptions(getLogTemplateExceptions());\n         }\n+        if (isWrapUncheckedExceptionsSet() && !template.isWrapUncheckedExceptionsSet()) {\n+            template.setWrapUncheckedExceptions(getWrapUncheckedExceptions());\n+        }\n         if (isNewBuiltinClassResolverSet() && !template.isNewBuiltinClassResolverSet()) {\n             template.setNewBuiltinClassResolver(getNewBuiltinClassResolver());\n         }\n@@ -634,6 +640,7 @@ private boolean hasAnyConfigurableSet() {\n                 || isLazyAutoImportsSet()\n                 || isLocaleSet()\n                 || isLogTemplateExceptionsSet()\n+                || isWrapUncheckedExceptionsSet()\n                 || isNewBuiltinClassResolverSet()\n                 || isNumberFormatSet()\n                 || isObjectWrapperSet()",
                "raw_url": "https://github.com/apache/freemarker/raw/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/main/java/freemarker/core/TemplateConfiguration.java",
                "sha": "0835239d8dfb25d20ce70e5ac5bfffa86da94946",
                "status": "modified"
            },
            {
                "additions": 60,
                "blob_url": "https://github.com/apache/freemarker/blob/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/main/java/freemarker/template/Configuration.java",
                "changes": 64,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/template/Configuration.java?ref=53da2fb0be728416c44f8b158a6b96f9cd61e0f7",
                "deletions": 4,
                "filename": "src/main/java/freemarker/template/Configuration.java",
                "patch": "@@ -22,6 +22,7 @@\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.lang.reflect.InvocationTargetException;\n import java.net.URLConnection;\n import java.text.DecimalFormat;\n import java.text.SimpleDateFormat;\n@@ -516,6 +517,7 @@\n     private boolean templateExceptionHandlerExplicitlySet;\n     private boolean attemptExceptionReporterExplicitlySet;\n     private boolean logTemplateExceptionsExplicitlySet;\n+    private boolean wrapUncheckedExceptionsExplicitlySet;\n     private boolean localeExplicitlySet;\n     private boolean defaultEncodingExplicitlySet;\n     private boolean timeZoneExplicitlySet;\n@@ -839,7 +841,15 @@ public Configuration() {\n      *       <li><p>\n      *          {@link BeansWrapper} and {@link DefaultObjectWrapper} now prefers the non-indexed JavaBean property\n      *          read method over the indexed read method when Java 8 exposes both;\n-     *          see {@link BeansWrapper#BeansWrapper(Version)}. \n+     *          see {@link BeansWrapper#BeansWrapper(Version)}.\n+     *       <li><p>\n+     *          The following unchecked exceptions (but not their subclasses) will be wrapped into\n+     *          {@link TemplateException}-s when thrown during evaluating expressions or calling directives:\n+     *          {@link NullPointerException}, {@link ClassCastException}, {@link IndexOutOfBoundsException}, and\n+     *          {@link InvocationTargetException}. The goal of this is the same as of setting\n+     *          {@link #setWrapUncheckedExceptions(boolean) wrap_unchecked_exceptions} to {@code true} (see more there),\n+     *          but this is more backward compatible, as it avoids wrapping unchecked exceptions that the calling\n+     *          application is likely to catch specifically (like application-specific unchecked exceptions).\n      *     </ul>\n      *   </li>\n      * </ul>\n@@ -983,25 +993,34 @@ private AttemptExceptionReporter getDefaultAttemptExceptionReporter() {\n     private boolean getDefaultLogTemplateExceptions() {\n         return getDefaultLogTemplateExceptions(getIncompatibleImprovements());\n     }\n+\n+    private boolean getDefaultWrapUncheckedExceptions() {\n+        return getDefaultWrapUncheckedExceptions(getIncompatibleImprovements());\n+    }\n     \n     private ObjectWrapper getDefaultObjectWrapper() {\n         return getDefaultObjectWrapper(getIncompatibleImprovements());\n     }\n     \n     // Package visible as Configurable needs this to initialize the field defaults.\n-    final static TemplateExceptionHandler getDefaultTemplateExceptionHandler(Version incompatibleImprovements) {\n+    static TemplateExceptionHandler getDefaultTemplateExceptionHandler(Version incompatibleImprovements) {\n         return TemplateExceptionHandler.DEBUG_HANDLER;\n     }\n \n     // Package visible as Configurable needs this to initialize the field defaults.\n-    final static AttemptExceptionReporter getDefaultAttemptExceptionReporter(Version incompatibleImprovements) {\n+    static AttemptExceptionReporter getDefaultAttemptExceptionReporter(Version incompatibleImprovements) {\n         return AttemptExceptionReporter.LOG_ERROR_REPORTER;\n     }\n     \n     // Package visible as Configurable needs this to initialize the field defaults.\n-    final static boolean getDefaultLogTemplateExceptions(Version incompatibleImprovements) {\n+    static boolean getDefaultLogTemplateExceptions(Version incompatibleImprovements) {\n         return true;\n     }\n+\n+    // Package visible as Configurable needs this to initialize the field defaults.\n+    static boolean getDefaultWrapUncheckedExceptions(Version incompatibleImprovements) {\n+        return false;\n+    }\n     \n     @Override\n     public Object clone() {\n@@ -1759,6 +1778,8 @@ public boolean isAttemptExceptionReporterExplicitlySet() {\n     }    \n     \n     /**\n+     * {@inheritDoc}\n+     * \n      * @since 2.3.22\n      */\n     @Override\n@@ -1790,6 +1811,36 @@ public boolean isLogTemplateExceptionsExplicitlySet() {\n         return logTemplateExceptionsExplicitlySet;\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     * \n+     * @since 2.3.27\n+     */\n+    @Override\n+    public void setWrapUncheckedExceptions(boolean value) {\n+        super.setWrapUncheckedExceptions(value);\n+        wrapUncheckedExceptionsExplicitlySet = true;\n+    }\n+    \n+    /**\n+     * @since 2.3.27\n+     */\n+    public void unsetWrapUncheckedExceptions() {\n+        if (wrapUncheckedExceptionsExplicitlySet) {\n+            setWrapUncheckedExceptions(getDefaultWrapUncheckedExceptions());\n+            wrapUncheckedExceptionsExplicitlySet = false;\n+        }\n+    }\n+    \n+    /**\n+     * Tells if {@link #setWrapUncheckedExceptions} (or equivalent) was already called on this instance.\n+     * \n+     * @since 2.3.27\n+     */\n+    public boolean isWrapUncheckedExceptionsExplicitlySet() {\n+        return wrapUncheckedExceptionsExplicitlySet;\n+    }\n+    \n     /**\n      * The getter pair of {@link #setStrictSyntaxMode}.\n      */\n@@ -1853,6 +1904,11 @@ public void setIncompatibleImprovements(Version incompatibleImprovements) {\n                 unsetLogTemplateExceptions();\n             }\n             \n+            if (!wrapUncheckedExceptionsExplicitlySet) {\n+                wrapUncheckedExceptionsExplicitlySet = true;\n+                unsetWrapUncheckedExceptions();\n+            }\n+            \n             if (!objectWrapperExplicitlySet) {\n                 objectWrapperExplicitlySet = true;\n                 unsetObjectWrapper();",
                "raw_url": "https://github.com/apache/freemarker/raw/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/main/java/freemarker/template/Configuration.java",
                "sha": "6e248814355b707493d1babdd47a4f0a8196d376",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/freemarker/blob/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/main/java/freemarker/template/TemplateDirectiveModel.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/template/TemplateDirectiveModel.java?ref=53da2fb0be728416c44f8b158a6b96f9cd61e0f7",
                "deletions": 1,
                "filename": "src/main/java/freemarker/template/TemplateDirectiveModel.java",
                "patch": "@@ -40,6 +40,11 @@\n     /**\n      * Executes this user-defined directive; called by FreeMarker when the user-defined\n      * directive is called in the template.\n+     * \n+     * <p>This method should not throw {@link RuntimeException}, nor {@link IOException} that wasn't caused by writing\n+     * to the output. Such exceptions should be catched inside the method and wrapped inside a\n+     * {@link TemplateException}. (Note that setting {@link Configuration#setWrapUncheckedExceptions(boolean)} to\n+     * {@code true} can mitigate the negative effects of implementations that throw {@link RuntimeException}-s.) \n      *\n      * @param env the current processing environment. Note that you can access\n      * the output {@link java.io.Writer Writer} by {@link Environment#getOut()}.\n@@ -61,7 +66,8 @@\n      *\n      * @throws TemplateException If any problem occurs that's not an {@link IOException} during writing the template\n      *          output.\n-     * @throws IOException When writing the template output fails.\n+     * @throws IOException When writing the template output fails. Other {@link IOException}-s should be catched in this\n+     *          method and wrapped into {@link TemplateException}.   \n      */\n    public void execute(Environment env, Map params, TemplateModel[] loopVars, \n             TemplateDirectiveBody body) throws TemplateException, IOException;",
                "raw_url": "https://github.com/apache/freemarker/raw/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/main/java/freemarker/template/TemplateDirectiveModel.java",
                "sha": "1de5867d930e16b1b1fe91934560165a4fed2db4",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/freemarker/blob/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/main/java/freemarker/template/TemplateTransformModel.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/template/TemplateTransformModel.java?ref=53da2fb0be728416c44f8b158a6b96f9cd61e0f7",
                "deletions": 2,
                "filename": "src/main/java/freemarker/template/TemplateTransformModel.java",
                "patch": "@@ -37,18 +37,30 @@\n       * transformation input to the transform. Each call to this method\n       * must return a new instance of the writer so that the transformation\n       * is thread-safe.\n+      * \n       * @param out the character stream to which to write the transformed output\n       * @param args the arguments (if any) passed to the transformation as a \n       * map of key/value pairs where the keys are strings and the arguments are\n       * TemplateModel instances. This is never null. If you need to convert the\n       * template models to POJOs, you can use the utility methods in the \n       * {@link DeepUnwrap} class.\n+      * \n       * @return a writer to which the engine will feed the transformation \n       * input, or null if the transform does not support nested content (body).\n       * The returned writer can implement the {@link TransformControl}\n       * interface if it needs advanced control over the evaluation of the \n       * transformation body.\n+      * \n+      * <p>This method should not throw {@link RuntimeException}, nor {@link IOException} that wasn't caused by writing\n+      * to the output. Such exceptions should be catched inside the method and wrapped inside a\n+      * {@link TemplateModelException}. (Note that setting {@link Configuration#setWrapUncheckedExceptions(boolean)} to\n+      * {@code true} can mitigate the negative effects of implementations that throw {@link RuntimeException}-s.)\n+      * \n+      * @throws TemplateModelException If any problem occurs that's not an {@link IOException} during writing the\n+      *          template output.\n+      * @throws IOException When writing the template output fails. Other {@link IOException}-s should be catched in\n+      *          this method and wrapped into {@link TemplateModelException}.   \n+      *  \n       */\n-     Writer getWriter(Writer out, Map args) \n-         throws TemplateModelException, IOException;\n+     Writer getWriter(Writer out, Map args) throws TemplateModelException, IOException;\n }",
                "raw_url": "https://github.com/apache/freemarker/raw/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/main/java/freemarker/template/TemplateTransformModel.java",
                "sha": "154bd57784016c0c9266dd2d5b2a5f82df8345aa",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/freemarker/blob/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/main/java/freemarker/template/_TemplateAPI.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/template/_TemplateAPI.java?ref=53da2fb0be728416c44f8b158a6b96f9cd61e0f7",
                "deletions": 1,
                "filename": "src/main/java/freemarker/template/_TemplateAPI.java",
                "patch": "@@ -81,7 +81,7 @@ public static TemplateExceptionHandler getDefaultTemplateExceptionHandler(\n             Version incompatibleImprovements) {\n         return Configuration.getDefaultTemplateExceptionHandler(incompatibleImprovements);\n     }\n-\n+    \n     public static AttemptExceptionReporter getDefaultAttemptExceptionReporter(\n             Version incompatibleImprovements) {\n         return Configuration.getDefaultAttemptExceptionReporter(incompatibleImprovements);\n@@ -91,6 +91,10 @@ public static boolean getDefaultLogTemplateExceptions(Version incompatibleImprov\n         return Configuration.getDefaultLogTemplateExceptions(incompatibleImprovements);\n     }\n \n+    public static boolean getDefaultWrapUncheckedExceptions(Version incompatibleImprovements) {\n+        return Configuration.getDefaultWrapUncheckedExceptions(incompatibleImprovements);\n+    }\n+    \n     public static TemplateLoader createDefaultTemplateLoader(Version incompatibleImprovements) {\n         return Configuration.createDefaultTemplateLoader(incompatibleImprovements);\n     }",
                "raw_url": "https://github.com/apache/freemarker/raw/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/main/java/freemarker/template/_TemplateAPI.java",
                "sha": "cf5f39c099d404fbd6369fab9003745a06da4ff7",
                "status": "modified"
            },
            {
                "additions": 60,
                "blob_url": "https://github.com/apache/freemarker/blob/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/manual/en_US/book.xml",
                "changes": 73,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/manual/en_US/book.xml?ref=53da2fb0be728416c44f8b158a6b96f9cd61e0f7",
                "deletions": 13,
                "filename": "src/manual/en_US/book.xml",
                "patch": "@@ -6300,9 +6300,9 @@ That's all.</programlisting>\n         beginning of the application (possibly servlet) life-cycle:</para>\n \n         <programlisting role=\"unspecified\">// Create your Configuration instance, and specify if up to what FreeMarker\n-// version (here 2.3.25) do you want to apply the fixes that are not 100%\n+// version (here 2.3.27) do you want to apply the fixes that are not 100%\n // backward-compatible. See the Configuration JavaDoc for details.\n-Configuration cfg = new Configuration(Configuration.VERSION_2_3_25);\n+Configuration cfg = new Configuration(Configuration.VERSION_2_3_27);\n \n // Specify the source where the template files come from. Here I set a\n // plain directory for it, but non-file-system sources are possible too:\n@@ -6317,7 +6317,10 @@ cfg.setDefaultEncoding(\"UTF-8\");\n cfg.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);\n \n // Don't log exceptions inside FreeMarker that it will thrown at you anyway:\n-cfg.setLogTemplateExceptions(false);</programlisting>\n+cfg.setLogTemplateExceptions(false);\n+\n+// Wrap unchecked exceptions thrown during template processing into TemplateException-s.\n+cfg.setWrapUncheckedExceptions(true);</programlisting>\n \n         <para>From now you should use this <emphasis>single</emphasis>\n         configuration instance (i.e., its a singleton). Note however that if a\n@@ -6589,11 +6592,12 @@ public class Test {\n         /* You should do this ONLY ONCE in the whole application life-cycle:        */\n \n         /* Create and adjust the configuration singleton */\n-        Configuration cfg = new Configuration(Configuration.VERSION_2_3_25);\n+        Configuration cfg = new Configuration(Configuration.VERSION_2_3_27);\n         cfg.setDirectoryForTemplateLoading(new File(\"<replaceable>/where/you/store/templates</replaceable>\"));\n         cfg.setDefaultEncoding(\"UTF-8\");\n         cfg.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);\n         cfg.setLogTemplateExceptions(false);\n+        cfg.setWrapUncheckedExceptions(true);\n \n         /* ------------------------------------------------------------------------ */\n         /* You usually do these for MULTIPLE TIMES in the application life-cycle:   */\n@@ -27053,10 +27057,12 @@ TemplateModel x = env.getVariable(\"x\");  // get variable x</programlisting>\n \n           <itemizedlist>\n             <listitem>\n-              <para>New directive: <literal>continue</literal>. This can be\n-              used inside the <literal>list</literal> directive to skip to the\n-              next iteration (similarly as in Java). <link\n-              linkend=\"ref.directive.list.continue\">See more...</link></para>\n+              <para>New directive: <literal>continue</literal> (<link\n+              xlink:href=\"https://sourceforge.net/p/freemarker/feature-requests/79/\">sf.net\n+              #79</link>). This can be used inside the <literal>list</literal>\n+              directive to skip to the next iteration (similarly as in Java).\n+              <link linkend=\"ref.directive.list.continue\">See\n+              more...</link></para>\n             </listitem>\n \n             <listitem>\n@@ -27073,11 +27079,12 @@ TemplateModel x = env.getVariable(\"x\");  // get variable x</programlisting>\n             </listitem>\n \n             <listitem>\n-              <para>New built-in, <literal>sequence</literal>. This can be\n-              used to work around situations where a listable value lacks some\n-              features that you need in the template (like it can't be listed\n-              twice, it can't tell its size, etc.), and you can't modify the\n-              data-model to fix the problem. <link\n+              <para>New built-in, <literal>sequence</literal> (<link\n+              xlink:href=\"https://issues.apache.org/jira/browse/FREEMARKER-73\">FREEMARKER-73</link>).\n+              This can be used to work around situations where a listable\n+              value lacks some features that you need in the template (like it\n+              can't be listed twice, it can't tell its size, etc.), and you\n+              can't modify the data-model to fix the problem. <link\n               linkend=\"ref_builtin_sequence\">See more...</link></para>\n             </listitem>\n \n@@ -27115,6 +27122,27 @@ TemplateModel x = env.getVariable(\"x\");  // get variable x</programlisting>\n           <title>Changes on the Java side</title>\n \n           <itemizedlist>\n+            <listitem>\n+              <para>Added new configuration setting,\n+              <literal>wrap_unchecked_exceptions</literal>\n+              (<literal>Configurable.setWrapUncheckedExceptions(boolean)</literal>).\n+              When this is <literal>true</literal>, unchecked exceptions\n+              thrown during evaluating an expression or during executing a\n+              custom directive will be wrapped into a\n+              <literal>TemplateException</literal>-s. The advantage of that is\n+              that thus the exception will include the location in the\n+              template (not just the Java stack trace), and the\n+              <literal>TemplateExceptionHandler</literal> will be invoked for\n+              it as well. When this setting is <literal>false</literal> (which\n+              is the default for backward compatibility), the the unchecked\n+              exception will bubble up and thrown by\n+              <literal>Template.process</literal>, just as in earlier\n+              versions. (Note that plain Java methods called from templates\n+              have always wrapped the thrown exception into\n+              <literal>TemplateException</literal>, regardless of this\n+              setting.)</para>\n+            </listitem>\n+\n             <listitem>\n               <para>Added new configuration setting,\n               <literal>attempt_exception_reporter</literal>\n@@ -27136,6 +27164,25 @@ TemplateModel x = env.getVariable(\"x\");  // get variable x</programlisting>\n               below for more information.</para>\n             </listitem>\n \n+            <listitem>\n+              <para>When <link\n+              linkend=\"pgui_config_incompatible_improvements_how_to_set\"><literal>incomplatible_improvements</literal></link>\n+              is set to 2.3.27 (or higher), the following unchecked exceptions\n+              (but not their subclasses) will be wrapped into\n+              <literal>TemplateException</literal>-s when thrown during\n+              evaluating expressions or calling directives:\n+              <literal>NullPointerException</literal>,\n+              <literal>ClassCastException</literal>,\n+              <literal>IndexOutOfBoundsException</literal>, and\n+              <literal>InvocationTargetException</literal>. The goal of this\n+              is the same as of setting the\n+              <literal>wrap_unchecked_exceptions</literal> setting to\n+              <literal>true</literal> (see that earlier), but this is more\n+              backward compatible, as it avoids wrapping unchecked exceptions\n+              that some application is likely to catch specifically (like\n+              application-specific unchecked exceptions).</para>\n+            </listitem>\n+\n             <listitem>\n               <para>Bug fixed: <literal>BeansWrapper</literal> and\n               <literal>DefaultObjectWrapper</literal>, starting from Java 8,",
                "raw_url": "https://github.com/apache/freemarker/raw/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/manual/en_US/book.xml",
                "sha": "5135257a16b0324dd721d7cdb614daf97283445c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/freemarker/blob/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/test/java/freemarker/core/TemplateConfigurationTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/test/java/freemarker/core/TemplateConfigurationTest.java?ref=53da2fb0be728416c44f8b158a6b96f9cd61e0f7",
                "deletions": 0,
                "filename": "src/test/java/freemarker/core/TemplateConfigurationTest.java",
                "patch": "@@ -165,6 +165,7 @@ public Number toNumber(String s) {\n         SETTING_ASSIGNMENTS.put(\"dateTimeFormat\", \"yyyy-#DDD-@HH:mm\");\n         SETTING_ASSIGNMENTS.put(\"locale\", NON_DEFAULT_LOCALE);\n         SETTING_ASSIGNMENTS.put(\"logTemplateExceptions\", false);\n+        SETTING_ASSIGNMENTS.put(\"wrapUncheckedExceptions\", true);\n         SETTING_ASSIGNMENTS.put(\"newBuiltinClassResolver\", TemplateClassResolver.ALLOWS_NOTHING_RESOLVER);\n         SETTING_ASSIGNMENTS.put(\"numberFormat\", \"0.0000\");\n         SETTING_ASSIGNMENTS.put(\"objectWrapper\", new SimpleObjectWrapper(ICI));",
                "raw_url": "https://github.com/apache/freemarker/raw/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/test/java/freemarker/core/TemplateConfigurationTest.java",
                "sha": "665f270a405c2d09099321a235df1fc5f813ca7c",
                "status": "modified"
            },
            {
                "additions": 139,
                "blob_url": "https://github.com/apache/freemarker/blob/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/test/java/freemarker/core/UncheckedExceptionHandlingTest.java",
                "changes": 139,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/test/java/freemarker/core/UncheckedExceptionHandlingTest.java?ref=53da2fb0be728416c44f8b158a6b96f9cd61e0f7",
                "deletions": 0,
                "filename": "src/test/java/freemarker/core/UncheckedExceptionHandlingTest.java",
                "patch": "@@ -0,0 +1,139 @@\n+package freemarker.core;\n+\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.*;\n+\n+import java.io.FilterWriter;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import freemarker.template.Configuration;\n+import freemarker.template.TemplateDirectiveBody;\n+import freemarker.template.TemplateDirectiveModel;\n+import freemarker.template.TemplateException;\n+import freemarker.template.TemplateMethodModelEx;\n+import freemarker.template.TemplateModel;\n+import freemarker.template.TemplateModelException;\n+import freemarker.template.TemplateScalarModel;\n+import freemarker.template.Version;\n+import freemarker.test.TemplateTest;\n+\n+public class UncheckedExceptionHandlingTest extends TemplateTest {\n+    \n+    @Override\n+    protected Object createDataModel() {\n+        return ImmutableMap.of(\n+                \"f\", MyErronousFunction.INSTANCE,\n+                \"d\", MyErronousDirective.INSTANCE,\n+                \"fd\", MyFilterDirective.INSTANCE);\n+    }\n+\n+    @Test\n+    public void testBackwardCompatible() {\n+        getConfiguration().setIncompatibleImprovements(Configuration.VERSION_2_3_26);\n+        assertErrorContains(\"${f()}\", MyUncheckedException.class);\n+        assertErrorContains(\"<@d />\", MyUncheckedException.class);\n+        assertErrorContains(\"${f('NPE')}\", NullPointerException.class);\n+        assertErrorContains(\"<@d type='NPE' />\", NullPointerException.class);\n+    }\n+\n+    @Test\n+    public void testMostlyBackwardCompatible() {\n+        getConfiguration().setIncompatibleImprovements(Configuration.VERSION_2_3_27);\n+        assertErrorContains(\"${f()}\", MyUncheckedException.class);\n+        assertErrorContains(\"<@d />\", MyUncheckedException.class);\n+        assertThat(\n+                assertErrorContains(\"${f('NPE')}\", TemplateException.class, \"thrown an unchecked\").getCause(),\n+                instanceOf(NullPointerException.class));\n+        assertThat(\n+                assertErrorContains(\"<@d type='NPE' />\", TemplateException.class, \"thrown an unchecked\").getCause(),\n+                instanceOf(NullPointerException.class));\n+    }\n+\n+\n+    @Test\n+    public void testNoBackwardCompatible() {\n+        Configuration cfg = getConfiguration();\n+        cfg.setWrapUncheckedExceptions(true);\n+        \n+        for (Version ici : new Version[] { Configuration.VERSION_2_3_26, Configuration.VERSION_2_3_27 }) {\n+            cfg.setIncompatibleImprovements(ici);\n+            \n+            assertThat(\n+                    assertErrorContains(\"${f()}\", TemplateException.class, \"thrown an unchecked\").getCause(),\n+                    instanceOf(MyUncheckedException.class));\n+            assertThat(\n+                    assertErrorContains(\"<@d />\", TemplateException.class, \"thrown an unchecked\").getCause(),\n+                    instanceOf(MyUncheckedException.class));\n+            assertThat(\n+                    assertErrorContains(\"${f('NPE')}\", TemplateException.class, \"thrown an unchecked\").getCause(),\n+                    instanceOf(NullPointerException.class));\n+            assertThat(\n+                    assertErrorContains(\"<@d type='NPE' />\", TemplateException.class, \"thrown an unchecked\").getCause(),\n+                    instanceOf(NullPointerException.class));\n+        }\n+    }\n+\n+    @Test\n+    public void testFlowControlWorks() throws IOException, TemplateException {\n+        Configuration cfg = getConfiguration();\n+        for (boolean wrapUnchecked : new boolean[] { false, true }) {\n+            cfg.setWrapUncheckedExceptions(wrapUnchecked);\n+            \n+            assertOutput(\"<#list 1..2 as i>a<@fd>b<#break>c</@>d</#list>.\", \"ab.\");\n+            assertOutput(\"<#list 1..2 as i>a<@fd>b<#continue>c</@>d</#list>.\", \"abab.\");\n+            assertOutput(\"<#function f()><@fd><#return 1></@></#function>${f()}.\", \"1.\");\n+        }\n+    }\n+    \n+    public static class MyErronousFunction implements TemplateMethodModelEx {\n+        private static final MyErronousFunction INSTANCE = new MyErronousFunction();\n+\n+        public Object exec(List arguments) throws TemplateModelException {\n+            if (!arguments.isEmpty() && equalsNPE((TemplateModel) arguments.get(0))) {\n+                throw new NullPointerException();\n+            } else {\n+                throw new MyUncheckedException();\n+            }\n+        }\n+\n+    }\n+\n+    public static class MyErronousDirective implements TemplateDirectiveModel {\n+        private static final MyErronousDirective INSTANCE = new MyErronousDirective();\n+        \n+        public void execute(Environment env, Map params, TemplateModel[] loopVars, TemplateDirectiveBody body)\n+                throws TemplateException, IOException {\n+            if (equalsNPE((TemplateModel) params.get(\"type\"))) {\n+                throw new NullPointerException();\n+            } else {\n+                throw new MyUncheckedException();\n+            }\n+        }\n+\n+    }\n+\n+    public static class MyFilterDirective implements TemplateDirectiveModel {\n+        private static final MyFilterDirective INSTANCE = new MyFilterDirective();\n+        \n+        public void execute(Environment env, Map params, TemplateModel[] loopVars, TemplateDirectiveBody body)\n+                throws TemplateException, IOException {\n+            body.render(new FilterWriter(env.getOut()) { });\n+        }\n+\n+    }\n+    \n+    public static class MyUncheckedException extends RuntimeException {\n+        //\n+    }\n+    \n+    private static boolean equalsNPE(TemplateModel tm) throws TemplateModelException {\n+        return (tm instanceof TemplateScalarModel) && \"NPE\".equals(((TemplateScalarModel) tm).getAsString());\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/freemarker/raw/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/test/java/freemarker/core/UncheckedExceptionHandlingTest.java",
                "sha": "f06d75d9ca86ae886736d6cfb826eb01430c1040",
                "status": "added"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/freemarker/blob/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/test/java/freemarker/template/ConfigurationTest.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/test/java/freemarker/template/ConfigurationTest.java?ref=53da2fb0be728416c44f8b158a6b96f9cd61e0f7",
                "deletions": 0,
                "filename": "src/test/java/freemarker/template/ConfigurationTest.java",
                "patch": "@@ -1213,6 +1213,15 @@ public void testSetLogTemplateExceptionsViaSetSettingAPI() throws TemplateExcept\n         assertEquals(false, cfg.getLogTemplateExceptions());\n     }\n \n+    public void testSetWrapUncheckedExceptionsViaSetSettingAPI() throws TemplateException {\n+        Configuration cfg = new Configuration(Configuration.VERSION_2_3_27);\n+        assertEquals(false, cfg.getWrapUncheckedExceptions());\n+        cfg.setSetting(Configurable.WRAP_UNCHECKED_EXCEPTIONS_KEY_CAMEL_CASE, \"true\");\n+        assertEquals(true, cfg.getWrapUncheckedExceptions());\n+        cfg.setSetting(Configurable.WRAP_UNCHECKED_EXCEPTIONS_KEY_SNAKE_CASE, \"false\");\n+        assertEquals(false, cfg.getWrapUncheckedExceptions());\n+    }\n+    \n     public void testSetAttemptExceptionReporter() throws TemplateException {\n         Configuration cfg = new Configuration(Configuration.VERSION_2_3_0);\n         assertEquals(AttemptExceptionReporter.LOG_ERROR_REPORTER, cfg.getAttemptExceptionReporter());",
                "raw_url": "https://github.com/apache/freemarker/raw/53da2fb0be728416c44f8b158a6b96f9cd61e0f7/src/test/java/freemarker/template/ConfigurationTest.java",
                "sha": "cb46a941abb787f0d376c8995be89081282f9e04",
                "status": "modified"
            }
        ],
        "message": "FREEMARKER-48: Better handling of unchecked exceptions thrown by custom TemplateModel-s.\n\nAdded new configuration setting, wrap_unchecked_exceptions (Configurable.setWrapUncheckedExceptions(boolean)). When this is true, unchecked exceptions thrown during evaluating an expression or during executing a custom directive will be wrapped into a TemplateException-s. The advantage of that is that thus the exception will include the location in the template (not just the Java stack trace), and the TemplateExceptionHandler will be invoked for it as well. When this setting is false (which is the default for backward compatibility), the the unchecked exception will bubble up and thrown by Template.process, just as in earlier versions. (Note that plain Java methods called from templates have always wrapped the thrown exception into TemplateException, regardless of this setting.)\n\nWhen incomplatible_improvements is set to 2.3.27 (or higher), the following unchecked exceptions will be wrapped into TemplateException-s when thrown during evaluating expressions or calling directives: NullPointerException, ClassCastException, IndexOutOfBoundsException, and InvocationTargetException. The goal of this is the same as of setting the wrap_unchecked_exceptions setting to true (see that earlier), but this is more backward compatible, as it avoids wrapping unchecked exceptions that the calling application is likely to catch specifically (like application-specific unchecked exceptions).",
        "parent": "https://github.com/apache/freemarker/commit/b246de2403bac5b82c44a83cc3b7ab5b6617d0e8",
        "patched_files": [
            "FlowControlException.java",
            "Expression.java",
            "TemplateTransformModel.java",
            "ReturnInstruction.java",
            "book.xml",
            "Environment.java",
            "Configurable.java",
            "Configuration.java",
            "EvalUtil.java",
            "TemplateConfiguration.java",
            "_TemplateAPI.java",
            "BreakOrContinueException.java",
            "TemplateDirectiveModel.java"
        ],
        "repo": "freemarker",
        "unit_tests": [
            "ConfigurableTest.java",
            "TemplateConfigurationTest.java",
            "ConfigurationTest.java",
            "UncheckedExceptionHandlingTest.java"
        ]
    },
    "freemarker_6c74bf2": {
        "bug_id": "freemarker_6c74bf2",
        "commit": "https://github.com/apache/freemarker/commit/6c74bf2d486a2771b1faa4598457a07facdb463c",
        "file": [
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/freemarker/blob/6c74bf2d486a2771b1faa4598457a07facdb463c/src/main/java/freemarker/template/SimpleHash.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/template/SimpleHash.java?ref=6c74bf2d486a2771b1faa4598457a07facdb463c",
                "deletions": 6,
                "filename": "src/main/java/freemarker/template/SimpleHash.java",
                "patch": "@@ -24,6 +24,8 @@\n import java.util.SortedMap;\n import java.util.TreeMap;\n \n+import freemarker.core._DelayedJQuote;\n+import freemarker.core._TemplateModelException;\n import freemarker.ext.beans.BeansWrapper;\n \n /**\n@@ -183,20 +185,50 @@ public void put(String key, boolean b) {\n     }\n \n     public TemplateModel get(String key) throws TemplateModelException {\n-        Object result = map.get(key);\n+        Object result;\n+        try {\n+            result = map.get(key);\n+        } catch (ClassCastException e) {\n+            throw new _TemplateModelException(\n+                    e, new Object[] {\n+                            \"ClassCastException while getting Map entry with String key \",\n+                            new _DelayedJQuote(key)\n+                    });\n+        } catch (NullPointerException e) {\n+            throw new _TemplateModelException(\n+                    e, new Object[] {\n+                            \"NullPointerException while getting Map entry with String key \",\n+                            new _DelayedJQuote(key)\n+                    });\n+        }\n         // The key to use for putting -- it's the key that already exists in\n         // the map (either key or charKey below). This way, we'll never put a \n         // new key in the map, avoiding spurious ConcurrentModificationException\n         // from another thread iterating over the map, see bug #1939742 in \n         // SourceForge tracker.\n         Object putKey = null;\n         if (result == null) {\n-            if (key.length() == 1) {\n-                // just check for Character key if this is a single-character string\n+            // Check for Character key if this is a single-character string.\n+            // In SortedMap-s, however, we can't do that safely, as it can cause ClassCastException.\n+            if (key.length() == 1 && !(map instanceof SortedMap)) {\n                 Character charKey = new Character(key.charAt(0));\n-                result = map.get(charKey);\n-                if (result != null || map.containsKey(charKey)) {\n-                    putKey = charKey;\n+                try {\n+                    result = map.get(charKey);\n+                    if (result != null || map.containsKey(charKey)) {\n+                        putKey = charKey;\n+                    }\n+                } catch (ClassCastException e) {\n+                    throw new _TemplateModelException(\n+                            e, new Object[] {\n+                                    \"ClassCastException while getting Map entry with Character key \",\n+                                    new _DelayedJQuote(key)\n+                            });\n+                } catch (NullPointerException e) {\n+                    throw new _TemplateModelException(\n+                            e, new Object[] {\n+                                    \"NullPointerException while getting Map entry with Character key \",\n+                                    new _DelayedJQuote(key)\n+                            });\n                 }\n             }\n             if (putKey == null) {",
                "raw_url": "https://github.com/apache/freemarker/raw/6c74bf2d486a2771b1faa4598457a07facdb463c/src/main/java/freemarker/template/SimpleHash.java",
                "sha": "82fe66c8b8f020c1f6609aa74854e4d09db350d8",
                "status": "modified"
            },
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/freemarker/blob/6c74bf2d486a2771b1faa4598457a07facdb463c/src/main/java/freemarker/template/SimpleMapAdapter.java",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/template/SimpleMapAdapter.java?ref=6c74bf2d486a2771b1faa4598457a07facdb463c",
                "deletions": 6,
                "filename": "src/main/java/freemarker/template/SimpleMapAdapter.java",
                "patch": "@@ -18,7 +18,10 @@\n \n import java.io.Serializable;\n import java.util.Map;\n+import java.util.SortedMap;\n \n+import freemarker.core._DelayedJQuote;\n+import freemarker.core._TemplateModelException;\n import freemarker.ext.util.WrapperTemplateModel;\n \n /**\n@@ -49,14 +52,45 @@ private SimpleMapAdapter(Map map, ObjectWrapper wrapper) {\n     }\n \n     public TemplateModel get(String key) throws TemplateModelException {\n-        Object val = map.get(key);\n+        Object val;\n+        try {\n+            val = map.get(key);\n+        } catch (ClassCastException e) {\n+            throw new _TemplateModelException(\n+                    e, new Object[] {\n+                            \"ClassCastException while getting Map entry with String key \",\n+                            new _DelayedJQuote(key)\n+                    });\n+        } catch (NullPointerException e) {\n+            throw new _TemplateModelException(\n+                    e, new Object[] {\n+                            \"NullPointerException while getting Map entry with String key \",\n+                            new _DelayedJQuote(key)\n+                    });\n+        }\n+            \n         if (val == null) {\n-            if (key.length() == 1) {\n-                // Check for a Character key if this is a single-character string\n+            // Check for Character key if this is a single-character string.\n+            // In SortedMap-s, however, we can't do that safely, as it can cause ClassCastException.\n+            if (key.length() == 1 && !(map instanceof SortedMap)) {\n                 Character charKey = new Character(key.charAt(0));\n-                val = map.get(charKey);\n-                if (val == null && !(map.containsKey(key) || map.containsKey(charKey))) {\n-                    return null;\n+                try {\n+                    val = map.get(charKey);\n+                    if (val == null && !(map.containsKey(key) || map.containsKey(charKey))) {\n+                        return null;\n+                    }\n+                } catch (ClassCastException e) {\n+                    throw new _TemplateModelException(\n+                            e, new Object[] {\n+                                    \"Class casting exception while getting Map entry with Character key \",\n+                                    new _DelayedJQuote(charKey)\n+                            });\n+                } catch (NullPointerException e) {\n+                    throw new _TemplateModelException(\n+                            e, new Object[] {\n+                                    \"NullPointerException while getting Map entry with Character key \",\n+                                    new _DelayedJQuote(charKey)\n+                            });\n                 }\n             } else if (!map.containsKey(key)) {\n                 return null;",
                "raw_url": "https://github.com/apache/freemarker/raw/6c74bf2d486a2771b1faa4598457a07facdb463c/src/main/java/freemarker/template/SimpleMapAdapter.java",
                "sha": "dedfb913fe3274aad2e149d9ff63aacd0fb2dd68",
                "status": "modified"
            },
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/freemarker/blob/6c74bf2d486a2771b1faa4598457a07facdb463c/src/manual/book.xml",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/manual/book.xml?ref=6c74bf2d486a2771b1faa4598457a07facdb463c",
                "deletions": 4,
                "filename": "src/manual/book.xml",
                "patch": "@@ -21604,11 +21604,24 @@ TemplateModel x = env.getVariable(\"x\");  // get variable x</programlisting>\n \n           <itemizedlist>\n             <listitem>\n-              <para/>\n-            </listitem>\n+              <para>Error message quality improvements:</para>\n \n-            <listitem>\n-              <para/>\n+              <itemizedlist>\n+                <listitem>\n+                  <para>Several improvements when calling custom JSP tags; see\n+                  them in its own section later.</para>\n+                </listitem>\n+\n+                <listitem>\n+                  <para>When <literal>Map.get</literal> or\n+                  <literal>Map.containsKey</literal> of a wrapped\n+                  <literal>Map</literal> throws a\n+                  <literal>ClassCastException</literal> or\n+                  <literal>NullPointerException</literal>, the error will\n+                  point to the causing FTL expression (with some explanation),\n+                  rather than bubbling up as low level runtime error.</para>\n+                </listitem>\n+              </itemizedlist>\n             </listitem>\n           </itemizedlist>\n         </section>\n@@ -21884,6 +21897,29 @@ TemplateModel x = env.getVariable(\"x\");  // get variable x</programlisting>\n                   and without going through overloaded method selection on\n                   invocation time.</para>\n                 </listitem>\n+\n+                <listitem>\n+                  <para>Bug fixed [<link\n+                  xlink:href=\"http://sourceforge.net/p/freemarker/bugs/372/\">372</link>]:\n+                  <literal>ClassCastException</literal> when a\n+                  <literal>SortedMap</literal> (typically, a\n+                  <literal>TreeMap</literal>) is wrapped with\n+                  <literal>DefaultObjectWrapper</literal> and then a 1\n+                  character long string is get from it that doesn't exist. To\n+                  fix the issue, if the wrapped <literal>Map</literal> is a\n+                  <literal>SortedMap</literal>,\n+                  <literal>DefaultObjectWrapper</literal>\n+                  (<literal>SimpleHash</literal>, to be more precise) won't\n+                  try to fall back to a <literal>Character</literal> key after\n+                  with the <literal>String</literal> key it has got\n+                  <literal>null</literal>. (This change should be backward\n+                  compatible, because when a <literal>SortedMap</literal> has\n+                  <literal>Character</literal> keys, the initial attempt with\n+                  <literal>String</literal> key causes\n+                  <literal>ClassCastException</literal>, thus, such\n+                  <literal>SortedMap</literal>-s were never usable as FTL\n+                  hashes.)</para>\n+                </listitem>\n               </itemizedlist>\n             </listitem>\n ",
                "raw_url": "https://github.com/apache/freemarker/raw/6c74bf2d486a2771b1faa4598457a07facdb463c/src/manual/book.xml",
                "sha": "e316aea53b6abd2dba0b9267e58739497320064c",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/freemarker/blob/6c74bf2d486a2771b1faa4598457a07facdb463c/src/test/java/freemarker/template/DefaultObjectWrapperTest.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/test/java/freemarker/template/DefaultObjectWrapperTest.java?ref=6c74bf2d486a2771b1faa4598457a07facdb463c",
                "deletions": 0,
                "filename": "src/test/java/freemarker/template/DefaultObjectWrapperTest.java",
                "patch": "@@ -707,6 +707,39 @@ private void testIteratorWrapping(DefaultObjectWrapper ow, Class<?> expectedTMCl\n             assertTrue(e.getMessage().contains(\"can be listed only once\"));\n         }\n     }\n+    \n+    @SuppressWarnings(\"boxing\")\n+    @Test\n+    public void testCharKeyFallback() throws TemplateModelException {\n+        Map hashMapS = new HashMap<String, Integer>();\n+        hashMapS.put(\"a\", 1);\n+        Map sortedMapS = new TreeMap<String, Integer>();\n+        sortedMapS.put(\"a\", 1);\n+        Map hashMapC = new HashMap<Character, Integer>();\n+        hashMapC.put('a', 1);\n+        Map sortedMapC = new TreeMap<Character, Integer>();\n+        sortedMapC.put('a', 1);\n+        \n+        for (DefaultObjectWrapper ow : new DefaultObjectWrapper[] { OW0, OW22 } ) {\n+            assertEquals(1, ow.unwrap(((TemplateHashModel) ow.wrap(hashMapS)).get(\"a\")));\n+            assertEquals(1, ow.unwrap(((TemplateHashModel) ow.wrap(hashMapC)).get(\"a\")));\n+            assertEquals(1, ow.unwrap(((TemplateHashModel) ow.wrap(sortedMapS)).get(\"a\")));\n+            try {\n+                ((TemplateHashModel) ow.wrap(sortedMapC)).get(\"a\");\n+            } catch (TemplateModelException e) {\n+                assertTrue(e.getMessage().contains(\"String key\"));\n+            }\n+            \n+            assertNull(((TemplateHashModel) ow.wrap(hashMapS)).get(\"b\"));\n+            assertNull(((TemplateHashModel) ow.wrap(hashMapC)).get(\"b\"));\n+            assertNull(((TemplateHashModel) ow.wrap(sortedMapS)).get(\"b\"));\n+            try {\n+                ((TemplateHashModel) ow.wrap(sortedMapC)).get(\"b\");\n+            } catch (TemplateModelException e) {\n+                assertTrue(e.getMessage().contains(\"String key\"));\n+            }\n+        }\n+    }\n \n     public static class RoundtripTesterBean {\n ",
                "raw_url": "https://github.com/apache/freemarker/raw/6c74bf2d486a2771b1faa4598457a07facdb463c/src/test/java/freemarker/template/DefaultObjectWrapperTest.java",
                "sha": "760eb3590554757b1e01b4cc9e488f336f7ff15a",
                "status": "modified"
            }
        ],
        "message": "- Bug fixed [372]: ClassCastException when a SortedMap (typically, a TreeMap) is wrapped with DefaultObjectWrapper and then a 1 character long string is get from it that doesn't exist. To fix the issue, if the wrapped Map is a SortedMap, DefaultObjectWrapper (SimpleHash, to be more precise) won't try to fall back to a Character key after with the String key it has got null. (This change should be backward compatible, because when a SortedMap has Character keys, the initial attempt with String key causes ClassCastException, thus, such SortedMap-s were never usable as FTL hashes.)\n\n- When Map.get or Map.containsKey of a wrapped Map throws a ClassCastException or NullPointerException, the error will point to the causing FTL expression (with some explanation), rather than bubbling up as low level runtime error.",
        "parent": "https://github.com/apache/freemarker/commit/c7ecd93edd7f7a7b0587c0592b51b4d5e5ddd3ec",
        "patched_files": [
            "book.xml",
            "SimpleHash.java",
            "DefaultObjectWrapper.java",
            "SimpleMapAdapter.java"
        ],
        "repo": "freemarker",
        "unit_tests": [
            "DefaultObjectWrapperTest.java"
        ]
    },
    "freemarker_780e8be": {
        "bug_id": "freemarker_780e8be",
        "commit": "https://github.com/apache/freemarker/commit/780e8be48eae100188ae33b6f4d62c8ddbf3ed0a",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/freemarker/blob/780e8be48eae100188ae33b6f4d62c8ddbf3ed0a/src/main/java/freemarker/template/Template.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/template/Template.java?ref=780e8be48eae100188ae33b6f4d62c8ddbf3ed0a",
                "deletions": 2,
                "filename": "src/main/java/freemarker/template/Template.java",
                "patch": "@@ -85,9 +85,13 @@\n      */\n     private Template(String name, Configuration cfg)\n     {\n-        super(cfg != null ? cfg : Configuration.getDefaultConfiguration());\n+        super(toNonNull(cfg));\n         this.name = name;\n-        this.templateLanguageVersion = normalizeTemplateLanguageVersion(cfg.getIncompatibleImprovements());\n+        this.templateLanguageVersion = normalizeTemplateLanguageVersion(toNonNull(cfg).getIncompatibleImprovements());\n+    }\n+\n+    private static Configuration toNonNull(Configuration cfg) {\n+        return cfg != null ? cfg : Configuration.getDefaultConfiguration();\n     }\n     \n ",
                "raw_url": "https://github.com/apache/freemarker/raw/780e8be48eae100188ae33b6f4d62c8ddbf3ed0a/src/main/java/freemarker/template/Template.java",
                "sha": "d9becdf616941f5f1413d1fc811a8d90e4f05e3e",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/freemarker/blob/780e8be48eae100188ae33b6f4d62c8ddbf3ed0a/src/manual/book.xml",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/manual/book.xml?ref=780e8be48eae100188ae33b6f4d62c8ddbf3ed0a",
                "deletions": 0,
                "filename": "src/manual/book.xml",
                "patch": "@@ -21317,6 +21317,23 @@ TemplateModel x = env.getVariable(\"x\");  // get variable x</programlisting>\n               <literal>#import</literal>-ing a template whose parsing\n               fails.</para>\n             </listitem>\n+\n+            <listitem>\n+              <para>Bugs found in R1 fixed:</para>\n+\n+              <itemizedlist>\n+                <listitem>\n+                  <para>Legacy (deprecated) <literal>Template</literal>\n+                  constructors without <literal>Configuration</literal>\n+                  parameter have failed with\n+                  <literal>NullPointerException</literal></para>\n+                </listitem>\n+\n+                <listitem>\n+                  <para/>\n+                </listitem>\n+              </itemizedlist>\n+            </listitem>\n           </itemizedlist>\n         </section>\n       </section>",
                "raw_url": "https://github.com/apache/freemarker/raw/780e8be48eae100188ae33b6f4d62c8ddbf3ed0a/src/manual/book.xml",
                "sha": "0f7dddc4cb2bc4369d77edab8c0a0ea042ebc3d1",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/freemarker/blob/780e8be48eae100188ae33b6f4d62c8ddbf3ed0a/src/test/java/freemarker/template/NullConfigurationTest.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/test/java/freemarker/template/NullConfigurationTest.java?ref=780e8be48eae100188ae33b6f4d62c8ddbf3ed0a",
                "deletions": 0,
                "filename": "src/test/java/freemarker/template/NullConfigurationTest.java",
                "patch": "@@ -0,0 +1,15 @@\n+package freemarker.template;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+\n+import org.junit.Test;\n+\n+public class NullConfigurationTest {\n+\n+    @Test\n+    public void testTemplateNPEBug() throws IOException {\n+        new Template(\"legacy\", new StringReader(\"foo\"));\n+    }\n+    \n+}",
                "raw_url": "https://github.com/apache/freemarker/raw/780e8be48eae100188ae33b6f4d62c8ddbf3ed0a/src/test/java/freemarker/template/NullConfigurationTest.java",
                "sha": "c6c7a06fccd87600d55bfc043d0aa6f1dea5ca65",
                "status": "added"
            }
        ],
        "message": "Fixed RC1 bug: Legacy (deprecated) Template constructors without Configuration parameter have failed with NullPointerException",
        "parent": "https://github.com/apache/freemarker/commit/4fee20607f7687eaed486c54cb71e9808b3de8cc",
        "patched_files": [
            "book.xml",
            "Template.java"
        ],
        "repo": "freemarker",
        "unit_tests": [
            "NullConfigurationTest.java"
        ]
    },
    "freemarker_8767cc7": {
        "bug_id": "freemarker_8767cc7",
        "commit": "https://github.com/apache/freemarker/commit/8767cc79d95f7e548c1346a17a8a7421e2c4ed9f",
        "file": [
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/freemarker/blob/8767cc79d95f7e548c1346a17a8a7421e2c4ed9f/src/freemarker/ext/jsp/TaglibFactory.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/freemarker/ext/jsp/TaglibFactory.java?ref=8767cc79d95f7e548c1346a17a8a7421e2c4ed9f",
                "deletions": 10,
                "filename": "src/freemarker/ext/jsp/TaglibFactory.java",
                "patch": "@@ -349,18 +349,28 @@ else if (\"taglib\".equals(qName)) {\n         }\n     }\n \n-\n     private void addLocationsFromWebApp() throws Exception\n     {\n-        Set libs = ctx.getResourcePaths(\"/WEB-INF\");\n-        for (Iterator iter = libs.iterator(); iter.hasNext();) {\n-            String path = (String) iter.next();\n-            if(path.startsWith(\"/WEB-INF/lib/\") && (path.endsWith(\".jar\") || path.endsWith(\".zip\"))) {\n-                addLocationsFromJarFile(path);\n-            }\n-            else if(path.endsWith(\".tld\")) {\n-                addLocationFromTldFile(path);\n-            }\n+        Set libs = ctx.getResourcePaths(\"/WEB-INF/lib\");\n+        if (libs != null) {\n+          for (Iterator iter = libs.iterator(); iter.hasNext();) {\n+              String path = (String) iter.next();\n+              if(path.endsWith(\".jar\") || path.endsWith(\".zip\")) {\n+                  addLocationsFromJarFile(path);\n+              }\n+              else if(path.endsWith(\".tld\")) {\n+                  addLocationFromTldFile(path);\n+              }\n+          }\n+        }\n+        libs = ctx.getResourcePaths(\"/WEB-INF\");\n+        if (libs != null) {\n+          for (Iterator iter = libs.iterator(); iter.hasNext();) {\n+              String path = (String) iter.next();\n+              if(path.endsWith(\".tld\")) {\n+                  addLocationFromTldFile(path);\n+              }\n+          }\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/freemarker/raw/8767cc79d95f7e548c1346a17a8a7421e2c4ed9f/src/freemarker/ext/jsp/TaglibFactory.java",
                "sha": "dd2c917a7a1457358d6c09ac39ede9c07f67adc4",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/freemarker/blob/8767cc79d95f7e548c1346a17a8a7421e2c4ed9f/src/freemarker/testcase/servlets/TestJspTaglibs.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/freemarker/testcase/servlets/TestJspTaglibs.java?ref=8767cc79d95f7e548c1346a17a8a7421e2c4ed9f",
                "deletions": 2,
                "filename": "src/freemarker/testcase/servlets/TestJspTaglibs.java",
                "patch": "@@ -215,13 +215,17 @@ public InputStream getResourceAsStream(String url) {\n \n         public Set getResourcePaths(String path) {\n             if(path.equals(\"/WEB-INF\")) {\n+                return new HashSet(Arrays.asList(new String[] { \n+                    \"/WEB-INF/fmtesttag2.tld\",\n+                    \"/WEB-INF/lib/\"\n+                }));\n+            } else if(path.equals(\"/WEB-INF/lib\")) {\n                 return new HashSet(Arrays.asList(new String[] { \n                     \"/WEB-INF/lib/taglib-foo.jar\",\n-                    \"/WEB-INF/fmtesttag2.tld\"\n                 }));\n             }\n             else {\n-                return Collections.EMPTY_SET;\n+                return null;\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/freemarker/raw/8767cc79d95f7e548c1346a17a8a7421e2c4ed9f/src/freemarker/testcase/servlets/TestJspTaglibs.java",
                "sha": "70887530136c449c88c63145c3f66977a4ce86b7",
                "status": "modified"
            }
        ],
        "message": "Fixing bug taglib loading bugs:\n- The mock has implemented ServletContext.getResourcePaths badly, returning contents like `ls -R`\n- TaglibFactory haven't searched WEB-INF/lib\n- TaglibFactory died with NPE if getResourcePaths return null",
        "parent": "https://github.com/apache/freemarker/commit/562b6a545199d04712b0c04f5cf339d8bab18ed3",
        "patched_files": [
            "TaglibFactory.java"
        ],
        "repo": "freemarker",
        "unit_tests": [
            "TestJspTaglibs.java"
        ]
    },
    "freemarker_af15c1e": {
        "bug_id": "freemarker_af15c1e",
        "commit": "https://github.com/apache/freemarker/commit/af15c1ef11c3651c69a5eb867fa150d83534830c",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/freemarker/blob/af15c1ef11c3651c69a5eb867fa150d83534830c/src/main/java/freemarker/template/Configuration.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/template/Configuration.java?ref=af15c1ef11c3651c69a5eb867fa150d83534830c",
                "deletions": 8,
                "filename": "src/main/java/freemarker/template/Configuration.java",
                "patch": "@@ -134,14 +134,7 @@\n     public static final int AUTO_DETECT_TAG_SYNTAX = 0;\n     public static final int ANGLE_BRACKET_TAG_SYNTAX = 1;\n     public static final int SQUARE_BRACKET_TAG_SYNTAX = 2;\n-    \n-    /** The default of {@link #getIncompatibleImprovements()}, currently {@code new Version(2, 3, 0)}. */\n-    public static final Version DEFAULT_INCOMPATIBLE_IMPROVEMENTS = Configuration.VERSION_2_3_0;\n-    /** @deprecated Use {@link #DEFAULT_INCOMPATIBLE_IMPROVEMENTS} instead. */\n-    public static final String DEFAULT_INCOMPATIBLE_ENHANCEMENTS = DEFAULT_INCOMPATIBLE_IMPROVEMENTS.toString();\n-    /** @deprecated Use {@link #DEFAULT_INCOMPATIBLE_IMPROVEMENTS} instead. */\n-    public static final int PARSED_DEFAULT_INCOMPATIBLE_ENHANCEMENTS = DEFAULT_INCOMPATIBLE_IMPROVEMENTS.intValue(); \n-    \n+\n     /** FreeMarker version 2.3.0 (an {@link #Configuration(Version) incompatible improvements break-point}) */\n     public static final Version VERSION_2_3_0 = new Version(2, 3, 0);\n     \n@@ -154,6 +147,13 @@\n     /** FreeMarker version 2.3.21 (an {@link #Configuration(Version) incompatible improvements break-point}) */\n     public static final Version VERSION_2_3_21 = new Version(2, 3, 21);\n     \n+    /** The default of {@link #getIncompatibleImprovements()}, currently {@code new Version(2, 3, 0)}. */\n+    public static final Version DEFAULT_INCOMPATIBLE_IMPROVEMENTS = Configuration.VERSION_2_3_0;\n+    /** @deprecated Use {@link #DEFAULT_INCOMPATIBLE_IMPROVEMENTS} instead. */\n+    public static final String DEFAULT_INCOMPATIBLE_ENHANCEMENTS = DEFAULT_INCOMPATIBLE_IMPROVEMENTS.toString();\n+    /** @deprecated Use {@link #DEFAULT_INCOMPATIBLE_IMPROVEMENTS} instead. */\n+    public static final int PARSED_DEFAULT_INCOMPATIBLE_ENHANCEMENTS = DEFAULT_INCOMPATIBLE_IMPROVEMENTS.intValue(); \n+    \n     private static final Version version;\n     static {\n         try {",
                "raw_url": "https://github.com/apache/freemarker/raw/af15c1ef11c3651c69a5eb867fa150d83534830c/src/main/java/freemarker/template/Configuration.java",
                "sha": "9917b722046a94795c76eec3db3157415d2d79f5",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE introduced due to static field initialization order.",
        "parent": "https://github.com/apache/freemarker/commit/a36ad2dfe1b95844526b6aaf7887950a7cca3a39",
        "patched_files": [
            "Configuration.java"
        ],
        "repo": "freemarker",
        "unit_tests": [
            "ConfigurationTest.java"
        ]
    },
    "freemarker_b07c69e": {
        "bug_id": "freemarker_b07c69e",
        "commit": "https://github.com/apache/freemarker/commit/b07c69ec7446950371b6dc9a895e20b5c36f4abb",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/freemarker/blob/b07c69ec7446950371b6dc9a895e20b5c36f4abb/src/main/java/freemarker/cache/TemplateCache.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/cache/TemplateCache.java?ref=b07c69ec7446950371b6dc9a895e20b5c36f4abb",
                "deletions": 1,
                "filename": "src/main/java/freemarker/cache/TemplateCache.java",
                "patch": "@@ -337,7 +337,9 @@ else if(t instanceof IOException) {\n             return t;\n         }\n         catch(RuntimeException e) {\n-            storeNegativeLookup(tk, cachedTemplate, e);\n+            if (cachedTemplate != null) {\n+                storeNegativeLookup(tk, cachedTemplate, e);\n+            }\n             throw e;\n         }\n         catch(IOException e) {",
                "raw_url": "https://github.com/apache/freemarker/raw/b07c69ec7446950371b6dc9a895e20b5c36f4abb/src/main/java/freemarker/cache/TemplateCache.java",
                "sha": "b3cf0c4ef1ee1601b5fbb564c8a793961f725503",
                "status": "modified"
            }
        ],
        "message": "(There was a little chance for an NPE here... although then it just replaced the already raising RuntimeException.)",
        "parent": "https://github.com/apache/freemarker/commit/b7a491c79988fff1a4e1bf53f633a21b0745c019",
        "patched_files": [
            "TemplateCache.java"
        ],
        "repo": "freemarker",
        "unit_tests": [
            "TemplateCacheTest.java"
        ]
    },
    "freemarker_d661acc": {
        "bug_id": "freemarker_d661acc",
        "commit": "https://github.com/apache/freemarker/commit/d661acc3797f9e4b70f9de194bcdbff71d89f0e9",
        "file": [
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/freemarker/blob/d661acc3797f9e4b70f9de194bcdbff71d89f0e9/src/main/java/freemarker/core/TemplateConfiguration.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/TemplateConfiguration.java?ref=d661acc3797f9e4b70f9de194bcdbff71d89f0e9",
                "deletions": 14,
                "filename": "src/main/java/freemarker/core/TemplateConfiguration.java",
                "patch": "@@ -49,7 +49,7 @@\n  * <p>\n  * Note that the result value of the reader methods (getter and \"is\" methods) is usually not useful unless the value of\n  * that setting was already set on this object. Otherwise you will get the value from the parent {@link Configuration},\n- * which is {@link Configuration#getDefaultConfiguration()} before this object is associated to a {@link Configuration}.\n+ * or an {@link IllegalStateException} before this object is associated to a {@link Configuration}.\n  * \n  * <p>\n  * If you are using this class for your own template loading and caching solution, rather than with the standard one,\n@@ -147,6 +147,11 @@ public void setParentConfiguration(Configuration cfg) {\n     public Configuration getParentConfiguration() {\n         return parentConfigurationSet ? (Configuration) getParent() : null;\n     }\n+\n+    private Configuration getNonNullParentConfiguration() {\n+        checkParentConfigurationSet();\n+        return (Configuration) getParent();\n+    }\n     \n     /**\n      * Set all settings in this {@link TemplateConfiguration} that were set in the parameter\n@@ -278,8 +283,7 @@ public void merge(TemplateConfiguration tc) {\n      *             If the parent configuration wasn't yet set.\n      */\n     public void apply(Template template) {\n-        checkParentConfigurationSet();\n-        Configuration cfg = getParentConfiguration();\n+        Configuration cfg = getNonNullParentConfiguration();\n         if (template.getConfiguration() != cfg) {\n             // This is actually not a problem right now, but for future BC we enforce this.\n             throw new IllegalArgumentException(\n@@ -386,7 +390,7 @@ public void setTagSyntax(int tagSyntax) {\n      * The getter pair of {@link #setTagSyntax(int)}.\n      */\n     public int getTagSyntax() {\n-        return tagSyntax != null ? tagSyntax.intValue() : getParentConfiguration().getTagSyntax();\n+        return tagSyntax != null ? tagSyntax.intValue() : getNonNullParentConfiguration().getTagSyntax();\n     }\n \n     /**\n@@ -408,7 +412,8 @@ public void setNamingConvention(int namingConvention) {\n      * The getter pair of {@link #setNamingConvention(int)}.\n      */\n     public int getNamingConvention() {\n-        return namingConvention != null ? namingConvention.intValue() : getParentConfiguration().getNamingConvention();\n+        return namingConvention != null ? namingConvention.intValue()\n+                : getNonNullParentConfiguration().getNamingConvention();\n     }\n \n     /**\n@@ -430,7 +435,7 @@ public void setWhitespaceStripping(boolean whitespaceStripping) {\n      */\n     public boolean getWhitespaceStripping() {\n         return whitespaceStripping != null ? whitespaceStripping.booleanValue()\n-                : getParentConfiguration().getWhitespaceStripping();\n+                : getNonNullParentConfiguration().getWhitespaceStripping();\n     }\n \n     /**\n@@ -453,7 +458,7 @@ public void setAutoEscapingPolicy(int autoEscapingPolicy) {\n      */\n     public int getAutoEscapingPolicy() {\n         return autoEscapingPolicy != null ? autoEscapingPolicy.intValue()\n-                : getParentConfiguration().getAutoEscapingPolicy();\n+                : getNonNullParentConfiguration().getAutoEscapingPolicy();\n     }\n \n     /**\n@@ -475,7 +480,7 @@ public void setOutputFormat(OutputFormat outputFormat) {\n      * The getter pair of {@link #setOutputFormat(OutputFormat)}.\n      */\n     public OutputFormat getOutputFormat() {\n-        return outputFormat != null ? outputFormat : getParentConfiguration().getOutputFormat();\n+        return outputFormat != null ? outputFormat : getNonNullParentConfiguration().getOutputFormat();\n     }\n \n     /**\n@@ -497,7 +502,7 @@ public void setRecognizeStandardFileExtensions(boolean recognizeStandardFileExte\n      */\n     public boolean getRecognizeStandardFileExtensions() {\n         return recognizeStandardFileExtensions != null ? recognizeStandardFileExtensions.booleanValue()\n-                : getParentConfiguration().getRecognizeStandardFileExtensions();\n+                : getNonNullParentConfiguration().getRecognizeStandardFileExtensions();\n     }\n     \n     /**\n@@ -519,7 +524,7 @@ public void setStrictSyntaxMode(boolean strictSyntaxMode) {\n      */\n     public boolean getStrictSyntaxMode() {\n         return strictSyntaxMode != null ? strictSyntaxMode.booleanValue()\n-                : getParentConfiguration().getStrictSyntaxMode();\n+                : getNonNullParentConfiguration().getStrictSyntaxMode();\n     }\n     \n     /**\n@@ -536,7 +541,7 @@ public void setStrictBeanModels(boolean strict) {\n     }\n \n     public String getEncoding() {\n-        return encoding != null ? encoding : getParentConfiguration().getDefaultEncoding();\n+        return encoding != null ? encoding : getNonNullParentConfiguration().getDefaultEncoding();\n     }\n \n     /**\n@@ -577,7 +582,7 @@ public void setTabSize(int tabSize) {\n      */\n     public int getTabSize() {\n         return tabSize != null ? tabSize.intValue()\n-                : getParentConfiguration().getTabSize();\n+                : getNonNullParentConfiguration().getTabSize();\n     }\n     \n     /**\n@@ -597,8 +602,7 @@ public boolean isTabSizeSet() {\n      *             If the parent configuration wasn't yet set.\n      */\n     public Version getIncompatibleImprovements() {\n-        checkParentConfigurationSet();\n-        return getParentConfiguration().getIncompatibleImprovements();\n+        return getNonNullParentConfiguration().getIncompatibleImprovements();\n     }\n \n     private void checkParentConfigurationSet() {",
                "raw_url": "https://github.com/apache/freemarker/raw/d661acc3797f9e4b70f9de194bcdbff71d89f0e9/src/main/java/freemarker/core/TemplateConfiguration.java",
                "sha": "804446b86c57c32ace89714f4c477dbdfb1b7e24",
                "status": "modified"
            }
        ],
        "message": "TemplateConfiguration.getXxx has thrown NPE instead of the more helpful IllegalStateException when the parent Configuration wasn't yet set.",
        "parent": "https://github.com/apache/freemarker/commit/e6ec6c46e926f8c89647d4475773a7ce49290dfe",
        "patched_files": [
            "TemplateConfiguration.java"
        ],
        "repo": "freemarker",
        "unit_tests": [
            "TemplateConfigurationTest.java"
        ]
    },
    "freemarker_dfd07ec": {
        "bug_id": "freemarker_dfd07ec",
        "commit": "https://github.com/apache/freemarker/commit/dfd07ec50f0f4b9fa9eedc17ddba0d65fc001f3f",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/freemarker/blob/dfd07ec50f0f4b9fa9eedc17ddba0d65fc001f3f/src/main/java/freemarker/cache/FileTemplateLoader.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/cache/FileTemplateLoader.java?ref=dfd07ec50f0f4b9fa9eedc17ddba0d65fc001f3f",
                "deletions": 2,
                "filename": "src/main/java/freemarker/cache/FileTemplateLoader.java",
                "patch": "@@ -225,8 +225,10 @@ public Object run()\n      */\n     private boolean isNameCaseCorrect(File source) throws IOException {\n         final String sourcePath = source.getPath();\n-        if (correctCasePaths.get(sourcePath) != null) {\n-            return true;\n+        synchronized (correctCasePaths) {\n+            if (correctCasePaths.get(sourcePath) != null) {\n+                return true;\n+            }\n         }\n         \n         final File parentDir = source.getParentFile();",
                "raw_url": "https://github.com/apache/freemarker/raw/dfd07ec50f0f4b9fa9eedc17ddba0d65fc001f3f/src/main/java/freemarker/cache/FileTemplateLoader.java",
                "sha": "50108ff97a2c77764cf72d25bcda7d8bbdfff303",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/freemarker/blob/dfd07ec50f0f4b9fa9eedc17ddba0d65fc001f3f/src/manual/book.xml",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/manual/book.xml?ref=dfd07ec50f0f4b9fa9eedc17ddba0d65fc001f3f",
                "deletions": 0,
                "filename": "src/manual/book.xml",
                "patch": "@@ -26120,6 +26120,17 @@ TemplateModel x = env.getVariable(\"x\");  // get variable x</programlisting>\n               fixes/improvements.</para>\n             </listitem>\n \n+            <listitem>\n+              <para>Bug fixed [<link\n+              xlink:href=\"https://sourceforge.net/p/freemarker/bugs/439/\">439</link>]:\n+              <literal>FileTemplateLoader</literal> with\n+              <literal>emulateCaseSensitiveFileSystem</literal> set to\n+              <literal>true</literal> (used for development) wasn't properly\n+              synchronized, leading to random\n+              <literal>NullPointerException</literal>-s or other\n+              misbehavior.</para>\n+            </listitem>\n+\n             <listitem>\n               <para>Bug fixed: The (rarely used) cause exception of\n               <literal>ParseException</literal>-s wasn't set</para>",
                "raw_url": "https://github.com/apache/freemarker/raw/dfd07ec50f0f4b9fa9eedc17ddba0d65fc001f3f/src/manual/book.xml",
                "sha": "57cdd371d3b8200b40efb1187906c389429cff9c",
                "status": "modified"
            }
        ],
        "message": "Bug #439: FileTemplateLoader with emulateCaseSensitiveFileSystem set to true (used for development) wasn't properly synchronized, leading to random NullPointerException-s or other misbehavior.",
        "parent": "https://github.com/apache/freemarker/commit/f32a506a32e6eb381ee9b0badd1e54b56a09b72f",
        "patched_files": [
            "book.xml",
            "FileTemplateLoader.java"
        ],
        "repo": "freemarker",
        "unit_tests": [
            "FileTemplateLoaderTest.java"
        ]
    },
    "freemarker_e90143c": {
        "bug_id": "freemarker_e90143c",
        "commit": "https://github.com/apache/freemarker/commit/e90143c8975bc53afcec85f2d80e704831f4e5a3",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/freemarker/blob/e90143c8975bc53afcec85f2d80e704831f4e5a3/src/main/java/freemarker/cache/FileTemplateLoader.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/cache/FileTemplateLoader.java?ref=e90143c8975bc53afcec85f2d80e704831f4e5a3",
                "deletions": 2,
                "filename": "src/main/java/freemarker/cache/FileTemplateLoader.java",
                "patch": "@@ -263,8 +263,10 @@ private boolean isNameCaseCorrect(File source) throws IOException {\n                 }\n             }\n         }\n-    \n-        correctCasePaths.put(sourcePath, Boolean.TRUE);        \n+\n+        synchronized (correctCasePaths) {\n+            correctCasePaths.put(sourcePath, Boolean.TRUE);        \n+        }\n         return true;\n     }\n ",
                "raw_url": "https://github.com/apache/freemarker/raw/e90143c8975bc53afcec85f2d80e704831f4e5a3/src/main/java/freemarker/cache/FileTemplateLoader.java",
                "sha": "d14368f7908221b8e13f3f40f693ad2432984e17",
                "status": "modified"
            }
        ],
        "message": "Missing part from: Bug #439: FileTemplateLoader with emulateCaseSensitiveFileSystem set to true (used for development) wasn't properly synchronized, leading to random NullPointerException-s or other misbehavior.",
        "parent": "https://github.com/apache/freemarker/commit/dfd07ec50f0f4b9fa9eedc17ddba0d65fc001f3f",
        "patched_files": [
            "FileTemplateLoader.java"
        ],
        "repo": "freemarker",
        "unit_tests": [
            "FileTemplateLoaderTest.java"
        ]
    }
}