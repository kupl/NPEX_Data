{
    "jackrabbit_260862c": {
        "bug_id": "jackrabbit_260862c",
        "commit": "https://github.com/apache/jackrabbit/commit/260862ca17080f2d5f6eb924f54b2a4b93c49638",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit/blob/260862ca17080f2d5f6eb924f54b2a4b93c49638/jackrabbit/src/main/java/org/apache/jackrabbit/core/NodeImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit/src/main/java/org/apache/jackrabbit/core/NodeImpl.java?ref=260862ca17080f2d5f6eb924f54b2a4b93c49638",
                "deletions": 1,
                "filename": "jackrabbit/src/main/java/org/apache/jackrabbit/core/NodeImpl.java",
                "patch": "@@ -1508,7 +1508,7 @@ public synchronized NodeImpl addNode(QName nodeName, QName nodeTypeName,\n         if (nodeTypeName != null) {\n             nt = session.getNodeTypeManager().getNodeType(nodeTypeName);\n         }\n-        return internalAddChildNode(nodeName, nt, new NodeId(uuid));\n+        return internalAddChildNode(nodeName, nt, uuid == null ? null : new NodeId(uuid));\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/jackrabbit/raw/260862ca17080f2d5f6eb924f54b2a4b93c49638/jackrabbit/src/main/java/org/apache/jackrabbit/core/NodeImpl.java",
                "sha": "26f6d11222ac503bae732514d8c536408db92e54",
                "status": "modified"
            }
        ],
        "message": "- fixing eventual NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@378253 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit/commit/93ff88412eca3b31693cbaa37acdb7d1b093e237",
        "repo": "jackrabbit",
        "unit_tests": [
            "NodeImplTest.java"
        ]
    },
    "jackrabbit_3f55d09": {
        "bug_id": "jackrabbit_3f55d09",
        "commit": "https://github.com/apache/jackrabbit/commit/3f55d09a77b3e332efcc1507dbc319d4712c7fdb",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jackrabbit/blob/3f55d09a77b3e332efcc1507dbc319d4712c7fdb/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/SessionImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/SessionImpl.java?ref=3f55d09a77b3e332efcc1507dbc319d4712c7fdb",
                "deletions": 1,
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/SessionImpl.java",
                "patch": "@@ -806,7 +806,10 @@ public boolean itemExists(String absPath) throws RepositoryException {\n      * {@inheritDoc}\n      */\n     public void save() throws RepositoryException {\n-        perform(new SessionSaveOperation());\n+        // JCR-3131: no need to perform save op when there's nothing to save...\n+        if (context.getItemStateManager().hasAnyTransientItemStates()) {\n+            perform(new SessionSaveOperation());\n+        }\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/jackrabbit/raw/3f55d09a77b3e332efcc1507dbc319d4712c7fdb/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/SessionImpl.java",
                "sha": "c689c25b9bd0acc3d52c4dbe8f2ee8ef52bd378c",
                "status": "modified"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/jackrabbit/blob/3f55d09a77b3e332efcc1507dbc319d4712c7fdb/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/acl/WriteTest.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/acl/WriteTest.java?ref=3f55d09a77b3e332efcc1507dbc319d4712c7fdb",
                "deletions": 0,
                "filename": "jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/acl/WriteTest.java",
                "patch": "@@ -504,4 +504,30 @@ public void testRemoveNodeWithInvisibleNonRemovableChild() throws Exception {\n             // success\n         }\n     }\n+    \n+    // https://issues.apache.org/jira/browse/JCR-3131\n+    public void testEmptySaveNoRootAccess() throws RepositoryException, NotExecutableException {\n+\n+        Session s = getTestSession();\n+        s.save();\n+\n+        Privilege[] read = privilegesFromName(Privilege.JCR_READ);\n+\n+        try {\n+            JackrabbitAccessControlList tmpl = getPolicy(acMgr, \"/\", testUser.getPrincipal());\n+            tmpl.addEntry(testUser.getPrincipal(), read, false, getRestrictions(superuser, path));\n+            acMgr.setPolicy(tmpl.getPath(), tmpl);\n+            superuser.save();\n+\n+            // empty save operation\n+            s.save();\n+        }\n+        finally {\n+            // undo revocation of read privilege\n+            JackrabbitAccessControlList tmpl = getPolicy(acMgr, \"/\", testUser.getPrincipal());\n+            tmpl.addEntry(testUser.getPrincipal(), read, true, getRestrictions(superuser, path));\n+            acMgr.setPolicy(tmpl.getPath(), tmpl);\n+            superuser.save();\n+        }\n+    }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/jackrabbit/raw/3f55d09a77b3e332efcc1507dbc319d4712c7fdb/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/acl/WriteTest.java",
                "sha": "a6ae45e73c94a63b47777b987a5c8da7d1cfa0fb",
                "status": "modified"
            }
        ],
        "message": "JCR-3131: NPE in ItemManager when calling Session.save() with nothing to save\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1196062 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit/commit/4fa3d5f41bd428876ad4fe5a44d340c94973b942",
        "repo": "jackrabbit",
        "unit_tests": [
            "SessionImplTest.java"
        ]
    },
    "jackrabbit_524deb7": {
        "bug_id": "jackrabbit_524deb7",
        "commit": "https://github.com/apache/jackrabbit/commit/524deb74243abba98b246845296ee422baf4c556",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jackrabbit/blob/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersion.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersion.java?ref=524deb74243abba98b246845296ee422baf4c556",
                "deletions": 1,
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersion.java",
                "patch": "@@ -21,6 +21,7 @@\n import javax.jcr.version.Version;\n \n import java.util.Calendar;\n+import java.util.List;\n \n /**\n  * This interface defines the internal version.\n@@ -63,7 +64,7 @@\n      * @see javax.jcr.version.Version#getSuccessors()\n      * @return the successors as internal versions\n      */\n-    InternalVersion[] getSuccessors();\n+    List<InternalVersion> getSuccessors();\n \n     /**\n      * Equivalent to {@link Version#getLinearSuccessor()}.",
                "raw_url": "https://github.com/apache/jackrabbit/raw/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersion.java",
                "sha": "a612163bb2da395dbf05a11fd20e9470fc2e575a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit/blob/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionHistoryImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionHistoryImpl.java?ref=524deb74243abba98b246845296ee422baf4c556",
                "deletions": 1,
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionHistoryImpl.java",
                "patch": "@@ -162,7 +162,7 @@ private synchronized void init() throws RepositoryException {\n         }\n \n         // fix legacy\n-        if (rootVersion.getSuccessors().length == 0) {\n+        if (rootVersion.getSuccessors().isEmpty()) {\n             for (Name versionName : nameCache.keySet()) {\n                 InternalVersionImpl v = createVersionInstance(versionName);\n                 v.legacyResolveSuccessors();",
                "raw_url": "https://github.com/apache/jackrabbit/raw/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionHistoryImpl.java",
                "sha": "9929305c5226f744bb109a677579e0c1cdab183a",
                "status": "modified"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/jackrabbit/blob/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionImpl.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionImpl.java?ref=524deb74243abba98b246845296ee422baf4c556",
                "deletions": 11,
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionImpl.java",
                "patch": "@@ -22,11 +22,14 @@\n import org.apache.jackrabbit.core.id.NodeId;\n import org.apache.jackrabbit.spi.Name;\n import org.apache.jackrabbit.spi.commons.name.NameConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import javax.jcr.PropertyType;\n import javax.jcr.RepositoryException;\n import java.util.Arrays;\n import java.util.Calendar;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.ArrayList;\n@@ -37,6 +40,10 @@\n class InternalVersionImpl extends InternalVersionItemImpl\n         implements InternalVersion {\n \n+    /** Logger instance */\n+    private static final Logger log =\n+        LoggerFactory.getLogger(InternalVersionImpl.class);\n+\n     /**\n      * the date when this version was created\n      */\n@@ -138,18 +145,27 @@ public Calendar getCreated() {\n     /**\n      * {@inheritDoc}\n      */\n-    public InternalVersion[] getSuccessors() {\n+    public List<InternalVersion> getSuccessors() {\n         ReadLock lock = vMgr.acquireReadLock();\n         try {\n-            InternalValue[] values = node.getPropertyValues(NameConstants.JCR_SUCCESSORS);\n+            InternalValue[] values =\n+                node.getPropertyValues(NameConstants.JCR_SUCCESSORS);\n             if (values != null) {\n-                InternalVersion[] versions = new InternalVersion[values.length];\n-                for (int i = 0; i < values.length; i++) {\n-                    versions[i] = versionHistory.getVersion(values[i].getNodeId());\n+                List<InternalVersion> versions =\n+                    new ArrayList<InternalVersion>(values.length);\n+                for (InternalValue value : values) {\n+                    InternalVersion version =\n+                        versionHistory.getVersion(value.getNodeId());\n+                    if (version != null) {\n+                        versions.add(version);\n+                    } else {\n+                        // Can happen with a corrupted repository (JCR-2655)\n+                        log.warn(\"Missing successor {}\", value.getNodeId());\n+                    }\n                 }\n                 return versions;\n             } else {\n-                return new InternalVersion[0];\n+                return Collections.emptyList();\n             }\n         } finally {\n             lock.release();\n@@ -275,8 +291,7 @@ private void storeXCessors(List<InternalVersion> cessors, Name propname, boolean\n      */\n     void internalDetach() throws RepositoryException {\n         // detach this from all successors\n-        InternalVersion[] succ = getSuccessors();\n-        for (InternalVersion aSucc : succ) {\n+        for (InternalVersion aSucc :  getSuccessors()) {\n             ((InternalVersionImpl) aSucc).internalDetachPredecessor(this, true);\n         }\n \n@@ -312,7 +327,7 @@ void internalAttach() throws RepositoryException {\n      */\n     private void internalAddSuccessor(InternalVersionImpl succ, boolean store)\n             throws RepositoryException {\n-        List<InternalVersion> l = new ArrayList<InternalVersion>(Arrays.asList(getSuccessors()));\n+        List<InternalVersion> l = new ArrayList<InternalVersion>(getSuccessors());\n         if (!l.contains(succ)) {\n             l.add(succ);\n             storeXCessors(l, NameConstants.JCR_SUCCESSORS, store);\n@@ -353,11 +368,11 @@ private void internalDetachPredecessor(InternalVersionImpl v, boolean store)\n     private void internalDetachSuccessor(InternalVersionImpl v, boolean store)\n             throws RepositoryException {\n         // remove 'v' from successors list\n-        List<InternalVersion> l = new ArrayList<InternalVersion>(Arrays.asList(getSuccessors()));\n+        List<InternalVersion> l = new ArrayList<InternalVersion>(getSuccessors());\n         l.remove(v);\n \n         // attach V's successors\n-        l.addAll(Arrays.asList(v.getSuccessors()));\n+        l.addAll(v.getSuccessors());\n         storeXCessors(l, NameConstants.JCR_SUCCESSORS, store);\n     }\n ",
                "raw_url": "https://github.com/apache/jackrabbit/raw/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionImpl.java",
                "sha": "85309383189b4b9f6afd4d4bfe9cf0b8a293011d",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit/blob/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionManagerBase.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionManagerBase.java?ref=524deb74243abba98b246845296ee422baf4c556",
                "deletions": 1,
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionManagerBase.java",
                "patch": "@@ -664,7 +664,7 @@ protected String calculateCheckinVersionName(InternalVersionHistoryImpl history,\n             return newVersionName;\n         } else {\n             // best is root version\n-            return String.valueOf(best.getSuccessors().length + 1) + \".0\";\n+            return String.valueOf(best.getSuccessors().size() + 1) + \".0\";\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/jackrabbit/raw/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionManagerBase.java",
                "sha": "0c12cb5eb2734f04f9d550c8bd9a8daa814a0949",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jackrabbit/blob/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalXAVersionManager.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalXAVersionManager.java?ref=524deb74243abba98b246845296ee422baf4c556",
                "deletions": 4,
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalXAVersionManager.java",
                "patch": "@@ -512,12 +512,10 @@ protected void internalRemoveVersion(InternalVersionHistoryImpl history, Name na\n             xaItems.put(history.getId(), history);\n             // also put 'successor' and 'predecessor' version items to xaItem sets\n             InternalVersion v = history.getVersion(name);\n-            InternalVersion[] vs = v.getSuccessors();\n-            for (InternalVersion v1 : vs) {\n+            for (InternalVersion v1 : v.getSuccessors()) {\n                 xaItems.put(v1.getId(), v1);\n             }\n-            vs = v.getPredecessors();\n-            for (InternalVersion v1 : vs) {\n+            for (InternalVersion v1 : v.getPredecessors()) {\n                 xaItems.put(v1.getId(), v1);\n             }\n         }",
                "raw_url": "https://github.com/apache/jackrabbit/raw/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalXAVersionManager.java",
                "sha": "819b40e2020ae624e26be9e0ee89c08df3f53808",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/jackrabbit/blob/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionImpl.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionImpl.java?ref=524deb74243abba98b246845296ee422baf4c556",
                "deletions": 4,
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionImpl.java",
                "patch": "@@ -34,6 +34,7 @@\n import javax.jcr.Node;\n import javax.jcr.nodetype.ConstraintViolationException;\n import java.util.Calendar;\n+import java.util.List;\n \n /**\n  * Base implementation of the {@link javax.jcr.version.Version} interface.\n@@ -84,10 +85,11 @@ public Calendar getCreated() throws RepositoryException {\n      */\n     public javax.jcr.version.Version[] getSuccessors() throws RepositoryException {\n         // need to wrap it around proper node\n-        InternalVersion[] suc = getInternalVersion().getSuccessors();\n-        Version[] ret = new Version[suc.length];\n-        for (int i = 0; i < suc.length; i++) {\n-            ret[i] = (Version) sessionContext.getSessionImpl().getNodeById(suc[i].getId());\n+        List<InternalVersion> suc = getInternalVersion().getSuccessors();\n+        Version[] ret = new Version[suc.size()];\n+        for (int i = 0; i < ret.length; i++) {\n+            ret[i] = (Version) sessionContext.getSessionImpl().getNodeById(\n+                    suc.get(i).getId());\n         }\n         return ret;\n     }",
                "raw_url": "https://github.com/apache/jackrabbit/raw/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionImpl.java",
                "sha": "42df5e3c39cd592e2374d105b0563af4af11956a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit/blob/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionIteratorImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionIteratorImpl.java?ref=524deb74243abba98b246845296ee422baf4c556",
                "deletions": 3,
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionIteratorImpl.java",
                "patch": "@@ -26,7 +26,6 @@\n import java.util.ConcurrentModificationException;\n import java.util.LinkedList;\n import java.util.NoSuchElementException;\n-import java.util.Arrays;\n \n /**\n  * This Class implements a VersionIterator that iterates over a version\n@@ -170,8 +169,7 @@ private synchronized void collectAllVersions(InternalVersion root) {\n             NodeId id = currentVersion.getId();\n             if (!versions.contains(id)) {\n                 versions.add(id);\n-                InternalVersion[] successors = currentVersion.getSuccessors();\n-                workQueue.addAll(Arrays.asList(successors));\n+                workQueue.addAll(currentVersion.getSuccessors());\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/jackrabbit/raw/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionIteratorImpl.java",
                "sha": "99a485c51cfe190acda1ff4037c050be18e10034",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jackrabbit/blob/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionManagerImplRestore.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionManagerImplRestore.java?ref=524deb74243abba98b246845296ee422baf4c556",
                "deletions": 3,
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionManagerImplRestore.java",
                "patch": "@@ -19,6 +19,7 @@\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.LinkedList;\n+import java.util.List;\n import java.util.Set;\n \n import javax.jcr.ItemExistsException;\n@@ -577,14 +578,14 @@ protected void internalRestoreFrozen(NodeStateEx state,\n                     if (v == null) {\n                         // if version selector was unable to select version,\n                         // choose the initial one\n-                        InternalVersion[] vs = vh.getRootVersion().getSuccessors();\n-                        if (vs.length == 0) {\n+                        List<InternalVersion> vs = vh.getRootVersion().getSuccessors();\n+                        if (vs.isEmpty()) {\n                             String msg = \"Unable to select appropariate version for \"\n                                     + child.getName() + \" using \" + vsel;\n                             log.error(msg);\n                             throw new VersionException(msg);\n                         }\n-                        v = vs[0];\n+                        v = vs.get(0);\n                     }\n                     InternalFrozenNode f = v.getFrozenNode();\n                     restoredChild = state.addNode(fh.getName(), f.getFrozenPrimaryType(), f.getFrozenId());",
                "raw_url": "https://github.com/apache/jackrabbit/raw/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionManagerImplRestore.java",
                "sha": "72a76bae530495bdcebb85bd89cf18e86bb893da",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jackrabbit/blob/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/version/VersionIteratorImplTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/version/VersionIteratorImplTest.java?ref=524deb74243abba98b246845296ee422baf4c556",
                "deletions": 2,
                "filename": "jackrabbit-core/src/test/java/org/apache/jackrabbit/core/version/VersionIteratorImplTest.java",
                "patch": "@@ -16,7 +16,9 @@\n  */\n package org.apache.jackrabbit.core.version;\n \n+import java.util.Arrays;\n import java.util.Calendar;\n+import java.util.List;\n \n import junit.framework.TestCase;\n \n@@ -37,8 +39,8 @@ public DummyInternalVersion(InternalVersion[] successors, NodeId id) {\n             this.id = id;\n         }\n \n-        public InternalVersion[] getSuccessors() {\n-            return successors;\n+        public List<InternalVersion> getSuccessors() {\n+            return Arrays.asList(successors);\n         }\n \n         public NodeId getId() {",
                "raw_url": "https://github.com/apache/jackrabbit/raw/524deb74243abba98b246845296ee422baf4c556/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/version/VersionIteratorImplTest.java",
                "sha": "c14f66bb6211a4ff7430a807018dbe1a311fd01b",
                "status": "modified"
            }
        ],
        "message": "JCR-2655: initVersions crashes with NPE\n\nSkip missing successors to avoid the NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1000912 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit/commit/97bb7f89fc3d1487dc2155f44a2c2d9db7c74169",
        "repo": "jackrabbit",
        "unit_tests": [
            "InternalVersionHistoryImplTest.java",
            "VersionIteratorImplTest.java"
        ]
    },
    "jackrabbit_6251ae0": {
        "bug_id": "jackrabbit_6251ae0",
        "commit": "https://github.com/apache/jackrabbit/commit/6251ae013f83502b63a5ca7b88e50af8104c4a79",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jackrabbit/blob/6251ae013f83502b63a5ca7b88e50af8104c4a79/src/java/org/apache/jackrabbit/core/NodeImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/src/java/org/apache/jackrabbit/core/NodeImpl.java?ref=6251ae013f83502b63a5ca7b88e50af8104c4a79",
                "deletions": 1,
                "filename": "src/java/org/apache/jackrabbit/core/NodeImpl.java",
                "patch": "@@ -1617,12 +1617,14 @@ public boolean isNode() {\n      * {@inheritDoc}\n      */\n     public String getName() throws RepositoryException {\n+        // check state of this instance\n+        sanityCheck();\n+\n         if (state.getParentUUID() == null) {\n             // this is the root node\n             return \"\";\n         }\n \n-        //QName name = getPrimaryPath().getNameElement().getName();\n         QName name = session.getHierarchyManager().getName(id);\n         try {\n             return name.toJCRName(session.getNamespaceResolver());",
                "raw_url": "https://github.com/apache/jackrabbit/raw/6251ae013f83502b63a5ca7b88e50af8104c4a79/src/java/org/apache/jackrabbit/core/NodeImpl.java",
                "sha": "5f4fb7aa9d03f5bb38a208be0b6a554849c8a1e3",
                "status": "modified"
            }
        ],
        "message": "calling Node.getName() on disposed instance could throw NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@160858 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit/commit/105b3b1d3496786cd85305e462d208edf66d1ca9",
        "repo": "jackrabbit",
        "unit_tests": [
            "NodeImplTest.java"
        ]
    },
    "jackrabbit_6f86c84": {
        "bug_id": "jackrabbit_6f86c84",
        "commit": "https://github.com/apache/jackrabbit/commit/6f86c84fc59da1cb9c54ff659a6bbbfc25c64498",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit/blob/6f86c84fc59da1cb9c54ff659a6bbbfc25c64498/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionIteratorImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionIteratorImpl.java?ref=6f86c84fc59da1cb9c54ff659a6bbbfc25c64498",
                "deletions": 1,
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionIteratorImpl.java",
                "patch": "@@ -43,7 +43,7 @@\n     /**\n      * the id's of the versions to return\n      */\n-    private LinkedList<NodeId> versions = new LinkedList<NodeId>();\n+    private final LinkedList<NodeId> versions = new LinkedList<NodeId>();\n \n     /**\n      * the current position",
                "raw_url": "https://github.com/apache/jackrabbit/raw/6f86c84fc59da1cb9c54ff659a6bbbfc25c64498/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionIteratorImpl.java",
                "sha": "7d2df985c5d0f05dfb89633dfc04a0125fc91b2f",
                "status": "modified"
            }
        ],
        "message": "JCR-2655: initVersions crashes with NPE\n\nMake an unmodified variable final.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1032621 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit/commit/828e730f556c83e9dbc46384383d6f3081b316f1",
        "repo": "jackrabbit",
        "unit_tests": [
            "VersionIteratorImplTest.java"
        ]
    },
    "jackrabbit_7280250": {
        "bug_id": "jackrabbit_7280250",
        "commit": "https://github.com/apache/jackrabbit/commit/7280250cac441584c513a16937724b2adbbbfd87",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit/blob/7280250cac441584c513a16937724b2adbbbfd87/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authentication/token/TokenProvider.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authentication/token/TokenProvider.java?ref=7280250cac441584c513a16937724b2adbbbfd87",
                "deletions": 1,
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authentication/token/TokenProvider.java",
                "patch": "@@ -328,7 +328,7 @@ private NodeImpl getTokenParent(User user) throws RepositoryException {\n                     }\n                 }\n             } else {\n-                log.debug(\"Cannot create login token: No corresponding node for User {}.\", user.getID());\n+                log.debug(\"Cannot create login token: No user specified. (null)\");\n             }\n         } catch (RepositoryException e) {\n             // conflict while creating token store for this user -> refresh and",
                "raw_url": "https://github.com/apache/jackrabbit/raw/7280250cac441584c513a16937724b2adbbbfd87/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authentication/token/TokenProvider.java",
                "sha": "50666a2c1043303017427b5a102a819f9ef0cfe9",
                "status": "modified"
            }
        ],
        "message": "fix NPE on error path when user is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1577995 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit/commit/3d86c4ec5bb5a274ffc24362d28f0bcb23adacc9",
        "repo": "jackrabbit",
        "unit_tests": [
            "TokenProviderTest.java"
        ]
    },
    "jackrabbit_7d653b1": {
        "bug_id": "jackrabbit_7d653b1",
        "commit": "https://github.com/apache/jackrabbit/commit/7d653b12127c3da2f5c1804551bd76c6797fd21d",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jackrabbit/blob/7d653b12127c3da2f5c1804551bd76c6797fd21d/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/QueryFormat.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/QueryFormat.java?ref=7d653b12127c3da2f5c1804551bd76c6797fd21d",
                "deletions": 1,
                "filename": "jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/QueryFormat.java",
                "patch": "@@ -348,7 +348,7 @@ public Object visit(RelationQueryNode node, Object data) throws RepositoryExcept\n             PathQueryNode relPath = node.getRelativePath();\n             if (relPath == null) {\n                 propPath.append(\".\");\n-            } else if (relPath.getNumOperands() > 0 && relPath.getPathSteps()[0].getNameTest().equals(XPathQueryBuilder.FN_POSITION_FULL)) {\n+            } else if (relPath.getNumOperands() > 0 && XPathQueryBuilder.FN_POSITION_FULL.equals(relPath.getPathSteps()[0].getNameTest())) {\n                 propPath.append(resolver.getJCRName(XPathQueryBuilder.FN_POSITION_FULL));\n             } else {\n                 LocationStepQueryNode[] steps = relPath.getPathSteps();",
                "raw_url": "https://github.com/apache/jackrabbit/raw/7d653b12127c3da2f5c1804551bd76c6797fd21d/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/QueryFormat.java",
                "sha": "d345adcaaaeb7c9dde3ff7b12e145c4c540a5b98",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/jackrabbit/blob/7d653b12127c3da2f5c1804551bd76c6797fd21d/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/XPathQueryBuilder.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/XPathQueryBuilder.java?ref=7d653b12127c3da2f5c1804551bd76c6797fd21d",
                "deletions": 3,
                "filename": "jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/XPathQueryBuilder.java",
                "patch": "@@ -425,8 +425,13 @@ public Object visit(SimpleNode node, Object data) {\n                         }\n                         PathQueryNode relPath = tmp.getRelativePath();\n                         LocationStepQueryNode[] steps = relPath.getPathSteps();\n-                        \n-                        tmpRelPath.addLast(steps[steps.length-1].getNameTest());\n+\n+                        Name nameTest = steps[steps.length-1].getNameTest();\n+                        if (nameTest==null) {\n+                        \t// see LocationStepQueryNode javadoc on when getNameTest()==null: when it was a star (asterisk)\n+                        \tnameTest = RelationQueryNode.STAR_NAME_TEST;\n+                        }\n+\t\t\t\t\t\ttmpRelPath.addLast(nameTest);\n                     }\n                 }\n                 break;\n@@ -956,7 +961,7 @@ private QueryNode createFunction(SimpleNode node, QueryNode queryNode) {\n                     }\n                     if (queryNode.getType() == QueryNode.TYPE_PATH) {\n                         PathQueryNode pathNode = (PathQueryNode) queryNode;\n-                        \n+\n                         pathNode.addPathStep(createDerefQueryNode(node, descendant, pathNode));\n                     } else if (queryNode.getType() == QueryNode.TYPE_RELATION) {\n                         RelationQueryNode relNode = (RelationQueryNode) queryNode;",
                "raw_url": "https://github.com/apache/jackrabbit/raw/7d653b12127c3da2f5c1804551bd76c6797fd21d/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/XPathQueryBuilder.java",
                "sha": "2fa556437e041137d664dcbd958f04983d390450",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/jackrabbit/blob/7d653b12127c3da2f5c1804551bd76c6797fd21d/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/query/xpath/QueryFormatTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/query/xpath/QueryFormatTest.java?ref=7d653b12127c3da2f5c1804551bd76c6797fd21d",
                "deletions": 0,
                "filename": "jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/query/xpath/QueryFormatTest.java",
                "patch": "@@ -67,6 +67,14 @@ public void testStarNameTest() throws Exception {\n         checkStatement(\"//element(*, foo)[foo/*/@bar = 'bla']\");\n     }\n \n+    public void testStarNameAtBeginningOfPredicate() throws Exception {\n+        checkStatement(\"//element(*, foo)[*/*/@bar = 'bla']\");\n+    }\n+\n+    public void testChildStarName() throws Exception {\n+        checkStatement(\"//programs//*[*/@sunday]\");\n+    }\n+\n     public void testRepSimilar() throws Exception {\n         checkStatement(\"//element(*, foo)[rep:similar(foo, '/some/path')]\");\n     }",
                "raw_url": "https://github.com/apache/jackrabbit/raw/7d653b12127c3da2f5c1804551bd76c6797fd21d/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/query/xpath/QueryFormatTest.java",
                "sha": "a07e8e255ab27c025c1e011d651663d55d8ab3a1",
                "status": "modified"
            }
        ],
        "message": "JCR-3435: Fix NPE for xpath query with child axis and star name\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1393342 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit/commit/c403b6eca2b7722a9dc8db2fb237e2fb050f79ac",
        "repo": "jackrabbit",
        "unit_tests": [
            "QueryFormatTest.java"
        ]
    },
    "jackrabbit_9b9beb7": {
        "bug_id": "jackrabbit_9b9beb7",
        "commit": "https://github.com/apache/jackrabbit/commit/9b9beb7f3a6970f234a637d127f820055b828053",
        "file": [
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/jackrabbit/blob/9b9beb7f3a6970f234a637d127f820055b828053/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionHistoryImpl.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionHistoryImpl.java?ref=9b9beb7f3a6970f234a637d127f820055b828053",
                "deletions": 0,
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionHistoryImpl.java",
                "patch": "@@ -290,6 +290,32 @@ public boolean hasVersion(Name versionName) {\n      * {@inheritDoc}\n      */\n     public InternalVersion getVersion(NodeId id) {\n+        InternalVersion v = getCachedVersion(id);\n+\n+        // If the version was not found, our cache may not have been\n+        // synchronized with updates from another cluster node.  Reload the history\n+        // to be sure we have the latest updates and try again.\n+        if (v == null) {\n+            try {\n+                reload();\n+            } catch (RepositoryException e) {\n+\n+                // We should add the checked exception to this method definition\n+                // so we don't need to wrap it.\n+                // Avoiding it for now to limit impact of this fix.\n+                throw new RuntimeException(e);\n+            }\n+            v = getCachedVersion(id);\n+        }\n+\n+        return v;\n+    }\n+\n+    /**\n+     * Returns the version from cache, or <code>null</code> if it is not\n+     * present.\n+     */\n+    private InternalVersion getCachedVersion(NodeId id) {\n         InternalVersion v = versionCache.get(id);\n         if (v == null) {\n             for (Name versionName : nameCache.keySet()) {",
                "raw_url": "https://github.com/apache/jackrabbit/raw/9b9beb7f3a6970f234a637d127f820055b828053/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionHistoryImpl.java",
                "sha": "3e9f5a266cbd589af12e30ff3054a1403752a13d",
                "status": "modified"
            }
        ],
        "message": "JCR-1440: NPE Thrown when two Cluster Nodes are hitting the same underlying database\n\nPatch by Ryan Brush\n\nThis needs more work (the solution reminds me of the double checked-locking antipattern), but at least it solves the most pressing issue and does not seem to cause any notable risk to other use cases.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@911856 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit/commit/c41e81997a91f21839c63ba4a8faf8d068054dfb",
        "repo": "jackrabbit",
        "unit_tests": [
            "InternalVersionHistoryImplTest.java"
        ]
    },
    "jackrabbit_a0b4637": {
        "bug_id": "jackrabbit_a0b4637",
        "commit": "https://github.com/apache/jackrabbit/commit/a0b46378111db40c38862ae45eea1e5387b91fbd",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/jackrabbit/blob/a0b46378111db40c38862ae45eea1e5387b91fbd/jackrabbit/src/main/java/org/apache/jackrabbit/core/version/InternalVersionHistoryImpl.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit/src/main/java/org/apache/jackrabbit/core/version/InternalVersionHistoryImpl.java?ref=a0b46378111db40c38862ae45eea1e5387b91fbd",
                "deletions": 2,
                "filename": "jackrabbit/src/main/java/org/apache/jackrabbit/core/version/InternalVersionHistoryImpl.java",
                "patch": "@@ -152,8 +152,12 @@ private void init() throws RepositoryException {\n                     QName name = pState.getName();\n                     UUID ref = (UUID) pState.getValues()[0].internalValue();\n                     InternalVersionImpl v = (InternalVersionImpl) getVersion(new NodeId(ref));\n-                    labelCache.put(name, v);\n-                    v.internalAddLabel(name);\n+                    if (v != null) {\n+                        labelCache.put(name, v);\n+                        v.internalAddLabel(name);\n+                    } else {\n+                        log.warn(\"Error while resolving label reference. Version missing: \" + ref);\n+                    }\n                 }\n             }\n         } catch (ItemStateException e) {",
                "raw_url": "https://github.com/apache/jackrabbit/raw/a0b46378111db40c38862ae45eea1e5387b91fbd/jackrabbit/src/main/java/org/apache/jackrabbit/core/version/InternalVersionHistoryImpl.java",
                "sha": "b09ccddc9eed9e6ffa507674aff034661defd861",
                "status": "modified"
            }
        ],
        "message": "adding simple protection of eventual NPE. need to investigate further.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@405567 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit/commit/0ce449c65fc93dd402fd1d88ba3baa8e89be69df",
        "repo": "jackrabbit",
        "unit_tests": [
            "InternalVersionHistoryImplTest.java"
        ]
    },
    "jackrabbit_a0ec94d": {
        "bug_id": "jackrabbit_a0ec94d",
        "commit": "https://github.com/apache/jackrabbit/commit/a0ec94d1a547749bfb692cf5ada2dd30e11e5a3b",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/jackrabbit/blob/a0ec94d1a547749bfb692cf5ada2dd30e11e5a3b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/NodeIndexer.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/NodeIndexer.java?ref=a0ec94d1a547749bfb692cf5ada2dd30e11e5a3b",
                "deletions": 0,
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/NodeIndexer.java",
                "patch": "@@ -164,6 +164,12 @@ protected Document createDoc() throws RepositoryException {\n                 doc.add(new Field(FieldNames.PARENT, node.getParentId().toString(), Field.Store.YES, Field.Index.UN_TOKENIZED, Field.TermVector.NO));\n                 NodeState parent = (NodeState) stateProvider.getItemState(node.getParentId());\n                 NodeState.ChildNodeEntry child = parent.getChildNodeEntry(node.getNodeId());\n+                if (child == null) {\n+                    // this can only happen when jackrabbit\n+                    // is running in a cluster.\n+                    throw new RepositoryException(\"Missing child node entry \" +\n+                            \"for node with id: \" + node.getNodeId());\n+                }\n                 String name = NameFormat.format(child.getName(), mappings);\n                 doc.add(new Field(FieldNames.LABEL, name, Field.Store.NO, Field.Index.UN_TOKENIZED, Field.TermVector.NO));\n             }",
                "raw_url": "https://github.com/apache/jackrabbit/raw/a0ec94d1a547749bfb692cf5ada2dd30e11e5a3b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/NodeIndexer.java",
                "sha": "cb8bb08f50679e2e330f352d09213e763b5b0985",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jackrabbit/blob/a0ec94d1a547749bfb692cf5ada2dd30e11e5a3b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SearchIndex.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SearchIndex.java?ref=a0ec94d1a547749bfb692cf5ada2dd30e11e5a3b",
                "deletions": 3,
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SearchIndex.java",
                "patch": "@@ -422,11 +422,11 @@ public Object next() {\n                 Document doc = null;\n                 try {\n                     doc = createDocument(state, getNamespaceMappings());\n+                    retrieveAggregateRoot(state, aggregateRoots);\n                 } catch (RepositoryException e) {\n-                    log.error(\"Exception while creating document for node: \"\n+                    log.warn(\"Exception while creating document for node: \"\n                             + state.getNodeId() + \": \" + e.toString());\n                 }\n-                retrieveAggregateRoot(state, aggregateRoots);\n                 return doc;\n             }\n         });\n@@ -451,7 +451,7 @@ public Object next() {\n                     try {\n                         return createDocument(state, getNamespaceMappings());\n                     } catch (RepositoryException e) {\n-                        log.error(\"Exception while creating document for node: \"\n+                        log.warn(\"Exception while creating document for node: \"\n                                 + state.getNodeId() + \": \" + e.toString());\n                     }\n                     return null;",
                "raw_url": "https://github.com/apache/jackrabbit/raw/a0ec94d1a547749bfb692cf5ada2dd30e11e5a3b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SearchIndex.java",
                "sha": "af975ed5c9ad7e04a74563266cc45897a2fea944",
                "status": "modified"
            }
        ],
        "message": "JCR-931: cluster synchronization NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@540492 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit/commit/c0bca944465ca480ffd9d5f7112a6aa8f2093cb7",
        "repo": "jackrabbit",
        "unit_tests": [
            "SearchIndexTest.java"
        ]
    },
    "jackrabbit_a94e7a2": {
        "bug_id": "jackrabbit_a94e7a2",
        "commit": "https://github.com/apache/jackrabbit/commit/a94e7a22c29e32ec348eace5e2f05b1bc8bc8d15",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/jackrabbit/blob/a94e7a22c29e32ec348eace5e2f05b1bc8bc8d15/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/ConsistencyCheckerImpl.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/ConsistencyCheckerImpl.java?ref=a94e7a22c29e32ec348eace5e2f05b1bc8bc8d15",
                "deletions": 0,
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/ConsistencyCheckerImpl.java",
                "patch": "@@ -309,6 +309,8 @@ private void checkBundleConsistency(NodeId id, NodePropBundle bundle,\n                             log.error(message);\n                             missingChildren.add(entry);\n                         }\n+                    } else {\n+                        return;\n                     }\n                 } else {\n                     NodeId cp = childBundle.getParentId();\n@@ -333,6 +335,8 @@ private void checkBundleConsistency(NodeId id, NodePropBundle bundle,\n                                     log.error(message);\n                                 }\n                             }\n+                        } else {\n+                            return;\n                         }\n                     }\n                 }\n@@ -376,6 +380,8 @@ private void checkBundleConsistency(NodeId id, NodePropBundle bundle,\n                                 modifications.add(bundle);\n                             }\n                         }\n+                    } else {\n+                        return;\n                     }\n                 } else {\n                     boolean found = false;\n@@ -410,6 +416,8 @@ private void checkBundleConsistency(NodeId id, NodePropBundle bundle,\n                                         + \"'\");\n                                 modifications.add(parentBundle);\n                             }\n+                        } else {\n+                            return;\n                         }\n                     }\n ",
                "raw_url": "https://github.com/apache/jackrabbit/raw/a94e7a22c29e32ec348eace5e2f05b1bc8bc8d15/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/ConsistencyCheckerImpl.java",
                "sha": "2afaffbb56e62ab5c3829df006b941569b903330",
                "status": "modified"
            }
        ],
        "message": "JCR-3265 guard against possible npe's due to double checking: if the bundle is no longer there we don't need to continue to check it\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1350207 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit/commit/e3651d9a88b13b48cfb84f5830d985d3cac4dae0",
        "repo": "jackrabbit",
        "unit_tests": [
            "ConsistencyCheckerImplTest.java"
        ]
    },
    "jackrabbit_ac1354c": {
        "bug_id": "jackrabbit_ac1354c",
        "commit": "https://github.com/apache/jackrabbit/commit/ac1354cd57d9aa8492555381a7c30715132909e6",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jackrabbit/blob/ac1354cd57d9aa8492555381a7c30715132909e6/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/server/BasicCredentialsProvider.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/server/BasicCredentialsProvider.java?ref=ac1354cd57d9aa8492555381a7c30715132909e6",
                "deletions": 2,
                "filename": "jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/server/BasicCredentialsProvider.java",
                "patch": "@@ -94,8 +94,8 @@ public Credentials getCredentials(HttpServletRequest request)\n                     return null;\n                 } else {\n                     int pos = defaultHeaderValue.indexOf(':');\n-                    if (pos<0) {\n-                        return new SimpleCredentials(defaultHeaderValue, null);\n+                    if (pos < 0) {\n+                        return new SimpleCredentials(defaultHeaderValue, new char[0]);\n                     } else {\n                         return new SimpleCredentials(\n                                 defaultHeaderValue.substring(0, pos),",
                "raw_url": "https://github.com/apache/jackrabbit/raw/ac1354cd57d9aa8492555381a7c30715132909e6/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/server/BasicCredentialsProvider.java",
                "sha": "e80e812694e6022c0f44113f15327545a0e830bd",
                "status": "modified"
            },
            {
                "additions": 287,
                "blob_url": "https://github.com/apache/jackrabbit/blob/ac1354cd57d9aa8492555381a7c30715132909e6/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/server/BasicCredentialsProviderTest.java",
                "changes": 287,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/server/BasicCredentialsProviderTest.java?ref=ac1354cd57d9aa8492555381a7c30715132909e6",
                "deletions": 0,
                "filename": "jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/server/BasicCredentialsProviderTest.java",
                "patch": "@@ -0,0 +1,287 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jackrabbit.server;\n+\n+import junit.framework.TestCase;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpSession;\n+import javax.servlet.ServletInputStream;\n+import javax.servlet.RequestDispatcher;\n+import javax.servlet.ServletException;\n+import javax.jcr.LoginException;\n+import javax.jcr.Credentials;\n+import javax.jcr.SimpleCredentials;\n+import java.util.Enumeration;\n+import java.util.Map;\n+import java.util.Locale;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.security.Principal;\n+import java.io.UnsupportedEncodingException;\n+import java.io.IOException;\n+import java.io.BufferedReader;\n+\n+/**\n+ * <code>BasicCredentialsProviderTest</code>...\n+ */\n+public class BasicCredentialsProviderTest extends TestCase {\n+\n+    public void testMissingDefaultHeader() throws ServletException {\n+        CredentialsProvider cb = new BasicCredentialsProvider(null);\n+        try {\n+            Credentials creds = cb.getCredentials(new RequestImpl(null));\n+            fail(\"LoginException expected\");\n+        } catch (LoginException e) {\n+            // ok\n+        }\n+    }\n+\n+    public void testDefaultPassword() throws ServletException, LoginException {\n+        Map m = new HashMap();\n+        m.put(\"userId\", new char[0]);\n+        m.put(\"userId:\", new char[0]);\n+        m.put(\"userId:pw\", \"pw\".toCharArray());\n+\n+        for (Iterator it = m.keySet().iterator(); it.hasNext();) {\n+            String defaultHeaderValue = it.next().toString();\n+            char[] pw = (char[]) m.get(defaultHeaderValue);\n+\n+            CredentialsProvider cb = new BasicCredentialsProvider(defaultHeaderValue);\n+            Credentials creds = cb.getCredentials(new RequestImpl(null));\n+\n+            assertNotNull(creds);\n+            assertTrue(creds instanceof SimpleCredentials);\n+            assertEquals(\"userId\",((SimpleCredentials) creds).getUserID());\n+            if (pw.length == 0) {\n+                assertEquals(0, ((SimpleCredentials) creds).getPassword().length);\n+            } else {\n+                assertEquals(new String(pw), new String(((SimpleCredentials) creds).getPassword()));\n+            }\n+        }\n+    }\n+\n+\n+\n+\n+    private class RequestImpl implements HttpServletRequest {\n+\n+        private final String authHeader;\n+\n+        private RequestImpl(String authHeader) {\n+            this.authHeader = authHeader;\n+        }\n+\n+        public String getAuthType() {\n+            return null;\n+        }\n+\n+        public Cookie[] getCookies() {\n+            return new Cookie[0];\n+        }\n+\n+        public long getDateHeader(String name) {\n+            return 0;\n+        }\n+\n+        public String getHeader(String name) {\n+            return authHeader;\n+        }\n+\n+        public Enumeration getHeaders(String name) {\n+            return null;\n+        }\n+\n+        public Enumeration getHeaderNames() {\n+            return null;\n+        }\n+\n+        public int getIntHeader(String name) {\n+            return 0;\n+        }\n+\n+        public String getMethod() {\n+            return null;\n+        }\n+\n+        public String getPathInfo() {\n+            return null;\n+        }\n+\n+        public String getPathTranslated() {\n+            return null;\n+        }\n+\n+        public String getContextPath() {\n+            return null;\n+        }\n+\n+        public String getQueryString() {\n+            return null;\n+        }\n+\n+        public String getRemoteUser() {\n+            return null;\n+        }\n+\n+        public boolean isUserInRole(String role) {\n+            return false;\n+        }\n+\n+        public Principal getUserPrincipal() {\n+            return null;\n+        }\n+\n+        public String getRequestedSessionId() {\n+            return null;\n+        }\n+\n+        public String getRequestURI() {\n+            return null;\n+        }\n+\n+        public StringBuffer getRequestURL() {\n+            return null;\n+        }\n+\n+        public String getServletPath() {\n+            return null;\n+        }\n+\n+        public HttpSession getSession(boolean create) {\n+            return null;\n+        }\n+\n+        public HttpSession getSession() {\n+            return null;\n+        }\n+\n+        public boolean isRequestedSessionIdValid() {\n+            return false;\n+        }\n+\n+        public boolean isRequestedSessionIdFromCookie() {\n+            return false;\n+        }\n+\n+        public boolean isRequestedSessionIdFromURL() {\n+            return false;\n+        }\n+\n+        public boolean isRequestedSessionIdFromUrl() {\n+            return false;\n+        }\n+\n+        public Object getAttribute(String name) {\n+            return null;\n+        }\n+\n+        public Enumeration getAttributeNames() {\n+            return null;\n+        }\n+\n+        public String getCharacterEncoding() {\n+            return null;\n+        }\n+\n+        public void setCharacterEncoding(String s) throws UnsupportedEncodingException {\n+        }\n+\n+        public int getContentLength() {\n+            return 0;\n+        }\n+\n+        public String getContentType() {\n+            return null;\n+        }\n+\n+        public ServletInputStream getInputStream() throws IOException {\n+            return null;\n+        }\n+\n+        public String getParameter(String name) {\n+            return null;\n+        }\n+\n+        public Enumeration getParameterNames() {\n+            return null;\n+        }\n+\n+        public String[] getParameterValues(String name) {\n+            return new String[0];\n+        }\n+\n+        public Map getParameterMap() {\n+            return null;\n+        }\n+\n+        public String getProtocol() {\n+            return null;\n+        }\n+\n+        public String getScheme() {\n+            return null;\n+        }\n+\n+        public String getServerName() {\n+            return null;\n+        }\n+\n+        public int getServerPort() {\n+            return 0;\n+        }\n+\n+        public BufferedReader getReader() throws IOException {\n+            return null;\n+        }\n+\n+        public String getRemoteAddr() {\n+            return null;\n+        }\n+\n+        public String getRemoteHost() {\n+            return null;\n+        }\n+\n+        public void setAttribute(String name, Object o) {\n+        }\n+\n+        public void removeAttribute(String name) {\n+        }\n+\n+        public Locale getLocale() {\n+            return null;\n+        }\n+\n+        public Enumeration getLocales() {\n+            return null;\n+        }\n+\n+        public boolean isSecure() {\n+            return false;\n+        }\n+\n+        public RequestDispatcher getRequestDispatcher(String path) {\n+            return null;\n+        }\n+\n+        public String getRealPath(String path) {\n+            return null;\n+        }\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/jackrabbit/raw/ac1354cd57d9aa8492555381a7c30715132909e6/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/server/BasicCredentialsProviderTest.java",
                "sha": "f9b703db6b7f9b649b50f60a818112f72c983410",
                "status": "added"
            },
            {
                "additions": 39,
                "blob_url": "https://github.com/apache/jackrabbit/blob/ac1354cd57d9aa8492555381a7c30715132909e6/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/server/TestAll.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/server/TestAll.java?ref=ac1354cd57d9aa8492555381a7c30715132909e6",
                "deletions": 0,
                "filename": "jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/server/TestAll.java",
                "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jackrabbit.server;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test suite that includes all testcases for package org.apache.jackrabbit.server.\n+ */\n+public class TestAll extends TestCase {\n+\n+    /**\n+     * Returns a <code>Test</code> suite that executes all tests inside this\n+     * package.\n+     */\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(\"org.apache.jackrabbit.server tests\");\n+\n+        suite.addTestSuite(BasicCredentialsProviderTest.class);\n+\n+        return suite;\n+    }\n+}",
                "raw_url": "https://github.com/apache/jackrabbit/raw/ac1354cd57d9aa8492555381a7c30715132909e6/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/server/TestAll.java",
                "sha": "26efafb9d1b19aea6a1aa373f31f3d660ada6091",
                "status": "added"
            }
        ],
        "message": "JCR-2032 : BasicCredentialsProviderTest throws NPE if defaultAuthHeader init param misses the password\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@755512 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit/commit/cb0c0b1fe5e1137726ff14f5dbdc14bdae97dd63",
        "repo": "jackrabbit",
        "unit_tests": [
            "BasicCredentialsProviderTest.java"
        ]
    },
    "jackrabbit_d64e336": {
        "bug_id": "jackrabbit_d64e336",
        "commit": "https://github.com/apache/jackrabbit/commit/d64e3367c4bbb01e893b172bd735c1459d4c5f08",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/jackrabbit/blob/d64e3367c4bbb01e893b172bd735c1459d4c5f08/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/BatchedItemOperations.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/BatchedItemOperations.java?ref=d64e3367c4bbb01e893b172bd735c1459d4c5f08",
                "deletions": 5,
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/BatchedItemOperations.java",
                "patch": "@@ -43,7 +43,6 @@\n import org.apache.jackrabbit.core.retention.RetentionRegistry;\n import org.apache.jackrabbit.core.security.AccessManager;\n import org.apache.jackrabbit.core.security.authorization.Permission;\n-import org.apache.jackrabbit.core.security.user.UserManagerImpl;\n import org.apache.jackrabbit.core.session.SessionContext;\n import org.apache.jackrabbit.core.state.ChildNodeEntry;\n import org.apache.jackrabbit.core.state.ItemState;\n@@ -934,10 +933,6 @@ public void checkRemoveNode(NodeState targetState, NodeId parentId,\n                 throw new RepositoryException(\"Unable to perform removal. Node is affected by a retention.\");\n             }\n         }\n-\n-        if (UserManagerImpl.includesAdmin(context.getSessionImpl().getItemManager().getNode(targetPath))) {\n-            throw new RepositoryException(\"Attempt to remove/move the admin user.\");\n-        }\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/jackrabbit/raw/d64e3367c4bbb01e893b172bd735c1459d4c5f08/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/BatchedItemOperations.java",
                "sha": "ff32888e91aa4922f35fc8c25a07d453b1a1d4ef",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/jackrabbit/blob/d64e3367c4bbb01e893b172bd735c1459d4c5f08/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemValidator.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemValidator.java?ref=d64e3367c4bbb01e893b172bd735c1459d4c5f08",
                "deletions": 5,
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemValidator.java",
                "patch": "@@ -33,7 +33,6 @@\n import org.apache.jackrabbit.core.nodetype.NodeTypeConflictException;\n import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry;\n import org.apache.jackrabbit.core.security.authorization.Permission;\n-import org.apache.jackrabbit.core.security.user.UserManagerImpl;\n import org.apache.jackrabbit.core.session.SessionContext;\n import org.apache.jackrabbit.core.session.SessionOperation;\n import org.apache.jackrabbit.core.state.NodeState;\n@@ -303,10 +302,6 @@ private void checkCondition(ItemImpl item, int options, int permissions, boolean\n                 throw new RepositoryException(\"Unable to perform operation. Node is affected by a retention.\");\n             }\n         }\n-\n-        if (isRemoval && item.isNode() && UserManagerImpl.includesAdmin((NodeImpl) item)) {\n-            throw new RepositoryException(\"Attempt to remove/move the admin user.\");\n-        }\n     }\n \n     public synchronized boolean canModify(",
                "raw_url": "https://github.com/apache/jackrabbit/raw/d64e3367c4bbb01e893b172bd735c1459d4c5f08/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemValidator.java",
                "sha": "eb08c56812c9680ae9aab060fcb9095297c3797f",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/jackrabbit/blob/d64e3367c4bbb01e893b172bd735c1459d4c5f08/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/UserManagerImpl.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/UserManagerImpl.java?ref=d64e3367c4bbb01e893b172bd735c1459d4c5f08",
                "deletions": 15,
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/UserManagerImpl.java",
                "patch": "@@ -16,7 +16,6 @@\n  */\n package org.apache.jackrabbit.core.security.user;\n \n-import org.apache.jackrabbit.api.JackrabbitRepository;\n import org.apache.jackrabbit.api.security.principal.ItemBasedPrincipal;\n import org.apache.jackrabbit.api.security.user.Authorizable;\n import org.apache.jackrabbit.api.security.user.AuthorizableExistsException;\n@@ -1154,20 +1153,6 @@ public void loggedOut(SessionImpl session) {\n         }\n     }\n \n-    //--------------------------------------------------------------------------\n-    public static boolean includesAdmin(NodeImpl node) throws RepositoryException {\n-        SessionImpl s = (SessionImpl) node.getSession();\n-        if (s.getRepository().getDescriptorValue(JackrabbitRepository.OPTION_USER_MANAGEMENT_SUPPORTED).getBoolean()) {\n-            UserManager uMgr = s.getUserManager();\n-            if (uMgr instanceof UserManagerImpl) {\n-                UserManagerImpl uMgrImpl = (UserManagerImpl) uMgr;\n-                AuthorizableImpl admin = (AuthorizableImpl) uMgrImpl.getAuthorizable(uMgrImpl.adminId);\n-                return Text.isDescendantOrEqual(node.getPath(), admin.getNode().getPath());\n-            }\n-        }\n-        return false;\n-    }\n-\n     //------------------------------------------------------< inner classes >---\n     /**\n      * Inner class",
                "raw_url": "https://github.com/apache/jackrabbit/raw/d64e3367c4bbb01e893b172bd735c1459d4c5f08/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/UserManagerImpl.java",
                "sha": "dcdc91d5b9d1142c657dfa463d9e6355a472312d",
                "status": "modified"
            },
            {
                "additions": 149,
                "blob_url": "https://github.com/apache/jackrabbit/blob/d64e3367c4bbb01e893b172bd735c1459d4c5f08/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/AdministratorTest.java",
                "changes": 213,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/AdministratorTest.java?ref=d64e3367c4bbb01e893b172bd735c1459d4c5f08",
                "deletions": 64,
                "filename": "jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/AdministratorTest.java",
                "patch": "@@ -16,13 +16,20 @@\n  */\n package org.apache.jackrabbit.core.security.user;\n \n+import java.util.Properties;\n+import javax.jcr.Node;\n import javax.jcr.RepositoryException;\n import javax.jcr.Session;\n \n import org.apache.jackrabbit.api.security.user.AbstractUserTest;\n import org.apache.jackrabbit.api.security.user.Authorizable;\n+import org.apache.jackrabbit.api.security.user.User;\n+import org.apache.jackrabbit.api.security.user.UserManager;\n import org.apache.jackrabbit.core.NodeImpl;\n+import org.apache.jackrabbit.core.SessionImpl;\n+import org.apache.jackrabbit.core.id.NodeId;\n import org.apache.jackrabbit.core.security.principal.AdminPrincipal;\n+import org.apache.jackrabbit.spi.commons.conversion.NameResolver;\n import org.apache.jackrabbit.test.NotExecutableException;\n \n /**\n@@ -65,119 +72,197 @@ public void testRemoveSelf() throws RepositoryException, NotExecutableException\n         }\n     }\n \n+    /**\n+     * Test if the administrator is recreated upon login if the corresponding\n+     * node gets removed.\n+     *\n+     * @throws RepositoryException\n+     * @throws NotExecutableException\n+     */\n     public void testRemoveAdminNode() throws RepositoryException, NotExecutableException {\n         Authorizable admin = userMgr.getAuthorizable(adminId);\n \n         if (admin == null || !(admin instanceof AuthorizableImpl)) {\n             throw new NotExecutableException();\n         }\n \n-        Session s = null;\n+        // access the node corresponding to the admin user and remove it\n+        NodeImpl adminNode = ((AuthorizableImpl) admin).getNode();\n+        Session s = adminNode.getSession();\n+        adminNode.remove();\n+        // use session obtained from the node as usermgr may point to a dedicated\n+        // system workspace different from the superusers workspace.\n+        s.save();\n+\n+        // after removing the node the admin user doesn't exist any more\n+        assertNull(userMgr.getAuthorizable(adminId));\n+\n+        // login must succeed as system user mgr recreates the admin user\n+        Session s2 = getHelper().getSuperuserSession();\n         try {\n-            NodeImpl adminNode = ((AuthorizableImpl) admin).getNode();\n-            s = adminNode.getSession();\n-            adminNode.remove();\n-            // use session obtained from the node as usermgr may point to a dedicated\n-            // system workspace different from the superusers workspace.\n-            s.save();\n-            fail();\n-        } catch (RepositoryException e) {\n-            // success\n+            admin = userMgr.getAuthorizable(adminId);\n+            assertNotNull(admin);\n+            assertNotNull(getUserManager(s2).getAuthorizable(adminId));\n         } finally {\n-            if (s != null) {\n-                s.refresh(false);\n-            }\n+            s2.logout();\n         }\n     }\n \n-    public void testSessionRemoveItem()  throws RepositoryException, NotExecutableException {\n+    /**\n+     * Test for collisions that would prevent from recreate the admin user.\n+     * - an intermediate rep:AuthorizableFolder node with the same name\n+     */\n+    public void testAdminNodeCollidingWithAuthorizableFolder() throws RepositoryException, NotExecutableException {\n         Authorizable admin = userMgr.getAuthorizable(adminId);\n \n         if (admin == null || !(admin instanceof AuthorizableImpl)) {\n             throw new NotExecutableException();\n         }\n \n-        Session s = null;\n+        // access the node corresponding to the admin user and remove it\n+        NodeImpl adminNode = ((AuthorizableImpl) admin).getNode();\n+        String adminPath = adminNode.getPath();\n+        String adminNodeName = adminNode.getName();\n+        Node parentNode = adminNode.getParent();\n+\n+        Session s = adminNode.getSession();\n+        adminNode.remove();\n+        // use session obtained from the node as usermgr may point to a dedicated\n+        // system workspace different from the superusers workspace.\n+        s.save();\n+\n+        Session s2 = null;\n+        String collidingPath = null;\n         try {\n-            NodeImpl parent = (NodeImpl) ((AuthorizableImpl) admin).getNode().getParent();\n-            s = parent.getSession();\n-            s.removeItem(parent.getPath());\n+            // now create a colliding node:\n+            Node n = parentNode.addNode(adminNodeName, \"rep:AuthorizableFolder\");\n+            collidingPath = n.getPath();\n             s.save();\n-            fail();\n-        } catch (RepositoryException e) {\n-            // success\n+\n+            // force recreation of admin user.\n+            s2 = getHelper().getSuperuserSession();\n+\n+            admin = userMgr.getAuthorizable(adminId);\n+            assertNotNull(admin);\n+            assertEquals(adminNodeName, ((AuthorizableImpl) admin).getNode().getName());\n+            assertFalse(adminPath.equals(((AuthorizableImpl) admin).getNode().getPath()));\n+\n         } finally {\n-            if (s != null) {\n-                s.refresh(false);\n+            if (s2 != null) {\n+                s2.logout();\n+            }\n+            // remove the extra folder and the admin user (created underneath) again.\n+            if (collidingPath != null) {\n+                s.getNode(collidingPath).remove();\n+                s.save();\n             }\n         }\n     }\n \n-    public void testSessionMoveAdminNode()  throws RepositoryException, NotExecutableException {\n+    /**\n+     * Test for collisions that would prevent from recreate the admin user.\n+     * - a colliding node somewhere else with the same jcr:uuid.\n+     *\n+     * Test if creation of the administrator user forces the removal of some\n+     * other node in the repository that by change happens to have the same\n+     * jcr:uuid and thus inhibits the creation of the admininstrator user.\n+     */\n+    public void testAdminNodeCollidingWithRandomNode() throws RepositoryException, NotExecutableException {\n         Authorizable admin = userMgr.getAuthorizable(adminId);\n \n         if (admin == null || !(admin instanceof AuthorizableImpl)) {\n             throw new NotExecutableException();\n         }\n \n-        Session s = null;\n+        // access the node corresponding to the admin user and remove it\n+        NodeImpl adminNode = ((AuthorizableImpl) admin).getNode();\n+        NodeId nid = adminNode.getNodeId();\n+\n+        Session s = adminNode.getSession();\n+        adminNode.remove();\n+        // use session obtained from the node as usermgr may point to a dedicated\n+        // system workspace different from the superusers workspace.\n+        s.save();\n+\n+        Session s2 = null;\n+        String collidingPath = null;\n         try {\n-            NodeImpl adminNode = ((AuthorizableImpl) admin).getNode();\n-            s = adminNode.getSession();\n-            s.move(adminNode.getPath(), \"/somewhereelse\");\n-            // use session obtained from the node as usermgr may point to a dedicated\n-            // system workspace different from the superusers workspace.\n+            // create a colliding node outside of the user tree\n+            NameResolver nr = (SessionImpl) s;\n+            // NOTE: testRootNode will not be present if users are stored in a distinct wsp.\n+            //       therefore use root node as start...\n+            NodeImpl tr = (NodeImpl) s.getRootNode();\n+            Node n = tr.addNode(nr.getQName(\"tmpNode\"), nr.getQName(testNodeType), nid);\n+            collidingPath = n.getPath();\n             s.save();\n-            fail();\n-        } catch (RepositoryException e) {\n-            // success\n-        }  finally {\n-            if (s != null) {\n-                s.refresh(false);\n-            }\n-        }\n-    }\n \n-    public void testSessionMoveParentNode()  throws RepositoryException, NotExecutableException {\n-        Authorizable admin = userMgr.getAuthorizable(adminId);\n+            // force recreation of admin user.\n+            s2 = getHelper().getSuperuserSession();\n \n-        if (admin == null || !(admin instanceof AuthorizableImpl)) {\n-            throw new NotExecutableException();\n-        }\n+            admin = userMgr.getAuthorizable(adminId);\n+            assertNotNull(admin);\n+            // the colliding node must have been removed.\n+            assertFalse(s2.nodeExists(collidingPath));\n \n-        Session s = null;\n-        try {\n-            NodeImpl parent = (NodeImpl) ((AuthorizableImpl) admin).getNode().getParent();\n-            s = parent.getSession();\n-            s.move(parent.getPath(), \"/somewhereelse\");\n-            // use session obtained from the node as usermgr may point to a dedicated\n-            // system workspace different from the superusers workspace.\n-            s.save();\n-            fail();\n-        } catch (RepositoryException e) {\n-            // success\n         } finally {\n-            if (s != null) {\n-                s.refresh(false);\n+            if (s2 != null) {\n+                s2.logout();\n+            }\n+            if (collidingPath != null && s.nodeExists(collidingPath)) {\n+                s.getNode(collidingPath).remove();\n+                s.save();\n             }\n         }\n     }\n \n-    public void testWorkspaceMoveAdminNode()  throws RepositoryException, NotExecutableException {\n+    /**\n+     * Reconfiguration of the user-root-path will result in node collision\n+     * upon initialization of the built-in repository users. Test if the\n+     * UserManagerImpl in this case removes the colliding admin-user node.\n+     */\n+    public void testChangeUserRootPath() throws RepositoryException, NotExecutableException {\n         Authorizable admin = userMgr.getAuthorizable(adminId);\n \n         if (admin == null || !(admin instanceof AuthorizableImpl)) {\n             throw new NotExecutableException();\n         }\n \n         // access the node corresponding to the admin user and remove it\n+        NodeImpl adminNode = ((AuthorizableImpl) admin).getNode();\n+\n+        Session s = adminNode.getSession();\n+        adminNode.remove();\n+        // use session obtained from the node as usermgr may point to a dedicated\n+        // system workspace different from the superusers workspace.\n+        s.save();\n+\n+        Session s2 = null;\n+        String collidingPath = null;\n         try {\n-            NodeImpl adminNode = ((AuthorizableImpl) admin).getNode();\n-            Session s = adminNode.getSession();\n-            s.getWorkspace().move(adminNode.getPath(), \"/somewhereelse\");\n-            fail();\n-        } catch (RepositoryException e) {\n-            // success\n+            // create a colliding user node outside of the user tree\n+            Properties props = new Properties();\n+            props.setProperty(\"usersPath\", \"/testPath\");\n+            UserManager um = new UserManagerImpl((SessionImpl) s, adminId, props);\n+            User collidingUser = um.createUser(adminId, adminId);\n+            collidingPath = ((AuthorizableImpl) collidingUser).getNode().getPath();\n+            s.save();\n+\n+            // force recreation of admin user.\n+            s2 = getHelper().getSuperuserSession();\n+\n+            admin = userMgr.getAuthorizable(adminId);\n+            assertNotNull(admin);\n+            // the colliding node must have been removed.\n+            assertFalse(s2.nodeExists(collidingPath));\n+\n+        } finally {\n+            if (s2 != null) {\n+                s2.logout();\n+            }\n+            if (collidingPath != null && s.nodeExists(collidingPath)) {\n+                s.getNode(collidingPath).remove();\n+                s.save();\n+            }\n         }\n     }\n }",
                "raw_url": "https://github.com/apache/jackrabbit/raw/d64e3367c4bbb01e893b172bd735c1459d4c5f08/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/AdministratorTest.java",
                "sha": "b26ac51731a8c899504728007d49b76051e5ec0f",
                "status": "modified"
            }
        ],
        "message": "JCR-3702 : NPE if user w/o read permission on admin user node removes any node\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1546953 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit/commit/e134f4233aba42748cd6b35f56eadcf9cc6c4eb5",
        "repo": "jackrabbit",
        "unit_tests": [
            "UserManagerImplTest.java"
        ]
    },
    "jackrabbit_f64c554": {
        "bug_id": "jackrabbit_f64c554",
        "commit": "https://github.com/apache/jackrabbit/commit/f64c5543baead3bad17977b6ef29e4f5bf2c955c",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/jackrabbit/blob/f64c5543baead3bad17977b6ef29e4f5bf2c955c/contrib/spi/jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/operation/Restore.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/contrib/spi/jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/operation/Restore.java?ref=f64c5543baead3bad17977b6ef29e4f5bf2c955c",
                "deletions": 5,
                "filename": "contrib/spi/jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/operation/Restore.java",
                "patch": "@@ -68,16 +68,19 @@ public void accept(OperationVisitor visitor) throws PathNotFoundException, ItemE\n      */\n     public void persisted(CacheBehaviour cacheBehaviour) {\n         if (cacheBehaviour == CacheBehaviour.INVALIDATE) {\n+            NodeEntry entry;\n             if (nodeState == null || removeExisting) {\n                 // invalidate the complete tree\n-                NodeEntry root = nodeState.getNodeEntry();\n-                while (root.getParent() != null) {\n-                    root = root.getParent();\n+                // -> start searching root-entry from any version-entry or\n+                //    from the given nodestate\n+                entry = (nodeState == null) ? versionStates[0].getNodeEntry() : nodeState.getNodeEntry();\n+                while (entry.getParent() != null) {\n+                    entry = entry.getParent();\n                 }\n-                root.invalidate(true);\n             } else {\n-                nodeState.getHierarchyEntry().invalidate(true);\n+                entry = nodeState.getNodeEntry();\n             }\n+            entry.invalidate(true);\n         }\n     }\n     //----------------------------------------< Access Operation Parameters >---",
                "raw_url": "https://github.com/apache/jackrabbit/raw/f64c5543baead3bad17977b6ef29e4f5bf2c955c/contrib/spi/jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/operation/Restore.java",
                "sha": "5e2c62d02d9cc7be0e52a6c0e6045885f94bbbc9",
                "status": "modified"
            }
        ],
        "message": "#0000 - avoid NPE upon Restore.persisted in case of a \n        Workspace.restore.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@508431 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit/commit/7a058b665b0568b0f903cfeaac47024b3f967a68",
        "repo": "jackrabbit",
        "unit_tests": [
            "RestoreTest.java"
        ]
    },
    "jackrabbit_f8957a7": {
        "bug_id": "jackrabbit_f8957a7",
        "commit": "https://github.com/apache/jackrabbit/commit/f8957a704cd301c5707292108df2b1920568efde",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jackrabbit/blob/f8957a704cd301c5707292108df2b1920568efde/src/java/org/apache/jackrabbit/core/config/WorkspaceConfig.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/src/java/org/apache/jackrabbit/core/config/WorkspaceConfig.java?ref=f8957a704cd301c5707292108df2b1920568efde",
                "deletions": 2,
                "filename": "src/java/org/apache/jackrabbit/core/config/WorkspaceConfig.java",
                "patch": "@@ -50,7 +50,7 @@\n     private PersistenceManagerConfig pmc;\n \n     /**\n-     * Workspace search index configuration.\n+     * Workspace search index configuration. Can be <code>null</code>.\n      */\n     private SearchConfig sc;\n \n@@ -79,7 +79,9 @@\n      */\n     public void init() throws ConfigurationException {\n         fsc.init();\n-        sc.init();\n+        if (sc != null) {\n+            sc.init();\n+        }\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/jackrabbit/raw/f8957a704cd301c5707292108df2b1920568efde/src/java/org/apache/jackrabbit/core/config/WorkspaceConfig.java",
                "sha": "e216a1d1fd2143f72a65810ea80f09961a116cbb",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE in WorkspaceConfig.init() when SearchConfig is not available. (JCR-71)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@157916 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit/commit/0647faf8d8dc2d52ba182c5436575337f8c28eb8",
        "repo": "jackrabbit",
        "unit_tests": [
            "WorkspaceConfigTest.java"
        ]
    }
}