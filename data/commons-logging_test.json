{
    "commons-logging_7539845": {
        "bug_id": "commons-logging_7539845",
        "commit": "https://github.com/apache/commons-logging/commit/7539845c43fbfc08e001824f69001cef1556348f",
        "file": [
            {
                "additions": 50,
                "blob_url": "https://github.com/apache/commons-logging/blob/7539845c43fbfc08e001824f69001cef1556348f/build.xml",
                "changes": 52,
                "contents_url": "https://api.github.com/repos/apache/commons-logging/contents/build.xml?ref=7539845c43fbfc08e001824f69001cef1556348f",
                "deletions": 2,
                "filename": "build.xml",
                "patch": "@@ -3,7 +3,7 @@\n \n <!--\n         \"Logging\" component of the Jakarta Commons Subproject\n-        $Id: build.xml,v 1.36 2003/05/07 16:02:20 rdonkin Exp $\n+        $Id: build.xml,v 1.37 2003/05/14 11:12:58 rdonkin Exp $\n -->\n \n \n@@ -264,6 +264,39 @@\n     </jar>\n   </target>\n \n+  <target name='compile.jdk1.4.tests' if='jdk.1.4.present'>\n+    <javac  srcdir=\"${test.home}\"\n+           destdir=\"${build.home}/tests\"\n+             debug=\"${compile.debug}\"\n+       deprecation=\"${compile.deprecation}\"\n+          optimize=\"${compile.optimize}\">\n+      <classpath refid=\"test.classpath\"/>\n+        <include name='**/jdk14/**'/>\n+    </javac>\n+  </target>\n+\n+  <target name='compile.log4j.tests' if='log4j.present'>\n+    <javac  srcdir=\"${test.home}\"\n+           destdir=\"${build.home}/tests\"\n+             debug=\"${compile.debug}\"\n+       deprecation=\"${compile.deprecation}\"\n+          optimize=\"${compile.optimize}\">\n+      <classpath refid=\"test.classpath\"/>\n+        <include name='**/log4j/**'/>\n+    </javac>\n+  </target>\n+\n+\n+  <target name='compile.avalon.tests' if='avalon-framework.present'>\n+    <javac  srcdir=\"${test.home}\"\n+           destdir=\"${build.home}/tests\"\n+             debug=\"${compile.debug}\"\n+       deprecation=\"${compile.deprecation}\"\n+          optimize=\"${compile.optimize}\">\n+      <classpath refid=\"test.classpath\"/>\n+        <include name='**/avalon/**'/>\n+    </javac>\n+  </target>\n \n   <target name=\"compile.tests\" depends=\"compile\"\n    description=\"Compile unit test cases\">\n@@ -273,7 +306,13 @@\n        deprecation=\"${compile.deprecation}\"\n           optimize=\"${compile.optimize}\">\n       <classpath refid=\"test.classpath\"/>\n+      <exclude name='**/jdk14/**'/>\n+      <exclude name='**/log4j/**'/>\n+      <exclude name='**/avalon/**'/>\n     </javac>\n+    <antcall target='compile.log4j.tests'/>\n+    <antcall target='compile.jdk1.4.tests'/>\n+    <antcall target='compile.avalon.tests'/>\n     <copy    todir=\"${build.home}/tests\" filtering=\"on\">\n       <fileset dir=\"${test.home}\" excludes=\"**/*.java\"/>\n     </copy>\n@@ -355,7 +394,7 @@\n <!-- ========== Unit Test Targets ========================================= -->\n \n \n-  <target name=\"test\"  depends=\"compile.tests,test.jdk14,test.log4j\n+  <target name=\"test\"  depends=\"compile.tests,test.jdk14,test.log4j,test.avalon\n           \" if=\"test.entry\"\n    description=\"Run all unit test cases\">\n       <java classname=\"${test.runner}\" fork=\"yes\" failonerror=\"${test.failonerror}\">\n@@ -605,5 +644,14 @@\n \n   </target>\n \n+  <target name=\"test.avalon\" depends=\"compile.tests\" if=\"avalon-framework.present\"\n+   description=\"Run unit tests specific to Avalon (Framework) logging\">\n+\n+    <echo message=\"Avalon Tests\"/>\n+    <java classname=\"${test.runner}\" fork=\"yes\" failonerror=\"${test.failonerror}\">\n+      <arg value=\"org.apache.commons.logging.avalon.AvalonLoggerTest\"/>\n+      <classpath refid=\"test.classpath\"/>\n+    </java>\n+  </target>\n \n </project>",
                "raw_url": "https://github.com/apache/commons-logging/raw/7539845c43fbfc08e001824f69001cef1556348f/build.xml",
                "sha": "409c3c92cb5418607967ce2c10ded5236f3be95b",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/commons-logging/blob/7539845c43fbfc08e001824f69001cef1556348f/src/java/org/apache/commons/logging/impl/AvalonLogger.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/commons-logging/contents/src/java/org/apache/commons/logging/impl/AvalonLogger.java?ref=7539845c43fbfc08e001824f69001cef1556348f",
                "deletions": 16,
                "filename": "src/java/org/apache/commons/logging/impl/AvalonLogger.java",
                "patch": "@@ -1,7 +1,7 @@\n /*\n- * /home/cvs/jakarta-commons-sandbox/jelly/jelly-tags/avalon/src/java/org/apache/commons/jelly/avalon/JellyService.java,v 1.1 2003/01/22 09:19:30 jstrachan Exp\n- * 1.1\n- * 2003/01/22 09:19:30\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//logging/src/java/org/apache/commons/logging/impl/AvalonLogger.java,v 1.2 2003/05/14 11:12:58 rdonkin Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2003/05/14 11:12:58 $\n  *\n  * ====================================================================\n  *\n@@ -57,7 +57,6 @@\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  *\n- * JellyServiceImpl.java,v 1.1 2003/01/22 09:19:30 jstrachan Exp\n  */\n \n package org.apache.commons.logging.impl;\n@@ -70,6 +69,7 @@\n  * logging calls to Avalon logging abstraction: the Logger interface.\n  * \n  * @author <a href=\"mailto:neeme@apache.org\">Neeme Praks</a>\n+ * @version $Revision: 1.2 $ $Date: 2003/05/14 11:12:58 $\n  */\n public class AvalonLogger implements Log {\n \n@@ -87,6 +87,8 @@ public AvalonLogger(Logger logger) {\n      * @param logger the avalon logger implementation to delegate to \n      */\n     public AvalonLogger(String name) {\n+        if (defaultLogger == null) \n+            throw new NullPointerException(\"default logger has to be specified if this constructor is used!\");\n         this.logger = defaultLogger.getChildLogger(name);\n     }\n \n@@ -108,56 +110,56 @@ public static void setDefaultLogger(Logger logger) {\n      * @see org.apache.commons.logging.Log#debug(java.lang.Object, java.lang.Throwable)\n      */\n     public void debug(Object o, Throwable t) {\n-        if (this.logger.isDebugEnabled()) this.logger.debug(o.toString(), t);\n+        if (this.logger.isDebugEnabled()) this.logger.debug(String.valueOf(o), t);\n     }\n \n     /**\n      * @see org.apache.commons.logging.Log#debug(java.lang.Object)\n      */\n     public void debug(Object o) {\n-        if (this.logger.isDebugEnabled()) this.logger.debug(o.toString());\n+        if (this.logger.isDebugEnabled()) this.logger.debug(String.valueOf(o));\n     }\n \n     /**\n      * @see org.apache.commons.logging.Log#error(java.lang.Object, java.lang.Throwable)\n      */\n     public void error(Object o, Throwable t) {\n-        if (this.logger.isErrorEnabled()) this.logger.error(o.toString(), t);\n+        if (this.logger.isErrorEnabled()) this.logger.error(String.valueOf(o), t);\n     }\n \n     /**\n      * @see org.apache.commons.logging.Log#error(java.lang.Object)\n      */\n     public void error(Object o) {\n-        if (this.logger.isErrorEnabled()) this.logger.error(o.toString());\n+        if (this.logger.isErrorEnabled()) this.logger.error(String.valueOf(o));\n     }\n \n     /**\n      * @see org.apache.commons.logging.Log#fatal(java.lang.Object, java.lang.Throwable)\n      */\n     public void fatal(Object o, Throwable t) {\n-        if (this.logger.isFatalErrorEnabled()) this.logger.fatalError(o.toString(), t);\n+        if (this.logger.isFatalErrorEnabled()) this.logger.fatalError(String.valueOf(o), t);\n     }\n \n     /**\n      * @see org.apache.commons.logging.Log#fatal(java.lang.Object)\n      */\n     public void fatal(Object o) {\n-        if (this.logger.isFatalErrorEnabled()) this.logger.fatalError(o.toString());\n+        if (this.logger.isFatalErrorEnabled()) this.logger.fatalError(String.valueOf(o));\n     }\n \n     /**\n      * @see org.apache.commons.logging.Log#info(java.lang.Object, java.lang.Throwable)\n      */\n     public void info(Object o, Throwable t) {\n-        if (this.logger.isInfoEnabled()) this.logger.info(o.toString(), t);\n+        if (this.logger.isInfoEnabled()) this.logger.info(String.valueOf(o), t);\n     }\n \n     /**\n      * @see org.apache.commons.logging.Log#info(java.lang.Object)\n      */\n     public void info(Object o) {\n-        if (this.logger.isInfoEnabled()) this.logger.info(o.toString());\n+        if (this.logger.isInfoEnabled()) this.logger.info(String.valueOf(o));\n     }\n \n     /**\n@@ -206,28 +208,28 @@ public boolean isWarnEnabled() {\n      * @see org.apache.commons.logging.Log#trace(java.lang.Object, java.lang.Throwable)\n      */\n     public void trace(Object o, Throwable t) {\n-        if (this.logger.isDebugEnabled()) this.logger.debug(o.toString(), t);\n+        if (this.logger.isDebugEnabled()) this.logger.debug(String.valueOf(o), t);\n     }\n \n     /**\n      * @see org.apache.commons.logging.Log#trace(java.lang.Object)\n      */\n     public void trace(Object o) {\n-        if (this.logger.isDebugEnabled()) this.logger.debug(o.toString());\n+        if (this.logger.isDebugEnabled()) this.logger.debug(String.valueOf(o));\n     }\n \n     /**\n      * @see org.apache.commons.logging.Log#warn(java.lang.Object, java.lang.Throwable)\n      */\n     public void warn(Object o, Throwable t) {\n-        if (this.logger.isWarnEnabled()) this.logger.warn(o.toString(), t);\n+        if (this.logger.isWarnEnabled()) this.logger.warn(String.valueOf(o), t);\n     }\n \n     /**\n      * @see org.apache.commons.logging.Log#warn(java.lang.Object)\n      */\n     public void warn(Object o) {\n-        if (this.logger.isWarnEnabled()) this.logger.warn(o.toString());\n+        if (this.logger.isWarnEnabled()) this.logger.warn(String.valueOf(o));\n     }\n \n }",
                "raw_url": "https://github.com/apache/commons-logging/raw/7539845c43fbfc08e001824f69001cef1556348f/src/java/org/apache/commons/logging/impl/AvalonLogger.java",
                "sha": "465c24dfad9b98d0dee96fce737259863e7ed6b0",
                "status": "modified"
            },
            {
                "additions": 96,
                "blob_url": "https://github.com/apache/commons-logging/blob/7539845c43fbfc08e001824f69001cef1556348f/src/test/org/apache/commons/logging/avalon/AvalonLoggerTest.java",
                "changes": 96,
                "contents_url": "https://api.github.com/repos/apache/commons-logging/contents/src/test/org/apache/commons/logging/avalon/AvalonLoggerTest.java?ref=7539845c43fbfc08e001824f69001cef1556348f",
                "deletions": 0,
                "filename": "src/test/org/apache/commons/logging/avalon/AvalonLoggerTest.java",
                "patch": "@@ -0,0 +1,96 @@\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//logging/src/test/org/apache/commons/logging/avalon/AvalonLoggerTest.java,v 1.1 2003/05/14 11:14:24 rdonkin Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/05/14 11:14:24 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.logging.avalon;\n+\n+import org.apache.avalon.framework.logger.ConsoleLogger;\n+import org.apache.commons.logging.impl.AvalonLogger;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.AbstractLogTest;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * @author <a href=\"mailto:neeme@apache.org\">Neeme Praks</a>\n+ * @version $Revision: 1.1 $ $Date: 2003/05/14 11:14:24 $\n+ */\n+public class AvalonLoggerTest extends AbstractLogTest {\n+\n+    public static void main(String[] args) {\n+        String[] testCaseName = { AvalonLoggerTest.class.getName() };\n+        junit.textui.TestRunner.main(testCaseName);\t\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+        suite.addTestSuite(AvalonLoggerTest.class);\n+        return suite;\n+    }\n+\n+    public AvalonLoggerTest(String testName) {\n+\t\tsuper(testName);\n+\t}\n+\n+    public Log getLogObject() {\n+        Log log = new AvalonLogger(new ConsoleLogger());\n+\t\treturn log;\n+\t}\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/commons-logging/raw/7539845c43fbfc08e001824f69001cef1556348f/src/test/org/apache/commons/logging/avalon/AvalonLoggerTest.java",
                "sha": "cfdb969567bf8f4b7166261f30d1079ae2895351",
                "status": "added"
            }
        ],
        "message": "Made implementation of AvalonLogger more robust (avoiding NPEs when nulls are passed in) together with a testcase. Improved build by compiling tests for only those optional components whose dependencies are present. Submitted by Neeme Praks.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/logging/trunk@138983 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-logging/commit/b1f47cf55f4c85659d824d6853754235141ee6e1",
        "patched_files": [
            "AvalonLogger.java",
            "build.xml"
        ],
        "repo": "commons-logging",
        "unit_tests": [
            "AvalonLoggerTest.java"
        ]
    }
}