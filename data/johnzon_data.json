[
    {
        "commit": "https://github.com/apache/johnzon/commit/61ff1f4a156c321b82b9b739eb32a8901517f7ae",
        "file": [
            {
                "patch": "@@ -18,6 +18,8 @@\n  */\n package org.apache.johnzon.core;\n \n+import static java.util.Objects.requireNonNull;\n+\n import javax.json.JsonArrayBuilder;\n import javax.json.JsonException;\n import javax.json.JsonObject;\n@@ -166,7 +168,7 @@ public JsonObjectBuilder addAll(JsonObjectBuilder builder) {\n \n     @Override\n     public JsonObjectBuilder remove(String name) {\n-        attributeMap.remove(name);\n+        attributeMap.remove(requireNonNull(name));\n         return this;\n     }\n ",
                "additions": 3,
                "raw_url": "https://github.com/apache/johnzon/raw/61ff1f4a156c321b82b9b739eb32a8901517f7ae/johnzon-core/src/main/java/org/apache/johnzon/core/JsonObjectBuilderImpl.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "de13a0acdf7c1ee43b5766a7a5b538df2f9d0fe5",
                "blob_url": "https://github.com/apache/johnzon/blob/61ff1f4a156c321b82b9b739eb32a8901517f7ae/johnzon-core/src/main/java/org/apache/johnzon/core/JsonObjectBuilderImpl.java",
                "filename": "johnzon-core/src/main/java/org/apache/johnzon/core/JsonObjectBuilderImpl.java",
                "contents_url": "https://api.github.com/repos/apache/johnzon/contents/johnzon-core/src/main/java/org/apache/johnzon/core/JsonObjectBuilderImpl.java?ref=61ff1f4a156c321b82b9b739eb32a8901517f7ae"
            },
            {
                "patch": "@@ -173,6 +173,16 @@ public int hashCode() {\n         return unmodifieableBackingMap.entrySet();\n     }\n \n+    @Override\n+    public void clear() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public JsonValue remove(final Object key) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n     private Object writeReplace() throws ObjectStreamException {\n         return new SerializableValue(toString());\n     }",
                "additions": 10,
                "raw_url": "https://github.com/apache/johnzon/raw/61ff1f4a156c321b82b9b739eb32a8901517f7ae/johnzon-core/src/main/java/org/apache/johnzon/core/JsonObjectImpl.java",
                "status": "modified",
                "changes": 10,
                "deletions": 0,
                "sha": "a84053f9a0b97ec2633ef3bc3503e2f9ae2f505d",
                "blob_url": "https://github.com/apache/johnzon/blob/61ff1f4a156c321b82b9b739eb32a8901517f7ae/johnzon-core/src/main/java/org/apache/johnzon/core/JsonObjectImpl.java",
                "filename": "johnzon-core/src/main/java/org/apache/johnzon/core/JsonObjectImpl.java",
                "contents_url": "https://api.github.com/repos/apache/johnzon/contents/johnzon-core/src/main/java/org/apache/johnzon/core/JsonObjectImpl.java?ref=61ff1f4a156c321b82b9b739eb32a8901517f7ae"
            }
        ],
        "bug_id": "johnzon_1",
        "parent": "https://github.com/apache/johnzon/commit/51b120fa031524623715704560780e3468529de7",
        "message": "basic validations: JsonObject should be immutable, JsonObjectBuilder#remove does not validate NPE for its input",
        "repo": "johnzon"
    },
    {
        "commit": "https://github.com/apache/johnzon/commit/8b5c87d5caa942c0facfa1b62b8376fca869cf45",
        "file": [
            {
                "patch": "@@ -89,6 +89,25 @@ public void nullValuesInList() {\n         assertEquals(\"{\\\"elems\\\":[2,null]}\", jsonb.toJson(wrapper));\n     }\n \n+    @Test\n+    public void nullValuesInEnumList() {\n+        Jsonb jsonb = JsonbBuilder.create();\n+\n+        EnumList wrapper = new EnumList();\n+        wrapper.elems.add(null);\n+        assertEquals(\"{\\\"elems\\\":[null]}\", jsonb.toJson(wrapper));\n+\n+        wrapper.elems.add(MyStatus.OK);\n+        assertEquals(\"{\\\"elems\\\":[null,\\\"OK\\\"]}\", jsonb.toJson(wrapper));\n+\n+        wrapper.elems.add(0, MyStatus.WRONG);\n+        assertEquals(\"{\\\"elems\\\":[\\\"WRONG\\\",null,\\\"OK\\\"]}\", jsonb.toJson(wrapper));\n+\n+        wrapper.elems.remove(2);\n+        assertEquals(\"{\\\"elems\\\":[\\\"WRONG\\\",null]}\", jsonb.toJson(wrapper));\n+    }\n+\n+\n     public static class Foo {\n         public String name;\n         public int value;\n@@ -109,6 +128,14 @@ public void nullValuesInList() {\n         public List<Integer> elems = new ArrayList<>();\n     }\n \n+    public enum MyStatus {\n+        OK, WRONG;\n+    }\n+\n+    public static class EnumList {\n+        public List<MyStatus> elems = new ArrayList<>();\n+    }\n+\n     public static class FooDeser implements JsonbDeserializer<Foo> {\n         @Override\n         public Foo deserialize(final JsonParser parser, final DeserializationContext ctx, final Type rtType) {",
                "additions": 27,
                "raw_url": "https://github.com/apache/johnzon/raw/8b5c87d5caa942c0facfa1b62b8376fca869cf45/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/SerializerTest.java",
                "status": "modified",
                "changes": 27,
                "deletions": 0,
                "sha": "963a41e4473fcc0502a3f8750dc8d059db080cae",
                "blob_url": "https://github.com/apache/johnzon/blob/8b5c87d5caa942c0facfa1b62b8376fca869cf45/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/SerializerTest.java",
                "filename": "johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/SerializerTest.java",
                "contents_url": "https://api.github.com/repos/apache/johnzon/contents/johnzon-jsonb/src/test/java/org/apache/johnzon/jsonb/SerializerTest.java?ref=8b5c87d5caa942c0facfa1b62b8376fca869cf45"
            },
            {
                "patch": "@@ -40,7 +40,7 @@ public EnumConverter(final Class<T> aClass) {\n \n     @Override // no need of cache here, it is already fast\n     public String toString(final T instance) {\n-        return instance.name();\n+        return instance != null ? instance.name() : null;\n     }\n \n     @Override",
                "additions": 1,
                "raw_url": "https://github.com/apache/johnzon/raw/8b5c87d5caa942c0facfa1b62b8376fca869cf45/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/converter/EnumConverter.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "4588f54855049e2f978029e42797b375218b1701",
                "blob_url": "https://github.com/apache/johnzon/blob/8b5c87d5caa942c0facfa1b62b8376fca869cf45/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/converter/EnumConverter.java",
                "filename": "johnzon-mapper/src/main/java/org/apache/johnzon/mapper/converter/EnumConverter.java",
                "contents_url": "https://api.github.com/repos/apache/johnzon/contents/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/converter/EnumConverter.java?ref=8b5c87d5caa942c0facfa1b62b8376fca869cf45"
            }
        ],
        "bug_id": "johnzon_2",
        "parent": "https://github.com/apache/johnzon/commit/847a4268fb95cb239e54fd955175ece800126945",
        "message": "JOHNZON-186 fix NPE in EnumConverter",
        "repo": "johnzon"
    },
    {
        "commit": "https://github.com/apache/johnzon/commit/5bd56828d782738c33826ab117189c097c54277f",
        "file": [
            {
                "patch": "@@ -363,7 +363,7 @@ private void writeValue(final Class<?> type,\n                     writePrimitives(valJsonPointer);\n                 } else {\n                     ObjectConverter.Writer objectConverterToUse = objectConverter;\n-                    if (objectConverterToUse == null) {\n+                    if (o != null && objectConverterToUse == null) {\n                         objectConverterToUse = config.findObjectConverterWriter(o.getClass());\n                     }\n \n@@ -420,10 +420,12 @@ private void writeValue(final Class<?> type,\n     }\n \n     private void writeItem(final Object o, final Collection<String> ignoredProperties, JsonPointerTracker jsonPointer) {\n-        if (!writePrimitives(o)) {\n+        if (o == null) {\n+            generator.writeNull();\n+        } else if (!writePrimitives(o)) {\n             if (Collection.class.isInstance(o)) {\n                 doWriteIterable(Collection.class.cast(o), ignoredProperties, jsonPointer);\n-            } else if (o != null && o.getClass().isArray()) {\n+            } else if (o.getClass().isArray()) {\n                 final int length = Array.getLength(o);\n                 if (length > 0 || !config.isSkipEmptyArray()) {\n                     generator.writeStartArray();\n@@ -437,8 +439,6 @@ private void writeItem(final Object o, final Collection<String> ignoredPropertie\n                     }\n                     generator.writeEnd();\n                 }\n-            } else if (o == null) {\n-                generator.writeNull();\n             } else {\n                 String valJsonPointer = jsonPointers.get(o);\n                 if (valJsonPointer != null) {",
                "additions": 5,
                "raw_url": "https://github.com/apache/johnzon/raw/5bd56828d782738c33826ab117189c097c54277f/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingGeneratorImpl.java",
                "status": "modified",
                "changes": 10,
                "deletions": 5,
                "sha": "b952a5738c2ad87e103063713f78e3df4a38ef5d",
                "blob_url": "https://github.com/apache/johnzon/blob/5bd56828d782738c33826ab117189c097c54277f/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingGeneratorImpl.java",
                "filename": "johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingGeneratorImpl.java",
                "contents_url": "https://api.github.com/repos/apache/johnzon/contents/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/MappingGeneratorImpl.java?ref=5bd56828d782738c33826ab117189c097c54277f"
            },
            {
                "patch": "@@ -21,8 +21,11 @@\n import static org.junit.Assert.assertEquals;\n \n import java.io.StringWriter;\n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Comparator;\n import java.util.LinkedHashMap;\n+import java.util.List;\n import java.util.Map;\n \n import org.junit.Test;\n@@ -36,6 +39,54 @@ public void writeNullObjectDefault() {\n         assertEquals(\"{\\\"emptyArray\\\":[]}\", writer.toString());\n     }\n \n+    @Test\n+    public void writeListWithNull() {\n+        StringWriter writer = new StringWriter();\n+        new MapperBuilder().build().writeIterable(Arrays.asList(\"one\", \"two\", null, \"four\"), writer);\n+        assertEquals(\"[\\\"one\\\",\\\"two\\\",null,\\\"four\\\"]\", writer.toString());\n+    }\n+\n+    @Test\n+    public void writeListWithNullWithinMap() {\n+        StringWriter writer = new StringWriter();\n+        new MapperBuilder().build().writeObject(Collections.singletonMap(\"list\",\n+                Arrays.asList(5l, null, 300l, 90000000000l)), writer);\n+        assertEquals(\"{\\\"list\\\":[5,null,300,90000000000]}\", writer.toString());\n+    }\n+\n+    @Test\n+    public void writeListWithNullWithinType() {\n+        StringWriter writer = new StringWriter();\n+        NullContainer container = new NullContainer();\n+        container.setList(Arrays.asList(1.4142, 1.7320508757, null, 3.14159));\n+        new MapperBuilder().build().writeObject(container, writer);\n+        assertEquals(\"{\\\"list\\\":[1.4142,1.7320508757,null,3.14159]}\", writer.toString());\n+    }\n+\n+    @Test\n+    public void writeArrayWithNull() {\n+        StringWriter writer = new StringWriter();\n+        new MapperBuilder().build().writeArray(new String[]{ \"one\", \"two\", \"three\", null }, writer);\n+        assertEquals(\"[\\\"one\\\",\\\"two\\\",\\\"three\\\",null]\", writer.toString());\n+    }\n+\n+    @Test\n+    public void writeArrayWithNullWithinMap() {\n+        StringWriter writer = new StringWriter();\n+        new MapperBuilder().build().writeObject(Collections.singletonMap(\"array\",\n+                new Long[]{ null, 100l, 300l, 90000000000l }), writer);\n+        assertEquals(\"{\\\"array\\\":[null,100,300,90000000000]}\", writer.toString());\n+    }\n+\n+    @Test\n+    public void writeArrayWithNullWithinType() {\n+        StringWriter writer = new StringWriter();\n+        NullContainer container = new NullContainer();\n+        container.setArray(new Double[]{ 1.4142, 1.7320508757, 2.2360679775, null });\n+        new MapperBuilder().build().writeObject(container, writer);\n+        assertEquals(\"{\\\"array\\\":[1.4142,1.7320508757,2.2360679775,null]}\", writer.toString());\n+    }\n+\n     @Test\n     public void writeNullObjectDefaultMap() {\n         final StringWriter writer = new StringWriter();\n@@ -192,4 +243,24 @@ public void setIntegerIsnull(final Integer integerIsnull) {\n \n     }\n \n+    public static class NullContainer {\n+        private List<Double> list;\n+        private Double[] array;\n+\n+        public Double[] getArray() {\n+            return array;\n+        }\n+\n+        public void setArray(Double[] array) {\n+            this.array = array;\n+        }\n+\n+        public List<Double> getList() {\n+            return list;\n+        }\n+\n+        public void setList(final List<Double> list) {\n+            this.list = list;\n+        }\n+    }\n }",
                "additions": 71,
                "raw_url": "https://github.com/apache/johnzon/raw/5bd56828d782738c33826ab117189c097c54277f/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/NullTest.java",
                "status": "modified",
                "changes": 71,
                "deletions": 0,
                "sha": "95293af166750b8eb0ddeaa96681be8517c8e88d",
                "blob_url": "https://github.com/apache/johnzon/blob/5bd56828d782738c33826ab117189c097c54277f/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/NullTest.java",
                "filename": "johnzon-mapper/src/test/java/org/apache/johnzon/mapper/NullTest.java",
                "contents_url": "https://api.github.com/repos/apache/johnzon/contents/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/NullTest.java?ref=5bd56828d782738c33826ab117189c097c54277f"
            }
        ],
        "bug_id": "johnzon_3",
        "parent": "https://github.com/apache/johnzon/commit/09dd93ef1899cab85f7289ae2522d0123f2b0897",
        "message": "JOHNZON-151: Fix serialization of nulls inside a collection inside a parent object\n* Fixes NullPointerException on attempting to access getClass of null object.\n* Fixes silently ignoring nulls within a list/array when they are contained by a higher object.",
        "repo": "johnzon"
    },
    {
        "commit": "https://github.com/apache/johnzon/commit/d7b768fe10f6163be58ec3d4905c404ee9ce2f30",
        "file": [
            {
                "patch": "@@ -36,11 +36,20 @@\n     private final Map<String, JsonValue> unmodifieableBackingMap;\n \n     private <T> T value(final String name, final Class<T> clazz) {\n-        final Object v = unmodifieableBackingMap.get(name);\n+        final JsonValue v = unmodifieableBackingMap.get(name);\n         if (v != null) {\n             return clazz.cast(v);\n         }\n-        throw new NullPointerException(\"no mapping for \" + name);\n+        return null;\n+    }\n+\n+    private <T> T valueOrExcpetion(final String name, final Class<T> clazz) {\n+        T value = value(name, clazz);\n+        if (value == null) {\n+            throw new NullPointerException(\"no mapping for \" + name);\n+        }\n+\n+        return value;\n     }\n \n     JsonObjectImpl(final Map<String, JsonValue> backingMap) {\n@@ -70,51 +79,42 @@ public JsonString getJsonString(final String name) {\n \n     @Override\n     public String getString(final String name) {\n-        return getJsonString(name).getString();\n+        return valueOrExcpetion(name, JsonString.class).getString();\n     }\n \n     @Override\n     public String getString(final String name, final String defaultValue) {\n-        final Object v = unmodifieableBackingMap.get(name);\n-        if (v != null) {\n-            if (v instanceof JsonString) {\n-                return JsonString.class.cast(v).getString();\n-            } else {\n-                return defaultValue;\n-            }\n-        } else {\n-            return defaultValue;\n+        final Object v = value(name, JsonValue.class);\n+        if (v != null && v instanceof JsonString) {\n+            return JsonString.class.cast(v).getString();\n         }\n \n+        return defaultValue;\n     }\n \n     @Override\n     public int getInt(final String name) {\n-        return getJsonNumber(name).intValue();\n+        return valueOrExcpetion(name, JsonNumber.class).intValue();\n     }\n \n     @Override\n     public int getInt(final String name, final int defaultValue) {\n-        final Object v = unmodifieableBackingMap.get(name);\n-        if (v != null) {\n-            if (v instanceof JsonNumber) {\n-                return JsonNumber.class.cast(v).intValue();\n-            } else {\n-                return defaultValue;\n-            }\n-        } else {\n-            return defaultValue;\n+        final Object v = value(name, JsonValue.class);\n+        if (v != null && v instanceof JsonNumber) {\n+            return JsonNumber.class.cast(v).intValue();\n         }\n+\n+        return defaultValue;\n     }\n \n     @Override\n     public boolean getBoolean(final String name) {\n-        return JsonValue.TRUE.equals(value(name, JsonValue.class));\n+        return JsonValue.TRUE.equals(valueOrExcpetion(name, JsonValue.class));\n     }\n \n     @Override\n     public boolean getBoolean(final String name, final boolean defaultValue) {\n-        final Object v = unmodifieableBackingMap.get(name);\n+        final Object v = value(name, JsonValue.class);\n         if (v != null) {\n             return JsonValue.TRUE.equals(v) || !JsonValue.FALSE.equals(v) && defaultValue;\n         } else {\n@@ -124,7 +124,7 @@ public boolean getBoolean(final String name, final boolean defaultValue) {\n \n     @Override\n     public boolean isNull(final String name) {\n-        return JsonValue.NULL.equals(value(name, JsonValue.class));\n+        return JsonValue.NULL.equals(valueOrExcpetion(name, JsonValue.class));\n     }\n \n     @Override",
                "additions": 25,
                "raw_url": "https://github.com/apache/johnzon/raw/d7b768fe10f6163be58ec3d4905c404ee9ce2f30/johnzon-core/src/main/java/org/apache/johnzon/core/JsonObjectImpl.java",
                "status": "modified",
                "changes": 50,
                "deletions": 25,
                "sha": "263f43ef13530a97f61af0b27b97e165e99d119e",
                "blob_url": "https://github.com/apache/johnzon/blob/d7b768fe10f6163be58ec3d4905c404ee9ce2f30/johnzon-core/src/main/java/org/apache/johnzon/core/JsonObjectImpl.java",
                "filename": "johnzon-core/src/main/java/org/apache/johnzon/core/JsonObjectImpl.java",
                "contents_url": "https://api.github.com/repos/apache/johnzon/contents/johnzon-core/src/main/java/org/apache/johnzon/core/JsonObjectImpl.java?ref=d7b768fe10f6163be58ec3d4905c404ee9ce2f30"
            },
            {
                "patch": "@@ -19,9 +19,14 @@\n package org.apache.johnzon.core;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n \n import javax.json.Json;\n+import javax.json.JsonObject;\n import javax.json.JsonObjectBuilder;\n+import javax.json.JsonValue;\n \n import org.junit.Test;\n \n@@ -32,4 +37,92 @@ public void objectToString() {\n         ob.add(\"a\", new JsonStringImpl(\"b\"));\n         assertEquals(\"{\\\"a\\\":\\\"b\\\"}\", ob.build().toString());\n     }\n+\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testGetBooleanMissingKeyShouldThrowNullPointerException() {\n+        getObject().getBoolean(\"missing\");\n+    }\n+\n+    @Test\n+    public void testGetBooleanWithDefaultMissingKeyShouldReturnDefault() {\n+        assertTrue(getObject().getBoolean(\"missing\", true));\n+    }\n+\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testGetIntMissingKeyShouldThrowNullPointerException() {\n+        getObject().getInt(\"missing\");\n+    }\n+\n+    @Test\n+    public void testGetIntWithDefaultShouldReturnDefault() {\n+        assertEquals(42, getObject().getInt(\"missing\", 42));\n+    }\n+\n+\n+    @Test\n+    public void testGetJsonArrayMissingKeyShouldReturnNull() {\n+        assertNull(getObject().getJsonArray(\"missing\"));\n+    }\n+\n+\n+    @Test\n+    public void testGetJsonNumberMissingKeyShouldReturnNull() {\n+        assertNull(getObject().getJsonNumber(\"missing\"));\n+    }\n+\n+\n+    @Test\n+    public void testGetJsonObjectMissingKeyShouldReturnNull() {\n+        assertNull(getObject().getJsonObject(\"missing\"));\n+    }\n+\n+\n+    @Test\n+    public void testGetJsonStringMissingKeyShouldReturnNull() {\n+        assertNull(getObject().getJsonString(\"missing\"));\n+    }\n+\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testGetStringMissingKeyShouldThrowNullPointerException() {\n+        getObject().getString(\"missing\");\n+    }\n+\n+    @Test\n+    public void testGetStringWithDefaultShouldReturnDefault() {\n+        String expected = \"default\";\n+        assertEquals(expected, getObject().getString(\"missing\", expected));\n+    }\n+\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testIsNullMissingKeyShouldThrowNullPointerException() {\n+        getObject().isNull(\"missing\");\n+    }\n+\n+    @Test\n+    public void testIsNullShouldReturnTrue() {\n+        assertTrue(Json.createObjectBuilder()\n+                       .add(\"key\", JsonValue.NULL)\n+                       .build()\n+                       .isNull(\"key\"));\n+    }\n+\n+    @Test\n+    public void testIsNullShouldReturnFalse() {\n+        assertFalse(Json.createObjectBuilder()\n+                        .add(\"key\", \"value\")\n+                        .build()\n+                        .isNull(\"key\"));\n+    }\n+\n+\n+    private JsonObject getObject() {\n+        return Json.createObjectBuilder()\n+                   .build();\n+    }\n+\n+\n }",
                "additions": 93,
                "raw_url": "https://github.com/apache/johnzon/raw/d7b768fe10f6163be58ec3d4905c404ee9ce2f30/johnzon-core/src/test/java/org/apache/johnzon/core/JsonObjectImplTest.java",
                "status": "modified",
                "changes": 93,
                "deletions": 0,
                "sha": "e7b5c069273604ed47fbc873380a54133e681ca3",
                "blob_url": "https://github.com/apache/johnzon/blob/d7b768fe10f6163be58ec3d4905c404ee9ce2f30/johnzon-core/src/test/java/org/apache/johnzon/core/JsonObjectImplTest.java",
                "filename": "johnzon-core/src/test/java/org/apache/johnzon/core/JsonObjectImplTest.java",
                "contents_url": "https://api.github.com/repos/apache/johnzon/contents/johnzon-core/src/test/java/org/apache/johnzon/core/JsonObjectImplTest.java?ref=d7b768fe10f6163be58ec3d4905c404ee9ce2f30"
            }
        ],
        "bug_id": "johnzon_4",
        "parent": "https://github.com/apache/johnzon/commit/42cb0949b3194351bad2bdb06b6bde0accf5ff92",
        "message": "JOHNZON-101 remove NPE if no mapping for JsonObject.getJson*",
        "repo": "johnzon"
    },
    {
        "commit": "https://github.com/apache/johnzon/commit/a1246b944ce5f63ff0ba5a5907dbda0d1e9ecfda",
        "file": [
            {
                "patch": "@@ -271,7 +271,7 @@ private Type fixTypeVariable(final Class<?> clazz, final Type type) {\n \n     private Class<?> findClass(final Class<?> clazz, final GenericDeclaration genericDeclaration) {\n \n-        if (clazz == genericDeclaration) {\n+        if (clazz == null || clazz == genericDeclaration) {\n             return clazz;\n         }\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/johnzon/raw/a1246b944ce5f63ff0ba5a5907dbda0d1e9ecfda/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/BaseAccessMode.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "0da75319dc659cee9c4ade1e84e3d7af578ded98",
                "blob_url": "https://github.com/apache/johnzon/blob/a1246b944ce5f63ff0ba5a5907dbda0d1e9ecfda/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/BaseAccessMode.java",
                "filename": "johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/BaseAccessMode.java",
                "contents_url": "https://api.github.com/repos/apache/johnzon/contents/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/BaseAccessMode.java?ref=a1246b944ce5f63ff0ba5a5907dbda0d1e9ecfda"
            }
        ],
        "bug_id": "johnzon_5",
        "parent": "https://github.com/apache/johnzon/commit/79b8157d2a1f970edf6533e1f7dbc2f783209bf3",
        "message": "JOHNZON-83 avoid NPE if superclass is null in BaseAccessMode",
        "repo": "johnzon"
    },
    {
        "commit": "https://github.com/apache/johnzon/commit/dcc3a2c2a96d095251328740c03ebc0c053077c6",
        "file": [
            {
                "patch": "@@ -81,11 +81,13 @@\n     protected final boolean skipEmptyArray;\n     protected final boolean treatByteArrayAsBase64;\n \n+    // CHECKSTYLE:OFF\n     public Mapper(final JsonReaderFactory readerFactory, final JsonGeneratorFactory generatorFactory,\n                   final boolean doClose, final Map<Class<?>, Converter<?>> converters,\n                   final int version, final Comparator<String> attributeOrder, final boolean skipNull, final boolean skipEmptyArray,\n                   final AccessMode accessMode, final boolean hiddenConstructorSupported, final boolean useConstructors,\n                   final boolean treatByteArrayAsBase64) {\n+    // CHECKSTYLE:ON\n         this.readerFactory = readerFactory;\n         this.generatorFactory = generatorFactory;\n         this.close = doClose;",
                "additions": 2,
                "raw_url": "https://github.com/apache/johnzon/raw/dcc3a2c2a96d095251328740c03ebc0c053077c6/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "6a92f5d5f06fb2f4a90a8d048c55c25703ef764e",
                "blob_url": "https://github.com/apache/johnzon/blob/dcc3a2c2a96d095251328740c03ebc0c053077c6/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java",
                "filename": "johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java",
                "contents_url": "https://api.github.com/repos/apache/johnzon/contents/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java?ref=dcc3a2c2a96d095251328740c03ebc0c053077c6"
            },
            {
                "patch": "@@ -84,8 +84,8 @@ protected boolean isIgnored(final String key) {\n         return fields;\n     }\n \n-    public static abstract class FieldDecoratedType implements DecoratedType {\n-        public final Field field;\n+    protected static abstract class FieldDecoratedType implements DecoratedType {\n+        protected final Field field;\n \n         public FieldDecoratedType(final Field field) {\n             this.field = field;",
                "additions": 2,
                "raw_url": "https://github.com/apache/johnzon/raw/dcc3a2c2a96d095251328740c03ebc0c053077c6/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/FieldAccessMode.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "5bf9f0c70b798a9b6863b274490314497f6e1507",
                "blob_url": "https://github.com/apache/johnzon/blob/dcc3a2c2a96d095251328740c03ebc0c053077c6/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/FieldAccessMode.java",
                "filename": "johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/FieldAccessMode.java",
                "contents_url": "https://api.github.com/repos/apache/johnzon/contents/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/FieldAccessMode.java?ref=dcc3a2c2a96d095251328740c03ebc0c053077c6"
            },
            {
                "patch": "@@ -93,8 +93,8 @@ protected boolean isIgnored(final String name) {\n         return propertyDescriptors;\n     }\n \n-    public static abstract class MethodDecoratedType implements DecoratedType {\n-        public final Method method;\n+    protected static abstract class MethodDecoratedType implements DecoratedType {\n+        protected final Method method;\n \n         public MethodDecoratedType(final Method method) {\n             this.method = method;",
                "additions": 2,
                "raw_url": "https://github.com/apache/johnzon/raw/dcc3a2c2a96d095251328740c03ebc0c053077c6/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/MethodAccessMode.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "4318a17d4c4a300974a86b0ba9233ea3f65a7ddd",
                "blob_url": "https://github.com/apache/johnzon/blob/dcc3a2c2a96d095251328740c03ebc0c053077c6/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/MethodAccessMode.java",
                "filename": "johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/MethodAccessMode.java",
                "contents_url": "https://api.github.com/repos/apache/johnzon/contents/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/access/MethodAccessMode.java?ref=dcc3a2c2a96d095251328740c03ebc0c053077c6"
            },
            {
                "patch": "@@ -62,7 +62,7 @@ protected ClassMapping(final Class<?> clazz,\n             this.setters = setters;\n             this.constructor = findConstructor(acceptHiddenConstructor, useConstructor);\n \n-            this.constructorHasArguments = this.constructor.getGenericParameterTypes().length > 0;\n+            this.constructorHasArguments = this.constructor != null && this.constructor.getGenericParameterTypes().length > 0;\n             if (this.constructorHasArguments) {\n                 this.constructorParameterTypes = this.constructor.getGenericParameterTypes();\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/johnzon/raw/dcc3a2c2a96d095251328740c03ebc0c053077c6/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/reflection/Mappings.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "1401d1fa3407212c63c3f18d24d1a978ec331718",
                "blob_url": "https://github.com/apache/johnzon/blob/dcc3a2c2a96d095251328740c03ebc0c053077c6/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/reflection/Mappings.java",
                "filename": "johnzon-mapper/src/main/java/org/apache/johnzon/mapper/reflection/Mappings.java",
                "contents_url": "https://api.github.com/repos/apache/johnzon/contents/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/reflection/Mappings.java?ref=dcc3a2c2a96d095251328740c03ebc0c053077c6"
            }
        ],
        "bug_id": "johnzon_6",
        "parent": "https://github.com/apache/johnzon/commit/fee273e274bdf959e14516508c43ec280b1f4bd7",
        "message": "avoiding npe + checkstyle",
        "repo": "johnzon"
    },
    {
        "commit": "https://github.com/apache/johnzon/commit/14234d20ec87efdce26752eb586e390eeeaa1c73",
        "file": [
            {
                "patch": "@@ -287,6 +287,18 @@ public void writeObject(final Object object, final OutputStream stream) {\n         doWriteHandlingNullObject(object, generator);\n     }\n \n+    public String writeArrayAsString(final Collection<?> instance) {\n+        final StringWriter writer = new StringWriter();\n+        writeArray(instance, writer);\n+        return writer.toString();\n+    }\n+\n+    public <T> String writeArrayAsString(final T[] instance) {\n+        final StringWriter writer = new StringWriter();\n+        writeArray(instance, writer);\n+        return writer.toString();\n+    }\n+\n     public String writeObjectAsString(final Object instance) {\n         final StringWriter writer = new StringWriter();\n         writeObject(instance, writer);\n@@ -322,6 +334,16 @@ private JsonGenerator doWriteObject(final JsonGenerator generator, final Object\n                 return gen;\n             }\n \n+            final JsonGenerator jsonGenerator = writePrimitives(generator, object);\n+            if (jsonGenerator != null) {\n+                return jsonGenerator;\n+            }\n+\n+            final Class<?> objectClass = object.getClass();\n+            if (objectClass.isEnum()) {\n+                return gen.write(findConverter(objectClass).toString(object));\n+            }\n+\n             gen = gen.writeStartObject();\n             gen = doWriteObjectBody(gen, object);\n             return gen.writeEnd();\n@@ -605,10 +627,13 @@ private Object buildObject(final Type inType, final JsonObject object) throws Ex\n                 classMapping.constructor.newInstance() : classMapping.constructor.newInstance(createParameters(classMapping, object));\n         for (final Map.Entry<String, Mappings.Setter> setter : classMapping.setters.entrySet()) {\n             final JsonValue jsonValue = object.get(setter.getKey());\n+            if (jsonValue == null) {\n+                continue;\n+            }\n+\n             final Mappings.Setter value = setter.getValue();\n             final AccessMode.Writer setterMethod = value.writer;\n             final Object convertedValue = toValue(jsonValue, value.converter, value.itemConverter, value.paramType);\n-\n             if (convertedValue != null) {\n                 setterMethod.write(t, convertedValue);\n             }",
                "additions": 26,
                "raw_url": "https://github.com/apache/johnzon/raw/14234d20ec87efdce26752eb586e390eeeaa1c73/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java",
                "status": "modified",
                "changes": 27,
                "deletions": 1,
                "sha": "8d94bf9610eca72af9bcfc94d17cb72caa05ab1e",
                "blob_url": "https://github.com/apache/johnzon/blob/14234d20ec87efdce26752eb586e390eeeaa1c73/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java",
                "filename": "johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java",
                "contents_url": "https://api.github.com/repos/apache/johnzon/contents/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java?ref=14234d20ec87efdce26752eb586e390eeeaa1c73"
            },
            {
                "patch": "@@ -28,6 +28,7 @@\n import java.io.ByteArrayOutputStream;\n import java.io.StringReader;\n import java.io.StringWriter;\n+import java.lang.reflect.ParameterizedType;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -84,12 +85,65 @@ public void readCollection() { // mainly API test\n         assertEquals(1, object.size());\n         final Collection<TheObject> object2 = new MapperBuilder().build()\n                 .readJohnzonCollection(new ByteArrayInputStream(\"[{}]\".getBytes()),\n-                        new JohnzonCollectionType<List<TheObject>>() {\n-                        });\n+                    new JohnzonCollectionType<List<TheObject>>() {\n+                    });\n         assertNotNull(object2);\n         assertEquals(1, object2.size());\n     }\n \n+    @Test\n+    public void testShouldMapACollection() throws Exception {\n+        final Mapper mapper = new MapperBuilder().setAttributeOrder(new Comparator<String>() {\n+            @Override\n+            public int compare(final String o1, final String o2) {\n+                return o1.compareTo(o2);\n+            }\n+        }).build();\n+        final String json = \"[\" +\n+            \"{\\\"name\\\":\\\"addKey\\\"},\" +\n+            \"{\\\"action\\\":\\\"REMOVE\\\",\\\"name\\\":\\\"removeKey\\\"}]\";\n+\n+        final ParameterizedType type = new JohnzonParameterizedType(List.class, Command.class);\n+        final List<Command> properties = new ArrayList(mapper.readCollection(new StringReader(json), type));\n+\n+        assertNotNull(properties);\n+        assertEquals(2, properties.size());\n+        assertEquals(\"addKey\", properties.get(0).getName());\n+        assertEquals(\"removeKey\", properties.get(1).getName());\n+        assertEquals(Command.Action.REMOVE, properties.get(1).getAction());\n+        assertEquals(json, mapper.writeArrayAsString(properties));\n+    }\n+\n+    @Test\n+    public void enumCollection() throws Exception {\n+        final Mapper mapper = new MapperBuilder().build();\n+        final String json = \"[\\\"REMOVE\\\",\\\"ADD\\\"]\";\n+\n+        final ParameterizedType type = new JohnzonParameterizedType(List.class, Command.Action.class);\n+        final List<Command.Action> properties = new ArrayList(mapper.readCollection(new StringReader(json), type));\n+\n+        assertNotNull(properties);\n+        assertEquals(2, properties.size());\n+        assertEquals(Command.Action.ADD, properties.get(1));\n+        assertEquals(Command.Action.REMOVE, properties.get(0));\n+        assertEquals(json, mapper.writeArrayAsString(properties));\n+    }\n+\n+    @Test\n+    public void primitiveCollection() throws Exception {\n+        final Mapper mapper = new MapperBuilder().build();\n+        final String json = \"[1,2]\";\n+\n+        final ParameterizedType type = new JohnzonParameterizedType(List.class, Integer.class);\n+        final List<Integer> properties = new ArrayList(mapper.readCollection(new StringReader(json), type));\n+\n+        assertNotNull(properties);\n+        assertEquals(2, properties.size());\n+        assertEquals(2, properties.get(1).intValue());\n+        assertEquals(1, properties.get(0).intValue());\n+        assertEquals(json, mapper.writeArrayAsString(properties));\n+    }\n+\n     @Test\n     public void readMapObject() {\n         final Map<String, Object> data = new MapperBuilder().build()\n@@ -936,6 +990,29 @@ public void setValue(final String value) {\n         }\n     }\n \n+    public static class Command {\n+        public enum Action { ADD, REMOVE }\n+\n+        private Action action;\n+        private String name;\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+        public void setName(final String name) {\n+            this.name = name;\n+        }\n+\n+        public Action getAction() {\n+            return action;\n+        }\n+\n+        public void setAction(final Action action) {\n+            this.action = action;\n+        }\n+    }\n+\n     /*public static class ByteArray {\n         \n         public byte[] byteArray;",
                "additions": 79,
                "raw_url": "https://github.com/apache/johnzon/raw/14234d20ec87efdce26752eb586e390eeeaa1c73/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperTest.java",
                "status": "modified",
                "changes": 81,
                "deletions": 2,
                "sha": "f5817bb8f2d11d8dc9ae182ef754710030bb2ca7",
                "blob_url": "https://github.com/apache/johnzon/blob/14234d20ec87efdce26752eb586e390eeeaa1c73/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperTest.java",
                "filename": "johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperTest.java",
                "contents_url": "https://api.github.com/repos/apache/johnzon/contents/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperTest.java?ref=14234d20ec87efdce26752eb586e390eeeaa1c73"
            }
        ],
        "bug_id": "johnzon_7",
        "parent": "https://github.com/apache/johnzon/commit/0c105624dff86e909754921d0c78234c95b4da6f",
        "message": "JOHNZON-54 JOHNZON-55 avoid NPE if no json value is provided + fixing primitive/enum handling when root in collections",
        "repo": "johnzon"
    }
]