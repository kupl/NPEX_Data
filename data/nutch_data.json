[
    {
        "repo": "nutch",
        "message": "Merge pull request #313 from sebastian-nagel/NUTCH-2533-npe-inject-urldir-with-non-files\n\nNUTCH-2533 Injector: NullPointerException if seed URL dir contains non-file entries",
        "commit": "https://github.com/apache/nutch/commit/138bc89f01bfada8d800a41670d36a863c83ef21",
        "parent": "https://github.com/apache/nutch/commit/929fc9c89afb9267e3116cdca874dbcf9e511430",
        "bug_id": "nutch_1",
        "file": [
            {
                "sha": "1f30989052d57db6ed8e57abcc7719698a33e536",
                "filename": "src/java/org/apache/nutch/crawl/Injector.java",
                "blob_url": "https://github.com/apache/nutch/blob/138bc89f01bfada8d800a41670d36a863c83ef21/src/java/org/apache/nutch/crawl/Injector.java",
                "raw_url": "https://github.com/apache/nutch/raw/138bc89f01bfada8d800a41670d36a863c83ef21/src/java/org/apache/nutch/crawl/Injector.java",
                "status": "modified",
                "changes": 25,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/crawl/Injector.java?ref=138bc89f01bfada8d800a41670d36a863c83ef21",
                "patch": "@@ -18,6 +18,7 @@\n package org.apache.nutch.crawl;\n \n import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n import org.apache.hadoop.fs.FileSystem;\n import org.apache.hadoop.fs.Path;\n import org.apache.hadoop.io.FloatWritable;\n@@ -41,6 +42,7 @@\n import org.apache.nutch.scoring.ScoringFilterException;\n import org.apache.nutch.scoring.ScoringFilters;\n import org.apache.nutch.service.NutchServer;\n+import org.apache.nutch.util.LockUtil;\n import org.apache.nutch.util.NutchConfiguration;\n import org.apache.nutch.util.NutchJob;\n import org.apache.nutch.util.NutchTool;\n@@ -409,7 +411,24 @@ public void inject(Path crawlDb, Path urlDir, boolean overwrite,\n \n     // set input and output paths of the job\n     MultipleInputs.addInputPath(job, current, SequenceFileInputFormat.class);\n-    MultipleInputs.addInputPath(job, urlDir, KeyValueTextInputFormat.class);\n+    FileStatus[] seedFiles = urlDir.getFileSystem(getConf()).listStatus(urlDir);\n+    int numSeedFiles = 0;\n+    for (FileStatus seedFile : seedFiles) {\n+      if (seedFile.isFile()) {\n+        MultipleInputs.addInputPath(job, seedFile.getPath(),\n+            KeyValueTextInputFormat.class);\n+        numSeedFiles++;\n+        LOG.info(\"Injecting seed URL file {}\", seedFile.getPath());\n+      } else {\n+        LOG.warn(\"Skipped non-file input in {}: {}\", urlDir,\n+            seedFile.getPath());\n+      }\n+    }\n+    if (numSeedFiles == 0) {\n+      LOG.error(\"No seed files to inject found in {}\", urlDir);\n+      LockUtil.removeLockFile(fs, lock);\n+      return;\n+    }\n     FileOutputFormat.setOutputPath(job, tempCrawlDb);\n \n     try {\n@@ -461,8 +480,8 @@ public void inject(Path crawlDb, Path urlDir, boolean overwrite,\n         LOG.info(\"Injector: finished at \" + sdf.format(end) + \", elapsed: \"\n             + TimingUtil.elapsedTime(start, end));\n       }\n-    } catch (IOException | InterruptedException | ClassNotFoundException e) {\n-      LOG.error(\"Injector job failed\", e);\n+    } catch (IOException | InterruptedException | ClassNotFoundException | NullPointerException e) {\n+      LOG.error(\"Injector job failed: {}\", e.getMessage());\n       NutchJob.cleanupAfterFailure(tempCrawlDb, lock, fs);\n       throw e;\n     }",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "Merge pull request #476 from sebastian-nagel/NUTCH-2482-index-geoip-npe\n\nNUTCH-2482 index-geoip not to add null values to document fields",
        "commit": "https://github.com/apache/nutch/commit/0f4692739889dd0276172782257978f4eadf5ec0",
        "parent": "https://github.com/apache/nutch/commit/ff9f025d653f97a026420b8a57ceede1210c7e4a",
        "bug_id": "nutch_2",
        "file": [
            {
                "sha": "1a5d1be1692927c1eff9a37149271fcda6d888f8",
                "filename": "src/plugin/index-geoip/ivy.xml",
                "blob_url": "https://github.com/apache/nutch/blob/0f4692739889dd0276172782257978f4eadf5ec0/src/plugin/index-geoip/ivy.xml",
                "raw_url": "https://github.com/apache/nutch/raw/0f4692739889dd0276172782257978f4eadf5ec0/src/plugin/index-geoip/ivy.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/plugin/index-geoip/ivy.xml?ref=0f4692739889dd0276172782257978f4eadf5ec0",
                "patch": "@@ -36,7 +36,7 @@\n   </publications>\n \n   <dependencies>\n-    <dependency org=\"com.maxmind.geoip2\" name=\"geoip2\" rev=\"2.10.0\" >\n+    <dependency org=\"com.maxmind.geoip2\" name=\"geoip2\" rev=\"2.12.0\" >\n       <!-- Exlude due to classpath issues -->\n       <exclude org=\"org.apache.httpcomponents\" name=\"httpclient\" />\n       <exclude org=\"org.apache.httpcomponents\" name=\"httpcore\" />",
                "deletions": 1
            },
            {
                "sha": "6148f59e5ccfc53f847876025bea837acc08ce60",
                "filename": "src/plugin/index-geoip/plugin.xml",
                "blob_url": "https://github.com/apache/nutch/blob/0f4692739889dd0276172782257978f4eadf5ec0/src/plugin/index-geoip/plugin.xml",
                "raw_url": "https://github.com/apache/nutch/raw/0f4692739889dd0276172782257978f4eadf5ec0/src/plugin/index-geoip/plugin.xml",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/plugin/index-geoip/plugin.xml?ref=0f4692739889dd0276172782257978f4eadf5ec0",
                "patch": "@@ -25,10 +25,10 @@\n       <library name=\"index-geoip.jar\">\n          <export name=\"*\"/>\n       </library>\n-      <library name=\"geoip2-2.10.0.jar\"/>\n-      <library name=\"jackson-annotations-2.9.0.jar\"/>\n-      <library name=\"jackson-core-2.9.2.jar\"/>\n-      <library name=\"jackson-databind-2.9.2.jar\"/>\n+      <library name=\"geoip2-2.12.0.jar\"/>\n+      <library name=\"jackson-annotations-2.9.5.jar\"/>\n+      <library name=\"jackson-core-2.9.5.jar\"/>\n+      <library name=\"jackson-databind-2.9.5.jar\"/>\n       <library name=\"maxmind-db-1.2.2.jar\"/>\n    </runtime>\n ",
                "deletions": 4
            },
            {
                "sha": "d42ccdd812a248ce68e17752d69b2b076c486b3e",
                "filename": "src/plugin/index-geoip/src/java/org/apache/nutch/indexer/geoip/GeoIPDocumentCreator.java",
                "blob_url": "https://github.com/apache/nutch/blob/0f4692739889dd0276172782257978f4eadf5ec0/src/plugin/index-geoip/src/java/org/apache/nutch/indexer/geoip/GeoIPDocumentCreator.java",
                "raw_url": "https://github.com/apache/nutch/raw/0f4692739889dd0276172782257978f4eadf5ec0/src/plugin/index-geoip/src/java/org/apache/nutch/indexer/geoip/GeoIPDocumentCreator.java",
                "status": "modified",
                "changes": 139,
                "additions": 75,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/plugin/index-geoip/src/java/org/apache/nutch/indexer/geoip/GeoIPDocumentCreator.java?ref=0f4692739889dd0276172782257978f4eadf5ec0",
                "patch": "@@ -54,66 +54,76 @@\n  */\n public class GeoIPDocumentCreator {\n \n-  /**\n-   * Default constructor.\n-   */\n-  public GeoIPDocumentCreator() {\n+  /** Add field to document but only if value isn't null */\n+  public static void addIfNotNull(NutchDocument doc, String name,\n+      String value) {\n+    if (value != null) {\n+      doc.add(name, value);\n+    }\n+  }\n+\n+  /** Add field to document but only if value isn't null */\n+  public static void addIfNotNull(NutchDocument doc, String name,\n+      Integer value) {\n+    if (value != null) {\n+      doc.add(name, value);\n+    }\n   }\n \n   public static NutchDocument createDocFromInsightsService(String serverIp,\n       NutchDocument doc, WebServiceClient client) throws UnknownHostException,\n       IOException, GeoIp2Exception {\n-    doc.add(\"ip\", serverIp);\n+    addIfNotNull(doc, \"ip\", serverIp);\n     InsightsResponse response = client\n         .insights(InetAddress.getByName(serverIp));\n     // CityResponse response = client.city(InetAddress.getByName(serverIp));\n \n     City city = response.getCity();\n-    doc.add(\"cityName\", city.getName()); // 'Minneapolis'\n-    doc.add(\"cityConfidence\", city.getConfidence()); // 50\n-    doc.add(\"cityGeoNameId\", city.getGeoNameId());\n+    addIfNotNull(doc, \"cityName\", city.getName()); // 'Minneapolis'\n+    addIfNotNull(doc, \"cityConfidence\", city.getConfidence()); // 50\n+    addIfNotNull(doc, \"cityGeoNameId\", city.getGeoNameId());\n \n     Continent continent = response.getContinent();\n-    doc.add(\"continentCode\", continent.getCode());\n-    doc.add(\"continentGeoNameId\", continent.getGeoNameId());\n-    doc.add(\"continentName\", continent.getName());\n+    addIfNotNull(doc, \"continentCode\", continent.getCode());\n+    addIfNotNull(doc, \"continentGeoNameId\", continent.getGeoNameId());\n+    addIfNotNull(doc, \"continentName\", continent.getName());\n \n     Country country = response.getCountry();\n-    doc.add(\"countryIsoCode\", country.getIsoCode()); // 'US'\n-    doc.add(\"countryName\", country.getName()); // 'United States'\n-    doc.add(\"countryConfidence\", country.getConfidence()); // 99\n-    doc.add(\"countryGeoName\", country.getGeoNameId());\n+    addIfNotNull(doc, \"countryIsoCode\", country.getIsoCode()); // 'US'\n+    addIfNotNull(doc, \"countryName\", country.getName()); // 'United States'\n+    addIfNotNull(doc, \"countryConfidence\", country.getConfidence()); // 99\n+    addIfNotNull(doc, \"countryGeoName\", country.getGeoNameId());\n \n     Location location = response.getLocation();\n-    doc.add(\"latLon\", location.getLatitude() + \",\" + location.getLongitude()); // 44.9733,\n+    addIfNotNull(doc, \"latLon\", location.getLatitude() + \",\" + location.getLongitude()); // 44.9733,\n                                                                                // -93.2323\n-    doc.add(\"accRadius\", location.getAccuracyRadius()); // 3\n-    doc.add(\"timeZone\", location.getTimeZone()); // 'America/Chicago'\n-    doc.add(\"metroCode\", location.getMetroCode());\n+    addIfNotNull(doc, \"accRadius\", location.getAccuracyRadius()); // 3\n+    addIfNotNull(doc, \"timeZone\", location.getTimeZone()); // 'America/Chicago'\n+    addIfNotNull(doc, \"metroCode\", location.getMetroCode());\n \n     Postal postal = response.getPostal();\n-    doc.add(\"postalCode\", postal.getCode()); // '55455'\n-    doc.add(\"postalConfidence\", postal.getConfidence()); // 40\n+    addIfNotNull(doc, \"postalCode\", postal.getCode()); // '55455'\n+    addIfNotNull(doc, \"postalConfidence\", postal.getConfidence()); // 40\n \n     RepresentedCountry rCountry = response.getRepresentedCountry();\n-    doc.add(\"countryType\", rCountry.getType());\n+    addIfNotNull(doc, \"countryType\", rCountry.getType());\n \n     Subdivision subdivision = response.getMostSpecificSubdivision();\n-    doc.add(\"subDivName\", subdivision.getName()); // 'Minnesota'\n-    doc.add(\"subDivIdoCode\", subdivision.getIsoCode()); // 'MN'\n-    doc.add(\"subDivConfidence\", subdivision.getConfidence()); // 90\n-    doc.add(\"subDivGeoNameId\", subdivision.getGeoNameId());\n+    addIfNotNull(doc, \"subDivName\", subdivision.getName()); // 'Minnesota'\n+    addIfNotNull(doc, \"subDivIdoCode\", subdivision.getIsoCode()); // 'MN'\n+    addIfNotNull(doc, \"subDivConfidence\", subdivision.getConfidence()); // 90\n+    addIfNotNull(doc, \"subDivGeoNameId\", subdivision.getGeoNameId());\n \n     Traits traits = response.getTraits();\n-    doc.add(\"autonSystemNum\", traits.getAutonomousSystemNumber());\n-    doc.add(\"autonSystemOrg\", traits.getAutonomousSystemOrganization());\n-    doc.add(\"domain\", traits.getDomain());\n-    doc.add(\"isp\", traits.getIsp());\n-    doc.add(\"org\", traits.getOrganization());\n-    doc.add(\"userType\", traits.getUserType());\n+    addIfNotNull(doc, \"autonSystemNum\", traits.getAutonomousSystemNumber());\n+    addIfNotNull(doc, \"autonSystemOrg\", traits.getAutonomousSystemOrganization());\n+    addIfNotNull(doc, \"domain\", traits.getDomain());\n+    addIfNotNull(doc, \"isp\", traits.getIsp());\n+    addIfNotNull(doc, \"org\", traits.getOrganization());\n+    addIfNotNull(doc, \"userType\", traits.getUserType());\n     //for better results, users should upgrade to\n     //https://www.maxmind.com/en/solutions/geoip2-enterprise-product-suite/anonymous-ip-database\n-    doc.add(\"isAnonProxy\", traits.isAnonymousProxy());\n+    addIfNotNull(doc, \"isAnonProxy\", String.valueOf(traits.isAnonymousProxy()));\n     return doc;\n   }\n \n@@ -137,20 +147,20 @@ public static NutchDocument createDocFromIspDb(String serverIp,\n       NutchDocument doc, DatabaseReader reader) throws UnknownHostException,\n       IOException, GeoIp2Exception {\n     IspResponse response = reader.isp(InetAddress.getByName(serverIp));\n-    doc.add(\"ip\", serverIp);\n-    doc.add(\"autonSystemNum\", response.getAutonomousSystemNumber());\n-    doc.add(\"autonSystemOrg\", response.getAutonomousSystemOrganization());\n-    doc.add(\"isp\", response.getIsp());\n-    doc.add(\"org\", response.getOrganization());\n+    addIfNotNull(doc, \"ip\", serverIp);\n+    addIfNotNull(doc, \"autonSystemNum\", response.getAutonomousSystemNumber());\n+    addIfNotNull(doc, \"autonSystemOrg\", response.getAutonomousSystemOrganization());\n+    addIfNotNull(doc, \"isp\", response.getIsp());\n+    addIfNotNull(doc, \"org\", response.getOrganization());\n     return doc;\n   }\n \n   public static NutchDocument createDocFromDomainDb(String serverIp,\n       NutchDocument doc, DatabaseReader reader) throws UnknownHostException,\n       IOException, GeoIp2Exception {\n     DomainResponse response = reader.domain(InetAddress.getByName(serverIp));\n-    doc.add(\"ip\", serverIp);\n-    doc.add(\"domain\", response.getDomain());\n+    addIfNotNull(doc, \"ip\", serverIp);\n+    addIfNotNull(doc, \"domain\", response.getDomain());\n     return doc;\n   }\n \n@@ -159,52 +169,53 @@ public static NutchDocument createDocFromConnectionDb(String serverIp,\n       IOException, GeoIp2Exception {\n     ConnectionTypeResponse response = reader.connectionType(InetAddress\n         .getByName(serverIp));\n-    doc.add(\"ip\", serverIp);\n-    doc.add(\"connType\", response.getConnectionType().toString());\n+    addIfNotNull(doc, \"ip\", serverIp);\n+    addIfNotNull(doc, \"connType\", response.getConnectionType().toString());\n     return doc;\n   }\n \n   public static NutchDocument createDocFromCityDb(String serverIp,\n       NutchDocument doc, DatabaseReader reader) throws UnknownHostException,\n       IOException, GeoIp2Exception {\n-    doc.add(\"ip\", serverIp);\n+    addIfNotNull(doc, \"ip\", serverIp);\n     CityResponse response = reader.city(InetAddress.getByName(serverIp));\n \n     City city = response.getCity();\n-    doc.add(\"cityName\", city.getName()); // 'Minneapolis'\n-    doc.add(\"cityConfidence\", city.getConfidence()); // 50\n-    doc.add(\"cityGeoNameId\", city.getGeoNameId());\n+    addIfNotNull(doc, \"cityName\", city.getName()); // 'Minneapolis'\n+    addIfNotNull(doc, \"cityConfidence\", city.getConfidence()); // 50\n+    addIfNotNull(doc, \"cityGeoNameId\", city.getGeoNameId());\n+\n \n     Continent continent = response.getContinent();\n-    doc.add(\"continentCode\", continent.getCode());\n-    doc.add(\"continentGeoNameId\", continent.getGeoNameId());\n-    doc.add(\"continentName\", continent.getName());\n+    addIfNotNull(doc, \"continentCode\", continent.getCode());\n+    addIfNotNull(doc, \"continentGeoNameId\", continent.getGeoNameId());\n+    addIfNotNull(doc, \"continentName\", continent.getName());\n \n     Country country = response.getCountry();\n-    doc.add(\"countryIsoCode\", country.getIsoCode()); // 'US'\n-    doc.add(\"countryName\", country.getName()); // 'United States'\n-    doc.add(\"countryConfidence\", country.getConfidence()); // 99\n-    doc.add(\"countryGeoName\", country.getGeoNameId());\n+    addIfNotNull(doc, \"countryIsoCode\", country.getIsoCode()); // 'US'\n+    addIfNotNull(doc, \"countryName\", country.getName()); // 'United States'\n+    addIfNotNull(doc, \"countryConfidence\", country.getConfidence()); // 99\n+    addIfNotNull(doc, \"countryGeoName\", country.getGeoNameId());\n \n     Location location = response.getLocation();\n-    doc.add(\"latLon\", location.getLatitude() + \",\" + location.getLongitude()); // 44.9733,\n+    addIfNotNull(doc, \"latLon\", location.getLatitude() + \",\" + location.getLongitude()); // 44.9733,\n                                                                                // -93.2323\n-    doc.add(\"accRadius\", location.getAccuracyRadius()); // 3\n-    doc.add(\"timeZone\", location.getTimeZone()); // 'America/Chicago'\n-    doc.add(\"metroCode\", location.getMetroCode());\n+    addIfNotNull(doc, \"accRadius\", location.getAccuracyRadius()); // 3\n+    addIfNotNull(doc, \"timeZone\", location.getTimeZone()); // 'America/Chicago'\n+    addIfNotNull(doc, \"metroCode\", location.getMetroCode());\n \n     Postal postal = response.getPostal();\n-    doc.add(\"postalCode\", postal.getCode()); // '55455'\n-    doc.add(\"postalConfidence\", postal.getConfidence()); // 40\n+    addIfNotNull(doc, \"postalCode\", postal.getCode()); // '55455'\n+    addIfNotNull(doc, \"postalConfidence\", postal.getConfidence()); // 40\n \n     RepresentedCountry rCountry = response.getRepresentedCountry();\n-    doc.add(\"countryType\", rCountry.getType());\n+    addIfNotNull(doc, \"countryType\", rCountry.getType());\n \n     Subdivision subdivision = response.getMostSpecificSubdivision();\n-    doc.add(\"subDivName\", subdivision.getName()); // 'Minnesota'\n-    doc.add(\"subDivIdoCode\", subdivision.getIsoCode()); // 'MN'\n-    doc.add(\"subDivConfidence\", subdivision.getConfidence()); // 90\n-    doc.add(\"subDivGeoNameId\", subdivision.getGeoNameId());\n+    addIfNotNull(doc, \"subDivName\", subdivision.getName()); // 'Minnesota'\n+    addIfNotNull(doc, \"subDivIdoCode\", subdivision.getIsoCode()); // 'MN'\n+    addIfNotNull(doc, \"subDivConfidence\", subdivision.getConfidence()); // 90\n+    addIfNotNull(doc, \"subDivGeoNameId\", subdivision.getGeoNameId());\n     return doc;\n   }\n ",
                "deletions": 64
            },
            {
                "sha": "0d19aeccb293e6b45185ff64463177f0f235a3ba",
                "filename": "src/plugin/index-geoip/src/java/org/apache/nutch/indexer/geoip/GeoIPIndexingFilter.java",
                "blob_url": "https://github.com/apache/nutch/blob/0f4692739889dd0276172782257978f4eadf5ec0/src/plugin/index-geoip/src/java/org/apache/nutch/indexer/geoip/GeoIPIndexingFilter.java",
                "raw_url": "https://github.com/apache/nutch/raw/0f4692739889dd0276172782257978f4eadf5ec0/src/plugin/index-geoip/src/java/org/apache/nutch/indexer/geoip/GeoIPIndexingFilter.java",
                "status": "modified",
                "changes": 106,
                "additions": 48,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/plugin/index-geoip/src/java/org/apache/nutch/indexer/geoip/GeoIPIndexingFilter.java?ref=0f4692739889dd0276172782257978f4eadf5ec0",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.nutch.indexer.geoip;\n \n import java.lang.invoke.MethodHandles;\n+import java.net.URL;\n import java.io.File;\n import java.io.IOException;\n import org.apache.hadoop.conf.Configuration;\n@@ -118,8 +119,6 @@\n \n   private String usage = null;\n \n-  private File geoDb = null;\n-\n   WebServiceClient client = null;\n \n   DatabaseReader reader = null;\n@@ -146,49 +145,45 @@ public Configuration getConf() {\n   @Override\n   public void setConf(Configuration conf) {\n     this.conf = conf;\n-    String use = conf.get(\"index.geoip.usage\", \"insightsService\");\n-    LOG.debug(\"GeoIP usage medium set to: {}\", use);\n-    if (use.equalsIgnoreCase(\"cityDatabase\")) {\n-      try {\n-        geoDb = new File(conf.getResource(\"GeoIP2-City.mmdb\").getFile());\n-        buildDb();\n-      } catch (Exception e) {\n-        LOG.error(org.apache.hadoop.util.StringUtils.stringifyException(e));\n+    usage = conf.get(\"index.geoip.usage\", \"insightsService\");\n+    LOG.debug(\"GeoIP usage medium set to: {}\", usage);\n+    if (usage.equalsIgnoreCase(\"insightsService\")) {\n+      client = new WebServiceClient.Builder(\n+          conf.getInt(\"index.geoip.userid\", 12345),\n+          conf.get(\"index.geoip.licensekey\")).build();\n+    } else {\n+      String db = null;\n+      if (usage.equalsIgnoreCase(\"cityDatabase\")) {\n+        db = \"GeoIP2-City.mmdb\";\n+      } else if (usage.equalsIgnoreCase(\"connectionTypeDatabase\")) {\n+        db = \"GeoIP2-Connection-Type.mmdb\";\n+      } else if (usage.equalsIgnoreCase(\"domainDatabase\")) {\n+        db = \"GeoIP2-Domain.mmdb\";\n+      } else if (usage.equalsIgnoreCase(\"ispDatabase\")) {\n+        db = \"GeoIP2-ISP.mmdb\";\n       }\n-    } else if (use.equalsIgnoreCase(\"connectionTypeDatabase\")) {\n-      try {\n-        geoDb = new File(conf.getResource(\"GeoIP2-Connection-Type.mmdb\")\n-            .getFile());\n-        buildDb();\n-      } catch (Exception e) {\n-        LOG.error(org.apache.hadoop.util.StringUtils.stringifyException(e));\n-      }\n-    } else if (use.equalsIgnoreCase(\"domainDatabase\")) {\n-      try {\n-        geoDb = new File(conf.getResource(\"GeoIP2-Domain.mmdb\").getFile());\n-        buildDb();\n-      } catch (Exception e) {\n-        LOG.error(org.apache.hadoop.util.StringUtils.stringifyException(e));\n-      }\n-    } else if (use.equalsIgnoreCase(\"ispDatabase\")) {\n-      try {\n-        geoDb = new File(conf.getResource(\"GeoIP2-ISP.mmdb\").getFile());\n-        buildDb();\n-      } catch (Exception e) {\n-        LOG.error(org.apache.hadoop.util.StringUtils.stringifyException(e));\n+      URL dbFileUrl = conf.getResource(db);\n+      if (dbFileUrl == null) {\n+        LOG.error(\"GeoDb file {} not found on classpath\", db);\n+      } else {\n+        try {\n+          buildDb(new File(dbFileUrl.getFile()));\n+        } catch (Exception e) {\n+          LOG.error(\"Failed to read geoDb file {}: \", db, e);\n+        }\n       }\n-    } else if (use.equalsIgnoreCase(\"insightsService\")) {\n-      client = new WebServiceClient.Builder(conf.getInt(\"index.geoip.userid\",\n-          12345), conf.get(\"index.geoip.licensekey\")).build();\n     }\n-    usage = use;\n+    if (!conf.getBoolean(\"store.ip.address\", false)) {\n+      LOG.warn(\"Plugin index-geoip is active but IP address is not stored\"\n+          + \"(store.ip.address == false)\");\n+    }\n   }\n \n-  private void buildDb() {\n+  private void buildDb(File geoDb) {\n     try {\n       reader = new DatabaseReader.Builder(geoDb).build();\n     } catch (IOException e) {\n-      LOG.error(org.apache.hadoop.util.StringUtils.stringifyException(e));\n+      LOG.error(\"Failed to build geoDb:\", e);\n     }\n   }\n \n@@ -207,30 +202,25 @@ public NutchDocument filter(NutchDocument doc, Parse parse, Text url,\n   private NutchDocument addServerGeo(NutchDocument doc, ParseData data,\n       String url) {\n \n-    if (conf.getBoolean(\"store.ip.address\", false) == true) {\n+    String serverIp = data.getContentMeta().get(\"_ip_\");\n+    if (serverIp != null && reader != null) {\n       try {\n-        String serverIp = data.getContentMeta().get(\"_ip_\");\n-        if (serverIp != null) {\n-          if (usage.equalsIgnoreCase(\"cityDatabase\")) {\n-            doc = GeoIPDocumentCreator.createDocFromCityDb(serverIp, doc,\n-                reader);\n-          } else if (usage.equalsIgnoreCase(\"connectionTypeDatabase\")) {\n-            doc = GeoIPDocumentCreator.createDocFromConnectionDb(serverIp, doc,\n-                reader);\n-          } else if (usage.equalsIgnoreCase(\"domainDatabase\")) {\n-            doc = GeoIPDocumentCreator.createDocFromDomainDb(serverIp, doc,\n-                reader);\n-          } else if (usage.equalsIgnoreCase(\"ispDatabase\")) {\n-            doc = GeoIPDocumentCreator\n-                .createDocFromIspDb(serverIp, doc, reader);\n-          } else if (usage.equalsIgnoreCase(\"insightsService\")) {\n-            doc = GeoIPDocumentCreator.createDocFromInsightsService(serverIp,\n-                doc, client);\n-          }\n+        if (usage.equalsIgnoreCase(\"cityDatabase\")) {\n+          doc = GeoIPDocumentCreator.createDocFromCityDb(serverIp, doc, reader);\n+        } else if (usage.equalsIgnoreCase(\"connectionTypeDatabase\")) {\n+          doc = GeoIPDocumentCreator.createDocFromConnectionDb(serverIp, doc,\n+              reader);\n+        } else if (usage.equalsIgnoreCase(\"domainDatabase\")) {\n+          doc = GeoIPDocumentCreator.createDocFromDomainDb(serverIp, doc,\n+              reader);\n+        } else if (usage.equalsIgnoreCase(\"ispDatabase\")) {\n+          doc = GeoIPDocumentCreator.createDocFromIspDb(serverIp, doc, reader);\n+        } else if (usage.equalsIgnoreCase(\"insightsService\")) {\n+          doc = GeoIPDocumentCreator.createDocFromInsightsService(serverIp, doc,\n+              client);\n         }\n       } catch (Exception e) {\n-        LOG.error(e.getMessage());\n-        e.printStackTrace();\n+        LOG.error(\"Failed to determine geoip:\", e);\n       }\n     }\n     return doc;",
                "deletions": 58
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "Merge pull request #452 from sebastian-nagel/NUTCH-2585-trie-string-matcher\n\nNUTCH-2585 NPE in trie string matcher",
        "commit": "https://github.com/apache/nutch/commit/fd203d8f7d6376fc5348c80e4ee34d0164af31da",
        "parent": "https://github.com/apache/nutch/commit/7765bb3afdc6f43e8bac0a4a4f4de248657e3a76",
        "bug_id": "nutch_3",
        "file": [
            {
                "sha": "3be0fd71a0f3d1a30851c60967f2aab4d6e403cb",
                "filename": "src/java/org/apache/nutch/util/PrefixStringMatcher.java",
                "blob_url": "https://github.com/apache/nutch/blob/fd203d8f7d6376fc5348c80e4ee34d0164af31da/src/java/org/apache/nutch/util/PrefixStringMatcher.java",
                "raw_url": "https://github.com/apache/nutch/raw/fd203d8f7d6376fc5348c80e4ee34d0164af31da/src/java/org/apache/nutch/util/PrefixStringMatcher.java",
                "status": "modified",
                "changes": 26,
                "additions": 24,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/util/PrefixStringMatcher.java?ref=fd203d8f7d6376fc5348c80e4ee34d0164af31da",
                "patch": "@@ -16,8 +16,11 @@\n  */\n package org.apache.nutch.util;\n \n+import java.util.Arrays;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.Iterator;\n+import java.util.List;\n \n /**\n  * A class for efficiently matching <code>String</code>s against a set of\n@@ -102,8 +105,9 @@ public String longestMatch(String input) {\n   }\n \n   public static final void main(String[] argv) {\n-    PrefixStringMatcher matcher = new PrefixStringMatcher(new String[] {\n-        \"abcd\", \"abc\", \"aac\", \"baz\", \"foo\", \"foobar\" });\n+    String[] prefixes = new String[] { \"abcd\", \"abc\", \"aac\", \"baz\", \"foo\",\n+        \"foobar\" };\n+    PrefixStringMatcher matcher = new PrefixStringMatcher(prefixes);\n \n     String[] tests = { \"a\", \"ab\", \"abc\", \"abcdefg\", \"apple\", \"aa\", \"aac\",\n         \"aaccca\", \"abaz\", \"baz\", \"bazooka\", \"fo\", \"foobar\", \"kite\", };\n@@ -114,5 +118,23 @@ public static final void main(String[] argv) {\n       System.out.println(\"  shortest: \" + matcher.shortestMatch(tests[i]));\n       System.out.println(\"   longest: \" + matcher.longestMatch(tests[i]));\n     }\n+\n+    int iterations = 1000;\n+    System.out.println(\"Testing thread-safety (NUTCH-2585) with \" + iterations\n+        + \" iterations:\");\n+    List<String> testsList = Arrays.asList(tests);\n+    for (int i = 0; i < iterations; i++) {\n+      matcher = new PrefixStringMatcher(prefixes);\n+      Collections.shuffle(testsList);\n+      try {\n+        long count = testsList.parallelStream().filter(matcher::matches).count();\n+        System.out.print(String.format(\"Cycle %4d : %d matches\\r\", i, count));\n+      } catch (Exception e) {\n+        // flush output\n+        System.out.println(\"\");\n+        throw e;\n+      }\n+    }\n+    System.out.println(\"\");\n   }\n }",
                "deletions": 2
            },
            {
                "sha": "d974ecbc1cae7c55f120a025a2b869c6424c50c1",
                "filename": "src/java/org/apache/nutch/util/TrieStringMatcher.java",
                "blob_url": "https://github.com/apache/nutch/blob/fd203d8f7d6376fc5348c80e4ee34d0164af31da/src/java/org/apache/nutch/util/TrieStringMatcher.java",
                "raw_url": "https://github.com/apache/nutch/raw/fd203d8f7d6376fc5348c80e4ee34d0164af31da/src/java/org/apache/nutch/util/TrieStringMatcher.java",
                "status": "modified",
                "changes": 18,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/util/TrieStringMatcher.java?ref=fd203d8f7d6376fc5348c80e4ee34d0164af31da",
                "patch": "@@ -23,6 +23,8 @@\n /**\n  * TrieStringMatcher is a base class for simple tree-based string matching.\n  * \n+ * This class is thread-safe during string matching but not when adding strings\n+ * to the trie.\n  */\n public abstract class TrieStringMatcher {\n   protected TrieNode root;\n@@ -103,9 +105,7 @@ TrieNode getChildAddIfNotPresent(char nextChar, boolean isTerminal) {\n      */\n     TrieNode getChild(char nextChar) {\n       if (children == null) {\n-        children = childrenList.toArray(new TrieNode[childrenList.size()]);\n-        childrenList = null;\n-        Arrays.sort(children);\n+        compile();\n       }\n \n       int min = 0;\n@@ -137,6 +137,18 @@ public int compareTo(TrieNode other) {\n       // if (this.nodeChar > other.nodeChar)\n       return 1;\n     }\n+\n+    /**\n+     * Prepare node for matching. Note: this method is synchronized because it\n+     * may be called concurrently when the trie is used for matching.\n+     */\n+    synchronized void compile() {\n+      if (childrenList != null) {\n+        children = childrenList.toArray(new TrieNode[childrenList.size()]);\n+        childrenList = null;\n+        Arrays.sort(children);\n+      }\n+    }\n   }\n \n   /**",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "NUTCH-2585 NPE in TrieStringMatcher\n- move code preparing TrieNode for matching into synchronized method\n- add note about thread-safety",
        "commit": "https://github.com/apache/nutch/commit/b1c46c48451bdfeacec730693ab49b07b7b95812",
        "parent": "https://github.com/apache/nutch/commit/615b20eafe947bf75abee836ddd3a9b67706c49f",
        "bug_id": "nutch_4",
        "file": [
            {
                "sha": "d974ecbc1cae7c55f120a025a2b869c6424c50c1",
                "filename": "src/java/org/apache/nutch/util/TrieStringMatcher.java",
                "blob_url": "https://github.com/apache/nutch/blob/b1c46c48451bdfeacec730693ab49b07b7b95812/src/java/org/apache/nutch/util/TrieStringMatcher.java",
                "raw_url": "https://github.com/apache/nutch/raw/b1c46c48451bdfeacec730693ab49b07b7b95812/src/java/org/apache/nutch/util/TrieStringMatcher.java",
                "status": "modified",
                "changes": 18,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/util/TrieStringMatcher.java?ref=b1c46c48451bdfeacec730693ab49b07b7b95812",
                "patch": "@@ -23,6 +23,8 @@\n /**\n  * TrieStringMatcher is a base class for simple tree-based string matching.\n  * \n+ * This class is thread-safe during string matching but not when adding strings\n+ * to the trie.\n  */\n public abstract class TrieStringMatcher {\n   protected TrieNode root;\n@@ -103,9 +105,7 @@ TrieNode getChildAddIfNotPresent(char nextChar, boolean isTerminal) {\n      */\n     TrieNode getChild(char nextChar) {\n       if (children == null) {\n-        children = childrenList.toArray(new TrieNode[childrenList.size()]);\n-        childrenList = null;\n-        Arrays.sort(children);\n+        compile();\n       }\n \n       int min = 0;\n@@ -137,6 +137,18 @@ public int compareTo(TrieNode other) {\n       // if (this.nodeChar > other.nodeChar)\n       return 1;\n     }\n+\n+    /**\n+     * Prepare node for matching. Note: this method is synchronized because it\n+     * may be called concurrently when the trie is used for matching.\n+     */\n+    synchronized void compile() {\n+      if (childrenList != null) {\n+        children = childrenList.toArray(new TrieNode[childrenList.size()]);\n+        childrenList = null;\n+        Arrays.sort(children);\n+      }\n+    }\n   }\n \n   /**",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "When fixHttpHeaders is called with null, return null\n\nInstead of NPE.\nThis allows the WARC tools to create \"resource\" entries instead of\nfailing.",
        "commit": "https://github.com/apache/nutch/commit/a83a736793a6f8bdc091acf73c1f00a48d25f4b6",
        "parent": "https://github.com/apache/nutch/commit/2fce5cdb41f6b838ab2e4e29932792672290bf5b",
        "bug_id": "nutch_5",
        "file": [
            {
                "sha": "1af6533b2eef5f5d0f70490f62c27b52e9216e2c",
                "filename": "src/java/org/apache/nutch/tools/WARCUtils.java",
                "blob_url": "https://github.com/apache/nutch/blob/a83a736793a6f8bdc091acf73c1f00a48d25f4b6/src/java/org/apache/nutch/tools/WARCUtils.java",
                "raw_url": "https://github.com/apache/nutch/raw/a83a736793a6f8bdc091acf73c1f00a48d25f4b6/src/java/org/apache/nutch/tools/WARCUtils.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/tools/WARCUtils.java?ref=a83a736793a6f8bdc091acf73c1f00a48d25f4b6",
                "patch": "@@ -186,6 +186,9 @@ public static final WARCRecordInfo docToMetadata(NutchDocument doc)\n    * @return safe HTTP response header\n    */\n   public static final String fixHttpHeaders(String headers, int contentLength) {\n+    if (headers==null) {\n+      return null;\n+    }\n     int start = 0, lineEnd = 0, last = 0, trailingCrLf= 0;\n     StringBuilder replace = new StringBuilder();\n     while (start < headers.length()) {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "NUTCH-2585 NPE in TrieStringMatcher\n- add test for thread-safety to main() method of PrefixStringMatcher\n  using parallel streams calling the match method",
        "commit": "https://github.com/apache/nutch/commit/615b20eafe947bf75abee836ddd3a9b67706c49f",
        "parent": "https://github.com/apache/nutch/commit/7765bb3afdc6f43e8bac0a4a4f4de248657e3a76",
        "bug_id": "nutch_6",
        "file": [
            {
                "sha": "3be0fd71a0f3d1a30851c60967f2aab4d6e403cb",
                "filename": "src/java/org/apache/nutch/util/PrefixStringMatcher.java",
                "blob_url": "https://github.com/apache/nutch/blob/615b20eafe947bf75abee836ddd3a9b67706c49f/src/java/org/apache/nutch/util/PrefixStringMatcher.java",
                "raw_url": "https://github.com/apache/nutch/raw/615b20eafe947bf75abee836ddd3a9b67706c49f/src/java/org/apache/nutch/util/PrefixStringMatcher.java",
                "status": "modified",
                "changes": 26,
                "additions": 24,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/util/PrefixStringMatcher.java?ref=615b20eafe947bf75abee836ddd3a9b67706c49f",
                "patch": "@@ -16,8 +16,11 @@\n  */\n package org.apache.nutch.util;\n \n+import java.util.Arrays;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.Iterator;\n+import java.util.List;\n \n /**\n  * A class for efficiently matching <code>String</code>s against a set of\n@@ -102,8 +105,9 @@ public String longestMatch(String input) {\n   }\n \n   public static final void main(String[] argv) {\n-    PrefixStringMatcher matcher = new PrefixStringMatcher(new String[] {\n-        \"abcd\", \"abc\", \"aac\", \"baz\", \"foo\", \"foobar\" });\n+    String[] prefixes = new String[] { \"abcd\", \"abc\", \"aac\", \"baz\", \"foo\",\n+        \"foobar\" };\n+    PrefixStringMatcher matcher = new PrefixStringMatcher(prefixes);\n \n     String[] tests = { \"a\", \"ab\", \"abc\", \"abcdefg\", \"apple\", \"aa\", \"aac\",\n         \"aaccca\", \"abaz\", \"baz\", \"bazooka\", \"fo\", \"foobar\", \"kite\", };\n@@ -114,5 +118,23 @@ public static final void main(String[] argv) {\n       System.out.println(\"  shortest: \" + matcher.shortestMatch(tests[i]));\n       System.out.println(\"   longest: \" + matcher.longestMatch(tests[i]));\n     }\n+\n+    int iterations = 1000;\n+    System.out.println(\"Testing thread-safety (NUTCH-2585) with \" + iterations\n+        + \" iterations:\");\n+    List<String> testsList = Arrays.asList(tests);\n+    for (int i = 0; i < iterations; i++) {\n+      matcher = new PrefixStringMatcher(prefixes);\n+      Collections.shuffle(testsList);\n+      try {\n+        long count = testsList.parallelStream().filter(matcher::matches).count();\n+        System.out.print(String.format(\"Cycle %4d : %d matches\\r\", i, count));\n+      } catch (Exception e) {\n+        // flush output\n+        System.out.println(\"\");\n+        throw e;\n+      }\n+    }\n+    System.out.println(\"\");\n   }\n }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "Merge pull request #357 from sebastian-nagel/NUTCH-2614-NPE-readdb-empty-crawldb\n\nNUTCH-2614 NPE in CrawlDbReader -stats on empty CrawlDb",
        "commit": "https://github.com/apache/nutch/commit/f011b2193c24e031aafbcfa1e66fc2bcbb59098b",
        "parent": "https://github.com/apache/nutch/commit/4717ff827ae8359a41261d6e5c60d0036eec9aa3",
        "bug_id": "nutch_7",
        "file": [
            {
                "sha": "ea4c96467ad50a397d9981fa0068394581214103",
                "filename": "src/java/org/apache/nutch/crawl/CrawlDbReader.java",
                "blob_url": "https://github.com/apache/nutch/blob/f011b2193c24e031aafbcfa1e66fc2bcbb59098b/src/java/org/apache/nutch/crawl/CrawlDbReader.java",
                "raw_url": "https://github.com/apache/nutch/raw/f011b2193c24e031aafbcfa1e66fc2bcbb59098b/src/java/org/apache/nutch/crawl/CrawlDbReader.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/crawl/CrawlDbReader.java?ref=f011b2193c24e031aafbcfa1e66fc2bcbb59098b",
                "patch": "@@ -550,8 +550,11 @@ public void processStatJob(String crawlDb, Configuration config, boolean sort)\n \n     if (LOG.isInfoEnabled()) {\n       LOG.info(\"Statistics for CrawlDb: \" + crawlDb);\n-      LongWritable totalCnt = ((LongWritable) stats.get(\"T\"));\n-      stats.remove(\"T\");\n+      LongWritable totalCnt = new LongWritable(0);\n+      if (stats.containsKey(\"T\")) {\n+        totalCnt = ((LongWritable) stats.get(\"T\"));\n+        stats.remove(\"T\");\n+      }\n       LOG.info(\"TOTAL urls:\\t\" + totalCnt.get());\n       for (Map.Entry<String, Writable> entry : stats.entrySet()) {\n         String k = entry.getKey();",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "NUTCH-2614 NPE in CrawlDbReader -stats on empty CrawlDb",
        "commit": "https://github.com/apache/nutch/commit/bef8d8e5e7fafc57e6f042c31998f1efb728867d",
        "parent": "https://github.com/apache/nutch/commit/4717ff827ae8359a41261d6e5c60d0036eec9aa3",
        "bug_id": "nutch_8",
        "file": [
            {
                "sha": "ea4c96467ad50a397d9981fa0068394581214103",
                "filename": "src/java/org/apache/nutch/crawl/CrawlDbReader.java",
                "blob_url": "https://github.com/apache/nutch/blob/bef8d8e5e7fafc57e6f042c31998f1efb728867d/src/java/org/apache/nutch/crawl/CrawlDbReader.java",
                "raw_url": "https://github.com/apache/nutch/raw/bef8d8e5e7fafc57e6f042c31998f1efb728867d/src/java/org/apache/nutch/crawl/CrawlDbReader.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/crawl/CrawlDbReader.java?ref=bef8d8e5e7fafc57e6f042c31998f1efb728867d",
                "patch": "@@ -550,8 +550,11 @@ public void processStatJob(String crawlDb, Configuration config, boolean sort)\n \n     if (LOG.isInfoEnabled()) {\n       LOG.info(\"Statistics for CrawlDb: \" + crawlDb);\n-      LongWritable totalCnt = ((LongWritable) stats.get(\"T\"));\n-      stats.remove(\"T\");\n+      LongWritable totalCnt = new LongWritable(0);\n+      if (stats.containsKey(\"T\")) {\n+        totalCnt = ((LongWritable) stats.get(\"T\"));\n+        stats.remove(\"T\");\n+      }\n       LOG.info(\"TOTAL urls:\\t\" + totalCnt.get());\n       for (Map.Entry<String, Writable> entry : stats.entrySet()) {\n         String k = entry.getKey();",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "Merge pull request #349 from sju/NUTCH-2597\n\nNUTCH-2597 NPE in updatehostdb:\r\nfixed cleanup() methods -> cleanup(context)",
        "commit": "https://github.com/apache/nutch/commit/39da8c1addd3400e755f98a6947004f8c8f3d15f",
        "parent": "https://github.com/apache/nutch/commit/24ac4a08f67dd4ffe865f21dc731e427e14f59fc",
        "bug_id": "nutch_9",
        "file": [
            {
                "sha": "7b8b13aa68a13d73272a311808c64f6a77b6a708",
                "filename": "src/java/org/apache/nutch/crawl/CrawlDbReader.java",
                "blob_url": "https://github.com/apache/nutch/blob/39da8c1addd3400e755f98a6947004f8c8f3d15f/src/java/org/apache/nutch/crawl/CrawlDbReader.java",
                "raw_url": "https://github.com/apache/nutch/raw/39da8c1addd3400e755f98a6947004f8c8f3d15f/src/java/org/apache/nutch/crawl/CrawlDbReader.java",
                "status": "modified",
                "changes": 62,
                "additions": 29,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/crawl/CrawlDbReader.java?ref=39da8c1addd3400e755f98a6947004f8c8f3d15f",
                "patch": "@@ -192,14 +192,13 @@ public synchronized void close(TaskAttemptContext context) throws IOException {\n     NutchWritable COUNT_1 = new NutchWritable(new LongWritable(1));\n     private boolean sort = false;\n \n+    @Override\n     public void setup(Mapper<Text, CrawlDatum, Text, NutchWritable>.Context context) {\n       Configuration conf = context.getConfiguration();\n       sort = conf.getBoolean(\"db.reader.stats.sort\", false);\n     }\n \n-    public void close() {\n-    }\n-\n+    @Override\n     public void map(Text key, CrawlDatum value, Context context)\n         throws IOException, InterruptedException {\n       context.write(new Text(\"T\"), COUNT_1);\n@@ -242,9 +241,7 @@ public void map(Text key, CrawlDatum value, Context context)\n     public void setup(Reducer<Text, NutchWritable, Text, NutchWritable>.Context context) {\n     }\n \n-    public void close() {\n-    }\n-\n+    @Override\n     public void reduce(Text key, Iterable<NutchWritable> values,\n         Context context)\n         throws IOException, InterruptedException {\n@@ -329,14 +326,13 @@ public void reduce(Text key, Iterable<NutchWritable> values,\n     private static final FloatWritable fw = new FloatWritable();\n     private float min = 0.0f;\n \n+    @Override\n     public void setup(Mapper<Text, CrawlDatum, FloatWritable, Text>.Context context) {\n       Configuration conf = context.getConfiguration();\n       min = conf.getFloat(\"db.reader.topn.min\", 0.0f);\n     }\n \n-    public void close() {\n-    }\n-\n+    @Override\n     public void map(Text key, CrawlDatum value,\n         Context context)\n         throws IOException, InterruptedException {\n@@ -352,6 +348,7 @@ public void map(Text key, CrawlDatum value,\n     private long topN;\n     private long count = 0L;\n \n+    @Override\n     public void reduce(FloatWritable key, Iterable<Text> values,\n         Context context)\n         throws IOException, InterruptedException {\n@@ -364,13 +361,11 @@ public void reduce(FloatWritable key, Iterable<Text> values,\n       }\n     }\n \n+    @Override\n     public void setup(Reducer<FloatWritable, Text, FloatWritable, Text>.Context context) {\n       Configuration conf = context.getConfiguration();\n       topN = conf.getLong(\"db.reader.topn\", 100) / Integer.parseInt(conf.get(\"mapreduce.job.reduces\"));\n     }\n-\n-    public void close() {\n-    }\n   }\n \n   public void close() {\n@@ -401,24 +396,25 @@ public void close() {\n \n \t  // https://issues.apache.org/jira/browse/NUTCH-1029\n \t  config.setBoolean(\"mapreduce.fileoutputcommitter.marksuccessfuljobs\", false);\n-          FileSystem fileSystem = tmpFolder.getFileSystem(config);\n-          try {\n-            boolean success = job.waitForCompletion(true);\n-            if (!success) {\n-              String message = \"CrawlDbReader job did not succeed, job status:\"\n-                  + job.getStatus().getState() + \", reason: \"\n-                  + job.getStatus().getFailureInfo();\n-              LOG.error(message);\n-              fileSystem.delete(tmpFolder, true);\n-              throw new RuntimeException(message);\n-            }\n-          } catch (IOException | InterruptedException | ClassNotFoundException e) {\n-            LOG.error(StringUtils.stringifyException(e));\n-            fileSystem.delete(tmpFolder, true);\n-            throw e;\n-          }\n-\t  // reading the result\n-          SequenceFile.Reader[] readers = SegmentReaderUtil.getReaders(tmpFolder, config);\n+    FileSystem fileSystem = tmpFolder.getFileSystem(config);\n+    try {\n+      boolean success = job.waitForCompletion(true);\n+      if (!success) {\n+        String message = \"CrawlDbReader job did not succeed, job status:\"\n+            + job.getStatus().getState() + \", reason: \"\n+            + job.getStatus().getFailureInfo();\n+        LOG.error(message);\n+        fileSystem.delete(tmpFolder, true);\n+        throw new RuntimeException(message);\n+      }\n+    } catch (IOException | InterruptedException | ClassNotFoundException e) {\n+      LOG.error(StringUtils.stringifyException(e));\n+      fileSystem.delete(tmpFolder, true);\n+      throw e;\n+    }\n+\n+    // reading the result\n+    SequenceFile.Reader[] readers = SegmentReaderUtil.getReaders(tmpFolder, config);\n \n \t  Text key = new Text();\n \t  NutchWritable value = new NutchWritable();\n@@ -629,6 +625,7 @@ public CrawlDatum get(String crawlDb, String url, Configuration config)\n     return res;\n   }\n \n+  @Override\n   protected int process(String line, StringBuilder output) throws Exception {\n     Job job = NutchJob.getInstance(getConf());\n     Configuration config = job.getConfiguration();\n@@ -720,6 +717,7 @@ public void processDumpJob(String crawlDb, String output,\n     Expression expr = null;\n     float sample;\n \n+    @Override\n     public void setup(Mapper<Text, CrawlDatum, Text, CrawlDatum>.Context context) {\n       Configuration config = context.getConfiguration();\n       if (config.get(\"regex\", null) != null) {\n@@ -734,9 +732,7 @@ public void setup(Mapper<Text, CrawlDatum, Text, CrawlDatum>.Context context) {\n       sample = config.getFloat(\"sample\", 1);\n     }\n \n-    public void close() {\n-    }\n-\n+    @Override\n     public void map(Text key, CrawlDatum value,\n         Context context)\n         throws IOException, InterruptedException {",
                "deletions": 33
            },
            {
                "sha": "2d1160234f9be09198196b7374c1bd41f5c9805c",
                "filename": "src/java/org/apache/nutch/crawl/LinkDb.java",
                "blob_url": "https://github.com/apache/nutch/blob/39da8c1addd3400e755f98a6947004f8c8f3d15f/src/java/org/apache/nutch/crawl/LinkDb.java",
                "raw_url": "https://github.com/apache/nutch/raw/39da8c1addd3400e755f98a6947004f8c8f3d15f/src/java/org/apache/nutch/crawl/LinkDb.java",
                "status": "modified",
                "changes": 3,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/crawl/LinkDb.java?ref=39da8c1addd3400e755f98a6947004f8c8f3d15f",
                "patch": "@@ -99,9 +99,6 @@ public void setup(Mapper<Text, ParseData, Text, Inlinks>.Context context) {\n       }\n     } \n \n-    public void cleanup(){\n-    }\n-\n     public void map(Text key, ParseData parseData,\n             Context context)\n                     throws IOException, InterruptedException {",
                "deletions": 3
            },
            {
                "sha": "9ee57ba1e88224b6c8a3f8310949cbb4e360b27b",
                "filename": "src/java/org/apache/nutch/crawl/LinkDbReader.java",
                "blob_url": "https://github.com/apache/nutch/blob/39da8c1addd3400e755f98a6947004f8c8f3d15f/src/java/org/apache/nutch/crawl/LinkDbReader.java",
                "raw_url": "https://github.com/apache/nutch/raw/39da8c1addd3400e755f98a6947004f8c8f3d15f/src/java/org/apache/nutch/crawl/LinkDbReader.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/crawl/LinkDbReader.java?ref=39da8c1addd3400e755f98a6947004f8c8f3d15f",
                "patch": "@@ -109,15 +109,15 @@ public void close() throws IOException {\n     Pattern pattern = null;\n     Matcher matcher = null;\n     \n+    @Override\n     public void setup(Mapper<Text, Inlinks, Text, Inlinks>.Context context) {\n       Configuration conf = context.getConfiguration();\n       if (conf.get(\"linkdb.regex\", null) != null) {\n         pattern = Pattern.compile(conf.get(\"linkdb.regex\"));\n       }\n     }\n \n-    public void cleanup() {}\n-\n+    @Override\n     public void map(Text key, Inlinks value, Context context)\n             throws IOException, InterruptedException {\n ",
                "deletions": 2
            },
            {
                "sha": "15a7e3793076e04745b0530fc88aee394dfb527d",
                "filename": "src/java/org/apache/nutch/hostdb/UpdateHostDbMapper.java",
                "blob_url": "https://github.com/apache/nutch/blob/39da8c1addd3400e755f98a6947004f8c8f3d15f/src/java/org/apache/nutch/hostdb/UpdateHostDbMapper.java",
                "raw_url": "https://github.com/apache/nutch/raw/39da8c1addd3400e755f98a6947004f8c8f3d15f/src/java/org/apache/nutch/hostdb/UpdateHostDbMapper.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/hostdb/UpdateHostDbMapper.java?ref=39da8c1addd3400e755f98a6947004f8c8f3d15f",
                "patch": "@@ -58,11 +58,10 @@\n   protected URLFilters filters = null;\n   protected URLNormalizers normalizers = null;\n \n-  public void cleanup() {}\n-\n   /**\n    * @param job\n    */\n+  @Override\n   public void setup(Mapper<Text, Writable, Text, NutchWritable>.Context context) {\n     Configuration conf = context.getConfiguration();\n     readingCrawlDb = conf.getBoolean(\"hostdb.reading.crawldb\", false);\n@@ -110,6 +109,7 @@ protected String filterNormalize(String url) {\n     * @param value\n     * @param context\n     */\n+  @Override\n   public void map(Text key, Writable value,\n     Context context)\n     throws IOException, InterruptedException {",
                "deletions": 2
            },
            {
                "sha": "70ce3eb3d0bd34911559072ab5db26c58bb731a6",
                "filename": "src/java/org/apache/nutch/hostdb/UpdateHostDbReducer.java",
                "blob_url": "https://github.com/apache/nutch/blob/39da8c1addd3400e755f98a6947004f8c8f3d15f/src/java/org/apache/nutch/hostdb/UpdateHostDbReducer.java",
                "raw_url": "https://github.com/apache/nutch/raw/39da8c1addd3400e755f98a6947004f8c8f3d15f/src/java/org/apache/nutch/hostdb/UpdateHostDbReducer.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/hostdb/UpdateHostDbReducer.java?ref=39da8c1addd3400e755f98a6947004f8c8f3d15f",
                "patch": "@@ -74,6 +74,7 @@\n     *\n     * @param job\n     */\n+  @Override\n   public void setup(Reducer<Text, NutchWritable, Text, HostDatum>.Context context) {\n     Configuration conf = context.getConfiguration();\n     purgeFailedHostsThreshold = conf.getInt(UpdateHostDb.HOSTDB_PURGE_FAILED_HOSTS_THRESHOLD, -1);\n@@ -113,6 +114,7 @@ public void setup(Reducer<Text, NutchWritable, Text, HostDatum>.Context context)\n   /**\n     *\n     */\n+  @Override\n   public void reduce(Text key, Iterable<NutchWritable> values,\n     Context context) throws IOException, InterruptedException {\n \n@@ -401,7 +403,8 @@ protected boolean isEligibleForCheck(HostDatum datum) {\n   /**\n     * Shut down all running threads and wait for completion.\n     */\n-  public void cleanup() {\n+  @Override\n+  public void cleanup(Context context) {\n     LOG.info(\"UpdateHostDb: feeder finished, waiting for shutdown\");\n \n     // If we're here all keys have been fed and we can issue a shut down",
                "deletions": 1
            },
            {
                "sha": "7a0f70e7803347b6b27ec2e94e1f0519b8310e11",
                "filename": "src/java/org/apache/nutch/indexer/CleaningJob.java",
                "blob_url": "https://github.com/apache/nutch/blob/39da8c1addd3400e755f98a6947004f8c8f3d15f/src/java/org/apache/nutch/indexer/CleaningJob.java",
                "raw_url": "https://github.com/apache/nutch/raw/39da8c1addd3400e755f98a6947004f8c8f3d15f/src/java/org/apache/nutch/indexer/CleaningJob.java",
                "status": "modified",
                "changes": 11,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/indexer/CleaningJob.java?ref=39da8c1addd3400e755f98a6947004f8c8f3d15f",
                "patch": "@@ -64,12 +64,6 @@ public void setConf(Configuration conf) {\n       Mapper<Text, CrawlDatum, ByteWritable, Text> {\n     private ByteWritable OUT = new ByteWritable(CrawlDatum.STATUS_DB_GONE);\n \n-    public void setup(Mapper<Text, CrawlDatum, ByteWritable, Text>.Context context) {\n-    }\n-\n-    public void cleanup() throws IOException {\n-    }\n-\n     @Override\n     public void map(Text key, CrawlDatum value,\n         Context context) throws IOException, InterruptedException {\n@@ -91,6 +85,7 @@ public void map(Text key, CrawlDatum value,\n \n     IndexWriters writers = null;\n \n+    @Override\n     public void setup(Reducer<ByteWritable, Text, Text, ByteWritable>.Context context) {\n       Configuration conf = context.getConfiguration();\n       writers = IndexWriters.get(conf);\n@@ -102,7 +97,8 @@ public void setup(Reducer<ByteWritable, Text, Text, ByteWritable>.Context contex\n       noCommit = conf.getBoolean(\"noCommit\", false);\n     }\n \n-    public void cleanup() throws IOException {\n+    @Override\n+    public void cleanup(Context context) throws IOException {\n       // BUFFERING OF CALLS TO INDEXER SHOULD BE HANDLED AT INDEXER LEVEL\n       // if (numDeletes > 0) {\n       // LOG.info(\"CleaningJob: deleting \" + numDeletes + \" documents\");\n@@ -119,6 +115,7 @@ public void cleanup() throws IOException {\n       LOG.info(\"CleaningJob: deleted a total of \" + totalDeleted + \" documents\");\n     }\n \n+    @Override\n     public void reduce(ByteWritable key, Iterable<Text> values,\n         Context context) throws IOException {\n       for (Text document : values) {",
                "deletions": 7
            },
            {
                "sha": "71fe42f529fd36bcfb81b925f7f2c97323f99952",
                "filename": "src/java/org/apache/nutch/scoring/webgraph/LinkDumper.java",
                "blob_url": "https://github.com/apache/nutch/blob/39da8c1addd3400e755f98a6947004f8c8f3d15f/src/java/org/apache/nutch/scoring/webgraph/LinkDumper.java",
                "raw_url": "https://github.com/apache/nutch/raw/39da8c1addd3400e755f98a6947004f8c8f3d15f/src/java/org/apache/nutch/scoring/webgraph/LinkDumper.java",
                "status": "modified",
                "changes": 3,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/scoring/webgraph/LinkDumper.java?ref=39da8c1addd3400e755f98a6947004f8c8f3d15f",
                "patch": "@@ -272,9 +272,6 @@ public void reduce(Text key, Iterable<ObjectWritable> values,\n         }\n       }\n     }\n-\n-    public void cleanup() {\n-    }\n   }\n \n   /**",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "NUTCH-2533 Injector: NullPointerException if seed URL dir contains non-file entries\n- read directory explicitely and log all non-file entries\n- exit early if no seed URL files are present",
        "commit": "https://github.com/apache/nutch/commit/5781fce1b81d1f7d7de911950743c17dd9b64126",
        "parent": "https://github.com/apache/nutch/commit/666022d67ff0e3694540e4b97369cb73f1dfa377",
        "bug_id": "nutch_10",
        "file": [
            {
                "sha": "1f30989052d57db6ed8e57abcc7719698a33e536",
                "filename": "src/java/org/apache/nutch/crawl/Injector.java",
                "blob_url": "https://github.com/apache/nutch/blob/5781fce1b81d1f7d7de911950743c17dd9b64126/src/java/org/apache/nutch/crawl/Injector.java",
                "raw_url": "https://github.com/apache/nutch/raw/5781fce1b81d1f7d7de911950743c17dd9b64126/src/java/org/apache/nutch/crawl/Injector.java",
                "status": "modified",
                "changes": 25,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/crawl/Injector.java?ref=5781fce1b81d1f7d7de911950743c17dd9b64126",
                "patch": "@@ -18,6 +18,7 @@\n package org.apache.nutch.crawl;\n \n import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n import org.apache.hadoop.fs.FileSystem;\n import org.apache.hadoop.fs.Path;\n import org.apache.hadoop.io.FloatWritable;\n@@ -41,6 +42,7 @@\n import org.apache.nutch.scoring.ScoringFilterException;\n import org.apache.nutch.scoring.ScoringFilters;\n import org.apache.nutch.service.NutchServer;\n+import org.apache.nutch.util.LockUtil;\n import org.apache.nutch.util.NutchConfiguration;\n import org.apache.nutch.util.NutchJob;\n import org.apache.nutch.util.NutchTool;\n@@ -409,7 +411,24 @@ public void inject(Path crawlDb, Path urlDir, boolean overwrite,\n \n     // set input and output paths of the job\n     MultipleInputs.addInputPath(job, current, SequenceFileInputFormat.class);\n-    MultipleInputs.addInputPath(job, urlDir, KeyValueTextInputFormat.class);\n+    FileStatus[] seedFiles = urlDir.getFileSystem(getConf()).listStatus(urlDir);\n+    int numSeedFiles = 0;\n+    for (FileStatus seedFile : seedFiles) {\n+      if (seedFile.isFile()) {\n+        MultipleInputs.addInputPath(job, seedFile.getPath(),\n+            KeyValueTextInputFormat.class);\n+        numSeedFiles++;\n+        LOG.info(\"Injecting seed URL file {}\", seedFile.getPath());\n+      } else {\n+        LOG.warn(\"Skipped non-file input in {}: {}\", urlDir,\n+            seedFile.getPath());\n+      }\n+    }\n+    if (numSeedFiles == 0) {\n+      LOG.error(\"No seed files to inject found in {}\", urlDir);\n+      LockUtil.removeLockFile(fs, lock);\n+      return;\n+    }\n     FileOutputFormat.setOutputPath(job, tempCrawlDb);\n \n     try {\n@@ -461,8 +480,8 @@ public void inject(Path crawlDb, Path urlDir, boolean overwrite,\n         LOG.info(\"Injector: finished at \" + sdf.format(end) + \", elapsed: \"\n             + TimingUtil.elapsedTime(start, end));\n       }\n-    } catch (IOException | InterruptedException | ClassNotFoundException e) {\n-      LOG.error(\"Injector job failed\", e);\n+    } catch (IOException | InterruptedException | ClassNotFoundException | NullPointerException e) {\n+      LOG.error(\"Injector job failed: {}\", e.getMessage());\n       NutchJob.cleanupAfterFailure(tempCrawlDb, lock, fs);\n       throw e;\n     }",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "Merge pull request #324 from sebastian-nagel/NUTCH-2526-fix-scoring-filters-crawldb-datum-null\n\nNUTCH-2526 NPE in scoring-opic when indexing document without CrawlDb datum",
        "commit": "https://github.com/apache/nutch/commit/d67c34608378c816ea8b2bdbc9d71cb928879976",
        "parent": "https://github.com/apache/nutch/commit/525cbafe724ce9ea78d362faf09533d6678bc1ab",
        "bug_id": "nutch_11",
        "file": [
            {
                "sha": "2941980f2427d80a65f4fd0c777312a5f7d2628a",
                "filename": "src/java/org/apache/nutch/scoring/ScoringFilter.java",
                "blob_url": "https://github.com/apache/nutch/blob/d67c34608378c816ea8b2bdbc9d71cb928879976/src/java/org/apache/nutch/scoring/ScoringFilter.java",
                "raw_url": "https://github.com/apache/nutch/raw/d67c34608378c816ea8b2bdbc9d71cb928879976/src/java/org/apache/nutch/scoring/ScoringFilter.java",
                "status": "modified",
                "changes": 19,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/scoring/ScoringFilter.java?ref=d67c34608378c816ea8b2bdbc9d71cb928879976",
                "patch": "@@ -193,17 +193,22 @@ public default void orphanedScore(Text url, CrawlDatum datum)\n   }\n \n   /**\n-   * This method calculates a Lucene document boost.\n+   * This method calculates a indexed document score/boost.\n    * \n    * @param url\n    *          url of the page\n    * @param doc\n-   *          Lucene document. NOTE: this already contains all information\n+   *          indexed document. NOTE: this already contains all information\n    *          collected by indexing filters. Implementations may modify this\n    *          instance, in order to store/remove some information.\n    * @param dbDatum\n-   *          current page from CrawlDb. NOTE: changes made to this instance are\n-   *          not persisted.\n+   *          current page from CrawlDb. NOTE:\n+   *          <ul>\n+   *          <li>changes made to this instance are not persisted</li>\n+   *          <li>may be null if indexing is done without CrawlDb or if the\n+   *          segment is generated not from the CrawlDb (via\n+   *          FreeGenerator).</li>\n+   *          </ul>\n    * @param fetchDatum\n    *          datum from FetcherOutput (containing among others the fetching\n    *          status)\n@@ -214,10 +219,10 @@ public default void orphanedScore(Text url, CrawlDatum datum)\n    *          current inlinks from LinkDb. NOTE: changes made to this instance\n    *          are not persisted.\n    * @param initScore\n-   *          initial boost value for the Lucene document.\n-   * @return boost value for the Lucene document. This value is passed as an\n+   *          initial boost value for the indexed document.\n+   * @return boost value for the indexed document. This value is passed as an\n    *         argument to the next scoring filter in chain. NOTE: implementations\n-   *         may also express other scoring strategies by modifying Lucene\n+   *         may also express other scoring strategies by modifying the indexed\n    *         document directly.\n    * @throws ScoringFilterException\n    */",
                "deletions": 7
            },
            {
                "sha": "c98ccce441f54eb79eb2edb57be92150f13edf02",
                "filename": "src/plugin/scoring-link/src/java/org/apache/nutch/scoring/link/LinkAnalysisScoringFilter.java",
                "blob_url": "https://github.com/apache/nutch/blob/d67c34608378c816ea8b2bdbc9d71cb928879976/src/plugin/scoring-link/src/java/org/apache/nutch/scoring/link/LinkAnalysisScoringFilter.java",
                "raw_url": "https://github.com/apache/nutch/raw/d67c34608378c816ea8b2bdbc9d71cb928879976/src/plugin/scoring-link/src/java/org/apache/nutch/scoring/link/LinkAnalysisScoringFilter.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/plugin/scoring-link/src/java/org/apache/nutch/scoring/link/LinkAnalysisScoringFilter.java?ref=d67c34608378c816ea8b2bdbc9d71cb928879976",
                "patch": "@@ -36,6 +36,7 @@\n \n   private Configuration conf;\n   private float normalizedScore = 1.00f;\n+  private float initialScore = 0.0f;\n \n   public LinkAnalysisScoringFilter() {\n \n@@ -64,12 +65,15 @@ public float generatorSortValue(Text url, CrawlDatum datum, float initSort)\n   public float indexerScore(Text url, NutchDocument doc, CrawlDatum dbDatum,\n       CrawlDatum fetchDatum, Parse parse, Inlinks inlinks, float initScore)\n       throws ScoringFilterException {\n+    if (dbDatum == null) {\n+      return initScore;\n+    }\n     return (normalizedScore * dbDatum.getScore());\n   }\n \n   public void initialScore(Text url, CrawlDatum datum)\n       throws ScoringFilterException {\n-    datum.setScore(0.0f);\n+    datum.setScore(initialScore);\n   }\n \n   public void injectedScore(Text url, CrawlDatum datum)",
                "deletions": 1
            },
            {
                "sha": "5a080bed2fd470a27d6776afbe19071bfdb48c6c",
                "filename": "src/plugin/scoring-opic/src/java/org/apache/nutch/scoring/opic/OPICScoringFilter.java",
                "blob_url": "https://github.com/apache/nutch/blob/d67c34608378c816ea8b2bdbc9d71cb928879976/src/plugin/scoring-opic/src/java/org/apache/nutch/scoring/opic/OPICScoringFilter.java",
                "raw_url": "https://github.com/apache/nutch/raw/d67c34608378c816ea8b2bdbc9d71cb928879976/src/plugin/scoring-opic/src/java/org/apache/nutch/scoring/opic/OPICScoringFilter.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/plugin/scoring-opic/src/java/org/apache/nutch/scoring/opic/OPICScoringFilter.java?ref=d67c34608378c816ea8b2bdbc9d71cb928879976",
                "patch": "@@ -167,6 +167,9 @@ public CrawlDatum distributeScoreToOutlinks(Text fromUrl,\n   public float indexerScore(Text url, NutchDocument doc, CrawlDatum dbDatum,\n       CrawlDatum fetchDatum, Parse parse, Inlinks inlinks, float initScore)\n       throws ScoringFilterException {\n+    if (dbDatum == null) {\n+      return initScore;\n+    }\n     return (float) Math.pow(dbDatum.getScore(), scorePower) * initScore;\n   }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "NUTCH-2349 urlnormalizer-basic: NPE for URLs without authority\nMerge branch 'NUTCH-2349-basic-url-normalizer-npe' of https://github.com/sebastian-nagel/nutch, this closes #169",
        "commit": "https://github.com/apache/nutch/commit/76aedcb780c88344966f47536274ecb001682291",
        "parent": "https://github.com/apache/nutch/commit/2b93a66f0472e93223c69053d5482dcbef26de6d",
        "bug_id": "nutch_12",
        "file": [
            {
                "sha": "ffd22cee0eadd5f5d3fafb6148ba48b1f523f035",
                "filename": "src/plugin/urlnormalizer-basic/src/java/org/apache/nutch/net/urlnormalizer/basic/BasicURLNormalizer.java",
                "blob_url": "https://github.com/apache/nutch/blob/76aedcb780c88344966f47536274ecb001682291/src/plugin/urlnormalizer-basic/src/java/org/apache/nutch/net/urlnormalizer/basic/BasicURLNormalizer.java",
                "raw_url": "https://github.com/apache/nutch/raw/76aedcb780c88344966f47536274ecb001682291/src/plugin/urlnormalizer-basic/src/java/org/apache/nutch/net/urlnormalizer/basic/BasicURLNormalizer.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/plugin/urlnormalizer-basic/src/java/org/apache/nutch/net/urlnormalizer/basic/BasicURLNormalizer.java?ref=76aedcb780c88344966f47536274ecb001682291",
                "patch": "@@ -112,7 +112,7 @@ public String normalize(String urlString, String scope)\n     if (\"http\".equals(protocol) || \"https\".equals(protocol)\n         || \"ftp\".equals(protocol)) {\n \n-      if (host != null) {\n+      if (host != null && url.getAuthority() != null) {\n         String newHost = host.toLowerCase(Locale.ROOT); // lowercase host\n         if (!host.equals(newHost)) {\n           host = newHost;\n@@ -122,6 +122,9 @@ public String normalize(String urlString, String scope)\n           // etc.) which will likely cause a change if left away\n           changed = true;\n         }\n+      } else {\n+        // no host or authority: recompose the URL from components\n+        changed = true;\n       }\n \n       if (port == url.getDefaultPort()) { // uses default port",
                "deletions": 1
            },
            {
                "sha": "2625ea3e4a3e895c7f55c42c92bb7ea7e084565e",
                "filename": "src/plugin/urlnormalizer-basic/src/test/org/apache/nutch/net/urlnormalizer/basic/TestBasicURLNormalizer.java",
                "blob_url": "https://github.com/apache/nutch/blob/76aedcb780c88344966f47536274ecb001682291/src/plugin/urlnormalizer-basic/src/test/org/apache/nutch/net/urlnormalizer/basic/TestBasicURLNormalizer.java",
                "raw_url": "https://github.com/apache/nutch/raw/76aedcb780c88344966f47536274ecb001682291/src/plugin/urlnormalizer-basic/src/test/org/apache/nutch/net/urlnormalizer/basic/TestBasicURLNormalizer.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/plugin/urlnormalizer-basic/src/test/org/apache/nutch/net/urlnormalizer/basic/TestBasicURLNormalizer.java?ref=76aedcb780c88344966f47536274ecb001682291",
                "patch": "@@ -164,6 +164,12 @@ public void testNormalizer() throws Exception {\n         \"http://foo.com/aa/bb/foo.html\");\n     normalizeTest(\"http://foo.com/aa?referer=http://bar.com\",\n         \"http://foo.com/aa?referer=http://bar.com\");\n+    // check for NPEs when normalizing URLs without host (authority)\n+    normalizeTest(\"file:///foo/bar.txt\", \"file:///foo/bar.txt\");\n+    normalizeTest(\"ftp:/\", \"ftp:/\");\n+    normalizeTest(\"http:\", \"http:/\");\n+    normalizeTest(\"http:////\", \"http:/\");\n+    normalizeTest(\"http:///////\", \"http:/\");\n   }\n \n   private void normalizeTest(String weird, String normal) throws Exception {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "NUTCH-2394 Fix of bugs detected by static code analysis\n- String.trim() without assignment\n- avoid strings to fail as regex.Pattern\n- possible NPE in URLPartitioner: reworked code",
        "commit": "https://github.com/apache/nutch/commit/63037c71370cad1eba4152668f33b184c686d092",
        "parent": "https://github.com/apache/nutch/commit/4cfec6e327702704527ef9162c9e4823041ee5d1",
        "bug_id": "nutch_13",
        "file": [
            {
                "sha": "23a3eb08030a77548ba7b257a469cacfc9248fa9",
                "filename": "src/java/org/apache/nutch/crawl/URLPartitioner.java",
                "blob_url": "https://github.com/apache/nutch/blob/63037c71370cad1eba4152668f33b184c686d092/src/java/org/apache/nutch/crawl/URLPartitioner.java",
                "raw_url": "https://github.com/apache/nutch/raw/63037c71370cad1eba4152668f33b184c686d092/src/java/org/apache/nutch/crawl/URLPartitioner.java",
                "status": "modified",
                "changes": 14,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/crawl/URLPartitioner.java?ref=63037c71370cad1eba4152668f33b184c686d092",
                "patch": "@@ -63,23 +63,27 @@ public void configure(JobConf job) {\n   public void close() {\n   }\n \n-  /** Hash by domain name. */\n+  /** Hash by host or domain name or IP address. */\n   public int getPartition(Text key, Writable value, int numReduceTasks) {\n     String urlString = key.toString();\n     URL url = null;\n-    int hashCode = urlString.hashCode();\n+    int hashCode;\n     try {\n       urlString = normalizers.normalize(urlString,\n           URLNormalizers.SCOPE_PARTITION);\n       url = new URL(urlString);\n-      hashCode = url.getHost().hashCode();\n     } catch (MalformedURLException e) {\n       LOG.warn(\"Malformed URL: '\" + urlString + \"'\");\n     }\n \n-    if (mode.equals(PARTITION_MODE_DOMAIN) && url != null)\n+    if (url == null) {\n+      // failed to parse URL, must take URL string as fall-back\n+      hashCode = urlString.hashCode();\n+    } else if (mode.equals(PARTITION_MODE_HOST)) {\n+      hashCode = url.getHost().hashCode();\n+    } else if (mode.equals(PARTITION_MODE_DOMAIN)) {\n       hashCode = URLUtil.getDomainName(url).hashCode();\n-    else if (mode.equals(PARTITION_MODE_IP)) {\n+    } else if (mode.equals(PARTITION_MODE_IP)) {\n       try {\n         InetAddress address = InetAddress.getByName(url.getHost());\n         hashCode = address.getHostAddress().hashCode();",
                "deletions": 5
            },
            {
                "sha": "107ec1c5250be5d7f1c98efa93edd4dadc5d16e5",
                "filename": "src/java/org/apache/nutch/tools/CommonCrawlDataDumper.java",
                "blob_url": "https://github.com/apache/nutch/blob/63037c71370cad1eba4152668f33b184c686d092/src/java/org/apache/nutch/tools/CommonCrawlDataDumper.java",
                "raw_url": "https://github.com/apache/nutch/raw/63037c71370cad1eba4152668f33b184c686d092/src/java/org/apache/nutch/tools/CommonCrawlDataDumper.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/tools/CommonCrawlDataDumper.java?ref=63037c71370cad1eba4152668f33b184c686d092",
                "patch": "@@ -38,6 +38,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.regex.Pattern;\n \n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.CommandLineParser;\n@@ -342,7 +343,8 @@ public void dump(File outputDir, File segmentRootDir, File linkdb, boolean gzip,\n                   .createFileName(md5Ofurl, baseName, extensionName);\n               outputFullPath = String.format(\"%s/%s\", fullDir, filename);\n \n-              String[] fullPathLevels = fullDir.split(File.separator);\n+              String[] fullPathLevels = fullDir\n+                  .split(Pattern.quote(File.separator));\n               String firstLevelDirName = fullPathLevels[fullPathLevels.length\n                   - 2];\n               String secondLevelDirName = fullPathLevels[fullPathLevels.length",
                "deletions": 1
            },
            {
                "sha": "26a7df2c65c93cad9e128e013853ac75c7dbeebb",
                "filename": "src/plugin/index-more/src/java/org/apache/nutch/indexer/more/MoreIndexingFilter.java",
                "blob_url": "https://github.com/apache/nutch/blob/63037c71370cad1eba4152668f33b184c686d092/src/plugin/index-more/src/java/org/apache/nutch/indexer/more/MoreIndexingFilter.java",
                "raw_url": "https://github.com/apache/nutch/raw/63037c71370cad1eba4152668f33b184c686d092/src/plugin/index-more/src/java/org/apache/nutch/indexer/more/MoreIndexingFilter.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/plugin/index-more/src/java/org/apache/nutch/indexer/more/MoreIndexingFilter.java?ref=63037c71370cad1eba4152668f33b184c686d092",
                "patch": "@@ -324,7 +324,7 @@ private void readConfiguration() throws IOException {\n \n     while ((line = reader.readLine()) != null) {\n       if (StringUtils.isNotBlank(line) && !line.startsWith(\"#\")) {\n-        line.trim();\n+        line = line.trim();\n         parts = line.split(\"\\t\");\n \n         // Must be at least two parts",
                "deletions": 1
            },
            {
                "sha": "6cb9cf8d1f6e296f8cf766b65bf57fbe32282065",
                "filename": "src/plugin/indexer-elastic/src/java/org/apache/nutch/indexwriter/elastic/ElasticIndexWriter.java",
                "blob_url": "https://github.com/apache/nutch/blob/63037c71370cad1eba4152668f33b184c686d092/src/plugin/indexer-elastic/src/java/org/apache/nutch/indexwriter/elastic/ElasticIndexWriter.java",
                "raw_url": "https://github.com/apache/nutch/raw/63037c71370cad1eba4152668f33b184c686d092/src/plugin/indexer-elastic/src/java/org/apache/nutch/indexwriter/elastic/ElasticIndexWriter.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/plugin/indexer-elastic/src/java/org/apache/nutch/indexwriter/elastic/ElasticIndexWriter.java?ref=63037c71370cad1eba4152668f33b184c686d092",
                "patch": "@@ -114,7 +114,7 @@ protected Client makeClient(Configuration conf) throws IOException {\n     String parts[];\n     while ((line = reader.readLine()) != null) {\n       if (StringUtils.isNotBlank(line) && !line.startsWith(\"#\")) {\n-        line.trim();\n+        line = line.trim();\n         parts = line.split(\"=\");\n \n         if (parts.length == 2) {",
                "deletions": 1
            },
            {
                "sha": "86f58e4ac86ef545ce2b42ace0418d11afb0b361",
                "filename": "src/plugin/urlnormalizer-host/src/java/org/apache/nutch/net/urlnormalizer/host/HostURLNormalizer.java",
                "blob_url": "https://github.com/apache/nutch/blob/63037c71370cad1eba4152668f33b184c686d092/src/plugin/urlnormalizer-host/src/java/org/apache/nutch/net/urlnormalizer/host/HostURLNormalizer.java",
                "raw_url": "https://github.com/apache/nutch/raw/63037c71370cad1eba4152668f33b184c686d092/src/plugin/urlnormalizer-host/src/java/org/apache/nutch/net/urlnormalizer/host/HostURLNormalizer.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/plugin/urlnormalizer-host/src/java/org/apache/nutch/net/urlnormalizer/host/HostURLNormalizer.java?ref=63037c71370cad1eba4152668f33b184c686d092",
                "patch": "@@ -76,7 +76,7 @@ private synchronized void readConfiguration(Reader configReader)\n \n     while ((line = reader.readLine()) != null) {\n       if (StringUtils.isNotBlank(line) && !line.startsWith(\"#\")) {\n-        line.trim();\n+        line = line.trim();\n         delimiterIndex = line.indexOf(\" \");\n \n         host = line.substring(0, delimiterIndex);",
                "deletions": 1
            },
            {
                "sha": "73067462d7bc96237bfb52f4d8d6812e6d252d5a",
                "filename": "src/plugin/urlnormalizer-protocol/src/java/org/apache/nutch/net/urlnormalizer/protocol/ProtocolURLNormalizer.java",
                "blob_url": "https://github.com/apache/nutch/blob/63037c71370cad1eba4152668f33b184c686d092/src/plugin/urlnormalizer-protocol/src/java/org/apache/nutch/net/urlnormalizer/protocol/ProtocolURLNormalizer.java",
                "raw_url": "https://github.com/apache/nutch/raw/63037c71370cad1eba4152668f33b184c686d092/src/plugin/urlnormalizer-protocol/src/java/org/apache/nutch/net/urlnormalizer/protocol/ProtocolURLNormalizer.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/plugin/urlnormalizer-protocol/src/java/org/apache/nutch/net/urlnormalizer/protocol/ProtocolURLNormalizer.java?ref=63037c71370cad1eba4152668f33b184c686d092",
                "patch": "@@ -75,7 +75,7 @@ private synchronized void readConfiguration(Reader configReader) throws IOExcept\n \n     while ((line = reader.readLine()) != null) {\n       if (StringUtils.isNotBlank(line) && !line.startsWith(\"#\")) {\n-        line.trim();\n+        line = line.trim();\n         delimiterIndex = line.indexOf(\" \");\n         // try tabulator\n         if (delimiterIndex == -1) {",
                "deletions": 1
            },
            {
                "sha": "c4f68ef20c337453f4ca92239310028a67e4769d",
                "filename": "src/plugin/urlnormalizer-slash/src/java/org/apache/nutch/net/urlnormalizer/slash/SlashURLNormalizer.java",
                "blob_url": "https://github.com/apache/nutch/blob/63037c71370cad1eba4152668f33b184c686d092/src/plugin/urlnormalizer-slash/src/java/org/apache/nutch/net/urlnormalizer/slash/SlashURLNormalizer.java",
                "raw_url": "https://github.com/apache/nutch/raw/63037c71370cad1eba4152668f33b184c686d092/src/plugin/urlnormalizer-slash/src/java/org/apache/nutch/net/urlnormalizer/slash/SlashURLNormalizer.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/plugin/urlnormalizer-slash/src/java/org/apache/nutch/net/urlnormalizer/slash/SlashURLNormalizer.java?ref=63037c71370cad1eba4152668f33b184c686d092",
                "patch": "@@ -77,7 +77,7 @@ private synchronized void readConfiguration(Reader configReader) throws IOExcept\n \n     while ((line = reader.readLine()) != null) {\n       if (StringUtils.isNotBlank(line) && !line.startsWith(\"#\")) {\n-        line.trim();\n+        line = line.trim();\n         delimiterIndex = line.indexOf(\" \");\n         // try tabulator\n         if (delimiterIndex == -1) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "NUTCH-2526 NPE in scoring-opic when indexing document without CrawlDb datum\n- fix scoring-opic and scoring-link\n- check whether CrawlDb datum is null before reading its score\n  (after NUTCH-2456 which allows to index pages/URLs not contained in CrawlDb)\n- complete Java doc",
        "commit": "https://github.com/apache/nutch/commit/90ae2d1f9159c3d30d5a937252f2bbb00e2110e4",
        "parent": "https://github.com/apache/nutch/commit/23f105533e96ac0cd98d8a5a949f6da4bab7f9f4",
        "bug_id": "nutch_14",
        "file": [
            {
                "sha": "2941980f2427d80a65f4fd0c777312a5f7d2628a",
                "filename": "src/java/org/apache/nutch/scoring/ScoringFilter.java",
                "blob_url": "https://github.com/apache/nutch/blob/90ae2d1f9159c3d30d5a937252f2bbb00e2110e4/src/java/org/apache/nutch/scoring/ScoringFilter.java",
                "raw_url": "https://github.com/apache/nutch/raw/90ae2d1f9159c3d30d5a937252f2bbb00e2110e4/src/java/org/apache/nutch/scoring/ScoringFilter.java",
                "status": "modified",
                "changes": 19,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/scoring/ScoringFilter.java?ref=90ae2d1f9159c3d30d5a937252f2bbb00e2110e4",
                "patch": "@@ -193,17 +193,22 @@ public default void orphanedScore(Text url, CrawlDatum datum)\n   }\n \n   /**\n-   * This method calculates a Lucene document boost.\n+   * This method calculates a indexed document score/boost.\n    * \n    * @param url\n    *          url of the page\n    * @param doc\n-   *          Lucene document. NOTE: this already contains all information\n+   *          indexed document. NOTE: this already contains all information\n    *          collected by indexing filters. Implementations may modify this\n    *          instance, in order to store/remove some information.\n    * @param dbDatum\n-   *          current page from CrawlDb. NOTE: changes made to this instance are\n-   *          not persisted.\n+   *          current page from CrawlDb. NOTE:\n+   *          <ul>\n+   *          <li>changes made to this instance are not persisted</li>\n+   *          <li>may be null if indexing is done without CrawlDb or if the\n+   *          segment is generated not from the CrawlDb (via\n+   *          FreeGenerator).</li>\n+   *          </ul>\n    * @param fetchDatum\n    *          datum from FetcherOutput (containing among others the fetching\n    *          status)\n@@ -214,10 +219,10 @@ public default void orphanedScore(Text url, CrawlDatum datum)\n    *          current inlinks from LinkDb. NOTE: changes made to this instance\n    *          are not persisted.\n    * @param initScore\n-   *          initial boost value for the Lucene document.\n-   * @return boost value for the Lucene document. This value is passed as an\n+   *          initial boost value for the indexed document.\n+   * @return boost value for the indexed document. This value is passed as an\n    *         argument to the next scoring filter in chain. NOTE: implementations\n-   *         may also express other scoring strategies by modifying Lucene\n+   *         may also express other scoring strategies by modifying the indexed\n    *         document directly.\n    * @throws ScoringFilterException\n    */",
                "deletions": 7
            },
            {
                "sha": "c98ccce441f54eb79eb2edb57be92150f13edf02",
                "filename": "src/plugin/scoring-link/src/java/org/apache/nutch/scoring/link/LinkAnalysisScoringFilter.java",
                "blob_url": "https://github.com/apache/nutch/blob/90ae2d1f9159c3d30d5a937252f2bbb00e2110e4/src/plugin/scoring-link/src/java/org/apache/nutch/scoring/link/LinkAnalysisScoringFilter.java",
                "raw_url": "https://github.com/apache/nutch/raw/90ae2d1f9159c3d30d5a937252f2bbb00e2110e4/src/plugin/scoring-link/src/java/org/apache/nutch/scoring/link/LinkAnalysisScoringFilter.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/plugin/scoring-link/src/java/org/apache/nutch/scoring/link/LinkAnalysisScoringFilter.java?ref=90ae2d1f9159c3d30d5a937252f2bbb00e2110e4",
                "patch": "@@ -36,6 +36,7 @@\n \n   private Configuration conf;\n   private float normalizedScore = 1.00f;\n+  private float initialScore = 0.0f;\n \n   public LinkAnalysisScoringFilter() {\n \n@@ -64,12 +65,15 @@ public float generatorSortValue(Text url, CrawlDatum datum, float initSort)\n   public float indexerScore(Text url, NutchDocument doc, CrawlDatum dbDatum,\n       CrawlDatum fetchDatum, Parse parse, Inlinks inlinks, float initScore)\n       throws ScoringFilterException {\n+    if (dbDatum == null) {\n+      return initScore;\n+    }\n     return (normalizedScore * dbDatum.getScore());\n   }\n \n   public void initialScore(Text url, CrawlDatum datum)\n       throws ScoringFilterException {\n-    datum.setScore(0.0f);\n+    datum.setScore(initialScore);\n   }\n \n   public void injectedScore(Text url, CrawlDatum datum)",
                "deletions": 1
            },
            {
                "sha": "5a080bed2fd470a27d6776afbe19071bfdb48c6c",
                "filename": "src/plugin/scoring-opic/src/java/org/apache/nutch/scoring/opic/OPICScoringFilter.java",
                "blob_url": "https://github.com/apache/nutch/blob/90ae2d1f9159c3d30d5a937252f2bbb00e2110e4/src/plugin/scoring-opic/src/java/org/apache/nutch/scoring/opic/OPICScoringFilter.java",
                "raw_url": "https://github.com/apache/nutch/raw/90ae2d1f9159c3d30d5a937252f2bbb00e2110e4/src/plugin/scoring-opic/src/java/org/apache/nutch/scoring/opic/OPICScoringFilter.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/plugin/scoring-opic/src/java/org/apache/nutch/scoring/opic/OPICScoringFilter.java?ref=90ae2d1f9159c3d30d5a937252f2bbb00e2110e4",
                "patch": "@@ -167,6 +167,9 @@ public CrawlDatum distributeScoreToOutlinks(Text fromUrl,\n   public float indexerScore(Text url, NutchDocument doc, CrawlDatum dbDatum,\n       CrawlDatum fetchDatum, Parse parse, Inlinks inlinks, float initScore)\n       throws ScoringFilterException {\n+    if (dbDatum == null) {\n+      return initScore;\n+    }\n     return (float) Math.pow(dbDatum.getScore(), scorePower) * initScore;\n   }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "NUTCH-993 NullPointerException at FetcherOutputFormat.checkOutputSpecs\n\ngit-svn-id: https://svn.apache.org/repos/asf/nutch/branches/branch-1.4@1143411 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/32f7cafad67f096f25f01140614ab8906334bef4",
        "parent": "https://github.com/apache/nutch/commit/c21feba8d1b62a77d0f6277ba8ba2a3408c0311e",
        "bug_id": "nutch_15",
        "file": [
            {
                "sha": "1797f53c0d7b3294909f7bf08ca2f9af012a0874",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/nutch/blob/32f7cafad67f096f25f01140614ab8906334bef4/CHANGES.txt",
                "raw_url": "https://github.com/apache/nutch/raw/32f7cafad67f096f25f01140614ab8906334bef4/CHANGES.txt",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/CHANGES.txt?ref=32f7cafad67f096f25f01140614ab8906334bef4",
                "patch": "@@ -2,6 +2,8 @@ Nutch Change Log\n \n Release 1.4 - Current development\n \n+* NUTCH-993 NullPointerException at FetcherOutputFormat.checkOutputSpecs (Christian Guegi via jnioche)\n+\n * NUTCH-1013 Migrate RegexURLNormalizer from Apache ORO to java.util.regex (markus)\n \n * NUTCH-1016 Strip UTF-8 non-character codepoints and add logging for SolrWriter (markus)",
                "deletions": 0
            },
            {
                "sha": "a82ea2e79c555af1c601c79a9f573523b6834d71",
                "filename": "src/java/org/apache/nutch/fetcher/FetcherOutputFormat.java",
                "blob_url": "https://github.com/apache/nutch/blob/32f7cafad67f096f25f01140614ab8906334bef4/src/java/org/apache/nutch/fetcher/FetcherOutputFormat.java",
                "raw_url": "https://github.com/apache/nutch/raw/32f7cafad67f096f25f01140614ab8906334bef4/src/java/org/apache/nutch/fetcher/FetcherOutputFormat.java",
                "status": "modified",
                "changes": 10,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/fetcher/FetcherOutputFormat.java?ref=32f7cafad67f096f25f01140614ab8906334bef4",
                "patch": "@@ -30,6 +30,7 @@\n import org.apache.hadoop.io.SequenceFile.CompressionType;\n \n import org.apache.hadoop.mapred.FileOutputFormat;\n+import org.apache.hadoop.mapred.InvalidJobConfException;\n import org.apache.hadoop.mapred.OutputFormat;\n import org.apache.hadoop.mapred.RecordWriter;\n import org.apache.hadoop.mapred.JobConf;\n@@ -46,8 +47,15 @@\n \n   public void checkOutputSpecs(FileSystem fs, JobConf job) throws IOException {\n     Path out = FileOutputFormat.getOutputPath(job);\n+    if ((out == null) && (job.getNumReduceTasks() != 0)) {\n+    \tthrow new InvalidJobConfException(\n+    \t\t\t\"Output directory not set in JobConf.\");\n+    }\n+    if (fs == null) {\n+    \tfs = out.getFileSystem(job);\n+    }\n     if (fs.exists(new Path(out, CrawlDatum.FETCH_DIR_NAME)))\n-      throw new IOException(\"Segment already fetched!\");\n+    \tthrow new IOException(\"Segment already fetched!\");\n   }\n \n   public RecordWriter<Text, NutchWritable> getRecordWriter(final FileSystem fs,",
                "deletions": 1
            },
            {
                "sha": "09097aef5efbe1a80980b87598d92ed227851f1a",
                "filename": "src/java/org/apache/nutch/parse/ParseOutputFormat.java",
                "blob_url": "https://github.com/apache/nutch/blob/32f7cafad67f096f25f01140614ab8906334bef4/src/java/org/apache/nutch/parse/ParseOutputFormat.java",
                "raw_url": "https://github.com/apache/nutch/raw/32f7cafad67f096f25f01140614ab8906334bef4/src/java/org/apache/nutch/parse/ParseOutputFormat.java",
                "status": "modified",
                "changes": 13,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/parse/ParseOutputFormat.java?ref=32f7cafad67f096f25f01140614ab8906334bef4",
                "patch": "@@ -75,9 +75,16 @@ public CrawlDatum setValue(CrawlDatum value) {\n   }\n \n   public void checkOutputSpecs(FileSystem fs, JobConf job) throws IOException {\n-    Path out = FileOutputFormat.getOutputPath(job);\n-    if (fs.exists(new Path(out, CrawlDatum.PARSE_DIR_NAME)))\n-      throw new IOException(\"Segment already parsed!\");\n+      Path out = FileOutputFormat.getOutputPath(job);\n+      if ((out == null) && (job.getNumReduceTasks() != 0)) {\n+          throw new InvalidJobConfException(\n+                  \"Output directory not set in JobConf.\");\n+      }\n+      if (fs == null) {\n+          fs = out.getFileSystem(job);\n+      }\n+      if (fs.exists(new Path(out, CrawlDatum.PARSE_DIR_NAME)))\n+          throw new IOException(\"Segment already parsed!\");\n   }\n \n   public RecordWriter<Text, Parse> getRecordWriter(FileSystem fs, JobConf job,",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "No more NullPointerException while logging the doc language if none\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@264964 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/8dda2fc6f98a7ce3d82929f31a1fe4d59d130c09",
        "parent": "https://github.com/apache/nutch/commit/4e615c8c617d6e9fd8fe7a9e156a4d95846f7070",
        "bug_id": "nutch_16",
        "file": [
            {
                "sha": "5437a46e43e1987937a80fb60497f02c199b00d3",
                "filename": "src/java/org/apache/nutch/indexer/IndexSegment.java",
                "blob_url": "https://github.com/apache/nutch/blob/8dda2fc6f98a7ce3d82929f31a1fe4d59d130c09/src/java/org/apache/nutch/indexer/IndexSegment.java",
                "raw_url": "https://github.com/apache/nutch/raw/8dda2fc6f98a7ce3d82929f31a1fe4d59d130c09/src/java/org/apache/nutch/indexer/IndexSegment.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/indexer/IndexSegment.java?ref=8dda2fc6f98a7ce3d82929f31a1fe4d59d130c09",
                "patch": "@@ -145,8 +145,9 @@ public void indexPages() throws Exception {\n     \n               // add the document to the index\n               NutchAnalyzer analyzer = AnalyzerFactory.get(doc.get(\"lang\"));\n-              LOG.info(\" Indexing [\" + doc.getField(\"url\").stringValue() +\n-                       \"] with analyzer \" + analyzer + \" (\" + doc.getField(\"lang\").stringValue() + \")\");\n+              LOG.info(\" Indexing [\" + doc.getField(\"url\").stringValue() + \"]\" +\n+                       \" with analyzer \" + analyzer +\n+                       \" (\" + doc.get(\"lang\") + \")\");\n               //LOG.info(\" Doc is \" + doc);\n               writer.addDocument(doc, analyzer);\n               if (count > 0 && count % LOG_STEP == 0) {",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "Fix for NUTCH-2154 Nutch REST API (DB) suffering NullPointerException contributed by Sujen Shah.\n\ngit-svn-id: https://svn.apache.org/repos/asf/nutch/trunk@1711565 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/610acbf98b887752a0436a7eeba2bc67e886ed0d",
        "parent": "https://github.com/apache/nutch/commit/7906c269401170a8a498f8cb079eaf414180af93",
        "bug_id": "nutch_17",
        "file": [
            {
                "sha": "3427c3439ec45e1d846e6a2ac5eb1920617e5c04",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/nutch/blob/610acbf98b887752a0436a7eeba2bc67e886ed0d/CHANGES.txt",
                "raw_url": "https://github.com/apache/nutch/raw/610acbf98b887752a0436a7eeba2bc67e886ed0d/CHANGES.txt",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/CHANGES.txt?ref=610acbf98b887752a0436a7eeba2bc67e886ed0d",
                "patch": "@@ -3,6 +3,8 @@ Nutch Change Log\n Nutch 1.11 Release 25/10/2015 (dd/mm/yyyy)\n Release Report: http://s.apache.org/nutch11\n \n+* NUTCH-2154 Nutch REST API (DB) suffering NullPointerException (Aron Ahmadia, Sujen Shah via mattmann)\n+\n * NUTCH-2150 Add protocolstats utility (Michael Joyce via mattmann)\n \n * NUTCH-2146 hashCode on the Outlink class (jorgelbg via mattmann)",
                "deletions": 0
            },
            {
                "sha": "5d069dc20e251072a5469ddc69b19d14a03e88ab",
                "filename": "src/java/org/apache/nutch/service/model/request/DbQuery.java",
                "blob_url": "https://github.com/apache/nutch/blob/610acbf98b887752a0436a7eeba2bc67e886ed0d/src/java/org/apache/nutch/service/model/request/DbQuery.java",
                "raw_url": "https://github.com/apache/nutch/raw/610acbf98b887752a0436a7eeba2bc67e886ed0d/src/java/org/apache/nutch/service/model/request/DbQuery.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/service/model/request/DbQuery.java?ref=610acbf98b887752a0436a7eeba2bc67e886ed0d",
                "patch": "@@ -16,13 +16,14 @@\n  */\n package org.apache.nutch.service.model.request;\n \n+import java.util.HashMap;\n import java.util.Map;\n \n public class DbQuery {\n \n   private String confId;\n   private String type;\n-  private Map<String, String> args;\n+  private Map<String, String> args = new HashMap<String, String>();\n   private String crawlId;\n \n   public String getConfId() {",
                "deletions": 1
            },
            {
                "sha": "2672fcc98c73c36b76e7d49f52d776441d27c6ba",
                "filename": "src/java/org/apache/nutch/service/resources/DbResource.java",
                "blob_url": "https://github.com/apache/nutch/blob/610acbf98b887752a0436a7eeba2bc67e886ed0d/src/java/org/apache/nutch/service/resources/DbResource.java",
                "raw_url": "https://github.com/apache/nutch/raw/610acbf98b887752a0436a7eeba2bc67e886ed0d/src/java/org/apache/nutch/service/resources/DbResource.java",
                "status": "modified",
                "changes": 26,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/service/resources/DbResource.java?ref=610acbf98b887752a0436a7eeba2bc67e886ed0d",
                "patch": "@@ -30,6 +30,7 @@\n import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.Response.Status;\n \n import org.apache.hadoop.conf.Configuration;\n import org.apache.nutch.crawl.CrawlDbReader;\n@@ -44,8 +45,17 @@\n   @POST\n   @Path(value = \"/crawldb\")\n   @Consumes(MediaType.APPLICATION_JSON)\n-  public Object readdb(DbQuery dbQuery){\n+  public Response readdb(DbQuery dbQuery){\n+    if(dbQuery == null)\n+      return Response.status(Status.BAD_REQUEST).build();\n+    \n     Configuration conf = configManager.get(dbQuery.getConfId());\n+    if(conf == null){\n+      conf = configManager.get(ConfigResource.DEFAULT);\n+    }\n+    if(dbQuery.getCrawlId() == null || dbQuery.getType() == null){\n+      return Response.status(Status.BAD_REQUEST).build();\n+    }\n     String type = dbQuery.getType();\n \n     if(type.equalsIgnoreCase(\"stats\")){\n@@ -63,13 +73,13 @@ public Object readdb(DbQuery dbQuery){\n     return null;\n \n   }\t\n-  \n+\n   @GET\n   @Path(value=\"/fetchdb\")\n   public List<FetchNodeDbInfo> fetchDb(@DefaultValue(\"0\")@QueryParam(\"to\")int to, @DefaultValue(\"0\")@QueryParam(\"from\")int from){\n     List<FetchNodeDbInfo> listOfFetchedNodes = new ArrayList<FetchNodeDbInfo>();\n     Map<Integer, FetchNode> fetchNodedbMap = FetchNodeDb.getInstance().getFetchNodeDb();\n-    \n+\n     if(to ==0 || to>fetchNodedbMap.size()){\n       to = fetchNodedbMap.size();\n     }\n@@ -85,7 +95,7 @@ public Object readdb(DbQuery dbQuery){\n       fdbInfo.setChildNodes(node.getOutlinks());\n       listOfFetchedNodes.add(fdbInfo);\n     }\n-    \n+\n     return listOfFetchedNodes;\n   }\n   @SuppressWarnings(\"resource\")\n@@ -95,7 +105,7 @@ private Response crawlDbStats(Configuration conf, Map<String, String> args, Stri\n       return Response.ok(dbr.query(args, conf, \"stats\", crawlId)).build();\n     }catch(Exception e){\n       e.printStackTrace();\n-      return Response.serverError().entity(e.getMessage()).build();\n+      return Response.serverError().entity(e.getMessage()).type(MediaType.TEXT_PLAIN).build();\n     }\n   }\n \n@@ -106,7 +116,7 @@ private Response crawlDbDump(Configuration conf, Map<String, String> args, Strin\n       return Response.ok(dbr.query(args, conf, \"dump\", crawlId), MediaType.APPLICATION_OCTET_STREAM).build();\n     }catch(Exception e){\n       e.printStackTrace();\n-      return Response.serverError().entity(e.getMessage()).build();\n+      return Response.serverError().entity(e.getMessage()).type(MediaType.TEXT_PLAIN).build();\n     }\n   }\n \n@@ -117,7 +127,7 @@ private Response crawlDbTopN(Configuration conf, Map<String, String> args, Strin\n       return Response.ok(dbr.query(args, conf, \"topN\", crawlId), MediaType.APPLICATION_OCTET_STREAM).build();\n     }catch(Exception e){\n       e.printStackTrace();\n-      return Response.serverError().entity(e.getMessage()).build();\n+      return Response.serverError().entity(e.getMessage()).type(MediaType.TEXT_PLAIN).build();\n     }\t\t\n   }\n \n@@ -127,7 +137,7 @@ private Response crawlDbUrl(Configuration conf, Map<String, String> args, String\n       return Response.ok(dbr.query(args, conf, \"url\", crawlId)).build();\n     }catch(Exception e){\n       e.printStackTrace();\n-      return Response.serverError().entity(e.getMessage()).build();\n+      return Response.serverError().entity(e.getMessage()).type(MediaType.TEXT_PLAIN).build();\n     }\n   }\n }",
                "deletions": 8
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "NUTCH-2349 urlnormalizer-basic: NPE for URLs without authority\n- check whether URL.getAuthority() returns null\n- recompose URLs without authority with empty authority/host",
        "commit": "https://github.com/apache/nutch/commit/1a718e0cc9a0c3811111e40f4bf8351e26f73522",
        "parent": "https://github.com/apache/nutch/commit/f351790d7f496561aeae5e214d1b33975ca34cf2",
        "bug_id": "nutch_18",
        "file": [
            {
                "sha": "5c056364b5cfa9d9834dad7375a647edd953b2e6",
                "filename": "src/plugin/urlnormalizer-basic/src/java/org/apache/nutch/net/urlnormalizer/basic/BasicURLNormalizer.java",
                "blob_url": "https://github.com/apache/nutch/blob/1a718e0cc9a0c3811111e40f4bf8351e26f73522/src/plugin/urlnormalizer-basic/src/java/org/apache/nutch/net/urlnormalizer/basic/BasicURLNormalizer.java",
                "raw_url": "https://github.com/apache/nutch/raw/1a718e0cc9a0c3811111e40f4bf8351e26f73522/src/plugin/urlnormalizer-basic/src/java/org/apache/nutch/net/urlnormalizer/basic/BasicURLNormalizer.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/plugin/urlnormalizer-basic/src/java/org/apache/nutch/net/urlnormalizer/basic/BasicURLNormalizer.java?ref=1a718e0cc9a0c3811111e40f4bf8351e26f73522",
                "patch": "@@ -111,7 +111,7 @@ public String normalize(String urlString, String scope)\n     if (\"http\".equals(protocol) || \"https\".equals(protocol)\n         || \"ftp\".equals(protocol)) {\n \n-      if (host != null) {\n+      if (host != null && url.getAuthority() != null) {\n         String newHost = host.toLowerCase(Locale.ROOT); // lowercase host\n         if (!host.equals(newHost)) {\n           host = newHost;\n@@ -121,6 +121,9 @@ public String normalize(String urlString, String scope)\n           // etc.) which will likely cause a change if left away\n           changed = true;\n         }\n+      } else {\n+        // no host or authority: recompose the URL from components\n+        changed = true;\n       }\n \n       if (port == url.getDefaultPort()) { // uses default port",
                "deletions": 1
            },
            {
                "sha": "2625ea3e4a3e895c7f55c42c92bb7ea7e084565e",
                "filename": "src/plugin/urlnormalizer-basic/src/test/org/apache/nutch/net/urlnormalizer/basic/TestBasicURLNormalizer.java",
                "blob_url": "https://github.com/apache/nutch/blob/1a718e0cc9a0c3811111e40f4bf8351e26f73522/src/plugin/urlnormalizer-basic/src/test/org/apache/nutch/net/urlnormalizer/basic/TestBasicURLNormalizer.java",
                "raw_url": "https://github.com/apache/nutch/raw/1a718e0cc9a0c3811111e40f4bf8351e26f73522/src/plugin/urlnormalizer-basic/src/test/org/apache/nutch/net/urlnormalizer/basic/TestBasicURLNormalizer.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/plugin/urlnormalizer-basic/src/test/org/apache/nutch/net/urlnormalizer/basic/TestBasicURLNormalizer.java?ref=1a718e0cc9a0c3811111e40f4bf8351e26f73522",
                "patch": "@@ -164,6 +164,12 @@ public void testNormalizer() throws Exception {\n         \"http://foo.com/aa/bb/foo.html\");\n     normalizeTest(\"http://foo.com/aa?referer=http://bar.com\",\n         \"http://foo.com/aa?referer=http://bar.com\");\n+    // check for NPEs when normalizing URLs without host (authority)\n+    normalizeTest(\"file:///foo/bar.txt\", \"file:///foo/bar.txt\");\n+    normalizeTest(\"ftp:/\", \"ftp:/\");\n+    normalizeTest(\"http:\", \"http:/\");\n+    normalizeTest(\"http:////\", \"http:/\");\n+    normalizeTest(\"http:///////\", \"http:/\");\n   }\n \n   private void normalizeTest(String weird, String normal) throws Exception {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "NUTCH-1884 NullPointerException in parsechecker and indexchecker with symlinks in file URL\n\ngit-svn-id: https://svn.apache.org/repos/asf/nutch/trunk@1637237 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/859ddd1b1766a694c710ff63bd858682e7f4ffc5",
        "parent": "https://github.com/apache/nutch/commit/7af530f50c9b7f3a61a102d7438ef554732b1e1e",
        "bug_id": "nutch_19",
        "file": [
            {
                "sha": "c7049e4de42e0cfbd45975ba1c8926c7423abec0",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/nutch/blob/859ddd1b1766a694c710ff63bd858682e7f4ffc5/CHANGES.txt",
                "raw_url": "https://github.com/apache/nutch/raw/859ddd1b1766a694c710ff63bd858682e7f4ffc5/CHANGES.txt",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/CHANGES.txt?ref=859ddd1b1766a694c710ff63bd858682e7f4ffc5",
                "patch": "@@ -2,6 +2,8 @@ Nutch Change Log\n \n Nutch Current Development 1.10-SNAPSHOT\n \n+* NUTCH-1884 NullPointerException in parsechecker and indexchecker with symlinks in file URL (Mengying Wang, snagel)\n+\n * NUTCH-1825 protocol-http may hang for certain web pages (Phu Kieu via snagel)\n \n * NUTCH-1483 Can't crawl filesystem with protocol-file plugin (Rog\u00e9rio Pereira Ara\u00fajo, Mengying Wang, snagel)",
                "deletions": 0
            },
            {
                "sha": "b554c1951c5e9492f420ad3ca675952c9eaa8d5c",
                "filename": "src/java/org/apache/nutch/indexer/IndexingFiltersChecker.java",
                "blob_url": "https://github.com/apache/nutch/blob/859ddd1b1766a694c710ff63bd858682e7f4ffc5/src/java/org/apache/nutch/indexer/IndexingFiltersChecker.java",
                "raw_url": "https://github.com/apache/nutch/raw/859ddd1b1766a694c710ff63bd858682e7f4ffc5/src/java/org/apache/nutch/indexer/IndexingFiltersChecker.java",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/indexer/IndexingFiltersChecker.java?ref=859ddd1b1766a694c710ff63bd858682e7f4ffc5",
                "patch": "@@ -17,7 +17,9 @@\n  \n package org.apache.nutch.indexer;\n \n+import java.util.Iterator;\n import java.util.List;\n+import java.util.Map;\n \n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.conf.Configured;\n@@ -133,6 +135,16 @@ public int run(String[] args) throws Exception {\n \n     Inlinks inlinks = null;\n     Parse parse = parseResult.get(urlText);\n+    if (parse == null) {\n+      LOG.error(\"Failed to get parse from parse result\");\n+      LOG.error(\"Available parses in parse result (by URL key):\");\n+      for (Map.Entry<Text, Parse> entry : parseResult) {\n+        LOG.error(\"  \" + entry.getKey());\n+      }\n+      LOG.error(\"Parse result does not contain a parse for URL to be checked:\");\n+      LOG.error(\"  \" + urlText);\n+      return -1;\n+    }\n \n     byte[] signature = SignatureFactory.getSignature(conf).calculate(content,\n         parse);",
                "deletions": 0
            },
            {
                "sha": "e9b559bf230331691dd724bd2e8794ce7c697b0f",
                "filename": "src/java/org/apache/nutch/parse/ParserChecker.java",
                "blob_url": "https://github.com/apache/nutch/blob/859ddd1b1766a694c710ff63bd858682e7f4ffc5/src/java/org/apache/nutch/parse/ParserChecker.java",
                "raw_url": "https://github.com/apache/nutch/raw/859ddd1b1766a694c710ff63bd858682e7f4ffc5/src/java/org/apache/nutch/parse/ParserChecker.java",
                "status": "modified",
                "changes": 28,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/parse/ParserChecker.java?ref=859ddd1b1766a694c710ff63bd858682e7f4ffc5",
                "patch": "@@ -19,11 +19,13 @@\n \n import java.util.HashMap;\n import java.util.Iterator;\n+import java.util.Map;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.util.StringUtils;\n import org.apache.hadoop.util.Tool;\n import org.apache.hadoop.util.ToolRunner;\n import org.apache.nutch.crawl.CrawlDatum;\n@@ -164,14 +166,15 @@ public int run(String[] args) throws Exception {\n       scfilters.passScoreBeforeParsing(turl, cd, content);\n     } catch (Exception e) {\n       if (LOG.isWarnEnabled()) {\n-        LOG.warn(\"Couldn't pass score, url \" + turl.toString() + \" (\" + e + \")\");\n+        LOG.warn(\"Couldn't pass score before parsing, url \" + turl + \" (\" + e + \")\");\n+        LOG.warn(StringUtils.stringifyException(e));\n       }\n     }    \n     \n     ParseResult parseResult = new ParseUtil(conf).parse(content);\n \n     if (parseResult == null) {\n-      LOG.error(\"Problem with parse - check log\");\n+      LOG.error(\"Parsing content failed!\");\n       return (-1);\n     }\n \n@@ -184,17 +187,30 @@ public int run(String[] args) throws Exception {\n       LOG.info(\"signature: \" + StringUtil.toHexString(signature));\n     }\n \n+    Parse parse = parseResult.get(turl);\n+    if (parse == null) {\n+      LOG.error(\"Failed to get parse from parse result\");\n+      LOG.error(\"Available parses in parse result (by URL key):\");\n+      for (Map.Entry<Text, Parse> entry : parseResult) {\n+        LOG.error(\"  \" + entry.getKey());\n+      }\n+      LOG.error(\"Parse result does not contain a parse for URL to be checked:\");\n+      LOG.error(\"  \" + turl);\n+      return -1;\n+    }\n+\n     // call the scoring filters\n     try {\n-      scfilters.passScoreAfterParsing(turl, content, parseResult.get(turl));\n+      scfilters.passScoreAfterParsing(turl, content, parse);\n     } catch (Exception e) {\n       if (LOG.isWarnEnabled()) {\n-        LOG.warn(\"Couldn't pass score, url \" + turl + \" (\" + e + \")\");\n+        LOG.warn(\"Couldn't pass score after parsing, url \" + turl + \" (\" + e + \")\");\n+        LOG.warn(StringUtils.stringifyException(e));\n       }\n     }\n \n-    for (java.util.Map.Entry<Text, Parse> entry : parseResult) {\n-      Parse parse = entry.getValue();\n+    for (Map.Entry<Text, Parse> entry : parseResult) {\n+      parse = entry.getValue();\n       LOG.info(\"---------\\nUrl\\n---------------\\n\");\n       System.out.print(entry.getKey());\n       LOG.info(\"\\n---------\\nParseData\\n---------\\n\");",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "NUTCH-1100 avoid NPE in SOLRDedup\n\ngit-svn-id: https://svn.apache.org/repos/asf/nutch/trunk@1540758 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/7e6498c9d941c8b430b16f41ff8ce1550f144876",
        "parent": "https://github.com/apache/nutch/commit/b614838f1e1e14713a724209e3e86008e231f63d",
        "bug_id": "nutch_20",
        "file": [
            {
                "sha": "5e300a9d1af7a2c049235eece3c019f75e82071d",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/nutch/blob/7e6498c9d941c8b430b16f41ff8ce1550f144876/CHANGES.txt",
                "raw_url": "https://github.com/apache/nutch/raw/7e6498c9d941c8b430b16f41ff8ce1550f144876/CHANGES.txt",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/CHANGES.txt?ref=7e6498c9d941c8b430b16f41ff8ce1550f144876",
                "patch": "@@ -2,6 +2,8 @@ Nutch Change Log\n \n Nutch Development Trunk\n \n+* NUTCH-1100 Avoid NPE in SOLRDedup (markus)\n+\n * NUTCH-1666 Optimisation for BasicURLNormalizer (jnioche)\n \n * NUTCH-1656 ParseMeta not passed to CrawlDatum for not_modified (markus)",
                "deletions": 0
            },
            {
                "sha": "d28fa9292cc208de00536ead8fd5fa93f30e7fbc",
                "filename": "src/java/org/apache/nutch/indexer/solr/SolrDeleteDuplicates.java",
                "blob_url": "https://github.com/apache/nutch/blob/7e6498c9d941c8b430b16f41ff8ce1550f144876/src/java/org/apache/nutch/indexer/solr/SolrDeleteDuplicates.java",
                "raw_url": "https://github.com/apache/nutch/raw/7e6498c9d941c8b430b16f41ff8ce1550f144876/src/java/org/apache/nutch/indexer/solr/SolrDeleteDuplicates.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/indexer/solr/SolrDeleteDuplicates.java?ref=7e6498c9d941c8b430b16f41ff8ce1550f144876",
                "patch": "@@ -267,8 +267,10 @@ public boolean next(Text key, SolrRecord value) throws IOException {\n \n           SolrDocument doc = solrDocs.get(currentDoc);\n           String digest = (String) doc.getFieldValue(SolrConstants.DIGEST_FIELD);\n-          key.set(digest);\n-          value.readSolrDocument(doc);\n+          if (digest != null){\n+            key.set(digest);\n+            value.readSolrDocument(doc);\n+          }\n \n           currentDoc++;\n           return true;",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "NUTCH-1334 NPE in FetcherOutputFormat\n\ngit-svn-id: https://svn.apache.org/repos/asf/nutch/trunk@1477847 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/40c3971f42a8ade185aa0b7e0947b8a45b09e4cb",
        "parent": "https://github.com/apache/nutch/commit/2e13c9467ed08b9c4458833cae919c0e5e9ebb24",
        "bug_id": "nutch_21",
        "file": [
            {
                "sha": "7e1f9a74ec3ab1b04f51a6cf72985e6fc33cb3c9",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/nutch/blob/40c3971f42a8ade185aa0b7e0947b8a45b09e4cb/CHANGES.txt",
                "raw_url": "https://github.com/apache/nutch/raw/40c3971f42a8ade185aa0b7e0947b8a45b09e4cb/CHANGES.txt",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/CHANGES.txt?ref=40c3971f42a8ade185aa0b7e0947b8a45b09e4cb",
                "patch": "@@ -2,6 +2,8 @@ Nutch Change Log\n \n (trunk): Current Development\n \n+* NUTCH-1334 NPE in FetcherOutputFormat (jnioche via tejasp)\n+\n * NUTCH-1549 Fix deprecated use of Tika MimeType API in o.a.n.util.MimeUtil (tejasp)\n \n * NUTCH-346 Improve readability of logs/hadoop.log (Renaud Richardet via tejasp)",
                "deletions": 0
            },
            {
                "sha": "49528b286e8d9c8e80bd2a4fb400c7c480b7c0ed",
                "filename": "src/java/org/apache/nutch/fetcher/FetcherOutputFormat.java",
                "blob_url": "https://github.com/apache/nutch/blob/40c3971f42a8ade185aa0b7e0947b8a45b09e4cb/src/java/org/apache/nutch/fetcher/FetcherOutputFormat.java",
                "raw_url": "https://github.com/apache/nutch/raw/40c3971f42a8ade185aa0b7e0947b8a45b09e4cb/src/java/org/apache/nutch/fetcher/FetcherOutputFormat.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/fetcher/FetcherOutputFormat.java?ref=40c3971f42a8ade185aa0b7e0947b8a45b09e4cb",
                "patch": "@@ -98,9 +98,9 @@ public void write(Text key, NutchWritable value)\n           \n           if (w instanceof CrawlDatum)\n             fetchOut.append(key, w);\n-          else if (w instanceof Content)\n+          else if (w instanceof Content && contentOut != null)\n             contentOut.append(key, w);\n-          else if (w instanceof Parse)\n+          else if (w instanceof Parse && parseOut != null)\n             parseOut.write(key, (Parse)w);\n         }\n ",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "NUTCH-950 DomainURLFilter throws NPE on bogus urls\n\ngit-svn-id: https://svn.apache.org/repos/asf/nutch/trunk@1055608 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/8168861dd1acd0d632050aad45d7dcf358d95e15",
        "parent": "https://github.com/apache/nutch/commit/02e18a5f7e77d040ccb8cda3b2eef1739fef0024",
        "bug_id": "nutch_22",
        "file": [
            {
                "sha": "008deed39d281fe0e18c4b0aa7e6230b8dd38e2e",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/nutch/blob/8168861dd1acd0d632050aad45d7dcf358d95e15/CHANGES.txt",
                "raw_url": "https://github.com/apache/nutch/raw/8168861dd1acd0d632050aad45d7dcf358d95e15/CHANGES.txt",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/CHANGES.txt?ref=8168861dd1acd0d632050aad45d7dcf358d95e15",
                "patch": "@@ -2,6 +2,8 @@ Nutch Change Log\n \n Release 2.0 - Current Development\n \n+* NUTCH-950 DomainURLFilter throws NPE on bogus urls (Alexis Detreglode via jnioche)\n+\n * NUTCH-935 basicurlnormalizer removes unnecessary /./ in URLs\n \n * NUTCH-912 MoreIndexingFilter does not parse docx and xlsx date formats (Markus Jelsma, jnioche)",
                "deletions": 0
            },
            {
                "sha": "f1f76a791281f033ae7ac9a42ad44526180fe181",
                "filename": "src/plugin/urlfilter-domain/src/java/org/apache/nutch/urlfilter/domain/DomainURLFilter.java",
                "blob_url": "https://github.com/apache/nutch/blob/8168861dd1acd0d632050aad45d7dcf358d95e15/src/plugin/urlfilter-domain/src/java/org/apache/nutch/urlfilter/domain/DomainURLFilter.java",
                "raw_url": "https://github.com/apache/nutch/raw/8168861dd1acd0d632050aad45d7dcf358d95e15/src/plugin/urlfilter-domain/src/java/org/apache/nutch/urlfilter/domain/DomainURLFilter.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/plugin/urlfilter-domain/src/java/org/apache/nutch/urlfilter/domain/DomainURLFilter.java?ref=8168861dd1acd0d632050aad45d7dcf358d95e15",
                "patch": "@@ -32,6 +32,7 @@\n import org.apache.nutch.plugin.Extension;\n import org.apache.nutch.plugin.PluginRepository;\n import org.apache.nutch.util.URLUtil;\n+import org.apache.nutch.util.domain.DomainSuffix;\n \n /**\n  * <p>Filters URLs based on a file containing domain suffixes, domain names, and\n@@ -174,9 +175,14 @@ public String filter(String url) {\n \n       // match for suffix, domain, and host in that order.  more general will\n       // override more specific\n-      String suffix = URLUtil.getDomainSuffix(url).getDomain();\n       String domain = URLUtil.getDomainName(url).toLowerCase().trim();\n       String host = URLUtil.getHost(url);\n+      String suffix = null;\n+      DomainSuffix domainSuffix = URLUtil.getDomainSuffix(url);\n+      if (domainSuffix != null) {\n+        suffix = domainSuffix.getDomain();\n+      }\n+      \n       if (domainSet.contains(suffix) || domainSet.contains(domain)\n         || domainSet.contains(host)) {\n         return url;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "NUTCH-950 DomainURLFilter throws NPE on bogus urls\n\ngit-svn-id: https://svn.apache.org/repos/asf/nutch/branches/branch-1.3@1055604 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/8b232735884acedb3df5976a05d8b66c65430b16",
        "parent": "https://github.com/apache/nutch/commit/372dfb29da0b2c2d0ec54b71b1dfee191b8e62c7",
        "bug_id": "nutch_23",
        "file": [
            {
                "sha": "fdd47f7e236c656ab79f21a3fb5283d86e5fd1cf",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/nutch/blob/8b232735884acedb3df5976a05d8b66c65430b16/CHANGES.txt",
                "raw_url": "https://github.com/apache/nutch/raw/8b232735884acedb3df5976a05d8b66c65430b16/CHANGES.txt",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/CHANGES.txt?ref=8b232735884acedb3df5976a05d8b66c65430b16",
                "patch": "@@ -2,6 +2,8 @@ Nutch Change Log\n \n Release 1.3 - Current Development\n \n+* NUTCH-950 DomainURLFilter throws NPE on bogus urls (Alexis Detreglode via jnioche)\n+\n * NUTCH-935 basicurlnormalizer removes unnecessary /./ in URLs\n \n * NUTCH-912 MoreIndexingFilter does not parse docx and xlsx date formats (Markus Jelsma, jnioche)",
                "deletions": 0
            },
            {
                "sha": "70e6dd5e945c060d12d527f56bf02317d53e6f80",
                "filename": "src/plugin/urlfilter-domain/src/java/org/apache/nutch/urlfilter/domain/DomainURLFilter.java",
                "blob_url": "https://github.com/apache/nutch/blob/8b232735884acedb3df5976a05d8b66c65430b16/src/plugin/urlfilter-domain/src/java/org/apache/nutch/urlfilter/domain/DomainURLFilter.java",
                "raw_url": "https://github.com/apache/nutch/raw/8b232735884acedb3df5976a05d8b66c65430b16/src/plugin/urlfilter-domain/src/java/org/apache/nutch/urlfilter/domain/DomainURLFilter.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/plugin/urlfilter-domain/src/java/org/apache/nutch/urlfilter/domain/DomainURLFilter.java?ref=8b232735884acedb3df5976a05d8b66c65430b16",
                "patch": "@@ -31,6 +31,7 @@\n import org.apache.nutch.plugin.Extension;\n import org.apache.nutch.plugin.PluginRepository;\n import org.apache.nutch.util.URLUtil;\n+import org.apache.nutch.util.domain.DomainSuffix;\n \n /**\n  * <p>Filters URLs based on a file containing domain suffixes, domain names, and\n@@ -170,9 +171,14 @@ public String filter(String url) {\n \n       // match for suffix, domain, and host in that order.  more general will\n       // override more specific\n-      String suffix = URLUtil.getDomainSuffix(url).getDomain();\n       String domain = URLUtil.getDomainName(url).toLowerCase().trim();\n       String host = URLUtil.getHost(url);\n+      String suffix = null;\n+      DomainSuffix domainSuffix = URLUtil.getDomainSuffix(url);\n+      if (domainSuffix != null) {\n+        suffix = domainSuffix.getDomain();\n+      }\n+      \n       if (domainSet.contains(suffix) || domainSet.contains(domain)\n         || domainSet.contains(host)) {\n         return url;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "Fix an NPE when properties are missing.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/nutch/trunk@1031915 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/d1ae84769cb782558af2dcb469e7db625890389c",
        "parent": "https://github.com/apache/nutch/commit/25663236496130adba619794e3665bf523407cdc",
        "bug_id": "nutch_24",
        "file": [
            {
                "sha": "cafc7d50c9b05f29a123b6d672eae8ebdd3c8c32",
                "filename": "src/plugin/protocol-sftp/src/java/org/apache/nutch/protocol/sftp/Sftp.java",
                "blob_url": "https://github.com/apache/nutch/blob/d1ae84769cb782558af2dcb469e7db625890389c/src/plugin/protocol-sftp/src/java/org/apache/nutch/protocol/sftp/Sftp.java",
                "raw_url": "https://github.com/apache/nutch/raw/d1ae84769cb782558af2dcb469e7db625890389c/src/plugin/protocol-sftp/src/java/org/apache/nutch/protocol/sftp/Sftp.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/plugin/protocol-sftp/src/java/org/apache/nutch/protocol/sftp/Sftp.java?ref=d1ae84769cb782558af2dcb469e7db625890389c",
                "patch": "@@ -236,6 +236,10 @@ public void setConf(Configuration arg0) {\n     user = configuration.get(\"sftp.user\", \"anonymous\");\n     password = configuration.get(\"sftp.password\", \"guest\");\n \n+    if (server == null) {\n+      return;\n+    }\n+    \n     if (channelSftpByHostMap.containsKey(server)) {\n       return;\n     }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "fixed NPE introduced in NUTCH-762\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@926163 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/ed601a677692595902ea96b2ae90d35e81abb7b1",
        "parent": "https://github.com/apache/nutch/commit/133cc0696d588d373f4657ea5d334105513f2976",
        "bug_id": "nutch_25",
        "file": [
            {
                "sha": "60bf6e4523c991302271c67345adcbdb26bfcd8e",
                "filename": "src/java/org/apache/nutch/crawl/Generator.java",
                "blob_url": "https://github.com/apache/nutch/blob/ed601a677692595902ea96b2ae90d35e81abb7b1/src/java/org/apache/nutch/crawl/Generator.java",
                "raw_url": "https://github.com/apache/nutch/raw/ed601a677692595902ea96b2ae90d35e81abb7b1/src/java/org/apache/nutch/crawl/Generator.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/crawl/Generator.java?ref=ed601a677692595902ea96b2ae90d35e81abb7b1",
                "patch": "@@ -480,7 +480,7 @@ public Generator(Configuration conf) {\n       LOG.info(\"Generator: topN: \" + topN);\n     }\n     \n-    if (getConf().get(GENERATE_MAX_PER_HOST_BY_IP).equals(\"true\")){\n+    if (\"true\".equals(getConf().get(GENERATE_MAX_PER_HOST_BY_IP))){\n       LOG.info(\"Generator: GENERATE_MAX_PER_HOST_BY_IP will be ignored, use partition.url.mode instead\");\n     }\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "Avoid NPE when pocessing empty / corrupted indexes.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@669300 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/19d60aeece513faaa886eae3e14029c821c685e0",
        "parent": "https://github.com/apache/nutch/commit/18c707e302cc6875eb8620ab05d3ba47f229c7cb",
        "bug_id": "nutch_26",
        "file": [
            {
                "sha": "bbc7e044ba12c03579e98597ccbe13967ca75472",
                "filename": "src/java/org/apache/nutch/indexer/DeleteDuplicates.java",
                "blob_url": "https://github.com/apache/nutch/blob/19d60aeece513faaa886eae3e14029c821c685e0/src/java/org/apache/nutch/indexer/DeleteDuplicates.java",
                "raw_url": "https://github.com/apache/nutch/raw/19d60aeece513faaa886eae3e14029c821c685e0/src/java/org/apache/nutch/indexer/DeleteDuplicates.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/indexer/DeleteDuplicates.java?ref=19d60aeece513faaa886eae3e14029c821c685e0",
                "patch": "@@ -220,7 +220,7 @@ public long getPos() throws IOException {\n       }\n \n       public void close() throws IOException {\n-        indexReader.close();\n+        if (indexReader != null) indexReader.close();\n       }\n       \n       public Text createKey() {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "NUTCH-575 NPE in OpenSearchServlet.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@637127 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/0b3e562d3ec60563c487a0789679baf420257b0c",
        "parent": "https://github.com/apache/nutch/commit/b7e12d7699072ba7307b30d9cef6c22acd030ee9",
        "bug_id": "nutch_27",
        "file": [
            {
                "sha": "63da198ffb35e015602e90865f32680ace2d37f8",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/nutch/blob/0b3e562d3ec60563c487a0789679baf420257b0c/CHANGES.txt",
                "raw_url": "https://github.com/apache/nutch/raw/0b3e562d3ec60563c487a0789679baf420257b0c/CHANGES.txt",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/CHANGES.txt?ref=0b3e562d3ec60563c487a0789679baf420257b0c",
                "patch": "@@ -225,6 +225,7 @@ Unreleased changes (1.0-dev)\n \n 81. NUTCH-601 - Recrawling on existing crawl directory (Susam Pal via ab)\n \n+82. NUTCH-575 - NPE in OpenSearchServlet (John H. Lee via ab)\n \n Release 0.9 - 2007-04-02\n ",
                "deletions": 0
            },
            {
                "sha": "3d93a69cd08e3e321eb3699e29be06452f2e9d78",
                "filename": "src/java/org/apache/nutch/searcher/OpenSearchServlet.java",
                "blob_url": "https://github.com/apache/nutch/blob/0b3e562d3ec60563c487a0789679baf420257b0c/src/java/org/apache/nutch/searcher/OpenSearchServlet.java",
                "raw_url": "https://github.com/apache/nutch/raw/0b3e562d3ec60563c487a0789679baf420257b0c/src/java/org/apache/nutch/searcher/OpenSearchServlet.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/searcher/OpenSearchServlet.java?ref=0b3e562d3ec60563c487a0789679baf420257b0c",
                "patch": "@@ -223,7 +223,9 @@ public void doGet(HttpServletRequest request, HttpServletResponse response)\n         Element item = addNode(doc, channel, \"item\");\n \n         addNode(doc, item, \"title\", title);\n-        addNode(doc, item, \"description\", summaries[i].toHtml(false));\n+        if (summaries[i] != null) {\n+          addNode(doc, item, \"description\", summaries[i].toHtml(false));\n+        }\n         addNode(doc, item, \"link\", url);\n \n         addNode(doc, item, \"nutch\", \"site\", hit.getDedupValue());",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "NUTCH-597 - NPE in Fetcher2 when redirecting.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@612264 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/264246cd5346e299c9fb07b1486bfc06707b9278",
        "parent": "https://github.com/apache/nutch/commit/9eccbdf94af0968d6bdcb891811ce96bbe890190",
        "bug_id": "nutch_28",
        "file": [
            {
                "sha": "796a112b269f0f7c58464ce5f0977cb6b66ee30d",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/nutch/blob/264246cd5346e299c9fb07b1486bfc06707b9278/CHANGES.txt",
                "raw_url": "https://github.com/apache/nutch/raw/264246cd5346e299c9fb07b1486bfc06707b9278/CHANGES.txt",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/CHANGES.txt?ref=264246cd5346e299c9fb07b1486bfc06707b9278",
                "patch": "@@ -187,6 +187,8 @@ Unreleased changes (1.0-dev)\n 64. NUTCH-528 - CrawlDbReader: add some new stats + dump into a CSV format\n     (Emmanuel Joke via ab)\n \n+65. NUTCH-597 - NPE in Fetcher2 (Remco Verhoef via ab)\n+\n \n Release 0.9 - 2007-04-02\n ",
                "deletions": 0
            },
            {
                "sha": "8d4558b7a3753f2c66a84417d55f4e08932a7c50",
                "filename": "src/java/org/apache/nutch/fetcher/Fetcher2.java",
                "blob_url": "https://github.com/apache/nutch/blob/264246cd5346e299c9fb07b1486bfc06707b9278/src/java/org/apache/nutch/fetcher/Fetcher2.java",
                "raw_url": "https://github.com/apache/nutch/raw/264246cd5346e299c9fb07b1486bfc06707b9278/src/java/org/apache/nutch/fetcher/Fetcher2.java",
                "status": "modified",
                "changes": 22,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/fetcher/Fetcher2.java?ref=264246cd5346e299c9fb07b1486bfc06707b9278",
                "patch": "@@ -553,9 +553,14 @@ public void run() {\n                     newDatum.getMetaData().put(Nutch.WRITABLE_REPR_URL_KEY,\n                         new Text(reprUrl));\n                     fit = FetchItem.create(redirUrl, newDatum, byIP);\n-                    FetchItemQueue fiq =\n-                      fetchQueues.getFetchItemQueue(fit.queueID);\n-                    fiq.addInProgressFetchItem(fit);\n+                    if (fit != null) {\n+                      FetchItemQueue fiq =\n+                        fetchQueues.getFetchItemQueue(fit.queueID);\n+                      fiq.addInProgressFetchItem(fit);\n+                    } else {\n+                      // stop redirecting\n+                      redirecting = false;\n+                    }\n                   }\n                 }\n                 break;\n@@ -581,9 +586,14 @@ public void run() {\n                 newDatum.getMetaData().put(Nutch.WRITABLE_REPR_URL_KEY,\n                     new Text(reprUrl));\n                 fit = FetchItem.create(redirUrl, newDatum, byIP);\n-                FetchItemQueue fiq =\n-                  fetchQueues.getFetchItemQueue(fit.queueID);\n-                fiq.addInProgressFetchItem(fit);\n+                if (fit != null) {\n+                  FetchItemQueue fiq =\n+                    fetchQueues.getFetchItemQueue(fit.queueID);\n+                  fiq.addInProgressFetchItem(fit);\n+                } else {\n+                  // stop redirecting\n+                  redirecting = false;\n+                }\n                 break;\n \n               case ProtocolStatus.EXCEPTION:",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "Prevent NPE when working with small, possibly empty indexes.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@532105 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/487f87b6cc3566528e51e668bd05a9e20b4ea3ef",
        "parent": "https://github.com/apache/nutch/commit/07e98426464a6eaeb26a295f41c7399faf97d544",
        "bug_id": "nutch_29",
        "file": [
            {
                "sha": "62f353c98d31a79618a0b829fd61da68fefd0b2d",
                "filename": "src/java/org/apache/nutch/indexer/DeleteDuplicates.java",
                "blob_url": "https://github.com/apache/nutch/blob/487f87b6cc3566528e51e668bd05a9e20b4ea3ef/src/java/org/apache/nutch/indexer/DeleteDuplicates.java",
                "raw_url": "https://github.com/apache/nutch/raw/487f87b6cc3566528e51e668bd05a9e20b4ea3ef/src/java/org/apache/nutch/indexer/DeleteDuplicates.java",
                "status": "modified",
                "changes": 17,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/indexer/DeleteDuplicates.java?ref=487f87b6cc3566528e51e668bd05a9e20b4ea3ef",
                "patch": "@@ -158,19 +158,28 @@ public boolean equals(Object o) {\n     public class DDRecordReader implements RecordReader {\n \n       private IndexReader indexReader;\n-      private int maxDoc;\n-      private int doc;\n+      private int maxDoc = 0;\n+      private int doc = 0;\n       private Text index;\n       \n       public DDRecordReader(FileSplit split, JobConf job,\n           Text index) throws IOException {\n-        indexReader = IndexReader.open(new FsDirectory(FileSystem.get(job), split.getPath(), false, job));\n-        maxDoc = indexReader.maxDoc();\n+        try {\n+          indexReader = IndexReader.open(new FsDirectory(FileSystem.get(job), split.getPath(), false, job));\n+          maxDoc = indexReader.maxDoc();\n+        } catch (IOException ioe) {\n+          LOG.warn(\"Can't open index at \" + split + \", skipping. (\" + ioe.getMessage() + \")\");\n+          indexReader = null;\n+        }\n         this.index = index;\n       }\n \n       public boolean next(Writable key, Writable value)\n         throws IOException {\n+        \n+        // skip empty indexes\n+        if (indexReader == null || maxDoc <= 0)\n+          return false;\n \n         // skip deleted documents\n         while (indexReader.isDeleted(doc) && doc < maxDoc) doc++;",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "Empty MapWritable would throw an NPE when building a keySet.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@526455 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/6af4eee8f16eef9a2a39f0b1d868ad6cb51710cb",
        "parent": "https://github.com/apache/nutch/commit/c568c6959efb1a5463d4f129afc7a93003257def",
        "bug_id": "nutch_30",
        "file": [
            {
                "sha": "0818c3b9df86df2de35d81febc1510bbe6ee6bca",
                "filename": "src/java/org/apache/nutch/crawl/MapWritable.java",
                "blob_url": "https://github.com/apache/nutch/blob/6af4eee8f16eef9a2a39f0b1d868ad6cb51710cb/src/java/org/apache/nutch/crawl/MapWritable.java",
                "raw_url": "https://github.com/apache/nutch/raw/6af4eee8f16eef9a2a39f0b1d868ad6cb51710cb/src/java/org/apache/nutch/crawl/MapWritable.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/crawl/MapWritable.java?ref=6af4eee8f16eef9a2a39f0b1d868ad6cb51710cb",
                "patch": "@@ -175,6 +175,7 @@ public boolean isEmpty() {\n \n   public Set keySet() {\n     HashSet set = new HashSet();\n+    if (isEmpty()) return set;\n     set.add(fFirst.fKey);\n     KeyValueEntry entry = fFirst;\n     while ((entry = entry.fNextEntry) != null) {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "Fix npe related to NUTCH-344 submitted by Jason Calabres\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@430656 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/30c3c722b809112faeb5fa50e5f5eb86703e8ef0",
        "parent": "https://github.com/apache/nutch/commit/52c8cc3a07e16194c6d0ace6a857f7768eb913ed",
        "bug_id": "nutch_31",
        "file": [
            {
                "sha": "600d79a6e4b0d624336110c73b5371649bf7a95c",
                "filename": "src/plugin/lib-http/src/java/org/apache/nutch/protocol/http/api/HttpBase.java",
                "blob_url": "https://github.com/apache/nutch/blob/30c3c722b809112faeb5fa50e5f5eb86703e8ef0/src/plugin/lib-http/src/java/org/apache/nutch/protocol/http/api/HttpBase.java",
                "raw_url": "https://github.com/apache/nutch/raw/30c3c722b809112faeb5fa50e5f5eb86703e8ef0/src/plugin/lib-http/src/java/org/apache/nutch/protocol/http/api/HttpBase.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/plugin/lib-http/src/java/org/apache/nutch/protocol/http/api/HttpBase.java?ref=30c3c722b809112faeb5fa50e5f5eb86703e8ef0",
                "patch": "@@ -382,7 +382,7 @@ private static void cleanExpiredServerBlocks() {\n         long time = ((Long) BLOCKED_ADDR_TO_TIME.get(host)).longValue();\n         if (time <= System.currentTimeMillis()) {\n           BLOCKED_ADDR_TO_TIME.remove(host);\n-          BLOCKED_ADDR_QUEUE.removeLast();\n+          BLOCKED_ADDR_QUEUE.remove(i);\n         }\n       }\n     }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "Fix an NPE.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@425042 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/809bc349837093570f866677213335bc8fb4439e",
        "parent": "https://github.com/apache/nutch/commit/89ccf761b7bff345baf82d88f4e3c26f946aa183",
        "bug_id": "nutch_32",
        "file": [
            {
                "sha": "b607868b08cfe29b654cc7b8200d683661be4156",
                "filename": "src/plugin/scoring-opic/src/java/org/apache/nutch/scoring/opic/OPICScoringFilter.java",
                "blob_url": "https://github.com/apache/nutch/blob/809bc349837093570f866677213335bc8fb4439e/src/plugin/scoring-opic/src/java/org/apache/nutch/scoring/opic/OPICScoringFilter.java",
                "raw_url": "https://github.com/apache/nutch/raw/809bc349837093570f866677213335bc8fb4439e/src/plugin/scoring-opic/src/java/org/apache/nutch/scoring/opic/OPICScoringFilter.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/plugin/scoring-opic/src/java/org/apache/nutch/scoring/opic/OPICScoringFilter.java?ref=809bc349837093570f866677213335bc8fb4439e",
                "patch": "@@ -83,6 +83,7 @@ public void updateDbScore(UTF8 url, CrawlDatum old, CrawlDatum datum, List inlin\n       CrawlDatum linked = (CrawlDatum)inlinked.get(i);\n       adjust += linked.getScore();\n     }\n+    if (old == null) old = datum;\n     datum.setScore(old.getScore() + adjust);\n   }\n ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "Fix an NPE, and simplify the logic (NUTCH-254).\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@396708 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/d124af49f1574e14facf17cb85efadcd7b4121b6",
        "parent": "https://github.com/apache/nutch/commit/40c0f4b44aa08f0f4db6e79cb4f0bace3a53caf1",
        "bug_id": "nutch_33",
        "file": [
            {
                "sha": "32303149d9cf3b12d74bd4a248f11713234db9ba",
                "filename": "src/java/org/apache/nutch/fetcher/Fetcher.java",
                "blob_url": "https://github.com/apache/nutch/blob/d124af49f1574e14facf17cb85efadcd7b4121b6/src/java/org/apache/nutch/fetcher/Fetcher.java",
                "raw_url": "https://github.com/apache/nutch/raw/d124af49f1574e14facf17cb85efadcd7b4121b6/src/java/org/apache/nutch/fetcher/Fetcher.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/fetcher/Fetcher.java?ref=d124af49f1574e14facf17cb85efadcd7b4121b6",
                "patch": "@@ -152,7 +152,7 @@ public void run() {\n                     LOG.fine(\" - content redirect to \" + url);\n                   } else {\n                     LOG.fine(\" - content redirect skipped: \" +\n-                             (url.equals(newUrl.toString()) ? \"to same url\" : \"filtered\"));\n+                             (newUrl != null ? \"to same url\" : \"filtered\"));\n                   }\n                 }\n                 break;\n@@ -169,7 +169,7 @@ public void run() {\n                   LOG.fine(\" - protocol redirect to \" + url);\n                 } else {\n                   LOG.fine(\" - protocol redirect skipped: \" +\n-                           (url.equals(newUrl.toString()) ? \"to same url\" : \"filtered\"));\n+                           (newUrl != null ? \"to same url\" : \"filtered\"));\n                 }\n                 break;\n ",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "Fix an NPE. Reported by Marko Bauhardt.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@393921 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/3a310e8a7387d56c2572f9d2ca0087077fd24c17",
        "parent": "https://github.com/apache/nutch/commit/1ededff9745a51cf8e42f192d2136ed5d1388d4d",
        "bug_id": "nutch_34",
        "file": [
            {
                "sha": "13d8b749531765f0030a83ee7849000b12b40272",
                "filename": "src/java/org/apache/nutch/crawl/CrawlDbReducer.java",
                "blob_url": "https://github.com/apache/nutch/blob/3a310e8a7387d56c2572f9d2ca0087077fd24c17/src/java/org/apache/nutch/crawl/CrawlDbReducer.java",
                "raw_url": "https://github.com/apache/nutch/raw/3a310e8a7387d56c2572f9d2ca0087077fd24c17/src/java/org/apache/nutch/crawl/CrawlDbReducer.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/crawl/CrawlDbReducer.java?ref=3a310e8a7387d56c2572f9d2ca0087077fd24c17",
                "patch": "@@ -68,6 +68,7 @@ public void reduce(WritableComparable key, Iterator values,\n     if (old != null) {\n       // copy metadata from old, if exists\n       if (old.getMetaData() != null) {\n+        if (result.getMetaData() == null) result.setMetaData(new MapWritable());\n         result.getMetaData().putAll(old.getMetaData());\n         // overlay with new, if any\n         if (highest.getMetaData() != null)",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "Fix NPE if lang is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@385702 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/c234bd42b2d50a59bdb1bb3e9207519519ad7801",
        "parent": "https://github.com/apache/nutch/commit/340c8a05f04da63f577b74d60347a5ac75650fcc",
        "bug_id": "nutch_35",
        "file": [
            {
                "sha": "5fd21a31821b88c9cea7f75e051c611f8631d620",
                "filename": "src/java/org/apache/nutch/analysis/AnalyzerFactory.java",
                "blob_url": "https://github.com/apache/nutch/blob/c234bd42b2d50a59bdb1bb3e9207519519ad7801/src/java/org/apache/nutch/analysis/AnalyzerFactory.java",
                "raw_url": "https://github.com/apache/nutch/raw/c234bd42b2d50a59bdb1bb3e9207519519ad7801/src/java/org/apache/nutch/analysis/AnalyzerFactory.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/analysis/AnalyzerFactory.java?ref=c234bd42b2d50a59bdb1bb3e9207519519ad7801",
                "patch": "@@ -78,6 +78,7 @@ public NutchAnalyzer get(String lang) {\n \n   private Extension getExtension(String lang) {\n \n+    if (lang == null) { return null; }\n     Extension extension = (Extension) this.conf.getObject(lang);\n     if (extension == null) {\n       extension = findExtension(lang);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "Fix NPE when protocol not found. Reported by Dawid Weiss.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@232840 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/b92dacafad2cb0e23fe2ecf3e592e8f136074cb7",
        "parent": "https://github.com/apache/nutch/commit/f2503012087b4b6d56707e902965f82c3ae5dae9",
        "bug_id": "nutch_36",
        "file": [
            {
                "sha": "5ba3acaab4e5e388914bd0dd31639e07dfb0ef8e",
                "filename": "src/java/org/apache/nutch/protocol/ProtocolFactory.java",
                "blob_url": "https://github.com/apache/nutch/blob/b92dacafad2cb0e23fe2ecf3e592e8f136074cb7/src/java/org/apache/nutch/protocol/ProtocolFactory.java",
                "raw_url": "https://github.com/apache/nutch/raw/b92dacafad2cb0e23fe2ecf3e592e8f136074cb7/src/java/org/apache/nutch/protocol/ProtocolFactory.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/protocol/ProtocolFactory.java?ref=b92dacafad2cb0e23fe2ecf3e592e8f136074cb7",
                "patch": "@@ -75,7 +75,7 @@ private static Extension getExtension(String name)\n     \n     Extension extension = findExtension(name);\n     \n-    CACHE.put(name, extension);\n+    if (extension != null) CACHE.put(name, extension);\n     \n     return extension;\n   }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "Fix an NPE. Submitted by Piotr Kosiorowski.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@209733 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/fee04443a73b10386c846a37f3049c69707c231b",
        "parent": "https://github.com/apache/nutch/commit/72ebcd63982550982c48c9ea63e7c89cae8d61b7",
        "bug_id": "nutch_37",
        "file": [
            {
                "sha": "eb095bfc6fd746a49ce2de691f7b508982cff8f2",
                "filename": "src/java/org/apache/nutch/fs/FileUtil.java",
                "blob_url": "https://github.com/apache/nutch/blob/fee04443a73b10386c846a37f3049c69707c231b/src/java/org/apache/nutch/fs/FileUtil.java",
                "raw_url": "https://github.com/apache/nutch/raw/fee04443a73b10386c846a37f3049c69707c231b/src/java/org/apache/nutch/fs/FileUtil.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/fs/FileUtil.java?ref=fee04443a73b10386c846a37f3049c69707c231b",
                "patch": "@@ -47,7 +47,7 @@ public static boolean copyContents(NutchFileSystem nfs, File src, File dst, bool\n         }\n \n         File dstParent = dst.getParentFile();\n-        if (! nfs.exists(dstParent)) {\n+        if ((dstParent != null) && (!nfs.exists(dstParent))) {\n             nfs.mkdirs(dstParent);\n         }\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "CloudSearchIndexWriter : (trivial) prevent NPE in close() when running in batch.dump mode\n\ngit-svn-id: https://svn.apache.org/repos/asf/nutch/trunk@1698286 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/7f85442f5ad02b0fea1f7d27de56dd0b2bd318e8",
        "parent": "https://github.com/apache/nutch/commit/6ac77f9cad7b5650e009d4e761f46e604fa3733b",
        "bug_id": "nutch_38",
        "file": [
            {
                "sha": "b6f1a9cdcf05a452e5ba07410d21f532b9d2a5c9",
                "filename": "src/plugin/indexer-cloudsearch/src/java/org/apache/nutch/indexwriter/cloudsearch/CloudSearchIndexWriter.java",
                "blob_url": "https://github.com/apache/nutch/blob/7f85442f5ad02b0fea1f7d27de56dd0b2bd318e8/src/plugin/indexer-cloudsearch/src/java/org/apache/nutch/indexwriter/cloudsearch/CloudSearchIndexWriter.java",
                "raw_url": "https://github.com/apache/nutch/raw/7f85442f5ad02b0fea1f7d27de56dd0b2bd318e8/src/plugin/indexer-cloudsearch/src/java/org/apache/nutch/indexwriter/cloudsearch/CloudSearchIndexWriter.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/plugin/indexer-cloudsearch/src/java/org/apache/nutch/indexwriter/cloudsearch/CloudSearchIndexWriter.java?ref=7f85442f5ad02b0fea1f7d27de56dd0b2bd318e8",
                "patch": "@@ -314,7 +314,9 @@ public void close() throws IOException {\n     // This will flush any unsent documents.\n     commit();\n     // close the client\n-    client.shutdown();\n+    if (client != null){\n+      client.shutdown();\n+    }\n   }\n \n   public Configuration getConf() {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "NUTCH-1912 Dump tool -mimetype parameter needs to be optional to prevent NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/nutch/trunk@1651455 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/f710e5dc7a1cc712cb4efcb6dd7b6f86e598f83e",
        "parent": "https://github.com/apache/nutch/commit/a037ff28594156a5e0255d648cef6317917178c1",
        "bug_id": "nutch_39",
        "file": [
            {
                "sha": "2bc8504ec16936286dc5d7dec028da5a33bae55c",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/nutch/blob/f710e5dc7a1cc712cb4efcb6dd7b6f86e598f83e/CHANGES.txt",
                "raw_url": "https://github.com/apache/nutch/raw/f710e5dc7a1cc712cb4efcb6dd7b6f86e598f83e/CHANGES.txt",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/CHANGES.txt?ref=f710e5dc7a1cc712cb4efcb6dd7b6f86e598f83e",
                "patch": "@@ -2,6 +2,8 @@ Nutch Change Log\n \n Nutch Current Development 1.10-SNAPSHOT\n \n+* NUTCH-1912 Dump tool -mimetype parameter needs to be optional to prevent NPE (Tyler Palsulich via lewismc)\n+\n * NUTCH-1881 ant target resolve-default to keep test libs (snagel)\n \n * NUTCH-1660 Index filter for Page's latitude and longitude (Yasin K\u0131l\u0131n\u00e7, lewismc)",
                "deletions": 0
            },
            {
                "sha": "0f0923b1b1db54bdd4ee5edec253f67a4bf5ccc6",
                "filename": "src/java/org/apache/nutch/tools/FileDumper.java",
                "blob_url": "https://github.com/apache/nutch/blob/f710e5dc7a1cc712cb4efcb6dd7b6f86e598f83e/src/java/org/apache/nutch/tools/FileDumper.java",
                "raw_url": "https://github.com/apache/nutch/raw/f710e5dc7a1cc712cb4efcb6dd7b6f86e598f83e/src/java/org/apache/nutch/tools/FileDumper.java",
                "status": "modified",
                "changes": 14,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/tools/FileDumper.java?ref=f710e5dc7a1cc712cb4efcb6dd7b6f86e598f83e",
                "patch": "@@ -113,6 +113,7 @@\n    * @throws Exception\n    */\n   public void dump(File outputDir, File segmentRootDir, String[] mimeTypes) throws Exception {\n+    if (mimeTypes == null) LOG.info(\"Accepting all mimetypes.\");\n     //total file counts\n     Map<String, Integer> typeCounts = new HashMap<String, Integer>();\n     //filtered file counts\n@@ -128,6 +129,10 @@ public boolean accept(File file) {\n             return file.canRead() && file.isDirectory();\n           }\n         });\n+    if (segmentDirs == null) {\n+      System.err.println(\"No segment directories found in [\" + segmentRootDir.getAbsolutePath() + \"]\");\n+      return;\n+    }\n \n     for (File segment : segmentDirs) {\n       LOG.info(\"Processing segment: [\" + segment.getAbsolutePath() + \"]\");\n@@ -153,7 +158,7 @@ public boolean accept(File file) {\n           String url = key.toString();\n           String baseName = FilenameUtils.getBaseName(url);\n           String extension = FilenameUtils.getExtension(url);\n-          if (extension == null || (extension != null && \n+          if (extension == null || (extension != null &&\n               extension.equals(\"\"))){\n             extension = \"html\";\n           }\n@@ -166,7 +171,7 @@ public boolean accept(File file) {\n             String mimeType = new Tika().detect(content.getContent());\n             collectStats(typeCounts, mimeType);\n             if (mimeType != null) {\n-              if (Arrays.asList(mimeTypes).contains(mimeType)) {\n+              if (mimeTypes == null || Arrays.asList(mimeTypes).contains(mimeType)) {\n                 collectStats(filteredCounts, mimeType);\n                 filter = true;\n               }\n@@ -182,7 +187,6 @@ public boolean accept(File file) {\n                 bas.close();\n               }\n               catch(Exception ignore){}\n-              bas = null;\n             }\n           }\n \n@@ -198,7 +202,6 @@ public boolean accept(File file) {\n               LOG.info(\"Skipping writing: [\"\n                   + outputFullPath + \"]: file already exists\");\n             }\n-            content = null;\n           }\n         }\n         reader.close();\n@@ -237,7 +240,7 @@ public static void main(String[] args) throws Exception {\n     .create(\"segment\");\n     @SuppressWarnings(\"static-access\")\n     Option mimeOpt = OptionBuilder.withArgName(\"mimetype\")\n-    .hasArgs().withDescription(\"an optional list of mimetypes to dump, excluding all others\")\n+    .hasArgs().withDescription(\"an optional list of mimetypes to dump, excluding all others. Defaults to all.\")\n     .create(\"mimetype\");\n \n     //create the options\n@@ -272,6 +275,7 @@ public static void main(String[] args) throws Exception {\n     }\n     catch(Exception e) {\n       LOG.error(\"FileDumper: \" + StringUtils.stringifyException(e));\n+      e.printStackTrace();\n       return;\n     }\n   }",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "- fix for NUTCH-812 Crawl.java incorrectly uses the Generator API resulting in NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@935453 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/b34fe72a5298c3f2ba0953f3fd0b9588ac2539ea",
        "parent": "https://github.com/apache/nutch/commit/c6b1e858e136711f675ef81a918391d7b2c5a3a3",
        "bug_id": "nutch_40",
        "file": [
            {
                "sha": "b33851aabcefb9cf0824862a61a0f5c000db3305",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/nutch/blob/b34fe72a5298c3f2ba0953f3fd0b9588ac2539ea/CHANGES.txt",
                "raw_url": "https://github.com/apache/nutch/raw/b34fe72a5298c3f2ba0953f3fd0b9588ac2539ea/CHANGES.txt",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/CHANGES.txt?ref=b34fe72a5298c3f2ba0953f3fd0b9588ac2539ea",
                "patch": "@@ -2,6 +2,8 @@ Nutch Change Log\n \n Release 1.1 - 2010-04-06\n \n+* NUTCH-812 Crawl.java incorrectly uses the Generator API resulting in NPE (Phil Barnett via mattmann and ab)\n+\n * NUTCH-810 Upgrade to Tika 0.7 (jnioche)\n \n * NUTCH-785 Copy metadata from origin URL when redirecting in Fetcher + call scfilters.initialScore on newly created URL (jnioche)",
                "deletions": 0
            },
            {
                "sha": "c501a2616a03a06def5e820fab20a936296aba4d",
                "filename": "src/java/org/apache/nutch/crawl/Crawl.java",
                "blob_url": "https://github.com/apache/nutch/blob/b34fe72a5298c3f2ba0953f3fd0b9588ac2539ea/src/java/org/apache/nutch/crawl/Crawl.java",
                "raw_url": "https://github.com/apache/nutch/raw/b34fe72a5298c3f2ba0953f3fd0b9588ac2539ea/src/java/org/apache/nutch/crawl/Crawl.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/crawl/Crawl.java?ref=b34fe72a5298c3f2ba0953f3fd0b9588ac2539ea",
                "patch": "@@ -126,7 +126,7 @@ public static void main(String args[]) throws Exception {\n     for (i = 0; i < depth; i++) {             // generate new segment\n       Path[] segs = generator.generate(crawlDb, segments, -1, topN, System\n           .currentTimeMillis());\n-      if (segments == null) {\n+      if (segs == null) {\n         LOG.info(\"Stopping at depth=\" + i + \" - no more URLs to fetch.\");\n         break;\n       }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "NUTCH-730 NPE in LinkRank if no nodes with which to create the WebGraph.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@823532 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/d15119baaf0408e82153bacfe6d252bf644b0e31",
        "parent": "https://github.com/apache/nutch/commit/4be932afbbb2d71b90877a69936373f231290865",
        "bug_id": "nutch_41",
        "file": [
            {
                "sha": "d1aa2279252f59d4206f08b8be04942bc5a20767",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/nutch/blob/d15119baaf0408e82153bacfe6d252bf644b0e31/CHANGES.txt",
                "raw_url": "https://github.com/apache/nutch/raw/d15119baaf0408e82153bacfe6d252bf644b0e31/CHANGES.txt",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/CHANGES.txt?ref=d15119baaf0408e82153bacfe6d252bf644b0e31",
                "patch": "@@ -12,6 +12,9 @@ Unreleased Changes\n * NUTCH-707 - Generation of multiple segments in multiple runs returns only 1 segment\n   (Michael Chen, ab)\n \n+* NUTCH-730 - NPE in LinkRank if no nodes with which to create the WebGraph\n+  (Dennis Kubes via ab)\n+\n Release 1.0 - 2009-03-23\n \n  1. NUTCH-474 - Fetcher2 crawlDelay and blocking fix (Dogacan Guney via ab)",
                "deletions": 0
            },
            {
                "sha": "44f5594cc7ecc0ece8f6096a1eceacd57d44274a",
                "filename": "src/java/org/apache/nutch/scoring/webgraph/LinkRank.java",
                "blob_url": "https://github.com/apache/nutch/blob/d15119baaf0408e82153bacfe6d252bf644b0e31/src/java/org/apache/nutch/scoring/webgraph/LinkRank.java",
                "raw_url": "https://github.com/apache/nutch/raw/d15119baaf0408e82153bacfe6d252bf644b0e31/src/java/org/apache/nutch/scoring/webgraph/LinkRank.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/scoring/webgraph/LinkRank.java?ref=d15119baaf0408e82153bacfe6d252bf644b0e31",
                "patch": "@@ -122,7 +122,13 @@ private int runCounter(FileSystem fs, Path webGraphDb)\n     BufferedReader buffer = new BufferedReader(new InputStreamReader(readLinks));\n     String numLinksLine = buffer.readLine();\n     readLinks.close();\n-\n+    \n+    // check if there are links to process, if none, webgraph might be empty\n+    if (numLinksLine == null || numLinksLine.length() == 0) {\n+      fs.delete(numLinksPath, true);\n+      throw new IOException(\"No links to process, is the webgraph empty?\");\n+    }\n+    \n     // delete temp file and convert and return the number of links as an int\n     LOG.info(\"Deleting numlinks temp file\");\n     fs.delete(numLinksPath, true);",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "Fix NPE when document properties are null. Reported by Trym Asserson.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@454297 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/b2cdf59e7403ddd9787be755f204a9a007196530",
        "parent": "https://github.com/apache/nutch/commit/581eaf37ee7908b50a2a7629a04b3edae7f9c911",
        "bug_id": "nutch_42",
        "file": [
            {
                "sha": "d2fc1cedc05ad78022c991f1f5310f82ac3fd774",
                "filename": "src/plugin/lib-parsems/src/java/org/apache/nutch/parse/ms/MSBaseParser.java",
                "blob_url": "https://github.com/apache/nutch/blob/b2cdf59e7403ddd9787be755f204a9a007196530/src/plugin/lib-parsems/src/java/org/apache/nutch/parse/ms/MSBaseParser.java",
                "raw_url": "https://github.com/apache/nutch/raw/b2cdf59e7403ddd9787be755f204a9a007196530/src/plugin/lib-parsems/src/java/org/apache/nutch/parse/ms/MSBaseParser.java",
                "status": "modified",
                "changes": 10,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/plugin/lib-parsems/src/java/org/apache/nutch/parse/ms/MSBaseParser.java?ref=b2cdf59e7403ddd9787be755f204a9a007196530",
                "patch": "@@ -85,15 +85,17 @@ protected Parse getParse(MSExtractor extractor, Content content) {\n       \n     } catch (Exception e) {\n       return new ParseStatus(ParseStatus.FAILED,\n-                             \"Can't be handled as micrsosoft document. \" + e)\n+                             \"Can't be handled as Microsoft document. \" + e)\n                              .getEmptyParse(this.conf);\n     }\n     \n     // collect meta data\n     Metadata metadata = new Metadata();\n-    title = properties.getProperty(DublinCore.TITLE);\n-    properties.remove(DublinCore.TITLE);\n-    metadata.setAll(properties);\n+    if (properties != null) {\n+      title = properties.getProperty(DublinCore.TITLE);\n+      properties.remove(DublinCore.TITLE);\n+      metadata.setAll(properties);\n+    }\n \n     if (text == null) { text = \"\"; }\n     if (title == null) { title = \"\"; }",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "Don't create dummy Content (throws NPE), just pass null. Reported by\nRichard Braman.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@449738 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/b8c4bea5d3f2767685c07a99cea8ecce248d2434",
        "parent": "https://github.com/apache/nutch/commit/78c78955121cafaa837cc0563ae47b0313ef6599",
        "bug_id": "nutch_43",
        "file": [
            {
                "sha": "6cdd7826a104e6f1fea5e95a948e4b826650d96d",
                "filename": "src/plugin/lib-http/src/java/org/apache/nutch/protocol/http/api/HttpBase.java",
                "blob_url": "https://github.com/apache/nutch/blob/b8c4bea5d3f2767685c07a99cea8ecce248d2434/src/plugin/lib-http/src/java/org/apache/nutch/protocol/http/api/HttpBase.java",
                "raw_url": "https://github.com/apache/nutch/raw/b8c4bea5d3f2767685c07a99cea8ecce248d2434/src/plugin/lib-http/src/java/org/apache/nutch/protocol/http/api/HttpBase.java",
                "status": "modified",
                "changes": 4,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/plugin/lib-http/src/java/org/apache/nutch/protocol/http/api/HttpBase.java?ref=b8c4bea5d3f2767685c07a99cea8ecce248d2434",
                "patch": "@@ -193,9 +193,7 @@ public ProtocolOutput getProtocolOutput(UTF8 url, CrawlDatum datum) {\n         // skip this page, otherwise the thread would block for too long.\n         LOGGER.info(\"Skipping: \" + u + \" exceeds fetcher.max.crawl.delay, max=\"\n                 + (maxCrawlDelay / 1000) + \", Crawl-Delay=\" + (delay / 1000));\n-        Content c = new Content(u.toString(), u.toString(), EMPTY_CONTENT,\n-                null, null, this.conf);\n-        return new ProtocolOutput(c, ProtocolStatus.STATUS_WOULDBLOCK);\n+        return new ProtocolOutput(null, ProtocolStatus.STATUS_WOULDBLOCK);\n       }\n       String host;\n       try {",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "Fix an NPE when using searcher.max.hits, but NOT using time limit.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@447363 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/58fbc0709988369a7916389169886bb5f51fa411",
        "parent": "https://github.com/apache/nutch/commit/28be513e858c840726f456442c1e0d59683d7852",
        "bug_id": "nutch_44",
        "file": [
            {
                "sha": "8ffc33d070153a0766a260dd2feca255cee159ca",
                "filename": "src/java/org/apache/nutch/searcher/LuceneQueryOptimizer.java",
                "blob_url": "https://github.com/apache/nutch/blob/58fbc0709988369a7916389169886bb5f51fa411/src/java/org/apache/nutch/searcher/LuceneQueryOptimizer.java",
                "raw_url": "https://github.com/apache/nutch/raw/58fbc0709988369a7916389169886bb5f51fa411/src/java/org/apache/nutch/searcher/LuceneQueryOptimizer.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/searcher/LuceneQueryOptimizer.java?ref=58fbc0709988369a7916389169886bb5f51fa411",
                "patch": "@@ -104,8 +104,10 @@ public LimitedCollector(int numHits, int maxHits, int maxTicks,\n       super(numHits);\n       this.maxHits = maxHits;\n       this.maxTicks = maxTicks;\n-      this.timer = timer;\n-      this.startTicks = timer.timeCounter;\n+      if (timer != null) {\n+    \tthis.timer = timer;\n+        this.startTicks = timer.timeCounter;\n+      }\n     }\n \n     public void collect(int doc, float score) {",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "NUTCH-298 : No more NPE if a 404 for a robots.txt + some unit tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@411926 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/04df178b376eaae7bf5a7fbcf044a13369a17b82",
        "parent": "https://github.com/apache/nutch/commit/7b6abacf81e063ddbe0b4cffce176c158137ed8b",
        "bug_id": "nutch_45",
        "file": [
            {
                "sha": "a8f9072dd29edde1eaca4cf2062fd4c5c816eefc",
                "filename": "src/plugin/lib-http/src/java/org/apache/nutch/protocol/http/api/RobotRulesParser.java",
                "blob_url": "https://github.com/apache/nutch/blob/04df178b376eaae7bf5a7fbcf044a13369a17b82/src/plugin/lib-http/src/java/org/apache/nutch/protocol/http/api/RobotRulesParser.java",
                "raw_url": "https://github.com/apache/nutch/raw/04df178b376eaae7bf5a7fbcf044a13369a17b82/src/plugin/lib-http/src/java/org/apache/nutch/protocol/http/api/RobotRulesParser.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/plugin/lib-http/src/java/org/apache/nutch/protocol/http/api/RobotRulesParser.java?ref=04df178b376eaae7bf5a7fbcf044a13369a17b82",
                "patch": "@@ -70,8 +70,8 @@\n    * file, and can test paths against those rules.\n    */\n   public static class RobotRuleSet {\n-    ArrayList tmpEntries;\n-    RobotsEntry[] entries;\n+    ArrayList tmpEntries = new ArrayList();\n+    RobotsEntry[] entries = null;\n     long expireTime;\n \n     /**",
                "deletions": 2
            },
            {
                "sha": "4040a45a455254184346b78b6f7b6b58a74349da",
                "filename": "src/plugin/lib-http/src/test/org/apache/nutch/protocol/http/api/TestRobotRulesParser.java",
                "blob_url": "https://github.com/apache/nutch/blob/04df178b376eaae7bf5a7fbcf044a13369a17b82/src/plugin/lib-http/src/test/org/apache/nutch/protocol/http/api/TestRobotRulesParser.java",
                "raw_url": "https://github.com/apache/nutch/raw/04df178b376eaae7bf5a7fbcf044a13369a17b82/src/plugin/lib-http/src/test/org/apache/nutch/protocol/http/api/TestRobotRulesParser.java",
                "status": "modified",
                "changes": 47,
                "additions": 44,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/plugin/lib-http/src/test/org/apache/nutch/protocol/http/api/TestRobotRulesParser.java?ref=04df178b376eaae7bf5a7fbcf044a13369a17b82",
                "patch": "@@ -25,7 +25,29 @@\n   private static final String CR= \"\\r\";\n   private static final String CRLF= \"\\r\\n\";\n   \n-\n+  private static final boolean[] ACCEPT_ALL = {\n+    true,   // \"/a\",\t      \n+    true,   // \"/a/\",\t      \n+    true,   // \"/a/bloh/foo.html\"\n+    true,   // \"/b\",\t      \n+    true,   // \"/b/a\",\t      \n+    true,   // \"/b/a/index.html\",\n+    true,   // \"/b/b/foo.html\",  \n+    true,   // \"/c\",\t      \n+    true,   // \"/c/a\",\t      \n+    true,   // \"/c/a/index.html\",\n+    true,   // \"/c/b/foo.html\",  \n+    true,   // \"/d\",\t      \n+    true,   // \"/d/a\",\t      \n+    true,   // \"/e/a/index.html\",\n+    true,   // \"/e/d\",\t      \n+    true,   // \"/e/d/foo.html\",  \n+    true,   // \"/e/doh.html\",    \n+    true,   // \"/f/index.html\",  \n+    true,   // \"/foo/bar.html\",  \n+    true,   // \"/f/\",\n+  };\n+  \n   private static final String[] ROBOTS_STRINGS= new String[] {\n     \"User-Agent: Agent1 #foo\" + CR \n     + \"Disallow: /a\" + CR \n@@ -40,6 +62,7 @@\n     + \"\" + CR \n     + \"User-Agent: *\" + CR \n     + \"Disallow: /foo/bar/\" + CR,\n+    null  // Used to test EMPTY_RULES\n   };\n \n   private static final String[] AGENT_STRINGS= new String[] {\n@@ -57,7 +80,14 @@\n       false,\n       false,\n       true,\n-    }\n+    },\n+    { \n+      false, \n+      false,\n+      false,\n+      false,\n+      true,\n+    }    \n   };\n \n   private static final String[] TEST_PATHS= new String[] {\n@@ -195,6 +225,13 @@\n \tfalse,  // \"/foo/bar.html\",  \n \ttrue,   // \"/f/\",  \n       }\n+    },\n+    { // ROBOTS_STRINGS[1]\n+      ACCEPT_ALL, // Agent 1\n+      ACCEPT_ALL, // Agent 2\n+      ACCEPT_ALL, // Agent 3\n+      ACCEPT_ALL, // Agent 4\n+      ACCEPT_ALL, // Agent 5\n     }\n   };\n  \n@@ -233,7 +270,9 @@ public void testRobots(int robotsString, String[] agents, String[] paths,\n     for (int i= 1; i < agents.length; i++)\n       agentsString= agentsString + \",\" + agents[i];\n     RobotRulesParser p= new RobotRulesParser(agents);\n-    RobotRuleSet rules= p.parseRules(ROBOTS_STRINGS[robotsString].getBytes());\n+    RobotRuleSet rules= p.parseRules(ROBOTS_STRINGS[robotsString] != null\n+                                     ? ROBOTS_STRINGS[robotsString].getBytes()\n+                                     : null);\n     for (int i= 0; i < paths.length; i++) {\n       assertTrue(\"testing robots file \"+robotsString+\", on agents (\"\n \t\t + agentsString + \"), and path \" + TEST_PATHS[i] + \"; got \" \n@@ -243,4 +282,6 @@ public void testRobots(int robotsString, String[] agents, String[] paths,\n     }\n   }\n \n+\n+  \n }",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "Pages with only STATUS_DB_GONE were unaccounted for, which caused an NPE.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@392056 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/23182b9ec3ff2a3a3e61c30bad4fc78a30a999c9",
        "parent": "https://github.com/apache/nutch/commit/b0c8b61b404328de415f57fe468d7d03eb5cae87",
        "bug_id": "nutch_46",
        "file": [
            {
                "sha": "cbfaf38b1b8254a9fbf587d50ec4d7e7042d65a4",
                "filename": "src/java/org/apache/nutch/crawl/CrawlDbReducer.java",
                "blob_url": "https://github.com/apache/nutch/blob/23182b9ec3ff2a3a3e61c30bad4fc78a30a999c9/src/java/org/apache/nutch/crawl/CrawlDbReducer.java",
                "raw_url": "https://github.com/apache/nutch/raw/23182b9ec3ff2a3a3e61c30bad4fc78a30a999c9/src/java/org/apache/nutch/crawl/CrawlDbReducer.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/crawl/CrawlDbReducer.java?ref=23182b9ec3ff2a3a3e61c30bad4fc78a30a999c9",
                "patch": "@@ -52,6 +52,7 @@ public void reduce(WritableComparable key, Iterator values,\n       switch (datum.getStatus()) {                // find old entry, if any\n       case CrawlDatum.STATUS_DB_UNFETCHED:\n       case CrawlDatum.STATUS_DB_FETCHED:\n+      case CrawlDatum.STATUS_DB_GONE:\n         old = datum;\n         break;\n       case CrawlDatum.STATUS_LINKED:",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "Set the configuration of the parser used in the main method to fix NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@388293 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/58d355cfa035ae850682efe9019d070d1dae827d",
        "parent": "https://github.com/apache/nutch/commit/37c5ffe04361630c20e287b93f741a0af22e0cb5",
        "bug_id": "nutch_47",
        "file": [
            {
                "sha": "502d37fbcca6bc04c2457ec6bb8350ccbf334b89",
                "filename": "src/plugin/parse-html/src/java/org/apache/nutch/parse/html/HtmlParser.java",
                "blob_url": "https://github.com/apache/nutch/blob/58d355cfa035ae850682efe9019d070d1dae827d/src/plugin/parse-html/src/java/org/apache/nutch/parse/html/HtmlParser.java",
                "raw_url": "https://github.com/apache/nutch/raw/58d355cfa035ae850682efe9019d070d1dae827d/src/plugin/parse-html/src/java/org/apache/nutch/parse/html/HtmlParser.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/plugin/parse-html/src/java/org/apache/nutch/parse/html/HtmlParser.java?ref=58d355cfa035ae850682efe9019d070d1dae827d",
                "patch": "@@ -269,9 +269,11 @@ public static void main(String[] args) throws Exception {\n     byte[] bytes = new byte[(int)file.length()];\n     DataInputStream in = new DataInputStream(new FileInputStream(file));\n     in.readFully(bytes);\n-    Parse parse = new HtmlParser().getParse(\n-            new Content(url, url, bytes, \"text/html\", new Metadata(),\n-                        NutchConfiguration.create()));\n+    Configuration conf = NutchConfiguration.create();\n+    HtmlParser parser = new HtmlParser();\n+    parser.setConf(conf);\n+    Parse parse = parser.getParse(\n+            new Content(url, url, bytes, \"text/html\", new Metadata(), conf));\n     System.out.println(\"data: \"+parse.getData());\n \n     System.out.println(\"text: \"+parse.getText());",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "Fixed an NPE, in case of a fetch error we don't have a score value\nfrom Fetcher.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@365576 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/1e9b9fdd39d33b33430ef606b4ab4faee9a03ca3",
        "parent": "https://github.com/apache/nutch/commit/dc37909510ee8fb18e97f5d42d925670b144cb12",
        "bug_id": "nutch_48",
        "file": [
            {
                "sha": "0c97f950df0e6e497b4076a6481da1fb91f13be9",
                "filename": "src/java/org/apache/nutch/parse/ParseOutputFormat.java",
                "blob_url": "https://github.com/apache/nutch/blob/1e9b9fdd39d33b33430ef606b4ab4faee9a03ca3/src/java/org/apache/nutch/parse/ParseOutputFormat.java",
                "raw_url": "https://github.com/apache/nutch/raw/1e9b9fdd39d33b33430ef606b4ab4faee9a03ca3/src/java/org/apache/nutch/parse/ParseOutputFormat.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/parse/ParseOutputFormat.java?ref=1e9b9fdd39d33b33430ef606b4ab4faee9a03ca3",
                "patch": "@@ -37,7 +37,8 @@ public RecordWriter getRecordWriter(NutchFileSystem fs, JobConf job,\n                                       String name) throws IOException {\n \n     final float interval = job.getFloat(\"db.default.fetch.interval\", 30f);\n-\n+    final float extscore = job.getFloat(\"db.score.link.external\", 1.0f);\n+    \n     File text =\n       new File(new File(job.getOutputDir(), ParseText.DIR_NAME), name);\n     File data =\n@@ -81,8 +82,10 @@ public void write(WritableComparable key, Writable value)\n           Outlink[] links = parse.getData().getOutlinks();\n \n           // compute OPIC score contribution\n-          float score =\n-            Float.parseFloat(parse.getData().get(Fetcher.SCORE_KEY));\n+          String scoreString = parse.getData().get(Fetcher.SCORE_KEY);\n+          float score = extscore;\n+          // this may happen if there was a fetch error.\n+         if (scoreString != null) score = Float.parseFloat(scoreString);\n           score /= links.length;\n                           \n           for (int i = 0; i < links.length; i++) {",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "Outlink: when null anchor is supplied replace it with an empty string.\n\nParseSegment: store segment name in parts that we produce here. Content is\nonly read, not stored as one of the outputs. Failure to do that results in\nNPE in Indexer.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@507504 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/fff8abbc9f392eefeb779babba2b4487484f0f5f",
        "parent": "https://github.com/apache/nutch/commit/aaca5dc7d8e627659b4f34a56fd2dbb356290732",
        "bug_id": "nutch_49",
        "file": [
            {
                "sha": "4081ef239e2781ba1f9ecc155d264071af5b6d1c",
                "filename": "src/java/org/apache/nutch/parse/Outlink.java",
                "blob_url": "https://github.com/apache/nutch/blob/fff8abbc9f392eefeb779babba2b4487484f0f5f/src/java/org/apache/nutch/parse/Outlink.java",
                "raw_url": "https://github.com/apache/nutch/raw/fff8abbc9f392eefeb779babba2b4487484f0f5f/src/java/org/apache/nutch/parse/Outlink.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/parse/Outlink.java?ref=fff8abbc9f392eefeb779babba2b4487484f0f5f",
                "patch": "@@ -34,6 +34,7 @@ public Outlink() {}\n \n   public Outlink(String toUrl, String anchor, Configuration conf) throws MalformedURLException {\n     this.toUrl = new URLNormalizers(conf, URLNormalizers.SCOPE_OUTLINK).normalize(toUrl, URLNormalizers.SCOPE_OUTLINK);\n+    if (anchor == null) anchor = \"\";\n     this.anchor = anchor;\n   }\n ",
                "deletions": 0
            },
            {
                "sha": "54c2d42d50f01da61c3353bfdaf8416db9c96ff3",
                "filename": "src/java/org/apache/nutch/parse/ParseSegment.java",
                "blob_url": "https://github.com/apache/nutch/blob/fff8abbc9f392eefeb779babba2b4487484f0f5f/src/java/org/apache/nutch/parse/ParseSegment.java",
                "raw_url": "https://github.com/apache/nutch/raw/fff8abbc9f392eefeb779babba2b4487484f0f5f/src/java/org/apache/nutch/parse/ParseSegment.java",
                "status": "modified",
                "changes": 10,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/parse/ParseSegment.java?ref=fff8abbc9f392eefeb779babba2b4487484f0f5f",
                "patch": "@@ -81,7 +81,10 @@ public void map(WritableComparable key, Writable value,\n \n     // compute the new signature\n     byte[] signature = SignatureFactory.getSignature(getConf()).calculate(content, parse);\n-    content.getMetadata().set(Nutch.SIGNATURE_KEY, StringUtil.toHexString(signature));\n+    if (parse != null) {\n+      parse.getData().getContentMeta().set(Nutch.SIGNATURE_KEY, StringUtil.toHexString(signature));\n+      parse.getData().getContentMeta().set(Nutch.SEGMENT_NAME_KEY, getConf().get(Nutch.SEGMENT_NAME_KEY));\n+    }\n     \n     if (status.isSuccess()) {\n       try {\n@@ -95,7 +98,7 @@ public void map(WritableComparable key, Writable value,\n       }\n       output.collect(key, new ParseImpl(parse.getText(), parse.getData()));\n     } else if (LOG.isWarnEnabled()) {\n-      LOG.warn(\"Error parsing: \"+key+\": \"+status.toString());\n+      LOG.warn(\"Error parsing: \" + key + \": \"+status.toString());\n     }\n   }\n \n@@ -116,9 +119,8 @@ public void parse(Path segment) throws IOException {\n     job.setJobName(\"parse \" + segment);\n \n     job.setInputPath(new Path(segment, Content.DIR_NAME));\n+    job.set(Nutch.SEGMENT_NAME_KEY, segment.getName());\n     job.setInputFormat(SequenceFileInputFormat.class);\n-    job.setInputKeyClass(Text.class);\n-    job.setInputValueClass(Content.class);\n     job.setMapperClass(ParseSegment.class);\n     job.setReducerClass(ParseSegment.class);\n     ",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "When indexing redirected pages, drop intermediate pages and only index the\nfinal page.\n\nAvoid NPEs in Crawl tool, when no URLs are generated or fetched.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@495214 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/8018fa044a5a250944b7f6fe184421d777f00f55",
        "parent": "https://github.com/apache/nutch/commit/d46cb0bdf18e337a8e7651bfef980e14769b700f",
        "bug_id": "nutch_50",
        "file": [
            {
                "sha": "577a4709e2bf744040c4b6a7d7ba965a6c095e7d",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/nutch/blob/8018fa044a5a250944b7f6fe184421d777f00f55/CHANGES.txt",
                "raw_url": "https://github.com/apache/nutch/raw/8018fa044a5a250944b7f6fe184421d777f00f55/CHANGES.txt",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/CHANGES.txt?ref=8018fa044a5a250944b7f6fe184421d777f00f55",
                "patch": "@@ -123,6 +123,9 @@ Unreleased changes (0.9-dev)\n 39. NUTCH-421 - Allow predeterminate running order of indexing filters\n     (Alan Tanaman, siren)\n \n+40. When indexing pages with redirection, drop all intermediate pages and\n+    index only the final page. (ab)\n+\n \n Release 0.8 - 2006-07-25\n ",
                "deletions": 0
            },
            {
                "sha": "9eb19872379a2a31ced4f1adb92a95ed4991ab34",
                "filename": "src/java/org/apache/nutch/crawl/Crawl.java",
                "blob_url": "https://github.com/apache/nutch/blob/8018fa044a5a250944b7f6fe184421d777f00f55/src/java/org/apache/nutch/crawl/Crawl.java",
                "raw_url": "https://github.com/apache/nutch/raw/8018fa044a5a250944b7f6fe184421d777f00f55/src/java/org/apache/nutch/crawl/Crawl.java",
                "status": "modified",
                "changes": 22,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/crawl/Crawl.java?ref=8018fa044a5a250944b7f6fe184421d777f00f55",
                "patch": "@@ -113,8 +113,8 @@ public static void main(String args[]) throws Exception {\n       \n     // initialize crawlDb\n     injector.inject(crawlDb, rootUrlDir);\n-      \n-    for (int i = 0; i < depth; i++) {             // generate new segment\n+    int i;\n+    for (i = 0; i < depth; i++) {             // generate new segment\n       Path segment = generator.generate(crawlDb, segments, -1, topN, System\n           .currentTimeMillis(), false, false);\n       if (segment == null) {\n@@ -127,14 +127,16 @@ public static void main(String args[]) throws Exception {\n       }\n       crawlDbTool.update(crawlDb, new Path[]{segment}, true, true); // update crawldb\n     }\n-      \n-    linkDbTool.invert(linkDb, segments, true, true, false); // invert links\n-\n-    // index, dedup & merge\n-    indexer.index(indexes, crawlDb, linkDb, fs.listPaths(segments));\n-    dedup.dedup(new Path[] { indexes });\n-    merger.merge(fs.listPaths(indexes), index, tmpDir);\n-\n+    if (i > 0) {\n+      linkDbTool.invert(linkDb, segments, true, true, false); // invert links\n+\n+      // index, dedup & merge\n+      indexer.index(indexes, crawlDb, linkDb, fs.listPaths(segments));\n+      dedup.dedup(new Path[] { indexes });\n+      merger.merge(fs.listPaths(indexes), index, tmpDir);\n+    } else {\n+      LOG.warn(\"No URLs to fetch - check your seed list and URL filters.\");\n+    }\n     if (LOG.isInfoEnabled()) { LOG.info(\"crawl finished: \" + dir); }\n   }\n }",
                "deletions": 10
            },
            {
                "sha": "26963b8489229b548bd89697b953640ebab92a38",
                "filename": "src/java/org/apache/nutch/indexer/Indexer.java",
                "blob_url": "https://github.com/apache/nutch/blob/8018fa044a5a250944b7f6fe184421d777f00f55/src/java/org/apache/nutch/indexer/Indexer.java",
                "raw_url": "https://github.com/apache/nutch/raw/8018fa044a5a250944b7f6fe184421d777f00f55/src/java/org/apache/nutch/indexer/Indexer.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/indexer/Indexer.java?ref=8018fa044a5a250944b7f6fe184421d777f00f55",
                "patch": "@@ -182,6 +182,7 @@ public void reduce(WritableComparable key, Iterator values,\n     Inlinks inlinks = null;\n     CrawlDatum dbDatum = null;\n     CrawlDatum fetchDatum = null;\n+    CrawlDatum redir = null;\n     ParseData parseData = null;\n     ParseText parseText = null;\n     while (values.hasNext()) {\n@@ -194,6 +195,9 @@ public void reduce(WritableComparable key, Iterator values,\n           dbDatum = datum;\n         else if (CrawlDatum.hasFetchStatus(datum))\n           fetchDatum = datum;\n+        else if (CrawlDatum.STATUS_LINKED == datum.getStatus())\n+          // redirected page\n+          redir = datum;\n         else\n           throw new RuntimeException(\"Unexpected status: \"+datum.getStatus());\n       } else if (value instanceof ParseData) {\n@@ -204,6 +208,11 @@ else if (CrawlDatum.hasFetchStatus(datum))\n         LOG.warn(\"Unrecognized type: \"+value.getClass());\n       }\n     }      \n+    if (redir != null) {\n+      // XXX page was redirected - what should we do?\n+      // XXX discard it for now\n+      return;\n+    }\n \n     if (fetchDatum == null || dbDatum == null\n         || parseText == null || parseData == null) {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "Use different status code when recording a redirected terget URL without\nfetching. Fix also an NPE in Crawl when Generator doesn't produce any\nnew segment. Reported by Meghna Kukreja.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@492525 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/78106e3663b696dc175ee0cece299b40ca1116de",
        "parent": "https://github.com/apache/nutch/commit/93475d193a633589643c684359c99b3cbcf0e143",
        "bug_id": "nutch_51",
        "file": [
            {
                "sha": "9f4fc8ddc2a8efa09052ad75b09f68d405078da7",
                "filename": "src/java/org/apache/nutch/crawl/Crawl.java",
                "blob_url": "https://github.com/apache/nutch/blob/78106e3663b696dc175ee0cece299b40ca1116de/src/java/org/apache/nutch/crawl/Crawl.java",
                "raw_url": "https://github.com/apache/nutch/raw/78106e3663b696dc175ee0cece299b40ca1116de/src/java/org/apache/nutch/crawl/Crawl.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/crawl/Crawl.java?ref=78106e3663b696dc175ee0cece299b40ca1116de",
                "patch": "@@ -117,6 +117,10 @@ public static void main(String args[]) throws Exception {\n     for (int i = 0; i < depth; i++) {             // generate new segment\n       Path segment = generator.generate(crawlDb, segments, -1, topN, System\n           .currentTimeMillis(), false, false);\n+      if (segment == null) {\n+        LOG.info(\"Stopping at depth=\" + i + \" - no more URLs to fetch.\");\n+        break;\n+      }\n       fetcher.fetch(segment, threads);  // fetch it\n       if (!Fetcher.isParsing(job)) {\n         parseSegment.parse(segment);    // parse it, if needed",
                "deletions": 0
            },
            {
                "sha": "9e681bf8b122f0d102b231f066b2243dd1a495d9",
                "filename": "src/java/org/apache/nutch/fetcher/Fetcher.java",
                "blob_url": "https://github.com/apache/nutch/blob/78106e3663b696dc175ee0cece299b40ca1116de/src/java/org/apache/nutch/fetcher/Fetcher.java",
                "raw_url": "https://github.com/apache/nutch/raw/78106e3663b696dc175ee0cece299b40ca1116de/src/java/org/apache/nutch/fetcher/Fetcher.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/fetcher/Fetcher.java?ref=78106e3663b696dc175ee0cece299b40ca1116de",
                "patch": "@@ -157,6 +157,8 @@ public void run() {\n                   newUrl = normalizers.normalize(newUrl, URLNormalizers.SCOPE_FETCHER);\n                   newUrl = this.urlFilters.filter(newUrl);\n                   if (newUrl != null && !newUrl.equals(url.toString())) {\n+                    // record that we were redirected\n+                    output(url, datum, null, status, CrawlDatum.STATUS_FETCH_REDIR_PERM);\n                     url = new Text(newUrl);\n                     if (maxRedirect > 0) {\n                       redirecting = true;\n@@ -165,7 +167,7 @@ public void run() {\n                         LOG.debug(\" - content redirect to \" + url + \" (fetching now)\");\n                       }\n                     } else {\n-                      output(url, new CrawlDatum(), null, null, CrawlDatum.STATUS_FETCH_REDIR_TEMP);\n+                      output(url, new CrawlDatum(), null, null, CrawlDatum.STATUS_LINKED);\n                       if (LOG.isDebugEnabled()) {\n                         LOG.debug(\" - content redirect to \" + url + \" (fetching later)\");\n                       }\n@@ -198,7 +200,7 @@ public void run() {\n                       LOG.debug(\" - protocol redirect to \" + url + \" (fetching now)\");\n                     }\n                   } else {\n-                    output(url, new CrawlDatum(), null, null, code);\n+                    output(url, new CrawlDatum(), null, null, CrawlDatum.STATUS_LINKED);\n                     if (LOG.isDebugEnabled()) {\n                       LOG.debug(\" - protocol redirect to \" + url + \" (fetching later)\");\n                     }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "NUTCH-575 - NPE in OpenSearchServlet when summary is null.  This is present in any searches using NutchBean and hence fetchesSegments getSummary.  I am committing this basic batch as this is preventing people from searching with the current trunk.  I will track down this problem further and apply a more complete patch as time permits.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@606711 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/7f29db1d07b47e5015455519403585cccb0b8a67",
        "parent": "https://github.com/apache/nutch/commit/ca8be904e67cb4f9ed706a51929b8cf372e89272",
        "bug_id": "nutch_52",
        "file": [
            {
                "sha": "16f1db0a1f0a0a98003a16fc9db6b3249fb92c38",
                "filename": "src/java/org/apache/nutch/searcher/FetchedSegments.java",
                "blob_url": "https://github.com/apache/nutch/blob/7f29db1d07b47e5015455519403585cccb0b8a67/src/java/org/apache/nutch/searcher/FetchedSegments.java",
                "raw_url": "https://github.com/apache/nutch/raw/7f29db1d07b47e5015455519403585cccb0b8a67/src/java/org/apache/nutch/searcher/FetchedSegments.java",
                "status": "modified",
                "changes": 8,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/searcher/FetchedSegments.java?ref=7f29db1d07b47e5015455519403585cccb0b8a67",
                "patch": "@@ -154,9 +154,13 @@ public ParseText getParseText(HitDetails details) throws IOException {\n \n   public Summary getSummary(HitDetails details, Query query)\n     throws IOException {\n-\n+    \n     if (this.summarizer == null) { return new Summary(); }\n-    String text = getSegment(details).getParseText(getUrl(details)).getText();\n+    \n+    Segment segment = getSegment(details);\n+    ParseText parseText = segment.getParseText(getUrl(details));\n+    String text = (parseText != null) ? parseText.getText() : \"\";\n+    \n     return this.summarizer.getSummary(text, query);\n   }\n     ",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "nutch",
        "message": "SegmentMerger bug-fixes and improvements:\n\n* replace deprecated use of java.io.File with Hadoop's Path.\n\n* old segment name from Content.metadata needs to be replaced with\n  the new segment name. This was causing NPE-s when getting hit\n  summaries.\n\n* SegmentMerger will now always create its output in a subdirectory\n  of the output_dir argument. All newly created segments will follow\n  the same naming convention as other segments (i.e. yyyyMMddHHmmss),\n  and use sequential suffixes for sliced segments (yyyyMMddHHmmss-NN).\n\nRename Generator.getDate() to Generator.generateSegmentName(), and\nmake it public. Additionally, this method now will try to ensure that\nunique segment names are created.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@410377 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/nutch/commit/db27c6473b8733b63ef025c221baccd3a7756417",
        "parent": "https://github.com/apache/nutch/commit/db5d2865c2204cade87600cb89a0dcd88d372077",
        "bug_id": "nutch_53",
        "file": [
            {
                "sha": "11189fd1028a7a83c0e9545ff825849f35f278cc",
                "filename": "src/java/org/apache/nutch/crawl/Generator.java",
                "blob_url": "https://github.com/apache/nutch/blob/db27c6473b8733b63ef025c221baccd3a7756417/src/java/org/apache/nutch/crawl/Generator.java",
                "raw_url": "https://github.com/apache/nutch/raw/db27c6473b8733b63ef025c221baccd3a7756417/src/java/org/apache/nutch/crawl/Generator.java",
                "status": "modified",
                "changes": 11,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/crawl/Generator.java?ref=db27c6473b8733b63ef025c221baccd3a7756417",
                "patch": "@@ -243,7 +243,7 @@ public Path generate(Path dbDir, Path segments,\n                \"/generate-temp-\"+\n                Integer.toString(new Random().nextInt(Integer.MAX_VALUE)));\n \n-    Path segment = new Path(segments, getDate());\n+    Path segment = new Path(segments, generateSegmentName());\n     Path output = new Path(segment, CrawlDatum.GENERATE_DIR_NAME);\n \n     LOG.info(\"Generator: starting\");\n@@ -305,9 +305,14 @@ public Path generate(Path dbDir, Path segments,\n \n     return segment;\n   }\n+  \n+  private static SimpleDateFormat sdf = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n \n-  private static String getDate() {\n-    return new SimpleDateFormat(\"yyyyMMddHHmmss\").format\n+  public static synchronized String generateSegmentName() {\n+    try {\n+      Thread.sleep(1000);\n+    } catch (Throwable t) {};\n+    return sdf.format\n       (new Date(System.currentTimeMillis()));\n   }\n ",
                "deletions": 3
            },
            {
                "sha": "5ee4031e1eb3f8bb415b102884fc5f1ce4eabda6",
                "filename": "src/java/org/apache/nutch/segment/SegmentMerger.java",
                "blob_url": "https://github.com/apache/nutch/blob/db27c6473b8733b63ef025c221baccd3a7756417/src/java/org/apache/nutch/segment/SegmentMerger.java",
                "raw_url": "https://github.com/apache/nutch/raw/db27c6473b8733b63ef025c221baccd3a7756417/src/java/org/apache/nutch/segment/SegmentMerger.java",
                "status": "modified",
                "changes": 93,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/segment/SegmentMerger.java?ref=db27c6473b8733b63ef025c221baccd3a7756417",
                "patch": "@@ -16,17 +16,19 @@\n \n package org.apache.nutch.segment;\n \n-import java.io.File;\n-import java.io.FileFilter;\n import java.io.IOException;\n import java.util.*;\n import java.util.logging.Logger;\n \n import org.apache.hadoop.conf.*;\n import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.PathFilter;\n import org.apache.hadoop.io.*;\n import org.apache.hadoop.mapred.*;\n import org.apache.nutch.crawl.CrawlDatum;\n+import org.apache.nutch.crawl.Generator;\n+import org.apache.nutch.fetcher.Fetcher;\n import org.apache.nutch.metadata.Metadata;\n import org.apache.nutch.net.URLFilters;\n import org.apache.nutch.parse.ParseData;\n@@ -104,7 +106,7 @@ public RecordReader getRecordReader(FileSystem fs, FileSplit split, JobConf job,\n \n       reporter.setStatus(split.toString());\n       // find part name\n-      String dir = split.getFile().toString().replace('\\\\', '/');\n+      String dir = split.getPath().toString().replace('\\\\', '/');\n       int idx = dir.lastIndexOf(\"/part-\");\n       if (idx == -1) {\n         throw new IOException(\"Cannot determine segment part: \" + dir);\n@@ -173,6 +175,7 @@ public RecordWriter getRecordWriter(final FileSystem fs, final JobConf job, fina\n         SequenceFile.Writer g_out = null;\n         SequenceFile.Writer p_out = null;\n         HashMap sliceWriters = new HashMap();\n+        String segmentName = job.get(\"segment.merger.segmentName\");\n         \n         public void write(WritableComparable key, Writable value) throws IOException {\n           // unwrap\n@@ -205,12 +208,24 @@ public void write(WritableComparable key, Writable value) throws IOException {\n             slice = ((Content)o).getMetadata().get(sliceMarker);\n             ((Content)o).getMetadata().remove(sliceMarker);\n             ((Content)o).getMetadata().remove(nameMarker);\n+            // update the segment name inside metadata\n+            if (slice == null) {\n+              ((Content)o).getMetadata().set(Fetcher.SEGMENT_NAME_KEY, segmentName);\n+            } else {\n+              ((Content)o).getMetadata().set(Fetcher.SEGMENT_NAME_KEY, segmentName + \"-\" + slice);\n+            }\n             c_out = ensureMapFile(slice, Content.DIR_NAME, Content.class);\n             c_out.append(key, o);\n           } else if (o instanceof ParseData) {\n             slice = ((ParseData)o).getParseMeta().get(sliceMarker);\n             ((ParseData)o).getParseMeta().remove(sliceMarker);\n             ((ParseData)o).getParseMeta().remove(nameMarker);\n+            // update the segment name inside contentMeta - required by Indexer\n+            if (slice == null) {\n+              ((ParseData)o).getContentMeta().set(Fetcher.SEGMENT_NAME_KEY, segmentName);\n+            } else {\n+              ((ParseData)o).getContentMeta().set(Fetcher.SEGMENT_NAME_KEY, segmentName + \"-\" + slice);\n+            }\n             pd_out = ensureMapFile(slice, ParseData.DIR_NAME, ParseData.class);\n             pd_out.append(key, o);\n           } else if (o instanceof ParseText) {\n@@ -243,11 +258,11 @@ public void write(WritableComparable key, Writable value) throws IOException {\n           if (slice == null) slice = DEFAULT_SLICE;\n           SequenceFile.Writer res = (SequenceFile.Writer)sliceWriters.get(slice + dirName);\n           if (res != null) return res;\n-          String wname;\n+          Path wname;\n           if (slice == DEFAULT_SLICE) {\n-            wname = new File(new File(job.getOutputDir(), dirName), name).toString();\n+            wname = new Path(new Path(new Path(job.getOutputPath(), segmentName), dirName), name);\n           } else {\n-            wname = new File(new File(new File(job.getOutputDir(), slice), dirName), name).toString();\n+            wname = new Path(new Path(new Path(job.getOutputPath(), segmentName + \"-\" + slice), dirName), name);\n           }\n           res = new SequenceFile.Writer(fs, wname, UTF8.class, CrawlDatum.class);\n           sliceWriters.put(slice + dirName, res);\n@@ -259,13 +274,13 @@ public void write(WritableComparable key, Writable value) throws IOException {\n           if (slice == null) slice = DEFAULT_SLICE;\n           MapFile.Writer res = (MapFile.Writer)sliceWriters.get(slice + dirName);\n           if (res != null) return res;\n-          String wname;\n+          Path wname;\n           if (slice == DEFAULT_SLICE) {\n-            wname = new File(new File(job.getOutputDir(), dirName), name).toString();\n+            wname = new Path(new Path(new Path(job.getOutputPath(), segmentName), dirName), name);\n           } else {\n-            wname = new File(new File(new File(job.getOutputDir(), slice), dirName), name).toString();\n+            wname = new Path(new Path(new Path(job.getOutputPath(), segmentName + \"-\" + slice), dirName), name);\n           }\n-          res = new MapFile.Writer(fs, wname, UTF8.class, clazz);\n+          res = new MapFile.Writer(fs, wname.toString(), UTF8.class, clazz);\n           sliceWriters.put(slice + dirName, res);\n           return res;\n         }\n@@ -512,12 +527,14 @@ public void reduce(WritableComparable key, Iterator values, OutputCollector outp\n     }\n   }\n \n-  public void merge(File out, File[] segs, boolean filter, long slice) throws Exception {\n-    LOG.info(\"Merging \" + segs.length + \" segments to \" + out);\n+  public void merge(Path out, Path[] segs, boolean filter, long slice) throws Exception {\n+    String segmentName = Generator.generateSegmentName();\n     JobConf job = new JobConf(getConf());\n-    job.setJobName(\"mergesegs \" + out);\n+    job.setJobName(\"mergesegs \" + out + \"/\" + segmentName);\n+    LOG.info(\"Merging \" + segs.length + \" segments to \" + out + \"/\" + segmentName);\n     job.setBoolean(\"segment.merger.filter\", filter);\n     job.setLong(\"segment.merger.slice\", slice);\n+    job.set(\"segment.merger.segmentName\", segmentName);\n     FileSystem fs = FileSystem.get(getConf());\n     // prepare the minimal common set of input dirs\n     boolean g = true;\n@@ -533,12 +550,12 @@ public void merge(File out, File[] segs, boolean filter, long slice) throws Exce\n         continue;\n       }\n       LOG.info(\"SegmentMerger:   adding \" + segs[i]);\n-      File cDir = new File(segs[i], Content.DIR_NAME);\n-      File gDir = new File(segs[i], CrawlDatum.GENERATE_DIR_NAME);\n-      File fDir = new File(segs[i], CrawlDatum.FETCH_DIR_NAME);\n-      File pDir = new File(segs[i], CrawlDatum.PARSE_DIR_NAME);\n-      File pdDir = new File(segs[i], ParseData.DIR_NAME);\n-      File ptDir = new File(segs[i], ParseText.DIR_NAME);\n+      Path cDir = new Path(segs[i], Content.DIR_NAME);\n+      Path gDir = new Path(segs[i], CrawlDatum.GENERATE_DIR_NAME);\n+      Path fDir = new Path(segs[i], CrawlDatum.FETCH_DIR_NAME);\n+      Path pDir = new Path(segs[i], CrawlDatum.PARSE_DIR_NAME);\n+      Path pdDir = new Path(segs[i], ParseData.DIR_NAME);\n+      Path ptDir = new Path(segs[i], ParseText.DIR_NAME);\n       c = c && fs.exists(cDir);\n       g = g && fs.exists(gDir);\n       f = f && fs.exists(fDir);\n@@ -557,36 +574,36 @@ public void merge(File out, File[] segs, boolean filter, long slice) throws Exce\n     for (int i = 0; i < segs.length; i++) {\n       if (segs[i] == null) continue;\n       if (g) {\n-        File gDir = new File(segs[i], CrawlDatum.GENERATE_DIR_NAME);\n-        job.addInputDir(gDir);\n+        Path gDir = new Path(segs[i], CrawlDatum.GENERATE_DIR_NAME);\n+        job.addInputPath(gDir);\n       }\n       if (c) {\n-        File cDir = new File(segs[i], Content.DIR_NAME);\n-        job.addInputDir(cDir);\n+        Path cDir = new Path(segs[i], Content.DIR_NAME);\n+        job.addInputPath(cDir);\n       }\n       if (f) {\n-        File fDir = new File(segs[i], CrawlDatum.FETCH_DIR_NAME);\n-        job.addInputDir(fDir);\n+        Path fDir = new Path(segs[i], CrawlDatum.FETCH_DIR_NAME);\n+        job.addInputPath(fDir);\n       }\n       if (p) {\n-        File pDir = new File(segs[i], CrawlDatum.PARSE_DIR_NAME);\n-        job.addInputDir(pDir);\n+        Path pDir = new Path(segs[i], CrawlDatum.PARSE_DIR_NAME);\n+        job.addInputPath(pDir);\n       }\n       if (pd) {\n-        File pdDir = new File(segs[i], ParseData.DIR_NAME);\n-        job.addInputDir(pdDir);\n+        Path pdDir = new Path(segs[i], ParseData.DIR_NAME);\n+        job.addInputPath(pdDir);\n       }\n       if (pt) {\n-        File ptDir = new File(segs[i], ParseText.DIR_NAME);\n-        job.addInputDir(ptDir);\n+        Path ptDir = new Path(segs[i], ParseText.DIR_NAME);\n+        job.addInputPath(ptDir);\n       }\n     }\n     job.setInputFormat(ObjectInputFormat.class);\n     job.setInputKeyClass(UTF8.class);\n     job.setInputValueClass(ObjectWritable.class);\n     job.setMapperClass(SegmentMerger.class);\n     job.setReducerClass(SegmentMerger.class);\n-    job.setOutputDir(out);\n+    job.setOutputPath(out);\n     job.setOutputKeyClass(UTF8.class);\n     job.setOutputValueClass(ObjectWritable.class);\n     job.setOutputFormat(SegmentOutputFormat.class);\n@@ -602,7 +619,7 @@ public void merge(File out, File[] segs, boolean filter, long slice) throws Exce\n   public static void main(String[] args) throws Exception {\n     if (args.length < 2) {\n       System.err.println(\"SegmentMerger output_dir (-dir segments | seg1 seg2 ...) [-filter] [-slice NNNN]\");\n-      System.err.println(\"\\toutput_dir\\tname of the resulting segment, or the parent dir of segment slices\");\n+      System.err.println(\"\\toutput_dir\\tname of the parent dir for output segment slice(s)\");\n       System.err.println(\"\\t-dir segments\\tparent dir containing several segments\");\n       System.err.println(\"\\tseg1 seg2 ...\\tlist of segment dirs\");\n       System.err.println(\"\\t-filter\\t\\tfilter out URL-s prohibited by current URLFilters\");\n@@ -611,14 +628,14 @@ public static void main(String[] args) throws Exception {\n     }\n     Configuration conf = NutchConfiguration.create();\n     final FileSystem fs = FileSystem.get(conf);\n-    File out = new File(args[0]);\n+    Path out = new Path(args[0]);\n     ArrayList segs = new ArrayList();\n     long sliceSize = 0;\n     boolean filter = false;\n     for (int i = 1; i < args.length; i++) {\n       if (args[i].equals(\"-dir\")) {\n-        File[] files = fs.listFiles(new File(args[++i]), new FileFilter() {\n-          public boolean accept(File f) {\n+        Path[] files = fs.listPaths(new Path(args[++i]), new PathFilter() {\n+          public boolean accept(Path f) {\n             try {\n               if (fs.isDirectory(f)) return true;\n             } catch (IOException e) {}\n@@ -633,15 +650,15 @@ public boolean accept(File f) {\n       } else if (args[i].equals(\"-slice\")) {\n         sliceSize = Long.parseLong(args[++i]);\n       } else {\n-        segs.add(new File(args[i]));\n+        segs.add(new Path(args[i]));\n       }\n     }\n     if (segs.size() == 0) {\n       System.err.println(\"ERROR: No input segments.\");\n       return;\n     }\n     SegmentMerger merger = new SegmentMerger(conf);\n-    merger.merge(out, (File[]) segs.toArray(new File[segs.size()]), filter, sliceSize);\n+    merger.merge(out, (Path[]) segs.toArray(new Path[segs.size()]), filter, sliceSize);\n   }\n \n }",
                "deletions": 38
            }
        ]
    }
]