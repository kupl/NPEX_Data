[
    {
        "commit": "https://github.com/apache/xmlbeans/commit/a2b32a9449e35c7e0226ee778a023c0d05752ca1",
        "file": [
            {
                "patch": "@@ -65,23 +65,26 @@\n     private static boolean _xqrlAvailable = true;\n     private static boolean _xqrl2002Available = true;\n \n-    private static String _delIntfName;\n+    private static final String _delIntfName;\n     private static final ReentrantReadWriteLock lock = new ReentrantReadWriteLock();\n \n     static\n     {\n         String id = \"META-INF/services/org.apache.xmlbeans.impl.store.PathDelegate.SelectPathInterface\";\n         InputStream in = new DefaultClassLoaderResourceLoader().getResourceAsStream(id);\n-        try\n-        {\n-            BufferedReader br = new BufferedReader(new InputStreamReader(in));\n-            _delIntfName = br.readLine().trim();\n-            br.close();\n-        }\n-        catch (Exception e)\n-        {\n-            _delIntfName = null;\n+\n+        String name = null;\n+        if(in != null) {\n+            try {\n+                BufferedReader br = new BufferedReader(new InputStreamReader(in));\n+                name = br.readLine().trim();\n+                br.close();\n+            } catch (Exception e) {\n+                // set nothing\n+            }\n         }\n+\n+        _delIntfName = name;\n     }\n \n     protected final String _pathKey;",
                "additions": 13,
                "raw_url": "https://github.com/apache/xmlbeans/raw/a2b32a9449e35c7e0226ee778a023c0d05752ca1/src/store/org/apache/xmlbeans/impl/store/Path.java",
                "status": "modified",
                "changes": 23,
                "deletions": 10,
                "sha": "099ad7a28084aca3bb478bcf4c0c4e9d8371f011",
                "blob_url": "https://github.com/apache/xmlbeans/blob/a2b32a9449e35c7e0226ee778a023c0d05752ca1/src/store/org/apache/xmlbeans/impl/store/Path.java",
                "filename": "src/store/org/apache/xmlbeans/impl/store/Path.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/src/store/org/apache/xmlbeans/impl/store/Path.java?ref=a2b32a9449e35c7e0226ee778a023c0d05752ca1"
            }
        ],
        "bug_id": "xmlbeans_1",
        "parent": "https://github.com/apache/xmlbeans/commit/1b7cabc9e09d82416805681a240c57f5b2a5a31e",
        "message": "XMLBEANS-521: Avoid throwing and catching NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@1854679 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    },
    {
        "commit": "https://github.com/apache/xmlbeans/commit/f20dd37e5a96a5a82b1d5ea9db2f09d1eeebe801",
        "file": [
            {
                "patch": "@@ -2271,7 +2271,7 @@ public boolean isAssignableFrom(SchemaType type)\n             type = type.getBaseType();\n             depth -= 1;\n         }\n-        return (type.equals(this));\n+        return (type != null && type.equals(this));\n     }\n \n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/xmlbeans/raw/f20dd37e5a96a5a82b1d5ea9db2f09d1eeebe801/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "531055a1cc65749e14bf2720c9b74e1a1714ff35",
                "blob_url": "https://github.com/apache/xmlbeans/blob/f20dd37e5a96a5a82b1d5ea9db2f09d1eeebe801/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeImpl.java",
                "filename": "src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeImpl.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeImpl.java?ref=f20dd37e5a96a5a82b1d5ea9db2f09d1eeebe801"
            }
        ],
        "bug_id": "xmlbeans_2",
        "parent": "https://github.com/apache/xmlbeans/commit/2d9e404afda3769f3acfb5b50a16d25b282c7a6f",
        "message": "XMLBEANS-511: fix NPE in SchemaTypeImpl.isAssignableFrom()\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@1844291 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    },
    {
        "commit": "https://github.com/apache/xmlbeans/commit/2aed5911e8f1264d01dee85241d1e9e690e8ad5b",
        "file": [
            {
                "patch": "@@ -1,3 +1,9 @@\n+Changes in V3.0.2 since V3.0.1\n+\n+* XMLBEANS-520: wrong name for source(s) artifact\n+* XMLBEANS-519: issue when using old XML parser versions\n+* XMLBEANS-506: NPE trying to load resource file if XmlBeans was loaded by the bootstrap ClassLoader\n+\n Changes in V3.0.1 since V3.0.0\n \n * XMLBEANS-518: add support to XmlOptions to allow control over the XML parser settings that affect DTD loading",
                "additions": 6,
                "raw_url": "https://github.com/apache/xmlbeans/raw/2aed5911e8f1264d01dee85241d1e9e690e8ad5b/CHANGES.txt",
                "status": "modified",
                "changes": 6,
                "deletions": 0,
                "sha": "5e6abb60d81cd350a06fc94fd285c8d4cf506629",
                "blob_url": "https://github.com/apache/xmlbeans/blob/2aed5911e8f1264d01dee85241d1e9e690e8ad5b/CHANGES.txt",
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/CHANGES.txt?ref=2aed5911e8f1264d01dee85241d1e9e690e8ad5b"
            },
            {
                "patch": "@@ -147,7 +147,7 @@ private static InputStream getResource(String factoryResource) {\n         }\n \n         if (inputstream == null) {\n-            inputstream = FactoryFinder.class.getClassLoader().getResourceAsStream(factoryResource);\n+            inputstream = FactoryFinder.class.getResourceAsStream(factoryResource);\n         }\n         return inputstream;\n     }",
                "additions": 1,
                "raw_url": "https://github.com/apache/xmlbeans/raw/2aed5911e8f1264d01dee85241d1e9e690e8ad5b/src/saaj_api/org/apache/xmlbeans/impl/soap/FactoryFinder.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "c826933c590d0b8b4a77640fcbe31df6ac5b8b6e",
                "blob_url": "https://github.com/apache/xmlbeans/blob/2aed5911e8f1264d01dee85241d1e9e690e8ad5b/src/saaj_api/org/apache/xmlbeans/impl/soap/FactoryFinder.java",
                "filename": "src/saaj_api/org/apache/xmlbeans/impl/soap/FactoryFinder.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/src/saaj_api/org/apache/xmlbeans/impl/soap/FactoryFinder.java?ref=2aed5911e8f1264d01dee85241d1e9e690e8ad5b"
            },
            {
                "patch": "@@ -67,9 +67,8 @@\n \n     static\n     {\n-        ClassLoader cl = Path.class.getClassLoader();\n         String id = \"META-INF/services/org.apache.xmlbeans.impl.store.PathDelegate.SelectPathInterface\";\n-        InputStream in = cl.getResourceAsStream(id);\n+        InputStream in = Path.class.getResourceAsStream(id);\n         try\n         {\n             BufferedReader br = new BufferedReader(new InputStreamReader(in));",
                "additions": 1,
                "raw_url": "https://github.com/apache/xmlbeans/raw/2aed5911e8f1264d01dee85241d1e9e690e8ad5b/src/store/org/apache/xmlbeans/impl/store/Path.java",
                "status": "modified",
                "changes": 3,
                "deletions": 2,
                "sha": "015eea6f5d40e156503a04e3d17fa3677bc50df4",
                "blob_url": "https://github.com/apache/xmlbeans/blob/2aed5911e8f1264d01dee85241d1e9e690e8ad5b/src/store/org/apache/xmlbeans/impl/store/Path.java",
                "filename": "src/store/org/apache/xmlbeans/impl/store/Path.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/src/store/org/apache/xmlbeans/impl/store/Path.java?ref=2aed5911e8f1264d01dee85241d1e9e690e8ad5b"
            },
            {
                "patch": "@@ -52,9 +52,8 @@\n \n     static\n     {\n-        ClassLoader cl = Query.class.getClassLoader();\n         String id = \"META-INF/services/org.apache.xmlbeans.impl.store.QueryDelegate.QueryInterface\";\n-        InputStream in = cl.getResourceAsStream(id);\n+        InputStream in = Query.class.getResourceAsStream(id);\n         try\n         {\n             BufferedReader br = new BufferedReader(new InputStreamReader(in));",
                "additions": 1,
                "raw_url": "https://github.com/apache/xmlbeans/raw/2aed5911e8f1264d01dee85241d1e9e690e8ad5b/src/store/org/apache/xmlbeans/impl/store/Query.java",
                "status": "modified",
                "changes": 3,
                "deletions": 2,
                "sha": "0b8acccaca71a4624092e8cfe95d98f5a16fade5",
                "blob_url": "https://github.com/apache/xmlbeans/blob/2aed5911e8f1264d01dee85241d1e9e690e8ad5b/src/store/org/apache/xmlbeans/impl/store/Query.java",
                "filename": "src/store/org/apache/xmlbeans/impl/store/Query.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/src/store/org/apache/xmlbeans/impl/store/Query.java?ref=2aed5911e8f1264d01dee85241d1e9e690e8ad5b"
            },
            {
                "patch": "@@ -76,7 +76,7 @@ public static void printLicense()\n     {\n         try\n         {\n-            IOUtil.copyCompletely(CommandLine.class.getClassLoader().getResourceAsStream(\"LICENSE.txt\"), System.out);\n+            IOUtil.copyCompletely(CommandLine.class.getResourceAsStream(\"LICENSE.txt\"), System.out);\n         }\n         catch (Exception e)\n         {",
                "additions": 1,
                "raw_url": "https://github.com/apache/xmlbeans/raw/2aed5911e8f1264d01dee85241d1e9e690e8ad5b/src/xmlcomp/org/apache/xmlbeans/impl/tool/CommandLine.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "55c1ecd07b3ca782ec677f95851fa6e99dbf0692",
                "blob_url": "https://github.com/apache/xmlbeans/blob/2aed5911e8f1264d01dee85241d1e9e690e8ad5b/src/xmlcomp/org/apache/xmlbeans/impl/tool/CommandLine.java",
                "filename": "src/xmlcomp/org/apache/xmlbeans/impl/tool/CommandLine.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/src/xmlcomp/org/apache/xmlbeans/impl/tool/CommandLine.java?ref=2aed5911e8f1264d01dee85241d1e9e690e8ad5b"
            },
            {
                "patch": "@@ -35,7 +35,7 @@\n public final class XmlBeans\n {\n     private static String XMLBEANS_TITLE = \"org.apache.xmlbeans\";\n-    private static String XMLBEANS_VERSION = \"2.6.0\";\n+    private static String XMLBEANS_VERSION = \"3.0.2\";\n     private static String XMLBEANS_VENDOR = \"Apache Software Foundation\";\n \n     static",
                "additions": 1,
                "raw_url": "https://github.com/apache/xmlbeans/raw/2aed5911e8f1264d01dee85241d1e9e690e8ad5b/src/xmlpublic/org/apache/xmlbeans/XmlBeans.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "14bbe6416f95d89bd3f602f8c4e4a0c2ebd13860",
                "blob_url": "https://github.com/apache/xmlbeans/blob/2aed5911e8f1264d01dee85241d1e9e690e8ad5b/src/xmlpublic/org/apache/xmlbeans/XmlBeans.java",
                "filename": "src/xmlpublic/org/apache/xmlbeans/XmlBeans.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/src/xmlpublic/org/apache/xmlbeans/XmlBeans.java?ref=2aed5911e8f1264d01dee85241d1e9e690e8ad5b"
            }
        ],
        "bug_id": "xmlbeans_3",
        "parent": "https://github.com/apache/xmlbeans/commit/ebdc8a71e809fdf3f3918d1cfc1a36cc77a6b051",
        "message": "XMLBEANS-506: NPE trying to load resource file if XmlBeans was loaded by the bootstrap ClassLoader\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@1844288 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    },
    {
        "commit": "https://github.com/apache/xmlbeans/commit/6850fcde068cc795f581ce503dcda660d4467ce0",
        "file": [
            {
                "patch": "@@ -149,10 +149,12 @@ protected void internalBind(TylarWriter writer) {\n    * @param clazz Java type for which to return a binding.\n    */\n   private BindingType getBindingTypeFor(JClass clazz) {\n-    BindingType out =\n-            mLoader.getBindingType(mLoader.lookupTypeFor(getJavaName(clazz)));\n-    if (out == null) out = createBindingTypeFor(clazz);\n-    return out;\n+    BindingTypeName btn = mLoader.lookupTypeFor(getJavaName(clazz));\n+    if (btn != null) {\n+      BindingType out = mLoader.getBindingType(btn);\n+      if (out != null) return out;\n+    }\n+    return createBindingTypeFor(clazz);\n   }\n \n   /**",
                "additions": 6,
                "raw_url": "https://github.com/apache/xmlbeans/raw/6850fcde068cc795f581ce503dcda660d4467ce0/v2/src/binding/org/apache/xmlbeans/impl/binding/compile/Java2Schema.java",
                "status": "modified",
                "changes": 10,
                "deletions": 4,
                "sha": "a1c8a0b91aada66d9de1f21cb02f7d7a3a0fb60f",
                "blob_url": "https://github.com/apache/xmlbeans/blob/6850fcde068cc795f581ce503dcda660d4467ce0/v2/src/binding/org/apache/xmlbeans/impl/binding/compile/Java2Schema.java",
                "filename": "v2/src/binding/org/apache/xmlbeans/impl/binding/compile/Java2Schema.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/src/binding/org/apache/xmlbeans/impl/binding/compile/Java2Schema.java?ref=6850fcde068cc795f581ce503dcda660d4467ce0"
            }
        ],
        "bug_id": "xmlbeans_4",
        "parent": "https://github.com/apache/xmlbeans/commit/9314a9da1140ed1f6899afebdce8d049d1ef823f",
        "message": "java2schema: fix npe\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@110550 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    },
    {
        "commit": "https://github.com/apache/xmlbeans/commit/9ab4aff554fc1f59f76910e286804d7404ab0123",
        "file": [
            {
                "patch": "@@ -150,7 +150,7 @@ public void setIncludes(String includes) {\n   // =========================================================================\n   // Task implementation\n \n-   /**\n+  /**\n    * Execute the task.\n    */\n   public void execute() throws BuildException {\n@@ -159,13 +159,14 @@ public void execute() throws BuildException {\n     if (list.length != 1) throw new IllegalStateException(\"NYI\");\n     JFileSet fs = jf.createFileSet(new File(list[0]));\n     fs.include(mIncludes);\n+    String classpathString = null;\n     if (mClasspath != null) {\n       //this will be removed after jam factory is refactored\n-      fs.setClasspath(mClasspath.toString());\n+      fs.setClasspath(classpathString = mClasspath.toString());\n     }\n     final JClass[] classes;\n     try {\n-      classes = jf.loadSources(fs,null,null,null,null,mClasspath.toString());\n+      classes = jf.loadSources(fs,null,null,null,null,classpathString);\n     } catch(IOException ioe) {\n       ioe.printStackTrace();\n       throw new BuildException(ioe);",
                "additions": 4,
                "raw_url": "https://github.com/apache/xmlbeans/raw/9ab4aff554fc1f59f76910e286804d7404ab0123/v2/src/binding/org/apache/xmlbeans/impl/binding/compile/Java2SchemaTask.java",
                "status": "modified",
                "changes": 7,
                "deletions": 3,
                "sha": "b242ad22eecdc8b918cd4dff83a2cccb2acb72a4",
                "blob_url": "https://github.com/apache/xmlbeans/blob/9ab4aff554fc1f59f76910e286804d7404ab0123/v2/src/binding/org/apache/xmlbeans/impl/binding/compile/Java2SchemaTask.java",
                "filename": "v2/src/binding/org/apache/xmlbeans/impl/binding/compile/Java2SchemaTask.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/src/binding/org/apache/xmlbeans/impl/binding/compile/Java2SchemaTask.java?ref=9ab4aff554fc1f59f76910e286804d7404ab0123"
            }
        ],
        "bug_id": "xmlbeans_5",
        "parent": "https://github.com/apache/xmlbeans/commit/02773f6fd84c257886e87d8943fb6460ae607bcd",
        "message": "fix small npe\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@110254 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    },
    {
        "commit": "https://github.com/apache/xmlbeans/commit/d0750ae1874400d6a54736ec5c3ef9f29587fe90",
        "file": [
            {
                "patch": "@@ -1831,10 +1831,17 @@ public Class getEnumJavaClass()\n         // This field is declared volatile and Class is immutable so this is allowed.\n         if (_javaEnumClass == null)\n         {\n-            try\n-                { _javaEnumClass = Class.forName(getBaseEnumType().getFullJavaName() + \"$Enum\", false, getTypeSystem().getClassLoader()); }\n-            catch (ClassNotFoundException e)\n-                { _javaEnumClass = null; }\n+            if ( getBaseEnumType() != null )\n+            {\n+                try\n+                {\n+                    _javaEnumClass = Class.forName(getBaseEnumType().getFullJavaName() + \"$Enum\", false, getTypeSystem().getClassLoader());\n+                }\n+                catch (ClassNotFoundException e)\n+                { \n+                    _javaEnumClass = null;\n+                }\n+            }\n         }\n \n         return _javaEnumClass;",
                "additions": 11,
                "raw_url": "https://github.com/apache/xmlbeans/raw/d0750ae1874400d6a54736ec5c3ef9f29587fe90/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeImpl.java",
                "status": "modified",
                "changes": 15,
                "deletions": 4,
                "sha": "ec4a90d70010284cd4ef3e2524f339426795eb84",
                "blob_url": "https://github.com/apache/xmlbeans/blob/d0750ae1874400d6a54736ec5c3ef9f29587fe90/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeImpl.java",
                "filename": "src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeImpl.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeImpl.java?ref=d0750ae1874400d6a54736ec5c3ef9f29587fe90"
            }
        ],
        "bug_id": "xmlbeans_6",
        "parent": "https://github.com/apache/xmlbeans/commit/3696d58b2d7e968434d921ec1da894ac80664a13",
        "message": "Fix NPE in SchemaTypeImpl.getEnumJavaClass().\n\nThanks to Martin McCallion for investigation.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@1241699 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    },
    {
        "commit": "https://github.com/apache/xmlbeans/commit/91cc7478b224c13b6f5defbb110c71b775dfc5f0",
        "file": [
            {
                "patch": "@@ -35,7 +35,7 @@\n {\n     public static String _useXqrlForXpath = \"use xqrl for xpath\";\n     public static String _useXbeanForXpath = \"use xbean for xpath\";\n-    public static String _useXqrl2002ForXpath = \"use xqrl-2002 for xpath\";\n+    public static String _forceXqrl2002ForXpathXQuery = \"use xqrl-2002 for xpath\";\n \n     private static final int USE_XBEAN    = 0x01;\n     private static final int USE_XQRL     = 0x02;",
                "additions": 1,
                "raw_url": "https://github.com/apache/xmlbeans/raw/91cc7478b224c13b6f5defbb110c71b775dfc5f0/src/store/org/apache/xmlbeans/impl/store/Path.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "0670d0559f1ef8d5131e0b643aabbb4d20711669",
                "blob_url": "https://github.com/apache/xmlbeans/blob/91cc7478b224c13b6f5defbb110c71b775dfc5f0/src/store/org/apache/xmlbeans/impl/store/Path.java",
                "filename": "src/store/org/apache/xmlbeans/impl/store/Path.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/src/store/org/apache/xmlbeans/impl/store/Path.java?ref=91cc7478b224c13b6f5defbb110c71b775dfc5f0"
            },
            {
                "patch": "@@ -58,7 +58,7 @@ static synchronized Query getCompiledQuery(String queryExpr, String currentVar,\n     {\n         assert queryExpr != null;\n \n-        if (options.hasOption(Path._useXqrl2002ForXpath))\n+        if (options!=null && options.hasOption(Path._forceXqrl2002ForXpathXQuery))\n         {\n             Query res = (Query)_xqrl2002QueryCache.get(queryExpr);\n             if (res!=null)",
                "additions": 1,
                "raw_url": "https://github.com/apache/xmlbeans/raw/91cc7478b224c13b6f5defbb110c71b775dfc5f0/src/store/org/apache/xmlbeans/impl/store/Query.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "478ce33b2b7773e613e3a43faf560c5d55144c99",
                "blob_url": "https://github.com/apache/xmlbeans/blob/91cc7478b224c13b6f5defbb110c71b775dfc5f0/src/store/org/apache/xmlbeans/impl/store/Query.java",
                "filename": "src/store/org/apache/xmlbeans/impl/store/Query.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/src/store/org/apache/xmlbeans/impl/store/Query.java?ref=91cc7478b224c13b6f5defbb110c71b775dfc5f0"
            }
        ],
        "bug_id": "xmlbeans_7",
        "parent": "https://github.com/apache/xmlbeans/commit/d42465f1ad0055e1998cfbbb3fdfbbdba52614ea",
        "message": "Rename and NPE fix.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@233371 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    },
    {
        "commit": "https://github.com/apache/xmlbeans/commit/fad18327e16e69140959deda6166821b5f6e4917",
        "file": [
            {
                "patch": "@@ -37,6 +37,7 @@\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.Set;\n import java.math.BigInteger;\n@@ -1421,15 +1422,14 @@ private static boolean checkAllDerivationsForRestriction(SchemaType baseType, Sc\n         SchemaType currentType = derivedType;\n \n         // XMLBEANS-66: if baseType is a union, check restriction is of one of the constituant types\n-        List possibleTypes;\n+        Set possibleTypes = null;\n         if (baseType.getSimpleVariety() == SchemaType.UNION)\n-            possibleTypes = Arrays.asList(baseType.getUnionConstituentTypes());\n-        else\n-            possibleTypes = Arrays.asList(new SchemaType[] { baseType });\n+            possibleTypes = new HashSet(Arrays.asList(baseType.getUnionConstituentTypes()));\n \n         // run up the types hierarchy from derived Type to base Type and make sure that all are derived by\n         //   restriction.  If any are not then this is not a valid restriction.\n-        while (!possibleTypes.contains(currentType)) {\n+        while (!baseType.equals(currentType) &&\n+            possibleTypes != null && !possibleTypes.contains(currentType)) {\n             if (currentType.getDerivationType() == SchemaType.DT_RESTRICTION) {\n                 currentType = currentType.getBaseType();\n             } else {",
                "additions": 5,
                "raw_url": "https://github.com/apache/xmlbeans/raw/fad18327e16e69140959deda6166821b5f6e4917/src/typeimpl/org/apache/xmlbeans/impl/schema/StscChecker.java",
                "status": "modified",
                "changes": 10,
                "deletions": 5,
                "sha": "3ea18da24b1a07a1a669f9664a69d44652b08d59",
                "blob_url": "https://github.com/apache/xmlbeans/blob/fad18327e16e69140959deda6166821b5f6e4917/src/typeimpl/org/apache/xmlbeans/impl/schema/StscChecker.java",
                "filename": "src/typeimpl/org/apache/xmlbeans/impl/schema/StscChecker.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/src/typeimpl/org/apache/xmlbeans/impl/schema/StscChecker.java?ref=fad18327e16e69140959deda6166821b5f6e4917"
            }
        ],
        "bug_id": "xmlbeans_8",
        "parent": "https://github.com/apache/xmlbeans/commit/ae509287cb460fef24a36b2e9b5f448d80e01b42",
        "message": "Fix potential NPE in StscChecker.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@178694 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    },
    {
        "commit": "https://github.com/apache/xmlbeans/commit/51e28bd9b87a37f6a1657bc7aafecbc6ef415574",
        "file": [
            {
                "patch": "@@ -872,7 +872,7 @@ public SchemaType getElementType(QName eltName, QName xsiType, SchemaTypeLoader\n             {\n                 // Substitution groups\n                 SchemaGlobalElement elt = wildcardTypeLoader.findElement(eltName);\n-                SchemaGlobalElement head = elt.substitutionGroup();\n+                SchemaGlobalElement head = elt == null ? null : elt.substitutionGroup();\n                 if (head == null)\n                     return BuiltinSchemaTypeSystem.ST_NO_TYPE;\n                 prop = (SchemaProperty)_propertyModelByElementName.get(head.getName());",
                "additions": 1,
                "raw_url": "https://github.com/apache/xmlbeans/raw/51e28bd9b87a37f6a1657bc7aafecbc6ef415574/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "ba8b39acc9185cd8f0bdd8019ab9c8f221747d0e",
                "blob_url": "https://github.com/apache/xmlbeans/blob/51e28bd9b87a37f6a1657bc7aafecbc6ef415574/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeImpl.java",
                "filename": "src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeImpl.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeImpl.java?ref=51e28bd9b87a37f6a1657bc7aafecbc6ef415574"
            }
        ],
        "bug_id": "xmlbeans_9",
        "parent": "https://github.com/apache/xmlbeans/commit/d4cc2ee20e36b7a3e797dcdcf2f1f067de75df11",
        "message": "Fixed an NPE in SchemaTypeImpl.getElementType().\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@124990 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    },
    {
        "commit": "https://github.com/apache/xmlbeans/commit/10f82cf63d470baeba7b1ffc5bbf7bad3a93bd85",
        "file": [
            {
                "patch": "@@ -16,6 +16,7 @@\n package org.apache.xmlbeans.impl.schema;\n \n import org.apache.xmlbeans.impl.common.NameUtil;\n+import org.apache.xmlbeans.impl.common.QNameHelper;\n import org.apache.xmlbeans.impl.config.ExtensionHolder;\n import org.apache.xmlbeans.impl.config.InterfaceExtension;\n import org.apache.xmlbeans.QNameSetBuilder;\n@@ -578,12 +579,16 @@ static int javaTypeCodeForType(SchemaType sType)\n         if (!sType.isSimpleType())\n             return SchemaProperty.XML_OBJECT;\n \n+        SchemaType unionType = null;\n         if (sType.getSimpleVariety() == SchemaType.UNION)\n         {\n             // see if we can find an interesting common base type, e.g., for string enums\n             SchemaType baseType = sType.getUnionCommonBaseType();\n             if (baseType != null && !baseType.isURType())\n+            {\n+                unionType = sType;\n                 sType = baseType;\n+            }\n             else\n                 return javaTypeCodeInCommon(sType.getUnionConstituentTypes());\n         }\n@@ -644,7 +649,20 @@ static int javaTypeCodeForType(SchemaType sType)\n \n             case SchemaType.BTC_STRING:\n                 if (isStringType(sType.getBaseEnumType()))\n+                {\n+                    if (unionType != null)\n+                    {\n+                        // REVISIT: enum of union of string enum case\n+                        // set base enum type of unionType if it exists\n+                        // but only if unionType doesn't already have a base enum type.\n+                        // if the unionType does have a base enum type, treat as JAVA_STRING\n+                        if (unionType.getBaseEnumType() == null)\n+                            ((SchemaTypeImpl)unionType).setBaseEnumTypeRef(sType.getRef());\n+                        else\n+                            return SchemaProperty.JAVA_STRING;\n+                    }\n                     return SchemaProperty.JAVA_ENUM;\n+                }\n                 return SchemaProperty.JAVA_STRING;\n \n             case SchemaType.BTC_DURATION:",
                "additions": 18,
                "raw_url": "https://github.com/apache/xmlbeans/raw/10f82cf63d470baeba7b1ffc5bbf7bad3a93bd85/v2/src/typeimpl/org/apache/xmlbeans/impl/schema/StscJavaizer.java",
                "status": "modified",
                "changes": 18,
                "deletions": 0,
                "sha": "7f6c547cfde81afbee58fe877bca95540ea5dde8",
                "blob_url": "https://github.com/apache/xmlbeans/blob/10f82cf63d470baeba7b1ffc5bbf7bad3a93bd85/v2/src/typeimpl/org/apache/xmlbeans/impl/schema/StscJavaizer.java",
                "filename": "v2/src/typeimpl/org/apache/xmlbeans/impl/schema/StscJavaizer.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/src/typeimpl/org/apache/xmlbeans/impl/schema/StscJavaizer.java?ref=10f82cf63d470baeba7b1ffc5bbf7bad3a93bd85"
            },
            {
                "patch": "@@ -65,4 +65,77 @@\n     </xs:complexType>\r\n   </xs:element>\r\n \r\n+\r\n+  <!-- get/set java type should be java.lang.String -->\r\n+  <xs:element name=\"union-of-string\">\r\n+    <xs:simpleType>\r\n+        <xs:union memberTypes=\"xs:string\"/>\r\n+    </xs:simpleType>\r\n+  </xs:element>\r\n+\r\n+  <!-- get/set java type should be java.lang.Object -->\r\n+  <xs:element name=\"union-of-date-and-string\">\r\n+    <xs:simpleType>\r\n+        <xs:union memberTypes=\"xs:date xs:string\"/>\r\n+    </xs:simpleType>\r\n+  </xs:element>\r\n+\r\n+  <!-- get/set java type should be java.util.Calendar -->\r\n+  <xs:element name=\"union-of-time-and-date\">\r\n+    <xs:simpleType>\r\n+        <xs:union memberTypes=\"xs:time xs:date\"/>\r\n+    </xs:simpleType>\r\n+  </xs:element>\r\n+\r\n+  <!-- get/set java type should be org.openuri.lut.StringEnum.Enum -->\r\n+  <xs:element name=\"union-of-string-enum\" type=\"tns:union-of-string-enum\"/>\r\n+  <xs:simpleType name=\"union-of-string-enum\">\r\n+      <xs:union memberTypes=\"tns:string-enum\"/>\r\n+  </xs:simpleType>\r\n+\r\n+  <xs:simpleType name=\"string-enum\">\r\n+    <xs:restriction base=\"xs:string\">\r\n+        <xs:enumeration value=\"ABC\"/>\r\n+        <xs:enumeration value=\"DEF\"/>\r\n+        <xs:enumeration value=\"123\"/>\r\n+        <xs:enumeration value=\"456\"/>\r\n+    </xs:restriction>\r\n+  </xs:simpleType>\r\n+\r\n+  <!-- get/set java type should be org.openuri.lut.StringEnum.Enum -->\r\n+  <xs:element name=\"union-of-string-enum1-and-string-enum2\">\r\n+    <xs:simpleType>\r\n+      <xs:union memberTypes=\"tns:string-enum-derived1 tns:string-enum-derived2\"/>\r\n+    </xs:simpleType>\r\n+  </xs:element>\r\n+\r\n+\r\n+  <xs:simpleType name=\"string-enum-derived1\">\r\n+    <xs:restriction base=\"tns:string-enum\">\r\n+        <xs:enumeration value=\"ABC\"/>\r\n+        <xs:enumeration value=\"DEF\"/>\r\n+        <xs:enumeration value=\"123\"/>\r\n+    </xs:restriction>\r\n+  </xs:simpleType>\r\n+\r\n+  <xs:simpleType name=\"string-enum-derived2\">\r\n+    <xs:restriction base=\"tns:string-enum\">\r\n+        <xs:enumeration value=\"ABC\"/>\r\n+        <xs:enumeration value=\"DEF\"/>\r\n+        <xs:enumeration value=\"456\"/>\r\n+    </xs:restriction>\r\n+  </xs:simpleType>\r\n+\r\n+  <!-- get/set java type should be java.lang.String ?? -->\r\n+  <!--\r\n+  <xs:element name=\"enum-of-union-of-string-enum\">\r\n+    <xs:simpleType>\r\n+        <xs:restriction base=\"tns:union-of-string-enum\">\r\n+            <xs:enumeration value=\"ABC\"/> <!- - only allowed value? - ->\r\n+            <xs:enumeration value=\"XYZ\"/> <!- - should never be a legal value? - ->\r\n+        </xs:restriction>\r\n+    </xs:simpleType>\r\n+  </xs:element>\r\n+  -->\r\n+\r\n </xs:schema>\r",
                "additions": 73,
                "raw_url": "https://github.com/apache/xmlbeans/raw/10f82cf63d470baeba7b1ffc5bbf7bad3a93bd85/v2/test/cases/xbean/xmlobject/listandunion.xsd",
                "status": "modified",
                "changes": 73,
                "deletions": 0,
                "sha": "4452febb277043873061293548569205f8c172a5",
                "blob_url": "https://github.com/apache/xmlbeans/blob/10f82cf63d470baeba7b1ffc5bbf7bad3a93bd85/v2/test/cases/xbean/xmlobject/listandunion.xsd",
                "filename": "v2/test/cases/xbean/xmlobject/listandunion.xsd",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/cases/xbean/xmlobject/listandunion.xsd?ref=10f82cf63d470baeba7b1ffc5bbf7bad3a93bd85"
            },
            {
                "patch": "@@ -22,6 +22,13 @@\n import org.openuri.lut.UnionsDocument;\n import org.openuri.lut.IncidentReportsDocument;\n import org.openuri.lut.DateOrDateTime;\n+import org.openuri.lut.UnionOfStringDocument;\n+import org.openuri.lut.UnionOfStringEnumDocument;\n+import org.openuri.lut.UnionOfDateAndStringDocument;\n+import org.openuri.lut.UnionOfTimeAndDateDocument;\n+import org.openuri.lut.UnionOfStringEnum;\n+import org.openuri.lut.StringEnum;\n+import org.openuri.lut.EnumOfUnionOfStringEnumDocument;\n \n import java.util.List;\n import java.util.Arrays;\n@@ -35,6 +42,11 @@\n import org.apache.xmlbeans.XmlDate;\n import org.apache.xmlbeans.XmlDateTime;\n import org.apache.xmlbeans.XmlCalendar;\n+import org.apache.xmlbeans.XmlString;\n+import org.apache.xmlbeans.SchemaProperty;\n+import org.apache.xmlbeans.XmlAnySimpleType;\n+import org.apache.xmlbeans.XmlTime;\n+import org.apache.xmlbeans.impl.values.XmlObjectBase;\n \n public class ListAndUnionTests extends TestCase\n {\n@@ -181,4 +193,223 @@ public void testUnionArray() throws Exception\n \n     }\n \n+    /**\n+     * Testing a union of xs:string\n+     */\n+    public void testUnionOfString() throws Exception\n+    {\n+        // schema object model for union-of-string\n+        SchemaType uniontype = UnionOfStringDocument.UnionOfString.type;\n+        Assert.assertEquals(SchemaType.UNION, uniontype.getSimpleVariety());\n+\n+        SchemaType commonbase = uniontype.getUnionCommonBaseType();\n+        Assert.assertEquals(XmlString.type, commonbase);\n+\n+        SchemaType[] constituents = uniontype.getUnionConstituentTypes();\n+        Assert.assertEquals(1, constituents.length);\n+        Assert.assertEquals(XmlString.type, constituents[0]);\n+\n+        SchemaProperty[] props = UnionOfStringDocument.type.getProperties();\n+        Assert.assertEquals(1, props.length);\n+        Assert.assertEquals(SchemaProperty.JAVA_STRING, props[0].getJavaTypeCode());\n+\n+        // create a document\n+        UnionOfStringDocument doc = UnionOfStringDocument.Factory.parse(\n+            \"<lut:union-of-string xmlns:lut='http://openuri.org/lut'>kevin</lut:union-of-string>\");\n+        String value = doc.getUnionOfString();\n+        Assert.assertEquals(\"kevin\", value);\n+        Assert.assertTrue(doc.validate());\n+\n+        // set value\n+        doc.setUnionOfString(\"bob\");\n+        UnionOfStringDocument.UnionOfString union = doc.xgetUnionOfString();\n+        Assert.assertEquals(\"bob\", (String)union.getObjectValue());\n+\n+        // round trip to s text\n+        String xtext = doc.xmlText();\n+        UnionOfStringDocument docrt = UnionOfStringDocument.Factory.parse(xtext);\n+        Assert.assertTrue(docrt.validate());\n+\n+        // verify contents\n+        Assert.assertEquals(\"bob\", docrt.getUnionOfString());\n+    }\n+\n+    /**\n+     * Testing a union of xs:date and xs:string\n+     */\n+    public void testUnionOfDateAndString() throws Exception\n+    {\n+        // schema object model for union-of-date-and-string\n+        SchemaType uniontype = UnionOfDateAndStringDocument.UnionOfDateAndString.type;\n+        Assert.assertEquals(SchemaType.UNION, uniontype.getSimpleVariety());\n+\n+        SchemaType commonbase = uniontype.getUnionCommonBaseType();\n+        Assert.assertEquals(XmlAnySimpleType.type, commonbase);\n+\n+        SchemaType[] constituents = uniontype.getUnionConstituentTypes();\n+        Assert.assertEquals(2, constituents.length);\n+        Assert.assertEquals(XmlDate.type, constituents[0]);\n+        Assert.assertEquals(XmlString.type, constituents[1]);\n+\n+        SchemaProperty[] props = UnionOfDateAndStringDocument.type.getProperties();\n+        Assert.assertEquals(1, props.length);\n+        Assert.assertEquals(SchemaProperty.JAVA_OBJECT, props[0].getJavaTypeCode());\n+\n+        // create a document\n+        UnionOfDateAndStringDocument doc = UnionOfDateAndStringDocument.Factory.parse(\n+            \"<lut:union-of-date-and-string xmlns:lut='http://openuri.org/lut'>2001-08-06</lut:union-of-date-and-string>\");\n+        Calendar value = (Calendar)doc.getUnionOfDateAndString();\n+        Assert.assertEquals(new XmlCalendar(\"2001-08-06\"), value);\n+        Assert.assertTrue(doc.validate());\n+\n+        // set value\n+        doc.setUnionOfDateAndString(\"bob\");\n+        UnionOfDateAndStringDocument.UnionOfDateAndString union = doc.xgetUnionOfDateAndString();\n+        Assert.assertEquals(\"bob\", (String)union.getObjectValue());\n+\n+        // round trip\n+        String xtext = doc.xmlText();\n+        UnionOfDateAndStringDocument docrt = UnionOfDateAndStringDocument.Factory.parse(xtext);\n+        Assert.assertTrue(docrt.validate());\n+\n+        // verify contents\n+        Assert.assertEquals(\"bob\", docrt.getUnionOfDateAndString());\n+\n+        // set value in original document and round trip again\n+        doc.setUnionOfDateAndString(new XmlCalendar(\"2004-08-06\"));\n+        docrt = UnionOfDateAndStringDocument.Factory.parse(doc.xmlText());\n+        Assert.assertTrue(docrt.validate());\n+        Assert.assertEquals(new XmlCalendar(\"2004-08-06\"), docrt.getUnionOfDateAndString());\n+\n+    }\n+\n+    /**\n+     * Testing a union of xs:time and xs:date\n+     */\n+    public void testUnionOfTimeAndDate() throws Exception\n+    {\n+        // schema object model for union-of-time-and-date\n+        SchemaType uniontype = UnionOfTimeAndDateDocument.UnionOfTimeAndDate.type;\n+        Assert.assertEquals(SchemaType.UNION, uniontype.getSimpleVariety());\n+\n+        SchemaType commonbase = uniontype.getUnionCommonBaseType();\n+        Assert.assertEquals(XmlAnySimpleType.type, commonbase);\n+\n+        SchemaType[] constituents = uniontype.getUnionConstituentTypes();\n+        Assert.assertEquals(2, constituents.length);\n+        Assert.assertEquals(XmlTime.type, constituents[0]);\n+        Assert.assertEquals(XmlDate.type, constituents[1]);\n+\n+        SchemaProperty[] props = UnionOfTimeAndDateDocument.type.getProperties();\n+        Assert.assertEquals(1, props.length);\n+        Assert.assertEquals(SchemaProperty.JAVA_CALENDAR, props[0].getJavaTypeCode());\n+\n+        // create a document\n+        UnionOfTimeAndDateDocument doc = UnionOfTimeAndDateDocument.Factory.parse(\n+            \"<lut:union-of-time-and-date xmlns:lut='http://openuri.org/lut'>2001-08-06</lut:union-of-time-and-date>\");\n+        Calendar value = doc.getUnionOfTimeAndDate();\n+        Assert.assertEquals(new XmlCalendar(\"2001-08-06\"), value);\n+        Assert.assertTrue(doc.validate());\n+\n+        // set value\n+        doc.setUnionOfTimeAndDate(new XmlCalendar(\"11:30:03\"));\n+        UnionOfTimeAndDateDocument.UnionOfTimeAndDate union = doc.xgetUnionOfTimeAndDate();\n+        Assert.assertEquals(new XmlCalendar(\"11:30:03\"), union.getObjectValue());\n+\n+        // round trip\n+        String xtext = doc.xmlText();\n+        UnionOfTimeAndDateDocument docrt = UnionOfTimeAndDateDocument.Factory.parse(xtext);\n+        Assert.assertTrue(docrt.validate());\n+\n+        // verify contents\n+        Assert.assertEquals(new XmlCalendar(\"11:30:03\"), docrt.getUnionOfTimeAndDate());\n+    }\n+\n+\n+    /**\n+     * Testing a union of enumerated xs:string\n+     */\n+    public void testUnionOfStringEnum() throws Exception\n+    {\n+        // schema object model for union-of-string-enum\n+        SchemaType uniontype = UnionOfStringEnum.type;\n+        Assert.assertEquals(SchemaType.UNION, uniontype.getSimpleVariety());\n+\n+        SchemaType commonbase = uniontype.getUnionCommonBaseType();\n+        Assert.assertEquals(StringEnum.type, commonbase);\n+\n+        SchemaType[] constituents = uniontype.getUnionConstituentTypes();\n+        Assert.assertEquals(1, constituents.length);\n+        Assert.assertEquals(StringEnum.type, constituents[0]);\n+\n+        SchemaProperty[] props = UnionOfStringEnumDocument.type.getProperties();\n+        Assert.assertEquals(1, props.length);\n+        Assert.assertEquals(SchemaProperty.JAVA_ENUM, props[0].getJavaTypeCode());\n+\n+        // create a document\n+        UnionOfStringEnumDocument doc = UnionOfStringEnumDocument.Factory.parse(\n+            \"<lut:union-of-string-enum xmlns:lut='http://openuri.org/lut'>ABC</lut:union-of-string-enum>\");\n+        StringEnum.Enum value = doc.getUnionOfStringEnum();\n+        Assert.assertEquals(StringEnum.ABC, value);\n+        Assert.assertTrue(doc.validate());\n+\n+        // set value\n+        doc.setUnionOfStringEnum(StringEnum.X_123);\n+        UnionOfStringEnum union = doc.xgetUnionOfStringEnum();\n+        Assert.assertEquals(StringEnum.Enum.forString(\"123\"), ((SimpleValue)union).getEnumValue());\n+        Assert.assertEquals(StringEnum.X_123, ((SimpleValue)union).getEnumValue());\n+        Assert.assertEquals(\"123\", union.getObjectValue());\n+\n+        // round trip\n+        String xtext = doc.xmlText();\n+        UnionOfStringEnumDocument docrt = UnionOfStringEnumDocument.Factory.parse(xtext);\n+        Assert.assertTrue(docrt.validate());\n+\n+        // verify contents\n+        Assert.assertEquals(StringEnum.X_123, docrt.getUnionOfStringEnum());\n+    }\n+\n+    /**\n+     * Testing a enumerated union of enumerated xs:string\n+    public void testEnumOfUnionOfStringEnum() throws Exception\n+    {\n+        // schema object model for union-of-string-enum\n+        SchemaType uniontype = EnumOfUnionOfStringEnumDocument.EnumOfUnionOfStringEnum.type;\n+        Assert.assertEquals(SchemaType.UNION, uniontype.getSimpleVariety());\n+\n+        SchemaType commonbase = uniontype.getUnionCommonBaseType();\n+        Assert.assertEquals(StringEnum.type, commonbase);\n+\n+        SchemaType[] constituents = uniontype.getUnionConstituentTypes();\n+        Assert.assertEquals(1, constituents.length);\n+        Assert.assertEquals(StringEnum.type, constituents[0]);\n+\n+        SchemaProperty[] props = UnionOfStringEnumDocument.type.getProperties();\n+        Assert.assertEquals(1, props.length);\n+        Assert.assertEquals(SchemaProperty.JAVA_ENUM, props[0].getJavaTypeCode());\n+\n+        // create a document\n+        EnumOfUnionOfStringEnumDocument doc = EnumOfUnionOfStringEnumDocument.Factory.parse(\n+            \"<lut:enum-of-union-of-string-enum xmlns:lut='http://openuri.org/lut'>ABC</lut:enum-of-union-of-string-enum>\");\n+        String value = doc.getEnumOfUnionOfStringEnum();\n+        Assert.assertEquals(\"ABC\", value);\n+        Assert.assertTrue(doc.validate());\n+\n+        // set value\n+        doc.setEnumOfUnionOfStringEnum(\"XYZ\");\n+        EnumOfUnionOfStringEnumDocument.EnumOfUnionOfStringEnum union = doc.xgetEnumOfUnionOfStringEnum();\n+        Assert.assertEquals(\"XYZ\", ((SimpleValue)union).getEnumValue());\n+        Assert.assertEquals(\"XYZ\", union.getObjectValue());\n+        // XYZ is not a valid enumeration of the base union-of-string-enum type\n+        Assert.assertFalse(doc.validate());\n+\n+        // round trip\n+        String xtext = doc.xmlText();\n+        EnumOfUnionOfStringEnumDocument docrt = EnumOfUnionOfStringEnumDocument.Factory.parse(xtext);\n+        Assert.assertTrue(docrt.validate());\n+\n+        // verify contents\n+        Assert.assertEquals(\"ABC\", docrt.getEnumOfUnionOfStringEnum());\n+    }\n+     */\n }",
                "additions": 231,
                "raw_url": "https://github.com/apache/xmlbeans/raw/10f82cf63d470baeba7b1ffc5bbf7bad3a93bd85/v2/test/src/xmlobject/schematypes/detailed/ListAndUnionTests.java",
                "status": "modified",
                "changes": 231,
                "deletions": 0,
                "sha": "3c5a8f23fe8d2041973f210dee39950a08a6067d",
                "blob_url": "https://github.com/apache/xmlbeans/blob/10f82cf63d470baeba7b1ffc5bbf7bad3a93bd85/v2/test/src/xmlobject/schematypes/detailed/ListAndUnionTests.java",
                "filename": "v2/test/src/xmlobject/schematypes/detailed/ListAndUnionTests.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/xmlobject/schematypes/detailed/ListAndUnionTests.java?ref=10f82cf63d470baeba7b1ffc5bbf7bad3a93bd85"
            }
        ],
        "bug_id": "xmlbeans_10",
        "parent": "https://github.com/apache/xmlbeans/commit/a62d5d4533b6e9c35d7d27a1caa606d71746c13f",
        "message": "fix for NPE in SchemaTypeCodePrinter for union of string enum types.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@111081 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    },
    {
        "commit": "https://github.com/apache/xmlbeans/commit/397d9ee071879d39f6714a747d1c62fa2e893205",
        "file": [
            {
                "patch": "@@ -133,19 +133,19 @@ protected JamLogger getLogger() {\n \n   protected void issue14BuildWarning(Throwable t) {\n     if (!mWarningAlreadyIssued) {\n-      mLogger.warning(\"This build of JAM was produced under JDK 1.4.\" +\n+      getLogger().warning(\"This build of JAM was produced under JDK 1.4.\" +\n                       \"Even though you are running under JDK 1.5, \"+\n                       \"JSR175-style annotations will not be available\");\n-      mLogger.verbose(t);\n+      getLogger().verbose(t);\n       mWarningAlreadyIssued = true;\n     }\n   }\n \n   protected void issue14RuntimeWarning(Throwable t) {\n     if (!mWarningAlreadyIssued) {\n-      mLogger.warning(\"You are running under a pre-1.5 JDK.  JSR175-style \"+\n+      getLogger().warning(\"You are running under a pre-1.5 JDK.  JSR175-style \"+\n                       \"source annotations will not be available\");\n-      mLogger.verbose(t);\n+      getLogger().verbose(t);\n       mWarningAlreadyIssued = true;\n     }\n   }",
                "additions": 4,
                "raw_url": "https://github.com/apache/xmlbeans/raw/397d9ee071879d39f6714a747d1c62fa2e893205/v2/jam/src/org/apache/xmlbeans/impl/jam/provider/JamClassBuilder.java",
                "status": "modified",
                "changes": 8,
                "deletions": 4,
                "sha": "3eff814c74202c605e00e10570e9adf03a376525",
                "blob_url": "https://github.com/apache/xmlbeans/blob/397d9ee071879d39f6714a747d1c62fa2e893205/v2/jam/src/org/apache/xmlbeans/impl/jam/provider/JamClassBuilder.java",
                "filename": "v2/jam/src/org/apache/xmlbeans/impl/jam/provider/JamClassBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/jam/src/org/apache/xmlbeans/impl/jam/provider/JamClassBuilder.java?ref=397d9ee071879d39f6714a747d1c62fa2e893205"
            }
        ],
        "bug_id": "xmlbeans_11",
        "parent": "https://github.com/apache/xmlbeans/commit/021b669b805dce02c9ab159e0b5f10c41a61f264",
        "message": "jam: fix npe under 1.4\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@110850 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    },
    {
        "commit": "https://github.com/apache/xmlbeans/commit/52767f3e3b6d5047d6922cb96ae094c6699c3ba8",
        "file": [
            {
                "patch": "@@ -139,8 +139,8 @@ protected static SchemaDocument parseSchemaFile(File file)\n       (file, SchemaDocument.type, options);\n   }\n \n-  protected static SchemaTypeSystem createSchemaTypeSystem(SchemaDocument[] xsds)\n-    throws IOException, XmlException\n+  public static SchemaTypeSystem createSchemaTypeSystem(SchemaDocument[] xsds)\n+    throws XmlException\n   {\n     SchemaTypeLoader soapencLoader = org.apache.xmlbeans.impl.schema.SoapEncSchemaTypeSystem.get();\n     SchemaTypeLoader xsdLoader = XmlBeans.getBuiltinTypeSystem();",
                "additions": 2,
                "raw_url": "https://github.com/apache/xmlbeans/raw/52767f3e3b6d5047d6922cb96ae094c6699c3ba8/v2/src/binding/org/apache/xmlbeans/impl/binding/compile/BindingCompilerTask.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "fc3d5773b040a76d98aa8e541767d9180cfef31d",
                "blob_url": "https://github.com/apache/xmlbeans/blob/52767f3e3b6d5047d6922cb96ae094c6699c3ba8/v2/src/binding/org/apache/xmlbeans/impl/binding/compile/BindingCompilerTask.java",
                "filename": "v2/src/binding/org/apache/xmlbeans/impl/binding/compile/BindingCompilerTask.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/src/binding/org/apache/xmlbeans/impl/binding/compile/BindingCompilerTask.java?ref=52767f3e3b6d5047d6922cb96ae094c6699c3ba8"
            },
            {
                "patch": "@@ -17,18 +17,19 @@\n \n import org.apache.xmlbeans.impl.binding.bts.*;\n import org.apache.xmlbeans.impl.binding.tylar.TylarWriter;\n+import org.apache.xmlbeans.impl.binding.tylar.TylarConstants;\n+import org.apache.xmlbeans.impl.binding.tylar.ExplodedTylarImpl;\n import org.apache.xmlbeans.impl.jam.*;\n import org.apache.xmlbeans.impl.common.XMLChar;\n-import org.apache.xmlbeans.XmlBeans;\n import org.apache.xmlbeans.SchemaTypeSystem;\n-import org.apache.xmlbeans.XmlObject;\n import org.apache.xmlbeans.XmlException;\n import org.w3.x2001.xmlSchema.*;\n import javax.xml.namespace.QName;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n import java.util.HashMap;\n+import java.util.Collection;\n import java.io.IOException;\n import java.io.StringWriter;\n \n@@ -76,12 +77,17 @@\n   // =========================================================================\n   // Variables\n \n-  private BindingFile mBindingFile;  // the file we're creating\n-  private BindingLoader mLoader; // the full loader: bindingFile + baseLoader\n-  private SchemaDocument mSchemaDocument; // schema doc we're generating\n-  //private Map mTns2Schema = new HashMap();\n-  private SchemaDocument.Schema mSchema;\n-  private JClass[] mClasses; // the input classes\n+  // the bindings that we're building up\n+  private BindingFile mBindingFile;\n+\n+  // the full loader: bindingFile + baseLoader\n+  private BindingLoader mLoader;\n+\n+  // maps a targetnamespace (string) to a schemadocument that we are creating\n+  private Map mTns2Schemadoc = new HashMap();\n+\n+  // the input classes\n+  private JClass[] mClasses;\n \n   // =========================================================================\n   // Constructors\n@@ -104,42 +110,67 @@ protected void internalBind(TylarWriter writer) {\n     mBindingFile = new BindingFile();\n     mLoader = CompositeBindingLoader.forPath\n             (new BindingLoader[] {mBindingFile, super.getBaseBindingLoader()});\n-    mSchemaDocument = SchemaDocument.Factory.newInstance();\n-    mSchema = mSchemaDocument.addNewSchema();\n-    if (mClasses.length > 0) {\n-      //FIXME how should we determine the targetnamespace for the schema?\n-      //here we just derive it from the first class in the list\n-      mSchema.setTargetNamespace(getTargetNamespace(mClasses[0]));\n-    }\n     //This does the binding\n     for(int i=0; i<mClasses.length; i++) {\n       if (!getAnnotation(mClasses[i],TAG_CT_EXCLUDE,false)) {\n         getBindingTypeFor(mClasses[i]);\n       }\n     }\n     //\n+    SchemaDocument[] xsds = null;\n     try {\n       writer.writeBindingFile(mBindingFile);\n       //REVIEW maybe we should just include the schema and let super class write it out?\n-      writer.writeSchema(mSchemaDocument,\"schema-0.xsd\");\n+      xsds = getGeneratedSchemaDocuments();\n+      for(int i=0; i<xsds.length; i++) {\n+        writer.writeSchema(xsds[i],\"schema-\"+i+\".xsd\");\n+      }\n     } catch(IOException ioe) {\n       logError(ioe);\n     }\n-    try {\n-      SchemaTypeSystem sts = XmlBeans.compileXsd\n-        (new XmlObject[] {mSchemaDocument},XmlBeans.getBuiltinTypeSystem(),null);\n-      writer.writeSchemaTypeSystem(sts);\n-    } catch(IOException ioe) {\n-      //logError(ioe); ignore for now\n-    } catch(XmlException xe) {\n-      //logError(xe);  ignore for now\n+    SchemaTypeSystem sts = null;\n+    {\n+      try {\n+        sts = Schema2JavaTask.createSchemaTypeSystem(xsds);\n+        if (sts == null) {\n+          throw new IllegalStateException(\"createSchemaTypeSystem returned null\");\n+        }\n+      } catch(XmlException xe) {\n+        ExplodedTylarImpl.showXsbError(xe,null,\"write\",TylarConstants.SHOW_XSB_ERRORS || isVerbose());\n+      }\n+      if (sts != null) {\n+        try {\n+          writer.writeSchemaTypeSystem(sts);\n+        } catch(IOException ioe) {\n+          ExplodedTylarImpl.showXsbError(ioe,null,\"compile\",TylarConstants.SHOW_XSB_ERRORS || isVerbose());\n+        }\n+      }\n     }\n-\n   }\n \n   // ========================================================================\n   // Private methods\n \n+  private SchemaDocument.Schema findOrCreateSchema(String tns) {\n+    if (tns == null) throw new IllegalArgumentException();\n+    tns = tns.trim();\n+    SchemaDocument doc = (SchemaDocument)mTns2Schemadoc.get(tns);\n+    if (doc == null) {\n+      doc = SchemaDocument.Factory.newInstance();\n+      doc.addNewSchema().setTargetNamespace(tns);\n+      mTns2Schemadoc.put(tns,doc);\n+    }\n+    return doc.getSchema();\n+  }\n+\n+  private SchemaDocument[] getGeneratedSchemaDocuments() {\n+    Collection list = mTns2Schemadoc.values();\n+    SchemaDocument[] out = new SchemaDocument[list.size()];\n+    list.toArray(out);\n+    return out;\n+  }\n+\n+\n   /**\n    * Returns a bts BindingType for the given JClass.  If such a type\n    * has not yet been registered with the loader, it will be created.\n@@ -164,7 +195,8 @@ private BindingType getBindingTypeFor(JClass clazz) {\n    */\n   private BindingType createBindingTypeFor(JClass clazz) {\n     // create the schema type\n-    TopLevelComplexType xsType = mSchema.addNewComplexType();\n+    SchemaDocument.Schema schema = findOrCreateSchema(getTargetNamespace(clazz));\n+    TopLevelComplexType xsType = schema.addNewComplexType();\n     String tns = getTargetNamespace(clazz);\n     String xsdName = getAnnotation(clazz,TAG_CT_TYPENAME,clazz.getSimpleName());\n     QName qname = new QName(tns,xsdName);\n@@ -174,11 +206,11 @@ private BindingType createBindingTypeFor(JClass clazz) {\n     // we have to remember whether we created an ExtensionType because that\n     // is where the sequence of properties have to go - note that this\n     // gets passed into the SchemaPropertyFacade created below.  It's\n-    // unforuntante that the SchemaDocument model does not allow us to deal\n+    // unfortunate that the SchemaDocument model does not allow us to deal\n     // with this kind of thing in a more elegant and polymorphic way.\n     ExtensionType extType = null;\n     if (superclass != null && !superclass.isObjectType() &&\n-            !getAnnotation(clazz,TAG_CT_IGNORESUPER,false)) {\n+      !getAnnotation(clazz,TAG_CT_IGNORESUPER,false)) {\n       // FIXME we're ignoring interfaces at the moment\n       BindingType superBindingType = getBindingTypeFor(superclass);\n       ComplexContentDocument.ComplexContent ccd = xsType.addNewComplexContent();\n@@ -214,7 +246,7 @@ private BindingType createBindingTypeFor(JClass clazz) {\n     // check to see if they want to create a root elements from this type\n     JAnnotation[] anns = getNamedTags(clazz.getAllJavadocTags(),TAG_CT_ROOT);\n     for(int i=0; i<anns.length; i++) {\n-      TopLevelElement root = mSchema.addNewElement();\n+      TopLevelElement root = schema.addNewElement();\n       root.setName(makeNcNameSafe(anns[i].getValue\n                                   (JAnnotation.SINGLE_VALUE_NAME).asString()));\n       root.setType(qname);",
                "additions": 61,
                "raw_url": "https://github.com/apache/xmlbeans/raw/52767f3e3b6d5047d6922cb96ae094c6699c3ba8/v2/src/binding/org/apache/xmlbeans/impl/binding/compile/Java2Schema.java",
                "status": "modified",
                "changes": 90,
                "deletions": 29,
                "sha": "cf29b7d6872d825eb071fb1101f51cf17c8c5a12",
                "blob_url": "https://github.com/apache/xmlbeans/blob/52767f3e3b6d5047d6922cb96ae094c6699c3ba8/v2/src/binding/org/apache/xmlbeans/impl/binding/compile/Java2Schema.java",
                "filename": "v2/src/binding/org/apache/xmlbeans/impl/binding/compile/Java2Schema.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/src/binding/org/apache/xmlbeans/impl/binding/compile/Java2Schema.java?ref=52767f3e3b6d5047d6922cb96ae094c6699c3ba8"
            },
            {
                "patch": "@@ -212,13 +212,7 @@ protected static Tylar loadFromJar(JarInputStream jin, URI source)\n           if (sts == null) throw new IllegalStateException(\"null returned by SchemaTypeSystemImpl.forName()\");\n           if (VERBOSE) System.out.println(\"successfully loaded schema type system\");\n         } catch(Exception e) {\n-          System.out.println\n-            (\"[XBEANS] Notice: an unexpected error occurred while trying to read\\n \" +\n-             \"a binary version of your schemas from \"+source+\".\\n\"+\n-             \"Your bindings were still loaded, but you may have suffered some \" +\n-             \"performance degradation if your schemas are very large or \" +\n-             \"complicated.\\n\"+e.getMessage());\n-          if (SHOW_XSB_ERRORS) e.printStackTrace();\n+          ExplodedTylarImpl.showXsbError(e,source,\"read\",TylarConstants.SHOW_XSB_ERRORS);\n         }\n       }\n     }",
                "additions": 1,
                "raw_url": "https://github.com/apache/xmlbeans/raw/52767f3e3b6d5047d6922cb96ae094c6699c3ba8/v2/src/binding/org/apache/xmlbeans/impl/binding/tylar/DefaultTylarLoader.java",
                "status": "modified",
                "changes": 8,
                "deletions": 7,
                "sha": "c29e1e1add39fe5b8b15b88c66d141492d1fab8b",
                "blob_url": "https://github.com/apache/xmlbeans/blob/52767f3e3b6d5047d6922cb96ae094c6699c3ba8/v2/src/binding/org/apache/xmlbeans/impl/binding/tylar/DefaultTylarLoader.java",
                "filename": "v2/src/binding/org/apache/xmlbeans/impl/binding/tylar/DefaultTylarLoader.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/src/binding/org/apache/xmlbeans/impl/binding/tylar/DefaultTylarLoader.java?ref=52767f3e3b6d5047d6922cb96ae094c6699c3ba8"
            },
            {
                "patch": "@@ -131,13 +131,7 @@ public static ExplodedTylarImpl load(File dir, JavaOutputStream joust)\n         if (VERBOSE) System.out.println\n           (\"[XBEANS] loaded schema type system '\"+stsName+\"'\");\n       } catch(Exception e) {\n-        System.out.println\n-          (\"[XBEANS] Notice: an unexpected error occurred while trying to read\\n \" +\n-           \"a binary version of your schemas from \"+dir+\".\\n\"+\n-           \"Your bindings were still loaded, but you may have suffered some \" +\n-           \"performance degradation if your schemas are very large or \" +\n-           \"complicated.\\n\"+e.getMessage());\n-        if (SHOW_XSB_ERRORS) e.printStackTrace();\n+        showXsbError(e,dir.toURI(),\"read\",TylarConstants.SHOW_XSB_ERRORS);\n       }\n     }\n \n@@ -192,12 +186,7 @@ public void writeSchemaTypeSystem(SchemaTypeSystem sts) throws IOException {\n                                          mRootDir,\n                                          null,null,null);\n     } catch(Exception e) {\n-      System.out.println\n-        (\"[XBEANS] Notice: an unexpected error occurred while trying to save\\n \" +\n-         \"a binary version of your schemas.  Your bindings are still\\n \"+\n-         \"ok, but you may suffer some performance degradation if your schemas\\n \"+\n-         \"are very large or complicated.\\n\"+e.getMessage());\n-      if (VERBOSE) e.printStackTrace();\n+      showXsbError(e,mRootDir.toURI(),\"write\",TylarConstants.SHOW_XSB_ERRORS);\n     }\n   }\n \n@@ -209,6 +198,26 @@ public void close() throws IOException {\n     if (mJoust != null) mJoust.close();\n   }\n \n+\n+  // ========================================================================\n+  // Public static methods\n+\n+  public static void showXsbError(Throwable e,\n+                                  URI where,\n+                                  String readOrWrite,\n+                                  boolean showTrace)\n+  {\n+    System.out.println\n+      (\"[XBEANS] Notice: an unexpected error occurred while trying to\\n \"+\n+       readOrWrite+\" a binary version of your schemas\"+\n+       ((where == null) ? \".\" : \" at\\n\"+where+\"\\n\")+\n+       \"\\nYour bindings are ok, but you may suffer some performance\\n\" +\n+       \"degradation if your schemas are very large or complicated.\\n\"+\n+       \"(exception is \"+e.getClass()+\", message is '\"+e.getMessage()+\"'\");\n+    if (showTrace) e.printStackTrace();\n+    System.out.flush();\n+  }\n+\n   // ========================================================================\n   // Tylar implementation\n ",
                "additions": 22,
                "raw_url": "https://github.com/apache/xmlbeans/raw/52767f3e3b6d5047d6922cb96ae094c6699c3ba8/v2/src/binding/org/apache/xmlbeans/impl/binding/tylar/ExplodedTylarImpl.java",
                "status": "modified",
                "changes": 35,
                "deletions": 13,
                "sha": "d20be687157bd283b12225d8bb1ee97c5c7920fd",
                "blob_url": "https://github.com/apache/xmlbeans/blob/52767f3e3b6d5047d6922cb96ae094c6699c3ba8/v2/src/binding/org/apache/xmlbeans/impl/binding/tylar/ExplodedTylarImpl.java",
                "filename": "v2/src/binding/org/apache/xmlbeans/impl/binding/tylar/ExplodedTylarImpl.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/src/binding/org/apache/xmlbeans/impl/binding/tylar/ExplodedTylarImpl.java?ref=52767f3e3b6d5047d6922cb96ae094c6699c3ba8"
            },
            {
                "patch": "@@ -522,7 +522,7 @@ static void resolveCcExtension(SchemaTypeImpl sImpl, ExtensionType parseTree, bo\n         \n         // apply rule #2 near http://www.w3.org/TR/xmlschema-1/#c-mve: empty ext model -> mixed taken from base\n         if (extensionModel == null && !mixed)\n-            mixed = (baseType.getContentType() == SchemaType.MIXED_CONTENT);\n+            mixed = (baseType != null && baseType.getContentType() == SchemaType.MIXED_CONTENT);\n         \n         // apply Derivation Valid (Extension) rule 1.4.2.2\n         if (baseType != null && (baseType.getContentType() != SchemaType.EMPTY_CONTENT) &&",
                "additions": 1,
                "raw_url": "https://github.com/apache/xmlbeans/raw/52767f3e3b6d5047d6922cb96ae094c6699c3ba8/v2/src/typeimpl/org/apache/xmlbeans/impl/schema/StscComplexTypeResolver.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "f16f24035a8690f325b9505acaf05b210fca21a5",
                "blob_url": "https://github.com/apache/xmlbeans/blob/52767f3e3b6d5047d6922cb96ae094c6699c3ba8/v2/src/typeimpl/org/apache/xmlbeans/impl/schema/StscComplexTypeResolver.java",
                "filename": "v2/src/typeimpl/org/apache/xmlbeans/impl/schema/StscComplexTypeResolver.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/src/typeimpl/org/apache/xmlbeans/impl/schema/StscComplexTypeResolver.java?ref=52767f3e3b6d5047d6922cb96ae094c6699c3ba8"
            }
        ],
        "bug_id": "xmlbeans_12",
        "parent": "https://github.com/apache/xmlbeans/commit/31265a04331ed7566ae5da69e43b5d9efd062dff",
        "message": "fix NPE in StscComplexTypeResolver, fix j2s to generate multiple schemas correctly\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@110684 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    },
    {
        "commit": "https://github.com/apache/xmlbeans/commit/0f51e75d71af1f35eee67a1c4657a8683cb670df",
        "file": [
            {
                "patch": "@@ -193,6 +193,18 @@ public String toString()\n             getMethod = ReflectionUtils.getGetterMethod(prop, beanClass);\n             setMethod = ReflectionUtils.getSetterMethod(prop, beanClass);\n             issetMethod = ReflectionUtils.getIssetterMethod(prop, beanClass);\n+\n+            //we may revisit whether this is an error\n+            if (getMethod == null) {\n+                String e = \"no getter found for \" + prop + \" on \" + beanClass;\n+                throw new XmlException(e);\n+            }\n+\n+            //we no doubt will revisit whether this is an error, esp for exceptions\n+            if (setMethod == null) {\n+                String e = \"no setter found for \" + prop + \" on \" + beanClass;\n+                throw new XmlException(e);\n+            }\n         }\n \n ",
                "additions": 12,
                "raw_url": "https://github.com/apache/xmlbeans/raw/0f51e75d71af1f35eee67a1c4657a8683cb670df/v2/src/marshal/org/apache/xmlbeans/impl/marshal/RuntimeBindingType.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "cfab546d2e4c81b030f7c5c07ff34d783d5558e5",
                "blob_url": "https://github.com/apache/xmlbeans/blob/0f51e75d71af1f35eee67a1c4657a8683cb670df/v2/src/marshal/org/apache/xmlbeans/impl/marshal/RuntimeBindingType.java",
                "filename": "v2/src/marshal/org/apache/xmlbeans/impl/marshal/RuntimeBindingType.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/src/marshal/org/apache/xmlbeans/impl/marshal/RuntimeBindingType.java?ref=0f51e75d71af1f35eee67a1c4657a8683cb670df"
            },
            {
                "patch": "@@ -104,6 +104,8 @@ public static Method getMethodOnClass(MethodName method_name,\n                                           Class clazz)\n         throws XmlException\n     {\n+        if (method_name == null) return null;\n+        \n         try {\n             return method_name.getMethodOn(clazz);\n         }",
                "additions": 2,
                "raw_url": "https://github.com/apache/xmlbeans/raw/0f51e75d71af1f35eee67a1c4657a8683cb670df/v2/src/marshal/org/apache/xmlbeans/impl/marshal/util/ReflectionUtils.java",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "28cdeaae34d0375f2dd2130f938a57ee2b16e88c",
                "blob_url": "https://github.com/apache/xmlbeans/blob/0f51e75d71af1f35eee67a1c4657a8683cb670df/v2/src/marshal/org/apache/xmlbeans/impl/marshal/util/ReflectionUtils.java",
                "filename": "v2/src/marshal/org/apache/xmlbeans/impl/marshal/util/ReflectionUtils.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/src/marshal/org/apache/xmlbeans/impl/marshal/util/ReflectionUtils.java?ref=0f51e75d71af1f35eee67a1c4657a8683cb670df"
            }
        ],
        "bug_id": "xmlbeans_13",
        "parent": "https://github.com/apache/xmlbeans/commit/9cd758e78456fe824f8d8a60a346f4fe535f4715",
        "message": "fix NPE and throw better error msg for null setter/getter\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@110539 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    },
    {
        "commit": "https://github.com/apache/xmlbeans/commit/ddd91671ec6417e431cb3d30b259e32a73cbd93a",
        "file": [
            {
                "patch": "@@ -147,6 +147,9 @@ public void writeBindingFile(BindingFile bf) throws IOException {\n \n   public void writeSchema(SchemaDocument xsd, String schemaFileName)\n           throws IOException {\n+    if (schemaFileName == null) {\n+      throw new IllegalArgumentException(\"null schemaFileName\");\n+    }\n     if (mSchemaDocuments == null) mSchemaDocuments = new ArrayList();\n     mSchemaDocuments.add(xsd);\n     writeXsd(xsd, new File(mSchemaDir, schemaFileName));",
                "additions": 3,
                "raw_url": "https://github.com/apache/xmlbeans/raw/ddd91671ec6417e431cb3d30b259e32a73cbd93a/v2/src/binding/org/apache/xmlbeans/impl/binding/tylar/ExplodedTylarImpl.java",
                "status": "modified",
                "changes": 3,
                "deletions": 0,
                "sha": "5fdefadaea4db5f4549be63ccf347638441fe15b",
                "blob_url": "https://github.com/apache/xmlbeans/blob/ddd91671ec6417e431cb3d30b259e32a73cbd93a/v2/src/binding/org/apache/xmlbeans/impl/binding/tylar/ExplodedTylarImpl.java",
                "filename": "v2/src/binding/org/apache/xmlbeans/impl/binding/tylar/ExplodedTylarImpl.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/src/binding/org/apache/xmlbeans/impl/binding/tylar/ExplodedTylarImpl.java?ref=ddd91671ec6417e431cb3d30b259e32a73cbd93a"
            }
        ],
        "bug_id": "xmlbeans_14",
        "parent": "https://github.com/apache/xmlbeans/commit/3d37f6402d63eabb59c0f4d90172a159d98d4ac0",
        "message": "fix NPE in ExplodedTylarImpl\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@110436 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    },
    {
        "commit": "https://github.com/apache/xmlbeans/commit/98990541538d4c0e7a899dc876c39c34daee8704",
        "file": [
            {
                "patch": "@@ -378,9 +378,9 @@ private void resolveJavaName(Scratch scratch) {\n           logVerbose(\"processing element \"+scratch.getXmlName());\n           SchemaType contentType = scratch.getSchemaType().getProperties()[0].getType();\n           logVerbose(\"content type is \"+contentType.getName());\n-          if (contentType.isPrimitiveType() ||\n+          if (contentType.isPrimitiveType() /*||\n                   //FIXME why is this not a primitive? gross hack to make things work for now\n-                  contentType.getName().toString().equals(\"{http://www.w3.org/2001/XMLSchema}int\")) {\n+                  contentType.getName().toString().equals(\"{http://www.w3.org/2001/XMLSchema}int\")*/) {\n             //REVIEW this is a quick bug fix for the case where an element\n             //is of a primitive type.  I'm not completely sure it is the right\n             //thing to do.  pcal",
                "additions": 2,
                "raw_url": "https://github.com/apache/xmlbeans/raw/98990541538d4c0e7a899dc876c39c34daee8704/v2/src/binding/org/apache/xmlbeans/impl/binding/compile/Schema2Java.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "933178a9d04f47e4ee7837938cba3ebd2868e648",
                "blob_url": "https://github.com/apache/xmlbeans/blob/98990541538d4c0e7a899dc876c39c34daee8704/v2/src/binding/org/apache/xmlbeans/impl/binding/compile/Schema2Java.java",
                "filename": "v2/src/binding/org/apache/xmlbeans/impl/binding/compile/Schema2Java.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/src/binding/org/apache/xmlbeans/impl/binding/compile/Schema2Java.java?ref=98990541538d4c0e7a899dc876c39c34daee8704"
            },
            {
                "patch": "@@ -106,6 +106,13 @@\n    */\n   public JAnnotation getValueAsAnnotation();\n \n+  /**\n+   * Returns the value of this member as a JClass.  Returns null if the\n+   * value cannot be understood as a class name or if the type of the member\n+   * is known to be something other than java.lang.Class.\n+   */\n+  public JClass getValueAsClass();\n+\n   /**\n    * Returns the String value of the annotation.  Returns an empty string\n    * by default.",
                "additions": 7,
                "raw_url": "https://github.com/apache/xmlbeans/raw/98990541538d4c0e7a899dc876c39c34daee8704/v2/src/jam/org/apache/xmlbeans/impl/jam/JAnnotationMember.java",
                "status": "modified",
                "changes": 7,
                "deletions": 0,
                "sha": "3a213867e9357618192e11b514504e8bce424cc6",
                "blob_url": "https://github.com/apache/xmlbeans/blob/98990541538d4c0e7a899dc876c39c34daee8704/v2/src/jam/org/apache/xmlbeans/impl/jam/JAnnotationMember.java",
                "filename": "v2/src/jam/org/apache/xmlbeans/impl/jam/JAnnotationMember.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/src/jam/org/apache/xmlbeans/impl/jam/JAnnotationMember.java?ref=98990541538d4c0e7a899dc876c39c34daee8704"
            },
            {
                "patch": "@@ -99,14 +99,12 @@ public BaseJAnnotation(JElement parent,\n     mParent = parent;\n     mName = name;\n     mValue = value;  // ok to be null\n+    if (mValue != null) mValue = mValue.trim();\n     if (STRIP_QUOTES){\n-      if (mValue != null) {\n-        mValue = mValue.trim();\n-        if (mValue.length() > 1) {\n-          if  (mValue.charAt(0) == '\\\"' &&\n-                  mValue.charAt(mValue.length()-1) == '\\\"') {\n-            mValue = mValue.substring(1,mValue.length()-1);\n-          }\n+      if (mValue.length() > 1) {\n+        if  (mValue.charAt(0) == '\\\"' &&\n+                mValue.charAt(mValue.length()-1) == '\\\"') {\n+          mValue = mValue.substring(1,mValue.length()-1);\n         }\n       }\n     }",
                "additions": 5,
                "raw_url": "https://github.com/apache/xmlbeans/raw/98990541538d4c0e7a899dc876c39c34daee8704/v2/src/jam/org/apache/xmlbeans/impl/jam/internal/BaseJAnnotation.java",
                "status": "modified",
                "changes": 12,
                "deletions": 7,
                "sha": "e3da955a06183eff6ff56ba9339df76a3b1f5f8a",
                "blob_url": "https://github.com/apache/xmlbeans/blob/98990541538d4c0e7a899dc876c39c34daee8704/v2/src/jam/org/apache/xmlbeans/impl/jam/internal/BaseJAnnotation.java",
                "filename": "v2/src/jam/org/apache/xmlbeans/impl/jam/internal/BaseJAnnotation.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/src/jam/org/apache/xmlbeans/impl/jam/internal/BaseJAnnotation.java?ref=98990541538d4c0e7a899dc876c39c34daee8704"
            }
        ],
        "bug_id": "xmlbeans_15",
        "parent": "https://github.com/apache/xmlbeans/commit/e91d15a027863980ff96132a1465cbd14a31e29e",
        "message": "fix Schema2Java NPE, trimming on BaseJAnnotation\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@110387 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    },
    {
        "commit": "https://github.com/apache/xmlbeans/commit/fb147549cbd9251be99bdc34ce777cfbde2a6cbf",
        "file": [
            {
                "patch": "@@ -272,8 +272,6 @@ static void advanceToFirstItemOfInterest(XMLStreamReader rdr)\n         try {\n             for (int state = rdr.getEventType(); rdr.hasNext(); state = rdr.next()) {\n                 switch (state) {\n-\n-\n                     case XMLStreamReader.START_ELEMENT:\n                         return;\n                     case XMLStreamReader.END_ELEMENT:\n@@ -305,7 +303,6 @@ static void advanceToFirstItemOfInterest(XMLStreamReader rdr)\n                         break;\n \n                     default:\n-                        //this case pretty much means malformed xml or a bug\n                         throw new XmlRuntimeException(\"unexpected xml state:\" + state +\n                                                       \"in\" + rdr);\n                 }\n@@ -322,11 +319,16 @@ static void addError(Collection errors,\n                          Location location,\n                          String sourceName)\n     {\n-        final XmlError err = XmlError.forLocation(msg,\n-                                                  sourceName,\n-                                                  location.getLineNumber(),\n-                                                  location.getColumnNumber(),\n-                                                  location.getCharacterOffset());\n+        final XmlError err;\n+        if (location != null) {\n+            err = XmlError.forLocation(msg,\n+                                       sourceName,\n+                                       location.getLineNumber(),\n+                                       location.getColumnNumber(),\n+                                       location.getCharacterOffset());\n+        } else {\n+            err = XmlError.forSource(msg, sourceName);\n+        }\n         errors.add(err);\n     }\n ",
                "additions": 10,
                "raw_url": "https://github.com/apache/xmlbeans/raw/fb147549cbd9251be99bdc34ce777cfbde2a6cbf/v2/src/marshal/org/apache/xmlbeans/impl/marshal/MarshalStreamUtils.java",
                "status": "modified",
                "changes": 18,
                "deletions": 8,
                "sha": "cbd87006bc2cfb497cf8428e2773d6549adfa45e",
                "blob_url": "https://github.com/apache/xmlbeans/blob/fb147549cbd9251be99bdc34ce777cfbde2a6cbf/v2/src/marshal/org/apache/xmlbeans/impl/marshal/MarshalStreamUtils.java",
                "filename": "v2/src/marshal/org/apache/xmlbeans/impl/marshal/MarshalStreamUtils.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/src/marshal/org/apache/xmlbeans/impl/marshal/MarshalStreamUtils.java?ref=fb147549cbd9251be99bdc34ce777cfbde2a6cbf"
            },
            {
                "patch": "@@ -85,7 +85,6 @@\n     private final RuntimeBindingTypeTable typeTable;\n     private final RuntimeTypeFactory runtimeTypeFactory;\n \n-    //REVIEW: can this be static?\n     private static final XMLOutputFactory XML_OUTPUT_FACTORY =\n         XMLOutputFactory.newInstance();\n ",
                "additions": 0,
                "raw_url": "https://github.com/apache/xmlbeans/raw/fb147549cbd9251be99bdc34ce777cfbde2a6cbf/v2/src/marshal/org/apache/xmlbeans/impl/marshal/MarshallerImpl.java",
                "status": "modified",
                "changes": 1,
                "deletions": 1,
                "sha": "3c8f01b243bbc32fcfc5d075ce94dc31cf6a1008",
                "blob_url": "https://github.com/apache/xmlbeans/blob/fb147549cbd9251be99bdc34ce777cfbde2a6cbf/v2/src/marshal/org/apache/xmlbeans/impl/marshal/MarshallerImpl.java",
                "filename": "v2/src/marshal/org/apache/xmlbeans/impl/marshal/MarshallerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/src/marshal/org/apache/xmlbeans/impl/marshal/MarshallerImpl.java?ref=fb147549cbd9251be99bdc34ce777cfbde2a6cbf"
            }
        ],
        "bug_id": "xmlbeans_16",
        "parent": "https://github.com/apache/xmlbeans/commit/7ee844957501b56e443e7f1d20ebc0cd0de76496",
        "message": "fix NPE during error reporting\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@110377 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    },
    {
        "commit": "https://github.com/apache/xmlbeans/commit/cb3dc0a87a75995a3492bf90b25ed19fe07a8858",
        "file": [
            {
                "patch": "@@ -56,10 +56,7 @@\n package org.apache.xmlbeans.impl.binding.compile;\n \n import org.apache.xmlbeans.impl.binding.bts.*;\n-import org.apache.xmlbeans.impl.jam.JAnnotation;\n-import org.apache.xmlbeans.impl.jam.JClass;\n-import org.apache.xmlbeans.impl.jam.JProperty;\n-import org.apache.xmlbeans.impl.jam.JElement;\n+import org.apache.xmlbeans.impl.jam.*;\n import org.w3.x2001.xmlSchema.*;\n \n import javax.xml.namespace.QName;\n@@ -253,7 +250,8 @@ private String getTargetNamespace(JClass clazz) {\n     if (clazz.isPrimitive()) {\n       pkg_name = JAVA_NAMESPACE_URI;\n     } else {\n-      pkg_name = clazz.getContainingPackage().getQualifiedName();\n+      JPackage pkg = clazz.getContainingPackage();\n+      pkg_name = (pkg == null) ? \"\" : pkg.getQualifiedName();\n       if (pkg_name.startsWith(JAVA_PACKAGE_PREFIX)) {\n         pkg_name = JAVA_NAMESPACE_URI+\".\"+\n                 pkg_name.substring(JAVA_PACKAGE_PREFIX.length());",
                "additions": 3,
                "raw_url": "https://github.com/apache/xmlbeans/raw/cb3dc0a87a75995a3492bf90b25ed19fe07a8858/v2/src/binding/org/apache/xmlbeans/impl/binding/compile/Java2Schema.java",
                "status": "modified",
                "changes": 8,
                "deletions": 5,
                "sha": "8642dc15704a788e0a0fae1b3067122510b72111",
                "blob_url": "https://github.com/apache/xmlbeans/blob/cb3dc0a87a75995a3492bf90b25ed19fe07a8858/v2/src/binding/org/apache/xmlbeans/impl/binding/compile/Java2Schema.java",
                "filename": "v2/src/binding/org/apache/xmlbeans/impl/binding/compile/Java2Schema.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/src/binding/org/apache/xmlbeans/impl/binding/compile/Java2Schema.java?ref=cb3dc0a87a75995a3492bf90b25ed19fe07a8858"
            }
        ],
        "bug_id": "xmlbeans_17",
        "parent": "https://github.com/apache/xmlbeans/commit/16743a2578f1dd9e72e120e05cd1b82302182c96",
        "message": "fix small npe in java2schema\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@110229 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    },
    {
        "commit": "https://github.com/apache/xmlbeans/commit/8b599d1d4e896a81f091b2d5250be1d3c1fbdebd",
        "file": [
            {
                "patch": "@@ -389,7 +389,12 @@ private static int findSchemeColon(String uri)\n             return -1;\n         if (uri.charAt(i) != ':')\n             return -1;\n-        return i;\n+        // consume consecutive colons\n+        for (; i < len; i++)\n+            if (uri.charAt(i) != ':')\n+                break;\n+        // for the \"scheme:::\" case, return len-1\n+        return i-1;\n     }\n \n     private static String jls77String(String name)\n@@ -465,9 +470,16 @@ public static String getPackageFromNamespace(String uri, boolean useJaxRpcRules)\n         int i = findSchemeColon(uri);\n         List result = null;\n \n-        if ( i >= 0 && uri.substring(0, i).equals(\"java\"))\n+        if (i == len-1)\n+        {\n+            // XMLBEANS-57: colon is at end so just use scheme as the package name\n+            result = new ArrayList();\n+            result.add(uri.substring(0, i));\n+        }\n+        else if (i >= 0 && uri.substring(0, i).equals(\"java\"))\n+        {\n             result =  Arrays.asList(uri.substring(i + 1).split(\"\\\\.\"));\n-\n+        }\n         else {\n             result = new ArrayList();\n             outer: for (i = i + 1; i < len; )\n@@ -494,9 +506,15 @@ public static String getPackageFromNamespace(String uri, boolean useJaxRpcRules)\n         StringBuffer buf = new StringBuffer();\n         for (Iterator it = result.iterator(); it.hasNext(); )\n         {\n-            buf.append(nonJavaKeyword(lowerCamelCase((String)it.next(), useJaxRpcRules, true)));\n-            buf.append('.');\n+            String part = nonJavaKeyword(lowerCamelCase((String)it.next(), useJaxRpcRules, true));\n+            if (part.length() > 0)\n+            {\n+                buf.append(part);\n+                buf.append('.');\n+            }\n         }\n+        if (buf.length() == 0)\n+            return \"noNamespace\";\n         return buf.substring(0, buf.length() - 1); // chop off extra dot\n     }\n ",
                "additions": 23,
                "raw_url": "https://github.com/apache/xmlbeans/raw/8b599d1d4e896a81f091b2d5250be1d3c1fbdebd/v2/src/common/org/apache/xmlbeans/impl/common/NameUtil.java",
                "status": "modified",
                "changes": 28,
                "deletions": 5,
                "sha": "ef4489004567ee85cd54870753719a1cae4e91ad",
                "blob_url": "https://github.com/apache/xmlbeans/blob/8b599d1d4e896a81f091b2d5250be1d3c1fbdebd/v2/src/common/org/apache/xmlbeans/impl/common/NameUtil.java",
                "filename": "v2/src/common/org/apache/xmlbeans/impl/common/NameUtil.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/src/common/org/apache/xmlbeans/impl/common/NameUtil.java?ref=8b599d1d4e896a81f091b2d5250be1d3c1fbdebd"
            },
            {
                "patch": "@@ -1403,12 +1403,19 @@ private static boolean typeDerivationOK(SchemaType baseType, SchemaType derivedT\n     }\n \n     private static boolean checkAllDerivationsForRestriction(SchemaType baseType, SchemaType derivedType, Collection errors, XmlObject context) {\n-\n         boolean allDerivationsAreRestrictions = true;\n         SchemaType currentType = derivedType;\n+\n+        // XMLBEANS-66: if baseType is a union, check restriction is of one of the constituant types\n+        List possibleTypes;\n+        if (baseType.getSimpleVariety() == SchemaType.UNION)\n+            possibleTypes = Arrays.asList(baseType.getUnionConstituentTypes());\n+        else\n+            possibleTypes = Arrays.asList(new SchemaType[] { baseType });\n+\n         // run up the types hierarchy from derived Type to base Type and make sure that all are derived by\n         //   restriction.  If any are not then this is not a valid restriction.\n-        while (!baseType.equals(currentType)) {\n+        while (!possibleTypes.contains(currentType)) {\n             if (currentType.getDerivationType() == SchemaType.DT_RESTRICTION) {\n                 currentType = currentType.getBaseType();\n             } else {",
                "additions": 9,
                "raw_url": "https://github.com/apache/xmlbeans/raw/8b599d1d4e896a81f091b2d5250be1d3c1fbdebd/v2/src/typeimpl/org/apache/xmlbeans/impl/schema/StscChecker.java",
                "status": "modified",
                "changes": 11,
                "deletions": 2,
                "sha": "1a667781372b174240d627100affd870627c1fa4",
                "blob_url": "https://github.com/apache/xmlbeans/blob/8b599d1d4e896a81f091b2d5250be1d3c1fbdebd/v2/src/typeimpl/org/apache/xmlbeans/impl/schema/StscChecker.java",
                "filename": "v2/src/typeimpl/org/apache/xmlbeans/impl/schema/StscChecker.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/src/typeimpl/org/apache/xmlbeans/impl/schema/StscChecker.java?ref=8b599d1d4e896a81f091b2d5250be1d3c1fbdebd"
            },
            {
                "patch": "@@ -3,12 +3,18 @@\n     xmlns=\"http://xbean/scomp/derivation/ElementRestriction\"\n     targetNamespace=\"http://xbean/scomp/derivation/ElementRestriction\"\n     >\n+\n+   <xsd:simpleType name=\"uniontype\">\n+     <xsd:union memberTypes=\"xsd:integer xsd:decimal xsd:string xsd:double\"/>\n+   </xsd:simpleType>\n+\n    <!--Walmsley p.320-->\n     <xsd:complexType name=\"baseT\">\n         <xsd:sequence>\n             <xsd:element name=\"a\" maxOccurs=\"3\"/>\n             <xsd:element name=\"b\" fixed=\"myval\"/>\n             <xsd:element name=\"c\" type=\"xsd:string\"/>\n+            <xsd:element name=\"d\" type=\"uniontype\"/>\n         </xsd:sequence>\n     </xsd:complexType>\n \n@@ -19,11 +25,13 @@\n                     <xsd:element name=\"a\" maxOccurs=\"2\"/>\n                     <xsd:element name=\"b\" fixed=\"myval\"/>\n                     <xsd:element name=\"c\" type=\"xsd:token\"/>\n+                    <xsd:element name=\"d\" type=\"xsd:integer\"/>\n                 </xsd:sequence>\n             </xsd:restriction>\n         </xsd:complexContent>\n     </xsd:complexType>\n \n     <xsd:element name=\"Element\" type=\"RestrictedEltT\"/>\n+\n </xsd:schema>\n ",
                "additions": 8,
                "raw_url": "https://github.com/apache/xmlbeans/raw/8b599d1d4e896a81f091b2d5250be1d3c1fbdebd/v2/test/cases/xbean/scomp/derivation/ElementRestriction.xsd",
                "status": "modified",
                "changes": 8,
                "deletions": 0,
                "sha": "fa15155a5e2ab051bf10af2b1e9880f947816952",
                "blob_url": "https://github.com/apache/xmlbeans/blob/8b599d1d4e896a81f091b2d5250be1d3c1fbdebd/v2/test/cases/xbean/scomp/derivation/ElementRestriction.xsd",
                "filename": "v2/test/cases/xbean/scomp/derivation/ElementRestriction.xsd",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/cases/xbean/scomp/derivation/ElementRestriction.xsd?ref=8b599d1d4e896a81f091b2d5250be1d3c1fbdebd"
            },
            {
                "patch": "@@ -1,2 +1,2 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n-<root xmlns=\"dumbNS\" xmlns:bar=\"barNS\" b=\"3\" bar:b=\"4\"/>\r\n+<root xmlns=\"dumbNS:::\" xmlns:bar=\"barNS\" b=\"3\" bar:b=\"4\"/>\r",
                "additions": 1,
                "raw_url": "https://github.com/apache/xmlbeans/raw/8b599d1d4e896a81f091b2d5250be1d3c1fbdebd/v2/test/cases/xbean/simple/dumb/dumb.xml",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "2e9dd2cbfbb074b6107006f127ebc9f3661c8486",
                "blob_url": "https://github.com/apache/xmlbeans/blob/8b599d1d4e896a81f091b2d5250be1d3c1fbdebd/v2/test/cases/xbean/simple/dumb/dumb.xml",
                "filename": "v2/test/cases/xbean/simple/dumb/dumb.xml",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/cases/xbean/simple/dumb/dumb.xml?ref=8b599d1d4e896a81f091b2d5250be1d3c1fbdebd"
            },
            {
                "patch": "@@ -1,9 +1,10 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n \r\n+<!-- XMLBEANS-57: colon at end of targetNamespace -->\r\n <xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\r\n         xmlns:bar=\"barNS\"\r\n-        xmlns=\"dumbNS\"\r\n-        targetNamespace=\"dumbNS\"\r\n+        xmlns=\"dumbNS:::\"\r\n+        targetNamespace=\"dumbNS:::\"\r\n         elementFormDefault=\"qualified\">\r\n \r\n     <xs:import namespace=\"barNS\" schemaLocation=\"sub/bar.xsd\" />\r",
                "additions": 3,
                "raw_url": "https://github.com/apache/xmlbeans/raw/8b599d1d4e896a81f091b2d5250be1d3c1fbdebd/v2/test/cases/xbean/simple/dumb/dumb.xsd",
                "status": "modified",
                "changes": 5,
                "deletions": 2,
                "sha": "8efad6a401e7f390ed7e436e7d0fc735c913a2fb",
                "blob_url": "https://github.com/apache/xmlbeans/blob/8b599d1d4e896a81f091b2d5250be1d3c1fbdebd/v2/test/cases/xbean/simple/dumb/dumb.xsd",
                "filename": "v2/test/cases/xbean/simple/dumb/dumb.xsd",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/cases/xbean/simple/dumb/dumb.xsd?ref=8b599d1d4e896a81f091b2d5250be1d3c1fbdebd"
            },
            {
                "patch": "@@ -19,6 +19,7 @@\n import org.apache.xmlbeans.XmlObject;\n import org.apache.xmlbeans.XmlString;\n import org.apache.xmlbeans.XmlErrorCodes;\n+import org.apache.xmlbeans.XmlDecimal;\n import scomp.common.BaseCase;\n \n \n@@ -60,18 +61,24 @@ public void testRestrictedElement() throws Throwable {\n         elt.setB(bValue);\n         //c is of type xsd:token\n         elt.setC(\"foobar:123\");\n+        //d is an xsd:integer\n+        XmlDecimal dValue = XmlDecimal.Factory.newInstance();\n+        dValue.setBigDecimalValue(new java.math.BigDecimal(\"3.5\"));\n+        elt.setD(dValue);\n         assertTrue(!doc.validate(validateOptions));\n         showErrors();\n         String[] errExpected = new String[]{\n             XmlErrorCodes.ELEM_COMPLEX_TYPE_LOCALLY_VALID$EXPECTED_DIFFERENT_ELEMENT,\n-            XmlErrorCodes.ELEM_LOCALLY_VALID$FIXED_VALID_SIMPLE_TYPE,\n+            XmlErrorCodes.ELEM_LOCALLY_VALID$FIXED_VALID_MIXED_CONTENT,\n+            XmlErrorCodes.DATATYPE_FRACTION_DIGITS_VALID,\n         };\n                      assertTrue(compareErrorCodes(errExpected));\n \n \n         elt.removeA(2);\n         bValue.setStringValue(\"myval\");\n         elt.setB(bValue);\n+        elt.setD(new Integer(3));\n         assertEquals(\"myval\",\n                 ((XmlString)elt.getB()).getStringValue());\n         try {",
                "additions": 8,
                "raw_url": "https://github.com/apache/xmlbeans/raw/8b599d1d4e896a81f091b2d5250be1d3c1fbdebd/v2/test/src/scomp/derivation/restriction/detailed/ElementRestriction.java",
                "status": "modified",
                "changes": 9,
                "deletions": 1,
                "sha": "e011a65a3e7952c3fd4c21eafdd364a21c27b855",
                "blob_url": "https://github.com/apache/xmlbeans/blob/8b599d1d4e896a81f091b2d5250be1d3c1fbdebd/v2/test/src/scomp/derivation/restriction/detailed/ElementRestriction.java",
                "filename": "v2/test/src/scomp/derivation/restriction/detailed/ElementRestriction.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/scomp/derivation/restriction/detailed/ElementRestriction.java?ref=8b599d1d4e896a81f091b2d5250be1d3c1fbdebd"
            }
        ],
        "bug_id": "xmlbeans_18",
        "parent": "https://github.com/apache/xmlbeans/commit/9676cabae7bc898b71bc45b16230c606482a8a77",
        "message": "XMLBEANS-57: scomp failure for XSD namespace \"DAV:\"\n    if the namespace uri only has the scheme, it will become the package name\n\nXMLBEANS-66: NullPointerException when restricting a union with one of the union members\n    check for a valid restriction of one of the union member types\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@111065 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    },
    {
        "commit": "https://github.com/apache/xmlbeans/commit/7ad3d542c36ff49683ea3e77526b69ca9bef0f8f",
        "file": [
            {
                "patch": "@@ -33,8 +33,11 @@\n     {\n         try\n         {\n-            Object o = Class.forName(SystemProperties.getProperty(\"xmlbean.entityResolver\")).newInstance();\n-            _entityResolver = (EntityResolver)o;\n+            String erClassName = SystemProperties.getProperty(\"xmlbean.entityResolver\");\n+            if (erClassName != null) {\n+                Object o = Class.forName(erClassName).newInstance();\n+                _entityResolver = (EntityResolver)o;\n+            }\n         }\n         catch (Exception e)\n         {",
                "additions": 5,
                "raw_url": "https://github.com/apache/xmlbeans/raw/7ad3d542c36ff49683ea3e77526b69ca9bef0f8f/src/common/org/apache/xmlbeans/impl/common/ResolverUtil.java",
                "status": "modified",
                "changes": 7,
                "deletions": 2,
                "sha": "626e48bc5d33189dd1c603ba2752ff5872a19856",
                "blob_url": "https://github.com/apache/xmlbeans/blob/7ad3d542c36ff49683ea3e77526b69ca9bef0f8f/src/common/org/apache/xmlbeans/impl/common/ResolverUtil.java",
                "filename": "src/common/org/apache/xmlbeans/impl/common/ResolverUtil.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/src/common/org/apache/xmlbeans/impl/common/ResolverUtil.java?ref=7ad3d542c36ff49683ea3e77526b69ca9bef0f8f"
            }
        ],
        "bug_id": "xmlbeans_19",
        "parent": "https://github.com/apache/xmlbeans/commit/8d6a633f74417b185fa76d1c58c74d4db47dc5ac",
        "message": "Avoid unnecessarily throwing and catching an NPE on startup.\nContributed by John Sisson.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@387325 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    },
    {
        "commit": "https://github.com/apache/xmlbeans/commit/bc6e6b45cd31e72a876b9e9ced25424b2536b989",
        "file": [
            {
                "patch": "@@ -0,0 +1,34 @@\n+/*   Copyright 2004 The Apache Software Foundation\r\n+ *\r\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ *   you may not use this file except in compliance with the License.\r\n+ *   You may obtain a copy of the License at\r\n+ *\r\n+ *       http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ *   Unless required by applicable law or agreed to in writing, software\r\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ *   See the License for the specific language governing permissions and\r\n+ *  limitations under the License.\r\n+ */\r\n+package xmlcursor.xquery.checkin;\r\n+\r\n+import junit.framework.TestCase;\r\n+import org.apache.xmlbeans.XmlObject;\r\n+import org.apache.xmlbeans.XmlInteger;\r\n+\r\n+public class QueryEngineTests extends TestCase\r\n+{\r\n+    // Execute repeated queries to test picking up of the query engine from classpath\r\n+    // This test is following rev 292446 \r\n+    public void testQueryEngineSelection()throws Exception{\r\n+            XmlObject o = XmlObject.Factory.parse(\"<foo><a><b/></a></foo>\");\r\n+            XmlObject[] res = o.execQuery(\"(//a/b)\");\r\n+            res= o.execQuery(\"(//a/b)\");\r\n+            String expectedRes = \"<b/>\";\r\n+            assertEquals(expectedRes,res[0].xmlText());\r\n+\r\n+        }\r\n+\r\n+}\r",
                "additions": 34,
                "raw_url": "https://github.com/apache/xmlbeans/raw/bc6e6b45cd31e72a876b9e9ced25424b2536b989/test/src/xmlcursor/xquery/checkin/QueryEngineTests.java",
                "status": "added",
                "changes": 34,
                "deletions": 0,
                "sha": "56f406484f8c16ae29f19e195badaebfe9c4ec23",
                "blob_url": "https://github.com/apache/xmlbeans/blob/bc6e6b45cd31e72a876b9e9ced25424b2536b989/test/src/xmlcursor/xquery/checkin/QueryEngineTests.java",
                "filename": "test/src/xmlcursor/xquery/checkin/QueryEngineTests.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/test/src/xmlcursor/xquery/checkin/QueryEngineTests.java?ref=bc6e6b45cd31e72a876b9e9ced25424b2536b989"
            }
        ],
        "bug_id": "xmlbeans_20",
        "parent": "https://github.com/apache/xmlbeans/commit/a6f9a2141445daddb75ea475d0fa1347c3a3ebf4",
        "message": "Contributed by Rajiv Balachandran. Checkintest for NPE on repeated invocations of xquery engine (r292446 )\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@292579 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    },
    {
        "commit": "https://github.com/apache/xmlbeans/commit/57e676b63717ba3ee743e802e5c2bcce6f733435",
        "file": [
            {
                "patch": "@@ -129,7 +129,9 @@ public static synchronized String compileQuery(String queryExpr, XmlOptions opti\n \n     private static Query createXqrlCompiledQuery(String queryExpr, String currentVar)\n     {\n-        if (_xqrlAvailable && _xqrlCompileQuery == null)\n+        //if the XQRL engine has been determined unavailable, return null\n+        if ( !_xqrlAvailable ) return null;\n+        if ( _xqrlCompileQuery == null)\n         {\n             try\n             {",
                "additions": 3,
                "raw_url": "https://github.com/apache/xmlbeans/raw/57e676b63717ba3ee743e802e5c2bcce6f733435/src/store/org/apache/xmlbeans/impl/store/Query.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "b68f9576a34c1c23b0ab84dc5d5a1d896665db35",
                "blob_url": "https://github.com/apache/xmlbeans/blob/57e676b63717ba3ee743e802e5c2bcce6f733435/src/store/org/apache/xmlbeans/impl/store/Query.java",
                "filename": "src/store/org/apache/xmlbeans/impl/store/Query.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/src/store/org/apache/xmlbeans/impl/store/Query.java?ref=57e676b63717ba3ee743e802e5c2bcce6f733435"
            }
        ],
        "bug_id": "xmlbeans_21",
        "parent": "https://github.com/apache/xmlbeans/commit/03771ddae911a183a91d6c7314340a9c32f72514",
        "message": "Yana Kadiyska. Fixing NPE for repeated invocation of Saxon. Checkin test to follow\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@292446 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    },
    {
        "commit": "https://github.com/apache/xmlbeans/commit/2d2f5281280b9ec45115de4918b818f093d9dd6b",
        "file": [
            {
                "patch": "@@ -123,6 +123,13 @@ public void setMaxOccurs(BigInteger max)\n \n     public SchemaParticle[] getParticleChildren()\n     {\n+        if (_particleChildren == null)\n+        {\n+            assert _particleType != SchemaParticle.ALL &&\n+                _particleType != SchemaParticle.SEQUENCE &&\n+                _particleType != SchemaParticle.CHOICE;\n+            return null;\n+        }\n         SchemaParticle[] result = new SchemaParticle[_particleChildren.length];\n         System.arraycopy(_particleChildren, 0, result, 0, _particleChildren.length);\n         return result;",
                "additions": 7,
                "raw_url": "https://github.com/apache/xmlbeans/raw/2d2f5281280b9ec45115de4918b818f093d9dd6b/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaParticleImpl.java",
                "status": "modified",
                "changes": 7,
                "deletions": 0,
                "sha": "047d95fc2df32463c03de19b6b569be407086ae8",
                "blob_url": "https://github.com/apache/xmlbeans/blob/2d2f5281280b9ec45115de4918b818f093d9dd6b/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaParticleImpl.java",
                "filename": "src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaParticleImpl.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaParticleImpl.java?ref=2d2f5281280b9ec45115de4918b818f093d9dd6b"
            },
            {
                "patch": "@@ -974,8 +974,11 @@ String javaTypeForProperty(SchemaProperty sProp)\n                 return \"java.util.Calendar\";\n \n             case SchemaProperty.JAVA_ENUM:\n-                SchemaType sType = sProp.javaBasedOnType().getBaseEnumType();\n-                return findJavaType(sType).replace('$', '.') + \".Enum\";\n+                SchemaType sType = sProp.javaBasedOnType();\n+                if (sType.getSimpleVariety() == SchemaType.UNION)\n+                    sType = sType.getUnionCommonBaseType();\n+                assert sType.getBaseEnumType() != null;\n+                return findJavaType(sType.getBaseEnumType()).replace('$', '.') + \".Enum\";\n \n             case SchemaProperty.JAVA_OBJECT:\n                 return \"java.lang.Object\";",
                "additions": 5,
                "raw_url": "https://github.com/apache/xmlbeans/raw/2d2f5281280b9ec45115de4918b818f093d9dd6b/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeCodePrinter.java",
                "status": "modified",
                "changes": 7,
                "deletions": 2,
                "sha": "f50af2e349a7a66f440eb7addc06cf798d304a4e",
                "blob_url": "https://github.com/apache/xmlbeans/blob/2d2f5281280b9ec45115de4918b818f093d9dd6b/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeCodePrinter.java",
                "filename": "src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeCodePrinter.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeCodePrinter.java?ref=2d2f5281280b9ec45115de4918b818f093d9dd6b"
            },
            {
                "patch": "@@ -257,7 +257,7 @@ private static URI parseURI(String s)\n     }\n \n     //workaround for Sun bug # 4723726\n-    private static URI resolve(URI base, String child)\n+    public static URI resolve(URI base, String child)\n         throws URISyntaxException\n     {\n         URI childUri = new URI(child);\n@@ -268,11 +268,26 @@ private static URI resolve(URI base, String child)\n         // URI is pointing at something nested inside a jar, we seem to have\n         // to this ourselves to make sure that the nested jar url gets\n         // resolved correctly\n-        if (childUri.equals(ruri) &&\n+        if (childUri.equals(ruri) && !childUri.isAbsolute() &&\n           (base.getScheme().equals(\"jar\") || base.getScheme().equals(\"zip\"))) {\n             String r = base.toString();\n             int lastslash = r.lastIndexOf('/');\n             r = r.substring(0,lastslash) + \"/\" + childUri;\n+            // Sun's implementation of URI doesn't support references to the\n+            // parent directory (\"/..\") in the part after \"!/\" so we have to\n+            // remove these ourselves\n+            int slashDotDotIndex = r.lastIndexOf(\"/..\");\n+            int exclPointSlashIndex = r.lastIndexOf(\"!/\");\n+            while (slashDotDotIndex >= 0 && slashDotDotIndex > exclPointSlashIndex)\n+            {\n+                int prevSlashIndex = r.lastIndexOf(\"/\", slashDotDotIndex - 1);\n+                if (prevSlashIndex >= exclPointSlashIndex)\n+                {\n+                    String temp = r.substring(slashDotDotIndex + 3);\n+                    r = r.substring(0, prevSlashIndex).concat(temp);\n+                }\n+                slashDotDotIndex = r.lastIndexOf(\"/..\");\n+            }\n             return URI.create(r);\n         }\n ",
                "additions": 17,
                "raw_url": "https://github.com/apache/xmlbeans/raw/2d2f5281280b9ec45115de4918b818f093d9dd6b/src/typeimpl/org/apache/xmlbeans/impl/schema/StscImporter.java",
                "status": "modified",
                "changes": 19,
                "deletions": 2,
                "sha": "e9ce1da3d3f4b2cab67e68695d4dc74bdc59ee28",
                "blob_url": "https://github.com/apache/xmlbeans/blob/2d2f5281280b9ec45115de4918b818f093d9dd6b/src/typeimpl/org/apache/xmlbeans/impl/schema/StscImporter.java",
                "filename": "src/typeimpl/org/apache/xmlbeans/impl/schema/StscImporter.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/src/typeimpl/org/apache/xmlbeans/impl/schema/StscImporter.java?ref=2d2f5281280b9ec45115de4918b818f093d9dd6b"
            },
            {
                "patch": "@@ -530,7 +530,7 @@ public static SchemaTypeLoader loadXsd(XmlObject[] schemas, XmlOptions options)\n      */\n     public static SchemaTypeSystem compileXsd(XmlObject[] schemas, SchemaTypeLoader typepath, XmlOptions options) throws XmlException\n     {\n-        return compileXmlBeans(null, null, schemas, null, typepath!=null ? typepath : getContextTypeLoader(), null, options);\n+        return compileXmlBeans(null, null, schemas, null, typepath, null, options);\n     }\n \n     /**\n@@ -578,7 +578,7 @@ public static SchemaTypeSystem compileXsd(XmlObject[] schemas, SchemaTypeLoader\n      */\n     public static SchemaTypeSystem compileXsd(SchemaTypeSystem system, XmlObject[] schemas, SchemaTypeLoader typepath, XmlOptions options) throws XmlException\n     {\n-        return compileXmlBeans(null, system, schemas, null, typepath != null ? typepath : getContextTypeLoader(), null, options);\n+        return compileXmlBeans(null, system, schemas, null, typepath, null, options);\n     }\n \n     /**\n@@ -611,7 +611,8 @@ public static SchemaTypeSystem compileXsd(SchemaTypeSystem system, XmlObject[] s\n      *\n      * <p>The optional SchemaTypeLoader argument will be\n      * consulted for already-compiled schema types which may be linked\n-     * while processing the given schemas.</p>\n+     * while processing the given schemas. If not specified, the context\n+     * typeloader (as returned by {@link #getContextTypeLoader}) will be used.</p>\n      *\n      * <p>The optional {@link Filer} argument is used to create new binary or source\n      * files which are the product of the compilation.  If the Filer is null, the\n@@ -646,7 +647,7 @@ public static SchemaTypeSystem compileXmlBeans(String name, SchemaTypeSystem sys\n \n         try\n         {\n-            return (SchemaTypeSystem)_compilationMethod.invoke(null, new Object[] { name, system, schemas, config, typepath, filer, options });\n+            return (SchemaTypeSystem)_compilationMethod.invoke(null, new Object[] { name, system, schemas, config, typepath != null ? typepath : getContextTypeLoader(), filer, options });\n         }\n         catch (IllegalAccessException e)\n         {",
                "additions": 5,
                "raw_url": "https://github.com/apache/xmlbeans/raw/2d2f5281280b9ec45115de4918b818f093d9dd6b/src/xmlpublic/org/apache/xmlbeans/XmlBeans.java",
                "status": "modified",
                "changes": 9,
                "deletions": 4,
                "sha": "84c38e4830ac73bdfbc14ecf04c66ef8359eec25",
                "blob_url": "https://github.com/apache/xmlbeans/blob/2d2f5281280b9ec45115de4918b818f093d9dd6b/src/xmlpublic/org/apache/xmlbeans/XmlBeans.java",
                "filename": "src/xmlpublic/org/apache/xmlbeans/XmlBeans.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/src/xmlpublic/org/apache/xmlbeans/XmlBeans.java?ref=2d2f5281280b9ec45115de4918b818f093d9dd6b"
            }
        ],
        "bug_id": "xmlbeans_22",
        "parent": "https://github.com/apache/xmlbeans/commit/58b67d06c8f9962e8f50ba5e4e0936546626f346",
        "message": "Fixed a few NPEs.\nMade some changes to our URI resolver to better handle references from Schemas inside jar and zip files.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@160250 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    },
    {
        "commit": "https://github.com/apache/xmlbeans/commit/5b8f684d7e8d7cf36224e8ad91756bd8e64f1751",
        "file": [
            {
                "additions": 0,
                "raw_url": "https://github.com/apache/xmlbeans/raw/5b8f684d7e8d7cf36224e8ad91756bd8e64f1751/v2/external/lib/piccolo_apache_dist_20040629_v2.jar",
                "status": "modified",
                "changes": 0,
                "deletions": 0,
                "sha": "66f4e248443e2f74a881a723cb4ca5fd9e90f1d9",
                "blob_url": "https://github.com/apache/xmlbeans/blob/5b8f684d7e8d7cf36224e8ad91756bd8e64f1751/v2/external/lib/piccolo_apache_dist_20040629_v2.jar",
                "filename": "v2/external/lib/piccolo_apache_dist_20040629_v2.jar",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/external/lib/piccolo_apache_dist_20040629_v2.jar?ref=5b8f684d7e8d7cf36224e8ad91756bd8e64f1751"
            }
        ],
        "bug_id": "xmlbeans_23",
        "parent": "https://github.com/apache/xmlbeans/commit/ee52e4bc484a32bc29a9e235301606481b414814",
        "message": "Fixed NPE in EntityManager when the resolver cannot resolve a publicId, systemId pair.\n\ncheckintest: passes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@111124 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    },
    {
        "commit": "https://github.com/apache/xmlbeans/commit/9567da3d4db782446b802ce2adc4fb69f19965a1",
        "file": [
            {
                "patch": "@@ -535,27 +535,36 @@ private void buildContainers(List redefTypeNames, List redefModelGroupNames, Lis\n             String ns = ((QName) entry.getKey()).getNamespaceURI();\n             getContainerNonNull(ns).addAttributeType((SchemaType.Ref) entry.getValue());\n         }\n-        assert _redefinedGlobalTypes.size() == redefTypeNames.size();\n-        for (Iterator it = _redefinedGlobalTypes.iterator(), itname = redefTypeNames.iterator(); it.hasNext(); )\n+        // Some earlier .xsb versions don't have records for redefinitions\n+        if (_redefinedGlobalTypes != null && _redefinedModelGroups != null &&\n+            _redefinedAttributeGroups != null)\n         {\n-            String ns = ((QName) itname.next()).getNamespaceURI();\n-            getContainerNonNull(ns).addRedefinedType((SchemaType.Ref) it.next());\n-        }\n-        for (Iterator it = _redefinedModelGroups.iterator(), itname = redefModelGroupNames.iterator(); it.hasNext(); )\n-        {\n-            String ns = ((QName) itname.next()).getNamespaceURI();\n-            getContainerNonNull(ns).addRedefinedModelGroup((SchemaModelGroup.Ref) it.next());\n-        }\n-        for (Iterator it = _redefinedAttributeGroups.iterator(), itname = redefAttributeGroupNames.iterator(); it.hasNext(); )\n-        {\n-            String ns = ((QName) itname.next()).getNamespaceURI();\n-            getContainerNonNull(ns).addRedefinedAttributeGroup((SchemaAttributeGroup.Ref) it.next());\n+            assert _redefinedGlobalTypes.size() == redefTypeNames.size();\n+            for (Iterator it = _redefinedGlobalTypes.iterator(), itname = redefTypeNames.iterator(); it.hasNext(); )\n+            {\n+                String ns = ((QName) itname.next()).getNamespaceURI();\n+                getContainerNonNull(ns).addRedefinedType((SchemaType.Ref) it.next());\n+            }\n+            for (Iterator it = _redefinedModelGroups.iterator(), itname = redefModelGroupNames.iterator(); it.hasNext(); )\n+            {\n+                String ns = ((QName) itname.next()).getNamespaceURI();\n+                getContainerNonNull(ns).addRedefinedModelGroup((SchemaModelGroup.Ref) it.next());\n+            }\n+            for (Iterator it = _redefinedAttributeGroups.iterator(), itname = redefAttributeGroupNames.iterator(); it.hasNext(); )\n+            {\n+                String ns = ((QName) itname.next()).getNamespaceURI();\n+                getContainerNonNull(ns).addRedefinedAttributeGroup((SchemaAttributeGroup.Ref) it.next());\n+            }\n         }\n-        for (Iterator it = _annotations.iterator(); it.hasNext(); )\n+        // Some earlier .xsb versions don't have records for annotations\n+        if (_annotations != null)\n         {\n-            SchemaAnnotation ann = (SchemaAnnotation) it.next();\n-            // BUGBUG(radup)\n-            getContainerNonNull(\"\").addAnnotation(ann);\n+            for (Iterator it = _annotations.iterator(); it.hasNext(); )\n+            {\n+                SchemaAnnotation ann = (SchemaAnnotation) it.next();\n+                // BUGBUG(radup)\n+                getContainerNonNull(\"\").addAnnotation(ann);\n+            }\n         }\n         for (Iterator it = _containers.values().iterator(); it.hasNext(); )\n             ((SchemaContainer) it.next()).setImmutable();\n@@ -3386,7 +3395,7 @@ public boolean isNamespaceDefined(String namespace)\n \n     public SchemaType[] redefinedGlobalTypes()\n     {\n-        if (_redefinedGlobalTypes.isEmpty())\n+        if (_redefinedGlobalTypes == null || _redefinedGlobalTypes.isEmpty())\n             return EMPTY_ST_ARRAY;\n \n         SchemaType[] result = new SchemaType[_redefinedGlobalTypes.size()];\n@@ -3475,7 +3484,7 @@ public InputStream getSourceAsStream(String sourceName)\n \n     public SchemaModelGroup[] redefinedModelGroups()\n     {\n-        if (_redefinedModelGroups.isEmpty())\n+        if (_redefinedModelGroups == null || _redefinedModelGroups.isEmpty())\n             return EMPTY_MG_ARRAY;\n \n         SchemaModelGroup[] result = new SchemaModelGroup[_redefinedModelGroups.size()];\n@@ -3499,7 +3508,7 @@ public InputStream getSourceAsStream(String sourceName)\n \n     public SchemaAttributeGroup[] redefinedAttributeGroups()\n     {\n-        if (_redefinedAttributeGroups.isEmpty())\n+        if (_redefinedAttributeGroups == null || _redefinedAttributeGroups.isEmpty())\n             return EMPTY_AG_ARRAY;\n \n         SchemaAttributeGroup[] result = new SchemaAttributeGroup[_redefinedAttributeGroups.size()];\n@@ -3511,7 +3520,7 @@ public InputStream getSourceAsStream(String sourceName)\n \n     public SchemaAnnotation[] annotations()\n     {\n-        if (_annotations.isEmpty())\n+        if (_annotations == null || _annotations.isEmpty())\n             return EMPTY_ANN_ARRAY;\n \n         SchemaAnnotation[] result = new SchemaAnnotation[_annotations.size()];",
                "additions": 31,
                "raw_url": "https://github.com/apache/xmlbeans/raw/9567da3d4db782446b802ce2adc4fb69f19965a1/v2/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeSystemImpl.java",
                "status": "modified",
                "changes": 53,
                "deletions": 22,
                "sha": "ce38773cb245a0fc9c9893ed56e8404cfdd132a6",
                "blob_url": "https://github.com/apache/xmlbeans/blob/9567da3d4db782446b802ce2adc4fb69f19965a1/v2/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeSystemImpl.java",
                "filename": "v2/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeSystemImpl.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeSystemImpl.java?ref=9567da3d4db782446b802ce2adc4fb69f19965a1"
            }
        ],
        "bug_id": "xmlbeans_24",
        "parent": "https://github.com/apache/xmlbeans/commit/92ec209f2cec1bbc23966387a7473bd80ae2259f",
        "message": "Fix for a possible NPE when dealing with older versions of xsbs.\nContributed by Radu Preotiuc.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@110923 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    },
    {
        "commit": "https://github.com/apache/xmlbeans/commit/3d37f6402d63eabb59c0f4d90172a159d98d4ac0",
        "file": [
            {
                "patch": "@@ -337,9 +337,7 @@ private void resolveJavaName(Scratch scratch) {\n           logVerbose(\"processing element \"+scratch.getXmlName());\n           SchemaType contentType = scratch.getSchemaType().getProperties()[0].getType();\n           logVerbose(\"content type is \"+contentType.getName());\n-          if (contentType.isPrimitiveType() /*||\n-                  //FIXME why is this not a primitive? gross hack to make things work for now\n-                  contentType.getName().toString().equals(\"{http://www.w3.org/2001/XMLSchema}int\")*/) {\n+          if (contentType.isSimpleType()) {\n             //REVIEW this is a quick bug fix for the case where an element\n             //is of a primitive type.  I'm not completely sure it is the right\n             //thing to do.  pcal",
                "additions": 1,
                "raw_url": "https://github.com/apache/xmlbeans/raw/3d37f6402d63eabb59c0f4d90172a159d98d4ac0/v2/src/binding/org/apache/xmlbeans/impl/binding/compile/Schema2Java.java",
                "status": "modified",
                "changes": 4,
                "deletions": 3,
                "sha": "10b5e6c41731390849ef6968fb43bc83454f04ba",
                "blob_url": "https://github.com/apache/xmlbeans/blob/3d37f6402d63eabb59c0f4d90172a159d98d4ac0/v2/src/binding/org/apache/xmlbeans/impl/binding/compile/Schema2Java.java",
                "filename": "v2/src/binding/org/apache/xmlbeans/impl/binding/compile/Schema2Java.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/src/binding/org/apache/xmlbeans/impl/binding/compile/Schema2Java.java?ref=3d37f6402d63eabb59c0f4d90172a159d98d4ac0"
            }
        ],
        "bug_id": "xmlbeans_25",
        "parent": "https://github.com/apache/xmlbeans/commit/27081c668e322799a7f2cb75e553f2f5ceca0497",
        "message": "fix small bug in schema2java which may be responsible for some of the test NPEs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@110435 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    },
    {
        "commit": "https://github.com/apache/xmlbeans/commit/84f5ece6f59e25fe595776a764838148346b8dff",
        "file": [
            {
                "patch": "@@ -1001,7 +1001,22 @@ static void translateAttributeModel(XmlObject parseTree,\n                     }\n \n                     if (sAttr.getUse() != SchemaLocalAttribute.PROHIBITED)\n+                    {\n                         result.addAttribute(sAttr);\n+                    }\n+                    else\n+                    {\n+                        // attribute is prohibited. If it has an anonymous type remove\n+                        // it from the list (this will prevent inclusion of any anonymous\n+                        // types defined within the prohibited attribute which would\n+                        // otherwise attempt to refer to the prohibited attribute at\n+                        // save() time)\n+                        SchemaType attrType = sAttr.getType();\n+                        if (anonymousTypes != null && anonymousTypes.contains(attrType))\n+                        {\n+                            anonymousTypes.remove(attrType);\n+                        }\n+                    }\n \n                     if (sAttr.getDefaultText() != null && !sAttr.isFixed())\n                     {",
                "additions": 15,
                "raw_url": "https://github.com/apache/xmlbeans/raw/84f5ece6f59e25fe595776a764838148346b8dff/src/typeimpl/org/apache/xmlbeans/impl/schema/StscComplexTypeResolver.java",
                "status": "modified",
                "changes": 15,
                "deletions": 0,
                "sha": "7c8afbd4af00748294a101908b2ccc57d1d2be7f",
                "blob_url": "https://github.com/apache/xmlbeans/blob/84f5ece6f59e25fe595776a764838148346b8dff/src/typeimpl/org/apache/xmlbeans/impl/schema/StscComplexTypeResolver.java",
                "filename": "src/typeimpl/org/apache/xmlbeans/impl/schema/StscComplexTypeResolver.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/src/typeimpl/org/apache/xmlbeans/impl/schema/StscComplexTypeResolver.java?ref=84f5ece6f59e25fe595776a764838148346b8dff"
            }
        ],
        "bug_id": "xmlbeans_26",
        "parent": "https://github.com/apache/xmlbeans/commit/83d8d4e5a4a64e87da3cb1642689c10ba6b70c78",
        "message": "Fix for XMLBEANS-236. If a schema contained a prohibited attribute and types were defined inside the attribute then scomp produced an NPE. This is fixed with this checkin.\n\nContributed by Lawrence Jones\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@369575 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    },
    {
        "commit": "https://github.com/apache/xmlbeans/commit/f30ec6f0b36b1e42422a76a94e9d175c457e9f49",
        "file": [
            {
                "patch": "@@ -748,6 +748,10 @@ private static SchemaTypeSystem loadTypeSystem(String name, File[] xsdFiles, Fil\n     {\n         XmlErrorWatcher errorListener = new XmlErrorWatcher(outerErrorListener);\n \n+        // construct the state (have to initialize early in case of errors)\n+        StscState state = StscState.start();\n+        state.setErrorListener(errorListener);\n+\n         // For parsing XSD and WSDL files, we should use the SchemaDocument\n         // classloader rather than the thread context classloader.  This is\n         // because in some situations (such as when being invoked by ant",
                "additions": 4,
                "raw_url": "https://github.com/apache/xmlbeans/raw/f30ec6f0b36b1e42422a76a94e9d175c457e9f49/src/xmlcomp/org/apache/xmlbeans/impl/tool/SchemaCompiler.java",
                "status": "modified",
                "changes": 4,
                "deletions": 0,
                "sha": "3170563b7e1dbd08fbc1d9a5370511020065e2e8",
                "blob_url": "https://github.com/apache/xmlbeans/blob/f30ec6f0b36b1e42422a76a94e9d175c457e9f49/src/xmlcomp/org/apache/xmlbeans/impl/tool/SchemaCompiler.java",
                "filename": "src/xmlcomp/org/apache/xmlbeans/impl/tool/SchemaCompiler.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/src/xmlcomp/org/apache/xmlbeans/impl/tool/SchemaCompiler.java?ref=f30ec6f0b36b1e42422a76a94e9d175c457e9f49"
            }
        ],
        "bug_id": "xmlbeans_27",
        "parent": "https://github.com/apache/xmlbeans/commit/6cd825d4ee2989bc5eb68ee92053c3649f35e2b6",
        "message": "Fix for XMLBEANS-133 and XMLBEANS-185. If an error was found with any xsdconfig files StscState.get() could be called before StscState.start() which resulted in an NPE.\n\nContributed by Lawrence Jones\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@227480 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    },
    {
        "commit": "https://github.com/apache/xmlbeans/commit/7f9e93e320599a383fbd2258e38b5323376eca6f",
        "file": [
            {
                "patch": "@@ -1978,11 +1978,24 @@ List readAnnotations()\n                 case 'D': // _XD_ - external identity constraint\n                     return _linker.findIdentityConstraintRef(QNameHelper.forPretty(handle, 4));\n                 case 'R': // _XR_ - external ref to attribute's type\n-                    return _linker.findAttribute(QNameHelper.forPretty(handle, 4)).getType().getRef();\n+                    // deprecated: replaced by _XY_\n+                    SchemaGlobalAttribute attr = _linker.findAttribute(QNameHelper.forPretty(handle, 4));\n+                    if (attr == null)\n+                        throw new SchemaTypeLoaderException(\"Cannot resolve attribute for handle \" + handle, _name, _handle, SchemaTypeLoaderException.BAD_HANDLE);\n+                    return attr.getType().getRef();\n                 case 'S': // _XS_ - external ref to element's type\n-                    return _linker.findElement(QNameHelper.forPretty(handle, 4)).getType().getRef();\n+                    // deprecated: replaced by _XY_\n+                    SchemaGlobalElement elem = _linker.findElement(QNameHelper.forPretty(handle, 4));\n+                    if (elem == null)\n+                        throw new SchemaTypeLoaderException(\"Cannot resolve element for handle \" + handle, _name, _handle, SchemaTypeLoaderException.BAD_HANDLE);\n+                    return elem.getType().getRef();\n                 case 'O': // _XO_ - external ref to document type\n                     return _linker.findDocumentTypeRef(QNameHelper.forPretty(handle, 4));\n+                case 'Y': // _XY_ - external ref to any possible type\n+                    SchemaType type = _linker.typeForSignature(handle.substring(4));\n+                    if (type == null)\n+                        throw new SchemaTypeLoaderException(\"Cannot resolve type for handle \" + handle, _name, _handle, SchemaTypeLoaderException.BAD_HANDLE);\n+                    return type.getRef();\n                 default:\n                     throw new SchemaTypeLoaderException(\"Cannot resolve handle \" + handle, _name, _handle, SchemaTypeLoaderException.BAD_HANDLE);\n             }\n@@ -2026,6 +2039,7 @@ void writeHandle(SchemaComponent comp)\n                     // uses ref to refer to an attribute or element in another\n                     // schema and the type of that attribute or element\n                     // is an anonymous (local) type\n+                    // kkrouse 02/1/2005: _XR_ and _XS_ refs are replaced by _XY_\n                     if (type.getName() != null)\n                     {\n                         writeString(\"_XT_\" + QNameHelper.pretty(type.getName()));\n@@ -2039,16 +2053,9 @@ else if (type.isDocumentType())\n                     }\n                     else\n                     {\n-                        SchemaField sf = type.getContainerField();\n-                        assert (sf != null);\n-                        if (sf.isAttribute())\n-                        {\n-                            writeString(\"_XR_\" + QNameHelper.pretty(sf.getName()));\n-                        }\n-                        else\n-                        {\n-                            writeString(\"_XS_\" + QNameHelper.pretty(sf.getName()));\n-                        }\n+                        // fix for XMLBEANS-105:\n+                        // save out the external type reference using the type's signature.\n+                        writeString(\"_XY_\" + type.toString());\n                     }\n \n                     return;",
                "additions": 19,
                "raw_url": "https://github.com/apache/xmlbeans/raw/7f9e93e320599a383fbd2258e38b5323376eca6f/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeSystemImpl.java",
                "status": "modified",
                "changes": 31,
                "deletions": 12,
                "sha": "2dc6d06e9238d9143266ea44face37fcdad46f25",
                "blob_url": "https://github.com/apache/xmlbeans/blob/7f9e93e320599a383fbd2258e38b5323376eca6f/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeSystemImpl.java",
                "filename": "src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeSystemImpl.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeSystemImpl.java?ref=7f9e93e320599a383fbd2258e38b5323376eca6f"
            }
        ],
        "bug_id": "xmlbeans_28",
        "parent": "https://github.com/apache/xmlbeans/commit/03653f26fec7a633cf6cc77b524e9b7a97992319",
        "message": "XMLBEANS-105: NPE while initializing a type system w/ a type that extends an a complex type from a different type system\nsave external type signatures out instead of just type QNames\n\nreviewed: radup\ncheckintest: passes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@149470 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    },
    {
        "commit": "https://github.com/apache/xmlbeans/commit/f7342fb138641adca06fc56055c1e83024a8973e",
        "file": [
            {
                "patch": "@@ -1668,7 +1668,7 @@ public Constructor getJavaImplConstructor2()\n             if (impl == null) return null;\n             try\n             {\n-                _javaImplConstructor2 = impl.getConstructor(new Class[] { SchemaType.class, boolean.class });\n+                _javaImplConstructor2 = impl.getDeclaredConstructor(new Class[] { SchemaType.class, boolean.class });\n             }\n             catch (NoSuchMethodException e)\n             {\n@@ -1808,10 +1808,28 @@ private XmlObject createUnattachedSubclass(SchemaType sType)\n             Constructor ctr = getJavaImplConstructor2();\n             if (ctr != null)\n             {\n+                boolean accessible = ctr.isAccessible();\n                 try\n                 {\n+                    ctr.setAccessible(true);\n                     // System.out.println(\"Succeeded!\");\n-                    return (XmlObject)ctr.newInstance(new Object[] { sType, sType.isSimpleType() ? Boolean.FALSE : Boolean.TRUE });\n+                    try\n+                    {\n+                        return (XmlObject)ctr.newInstance(new Object[] { sType, sType.isSimpleType() ? Boolean.FALSE : Boolean.TRUE });\n+                    }\n+                    catch (Exception e)\n+                    {\n+                        System.out.println(\"Exception trying to instantiate impl class.\");\n+                        e.printStackTrace();\n+                    }\n+                    finally\n+                    {\n+                        // Make a best-effort try to set the accessibility back to what it was\n+                        try\n+                        {   ctr.setAccessible(accessible); }\n+                        catch (SecurityException se)\n+                        { }\n+                    }\n                 }\n                 catch (Exception e)\n                 {",
                "additions": 20,
                "raw_url": "https://github.com/apache/xmlbeans/raw/f7342fb138641adca06fc56055c1e83024a8973e/v2/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeImpl.java",
                "status": "modified",
                "changes": 22,
                "deletions": 2,
                "sha": "23304cc334c9a8ca866da2230fb6d40fab11fb4a",
                "blob_url": "https://github.com/apache/xmlbeans/blob/f7342fb138641adca06fc56055c1e83024a8973e/v2/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeImpl.java",
                "filename": "v2/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeImpl.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeImpl.java?ref=f7342fb138641adca06fc56055c1e83024a8973e"
            },
            {
                "patch": "@@ -584,10 +584,10 @@ else if (xsiType == null)\n         }\n \n         // note in schema spec 3.3.4, you're not even allowed to say xsi:nil=\"false\" if you're not nillable!\n-        if (hasNil && !elementField.isNillable())\n+        if (hasNil && (elementField == null || !elementField.isNillable()))\n         {\n             emitFieldError( event, XmlErrorCodes.ELEM_LOCALLY_VALID$NOT_NILLABLE, null,\n-                elementField.getName(), elementField.getType(), null,\n+                elementField == null ? null : elementField.getName(), elementType, null,\n                 XmlValidationError.ELEMENT_TYPE_INVALID, (state == null ? null : state._type));\n \n             _eatContent = 1;",
                "additions": 2,
                "raw_url": "https://github.com/apache/xmlbeans/raw/f7342fb138641adca06fc56055c1e83024a8973e/v2/src/typeimpl/org/apache/xmlbeans/impl/validator/Validator.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "59caa56108060adb7292a84d1d7e05299b9ab558",
                "blob_url": "https://github.com/apache/xmlbeans/blob/f7342fb138641adca06fc56055c1e83024a8973e/v2/src/typeimpl/org/apache/xmlbeans/impl/validator/Validator.java",
                "filename": "v2/src/typeimpl/org/apache/xmlbeans/impl/validator/Validator.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/src/typeimpl/org/apache/xmlbeans/impl/validator/Validator.java?ref=f7342fb138641adca06fc56055c1e83024a8973e"
            },
            {
                "patch": "@@ -138,7 +138,7 @@ private XsbDumper(InputStream stream, String indent, PrintStream ostream)\n \n     public static final int DATA_BABE = 0xDA7ABABE;\n     public static final int MAJOR_VERSION = 2;\n-    public static final int MINOR_VERSION = 19;\n+    public static final int MINOR_VERSION = 20;\n \n     public static final int FILETYPE_SCHEMAINDEX = 1;\n     public static final int FILETYPE_SCHEMATYPE = 2;\n@@ -1119,7 +1119,8 @@ void dumpPropertyData()\n         emit(\"Java prop name: \" + readString());\n         emit(\"Java type code: \" + jtcString(readShort()));\n         emit(\"Type for java signature: \" + readType());\n-        emit(\"Java setter delimiter: \" + qnameSetString(readQNameSet()));\n+        if (atMost(2, 19, 0))\n+            emit(\"Java setter delimiter: \" + qnameSetString(readQNameSet()));\n         if (atLeast(2, 16, 0))\n             emit(\"Default value: \" + readXmlValueObject());\n         if (((propflags & FLAG_PROP_ISATTR) == 0) && atLeast(2, 17, 0))",
                "additions": 3,
                "raw_url": "https://github.com/apache/xmlbeans/raw/f7342fb138641adca06fc56055c1e83024a8973e/v2/src/xmlcomp/org/apache/xmlbeans/impl/tool/XsbDumper.java",
                "status": "modified",
                "changes": 5,
                "deletions": 2,
                "sha": "c8ed63c272974e2eafd7b5c3d54cdd5dfef71ef8",
                "blob_url": "https://github.com/apache/xmlbeans/blob/f7342fb138641adca06fc56055c1e83024a8973e/v2/src/xmlcomp/org/apache/xmlbeans/impl/tool/XsbDumper.java",
                "filename": "v2/src/xmlcomp/org/apache/xmlbeans/impl/tool/XsbDumper.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/src/xmlcomp/org/apache/xmlbeans/impl/tool/XsbDumper.java?ref=f7342fb138641adca06fc56055c1e83024a8973e"
            }
        ],
        "bug_id": "xmlbeans_29",
        "parent": "https://github.com/apache/xmlbeans/commit/50680741727c2598fe9b546ed3113c7041cab3e1",
        "message": "Updated some reflection code in SchemaTypeImpl to use a protected constructor.\nFixed an NPE in the validator.\nUpdated XsbDumper to the latest version of the .xsb file format.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@111116 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    },
    {
        "commit": "https://github.com/apache/xmlbeans/commit/aede4e7190e524842c14013cd49a4e2a6fcb226f",
        "file": [
            {
                "patch": "@@ -90,50 +90,164 @@\n   </target>\n \n     <!-- extensions test -->\n+    <fileset id=\"extension.jars\" dir=\"build/private/lib\">\n+      <include name=\"extensions.jar\"/>\n+      <include name=\"fixedAttrBean.jar\"/>\n+      <include name=\"averageCase.jar\"/>\n+      <include name=\"multInterfaces.jar\"/>\n+      <include name=\"readOnlyBean.jar\"/>\n+      <include name=\"ValueRestriction.jar\"/>\n+    </fileset>\n+\n     <target name=\"extensionsTest\" depends=\"extensions.compile\">\n-        <echo message=\"JUnit output being sent to build/test/output/drt-product.txt\"/>\n-        <junit fork=\"yes\" printsummary=\"yes\" haltonfailure=\"yes\" showoutput=\"yes\">\n-            <jvmarg value=\"-ea\"/>\n-            <classpath>\n-                <pathelement location=\"external/lib/junit.jar\"/>\n-                <pathelement location=\"build/ar/xbean.jar\"/>\n-                <pathelement location=\"build/private/lib/extensions.jar\"/>\n-                <pathelement location=\"build/test/extensionsuse\"/>\n-            </classpath>\n-            <formatter type=\"plain\"/>\n-            <test name=\"drtcases.ExtensionsTest\" outfile=\"build/test/output/drt-extensions\"/>\n-        </junit>\n+      <echo message=\"JUnit output being sent to build/test/output/drt-extensions.txt\"/>\n+      <junit fork=\"yes\" printsummary=\"yes\" haltonfailure=\"yes\" showoutput=\"yes\">\n+        <jvmarg value=\"-ea\"/>\n+        <classpath>\n+          <pathelement location=\"build/ar/xbean.jar\" />\n+          <pathelement location=\"external/lib/junit.jar\"/>\n+          <fileset refid=\"extension.jars\"/>\n+          <pathelement location=\"build/test/extensionsuse\"/>\n+        </classpath>\n+        <formatter type=\"plain\"/>\n+        <test name=\"drtcases.ExtensionsTest\" outfile=\"build/test/output/drt-extensions\"/>\n+      </junit>\n     </target>\n \n-    <target name=\"extensions.compile\" >\n-        <mkdir dir=\"build/test/extensions\"/>\n-        <javac srcdir=\"test/src/extensions\" destdir=\"build/test/extensions\" debug=\"on\">\n-            <classpath>\n-                <pathelement location=\"build/ar/xbean.jar\"/>\n-            </classpath>\n-        </javac>\n+    <!--The extensions use the bean types, compile first-->\n+    <target name=\"simpleBeans.check\">\n+      <uptodate property=\"simpleBeans.notRequired\" targetfile=\"build/private/lib/fixedAttrBean.jar\">\n+        <srcfiles dir=\"test/src/extensions\" includes=\"**/*\"/>\n+        <srcfiles dir=\"test/src/extensionsuse\" includes=\"**/*\"/>\n+        <srcfiles dir=\"build/ar\" includes=\"xbean.jar\"/>\n+      </uptodate>\n+    </target>\n \n-        <java classname=\"${schema_compiler}\" fork=\"true\" failonerror=\"true\">\n-            <jvmarg value=\"-ea\"/>\n-            <classpath>\n-                <pathelement location=\"build/ar/xbean.jar\" />\n-                <pathelement location=\"build/test/extensions\" />\n-            </classpath>\n-            <arg line=\"-out build/private/lib/extensions.jar test/src/extensions\"/>\n-        </java>\n+    <target name=\"build.simpleBeans\" unless=\"simpleBeans.notRequired\" depends=\"simpleBeans.check\">\n+      <java classname=\"${schema_compiler}\" fork=\"true\" failonerror=\"true\">\n+        <jvmarg value=\"-ea\"/>\n+        <classpath>\n+          <pathelement location=\"build/ar/xbean.jar\" />\n+          <pathelement location=\"build/test/extensions\"/>\n+        </classpath>\n+        <arg line=\"-out build/private/lib/fixedAttrBean.jar test/src/extensions/fixedAttrBean/po.xsd\"/>\n+      </java>\n+\n+      <java classname=\"${schema_compiler}\" fork=\"true\" failonerror=\"true\">\n+        <jvmarg value=\"-ea\"/>\n+        <classpath>\n+          <pathelement location=\"build/ar/xbean.jar\" />\n+          <pathelement location=\"build/test/extensions\"/>\n+        </classpath>\n+        <arg line=\"-out build/private/lib/averageCase.jar test/src/extensions/averageCase/po.xsd\"/>\n+      </java>\n+\n+      <java classname=\"${schema_compiler}\" fork=\"true\" failonerror=\"true\">\n+        <jvmarg value=\"-ea\"/>\n+        <classpath>\n+          <pathelement location=\"build/ar/xbean.jar\" />\n+          <pathelement location=\"build/test/extensions\"/>\n+        </classpath>\n+        <arg line=\"-out build/private/lib/multInterfaces.jar test/src/extensions/multInterfaces/po.xsd\"/>\n+      </java>\n+\n+      <!-- **Pre/Post Handlers -->\n+      <java classname=\"${schema_compiler}\" fork=\"true\" failonerror=\"true\">\n+        <jvmarg value=\"-ea\"/>\n+        <classpath>\n+          <pathelement location=\"build/ar/xbean.jar\" />\n+          <pathelement location=\"build/test/extensions\"/>\n+        </classpath>\n+        <arg line=\"-out build/private/lib/readOnlyBean.jar test/src/extensions/prePostFeature/readOnlyBean/po.xsd\"/>\n+      </java>\n+\n+      <java classname=\"${schema_compiler}\" fork=\"true\" failonerror=\"true\">\n+        <jvmarg value=\"-ea\"/>\n+        <classpath>\n+          <pathelement location=\"build/ar/xbean.jar\" />\n+          <pathelement location=\"build/test/extensions\"/>\n+        </classpath>\n+        <arg line=\"-out build/private/lib/ValueRestriction.jar test/src/extensions/prePostFeature/ValueRestriction/company.xsd\"/>\n+      </java>\n+    </target>\n \n-        <mkdir dir=\"build/test/extensionsuse\"/>\n-        <javac srcdir=\"test/src/extensionsuse\" destdir=\"build/test/extensionsuse\" debug=\"on\">\n-            <classpath>\n-                <pathelement location=\"build/ar/xbean.jar\"/>\n-                <pathelement location=\"external/lib/junit.jar\"/>\n-                <pathelement location=\"build/private/lib/extensions.jar\"/>\n-                <pathelement location=\"build/test/extensionsuse\"/>\n-            </classpath>\n-        </javac>\n+    <target name=\"extensions.compile\" depends=\"build.simpleBeans, simpleBeans.check\" unless=\"simpleBeans.notRequired\">\n+      <mkdir dir=\"build/test/extensions\"/>\n+      <javac srcdir=\"test/src/extensions\" destdir=\"build/test/extensions\" debug=\"on\">\n+        <classpath>\n+          <pathelement location=\"build/ar/xbean.jar\" />\n+          <fileset refid=\"extension.jars\"/>\n+        </classpath>\n+      </javac>\n+\n+      <java classname=\"${schema_compiler}\" fork=\"true\" failonerror=\"true\">\n+        <jvmarg value=\"-ea\"/>\n+        <classpath>\n+          <pathelement location=\"build/ar/xbean.jar\" />\n+          <pathelement location=\"build/test/extensions\"/>\n+        </classpath>\n+        <arg line=\"-out build/private/lib/extensions.jar test/src/extensions/myPackage\"/>\n+      </java>\n+\n+      <java classname=\"${schema_compiler}\" fork=\"true\" failonerror=\"true\">\n+        <jvmarg value=\"-ea\"/>\n+        <classpath>\n+          <pathelement location=\"build/ar/xbean.jar\" />\n+          <pathelement location=\"build/test/extensions\"/>\n+        </classpath>\n+        <arg line=\"-out build/private/lib/fixedAttrBean.jar test/src/extensions/fixedAttrBean\"/>\n+      </java>\n+\n+      <java classname=\"${schema_compiler}\" fork=\"true\" failonerror=\"true\">\n+        <jvmarg value=\"-ea\"/>\n+        <classpath>\n+          <pathelement location=\"build/ar/xbean.jar\" />\n+          <pathelement location=\"build/test/extensions\"/>\n+        </classpath>\n+        <arg line=\"-out build/private/lib/averageCase.jar test/src/extensions/averageCase\"/>\n+      </java>\n+\n+      <java classname=\"${schema_compiler}\" fork=\"true\" failonerror=\"true\">\n+        <jvmarg value=\"-ea\"/>\n+        <classpath>\n+          <pathelement location=\"build/ar/xbean.jar\" />\n+          <pathelement location=\"build/test/extensions\"/>\n+        </classpath>\n+        <arg line=\"-out build/private/lib/multInterfaces.jar test/src/extensions/multInterfaces\"/>\n+      </java>\n+      <!--Pre Post Feature -->\n+\n+      <java classname=\"${schema_compiler}\" fork=\"true\" failonerror=\"true\">\n+        <jvmarg value=\"-ea\"/>\n+        <classpath>\n+          <pathelement location=\"build/ar/xbean.jar\" />\n+          <pathelement location=\"build/test/extensions\"/>\n+        </classpath>\n+        <arg line=\"-out build/private/lib/readOnlyBean.jar test/src/extensions/prePostFeature/readOnlyBean\"/>\n+      </java>\n+\n+      <java classname=\"${schema_compiler}\" fork=\"true\" failonerror=\"true\">\n+        <jvmarg value=\"-ea\"/>\n+        <classpath>\n+          <pathelement location=\"build/ar/xbean.jar\" />\n+          <pathelement location=\"build/test/extensions\"/>\n+        </classpath>\n+        <arg line=\"-out build/private/lib/ValueRestriction.jar test/src/extensions/prePostFeature/ValueRestriction\"/>\n+      </java>\n+\n+\n+      <mkdir dir=\"build/test/extensionsuse\"/>\n+      <javac srcdir=\"test/src/extensionsuse\" destdir=\"build/test/extensionsuse\" debug=\"on\">\n+        <classpath>\n+          <pathelement location=\"build/ar/xbean.jar\" />\n+          <pathelement location=\"external/lib/junit.jar\"/>\n+          <fileset refid=\"extension.jars\"/>\n+          <pathelement location=\"build/test/extensionsuse\"/>\n+        </classpath>\n+      </javac>\n     </target>\n-    <!-- extensions test -->\n \n+  <!-- builddrt target -->\n   <target name=\"builddrt\" depends=\"drt.jar, random.jar, eric\"/>\n \n   <target name=\"eric\" depends=\"erictest.jar\"/>",
                "additions": 151,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/build.xml",
                "status": "modified",
                "changes": 188,
                "deletions": 37,
                "sha": "35cdd4d05529502d45831243f760e252cbac4894",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/build.xml",
                "filename": "v1/build.xml",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/build.xml?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,35 @@\n+/*   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package averageCase.existing;\n+\n+import org.apache.xmlbeans.XmlObject;\n+\n+import interfaceFeature.xbean.averageCase.purchaseOrder.PurchaseOrderDocument ;\n+import interfaceFeature.xbean.averageCase.purchaseOrder.PurchaseOrderType;\n+import interfaceFeature.xbean.averageCase.purchaseOrder.Items.Item;\n+\n+public class FooHandler\n+{\n+    public static int getTotal(XmlObject xo)\n+    {\n+        PurchaseOrderDocument poDoc= (PurchaseOrderDocument)xo;\n+\t    int sum=0;\n+\t    Item[] items=poDoc.getPurchaseOrder().getItems().getItemArray();\n+\n+        for (int i=0; i<items.length; i++)\n+\t\t    sum+=items[i].getUSPrice().intValue();\n+\t    return sum;\n+    }\n+}\n\\ No newline at end of file",
                "additions": 35,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/averageCase/existing/FooHandler.java",
                "status": "added",
                "changes": 35,
                "deletions": 0,
                "sha": "016f8e645a6a9b03160dfba0afb615c25fc3b0e5",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/averageCase/existing/FooHandler.java",
                "filename": "v1/test/src/extensions/averageCase/existing/FooHandler.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/test/src/extensions/averageCase/existing/FooHandler.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,20 @@\n+/*   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package averageCase.existing;\n+\n+public interface IFoo\n+{\n+    int getTotal();\n+}\n\\ No newline at end of file",
                "additions": 20,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/averageCase/existing/IFoo.java",
                "status": "added",
                "changes": 20,
                "deletions": 0,
                "sha": "d106a5a995caab54643c1b3603af369fe05d898f",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/averageCase/existing/IFoo.java",
                "filename": "v1/test/src/extensions/averageCase/existing/IFoo.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/test/src/extensions/averageCase/existing/IFoo.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,60 @@\n+<xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n+xmlns:po=\"http://xbean.interface_feature/averageCase/PurchaseOrder\"\n+targetNamespace=\"http://xbean.interface_feature/averageCase/PurchaseOrder\"\n+elementFormDefault=\"qualified\">\n+\t<xsd:annotation>\n+\t\t<xsd:documentation xml:lang=\"en\">\n+           Purchase order schema for Example.com.\n+           Copyright 2000 Example.com. All rights reserved.\n+        </xsd:documentation>\n+\t</xsd:annotation>\n+\t<xsd:element name=\"purchaseOrder\" type=\"po:PurchaseOrderType\"/>\n+\t<xsd:element name=\"comment\" type=\"xsd:string\"/>\n+\t<xsd:complexType name=\"PurchaseOrderType\">\n+\t\t<xsd:sequence>\n+\t\t\t<xsd:element name=\"shipTo\" type=\"po:USAddress\"/>\n+\t\t\t<xsd:element name=\"billTo\" type=\"po:USAddress\"/>\n+\t\t\t<xsd:element ref=\"po:comment\" minOccurs=\"0\"/>\n+\t\t\t<xsd:element name=\"items\" type=\"po:Items\"/>\n+\t\t</xsd:sequence>\n+\t\t<xsd:attribute name=\"orderDate\" type=\"xsd:date\"/>\n+\t</xsd:complexType>\n+\t<xsd:complexType name=\"USAddress\">\n+\t\t<xsd:sequence>\n+\t\t\t<xsd:element name=\"name\" type=\"xsd:string\" nillable=\"true\"/>\n+\t\t\t<xsd:element name=\"street\" type=\"xsd:string\"/>\n+\t\t\t<xsd:element name=\"city\" type=\"xsd:string\"/>\n+\t\t\t<xsd:element name=\"state\" type=\"xsd:string\"/>\n+\t\t\t<xsd:element name=\"zip\" type=\"xsd:decimal\"/>\n+\t\t</xsd:sequence>\n+\t\t<xsd:attribute name=\"country\" type=\"xsd:NMTOKEN\" fixed=\"US\"/>\n+\t</xsd:complexType>\n+\t<xsd:complexType name=\"Items\">\n+\t\t<xsd:sequence>\n+\t\t\t<xsd:element name=\"item\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+\t\t\t\t<xsd:complexType>\n+\t\t\t\t\t<xsd:sequence>\n+\t\t\t\t\t\t<xsd:element name=\"productName\" type=\"xsd:string\"/>\n+\t\t\t\t\t\t<xsd:element name=\"quantity\">\n+\t\t\t\t\t\t\t<xsd:simpleType>\n+\t\t\t\t\t\t\t\t<xsd:restriction base=\"xsd:positiveInteger\">\n+\t\t\t\t\t\t\t\t\t<xsd:maxExclusive value=\"100\"/>\n+\t\t\t\t\t\t\t\t</xsd:restriction>\n+\t\t\t\t\t\t\t</xsd:simpleType>\n+\t\t\t\t\t\t</xsd:element>\n+\t\t\t\t\t\t<xsd:element name=\"USPrice\" type=\"xsd:decimal\"/>\n+\t\t\t\t\t\t<xsd:element ref=\"po:comment\" minOccurs=\"0\"/>\n+\t\t\t\t\t\t<xsd:element name=\"shipDate\" type=\"xsd:date\" minOccurs=\"0\"/>\n+\t\t\t\t\t</xsd:sequence>\n+\t\t\t\t\t<xsd:attribute name=\"partNum\" type=\"po:SKU\" use=\"required\"/>\n+\t\t\t\t</xsd:complexType>\n+\t\t\t</xsd:element>\n+\t\t</xsd:sequence>\n+\t</xsd:complexType>\n+\t<!-- Stock Keeping Unit, a code for identifying products -->\n+\t<xsd:simpleType name=\"SKU\">\n+\t\t<xsd:restriction base=\"xsd:string\">\n+\t\t\t<xsd:pattern value=\"\\d{3}-[A-Z]{2}\"/>\n+\t\t</xsd:restriction>\n+\t</xsd:simpleType>\n+</xsd:schema>",
                "additions": 60,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/averageCase/po.xsd",
                "status": "added",
                "changes": 60,
                "deletions": 0,
                "sha": "eba58d6624ed0c718dbd015361c0ce41427cf83c",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/averageCase/po.xsd",
                "filename": "v1/test/src/extensions/averageCase/po.xsd",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/test/src/extensions/averageCase/po.xsd?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,22 @@\n+<!-- Copyright 2004 The Apache Software Foundation\n+\n+     Licensed under the Apache License, Version 2.0 (the \"License\");\n+     you may not use this file except in compliance with the License.\n+     You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+     Unless required by applicable law or agreed to in writing, software\n+     distributed under the License is distributed on an \"AS IS\" BASIS,\n+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+     See the License for the specific language governing permissions and\n+     limitations under the License. -->\n+<xb:config xmlns:xb=\"http://xml.apache.org/xmlbeans/2004/02/xbean/config\">\n+\n+\t<xb:extension for=\"interfaceFeature.xbean.averageCase.purchaseOrder.PurchaseOrderDocument\">\n+        <xb:interface name=\"averageCase.existing.IFoo\">\n+            <xb:staticHandler>averageCase.existing.FooHandler</xb:staticHandler>\n+        </xb:interface>\n+    </xb:extension>\n+\n+</xb:config>\n\\ No newline at end of file",
                "additions": 22,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/averageCase/po.xsdconfig",
                "status": "added",
                "changes": 22,
                "deletions": 0,
                "sha": "d3d8c4ae74ffd12f779931f3fb9e02564bd612e9",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/averageCase/po.xsdconfig",
                "filename": "v1/test/src/extensions/averageCase/po.xsdconfig",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/test/src/extensions/averageCase/po.xsdconfig?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,45 @@\n+/*   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package fixedAttrBean.existing;\n+\n+import org.apache.xmlbeans.XmlObject;\n+\n+import interfaceFeature.xbean.fixedAttrBean.purchaseOrder.PurchaseOrderDocument;\n+import interfaceFeature.xbean.fixedAttrBean.purchaseOrder.Items.Item;\n+import java.math.BigDecimal;\n+\n+public class FooHandler\n+{\n+    public static void setPrice(XmlObject xo, int price)\n+    {\n+        PurchaseOrderDocument poDoc = (PurchaseOrderDocument) xo;\n+        Item[] items = poDoc.getPurchaseOrder().getItems().getItemArray();\n+\n+        BigDecimal o=new BigDecimal(price+\"\");\n+        try\n+        {\n+            for (int i=0; i<items.length; i++)\n+\t\t        items[i].setUSPrice(o);\n+        }\n+        catch (Exception e)\n+        {\n+            e.printStackTrace(System.err);\n+        }\n+    }\n+\n+\tpublic static void getPrice(XmlObject xo)\n+    {\n+    }\n+}\n\\ No newline at end of file",
                "additions": 45,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/fixedAttrBean/existing/FooHandler.java",
                "status": "added",
                "changes": 45,
                "deletions": 0,
                "sha": "db627c4a398da32dd6b116f2195621f85200be3a",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/fixedAttrBean/existing/FooHandler.java",
                "filename": "v1/test/src/extensions/fixedAttrBean/existing/FooHandler.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/test/src/extensions/fixedAttrBean/existing/FooHandler.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,21 @@\n+/*   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package fixedAttrBean.existing;\n+\n+public interface IFoo\n+{\n+    void setPrice(int price);\n+    void getPrice();\n+}\n\\ No newline at end of file",
                "additions": 21,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/fixedAttrBean/existing/IFoo.java",
                "status": "added",
                "changes": 21,
                "deletions": 0,
                "sha": "5be39d53c4849c15cc58ac7a69318bcc91c27389",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/fixedAttrBean/existing/IFoo.java",
                "filename": "v1/test/src/extensions/fixedAttrBean/existing/IFoo.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/test/src/extensions/fixedAttrBean/existing/IFoo.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,60 @@\n+<xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n+xmlns:po=\"http://xbean.interface_feature/fixedAttrBean/PurchaseOrder\"\n+targetNamespace=\"http://xbean.interface_feature/fixedAttrBean/PurchaseOrder\"\n+elementFormDefault=\"qualified\">\n+\t<xsd:annotation>\n+\t\t<xsd:documentation xml:lang=\"en\">\n+           Purchase order schema for Example.com.\n+           Copyright 2000 Example.com. All rights reserved.\n+        </xsd:documentation>\n+\t</xsd:annotation>\n+\t<xsd:element name=\"purchaseOrder\" type=\"po:PurchaseOrderType\"/>\n+\t<xsd:element name=\"comment\" type=\"xsd:string\"/>\n+\t<xsd:complexType name=\"PurchaseOrderType\">\n+\t\t<xsd:sequence>\n+\t\t\t<xsd:element name=\"shipTo\" type=\"po:USAddress\"/>\n+\t\t\t<xsd:element name=\"billTo\" type=\"po:USAddress\"/>\n+\t\t\t<xsd:element ref=\"po:comment\" minOccurs=\"0\"/>\n+\t\t\t<xsd:element name=\"items\" type=\"po:Items\"/>\n+\t\t</xsd:sequence>\n+\t\t<xsd:attribute name=\"orderDate\" type=\"xsd:date\"/>\n+\t</xsd:complexType>\n+\t<xsd:complexType name=\"USAddress\">\n+\t\t<xsd:sequence>\n+\t\t\t<xsd:element name=\"name\" type=\"xsd:string\" nillable=\"true\"/>\n+\t\t\t<xsd:element name=\"street\" type=\"xsd:string\"/>\n+\t\t\t<xsd:element name=\"city\" type=\"xsd:string\"/>\n+\t\t\t<xsd:element name=\"state\" type=\"xsd:string\"/>\n+\t\t\t<xsd:element name=\"zip\" type=\"xsd:decimal\"/>\n+\t\t</xsd:sequence>\n+\t\t<xsd:attribute name=\"country\" type=\"xsd:NMTOKEN\" fixed=\"US\"/>\n+\t</xsd:complexType>\n+\t<xsd:complexType name=\"Items\">\n+\t\t<xsd:sequence>\n+\t\t\t<xsd:element name=\"item\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+\t\t\t\t<xsd:complexType>\n+\t\t\t\t\t<xsd:sequence>\n+\t\t\t\t\t\t<xsd:element name=\"productName\" type=\"xsd:string\"/>\n+\t\t\t\t\t\t<xsd:element name=\"quantity\">\n+\t\t\t\t\t\t\t<xsd:simpleType>\n+\t\t\t\t\t\t\t\t<xsd:restriction base=\"xsd:positiveInteger\">\n+\t\t\t\t\t\t\t\t\t<xsd:maxExclusive value=\"100\"/>\n+\t\t\t\t\t\t\t\t</xsd:restriction>\n+\t\t\t\t\t\t\t</xsd:simpleType>\n+\t\t\t\t\t\t</xsd:element>\n+\t\t\t\t\t\t<xsd:element name=\"USPrice\" type=\"xsd:decimal\" fixed=\"30\" />\n+\t\t\t\t\t\t<xsd:element ref=\"po:comment\" minOccurs=\"0\"/>\n+\t\t\t\t\t\t<xsd:element name=\"shipDate\" type=\"xsd:date\" minOccurs=\"0\"/>\n+\t\t\t\t\t</xsd:sequence>\n+\t\t\t\t\t<xsd:attribute name=\"partNum\" type=\"po:SKU\" use=\"required\"/>\n+\t\t\t\t</xsd:complexType>\n+\t\t\t</xsd:element>\n+\t\t</xsd:sequence>\n+\t</xsd:complexType>\n+\t<!-- Stock Keeping Unit, a code for identifying products -->\n+\t<xsd:simpleType name=\"SKU\">\n+\t\t<xsd:restriction base=\"xsd:string\">\n+\t\t\t<xsd:pattern value=\"\\d{3}-[A-Z]{2}\"/>\n+\t\t</xsd:restriction>\n+\t</xsd:simpleType>\n+</xsd:schema>",
                "additions": 60,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/fixedAttrBean/po.xsd",
                "status": "added",
                "changes": 60,
                "deletions": 0,
                "sha": "7070a9cca9dc607148f0fb73fb272f7fe78bb7fa",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/fixedAttrBean/po.xsd",
                "filename": "v1/test/src/extensions/fixedAttrBean/po.xsd",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/test/src/extensions/fixedAttrBean/po.xsd?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,22 @@\n+<!-- Copyright 2004 The Apache Software Foundation\n+\n+     Licensed under the Apache License, Version 2.0 (the \"License\");\n+     you may not use this file except in compliance with the License.\n+     You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+     Unless required by applicable law or agreed to in writing, software\n+     distributed under the License is distributed on an \"AS IS\" BASIS,\n+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+     See the License for the specific language governing permissions and\n+     limitations under the License. -->\n+<xb:config xmlns:xb=\"http://xml.apache.org/xmlbeans/2004/02/xbean/config\">\n+\n+    <xb:extension for=\"interfaceFeature.xbean.fixedAttrBean.purchaseOrder.PurchaseOrderDocument\">\n+        <xb:interface name=\"fixedAttrBean.existing.IFoo\">\n+            <xb:staticHandler>fixedAttrBean.existing.FooHandler</xb:staticHandler>\n+        </xb:interface>\n+    </xb:extension>\n+\n+</xb:config>\n\\ No newline at end of file",
                "additions": 22,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/fixedAttrBean/po.xsdconfig",
                "status": "added",
                "changes": 22,
                "deletions": 0,
                "sha": "9899c0bc04b22d1f17b865fb0119e5ce38940f6a",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/fixedAttrBean/po.xsdconfig",
                "filename": "v1/test/src/extensions/fixedAttrBean/po.xsdconfig",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/test/src/extensions/fixedAttrBean/po.xsdconfig?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,26 @@\n+/*   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package multInterfaces.existing;\n+\n+import org.apache.xmlbeans.XmlObject;\n+\n+public interface IReport extends ISum\n+{\n+    int getMinPrice();\n+\n+    XmlObject getCheapestItem();\n+\n+    void setMinPrice(double price);\n+}\n\\ No newline at end of file",
                "additions": 26,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/multInterfaces/existing/IReport.java",
                "status": "added",
                "changes": 26,
                "deletions": 0,
                "sha": "a66a338b18d9a85f1c5203a7a4d53eb86c441f2f",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/multInterfaces/existing/IReport.java",
                "filename": "v1/test/src/extensions/multInterfaces/existing/IReport.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/test/src/extensions/multInterfaces/existing/IReport.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,20 @@\n+/*   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package multInterfaces.existing;\n+\n+public interface ISum\n+{\n+    int getTotal();\n+}\n\\ No newline at end of file",
                "additions": 20,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/multInterfaces/existing/ISum.java",
                "status": "added",
                "changes": 20,
                "deletions": 0,
                "sha": "8e5b7df4975bcd271d1e7f2ea19200cb5ab7d27a",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/multInterfaces/existing/ISum.java",
                "filename": "v1/test/src/extensions/multInterfaces/existing/ISum.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/test/src/extensions/multInterfaces/existing/ISum.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,89 @@\n+/*   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package multInterfaces.existing;\n+\n+import org.apache.xmlbeans.XmlObject;\n+\n+import interfaceFeature.xbean.multInterfaces.purchaseOrder.PurchaseOrderDocument;\n+import interfaceFeature.xbean.multInterfaces.purchaseOrder.Items.Item;\n+\n+\n+import java.math.BigDecimal;\n+\n+public class ReportHandler\n+{\n+    public static int getTotal(XmlObject xo)\n+    {\n+\n+        int sum = 0;\n+        PurchaseOrderDocument poDoc = (PurchaseOrderDocument) xo;\n+        Item[] items = poDoc.getPurchaseOrder().getItems().getItemArray();\n+\n+        for (int i = 0; i < items.length; i++)\n+            sum += items[i].getUSPrice().intValue();\n+        return sum;\n+    }\n+\n+    public static int getMinPrice(XmlObject xo)\n+    {\n+        PurchaseOrderDocument poDoc = (PurchaseOrderDocument) xo;\n+        Item[] items = poDoc.getPurchaseOrder().getItems().getItemArray();\n+\n+        int min = Integer.MAX_VALUE;\n+        for (int i = 0; i < items.length; i++)\n+        {\n+            int tmp = items[i].getUSPrice().intValue();\n+\n+            min = min > tmp ? tmp : min;\n+        }\n+        return min;\n+    }\n+\n+    public static XmlObject getCheapestItem(XmlObject xo)\n+    {\n+        PurchaseOrderDocument poDoc = (PurchaseOrderDocument) xo;\n+        Item[] items = poDoc.getPurchaseOrder().getItems().getItemArray();\n+\n+        int min = Integer.MAX_VALUE;\n+        XmlObject item = null;\n+\n+        for (int i = 0; i < items.length; i++)\n+        {\n+            int tmp = items[i].getUSPrice().intValue();\n+            if (min > tmp)\n+            {\n+                min = tmp;\n+                item = items[i];\n+            }\n+        }\n+        return item;\n+    }\n+\n+    public static void setMinPrice(XmlObject xo, double min_price)\n+    {\n+        PurchaseOrderDocument poDoc = (PurchaseOrderDocument) xo;\n+        Item[] items = poDoc.getPurchaseOrder().getItems().getItemArray();\n+\n+        BigDecimal newPrice = new BigDecimal(min_price);\n+\n+        for (int i = 0; i < items.length; i++)\n+        {\n+\n+            int tmp = items[i].getUSPrice().intValue();\n+            if (min_price > tmp)\n+                items[i].setUSPrice(newPrice);\n+        }\n+    }\n+}\n\\ No newline at end of file",
                "additions": 89,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/multInterfaces/existing/ReportHandler.java",
                "status": "added",
                "changes": 89,
                "deletions": 0,
                "sha": "d52850f135e3b4233dc7dc2bf0b3bbc54c45178c",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/multInterfaces/existing/ReportHandler.java",
                "filename": "v1/test/src/extensions/multInterfaces/existing/ReportHandler.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/test/src/extensions/multInterfaces/existing/ReportHandler.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,60 @@\n+<xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n+xmlns:po=\"http://xbean.interface_feature/multInterfaces/PurchaseOrder\"\n+targetNamespace=\"http://xbean.interface_feature/multInterfaces/PurchaseOrder\"\n+elementFormDefault=\"qualified\">\n+\t<xsd:annotation>\n+\t\t<xsd:documentation xml:lang=\"en\">\n+           Purchase order schema for Example.com.\n+           Copyright 2000 Example.com. All rights reserved.\n+        </xsd:documentation>\n+\t</xsd:annotation>\n+\t<xsd:element name=\"purchaseOrder\" type=\"po:PurchaseOrderType\"/>\n+\t<xsd:element name=\"comment\" type=\"xsd:string\"/>\n+\t<xsd:complexType name=\"PurchaseOrderType\">\n+\t\t<xsd:sequence>\n+\t\t\t<xsd:element name=\"shipTo\" type=\"po:USAddress\"/>\n+\t\t\t<xsd:element name=\"billTo\" type=\"po:USAddress\"/>\n+\t\t\t<xsd:element ref=\"po:comment\" minOccurs=\"0\"/>\n+\t\t\t<xsd:element name=\"items\" type=\"po:Items\"/>\n+\t\t</xsd:sequence>\n+\t\t<xsd:attribute name=\"orderDate\" type=\"xsd:date\"/>\n+\t</xsd:complexType>\n+\t<xsd:complexType name=\"USAddress\">\n+\t\t<xsd:sequence>\n+\t\t\t<xsd:element name=\"name\" type=\"xsd:string\" nillable=\"true\"/>\n+\t\t\t<xsd:element name=\"street\" type=\"xsd:string\"/>\n+\t\t\t<xsd:element name=\"city\" type=\"xsd:string\"/>\n+\t\t\t<xsd:element name=\"state\" type=\"xsd:string\"/>\n+\t\t\t<xsd:element name=\"zip\" type=\"xsd:decimal\"/>\n+\t\t</xsd:sequence>\n+\t\t<xsd:attribute name=\"country\" type=\"xsd:NMTOKEN\" fixed=\"US\"/>\n+\t</xsd:complexType>\n+\t<xsd:complexType name=\"Items\">\n+\t\t<xsd:sequence>\n+\t\t\t<xsd:element name=\"item\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+\t\t\t\t<xsd:complexType>\n+\t\t\t\t\t<xsd:sequence>\n+\t\t\t\t\t\t<xsd:element name=\"productName\" type=\"xsd:string\"/>\n+\t\t\t\t\t\t<xsd:element name=\"quantity\">\n+\t\t\t\t\t\t\t<xsd:simpleType>\n+\t\t\t\t\t\t\t\t<xsd:restriction base=\"xsd:positiveInteger\">\n+\t\t\t\t\t\t\t\t\t<xsd:maxExclusive value=\"100\"/>\n+\t\t\t\t\t\t\t\t</xsd:restriction>\n+\t\t\t\t\t\t\t</xsd:simpleType>\n+\t\t\t\t\t\t</xsd:element>\n+\t\t\t\t\t\t<xsd:element name=\"USPrice\" type=\"xsd:decimal\" fixed=\"30\" />\n+\t\t\t\t\t\t<xsd:element ref=\"po:comment\" minOccurs=\"0\"/>\n+\t\t\t\t\t\t<xsd:element name=\"shipDate\" type=\"xsd:date\" minOccurs=\"0\"/>\n+\t\t\t\t\t</xsd:sequence>\n+\t\t\t\t\t<xsd:attribute name=\"partNum\" type=\"po:SKU\" use=\"required\"/>\n+\t\t\t\t</xsd:complexType>\n+\t\t\t</xsd:element>\n+\t\t</xsd:sequence>\n+\t</xsd:complexType>\n+\t<!-- Stock Keeping Unit, a code for identifying products -->\n+\t<xsd:simpleType name=\"SKU\">\n+\t\t<xsd:restriction base=\"xsd:string\">\n+\t\t\t<xsd:pattern value=\"\\d{3}-[A-Z]{2}\"/>\n+\t\t</xsd:restriction>\n+\t</xsd:simpleType>\n+</xsd:schema>",
                "additions": 60,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/multInterfaces/po.xsd",
                "status": "added",
                "changes": 60,
                "deletions": 0,
                "sha": "8a57dd103945227f4e5088b5dfa44412363cf85c",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/multInterfaces/po.xsd",
                "filename": "v1/test/src/extensions/multInterfaces/po.xsd",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/test/src/extensions/multInterfaces/po.xsd?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,24 @@\n+<!-- Copyright 2004 The Apache Software Foundation\n+\n+     Licensed under the Apache License, Version 2.0 (the \"License\");\n+     you may not use this file except in compliance with the License.\n+     You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+     Unless required by applicable law or agreed to in writing, software\n+     distributed under the License is distributed on an \"AS IS\" BASIS,\n+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+     See the License for the specific language governing permissions and\n+     limitations under the License. -->\n+<xb:config xmlns:xb=\"http://xml.apache.org/xmlbeans/2004/02/xbean/config\">\n+\n+    <!-- for=\"interfaceFeature.xbean.multInterfaces.PurchaseOrder.PurchaseOrderDocument\"-->\n+    <xb:extension for=\"interfaceFeature.xbean.multInterfaces.purchaseOrder.PurchaseOrderDocument\">\n+        <xb:interface name=\"multInterfaces.existing.IReport\">\n+            <xb:staticHandler>multInterfaces.existing.ReportHandler</xb:staticHandler>\n+        </xb:interface>\n+\n+    </xb:extension>\n+\n+</xb:config>\n\\ No newline at end of file",
                "additions": 24,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/multInterfaces/po.xsdconfig",
                "status": "added",
                "changes": 24,
                "deletions": 0,
                "sha": "c56f91e85fd5f5b1f71884ac83e9da7b8dfa41d8",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/multInterfaces/po.xsdconfig",
                "filename": "v1/test/src/extensions/multInterfaces/po.xsdconfig",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/test/src/extensions/multInterfaces/po.xsdconfig?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "additions": 0,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/myPackage/company.xsd",
                "previous_filename": "v1/test/src/extensions/company.xsd",
                "status": "renamed",
                "changes": 0,
                "deletions": 0,
                "sha": "baaabc2c515aa740a85305c21484331ee4cada8d",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/myPackage/company.xsd",
                "filename": "v1/test/src/extensions/myPackage/company.xsd",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/test/src/extensions/myPackage/company.xsd?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "additions": 0,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/myPackage/company.xsdconfig",
                "previous_filename": "v1/test/src/extensions/company.xsdconfig",
                "status": "renamed",
                "changes": 0,
                "deletions": 0,
                "sha": "90022894123c19341983f486bbafaa9dc9925980",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/myPackage/company.xsdconfig",
                "filename": "v1/test/src/extensions/myPackage/company.xsdconfig",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/test/src/extensions/myPackage/company.xsdconfig?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,51 @@\n+<!-- Copyright 2004 The Apache Software Foundation\n+\n+     Licensed under the Apache License, Version 2.0 (the \"License\");\n+     you may not use this file except in compliance with the License.\n+     You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+     Unless required by applicable law or agreed to in writing, software\n+     distributed under the License is distributed on an \"AS IS\" BASIS,\n+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+     See the License for the specific language governing permissions and\n+     limitations under the License. -->\n+<!--this is schema company.xsd stripped down and modified to have a value restriction on the employees age-->\n+\n+<xsd:schema \n+targetNamespace=\"prePostFeature/xbean/ValueRestriction/company\" \n+xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" \n+xmlns:company=\"prePostFeature/xbean/ValueRestriction/company\">\n+\t<xsd:element name=\"company\" type=\"company:CompanyType\"/>\n+\t<xsd:complexType name=\"CompanyType\">\n+\t\t<xsd:sequence>\n+\t\t\t<xsd:element name=\"departments\" type=\"company:DepartmentType\" maxOccurs=\"unbounded\"/>\n+\t\t</xsd:sequence>\n+\t\t\n+\t\t<xsd:anyAttribute namespace=\"http://www.omg.org/XMI\" processContents=\"lax\"/>\n+\t</xsd:complexType>\n+\t<xsd:element name=\"department\" type=\"company:DepartmentType\"/>\n+\t<xsd:complexType name=\"DepartmentType\">\n+\t\t<xsd:sequence>\n+\t\t\t<xsd:element name=\"consultant\" type=\"company:ConsultantType\" maxOccurs=\"unbounded\"/>\n+\t\t</xsd:sequence>\n+\t\t<xsd:anyAttribute namespace=\"http://www.omg.org/XMI\" processContents=\"lax\"/>\n+\t</xsd:complexType>\n+\t<xsd:complexType name=\"ConsultantType\">\n+\t\t\n+\t\t<xsd:attribute name=\"name\" type=\"xsd:string\"/>\n+\t      <xsd:attribute name=\"age\" type=\"company:age\"/>\n+\t\t<xsd:anyAttribute namespace=\"http://www.omg.org/XMI\" processContents=\"lax\"/>\n+\t   \n+\t</xsd:complexType>\n+\n+\t\n+               <xsd:simpleType name=\"age\">\n+                  <xsd:restriction base=\"xsd:integer\">\n+                         <xsd:minInclusive value=\"0\"/>\n+                         <xsd:maxInclusive value=\"100\"/>\n+                  </xsd:restriction>\n+               </xsd:simpleType>\n+   \n+</xsd:schema>",
                "additions": 51,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/prePostFeature/ValueRestriction/company.xsd",
                "status": "added",
                "changes": 51,
                "deletions": 0,
                "sha": "25e5608733b1c2685eea6bb3eae495599a3306b3",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/prePostFeature/ValueRestriction/company.xsd",
                "filename": "v1/test/src/extensions/prePostFeature/ValueRestriction/company.xsd",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/test/src/extensions/prePostFeature/ValueRestriction/company.xsd?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,26 @@\n+<!-- Copyright 2004 The Apache Software Foundation\n+\n+     Licensed under the Apache License, Version 2.0 (the \"License\");\n+     you may not use this file except in compliance with the License.\n+     You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+     Unless required by applicable law or agreed to in writing, software\n+     distributed under the License is distributed on an \"AS IS\" BASIS,\n+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+     See the License for the specific language governing permissions and\n+     limitations under the License. -->\n+<xb:config xmlns:xb=\"http://xml.apache.org/xmlbeans/2004/02/xbean/config\">\n+\n+    <xb:extension for=\"*\">\n+        <xb:interface name=\"prePostFeature.ValueRestriction.existing.ISetter\">\n+            <xb:staticHandler>prePostFeature.ValueRestriction.existing.SetterHandler</xb:staticHandler>\n+        </xb:interface>  \n+       <xb:prePostSet> \n+            <xb:staticHandler>prePostFeature.ValueRestriction.existing.SetterHandler</xb:staticHandler> \n+      </xb:prePostSet> \n+   </xb:extension> \n+\n+\n+</xb:config>\n\\ No newline at end of file",
                "additions": 26,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/prePostFeature/ValueRestriction/company.xsdconfig",
                "status": "added",
                "changes": 26,
                "deletions": 0,
                "sha": "eb1c07df54ce7e3f5c8002b7a08c84ccadefcc8b",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/prePostFeature/ValueRestriction/company.xsdconfig",
                "filename": "v1/test/src/extensions/prePostFeature/ValueRestriction/company.xsdconfig",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/test/src/extensions/prePostFeature/ValueRestriction/company.xsdconfig?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,24 @@\n+/*   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package prePostFeature.ValueRestriction.existing;\n+\n+/**\n+ * User: ykadiysk\n+ * Date: May 5, 2004\n+ */\n+public interface ISetter\n+{\n+    public void setEmployeeAge(int age);\n+}",
                "additions": 24,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/prePostFeature/ValueRestriction/existing/ISetter.java",
                "status": "added",
                "changes": 24,
                "deletions": 0,
                "sha": "19d21fca5b8f7c9eeb5e8d8fa4890c54ed5151de",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/prePostFeature/ValueRestriction/existing/ISetter.java",
                "filename": "v1/test/src/extensions/prePostFeature/ValueRestriction/existing/ISetter.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/test/src/extensions/prePostFeature/ValueRestriction/existing/ISetter.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,52 @@\n+/*   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package prePostFeature.ValueRestriction.existing;\n+\n+import org.apache.xmlbeans.XmlObject;\n+import prePostFeature.xbean.valueRestriction.company.ConsultantType;\n+\n+import javax.xml.namespace.QName;\n+\n+\n+/**\n+ * @author ykadiysk\n+ */\n+public class SetterHandler\n+{\n+\n+    public static boolean bReady = false;\n+\n+    public static void setEmployeeAge(XmlObject xo, int age)\n+    {\n+        ((ConsultantType) xo).setAge(age);\n+    }\n+\n+    private static XmlObject origValue;\n+\n+    public static boolean preSet(int opType, XmlObject xo, QName prop, boolean isAttr, int index)\n+    {\n+        origValue = xo.copy();\n+        return true;\n+    }\n+\n+    public static void postSet(int opType, XmlObject xo, QName propertyName, boolean isAttr, int index)\n+    {\n+        if (!xo.validate() && (opType == org.apache.xmlbeans.impl.config.PrePostExtension.OPERATION_SET) && bReady)\n+            xo.set(origValue);\n+        xo.validate();\n+    }\n+\n+\n+}",
                "additions": 52,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/prePostFeature/ValueRestriction/existing/SetterHandler.java",
                "status": "added",
                "changes": 52,
                "deletions": 0,
                "sha": "cfbd6a3c865fefbf1f50046e61151c2b9f60ae8a",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/prePostFeature/ValueRestriction/existing/SetterHandler.java",
                "filename": "v1/test/src/extensions/prePostFeature/ValueRestriction/existing/SetterHandler.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/test/src/extensions/prePostFeature/ValueRestriction/existing/SetterHandler.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,53 @@\n+/*   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package prePostFeature.readOnlyBean.existing;\n+\n+import org.apache.xmlbeans.XmlObject;\n+\n+\n+import prePostFeature.xbean.readOnlyBean.purchaseOrder.PurchaseOrderDocument;\n+import prePostFeature.xbean.readOnlyBean.purchaseOrder.Items.Item;\n+\n+import javax.xml.namespace.QName;\n+import java.math.BigDecimal;\n+\n+public class FooHandler\n+{\n+    public static boolean preSet(int opType, XmlObject xo, QName prop, boolean isAttr, int index)\n+    {\n+        if (opType == org.apache.xmlbeans.impl.config.PrePostExtension.OPERATION_SET)\n+            return false;\n+        return true;\n+    }\n+\n+    public static void postSet(int opType, XmlObject xo, QName propertyName, boolean isAttr, int index)\n+    {\n+        if (opType == org.apache.xmlbeans.impl.config.PrePostExtension.OPERATION_SET)\n+            System.err.println(\"No setters are allowed for this bean:\" + \" value unchanged\" + propertyName);\n+    }\n+\n+    public static void setPrice(XmlObject xo, int price)\n+    {\n+        Item it = (Item) xo;\n+        BigDecimal o = new BigDecimal(price + \"\");\n+        it.setUSPrice(o);\n+    }\n+\n+    public static double getPrice(XmlObject xo)\n+    {\n+        Item it = (Item) xo;\n+        return it.getUSPrice().doubleValue();\n+    }\n+}",
                "additions": 53,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/prePostFeature/readOnlyBean/existing/FooHandler.java",
                "status": "added",
                "changes": 53,
                "deletions": 0,
                "sha": "81733b39a6a1289201749a1e3ea52443ba867d01",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/prePostFeature/readOnlyBean/existing/FooHandler.java",
                "filename": "v1/test/src/extensions/prePostFeature/readOnlyBean/existing/FooHandler.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/test/src/extensions/prePostFeature/readOnlyBean/existing/FooHandler.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,27 @@\n+/*   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package prePostFeature.readOnlyBean.existing;\n+\n+/**\n+ * User: ykadiysk\n+ * Date: May 4, 2004\n+ */\n+public interface IFoo\n+{\n+    void setPrice(int price);\n+\n+    double getPrice();\n+}\n+",
                "additions": 27,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/prePostFeature/readOnlyBean/existing/IFoo.java",
                "status": "added",
                "changes": 27,
                "deletions": 0,
                "sha": "0cc4e347542fb95e66cfd38930084056665fa237",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/prePostFeature/readOnlyBean/existing/IFoo.java",
                "filename": "v1/test/src/extensions/prePostFeature/readOnlyBean/existing/IFoo.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/test/src/extensions/prePostFeature/readOnlyBean/existing/IFoo.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,60 @@\n+<xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n+xmlns:po=\"http://xbean.prePost_feature/readOnlyBean/PurchaseOrder\"\n+targetNamespace=\"http://xbean.prePost_feature/readOnlyBean/PurchaseOrder\"\n+elementFormDefault=\"qualified\">\n+\t<xsd:annotation>\n+\t\t<xsd:documentation xml:lang=\"en\">\n+           Purchase order schema for Example.com.\n+           Copyright 2000 Example.com. All rights reserved.\n+        </xsd:documentation>\n+\t</xsd:annotation>\n+\t<xsd:element name=\"purchaseOrder\" type=\"po:PurchaseOrderType\"/>\n+\t<xsd:element name=\"comment\" type=\"xsd:string\"/>\n+\t<xsd:complexType name=\"PurchaseOrderType\">\n+\t\t<xsd:sequence>\n+\t\t\t<xsd:element name=\"shipTo\" type=\"po:USAddress\"/>\n+\t\t\t<xsd:element name=\"billTo\" type=\"po:USAddress\"/>\n+\t\t\t<xsd:element ref=\"po:comment\" minOccurs=\"0\"/>\n+\t\t\t<xsd:element name=\"items\" type=\"po:Items\"/>\n+\t\t</xsd:sequence>\n+\t\t<xsd:attribute name=\"orderDate\" type=\"xsd:date\"/>\n+\t</xsd:complexType>\n+\t<xsd:complexType name=\"USAddress\">\n+\t\t<xsd:sequence>\n+\t\t\t<xsd:element name=\"name\" type=\"xsd:string\" nillable=\"true\"/>\n+\t\t\t<xsd:element name=\"street\" type=\"xsd:string\"/>\n+\t\t\t<xsd:element name=\"city\" type=\"xsd:string\"/>\n+\t\t\t<xsd:element name=\"state\" type=\"xsd:string\"/>\n+\t\t\t<xsd:element name=\"zip\" type=\"xsd:decimal\"/>\n+\t\t</xsd:sequence>\n+\t\t<xsd:attribute name=\"country\" type=\"xsd:NMTOKEN\" fixed=\"US\"/>\n+\t</xsd:complexType>\n+\t<xsd:complexType name=\"Items\">\n+\t\t<xsd:sequence>\n+\t\t\t<xsd:element name=\"item\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+\t\t\t\t<xsd:complexType>\n+\t\t\t\t\t<xsd:sequence>\n+\t\t\t\t\t\t<xsd:element name=\"productName\" type=\"xsd:string\"/>\n+\t\t\t\t\t\t<xsd:element name=\"quantity\">\n+\t\t\t\t\t\t\t<xsd:simpleType>\n+\t\t\t\t\t\t\t\t<xsd:restriction base=\"xsd:positiveInteger\">\n+\t\t\t\t\t\t\t\t\t<xsd:maxExclusive value=\"100\"/>\n+\t\t\t\t\t\t\t\t</xsd:restriction>\n+\t\t\t\t\t\t\t</xsd:simpleType>\n+\t\t\t\t\t\t</xsd:element>\n+\t\t\t\t\t\t<xsd:element name=\"USPrice\" type=\"xsd:decimal\" fixed=\"30\" />\n+\t\t\t\t\t\t<xsd:element ref=\"po:comment\" minOccurs=\"0\"/>\n+\t\t\t\t\t\t<xsd:element name=\"shipDate\" type=\"xsd:date\" minOccurs=\"0\"/>\n+\t\t\t\t\t</xsd:sequence>\n+\t\t\t\t\t<xsd:attribute name=\"partNum\" type=\"po:SKU\" use=\"required\"/>\n+\t\t\t\t</xsd:complexType>\n+\t\t\t</xsd:element>\n+\t\t</xsd:sequence>\n+\t</xsd:complexType>\n+\t<!-- Stock Keeping Unit, a code for identifying products -->\n+\t<xsd:simpleType name=\"SKU\">\n+\t\t<xsd:restriction base=\"xsd:string\">\n+\t\t\t<xsd:pattern value=\"\\d{3}-[A-Z]{2}\"/>\n+\t\t</xsd:restriction>\n+\t</xsd:simpleType>\n+</xsd:schema>",
                "additions": 60,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/prePostFeature/readOnlyBean/po.xsd",
                "status": "added",
                "changes": 60,
                "deletions": 0,
                "sha": "189d6e56aacca7786ca0a54254c31606e23f04ef",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/prePostFeature/readOnlyBean/po.xsd",
                "filename": "v1/test/src/extensions/prePostFeature/readOnlyBean/po.xsd",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/test/src/extensions/prePostFeature/readOnlyBean/po.xsd?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,25 @@\n+<!-- Copyright 2004 The Apache Software Foundation\n+\n+     Licensed under the Apache License, Version 2.0 (the \"License\");\n+     you may not use this file except in compliance with the License.\n+     You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+     Unless required by applicable law or agreed to in writing, software\n+     distributed under the License is distributed on an \"AS IS\" BASIS,\n+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+     See the License for the specific language governing permissions and\n+     limitations under the License. -->\n+<xb:config xmlns:xb=\"http://xml.apache.org/xmlbeans/2004/02/xbean/config\">\n+\n+    <xb:extension for=\"*\">\n+        <xb:interface name=\"prePostFeature.readOnlyBean.existing.IFoo\">\n+            <xb:staticHandler>prePostFeature.readOnlyBean.existing.FooHandler</xb:staticHandler>\n+        </xb:interface>  \n+       <xb:prePostSet> \n+            <xb:staticHandler>prePostFeature.readOnlyBean.existing.FooHandler</xb:staticHandler> \n+      </xb:prePostSet> \n+   </xb:extension> \n+\n+</xb:config>\n\\ No newline at end of file",
                "additions": 25,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/prePostFeature/readOnlyBean/po.xsdconfig",
                "status": "added",
                "changes": 25,
                "deletions": 0,
                "sha": "c764fcbca433095d4a006ad4a4397f95d3ceeef9",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensions/prePostFeature/readOnlyBean/po.xsdconfig",
                "filename": "v1/test/src/extensions/prePostFeature/readOnlyBean/po.xsdconfig",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/test/src/extensions/prePostFeature/readOnlyBean/po.xsdconfig?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,47 @@\n+package drtcases;\n+\n+import interfaceFeature.xbean.averageCase.purchaseOrder.PurchaseOrderDocument;\n+import interfaceFeature.xbean.averageCase.purchaseOrder.PurchaseOrderType;\n+import interfaceFeature.xbean.averageCase.purchaseOrder.Items;\n+\n+import junit.framework.*;\n+\n+import java.math.BigDecimal;\n+\n+\n+public class AverageCaseTest extends TestCase\n+{\n+    public AverageCaseTest(String s)\n+    {\n+        super(s);\n+    }\n+\n+    public static Test suite()\n+    {\n+        return new TestSuite(AverageCaseTest.class);\n+    }\n+\n+    public void test()\n+    {\n+        PurchaseOrderDocument poDoc;\n+\n+        poDoc = PurchaseOrderDocument.Factory.newInstance();\n+        PurchaseOrderType po = poDoc.addNewPurchaseOrder();\n+        int LEN = 20;\n+\n+        Items.Item[] it = new Items.Item[LEN];\n+        for (int i = 0; i < LEN; i++)\n+        {\n+            it[i] = Items.Item.Factory.newInstance();\n+            it[i].setUSPrice(new BigDecimal(\"\" + 2));\n+        }\n+        Items items = Items.Factory.newInstance();\n+        items.setItemArray(it);\n+        po.setItems(items);\n+        // System.out.println(\"poDoc: \" + poDoc);\n+\n+        int i = poDoc.getTotal();\n+//20 items @ $2\n+        assertEquals(40, i);\n+    }\n+}",
                "additions": 47,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensionsuse/drtcases/AverageCaseTest.java",
                "status": "added",
                "changes": 47,
                "deletions": 0,
                "sha": "bdb1e6e9e64aff8ac934eb4a9131a213a170c6b1",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensionsuse/drtcases/AverageCaseTest.java",
                "filename": "v1/test/src/extensionsuse/drtcases/AverageCaseTest.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/test/src/extensionsuse/drtcases/AverageCaseTest.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -17,124 +17,31 @@\n import junit.framework.TestCase;\n import junit.framework.Test;\n import junit.framework.TestSuite;\n-import junit.framework.Assert;\n-import xsd.company.CompanyDocument;\n-import xsd.company.CompanyType;\n-import myPackage.Foo;\n-import myPackage.Bar;\n-import myPackage.FooHandler;\n-import myPackage.FooHandler.PreBookmark;\n-import myPackage.FooHandler.PostBookmark;\n-import org.apache.xmlbeans.XmlCursor;\n+import drtcases.prePostFeature.readOnlyBean.ReadOnlyTest;\n+import drtcases.prePostFeature.ValueRestriction.ValueRestrictionTest;\n \n /**\n  * Author: Cezar Andrei ( cezar.andrei at bea.com )\n  * Date: Mar 28, 2004\n  */\n public class ExtensionsTest extends TestCase\n {\n-    public ExtensionsTest(String name) { super(name); }\n-    public static Test suite() { return new TestSuite(ExtensionsTest.class); }\n-\n-    public void testInterfaces()\n+    public ExtensionsTest(String name)\n     {\n-\t\tString expected;\n-\t\tString actual;\n-\n-        CompanyDocument cDoc = CompanyDocument.Factory.newInstance();\n-\n-        CompanyType co = cDoc.addNewCompany();\n-        co.setName2(\"xbean name\");\n-\n-        expected = \"xbean name\";\n-        actual = co.getName2();\n-        Assert.assertTrue(\"Expected: \" + expected + \"\\n  actual: \" + actual, expected.equals(actual));\n-\n-        expected = \"{name in FooHandler}\";\n-        actual = co.getName();\n-        Assert.assertTrue(\"Expected: \" + expected + \"\\n  actual: \" + actual, expected.equals(actual));\n-\n-        Foo foo = cDoc;\n-\n-        expected = \"{in FooHandler.handleFoo(s: param)}\";\n-        actual = foo.foo(\"param\");\n-        Assert.assertTrue(\"Expected: '\" + expected + \"'\\n  actual: '\" + actual +\"'\", expected.equals(actual));\n-\n-\n-        Bar bar = null;\n-\n-        try\n-        {\n-            bar = cDoc;\n-            byte[] ba = bar.bar(\"param for bar\");\n-\n-\t\t\texpected = \"{in BarHandler.handleBar(s: param for bar)}\";\n-\t\t\tactual = new String(bar.bar(\"param for bar\"));\n-\t\t\tAssert.assertTrue(\"Expected: \" + expected + \"\\n  actual: \" + actual, expected.equals(actual));\n-        }\n-        catch (Bar.MyException e)\n-        {\n-            Assert.assertTrue(false);\n-        }\n-\n-        try\n-        {\n-            bar.bar(null);\n-            Assert.assertTrue(false);\n-        }\n-        catch( Bar.MyException e)\n-        {\n-            Assert.assertTrue(true);\n-        }\n+        super(name);\n     }\n \n-    public void testPrePost()\n+    public static Test suite()\n     {\n-        String expected;\n-        String actual;\n-        XmlCursor xc;\n-\n-        CompanyDocument cDoc = CompanyDocument.Factory.newInstance();\n-\n-        // add new\n-        CompanyType co = cDoc.addNewCompany();\n-\n-        xc = cDoc.newCursor();\n-        PreBookmark prebk = (PreBookmark)xc.getBookmark(PreBookmark.class);\n-\n-        expected = \"{preSet in FooHandler: 2, <xml-fragment></xml-fragment>, {company.xsd}company, false, -1}\";\n-        actual = prebk.getMsg();\n-        Assert.assertTrue(\"Expected: \" + expected + \"\\n  actual: \" + actual, expected.equals(actual));\n-\n-\n-\n-        PostBookmark postbk = (PostBookmark)xc.getBookmark(PostBookmark.class);\n-\n-        expected = \"{postSet in FooHandler: 2, \" + cDoc + \", {company.xsd}company, false, -1}\";\n-        actual = postbk.getMsg();\n-        Assert.assertTrue(\"Expected: \" + expected + \"\\n  actual: \" + actual, expected.equals(actual));\n-\n-        xc.dispose();\n-\n-\n-        // set\n-        co.setName2(\"xbean name\");\n-\n-        xc = co.newCursor();\n-        prebk = (PreBookmark)xc.getBookmark(PreBookmark.class);\n-\n-        expected = \"{preSet in FooHandler: 1, <xml-fragment/>, name, true, -1}\";\n-        actual = prebk.getMsg();\n-        Assert.assertTrue(\"Expected: \" + expected + \"\\n  actual: \" + actual, expected.equals(actual));\n-\n-\n-\n-        postbk = (PostBookmark)xc.getBookmark(PostBookmark.class);\n+        TestSuite suite = new TestSuite();\n \n-        expected = \"{postSet in FooHandler: 1, \" + co + \", name, true, -1}\";\n-        actual = postbk.getMsg();\n-        Assert.assertTrue(\"Expected: \" + expected + \"\\n  actual: \" + actual, expected.equals(actual));\n+        suite.addTest(SimpleTest.suite());\n+        suite.addTest(AverageCaseTest.suite());\n+        suite.addTest(FixedAttrTest.suite());\n+        suite.addTest(MultInterfacesTest.suite());\n+        suite.addTest(ReadOnlyTest.suite());\n+        suite.addTest(ValueRestrictionTest.suite());\n \n-        xc.dispose();\n+        return suite;\n     }\n }",
                "additions": 13,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensionsuse/drtcases/ExtensionsTest.java",
                "status": "modified",
                "changes": 119,
                "deletions": 106,
                "sha": "faade195e30d8a0c33695eb284a61a491503f47c",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensionsuse/drtcases/ExtensionsTest.java",
                "filename": "v1/test/src/extensionsuse/drtcases/ExtensionsTest.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/test/src/extensionsuse/drtcases/ExtensionsTest.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,74 @@\n+package drtcases;\n+\n+import interfaceFeature.xbean.fixedAttrBean.purchaseOrder.PurchaseOrderDocument;\n+import interfaceFeature.xbean.fixedAttrBean.purchaseOrder.PurchaseOrderType;\n+import interfaceFeature.xbean.fixedAttrBean.purchaseOrder.Items;\n+\n+\n+import java.math.BigDecimal;\n+\n+import junit.framework.*;\n+\n+public class FixedAttrTest extends TestCase\n+{\n+    public FixedAttrTest(String s)\n+    {\n+        super(s);\n+    }\n+\n+    public static Test suite()\n+    {\n+        return new TestSuite(FixedAttrTest.class);\n+    }\n+\n+    public void test()\n+    {\n+\n+        PurchaseOrderDocument poDoc;\n+\n+        poDoc = PurchaseOrderDocument.Factory.newInstance();\n+        PurchaseOrderType po = poDoc.addNewPurchaseOrder();\n+        int LEN = 20;\n+\n+        Items.Item[] it = new Items.Item[LEN];\n+        for (int i = 0; i < LEN; i++)\n+        {\n+            it[i] = Items.Item.Factory.newInstance();\n+            it[i].setUSPrice(new BigDecimal(\"\" + 4));\n+        }\n+        Items items = Items.Factory.newInstance();\n+        items.setItemArray(it);\n+        po.setItems(items);\n+\n+        StringBuffer sb = new StringBuffer();\n+        sb.append(\"<pur:purchaseOrder xmlns:pur=\\\"http://xbean.interface_feature/fixedAttrBean/PurchaseOrder\\\">\");\n+\n+        sb.append(\"<pur:items>\");\n+\n+        StringBuffer sbContent = new StringBuffer();\n+        for (int i = 0; i < LEN; i++)\n+            sbContent.append(\"<pur:item><pur:USPrice>4</pur:USPrice></pur:item>\");\n+\n+        int pos = sb.length();\n+        sb.append(\"</pur:items></pur:purchaseOrder>\");\n+\n+        String sExpected = sb.subSequence(0, pos) + sbContent.toString() + sb.subSequence(pos, sb.length());\n+\n+        assertEquals(sExpected, poDoc.xmlText());\n+\n+        try\n+        {\n+            poDoc.setPrice(10);\n+\n+        }\n+        catch (Exception t)\n+        {\n+            t.printStackTrace(System.err);\n+            System.exit(-1);\n+        }\n+\n+\n+        assertTrue(!poDoc.validate());\n+    }\n+\n+}",
                "additions": 74,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensionsuse/drtcases/FixedAttrTest.java",
                "status": "added",
                "changes": 74,
                "deletions": 0,
                "sha": "6f1fe5ac5cefb1991ab6449d2c9992ea57a82149",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensionsuse/drtcases/FixedAttrTest.java",
                "filename": "v1/test/src/extensionsuse/drtcases/FixedAttrTest.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/test/src/extensionsuse/drtcases/FixedAttrTest.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,88 @@\n+package drtcases;\n+\n+import interfaceFeature.xbean.multInterfaces.purchaseOrder.PurchaseOrderDocument;\n+import interfaceFeature.xbean.multInterfaces.purchaseOrder.PurchaseOrderType;\n+import interfaceFeature.xbean.multInterfaces.purchaseOrder.Items;\n+import interfaceFeature.xbean.multInterfaces.purchaseOrder.Items.Item;\n+\n+import java.math.BigDecimal;\n+\n+import org.apache.xmlbeans.XmlObject;\n+\n+import junit.framework.*;\n+\n+public class MultInterfacesTest extends TestCase\n+{\n+    public MultInterfacesTest(String s)\n+    {\n+        super(s);\n+    }\n+\n+    public static Test suite()\n+    {\n+        return new TestSuite(MultInterfacesTest.class);\n+    }\n+\n+    public void test()\n+    {\n+\n+\n+        PurchaseOrderDocument poDoc = null;\n+\n+        poDoc = PurchaseOrderDocument.Factory.newInstance();\n+        PurchaseOrderType po = poDoc.addNewPurchaseOrder();\n+        int LEN = 20;\n+\n+        Items.Item[] it = new Items.Item[LEN];\n+        for (int i = 0; i < LEN; i++)\n+        {\n+            it[i] = Items.Item.Factory.newInstance();\n+            it[i].setUSPrice(new BigDecimal(\"\" + i));\n+        }\n+        Items items = Items.Factory.newInstance();\n+        items.setItemArray(it);\n+        po.setItems(items);\n+\n+        StringBuffer sb = new StringBuffer();\n+        sb.append(\"<pur:purchaseOrder xmlns:pur=\\\"http://xbean.interface_feature/multInterfaces/PurchaseOrder\\\">\");\n+\n+        sb.append(\"<pur:items>\");\n+\n+        StringBuffer sbContent = new StringBuffer();\n+        for (int i = 0; i < LEN; i++)\n+            sbContent.append(\"<pur:item><pur:USPrice>\" + i + \"</pur:USPrice></pur:item>\");\n+\n+        int pos = sb.length();\n+        sb.append(\"</pur:items></pur:purchaseOrder>\");\n+\n+        String sExpected = sb.subSequence(0, pos) + sbContent.toString() + sb.subSequence(pos, sb.length());\n+        assertEquals(sExpected, poDoc.xmlText());\n+\n+\n+        assertEquals(0, poDoc.getMinPrice());\n+        int price = 10;\n+\n+        poDoc.setMinPrice((double) price);\n+\n+        sbContent = new StringBuffer();\n+        for (int i = 0; i < LEN; i++)\n+            if (i < price)\n+                sbContent.append(\"<pur:item><pur:USPrice>\" + price + \"</pur:USPrice></pur:item>\");\n+            else\n+                sbContent.append(\"<pur:item><pur:USPrice>\" + i + \"</pur:USPrice></pur:item>\");\n+        sExpected = sb.subSequence(0, pos) + sbContent.toString() + sb.subSequence(pos, sb.length());\n+        assertEquals(sExpected, poDoc.xmlText());\n+\n+        assertEquals(price, poDoc.getMinPrice());\n+\n+        int expTotal = (price - 1) * price + (price + 1 + LEN) * (LEN - price) / 2;\n+        assertEquals(expTotal, poDoc.getTotal());\n+\n+        XmlObject item = poDoc.getCheapestItem();\n+\n+        Item expected = it[0];\n+        expected.setUSPrice(new BigDecimal(30d));\n+        //       assertEquals(expected, item );\n+    }\n+\n+}",
                "additions": 88,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensionsuse/drtcases/MultInterfacesTest.java",
                "status": "added",
                "changes": 88,
                "deletions": 0,
                "sha": "674834d7a3d43dc5977de1db9bcc6f4ed5fb7cf8",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensionsuse/drtcases/MultInterfacesTest.java",
                "filename": "v1/test/src/extensionsuse/drtcases/MultInterfacesTest.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/test/src/extensionsuse/drtcases/MultInterfacesTest.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,145 @@\n+/*   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package drtcases;\n+\n+import junit.framework.TestCase;\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import junit.framework.Assert;\n+import xsd.company.CompanyDocument;\n+import xsd.company.CompanyType;\n+import myPackage.Foo;\n+import myPackage.Bar;\n+import myPackage.FooHandler;\n+import myPackage.FooHandler.PreBookmark;\n+import myPackage.FooHandler.PostBookmark;\n+import org.apache.xmlbeans.XmlCursor;\n+\n+/**\n+ * Author: Cezar Andrei ( cezar.andrei at bea.com )\n+ * Date: Mar 28, 2004\n+ */\n+public class SimpleTest extends TestCase\n+{\n+    public SimpleTest(String name)\n+    {\n+        super(name);\n+    }\n+\n+    public static Test suite()\n+    {\n+        return new TestSuite(SimpleTest.class);\n+    }\n+\n+    public void testInterfaces()\n+    {\n+        String expected;\n+        String actual;\n+\n+        CompanyDocument cDoc = CompanyDocument.Factory.newInstance();\n+\n+        CompanyType co = cDoc.addNewCompany();\n+        co.setName2(\"xbean name\");\n+\n+        expected = \"xbean name\";\n+        actual = co.getName2();\n+        Assert.assertTrue(\"Expected: \" + expected + \"\\n  actual: \" + actual, expected.equals(actual));\n+\n+        expected = \"{name in FooHandler}\";\n+        actual = co.getName();\n+        Assert.assertTrue(\"Expected: \" + expected + \"\\n  actual: \" + actual, expected.equals(actual));\n+\n+        Foo foo = cDoc;\n+\n+        expected = \"{in FooHandler.handleFoo(s: param)}\";\n+        actual = foo.foo(\"param\");\n+        Assert.assertTrue(\"Expected: '\" + expected + \"'\\n  actual: '\" + actual + \"'\", expected.equals(actual));\n+\n+\n+        Bar bar = null;\n+\n+        try\n+        {\n+            bar = cDoc;\n+            byte[] ba = bar.bar(\"param for bar\");\n+\n+            expected = \"{in BarHandler.handleBar(s: param for bar)}\";\n+            actual = new String(bar.bar(\"param for bar\"));\n+            Assert.assertTrue(\"Expected: \" + expected + \"\\n  actual: \" + actual, expected.equals(actual));\n+        }\n+        catch (Bar.MyException e)\n+        {\n+            Assert.assertTrue(false);\n+        }\n+\n+        try\n+        {\n+            bar.bar(null);\n+            Assert.assertTrue(false);\n+        }\n+        catch (Bar.MyException e)\n+        {\n+            Assert.assertTrue(true);\n+        }\n+    }\n+\n+    public void testPrePost()\n+    {\n+        String expected;\n+        String actual;\n+        XmlCursor xc;\n+\n+        CompanyDocument cDoc = CompanyDocument.Factory.newInstance();\n+\n+        // add new\n+        CompanyType co = cDoc.addNewCompany();\n+\n+        xc = cDoc.newCursor();\n+        PreBookmark prebk = (PreBookmark) xc.getBookmark(PreBookmark.class);\n+\n+        expected = \"{preSet in FooHandler: 2, <xml-fragment></xml-fragment>, {company.xsd}company, false, -1}\";\n+        actual = prebk.getMsg();\n+        Assert.assertTrue(\"Expected: \" + expected + \"\\n  actual: \" + actual, expected.equals(actual));\n+\n+\n+        PostBookmark postbk = (PostBookmark) xc.getBookmark(PostBookmark.class);\n+\n+        expected = \"{postSet in FooHandler: 2, \" + cDoc + \", {company.xsd}company, false, -1}\";\n+        actual = postbk.getMsg();\n+        Assert.assertTrue(\"Expected: \" + expected + \"\\n  actual: \" + actual, expected.equals(actual));\n+\n+        xc.dispose();\n+\n+\n+        // set\n+        co.setName2(\"xbean name\");\n+\n+        xc = co.newCursor();\n+        prebk = (PreBookmark) xc.getBookmark(PreBookmark.class);\n+\n+        expected = \"{preSet in FooHandler: 1, <xml-fragment/>, name, true, -1}\";\n+        actual = prebk.getMsg();\n+        Assert.assertTrue(\"Expected: \" + expected + \"\\n  actual: \" + actual, expected.equals(actual));\n+\n+\n+        postbk = (PostBookmark) xc.getBookmark(PostBookmark.class);\n+\n+        expected = \"{postSet in FooHandler: 1, \" + co + \", name, true, -1}\";\n+        actual = postbk.getMsg();\n+        Assert.assertTrue(\"Expected: \" + expected + \"\\n  actual: \" + actual, expected.equals(actual));\n+\n+        xc.dispose();\n+    }\n+}",
                "additions": 145,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensionsuse/drtcases/SimpleTest.java",
                "status": "added",
                "changes": 145,
                "deletions": 0,
                "sha": "13ff1fb01c83b8dad9ce713aeb13faf08c4302ea",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensionsuse/drtcases/SimpleTest.java",
                "filename": "v1/test/src/extensionsuse/drtcases/SimpleTest.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/test/src/extensionsuse/drtcases/SimpleTest.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,74 @@\n+package drtcases.prePostFeature.ValueRestriction;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.framework.Test;\n+import prePostFeature.xbean.valueRestriction.company.*;\n+import org.apache.xmlbeans.XmlString;\n+\n+/**\n+ * Created by IntelliJ IDEA.\n+ * User: ykadiysk\n+ * Date: May 5, 2004\n+ * Time: 11:23:35 AM\n+ * To change this template use File | Settings | File Templates.\n+ */\n+public class ValueRestrictionTest extends TestCase\n+{\n+    public ValueRestrictionTest(String s)\n+    {\n+        super(s);\n+    }\n+\n+    public static Test suite()\n+    {\n+        return new TestSuite(ValueRestrictionTest.class);\n+    }\n+\n+    public void test() throws Exception\n+    {\n+        CompanyDocument poDoc;\n+\n+        poDoc = CompanyDocument.Factory.newInstance();\n+        CompanyType po = poDoc.addNewCompany();\n+\n+        int LEN = 20;\n+\n+        StringBuffer sExpected = new StringBuffer();\n+        sExpected.append(\"<com:company xmlns:com=\\\"prePostFeature/xbean/ValueRestriction/company\\\"><departments>\");\n+        DepartmentType dept = po.addNewDepartments();\n+        ConsultantType[] it = new ConsultantType[LEN];\n+        for (int i = 0; i < LEN; i++)\n+        {\n+            it[i] = dept.addNewConsultant();\n+            XmlString s = XmlString.Factory.newInstance();\n+            it[i].setAge(50);\n+            sExpected.append(\"<consultant age=\\\"50\\\"/>\");\n+        }\n+\n+        sExpected.append(\"</departments></com:company>\");\n+\n+        assertEquals(sExpected.toString(), poDoc.xmlText());\n+        assertTrue(poDoc.validate());\n+\n+\n+        prePostFeature.ValueRestriction.existing.SetterHandler.bReady = true;\n+\n+\n+        for (int i = 0; i < LEN; i++)\n+        {\n+            it[i].setAge(150);\n+        }\n+\n+        assertEquals(sExpected.toString(), poDoc.xmlText());\n+        assertTrue(poDoc.validate());\n+\n+        for (int i = 0; i < LEN; i++)\n+        {\n+            it[i].setEmployeeAge(150);\n+        }\n+        assertTrue(sExpected.toString().equals(poDoc.xmlText()));\n+        assertTrue(poDoc.validate());\n+    }\n+}\n+",
                "additions": 74,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensionsuse/drtcases/prePostFeature/ValueRestriction/ValueRestrictionTest.java",
                "status": "added",
                "changes": 74,
                "deletions": 0,
                "sha": "4dc18368a4b28d515143b7a2453a8c93449d9fb1",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensionsuse/drtcases/prePostFeature/ValueRestriction/ValueRestrictionTest.java",
                "filename": "v1/test/src/extensionsuse/drtcases/prePostFeature/ValueRestriction/ValueRestrictionTest.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/test/src/extensionsuse/drtcases/prePostFeature/ValueRestriction/ValueRestrictionTest.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,55 @@\n+package drtcases.prePostFeature.readOnlyBean;\n+\n+import prePostFeature.xbean.readOnlyBean.purchaseOrder.PurchaseOrderDocument;\n+import prePostFeature.xbean.readOnlyBean.purchaseOrder.PurchaseOrderType;\n+import prePostFeature.xbean.readOnlyBean.purchaseOrder.Items;\n+\n+\n+import java.math.BigDecimal;\n+\n+import junit.framework.*;\n+import drtcases.FixedAttrTest;\n+\n+public class ReadOnlyTest extends TestCase\n+{\n+    public ReadOnlyTest(String s)\n+    {\n+        super(s);\n+    }\n+\n+    public static Test suite()\n+    {\n+        return new TestSuite(FixedAttrTest.class);\n+    }\n+\n+    public void test()\n+    {\n+        PurchaseOrderDocument poDoc;\n+\n+        poDoc = PurchaseOrderDocument.Factory.newInstance();\n+        PurchaseOrderType po = poDoc.addNewPurchaseOrder();\n+\n+\n+        int LEN = 20;\n+\n+        Items.Item[] it = new Items.Item[LEN];\n+        for (int i = 0; i < LEN; i++)\n+        {\n+            it[i] = Items.Item.Factory.newInstance();\n+            it[i].setUSPrice(new BigDecimal(\"\" + 4));\n+        }\n+        Items items = Items.Factory.newInstance();\n+        items.setItemArray(it);\n+        po.setItems(items);\n+\n+\n+        String sExpected = \"<pur:purchaseOrder xmlns:pur=\\\"http://xbean.prePost_feature/readOnlyBean/PurchaseOrder\\\"/>\";\n+\n+\n+        it[0].setPrice(10);\n+\n+        assertEquals(sExpected, poDoc.xmlText());\n+\n+        assertTrue(!poDoc.validate());\n+    }\n+}",
                "additions": 55,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensionsuse/drtcases/prePostFeature/readOnlyBean/ReadOnlyTest.java",
                "status": "added",
                "changes": 55,
                "deletions": 0,
                "sha": "372c8ac34c4c3524fb99c8cf94c5755ffdcb19c0",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v1/test/src/extensionsuse/drtcases/prePostFeature/readOnlyBean/ReadOnlyTest.java",
                "filename": "v1/test/src/extensionsuse/drtcases/prePostFeature/readOnlyBean/ReadOnlyTest.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/test/src/extensionsuse/drtcases/prePostFeature/readOnlyBean/ReadOnlyTest.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -118,17 +118,17 @@\n   <target name=\"drt\" depends=\"builddrt, rundrt, drtxpath\"/>\n \n   <target name=\"rundrt\" >\n-      <echo message=\"Running random tester\"/>\n-       <java classname=\"Random\" fork=\"true\" failonerror=\"true\">\n-          <classpath>\n+    <echo message=\"Running random tester\"/>\n+    <java classname=\"Random\" fork=\"true\" failonerror=\"true\">\n+       <classpath>\n             <pathelement location=\"build/ar/xbean.jar\"/>\n             <pathelement location=\"build/lib/jsr173_api.jar\"/>\n             <pathelement location=\"build/private/lib/easypo.jar\"/>\n             <pathelement location=\"build/private/lib/random.jar\"/>\n-          </classpath>\n-         <jvmarg value=\"-ea\"/>\n-         <arg line=\"-seed 0 -i 20 -noquery\"/>\n-       </java>\n+       </classpath>\n+       <jvmarg value=\"-ea\"/>\n+       <arg line=\"-seed 0 -i 20 -noquery\"/>\n+    </java>\n \n     <mkdir dir=\"build/test/output\"/>\n     <echo message=\"Running xbean product drt tests\"/>\n@@ -196,54 +196,171 @@\n   <target name=\"builddrt\" depends=\"drt.jar, random.jar, eric\"/>\n \n   <!-- extensions test -->\n+  <fileset id=\"extension.jars\" dir=\"build/private/lib\">\n+    <include name=\"extensions.jar\"/>\n+    <include name=\"fixedAttrBean.jar\"/>\n+    <include name=\"averageCase.jar\"/>\n+    <include name=\"multInterfaces.jar\"/>\n+    <include name=\"readOnlyBean.jar\"/>\n+    <include name=\"ValueRestriction.jar\"/>\n+  </fileset>\n+\n+  <fileset id=\"xbean.jars\" dir=\"build/lib\">\n+    <include name=\"xbean.jar\"/>\n+    <include name=\"jsr173_api.jar\"/>\n+    <include name=\"jsr173_ri.jar\"/>\n+  </fileset>\n+\n+  <path id=\"cpWithXbeanJars\">\n+      <fileset refid=\"xbean.jars\" />\n+      <!-- JAM needs tools.jar which should be on ${java.class.path} -->\n+      <pathelement path=\"${java.class.path}\" />\n+  </path>\n+\n   <target name=\"extensionsTest\" depends=\"extensions.compile\">\n     <echo message=\"JUnit output being sent to build/test/output/drt-extensions.txt\"/>\n     <junit fork=\"yes\" printsummary=\"yes\" haltonfailure=\"yes\" showoutput=\"yes\">\n       <jvmarg value=\"-ea\"/>\n       <classpath>\n+        <path refid=\"cpWithXbeanJars\"/>\n         <pathelement location=\"external/lib/junit.jar\"/>\n-        <pathelement location=\"build/ar/xbean.jar\"/>\n-        <pathelement location=\"build/lib/jsr173_api.jar\"/>\n-        <pathelement location=\"build/lib/jsr173_ri.jar\"/>\n         <pathelement location=\"build/private/lib/extensions.jar\"/>\n         <pathelement location=\"build/test/extensionsuse\"/>\n-        <pathelement path='${java.class.path}'/>\n-\t  </classpath>\n+        <fileset refid=\"extension.jars\"/>\n+        <pathelement location=\"build/test/extensions\"/>\n+      </classpath>\n       <formatter type=\"plain\"/>\n       <test name=\"drtcases.ExtensionsTest\" outfile=\"build/test/output/drt-extensions\"/>\n     </junit>\n   </target>\n \n-  <target name=\"extensions.compile\">\n+  <!--The extensions use the bean types, compile first-->\n+  <target name=\"simpleBeans.check\">\n+    <uptodate property=\"simpleBeans.notRequired\" targetfile=\"build/private/lib/fixedAttrBean.jar\">\n+      <srcfiles dir=\"test/src/extensions\" includes=\"**/*\"/>\n+      <srcfiles dir=\"test/src/extensionsuse\" includes=\"**/*\"/>\n+      <srcfiles dir=\"build/ar\" includes=\"xbean.jar\"/>\n+    </uptodate>\n+  </target>\n+\n+  <target name=\"build.simpleBeans\" unless=\"simpleBeans.notRequired\" depends=\"simpleBeans.check\">\n+    <java classname=\"${schema_compiler}\" fork=\"true\" failonerror=\"true\">\n+      <jvmarg value=\"-ea\"/>\n+      <classpath>\n+        <fileset refid=\"xbean.jars\"/>\n+        <pathelement location=\"build/test/extensions\"/>\n+      </classpath>\n+      <arg line=\"-out build/private/lib/fixedAttrBean.jar test/src/extensions/fixedAttrBean/po.xsd\"/>\n+    </java>\n+\n+    <java classname=\"${schema_compiler}\" fork=\"true\" failonerror=\"true\">\n+      <jvmarg value=\"-ea\"/>\n+      <classpath>\n+        <fileset refid=\"xbean.jars\"/>\n+        <pathelement location=\"build/test/extensions\"/>\n+      </classpath>\n+      <arg line=\"-out build/private/lib/averageCase.jar test/src/extensions/averageCase/po.xsd\"/>\n+    </java>\n+\n+    <java classname=\"${schema_compiler}\" fork=\"true\" failonerror=\"true\">\n+      <jvmarg value=\"-ea\"/>\n+      <classpath>\n+        <fileset refid=\"xbean.jars\"/>\n+        <pathelement location=\"build/test/extensions\"/>\n+      </classpath>\n+      <arg line=\"-out build/private/lib/multInterfaces.jar test/src/extensions/multInterfaces/po.xsd\"/>\n+    </java>\n+    <!-- **Pre/Post Handlers -->\n+    <java classname=\"${schema_compiler}\" fork=\"true\" failonerror=\"true\">\n+      <jvmarg value=\"-ea\"/>\n+      <classpath>\n+        <fileset refid=\"xbean.jars\"/>\n+        <pathelement location=\"build/test/extensions\"/>\n+      </classpath>\n+      <arg line=\"-out build/private/lib/readOnlyBean.jar test/src/extensions/prePostFeature/readOnlyBean/po.xsd\"/>\n+    </java>\n+    <java classname=\"${schema_compiler}\" fork=\"true\" failonerror=\"true\">\n+      <jvmarg value=\"-ea\"/>\n+      <classpath>\n+        <fileset refid=\"xbean.jars\"/>\n+        <pathelement location=\"build/test/extensions\"/>\n+      </classpath>\n+      <arg line=\"-out build/private/lib/ValueRestriction.jar test/src/extensions/prePostFeature/ValueRestriction/company.xsd\"/>\n+    </java>\n+\n+  </target>\n+\n+  <target name=\"extensions.compile\" depends=\"build.simpleBeans, simpleBeans.check\" unless=\"simpleBeans.notRequired\">\n     <mkdir dir=\"build/test/extensions\"/>\n     <javac srcdir=\"test/src/extensions\" destdir=\"build/test/extensions\" debug=\"on\">\n       <classpath>\n-        <pathelement location=\"build/ar/xbean.jar\"/>\n-        <pathelement location=\"build/lib/jsr173_api.jar\"/>\n-        <pathelement location=\"build/lib/jsr173_ri.jar\"/>\n-\t  </classpath>\n+        <fileset refid=\"xbean.jars\"/>\n+        <fileset refid=\"extension.jars\"/>\n+      </classpath>\n     </javac>\n \n     <java classname=\"${schema_compiler}\" fork=\"true\" failonerror=\"true\">\n       <jvmarg value=\"-ea\"/>\n       <classpath>\n-        <pathelement location=\"build/ar/xbean.jar\"/>\n-        <pathelement location=\"build/lib/jsr173_api.jar\"/>\n-        <pathelement location=\"build/lib/jsr173_ri.jar\"/>\n+        <path refid=\"cpWithXbeanJars\"/>\n+        <pathelement location=\"build/test/extensions\"/>\n+      </classpath>\n+      <arg line=\"-out build/private/lib/extensions.jar test/src/extensions/myPackage\"/>\n+    </java>\n+\n+    <java classname=\"${schema_compiler}\" fork=\"true\" failonerror=\"true\">\n+      <jvmarg value=\"-ea\"/>\n+      <classpath>\n+        <path refid=\"cpWithXbeanJars\"/>\n+        <pathelement location=\"build/test/extensions\"/>\n+      </classpath>\n+      <arg line=\"-out build/private/lib/fixedAttrBean.jar test/src/extensions/fixedAttrBean\"/>\n+    </java>\n+\n+    <java classname=\"${schema_compiler}\" fork=\"true\" failonerror=\"true\">\n+      <jvmarg value=\"-ea\"/>\n+      <classpath>\n+        <path refid=\"cpWithXbeanJars\"/>\n         <pathelement location=\"build/test/extensions\"/>\n-        <pathelement path='${java.class.path}'/>\n       </classpath>\n-      <arg line=\"-out build/private/lib/extensions.jar test/src/extensions\"/>\n+      <arg line=\"-out build/private/lib/averageCase.jar test/src/extensions/averageCase\"/>\n     </java>\n \n+    <java classname=\"${schema_compiler}\" fork=\"true\" failonerror=\"true\">\n+      <jvmarg value=\"-ea\"/>\n+      <classpath>\n+        <path refid=\"cpWithXbeanJars\"/>\n+        <pathelement location=\"build/test/extensions\"/>\n+      </classpath>\n+      <arg line=\"-out build/private/lib/multInterfaces.jar -src  build/private/lib/temp test/src/extensions/multInterfaces\"/>\n+    </java>\n+    <!--Pre Post Feature -->\n+\n+    <java classname=\"${schema_compiler}\" fork=\"true\" failonerror=\"true\">\n+      <jvmarg value=\"-ea\"/>\n+      <classpath>\n+        <path refid=\"cpWithXbeanJars\"/>\n+        <pathelement location=\"build/test/extensions\"/>\n+      </classpath>\n+      <arg line=\"-out build/private/lib/readOnlyBean.jar -src  build/private/lib/temp test/src/extensions/prePostFeature/readOnlyBean\"/>\n+    </java>\n+\n+    <java classname=\"${schema_compiler}\" fork=\"true\" failonerror=\"true\">\n+      <jvmarg value=\"-ea\"/>\n+      <classpath>\n+        <path refid=\"cpWithXbeanJars\"/>\n+        <pathelement location=\"build/test/extensions\"/>\n+      </classpath>\n+      <arg line=\"-out build/private/lib/ValueRestriction.jar -src  build/private/lib/temp test/src/extensions/prePostFeature/ValueRestriction\"/>\n+    </java>\n+\n+\n     <mkdir dir=\"build/test/extensionsuse\"/>\n     <javac srcdir=\"test/src/extensionsuse\" destdir=\"build/test/extensionsuse\" debug=\"on\">\n       <classpath>\n-        <pathelement location=\"build/ar/xbean.jar\"/>\n-        <pathelement location=\"build/lib/jsr173_api.jar\"/>\n-        <pathelement location=\"build/lib/jsr173_ri.jar\"/>\n+        <fileset refid=\"xbean.jars\"/>\n         <pathelement location=\"external/lib/junit.jar\"/>\n-        <pathelement location=\"build/private/lib/extensions.jar\"/>\n+        <fileset refid=\"extension.jars\"/>\n         <pathelement location=\"build/test/extensionsuse\"/>\n       </classpath>\n     </javac>",
                "additions": 143,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/build.xml",
                "status": "modified",
                "changes": 169,
                "deletions": 26,
                "sha": "2c0c9c306aa6e3273c220aba3a87b39367cd964e",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/build.xml",
                "filename": "v2/build.xml",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/build.xml?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -527,6 +527,7 @@ private void validate_event(int evType)\n                     _errorListener.add(XmlError.forMessage(\"No content type provided for validation of a content model.\",\n                         XmlError.SEVERITY_ERROR));\n                     _state = STATE_ERROR;\n+                    break;\n                 }\n                 initValidator(_contentType);\n                 _validator.nextEvent(Validator.BEGIN, _simpleEvent);",
                "additions": 1,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/src/typeimpl/org/apache/xmlbeans/impl/validator/ValidatingXMLStreamReader.java",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "a8ec6431fce01827f012cebb7521848dff75a89e",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/src/typeimpl/org/apache/xmlbeans/impl/validator/ValidatingXMLStreamReader.java",
                "filename": "v2/src/typeimpl/org/apache/xmlbeans/impl/validator/ValidatingXMLStreamReader.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/src/typeimpl/org/apache/xmlbeans/impl/validator/ValidatingXMLStreamReader.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,35 @@\n+/*   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package averageCase.existing;\n+\n+import org.apache.xmlbeans.XmlObject;\n+\n+import interfaceFeature.xbean.averageCase.purchaseOrder.PurchaseOrderDocument ;\n+import interfaceFeature.xbean.averageCase.purchaseOrder.PurchaseOrderType;\n+import interfaceFeature.xbean.averageCase.purchaseOrder.Items.Item;\n+\n+public class FooHandler\n+{\n+    public static int getTotal(XmlObject xo)\n+    {\n+        PurchaseOrderDocument poDoc= (PurchaseOrderDocument)xo;\n+\t    int sum=0;\n+\t    Item[] items=poDoc.getPurchaseOrder().getItems().getItemArray();\n+\n+        for (int i=0; i<items.length; i++)\n+\t\t    sum+=items[i].getUSPrice().intValue();\n+\t    return sum;\n+    }\n+}\n\\ No newline at end of file",
                "additions": 35,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/averageCase/existing/FooHandler.java",
                "status": "added",
                "changes": 35,
                "deletions": 0,
                "sha": "016f8e645a6a9b03160dfba0afb615c25fc3b0e5",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/averageCase/existing/FooHandler.java",
                "filename": "v2/test/src/extensions/averageCase/existing/FooHandler.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/extensions/averageCase/existing/FooHandler.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,20 @@\n+/*   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package averageCase.existing;\n+\n+public interface IFoo\n+{\n+    int getTotal();\n+}\n\\ No newline at end of file",
                "additions": 20,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/averageCase/existing/IFoo.java",
                "status": "added",
                "changes": 20,
                "deletions": 0,
                "sha": "d106a5a995caab54643c1b3603af369fe05d898f",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/averageCase/existing/IFoo.java",
                "filename": "v2/test/src/extensions/averageCase/existing/IFoo.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/extensions/averageCase/existing/IFoo.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,60 @@\n+<xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n+xmlns:po=\"http://xbean.interface_feature/averageCase/PurchaseOrder\"\n+targetNamespace=\"http://xbean.interface_feature/averageCase/PurchaseOrder\"\n+elementFormDefault=\"qualified\">\n+\t<xsd:annotation>\n+\t\t<xsd:documentation xml:lang=\"en\">\n+           Purchase order schema for Example.com.\n+           Copyright 2000 Example.com. All rights reserved.\n+        </xsd:documentation>\n+\t</xsd:annotation>\n+\t<xsd:element name=\"purchaseOrder\" type=\"po:PurchaseOrderType\"/>\n+\t<xsd:element name=\"comment\" type=\"xsd:string\"/>\n+\t<xsd:complexType name=\"PurchaseOrderType\">\n+\t\t<xsd:sequence>\n+\t\t\t<xsd:element name=\"shipTo\" type=\"po:USAddress\"/>\n+\t\t\t<xsd:element name=\"billTo\" type=\"po:USAddress\"/>\n+\t\t\t<xsd:element ref=\"po:comment\" minOccurs=\"0\"/>\n+\t\t\t<xsd:element name=\"items\" type=\"po:Items\"/>\n+\t\t</xsd:sequence>\n+\t\t<xsd:attribute name=\"orderDate\" type=\"xsd:date\"/>\n+\t</xsd:complexType>\n+\t<xsd:complexType name=\"USAddress\">\n+\t\t<xsd:sequence>\n+\t\t\t<xsd:element name=\"name\" type=\"xsd:string\" nillable=\"true\"/>\n+\t\t\t<xsd:element name=\"street\" type=\"xsd:string\"/>\n+\t\t\t<xsd:element name=\"city\" type=\"xsd:string\"/>\n+\t\t\t<xsd:element name=\"state\" type=\"xsd:string\"/>\n+\t\t\t<xsd:element name=\"zip\" type=\"xsd:decimal\"/>\n+\t\t</xsd:sequence>\n+\t\t<xsd:attribute name=\"country\" type=\"xsd:NMTOKEN\" fixed=\"US\"/>\n+\t</xsd:complexType>\n+\t<xsd:complexType name=\"Items\">\n+\t\t<xsd:sequence>\n+\t\t\t<xsd:element name=\"item\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+\t\t\t\t<xsd:complexType>\n+\t\t\t\t\t<xsd:sequence>\n+\t\t\t\t\t\t<xsd:element name=\"productName\" type=\"xsd:string\"/>\n+\t\t\t\t\t\t<xsd:element name=\"quantity\">\n+\t\t\t\t\t\t\t<xsd:simpleType>\n+\t\t\t\t\t\t\t\t<xsd:restriction base=\"xsd:positiveInteger\">\n+\t\t\t\t\t\t\t\t\t<xsd:maxExclusive value=\"100\"/>\n+\t\t\t\t\t\t\t\t</xsd:restriction>\n+\t\t\t\t\t\t\t</xsd:simpleType>\n+\t\t\t\t\t\t</xsd:element>\n+\t\t\t\t\t\t<xsd:element name=\"USPrice\" type=\"xsd:decimal\"/>\n+\t\t\t\t\t\t<xsd:element ref=\"po:comment\" minOccurs=\"0\"/>\n+\t\t\t\t\t\t<xsd:element name=\"shipDate\" type=\"xsd:date\" minOccurs=\"0\"/>\n+\t\t\t\t\t</xsd:sequence>\n+\t\t\t\t\t<xsd:attribute name=\"partNum\" type=\"po:SKU\" use=\"required\"/>\n+\t\t\t\t</xsd:complexType>\n+\t\t\t</xsd:element>\n+\t\t</xsd:sequence>\n+\t</xsd:complexType>\n+\t<!-- Stock Keeping Unit, a code for identifying products -->\n+\t<xsd:simpleType name=\"SKU\">\n+\t\t<xsd:restriction base=\"xsd:string\">\n+\t\t\t<xsd:pattern value=\"\\d{3}-[A-Z]{2}\"/>\n+\t\t</xsd:restriction>\n+\t</xsd:simpleType>\n+</xsd:schema>",
                "additions": 60,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/averageCase/po.xsd",
                "status": "added",
                "changes": 60,
                "deletions": 0,
                "sha": "eba58d6624ed0c718dbd015361c0ce41427cf83c",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/averageCase/po.xsd",
                "filename": "v2/test/src/extensions/averageCase/po.xsd",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/extensions/averageCase/po.xsd?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,22 @@\n+<!-- Copyright 2004 The Apache Software Foundation\n+\n+     Licensed under the Apache License, Version 2.0 (the \"License\");\n+     you may not use this file except in compliance with the License.\n+     You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+     Unless required by applicable law or agreed to in writing, software\n+     distributed under the License is distributed on an \"AS IS\" BASIS,\n+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+     See the License for the specific language governing permissions and\n+     limitations under the License. -->\n+<xb:config xmlns:xb=\"http://xml.apache.org/xmlbeans/2004/02/xbean/config\">\n+\n+\t<xb:extension for=\"interfaceFeature.xbean.averageCase.purchaseOrder.PurchaseOrderDocument\">\n+        <xb:interface name=\"averageCase.existing.IFoo\">\n+            <xb:staticHandler>averageCase.existing.FooHandler</xb:staticHandler>\n+        </xb:interface>\n+    </xb:extension>\n+\n+</xb:config>\n\\ No newline at end of file",
                "additions": 22,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/averageCase/po.xsdconfig",
                "status": "added",
                "changes": 22,
                "deletions": 0,
                "sha": "d3d8c4ae74ffd12f779931f3fb9e02564bd612e9",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/averageCase/po.xsdconfig",
                "filename": "v2/test/src/extensions/averageCase/po.xsdconfig",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/extensions/averageCase/po.xsdconfig?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,45 @@\n+/*   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package fixedAttrBean.existing;\n+\n+import org.apache.xmlbeans.XmlObject;\n+\n+import interfaceFeature.xbean.fixedAttrBean.purchaseOrder.PurchaseOrderDocument;\n+import interfaceFeature.xbean.fixedAttrBean.purchaseOrder.Items.Item;\n+import java.math.BigDecimal;\n+\n+public class FooHandler\n+{\n+    public static void setPrice(XmlObject xo, int price)\n+    {\n+        PurchaseOrderDocument poDoc = (PurchaseOrderDocument) xo;\n+        Item[] items = poDoc.getPurchaseOrder().getItems().getItemArray();\n+\n+        BigDecimal o=new BigDecimal(price+\"\");\n+        try\n+        {\n+            for (int i=0; i<items.length; i++)\n+\t\t        items[i].setUSPrice(o);\n+        }\n+        catch (Exception e)\n+        {\n+            e.printStackTrace(System.err);\n+        }\n+    }\n+\n+\tpublic static void getPrice(XmlObject xo)\n+    {\n+    }\n+}\n\\ No newline at end of file",
                "additions": 45,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/fixedAttrBean/existing/FooHandler.java",
                "status": "added",
                "changes": 45,
                "deletions": 0,
                "sha": "db627c4a398da32dd6b116f2195621f85200be3a",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/fixedAttrBean/existing/FooHandler.java",
                "filename": "v2/test/src/extensions/fixedAttrBean/existing/FooHandler.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/extensions/fixedAttrBean/existing/FooHandler.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,21 @@\n+/*   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package fixedAttrBean.existing;\n+\n+public interface IFoo\n+{\n+    void setPrice(int price);\n+    void getPrice();\n+}\n\\ No newline at end of file",
                "additions": 21,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/fixedAttrBean/existing/IFoo.java",
                "status": "added",
                "changes": 21,
                "deletions": 0,
                "sha": "5be39d53c4849c15cc58ac7a69318bcc91c27389",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/fixedAttrBean/existing/IFoo.java",
                "filename": "v2/test/src/extensions/fixedAttrBean/existing/IFoo.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/extensions/fixedAttrBean/existing/IFoo.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,60 @@\n+<xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n+xmlns:po=\"http://xbean.interface_feature/fixedAttrBean/PurchaseOrder\"\n+targetNamespace=\"http://xbean.interface_feature/fixedAttrBean/PurchaseOrder\"\n+elementFormDefault=\"qualified\">\n+\t<xsd:annotation>\n+\t\t<xsd:documentation xml:lang=\"en\">\n+           Purchase order schema for Example.com.\n+           Copyright 2000 Example.com. All rights reserved.\n+        </xsd:documentation>\n+\t</xsd:annotation>\n+\t<xsd:element name=\"purchaseOrder\" type=\"po:PurchaseOrderType\"/>\n+\t<xsd:element name=\"comment\" type=\"xsd:string\"/>\n+\t<xsd:complexType name=\"PurchaseOrderType\">\n+\t\t<xsd:sequence>\n+\t\t\t<xsd:element name=\"shipTo\" type=\"po:USAddress\"/>\n+\t\t\t<xsd:element name=\"billTo\" type=\"po:USAddress\"/>\n+\t\t\t<xsd:element ref=\"po:comment\" minOccurs=\"0\"/>\n+\t\t\t<xsd:element name=\"items\" type=\"po:Items\"/>\n+\t\t</xsd:sequence>\n+\t\t<xsd:attribute name=\"orderDate\" type=\"xsd:date\"/>\n+\t</xsd:complexType>\n+\t<xsd:complexType name=\"USAddress\">\n+\t\t<xsd:sequence>\n+\t\t\t<xsd:element name=\"name\" type=\"xsd:string\" nillable=\"true\"/>\n+\t\t\t<xsd:element name=\"street\" type=\"xsd:string\"/>\n+\t\t\t<xsd:element name=\"city\" type=\"xsd:string\"/>\n+\t\t\t<xsd:element name=\"state\" type=\"xsd:string\"/>\n+\t\t\t<xsd:element name=\"zip\" type=\"xsd:decimal\"/>\n+\t\t</xsd:sequence>\n+\t\t<xsd:attribute name=\"country\" type=\"xsd:NMTOKEN\" fixed=\"US\"/>\n+\t</xsd:complexType>\n+\t<xsd:complexType name=\"Items\">\n+\t\t<xsd:sequence>\n+\t\t\t<xsd:element name=\"item\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+\t\t\t\t<xsd:complexType>\n+\t\t\t\t\t<xsd:sequence>\n+\t\t\t\t\t\t<xsd:element name=\"productName\" type=\"xsd:string\"/>\n+\t\t\t\t\t\t<xsd:element name=\"quantity\">\n+\t\t\t\t\t\t\t<xsd:simpleType>\n+\t\t\t\t\t\t\t\t<xsd:restriction base=\"xsd:positiveInteger\">\n+\t\t\t\t\t\t\t\t\t<xsd:maxExclusive value=\"100\"/>\n+\t\t\t\t\t\t\t\t</xsd:restriction>\n+\t\t\t\t\t\t\t</xsd:simpleType>\n+\t\t\t\t\t\t</xsd:element>\n+\t\t\t\t\t\t<xsd:element name=\"USPrice\" type=\"xsd:decimal\" fixed=\"30\" />\n+\t\t\t\t\t\t<xsd:element ref=\"po:comment\" minOccurs=\"0\"/>\n+\t\t\t\t\t\t<xsd:element name=\"shipDate\" type=\"xsd:date\" minOccurs=\"0\"/>\n+\t\t\t\t\t</xsd:sequence>\n+\t\t\t\t\t<xsd:attribute name=\"partNum\" type=\"po:SKU\" use=\"required\"/>\n+\t\t\t\t</xsd:complexType>\n+\t\t\t</xsd:element>\n+\t\t</xsd:sequence>\n+\t</xsd:complexType>\n+\t<!-- Stock Keeping Unit, a code for identifying products -->\n+\t<xsd:simpleType name=\"SKU\">\n+\t\t<xsd:restriction base=\"xsd:string\">\n+\t\t\t<xsd:pattern value=\"\\d{3}-[A-Z]{2}\"/>\n+\t\t</xsd:restriction>\n+\t</xsd:simpleType>\n+</xsd:schema>",
                "additions": 60,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/fixedAttrBean/po.xsd",
                "status": "added",
                "changes": 60,
                "deletions": 0,
                "sha": "7070a9cca9dc607148f0fb73fb272f7fe78bb7fa",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/fixedAttrBean/po.xsd",
                "filename": "v2/test/src/extensions/fixedAttrBean/po.xsd",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/extensions/fixedAttrBean/po.xsd?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,22 @@\n+<!-- Copyright 2004 The Apache Software Foundation\n+\n+     Licensed under the Apache License, Version 2.0 (the \"License\");\n+     you may not use this file except in compliance with the License.\n+     You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+     Unless required by applicable law or agreed to in writing, software\n+     distributed under the License is distributed on an \"AS IS\" BASIS,\n+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+     See the License for the specific language governing permissions and\n+     limitations under the License. -->\n+<xb:config xmlns:xb=\"http://xml.apache.org/xmlbeans/2004/02/xbean/config\">\n+\n+    <xb:extension for=\"interfaceFeature.xbean.fixedAttrBean.purchaseOrder.PurchaseOrderDocument\">\n+        <xb:interface name=\"fixedAttrBean.existing.IFoo\">\n+            <xb:staticHandler>fixedAttrBean.existing.FooHandler</xb:staticHandler>\n+        </xb:interface>\n+    </xb:extension>\n+\n+</xb:config>\n\\ No newline at end of file",
                "additions": 22,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/fixedAttrBean/po.xsdconfig",
                "status": "added",
                "changes": 22,
                "deletions": 0,
                "sha": "9899c0bc04b22d1f17b865fb0119e5ce38940f6a",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/fixedAttrBean/po.xsdconfig",
                "filename": "v2/test/src/extensions/fixedAttrBean/po.xsdconfig",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/extensions/fixedAttrBean/po.xsdconfig?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,26 @@\n+/*   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package multInterfaces.existing;\n+\n+import org.apache.xmlbeans.XmlObject;\n+\n+public interface IReport extends ISum\n+{\n+    int getMinPrice();\n+\n+    XmlObject getCheapestItem();\n+\n+    void setMinPrice(double price);\n+}\n\\ No newline at end of file",
                "additions": 26,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/multInterfaces/existing/IReport.java",
                "status": "added",
                "changes": 26,
                "deletions": 0,
                "sha": "a66a338b18d9a85f1c5203a7a4d53eb86c441f2f",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/multInterfaces/existing/IReport.java",
                "filename": "v2/test/src/extensions/multInterfaces/existing/IReport.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/extensions/multInterfaces/existing/IReport.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,20 @@\n+/*   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package multInterfaces.existing;\n+\n+public interface ISum\n+{\n+    int getTotal();\n+}\n\\ No newline at end of file",
                "additions": 20,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/multInterfaces/existing/ISum.java",
                "status": "added",
                "changes": 20,
                "deletions": 0,
                "sha": "8e5b7df4975bcd271d1e7f2ea19200cb5ab7d27a",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/multInterfaces/existing/ISum.java",
                "filename": "v2/test/src/extensions/multInterfaces/existing/ISum.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/extensions/multInterfaces/existing/ISum.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,89 @@\n+/*   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package multInterfaces.existing;\n+\n+import org.apache.xmlbeans.XmlObject;\n+\n+import interfaceFeature.xbean.multInterfaces.purchaseOrder.PurchaseOrderDocument;\n+import interfaceFeature.xbean.multInterfaces.purchaseOrder.Items.Item;\n+\n+\n+import java.math.BigDecimal;\n+\n+public class ReportHandler\n+{\n+    public static int getTotal(XmlObject xo)\n+    {\n+\n+        int sum = 0;\n+        PurchaseOrderDocument poDoc = (PurchaseOrderDocument) xo;\n+        Item[] items = poDoc.getPurchaseOrder().getItems().getItemArray();\n+\n+        for (int i = 0; i < items.length; i++)\n+            sum += items[i].getUSPrice().intValue();\n+        return sum;\n+    }\n+\n+    public static int getMinPrice(XmlObject xo)\n+    {\n+        PurchaseOrderDocument poDoc = (PurchaseOrderDocument) xo;\n+        Item[] items = poDoc.getPurchaseOrder().getItems().getItemArray();\n+\n+        int min = Integer.MAX_VALUE;\n+        for (int i = 0; i < items.length; i++)\n+        {\n+            int tmp = items[i].getUSPrice().intValue();\n+\n+            min = min > tmp ? tmp : min;\n+        }\n+        return min;\n+    }\n+\n+    public static XmlObject getCheapestItem(XmlObject xo)\n+    {\n+        PurchaseOrderDocument poDoc = (PurchaseOrderDocument) xo;\n+        Item[] items = poDoc.getPurchaseOrder().getItems().getItemArray();\n+\n+        int min = Integer.MAX_VALUE;\n+        XmlObject item = null;\n+\n+        for (int i = 0; i < items.length; i++)\n+        {\n+            int tmp = items[i].getUSPrice().intValue();\n+            if (min > tmp)\n+            {\n+                min = tmp;\n+                item = items[i];\n+            }\n+        }\n+        return item;\n+    }\n+\n+    public static void setMinPrice(XmlObject xo, double min_price)\n+    {\n+        PurchaseOrderDocument poDoc = (PurchaseOrderDocument) xo;\n+        Item[] items = poDoc.getPurchaseOrder().getItems().getItemArray();\n+\n+        BigDecimal newPrice = new BigDecimal(min_price);\n+\n+        for (int i = 0; i < items.length; i++)\n+        {\n+\n+            int tmp = items[i].getUSPrice().intValue();\n+            if (min_price > tmp)\n+                items[i].setUSPrice(newPrice);\n+        }\n+    }\n+}\n\\ No newline at end of file",
                "additions": 89,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/multInterfaces/existing/ReportHandler.java",
                "status": "added",
                "changes": 89,
                "deletions": 0,
                "sha": "d52850f135e3b4233dc7dc2bf0b3bbc54c45178c",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/multInterfaces/existing/ReportHandler.java",
                "filename": "v2/test/src/extensions/multInterfaces/existing/ReportHandler.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/extensions/multInterfaces/existing/ReportHandler.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,60 @@\n+<xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n+xmlns:po=\"http://xbean.interface_feature/multInterfaces/PurchaseOrder\"\n+targetNamespace=\"http://xbean.interface_feature/multInterfaces/PurchaseOrder\"\n+elementFormDefault=\"qualified\">\n+\t<xsd:annotation>\n+\t\t<xsd:documentation xml:lang=\"en\">\n+           Purchase order schema for Example.com.\n+           Copyright 2000 Example.com. All rights reserved.\n+        </xsd:documentation>\n+\t</xsd:annotation>\n+\t<xsd:element name=\"purchaseOrder\" type=\"po:PurchaseOrderType\"/>\n+\t<xsd:element name=\"comment\" type=\"xsd:string\"/>\n+\t<xsd:complexType name=\"PurchaseOrderType\">\n+\t\t<xsd:sequence>\n+\t\t\t<xsd:element name=\"shipTo\" type=\"po:USAddress\"/>\n+\t\t\t<xsd:element name=\"billTo\" type=\"po:USAddress\"/>\n+\t\t\t<xsd:element ref=\"po:comment\" minOccurs=\"0\"/>\n+\t\t\t<xsd:element name=\"items\" type=\"po:Items\"/>\n+\t\t</xsd:sequence>\n+\t\t<xsd:attribute name=\"orderDate\" type=\"xsd:date\"/>\n+\t</xsd:complexType>\n+\t<xsd:complexType name=\"USAddress\">\n+\t\t<xsd:sequence>\n+\t\t\t<xsd:element name=\"name\" type=\"xsd:string\" nillable=\"true\"/>\n+\t\t\t<xsd:element name=\"street\" type=\"xsd:string\"/>\n+\t\t\t<xsd:element name=\"city\" type=\"xsd:string\"/>\n+\t\t\t<xsd:element name=\"state\" type=\"xsd:string\"/>\n+\t\t\t<xsd:element name=\"zip\" type=\"xsd:decimal\"/>\n+\t\t</xsd:sequence>\n+\t\t<xsd:attribute name=\"country\" type=\"xsd:NMTOKEN\" fixed=\"US\"/>\n+\t</xsd:complexType>\n+\t<xsd:complexType name=\"Items\">\n+\t\t<xsd:sequence>\n+\t\t\t<xsd:element name=\"item\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+\t\t\t\t<xsd:complexType>\n+\t\t\t\t\t<xsd:sequence>\n+\t\t\t\t\t\t<xsd:element name=\"productName\" type=\"xsd:string\"/>\n+\t\t\t\t\t\t<xsd:element name=\"quantity\">\n+\t\t\t\t\t\t\t<xsd:simpleType>\n+\t\t\t\t\t\t\t\t<xsd:restriction base=\"xsd:positiveInteger\">\n+\t\t\t\t\t\t\t\t\t<xsd:maxExclusive value=\"100\"/>\n+\t\t\t\t\t\t\t\t</xsd:restriction>\n+\t\t\t\t\t\t\t</xsd:simpleType>\n+\t\t\t\t\t\t</xsd:element>\n+\t\t\t\t\t\t<xsd:element name=\"USPrice\" type=\"xsd:decimal\" fixed=\"30\" />\n+\t\t\t\t\t\t<xsd:element ref=\"po:comment\" minOccurs=\"0\"/>\n+\t\t\t\t\t\t<xsd:element name=\"shipDate\" type=\"xsd:date\" minOccurs=\"0\"/>\n+\t\t\t\t\t</xsd:sequence>\n+\t\t\t\t\t<xsd:attribute name=\"partNum\" type=\"po:SKU\" use=\"required\"/>\n+\t\t\t\t</xsd:complexType>\n+\t\t\t</xsd:element>\n+\t\t</xsd:sequence>\n+\t</xsd:complexType>\n+\t<!-- Stock Keeping Unit, a code for identifying products -->\n+\t<xsd:simpleType name=\"SKU\">\n+\t\t<xsd:restriction base=\"xsd:string\">\n+\t\t\t<xsd:pattern value=\"\\d{3}-[A-Z]{2}\"/>\n+\t\t</xsd:restriction>\n+\t</xsd:simpleType>\n+</xsd:schema>",
                "additions": 60,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/multInterfaces/po.xsd",
                "status": "added",
                "changes": 60,
                "deletions": 0,
                "sha": "8a57dd103945227f4e5088b5dfa44412363cf85c",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/multInterfaces/po.xsd",
                "filename": "v2/test/src/extensions/multInterfaces/po.xsd",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/extensions/multInterfaces/po.xsd?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,24 @@\n+<!-- Copyright 2004 The Apache Software Foundation\n+\n+     Licensed under the Apache License, Version 2.0 (the \"License\");\n+     you may not use this file except in compliance with the License.\n+     You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+     Unless required by applicable law or agreed to in writing, software\n+     distributed under the License is distributed on an \"AS IS\" BASIS,\n+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+     See the License for the specific language governing permissions and\n+     limitations under the License. -->\n+<xb:config xmlns:xb=\"http://xml.apache.org/xmlbeans/2004/02/xbean/config\">\n+\n+    <!-- for=\"interfaceFeature.xbean.multInterfaces.PurchaseOrder.PurchaseOrderDocument\"-->\n+    <xb:extension for=\"interfaceFeature.xbean.multInterfaces.purchaseOrder.PurchaseOrderDocument\">\n+        <xb:interface name=\"multInterfaces.existing.IReport\">\n+            <xb:staticHandler>multInterfaces.existing.ReportHandler</xb:staticHandler>\n+        </xb:interface>\n+\n+    </xb:extension>\n+\n+</xb:config>\n\\ No newline at end of file",
                "additions": 24,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/multInterfaces/po.xsdconfig",
                "status": "added",
                "changes": 24,
                "deletions": 0,
                "sha": "c56f91e85fd5f5b1f71884ac83e9da7b8dfa41d8",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/multInterfaces/po.xsdconfig",
                "filename": "v2/test/src/extensions/multInterfaces/po.xsdconfig",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/extensions/multInterfaces/po.xsdconfig?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "additions": 0,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/myPackage/company.xsd",
                "previous_filename": "v2/test/src/extensions/company.xsd",
                "status": "renamed",
                "changes": 0,
                "deletions": 0,
                "sha": "baaabc2c515aa740a85305c21484331ee4cada8d",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/myPackage/company.xsd",
                "filename": "v2/test/src/extensions/myPackage/company.xsd",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/extensions/myPackage/company.xsd?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "additions": 0,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/myPackage/company.xsdconfig",
                "previous_filename": "v2/test/src/extensions/company.xsdconfig",
                "status": "renamed",
                "changes": 0,
                "deletions": 0,
                "sha": "90022894123c19341983f486bbafaa9dc9925980",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/myPackage/company.xsdconfig",
                "filename": "v2/test/src/extensions/myPackage/company.xsdconfig",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/extensions/myPackage/company.xsdconfig?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,51 @@\n+<!-- Copyright 2004 The Apache Software Foundation\n+\n+     Licensed under the Apache License, Version 2.0 (the \"License\");\n+     you may not use this file except in compliance with the License.\n+     You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+     Unless required by applicable law or agreed to in writing, software\n+     distributed under the License is distributed on an \"AS IS\" BASIS,\n+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+     See the License for the specific language governing permissions and\n+     limitations under the License. -->\n+<!--this is schema company.xsd stripped down and modified to have a value restriction on the employees age-->\n+\n+<xsd:schema \n+targetNamespace=\"prePostFeature/xbean/ValueRestriction/company\" \n+xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" \n+xmlns:company=\"prePostFeature/xbean/ValueRestriction/company\">\n+\t<xsd:element name=\"company\" type=\"company:CompanyType\"/>\n+\t<xsd:complexType name=\"CompanyType\">\n+\t\t<xsd:sequence>\n+\t\t\t<xsd:element name=\"departments\" type=\"company:DepartmentType\" maxOccurs=\"unbounded\"/>\n+\t\t</xsd:sequence>\n+\t\t\n+\t\t<xsd:anyAttribute namespace=\"http://www.omg.org/XMI\" processContents=\"lax\"/>\n+\t</xsd:complexType>\n+\t<xsd:element name=\"department\" type=\"company:DepartmentType\"/>\n+\t<xsd:complexType name=\"DepartmentType\">\n+\t\t<xsd:sequence>\n+\t\t\t<xsd:element name=\"consultant\" type=\"company:ConsultantType\" maxOccurs=\"unbounded\"/>\n+\t\t</xsd:sequence>\n+\t\t<xsd:anyAttribute namespace=\"http://www.omg.org/XMI\" processContents=\"lax\"/>\n+\t</xsd:complexType>\n+\t<xsd:complexType name=\"ConsultantType\">\n+\t\t\n+\t\t<xsd:attribute name=\"name\" type=\"xsd:string\"/>\n+\t      <xsd:attribute name=\"age\" type=\"company:age\"/>\n+\t\t<xsd:anyAttribute namespace=\"http://www.omg.org/XMI\" processContents=\"lax\"/>\n+\t   \n+\t</xsd:complexType>\n+\n+\t\n+               <xsd:simpleType name=\"age\">\n+                  <xsd:restriction base=\"xsd:integer\">\n+                         <xsd:minInclusive value=\"0\"/>\n+                         <xsd:maxInclusive value=\"100\"/>\n+                  </xsd:restriction>\n+               </xsd:simpleType>\n+   \n+</xsd:schema>",
                "additions": 51,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/prePostFeature/ValueRestriction/company.xsd",
                "status": "added",
                "changes": 51,
                "deletions": 0,
                "sha": "25e5608733b1c2685eea6bb3eae495599a3306b3",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/prePostFeature/ValueRestriction/company.xsd",
                "filename": "v2/test/src/extensions/prePostFeature/ValueRestriction/company.xsd",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/extensions/prePostFeature/ValueRestriction/company.xsd?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,26 @@\n+<!-- Copyright 2004 The Apache Software Foundation\n+\n+     Licensed under the Apache License, Version 2.0 (the \"License\");\n+     you may not use this file except in compliance with the License.\n+     You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+     Unless required by applicable law or agreed to in writing, software\n+     distributed under the License is distributed on an \"AS IS\" BASIS,\n+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+     See the License for the specific language governing permissions and\n+     limitations under the License. -->\n+<xb:config xmlns:xb=\"http://xml.apache.org/xmlbeans/2004/02/xbean/config\">\n+\n+    <xb:extension for=\"*\">\n+        <xb:interface name=\"prePostFeature.ValueRestriction.existing.ISetter\">\n+            <xb:staticHandler>prePostFeature.ValueRestriction.existing.SetterHandler</xb:staticHandler>\n+        </xb:interface>  \n+       <xb:prePostSet> \n+            <xb:staticHandler>prePostFeature.ValueRestriction.existing.SetterHandler</xb:staticHandler> \n+      </xb:prePostSet> \n+   </xb:extension> \n+\n+\n+</xb:config>\n\\ No newline at end of file",
                "additions": 26,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/prePostFeature/ValueRestriction/company.xsdconfig",
                "status": "added",
                "changes": 26,
                "deletions": 0,
                "sha": "eb1c07df54ce7e3f5c8002b7a08c84ccadefcc8b",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/prePostFeature/ValueRestriction/company.xsdconfig",
                "filename": "v2/test/src/extensions/prePostFeature/ValueRestriction/company.xsdconfig",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/extensions/prePostFeature/ValueRestriction/company.xsdconfig?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,24 @@\n+/*   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package prePostFeature.ValueRestriction.existing;\n+\n+/**\n+ * User: ykadiysk\n+ * Date: May 5, 2004\n+ */\n+public interface ISetter\n+{\n+    public void setEmployeeAge(int age);\n+}",
                "additions": 24,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/prePostFeature/ValueRestriction/existing/ISetter.java",
                "status": "added",
                "changes": 24,
                "deletions": 0,
                "sha": "19d21fca5b8f7c9eeb5e8d8fa4890c54ed5151de",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/prePostFeature/ValueRestriction/existing/ISetter.java",
                "filename": "v2/test/src/extensions/prePostFeature/ValueRestriction/existing/ISetter.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/extensions/prePostFeature/ValueRestriction/existing/ISetter.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,52 @@\n+/*   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package prePostFeature.ValueRestriction.existing;\n+\n+import org.apache.xmlbeans.XmlObject;\n+import prePostFeature.xbean.valueRestriction.company.ConsultantType;\n+\n+import javax.xml.namespace.QName;\n+\n+\n+/**\n+ * @author ykadiysk\n+ */\n+public class SetterHandler\n+{\n+\n+    public static boolean bReady = false;\n+\n+    public static void setEmployeeAge(XmlObject xo, int age)\n+    {\n+        ((ConsultantType) xo).setAge(age);\n+    }\n+\n+    private static XmlObject origValue;\n+\n+    public static boolean preSet(int opType, XmlObject xo, QName prop, boolean isAttr, int index)\n+    {\n+        origValue = xo.copy();\n+        return true;\n+    }\n+\n+    public static void postSet(int opType, XmlObject xo, QName propertyName, boolean isAttr, int index)\n+    {\n+        if (!xo.validate() && (opType == org.apache.xmlbeans.impl.config.PrePostExtension.OPERATION_SET) && bReady)\n+            xo.set(origValue);\n+        xo.validate();\n+    }\n+\n+\n+}",
                "additions": 52,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/prePostFeature/ValueRestriction/existing/SetterHandler.java",
                "status": "added",
                "changes": 52,
                "deletions": 0,
                "sha": "cfbd6a3c865fefbf1f50046e61151c2b9f60ae8a",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/prePostFeature/ValueRestriction/existing/SetterHandler.java",
                "filename": "v2/test/src/extensions/prePostFeature/ValueRestriction/existing/SetterHandler.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/extensions/prePostFeature/ValueRestriction/existing/SetterHandler.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,53 @@\n+/*   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package prePostFeature.readOnlyBean.existing;\n+\n+import org.apache.xmlbeans.XmlObject;\n+\n+\n+import prePostFeature.xbean.readOnlyBean.purchaseOrder.PurchaseOrderDocument;\n+import prePostFeature.xbean.readOnlyBean.purchaseOrder.Items.Item;\n+\n+import javax.xml.namespace.QName;\n+import java.math.BigDecimal;\n+\n+public class FooHandler\n+{\n+    public static boolean preSet(int opType, XmlObject xo, QName prop, boolean isAttr, int index)\n+    {\n+        if (opType == org.apache.xmlbeans.impl.config.PrePostExtension.OPERATION_SET)\n+            return false;\n+        return true;\n+    }\n+\n+    public static void postSet(int opType, XmlObject xo, QName propertyName, boolean isAttr, int index)\n+    {\n+        if (opType == org.apache.xmlbeans.impl.config.PrePostExtension.OPERATION_SET)\n+            System.err.println(\"No setters are allowed for this bean:\" + \" value unchanged\" + propertyName);\n+    }\n+\n+    public static void setPrice(XmlObject xo, int price)\n+    {\n+        Item it = (Item) xo;\n+        BigDecimal o = new BigDecimal(price + \"\");\n+        it.setUSPrice(o);\n+    }\n+\n+    public static double getPrice(XmlObject xo)\n+    {\n+        Item it = (Item) xo;\n+        return it.getUSPrice().doubleValue();\n+    }\n+}",
                "additions": 53,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/prePostFeature/readOnlyBean/existing/FooHandler.java",
                "status": "added",
                "changes": 53,
                "deletions": 0,
                "sha": "81733b39a6a1289201749a1e3ea52443ba867d01",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/prePostFeature/readOnlyBean/existing/FooHandler.java",
                "filename": "v2/test/src/extensions/prePostFeature/readOnlyBean/existing/FooHandler.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/extensions/prePostFeature/readOnlyBean/existing/FooHandler.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,27 @@\n+/*   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package prePostFeature.readOnlyBean.existing;\n+\n+/**\n+ * User: ykadiysk\n+ * Date: May 4, 2004\n+ */\n+public interface IFoo\n+{\n+    void setPrice(int price);\n+\n+    double getPrice();\n+}\n+",
                "additions": 27,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/prePostFeature/readOnlyBean/existing/IFoo.java",
                "status": "added",
                "changes": 27,
                "deletions": 0,
                "sha": "0cc4e347542fb95e66cfd38930084056665fa237",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/prePostFeature/readOnlyBean/existing/IFoo.java",
                "filename": "v2/test/src/extensions/prePostFeature/readOnlyBean/existing/IFoo.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/extensions/prePostFeature/readOnlyBean/existing/IFoo.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,60 @@\n+<xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n+xmlns:po=\"http://xbean.prePost_feature/readOnlyBean/PurchaseOrder\"\n+targetNamespace=\"http://xbean.prePost_feature/readOnlyBean/PurchaseOrder\"\n+elementFormDefault=\"qualified\">\n+\t<xsd:annotation>\n+\t\t<xsd:documentation xml:lang=\"en\">\n+           Purchase order schema for Example.com.\n+           Copyright 2000 Example.com. All rights reserved.\n+        </xsd:documentation>\n+\t</xsd:annotation>\n+\t<xsd:element name=\"purchaseOrder\" type=\"po:PurchaseOrderType\"/>\n+\t<xsd:element name=\"comment\" type=\"xsd:string\"/>\n+\t<xsd:complexType name=\"PurchaseOrderType\">\n+\t\t<xsd:sequence>\n+\t\t\t<xsd:element name=\"shipTo\" type=\"po:USAddress\"/>\n+\t\t\t<xsd:element name=\"billTo\" type=\"po:USAddress\"/>\n+\t\t\t<xsd:element ref=\"po:comment\" minOccurs=\"0\"/>\n+\t\t\t<xsd:element name=\"items\" type=\"po:Items\"/>\n+\t\t</xsd:sequence>\n+\t\t<xsd:attribute name=\"orderDate\" type=\"xsd:date\"/>\n+\t</xsd:complexType>\n+\t<xsd:complexType name=\"USAddress\">\n+\t\t<xsd:sequence>\n+\t\t\t<xsd:element name=\"name\" type=\"xsd:string\" nillable=\"true\"/>\n+\t\t\t<xsd:element name=\"street\" type=\"xsd:string\"/>\n+\t\t\t<xsd:element name=\"city\" type=\"xsd:string\"/>\n+\t\t\t<xsd:element name=\"state\" type=\"xsd:string\"/>\n+\t\t\t<xsd:element name=\"zip\" type=\"xsd:decimal\"/>\n+\t\t</xsd:sequence>\n+\t\t<xsd:attribute name=\"country\" type=\"xsd:NMTOKEN\" fixed=\"US\"/>\n+\t</xsd:complexType>\n+\t<xsd:complexType name=\"Items\">\n+\t\t<xsd:sequence>\n+\t\t\t<xsd:element name=\"item\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+\t\t\t\t<xsd:complexType>\n+\t\t\t\t\t<xsd:sequence>\n+\t\t\t\t\t\t<xsd:element name=\"productName\" type=\"xsd:string\"/>\n+\t\t\t\t\t\t<xsd:element name=\"quantity\">\n+\t\t\t\t\t\t\t<xsd:simpleType>\n+\t\t\t\t\t\t\t\t<xsd:restriction base=\"xsd:positiveInteger\">\n+\t\t\t\t\t\t\t\t\t<xsd:maxExclusive value=\"100\"/>\n+\t\t\t\t\t\t\t\t</xsd:restriction>\n+\t\t\t\t\t\t\t</xsd:simpleType>\n+\t\t\t\t\t\t</xsd:element>\n+\t\t\t\t\t\t<xsd:element name=\"USPrice\" type=\"xsd:decimal\" fixed=\"30\" />\n+\t\t\t\t\t\t<xsd:element ref=\"po:comment\" minOccurs=\"0\"/>\n+\t\t\t\t\t\t<xsd:element name=\"shipDate\" type=\"xsd:date\" minOccurs=\"0\"/>\n+\t\t\t\t\t</xsd:sequence>\n+\t\t\t\t\t<xsd:attribute name=\"partNum\" type=\"po:SKU\" use=\"required\"/>\n+\t\t\t\t</xsd:complexType>\n+\t\t\t</xsd:element>\n+\t\t</xsd:sequence>\n+\t</xsd:complexType>\n+\t<!-- Stock Keeping Unit, a code for identifying products -->\n+\t<xsd:simpleType name=\"SKU\">\n+\t\t<xsd:restriction base=\"xsd:string\">\n+\t\t\t<xsd:pattern value=\"\\d{3}-[A-Z]{2}\"/>\n+\t\t</xsd:restriction>\n+\t</xsd:simpleType>\n+</xsd:schema>",
                "additions": 60,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/prePostFeature/readOnlyBean/po.xsd",
                "status": "added",
                "changes": 60,
                "deletions": 0,
                "sha": "189d6e56aacca7786ca0a54254c31606e23f04ef",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/prePostFeature/readOnlyBean/po.xsd",
                "filename": "v2/test/src/extensions/prePostFeature/readOnlyBean/po.xsd",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/extensions/prePostFeature/readOnlyBean/po.xsd?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,25 @@\n+<!-- Copyright 2004 The Apache Software Foundation\n+\n+     Licensed under the Apache License, Version 2.0 (the \"License\");\n+     you may not use this file except in compliance with the License.\n+     You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+     Unless required by applicable law or agreed to in writing, software\n+     distributed under the License is distributed on an \"AS IS\" BASIS,\n+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+     See the License for the specific language governing permissions and\n+     limitations under the License. -->\n+<xb:config xmlns:xb=\"http://xml.apache.org/xmlbeans/2004/02/xbean/config\">\n+\n+    <xb:extension for=\"*\">\n+        <xb:interface name=\"prePostFeature.readOnlyBean.existing.IFoo\">\n+            <xb:staticHandler>prePostFeature.readOnlyBean.existing.FooHandler</xb:staticHandler>\n+        </xb:interface>  \n+       <xb:prePostSet> \n+            <xb:staticHandler>prePostFeature.readOnlyBean.existing.FooHandler</xb:staticHandler> \n+      </xb:prePostSet> \n+   </xb:extension> \n+\n+</xb:config>\n\\ No newline at end of file",
                "additions": 25,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/prePostFeature/readOnlyBean/po.xsdconfig",
                "status": "added",
                "changes": 25,
                "deletions": 0,
                "sha": "c764fcbca433095d4a006ad4a4397f95d3ceeef9",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensions/prePostFeature/readOnlyBean/po.xsdconfig",
                "filename": "v2/test/src/extensions/prePostFeature/readOnlyBean/po.xsdconfig",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/extensions/prePostFeature/readOnlyBean/po.xsdconfig?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,61 @@\n+/*   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package drtcases;\n+\n+import interfaceFeature.xbean.averageCase.purchaseOrder.PurchaseOrderDocument;\n+import interfaceFeature.xbean.averageCase.purchaseOrder.PurchaseOrderType;\n+import interfaceFeature.xbean.averageCase.purchaseOrder.Items;\n+\n+import junit.framework.*;\n+\n+import java.math.BigDecimal;\n+\n+\n+public class AverageCaseTest extends TestCase\n+{\n+    public AverageCaseTest(String s)\n+    {\n+        super(s);\n+    }\n+\n+    public static Test suite()\n+    {\n+        return new TestSuite(AverageCaseTest.class);\n+    }\n+\n+    public void test()\n+    {\n+        PurchaseOrderDocument poDoc;\n+\n+        poDoc = PurchaseOrderDocument.Factory.newInstance();\n+        PurchaseOrderType po = poDoc.addNewPurchaseOrder();\n+        int LEN = 20;\n+\n+        Items.Item[] it = new Items.Item[LEN];\n+        for (int i = 0; i < LEN; i++)\n+        {\n+            it[i] = Items.Item.Factory.newInstance();\n+            it[i].setUSPrice(new BigDecimal(\"\" + 2));\n+        }\n+        Items items = Items.Factory.newInstance();\n+        items.setItemArray(it);\n+        po.setItems(items);\n+        // System.out.println(\"poDoc: \" + poDoc);\n+\n+        int i = poDoc.getTotal();\n+//20 items @ $2\n+        assertEquals(40, i);\n+    }\n+}",
                "additions": 61,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensionsuse/drtcases/AverageCaseTest.java",
                "status": "added",
                "changes": 61,
                "deletions": 0,
                "sha": "74089a7ca3e833fb528114cf2766e2ea231603cb",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensionsuse/drtcases/AverageCaseTest.java",
                "filename": "v2/test/src/extensionsuse/drtcases/AverageCaseTest.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/extensionsuse/drtcases/AverageCaseTest.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -17,124 +17,31 @@\n import junit.framework.TestCase;\n import junit.framework.Test;\n import junit.framework.TestSuite;\n-import junit.framework.Assert;\n-import xsd.company.CompanyDocument;\n-import xsd.company.CompanyType;\n-import myPackage.Foo;\n-import myPackage.Bar;\n-import myPackage.FooHandler;\n-import myPackage.FooHandler.PreBookmark;\n-import myPackage.FooHandler.PostBookmark;\n-import org.apache.xmlbeans.XmlCursor;\n+import drtcases.prePostFeature.readOnlyBean.ReadOnlyTest;\n+import drtcases.prePostFeature.ValueRestriction.ValueRestrictionTest;\n \n /**\n  * Author: Cezar Andrei ( cezar.andrei at bea.com )\n  * Date: Mar 28, 2004\n  */\n public class ExtensionsTest extends TestCase\n {\n-    public ExtensionsTest(String name) { super(name); }\n-    public static Test suite() { return new TestSuite(ExtensionsTest.class); }\n-\n-    public void testInterfaces()\n+    public ExtensionsTest(String name)\n     {\n-\t\tString expected;\n-\t\tString actual;\n-\n-        CompanyDocument cDoc = CompanyDocument.Factory.newInstance();\n-\n-        CompanyType co = cDoc.addNewCompany();\n-        co.setName2(\"xbean name\");\n-\n-        expected = \"xbean name\";\n-        actual = co.getName2();\n-        Assert.assertTrue(\"Expected: \" + expected + \"\\n  actual: \" + actual, expected.equals(actual));\n-\n-        expected = \"{name in FooHandler}\";\n-        actual = co.getName();\n-        Assert.assertTrue(\"Expected: \" + expected + \"\\n  actual: \" + actual, expected.equals(actual));\n-\n-        Foo foo = cDoc;\n-\n-        expected = \"{in FooHandler.handleFoo(s: param)}\";\n-        actual = foo.foo(\"param\");\n-        Assert.assertTrue(\"Expected: '\" + expected + \"'\\n  actual: '\" + actual +\"'\", expected.equals(actual));\n-\n-\n-        Bar bar = null;\n-\n-        try\n-        {\n-            bar = cDoc;\n-            byte[] ba = bar.bar(\"param for bar\");\n-\n-\t\t\texpected = \"{in BarHandler.handleBar(s: param for bar)}\";\n-\t\t\tactual = new String(bar.bar(\"param for bar\"));\n-\t\t\tAssert.assertTrue(\"Expected: \" + expected + \"\\n  actual: \" + actual, expected.equals(actual));\n-        }\n-        catch (Bar.MyException e)\n-        {\n-            Assert.assertTrue(false);\n-        }\n-\n-        try\n-        {\n-            bar.bar(null);\n-            Assert.assertTrue(false);\n-        }\n-        catch( Bar.MyException e)\n-        {\n-            Assert.assertTrue(true);\n-        }\n+        super(name);\n     }\n \n-    public void testPrePost()\n+    public static Test suite()\n     {\n-        String expected;\n-        String actual;\n-        XmlCursor xc;\n-\n-        CompanyDocument cDoc = CompanyDocument.Factory.newInstance();\n-\n-        // add new\n-        CompanyType co = cDoc.addNewCompany();\n-\n-        xc = cDoc.newCursor();\n-        PreBookmark prebk = (PreBookmark)xc.getBookmark(PreBookmark.class);\n-\n-        expected = \"{preSet in FooHandler: 2, <xml-fragment></xml-fragment>, {company.xsd}company, false, -1}\";\n-        actual = prebk.getMsg();\n-        Assert.assertTrue(\"Expected: \" + expected + \"\\n  actual: \" + actual, expected.equals(actual));\n-\n-\n-\n-        PostBookmark postbk = (PostBookmark)xc.getBookmark(PostBookmark.class);\n-\n-        expected = \"{postSet in FooHandler: 2, \" + cDoc + \", {company.xsd}company, false, -1}\";\n-        actual = postbk.getMsg();\n-        Assert.assertTrue(\"Expected: \" + expected + \"\\n  actual: \" + actual, expected.equals(actual));\n-\n-        xc.dispose();\n-\n-\n-        // set\n-        co.setName2(\"xbean name\");\n-\n-        xc = co.newCursor();\n-        prebk = (PreBookmark)xc.getBookmark(PreBookmark.class);\n-\n-        expected = \"{preSet in FooHandler: 1, <xml-fragment/>, name, true, -1}\";\n-        actual = prebk.getMsg();\n-        Assert.assertTrue(\"Expected: \" + expected + \"\\n  actual: \" + actual, expected.equals(actual));\n-\n-\n-\n-        postbk = (PostBookmark)xc.getBookmark(PostBookmark.class);\n+        TestSuite suite = new TestSuite();\n \n-        expected = \"{postSet in FooHandler: 1, \" + co + \", name, true, -1}\";\n-        actual = postbk.getMsg();\n-        Assert.assertTrue(\"Expected: \" + expected + \"\\n  actual: \" + actual, expected.equals(actual));\n+        suite.addTest(SimpleTest.suite());\n+        suite.addTest(AverageCaseTest.suite());\n+        suite.addTest(FixedAttrTest.suite());\n+        suite.addTest(MultInterfacesTest.suite());\n+        suite.addTest(ReadOnlyTest.suite());\n+        suite.addTest(ValueRestrictionTest.suite());\n \n-        xc.dispose();\n+        return suite;\n     }\n }",
                "additions": 13,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensionsuse/drtcases/ExtensionsTest.java",
                "status": "modified",
                "changes": 119,
                "deletions": 106,
                "sha": "faade195e30d8a0c33695eb284a61a491503f47c",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensionsuse/drtcases/ExtensionsTest.java",
                "filename": "v2/test/src/extensionsuse/drtcases/ExtensionsTest.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/extensionsuse/drtcases/ExtensionsTest.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,88 @@\n+/*   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package drtcases;\n+\n+import interfaceFeature.xbean.fixedAttrBean.purchaseOrder.PurchaseOrderDocument;\n+import interfaceFeature.xbean.fixedAttrBean.purchaseOrder.PurchaseOrderType;\n+import interfaceFeature.xbean.fixedAttrBean.purchaseOrder.Items;\n+\n+\n+import java.math.BigDecimal;\n+\n+import junit.framework.*;\n+\n+public class FixedAttrTest extends TestCase\n+{\n+    public FixedAttrTest(String s)\n+    {\n+        super(s);\n+    }\n+\n+    public static Test suite()\n+    {\n+        return new TestSuite(FixedAttrTest.class);\n+    }\n+\n+    public void test()\n+    {\n+\n+        PurchaseOrderDocument poDoc;\n+\n+        poDoc = PurchaseOrderDocument.Factory.newInstance();\n+        PurchaseOrderType po = poDoc.addNewPurchaseOrder();\n+        int LEN = 20;\n+\n+        Items.Item[] it = new Items.Item[LEN];\n+        for (int i = 0; i < LEN; i++)\n+        {\n+            it[i] = Items.Item.Factory.newInstance();\n+            it[i].setUSPrice(new BigDecimal(\"\" + 4));\n+        }\n+        Items items = Items.Factory.newInstance();\n+        items.setItemArray(it);\n+        po.setItems(items);\n+\n+        StringBuffer sb = new StringBuffer();\n+        sb.append(\"<pur:purchaseOrder xmlns:pur=\\\"http://xbean.interface_feature/fixedAttrBean/PurchaseOrder\\\">\");\n+\n+        sb.append(\"<pur:items>\");\n+\n+        StringBuffer sbContent = new StringBuffer();\n+        for (int i = 0; i < LEN; i++)\n+            sbContent.append(\"<pur:item><pur:USPrice>4</pur:USPrice></pur:item>\");\n+\n+        int pos = sb.length();\n+        sb.append(\"</pur:items></pur:purchaseOrder>\");\n+\n+        String sExpected = sb.subSequence(0, pos) + sbContent.toString() + sb.subSequence(pos, sb.length());\n+\n+        assertEquals(sExpected, poDoc.xmlText());\n+\n+        try\n+        {\n+            poDoc.setPrice(10);\n+\n+        }\n+        catch (Exception t)\n+        {\n+            t.printStackTrace(System.err);\n+            System.exit(-1);\n+        }\n+\n+\n+        assertTrue(!poDoc.validate());\n+    }\n+\n+}",
                "additions": 88,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensionsuse/drtcases/FixedAttrTest.java",
                "status": "added",
                "changes": 88,
                "deletions": 0,
                "sha": "5817cb7547dbe14dfef0a942ad69393f6d8e711c",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensionsuse/drtcases/FixedAttrTest.java",
                "filename": "v2/test/src/extensionsuse/drtcases/FixedAttrTest.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/extensionsuse/drtcases/FixedAttrTest.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,102 @@\n+/*   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package drtcases;\n+\n+import interfaceFeature.xbean.multInterfaces.purchaseOrder.PurchaseOrderDocument;\n+import interfaceFeature.xbean.multInterfaces.purchaseOrder.PurchaseOrderType;\n+import interfaceFeature.xbean.multInterfaces.purchaseOrder.Items;\n+import interfaceFeature.xbean.multInterfaces.purchaseOrder.Items.Item;\n+\n+import java.math.BigDecimal;\n+\n+import org.apache.xmlbeans.XmlObject;\n+\n+import junit.framework.*;\n+\n+public class MultInterfacesTest extends TestCase\n+{\n+    public MultInterfacesTest(String s)\n+    {\n+        super(s);\n+    }\n+\n+    public static Test suite()\n+    {\n+        return new TestSuite(MultInterfacesTest.class);\n+    }\n+\n+    public void test()\n+    {\n+\n+\n+        PurchaseOrderDocument poDoc = null;\n+\n+        poDoc = PurchaseOrderDocument.Factory.newInstance();\n+        PurchaseOrderType po = poDoc.addNewPurchaseOrder();\n+        int LEN = 20;\n+\n+        Items.Item[] it = new Items.Item[LEN];\n+        for (int i = 0; i < LEN; i++)\n+        {\n+            it[i] = Items.Item.Factory.newInstance();\n+            it[i].setUSPrice(new BigDecimal(\"\" + i));\n+        }\n+        Items items = Items.Factory.newInstance();\n+        items.setItemArray(it);\n+        po.setItems(items);\n+\n+        StringBuffer sb = new StringBuffer();\n+        sb.append(\"<pur:purchaseOrder xmlns:pur=\\\"http://xbean.interface_feature/multInterfaces/PurchaseOrder\\\">\");\n+\n+        sb.append(\"<pur:items>\");\n+\n+        StringBuffer sbContent = new StringBuffer();\n+        for (int i = 0; i < LEN; i++)\n+            sbContent.append(\"<pur:item><pur:USPrice>\" + i + \"</pur:USPrice></pur:item>\");\n+\n+        int pos = sb.length();\n+        sb.append(\"</pur:items></pur:purchaseOrder>\");\n+\n+        String sExpected = sb.subSequence(0, pos) + sbContent.toString() + sb.subSequence(pos, sb.length());\n+        assertEquals(sExpected, poDoc.xmlText());\n+\n+\n+        assertEquals(0, poDoc.getMinPrice());\n+        int price = 10;\n+\n+        poDoc.setMinPrice((double) price);\n+\n+        sbContent = new StringBuffer();\n+        for (int i = 0; i < LEN; i++)\n+            if (i < price)\n+                sbContent.append(\"<pur:item><pur:USPrice>\" + price + \"</pur:USPrice></pur:item>\");\n+            else\n+                sbContent.append(\"<pur:item><pur:USPrice>\" + i + \"</pur:USPrice></pur:item>\");\n+        sExpected = sb.subSequence(0, pos) + sbContent.toString() + sb.subSequence(pos, sb.length());\n+        assertEquals(sExpected, poDoc.xmlText());\n+\n+        assertEquals(price, poDoc.getMinPrice());\n+\n+        int expTotal = (price - 1) * price + (price + 1 + LEN) * (LEN - price) / 2;\n+        assertEquals(expTotal, poDoc.getTotal());\n+\n+        XmlObject item = poDoc.getCheapestItem();\n+\n+        Item expected = it[0];\n+        expected.setUSPrice(new BigDecimal(30d));\n+        //       assertEquals(expected, item );\n+    }\n+\n+}",
                "additions": 102,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensionsuse/drtcases/MultInterfacesTest.java",
                "status": "added",
                "changes": 102,
                "deletions": 0,
                "sha": "86cbc3cd16e7d6fd146199d0f71c3fcb78e6efb9",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensionsuse/drtcases/MultInterfacesTest.java",
                "filename": "v2/test/src/extensionsuse/drtcases/MultInterfacesTest.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/extensionsuse/drtcases/MultInterfacesTest.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,144 @@\n+/*   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package drtcases;\n+\n+import junit.framework.TestCase;\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import junit.framework.Assert;\n+import xsd.company.CompanyDocument;\n+import xsd.company.CompanyType;\n+import myPackage.Foo;\n+import myPackage.Bar;\n+import myPackage.FooHandler.PreBookmark;\n+import myPackage.FooHandler.PostBookmark;\n+import org.apache.xmlbeans.XmlCursor;\n+\n+/**\n+ * Author: Cezar Andrei ( cezar.andrei at bea.com )\n+ * Date: Mar 28, 2004\n+ */\n+public class SimpleTest extends TestCase\n+{\n+    public SimpleTest(String name)\n+    {\n+        super(name);\n+    }\n+\n+    public static Test suite()\n+    {\n+        return new TestSuite(SimpleTest.class);\n+    }\n+\n+    public void testInterfaces()\n+    {\n+        String expected;\n+        String actual;\n+\n+        CompanyDocument cDoc = CompanyDocument.Factory.newInstance();\n+\n+        CompanyType co = cDoc.addNewCompany();\n+        co.setName2(\"xbean name\");\n+\n+        expected = \"xbean name\";\n+        actual = co.getName2();\n+        Assert.assertTrue(\"Expected: \" + expected + \"\\n  actual: \" + actual, expected.equals(actual));\n+\n+        expected = \"{name in FooHandler}\";\n+        actual = co.getName();\n+        Assert.assertTrue(\"Expected: \" + expected + \"\\n  actual: \" + actual, expected.equals(actual));\n+\n+        Foo foo = cDoc;\n+\n+        expected = \"{in FooHandler.handleFoo(s: param)}\";\n+        actual = foo.foo(\"param\");\n+        Assert.assertTrue(\"Expected: '\" + expected + \"'\\n  actual: '\" + actual + \"'\", expected.equals(actual));\n+\n+\n+        Bar bar = null;\n+\n+        try\n+        {\n+            bar = cDoc;\n+            byte[] ba = bar.bar(\"param for bar\");\n+\n+            expected = \"{in BarHandler.handleBar(s: param for bar)}\";\n+            actual = new String(bar.bar(\"param for bar\"));\n+            Assert.assertTrue(\"Expected: \" + expected + \"\\n  actual: \" + actual, expected.equals(actual));\n+        }\n+        catch (Bar.MyException e)\n+        {\n+            Assert.assertTrue(false);\n+        }\n+\n+        try\n+        {\n+            bar.bar(null);\n+            Assert.assertTrue(false);\n+        }\n+        catch (Bar.MyException e)\n+        {\n+            Assert.assertTrue(true);\n+        }\n+    }\n+\n+    public void testPrePost()\n+    {\n+        String expected;\n+        String actual;\n+        XmlCursor xc;\n+\n+        CompanyDocument cDoc = CompanyDocument.Factory.newInstance();\n+\n+        // add new\n+        CompanyType co = cDoc.addNewCompany();\n+\n+        xc = cDoc.newCursor();\n+        PreBookmark prebk = (PreBookmark) xc.getBookmark(PreBookmark.class);\n+\n+        expected = \"{preSet in FooHandler: 2, <xml-fragment></xml-fragment>, {company.xsd}company, false, -1}\";\n+        actual = prebk.getMsg();\n+        Assert.assertTrue(\"Expected: \" + expected + \"\\n  actual: \" + actual, expected.equals(actual));\n+\n+\n+        PostBookmark postbk = (PostBookmark) xc.getBookmark(PostBookmark.class);\n+\n+        expected = \"{postSet in FooHandler: 2, \" + cDoc + \", {company.xsd}company, false, -1}\";\n+        actual = postbk.getMsg();\n+        Assert.assertTrue(\"Expected: \" + expected + \"\\n  actual: \" + actual, expected.equals(actual));\n+\n+        xc.dispose();\n+\n+\n+        // set\n+        co.setName2(\"xbean name\");\n+\n+        xc = co.newCursor();\n+        prebk = (PreBookmark) xc.getBookmark(PreBookmark.class);\n+\n+        expected = \"{preSet in FooHandler: 1, <xml-fragment/>, name, true, -1}\";\n+        actual = prebk.getMsg();\n+        Assert.assertTrue(\"Expected: \" + expected + \"\\n  actual: \" + actual, expected.equals(actual));\n+\n+\n+        postbk = (PostBookmark) xc.getBookmark(PostBookmark.class);\n+\n+        expected = \"{postSet in FooHandler: 1, \" + co + \", name, true, -1}\";\n+        actual = postbk.getMsg();\n+        Assert.assertTrue(\"Expected: \" + expected + \"\\n  actual: \" + actual, expected.equals(actual));\n+\n+        xc.dispose();\n+    }\n+}",
                "additions": 144,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensionsuse/drtcases/SimpleTest.java",
                "status": "added",
                "changes": 144,
                "deletions": 0,
                "sha": "377259960a5fedec423fa7621effd4dbcaef32a6",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensionsuse/drtcases/SimpleTest.java",
                "filename": "v2/test/src/extensionsuse/drtcases/SimpleTest.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/extensionsuse/drtcases/SimpleTest.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,88 @@\n+/*   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package drtcases.prePostFeature.ValueRestriction;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.framework.Test;\n+import prePostFeature.xbean.valueRestriction.company.*;\n+import org.apache.xmlbeans.XmlString;\n+\n+/**\n+ * Created by IntelliJ IDEA.\n+ * User: ykadiysk\n+ * Date: May 5, 2004\n+ * Time: 11:23:35 AM\n+ * To change this template use File | Settings | File Templates.\n+ */\n+public class ValueRestrictionTest extends TestCase\n+{\n+    public ValueRestrictionTest(String s)\n+    {\n+        super(s);\n+    }\n+\n+    public static Test suite()\n+    {\n+        return new TestSuite(ValueRestrictionTest.class);\n+    }\n+\n+    public void test() throws Exception\n+    {\n+        CompanyDocument poDoc;\n+\n+        poDoc = CompanyDocument.Factory.newInstance();\n+        CompanyType po = poDoc.addNewCompany();\n+\n+        int LEN = 20;\n+\n+        StringBuffer sExpected = new StringBuffer();\n+        sExpected.append(\"<com:company xmlns:com=\\\"prePostFeature/xbean/ValueRestriction/company\\\"><departments>\");\n+        DepartmentType dept = po.addNewDepartments();\n+        ConsultantType[] it = new ConsultantType[LEN];\n+        for (int i = 0; i < LEN; i++)\n+        {\n+            it[i] = dept.addNewConsultant();\n+            XmlString s = XmlString.Factory.newInstance();\n+            it[i].setAge(50);\n+            sExpected.append(\"<consultant age=\\\"50\\\"/>\");\n+        }\n+\n+        sExpected.append(\"</departments></com:company>\");\n+\n+        assertEquals(sExpected.toString(), poDoc.xmlText());\n+        assertTrue(poDoc.validate());\n+\n+\n+        prePostFeature.ValueRestriction.existing.SetterHandler.bReady = true;\n+\n+\n+        for (int i = 0; i < LEN; i++)\n+        {\n+            it[i].setAge(150);\n+        }\n+\n+        assertEquals(sExpected.toString(), poDoc.xmlText());\n+        assertTrue(poDoc.validate());\n+\n+        for (int i = 0; i < LEN; i++)\n+        {\n+            it[i].setEmployeeAge(150);\n+        }\n+        assertTrue(sExpected.toString().equals(poDoc.xmlText()));\n+        assertTrue(poDoc.validate());\n+    }\n+}\n+",
                "additions": 88,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensionsuse/drtcases/prePostFeature/ValueRestriction/ValueRestrictionTest.java",
                "status": "added",
                "changes": 88,
                "deletions": 0,
                "sha": "5df82c73429317cf3a628e28257dcb878252dcbb",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensionsuse/drtcases/prePostFeature/ValueRestriction/ValueRestrictionTest.java",
                "filename": "v2/test/src/extensionsuse/drtcases/prePostFeature/ValueRestriction/ValueRestrictionTest.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/extensionsuse/drtcases/prePostFeature/ValueRestriction/ValueRestrictionTest.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            },
            {
                "patch": "@@ -0,0 +1,69 @@\n+/*   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package drtcases.prePostFeature.readOnlyBean;\n+\n+import prePostFeature.xbean.readOnlyBean.purchaseOrder.PurchaseOrderDocument;\n+import prePostFeature.xbean.readOnlyBean.purchaseOrder.PurchaseOrderType;\n+import prePostFeature.xbean.readOnlyBean.purchaseOrder.Items;\n+\n+\n+import java.math.BigDecimal;\n+\n+import junit.framework.*;\n+import drtcases.FixedAttrTest;\n+\n+public class ReadOnlyTest extends TestCase\n+{\n+    public ReadOnlyTest(String s)\n+    {\n+        super(s);\n+    }\n+\n+    public static Test suite()\n+    {\n+        return new TestSuite(FixedAttrTest.class);\n+    }\n+\n+    public void test()\n+    {\n+        PurchaseOrderDocument poDoc;\n+\n+        poDoc = PurchaseOrderDocument.Factory.newInstance();\n+        PurchaseOrderType po = poDoc.addNewPurchaseOrder();\n+\n+\n+        int LEN = 20;\n+\n+        Items.Item[] it = new Items.Item[LEN];\n+        for (int i = 0; i < LEN; i++)\n+        {\n+            it[i] = Items.Item.Factory.newInstance();\n+            it[i].setUSPrice(new BigDecimal(\"\" + 4));\n+        }\n+        Items items = Items.Factory.newInstance();\n+        items.setItemArray(it);\n+        po.setItems(items);\n+\n+\n+        String sExpected = \"<pur:purchaseOrder xmlns:pur=\\\"http://xbean.prePost_feature/readOnlyBean/PurchaseOrder\\\"/>\";\n+\n+\n+        it[0].setPrice(10);\n+\n+        assertEquals(sExpected, poDoc.xmlText());\n+\n+        assertTrue(!poDoc.validate());\n+    }\n+}",
                "additions": 69,
                "raw_url": "https://github.com/apache/xmlbeans/raw/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensionsuse/drtcases/prePostFeature/readOnlyBean/ReadOnlyTest.java",
                "status": "added",
                "changes": 69,
                "deletions": 0,
                "sha": "d2a28dc4518ccecf17cb5df35799ea1307fff8bd",
                "blob_url": "https://github.com/apache/xmlbeans/blob/aede4e7190e524842c14013cd49a4e2a6fcb226f/v2/test/src/extensionsuse/drtcases/prePostFeature/readOnlyBean/ReadOnlyTest.java",
                "filename": "v2/test/src/extensionsuse/drtcases/prePostFeature/readOnlyBean/ReadOnlyTest.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v2/test/src/extensionsuse/drtcases/prePostFeature/readOnlyBean/ReadOnlyTest.java?ref=aede4e7190e524842c14013cd49a4e2a6fcb226f"
            }
        ],
        "bug_id": "xmlbeans_30",
        "parent": "https://github.com/apache/xmlbeans/commit/724ae80a9ca01ed3acffc1f69479e21ce1980f57",
        "message": "- Added more tests for interface and pre/post extensions. Also, these tests are very good examples on how to use these features. Many thanks to Yana Kadiyska for contribuing these tests.\n\n- Fixed NPE in Validator.\n\nDRT: passes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@110745 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    },
    {
        "commit": "https://github.com/apache/xmlbeans/commit/e165a2518f1949315b8b14188be06030b7d694ae",
        "file": [
            {
                "patch": "@@ -2,35 +2,35 @@\n * The Apache Software License, Version 1.1\n *\n *\n-* Copyright (c) 2000-2003 The Apache Software Foundation.  All rights \n+* Copyright (c) 2000-2003 The Apache Software Foundation.  All rights\n * reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n-*    notice, this list of conditions and the following disclaimer. \n+*    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. The end-user documentation included with the redistribution,\n-*    if any, must include the following acknowledgment:  \n+*    if any, must include the following acknowledgment:\n *       \"This product includes software developed by the\n *        Apache Software Foundation (http://www.apache.org/).\"\n *    Alternately, this acknowledgment may appear in the software itself,\n *    if and wherever such third-party acknowledgments normally appear.\n *\n-* 4. The names \"Apache\" and \"Apache Software Foundation\" must \n+* 4. The names \"Apache\" and \"Apache Software Foundation\" must\n *    not be used to endorse or promote products derived from this\n-*    software without prior written permission. For written \n+*    software without prior written permission. For written\n *    permission, please contact apache@apache.org.\n *\n-* 5. Products derived from this software may not be called \"Apache \n-*    XMLBeans\", nor may \"Apache\" appear in their name, without prior \n+* 5. Products derived from this software may not be called \"Apache\n+*    XMLBeans\", nor may \"Apache\" appear in their name, without prior\n *    written permission of the Apache Software Foundation.\n *\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n@@ -49,7 +49,7 @@\n *\n * This software consists of voluntary contributions made by many\n * individuals on behalf of the Apache Software Foundation and was\n-* originally based on software copyright (c) 2000-2003 BEA Systems \n+* originally based on software copyright (c) 2000-2003 BEA Systems\n * Inc., <http://www.bea.com/>. For more information on the Apache Software\n * Foundation, please see <http://www.apache.org/>.\n */\n@@ -144,7 +144,7 @@\n     private boolean _hasWildcardElements;\n     private boolean _hasWildcardAttributes;\n     // set of valid QNames that can be substituted for a property\n-    private Set _validSubstitutions = Collections.EMPTY_SET; \n+    private Set _validSubstitutions = Collections.EMPTY_SET;\n \n     // simple content support\n     private int _complexTypeVariety;\n@@ -216,7 +216,7 @@\n \n     // for document types only - only valid during compilation\n     private QName _sg;\n-    private List _sgMembers = new ArrayList(); \n+    private List _sgMembers = new ArrayList();\n \n     public boolean isUnloaded()\n     {\n@@ -386,12 +386,33 @@ public boolean isAttributeType()\n \n     public QName getDocumentElementName()\n     {\n-        return _isDocumentType ? getContentModel().getName() : null;\n+        if (_isDocumentType)\n+        {\n+            SchemaParticle sp = getContentModel();\n+            if (sp != null)\n+                return sp.getName();\n+        }\n+\n+        return null;\n     }\n \n     public QName getAttributeTypeAttributeName()\n     {\n-        return _isAttributeType ? getAttributeModel().getAttributes()[0].getName() : null;\n+        if (_isAttributeType)\n+        {\n+            SchemaAttributeModel sam = getAttributeModel();\n+            if (sam != null)\n+            {\n+                SchemaLocalAttribute[] slaArray = sam.getAttributes();\n+                if (slaArray != null && slaArray.length > 0)\n+                {\n+                    SchemaLocalAttribute sla = slaArray[0];\n+                    return sla.getName();\n+                }\n+            }\n+        }\n+\n+        return null;\n     }\n \n     public void setDocumentType(boolean isDocument)\n@@ -663,7 +684,7 @@ public SchemaAttributeModel getAttributeModel()\n         for (Iterator it = results.iterator() ; it.hasNext() ; )\n         {\n             SchemaProperty prop = (SchemaProperty)it.next();\n-            SchemaProperty baseProp = prop.isAttribute() ? \n+            SchemaProperty baseProp = prop.isAttribute() ?\n                 baseType.getAttributeProperty(prop.getName()) :\n                 baseType.getElementProperty(prop.getName());\n \n@@ -676,7 +697,7 @@ public SchemaAttributeModel getAttributeModel()\n             {\n                 if ( eq(prop.getMinOccurs(), baseProp.getMinOccurs()) &&\n                      eq(prop.getMaxOccurs(), baseProp.getMaxOccurs()) &&\n-                     prop.hasNillable() == baseProp.hasNillable()) \n+                     prop.hasNillable() == baseProp.hasNillable())\n                 {\n                     it.remove();\n                 }\n@@ -856,7 +877,7 @@ public XmlObject createElementType(QName eltName, QName xsiType, SchemaTypeLoade\n             {\n                 type = prop.getType();\n             }\n-            else if (!_typedWildcardElements.contains(eltName) && \n+            else if (!_typedWildcardElements.contains(eltName) &&\n                      !_validSubstitutions.contains(eltName))\n             {\n                 type = BuiltinSchemaTypeSystem.ST_NO_TYPE;\n@@ -1124,7 +1145,7 @@ public void setSubstitutionGroup(QName sg)\n     public void addSubstitutionGroupMember(QName member)\n         { assertSGResolved(); _sgMembers.add(member); }\n \n-    public QName[] getSubstitutionGroupMembers() \n+    public QName[] getSubstitutionGroupMembers()\n     {\n         QName[] result = new QName[_sgMembers.size()];\n         return (QName[])_sgMembers.toArray(result);\n@@ -1233,7 +1254,7 @@ public synchronized boolean matchPatternFacet(String s)\n             patterns[i] = _patterns[i].getPattern();\n         return patterns;\n     }\n-    \n+\n     public org.apache.xmlbeans.impl.regex.RegularExpression[] getPatternExpressions()\n     {\n         if (_patterns == null)\n@@ -1561,7 +1582,7 @@ public XmlAnySimpleType newValue(Object obj, boolean validateOnSet)\n             result.set_newValue((XmlObject)obj);\n         else\n             result.objectSet(obj);\n-        \n+\n         result.check_dated();\n         result.setImmutable();\n \n@@ -1917,7 +1938,7 @@ public String toString()\n \n         if (getContainerField() != null)\n         {\n-            prefix = (getContainerField().getName().getNamespaceURI().length() > 0 ? \n+            prefix = (getContainerField().getName().getNamespaceURI().length() > 0 ?\n                             (getContainerField().isAttribute() ? \"Q=\" : \"E=\") :\n                             (getContainerField().isAttribute() ? \"A=\" : \"U=\"))\n                     + getContainerField().getName().getLocalPart();\n@@ -1964,7 +1985,7 @@ public boolean isChameleon ( )\n \n     public String getChameleonNamespace()\n         { return _chameleon ? _parseTNS : null; }\n-    \n+\n     public boolean isRedefinition()\n         { return _redefinition; }\n ",
                "additions": 41,
                "raw_url": "https://github.com/apache/xmlbeans/raw/e165a2518f1949315b8b14188be06030b7d694ae/v1/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeImpl.java",
                "status": "modified",
                "changes": 61,
                "deletions": 20,
                "sha": "33338eb8be3366daa4b14d741031dff2c39d001e",
                "blob_url": "https://github.com/apache/xmlbeans/blob/e165a2518f1949315b8b14188be06030b7d694ae/v1/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeImpl.java",
                "filename": "v1/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeImpl.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeImpl.java?ref=e165a2518f1949315b8b14188be06030b7d694ae"
            },
            {
                "patch": "@@ -2,35 +2,35 @@\n * The Apache Software License, Version 1.1\n *\n *\n-* Copyright (c) 2000-2003 The Apache Software Foundation.  All rights \n+* Copyright (c) 2000-2003 The Apache Software Foundation.  All rights\n * reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n-*    notice, this list of conditions and the following disclaimer. \n+*    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. The end-user documentation included with the redistribution,\n-*    if any, must include the following acknowledgment:  \n+*    if any, must include the following acknowledgment:\n *       \"This product includes software developed by the\n *        Apache Software Foundation (http://www.apache.org/).\"\n *    Alternately, this acknowledgment may appear in the software itself,\n *    if and wherever such third-party acknowledgments normally appear.\n *\n-* 4. The names \"Apache\" and \"Apache Software Foundation\" must \n+* 4. The names \"Apache\" and \"Apache Software Foundation\" must\n *    not be used to endorse or promote products derived from this\n-*    software without prior written permission. For written \n+*    software without prior written permission. For written\n *    permission, please contact apache@apache.org.\n *\n-* 5. Products derived from this software may not be called \"Apache \n-*    XMLBeans\", nor may \"Apache\" appear in their name, without prior \n+* 5. Products derived from this software may not be called \"Apache\n+*    XMLBeans\", nor may \"Apache\" appear in their name, without prior\n *    written permission of the Apache Software Foundation.\n *\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n@@ -49,7 +49,7 @@\n *\n * This software consists of voluntary contributions made by many\n * individuals on behalf of the Apache Software Foundation and was\n-* originally based on software copyright (c) 2000-2003 BEA Systems \n+* originally based on software copyright (c) 2000-2003 BEA Systems\n * Inc., <http://www.bea.com/>. For more information on the Apache Software\n * Foundation, please see <http://www.apache.org/>.\n */\n@@ -101,6 +101,7 @@\n import org.apache.xmlbeans.SchemaIdentityConstraint;\n import org.apache.xmlbeans.SimpleValue;\n import org.apache.xmlbeans.SchemaTypeLoaderException;\n+import org.apache.xmlbeans.SchemaField;\n import org.apache.xmlbeans.soap.SOAPArrayType;\n import org.apache.xmlbeans.soap.SchemaWSDLArrayType;\n import com.bea.x2002.x09.xbean.config.ConfigDocument.Config;\n@@ -333,15 +334,15 @@ private void initFromHeader()\n \n             // qname map of document types, by the qname of the contained element\n             _documentTypes = reader.readQNameRefMap();\n-            \n+\n             // qname mape of attribute types, by the qname of the contained attribute\n             _attributeTypes = reader.readQNameRefMap();\n \n             // string map of all types, by fully qualified classname\n             _typeRefsByClassname = reader.readClassnameRefMap();\n \n             _namespaces = reader.readNamespaces();\n-            \n+\n             // support for redefine, at the end of the file\n             if (reader.atLeast(2, 15, 0))\n             {\n@@ -476,10 +477,10 @@ private static Map buildAttributeTypeMap(SchemaType[] types)\n             result.put(types[i].getAttributeTypeAttributeName(), types[i].getRef());\n         return result;\n     }\n-    \n+\n     private static Random _random;\n     private static byte[] _mask = new byte[128 / 8];\n-    \n+\n     /**\n      * Fun, fun.  Produce 128 bits of uniqueness randomly.\n      * We used to use SecureRandom, but now we don't because SecureRandom\n@@ -516,7 +517,7 @@ private static synchronized void nextBytes(byte[] result)\n             {\n                 ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                 DataOutputStream daos = new DataOutputStream(baos);\n-                \n+\n                 // at least 10 bits of unqieueness, right?  Maybe even 50 or 60.\n                 daos.writeInt(System.identityHashCode(SchemaTypeSystemImpl.class));\n                 String[] props = new String[] { \"user.name\", \"user.dir\", \"user.timezone\", \"user.country\", \"java.class.path\", \"java.home\", \"java.vendor\", \"java.version\", \"os.version\" };\n@@ -543,7 +544,7 @@ private static synchronized void nextBytes(byte[] result)\n             {\n                 XBeanDebug.logException(e);\n             }\n-            \n+\n             _random = new Random(System.currentTimeMillis());\n         }\n         _random.nextBytes(result);\n@@ -891,7 +892,7 @@ void startWriteMode()\n     private Map _redefinedModelGroups;\n     private Map _redefinedAttributeGroups;\n     private Map _redefinedGlobalTypes;\n-    \n+\n     private Map _globalElements;\n     private Map _globalAttributes;\n     private Map _modelGroups;\n@@ -923,7 +924,7 @@ public void saveToDirectory(File classDir)\n         saveModelGroups(modelGroups());\n         saveAttributeGroups(attributeGroups());\n         saveIdentityConstraints(identityConstraints());\n-        \n+\n         saveTypesRecursively(redefinedGlobalTypes());\n         saveModelGroups(redefinedModelGroups());\n         saveAttributeGroups(redefinedAttributeGroups());\n@@ -1069,7 +1070,7 @@ public static String crackPointer(InputStream stream)\n \n             if (majorver > 2 || majorver == 2 && minorver >= 18)\n                 input.readShort(); // release number present in atLeast(2, 18, 0)\n-            \n+\n             int actualfiletype = input.readShort();\n             if (actualfiletype != FILETYPE_SCHEMAPOINTER)\n                 return null;\n@@ -1123,11 +1124,11 @@ public XsbReader(String handle, int filetype)\n \n             if (_minorver > MINOR_VERSION)\n                 throw new SchemaTypeLoaderException(\"XML-BEANS compiled schema: Incompatible minor version - expecting up to \" + MINOR_VERSION + \", got \" + _minorver, _name, handle, SchemaTypeLoaderException.WRONG_MINOR_VERSION);\n-            \n+\n             // Clip to 14 because we're not backward compatible with earlier\n             // minor versions.  Remove this when upgrading to a new major\n             // version\n-            \n+\n             if (_minorver < 14)\n                 throw new SchemaTypeLoaderException(\"XML-BEANS compiled schema: Incompatible minor version - expecting at least 14, got \" + _minorver, _name, handle, SchemaTypeLoaderException.WRONG_MINOR_VERSION);\n \n@@ -1297,7 +1298,7 @@ void writeIndexData()\n \n             // all the namespaces\n             writeNamespaces(_namespaces);\n-            \n+\n             // VERSION 2.15 and newer below\n             writeQNameMap(redefinedGlobalTypes());\n             writeQNameMap(redefinedModelGroups());\n@@ -1477,20 +1478,24 @@ void writeSOAPArrayType(SOAPArrayType arrayType)\n \n             switch (handle.charAt(2))\n             {\n-                case 'I': // _BI_\n+                case 'I': // _BI_ - built-in schema type system\n                     return ((SchemaType)BuiltinSchemaTypeSystem.get().resolveHandle(handle)).getRef();\n-                case 'T': // _XT_\n+                case 'T': // _XT_ - external type\n                     return _linker.findTypeRef(QNameHelper.forPretty(handle, 4));\n-                case 'E': // _XE_\n+                case 'E': // _XE_ - external element\n                     return _linker.findElementRef(QNameHelper.forPretty(handle, 4));\n-                case 'A': // _XA_\n+                case 'A': // _XA_ - external attribute\n                     return _linker.findAttributeRef(QNameHelper.forPretty(handle, 4));\n-                case 'M': // _XM_\n+                case 'M': // _XM_ - external model group\n                     return _linker.findModelGroupRef(QNameHelper.forPretty(handle, 4));\n-                case 'N': // _XN_\n+                case 'N': // _XN_ - external attribute group\n                     return _linker.findAttributeGroupRef(QNameHelper.forPretty(handle, 4));\n-                case 'D': // _XD_\n+                case 'D': // _XD_ - external identity constraint\n                     return _linker.findIdentityConstraintRef(QNameHelper.forPretty(handle, 4));\n+                case 'R': // _XR_ - external ref to attribute's type\n+                    return _linker.findAttribute(QNameHelper.forPretty(handle, 4)).getType().getRef();\n+                case 'S': // _XS_ - external ref to element's type\n+                    return _linker.findElement(QNameHelper.forPretty(handle, 4)).getType().getRef();\n                 default:\n                     throw new SchemaTypeLoaderException(\"Cannot resolve handle \" + handle, _name, _handle, SchemaTypeLoaderException.BAD_HANDLE);\n             }\n@@ -1528,8 +1533,32 @@ void writeHandle(SchemaComponent comp)\n                         writeString(\"_BI_\" + type.getName().getLocalPart());\n                         return;\n                     }\n-                    writeString(\"_XT_\" + QNameHelper.pretty(type.getName()));\n+\n+                    // fix for CR120759 - added output of types _XR_ & _XS_\n+                    // when an attribute (_XR_) or element (_XS_) declaration\n+                    // uses ref to refer to an attribute or element in another\n+                    // schema and the type of that attribute or element\n+                    // is an anonymous (local) type\n+                    if (type.getName() != null)\n+                    {\n+                        writeString(\"_XT_\" + QNameHelper.pretty(type.getName()));\n+                    }\n+                    else\n+                    {\n+                        SchemaField sf = type.getContainerField();\n+                        assert (sf != null);\n+                        if (sf.isAttribute())\n+                        {\n+                            writeString(\"_XR_\" + QNameHelper.pretty(sf.getName()));\n+                        }\n+                        else\n+                        {\n+                            writeString(\"_XS_\" + QNameHelper.pretty(sf.getName()));\n+                        }\n+                    }\n+\n                     return;\n+\n                 default:\n                     assert(false);\n                     throw new SchemaTypeLoaderException(\"Cannot write handle for component \" + comp, _name, _handle, SchemaTypeLoaderException.BAD_HANDLE);\n@@ -1758,7 +1787,7 @@ SchemaIdentityConstraint finishLoadingIdentityConstraint()\n                 impl.setName(readQName());\n                 impl.setConstraintCategory(readShort());\n                 impl.setSelector(readString());\n-                \n+\n                 String[] fields = new String[readShort()];\n                 for (int i = 0 ; i < fields.length ; i++)\n                     fields[i] = readString();\n@@ -2626,7 +2655,7 @@ void writeXmlValueObject(XmlAnySimpleType value)\n             writeType(type);\n             if (type == null)\n                 return;\n-            \n+\n             SchemaType iType = ((SimpleValue)value).instanceType();\n             if (iType == null)\n             {\n@@ -2911,7 +2940,7 @@ public void resolve()\n             SchemaComponent.Ref ref = (SchemaComponent.Ref)i.next();\n             ref.getComponent(); // Forces ref to be resolved\n         }\n-        \n+\n         XBeanDebug.trace(XBeanDebug.TRACE_SCHEMA_LOADING, \"Finished resolving type system \" + _name, -1);\n         _allNonGroupHandlesResolved = true;\n     }",
                "additions": 60,
                "raw_url": "https://github.com/apache/xmlbeans/raw/e165a2518f1949315b8b14188be06030b7d694ae/v1/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeSystemImpl.java",
                "status": "modified",
                "changes": 91,
                "deletions": 31,
                "sha": "dedff4248890f15dccbb0b104f00e244d0e2bb9c",
                "blob_url": "https://github.com/apache/xmlbeans/blob/e165a2518f1949315b8b14188be06030b7d694ae/v1/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeSystemImpl.java",
                "filename": "v1/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeSystemImpl.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/src/typeimpl/org/apache/xmlbeans/impl/schema/SchemaTypeSystemImpl.java?ref=e165a2518f1949315b8b14188be06030b7d694ae"
            },
            {
                "patch": "@@ -73,6 +73,8 @@\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.io.ObjectStreamException;\n+import java.io.ByteArrayInputStream;\n+import java.io.DataInputStream;\n import java.lang.reflect.Array;\n import java.util.Date;\n import java.util.List;\n@@ -121,6 +123,9 @@\n \n public abstract class XmlObjectBase implements TypeStoreUser, Serializable, XmlObject, SimpleValue\n {\n+    public static final short MAJOR_VERSION_NUMBER = (short) 1; // for serialization\n+    public static final short MINOR_VERSION_NUMBER = (short) 1; // for serialization\n+\n     public final Object monitor()\n     {\n         if (has_store())\n@@ -2351,18 +2356,75 @@ private SerializedRootObject(XmlObject impl)\n         private void writeObject(ObjectOutputStream out) throws IOException\n         {\n             out.writeObject(_xbeanClass);\n+            // the first short is written out for backwards compatibility\n+            // it will always be zero for objects written with\n+            // this code, but it used to be the first 2 bytes of the\n+            // writeUTF() method\n+            out.writeShort((short)0);\n+            out.writeShort(MAJOR_VERSION_NUMBER);\n+            out.writeShort(MINOR_VERSION_NUMBER);\n+            // CR122401 - need to use writeObject instead of writeUTF\n+            // for xmlText as writeUTF has a length limitation of\n+            // 65535 bytes\n             String xmlText = _impl.xmlText();\n-            out.writeUTF(xmlText);\n+            out.writeObject(xmlText);\n             out.writeBoolean(false);\n         }\n \n         private void readObject(ObjectInputStream in) throws IOException\n         {\n             try\n             {\n+                // read class object first - this is\n+                // first just for historical reasons - really\n+                // it would be better to have the version numbers\n+                // first\n                 _xbeanClass = (Class)in.readObject();\n-                String xmlText = in.readUTF();\n-                in.readBoolean();\n+\n+                int utfBytes = in.readUnsignedShort();\n+\n+                // determine version numbers\n+                // if utfBytes is non-zero then we default to 0.0\n+                // otherwise expect major and minor version numbers\n+                // to be next entries in stream\n+                int majorVersionNum = 0;\n+                int minorVersionNum = 0;\n+                if (utfBytes == 0)\n+                {\n+                    majorVersionNum = in.readUnsignedShort();\n+                    minorVersionNum = in.readUnsignedShort();\n+                }\n+\n+                String xmlText = null;\n+                switch (majorVersionNum)\n+                {\n+                    case 0: // original, unnumbered version\n+                            // minorVersionNum is always zero\n+                        xmlText = readObjectV0(in, utfBytes);\n+                        in.readBoolean(); // ignored\n+                        break;\n+\n+                    case 1:\n+                        switch (minorVersionNum)\n+                        {\n+                            case 1:\n+                                xmlText = (String)in.readObject();\n+                                in.readBoolean(); // ignored\n+                                break;\n+\n+                            default:\n+                                throw new IOException(\"Deserialization error: \" +\n+                                        \"version number \" + majorVersionNum + \".\" +\n+                                        minorVersionNum + \" not supported.\");\n+                        }\n+                        break;\n+\n+                    default:\n+                        throw new IOException(\"Deserialization error: \" +\n+                                \"version number \" + majorVersionNum + \".\" +\n+                                minorVersionNum + \" not supported.\");\n+                }\n+\n                 XmlOptions opts = new XmlOptions().setDocumentType(XmlBeans.typeForClass(_xbeanClass));\n                 _impl = XmlBeans.getContextTypeLoader().parse(xmlText, null, opts);\n             }\n@@ -2372,6 +2434,72 @@ private void readObject(ObjectInputStream in) throws IOException\n             }\n         }\n \n+        // this method is for reading the UTF-8 String that used to be\n+        // written out for a serialized XmlObject according to the\n+        // original format before this fix, i.e. it expects it\n+        // to have been written using the following algorithm:\n+        //\n+        // writeObject(Class object)\n+        // writeUTF(xmlText of object as String)\n+        // writeBoolean()\n+        //\n+        // this method is passed the original input stream positioned as though\n+        // it had just read the class object plus the next 2 bytes. Those 2\n+        // bytes are interpreted as an unsigned short saying how many more\n+        // bytes there are representing the bytes of the UTF-8-formatted String;\n+        // this value is passed in as the argument utfBytes\n+        private String readObjectV0(ObjectInputStream in, int utfBytes)\n+                throws IOException\n+        {\n+            // allow an extra 2 bytes up front for the unsigned short\n+            byte[] bArray = new byte[utfBytes+2];\n+\n+            // for format of these first 2 bytes see\n+            // Java API docs - DataOutputStream.writeShort()\n+            bArray[0] = (byte)( 0xff & (utfBytes >> 8) );\n+            bArray[1] = (byte)( 0xff & utfBytes );\n+\n+            // read the next numBytes bytes from the input stream\n+            // into the byte array starting at offset 2; this may\n+            // take multiple calls to read()\n+            int totalBytesRead = 0;\n+            int numRead;\n+            while (totalBytesRead < utfBytes)\n+            {\n+                numRead =\n+                    in.read(bArray, 2+totalBytesRead, utfBytes-totalBytesRead);\n+                if (numRead == -1) // reached end of stream\n+                    break;\n+\n+                totalBytesRead += numRead;\n+            }\n+\n+            if (totalBytesRead != utfBytes)\n+            {\n+                throw new IOException(\"Error reading backwards compatible \" +\n+                        \"XmlObject: number of bytes read (\" + totalBytesRead +\n+                        \") != number expected (\" + utfBytes + \")\" );\n+            }\n+\n+            // now set up a DataInputStream to read those\n+            // bytes as a UTF-8 String i.e. as though we'd never\n+            // read the first 2 bytes from the original stream\n+            DataInputStream dis = null;\n+            String str = null;\n+            try\n+            {\n+                dis = new DataInputStream(new ByteArrayInputStream(bArray));\n+                str = dis.readUTF();\n+            }\n+            finally\n+            {\n+                if (dis != null)\n+                    dis.close();\n+            }\n+\n+            return str;\n+        }\n+\n         private Object readResolve() throws ObjectStreamException\n         {\n             return _impl;",
                "additions": 131,
                "raw_url": "https://github.com/apache/xmlbeans/raw/e165a2518f1949315b8b14188be06030b7d694ae/v1/src/typeimpl/org/apache/xmlbeans/impl/values/XmlObjectBase.java",
                "status": "modified",
                "changes": 134,
                "deletions": 3,
                "sha": "2685d9e5b05e7f299c5703f4f33514521e94474b",
                "blob_url": "https://github.com/apache/xmlbeans/blob/e165a2518f1949315b8b14188be06030b7d694ae/v1/src/typeimpl/org/apache/xmlbeans/impl/values/XmlObjectBase.java",
                "filename": "v1/src/typeimpl/org/apache/xmlbeans/impl/values/XmlObjectBase.java",
                "contents_url": "https://api.github.com/repos/apache/xmlbeans/contents/v1/src/typeimpl/org/apache/xmlbeans/impl/values/XmlObjectBase.java?ref=e165a2518f1949315b8b14188be06030b7d694ae"
            }
        ],
        "bug_id": "xmlbeans_31",
        "parent": "https://github.com/apache/xmlbeans/commit/3b16aebcb4b454a88e7c4771bd6844278eafcb3a",
        "message": "Patch from: lawrence jones\nCode review: david bau\nRegression tests: passed\n\nThis checkin fixes a few bugs:\n(1) When linking to binary schemas via attribute or element references,\n    things weren't working because of inability to deal with\n    anonymous types.\n(2) Some NPEs in the SchemaType API fixed\n(3) Added a version numbering scheme to the java.io.Serializable format\n    for instances, backward compatible.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlbeans/trunk@110162 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "xmlbeans"
    }
]