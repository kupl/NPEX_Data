[{"commit": "https://github.com/apache/cordova-android/commit/2cd3ebc7a8db1cb883253796fed52cf39d9635b2", "parent": "https://github.com/apache/cordova-android/commit/7e3af6c2351d0b17d5ff4f2aa3c8b190a22f8ae0", "message": "Fix NPE on reset with undefined NetworkListener.", "bug_id": "cordova-android_1", "file": [{"additions": 8, "raw_url": "https://github.com/apache/cordova-android/raw/2cd3ebc7a8db1cb883253796fed52cf39d9635b2/framework/src/org/apache/cordova/GeoBroker.java", "blob_url": "https://github.com/apache/cordova-android/blob/2cd3ebc7a8db1cb883253796fed52cf39d9635b2/framework/src/org/apache/cordova/GeoBroker.java", "sha": "e6798a993c12d6f2c8953c5781517d8b5674c86d", "changes": 12, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/cordova-android/contents/framework/src/org/apache/cordova/GeoBroker.java?ref=2cd3ebc7a8db1cb883253796fed52cf39d9635b2", "patch": "@@ -135,10 +135,14 @@ public boolean isSynch(String action) {\n      * Stop listener.\n      */\n     public void onDestroy() {\n-        this.networkListener.destroy();\n-        this.gpsListener.destroy();\n-        this.networkListener = null;\n-        this.gpsListener = null;\n+        if (this.networkListener != null) {\n+            this.networkListener.destroy();\n+            this.networkListener = null;\n+        }\n+        if (this.gpsListener != null) {\n+            this.gpsListener.destroy();\n+            this.gpsListener = null;\n+        }\n     }\n \n     /**", "filename": "framework/src/org/apache/cordova/GeoBroker.java"}], "repo": "cordova-android"}, {"commit": "https://github.com/apache/cordova-android/commit/448071b02d40904de3264bab0dc69ca48ef318e5", "parent": "https://github.com/apache/cordova-android/commit/4dad9d0e379bdd68d988da45ae82040eb8398480", "message": "Fix NPE when POLLING bridge mode is used.", "bug_id": "cordova-android_2", "file": [{"additions": 4, "raw_url": "https://github.com/apache/cordova-android/raw/448071b02d40904de3264bab0dc69ca48ef318e5/framework/.settings/org.eclipse.jdt.core.prefs", "blob_url": "https://github.com/apache/cordova-android/blob/448071b02d40904de3264bab0dc69ca48ef318e5/framework/.settings/org.eclipse.jdt.core.prefs", "sha": "b080d2ddc88fb0b4d7c93cd4d361c775525b4dbb", "changes": 4, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cordova-android/contents/framework/.settings/org.eclipse.jdt.core.prefs?ref=448071b02d40904de3264bab0dc69ca48ef318e5", "patch": "@@ -0,0 +1,4 @@\n+eclipse.preferences.version=1\n+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6\n+org.eclipse.jdt.core.compiler.compliance=1.6\n+org.eclipse.jdt.core.compiler.source=1.6", "filename": "framework/.settings/org.eclipse.jdt.core.prefs"}, {"additions": 8, "raw_url": "https://github.com/apache/cordova-android/raw/448071b02d40904de3264bab0dc69ca48ef318e5/framework/src/org/apache/cordova/NativeToJsMessageQueue.java", "blob_url": "https://github.com/apache/cordova-android/blob/448071b02d40904de3264bab0dc69ca48ef318e5/framework/src/org/apache/cordova/NativeToJsMessageQueue.java", "sha": "dddc022bfaed4fcbafba8ffe36ebd70330ff06ec", "changes": 10, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/cordova-android/contents/framework/src/org/apache/cordova/NativeToJsMessageQueue.java?ref=448071b02d40904de3264bab0dc69ca48ef318e5", "patch": "@@ -83,7 +83,7 @@ public NativeToJsMessageQueue(CordovaWebView webView, CordovaInterface cordova)\n         this.cordova = cordova;\n         this.webView = webView;\n         registeredListeners = new BridgeMode[4];\n-        registeredListeners[0] = null;  // Polling. Requires no logic.\n+        registeredListeners[0] = new PollingBridgeMode();\n         registeredListeners[1] = new LoadUrlBridgeMode();\n         registeredListeners[2] = new OnlineEventsBridgeMode();\n         registeredListeners[3] = new PrivateApiBridgeMode();\n@@ -279,7 +279,13 @@ public boolean getPaused() {\n         abstract void onNativeToJsMessageAvailable();\n         void notifyOfFlush(boolean fromOnlineEvent) {}\n     }\n-    \n+\n+    /** Uses JS polls for messages on a timer.. */\n+    private class PollingBridgeMode extends BridgeMode {\n+        @Override void onNativeToJsMessageAvailable() {\n+        }\n+    }\n+\n     /** Uses webView.loadUrl(\"javascript:\") to execute messages. */\n     private class LoadUrlBridgeMode extends BridgeMode {\n         final Runnable runnable = new Runnable() {", "filename": "framework/src/org/apache/cordova/NativeToJsMessageQueue.java"}], "repo": "cordova-android"}, {"commit": "https://github.com/apache/cordova-android/commit/a9ebf50b86bcb9de40cbf4013e98fd1a24be25e8", "parent": "https://github.com/apache/cordova-android/commit/8d8cbf6e284bc67c4e8502a6238c83d2645b815e", "message": "Prevent NPE in case webview is lately initialized", "bug_id": "cordova-android_3", "file": [{"additions": 4, "raw_url": "https://github.com/apache/cordova-android/raw/a9ebf50b86bcb9de40cbf4013e98fd1a24be25e8/framework/src/org/apache/cordova/CordovaActivity.java", "blob_url": "https://github.com/apache/cordova-android/blob/a9ebf50b86bcb9de40cbf4013e98fd1a24be25e8/framework/src/org/apache/cordova/CordovaActivity.java", "sha": "6f9bc91fd4d379b82e5c5f56775fb0a956550106", "changes": 12, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/cordova-android/contents/framework/src/org/apache/cordova/CordovaActivity.java?ref=a9ebf50b86bcb9de40cbf4013e98fd1a24be25e8", "patch": "@@ -858,8 +858,8 @@ protected void onActivityResult(int requestCode, int resultCode, Intent intent)\n         LOG.d(TAG, \"Incoming Result\");\n         super.onActivityResult(requestCode, resultCode, intent);\n         Log.d(TAG, \"Request code = \" + requestCode);\n-        ValueCallback<Uri> mUploadMessage = this.appView.getWebChromeClient().getValueCallback();\n-        if (requestCode == CordovaChromeClient.FILECHOOSER_RESULTCODE) {\n+        if (appView != null && requestCode == CordovaChromeClient.FILECHOOSER_RESULTCODE) {\n+        \tValueCallback<Uri> mUploadMessage = this.appView.getWebChromeClient().getValueCallback();\n             Log.d(TAG, \"did we get here?\");\n             if (null == mUploadMessage)\n                 return;\n@@ -1079,9 +1079,7 @@ public void run() {\n     @Override\n     public boolean onKeyUp(int keyCode, KeyEvent event)\n     {\n-        //Get whatever has focus!\n-        View childView = appView.getFocusedChild();\n-        if ((appView.isCustomViewShowing() || childView != null ) &&\n+        if (appView != null && (appView.isCustomViewShowing() || appView.getFocusedChild() != null ) &&\n                 (keyCode == KeyEvent.KEYCODE_BACK || keyCode == KeyEvent.KEYCODE_MENU)) {\n             return appView.onKeyUp(keyCode, event);\n         } else {\n@@ -1099,10 +1097,8 @@ public boolean onKeyUp(int keyCode, KeyEvent event)\n     @Override\n     public boolean onKeyDown(int keyCode, KeyEvent event)\n     {\n-        //Get whatever has focus!\n-        View childView = appView.getFocusedChild();\n         //Determine if the focus is on the current view or not\n-        if (childView != null && (keyCode == KeyEvent.KEYCODE_BACK || keyCode == KeyEvent.KEYCODE_MENU)) {\n+        if (appView != null && appView.getFocusedChild() != null && (keyCode == KeyEvent.KEYCODE_BACK || keyCode == KeyEvent.KEYCODE_MENU)) {\n                     return appView.onKeyDown(keyCode, event);\n         }\n         else", "filename": "framework/src/org/apache/cordova/CordovaActivity.java"}], "repo": "cordova-android"}, {"commit": "https://github.com/apache/cordova-android/commit/403297d96795882de5f8103e51fbd2c38e758846", "parent": "https://github.com/apache/cordova-android/commit/abba254a380818142c2ea8d42e29ab5530b24052", "message": "CB-3523: Fix NPE on app restart with outstanding callback", "bug_id": "cordova-android_4", "file": [{"additions": 6, "raw_url": "https://github.com/apache/cordova-android/raw/403297d96795882de5f8103e51fbd2c38e758846/framework/src/org/apache/cordova/CordovaActivity.java", "blob_url": "https://github.com/apache/cordova-android/blob/403297d96795882de5f8103e51fbd2c38e758846/framework/src/org/apache/cordova/CordovaActivity.java", "sha": "4042b6be65dfaef956a9d242c663830913a42c91", "changes": 17, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/cordova-android/contents/framework/src/org/apache/cordova/CordovaActivity.java?ref=403297d96795882de5f8103e51fbd2c38e758846", "patch": "@@ -856,18 +856,13 @@ protected void onActivityResult(int requestCode, int resultCode, Intent intent)\n             mUploadMessage = null;\n         }\n         CordovaPlugin callback = this.activityResultCallback;\n-        if(callback == null)\n-        {\n-            if(initCallbackClass != null)\n-            {\n-                this.activityResultCallback = appView.pluginManager.getPlugin(initCallbackClass);\n-                callback = activityResultCallback;\n-                LOG.d(TAG, \"We have a callback to send this result to\");\n-                callback.onActivityResult(requestCode, resultCode, intent);\n-            }\n+        if(callback == null && initCallbackClass != null) {\n+            // The application was restarted, but had defined an initial callback\n+            // before being shut down.\n+            this.activityResultCallback = appView.pluginManager.getPlugin(initCallbackClass);\n+            callback = this.activityResultCallback;\n         }\n-        else\n-        {\n+        if(callback != null) {\n             LOG.d(TAG, \"We have a callback to send this result to\");\n             callback.onActivityResult(requestCode, resultCode, intent);\n         }", "filename": "framework/src/org/apache/cordova/CordovaActivity.java"}], "repo": "cordova-android"}, {"commit": "https://github.com/apache/cordova-android/commit/73c7994cd15264349f64fe82cb83e61558ebbd53", "parent": "https://github.com/apache/cordova-android/commit/0c740909534b355cd5628380689544c4f2c2a8b8", "message": "Fix NPE in InAppBrowser.\n\nWhen cordova.getActivity().getIntent().getExtras() == null.", "bug_id": "cordova-android_5", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cordova-android/raw/73c7994cd15264349f64fe82cb83e61558ebbd53/framework/src/org/apache/cordova/InAppBrowser.java", "blob_url": "https://github.com/apache/cordova-android/blob/73c7994cd15264349f64fe82cb83e61558ebbd53/framework/src/org/apache/cordova/InAppBrowser.java", "sha": "0d5d4965dff7c05a55d55cd641a0954e64a27ec2", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cordova-android/contents/framework/src/org/apache/cordova/InAppBrowser.java?ref=73c7994cd15264349f64fe82cb83e61558ebbd53", "patch": "@@ -460,7 +460,7 @@ public void onClick(View v) {\n                 \n                 //Toggle whether this is enabled or not!\n                 Bundle appSettings = cordova.getActivity().getIntent().getExtras();\n-                boolean enableDatabase = appSettings.getBoolean(\"InAppBrowserStorageEnabled\", true);\n+                boolean enableDatabase = appSettings == null ? true : appSettings.getBoolean(\"InAppBrowserStorageEnabled\", true);\n                 if(enableDatabase)\n                 {\n                     String databasePath = cordova.getActivity().getApplicationContext().getDir(\"inAppBrowserDB\", Context.MODE_PRIVATE).getPath();", "filename": "framework/src/org/apache/cordova/InAppBrowser.java"}], "repo": "cordova-android"}, {"commit": "https://github.com/apache/cordova-android/commit/f93c438067a03a181069baf7228b74659bfc1bf7", "parent": "https://github.com/apache/cordova-android/commit/e1d608443ad81168b91282f7956de4ed52e0c1fa", "message": "CB-1860: NPE in onReceivedError with non local errorUrl", "bug_id": "cordova-android_6", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cordova-android/raw/f93c438067a03a181069baf7228b74659bfc1bf7/framework/src/org/apache/cordova/DroidGap.java", "blob_url": "https://github.com/apache/cordova-android/blob/f93c438067a03a181069baf7228b74659bfc1bf7/framework/src/org/apache/cordova/DroidGap.java", "sha": "7d9b6d12a853d9966c5616e497df842b1cf84fcd", "changes": 8, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/cordova-android/contents/framework/src/org/apache/cordova/DroidGap.java?ref=f93c438067a03a181069baf7228b74659bfc1bf7", "patch": "@@ -40,7 +40,6 @@ Licensed to the Apache Software Foundation (ASF) under one\n import android.media.AudioManager;\n import android.os.Bundle;\n import android.os.Handler;\n-import android.util.Log;\n import android.view.Display;\n import android.view.KeyEvent;\n import android.view.Menu;\n@@ -156,11 +155,6 @@ Licensed to the Apache Software Foundation (ASF) under one\n     private static int ACTIVITY_EXITING = 2;\n     private int activityState = 0;  // 0=starting, 1=running (after 1st resume), 2=shutting down\n \n-    // The base of the initial URL for our app.\n-    // Does not include file name.  Ends with /\n-    // ie http://server/path/\n-    String baseUrl = null;\n-\n     // Plugin to call when activity result is received\n     protected CordovaPlugin activityResultCallback = null;\n     protected boolean activityResultKeepRunning;\n@@ -830,7 +824,7 @@ public void onReceivedError(final int errorCode, final String description, final\n \n         // If errorUrl specified, then load it\n         final String errorUrl = me.getStringProperty(\"errorUrl\", null);\n-        if ((errorUrl != null) && (errorUrl.startsWith(\"file://\") || errorUrl.indexOf(me.baseUrl) == 0 || this.appView.isUrlWhiteListed(errorUrl)) && (!failingUrl.equals(errorUrl))) {\n+        if ((errorUrl != null) && (errorUrl.startsWith(\"file://\") || this.appView.isUrlWhiteListed(errorUrl)) && (!failingUrl.equals(errorUrl))) {\n \n             // Load URL on UI thread\n             me.runOnUiThread(new Runnable() {", "filename": "framework/src/org/apache/cordova/DroidGap.java"}], "repo": "cordova-android"}, {"commit": "https://github.com/apache/cordova-android/commit/6ca6d88bff783198aaa92979e88805b73dbb1832", "parent": "https://github.com/apache/cordova-android/commit/65a397fb630a63ec6be8d3a020482a5abfff7fcb", "message": "Fix NPE when using LOCATION_CHANGE exec bridge.", "bug_id": "cordova-android_7", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cordova-android/raw/6ca6d88bff783198aaa92979e88805b73dbb1832/framework/src/org/apache/cordova/CordovaWebViewClient.java", "blob_url": "https://github.com/apache/cordova-android/blob/6ca6d88bff783198aaa92979e88805b73dbb1832/framework/src/org/apache/cordova/CordovaWebViewClient.java", "sha": "75d3590c252df8e98697321b8be39311948f6dfd", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cordova-android/contents/framework/src/org/apache/cordova/CordovaWebViewClient.java?ref=6ca6d88bff783198aaa92979e88805b73dbb1832", "patch": "@@ -111,8 +111,8 @@ private void handleExecUrl(String url) {\n \t\tString callbackId = url.substring(idx3 + 1, idx4);\n \t\tString jsonArgs   = url.substring(idx4 + 1);\n         PluginResult r = appView.pluginManager.exec(service, action, callbackId, jsonArgs, true /* async */);\n-        String callbackString = r.toCallbackString(callbackId);\n         if (r != null) {\n+            String callbackString = r.toCallbackString(callbackId);\n             appView.sendJavascript(callbackString);\n         }\n \t}    ", "filename": "framework/src/org/apache/cordova/CordovaWebViewClient.java"}], "repo": "cordova-android"}, {"commit": "https://github.com/apache/cordova-android/commit/62c081dc85e297581811db2cacdf73eb5d49ea24", "parent": "https://github.com/apache/cordova-android/commit/023ad9ddf8b5a69ffe7f15fbcb83719aae77ffcc", "message": "CB-8592 Fix NPE if lifecycle events reach CordovaWebView before `init()` has been called", "bug_id": "cordova-android_8", "file": [{"additions": 15, "raw_url": "https://github.com/apache/cordova-android/raw/62c081dc85e297581811db2cacdf73eb5d49ea24/framework/src/org/apache/cordova/CordovaWebViewImpl.java", "blob_url": "https://github.com/apache/cordova-android/blob/62c081dc85e297581811db2cacdf73eb5d49ea24/framework/src/org/apache/cordova/CordovaWebViewImpl.java", "sha": "3b5aecd9400d624605dda65c787908cdc62fb566", "changes": 34, "status": "modified", "deletions": 19, "contents_url": "https://api.github.com/repos/apache/cordova-android/contents/framework/src/org/apache/cordova/CordovaWebViewImpl.java?ref=62c081dc85e297581811db2cacdf73eb5d49ea24", "patch": "@@ -423,14 +423,12 @@ public void onNewIntent(Intent intent) {\n     }\n     @Override\n     public void handlePause(boolean keepRunning) {\n+        if (!isInitialized()) {\n+            return;\n+        }\n         LOG.d(TAG, \"Handle the pause\");\n-        // Send pause event to JavaScript\n         sendJavascriptEvent(\"pause\");\n-\n-        // Forward to plugins\n-        if (pluginManager != null) {\n-            pluginManager.onPause(keepRunning);\n-        }\n+        pluginManager.onPause(keepRunning);\n \n         // If app doesn't want to run in background\n         if (!keepRunning) {\n@@ -439,29 +437,27 @@ public void handlePause(boolean keepRunning) {\n         }\n     }\n     @Override\n-    public void handleResume(boolean keepRunning)\n-    {\n+    public void handleResume(boolean keepRunning) {\n+        if (!isInitialized()) {\n+            return;\n+        }\n+\n         // Resume JavaScript timers. This affects all webviews within the app!\n         engine.setPaused(false);\n-\n         sendJavascriptEvent(\"resume\");\n-\n-        // Forward to plugins\n-        if (this.pluginManager != null) {\n-            this.pluginManager.onResume(keepRunning);\n-        }\n+        this.pluginManager.onResume(keepRunning);\n     }\n \n     @Override\n-    public void handleDestroy()\n-    {\n+    public void handleDestroy() {\n+        if (!isInitialized()) {\n+            return;\n+        }\n         // Cancel pending timeout timer.\n         loadUrlTimeout++;\n \n         // Forward to plugins\n-        if (this.pluginManager != null) {\n-            this.pluginManager.onDestroy();\n-        }\n+        this.pluginManager.onDestroy();\n \n         // Load blank page so that JavaScript onunload is called\n         this.loadUrl(\"about:blank\");", "filename": "framework/src/org/apache/cordova/CordovaWebViewImpl.java"}], "repo": "cordova-android"}, {"commit": "https://github.com/apache/cordova-android/commit/b297fe6f597358713fb2dbf70253d54552f25283", "parent": "https://github.com/apache/cordova-android/commit/e575212c49da72ac3abc238bfd968289e2154a4d", "message": "Fix a NPE in GeoBroker when there is no previous location.", "bug_id": "cordova-android_9", "file": [{"additions": 1, "raw_url": "https://github.com/apache/cordova-android/raw/b297fe6f597358713fb2dbf70253d54552f25283/framework/src/org/apache/cordova/GeoBroker.java", "blob_url": "https://github.com/apache/cordova-android/blob/b297fe6f597358713fb2dbf70253d54552f25283/framework/src/org/apache/cordova/GeoBroker.java", "sha": "9b0838b8ba1cdd4104b6f2e1877fa83968a5a50c", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/cordova-android/contents/framework/src/org/apache/cordova/GeoBroker.java?ref=b297fe6f597358713fb2dbf70253d54552f25283", "patch": "@@ -75,7 +75,7 @@ public PluginResult execute(String action, JSONArray args, String callbackId) {\n \t                int maximumAge = args.getInt(1);\n \t                Location last = this.locationManager.getLastKnownLocation((enableHighAccuracy ? LocationManager.GPS_PROVIDER : LocationManager.NETWORK_PROVIDER));\n \t                // Check if we can use lastKnownLocation to get a quick reading and use less battery\n-\t                if ((System.currentTimeMillis() - last.getTime()) <= maximumAge) {\n+\t                if (last != null && (System.currentTimeMillis() - last.getTime()) <= maximumAge) {\n \t                    result = new PluginResult(PluginResult.Status.OK, this.returnLocationJSON(last));\n \t                } else {\n \t                    this.getCurrentLocation(callbackId, enableHighAccuracy);", "filename": "framework/src/org/apache/cordova/GeoBroker.java"}], "repo": "cordova-android"}, {"commit": "https://github.com/apache/cordova-android/commit/5289d569b06437b5b6fdd536b693f1a2d04ef224", "parent": "https://github.com/apache/cordova-android/commit/6f873ff6b53a3b85d81183c5e1c9e8c82803242c", "message": "Fix NPE caused by NetworkManager sending update before JS is ready.\n\nThis was happening for me when the device has been sleeping long\nenough to turn its networking off, and I start an app via adb.", "bug_id": "cordova-android_10", "file": [{"additions": 4, "raw_url": "https://github.com/apache/cordova-android/raw/5289d569b06437b5b6fdd536b693f1a2d04ef224/framework/src/org/apache/cordova/NativeToJsMessageQueue.java", "blob_url": "https://github.com/apache/cordova-android/blob/5289d569b06437b5b6fdd536b693f1a2d04ef224/framework/src/org/apache/cordova/NativeToJsMessageQueue.java", "sha": "54c6eed320fb56fd64edee1b7400fdf09d5eceac", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/cordova-android/contents/framework/src/org/apache/cordova/NativeToJsMessageQueue.java?ref=5289d569b06437b5b6fdd536b693f1a2d04ef224", "patch": "@@ -219,6 +219,10 @@ public void addJavaScript(String statement) {\n      * Add a JavaScript statement to the list.\n      */\n     public void addPluginResult(PluginResult result, String callbackId) {\n+        if (callbackId == null) {\n+            Log.e(LOG_TAG, \"Got plugin result with no callbackId\", new Throwable());\n+            return;\n+        }\n         // Don't send anything if there is no result and there is no need to\n         // clear the callbacks.\n         boolean noResult = result.getStatus() == PluginResult.Status.NO_RESULT.ordinal();", "filename": "framework/src/org/apache/cordova/NativeToJsMessageQueue.java"}, {"additions": 5, "raw_url": "https://github.com/apache/cordova-android/raw/5289d569b06437b5b6fdd536b693f1a2d04ef224/framework/src/org/apache/cordova/NetworkManager.java", "blob_url": "https://github.com/apache/cordova-android/blob/5289d569b06437b5b6fdd536b693f1a2d04ef224/framework/src/org/apache/cordova/NetworkManager.java", "sha": "f473abec5f80f4278393095cfece7685da99b37b", "changes": 8, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/cordova-android/contents/framework/src/org/apache/cordova/NetworkManager.java?ref=5289d569b06437b5b6fdd536b693f1a2d04ef224", "patch": "@@ -206,9 +206,11 @@ private String getConnectionInfo(NetworkInfo info) {\n      * @param connection the network info to set as navigator.connection\n      */\n     private void sendUpdate(String type) {\n-        PluginResult result = new PluginResult(PluginResult.Status.OK, type);\n-        result.setKeepCallback(true);\n-        this.success(result, this.connectionCallbackId);\n+        if (connectionCallbackId != null) {\n+            PluginResult result = new PluginResult(PluginResult.Status.OK, type);\n+            result.setKeepCallback(true);\n+            this.success(result, this.connectionCallbackId);\n+        }\n \n         webView.postMessage(\"networkconnection\", type);\n     }", "filename": "framework/src/org/apache/cordova/NetworkManager.java"}], "repo": "cordova-android"}, {"commit": "https://github.com/apache/cordova-android/commit/cb192056f82e051a05bbda8b09ac01a118c39838", "parent": "https://github.com/apache/cordova-android/commit/892f96e30590ba921cbc3930d4de53e15dbf56ff", "message": "CB-2458: gracefully exit with back button\nIf users do extra initialization, we can get NPEs when hitting the back\nbutton before loadUrl() has been called.\n-Null fenced code in startOfHistory() that gave us an NPE when hitting\nBack button with useBrowserHistory=true\n-Call finish() in Back button code when no history since with\nuseBrowserHistory=true it would just hang while the app inits\n-Call loadUrlIntoView() first in handleDestory() since with\nuseBrowserHistory=false, the default behavior would try to use the baseUrl\nwhich is null", "bug_id": "cordova-android_11", "file": [{"additions": 13, "raw_url": "https://github.com/apache/cordova-android/raw/cb192056f82e051a05bbda8b09ac01a118c39838/framework/src/org/apache/cordova/CordovaWebView.java", "blob_url": "https://github.com/apache/cordova-android/blob/cb192056f82e051a05bbda8b09ac01a118c39838/framework/src/org/apache/cordova/CordovaWebView.java", "sha": "4731adb03ee09c10c6275bb9dd2c8cba9d6a93f7", "changes": 20, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/cordova-android/contents/framework/src/org/apache/cordova/CordovaWebView.java?ref=cb192056f82e051a05bbda8b09ac01a118c39838", "patch": "@@ -755,7 +755,9 @@ public boolean onKeyUp(int keyCode, KeyEvent event)\n                     // If not, then invoke default behaviour\n                     else {\n                         //this.activityState = ACTIVITY_EXITING;\n-                        return false;\n+                    \t//return false;\n+                    \t// If they hit back button when app is initializing, app should exit instead of hang until initilazation (CB2-458)\n+                    \tthis.cordova.getActivity().finish();\n                     }\n                 }\n             }\n@@ -853,7 +855,8 @@ public void handleResume(boolean keepRunning, boolean activityResultKeepRunning)\n     public void handleDestroy()\n     {\n         // Send destroy event to JavaScript\n-        this.loadUrl(\"javascript:try{cordova.require('cordova/channel').onDestroy.fire();}catch(e){console.log('exception firing destroy event from native');};\");\n+    \t// Since baseUrl is set in loadUrlIntoView, if user hit Back button before loadUrl was called, we'll get an NPE on baseUrl (CB-2458)\n+        this.loadUrlIntoView(\"javascript:try{cordova.require('cordova/channel').onDestroy.fire();}catch(e){console.log('exception firing destroy event from native');};\");\n \n         // Load blank page so that JavaScript onunload is called\n         this.loadUrl(\"about:blank\");\n@@ -916,11 +919,14 @@ public boolean startOfHistory()\n     {\n         WebBackForwardList currentList = this.copyBackForwardList();\n         WebHistoryItem item = currentList.getItemAtIndex(0);\n-        String url = item.getUrl();\n-        String currentUrl = this.getUrl();\n-        LOG.d(TAG, \"The current URL is: \" + currentUrl);\n-        LOG.d(TAG, \"The URL at item 0 is:\" + url);\n-        return currentUrl.equals(url);\n+        if( item!=null){\t// Null-fence in case they haven't called loadUrl yet (CB-2458)\n+\t        String url = item.getUrl();\n+\t        String currentUrl = this.getUrl();\n+\t        LOG.d(TAG, \"The current URL is: \" + currentUrl);\n+\t        LOG.d(TAG, \"The URL at item 0 is:\" + url);\n+\t        return currentUrl.equals(url);\n+        }\n+        return false;\n     }\n \n     public void showCustomView(View view, WebChromeClient.CustomViewCallback callback) {", "filename": "framework/src/org/apache/cordova/CordovaWebView.java"}], "repo": "cordova-android"}, {"commit": "https://github.com/apache/cordova-android/commit/887f7540148c24fb11836038dd9dd403769e968d", "parent": "https://github.com/apache/cordova-android/commit/674015460f008f2289899616dc5231c1e06ae7ed", "message": "Hidden NPE fixed, which appeared when someone pass null as arguments\n(for such SQL as e.g. CREATE TABLE).\n\nIt is especially important when work with dome 3d party persistemce\nlibraries, like e.g. http://github.com/zefhemel/persistencejs which\npasses these nulls.", "bug_id": "cordova-android_12", "file": [{"additions": 91, "raw_url": "https://github.com/apache/cordova-android/raw/887f7540148c24fb11836038dd9dd403769e968d/framework/src/com/phonegap/Storage.java", "blob_url": "https://github.com/apache/cordova-android/blob/887f7540148c24fb11836038dd9dd403769e968d/framework/src/com/phonegap/Storage.java", "sha": "67fc6f3e6104904c97e0eacfdfb114f91cfd9153", "changes": 158, "status": "modified", "deletions": 67, "contents_url": "https://api.github.com/repos/apache/cordova-android/contents/framework/src/com/phonegap/Storage.java?ref=887f7540148c24fb11836038dd9dd403769e968d", "patch": "@@ -16,15 +16,15 @@\n import android.database.sqlite.*;\n \n /**\n- * This class implements the HTML5 database support for Android 1.X devices.  \n- * It is not used for Android 2.X, since HTML5 database is built in to the browser.\n+ * This class implements the HTML5 database support for Android 1.X devices. It\n+ * is not used for Android 2.X, since HTML5 database is built in to the browser.\n  */\n public class Storage extends Plugin {\n-\t\n-\tSQLiteDatabase myDb = null;\t\t// Database object\n-\tString path = null;\t\t\t\t// Database path\n-\tString dbName = null;\t\t\t// Database name\n-\t\n+\n+\tSQLiteDatabase myDb = null; // Database object\n+\tString path = null; // Database path\n+\tString dbName = null; // Database name\n+\n \t/**\n \t * Constructor.\n \t */\n@@ -34,29 +34,37 @@ public Storage() {\n \t/**\n \t * Executes the request and returns PluginResult.\n \t * \n-\t * @param action \t\tThe action to execute.\n-\t * @param args \t\t\tJSONArry of arguments for the plugin.\n-\t * @param callbackId\tThe callback id used when calling back into JavaScript.\n-\t * @return \t\t\t\tA PluginResult object with a status and message.\n+\t * @param action\n+\t *            The action to execute.\n+\t * @param args\n+\t *            JSONArry of arguments for the plugin.\n+\t * @param callbackId\n+\t *            The callback id used when calling back into JavaScript.\n+\t * @return A PluginResult object with a status and message.\n \t */\n \tpublic PluginResult execute(String action, JSONArray args, String callbackId) {\n \t\tPluginResult.Status status = PluginResult.Status.OK;\n-\t\tString result = \"\";\t\t\n-\t\t\n+\t\tString result = \"\";\n+\n \t\ttry {\n-\t\t\t// TODO: Do we want to allow a user to do this, since they could get to other app databases?\n+\t\t\t// TODO: Do we want to allow a user to do this, since they could get\n+\t\t\t// to other app databases?\n \t\t\tif (action.equals(\"setStorage\")) {\n \t\t\t\tthis.setStorage(args.getString(0));\n-\t\t\t}\n-\t\t\telse if (action.equals(\"openDatabase\")) {\n-\t\t\t\tthis.openDatabase(args.getString(0), args.getString(1), args.getString(2), args.getLong(3));\n-\t\t\t}\n-\t\t\telse if (action.equals(\"executeSql\")) {\n-\t\t\t\tJSONArray a = args.getJSONArray(1);\n-\t\t\t\tint len = a.length();\n-\t\t\t\tString[] s = new String[len];\n-\t\t\t\tfor (int i=0; i<len; i++) {\n-\t\t\t\t\ts[i] = a.getString(i);\n+\t\t\t} else if (action.equals(\"openDatabase\")) {\n+\t\t\t\tthis.openDatabase(args.getString(0), args.getString(1),\n+\t\t\t\t\t\targs.getString(2), args.getLong(3));\n+\t\t\t} else if (action.equals(\"executeSql\")) {\n+\t\t\t\tString[] s = null;\n+\t\t\t\tif (args.isNull(1)) {\n+\t\t\t\t\ts = new String[0];\n+\t\t\t\t} else {\n+\t\t\t\t\tJSONArray a = args.getJSONArray(1);\n+\t\t\t\t\tint len = a.length();\n+\t\t\t\t\ts = new String[len];\n+\t\t\t\t\tfor (int i = 0; i < len; i++) {\n+\t\t\t\t\t\ts[i] = a.getString(i);\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tthis.executeSql(args.getString(0), s, args.getString(2));\n \t\t\t}\n@@ -67,15 +75,17 @@ else if (action.equals(\"executeSql\")) {\n \t}\n \n \t/**\n-\t * Identifies if action to be executed returns a value and should be run synchronously.\n+\t * Identifies if action to be executed returns a value and should be run\n+\t * synchronously.\n \t * \n-\t * @param action\tThe action to execute\n-\t * @return\t\t\tT=returns value\n+\t * @param action\n+\t *            The action to execute\n+\t * @return T=returns value\n \t */\n \tpublic boolean isSynch(String action) {\n \t\treturn false;\n \t}\n-\t\n+\n \t/**\n \t * Clean up and close database.\n \t */\n@@ -87,88 +97,101 @@ public void onDestroy() {\n \t\t}\n \t}\n \n-    //--------------------------------------------------------------------------\n-    // LOCAL METHODS\n-    //--------------------------------------------------------------------------\n+\t// --------------------------------------------------------------------------\n+\t// LOCAL METHODS\n+\t// --------------------------------------------------------------------------\n \n \t/**\n-\t * Set the application package for the database.  Each application saves its \n-\t * database files in a directory with the application package as part of the file name.\n+\t * Set the application package for the database. Each application saves its\n+\t * database files in a directory with the application package as part of the\n+\t * file name.\n \t * \n \t * For example, application \"com.phonegap.demo.Demo\" would save its database\n \t * files in \"/data/data/com.phonegap.demo/databases/\" directory.\n \t * \n-\t * @param appPackage\t\t\tThe application package.\n+\t * @param appPackage\n+\t *            The application package.\n \t */\n \tpublic void setStorage(String appPackage) {\n \t\tthis.path = \"/data/data/\" + appPackage + \"/databases/\";\n \t}\n-\t\n+\n \t/**\n \t * Open database.\n \t * \n-\t * @param db\t\t\t\t\tThe name of the database\n-\t * @param version\t\t\t\tThe version\n-\t * @param display_name\t\t\tThe display name\n-\t * @param size\t\t\t\t\tThe size in bytes\n+\t * @param db\n+\t *            The name of the database\n+\t * @param version\n+\t *            The version\n+\t * @param display_name\n+\t *            The display name\n+\t * @param size\n+\t *            The size in bytes\n \t */\n-\tpublic void openDatabase(String db, String version, String display_name, long size)\t{\n-\t\t\n+\tpublic void openDatabase(String db, String version, String display_name,\n+\t\t\tlong size) {\n+\n \t\t// If database is open, then close it\n \t\tif (this.myDb != null) {\n \t\t\tthis.myDb.close();\n \t\t}\n \n \t\t// If no database path, generate from application package\n \t\tif (this.path == null) {\n-\t        Package pack = this.ctx.getClass().getPackage();\n-\t        String appPackage = pack.getName();\n-\t        this.setStorage(appPackage);\n+\t\t\tPackage pack = this.ctx.getClass().getPackage();\n+\t\t\tString appPackage = pack.getName();\n+\t\t\tthis.setStorage(appPackage);\n \t\t}\n-\t        \n+\n \t\tthis.dbName = this.path + db + \".db\";\n \t\tthis.myDb = SQLiteDatabase.openOrCreateDatabase(this.dbName, null);\n \t}\n-\t\n+\n \t/**\n \t * Execute SQL statement.\n \t * \n-\t * @param query\t\t\t\tThe SQL query\n-\t * @param params\t\t\tParameters for the query\n-\t * @param tx_id\t\t\t\tTransaction id\n+\t * @param query\n+\t *            The SQL query\n+\t * @param params\n+\t *            Parameters for the query\n+\t * @param tx_id\n+\t *            Transaction id\n \t */\n \tpublic void executeSql(String query, String[] params, String tx_id) {\n \t\ttry {\n \t\t\tCursor myCursor = this.myDb.rawQuery(query, params);\n \t\t\tthis.processResults(myCursor, tx_id);\n \t\t\tmyCursor.close();\n-\t\t} \n-\t\tcatch (SQLiteException ex) {\n+\t\t} catch (SQLiteException ex) {\n \t\t\tex.printStackTrace();\n-\t\t\tSystem.out.println(\"Storage.executeSql(): Error=\" +  ex.getMessage());\n-\t\t\t\n+\t\t\tSystem.out\n+\t\t\t\t\t.println(\"Storage.executeSql(): Error=\" + ex.getMessage());\n+\n \t\t\t// Send error message back to JavaScript\n-\t\t\tthis.sendJavascript(\"droiddb.fail('\" + ex.getMessage() + \"','\" + tx_id + \"');\");\n+\t\t\tthis.sendJavascript(\"droiddb.fail('\" + ex.getMessage() + \"','\"\n+\t\t\t\t\t+ tx_id + \"');\");\n \t\t}\n \t}\n-\t\n+\n \t/**\n \t * Process query results.\n \t * \n-\t * @param cur\t\t\t\tCursor into query results\n-\t * @param tx_id\t\t\t\tTransaction id\n+\t * @param cur\n+\t *            Cursor into query results\n+\t * @param tx_id\n+\t *            Transaction id\n \t */\n \tpublic void processResults(Cursor cur, String tx_id) {\n-\t\t\n+\n \t\tString result = \"[]\";\n \t\t// If query result has rows\n-\t\t\n+\n \t\tif (cur.moveToFirst()) {\n \t\t\tJSONArray fullresult = new JSONArray();\n \t\t\tString key = \"\";\n \t\t\tString value = \"\";\n \t\t\tint colCount = cur.getColumnCount();\n-\t\t\t\n+\n \t\t\t// Build up JSON result object for each row\n \t\t\tdo {\n \t\t\t\tJSONObject row = new JSONObject();\n@@ -179,19 +202,20 @@ public void processResults(Cursor cur, String tx_id) {\n \t\t\t\t\t\trow.put(key, value);\n \t\t\t\t\t}\n \t\t\t\t\tfullresult.put(row);\n-\t\t\t\t\t\n+\n \t\t\t\t} catch (JSONException e) {\n \t\t\t\t\te.printStackTrace();\n \t\t\t\t}\n-\t\t\t\t\n+\n \t\t\t} while (cur.moveToNext());\n-\t\t\t\n+\n \t\t\tresult = fullresult.toString();\n \t\t}\n-\t\t\n+\n \t\t// Let JavaScript know that there are no more rows\n-\t\tthis.sendJavascript(\"droiddb.completeQuery('\" + tx_id + \"', \"+result+\");\");\n-\t\t\n+\t\tthis.sendJavascript(\"droiddb.completeQuery('\" + tx_id + \"', \" + result\n+\t\t\t\t+ \");\");\n+\n \t}\n-\t\t\n+\n }\n\\ No newline at end of file", "filename": "framework/src/com/phonegap/Storage.java"}], "repo": "cordova-android"}]
