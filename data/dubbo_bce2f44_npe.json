[
    {
        "repo": "dubbo",
        "commit": "https://github.com/apache/dubbo/commit/bce2f44ae3854cdc540556f7181af78ba53687d8",
        "bug_id": "dubbo_bce2f44",
        "message": "Enhancement and Bugfix in 2.7.1 ( Part 1 ) (#3670)\n\n* Polish /apache/incubator-dubbo#3429 : Fix The NPE issue\r\n\r\n* Polish /apache/incubator-dubbo#3615 : SpringStatusChecker execute errors on non-XML Spring configuration\r\n\r\n* Polish /apache/incubator-dubbo#3193 : Change the default behavior of @EnableDubboConfig.multiple()",
        "parent": "https://github.com/apache/dubbo/commit/cb11ce0b77983fe26d760ca39c5333747202a366",
        "patched_files": [
            "EnableDubbo.java",
            "DubboConfigConfigurationRegistrar.java",
            "DemoServiceImpl.java",
            "ReferenceAnnotationBeanPostProcessor.java",
            "ReferenceBeanBuilder.java",
            "AnnotationPropertyValuesAdapter.java",
            "SpringStatusChecker.java",
            "EnableDubboConfig.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 13,
                "raw_url": "https://github.com/apache/dubbo/raw/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java?ref=bce2f44ae3854cdc540556f7181af78ba53687d8",
                "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java",
                "deletions": 1,
                "sha": "e02c1e10cc52d8e5a36c76b0db4952c2910868f5",
                "blob_url": "https://github.com/apache/dubbo/blob/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java",
                "patch": "@@ -32,6 +32,7 @@\n \n import java.lang.reflect.Field;\n import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.lang.reflect.Proxy;\n import java.util.Collection;\n@@ -155,7 +156,18 @@ private ReferenceBeanInvocationHandler(ReferenceBean referenceBean) {\n \n         @Override\n         public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n-            return method.invoke(bean, args);\n+            Object result = null;\n+            try {\n+                if (bean == null) { // If the bean is not initialized, invoke init()\n+                    // issue: https://github.com/apache/incubator-dubbo/issues/3429\n+                    init();\n+                }\n+                result = method.invoke(bean, args);\n+            } catch (InvocationTargetException e) {\n+                // re-throws the actual Exception.\n+                throw e.getTargetException();\n+            }\n+            return result;\n         }\n \n         private void init() {",
                "changes": 14
            },
            {
                "status": "modified",
                "additions": 4,
                "raw_url": "https://github.com/apache/dubbo/raw/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfigurationRegistrar.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfigurationRegistrar.java?ref=bce2f44ae3854cdc540556f7181af78ba53687d8",
                "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfigurationRegistrar.java",
                "deletions": 3,
                "sha": "d01dd398ee0d5e697d1ecf3acd50d5e61b634375",
                "blob_url": "https://github.com/apache/dubbo/blob/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfigurationRegistrar.java",
                "patch": "@@ -44,10 +44,11 @@ public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, B\n \n         boolean multiple = attributes.getBoolean(\"multiple\");\n \n-        if (multiple) {\n+        // Single Config Bindings\n+        registerBeans(registry, DubboConfigConfiguration.Single.class);\n+\n+        if (multiple) { // Since 2.6.6 https://github.com/apache/incubator-dubbo/issues/3193\n             registerBeans(registry, DubboConfigConfiguration.Multiple.class);\n-        } else {\n-            registerBeans(registry, DubboConfigConfiguration.Single.class);\n         }\n     }\n ",
                "changes": 7
            },
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/dubbo/raw/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubbo.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubbo.java?ref=bce2f44ae3854cdc540556f7181af78ba53687d8",
                "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubbo.java",
                "deletions": 1,
                "sha": "706e288597eca642851f00dc59bcfabb0fc1f3cf",
                "blob_url": "https://github.com/apache/dubbo/blob/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubbo.java",
                "patch": "@@ -76,6 +76,6 @@\n      * @see EnableDubboConfig#multiple()\n      */\n     @AliasFor(annotation = EnableDubboConfig.class, attribute = \"multiple\")\n-    boolean multipleConfig() default false;\n+    boolean multipleConfig() default true;\n \n }",
                "changes": 2
            },
            {
                "status": "modified",
                "additions": 2,
                "raw_url": "https://github.com/apache/dubbo/raw/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfig.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfig.java?ref=bce2f44ae3854cdc540556f7181af78ba53687d8",
                "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfig.java",
                "deletions": 2,
                "sha": "314f2e93d6bdef9d64c6ec9ddc30f1f06c96b7a1",
                "blob_url": "https://github.com/apache/dubbo/blob/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfig.java",
                "patch": "@@ -59,7 +59,7 @@\n  *\n  * @see EnableDubboConfigBinding\n  * @see DubboConfigConfiguration\n- * @see DubboConfigConfigurationSelector\n+ * @see DubboConfigConfigurationRegistrar\n  * @since 2.5.8\n  */\n @Target({ElementType.TYPE})\n@@ -75,6 +75,6 @@\n      * @return the default value is <code>false</code>\n      * @revised 2.5.9\n      */\n-    boolean multiple() default false;\n+    boolean multiple() default true;\n \n }",
                "changes": 4
            },
            {
                "status": "modified",
                "additions": 101,
                "raw_url": "https://github.com/apache/dubbo/raw/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/status/SpringStatusChecker.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/status/SpringStatusChecker.java?ref=bce2f44ae3854cdc540556f7181af78ba53687d8",
                "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/status/SpringStatusChecker.java",
                "deletions": 94,
                "sha": "63517c6e52af3185aebf975ce5652e7cdcbfc661",
                "blob_url": "https://github.com/apache/dubbo/blob/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/status/SpringStatusChecker.java",
                "patch": "@@ -1,94 +1,101 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one or more\r\n- * contributor license agreements.  See the NOTICE file distributed with\r\n- * this work for additional information regarding copyright ownership.\r\n- * The ASF licenses this file to You under the Apache License, Version 2.0\r\n- * (the \"License\"); you may not use this file except in compliance with\r\n- * the License.  You may obtain a copy of the License at\r\n- *\r\n- *     http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.apache.dubbo.config.spring.status;\r\n-\r\n-import org.apache.dubbo.common.extension.Activate;\r\n-import org.apache.dubbo.common.logger.Logger;\r\n-import org.apache.dubbo.common.logger.LoggerFactory;\r\n-import org.apache.dubbo.common.status.Status;\r\n-import org.apache.dubbo.common.status.StatusChecker;\r\n-import org.apache.dubbo.config.spring.extension.SpringExtensionFactory;\r\n-\r\n-import org.springframework.context.ApplicationContext;\r\n-import org.springframework.context.Lifecycle;\r\n-\r\n-import java.lang.reflect.Method;\r\n-\r\n-/**\r\n- * SpringStatusChecker\r\n- */\r\n-@Activate\r\n-public class SpringStatusChecker implements StatusChecker {\r\n-\r\n-    private static final Logger logger = LoggerFactory.getLogger(SpringStatusChecker.class);\r\n-\r\n-    @Override\r\n-    public Status check() {\r\n-        ApplicationContext context = null;\r\n-        for (ApplicationContext c : SpringExtensionFactory.getContexts()) {\r\n-            if (c != null) {\r\n-                context = c;\r\n-                break;\r\n-            }\r\n-        }\r\n-\r\n-        if (context == null) {\r\n-            return new Status(Status.Level.UNKNOWN);\r\n-        }\r\n-\r\n-        Status.Level level = Status.Level.OK;\r\n-        if (context instanceof Lifecycle) {\r\n-            if (((Lifecycle) context).isRunning()) {\r\n-                level = Status.Level.OK;\r\n-            } else {\r\n-                level = Status.Level.ERROR;\r\n-            }\r\n-        } else {\r\n-            level = Status.Level.UNKNOWN;\r\n-        }\r\n-        StringBuilder buf = new StringBuilder();\r\n-        try {\r\n-            Class<?> cls = context.getClass();\r\n-            Method method = null;\r\n-            while (cls != null && method == null) {\r\n-                try {\r\n-                    method = cls.getDeclaredMethod(\"getConfigLocations\", new Class<?>[0]);\r\n-                } catch (NoSuchMethodException t) {\r\n-                    cls = cls.getSuperclass();\r\n-                }\r\n-            }\r\n-            if (method != null) {\r\n-                if (!method.isAccessible()) {\r\n-                    method.setAccessible(true);\r\n-                }\r\n-                String[] configs = (String[]) method.invoke(context, new Object[0]);\r\n-                if (configs != null && configs.length > 0) {\r\n-                    for (String config : configs) {\r\n-                        if (buf.length() > 0) {\r\n-                            buf.append(\",\");\r\n-                        }\r\n-                        buf.append(config);\r\n-                    }\r\n-                }\r\n-            }\r\n-        } catch (Throwable t) {\r\n-            logger.warn(t.getMessage(), t);\r\n-        }\r\n-        return new Status(level, buf.toString());\r\n-    }\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.config.spring.status;\n+\n+import org.apache.dubbo.common.extension.Activate;\n+import org.apache.dubbo.common.logger.Logger;\n+import org.apache.dubbo.common.logger.LoggerFactory;\n+import org.apache.dubbo.common.status.Status;\n+import org.apache.dubbo.common.status.StatusChecker;\n+import org.apache.dubbo.config.spring.extension.SpringExtensionFactory;\n+\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.Lifecycle;\n+import org.springframework.web.context.support.GenericWebApplicationContext;\n+\n+import java.lang.reflect.Method;\n+\n+/**\n+ * SpringStatusChecker\n+ */\n+@Activate\n+public class SpringStatusChecker implements StatusChecker {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(SpringStatusChecker.class);\n+\n+    @Override\n+    public Status check() {\n+        ApplicationContext context = null;\n+        for (ApplicationContext c : SpringExtensionFactory.getContexts()) {\n+            // [Issue] SpringStatusChecker execute errors on non-XML Spring configuration\n+            // issue : https://github.com/apache/incubator-dubbo/issues/3615\n+            if(c instanceof GenericWebApplicationContext) { // ignore GenericXmlApplicationContext\n+                continue;\n+            }\n+\n+            if (c != null) {\n+                context = c;\n+                break;\n+            }\n+        }\n+\n+        if (context == null) {\n+            return new Status(Status.Level.UNKNOWN);\n+        }\n+\n+        Status.Level level = Status.Level.OK;\n+        if (context instanceof Lifecycle) {\n+            if (((Lifecycle) context).isRunning()) {\n+                level = Status.Level.OK;\n+            } else {\n+                level = Status.Level.ERROR;\n+            }\n+        } else {\n+            level = Status.Level.UNKNOWN;\n+        }\n+        StringBuilder buf = new StringBuilder();\n+        try {\n+            Class<?> cls = context.getClass();\n+            Method method = null;\n+            while (cls != null && method == null) {\n+                try {\n+                    method = cls.getDeclaredMethod(\"getConfigLocations\", new Class<?>[0]);\n+                } catch (NoSuchMethodException t) {\n+                    cls = cls.getSuperclass();\n+                }\n+            }\n+            if (method != null) {\n+                if (!method.isAccessible()) {\n+                    method.setAccessible(true);\n+                }\n+                String[] configs = (String[]) method.invoke(context, new Object[0]);\n+                if (configs != null && configs.length > 0) {\n+                    for (String config : configs) {\n+                        if (buf.length() > 0) {\n+                            buf.append(\",\");\n+                        }\n+                        buf.append(config);\n+                    }\n+                }\n+            }\n+        } catch (Throwable t) {\n+            logger.warn(t.getMessage(), t);\n+        }\n+        return new Status(level, buf.toString());\n+    }\n+\n+}",
                "changes": 195
            },
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/dubbo/raw/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/AnnotationPropertyValuesAdapterTest.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/AnnotationPropertyValuesAdapterTest.java?ref=bce2f44ae3854cdc540556f7181af78ba53687d8",
                "filename": "dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/AnnotationPropertyValuesAdapterTest.java",
                "deletions": 1,
                "sha": "5c0570e4ffc501219d0130f2fb7dd63e6af512f6",
                "blob_url": "https://github.com/apache/dubbo/blob/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/AnnotationPropertyValuesAdapterTest.java",
                "patch": "@@ -96,7 +96,7 @@ public String convert(String[] source) {\n         Assert.assertEquals(\"dubbo://localhost:12345\", referenceBean.getUrl());\n         Assert.assertEquals(\"client\", referenceBean.getClient());\n         Assert.assertEquals(true, referenceBean.isGeneric());\n-        Assert.assertEquals(true, referenceBean.isInjvm());\n+        Assert.assertNull(referenceBean.isInjvm());\n         Assert.assertEquals(false, referenceBean.isCheck());\n         Assert.assertEquals(true, referenceBean.isInit());\n         Assert.assertEquals(true, referenceBean.getLazy());",
                "changes": 2
            },
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/dubbo/raw/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceBeanBuilderTest.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceBeanBuilderTest.java?ref=bce2f44ae3854cdc540556f7181af78ba53687d8",
                "filename": "dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceBeanBuilderTest.java",
                "deletions": 1,
                "sha": "7dd12663d89286f568713a2eb595479778d91fca",
                "blob_url": "https://github.com/apache/dubbo/blob/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceBeanBuilderTest.java",
                "patch": "@@ -81,7 +81,7 @@ public void testBuild() throws Exception {\n         Assert.assertEquals(\"dubbo://localhost:12345\", referenceBean.getUrl());\n         Assert.assertEquals(\"client\", referenceBean.getClient());\n         Assert.assertEquals(true, referenceBean.isGeneric());\n-        Assert.assertEquals(true, referenceBean.isInjvm());\n+        Assert.assertNull(referenceBean.isInjvm());\n         Assert.assertEquals(false, referenceBean.isCheck());\n         Assert.assertEquals(null, referenceBean.isInit());\n         Assert.assertEquals(true, referenceBean.getLazy());",
                "changes": 2
            },
            {
                "status": "modified",
                "additions": 2,
                "raw_url": "https://github.com/apache/dubbo/raw/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfigTest.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfigTest.java?ref=bce2f44ae3854cdc540556f7181af78ba53687d8",
                "filename": "dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfigTest.java",
                "deletions": 3,
                "sha": "077c8b29e7e8d821858e9983b23b584f8c4d7454",
                "blob_url": "https://github.com/apache/dubbo/blob/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfigTest.java",
                "patch": "@@ -26,7 +26,6 @@\n \n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n-\n import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n import org.springframework.context.annotation.PropertySource;\n \n@@ -95,13 +94,13 @@ public void testMultiple() {\n \n     }\n \n-    @EnableDubboConfig(multiple = true)\n+    @EnableDubboConfig\n     @PropertySource(\"META-INF/config.properties\")\n     private static class TestMultipleConfig {\n \n     }\n \n-    @EnableDubboConfig\n+    @EnableDubboConfig(multiple = false)\n     @PropertySource(\"META-INF/config.properties\")\n     private static class TestConfig {\n ",
                "changes": 5
            },
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/dubbo/raw/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/provider/DemoServiceImpl.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/provider/DemoServiceImpl.java?ref=bce2f44ae3854cdc540556f7181af78ba53687d8",
                "filename": "dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/provider/DemoServiceImpl.java",
                "deletions": 6,
                "sha": "3aa1e86f4e6996b31a82c065d95c924e507c535b",
                "blob_url": "https://github.com/apache/dubbo/blob/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/provider/DemoServiceImpl.java",
                "patch": "@@ -45,11 +45,6 @@ public String sayName(String name) {\n \n     @Override\n     public Box getBox() {\n-        return new Box() {\n-            @Override\n-            public String getName() {\n-                return \"MyBox\";\n-            }\n-        };\n+        throw new UnsupportedOperationException(\"For Purposes!\");\n     }\n }",
                "changes": 7
            },
            {
                "status": "modified",
                "additions": 12,
                "raw_url": "https://github.com/apache/dubbo/raw/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/status/SpringStatusCheckerTest.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/status/SpringStatusCheckerTest.java?ref=bce2f44ae3854cdc540556f7181af78ba53687d8",
                "filename": "dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/status/SpringStatusCheckerTest.java",
                "deletions": 1,
                "sha": "e3386e2588de7ae6fbf90094b2b751d47c236369",
                "blob_url": "https://github.com/apache/dubbo/blob/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/status/SpringStatusCheckerTest.java",
                "patch": "@@ -20,14 +20,15 @@\n import org.apache.dubbo.config.spring.ServiceBean;\n import org.apache.dubbo.config.spring.extension.SpringExtensionFactory;\n \n+import org.junit.Assert;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-\n import org.mockito.Mock;\n import org.mockito.Mockito;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.Lifecycle;\n+import org.springframework.web.context.support.GenericWebApplicationContext;\n \n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n@@ -90,4 +91,14 @@ public void testWithoutLifeCycleRunning() {\n     interface ApplicationLifeCycle extends Lifecycle, ApplicationContext {\n         String[] getConfigLocations();\n     }\n+\n+    @Test\n+    public void testGenericWebApplicationContext() {\n+        SpringExtensionFactory.clearContexts();\n+        GenericWebApplicationContext context = new GenericWebApplicationContext();\n+        SpringExtensionFactory.addApplicationContext(context);\n+        SpringStatusChecker checker = new SpringStatusChecker();\n+        Status status = checker.check();\n+        Assert.assertEquals(Status.Level.UNKNOWN, status.getLevel());\n+    }\n }",
                "changes": 13
            }
        ],
        "unit_tests": [
            "SpringStatusCheckerTest.java",
            "EnableDubboConfigTest.java",
            "AnnotationPropertyValuesAdapterTest.java",
            "ReferenceBeanBuilderTest.java",
            "ReferenceAnnotationBeanPostProcessorTest.java",
            "EnableDubboTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/status/SpringStatusCheckerTest.java",
        "buggy_files": [
            "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubbo.java",
            "dubbo-compatible/src/main/java/com/alibaba/dubbo/config/spring/context/annotation/EnableDubbo.java",
            "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfigurationRegistrar.java",
            "dubbo-demo/dubbo-demo-api/dubbo-demo-api-provider/src/main/java/org/apache/dubbo/demo/provider/DemoServiceImpl.java",
            "dubbo-demo/dubbo-demo-xml/dubbo-demo-xml-provider/src/main/java/org/apache/dubbo/demo/provider/DemoServiceImpl.java",
            "dubbo-demo/dubbo-demo-annotation/dubbo-demo-annotation-provider/src/main/java/org/apache/dubbo/demo/provider/DemoServiceImpl.java",
            "dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/DemoServiceImpl.java",
            "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/provider/impl/DemoServiceImpl.java",
            "dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/impl/DemoServiceImpl.java",
            "dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/provider/DemoServiceImpl.java",
            "dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/context/annotation/provider/DemoServiceImpl.java",
            "dubbo-compatible/src/test/java/org/apache/dubbo/service/DemoServiceImpl.java",
            "dubbo-rpc/dubbo-rpc-rest/src/test/java/org/apache/dubbo/rpc/protocol/rest/DemoServiceImpl.java",
            "dubbo-rpc/dubbo-rpc-webservice/src/test/java/org/apache/dubbo/rpc/protocol/webservice/DemoServiceImpl.java",
            "dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/support/DemoServiceImpl.java",
            "dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/proxy/DemoServiceImpl.java",
            "dubbo-rpc/dubbo-rpc-injvm/src/test/java/org/apache/dubbo/rpc/protocol/injvm/DemoServiceImpl.java",
            "dubbo-rpc/dubbo-rpc-rmi/src/test/java/org/apache/dubbo/rpc/protocol/rmi/DemoServiceImpl.java",
            "dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/service/DemoServiceImpl.java",
            "dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/support/DemoServiceImpl.java",
            "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java",
            "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceBeanBuilder.java",
            "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/AnnotationPropertyValuesAdapter.java",
            "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/status/SpringStatusChecker.java",
            "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfig.java"
        ],
        "fixed": true
    }
]