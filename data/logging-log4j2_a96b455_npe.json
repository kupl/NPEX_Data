[
    {
        "repo": "logging-log4j2",
        "commit": "https://github.com/apache/logging-log4j2/commit/a96b455c4330dae86c1177ce526d09afa3892144",
        "bug_id": "logging-log4j2_a96b455",
        "message": "[LOG4J2-1025] Custom java.util.logging.Level gives null Log4j Level and\ncauses NPE.",
        "parent": "https://github.com/apache/logging-log4j2/commit/d865e43df0bc9558f01b494b970a82fb60178a95",
        "patched_files": [
            "changes.xml",
            "DefaultLevelConverter.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 53,
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a96b455c4330dae86c1177ce526d09afa3892144/log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java",
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java?ref=a96b455c4330dae86c1177ce526d09afa3892144",
                "filename": "log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java",
                "deletions": 10,
                "sha": "c2d8eb321341f885f3bae077f1644e4896219d76",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a96b455c4330dae86c1177ce526d09afa3892144/log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java",
                "patch": "@@ -17,34 +17,48 @@\n \n package org.apache.logging.log4j.jul;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n import java.util.IdentityHashMap;\n+import java.util.List;\n import java.util.Map;\n \n import org.apache.logging.log4j.Level;\n \n /**\n  * Default implementation of LevelConverter strategy.\n- *\n+ * <p>\n+ * Supports custom JUL levels by mapping them to their closest mapped neighbour. \n+ * </p>\n  * @since 2.1\n  */\n public class DefaultLevelConverter implements LevelConverter {\n \n+    static final class JulLevelComparator implements Comparator<java.util.logging.Level> {\n+        @Override\n+        public int compare(java.util.logging.Level level1, java.util.logging.Level level2) {\n+            return Integer.compare(level1.intValue(), level2.intValue());\n+        }\n+    }\n+\n     private final Map<java.util.logging.Level, Level> julToLog4j = new IdentityHashMap<>(9);\n     private final Map<Level, java.util.logging.Level> log4jToJul = new IdentityHashMap<>(10);\n+    private final List<java.util.logging.Level> sortedJulLevels = new ArrayList<>(9);\n \n     public DefaultLevelConverter() {\n         // Map JUL to Log4j\n-        mapJulToLog4j(java.util.logging.Level.OFF, Level.OFF);\n+        mapJulToLog4j(java.util.logging.Level.ALL, Level.ALL);\n         mapJulToLog4j(java.util.logging.Level.FINEST, LevelTranslator.FINEST);\n         mapJulToLog4j(java.util.logging.Level.FINER, Level.TRACE);\n         mapJulToLog4j(java.util.logging.Level.FINE, Level.DEBUG);\n         mapJulToLog4j(java.util.logging.Level.CONFIG, LevelTranslator.CONFIG);\n         mapJulToLog4j(java.util.logging.Level.INFO, Level.INFO);\n         mapJulToLog4j(java.util.logging.Level.WARNING, Level.WARN);\n         mapJulToLog4j(java.util.logging.Level.SEVERE, Level.ERROR);\n-        mapJulToLog4j(java.util.logging.Level.ALL, Level.ALL);\n+        mapJulToLog4j(java.util.logging.Level.OFF, Level.OFF);\n         // Map Log4j to JUL\n-        mapLog4jToJul(Level.OFF, java.util.logging.Level.OFF);\n+        mapLog4jToJul(Level.ALL, java.util.logging.Level.ALL);\n         mapLog4jToJul(LevelTranslator.FINEST, java.util.logging.Level.FINEST);\n         mapLog4jToJul(Level.TRACE, java.util.logging.Level.FINER);\n         mapLog4jToJul(Level.DEBUG, java.util.logging.Level.FINE);\n@@ -53,18 +67,46 @@ public DefaultLevelConverter() {\n         mapLog4jToJul(Level.WARN, java.util.logging.Level.WARNING);\n         mapLog4jToJul(Level.ERROR, java.util.logging.Level.SEVERE);\n         mapLog4jToJul(Level.FATAL, java.util.logging.Level.SEVERE);\n-        mapLog4jToJul(Level.ALL, java.util.logging.Level.ALL);\n+        mapLog4jToJul(Level.OFF, java.util.logging.Level.OFF);\n+        // Sorted Java levels\n+        sortedJulLevels.addAll(julToLog4j.keySet());\n+        Collections.sort(sortedJulLevels, new JulLevelComparator());\n+\n+    }\n+\n+    private Level addCustomJulLevel(java.util.logging.Level customJavaLevel) {\n+        long prevDist = Long.MAX_VALUE;\n+        java.util.logging.Level prevLevel = null;\n+        for (java.util.logging.Level mappedJavaLevel : sortedJulLevels) {\n+            long distance = distance(customJavaLevel, mappedJavaLevel);\n+            if (distance > prevDist) {\n+                return mapCustomJulLevel(customJavaLevel, prevLevel);\n+            }\n+            prevDist = distance;\n+            prevLevel = mappedJavaLevel;\n+        }\n+        return mapCustomJulLevel(customJavaLevel, prevLevel);\n+    }\n+\n+    private long distance(java.util.logging.Level javaLevel, java.util.logging.Level customJavaLevel) {\n+        return Math.abs((long) customJavaLevel.intValue() - (long) javaLevel.intValue());\n+    }\n+\n+    private Level mapCustomJulLevel(java.util.logging.Level customJavaLevel, java.util.logging.Level stdJavaLevel) {\n+        final Level level = julToLog4j.get(stdJavaLevel);\n+        julToLog4j.put(customJavaLevel, level);\n+        return level;\n     }\n-    \n+\n     /*\n-     * TODO consider making public.\n+     * TODO consider making public for advanced configuration.\n      */\n     private void mapJulToLog4j(java.util.logging.Level julLevel, Level level) {\n         julToLog4j.put(julLevel, level);\n     }\n-    \n+\n     /*\n-     * TODO consider making public.\n+     * TODO consider making public for advanced configuration.\n      */\n     private void mapLog4jToJul(Level level, java.util.logging.Level julLevel) {\n         log4jToJul.put(level, julLevel);\n@@ -77,6 +119,7 @@ private void mapLog4jToJul(Level level, java.util.logging.Level julLevel) {\n \n     @Override\n     public Level toLevel(final java.util.logging.Level javaLevel) {\n-        return julToLog4j.get(javaLevel);\n+        final Level level = julToLog4j.get(javaLevel);\n+        return level != null ? level : addCustomJulLevel(javaLevel);\n     }\n }",
                "changes": 63
            },
            {
                "status": "added",
                "additions": 145,
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a96b455c4330dae86c1177ce526d09afa3892144/log4j-jul/src/test/java/org/apache/logging/log4j/jul/DefaultLevelConverterCustomJulLevelsTest.java",
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-jul/src/test/java/org/apache/logging/log4j/jul/DefaultLevelConverterCustomJulLevelsTest.java?ref=a96b455c4330dae86c1177ce526d09afa3892144",
                "filename": "log4j-jul/src/test/java/org/apache/logging/log4j/jul/DefaultLevelConverterCustomJulLevelsTest.java",
                "deletions": 0,
                "sha": "6b8eef6787bd104ec1d97527ac0889df92e474d3",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a96b455c4330dae86c1177ce526d09afa3892144/log4j-jul/src/test/java/org/apache/logging/log4j/jul/DefaultLevelConverterCustomJulLevelsTest.java",
                "patch": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+package org.apache.logging.log4j.jul;\n+\n+import org.apache.logging.log4j.Level;\n+import org.junit.Assert;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+/**\n+ * Tests {@link DefaultLevelConverter} for custom JUL levels.\n+ * \n+ * @since 2.4\n+ */\n+public class DefaultLevelConverterCustomJulLevelsTest {\n+\n+    static class CustomLevel extends java.util.logging.Level {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        static CustomLevel ALL_P_1 = new CustomLevel(\"ALL_P_1\", java.util.logging.Level.ALL.intValue() + 1);\n+\n+        static CustomLevel FINEST_P_1 = new CustomLevel(\"FINEST_P_1\", java.util.logging.Level.FINEST.intValue() + 1);\n+        static CustomLevel FINEST_M_1 = new CustomLevel(\"FINEST_M_1\", java.util.logging.Level.FINEST.intValue() - 1);\n+\n+        static CustomLevel FINER_P_1 = new CustomLevel(\"FINER_P_1\", java.util.logging.Level.FINER.intValue() + 1);\n+        static CustomLevel FINER_M_1 = new CustomLevel(\"FINER_M_1\", java.util.logging.Level.FINER.intValue() - 1);\n+\n+        static CustomLevel FINE_P_1 = new CustomLevel(\"FINE_P_1\", java.util.logging.Level.FINE.intValue() + 1);\n+        static CustomLevel FINE_M_1 = new CustomLevel(\"FINE_M_1\", java.util.logging.Level.FINE.intValue() - 1);\n+\n+        static CustomLevel CONFIG_P_1 = new CustomLevel(\"CONFIG_P_1\", java.util.logging.Level.CONFIG.intValue() + 1);\n+        static CustomLevel CONFIG_M_1 = new CustomLevel(\"CONFIG_M_1\", java.util.logging.Level.CONFIG.intValue() - 1);\n+\n+        static CustomLevel INFO_P_1 = new CustomLevel(\"INFO_P_1\", java.util.logging.Level.INFO.intValue() + 1);\n+        static CustomLevel INFO_M_1 = new CustomLevel(\"INFO_M_1\", java.util.logging.Level.INFO.intValue() - 1);\n+\n+        static CustomLevel WARNING_P_1 = new CustomLevel(\"WARNING_P_1\", java.util.logging.Level.WARNING.intValue() + 1);\n+        static CustomLevel WARNING_M_1 = new CustomLevel(\"WARNING_M_1\", java.util.logging.Level.WARNING.intValue() - 1);\n+\n+        static CustomLevel SEVERE_P_1 = new CustomLevel(\"SEVERE_P_1\", java.util.logging.Level.SEVERE.intValue() + 1);\n+        static CustomLevel SEVERE_M_1 = new CustomLevel(\"SEVERE_M_1\", java.util.logging.Level.SEVERE.intValue() - 1);\n+\n+        static CustomLevel OFF_M_1 = new CustomLevel(\"OFF_M_1\", java.util.logging.Level.OFF.intValue() - 1);\n+\n+        protected CustomLevel(String name, int value) {\n+            super(name, value);\n+        }\n+    }\n+\n+    private DefaultLevelConverter converter = new DefaultLevelConverter();\n+\n+    @Test\n+    public void testCustomJulLevelNearAll() {\n+        // Sanity check:\n+        Assert.assertEquals(Level.ALL, converter.toLevel(java.util.logging.Level.ALL));\n+        // Test:\n+        Assert.assertEquals(Level.ALL, converter.toLevel(CustomLevel.ALL_P_1));\n+    }\n+\n+    @Test\n+    public void testCustomJulLevelNearFinest() {\n+        // Sanity check:\n+        Assert.assertEquals(LevelTranslator.FINEST, converter.toLevel(java.util.logging.Level.FINEST));\n+        // Test:\n+        Assert.assertEquals(LevelTranslator.FINEST, converter.toLevel(CustomLevel.FINEST_P_1));\n+        Assert.assertEquals(LevelTranslator.FINEST, converter.toLevel(CustomLevel.FINEST_M_1));\n+    }\n+\n+    @Test\n+    public void testCustomJulLevelNearFiner() {\n+        // Sanity check:\n+        Assert.assertEquals(Level.TRACE, converter.toLevel(java.util.logging.Level.FINER));\n+        // Test:\n+        Assert.assertEquals(Level.TRACE, converter.toLevel(CustomLevel.FINER_P_1));\n+        Assert.assertEquals(Level.TRACE, converter.toLevel(CustomLevel.FINER_M_1));\n+    }\n+\n+    @Test\n+    public void testCustomJulLevelNearFine() {\n+        // Sanity check:\n+        Assert.assertEquals(Level.DEBUG, converter.toLevel(java.util.logging.Level.FINE));\n+        // Test:\n+        Assert.assertEquals(Level.DEBUG, converter.toLevel(CustomLevel.FINE_P_1));\n+        Assert.assertEquals(Level.DEBUG, converter.toLevel(CustomLevel.FINE_M_1));\n+    }\n+\n+    @Test\n+    public void testCustomJulLevelNearConfig() {\n+        // Sanity check:\n+        Assert.assertEquals(LevelTranslator.CONFIG, converter.toLevel(java.util.logging.Level.CONFIG));\n+        // Test:\n+        Assert.assertEquals(LevelTranslator.CONFIG, converter.toLevel(CustomLevel.CONFIG_P_1));\n+        Assert.assertEquals(LevelTranslator.CONFIG, converter.toLevel(CustomLevel.CONFIG_M_1));\n+    }\n+\n+    @Test\n+    public void testCustomJulLevelNearInfo() {\n+        // Sanity check:\n+        Assert.assertEquals(Level.INFO, converter.toLevel(java.util.logging.Level.INFO));\n+        // Test:\n+        Assert.assertEquals(Level.INFO, converter.toLevel(CustomLevel.INFO_P_1));\n+        Assert.assertEquals(Level.INFO, converter.toLevel(CustomLevel.INFO_M_1));\n+    }\n+\n+    @Test\n+    public void testCustomJulLevelNearWarning() {\n+        // Sanity check:\n+        Assert.assertEquals(Level.WARN, converter.toLevel(java.util.logging.Level.WARNING));\n+        // Test:\n+        Assert.assertEquals(Level.WARN, converter.toLevel(CustomLevel.WARNING_P_1));\n+        Assert.assertEquals(Level.WARN, converter.toLevel(CustomLevel.WARNING_M_1));\n+    }\n+\n+    @Test\n+    public void testCustomJulLevelNearSevere() {\n+        // Sanity check:\n+        Assert.assertEquals(Level.ERROR, converter.toLevel(java.util.logging.Level.SEVERE));\n+        // Test:\n+        Assert.assertEquals(Level.ERROR, converter.toLevel(CustomLevel.SEVERE_P_1));\n+        Assert.assertEquals(Level.ERROR, converter.toLevel(CustomLevel.SEVERE_M_1));\n+    }\n+\n+    @Test\n+    public void testCustomJulLevelNearOff() {\n+        // Sanity check:\n+        Assert.assertEquals(Level.OFF, converter.toLevel(java.util.logging.Level.OFF));\n+        // Test:\n+        Assert.assertEquals(Level.OFF, converter.toLevel(CustomLevel.OFF_M_1));\n+    }\n+}",
                "changes": 145
            },
            {
                "status": "modified",
                "additions": 3,
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a96b455c4330dae86c1177ce526d09afa3892144/src/changes/changes.xml",
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=a96b455c4330dae86c1177ce526d09afa3892144",
                "filename": "src/changes/changes.xml",
                "deletions": 0,
                "sha": "3020dabcb83f59fd7394f90914b0e006faa216e6",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a96b455c4330dae86c1177ce526d09afa3892144/src/changes/changes.xml",
                "patch": "@@ -33,6 +33,9 @@\n       <action issue=\"LOG4J2-1037\" dev=\"ggregory\" type=\"fix\" due-to=\"Marc Dergacz\">\n         Backward compatibility issue in log4j-1.2-api NDC pop() and peek().\n       </action>\n+      <action issue=\"LOG4J2-1025\" dev=\"ggregory\" type=\"fix\" due-to=\"Mikael St\u00e5ldal\">\n+        Custom java.util.logging.Level gives null Log4j Level and causes NPE.\n+      </action>\n       <action issue=\"LOG4J2-1033\" dev=\"ggregory\" type=\"fix\" due-to=\"Mikael St\u00e5ldal\">\n         SimpleLogger creates unnecessary Map objects by calling ThreadContext.getContext() instead of getImmutableContext().\n       </action>",
                "changes": 3
            }
        ],
        "unit_tests": [
            "DefaultLevelConverterCustomJulLevelsTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "log4j-jul/src/test/java/org/apache/logging/log4j/jul/DefaultLevelConverterCustomJulLevelsTest.java",
        "buggy_files": [
            "src/changes/changes.xml",
            "log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java"
        ],
        "fixed": true
    }
]