{
    "tapestry-5_01a1439": {
        "bug_id": "tapestry-5_01a1439",
        "commit": "https://github.com/apache/tapestry-5/commit/01a1439c4a520cf5425415e0ed6a9fa51d386df1",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tapestry-5/blob/01a1439c4a520cf5425415e0ed6a9fa51d386df1/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Zone.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Zone.java?ref=01a1439c4a520cf5425415e0ed6a9fa51d386df1",
                "deletions": 0,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Zone.java",
                "patch": "@@ -250,6 +250,12 @@ public String getClientId()\n     {\n         if (resources.isBound(\"id\"))\n             return idParameter;\n+        \n+        // TAP4-2342. I know this won't work with a Zone with no given clientId and that was already \n+        // via AJAX inside an outer Zone, but it's still better than nothing.\n+        if (clientId == null) {\n+            clientId = resources.getId();\n+        }\n \n         return clientId;\n     }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/01a1439c4a520cf5425415e0ed6a9fa51d386df1/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Zone.java",
                "sha": "a04524ad90f30957b7fd8719bf8781527a0ca062",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tapestry-5/blob/01a1439c4a520cf5425415e0ed6a9fa51d386df1/tapestry-core/src/test/app1/nested/ZoneDemo.tml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/app1/nested/ZoneDemo.tml?ref=01a1439c4a520cf5425415e0ed6a9fa51d386df1",
                "deletions": 0,
                "filename": "tapestry-core/src/test/app1/nested/ZoneDemo.tml",
                "patch": "@@ -87,6 +87,7 @@\n         MultiZone update with id of non-Zone\n         element\n     </t:actionlink>\n+    <t:actionlink class=\"btn btn-default\" t:id=\"updateViaAjaxResponseRenderer\" zone=\"output\">Update via AjaxResponseRenderer</t:actionlink>\n </div>\n \n <div id=\"notAZone\"/>",
                "raw_url": "https://github.com/apache/tapestry-5/raw/01a1439c4a520cf5425415e0ed6a9fa51d386df1/tapestry-core/src/test/app1/nested/ZoneDemo.tml",
                "sha": "cd4beaf5763696d3fe61ccc17702b53f3f7c431b",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/tapestry-5/blob/01a1439c4a520cf5425415e0ed6a9fa51d386df1/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/ZoneTests.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/ZoneTests.java?ref=01a1439c4a520cf5425415e0ed6a9fa51d386df1",
                "deletions": 0,
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/ZoneTests.java",
                "patch": "@@ -323,4 +323,24 @@ public void update_zone_with_empty_body()\n         assertText(\"zone-update-message\", \"Zone updated.\");\n     }\n \n+    /**\n+     * TAP5-2330\n+     */\n+    @Test\n+    public void update_zone_with_no_clientid()\n+    {\n+        openLinks(\"Zone Demo\");\n+\n+        assertText(\"zone-update-message\", \"\");\n+\n+        click(\"link=Update via AjaxResponseRenderer\");\n+\n+        waitForAjaxRequestsToComplete();\n+\n+        assertText(\"zone-update-message\", \"Zone updated.\");\n+        \n+        assertEquals(\"Selected: AjaxResponseRenderer\", getText(\"output\"));\n+        \n+    }\n+\n }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/01a1439c4a520cf5425415e0ed6a9fa51d386df1/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/ZoneTests.java",
                "sha": "77acefe5703ea76181de771f115ac8706473ec93",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tapestry-5/blob/01a1439c4a520cf5425415e0ed6a9fa51d386df1/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/nested/ZoneDemo.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/nested/ZoneDemo.java?ref=01a1439c4a520cf5425415e0ed6a9fa51d386df1",
                "deletions": 0,
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/nested/ZoneDemo.java",
                "patch": "@@ -222,4 +222,10 @@ Object onActionFromNonZoneUpdate()\n     {\n         return new MultiZoneUpdate(\"notAZone\", forNotAZone);\n     }\n+    \n+    void onActionFromUpdateViaAjaxResponseRenderer()\n+    {\n+        name = \"AjaxResponseRenderer\";\n+        ajaxResponseRenderer.addRender(output);\n+    }\n }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/01a1439c4a520cf5425415e0ed6a9fa51d386df1/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/nested/ZoneDemo.java",
                "sha": "e13ed76351064e8bfc75bee6e0189ac5ae5ed4e6",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tapestry-5/blob/01a1439c4a520cf5425415e0ed6a9fa51d386df1/tapestry-json/src/main/java/org/apache/tapestry5/json/JSONObject.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-json/src/main/java/org/apache/tapestry5/json/JSONObject.java?ref=01a1439c4a520cf5425415e0ed6a9fa51d386df1",
                "deletions": 0,
                "filename": "tapestry-json/src/main/java/org/apache/tapestry5/json/JSONObject.java",
                "patch": "@@ -913,6 +913,12 @@ void print(JSONPrintSession session)\n      */\n     static void printValue(JSONPrintSession session, Object value)\n     {\n+    \t\n+    \t// TAP5-2342: a little more robustness by treating null as JSONObject.NULL and avoinding an NPE.\n+    \tif (value == null) {\n+    \t\tvalue = NULL;\n+    \t}\n+    \t\n         if (value instanceof JSONObject)\n         {\n             ((JSONObject) value).print(session);",
                "raw_url": "https://github.com/apache/tapestry-5/raw/01a1439c4a520cf5425415e0ed6a9fa51d386df1/tapestry-json/src/main/java/org/apache/tapestry5/json/JSONObject.java",
                "sha": "651260b00b70458fcdd1b630872f058c8616b04f",
                "status": "modified"
            }
        ],
        "message": "TAP5-2330 : NullPointerException when updating a Zone with no clientId\nTAP5-2342 : NPE on org.apache.tapestry5.json.JSONObject.printValue(JSONObject.java:950)",
        "parent": "https://github.com/apache/tapestry-5/commit/d96b5534fc02d8d12b75eafae18c276d2ddf11f4",
        "repo": "tapestry-5",
        "unit_tests": [
            "ZoneTests.java"
        ]
    },
    "tapestry-5_1001156": {
        "bug_id": "tapestry-5_1001156",
        "commit": "https://github.com/apache/tapestry-5/commit/1001156c1eed7f1fb2d1da7808bec55cad54ba17",
        "file": [
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/tapestry-5/blob/1001156c1eed7f1fb2d1da7808bec55cad54ba17/tapestry-hibernate/src/main/java/org/apache/tapestry/internal/hibernate/HibernateEntityValueEncoder.java",
                "changes": 75,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-hibernate/src/main/java/org/apache/tapestry/internal/hibernate/HibernateEntityValueEncoder.java?ref=1001156c1eed7f1fb2d1da7808bec55cad54ba17",
                "deletions": 33,
                "filename": "tapestry-hibernate/src/main/java/org/apache/tapestry/internal/hibernate/HibernateEntityValueEncoder.java",
                "patch": "@@ -14,46 +14,55 @@\n \n package org.apache.tapestry.internal.hibernate;\n \n-import java.io.Serializable;\n-\n import org.apache.tapestry.ValueEncoder;\n import org.apache.tapestry.ioc.internal.util.Defense;\n+import org.apache.tapestry.ioc.internal.util.InternalUtils;\n import org.apache.tapestry.ioc.services.TypeCoercer;\n import org.hibernate.Session;\n import org.hibernate.mapping.PersistentClass;\n import org.hibernate.mapping.Property;\n import org.hibernate.property.Getter;\n \n+import java.io.Serializable;\n+\n public final class HibernateEntityValueEncoder<E> implements ValueEncoder<E> {\n-\tprivate final Class<E> _entityClass;\n-\tprivate final PersistentClass _persistentClass;\n-\tprivate final Session _session;\n-\tprivate final TypeCoercer _typeCoercer;\n-\tprivate final Getter _idGetter;\n-\t\n-\tpublic HibernateEntityValueEncoder(Class<E> entityClass, PersistentClass persistentClass, Session session, TypeCoercer typeCoercer) {\n-\t\tsuper();\n-\t\t_entityClass = entityClass;\n-\t\t_persistentClass = persistentClass;\n-\t\t_session = session;\n-\t\t_typeCoercer = typeCoercer;\n-\t\t\n-\t\tProperty property = _persistentClass.getIdentifierProperty();\n-\t\t_idGetter = property.getPropertyAccessor(_entityClass).getGetter(_entityClass, property.getName());\n-\t}\n-\t\t\n-\tpublic String toClient(E value) {\n-\t\tObject id = _idGetter.get(value);\n-\t\treturn _typeCoercer.coerce(id, String.class);\n-\t}\n-\n-\t@SuppressWarnings(\"unchecked\")\n-\tpublic E toValue(String clientValue) {\n-\t\tClass<?> idType = _idGetter.getReturnType();\n-\t\t\n-\t\tObject id = _typeCoercer.coerce(clientValue, idType);\n-\t\tSerializable ser = Defense.cast(id, Serializable.class, \"id\");\n-\t\treturn (E)_session.get(_entityClass, ser);\n-\t}\n-\t\n+    private final Class<E> _entityClass;\n+    private final PersistentClass _persistentClass;\n+    private final Session _session;\n+    private final TypeCoercer _typeCoercer;\n+    private final Getter _idGetter;\n+\n+    public HibernateEntityValueEncoder(Class<E> entityClass, PersistentClass persistentClass, Session session, TypeCoercer typeCoercer) {\n+        super();\n+        _entityClass = entityClass;\n+        _persistentClass = persistentClass;\n+        _session = session;\n+        _typeCoercer = typeCoercer;\n+\n+        Property property = _persistentClass.getIdentifierProperty();\n+        _idGetter = property.getPropertyAccessor(_entityClass).getGetter(_entityClass, property.getName());\n+    }\n+\n+    public String toClient(E value) {\n+\n+        if (value == null) return null;\n+\n+        Object id = _idGetter.get(value);\n+\n+        return _typeCoercer.coerce(id, String.class);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public E toValue(String clientValue) {\n+\n+        if (InternalUtils.isBlank(clientValue)) return null;\n+\n+\n+        Class<?> idType = _idGetter.getReturnType();\n+\n+        Object id = _typeCoercer.coerce(clientValue, idType);\n+        Serializable ser = Defense.cast(id, Serializable.class, \"id\");\n+        return (E) _session.get(_entityClass, ser);\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/1001156c1eed7f1fb2d1da7808bec55cad54ba17/tapestry-hibernate/src/main/java/org/apache/tapestry/internal/hibernate/HibernateEntityValueEncoder.java",
                "sha": "d1f29e61f7934d7ad9d315f4bed0809318fdbc5e",
                "status": "modified"
            }
        ],
        "message": "TAPESTRY-2260: Null relationships cause an NPE inside Hibernate when being value encoded by RadioGroup\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@637271 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tapestry-5/commit/f7b09d7449aa3da94427e9d9bbed802b6febcd80",
        "repo": "tapestry-5",
        "unit_tests": [
            "HibernateEntityValueEncoderTest.java"
        ]
    },
    "tapestry-5_3c0b3b3": {
        "bug_id": "tapestry-5_3c0b3b3",
        "commit": "https://github.com/apache/tapestry-5/commit/3c0b3b3f7859bb334cd256d0bd8d57564c59b6df",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/tapestry-5/blob/3c0b3b3f7859bb334cd256d0bd8d57564c59b6df/tapestry-spring/src/main/java/org/apache/tapestry5/internal/spring/SpringModuleDef.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-spring/src/main/java/org/apache/tapestry5/internal/spring/SpringModuleDef.java?ref=3c0b3b3f7859bb334cd256d0bd8d57564c59b6df",
                "deletions": 3,
                "filename": "tapestry-spring/src/main/java/org/apache/tapestry5/internal/spring/SpringModuleDef.java",
                "patch": "@@ -27,8 +27,9 @@\n import org.apache.tapestry5.plastic.PlasticUtils;\n import org.apache.tapestry5.spring.ApplicationContextCustomizer;\n import org.apache.tapestry5.spring.SpringConstants;\n-import org.springframework.beans.factory.BeanFactoryUtils;\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.core.SpringVersion;\n import org.springframework.web.context.ConfigurableWebApplicationContext;\n import org.springframework.web.context.WebApplicationContext;\n@@ -159,11 +160,26 @@ public boolean isEagerLoad()\n \n     private void addServiceDefsForSpringBeans(ApplicationContext context)\n     {\n+        ConfigurableListableBeanFactory beanFactory = null;\n+        if (context instanceof ConfigurableApplicationContext)\n+        {\n+            beanFactory = ((ConfigurableApplicationContext) context).getBeanFactory();\n+        }\n+\n         for (final String beanName : context.getBeanDefinitionNames())\n         {\n-            String trueName = beanName.startsWith(\"&\") ? beanName.substring(1) : beanName;\n+            boolean isAbstract = false;\n+            if (beanFactory != null)\n+            {\n+                isAbstract = beanFactory.getBeanDefinition(beanName).isAbstract();\n+            }\n+\n+            if (!isAbstract)\n+            {\n+                String trueName = beanName.startsWith(\"&\") ? beanName.substring(1) : beanName;\n \n-            services.put(trueName, new SpringBeanServiceDef(trueName, context));\n+                services.put(trueName, new SpringBeanServiceDef(trueName, context));\n+            }\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/tapestry-5/raw/3c0b3b3f7859bb334cd256d0bd8d57564c59b6df/tapestry-spring/src/main/java/org/apache/tapestry5/internal/spring/SpringModuleDef.java",
                "sha": "734f7f23291a41bbe39452655b67aa3e38357e20",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/tapestry-5/blob/3c0b3b3f7859bb334cd256d0bd8d57564c59b6df/tapestry-spring/src/test/java/org/apache/tapestry5/internal/spring/SpringModuleDefTest.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-spring/src/test/java/org/apache/tapestry5/internal/spring/SpringModuleDefTest.java?ref=3c0b3b3f7859bb334cd256d0bd8d57564c59b6df",
                "deletions": 1,
                "filename": "tapestry-spring/src/test/java/org/apache/tapestry5/internal/spring/SpringModuleDefTest.java",
                "patch": "@@ -20,6 +20,8 @@\n import org.apache.tapestry5.ioc.def.ServiceDef;\n import org.apache.tapestry5.spring.SpringConstants;\n import org.apache.tapestry5.spring.SpringTestCase;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n import org.springframework.web.context.ConfigurableWebApplicationContext;\n import org.springframework.web.context.WebApplicationContext;\n import org.testng.annotations.Test;\n@@ -32,16 +34,31 @@\n     public void load_application_context_externally()\n     {\n         ServletContext servletContext = mockServletContext();\n+        ConfigurableListableBeanFactory beanFactory = newMock(\n+                ConfigurableListableBeanFactory.class);\n         ConfigurableWebApplicationContext ac = newMock(ConfigurableWebApplicationContext.class);\n         Runnable fred = mockRunnable();\n         Runnable barney = mockRunnable();\n+        Runnable arnold = mockRunnable();\n+        BeanDefinition fredBeanDef = newMock(BeanDefinition.class);\n+        BeanDefinition barneyBeanDef = newMock(BeanDefinition.class);\n+        BeanDefinition arnoldBeanDef = newMock(BeanDefinition.class);\n \n         ServiceBuilderResources resources = mockServiceBuilderResources();\n \n         train_getInitParameter(servletContext, SpringConstants.USE_EXTERNAL_SPRING_CONTEXT, \"true\");\n \n         train_getAttribute(servletContext, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ac);\n-        expect(ac.getBeanDefinitionNames()).andReturn(new String[] {\"fred\", \"&barney\"});\n+        expect(ac.getBeanFactory()).andReturn(beanFactory);\n+        expect(ac.getBeanDefinitionNames()).andReturn(new String[] { \"fred\", \"&barney\", \"arnold\" });\n+\n+        expect(fredBeanDef.isAbstract()).andReturn(false);\n+        expect(barneyBeanDef.isAbstract()).andReturn(false);\n+        expect(arnoldBeanDef.isAbstract()).andReturn(true);\n+\n+        expect(beanFactory.getBeanDefinition(\"fred\")).andReturn(fredBeanDef);\n+        expect(beanFactory.getBeanDefinition(\"&barney\")).andReturn(barneyBeanDef);\n+        expect(beanFactory.getBeanDefinition(\"arnold\")).andReturn(arnoldBeanDef);\n \n         replay();\n \n@@ -89,6 +106,8 @@ public void load_application_context_externally()\n         sd = moduleDef.getServiceDef(\"barney\");\n \n         assertSame(sd.createServiceCreator(null).createObject(), barney);\n+\n+        assertNull(moduleDef.getServiceDef(\"arnold\"));\n     }\n \n     @Test",
                "raw_url": "https://github.com/apache/tapestry-5/raw/3c0b3b3f7859bb334cd256d0bd8d57564c59b6df/tapestry-spring/src/test/java/org/apache/tapestry5/internal/spring/SpringModuleDefTest.java",
                "sha": "2016fe9c1574c416d4ab16fa5f966d39d53d0953",
                "status": "modified"
            }
        ],
        "message": "TAP5-1837: NPE on registry startup when using tapestry.use-external-spring-context",
        "parent": "https://github.com/apache/tapestry-5/commit/2dd5bb5256c1b3dbd08a71d48538f4e764a38ee1",
        "repo": "tapestry-5",
        "unit_tests": [
            "SpringModuleDefTest.java"
        ]
    },
    "tapestry-5_4dd0bec": {
        "bug_id": "tapestry-5_4dd0bec",
        "commit": "https://github.com/apache/tapestry-5/commit/4dd0bec529585289f51b810753733017288d1a70",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tapestry-5/blob/4dd0bec529585289f51b810753733017288d1a70/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Form.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Form.java?ref=4dd0bec529585289f51b810753733017288d1a70",
                "deletions": 6,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Form.java",
                "patch": "@@ -499,12 +499,16 @@ Object onAction(EventContext context) throws IOException\n \n         try\n         {\n+            environment.push(BeanValidationContext.class, new BeanValidationContextImpl(validate));\n+\n             resources.triggerContextEvent(EventConstants.PREPARE_FOR_SUBMIT, context, eventCallback);\n \n             if (eventCallback.isAborted())\n                 return true;\n \n             resources.triggerContextEvent(EventConstants.PREPARE, context, eventCallback);\n+            if (eventCallback.isAborted())\n+                return true;\n \n             if (isFormCancelled())\n             {\n@@ -513,12 +517,6 @@ Object onAction(EventContext context) throws IOException\n                     return true;\n             }\n \n-\n-            environment.push(BeanValidationContext.class, new BeanValidationContextImpl(validate));\n-\n-            if (eventCallback.isAborted())\n-                return true;\n-\n             executeStoredActions();\n \n             heartbeat.end();",
                "raw_url": "https://github.com/apache/tapestry-5/raw/4dd0bec529585289f51b810753733017288d1a70/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Form.java",
                "sha": "f7339ab21cea65277573431a4585836fed56754b",
                "status": "modified"
            }
        ],
        "message": "TAP5-1580: A Form with an event listener for \"canceled\" event can cause an NPE popping off a BeanEditContext from the Environment that wasn't pushed\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@1148599 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tapestry-5/commit/c8dd48a2ca6bc45c0fb187d90b5fe9df2f5add8f",
        "repo": "tapestry-5",
        "unit_tests": [
            "FormTest.java",
            "FormTests.java"
        ]
    },
    "tapestry-5_639c57d": {
        "bug_id": "tapestry-5_639c57d",
        "commit": "https://github.com/apache/tapestry-5/commit/639c57df2363181a8eb78d1a1653b7b73e9e614a",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/tapestry-5/blob/639c57df2363181a8eb78d1a1653b7b73e9e614a/tapestry-core/src/main/java/org/apache/tapestry5/corelib/base/AbstractPropertyOutput.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/corelib/base/AbstractPropertyOutput.java?ref=639c57df2363181a8eb78d1a1653b7b73e9e614a",
                "deletions": 10,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/corelib/base/AbstractPropertyOutput.java",
                "patch": "@@ -1,5 +1,3 @@\n-// Copyright 2007, 2008, 2009, 2011 The Apache Software Foundation\n-//\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n // You may obtain a copy of the License at\n@@ -14,15 +12,13 @@\n \n package org.apache.tapestry5.corelib.base;\n \n-import org.apache.tapestry5.Block;\n-import org.apache.tapestry5.MarkupWriter;\n-import org.apache.tapestry5.PropertyConduit;\n-import org.apache.tapestry5.PropertyOverrides;\n+import org.apache.tapestry5.*;\n import org.apache.tapestry5.annotations.Parameter;\n import org.apache.tapestry5.beaneditor.PropertyModel;\n import org.apache.tapestry5.ioc.Messages;\n import org.apache.tapestry5.ioc.annotations.Inject;\n import org.apache.tapestry5.ioc.internal.util.InternalUtils;\n+import org.apache.tapestry5.ioc.internal.util.TapestryException;\n import org.apache.tapestry5.services.BeanBlockSource;\n import org.apache.tapestry5.services.Core;\n import org.apache.tapestry5.services.Environment;\n@@ -76,6 +72,9 @@\n \n     private boolean mustPopEnvironment;\n \n+    @Inject\n+    private ComponentResources resources;\n+\n     BeanBlockSource defaultBeanBlockSource()\n     {\n         return defaultBeanBlockSource;\n@@ -150,10 +149,11 @@ Object readPropertyForObject()\n         try\n         {\n             return conduit == null ? null : conduit.get(object);\n-        }\n-        catch (NullPointerException ex)\n+        } catch (NullPointerException ex)\n         {\n-            throw new NullPointerException(String.format(\"Property '%s' contains a null value in the path.\", model.getPropertyName()));\n+            throw new TapestryException(String.format(\"Property '%s' contains a null value in the path.\", model.getPropertyName()),\n+                    resources.getLocation(),\n+                    ex);\n         }\n     }\n \n@@ -175,9 +175,10 @@ void afterRender()\n     }\n \n     // Used for testing.\n-    void inject(final PropertyModel model, final Object object)\n+    void inject(final PropertyModel model, final Object object, final ComponentResources resources)\n     {\n         this.model = model;\n         this.object = object;\n+        this.resources = resources;\n     }\n }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/639c57df2363181a8eb78d1a1653b7b73e9e614a/tapestry-core/src/main/java/org/apache/tapestry5/corelib/base/AbstractPropertyOutput.java",
                "sha": "a3a29de58af7f4c1ce160d5a4d7cbd11830ec0b6",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/tapestry-5/blob/639c57df2363181a8eb78d1a1653b7b73e9e614a/tapestry-core/src/test/java/org/apache/tapestry5/corelib/base/AbstractPropertyOutputTest.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/corelib/base/AbstractPropertyOutputTest.java?ref=639c57df2363181a8eb78d1a1653b7b73e9e614a",
                "deletions": 4,
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/corelib/base/AbstractPropertyOutputTest.java",
                "patch": "@@ -1,5 +1,3 @@\n-// Copyright 2008 The Apache Software Foundation\n-//\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n // You may obtain a copy of the License at\n@@ -14,9 +12,12 @@\n \n package org.apache.tapestry5.corelib.base;\n \n+import org.apache.tapestry5.ComponentResources;\n import org.apache.tapestry5.PropertyConduit;\n import org.apache.tapestry5.beaneditor.PropertyModel;\n import org.apache.tapestry5.internal.test.InternalBaseTestCase;\n+import org.apache.tapestry5.ioc.Location;\n+import org.apache.tapestry5.ioc.internal.util.TapestryException;\n import org.testng.annotations.Test;\n \n public class AbstractPropertyOutputTest extends InternalBaseTestCase\n@@ -32,12 +33,15 @@ public void test_null_pointer_exception_message()\n         final PropertyConduit conduit = mockPropertyConduit();\n         final PropertyModel model = mockPropertyModel();\n         final Object object = new Object();\n+        ComponentResources resources = mockComponentResources();\n+        Location location = mockLocation();\n \n-        propertyOutputFixture.inject(model, object);\n+        propertyOutputFixture.inject(model, object, resources);\n \n         expect(model.getConduit()).andReturn(conduit);\n         expect(conduit.get(object)).andThrow(new NullPointerException());\n         expect(model.getPropertyName()).andReturn(\"wilma.occupation.address\");\n+        expect(resources.getLocation()).andReturn(location);\n \n         replay();\n \n@@ -47,9 +51,11 @@ public void test_null_pointer_exception_message()\n \n             fail(\"Expected a NullPointerException to be thrown.\");\n         }\n-        catch (final NullPointerException ex)\n+        catch (final TapestryException ex)\n         {\n             assertEquals(ex.getMessage(), \"Property 'wilma.occupation.address' contains a null value in the path.\");\n+            assertSame(ex.getLocation(), location);\n+            assertTrue(ex.getCause() instanceof NullPointerException);\n         }\n \n         verify();",
                "raw_url": "https://github.com/apache/tapestry-5/raw/639c57df2363181a8eb78d1a1653b7b73e9e614a/tapestry-core/src/test/java/org/apache/tapestry5/corelib/base/AbstractPropertyOutputTest.java",
                "sha": "80c4a1e3fa69756c6fc5305cb35f7762d4f60ee8",
                "status": "modified"
            }
        ],
        "message": "TAP5-1672: Provide more info when PropertyDisplay component hits an NPE",
        "parent": "https://github.com/apache/tapestry-5/commit/bc5c3a913d50bd894516b1a009d24098a4f59cd3",
        "repo": "tapestry-5",
        "unit_tests": [
            "AbstractPropertyOutputTest.java"
        ]
    },
    "tapestry-5_808c1fd": {
        "bug_id": "tapestry-5_808c1fd",
        "commit": "https://github.com/apache/tapestry-5/commit/808c1fdfc9663aa95246379c5eebcc1c95c68cb5",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/tapestry-5/blob/808c1fdfc9663aa95246379c5eebcc1c95c68cb5/tapestry-core/src/main/java/org/apache/tapestry5/internal/services/FieldTranslatorSourceImpl.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/services/FieldTranslatorSourceImpl.java?ref=808c1fdfc9663aa95246379c5eebcc1c95c68cb5",
                "deletions": 1,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/services/FieldTranslatorSourceImpl.java",
                "patch": "@@ -125,7 +125,14 @@ private MessageFormatter findFormatter(String overrideId, Messages overrideMessa\n             return overrideMessages.getFormatter(overrideKey);\n \n         // Otherwise, use the built-in validation message appropriate to this validator.\n+        String messageKey = translator.getMessageKey();\n \n-        return globalMessages.getFormatter(translator.getMessageKey());\n+        // If no key has been specified, use translator name to create a key\n+        if(messageKey == null)\n+        {\n+            messageKey = translatorName + \"-message\";\n+        }\n+\n+        return globalMessages.getFormatter(messageKey);\n     }\n }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/808c1fdfc9663aa95246379c5eebcc1c95c68cb5/tapestry-core/src/main/java/org/apache/tapestry5/internal/services/FieldTranslatorSourceImpl.java",
                "sha": "ec7e8038eccf404feab1c85d7d7a80fb7824fd56",
                "status": "modified"
            },
            {
                "additions": 44,
                "blob_url": "https://github.com/apache/tapestry-5/blob/808c1fdfc9663aa95246379c5eebcc1c95c68cb5/tapestry-core/src/test/java/org/apache/tapestry5/internal/services/FieldTranslatorSourceImplTest.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/internal/services/FieldTranslatorSourceImplTest.java?ref=808c1fdfc9663aa95246379c5eebcc1c95c68cb5",
                "deletions": 0,
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/internal/services/FieldTranslatorSourceImplTest.java",
                "patch": "@@ -112,6 +112,50 @@ private AnnotationProvider mockAnnotationProvider(String translatorName)\n         return ap;\n     }\n \n+    @Test\n+    public void create_default_translator_with_name_and_null_key()\n+    {\n+        Field field = mockField();\n+        Messages messages = mockMessages();\n+        Locale locale = Locale.ENGLISH;\n+        Class propertyType = Map.class;\n+        TranslatorSource ts = mockTranslatorSource();\n+        FormSupport fs = mockFormSupport();\n+        Translator translator = mockTranslator(\"maptrans\", Map.class);\n+        Messages globalMessages = mockMessages();\n+        MessageFormatter formatter = mockMessageFormatter();\n+        MarkupWriter writer = mockMarkupWriter();\n+        String label = \"Field Label\";\n+        String message = \"Woops, did it again.\";\n+        AnnotationProvider ap = mockAnnotationProvider(null);\n+\n+        train_findByType(ts, propertyType, translator);\n+\n+        train_getFormValidationId(fs, \"myform\");\n+\n+        train_contains(messages, \"myform-myfield-maptrans-message\", false);\n+        train_contains(messages, \"myfield-maptrans-message\", false);\n+        train_getMessageKey(translator, null);\n+\n+        train_getMessageFormatter(globalMessages, \"maptrans-message\", formatter);\n+        train_getLabel(field, label);\n+        train_format(formatter, message, label);\n+\n+        translator.render(field, message, writer, fs);\n+\n+        replay();\n+\n+        FieldTranslatorSource source = new FieldTranslatorSourceImpl(ts, globalMessages, fs);\n+\n+        FieldTranslator ft = source.createDefaultTranslator(field, \"myfield\", messages, locale, propertyType, ap);\n+\n+        assertEquals(ft.getType(), Map.class);\n+\n+        ft.render(writer);\n+\n+        verify();\n+    }\n+\n     @Test\n     public void create_default_translator_with_name()\n     {",
                "raw_url": "https://github.com/apache/tapestry-5/raw/808c1fdfc9663aa95246379c5eebcc1c95c68cb5/tapestry-core/src/test/java/org/apache/tapestry5/internal/services/FieldTranslatorSourceImplTest.java",
                "sha": "31344ad93028c6d20af6aed300a2ad4800afc1bb",
                "status": "modified"
            }
        ],
        "message": "TAP5-1763: NPE is caused when you create a Translator with null message key. Fixed by using the 'translator-name'-message in case the message key is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@1211437 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tapestry-5/commit/32da4ddda219324166f3af3220be73a366973ede",
        "repo": "tapestry-5",
        "unit_tests": [
            "FieldTranslatorSourceImplTest.java"
        ]
    },
    "tapestry-5_b0dfecd": {
        "bug_id": "tapestry-5_b0dfecd",
        "commit": "https://github.com/apache/tapestry-5/commit/b0dfecd4a68c4f7f96bb605aa03694d4b641b547",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/tapestry-5/blob/b0dfecd4a68c4f7f96bb605aa03694d4b641b547/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Any.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Any.java?ref=b0dfecd4a68c4f7f96bb605aa03694d4b641b547",
                "deletions": 8,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Any.java",
                "patch": "@@ -1,10 +1,10 @@\n-// Copyright 2008 The Apache Software Foundation\n+// Copyright 2008, 2010 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n // You may obtain a copy of the License at\n //\n-//     http://www.apache.org/licenses/LICENSE-2.0\n+// http://www.apache.org/licenses/LICENSE-2.0\n //\n // Unless required by applicable law or agreed to in writing, software\n // distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -19,6 +19,7 @@\n import org.apache.tapestry5.annotations.SupportsInformalParameters;\n import org.apache.tapestry5.dom.Element;\n import org.apache.tapestry5.ioc.annotations.Inject;\n+import org.apache.tapestry5.services.javascript.JavascriptSupport;\n \n /**\n  * Renders an arbitrary element including informal parameters.\n@@ -43,7 +44,7 @@\n     private ComponentResources resources;\n \n     @Inject\n-    private RenderSupport renderSupport;\n+    private JavascriptSupport javascriptSupport;\n \n     String defaultElement()\n     {\n@@ -60,18 +61,23 @@ void beginRender(MarkupWriter writer)\n     }\n \n     /**\n-     * Returns the client id.  This has side effects: this first time this is called (after the Any component renders\n+     * Returns the client id. This has side effects: this first time this is called (after the Any component renders\n      * its start tag), a unique id is allocated (based on, and typically the same as, the clientId parameter, which\n      * defaults to the component's id). The rendered element is updated, with its id attribute set to the unique client\n      * id, which is then returned.\n-     *\n+     * \n      * @return unique client id for this component\n      */\n     public String getClientId()\n     {\n+        if (anyElement == null)\n+            throw new IllegalStateException(String.format(\n+                    \"Unable to provide client id for component %s as it has not yet rendered.\", resources\n+                            .getCompleteId()));\n+\n         if (uniqueId == null)\n         {\n-            uniqueId = renderSupport.allocateClientId(clientId);\n+            uniqueId = javascriptSupport.allocateClientId(clientId);\n             anyElement.forceAttributes(\"id\", uniqueId);\n         }\n \n@@ -83,9 +89,9 @@ void afterRender(MarkupWriter writer)\n         writer.end(); // the element\n     }\n \n-    void inject(RenderSupport support, ComponentResources resources, String element, String clientId)\n+    void inject(JavascriptSupport javascriptSupport, ComponentResources resources, String element, String clientId)\n     {\n-        this.renderSupport = support;\n+        this.javascriptSupport = javascriptSupport;\n         this.resources = resources;\n         this.element = element;\n         this.clientId = clientId;",
                "raw_url": "https://github.com/apache/tapestry-5/raw/b0dfecd4a68c4f7f96bb605aa03694d4b641b547/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Any.java",
                "sha": "ac5f956772acc8a5773d497d2431b650c97171fe",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/tapestry-5/blob/b0dfecd4a68c4f7f96bb605aa03694d4b641b547/tapestry-core/src/test/java/org/apache/tapestry5/corelib/components/AnyTest.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/corelib/components/AnyTest.java?ref=b0dfecd4a68c4f7f96bb605aa03694d4b641b547",
                "deletions": 5,
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/corelib/components/AnyTest.java",
                "patch": "@@ -1,10 +1,10 @@\n-// Copyright 2008 The Apache Software Foundation\n+// Copyright 2008, 2010 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n // You may obtain a copy of the License at\n //\n-//     http://www.apache.org/licenses/LICENSE-2.0\n+// http://www.apache.org/licenses/LICENSE-2.0\n //\n // Unless required by applicable law or agreed to in writing, software\n // distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,9 +16,9 @@\n \n import org.apache.tapestry5.ComponentResources;\n import org.apache.tapestry5.MarkupWriter;\n-import org.apache.tapestry5.RenderSupport;\n import org.apache.tapestry5.dom.DefaultMarkupModel;\n import org.apache.tapestry5.internal.services.MarkupWriterImpl;\n+import org.apache.tapestry5.services.javascript.JavascriptSupport;\n import org.apache.tapestry5.test.TapestryTestCase;\n import org.testng.annotations.Test;\n \n@@ -28,7 +28,7 @@\n     public void render_simple()\n     {\n         ComponentResources resources = mockComponentResources();\n-        RenderSupport support = mockRenderSupport();\n+        JavascriptSupport support = mockJavascriptSupport();\n \n         MarkupWriter writer = new MarkupWriterImpl(new DefaultMarkupModel());\n \n@@ -52,7 +52,7 @@ public void render_simple()\n     public void render_with_id()\n     {\n         ComponentResources resources = mockComponentResources();\n-        RenderSupport support = mockRenderSupport();\n+        JavascriptSupport support = mockJavascriptSupport();\n \n         MarkupWriter writer = new MarkupWriterImpl(new DefaultMarkupModel());\n \n@@ -80,6 +80,34 @@ public void render_with_id()\n \n         assertEquals(component.getClientId(), uniqueId);\n \n+        verify();\n+    }\n+\n+    @Test\n+    public void attempt_to_get_client_id_before_render()\n+    {\n+        ComponentResources resources = mockComponentResources();\n+        JavascriptSupport support = mockJavascriptSupport();\n+\n+        train_getCompleteId(resources, \"Foo/bar.baz\");\n+\n+        replay();\n+\n+        Any component = new Any();\n+\n+        component.inject(support, resources, \"div\", null);\n+\n+        try\n+        {\n+            component.getClientId();\n+            unreachable();\n+        }\n+        catch (IllegalStateException ex)\n+        {\n+            assertEquals(ex.getMessage(),\n+                    \"Unable to provide client id for component Foo/bar.baz as it has not yet rendered.\");\n+        }\n+\n         verify();\n \n     }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/b0dfecd4a68c4f7f96bb605aa03694d4b641b547/tapestry-core/src/test/java/org/apache/tapestry5/corelib/components/AnyTest.java",
                "sha": "463c8ba3c00af3b3fa81ba81a25b1140b44e0127",
                "status": "modified"
            }
        ],
        "message": "TAP5-1031: NPE from Any component when invoking getClientId() before the component renders\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@939873 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tapestry-5/commit/ed3561518dfd4860075c05a81e018297de960611",
        "repo": "tapestry-5",
        "unit_tests": [
            "AnyTest.java"
        ]
    },
    "tapestry-5_c18f3fb": {
        "bug_id": "tapestry-5_c18f3fb",
        "commit": "https://github.com/apache/tapestry-5/commit/c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/src/site/apt/dev/bible.apt",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/src/site/apt/dev/bible.apt?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 1,
                "filename": "src/site/apt/dev/bible.apt",
                "patch": "@@ -122,7 +122,7 @@ Evolving Components\n \n Evolving Interfaces\n \n-  Tapestry users interfaces quite extensively.\n+  Tapestry uses interfaces quite extensively.\n \n   Interfaces fall into two categories: service interfaces called by user code, and interfaces implemented by user code.\n ",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/src/site/apt/dev/bible.apt",
                "sha": "b46d996d1a126bc1cf0fa30d80983f765d2a64f7",
                "status": "modified"
            },
            {
                "additions": 112,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/src/site/apt/guide/mixins.apt",
                "changes": 116,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/src/site/apt/guide/mixins.apt?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 4,
                "filename": "src/site/apt/guide/mixins.apt",
                "patch": "@@ -93,7 +93,7 @@ public class AutocompleteField extendes TextField\n   attribute of the annotation will be used to determine the mixin class name:\n   \n +---+\n-public class AutocompleteField extendes TextField\n+public class AutocompleteField extends TextField\n {\n   @Mixin(\"Autocomplete\")\n   private Object autocompleteMixin;\n@@ -123,7 +123,76 @@ Mixin Parameters\n   private TextField userId;\n +-----+\n \n-  \n+Binding the parameter of the core component\n+\n+  It is sometimes desirable to access the current value of a parameter defined in the component associated with the\n+  mixin. For example: normally, when the textfield component is marked disabled, it renders a text field with a disabled\n+  attribute, but you want it to output the (plaintext) value when disabled.  A mixin for this purpose would need access\n+  to at least the disabled, and value parameters, and possibly the translate parameter (for a client-side representation).\n+  You can access the disabled parameter via @InjectContainer and checking isDisabled on the field, but textfield\n+  currently provides no access to value or translate.  In this case, you can bind the core-component parameter using the\n+  @BindParameter annotation:\n+\n++-----+\n+  public class MyMixin\n+  {\n+    @BindParameter\n+    private boolean disabled;\n+\n+    @BindParameter\n+    private FieldTranslator translate;\n+\n+    @BindParameter\n+    private Object value;\n+\n+    Boolean beginRender(MarkupWriter writer)\n+    {\n+        ...\n+        if (disabled)\n+        {\n+           ...\n+           String stringValue = translate.toClient(value));\n+           ...\n+        }\n+        ...\n+    }\n+    ....\n++-----+\n+\n+  Tapestry will \"link\" the disabled, translate, and value fields above to parameters of the same name on the\n+  associated component.  The fields are not parameters to the mixin, but local copies\n+  of the component parameter.  They are cached only if the associated component parameter is cached.  They are read-write,\n+  and Tapestry handles synchronizing the value between mixins and the associated component such that even with a cached\n+  parameter, components and mixins will share the same value for a given parameter/bound-parameter during render.\n+  Only declared parameters of the associated components may be bound.\n+  \n+  By default, Tapestry will bind the parameter with the same name as the field. You can explicitly declare the parameter\n+  to bind via the value attribute:\n+\n++-----+\n+  @BindParameter(\"translate\")\n+  private FieldTranslator translator;\n++-----+\n+\n+  In same cases, a mixin will be used on different components using different names for a similar parameter type.\n+  For instance, BeanEditor has an \"object\" parameter; most form fields have a \"value\" parameter, and Grid has a\n+  \"source\" parameter.  These parameters have different names but share the feature of being the \"principle\" parameter\n+  on which the components are acting.  A mixin useable by all three components can specify multiple potential\n+  parameter values to bind.  The first value that matches a declared parameter of the associated component will be used:\n+\n++-----+\n+public class MyMixin\n+{\n+  ...\n+  @BindParameter({\"value\",\"object\",\"source\"})\n+  private Object principalObject;\n+  ...\n+}\n++-----+\n+\n+  \"MyMixin\" can be used on a textfield (principalObject is bound to \"value\"), on BeanEditor or BeanDisplay\n+  (principalObject is bound to \"object\"), or on Grid or Loop (principalObject is bound to \"source\").\n+\n Render Phase Ordering\n \n   All mixins for a component execute their render phase methods <before> the component's render phase\n@@ -132,5 +201,44 @@ Render Phase Ordering\n   \n   Exception: Mixins whose class is annotated with\n   {{{../apidocs/org/apache/tapestry5/annotations/MixinAfter.html}MixinAfter}} are ordered\n-  <after> the component, not before.  \n-  \n\\ No newline at end of file\n+  <after> the component, not before.\n+\n+  Withing a given phase and class (@MixinAfter vs. mixin before), mixin ordering is determined by the ordering\n+  constraints specified in the mixin definitions.  The constraint definitions follow the same conventions as\n+  {{{../tapestry-ioc/order.html}ordered service configurations}}.  How you specify the constraints depends\n+  on how the mixin is specified.\n+\n+  Implementation Mixin:\n+\n++-----+\n+  @Mixin(\"Autocomplete\",order={\"before:DiscardBody\",\"after:RenderDisabled\"}\n+  private TextField userId;\n++-----+\n+\n+  Template-specified instance mixins:\n+\n++-----+\n+  \\<input t:id=\"myfield\" t:mixins=\"autocomplete::before:discardbody;after:renderdisabled,\n+          defaultfromcookie::before:autocomplete\"/\\>\n++-----+\n+\n+  @Mixins-specified instance mixins:\n+\n++-----+\n+  @Component(...)\n+  @Mixins(\"Autocomplete::before:discardbody;after:renderdisabled\",\"DefaultFromCookie::before:autocomplete\"))\n+  private TextField userId;\n++-----+\n+\n+  @MixinClasses-specified instance mixins:\n+\n++-----+\n+  @Component(...)\n+  @MixinClasses(value={Autocomplete.class,DefaultFromCookie.class},\n+                order={\"before:discardbody;after:renderdisabled\",\"before:autocomplete\")\n++-----+\n+\n+  The ordering is always specified in terms of the order of the \"forward\" rendering process (setupRender,\n+  beginRender, etc.). When the \"reverse\" rendering phases (afterRender, etc.) occur, the mixin order is exactly reversed.\n+  Mixins which have no associated ordering constraints will be ordered in a manner which is consistent with the\n+  specified constraints for all other mixins, but is otherwise unspecified.",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/src/site/apt/guide/mixins.apt",
                "sha": "1b6e143dd2f2323b1ed9195267d535a448a60a31",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/src/site/apt/guide/rendering.apt",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/src/site/apt/guide/rendering.apt?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 3,
                "filename": "src/site/apt/guide/rendering.apt",
                "patch": "@@ -289,12 +289,14 @@ Method Conflicts and Ordering\n   the component's render phase methods.  If a mixin extends from a base class, the mixin's\n   parent class methods execute before the mixin subclass' render phase methods.\n   \n-  The order in which the mixins execute is not defined at this time.\n-  \n   Exception: Mixins whose class is annotated with\n   {{{../apidocs/org/apache/tapestry5/annotations/MixinAfter.html}MixinAfter}} are ordered\n   <after> the component, not before.\n-  \n+\n+  The order in which the mixins of a given class (@MixinAfter or mixins before) execute is determined\n+  by the ordering constraints specified for the mixins. If no constrains are provided, the order is undefined.\n+  See {{{mixins.html}component mixins} for more details.\n+\n * Parents before Child\n \n   Ordering is always parent-first.  Methods defined in the parent class are always invoked",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/src/site/apt/guide/rendering.apt",
                "sha": "5604a11bef4ab8f02502ed0134c96dcc853c7ed1",
                "status": "modified"
            },
            {
                "additions": 49,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/annotations/BindParameter.java",
                "changes": 49,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/annotations/BindParameter.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/annotations/BindParameter.java",
                "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.annotations;\n+\n+import java.lang.annotation.Target;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+/**\n+ * Designates a field in a mixin which is bound to the parameter of the containing\n+ * component corresponding to the value of the annotation. If no value is specified,\n+ * the bound parameter name is assumed to match the field name of the mixin.\n+ *\n+ * For example, a mixin intended to work with form fields would define a field named\n+ * \"value\", marked by this annotation.  The user-variable bound to the component's value\n+ * parameter would ultimately be bound in a chain:\n+ * uservariable <=> mixin.value <=> component.value.\n+ * Changes to any one value in the chain will be propagated accordingly.\n+ *\n+ * @since 5.2.0.0\n+ */\n+@Target(ElementType.FIELD)\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface BindParameter\n+{\n+\n+    /**\n+     * @return the name of the mixin bound-parameter, exactly as for the Parameter annotation.\n+     */\n+    String name() default \"\";\n+    /**\n+     * @return the name(s) of the parent parameter to bind. Defaults to the name of the mixin field. If more than one\n+     *         name is specified, the first name matching a declared parameter of the core component will be used.\n+     */\n+    String[] value() default {\"\"};\n+}",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/annotations/BindParameter.java",
                "sha": "074b4dff25af5038b12d506decca47e8ec8e76df",
                "status": "added"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/annotations/Mixin.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/annotations/Mixin.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 1,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/annotations/Mixin.java",
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006, 2007 The Apache Software Foundation\n+// Copyright 2006, 2007, 2009 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -36,4 +36,12 @@\n      * the mixin class to instantiate and attach to the component.\n      */\n     String value() default \"\";\n+\n+    /**\n+     * Defines an ordering constraint for when the mixin should be applied in relation to other mixins.\n+     * The string is analagous exactly to the strings used to define ordered contributions.\n+     * Eg: @Mixin(order={\"before:mixina\",\"after:mixinb\"}). The ids are mixin names and are case insensitive.\n+     * @since 5.2.0.0\n+     */\n+    String[] order() default {};\n }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/annotations/Mixin.java",
                "sha": "8b6e0c5b85d7c5e9442367cd41d9e0de1b09139a",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/annotations/MixinClasses.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/annotations/MixinClasses.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 1,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/annotations/MixinClasses.java",
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006 The Apache Software Foundation\n+// Copyright 2006, 2009 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -32,4 +32,15 @@\n public @interface MixinClasses\n {\n     Class[] value();\n+\n+    /**\n+     * Specifies the ordering constraints for each mixin specified by value. Order may be a 0-length array signifying\n+     * no ordering for any mixin specified by value.  Otherwise, it must be the same length as value.\n+     * Each String can specify multiple constraints, separated by ; (before:mixina;after:mixinb).\n+     * Alternatively, the entry may be null or the empty string to specify no ordering constraints for that particular\n+     * mixin.\n+     * @since 5.2.0.0\n+     */\n+    String[] order() default {};\n+\n }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/annotations/MixinClasses.java",
                "sha": "a0c38ae92e4d5b736b23bf43e2be3eec8879a6db",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/annotations/Mixins.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/annotations/Mixins.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 2,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/annotations/Mixins.java",
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006 The Apache Software Foundation\n+// Copyright 2006, 2009 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -33,7 +33,11 @@\n {\n \n     /**\n-     * One or more mixin type names, from which actual mixin class names can be resolved.\n+     * One or more mixin type names and optional constraints, from which actual mixin class names can be resolved.\n+     * For specifying constraints, do:\n+     * mixinname::constraint1;constraint2\n+     * For instance:\n+     * mixina::before:mixinb;after:mixinc;after:mixind\n      */\n     String[] value();\n }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/annotations/Mixins.java",
                "sha": "d59389719e677ded91db6f40ca64455cb2aa3830",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/InternalComponentResources.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/InternalComponentResources.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 1,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/InternalComponentResources.java",
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006, 2007, 2008 The Apache Software Foundation\n+// Copyright 2006, 2007, 2008, 2009 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -62,4 +62,14 @@\n      * @return object used to read and update the parameter\n      */\n     ParameterAccess getParameterAccess(String parameterName);\n+\n+    /**\n+     * Gets access object suitable for handling mixin fields which are bound to a parameter of the core component\n+     * @param boundParameterName the name of the mixin field that should be linked to the core component's field.\n+     * @param parentParameterNames the list of parameter names to try in the parent. The first name that matches a\n+     *          declared parameter name in the core component will be used. This allows BindParameter to be used with\n+     *          mixins that have a similar parameter type with different parameter names (eg:\n+     * @since 5.2.0.0\n+     */\n+    ParameterAccess getContainerBoundParameterAccess(String boundParameterName, String... parentParameterNames);\n }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/InternalComponentResources.java",
                "sha": "7a313ff75f0293f4b600c987476d21645f7885bc",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/InternalComponentResourcesCommon.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/InternalComponentResourcesCommon.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/InternalComponentResourcesCommon.java",
                "patch": "@@ -56,6 +56,19 @@\n      */\n     Component getMixinByClassName(String mixinClassName);\n \n+    /**\n+     * Returns true if the mixin named by mixinClassName is associated with the core component\n+     * @param mixinClassName fully qualified class name\n+     * @since 5.2.0.0\n+     */\n+    boolean isMixingIn(String mixinClassName);\n+\n+    /**\n+     * Registers an action that should be executed immediately after page load.\n+     * @since 5.2.0.0\n+     */\n+    void deferLoadAction(Runnable action);\n+\n     /**\n      * Constructs a map linking informal parameters to the corresponding bindings.\n      *",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/InternalComponentResourcesCommon.java",
                "sha": "1703d3681c6fe2707fd5cd79e2673bf611e20b7d",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/ParameterAccess.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/ParameterAccess.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 1,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/ParameterAccess.java",
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2008 The Apache Software Foundation\n+// Copyright 2008, 2009 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -77,4 +77,25 @@\n      * @see org.apache.tapestry5.Binding#getBindingType()\n      */\n     Class getBoundType();\n+\n+    /**\n+     * Registers the given ParameterChangeListener. Registering a listener which is already \n+     * registered is silently ignored.\n+     * @param listener\n+     * @since 5.2.0.0\n+     */\n+    void registerParameterChangeListener(ParameterChangeListener listener);\n+\n+    /**\n+     * Unregisters the given listener. Unregistering a listener that isn't registered is not an error.\n+     * @since 5.2.0.0\n+     */\n+    void unregisterParameterChangeListener(ParameterChangeListener listener);\n+\n+    /**\n+     * @return true if the parameter value should be cached within a component during rendering\n+     * @since 5.2.0.0\n+     */\n+    boolean shouldCache();\n+\n }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/ParameterAccess.java",
                "sha": "1cb11eca824006c895effd59eb843f26eea5322d",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/ParameterChangeListener.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/ParameterChangeListener.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/ParameterChangeListener.java",
                "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.internal;\n+\n+/**\n+ * An object that listens for changes to the underlying values in parameters.\n+ * This is currently used to ensure that mixin fields annotated with\n+ * {@link org.apache.tapestry5.annotations.BindParameter} and the underlying component variable will stay properly\n+ * in sync, regardless of parameter caching.\n+ * @since 5.2.0.0\n+ */\n+public interface ParameterChangeListener\n+{\n+    /**\n+     * Called when the value of a component <code>@Parameter</code> field changes.\n+     * Note that this event will be fired regardless of whether the parameter is bound.\n+     *\n+     * @param event\n+     */\n+    void parameterChanged(ParameterChangedEvent event);\n+}",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/ParameterChangeListener.java",
                "sha": "a2a623488948ab912eb4ddf8e3b3b6b22556a935",
                "status": "added"
            },
            {
                "additions": 49,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/ParameterChangedEvent.java",
                "changes": 49,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/ParameterChangedEvent.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/ParameterChangedEvent.java",
                "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.internal;\n+\n+/**\n+ * Event associated with a parameter value changing, used by <code>ParameterChangeListener</code>s.\n+ * @since 5.2.0.0\n+ */\n+public class ParameterChangedEvent<T>\n+{\n+    private final String parameterName;\n+    private final T newValue;\n+\n+\n+    public ParameterChangedEvent(String parameterName, T newValue)\n+    {\n+        this.parameterName = parameterName;\n+        this.newValue = newValue;\n+    }\n+\n+    /**\n+     * @return the name of the parameter that changed.\n+     */\n+    public String getParameterName()\n+    {\n+        return parameterName;\n+    }\n+\n+    /**\n+     * @return the new value. May be null.\n+     */\n+    public T getNewValue()\n+    {\n+        return newValue;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/ParameterChangedEvent.java",
                "sha": "c59aba78d47026e8ac76d3ce1a2b06f19183739e",
                "status": "added"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/TapestryInternalUtils.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/TapestryInternalUtils.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/TapestryInternalUtils.java",
                "patch": "@@ -17,6 +17,7 @@\n import org.apache.tapestry5.*;\n import org.apache.tapestry5.ioc.Messages;\n import org.apache.tapestry5.ioc.Resource;\n+import org.apache.tapestry5.ioc.Orderable;\n import org.apache.tapestry5.ioc.internal.util.CollectionFactory;\n import org.apache.tapestry5.ioc.internal.util.Defense;\n import org.apache.tapestry5.ioc.internal.util.InternalUtils;\n@@ -474,4 +475,28 @@ public String toString()\n             }\n         };\n     }\n+\n+    /**\n+     *\n+     * @param mixinDef the original mixin definition.\n+     * @return an Orderable whose id is the mixin name.\n+     */\n+    public static Orderable<String> mixinTypeAndOrder(String mixinDef) {\n+        int idx = mixinDef.indexOf(\"::\");\n+        if (idx == -1)\n+        {\n+            return new Orderable(mixinDef,mixinDef);\n+        }\n+        String type = mixinDef.substring(0,idx);\n+        String[] constraints = splitMixinConstraints(mixinDef.substring(idx+2));\n+\n+        return new Orderable(type,type,constraints);\n+    }\n+\n+\n+    public static String[] splitMixinConstraints(String s)\n+    {\n+        return InternalUtils.isBlank(s)?null:s.split(\";\");\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/TapestryInternalUtils.java",
                "sha": "1558c2840aeda187ad5724b2ff11b8f12c014bc7",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/model/MutableComponentModelImpl.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/model/MutableComponentModelImpl.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 3,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/model/MutableComponentModelImpl.java",
                "patch": "@@ -54,6 +54,8 @@\n \n     private List<String> mixinClassNames;\n \n+    private Map<String, String[]> mixinOrders;\n+\n     private boolean informalParametersSupported;\n \n     private boolean mixinAfter;\n@@ -104,7 +106,7 @@ public String getComponentClassName()\n         return componentClassName;\n     }\n \n-    public void addParameter(String name, boolean required, boolean allowNull, String defaultBindingPrefix)\n+    public void addParameter(String name, boolean required, boolean allowNull, String defaultBindingPrefix, boolean cached)\n     {\n         Defense.notBlank(name, \"name\");\n         Defense.notBlank(defaultBindingPrefix, \"defaultBindingPrefix\");\n@@ -117,7 +119,16 @@ public void addParameter(String name, boolean required, boolean allowNull, Strin\n         if (parameters.containsKey(name))\n             throw new IllegalArgumentException(ModelMessages.duplicateParameter(name, componentClassName));\n \n-        parameters.put(name, new ParameterModelImpl(name, required, allowNull, defaultBindingPrefix));\n+        parameters.put(name, new ParameterModelImpl(name, required, allowNull, defaultBindingPrefix,cached));\n+    }\n+\n+    public void addParameter(String name, boolean required, boolean allowNull, String defaultBindingPrefix)\n+    {\n+        //assume /false/ for the default because:\n+        //if the parameter is actually cached, the only effect will be to reduce that optimization in certain\n+        //scenarios (mixin BindParameter).  But if the value is NOT cached but we say it is,\n+        //we'll get incorrect behavior.\n+        addParameter(name,required,allowNull,defaultBindingPrefix,false);\n     }\n \n     public ParameterModel getParameterModel(String parameterName)\n@@ -220,11 +231,16 @@ public boolean isRootClass()\n         return parentModel == null;\n     }\n \n-    public void addMixinClassName(String mixinClassName)\n+    public void addMixinClassName(String mixinClassName, String... order)\n     {\n         if (mixinClassNames == null) mixinClassNames = CollectionFactory.newList();\n \n         mixinClassNames.add(mixinClassName);\n+        if (order != null && order.length > 0)\n+        {\n+            if (mixinOrders == null) mixinOrders = CollectionFactory.newCaseInsensitiveMap();\n+            mixinOrders.put(mixinClassName,order);\n+        }\n     }\n \n     public List<String> getMixinClassNames()\n@@ -324,4 +340,9 @@ public boolean handlesEvent(String eventType)\n                ? false\n                : parentModel.handlesEvent(eventType);\n     }\n+\n+    public String[] getOrderForMixin(String mixinClassName)\n+    {\n+        return InternalUtils.get(mixinOrders,mixinClassName);\n+    }\n }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/model/MutableComponentModelImpl.java",
                "sha": "aa6f55616f5fead29af8a0c566521838d139f1a3",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/model/MutableEmbeddedComponentModelImpl.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/model/MutableEmbeddedComponentModelImpl.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 1,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/model/MutableEmbeddedComponentModelImpl.java",
                "patch": "@@ -46,6 +46,8 @@\n      */\n     private List<String> mixinClassNames;\n \n+    private Map<String,String[]> mixinConstraints;\n+\n     public MutableEmbeddedComponentModelImpl(String id, String componentType, String componentClassName,\n                                              String declaredClass, boolean inheritInformalParameters, Location location)\n     {\n@@ -106,11 +108,12 @@ public String getParameterValue(String parameterName)\n         return Collections.unmodifiableList(mixinClassNames);\n     }\n \n-    public void addMixin(String mixinClassName)\n+    public void addMixin(String mixinClassName, String... constraints)\n     {\n         if (mixinClassNames == null)\n         {\n             mixinClassNames = CollectionFactory.newList();\n+            mixinConstraints = CollectionFactory.newCaseInsensitiveMap();\n         }\n         else\n         {\n@@ -119,6 +122,7 @@ public void addMixin(String mixinClassName)\n         }\n \n         mixinClassNames.add(mixinClassName);\n+        mixinConstraints.put(mixinClassName,constraints);\n     }\n \n     public boolean getInheritInformalParameters()\n@@ -137,4 +141,9 @@ public void setPublishedParameters(List<String> parameterNames)\n     {\n         return publishedParameters;\n     }\n+\n+    public String[] getConstraintsForMixin(String mixinClassName)\n+    {\n+        return InternalUtils.get(mixinConstraints,mixinClassName);\n+    }\n }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/model/MutableEmbeddedComponentModelImpl.java",
                "sha": "21021d3643f112fa703cb168ea5ba1f822d35016",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/model/ParameterModelImpl.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/model/ParameterModelImpl.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 2,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/model/ParameterModelImpl.java",
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006, 2008 The Apache Software Foundation\n+// Copyright 2006, 2008, 2009 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -26,12 +26,20 @@\n \n     private final String defaultBindingPrefix;\n \n-    public ParameterModelImpl(String name, boolean required, boolean allowNull, String defaultBindingPrefix)\n+    private final boolean cached;\n+\n+    public ParameterModelImpl(\n+            String name,\n+            boolean required,\n+            boolean allowNull,\n+            String defaultBindingPrefix,\n+            boolean cached)\n     {\n         this.name = name;\n         this.required = required;\n         this.allowNull = allowNull;\n         this.defaultBindingPrefix = defaultBindingPrefix;\n+        this.cached = cached;\n     }\n \n     public String getName()\n@@ -53,4 +61,9 @@ public boolean isAllowNull()\n     {\n         return allowNull;\n     }\n+\n+    public boolean isCached()\n+    {\n+        return cached;\n+    }\n }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/model/ParameterModelImpl.java",
                "sha": "f825afa0cad020ece4d34669a9ca45febf5c4879",
                "status": "modified"
            },
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/ComponentAssemblerImpl.java",
                "changes": 70,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/ComponentAssemblerImpl.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 32,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/ComponentAssemblerImpl.java",
                "patch": "@@ -107,10 +107,11 @@ public ComponentPageElement assembleRootComponent(Page page)\n         }\n         catch (RuntimeException ex)\n         {\n-            throw new RuntimeException(String.format(\"Exception assembling root component of page %s: %s\",\n-                                                     pageAssembly.page.getName(),\n-                                                     InternalUtils.toMessage(ex)),\n-                                       ex);\n+            throw new RuntimeException(\n+                                PageloadMessages.exceptionAssemblingRootComponent(\n+                                        pageAssembly.page.getName(),\n+                                        InternalUtils.toMessage(ex)),\n+                                ex);\n         }\n     }\n \n@@ -120,7 +121,9 @@ private void addRootComponentMixins(ComponentPageElement element)\n         {\n             Instantiator mixinInstantiator = instantiatorSource.getInstantiator(className);\n \n-            element.addMixin(InternalUtils.lastTerm(className), mixinInstantiator);\n+            ComponentModel model = instantiator.getModel();\n+            element.addMixin(InternalUtils.lastTerm(className),\n+                    mixinInstantiator,model.getOrderForMixin(className));\n         }\n     }\n \n@@ -159,13 +162,15 @@ public void assembleEmbeddedComponent(PageAssembly pageAssembly, EmbeddedCompone\n         }\n         catch (RuntimeException ex)\n         {\n-            String message = String.format(\"Exception assembling embedded component '%s' (of type %s, within %s): %s\",\n-                                           embeddedId,\n-                                           instantiator.getModel().getComponentClassName(),\n-                                           container.getCompleteId(),\n-                                           InternalUtils.toMessage(ex));\n-\n-            throw new TapestryException(message, location, ex);\n+            throw new TapestryException(\n+                            PageloadMessages.exceptionAssemblingEmbeddedComponent(\n+                                    embeddedId,\n+                                    instantiator.getModel().getComponentClassName(),\n+                                    container.getCompleteId(),\n+                                    InternalUtils.toMessage(ex)\n+                            ),\n+                            location,\n+                            ex);\n         }\n     }\n \n@@ -232,9 +237,7 @@ public void validateEmbeddedIds(Map<String, Location> componentIds, Resource tem\n             String className = getModel().getComponentClassName();\n \n             throw new RuntimeException(\n-                    String.format(\n-                            \"Embedded component(s) %s are defined within component class %s (or a super-class of %s), \" +\n-                                    \"but are not present in the component template (%s).\",\n+                    PageloadMessages.embeddedComponentsNotInTemplate(\n                             InternalUtils.joinSorted(embeddedIds.keySet()),\n                             className,\n                             InternalUtils.lastTerm(className),\n@@ -263,6 +266,11 @@ public EmbeddedComponentAssembler createEmbeddedAssembler(String embeddedId, Str\n     {\n         try\n         {\n+\n+            if (InternalUtils.isBlank(componentClassName))\n+            {\n+                throw new TapestryException(PageloadMessages.missingComponentType(),location,null);\n+            }\n             EmbeddedComponentAssemblerImpl embedded = new EmbeddedComponentAssemblerImpl(assemblerSource,\n                                                                                          instantiatorSource,\n                                                                                          componentClassResolver,\n@@ -288,14 +296,12 @@ public EmbeddedComponentAssembler createEmbeddedAssembler(String embeddedId, Str\n \n                     if (existingEmbeddedId != null)\n                     {\n-                        String message = String.format(\n-                                \"Parameter '%s' of embedded component '%s' can not be published as a parameter of component %s, as it has previously been published by embedded component '%s'.\",\n-                                publishedParameterName,\n-                                embeddedId,\n-                                instantiator.getModel().getComponentClassName(),\n-                                existingEmbeddedId);\n-\n-                        throw new TapestryException(message, location, null);\n+                        throw new TapestryException(\n+                                PageloadMessages.parameterAlreadyPublished(\n+                                        publishedParameterName,\n+                                        embeddedId,\n+                                        instantiator.getModel().getComponentClassName(),\n+                                        existingEmbeddedId) , location, null);\n                     }\n \n                     publishedParameterToEmbeddedId.put(publishedParameterName, embeddedId);\n@@ -307,12 +313,14 @@ public EmbeddedComponentAssembler createEmbeddedAssembler(String embeddedId, Str\n         }\n         catch (Exception ex)\n         {\n-            String message = String.format(\"Failure creating embedded component '%s' of %s: %s\",\n-                                           embeddedId,\n-                                           instantiator.getModel().getComponentClassName(),\n-                                           InternalUtils.toMessage(ex));\n-\n-            throw new TapestryException(message, location, ex);\n+            throw new TapestryException(\n+                    PageloadMessages.failureCreatingEmbeddedComponent(\n+                            embeddedId,\n+                            instantiator.getModel().getComponentClassName(),\n+                            InternalUtils.toMessage(ex)\n+                    ),\n+                    location,\n+                    ex);\n         }\n     }\n \n@@ -354,9 +362,7 @@ public String getDefaultBindingPrefix(String metaDefault)\n \n         if (innerBinder == null)\n         {\n-            String message = String.format(\n-                    \"Parameter '%s' of component %s is improperly published from embedded component '%s' (where it does not exist). \" +\n-                            \"This may be a typo in the publishParameters attribute of the @Component annotation.\",\n+            String message = PageloadMessages.publishedParameterNonexistant(\n                     parameterName,\n                     instantiator.getModel().getComponentClassName(),\n                     embeddedId);",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/ComponentAssemblerImpl.java",
                "sha": "f26599a09ee722f93fa3bd6cd7ca8082e9737355",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/CompositeRenderCommand.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/CompositeRenderCommand.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 2,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/CompositeRenderCommand.java",
                "patch": "@@ -49,8 +49,7 @@ public void endComponent()\n         private void nyi(String methodName)\n         {\n             throw new IllegalStateException(\n-                    String.format(\"RenderQueue method %s() is not implemented for composited render commands.\",\n-                                  methodName));\n+                    PageloadMessages.compositeRenderCommandMethodNotImplemented(methodName));\n         }\n     };\n ",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/CompositeRenderCommand.java",
                "sha": "5ace7e5316d801fa4627a5552d5c04f3261faa42",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/EmbeddedComponentAssemblerImpl.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/EmbeddedComponentAssemblerImpl.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 15,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/EmbeddedComponentAssemblerImpl.java",
                "patch": "@@ -15,10 +15,12 @@\n package org.apache.tapestry5.internal.pageload;\n \n import org.apache.tapestry5.internal.TapestryInternalUtils;\n+\n import org.apache.tapestry5.internal.services.ComponentInstantiatorSource;\n import org.apache.tapestry5.internal.services.Instantiator;\n import org.apache.tapestry5.internal.structure.ComponentPageElement;\n import org.apache.tapestry5.ioc.Location;\n+import org.apache.tapestry5.ioc.Orderable;\n import org.apache.tapestry5.ioc.internal.util.CollectionFactory;\n import org.apache.tapestry5.ioc.internal.util.InternalUtils;\n import org.apache.tapestry5.ioc.internal.util.TapestryException;\n@@ -42,6 +44,7 @@\n     private final Location location;\n \n     private final Map<String, Instantiator> mixinIdToInstantiator = CollectionFactory.newCaseInsensitiveMap();\n+    private final Map<String, String[]> mixinsIdToOrderConstraints = CollectionFactory.newCaseInsensitiveMap();\n \n     /**\n      * Maps parameter names (both simple, and qualified with the mixin id) to the corresponding QualifiedParameterName.\n@@ -85,7 +88,7 @@ public EmbeddedComponentAssemblerImpl(ComponentAssemblerSource assemblerSource,\n \n         for (String className : componentModel.getMixinClassNames())\n         {\n-            addMixin(className);\n+            addMixin(className,componentModel.getOrderForMixin(className));\n         }\n \n         // If there's an embedded model (i.e., there was an @Component annotation)\n@@ -95,17 +98,18 @@ public EmbeddedComponentAssemblerImpl(ComponentAssemblerSource assemblerSource,\n         {\n             for (String className : embeddedModel.getMixinClassNames())\n             {\n-                addMixin(className);\n+                addMixin(className,embeddedModel.getConstraintsForMixin(className));\n             }\n         }\n \n         // And the template may include a t:mixins element to define yet more mixin.\n-\n-        for (String mixinType : TapestryInternalUtils.splitAtCommas(templateMixins))\n+        // Template strings specified as:\n+        for (String mixinDef : TapestryInternalUtils.splitAtCommas(templateMixins))\n         {\n-            String className = componentClassResolver.resolveMixinTypeToClassName(mixinType);\n+            Orderable<String> order = TapestryInternalUtils.mixinTypeAndOrder(mixinDef);\n+            String className = componentClassResolver.resolveMixinTypeToClassName(order.getId());\n \n-            addMixin(className);\n+            addMixin(className,order.getConstraints());\n         }\n \n         informalParametersMixinId = prescanMixins();\n@@ -152,20 +156,20 @@ private void updateParameterNameToQualified(String mixinId, ComponentModel model\n         }\n     }\n \n-    private void addMixin(String className)\n+    private void addMixin(String className, String... order)\n     {\n         Instantiator mixinInstantiator = instantiatorSource.getInstantiator(className);\n \n         String mixinId = InternalUtils.lastTerm(className);\n \n         if (mixinIdToInstantiator.containsKey(mixinId))\n             throw new TapestryException(\n-                    String.format(\"Mixins applied to a component must be unique. Mixin '%s' has already been applied.\",\n-                                  mixinId),\n+                    PageloadMessages.uniqueMixinRequired(mixinId),\n                     location, null);\n \n \n         mixinIdToInstantiator.put(mixinId, mixinInstantiator);\n+        mixinsIdToOrderConstraints.put(mixinId, order);\n     }\n \n     private ComponentModel getModel(String className)\n@@ -186,11 +190,10 @@ public ParameterBinder createParameterBinder(String parameterName)\n             String mixinId = parameterName.substring(0, dotx);\n             if (!mixinIdToInstantiator.containsKey(mixinId))\n             {\n-                String message = String.format(\"Mixin id for parameter '%s' not found. Attached mixins: %s.\",\n-                                               parameterName,\n-                                               InternalUtils.joinSorted(mixinIdToInstantiator.keySet()));\n-\n-                throw new TapestryException(message, location, null);\n+                throw new TapestryException(\n+                        PageloadMessages.mixinidForParamnotfound(parameterName, mixinIdToInstantiator.keySet()),\n+                        location, \n+                        null);\n             }\n         }\n         else\n@@ -244,7 +247,7 @@ public void addMixinsToElement(ComponentPageElement newElement)\n             String mixinId = entry.getKey();\n             Instantiator instantiator = entry.getValue();\n \n-            newElement.addMixin(mixinId, instantiator);\n+            newElement.addMixin(mixinId, instantiator, mixinsIdToOrderConstraints.get(mixinId));\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/EmbeddedComponentAssemblerImpl.java",
                "sha": "a749d03f60c911bfee8a086f113a5a66e329a081",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageAssembly.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageAssembly.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 5,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageAssembly.java",
                "patch": "@@ -82,11 +82,10 @@ void checkForRecursion(String componentClassName, Location location)\n \n             if (e.getComponentResources().getComponentModel().getComponentClassName().equals(componentClassName))\n             {\n-                String message = String.format(\n-                        \"The template for component %s is recursive (contains another direct or indirect reference to component %<s). This is not supported (components may not contain themselves).\",\n-                        componentClassName);\n-\n-                throw new TapestryException(message, location, null);\n+                throw new TapestryException(\n+                        PageloadMessages.recursiveTemplate(componentClassName),\n+                        location, \n+                        null);\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageAssembly.java",
                "sha": "72345e334576a27c0308facbfffa0ae1bb86fff7",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageLoaderImpl.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageLoaderImpl.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 23,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageLoaderImpl.java",
                "patch": "@@ -305,13 +305,13 @@ private void queueOverrideTokensForExtensionPoint(ExtensionPointToken extensionP\n                                                       Stack<TemplateToken> queue,\n                                                       List<ComponentTemplate> overrideSearch)\n     {\n-        String extentionPointId = extensionPointToken.getExtentionPointId();\n+        String extensionPointId = extensionPointToken.getExtensionPointId();\n \n         // Work up from the component, through its base classes, towards the last non-extension template.\n \n         for (ComponentTemplate t : overrideSearch)\n         {\n-            List<TemplateToken> tokens = t.getExtensionPointTokens(extentionPointId);\n+            List<TemplateToken> tokens = t.getExtensionPointTokens(extensionPointId);\n \n             if (tokens != null)\n             {\n@@ -324,7 +324,7 @@ private void queueOverrideTokensForExtensionPoint(ExtensionPointToken extensionP\n         // not find an override, somewhere, for it.\n \n         throw new TapestryException(\n-                String.format(\"Could not find an override for extension point '%s'.\", extentionPointId),\n+                PageloadMessages.couldNotFindOverride(extensionPointId),\n                 extensionPointToken.getLocation(), null);\n     }\n \n@@ -343,9 +343,7 @@ private void queueOverrideTokensForExtensionPoint(ExtensionPointToken extensionP\n \n             if (parentModel == null)\n             {\n-                throw new RuntimeException(String.format(\n-                        \"Component %s uses an extension template, but does not have a parent component.\",\n-                        model.getComponentClassName()));\n+                throw new RuntimeException(PageloadMessages.noParentForExtension(model));\n             }\n \n             ComponentTemplate parentTemplate = templateSource.getTemplate(parentModel, assembler.getLocale());\n@@ -433,7 +431,7 @@ private void processTemplateToken(AssemblerContext context)\n                 break;\n \n             default:\n-                throw new IllegalStateException(\"Not yet implemented: \" + context.peekType());\n+                throw new IllegalStateException(PageloadMessages.tokenNotImplemented(context.peekType()));\n         }\n     }\n \n@@ -528,12 +526,10 @@ public void execute(PageAssembly pageAssembly)\n \n                 if (binder == null)\n                 {\n-                    String message = String.format(\n-                            \"Component %s does not include a formal parameter '%s' (and does not support informal parameters).\",\n-                            element.getCompleteId(),\n-                            parameterName);\n-\n-                    throw new TapestryException(message, token.getLocation(), null);\n+                    throw new TapestryException(\n+                            PageloadMessages.parameterNotSupported(element.getCompleteId(), parameterName), \n+                            token.getLocation(),\n+                            null);\n                 }\n \n                 binder.bind(pageAssembly.createdElement.peek(), binding);\n@@ -706,15 +702,10 @@ private EmbeddedComponentAssembler startComponent(AssemblerContext context)\n \n             if (InternalUtils.isNonBlank(modelType) && embeddedType != null)\n             {\n-                String message = String.format(\n-                        \"Embedded component '%s' provides a type attribute in the template ('%s') \" +\n-                                \"as well as in the component class ('%s'). \" +\n-                                \"You should not provide a type attribute in the template when defining an embedded component \" +\n-                                \"within the component class.\",\n-                        embeddedId, embeddedType, modelType\n-                );\n-\n-                throw new TapestryException(message, token, null);\n+                throw new TapestryException(\n+                        PageloadMessages.redundantEmbeddedComponentTypes(embeddedId,embeddedType,modelType),\n+                        token,\n+                        null);\n             }\n \n             embeddedType = modelType;\n@@ -882,7 +873,7 @@ public void execute(PageAssembly pageAssembly)\n      * Adds a deferred action to the PageAssembly, to handle connecting the embedded components' parameter to the\n      * container component's parameter once everything else has been built.\n      *\n-     * @param assembler\n+     * @param context\n      * @param parameterName\n      * @param containerParameterName\n      */",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageLoaderImpl.java",
                "sha": "cea25dc7a37cbe198e4a39d2b68d94d60d9b6e26",
                "status": "modified"
            },
            {
                "additions": 147,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageloadMessages.java",
                "changes": 147,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageloadMessages.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageloadMessages.java",
                "patch": "@@ -0,0 +1,147 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.internal.pageload;\n+\n+import org.apache.tapestry5.ioc.Messages;\n+import org.apache.tapestry5.ioc.Resource;\n+import org.apache.tapestry5.ioc.internal.util.MessagesImpl;\n+import org.apache.tapestry5.ioc.internal.util.InternalUtils;\n+import org.apache.tapestry5.internal.parser.TokenType;\n+import org.apache.tapestry5.model.ComponentModel;\n+\n+import java.util.Collection;\n+\n+/**\n+ * Localized exception message support for pageload-related classes.\n+ * @since 5.2.0.0\n+ */\n+final class PageloadMessages\n+{\n+\n+    private static final Messages MESSAGES = MessagesImpl.forClass(PageloadMessages.class);\n+\n+    private PageloadMessages()\n+    {\n+    }\n+\n+    public static String uniqueMixinRequired(String mixinId)\n+    {\n+        return MESSAGES.format(\"unique_mixin_required\", mixinId);\n+    }\n+\n+    public static String mixinidForParamnotfound(String parameterName, Collection<String> availableMixins)\n+    {\n+        return MESSAGES.format(\"mixinid_for_paramnotfound\", parameterName, InternalUtils.joinSorted(availableMixins));\n+    }\n+\n+    public static String missingComponentType()\n+    {\n+        return MESSAGES.get(\"missing_component_type\");\n+    }\n+\n+    public static String noMoreTokens()\n+    {\n+        return MESSAGES.get(\"no_more_tokens\");\n+    }\n+\n+    public static String couldNotFindOverride(String extensionPointId)\n+    {\n+        return MESSAGES.format(\"could_not_find_override\", extensionPointId);\n+    }\n+\n+    public static String noParentForExtension(ComponentModel model)\n+    {\n+        return MESSAGES.format(\"no_parent_for_extension\", model.getComponentClassName());\n+    }\n+\n+    public static String tokenNotImplemented(TokenType type)\n+    {\n+        return MESSAGES.format(\"token_not_implemented\", type.toString());\n+    }\n+\n+    public static String parameterNotSupported(String completeId, String parameterName)\n+    {\n+        return MESSAGES.format(\"parameter_not_supported\", completeId, parameterName);\n+    }\n+\n+    public static String redundantEmbeddedComponentTypes(String embeddedId, String embeddedType, String modelType)\n+    {\n+        return MESSAGES.format(\"redundant_embedded_component_types\", embeddedId, embeddedType, modelType);\n+    }\n+\n+    public static String recursiveTemplate(String componentClassName)\n+    {\n+        return MESSAGES.format(\"recursive_template\", componentClassName);\n+    }\n+\n+    public static String compositeRenderCommandMethodNotImplemented(String methodName)\n+    {\n+        return MESSAGES.format(\"composite_render_command_method_not_implemented\",methodName);\n+    }\n+\n+    public static String exceptionAssemblingRootComponent(String pageName, String exceptionMessage)\n+    {\n+        return MESSAGES.format(\"exception_assembling_root_component\",pageName,exceptionMessage);\n+    }\n+\n+    public static String exceptionAssemblingEmbeddedComponent(\n+            String embeddedId,\n+            String embeddedClassName,\n+            String containerId,\n+            String exception)\n+    {\n+        return MESSAGES.format(\"exception_assembling_embedded_component\",\n+                embeddedId,\n+                embeddedClassName,\n+                containerId,\n+                exception);\n+    }\n+\n+    public static String embeddedComponentsNotInTemplate(\n+            String joinedComponentIds,\n+            String qualifiedClassName,\n+            String simpleClassName,\n+            Resource templateResource)\n+    {\n+        return MESSAGES.format(\"embedded_components_not_in_template\",\n+                joinedComponentIds,\n+                qualifiedClassName,\n+                simpleClassName,\n+                templateResource);\n+    }\n+\n+    public static String parameterAlreadyPublished(\n+            String publishedParameterName, \n+            String embeddedId,\n+            String componentClassName,\n+            String existingEmbeddedId)\n+    {\n+        return MESSAGES.format(\"parameter_already_published\",\n+                publishedParameterName,\n+                embeddedId,\n+                componentClassName,\n+                existingEmbeddedId);\n+    }\n+\n+    public static String failureCreatingEmbeddedComponent(String embeddedId, String containerClass, String exception)\n+    {\n+        return MESSAGES.format(\"failure_creating_embedded_component\",embeddedId, containerClass, exception);\n+    }\n+\n+    public static String publishedParameterNonexistant(String parameterName, String publishingClass, String embeddedId)\n+    {\n+        return MESSAGES.format(\"published_parameter_nonexistant\", parameterName, publishingClass, embeddedId);\n+    }\n+}",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageloadMessages.java",
                "sha": "bcf5f7e472a02c7fc1694a6dfe0ca43da4a1b43b",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/TokenStreamImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/TokenStreamImpl.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 1,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/TokenStreamImpl.java",
                "patch": "@@ -45,7 +45,7 @@ public TokenType peekType()\n     private void checkMore()\n     {\n         if (!more())\n-            throw new IllegalStateException(\"No more template tokens.\");\n+            throw new IllegalStateException(PageloadMessages.noMoreTokens());\n     }\n \n     public <T extends TemplateToken> T next(Class<T> type)",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/TokenStreamImpl.java",
                "sha": "be2a6af13cd8e91e254a17fda653a1d4bdf275a6",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/parser/ExtensionPointToken.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/parser/ExtensionPointToken.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 5,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/parser/ExtensionPointToken.java",
                "patch": "@@ -25,16 +25,16 @@\n  */\n public class ExtensionPointToken extends TemplateToken\n {\n-    private final String extentionPointId;\n+    private final String extensionPointId;\n \n-    public ExtensionPointToken(String extentionPointId, Location location)\n+    public ExtensionPointToken(String extensionPointId, Location location)\n     {\n         super(TokenType.EXTENSION_POINT, location);\n-        this.extentionPointId = extentionPointId;\n+        this.extensionPointId = extensionPointId;\n     }\n \n-    public String getExtentionPointId()\n+    public String getExtensionPointId()\n     {\n-        return extentionPointId;\n+        return extensionPointId;\n     }\n }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/parser/ExtensionPointToken.java",
                "sha": "a0333970c687a05e2f82a5735b23ed5003282638",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/services/StaxTemplateParser.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/services/StaxTemplateParser.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 4,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/services/StaxTemplateParser.java",
                "patch": "@@ -303,10 +303,7 @@ private Location getLocation()\n     {\n         int lineNumber = reader.getLocation().getLineNumber();\n \n-        if (cachedLocation != null && cachedLocation.getLine() != lineNumber)\n-            cachedLocation = null;\n-\n-        if (cachedLocation == null)\n+        if (cachedLocation == null || cachedLocation.getLine() != lineNumber)\n             cachedLocation = new LocationImpl(resource, lineNumber);\n \n         return cachedLocation;",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/services/StaxTemplateParser.java",
                "sha": "235c1ebae4306cedcabbc42bc164b47dbe8b91f9",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElement.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElement.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 1,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElement.java",
                "patch": "@@ -72,8 +72,9 @@\n      *\n      * @param mixinId      a unique id for the mixin, the last term of the mixin's class name\n      * @param instantiator used to instantiate an instance of the mixin\n+     * @param order        Ordering strings used to determine the order of mixin execution.\n      */\n-    void addMixin(String mixinId, Instantiator instantiator);\n+    void addMixin(String mixinId, Instantiator instantiator, String... order);\n \n     /**\n      * @param mixinId       id of previously added mixin",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElement.java",
                "sha": "b72d994458c63af7236e62c1ea4dd6524d03c9e9",
                "status": "modified"
            },
            {
                "additions": 64,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementImpl.java",
                "changes": 102,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementImpl.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 38,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementImpl.java",
                "patch": "@@ -24,11 +24,8 @@\n import org.apache.tapestry5.internal.util.NotificationEventCallback;\n import org.apache.tapestry5.ioc.BaseLocatable;\n import org.apache.tapestry5.ioc.Location;\n-import org.apache.tapestry5.ioc.internal.util.CollectionFactory;\n-import org.apache.tapestry5.ioc.internal.util.Defense;\n import static org.apache.tapestry5.ioc.internal.util.Defense.notBlank;\n-import org.apache.tapestry5.ioc.internal.util.InternalUtils;\n-import org.apache.tapestry5.ioc.internal.util.TapestryException;\n+import org.apache.tapestry5.ioc.internal.util.*;\n import org.apache.tapestry5.model.ComponentModel;\n import org.apache.tapestry5.model.ParameterModel;\n import org.apache.tapestry5.runtime.Component;\n@@ -474,6 +471,12 @@ public String toString()\n \n     private final String id;\n \n+    private Orderer<Component> mixinBeforeOrderer;\n+\n+    private Orderer<Component> mixinAfterOrderer;\n+\n+    private List<Runnable> deferredLoadActions;\n+\n     private boolean loaded;\n \n     /**\n@@ -667,7 +670,7 @@ void addEmbeddedElement(ComponentPageElement child)\n         children.put(childId, child);\n     }\n \n-    public void addMixin(String mixinId, Instantiator instantiator)\n+    public void addMixin(String mixinId, Instantiator instantiator, String... order)\n     {\n         if (mixinIdToComponentResources == null)\n         {\n@@ -684,8 +687,19 @@ public void addMixin(String mixinId, Instantiator instantiator)\n                                                                                       instantiator);\n \n         mixinIdToComponentResources.put(mixinId, resources);\n-\n-        components.add(resources.getComponent());\n+        //note that since we're using explicit ordering now,\n+        //we don't add anything to components until we page load; instead, we add\n+        //to the orderers.\n+        if (order == null) order = new String[0];\n+        if (resources.getComponentModel().isMixinAfter())\n+        {\n+            if (mixinAfterOrderer == null) mixinAfterOrderer = new Orderer<Component>(getLogger());\n+            mixinAfterOrderer.add(mixinId,resources.getComponent(),order);\n+        } else\n+        {\n+            if (mixinBeforeOrderer == null) mixinBeforeOrderer =new Orderer<Component>(getLogger());\n+            mixinBeforeOrderer.add(mixinId,resources.getComponent(),order);\n+        }\n     }\n \n     public void bindMixinParameter(String mixinId, String parameterName, Binding binding)\n@@ -753,37 +767,26 @@ public void containingPageDidDetach()\n \n     public void containingPageDidLoad()\n     {\n-        // If this component has mixins, add the core component to the end of the list, after the\n+        // If this component has mixins, order them according to:\n         // mixins.\n \n         if (components != null)\n         {\n             List<Component> ordered = CollectionFactory.newList();\n \n-            Iterator<Component> i = components.iterator();\n-\n-            // Add all the normal components to the final list.\n-\n-            while (i.hasNext())\n-            {\n-                Component mixin = i.next();\n-\n-                if (mixin.getComponentResources().getComponentModel().isMixinAfter()) continue;\n-\n-                ordered.add(mixin);\n-\n-                // Remove from list, leaving just the late executing mixins\n-\n-                i.remove();\n-            }\n+            if (mixinBeforeOrderer != null)\n+                ordered.addAll(mixinBeforeOrderer.getOrdered());\n \n             ordered.add(coreComponent);\n \n             // Add the remaining, late executing mixins\n-\n-            ordered.addAll(components);\n+            if (mixinAfterOrderer != null)\n+                ordered.addAll(mixinAfterOrderer.getOrdered());\n \n             components = ordered;\n+            //no need to keep the orderers around.\n+            mixinBeforeOrderer = null;\n+            mixinAfterOrderer = null;\n         }\n \n         loaded = true;\n@@ -792,10 +795,19 @@ public void containingPageDidLoad()\n         // that is invoked first, before we check for unbound parameters.\n \n         invoke(false, CONTAINING_PAGE_DID_LOAD);\n-\n+        executeDeferredLoadActions();\n         verifyRequiredParametersAreBound();\n     }\n \n+    private void executeDeferredLoadActions()\n+    {\n+        if (deferredLoadActions == null) return;\n+        for(Runnable action : deferredLoadActions)\n+        {\n+            action.run();\n+        }\n+        deferredLoadActions = null;//having executed them, we have no need now to store them.\n+    }\n \n     public void enqueueBeforeRenderBody(RenderQueue queue)\n     {\n@@ -857,24 +869,38 @@ public Logger getLogger()\n \n     public Component getMixinByClassName(String mixinClassName)\n     {\n-        Component result = null;\n+        Component result = mixinForClassName(mixinClassName);\n \n-        if (mixinIdToComponentResources != null)\n+\n+        if (result == null) throw new TapestryException(StructureMessages.unknownMixin(completeId, mixinClassName),\n+                                                        getLocation(), null);\n+\n+        return result;\n+    }\n+\n+    private Component mixinForClassName(String mixinClassName)\n+    {\n+\n+        if (mixinIdToComponentResources == null) return null;\n+        for (InternalComponentResources resources : mixinIdToComponentResources.values())\n         {\n-            for (InternalComponentResources resources : mixinIdToComponentResources.values())\n+            if (resources.getComponentModel().getComponentClassName().equals(mixinClassName))\n             {\n-                if (resources.getComponentModel().getComponentClassName().equals(mixinClassName))\n-                {\n-                    result = resources.getComponent();\n-                    break;\n-                }\n+                return resources.getComponent();\n             }\n         }\n+        return null;\n+    }\n \n-        if (result == null) throw new TapestryException(StructureMessages.unknownMixin(completeId, mixinClassName),\n-                                                        getLocation(), null);\n+    public boolean isMixingIn(String mixinClassName)\n+    {\n+        return mixinForClassName(mixinClassName) != null;\n+    }\n \n-        return result;\n+    public void deferLoadAction(Runnable action)\n+    {\n+        if (deferredLoadActions == null) deferredLoadActions = CollectionFactory.newList();\n+        deferredLoadActions.add(action);\n     }\n \n     public ComponentResources getMixinResources(String mixinId)",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementImpl.java",
                "sha": "41b7a06796b64b63798de02361217e964a42e538",
                "status": "modified"
            },
            {
                "additions": 182,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/InternalComponentResourcesImpl.java",
                "changes": 187,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/InternalComponentResourcesImpl.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 5,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/InternalComponentResourcesImpl.java",
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006, 2007, 2008 The Apache Software Foundation\n+// Copyright 2006, 2007, 2008, 2009 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -15,8 +15,7 @@\n package org.apache.tapestry5.internal.structure;\n \n import org.apache.tapestry5.*;\n-import org.apache.tapestry5.internal.InternalComponentResources;\n-import org.apache.tapestry5.internal.ParameterAccess;\n+import org.apache.tapestry5.internal.*;\n import org.apache.tapestry5.internal.services.Instantiator;\n import org.apache.tapestry5.ioc.AnnotationProvider;\n import org.apache.tapestry5.ioc.Location;\n@@ -37,6 +36,7 @@\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n+import java.util.Set;\n \n /**\n  * The bridge between a component and its {@link ComponentPageElement}, that supplies all kinds of resources to the\n@@ -66,6 +66,10 @@\n     // Case insensitive map from parameter name to ParameterAccess\n     private Map<String, ParameterAccess> access;\n \n+    // Case-insensitive map from container-parameter name to ParameterAccess, for BindParameter.\n+    // Should only ever be used for mixins.\n+    private Map<String, ParameterAccess> containerParameterAccess;\n+\n     private Messages messages;\n \n     // Case insensitive\n@@ -324,6 +328,16 @@ public Component getMixinByClassName(String mixinClassName)\n         return element.getMixinByClassName(mixinClassName);\n     }\n \n+    public boolean isMixingIn(String mixinClassName)\n+    {\n+        return element.isMixingIn(mixinClassName);\n+    }\n+\n+    public void deferLoadAction(Runnable action)\n+    {\n+        element.deferLoadAction(action);\n+    }\n+\n     public void renderInformalParameters(MarkupWriter writer)\n     {\n         if (bindings == null) return;\n@@ -474,6 +488,50 @@ public ParameterAccess getParameterAccess(final String parameterName)\n         return result;\n     }\n \n+    public ParameterAccess getContainerBoundParameterAccess(final String boundParameterName, String... parentParameterNames)\n+    {\n+        if (containerParameterAccess == null) containerParameterAccess = CollectionFactory.newCaseInsensitiveMap();\n+\n+        ParameterAccess result = containerParameterAccess.get(boundParameterName);\n+        if (result == null)\n+        {\n+            final InternalComponentResources res = (InternalComponentResources) getContainerResources();\n+            //Ideally, this check would occur at class fabrication time. But there's not currently a way\n+            //to tell if a component class is a mixin class, short of checking for \"mixins\" in the FQCN.\n+            //So we check to make sure that this component class name is in the set of mixins defined for the container\n+            //resources.\n+            if (!res.isMixingIn(this.getComponentModel().getComponentClassName())) {\n+                //then we're not a mixin, we're a component in the tree.\n+                throw new TapestryException(StructureMessages.bindParameterOnlyOnMixin(boundParameterName, this),this,null);\n+            }\n+            //Have to be careful here. Problem is that if the mixin is not @MixinAfter, its PAGE_DID_LOAD will be called\n+            //before the core component's. That can potentially result in missing default bindings if we\n+            //call getParameterAcces at the wrong time (the unbound parameter access will be cached...).\n+            String parentParameterName = findParentParameterName(parentParameterNames);\n+            if (parentParameterName == null)\n+            {\n+                throw new TapestryException(\n+                        StructureMessages.noSuchCoreComponentParameter(this,boundParameterName,parentParameterNames), \n+                        this,null);\n+            }\n+            result = createContainerParameterAccess(parentParameterName);\n+            containerParameterAccess.put(boundParameterName,result);\n+        }\n+        return result;\n+    }\n+\n+    private String findParentParameterName(String... queries)\n+    {\n+        for(String query : queries)\n+        {\n+            if(getContainerResources().getComponentModel().getParameterModel(query) != null)\n+            {\n+                return query;\n+            }\n+        }\n+        return null;\n+    }\n+\n     private ParameterAccess createParameterAccess(final String parameterName)\n     {\n         final Binding binding = getBinding(parameterName);\n@@ -482,8 +540,11 @@ private ParameterAccess createParameterAccess(final String parameterName)\n \n         final boolean allowNull = parameterModel == null ? true : parameterModel.isAllowNull();\n \n+        final boolean cache = parameterModel == null ? false : parameterModel.isCached();\n+\n         return new ParameterAccess()\n         {\n+\n             public boolean isBound()\n             {\n                 return binding != null;\n@@ -529,15 +590,24 @@ public Object read(String desiredTypeName)\n \n             public <T> void write(T parameterValue)\n             {\n-                if (binding == null) return;\n \n-                Class bindingType = binding.getBindingType();\n+                if (binding == null)\n+                {\n+                    //have to fire in case there's a mixin watching value;\n+                    //even if it's not bound to any other value,\n+                    //the mixin needs to know that the value internal to the component\n+                    //was changed.\n+                    fireParameterChanged(parameterName, parameterValue);\n+                    return;\n+                }\n \n+                Class bindingType = binding.getBindingType();\n                 try\n                 {\n                     Object coerced = elementResources.coerce(parameterValue, bindingType);\n \n                     binding.set(coerced);\n+                    fireParameterChanged(parameterName,coerced);\n                 }\n                 catch (Exception ex)\n                 {\n@@ -561,6 +631,113 @@ public Class getBoundType()\n             {\n                 return binding == null ? null : binding.getAnnotation(annotationClass);\n             }\n+\n+            private Set<ParameterChangeListener> listeners;\n+\n+            public void registerParameterChangeListener(ParameterChangeListener listener)\n+            {\n+                Defense.notNull(listener,\"listener\");\n+                if (listeners == null) listeners = CollectionFactory.newSet();\n+                listeners.add(listener);\n+            }\n+\n+            public void unregisterParameterChangeListener(ParameterChangeListener listener)\n+            {\n+                if (listeners == null) return;\n+                listeners.remove(listener);\n+            }\n+\n+            public boolean shouldCache()\n+            {\n+                return cache;\n+            }\n+\n+            protected void fireParameterChanged(String parameterName, Object newValue)\n+            {\n+                ParameterChangedEvent event = new ParameterChangedEvent(parameterName,newValue);\n+                for(ParameterChangeListener l : listeners)\n+                {\n+                    l.parameterChanged(event);\n+                }\n+            }\n+\n         };\n     }\n+\n+    private ParameterAccess createContainerParameterAccess(final String parentParameterName)\n+    {\n+\n+        return new ParameterAccess()\n+        {\n+\n+            private ParameterAccess access()\n+            {\n+                return element.getComponentResources().getParameterAccess(parentParameterName);\n+            }\n+\n+            public boolean isBound()\n+            {\n+                return element.getBinding(parentParameterName) != null;\n+            }\n+\n+            public Object read(String desiredTypeName)\n+            {\n+                return access().read(desiredTypeName);\n+            }\n+\n+            public <T> T read(Class<T> expectedType)\n+            {\n+                return access().read(expectedType);\n+            }\n+\n+            public <T> void write(T parameterValue)\n+            {\n+                access().write(parameterValue);\n+            }\n+\n+            public boolean isInvariant()\n+            {\n+                return access().isInvariant();\n+            }\n+\n+            public Class getBoundType()\n+            {\n+                return access().getBoundType();\n+            }\n+\n+            public void registerParameterChangeListener(final ParameterChangeListener listener)\n+            {\n+                //if it's not bound, try defering.\n+                if (isBound())\n+                {\n+                    access().registerParameterChangeListener(listener);\n+                } else\n+                {\n+                    //try waiting for it. If it's not bound after load, then it's not bound at all.\n+                    element.deferLoadAction(new Runnable() {\n+                        public void run()\n+                        {\n+                            access().registerParameterChangeListener(listener);\n+                        }\n+                    });\n+                }\n+            }\n+\n+            public void unregisterParameterChangeListener(ParameterChangeListener listener)\n+            {\n+                access().unregisterParameterChangeListener(listener);\n+            }\n+\n+            public boolean shouldCache()\n+            {\n+                return access().shouldCache();\n+            }\n+\n+            public <T extends Annotation> T getAnnotation(Class<T> annotationClass)\n+            {\n+                return access().getAnnotation(annotationClass);\n+            }\n+        };\n+\n+    }\n }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/InternalComponentResourcesImpl.java",
                "sha": "12e298ee33fbe8117b71687f2d70a630f0c199c9",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/StructureMessages.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/StructureMessages.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/StructureMessages.java",
                "patch": "@@ -18,10 +18,12 @@\n import org.apache.tapestry5.ioc.Messages;\n import org.apache.tapestry5.ioc.internal.util.InternalUtils;\n import org.apache.tapestry5.ioc.internal.util.MessagesImpl;\n+import org.apache.tapestry5.ComponentResources;\n \n import java.util.Collection;\n import java.util.List;\n import java.util.Set;\n+import java.util.Arrays;\n \n final class StructureMessages\n {\n@@ -119,4 +121,21 @@ static String persistChangeBeforeLoadComplete()\n     {\n         return MESSAGES.get(\"persist-change-before-load-complete\");\n     }\n+\n+    static String noSuchCoreComponentParameter(ComponentResources mixinResources,\n+                                               String boundId, String...parameters)\n+    {\n+        return MESSAGES.format(\"no-such-core-component-parameter\",\n+                boundId,\n+                mixinResources.getComponentModel().getComponentClassName(),\n+                mixinResources.getContainerResources().getComponentModel().getComponentClassName(),\n+                InternalUtils.joinSorted(Arrays.asList(parameters)),\n+                InternalUtils.joinSorted(Arrays.asList(mixinResources.getContainerResources().getComponentModel().getDeclaredParameterNames())));\n+    }\n+\n+    public static String bindParameterOnlyOnMixin(String boundParameterName, InternalComponentResourcesImpl internalComponentResources)\n+    {\n+        return MESSAGES.format(\"bind-parameter-only-on-mixin\",boundParameterName,\n+                internalComponentResources.getComponentModel().getComponentClassName());\n+    }\n }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/StructureMessages.java",
                "sha": "48b3640c68d787d4ebb2f3555cfb80268c5df8a7",
                "status": "modified"
            },
            {
                "additions": 348,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/BindParameterWorker.java",
                "changes": 348,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/BindParameterWorker.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/BindParameterWorker.java",
                "patch": "@@ -0,0 +1,348 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.internal.transform;\n+\n+import org.apache.tapestry5.services.*;\n+import org.apache.tapestry5.model.MutableComponentModel;\n+import org.apache.tapestry5.annotations.BindParameter;\n+import org.apache.tapestry5.internal.*;\n+import org.apache.tapestry5.internal.bindings.LiteralBinding;\n+import org.apache.tapestry5.ioc.util.BodyBuilder;\n+import org.apache.tapestry5.ioc.internal.util.InternalUtils;\n+import org.apache.tapestry5.ioc.internal.util.CollectionFactory;\n+import org.apache.tapestry5.Binding;\n+\n+import java.util.List;\n+import java.util.Iterator;\n+import java.util.Arrays;\n+import java.lang.reflect.Modifier;\n+\n+/**\n+ * Responsible for identifying, via the {@link org.apache.tapestry5.annotations.BindParameter} annotation,\n+ * mixin fields that should be bound to a core-component parameter value.\n+ *\n+ * @since 5.2.0.0\n+ */\n+public class BindParameterWorker implements ComponentClassTransformWorker\n+{\n+\n+    private static final String EQUAL_METHOD_NAME = BindParameterWorker.class.getName() + \".equal\";\n+\n+    public void transform(final ClassTransformation transformation, MutableComponentModel model)\n+    {\n+        List<String> fieldNames = transformation.findFieldsWithAnnotation(BindParameter.class);\n+\n+        for(String fieldName : fieldNames)\n+        {\n+            BindParameter annotation = transformation.getFieldAnnotation(fieldName, BindParameter.class);\n+            convertFieldIntoContainerBoundParameter(fieldName, annotation, transformation, model);\n+        }\n+\n+    }\n+\n+    private void convertFieldIntoContainerBoundParameter(String name, BindParameter annotation, ClassTransformation transformation,\n+                                           MutableComponentModel model)\n+    {\n+        transformation.claimField(name, annotation);\n+\n+        String boundParameterName = getBoundParameterName(name, annotation.name());\n+        String[] parentParameterNames = getParentParameterNames(name, annotation.value());\n+\n+\n+        String type = transformation.getFieldType(name);\n+\n+        //we can't do this exactly the same as parameter. We can't know at transformation time which parameter\n+        //this thing will be linked to, because it could be wired to any number of different components.\n+        //So we have to wait until runtime to examine caching and whether we should cache, rather than\n+        //constructing the class differently based on caching or not.\n+        String cachedFieldName = transformation.addField(Modifier.PRIVATE, \"boolean\", name + \"_cached\");\n+\n+        String resourcesFieldName = transformation.getResourcesFieldName();\n+\n+        String accessFieldName = addBoundParameterSetup(name,\n+                boundParameterName, parentParameterNames,\n+                cachedFieldName, type, resourcesFieldName,\n+                transformation);\n+\n+        addReaderMethod(name, cachedFieldName, accessFieldName, boundParameterName, type, resourcesFieldName,\n+                        transformation);\n+\n+        addWriterMethod(name, cachedFieldName, accessFieldName, boundParameterName, type, resourcesFieldName,\n+                        transformation);\n+    }\n+\n+\n+    /**\n+     * Returns the name of a field that stores whether the parameter binding is invariant.\n+     */\n+    private String addBoundParameterSetup(String fieldName, String boundParameterName, String[] parentParameterNames,\n+                                     String cachedFieldName, String fieldType,\n+                                     String resourcesFieldName, ClassTransformation transformation)\n+    {\n+        String accessFieldName = transformation.addField(Modifier.PRIVATE, ParameterAccess.class.getName(),\n+                fieldName + \"_access\");\n+\n+        String parentNamesField = transformation.addField(Modifier.PRIVATE, String[].class.getName(),\n+                fieldName + \"_parentparameternames\");\n+\n+        String defaultFieldName = transformation.addField(Modifier.PRIVATE, fieldType, fieldName + \"_default\");\n+\n+        BodyBuilder builder = new BodyBuilder().begin();\n+\n+        builder.addln(\"%s = new String[%d];\",parentNamesField,parentParameterNames.length);\n+\n+        for(int i=0;i<parentParameterNames.length;i++)\n+        {\n+            builder.addln(\"%s[%d]=\\\"%s\\\";\",parentNamesField,i,parentParameterNames[i]);\n+        }\n+\n+        builder.addln(\"%s = %s.getContainerBoundParameterAccess(\\\"%s\\\",%s);\",\n+                accessFieldName,\n+                resourcesFieldName,\n+                boundParameterName,\n+                parentNamesField);\n+\n+        // Store the current value of the field into the default field. This value will\n+        // be used to reset the field after rendering.\n+\n+        builder.addln(\"%s = %s;\", defaultFieldName, fieldName);\n+\n+\n+        addListenerSetup(fieldName, fieldType, boundParameterName, parentParameterNames, accessFieldName,  builder,\n+                         transformation);\n+\n+        builder.end();\n+\n+        transformation.extendMethod(TransformConstants.CONTAINING_PAGE_DID_LOAD_SIGNATURE, builder\n+                .toString());\n+\n+        // Now, when the component completes rendering, ensure that any variant parameters are\n+        // are returned to default value. This isn't necessary when the parameter is not cached,\n+        // because (unless the binding is invariant), there's no value to get rid of (and if it is\n+        // invariant, there's no need to get rid of it).\n+        // as with reader/writer methods, we have to do the caching check at runtime.\n+        builder.clear();\n+\n+        builder.addln(\"if (%s.shouldCache() && ! %1$s.isInvariant())\", accessFieldName);\n+        builder.begin();\n+        builder.addln(\"%s = %s;\", fieldName, defaultFieldName);\n+        builder.addln(\"%s = false;\", cachedFieldName);\n+        builder.end();\n+\n+        // Clean up after the component renders.\n+\n+        String body = builder.toString();\n+\n+        transformation.extendMethod(TransformConstants.POST_RENDER_CLEANUP_SIGNATURE, body);\n+\n+        // And again, when the page is detached (TAPESTRY-2460)\n+\n+        transformation.extendMethod(TransformConstants.CONTAINING_PAGE_DID_DETACH_SIGNATURE, body);\n+\n+        return accessFieldName;\n+    }\n+\n+    private void addListenerSetup(\n+            String fieldName,\n+            String fieldType,\n+            String boundParameterName,\n+            String[] parentParameterNames,\n+            String accessFieldName,\n+            BodyBuilder builder,\n+            ClassTransformation transformation)\n+    {\n+        transformation.addImplementedInterface(ParameterChangeListener.class);\n+        builder.addln(\"%s.registerParameterChangeListener($0);\",accessFieldName);\n+\n+        TransformMethodSignature signature = new TransformMethodSignature(Modifier.PUBLIC, \"void\", \"parameterChanged\",\n+                new String[] {ParameterChangedEvent.class.getName()}, null);\n+\n+        BodyBuilder changedBody = new BodyBuilder().begin();\n+        //by this point, we know that there is at least one entry in parent Parameter Names.\n+        changedBody.add(\"if (%s($1, \\\"%s\\\")\", EQUAL_METHOD_NAME, parentParameterNames[0]);\n+        for(int i=1; i<parentParameterNames.length; i++)\n+        {\n+            changedBody.add(\" || %s($1, \\\"%s\\\")\", EQUAL_METHOD_NAME, parentParameterNames[i]);\n+        }\n+        changedBody.add(\")\").begin();\n+\n+        String cast = TransformUtils.getWrapperTypeName(fieldType);\n+\n+        if (TransformUtils.isPrimitive(fieldType))\n+            changedBody.addln(\"%s = ((%s) $1.getNewValue()).%s();\",\n+                    fieldName, cast, TransformUtils.getUnwrapperMethodName(fieldType));\n+        else\n+            changedBody.addln(\"%s = (%s) $1.getNewValue();\",fieldName, cast);\n+\n+        changedBody.addln(\"return;\").end();\n+\n+        changedBody.end();\n+\n+        transformation.extendMethod(signature,changedBody.toString());\n+\n+    }\n+\n+    private void addWriterMethod(String fieldName, String cachedFieldName, String accessFieldName,\n+                                 String boundParameterName, String fieldType,\n+                                 String resourcesFieldName, ClassTransformation transformation)\n+    {\n+        BodyBuilder builder = new BodyBuilder();\n+        builder.begin();\n+\n+        // Before the component is loaded, updating the property sets the default value\n+        // for the parameter. The value is stored in the field, but will be\n+        // rolled into default field inside containingPageDidLoad().\n+\n+        builder.addln(\"if (! %s.isLoaded())\", resourcesFieldName);\n+        builder.begin();\n+        builder.addln(\"%s = $1;\", fieldName);\n+        builder.addln(\"return;\");\n+        builder.end();\n+\n+        //unregistering the listener from the parameter change listener list avoids double-setting the field,\n+        builder.addln(\"%s.unregisterParameterChangeListener($0);\",accessFieldName);\n+\n+        // Always start by updating the parameter; this will implicitly check for\n+        // read-only or unbound parameters. $1 is the single parameter\n+        // to the method.\n+        builder.addln(\"%s.write(($w)$1);\", accessFieldName);\n+        builder.addln(\"%s = $1;\",fieldName);\n+        builder.addln(\"%s.registerParameterChangeListener($0);\",accessFieldName);\n+\n+        //note that there's no way of knowing at class transformation time which component a mixin will\n+        //be associated with and, further more, no way of knowing which @Parameter a mixin field will be\n+        //@BindParameter'ed to.  So we have to generate caching code that works at runtime, rather than\n+        //including or not including caching logic at transformation time.\n+        builder.addln(\"if (%s.shouldCache())\",accessFieldName).begin();\n+        builder.addln(\"%s = %s.isRendering();\",cachedFieldName, resourcesFieldName).end();\n+        builder.end();\n+\n+        String methodName = transformation.newMemberName(\"update_boundparameter\", boundParameterName);\n+\n+        TransformMethodSignature signature = new TransformMethodSignature(Modifier.PRIVATE, \"void\", methodName,\n+                new String[] {fieldType}, null);\n+\n+        transformation.addMethod(signature, builder.toString());\n+\n+        builder.clear();\n+\n+        //add the catch because if we don't re-register the class as a parameter change listener, it's value\n+        //could wind up stale, and write can throw an exception.\n+        builder.begin();\n+        builder.addln(\"%s.registerParameterChangeListener($0);\", accessFieldName);\n+        builder.addln(\"throw $e;\");\n+        builder.end();\n+\n+        transformation.addCatch(signature,Exception.class.getName(),builder.toString());\n+\n+        transformation.replaceWriteAccess(fieldName, methodName);\n+    }\n+\n+    /**\n+     * Adds a private method that will be the replacement for read-access to the field.\n+     */\n+    private void addReaderMethod(String fieldName, String cachedFieldName, String accessFieldName,\n+                                 String boundParameterName, String fieldType, String resourcesFieldName,\n+                                 ClassTransformation transformation)\n+    {\n+        BodyBuilder builder = new BodyBuilder();\n+        builder.begin();\n+\n+        // While the component is still loading, or when the value for the component is cached,\n+        // or if the value is not bound, then return the current value of the field.\n+\n+        builder.addln(\"if ((%s.shouldCache() && %s) || ! %s.isLoaded() || ! %s.isBound()) return %s;\",\n+                accessFieldName, cachedFieldName, resourcesFieldName, accessFieldName, fieldName);\n+\n+        String cast = TransformUtils.getWrapperTypeName(fieldType);\n+\n+        // The ($r) cast will convert the result to the method return type; generally\n+        // this does nothing. but for primitive types, it will unwrap\n+        // the wrapper type back to a primitive.  We pass the desired type name\n+        // to readParameter(), since its easier to convert it properly to\n+        // a type on that end than in the generated code.\n+\n+        builder.addln(\"%s result = ($r) ((%s) %s.read(\\\"%2$s\\\"));\", fieldType, cast, accessFieldName);\n+\n+        // If the binding is invariant, then it's ok to cache. Othewise, its only\n+        // ok to cache if a) the @Parameter says to cache and b) the component\n+        // is rendering at the point when field is accessed.\n+\n+        builder.add(\"if (%s.isInvariant() || (%1$s.shouldCache() && %s.isRendering()))\",\n+                accessFieldName, resourcesFieldName);\n+\n+        builder.begin();\n+        builder.addln(\"%s = result;\", fieldName);\n+        builder.addln(\"%s = true;\", cachedFieldName);\n+        builder.end();\n+\n+        builder.addln(\"return result;\");\n+        builder.end();\n+\n+        String methodName = transformation.newMemberName(\"read_boundparameter\", boundParameterName);\n+\n+        TransformMethodSignature signature = new TransformMethodSignature(Modifier.PRIVATE, fieldType, methodName, null,\n+                null);\n+\n+        transformation.addMethod(signature, builder.toString());\n+\n+        transformation.replaceReadAccess(fieldName, methodName);\n+    }\n+\n+    private String getBoundParameterName(String fieldName, String annotatedName)\n+    {\n+        if (InternalUtils.isNonBlank(annotatedName)) return annotatedName;\n+\n+        return InternalUtils.stripMemberName(fieldName);\n+    }\n+\n+    private String[] getParentParameterNames(String fieldName, String... names)\n+    {\n+        List<String> temp = CollectionFactory.newList(names);\n+        for(Iterator<String> it = temp.iterator();it.hasNext(); )\n+        {\n+            String name =it.next();\n+            if (InternalUtils.isBlank(name)) it.remove();\n+        }\n+        if (temp.isEmpty())\n+            return new String[] {InternalUtils.stripMemberName(fieldName)};\n+\n+        return temp.toArray(new String[temp.size()]);\n+    }\n+\n+    /**\n+     * Invoked from generated code as part of the handling of parameter default methods.\n+     */\n+    public static void bind(String parameterName, InternalComponentResources resources, Object value)\n+    {\n+        if (value == null) return;\n+\n+        if (value instanceof Binding)\n+        {\n+            Binding binding = (Binding) value;\n+\n+            resources.bindParameter(parameterName, binding);\n+            return;\n+        }\n+\n+        resources.bindParameter(parameterName, new LiteralBinding(null, \"default \" + parameterName, value));\n+    }\n+\n+    public static <T> boolean equal(T left, T right)\n+    {\n+        return TapestryInternalUtils.isEqual(left,right);\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/BindParameterWorker.java",
                "sha": "c6b82b88c8d3d4e212324c6198aeeb3ae1b4fecd",
                "status": "added"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/ComponentWorker.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/ComponentWorker.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 4,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/ComponentWorker.java",
                "patch": "@@ -20,9 +20,11 @@\n import org.apache.tapestry5.internal.KeyValue;\n import org.apache.tapestry5.internal.TapestryInternalUtils;\n import org.apache.tapestry5.ioc.Location;\n+import org.apache.tapestry5.ioc.Orderable;\n import org.apache.tapestry5.ioc.internal.services.StringLocation;\n import org.apache.tapestry5.ioc.internal.util.CollectionFactory;\n import org.apache.tapestry5.ioc.internal.util.InternalUtils;\n+import org.apache.tapestry5.ioc.internal.util.TapestryException;\n import org.apache.tapestry5.model.ComponentModel;\n import org.apache.tapestry5.model.MutableComponentModel;\n import org.apache.tapestry5.model.MutableEmbeddedComponentModel;\n@@ -95,8 +97,20 @@ private void addMixinClasses(String fieldName, ClassTransformation transformatio\n \n         if (annotation == null) return;\n \n-        for (Class c : annotation.value())\n-            model.addMixin(c.getName());\n+        boolean orderEmpty = annotation.order().length == 0;\n+\n+        if (!orderEmpty && annotation.order().length != annotation.value().length)\n+            throw new TapestryException(TransformMessages.badMixinConstraintLength(annotation,fieldName),\n+                    model,null);\n+\n+\n+        for (int i=0; i<annotation.value().length;i++)\n+        {\n+            String[] constraints = orderEmpty?\n+                    new String[0]:\n+                    TapestryInternalUtils.splitMixinConstraints(annotation.order()[i]);\n+            model.addMixin(annotation.value()[i].getName(), constraints);\n+        }\n     }\n \n     private void addMixinTypes(String fieldName, ClassTransformation transformation,\n@@ -108,8 +122,9 @@ private void addMixinTypes(String fieldName, ClassTransformation transformation,\n \n         for (String typeName : annotation.value())\n         {\n-            String mixinClassName = resolver.resolveMixinTypeToClassName(typeName);\n-            model.addMixin(mixinClassName);\n+            Orderable<String> typeAndOrder = TapestryInternalUtils.mixinTypeAndOrder(typeName);\n+            String mixinClassName = resolver.resolveMixinTypeToClassName(typeAndOrder.getTarget());\n+            model.addMixin(mixinClassName,typeAndOrder.getConstraints());\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/ComponentWorker.java",
                "sha": "68eb601b5a92bd34a6031b34428ca6309a5b17b3",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/MixinWorker.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/MixinWorker.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 2,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/MixinWorker.java",
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006, 2008 The Apache Software Foundation\n+// Copyright 2006, 2008, 2009 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -50,12 +50,14 @@ public void transform(ClassTransformation transformation, MutableComponentModel\n             \n             String mixinType = annotation.value();\n \n+            String[] order = annotation.order();\n+\n             String fieldType = transformation.getFieldType(fieldName);\n \n             String mixinClassName = InternalUtils.isBlank(mixinType) ? fieldType : resolver\n                     .resolveMixinTypeToClassName(mixinType);\n \n-            model.addMixinClassName(mixinClassName);\n+            model.addMixinClassName(mixinClassName,order);\n \n             transformation.makeReadOnly(fieldName);\n ",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/MixinWorker.java",
                "sha": "d52a5bc00f2d6cb31e75699fa1c2b22d579cd975",
                "status": "modified"
            },
            {
                "additions": 65,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/ParameterWorker.java",
                "changes": 75,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/ParameterWorker.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 10,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/ParameterWorker.java",
                "patch": "@@ -16,8 +16,8 @@\n \n import org.apache.tapestry5.Binding;\n import org.apache.tapestry5.annotations.Parameter;\n-import org.apache.tapestry5.internal.InternalComponentResources;\n-import org.apache.tapestry5.internal.ParameterAccess;\n+import org.apache.tapestry5.annotations.BindParameter;\n+import org.apache.tapestry5.internal.*;\n import org.apache.tapestry5.internal.bindings.LiteralBinding;\n import org.apache.tapestry5.ioc.internal.util.InternalUtils;\n import org.apache.tapestry5.ioc.util.BodyBuilder;\n@@ -35,6 +35,7 @@\n public class ParameterWorker implements ComponentClassTransformWorker\n {\n     private static final String BIND_METHOD_NAME = ParameterWorker.class.getName() + \".bind\";\n+    private static final String EQUAL_METHOD_NAME = ParameterWorker.class.getName() + \".equal\";\n \n     private final BindingSource bindingSource;\n \n@@ -84,11 +85,11 @@ private void convertFieldIntoParameter(String name, Parameter annotation, ClassT\n \n         String parameterName = getParameterName(name, annotation.name());\n \n-        model.addParameter(parameterName, annotation.required(), annotation.allowNull(), annotation.defaultPrefix());\n+        boolean cache = annotation.cache();\n \n-        String type = transformation.getFieldType(name);\n+        model.addParameter(parameterName, annotation.required(), annotation.allowNull(), annotation.defaultPrefix(),cache);\n \n-        boolean cache = annotation.cache();\n+        String type = transformation.getFieldType(name);\n \n         String cachedFieldName = transformation.addField(Modifier.PRIVATE, \"boolean\", name + \"_cached\");\n \n@@ -133,6 +134,9 @@ private String addParameterSetup(String fieldName, String defaultPrefix, String\n         // be used to reset the field after rendering.\n \n         builder.addln(\"%s = %s;\", defaultFieldName, fieldName);\n+\n+        addListenerSetup(fieldName, fieldType, parameterName, accessFieldName, builder, transformation);\n+\n         builder.end();\n \n         transformation.extendMethod(TransformConstants.CONTAINING_PAGE_DID_LOAD_SIGNATURE, builder\n@@ -232,9 +236,45 @@ public boolean accept(TransformMethodSignature signature)\n                       actualMethodName);\n     }\n \n+    private void addListenerSetup(\n+            String fieldName,\n+            String fieldType,\n+            String parameterName,\n+            String accessFieldName,\n+            BodyBuilder builder,\n+            ClassTransformation transformation)\n+    {\n+        transformation.addImplementedInterface(ParameterChangeListener.class);\n+        builder.addln(\"%s.registerParameterChangeListener($0);\",accessFieldName);\n+\n+        TransformMethodSignature signature = new TransformMethodSignature(Modifier.PUBLIC, \"void\", \"parameterChanged\",\n+                new String[] {ParameterChangedEvent.class.getName()}, null);\n+\n+        BodyBuilder changedBody = new BodyBuilder();\n+        changedBody.begin();\n+\n+        changedBody.addln(\"if (%s($1, \\\"%s\\\"))\",EQUAL_METHOD_NAME,parameterName);\n+        changedBody.begin();\n+\n+        String cast = TransformUtils.getWrapperTypeName(fieldType);\n+\n+        if (TransformUtils.isPrimitive(fieldType))\n+            changedBody.addln(\"%s = ((%s) $1.getNewValue()).%s();\",\n+                                fieldName, cast, TransformUtils.getUnwrapperMethodName(fieldType));\n+        else\n+            changedBody.addln(\"%s = (%s) $1.getNewValue();\",fieldName, cast);\n+\n+        changedBody.addln(\"return;\");\n+        changedBody.end();\n+\n+        changedBody.end();\n+        \n+        transformation.extendMethod(signature,changedBody.toString());\n+\n+    }\n+\n     private void addWriterMethod(String fieldName, String cachedFieldName, String accessFieldName, boolean cache,\n-                                 String parameterName,\n-                                 String fieldType, String resourcesFieldName,\n+                                 String parameterName, String fieldType, String resourcesFieldName,\n                                  ClassTransformation transformation)\n     {\n         BodyBuilder builder = new BodyBuilder();\n@@ -253,11 +293,10 @@ private void addWriterMethod(String fieldName, String cachedFieldName, String ac\n         // Always start by updating the parameter; this will implicitly check for\n         // read-only or unbound parameters. $1 is the single parameter\n         // to the method.\n-\n+        builder.addln(\"%s.unregisterParameterChangeListener($0);\",accessFieldName);\n         builder.addln(\"%s.write(($w)$1);\", accessFieldName);\n-\n+        builder.addln(\"%s.registerParameterChangeListener($0);\",accessFieldName);\n         builder.addln(\"%s = $1;\", fieldName);\n-\n         if (cache) builder.addln(\"%s = %s.isRendering();\", cachedFieldName, resourcesFieldName);\n \n         builder.end();\n@@ -269,6 +308,17 @@ private void addWriterMethod(String fieldName, String cachedFieldName, String ac\n \n         transformation.addMethod(signature, builder.toString());\n \n+        builder.clear();\n+\n+        //add the catch because if we don't re-register the class as a parameter change listener, it's value\n+        //could wind up stale, and write can throw an exception.\n+        builder.begin();\n+        builder.addln(\"%s.registerParameterChangeListener($0);\",accessFieldName);\n+        builder.addln(\"throw $e;\");\n+        builder.end();\n+\n+        transformation.addCatch(signature,Exception.class.getName(),builder.toString());\n+\n         transformation.replaceWriteAccess(fieldName, methodName);\n     }\n \n@@ -349,4 +399,9 @@ public static void bind(String parameterName, InternalComponentResources resourc\n \n         resources.bindParameter(parameterName, new LiteralBinding(null, \"default \" + parameterName, value));\n     }\n+\n+    public static <T> boolean equal(T left, T right)\n+    {\n+        return TapestryInternalUtils.isEqual(left,right);\n+    }\n }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/ParameterWorker.java",
                "sha": "e2da61b4958fbb59a76cd92c27362847c3c36155",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/TransformMessages.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/TransformMessages.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 1,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/TransformMessages.java",
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2008 The Apache Software Foundation\n+// Copyright 2008, 2009 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -21,6 +21,7 @@\n import org.apache.tapestry5.ioc.internal.util.MessagesImpl;\n import org.apache.tapestry5.runtime.Component;\n import org.apache.tapestry5.services.TransformMethodSignature;\n+import org.apache.tapestry5.annotations.MixinClasses;\n \n class TransformMessages\n {\n@@ -51,4 +52,10 @@ static String illegalNumberOfPageActivationContextHandlers(List<String> fields)\n     {\n         return MESSAGES.format(\"illegal-number-of-page-activation-context-handlers\", InternalUtils.joinSorted(fields));\n     }\n+\n+\n+    public static String badMixinConstraintLength(MixinClasses mixin, String fieldName)\n+    {\n+        return MESSAGES.format(\"bad-mixin-constraint-length\",mixin.value().length,fieldName,mixin.order().length);\n+    }\n }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/internal/transform/TransformMessages.java",
                "sha": "5168a6012792087dc378103ec91b1fd3feb6dd7c",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/model/ComponentModel.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/model/ComponentModel.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/model/ComponentModel.java",
                "patch": "@@ -167,4 +167,11 @@\n      * @return true if event handler present\n      */\n     boolean handlesEvent(String eventType);\n+\n+    /**\n+     * @param mixinClassName class name of the mixin for which the ordering is desired\n+     * @return the ordering constraint(s) for the mixin, potentially null.\n+     * @since 5.2.0.0\n+     */\n+    String[] getOrderForMixin(String mixinClassName);\n }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/model/ComponentModel.java",
                "sha": "8694ac9e8a1572d7f11ae7f40ee19dc0cac6547a",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/model/EmbeddedComponentModel.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/model/EmbeddedComponentModel.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/model/EmbeddedComponentModel.java",
                "patch": "@@ -69,4 +69,11 @@\n      * @since 5.1.0.0\n      */\n     List<String> getPublishedParameters();\n+\n+    /**\n+     * @param mixinClassName\n+     * @return the ordering constraints for the specified mixin, or null.\n+     * @Since 5.2.0.0\n+     */\n+    String[] getConstraintsForMixin(String mixinClassName);\n }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/model/EmbeddedComponentModel.java",
                "sha": "f359affa34494a206b861a52aee4ba16674b3ca3",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/model/MutableComponentModel.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/model/MutableComponentModel.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 2,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/model/MutableComponentModel.java",
                "patch": "@@ -34,9 +34,26 @@\n      * @param defaultBindingPrefix the default binding prefix for this parameter @throws IllegalArgumentException if a\n      *                             parameter with the given name has already been defined for this model\n      * @see Parameter\n+     * @deprecated Use {@link #addParameter(String, boolean, boolean, String, boolean)} instead.\n      */\n     void addParameter(String name, boolean required, boolean allowNull, String defaultBindingPrefix);\n \n+    /**\n+     * Adds a new formal parameter to the model. Each parameter has a unique name (though access to parameters is case\n+     * insensitive).\n+     *\n+     * @param name                 new, unique name for the parameter\n+     * @param required             if true, the parameter must be bound\n+     * @param allowNull            if true, then parameter may be bound to null, if false a null check will be added\n+     * @param defaultBindingPrefix the default binding prefix for this parameter @throws IllegalArgumentException if a\n+     *                             parameter with the given name has already been defined for this model\n+     * @param cached               if true, the parameter value should be cached within the component during rendering\n+     * @see org.apache.tapestry5.annotations.Parameter\n+     * @since 5.2.0.0\n+     */\n+    public void addParameter(String name, boolean required, boolean allowNull, String defaultBindingPrefix,boolean cached);\n+\n+\n     /**\n      * Defines a new embedded component.\n      *\n@@ -66,9 +83,10 @@ MutableEmbeddedComponentModel addEmbeddedComponent(String id, String type, Strin\n     String setFieldPersistenceStrategy(String fieldName, String strategy);\n \n     /**\n-     * Adds a mixin to the component's implementation.\n+     * Adds a mixin to the component's implementation, optionally specifying ordering constraints, as per OrderedConfiguration.\n+     * @since 5.2.0.0\n      */\n-    void addMixinClassName(String mixinClassName);\n+    void addMixinClassName(String mixinClassName, String... order);\n \n     /**\n      * Sets the internal flag to indicate that this model (and all models that extend from it) support informal",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/model/MutableComponentModel.java",
                "sha": "361c06d35098a797b30974536ef6945f3155df37",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/model/MutableEmbeddedComponentModel.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/model/MutableEmbeddedComponentModel.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 2,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/model/MutableEmbeddedComponentModel.java",
                "patch": "@@ -25,9 +25,9 @@\n     void addParameter(String name, String value);\n \n     /**\n-     * Adds a mixin to the component in terms of its fully qualified class name.\n+     * Adds a mixin to the component in terms of its fully qualified class name, with optional ordering constraints.\n      */\n-    void addMixin(String mixinClassName);\n+    void addMixin(String mixinClassName, String... orderingConstraints);\n \n     /**\n      * Sets the list of published parameters for this embedded component.",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/model/MutableEmbeddedComponentModel.java",
                "sha": "b27aab187fc6324bab76cdb687d084d75c81c9bc",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/model/ParameterModel.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/model/ParameterModel.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 1,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/model/ParameterModel.java",
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006, 2008 The Apache Software Foundation\n+// Copyright 2006, 2008, 2009 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -42,4 +42,10 @@\n      * The default binding prefix for the parameter, usually \"prop\".\n      */\n     String getDefaultBindingPrefix();\n+\n+    /**\n+     * @return true if the bound-value is cached in the component during rendering.\n+     * @since 5.2.0.0\n+     */\n+    boolean isCached();\n }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/model/ParameterModel.java",
                "sha": "3e462fb0928cec22b0c941b03d7de9015b65a6fe",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/services/TapestryModule.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/services/TapestryModule.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/services/TapestryModule.java",
                "patch": "@@ -484,6 +484,12 @@ public static void contributeComponentClassTransformWorker(\n \n         configuration.addInstance(\"Parameter\", ParameterWorker.class, \"after:Inject*\");\n \n+        //bind parameter should always go after parameter to make sure all parameters\n+        //have been properly setup.\n+\n+        configuration.addInstance(\"BindParameter\",BindParameterWorker.class, \"after:Parameter\");\n+\n+\n         // Workers for the component rendering state machine methods; this is in typical\n         // execution order.\n ",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/java/org/apache/tapestry5/services/TapestryModule.java",
                "sha": "2d0910f4ad100693bbcd8b9dc9793e1c7fd962ea",
                "status": "modified"
            },
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/resources/org/apache/tapestry5/internal/pageload/PageloadStrings.properties",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/resources/org/apache/tapestry5/internal/pageload/PageloadStrings.properties?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/main/resources/org/apache/tapestry5/internal/pageload/PageloadStrings.properties",
                "patch": "@@ -0,0 +1,40 @@\n+#\n+# Copyright 2009 The Apache Software Foundation\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+unique_mixin_required=Mixins applied to a component must be unique. Mixin '%s' has already been applied.\n+mixinid_for_paramnotfound=\"Mixin id for parameter '%s' not found. Attached mixins: %s.\"\n+missing_component_type=You must specify the type via t:type, the element, or @Componentno_more_tokens=No more template tokens.\n+could_not_find_override=Could not find an override for extension point '%s'.\n+no_parent_for_extension=Component %s uses an extension template, but does not have a parent component.\n+token_not_implemented=Not yet implemented: %s\n+parameter_not_supported=Component %s does not include a formal parameter '%s' (and does not support informal parameters).\n+redundant_embedded_component_types=Embedded component '%s' provides a type attribute in the template ('%s') \\\n+                                   as well as in the component class ('%s'). You should not provide a type attribute \\\n+                                   in the template when defining an embedded component within the component class.\n+recursive_template=The template for component %s is recursive (contains another direct or indirect reference to \\\n+                   component %<s). This is not supported (components may not contain themselves).\n+composite_render_command_method_not_implemented=RenderQueue method %s() is not implemented for composited render commands.\n+exception_assembling_root_component=Exception assembling root component of page %s: %s\n+exception_assembling_embedded_component=Exception assembling embedded component '%s' (of type %s, within %s): %s\n+embedded_components_not_in_template=Embedded component(s) %s are defined within component class %s \\\n+                                    (or a super-class of %s), but are not present in the component template (%s).\n+parameter_already_published=Parameter '%s' of embedded component '%s' can not be published as a parameter of component \\\n+                            %s, as it has previously been published by embedded component '%s'.\n+failure_creating_embedded_component=Failure creating embedded component '%s' of %s: %s\"\n+published_parameter_nonexistant=Parameter '%s' of component %s is improperly published from embedded component '%s' \\\n+                                (where it does not exist). This may be a typo in the publishParameters attribute of \\\n+                                the @Component annotation.\n+",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/resources/org/apache/tapestry5/internal/pageload/PageloadStrings.properties",
                "sha": "cb8b504265e70ef8df6c71355e7ab9dd5a75813d",
                "status": "added"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/resources/org/apache/tapestry5/internal/structure/StructureStrings.properties",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/resources/org/apache/tapestry5/internal/structure/StructureStrings.properties?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 1,
                "filename": "tapestry-core/src/main/resources/org/apache/tapestry5/internal/structure/StructureStrings.properties",
                "patch": "@@ -35,4 +35,8 @@ field-persist-failure=Error persisting field %s:%s: %s\n missing-render-variable=Component %s does not contain a stored render variable with name '%s'.  Stored render variables: %s.\n render-variable-set-when-not-rendering=Component %s is not rendering, so render variable '%s' may not be updated.\n persist-change-before-load-complete=Persistent fields may not be updated until after the page has finished loading. \\\n-  This may be due to a persistent field with a default value. The default value should be removed.\n\\ No newline at end of file\n+  This may be due to a persistent field with a default value. The default value should be removed.\n+no-such-core-component-parameter=Failed to BindParameter '%s' in mixin '%s': component '%s' does not provide a matching \\\n+  parameter (looking for: %s).  Available parameters: %s\n+bind-parameter-only-on-mixin=@BindParameter was used on '%s' in component class '%s', but @BindParameter should \\\n+  only be used in mixins.",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/resources/org/apache/tapestry5/internal/structure/StructureStrings.properties",
                "sha": "a17fc508bc3243ce4c6c049c8065cf977dfa819f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/resources/org/apache/tapestry5/internal/transform/TransformStrings.properties",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/resources/org/apache/tapestry5/internal/transform/TransformStrings.properties?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/main/resources/org/apache/tapestry5/internal/transform/TransformStrings.properties",
                "patch": "@@ -17,3 +17,5 @@ component-not-assignable-to-field=Component %s is not assignable to field %s (of\n cached-no-return-value=@Cached may only be used with methods that return values: %s\n cached-no-parameters=@Cached cannot be used with methods that accept parameters: %s\n illegal-number-of-page-activation-context-handlers=Illegal number of fields annotated with @PageActivationContext: %s. Only one field is allowed.\n+bad-mixin-constraint-length=%d mixins defined via @MixinClasses on field '%s', but %d ordering constraints \\\n+ specified (expected 0 or %1$d).",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/main/resources/org/apache/tapestry5/internal/transform/TransformStrings.properties",
                "sha": "b6fce47a71248481eac55b3e329bfbd84f1642e6",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/app1/ClientPersistenceDemo.tml",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/app1/ClientPersistenceDemo.tml?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 2,
                "filename": "tapestry-core/src/test/app1/ClientPersistenceDemo.tml",
                "patch": "@@ -10,8 +10,12 @@\n   <p>\n     Session: [${sessionExists}]\n   </p>\n-  \n-  \n+\n+\n+  <p>\n+    <t:actionlink t:id=\"nixSession\">nix session</t:actionlink>\n+  </p>\n+\n   <p>\n     <t:actionlink t:id=\"storeString\">store string</t:actionlink>\n   </p>\n@@ -24,4 +28,5 @@\n     <t:pagelink page=\"clientpersistencedemo\">refresh</t:pagelink>\n   </p>\n \n+\n </html>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/app1/ClientPersistenceDemo.tml",
                "sha": "f9fb94bcfc7b9df95c7ec6e74d0ecb059e25ed16",
                "status": "modified"
            },
            {
                "additions": 158,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/IntegrationTests.java",
                "changes": 176,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/IntegrationTests.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 18,
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/IntegrationTests.java",
                "patch": "@@ -41,6 +41,16 @@ public IntegrationTests()\n         super(\"src/test/app1\");\n     }\n \n+\n+    @Test(enabled = false)\n+    public static void main(String[] args) throws Exception {\n+        IntegrationTests it = new IntegrationTests();\n+        it.setup();\n+        while(true) {\n+            Thread.sleep(1000);\n+        }\n+    }\n+\n     @Test\n     public void assets() throws Exception\n     {\n@@ -133,12 +143,13 @@ public void environmental()\n     @Test\n     public void exception_report()\n     {\n+        //mismatched tag.\n         start(\"BadTemplate Page\");\n \n         assertTextPresent(\"org.apache.tapestry5.ioc.internal.util.TapestryException\",\n-                          \"Failure parsing template classpath:org/apache/tapestry5/integration/app1/pages/BadTemplate.tml, line 7, column 15\",\n-                          \"<t:foobar>content from template</t:foobar>\",\n-                          \"Element <t:foobar> is in the Tapestry namespace, but is not a recognized Tapestry template element.\");\n+                          \"Failure parsing template classpath:org/apache/tapestry5/integration/app1/pages/BadTemplate.tml: Unexpected close tag </foobar>; expected </t:foobar>\",\n+                          \"classpath:org/apache/tapestry5/integration/app1/pages/BadTemplate.tml, line 6\",\n+                          \"<t:foobar>content from template</foobar>\");\n     }\n \n     @Test\n@@ -566,7 +577,7 @@ public void bean_editor()\n         // The XPath support is too weak for //div[@class='t-beandisplay-value'][%d], so we\n         // just look for the text itself.\n \n-        assertTextPresent(\"Howard\", \"Lewis Ship\", \"1966\", \"Martian\", \"U. S. Citizen\", \"***********\", \"line1\", \"line2\",\n+        assertTextPresent(\"Howard\", \"Lewis Ship\", \"1966\", \"Martian\", \"U.S. Citizen\", \"***********\", \"line1\", \"line2\",\n                           \"line3\");\n     }\n \n@@ -581,10 +592,11 @@ public void bean_editor_property_reorder_remove()\n         type(\"firstName\", \"Howard\");\n         type(\"lastName\", \"Lewis Ship\");\n         type(\"password\", \"supersecret\");\n+        check(\"citizen\");\n \n         clickAndWait(\"//input[@type=\\'submit\\']\");\n \n-        assertTextPresent(\"Howard\", \"Lewis Ship\", \"0\", \"100% He-Man\", \"U. S. Citizen\");\n+        assertTextPresent(\"Howard\", \"Lewis Ship\", \"0\", \"100% He-Man\", \"U.S. Citizen\");\n     }\n \n     @Test\n@@ -847,7 +859,7 @@ public void client_side_validation()\n \n         clickAndWait(SUBMIT);\n \n-        assertTextPresent(\"Howard\", \"Lewis Ship\", \"1966\", \"U. S. Citizen\");\n+        assertTextPresent(\"Howard\", \"Lewis Ship\", \"1966\", \"U.S. Citizen\");\n     }\n \n     @Test\n@@ -865,7 +877,7 @@ public void render_phase_method_may_return_renderable()\n     {\n         start(\"Renderable Demo\");\n \n-        assertTextPresent(\"Renderable Demo\", \"[proves it works.]\");\n+        assertTextPresent(\"Renderable Demo\", \"[This proves it works.]\");\n     }\n \n     @Test\n@@ -912,6 +924,9 @@ public void inherited_bindings()\n     public void client_persistence()\n     {\n         start(\"Client Persistence Demo\");\n+        //can't assume session won't exist because other tests use form components w/ defaults, which means\n+        //session creation to store the ValidationTracker. So we explicitly clear the session here.\n+        clickAndWait(\"link=nix session\");\n \n         assertTextPresent(\"Persisted value: []\", \"Session: [false]\");\n \n@@ -1045,16 +1060,17 @@ public void event_handler_return_types()\n         goBack();\n         waitForPageToLoad();\n \n-        // This has been failing?  Why?\n-\n-        // clickAndWait(\"link=URL\");\n-        // assertTextPresent(\"Google\");\n-        // goBack();\n-        // waitForPageToLoad();\n+        /*\n+        clickAndWait(\"link=URL\");\n+        assertTextPresent(\"Google>\");\n+        goBack();\n+        waitForPageToLoad();\n+        */\n \n         clickAndWait(\"link=bad\");\n         assertTextPresent(\"An unexpected application exception has occurred.\",\n-                          \"An event handler for component org.apache.tapestry5.integration.app1.pages.Index returned the value 20 (from method org.apache.tapestry5.integration.app1.pages.Index.onActionFromBadReturnType() (at Index.java:34)). Return type java.lang.Integer can not be handled.\");\n+                          \"A component event handler method returned the value 20. Return type java.lang.Integer can not be handled.\",\n+                          \"context:ReturnTypes.tml, line 50\");\n     }\n \n     @Test\n@@ -1260,7 +1276,7 @@ public void date_field_inside_bean_editor()\n         start(\"BeanEditor / Date Demo\", \"clear\");\n \n         type(\"name\", \"Howard Lewis Ship\");\n-        type(\"date\", \"12/24/66\");\n+        type(\"date\", \"12/24/1966\");\n \n         clickAndWait(SUBMIT);\n \n@@ -1635,7 +1651,7 @@ public void component_event_errors()\n         clickAndWait(\"link=force invalid event context\");\n \n         assertTextPresent(\"An unexpected application exception has occurred.\",\n-                          \"org.apache.tapestry5.ioc.internal.util.TapestryException\",\n+                          \"org.apache.tapestry5.runtime.ComponentEventException\",\n                           \"java.lang.NumberFormatException\");\n     }\n \n@@ -2362,7 +2378,7 @@ public void form_field_outside_form()\n \n         assertTextPresent(\"org.apache.tapestry5.internal.services.RenderQueueException\",\n                           \"Render queue error in SetupRender[FormFieldOutsideForm:textfield]: The Textfield component must be enclosed by a Form component.\",\n-                          \"context:FormFieldOutsideForm.tml, line 5, column 45\");\n+                          \"context:FormFieldOutsideForm.tml, line 5\");\n     }\n \n     /**\n@@ -2967,6 +2983,130 @@ public void renderclientid_mixin()\n         assertText(\"divwithid\",\"Div Content\");\n     }\n \n+    @Test\n+    public void bindparameter()\n+    {\n+        start(\"BindParameter mixin annotation\");\n+        //implicit parameter name\n+        assertEchoMixins(\"testmixin\",\"mypropertyvalue\",0,-1,-1,1,true);\n+        assertText(\"mypropertyoutput\",\"mypropertyvalue\");\n+\n+        //explicit parameter name\n+        assertEchoMixins(\"testmixin2\",\"10\",-1,0,-1,2,true);\n+        assertText(\"mypropertyoutput2\",\"10\");\n+\n+        //multiple parameter names; first one found wins.\n+        assertEchoMixins(\"testmixin3\",\"hello\",-1,-1,0,3,true);\n+\n+        //multiple mixins\n+        assertEchoMixins(\"multimixins\",\"supervalue\",0,1,2,3,true);\n+        assertText(\"mypropertyoutput4\",\"supervalue\");\n+\n+        //finally, binding to default bindings (which is tricky because of page load invocation order)\n+        assertEchoMixins(\"defaultbinding\",\"goodbye\",0,-1,-1,1,false);\n+        assertText(\"mypropertyoutput5\",\"goodbye\");\n+    }\n+\n+    @Test\n+    public void bindparameter_nomatchingparameter()\n+    {\n+        start(\"BindParameter error handling\");\n+\n+        assertTextPresent(\"An unexpected application exception has occurred.\",\n+               \"Failed to BindParameter 'boundParameter' in mixin 'org.apache.tapestry5.integration.app1.mixins.EchoValue2': \"\n+                       + \"component 'org.apache.tapestry5.corelib.components.Any' does not provide a matching parameter \"\n+                       + \"(looking for: value). Available parameters: [clientId, element]\");\n+\n+    }\n+\n+    @Test\n+    public void bindparameter_on_componentfield_throws_exception()\n+    {\n+        start(\"BindParameter on component\");\n+\n+        assertTextPresent(\"An unexpected application exception has occurred.\",\n+        \"@BindParameter was used on 'value' in component class 'org.apache.tapestry5.integration.app1.components.BindParameterComponent', but @BindParameter should only be used in mixins\");\n+    }\n+\n+    @Test\n+    public void mixin_ordering()\n+    {\n+        //echo => <original>-before, temporaryvaluefromechovaluemixin, <original>-after\n+        //echo2 => echo2-<original>-before, \"3\", echo2-<original>-after\n+        //echo3 => echo3-<original>-before, \"world\", echo3-<original>-after\n+        //order1: echo, echo2, echo3\n+        start(\"Mixin Ordering Demo\");\n+\n+        assertMixinOrder(1,0,1,2,3,true);\n+        //order2: echo3, echo2, echo\n+        assertMixinOrder(2,2,3,0,1,true);\n+        //order3: echo2, echo3, echo\n+        assertMixinOrder(3,3,0,2,1,true);\n+        //order4: echo3, echo, echo2\n+        assertMixinOrder(4,3,1,0,2,true);\n+        //order5: echo2, echo, echo3\n+        assertMixinOrder(5,2,0,1,3,true);\n+        //order6: echo, echo3, echo2, TextOnlyOnDisabled\n+        assertMixinOrder(6,0,3,1,2,false);\n+        //make sure mixin after and mixin before constraints don't interfere...\n+        //order7: echo, echo2 <corecomponent> echoafter2, echoafter\n+        assertMixinOrder(7,0,1,-1,2,true);\n+        assertText(\"order7_before_but_after\",\"afterrender_for_mixinafter_isreally_justbefore_corecomponent_afterrender-before\");\n+        assertText(\"order7_after_but_before\",\"afterrender_for_mixinafter_isreally_justbefore_corecomponent_afterrender-after\");\n+        //echoafter2 should have for its value at the point it renders\n+        //the value that echo2 sets, since the core component isn't changing its value.\n+        assertText(\"order7_before_but_after2\",\"3-before\");\n+        assertText(\"order7_after_but_before2\",\"3-after\");\n+    }\n+\n+    private void assertMixinOrder(int orderNum, int echo1From, int echo2From, int echo3From, int fieldFrom, boolean isField)\n+    {\n+        assertEchoMixins(\"order\" + orderNum,\"batman\", echo1From,echo2From,echo3From,fieldFrom,isField);\n+    }\n+\n+    /**\n+     * asserts that the \"echo value\" mixins are properly functioning (ie @BindParameter, and mixin ordering).\n+     * each integer value specifies the echo mixin number (echovalue => 1, echovalue2 => 2, echovalue3 => 3; 0 is the original value)\n+     * from which the specified echo mixin is expected to \"receive\" its value. So if echo1From is 2, then the \"original value\"\n+     * printed by echo1 is expected to be the value set by echo2. If a given \"from\" is < 0, checking the corresponding mixin values is disabled.\n+     */\n+\n+    private void assertEchoMixins(String fieldName, String originalValue, int echo1From, int echo2From, int echo3From, int fieldFrom, boolean isField)\n+    {\n+        String[] vals = {originalValue,\"temporaryvaluefromechovaluemixin\",\"3\",\"world\"};\n+        String before = fieldName + \"_before\";\n+        String after = fieldName + \"_after\";\n+        if (echo1From > -1)\n+        {\n+            assertText(before,vals[echo1From] + \"-before\");\n+            assertText(after,vals[echo1From] + \"-after\");\n+        }\n+        if (echo2From > -1)\n+        {\n+            assertText(before + \"2\",\"echo2-\" + vals[echo2From] + \"-before\");\n+            assertText(after + \"2\",\"echo2-\" + vals[echo2From] + \"-after\");\n+        }\n+        if (echo3From > -1)\n+        {\n+            assertText(before + \"3\",\"echo3-\" + vals[echo3From] + \"-before\");\n+            assertText(after + \"3\",\"echo3-\" + vals[echo3From] + \"-after\");\n+        }\n+        if (isField)\n+            assertFieldValue(fieldName,vals[fieldFrom]);\n+        else\n+            assertText(fieldName,vals[fieldFrom]);\n+    }\n+\n+\n+    @Test\n+    public void missing_componentclass()\n+    {\n+        start(\"Missing Component Class Exception\");\n+        assertTextPresent(\n+                \"An unexpected application exception has occurred\",\n+                \"Failure creating embedded component 'componentwithnotype' of org.apache.tapestry5.integration.app1.pages.MissingComponentClassException: You must specify the type via t:type, the element, or @Component\");\n+    }\n+\n     @Test\n     public void session_attribute()\n     {\n@@ -2980,4 +3120,4 @@ public void session_attribute()\n         assertTextPresent(\"read Foo\");\n         assertTextPresent(\"read Bar\");\n     }\n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/IntegrationTests.java",
                "sha": "32b1ac33992b8613342da6fc5dda99c5cf5464dc",
                "status": "modified"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/BindParameterComponent.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/BindParameterComponent.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/BindParameterComponent.java",
                "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.components;\n+\n+import org.apache.tapestry5.annotations.BindParameter;\n+import org.apache.tapestry5.MarkupWriter;\n+\n+/**\n+ * @BindParameter should only be used inside a mixin; should get an intelligible exception when trying to use this component.\n+ */\n+public class BindParameterComponent\n+{\n+\n+    @BindParameter\n+    private Object value;\n+}",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/BindParameterComponent.java",
                "sha": "311b5ab570871945b17f2255a514f7c395d73825",
                "status": "added"
            },
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/BindParameterComponentContainer.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/BindParameterComponentContainer.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/BindParameterComponentContainer.java",
                "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.components;\n+\n+import org.apache.tapestry5.annotations.Parameter;\n+import org.apache.tapestry5.annotations.MixinAfter;\n+\n+/**\n+ * Used to help prove that BindParameter on a component field throws an intelligible exception, even if the containing\n+ * resources actually do contain a declared parameter of the appropriate name.\n+ */\n+public class BindParameterComponentContainer\n+{\n+\n+    @Parameter(\"literal:testvalue\")\n+    private String value;\n+\n+\n+}",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/BindParameterComponentContainer.java",
                "sha": "688b532fdf0801be2484e6be0a858c550582ca65",
                "status": "added"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/TextOnlyOnDisabledTextField.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/TextOnlyOnDisabledTextField.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/TextOnlyOnDisabledTextField.java",
                "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.components;\n+\n+import org.apache.tapestry5.corelib.components.TextField;\n+import org.apache.tapestry5.annotations.Mixin;\n+import org.apache.tapestry5.integration.app1.mixins.TextOnlyOnDisabled;\n+\n+/**\n+ *\n+ */\n+public class TextOnlyOnDisabledTextField extends TextField\n+{\n+\n+    @Mixin(order = \"after:*\")\n+    private TextOnlyOnDisabled theMixin;\n+    \n+}",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/components/TextOnlyOnDisabledTextField.java",
                "sha": "0944f04b8458c1dadff5a87c6cb754563dfe15e4",
                "status": "added"
            },
            {
                "additions": 56,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoAfter.java",
                "changes": 56,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoAfter.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoAfter.java",
                "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.mixins;\n+\n+import org.apache.tapestry5.annotations.*;\n+import org.apache.tapestry5.MarkupWriter;\n+import org.apache.tapestry5.ComponentResources;\n+import org.apache.tapestry5.Field;\n+import org.apache.tapestry5.ioc.annotations.Inject;\n+\n+/**\n+ * Mixin demonstrating the use of the BindParameter annotation, using implicit parent-parameter naming.\n+ * It echos the current value, changes said value for the duration of the component\n+ * render, then changes it back and re-echos it.\n+ */\n+@MixinAfter\n+public class EchoAfter\n+{\n+    @BindParameter\n+    private String value;\n+\n+    private String temp;\n+\n+    @InjectContainer\n+    private Field field;\n+\n+    @BeginRender\n+    void beginRender(MarkupWriter writer)\n+    {\n+        writer.element(\"div\",\"id\",field.getClientId() + \"_before_but_after\");\n+        writer.writeRaw(value + \"-before\");\n+        writer.end();\n+        temp = value;\n+        value = \"beginrender_for_mixinafter_isreally_justafter_corecomponent_render\";\n+    }\n+\n+    @AfterRender\n+    void afterRender(MarkupWriter writer) {\n+        value = temp;\n+        writer.element(\"div\",\"id\",field.getClientId() + \"_after_but_before\");\n+        writer.writeRaw(value + \"-after\");\n+        writer.end();\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoAfter.java",
                "sha": "9796f622fc29d064c639da92f6e7f0ba20d29e88",
                "status": "added"
            },
            {
                "additions": 56,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoAfter2.java",
                "changes": 56,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoAfter2.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoAfter2.java",
                "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.mixins;\n+\n+import org.apache.tapestry5.annotations.*;\n+import org.apache.tapestry5.MarkupWriter;\n+import org.apache.tapestry5.ComponentResources;\n+import org.apache.tapestry5.Field;\n+import org.apache.tapestry5.ioc.annotations.Inject;\n+\n+/**\n+ * Mixin demonstrating the use of the BindParameter annotation, using implicit parent-parameter naming.\n+ * It echos the current value, changes said value for the duration of the component\n+ * render, then changes it back and re-echos it.\n+ */\n+@MixinAfter\n+public class EchoAfter2\n+{\n+    @BindParameter\n+    private String value;\n+\n+    private String temp;\n+\n+    @InjectContainer\n+    private Field field;\n+\n+    @BeginRender\n+    void beginRender(MarkupWriter writer)\n+    {\n+        writer.element(\"div\",\"id\",field.getClientId() + \"_before_but_after2\");\n+        writer.writeRaw(value + \"-before\");\n+        writer.end();\n+        temp = value;\n+        value = \"afterrender_for_mixinafter_isreally_justbefore_corecomponent_afterrender\";\n+    }\n+\n+    @AfterRender\n+    void afterRender(MarkupWriter writer) {\n+        value = temp;\n+        writer.element(\"div\",\"id\",field.getClientId() + \"_after_but_before2\");\n+        writer.writeRaw(value + \"-after\");\n+        writer.end();\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoAfter2.java",
                "sha": "b27fb8f4eeb3885b4b884f8bf8b67886303e4134",
                "status": "added"
            },
            {
                "additions": 55,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoValue.java",
                "changes": 55,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoValue.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoValue.java",
                "patch": "@@ -0,0 +1,55 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.mixins;\n+\n+import org.apache.tapestry5.annotations.*;\n+import org.apache.tapestry5.MarkupWriter;\n+import org.apache.tapestry5.ComponentResources;\n+import org.apache.tapestry5.Field;\n+import org.apache.tapestry5.ioc.annotations.Inject;\n+\n+/**\n+ * Mixin demonstrating the use of the BindParameter annotation, using implicit parent-parameter naming.\n+ * It echos the current value, changes said value for the duration of the component\n+ * render, then changes it back and re-echos it.\n+ */\n+public class EchoValue\n+{\n+    @BindParameter\n+    private String value;\n+\n+    private String temp;\n+\n+    @InjectContainer\n+    private Field field;\n+\n+    @BeginRender\n+    void beginRender(MarkupWriter writer)\n+    {\n+        writer.element(\"div\",\"id\",field.getClientId() + \"_before\");\n+        writer.writeRaw(value + \"-before\");\n+        writer.end();\n+        temp = value;\n+        value = \"temporaryvaluefromechovaluemixin\";\n+    }\n+\n+    @AfterRender\n+    void afterRender(MarkupWriter writer) {\n+        value = temp;\n+        writer.element(\"div\",\"id\",field.getClientId() + \"_after\");\n+        writer.writeRaw(value + \"-after\");\n+        writer.end();\n+    }\n+}",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoValue.java",
                "sha": "9c885e3d4e441378cd41d5d4cfd60d3cd6015328",
                "status": "added"
            },
            {
                "additions": 51,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoValue2.java",
                "changes": 51,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoValue2.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoValue2.java",
                "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.mixins;\n+\n+import org.apache.tapestry5.annotations.BindParameter;\n+import org.apache.tapestry5.annotations.InjectContainer;\n+import org.apache.tapestry5.MarkupWriter;\n+import org.apache.tapestry5.ClientElement;\n+\n+/**\n+ * Mixin demonstrating the use of BindParameter, using explicit naming of the parent parameter.\n+ */\n+public class EchoValue2\n+{\n+    @BindParameter(value = \"value\")\n+    private Object boundParameter;\n+\n+    @InjectContainer\n+    private ClientElement element;\n+\n+    private Object temp;\n+\n+    void beginRender(MarkupWriter writer)\n+    {\n+        writer.element(\"div\",\"id\",element.getClientId() + \"_before2\");\n+        writer.writeRaw(\"echo2-\" + boundParameter + \"-before\");\n+        writer.end();\n+        temp = boundParameter;\n+        boundParameter = \"3\";\n+    }\n+\n+    void afterRender(MarkupWriter writer)\n+    {\n+        boundParameter = temp;\n+        writer.element(\"div\",\"id\",element.getClientId() + \"_after2\");\n+        writer.writeRaw(\"echo2-\" + boundParameter + \"-after\");\n+        writer.end();\n+    }\n+}",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoValue2.java",
                "sha": "1b8a3137401f2d69e0afb2c84c400b4fc2fe689a",
                "status": "added"
            },
            {
                "additions": 51,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoValue3.java",
                "changes": 51,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoValue3.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoValue3.java",
                "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.mixins;\n+\n+import org.apache.tapestry5.annotations.BindParameter;\n+import org.apache.tapestry5.annotations.InjectContainer;\n+import org.apache.tapestry5.MarkupWriter;\n+import org.apache.tapestry5.ClientElement;\n+\n+/**\n+ * Mixin demonstrating the use of BindParameter, using explicit naming of the parent parameter.\n+ */\n+public class EchoValue3\n+{\n+    @BindParameter(value = {\"object\",\"value\"})\n+    private Object boundParameter;\n+\n+    @InjectContainer\n+    private ClientElement element;\n+\n+    private Object temp;\n+\n+    void beginRender(MarkupWriter writer)\n+    {\n+        writer.element(\"div\",\"id\",element.getClientId() + \"_before3\");\n+        writer.writeRaw(\"echo3-\" + boundParameter + \"-before\");\n+        writer.end();\n+        temp = boundParameter;\n+        boundParameter = \"world\";\n+    }\n+\n+    void afterRender(MarkupWriter writer)\n+    {\n+        boundParameter = temp;\n+        writer.element(\"div\",\"id\",element.getClientId() + \"_after3\");\n+        writer.writeRaw(\"echo3-\" + boundParameter + \"-after\");\n+        writer.end();\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/EchoValue3.java",
                "sha": "02365ad232b86de641a05b77983d289fd6bc28b6",
                "status": "added"
            },
            {
                "additions": 65,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/TextOnlyOnDisabled.java",
                "changes": 65,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/TextOnlyOnDisabled.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/TextOnlyOnDisabled.java",
                "patch": "@@ -0,0 +1,65 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.mixins;\n+\n+import org.apache.tapestry5.annotations.BindParameter;\n+import org.apache.tapestry5.annotations.InjectContainer;\n+import org.apache.tapestry5.*;\n+import org.apache.tapestry5.internal.InternalComponentResources;\n+import org.apache.tapestry5.internal.ParameterAccess;\n+import org.apache.tapestry5.ioc.annotations.Inject;\n+import org.apache.tapestry5.ioc.services.TypeCoercer;\n+\n+/**\n+ * Renders a plain-text version of a value where \n+ */\n+public class TextOnlyOnDisabled\n+{\n+    @BindParameter\n+    private Object value;\n+\n+    @BindParameter\n+    private boolean disabled;\n+\n+\n+    @BindParameter\n+    private FieldTranslator translate;\n+\n+    @Inject\n+    private TypeCoercer coercer;\n+\n+    @InjectContainer\n+    private ClientElement field;\n+\n+    @Inject\n+    private ComponentResources resources;\n+\n+    Boolean beginRender(MarkupWriter writer)\n+    {\n+        InternalComponentResources res = (InternalComponentResources) resources;\n+        ParameterAccess acc = res.getContainerBoundParameterAccess(\"translate\",\"translate\");\n+        if (disabled)\n+        {\n+            //We can short-circuit the text field's beginRender phase, but\n+            //not it's afterRender phase, and TextField calls writer.end()\n+            //in end render.  So we add a dummy element to provide an element to end.\n+            writer.element(\"span\",\"id\",field.getClientId());\n+            writer.write(translate.toClient(value));\n+            return false;\n+        }\n+        return null;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/mixins/TextOnlyOnDisabled.java",
                "sha": "7c8bb392a081017192ce86a5b7fc201c867fc355",
                "status": "added"
            },
            {
                "additions": 50,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/BindParameterDemo.java",
                "changes": 50,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/BindParameterDemo.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/BindParameterDemo.java",
                "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.pages;\n+\n+import org.apache.tapestry5.annotations.Property;\n+import org.apache.tapestry5.annotations.SetupRender;\n+\n+/**\n+ * Page for demonstrating/testing the use of the BindParameter mixin demonstration.\n+ */\n+public class BindParameterDemo\n+{\n+\n+    @Property\n+    private String myproperty;\n+\n+    @Property\n+    private Integer myproperty2;\n+\n+    @Property\n+    private String myproperty3;\n+\n+    @Property\n+    private String myproperty4;\n+\n+    @Property\n+    private String myproperty5;\n+    \n+    @SetupRender\n+    void initMyprop()\n+    {\n+        myproperty=\"mypropertyvalue\";\n+        myproperty2=10;\n+        myproperty3=\"hello\";\n+        myproperty4=\"supervalue\";\n+        myproperty5=\"goodbye\";\n+    }\n+}",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/BindParameterDemo.java",
                "sha": "97d3a841214a4cd749ee1b7944006cb7ddb220d6",
                "status": "added"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/BindParameterNoSuchParameter.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/BindParameterNoSuchParameter.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/BindParameterNoSuchParameter.java",
                "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.pages;\n+\n+/**\n+ *\n+ */\n+public class BindParameterNoSuchParameter\n+{\n+}",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/BindParameterNoSuchParameter.java",
                "sha": "d325c054c9dde1ce6f1852595b5d8d6d8b054b5d",
                "status": "added"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/BindParameterOnComponent.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/BindParameterOnComponent.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/BindParameterOnComponent.java",
                "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.pages;\n+\n+import org.apache.tapestry5.annotations.Property;\n+\n+/**\n+ *\n+ */\n+public class BindParameterOnComponent\n+{\n+}",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/BindParameterOnComponent.java",
                "sha": "21d175a08c244550ecd545e1de66f79069de67a0",
                "status": "added"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/ClientPersistenceDemo.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/ClientPersistenceDemo.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 2,
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/ClientPersistenceDemo.java",
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2007 The Apache Software Foundation\n+// Copyright 2007, 2009 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -15,8 +15,10 @@\n package org.apache.tapestry5.integration.app1.pages;\n \n import org.apache.tapestry5.annotations.Persist;\n+\n import org.apache.tapestry5.ioc.annotations.Inject;\n import org.apache.tapestry5.services.Request;\n+import org.apache.tapestry5.services.Session;\n \n public class ClientPersistenceDemo\n {\n@@ -33,7 +35,7 @@ public Object getPersistedValue()\n \n     public boolean getSessionExists()\n     {\n-        return request.getSession(false) != null;\n+        return session() != null;\n     }\n \n     void onActionFromStoreString()\n@@ -50,4 +52,17 @@ public void run()\n             }\n         };\n     }\n+\n+    void onActionFromNixSession()\n+    {\n+        if (getSessionExists() && !session().isInvalidated())\n+        {\n+            session().invalidate();\n+        }\n+    }\n+\n+    private Session session()\n+    {\n+        return request.getSession(false);\n+    }\n }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/ClientPersistenceDemo.java",
                "sha": "f04785149e1100344836bd6ed19d1a5dd8c6bcfd",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/Index.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/Index.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/Index.java",
                "patch": "@@ -357,6 +357,26 @@ public int compareTo(Item o)\n                      \"RenderClientId Mixin\",\n                      \"Force render of client-side id of a client element via the RenderClientId mixin\"),\n \n+            new Item(\"BindParameterDemo\",\n+                     \"BindParameter mixin annotation\",\n+                     \"Accessing component parameter values from a mixin\"),\n+\n+            new Item(\"BindParameterNoSuchParameter\",\n+                     \"BindParameter error handling\",\n+                     \"BindParameter throws exception if the containing component doesn't have a matching parameter\"),\n+\n+            new Item(\"BindParameterOnComponent\",\n+                      \"BindParameter on component\",\n+                      \"Verify that BindParameter can only be used on mixin fields\"),\n+\n+            new Item(\"MixinOrderingDemo\",\n+                     \"Mixin Ordering Demo\",\n+                     \"Various mixin-ordering scenarios\"),\n+\n+            new Item(\"MissingComponentClassException\",\n+                     \"Missing Component Class Exception\",\n+                     \"Meaningful exception message thrown when component class can't be determined from template or field in containing component.\"),\n+\n             new Item(\"SessionAttributeDemo\",\n                      \"SessionAttribute Demo\",\n                      \"Annotation to map a field to a specific session attribute\")",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/Index.java",
                "sha": "bc727ff8ca6262d1d3c78e43dcc8844f719f7561",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/MissingComponentClassException.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/MissingComponentClassException.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/MissingComponentClassException.java",
                "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.pages;\n+\n+/**\n+ *\n+ */\n+public class MissingComponentClassException\n+{\n+}",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/MissingComponentClassException.java",
                "sha": "6ecf00a6b55324e02efe2cea55daef8b942d3170",
                "status": "added"
            },
            {
                "additions": 58,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/MixinOrderingDemo.java",
                "changes": 58,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/MixinOrderingDemo.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/MixinOrderingDemo.java",
                "patch": "@@ -0,0 +1,58 @@\n+// Copyright 2009 The Apache Software Foundation\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.apache.tapestry5.integration.app1.pages;\n+\n+import org.apache.tapestry5.annotations.*;\n+import org.apache.tapestry5.corelib.components.TextField;\n+import org.apache.tapestry5.integration.app1.mixins.EchoValue;\n+import org.apache.tapestry5.integration.app1.mixins.EchoValue2;\n+import org.apache.tapestry5.integration.app1.components.TextOnlyOnDisabledTextField;\n+\n+/**\n+ * Page for demonstrating/testing the use of the BindParameter mixin demonstration.\n+ */\n+public class MixinOrderingDemo\n+{\n+\n+    @Property\n+    private String myproperty;\n+\n+    @Component\n+    @Mixins(\"echovalue2::before:echovalue3\")\n+    @MixinClasses(value={EchoValue.class},order={\"after:echovalue2;after:echovalue3\"})\n+    private TextField order3;\n+\n+    @Component\n+    @Mixins(\"echovalue2::after:echovalue\")\n+    @MixinClasses(EchoValue.class)\n+    private TextField order4;\n+\n+    @Component\n+    @Mixins(\"echovalue2\")\n+    @MixinClasses(value=EchoValue.class,order={\"after:echovalue2\"})\n+    private TextField order5;\n+\n+\n+    @Component\n+    @Mixins(\"echovalue3::before:echovalue2\")\n+    @MixinClasses(value=EchoValue2.class,order=\"after:echovalue\")\n+    private TextOnlyOnDisabledTextField order6;\n+\n+    @SetupRender\n+    void initMyprop()\n+    {\n+        myproperty=\"batman\";\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/MixinOrderingDemo.java",
                "sha": "d30c80b760f53ee99c0c57bbb07e75b337bc8301",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/internal/services/TemplateParserImplTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/internal/services/TemplateParserImplTest.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 1,
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/internal/services/TemplateParserImplTest.java",
                "patch": "@@ -910,7 +910,7 @@ public void extension_point() throws Exception\n \n         ExtensionPointToken expansion = get(template.getTokens(), 2);\n \n-        assertEquals(expansion.getExtentionPointId(), \"title\");\n+        assertEquals(expansion.getExtensionPointId(), \"title\");\n \n         List<TemplateToken> title = template.getExtensionPointTokens(\"title\");\n ",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/internal/services/TemplateParserImplTest.java",
                "sha": "a212161a730fda5ef3acfb11a40fd54363ff8ee7",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/internal/transform/MixinWorkerTest.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/internal/transform/MixinWorkerTest.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 9,
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/internal/transform/MixinWorkerTest.java",
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006, 2007, 2008 The Apache Software Foundation\n+// Copyright 2006, 2007, 2008, 2009 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -21,6 +21,7 @@\n import org.apache.tapestry5.services.ComponentClassResolver;\n import org.apache.tapestry5.services.TransformConstants;\n import org.testng.annotations.Test;\n+import org.easymock.EasyMock;\n \n public class MixinWorkerTest extends InternalBaseTestCase\n {\n@@ -41,20 +42,21 @@ public void no_fields_with_mixin_annotation()\n     }\n \n     @Test\n-    public void field_with_explicit_type()\n+    public void field_with_explicit_type_and_order()\n     {\n         ComponentClassResolver resolver = mockComponentClassResolver();\n         ClassTransformation transformation = mockClassTransformation();\n         MutableComponentModel model = mockMutableComponentModel();\n-        Mixin annotation = newMixin(\"Bar\");\n+        String[] order = {\"before:*\"};\n+        Mixin annotation = newMixin(\"Bar\",order);\n \n         train_findFieldsWithAnnotation(transformation, Mixin.class, \"fred\");\n         train_getFieldAnnotation(transformation, \"fred\", Mixin.class, annotation);\n         train_getFieldType(transformation, \"fred\", \"foo.bar.Baz\");\n \n         train_resolveMixinTypeToClassName(resolver, \"Bar\", \"foo.bar.BazMixin\");\n \n-        model.addMixinClassName(\"foo.bar.BazMixin\");\n+        model.addMixinClassName(\"foo.bar.BazMixin\",order);\n \n         transformation.makeReadOnly(\"fred\");\n \n@@ -75,18 +77,19 @@ public void field_with_explicit_type()\n     }\n \n     @Test\n-    public void field_with_no_specific_mixin_type()\n+    public void field_with_no_specific_mixin_type_or_order()\n     {\n         ComponentClassResolver resolver = mockComponentClassResolver();\n         ClassTransformation transformation = mockClassTransformation();\n         MutableComponentModel model = mockMutableComponentModel();\n-        Mixin annotation = newMixin(\"\");\n+        String[] order = new String[0];\n+        Mixin annotation = newMixin(\"\",order);\n \n         train_findFieldsWithAnnotation(transformation, Mixin.class, \"fred\");\n         train_getFieldAnnotation(transformation, \"fred\", Mixin.class, annotation);\n         train_getFieldType(transformation, \"fred\", \"foo.bar.Baz\");\n \n-        model.addMixinClassName(\"foo.bar.Baz\");\n+        model.addMixinClassName(\"foo.bar.Baz\",order);\n \n         transformation.makeReadOnly(\"fred\");\n \n@@ -113,12 +116,12 @@ protected final void train_resolveMixinTypeToClassName(ComponentClassResolver re\n         expect(resolver.resolveMixinTypeToClassName(mixinType)).andReturn(mixinClassName);\n     }\n \n-    private Mixin newMixin(String value)\n+    private Mixin newMixin(String value,String...order)\n     {\n         Mixin annotation = newMock(Mixin.class);\n \n         expect(annotation.value()).andReturn(value);\n-\n+        expect(annotation.order()).andReturn(order);\n         return annotation;\n     }\n }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/java/org/apache/tapestry5/internal/transform/MixinWorkerTest.java",
                "sha": "dc40435f948a42b384728f39598e6b969c9c258a",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/components/BindParameterComponentContainer.tml",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/components/BindParameterComponentContainer.tml?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/components/BindParameterComponentContainer.tml",
                "patch": "@@ -0,0 +1,21 @@\n+<!--\n+  ~ Copyright 2009 The Apache Software Foundation\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~      http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<t:container xmlns:t=\"http://tapestry.apache.org/schema/tapestry_5_1_0.xsd\">\n+\n+    <t:bindparametercomponent/>\n+\n+</t:container>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/components/BindParameterComponentContainer.tml",
                "sha": "21ae393d30358b31ac517e840527d044934988e7",
                "status": "added"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/BindParameterDemo.tml",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/BindParameterDemo.tml?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/BindParameterDemo.tml",
                "patch": "@@ -0,0 +1,32 @@\n+<!--\n+  ~ Copyright 2009 The Apache Software Foundation\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~      http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<html t:type=\"Border\" xmlns:t=\"http://tapestry.apache.org/schema/tapestry_5_1_0.xsd\">\n+    \n+  <t:form>\n+      <t:textfield t:id=\"testmixin\" value=\"myproperty\" t:mixins=\"echovalue\"/>\n+      <t:textfield t:id=\"testmixin2\" value=\"myproperty2\" t:mixins=\"echovalue2\"/>\n+      <t:textfield t:id=\"testmixin3\" value=\"myproperty3\" t:mixins=\"echovalue3\"/>\n+      <t:textfield t:id=\"multimixins\" value=\"myproperty4\" t:mixins=\"echovalue::before:*, echovalue2::before:echovalue3, echovalue3\"/>\n+      <t:textonlyondisabledtextfield t:id=\"defaultbinding\" value=\"myproperty5\" disabled=\"true\" t:mixins=\"echovalue\"/>\n+  </t:form>\n+\n+  <div id=\"mypropertyoutput\">${myproperty}</div>\n+  <div id=\"mypropertyoutput2\">${myproperty2}</div>\n+  <div id=\"mypropertyoutput3\">${myproperty3}</div>\n+  <div id=\"mypropertyoutput4\">${myproperty4}</div>\n+  <div id=\"mypropertyoutput5\">${myproperty5}</div>\n+</html>",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/BindParameterDemo.tml",
                "sha": "d5cdc3d6acd2e33888ecc243cbad9ae94f07b15a",
                "status": "added"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/BindParameterNoSuchParameter.tml",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/BindParameterNoSuchParameter.tml?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/BindParameterNoSuchParameter.tml",
                "patch": "@@ -0,0 +1,21 @@\n+<!--\n+  ~ Copyright 2009 The Apache Software Foundation\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~      http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<html t:type=\"Border\" xmlns:t=\"http://tapestry.apache.org/schema/tapestry_5_1_0.xsd\">\n+    \n+ <t:any t:id=\"throwexception\" t:mixins=\"echovalue2\"/>\n+\n+</html>",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/BindParameterNoSuchParameter.tml",
                "sha": "1fd1d00f147270dad57e5ff5be6a6bc8821503e0",
                "status": "added"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/BindParameterOnComponent.tml",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/BindParameterOnComponent.tml?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/BindParameterOnComponent.tml",
                "patch": "@@ -0,0 +1,21 @@\n+<!--\n+  ~ Copyright 2009 The Apache Software Foundation\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~      http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<html t:type=\"Border\" xmlns:t=\"http://tapestry.apache.org/schema/tapestry_5_1_0.xsd\">\n+\n+ <t:bindparametercomponentcontainer t:id=\"throwexception\"/>\n+\n+</html>",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/BindParameterOnComponent.tml",
                "sha": "8d75b3f3286911d51f2288ed7a061c6be6293ff4",
                "status": "added"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/MissingComponentClassException.tml",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/MissingComponentClassException.tml?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/MissingComponentClassException.tml",
                "patch": "@@ -0,0 +1,29 @@\n+<!--\r\n+  ~ Copyright 2009 The Apache Software Foundation\r\n+  ~\r\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+  ~ you may not use this file except in compliance with the License.\r\n+  ~ You may obtain a copy of the License at\r\n+  ~\r\n+  ~      http://www.apache.org/licenses/LICENSE-2.0\r\n+  ~\r\n+  ~ Unless required by applicable law or agreed to in writing, software\r\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+  ~ See the License for the specific language governing permissions and\r\n+  ~ limitations under the License.\r\n+  -->\r\n+\r\n+<html t:type=\"Border\" xmlns:t=\"http://tapestry.apache.org/schema/tapestry_5_0_0.xsd\">\r\n+\r\n+    <p>\r\n+        This template has a component with an undeterminable component class (not properly declared in either the\r\n+    template or the containing component class).</p>\r\n+    \r\n+    <input t:id=\"componentwithnotype\" value=\"someproperty\"/>\r\n+    \r\n+    <p>\r\n+        This page is used to test exception reporting.\r\n+    </p>\r\n+    \r\n+</html>   \n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/MissingComponentClassException.tml",
                "sha": "929425565c9e626b31182b6a73e28de22e2c4f0f",
                "status": "added"
            },
            {
                "additions": 47,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/MixinOrderingDemo.tml",
                "changes": 47,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/MixinOrderingDemo.tml?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 0,
                "filename": "tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/MixinOrderingDemo.tml",
                "patch": "@@ -0,0 +1,47 @@\n+<!--\n+  ~ Copyright 2009 The Apache Software Foundation\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~      http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<html t:type=\"Border\" xmlns:t=\"http://tapestry.apache.org/schema/tapestry_5_1_0.xsd\">\n+    \n+  <t:form>\n+      <p>\n+          Explicit and implicit ordering, all in template, using globbing:\n+      </p>\n+      <t:textfield t:id=\"order1\" value=\"myproperty\" t:mixins=\"echovalue::before:*, echovalue2::before:echovalue3, echovalue3\"/>\n+\n+      <p>\n+          Explicit and implicit ordering, all in template, no globbing, but multiple order constraints specified for at least one mixin:\n+      </p>\n+      <t:textfield t:id=\"order2\" value=\"myproperty\" t:mixins=\"echovalue::after:echovalue2;after:echovalue3, echovalue2::after:echovalue3, echovalue3\"/>\n+\n+      <p>Mixture of template, @Mixins, and @MixinClasses ordering, all ordered.</p>\n+      <input t:id=\"order3\" value=\"myproperty\" t:mixins=\"echovalue3::before:echovalue\"/>\n+\n+      <p>Mixture of template, @Mixins, and @MixinClasses, with the only constraints specified in the template and @Mixins</p>\n+      <input t:id=\"order4\" value=\"myproperty\" t:mixins=\"echovalue3::before:echovalue\"/>\n+\n+      <p>Mixture of template, @Mixins, and @MixinClasses, with the only constraints specified in the template and @MixinClasses</p>\n+      <input t:id=\"order5\" value=\"myproperty\" t:mixins=\"echovalue3::after:echovalue\"/>\n+\n+      <p>Mixture of template, @Mixins, @MixinClasses, and @Mixin ordering. Note that all of the above also include @Mixin without explicit ordering constraints since textfield has an implementation mixin.</p>\n+      <input t:id=\"order6\" disabled=\"true\" value=\"myproperty\" t:mixins=\"echovalue::before:echovalue3\"/>\n+\n+      <p>Mingling mixin after with mixin before</p>\n+      <!-- the constraint on echoafter2 should have no effect. -->\n+      <t:textfield t:id=\"order7\" value=\"myproperty\" t:mixins=\"echovalue::before:echovalue2, echovalue2, echoafter::after:echoafter2, echoafter2::before:echovalue\"/>\n+  </t:form>\n+\n+</html>",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-core/src/test/resources/org/apache/tapestry5/integration/app1/pages/MixinOrderingDemo.tml",
                "sha": "fd284cbde4f2b18df5451333ad419e1a4380b0b7",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-test/src/main/java/org/apache/tapestry5/test/AbstractIntegrationTestSuite.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-test/src/main/java/org/apache/tapestry5/test/AbstractIntegrationTestSuite.java?ref=c18f3fb1c9415e5adc14d9798a8d9cda372eca09",
                "deletions": 1,
                "filename": "tapestry-test/src/main/java/org/apache/tapestry5/test/AbstractIntegrationTestSuite.java",
                "patch": "@@ -187,7 +187,7 @@ protected final void assertTextPresent(String... text)\n     {\n         for (String item : text)\n         {\n-            if (isTextPresent(item)) return;\n+            if (isTextPresent(item)) continue;\n \n             System.err.printf(\"Text pattern '%s' not found in:\\n%s\\n\\n\", item, selenium\n                     .getHtmlSource());",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c18f3fb1c9415e5adc14d9798a8d9cda372eca09/tapestry-test/src/main/java/org/apache/tapestry5/test/AbstractIntegrationTestSuite.java",
                "sha": "2ddb93dddd3ab8dcc2963770cf0fada9a0f9f625",
                "status": "modified"
            }
        ],
        "message": "TAP5-103: provide access to component parameters from within mixins\nTAP5-748: NPE when defining a component using just t:id and no type or @Component annotation\nTAP5-777: Tapestry should ensure that mixins are applied in a deterministic order.\nTAP5-786: Exception messages in the pageload packages should be localized\nTAP5-787: AbstractIntegrationTest's \"assertTextPresent\" only checks the first value\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@795264 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tapestry-5/commit/f23ea3f7902f61b0b671fc8a8f3bbbbd097a2ac7",
        "repo": "tapestry-5",
        "unit_tests": [
            "MixinTests.java",
            "TapestryInternalUtilsTest.java",
            "MutableComponentModelImplTest.java",
            "CompositeRenderCommandTest.java",
            "InternalComponentResourcesImplTest.java"
        ]
    },
    "tapestry-5_c33c963": {
        "bug_id": "tapestry-5_c33c963",
        "commit": "https://github.com/apache/tapestry-5/commit/c33c963d1d457dfa35a5b4586298a7df5275d41d",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/ComponentAssemblerImpl.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/ComponentAssemblerImpl.java?ref=c33c963d1d457dfa35a5b4586298a7df5275d41d",
                "deletions": 17,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/ComponentAssemblerImpl.java",
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2009-2013 The Apache Software Foundation\n+// Copyright 2009-2014 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -25,15 +25,12 @@\n import org.apache.tapestry5.ioc.internal.util.CollectionFactory;\n import org.apache.tapestry5.ioc.internal.util.InternalUtils;\n import org.apache.tapestry5.ioc.internal.util.TapestryException;\n-import org.apache.tapestry5.ioc.services.SymbolSource;\n import org.apache.tapestry5.ioc.util.ExceptionUtils;\n import org.apache.tapestry5.ioc.util.IdAllocator;\n import org.apache.tapestry5.model.ComponentModel;\n import org.apache.tapestry5.model.EmbeddedComponentModel;\n import org.apache.tapestry5.runtime.RenderCommand;\n import org.apache.tapestry5.services.ComponentClassResolver;\n-import org.apache.tapestry5.services.MetaDataLocator;\n-import org.apache.tapestry5.services.Request;\n import org.apache.tapestry5.services.pageload.ComponentResourceSelector;\n \n import java.util.List;\n@@ -57,30 +54,20 @@\n \n     private final OperationTracker tracker;\n \n-    private final Request request;\n-\n-    private final SymbolSource symbolSource;\n-\n-    private final MetaDataLocator metaDataLocator;\n-\n     private Map<String, String> publishedParameterToEmbeddedId;\n \n     private Map<String, EmbeddedComponentAssembler> embeddedIdToAssembler;\n \n     public ComponentAssemblerImpl(ComponentAssemblerSource assemblerSource,\n                                   ComponentInstantiatorSource instantiatorSource, ComponentClassResolver componentClassResolver,\n-                                  Instantiator instantiator, ComponentPageElementResources resources, OperationTracker tracker,\n-                                  Request request, SymbolSource symbolSource, MetaDataLocator metaDataLocator)\n+                                  Instantiator instantiator, ComponentPageElementResources resources, OperationTracker tracker)\n     {\n         this.assemblerSource = assemblerSource;\n         this.instantiatorSource = instantiatorSource;\n         this.componentClassResolver = componentClassResolver;\n         this.instantiator = instantiator;\n         this.resources = resources;\n         this.tracker = tracker;\n-        this.request = request;\n-        this.symbolSource = symbolSource;\n-        this.metaDataLocator = metaDataLocator;\n     }\n \n     public ComponentPageElement assembleRootComponent(final Page page)\n@@ -106,8 +93,8 @@ private ComponentPageElement performAssembleRootComponent(Page page)\n             pageAssembly.componentCount++;\n             pageAssembly.weight++;\n \n-            ComponentPageElement newElement = new ComponentPageElementImpl(pageAssembly.page, instantiator, resources,\n-                    request, symbolSource, metaDataLocator);\n+            ComponentPageElement newElement = new ComponentPageElementImpl(pageAssembly.page, instantiator, resources\n+            );\n \n             pageAssembly.componentName.push(new ComponentName(pageAssembly.page.getName()));\n ",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/ComponentAssemblerImpl.java",
                "sha": "5e952cd8c64f474bd3332e3ae002ab9750c05cfa",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageLoaderImpl.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageLoaderImpl.java?ref=c33c963d1d457dfa35a5b4586298a7df5275d41d",
                "deletions": 12,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageLoaderImpl.java",
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2009, 2010, 2011, 2012 The Apache Software Foundation\n+// Copyright 2009-2014 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -32,7 +32,6 @@\n import org.apache.tapestry5.ioc.internal.util.InternalUtils;\n import org.apache.tapestry5.ioc.internal.util.TapestryException;\n import org.apache.tapestry5.ioc.services.PerthreadManager;\n-import org.apache.tapestry5.ioc.services.SymbolSource;\n import org.apache.tapestry5.ioc.util.AvailableValues;\n import org.apache.tapestry5.ioc.util.Stack;\n import org.apache.tapestry5.ioc.util.UnknownValueException;\n@@ -142,19 +141,17 @@ public String toString()\n \n     private final PerthreadManager perThreadManager;\n \n-    private final Request request;\n-\n-    private final SymbolSource symbolSource;\n-\n     private final Logger logger;\n \n     private final MetaDataLocator metaDataLocator;\n \n+    private final RequestGlobals requestGlobals;\n+\n     public PageLoaderImpl(ComponentInstantiatorSource instantiatorSource, ComponentTemplateSource templateSource,\n                           PageElementFactory elementFactory, ComponentPageElementResourcesSource resourcesSource,\n                           ComponentClassResolver componentClassResolver, PersistentFieldManager persistentFieldManager,\n-                          StringInterner interner, OperationTracker tracker, PerthreadManager perThreadManager, Request request,\n-                          SymbolSource symbolSource, Logger logger, MetaDataLocator metaDataLocator)\n+                          StringInterner interner, OperationTracker tracker, PerthreadManager perThreadManager,\n+                          Logger logger, MetaDataLocator metaDataLocator, RequestGlobals requestGlobals)\n     {\n         this.instantiatorSource = instantiatorSource;\n         this.templateSource = templateSource;\n@@ -165,10 +162,9 @@ public PageLoaderImpl(ComponentInstantiatorSource instantiatorSource, ComponentT\n         this.interner = interner;\n         this.tracker = tracker;\n         this.perThreadManager = perThreadManager;\n-        this.request = request;\n-        this.symbolSource = symbolSource;\n         this.logger = logger;\n         this.metaDataLocator = metaDataLocator;\n+        this.requestGlobals = requestGlobals;\n     }\n \n     @PostInjection\n@@ -196,7 +192,7 @@ public Page loadPage(final String logicalPageName, final ComponentResourceSelect\n         {\n             public Page invoke()\n             {\n-                Page page = new PageImpl(logicalPageName, selector, persistentFieldManager, perThreadManager);\n+                Page page = new PageImpl(logicalPageName, selector, persistentFieldManager, perThreadManager, metaDataLocator);\n \n                 ComponentAssembler assembler = getAssembler(pageClassName, selector);\n \n@@ -266,7 +262,7 @@ public ComponentAssembler invoke()\n                 ComponentPageElementResources resources = resourcesSource.get(selector);\n \n                 ComponentAssembler assembler = new ComponentAssemblerImpl(PageLoaderImpl.this, instantiatorSource,\n-                        componentClassResolver, instantiator, resources, tracker, request, symbolSource, metaDataLocator);\n+                        componentClassResolver, instantiator, resources, tracker);\n \n                 // \"Program\" the assembler by adding actions to it. The actions interact with a\n                 // PageAssembly object (a fresh one for each new page being created).",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/pageload/PageLoaderImpl.java",
                "sha": "b7a07235fddc98c39b83bfa1f2369109a78bab3d",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementImpl.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementImpl.java?ref=c33c963d1d457dfa35a5b4586298a7df5275d41d",
                "deletions": 30,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementImpl.java",
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006, 2007, 2008, 2009, 2010, 2011, 2012 The Apache Software Foundation\n+// Copyright 2006-2014  The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -32,15 +32,12 @@\n import org.apache.tapestry5.ioc.internal.util.Orderer;\n import org.apache.tapestry5.ioc.internal.util.TapestryException;\n import org.apache.tapestry5.ioc.services.PerThreadValue;\n-import org.apache.tapestry5.ioc.services.SymbolSource;\n import org.apache.tapestry5.ioc.util.AvailableValues;\n import org.apache.tapestry5.ioc.util.UnknownValueException;\n import org.apache.tapestry5.model.ComponentModel;\n import org.apache.tapestry5.model.ParameterModel;\n import org.apache.tapestry5.runtime.Component;\n import org.apache.tapestry5.runtime.*;\n-import org.apache.tapestry5.services.MetaDataLocator;\n-import org.apache.tapestry5.services.Request;\n import org.apache.tapestry5.services.pageload.ComponentResourceSelector;\n import org.slf4j.Logger;\n \n@@ -506,13 +503,6 @@ public String toString()\n \n     private final PerThreadValue<Boolean> renderingValue;\n \n-    // should be okay since it's a shadow service object\n-    private final Request request;\n-    private final SymbolSource symbolSource;\n-    private final MetaDataLocator metaDataLocator;\n-\n-    private final boolean productionMode;\n-    private final boolean componentTracingEnabled;\n     private final boolean exactParameterCountMatch;\n \n     // We know that, at the very least, there will be an element to force the component to render\n@@ -543,12 +533,10 @@ public String toString()\n      * @param location\n      *         location of the element (within a template), used as part of exception reporting\n      * @param elementResources\n-     *         Provides access to common methods of various services\n      */\n     ComponentPageElementImpl(Page page, ComponentPageElement container, String id, String nestedId, String completeId,\n                              String elementName, Instantiator instantiator, Location location,\n-                             ComponentPageElementResources elementResources, Request request,\n-                             SymbolSource symbolSource, MetaDataLocator metaDataLocator)\n+                             ComponentPageElementResources elementResources)\n     {\n         super(location);\n \n@@ -559,17 +547,8 @@ public String toString()\n         this.completeId = completeId;\n         this.elementName = elementName;\n         this.elementResources = elementResources;\n-        this.request = request;\n-        this.symbolSource = symbolSource;\n-        this.metaDataLocator = metaDataLocator;\n-\n-        // evaluate this once because it gets referenced a lot during rendering\n-        this.productionMode = \"true\".equals(symbolSource.valueForSymbol(SymbolConstants.PRODUCTION_MODE));\n-        this.componentTracingEnabled = \"true\".equals(symbolSource\n-                .valueForSymbol(SymbolConstants.COMPONENT_RENDER_TRACING_ENABLED));\n \n-        this.exactParameterCountMatch = metaDataLocator.findMeta(MetaDataConstants.UNKNOWN_ACTIVATION_CONTEXT_CHECK,\n-                                                                page.getName(), Boolean.class);\n+        this.exactParameterCountMatch = page.isExactParameterCountMatch();\n \n         ComponentResources containerResources = container == null ? null : container.getComponentResources();\n \n@@ -595,11 +574,9 @@ public void run()\n      * Constructor for the root component of a page.\n      */\n     public ComponentPageElementImpl(Page page, Instantiator instantiator,\n-                                    ComponentPageElementResources elementResources, Request request,\n-                                    SymbolSource symbolSource, MetaDataLocator metaDataLocator)\n+                                    ComponentPageElementResources elementResources)\n     {\n-        this(page, null, null, null, page.getName(), null, instantiator, null, elementResources,\n-                request, symbolSource, metaDataLocator);\n+        this(page, null, null, null, page.getName(), null, instantiator, null, elementResources);\n     }\n \n     private void initializeRenderPhases()\n@@ -657,7 +634,7 @@ public ComponentPageElement newChild(String id, String nestedId, String complete\n                                          Instantiator instantiator, Location location)\n     {\n         ComponentPageElementImpl child = new ComponentPageElementImpl(page, this, id, nestedId, completeId,\n-                elementName, instantiator, location, elementResources, request, symbolSource, metaDataLocator);\n+                elementName, instantiator, location, elementResources);\n \n         addEmbeddedElement(child);\n \n@@ -1293,7 +1270,7 @@ protected RenderPhaseEvent createRenderEvent(RenderQueue queue)\n \n     boolean isRenderTracingEnabled()\n     {\n-        return !productionMode && (componentTracingEnabled || \"true\".equals(request.getParameter(\"t:component-trace\")));\n+        return elementResources.isRenderTracingEnabled();\n     }\n \n     public ComponentResourceSelector getResourceSelector()",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementImpl.java",
                "sha": "b0d6fe6f834a4911496ecc037a584e47790c4c18",
                "status": "modified"
            },
            {
                "additions": 37,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementResources.java",
                "changes": 66,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementResources.java?ref=c33c963d1d457dfa35a5b4586298a7df5275d41d",
                "deletions": 29,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementResources.java",
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2008, 2010, 2011 The Apache Software Foundation\n+// Copyright 2008-2014 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -33,7 +33,7 @@\n {\n     /**\n      * Returns the selector associated with this resources.\n-     * \n+     *\n      * @since 5.3\n      */\n     ComponentResourceSelector getSelector();\n@@ -42,7 +42,7 @@\n      * Used to obtain a {@link org.apache.tapestry5.ioc.Messages} instance for a particular component. If the component\n      * extends from another component, then its localized properties will merge with its parent's properties (with the\n      * subclass overriding the super class on any conflicts).\n-     * \n+     *\n      * @param componentModel\n      * @return the message catalog for the component, in the indicated locale\n      * @see org.apache.tapestry5.services.messages.ComponentMessagesSource\n@@ -54,56 +54,56 @@\n      * conversion will be to the equivalent wrapper type. In some cases, the TypeCoercer will need to search for an\n      * appropriate coercion, and may even combine existing coercions to form new ones; in those cases, the results of\n      * the search are cached.\n-     * \n+     *\n      * @param <S>\n-     *            source type (input)\n+     *         source type (input)\n      * @param <T>\n-     *            target type (output)\n+     *         target type (output)\n      * @param input\n      * @param targetType\n-     *            defines the target type\n+     *         defines the target type\n      * @return the coerced value\n      * @see org.apache.tapestry5.ioc.services.TypeCoercer\n      */\n     <S, T> T coerce(S input, Class<T> targetType);\n \n     /**\n      * Gets the Class instance for then give name.\n-     * \n+     *\n      * @param className\n-     *            fully qualified class name\n+     *         fully qualified class name\n      * @return the class instance\n      * @see org.apache.tapestry5.internal.services.ComponentClassCache\n      */\n     Class toClass(String className);\n \n     /**\n      * Creates a link on behalf of a component.\n-     * \n+     *\n      * @param resources\n-     *            resources for the component\n+     *         resources for the component\n      * @param eventType\n-     *            type of event to create\n+     *         type of event to create\n      * @param forForm\n-     *            true if generating for a form submission\n+     *         true if generating for a form submission\n      * @param context\n-     *            additional event context associated with the link\n+     *         additional event context associated with the link\n      * @return the link\n      * @since 5.1.0.0\n      */\n     Link createComponentEventLink(ComponentResources resources, String eventType, boolean forForm, Object... context);\n \n     /**\n      * Creates a page render request link to render a specific page.\n-     * \n+     *\n      * @param pageName\n-     *            the logical name of the page to link to\n+     *         the logical name of the page to link to\n      * @param override\n-     *            if true, the context is used even if empty (normally, the target page is allowed to passivate,\n-     *            providing a context, when the provided context is empty)\n+     *         if true, the context is used even if empty (normally, the target page is allowed to passivate,\n+     *         providing a context, when the provided context is empty)\n      * @param context\n-     *            the activation context for the page. If omitted, the activation context is obtained from the\n-     *            target page\n+     *         the activation context for the page. If omitted, the activation context is obtained from the\n+     *         target page\n      * @return link for a render request to the targetted page\n      * @since 5.1.0.0\n      */\n@@ -112,15 +112,15 @@\n     /**\n      * Creates a page render request link to render a specific page. Using a page class, rather than a page name, is\n      * more refactoring safe (in the even the page is renamed or moved).\n-     * \n+     *\n      * @param pageClass\n-     *            identifies the page to link to\n+     *         identifies the page to link to\n      * @param override\n-     *            if true, the context is used even if empty (normally, the target page is allowed to passivate,\n-     *            providing a context, when the provided context is empty)\n+     *         if true, the context is used even if empty (normally, the target page is allowed to passivate,\n+     *         providing a context, when the provided context is empty)\n      * @param context\n-     *            the activation context for the page. If omitted, the activation context is obtained from the\n-     *            target page\n+     *         the activation context for the page. If omitted, the activation context is obtained from the\n+     *         target page\n      * @return link for a render request to the targetted page\n      * @since 5.1\n      */\n@@ -129,17 +129,25 @@\n     /**\n      * Returns the event logger for the provided component logger. The event logger is based on the component logger's\n      * name (which matches the component class name) with a \"tapestry..events.\" prefix.\n-     * \n+     *\n      * @param componentLogger\n-     *            provides base name for logger\n+     *         provides base name for logger\n      * @return the logger\n      */\n     Logger getEventLogger(Logger componentLogger);\n \n     /**\n      * Wrapper around {@link PerthreadManager#createValue()}.\n-     * \n+     *\n      * @since 5.2.0\n      */\n     <T> PerThreadValue<T> createPerThreadValue();\n+\n+    /**\n+     * Returns true if component element tracing is enabled. When enabled, rendering of the component produces\n+     * additional comments to identify what component and stage is rendering.\n+     *\n+     * @since 5.4\n+     */\n+    boolean isRenderTracingEnabled();\n }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementResources.java",
                "sha": "6a32e863da7507d1709af5ce8050934bc4520d1e",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementResourcesImpl.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementResourcesImpl.java?ref=c33c963d1d457dfa35a5b4586298a7df5275d41d",
                "deletions": 2,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementResourcesImpl.java",
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2008-2013 The Apache Software Foundation\n+// Copyright 2008-2014 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -27,6 +27,8 @@\n import org.apache.tapestry5.model.ComponentModel;\n import org.apache.tapestry5.services.ComponentClassResolver;\n import org.apache.tapestry5.services.ContextValueEncoder;\n+import org.apache.tapestry5.services.Request;\n+import org.apache.tapestry5.services.RequestGlobals;\n import org.apache.tapestry5.services.messages.ComponentMessagesSource;\n import org.apache.tapestry5.services.pageload.ComponentResourceSelector;\n import org.slf4j.Logger;\n@@ -57,11 +59,15 @@\n \n     private final PerthreadManager perThreadManager;\n \n+    private final boolean productionMode, componentTracingEnabled;\n+\n+    private final RequestGlobals requestGlobals;\n+\n     public ComponentPageElementResourcesImpl(ComponentResourceSelector selector,\n                                              ComponentMessagesSource componentMessagesSource, TypeCoercer typeCoercer,\n                                              ComponentClassCache componentClassCache, ContextValueEncoder contextValueEncoder, LinkSource linkSource,\n                                              RequestPageCache requestPageCache, ComponentClassResolver componentClassResolver,\n-                                             LoggerSource loggerSource, OperationTracker tracker, PerthreadManager perThreadManager)\n+                                             LoggerSource loggerSource, OperationTracker tracker, PerthreadManager perThreadManager, boolean productionMode, boolean componentTracingEnabled, RequestGlobals requestGlobals)\n     {\n         this.selector = selector;\n         this.componentMessagesSource = componentMessagesSource;\n@@ -74,6 +80,9 @@ public ComponentPageElementResourcesImpl(ComponentResourceSelector selector,\n         this.loggerSource = loggerSource;\n         this.tracker = tracker;\n         this.perThreadManager = perThreadManager;\n+        this.productionMode = productionMode;\n+        this.componentTracingEnabled = componentTracingEnabled;\n+        this.requestGlobals = requestGlobals;\n     }\n \n     public ComponentResourceSelector getSelector()\n@@ -160,4 +169,26 @@ public void run(String description, Runnable operation)\n         return perThreadManager.createValue();\n     }\n \n+    public boolean isRenderTracingEnabled()\n+    {\n+        if (productionMode)\n+        {\n+            return false;\n+        }\n+\n+        if (componentTracingEnabled)\n+        {\n+            return true;\n+        }\n+\n+        Request request = requestGlobals.getRequest();\n+\n+        if (request == null)\n+        {\n+            return false;\n+        }\n+\n+        return \"true\".equals(request.getParameter(\"t:component-trace\"));\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementResourcesImpl.java",
                "sha": "6c180b92f0fcbb6b397c32a32998495b21b2fe2a",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementResourcesSourceImpl.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementResourcesSourceImpl.java?ref=c33c963d1d457dfa35a5b4586298a7df5275d41d",
                "deletions": 5,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementResourcesSourceImpl.java",
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2008, 2009, 2010 The Apache Software Foundation\n+// Copyright 2008-2014 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -14,21 +14,24 @@\n \n package org.apache.tapestry5.internal.structure;\n \n-import java.util.Map;\n-\n+import org.apache.tapestry5.SymbolConstants;\n import org.apache.tapestry5.internal.services.ComponentClassCache;\n import org.apache.tapestry5.internal.services.LinkSource;\n import org.apache.tapestry5.internal.services.RequestPageCache;\n import org.apache.tapestry5.ioc.LoggerSource;\n import org.apache.tapestry5.ioc.OperationTracker;\n+import org.apache.tapestry5.ioc.annotations.Symbol;\n import org.apache.tapestry5.ioc.internal.util.CollectionFactory;\n import org.apache.tapestry5.ioc.services.PerthreadManager;\n import org.apache.tapestry5.ioc.services.TypeCoercer;\n import org.apache.tapestry5.services.ComponentClassResolver;\n import org.apache.tapestry5.services.ContextValueEncoder;\n+import org.apache.tapestry5.services.RequestGlobals;\n import org.apache.tapestry5.services.messages.ComponentMessagesSource;\n import org.apache.tapestry5.services.pageload.ComponentResourceSelector;\n \n+import java.util.Map;\n+\n public class ComponentPageElementResourcesSourceImpl implements ComponentPageElementResourcesSource\n {\n     private final Map<ComponentResourceSelector, ComponentPageElementResources> cache = CollectionFactory\n@@ -54,10 +57,17 @@\n \n     private final PerthreadManager perThreadManager;\n \n+    private final boolean productionMode, componentTracingEnabled;\n+\n+    private final RequestGlobals requestGlobals;\n+\n     public ComponentPageElementResourcesSourceImpl(ComponentMessagesSource componentMessagesSource,\n             TypeCoercer typeCoercer, ComponentClassCache componentClassCache, ContextValueEncoder contextValueEncoder,\n             LinkSource linkSource, RequestPageCache requestPageCache, ComponentClassResolver componentClassResolver,\n-            LoggerSource loggerSource, OperationTracker tracker, PerthreadManager perThreadManager)\n+            LoggerSource loggerSource, OperationTracker tracker, PerthreadManager perThreadManager,\n+            @Symbol(SymbolConstants.PRODUCTION_MODE) boolean productionMode,\n+            @Symbol(SymbolConstants.COMPONENT_RENDER_TRACING_ENABLED) boolean componentTracingEnabled,\n+            RequestGlobals requestGlobals)\n     {\n         this.componentMessagesSource = componentMessagesSource;\n         this.typeCoercer = typeCoercer;\n@@ -69,6 +79,9 @@ public ComponentPageElementResourcesSourceImpl(ComponentMessagesSource component\n         this.loggerSource = loggerSource;\n         this.tracker = tracker;\n         this.perThreadManager = perThreadManager;\n+        this.productionMode = productionMode;\n+        this.componentTracingEnabled = componentTracingEnabled;\n+        this.requestGlobals = requestGlobals;\n     }\n \n     public ComponentPageElementResources get(ComponentResourceSelector selector)\n@@ -81,7 +94,7 @@ public ComponentPageElementResources get(ComponentResourceSelector selector)\n         {\n             result = new ComponentPageElementResourcesImpl(selector, componentMessagesSource, typeCoercer,\n                     componentClassCache, contextValueEncoder, linkSource, requestPageCache, componentClassResolver,\n-                    loggerSource, tracker, perThreadManager);\n+                    loggerSource, tracker, perThreadManager, productionMode, componentTracingEnabled, requestGlobals);\n \n             // Small race condition here, where we may create two instances of the CPER for the same locale,\n             // but that's not worth worrying about.",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/ComponentPageElementResourcesSourceImpl.java",
                "sha": "f4ee38b7560261218d47ba9afab39851ffc17aff",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/Page.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/Page.java?ref=c33c963d1d457dfa35a5b4586298a7df5275d41d",
                "deletions": 2,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/Page.java",
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006, 2007, 2008, 2009, 2010, 2011, 2012 The Apache Software Foundation\n+// Copyright 2006-2014 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -145,7 +145,7 @@ public Stats(double assemblyTime, int componentCount, int weight)\n      * Adds a listener that is notified of large scale page events.\n      *\n      * @deprecated in 5.3.4; use {@link #addPageLoadedCallback(Runnable)}, {@link #addPageAttachedCallback(Runnable)}, or\n-     *             {@link #addPageDetachedCallback(Runnable)}  instead\n+     * {@link #addPageDetachedCallback(Runnable)}  instead\n      */\n     void addLifecycleListener(PageLifecycleListener listener);\n \n@@ -250,5 +250,13 @@ public Stats(double assemblyTime, int componentCount, int weight)\n      */\n     int getAttachCount();\n \n+    /**\n+     * Returns true if extract parameter count matching is enabled.\n+     *\n+     * @see org.apache.tapestry5.MetaDataConstants#UNKNOWN_ACTIVATION_CONTEXT_CHECK\n+     * @since 5.4\n+     */\n+    boolean isExactParameterCountMatch();\n+\n \n }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/Page.java",
                "sha": "9c8dd133b0e43b7da77b340f290cf148bd7f0783",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/PageImpl.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/PageImpl.java?ref=c33c963d1d457dfa35a5b4586298a7df5275d41d",
                "deletions": 3,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/PageImpl.java",
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006-2013 The Apache Software Foundation\n+// Copyright 2006-2014 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -15,6 +15,7 @@\n package org.apache.tapestry5.internal.structure;\n \n import org.apache.tapestry5.ComponentResources;\n+import org.apache.tapestry5.MetaDataConstants;\n import org.apache.tapestry5.internal.services.PersistentFieldManager;\n import org.apache.tapestry5.ioc.internal.util.CollectionFactory;\n import org.apache.tapestry5.ioc.internal.util.OneShotLock;\n@@ -23,6 +24,7 @@\n import org.apache.tapestry5.ioc.util.ExceptionUtils;\n import org.apache.tapestry5.runtime.Component;\n import org.apache.tapestry5.runtime.PageLifecycleListener;\n+import org.apache.tapestry5.services.MetaDataLocator;\n import org.apache.tapestry5.services.PersistentFieldBundle;\n import org.apache.tapestry5.services.pageload.ComponentResourceSelector;\n import org.slf4j.Logger;\n@@ -64,6 +66,8 @@\n \n     private final AtomicInteger attachCount = new AtomicInteger();\n \n+    private final boolean exactParameterCountMatch;\n+\n     private List<Runnable> pageVerifyCallbacks = CollectionFactory.newList();\n \n     /**\n@@ -83,16 +87,18 @@\n      * @param persistentFieldManager\n      *         for access to cross-request persistent values\n      * @param perThreadManager\n-     *         for managing per-request mutable state\n+     * @param metaDataLocator\n      */\n     public PageImpl(String name, ComponentResourceSelector selector, PersistentFieldManager persistentFieldManager,\n-                    PerthreadManager perThreadManager)\n+                    PerthreadManager perThreadManager, MetaDataLocator metaDataLocator)\n     {\n         this.name = name;\n         this.selector = selector;\n         this.persistentFieldManager = persistentFieldManager;\n \n         fieldBundle = perThreadManager.createValue();\n+\n+        exactParameterCountMatch = metaDataLocator.findMeta(MetaDataConstants.UNKNOWN_ACTIVATION_CONTEXT_CHECK, name, Boolean.class);\n     }\n \n     public void setStats(Stats stats)\n@@ -320,6 +326,11 @@ public int getAttachCount()\n         return attachCount.get();\n     }\n \n+    public boolean isExactParameterCountMatch()\n+    {\n+        return exactParameterCountMatch;\n+    }\n+\n     public void addPageLoadedCallback(Runnable callback)\n     {\n         lifecycleListenersLock.check();",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/main/java/org/apache/tapestry5/internal/structure/PageImpl.java",
                "sha": "a96704942704bb23fde1771e58cc839a08c72a30",
                "status": "modified"
            },
            {
                "additions": 67,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/test/groovy/org/apache/tapestry5/internal/structure/ComponentPageElementResourcesImplTest.groovy",
                "changes": 67,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/groovy/org/apache/tapestry5/internal/structure/ComponentPageElementResourcesImplTest.groovy?ref=c33c963d1d457dfa35a5b4586298a7df5275d41d",
                "deletions": 0,
                "filename": "tapestry-core/src/test/groovy/org/apache/tapestry5/internal/structure/ComponentPageElementResourcesImplTest.groovy",
                "patch": "@@ -0,0 +1,67 @@\n+package org.apache.tapestry5.internal.structure\n+\n+import org.apache.tapestry5.internal.services.RequestGlobalsImpl\n+import org.apache.tapestry5.ioc.test.TestBase\n+import org.apache.tapestry5.services.Request\n+import org.testng.annotations.Test\n+\n+class ComponentPageElementResourcesImplTest extends TestBase {\n+\n+    def create(productionMode, tracing, request) {\n+        RequestGlobalsImpl rg = new RequestGlobalsImpl()\n+\n+        rg.storeRequestResponse(request, null)\n+\n+        new ComponentPageElementResourcesImpl(null, null, null, null, null, null, null, null, null, null, null, productionMode, tracing, rg)\n+    }\n+\n+    @Test\n+    void production_mode_prevents_render_tracing() {\n+        def r = create true, true, null\n+\n+        assertFalse r.renderTracingEnabled\n+    }\n+\n+    @Test\n+    void request_not_checked_if_tracing_enabled() {\n+        def r = create false, true, null\n+\n+        assertTrue r.renderTracingEnabled\n+    }\n+\n+    @Test\n+    void tracing_enabled_by_request_parameter() {\n+\n+        def request = newMock Request\n+        def r = create false, false, request\n+\n+        expect(request.getParameter(\"t:component-trace\")).andReturn(\"true\")\n+\n+        replay()\n+\n+        assertTrue r.renderTracingEnabled\n+\n+        verify()\n+    }\n+\n+    @Test\n+    void tracing_not_enabled_by_request_parameter() {\n+        def request = newMock Request\n+        def r = create false, false, request\n+\n+        expect(request.getParameter(\"t:component-trace\")).andReturn(null)\n+\n+        replay()\n+\n+        assertFalse r.renderTracingEnabled\n+\n+        verify()\n+    }\n+\n+    @Test\n+    void tracing_not_enabled_if_no_request() {\n+        def r = create false, false, null\n+\n+        assertFalse r.renderTracingEnabled\n+    }\n+}",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/test/groovy/org/apache/tapestry5/internal/structure/ComponentPageElementResourcesImplTest.groovy",
                "sha": "5acf1e683cbbfe3ce9674065f66c1c00bd9e6e0a",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/tapestry-5/blob/0046b167a69d22a87fac707799154d502521b8be/tapestry-core/src/test/java/org/apache/tapestry5/internal/structure/ComponentPageElementImplTest.java",
                "changes": 72,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/internal/structure/ComponentPageElementImplTest.java?ref=0046b167a69d22a87fac707799154d502521b8be",
                "deletions": 72,
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/internal/structure/ComponentPageElementImplTest.java",
                "patch": "@@ -1,72 +0,0 @@\n-package org.apache.tapestry5.internal.structure;\n-\n-import static org.apache.tapestry5.SymbolConstants.COMPONENT_RENDER_TRACING_ENABLED;\n-import static org.apache.tapestry5.SymbolConstants.PRODUCTION_MODE;\n-\n-import org.apache.tapestry5.MetaDataConstants;\n-import org.apache.tapestry5.internal.services.Instantiator;\n-import org.apache.tapestry5.ioc.Location;\n-import org.apache.tapestry5.ioc.services.SymbolSource;\n-import org.apache.tapestry5.ioc.test.TestBase;\n-import org.apache.tapestry5.model.ComponentModel;\n-import org.apache.tapestry5.services.MetaDataLocator;\n-import org.apache.tapestry5.services.Request;\n-import org.testng.annotations.Test;\n-\n-public class ComponentPageElementImplTest extends TestBase {\n-    /** TAP5-742 */\n-    @Test public void component_render_tracing() {\n-        Request request = newMock(Request.class);\n-        SymbolSource symbolSource = newMock(SymbolSource.class);\n-        \n-        Page page = getMocksControl().createMock(Page.class);\n-        Instantiator instantiator = newMock(Instantiator.class);\n-        Location location = newMock(Location.class);\n-        ComponentPageElementResources elementResources = newMock(ComponentPageElementResources.class);\n-        ComponentModel model = newMock(ComponentModel.class);\n-        MetaDataLocator locator = newMock(MetaDataLocator.class);\n-        \n-        getMocksControl().resetToNice();\n-\n-        expect(instantiator.getModel()).andReturn(model).anyTimes();\n-\n-        // off by default\n-        expect(symbolSource.valueForSymbol(PRODUCTION_MODE)).andReturn(\"false\");\n-        expect(symbolSource.valueForSymbol(COMPONENT_RENDER_TRACING_ENABLED)).andReturn(\"false\");\n-        expect(request.getParameter(\"t:component-trace\")).andReturn(\"false\");\n-        \n-        // enable by query parameter\n-        expect(symbolSource.valueForSymbol(PRODUCTION_MODE)).andReturn(\"false\");\n-        expect(symbolSource.valueForSymbol(COMPONENT_RENDER_TRACING_ENABLED)).andReturn(\"false\");\n-        expect(request.getParameter(\"t:component-trace\")).andReturn(\"true\");\n-        \n-        // enable by symbol\n-        expect(symbolSource.valueForSymbol(PRODUCTION_MODE)).andReturn(\"false\");\n-        expect(symbolSource.valueForSymbol(COMPONENT_RENDER_TRACING_ENABLED)).andReturn(\"true\");\n-        expect(request.getParameter(\"t:component-trace\")).andReturn(\"false\");\n-        \n-        // off no matter what in production mode\n-        expect(symbolSource.valueForSymbol(PRODUCTION_MODE)).andReturn(\"true\");\n-        expect(symbolSource.valueForSymbol(COMPONENT_RENDER_TRACING_ENABLED)).andReturn(\"true\");\n-        expect(request.getParameter(\"t:component-trace\")).andReturn(\"false\");\n-\n-        expect(page.getName()).andReturn(\"pageName\").anyTimes();\n-        expect(locator.findMeta(MetaDataConstants.UNKNOWN_ACTIVATION_CONTEXT_CHECK, \"pageName\", Boolean.class))\n-                .andReturn(false).anyTimes();\n-\n-        replay();\n-        ComponentPageElementImpl c;    // need to create every time because of changing symbols\n-        \n-        c = new ComponentPageElementImpl(page, null, \"id\", \"nestedId\", \"completeid\", \"elementname\", instantiator, location, elementResources, request, symbolSource, locator);\n-        assertFalse(c.isRenderTracingEnabled());\n-        \n-        c = new ComponentPageElementImpl(page, null, \"id\", \"nestedId\", \"completeid\", \"elementname\", instantiator, location, elementResources, request, symbolSource, locator);\n-        assertTrue(c.isRenderTracingEnabled());\n-\n-        c = new ComponentPageElementImpl(page, null, \"id\", \"nestedId\", \"completeid\", \"elementname\", instantiator, location, elementResources, request, symbolSource, locator);\n-        assertTrue(c.isRenderTracingEnabled());\n-\n-        c = new ComponentPageElementImpl(page, null, \"id\", \"nestedId\", \"completeid\", \"elementname\", instantiator, location, elementResources, request, symbolSource, locator);\n-        assertFalse(c.isRenderTracingEnabled());\n-    }\n-}",
                "raw_url": "https://github.com/apache/tapestry-5/raw/0046b167a69d22a87fac707799154d502521b8be/tapestry-core/src/test/java/org/apache/tapestry5/internal/structure/ComponentPageElementImplTest.java",
                "sha": "cfd149457f58d0b78a6e61417ea201c6f3afac64",
                "status": "removed"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/test/java/org/apache/tapestry5/internal/structure/InternalComponentResourcesImplTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/internal/structure/InternalComponentResourcesImplTest.java?ref=c33c963d1d457dfa35a5b4586298a7df5275d41d",
                "deletions": 2,
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/internal/structure/InternalComponentResourcesImplTest.java",
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006, 2007, 2008, 2010, 2011 The Apache Software Foundation\n+// Copyright 2006-2014 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -44,7 +44,7 @@ public void setup()\n         TypeCoercer typeCoercer = getService(TypeCoercer.class);\n \n         elementResources = new ComponentPageElementResourcesImpl(null, null, typeCoercer, null, null, null, null, null,\n-                null, null, perThreadManager);\n+                null, null, perThreadManager, false, false, null);\n     }\n \n     @AfterMethod",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/test/java/org/apache/tapestry5/internal/structure/InternalComponentResourcesImplTest.java",
                "sha": "8d84df476193163d44d1952de8595fa8883a4663",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/tapestry-5/blob/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/test/java/org/apache/tapestry5/internal/structure/PageImplTest.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/test/java/org/apache/tapestry5/internal/structure/PageImplTest.java?ref=c33c963d1d457dfa35a5b4586298a7df5275d41d",
                "deletions": 7,
                "filename": "tapestry-core/src/test/java/org/apache/tapestry5/internal/structure/PageImplTest.java",
                "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2006, 2007, 2008, 2009, 2010, 2011, 2012 The Apache Software Foundation\n+// Copyright 2006-2014 The Apache Software Foundation\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n@@ -14,9 +14,11 @@\n \n package org.apache.tapestry5.internal.structure;\n \n+import org.apache.tapestry5.MetaDataConstants;\n import org.apache.tapestry5.internal.test.InternalBaseTestCase;\n import org.apache.tapestry5.ioc.services.PerthreadManager;\n import org.apache.tapestry5.runtime.PageLifecycleListener;\n+import org.apache.tapestry5.services.MetaDataLocator;\n import org.apache.tapestry5.services.pageload.ComponentResourceSelector;\n import org.slf4j.Logger;\n import org.testng.annotations.AfterMethod;\n@@ -48,15 +50,26 @@ public void cleanup()\n         perThreadManager.cleanup();\n     }\n \n+    private MetaDataLocator newMetaDataLocator(String pageName, boolean enabled)\n+    {\n+\n+        MetaDataLocator locator = newMock(MetaDataLocator.class);\n+\n+        expect(locator.findMeta(MetaDataConstants.UNKNOWN_ACTIVATION_CONTEXT_CHECK, pageName, Boolean.class)).andReturn(enabled);\n+\n+        return locator;\n+    }\n+\n     @Test\n     public void accessor_methods()\n     {\n         ComponentPageElement root = mockComponentPageElement();\n         ComponentResourceSelector selector = new ComponentResourceSelector(Locale.ENGLISH);\n+        MetaDataLocator locator = newMetaDataLocator(LOGICAL_PAGE_NAME, true);\n \n         replay();\n \n-        Page page = new PageImpl(LOGICAL_PAGE_NAME, selector, null, perThreadManager);\n+        Page page = new PageImpl(LOGICAL_PAGE_NAME, selector, null, perThreadManager, locator);\n \n         assertNull(page.getRootElement());\n \n@@ -66,6 +79,8 @@ public void accessor_methods()\n         assertSame(page.getRootElement(), root);\n         assertSame(page.getName(), LOGICAL_PAGE_NAME);\n \n+        assertTrue(page.isExactParameterCountMatch());\n+\n         verify();\n     }\n \n@@ -78,9 +93,11 @@ public void detach_notification()\n         listener1.containingPageDidDetach();\n         listener2.containingPageDidDetach();\n \n+        MetaDataLocator locator = newMetaDataLocator(LOGICAL_PAGE_NAME, true);\n+\n         replay();\n \n-        Page page = new PageImpl(null, selector, null, perThreadManager);\n+        Page page = new PageImpl(LOGICAL_PAGE_NAME, selector, null, perThreadManager, locator);\n \n         page.addLifecycleListener(listener1);\n         page.addLifecycleListener(listener2);\n@@ -101,6 +118,7 @@ public void detach_dirty_if_listener_throws_exception()\n         PageLifecycleListener listener1 = newPageLifecycle();\n         PageLifecycleListener listener2 = newPageLifecycle();\n         RuntimeException t = new RuntimeException(\"Listener detach exception.\");\n+        MetaDataLocator locator = newMetaDataLocator(LOGICAL_PAGE_NAME, true);\n \n         train_getLogger(element, logger);\n \n@@ -113,7 +131,7 @@ public void detach_dirty_if_listener_throws_exception()\n \n         replay();\n \n-        Page page = new PageImpl(null, selector, null, perThreadManager);\n+        Page page = new PageImpl(LOGICAL_PAGE_NAME, selector, null, perThreadManager, locator);\n         page.setRootElement(element);\n \n         page.addLifecycleListener(listener1);\n@@ -132,6 +150,8 @@ protected final void train_getLogger(ComponentPageElement element, Logger logger\n     @Test\n     public void attach_notification()\n     {\n+        MetaDataLocator locator = newMetaDataLocator(LOGICAL_PAGE_NAME, true);\n+\n         PageLifecycleListener listener1 = newPageLifecycle();\n         PageLifecycleListener listener2 = newPageLifecycle();\n \n@@ -140,7 +160,7 @@ public void attach_notification()\n \n         replay();\n \n-        Page page = new PageImpl(null, selector, null, perThreadManager);\n+        Page page = new PageImpl(LOGICAL_PAGE_NAME, selector, null, perThreadManager, locator);\n \n         page.addLifecycleListener(listener1);\n         page.addLifecycleListener(listener2);\n@@ -158,6 +178,8 @@ private PageLifecycleListener newPageLifecycle()\n     @Test\n     public void load_notification()\n     {\n+        MetaDataLocator locator = newMetaDataLocator(LOGICAL_PAGE_NAME, true);\n+\n         PageLifecycleListener listener1 = newPageLifecycle();\n         PageLifecycleListener listener2 = newPageLifecycle();\n \n@@ -166,7 +188,7 @@ public void load_notification()\n \n         replay();\n \n-        Page page = new PageImpl(LOGICAL_PAGE_NAME, selector, null, perThreadManager);\n+        Page page = new PageImpl(LOGICAL_PAGE_NAME, selector, null, perThreadManager, locator);\n \n         page.addLifecycleListener(listener1);\n         page.addLifecycleListener(listener2);\n@@ -180,10 +202,11 @@ public void load_notification()\n     public void get_by_nested_id_for_blank_value_returns_root_component()\n     {\n         ComponentPageElement root = mockComponentPageElement();\n+        MetaDataLocator locator = newMetaDataLocator(LOGICAL_PAGE_NAME, true);\n \n         replay();\n \n-        Page page = new PageImpl(LOGICAL_PAGE_NAME, selector, null, perThreadManager);\n+        Page page = new PageImpl(LOGICAL_PAGE_NAME, selector, null, perThreadManager, locator);\n \n         page.setRootElement(root);\n ",
                "raw_url": "https://github.com/apache/tapestry-5/raw/c33c963d1d457dfa35a5b4586298a7df5275d41d/tapestry-core/src/test/java/org/apache/tapestry5/internal/structure/PageImplTest.java",
                "sha": "d8c01e6cc51ddcaca0e90737de4f1acb0fc28efc",
                "status": "modified"
            }
        ],
        "message": "TAP5-1802: Avoid an NPE when no Request object is known\n\nRe-organize code to move logic out of ComponentPageElementImpl and into Page and ComponentElementResources.",
        "parent": "https://github.com/apache/tapestry-5/commit/0046b167a69d22a87fac707799154d502521b8be",
        "repo": "tapestry-5",
        "unit_tests": [
            "PageImplTest.java"
        ]
    },
    "tapestry-5_cc5e26f": {
        "bug_id": "tapestry-5_cc5e26f",
        "commit": "https://github.com/apache/tapestry-5/commit/cc5e26f66e7df5bfbadc9bf5831b62cbfa1b2394",
        "file": [
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/tapestry-5/blob/cc5e26f66e7df5bfbadc9bf5831b62cbfa1b2394/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Form.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/tapestry-5/contents/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Form.java?ref=cc5e26f66e7df5bfbadc9bf5831b62cbfa1b2394",
                "deletions": 12,
                "filename": "tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Form.java",
                "patch": "@@ -426,15 +426,12 @@ private void linkFormToZone(Link link)\n      * <p/>\n      * This method may also be invoked as the handler for the \"internalCreateRenderTimeFormSupport\" event.\n      *\n-     * @param clientId\n-     *         the client-side id for the rendered form\n-     *         element\n-     * @param actionSink\n-     *         used to collect component actions that will, ultimately, be\n-     *         written as the t:formdata hidden\n-     *         field\n-     * @param allocator\n-     *         used to allocate unique ids\n+     * @param clientId   the client-side id for the rendered form\n+     *                   element\n+     * @param actionSink used to collect component actions that will, ultimately, be\n+     *                   written as the t:formdata hidden\n+     *                   field\n+     * @param allocator  used to allocate unique ids\n      * @return form support object\n      */\n     @OnEvent(\"internalCreateRenderTimeFormSupport\")\n@@ -497,10 +494,10 @@ Object onAction(EventContext context) throws IOException\n \n         heartbeat.begin();\n \n+        boolean didPushBeanValidationContext = false;\n+\n         try\n         {\n-            environment.push(BeanValidationContext.class, new BeanValidationContextImpl(validate));\n-\n             resources.triggerContextEvent(EventConstants.PREPARE_FOR_SUBMIT, context, eventCallback);\n \n             if (eventCallback.isAborted())\n@@ -517,6 +514,10 @@ Object onAction(EventContext context) throws IOException\n                     return true;\n             }\n \n+            environment.push(BeanValidationContext.class, new BeanValidationContextImpl(validate));\n+\n+            didPushBeanValidationContext = true;\n+\n             executeStoredActions();\n \n             heartbeat.end();\n@@ -559,7 +560,10 @@ Object onAction(EventContext context) throws IOException\n \n             environment.pop(ValidationTracker.class);\n \n-            environment.pop(BeanValidationContext.class);\n+            if (didPushBeanValidationContext)\n+            {\n+                environment.pop(BeanValidationContext.class);\n+            }\n \n             activeTracker = null;\n         }",
                "raw_url": "https://github.com/apache/tapestry-5/raw/cc5e26f66e7df5bfbadc9bf5831b62cbfa1b2394/tapestry-core/src/main/java/org/apache/tapestry5/corelib/components/Form.java",
                "sha": "bc27f3970209b05ddd60328f07da7586d7f12683",
                "status": "modified"
            }
        ],
        "message": "TAP5-1580: A Form with an event listener for \"canceled\" event can cause an NPE popping off a BeanEditContext from the Environment that wasn't pushed\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry5/trunk@1148606 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tapestry-5/commit/5a55a0f3a182df6b2efa3d013f84b96bf1830a06",
        "repo": "tapestry-5",
        "unit_tests": [
            "FormTest.java",
            "FormTests.java"
        ]
    }
}