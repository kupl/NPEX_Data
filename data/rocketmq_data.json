[{"commit": "https://github.com/apache/rocketmq/commit/60efa68f3bdff7847d0216f494afe95b85b8954e", "parent": "https://github.com/apache/rocketmq/commit/edf97032e4cba0f593f46a212f7a06899a220a9c", "message": "Fix NPE when getting the localhost using admin tool (#518)", "bug_id": "rocketmq_1", "file": [{"additions": 1, "raw_url": "https://github.com/apache/rocketmq/raw/60efa68f3bdff7847d0216f494afe95b85b8954e/tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java", "blob_url": "https://github.com/apache/rocketmq/blob/60efa68f3bdff7847d0216f494afe95b85b8954e/tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java", "sha": "2a7815b61709c802d7881dd821919af83019aaba", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java?ref=60efa68f3bdff7847d0216f494afe95b85b8954e", "patch": "@@ -842,7 +842,7 @@ public boolean consumed(final MessageExt msg,\n                 BrokerData brokerData = ci.getBrokerAddrTable().get(mq.getBrokerName());\n                 if (brokerData != null) {\n                     String addr = brokerData.getBrokerAddrs().get(MixAll.MASTER_ID);\n-                    if (addr.equals(RemotingUtil.socketAddress2String(msg.getStoreHost()))) {\n+                    if (RemotingUtil.socketAddress2String(msg.getStoreHost()).equals(addr)) {\n                         if (next.getValue().getConsumerOffset() > msg.getQueueOffset()) {\n                             return true;\n                         }", "filename": "tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java"}], "repo": "rocketmq"}, {"commit": "https://github.com/apache/rocketmq/commit/a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "parent": "https://github.com/apache/rocketmq/commit/52005aee908a2980df78573f3444c3744ddd4686", "message": "[ISSUE #1156]new mqadmin API for ACL configuration (#1217)\n\n* [issue#1164]return the codes to original reput method part.\r\n\r\n* [issue#1164]fix issue that Consumer Instance can't consume message from slave when cluster is in the high level tps and master has been killed.\r\n\r\n* [issue#1164]if the broker is a master node,then modify reputFromOffset correctly.\r\n\r\n* [issue#1164]add some coding comments.\r\n\r\n* [ISSUE#1156]new mqadmin API for ACL configuration.Add dataVersion and write data to acl yaml config file in the acl module.\r\n\r\n* [ISSUE#1156]add unit test cases for new acl mqadmin API command which adding dataversion part.\r\n\r\n* [ISSUE#1156]implement update,delete and query Acl config version in new acl mqadmin API command.\r\n\r\n* [ISSUE#1156]polish and optimize the implementation for new acl mqadmin API command.\r\n\r\n* [ISSUE#1156]fix the issues that topicPerms and groupPerms can't be updated and there is NPE when querying acl config version.\r\n\r\n* [ISSUE#1156]fix small issue that specify wrong plainAccessConfig attribute,the correct one is AccessKey.\r\n\r\n* [ISSUE#1156]add updateGlobalWhiteAddr subcommand codes for mqadmin acl command.\r\n\r\n* [ISSUE#1156]adjust some codes for cluster acl config version list in the mqadmin acl commands.\r\n\r\n* [ISSUE#1156]add acl mqadmin command part in the acl user_guide docs.\r\n\r\n* [ISSUE#1156]polish and optimize some part of acl mqadmin command codes.\r\n\r\n* [ISSUE#1156]fix code comments issue that the first letter needs to be capitalized and adjust the contents of acl user_guide.", "bug_id": "rocketmq_2", "file": [{"additions": 31, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/acl/src/main/java/org/apache/rocketmq/acl/AccessValidator.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/acl/src/main/java/org/apache/rocketmq/acl/AccessValidator.java", "sha": "b87cc2fa44bc9e93a34020d189bd8d084fa24401", "changes": 31, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/acl/src/main/java/org/apache/rocketmq/acl/AccessValidator.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -17,9 +17,12 @@\n \n package org.apache.rocketmq.acl;\n \n+import java.util.List;\n+import org.apache.rocketmq.common.PlainAccessConfig;\n import org.apache.rocketmq.remoting.protocol.RemotingCommand;\n \n public interface AccessValidator {\n+\n     /**\n      * Parse to get the AccessResource(user, resource, needed permission)\n      *\n@@ -35,4 +38,32 @@\n      * @param accessResource\n      */\n     void validate(AccessResource accessResource);\n+\n+    /**\n+     * Update the access resource config\n+     *\n+     * @param plainAccessConfig\n+     * @return\n+     */\n+    boolean updateAccessConfig(PlainAccessConfig plainAccessConfig);\n+\n+    /**\n+     * Delete the access resource config\n+     *\n+     * @return\n+     */\n+    boolean deleteAccessConfig(String accesskey);\n+\n+    /**\n+     * Get the access resource config version information\n+     *\n+     * @return\n+     */\n+    String getAclConfigVersion();\n+\n+    /**\n+     * Update globalWhiteRemoteAddresses in acl yaml config file\n+     * @return\n+     */\n+    boolean updateGlobalWhiteAddrsConfig(List<String> globalWhiteAddrsList);\n }", "filename": "acl/src/main/java/org/apache/rocketmq/acl/AccessValidator.java"}, {"additions": 50, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/acl/src/main/java/org/apache/rocketmq/acl/common/AclConstants.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/acl/src/main/java/org/apache/rocketmq/acl/common/AclConstants.java", "sha": "bfe96f53037cca259b837a461114f879b2b7359c", "changes": 50, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/acl/src/main/java/org/apache/rocketmq/acl/common/AclConstants.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.rocketmq.acl.common;\n+\n+public class AclConstants {\n+\n+    public static final String CONFIG_GLOBAL_WHITE_ADDRS = \"globalWhiteRemoteAddresses\";\n+\n+    public static final String CONFIG_ACCOUNTS = \"accounts\";\n+\n+    public static final String CONFIG_ACCESS_KEY = \"accessKey\";\n+\n+    public static final String CONFIG_SECRET_KEY = \"secretKey\";\n+\n+    public static final String CONFIG_WHITE_ADDR = \"whiteRemoteAddress\";\n+\n+    public static final String CONFIG_ADMIN_ROLE = \"admin\";\n+\n+    public static final String CONFIG_DEFAULT_TOPIC_PERM = \"defaultTopicPerm\";\n+\n+    public static final String CONFIG_DEFAULT_GROUP_PERM = \"defaultGroupPerm\";\n+\n+    public static final String CONFIG_TOPIC_PERMS = \"topicPerms\";\n+\n+    public static final String CONFIG_GROUP_PERMS = \"groupPerms\";\n+\n+    public static final String CONFIG_DATA_VERSION = \"dataVersion\";\n+\n+    public static final String CONFIG_COUNTER = \"counter\";\n+\n+    public static final String CONFIG_TIME_STAMP = \"timestamp\";\n+\n+    public static final int ACCESS_KEY_MIN_LENGTH = 6;\n+\n+    public static final int SECRET_KEY_MIN_LENGTH = 6;\n+}", "filename": "acl/src/main/java/org/apache/rocketmq/acl/common/AclConstants.java"}, {"additions": 27, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/acl/src/main/java/org/apache/rocketmq/acl/common/AclUtils.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/acl/src/main/java/org/apache/rocketmq/acl/common/AclUtils.java", "sha": "20e1cfa26b90916aecfec39e2669179c85854e20", "changes": 34, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/acl/src/main/java/org/apache/rocketmq/acl/common/AclUtils.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -20,7 +20,9 @@\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileNotFoundException;\n+import java.io.FileWriter;\n import java.io.IOException;\n+import java.io.PrintWriter;\n import java.util.Map;\n import java.util.SortedMap;\n import org.apache.commons.lang3.StringUtils;\n@@ -48,7 +50,7 @@\n \n             return AclUtils.combineBytes(sb.toString().getBytes(CHARSET), request.getBody());\n         } catch (Exception e) {\n-            throw new RuntimeException(\"incompatible exception.\", e);\n+            throw new RuntimeException(\"Incompatible exception.\", e);\n         }\n     }\n \n@@ -69,7 +71,7 @@ public static String calSignature(byte[] data, String secretKey) {\n \n     public static void verify(String netaddress, int index) {\n         if (!AclUtils.isScope(netaddress, index)) {\n-            throw new AclException(String.format(\"netaddress examine scope Exception netaddress is %s\", netaddress));\n+            throw new AclException(String.format(\"Netaddress examine scope Exception netaddress is %s\", netaddress));\n         }\n     }\n \n@@ -127,11 +129,11 @@ public static boolean isMinus(String minus) {\n     }\n \n     public static <T> T getYamlDataObject(String path, Class<T> clazz) {\n-        Yaml ymal = new Yaml();\n+        Yaml yaml = new Yaml();\n         FileInputStream fis = null;\n         try {\n             fis = new FileInputStream(new File(path));\n-            return ymal.loadAs(fis, clazz);\n+            return yaml.loadAs(fis, clazz);\n         } catch (FileNotFoundException ignore) {\n             return null;\n         } catch (Exception e) {\n@@ -146,13 +148,31 @@ public static boolean isMinus(String minus) {\n         }\n     }\n \n+    public static boolean writeDataObject(String path, Map<String,Object> dataMap) {\n+        Yaml yaml = new Yaml();\n+        PrintWriter pw = null;\n+        try {\n+            pw = new PrintWriter(new FileWriter(path));\n+            String dumpAsMap = yaml.dumpAsMap(dataMap);\n+            pw.print(dumpAsMap);\n+            pw.flush();\n+        } catch (Exception e) {\n+            throw new AclException(e.getMessage());\n+        } finally {\n+            if (pw != null) {\n+                pw.close();\n+            }\n+        }\n+        return true;\n+    }\n+\n     public static RPCHook getAclRPCHook(String fileName) {\n         JSONObject yamlDataObject = null;\n         try {\n             yamlDataObject = AclUtils.getYamlDataObject(fileName,\n                 JSONObject.class);\n         } catch (Exception e) {\n-            log.error(\"convert yaml file to data object error, \",e);\n+            log.error(\"Convert yaml file to data object error, \",e);\n             return null;\n         }\n \n@@ -161,8 +181,8 @@ public static RPCHook getAclRPCHook(String fileName) {\n             return null;\n         }\n         \n-        String accessKey = yamlDataObject.getString(\"accessKey\");\n-        String secretKey = yamlDataObject.getString(\"secretKey\");\n+        String accessKey = yamlDataObject.getString(AclConstants.CONFIG_ACCESS_KEY);\n+        String secretKey = yamlDataObject.getString(AclConstants.CONFIG_SECRET_KEY);\n \n         if (StringUtils.isBlank(accessKey) || StringUtils.isBlank(secretKey)) {\n             log.warn(\"AccessKey or secretKey is blank, the acl is not enabled.\");", "filename": "acl/src/main/java/org/apache/rocketmq/acl/common/AclUtils.java"}, {"additions": 1, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessResource.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessResource.java", "sha": "a0cceed8c31cf18102ed5f44903f92f78a157a64", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessResource.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -43,7 +43,7 @@\n \n     private int requestCode;\n \n-    //the content to calculate the content\n+    // The content to calculate the content\n     private byte[] content;\n \n     private String signature;", "filename": "acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessResource.java"}, {"additions": 24, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessValidator.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessValidator.java", "sha": "c8ce23908484c1f56c9576c6ee97c7b907227539", "changes": 28, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessValidator.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -16,6 +16,7 @@\n  */\n package org.apache.rocketmq.acl.plain;\n \n+import java.util.List;\n import java.util.Map;\n import java.util.SortedMap;\n import java.util.TreeMap;\n@@ -25,6 +26,7 @@\n import org.apache.rocketmq.acl.common.AclUtils;\n import org.apache.rocketmq.acl.common.Permission;\n import org.apache.rocketmq.acl.common.SessionCredentials;\n+import org.apache.rocketmq.common.PlainAccessConfig;\n import org.apache.rocketmq.common.protocol.RequestCode;\n import org.apache.rocketmq.common.protocol.header.GetConsumerListByGroupRequestHeader;\n import org.apache.rocketmq.common.protocol.header.UnregisterClientRequestHeader;\n@@ -38,10 +40,10 @@\n \n public class PlainAccessValidator implements AccessValidator {\n \n-    private PlainPermissionLoader aclPlugEngine;\n+    private PlainPermissionManager aclPlugEngine;\n \n     public PlainAccessValidator() {\n-        aclPlugEngine = new PlainPermissionLoader();\n+        aclPlugEngine = new PlainPermissionManager();\n     }\n \n     @Override\n@@ -56,8 +58,8 @@ public AccessResource parse(RemotingCommand request, String remoteAddr) {\n         accessResource.setRequestCode(request.getCode());\n \n         if (request.getExtFields() == null) {\n-            //If request's extFields is null,then return accessResource directly(users can use whiteAddress pattern)\n-            //The following logic codes depend on the request's extFields not to be null.\n+            // If request's extFields is null,then return accessResource directly(users can use whiteAddress pattern)\n+            // The following logic codes depend on the request's extFields not to be null.\n             return accessResource;\n         }\n         accessResource.setAccessKey(request.getExtFields().get(SessionCredentials.ACCESS_KEY));\n@@ -135,4 +137,22 @@ public void validate(AccessResource accessResource) {\n         aclPlugEngine.validate((PlainAccessResource) accessResource);\n     }\n \n+    @Override\n+    public boolean updateAccessConfig(PlainAccessConfig plainAccessConfig) {\n+        return aclPlugEngine.updateAccessConfig(plainAccessConfig);\n+    }\n+\n+    @Override\n+    public boolean deleteAccessConfig(String accesskey) {\n+        return aclPlugEngine.deleteAccessConfig(accesskey);\n+    }\n+\n+    @Override public String getAclConfigVersion() {\n+        return aclPlugEngine.getAclConfigDataVersion();\n+    }\n+\n+    @Override public boolean updateGlobalWhiteAddrsConfig(List<String> globalWhiteAddrsList) {\n+        return aclPlugEngine.updateGlobalWhiteAddrsConfig(globalWhiteAddrsList);\n+    }\n+\n }", "filename": "acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessValidator.java"}, {"additions": 187, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/acl/src/main/java/org/apache/rocketmq/acl/plain/PlainPermissionManager.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/acl/src/main/java/org/apache/rocketmq/acl/plain/PlainPermissionManager.java", "previous_filename": "acl/src/main/java/org/apache/rocketmq/acl/plain/PlainPermissionLoader.java", "sha": "fc7f0f3fdb81c8b1257d915f522e544889e11d52", "changes": 282, "status": "renamed", "deletions": 95, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/acl/src/main/java/org/apache/rocketmq/acl/plain/PlainPermissionManager.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -21,27 +21,29 @@\n import java.io.File;\n import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.concurrent.locks.ReadWriteLock;\n-import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.rocketmq.acl.common.AclConstants;\n import org.apache.rocketmq.acl.common.AclException;\n import org.apache.rocketmq.acl.common.AclUtils;\n import org.apache.rocketmq.acl.common.Permission;\n+import org.apache.rocketmq.common.DataVersion;\n import org.apache.rocketmq.common.MixAll;\n+import org.apache.rocketmq.common.PlainAccessConfig;\n import org.apache.rocketmq.common.constant.LoggerName;\n import org.apache.rocketmq.logging.InternalLogger;\n import org.apache.rocketmq.logging.InternalLoggerFactory;\n import org.apache.rocketmq.srvutil.FileWatchService;\n \n-public class PlainPermissionLoader {\n+public class PlainPermissionManager {\n \n     private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);\n \n     private static final String DEFAULT_PLAIN_ACL_FILE = \"/conf/plain_acl.yml\";\n \n-    private final ReadWriteLock lock = new ReentrantReadWriteLock();\n-\n     private String fileHome = System.getProperty(MixAll.ROCKETMQ_HOME_PROPERTY,\n         System.getenv(MixAll.ROCKETMQ_HOME_ENV));\n \n@@ -55,7 +57,9 @@\n \n     private boolean isWatchStart;\n \n-    public PlainPermissionLoader() {\n+    private final DataVersion dataVersion = new DataVersion();\n+\n+    public PlainPermissionManager() {\n         load();\n         watch();\n     }\n@@ -67,7 +71,6 @@ public void load() {\n \n         JSONObject plainAclConfData = AclUtils.getYamlDataObject(fileHome + File.separator + fileName,\n             JSONObject.class);\n-\n         if (plainAclConfData == null || plainAclConfData.isEmpty()) {\n             throw new AclException(String.format(\"%s file  is not data\", fileHome + File.separator + fileName));\n         }\n@@ -80,7 +83,7 @@ public void load() {\n             }\n         }\n \n-        JSONArray accounts = plainAclConfData.getJSONArray(\"accounts\");\n+        JSONArray accounts = plainAclConfData.getJSONArray(AclConstants.CONFIG_ACCOUNTS);\n         if (accounts != null && !accounts.isEmpty()) {\n             List<PlainAccessConfig> plainAccessConfigList = accounts.toJavaList(PlainAccessConfig.class);\n             for (PlainAccessConfig plainAccessConfig : plainAccessConfigList) {\n@@ -89,10 +92,184 @@ public void load() {\n             }\n         }\n \n+        // For loading dataversion part just\n+        JSONArray tempDataVersion = plainAclConfData.getJSONArray(AclConstants.CONFIG_DATA_VERSION);\n+        if (tempDataVersion != null && !tempDataVersion.isEmpty()) {\n+            List<DataVersion> dataVersion = tempDataVersion.toJavaList(DataVersion.class);\n+            DataVersion firstElement = dataVersion.get(0);\n+            this.dataVersion.assignNewOne(firstElement);\n+        }\n+\n         this.globalWhiteRemoteAddressStrategy = globalWhiteRemoteAddressStrategy;\n         this.plainAccessResourceMap = plainAccessResourceMap;\n     }\n \n+    public String getAclConfigDataVersion() {\n+        return this.dataVersion.toJson();\n+    }\n+\n+    private Map<String, Object> updateAclConfigFileVersion(Map<String, Object> updateAclConfigMap) {\n+\n+        dataVersion.nextVersion();\n+        List<Map<String, Object>> versionElement = new ArrayList<Map<String, Object>>();\n+        Map<String, Object> accountsMap = new LinkedHashMap<String, Object>() {\n+            {\n+                put(AclConstants.CONFIG_COUNTER, dataVersion.getCounter().longValue());\n+                put(AclConstants.CONFIG_TIME_STAMP, dataVersion.getTimestamp());\n+            }\n+        };\n+        versionElement.add(accountsMap);\n+        updateAclConfigMap.put(AclConstants.CONFIG_DATA_VERSION, versionElement);\n+        return updateAclConfigMap;\n+    }\n+\n+    public boolean updateAccessConfig(PlainAccessConfig plainAccessConfig) {\n+\n+        if (plainAccessConfig == null) {\n+            log.error(\"Parameter value plainAccessConfig is null,Please check your parameter\");\n+            return false;\n+        }\n+\n+        Map<String, Object> aclAccessConfigMap = AclUtils.getYamlDataObject(fileHome + File.separator + fileName,\n+            Map.class);\n+\n+        List<Map<String, Object>> accounts = (List<Map<String, Object>>) aclAccessConfigMap.get(AclConstants.CONFIG_ACCOUNTS);\n+        Map<String, Object> updateAccountMap = null;\n+        if (accounts != null) {\n+            for (Map<String, Object> account : accounts) {\n+                if (account.get(AclConstants.CONFIG_ACCESS_KEY).equals(plainAccessConfig.getAccessKey())) {\n+                    // Update acl access config elements\n+                    accounts.remove(account);\n+                    updateAccountMap = createAclAccessConfigMap(account, plainAccessConfig);\n+                    accounts.add(updateAccountMap);\n+                    aclAccessConfigMap.put(AclConstants.CONFIG_ACCOUNTS, accounts);\n+\n+                    if (AclUtils.writeDataObject(fileHome + File.separator + fileName, updateAclConfigFileVersion(aclAccessConfigMap))) {\n+                        return true;\n+                    }\n+                    return false;\n+                }\n+            }\n+            // Create acl access config elements\n+            accounts.add(createAclAccessConfigMap(null, plainAccessConfig));\n+            aclAccessConfigMap.put(AclConstants.CONFIG_ACCOUNTS, accounts);\n+            if (AclUtils.writeDataObject(fileHome + File.separator + fileName, updateAclConfigFileVersion(aclAccessConfigMap))) {\n+                return true;\n+            }\n+            return false;\n+        }\n+\n+        log.error(\"Users must ensure that the acl yaml config file has accounts node element\");\n+        return false;\n+    }\n+\n+    private Map<String, Object> createAclAccessConfigMap(Map<String, Object> existedAccoutMap, PlainAccessConfig plainAccessConfig) {\n+\n+\n+        Map<String, Object> newAccountsMap = null;\n+        if (existedAccoutMap == null) {\n+            newAccountsMap = new LinkedHashMap<String, Object>();\n+        } else {\n+            newAccountsMap = existedAccoutMap;\n+        }\n+\n+        if (StringUtils.isEmpty(plainAccessConfig.getAccessKey()) ||\n+            plainAccessConfig.getAccessKey().length() <= AclConstants.ACCESS_KEY_MIN_LENGTH) {\n+            throw new AclException(String.format(\n+                    \"The accessKey=%s cannot be null and length should longer than 6\",\n+                    plainAccessConfig.getAccessKey()));\n+        }\n+        newAccountsMap.put(AclConstants.CONFIG_ACCESS_KEY, plainAccessConfig.getAccessKey());\n+\n+        if (!StringUtils.isEmpty(plainAccessConfig.getSecretKey())) {\n+            if (plainAccessConfig.getSecretKey().length() <= AclConstants.SECRET_KEY_MIN_LENGTH) {\n+                throw new AclException(String.format(\n+                    \"The secretKey=%s value length should longer than 6\",\n+                    plainAccessConfig.getSecretKey()));\n+            }\n+            newAccountsMap.put(AclConstants.CONFIG_SECRET_KEY, (String) plainAccessConfig.getSecretKey());\n+        }\n+        if (!StringUtils.isEmpty(plainAccessConfig.getWhiteRemoteAddress())) {\n+            newAccountsMap.put(AclConstants.CONFIG_WHITE_ADDR, plainAccessConfig.getWhiteRemoteAddress());\n+        }\n+        if (!StringUtils.isEmpty(String.valueOf(plainAccessConfig.isAdmin()))) {\n+            newAccountsMap.put(AclConstants.CONFIG_ADMIN_ROLE, plainAccessConfig.isAdmin());\n+        }\n+        if (!StringUtils.isEmpty(plainAccessConfig.getDefaultTopicPerm())) {\n+            newAccountsMap.put(AclConstants.CONFIG_DEFAULT_TOPIC_PERM, plainAccessConfig.getDefaultTopicPerm());\n+        }\n+        if (!StringUtils.isEmpty(plainAccessConfig.getDefaultGroupPerm())) {\n+            newAccountsMap.put(AclConstants.CONFIG_DEFAULT_GROUP_PERM, plainAccessConfig.getDefaultGroupPerm());\n+        }\n+        if (plainAccessConfig.getTopicPerms() != null && !plainAccessConfig.getTopicPerms().isEmpty()) {\n+            newAccountsMap.put(AclConstants.CONFIG_TOPIC_PERMS, plainAccessConfig.getTopicPerms());\n+        }\n+        if (plainAccessConfig.getGroupPerms() != null && !plainAccessConfig.getGroupPerms().isEmpty()) {\n+            newAccountsMap.put(AclConstants.CONFIG_GROUP_PERMS, plainAccessConfig.getGroupPerms());\n+        }\n+\n+        return newAccountsMap;\n+    }\n+\n+    public boolean deleteAccessConfig(String accesskey) {\n+        if (StringUtils.isEmpty(accesskey)) {\n+            log.error(\"Parameter value accesskey is null or empty String,Please check your parameter\");\n+            return false;\n+        }\n+\n+        Map<String, Object> aclAccessConfigMap = AclUtils.getYamlDataObject(fileHome + File.separator + fileName,\n+                    Map.class);\n+\n+        List<Map<String, Object>> accounts = (List<Map<String, Object>>) aclAccessConfigMap.get(\"accounts\");\n+        if (accounts != null) {\n+            Iterator<Map<String, Object>> itemIterator = accounts.iterator();\n+            while (itemIterator.hasNext()) {\n+\n+                if (itemIterator.next().get(AclConstants.CONFIG_ACCESS_KEY).equals(accesskey)) {\n+                    // Delete the related acl config element\n+                    itemIterator.remove();\n+                    aclAccessConfigMap.put(AclConstants.CONFIG_ACCOUNTS, accounts);\n+\n+                    if (AclUtils.writeDataObject(fileHome + File.separator + fileName, updateAclConfigFileVersion(aclAccessConfigMap))) {\n+                        return true;\n+                    }\n+                    return false;\n+                }\n+            }\n+        }\n+        log.error(\"Users must ensure that the acl yaml config file has related acl config elements\");\n+\n+        return false;\n+    }\n+\n+    public boolean updateGlobalWhiteAddrsConfig(List<String> globalWhiteAddrsList) {\n+\n+        if (globalWhiteAddrsList == null) {\n+            log.error(\"Parameter value globalWhiteAddrsList is null,Please check your parameter\");\n+            return false;\n+        }\n+\n+        Map<String, Object> aclAccessConfigMap = AclUtils.getYamlDataObject(fileHome + File.separator + fileName,\n+            Map.class);\n+\n+        List<String> globalWhiteRemoteAddrList = (List<String>) aclAccessConfigMap.get(AclConstants.CONFIG_GLOBAL_WHITE_ADDRS);\n+\n+        if (globalWhiteRemoteAddrList != null) {\n+            globalWhiteRemoteAddrList.clear();\n+            globalWhiteRemoteAddrList.addAll(globalWhiteAddrsList);\n+\n+            // Update globalWhiteRemoteAddr element in memeory map firstly\n+            aclAccessConfigMap.put(AclConstants.CONFIG_GLOBAL_WHITE_ADDRS,globalWhiteRemoteAddrList);\n+            if (AclUtils.writeDataObject(fileHome + File.separator + fileName, updateAclConfigFileVersion(aclAccessConfigMap))) {\n+                return true;\n+            }\n+            return false;\n+        }\n+\n+        log.error(\"Users must ensure that the acl yaml config file has globalWhiteRemoteAddresses flag firstly\");\n+        return false;\n+    }\n+\n     private void watch() {\n         try {\n             String watchFilePath = fileHome + fileName;\n@@ -156,8 +333,8 @@ void clearPermissionInfo() {\n     public PlainAccessResource buildPlainAccessResource(PlainAccessConfig plainAccessConfig) throws AclException {\n         if (plainAccessConfig.getAccessKey() == null\n             || plainAccessConfig.getSecretKey() == null\n-            || plainAccessConfig.getAccessKey().length() <= 6\n-            || plainAccessConfig.getSecretKey().length() <= 6) {\n+            || plainAccessConfig.getAccessKey().length() <= AclConstants.ACCESS_KEY_MIN_LENGTH\n+            || plainAccessConfig.getSecretKey().length() <= AclConstants.SECRET_KEY_MIN_LENGTH) {\n             throw new AclException(String.format(\n                 \"The accessKey=%s and secretKey=%s cannot be null and length should longer than 6\",\n                     plainAccessConfig.getAccessKey(), plainAccessConfig.getSecretKey()));\n@@ -217,89 +394,4 @@ public void validate(PlainAccessResource plainAccessResource) {\n     public boolean isWatchStart() {\n         return isWatchStart;\n     }\n-\n-    static class PlainAccessConfig {\n-\n-        private String accessKey;\n-\n-        private String secretKey;\n-\n-        private String whiteRemoteAddress;\n-\n-        private boolean admin;\n-\n-        private String defaultTopicPerm;\n-\n-        private String defaultGroupPerm;\n-\n-        private List<String> topicPerms;\n-\n-        private List<String> groupPerms;\n-\n-        public String getAccessKey() {\n-            return accessKey;\n-        }\n-\n-        public void setAccessKey(String accessKey) {\n-            this.accessKey = accessKey;\n-        }\n-\n-        public String getSecretKey() {\n-            return secretKey;\n-        }\n-\n-        public void setSecretKey(String secretKey) {\n-            this.secretKey = secretKey;\n-        }\n-\n-        public String getWhiteRemoteAddress() {\n-            return whiteRemoteAddress;\n-        }\n-\n-        public void setWhiteRemoteAddress(String whiteRemoteAddress) {\n-            this.whiteRemoteAddress = whiteRemoteAddress;\n-        }\n-\n-        public boolean isAdmin() {\n-            return admin;\n-        }\n-\n-        public void setAdmin(boolean admin) {\n-            this.admin = admin;\n-        }\n-\n-        public String getDefaultTopicPerm() {\n-            return defaultTopicPerm;\n-        }\n-\n-        public void setDefaultTopicPerm(String defaultTopicPerm) {\n-            this.defaultTopicPerm = defaultTopicPerm;\n-        }\n-\n-        public String getDefaultGroupPerm() {\n-            return defaultGroupPerm;\n-        }\n-\n-        public void setDefaultGroupPerm(String defaultGroupPerm) {\n-            this.defaultGroupPerm = defaultGroupPerm;\n-        }\n-\n-        public List<String> getTopicPerms() {\n-            return topicPerms;\n-        }\n-\n-        public void setTopicPerms(List<String> topicPerms) {\n-            this.topicPerms = topicPerms;\n-        }\n-\n-        public List<String> getGroupPerms() {\n-            return groupPerms;\n-        }\n-\n-        public void setGroupPerms(List<String> groupPerms) {\n-            this.groupPerms = groupPerms;\n-        }\n-\n-    }\n-\n }", "filename": "acl/src/main/java/org/apache/rocketmq/acl/plain/PlainPermissionManager.java"}, {"additions": 72, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/acl/src/test/java/org/apache/rocketmq/acl/common/AclUtilsTest.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/acl/src/test/java/org/apache/rocketmq/acl/common/AclUtilsTest.java", "sha": "5b2627de85dc66f13f1868b7b0c5e014aba3117f", "changes": 73, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/acl/src/test/java/org/apache/rocketmq/acl/common/AclUtilsTest.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -17,7 +17,11 @@\n package org.apache.rocketmq.acl.common;\n \n import com.alibaba.fastjson.JSONObject;\n+import java.io.File;\n+import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import org.apache.commons.lang3.StringUtils;\n@@ -131,10 +135,77 @@ public void isMinusTest() {\n     @Test\n     public void getYamlDataObjectTest() {\n \n-        Map<String, Object> map = AclUtils.getYamlDataObject(\"src/test/resources/conf/plain_acl.yml\", Map.class);\n+        Map<String, Object> map = AclUtils.getYamlDataObject(\"src/test/resources/conf/plain_acl_correct.yml\", Map.class);\n         Assert.assertFalse(map.isEmpty());\n     }\n \n+    @Test\n+    public void writeDataObject2YamlFileTest() throws IOException{\n+\n+        String targetFileName = \"src/test/resources/conf/plain_write_acl.yml\";\n+        File transport = new File(targetFileName);\n+        transport.delete();\n+        transport.createNewFile();\n+\n+        Map<String, Object> aclYamlMap = new HashMap<String, Object>();\n+\n+        // For globalWhiteRemoteAddrs element in acl yaml config file\n+        List<String> globalWhiteRemoteAddrs = new ArrayList<String>();\n+        globalWhiteRemoteAddrs.add(\"10.10.103.*\");\n+        globalWhiteRemoteAddrs.add(\"192.168.0.*\");\n+        aclYamlMap.put(\"globalWhiteRemoteAddrs\",globalWhiteRemoteAddrs);\n+\n+        // For accounts element in acl yaml config file\n+        List<Map<String, Object>> accounts = new ArrayList<Map<String, Object>>();\n+        Map<String, Object> accountsMap = new LinkedHashMap<String, Object>() {\n+            {\n+                put(\"accessKey\", \"RocketMQ\");\n+                put(\"secretKey\", \"12345678\");\n+                put(\"whiteRemoteAddress\", \"whiteRemoteAddress\");\n+                put(\"admin\", \"true\");\n+            }\n+        };\n+        accounts.add(accountsMap);\n+        aclYamlMap.put(\"accounts\",accounts);\n+        Assert.assertTrue(AclUtils.writeDataObject(targetFileName, aclYamlMap));\n+\n+        transport.delete();\n+    }\n+\n+    @Test\n+    public void updateExistedYamlFileTest()  throws IOException{\n+\n+        String targetFileName = \"src/test/resources/conf/plain_update_acl.yml\";\n+        File transport = new File(targetFileName);\n+        transport.delete();\n+        transport.createNewFile();\n+\n+        Map<String, Object> aclYamlMap = new HashMap<String, Object>();\n+\n+        // For globalWhiteRemoteAddrs element in acl yaml config file\n+        List<String> globalWhiteRemoteAddrs = new ArrayList<String>();\n+        globalWhiteRemoteAddrs.add(\"10.10.103.*\");\n+        globalWhiteRemoteAddrs.add(\"192.168.0.*\");\n+        aclYamlMap.put(\"globalWhiteRemoteAddrs\",globalWhiteRemoteAddrs);\n+\n+        // Write file to yaml file\n+        AclUtils.writeDataObject(targetFileName, aclYamlMap);\n+\n+        Map<String, Object> updatedMap = AclUtils.getYamlDataObject(targetFileName, Map.class);\n+        List<String> globalWhiteRemoteAddrList = (List<String>) updatedMap.get(\"globalWhiteRemoteAddrs\");\n+        globalWhiteRemoteAddrList.clear();\n+        globalWhiteRemoteAddrList.add(\"192.168.1.2\");\n+\n+        // Update file and flush to yaml file\n+        AclUtils.writeDataObject(targetFileName, updatedMap);\n+\n+        Map<String, Object> readableMap = AclUtils.getYamlDataObject(targetFileName, Map.class);\n+        List<String> updatedGlobalWhiteRemoteAddrs = (List<String>) readableMap.get(\"globalWhiteRemoteAddrs\");\n+        Assert.assertEquals(\"192.168.1.2\",updatedGlobalWhiteRemoteAddrs.get(0));\n+\n+        transport.delete();\n+    }\n+\n     @Test\n     public void getYamlDataIgnoreFileNotFoundExceptionTest() {\n ", "filename": "acl/src/test/java/org/apache/rocketmq/acl/common/AclUtilsTest.java"}, {"additions": 264, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/acl/src/test/java/org/apache/rocketmq/acl/plain/PlainAccessValidatorTest.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/acl/src/test/java/org/apache/rocketmq/acl/plain/PlainAccessValidatorTest.java", "sha": "bca90756193a6c57cbb9c4952fcdad80aadb11b9", "changes": 264, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/acl/src/test/java/org/apache/rocketmq/acl/plain/PlainAccessValidatorTest.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -16,14 +16,20 @@\n  */\n package org.apache.rocketmq.acl.plain;\n \n+\n import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n \n import org.apache.rocketmq.acl.common.AclClientRPCHook;\n+import org.apache.rocketmq.acl.common.AclConstants;\n import org.apache.rocketmq.acl.common.AclException;\n import org.apache.rocketmq.acl.common.AclUtils;\n import org.apache.rocketmq.acl.common.SessionCredentials;\n+import org.apache.rocketmq.common.PlainAccessConfig;\n import org.apache.rocketmq.common.protocol.RequestCode;\n import org.apache.rocketmq.common.protocol.header.*;\n import org.apache.rocketmq.common.protocol.heartbeat.ConsumerData;\n@@ -297,4 +303,262 @@ public void validateGetAllTopicConfigTest() {\n         PlainAccessResource accessResource = (PlainAccessResource) plainAccessValidator.parse(RemotingCommand.decode(buf), whiteRemoteAddress);\n         plainAccessValidator.validate(accessResource);\n     }\n+\n+    @Test\n+    public void updateAccessAclYamlConfigNormalTest() {\n+        System.setProperty(\"rocketmq.home.dir\", \"src/test/resources\");\n+        System.setProperty(\"rocketmq.acl.plain.file\", \"/conf/plain_acl_update_create.yml\");\n+\n+        String targetFileName = \"src/test/resources/conf/plain_acl_update_create.yml\";\n+        Map<String, Object> backUpAclConfigMap = AclUtils.getYamlDataObject(targetFileName, Map.class);\n+\n+        PlainAccessConfig plainAccessConfig = new PlainAccessConfig();\n+        plainAccessConfig.setAccessKey(\"RocketMQ\");\n+        plainAccessConfig.setSecretKey(\"1234567890\");\n+        plainAccessConfig.setDefaultGroupPerm(\"PUB\");\n+        plainAccessConfig.setDefaultTopicPerm(\"SUB\");\n+        List<String> topicPerms = new ArrayList<String>();\n+        topicPerms.add(\"topicC=PUB|SUB\");\n+        topicPerms.add(\"topicB=PUB\");\n+        plainAccessConfig.setTopicPerms(topicPerms);\n+        List<String> groupPerms = new ArrayList<String>();\n+        groupPerms.add(\"groupB=PUB|SUB\");\n+        groupPerms.add(\"groupC=DENY\");\n+        plainAccessConfig.setGroupPerms(groupPerms);\n+\n+        PlainAccessValidator plainAccessValidator = new PlainAccessValidator();\n+        // Update acl access yaml config file\n+        plainAccessValidator.updateAccessConfig(plainAccessConfig);\n+\n+        Map<String, Object> readableMap = AclUtils.getYamlDataObject(targetFileName, Map.class);\n+        List<Map<String, Object>> accounts =  (List<Map<String, Object>>)readableMap.get(\"accounts\");\n+        Map<String, Object> verifyMap = null;\n+        for (Map<String, Object> account : accounts) {\n+            if (account.get(\"accessKey\").equals(plainAccessConfig.getAccessKey())) {\n+                verifyMap = account;\n+                break;\n+            }\n+        }\n+\n+        Assert.assertEquals(verifyMap.get(AclConstants.CONFIG_SECRET_KEY),\"1234567890\");\n+        Assert.assertEquals(verifyMap.get(AclConstants.CONFIG_DEFAULT_TOPIC_PERM),\"SUB\");\n+        Assert.assertEquals(verifyMap.get(AclConstants.CONFIG_DEFAULT_GROUP_PERM),\"PUB\");\n+        Assert.assertEquals(verifyMap.get(AclConstants.CONFIG_ADMIN_ROLE),false);\n+        Assert.assertEquals(verifyMap.get(AclConstants.CONFIG_WHITE_ADDR),\"192.168.0.*\");\n+        Assert.assertEquals(((List)verifyMap.get(AclConstants.CONFIG_TOPIC_PERMS)).size(),2);\n+        Assert.assertEquals(((List)verifyMap.get(AclConstants.CONFIG_GROUP_PERMS)).size(),2);\n+\n+        // Verify the dateversion element is correct or not\n+        List<Map<String, Object>> dataVersions = (List<Map<String, Object>>) readableMap.get(\"dataVersion\");\n+        Assert.assertEquals(1,dataVersions.get(0).get(\"counter\"));\n+\n+        // Restore the backup file and flush to yaml file\n+        AclUtils.writeDataObject(targetFileName, backUpAclConfigMap);\n+    }\n+\n+    @Test\n+    public void updateAccessAclYamlConfigTest() {\n+        System.setProperty(\"rocketmq.home.dir\", \"src/test/resources\");\n+        System.setProperty(\"rocketmq.acl.plain.file\", \"/conf/plain_acl_update_create.yml\");\n+\n+        String targetFileName = \"src/test/resources/conf/plain_acl_update_create.yml\";\n+        Map<String, Object> backUpAclConfigMap = AclUtils.getYamlDataObject(targetFileName, Map.class);\n+\n+        PlainAccessConfig plainAccessConfig = new PlainAccessConfig();\n+        plainAccessConfig.setAccessKey(\"RocketMQ\");\n+        plainAccessConfig.setSecretKey(\"123456789111\");\n+\n+        PlainAccessValidator plainAccessValidator = new PlainAccessValidator();\n+        // Update element in the acl access yaml config file\n+        plainAccessValidator.updateAccessConfig(plainAccessConfig);\n+\n+        Map<String, Object> readableMap = AclUtils.getYamlDataObject(targetFileName, Map.class);\n+        List<Map<String, Object>> accounts =  (List<Map<String, Object>>)readableMap.get(AclConstants.CONFIG_ACCOUNTS);\n+        Map<String, Object> verifyMap = null;\n+        for (Map<String, Object> account : accounts) {\n+            if (account.get(AclConstants.CONFIG_ACCESS_KEY).equals(plainAccessConfig.getAccessKey())) {\n+                verifyMap = account;\n+                break;\n+            }\n+        }\n+        Assert.assertEquals(verifyMap.get(AclConstants.CONFIG_SECRET_KEY),\"123456789111\");\n+\n+        // Restore the backup file and flush to yaml file\n+        AclUtils.writeDataObject(targetFileName, backUpAclConfigMap);\n+    }\n+\n+\n+    @Test\n+    public void createAndUpdateAccessAclYamlConfigNormalTest() {\n+        System.setProperty(\"rocketmq.home.dir\", \"src/test/resources\");\n+        System.setProperty(\"rocketmq.acl.plain.file\", \"/conf/plain_acl_update_create.yml\");\n+\n+        String targetFileName = \"src/test/resources/conf/plain_acl_update_create.yml\";\n+        Map<String, Object> backUpAclConfigMap = AclUtils.getYamlDataObject(targetFileName, Map.class);\n+\n+        PlainAccessConfig plainAccessConfig = new PlainAccessConfig();\n+        plainAccessConfig.setAccessKey(\"RocketMQ33\");\n+        plainAccessConfig.setSecretKey(\"123456789111\");\n+        plainAccessConfig.setDefaultGroupPerm(\"PUB\");\n+        plainAccessConfig.setDefaultTopicPerm(\"DENY\");\n+        List<String> topicPerms = new ArrayList<String>();\n+        topicPerms.add(\"topicC=PUB|SUB\");\n+        topicPerms.add(\"topicB=PUB\");\n+        plainAccessConfig.setTopicPerms(topicPerms);\n+        List<String> groupPerms = new ArrayList<String>();\n+        groupPerms.add(\"groupB=PUB|SUB\");\n+        groupPerms.add(\"groupC=DENY\");\n+        plainAccessConfig.setGroupPerms(groupPerms);\n+\n+        PlainAccessValidator plainAccessValidator = new PlainAccessValidator();\n+        // Create element in the acl access yaml config file\n+        plainAccessValidator.updateAccessConfig(plainAccessConfig);\n+\n+        Map<String, Object> readableMap = AclUtils.getYamlDataObject(targetFileName, Map.class);\n+        List<Map<String, Object>> accounts =  (List<Map<String, Object>>)readableMap.get(AclConstants.CONFIG_ACCOUNTS);\n+        Map<String, Object> verifyMap = null;\n+        for (Map<String, Object> account : accounts) {\n+            if (account.get(AclConstants.CONFIG_ACCESS_KEY).equals(plainAccessConfig.getAccessKey())) {\n+                verifyMap = account;\n+                break;\n+            }\n+        }\n+        Assert.assertEquals(verifyMap.get(AclConstants.CONFIG_SECRET_KEY),\"123456789111\");\n+        Assert.assertEquals(verifyMap.get(AclConstants.CONFIG_DEFAULT_TOPIC_PERM),\"DENY\");\n+        Assert.assertEquals(verifyMap.get(AclConstants.CONFIG_DEFAULT_GROUP_PERM),\"PUB\");\n+        Assert.assertEquals(((List)verifyMap.get(AclConstants.CONFIG_TOPIC_PERMS)).size(),2);\n+        Assert.assertEquals(((List)verifyMap.get(AclConstants.CONFIG_GROUP_PERMS)).size(),2);\n+        Assert.assertTrue(((List)verifyMap.get(AclConstants.CONFIG_TOPIC_PERMS)).contains(\"topicC=PUB|SUB\"));\n+        Assert.assertTrue(((List)verifyMap.get(AclConstants.CONFIG_TOPIC_PERMS)).contains(\"topicB=PUB\"));\n+        Assert.assertTrue(((List)verifyMap.get(AclConstants.CONFIG_GROUP_PERMS)).contains(\"groupB=PUB|SUB\"));\n+        Assert.assertTrue(((List)verifyMap.get(AclConstants.CONFIG_GROUP_PERMS)).contains(\"groupC=DENY\"));\n+\n+        // Verify the dateversion element is correct or not\n+        List<Map<String, Object>> dataVersions = (List<Map<String, Object>>) readableMap.get(AclConstants.CONFIG_DATA_VERSION);\n+        Assert.assertEquals(1,dataVersions.get(0).get(AclConstants.CONFIG_COUNTER));\n+\n+        // Update element in the acl config yaml file\n+        PlainAccessConfig plainAccessConfig2 = new PlainAccessConfig();\n+        plainAccessConfig2.setAccessKey(\"rocketmq2\");\n+        plainAccessConfig2.setSecretKey(\"1234567890123\");\n+\n+        // Update acl access yaml config file secondly\n+        plainAccessValidator.updateAccessConfig(plainAccessConfig2);\n+\n+        Map<String, Object> readableMap2 = AclUtils.getYamlDataObject(targetFileName, Map.class);\n+        List<Map<String, Object>> accounts2 =  (List<Map<String, Object>>)readableMap2.get(AclConstants.CONFIG_ACCOUNTS);\n+        Map<String, Object> verifyMap2 = null;\n+        for (Map<String, Object> account : accounts2) {\n+            if (account.get(AclConstants.CONFIG_ACCESS_KEY).equals(plainAccessConfig2.getAccessKey())) {\n+                verifyMap2 = account;\n+                break;\n+            }\n+        }\n+\n+        // Verify the dateversion element after updating is correct or not\n+        List<Map<String, Object>> dataVersions2 = (List<Map<String, Object>>) readableMap2.get(AclConstants.CONFIG_DATA_VERSION);\n+        Assert.assertEquals(2,dataVersions2.get(0).get(AclConstants.CONFIG_COUNTER));\n+        Assert.assertEquals(verifyMap2.get(AclConstants.CONFIG_SECRET_KEY),\"1234567890123\");\n+\n+\n+        // Restore the backup file and flush to yaml file\n+        AclUtils.writeDataObject(targetFileName, backUpAclConfigMap);\n+    }\n+\n+    @Test(expected = AclException.class)\n+    public void updateAccessAclYamlConfigExceptionTest() {\n+        System.setProperty(\"rocketmq.home.dir\", \"src/test/resources\");\n+        System.setProperty(\"rocketmq.acl.plain.file\", \"/conf/plain_acl_update_create.yml\");\n+\n+        PlainAccessConfig plainAccessConfig = new PlainAccessConfig();\n+        plainAccessConfig.setAccessKey(\"RocketMQ\");\n+        plainAccessConfig.setSecretKey(\"12345\");\n+\n+        PlainAccessValidator plainAccessValidator = new PlainAccessValidator();\n+        // Update acl access yaml config file\n+        plainAccessValidator.updateAccessConfig(plainAccessConfig);\n+    }\n+\n+    @Test\n+    public void deleteAccessAclYamlConfigNormalTest() {\n+        System.setProperty(\"rocketmq.home.dir\", \"src/test/resources\");\n+        System.setProperty(\"rocketmq.acl.plain.file\", \"/conf/plain_acl_delete.yml\");\n+\n+        String targetFileName = \"src/test/resources/conf/plain_acl_delete.yml\";\n+        Map<String, Object> backUpAclConfigMap = AclUtils.getYamlDataObject(targetFileName, Map.class);\n+\n+\n+        String accessKey = \"rocketmq2\";\n+        PlainAccessValidator plainAccessValidator = new PlainAccessValidator();\n+        plainAccessValidator.deleteAccessConfig(accessKey);\n+\n+        Map<String, Object> readableMap = AclUtils.getYamlDataObject(targetFileName, Map.class);\n+        List<Map<String, Object>> accounts =  (List<Map<String, Object>>)readableMap.get(AclConstants.CONFIG_ACCOUNTS);\n+        Map<String, Object> verifyMap = null;\n+        for (Map<String, Object> account : accounts) {\n+            if (account.get(AclConstants.CONFIG_ACCESS_KEY).equals(accessKey)) {\n+                verifyMap = account;\n+                break;\n+            }\n+        }\n+\n+        // Verify the specified element is removed or not\n+        Assert.assertEquals(verifyMap,null);\n+        // Verify the dateversion element is correct or not\n+        List<Map<String, Object>> dataVersions = (List<Map<String, Object>>) readableMap.get(AclConstants.CONFIG_DATA_VERSION);\n+        Assert.assertEquals(1,dataVersions.get(0).get(AclConstants.CONFIG_COUNTER));\n+        \n+        // Restore the backup file and flush to yaml file\n+        AclUtils.writeDataObject(targetFileName, backUpAclConfigMap);\n+    }\n+\n+    @Test\n+    public void updateAccessAclYamlConfigWithNoAccoutsExceptionTest() {\n+        System.setProperty(\"rocketmq.home.dir\", \"src/test/resources\");\n+        System.setProperty(\"rocketmq.acl.plain.file\", \"/conf/plain_acl_with_no_accouts.yml\");\n+\n+        String targetFileName = \"src/test/resources/conf/plain_acl_with_no_accouts.yml\";\n+        Map<String, Object> backUpAclConfigMap = AclUtils.getYamlDataObject(targetFileName, Map.class);\n+\n+        PlainAccessConfig plainAccessConfig = new PlainAccessConfig();\n+        plainAccessConfig.setAccessKey(\"RocketMQ\");\n+        plainAccessConfig.setSecretKey(\"1234567890\");\n+\n+        PlainAccessValidator plainAccessValidator = new PlainAccessValidator();\n+        // Update acl access yaml config file and verify the return value is true\n+        Assert.assertEquals(plainAccessValidator.updateAccessConfig(plainAccessConfig), false);\n+    }\n+\n+    @Test\n+    public void updateGlobalWhiteAddrsNormalTest() {\n+        System.setProperty(\"rocketmq.home.dir\", \"src/test/resources\");\n+        System.setProperty(\"rocketmq.acl.plain.file\", \"/conf/plain_acl_global_white_addrs.yml\");\n+\n+        String targetFileName = \"src/test/resources/conf/plain_acl_global_white_addrs.yml\";\n+        Map<String, Object> backUpAclConfigMap = AclUtils.getYamlDataObject(targetFileName, Map.class);\n+\n+        PlainAccessValidator plainAccessValidator = new PlainAccessValidator();\n+        // Update global white remote addr value list in the acl access yaml config file\n+\n+        List<String> globalWhiteAddrsList = new ArrayList<String>();\n+        globalWhiteAddrsList.add(\"10.10.154.1\");\n+        globalWhiteAddrsList.add(\"10.10.154.2\");\n+        globalWhiteAddrsList.add(\"10.10.154.3\");\n+        plainAccessValidator.updateGlobalWhiteAddrsConfig(globalWhiteAddrsList);\n+\n+        Map<String, Object> readableMap = AclUtils.getYamlDataObject(targetFileName, Map.class);\n+\n+        List<String> globalWhiteAddrList =  (List<String>)readableMap.get(AclConstants.CONFIG_GLOBAL_WHITE_ADDRS);\n+        Assert.assertTrue(globalWhiteAddrList.contains(\"10.10.154.1\"));\n+        Assert.assertTrue(globalWhiteAddrList.contains(\"10.10.154.2\"));\n+        Assert.assertTrue(globalWhiteAddrList.contains(\"10.10.154.3\"));\n+\n+        // Verify the dateversion element is correct or not\n+        List<Map<String, Object>> dataVersions = (List<Map<String, Object>>) readableMap.get(AclConstants.CONFIG_DATA_VERSION);\n+        Assert.assertEquals(1,dataVersions.get(0).get(AclConstants.CONFIG_COUNTER));\n+\n+        // Restore the backup file and flush to yaml file\n+        AclUtils.writeDataObject(targetFileName, backUpAclConfigMap);\n+    }\n+\n }", "filename": "acl/src/test/java/org/apache/rocketmq/acl/plain/PlainAccessValidatorTest.java"}, {"additions": 49, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/acl/src/test/java/org/apache/rocketmq/acl/plain/PlainPermissionManagerTest.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/acl/src/test/java/org/apache/rocketmq/acl/plain/PlainPermissionManagerTest.java", "previous_filename": "acl/src/test/java/org/apache/rocketmq/acl/plain/PlainPermissionLoaderTest.java", "sha": "d5ffb0c1d156226a7652bd4b08f4c1ae0e2cb07e", "changes": 93, "status": "renamed", "deletions": 44, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/acl/src/test/java/org/apache/rocketmq/acl/plain/PlainPermissionManagerTest.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -26,32 +26,31 @@\n import java.util.Set;\n import org.apache.commons.lang3.reflect.FieldUtils;\n import org.apache.rocketmq.acl.common.AclException;\n+import org.apache.rocketmq.acl.common.AclUtils;\n import org.apache.rocketmq.acl.common.Permission;\n-import org.apache.rocketmq.acl.plain.PlainPermissionLoader.PlainAccessConfig;\n-import org.apache.rocketmq.common.UtilAll;\n+import org.apache.rocketmq.common.PlainAccessConfig;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n \n-public class PlainPermissionLoaderTest {\n+public class PlainPermissionManagerTest {\n \n-    PlainPermissionLoader plainPermissionLoader;\n+    PlainPermissionManager plainPermissionManager;\n     PlainAccessResource PUBPlainAccessResource;\n     PlainAccessResource SUBPlainAccessResource;\n     PlainAccessResource ANYPlainAccessResource;\n     PlainAccessResource DENYPlainAccessResource;\n     PlainAccessResource plainAccessResource = new PlainAccessResource();\n     PlainAccessConfig plainAccessConfig = new PlainAccessConfig();\n-    PlainAccessResource plainAccessResourceTwo = new PlainAccessResource();\n     Set<Integer> adminCode = new HashSet<>();\n \n     @Before\n     public void init() throws NoSuchFieldException, SecurityException, IOException {\n-        //  UPDATE_AND_CREATE_TOPIC\n+        // UPDATE_AND_CREATE_TOPIC\n         adminCode.add(17);\n-        //  UPDATE_BROKER_CONFIG\n+        // UPDATE_BROKER_CONFIG\n         adminCode.add(25);\n-        //  DELETE_TOPIC_IN_BROKER\n+        // DELETE_TOPIC_IN_BROKER\n         adminCode.add(215);\n         // UPDATE_AND_CREATE_SUBSCRIPTIONGROUP\n         adminCode.add(200);\n@@ -65,7 +64,8 @@ public void init() throws NoSuchFieldException, SecurityException, IOException {\n \n         System.setProperty(\"rocketmq.home.dir\", \"src/test/resources\");\n         System.setProperty(\"rocketmq.acl.plain.file\", \"/conf/plain_acl.yml\");\n-        plainPermissionLoader = new PlainPermissionLoader();\n+        \n+        plainPermissionManager = new PlainPermissionManager();\n \n     }\n \n@@ -95,24 +95,24 @@ public void buildPlainAccessResourceTest() {\n \n         plainAccess.setAccessKey(\"RocketMQ\");\n         plainAccess.setSecretKey(\"12345678\");\n-        plainAccessResource = plainPermissionLoader.buildPlainAccessResource(plainAccess);\n+        plainAccessResource = plainPermissionManager.buildPlainAccessResource(plainAccess);\n         Assert.assertEquals(plainAccessResource.getAccessKey(), \"RocketMQ\");\n         Assert.assertEquals(plainAccessResource.getSecretKey(), \"12345678\");\n \n         plainAccess.setWhiteRemoteAddress(\"127.0.0.1\");\n-        plainAccessResource = plainPermissionLoader.buildPlainAccessResource(plainAccess);\n+        plainAccessResource = plainPermissionManager.buildPlainAccessResource(plainAccess);\n         Assert.assertEquals(plainAccessResource.getWhiteRemoteAddress(), \"127.0.0.1\");\n \n         plainAccess.setAdmin(true);\n-        plainAccessResource = plainPermissionLoader.buildPlainAccessResource(plainAccess);\n+        plainAccessResource = plainPermissionManager.buildPlainAccessResource(plainAccess);\n         Assert.assertEquals(plainAccessResource.isAdmin(), true);\n \n         List<String> groups = new ArrayList<String>();\n         groups.add(\"groupA=DENY\");\n         groups.add(\"groupB=PUB|SUB\");\n         groups.add(\"groupC=PUB\");\n         plainAccess.setGroupPerms(groups);\n-        plainAccessResource = plainPermissionLoader.buildPlainAccessResource(plainAccess);\n+        plainAccessResource = plainPermissionManager.buildPlainAccessResource(plainAccess);\n         Map<String, Byte> resourcePermMap = plainAccessResource.getResourcePermMap();\n         Assert.assertEquals(resourcePermMap.size(), 3);\n \n@@ -125,7 +125,7 @@ public void buildPlainAccessResourceTest() {\n         topics.add(\"topicB=PUB|SUB\");\n         topics.add(\"topicC=PUB\");\n         plainAccess.setTopicPerms(topics);\n-        plainAccessResource = plainPermissionLoader.buildPlainAccessResource(plainAccess);\n+        plainAccessResource = plainPermissionManager.buildPlainAccessResource(plainAccess);\n         resourcePermMap = plainAccessResource.getResourcePermMap();\n         Assert.assertEquals(resourcePermMap.size(), 6);\n \n@@ -138,79 +138,82 @@ public void buildPlainAccessResourceTest() {\n     public void checkPermAdmin() {\n         PlainAccessResource plainAccessResource = new PlainAccessResource();\n         plainAccessResource.setRequestCode(17);\n-        plainPermissionLoader.checkPerm(plainAccessResource, PUBPlainAccessResource);\n+        plainPermissionManager.checkPerm(plainAccessResource, PUBPlainAccessResource);\n     }\n \n     @Test\n     public void checkPerm() {\n \n         PlainAccessResource plainAccessResource = new PlainAccessResource();\n         plainAccessResource.addResourceAndPerm(\"topicA\", Permission.PUB);\n-        plainPermissionLoader.checkPerm(plainAccessResource, PUBPlainAccessResource);\n+        plainPermissionManager.checkPerm(plainAccessResource, PUBPlainAccessResource);\n         plainAccessResource.addResourceAndPerm(\"topicB\", Permission.SUB);\n-        plainPermissionLoader.checkPerm(plainAccessResource, ANYPlainAccessResource);\n+        plainPermissionManager.checkPerm(plainAccessResource, ANYPlainAccessResource);\n \n         plainAccessResource = new PlainAccessResource();\n         plainAccessResource.addResourceAndPerm(\"topicB\", Permission.SUB);\n-        plainPermissionLoader.checkPerm(plainAccessResource, SUBPlainAccessResource);\n+        plainPermissionManager.checkPerm(plainAccessResource, SUBPlainAccessResource);\n         plainAccessResource.addResourceAndPerm(\"topicA\", Permission.PUB);\n-        plainPermissionLoader.checkPerm(plainAccessResource, ANYPlainAccessResource);\n+        plainPermissionManager.checkPerm(plainAccessResource, ANYPlainAccessResource);\n \n     }\n     @Test(expected = AclException.class)\n     public void checkErrorPermDefaultValueNotMatch() {\n \n         plainAccessResource = new PlainAccessResource();\n         plainAccessResource.addResourceAndPerm(\"topicF\", Permission.PUB);\n-        plainPermissionLoader.checkPerm(plainAccessResource, SUBPlainAccessResource);\n+        plainPermissionManager.checkPerm(plainAccessResource, SUBPlainAccessResource);\n     }\n     @Test(expected = AclException.class)\n     public void accountNullTest() {\n         plainAccessConfig.setAccessKey(null);\n-        plainPermissionLoader.buildPlainAccessResource(plainAccessConfig);\n+        plainPermissionManager.buildPlainAccessResource(plainAccessConfig);\n     }\n \n     @Test(expected = AclException.class)\n     public void accountThanTest() {\n         plainAccessConfig.setAccessKey(\"123\");\n-        plainPermissionLoader.buildPlainAccessResource(plainAccessConfig);\n+        plainPermissionManager.buildPlainAccessResource(plainAccessConfig);\n     }\n \n     @Test(expected = AclException.class)\n     public void passWordtNullTest() {\n         plainAccessConfig.setAccessKey(null);\n-        plainPermissionLoader.buildPlainAccessResource(plainAccessConfig);\n+        plainPermissionManager.buildPlainAccessResource(plainAccessConfig);\n     }\n \n     @Test(expected = AclException.class)\n     public void passWordThanTest() {\n         plainAccessConfig.setAccessKey(\"123\");\n-        plainPermissionLoader.buildPlainAccessResource(plainAccessConfig);\n+        plainPermissionManager.buildPlainAccessResource(plainAccessConfig);\n     }\n \n     @Test(expected = AclException.class)\n     public void testPlainAclPlugEngineInit() {\n         System.setProperty(\"rocketmq.home.dir\", \"\");\n-        new PlainPermissionLoader().load();\n+        new PlainPermissionManager().load();\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     @Test\n     public void cleanAuthenticationInfoTest() throws IllegalAccessException {\n-        //plainPermissionLoader.addPlainAccessResource(plainAccessResource);\n-        Map<String, List<PlainAccessResource>> plainAccessResourceMap = (Map<String, List<PlainAccessResource>>) FieldUtils.readDeclaredField(plainPermissionLoader, \"plainAccessResourceMap\", true);\n+        // PlainPermissionManager.addPlainAccessResource(plainAccessResource);\n+        Map<String, List<PlainAccessResource>> plainAccessResourceMap = (Map<String, List<PlainAccessResource>>) FieldUtils.readDeclaredField(plainPermissionManager, \"plainAccessResourceMap\", true);\n         Assert.assertFalse(plainAccessResourceMap.isEmpty());\n \n-        plainPermissionLoader.clearPermissionInfo();\n-        plainAccessResourceMap = (Map<String, List<PlainAccessResource>>) FieldUtils.readDeclaredField(plainPermissionLoader, \"plainAccessResourceMap\", true);\n+        plainPermissionManager.clearPermissionInfo();\n+        plainAccessResourceMap = (Map<String, List<PlainAccessResource>>) FieldUtils.readDeclaredField(plainPermissionManager, \"plainAccessResourceMap\", true);\n         Assert.assertTrue(plainAccessResourceMap.isEmpty());\n+        // RemoveDataVersionFromYamlFile(\"src/test/resources/conf/plain_acl.yml\");\n     }\n \n     @Test\n     public void isWatchStartTest() {\n \n-        PlainPermissionLoader plainPermissionLoader = new PlainPermissionLoader();\n-        Assert.assertTrue(plainPermissionLoader.isWatchStart());\n+        PlainPermissionManager plainPermissionManager = new PlainPermissionManager();\n+        Assert.assertTrue(plainPermissionManager.isWatchStart());\n+        // RemoveDataVersionFromYamlFile(\"src/test/resources/conf/plain_acl.yml\");\n+\n     }\n \n \n@@ -231,29 +234,32 @@ public void testWatch() throws IOException, IllegalAccessException ,InterruptedE\n         writer.flush();\n         writer.close();\n \n-        PlainPermissionLoader plainPermissionLoader = new PlainPermissionLoader();\n-        Assert.assertTrue(plainPermissionLoader.isWatchStart());\n+\n+        PlainPermissionManager plainPermissionManager = new PlainPermissionManager();\n+        Assert.assertTrue(plainPermissionManager.isWatchStart());\n \n         {\n-            Map<String, PlainAccessResource> plainAccessResourceMap = (Map<String, PlainAccessResource>) FieldUtils.readDeclaredField(plainPermissionLoader, \"plainAccessResourceMap\", true);\n+            Map<String, PlainAccessResource> plainAccessResourceMap = (Map<String, PlainAccessResource>) FieldUtils.readDeclaredField(plainPermissionManager, \"plainAccessResourceMap\", true);\n             PlainAccessResource accessResource = plainAccessResourceMap.get(\"watchrocketmq\");\n             Assert.assertNotNull(accessResource);\n             Assert.assertEquals(accessResource.getSecretKey(), \"12345678\");\n             Assert.assertTrue(accessResource.isAdmin());\n \n         }\n \n-        writer = new FileWriter(new File(fileName), true);\n-        writer.write(\"- accessKey: watchrocketmq1\\r\\n\");\n-        writer.write(\"  secretKey: 88888888\\r\\n\");\n-        writer.write(\"  whiteRemoteAddress: 127.0.0.1\\r\\n\");\n-        writer.write(\"  admin: false\\r\\n\");\n-        writer.flush();\n-        writer.close();\n+        Map<String, Object> updatedMap = AclUtils.getYamlDataObject(fileName, Map.class);\n+        List<Map<String, Object>> accounts = (List<Map<String, Object>>) updatedMap.get(\"accounts\");\n+        accounts.get(0).remove(\"accessKey\");\n+        accounts.get(0).remove(\"secretKey\");\n+        accounts.get(0).put(\"accessKey\", \"watchrocketmq1\");\n+        accounts.get(0).put(\"secretKey\", \"88888888\");\n+        accounts.get(0).put(\"admin\", \"false\");\n+        // Update file and flush to yaml file\n+        AclUtils.writeDataObject(fileName, updatedMap);\n \n         Thread.sleep(1000);\n         {\n-            Map<String, PlainAccessResource> plainAccessResourceMap = (Map<String, PlainAccessResource>) FieldUtils.readDeclaredField(plainPermissionLoader, \"plainAccessResourceMap\", true);\n+            Map<String, PlainAccessResource> plainAccessResourceMap = (Map<String, PlainAccessResource>) FieldUtils.readDeclaredField(plainPermissionManager, \"plainAccessResourceMap\", true);\n             PlainAccessResource accessResource = plainAccessResourceMap.get(\"watchrocketmq1\");\n             Assert.assertNotNull(accessResource);\n             Assert.assertEquals(accessResource.getSecretKey(), \"88888888\");\n@@ -268,8 +274,7 @@ public void testWatch() throws IOException, IllegalAccessException ,InterruptedE\n     @Test(expected = AclException.class)\n     public void initializeTest() {\n         System.setProperty(\"rocketmq.acl.plain.file\", \"/conf/plain_acl_null.yml\");\n-        new PlainPermissionLoader();\n+        new PlainPermissionManager();\n \n     }\n-\n }", "filename": "acl/src/test/java/org/apache/rocketmq/acl/plain/PlainPermissionManagerTest.java"}, {"additions": 22, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/acl/src/test/resources/conf/plain_acl_correct.yml", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/acl/src/test/resources/conf/plain_acl_correct.yml", "sha": "40d66d9d2f7b6554035fd9c0bf0b68b33de25127", "changes": 22, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/acl/src/test/resources/conf/plain_acl_correct.yml?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -0,0 +1,22 @@\n+globalWhiteRemoteAddresses:\n+- 10.10.103.*\n+- 192.168.0.*\n+accounts:\n+- accessKey: RocketMQ\n+  secretKey: 12345678\n+  whiteRemoteAddress: 192.168.0.*\n+  admin: false\n+  defaultTopicPerm: DENY\n+  defaultGroupPerm: SUB\n+  topicPerms:\n+  - topicA=DENY\n+  - topicB=PUB|SUB\n+  - topicC=SUB\n+  groupPerms:\n+  - groupA=DENY\n+  - groupB=SUB\n+  - groupC=SUB\n+- accessKey: rocketmq2\n+  secretKey: 12345678\n+  whiteRemoteAddress: 192.168.1.*\n+  admin: true", "filename": "acl/src/test/resources/conf/plain_acl_correct.yml"}, {"additions": 22, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/acl/src/test/resources/conf/plain_acl_delete.yml", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/acl/src/test/resources/conf/plain_acl_delete.yml", "sha": "40d66d9d2f7b6554035fd9c0bf0b68b33de25127", "changes": 22, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/acl/src/test/resources/conf/plain_acl_delete.yml?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -0,0 +1,22 @@\n+globalWhiteRemoteAddresses:\n+- 10.10.103.*\n+- 192.168.0.*\n+accounts:\n+- accessKey: RocketMQ\n+  secretKey: 12345678\n+  whiteRemoteAddress: 192.168.0.*\n+  admin: false\n+  defaultTopicPerm: DENY\n+  defaultGroupPerm: SUB\n+  topicPerms:\n+  - topicA=DENY\n+  - topicB=PUB|SUB\n+  - topicC=SUB\n+  groupPerms:\n+  - groupA=DENY\n+  - groupB=SUB\n+  - groupC=SUB\n+- accessKey: rocketmq2\n+  secretKey: 12345678\n+  whiteRemoteAddress: 192.168.1.*\n+  admin: true", "filename": "acl/src/test/resources/conf/plain_acl_delete.yml"}, {"additions": 22, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/acl/src/test/resources/conf/plain_acl_global_white_addrs.yml", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/acl/src/test/resources/conf/plain_acl_global_white_addrs.yml", "sha": "40d66d9d2f7b6554035fd9c0bf0b68b33de25127", "changes": 22, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/acl/src/test/resources/conf/plain_acl_global_white_addrs.yml?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -0,0 +1,22 @@\n+globalWhiteRemoteAddresses:\n+- 10.10.103.*\n+- 192.168.0.*\n+accounts:\n+- accessKey: RocketMQ\n+  secretKey: 12345678\n+  whiteRemoteAddress: 192.168.0.*\n+  admin: false\n+  defaultTopicPerm: DENY\n+  defaultGroupPerm: SUB\n+  topicPerms:\n+  - topicA=DENY\n+  - topicB=PUB|SUB\n+  - topicC=SUB\n+  groupPerms:\n+  - groupA=DENY\n+  - groupB=SUB\n+  - groupC=SUB\n+- accessKey: rocketmq2\n+  secretKey: 12345678\n+  whiteRemoteAddress: 192.168.1.*\n+  admin: true", "filename": "acl/src/test/resources/conf/plain_acl_global_white_addrs.yml"}, {"additions": 22, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/acl/src/test/resources/conf/plain_acl_update_create.yml", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/acl/src/test/resources/conf/plain_acl_update_create.yml", "sha": "40d66d9d2f7b6554035fd9c0bf0b68b33de25127", "changes": 22, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/acl/src/test/resources/conf/plain_acl_update_create.yml?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -0,0 +1,22 @@\n+globalWhiteRemoteAddresses:\n+- 10.10.103.*\n+- 192.168.0.*\n+accounts:\n+- accessKey: RocketMQ\n+  secretKey: 12345678\n+  whiteRemoteAddress: 192.168.0.*\n+  admin: false\n+  defaultTopicPerm: DENY\n+  defaultGroupPerm: SUB\n+  topicPerms:\n+  - topicA=DENY\n+  - topicB=PUB|SUB\n+  - topicC=SUB\n+  groupPerms:\n+  - groupA=DENY\n+  - groupB=SUB\n+  - groupC=SUB\n+- accessKey: rocketmq2\n+  secretKey: 12345678\n+  whiteRemoteAddress: 192.168.1.*\n+  admin: true", "filename": "acl/src/test/resources/conf/plain_acl_update_create.yml"}, {"additions": 3, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/acl/src/test/resources/conf/plain_acl_with_no_accouts.yml", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/acl/src/test/resources/conf/plain_acl_with_no_accouts.yml", "sha": "08274b1d8c430ea9588dccc415aea86a4e0c1cf6", "changes": 3, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/acl/src/test/resources/conf/plain_acl_with_no_accouts.yml?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -0,0 +1,3 @@\n+globalWhiteRemoteAddresses:\n+- 10.10.103.*\n+- 192.168.0.*\n\\ No newline at end of file", "filename": "acl/src/test/resources/conf/plain_acl_with_no_accouts.yml"}, {"additions": 6, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java", "sha": "56e3fe4b0d596c69875c726668393b3af727cc05", "changes": 8, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -19,6 +19,7 @@\n import java.io.IOException;\n import java.net.InetSocketAddress;\n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n@@ -162,7 +163,7 @@\n     private TransactionalMessageService transactionalMessageService;\n     private AbstractTransactionalMessageCheckListener transactionalMessageCheckListener;\n     private Future<?> slaveSyncFuture;\n-\n+    private Map<Class,AccessValidator> accessValidatorMap = new HashMap<Class, AccessValidator>();\n \n     public BrokerController(\n         final BrokerConfig brokerConfig,\n@@ -502,6 +503,7 @@ private void initialAcl() {\n \n         for (AccessValidator accessValidator: accessValidators) {\n             final AccessValidator validator = accessValidator;\n+            accessValidatorMap.put(validator.getClass(),validator);\n             this.registerServerRPCHook(new RPCHook() {\n \n                 @Override\n@@ -1101,7 +1103,9 @@ public void setTransactionalMessageCheckListener(\n \n     }\n \n-\n+    public Map<Class, AccessValidator> getAccessValidatorMap() {\n+        return accessValidatorMap;\n+    }\n \n     private void handleSlaveSynchronize(BrokerRole role) {\n         if (role == BrokerRole.SLAVE) {", "filename": "broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java"}, {"additions": 149, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java", "sha": "f23cca62d9e7b093a281b8b63728bfa5183bd706", "changes": 149, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -30,20 +30,27 @@\n import java.util.Properties;\n import java.util.Set;\n import java.util.concurrent.ConcurrentMap;\n+import org.apache.rocketmq.acl.AccessValidator;\n+import org.apache.rocketmq.acl.plain.PlainAccessValidator;\n import org.apache.rocketmq.broker.BrokerController;\n import org.apache.rocketmq.broker.client.ClientChannelInfo;\n import org.apache.rocketmq.broker.client.ConsumerGroupInfo;\n import org.apache.rocketmq.broker.filter.ConsumerFilterData;\n import org.apache.rocketmq.broker.filter.ExpressionMessageFilter;\n import org.apache.rocketmq.common.MQVersion;\n import org.apache.rocketmq.common.MixAll;\n+import org.apache.rocketmq.common.PlainAccessConfig;\n import org.apache.rocketmq.common.TopicConfig;\n import org.apache.rocketmq.common.UtilAll;\n import org.apache.rocketmq.common.admin.ConsumeStats;\n import org.apache.rocketmq.common.admin.OffsetWrapper;\n import org.apache.rocketmq.common.admin.TopicOffset;\n import org.apache.rocketmq.common.admin.TopicStatsTable;\n import org.apache.rocketmq.common.constant.LoggerName;\n+import org.apache.rocketmq.common.protocol.header.CreateAccessConfigRequestHeader;\n+import org.apache.rocketmq.common.protocol.header.DeleteAccessConfigRequestHeader;\n+import org.apache.rocketmq.common.protocol.header.GetBrokerAclConfigResponseHeader;\n+import org.apache.rocketmq.common.protocol.header.UpdateGlobalWhiteAddrsConfigRequestHeader;\n import org.apache.rocketmq.logging.InternalLogger;\n import org.apache.rocketmq.logging.InternalLoggerFactory;\n import org.apache.rocketmq.common.message.MessageDecoder;\n@@ -201,6 +208,14 @@ public RemotingCommand processRequest(ChannelHandlerContext ctx,\n                 return fetchAllConsumeStatsInBroker(ctx, request);\n             case RequestCode.QUERY_CONSUME_QUEUE:\n                 return queryConsumeQueue(ctx, request);\n+            case RequestCode.UPDATE_AND_CREATE_ACL_CONFIG:\n+                return updateAndCreateAccessConfig(ctx, request);\n+            case RequestCode.DELETE_ACL_CONFIG:\n+                return deleteAccessConfig(ctx, request);\n+            case RequestCode.GET_BROKER_CLUSTER_ACL_INFO:\n+                return getBrokerAclConfigVersion(ctx, request);\n+            case RequestCode.UPDATE_GLOBAL_WHITE_ADDRS_CONFIG:\n+                return updateGlobalWhiteAddrsConfig(ctx, request);\n             default:\n                 break;\n         }\n@@ -269,6 +284,140 @@ private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         return response;\n     }\n \n+    private synchronized RemotingCommand updateAndCreateAccessConfig(ChannelHandlerContext ctx,\n+        RemotingCommand request) throws RemotingCommandException {\n+        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+\n+        final CreateAccessConfigRequestHeader requestHeader =\n+            (CreateAccessConfigRequestHeader) request.decodeCommandCustomHeader(CreateAccessConfigRequestHeader.class);\n+\n+        PlainAccessConfig accessConfig = new PlainAccessConfig();\n+        accessConfig.setAccessKey(requestHeader.getAccessKey());\n+        accessConfig.setSecretKey(requestHeader.getSecretKey());\n+        accessConfig.setWhiteRemoteAddress(requestHeader.getWhiteRemoteAddress());\n+        accessConfig.setDefaultTopicPerm(requestHeader.getDefaultTopicPerm());\n+        accessConfig.setDefaultGroupPerm(requestHeader.getDefaultGroupPerm());\n+        accessConfig.setTopicPerms(UtilAll.String2List(requestHeader.getTopicPerms(),\",\"));\n+        accessConfig.setGroupPerms(UtilAll.String2List(requestHeader.getGroupPerms(),\",\"));\n+        accessConfig.setAdmin(requestHeader.isAdmin());\n+        try {\n+\n+            AccessValidator accessValidator = this.brokerController.getAccessValidatorMap().get(PlainAccessValidator.class);\n+            if (accessValidator.updateAccessConfig(accessConfig)) {\n+                response.setCode(ResponseCode.SUCCESS);\n+                response.setOpaque(request.getOpaque());\n+                response.markResponseType();\n+                response.setRemark(null);\n+                ctx.writeAndFlush(response);\n+            } else {\n+                String errorMsg = \"The accesskey[\" + requestHeader.getAccessKey() + \"] corresponding to accessConfig has been updated failed.\";\n+                log.warn(errorMsg);\n+                response.setCode(ResponseCode.UPDATE_AND_CREATE_ACL_CONFIG_FAILED);\n+                response.setRemark(errorMsg);\n+                return response;\n+            }\n+        } catch (Exception e) {\n+            log.error(\"Failed to generate a proper update accessvalidator response\", e);\n+            response.setCode(ResponseCode.UPDATE_AND_CREATE_ACL_CONFIG_FAILED);\n+            response.setRemark(e.getMessage());\n+            return response;\n+        }\n+\n+        return null;\n+    }\n+\n+    private synchronized RemotingCommand deleteAccessConfig(ChannelHandlerContext ctx,\n+        RemotingCommand request) throws RemotingCommandException {\n+        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+\n+        final DeleteAccessConfigRequestHeader requestHeader =\n+            (DeleteAccessConfigRequestHeader) request.decodeCommandCustomHeader(DeleteAccessConfigRequestHeader.class);\n+        log.info(\"DeleteAccessConfig called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+\n+        try {\n+            String accessKey = requestHeader.getAccessKey();\n+            AccessValidator accessValidator = this.brokerController.getAccessValidatorMap().get(PlainAccessValidator.class);\n+            if (accessValidator.deleteAccessConfig(accessKey)) {\n+                response.setCode(ResponseCode.SUCCESS);\n+                response.setOpaque(request.getOpaque());\n+                response.markResponseType();\n+                response.setRemark(null);\n+                ctx.writeAndFlush(response);\n+            } else {\n+                String errorMsg = \"The accesskey[\" + requestHeader.getAccessKey() + \"] corresponding to accessConfig has been deleted failed.\";\n+                log.warn(errorMsg);\n+                response.setCode(ResponseCode.DELETE_ACL_CONFIG_FAILED);\n+                response.setRemark(errorMsg);\n+                return response;\n+            }\n+\n+        } catch (Exception e) {\n+            log.error(\"Failed to generate a proper delete accessvalidator response\", e);\n+            response.setCode(ResponseCode.DELETE_ACL_CONFIG_FAILED);\n+            response.setRemark(e.getMessage());\n+            return response;\n+        }\n+\n+        return null;\n+    }\n+\n+    private synchronized RemotingCommand updateGlobalWhiteAddrsConfig(ChannelHandlerContext ctx,\n+        RemotingCommand request) throws RemotingCommandException {\n+\n+        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+\n+        final UpdateGlobalWhiteAddrsConfigRequestHeader requestHeader =\n+            (UpdateGlobalWhiteAddrsConfigRequestHeader) request.decodeCommandCustomHeader(UpdateGlobalWhiteAddrsConfigRequestHeader.class);\n+\n+        try {\n+            AccessValidator accessValidator = this.brokerController.getAccessValidatorMap().get(PlainAccessValidator.class);\n+            if (accessValidator.updateGlobalWhiteAddrsConfig(UtilAll.String2List(requestHeader.getGlobalWhiteAddrs(),\",\"))) {\n+                response.setCode(ResponseCode.SUCCESS);\n+                response.setOpaque(request.getOpaque());\n+                response.markResponseType();\n+                response.setRemark(null);\n+                ctx.writeAndFlush(response);\n+            } else {\n+                String errorMsg = \"The globalWhiteAddresses[\" + requestHeader.getGlobalWhiteAddrs() + \"] has been updated failed.\";\n+                log.warn(errorMsg);\n+                response.setCode(ResponseCode.UPDATE_GLOBAL_WHITE_ADDRS_CONFIG_FAILED);\n+                response.setRemark(errorMsg);\n+                return response;\n+            }\n+        } catch (Exception e) {\n+            log.error(\"Failed to generate a proper update globalWhiteAddresses response\", e);\n+            response.setCode(ResponseCode.UPDATE_GLOBAL_WHITE_ADDRS_CONFIG_FAILED);\n+            response.setRemark(e.getMessage());\n+            return response;\n+        }\n+\n+        return null;\n+    }\n+\n+    private RemotingCommand getBrokerAclConfigVersion(ChannelHandlerContext ctx, RemotingCommand request) {\n+\n+        final RemotingCommand response = RemotingCommand.createResponseCommand(GetBrokerAclConfigResponseHeader.class);\n+\n+        final GetBrokerAclConfigResponseHeader responseHeader = (GetBrokerAclConfigResponseHeader)response.readCustomHeader();\n+\n+        try {\n+            AccessValidator accessValidator = this.brokerController.getAccessValidatorMap().get(PlainAccessValidator.class);\n+\n+            responseHeader.setVersion(accessValidator.getAclConfigVersion());\n+            responseHeader.setBrokerAddr(this.brokerController.getBrokerAddr());\n+            responseHeader.setBrokerName(this.brokerController.getBrokerConfig().getBrokerName());\n+            responseHeader.setClusterName(this.brokerController.getBrokerConfig().getBrokerClusterName());\n+            \n+            response.setCode(ResponseCode.SUCCESS);\n+            response.setRemark(null);\n+            return response;\n+        } catch (Exception e) {\n+            log.error(\"Failed to generate a proper getBrokerAclConfigVersion response\", e);\n+        }\n+\n+        return null;\n+    }\n+\n     private RemotingCommand getAllTopicConfig(ChannelHandlerContext ctx, RemotingCommand request) {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(GetAllTopicConfigResponseHeader.class);\n         // final GetAllTopicConfigResponseHeader responseHeader =", "filename": "broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java"}, {"additions": 105, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java", "sha": "c3382caa280aaac1baa7bb429d228884195403a2", "changes": 105, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -44,8 +44,10 @@\n import org.apache.rocketmq.client.producer.SendCallback;\n import org.apache.rocketmq.client.producer.SendResult;\n import org.apache.rocketmq.client.producer.SendStatus;\n+import org.apache.rocketmq.common.DataVersion;\n import org.apache.rocketmq.common.MQVersion;\n import org.apache.rocketmq.common.MixAll;\n+import org.apache.rocketmq.common.PlainAccessConfig;\n import org.apache.rocketmq.common.TopicConfig;\n import org.apache.rocketmq.common.UtilAll;\n import org.apache.rocketmq.common.admin.ConsumeStats;\n@@ -63,6 +65,7 @@\n import org.apache.rocketmq.common.protocol.ResponseCode;\n import org.apache.rocketmq.common.protocol.body.BrokerStatsData;\n import org.apache.rocketmq.common.protocol.body.CheckClientRequestBody;\n+import org.apache.rocketmq.common.protocol.body.ClusterAclVersionInfo;\n import org.apache.rocketmq.common.protocol.body.ClusterInfo;\n import org.apache.rocketmq.common.protocol.body.ConsumeMessageDirectlyResult;\n import org.apache.rocketmq.common.protocol.body.ConsumeStatsList;\n@@ -86,10 +89,13 @@\n import org.apache.rocketmq.common.protocol.header.CloneGroupOffsetRequestHeader;\n import org.apache.rocketmq.common.protocol.header.ConsumeMessageDirectlyResultRequestHeader;\n import org.apache.rocketmq.common.protocol.header.ConsumerSendMsgBackRequestHeader;\n+import org.apache.rocketmq.common.protocol.header.CreateAccessConfigRequestHeader;\n import org.apache.rocketmq.common.protocol.header.CreateTopicRequestHeader;\n+import org.apache.rocketmq.common.protocol.header.DeleteAccessConfigRequestHeader;\n import org.apache.rocketmq.common.protocol.header.DeleteSubscriptionGroupRequestHeader;\n import org.apache.rocketmq.common.protocol.header.DeleteTopicRequestHeader;\n import org.apache.rocketmq.common.protocol.header.EndTransactionRequestHeader;\n+import org.apache.rocketmq.common.protocol.header.GetBrokerAclConfigResponseHeader;\n import org.apache.rocketmq.common.protocol.header.GetConsumeStatsInBrokerHeader;\n import org.apache.rocketmq.common.protocol.header.GetConsumeStatsRequestHeader;\n import org.apache.rocketmq.common.protocol.header.GetConsumerConnectionListRequestHeader;\n@@ -123,6 +129,7 @@\n import org.apache.rocketmq.common.protocol.header.SendMessageResponseHeader;\n import org.apache.rocketmq.common.protocol.header.UnregisterClientRequestHeader;\n import org.apache.rocketmq.common.protocol.header.UpdateConsumerOffsetRequestHeader;\n+import org.apache.rocketmq.common.protocol.header.UpdateGlobalWhiteAddrsConfigRequestHeader;\n import org.apache.rocketmq.common.protocol.header.ViewBrokerStatsDataRequestHeader;\n import org.apache.rocketmq.common.protocol.header.ViewMessageRequestHeader;\n import org.apache.rocketmq.common.protocol.header.filtersrv.RegisterMessageFilterClassRequestHeader;\n@@ -284,6 +291,104 @@ public void createTopic(final String addr, final String defaultTopic, final Topi\n         throw new MQClientException(response.getCode(), response.getRemark());\n     }\n \n+    public void createPlainAccessConfig(final String addr, final PlainAccessConfig plainAccessConfig,\n+        final long timeoutMillis)\n+        throws RemotingException, MQBrokerException, InterruptedException, MQClientException {\n+        CreateAccessConfigRequestHeader requestHeader = new CreateAccessConfigRequestHeader();\n+        requestHeader.setAccessKey(plainAccessConfig.getAccessKey());\n+        requestHeader.setSecretKey(plainAccessConfig.getSecretKey());\n+        requestHeader.setAdmin(plainAccessConfig.isAdmin());\n+        requestHeader.setDefaultGroupPerm(plainAccessConfig.getDefaultGroupPerm());\n+        requestHeader.setDefaultTopicPerm(plainAccessConfig.getDefaultTopicPerm());\n+        requestHeader.setWhiteRemoteAddress(plainAccessConfig.getWhiteRemoteAddress());\n+        requestHeader.setTopicPerms(UtilAll.List2String(plainAccessConfig.getTopicPerms(),\",\"));\n+        requestHeader.setGroupPerms(UtilAll.List2String(plainAccessConfig.getGroupPerms(),\",\"));\n+\n+        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.UPDATE_AND_CREATE_ACL_CONFIG, requestHeader);\n+\n+        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),\n+            request, timeoutMillis);\n+        assert response != null;\n+        switch (response.getCode()) {\n+            case ResponseCode.SUCCESS: {\n+                return;\n+            }\n+            default:\n+                break;\n+        }\n+\n+        throw new MQClientException(response.getCode(), response.getRemark());\n+    }\n+\n+    public void deleteAccessConfig(final String addr, final String accessKey, final long timeoutMillis)\n+        throws RemotingException, MQBrokerException, InterruptedException, MQClientException {\n+        DeleteAccessConfigRequestHeader requestHeader = new DeleteAccessConfigRequestHeader();\n+        requestHeader.setAccessKey(accessKey);\n+\n+        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.DELETE_ACL_CONFIG, requestHeader);\n+\n+        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),\n+            request, timeoutMillis);\n+        assert response != null;\n+        switch (response.getCode()) {\n+            case ResponseCode.SUCCESS: {\n+                return;\n+            }\n+            default:\n+                break;\n+        }\n+\n+        throw new MQClientException(response.getCode(), response.getRemark());\n+    }\n+\n+    public void updateGlobalWhiteAddrsConfig(final String addr, final String globalWhiteAddrs,final long timeoutMillis)\n+        throws RemotingException, MQBrokerException, InterruptedException, MQClientException {\n+\n+        UpdateGlobalWhiteAddrsConfigRequestHeader requestHeader = new UpdateGlobalWhiteAddrsConfigRequestHeader();\n+        requestHeader.setGlobalWhiteAddrs(globalWhiteAddrs);\n+\n+        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.UPDATE_GLOBAL_WHITE_ADDRS_CONFIG, requestHeader);\n+\n+        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),\n+            request, timeoutMillis);\n+        assert response != null;\n+        switch (response.getCode()) {\n+            case ResponseCode.SUCCESS: {\n+                return;\n+            }\n+            default:\n+                break;\n+        }\n+\n+        throw new MQClientException(response.getCode(), response.getRemark());\n+    }\n+\n+    public ClusterAclVersionInfo getBrokerClusterAclInfo(final String addr,final long timeoutMillis) throws RemotingCommandException, InterruptedException, RemotingTimeoutException,\n+        RemotingSendRequestException, RemotingConnectException, MQBrokerException {\n+        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_BROKER_CLUSTER_ACL_INFO, null);\n+\n+        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr), request, timeoutMillis);\n+        assert response != null;\n+        switch (response.getCode()) {\n+            case ResponseCode.SUCCESS: {\n+                GetBrokerAclConfigResponseHeader responseHeader =\n+                    (GetBrokerAclConfigResponseHeader) response.decodeCommandCustomHeader(GetBrokerAclConfigResponseHeader.class);\n+\n+                ClusterAclVersionInfo clusterAclVersionInfo = new ClusterAclVersionInfo();\n+                clusterAclVersionInfo.setClusterName(responseHeader.getClusterName());\n+                clusterAclVersionInfo.setBrokerName(responseHeader.getBrokerName());\n+                clusterAclVersionInfo.setBrokerAddr(responseHeader.getBrokerAddr());\n+                clusterAclVersionInfo.setAclConfigDataVersion(DataVersion.fromJson(responseHeader.getVersion(), DataVersion.class));\n+                return clusterAclVersionInfo;\n+            }\n+            default:\n+                break;\n+        }\n+\n+        throw new MQBrokerException(response.getCode(), response.getRemark());\n+        \n+    }\n+\n     public SendResult sendMessage(\n         final String addr,\n         final String brokerName,", "filename": "client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java"}, {"additions": 132, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/client/src/test/java/org/apache/rocketmq/client/impl/MQClientAPIImplTest.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/client/src/test/java/org/apache/rocketmq/client/impl/MQClientAPIImplTest.java", "sha": "e3a25b9a8151b89fcb2a5a85598b081931a58e06", "changes": 132, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/client/src/test/java/org/apache/rocketmq/client/impl/MQClientAPIImplTest.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -19,17 +19,24 @@\n import java.lang.reflect.Field;\n import org.apache.rocketmq.client.ClientConfig;\n import org.apache.rocketmq.client.exception.MQBrokerException;\n+import org.apache.rocketmq.client.exception.MQClientException;\n import org.apache.rocketmq.client.hook.SendMessageContext;\n import org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl;\n import org.apache.rocketmq.client.producer.DefaultMQProducer;\n import org.apache.rocketmq.client.producer.SendCallback;\n import org.apache.rocketmq.client.producer.SendResult;\n import org.apache.rocketmq.client.producer.SendStatus;\n+import org.apache.rocketmq.common.DataVersion;\n+import org.apache.rocketmq.common.PlainAccessConfig;\n import org.apache.rocketmq.common.message.Message;\n import org.apache.rocketmq.common.message.MessageConst;\n import org.apache.rocketmq.common.protocol.ResponseCode;\n+import org.apache.rocketmq.common.protocol.body.ClusterAclVersionInfo;\n+import org.apache.rocketmq.common.protocol.header.CreateAccessConfigRequestHeader;\n+import org.apache.rocketmq.common.protocol.header.GetBrokerAclConfigResponseHeader;\n import org.apache.rocketmq.common.protocol.header.SendMessageRequestHeader;\n import org.apache.rocketmq.common.protocol.header.SendMessageResponseHeader;\n+import org.apache.rocketmq.common.protocol.header.UpdateConsumerOffsetRequestHeader;\n import org.apache.rocketmq.remoting.InvokeCallback;\n import org.apache.rocketmq.remoting.RemotingClient;\n import org.apache.rocketmq.remoting.exception.RemotingException;\n@@ -210,6 +217,79 @@ public void testSendMessageAsync_WithException() throws RemotingException, Inter\n         }\n     }\n \n+    @Test\n+    public void testCreatePlainAccessConfig_Success() throws InterruptedException, RemotingException, MQBrokerException {\n+\n+        doAnswer(new Answer() {\n+            @Override\n+            public Object answer(InvocationOnMock mock) throws Throwable {\n+                RemotingCommand request = mock.getArgument(1);\n+                return createSuccessResponse4UpdateAclConfig(request);\n+            }\n+        }).when(remotingClient).invokeSync(anyString(), any(RemotingCommand.class), anyLong());\n+\n+        PlainAccessConfig config = createUpdateAclConfig();\n+\n+        try {\n+            mqClientAPI.createPlainAccessConfig(brokerAddr, config, 3 * 1000);\n+        } catch (MQClientException ex) {\n+\n+        }\n+    }\n+\n+    @Test\n+    public void testCreatePlainAccessConfig_Exception() throws InterruptedException, RemotingException, MQBrokerException {\n+\n+        doAnswer(new Answer() {\n+            @Override\n+            public Object answer(InvocationOnMock mock) throws Throwable {\n+                RemotingCommand request = mock.getArgument(1);\n+                return createErrorResponse4UpdateAclConfig(request);\n+            }\n+        }).when(remotingClient).invokeSync(anyString(), any(RemotingCommand.class), anyLong());\n+\n+        PlainAccessConfig config = createUpdateAclConfig();\n+        try {\n+            mqClientAPI.createPlainAccessConfig(brokerAddr, config, 3 * 1000);\n+        } catch (MQClientException ex) {\n+            assertThat(ex.getResponseCode()).isEqualTo(209);\n+            assertThat(ex.getErrorMessage()).isEqualTo(\"corresponding to accessConfig has been updated failed\");\n+        }\n+    }\n+\n+    @Test\n+    public void testDeleteAccessConfig_Success() throws InterruptedException, RemotingException, MQBrokerException {\n+\n+        doAnswer(new Answer() {\n+            @Override\n+            public Object answer(InvocationOnMock mock) throws Throwable {\n+                RemotingCommand request = mock.getArgument(1);\n+                return createSuccessResponse4DeleteAclConfig(request);\n+            }\n+        }).when(remotingClient).invokeSync(anyString(), any(RemotingCommand.class), anyLong());\n+\n+\n+    }\n+\n+    @Test\n+    public void testDeleteAccessConfig_Exception() throws InterruptedException, RemotingException, MQBrokerException {\n+\n+        doAnswer(new Answer() {\n+            @Override\n+            public Object answer(InvocationOnMock mock) throws Throwable {\n+                RemotingCommand request = mock.getArgument(1);\n+                return createErrorResponse4DeleteAclConfig(request);\n+            }\n+        }).when(remotingClient).invokeSync(anyString(), any(RemotingCommand.class), anyLong());\n+\n+        try {\n+            mqClientAPI.deleteAccessConfig(brokerAddr, \"11111\", 3 * 1000);\n+        } catch (MQClientException ex) {\n+            assertThat(ex.getResponseCode()).isEqualTo(210);\n+            assertThat(ex.getErrorMessage()).isEqualTo(\"corresponding to accessConfig has been deleted failed\");\n+        }\n+    }\n+\n     private RemotingCommand createSuccessResponse(RemotingCommand request) {\n         RemotingCommand response = RemotingCommand.createResponseCommand(SendMessageResponseHeader.class);\n         response.setCode(ResponseCode.SUCCESS);\n@@ -228,6 +308,58 @@ private RemotingCommand createSuccessResponse(RemotingCommand request) {\n         return response;\n     }\n \n+    private RemotingCommand createSuccessResponse4UpdateAclConfig(RemotingCommand request) {\n+        RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        response.setCode(ResponseCode.SUCCESS);\n+        response.setOpaque(request.getOpaque());\n+        response.markResponseType();\n+        response.setRemark(null);\n+\n+        return response;\n+    }\n+\n+    private RemotingCommand createSuccessResponse4DeleteAclConfig(RemotingCommand request) {\n+        RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        response.setCode(ResponseCode.SUCCESS);\n+        response.setOpaque(request.getOpaque());\n+        response.markResponseType();\n+        response.setRemark(null);\n+        \n+        return response;\n+    }\n+\n+    private RemotingCommand createErrorResponse4UpdateAclConfig(RemotingCommand request) {\n+        RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        response.setCode(ResponseCode.UPDATE_AND_CREATE_ACL_CONFIG_FAILED);\n+        response.setOpaque(request.getOpaque());\n+        response.markResponseType();\n+        response.setRemark(\"corresponding to accessConfig has been updated failed\");\n+\n+        return response;\n+    }\n+\n+    private RemotingCommand createErrorResponse4DeleteAclConfig(RemotingCommand request) {\n+        RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        response.setCode(ResponseCode.DELETE_ACL_CONFIG_FAILED);\n+        response.setOpaque(request.getOpaque());\n+        response.markResponseType();\n+        response.setRemark(\"corresponding to accessConfig has been deleted failed\");\n+\n+        return response;\n+    }\n+\n+    private PlainAccessConfig createUpdateAclConfig() {\n+\n+        PlainAccessConfig config = new PlainAccessConfig();\n+        config.setAccessKey(\"Rocketmq111\");\n+        config.setSecretKey(\"123456789\");\n+        config.setAdmin(true);\n+        config.setWhiteRemoteAddress(\"127.0.0.1\");\n+        config.setDefaultTopicPerm(\"DENY\");\n+        config.setDefaultGroupPerm(\"SUB\");\n+        return config;\n+    }\n+\n     private SendMessageRequestHeader createSendMessageRequestHeader() {\n         SendMessageRequestHeader requestHeader = new SendMessageRequestHeader();\n         requestHeader.setBornTimestamp(System.currentTimeMillis());", "filename": "client/src/test/java/org/apache/rocketmq/client/impl/MQClientAPIImplTest.java"}, {"additions": 102, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/common/src/main/java/org/apache/rocketmq/common/PlainAccessConfig.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/common/src/main/java/org/apache/rocketmq/common/PlainAccessConfig.java", "sha": "b193f43711fea332ba3668e51b9eaabadce1b124", "changes": 102, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/common/src/main/java/org/apache/rocketmq/common/PlainAccessConfig.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.rocketmq.common;\n+\n+import java.util.List;\n+\n+public class PlainAccessConfig {\n+\n+    private String accessKey;\n+\n+    private String secretKey;\n+\n+    private String whiteRemoteAddress;\n+\n+    private boolean admin;\n+\n+    private String defaultTopicPerm;\n+\n+    private String defaultGroupPerm;\n+\n+    private List<String> topicPerms;\n+\n+    private List<String> groupPerms;\n+\n+    public String getAccessKey() {\n+        return accessKey;\n+    }\n+\n+    public void setAccessKey(String accessKey) {\n+        this.accessKey = accessKey;\n+    }\n+\n+    public String getSecretKey() {\n+        return secretKey;\n+    }\n+\n+    public void setSecretKey(String secretKey) {\n+        this.secretKey = secretKey;\n+    }\n+\n+    public String getWhiteRemoteAddress() {\n+        return whiteRemoteAddress;\n+    }\n+\n+    public void setWhiteRemoteAddress(String whiteRemoteAddress) {\n+        this.whiteRemoteAddress = whiteRemoteAddress;\n+    }\n+\n+    public boolean isAdmin() {\n+        return admin;\n+    }\n+\n+    public void setAdmin(boolean admin) {\n+        this.admin = admin;\n+    }\n+\n+    public String getDefaultTopicPerm() {\n+        return defaultTopicPerm;\n+    }\n+\n+    public void setDefaultTopicPerm(String defaultTopicPerm) {\n+        this.defaultTopicPerm = defaultTopicPerm;\n+    }\n+\n+    public String getDefaultGroupPerm() {\n+        return defaultGroupPerm;\n+    }\n+\n+    public void setDefaultGroupPerm(String defaultGroupPerm) {\n+        this.defaultGroupPerm = defaultGroupPerm;\n+    }\n+\n+    public List<String> getTopicPerms() {\n+        return topicPerms;\n+    }\n+\n+    public void setTopicPerms(List<String> topicPerms) {\n+        this.topicPerms = topicPerms;\n+    }\n+\n+    public List<String> getGroupPerms() {\n+        return groupPerms;\n+    }\n+\n+    public void setGroupPerms(List<String> groupPerms) {\n+        this.groupPerms = groupPerms;\n+    }\n+}", "filename": "common/src/main/java/org/apache/rocketmq/common/PlainAccessConfig.java"}, {"additions": 27, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/common/src/main/java/org/apache/rocketmq/common/UtilAll.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/common/src/main/java/org/apache/rocketmq/common/UtilAll.java", "sha": "33674dc8a24f7038543ec276c2715466852346d1", "changes": 28, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/common/src/main/java/org/apache/rocketmq/common/UtilAll.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -28,15 +28,17 @@\n import java.text.NumberFormat;\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n+import java.util.Arrays;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.Enumeration;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.Map;\n import java.util.zip.CRC32;\n import java.util.zip.DeflaterOutputStream;\n import java.util.zip.InflaterInputStream;\n-\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.rocketmq.common.constant.LoggerName;\n import org.apache.rocketmq.logging.InternalLogger;\n import org.apache.rocketmq.logging.InternalLoggerFactory;\n@@ -529,4 +531,28 @@ public static void deleteFile(File file) {\n             file.delete();\n         }\n     }\n+\n+    public static String List2String(List<String> list,String splitor) {\n+        if (list == null || list.size() == 0) {\n+            return null;\n+        }\n+        StringBuffer str = new StringBuffer();\n+        for (int i = 0;i < list.size();i++) {\n+            str.append(list.get(i));\n+            if (i == list.size() - 1) {\n+                continue;\n+            }\n+            str.append(splitor);\n+        }\n+        return str.toString();\n+    }\n+\n+    public static List<String> String2List(String str,String splitor) {\n+        if (StringUtils.isEmpty(str)) {\n+            return null;\n+        }\n+\n+        String[] addrArray = str.split(splitor);\n+        return Arrays.asList(addrArray);\n+    }\n }", "filename": "common/src/main/java/org/apache/rocketmq/common/UtilAll.java"}, {"additions": 8, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/common/src/main/java/org/apache/rocketmq/common/protocol/RequestCode.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/common/src/main/java/org/apache/rocketmq/common/protocol/RequestCode.java", "sha": "b771b77b659949ba8564bd474031b4c79386bf18", "changes": 8, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/common/src/main/java/org/apache/rocketmq/common/protocol/RequestCode.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -70,6 +70,14 @@\n \n     public static final int CHECK_CLIENT_CONFIG = 46;\n \n+    public static final int UPDATE_AND_CREATE_ACL_CONFIG = 50;\n+\n+    public static final int DELETE_ACL_CONFIG = 51;\n+\n+    public static final int GET_BROKER_CLUSTER_ACL_INFO = 52;\n+\n+    public static final int UPDATE_GLOBAL_WHITE_ADDRS_CONFIG = 53;\n+\n     public static final int PUT_KV_CONFIG = 100;\n \n     public static final int GET_KV_CONFIG = 101;", "filename": "common/src/main/java/org/apache/rocketmq/common/protocol/RequestCode.java"}, {"additions": 7, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/common/src/main/java/org/apache/rocketmq/common/protocol/ResponseCode.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/common/src/main/java/org/apache/rocketmq/common/protocol/ResponseCode.java", "sha": "dc744448f6cf6999f1b8cb79860c8d916de88610", "changes": 7, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/common/src/main/java/org/apache/rocketmq/common/protocol/ResponseCode.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -73,4 +73,11 @@\n     public static final int CONSUME_MSG_TIMEOUT = 207;\n \n     public static final int NO_MESSAGE = 208;\n+\n+    public static final int UPDATE_AND_CREATE_ACL_CONFIG_FAILED = 209;\n+\n+    public static final int DELETE_ACL_CONFIG_FAILED = 210;\n+\n+    public static final int UPDATE_GLOBAL_WHITE_ADDRS_CONFIG_FAILED = 211;\n+\n }", "filename": "common/src/main/java/org/apache/rocketmq/common/protocol/ResponseCode.java"}, {"additions": 64, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/common/src/main/java/org/apache/rocketmq/common/protocol/body/ClusterAclVersionInfo.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/common/src/main/java/org/apache/rocketmq/common/protocol/body/ClusterAclVersionInfo.java", "sha": "aeae9d59a96f4d3311d93da02fc0eebf5cb1d6ea", "changes": 64, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/common/src/main/java/org/apache/rocketmq/common/protocol/body/ClusterAclVersionInfo.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.rocketmq.common.protocol.body;\n+\n+import org.apache.rocketmq.common.DataVersion;\n+import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n+\n+public class ClusterAclVersionInfo extends RemotingSerializable {\n+\n+    private String brokerName;\n+\n+    private String brokerAddr;\n+\n+    private DataVersion aclConfigDataVersion;\n+\n+    private String clusterName;\n+\n+    public String getBrokerName() {\n+        return brokerName;\n+    }\n+\n+    public void setBrokerName(String brokerName) {\n+        this.brokerName = brokerName;\n+    }\n+\n+    public String getBrokerAddr() {\n+        return brokerAddr;\n+    }\n+\n+    public void setBrokerAddr(String brokerAddr) {\n+        this.brokerAddr = brokerAddr;\n+    }\n+\n+\n+    public String getClusterName() {\n+        return clusterName;\n+    }\n+\n+    public void setClusterName(String clusterName) {\n+        this.clusterName = clusterName;\n+    }\n+\n+    public DataVersion getAclConfigDataVersion() {\n+        return aclConfigDataVersion;\n+    }\n+\n+    public void setAclConfigDataVersion(DataVersion aclConfigDataVersion) {\n+        this.aclConfigDataVersion = aclConfigDataVersion;\n+    }\n+}", "filename": "common/src/main/java/org/apache/rocketmq/common/protocol/body/ClusterAclVersionInfo.java"}, {"additions": 113, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/common/src/main/java/org/apache/rocketmq/common/protocol/header/CreateAccessConfigRequestHeader.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/common/src/main/java/org/apache/rocketmq/common/protocol/header/CreateAccessConfigRequestHeader.java", "sha": "36990fcf641154f9b9f1f8ccda22e2906dc9a730", "changes": 113, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/common/src/main/java/org/apache/rocketmq/common/protocol/header/CreateAccessConfigRequestHeader.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.rocketmq.common.protocol.header;\n+\n+import org.apache.rocketmq.remoting.CommandCustomHeader;\n+import org.apache.rocketmq.remoting.annotation.CFNotNull;\n+import org.apache.rocketmq.remoting.exception.RemotingCommandException;\n+\n+public class CreateAccessConfigRequestHeader implements CommandCustomHeader {\n+\n+    @CFNotNull\n+    private String accessKey;\n+\n+    private String secretKey;\n+\n+    private String whiteRemoteAddress;\n+\n+    private boolean admin;\n+\n+    private String defaultTopicPerm;\n+\n+    private String defaultGroupPerm;\n+\n+    // list string,eg: topicA=DENY,topicD=SUB\n+    private String topicPerms;\n+\n+    // list string,eg: groupD=DENY,groupD=SUB\n+    private String groupPerms;\n+    \n+\n+    @Override public void checkFields() throws RemotingCommandException {\n+\n+    }\n+\n+    public String getAccessKey() {\n+        return accessKey;\n+    }\n+\n+    public void setAccessKey(String accessKey) {\n+        this.accessKey = accessKey;\n+    }\n+\n+    public String getSecretKey() {\n+        return secretKey;\n+    }\n+\n+    public void setSecretKey(String secretKey) {\n+        this.secretKey = secretKey;\n+    }\n+\n+    public String getWhiteRemoteAddress() {\n+        return whiteRemoteAddress;\n+    }\n+\n+    public void setWhiteRemoteAddress(String whiteRemoteAddress) {\n+        this.whiteRemoteAddress = whiteRemoteAddress;\n+    }\n+\n+    public boolean isAdmin() {\n+        return admin;\n+    }\n+\n+    public void setAdmin(boolean admin) {\n+        this.admin = admin;\n+    }\n+\n+    public String getDefaultTopicPerm() {\n+        return defaultTopicPerm;\n+    }\n+\n+    public void setDefaultTopicPerm(String defaultTopicPerm) {\n+        this.defaultTopicPerm = defaultTopicPerm;\n+    }\n+\n+    public String getDefaultGroupPerm() {\n+        return defaultGroupPerm;\n+    }\n+\n+    public void setDefaultGroupPerm(String defaultGroupPerm) {\n+        this.defaultGroupPerm = defaultGroupPerm;\n+    }\n+\n+    public String getTopicPerms() {\n+        return topicPerms;\n+    }\n+\n+    public void setTopicPerms(String topicPerms) {\n+        this.topicPerms = topicPerms;\n+    }\n+\n+    public String getGroupPerms() {\n+        return groupPerms;\n+    }\n+\n+    public void setGroupPerms(String groupPerms) {\n+        this.groupPerms = groupPerms;\n+    }\n+}", "filename": "common/src/main/java/org/apache/rocketmq/common/protocol/header/CreateAccessConfigRequestHeader.java"}, {"additions": 40, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/common/src/main/java/org/apache/rocketmq/common/protocol/header/DeleteAccessConfigRequestHeader.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/common/src/main/java/org/apache/rocketmq/common/protocol/header/DeleteAccessConfigRequestHeader.java", "sha": "293480ce3210a300758b0c32a0b8c5c33cf484c8", "changes": 40, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/common/src/main/java/org/apache/rocketmq/common/protocol/header/DeleteAccessConfigRequestHeader.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.rocketmq.common.protocol.header;\n+\n+import org.apache.rocketmq.remoting.CommandCustomHeader;\n+import org.apache.rocketmq.remoting.annotation.CFNotNull;\n+import org.apache.rocketmq.remoting.exception.RemotingCommandException;\n+\n+public class DeleteAccessConfigRequestHeader implements CommandCustomHeader {\n+\n+    @CFNotNull\n+    private String accessKey;\n+\n+    @Override public void checkFields() throws RemotingCommandException {\n+\n+    }\n+\n+    public String getAccessKey() {\n+        return accessKey;\n+    }\n+\n+    public void setAccessKey(String accessKey) {\n+        this.accessKey = accessKey;\n+    }\n+}", "filename": "common/src/main/java/org/apache/rocketmq/common/protocol/header/DeleteAccessConfigRequestHeader.java"}, {"additions": 71, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/common/src/main/java/org/apache/rocketmq/common/protocol/header/GetBrokerAclConfigResponseHeader.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/common/src/main/java/org/apache/rocketmq/common/protocol/header/GetBrokerAclConfigResponseHeader.java", "sha": "43fbe47ae7f67109dbf2d6f86a386e64a646854c", "changes": 71, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/common/src/main/java/org/apache/rocketmq/common/protocol/header/GetBrokerAclConfigResponseHeader.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.rocketmq.common.protocol.header;\n+\n+import org.apache.rocketmq.remoting.CommandCustomHeader;\n+import org.apache.rocketmq.remoting.annotation.CFNotNull;\n+import org.apache.rocketmq.remoting.exception.RemotingCommandException;\n+\n+public class GetBrokerAclConfigResponseHeader implements CommandCustomHeader {\n+\n+    @CFNotNull\n+    private String version;\n+\n+    @CFNotNull\n+    private String brokerName;\n+\n+    @CFNotNull\n+    private String brokerAddr;\n+\n+    @CFNotNull\n+    private String clusterName;\n+\n+    @Override public void checkFields() throws RemotingCommandException {\n+    }\n+\n+    public String getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(String version) {\n+        this.version = version;\n+    }\n+\n+    public String getBrokerName() {\n+        return brokerName;\n+    }\n+\n+    public void setBrokerName(String brokerName) {\n+        this.brokerName = brokerName;\n+    }\n+\n+    public String getBrokerAddr() {\n+        return brokerAddr;\n+    }\n+\n+    public void setBrokerAddr(String brokerAddr) {\n+        this.brokerAddr = brokerAddr;\n+    }\n+\n+    public String getClusterName() {\n+        return clusterName;\n+    }\n+\n+    public void setClusterName(String clusterName) {\n+        this.clusterName = clusterName;\n+    }\n+}", "filename": "common/src/main/java/org/apache/rocketmq/common/protocol/header/GetBrokerAclConfigResponseHeader.java"}, {"additions": 39, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/common/src/main/java/org/apache/rocketmq/common/protocol/header/UpdateGlobalWhiteAddrsConfigRequestHeader.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/common/src/main/java/org/apache/rocketmq/common/protocol/header/UpdateGlobalWhiteAddrsConfigRequestHeader.java", "sha": "2d42c750cf25e6c329428b91eb77e08df53975cd", "changes": 39, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/common/src/main/java/org/apache/rocketmq/common/protocol/header/UpdateGlobalWhiteAddrsConfigRequestHeader.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.rocketmq.common.protocol.header;\n+\n+import org.apache.rocketmq.remoting.CommandCustomHeader;\n+import org.apache.rocketmq.remoting.annotation.CFNotNull;\n+import org.apache.rocketmq.remoting.exception.RemotingCommandException;\n+\n+public class UpdateGlobalWhiteAddrsConfigRequestHeader implements CommandCustomHeader {\n+\n+    @CFNotNull\n+    private String globalWhiteAddrs;\n+\n+    @Override public void checkFields() throws RemotingCommandException {\n+\n+    }\n+\n+    public String getGlobalWhiteAddrs() {\n+        return globalWhiteAddrs;\n+    }\n+\n+    public void setGlobalWhiteAddrs(String globalWhiteAddrs) {\n+        this.globalWhiteAddrs = globalWhiteAddrs;\n+    }\n+}", "filename": "common/src/main/java/org/apache/rocketmq/common/protocol/header/UpdateGlobalWhiteAddrsConfigRequestHeader.java"}, {"additions": 72, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/docs/cn/acl/user_guide.md", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/docs/cn/acl/user_guide.md", "sha": "01c37dc85bd15f9d424abb39aba31167aa7a06a0", "changes": 73, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/docs/cn/acl/user_guide.md?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -82,5 +82,76 @@ RocketMQ\u7684\u6743\u9650\u63a7\u5236\u5b58\u50a8\u7684\u9ed8\u8ba4\u5b9e\u73b0\u662f\u57fa\u4e8eyml\u914d\u7f6e\u6587\u4ef6\u3002\u7528\u6237\u53ef\n (2)\u5982\u679cACL\u4e0e\u9ad8\u53ef\u7528\u90e8\u7f72(\u591a\u526f\u672cDledger\u67b6\u6784)\u540c\u65f6\u542f\u7528\uff0c\u7531\u4e8e\u51fa\u73b0\u8282\u70b9\u5b95\u673a\u65f6\uff0cDledger Group\u7ec4\u5185\u4f1a\u81ea\u52a8\u9009\u4e3b\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u5c06Dledger Group\u7ec4\n \u5185\u6240\u6709Broker\u8282\u70b9\u7684plain_acl.yml\u914d\u7f6e\u6587\u4ef6\u7684\u767d\u540d\u5355\u8bbe\u7f6e\u6240\u6709Broker\u8282\u70b9\u7684ip\u5730\u5740\u3002\n \n-**\u7279\u522b\u6ce8\u610f**\u5728[4.5.0]\u7248\u672c\u4e2d\u5373\u4f7f\u4f7f\u7528\u4e0a\u9762\u6240\u8ff0\u7684\u767d\u540d\u5355\u4e5f\u65e0\u6cd5\u89e3\u51b3\u5f00\u542fACL\u7684\u95ee\u9898\uff0c\u89e3\u51b3\u8be5\u95ee\u9898\u7684[PR\u94fe\u63a5](https://github.com/apache/rocketmq/pull/1149)\n+## 7. ACL mqadmin\u914d\u7f6e\u7ba1\u7406\u547d\u4ee4\n \n+### 7.1 \u66f4\u65b0ACL\u914d\u7f6e\u6587\u4ef6\u4e2d\u201caccount\u201d\u7684\u5c5e\u6027\u503c\n+\n+\u8be5\u547d\u4ee4\u7684\u793a\u4f8b\u5982\u4e0b\uff1a\n+\n+sh mqadmin updateAclConfig -n 192.168.1.2:9876 -b 192.168.12.134:10911 -a RocketMQ -s 1234567809123 \n+-t topicA=DENY,topicD=SUB -g groupD=DENY,groupB=SUB\n+\n+\u8bf4\u660e\uff1a\u5982\u679c\u4e0d\u5b58\u5728\u5219\u4f1a\u5728ACL Config YAML\u914d\u7f6e\u6587\u4ef6\u4e2d\u521b\u5efa\uff1b\u82e5\u5b58\u5728\uff0c\u5219\u4f1a\u66f4\u65b0\u5bf9\u5e94\u7684\u201caccounts\u201d\u7684\u5c5e\u6027\u503c;\n+\u5982\u679c\u6307\u5b9a\u7684\u662f\u96c6\u7fa4\u540d\u79f0\uff0c\u5219\u4f1a\u5728\u96c6\u7fa4\u4e2d\u5404\u4e2abroker\u8282\u70b9\u6267\u884c\u8be5\u547d\u4ee4\uff1b\u5426\u5219\u4f1a\u5728\u5355\u4e2abroker\u8282\u70b9\u6267\u884c\u8be5\u547d\u4ee4\u3002\n+\n+| \u53c2\u6570 | \u53d6\u503c | \u542b\u4e49 |\n+| --- | --- | --- |\n+| n | eg:192.168.1.2:9876 | namesrv\u5730\u5740(\u5fc5\u586b) |\n+| c | eg:DefaultCluster | \u6307\u5b9a\u96c6\u7fa4\u540d\u79f0(\u4e0ebroker\u5730\u5740\u4e8c\u9009\u4e00) |\n+| b | eg:192.168.12.134:10911 | \u6307\u5b9abroker\u5730\u5740(\u4e0e\u96c6\u7fa4\u540d\u79f0\u4e8c\u9009\u4e00) |\n+| a | eg:RocketMQ | Access Key\u503c(\u5fc5\u586b) |\n+| s | eg:1234567809123 | Secret Key\u503c(\u53ef\u9009) |\n+| m | eg:true | \u662f\u5426\u7ba1\u7406\u5458\u8d26\u6237(\u53ef\u9009) |\n+| w | eg:192.168.0.* | whiteRemoteAddress,\u7528\u6237IP\u767d\u540d\u5355(\u53ef\u9009) |\n+| i | eg:DENY;PUB;SUB;PUB\\|SUB | defaultTopicPerm,\u9ed8\u8ba4Topic\u6743\u9650(\u53ef\u9009) |\n+| u | eg:DENY;PUB;SUB;PUB\\|SUB | defaultGroupPerm,\u9ed8\u8ba4ConsumerGroup\u6743\u9650(\u53ef\u9009) |\n+| t | eg:topicA=DENY,topicD=SUB | topicPerms,\u5404\u4e2aTopic\u7684\u6743\u9650(\u53ef\u9009) |\n+| g | eg:groupD=DENY,groupB=SUB | groupPerms,\u5404\u4e2aConsumerGroup\u7684\u6743\u9650(\u53ef\u9009) |\n+\n+### 7.2 \u5220\u9664ACL\u914d\u7f6e\u6587\u4ef6\u91cc\u9762\u7684\u5bf9\u5e94\u201caccount\u201d\n+\u8be5\u547d\u4ee4\u7684\u793a\u4f8b\u5982\u4e0b\uff1a\n+\n+sh mqadmin deleteAccessConfig -n 192.168.1.2:9876 -c DefaultCluster -a RocketMQ\n+\n+\u8bf4\u660e\uff1a\u5982\u679c\u6307\u5b9a\u7684\u662f\u96c6\u7fa4\u540d\u79f0\uff0c\u5219\u4f1a\u5728\u96c6\u7fa4\u4e2d\u5404\u4e2abroker\u8282\u70b9\u6267\u884c\u8be5\u547d\u4ee4\uff1b\u5426\u5219\u4f1a\u5728\u5355\u4e2abroker\u8282\u70b9\u6267\u884c\u8be5\u547d\u4ee4\u3002\n+\u5176\u4e2d\uff0c\u53c2\u6570\"a\"\u4e3aAccess Key\u7684\u503c\uff0c\u7528\u4ee5\u6807\u8bc6\u552f\u4e00\u8d26\u6237id\uff0c\u56e0\u6b64\u8be5\u547d\u4ee4\u7684\u53c2\u6570\u4e2d\u6307\u5b9a\u8d26\u6237id\u5373\u53ef\u3002\n+\n+| \u53c2\u6570 | \u53d6\u503c | \u542b\u4e49 |\n+| --- | --- | --- |\n+| n | eg:192.168.1.2:9876 | namesrv\u5730\u5740(\u5fc5\u586b) |\n+| c | eg:DefaultCluster | \u6307\u5b9a\u96c6\u7fa4\u540d\u79f0(\u4e0ebroker\u5730\u5740\u4e8c\u9009\u4e00) |\n+| b | eg:192.168.12.134:10911 | \u6307\u5b9abroker\u5730\u5740(\u4e0e\u96c6\u7fa4\u540d\u79f0\u4e8c\u9009\u4e00) |\n+| a | eg:RocketMQ | Access Key\u7684\u503c(\u5fc5\u586b) |\n+\n+\n+### 7.3 \u66f4\u65b0ACL\u914d\u7f6e\u6587\u4ef6\u91cc\u9762\u4e2d\u7684\u5168\u5c40\u767d\u540d\u5355\n+\u8be5\u547d\u4ee4\u7684\u793a\u4f8b\u5982\u4e0b\uff1a\n+\n+sh mqadmin updateGlobalWhiteAddr -n 192.168.1.2:9876 -b 192.168.12.134:10911 -g 10.10.154.1,10.10.154.2\n+\n+\u8bf4\u660e\uff1a\u5982\u679c\u6307\u5b9a\u7684\u662f\u96c6\u7fa4\u540d\u79f0\uff0c\u5219\u4f1a\u5728\u96c6\u7fa4\u4e2d\u5404\u4e2abroker\u8282\u70b9\u6267\u884c\u8be5\u547d\u4ee4\uff1b\u5426\u5219\u4f1a\u5728\u5355\u4e2abroker\u8282\u70b9\u6267\u884c\u8be5\u547d\u4ee4\u3002\n+\u5176\u4e2d\uff0c\u53c2\u6570\"g\"\u4e3a\u5168\u5c40IP\u767d\u540d\u7684\u503c\uff0c\u7528\u4ee5\u66f4\u65b0ACL\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u201cglobalWhiteRemoteAddresses\u201d\u5b57\u6bb5\u7684\u5c5e\u6027\u503c\u3002\n+\n+| \u53c2\u6570 | \u53d6\u503c | \u542b\u4e49 |\n+| --- | --- | --- |\n+| n | eg:192.168.1.2:9876 | namesrv\u5730\u5740(\u5fc5\u586b) |\n+| c | eg:DefaultCluster | \u6307\u5b9a\u96c6\u7fa4\u540d\u79f0(\u4e0ebroker\u5730\u5740\u4e8c\u9009\u4e00) |\n+| b | eg:192.168.12.134:10911 | \u6307\u5b9abroker\u5730\u5740(\u4e0e\u96c6\u7fa4\u540d\u79f0\u4e8c\u9009\u4e00) |\n+| g | eg:10.10.154.1,10.10.154.2 | \u5168\u5c40IP\u767d\u540d\u5355(\u5fc5\u586b) |\n+\n+### 7.4 \u67e5\u8be2\u96c6\u7fa4/Broker\u7684ACL\u914d\u7f6e\u6587\u4ef6\u7248\u672c\u4fe1\u606f\n+\u8be5\u547d\u4ee4\u7684\u793a\u4f8b\u5982\u4e0b\uff1a\n+\n+sh mqadmin clusterAclConfigVersion -n 192.168.1.2:9876 -c DefaultCluster\n+\n+\u8bf4\u660e\uff1a\u5982\u679c\u6307\u5b9a\u7684\u662f\u96c6\u7fa4\u540d\u79f0\uff0c\u5219\u4f1a\u5728\u96c6\u7fa4\u4e2d\u5404\u4e2abroker\u8282\u70b9\u6267\u884c\u8be5\u547d\u4ee4\uff1b\u5426\u5219\u4f1a\u5728\u5355\u4e2abroker\u8282\u70b9\u6267\u884c\u8be5\u547d\u4ee4\u3002\n+\n+| \u53c2\u6570 | \u53d6\u503c | \u542b\u4e49 |\n+| --- | --- | --- |\n+| n | eg:192.168.1.2:9876 | namesrv\u5730\u5740(\u5fc5\u586b) |\n+| c | eg:DefaultCluster | \u6307\u5b9a\u96c6\u7fa4\u540d\u79f0(\u4e0ebroker\u5730\u5740\u4e8c\u9009\u4e00) |\n+| b | eg:192.168.12.134:10911 | \u6307\u5b9abroker\u5730\u5740(\u4e0e\u96c6\u7fa4\u540d\u79f0\u4e8c\u9009\u4e00) |\n+\n+\n+**\u7279\u522b\u6ce8\u610f**\u5f00\u542fAcl\u9274\u6743\u8ba4\u8bc1\u540e\u5bfc\u81f4Master/Slave\u548cDledger\u6a21\u5f0f\u4e0bBroker\u540c\u6b65\u6570\u636e\u5f02\u5e38\u7684\u95ee\u9898\uff0c\n+\u5728\u793e\u533a[4.5.1]\u7248\u672c\u4e2d\u5df2\u7ecf\u4fee\u590d\uff0c\u5177\u4f53\u7684PR\u94fe\u63a5\u4e3a\uff1ahttps://github.com/apache/rocketmq/pull/1149\uff1b\n\\ No newline at end of file", "filename": "docs/cn/acl/user_guide.md"}, {"additions": 24, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExt.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExt.java", "sha": "f00dcefa4321820ba752af74c156763622e11245", "changes": 24, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExt.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -26,13 +26,15 @@\n import org.apache.rocketmq.client.exception.MQBrokerException;\n import org.apache.rocketmq.client.exception.MQClientException;\n import org.apache.rocketmq.common.MixAll;\n+import org.apache.rocketmq.common.PlainAccessConfig;\n import org.apache.rocketmq.common.TopicConfig;\n import org.apache.rocketmq.common.admin.ConsumeStats;\n import org.apache.rocketmq.common.admin.RollbackStats;\n import org.apache.rocketmq.common.admin.TopicStatsTable;\n import org.apache.rocketmq.common.message.MessageExt;\n import org.apache.rocketmq.common.message.MessageQueue;\n import org.apache.rocketmq.common.protocol.body.BrokerStatsData;\n+import org.apache.rocketmq.common.protocol.body.ClusterAclVersionInfo;\n import org.apache.rocketmq.common.protocol.body.ClusterInfo;\n import org.apache.rocketmq.common.protocol.body.ConsumeMessageDirectlyResult;\n import org.apache.rocketmq.common.protocol.body.ConsumeStatsList;\n@@ -160,6 +162,27 @@ public void createAndUpdateTopicConfig(String addr, TopicConfig config) throws R\n         defaultMQAdminExtImpl.createAndUpdateTopicConfig(addr, config);\n     }\n \n+    @Override\n+    public void createAndUpdatePlainAccessConfig(String addr,\n+        PlainAccessConfig config) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {\n+        defaultMQAdminExtImpl.createAndUpdatePlainAccessConfig(addr, config);\n+    }\n+\n+    @Override public void deletePlainAccessConfig(String addr,\n+        String accessKey) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {\n+        defaultMQAdminExtImpl.deletePlainAccessConfig(addr, accessKey);\n+    }\n+\n+    @Override public void updateGlobalWhiteAddrConfig(String addr,\n+        String globalWhiteAddrs) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {\n+        defaultMQAdminExtImpl.updateGlobalWhiteAddrConfig(addr, globalWhiteAddrs);\n+    }\n+\n+    @Override public ClusterAclVersionInfo examineBrokerClusterAclVersionInfo(\n+        String addr) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {\n+        return defaultMQAdminExtImpl.examineBrokerClusterAclVersionInfo(addr);\n+    }\n+\n     @Override\n     public void createAndUpdateSubscriptionGroupConfig(String addr,\n         SubscriptionGroupConfig config) throws RemotingException,\n@@ -305,6 +328,7 @@ public void deleteKvConfig(String namespace,\n         defaultMQAdminExtImpl.deleteKvConfig(namespace, key);\n     }\n \n+    @Override\n     public List<RollbackStats> resetOffsetByTimestampOld(String consumerGroup, String topic, long timestamp,\n         boolean force)\n         throws RemotingException, MQBrokerException, InterruptedException, MQClientException {", "filename": "tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExt.java"}, {"additions": 25, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java", "sha": "502e9daa33b65e89ab311386ed4037c182f3a4c5", "changes": 25, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -38,6 +38,7 @@\n import org.apache.rocketmq.client.impl.factory.MQClientInstance;\n import org.apache.rocketmq.client.log.ClientLogger;\n import org.apache.rocketmq.common.MixAll;\n+import org.apache.rocketmq.common.PlainAccessConfig;\n import org.apache.rocketmq.common.ServiceState;\n import org.apache.rocketmq.common.TopicConfig;\n import org.apache.rocketmq.common.UtilAll;\n@@ -47,6 +48,7 @@\n import org.apache.rocketmq.common.admin.TopicOffset;\n import org.apache.rocketmq.common.admin.TopicStatsTable;\n import org.apache.rocketmq.common.help.FAQUrl;\n+import org.apache.rocketmq.common.protocol.body.ClusterAclVersionInfo;\n import org.apache.rocketmq.logging.InternalLogger;\n import org.apache.rocketmq.common.message.MessageClientExt;\n import org.apache.rocketmq.common.message.MessageConst;\n@@ -87,6 +89,7 @@\n import org.apache.rocketmq.tools.admin.api.TrackType;\n \n public class DefaultMQAdminExtImpl implements MQAdminExt, MQAdminExtInner {\n+\n     private final InternalLogger log = ClientLogger.getLog();\n     private final DefaultMQAdminExt defaultMQAdminExt;\n     private ServiceState serviceState = ServiceState.CREATE_JUST;\n@@ -178,6 +181,27 @@ public void createAndUpdateTopicConfig(String addr, TopicConfig config) throws R\n         this.mqClientInstance.getMQClientAPIImpl().createTopic(addr, this.defaultMQAdminExt.getCreateTopicKey(), config, timeoutMillis);\n     }\n \n+    @Override public void createAndUpdatePlainAccessConfig(String addr,\n+        PlainAccessConfig config) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {\n+        this.mqClientInstance.getMQClientAPIImpl().createPlainAccessConfig(addr, config, timeoutMillis);\n+    }\n+\n+    @Override public void deletePlainAccessConfig(String addr,\n+        String accessKey) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {\n+        this.mqClientInstance.getMQClientAPIImpl().deleteAccessConfig(addr, accessKey, timeoutMillis);\n+    }\n+\n+    @Override public void updateGlobalWhiteAddrConfig(String addr,\n+        String globalWhiteAddrs) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {\n+        this.mqClientInstance.getMQClientAPIImpl().updateGlobalWhiteAddrsConfig(addr, globalWhiteAddrs, timeoutMillis);\n+    }\n+\n+    @Override\n+    public ClusterAclVersionInfo examineBrokerClusterAclVersionInfo(\n+        String addr) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {\n+        return this.mqClientInstance.getMQClientAPIImpl().getBrokerClusterAclInfo(addr, timeoutMillis);\n+    }\n+\n     @Override\n     public void createAndUpdateSubscriptionGroupConfig(String addr,\n         SubscriptionGroupConfig config) throws RemotingException,\n@@ -548,6 +572,7 @@ private RollbackStats resetOffsetConsumeOffset(String brokerAddr, String consume\n         return Collections.EMPTY_MAP;\n     }\n \n+    @Override\n     public void createOrUpdateOrderConf(String key, String value,\n         boolean isCluster) throws RemotingException, MQBrokerException,\n         InterruptedException, MQClientException {", "filename": "tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java"}, {"additions": 14, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/tools/src/main/java/org/apache/rocketmq/tools/admin/MQAdminExt.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/tools/src/main/java/org/apache/rocketmq/tools/admin/MQAdminExt.java", "sha": "930785ec1e77337802ad080818ebca84eece2e32", "changes": 14, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/tools/src/main/java/org/apache/rocketmq/tools/admin/MQAdminExt.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -24,13 +24,15 @@\n import org.apache.rocketmq.client.MQAdmin;\n import org.apache.rocketmq.client.exception.MQBrokerException;\n import org.apache.rocketmq.client.exception.MQClientException;\n+import org.apache.rocketmq.common.PlainAccessConfig;\n import org.apache.rocketmq.common.TopicConfig;\n import org.apache.rocketmq.common.admin.ConsumeStats;\n import org.apache.rocketmq.common.admin.RollbackStats;\n import org.apache.rocketmq.common.admin.TopicStatsTable;\n import org.apache.rocketmq.common.message.MessageExt;\n import org.apache.rocketmq.common.message.MessageQueue;\n import org.apache.rocketmq.common.protocol.body.BrokerStatsData;\n+import org.apache.rocketmq.common.protocol.body.ClusterAclVersionInfo;\n import org.apache.rocketmq.common.protocol.body.ClusterInfo;\n import org.apache.rocketmq.common.protocol.body.ConsumeMessageDirectlyResult;\n import org.apache.rocketmq.common.protocol.body.ConsumeStatsList;\n@@ -68,6 +70,18 @@ void createAndUpdateTopicConfig(final String addr,\n         final TopicConfig config) throws RemotingException, MQBrokerException,\n         InterruptedException, MQClientException;\n \n+    void createAndUpdatePlainAccessConfig(final String addr, final PlainAccessConfig plainAccessConfig) throws RemotingException, MQBrokerException,\n+        InterruptedException, MQClientException;\n+\n+    void deletePlainAccessConfig(final String addr, final String accessKey) throws RemotingException, MQBrokerException,\n+        InterruptedException, MQClientException;\n+\n+    void updateGlobalWhiteAddrConfig(final String addr, final String globalWhiteAddrs)throws RemotingException, MQBrokerException,\n+        InterruptedException, MQClientException;\n+\n+    ClusterAclVersionInfo examineBrokerClusterAclVersionInfo(final String addr) throws RemotingException, MQBrokerException,\n+        InterruptedException, MQClientException;\n+\n     void createAndUpdateSubscriptionGroupConfig(final String addr,\n         final SubscriptionGroupConfig config) throws RemotingException,\n         MQBrokerException, InterruptedException, MQClientException;", "filename": "tools/src/main/java/org/apache/rocketmq/tools/admin/MQAdminExt.java"}, {"additions": 10, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java", "sha": "614fed820d086975cb7968650f4cfa85ad8c4b81", "changes": 10, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -30,6 +30,10 @@\n import org.apache.rocketmq.remoting.RPCHook;\n import org.apache.rocketmq.remoting.protocol.RemotingCommand;\n import org.apache.rocketmq.srvutil.ServerUtil;\n+import org.apache.rocketmq.tools.command.acl.ClusterAclConfigVersionListSubCommand;\n+import org.apache.rocketmq.tools.command.acl.DeleteAccessConfigSubCommand;\n+import org.apache.rocketmq.tools.command.acl.UpdateAccessConfigSubCommand;\n+import org.apache.rocketmq.tools.command.acl.UpdateGlobalWhiteAddrSubCommand;\n import org.apache.rocketmq.tools.command.broker.BrokerConsumeStatsSubCommad;\n import org.apache.rocketmq.tools.command.broker.BrokerStatusSubCommand;\n import org.apache.rocketmq.tools.command.broker.CleanExpiredCQSubCommand;\n@@ -199,6 +203,12 @@ public static void initCommand() {\n         initCommand(new QueryConsumeQueueCommand());\n         initCommand(new SendMessageCommand());\n         initCommand(new ConsumeMessageCommand());\n+\n+        //for acl command\n+        initCommand(new UpdateAccessConfigSubCommand());\n+        initCommand(new DeleteAccessConfigSubCommand());\n+        initCommand(new ClusterAclConfigVersionListSubCommand());\n+        initCommand(new UpdateGlobalWhiteAddrSubCommand());\n     }\n \n     private static void initLogback() throws JoranException {", "filename": "tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java"}, {"additions": 131, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/tools/src/main/java/org/apache/rocketmq/tools/command/acl/ClusterAclConfigVersionListSubCommand.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/tools/src/main/java/org/apache/rocketmq/tools/command/acl/ClusterAclConfigVersionListSubCommand.java", "sha": "c1e86fbd1ad777d63acc53427986f187efa4c6c5", "changes": 131, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/tools/src/main/java/org/apache/rocketmq/tools/command/acl/ClusterAclConfigVersionListSubCommand.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.rocketmq.tools.command.acl;\n+\n+import java.sql.Timestamp;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Set;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.OptionGroup;\n+import org.apache.commons.cli.Options;\n+import org.apache.rocketmq.client.exception.MQBrokerException;\n+import org.apache.rocketmq.client.exception.MQClientException;\n+import org.apache.rocketmq.common.DataVersion;\n+import org.apache.rocketmq.common.UtilAll;\n+import org.apache.rocketmq.common.protocol.body.ClusterAclVersionInfo;\n+import org.apache.rocketmq.remoting.RPCHook;\n+import org.apache.rocketmq.remoting.exception.RemotingException;\n+import org.apache.rocketmq.srvutil.ServerUtil;\n+import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\n+import org.apache.rocketmq.tools.command.CommandUtil;\n+import org.apache.rocketmq.tools.command.SubCommand;\n+import org.apache.rocketmq.tools.command.SubCommandException;\n+\n+public class ClusterAclConfigVersionListSubCommand implements SubCommand {\n+\n+    @Override public String commandName() {\n+        return \"clusterAclConfigVersion\";\n+    }\n+\n+    @Override public String commandDesc() {\n+        return \"List all of acl config version information in cluster\";\n+    }\n+\n+    @Override public Options buildCommandlineOptions(Options options) {\n+        OptionGroup optionGroup = new OptionGroup();\n+\n+        Option opt = new Option(\"b\", \"brokerAddr\", true, \"query acl config version for which broker\");\n+        optionGroup.addOption(opt);\n+\n+        opt = new Option(\"c\", \"clusterName\", true, \"query acl config version for specified cluster\");\n+        optionGroup.addOption(opt);\n+\n+        optionGroup.setRequired(true);\n+        options.addOptionGroup(optionGroup);\n+        \n+        return options;\n+    }\n+\n+    @Override public void execute(CommandLine commandLine, Options options,\n+        RPCHook rpcHook) throws SubCommandException {\n+\n+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);\n+        defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));\n+\n+        try {\n+\n+            if (commandLine.hasOption('b')) {\n+                String addr = commandLine.getOptionValue('b').trim();\n+                defaultMQAdminExt.start();\n+                printClusterBaseInfo(defaultMQAdminExt, addr);\n+\n+                System.out.printf(\"get broker's plain access config version success.%n\", addr);\n+                return;\n+\n+            } else if (commandLine.hasOption('c')) {\n+                String clusterName = commandLine.getOptionValue('c').trim();\n+\n+                defaultMQAdminExt.start();\n+\n+                Set<String> masterSet =\n+                    CommandUtil.fetchMasterAddrByClusterName(defaultMQAdminExt, clusterName);\n+                System.out.printf(\"%-16s  %-22s  %-22s  %-20s  %-22s%n\",\n+                    \"#Cluster Name\",\n+                    \"#Broker Name\",\n+                    \"#Broker Addr\",\n+                    \"#AclConfigVersionNum\",\n+                    \"#AclLastUpdateTime\"\n+                );\n+                for (String addr : masterSet) {\n+                    printClusterBaseInfo(defaultMQAdminExt, addr);\n+                }\n+                System.out.printf(\"get cluster's plain access config version success.%n\");\n+\n+                return;\n+            }\n+\n+            ServerUtil.printCommandLineHelp(\"mqadmin \" + this.commandName(), options);\n+        } catch (Exception e) {\n+            throw new SubCommandException(this.getClass().getSimpleName() + \" command failed\", e);\n+        } finally {\n+            defaultMQAdminExt.shutdown();\n+        }\n+    }\n+\n+    private void printClusterBaseInfo(\n+        final DefaultMQAdminExt defaultMQAdminExt, final String addr) throws\n+        InterruptedException, MQBrokerException, RemotingException, MQClientException {\n+\n+\n+        ClusterAclVersionInfo clusterAclVersionInfo = defaultMQAdminExt.examineBrokerClusterAclVersionInfo(addr);\n+        DataVersion aclDataVersion = clusterAclVersionInfo.getAclConfigDataVersion();\n+        String versionNum = String.valueOf(aclDataVersion.getCounter());\n+\n+        DateFormat sdf = new SimpleDateFormat(UtilAll.YYYY_MM_DD_HH_MM_SS);\n+        String timeStampStr = sdf.format(new Timestamp(aclDataVersion.getTimestamp()));\n+\n+        System.out.printf(\"%-16s  %-22s  %-22s  %-20s  %-22s%n\",\n+            clusterAclVersionInfo.getClusterName(),\n+            clusterAclVersionInfo.getBrokerName(),\n+            clusterAclVersionInfo.getBrokerAddr(),\n+            versionNum,\n+            timeStampStr\n+        );\n+    }\n+}", "filename": "tools/src/main/java/org/apache/rocketmq/tools/command/acl/ClusterAclConfigVersionListSubCommand.java"}, {"additions": 106, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/tools/src/main/java/org/apache/rocketmq/tools/command/acl/DeleteAccessConfigSubCommand.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/tools/src/main/java/org/apache/rocketmq/tools/command/acl/DeleteAccessConfigSubCommand.java", "sha": "8570b2f7586e80b31af821e5a07313b5deb0c979", "changes": 106, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/tools/src/main/java/org/apache/rocketmq/tools/command/acl/DeleteAccessConfigSubCommand.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.rocketmq.tools.command.acl;\n+\n+import java.util.Set;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.OptionGroup;\n+import org.apache.commons.cli.Options;\n+import org.apache.rocketmq.remoting.RPCHook;\n+import org.apache.rocketmq.srvutil.ServerUtil;\n+import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\n+import org.apache.rocketmq.tools.command.CommandUtil;\n+import org.apache.rocketmq.tools.command.SubCommand;\n+import org.apache.rocketmq.tools.command.SubCommandException;\n+\n+public class DeleteAccessConfigSubCommand implements SubCommand {\n+\n+    @Override\n+    public String commandName() {\n+        return \"deleteAccessConfig\";\n+    }\n+\n+    @Override\n+    public String commandDesc() {\n+        return \"Delete Acl Config Account in broker\";\n+    }\n+\n+    @Override\n+    public Options buildCommandlineOptions(Options options) {\n+        OptionGroup optionGroup = new OptionGroup();\n+\n+        Option opt = new Option(\"b\", \"brokerAddr\", true, \"delete acl config account to which broker\");\n+        optionGroup.addOption(opt);\n+\n+        opt = new Option(\"c\", \"clusterName\", true, \"delete cl config account to which cluster\");\n+        optionGroup.addOption(opt);\n+\n+        optionGroup.setRequired(true);\n+        options.addOptionGroup(optionGroup);\n+\n+        opt = new Option(\"a\", \"accessKey\", true, \"set accessKey in acl config file for deleting which account\");\n+        opt.setRequired(true);\n+        options.addOption(opt);\n+\n+        return options;\n+    }\n+\n+    @Override public void execute(CommandLine commandLine, Options options,\n+        RPCHook rpcHook) throws SubCommandException {\n+\n+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);\n+        defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));\n+\n+        try {\n+\n+            String accessKey = commandLine.getOptionValue('a').trim();\n+\n+            if (commandLine.hasOption('b')) {\n+                String addr = commandLine.getOptionValue('b').trim();\n+\n+                defaultMQAdminExt.start();\n+                defaultMQAdminExt.deletePlainAccessConfig(addr, accessKey);\n+\n+                System.out.printf(\"delete plain access config account to %s success.%n\", addr);\n+                System.out.printf(\"account's accesskey is:%s\", accessKey);\n+                return;\n+\n+            } else if (commandLine.hasOption('c')) {\n+                String clusterName = commandLine.getOptionValue('c').trim();\n+\n+                defaultMQAdminExt.start();\n+\n+                Set<String> masterSet =\n+                    CommandUtil.fetchMasterAddrByClusterName(defaultMQAdminExt, clusterName);\n+                for (String addr : masterSet) {\n+                    defaultMQAdminExt.deletePlainAccessConfig(addr, accessKey);\n+                    System.out.printf(\"delete plain access config account to %s success.%n\", addr);\n+                }\n+\n+                System.out.printf(\"account's accesskey is:%s\", accessKey);\n+                return;\n+            }\n+\n+            ServerUtil.printCommandLineHelp(\"mqadmin \" + this.commandName(), options);\n+        } catch (Exception e) {\n+            throw new SubCommandException(this.getClass().getSimpleName() + \" command failed\", e);\n+        } finally {\n+            defaultMQAdminExt.shutdown();\n+        }\n+    }\n+}", "filename": "tools/src/main/java/org/apache/rocketmq/tools/command/acl/DeleteAccessConfigSubCommand.java"}, {"additions": 185, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/tools/src/main/java/org/apache/rocketmq/tools/command/acl/UpdateAccessConfigSubCommand.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/tools/src/main/java/org/apache/rocketmq/tools/command/acl/UpdateAccessConfigSubCommand.java", "sha": "10241bf91e1970afd04c46b568cf6d4e645fbb52", "changes": 185, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/tools/src/main/java/org/apache/rocketmq/tools/command/acl/UpdateAccessConfigSubCommand.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -0,0 +1,185 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.rocketmq.tools.command.acl;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.OptionGroup;\n+import org.apache.commons.cli.Options;\n+import org.apache.rocketmq.common.PlainAccessConfig;\n+import org.apache.rocketmq.remoting.RPCHook;\n+import org.apache.rocketmq.srvutil.ServerUtil;\n+import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\n+import org.apache.rocketmq.tools.command.CommandUtil;\n+import org.apache.rocketmq.tools.command.SubCommand;\n+import org.apache.rocketmq.tools.command.SubCommandException;\n+\n+public class UpdateAccessConfigSubCommand implements SubCommand {\n+\n+    @Override\n+    public String commandName() {\n+        return \"updateAclConfig\";\n+    }\n+\n+    @Override\n+    public String commandDesc() {\n+        return \"Update acl config yaml file in broker\";\n+    }\n+\n+    @Override\n+    public Options buildCommandlineOptions(Options options) {\n+        OptionGroup optionGroup = new OptionGroup();\n+\n+        Option opt = new Option(\"b\", \"brokerAddr\", true, \"update acl config file to which broker\");\n+        optionGroup.addOption(opt);\n+\n+        opt = new Option(\"c\", \"clusterName\", true, \"update cl config file to which cluster\");\n+        optionGroup.addOption(opt);\n+\n+        optionGroup.setRequired(true);\n+        options.addOptionGroup(optionGroup);\n+\n+        opt = new Option(\"a\", \"accessKey\", true, \"set accessKey in acl config file\");\n+        opt.setRequired(true);\n+        options.addOption(opt);\n+\n+        opt = new Option(\"s\", \"secretKey\", true, \"set secretKey in acl config file\");\n+        opt.setRequired(false);\n+        options.addOption(opt);\n+\n+        opt = new Option(\"w\", \"whiteRemoteAddress\", true, \"set white ip Address for account in acl config file\");\n+        opt.setRequired(false);\n+        options.addOption(opt);\n+\n+        opt = new Option(\"i\", \"defaultTopicPerm\", true, \"set default topicPerm in acl config file\");\n+        opt.setRequired(false);\n+        options.addOption(opt);\n+\n+        opt = new Option(\"u\", \"defaultGroupPerm\", true, \"set default GroupPerm in acl config file\");\n+        opt.setRequired(false);\n+        options.addOption(opt);\n+\n+        opt = new Option(\"t\", \"topicPerms\", true, \"set topicPerms list,eg: topicA=DENY,topicD=SUB\");\n+        opt.setRequired(false);\n+        options.addOption(opt);\n+\n+        opt = new Option(\"g\", \"groupPerms\", true, \"set groupPerms list,eg: groupD=DENY,groupD=SUB\");\n+        opt.setRequired(false);\n+        options.addOption(opt);\n+\n+        opt = new Option(\"m\", \"admin\", true, \"set admin flag in acl config file\");\n+        opt.setRequired(false);\n+        options.addOption(opt);\n+\n+        return options;\n+    }\n+\n+    @Override\n+    public void execute(CommandLine commandLine, Options options,\n+        RPCHook rpcHook) throws SubCommandException {\n+\n+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);\n+        defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));\n+\n+        try {\n+            PlainAccessConfig accessConfig = new PlainAccessConfig();\n+            accessConfig.setAccessKey(commandLine.getOptionValue('a').trim());\n+            // Secretkey\n+            if (commandLine.hasOption('s')) {\n+                accessConfig.setSecretKey(commandLine.getOptionValue('s').trim());\n+            }\n+\n+            // Admin\n+            if (commandLine.hasOption('m')) {\n+                accessConfig.setAdmin(Boolean.parseBoolean(commandLine.getOptionValue('m').trim()));\n+            }\n+\n+            // DefaultTopicPerm\n+            if (commandLine.hasOption('i')) {\n+                accessConfig.setDefaultTopicPerm(commandLine.getOptionValue('i').trim());\n+            }\n+\n+            // DefaultGroupPerm\n+            if (commandLine.hasOption('u')) {\n+                accessConfig.setDefaultGroupPerm(commandLine.getOptionValue('u').trim());\n+            }\n+\n+            // WhiteRemoteAddress\n+            if (commandLine.hasOption('w')) {\n+                accessConfig.setWhiteRemoteAddress(commandLine.getOptionValue('w').trim());\n+            }\n+\n+            // TopicPerms list value\n+            if (commandLine.hasOption('t')) {\n+                String[] topicPerms = commandLine.getOptionValue('t').trim().split(\",\");\n+                List<String> topicPermList = new ArrayList<String>();\n+                if (topicPerms != null) {\n+                    for (String topicPerm : topicPerms) {\n+                        topicPermList.add(topicPerm);\n+                    }\n+                }\n+                accessConfig.setTopicPerms(topicPermList);\n+            }\n+\n+            // GroupPerms list value\n+            if (commandLine.hasOption('g')) {\n+                String[] groupPerms = commandLine.getOptionValue('g').trim().split(\",\");\n+                List<String> groupPermList = new ArrayList<String>();\n+                if (groupPerms != null) {\n+                    for (String groupPerm : groupPerms) {\n+                        groupPermList.add(groupPerm);\n+                    }\n+                }\n+                accessConfig.setGroupPerms(groupPermList);\n+            }\n+\n+            if (commandLine.hasOption('b')) {\n+                String addr = commandLine.getOptionValue('b').trim();\n+\n+                defaultMQAdminExt.start();\n+                defaultMQAdminExt.createAndUpdatePlainAccessConfig(addr, accessConfig);\n+\n+                System.out.printf(\"create or update plain access config to %s success.%n\", addr);\n+                System.out.printf(\"%s\", accessConfig);\n+                return;\n+\n+            } else if (commandLine.hasOption('c')) {\n+                String clusterName = commandLine.getOptionValue('c').trim();\n+\n+                defaultMQAdminExt.start();\n+                Set<String> masterSet =\n+                    CommandUtil.fetchMasterAddrByClusterName(defaultMQAdminExt, clusterName);\n+                for (String addr : masterSet) {\n+                    defaultMQAdminExt.createAndUpdatePlainAccessConfig(addr, accessConfig);\n+                    System.out.printf(\"create or update plain access config to %s success.%n\", addr);\n+                }\n+\n+                System.out.printf(\"%s\", accessConfig);\n+                return;\n+            }\n+\n+            ServerUtil.printCommandLineHelp(\"mqadmin \" + this.commandName(), options);\n+        } catch (Exception e) {\n+            throw new SubCommandException(this.getClass().getSimpleName() + \" command failed\", e);\n+        } finally {\n+            defaultMQAdminExt.shutdown();\n+        }\n+    }\n+}", "filename": "tools/src/main/java/org/apache/rocketmq/tools/command/acl/UpdateAccessConfigSubCommand.java"}, {"additions": 101, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/tools/src/main/java/org/apache/rocketmq/tools/command/acl/UpdateGlobalWhiteAddrSubCommand.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/tools/src/main/java/org/apache/rocketmq/tools/command/acl/UpdateGlobalWhiteAddrSubCommand.java", "sha": "ef9d9407ced92504947f546f4e6dd88ecf3311f8", "changes": 101, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/tools/src/main/java/org/apache/rocketmq/tools/command/acl/UpdateGlobalWhiteAddrSubCommand.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.rocketmq.tools.command.acl;\n+\n+import java.util.Set;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.OptionGroup;\n+import org.apache.commons.cli.Options;\n+import org.apache.rocketmq.remoting.RPCHook;\n+import org.apache.rocketmq.srvutil.ServerUtil;\n+import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\n+import org.apache.rocketmq.tools.command.CommandUtil;\n+import org.apache.rocketmq.tools.command.SubCommand;\n+import org.apache.rocketmq.tools.command.SubCommandException;\n+\n+public class UpdateGlobalWhiteAddrSubCommand implements SubCommand {\n+\n+    @Override public String commandName() {\n+        return \"updateGlobalWhiteAddr\";\n+    }\n+\n+    @Override public String commandDesc() {\n+        return \"Update global white address for acl Config File in broker\";\n+    }\n+\n+    @Override public Options buildCommandlineOptions(Options options) {\n+\n+        OptionGroup optionGroup = new OptionGroup();\n+\n+        Option opt = new Option(\"b\", \"brokerAddr\", true, \"update global white address to which broker\");\n+        optionGroup.addOption(opt);\n+\n+        opt = new Option(\"c\", \"clusterName\", true, \"update global white address to which cluster\");\n+        optionGroup.addOption(opt);\n+\n+        optionGroup.setRequired(true);\n+        options.addOptionGroup(optionGroup);\n+\n+        opt = new Option(\"g\", \"globalWhiteRemoteAddresses\", true, \"set globalWhiteRemoteAddress list,eg: 10.10.103.*,192.168.0.*\");\n+        opt.setRequired(true);\n+        options.addOption(opt);\n+\n+        return options;\n+    }\n+\n+    @Override public void execute(CommandLine commandLine, Options options,\n+        RPCHook rpcHook) throws SubCommandException {\n+\n+        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);\n+        defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));\n+\n+        try {\n+            // GlobalWhiteRemoteAddresses list value\n+            String globalWhiteRemoteAddresses = commandLine.getOptionValue('g').trim();\n+\n+\n+            if (commandLine.hasOption('b')) {\n+                String addr = commandLine.getOptionValue('b').trim();\n+\n+                defaultMQAdminExt.start();\n+                defaultMQAdminExt.updateGlobalWhiteAddrConfig(addr, globalWhiteRemoteAddresses);\n+\n+                System.out.printf(\"update global white remote addresses to %s success.%n\", addr);\n+                return;\n+\n+            } else if (commandLine.hasOption('c')) {\n+                String clusterName = commandLine.getOptionValue('c').trim();\n+\n+                defaultMQAdminExt.start();\n+                Set<String> masterSet =\n+                    CommandUtil.fetchMasterAddrByClusterName(defaultMQAdminExt, clusterName);\n+                for (String addr : masterSet) {\n+                    defaultMQAdminExt.updateGlobalWhiteAddrConfig(addr, globalWhiteRemoteAddresses);\n+                    System.out.printf(\"update global white remote addresses to %s success.%n\", addr);\n+                }\n+                return;\n+            }\n+\n+            ServerUtil.printCommandLineHelp(\"mqadmin \" + this.commandName(), options);\n+        } catch (Exception e) {\n+            throw new SubCommandException(this.getClass().getSimpleName() + \" command failed\", e);\n+        } finally {\n+            defaultMQAdminExt.shutdown();\n+        }\n+    }\n+}", "filename": "tools/src/main/java/org/apache/rocketmq/tools/command/acl/UpdateGlobalWhiteAddrSubCommand.java"}, {"additions": 38, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/tools/src/test/java/org/apache/rocketmq/tools/command/acl/ClusterAclConfigVersionListSubCommandTest.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/tools/src/test/java/org/apache/rocketmq/tools/command/acl/ClusterAclConfigVersionListSubCommandTest.java", "sha": "ba8baa3e624ee258b97bd828187b56085bd46c3e", "changes": 38, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/tools/src/test/java/org/apache/rocketmq/tools/command/acl/ClusterAclConfigVersionListSubCommandTest.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.rocketmq.tools.command.acl;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.PosixParser;\n+import org.apache.rocketmq.srvutil.ServerUtil;\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class ClusterAclConfigVersionListSubCommandTest {\n+\n+    @Test\n+    public void testExecute() {\n+        ClusterAclConfigVersionListSubCommand cmd = new ClusterAclConfigVersionListSubCommand();\n+        Options options = ServerUtil.buildCommandlineOptions(new Options());\n+        String[] subargs = new String[] {\"-c default-cluster\"};\n+        final CommandLine commandLine =\n+            ServerUtil.parseCmdLine(\"mqadmin \" + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());\n+        assertThat(commandLine.getOptionValue('c').trim()).isEqualTo(\"default-cluster\");\n+    }\n+}", "filename": "tools/src/test/java/org/apache/rocketmq/tools/command/acl/ClusterAclConfigVersionListSubCommandTest.java"}, {"additions": 39, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/tools/src/test/java/org/apache/rocketmq/tools/command/acl/DeleteAccessConfigSubCommandTest.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/tools/src/test/java/org/apache/rocketmq/tools/command/acl/DeleteAccessConfigSubCommandTest.java", "sha": "74092f45f7933575e6e88eb8bbe955504b013b90", "changes": 39, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/tools/src/test/java/org/apache/rocketmq/tools/command/acl/DeleteAccessConfigSubCommandTest.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.rocketmq.tools.command.acl;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.PosixParser;\n+import org.apache.rocketmq.srvutil.ServerUtil;\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class DeleteAccessConfigSubCommandTest {\n+\n+    @Test\n+    public void testExecute() {\n+        DeleteAccessConfigSubCommand cmd = new DeleteAccessConfigSubCommand();\n+        Options options = ServerUtil.buildCommandlineOptions(new Options());\n+        String[] subargs = new String[] {\"-a unit-test\", \"-c default-cluster\"};\n+        final CommandLine commandLine =\n+            ServerUtil.parseCmdLine(\"mqadmin \" + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());\n+        assertThat(commandLine.getOptionValue('a').trim()).isEqualTo(\"unit-test\");\n+        assertThat(commandLine.getOptionValue('c').trim()).isEqualTo(\"default-cluster\");\n+    }\n+}", "filename": "tools/src/test/java/org/apache/rocketmq/tools/command/acl/DeleteAccessConfigSubCommandTest.java"}, {"additions": 89, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/tools/src/test/java/org/apache/rocketmq/tools/command/acl/UpdateAccessConfigSubCommandTest.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/tools/src/test/java/org/apache/rocketmq/tools/command/acl/UpdateAccessConfigSubCommandTest.java", "sha": "2c133a252eca2aa9cf8273f898e1545555ce91cb", "changes": 89, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/tools/src/test/java/org/apache/rocketmq/tools/command/acl/UpdateAccessConfigSubCommandTest.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.rocketmq.tools.command.acl;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.PosixParser;\n+import org.apache.rocketmq.common.PlainAccessConfig;\n+import org.apache.rocketmq.srvutil.ServerUtil;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class UpdateAccessConfigSubCommandTest {\n+\n+    @Test\n+    public void testExecute() {\n+        UpdateAccessConfigSubCommand cmd = new UpdateAccessConfigSubCommand();\n+        Options options = ServerUtil.buildCommandlineOptions(new Options());\n+        String[] subargs = new String[] {\n+            \"-b 127.0.0.1:10911\",\n+            \"-a RocketMQ\",\n+            \"-s 12345678\",\n+            \"-w 192.168.0.*\",\n+            \"-i DENY\",\n+            \"-u SUB\",\n+            \"-t topicA=DENY;topicB=PUB|SUB\",\n+            \"-g groupA=DENY;groupB=SUB\",\n+            \"-m true\"};\n+        final CommandLine commandLine =\n+            ServerUtil.parseCmdLine(\"mqadmin \" + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());\n+        assertThat(commandLine.getOptionValue('b').trim()).isEqualTo(\"127.0.0.1:10911\");\n+        assertThat(commandLine.getOptionValue('a').trim()).isEqualTo(\"RocketMQ\");\n+        assertThat(commandLine.getOptionValue('s').trim()).isEqualTo(\"12345678\");\n+        assertThat(commandLine.getOptionValue('w').trim()).isEqualTo(\"192.168.0.*\");\n+        assertThat(commandLine.getOptionValue('i').trim()).isEqualTo(\"DENY\");\n+        assertThat(commandLine.getOptionValue('u').trim()).isEqualTo(\"SUB\");\n+        assertThat(commandLine.getOptionValue('t').trim()).isEqualTo(\"topicA=DENY;topicB=PUB|SUB\");\n+        assertThat(commandLine.getOptionValue('g').trim()).isEqualTo(\"groupA=DENY;groupB=SUB\");\n+        assertThat(commandLine.getOptionValue('m').trim()).isEqualTo(\"true\");\n+\n+        PlainAccessConfig accessConfig = new PlainAccessConfig();\n+\n+        // topicPerms list value\n+        if (commandLine.hasOption('t')) {\n+            String[] topicPerms = commandLine.getOptionValue('t').trim().split(\";\");\n+            List<String> topicPermList = new ArrayList<String>();\n+            if (topicPerms != null) {\n+                for (String topicPerm : topicPerms) {\n+                    topicPermList.add(topicPerm);\n+                }\n+            }\n+            accessConfig.setTopicPerms(topicPermList);\n+        }\n+\n+        // groupPerms list value\n+        if (commandLine.hasOption('g')) {\n+            String[] groupPerms = commandLine.getOptionValue('g').trim().split(\";\");\n+            List<String> groupPermList = new ArrayList<String>();\n+            if (groupPerms != null) {\n+                for (String groupPerm : groupPerms) {\n+                    groupPermList.add(groupPerm);\n+                }\n+            }\n+            accessConfig.setGroupPerms(groupPermList);\n+        }\n+\n+        Assert.assertTrue(accessConfig.getTopicPerms().contains(\"topicB=PUB|SUB\"));\n+        Assert.assertTrue(accessConfig.getGroupPerms().contains(\"groupB=SUB\"));\n+\n+    }\n+}", "filename": "tools/src/test/java/org/apache/rocketmq/tools/command/acl/UpdateAccessConfigSubCommandTest.java"}, {"additions": 39, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/tools/src/test/java/org/apache/rocketmq/tools/command/acl/UpdateGlobalWhiteAddrSubCommandTest.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/tools/src/test/java/org/apache/rocketmq/tools/command/acl/UpdateGlobalWhiteAddrSubCommandTest.java", "sha": "66d609dfd21d4529ede451efe2a6a4a3f250e77b", "changes": 39, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/tools/src/test/java/org/apache/rocketmq/tools/command/acl/UpdateGlobalWhiteAddrSubCommandTest.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.rocketmq.tools.command.acl;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.PosixParser;\n+import org.apache.rocketmq.srvutil.ServerUtil;\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class UpdateGlobalWhiteAddrSubCommandTest {\n+\n+    @Test\n+    public void testExecute() {\n+        UpdateGlobalWhiteAddrSubCommand cmd = new UpdateGlobalWhiteAddrSubCommand();\n+        Options options = ServerUtil.buildCommandlineOptions(new Options());\n+        String[] subargs = new String[] {\"-g 10.10.103.*,192.168.0.*\", \"-c default-cluster\"};\n+        final CommandLine commandLine =\n+            ServerUtil.parseCmdLine(\"mqadmin \" + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());\n+        assertThat(commandLine.getOptionValue('g').trim()).isEqualTo(\"10.10.103.*,192.168.0.*\");\n+        assertThat(commandLine.getOptionValue('c').trim()).isEqualTo(\"default-cluster\");\n+    }\n+}", "filename": "tools/src/test/java/org/apache/rocketmq/tools/command/acl/UpdateGlobalWhiteAddrSubCommandTest.java"}, {"additions": 0, "raw_url": "https://github.com/apache/rocketmq/raw/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/tools/src/test/java/org/apache/rocketmq/tools/command/topic/UpdateTopicSubCommandTest.java", "blob_url": "https://github.com/apache/rocketmq/blob/a2165d80517d46a3f8be62a1a4e3d3a2290afab8/tools/src/test/java/org/apache/rocketmq/tools/command/topic/UpdateTopicSubCommandTest.java", "sha": "7e7863f6dc2a7eb0f49d91a2320e9b1325a7bd5f", "changes": 2, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/tools/src/test/java/org/apache/rocketmq/tools/command/topic/UpdateTopicSubCommandTest.java?ref=a2165d80517d46a3f8be62a1a4e3d3a2290afab8", "patch": "@@ -31,7 +31,6 @@ public void testExecute() {\n         Options options = ServerUtil.buildCommandlineOptions(new Options());\n         String[] subargs = new String[] {\n             \"-b 127.0.0.1:10911\",\n-            \"-c default-cluster\",\n             \"-t unit-test\",\n             \"-r 8\",\n             \"-w 8\",\n@@ -42,7 +41,6 @@ public void testExecute() {\n         final CommandLine commandLine =\n             ServerUtil.parseCmdLine(\"mqadmin \" + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser());\n         assertThat(commandLine.getOptionValue('b').trim()).isEqualTo(\"127.0.0.1:10911\");\n-        assertThat(commandLine.getOptionValue('c').trim()).isEqualTo(\"default-cluster\");\n         assertThat(commandLine.getOptionValue('r').trim()).isEqualTo(\"8\");\n         assertThat(commandLine.getOptionValue('w').trim()).isEqualTo(\"8\");\n         assertThat(commandLine.getOptionValue('t').trim()).isEqualTo(\"unit-test\");", "filename": "tools/src/test/java/org/apache/rocketmq/tools/command/topic/UpdateTopicSubCommandTest.java"}], "repo": "rocketmq"}, {"commit": "https://github.com/apache/rocketmq/commit/776911d458d45280de3a4c0f4d6b2bd2ee98d6b2", "parent": "https://github.com/apache/rocketmq/commit/85467dfd34d8ff379d2ddfec0489d78dcba20c27", "message": "[ROCKETMQ-34] Potential NPE in NettyConnetManageHandler#connect, closes apache/incubator-rocketmq#30", "bug_id": "rocketmq_3", "file": [{"additions": 10, "raw_url": "https://github.com/apache/rocketmq/raw/776911d458d45280de3a4c0f4d6b2bd2ee98d6b2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java", "blob_url": "https://github.com/apache/rocketmq/blob/776911d458d45280de3a4c0f4d6b2bd2ee98d6b2/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java", "sha": "9fdaccf7681be4fe7d1fcbea79ce4ea0cada55cb", "changes": 19, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java?ref=776911d458d45280de3a4c0f4d6b2bd2ee98d6b2", "patch": "@@ -73,12 +73,12 @@\n     private final Bootstrap bootstrap = new Bootstrap();\n     private final EventLoopGroup eventLoopGroupWorker;\n     private final Lock lockChannelTables = new ReentrantLock();\n-    private final ConcurrentHashMap<String /* addr */, ChannelWrapper> channelTables = new ConcurrentHashMap<String, ChannelWrapper>();\n+    private final ConcurrentHashMap<String /* addr */, ChannelWrapper> channelTables = new ConcurrentHashMap<>();\n \n     private final Timer timer = new Timer(\"ClientHouseKeepingService\", true);\n \n-    private final AtomicReference<List<String>> namesrvAddrList = new AtomicReference<List<String>>();\n-    private final AtomicReference<String> namesrvAddrChoosed = new AtomicReference<String>();\n+    private final AtomicReference<List<String>> namesrvAddrList = new AtomicReference<>();\n+    private final AtomicReference<String> namesrvAddrChoosed = new AtomicReference<>();\n     private final AtomicInteger namesrvIndex = new AtomicInteger(initValueIndex());\n     private final Lock lockNamesrvChannel = new ReentrantLock();\n \n@@ -155,7 +155,7 @@ public void initChannel(SocketChannel ch) throws Exception {\n                         new NettyEncoder(),\n                         new NettyDecoder(),\n                         new IdleStateHandler(0, 0, nettyClientConfig.getClientChannelMaxIdleTimeSeconds()),\n-                        new NettyConnetManageHandler(),\n+                        new NettyConnectManageHandler(),\n                         new NettyClientHandler());\n                 }\n             });\n@@ -527,7 +527,7 @@ public void registerProcessor(int requestCode, NettyRequestProcessor processor,\n             executorThis = this.publicExecutor;\n         }\n \n-        Pair<NettyRequestProcessor, ExecutorService> pair = new Pair<NettyRequestProcessor, ExecutorService>(processor, executorThis);\n+        Pair<NettyRequestProcessor, ExecutorService> pair = new Pair<>(processor, executorThis);\n         this.processorTable.put(requestCode, pair);\n     }\n \n@@ -596,17 +596,18 @@ protected void channelRead0(ChannelHandlerContext ctx, RemotingCommand msg) thro\n         }\n     }\n \n-    class NettyConnetManageHandler extends ChannelDuplexHandler {\n+    class NettyConnectManageHandler extends ChannelDuplexHandler {\n         @Override\n-        public void connect(ChannelHandlerContext ctx, SocketAddress remoteAddress, SocketAddress localAddress, ChannelPromise promise)\n-            throws Exception {\n+        public void connect(ChannelHandlerContext ctx, SocketAddress remoteAddress, SocketAddress localAddress,\n+            ChannelPromise promise) throws Exception {\n             final String local = localAddress == null ? \"UNKNOW\" : localAddress.toString();\n             final String remote = remoteAddress == null ? \"UNKNOW\" : remoteAddress.toString();\n             log.info(\"NETTY CLIENT PIPELINE: CONNECT  {} => {}\", local, remote);\n+\n             super.connect(ctx, remoteAddress, localAddress, promise);\n \n             if (NettyRemotingClient.this.channelEventListener != null) {\n-                NettyRemotingClient.this.putNettyEvent(new NettyEvent(NettyEventType.CONNECT, remoteAddress.toString(), ctx.channel()));\n+                NettyRemotingClient.this.putNettyEvent(new NettyEvent(NettyEventType.CONNECT, remote, ctx.channel()));\n             }\n         }\n ", "filename": "remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java"}], "repo": "rocketmq"}, {"commit": "https://github.com/apache/rocketmq/commit/85467dfd34d8ff379d2ddfec0489d78dcba20c27", "parent": "https://github.com/apache/rocketmq/commit/9d76ea923159ff36d462b1809104164e270fce96", "message": "Fix-35 [ROCKETMQ-35] Reslove underlying NPE in ConsumeRequest, closes apache/incubator-rocketmq#32", "bug_id": "rocketmq_4", "file": [{"additions": 5, "raw_url": "https://github.com/apache/rocketmq/raw/85467dfd34d8ff379d2ddfec0489d78dcba20c27/client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyService.java", "blob_url": "https://github.com/apache/rocketmq/blob/85467dfd34d8ff379d2ddfec0489d78dcba20c27/client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyService.java", "sha": "f566ed0fcca4781d0eb7cca0b62ad059d286cc0f", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyService.java?ref=85467dfd34d8ff379d2ddfec0489d78dcba20c27", "patch": "@@ -439,7 +439,11 @@ public void run() {\n             } else if (ConsumeConcurrentlyStatus.CONSUME_SUCCESS == status) {\n                 returnType = ConsumeReturnType.SUCCESS;\n             }\n-            consumeMessageContext.getProps().put(MixAll.CONSUME_CONTEXT_TYPE, returnType.name());\n+\n+            if (ConsumeMessageConcurrentlyService.this.defaultMQPushConsumerImpl.hasHook()) {\n+                consumeMessageContext.getProps().put(MixAll.CONSUME_CONTEXT_TYPE, returnType.name());\n+            }\n+\n             if (null == status) {\n                 log.warn(\"consumeMessage return null, Group: {} Msgs: {} MQ: {}\",\n                     ConsumeMessageConcurrentlyService.this.consumerGroup,", "filename": "client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyService.java"}, {"additions": 5, "raw_url": "https://github.com/apache/rocketmq/raw/85467dfd34d8ff379d2ddfec0489d78dcba20c27/client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java", "blob_url": "https://github.com/apache/rocketmq/blob/85467dfd34d8ff379d2ddfec0489d78dcba20c27/client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java", "sha": "1fa474caa1d256920ee7aa2ff23ef87ef1a5990a", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java?ref=85467dfd34d8ff379d2ddfec0489d78dcba20c27", "patch": "@@ -501,7 +501,11 @@ public void run() {\n                             } else if (ConsumeOrderlyStatus.SUCCESS == status) {\n                                 returnType = ConsumeReturnType.SUCCESS;\n                             }\n-                            consumeMessageContext.getProps().put(MixAll.CONSUME_CONTEXT_TYPE, returnType.name());\n+\n+                            if (ConsumeMessageOrderlyService.this.defaultMQPushConsumerImpl.hasHook()) {\n+                                consumeMessageContext.getProps().put(MixAll.CONSUME_CONTEXT_TYPE, returnType.name());\n+                            }\n+\n                             if (null == status) {\n                                 status = ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT;\n                             }", "filename": "client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java"}], "repo": "rocketmq"}]
