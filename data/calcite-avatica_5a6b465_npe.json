[
    {
        "repo": "calcite-avatica",
        "commit": "https://github.com/apache/calcite-avatica/commit/5a6b465b5b67cad20d309abe5d570e5311a03cbb",
        "bug_id": "calcite-avatica_5a6b465",
        "message": "Fix NPE in CachingRelMetadataProvider if arg is null.",
        "parent": "https://github.com/apache/calcite-avatica/commit/8b0a22ee178b5f96cd2982ba75e8b36a2eb2ed5f",
        "patched_files": [
            "CachingRelMetadataProvider.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 11,
                "raw_url": "https://github.com/apache/calcite-avatica/raw/5a6b465b5b67cad20d309abe5d570e5311a03cbb/core/src/main/java/org/eigenbase/rel/metadata/CachingRelMetadataProvider.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/eigenbase/rel/metadata/CachingRelMetadataProvider.java?ref=5a6b465b5b67cad20d309abe5d570e5311a03cbb",
                "filename": "core/src/main/java/org/eigenbase/rel/metadata/CachingRelMetadataProvider.java",
                "deletions": 1,
                "sha": "e3b8f23b8a2f1eaa194b9632af92694ca379322d",
                "blob_url": "https://github.com/apache/calcite-avatica/blob/5a6b465b5b67cad20d309abe5d570e5311a03cbb/core/src/main/java/org/eigenbase/rel/metadata/CachingRelMetadataProvider.java",
                "patch": "@@ -39,6 +39,13 @@\n \n   private final RelOptPlanner planner;\n \n+  private static final Object NULL_SENTINEL = new Object() {\n+    @Override\n+    public String toString() {\n+      return \"{null}\";\n+    }\n+  };\n+\n   //~ Constructors -----------------------------------------------------------\n \n   public CachingRelMetadataProvider(\n@@ -93,7 +100,10 @@ public Object invoke(Object proxy, Method method, Object[] args)\n       builder.add(method);\n       builder.add(metadata.rel());\n       if (args != null) {\n-        builder.add(args);\n+        for (Object arg : args) {\n+          // Replace null values because ImmutableList does not allow them.\n+          builder.add(arg == null ? NULL_SENTINEL : arg);\n+        }\n       }\n       List<Object> key = builder.build();\n ",
                "changes": 12
            },
            {
                "status": "modified",
                "additions": 23,
                "raw_url": "https://github.com/apache/calcite-avatica/raw/5a6b465b5b67cad20d309abe5d570e5311a03cbb/core/src/test/java/org/eigenbase/test/RelMetadataTest.java",
                "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/java/org/eigenbase/test/RelMetadataTest.java?ref=5a6b465b5b67cad20d309abe5d570e5311a03cbb",
                "filename": "core/src/test/java/org/eigenbase/test/RelMetadataTest.java",
                "deletions": 1,
                "sha": "7b587fe1174b77eb63ac0db775843352bd628efc",
                "blob_url": "https://github.com/apache/calcite-avatica/blob/5a6b465b5b67cad20d309abe5d570e5311a03cbb/core/src/test/java/org/eigenbase/test/RelMetadataTest.java",
                "patch": "@@ -27,6 +27,8 @@\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Iterables;\n \n+import org.hamcrest.CoreMatchers;\n+import org.hamcrest.Matcher;\n import org.junit.Ignore;\n import org.junit.Test;\n \n@@ -62,6 +64,10 @@\n \n   //~ Methods ----------------------------------------------------------------\n \n+  private static Matcher<? super Number> nearTo(Number v, Number epsilon) {\n+    return CoreMatchers.equalTo(v); // TODO: use epsilon\n+  }\n+\n   // ----------------------------------------------------------------------\n   // Tests for getPercentageOriginalRows\n   // ----------------------------------------------------------------------\n@@ -476,7 +482,7 @@ private void checkRelSelectivity(\n     RelNode rel =\n         convertSql(\n             \"select * from (select * from emp union all select * from emp) \"\n-            + \"where deptno = 10\");\n+                + \"where deptno = 10\");\n     checkRelSelectivity(rel, DEFAULT_EQUAL_SELECTIVITY);\n   }\n \n@@ -490,6 +496,22 @@ private void checkRelSelectivity(\n         DEFAULT_COMP_SELECTIVITY * DEFAULT_EQUAL_SELECTIVITY);\n   }\n \n+  /** Checks that we can cache a metadata request that includes a null\n+   * argument. */\n+  @Test public void testSelectivityAggCached() {\n+    RelNode rel =\n+        convertSql(\n+            \"select deptno, count(*) from emp where deptno > 10 \"\n+            + \"group by deptno having count(*) = 0\");\n+    rel.getCluster().setMetadataProvider(\n+        new CachingRelMetadataProvider(\n+            rel.getCluster().getMetadataProvider(),\n+            rel.getCluster().getPlanner()));\n+    Double result = RelMetadataQuery.getSelectivity(rel, null);\n+    assertThat(result,\n+        nearTo(DEFAULT_COMP_SELECTIVITY * DEFAULT_EQUAL_SELECTIVITY, EPSILON));\n+  }\n+\n   @Test public void testDistinctRowCountTable() {\n     // no unique key information is available so return null\n     RelNode rel = convertSql(\"select * from emp where deptno = 10\");",
                "changes": 24
            }
        ],
        "unit_tests": [
            "RelMetadataTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "core/src/test/java/org/eigenbase/test/RelMetadataTest.java",
        "buggy_files": [
            "core/src/main/java/org/eigenbase/rel/metadata/CachingRelMetadataProvider.java"
        ],
        "fixed": true
    }
]