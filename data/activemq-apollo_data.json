[
    {
        "repo": "activemq-apollo",
        "message": " Fixes APLO-181: java.lang.NullPointerException when using the UDP connector\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/activemq-apollo/trunk@1309507 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq-apollo/commit/c1cd810a60d01740019c9a42d684496fd8540aa6",
        "parent": "https://github.com/apache/activemq-apollo/commit/99b351a1938a9c938763280242142bb87fbe80bd",
        "bug_id": "activemq-apollo_1",
        "file": [
            {
                "sha": "372c23c573a0984317e823d7cd17126729f50559",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Connection.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/c1cd810a60d01740019c9a42d684496fd8540aa6/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Connection.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/c1cd810a60d01740019c9a42d684496fd8540aa6/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Connection.scala",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Connection.scala?ref=c1cd810a60d01740019c9a42d684496fd8540aa6",
                "patch": "@@ -155,8 +155,8 @@ class BrokerConnection(var connector: Connector, val id:Long) extends Connection\n     result.state_since = service_state.since\n     result.protocol = protocol_handler.protocol\n     result.connector = connector.id\n-    result.remote_address = transport.getRemoteAddress.toString\n-    result.local_address = transport.getLocalAddress.toString\n+    result.remote_address = Option(transport.getRemoteAddress).map(_.toString).getOrElse(null)\n+    result.local_address = Option(transport.getLocalAddress).map(_.toString).getOrElse(null)\n     result.protocol_session_id = protocol_handler.session_id.getOrElse(null)\n     val wf = transport.getProtocolCodec\n     if( wf!=null ) {",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "activemq-apollo",
        "message": "Fixing bug that can cause NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/activemq-apollo/trunk@1507245 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq-apollo/commit/2b44419c13f727f44c2767ec0de9f2129baa7b1a",
        "parent": "https://github.com/apache/activemq-apollo/commit/b970fc9aa7732cad914c834cbf578842d3134aab",
        "bug_id": "activemq-apollo_2",
        "file": [
            {
                "sha": "d1bc270e3eef6b906eea979e27bf3f661f962f76",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/security/SecurityFactory.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/2b44419c13f727f44c2767ec0de9f2129baa7b1a/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/security/SecurityFactory.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/2b44419c13f727f44c2767ec0de9f2129baa7b1a/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/security/SecurityFactory.scala",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/security/SecurityFactory.scala?ref=2b44419c13f727f44c2767ec0de9f2129baa7b1a",
                "patch": "@@ -55,7 +55,7 @@ object DefaultSecurityFactory extends SecurityFactory {\n       // use the broker's settings..\n       host.authenticator = broker.authenticator\n     }\n-    if( broker.authenticator !=null ) {\n+    if( host.authenticator !=null ) {\n       host.authorizer = Authorizer(host)\n     } else {\n       host.authorizer = Authorizer()",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "activemq-apollo",
        "message": "Fixes NPE identified in APLO-177.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/activemq-apollo/trunk@1377653 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq-apollo/commit/eb465a0d3d018618609442a03b8a25427ba28cfc",
        "parent": "https://github.com/apache/activemq-apollo/commit/c2cf6af13602d97ac195dec3365757777aa20b72",
        "bug_id": "activemq-apollo_3",
        "file": [
            {
                "sha": "bc7cc9af3902a15e8655ae0c5d123940a416990e",
                "filename": "apollo-stomp/src/main/scala/org/apache/activemq/apollo/stomp/StompUdpProtocol.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/eb465a0d3d018618609442a03b8a25427ba28cfc/apollo-stomp/src/main/scala/org/apache/activemq/apollo/stomp/StompUdpProtocol.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/eb465a0d3d018618609442a03b8a25427ba28cfc/apollo-stomp/src/main/scala/org/apache/activemq/apollo/stomp/StompUdpProtocol.scala",
                "status": "modified",
                "changes": 9,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-stomp/src/main/scala/org/apache/activemq/apollo/stomp/StompUdpProtocol.scala?ref=eb465a0d3d018618609442a03b8a25427ba28cfc",
                "patch": "@@ -93,11 +93,12 @@ class StompUdpProtocol extends UdpProtocol {\n       var headers = frame.headers\n       val login = get(headers, LOGIN)\n       val passcode = get(headers, PASSCODE)\n+      val sc = new SecurityContext\n+      sc.connector_id = connection.connector.id\n+      sc.local_address = connection.transport.getLocalAddress\n+      sc.session_id = session_id\n       if( login.isDefined || passcode.isDefined ) {\n         val sc = new SecurityContext\n-        sc.connector_id = connection.connector.id\n-        sc.local_address = connection.transport.getLocalAddress\n-        sc.session_id = session_id\n         for( value <- login ) {\n           sc.user = value.toString\n           headers = headers.filterNot( _._1 == LOGIN)\n@@ -108,7 +109,7 @@ class StompUdpProtocol extends UdpProtocol {\n         }\n         (sc, frame.copy(headers=headers))\n       } else {\n-        (null, frame)\n+        (sc, frame)\n       }\n     }\n ",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "activemq-apollo",
        "message": "Fixes NPE that occurred when you connected over WebSockets.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/activemq-apollo/trunk@1337180 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq-apollo/commit/a6ab19de9b60d55ba92872cdd8a9b3204064a1d2",
        "parent": "https://github.com/apache/activemq-apollo/commit/f17fdb5201e71d88a4b74b96ac962a0e6f2ee550",
        "bug_id": "activemq-apollo_4",
        "file": [
            {
                "sha": "9c5f37eb4ef4d7bc11f8c5f7d5285c9e44341774",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/jetty/WebSocketTransportFactory.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/a6ab19de9b60d55ba92872cdd8a9b3204064a1d2/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/jetty/WebSocketTransportFactory.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/a6ab19de9b60d55ba92872cdd8a9b3204064a1d2/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/jetty/WebSocketTransportFactory.scala",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/jetty/WebSocketTransportFactory.scala?ref=a6ab19de9b60d55ba92872cdd8a9b3204064a1d2",
                "patch": "@@ -226,6 +226,10 @@ object WebSocketTransportFactory extends TransportFactory.Provider with Log {\n       if( this.protocolCodec!=null ) {\n         this.protocolCodec.setReadableByteChannel(this)\n         this.protocolCodec.setWritableByteChannel(this)\n+        this.protocolCodec match {\n+          case protocolCodec:TransportAware => protocolCodec.setTransport(this);\n+          case _ =>\n+        }\n       }\n     }\n ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "activemq-apollo",
        "message": "Avoids a NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/activemq-apollo/trunk@1241098 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq-apollo/commit/7771ede75ec27a864a27ea1f6cfd373c8532e113",
        "parent": "https://github.com/apache/activemq-apollo/commit/dea7d31d0c80f00aeca0babaa05f1d8061f397f9",
        "bug_id": "activemq-apollo_5",
        "file": [
            {
                "sha": "d6f507b8ad3a2e1f16cbee841e86eb28bc1ca176",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Topic.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/7771ede75ec27a864a27ea1f6cfd373c8532e113/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Topic.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/7771ede75ec27a864a27ea1f6cfd373c8532e113/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Topic.scala",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Topic.scala?ref=7771ede75ec27a864a27ea1f6cfd373c8532e113",
                "patch": "@@ -388,6 +388,7 @@ class Topic(val router:LocalRouter, val address:DestinationAddress, var config_u\n       copy.sender = address\n \n       val producer = new  DeliveryProducerRoute(router) {\n+        refiller = NOOP\n         val dispatch_queue = createQueue()\n         override protected def on_connected = {\n           copy.ack = (d,x) => consumer.dispatch_queue {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "activemq-apollo",
        "message": "Protect against NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/activemq-apollo/trunk@1097304 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq-apollo/commit/2be6d2615787134c5dd0ea688f81243429e44477",
        "parent": "https://github.com/apache/activemq-apollo/commit/354361c83a6399c29bf62e15ab89cb53b7e94546",
        "bug_id": "activemq-apollo_6",
        "file": [
            {
                "sha": "8b3730c70781024693785b463d5fe71720594af6",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/2be6d2615787134c5dd0ea688f81243429e44477/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/2be6d2615787134c5dd0ea688f81243429e44477/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala?ref=2be6d2615787134c5dd0ea688f81243429e44477",
                "patch": "@@ -1372,7 +1372,11 @@ class Subscription(val queue:Queue, val consumer:DeliveryConsumer) extends Deliv\n     assert(pos!=null)\n \n     session = consumer.connect(this)\n-    session.refiller = dispatch_queue.runnable { pos.run }\n+    session.refiller = dispatch_queue.runnable {\n+      if( pos!=null ) {\n+        pos.run\n+      }\n+    }\n     queue.head_entry ::= this\n \n     queue.all_subscriptions += consumer -> this",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "activemq-apollo",
        "message": "NPE protection.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/activemq-apollo/trunk@1064204 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq-apollo/commit/5848a0bf854af4a5d12e4bc12e0ccbfdbdf7a2aa",
        "parent": "https://github.com/apache/activemq-apollo/commit/81cd0e950d4b78bb62e423807d0191aa5fadcc34",
        "bug_id": "activemq-apollo_7",
        "file": [
            {
                "sha": "b9c17c1450b45576d1a9ed88c3ede3c65056012b",
                "filename": "apollo-util/src/main/scala/org/apache/activemq/apollo/util/Logging.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/5848a0bf854af4a5d12e4bc12e0ccbfdbdf7a2aa/apollo-util/src/main/scala/org/apache/activemq/apollo/util/Logging.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/5848a0bf854af4a5d12e4bc12e0ccbfdbdf7a2aa/apollo-util/src/main/scala/org/apache/activemq/apollo/util/Logging.scala",
                "status": "modified",
                "changes": 24,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-util/src/main/scala/org/apache/activemq/apollo/util/Logging.scala?ref=5848a0bf854af4a5d12e4bc12e0ccbfdbdf7a2aa",
                "patch": "@@ -39,17 +39,21 @@ trait Log {\n   val log = LoggerFactory.getLogger(getClass.getName.stripSuffix(\"$\"))\n \n   private def with_throwable(e:Throwable)(func: =>Unit) = {\n-    val stack_ref = if( log.isDebugEnabled ) {\n-      val id = next_exception_id\n-      MDC.put(\"stack reference\", id.toString);\n-      Some(id)\n+    if( e!=null ) {\n+      val stack_ref = if( log.isDebugEnabled ) {\n+        val id = next_exception_id\n+        MDC.put(\"stack reference\", id.toString);\n+        Some(id)\n+      } else {\n+        None\n+      }\n+      func\n+      stack_ref.foreach { id=>\n+        log.debug(\"stack trace: \"+id, e)\n+        MDC.remove(\"stack reference\")\n+      }\n     } else {\n-      None\n-    }\n-    func\n-    stack_ref.foreach { id=>\n-      log.debug(\"stack trace: \"+id, e)\n-      MDC.remove(\"stack reference\")\n+      func\n     }\n   }\n ",
                "deletions": 10
            }
        ]
    },
    {
        "repo": "activemq-apollo",
        "message": "fixes an NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/activemq-apollo/trunk@1055983 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq-apollo/commit/14c113ee64baf139497977abfe996bcfdde3b1fd",
        "parent": "https://github.com/apache/activemq-apollo/commit/1a1025738ab72f4a90419d08246691210ca5df87",
        "bug_id": "activemq-apollo_8",
        "file": [
            {
                "sha": "b75457dfe424bc7ecc5db81c837e45b96ae58be6",
                "filename": "apollo-stomp/src/main/scala/org/apache/activemq/apollo/stomp/StompProtocolHandler.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/14c113ee64baf139497977abfe996bcfdde3b1fd/apollo-stomp/src/main/scala/org/apache/activemq/apollo/stomp/StompProtocolHandler.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/14c113ee64baf139497977abfe996bcfdde3b1fd/apollo-stomp/src/main/scala/org/apache/activemq/apollo/stomp/StompProtocolHandler.scala",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-stomp/src/main/scala/org/apache/activemq/apollo/stomp/StompProtocolHandler.scala?ref=14c113ee64baf139497977abfe996bcfdde3b1fd",
                "patch": "@@ -563,8 +563,10 @@ class StompProtocolHandler extends ProtocolHandler with DispatchLogging {\n       val outbound_heart_beat_header = ascii(\"%d,%d\".format(outbound_heartbeat,inbound_heartbeat))\n       connected_headers += HEART_BEAT->outbound_heart_beat_header\n \n-      host.authenticator.user_name(security_context).foreach{ name=>\n-        connected_headers += USER_ID->encode_header(name)\n+      if( host.authenticator!=null ) {\n+        host.authenticator.user_name(security_context).foreach{ name=>\n+          connected_headers += USER_ID->encode_header(name)\n+        }\n       }\n \n       connection_sink.offer(StompFrame(CONNECTED,connected_headers.toList))",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "activemq-apollo",
        "message": "Fixes an NPE on recovery.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/activemq-apollo/trunk@1049155 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq-apollo/commit/99c12c4bafa1370ff561a1207e5813220b741856",
        "parent": "https://github.com/apache/activemq-apollo/commit/ae057ef209cd534a0f8c8272eeb1bf2e2a2ce04a",
        "bug_id": "activemq-apollo_9",
        "file": [
            {
                "sha": "5b78d7d831f761ea1f378a7d08bf191e6f9cb74f",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/99c12c4bafa1370ff561a1207e5813220b741856/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/99c12c4bafa1370ff561a1207e5813220b741856/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala?ref=99c12c4bafa1370ff561a1207e5813220b741856",
                "patch": "@@ -190,7 +190,7 @@ class Queue(val host: VirtualHost, var id:Long, val binding:Binding, var config:\n \n         host.store.listQueueEntryRanges(id, tune_flush_range_size) { ranges=>\n           dispatchQueue {\n-            if( !ranges.isEmpty ) {\n+            if( ranges!=null && !ranges.isEmpty ) {\n \n               ranges.foreach { range =>\n                 val entry = new QueueEntry(Queue.this, range.firstQueueSeq).init(range)",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "activemq-apollo",
        "message": "Fix NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/activemq-apollo/trunk@1043042 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq-apollo/commit/2e4691031d15d629e496fc7c61d1260144832435",
        "parent": "https://github.com/apache/activemq-apollo/commit/81be5300416d194cf7ebb0c706a089521e81705c",
        "bug_id": "activemq-apollo_10",
        "file": [
            {
                "sha": "f7afb11a5f2be2fc3d748edfde3e7624bccfd0d4",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/2e4691031d15d629e496fc7c61d1260144832435/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/2e4691031d15d629e496fc7c61d1260144832435/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala?ref=2e4691031d15d629e496fc7c61d1260144832435",
                "patch": "@@ -337,6 +337,7 @@ class Queue(val host: VirtualHost, var id:Long, val binding:Binding, var config:\n     // swap out messages.\n     cur = entries.getHead\n     while( cur!=null ) {\n+      val next = cur.getNext\n       val loaded = cur.as_loaded\n       if( loaded!=null ) {\n         if( cur.prefetch_flags==0 && !loaded.acquired  ) {\n@@ -346,7 +347,7 @@ class Queue(val host: VirtualHost, var id:Long, val binding:Binding, var config:\n           cur.load // just in case it's getting flushed.\n         }\n       }\n-      cur = cur.getNext\n+      cur = next\n     }\n \n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "activemq-apollo",
        "message": "Trying to fix a NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/activemq-apollo/trunk@1036434 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq-apollo/commit/4d81109792c87410dc8196bb92d032f68c77309b",
        "parent": "https://github.com/apache/activemq-apollo/commit/8448012ccf628633ea7f2e7a542f4d8bc0406c21",
        "bug_id": "activemq-apollo_11",
        "file": [
            {
                "sha": "01e2a2f07cfc145da4489f34fb35fe374046b194",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/4d81109792c87410dc8196bb92d032f68c77309b/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/4d81109792c87410dc8196bb92d032f68c77309b/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala?ref=4d81109792c87410dc8196bb92d032f68c77309b",
                "patch": "@@ -1393,7 +1393,7 @@ class Subscription(queue:Queue) extends DeliveryProducer with DispatchLogging {\n       cur.nack // this unlinks the entry.\n     }\n \n-    session.refiller = null\n+    session.refiller = NOOP\n     session.close\n     session = null\n   }",
                "deletions": 1
            },
            {
                "sha": "8a2ab761bae6f0b9e270e7c4f382bea177e9b824",
                "filename": "apollo-stomp/src/main/scala/org/apache/activemq/apollo/stomp/StompProtocol.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/4d81109792c87410dc8196bb92d032f68c77309b/apollo-stomp/src/main/scala/org/apache/activemq/apollo/stomp/StompProtocol.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/4d81109792c87410dc8196bb92d032f68c77309b/apollo-stomp/src/main/scala/org/apache/activemq/apollo/stomp/StompProtocol.scala",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-stomp/src/main/scala/org/apache/activemq/apollo/stomp/StompProtocol.scala?ref=4d81109792c87410dc8196bb92d032f68c77309b",
                "patch": "@@ -359,7 +359,7 @@ class StompProtocolHandler extends ProtocolHandler with DispatchLogging {\n       x\n     }, dispatchQueue, StompFrame)\n     connection_sink = new OverflowSink(session_manager.open(dispatchQueue));\n-    connection_sink.refiller = ^{}\n+    connection_sink.refiller = NOOP\n     resumeRead\n   }\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "activemq-apollo",
        "message": "Avoid a NPE by initializing /w an empty runnable.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/activemq-apollo/trunk@1036317 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq-apollo/commit/3dc8ffe5284e87685bf1552350e4b63257fc9bda",
        "parent": "https://github.com/apache/activemq-apollo/commit/73b1ad9785a8c001c99bb3a77514ec9d936f1d15",
        "bug_id": "activemq-apollo_12",
        "file": [
            {
                "sha": "f65d42e2fe2749e37c98769a169d5a2ca11157e1",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Sink.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/3dc8ffe5284e87685bf1552350e4b63257fc9bda/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Sink.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/3dc8ffe5284e87685bf1552350e4b63257fc9bda/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Sink.scala",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Sink.scala?ref=3dc8ffe5284e87685bf1552350e4b63257fc9bda",
                "patch": "@@ -247,7 +247,7 @@ class Session[T](val producer_queue:DispatchQueue, var credits:Int, mux:SinkMux[\n   // producer serial dispatch queue\n   ///////////////////////////////////////////////////\n \n-  var refiller:Runnable = null\n+  var refiller:Runnable = ^{}\n \n   override def full = {\n     assert(getCurrentQueue eq producer_queue)",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "activemq-apollo",
        "message": "Fixes NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/activemq-apollo/trunk@1032605 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq-apollo/commit/59b4fb3b8057345fad3075df95755b9ca9640200",
        "parent": "https://github.com/apache/activemq-apollo/commit/e3dab57dfdd639dee35d1a262b3e61c23edd6e76",
        "bug_id": "activemq-apollo_13",
        "file": [
            {
                "sha": "7e5691d68d3a8c96857d0fc38f00820a7146ffa8",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Router.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/59b4fb3b8057345fad3075df95755b9ca9640200/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Router.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/59b4fb3b8057345fad3075df95755b9ca9640200/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Router.scala",
                "status": "modified",
                "changes": 7,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Router.scala?ref=59b4fb3b8057345fad3075df95755b9ca9640200",
                "patch": "@@ -453,14 +453,15 @@ case class DeliveryProducerRoute(val router:Router, val destination:Destination,\n   private def delivered(delivery: Delivery): Unit = {\n     if (pendingAck != null) {\n       if (delivery.uow != null) {\n+        val ack = pendingAck\n         delivery.uow.setDisposer(^ {\n-          pendingAck(null)\n-          pendingAck=null\n+          ack(null)\n         })\n+\n       } else {\n         pendingAck(null)\n-        pendingAck==null\n       }\n+      pendingAck==null\n     }\n     if (delivery.uow != null) {\n       delivery.uow.release",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "activemq-apollo",
        "message": "Protect against a NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/sandbox/activemq-apollo-actor@961165 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq-apollo/commit/2c333f4fa1f1cabcf1c259db975a58167dfe176d",
        "parent": "https://github.com/apache/activemq-apollo/commit/905dff8a35744e7fa8fdafe2c5ca6c18d1e6aec7",
        "bug_id": "activemq-apollo_14",
        "file": [
            {
                "sha": "e08fc15ff25f184eaef6752f5b7bd67e2469d3bf",
                "filename": "activemq-tcp/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/2c333f4fa1f1cabcf1c259db975a58167dfe176d/activemq-tcp/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/2c333f4fa1f1cabcf1c259db975a58167dfe176d/activemq-tcp/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/activemq-tcp/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java?ref=2c333f4fa1f1cabcf1c259db975a58167dfe176d",
                "patch": "@@ -522,14 +522,14 @@ private boolean assertConnected() {\n     }\n \n     public void suspendRead() {\n-        if( isConnected() ) {\n+        if( isConnected() && readSource!=null ) {\n             readSource.suspend();\n         }\n     }\n \n \n     public void resumeRead() {\n-        if( isConnected() ) {\n+        if( isConnected() && readSource!=null ) {\n             readSource.resume();\n         }\n     }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "activemq-apollo",
        "message": "Simpler impl of route cleanup logic.  Avoids NPE that could ocurr /w previous impl.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/activemq-apollo/trunk@1441554 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq-apollo/commit/fe464cbf9056abcb973e098db4e9f391210d4b69",
        "parent": "https://github.com/apache/activemq-apollo/commit/59963fda3fbd8d0cc26f54a93e8271557ff148b1",
        "bug_id": "activemq-apollo_15",
        "file": [
            {
                "sha": "f85072355a2b43242e5fb952a9b8f8e64260b67d",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Broker.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/fe464cbf9056abcb973e098db4e9f391210d4b69/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Broker.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/fe464cbf9056abcb973e098db4e9f391210d4b69/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Broker.scala",
                "status": "modified",
                "changes": 8,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Broker.scala?ref=fe464cbf9056abcb973e098db4e9f391210d4b69",
                "patch": "@@ -380,7 +380,6 @@ class Broker() extends BaseService with SecuredResource with PluginStateSupport\n     }\n     schedule_reoccurring(1, SECONDS) {\n       virtualhost_maintenance\n-      connection_maintenance\n       roll_current_period\n       tune_send_receive_buffers\n     }\n@@ -475,13 +474,6 @@ class Broker() extends BaseService with SecuredResource with PluginStateSupport\n     }\n   }\n \n-  def connection_maintenance = {\n-    val time = now\n-    for ( c <- connections.values ) {\n-      c.maintenance(time)\n-    }\n-  }\n-\n   protected def init_logs = {\n     import OptionSupport._\n     // Configure the logging categories...",
                "deletions": 8
            },
            {
                "sha": "b24dcc4692a20c1f1dabcc6162787cf5add2e1c6",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Connection.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/fe464cbf9056abcb973e098db4e9f391210d4b69/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Connection.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/fe464cbf9056abcb973e098db4e9f391210d4b69/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Connection.scala",
                "status": "modified",
                "changes": 5,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Connection.scala?ref=fe464cbf9056abcb973e098db4e9f391210d4b69",
                "patch": "@@ -111,11 +111,6 @@ class BrokerConnection(var connector: Connector, val id:Long) extends Connection\n   var protocol_handler: ProtocolHandler = null;\n \n   def session_id = Option(protocol_handler).flatMap(_.session_id)\n-  def maintenance(now:Long) = {\n-    if ( protocol_handler!=null ) {\n-      protocol_handler.maintenance(now)\n-    }\n-  }\n   override def toString = \"id: \"+id.toString\n \n   protected override  def _start(on_completed:Task) = {",
                "deletions": 5
            },
            {
                "sha": "b1c60f92e89df9f74b748f20c7dbdacaba10de7b",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/protocol/Protocol.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/fe464cbf9056abcb973e098db4e9f391210d4b69/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/protocol/Protocol.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/fe464cbf9056abcb973e098db4e9f391210d4b69/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/protocol/Protocol.scala",
                "status": "modified",
                "changes": 2,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/protocol/Protocol.scala?ref=fe464cbf9056abcb973e098db4e9f391210d4b69",
                "patch": "@@ -84,8 +84,6 @@ trait ProtocolHandler {\n \n   def protocol:String\n \n-  def maintenance(now:Long) = {}\n-\n   def session_id:Option[String]\n \n   var connection:BrokerConnection = null;",
                "deletions": 2
            },
            {
                "sha": "18846720afee874e5b67d0ee75eb830a18f42a66",
                "filename": "apollo-stomp/src/main/scala/org/apache/activemq/apollo/stomp/StompProtocolHandler.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/fe464cbf9056abcb973e098db4e9f391210d4b69/apollo-stomp/src/main/scala/org/apache/activemq/apollo/stomp/StompProtocolHandler.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/fe464cbf9056abcb973e098db4e9f391210d4b69/apollo-stomp/src/main/scala/org/apache/activemq/apollo/stomp/StompProtocolHandler.scala",
                "status": "modified",
                "changes": 23,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-stomp/src/main/scala/org/apache/activemq/apollo/stomp/StompProtocolHandler.scala?ref=fe464cbf9056abcb973e098db4e9f391210d4b69",
                "patch": "@@ -1156,7 +1156,26 @@ class StompProtocolHandler extends ProtocolHandler {\n     }\n   }\n \n-  override def maintenance(now:Long) = dispatchQueue {\n+  var maintenance_scheduled = false\n+  def schedule_maintenance:Unit = {\n+    if(!maintenance_scheduled && !producerRoutes.isEmpty) {\n+      maintenance_scheduled = true\n+      dispatchQueue.after(2, TimeUnit.SECONDS) {\n+        maintenance_scheduled = false\n+        if( !producerRoutes.isEmpty ) {\n+          try {\n+            producer_maintenance\n+          } finally {\n+            schedule_maintenance\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+  def producer_maintenance = dispatchQueue {\n+    println(\"doing route maint...\")\n+    val now = Broker.now\n     import collection.JavaConversions._\n     val expired = ListBuffer[StompProducerRoute]()\n     for( route <- producerRoutes.values() ) {\n@@ -1166,6 +1185,7 @@ class StompProtocolHandler extends ProtocolHandler {\n     }\n     for( route <- expired ) {\n       producerRoutes.remove(route.dest)\n+      println(\"Expired route to: \"+route.dest)\n       host.dispatch_queue {\n         host.router.disconnect(route.addresses, route)\n       }\n@@ -1199,6 +1219,7 @@ class StompProtocolHandler extends ProtocolHandler {\n                 if (!connection.stopped) {\n                   resume_read\n                   producerRoutes.put(trimmed_dest, route)\n+                  schedule_maintenance\n                   send_via_route(route.addresses, route, frame, uow)\n                 }\n             }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "activemq-apollo",
        "message": "Pickup hawtdispatch fix for NPE that can occur /w amqp bits.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/activemq-apollo/trunk@1423483 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq-apollo/commit/a2f8de485eb407668dbefd967503606b1d6256c5",
        "parent": "https://github.com/apache/activemq-apollo/commit/c958466e98783a8936810a1e51a15568333d2765",
        "bug_id": "activemq-apollo_16",
        "file": [
            {
                "sha": "23509166f72b6b5fa9962018a5ede26a033947b4",
                "filename": "pom.xml",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/a2f8de485eb407668dbefd967503606b1d6256c5/pom.xml",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/a2f8de485eb407668dbefd967503606b1d6256c5/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/pom.xml?ref=a2f8de485eb407668dbefd967503606b1d6256c5",
                "patch": "@@ -97,7 +97,7 @@\n     <xbean-version>3.4</xbean-version>\n     <felix-version>1.0.0</felix-version>\n \n-    <hawtdispatch-version>1.12</hawtdispatch-version>\n+    <hawtdispatch-version>1.13-SNAPSHOT</hawtdispatch-version>\n     <hawtbuf-version>1.9</hawtbuf-version>\n     <stompjms-version>1.13</stompjms-version>\n     ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "activemq-apollo",
        "message": "Avoid NPE and openwire test failures introduced /w new nolocal support.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/activemq-apollo/trunk@1421956 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq-apollo/commit/a32af3c1d9a8c8511e3c66fc8befb95c387ba0d5",
        "parent": "https://github.com/apache/activemq-apollo/commit/a72e21a2d0fa2bab6be0523567d2f3232b0c5e0c",
        "bug_id": "activemq-apollo_17",
        "file": [
            {
                "sha": "c4c2bfce067a7d9833fb3edd1af89c99a5b8695f",
                "filename": "apollo-openwire/src/main/scala/org/apache/activemq/apollo/openwire/OpenwireProtocolHandler.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/a32af3c1d9a8c8511e3c66fc8befb95c387ba0d5/apollo-openwire/src/main/scala/org/apache/activemq/apollo/openwire/OpenwireProtocolHandler.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/a32af3c1d9a8c8511e3c66fc8befb95c387ba0d5/apollo-openwire/src/main/scala/org/apache/activemq/apollo/openwire/OpenwireProtocolHandler.scala",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-openwire/src/main/scala/org/apache/activemq/apollo/openwire/OpenwireProtocolHandler.scala?ref=a32af3c1d9a8c8511e3c66fc8befb95c387ba0d5",
                "patch": "@@ -952,7 +952,7 @@ class OpenwireProtocolHandler extends ProtocolHandler {\n       if( delivery.message.codec eq OpenwireMessageCodec ) {\n         val message = delivery.message.asInstanceOf[OpenwireMessage].message\n         if( info.isNoLocal ) {\n-          if( message.getProducerId.getParentId.getConnectionId == connection_context.info.getConnectionId.getValue ) {\n+          if (message.getProducerId.getParentId.getConnectionId == info.getConsumerId.getParentId.getConnectionId ) {\n             return false;\n           }\n         }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "activemq-apollo",
        "message": "Fixes APLO-264: NPE in Jetty - broker fails to start\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/activemq-apollo/trunk@1391559 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq-apollo/commit/707767de6564d7b5e5559dc5c8ca9e1601cef65f",
        "parent": "https://github.com/apache/activemq-apollo/commit/a8108e13076d2459dd52010ab8393ee02aa48ab4",
        "bug_id": "activemq-apollo_18",
        "file": [
            {
                "sha": "286a71026057848e42e7133698ded222d04fce9b",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/jetty/JettyWebServer.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/707767de6564d7b5e5559dc5c8ca9e1601cef65f/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/jetty/JettyWebServer.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/707767de6564d7b5e5559dc5c8ca9e1601cef65f/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/jetty/JettyWebServer.scala",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/jetty/JettyWebServer.scala?ref=707767de6564d7b5e5559dc5c8ca9e1601cef65f",
                "patch": "@@ -35,6 +35,7 @@ import java.lang.String\n import org.eclipse.jetty.servlet.{FilterMapping, FilterHolder}\n import org.apache.activemq.apollo.broker.web.{AllowAnyOriginFilter, WebServer, WebServerFactory}\n import javax.servlet._\n+import org.eclipse.jetty.util.log.Slf4jLog\n \n /**\n  * <p>\n@@ -147,6 +148,10 @@ class JettyWebServer(val broker:Broker) extends WebServer with BaseService {\n       import FileSupport._\n       import collection.JavaConversions._\n \n+      // Explicitly set the Jetty Log impl to avoid\n+      // the NPE raised at https://issues.apache.org/jira/browse/APLO-264\n+      org.eclipse.jetty.util.log.Log.setLog(new Slf4jLog());\n+\n       val config = broker.config\n \n       val webapp_path = webapp(broker.tmp)",
                "deletions": 0
            },
            {
                "sha": "b39d4912aadc4c1924c51b47a80e9c9fc3043f90",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/jetty/WebSocketTransportFactory.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/707767de6564d7b5e5559dc5c8ca9e1601cef65f/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/jetty/WebSocketTransportFactory.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/707767de6564d7b5e5559dc5c8ca9e1601cef65f/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/jetty/WebSocketTransportFactory.scala",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/jetty/WebSocketTransportFactory.scala?ref=707767de6564d7b5e5559dc5c8ca9e1601cef65f",
                "patch": "@@ -41,6 +41,7 @@ import java.io.{EOFException, IOException}\n import java.security.cert.X509Certificate\n import org.apache.activemq.apollo.broker.web.AllowAnyOriginFilter\n import org.eclipse.jetty.servlet.{FilterMapping, FilterHolder, ServletHolder, ServletContextHandler}\n+import org.eclipse.jetty.util.log.Slf4jLog\n \n /**\n  * @author <a href=\"http://hiramchirino.com\">Hiram Chirino</a>\n@@ -90,6 +91,10 @@ object WebSocketTransportFactory extends TransportFactory.Provider with Log {\n     protected def _start(on_completed: Task) = blockingExecutor {\n       this.synchronized {\n \n+        // Explicitly set the Jetty Log impl to avoid\n+        // the NPE raised at https://issues.apache.org/jira/browse/APLO-264\n+        org.eclipse.jetty.util.log.Log.setLog(new Slf4jLog());\n+\n         IntrospectionSupport.setProperties(this, URISupport.parseParamters(uri));\n \n         accept_dispatch_queue = dispatchQueue.createQueue(\"accept: \" + uri);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "activemq-apollo",
        "message": "Fixes the NPEs that were occurring during the unit tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/activemq-apollo/trunk@1387325 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq-apollo/commit/44f203df09f82504115606bccb05a97195e8daa5",
        "parent": "https://github.com/apache/activemq-apollo/commit/b8d5155c60875cdc913559c0f9d59264ac43c4f4",
        "bug_id": "activemq-apollo_19",
        "file": [
            {
                "sha": "10f74e8eb2eda07e7459dfb33722e6a2d905b17b",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/LocalRouter.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/44f203df09f82504115606bccb05a97195e8daa5/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/LocalRouter.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/44f203df09f82504115606bccb05a97195e8daa5/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/LocalRouter.scala",
                "status": "modified",
                "changes": 9,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/LocalRouter.scala?ref=44f203df09f82504115606bccb05a97195e8daa5",
                "patch": "@@ -1316,6 +1316,7 @@ class LocalRouter(val virtual_host:VirtualHost) extends BaseService with Router\n   }\n \n   def _destroy_queue(queue: Queue) {\n+    assert(service_state.is_starting_or_started, \"Can't destroy.. allready stopped\")\n     on_queue_destroy_start\n     queue.stop(^{\n       var metrics = queue.get_queue_metrics\n@@ -1336,11 +1337,9 @@ class LocalRouter(val virtual_host:VirtualHost) extends BaseService with Router\n \n         queues_by_store_id.remove(queue.store_id)\n         if (queue.tune_persistent) {\n-          queue.dispatch_queue {\n-            virtual_host.store.remove_queue(queue.store_id) { x =>\n-              dispatch_queue {\n-                on_queue_destroy_end\n-              }\n+          virtual_host.store.remove_queue(queue.store_id) { x =>\n+            dispatch_queue {\n+              on_queue_destroy_end\n             }\n           }\n         } else {",
                "deletions": 5
            },
            {
                "sha": "51a4537661f02f8fcf236c3a175b1af987684ddb",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/44f203df09f82504115606bccb05a97195e8daa5/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/44f203df09f82504115606bccb05a97195e8daa5/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala?ref=44f203df09f82504115606bccb05a97195e8daa5",
                "patch": "@@ -439,7 +439,9 @@ class Queue(val router: LocalRouter, val store_id:Long, var binding:Binding) ext\n           // Have we been idle that whole time?\n           if( idled_at == idled_at_start ) {\n             virtual_host.dispatch_queue {\n-              router._destroy_queue(this)\n+              if( virtual_host.service_state.is_started ) {\n+                router._destroy_queue(this)\n+              }\n             }\n           }\n         }",
                "deletions": 1
            },
            {
                "sha": "e6162c2deaad86d0727db4ee72f571fcac9da84c",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Topic.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/44f203df09f82504115606bccb05a97195e8daa5/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Topic.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/44f203df09f82504115606bccb05a97195e8daa5/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Topic.scala",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Topic.scala?ref=44f203df09f82504115606bccb05a97195e8daa5",
                "patch": "@@ -488,7 +488,9 @@ class Topic(val router:LocalRouter, val address:DestinationAddress, var config_u\n             if( queue.all_subscriptions.isEmpty ) {\n               val metrics = queue.get_queue_metrics\n               router.dispatch_queue {\n-                router._destroy_queue(queue)\n+                if(router.service_state.is_started) {\n+                  router._destroy_queue(queue)\n+                }\n               }\n               dispatch_queue {\n                 topic_metrics.dequeue_item_counter += metrics.dequeue_item_counter",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "activemq-apollo",
        "message": "Avoid NPEs that can occur if we shutdown the store before the router.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/activemq-apollo/trunk@1379943 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq-apollo/commit/a0efe21c5ad025a83634a115252eaf5f25dd667d",
        "parent": "https://github.com/apache/activemq-apollo/commit/56f628543c327d1c7c921a6c3d5f21f999260d7c",
        "bug_id": "activemq-apollo_20",
        "file": [
            {
                "sha": "d51cdedcc1aa722fbc705e32e1908568f5472eba",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/VirtualHost.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/a0efe21c5ad025a83634a115252eaf5f25dd667d/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/VirtualHost.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/a0efe21c5ad025a83634a115252eaf5f25dd667d/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/VirtualHost.scala",
                "status": "modified",
                "changes": 28,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/VirtualHost.scala?ref=a0efe21c5ad025a83634a115252eaf5f25dd667d",
                "patch": "@@ -258,22 +258,24 @@ class VirtualHost(val broker: Broker, val id:String) extends BaseService with Se\n \n \n   override protected def _stop(on_completed:Task):Unit = {\n-\n     val tracker = new LoggingTracker(\"virtual host shutdown\", console_log)\n     tracker.stop(router);\n-    if( store!=null ) {\n-      val task = tracker.task(\"store session counter\")\n-      session_counter.disconnect{\n-        tracker.stop(store);\n-        task.run()\n-      }\n-    }\n-    tracker.callback(dispatch_queue.runnable {\n-      if( direct_buffer_allocator !=null ) {\n-        direct_buffer_allocator.close\n-        direct_buffer_allocator\n+    tracker.callback(^{\n+      val tracker = new LoggingTracker(\"virtual host shutdown\", console_log)\n+      if( store!=null ) {\n+        val task = tracker.task(\"store session counter\")\n+        session_counter.disconnect{\n+          tracker.stop(store);\n+          task.run()\n+        }\n       }\n-      on_completed.run()\n+      tracker.callback(dispatch_queue.runnable {\n+        if( direct_buffer_allocator !=null ) {\n+          direct_buffer_allocator.close\n+          direct_buffer_allocator\n+        }\n+        on_completed.run()\n+      })\n     })\n   }\n ",
                "deletions": 13
            }
        ]
    },
    {
        "repo": "activemq-apollo",
        "message": "Fixes a NPE case the would occur on rollback that was introduced /w the fix to APLO-218.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/activemq-apollo/trunk@1364188 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq-apollo/commit/6d0e479aa8c263fb2dad73e08d009354c4c587e3",
        "parent": "https://github.com/apache/activemq-apollo/commit/da1bffd4867fd5ba1f320df0b5bd5c594e3b44e3",
        "bug_id": "activemq-apollo_21",
        "file": [
            {
                "sha": "a14c51945438ab4a1b24421b9cdda6ee3dccd01e",
                "filename": "apollo-stomp/src/main/scala/org/apache/activemq/apollo/stomp/StompProtocolHandler.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/6d0e479aa8c263fb2dad73e08d009354c4c587e3/apollo-stomp/src/main/scala/org/apache/activemq/apollo/stomp/StompProtocolHandler.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/6d0e479aa8c263fb2dad73e08d009354c4c587e3/apollo-stomp/src/main/scala/org/apache/activemq/apollo/stomp/StompProtocolHandler.scala",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-stomp/src/main/scala/org/apache/activemq/apollo/stomp/StompProtocolHandler.scala?ref=6d0e479aa8c263fb2dad73e08d009354c4c587e3",
                "patch": "@@ -1540,7 +1540,11 @@ class StompProtocolHandler extends ProtocolHandler {\n     }\n \n     def rollback = {\n-      queue.foreach{ _._2() }\n+      queue.foreach{ case (x, y) =>\n+        if( y != null ) {\n+          y()\n+        }\n+      }\n     }\n \n   }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "activemq-apollo",
        "message": "Fixes APLO-105 : Avoid NPE if the consumer has been closed.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/activemq-apollo/trunk@1211801 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq-apollo/commit/e57a28f1e7ada7d41403f1dbba55509807f7d1b4",
        "parent": "https://github.com/apache/activemq-apollo/commit/132708767ed75481a1da3504b274b7a8bd77303d",
        "bug_id": "activemq-apollo_22",
        "file": [
            {
                "sha": "4dbb755108acfa96ac42044ad0e5ee550e9d569e",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/e57a28f1e7ada7d41403f1dbba55509807f7d1b4/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/e57a28f1e7ada7d41403f1dbba55509807f7d1b4/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala?ref=e57a28f1e7ada7d41403f1dbba55509807f7d1b4",
                "patch": "@@ -1848,7 +1848,9 @@ class Subscription(val queue:Queue, val consumer:DeliveryConsumer) extends Deliv\n \n     session = consumer.connect(this)\n     session.refiller = dispatch_queue.runnable {\n-      check_consumer_stall\n+      if(session!=null) {\n+        check_consumer_stall\n+      }\n       if( pos!=null ) {\n         pos.run\n       }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "activemq-apollo",
        "message": "Fixes APLO-91 : NPE occurs when a subscription is added to a queue which is in the process of starting up.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/activemq-apollo/trunk@1207556 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq-apollo/commit/83b4ad3abaae959a3e085e14df3ed32e8310544e",
        "parent": "https://github.com/apache/activemq-apollo/commit/4d77d4be71f2de045a5dbe68c1c4b66f97f91a2c",
        "bug_id": "activemq-apollo_23",
        "file": [
            {
                "sha": "d64b80f1b40177a1fc9823655725a6241160f45b",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/83b4ad3abaae959a3e085e14df3ed32e8310544e/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/83b4ad3abaae959a3e085e14df3ed32e8310544e/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala",
                "status": "modified",
                "changes": 11,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala?ref=83b4ad3abaae959a3e085e14df3ed32e8310544e",
                "patch": "@@ -401,6 +401,7 @@ class Queue(val router: LocalRouter, val store_id:Long, var binding:Binding, var\n                 tail_entry = new QueueEntry(Queue.this, next_message_seq)\n             }\n \n+            all_subscriptions.valuesIterator.foreach( _.rewind(head_entry) )\n             debug(\"restored: \" + enqueue_item_counter)\n           }\n           on_completed\n@@ -580,10 +581,13 @@ class Queue(val router: LocalRouter, val store_id:Long, var binding:Binding, var\n     }\n   }\n \n-  def swap_messages = {\n+  def swap_messages:Unit = {\n     dispatch_queue.assertExecuting()\n     now = System.currentTimeMillis()\n \n+    if( !service_state.is_started )\n+      return\n+\n     var cur = entries.getHead\n     while( cur!=null ) {\n \n@@ -1041,9 +1045,8 @@ class QueueEntry(val queue:Queue, val seq:Long) extends LinkedNode[QueueEntry] w\n \n   def label = state.label\n \n-  def is_tail = this == queue.tail_entry\n-  def is_head = this == queue.head_entry\n-\n+  def is_tail = as_tail!=null\n+  def is_head = as_head!=null\n   def is_loaded = as_loaded!=null\n   def is_swapped = as_swapped!=null\n   def is_swapped_range = as_swapped_range!=null",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "activemq-apollo",
        "message": "Avoid NPE if the store does to provide a locator.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/activemq-apollo/trunk@1154355 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq-apollo/commit/e17428a7aa6cf5af2dbe1d372fda20a03bd003ab",
        "parent": "https://github.com/apache/activemq-apollo/commit/da622ba51ed4d1ecc7919dde445c48e777ba207e",
        "bug_id": "activemq-apollo_24",
        "file": [
            {
                "sha": "af71f80b7aeeb89e4a43e72adcb77af3a9d7332e",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/e17428a7aa6cf5af2dbe1d372fda20a03bd003ab/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/e17428a7aa6cf5af2dbe1d372fda20a03bd003ab/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala?ref=e17428a7aa6cf5af2dbe1d372fda20a03bd003ab",
                "patch": "@@ -881,7 +881,7 @@ class QueueEntry(val queue:Queue, val seq:Long) extends LinkedNode[QueueEntry] w\n     qer.queue_key = queue.store_id\n     qer.entry_seq = seq\n     qer.message_key = state.message_key\n-    qer.message_locator = state.message_locator.get()\n+    qer.message_locator = Option(state.message_locator).map(_.get).getOrElse(0)\n     qer.size = state.size\n     qer.expiration = expiration\n     qer",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "activemq-apollo",
        "message": "Fixes NPE that occurred when restoring a stored durable subscription on broker startup.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/activemq-apollo/trunk@1073428 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq-apollo/commit/ed44ee1dacf5b6e07968f891805252477286055c",
        "parent": "https://github.com/apache/activemq-apollo/commit/dd2246709df0fdfa097d3d08b8d2b62cf07a05d0",
        "bug_id": "activemq-apollo_25",
        "file": [
            {
                "sha": "6c0ada391c031ca6d3bee3255770655336b9911d",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/LocalRouter.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/ed44ee1dacf5b6e07968f891805252477286055c/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/LocalRouter.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/ed44ee1dacf5b6e07968f891805252477286055c/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/LocalRouter.scala",
                "status": "modified",
                "changes": 89,
                "additions": 36,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/LocalRouter.scala?ref=ed44ee1dacf5b6e07968f891805252477286055c",
                "patch": "@@ -275,7 +275,7 @@ class LocalRouter(val host:VirtualHost) extends BaseService with Router {\n         destination match {\n           case destination:DurableSubscriptionDestinationDTO=>\n             // So the user can subscribe to the topic.. but can he create durable sub??\n-            val qc = ds_config(destination)\n+            val qc = DurableSubscriptionQueueBinding.create(destination).config(host).asInstanceOf[DurableSubscriptionDTO]\n             if( !can_create_ds(qc, security) ) {\n                return Failure(\"Not authorized to create the durable subscription.\")\n             }\n@@ -286,10 +286,11 @@ class LocalRouter(val host:VirtualHost) extends BaseService with Router {\n     }\n \n     def get_or_create_durable_subscription(destination:DurableSubscriptionDestinationDTO):Queue = {\n-      durable_subscriptions_by_id.get( (destination.client_id, destination.subscription_id) ).getOrElse {\n-        val binding = QueueBinding.create(destination)\n-        val qc = ds_config(destination)\n-        _create_queue(-1, binding, qc)\n+      val key = (destination.client_id, destination.subscription_id)\n+      durable_subscriptions_by_id.get( key ).getOrElse {\n+        val queue = _create_queue(QueueBinding.create(destination))\n+        durable_subscriptions_by_id.put(key, queue)\n+        queue\n       }\n     }\n \n@@ -319,27 +320,6 @@ class LocalRouter(val host:VirtualHost) extends BaseService with Router {\n       }\n     }\n \n-    def ds_config(destination:DurableSubscriptionDestinationDTO):DurableSubscriptionDTO = {\n-      import collection.JavaConversions._\n-      import DestinationParser.default._\n-      import AsciiBuffer._\n-\n-      val name = DestinationParser.decode_path(destination.name)\n-      def matches(x:DurableSubscriptionDTO):Boolean = {\n-        if( x.name != null && !parseFilter(ascii(x.name)).matches(name)) {\n-          return false\n-        }\n-        if( x.client_id != null && x.client_id!=x.client_id ) {\n-          return false\n-        }\n-        if( x.subscription_id != null && x.subscription_id!=x.subscription_id ) {\n-          return false\n-        }\n-        true\n-      }\n-      host.config.durable_subscriptions.find(matches _).getOrElse(new DurableSubscriptionDTO)\n-    }\n-\n     def bind(queue:Queue) = {\n \n       val destination = queue.binding.binding_dto.asInstanceOf[DurableSubscriptionDestinationDTO]\n@@ -362,6 +342,7 @@ class LocalRouter(val host:VirtualHost) extends BaseService with Router {\n     def unbind(queue:Queue) = {\n       val path = queue.binding.destination\n       durable_subscriptions_by_path.remove(path, queue)\n+\n     }\n \n     def create_destination(path:Path, security:SecurityContext):Result[Topic,String] = {\n@@ -386,19 +367,6 @@ class LocalRouter(val host:VirtualHost) extends BaseService with Router {\n \n   object queue_domain extends Domain[Queue] {\n \n-    def config(binding:QueueBinding):QueueDTO = {\n-      import collection.JavaConversions._\n-      import DestinationParser.default._\n-\n-      def matches(x:QueueDTO):Boolean = {\n-        if( x.name != null && !parseFilter(ascii(x.name)).matches(binding.destination)) {\n-          return false\n-        }\n-        true\n-      }\n-      host.config.queues.find(matches _).getOrElse(new QueueDTO)\n-    }\n-\n     def can_create_queue(config:QueueDTO, security:SecurityContext) = {\n       if( host.authorizer==null || security==null) {\n         true\n@@ -411,28 +379,35 @@ class LocalRouter(val host:VirtualHost) extends BaseService with Router {\n       val path = queue.binding.destination\n       assert( !PathParser.containsWildCards(path) )\n       add_destination(path, queue)\n+\n+      import OptionSupport._\n+      if( queue.config.unified.getOrElse(false) ) {\n+        // hook up the queue to be a subscriber of the topic.\n+        val topic = topic_domain.get_or_create_destination(path, null).success\n+        topic.bind(null, queue)\n+      }\n     }\n \n     def unbind(queue:Queue) = {\n       val path = queue.binding.destination\n       remove_destination(path, queue)\n+\n+      import OptionSupport._\n+      if( queue.config.unified.getOrElse(false) ) {\n+        // unhook the queue from the topic\n+        val topic = topic_domain.get_or_create_destination(path, null).success\n+        topic.unbind(queue, false)\n+      }\n     }\n \n     def create_destination(path: Path, security: SecurityContext) = {\n       val dto = new QueueDestinationDTO\n       dto.name = DestinationParser.encode_path(path)\n \n       val binding = QueueDomainQueueBinding.create(dto)\n-      val qc = config(binding)\n-      if( can_create_queue(qc, security) ) {\n-        val queue = _create_queue(-1, binding, qc)\n-        import OptionSupport._\n-        if( qc.unified.getOrElse(false) ) {\n-          // hook up the queue to be a subscriber of the topic.\n-          val topic = topic_domain.get_or_create_destination(path, null).success\n-          topic.bind(null, queue)\n-        }\n-        Success(queue)\n+      val config = binding.config(host)\n+      if( can_create_queue(config, security) ) {\n+        Success(_create_queue(binding))\n       } else {\n         Failure(\"Not authorized to create the queue\")\n       }\n@@ -459,9 +434,14 @@ class LocalRouter(val host:VirtualHost) extends BaseService with Router {\n             host.store.get_queue(queue_key) { x =>\n               x match {\n                 case Some(record)=>\n-                  dispatch_queue {\n-                    _create_queue(record.key, QueueBinding.create(record.binding_kind, record.binding_data), null)\n-                    task.run\n+                  if( record.binding_kind == TempQueueBinding.TEMP_KIND ) {\n+                    // Drop temp queues on restart..\n+                    host.store.remove_queue(queue_key){x=> task.run}\n+                  } else {\n+                    dispatch_queue {\n+                      _create_queue(QueueBinding.create(record.binding_kind, record.binding_data), queue_key)\n+                      task.run\n+                    }\n                   }\n                 case _ => task.run\n               }\n@@ -645,13 +625,16 @@ class LocalRouter(val host:VirtualHost) extends BaseService with Router {\n     queues_by_id.get(id)\n   }\n \n-  def _create_queue(id:Long, binding:QueueBinding, config:QueueDTO):Queue = {\n+\n+  def _create_queue(binding:QueueBinding, id:Long= -1):Queue = {\n \n     var qid = id\n     if( qid == -1 ) {\n       qid = host.queue_id_counter.incrementAndGet\n     }\n \n+    val config = binding.config(host)\n+\n     val queue = new Queue(this, qid, binding, config)\n     if( queue.tune_persistent && id == -1 ) {\n ",
                "deletions": 53
            },
            {
                "sha": "e58164de30fee824f7aa5c5e3728486ca3f851ca",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/QueueBinding.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/ed44ee1dacf5b6e07968f891805252477286055c/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/QueueBinding.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/ed44ee1dacf5b6e07968f891805252477286055c/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/QueueBinding.scala",
                "status": "modified",
                "changes": 40,
                "additions": 39,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/QueueBinding.scala?ref=ed44ee1dacf5b6e07968f891805252477286055c",
                "patch": "@@ -90,6 +90,8 @@ trait QueueBinding {\n   def message_filter:BooleanExpression = ConstantExpression.TRUE\n \n   def destination:Path\n+\n+  def config(host:VirtualHost):QueueDTO\n }\n \n object QueueDomainQueueBinding extends QueueBinding.Provider {\n@@ -149,6 +151,20 @@ class QueueDomainQueueBinding(val binding_data:Buffer, val binding_dto:QueueDest\n     case _ => false\n   }\n \n+\n+  def config(host:VirtualHost):QueueDTO = {\n+    import collection.JavaConversions._\n+    import DestinationParser.default._\n+\n+    def matches(x:QueueDTO):Boolean = {\n+      if( x.name != null && !parseFilter(ascii(x.name)).matches(destination)) {\n+        return false\n+      }\n+      true\n+    }\n+    host.config.queues.find(matches _).getOrElse(new QueueDTO)\n+  }\n+\n }\n \n \n@@ -170,8 +186,8 @@ object DurableSubscriptionQueueBinding extends QueueBinding.Provider {\n       null\n     }\n   }\n-}\n \n+}\n \n /**\n  * <p>\n@@ -220,6 +236,27 @@ class DurableSubscriptionQueueBinding(val binding_data:Buffer, val binding_dto:D\n       SelectorParser.parse(binding_dto.filter)\n     }\n   }\n+\n+  def config(host:VirtualHost):DurableSubscriptionDTO = {\n+      import collection.JavaConversions._\n+      import DestinationParser.default._\n+      import AsciiBuffer._\n+\n+      def matches(x:DurableSubscriptionDTO):Boolean = {\n+        if( x.name != null && !parseFilter(ascii(x.name)).matches(destination)) {\n+          return false\n+        }\n+        if( x.client_id != null && x.client_id!=x.client_id ) {\n+          return false\n+        }\n+        if( x.subscription_id != null && x.subscription_id!=x.subscription_id ) {\n+          return false\n+        }\n+        true\n+      }\n+      host.config.durable_subscriptions.find(matches _).getOrElse(new DurableSubscriptionDTO)\n+  }\n+\n }\n \n \n@@ -268,4 +305,5 @@ class TempQueueBinding(val key:AnyRef, val label:String) extends QueueBinding {\n     case _ => false\n   }\n \n+  def config(host: VirtualHost) = new QueueDTO\n }",
                "deletions": 1
            },
            {
                "sha": "ef6f0ee97adf181d1f2cc5a7fb07a50bafc32384",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Topic.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/ed44ee1dacf5b6e07968f891805252477286055c/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Topic.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/ed44ee1dacf5b6e07968f891805252477286055c/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Topic.scala",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Topic.scala?ref=ed44ee1dacf5b6e07968f891805252477286055c",
                "patch": "@@ -70,7 +70,7 @@ class Topic(val router:LocalRouter, val name:String, val config:TopicDTO, val id\n           case \"queue\" =>\n \n             // create a temp queue so that it can spool\n-            val queue = router._create_queue(-1, new TempQueueBinding(consumer), new QueueDTO)\n+            val queue = router._create_queue(new TempQueueBinding(consumer))\n             queue.dispatch_queue.setTargetQueue(consumer.dispatch_queue)\n             queue.bind(List(consumer))\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "activemq-apollo",
        "message": "Fix npe which occurs when conneciton is closed before it finished connecting\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/sandbox/activemq-apollo-actor@961138 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq-apollo/commit/760683fb50ceda1f9358c0f608528ff74e65101a",
        "parent": "https://github.com/apache/activemq-apollo/commit/8f69b8a751157bf237f41a5162bb38ce510206c4",
        "bug_id": "activemq-apollo_26",
        "file": [
            {
                "sha": "ea9b36fedd9131ade78b53817e00472f8cc5e8b2",
                "filename": "activemq-tcp/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/760683fb50ceda1f9358c0f608528ff74e65101a/activemq-tcp/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/760683fb50ceda1f9358c0f608528ff74e65101a/activemq-tcp/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java",
                "status": "modified",
                "changes": 19,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/activemq-tcp/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java?ref=760683fb50ceda1f9358c0f608528ff74e65101a",
                "patch": "@@ -337,15 +337,16 @@ public void run() {\n \n     private void dispose() {\n \n-//        OneWay oneWay = outbound.poll();\n-//        while (oneWay != null) {\n-//            if (oneWay.retained != null) {\n-//                oneWay.retained.release();\n-//            }\n-//            oneWay = outbound.poll();\n-//        }\n-        readSource.release();\n-        writeSource.release();\n+        if( readSource!=null ) {\n+            readSource.release();\n+            readSource=null;\n+        }\n+\n+        if( writeSource!=null ) {\n+            writeSource.release();\n+            writeSource=null;\n+        }\n+        \n         dispatchQueue.release();\n         next_outbound_buffer = null;\n         outbound_buffer = null;",
                "deletions": 9
            }
        ]
    },
    {
        "repo": "activemq-apollo",
        "message": "Fixes an NPE on shutdown.  Might be related to APLO-189: UDP connector cannot be stopped, but I'm not 100% sure yet.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/activemq-apollo/trunk@1325376 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq-apollo/commit/313c661ab20e51e98fa79279ad88cb459a2647f4",
        "parent": "https://github.com/apache/activemq-apollo/commit/2f202370265b79adae7a09f9875afb42a9347b37",
        "bug_id": "activemq-apollo_27",
        "file": [
            {
                "sha": "550c6629b40d8718f25a16dae06338189fa5447f",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/LocalRouter.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/313c661ab20e51e98fa79279ad88cb459a2647f4/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/LocalRouter.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/313c661ab20e51e98fa79279ad88cb459a2647f4/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/LocalRouter.scala",
                "status": "modified",
                "changes": 41,
                "additions": 35,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/LocalRouter.scala?ref=313c661ab20e51e98fa79279ad88cb459a2647f4",
                "patch": "@@ -936,13 +936,13 @@ class LocalRouter(val virtual_host:VirtualHost) extends BaseService with Router\n   }\n \n   protected def _stop(on_completed: Task) = {\n-//    val tracker = new LoggingTracker(\"router shutdown\", virtual_host.console_log, dispatch_queue)\n     queues_by_store_id.valuesIterator.foreach { queue=>\n       queue.stop(NOOP)\n-//      tracker.stop(queue)\n     }\n-//    tracker.callback(on_completed)\n-    on_completed.run\n+    on_queues_destroyed_actions ::= ^{\n+      on_completed.run\n+    }\n+    check_on_queues_destroyed_actions\n   }\n \n \n@@ -1288,8 +1288,33 @@ class LocalRouter(val virtual_host:VirtualHost) extends BaseService with Router\n     None\n   }\n \n+  var pending_queue_destroys = 0\n+  var on_queues_destroyed_actions = List[Runnable]()\n+\n+  def on_queue_destroy_start = {\n+    dispatch_queue.assertExecuting()\n+    pending_queue_destroys += 1\n+  }\n+\n+  def on_queue_destroy_end = {\n+    dispatch_queue.assertExecuting()\n+    assert(pending_queue_destroys > 0)\n+    pending_queue_destroys -= 1\n+    check_on_queues_destroyed_actions\n+  }\n+\n+  def check_on_queues_destroyed_actions = {\n+    if( pending_queue_destroys==0 && !on_queues_destroyed_actions.isEmpty) {\n+      val actions = on_queues_destroyed_actions\n+      on_queues_destroyed_actions = Nil\n+      for( action <- actions ) {\n+        action.run()\n+      }\n+    }\n+  }\n \n   def _destroy_queue(queue: Queue) {\n+    on_queue_destroy_start\n     queue.stop(^{\n       var metrics = queue.get_queue_metrics\n       dispatch_queue {\n@@ -1310,10 +1335,14 @@ class LocalRouter(val virtual_host:VirtualHost) extends BaseService with Router\n         queues_by_store_id.remove(queue.store_id)\n         if (queue.tune_persistent) {\n           queue.dispatch_queue {\n-            virtual_host.store.remove_queue(queue.store_id) {\n-              x => Unit\n+            virtual_host.store.remove_queue(queue.store_id) { x =>\n+              dispatch_queue {\n+                on_queue_destroy_end\n+              }\n             }\n           }\n+        } else {\n+          on_queue_destroy_end\n         }\n       }\n     })",
                "deletions": 6
            },
            {
                "sha": "ec72ccfcc182070947d7e0447cf677c4b5413ced",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Topic.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/313c661ab20e51e98fa79279ad88cb459a2647f4/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Topic.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/313c661ab20e51e98fa79279ad88cb459a2647f4/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Topic.scala",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Topic.scala?ref=313c661ab20e51e98fa79279ad88cb459a2647f4",
                "patch": "@@ -429,7 +429,9 @@ class Topic(val router:LocalRouter, val address:DestinationAddress, var config_u\n             case x:TempQueueBinding =>\n               queue.dispatch_queue {\n                 val metrics = queue.get_queue_metrics\n-                router._destroy_queue(queue)\n+                router.dispatch_queue {\n+                  router._destroy_queue(queue)\n+                }\n                 dispatch_queue {\n                   topic_metrics.dequeue_item_counter += metrics.dequeue_item_counter\n                   topic_metrics.dequeue_size_counter += metrics.dequeue_size_counter",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "activemq-apollo",
        "message": "Fixes APLO-97 : NPE in HeartBeatMonitor when using an initial check delay\n\nPatch provided by Stan Lewis.  Thanks!  Also reduce a bit of redundancy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/activemq-apollo/trunk@1209582 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq-apollo/commit/9085684d8e3a4b31552639020d5d0f589de80a77",
        "parent": "https://github.com/apache/activemq-apollo/commit/1c2c3bf91423a6f54a382778688eba1bd7fe12fb",
        "bug_id": "activemq-apollo_28",
        "file": [
            {
                "sha": "c638565d7d1ba6bc74951bf60923168cae711913",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/protocol/HeartBeatMonitor.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/9085684d8e3a4b31552639020d5d0f589de80a77/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/protocol/HeartBeatMonitor.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/9085684d8e3a4b31552639020d5d0f589de80a77/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/protocol/HeartBeatMonitor.scala",
                "status": "modified",
                "changes": 35,
                "additions": 27,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/protocol/HeartBeatMonitor.scala?ref=9085684d8e3a4b31552639020d5d0f589de80a77",
                "patch": "@@ -38,29 +38,48 @@ class HeartBeatMonitor() {\n   var on_dead = ()=>{}\n \n   var session = 0\n+  \n+  def schedule(interval:Long, func:() => Unit) = {\n+    if ( this.session==session ) {\n+      transport.getDispatchQueue.after(interval, TimeUnit.MILLISECONDS) {\n+        if ( this.session==session ) {\n+          func()\n+        }\n+      }\n+    }\n+  }\n \n   def schedual_check_writes(session:Int):Unit = {\n-    val last_write_counter = transport.getProtocolCodec.getWriteCounter()\n-    transport.getDispatchQueue.after(write_interval/2, TimeUnit.MILLISECONDS) {\n-      if( this.session == session ) {\n-        if( last_write_counter==transport.getProtocolCodec.getWriteCounter ) {\n+    var func = () => {\n+      schedual_check_writes(session)\n+    }\n+    \n+    Option(transport.getProtocolCodec).foreach { codec=>\n+      val last_write_counter = codec.getWriteCounter()\n+      func = () => {\n+        if( last_write_counter==codec.getWriteCounter ) {\n           on_keep_alive()\n         }\n         schedual_check_writes(session)\n       }\n     }\n+    schedule(write_interval/2, func)\n   }\n \n   def schedual_check_reads(session:Int):Unit = {\n-    val last_read_counter = transport.getProtocolCodec.getReadCounter()\n-    transport.getDispatchQueue.after(read_interval, TimeUnit.MILLISECONDS) {\n-      if( this.session == session ) {\n-        if( last_read_counter==transport.getProtocolCodec.getReadCounter ) {\n+    var func = () => {\n+      schedual_check_reads(session)\n+    }\n+    Option(transport.getProtocolCodec).foreach { codec=>\n+      val last_read_counter = codec.getReadCounter\n+      func = () => {\n+        if( last_read_counter==codec.getReadCounter ) {\n           on_dead()\n         }\n         schedual_check_reads(session)\n       }\n     }\n+    schedule(read_interval, func)\n   }\n \n   def start = {",
                "deletions": 8
            }
        ]
    },
    {
        "repo": "activemq-apollo",
        "message": "Fix NPE that occurred when you used queues to spool slow consumers on topics, also setup a proper link to that queue via the REST API.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/activemq-apollo/trunk@1162139 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq-apollo/commit/71df7041a62a476c7607cb57db3706dcfb7067d3",
        "parent": "https://github.com/apache/activemq-apollo/commit/bb8be2706d4197dcf5c26b2bdf5a2c4984a85b77",
        "bug_id": "activemq-apollo_29",
        "file": [
            {
                "sha": "d6c4a6de9caa794432ef1346def92add14f0a610",
                "filename": "apollo-broker/src/main/resources/META-INF/services/org.apache.activemq.apollo/binding-factory.index",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/71df7041a62a476c7607cb57db3706dcfb7067d3/apollo-broker/src/main/resources/META-INF/services/org.apache.activemq.apollo/binding-factory.index",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/71df7041a62a476c7607cb57db3706dcfb7067d3/apollo-broker/src/main/resources/META-INF/services/org.apache.activemq.apollo/binding-factory.index",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/resources/META-INF/services/org.apache.activemq.apollo/binding-factory.index?ref=71df7041a62a476c7607cb57db3706dcfb7067d3",
                "patch": "@@ -16,4 +16,3 @@\n ## ---------------------------------------------------------------------------\n org.apache.activemq.apollo.broker.QueueDomainQueueBinding\n org.apache.activemq.apollo.broker.DurableSubscriptionQueueBinding\n-org.apache.activemq.apollo.broker.TempQueueBinding\n\\ No newline at end of file",
                "deletions": 1
            },
            {
                "sha": "5f643105f9b58a62df3bcd5ed20be3c2e70e2d38",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Binding.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/71df7041a62a476c7607cb57db3706dcfb7067d3/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Binding.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/71df7041a62a476c7607cb57db3706dcfb7067d3/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Binding.scala",
                "status": "modified",
                "changes": 39,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Binding.scala?ref=71df7041a62a476c7607cb57db3706dcfb7067d3",
                "patch": "@@ -250,20 +250,19 @@ class DurableSubscriptionQueueBinding(val binding_data:Buffer, val binding_dto:D\n }\n \n \n-object TempQueueBinding extends BindingFactory {\n+object TempQueueBinding {\n   val TEMP_DATA = new AsciiBuffer(\"\")\n   val TEMP_KIND = new AsciiBuffer(\"tmp\")\n-  val TEMP_DTO = null\n \n-  def create(binding_kind:AsciiBuffer, binding_data:Buffer) = {\n-    if( binding_kind == TEMP_KIND ) {\n-      new TempQueueBinding(\"\", \"\")\n-    } else {\n-      null\n-    }\n-  }\n-\n-  def create(binding_dto:DestinationDTO) = throw new UnsupportedOperationException\n+//  def create(binding_kind:AsciiBuffer, binding_data:Buffer) = {\n+//    if( binding_kind == TEMP_KIND ) {\n+//      new TempQueueBinding(\"\", \"\")\n+//    } else {\n+//      null\n+//    }\n+//  }\n+//\n+//  def create(binding_dto:DestinationDTO) = throw new UnsupportedOperationException\n }\n \n /**\n@@ -272,28 +271,24 @@ object TempQueueBinding extends BindingFactory {\n  *\n  * @author <a href=\"http://hiramchirino.com\">Hiram Chirino</a>\n  */\n-class TempQueueBinding(val key:AnyRef, val id:String) extends Binding {\n+class TempQueueBinding(val key:AnyRef, val destination:Path, val binding_dto:DestinationDTO) extends Binding {\n   import TempQueueBinding._\n \n-  def this(c:DeliveryConsumer) = this(c, c.connection.map(_.transport.getRemoteAddress.toString).getOrElse(\"known\") )\n-\n-  val destination = null\n   def binding_kind = TEMP_KIND\n-  def binding_dto = TEMP_DTO\n   def binding_data = TEMP_DATA\n \n-  def unbind(router: LocalRouter, queue: Queue) = {\n-  }\n-\n-  def bind(router: LocalRouter, queue: Queue) = {\n-  }\n+  def unbind(router: LocalRouter, queue: Queue) = {}\n+  def bind(router: LocalRouter, queue: Queue) = {}\n \n   override def hashCode = if(key==null) 0 else key.hashCode\n \n+  def id = key.toString\n+\n+  def config(host: VirtualHost) = new QueueDTO\n+\n   override def equals(o:Any):Boolean = o match {\n     case x: TempQueueBinding => x.key == key\n     case _ => false\n   }\n \n-  def config(host: VirtualHost) = new QueueDTO\n }",
                "deletions": 22
            },
            {
                "sha": "2a0ff8ce979795456dafc40b41f53de02f30efcf",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/LocalRouter.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/71df7041a62a476c7607cb57db3706dcfb7067d3/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/LocalRouter.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/71df7041a62a476c7607cb57db3706dcfb7067d3/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/LocalRouter.scala",
                "status": "modified",
                "changes": 24,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/LocalRouter.scala?ref=71df7041a62a476c7607cb57db3706dcfb7067d3",
                "patch": "@@ -375,7 +375,7 @@ class LocalRouter(val virtual_host:VirtualHost) extends BaseService with Router\n         durable_subscriptions_by_path.remove(path, queue)\n         var matches = get_destination_matches(path)\n         matches.foreach( _.unbind_durable_subscription(destination, queue) )\n-        _destroy_queue(queue.id, null)\n+        _destroy_queue(queue)\n       }\n     }\n \n@@ -457,15 +457,15 @@ class LocalRouter(val virtual_host:VirtualHost) extends BaseService with Router\n         for( queue <- dest.durable_subscriptions ) {\n           // we delete the durable sub if it's not wildcard'ed\n           if( !PathParser.containsWildCards(queue.binding.destination) ) {\n-            _destroy_queue(queue.id, null)\n+            _destroy_queue(queue)\n           }\n         }\n \n         for( consumer <- dest.consumers ) {\n           consumer match {\n             case queue:Queue =>\n               // Delete any attached queue consumers..\n-              _destroy_queue(queue.id, null)\n+              _destroy_queue(queue)\n           }\n         }\n \n@@ -928,7 +928,7 @@ class LocalRouter(val virtual_host:VirtualHost) extends BaseService with Router\n \n   protected def _stop(on_completed: Runnable) = {\n //    val tracker = new LoggingTracker(\"router shutdown\", virtual_host.console_log, dispatch_queue)\n-    queues_by_id.valuesIterator.foreach { queue=>\n+    queues_by_store_id.valuesIterator.foreach { queue=>\n       queue.stop\n //      tracker.stop(queue)\n     }\n@@ -1118,7 +1118,7 @@ class LocalRouter(val virtual_host:VirtualHost) extends BaseService with Router\n   /////////////////////////////////////////////////////////////////////////////\n \n   var queues_by_binding = LinkedHashMap[Binding, Queue]()\n-  var queues_by_id = LinkedHashMap[String, Queue]()\n+  var queues_by_store_id = LinkedHashMap[Long, Queue]()\n \n   /**\n    * Gets an existing queue.\n@@ -1130,8 +1130,8 @@ class LocalRouter(val virtual_host:VirtualHost) extends BaseService with Router\n   /**\n    * Gets an existing queue.\n    */\n-  def get_queue(id:String) = dispatch_queue ! {\n-    queues_by_id.get(id)\n+  def get_queue(id:Long) = dispatch_queue ! {\n+    queues_by_store_id.get(id)\n   }\n \n \n@@ -1148,7 +1148,7 @@ class LocalRouter(val virtual_host:VirtualHost) extends BaseService with Router\n \n     queue.start\n     queues_by_binding.put(binding, queue)\n-    queues_by_id.put(queue.id, queue)\n+    queues_by_store_id.put(qid, queue)\n \n     // this causes the queue to get registered in the right location in\n     // the router.\n@@ -1159,10 +1159,10 @@ class LocalRouter(val virtual_host:VirtualHost) extends BaseService with Router\n   /**\n    * Returns true if the queue no longer exists.\n    */\n-  def destroy_queue(id:String, security:SecurityContext) = dispatch_queue ! { _destroy_queue(id,security) }\n+  def destroy_queue(id:Long, security:SecurityContext) = dispatch_queue ! { _destroy_queue(id,security) }\n \n-  def _destroy_queue(id:String, security:SecurityContext):Option[String] = {\n-    queues_by_id.get(id) match {\n+  def _destroy_queue(id:Long, security:SecurityContext):Option[String] = {\n+    queues_by_store_id.get(id) match {\n       case Some(queue) =>\n         _destroy_queue(queue,security)\n       case None =>\n@@ -1201,7 +1201,7 @@ class LocalRouter(val virtual_host:VirtualHost) extends BaseService with Router\n \n       queue.binding.unbind(this, queue)\n       queues_by_binding.remove(queue.binding)\n-      queues_by_id.remove(queue.id)\n+      queues_by_store_id.remove(queue.store_id)\n       if (queue.tune_persistent) {\n         queue.dispatch_queue {\n           virtual_host.store.remove_queue(queue.store_id) {",
                "deletions": 12
            },
            {
                "sha": "8fe3b393a5360dee2da645128e6bd72d09c2573b",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/71df7041a62a476c7607cb57db3706dcfb7067d3/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/71df7041a62a476c7607cb57db3706dcfb7067d3/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Queue.scala?ref=71df7041a62a476c7607cb57db3706dcfb7067d3",
                "patch": "@@ -46,7 +46,6 @@ import Queue._\n  * @author <a href=\"http://hiramchirino.com\">Hiram Chirino</a>\n  */\n class Queue(val router: LocalRouter, val store_id:Long, var binding:Binding, var config:QueueDTO) extends BaseRetained with BindableDeliveryProducer with DeliveryConsumer with BaseService with DomainDestination with Dispatched {\n-\n   def id = binding.id\n \n   override def toString = binding.destination.toString",
                "deletions": 1
            },
            {
                "sha": "9920883535754a0f424cfe19745e09e09e95f098",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Router.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/71df7041a62a476c7607cb57db3706dcfb7067d3/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Router.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/71df7041a62a476c7607cb57db3706dcfb7067d3/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Router.scala",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Router.scala?ref=71df7041a62a476c7607cb57db3706dcfb7067d3",
                "patch": "@@ -32,7 +32,7 @@ trait Router extends Service {\n \n   def virtual_host:VirtualHost\n \n-  def get_queue(dto:String):Option[Queue] @suspendable\n+  def get_queue(dto:Long):Option[Queue] @suspendable\n \n   def bind(destinations:Array[DestinationDTO], consumer:DeliveryConsumer, security:SecurityContext) : Option[String] @suspendable\n ",
                "deletions": 1
            },
            {
                "sha": "34eff3155f81be40eb57372e434704c495840ce6",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Sink.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/71df7041a62a476c7607cb57db3706dcfb7067d3/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Sink.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/71df7041a62a476c7607cb57db3706dcfb7067d3/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Sink.scala",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Sink.scala?ref=71df7041a62a476c7607cb57db3706dcfb7067d3",
                "patch": "@@ -355,7 +355,7 @@ class Session[T](val producer_queue:DispatchQueue, var credits:Int, mux:SessionS\n   @volatile\n   var enqueue_size_counter = 0L\n   @volatile\n-  var enqueue_ts = 0L\n+  var enqueue_ts = mux.time_stamp\n \n   // create a source to coalesce credit events back to the producer side...\n   val credit_adder = createSource(EventAggregators.INTEGER_ADD , producer_queue)",
                "deletions": 1
            },
            {
                "sha": "f473baaca3d740fd87fc6c332d4e95d5990bba06",
                "filename": "apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Topic.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/71df7041a62a476c7607cb57db3706dcfb7067d3/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Topic.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/71df7041a62a476c7607cb57db3706dcfb7067d3/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Topic.scala",
                "status": "modified",
                "changes": 43,
                "additions": 28,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-broker/src/main/scala/org/apache/activemq/apollo/broker/Topic.scala?ref=71df7041a62a476c7607cb57db3706dcfb7067d3",
                "patch": "@@ -24,6 +24,7 @@ import java.util.concurrent.TimeUnit\n import org.fusesource.hawtdispatch._\n import collection.mutable.{HashSet, HashMap, ListBuffer}\n import java.lang.Long\n+import com.sun.jdi.connect.spi.TransportService.ListenKey\n \n /**\n  * <p>\n@@ -134,7 +135,7 @@ class Topic(val router:LocalRouter, val destination_dto:TopicDestinationDTO, var\n     rc.metrics.producer_counter = producer_counter\n     rc.metrics.consumer_counter = consumer_counter\n     rc.metrics.producer_count = producers.size\n-    rc.metrics.consumer_counter = consumers.size\n+    rc.metrics.consumer_count = consumers.size\n \n     this.durable_subscriptions.foreach { q =>\n       rc.dsubs.add(q.id)\n@@ -247,7 +248,7 @@ class Topic(val router:LocalRouter, val destination_dto:TopicDestinationDTO, var\n           case \"queue\" =>\n \n             // create a temp queue so that it can spool\n-            val queue = router._create_queue(new TempQueueBinding(consumer))\n+            val queue = router._create_queue(new TempQueueBinding(consumer, path, destination_dto))\n             queue.dispatch_queue.setTargetQueue(consumer.dispatch_queue)\n             queue.bind(List(consumer))\n             consumer_queues += consumer->queue\n@@ -260,25 +261,37 @@ class Topic(val router:LocalRouter, val destination_dto:TopicDestinationDTO, var\n     }\n \n     val link = new LinkDTO()\n+    link.kind = \"unknown\"\n+    link.label = \"unknown\"\n+    link.enqueue_ts = now\n     target match {\n       case queue:Queue =>\n-        link.kind = \"queue\"\n-        link.id = queue.id\n-        link.label = queue.id\n+        queue.binding match {\n+          case x:TempQueueBinding =>\n+            link.kind = \"topic-queue\"\n+            link.id = queue.store_id.toString()\n+            x.key match {\n+              case target:DeliveryConsumer=>\n+                for(connection <- target.connection) {\n+                  link.label = connection.transport.getRemoteAddress.toString\n+                }\n+              case _ =>\n+            }\n+          case x:QueueDomainQueueBinding =>\n+            link.kind = \"queue\"\n+            link.id = queue.id\n+            link.label = queue.id\n+        }\n       case _ =>\n-        target.connection match {\n-          case Some(connection) =>\n-            link.kind = \"connection\"\n-            link.id = connection.id.toString\n-            link.label = connection.transport.getRemoteAddress.toString\n-          case _ =>\n-            link.kind = \"unknown\"\n-            link.label = \"unknown\"\n+        for(connection <- target.connection) {\n+          link.kind = \"connection\"\n+          link.id = connection.id.toString\n+          link.label = connection.transport.getRemoteAddress.toString\n         }\n     }\n \n     val proxy = ProxyDeliveryConsumer(target, link)\n-    consumers.put(target, proxy)\n+    consumers.put(consumer, proxy)\n     consumer_counter += 1\n     val list = proxy :: Nil\n     producers.keys.foreach({ r=>\n@@ -296,7 +309,7 @@ class Topic(val router:LocalRouter, val destination_dto:TopicDestinationDTO, var\n           queue.unbind(List(consumer))\n           queue.binding match {\n             case x:TempQueueBinding =>\n-              router._destroy_queue(queue.id, null)\n+              router._destroy_queue(queue)\n           }\n           List(queue)\n         case None =>",
                "deletions": 15
            },
            {
                "sha": "db15cb957814cbf90ee35be94052beac132bcc8a",
                "filename": "apollo-stomp/src/main/scala/org/apache/activemq/apollo/stomp/StompProtocolHandler.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/71df7041a62a476c7607cb57db3706dcfb7067d3/apollo-stomp/src/main/scala/org/apache/activemq/apollo/stomp/StompProtocolHandler.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/71df7041a62a476c7607cb57db3706dcfb7067d3/apollo-stomp/src/main/scala/org/apache/activemq/apollo/stomp/StompProtocolHandler.scala",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-stomp/src/main/scala/org/apache/activemq/apollo/stomp/StompProtocolHandler.scala?ref=71df7041a62a476c7607cb57db3706dcfb7067d3",
                "patch": "@@ -693,6 +693,11 @@ class StompProtocolHandler extends ProtocolHandler {\n     }  catch {\n       case e: Break =>\n       case e:Exception =>\n+        // To avoid double logging to the same log category..\n+        if( connection_log!=StompProtocolHandler ) {\n+          // but we also want the error on the apollo.log file.\n+          warn(\"Internal Server Error\", e)\n+        }\n         async_die(\"Internal Server Error\", e);\n     }\n   }",
                "deletions": 0
            },
            {
                "sha": "c60ebdd8d8f8451e1666020418e7d80f79a05502",
                "filename": "apollo-web/src/main/scala/org/apache/activemq/apollo/web/resources/BrokerResource.scala",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/71df7041a62a476c7607cb57db3706dcfb7067d3/apollo-web/src/main/scala/org/apache/activemq/apollo/web/resources/BrokerResource.scala",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/71df7041a62a476c7607cb57db3706dcfb7067d3/apollo-web/src/main/scala/org/apache/activemq/apollo/web/resources/BrokerResource.scala",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-web/src/main/scala/org/apache/activemq/apollo/web/resources/BrokerResource.scala?ref=71df7041a62a476c7607cb57db3706dcfb7067d3",
                "patch": "@@ -561,6 +561,18 @@ case class BrokerResource() extends Resource {\n     }\n   }\n \n+  @GET @Path(\"virtual-hosts/{id}/topic-queues/{name:.*}/{qid}\")\n+  def topic(@PathParam(\"id\") id : String,@PathParam(\"name\") name : String,  @PathParam(\"qid\") qid : Long, @QueryParam(\"entries\") entries:Boolean):QueueStatusDTO = {\n+    with_virtual_host(id) { host =>\n+      val router:LocalRouter = host\n+      val node = router.topic_domain.destination_by_id.get(name).getOrElse(result(NOT_FOUND))\n+      val queue =router.queues_by_store_id.get(qid).getOrElse(result(NOT_FOUND))\n+      monitoring(node) {\n+        queue.status(entries)\n+      }\n+    }\n+  }\n+\n   @GET @Path(\"virtual-hosts/{id}/queues\")\n   @Produces(Array(\"application/json\"))\n   def queues(@PathParam(\"id\") id : String, @QueryParam(\"f\") f:java.util.List[String],",
                "deletions": 0
            },
            {
                "sha": "3f1d12e78eb0a4fa0bf5bb5083def031a9c5f432",
                "filename": "apollo-web/src/main/webapp/WEB-INF/org/apache/activemq/apollo/dto/QueueStatusDTO.jade",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/71df7041a62a476c7607cb57db3706dcfb7067d3/apollo-web/src/main/webapp/WEB-INF/org/apache/activemq/apollo/dto/QueueStatusDTO.jade",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/71df7041a62a476c7607cb57db3706dcfb7067d3/apollo-web/src/main/webapp/WEB-INF/org/apache/activemq/apollo/dto/QueueStatusDTO.jade",
                "status": "modified",
                "changes": 24,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-web/src/main/webapp/WEB-INF/org/apache/activemq/apollo/dto/QueueStatusDTO.jade?ref=71df7041a62a476c7607cb57db3706dcfb7067d3",
                "patch": "@@ -23,23 +23,35 @@\n   - else\n     - \"%,.2f %%\".format(n.toFloat*100.0/d)\n \n-.breadcumbs\n-  a(href={strip_resolve(\"..\")+\".html\"}) Back\n \n - binding match\n   - case x:QueueDestinationDTO =>\n+    .breadcumbs\n+      a(href={strip_resolve(\"..\")+\".html\"}) Back\n+\n     h1 Queue #{id}\n+    p state: #{state} #{ uptime(state_since) } ago\n+    - if( state == \"STARTED\" )\n+      form(method=\"post\" action={path(\"action/delete\")})\n+        input(type=\"submit\" value=\"delete\")\n   - case x:DurableSubscriptionDestinationDTO =>\n+    .breadcumbs\n+      a(href={strip_resolve(\"..\")+\".html\"}) Back\n+\n     h1 Durable Subscription on #{id}\n     - if( x.selector != null )\n       p selector: ${x.selector}\n+    p state: #{state} #{ uptime(state_since) } ago\n+    - if( state == \"STARTED\" )\n+      form(method=\"post\" action={path(\"action/delete\")})\n+        input(type=\"submit\" value=\"delete\")\n+\n   - case _ =>\n+    .breadcumbs\n+      a(href={strip_resolve(\"../..\")+\".html\"}) Back\n     h1 Temporary Queue\n+    p state: #{state} #{ uptime(state_since) } ago\n \n-p state: #{state} #{ uptime(state_since) } ago\n-- if( state == \"STARTED\" )\n-  form(method=\"post\" action={path(\"action/delete\")})\n-    input(type=\"submit\" value=\"delete\")\n \n h2 Current Size\n ",
                "deletions": 6
            },
            {
                "sha": "99b9adeafe1a94ee36f81f54723d8f60f2a8badd",
                "filename": "apollo-web/src/main/webapp/WEB-INF/org/apache/activemq/apollo/dto/TopicStatusDTO.jade",
                "blob_url": "https://github.com/apache/activemq-apollo/blob/71df7041a62a476c7607cb57db3706dcfb7067d3/apollo-web/src/main/webapp/WEB-INF/org/apache/activemq/apollo/dto/TopicStatusDTO.jade",
                "raw_url": "https://github.com/apache/activemq-apollo/raw/71df7041a62a476c7607cb57db3706dcfb7067d3/apollo-web/src/main/webapp/WEB-INF/org/apache/activemq/apollo/dto/TopicStatusDTO.jade",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/activemq-apollo/contents/apollo-web/src/main/webapp/WEB-INF/org/apache/activemq/apollo/dto/TopicStatusDTO.jade?ref=71df7041a62a476c7607cb57db3706dcfb7067d3",
                "patch": "@@ -44,6 +44,8 @@ ul\n   - for( x <- consumers )\n     li.consumer\n       - x.kind match\n+        - case \"topic-queue\" =>\n+          a(href={ path(\"../../topic-queues/\"+id+\"/\"+x.id+\".html\") }) #{x.label}\n         - case \"queue\" =>\n           a(href={ path(\"../../queues/\"+x.id+\".html\") }) #{x.label}\n         - case \"connection\" =>",
                "deletions": 0
            }
        ]
    }
]