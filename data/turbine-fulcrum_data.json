[{"commit": "https://github.com/apache/turbine-fulcrum/commit/a5ff9c4013f3beaf6aeea6d5c476788f4d9c5277", "parent": "https://github.com/apache/turbine-fulcrum/commit/6ebd7c712aa14ab892bba259e38033c7105ec3f6", "message": "Fix NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/turbine/fulcrum/trunk@222993 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "turbine-fulcrum_1", "file": [{"additions": 2, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/a5ff9c4013f3beaf6aeea6d5c476788f4d9c5277/naming/src/java/org/apache/fulcrum/naming/DefaultNamingService.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/a5ff9c4013f3beaf6aeea6d5c476788f4d9c5277/naming/src/java/org/apache/fulcrum/naming/DefaultNamingService.java", "sha": "e96514548663a7a49ac27655af6491a9dca09fdc", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/naming/src/java/org/apache/fulcrum/naming/DefaultNamingService.java?ref=a5ff9c4013f3beaf6aeea6d5c476788f4d9c5277", "patch": "@@ -129,6 +129,7 @@ public Context getContext(String contextName)\n     public void configure(Configuration conf) throws ConfigurationException\n     {\n \n+        contextPropsList = new Hashtable();\n         Configuration[] keys = conf.getChildren();\n         if (keys != null)\n         {\n@@ -189,7 +190,7 @@ public void initialize() throws Exception\n         {\n             getLogger().error(\"Failed to initialize JDNI contexts!\", e);\n \n-            throw new Exception(\"Failed to initialize JDNI contexts!\");\n+            throw new Exception(\"Failed to initialize JDNI contexts!\",e);\n         }\n     }\n ", "filename": "naming/src/java/org/apache/fulcrum/naming/DefaultNamingService.java"}], "repo": "turbine-fulcrum"}, {"commit": "https://github.com/apache/turbine-fulcrum/commit/c6f1ebe4e17705c82597e296df6855bd2a62fa49", "parent": "https://github.com/apache/turbine-fulcrum/commit/b3ea373f4b1b54b64cc78155953a7d748dcb1f99", "message": "Setting default parameters after dispose() to avoid any NPE when accessing the singleton\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/turbine/fulcrum/trunk@223309 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "turbine-fulcrum_2", "file": [{"additions": 3, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/c6f1ebe4e17705c82597e296df6855bd2a62fa49/yaafi/src/java/org/apache/fulcrum/yaafi/service/servicemanager/ServiceManagerServiceImpl.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/c6f1ebe4e17705c82597e296df6855bd2a62fa49/yaafi/src/java/org/apache/fulcrum/yaafi/service/servicemanager/ServiceManagerServiceImpl.java", "sha": "78a7cdfda30d406204f867028bb007f7e1fa99ea", "changes": 5, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/yaafi/src/java/org/apache/fulcrum/yaafi/service/servicemanager/ServiceManagerServiceImpl.java?ref=c6f1ebe4e17705c82597e296df6855bd2a62fa49", "patch": "@@ -21,6 +21,7 @@\n import org.apache.avalon.framework.context.Context;\n import org.apache.avalon.framework.context.ContextException;\n import org.apache.avalon.framework.context.Contextualizable;\n+import org.apache.avalon.framework.context.DefaultContext;\n import org.apache.avalon.framework.logger.AbstractLogEnabled;\n import org.apache.avalon.framework.logger.Logger;\n import org.apache.avalon.framework.parameters.ParameterException;\n@@ -120,8 +121,8 @@ public void parameterize(Parameters parameters) throws ParameterException\n     public void dispose()\n     {\n         this.serviceManager = null;\n-        this.parameters = null;\n-        this.context = null;\n+        this.parameters = new Parameters();\n+        this.context = new DefaultContext();\n         ServiceManagerServiceImpl.instance = null;\n     }\n ", "filename": "yaafi/src/java/org/apache/fulcrum/yaafi/service/servicemanager/ServiceManagerServiceImpl.java"}], "repo": "turbine-fulcrum"}, {"commit": "https://github.com/apache/turbine-fulcrum/commit/7596a0e733ac9e4b3614a77eda980d0d0a09608e", "parent": "https://github.com/apache/turbine-fulcrum/commit/a6ef3ad8d26cc88f006de5d8baf20e9ce0e9dc23", "message": "Setting the static field to NULL on dispose to avoid getting a NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/turbine/fulcrum/trunk@223293 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "turbine-fulcrum_3", "file": [{"additions": 1, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/7596a0e733ac9e4b3614a77eda980d0d0a09608e/yaafi/src/java/org/apache/fulcrum/yaafi/service/servicemanager/ServiceManagerServiceImpl.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/7596a0e733ac9e4b3614a77eda980d0d0a09608e/yaafi/src/java/org/apache/fulcrum/yaafi/service/servicemanager/ServiceManagerServiceImpl.java", "sha": "6965f161e3000aa939746e783d3a557580d2c227", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/yaafi/src/java/org/apache/fulcrum/yaafi/service/servicemanager/ServiceManagerServiceImpl.java?ref=7596a0e733ac9e4b3614a77eda980d0d0a09608e", "patch": "@@ -122,6 +122,7 @@ public void dispose()\n         this.serviceManager = null;\n         this.parameters = null;\n         this.context = null;\n+        ServiceManagerServiceImpl.instance = null;\n     }\n \n     /////////////////////////////////////////////////////////////////////////", "filename": "yaafi/src/java/org/apache/fulcrum/yaafi/service/servicemanager/ServiceManagerServiceImpl.java"}], "repo": "turbine-fulcrum"}, {"commit": "https://github.com/apache/turbine-fulcrum/commit/2c9cba8bc7356493414cef0f07b3b04600b77442", "parent": "https://github.com/apache/turbine-fulcrum/commit/8efc6d392f305d34f0315d1b752b63c1b81291b3", "message": "Patch from Ronald to prevent NPE when disposing of the container.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/turbine/fulcrum/trunk@222917 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "turbine-fulcrum_4", "file": [{"additions": 4, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/2c9cba8bc7356493414cef0f07b3b04600b77442/testcontainer/src/java/org/apache/fulcrum/testcontainer/BaseUnitTest.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/2c9cba8bc7356493414cef0f07b3b04600b77442/testcontainer/src/java/org/apache/fulcrum/testcontainer/BaseUnitTest.java", "sha": "3918de2fda3ff3e3cf0b766430b84d52186468f7", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/testcontainer/src/java/org/apache/fulcrum/testcontainer/BaseUnitTest.java?ref=2c9cba8bc7356493414cef0f07b3b04600b77442", "patch": "@@ -99,6 +99,10 @@ public BaseUnitTest(String testName)\n \t */\n     protected void tearDown()\n     {\n+        if (container != null)\n+        {\n+            container.dispose();\n+        }\n         container = null;\n     }\n     /**", "filename": "testcontainer/src/java/org/apache/fulcrum/testcontainer/BaseUnitTest.java"}], "repo": "turbine-fulcrum"}, {"commit": "https://github.com/apache/turbine-fulcrum/commit/c070801718472114bd40467a3ae4a8ed8134fe05", "parent": "https://github.com/apache/turbine-fulcrum/commit/e6e8354c3014701b5a737e64320c62d41838e0a4", "message": "fixed a NPE and added a StringKeyField\n\nPR:\nObtained from:\nSubmitted by:\nReviewed by:\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/turbine/fulcrum/trunk@222239 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "turbine-fulcrum_5", "file": [{"additions": 17, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/c070801718472114bd40467a3ae4a8ed8134fe05/src/services/java/org/apache/fulcrum/intake/model/FieldFactory.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/c070801718472114bd40467a3ae4a8ed8134fe05/src/services/java/org/apache/fulcrum/intake/model/FieldFactory.java", "sha": "6a0cc4770035882333d7df5697a23c6a04085ad0", "changes": 20, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/services/java/org/apache/fulcrum/intake/model/FieldFactory.java?ref=c070801718472114bd40467a3ae4a8ed8134fe05", "patch": "@@ -127,6 +127,15 @@ public Field getInstance(XmlField f, Group g)\n                 }\n             }\n                        );\n+        fieldCtors.put(\"StringKey\", new FieldFactory.FieldCtor()\n+            {\n+                public Field getInstance(XmlField f, Group g)\n+                    throws Exception\n+                {\n+                    return new StringKeyField(f, g);\n+                }\n+            }\n+                       );\n         fieldCtors.put(\"FileItem\", new FieldFactory.FieldCtor()\n             {\n                 public Field getInstance(XmlField f, Group g)\n@@ -166,15 +175,20 @@ public Field getInstance(XmlField f, Group g) throws Exception\n     public static final Field getInstance(XmlField f, Group g)\n         throws Exception\n     {\n+        FieldCtor fieldCtor = null;\n         Field field = null;\n         String type = f.getType();\n \n-        field = ((FieldCtor)fieldCtors.get(type)).getInstance(f, g);\n-        if ( field == null)\n+        fieldCtor = (FieldCtor)fieldCtors.get(type);\n+        if ( fieldCtor == null)\n         {\n             throw new ServiceException(\"Unsupported type: \" + type);\n         }\n-\n+        else \n+        {\n+            field = fieldCtor.getInstance(f, g);\n+        }\n+        \n         return field;\n     }\n }", "filename": "src/services/java/org/apache/fulcrum/intake/model/FieldFactory.java"}, {"additions": 104, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/c070801718472114bd40467a3ae4a8ed8134fe05/src/services/java/org/apache/fulcrum/intake/model/StringKeyField.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/c070801718472114bd40467a3ae4a8ed8134fe05/src/services/java/org/apache/fulcrum/intake/model/StringKeyField.java", "sha": "14c01c9199f188e30da6e25c06ac737e03f258ee", "changes": 104, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/services/java/org/apache/fulcrum/intake/model/StringKeyField.java?ref=c070801718472114bd40467a3ae4a8ed8134fe05", "patch": "@@ -0,0 +1,104 @@\n+package org.apache.fulcrum.intake.model;\n+\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Turbine\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Turbine\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+import org.apache.torque.om.StringKey;\n+import org.apache.fulcrum.intake.xmlmodel.XmlField;\n+import org.apache.fulcrum.util.parser.ValueParser;\n+\n+/**  */\n+public class StringKeyField extends Field\n+{\n+    public StringKeyField(XmlField field, Group group)\n+        throws Exception\n+    {\n+        super(field, group);\n+\n+    }\n+\n+\n+    /**\n+     * A suitable validator.\n+     *\n+     * @return \"DefaultValidator\"\n+     */\n+    protected String getDefaultValidator()\n+    {\n+        return\n+            \"org.apache.fulcrum.intake.validator.DefaultValidator\";\n+    }\n+\n+    /**\n+     * converts the parameter to the correct Object.\n+     */\n+    protected void doSetValue(ValueParser pp)\n+    {\n+        if ( isMultiValued  )\n+        {\n+            String[] ss = pp.getStrings(getKey());\n+            StringKey[] ival = new StringKey[ss.length];\n+            for (int i=0; i<ss.length; i++)\n+            {\n+                ival[i] = new StringKey(ss[i]);\n+            }\n+            setTestValue(ival);\n+        }\n+        else\n+        {\n+            setTestValue( new StringKey(pp.getString(getKey())) );\n+        }\n+    }\n+\n+}", "filename": "src/services/java/org/apache/fulcrum/intake/model/StringKeyField.java"}, {"additions": 17, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/c070801718472114bd40467a3ae4a8ed8134fe05/src/services/org/apache/fulcrum/intake/model/FieldFactory.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/c070801718472114bd40467a3ae4a8ed8134fe05/src/services/org/apache/fulcrum/intake/model/FieldFactory.java", "sha": "6a0cc4770035882333d7df5697a23c6a04085ad0", "changes": 20, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/services/org/apache/fulcrum/intake/model/FieldFactory.java?ref=c070801718472114bd40467a3ae4a8ed8134fe05", "patch": "@@ -127,6 +127,15 @@ public Field getInstance(XmlField f, Group g)\n                 }\n             }\n                        );\n+        fieldCtors.put(\"StringKey\", new FieldFactory.FieldCtor()\n+            {\n+                public Field getInstance(XmlField f, Group g)\n+                    throws Exception\n+                {\n+                    return new StringKeyField(f, g);\n+                }\n+            }\n+                       );\n         fieldCtors.put(\"FileItem\", new FieldFactory.FieldCtor()\n             {\n                 public Field getInstance(XmlField f, Group g)\n@@ -166,15 +175,20 @@ public Field getInstance(XmlField f, Group g) throws Exception\n     public static final Field getInstance(XmlField f, Group g)\n         throws Exception\n     {\n+        FieldCtor fieldCtor = null;\n         Field field = null;\n         String type = f.getType();\n \n-        field = ((FieldCtor)fieldCtors.get(type)).getInstance(f, g);\n-        if ( field == null)\n+        fieldCtor = (FieldCtor)fieldCtors.get(type);\n+        if ( fieldCtor == null)\n         {\n             throw new ServiceException(\"Unsupported type: \" + type);\n         }\n-\n+        else \n+        {\n+            field = fieldCtor.getInstance(f, g);\n+        }\n+        \n         return field;\n     }\n }", "filename": "src/services/org/apache/fulcrum/intake/model/FieldFactory.java"}, {"additions": 104, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/c070801718472114bd40467a3ae4a8ed8134fe05/src/services/org/apache/fulcrum/intake/model/StringKeyField.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/c070801718472114bd40467a3ae4a8ed8134fe05/src/services/org/apache/fulcrum/intake/model/StringKeyField.java", "sha": "14c01c9199f188e30da6e25c06ac737e03f258ee", "changes": 104, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/services/org/apache/fulcrum/intake/model/StringKeyField.java?ref=c070801718472114bd40467a3ae4a8ed8134fe05", "patch": "@@ -0,0 +1,104 @@\n+package org.apache.fulcrum.intake.model;\n+\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Turbine\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Turbine\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+import org.apache.torque.om.StringKey;\n+import org.apache.fulcrum.intake.xmlmodel.XmlField;\n+import org.apache.fulcrum.util.parser.ValueParser;\n+\n+/**  */\n+public class StringKeyField extends Field\n+{\n+    public StringKeyField(XmlField field, Group group)\n+        throws Exception\n+    {\n+        super(field, group);\n+\n+    }\n+\n+\n+    /**\n+     * A suitable validator.\n+     *\n+     * @return \"DefaultValidator\"\n+     */\n+    protected String getDefaultValidator()\n+    {\n+        return\n+            \"org.apache.fulcrum.intake.validator.DefaultValidator\";\n+    }\n+\n+    /**\n+     * converts the parameter to the correct Object.\n+     */\n+    protected void doSetValue(ValueParser pp)\n+    {\n+        if ( isMultiValued  )\n+        {\n+            String[] ss = pp.getStrings(getKey());\n+            StringKey[] ival = new StringKey[ss.length];\n+            for (int i=0; i<ss.length; i++)\n+            {\n+                ival[i] = new StringKey(ss[i]);\n+            }\n+            setTestValue(ival);\n+        }\n+        else\n+        {\n+            setTestValue( new StringKey(pp.getString(getKey())) );\n+        }\n+    }\n+\n+}", "filename": "src/services/org/apache/fulcrum/intake/model/StringKeyField.java"}], "repo": "turbine-fulcrum"}, {"commit": "https://github.com/apache/turbine-fulcrum/commit/5570dbb6eb3050f5d133119b22ffd1799296c26d", "parent": "https://github.com/apache/turbine-fulcrum/commit/980e9a6012e8ca7c906f1f908f3201a70b4b9c61", "message": "Not registering a ServiceableJobListener results in a NPE in the dispose() method. We now check that the ServiceableJobListener is indeed instantiated before we deregister it\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/turbine/fulcrum/trunk@223297 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "turbine-fulcrum_6", "file": [{"additions": 11, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/5570dbb6eb3050f5d133119b22ffd1799296c26d/quartz/src/java/org/apache/fulcrum/quartz/impl/DefaultQuartzScheduler.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/5570dbb6eb3050f5d133119b22ffd1799296c26d/quartz/src/java/org/apache/fulcrum/quartz/impl/DefaultQuartzScheduler.java", "sha": "74a2c3c05675ae2fcca609c1d0375d16f5d59aea", "changes": 20, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/quartz/src/java/org/apache/fulcrum/quartz/impl/DefaultQuartzScheduler.java?ref=5570dbb6eb3050f5d133119b22ffd1799296c26d", "patch": "@@ -1,12 +1,12 @@\n /*\n  * Copyright 2001-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -51,11 +51,11 @@\n \n /**\n  * Default implementation of QuartzScheduler\n- * \n+ *\n  * @author <a href=\"mailto:leandro@ibnetwork.com.br\">Leandro Rodrigo Saad Cruz\n  *         </a>\n  * @author <a href=\"mailto:epughNOSPAM@opensourceconnections.com\">Eric Pugh </a>\n- *  \n+ *\n  */\n public class DefaultQuartzScheduler implements QuartzScheduler, Configurable, Serviceable, Disposable, Initializable,\n         ThreadSafe {\n@@ -163,14 +163,14 @@ public void initialize() throws Exception {\n                     CronTrigger triggerToSchedule = new CronTrigger(trigger.getName(),trigger.getGroup(),trigger.getJobName(),trigger.getJobGroup(),((CronTrigger)trigger).getCronExpression());\n                     logger.debug(\"Scheduling trigger [\" + triggerToSchedule.getFullName() + \"] for  job [\"\n                             + triggerToSchedule.getFullJobName() + \"] using cron \" + triggerToSchedule.getCronExpression());\n-                    \n+\n                     triggerToSchedule.setDescription(trigger.getDescription());\n                    // CronTrigger cronTrigger = new CronTrigger(\"someTriggerCron\", Scheduler.DEFAULT_GROUP,\n                    //         \"simpleJob\",\"DEFAULT_GROUP\" ,\"* * * * * ?\");\n                     scheduler.scheduleJob(triggerToSchedule);\n                  /*   Trigger rightNow = new SimpleTrigger(\"someTrigger\", Scheduler.DEFAULT_GROUP,\n                             \"notSoSimpleJob\",\"DEFAULT_GROUP\" ,new Date(), null, 0,0L);\n-                            \n+\n                     scheduler.scheduleJob(rightNow);*/\n                 }\n             }\n@@ -189,7 +189,9 @@ public void dispose() {\n         } catch (SchedulerException e) {\n             logger.warn(\"Problem shuting down scheduler \", e);\n         }\n-        wrapper.dispose();\n+        if(wrapper != null) {\n+            wrapper.dispose();\n+        }\n         scheduler = null;\n         manager = null;\n     }\n@@ -210,7 +212,7 @@ public Map getJobDetailsMap() {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see br.com.ibnetwork.xingu.quartzscheduler.QuartzScheduler#getTriggersMap()\n      */\n     public Map getTriggersMap() {", "filename": "quartz/src/java/org/apache/fulcrum/quartz/impl/DefaultQuartzScheduler.java"}], "repo": "turbine-fulcrum"}, {"commit": "https://github.com/apache/turbine-fulcrum/commit/4fe25cd3ffa37bb7b8b9a5ef7f6a5c67a864087a", "parent": "https://github.com/apache/turbine-fulcrum/commit/1d8174cfb683ec471b8ab4d26e9b4c9e85758edf", "message": "fixes an npe that could occur when setRequired was called on a field that failed\nvalidation.\n\nPR:\nObtained from:\nSubmitted by:\nReviewed by:\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/turbine/fulcrum/trunk@222336 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "turbine-fulcrum_7", "file": [{"additions": 8, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/4fe25cd3ffa37bb7b8b9a5ef7f6a5c67a864087a/src/services/java/org/apache/fulcrum/intake/model/Field.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/4fe25cd3ffa37bb7b8b9a5ef7f6a5c67a864087a/src/services/java/org/apache/fulcrum/intake/model/Field.java", "sha": "28ac12dea5a9f21e7e419b3eb4deb2c272f34c24", "changes": 9, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/services/java/org/apache/fulcrum/intake/model/Field.java?ref=4fe25cd3ffa37bb7b8b9a5ef7f6a5c67a864087a", "patch": "@@ -475,6 +475,9 @@ protected boolean validate()\n \n             if ( validator != null )\n             {\n+                // set the test value as a String[] which might be replaced by\n+                // the correct type if the input is valid.\n+                setTestValue(pp.getStrings(getKey()));\n                 for (int i=0; i<stringValues.length; i++)\n                 {\n                     try\n@@ -502,7 +505,11 @@ protected boolean validate()\n             }\n \n             if ( validator != null )\n-            {\n+            {            \n+                // set the test value as a String which might be replaced by\n+                // the correct type if the input is valid.\n+                setTestValue(pp.getString(getKey()));\n+\n                 try\n                 {\n                     validator.assertValidity(stringValue);", "filename": "src/services/java/org/apache/fulcrum/intake/model/Field.java"}, {"additions": 8, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/4fe25cd3ffa37bb7b8b9a5ef7f6a5c67a864087a/src/services/org/apache/fulcrum/intake/model/Field.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/4fe25cd3ffa37bb7b8b9a5ef7f6a5c67a864087a/src/services/org/apache/fulcrum/intake/model/Field.java", "sha": "28ac12dea5a9f21e7e419b3eb4deb2c272f34c24", "changes": 9, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/services/org/apache/fulcrum/intake/model/Field.java?ref=4fe25cd3ffa37bb7b8b9a5ef7f6a5c67a864087a", "patch": "@@ -475,6 +475,9 @@ protected boolean validate()\n \n             if ( validator != null )\n             {\n+                // set the test value as a String[] which might be replaced by\n+                // the correct type if the input is valid.\n+                setTestValue(pp.getStrings(getKey()));\n                 for (int i=0; i<stringValues.length; i++)\n                 {\n                     try\n@@ -502,7 +505,11 @@ protected boolean validate()\n             }\n \n             if ( validator != null )\n-            {\n+            {            \n+                // set the test value as a String which might be replaced by\n+                // the correct type if the input is valid.\n+                setTestValue(pp.getString(getKey()));\n+\n                 try\n                 {\n                     validator.assertValidity(stringValue);", "filename": "src/services/org/apache/fulcrum/intake/model/Field.java"}], "repo": "turbine-fulcrum"}, {"commit": "https://github.com/apache/turbine-fulcrum/commit/16ea71868dc4a141b7db0731d23d00f5d5e5b22e", "parent": "https://github.com/apache/turbine-fulcrum/commit/cefc67b4d764197422633ee9deecf7e4b2827534", "message": "base most of Intake on a ValueParser as ParameterParser is only needed for\nFileItemField, so the rest of intake is applicable to non http specific\nparameters.\n\nalso fixed an npe in Group.removeFromRequest\n\nPR:\nObtained from:\nSubmitted by:\nReviewed by:\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/turbine/fulcrum/trunk@222171 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "turbine-fulcrum_8", "file": [{"additions": 3, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/java/org/apache/fulcrum/intake/Intake.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/java/org/apache/fulcrum/intake/Intake.java", "sha": "206d2cdb5e095e5b828169b05534021b6f36f47f", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/services/java/org/apache/fulcrum/intake/Intake.java?ref=16ea71868dc4a141b7db0731d23d00f5d5e5b22e", "patch": "@@ -63,7 +63,7 @@\n import org.apache.fulcrum.Log;\n import org.apache.fulcrum.pool.Recyclable;\n import org.apache.torque.om.Retrievable;\n-import org.apache.fulcrum.util.parser.ParameterParser;\n+import org.apache.fulcrum.util.parser.ValueParser;\n import org.apache.fulcrum.intake.model.Group;\n import org.apache.fulcrum.intake.TurbineIntake;\n \n@@ -78,7 +78,7 @@\n {\n     public static final String DEFAULT_KEY = \"_0\";\n     private HashMap groups;\n-    private ParameterParser pp;\n+    private ValueParser pp;\n \n     HashMap declaredGroups = new HashMap();\n     StringBuffer allGroupsSB = new StringBuffer(256);\n@@ -103,7 +103,7 @@ public Intake()\n     /**\n      * Prepares intake for a single request\n      */\n-    public void init(ParameterParser pp)\n+    public void init(ValueParser pp)\n     {\n         this.pp = pp;\n         String[] groupKeys = pp.getStrings(\"intake-grp\");", "filename": "src/services/java/org/apache/fulcrum/intake/Intake.java"}, {"additions": 5, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/java/org/apache/fulcrum/intake/IntakeService.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/java/org/apache/fulcrum/intake/IntakeService.java", "sha": "308008f170df61c23e822b7e37226f3ea5803aa7", "changes": 10, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/services/java/org/apache/fulcrum/intake/IntakeService.java?ref=16ea71868dc4a141b7db0731d23d00f5d5e5b22e", "patch": "@@ -57,7 +57,7 @@\n import java.lang.reflect.Method;\n import org.apache.fulcrum.ServiceException;\n import org.apache.fulcrum.pool.Recyclable;\n-import org.apache.fulcrum.util.parser.ParameterParser;\n+import org.apache.fulcrum.util.parser.ValueParser;\n import org.apache.fulcrum.intake.model.Group;\n \n /**\n@@ -98,28 +98,28 @@ public Group getGroup(String groupName)\n     /**\n      * Gets an instance of a named group either from the pool\n      * or by calling the Factory Service if the pool is empty and\n-     * then initialize it using the ParameterParser looking for\n+     * then initialize it using the ValueParser looking for\n      * a NEW id.\n      *\n      * @param groupName the name of the group.\n      * @param pp the request parameters that may contain matching keys\n      * @return a Group instance.\n      * @throws ServiceException if recycling fails.\n      * /\n-    public Group getGroup(String groupName, ParameterParser pp)\n+    public Group getGroup(String groupName, ValueParser pp)\n         throws Exception;\n \n     /**\n      * Gets an instance of a named group either from the pool\n      * or by calling the Factory Service if the pool is empty and\n-     * then initialize it using the ParameterParser looking for id.\n+     * then initialize it using the ValueParser looking for id.\n      *\n      * @param groupName the name of the group.\n      * @param pp the request parameters that may contain matching keys\n      * @return a Group instance.\n      * @throws ServiceException if recycling fails.\n      * /\n-    public Group getGroup(String groupName, ParameterParser pp, String id)\n+    public Group getGroup(String groupName, ValueParser pp, String id)\n         throws Exception;\n     */\n ", "filename": "src/services/java/org/apache/fulcrum/intake/IntakeService.java"}, {"additions": 4, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/java/org/apache/fulcrum/intake/TurbineIntake.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/java/org/apache/fulcrum/intake/TurbineIntake.java", "sha": "fa2db45eac8acac0ddb063fbd4bc60fa0cc00ff0", "changes": 8, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/services/java/org/apache/fulcrum/intake/TurbineIntake.java?ref=16ea71868dc4a141b7db0731d23d00f5d5e5b22e", "patch": "@@ -93,15 +93,15 @@ public static Group getGroup(String groupName)\n     /**\n      * Gets an instance of a named group either from the pool\n      * or by calling the Factory Service if the pool is empty and\n-     * then initialize it using the ParameterParser looking for\n+     * then initialize it using the ValueParser looking for\n      * a NEW id.\n      *\n      * @param groupName the name of the group.\n      * @param pp the request parameters that may contain matching keys\n      * @return a Group instance.\n      * @throws ServiceException if recycling fails.\n      * /\n-    public static Group getGroup(String groupName, ParameterParser pp)\n+    public static Group getGroup(String groupName, ValueParser pp)\n         throws Exception\n     {\n         return getService().getGroup(groupName, pp);\n@@ -110,15 +110,15 @@ public static Group getGroup(String groupName, ParameterParser pp)\n     /**\n      * Gets an instance of a named group either from the pool\n      * or by calling the Factory Service if the pool is empty and\n-     * then initialize it using the ParameterParser looking for id.\n+     * then initialize it using the ValueParser looking for id.\n      *\n      * @param groupName the name of the group.\n      * @param pp the request parameters that may contain matching keys\n      * @return a Group instance.\n      * @throws ServiceException if recycling fails.\n      * /\n     public static Group getGroup(String groupName,\n-                                 ParameterParser pp, String id)\n+                                 ValueParser pp, String id)\n         throws Exception\n     {\n         return getService().getGroup(groupName, pp, id);", "filename": "src/services/java/org/apache/fulcrum/intake/TurbineIntake.java"}, {"additions": 2, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/java/org/apache/fulcrum/intake/model/BigDecimalField.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/java/org/apache/fulcrum/intake/model/BigDecimalField.java", "sha": "ba96e6552f0ec891295241d81319bd8209bd5847", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/services/java/org/apache/fulcrum/intake/model/BigDecimalField.java?ref=16ea71868dc4a141b7db0731d23d00f5d5e5b22e", "patch": "@@ -58,7 +58,7 @@\n import java.util.Vector;\n import org.apache.fulcrum.intake.xmlmodel.Rule;\n import org.apache.fulcrum.intake.xmlmodel.XmlField;\n-import org.apache.fulcrum.util.parser.ParameterParser;\n+import org.apache.fulcrum.util.parser.ValueParser;\n \n /**  */\n public class BigDecimalField extends Field\n@@ -82,7 +82,7 @@ protected String getDefaultValidator()\n     /**\n      * converts the parameter to the correct Object.\n      */\n-    protected void doSetValue(ParameterParser pp)\n+    protected void doSetValue(ValueParser pp)\n     {\n         if ( isMultiValued  )\n         {", "filename": "src/services/java/org/apache/fulcrum/intake/model/BigDecimalField.java"}, {"additions": 2, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/java/org/apache/fulcrum/intake/model/BooleanField.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/java/org/apache/fulcrum/intake/model/BooleanField.java", "sha": "1a299a2a04cea923f7afe4b0d982b84bf834584d", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/services/java/org/apache/fulcrum/intake/model/BooleanField.java?ref=16ea71868dc4a141b7db0731d23d00f5d5e5b22e", "patch": "@@ -56,7 +56,7 @@\n \n import org.apache.fulcrum.intake.xmlmodel.XmlField;\n import org.apache.fulcrum.Log;\n-import org.apache.fulcrum.util.parser.ParameterParser;\n+import org.apache.fulcrum.util.parser.ValueParser;\n \n /**\n  * Base class for Intake generated input processing classes.\n@@ -85,7 +85,7 @@ protected String getDefaultValidator()\n     /**\n      * converts the parameter to the correct Object.\n      */\n-    protected void doSetValue(ParameterParser pp)\n+    protected void doSetValue(ValueParser pp)\n     {\n         setTestValue( pp.getBool(getKey()) );\n     }", "filename": "src/services/java/org/apache/fulcrum/intake/model/BooleanField.java"}, {"additions": 2, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/java/org/apache/fulcrum/intake/model/ComboKeyField.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/java/org/apache/fulcrum/intake/model/ComboKeyField.java", "sha": "68e3b2e3dc934a849b44e360c0f24b21c9b2df38", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/services/java/org/apache/fulcrum/intake/model/ComboKeyField.java?ref=16ea71868dc4a141b7db0731d23d00f5d5e5b22e", "patch": "@@ -55,7 +55,7 @@\n  */\n \n import java.util.Vector;\n-import org.apache.fulcrum.util.parser.ParameterParser;\n+import org.apache.fulcrum.util.parser.ValueParser;\n import org.apache.torque.om.ComboKey;\n import org.apache.torque.om.ObjectKey;\n import org.apache.fulcrum.intake.xmlmodel.Rule;\n@@ -75,7 +75,7 @@ public ComboKeyField(XmlField field, Group group)\n     /**\n      * converts the parameter to the correct Object.\n      */\n-    protected void doSetValue(ParameterParser pp)\n+    protected void doSetValue(ValueParser pp)\n     {\n         try\n         {", "filename": "src/services/java/org/apache/fulcrum/intake/model/ComboKeyField.java"}, {"additions": 6, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/java/org/apache/fulcrum/intake/model/Field.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/java/org/apache/fulcrum/intake/model/Field.java", "sha": "7125ecd1124969e48cc67a12a1ab8a74dd8c7f31", "changes": 12, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/services/java/org/apache/fulcrum/intake/model/Field.java?ref=16ea71868dc4a141b7db0731d23d00f5d5e5b22e", "patch": "@@ -57,7 +57,7 @@\n import java.util.Map;\n import java.lang.reflect.Method;\n import org.apache.regexp.RE;\n-import org.apache.fulcrum.util.parser.ParameterParser;\n+import org.apache.fulcrum.util.parser.ValueParser;\n import org.apache.torque.om.Retrievable;\n import org.apache.fulcrum.intake.TurbineIntake;\n import org.apache.fulcrum.intake.xmlmodel.Rule;\n@@ -109,7 +109,7 @@\n     private Object[] valArray; // for reflection\n \n     /** The object containing the request data */\n-    protected ParameterParser pp;\n+    protected ValueParser pp;\n \n     /**\n      * Constructs a field based on data in the xml specification\n@@ -180,11 +180,11 @@ else if ( className != null && className.indexOf('.') == -1 )\n      * if a value has been supplied for this field.  if so, the value\n      * is validated.\n      *\n-     * @param pp a <code>ParameterParser</code> value\n+     * @param pp a <code>ValueParser</code> value\n      * @return a <code>Field</code> value\n      * @exception ServiceException if an error occurs\n      */\n-    public Field init(ParameterParser pp)\n+    public Field init(ValueParser pp)\n         throws ServiceException\n     {\n         this.pp = pp;\n@@ -404,7 +404,7 @@ public void setMessage(String message)\n     /**\n      * Compares request data with constraints and sets the valid flag.\n      */\n-    protected boolean validate(ParameterParser pp)\n+    protected boolean validate(ValueParser pp)\n     //    throws ServiceException\n     {\n         if ( isMultiValued  )\n@@ -476,7 +476,7 @@ else if ( set_flag )\n      * Compares request data with constraints and sets the valid flag.\n      * To be implemented in subclasses\n      */\n-    protected abstract void doSetValue(ParameterParser pp);\n+    protected abstract void doSetValue(ValueParser pp);\n \n \n ", "filename": "src/services/java/org/apache/fulcrum/intake/model/Field.java"}, {"additions": 16, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/java/org/apache/fulcrum/intake/model/FileItemField.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/java/org/apache/fulcrum/intake/model/FileItemField.java", "sha": "09c05ceae1a90e21911de118ec7971391ee8126b", "changes": 20, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/services/java/org/apache/fulcrum/intake/model/FileItemField.java?ref=16ea71868dc4a141b7db0731d23d00f5d5e5b22e", "patch": "@@ -57,6 +57,7 @@\n import java.util.Vector;\n import org.apache.fulcrum.intake.xmlmodel.Rule;\n import org.apache.fulcrum.intake.xmlmodel.XmlField;\n+import org.apache.fulcrum.util.parser.ValueParser;\n import org.apache.fulcrum.util.parser.ParameterParser;\n import org.apache.fulcrum.intake.validator.Validator;\n import org.apache.fulcrum.intake.validator.FileValidator;\n@@ -96,10 +97,19 @@ protected String getDefaultValidator()\n      * @return a <code>Field</code> value\n      * @exception ServiceException if an error occurs\n      */\n-    public Field init(ParameterParser pp)\n+    public Field init(ValueParser vp)\n         throws ServiceException\n     {\n-        this.pp = pp;\n+        try\n+        {\n+            this.pp = (ParameterParser)vp;\n+        }\n+        catch (ClassCastException e)\n+        {\n+            throw new ServiceException(\n+                \"FileItemFields can only be used with ParameterParser\");\n+        }\n+\n         valid_flag = true;\n \n         if ( pp.containsKey(getKey()) )\n@@ -115,9 +125,10 @@ public Field init(ParameterParser pp)\n     /**\n      * Compares request data with constraints and sets the valid flag.\n      */\n-    protected boolean validate(ParameterParser pp)\n+    protected boolean validate(ValueParser vp)\n     //    throws ServiceException\n     {\n+        ParameterParser pp = (ParameterParser)vp;        \n         if ( isMultiValued  )\n         {\n             FileItem[] ss = pp.getFileItems(getKey());\n@@ -185,8 +196,9 @@ else if ( set_flag )\n     /**\n      * converts the parameter to the correct Object.\n      */\n-    protected void doSetValue(ParameterParser pp)\n+    protected void doSetValue(ValueParser vp)\n     {\n+        ParameterParser pp = (ParameterParser)vp;\n         if ( isMultiValued  )\n         {\n             setTestValue(pp.getFileItems(getKey()));", "filename": "src/services/java/org/apache/fulcrum/intake/model/FileItemField.java"}, {"additions": 20, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/java/org/apache/fulcrum/intake/model/Group.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/java/org/apache/fulcrum/intake/model/Group.java", "sha": "03289904fac3dba2c83c0563fb1adebf54f19dd2", "changes": 37, "status": "modified", "deletions": 17, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/services/java/org/apache/fulcrum/intake/model/Group.java?ref=16ea71868dc4a141b7db0731d23d00f5d5e5b22e", "patch": "@@ -64,7 +64,7 @@\n import org.apache.fulcrum.intake.TurbineIntake;\n import org.apache.fulcrum.intake.xmlmodel.XmlField;\n import org.apache.fulcrum.intake.xmlmodel.XmlGroup;\n-import org.apache.fulcrum.util.parser.ParameterParser;\n+import org.apache.fulcrum.util.parser.ValueParser;\n import org.apache.fulcrum.ServiceException;\n import org.apache.fulcrum.pool.Recyclable;\n \n@@ -119,7 +119,7 @@\n     /**\n      * The object containing the request data\n      */\n-    protected ParameterParser pp;\n+    protected ValueParser pp;\n \n     /**\n      * A flag to help prevent duplicate hidden fields declaring this group.\n@@ -177,10 +177,10 @@ public Group(XmlGroup group)\n     /**\n      * Initializes the default Group using parameters.\n      *\n-     * @param pp a <code>ParameterParser</code> value\n+     * @param pp a <code>ValueParser</code> value\n      * @return this Group\n      */\n-    public Group init(ParameterParser pp) throws ServiceException\n+    public Group init(ValueParser pp) throws ServiceException\n     {\n         return init(NEW, pp);\n     }\n@@ -192,7 +192,7 @@ public Group init(ParameterParser pp) throws ServiceException\n      * @param data a <code>RunData</code> value\n      * @return this Group\n      */\n-    public Group init(String key, ParameterParser pp)\n+    public Group init(String key, ValueParser pp)\n         throws ServiceException\n     {\n         this.oid = key;\n@@ -306,11 +306,11 @@ public String getObjectKey()\n     /**\n      * Describe <code>getObjects</code> method here.\n      *\n-     * @param pp a <code>ParameterParser</code> value\n+     * @param pp a <code>ValueParser</code> value\n      * @return an <code>ArrayList</code> value\n      * @exception ServiceException if an error occurs\n      */\n-    public ArrayList getObjects(ParameterParser pp)\n+    public ArrayList getObjects(ValueParser pp)\n         throws ServiceException\n     {\n         ArrayList objs = null;\n@@ -413,20 +413,23 @@ public void getProperties(Object obj)\n      */\n     public void removeFromRequest()\n     {\n-        String[] groups = pp.getStrings(gid);\n-        if ( groups != null )\n+        if (pp != null)\n         {\n-            pp.remove(gid);\n-            for (int i=0; i<groups.length; i++)\n+            String[] groups = pp.getStrings(gid);\n+            if ( groups != null )\n             {\n-                if ( groups[i] != null && !groups[i].equals(oid) )\n+                pp.remove(gid);\n+                for (int i=0; i<groups.length; i++)\n                 {\n-                    pp.add(gid,groups[i]);\n+                    if ( groups[i] != null && !groups[i].equals(oid) )\n+                    {\n+                        pp.add(gid,groups[i]);\n+                    }\n+                }\n+                for (int i=fieldsArray.length-1; i>=0; i--)\n+                {\n+                    fieldsArray[i].removeFromRequest();\n                 }\n-            }\n-            for (int i=fieldsArray.length-1; i>=0; i--)\n-            {\n-                fieldsArray[i].removeFromRequest();\n             }\n         }\n     }", "filename": "src/services/java/org/apache/fulcrum/intake/model/Group.java"}, {"additions": 2, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/java/org/apache/fulcrum/intake/model/IntegerField.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/java/org/apache/fulcrum/intake/model/IntegerField.java", "sha": "15571566081294a6de1e5cb71cba0f34eb31a492", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/services/java/org/apache/fulcrum/intake/model/IntegerField.java?ref=16ea71868dc4a141b7db0731d23d00f5d5e5b22e", "patch": "@@ -57,7 +57,7 @@\n import java.util.Vector;\n import org.apache.fulcrum.intake.xmlmodel.Rule;\n import org.apache.fulcrum.intake.xmlmodel.XmlField;\n-import org.apache.fulcrum.util.parser.ParameterParser;\n+import org.apache.fulcrum.util.parser.ValueParser;\n \n /**  */\n public class IntegerField extends Field\n@@ -82,7 +82,7 @@ protected String getDefaultValidator()\n     /**\n      * converts the parameter to the correct Object.\n      */\n-    protected void doSetValue(ParameterParser pp)\n+    protected void doSetValue(ValueParser pp)\n     {\n         if ( isMultiValued  )\n         {", "filename": "src/services/java/org/apache/fulcrum/intake/model/IntegerField.java"}, {"additions": 2, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/java/org/apache/fulcrum/intake/model/NumberKeyField.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/java/org/apache/fulcrum/intake/model/NumberKeyField.java", "sha": "df9da25b0e8aba6aacaac9f64c226586e586fa3f", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/services/java/org/apache/fulcrum/intake/model/NumberKeyField.java?ref=16ea71868dc4a141b7db0731d23d00f5d5e5b22e", "patch": "@@ -59,7 +59,7 @@\n import org.apache.torque.om.ObjectKey;\n import org.apache.fulcrum.intake.xmlmodel.Rule;\n import org.apache.fulcrum.intake.xmlmodel.XmlField;\n-import org.apache.fulcrum.util.parser.ParameterParser;\n+import org.apache.fulcrum.util.parser.ValueParser;\n \n /**  */\n public class NumberKeyField extends Field\n@@ -86,7 +86,7 @@ protected String getDefaultValidator()\n     /**\n      * converts the parameter to the correct Object.\n      */\n-    protected void doSetValue(ParameterParser pp)\n+    protected void doSetValue(ValueParser pp)\n     {\n         if ( isMultiValued  )\n         {", "filename": "src/services/java/org/apache/fulcrum/intake/model/NumberKeyField.java"}, {"additions": 2, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/java/org/apache/fulcrum/intake/model/StringField.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/java/org/apache/fulcrum/intake/model/StringField.java", "sha": "48dd4448516a7946bbed34797ad7f18747012d7b", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/services/java/org/apache/fulcrum/intake/model/StringField.java?ref=16ea71868dc4a141b7db0731d23d00f5d5e5b22e", "patch": "@@ -54,7 +54,7 @@\n  * <http://www.apache.org/>.\n  */\n \n-import org.apache.fulcrum.util.parser.ParameterParser;\n+import org.apache.fulcrum.util.parser.ValueParser;\n import org.apache.fulcrum.intake.xmlmodel.XmlField;\n \n /**\n@@ -74,7 +74,7 @@ public StringField(XmlField field, Group group)\n     /**\n      * converts the parameter to the correct Object.\n      */\n-    protected void doSetValue(ParameterParser pp)\n+    protected void doSetValue(ValueParser pp)\n     {\n         if ( isMultiValued )\n         {", "filename": "src/services/java/org/apache/fulcrum/intake/model/StringField.java"}, {"additions": 3, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/org/apache/fulcrum/intake/Intake.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/org/apache/fulcrum/intake/Intake.java", "sha": "206d2cdb5e095e5b828169b05534021b6f36f47f", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/services/org/apache/fulcrum/intake/Intake.java?ref=16ea71868dc4a141b7db0731d23d00f5d5e5b22e", "patch": "@@ -63,7 +63,7 @@\n import org.apache.fulcrum.Log;\n import org.apache.fulcrum.pool.Recyclable;\n import org.apache.torque.om.Retrievable;\n-import org.apache.fulcrum.util.parser.ParameterParser;\n+import org.apache.fulcrum.util.parser.ValueParser;\n import org.apache.fulcrum.intake.model.Group;\n import org.apache.fulcrum.intake.TurbineIntake;\n \n@@ -78,7 +78,7 @@\n {\n     public static final String DEFAULT_KEY = \"_0\";\n     private HashMap groups;\n-    private ParameterParser pp;\n+    private ValueParser pp;\n \n     HashMap declaredGroups = new HashMap();\n     StringBuffer allGroupsSB = new StringBuffer(256);\n@@ -103,7 +103,7 @@ public Intake()\n     /**\n      * Prepares intake for a single request\n      */\n-    public void init(ParameterParser pp)\n+    public void init(ValueParser pp)\n     {\n         this.pp = pp;\n         String[] groupKeys = pp.getStrings(\"intake-grp\");", "filename": "src/services/org/apache/fulcrum/intake/Intake.java"}, {"additions": 5, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/org/apache/fulcrum/intake/IntakeService.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/org/apache/fulcrum/intake/IntakeService.java", "sha": "308008f170df61c23e822b7e37226f3ea5803aa7", "changes": 10, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/services/org/apache/fulcrum/intake/IntakeService.java?ref=16ea71868dc4a141b7db0731d23d00f5d5e5b22e", "patch": "@@ -57,7 +57,7 @@\n import java.lang.reflect.Method;\n import org.apache.fulcrum.ServiceException;\n import org.apache.fulcrum.pool.Recyclable;\n-import org.apache.fulcrum.util.parser.ParameterParser;\n+import org.apache.fulcrum.util.parser.ValueParser;\n import org.apache.fulcrum.intake.model.Group;\n \n /**\n@@ -98,28 +98,28 @@ public Group getGroup(String groupName)\n     /**\n      * Gets an instance of a named group either from the pool\n      * or by calling the Factory Service if the pool is empty and\n-     * then initialize it using the ParameterParser looking for\n+     * then initialize it using the ValueParser looking for\n      * a NEW id.\n      *\n      * @param groupName the name of the group.\n      * @param pp the request parameters that may contain matching keys\n      * @return a Group instance.\n      * @throws ServiceException if recycling fails.\n      * /\n-    public Group getGroup(String groupName, ParameterParser pp)\n+    public Group getGroup(String groupName, ValueParser pp)\n         throws Exception;\n \n     /**\n      * Gets an instance of a named group either from the pool\n      * or by calling the Factory Service if the pool is empty and\n-     * then initialize it using the ParameterParser looking for id.\n+     * then initialize it using the ValueParser looking for id.\n      *\n      * @param groupName the name of the group.\n      * @param pp the request parameters that may contain matching keys\n      * @return a Group instance.\n      * @throws ServiceException if recycling fails.\n      * /\n-    public Group getGroup(String groupName, ParameterParser pp, String id)\n+    public Group getGroup(String groupName, ValueParser pp, String id)\n         throws Exception;\n     */\n ", "filename": "src/services/org/apache/fulcrum/intake/IntakeService.java"}, {"additions": 4, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/org/apache/fulcrum/intake/TurbineIntake.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/org/apache/fulcrum/intake/TurbineIntake.java", "sha": "fa2db45eac8acac0ddb063fbd4bc60fa0cc00ff0", "changes": 8, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/services/org/apache/fulcrum/intake/TurbineIntake.java?ref=16ea71868dc4a141b7db0731d23d00f5d5e5b22e", "patch": "@@ -93,15 +93,15 @@ public static Group getGroup(String groupName)\n     /**\n      * Gets an instance of a named group either from the pool\n      * or by calling the Factory Service if the pool is empty and\n-     * then initialize it using the ParameterParser looking for\n+     * then initialize it using the ValueParser looking for\n      * a NEW id.\n      *\n      * @param groupName the name of the group.\n      * @param pp the request parameters that may contain matching keys\n      * @return a Group instance.\n      * @throws ServiceException if recycling fails.\n      * /\n-    public static Group getGroup(String groupName, ParameterParser pp)\n+    public static Group getGroup(String groupName, ValueParser pp)\n         throws Exception\n     {\n         return getService().getGroup(groupName, pp);\n@@ -110,15 +110,15 @@ public static Group getGroup(String groupName, ParameterParser pp)\n     /**\n      * Gets an instance of a named group either from the pool\n      * or by calling the Factory Service if the pool is empty and\n-     * then initialize it using the ParameterParser looking for id.\n+     * then initialize it using the ValueParser looking for id.\n      *\n      * @param groupName the name of the group.\n      * @param pp the request parameters that may contain matching keys\n      * @return a Group instance.\n      * @throws ServiceException if recycling fails.\n      * /\n     public static Group getGroup(String groupName,\n-                                 ParameterParser pp, String id)\n+                                 ValueParser pp, String id)\n         throws Exception\n     {\n         return getService().getGroup(groupName, pp, id);", "filename": "src/services/org/apache/fulcrum/intake/TurbineIntake.java"}, {"additions": 2, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/org/apache/fulcrum/intake/model/BigDecimalField.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/org/apache/fulcrum/intake/model/BigDecimalField.java", "sha": "ba96e6552f0ec891295241d81319bd8209bd5847", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/services/org/apache/fulcrum/intake/model/BigDecimalField.java?ref=16ea71868dc4a141b7db0731d23d00f5d5e5b22e", "patch": "@@ -58,7 +58,7 @@\n import java.util.Vector;\n import org.apache.fulcrum.intake.xmlmodel.Rule;\n import org.apache.fulcrum.intake.xmlmodel.XmlField;\n-import org.apache.fulcrum.util.parser.ParameterParser;\n+import org.apache.fulcrum.util.parser.ValueParser;\n \n /**  */\n public class BigDecimalField extends Field\n@@ -82,7 +82,7 @@ protected String getDefaultValidator()\n     /**\n      * converts the parameter to the correct Object.\n      */\n-    protected void doSetValue(ParameterParser pp)\n+    protected void doSetValue(ValueParser pp)\n     {\n         if ( isMultiValued  )\n         {", "filename": "src/services/org/apache/fulcrum/intake/model/BigDecimalField.java"}, {"additions": 2, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/org/apache/fulcrum/intake/model/BooleanField.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/org/apache/fulcrum/intake/model/BooleanField.java", "sha": "1a299a2a04cea923f7afe4b0d982b84bf834584d", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/services/org/apache/fulcrum/intake/model/BooleanField.java?ref=16ea71868dc4a141b7db0731d23d00f5d5e5b22e", "patch": "@@ -56,7 +56,7 @@\n \n import org.apache.fulcrum.intake.xmlmodel.XmlField;\n import org.apache.fulcrum.Log;\n-import org.apache.fulcrum.util.parser.ParameterParser;\n+import org.apache.fulcrum.util.parser.ValueParser;\n \n /**\n  * Base class for Intake generated input processing classes.\n@@ -85,7 +85,7 @@ protected String getDefaultValidator()\n     /**\n      * converts the parameter to the correct Object.\n      */\n-    protected void doSetValue(ParameterParser pp)\n+    protected void doSetValue(ValueParser pp)\n     {\n         setTestValue( pp.getBool(getKey()) );\n     }", "filename": "src/services/org/apache/fulcrum/intake/model/BooleanField.java"}, {"additions": 2, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/org/apache/fulcrum/intake/model/ComboKeyField.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/org/apache/fulcrum/intake/model/ComboKeyField.java", "sha": "68e3b2e3dc934a849b44e360c0f24b21c9b2df38", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/services/org/apache/fulcrum/intake/model/ComboKeyField.java?ref=16ea71868dc4a141b7db0731d23d00f5d5e5b22e", "patch": "@@ -55,7 +55,7 @@\n  */\n \n import java.util.Vector;\n-import org.apache.fulcrum.util.parser.ParameterParser;\n+import org.apache.fulcrum.util.parser.ValueParser;\n import org.apache.torque.om.ComboKey;\n import org.apache.torque.om.ObjectKey;\n import org.apache.fulcrum.intake.xmlmodel.Rule;\n@@ -75,7 +75,7 @@ public ComboKeyField(XmlField field, Group group)\n     /**\n      * converts the parameter to the correct Object.\n      */\n-    protected void doSetValue(ParameterParser pp)\n+    protected void doSetValue(ValueParser pp)\n     {\n         try\n         {", "filename": "src/services/org/apache/fulcrum/intake/model/ComboKeyField.java"}, {"additions": 6, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/org/apache/fulcrum/intake/model/Field.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/org/apache/fulcrum/intake/model/Field.java", "sha": "7125ecd1124969e48cc67a12a1ab8a74dd8c7f31", "changes": 12, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/services/org/apache/fulcrum/intake/model/Field.java?ref=16ea71868dc4a141b7db0731d23d00f5d5e5b22e", "patch": "@@ -57,7 +57,7 @@\n import java.util.Map;\n import java.lang.reflect.Method;\n import org.apache.regexp.RE;\n-import org.apache.fulcrum.util.parser.ParameterParser;\n+import org.apache.fulcrum.util.parser.ValueParser;\n import org.apache.torque.om.Retrievable;\n import org.apache.fulcrum.intake.TurbineIntake;\n import org.apache.fulcrum.intake.xmlmodel.Rule;\n@@ -109,7 +109,7 @@\n     private Object[] valArray; // for reflection\n \n     /** The object containing the request data */\n-    protected ParameterParser pp;\n+    protected ValueParser pp;\n \n     /**\n      * Constructs a field based on data in the xml specification\n@@ -180,11 +180,11 @@ else if ( className != null && className.indexOf('.') == -1 )\n      * if a value has been supplied for this field.  if so, the value\n      * is validated.\n      *\n-     * @param pp a <code>ParameterParser</code> value\n+     * @param pp a <code>ValueParser</code> value\n      * @return a <code>Field</code> value\n      * @exception ServiceException if an error occurs\n      */\n-    public Field init(ParameterParser pp)\n+    public Field init(ValueParser pp)\n         throws ServiceException\n     {\n         this.pp = pp;\n@@ -404,7 +404,7 @@ public void setMessage(String message)\n     /**\n      * Compares request data with constraints and sets the valid flag.\n      */\n-    protected boolean validate(ParameterParser pp)\n+    protected boolean validate(ValueParser pp)\n     //    throws ServiceException\n     {\n         if ( isMultiValued  )\n@@ -476,7 +476,7 @@ else if ( set_flag )\n      * Compares request data with constraints and sets the valid flag.\n      * To be implemented in subclasses\n      */\n-    protected abstract void doSetValue(ParameterParser pp);\n+    protected abstract void doSetValue(ValueParser pp);\n \n \n ", "filename": "src/services/org/apache/fulcrum/intake/model/Field.java"}, {"additions": 16, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/org/apache/fulcrum/intake/model/FileItemField.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/org/apache/fulcrum/intake/model/FileItemField.java", "sha": "09c05ceae1a90e21911de118ec7971391ee8126b", "changes": 20, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/services/org/apache/fulcrum/intake/model/FileItemField.java?ref=16ea71868dc4a141b7db0731d23d00f5d5e5b22e", "patch": "@@ -57,6 +57,7 @@\n import java.util.Vector;\n import org.apache.fulcrum.intake.xmlmodel.Rule;\n import org.apache.fulcrum.intake.xmlmodel.XmlField;\n+import org.apache.fulcrum.util.parser.ValueParser;\n import org.apache.fulcrum.util.parser.ParameterParser;\n import org.apache.fulcrum.intake.validator.Validator;\n import org.apache.fulcrum.intake.validator.FileValidator;\n@@ -96,10 +97,19 @@ protected String getDefaultValidator()\n      * @return a <code>Field</code> value\n      * @exception ServiceException if an error occurs\n      */\n-    public Field init(ParameterParser pp)\n+    public Field init(ValueParser vp)\n         throws ServiceException\n     {\n-        this.pp = pp;\n+        try\n+        {\n+            this.pp = (ParameterParser)vp;\n+        }\n+        catch (ClassCastException e)\n+        {\n+            throw new ServiceException(\n+                \"FileItemFields can only be used with ParameterParser\");\n+        }\n+\n         valid_flag = true;\n \n         if ( pp.containsKey(getKey()) )\n@@ -115,9 +125,10 @@ public Field init(ParameterParser pp)\n     /**\n      * Compares request data with constraints and sets the valid flag.\n      */\n-    protected boolean validate(ParameterParser pp)\n+    protected boolean validate(ValueParser vp)\n     //    throws ServiceException\n     {\n+        ParameterParser pp = (ParameterParser)vp;        \n         if ( isMultiValued  )\n         {\n             FileItem[] ss = pp.getFileItems(getKey());\n@@ -185,8 +196,9 @@ else if ( set_flag )\n     /**\n      * converts the parameter to the correct Object.\n      */\n-    protected void doSetValue(ParameterParser pp)\n+    protected void doSetValue(ValueParser vp)\n     {\n+        ParameterParser pp = (ParameterParser)vp;\n         if ( isMultiValued  )\n         {\n             setTestValue(pp.getFileItems(getKey()));", "filename": "src/services/org/apache/fulcrum/intake/model/FileItemField.java"}, {"additions": 20, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/org/apache/fulcrum/intake/model/Group.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/org/apache/fulcrum/intake/model/Group.java", "sha": "03289904fac3dba2c83c0563fb1adebf54f19dd2", "changes": 37, "status": "modified", "deletions": 17, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/services/org/apache/fulcrum/intake/model/Group.java?ref=16ea71868dc4a141b7db0731d23d00f5d5e5b22e", "patch": "@@ -64,7 +64,7 @@\n import org.apache.fulcrum.intake.TurbineIntake;\n import org.apache.fulcrum.intake.xmlmodel.XmlField;\n import org.apache.fulcrum.intake.xmlmodel.XmlGroup;\n-import org.apache.fulcrum.util.parser.ParameterParser;\n+import org.apache.fulcrum.util.parser.ValueParser;\n import org.apache.fulcrum.ServiceException;\n import org.apache.fulcrum.pool.Recyclable;\n \n@@ -119,7 +119,7 @@\n     /**\n      * The object containing the request data\n      */\n-    protected ParameterParser pp;\n+    protected ValueParser pp;\n \n     /**\n      * A flag to help prevent duplicate hidden fields declaring this group.\n@@ -177,10 +177,10 @@ public Group(XmlGroup group)\n     /**\n      * Initializes the default Group using parameters.\n      *\n-     * @param pp a <code>ParameterParser</code> value\n+     * @param pp a <code>ValueParser</code> value\n      * @return this Group\n      */\n-    public Group init(ParameterParser pp) throws ServiceException\n+    public Group init(ValueParser pp) throws ServiceException\n     {\n         return init(NEW, pp);\n     }\n@@ -192,7 +192,7 @@ public Group init(ParameterParser pp) throws ServiceException\n      * @param data a <code>RunData</code> value\n      * @return this Group\n      */\n-    public Group init(String key, ParameterParser pp)\n+    public Group init(String key, ValueParser pp)\n         throws ServiceException\n     {\n         this.oid = key;\n@@ -306,11 +306,11 @@ public String getObjectKey()\n     /**\n      * Describe <code>getObjects</code> method here.\n      *\n-     * @param pp a <code>ParameterParser</code> value\n+     * @param pp a <code>ValueParser</code> value\n      * @return an <code>ArrayList</code> value\n      * @exception ServiceException if an error occurs\n      */\n-    public ArrayList getObjects(ParameterParser pp)\n+    public ArrayList getObjects(ValueParser pp)\n         throws ServiceException\n     {\n         ArrayList objs = null;\n@@ -413,20 +413,23 @@ public void getProperties(Object obj)\n      */\n     public void removeFromRequest()\n     {\n-        String[] groups = pp.getStrings(gid);\n-        if ( groups != null )\n+        if (pp != null)\n         {\n-            pp.remove(gid);\n-            for (int i=0; i<groups.length; i++)\n+            String[] groups = pp.getStrings(gid);\n+            if ( groups != null )\n             {\n-                if ( groups[i] != null && !groups[i].equals(oid) )\n+                pp.remove(gid);\n+                for (int i=0; i<groups.length; i++)\n                 {\n-                    pp.add(gid,groups[i]);\n+                    if ( groups[i] != null && !groups[i].equals(oid) )\n+                    {\n+                        pp.add(gid,groups[i]);\n+                    }\n+                }\n+                for (int i=fieldsArray.length-1; i>=0; i--)\n+                {\n+                    fieldsArray[i].removeFromRequest();\n                 }\n-            }\n-            for (int i=fieldsArray.length-1; i>=0; i--)\n-            {\n-                fieldsArray[i].removeFromRequest();\n             }\n         }\n     }", "filename": "src/services/org/apache/fulcrum/intake/model/Group.java"}, {"additions": 2, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/org/apache/fulcrum/intake/model/IntegerField.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/org/apache/fulcrum/intake/model/IntegerField.java", "sha": "15571566081294a6de1e5cb71cba0f34eb31a492", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/services/org/apache/fulcrum/intake/model/IntegerField.java?ref=16ea71868dc4a141b7db0731d23d00f5d5e5b22e", "patch": "@@ -57,7 +57,7 @@\n import java.util.Vector;\n import org.apache.fulcrum.intake.xmlmodel.Rule;\n import org.apache.fulcrum.intake.xmlmodel.XmlField;\n-import org.apache.fulcrum.util.parser.ParameterParser;\n+import org.apache.fulcrum.util.parser.ValueParser;\n \n /**  */\n public class IntegerField extends Field\n@@ -82,7 +82,7 @@ protected String getDefaultValidator()\n     /**\n      * converts the parameter to the correct Object.\n      */\n-    protected void doSetValue(ParameterParser pp)\n+    protected void doSetValue(ValueParser pp)\n     {\n         if ( isMultiValued  )\n         {", "filename": "src/services/org/apache/fulcrum/intake/model/IntegerField.java"}, {"additions": 2, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/org/apache/fulcrum/intake/model/NumberKeyField.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/org/apache/fulcrum/intake/model/NumberKeyField.java", "sha": "df9da25b0e8aba6aacaac9f64c226586e586fa3f", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/services/org/apache/fulcrum/intake/model/NumberKeyField.java?ref=16ea71868dc4a141b7db0731d23d00f5d5e5b22e", "patch": "@@ -59,7 +59,7 @@\n import org.apache.torque.om.ObjectKey;\n import org.apache.fulcrum.intake.xmlmodel.Rule;\n import org.apache.fulcrum.intake.xmlmodel.XmlField;\n-import org.apache.fulcrum.util.parser.ParameterParser;\n+import org.apache.fulcrum.util.parser.ValueParser;\n \n /**  */\n public class NumberKeyField extends Field\n@@ -86,7 +86,7 @@ protected String getDefaultValidator()\n     /**\n      * converts the parameter to the correct Object.\n      */\n-    protected void doSetValue(ParameterParser pp)\n+    protected void doSetValue(ValueParser pp)\n     {\n         if ( isMultiValued  )\n         {", "filename": "src/services/org/apache/fulcrum/intake/model/NumberKeyField.java"}, {"additions": 2, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/org/apache/fulcrum/intake/model/StringField.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/services/org/apache/fulcrum/intake/model/StringField.java", "sha": "48dd4448516a7946bbed34797ad7f18747012d7b", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/services/org/apache/fulcrum/intake/model/StringField.java?ref=16ea71868dc4a141b7db0731d23d00f5d5e5b22e", "patch": "@@ -54,7 +54,7 @@\n  * <http://www.apache.org/>.\n  */\n \n-import org.apache.fulcrum.util.parser.ParameterParser;\n+import org.apache.fulcrum.util.parser.ValueParser;\n import org.apache.fulcrum.intake.xmlmodel.XmlField;\n \n /**\n@@ -74,7 +74,7 @@ public StringField(XmlField field, Group group)\n     /**\n      * converts the parameter to the correct Object.\n      */\n-    protected void doSetValue(ParameterParser pp)\n+    protected void doSetValue(ValueParser pp)\n     {\n         if ( isMultiValued )\n         {", "filename": "src/services/org/apache/fulcrum/intake/model/StringField.java"}, {"additions": 3, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/util/java/org/apache/fulcrum/util/parser/DefaultParameterParser.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/util/java/org/apache/fulcrum/util/parser/DefaultParameterParser.java", "sha": "db11776ffa3ce3b6b2289d4210e9f647dbcf22e4", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/util/java/org/apache/fulcrum/util/parser/DefaultParameterParser.java?ref=16ea71868dc4a141b7db0731d23d00f5d5e5b22e", "patch": "@@ -221,6 +221,9 @@ public void setRequest(HttpServletRequest req)\n         // if they are query string data.\n         try\n         {\n+            // the lines below can be substituted with the method\n+            // parse(req.getPathInfo(), '/', true);\n+            // if DefaultParameterParser extended StringParser\n             StringTokenizer st = new StringTokenizer(req.getPathInfo(), \"/\");\n             boolean isNameTok = true;\n             String pathPart = null;", "filename": "src/util/java/org/apache/fulcrum/util/parser/DefaultParameterParser.java"}, {"additions": 3, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/util/org/apache/fulcrum/util/parser/DefaultParameterParser.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/16ea71868dc4a141b7db0731d23d00f5d5e5b22e/src/util/org/apache/fulcrum/util/parser/DefaultParameterParser.java", "sha": "db11776ffa3ce3b6b2289d4210e9f647dbcf22e4", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/src/util/org/apache/fulcrum/util/parser/DefaultParameterParser.java?ref=16ea71868dc4a141b7db0731d23d00f5d5e5b22e", "patch": "@@ -221,6 +221,9 @@ public void setRequest(HttpServletRequest req)\n         // if they are query string data.\n         try\n         {\n+            // the lines below can be substituted with the method\n+            // parse(req.getPathInfo(), '/', true);\n+            // if DefaultParameterParser extended StringParser\n             StringTokenizer st = new StringTokenizer(req.getPathInfo(), \"/\");\n             boolean isNameTok = true;\n             String pathPart = null;", "filename": "src/util/org/apache/fulcrum/util/parser/DefaultParameterParser.java"}], "repo": "turbine-fulcrum"}, {"commit": "https://github.com/apache/turbine-fulcrum/commit/9abd3e102de8180265f42c41a820dd3fe7c36190", "parent": "https://github.com/apache/turbine-fulcrum/commit/9f5063d9e060d7b5631af0cf953d44cf7ba8ffa4", "message": "Porting changes from Turbine: \r\n\r\n  Make use of the emptyValue attribute on the field element when no value has been set.  This makes it possible to clear values in an existing object that is being overwritten with Intake data using group.setProperties(obj).\r\n\r\n  Ensure an NPE does not occur when emptyValue is used to set an object's primitive properties.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/turbine/fulcrum/trunk@222844 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "turbine-fulcrum_9", "file": [{"additions": 16, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/9abd3e102de8180265f42c41a820dd3fe7c36190/intake/src/java/org/apache/fulcrum/intake/model/BooleanField.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/9abd3e102de8180265f42c41a820dd3fe7c36190/intake/src/java/org/apache/fulcrum/intake/model/BooleanField.java", "sha": "b5295cd506739d4438753310c23d90d55460e820", "changes": 16, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/intake/src/java/org/apache/fulcrum/intake/model/BooleanField.java?ref=9abd3e102de8180265f42c41a820dd3fe7c36190", "patch": "@@ -67,6 +67,7 @@\n  * @author <a href=\"mailto:jmcnally@collab.net\">John McNally</a>\n  * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @author <a href=\"mailto:quintonm@bellsouth.net\">Quinton McCombs</a>\n+ * @author <a href=\"mailto:seade@backstagetech.com.au\">Scott Eade</a>\n  * @version $Id$\n  */\n public class BooleanField\n@@ -115,6 +116,21 @@ public void setEmptyValue(String prop)\n         emptyValue = new Boolean(prop);\n     }\n \n+    /**\n+     * Provides access to emptyValue such that the value returned will be \n+     * acceptable as an argument parameter to Method.invoke.  Subclasses\n+     * that deal with primitive types should ensure that they return an \n+     * appropriate value wrapped in the object wrapper class for the \n+     * primitive type.\n+     *   \n+     * @return the value to use when the field is empty or an Object that\n+     * wraps the empty value for primitive types.\n+     */\n+    protected Object getSafeEmptyValue()\n+    {\n+        return (null == getEmptyValue()) ? Boolean.FALSE : getEmptyValue(); \n+    }\n+\n     /**\n      * A suitable validator.\n      *", "filename": "intake/src/java/org/apache/fulcrum/intake/model/BooleanField.java"}, {"additions": 16, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/9abd3e102de8180265f42c41a820dd3fe7c36190/intake/src/java/org/apache/fulcrum/intake/model/DoubleField.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/9abd3e102de8180265f42c41a820dd3fe7c36190/intake/src/java/org/apache/fulcrum/intake/model/DoubleField.java", "sha": "8d7a36e922cb4a741105d4d6973074215f9413a3", "changes": 16, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/intake/src/java/org/apache/fulcrum/intake/model/DoubleField.java?ref=9abd3e102de8180265f42c41a820dd3fe7c36190", "patch": "@@ -64,6 +64,7 @@\n  * Creates Double Field objects.\n  *\n  * @author <a href=\"mailto:quintonm@bellsouth.net\">Quinton McCombs</a>\n+ * @author <a href=\"mailto:seade@backstagetech.com.au\">Scott Eade</a>\n  * @version $Id$\n  */\n public class DoubleField\n@@ -119,6 +120,21 @@ public void setEmptyValue(String prop)\n         emptyValue = new Double(prop);\n     }\n \n+    /**\n+     * Provides access to emptyValue such that the value returned will be \n+     * acceptable as an argument parameter to Method.invoke.  Subclasses\n+     * that deal with primitive types should ensure that they return an \n+     * appropriate value wrapped in the object wrapper class for the \n+     * primitive type.\n+     *   \n+     * @return the value to use when the field is empty or an Object that\n+     * wraps the empty value for primitive types.\n+     */\n+    protected Object getSafeEmptyValue()\n+    {\n+        return (null == getEmptyValue()) ? new Double(0.0) : getEmptyValue(); \n+    }\n+\n     /**\n      * A suitable validator.\n      *", "filename": "intake/src/java/org/apache/fulcrum/intake/model/DoubleField.java"}, {"additions": 37, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/9abd3e102de8180265f42c41a820dd3fe7c36190/intake/src/java/org/apache/fulcrum/intake/model/Field.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/9abd3e102de8180265f42c41a820dd3fe7c36190/intake/src/java/org/apache/fulcrum/intake/model/Field.java", "sha": "102db4d118f2c8fea583e52b8574d009a9ab5ec6", "changes": 60, "status": "modified", "deletions": 23, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/intake/src/java/org/apache/fulcrum/intake/model/Field.java?ref=9abd3e102de8180265f42c41a820dd3fe7c36190", "patch": "@@ -625,7 +625,6 @@ protected boolean validate()\n                 }\n             }\n \n-\n             if (validator != null)\n             {\n                 // set the test value as a String[] which might be replaced by\n@@ -889,39 +888,39 @@ public void setProperty(Object obj) throws IntakeException\n         if (isSet())\n         {\n             valArray[0] = getTestValue();\n-\n             if (isDebugEnabled)\n             {\n                 log.debug(name + \": Property is set, value is \" + valArray[0]);\n             }\n-\n-            try\n-            {\n-                setter.invoke(obj, valArray);\n-            }\n-            catch (IllegalAccessException e)\n-            {\n-                throwSetGetException(\"setter\", obj, this.getDisplayName(),\n-                        this.group.getIntakeGroupName(), e);\n-            }\n-            catch (IllegalArgumentException e)\n-            {\n-                throwSetGetException(\"setter\", obj, this.getDisplayName(),\n-                        this.group.getIntakeGroupName(), e);\n-            }\n-            catch (InvocationTargetException e)\n-            {\n-                throwSetGetException(\"setter\", obj, this.getDisplayName(),\n-                        this.group.getIntakeGroupName(), e);\n-            }\n         }\n         else\n         {\n+            valArray[0] = getSafeEmptyValue();\n             if (isDebugEnabled)\n             {\n-                log.debug(name+ \": Property is not set, skipping\");\n+                log.debug(name + \": Property is not set, using emptyValue \" + valArray[0]);\n             }\n         }\n+\n+        try\n+        {\n+            setter.invoke(obj, valArray);\n+        }\n+        catch (IllegalAccessException e)\n+        {\n+            throwSetGetException(\"setter\", obj, this.getDisplayName(),\n+                    this.group.getIntakeGroupName(), e);\n+        }\n+        catch (IllegalArgumentException e)\n+        {\n+            throwSetGetException(\"setter\", obj, this.getDisplayName(),\n+                    this.group.getIntakeGroupName(), e);\n+        }\n+        catch (InvocationTargetException e)\n+        {\n+            throwSetGetException(\"setter\", obj, this.getDisplayName(),\n+                    this.group.getIntakeGroupName(), e);\n+        }\n     }\n \n     /**\n@@ -965,6 +964,21 @@ public Object getEmptyValue()\n         return emptyValue;\n     }\n \n+    /**\n+     * Provides access to emptyValue such that the value returned will be \n+     * acceptable as an argument parameter to Method.invoke.  Subclasses\n+     * that deal with primitive types should ensure that they return an \n+     * appropriate value wrapped in the object wrapper class for the \n+     * primitive type.\n+     *   \n+     * @return the value to use when the field is empty or an Object that\n+     * wraps the empty value for primitive types.\n+     */\n+    protected Object getSafeEmptyValue()\n+    {\n+        return getEmptyValue();\n+    }\n+\n     /**\n      * Gets the name of the field.\n      *", "filename": "intake/src/java/org/apache/fulcrum/intake/model/Field.java"}, {"additions": 16, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/9abd3e102de8180265f42c41a820dd3fe7c36190/intake/src/java/org/apache/fulcrum/intake/model/FloatField.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/9abd3e102de8180265f42c41a820dd3fe7c36190/intake/src/java/org/apache/fulcrum/intake/model/FloatField.java", "sha": "f4cc07d179c452ffb88c068668e8fb9c4dcf95f3", "changes": 16, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/intake/src/java/org/apache/fulcrum/intake/model/FloatField.java?ref=9abd3e102de8180265f42c41a820dd3fe7c36190", "patch": "@@ -67,6 +67,7 @@\n  * @author <a href=\"mailto:jmcnally@collab.net>John McNally</a>\n  * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @author <a href=\"mailto:quintonm@bellsouth.net\">Quinton McCombs</a>\n+ * @author <a href=\"mailto:seade@backstagetech.com.au\">Scott Eade</a>\n  * @version $Id$\n  */\n public class FloatField\n@@ -123,6 +124,21 @@ public void setEmptyValue(String prop)\n         emptyValue = new Double(prop);\n     }\n \n+    /**\n+     * Provides access to emptyValue such that the value returned will be \n+     * acceptable as an argument parameter to Method.invoke.  Subclasses\n+     * that deal with primitive types should ensure that they return an \n+     * appropriate value wrapped in the object wrapper class for the \n+     * primitive type.\n+     *   \n+     * @return the value to use when the field is empty or an Object that\n+     * wraps the empty value for primitive types.\n+     */\n+    protected Object getSafeEmptyValue()\n+    {\n+        return (null == getEmptyValue()) ? new Float(0.0) : getEmptyValue(); \n+    }\n+\n     /**\n      * A suitable validator.\n      *", "filename": "intake/src/java/org/apache/fulcrum/intake/model/FloatField.java"}, {"additions": 16, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/9abd3e102de8180265f42c41a820dd3fe7c36190/intake/src/java/org/apache/fulcrum/intake/model/IntegerField.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/9abd3e102de8180265f42c41a820dd3fe7c36190/intake/src/java/org/apache/fulcrum/intake/model/IntegerField.java", "sha": "a9543e70d23f7db7447af8b7a57c3429cf4db7d1", "changes": 16, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/intake/src/java/org/apache/fulcrum/intake/model/IntegerField.java?ref=9abd3e102de8180265f42c41a820dd3fe7c36190", "patch": "@@ -64,6 +64,7 @@\n  * @author <a href=\"mailto:jmcnally@collab.net\">John McNally</a>\n  * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @author <a href=\"mailto:quintonm@bellsouth.net\">Quinton McCombs</a>\n+ * @author <a href=\"mailto:seade@backstagetech.com.au\">Scott Eade</a>\n  * @version $Id$\n  */\n public class IntegerField\n@@ -120,6 +121,21 @@ public void setEmptyValue(String prop)\n         emptyValue = new Integer(prop);\n     }\n \n+    /**\n+     * Provides access to emptyValue such that the value returned will be \n+     * acceptable as an argument parameter to Method.invoke.  Subclasses\n+     * that deal with primitive types should ensure that they return an \n+     * appropriate value wrapped in the object wrapper class for the \n+     * primitive type.\n+     *   \n+     * @return the value to use when the field is empty or an Object that\n+     * wraps the empty value for primitive types.\n+     */\n+    protected Object getSafeEmptyValue()\n+    {\n+        return (null == getEmptyValue()) ? new Integer(0) : getEmptyValue(); \n+    }\n+\n     /**\n      * A suitable validator.\n      *", "filename": "intake/src/java/org/apache/fulcrum/intake/model/IntegerField.java"}, {"additions": 16, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/9abd3e102de8180265f42c41a820dd3fe7c36190/intake/src/java/org/apache/fulcrum/intake/model/LongField.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/9abd3e102de8180265f42c41a820dd3fe7c36190/intake/src/java/org/apache/fulcrum/intake/model/LongField.java", "sha": "445bbc1bcdfc5c2578788ea98f8ad294daf15a2d", "changes": 16, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/intake/src/java/org/apache/fulcrum/intake/model/LongField.java?ref=9abd3e102de8180265f42c41a820dd3fe7c36190", "patch": "@@ -65,6 +65,7 @@\n  *\n  * @author <a href=\"mailto:jmcnally@collab.net>John McNally</a>\n  * @author <a href=\"mailto:Colin.Chalmers@maxware.nl\">Colin Chalmers</a>\n+ * @author <a href=\"mailto:seade@backstagetech.com.au\">Scott Eade</a>\n  * @version $Id$\n  */\n public class LongField\n@@ -121,6 +122,21 @@ public void setEmptyValue(String prop)\n         emptyValue = new Long(prop);\n     }\n \n+    /**\n+     * Provides access to emptyValue such that the value returned will be \n+     * acceptable as an argument parameter to Method.invoke.  Subclasses\n+     * that deal with primitive types should ensure that they return an \n+     * appropriate value wrapped in the object wrapper class for the \n+     * primitive type.\n+     *   \n+     * @return the value to use when the field is empty or an Object that\n+     * wraps the empty value for primitive types.\n+     */\n+    protected Object getSafeEmptyValue()\n+    {\n+        return (null == getEmptyValue()) ? new Long(0l) : getEmptyValue(); \n+    }\n+\n     /**\n      * A suitable validator.\n      *", "filename": "intake/src/java/org/apache/fulcrum/intake/model/LongField.java"}, {"additions": 17, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/9abd3e102de8180265f42c41a820dd3fe7c36190/intake/src/java/org/apache/fulcrum/intake/model/ShortField.java", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/9abd3e102de8180265f42c41a820dd3fe7c36190/intake/src/java/org/apache/fulcrum/intake/model/ShortField.java", "sha": "30b6b2d4627b1d36c3d99ce79c54c5a8868fb968", "changes": 17, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/intake/src/java/org/apache/fulcrum/intake/model/ShortField.java?ref=9abd3e102de8180265f42c41a820dd3fe7c36190", "patch": "@@ -65,6 +65,7 @@\n  *\n  * @author <a href=\"mailto:jmcnally@collab.net>John McNally</a>\n  * @author <a href=\"mailto:Colin.Chalmers@maxware.nl\">Colin Chalmers</a>\n+ * @author <a href=\"mailto:seade@backstagetech.com.au\">Scott Eade</a>\n  * @version $Id$\n  */\n public class ShortField\n@@ -121,6 +122,22 @@ public void setEmptyValue(String prop)\n         emptyValue = new Short(prop);\n     }\n \n+    /**\n+     * Provides access to emptyValue such that the value returned will be \n+     * acceptable as an argument parameter to Method.invoke.  Subclasses\n+     * that deal with primitive types should ensure that they return an \n+     * appropriate value wrapped in the object wrapper class for the \n+     * primitive type.\n+     *   \n+     * @return the value to use when the field is empty or an Object that\n+     * wraps the empty value for primitive types.\n+     */\n+    protected Object getSafeEmptyValue()\n+    {\n+        return (null == getEmptyValue()) \n+                ? new Short((short) 0) : getEmptyValue(); \n+    }\n+\n     /**\n      * A suitable validator.\n      *", "filename": "intake/src/java/org/apache/fulcrum/intake/model/ShortField.java"}, {"additions": 11, "raw_url": "https://github.com/apache/turbine-fulcrum/raw/9abd3e102de8180265f42c41a820dd3fe7c36190/intake/xdocs/changes.xml", "blob_url": "https://github.com/apache/turbine-fulcrum/blob/9abd3e102de8180265f42c41a820dd3fe7c36190/intake/xdocs/changes.xml", "sha": "e19374fcdb1e2d8497e081a54fd6c65898f9cc83", "changes": 11, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/turbine-fulcrum/contents/intake/xdocs/changes.xml?ref=9abd3e102de8180265f42c41a820dd3fe7c36190", "patch": "@@ -31,6 +31,17 @@\n        <em>$group.foo.StringValue</em> rather than <em>$group.foo.Value</em> \n        (you can do this for all values, not just DateString).\n       </action>\n+      <action>\n+       Intake now makes use of the the emptyValue attribute from the field \n+       elements when mapping from the group to the object when no value has \n+       been set.  This makes it possible to clear values in an existing object\n+       that is being overwritten with Intake data using \n+       <em>group.setProperties(obj)</em> (or you can provide non-null values\n+       in your intake.xml file).  Make sure you do not inadvertently include \n+       the primary key for the object in the intake group without actually \n+       setting it to the appropriate value (it shouldn't be in the group \n+       anyway).\n+      </action>\n      \n     </release>\n ", "filename": "intake/xdocs/changes.xml"}], "repo": "turbine-fulcrum"}]
