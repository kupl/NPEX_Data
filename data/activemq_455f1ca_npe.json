[
    {
        "repo": "activemq",
        "commit": "https://github.com/apache/activemq/commit/455f1ca475be252b6ffdd07176bf659b81685ea7",
        "bug_id": "activemq_455f1ca",
        "message": "https://issues.apache.org/jira/browse/AMQ-5872\n\nThe code that adds subscriptions for retroactive subscribers did not\naccount for the case where the last ack position in the ackLocations\ntable is used as a placeholder for the next incoming message and there\nmay not be an element in the messageReference tracker for that index\nespecially after restart when the index is reloaded.  The code needed to\ncheck this when it iterates of the existing message references to add a\nvalue so to avoid the NPE.  \n\nAlso cleaned up the MQTT tests such that they place their data dir in\n./target so that old stores get removed on 'mvn clean'",
        "parent": "https://github.com/apache/activemq/commit/8e7556f397035a813bb8cc6292614d0cdf1d5f5f",
        "patched_files": [
            "MessageDatabase.java",
            "MQTTTestSupport.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 14,
                "raw_url": "https://github.com/apache/activemq/raw/455f1ca475be252b6ffdd07176bf659b81685ea7/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java?ref=455f1ca475be252b6ffdd07176bf659b81685ea7",
                "filename": "activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "deletions": 11,
                "sha": "ef8fe0a39657d0dbe7ec61c06c5fa7a27a013b13",
                "blob_url": "https://github.com/apache/activemq/blob/455f1ca475be252b6ffdd07176bf659b81685ea7/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "patch": "@@ -248,7 +248,6 @@ public void writePayload(Metadata object, DataOutput dataOut) throws IOException\n     private boolean checksumJournalFiles = true;\n     protected boolean forceRecoverIndex = false;\n     private final Object checkpointThreadLock = new Object();\n-    private boolean rewriteOnRedelivery = false;\n     private boolean archiveCorruptedIndex = false;\n     private boolean useIndexLFRUEviction = false;\n     private float indexLFUEvictionFactor = 0.2f;\n@@ -1161,7 +1160,6 @@ public void execute(Transaction tx) throws IOException {\n         }\n     }\n \n-    @SuppressWarnings(\"rawtypes\")\n     protected void process(final KahaUpdateMessageCommand command, final Location location) throws IOException {\n         this.indexLock.writeLock().lock();\n         try {\n@@ -2153,7 +2151,7 @@ private StoredDestination loadStoredDestination(Transaction tx, String key, bool\n                 SequenceSet pendingAcks = subscription.getValue();\n                 if (pendingAcks != null && !pendingAcks.isEmpty()) {\n                     Long lastPendingAck = pendingAcks.getTail().getLast();\n-                    for(Long sequenceId : pendingAcks) {\n+                    for (Long sequenceId : pendingAcks) {\n                         Long current = rc.messageReferences.get(sequenceId);\n                         if (current == null) {\n                             current = new Long(0);\n@@ -2163,6 +2161,8 @@ private StoredDestination loadStoredDestination(Transaction tx, String key, bool\n                         // so we need to ensure we don't count that as a message reference on reload.\n                         if (!sequenceId.equals(lastPendingAck)) {\n                             current = current.longValue() + 1;\n+                        } else {\n+                            current = Long.valueOf(0L);\n                         }\n \n                         rc.messageReferences.put(sequenceId, current);\n@@ -2235,8 +2235,14 @@ private void addAckLocationForRetroactiveSub(Transaction tx, StoredDestination s\n \n         for (Long ackPosition : allOutstanding) {\n             Long count = sd.messageReferences.get(ackPosition);\n-            count = count.longValue() + 1;\n-            sd.messageReferences.put(ackPosition, count);\n+\n+            // There might not be a reference if the ackLocation was the last\n+            // one which is a placeholder for the next incoming message and\n+            // no value was added to the message references table.\n+            if (count != null) {\n+                count = count.longValue() + 1;\n+                sd.messageReferences.put(ackPosition, count);\n+            }\n         }\n     }\n \n@@ -2259,7 +2265,7 @@ private void addAckLocationForNewMessage(Transaction tx, StoredDestination sd, L\n             }\n             count = count.longValue() + 1;\n             sd.messageReferences.put(messageSequence, count);\n-            sd.messageReferences.put(messageSequence+1, Long.valueOf(0L));\n+            sd.messageReferences.put(messageSequence + 1, Long.valueOf(0L));\n         }\n     }\n \n@@ -2322,8 +2328,8 @@ private void removeAckLocation(Transaction tx, StoredDestination sd, String subs\n \n                 // Check if the message is reference by any other subscription.\n                 Long count = sd.messageReferences.get(messageSequence);\n-                if (count != null){\n-                long references = count.longValue() - 1;\n+                if (count != null) {\n+                    long references = count.longValue() - 1;\n                     if (references > 0) {\n                         sd.messageReferences.put(messageSequence, Long.valueOf(references));\n                         return;\n@@ -3050,7 +3056,6 @@ public Long minPendingAdd() {\n             }\n         }\n \n-\n         class MessageOrderIterator implements Iterator<Entry<Long, MessageKeys>>{\n             Iterator<Entry<Long, MessageKeys>>currentIterator;\n             final Iterator<Entry<Long, MessageKeys>>highIterator;\n@@ -3145,7 +3150,6 @@ public boolean hasNext() {\n             public void remove() {\n                 throw new UnsupportedOperationException();\n             }\n-\n         }\n     }\n \n@@ -3209,5 +3213,4 @@ public String getPreallocationStrategy() {\n     public void setPreallocationStrategy(String preallocationStrategy) {\n         this.preallocationStrategy = preallocationStrategy;\n     }\n-\n }",
                "changes": 25
            },
            {
                "status": "modified",
                "additions": 2,
                "raw_url": "https://github.com/apache/activemq/raw/455f1ca475be252b6ffdd07176bf659b81685ea7/activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTMaxFrameSizeTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTMaxFrameSizeTest.java?ref=455f1ca475be252b6ffdd07176bf659b81685ea7",
                "filename": "activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTMaxFrameSizeTest.java",
                "deletions": 2,
                "sha": "e5282b31ad595ca1a9f58c1fae4515e1f208585a",
                "blob_url": "https://github.com/apache/activemq/blob/455f1ca475be252b6ffdd07176bf659b81685ea7/activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTMaxFrameSizeTest.java",
                "patch": "@@ -68,7 +68,7 @@ public void testFrameSizeToLargeClosesConnection() throws Exception {\n         LOG.debug(\"Starting test on connector {} for frame size: {}\", getProtocolScheme(), maxFrameSize);\n \n         MQTT mqtt = createMQTTConnection();\n-        mqtt.setClientId(getName());\n+        mqtt.setClientId(getTestName());\n         mqtt.setKeepAlive((short) 10);\n         mqtt.setVersion(\"3.1.1\");\n \n@@ -97,7 +97,7 @@ public void testFrameSizeNotExceededWorks() throws Exception {\n         LOG.debug(\"Starting test on connector {} for frame size: {}\", getProtocolScheme(), maxFrameSize);\n \n         MQTT mqtt = createMQTTConnection();\n-        mqtt.setClientId(getName());\n+        mqtt.setClientId(getTestName());\n         mqtt.setKeepAlive((short) 10);\n         mqtt.setVersion(\"3.1.1\");\n ",
                "changes": 4
            },
            {
                "status": "added",
                "additions": 117,
                "raw_url": "https://github.com/apache/activemq/raw/455f1ca475be252b6ffdd07176bf659b81685ea7/activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTOverlapedSubscriptionsTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTOverlapedSubscriptionsTest.java?ref=455f1ca475be252b6ffdd07176bf659b81685ea7",
                "filename": "activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTOverlapedSubscriptionsTest.java",
                "deletions": 0,
                "sha": "33fb61b44b55159c9c606d0d0a68b012811654b4",
                "blob_url": "https://github.com/apache/activemq/blob/455f1ca475be252b6ffdd07176bf659b81685ea7/activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTOverlapedSubscriptionsTest.java",
                "patch": "@@ -0,0 +1,117 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.transport.mqtt;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.activemq.broker.BrokerService;\n+import org.apache.activemq.broker.TransportConnector;\n+import org.fusesource.mqtt.client.BlockingConnection;\n+import org.fusesource.mqtt.client.MQTT;\n+import org.fusesource.mqtt.client.QoS;\n+import org.fusesource.mqtt.client.Topic;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class MQTTOverlapedSubscriptionsTest {\n+\n+    private BrokerService brokerService;\n+    private String mqttClientUrl;\n+\n+    @Before\n+    public void setup() throws Exception {\n+        initializeBroker(true);\n+    }\n+\n+    @After\n+    public void shutdown() throws Exception {\n+        brokerService.stop();\n+        brokerService.waitUntilStopped();\n+    }\n+\n+    protected void initializeBroker(boolean deleteAllMessagesOnStart) throws Exception {\n+\n+        brokerService = new BrokerService();\n+        brokerService.setPersistent(true);\n+        brokerService.setDeleteAllMessagesOnStartup(deleteAllMessagesOnStart);\n+        TransportConnector connector = new TransportConnector();\n+        connector.setUri(new URI(\"mqtt://localhost:0\"));\n+        connector.setName(\"mqtt\");\n+        brokerService.addConnector(connector);\n+        brokerService.start();\n+        brokerService.waitUntilStarted();\n+\n+        mqttClientUrl = connector.getPublishableConnectString().replace(\"mqtt\", \"tcp\");\n+    }\n+\n+    @Test\n+    public void testMqttResubscribe() throws Exception {\n+        // inactive durable consumer on test/1 will be left on the broker after restart\n+        doTest(\"test/1\");\n+\n+        shutdown();\n+        initializeBroker(false);\n+\n+        // new consumer on test/# will match all messages sent to the inactive sub\n+        doTest(\"test/#\");\n+    }\n+\n+    private BlockingConnection getConnection(String host, String clientId) throws URISyntaxException, Exception {\n+        BlockingConnection conn;\n+        MQTT mqttPub = new MQTT();\n+        mqttPub.setHost(host);\n+        mqttPub.setConnectAttemptsMax(0);\n+        mqttPub.setReconnectAttemptsMax(0);\n+        mqttPub.setClientId(clientId);\n+        mqttPub.setCleanSession(false);\n+        conn = mqttPub.blockingConnection();\n+        conn.connect();\n+        return conn;\n+    }\n+\n+    public void doTest(String subscribe) throws Exception {\n+        String payload = \"This is test payload\";\n+        BlockingConnection connectionPub = getConnection(mqttClientUrl, \"client1\");\n+        BlockingConnection connectionSub = getConnection(mqttClientUrl, \"client2\");\n+        Topic[] topics = { new Topic(subscribe, QoS.values()[1]) };\n+        connectionSub.subscribe(topics);\n+        connectionPub.publish(\"test/1\", payload.getBytes(), QoS.AT_LEAST_ONCE, false);\n+        receive(connectionSub, 3000);\n+\n+        //Unsubscribe and resubscribe\n+        connectionSub.unsubscribe(new String[]{subscribe});\n+        connectionSub.subscribe(topics);\n+        connectionPub.publish(subscribe, payload.getBytes(), QoS.AT_LEAST_ONCE, false);\n+        receive(connectionSub, 3000);\n+\n+        connectionPub.disconnect();\n+        connectionSub.disconnect();\n+    }\n+\n+    public byte[] receive(BlockingConnection connection, int timeout) throws Exception {\n+        byte[] result = null;\n+        org.fusesource.mqtt.client.Message message = connection.receive(timeout, TimeUnit.MILLISECONDS);\n+        if (message != null) {\n+            result = message.getPayload();\n+            message.ack();\n+        }\n+        return result;\n+    }\n+}",
                "changes": 117
            },
            {
                "status": "modified",
                "additions": 2,
                "raw_url": "https://github.com/apache/activemq/raw/455f1ca475be252b6ffdd07176bf659b81685ea7/activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTSubscriptionRecoveryTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTSubscriptionRecoveryTest.java?ref=455f1ca475be252b6ffdd07176bf659b81685ea7",
                "filename": "activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTSubscriptionRecoveryTest.java",
                "deletions": 2,
                "sha": "0b7f958179786c25e649736af860b97c98b9a140",
                "blob_url": "https://github.com/apache/activemq/blob/455f1ca475be252b6ffdd07176bf659b81685ea7/activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTSubscriptionRecoveryTest.java",
                "patch": "@@ -72,7 +72,7 @@ public String getProtocolConfig() {\n     @Test\n     public void testDurableSubscriptionsAreRecovered() throws Exception {\n \n-        MqttClient connection = createClient(getName());\n+        MqttClient connection = createClient(getTestName());\n \n         final String[] topics = { \"TopicA/\", \"TopicB/\", \"TopicC/\" };\n         for (int i = 0; i < topics.length; i++) {\n@@ -90,7 +90,7 @@ public void testDurableSubscriptionsAreRecovered() throws Exception {\n \n         assertStatsForDisconnectedClient(topics.length);\n \n-        connection = createClient(getName());\n+        connection = createClient(getTestName());\n \n         assertStatsForConnectedClient(topics.length);\n     }",
                "changes": 4
            },
            {
                "status": "modified",
                "additions": 9,
                "raw_url": "https://github.com/apache/activemq/raw/455f1ca475be252b6ffdd07176bf659b81685ea7/activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTestSupport.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTestSupport.java?ref=455f1ca475be252b6ffdd07176bf659b81685ea7",
                "filename": "activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTestSupport.java",
                "deletions": 1,
                "sha": "0b5868763761d714a57e141e203399431b9d8d2f",
                "blob_url": "https://github.com/apache/activemq/blob/455f1ca475be252b6ffdd07176bf659b81685ea7/activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTestSupport.java",
                "patch": "@@ -44,6 +44,7 @@\n import org.apache.activemq.broker.jmx.BrokerViewMBean;\n import org.apache.activemq.broker.jmx.QueueViewMBean;\n import org.apache.activemq.broker.jmx.TopicViewMBean;\n+import org.apache.activemq.store.kahadb.KahaDBStore;\n import org.apache.activemq.transport.mqtt.util.ResourceLoadingSslContext;\n import org.fusesource.mqtt.client.MQTT;\n import org.fusesource.mqtt.client.Tracer;\n@@ -59,6 +60,8 @@\n \n     private static final Logger LOG = LoggerFactory.getLogger(MQTTTestSupport.class);\n \n+    public static final String KAHADB_DIRECTORY = \"target/activemq-data/\";\n+\n     protected BrokerService brokerService;\n     protected int port;\n     protected String jmsUri = \"vm://localhost\";\n@@ -90,7 +93,7 @@ public MQTTTestSupport(String connectorScheme, boolean useSSL) {\n         this.useSSL = useSSL;\n     }\n \n-    public String getName() {\n+    public String getTestName() {\n         return name.getMethodName();\n     }\n \n@@ -144,6 +147,11 @@ protected BrokerService createBroker(boolean deleteAllMessages) throws Exception\n         BrokerService brokerService = new BrokerService();\n         brokerService.setDeleteAllMessagesOnStartup(deleteAllMessages);\n         brokerService.setPersistent(isPersistent());\n+        if (isPersistent()) {\n+            KahaDBStore kaha = new KahaDBStore();\n+            kaha.setDirectory(new File(KAHADB_DIRECTORY + getTestName()));\n+            brokerService.setPersistenceAdapter(kaha);\n+        }\n         brokerService.setAdvisorySupport(false);\n         brokerService.setUseJmx(true);\n         brokerService.getManagementContext().setCreateConnector(false);",
                "changes": 10
            }
        ],
        "unit_tests": [
            "MQTTOverlapedSubscriptionsTest.java",
            "MQTTMaxFrameSizeTest.java",
            "MQTTSubscriptionRecoveryTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTOverlapedSubscriptionsTest.java",
        "buggy_files": [
            "activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
            "activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTestSupport.java"
        ],
        "fixed": true
    }
]