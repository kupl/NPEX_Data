[
    {
        "repo": "jackrabbit-oak",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/a077b2e1d2ed47122b41791460866d1e9605827b",
        "bug_id": "jackrabbit-oak_a077b2e",
        "message": "OAK-8229 : LoginModuleImpl.commit will end in NPE if credentials are null\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1857352 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/81fb633f4230495a862429f3636c01a8a0d420f7",
        "patched_files": [
            "LoginModuleImpl.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 4,
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/a077b2e1d2ed47122b41791460866d1e9605827b/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authentication/user/LoginModuleImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authentication/user/LoginModuleImpl.java?ref=a077b2e1d2ed47122b41791460866d1e9605827b",
                "filename": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/authentication/user/LoginModuleImpl.java",
                "deletions": 1,
                "sha": "73d25074538fc9a078b69f8a0a48021fa22e14bd",
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/a077b2e1d2ed47122b41791460866d1e9605827b/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authentication/user/LoginModuleImpl.java",
                "patch": "@@ -167,7 +167,9 @@ public boolean commit() {\n                 } else if (userId != null) {\n                     principals.addAll(getPrincipals(userId));\n                 }\n-                subject.getPublicCredentials().add(credentials);\n+                if (credentials != null) {\n+                    subject.getPublicCredentials().add(credentials);\n+                }\n                 setAuthInfo(createAuthInfo(principals), subject);\n             } else {\n                 log.debug(\"Could not add information to read only subject {}\", subject);\n@@ -229,6 +231,7 @@ private String getLoginId(@Nullable PreAuthenticatedLogin preAuthenticatedLogin)\n         return uid;\n     }\n \n+    @Nullable\n     private String getAnonymousId() {\n         SecurityProvider sp = getSecurityProvider();\n         if (sp == null) {",
                "changes": 5
            },
            {
                "status": "modified",
                "additions": 270,
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/a077b2e1d2ed47122b41791460866d1e9605827b/oak-core/src/test/java/org/apache/jackrabbit/oak/security/authentication/user/LoginModuleImplTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-core/src/test/java/org/apache/jackrabbit/oak/security/authentication/user/LoginModuleImplTest.java?ref=a077b2e1d2ed47122b41791460866d1e9605827b",
                "filename": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/authentication/user/LoginModuleImplTest.java",
                "deletions": 187,
                "sha": "3d316245fed627c1e3515b1f7fb9c16aca04f6dc",
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/a077b2e1d2ed47122b41791460866d1e9605827b/oak-core/src/test/java/org/apache/jackrabbit/oak/security/authentication/user/LoginModuleImplTest.java",
                "patch": "@@ -16,20 +16,6 @@\n  */\n package org.apache.jackrabbit.oak.security.authentication.user;\n \n-import java.io.IOException;\n-import java.security.Principal;\n-import java.util.Arrays;\n-import javax.jcr.Credentials;\n-import javax.jcr.GuestCredentials;\n-import javax.jcr.RepositoryException;\n-import javax.jcr.SimpleCredentials;\n-import javax.security.auth.Subject;\n-import javax.security.auth.callback.Callback;\n-import javax.security.auth.callback.CallbackHandler;\n-import javax.security.auth.callback.UnsupportedCallbackException;\n-import javax.security.auth.login.Configuration;\n-import javax.security.auth.login.LoginException;\n-\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Maps;\n import com.google.common.collect.Sets;\n@@ -44,9 +30,11 @@\n import org.apache.jackrabbit.oak.security.internal.SecurityProviderBuilder;\n import org.apache.jackrabbit.oak.spi.security.ConfigurationParameters;\n import org.apache.jackrabbit.oak.spi.security.SecurityProvider;\n+import org.apache.jackrabbit.oak.spi.security.authentication.AuthInfoImpl;\n import org.apache.jackrabbit.oak.spi.security.authentication.Authentication;\n import org.apache.jackrabbit.oak.spi.security.authentication.ConfigurationUtil;\n import org.apache.jackrabbit.oak.spi.security.authentication.ImpersonationCredentials;\n+import org.apache.jackrabbit.oak.spi.security.authentication.PreAuthenticatedLogin;\n import org.apache.jackrabbit.oak.spi.security.authentication.callback.RepositoryCallback;\n import org.apache.jackrabbit.oak.spi.security.user.UserAuthenticationFactory;\n import org.apache.jackrabbit.oak.spi.security.user.UserConfiguration;\n@@ -55,13 +43,33 @@\n import org.jetbrains.annotations.NotNull;\n import org.jetbrains.annotations.Nullable;\n import org.junit.Test;\n-import org.mockito.Mockito;\n \n+import javax.jcr.Credentials;\n+import javax.jcr.GuestCredentials;\n+import javax.jcr.RepositoryException;\n+import javax.jcr.SimpleCredentials;\n+import javax.security.auth.Subject;\n+import javax.security.auth.callback.Callback;\n+import javax.security.auth.callback.CallbackHandler;\n+import javax.security.auth.callback.UnsupportedCallbackException;\n+import javax.security.auth.login.Configuration;\n+import javax.security.auth.login.LoginException;\n+import java.security.Principal;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.apache.jackrabbit.oak.spi.security.authentication.AbstractLoginModule.SHARED_KEY_PRE_AUTH_LOGIN;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n public class LoginModuleImplTest extends AbstractSecurityTest {\n \n@@ -83,27 +91,18 @@ protected Configuration getConfiguration() {\n         return ConfigurationUtil.getDefaultConfiguration(ConfigurationParameters.EMPTY);\n     }\n \n-    private User createTestUser() throws RepositoryException, CommitFailedException {\n+    private void createTestUser() throws RepositoryException, CommitFailedException {\n         if (user == null) {\n             UserManager userManager = getUserManager(root);\n             user = userManager.createUser(USER_ID, USER_PW);\n             root.commit();\n         }\n-        return user;\n     }\n \n-    @Test\n+    @Test(expected = LoginException.class)\n     public void testNullLogin() throws Exception {\n-        ContentSession cs = null;\n-        try {\n-            cs = login(null);\n+        try (ContentSession cs = login(null)) {\n             fail(\"Null login should fail\");\n-        } catch (LoginException e) {\n-            // success\n-        } finally {\n-            if (cs != null) {\n-                cs.close();\n-            }\n         }\n     }\n \n@@ -116,7 +115,7 @@ public void testGuestLogin() throws Exception {\n         }\n     }\n \n-    @Test\n+    @Test(expected = LoginException.class)\n     public void testAnonymousLogin() throws Exception {\n         String anonymousID = UserUtil.getAnonymousId(getUserConfiguration().getParameters());\n \n@@ -127,268 +126,353 @@ public void testAnonymousLogin() throws Exception {\n         assertNotNull(anonymous);\n         assertFalse(root.getTree(anonymous.getPath()).hasProperty(UserConstants.REP_PASSWORD));\n \n-        ContentSession cs = null;\n-        try {\n-            cs = login(new SimpleCredentials(anonymousID, new char[0]));\n+        try (ContentSession cs = login(new SimpleCredentials(anonymousID, new char[0]))) {\n             fail(\"Login with anonymousID should fail since the initial setup doesn't provide a password.\");\n-        } catch (LoginException e) {\n-            // success\n-        } finally {\n-            if (cs != null) {\n-                cs.close();\n-            }\n         }\n     }\n \n     @Test\n     public void testUserLogin() throws Exception {\n-        ContentSession cs = null;\n-        try {\n-            createTestUser();\n-\n-            cs = login(new SimpleCredentials(USER_ID, USER_PW.toCharArray()));\n+        createTestUser();\n+        try (ContentSession cs = login(new SimpleCredentials(USER_ID, USER_PW.toCharArray()))) {\n             AuthInfo authInfo = cs.getAuthInfo();\n             assertEquals(USER_ID, authInfo.getUserID());\n-        } finally {\n-            if (cs != null) {\n-                cs.close();\n-            }\n         }\n     }\n \n     @Test\n     public void testAuthInfoContainsUserId() throws Exception {\n-        ContentSession cs = null;\n-        try {\n-            createTestUser();\n-\n-            cs = login(new SimpleCredentials(USER_ID_CASED, USER_PW.toCharArray()));\n+        createTestUser();\n+        try (ContentSession cs = login(new SimpleCredentials(USER_ID_CASED, USER_PW.toCharArray()))) {\n             AuthInfo authInfo = cs.getAuthInfo();\n             assertEquals(user.getID(), authInfo.getUserID());\n-        } finally {\n-            if (cs != null) {\n-                cs.close();\n-            }\n         }\n     }\n \n     @Test\n     public void testUserLoginIsCaseInsensitive() throws Exception {\n-        ContentSession cs = null;\n-        try {\n-            createTestUser();\n-\n-            cs = login(new SimpleCredentials(USER_ID_CASED, USER_PW.toCharArray()));\n+        createTestUser();\n+        try (ContentSession cs = login(new SimpleCredentials(USER_ID_CASED, USER_PW.toCharArray()))) {\n             AuthInfo authInfo = cs.getAuthInfo();\n             UserManager userMgr = getUserManager(root);\n             Authorizable auth = userMgr.getAuthorizable(authInfo.getUserID());\n             assertNotNull(auth);\n             assertTrue(auth.getID().equalsIgnoreCase(USER_ID_CASED));\n-        } finally {\n-            if (cs != null) {\n-                cs.close();\n-            }\n         }\n     }\n \n     @Test\n     public void testUserLoginIsCaseInsensitive2() throws Exception {\n-        ContentSession cs = null;\n-        try {\n-            createTestUser();\n-            cs = login(new SimpleCredentials(USER_ID_CASED, USER_PW.toCharArray()));\n+        createTestUser();\n+        try (ContentSession cs = login(new SimpleCredentials(USER_ID_CASED, USER_PW.toCharArray()))) {\n             AuthInfo authInfo = cs.getAuthInfo();\n             assertEquals(user.getID(), authInfo.getUserID());\n             assertTrue(USER_ID_CASED.equalsIgnoreCase(authInfo.getUserID()));\n-        } finally {\n-            if (cs != null) {\n-                cs.close();\n-            }\n         }\n     }\n \n-    @Test\n+    @Test(expected = LoginException.class)\n     public void testUnknownUserLogin() throws Exception {\n-        ContentSession cs = null;\n-        try {\n-            cs = login(new SimpleCredentials(\"unknown\", \"\".toCharArray()));\n+        try (ContentSession cs = login(new SimpleCredentials(\"unknown\", \"\".toCharArray()))) {\n             fail(\"Unknown user must not be able to login\");\n-        } catch (LoginException e) {\n-            // success\n-        } finally {\n-            if (cs != null) {\n-                cs.close();\n-            }\n         }\n     }\n \n     @Test\n     public void testSelfImpersonation() throws Exception {\n-        ContentSession cs = null;\n-        try {\n-            createTestUser();\n-\n-            SimpleCredentials sc = new SimpleCredentials(USER_ID, USER_PW.toCharArray());\n-            cs = login(sc);\n-\n-            AuthInfo authInfo = cs.getAuthInfo();\n+        createTestUser();\n+        AuthInfo authInfo;\n+        try (ContentSession cs = login(new SimpleCredentials(USER_ID, USER_PW.toCharArray()))) {\n+            authInfo = cs.getAuthInfo();\n             assertEquals(USER_ID, authInfo.getUserID());\n+        }\n \n-            cs.close();\n-\n-            sc = new SimpleCredentials(USER_ID, new char[0]);\n-            ImpersonationCredentials ic = new ImpersonationCredentials(sc, authInfo);\n-            cs = login(ic);\n-\n+        SimpleCredentials sc = new SimpleCredentials(USER_ID, new char[0]);\n+        ImpersonationCredentials ic = new ImpersonationCredentials(sc, authInfo);\n+        try (ContentSession cs = login(ic)) {\n             authInfo = cs.getAuthInfo();\n             assertEquals(USER_ID, authInfo.getUserID());\n-        } finally {\n-            if (cs != null) {\n-                cs.close();\n-            }\n         }\n     }\n \n-    @Test\n+    @Test(expected = LoginException.class)\n     public void testInvalidImpersonation() throws Exception {\n-        ContentSession cs = null;\n-        try {\n-            createTestUser();\n+        createTestUser();\n+        AuthInfo authInfo;\n+        try (ContentSession cs = login(new SimpleCredentials(USER_ID, USER_PW.toCharArray()))) {\n+            authInfo = cs.getAuthInfo();\n+            assertEquals(USER_ID, authInfo.getUserID());\n+        }\n \n-            SimpleCredentials sc = new SimpleCredentials(USER_ID, USER_PW.toCharArray());\n-            cs = login(sc);\n+        ConfigurationParameters config = securityProvider.getConfiguration(UserConfiguration.class).getParameters();\n+        String adminId = UserUtil.getAdminId(config);\n+        SimpleCredentials sc = new SimpleCredentials(adminId, new char[0]);\n+        ImpersonationCredentials ic = new ImpersonationCredentials(sc, authInfo);\n+        // test-user should not be allowed to impersonate admin -> exception expected\n+        try (ContentSession cs = login(ic)) {\n+            fail(\"User 'test' should not be allowed to impersonate \" + adminId);\n+        }\n+    }\n \n+    @Test\n+    public void testLoginWithAttributes( ) throws Exception {\n+        createTestUser();\n+        SimpleCredentials sc = new SimpleCredentials(USER_ID, USER_PW.toCharArray());\n+        sc.setAttribute(\"attr\", \"value\");\n+        try (ContentSession cs = login(sc)){\n             AuthInfo authInfo = cs.getAuthInfo();\n-            assertEquals(USER_ID, authInfo.getUserID());\n+            assertTrue(Arrays.asList(authInfo.getAttributeNames()).contains(\"attr\"));\n+            assertEquals(\"value\", authInfo.getAttribute(\"attr\"));\n+        }\n+    }\n \n-            cs.close();\n-            cs = null;\n+    @Test\n+    public void testImpersonationWithAttributes() throws Exception {\n+        createTestUser();\n+        AuthInfo authInfo;\n+        try (ContentSession cs = login(new SimpleCredentials(USER_ID, USER_PW.toCharArray()))) {\n+            authInfo = cs.getAuthInfo();\n+        }\n \n-            ConfigurationParameters config = securityProvider.getConfiguration(UserConfiguration.class).getParameters();\n-            String adminId = UserUtil.getAdminId(config);\n-            sc = new SimpleCredentials(adminId, new char[0]);\n-            ImpersonationCredentials ic = new ImpersonationCredentials(sc, authInfo);\n+        SimpleCredentials sc = new SimpleCredentials(USER_ID, new char[0]);\n+        sc.setAttribute(\"attr\", \"value\");\n+        ImpersonationCredentials ic = new ImpersonationCredentials(sc, authInfo);\n+        try (ContentSession cs = login(ic)) {\n+            authInfo = cs.getAuthInfo();\n+            assertTrue(Arrays.asList(authInfo.getAttributeNames()).contains(\"attr\"));\n+            assertEquals(\"value\", authInfo.getAttribute(\"attr\"));\n+        }\n+    }\n \n-            try {\n-                cs = login(ic);\n-                fail(\"User 'test' should not be allowed to impersonate \" + adminId);\n-            } catch (LoginException e) {\n-                // success\n-            }\n-        } finally {\n-            if (cs != null) {\n-                cs.close();\n-            }\n+    @Test(expected = LoginException.class)\n+    public void testImpersonationWithUnsupportedBaseCredentials() throws Exception {\n+        Credentials baseCredentials = mock(Credentials.class);\n+        ImpersonationCredentials ic = new ImpersonationCredentials(baseCredentials, new AuthInfoImpl(USER_ID, null, null));\n+        try (ContentSession cs = login(ic)) {\n+            fail(\"Base credentials of ImpersonationCredentials can only be SimpleCredentials.\");\n         }\n     }\n \n     @Test\n-    public void testLoginWithAttributes( ) throws Exception {\n-        ContentSession cs = null;\n-        try {\n-            createTestUser();\n+    public void testLoginPreAuthenticated() throws Exception {\n+        Authentication authentication = mock(Authentication.class);\n+        when(authentication.authenticate(any(Credentials.class))).thenReturn(true).getMock();\n+        when(authentication.getUserId()).thenReturn(\"uid\"); // but getUserPrincipal returns null\n+\n+        UserAuthenticationFactory uaf = when(mock(UserAuthenticationFactory.class).getAuthentication(any(UserConfiguration.class), any(Root.class), anyString())).thenReturn(authentication).getMock();\n+        Map<String, Object> sharedState = Maps.newHashMap();\n+        sharedState.put(SHARED_KEY_PRE_AUTH_LOGIN, new PreAuthenticatedLogin(\"uid\"));\n+\n+        Subject subject = new Subject();\n+        LoginModuleImpl lm = new LoginModuleImpl();\n+        lm.initialize(subject, new TestCallbackHandler(uaf), sharedState, Maps.newHashMap());\n+        assertTrue(lm.login());\n+        assertTrue(lm.commit());\n+\n+        assertTrue(subject.getPrincipals().isEmpty());\n+        // no other public credentials than the AuthInfo\n+        assertEquals(1, subject.getPublicCredentials().size());\n+        // verify AuthInfo\n+        Set<AuthInfo> authInfos = subject.getPublicCredentials(AuthInfo.class);\n+        assertFalse(authInfos.isEmpty());\n+        assertEquals(\"uid\", authInfos.iterator().next().getUserID());\n+    }\n \n-            SimpleCredentials sc = new SimpleCredentials(USER_ID, USER_PW.toCharArray());\n-            sc.setAttribute(\"attr\", \"value\");\n+    @Test\n+    public void testLoginPreAuthenticatedWithReadOnlySubject() throws Exception {\n+        Authentication authentication = when(mock(Authentication.class).authenticate(any(Credentials.class))).thenReturn(true).getMock();\n+        UserAuthenticationFactory uaf = when(mock(UserAuthenticationFactory.class).getAuthentication(any(UserConfiguration.class), any(Root.class), anyString())).thenReturn(authentication).getMock();\n+\n+        Map<String, Object> sharedState = Maps.newHashMap();\n+        sharedState.put(SHARED_KEY_PRE_AUTH_LOGIN, new PreAuthenticatedLogin(\"uid\"));\n+\n+        Subject subject = new Subject();\n+        subject.setReadOnly();\n+        LoginModuleImpl lm = new LoginModuleImpl();\n+        lm.initialize(subject, new TestCallbackHandler(uaf), sharedState, Maps.newHashMap());\n+        assertTrue(lm.login());\n+        assertTrue(lm.commit());\n+\n+        assertTrue(subject.getPrincipals().isEmpty());\n+        assertTrue(subject.getPublicCredentials().isEmpty());\n+    }\n \n-            cs = login(sc);\n+    @Test\n+    public void testNullUserAuthentication() throws Exception {\n+        LoginModuleImpl loginModule = new LoginModuleImpl();\n+        CallbackHandler cbh = new TestCallbackHandler(mock(UserAuthenticationFactory.class));\n+        loginModule.initialize(new Subject(), cbh, Maps.newHashMap(), Maps.newHashMap());\n \n-            AuthInfo authInfo = cs.getAuthInfo();\n-            assertTrue(Arrays.asList(authInfo.getAttributeNames()).contains(\"attr\"));\n-            assertEquals(\"value\", authInfo.getAttribute(\"attr\"));\n+        assertFalse(loginModule.login());\n+        assertFalse(loginModule.commit());\n+    }\n \n-            cs.close();\n-        } finally {\n-            if (cs != null) {\n-                cs.close();\n+    @Test\n+    public void testMissingUserAuthenticationFactory() throws Exception {\n+        CallbackHandler cbh = callbacks -> {\n+            for (Callback callback : callbacks) {\n+                if (callback instanceof RepositoryCallback) {\n+                    UserConfiguration uc = when(mock(UserConfiguration.class).getParameters()).thenReturn(ConfigurationParameters.EMPTY).getMock();\n+                    SecurityProvider sp = when(mock(SecurityProvider.class).getConfiguration(UserConfiguration.class)).thenReturn(uc).getMock();\n+                    ((RepositoryCallback) callback).setSecurityProvider(sp);\n+                    ((RepositoryCallback) callback).setContentRepository(getContentRepository());\n+                } else {\n+                    throw new UnsupportedCallbackException(callback);\n+                }\n             }\n-        }\n+        };\n+\n+        LoginModuleImpl loginModule = new LoginModuleImpl();\n+        loginModule.initialize(new Subject(), cbh, Maps.newHashMap(), Maps.newHashMap());\n+\n+        assertFalse(loginModule.login());\n+        assertFalse(loginModule.commit());\n     }\n \n     @Test\n-    public void testImpersonationWithAttributes() throws Exception {\n-        ContentSession cs = null;\n-        try {\n-            createTestUser();\n+    public void testMissingSecurityProviderGuestLogin() throws Exception {\n+        CallbackHandler cbh = callbacks -> {\n+            for (Callback callback : callbacks) {\n+                if (callback instanceof RepositoryCallback) {\n+                    ((RepositoryCallback) callback).setSecurityProvider(null);\n+                    ((RepositoryCallback) callback).setContentRepository(getContentRepository());\n+                } else {\n+                    throw new UnsupportedCallbackException(callback);\n+                }\n+            }\n+        };\n \n-            SimpleCredentials sc = new SimpleCredentials(USER_ID, USER_PW.toCharArray());\n-            cs = login(sc);\n-            AuthInfo authInfo = cs.getAuthInfo();\n-            cs.close();\n-            cs = null;\n+        LoginModuleImpl loginModule = new LoginModuleImpl();\n+        loginModule.initialize(new Subject(false, ImmutableSet.of(), ImmutableSet.of(new GuestCredentials()), ImmutableSet.of()), cbh, Maps.newHashMap(), Maps.newHashMap());\n \n-            sc = new SimpleCredentials(USER_ID, new char[0]);\n-            sc.setAttribute(\"attr\", \"value\");\n-            ImpersonationCredentials ic = new ImpersonationCredentials(sc, authInfo);\n-            cs = login(ic);\n+        assertFalse(loginModule.login());\n+        assertFalse(loginModule.commit());\n+    }\n \n-            authInfo = cs.getAuthInfo();\n-            assertTrue(Arrays.asList(authInfo.getAttributeNames()).contains(\"attr\"));\n-            assertEquals(\"value\", authInfo.getAttribute(\"attr\"));\n-        } finally {\n-            if (cs != null) {\n-                cs.close();\n+    @Test\n+    public void testMissingSecurityProvider() throws Exception {\n+        CallbackHandler cbh = callbacks -> {\n+            for (Callback callback : callbacks) {\n+                if (callback instanceof RepositoryCallback) {\n+                    ((RepositoryCallback) callback).setSecurityProvider(null);\n+                    ((RepositoryCallback) callback).setContentRepository(getContentRepository());\n+                } else {\n+                    throw new UnsupportedCallbackException(callback);\n+                }\n             }\n-        }\n+        };\n+\n+        LoginModuleImpl loginModule = new LoginModuleImpl();\n+        loginModule.initialize(new Subject(), cbh, Maps.newHashMap(), Maps.newHashMap());\n+\n+        assertFalse(loginModule.login());\n+        assertFalse(loginModule.commit());\n     }\n \n     @Test\n-    public void testGetNullUserAuthentication() throws Exception {\n+    public void testMissingRoot() throws Exception {\n+        CallbackHandler cbh = callbacks -> {\n+            for (Callback callback : callbacks) {\n+                if (callback instanceof RepositoryCallback) {\n+                    ((RepositoryCallback) callback).setSecurityProvider(getSecurityProvider());\n+                    ((RepositoryCallback) callback).setContentRepository(null);\n+                } else {\n+                    throw new UnsupportedCallbackException(callback);\n+                }\n+            }\n+        };\n+\n         LoginModuleImpl loginModule = new LoginModuleImpl();\n-        CallbackHandler cbh = new TestCallbackHandler(Mockito.mock(UserAuthenticationFactory.class));\n-        loginModule.initialize(new Subject(), cbh, Maps.<String, Object>newHashMap(), Maps.<String, Object>newHashMap());\n+        loginModule.initialize(new Subject(), cbh, Maps.newHashMap(), Maps.newHashMap());\n \n         assertFalse(loginModule.login());\n         assertFalse(loginModule.commit());\n     }\n \n     @Test\n-    public void testCustomUserAuthentication() throws Exception {\n+    public void testMissingCallbackHandler() throws Exception {\n         LoginModuleImpl loginModule = new LoginModuleImpl();\n+        loginModule.initialize(new Subject(), null, Maps.newHashMap(), Maps.newHashMap());\n+\n+        assertFalse(loginModule.login());\n+        assertFalse(loginModule.commit());\n+    }\n+\n+    @Test\n+    public void testLoginCustomUserAuthenticationFactory() throws Exception {\n+        UserAuthenticationFactory factory = (configuration, root, userId) -> new Authentication() {\n+            @Override\n+            public boolean authenticate(@Nullable Credentials credentials) {\n+                return true;\n+            }\n \n-        UserAuthenticationFactory factory = new UserAuthenticationFactory() {\n             @Nullable\n             @Override\n-            public Authentication getAuthentication(@NotNull UserConfiguration configuration, @NotNull Root root, @Nullable String userId) {\n-                return new Authentication() {\n-                    @Override\n-                    public boolean authenticate(@Nullable Credentials credentials) throws LoginException {\n-                        return true;\n-                    }\n-\n-                    @Nullable\n-                    @Override\n-                    public String getUserId() {\n-                        return null;\n-                    }\n-\n-                    @Nullable\n-                    @Override\n-                    public Principal getUserPrincipal() {\n-                        return null;\n-                    }\n-                };\n+            public String getUserId() {\n+                return null;\n+            }\n+\n+            @Nullable\n+            @Override\n+            public Principal getUserPrincipal() {\n+                return null;\n             }\n         };\n \n         CallbackHandler cbh = new TestCallbackHandler(factory);\n         SimpleCredentials creds = new SimpleCredentials(\"loginId\", new char[0]);\n-        Subject subject = new Subject(false, Sets.<Principal>newHashSet(), ImmutableSet.of(creds), Sets.newHashSet());\n+        Subject subject = new Subject(false, Sets.newHashSet(), ImmutableSet.of(creds), Sets.newHashSet());\n \n-        loginModule.initialize(subject, cbh, Maps.<String, Object>newHashMap(), Maps.<String, Object>newHashMap());\n+        LoginModuleImpl loginModule = new LoginModuleImpl();\n+        loginModule.initialize(subject, cbh, Maps.newHashMap(), Maps.newHashMap());\n         assertTrue(loginModule.login());\n         assertTrue(loginModule.commit());\n \n+        // authinfo falls back to loginId because Authentication.getUserId returned null\n         AuthInfo authInfo = subject.getPublicCredentials(AuthInfo.class).iterator().next();\n         assertEquals(\"loginId\", authInfo.getUserID());\n     }\n \n+    @Test\n+    public void testMissingUserId() throws Exception {\n+        UserAuthenticationFactory factory = (configuration, root, userId) -> new Authentication() {\n+            @Override\n+            public boolean authenticate(@Nullable Credentials credentials) {\n+                return true;\n+            }\n+\n+            @Nullable\n+            @Override\n+            public String getUserId() {\n+                return null;\n+            }\n+\n+            @Nullable\n+            @Override\n+            public Principal getUserPrincipal() {\n+                return null;\n+            }\n+        };\n+\n+        CallbackHandler cbh = new TestCallbackHandler(factory);\n+        Subject subject = new Subject(false, Sets.newHashSet(), ImmutableSet.of(), Sets.newHashSet());\n+\n+        LoginModuleImpl loginModule = new LoginModuleImpl();\n+        loginModule.initialize(subject, cbh, Maps.newHashMap(), Maps.newHashMap());\n+        assertTrue(loginModule.login());\n+        assertTrue(loginModule.commit());\n+\n+        AuthInfo authInfo = subject.getPublicCredentials(AuthInfo.class).iterator().next();\n+        assertNull(authInfo.getUserID());\n+        assertTrue(subject.getPrincipals().isEmpty());\n+    }\n+\n \n     private class TestCallbackHandler implements CallbackHandler {\n \n         private final SecurityProvider sp;\n \n-        private TestCallbackHandler(@Nullable UserAuthenticationFactory authenticationFactory) {\n+        private TestCallbackHandler(@NotNull UserAuthenticationFactory authenticationFactory) {\n             ConfigurationParameters params = ConfigurationParameters.of(\n                     UserConfiguration.NAME,\n                     ConfigurationParameters.of(\n@@ -397,7 +481,7 @@ private TestCallbackHandler(@Nullable UserAuthenticationFactory authenticationFa\n         }\n \n         @Override\n-        public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n+        public void handle(Callback[] callbacks) throws UnsupportedCallbackException {\n             for (Callback callback : callbacks) {\n                 if (callback instanceof RepositoryCallback) {\n                     ((RepositoryCallback) callback).setSecurityProvider(sp);\n@@ -408,5 +492,4 @@ public void handle(Callback[] callbacks) throws IOException, UnsupportedCallback\n             }\n         }\n     }\n-\n }",
                "changes": 457
            }
        ],
        "unit_tests": [
            "LoginModuleImplTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/authentication/user/LoginModuleImplTest.java",
        "buggy_files": [
            "oak-core/src/main/java/org/apache/jackrabbit/oak/security/authentication/user/LoginModuleImpl.java"
        ],
        "fixed": true
    }
]