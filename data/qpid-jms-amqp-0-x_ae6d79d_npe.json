[
    {
        "repo": "qpid-jms-amqp-0-x",
        "commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/ae6d79d38334127039e2d62826d9c441f60f1659",
        "bug_id": "qpid-jms-amqp-0-x_ae6d79d",
        "message": "QPID-7898: [Qpid JMS AMQP 0-x] Prevent possibilities of NPEs when 0-8 path parses a reply-to address that is not BURL formatted",
        "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/1fdecf3a80dfadc8d1b5d3ab42334c2154587fb6",
        "patched_files": [
            "AbstractJMSMessage.java",
            "AMQMessageDelegate_0_8.java",
            "BasicMessageConsumer.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/ae6d79d38334127039e2d62826d9c441f60f1659/client/src/main/java/org/apache/qpid/client/BasicMessageConsumer.java",
                "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/BasicMessageConsumer.java?ref=ae6d79d38334127039e2d62826d9c441f60f1659",
                "filename": "client/src/main/java/org/apache/qpid/client/BasicMessageConsumer.java",
                "deletions": 3,
                "sha": "d30f51608fc1fac746c11b30414cb589d5100cef",
                "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/ae6d79d38334127039e2d62826d9c441f60f1659/client/src/main/java/org/apache/qpid/client/BasicMessageConsumer.java",
                "patch": "@@ -781,6 +781,7 @@ public void notifyMessage(AbstractJMSMessage jmsMessage)\n     protected void preDeliver(AbstractJMSMessage msg)\n     {\n         _session.setInRecovery(false);\n+        msg.setAMQSession(_session);\n \n         switch (_acknowledgeMode)\n         {\n@@ -793,9 +794,6 @@ protected void preDeliver(AbstractJMSMessage msg)\n                 _session.addUnacknowledgedMessage(msg.getDeliveryTag());\n                 break;\n             case Session.CLIENT_ACKNOWLEDGE:\n-                // we set the session so that when the user calls acknowledge() it can call the method on session\n-                // to send out the appropriate frame\n-                msg.setAMQSession(_session);\n                 _session.addUnacknowledgedMessage(msg.getDeliveryTag());\n                 _session.markDirty();\n                 break;",
                "changes": 4
            },
            {
                "status": "modified",
                "additions": 42,
                "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/ae6d79d38334127039e2d62826d9c441f60f1659/client/src/main/java/org/apache/qpid/client/message/AMQMessageDelegate_0_8.java",
                "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/message/AMQMessageDelegate_0_8.java?ref=ae6d79d38334127039e2d62826d9c441f60f1659",
                "filename": "client/src/main/java/org/apache/qpid/client/message/AMQMessageDelegate_0_8.java",
                "deletions": 8,
                "sha": "8a9aec8cbec926a5242b60c24eeeeee6bb67b24b",
                "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/ae6d79d38334127039e2d62826d9c441f60f1659/client/src/main/java/org/apache/qpid/client/message/AMQMessageDelegate_0_8.java",
                "patch": "@@ -34,14 +34,18 @@\n import javax.jms.MessageNotWriteableException;\n import javax.jms.Queue;\n \n+import org.apache.qpid.QpidException;\n+import org.apache.qpid.client.AMQAnyDestination;\n import org.apache.qpid.client.AMQDestination;\n import org.apache.qpid.client.AMQQueue;\n import org.apache.qpid.client.AMQSession;\n import org.apache.qpid.client.AMQSession_0_8;\n import org.apache.qpid.client.AMQTopic;\n import org.apache.qpid.client.CustomJMSXProperty;\n+import org.apache.qpid.exchange.ExchangeDefaults;\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.framing.BasicContentHeaderProperties;\n+import org.apache.qpid.messaging.Address;\n import org.apache.qpid.url.AMQBindingURL;\n import org.apache.qpid.url.BindingURL;\n \n@@ -297,15 +301,17 @@ public Destination getJMSReplyTo() throws JMSException\n                     else if(replyToEncoding.contains(\"/\"))\n                     {\n                         String[] parts = replyToEncoding.split(\"/\",2);\n-                        dest = new NonBURLReplyToDestination(parts[0], parts[1]);\n-\n-\n+                        dest = new NonBURLReplyToDestination(ExchangeDefaults.DIRECT_EXCHANGE_CLASS, parts[0], parts[1]);\n                     }\n                     else\n                     {\n-                        if(getAMQSession().isQueueBound(replyToEncoding, null, null))\n+                        if (getAMQSession().isQueueBound(null, replyToEncoding, null))\n                         {\n-                            dest = new NonBURLReplyToDestination(replyToEncoding, \"\");\n+                            dest = new NonBURLReplyToDestination(ExchangeDefaults.DIRECT_EXCHANGE_CLASS, \"\", replyToEncoding);\n+                        }\n+                        else if (isExchangeExist(replyToEncoding))\n+                        {\n+                            dest = new NonBURLReplyToDestination(ExchangeDefaults.DIRECT_EXCHANGE_CLASS, replyToEncoding, \"\");\n                         }\n                         else\n                         {\n@@ -322,6 +328,32 @@ else if(replyToEncoding.contains(\"/\"))\n         }\n     }\n \n+    private boolean isExchangeExist(final String replyToEncoding)\n+    {\n+        try\n+        {\n+            AMQDestination amqDestination = new AMQDestination()\n+            {\n+                @Override\n+                public String getAddressName()\n+                {\n+                    return replyToEncoding;\n+                }\n+\n+                @Override\n+                public boolean isNameRequired()\n+                {\n+                    return false;\n+                }\n+            };\n+            return getAMQSession().isExchangeExist(amqDestination, false);\n+        }\n+        catch (Exception e)\n+        {\n+            return false;\n+        }\n+    }\n+\n     public void setJMSReplyTo(Destination destination) throws JMSException\n     {\n         if (destination == null)\n@@ -660,7 +692,7 @@ boolean hasProperty(final String name)\n         public DefaultRouterDestination(final String replyToEncoding)\n         {\n             super(\"\",\n-                  \"direct\",\n+                  ExchangeDefaults.DIRECT_EXCHANGE_CLASS,\n                   replyToEncoding,\n                   replyToEncoding);\n         }\n@@ -682,10 +714,12 @@ public boolean neverDeclare()\n     {\n         private static final long serialVersionUID = 122897705932489259L;\n \n-        public NonBURLReplyToDestination(final String exchange, final String routingKey)\n+        public NonBURLReplyToDestination(final String exchangeClass,\n+                                         final String exchange,\n+                                         final String routingKey)\n         {\n             super(exchange,\n-                  null,\n+                  exchangeClass,\n                   routingKey,\n                   routingKey);\n         }",
                "changes": 50
            },
            {
                "status": "modified",
                "additions": 0,
                "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/ae6d79d38334127039e2d62826d9c441f60f1659/client/src/main/java/org/apache/qpid/client/message/AbstractJMSMessage.java",
                "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/message/AbstractJMSMessage.java?ref=ae6d79d38334127039e2d62826d9c441f60f1659",
                "filename": "client/src/main/java/org/apache/qpid/client/message/AbstractJMSMessage.java",
                "deletions": 8,
                "sha": "d2cd0076b81a8c61707d866c70ec78d153261cac",
                "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/ae6d79d38334127039e2d62826d9c441f60f1659/client/src/main/java/org/apache/qpid/client/message/AbstractJMSMessage.java",
                "patch": "@@ -34,8 +34,6 @@\n {\n \n \n-    /** If the acknowledge mode is CLIENT_ACKNOWLEDGE the session is required */\n-\n     private AMQMessageDelegate _delegate;\n     private boolean _redelivered;\n     private boolean _receivedFromServer;\n@@ -398,12 +396,6 @@ public void setReceivedFromServer()\n \n \n \n-    /**\n-     * The session is set when CLIENT_ACKNOWLEDGE mode is used so that the CHANNEL ACK can be sent when the user calls\n-     * acknowledge()\n-     *\n-     * @param s the AMQ session that delivered this message\n-     */\n     public void setAMQSession(AMQSession s)\n     {\n         _delegate.setAMQSession(s);",
                "changes": 8
            },
            {
                "status": "modified",
                "additions": 68,
                "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/ae6d79d38334127039e2d62826d9c441f60f1659/client/src/test/java/org/apache/qpid/client/message/AbstractJMSMessageTest.java",
                "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/test/java/org/apache/qpid/client/message/AbstractJMSMessageTest.java?ref=ae6d79d38334127039e2d62826d9c441f60f1659",
                "filename": "client/src/test/java/org/apache/qpid/client/message/AbstractJMSMessageTest.java",
                "deletions": 3,
                "sha": "2bde82b671fde2ffa9b2323f112119073bde9484",
                "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/ae6d79d38334127039e2d62826d9c441f60f1659/client/src/test/java/org/apache/qpid/client/message/AbstractJMSMessageTest.java",
                "patch": "@@ -21,17 +21,49 @@\n package org.apache.qpid.client.message;\n \n \n-import org.apache.qpid.test.utils.QpidTestCase;\n+import static org.mockito.Matchers.anyBoolean;\n+import static org.mockito.Matchers.argThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Matchers.isNull;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n \n import javax.jms.JMSException;\n \n+import org.mockito.ArgumentMatcher;\n+\n+import org.apache.qpid.QpidException;\n+import org.apache.qpid.client.AMQDestination;\n+import org.apache.qpid.client.AMQSession;\n+import org.apache.qpid.framing.BasicContentHeaderProperties;\n+import org.apache.qpid.framing.ContentBody;\n+import org.apache.qpid.framing.ContentHeaderBody;\n+import org.apache.qpid.test.utils.QpidTestCase;\n+\n public class AbstractJMSMessageTest extends QpidTestCase\n {\n \n+    private final AMQSession<?,?> _session = mock(AMQSession.class);\n+    private final MessageFactoryRegistry _messageFactoryRegistry = MessageFactoryRegistry.newDefaultRegistry(_session);\n+\n+    public void testIncoming08ReplyTo() throws Exception\n+    {\n+        when(_session.isQueueBound(isNull(String.class), eq(\"knownQueue\"), isNull(String.class))).thenReturn(true);\n+        when(_session.isExchangeExist(isDestinationWithAddress(\"knownExchange\"), anyBoolean())).thenReturn(true);\n+\n+        doReplyToTest(\"direct://amq.direct/knownQueue?routingkey='knownQueue'\", \"direct://amq.direct/knownQueue/knownQueue?routingkey='knownQueue'\");\n+        doReplyToTest(\"knownQueue\", \"direct:///knownQueue/knownQueue?routingkey='knownQueue'\");\n+        doReplyToTest(\"knownExchange\", \"direct://knownExchange//?routingkey=''\");\n+        doReplyToTest(\"news-service/sports\", \"direct://news-service/sports/sports?routingkey='sports'\");\n+    }\n+\n     public void testSetNullJMSReplyTo08() throws JMSException\n     {\n         JMSTextMessage message = new JMSTextMessage(AMQMessageDelegateFactory.FACTORY_0_8);\n-        try \n+        try\n         {\n             message.setJMSReplyTo(null);\n         }\n@@ -44,7 +76,7 @@ public void testSetNullJMSReplyTo08() throws JMSException\n     public void testSetNullJMSReplyTo10() throws JMSException\n     {\n         JMSTextMessage message = new JMSTextMessage(AMQMessageDelegateFactory.FACTORY_0_10);\n-        try \n+        try\n         {\n             message.setJMSReplyTo(null);\n         }\n@@ -54,4 +86,37 @@ public void testSetNullJMSReplyTo10() throws JMSException\n         }\n     }\n \n+    private void doReplyToTest(final String headerReplyTo, final String expectedReplyToAddress)\n+            throws QpidException, JMSException\n+    {\n+        final ContentHeaderBody contentHeader = new ContentHeaderBody(new BasicContentHeaderProperties());\n+        contentHeader.getProperties().setReplyTo(headerReplyTo);\n+\n+        final List<ContentBody> contentBodies = new ArrayList<>();\n+        final AbstractJMSMessage message = _messageFactoryRegistry.createMessage(0, false,\n+                                                                                 \"amq.direct\",\n+                                                                                 \"routingKey\",\n+                                                                                 contentHeader,\n+                                                                                 contentBodies,\n+                                                                                 null,\n+                                                                                 null,\n+                                                                                 0);\n+        message.setAMQSession(_session);\n+\n+        assertNotNull(message.getJMSReplyTo());\n+        assertEquals(expectedReplyToAddress, message.getJMSReplyTo().toString());\n+    }\n+\n+    private AMQDestination isDestinationWithAddress(final String expectedAddress)\n+    {\n+        return argThat( new ArgumentMatcher<AMQDestination>()\n+        {\n+            @Override\n+            public boolean matches(Object argument)\n+            {\n+                AMQDestination actual = (AMQDestination) argument;\n+                return actual.getAddressName().equals(expectedAddress);\n+            }\n+        });\n+    }\n }",
                "changes": 71
            }
        ],
        "unit_tests": [
            "AbstractJMSMessageTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "client/src/test/java/org/apache/qpid/client/message/AbstractJMSMessageTest.java",
        "buggy_files": [
            "client/src/main/java/org/apache/qpid/client/message/AbstractJMSMessage.java",
            "client/src/main/java/org/apache/qpid/client/message/AMQMessageDelegate_0_8.java",
            "client/src/main/java/org/apache/qpid/client/BasicMessageConsumer.java"
        ],
        "fixed": true
    }
]