[
    {
        "repo": "servicecomb-java-chassis",
        "commit": "https://github.com/apache/servicecomb-java-chassis/commit/9c734ac7691f638ddfb136410c8b65838e7bc594",
        "bug_id": "servicecomb-java-chassis_9c734ac",
        "message": "[SCB-579] fix NullPointerException when consumer upload null file",
        "parent": "https://github.com/apache/servicecomb-java-chassis/commit/bb8c7ffc4eb069c2118941291acf1ed884a56b83",
        "patched_files": [
            "VertxServerRequestToHttpServletRequest.java",
            "RestClientRequestImpl.java",
            "ConsumerArgumentSame.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 4,
                "raw_url": "https://github.com/apache/servicecomb-java-chassis/raw/9c734ac7691f638ddfb136410c8b65838e7bc594/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/param/RestClientRequestImpl.java",
                "contents_url": "https://api.github.com/repos/apache/servicecomb-java-chassis/contents/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/param/RestClientRequestImpl.java?ref=9c734ac7691f638ddfb136410c8b65838e7bc594",
                "filename": "common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/param/RestClientRequestImpl.java",
                "deletions": 0,
                "sha": "c6bb7e94fbf14d7033e8a40e64cbe39476901ef7",
                "blob_url": "https://github.com/apache/servicecomb-java-chassis/blob/9c734ac7691f638ddfb136410c8b65838e7bc594/common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/param/RestClientRequestImpl.java",
                "patch": "@@ -83,6 +83,10 @@ public Buffer getBodyBuffer() throws Exception {\n \n   @Override\n   public void attach(String name, Part part) {\n+    if (null == part) {\n+      LOGGER.debug(\"null file is ignored, file name = [{}]\", name);\n+      return;\n+    }\n     uploads.put(name, part);\n   }\n ",
                "changes": 4
            },
            {
                "status": "modified",
                "additions": 29,
                "raw_url": "https://github.com/apache/servicecomb-java-chassis/raw/9c734ac7691f638ddfb136410c8b65838e7bc594/common/common-rest/src/test/java/org/apache/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java",
                "contents_url": "https://api.github.com/repos/apache/servicecomb-java-chassis/contents/common/common-rest/src/test/java/org/apache/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java?ref=9c734ac7691f638ddfb136410c8b65838e7bc594",
                "filename": "common/common-rest/src/test/java/org/apache/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java",
                "deletions": 1,
                "sha": "d14c10e3600015eccff9812e640ab8d5189df990",
                "blob_url": "https://github.com/apache/servicecomb-java-chassis/blob/9c734ac7691f638ddfb136410c8b65838e7bc594/common/common-rest/src/test/java/org/apache/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java",
                "patch": "@@ -16,25 +16,30 @@\n  */\n package org.apache.servicecomb.common.rest.codec.param;\n \n+import java.util.Map;\n+\n import javax.servlet.http.Part;\n import javax.ws.rs.core.MediaType;\n \n+import org.hamcrest.Matchers;\n import org.junit.Assert;\n import org.junit.Test;\n+import org.mockito.Mockito;\n \n import io.vertx.core.MultiMap;\n import io.vertx.core.buffer.Buffer;\n import io.vertx.core.http.CaseInsensitiveHeaders;\n import io.vertx.core.http.HttpClientRequest;\n import io.vertx.core.http.HttpHeaders;\n+import mockit.Deencapsulation;\n import mockit.Expectations;\n import mockit.Mock;\n import mockit.MockUp;\n import mockit.Mocked;\n \n public class TestRestClientRequestImpl {\n   @Mocked\n-  HttpClientRequest request;\n+  private HttpClientRequest request;\n \n   @Test\n   public void testForm() throws Exception {\n@@ -113,4 +118,27 @@ public void fileBoundaryInfo_validSubmittedFileName(@Mocked Part part) {\n         \"Content-Transfer-Encoding: binary\\r\\n\" +\n         \"\\r\\n\", buffer.toString());\n   }\n+\n+  @Test\n+  public void testAttach() {\n+    RestClientRequestImpl restClientRequest = new RestClientRequestImpl(request, null, null);\n+    Part part = Mockito.mock(Part.class);\n+    String fileName = \"fileName\";\n+\n+    restClientRequest.attach(fileName, part);\n+\n+    Map<String, Part> uploads = Deencapsulation.getField(restClientRequest, \"uploads\");\n+    Assert.assertEquals(1, uploads.size());\n+    Assert.assertThat(uploads, Matchers.hasEntry(fileName, part));\n+  }\n+\n+  @Test\n+  public void testAttachOnPartIsNull() {\n+    RestClientRequestImpl restClientRequest = new RestClientRequestImpl(request, null, null);\n+\n+    restClientRequest.attach(\"fileName\", null);\n+\n+    Map<String, Part> uploads = Deencapsulation.getField(restClientRequest, \"uploads\");\n+    Assert.assertTrue(uploads.isEmpty());\n+  }\n }",
                "changes": 30
            },
            {
                "status": "modified",
                "additions": 3,
                "raw_url": "https://github.com/apache/servicecomb-java-chassis/raw/9c734ac7691f638ddfb136410c8b65838e7bc594/foundations/foundation-vertx/src/main/java/org/apache/servicecomb/foundation/vertx/http/VertxServerRequestToHttpServletRequest.java",
                "contents_url": "https://api.github.com/repos/apache/servicecomb-java-chassis/contents/foundations/foundation-vertx/src/main/java/org/apache/servicecomb/foundation/vertx/http/VertxServerRequestToHttpServletRequest.java?ref=9c734ac7691f638ddfb136410c8b65838e7bc594",
                "filename": "foundations/foundation-vertx/src/main/java/org/apache/servicecomb/foundation/vertx/http/VertxServerRequestToHttpServletRequest.java",
                "deletions": 8,
                "sha": "31b3892cc660e7a320d7bb45fe9dd2fea73498e2",
                "blob_url": "https://github.com/apache/servicecomb-java-chassis/blob/9c734ac7691f638ddfb136410c8b65838e7bc594/foundations/foundation-vertx/src/main/java/org/apache/servicecomb/foundation/vertx/http/VertxServerRequestToHttpServletRequest.java",
                "patch": "@@ -17,7 +17,6 @@\n \n package org.apache.servicecomb.foundation.vertx.http;\n \n-import java.io.IOException;\n import java.util.Collections;\n import java.util.Enumeration;\n import java.util.HashMap;\n@@ -27,7 +26,6 @@\n import java.util.Set;\n \n import javax.servlet.AsyncContext;\n-import javax.servlet.ServletException;\n import javax.servlet.ServletInputStream;\n import javax.servlet.http.Cookie;\n import javax.servlet.http.Part;\n@@ -106,7 +104,6 @@ public String getParameter(String name) {\n     return this.vertxRequest.getParam(name);\n   }\n \n-\n   @Override\n   public String[] getParameterValues(String name) {\n     List<String> paramList = this.vertxRequest.params().getAll(name);\n@@ -154,7 +151,6 @@ public int getLocalPort() {\n     return this.vertxRequest.localAddress().port();\n   }\n \n-\n   @Override\n   public String getHeader(String name) {\n     return this.vertxRequest.getHeader(name);\n@@ -203,7 +199,6 @@ public String getRequestURI() {\n     return this.path;\n   }\n \n-\n   @Override\n   public String getServletPath() {\n     return this.getPathInfo();\n@@ -215,7 +210,7 @@ public String getContextPath() {\n   }\n \n   @Override\n-  public ServletInputStream getInputStream() throws IOException {\n+  public ServletInputStream getInputStream() {\n     if (inputStream == null) {\n       inputStream = new BufferInputStream(context.getBody().getByteBuf());\n     }\n@@ -228,13 +223,13 @@ public AsyncContext getAsyncContext() {\n   }\n \n   @Override\n-  public Part getPart(String name) throws IOException, ServletException {\n+  public Part getPart(String name) {\n     Optional<FileUpload> upload = context.fileUploads()\n         .stream()\n         .filter(fileUpload -> fileUpload.name().equals(name))\n         .findFirst();\n     if (!upload.isPresent()) {\n-      LOGGER.error(\"No such file with name: {}.\", name);\n+      LOGGER.debug(\"No such file with name: {}.\", name);\n       return null;\n     }\n ",
                "changes": 11
            },
            {
                "status": "modified",
                "additions": 8,
                "raw_url": "https://github.com/apache/servicecomb-java-chassis/raw/9c734ac7691f638ddfb136410c8b65838e7bc594/swagger/swagger-invocation/invocation-core/src/main/java/org/apache/servicecomb/swagger/invocation/arguments/consumer/ConsumerArgumentSame.java",
                "contents_url": "https://api.github.com/repos/apache/servicecomb-java-chassis/contents/swagger/swagger-invocation/invocation-core/src/main/java/org/apache/servicecomb/swagger/invocation/arguments/consumer/ConsumerArgumentSame.java?ref=9c734ac7691f638ddfb136410c8b65838e7bc594",
                "filename": "swagger/swagger-invocation/invocation-core/src/main/java/org/apache/servicecomb/swagger/invocation/arguments/consumer/ConsumerArgumentSame.java",
                "deletions": 0,
                "sha": "eaad2cd743c2c23d8dca5cb446cfb40bb890e1aa",
                "blob_url": "https://github.com/apache/servicecomb-java-chassis/blob/9c734ac7691f638ddfb136410c8b65838e7bc594/swagger/swagger-invocation/invocation-core/src/main/java/org/apache/servicecomb/swagger/invocation/arguments/consumer/ConsumerArgumentSame.java",
                "patch": "@@ -20,8 +20,12 @@\n import org.apache.servicecomb.swagger.invocation.SwaggerInvocation;\n import org.apache.servicecomb.swagger.invocation.arguments.ArgumentMapper;\n import org.apache.servicecomb.swagger.invocation.converter.Converter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public final class ConsumerArgumentSame implements ArgumentMapper {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ConsumerArgumentSame.class);\n+\n   private int consumerIdx;\n \n   private int swaggerIdx;\n@@ -36,6 +40,10 @@ public ConsumerArgumentSame(int consumerIdx, int swaggerIdx, Converter converter\n \n   @Override\n   public void mapArgument(SwaggerInvocation invocation, Object[] consumerArguments) {\n+    if (null == consumerArguments[consumerIdx]) {\n+      LOGGER.debug(\"null argument is ignored, consumerIdx = [{}]\", consumerIdx);\n+      return;\n+    }\n     Object swaggerParam = converter.convert(consumerArguments[consumerIdx]);\n     invocation.setSwaggerArgument(swaggerIdx, swaggerParam);\n   }",
                "changes": 8
            },
            {
                "status": "added",
                "additions": 53,
                "raw_url": "https://github.com/apache/servicecomb-java-chassis/raw/9c734ac7691f638ddfb136410c8b65838e7bc594/swagger/swagger-invocation/invocation-core/src/test/java/org/apache/servicecomb/swagger/invocation/arguments/consumer/ConsumerArgumentSameTest.java",
                "contents_url": "https://api.github.com/repos/apache/servicecomb-java-chassis/contents/swagger/swagger-invocation/invocation-core/src/test/java/org/apache/servicecomb/swagger/invocation/arguments/consumer/ConsumerArgumentSameTest.java?ref=9c734ac7691f638ddfb136410c8b65838e7bc594",
                "filename": "swagger/swagger-invocation/invocation-core/src/test/java/org/apache/servicecomb/swagger/invocation/arguments/consumer/ConsumerArgumentSameTest.java",
                "deletions": 0,
                "sha": "1af5cd8ac1b200ee06a6b69f0a5e5881f959b003",
                "blob_url": "https://github.com/apache/servicecomb-java-chassis/blob/9c734ac7691f638ddfb136410c8b65838e7bc594/swagger/swagger-invocation/invocation-core/src/test/java/org/apache/servicecomb/swagger/invocation/arguments/consumer/ConsumerArgumentSameTest.java",
                "patch": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.servicecomb.swagger.invocation.arguments.consumer;\n+\n+import org.apache.servicecomb.swagger.invocation.SwaggerInvocation;\n+import org.apache.servicecomb.swagger.invocation.converter.Converter;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+public class ConsumerArgumentSameTest {\n+\n+  private Converter mockConverter = Mockito.mock(Converter.class);\n+\n+  private ConsumerArgumentSame consumerArgumentSame = new ConsumerArgumentSame(0, 0, mockConverter);\n+\n+  @Test\n+  public void testMapArgumentOnArgument() {\n+    SwaggerInvocation swaggerInvocation = Mockito.mock(SwaggerInvocation.class);\n+    String[] args = {\"testArg\"};\n+\n+    Mockito.when(mockConverter.convert(args[0])).thenReturn(args[0]);\n+\n+    consumerArgumentSame.mapArgument(swaggerInvocation, args);\n+\n+    Mockito.verify(mockConverter, Mockito.times(1)).convert(args[0]);\n+    Mockito.verify(swaggerInvocation, Mockito.times(1)).setSwaggerArgument(0, args[0]);\n+  }\n+\n+  @Test\n+  public void testMapArgumentOnArgumentIsNull() {\n+    SwaggerInvocation swaggerInvocation = Mockito.mock(SwaggerInvocation.class);\n+\n+    consumerArgumentSame.mapArgument(swaggerInvocation, new Object[1]);\n+\n+    Mockito.verify(mockConverter, Mockito.never()).convert(Mockito.anyObject());\n+    Mockito.verify(swaggerInvocation, Mockito.never()).setSwaggerArgument(Mockito.anyInt(), Mockito.anyObject());\n+  }\n+}",
                "changes": 53
            }
        ],
        "unit_tests": [
            "TestRestClientRequestImpl.java",
            "ConsumerArgumentSameTest.java",
            "TestVertxServerRequestToHttpServletRequest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "common/common-rest/src/test/java/org/apache/servicecomb/common/rest/codec/param/TestRestClientRequestImpl.java",
        "buggy_files": [
            "foundations/foundation-vertx/src/main/java/org/apache/servicecomb/foundation/vertx/http/VertxServerRequestToHttpServletRequest.java",
            "common/common-rest/src/main/java/org/apache/servicecomb/common/rest/codec/param/RestClientRequestImpl.java",
            "swagger/swagger-invocation/invocation-core/src/main/java/org/apache/servicecomb/swagger/invocation/arguments/consumer/ConsumerArgumentSame.java"
        ],
        "fixed": true
    }
]