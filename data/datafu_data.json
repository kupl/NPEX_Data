[
    {
        "repo": "datafu",
        "message": "DATAFU-68: SampleByKey can throw NullPointerException\n\nhttps://issues.apache.org/jira/browse/DATAFU-68\n\nSigned-off-by: Matthew Hayes <matthew.terence.hayes@gmail.com>",
        "commit": "https://github.com/apache/datafu/commit/2fef6eab201ef574d9c7ba8a54efac0b4c977c4d",
        "parent": "https://github.com/apache/datafu/commit/3b6554aa24634c7dd635900321f3f85db663db3e",
        "bug_id": "datafu_1",
        "file": [
            {
                "sha": "9c8cfd7995da4a87e2d378dd3d415b0a880e434e",
                "filename": "datafu-pig/src/main/java/datafu/pig/sampling/SampleByKey.java",
                "blob_url": "https://github.com/apache/datafu/blob/2fef6eab201ef574d9c7ba8a54efac0b4c977c4d/datafu-pig/src/main/java/datafu/pig/sampling/SampleByKey.java",
                "raw_url": "https://github.com/apache/datafu/raw/2fef6eab201ef574d9c7ba8a54efac0b4c977c4d/datafu-pig/src/main/java/datafu/pig/sampling/SampleByKey.java",
                "status": "modified",
                "changes": 29,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/datafu/contents/datafu-pig/src/main/java/datafu/pig/sampling/SampleByKey.java?ref=2fef6eab201ef574d9c7ba8a54efac0b4c977c4d",
                "patch": "@@ -39,24 +39,24 @@\n  *\n  * <p>\n  * The only required parameter is the sampling probability.  This may be followed\n- * by an optional seed value to control the random number generation.  \n+ * by an optional seed value to control the random number generation.\n  * </p>\n  *\n  * <p>\n- * SampleByKey will work deterministically as long as the same seed is provided.  \n+ * SampleByKey will work deterministically as long as the same seed is provided.\n  * </p>\n  *\n  * Example:\n  *\n  * <pre>\n  * {@code\n  * DEFINE SampleByKey datafu.pig.sampling.SampleByKey('0.5');\n- * \n+ *\n  *-- input: (A,1), (A,2), (A,3), (B,1), (B,3)\n- * \n+ *\n  * data = LOAD 'input' AS (A_id:chararray, B_id:chararray, C:int);\n  * output = FILTER data BY SampleByKey(A_id);\n- * \n+ *\n  * --output: (B,1), (B,3)\n  * }\n  * </pre>\n@@ -67,14 +67,14 @@\n public class SampleByKey extends FilterFunc\n {\n   final static int PRIME_NUMBER = 31;\n-  \n+\n   Integer seed = null;\n   double probability;\n-  \n+\n   public SampleByKey(String probability) {\n     this.probability = Double.parseDouble(probability);\n   }\n-  \n+\n   public SampleByKey(String probability, String salt) {\n     this(probability);\n     this.seed = salt.hashCode();\n@@ -83,20 +83,21 @@ public SampleByKey(String probability, String salt) {\n   @Override\n   public void setUDFContextSignature(String signature)\n   {\n-    if (this.seed == null)\n-      this.seed = signature.hashCode();\n+    if (this.seed == null && signature != null) {\n+        this.seed = signature.hashCode();\n+    }\n     super.setUDFContextSignature(signature);\n   }\n \n   @Override\n-  public Boolean exec(Tuple input) throws IOException \n+  public Boolean exec(Tuple input) throws IOException\n   {\n     int hashCode = 0;\n     for(int i=0; i<input.size(); i++) {\n       Object each = input.get(i);\n       hashCode = hashCode*PRIME_NUMBER + each.hashCode();\n     }\n-      \n+\n     try {\n       return intToRandomDouble(hashCode) <= probability;\n     }\n@@ -105,15 +106,15 @@ public Boolean exec(Tuple input) throws IOException\n       throw new RuntimeException(\"Exception on intToRandomDouble\");\n     }\n   }\n-  \n+\n   private Double intToRandomDouble(int input) throws Exception\n   {\n     MessageDigest hasher = MessageDigest.getInstance(\"sha-1\");\n \n     ByteBuffer b = ByteBuffer.allocate(4+4);\n     ByteBuffer b2 = ByteBuffer.allocate(20);\n \n-    b.putInt(seed);\n+    b.putInt(seed == null ? PRIME_NUMBER : seed);\n     b.putInt(input);\n     byte[] digest = hasher.digest(b.array());\n     b.clear();",
                "deletions": 14
            }
        ]
    },
    {
        "repo": "datafu",
        "message": "DATAFU-68: SampleByKey can throw NullPointerException\n\nhttps://issues.apache.org/jira/browse/DATAFU-68\n\nSigned-off-by: Matthew Hayes <matthew.terence.hayes@gmail.com>",
        "commit": "https://github.com/apache/datafu/commit/639268a6880a0a33c6a2426f069015ac9658f8f1",
        "parent": "https://github.com/apache/datafu/commit/b7bef9c888397763b736cc0147f1b8a469a0cd62",
        "bug_id": "datafu_2",
        "file": [
            {
                "sha": "9c8cfd7995da4a87e2d378dd3d415b0a880e434e",
                "filename": "datafu-pig/src/main/java/datafu/pig/sampling/SampleByKey.java",
                "blob_url": "https://github.com/apache/datafu/blob/639268a6880a0a33c6a2426f069015ac9658f8f1/datafu-pig/src/main/java/datafu/pig/sampling/SampleByKey.java",
                "raw_url": "https://github.com/apache/datafu/raw/639268a6880a0a33c6a2426f069015ac9658f8f1/datafu-pig/src/main/java/datafu/pig/sampling/SampleByKey.java",
                "status": "modified",
                "changes": 29,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/datafu/contents/datafu-pig/src/main/java/datafu/pig/sampling/SampleByKey.java?ref=639268a6880a0a33c6a2426f069015ac9658f8f1",
                "patch": "@@ -39,24 +39,24 @@\n  *\n  * <p>\n  * The only required parameter is the sampling probability.  This may be followed\n- * by an optional seed value to control the random number generation.  \n+ * by an optional seed value to control the random number generation.\n  * </p>\n  *\n  * <p>\n- * SampleByKey will work deterministically as long as the same seed is provided.  \n+ * SampleByKey will work deterministically as long as the same seed is provided.\n  * </p>\n  *\n  * Example:\n  *\n  * <pre>\n  * {@code\n  * DEFINE SampleByKey datafu.pig.sampling.SampleByKey('0.5');\n- * \n+ *\n  *-- input: (A,1), (A,2), (A,3), (B,1), (B,3)\n- * \n+ *\n  * data = LOAD 'input' AS (A_id:chararray, B_id:chararray, C:int);\n  * output = FILTER data BY SampleByKey(A_id);\n- * \n+ *\n  * --output: (B,1), (B,3)\n  * }\n  * </pre>\n@@ -67,14 +67,14 @@\n public class SampleByKey extends FilterFunc\n {\n   final static int PRIME_NUMBER = 31;\n-  \n+\n   Integer seed = null;\n   double probability;\n-  \n+\n   public SampleByKey(String probability) {\n     this.probability = Double.parseDouble(probability);\n   }\n-  \n+\n   public SampleByKey(String probability, String salt) {\n     this(probability);\n     this.seed = salt.hashCode();\n@@ -83,20 +83,21 @@ public SampleByKey(String probability, String salt) {\n   @Override\n   public void setUDFContextSignature(String signature)\n   {\n-    if (this.seed == null)\n-      this.seed = signature.hashCode();\n+    if (this.seed == null && signature != null) {\n+        this.seed = signature.hashCode();\n+    }\n     super.setUDFContextSignature(signature);\n   }\n \n   @Override\n-  public Boolean exec(Tuple input) throws IOException \n+  public Boolean exec(Tuple input) throws IOException\n   {\n     int hashCode = 0;\n     for(int i=0; i<input.size(); i++) {\n       Object each = input.get(i);\n       hashCode = hashCode*PRIME_NUMBER + each.hashCode();\n     }\n-      \n+\n     try {\n       return intToRandomDouble(hashCode) <= probability;\n     }\n@@ -105,15 +106,15 @@ public Boolean exec(Tuple input) throws IOException\n       throw new RuntimeException(\"Exception on intToRandomDouble\");\n     }\n   }\n-  \n+\n   private Double intToRandomDouble(int input) throws Exception\n   {\n     MessageDigest hasher = MessageDigest.getInstance(\"sha-1\");\n \n     ByteBuffer b = ByteBuffer.allocate(4+4);\n     ByteBuffer b2 = ByteBuffer.allocate(20);\n \n-    b.putInt(seed);\n+    b.putInt(seed == null ? PRIME_NUMBER : seed);\n     b.putInt(input);\n     byte[] digest = hasher.digest(b.array());\n     b.clear();",
                "deletions": 14
            }
        ]
    },
    {
        "repo": "datafu",
        "message": "Merge pull request #22 from njwhite/master\n\nSetIntersect shouldn't throw NPEs when either of the input bags are empty",
        "commit": "https://github.com/apache/datafu/commit/4957df689048a9d9e44628e2b12c0c7771346810",
        "parent": "https://github.com/apache/datafu/commit/df85e7196f0629abeea4a82dbfc5f9bb7729956b",
        "bug_id": "datafu_3",
        "file": [
            {
                "sha": "13321a4acb724fab9c6d3d5b2ce0776903f807d4",
                "filename": "src/java/datafu/pig/bags/sets/SetIntersect.java",
                "blob_url": "https://github.com/apache/datafu/blob/4957df689048a9d9e44628e2b12c0c7771346810/src/java/datafu/pig/bags/sets/SetIntersect.java",
                "raw_url": "https://github.com/apache/datafu/raw/4957df689048a9d9e44628e2b12c0c7771346810/src/java/datafu/pig/bags/sets/SetIntersect.java",
                "status": "modified",
                "changes": 28,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/datafu/contents/src/java/datafu/pig/bags/sets/SetIntersect.java?ref=4957df689048a9d9e44628e2b12c0c7771346810",
                "patch": "@@ -1,19 +1,19 @@\n /*\n  * Copyright 2010 LinkedIn, Inc\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n  * use this file except in compliance with the License. You may obtain a copy of\n  * the License at\n- * \n+ *\n  * http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n  * License for the specific language governing permissions and limitations under\n  * the License.\n  */\n- \n+\n package datafu.pig.bags.sets;\n \n import java.io.IOException;\n@@ -32,7 +32,7 @@\n  * <pre>\n  * {@code\n  * define SetIntersect datafu.pig.bags.sets.SetIntersect();\n- * \n+ *\n  * -- input:\n  * -- ({(1,10),(2,20),(3,30),(4,40)},{(2,20),(4,40),(8,80)})\n  * input = LOAD 'input' AS (B1:bag{T:tuple(val1:int,val2:int)},B2:bag{T:tuple(val1:int,val2:int)});\n@@ -50,9 +50,8 @@\n public class SetIntersect extends SetOperationsBase\n {\n   private static final BagFactory bagFactory = BagFactory.getInstance();\n-  private static final TupleFactory tupleFactory = TupleFactory.getInstance();\n \n-  class pair implements Comparable<pair>\n+  static class pair implements Comparable<pair>\n   {\n     final Iterator<Tuple> it;\n     Tuple data;\n@@ -62,7 +61,7 @@\n       this.it = it;\n       this.data = it.next();\n     }\n-    \n+\n     @Override\n     public int compareTo(pair o)\n     {\n@@ -78,8 +77,9 @@ public int compareTo(pair o)\n       Object o = input.get(i);\n       if (!(o instanceof DataBag))\n         throw new RuntimeException(\"parameters must be databags\");\n-      DataBag inputBag = (DataBag) o;\n-      pq.add(new pair(inputBag.iterator()));\n+      Iterator<Tuple> inputIterator= ((DataBag) o).iterator();\n+      if(inputIterator.hasNext())\n+        pq.add(new pair(inputIterator));\n     }\n     return pq;\n   }\n@@ -93,20 +93,22 @@ public boolean all_equal(PriorityQueue<pair> pq)\n     }\n     return true;\n   }\n-  \n+\n   @Override\n   public DataBag exec(Tuple input) throws IOException\n   {\n     DataBag outputBag = bagFactory.newDefaultBag();\n     PriorityQueue<pair> pq = load_bags(input);\n+    if(pq.size() != input.size())\n+      return outputBag; // one or more input bags were empty\n     Tuple last_data = null;\n-    \n+\n     while (true) {\n       if (pq.peek().data.compareTo(last_data) != 0 && all_equal(pq)) {\n         last_data = pq.peek().data;\n         outputBag.add(last_data);\n       }\n-            \n+\n       pair p = pq.poll();\n       if (!p.it.hasNext())\n         break;",
                "deletions": 13
            },
            {
                "sha": "32e24d5a55b288aff0d3684e21f1a9f9e0c65e5f",
                "filename": "test/pig/datafu/test/pig/bags/sets/SetTests.java",
                "blob_url": "https://github.com/apache/datafu/blob/4957df689048a9d9e44628e2b12c0c7771346810/test/pig/datafu/test/pig/bags/sets/SetTests.java",
                "raw_url": "https://github.com/apache/datafu/raw/4957df689048a9d9e44628e2b12c0c7771346810/test/pig/datafu/test/pig/bags/sets/SetTests.java",
                "status": "modified",
                "changes": 18,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/datafu/contents/test/pig/datafu/test/pig/bags/sets/SetTests.java?ref=4957df689048a9d9e44628e2b12c0c7771346810",
                "patch": "@@ -1,8 +1,16 @@\n package datafu.test.pig.bags.sets;\n \n+import java.util.Arrays;\n+\n+import org.apache.pig.data.BagFactory;\n+import org.apache.pig.data.DataBag;\n+import org.apache.pig.data.Tuple;\n+import org.apache.pig.data.TupleFactory;\n import org.apache.pig.pigunit.PigTest;\n+import org.testng.Assert;\n import org.testng.annotations.Test;\n \n+import datafu.pig.bags.sets.SetIntersect;\n import datafu.test.pig.PigTests;\n \n public class SetTests extends PigTests\n@@ -25,6 +33,16 @@ public void setIntersectTest() throws Exception\n     test.assertOutput(\"data\",input,\"data2\",output);\n   }\n   \n+  @Test\n+  public void testIntersectWithNullTuples() throws Exception {\n+     DataBag one = BagFactory.getInstance().newDefaultBag();\n+     DataBag two = BagFactory.getInstance().newDefaultBag();\n+\n+     Tuple input = TupleFactory.getInstance().newTuple(Arrays.asList(one, two));\n+     DataBag output = new SetIntersect().exec(input);\n+     Assert.assertEquals(0, output.size());\n+  }\n+\n   @Test(expectedExceptions=org.apache.pig.impl.logicalLayer.FrontendException.class)\n   public void setIntersectOutOfOrderTest() throws Exception\n   {",
                "deletions": 0
            }
        ]
    }
]