[{"commit": "https://github.com/apache/datafu/commit/4957df689048a9d9e44628e2b12c0c7771346810", "parent": "https://github.com/apache/datafu/commit/df85e7196f0629abeea4a82dbfc5f9bb7729956b", "message": "Merge pull request #22 from njwhite/master\n\nSetIntersect shouldn't throw NPEs when either of the input bags are empty", "bug_id": "datafu_1", "file": [{"additions": 15, "raw_url": "https://github.com/apache/datafu/raw/4957df689048a9d9e44628e2b12c0c7771346810/src/java/datafu/pig/bags/sets/SetIntersect.java", "blob_url": "https://github.com/apache/datafu/blob/4957df689048a9d9e44628e2b12c0c7771346810/src/java/datafu/pig/bags/sets/SetIntersect.java", "sha": "13321a4acb724fab9c6d3d5b2ce0776903f807d4", "changes": 28, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/datafu/contents/src/java/datafu/pig/bags/sets/SetIntersect.java?ref=4957df689048a9d9e44628e2b12c0c7771346810", "patch": "@@ -1,19 +1,19 @@\n /*\n  * Copyright 2010 LinkedIn, Inc\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n  * use this file except in compliance with the License. You may obtain a copy of\n  * the License at\n- * \n+ *\n  * http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n  * License for the specific language governing permissions and limitations under\n  * the License.\n  */\n- \n+\n package datafu.pig.bags.sets;\n \n import java.io.IOException;\n@@ -32,7 +32,7 @@\n  * <pre>\n  * {@code\n  * define SetIntersect datafu.pig.bags.sets.SetIntersect();\n- * \n+ *\n  * -- input:\n  * -- ({(1,10),(2,20),(3,30),(4,40)},{(2,20),(4,40),(8,80)})\n  * input = LOAD 'input' AS (B1:bag{T:tuple(val1:int,val2:int)},B2:bag{T:tuple(val1:int,val2:int)});\n@@ -50,9 +50,8 @@\n public class SetIntersect extends SetOperationsBase\n {\n   private static final BagFactory bagFactory = BagFactory.getInstance();\n-  private static final TupleFactory tupleFactory = TupleFactory.getInstance();\n \n-  class pair implements Comparable<pair>\n+  static class pair implements Comparable<pair>\n   {\n     final Iterator<Tuple> it;\n     Tuple data;\n@@ -62,7 +61,7 @@\n       this.it = it;\n       this.data = it.next();\n     }\n-    \n+\n     @Override\n     public int compareTo(pair o)\n     {\n@@ -78,8 +77,9 @@ public int compareTo(pair o)\n       Object o = input.get(i);\n       if (!(o instanceof DataBag))\n         throw new RuntimeException(\"parameters must be databags\");\n-      DataBag inputBag = (DataBag) o;\n-      pq.add(new pair(inputBag.iterator()));\n+      Iterator<Tuple> inputIterator= ((DataBag) o).iterator();\n+      if(inputIterator.hasNext())\n+        pq.add(new pair(inputIterator));\n     }\n     return pq;\n   }\n@@ -93,20 +93,22 @@ public boolean all_equal(PriorityQueue<pair> pq)\n     }\n     return true;\n   }\n-  \n+\n   @Override\n   public DataBag exec(Tuple input) throws IOException\n   {\n     DataBag outputBag = bagFactory.newDefaultBag();\n     PriorityQueue<pair> pq = load_bags(input);\n+    if(pq.size() != input.size())\n+      return outputBag; // one or more input bags were empty\n     Tuple last_data = null;\n-    \n+\n     while (true) {\n       if (pq.peek().data.compareTo(last_data) != 0 && all_equal(pq)) {\n         last_data = pq.peek().data;\n         outputBag.add(last_data);\n       }\n-            \n+\n       pair p = pq.poll();\n       if (!p.it.hasNext())\n         break;", "filename": "src/java/datafu/pig/bags/sets/SetIntersect.java"}, {"additions": 18, "raw_url": "https://github.com/apache/datafu/raw/4957df689048a9d9e44628e2b12c0c7771346810/test/pig/datafu/test/pig/bags/sets/SetTests.java", "blob_url": "https://github.com/apache/datafu/blob/4957df689048a9d9e44628e2b12c0c7771346810/test/pig/datafu/test/pig/bags/sets/SetTests.java", "sha": "32e24d5a55b288aff0d3684e21f1a9f9e0c65e5f", "changes": 18, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/datafu/contents/test/pig/datafu/test/pig/bags/sets/SetTests.java?ref=4957df689048a9d9e44628e2b12c0c7771346810", "patch": "@@ -1,8 +1,16 @@\n package datafu.test.pig.bags.sets;\n \n+import java.util.Arrays;\n+\n+import org.apache.pig.data.BagFactory;\n+import org.apache.pig.data.DataBag;\n+import org.apache.pig.data.Tuple;\n+import org.apache.pig.data.TupleFactory;\n import org.apache.pig.pigunit.PigTest;\n+import org.testng.Assert;\n import org.testng.annotations.Test;\n \n+import datafu.pig.bags.sets.SetIntersect;\n import datafu.test.pig.PigTests;\n \n public class SetTests extends PigTests\n@@ -25,6 +33,16 @@ public void setIntersectTest() throws Exception\n     test.assertOutput(\"data\",input,\"data2\",output);\n   }\n   \n+  @Test\n+  public void testIntersectWithNullTuples() throws Exception {\n+     DataBag one = BagFactory.getInstance().newDefaultBag();\n+     DataBag two = BagFactory.getInstance().newDefaultBag();\n+\n+     Tuple input = TupleFactory.getInstance().newTuple(Arrays.asList(one, two));\n+     DataBag output = new SetIntersect().exec(input);\n+     Assert.assertEquals(0, output.size());\n+  }\n+\n   @Test(expectedExceptions=org.apache.pig.impl.logicalLayer.FrontendException.class)\n   public void setIntersectOutOfOrderTest() throws Exception\n   {", "filename": "test/pig/datafu/test/pig/bags/sets/SetTests.java"}], "repo": "datafu"}]
