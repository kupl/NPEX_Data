[
    {
        "repo": "dubbo",
        "commit": "https://github.com/apache/dubbo/commit/6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
        "bug_id": "dubbo_6938d48",
        "message": "Code format (#2662)\n\n* NullPointerException\r\n\r\n* code rule",
        "parent": "https://github.com/apache/dubbo/commit/dd950acaebb67aab19b2303a6ba11c6904d25194",
        "patched_files": [
            "SimpleDataStore.java",
            "StreamUtils.java",
            "Proxy.java",
            "PojoUtils.java",
            "Log.java",
            "EchoFilter.java",
            "JSON.java",
            "ReflectUtils.java",
            "UnsafeStringReader.java",
            "Stack.java",
            "DubboProtocol.java",
            "IOUtils.java",
            "StringUtils.java",
            "FastJsonObjectInput.java",
            "JdkCompiler.java",
            "JSONReader.java",
            "UrlUtils.java",
            "HeaderExchangeHandler.java",
            "NettyClient.java",
            "Mixin.java",
            "Wrapper.java",
            "AbstractClusterInvoker.java",
            "JavaBeanSerializeUtil.java",
            "RedisProtocol.java",
            "URL.java",
            "NetUtils.java",
            "ReferenceConfig.java",
            "AbstractConfig.java",
            "RegistryConfig.java",
            "ReferenceConfigCache.java",
            "ClassGenerator.java",
            "ThriftProtocol.java",
            "JSONWriter.java",
            "ExtensionLoader.java",
            "LogUtil.java",
            "UnsafeByteArrayOutputStream.java",
            "UnsafeStringWriter.java",
            "Bytes.java",
            "AtomicPositiveInteger.java",
            "UnsafeByteArrayInputStream.java",
            "CollectionUtils.java",
            "ExchangeCodec.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 6,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvoker.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvoker.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvoker.java",
                "deletions": 4,
                "sha": "e8b80595e7da99d80e9023a5acc86a98ea448860",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvoker.java",
                "patch": "@@ -26,10 +26,10 @@\n import org.apache.dubbo.common.utils.NetUtils;\r\n import org.apache.dubbo.rpc.Invocation;\r\n import org.apache.dubbo.rpc.Invoker;\r\n-import org.apache.dubbo.rpc.RpcContext;\r\n-import org.apache.dubbo.rpc.RpcInvocation;\r\n import org.apache.dubbo.rpc.Result;\r\n+import org.apache.dubbo.rpc.RpcContext;\r\n import org.apache.dubbo.rpc.RpcException;\r\n+import org.apache.dubbo.rpc.RpcInvocation;\r\n import org.apache.dubbo.rpc.cluster.Directory;\r\n import org.apache.dubbo.rpc.cluster.LoadBalance;\r\n import org.apache.dubbo.rpc.support.RpcUtils;\r\n@@ -138,10 +138,12 @@ public void destroy() {\n     }\r\n \r\n     private Invoker<T> doSelect(LoadBalance loadbalance, Invocation invocation, List<Invoker<T>> invokers, List<Invoker<T>> selected) throws RpcException {\r\n-        if (invokers == null || invokers.isEmpty())\r\n+        if (invokers == null || invokers.isEmpty()) {\r\n             return null;\r\n-        if (invokers.size() == 1)\r\n+        }\r\n+        if (invokers.size() == 1) {\r\n             return invokers.get(0);\r\n+        }\r\n         Invoker<T> invoker = loadbalance.select(invokers, getUrl(), invocation);\r\n \r\n         //If the `invoker` is in the  `selected` or invoker is unavailable && availablecheck is true, reselect.\r",
                "changes": 10
            },
            {
                "status": "modified",
                "additions": 80,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/URL.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/URL.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/URL.java",
                "deletions": 36,
                "sha": "eba72e850b3bcde3941e3aabbee1438147be694f",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/URL.java",
                "patch": "@@ -206,14 +206,18 @@ public static URL valueOf(String url) {\n         }\r\n         i = url.indexOf(\"://\");\r\n         if (i >= 0) {\r\n-            if (i == 0) throw new IllegalStateException(\"url missing protocol: \\\"\" + url + \"\\\"\");\r\n+            if (i == 0) {\r\n+                throw new IllegalStateException(\"url missing protocol: \\\"\" + url + \"\\\"\");\r\n+            }\r\n             protocol = url.substring(0, i);\r\n             url = url.substring(i + 3);\r\n         } else {\r\n             // case: file:/path/to/file.txt\r\n             i = url.indexOf(\":/\");\r\n             if (i >= 0) {\r\n-                if (i == 0) throw new IllegalStateException(\"url missing protocol: \\\"\" + url + \"\\\"\");\r\n+                if (i == 0) {\r\n+                    throw new IllegalStateException(\"url missing protocol: \\\"\" + url + \"\\\"\");\r\n+                }\r\n                 protocol = url.substring(0, i);\r\n                 url = url.substring(i + 1);\r\n             }\r\n@@ -246,7 +250,9 @@ public static URL valueOf(String url) {\n                 url = url.substring(0, i);\r\n             }\r\n         }\r\n-        if (url.length() > 0) host = url;\r\n+        if (url.length() > 0) {\r\n+            host = url;\r\n+        }\r\n         return new URL(protocol, username, password, host, port, path, parameters);\r\n     }\r\n \r\n@@ -915,17 +921,23 @@ public URL addParameter(String key, double value) {\n     }\r\n \r\n     public URL addParameter(String key, Enum<?> value) {\r\n-        if (value == null) return this;\r\n+        if (value == null) {\r\n+            return this;\r\n+        }\r\n         return addParameter(key, String.valueOf(value));\r\n     }\r\n \r\n     public URL addParameter(String key, Number value) {\r\n-        if (value == null) return this;\r\n+        if (value == null) {\r\n+            return this;\r\n+        }\r\n         return addParameter(key, String.valueOf(value));\r\n     }\r\n \r\n     public URL addParameter(String key, CharSequence value) {\r\n-        if (value == null || value.length() == 0) return this;\r\n+        if (value == null || value.length() == 0) {\r\n+            return this;\r\n+        }\r\n         return addParameter(key, String.valueOf(value));\r\n     }\r\n \r\n@@ -984,7 +996,9 @@ public URL addParameters(Map<String, String> parameters) {\n             }\r\n         }\r\n         // return immediately if there's no change\r\n-        if (hasAndEqual) return this;\r\n+        if (hasAndEqual) {\r\n+            return this;\r\n+        }\r\n \r\n         Map<String, String> map = new HashMap<String, String>(getParameters());\r\n         map.putAll(parameters);\r\n@@ -1055,35 +1069,47 @@ public URL clearParameters() {\n     }\r\n \r\n     public String getRawParameter(String key) {\r\n-        if (\"protocol\".equals(key))\r\n+        if (\"protocol\".equals(key)) {\r\n             return protocol;\r\n-        if (\"username\".equals(key))\r\n+        }\r\n+        if (\"username\".equals(key)) {\r\n             return username;\r\n-        if (\"password\".equals(key))\r\n+        }\r\n+        if (\"password\".equals(key)) {\r\n             return password;\r\n-        if (\"host\".equals(key))\r\n+        }\r\n+        if (\"host\".equals(key)) {\r\n             return host;\r\n-        if (\"port\".equals(key))\r\n+        }\r\n+        if (\"port\".equals(key)) {\r\n             return String.valueOf(port);\r\n-        if (\"path\".equals(key))\r\n+        }\r\n+        if (\"path\".equals(key)) {\r\n             return path;\r\n+        }\r\n         return getParameter(key);\r\n     }\r\n \r\n     public Map<String, String> toMap() {\r\n         Map<String, String> map = new HashMap<String, String>(parameters);\r\n-        if (protocol != null)\r\n+        if (protocol != null) {\r\n             map.put(\"protocol\", protocol);\r\n-        if (username != null)\r\n+        }\r\n+        if (username != null) {\r\n             map.put(\"username\", username);\r\n-        if (password != null)\r\n+        }\r\n+        if (password != null) {\r\n             map.put(\"password\", password);\r\n-        if (host != null)\r\n+        }\r\n+        if (host != null) {\r\n             map.put(\"host\", host);\r\n-        if (port > 0)\r\n+        }\r\n+        if (port > 0) {\r\n             map.put(\"port\", String.valueOf(port));\r\n-        if (path != null)\r\n+        }\r\n+        if (path != null) {\r\n             map.put(\"path\", path);\r\n+        }\r\n         return map;\r\n     }\r\n \r\n@@ -1218,7 +1244,9 @@ public InetSocketAddress toInetSocketAddress() {\n \r\n     public String getServiceKey() {\r\n         String inf = getServiceInterface();\r\n-        if (inf == null) return null;\r\n+        if (inf == null) {\r\n+            return null;\r\n+        }\r\n         StringBuilder buf = new StringBuilder();\r\n         String group = getParameter(Constants.GROUP_KEY);\r\n         if (group != null && group.length() > 0) {\r\n@@ -1359,45 +1387,61 @@ public int hashCode() {\n \r\n     @Override\r\n     public boolean equals(Object obj) {\r\n-        if (this == obj)\r\n+        if (this == obj) {\r\n             return true;\r\n-        if (obj == null)\r\n+        }\r\n+        if (obj == null) {\r\n             return false;\r\n-        if (getClass() != obj.getClass())\r\n+        }\r\n+        if (getClass() != obj.getClass()) {\r\n             return false;\r\n+        }\r\n         URL other = (URL) obj;\r\n         if (host == null) {\r\n-            if (other.host != null)\r\n+            if (other.host != null) {\r\n                 return false;\r\n-        } else if (!host.equals(other.host))\r\n+            }\r\n+        } else if (!host.equals(other.host)) {\r\n             return false;\r\n+        }\r\n         if (parameters == null) {\r\n-            if (other.parameters != null)\r\n+            if (other.parameters != null) {\r\n                 return false;\r\n-        } else if (!parameters.equals(other.parameters))\r\n+            }\r\n+        } else if (!parameters.equals(other.parameters)) {\r\n             return false;\r\n+        }\r\n         if (password == null) {\r\n-            if (other.password != null)\r\n+            if (other.password != null) {\r\n                 return false;\r\n-        } else if (!password.equals(other.password))\r\n+            }\r\n+        } else if (!password.equals(other.password)) {\r\n             return false;\r\n+        }\r\n         if (path == null) {\r\n-            if (other.path != null)\r\n+            if (other.path != null) {\r\n                 return false;\r\n-        } else if (!path.equals(other.path))\r\n+            }\r\n+        } else if (!path.equals(other.path)) {\r\n             return false;\r\n-        if (port != other.port)\r\n+        }\r\n+        if (port != other.port) {\r\n             return false;\r\n+        }\r\n         if (protocol == null) {\r\n-            if (other.protocol != null)\r\n+            if (other.protocol != null) {\r\n                 return false;\r\n-        } else if (!protocol.equals(other.protocol))\r\n+            }\r\n+        } else if (!protocol.equals(other.protocol)) {\r\n             return false;\r\n+        }\r\n         if (username == null) {\r\n-            if (other.username != null)\r\n+            if (other.username != null) {\r\n                 return false;\r\n-        } else if (!username.equals(other.username))\r\n+            }\r\n+        } else if (!username.equals(other.username)) {\r\n             return false;\r\n+        }\r\n         return true;\r\n     }\r\n \r",
                "changes": 116
            },
            {
                "status": "modified",
                "additions": 10,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/beanutil/JavaBeanSerializeUtil.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/beanutil/JavaBeanSerializeUtil.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/beanutil/JavaBeanSerializeUtil.java",
                "deletions": 8,
                "sha": "a1bdc7af5eb691fb7b6325c2f0f3ed1af8618f89",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/beanutil/JavaBeanSerializeUtil.java",
                "patch": "@@ -399,14 +399,16 @@ private static Object instantiateForDeserialize(JavaBeanDescriptor beanDescripto\n             }\n             result = Array.newInstance(componentType, beanDescriptor.propertySize());\n             cache.put(beanDescriptor, result);\n-        } else try {\n-            Class<?> cl = name2Class(loader, beanDescriptor.getClassName());\n-            result = instantiate(cl);\n-            cache.put(beanDescriptor, result);\n-        } catch (ClassNotFoundException e) {\n-            throw new RuntimeException(e.getMessage(), e);\n-        } catch (Exception e) {\n-            throw new RuntimeException(e.getMessage(), e);\n+        } else {\n+            try {\n+                Class<?> cl = name2Class(loader, beanDescriptor.getClassName());\n+                result = instantiate(cl);\n+                cache.put(beanDescriptor, result);\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e.getMessage(), e);\n+            } catch (Exception e) {\n+                throw new RuntimeException(e.getMessage(), e);\n+            }\n         }\n \n         return result;",
                "changes": 18
            },
            {
                "status": "modified",
                "additions": 390,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/ClassGenerator.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/ClassGenerator.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/ClassGenerator.java",
                "deletions": 390,
                "sha": "c044c7b297a0ed1f7fd98e225b8d355b38c3ffd4",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/ClassGenerator.java",
                "patch": "@@ -1,391 +1,391 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one or more\r\n- * contributor license agreements.  See the NOTICE file distributed with\r\n- * this work for additional information regarding copyright ownership.\r\n- * The ASF licenses this file to You under the Apache License, Version 2.0\r\n- * (the \"License\"); you may not use this file except in compliance with\r\n- * the License.  You may obtain a copy of the License at\r\n- *\r\n- *     http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.apache.dubbo.common.bytecode;\r\n-\r\n-import org.apache.dubbo.common.utils.ClassHelper;\r\n-import org.apache.dubbo.common.utils.ReflectUtils;\r\n-\r\n-import javassist.CannotCompileException;\r\n-import javassist.ClassPool;\r\n-import javassist.CtClass;\r\n-import javassist.CtConstructor;\r\n-import javassist.CtField;\r\n-import javassist.CtMethod;\r\n-import javassist.CtNewConstructor;\r\n-import javassist.CtNewMethod;\r\n-import javassist.LoaderClassPath;\r\n-import javassist.NotFoundException;\r\n-\r\n-import java.lang.reflect.Constructor;\r\n-import java.lang.reflect.Method;\r\n-import java.lang.reflect.Modifier;\r\n-import java.security.ProtectionDomain;\r\n-import java.util.ArrayList;\r\n-import java.util.HashSet;\r\n-import java.util.LinkedList;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-import java.util.concurrent.ConcurrentHashMap;\r\n-import java.util.concurrent.atomic.AtomicLong;\r\n-\r\n-/**\r\n- * ClassGenerator\r\n- */\r\n-public final class ClassGenerator {\r\n-\r\n-    private static final AtomicLong CLASS_NAME_COUNTER = new AtomicLong(0);\r\n-    private static final String SIMPLE_NAME_TAG = \"<init>\";\r\n-    private static final Map<ClassLoader, ClassPool> POOL_MAP = new ConcurrentHashMap<ClassLoader, ClassPool>(); //ClassLoader - ClassPool\r\n-    private ClassPool mPool;\r\n-    private CtClass mCtc;\r\n-    private String mClassName;\r\n-    private String mSuperClass;\r\n-    private Set<String> mInterfaces;\r\n-    private List<String> mFields;\r\n-    private List<String> mConstructors;\r\n-    private List<String> mMethods;\r\n-    private Map<String, Method> mCopyMethods; // <method desc,method instance>\r\n-    private Map<String, Constructor<?>> mCopyConstructors; // <constructor desc,constructor instance>\r\n-    private boolean mDefaultConstructor = false;\r\n-\r\n-    private ClassGenerator() {\r\n-    }\r\n-\r\n-    private ClassGenerator(ClassPool pool) {\r\n-        mPool = pool;\r\n-    }\r\n-\r\n-    public static ClassGenerator newInstance() {\r\n-        return new ClassGenerator(getClassPool(Thread.currentThread().getContextClassLoader()));\r\n-    }\r\n-\r\n-    public static ClassGenerator newInstance(ClassLoader loader) {\r\n-        return new ClassGenerator(getClassPool(loader));\r\n-    }\r\n-\r\n-    public static boolean isDynamicClass(Class<?> cl) {\r\n-        return ClassGenerator.DC.class.isAssignableFrom(cl);\r\n-    }\r\n-\r\n-    public static ClassPool getClassPool(ClassLoader loader) {\r\n-        if (loader == null) {\r\n-            return ClassPool.getDefault();\r\n-        }\r\n-\r\n-        ClassPool pool = POOL_MAP.get(loader);\r\n-        if (pool == null) {\r\n-            pool = new ClassPool(true);\r\n-            pool.appendClassPath(new LoaderClassPath(loader));\r\n-            POOL_MAP.put(loader, pool);\r\n-        }\r\n-        return pool;\r\n-    }\r\n-\r\n-    private static String modifier(int mod) {\r\n-        StringBuilder modifier = new StringBuilder();\r\n-        if (Modifier.isPublic(mod)) {\r\n-            modifier.append(\"public\");\r\n-        }\r\n-        if (Modifier.isProtected(mod)) {\r\n-            modifier.append(\"protected\");\r\n-        }\r\n-        if (Modifier.isPrivate(mod)) {\r\n-            modifier.append(\"private\");\r\n-        }\r\n-\r\n-        if (Modifier.isStatic(mod)) {\r\n-            modifier.append(\" static\");\r\n-        }\r\n-        if (Modifier.isVolatile(mod)) {\r\n-            modifier.append(\" volatile\");\r\n-        }\r\n-\r\n-        return modifier.toString();\r\n-    }\r\n-\r\n-    public String getClassName() {\r\n-        return mClassName;\r\n-    }\r\n-\r\n-    public ClassGenerator setClassName(String name) {\r\n-        mClassName = name;\r\n-        return this;\r\n-    }\r\n-\r\n-    public ClassGenerator addInterface(String cn) {\r\n-        if (mInterfaces == null) {\r\n-            mInterfaces = new HashSet<String>();\r\n-        }\r\n-        mInterfaces.add(cn);\r\n-        return this;\r\n-    }\r\n-\r\n-    public ClassGenerator addInterface(Class<?> cl) {\r\n-        return addInterface(cl.getName());\r\n-    }\r\n-\r\n-    public ClassGenerator setSuperClass(String cn) {\r\n-        mSuperClass = cn;\r\n-        return this;\r\n-    }\r\n-\r\n-    public ClassGenerator setSuperClass(Class<?> cl) {\r\n-        mSuperClass = cl.getName();\r\n-        return this;\r\n-    }\r\n-\r\n-    public ClassGenerator addField(String code) {\r\n-        if (mFields == null) {\r\n-            mFields = new ArrayList<String>();\r\n-        }\r\n-        mFields.add(code);\r\n-        return this;\r\n-    }\r\n-\r\n-    public ClassGenerator addField(String name, int mod, Class<?> type) {\r\n-        return addField(name, mod, type, null);\r\n-    }\r\n-\r\n-    public ClassGenerator addField(String name, int mod, Class<?> type, String def) {\r\n-        StringBuilder sb = new StringBuilder();\r\n-        sb.append(modifier(mod)).append(' ').append(ReflectUtils.getName(type)).append(' ');\r\n-        sb.append(name);\r\n-        if (def != null && def.length() > 0) {\r\n-            sb.append('=');\r\n-            sb.append(def);\r\n-        }\r\n-        sb.append(';');\r\n-        return addField(sb.toString());\r\n-    }\r\n-\r\n-    public ClassGenerator addMethod(String code) {\r\n-        if (mMethods == null) {\r\n-            mMethods = new ArrayList<String>();\r\n-        }\r\n-        mMethods.add(code);\r\n-        return this;\r\n-    }\r\n-\r\n-    public ClassGenerator addMethod(String name, int mod, Class<?> rt, Class<?>[] pts, String body) {\r\n-        return addMethod(name, mod, rt, pts, null, body);\r\n-    }\r\n-\r\n-    public ClassGenerator addMethod(String name, int mod, Class<?> rt, Class<?>[] pts, Class<?>[] ets,\r\n-                                    String body) {\r\n-        StringBuilder sb = new StringBuilder();\r\n-        sb.append(modifier(mod)).append(' ').append(ReflectUtils.getName(rt)).append(' ').append(name);\r\n-        sb.append('(');\r\n-        for (int i = 0; i < pts.length; i++) {\r\n-            if (i > 0) {\r\n-                sb.append(',');\r\n-            }\r\n-            sb.append(ReflectUtils.getName(pts[i]));\r\n-            sb.append(\" arg\").append(i);\r\n-        }\r\n-        sb.append(')');\r\n-        if (ets != null && ets.length > 0) {\r\n-            sb.append(\" throws \");\r\n-            for (int i = 0; i < ets.length; i++) {\r\n-                if (i > 0) {\r\n-                    sb.append(',');\r\n-                }\r\n-                sb.append(ReflectUtils.getName(ets[i]));\r\n-            }\r\n-        }\r\n-        sb.append('{').append(body).append('}');\r\n-        return addMethod(sb.toString());\r\n-    }\r\n-\r\n-    public ClassGenerator addMethod(Method m) {\r\n-        addMethod(m.getName(), m);\r\n-        return this;\r\n-    }\r\n-\r\n-    public ClassGenerator addMethod(String name, Method m) {\r\n-        String desc = name + ReflectUtils.getDescWithoutMethodName(m);\r\n-        addMethod(':' + desc);\r\n-        if (mCopyMethods == null) {\r\n-            mCopyMethods = new ConcurrentHashMap<String, Method>(8);\r\n-        }\r\n-        mCopyMethods.put(desc, m);\r\n-        return this;\r\n-    }\r\n-\r\n-    public ClassGenerator addConstructor(String code) {\r\n-        if (mConstructors == null) {\r\n-            mConstructors = new LinkedList<String>();\r\n-        }\r\n-        mConstructors.add(code);\r\n-        return this;\r\n-    }\r\n-\r\n-    public ClassGenerator addConstructor(int mod, Class<?>[] pts, String body) {\r\n-        return addConstructor(mod, pts, null, body);\r\n-    }\r\n-\r\n-    public ClassGenerator addConstructor(int mod, Class<?>[] pts, Class<?>[] ets, String body) {\r\n-        StringBuilder sb = new StringBuilder();\r\n-        sb.append(modifier(mod)).append(' ').append(SIMPLE_NAME_TAG);\r\n-        sb.append('(');\r\n-        for (int i = 0; i < pts.length; i++) {\r\n-            if (i > 0) {\r\n-                sb.append(',');\r\n-            }\r\n-            sb.append(ReflectUtils.getName(pts[i]));\r\n-            sb.append(\" arg\").append(i);\r\n-        }\r\n-        sb.append(')');\r\n-        if (ets != null && ets.length > 0) {\r\n-            sb.append(\" throws \");\r\n-            for (int i = 0; i < ets.length; i++) {\r\n-                if (i > 0) {\r\n-                    sb.append(',');\r\n-                }\r\n-                sb.append(ReflectUtils.getName(ets[i]));\r\n-            }\r\n-        }\r\n-        sb.append('{').append(body).append('}');\r\n-        return addConstructor(sb.toString());\r\n-    }\r\n-\r\n-    public ClassGenerator addConstructor(Constructor<?> c) {\r\n-        String desc = ReflectUtils.getDesc(c);\r\n-        addConstructor(\":\" + desc);\r\n-        if (mCopyConstructors == null) {\r\n-            mCopyConstructors = new ConcurrentHashMap<String, Constructor<?>>(4);\r\n-        }\r\n-        mCopyConstructors.put(desc, c);\r\n-        return this;\r\n-    }\r\n-\r\n-    public ClassGenerator addDefaultConstructor() {\r\n-        mDefaultConstructor = true;\r\n-        return this;\r\n-    }\r\n-\r\n-    public ClassPool getClassPool() {\r\n-        return mPool;\r\n-    }\r\n-\r\n-    public Class<?> toClass() {\r\n-        return toClass(ClassHelper.getClassLoader(ClassGenerator.class),\r\n-                getClass().getProtectionDomain());\r\n-    }\r\n-\r\n-    public Class<?> toClass(ClassLoader loader, ProtectionDomain pd) {\r\n-        if (mCtc != null) {\r\n-            mCtc.detach();\r\n-        }\r\n-        long id = CLASS_NAME_COUNTER.getAndIncrement();\r\n-        try {\r\n-            CtClass ctcs = mSuperClass == null ? null : mPool.get(mSuperClass);\r\n-            if (mClassName == null) {\r\n-                mClassName = (mSuperClass == null || javassist.Modifier.isPublic(ctcs.getModifiers())\r\n-                        ? ClassGenerator.class.getName() : mSuperClass + \"$sc\") + id;\r\n-            }\r\n-            mCtc = mPool.makeClass(mClassName);\r\n-            if (mSuperClass != null) {\r\n-                mCtc.setSuperclass(ctcs);\r\n-            }\r\n-            mCtc.addInterface(mPool.get(DC.class.getName())); // add dynamic class tag.\r\n-            if (mInterfaces != null) {\r\n-                for (String cl : mInterfaces) {\r\n-                    mCtc.addInterface(mPool.get(cl));\r\n-                }\r\n-            }\r\n-            if (mFields != null) {\r\n-                for (String code : mFields) {\r\n-                    mCtc.addField(CtField.make(code, mCtc));\r\n-                }\r\n-            }\r\n-            if (mMethods != null) {\r\n-                for (String code : mMethods) {\r\n-                    if (code.charAt(0) == ':') {\r\n-                        mCtc.addMethod(CtNewMethod.copy(getCtMethod(mCopyMethods.get(code.substring(1))),\r\n-                                code.substring(1, code.indexOf('(')), mCtc, null));\r\n-                    } else {\r\n-                        mCtc.addMethod(CtNewMethod.make(code, mCtc));\r\n-                    }\r\n-                }\r\n-            }\r\n-            if (mDefaultConstructor) {\r\n-                mCtc.addConstructor(CtNewConstructor.defaultConstructor(mCtc));\r\n-            }\r\n-            if (mConstructors != null) {\r\n-                for (String code : mConstructors) {\r\n-                    if (code.charAt(0) == ':') {\r\n-                        mCtc.addConstructor(CtNewConstructor\r\n-                                .copy(getCtConstructor(mCopyConstructors.get(code.substring(1))), mCtc, null));\r\n-                    } else {\r\n-                        String[] sn = mCtc.getSimpleName().split(\"\\\\$+\"); // inner class name include $.\r\n-                        mCtc.addConstructor(\r\n-                                CtNewConstructor.make(code.replaceFirst(SIMPLE_NAME_TAG, sn[sn.length - 1]), mCtc));\r\n-                    }\r\n-                }\r\n-            }\r\n-            return mCtc.toClass(loader, pd);\r\n-        } catch (RuntimeException e) {\r\n-            throw e;\r\n-        } catch (NotFoundException e) {\r\n-            throw new RuntimeException(e.getMessage(), e);\r\n-        } catch (CannotCompileException e) {\r\n-            throw new RuntimeException(e.getMessage(), e);\r\n-        }\r\n-    }\r\n-\r\n-    public void release() {\r\n-        if (mCtc != null) {\r\n-            mCtc.detach();\r\n-        }\r\n-        if (mInterfaces != null) {\r\n-            mInterfaces.clear();\r\n-        }\r\n-        if (mFields != null) {\r\n-            mFields.clear();\r\n-        }\r\n-        if (mMethods != null) {\r\n-            mMethods.clear();\r\n-        }\r\n-        if (mConstructors != null) {\r\n-            mConstructors.clear();\r\n-        }\r\n-        if (mCopyMethods != null) {\r\n-            mCopyMethods.clear();\r\n-        }\r\n-        if (mCopyConstructors != null) {\r\n-            mCopyConstructors.clear();\r\n-        }\r\n-    }\r\n-\r\n-    private CtClass getCtClass(Class<?> c) throws NotFoundException {\r\n-        return mPool.get(c.getName());\r\n-    }\r\n-\r\n-    private CtMethod getCtMethod(Method m) throws NotFoundException {\r\n-        return getCtClass(m.getDeclaringClass())\r\n-                .getMethod(m.getName(), ReflectUtils.getDescWithoutMethodName(m));\r\n-    }\r\n-\r\n-    private CtConstructor getCtConstructor(Constructor<?> c) throws NotFoundException {\r\n-        return getCtClass(c.getDeclaringClass()).getConstructor(ReflectUtils.getDesc(c));\r\n-    }\r\n-\r\n-    public static interface DC {\r\n-\r\n-    } // dynamic class tag interface.\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.common.bytecode;\n+\n+import org.apache.dubbo.common.utils.ClassHelper;\n+import org.apache.dubbo.common.utils.ReflectUtils;\n+\n+import javassist.CannotCompileException;\n+import javassist.ClassPool;\n+import javassist.CtClass;\n+import javassist.CtConstructor;\n+import javassist.CtField;\n+import javassist.CtMethod;\n+import javassist.CtNewConstructor;\n+import javassist.CtNewMethod;\n+import javassist.LoaderClassPath;\n+import javassist.NotFoundException;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.security.ProtectionDomain;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * ClassGenerator\n+ */\n+public final class ClassGenerator {\n+\n+    private static final AtomicLong CLASS_NAME_COUNTER = new AtomicLong(0);\n+    private static final String SIMPLE_NAME_TAG = \"<init>\";\n+    private static final Map<ClassLoader, ClassPool> POOL_MAP = new ConcurrentHashMap<ClassLoader, ClassPool>(); //ClassLoader - ClassPool\n+    private ClassPool mPool;\n+    private CtClass mCtc;\n+    private String mClassName;\n+    private String mSuperClass;\n+    private Set<String> mInterfaces;\n+    private List<String> mFields;\n+    private List<String> mConstructors;\n+    private List<String> mMethods;\n+    private Map<String, Method> mCopyMethods; // <method desc,method instance>\n+    private Map<String, Constructor<?>> mCopyConstructors; // <constructor desc,constructor instance>\n+    private boolean mDefaultConstructor = false;\n+\n+    private ClassGenerator() {\n+    }\n+\n+    private ClassGenerator(ClassPool pool) {\n+        mPool = pool;\n+    }\n+\n+    public static ClassGenerator newInstance() {\n+        return new ClassGenerator(getClassPool(Thread.currentThread().getContextClassLoader()));\n+    }\n+\n+    public static ClassGenerator newInstance(ClassLoader loader) {\n+        return new ClassGenerator(getClassPool(loader));\n+    }\n+\n+    public static boolean isDynamicClass(Class<?> cl) {\n+        return ClassGenerator.DC.class.isAssignableFrom(cl);\n+    }\n+\n+    public static ClassPool getClassPool(ClassLoader loader) {\n+        if (loader == null) {\n+            return ClassPool.getDefault();\n+        }\n+\n+        ClassPool pool = POOL_MAP.get(loader);\n+        if (pool == null) {\n+            pool = new ClassPool(true);\n+            pool.appendClassPath(new LoaderClassPath(loader));\n+            POOL_MAP.put(loader, pool);\n+        }\n+        return pool;\n+    }\n+\n+    private static String modifier(int mod) {\n+        StringBuilder modifier = new StringBuilder();\n+        if (Modifier.isPublic(mod)) {\n+            modifier.append(\"public\");\n+        }\n+        if (Modifier.isProtected(mod)) {\n+            modifier.append(\"protected\");\n+        }\n+        if (Modifier.isPrivate(mod)) {\n+            modifier.append(\"private\");\n+        }\n+\n+        if (Modifier.isStatic(mod)) {\n+            modifier.append(\" static\");\n+        }\n+        if (Modifier.isVolatile(mod)) {\n+            modifier.append(\" volatile\");\n+        }\n+\n+        return modifier.toString();\n+    }\n+\n+    public String getClassName() {\n+        return mClassName;\n+    }\n+\n+    public ClassGenerator setClassName(String name) {\n+        mClassName = name;\n+        return this;\n+    }\n+\n+    public ClassGenerator addInterface(String cn) {\n+        if (mInterfaces == null) {\n+            mInterfaces = new HashSet<String>();\n+        }\n+        mInterfaces.add(cn);\n+        return this;\n+    }\n+\n+    public ClassGenerator addInterface(Class<?> cl) {\n+        return addInterface(cl.getName());\n+    }\n+\n+    public ClassGenerator setSuperClass(String cn) {\n+        mSuperClass = cn;\n+        return this;\n+    }\n+\n+    public ClassGenerator setSuperClass(Class<?> cl) {\n+        mSuperClass = cl.getName();\n+        return this;\n+    }\n+\n+    public ClassGenerator addField(String code) {\n+        if (mFields == null) {\n+            mFields = new ArrayList<String>();\n+        }\n+        mFields.add(code);\n+        return this;\n+    }\n+\n+    public ClassGenerator addField(String name, int mod, Class<?> type) {\n+        return addField(name, mod, type, null);\n+    }\n+\n+    public ClassGenerator addField(String name, int mod, Class<?> type, String def) {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(modifier(mod)).append(' ').append(ReflectUtils.getName(type)).append(' ');\n+        sb.append(name);\n+        if (def != null && def.length() > 0) {\n+            sb.append('=');\n+            sb.append(def);\n+        }\n+        sb.append(';');\n+        return addField(sb.toString());\n+    }\n+\n+    public ClassGenerator addMethod(String code) {\n+        if (mMethods == null) {\n+            mMethods = new ArrayList<String>();\n+        }\n+        mMethods.add(code);\n+        return this;\n+    }\n+\n+    public ClassGenerator addMethod(String name, int mod, Class<?> rt, Class<?>[] pts, String body) {\n+        return addMethod(name, mod, rt, pts, null, body);\n+    }\n+\n+    public ClassGenerator addMethod(String name, int mod, Class<?> rt, Class<?>[] pts, Class<?>[] ets,\n+                                    String body) {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(modifier(mod)).append(' ').append(ReflectUtils.getName(rt)).append(' ').append(name);\n+        sb.append('(');\n+        for (int i = 0; i < pts.length; i++) {\n+            if (i > 0) {\n+                sb.append(',');\n+            }\n+            sb.append(ReflectUtils.getName(pts[i]));\n+            sb.append(\" arg\").append(i);\n+        }\n+        sb.append(')');\n+        if (ets != null && ets.length > 0) {\n+            sb.append(\" throws \");\n+            for (int i = 0; i < ets.length; i++) {\n+                if (i > 0) {\n+                    sb.append(',');\n+                }\n+                sb.append(ReflectUtils.getName(ets[i]));\n+            }\n+        }\n+        sb.append('{').append(body).append('}');\n+        return addMethod(sb.toString());\n+    }\n+\n+    public ClassGenerator addMethod(Method m) {\n+        addMethod(m.getName(), m);\n+        return this;\n+    }\n+\n+    public ClassGenerator addMethod(String name, Method m) {\n+        String desc = name + ReflectUtils.getDescWithoutMethodName(m);\n+        addMethod(':' + desc);\n+        if (mCopyMethods == null) {\n+            mCopyMethods = new ConcurrentHashMap<String, Method>(8);\n+        }\n+        mCopyMethods.put(desc, m);\n+        return this;\n+    }\n+\n+    public ClassGenerator addConstructor(String code) {\n+        if (mConstructors == null) {\n+            mConstructors = new LinkedList<String>();\n+        }\n+        mConstructors.add(code);\n+        return this;\n+    }\n+\n+    public ClassGenerator addConstructor(int mod, Class<?>[] pts, String body) {\n+        return addConstructor(mod, pts, null, body);\n+    }\n+\n+    public ClassGenerator addConstructor(int mod, Class<?>[] pts, Class<?>[] ets, String body) {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(modifier(mod)).append(' ').append(SIMPLE_NAME_TAG);\n+        sb.append('(');\n+        for (int i = 0; i < pts.length; i++) {\n+            if (i > 0) {\n+                sb.append(',');\n+            }\n+            sb.append(ReflectUtils.getName(pts[i]));\n+            sb.append(\" arg\").append(i);\n+        }\n+        sb.append(')');\n+        if (ets != null && ets.length > 0) {\n+            sb.append(\" throws \");\n+            for (int i = 0; i < ets.length; i++) {\n+                if (i > 0) {\n+                    sb.append(',');\n+                }\n+                sb.append(ReflectUtils.getName(ets[i]));\n+            }\n+        }\n+        sb.append('{').append(body).append('}');\n+        return addConstructor(sb.toString());\n+    }\n+\n+    public ClassGenerator addConstructor(Constructor<?> c) {\n+        String desc = ReflectUtils.getDesc(c);\n+        addConstructor(\":\" + desc);\n+        if (mCopyConstructors == null) {\n+            mCopyConstructors = new ConcurrentHashMap<String, Constructor<?>>(4);\n+        }\n+        mCopyConstructors.put(desc, c);\n+        return this;\n+    }\n+\n+    public ClassGenerator addDefaultConstructor() {\n+        mDefaultConstructor = true;\n+        return this;\n+    }\n+\n+    public ClassPool getClassPool() {\n+        return mPool;\n+    }\n+\n+    public Class<?> toClass() {\n+        return toClass(ClassHelper.getClassLoader(ClassGenerator.class),\n+                getClass().getProtectionDomain());\n+    }\n+\n+    public Class<?> toClass(ClassLoader loader, ProtectionDomain pd) {\n+        if (mCtc != null) {\n+            mCtc.detach();\n+        }\n+        long id = CLASS_NAME_COUNTER.getAndIncrement();\n+        try {\n+            CtClass ctcs = mSuperClass == null ? null : mPool.get(mSuperClass);\n+            if (mClassName == null) {\n+                mClassName = (mSuperClass == null || javassist.Modifier.isPublic(ctcs.getModifiers())\n+                        ? ClassGenerator.class.getName() : mSuperClass + \"$sc\") + id;\n+            }\n+            mCtc = mPool.makeClass(mClassName);\n+            if (mSuperClass != null) {\n+                mCtc.setSuperclass(ctcs);\n+            }\n+            mCtc.addInterface(mPool.get(DC.class.getName())); // add dynamic class tag.\n+            if (mInterfaces != null) {\n+                for (String cl : mInterfaces) {\n+                    mCtc.addInterface(mPool.get(cl));\n+                }\n+            }\n+            if (mFields != null) {\n+                for (String code : mFields) {\n+                    mCtc.addField(CtField.make(code, mCtc));\n+                }\n+            }\n+            if (mMethods != null) {\n+                for (String code : mMethods) {\n+                    if (code.charAt(0) == ':') {\n+                        mCtc.addMethod(CtNewMethod.copy(getCtMethod(mCopyMethods.get(code.substring(1))),\n+                                code.substring(1, code.indexOf('(')), mCtc, null));\n+                    } else {\n+                        mCtc.addMethod(CtNewMethod.make(code, mCtc));\n+                    }\n+                }\n+            }\n+            if (mDefaultConstructor) {\n+                mCtc.addConstructor(CtNewConstructor.defaultConstructor(mCtc));\n+            }\n+            if (mConstructors != null) {\n+                for (String code : mConstructors) {\n+                    if (code.charAt(0) == ':') {\n+                        mCtc.addConstructor(CtNewConstructor\n+                                .copy(getCtConstructor(mCopyConstructors.get(code.substring(1))), mCtc, null));\n+                    } else {\n+                        String[] sn = mCtc.getSimpleName().split(\"\\\\$+\"); // inner class name include $.\n+                        mCtc.addConstructor(\n+                                CtNewConstructor.make(code.replaceFirst(SIMPLE_NAME_TAG, sn[sn.length - 1]), mCtc));\n+                    }\n+                }\n+            }\n+            return mCtc.toClass(loader, pd);\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (NotFoundException e) {\n+            throw new RuntimeException(e.getMessage(), e);\n+        } catch (CannotCompileException e) {\n+            throw new RuntimeException(e.getMessage(), e);\n+        }\n+    }\n+\n+    public void release() {\n+        if (mCtc != null) {\n+            mCtc.detach();\n+        }\n+        if (mInterfaces != null) {\n+            mInterfaces.clear();\n+        }\n+        if (mFields != null) {\n+            mFields.clear();\n+        }\n+        if (mMethods != null) {\n+            mMethods.clear();\n+        }\n+        if (mConstructors != null) {\n+            mConstructors.clear();\n+        }\n+        if (mCopyMethods != null) {\n+            mCopyMethods.clear();\n+        }\n+        if (mCopyConstructors != null) {\n+            mCopyConstructors.clear();\n+        }\n+    }\n+\n+    private CtClass getCtClass(Class<?> c) throws NotFoundException {\n+        return mPool.get(c.getName());\n+    }\n+\n+    private CtMethod getCtMethod(Method m) throws NotFoundException {\n+        return getCtClass(m.getDeclaringClass())\n+                .getMethod(m.getName(), ReflectUtils.getDescWithoutMethodName(m));\n+    }\n+\n+    private CtConstructor getCtConstructor(Constructor<?> c) throws NotFoundException {\n+        return getCtClass(c.getDeclaringClass()).getConstructor(ReflectUtils.getDesc(c));\n+    }\n+\n+    public static interface DC {\n+\n+    } // dynamic class tag interface.\n }\n\\ No newline at end of file",
                "changes": 780
            },
            {
                "status": "modified",
                "additions": 27,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Mixin.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Mixin.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Mixin.java",
                "deletions": 14,
                "sha": "df95dabf445296f03013a4c863957f9a3a3b41df",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Mixin.java",
                "patch": "@@ -98,16 +98,18 @@ public static Mixin mixin(Class<?>[] ics, Class<?>[] dcs, ClassLoader cl) {\n                     if (pkg == null) {\r\n                         pkg = npkg;\r\n                     } else {\r\n-                        if (!pkg.equals(npkg))\r\n+                        if (!pkg.equals(npkg)) {\r\n                             throw new IllegalArgumentException(\"non-public interfaces class from different packages\");\r\n+                        }\r\n                     }\r\n                 }\r\n \r\n                 ccp.addField(\"private \" + dcs[i].getName() + \" d\" + i + \";\");\r\n \r\n                 code.append(\"d\").append(i).append(\" = (\").append(dcs[i].getName()).append(\")$1[\").append(i).append(\"];\\n\");\r\n-                if (MixinAware.class.isAssignableFrom(dcs[i]))\r\n+                if (MixinAware.class.isAssignableFrom(dcs[i])) {\r\n                     code.append(\"d\").append(i).append(\".setMixinInstance(this);\\n\");\r\n+                }\r\n             }\r\n             ccp.addConstructor(Modifier.PUBLIC, new Class<?>[]{Object[].class}, code.toString());\r\n \r\n@@ -119,39 +121,45 @@ public static Mixin mixin(Class<?>[] ics, Class<?>[] dcs, ClassLoader cl) {\n                     if (pkg == null) {\r\n                         pkg = npkg;\r\n                     } else {\r\n-                        if (!pkg.equals(npkg))\r\n+                        if (!pkg.equals(npkg)) {\r\n                             throw new IllegalArgumentException(\"non-public delegate class from different packages\");\r\n+                        }\r\n                     }\r\n                 }\r\n \r\n                 ccp.addInterface(ics[i]);\r\n \r\n                 for (Method method : ics[i].getMethods()) {\r\n-                    if (\"java.lang.Object\".equals(method.getDeclaringClass().getName()))\r\n+                    if (\"java.lang.Object\".equals(method.getDeclaringClass().getName())) {\r\n                         continue;\r\n+                    }\r\n \r\n                     String desc = ReflectUtils.getDesc(method);\r\n-                    if (worked.contains(desc))\r\n+                    if (worked.contains(desc)) {\r\n                         continue;\r\n+                    }\r\n                     worked.add(desc);\r\n \r\n                     int ix = findMethod(dcs, desc);\r\n-                    if (ix < 0)\r\n+                    if (ix < 0) {\r\n                         throw new RuntimeException(\"Missing method [\" + desc + \"] implement.\");\r\n+                    }\r\n \r\n                     Class<?> rt = method.getReturnType();\r\n                     String mn = method.getName();\r\n-                    if (Void.TYPE.equals(rt))\r\n+                    if (Void.TYPE.equals(rt)) {\r\n                         ccp.addMethod(mn, method.getModifiers(), rt, method.getParameterTypes(), method.getExceptionTypes(),\r\n                                 \"d\" + ix + \".\" + mn + \"($$);\");\r\n-                    else\r\n+                    } else {\r\n                         ccp.addMethod(mn, method.getModifiers(), rt, method.getParameterTypes(), method.getExceptionTypes(),\r\n                                 \"return ($r)d\" + ix + \".\" + mn + \"($$);\");\r\n+                    }\r\n                 }\r\n             }\r\n \r\n-            if (pkg == null)\r\n+            if (pkg == null) {\r\n                 pkg = PACKAGE_NAME;\r\n+            }\r\n \r\n             // create MixinInstance class.\r\n             String micn = pkg + \".mixin\" + id;\r\n@@ -173,10 +181,12 @@ public static Mixin mixin(Class<?>[] ics, Class<?>[] dcs, ClassLoader cl) {\n             throw new RuntimeException(e.getMessage(), e);\r\n         } finally {\r\n             // release ClassGenerator\r\n-            if (ccp != null)\r\n+            if (ccp != null) {\r\n                 ccp.release();\r\n-            if (ccm != null)\r\n+            }\r\n+            if (ccm != null) {\r\n                 ccm.release();\r\n+            }\r\n         }\r\n     }\r\n \r\n@@ -187,17 +197,20 @@ private static int findMethod(Class<?>[] dcs, String desc) {\n             cl = dcs[i];\r\n             methods = cl.getMethods();\r\n             for (Method method : methods) {\r\n-                if (desc.equals(ReflectUtils.getDesc(method)))\r\n+                if (desc.equals(ReflectUtils.getDesc(method))) {\r\n                     return i;\r\n+                }\r\n             }\r\n         }\r\n         return -1;\r\n     }\r\n \r\n     private static void assertInterfaceArray(Class<?>[] ics) {\r\n-        for (int i = 0; i < ics.length; i++)\r\n-            if (!ics[i].isInterface())\r\n+        for (int i = 0; i < ics.length; i++) {\r\n+            if (!ics[i].isInterface()) {\r\n                 throw new RuntimeException(\"Class \" + ics[i].getName() + \" is not a interface.\");\r\n+            }\r\n+        }\r\n     }\r\n \r\n     /**\r",
                "changes": 41
            },
            {
                "status": "modified",
                "additions": 41,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Proxy.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Proxy.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Proxy.java",
                "deletions": 21,
                "sha": "150e946b6905e02d84ad17e5f0e1744e3863db97",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Proxy.java",
                "patch": "@@ -77,23 +77,26 @@ public static Proxy getProxy(Class<?>... ics) {\n      * @return Proxy instance.\r\n      */\r\n     public static Proxy getProxy(ClassLoader cl, Class<?>... ics) {\r\n-        if (ics.length > 65535)\r\n+        if (ics.length > 65535) {\r\n             throw new IllegalArgumentException(\"interface limit exceeded\");\r\n+        }\r\n \r\n         StringBuilder sb = new StringBuilder();\r\n         for (int i = 0; i < ics.length; i++) {\r\n             String itf = ics[i].getName();\r\n-            if (!ics[i].isInterface())\r\n+            if (!ics[i].isInterface()) {\r\n                 throw new RuntimeException(itf + \" is not a interface.\");\r\n+            }\r\n \r\n             Class<?> tmp = null;\r\n             try {\r\n                 tmp = Class.forName(itf, false, cl);\r\n             } catch (ClassNotFoundException e) {\r\n             }\r\n \r\n-            if (tmp != ics[i])\r\n+            if (tmp != ics[i]) {\r\n                 throw new IllegalArgumentException(ics[i] + \" is not visible from class loader\");\r\n+            }\r\n \r\n             sb.append(itf).append(';');\r\n         }\r\n@@ -117,8 +120,9 @@ public static Proxy getProxy(ClassLoader cl, Class<?>... ics) {\n                 Object value = cache.get(key);\r\n                 if (value instanceof Reference<?>) {\r\n                     proxy = (Proxy) ((Reference<?>) value).get();\r\n-                    if (proxy != null)\r\n+                    if (proxy != null) {\r\n                         return proxy;\r\n+                    }\r\n                 }\r\n \r\n                 if (value == PendingGenerationMarker) {\r\n@@ -149,36 +153,41 @@ public static Proxy getProxy(ClassLoader cl, Class<?>... ics) {\n                     if (pkg == null) {\r\n                         pkg = npkg;\r\n                     } else {\r\n-                        if (!pkg.equals(npkg))\r\n+                        if (!pkg.equals(npkg)) {\r\n                             throw new IllegalArgumentException(\"non-public interfaces from different packages\");\r\n+                        }\r\n                     }\r\n                 }\r\n                 ccp.addInterface(ics[i]);\r\n \r\n                 for (Method method : ics[i].getMethods()) {\r\n                     String desc = ReflectUtils.getDesc(method);\r\n-                    if (worked.contains(desc))\r\n+                    if (worked.contains(desc)) {\r\n                         continue;\r\n+                    }\r\n                     worked.add(desc);\r\n \r\n                     int ix = methods.size();\r\n                     Class<?> rt = method.getReturnType();\r\n                     Class<?>[] pts = method.getParameterTypes();\r\n \r\n                     StringBuilder code = new StringBuilder(\"Object[] args = new Object[\").append(pts.length).append(\"];\");\r\n-                    for (int j = 0; j < pts.length; j++)\r\n+                    for (int j = 0; j < pts.length; j++) {\r\n                         code.append(\" args[\").append(j).append(\"] = ($w)$\").append(j + 1).append(\";\");\r\n+                    }\r\n                     code.append(\" Object ret = handler.invoke(this, methods[\" + ix + \"], args);\");\r\n-                    if (!Void.TYPE.equals(rt))\r\n+                    if (!Void.TYPE.equals(rt)) {\r\n                         code.append(\" return \").append(asArgument(rt, \"ret\")).append(\";\");\r\n+                    }\r\n \r\n                     methods.add(method);\r\n                     ccp.addMethod(method.getName(), method.getModifiers(), rt, pts, method.getExceptionTypes(), code.toString());\r\n                 }\r\n             }\r\n \r\n-            if (pkg == null)\r\n+            if (pkg == null) {\r\n                 pkg = PACKAGE_NAME;\r\n+            }\r\n \r\n             // create ProxyInstance class.\r\n             String pcn = pkg + \".proxy\" + id;\r\n@@ -205,15 +214,18 @@ public static Proxy getProxy(ClassLoader cl, Class<?>... ics) {\n             throw new RuntimeException(e.getMessage(), e);\r\n         } finally {\r\n             // release ClassGenerator\r\n-            if (ccp != null)\r\n+            if (ccp != null) {\r\n                 ccp.release();\r\n-            if (ccm != null)\r\n+            }\r\n+            if (ccm != null) {\r\n                 ccm.release();\r\n+            }\r\n             synchronized (cache) {\r\n-                if (proxy == null)\r\n+                if (proxy == null) {\r\n                     cache.remove(key);\r\n-                else\r\n+                } else {\r\n                     cache.put(key, new WeakReference<Proxy>(proxy));\r\n+                }\r\n                 cache.notifyAll();\r\n             }\r\n         }\r\n@@ -222,22 +234,30 @@ public static Proxy getProxy(ClassLoader cl, Class<?>... ics) {\n \r\n     private static String asArgument(Class<?> cl, String name) {\r\n         if (cl.isPrimitive()) {\r\n-            if (Boolean.TYPE == cl)\r\n+            if (Boolean.TYPE == cl) {\r\n                 return name + \"==null?false:((Boolean)\" + name + \").booleanValue()\";\r\n-            if (Byte.TYPE == cl)\r\n+            }\r\n+            if (Byte.TYPE == cl) {\r\n                 return name + \"==null?(byte)0:((Byte)\" + name + \").byteValue()\";\r\n-            if (Character.TYPE == cl)\r\n+            }\r\n+            if (Character.TYPE == cl) {\r\n                 return name + \"==null?(char)0:((Character)\" + name + \").charValue()\";\r\n-            if (Double.TYPE == cl)\r\n+            }\r\n+            if (Double.TYPE == cl) {\r\n                 return name + \"==null?(double)0:((Double)\" + name + \").doubleValue()\";\r\n-            if (Float.TYPE == cl)\r\n+            }\r\n+            if (Float.TYPE == cl) {\r\n                 return name + \"==null?(float)0:((Float)\" + name + \").floatValue()\";\r\n-            if (Integer.TYPE == cl)\r\n+            }\r\n+            if (Integer.TYPE == cl) {\r\n                 return name + \"==null?(int)0:((Integer)\" + name + \").intValue()\";\r\n-            if (Long.TYPE == cl)\r\n+            }\r\n+            if (Long.TYPE == cl) {\r\n                 return name + \"==null?(long)0:((Long)\" + name + \").longValue()\";\r\n-            if (Short.TYPE == cl)\r\n+            }\r\n+            if (Short.TYPE == cl) {\r\n                 return name + \"==null?(short)0:((Short)\" + name + \").shortValue()\";\r\n+            }\r\n             throw new RuntimeException(name + \" is unknown primitive type.\");\r\n         }\r\n         return \"(\" + ReflectUtils.getName(cl) + \")\" + name;\r",
                "changes": 62
            },
            {
                "status": "modified",
                "additions": 63,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Wrapper.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Wrapper.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Wrapper.java",
                "deletions": 27,
                "sha": "03ac84f4dc121fee34f34cdf08a302284c7f92b9",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Wrapper.java",
                "patch": "@@ -77,11 +77,19 @@ public boolean hasProperty(String name) {\n \r\n         @Override\r\n         public Object invokeMethod(Object instance, String mn, Class<?>[] types, Object[] args) throws NoSuchMethodException {\r\n-            if (\"getClass\".equals(mn)) return instance.getClass();\r\n-            if (\"hashCode\".equals(mn)) return instance.hashCode();\r\n-            if (\"toString\".equals(mn)) return instance.toString();\r\n+            if (\"getClass\".equals(mn)) {\r\n+                return instance.getClass();\r\n+            }\r\n+            if (\"hashCode\".equals(mn)) {\r\n+                return instance.hashCode();\r\n+            }\r\n+            if (\"toString\".equals(mn)) {\r\n+                return instance.toString();\r\n+            }\r\n             if (\"equals\".equals(mn)) {\r\n-                if (args.length == 1) return instance.equals(args[0]);\r\n+                if (args.length == 1) {\r\n+                    return instance.equals(args[0]);\r\n+                }\r\n                 throw new IllegalArgumentException(\"Invoke method [\" + mn + \"] argument number error.\");\r\n             }\r\n             throw new NoSuchMethodException(\"Method [\" + mn + \"] not found.\");\r\n@@ -97,10 +105,13 @@ public Object invokeMethod(Object instance, String mn, Class<?>[] types, Object[\n      */\r\n     public static Wrapper getWrapper(Class<?> c) {\r\n         while (ClassGenerator.isDynamicClass(c)) // can not wrapper on dynamic class.\r\n+        {\r\n             c = c.getSuperclass();\r\n+        }\r\n \r\n-        if (c == Object.class)\r\n+        if (c == Object.class) {\r\n             return OBJECT_WRAPPER;\r\n+        }\r\n \r\n         Wrapper ret = WRAPPER_MAP.get(c);\r\n         if (ret == null) {\r\n@@ -111,8 +122,9 @@ public static Wrapper getWrapper(Class<?> c) {\n     }\r\n \r\n     private static Wrapper makeWrapper(Class<?> c) {\r\n-        if (c.isPrimitive())\r\n+        if (c.isPrimitive()) {\r\n             throw new IllegalArgumentException(\"Can not create wrapper for primitive type: \" + c);\r\n+        }\r\n \r\n         String name = c.getName();\r\n         ClassLoader cl = ClassHelper.getClassLoader(c);\r\n@@ -134,8 +146,9 @@ private static Wrapper makeWrapper(Class<?> c) {\n         for (Field f : c.getFields()) {\r\n             String fn = f.getName();\r\n             Class<?> ft = f.getType();\r\n-            if (Modifier.isStatic(f.getModifiers()) || Modifier.isTransient(f.getModifiers()))\r\n+            if (Modifier.isStatic(f.getModifiers()) || Modifier.isTransient(f.getModifiers())) {\r\n                 continue;\r\n+            }\r\n \r\n             c1.append(\" if( $2.equals(\\\"\").append(fn).append(\"\\\") ){ w.\").append(fn).append(\"=\").append(arg(ft, \"$3\")).append(\"; return; }\");\r\n             c2.append(\" if( $2.equals(\\\"\").append(fn).append(\"\\\") ){ return ($w)w.\").append(fn).append(\"; }\");\r\n@@ -150,7 +163,9 @@ private static Wrapper makeWrapper(Class<?> c) {\n         }\r\n         for (Method m : methods) {\r\n             if (m.getDeclaringClass() == Object.class) //ignore Object's method.\r\n+            {\r\n                 continue;\r\n+            }\r\n \r\n             String mn = m.getName();\r\n             c3.append(\" if( \\\"\").append(mn).append(\"\\\".equals( $2 ) \");\r\n@@ -175,16 +190,18 @@ private static Wrapper makeWrapper(Class<?> c) {\n \r\n             c3.append(\" ) { \");\r\n \r\n-            if (m.getReturnType() == Void.TYPE)\r\n+            if (m.getReturnType() == Void.TYPE) {\r\n                 c3.append(\" w.\").append(mn).append('(').append(args(m.getParameterTypes(), \"$4\")).append(\");\").append(\" return null;\");\r\n-            else\r\n+            } else {\r\n                 c3.append(\" return ($w)w.\").append(mn).append('(').append(args(m.getParameterTypes(), \"$4\")).append(\");\");\r\n+            }\r\n \r\n             c3.append(\" }\");\r\n \r\n             mns.add(mn);\r\n-            if (m.getDeclaringClass() == c)\r\n+            if (m.getDeclaringClass() == c) {\r\n                 dmns.add(mn);\r\n+            }\r\n             ms.put(ReflectUtils.getDesc(m), m);\r\n         }\r\n         if (hasMethod) {\r\n@@ -229,8 +246,9 @@ private static Wrapper makeWrapper(Class<?> c) {\n         cc.addField(\"public static \" + Map.class.getName() + \" pts;\"); // property type map.\r\n         cc.addField(\"public static String[] mns;\"); // all method name array.\r\n         cc.addField(\"public static String[] dmns;\"); // declared method name array.\r\n-        for (int i = 0, len = ms.size(); i < len; i++)\r\n+        for (int i = 0, len = ms.size(); i < len; i++) {\r\n             cc.addField(\"public static Class[] mts\" + i + \";\");\r\n+        }\r\n \r\n         cc.addMethod(\"public String[] getPropertyNames(){ return pns; }\");\r\n         cc.addMethod(\"public boolean hasProperty(String n){ return pts.containsKey($1); }\");\r\n@@ -249,8 +267,9 @@ private static Wrapper makeWrapper(Class<?> c) {\n             wc.getField(\"mns\").set(null, mns.toArray(new String[0]));\r\n             wc.getField(\"dmns\").set(null, dmns.toArray(new String[0]));\r\n             int ix = 0;\r\n-            for (Method m : ms.values())\r\n+            for (Method m : ms.values()) {\r\n                 wc.getField(\"mts\" + ix++).set(null, m.getParameterTypes());\r\n+            }\r\n             return (Wrapper) wc.newInstance();\r\n         } catch (RuntimeException e) {\r\n             throw e;\r\n@@ -266,34 +285,45 @@ private static Wrapper makeWrapper(Class<?> c) {\n \r\n     private static String arg(Class<?> cl, String name) {\r\n         if (cl.isPrimitive()) {\r\n-            if (cl == Boolean.TYPE)\r\n+            if (cl == Boolean.TYPE) {\r\n                 return \"((Boolean)\" + name + \").booleanValue()\";\r\n-            if (cl == Byte.TYPE)\r\n+            }\r\n+            if (cl == Byte.TYPE) {\r\n                 return \"((Byte)\" + name + \").byteValue()\";\r\n-            if (cl == Character.TYPE)\r\n+            }\r\n+            if (cl == Character.TYPE) {\r\n                 return \"((Character)\" + name + \").charValue()\";\r\n-            if (cl == Double.TYPE)\r\n+            }\r\n+            if (cl == Double.TYPE) {\r\n                 return \"((Number)\" + name + \").doubleValue()\";\r\n-            if (cl == Float.TYPE)\r\n+            }\r\n+            if (cl == Float.TYPE) {\r\n                 return \"((Number)\" + name + \").floatValue()\";\r\n-            if (cl == Integer.TYPE)\r\n+            }\r\n+            if (cl == Integer.TYPE) {\r\n                 return \"((Number)\" + name + \").intValue()\";\r\n-            if (cl == Long.TYPE)\r\n+            }\r\n+            if (cl == Long.TYPE) {\r\n                 return \"((Number)\" + name + \").longValue()\";\r\n-            if (cl == Short.TYPE)\r\n+            }\r\n+            if (cl == Short.TYPE) {\r\n                 return \"((Number)\" + name + \").shortValue()\";\r\n+            }\r\n             throw new RuntimeException(\"Unknown primitive type: \" + cl.getName());\r\n         }\r\n         return \"(\" + ReflectUtils.getName(cl) + \")\" + name;\r\n     }\r\n \r\n     private static String args(Class<?>[] cs, String name) {\r\n         int len = cs.length;\r\n-        if (len == 0) return \"\";\r\n+        if (len == 0) {\r\n+            return \"\";\r\n+        }\r\n         StringBuilder sb = new StringBuilder();\r\n         for (int i = 0; i < len; i++) {\r\n-            if (i > 0)\r\n+            if (i > 0) {\r\n                 sb.append(',');\r\n+            }\r\n             sb.append(arg(cs[i], name + \"[\" + i + \"]\"));\r\n         }\r\n         return sb.toString();\r\n@@ -365,8 +395,9 @@ private static boolean hasMethods(Method[] methods) {\n      */\r\n     public Object[] getPropertyValues(Object instance, String[] pns) throws NoSuchPropertyException, IllegalArgumentException {\r\n         Object[] ret = new Object[pns.length];\r\n-        for (int i = 0; i < ret.length; i++)\r\n+        for (int i = 0; i < ret.length; i++) {\r\n             ret[i] = getPropertyValue(instance, pns[i]);\r\n+        }\r\n         return ret;\r\n     }\r\n \r\n@@ -378,11 +409,13 @@ private static boolean hasMethods(Method[] methods) {\n      * @param pvs      property value array.\r\n      */\r\n     public void setPropertyValues(Object instance, String[] pns, Object[] pvs) throws NoSuchPropertyException, IllegalArgumentException {\r\n-        if (pns.length != pvs.length)\r\n+        if (pns.length != pvs.length) {\r\n             throw new IllegalArgumentException(\"pns.length != pvs.length\");\r\n+        }\r\n \r\n-        for (int i = 0; i < pns.length; i++)\r\n+        for (int i = 0; i < pns.length; i++) {\r\n             setPropertyValue(instance, pns[i], pvs[i]);\r\n+        }\r\n     }\r\n \r\n     /**\r\n@@ -406,8 +439,11 @@ public void setPropertyValues(Object instance, String[] pns, Object[] pvs) throw\n      * @return has or has not.\r\n      */\r\n     public boolean hasMethod(String name) {\r\n-        for (String mn : getMethodNames())\r\n-            if (mn.equals(name)) return true;\r\n+        for (String mn : getMethodNames()) {\r\n+            if (mn.equals(name)) {\r\n+                return true;\r\n+            }\r\n+        }\r\n         return false;\r\n     }\r\n \r",
                "changes": 90
            },
            {
                "status": "modified",
                "additions": 4,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/JdkCompiler.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/JdkCompiler.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/JdkCompiler.java",
                "deletions": 2,
                "sha": "9c2800cc217ffe2f861527749d4c45800eb49083",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/JdkCompiler.java",
                "patch": "@@ -168,8 +168,9 @@ public JavaFileManagerImpl(JavaFileManager fileManager, ClassLoaderImpl classLoa\n         @Override\r\n         public FileObject getFileForInput(Location location, String packageName, String relativeName) throws IOException {\r\n             FileObject o = fileObjects.get(uri(location, packageName, relativeName));\r\n-            if (o != null)\r\n+            if (o != null) {\r\n                 return o;\r\n+            }\r\n             return super.getFileForInput(location, packageName, relativeName);\r\n         }\r\n \r\n@@ -196,8 +197,9 @@ public ClassLoader getClassLoader(JavaFileManager.Location location) {\n \r\n         @Override\r\n         public String inferBinaryName(Location loc, JavaFileObject file) {\r\n-            if (file instanceof JavaFileObjectImpl)\r\n+            if (file instanceof JavaFileObjectImpl) {\r\n                 return file.getName();\r\n+            }\r\n             return super.inferBinaryName(loc, file);\r\n         }\r\n \r",
                "changes": 6
            },
            {
                "status": "modified",
                "additions": 43,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java",
                "deletions": 24,
                "sha": "75b7562398e48b1514895e7e6b3c7e926368710b",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java",
                "patch": "@@ -105,8 +105,9 @@ private ExtensionLoader(Class<?> type) {\n \r\n     @SuppressWarnings(\"unchecked\")\r\n     public static <T> ExtensionLoader<T> getExtensionLoader(Class<T> type) {\r\n-        if (type == null)\r\n+        if (type == null) {\r\n             throw new IllegalArgumentException(\"Extension type == null\");\r\n+        }\r\n         if (!type.isInterface()) {\r\n             throw new IllegalArgumentException(\"Extension type(\" + type + \") is not interface!\");\r\n         }\r\n@@ -277,8 +278,9 @@ private boolean isActive(String[] keys, URL url) {\n      */\r\n     @SuppressWarnings(\"unchecked\")\r\n     public T getLoadedExtension(String name) {\r\n-        if (name == null || name.length() == 0)\r\n+        if (name == null || name.length() == 0) {\r\n             throw new IllegalArgumentException(\"Extension name == null\");\r\n+        }\r\n         Holder<Object> holder = cachedInstances.get(name);\r\n         if (holder == null) {\r\n             cachedInstances.putIfAbsent(name, new Holder<Object>());\r\n@@ -304,8 +306,9 @@ public T getLoadedExtension(String name) {\n      */\r\n     @SuppressWarnings(\"unchecked\")\r\n     public T getExtension(String name) {\r\n-        if (name == null || name.length() == 0)\r\n+        if (name == null || name.length() == 0) {\r\n             throw new IllegalArgumentException(\"Extension name == null\");\r\n+        }\r\n         if (\"true\".equals(name)) {\r\n             return getDefaultExtension();\r\n         }\r\n@@ -340,8 +343,9 @@ public T getDefaultExtension() {\n     }\r\n \r\n     public boolean hasExtension(String name) {\r\n-        if (name == null || name.length() == 0)\r\n+        if (name == null || name.length() == 0) {\r\n             throw new IllegalArgumentException(\"Extension name == null\");\r\n+        }\r\n         try {\r\n             this.getExtensionClass(name);\r\n             return true;\r\n@@ -549,13 +553,16 @@ private T injectExtension(T instance) {\n     }\r\n \r\n     private Class<?> getExtensionClass(String name) {\r\n-        if (type == null)\r\n+        if (type == null) {\r\n             throw new IllegalArgumentException(\"Extension type == null\");\r\n-        if (name == null)\r\n+        }\r\n+        if (name == null) {\r\n             throw new IllegalArgumentException(\"Extension name == null\");\r\n+        }\r\n         Class<?> clazz = getExtensionClasses().get(name);\r\n-        if (clazz == null)\r\n+        if (clazz == null) {\r\n             throw new IllegalStateException(\"No such extension \\\"\" + name + \"\\\" for \" + type.getName() + \"!\");\r\n+        }\r\n         return clazz;\r\n     }\r\n \r\n@@ -584,7 +591,9 @@ private T injectExtension(T instance) {\n                     throw new IllegalStateException(\"more than 1 default extension name on extension \" + type.getName()\r\n                             + \": \" + Arrays.toString(names));\r\n                 }\r\n-                if (names.length == 1) cachedDefaultName = names[0];\r\n+                if (names.length == 1) {\r\n+                    cachedDefaultName = names[0];\r\n+                }\r\n             }\r\n         }\r\n \r\n@@ -627,7 +636,9 @@ private void loadResource(Map<String, Class<?>> extensionClasses, ClassLoader cl\n                 String line;\r\n                 while ((line = reader.readLine()) != null) {\r\n                     final int ci = line.indexOf('#');\r\n-                    if (ci >= 0) line = line.substring(0, ci);\r\n+                    if (ci >= 0) {\r\n+                        line = line.substring(0, ci);\r\n+                    }\r\n                     line = line.trim();\r\n                     if (line.length() > 0) {\r\n                         try {\r\n@@ -768,8 +779,9 @@ private String createAdaptiveExtensionClassCode() {\n             }\r\n         }\r\n         // no need to generate adaptive class since there's no adaptive method found.\r\n-        if (!hasAdaptiveAnnotation)\r\n+        if (!hasAdaptiveAnnotation) {\r\n             throw new IllegalStateException(\"No adaptive method on extension \" + type.getName() + \", refuse to create the adaptive class!\");\r\n+        }\r\n \r\n         codeBuilder.append(\"package \").append(type.getPackage().getName()).append(\";\");\r\n         codeBuilder.append(\"\\nimport \").append(ExtensionLoader.class.getName()).append(\";\");\r\n@@ -865,7 +877,7 @@ private String createAdaptiveExtensionClassCode() {\n \r\n                 boolean hasInvocation = false;\r\n                 for (int i = 0; i < pts.length; ++i) {\r\n-                    if (pts[i].getName().equals(\"org.apache.dubbo.rpc.Invocation\")) {\r\n+                    if ((\"org.apache.dubbo.rpc.Invocation\").equals(pts[i].getName())) {\r\n                         // Null Point check\r\n                         String s = String.format(\"\\nif (arg%d == null) throw new IllegalArgumentException(\\\"invocation == null\\\");\", i);\r\n                         code.append(s);\r\n@@ -881,30 +893,36 @@ private String createAdaptiveExtensionClassCode() {\n                 for (int i = value.length - 1; i >= 0; --i) {\r\n                     if (i == value.length - 1) {\r\n                         if (null != defaultExtName) {\r\n-                            if (!\"protocol\".equals(value[i]))\r\n-                                if (hasInvocation)\r\n+                            if (!\"protocol\".equals(value[i])) {\r\n+                                if (hasInvocation) {\r\n                                     getNameCode = String.format(\"url.getMethodParameter(methodName, \\\"%s\\\", \\\"%s\\\")\", value[i], defaultExtName);\r\n-                                else\r\n+                                } else {\r\n                                     getNameCode = String.format(\"url.getParameter(\\\"%s\\\", \\\"%s\\\")\", value[i], defaultExtName);\r\n-                            else\r\n+                                }\r\n+                            } else {\r\n                                 getNameCode = String.format(\"( url.getProtocol() == null ? \\\"%s\\\" : url.getProtocol() )\", defaultExtName);\r\n+                            }\r\n                         } else {\r\n-                            if (!\"protocol\".equals(value[i]))\r\n-                                if (hasInvocation)\r\n+                            if (!\"protocol\".equals(value[i])) {\r\n+                                if (hasInvocation) {\r\n                                     getNameCode = String.format(\"url.getMethodParameter(methodName, \\\"%s\\\", \\\"%s\\\")\", value[i], defaultExtName);\r\n-                                else\r\n+                                } else {\r\n                                     getNameCode = String.format(\"url.getParameter(\\\"%s\\\")\", value[i]);\r\n-                            else\r\n+                                }\r\n+                            } else {\r\n                                 getNameCode = \"url.getProtocol()\";\r\n+                            }\r\n                         }\r\n                     } else {\r\n-                        if (!\"protocol\".equals(value[i]))\r\n-                            if (hasInvocation)\r\n+                        if (!\"protocol\".equals(value[i])) {\r\n+                            if (hasInvocation) {\r\n                                 getNameCode = String.format(\"url.getMethodParameter(methodName, \\\"%s\\\", \\\"%s\\\")\", value[i], defaultExtName);\r\n-                            else\r\n+                            } else {\r\n                                 getNameCode = String.format(\"url.getParameter(\\\"%s\\\", %s)\", value[i], getNameCode);\r\n-                        else\r\n+                            }\r\n+                        } else {\r\n                             getNameCode = String.format(\"url.getProtocol() == null ? (%s) : url.getProtocol()\", getNameCode);\r\n+                        }\r\n                     }\r\n                 }\r\n                 code.append(\"\\nString extName = \").append(getNameCode).append(\";\");\r\n@@ -929,8 +947,9 @@ private String createAdaptiveExtensionClassCode() {\n                 s = String.format(\"extension.%s(\", method.getName());\r\n                 code.append(s);\r\n                 for (int i = 0; i < pts.length; i++) {\r\n-                    if (i != 0)\r\n+                    if (i != 0) {\r\n                         code.append(\", \");\r\n+                    }\r\n                     code.append(\"arg\").append(i);\r\n                 }\r\n                 code.append(\");\");\r",
                "changes": 67
            },
            {
                "status": "modified",
                "additions": 83,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/io/Bytes.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/io/Bytes.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/io/Bytes.java",
                "deletions": 40,
                "sha": "263e7b9f67c808cb9d2695fcfdb8f64472d964fc",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/io/Bytes.java",
                "patch": "@@ -395,12 +395,15 @@ public static String bytes2hex(byte[] bs) {\n      * @return hex string.\n      */\n     public static String bytes2hex(byte[] bs, int off, int len) {\n-        if (off < 0)\n+        if (off < 0) {\n             throw new IndexOutOfBoundsException(\"bytes2hex: offset < 0, offset is \" + off);\n-        if (len < 0)\n+        }\n+        if (len < 0) {\n             throw new IndexOutOfBoundsException(\"bytes2hex: length < 0, length is \" + len);\n-        if (off + len > bs.length)\n+        }\n+        if (off + len > bs.length) {\n             throw new IndexOutOfBoundsException(\"bytes2hex: offset + length > array length.\");\n+        }\n \n         byte b;\n         int r = off, w = 0;\n@@ -432,20 +435,25 @@ public static String bytes2hex(byte[] bs, int off, int len) {\n      * @return byte array.\n      */\n     public static byte[] hex2bytes(final String str, final int off, int len) {\n-        if ((len & 1) == 1)\n+        if ((len & 1) == 1) {\n             throw new IllegalArgumentException(\"hex2bytes: ( len & 1 ) == 1.\");\n+        }\n \n-        if (off < 0)\n+        if (off < 0) {\n             throw new IndexOutOfBoundsException(\"hex2bytes: offset < 0, offset is \" + off);\n-        if (len < 0)\n+        }\n+        if (len < 0) {\n             throw new IndexOutOfBoundsException(\"hex2bytes: length < 0, length is \" + len);\n-        if (off + len > str.length())\n+        }\n+        if (off + len > str.length()) {\n             throw new IndexOutOfBoundsException(\"hex2bytes: offset + length > array length.\");\n+        }\n \n         int num = len / 2, r = off, w = 0;\n         byte[] b = new byte[num];\n-        for (int i = 0; i < num; i++)\n+        for (int i = 0; i < num; i++) {\n             b[w++] = (byte) (hex(str.charAt(r++)) << 4 | hex(str.charAt(r++)));\n+        }\n         return b;\n     }\n \n@@ -488,8 +496,9 @@ public static String bytes2base64(byte[] b, String code) {\n      * @return base64 string.\n      */\n     public static String bytes2base64(byte[] b, int offset, int length, String code) {\n-        if (code.length() < 64)\n+        if (code.length() < 64) {\n             throw new IllegalArgumentException(\"Base64 code length < 64.\");\n+        }\n \n         return bytes2base64(b, offset, length, code.toCharArray());\n     }\n@@ -515,15 +524,19 @@ public static String bytes2base64(byte[] b, char[] code) {\n      * @return base64 string.\n      */\n     public static String bytes2base64(final byte[] bs, final int off, final int len, final char[] code) {\n-        if (off < 0)\n+        if (off < 0) {\n             throw new IndexOutOfBoundsException(\"bytes2base64: offset < 0, offset is \" + off);\n-        if (len < 0)\n+        }\n+        if (len < 0) {\n             throw new IndexOutOfBoundsException(\"bytes2base64: length < 0, length is \" + len);\n-        if (off + len > bs.length)\n+        }\n+        if (off + len > bs.length) {\n             throw new IndexOutOfBoundsException(\"bytes2base64: offset + length > array length.\");\n+        }\n \n-        if (code.length < 64)\n+        if (code.length < 64) {\n             throw new IllegalArgumentException(\"Base64 code length < 64.\");\n+        }\n \n         boolean pad = code.length > 64; // has pad char.\n         int num = len / 3, rem = len % 3, r = off, w = 0;\n@@ -551,8 +564,9 @@ public static String bytes2base64(final byte[] bs, final int off, final int len,\n             cs[w++] = code[b1 >> 2];\n             cs[w++] = code[(b1 << 4) & MASK6 | (b2 >> 4)];\n             cs[w++] = code[(b2 << 2) & MASK6];\n-            if (pad)\n+            if (pad) {\n                 cs[w++] = code[64];\n+            }\n         }\n         return new String(cs);\n     }\n@@ -600,24 +614,30 @@ public static String bytes2base64(final byte[] bs, final int off, final int len,\n      * @return byte array.\n      */\n     public static byte[] base642bytes(final String str, final int off, final int len, final String code) {\n-        if (off < 0)\n+        if (off < 0) {\n             throw new IndexOutOfBoundsException(\"base642bytes: offset < 0, offset is \" + off);\n-        if (len < 0)\n+        }\n+        if (len < 0) {\n             throw new IndexOutOfBoundsException(\"base642bytes: length < 0, length is \" + len);\n-        if (off + len > str.length())\n+        }\n+        if (off + len > str.length()) {\n             throw new IndexOutOfBoundsException(\"base642bytes: offset + length > string length.\");\n+        }\n \n-        if (code.length() < 64)\n+        if (code.length() < 64) {\n             throw new IllegalArgumentException(\"Base64 code length < 64.\");\n+        }\n \n         int rem = len % 4;\n-        if (rem == 1)\n+        if (rem == 1) {\n             throw new IllegalArgumentException(\"base642bytes: base64 string length % 4 == 1.\");\n+        }\n \n         int num = len / 4, size = num * 3;\n         if (code.length() > 64) {\n-            if (rem != 0)\n+            if (rem != 0) {\n                 throw new IllegalArgumentException(\"base642bytes: base64 string length error.\");\n+            }\n \n             char pc = code.charAt(64);\n             if (str.charAt(off + len - 2) == pc) {\n@@ -630,10 +650,11 @@ public static String bytes2base64(final byte[] bs, final int off, final int len,\n                 rem = 3;\n             }\n         } else {\n-            if (rem == 2)\n+            if (rem == 2) {\n                 size++;\n-            else if (rem == 3)\n+            } else if (rem == 3) {\n                 size += 2;\n+            }\n         }\n \n         int r = off, w = 0;\n@@ -681,35 +702,43 @@ else if (rem == 3)\n      * @return byte array.\n      */\n     public static byte[] base642bytes(final String str, final int off, final int len, final char[] code) {\n-        if (off < 0)\n+        if (off < 0) {\n             throw new IndexOutOfBoundsException(\"base642bytes: offset < 0, offset is \" + off);\n-        if (len < 0)\n+        }\n+        if (len < 0) {\n             throw new IndexOutOfBoundsException(\"base642bytes: length < 0, length is \" + len);\n-        if (off + len > str.length())\n+        }\n+        if (off + len > str.length()) {\n             throw new IndexOutOfBoundsException(\"base642bytes: offset + length > string length.\");\n+        }\n \n-        if (code.length < 64)\n+        if (code.length < 64) {\n             throw new IllegalArgumentException(\"Base64 code length < 64.\");\n+        }\n \n         int rem = len % 4;\n-        if (rem == 1)\n+        if (rem == 1) {\n             throw new IllegalArgumentException(\"base642bytes: base64 string length % 4 == 1.\");\n+        }\n \n         int num = len / 4, size = num * 3;\n         if (code.length > 64) {\n-            if (rem != 0)\n+            if (rem != 0) {\n                 throw new IllegalArgumentException(\"base642bytes: base64 string length error.\");\n+            }\n \n             char pc = code[64];\n-            if (str.charAt(off + len - 2) == pc)\n+            if (str.charAt(off + len - 2) == pc) {\n                 size -= 2;\n-            else if (str.charAt(off + len - 1) == pc)\n+            } else if (str.charAt(off + len - 1) == pc) {\n                 size--;\n+            }\n         } else {\n-            if (rem == 2)\n+            if (rem == 2) {\n                 size++;\n-            else if (rem == 3)\n+            } else if (rem == 3) {\n                 size += 2;\n+            }\n         }\n \n         int r = off, w = 0;\n@@ -823,30 +852,43 @@ else if (rem == 3)\n     }\n \n     private static byte hex(char c) {\n-        if (c <= '9') return (byte) (c - '0');\n-        if (c >= 'a' && c <= 'f') return (byte) (c - 'a' + 10);\n-        if (c >= 'A' && c <= 'F') return (byte) (c - 'A' + 10);\n+        if (c <= '9') {\n+            return (byte) (c - '0');\n+        }\n+        if (c >= 'a' && c <= 'f') {\n+            return (byte) (c - 'a' + 10);\n+        }\n+        if (c >= 'A' && c <= 'F') {\n+            return (byte) (c - 'A' + 10);\n+        }\n         throw new IllegalArgumentException(\"hex string format error [\" + c + \"].\");\n     }\n \n     private static int indexOf(char[] cs, char c) {\n-        for (int i = 0, len = cs.length; i < len; i++)\n-            if (cs[i] == c) return i;\n+        for (int i = 0, len = cs.length; i < len; i++) {\n+            if (cs[i] == c) {\n+                return i;\n+            }\n+        }\n         return -1;\n     }\n \n     private static byte[] decodeTable(String code) {\n         int hash = code.hashCode();\n         byte[] ret = DECODE_TABLE_MAP.get(hash);\n         if (ret == null) {\n-            if (code.length() < 64)\n+            if (code.length() < 64) {\n                 throw new IllegalArgumentException(\"Base64 code length < 64.\");\n+            }\n             // create new decode table.\n             ret = new byte[128];\n             for (int i = 0; i < 128; i++) // init table.\n+            {\n                 ret[i] = -1;\n-            for (int i = 0; i < 64; i++)\n+            }\n+            for (int i = 0; i < 64; i++) {\n                 ret[code.charAt(i)] = (byte) i;\n+            }\n             DECODE_TABLE_MAP.put(hash, ret);\n         }\n         return ret;\n@@ -858,8 +900,9 @@ private static int indexOf(char[] cs, char c) {\n         while (is.available() > 0) {\n             int read, total = 0;\n             do {\n-                if ((read = is.read(buf, total, bs - total)) <= 0)\n+                if ((read = is.read(buf, total, bs - total)) <= 0) {\n                     break;\n+                }\n                 total += read;\n             }\n             while (total < bs);",
                "changes": 123
            },
            {
                "status": "modified",
                "additions": 20,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/io/StreamUtils.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/io/StreamUtils.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/io/StreamUtils.java",
                "deletions": 9,
                "sha": "0bb950531fee28e5e138626412bd4c37d401e78a",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/io/StreamUtils.java",
                "patch": "@@ -41,20 +41,25 @@ public int read() throws IOException {\n \n             @Override\n             public int read(byte b[], int off, int len) throws IOException {\n-                if (b == null)\n+                if (b == null) {\n                     throw new NullPointerException();\n+                }\n \n-                if (off < 0 || len < 0 || len > b.length - off)\n+                if (off < 0 || len < 0 || len > b.length - off) {\n                     throw new IndexOutOfBoundsException();\n+                }\n \n-                if (mPosition >= mLimit)\n+                if (mPosition >= mLimit) {\n                     return -1;\n+                }\n \n-                if (mPosition + len > mLimit)\n+                if (mPosition + len > mLimit) {\n                     len = mLimit - mPosition;\n+                }\n \n-                if (len <= 0)\n+                if (len <= 0) {\n                     return 0;\n+                }\n \n                 is.read(b, off, len);\n                 mPosition += len;\n@@ -63,11 +68,13 @@ public int read(byte b[], int off, int len) throws IOException {\n \n             @Override\n             public long skip(long len) throws IOException {\n-                if (mPosition + len > mLimit)\n+                if (mPosition + len > mLimit) {\n                     len = mLimit - mPosition;\n+                }\n \n-                if (len <= 0)\n+                if (len <= 0) {\n                     return 0;\n+                }\n \n                 is.skip(len);\n                 mPosition += len;\n@@ -128,7 +135,9 @@ public int read() throws IOException {\n                     }\n \n                     if (!mInReset) {\n-                        if (mDry) return -1;\n+                        if (mDry) {\n+                            return -1;\n+                        }\n \n                         if (null == mMarkBuffer) {\n                             mMarkBuffer = new byte[markBufferSize];\n@@ -196,7 +205,9 @@ public boolean markSupported() {\n             public int available() throws IOException {\n                 int available = is.available();\n \n-                if (mInMarked && mInReset) available += mCount - mPosition;\n+                if (mInMarked && mInReset) {\n+                    available += mCount - mPosition;\n+                }\n \n                 return available;\n             }",
                "changes": 29
            },
            {
                "status": "modified",
                "additions": 14,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeByteArrayInputStream.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeByteArrayInputStream.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeByteArrayInputStream.java",
                "deletions": 7,
                "sha": "16bb0d6c479a81664f15eb629a7a35435dea64f4",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeByteArrayInputStream.java",
                "patch": "@@ -48,27 +48,34 @@ public int read() {\n \n     @Override\n     public int read(byte b[], int off, int len) {\n-        if (b == null)\n+        if (b == null) {\n             throw new NullPointerException();\n-        if (off < 0 || len < 0 || len > b.length - off)\n+        }\n+        if (off < 0 || len < 0 || len > b.length - off) {\n             throw new IndexOutOfBoundsException();\n-        if (mPosition >= mLimit)\n+        }\n+        if (mPosition >= mLimit) {\n             return -1;\n-        if (mPosition + len > mLimit)\n+        }\n+        if (mPosition + len > mLimit) {\n             len = mLimit - mPosition;\n-        if (len <= 0)\n+        }\n+        if (len <= 0) {\n             return 0;\n+        }\n         System.arraycopy(mData, mPosition, b, off, len);\n         mPosition += len;\n         return len;\n     }\n \n     @Override\n     public long skip(long len) {\n-        if (mPosition + len > mLimit)\n+        if (mPosition + len > mLimit) {\n             len = mLimit - mPosition;\n-        if (len <= 0)\n+        }\n+        if (len <= 0) {\n             return 0;\n+        }\n         mPosition += len;\n         return len;\n     }",
                "changes": 21
            },
            {
                "status": "modified",
                "additions": 10,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeByteArrayOutputStream.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeByteArrayOutputStream.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeByteArrayOutputStream.java",
                "deletions": 5,
                "sha": "1ac43c893ddd92420e83e78c753437578a6c09eb",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeByteArrayOutputStream.java",
                "patch": "@@ -34,29 +34,34 @@ public UnsafeByteArrayOutputStream() {\n     }\n \n     public UnsafeByteArrayOutputStream(int size) {\n-        if (size < 0)\n+        if (size < 0) {\n             throw new IllegalArgumentException(\"Negative initial size: \" + size);\n+        }\n         mBuffer = new byte[size];\n     }\n \n     @Override\n     public void write(int b) {\n         int newcount = mCount + 1;\n-        if (newcount > mBuffer.length)\n+        if (newcount > mBuffer.length) {\n             mBuffer = Bytes.copyOf(mBuffer, Math.max(mBuffer.length << 1, newcount));\n+        }\n         mBuffer[mCount] = (byte) b;\n         mCount = newcount;\n     }\n \n     @Override\n     public void write(byte b[], int off, int len) {\n-        if ((off < 0) || (off > b.length) || (len < 0) || ((off + len) > b.length) || ((off + len) < 0))\n+        if ((off < 0) || (off > b.length) || (len < 0) || ((off + len) > b.length) || ((off + len) < 0)) {\n             throw new IndexOutOfBoundsException();\n-        if (len == 0)\n+        }\n+        if (len == 0) {\n             return;\n+        }\n         int newcount = mCount + len;\n-        if (newcount > mBuffer.length)\n+        if (newcount > mBuffer.length) {\n             mBuffer = Bytes.copyOf(mBuffer, Math.max(mBuffer.length << 1, newcount));\n+        }\n         System.arraycopy(b, off, mBuffer, mCount, len);\n         mCount = newcount;\n     }",
                "changes": 15
            },
            {
                "status": "modified",
                "additions": 14,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeStringReader.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeStringReader.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeStringReader.java",
                "deletions": 7,
                "sha": "ad37476bd72ed86f79cc4f9f5684211b548d29cd",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeStringReader.java",
                "patch": "@@ -36,8 +36,9 @@ public UnsafeStringReader(String str) {\n     @Override\n     public int read() throws IOException {\n         ensureOpen();\n-        if (mPosition >= mLimit)\n+        if (mPosition >= mLimit) {\n             return -1;\n+        }\n \n         return mString.charAt(mPosition++);\n     }\n@@ -46,14 +47,17 @@ public int read() throws IOException {\n     public int read(char[] cs, int off, int len) throws IOException {\n         ensureOpen();\n         if ((off < 0) || (off > cs.length) || (len < 0) ||\n-                ((off + len) > cs.length) || ((off + len) < 0))\n+                ((off + len) > cs.length) || ((off + len) < 0)) {\n             throw new IndexOutOfBoundsException();\n+        }\n \n-        if (len == 0)\n+        if (len == 0) {\n             return 0;\n+        }\n \n-        if (mPosition >= mLimit)\n+        if (mPosition >= mLimit) {\n             return -1;\n+        }\n \n         int n = Math.min(mLimit - mPosition, len);\n         mString.getChars(mPosition, mPosition + n, cs, off);\n@@ -64,8 +68,9 @@ public int read(char[] cs, int off, int len) throws IOException {\n     @Override\n     public long skip(long ns) throws IOException {\n         ensureOpen();\n-        if (mPosition >= mLimit)\n+        if (mPosition >= mLimit) {\n             return 0;\n+        }\n \n         long n = Math.min(mLimit - mPosition, ns);\n         n = Math.max(-mPosition, n);\n@@ -86,8 +91,9 @@ public boolean markSupported() {\n \n     @Override\n     public void mark(int readAheadLimit) throws IOException {\n-        if (readAheadLimit < 0)\n+        if (readAheadLimit < 0) {\n             throw new IllegalArgumentException(\"Read-ahead limit < 0\");\n+        }\n \n         ensureOpen();\n         mMark = mPosition;\n@@ -105,7 +111,8 @@ public void close() throws IOException {\n     }\n \n     private void ensureOpen() throws IOException {\n-        if (mString == null)\n+        if (mString == null) {\n             throw new IOException(\"Stream closed\");\n+        }\n     }\n }",
                "changes": 21
            },
            {
                "status": "modified",
                "additions": 9,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeStringWriter.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeStringWriter.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeStringWriter.java",
                "deletions": 5,
                "sha": "47e9a3a1aa50ed157f529c755e615e31789f106f",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeStringWriter.java",
                "patch": "@@ -30,8 +30,9 @@ public UnsafeStringWriter() {\n     }\n \n     public UnsafeStringWriter(int size) {\n-        if (size < 0)\n+        if (size < 0) {\n             throw new IllegalArgumentException(\"Negative buffer size\");\n+        }\n \n         lock = mBuffer = new StringBuilder();\n     }\n@@ -49,11 +50,13 @@ public void write(char[] cs) throws IOException {\n     @Override\n     public void write(char[] cs, int off, int len) throws IOException {\n         if ((off < 0) || (off > cs.length) || (len < 0) ||\n-                ((off + len) > cs.length) || ((off + len) < 0))\n+                ((off + len) > cs.length) || ((off + len) < 0)) {\n             throw new IndexOutOfBoundsException();\n+        }\n \n-        if (len > 0)\n+        if (len > 0) {\n             mBuffer.append(cs, off, len);\n+        }\n     }\n \n     @Override\n@@ -68,10 +71,11 @@ public void write(String str, int off, int len) {\n \n     @Override\n     public Writer append(CharSequence csq) {\n-        if (csq == null)\n+        if (csq == null) {\n             write(\"null\");\n-        else\n+        } else {\n             write(csq.toString());\n+        }\n         return this;\n     }\n ",
                "changes": 14
            },
            {
                "status": "modified",
                "additions": 78,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/GenericJSONConverter.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/json/GenericJSONConverter.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/json/GenericJSONConverter.java",
                "deletions": 30,
                "sha": "166c19288e60d21f32b99c635a81522e1b9892c9",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/GenericJSONConverter.java",
                "patch": "@@ -141,7 +141,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof Boolean) return ((Boolean) jv).booleanValue();\n+                if (jv instanceof Boolean) {\n+                    return ((Boolean) jv).booleanValue();\n+                }\n                 return false;\n             }\n         };\n@@ -150,7 +152,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof Boolean) return (Boolean) jv;\n+                if (jv instanceof Boolean) {\n+                    return (Boolean) jv;\n+                }\n                 return (Boolean) null;\n             }\n         };\n@@ -159,7 +163,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof String && ((String) jv).length() > 0) return ((String) jv).charAt(0);\n+                if (jv instanceof String && ((String) jv).length() > 0) {\n+                    return ((String) jv).charAt(0);\n+                }\n                 return (char) 0;\n             }\n         };\n@@ -168,7 +174,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof String && ((String) jv).length() > 0) return ((String) jv).charAt(0);\n+                if (jv instanceof String && ((String) jv).length() > 0) {\n+                    return ((String) jv).charAt(0);\n+                }\n                 return (Character) null;\n             }\n         };\n@@ -177,7 +185,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof Number) return ((Number) jv).intValue();\n+                if (jv instanceof Number) {\n+                    return ((Number) jv).intValue();\n+                }\n                 return 0;\n             }\n         };\n@@ -186,7 +196,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof Number) return Integer.valueOf(((Number) jv).intValue());\n+                if (jv instanceof Number) {\n+                    return Integer.valueOf(((Number) jv).intValue());\n+                }\n                 return (Integer) null;\n             }\n         };\n@@ -195,7 +207,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof Number) return ((Number) jv).shortValue();\n+                if (jv instanceof Number) {\n+                    return ((Number) jv).shortValue();\n+                }\n                 return (short) 0;\n             }\n         };\n@@ -204,7 +218,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof Number) return Short.valueOf(((Number) jv).shortValue());\n+                if (jv instanceof Number) {\n+                    return Short.valueOf(((Number) jv).shortValue());\n+                }\n                 return (Short) null;\n             }\n         };\n@@ -213,7 +229,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof Number) return ((Number) jv).longValue();\n+                if (jv instanceof Number) {\n+                    return ((Number) jv).longValue();\n+                }\n                 return (long) 0;\n             }\n         };\n@@ -222,7 +240,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof Number) return Long.valueOf(((Number) jv).longValue());\n+                if (jv instanceof Number) {\n+                    return Long.valueOf(((Number) jv).longValue());\n+                }\n                 return (Long) null;\n             }\n         };\n@@ -231,7 +251,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof Number) return ((Number) jv).floatValue();\n+                if (jv instanceof Number) {\n+                    return ((Number) jv).floatValue();\n+                }\n                 return (float) 0;\n             }\n         };\n@@ -240,7 +262,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof Number) return new Float(((Number) jv).floatValue());\n+                if (jv instanceof Number) {\n+                    return new Float(((Number) jv).floatValue());\n+                }\n                 return (Float) null;\n             }\n         };\n@@ -249,7 +273,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof Number) return ((Number) jv).doubleValue();\n+                if (jv instanceof Number) {\n+                    return ((Number) jv).doubleValue();\n+                }\n                 return (double) 0;\n             }\n         };\n@@ -258,7 +284,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof Number) return new Double(((Number) jv).doubleValue());\n+                if (jv instanceof Number) {\n+                    return new Double(((Number) jv).doubleValue());\n+                }\n                 return (Double) null;\n             }\n         };\n@@ -267,7 +295,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof Number) return ((Number) jv).byteValue();\n+                if (jv instanceof Number) {\n+                    return ((Number) jv).byteValue();\n+                }\n                 return (byte) 0;\n             }\n         };\n@@ -276,7 +306,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof Number) return Byte.valueOf(((Number) jv).byteValue());\n+                if (jv instanceof Number) {\n+                    return Byte.valueOf(((Number) jv).byteValue());\n+                }\n                 return (Byte) null;\n             }\n         };\n@@ -285,7 +317,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) throws IOException {\n-                if (jv instanceof String) return Bytes.base642bytes((String) jv);\n+                if (jv instanceof String) {\n+                    return Bytes.base642bytes((String) jv);\n+                }\n                 return (byte[]) null;\n             }\n         };\n@@ -310,7 +344,9 @@ public Object decode(Object jv) throws IOException {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) throws IOException {\n-                if (jv instanceof Number) return BigInteger.valueOf(((Number) jv).longValue());\n+                if (jv instanceof Number) {\n+                    return BigInteger.valueOf(((Number) jv).longValue());\n+                }\n                 return (BigInteger) null;\n             }\n         };\n@@ -319,7 +355,9 @@ public Object decode(Object jv) throws IOException {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) throws IOException {\n-                if (jv instanceof Number) return BigDecimal.valueOf(((Number) jv).doubleValue());\n+                if (jv instanceof Number) {\n+                    return BigDecimal.valueOf(((Number) jv).doubleValue());\n+                }\n                 return (BigDecimal) null;\n             }\n         };\n@@ -328,7 +366,9 @@ public Object decode(Object jv) throws IOException {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) throws IOException {\n-                if (jv instanceof Number) return new AtomicInteger(((Number) jv).intValue());\n+                if (jv instanceof Number) {\n+                    return new AtomicInteger(((Number) jv).intValue());\n+                }\n                 return (AtomicInteger) null;\n             }\n         };\n@@ -337,7 +377,9 @@ public Object decode(Object jv) throws IOException {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) throws IOException {\n-                if (jv instanceof Number) return new AtomicLong(((Number) jv).longValue());\n+                if (jv instanceof Number) {\n+                    return new AtomicLong(((Number) jv).longValue());\n+                }\n                 return (AtomicLong) null;\n             }\n         };\n@@ -353,8 +395,9 @@ public Object decode(Object jv) throws IOException {\n                         throw new IllegalArgumentException(e.getMessage(), e);\n                     }\n                 }\n-                if (jv instanceof Number)\n+                if (jv instanceof Number) {\n                     return new Date(((Number) jv).longValue());\n+                }\n                 return (Date) null;\n             }\n         };\n@@ -398,32 +441,36 @@ public void writeValue(Object obj, JSONWriter jb, boolean writeClass) throws IOE\n         } else if (c.isArray()) {\n             int len = Array.getLength(obj);\n             jb.arrayBegin();\n-            for (int i = 0; i < len; i++)\n+            for (int i = 0; i < len; i++) {\n                 writeValue(Array.get(obj, i), jb, writeClass);\n+            }\n             jb.arrayEnd();\n         } else if (Map.class.isAssignableFrom(c)) {\n             Object key, value;\n             jb.objectBegin();\n             for (Map.Entry<Object, Object> entry : ((Map<Object, Object>) obj).entrySet()) {\n                 key = entry.getKey();\n-                if (key == null)\n+                if (key == null) {\n                     continue;\n+                }\n                 jb.objectItem(key.toString());\n \n                 value = entry.getValue();\n-                if (value == null)\n+                if (value == null) {\n                     jb.valueNull();\n-                else\n+                } else {\n                     writeValue(value, jb, writeClass);\n+                }\n             }\n             jb.objectEnd();\n         } else if (Collection.class.isAssignableFrom(c)) {\n             jb.arrayBegin();\n             for (Object item : (Collection<Object>) obj) {\n-                if (item == null)\n+                if (item == null) {\n                     jb.valueNull();\n-                else\n+                } else {\n                     writeValue(item, jb, writeClass);\n+                }\n             }\n             jb.arrayEnd();\n         } else if(obj instanceof Locale) {\n@@ -446,10 +493,11 @@ public void writeValue(Object obj, JSONWriter jb, boolean writeClass) throws IOE\n                 jb.objectItem(pn);\n \n                 Object value = w.getPropertyValue(obj, pn);\n-                if (value == null || value == obj)\n+                if (value == null || value == obj) {\n                     jb.valueNull();\n-                else\n+                } else {\n                     writeValue(value, jb, writeClass);\n+                }\n             }\n             if (writeClass) {\n                 jb.objectItem(JSONVisitor.CLASS_PROPERTY);",
                "changes": 108
            },
            {
                "status": "modified",
                "additions": 53,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/J2oVisitor.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/json/J2oVisitor.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/json/J2oVisitor.java",
                "deletions": 24,
                "sha": "fdcf674c5904714729db66c2b50a0cac8654d340",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/J2oVisitor.java",
                "patch": "@@ -92,105 +92,131 @@ private static Object toArray(Class<?> c, Stack<Object> list, int len) throws Pa\n             }\r\n         }\r\n         if (c == boolean.class) {\r\n-            if (len == 0) return EMPTY_BOOL_ARRAY;\r\n+            if (len == 0) {\r\n+                return EMPTY_BOOL_ARRAY;\r\n+            }\r\n             Object o;\r\n             boolean[] ret = new boolean[len];\r\n             for (int i = len - 1; i >= 0; i--) {\r\n                 o = list.pop();\r\n-                if (o instanceof Boolean)\r\n+                if (o instanceof Boolean) {\r\n                     ret[i] = ((Boolean) o).booleanValue();\r\n+                }\r\n             }\r\n             return ret;\r\n         }\r\n         if (c == int.class) {\r\n-            if (len == 0) return EMPTY_INT_ARRAY;\r\n+            if (len == 0) {\r\n+                return EMPTY_INT_ARRAY;\r\n+            }\r\n             Object o;\r\n             int[] ret = new int[len];\r\n             for (int i = len - 1; i >= 0; i--) {\r\n                 o = list.pop();\r\n-                if (o instanceof Number)\r\n+                if (o instanceof Number) {\r\n                     ret[i] = ((Number) o).intValue();\r\n+                }\r\n             }\r\n             return ret;\r\n         }\r\n         if (c == long.class) {\r\n-            if (len == 0) return EMPTY_LONG_ARRAY;\r\n+            if (len == 0) {\r\n+                return EMPTY_LONG_ARRAY;\r\n+            }\r\n             Object o;\r\n             long[] ret = new long[len];\r\n             for (int i = len - 1; i >= 0; i--) {\r\n                 o = list.pop();\r\n-                if (o instanceof Number)\r\n+                if (o instanceof Number) {\r\n                     ret[i] = ((Number) o).longValue();\r\n+                }\r\n             }\r\n             return ret;\r\n         }\r\n         if (c == float.class) {\r\n-            if (len == 0) return EMPTY_FLOAT_ARRAY;\r\n+            if (len == 0) {\r\n+                return EMPTY_FLOAT_ARRAY;\r\n+            }\r\n             Object o;\r\n             float[] ret = new float[len];\r\n             for (int i = len - 1; i >= 0; i--) {\r\n                 o = list.pop();\r\n-                if (o instanceof Number)\r\n+                if (o instanceof Number) {\r\n                     ret[i] = ((Number) o).floatValue();\r\n+                }\r\n             }\r\n             return ret;\r\n         }\r\n         if (c == double.class) {\r\n-            if (len == 0) return EMPTY_DOUBLE_ARRAY;\r\n+            if (len == 0) {\r\n+                return EMPTY_DOUBLE_ARRAY;\r\n+            }\r\n             Object o;\r\n             double[] ret = new double[len];\r\n             for (int i = len - 1; i >= 0; i--) {\r\n                 o = list.pop();\r\n-                if (o instanceof Number)\r\n+                if (o instanceof Number) {\r\n                     ret[i] = ((Number) o).doubleValue();\r\n+                }\r\n             }\r\n             return ret;\r\n         }\r\n         if (c == byte.class) {\r\n-            if (len == 0) return EMPTY_BYTE_ARRAY;\r\n+            if (len == 0) {\r\n+                return EMPTY_BYTE_ARRAY;\r\n+            }\r\n             Object o;\r\n             byte[] ret = new byte[len];\r\n             for (int i = len - 1; i >= 0; i--) {\r\n                 o = list.pop();\r\n-                if (o instanceof Number)\r\n+                if (o instanceof Number) {\r\n                     ret[i] = ((Number) o).byteValue();\r\n+                }\r\n             }\r\n             return ret;\r\n         }\r\n         if (c == char.class) {\r\n-            if (len == 0) return EMPTY_CHAR_ARRAY;\r\n+            if (len == 0) {\r\n+                return EMPTY_CHAR_ARRAY;\r\n+            }\r\n             Object o;\r\n             char[] ret = new char[len];\r\n             for (int i = len - 1; i >= 0; i--) {\r\n                 o = list.pop();\r\n-                if (o instanceof Character)\r\n+                if (o instanceof Character) {\r\n                     ret[i] = ((Character) o).charValue();\r\n+                }\r\n             }\r\n             return ret;\r\n         }\r\n         if (c == short.class) {\r\n-            if (len == 0) return EMPTY_SHORT_ARRAY;\r\n+            if (len == 0) {\r\n+                return EMPTY_SHORT_ARRAY;\r\n+            }\r\n             Object o;\r\n             short[] ret = new short[len];\r\n             for (int i = len - 1; i >= 0; i--) {\r\n                 o = list.pop();\r\n-                if (o instanceof Number)\r\n+                if (o instanceof Number) {\r\n                     ret[i] = ((Number) o).shortValue();\r\n+                }\r\n             }\r\n             return ret;\r\n         }\r\n \r\n         Object ret = Array.newInstance(c, len);\r\n-        for (int i = len - 1; i >= 0; i--)\r\n+        for (int i = len - 1; i >= 0; i--) {\r\n             Array.set(ret, i, list.pop());\r\n+        }\r\n         return ret;\r\n     }\r\n \r\n     private static String name(Class<?>[] types) {\r\n         StringBuilder sb = new StringBuilder();\r\n         for (int i = 0; i < types.length; i++) {\r\n-            if (i > 0)\r\n+            if (i > 0) {\r\n                 sb.append(\", \");\r\n+            }\r\n             sb.append(types[i].getName());\r\n         }\r\n         return sb.toString();\r\n@@ -294,12 +320,13 @@ public void objectItemValue(Object obj, boolean isValue) throws ParseException {\n     public void arrayBegin() throws ParseException {\r\n         mStack.push(mType);\r\n \r\n-        if (mType.isArray())\r\n+        if (mType.isArray()) {\r\n             mType = mType.getComponentType();\r\n-        else if (mType == Object.class || Collection.class.isAssignableFrom(mType))\r\n+        } else if (mType == Object.class || Collection.class.isAssignableFrom(mType)) {\r\n             mType = Object.class;\r\n-        else\r\n+        } else {\r\n             throw new ParseException(\"Convert error, can not load json array data into class [\" + mType.getName() + \"].\");\r\n+        }\r\n     }\r\n \r\n     @Override\r\n@@ -331,8 +358,9 @@ public Object arrayEnd(int count) throws ParseException {\n             } else {\r\n                 throw new ParseException(\"Convert error, can not load json array data into class [\" + mType.getName() + \"].\");\r\n             }\r\n-            for (int i = 0; i < count; i++)\r\n+            for (int i = 0; i < count; i++) {\r\n                 items.add(mStack.remove(i - count));\r\n+            }\r\n             ret = items;\r\n         }\r\n         mStack.pop();\r\n@@ -342,10 +370,11 @@ public Object arrayEnd(int count) throws ParseException {\n     @Override\r\n     public void arrayItem(int index) throws ParseException {\r\n         if (mTypes != null && mStack.size() == index + 1) {\r\n-            if (index < mTypes.length)\r\n+            if (index < mTypes.length) {\r\n                 mType = mTypes[index];\r\n-            else\r\n+            } else {\r\n                 throw new ParseException(\"Can not load json array data into [\" + name(mTypes) + \"].\");\r\n+            }\r\n         }\r\n     }\r\n \r",
                "changes": 77
            },
            {
                "status": "modified",
                "additions": 18,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSON.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSON.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/json/JSON.java",
                "deletions": 10,
                "sha": "1d3aa8891d255ed1bb6b01d87949e137c6467fcf",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSON.java",
                "patch": "@@ -52,7 +52,9 @@ private JSON() {\n      * @throws IOException\r\n      */\r\n     public static String json(Object obj) throws IOException {\r\n-        if (obj == null) return NULL;\r\n+        if (obj == null) {\r\n+            return NULL;\r\n+        }\r\n         StringWriter sw = new StringWriter();\r\n         try {\r\n             json(obj, sw);\r\n@@ -74,10 +76,11 @@ public static void json(Object obj, Writer writer) throws IOException {\n     }\r\n \r\n     public static void json(Object obj, Writer writer, boolean writeClass) throws IOException {\r\n-        if (obj == null)\r\n+        if (obj == null) {\r\n             writer.write(NULL);\r\n-        else\r\n+        } else {\r\n             json(obj, new JSONWriter(writer), writeClass);\r\n+        }\r\n     }\r\n \r\n     /**\r\n@@ -89,7 +92,9 @@ public static void json(Object obj, Writer writer, boolean writeClass) throws IO\n      * @throws IOException\r\n      */\r\n     public static String json(Object obj, String[] properties) throws IOException {\r\n-        if (obj == null) return NULL;\r\n+        if (obj == null) {\r\n+            return NULL;\r\n+        }\r\n         StringWriter sw = new StringWriter();\r\n         try {\r\n             json(obj, properties, sw);\r\n@@ -112,17 +117,19 @@ public static void json(Object obj, final String[] properties, Writer writer) th\n      * @throws IOException\r\n      */\r\n     public static void json(Object obj, final String[] properties, Writer writer, boolean writeClass) throws IOException {\r\n-        if (obj == null)\r\n+        if (obj == null) {\r\n             writer.write(NULL);\r\n-        else\r\n+        } else {\r\n             json(obj, properties, new JSONWriter(writer), writeClass);\r\n+        }\r\n     }\r\n \r\n     private static void json(Object obj, JSONWriter jb, boolean writeClass) throws IOException {\r\n-        if (obj == null)\r\n+        if (obj == null) {\r\n             jb.valueNull();\r\n-        else\r\n+        } else {\r\n             DEFAULT_CONVERTER.writeValue(obj, jb, writeClass);\r\n+        }\r\n     }\r\n \r\n     private static void json(Object obj, String[] properties, JSONWriter jb, boolean writeClass) throws IOException {\r\n@@ -136,10 +143,11 @@ private static void json(Object obj, String[] properties, JSONWriter jb, boolean\n             for (String prop : properties) {\r\n                 jb.objectItem(prop);\r\n                 value = wrapper.getPropertyValue(obj, prop);\r\n-                if (value == null)\r\n+                if (value == null) {\r\n                     jb.valueNull();\r\n-                else\r\n+                } else {\r\n                     DEFAULT_CONVERTER.writeValue(value, jb, writeClass);\r\n+                }\r\n             }\r\n             jb.objectEnd();\r\n         }\r",
                "changes": 28
            },
            {
                "status": "modified",
                "additions": 5,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONArray.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONArray.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONArray.java",
                "deletions": 3,
                "sha": "f5e039c3be88d44b841e8c408b596368e3d83344",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONArray.java",
                "patch": "@@ -151,8 +151,9 @@ public void add(Object ele) {\n      * add items.\r\n      */\r\n     public void addAll(Object[] eles) {\r\n-        for (Object ele : eles)\r\n+        for (Object ele : eles) {\r\n             mArray.add(ele);\r\n+        }\r\n     }\r\n \r\n     /**\r\n@@ -172,10 +173,11 @@ public void addAll(Collection<?> c) {\n     public void writeJSON(JSONConverter jc, JSONWriter jb, boolean writeClass) throws IOException {\r\n         jb.arrayBegin();\r\n         for (Object item : mArray) {\r\n-            if (item == null)\r\n+            if (item == null) {\r\n                 jb.valueNull();\r\n-            else\r\n+            } else {\r\n                 jc.writeValue(item, jb, writeClass);\r\n+            }\r\n         }\r\n         jb.arrayEnd();\r\n     }\r",
                "changes": 8
            },
            {
                "status": "modified",
                "additions": 7,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONObject.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONObject.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONObject.java",
                "deletions": 4,
                "sha": "052f35269dde74d811115532ff259baf7b7ad37d",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONObject.java",
                "patch": "@@ -167,8 +167,9 @@ public void put(String name, Object value) {\n      * @param values value array.\r\n      */\r\n     public void putAll(String[] names, Object[] values) {\r\n-        for (int i = 0, len = Math.min(names.length, values.length); i < len; i++)\r\n+        for (int i = 0, len = Math.min(names.length, values.length); i < len; i++) {\r\n             mMap.put(names[i], values[i]);\r\n+        }\r\n     }\r\n \r\n     /**\r\n@@ -177,8 +178,9 @@ public void putAll(String[] names, Object[] values) {\n      * @param map map.\r\n      */\r\n     public void putAll(Map<String, Object> map) {\r\n-        for (Map.Entry<String, Object> entry : map.entrySet())\r\n+        for (Map.Entry<String, Object> entry : map.entrySet()) {\r\n             mMap.put(entry.getKey(), entry.getValue());\r\n+        }\r\n     }\r\n \r\n     /**\r\n@@ -196,10 +198,11 @@ public void writeJSON(JSONConverter jc, JSONWriter jb, boolean writeClass) throw\n             key = entry.getKey();\r\n             jb.objectItem(key);\r\n             value = entry.getValue();\r\n-            if (value == null)\r\n+            if (value == null) {\r\n                 jb.valueNull();\r\n-            else\r\n+            } else {\r\n                 jc.writeValue(value, jb, writeClass);\r\n+            }\r\n         }\r\n         jb.objectEnd();\r\n     }\r",
                "changes": 11
            },
            {
                "status": "modified",
                "additions": 4,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONReader.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONReader.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONReader.java",
                "deletions": 2,
                "sha": "616a15f5972dff766f06de39cb33be31c16ddee3",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONReader.java",
                "patch": "@@ -57,10 +57,12 @@ public JSONToken nextToken() throws IOException, ParseException {\n \n     public JSONToken nextToken(int expect) throws IOException, ParseException {\n         JSONToken ret = mLex.yylex();\n-        if (ret == null)\n+        if (ret == null) {\n             throw new ParseException(\"EOF error.\");\n-        if (expect != JSONToken.ANY && expect != ret.type)\n+        }\n+        if (expect != JSONToken.ANY && expect != ret.type) {\n             throw new ParseException(\"Unexpected token.\");\n+        }\n         return ret;\n     }\n }\n\\ No newline at end of file",
                "changes": 6
            },
            {
                "status": "modified",
                "additions": 10,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONWriter.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONWriter.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONWriter.java",
                "deletions": 5,
                "sha": "094832134c08f18b8a87d084ff85dd071291de1a",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONWriter.java",
                "patch": "@@ -53,11 +53,13 @@ public JSONWriter(OutputStream is, String charset) throws UnsupportedEncodingExc\n     }\r\n \r\n     private static String escape(String str) {\r\n-        if (str == null)\r\n+        if (str == null) {\r\n             return str;\r\n+        }\r\n         int len = str.length();\r\n-        if (len == 0)\r\n+        if (len == 0) {\r\n             return str;\r\n+        }\r\n \r\n         char c;\r\n         StringBuilder sb = null;\r\n@@ -82,8 +84,9 @@ private static String escape(String str) {\n                         sb.append('\\\\').append(c);\r\n                         break;\r\n                     default:\r\n-                        if (sb != null)\r\n+                        if (sb != null) {\r\n                             sb.append(c);\r\n+                        }\r\n                 }\r\n             }\r\n         }\r\n@@ -263,8 +266,9 @@ public JSONWriter valueDouble(double value) throws IOException {\n     private void beforeValue() throws IOException {\r\n         switch (mState.type) {\r\n             case ARRAY:\r\n-                if (mState.itemCount++ > 0)\r\n+                if (mState.itemCount++ > 0) {\r\n                     mWriter.write(JSON.COMMA);\r\n+                }\r\n                 return;\r\n             case OBJECT:\r\n                 throw new IOException(\"Must call objectItem first.\");\r\n@@ -280,8 +284,9 @@ private void beforeObjectItem() throws IOException {\n                 mWriter.write(JSON.NULL);\r\n             case OBJECT:\r\n                 mState.type = OBJECT_VALUE;\r\n-                if (mState.itemCount++ > 0)\r\n+                if (mState.itemCount++ > 0) {\r\n                     mWriter.write(JSON.COMMA);\r\n+                }\r\n                 return;\r\n             default:\r\n                 throw new IOException(\"Must call objectBegin first.\");\r",
                "changes": 15
            },
            {
                "status": "modified",
                "additions": 21,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java",
                "deletions": 9,
                "sha": "8abb42d1ab2a263c53a750d26778b69be5d7f053",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java",
                "patch": "@@ -340,7 +340,9 @@ private static int zzUnpackAction(String packed, int offset, int[] result) {\n         while (i < l) {\n             int count = packed.charAt(i++);\n             int value = packed.charAt(i++);\n-            do result[j++] = value; while (--count > 0);\n+            do {\n+                result[j++] = value;\n+            } while (--count > 0);\n         }\n         return j;\n     }\n@@ -393,7 +395,9 @@ private static int zzUnpackAttribute(String packed, int offset, int[] result) {\n         while (i < l) {\n             int count = packed.charAt(i++);\n             int value = packed.charAt(i++);\n-            do result[j++] = value; while (--count > 0);\n+            do {\n+                result[j++] = value;\n+            } while (--count > 0);\n         }\n         return j;\n     }\n@@ -411,7 +415,9 @@ private static int zzUnpackAttribute(String packed, int offset, int[] result) {\n         while (i < 122) {\n             int count = packed.charAt(i++);\n             char value = packed.charAt(i++);\n-            do map[j++] = value; while (--count > 0);\n+            do {\n+                map[j++] = value;\n+            } while (--count > 0);\n         }\n         return map;\n     }\n@@ -477,8 +483,9 @@ public final void yyclose() throws java.io.IOException {\n         zzAtEOF = true;            /* indicate end of file */\n         zzEndRead = zzStartRead;  /* invalidate buffer    */\n \n-        if (zzReader != null)\n+        if (zzReader != null) {\n             zzReader.close();\n+        }\n     }\n \n \n@@ -588,8 +595,9 @@ private void zzScanError(int errorCode) {\n      *               This number must not be greater than yylength()!\n      */\n     public void yypushback(int number) {\n-        if (number > yylength())\n+        if (number > yylength()) {\n             zzScanError(ZZ_PUSHBACK_2BIG);\n+        }\n \n         zzMarkedPos -= number;\n     }\n@@ -631,9 +639,9 @@ public JSONToken yylex() throws java.io.IOException, ParseException {\n             {\n                 while (true) {\n \n-                    if (zzCurrentPosL < zzEndReadL)\n+                    if (zzCurrentPosL < zzEndReadL) {\n                         zzInput = zzBufferL[zzCurrentPosL++];\n-                    else if (zzAtEOF) {\n+                    } else if (zzAtEOF) {\n                         zzInput = YYEOF;\n                         break zzForAction;\n                     } else {\n@@ -654,14 +662,18 @@ else if (zzAtEOF) {\n                         }\n                     }\n                     int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];\n-                    if (zzNext == -1) break zzForAction;\n+                    if (zzNext == -1) {\n+                        break zzForAction;\n+                    }\n                     zzState = zzNext;\n \n                     int zzAttributes = zzAttrL[zzState];\n                     if ((zzAttributes & 1) == 1) {\n                         zzAction = zzState;\n                         zzMarkedPosL = zzCurrentPosL;\n-                        if ((zzAttributes & 8) == 8) break zzForAction;\n+                        if ((zzAttributes & 8) == 8) {\n+                            break zzForAction;\n+                        }\n                     }\n \n                 }",
                "changes": 30
            },
            {
                "status": "modified",
                "additions": 24,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/logger/jdk/JdkLoggerAdapter.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/logger/jdk/JdkLoggerAdapter.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/logger/jdk/JdkLoggerAdapter.java",
                "deletions": 12,
                "sha": "19041304b1164baacd20427a3b6f226e04f3eccd",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/logger/jdk/JdkLoggerAdapter.java",
                "patch": "@@ -61,35 +61,47 @@ public JdkLoggerAdapter() {\n     }\n \n     private static java.util.logging.Level toJdkLevel(Level level) {\n-        if (level == Level.ALL)\n+        if (level == Level.ALL) {\n             return java.util.logging.Level.ALL;\n-        if (level == Level.TRACE)\n+        }\n+        if (level == Level.TRACE) {\n             return java.util.logging.Level.FINER;\n-        if (level == Level.DEBUG)\n+        }\n+        if (level == Level.DEBUG) {\n             return java.util.logging.Level.FINE;\n-        if (level == Level.INFO)\n+        }\n+        if (level == Level.INFO) {\n             return java.util.logging.Level.INFO;\n-        if (level == Level.WARN)\n+        }\n+        if (level == Level.WARN) {\n             return java.util.logging.Level.WARNING;\n-        if (level == Level.ERROR)\n+        }\n+        if (level == Level.ERROR) {\n             return java.util.logging.Level.SEVERE;\n+        }\n         // if (level == Level.OFF)\n         return java.util.logging.Level.OFF;\n     }\n \n     private static Level fromJdkLevel(java.util.logging.Level level) {\n-        if (level == java.util.logging.Level.ALL)\n+        if (level == java.util.logging.Level.ALL) {\n             return Level.ALL;\n-        if (level == java.util.logging.Level.FINER)\n+        }\n+        if (level == java.util.logging.Level.FINER) {\n             return Level.TRACE;\n-        if (level == java.util.logging.Level.FINE)\n+        }\n+        if (level == java.util.logging.Level.FINE) {\n             return Level.DEBUG;\n-        if (level == java.util.logging.Level.INFO)\n+        }\n+        if (level == java.util.logging.Level.INFO) {\n             return Level.INFO;\n-        if (level == java.util.logging.Level.WARNING)\n+        }\n+        if (level == java.util.logging.Level.WARNING) {\n             return Level.WARN;\n-        if (level == java.util.logging.Level.SEVERE)\n+        }\n+        if (level == java.util.logging.Level.SEVERE) {\n             return Level.ERROR;\n+        }\n         // if (level == java.util.logging.Level.OFF)\n         return Level.OFF;\n     }",
                "changes": 36
            },
            {
                "status": "modified",
                "additions": 24,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/logger/log4j/Log4jLoggerAdapter.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/logger/log4j/Log4jLoggerAdapter.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/logger/log4j/Log4jLoggerAdapter.java",
                "deletions": 12,
                "sha": "5febaf2501d59f599b9f95306dc880958070d7fd",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/logger/log4j/Log4jLoggerAdapter.java",
                "patch": "@@ -54,35 +54,47 @@ public Log4jLoggerAdapter() {\n     }\n \n     private static org.apache.log4j.Level toLog4jLevel(Level level) {\n-        if (level == Level.ALL)\n+        if (level == Level.ALL) {\n             return org.apache.log4j.Level.ALL;\n-        if (level == Level.TRACE)\n+        }\n+        if (level == Level.TRACE) {\n             return org.apache.log4j.Level.TRACE;\n-        if (level == Level.DEBUG)\n+        }\n+        if (level == Level.DEBUG) {\n             return org.apache.log4j.Level.DEBUG;\n-        if (level == Level.INFO)\n+        }\n+        if (level == Level.INFO) {\n             return org.apache.log4j.Level.INFO;\n-        if (level == Level.WARN)\n+        }\n+        if (level == Level.WARN) {\n             return org.apache.log4j.Level.WARN;\n-        if (level == Level.ERROR)\n+        }\n+        if (level == Level.ERROR) {\n             return org.apache.log4j.Level.ERROR;\n+        }\n         // if (level == Level.OFF)\n         return org.apache.log4j.Level.OFF;\n     }\n \n     private static Level fromLog4jLevel(org.apache.log4j.Level level) {\n-        if (level == org.apache.log4j.Level.ALL)\n+        if (level == org.apache.log4j.Level.ALL) {\n             return Level.ALL;\n-        if (level == org.apache.log4j.Level.TRACE)\n+        }\n+        if (level == org.apache.log4j.Level.TRACE) {\n             return Level.TRACE;\n-        if (level == org.apache.log4j.Level.DEBUG)\n+        }\n+        if (level == org.apache.log4j.Level.DEBUG) {\n             return Level.DEBUG;\n-        if (level == org.apache.log4j.Level.INFO)\n+        }\n+        if (level == org.apache.log4j.Level.INFO) {\n             return Level.INFO;\n-        if (level == org.apache.log4j.Level.WARN)\n+        }\n+        if (level == org.apache.log4j.Level.WARN) {\n             return Level.WARN;\n-        if (level == org.apache.log4j.Level.ERROR)\n+        }\n+        if (level == org.apache.log4j.Level.ERROR) {\n             return Level.ERROR;\n+        }\n         // if (level == org.apache.log4j.Level.OFF)\n         return Level.OFF;\n     }",
                "changes": 36
            },
            {
                "status": "modified",
                "additions": 3,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/store/support/SimpleDataStore.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/store/support/SimpleDataStore.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/store/support/SimpleDataStore.java",
                "deletions": 1,
                "sha": "d60cc5d131650a0442b0c1b6f0fa15c6db2340f4",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/store/support/SimpleDataStore.java",
                "patch": "@@ -33,7 +33,9 @@\n     @Override\n     public Map<String, Object> get(String componentName) {\n         ConcurrentMap<String, Object> value = data.get(componentName);\n-        if (value == null) return new HashMap<String, Object>();\n+        if (value == null) {\n+            return new HashMap<String, Object>();\n+        }\n \n         return new HashMap<String, Object>(value);\n     }",
                "changes": 4
            },
            {
                "status": "modified",
                "additions": 6,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/AtomicPositiveInteger.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/AtomicPositiveInteger.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/AtomicPositiveInteger.java",
                "deletions": 2,
                "sha": "4a13c6c4acd5c733c8303fea4e744bde182d9d0d",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/AtomicPositiveInteger.java",
                "patch": "@@ -142,8 +142,12 @@ public int hashCode() {\n \r\n     @Override\r\n     public boolean equals(Object obj) {\r\n-        if (this == obj) return true;\r\n-        if (!(obj instanceof AtomicPositiveInteger)) return false;\r\n+        if (this == obj) {\r\n+            return true;\r\n+        }\r\n+        if (!(obj instanceof AtomicPositiveInteger)) {\r\n+            return false;\r\n+        }\r\n         AtomicPositiveInteger other = (AtomicPositiveInteger) obj;\r\n         return intValue() == other.intValue();\r\n     }\r",
                "changes": 8
            },
            {
                "status": "modified",
                "additions": 3,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/CollectionUtils.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/CollectionUtils.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/CollectionUtils.java",
                "deletions": 1,
                "sha": "cd5414b704e4f1d1a775cf3e5ecfcf7290fec456",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/CollectionUtils.java",
                "patch": "@@ -187,7 +187,9 @@ private static boolean objectEquals(Object obj1, Object obj2) {\n     @SuppressWarnings(\"unchecked\")\r\n     public static <K, V> Map<K, V> toMap(Object... pairs) {\r\n         Map<K, V> ret = new HashMap<K, V>();\r\n-        if (pairs == null || pairs.length == 0) return ret;\r\n+        if (pairs == null || pairs.length == 0) {\r\n+            return ret;\r\n+        }\r\n \r\n         if (pairs.length % 2 != 0) {\r\n             throw new IllegalArgumentException(\"Map pairs can not be odd number.\");\r",
                "changes": 4
            },
            {
                "status": "modified",
                "additions": 10,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/IOUtils.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/IOUtils.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/IOUtils.java",
                "deletions": 5,
                "sha": "14d5b81ea3cdbe29a2cf29cea78a044a55531f0d",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/IOUtils.java",
                "patch": "@@ -147,8 +147,9 @@ public static long write(Reader reader, Writer writer, int bufferSize) throws IO\n      * @throws IOException\r\n      */\r\n     public static String[] readLines(File file) throws IOException {\r\n-        if (file == null || !file.exists() || !file.canRead())\r\n+        if (file == null || !file.exists() || !file.canRead()) {\r\n             return new String[0];\r\n+        }\r\n \r\n         return readLines(new FileInputStream(file));\r\n     }\r\n@@ -165,8 +166,9 @@ public static long write(Reader reader, Writer writer, int bufferSize) throws IO\n         BufferedReader reader = new BufferedReader(new InputStreamReader(is));\r\n         try {\r\n             String line;\r\n-            while ((line = reader.readLine()) != null)\r\n+            while ((line = reader.readLine()) != null) {\r\n                 lines.add(line);\r\n+            }\r\n             return lines.toArray(new String[0]);\r\n         } finally {\r\n             reader.close();\r\n@@ -183,8 +185,9 @@ public static long write(Reader reader, Writer writer, int bufferSize) throws IO\n     public static void writeLines(OutputStream os, String[] lines) throws IOException {\r\n         PrintWriter writer = new PrintWriter(new OutputStreamWriter(os));\r\n         try {\r\n-            for (String line : lines)\r\n+            for (String line : lines) {\r\n                 writer.println(line);\r\n+            }\r\n             writer.flush();\r\n         } finally {\r\n             writer.close();\r\n@@ -199,8 +202,9 @@ public static void writeLines(OutputStream os, String[] lines) throws IOExceptio\n      * @throws IOException\r\n      */\r\n     public static void writeLines(File file, String[] lines) throws IOException {\r\n-        if (file == null)\r\n+        if (file == null) {\r\n             throw new IOException(\"File is null.\");\r\n+        }\r\n         writeLines(new FileOutputStream(file), lines);\r\n     }\r\n \r\n@@ -212,8 +216,9 @@ public static void writeLines(File file, String[] lines) throws IOException {\n      * @throws IOException\r\n      */\r\n     public static void appendLines(File file, String[] lines) throws IOException {\r\n-        if (file == null)\r\n+        if (file == null) {\r\n             throw new IOException(\"File is null.\");\r\n+        }\r\n         writeLines(new FileOutputStream(file, true), lines);\r\n     }\r\n \r",
                "changes": 15
            },
            {
                "status": "modified",
                "additions": 33,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/Log.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/Log.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/Log.java",
                "deletions": 11,
                "sha": "974058ffb1e7f4d543f4b591d07b032c5aa00f41",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/Log.java",
                "patch": "@@ -72,22 +72,44 @@ public int hashCode() {\n \r\n     @Override\r\n     public boolean equals(Object obj) {\r\n-        if (this == obj) return true;\r\n-        if (obj == null) return false;\r\n-        if (getClass() != obj.getClass()) return false;\r\n+        if (this == obj) {\r\n+            return true;\r\n+        }\r\n+        if (obj == null) {\r\n+            return false;\r\n+        }\r\n+        if (getClass() != obj.getClass()) {\r\n+            return false;\r\n+        }\r\n         Log other = (Log) obj;\r\n         if (logLevel == null) {\r\n-            if (other.logLevel != null) return false;\r\n-        } else if (!logLevel.equals(other.logLevel)) return false;\r\n+            if (other.logLevel != null) {\r\n+                return false;\r\n+            }\r\n+        } else if (!logLevel.equals(other.logLevel)) {\r\n+            return false;\r\n+        }\r\n         if (logMessage == null) {\r\n-            if (other.logMessage != null) return false;\r\n-        } else if (!logMessage.equals(other.logMessage)) return false;\r\n+            if (other.logMessage != null) {\r\n+                return false;\r\n+            }\r\n+        } else if (!logMessage.equals(other.logMessage)) {\r\n+            return false;\r\n+        }\r\n         if (logName == null) {\r\n-            if (other.logName != null) return false;\r\n-        } else if (!logName.equals(other.logName)) return false;\r\n+            if (other.logName != null) {\r\n+                return false;\r\n+            }\r\n+        } else if (!logName.equals(other.logName)) {\r\n+            return false;\r\n+        }\r\n         if (logThread == null) {\r\n-            if (other.logThread != null) return false;\r\n-        } else if (!logThread.equals(other.logThread)) return false;\r\n+            if (other.logThread != null) {\r\n+                return false;\r\n+            }\r\n+        } else if (!logThread.equals(other.logThread)) {\r\n+            return false;\r\n+        }\r\n         return true;\r\n     }\r\n \r",
                "changes": 44
            },
            {
                "status": "modified",
                "additions": 17,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/LogUtil.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/LogUtil.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/LogUtil.java",
                "deletions": 6,
                "sha": "6b5eff58c2d398c266df74d932f01a0c1ec733c9",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/LogUtil.java",
                "patch": "@@ -50,7 +50,9 @@ public static int findName(String expectedLogName) {\n         List<Log> logList = DubboAppender.logList;\r\n         for (int i = 0; i < logList.size(); i++) {\r\n             String logName = logList.get(i).getLogName();\r\n-            if (logName.contains(expectedLogName)) count++;\r\n+            if (logName.contains(expectedLogName)) {\r\n+                count++;\r\n+            }\r\n         }\r\n         return count;\r\n     }\r\n@@ -60,7 +62,9 @@ public static int findLevel(Level expectedLevel) {\n         List<Log> logList = DubboAppender.logList;\r\n         for (int i = 0; i < logList.size(); i++) {\r\n             Level logLevel = logList.get(i).getLogLevel();\r\n-            if (logLevel.equals(expectedLevel)) count++;\r\n+            if (logLevel.equals(expectedLevel)) {\r\n+                count++;\r\n+            }\r\n         }\r\n         return count;\r\n     }\r\n@@ -70,8 +74,9 @@ public static int findLevelWithThreadName(Level expectedLevel, String threadName\n         List<Log> logList = DubboAppender.logList;\r\n         for (int i = 0; i < logList.size(); i++) {\r\n             Log log = logList.get(i);\r\n-            if (log.getLogLevel().equals(expectedLevel) && log.getLogThread().equals(threadName))\r\n+            if (log.getLogLevel().equals(expectedLevel) && log.getLogThread().equals(threadName)) {\r\n                 count++;\r\n+            }\r\n         }\r\n         return count;\r\n     }\r\n@@ -81,7 +86,9 @@ public static int findThread(String expectedThread) {\n         List<Log> logList = DubboAppender.logList;\r\n         for (int i = 0; i < logList.size(); i++) {\r\n             String logThread = logList.get(i).getLogThread();\r\n-            if (logThread.contains(expectedThread)) count++;\r\n+            if (logThread.contains(expectedThread)) {\r\n+                count++;\r\n+            }\r\n         }\r\n         return count;\r\n     }\r\n@@ -91,7 +98,9 @@ public static int findMessage(String expectedMessage) {\n         List<Log> logList = DubboAppender.logList;\r\n         for (int i = 0; i < logList.size(); i++) {\r\n             String logMessage = logList.get(i).getLogMessage();\r\n-            if (logMessage.contains(expectedMessage)) count++;\r\n+            if (logMessage.contains(expectedMessage)) {\r\n+                count++;\r\n+            }\r\n         }\r\n         return count;\r\n     }\r\n@@ -103,7 +112,9 @@ public static int findMessage(Level expectedLevel, String expectedMessage) {\n             Level logLevel = logList.get(i).getLogLevel();\r\n             if (logLevel.equals(expectedLevel)) {\r\n                 String logMessage = logList.get(i).getLogMessage();\r\n-                if (logMessage.contains(expectedMessage)) count++;\r\n+                if (logMessage.contains(expectedMessage)) {\r\n+                    count++;\r\n+                }\r\n             }\r\n         }\r\n         return count;\r",
                "changes": 23
            },
            {
                "status": "modified",
                "additions": 6,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/NetUtils.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/NetUtils.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/NetUtils.java",
                "deletions": 3,
                "sha": "29d79a30f0fbf1522bdf705a97f60a9e8f4cfd5c",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/NetUtils.java",
                "patch": "@@ -134,8 +134,9 @@ public static InetSocketAddress getLocalSocketAddress(String host, int port) {\n     }\r\n \r\n     static boolean isValidAddress(InetAddress address) {\r\n-        if (address == null || address.isLoopbackAddress())\r\n+        if (address == null || address.isLoopbackAddress()) {\r\n             return false;\r\n+        }\r\n         String name = address.getHostAddress();\r\n         return (name != null\r\n                 && !ANYHOST.equals(name)\r\n@@ -221,8 +222,9 @@ public static String filterLocalHost(String host) {\n      * @return first valid local IP\r\n      */\r\n     public static InetAddress getLocalAddress() {\r\n-        if (LOCAL_ADDRESS != null)\r\n+        if (LOCAL_ADDRESS != null) {\r\n             return LOCAL_ADDRESS;\r\n+        }\r\n         InetAddress localAddress = getLocalAddress0();\r\n         LOCAL_ADDRESS = localAddress;\r\n         return localAddress;\r\n@@ -333,8 +335,9 @@ public static String toURL(String protocol, String host, int port, String path)\n         StringBuilder sb = new StringBuilder();\r\n         sb.append(protocol).append(\"://\");\r\n         sb.append(host).append(':').append(port);\r\n-        if (path.charAt(0) != '/')\r\n+        if (path.charAt(0) != '/') {\r\n             sb.append('/');\r\n+        }\r\n         sb.append(path);\r\n         return sb.toString();\r\n     }\r",
                "changes": 9
            },
            {
                "status": "modified",
                "additions": 4,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java",
                "deletions": 2,
                "sha": "9c3f774ab387dddaf80ab56f710a9d567e7754c3",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java",
                "patch": "@@ -82,8 +82,9 @@\n     }\r\n \r\n     public static Object[] realize(Object[] objs, Class<?>[] types, Type[] gtypes) {\r\n-        if (objs.length != types.length || objs.length != gtypes.length)\r\n+        if (objs.length != types.length || objs.length != gtypes.length) {\r\n             throw new IllegalArgumentException(\"args.length != types.length\");\r\n+        }\r\n         Object[] dests = new Object[objs.length];\r\n         for (int i = 0; i < objs.length; i++) {\r\n             dests[i] = realize(objs[i], types[i], gtypes[i]);\r\n@@ -448,8 +449,9 @@ private static Object realize0(Object pojo, Class<?> type, Type genericType, fin\n                             Method method = getSetterMethod(dest.getClass(), name, value.getClass());\r\n                             Field field = getField(dest.getClass(), name);\r\n                             if (method != null) {\r\n-                                if (!method.isAccessible())\r\n+                                if (!method.isAccessible()) {\r\n                                     method.setAccessible(true);\r\n+                                }\r\n                                 Type ptype = method.getGenericParameterTypes()[0];\r\n                                 value = realize0(value, method.getParameterTypes()[0], ptype, history);\r\n                                 try {\r",
                "changes": 6
            },
            {
                "status": "modified",
                "additions": 167,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/ReflectUtils.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/ReflectUtils.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/ReflectUtils.java",
                "deletions": 83,
                "sha": "20e091acc45382aa452206c2a69ec08d41fefb8a",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/ReflectUtils.java",
                "patch": "@@ -138,22 +138,23 @@ public static boolean isPrimitive(Class<?> cls) {\n     }\r\n \r\n     public static Class<?> getBoxedClass(Class<?> c) {\r\n-        if (c == int.class)\r\n+        if (c == int.class) {\r\n             c = Integer.class;\r\n-        else if (c == boolean.class)\r\n+        } else if (c == boolean.class) {\r\n             c = Boolean.class;\r\n-        else if (c == long.class)\r\n+        } else if (c == long.class) {\r\n             c = Long.class;\r\n-        else if (c == float.class)\r\n+        } else if (c == float.class) {\r\n             c = Float.class;\r\n-        else if (c == double.class)\r\n+        } else if (c == double.class) {\r\n             c = Double.class;\r\n-        else if (c == char.class)\r\n+        } else if (c == char.class) {\r\n             c = Character.class;\r\n-        else if (c == byte.class)\r\n+        } else if (c == byte.class) {\r\n             c = Byte.class;\r\n-        else if (c == short.class)\r\n+        } else if (c == short.class) {\r\n             c = Short.class;\r\n+        }\r\n         return c;\r\n     }\r\n \r\n@@ -186,25 +187,36 @@ public static boolean isCompatible(Class<?> c, Object o) {\n      */\r\n     public static boolean isCompatible(Class<?>[] cs, Object[] os) {\r\n         int len = cs.length;\r\n-        if (len != os.length) return false;\r\n-        if (len == 0) return true;\r\n-        for (int i = 0; i < len; i++)\r\n-            if (!isCompatible(cs[i], os[i])) return false;\r\n+        if (len != os.length) {\r\n+            return false;\r\n+        }\r\n+        if (len == 0) {\r\n+            return true;\r\n+        }\r\n+        for (int i = 0; i < len; i++) {\r\n+            if (!isCompatible(cs[i], os[i])) {\r\n+                return false;\r\n+            }\r\n+        }\r\n         return true;\r\n     }\r\n \r\n     public static String getCodeBase(Class<?> cls) {\r\n-        if (cls == null)\r\n+        if (cls == null) {\r\n             return null;\r\n+        }\r\n         ProtectionDomain domain = cls.getProtectionDomain();\r\n-        if (domain == null)\r\n+        if (domain == null) {\r\n             return null;\r\n+        }\r\n         CodeSource source = domain.getCodeSource();\r\n-        if (source == null)\r\n+        if (source == null) {\r\n             return null;\r\n+        }\r\n         URL location = source.getLocation();\r\n-        if (location == null)\r\n+        if (location == null) {\r\n             return null;\r\n+        }\r\n         return location.getFile();\r\n     }\r\n \r\n@@ -266,8 +278,9 @@ public static String getName(final Method m) {\n         ret.append(m.getName()).append('(');\r\n         Class<?>[] parameterTypes = m.getParameterTypes();\r\n         for (int i = 0; i < parameterTypes.length; i++) {\r\n-            if (i > 0)\r\n+            if (i > 0) {\r\n                 ret.append(',');\r\n+            }\r\n             ret.append(getName(parameterTypes[i]));\r\n         }\r\n         ret.append(')');\r\n@@ -303,8 +316,9 @@ public static String getName(final Constructor<?> c) {\n         StringBuilder ret = new StringBuilder(\"(\");\r\n         Class<?>[] parameterTypes = c.getParameterTypes();\r\n         for (int i = 0; i < parameterTypes.length; i++) {\r\n-            if (i > 0)\r\n+            if (i > 0) {\r\n                 ret.append(',');\r\n+            }\r\n             ret.append(getName(parameterTypes[i]));\r\n         }\r\n         ret.append(')');\r\n@@ -330,15 +344,25 @@ public static String getDesc(Class<?> c) {\n \r\n         if (c.isPrimitive()) {\r\n             String t = c.getName();\r\n-            if (\"void\".equals(t)) ret.append(JVM_VOID);\r\n-            else if (\"boolean\".equals(t)) ret.append(JVM_BOOLEAN);\r\n-            else if (\"byte\".equals(t)) ret.append(JVM_BYTE);\r\n-            else if (\"char\".equals(t)) ret.append(JVM_CHAR);\r\n-            else if (\"double\".equals(t)) ret.append(JVM_DOUBLE);\r\n-            else if (\"float\".equals(t)) ret.append(JVM_FLOAT);\r\n-            else if (\"int\".equals(t)) ret.append(JVM_INT);\r\n-            else if (\"long\".equals(t)) ret.append(JVM_LONG);\r\n-            else if (\"short\".equals(t)) ret.append(JVM_SHORT);\r\n+            if (\"void\".equals(t)) {\r\n+                ret.append(JVM_VOID);\r\n+            } else if (\"boolean\".equals(t)) {\r\n+                ret.append(JVM_BOOLEAN);\r\n+            } else if (\"byte\".equals(t)) {\r\n+                ret.append(JVM_BYTE);\r\n+            } else if (\"char\".equals(t)) {\r\n+                ret.append(JVM_CHAR);\r\n+            } else if (\"double\".equals(t)) {\r\n+                ret.append(JVM_DOUBLE);\r\n+            } else if (\"float\".equals(t)) {\r\n+                ret.append(JVM_FLOAT);\r\n+            } else if (\"int\".equals(t)) {\r\n+                ret.append(JVM_INT);\r\n+            } else if (\"long\".equals(t)) {\r\n+                ret.append(JVM_LONG);\r\n+            } else if (\"short\".equals(t)) {\r\n+                ret.append(JVM_SHORT);\r\n+            }\r\n         } else {\r\n             ret.append('L');\r\n             ret.append(c.getName().replace('.', '/'));\r\n@@ -356,12 +380,14 @@ public static String getDesc(Class<?> c) {\n      * @throws NotFoundException\r\n      */\r\n     public static String getDesc(final Class<?>[] cs) {\r\n-        if (cs.length == 0)\r\n+        if (cs.length == 0) {\r\n             return \"\";\r\n+        }\r\n \r\n         StringBuilder sb = new StringBuilder(64);\r\n-        for (Class<?> c : cs)\r\n+        for (Class<?> c : cs) {\r\n             sb.append(getDesc(c));\r\n+        }\r\n         return sb.toString();\r\n     }\r\n \r\n@@ -376,8 +402,9 @@ public static String getDesc(final Class<?>[] cs) {\n     public static String getDesc(final Method m) {\r\n         StringBuilder ret = new StringBuilder(m.getName()).append('(');\r\n         Class<?>[] parameterTypes = m.getParameterTypes();\r\n-        for (int i = 0; i < parameterTypes.length; i++)\r\n+        for (int i = 0; i < parameterTypes.length; i++) {\r\n             ret.append(getDesc(parameterTypes[i]));\r\n+        }\r\n         ret.append(')').append(getDesc(m.getReturnType()));\r\n         return ret.toString();\r\n     }\r\n@@ -392,8 +419,9 @@ public static String getDesc(final Method m) {\n     public static String getDesc(final Constructor<?> c) {\r\n         StringBuilder ret = new StringBuilder(\"(\");\r\n         Class<?>[] parameterTypes = c.getParameterTypes();\r\n-        for (int i = 0; i < parameterTypes.length; i++)\r\n+        for (int i = 0; i < parameterTypes.length; i++) {\r\n             ret.append(getDesc(parameterTypes[i]));\r\n+        }\r\n         ret.append(')').append('V');\r\n         return ret.toString();\r\n     }\r\n@@ -409,8 +437,9 @@ public static String getDescWithoutMethodName(Method m) {\n         StringBuilder ret = new StringBuilder();\r\n         ret.append('(');\r\n         Class<?>[] parameterTypes = m.getParameterTypes();\r\n-        for (int i = 0; i < parameterTypes.length; i++)\r\n+        for (int i = 0; i < parameterTypes.length; i++) {\r\n             ret.append(getDesc(parameterTypes[i]));\r\n+        }\r\n         ret.append(')').append(getDesc(m.getReturnType()));\r\n         return ret.toString();\r\n     }\r\n@@ -431,15 +460,25 @@ public static String getDesc(final CtClass c) throws NotFoundException {\n             ret.append(getDesc(c.getComponentType()));\r\n         } else if (c.isPrimitive()) {\r\n             String t = c.getName();\r\n-            if (\"void\".equals(t)) ret.append(JVM_VOID);\r\n-            else if (\"boolean\".equals(t)) ret.append(JVM_BOOLEAN);\r\n-            else if (\"byte\".equals(t)) ret.append(JVM_BYTE);\r\n-            else if (\"char\".equals(t)) ret.append(JVM_CHAR);\r\n-            else if (\"double\".equals(t)) ret.append(JVM_DOUBLE);\r\n-            else if (\"float\".equals(t)) ret.append(JVM_FLOAT);\r\n-            else if (\"int\".equals(t)) ret.append(JVM_INT);\r\n-            else if (\"long\".equals(t)) ret.append(JVM_LONG);\r\n-            else if (\"short\".equals(t)) ret.append(JVM_SHORT);\r\n+            if (\"void\".equals(t)) {\r\n+                ret.append(JVM_VOID);\r\n+            } else if (\"boolean\".equals(t)) {\r\n+                ret.append(JVM_BOOLEAN);\r\n+            } else if (\"byte\".equals(t)) {\r\n+                ret.append(JVM_BYTE);\r\n+            } else if (\"char\".equals(t)) {\r\n+                ret.append(JVM_CHAR);\r\n+            } else if (\"double\".equals(t)) {\r\n+                ret.append(JVM_DOUBLE);\r\n+            } else if (\"float\".equals(t)) {\r\n+                ret.append(JVM_FLOAT);\r\n+            } else if (\"int\".equals(t)) {\r\n+                ret.append(JVM_INT);\r\n+            } else if (\"long\".equals(t)) {\r\n+                ret.append(JVM_LONG);\r\n+            } else if (\"short\".equals(t)) {\r\n+                ret.append(JVM_SHORT);\r\n+            }\r\n         } else {\r\n             ret.append('L');\r\n             ret.append(c.getName().replace('.', '/'));\r\n@@ -458,8 +497,9 @@ public static String getDesc(final CtClass c) throws NotFoundException {\n     public static String getDesc(final CtMethod m) throws NotFoundException {\r\n         StringBuilder ret = new StringBuilder(m.getName()).append('(');\r\n         CtClass[] parameterTypes = m.getParameterTypes();\r\n-        for (int i = 0; i < parameterTypes.length; i++)\r\n+        for (int i = 0; i < parameterTypes.length; i++) {\r\n             ret.append(getDesc(parameterTypes[i]));\r\n+        }\r\n         ret.append(')').append(getDesc(m.getReturnType()));\r\n         return ret.toString();\r\n     }\r\n@@ -474,8 +514,9 @@ public static String getDesc(final CtMethod m) throws NotFoundException {\n     public static String getDesc(final CtConstructor c) throws NotFoundException {\r\n         StringBuilder ret = new StringBuilder(\"(\");\r\n         CtClass[] parameterTypes = c.getParameterTypes();\r\n-        for (int i = 0; i < parameterTypes.length; i++)\r\n+        for (int i = 0; i < parameterTypes.length; i++) {\r\n             ret.append(getDesc(parameterTypes[i]));\r\n+        }\r\n         ret.append(')').append('V');\r\n         return ret.toString();\r\n     }\r\n@@ -491,8 +532,9 @@ public static String getDescWithoutMethodName(final CtMethod m) throws NotFoundE\n         StringBuilder ret = new StringBuilder();\r\n         ret.append('(');\r\n         CtClass[] parameterTypes = m.getParameterTypes();\r\n-        for (int i = 0; i < parameterTypes.length; i++)\r\n+        for (int i = 0; i < parameterTypes.length; i++) {\r\n             ret.append(getDesc(parameterTypes[i]));\r\n+        }\r\n         ret.append(')').append(getDesc(m.getReturnType()));\r\n         return ret.toString();\r\n     }\r\n@@ -511,17 +553,30 @@ public static String name2desc(String name) {\n             c = (name.length() - index) / 2;\r\n             name = name.substring(0, index);\r\n         }\r\n-        while (c-- > 0) sb.append(\"[\");\r\n-        if (\"void\".equals(name)) sb.append(JVM_VOID);\r\n-        else if (\"boolean\".equals(name)) sb.append(JVM_BOOLEAN);\r\n-        else if (\"byte\".equals(name)) sb.append(JVM_BYTE);\r\n-        else if (\"char\".equals(name)) sb.append(JVM_CHAR);\r\n-        else if (\"double\".equals(name)) sb.append(JVM_DOUBLE);\r\n-        else if (\"float\".equals(name)) sb.append(JVM_FLOAT);\r\n-        else if (\"int\".equals(name)) sb.append(JVM_INT);\r\n-        else if (\"long\".equals(name)) sb.append(JVM_LONG);\r\n-        else if (\"short\".equals(name)) sb.append(JVM_SHORT);\r\n-        else sb.append('L').append(name.replace('.', '/')).append(';');\r\n+        while (c-- > 0) {\r\n+            sb.append(\"[\");\r\n+        }\r\n+        if (\"void\".equals(name)) {\r\n+            sb.append(JVM_VOID);\r\n+        } else if (\"boolean\".equals(name)) {\r\n+            sb.append(JVM_BOOLEAN);\r\n+        } else if (\"byte\".equals(name)) {\r\n+            sb.append(JVM_BYTE);\r\n+        } else if (\"char\".equals(name)) {\r\n+            sb.append(JVM_CHAR);\r\n+        } else if (\"double\".equals(name)) {\r\n+            sb.append(JVM_DOUBLE);\r\n+        } else if (\"float\".equals(name)) {\r\n+            sb.append(JVM_FLOAT);\r\n+        } else if (\"int\".equals(name)) {\r\n+            sb.append(JVM_INT);\r\n+        } else if (\"long\".equals(name)) {\r\n+            sb.append(JVM_LONG);\r\n+        } else if (\"short\".equals(name)) {\r\n+            sb.append(JVM_SHORT);\r\n+        } else {\r\n+            sb.append('L').append(name.replace('.', '/')).append(';');\r\n+        }\r\n         return sb.toString();\r\n     }\r\n \r\n@@ -579,7 +634,9 @@ public static String desc2name(String desc) {\n         } else {\r\n             sb.append(desc.substring(c + 1, desc.length() - 1).replace('/', '.'));\r\n         }\r\n-        while (c-- > 0) sb.append(\"[]\");\r\n+        while (c-- > 0) {\r\n+            sb.append(\"[]\");\r\n+        }\r\n         return sb.toString();\r\n     }\r\n \r\n@@ -628,34 +685,57 @@ public static String desc2name(String desc) {\n         }\r\n         if (c > 0) {\r\n             StringBuilder sb = new StringBuilder();\r\n-            while (c-- > 0)\r\n+            while (c-- > 0) {\r\n                 sb.append(\"[\");\r\n+            }\r\n \r\n-            if (\"void\".equals(name)) sb.append(JVM_VOID);\r\n-            else if (\"boolean\".equals(name)) sb.append(JVM_BOOLEAN);\r\n-            else if (\"byte\".equals(name)) sb.append(JVM_BYTE);\r\n-            else if (\"char\".equals(name)) sb.append(JVM_CHAR);\r\n-            else if (\"double\".equals(name)) sb.append(JVM_DOUBLE);\r\n-            else if (\"float\".equals(name)) sb.append(JVM_FLOAT);\r\n-            else if (\"int\".equals(name)) sb.append(JVM_INT);\r\n-            else if (\"long\".equals(name)) sb.append(JVM_LONG);\r\n-            else if (\"short\".equals(name)) sb.append(JVM_SHORT);\r\n-            else sb.append('L').append(name).append(';'); // \"java.lang.Object\" ==> \"Ljava.lang.Object;\"\r\n+            if (\"void\".equals(name)) {\r\n+                sb.append(JVM_VOID);\r\n+            } else if (\"boolean\".equals(name)) {\r\n+                sb.append(JVM_BOOLEAN);\r\n+            } else if (\"byte\".equals(name)) {\r\n+                sb.append(JVM_BYTE);\r\n+            } else if (\"char\".equals(name)) {\r\n+                sb.append(JVM_CHAR);\r\n+            } else if (\"double\".equals(name)) {\r\n+                sb.append(JVM_DOUBLE);\r\n+            } else if (\"float\".equals(name)) {\r\n+                sb.append(JVM_FLOAT);\r\n+            } else if (\"int\".equals(name)) {\r\n+                sb.append(JVM_INT);\r\n+            } else if (\"long\".equals(name)) {\r\n+                sb.append(JVM_LONG);\r\n+            } else if (\"short\".equals(name)) {\r\n+                sb.append(JVM_SHORT);\r\n+            } else {\r\n+                sb.append('L').append(name).append(';'); // \"java.lang.Object\" ==> \"Ljava.lang.Object;\"\r\n+            }\r\n             name = sb.toString();\r\n         } else {\r\n-            if (\"void\".equals(name)) return void.class;\r\n-            else if (\"boolean\".equals(name)) return boolean.class;\r\n-            else if (\"byte\".equals(name)) return byte.class;\r\n-            else if (\"char\".equals(name)) return char.class;\r\n-            else if (\"double\".equals(name)) return double.class;\r\n-            else if (\"float\".equals(name)) return float.class;\r\n-            else if (\"int\".equals(name)) return int.class;\r\n-            else if (\"long\".equals(name)) return long.class;\r\n-            else if (\"short\".equals(name)) return short.class;\r\n-        }\r\n-\r\n-        if (cl == null)\r\n+            if (\"void\".equals(name)) {\r\n+                return void.class;\r\n+            } else if (\"boolean\".equals(name)) {\r\n+                return boolean.class;\r\n+            } else if (\"byte\".equals(name)) {\r\n+                return byte.class;\r\n+            } else if (\"char\".equals(name)) {\r\n+                return char.class;\r\n+            } else if (\"double\".equals(name)) {\r\n+                return double.class;\r\n+            } else if (\"float\".equals(name)) {\r\n+                return float.class;\r\n+            } else if (\"int\".equals(name)) {\r\n+                return int.class;\r\n+            } else if (\"long\".equals(name)) {\r\n+                return long.class;\r\n+            } else if (\"short\".equals(name)) {\r\n+                return short.class;\r\n+            }\r\n+        }\r\n+\r\n+        if (cl == null) {\r\n             cl = ClassHelper.getClassLoader();\r\n+        }\r\n         Class<?> clazz = NAME_CLASS_CACHE.get(name);\r\n         if (clazz == null) {\r\n             clazz = Class.forName(name, true, cl);\r\n@@ -717,8 +797,9 @@ public static String desc2name(String desc) {\n                 throw new ClassNotFoundException(\"Class not found: \" + desc);\r\n         }\r\n \r\n-        if (cl == null)\r\n+        if (cl == null) {\r\n             cl = ClassHelper.getClassLoader();\r\n+        }\r\n         Class<?> clazz = DESC_CLASS_CACHE.get(desc);\r\n         if (clazz == null) {\r\n             clazz = Class.forName(desc, true, cl);\r\n@@ -748,13 +829,15 @@ public static String desc2name(String desc) {\n      * @throws ClassNotFoundException\r\n      */\r\n     private static Class<?>[] desc2classArray(ClassLoader cl, String desc) throws ClassNotFoundException {\r\n-        if (desc.length() == 0)\r\n+        if (desc.length() == 0) {\r\n             return EMPTY_CLASS_ARRAY;\r\n+        }\r\n \r\n         List<Class<?>> cs = new ArrayList<Class<?>>();\r\n         Matcher m = DESC_PATTERN.matcher(desc);\r\n-        while (m.find())\r\n+        while (m.find()) {\r\n             cs.add(desc2class(cl, m.group()));\r\n+        }\r\n         return cs.toArray(EMPTY_CLASS_ARRAY);\r\n     }\r\n \r\n@@ -862,8 +945,9 @@ public static Object getEmptyObject(Class<?> returnType) {\n     }\r\n \r\n     private static Object getEmptyObject(Class<?> returnType, Map<Class<?>, Object> emptyInstances, int level) {\r\n-        if (level > 2)\r\n+        if (level > 2) {\r\n             return null;\r\n+        }\r\n         if (returnType == null) {\r\n             return null;\r\n         } else if (returnType == boolean.class || returnType == Boolean.class) {\r",
                "changes": 250
            },
            {
                "status": "modified",
                "additions": 13,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/Stack.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/Stack.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/Stack.java",
                "deletions": 7,
                "sha": "1283d831b7465b34c1055f206aee31b7834db208",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/Stack.java",
                "patch": "@@ -38,10 +38,11 @@ public Stack() {\n      * @param ele\r\n      */\r\n     public void push(E ele) {\r\n-        if (mElements.size() > mSize)\r\n+        if (mElements.size() > mSize) {\r\n             mElements.set(mSize, ele);\r\n-        else\r\n+        } else {\r\n             mElements.add(ele);\r\n+        }\r\n         mSize++;\r\n     }\r\n \r\n@@ -51,8 +52,9 @@ public void push(E ele) {\n      * @return the last element.\r\n      */\r\n     public E pop() {\r\n-        if (mSize == 0)\r\n+        if (mSize == 0) {\r\n             throw new EmptyStackException();\r\n+        }\r\n         return mElements.set(--mSize, null);\r\n     }\r\n \r\n@@ -62,8 +64,9 @@ public E pop() {\n      * @return the last element.\r\n      */\r\n     public E peek() {\r\n-        if (mSize == 0)\r\n+        if (mSize == 0) {\r\n             throw new EmptyStackException();\r\n+        }\r\n         return mElements.get(mSize - 1);\r\n     }\r\n \r\n@@ -74,8 +77,9 @@ public E peek() {\n      * @return element.\r\n      */\r\n     public E get(int index) {\r\n-        if (index >= mSize)\r\n+        if (index >= mSize) {\r\n             throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + mSize);\r\n+        }\r\n \r\n         return index < 0 ? mElements.get(index + mSize) : mElements.get(index);\r\n     }\r\n@@ -88,8 +92,9 @@ public E get(int index) {\n      * @return old element.\r\n      */\r\n     public E set(int index, E value) {\r\n-        if (index >= mSize)\r\n+        if (index >= mSize) {\r\n             throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + mSize);\r\n+        }\r\n \r\n         return mElements.set(index < 0 ? index + mSize : index, value);\r\n     }\r\n@@ -101,8 +106,9 @@ public E set(int index, E value) {\n      * @return element\r\n      */\r\n     public E remove(int index) {\r\n-        if (index >= mSize)\r\n+        if (index >= mSize) {\r\n             throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + mSize);\r\n+        }\r\n \r\n         E ret = mElements.remove(index < 0 ? index + mSize : index);\r\n         mSize--;\r",
                "changes": 20
            },
            {
                "status": "modified",
                "additions": 52,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/StringUtils.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/StringUtils.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/StringUtils.java",
                "deletions": 23,
                "sha": "c2c708f0a609d057e987d425333b3445020f51ef",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/StringUtils.java",
                "patch": "@@ -18,10 +18,11 @@\n \r\n import org.apache.dubbo.common.Constants;\r\n import org.apache.dubbo.common.io.UnsafeStringWriter;\r\n-import com.alibaba.fastjson.JSON;\r\n import org.apache.dubbo.common.logger.Logger;\r\n import org.apache.dubbo.common.logger.LoggerFactory;\r\n \r\n+import com.alibaba.fastjson.JSON;\r\n+\r\n import java.io.PrintWriter;\r\n import java.util.ArrayList;\r\n import java.util.Collection;\r\n@@ -339,8 +340,9 @@ public static String replace(final String text, final String searchString, final\n     }\r\n \r\n     public static boolean isBlank(String str) {\r\n-        if (str == null || str.length() == 0)\r\n+        if (str == null || str.length() == 0) {\r\n             return true;\r\n+        }\r\n         return false;\r\n     }\r\n \r\n@@ -351,8 +353,9 @@ public static boolean isBlank(String str) {\n      * @return is empty.\r\n      */\r\n     public static boolean isEmpty(String str) {\r\n-        if (str == null || str.length() == 0)\r\n+        if (str == null || str.length() == 0) {\r\n             return true;\r\n+        }\r\n         return false;\r\n     }\r\n \r\n@@ -372,10 +375,12 @@ public static boolean isNotEmpty(String str) {\n      * @return equals\r\n      */\r\n     public static boolean isEquals(String s1, String s2) {\r\n-        if (s1 == null && s2 == null)\r\n+        if (s1 == null && s2 == null) {\r\n             return true;\r\n-        if (s1 == null || s2 == null)\r\n+        }\r\n+        if (s1 == null || s2 == null) {\r\n             return false;\r\n+        }\r\n         return s1.equals(s2);\r\n     }\r\n \r\n@@ -386,14 +391,16 @@ public static boolean isEquals(String s1, String s2) {\n      * @return is integer\r\n      */\r\n     public static boolean isInteger(String str) {\r\n-        if (str == null || str.length() == 0)\r\n+        if (str == null || str.length() == 0) {\r\n             return false;\r\n+        }\r\n         return INT_PATTERN.matcher(str).matches();\r\n     }\r\n \r\n     public static int parseInteger(String str) {\r\n-        if (!isInteger(str))\r\n+        if (!isInteger(str)) {\r\n             return 0;\r\n+        }\r\n         return Integer.parseInt(str);\r\n     }\r\n \r\n@@ -495,23 +502,27 @@ public static String toString(String msg, Throwable e) {\n      * @return String.\r\n      */\r\n     public static String translat(String src, String from, String to) {\r\n-        if (isEmpty(src)) return src;\r\n+        if (isEmpty(src)) {\r\n+            return src;\r\n+        }\r\n         StringBuilder sb = null;\r\n         int ix;\r\n         char c;\r\n         for (int i = 0, len = src.length(); i < len; i++) {\r\n             c = src.charAt(i);\r\n             ix = from.indexOf(c);\r\n             if (ix == -1) {\r\n-                if (sb != null)\r\n+                if (sb != null) {\r\n                     sb.append(c);\r\n+                }\r\n             } else {\r\n                 if (sb == null) {\r\n                     sb = new StringBuilder(len);\r\n                     sb.append(src, 0, i);\r\n                 }\r\n-                if (ix < to.length())\r\n+                if (ix < to.length()) {\r\n                     sb.append(to.charAt(ix));\r\n+                }\r\n             }\r\n         }\r\n         return sb == null ? src : sb.toString();\r\n@@ -530,14 +541,16 @@ public static String translat(String src, String from, String to) {\n         for (int i = 0; i < len; i++) {\r\n             c = str.charAt(i);\r\n             if (c == ch) {\r\n-                if (list == null)\r\n+                if (list == null) {\r\n                     list = new ArrayList<String>();\r\n+                }\r\n                 list.add(str.substring(ix, i));\r\n                 ix = i + 1;\r\n             }\r\n         }\r\n-        if (ix > 0)\r\n+        if (ix > 0) {\r\n             list.add(str.substring(ix));\r\n+        }\r\n         return list == null ? EMPTY_STRING_ARRAY : (String[]) list.toArray(EMPTY_STRING_ARRAY);\r\n     }\r\n \r\n@@ -548,10 +561,13 @@ public static String translat(String src, String from, String to) {\n      * @return String.\r\n      */\r\n     public static String join(String[] array) {\r\n-        if (array.length == 0) return \"\";\r\n+        if (array.length == 0) {\r\n+            return \"\";\r\n+        }\r\n         StringBuilder sb = new StringBuilder();\r\n-        for (String s : array)\r\n+        for (String s : array) {\r\n             sb.append(s);\r\n+        }\r\n         return sb.toString();\r\n     }\r\n \r\n@@ -563,11 +579,14 @@ public static String join(String[] array) {\n      * @return String.\r\n      */\r\n     public static String join(String[] array, char split) {\r\n-        if (array.length == 0) return \"\";\r\n+        if (array.length == 0) {\r\n+            return \"\";\r\n+        }\r\n         StringBuilder sb = new StringBuilder();\r\n         for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0)\r\n+            if (i > 0) {\r\n                 sb.append(split);\r\n+            }\r\n             sb.append(array[i]);\r\n         }\r\n         return sb.toString();\r\n@@ -581,24 +600,32 @@ public static String join(String[] array, char split) {\n      * @return String.\r\n      */\r\n     public static String join(String[] array, String split) {\r\n-        if (array.length == 0) return \"\";\r\n+        if (array.length == 0) {\r\n+            return \"\";\r\n+        }\r\n         StringBuilder sb = new StringBuilder();\r\n         for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0)\r\n+            if (i > 0) {\r\n                 sb.append(split);\r\n+            }\r\n             sb.append(array[i]);\r\n         }\r\n         return sb.toString();\r\n     }\r\n \r\n     public static String join(Collection<String> coll, String split) {\r\n-        if (coll.isEmpty()) return \"\";\r\n+        if (coll.isEmpty()) {\r\n+            return \"\";\r\n+        }\r\n \r\n         StringBuilder sb = new StringBuilder();\r\n         boolean isFirst = true;\r\n         for (String s : coll) {\r\n-            if (isFirst) isFirst = false;\r\n-            else sb.append(split);\r\n+            if (isFirst) {\r\n+                isFirst = false;\r\n+            } else {\r\n+                sb.append(split);\r\n+            }\r\n             sb.append(s);\r\n         }\r\n         return sb.toString();\r\n@@ -616,8 +643,9 @@ public static String join(Collection<String> coll, String split) {\n         Map<String, String> map = new HashMap<String, String>(tmp.length);\r\n         for (int i = 0; i < tmp.length; i++) {\r\n             Matcher matcher = KVP_PATTERN.matcher(tmp[i]);\r\n-            if (matcher.matches() == false)\r\n+            if (matcher.matches() == false) {\r\n                 continue;\r\n+            }\r\n             map.put(matcher.group(1), matcher.group(2));\r\n         }\r\n         return map;\r\n@@ -635,8 +663,9 @@ public static String getQueryStringValue(String qs, String key) {\n      * @return Parameters instance.\r\n      */\r\n     public static Map<String, String> parseQueryString(String qs) {\r\n-        if (qs == null || qs.length() == 0)\r\n+        if (qs == null || qs.length() == 0) {\r\n             return new HashMap<String, String>();\r\n+        }\r\n         return parseKeyValuePair(qs, \"\\\\&\");\r\n     }\r\n \r",
                "changes": 75
            },
            {
                "status": "modified",
                "additions": 8,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/UrlUtils.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/UrlUtils.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/UrlUtils.java",
                "deletions": 4,
                "sha": "f9e6f4ec3c758f0f3f882cff5066dc70eba67499",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/UrlUtils.java",
                "patch": "@@ -361,8 +361,9 @@ public static boolean isMatchCategory(String category, String categories) {\n     public static boolean isMatch(URL consumerUrl, URL providerUrl) {\r\n         String consumerInterface = consumerUrl.getServiceInterface();\r\n         String providerInterface = providerUrl.getServiceInterface();\r\n-        if (!(Constants.ANY_VALUE.equals(consumerInterface) || StringUtils.isEquals(consumerInterface, providerInterface)))\r\n+        if (!(Constants.ANY_VALUE.equals(consumerInterface) || StringUtils.isEquals(consumerInterface, providerInterface))) {\r\n             return false;\r\n+        }\r\n \r\n         if (!isMatchCategory(providerUrl.getParameter(Constants.CATEGORY_KEY, Constants.DEFAULT_CATEGORY),\r\n                 consumerUrl.getParameter(Constants.CATEGORY_KEY, Constants.DEFAULT_CATEGORY))) {\r\n@@ -393,14 +394,17 @@ public static boolean isMatchGlobPattern(String pattern, String value, URL param\n     }\r\n \r\n     public static boolean isMatchGlobPattern(String pattern, String value) {\r\n-        if (\"*\".equals(pattern))\r\n+        if (\"*\".equals(pattern)) {\r\n             return true;\r\n+        }\r\n         if ((pattern == null || pattern.length() == 0)\r\n-                && (value == null || value.length() == 0))\r\n+                && (value == null || value.length() == 0)) {\r\n             return true;\r\n+        }\r\n         if ((pattern == null || pattern.length() == 0)\r\n-                || (value == null || value.length() == 0))\r\n+                || (value == null || value.length() == 0)) {\r\n             return false;\r\n+        }\r\n \r\n         int i = pattern.lastIndexOf('*');\r\n         // doesn't find \"*\"\r",
                "changes": 12
            },
            {
                "status": "modified",
                "additions": 9,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-compatible/src/main/java/com/alibaba/dubbo/common/URL.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/main/java/com/alibaba/dubbo/common/URL.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-compatible/src/main/java/com/alibaba/dubbo/common/URL.java",
                "deletions": 3,
                "sha": "3a6796a786af49e5b5acd052713b6df103266b6e",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-compatible/src/main/java/com/alibaba/dubbo/common/URL.java",
                "patch": "@@ -378,17 +378,23 @@ public URL addParameter(String key, double value) {\n     }\n \n     public URL addParameter(String key, Enum<?> value) {\n-        if (value == null) return this;\n+        if (value == null) {\n+            return this;\n+        }\n         return addParameter(key, String.valueOf(value));\n     }\n \n     public URL addParameter(String key, Number value) {\n-        if (value == null) return this;\n+        if (value == null) {\n+            return this;\n+        }\n         return addParameter(key, String.valueOf(value));\n     }\n \n     public URL addParameter(String key, CharSequence value) {\n-        if (value == null || value.length() == 0) return this;\n+        if (value == null || value.length() == 0) {\n+            return this;\n+        }\n         return addParameter(key, String.valueOf(value));\n     }\n ",
                "changes": 12
            },
            {
                "status": "modified",
                "additions": 2,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java",
                "deletions": 1,
                "sha": "a5a1270ae31d67ed678b41f108b6f7f66d7905a5",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java",
                "patch": "@@ -257,8 +257,9 @@ protected static void appendAttributes(Map<Object, Object> parameters, Object co\n                         && method.getParameterTypes().length == 0\r\n                         && isPrimitive(method.getReturnType())) {\r\n                     Parameter parameter = method.getAnnotation(Parameter.class);\r\n-                    if (parameter == null || !parameter.attribute())\r\n+                    if (parameter == null || !parameter.attribute()) {\r\n                         continue;\r\n+                    }\r\n                     String key;\r\n                     if (parameter.key().length() > 0) {\r\n                         key = parameter.key();\r",
                "changes": 3
            },
            {
                "status": "modified",
                "additions": 9,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "deletions": 3,
                "sha": "fb0f13e39c1816e4a0b3f47b29bae8e4b7825d67",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "patch": "@@ -229,7 +229,9 @@ private void init() {\n                     throw new IllegalStateException(\"Unload \" + resolveFile + \", cause: \" + e.getMessage(), e);\r\n                 } finally {\r\n                     try {\r\n-                        if (null != fis) fis.close();\r\n+                        if (null != fis) {\r\n+                            fis.close();\r\n+                        }\r\n                     } catch (IOException e) {\r\n                         logger.warn(e.getMessage(), e);\r\n                     }\r\n@@ -440,9 +442,13 @@ private void checkDefault() {\n \r\n     private void resolveAsyncInterface(Class<?> interfaceClass, Map<String, String> map) {\r\n         AsyncFor annotation = interfaceClass.getAnnotation(AsyncFor.class);\r\n-        if (annotation == null) return;\r\n+        if (annotation == null) {\r\n+            return;\r\n+        }\r\n         Class<?> target = annotation.value();\r\n-        if (!target.isAssignableFrom(interfaceClass)) return;\r\n+        if (!target.isAssignableFrom(interfaceClass)) {\r\n+            return;\r\n+        }\r\n         this.asyncInterfaceClass = interfaceClass;\r\n         this.interfaceClass = target;\r\n         setInterface(this.interfaceClass.getName());\r",
                "changes": 12
            },
            {
                "status": "modified",
                "additions": 2,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/RegistryConfig.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/RegistryConfig.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/RegistryConfig.java",
                "deletions": 1,
                "sha": "0c2022b87c8a11696822006e16dd5a44885d3f2e",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/RegistryConfig.java",
                "patch": "@@ -162,8 +162,9 @@ public Integer getWait() {\n     @Deprecated\r\n     public void setWait(Integer wait) {\r\n         this.wait = wait;\r\n-        if (wait != null && wait > 0)\r\n+        if (wait != null && wait > 0) {\r\n             System.setProperty(Constants.SHUTDOWN_WAIT_KEY, String.valueOf(wait));\r\n+        }\r\n     }\r\n \r\n     public Boolean isCheck() {\r",
                "changes": 3
            },
            {
                "status": "modified",
                "additions": 3,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/ReferenceConfigCache.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/ReferenceConfigCache.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/ReferenceConfigCache.java",
                "deletions": 1,
                "sha": "0ced6174be7c8dea6196fe0acc7ffe59fd3990f1",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/ReferenceConfigCache.java",
                "patch": "@@ -117,7 +117,9 @@ public static ReferenceConfigCache getCache(String name, KeyGenerator keyGenerat\n \n     void destroyKey(String key) {\n         ReferenceConfig<?> config = cache.remove(key);\n-        if (config == null) return;\n+        if (config == null) {\n+            return;\n+        }\n         config.destroy();\n     }\n ",
                "changes": 4
            },
            {
                "status": "modified",
                "additions": 16,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/codec/ExchangeCodec.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/codec/ExchangeCodec.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/codec/ExchangeCodec.java",
                "deletions": 6,
                "sha": "4031688e04e076eb2b1cf55234d0a13f468664b5",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/codec/ExchangeCodec.java",
                "patch": "@@ -200,11 +200,13 @@ protected Object decodeBody(Channel channel, InputStream is, byte[] header) thro\n \r\n     protected Object getRequestData(long id) {\r\n         DefaultFuture future = DefaultFuture.getFuture(id);\r\n-        if (future == null)\r\n+        if (future == null) {\r\n             return null;\r\n+        }\r\n         Request req = future.getRequest();\r\n-        if (req == null)\r\n+        if (req == null) {\r\n             return null;\r\n+        }\r\n         return req.getData();\r\n     }\r\n \r\n@@ -218,8 +220,12 @@ protected void encodeRequest(Channel channel, ChannelBuffer buffer, Request req)\n         // set request and serialization flag.\r\n         header[2] = (byte) (FLAG_REQUEST | serialization.getContentTypeId());\r\n \r\n-        if (req.isTwoWay()) header[2] |= FLAG_TWOWAY;\r\n-        if (req.isEvent()) header[2] |= FLAG_EVENT;\r\n+        if (req.isTwoWay()) {\r\n+            header[2] |= FLAG_TWOWAY;\r\n+        }\r\n+        if (req.isEvent()) {\r\n+            header[2] |= FLAG_EVENT;\r\n+        }\r\n \r\n         // set request id.\r\n         Bytes.long2bytes(req.getId(), header, 4);\r\n@@ -260,7 +266,9 @@ protected void encodeResponse(Channel channel, ChannelBuffer buffer, Response re\n             Bytes.short2bytes(MAGIC, header);\r\n             // set request and serialization flag.\r\n             header[2] = serialization.getContentTypeId();\r\n-            if (res.isHeartbeat()) header[2] |= FLAG_EVENT;\r\n+            if (res.isHeartbeat()) {\r\n+                header[2] |= FLAG_EVENT;\r\n+            }\r\n             // set response status.\r\n             byte status = res.getStatus();\r\n             header[3] = status;\r\n@@ -277,7 +285,9 @@ protected void encodeResponse(Channel channel, ChannelBuffer buffer, Response re\n                 } else {\r\n                     encodeResponseData(channel, out, res.getResult(), res.getVersion());\r\n                 }\r\n-            } else out.writeUTF(res.getErrorMessage());\r\n+            } else {\r\n+                out.writeUTF(res.getErrorMessage());\r\n+            }\r\n             out.flushBuffer();\r\n             if (out instanceof Cleanable) {\r\n                 ((Cleanable) out).cleanup();\r",
                "changes": 22
            },
            {
                "status": "modified",
                "additions": 7,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeaderExchangeHandler.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeaderExchangeHandler.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeaderExchangeHandler.java",
                "deletions": 3,
                "sha": "9e73541a05f8a4e78ee1d77e0f022a653c32c386",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeaderExchangeHandler.java",
                "patch": "@@ -83,9 +83,13 @@ void handleRequest(final ExchangeChannel channel, Request req) throws RemotingEx\n             Object data = req.getData();\r\n \r\n             String msg;\r\n-            if (data == null) msg = null;\r\n-            else if (data instanceof Throwable) msg = StringUtils.toString((Throwable) data);\r\n-            else msg = data.toString();\r\n+            if (data == null) {\r\n+                msg = null;\r\n+            } else if (data instanceof Throwable) {\r\n+                msg = StringUtils.toString((Throwable) data);\r\n+            } else {\r\n+                msg = data.toString();\r\n+            }\r\n             res.setErrorMessage(\"Fail to decode request due to: \" + msg);\r\n             res.setStatus(Response.BAD_REQUEST);\r\n \r",
                "changes": 10
            },
            {
                "status": "modified",
                "additions": 14,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/AbstractClient.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/AbstractClient.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/AbstractClient.java",
                "deletions": 7,
                "sha": "ed913d2a0f7cc8c4d02e54429571558073b1f732",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/AbstractClient.java",
                "patch": "@@ -199,56 +199,63 @@ public InetSocketAddress getConnectAddress() {\n     @Override\n     public InetSocketAddress getRemoteAddress() {\n         Channel channel = getChannel();\n-        if (channel == null)\n+        if (channel == null) {\n             return getUrl().toInetSocketAddress();\n+        }\n         return channel.getRemoteAddress();\n     }\n \n     @Override\n     public InetSocketAddress getLocalAddress() {\n         Channel channel = getChannel();\n-        if (channel == null)\n+        if (channel == null) {\n             return InetSocketAddress.createUnresolved(NetUtils.getLocalHost(), 0);\n+        }\n         return channel.getLocalAddress();\n     }\n \n     @Override\n     public boolean isConnected() {\n         Channel channel = getChannel();\n-        if (channel == null)\n+        if (channel == null) {\n             return false;\n+        }\n         return channel.isConnected();\n     }\n \n     @Override\n     public Object getAttribute(String key) {\n         Channel channel = getChannel();\n-        if (channel == null)\n+        if (channel == null) {\n             return null;\n+        }\n         return channel.getAttribute(key);\n     }\n \n     @Override\n     public void setAttribute(String key, Object value) {\n         Channel channel = getChannel();\n-        if (channel == null)\n+        if (channel == null) {\n             return;\n+        }\n         channel.setAttribute(key, value);\n     }\n \n     @Override\n     public void removeAttribute(String key) {\n         Channel channel = getChannel();\n-        if (channel == null)\n+        if (channel == null) {\n             return;\n+        }\n         channel.removeAttribute(key);\n     }\n \n     @Override\n     public boolean hasAttribute(String key) {\n         Channel channel = getChannel();\n-        if (channel == null)\n+        if (channel == null) {\n             return false;\n+        }\n         return channel.hasAttribute(key);\n     }\n ",
                "changes": 21
            },
            {
                "status": "modified",
                "additions": 15,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-grizzly/src/main/java/org/apache/dubbo/remoting/transport/grizzly/GrizzlyChannel.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-remoting/dubbo-remoting-grizzly/src/main/java/org/apache/dubbo/remoting/transport/grizzly/GrizzlyChannel.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-remoting/dubbo-remoting-grizzly/src/main/java/org/apache/dubbo/remoting/transport/grizzly/GrizzlyChannel.java",
                "deletions": 5,
                "sha": "4732676a082a9967f7f24f890ce31bb00144836b",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-grizzly/src/main/java/org/apache/dubbo/remoting/transport/grizzly/GrizzlyChannel.java",
                "patch": "@@ -168,13 +168,23 @@ public int hashCode() {\n \r\n     @Override\r\n     public boolean equals(Object obj) {\r\n-        if (this == obj) return true;\r\n-        if (obj == null) return false;\r\n-        if (getClass() != obj.getClass()) return false;\r\n+        if (this == obj) {\r\n+            return true;\r\n+        }\r\n+        if (obj == null) {\r\n+            return false;\r\n+        }\r\n+        if (getClass() != obj.getClass()) {\r\n+            return false;\r\n+        }\r\n         GrizzlyChannel other = (GrizzlyChannel) obj;\r\n         if (connection == null) {\r\n-            if (other.connection != null) return false;\r\n-        } else if (!connection.equals(other.connection)) return false;\r\n+            if (other.connection != null) {\r\n+                return false;\r\n+            }\r\n+        } else if (!connection.equals(other.connection)) {\r\n+            return false;\r\n+        }\r\n         return true;\r\n     }\r\n \r",
                "changes": 20
            },
            {
                "status": "modified",
                "additions": 15,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-mina/src/main/java/org/apache/dubbo/remoting/transport/mina/MinaChannel.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-remoting/dubbo-remoting-mina/src/main/java/org/apache/dubbo/remoting/transport/mina/MinaChannel.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-remoting/dubbo-remoting-mina/src/main/java/org/apache/dubbo/remoting/transport/mina/MinaChannel.java",
                "deletions": 5,
                "sha": "093ce21694035ac4b7b4c3c7090aa045ca1d55d9",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-mina/src/main/java/org/apache/dubbo/remoting/transport/mina/MinaChannel.java",
                "patch": "@@ -161,13 +161,23 @@ public int hashCode() {\n \n     @Override\n     public boolean equals(Object obj) {\n-        if (this == obj) return true;\n-        if (obj == null) return false;\n-        if (getClass() != obj.getClass()) return false;\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n         MinaChannel other = (MinaChannel) obj;\n         if (session == null) {\n-            if (other.session != null) return false;\n-        } else if (!session.equals(other.session)) return false;\n+            if (other.session != null) {\n+                return false;\n+            }\n+        } else if (!session.equals(other.session)) {\n+            return false;\n+        }\n         return true;\n     }\n ",
                "changes": 20
            },
            {
                "status": "modified",
                "additions": 3,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-mina/src/main/java/org/apache/dubbo/remoting/transport/mina/MinaCodecAdapter.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-remoting/dubbo-remoting-mina/src/main/java/org/apache/dubbo/remoting/transport/mina/MinaCodecAdapter.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-remoting/dubbo-remoting-mina/src/main/java/org/apache/dubbo/remoting/transport/mina/MinaCodecAdapter.java",
                "deletions": 1,
                "sha": "5e60fb2d49023afb5c3ac57b5a27423b9b0b0b50",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-mina/src/main/java/org/apache/dubbo/remoting/transport/mina/MinaCodecAdapter.java",
                "patch": "@@ -95,7 +95,9 @@ public void encode(IoSession session, Object msg, ProtocolEncoderOutput out) thr\n         @Override\n         public void decode(IoSession session, ByteBuffer in, ProtocolDecoderOutput out) throws Exception {\n             int readable = in.limit();\n-            if (readable <= 0) return;\n+            if (readable <= 0) {\n+                return;\n+            }\n \n             ChannelBuffer frame;\n ",
                "changes": 4
            },
            {
                "status": "modified",
                "additions": 15,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-netty/src/main/java/org/apache/dubbo/remoting/transport/netty/NettyChannel.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-remoting/dubbo-remoting-netty/src/main/java/org/apache/dubbo/remoting/transport/netty/NettyChannel.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-remoting/dubbo-remoting-netty/src/main/java/org/apache/dubbo/remoting/transport/netty/NettyChannel.java",
                "deletions": 5,
                "sha": "9a0e107c84f9f7a37448a85c4ad37b00eca49ddc",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-netty/src/main/java/org/apache/dubbo/remoting/transport/netty/NettyChannel.java",
                "patch": "@@ -177,13 +177,23 @@ public int hashCode() {\n \n     @Override\n     public boolean equals(Object obj) {\n-        if (this == obj) return true;\n-        if (obj == null) return false;\n-        if (getClass() != obj.getClass()) return false;\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n         NettyChannel other = (NettyChannel) obj;\n         if (channel == null) {\n-            if (other.channel != null) return false;\n-        } else if (!channel.equals(other.channel)) return false;\n+            if (other.channel != null) {\n+                return false;\n+            }\n+        } else if (!channel.equals(other.channel)) {\n+            return false;\n+        }\n         return true;\n     }\n ",
                "changes": 20
            },
            {
                "status": "modified",
                "additions": 2,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-netty/src/main/java/org/apache/dubbo/remoting/transport/netty/NettyClient.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-remoting/dubbo-remoting-netty/src/main/java/org/apache/dubbo/remoting/transport/netty/NettyClient.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-remoting/dubbo-remoting-netty/src/main/java/org/apache/dubbo/remoting/transport/netty/NettyClient.java",
                "deletions": 1,
                "sha": "434fd2a03b062590e9a6d49ee1df38cab92bd6a8",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-netty/src/main/java/org/apache/dubbo/remoting/transport/netty/NettyClient.java",
                "patch": "@@ -157,8 +157,9 @@ protected void doClose() throws Throwable {\n     @Override\r\n     protected org.apache.dubbo.remoting.Channel getChannel() {\r\n         Channel c = channel;\r\n-        if (c == null || !c.isConnected())\r\n+        if (c == null || !c.isConnected()) {\r\n             return null;\r\n+        }\r\n         return NettyChannel.getOrAddChannel(c, getUrl(), this);\r\n     }\r\n \r",
                "changes": 3
            },
            {
                "status": "modified",
                "additions": 2,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyClient.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyClient.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyClient.java",
                "deletions": 1,
                "sha": "4ea6fe12c52fbf3f87e0702cf931c30133e875ca",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyClient.java",
                "patch": "@@ -156,8 +156,9 @@ protected void doClose() throws Throwable {\n     @Override\n     protected org.apache.dubbo.remoting.Channel getChannel() {\n         Channel c = channel;\n-        if (c == null || !c.isActive())\n+        if (c == null || !c.isActive()) {\n             return null;\n+        }\n         return NettyChannel.getOrAddChannel(c, getUrl(), this);\n     }\n ",
                "changes": 3
            },
            {
                "status": "modified",
                "additions": 2,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/EchoFilter.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/EchoFilter.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/EchoFilter.java",
                "deletions": 1,
                "sha": "5dfa8f0813eb41fd5849664cfd4dbb1dbd6eee7f",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/EchoFilter.java",
                "patch": "@@ -33,8 +33,9 @@\n \r\n     @Override\r\n     public Result invoke(Invoker<?> invoker, Invocation inv) throws RpcException {\r\n-        if (inv.getMethodName().equals(Constants.$ECHO) && inv.getArguments() != null && inv.getArguments().length == 1)\r\n+        if (inv.getMethodName().equals(Constants.$ECHO) && inv.getArguments() != null && inv.getArguments().length == 1) {\r\n             return new RpcResult(inv.getArguments()[0]);\r\n+        }\r\n         return invoker.invoke(inv);\r\n     }\r\n \r",
                "changes": 3
            },
            {
                "status": "modified",
                "additions": 6,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractExporter.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractExporter.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractExporter.java",
                "deletions": 3,
                "sha": "41a47806c9a896f75251432526d47c223641d545",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractExporter.java",
                "patch": "@@ -33,12 +33,15 @@\n     private volatile boolean unexported = false;\r\n \r\n     public AbstractExporter(Invoker<T> invoker) {\r\n-        if (invoker == null)\r\n+        if (invoker == null) {\r\n             throw new IllegalStateException(\"service invoker == null\");\r\n-        if (invoker.getInterface() == null)\r\n+        }\r\n+        if (invoker.getInterface() == null) {\r\n             throw new IllegalStateException(\"service type == null\");\r\n-        if (invoker.getUrl() == null)\r\n+        }\r\n+        if (invoker.getUrl() == null) {\r\n             throw new IllegalStateException(\"service url == null\");\r\n+        }\r\n         this.invoker = invoker;\r\n     }\r\n \r",
                "changes": 9
            },
            {
                "status": "modified",
                "additions": 4,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractInvoker.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractInvoker.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractInvoker.java",
                "deletions": 2,
                "sha": "e4eba3c29a987155d2909d8eeade25f16c6ab9d1",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractInvoker.java",
                "patch": "@@ -63,10 +63,12 @@ public AbstractInvoker(Class<T> type, URL url, String[] keys) {\n     }\n \n     public AbstractInvoker(Class<T> type, URL url, Map<String, String> attachment) {\n-        if (type == null)\n+        if (type == null) {\n             throw new IllegalArgumentException(\"service type == null\");\n-        if (url == null)\n+        }\n+        if (url == null) {\n             throw new IllegalArgumentException(\"service url == null\");\n+        }\n         this.type = type;\n         this.url = url;\n         this.attachment = attachment == null ? null : Collections.unmodifiableMap(attachment);",
                "changes": 6
            },
            {
                "status": "modified",
                "additions": 4,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcResult.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcResult.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcResult.java",
                "deletions": 2,
                "sha": "7c72133e66b9996992972da2e1c169c1e9c37c25",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcResult.java",
                "patch": "@@ -91,8 +91,9 @@ public Object decode(Channel channel, InputStream input) throws IOException {\n             case DubboCodec.RESPONSE_WITH_EXCEPTION:\n                 try {\n                     Object obj = in.readObject();\n-                    if (obj instanceof Throwable == false)\n+                    if (obj instanceof Throwable == false) {\n                         throw new IOException(\"Response data error, expect Throwable, but get \" + obj);\n+                    }\n                     setException((Throwable) obj);\n                 } catch (ClassNotFoundException e) {\n                     throw new IOException(StringUtils.toString(\"Read response data failed.\", e));\n@@ -119,8 +120,9 @@ public Object decode(Channel channel, InputStream input) throws IOException {\n             case DubboCodec.RESPONSE_WITH_EXCEPTION_WITH_ATTACHMENTS:\n                 try {\n                     Object obj = in.readObject();\n-                    if (obj instanceof Throwable == false)\n+                    if (obj instanceof Throwable == false) {\n                         throw new IOException(\"Response data error, expect Throwable, but get \" + obj);\n+                    }\n                     setException((Throwable) obj);\n                     setAttachments((Map<String, String>) in.readObject(Map.class));\n                 } catch (ClassNotFoundException e) {",
                "changes": 6
            },
            {
                "status": "modified",
                "additions": 2,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboCodec.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboCodec.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboCodec.java",
                "deletions": 1,
                "sha": "60b36ee681f9efe5673bdf18148af24c71ef166c",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboCodec.java",
                "patch": "@@ -179,10 +179,11 @@ protected void encodeRequestData(Channel channel, ObjectOutput out, Object data,\n         out.writeUTF(inv.getMethodName());\n         out.writeUTF(ReflectUtils.getDesc(inv.getParameterTypes()));\n         Object[] args = inv.getArguments();\n-        if (args != null)\n+        if (args != null) {\n             for (int i = 0; i < args.length; i++) {\n                 out.writeObject(encodeInvocationArgument(channel, inv, i));\n             }\n+        }\n         out.writeObject(RpcUtils.getNecessaryAttachments(inv));\n     }\n ",
                "changes": 3
            },
            {
                "status": "modified",
                "additions": 2,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboInvoker.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboInvoker.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboInvoker.java",
                "deletions": 1,
                "sha": "93343c0c26f12e4c6c2e950d2bd2e64099cd012c",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboInvoker.java",
                "patch": "@@ -116,8 +116,9 @@ protected Result doInvoke(final Invocation invocation) throws Throwable {\n \n     @Override\n     public boolean isAvailable() {\n-        if (!super.isAvailable())\n+        if (!super.isAvailable()) {\n             return false;\n+        }\n         for (ExchangeClient client : clients) {\n             if (client.isConnected() && !client.hasAttribute(Constants.CHANNEL_ATTRIBUTE_READONLY_KEY)) {\n                 //cannot write == not Available ?",
                "changes": 3
            },
            {
                "status": "modified",
                "additions": 4,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java",
                "deletions": 2,
                "sha": "334f0fbaba9dde5b097be72e717ff30d8fdbf1e2",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java",
                "patch": "@@ -225,8 +225,9 @@ private boolean isClientSide(Channel channel) {\n \n         DubboExporter<?> exporter = (DubboExporter<?>) exporterMap.get(serviceKey);\n \n-        if (exporter == null)\n+        if (exporter == null) {\n             throw new RemotingException(channel, \"Not found exported service: \" + serviceKey + \" in \" + exporterMap.keySet() + \", may be version or group mismatch \" + \", channel: consumer: \" + channel.getRemoteAddress() + \" --> provider: \" + channel.getLocalAddress() + \", message:\" + inv);\n+        }\n \n         return exporter.getInvoker();\n     }\n@@ -297,8 +298,9 @@ private ExchangeServer createServer(URL url) {\n         url = url.addParameterIfAbsent(Constants.HEARTBEAT_KEY, String.valueOf(Constants.DEFAULT_HEARTBEAT));\n         String str = url.getParameter(Constants.SERVER_KEY, Constants.DEFAULT_REMOTING_SERVER);\n \n-        if (str != null && str.length() > 0 && !ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(str))\n+        if (str != null && str.length() > 0 && !ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(str)) {\n             throw new RpcException(\"Unsupported server type: \" + str + \", url: \" + url);\n+        }\n \n         url = url.addParameter(Constants.CODEC_KEY, DubboCodec.NAME);\n         ExchangeServer server;",
                "changes": 6
            },
            {
                "status": "modified",
                "additions": 11,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/LazyConnectExchangeClient.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/LazyConnectExchangeClient.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/LazyConnectExchangeClient.java",
                "deletions": 6,
                "sha": "b5a4057f54dd1d6ccb1fb4d5115024331e002392",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/LazyConnectExchangeClient.java",
                "patch": "@@ -62,15 +62,17 @@ public LazyConnectExchangeClient(URL url, ExchangeHandler requestHandler) {\n \n \n     private void initClient() throws RemotingException {\n-        if (client != null)\n+        if (client != null) {\n             return;\n+        }\n         if (logger.isInfoEnabled()) {\n             logger.info(\"Lazy connect to \" + url);\n         }\n         connectLock.lock();\n         try {\n-            if (client != null)\n+            if (client != null) {\n                 return;\n+            }\n             this.client = Exchangers.connect(url, requestHandler);\n         } finally {\n             connectLock.unlock();\n@@ -162,22 +164,25 @@ public void send(Object message, boolean sent) throws RemotingException {\n \n     @Override\n     public boolean isClosed() {\n-        if (client != null)\n+        if (client != null) {\n             return client.isClosed();\n-        else\n+        } else {\n             return true;\n+        }\n     }\n \n     @Override\n     public void close() {\n-        if (client != null)\n+        if (client != null) {\n             client.close();\n+        }\n     }\n \n     @Override\n     public void close(int timeout) {\n-        if (client != null)\n+        if (client != null) {\n             client.close(timeout);\n+        }\n     }\n \n     @Override",
                "changes": 17
            },
            {
                "status": "modified",
                "additions": 16,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-redis/src/main/java/org/apache/dubbo/rpc/protocol/redis/RedisProtocol.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-redis/src/main/java/org/apache/dubbo/rpc/protocol/redis/RedisProtocol.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-rpc/dubbo-rpc-redis/src/main/java/org/apache/dubbo/rpc/protocol/redis/RedisProtocol.java",
                "deletions": 8,
                "sha": "ba35c298ec487e983b6b01a986ea8349da8b7312",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-redis/src/main/java/org/apache/dubbo/rpc/protocol/redis/RedisProtocol.java",
                "patch": "@@ -74,22 +74,30 @@ private Serialization getSerialization(URL url) {\n             config.setTestOnBorrow(url.getParameter(\"test.on.borrow\", true));\r\n             config.setTestOnReturn(url.getParameter(\"test.on.return\", false));\r\n             config.setTestWhileIdle(url.getParameter(\"test.while.idle\", false));\r\n-            if (url.getParameter(\"max.idle\", 0) > 0)\r\n+            if (url.getParameter(\"max.idle\", 0) > 0) {\r\n                 config.setMaxIdle(url.getParameter(\"max.idle\", 0));\r\n-            if (url.getParameter(\"min.idle\", 0) > 0)\r\n+            }\r\n+            if (url.getParameter(\"min.idle\", 0) > 0) {\r\n                 config.setMinIdle(url.getParameter(\"min.idle\", 0));\r\n-            if (url.getParameter(\"max.active\", 0) > 0)\r\n+            }\r\n+            if (url.getParameter(\"max.active\", 0) > 0) {\r\n                 config.setMaxTotal(url.getParameter(\"max.active\", 0));\r\n-            if (url.getParameter(\"max.total\", 0) > 0)\r\n+            }\r\n+            if (url.getParameter(\"max.total\", 0) > 0) {\r\n                 config.setMaxTotal(url.getParameter(\"max.total\", 0));\r\n-            if (url.getParameter(\"max.wait\", 0) > 0)\r\n+            }\r\n+            if (url.getParameter(\"max.wait\", 0) > 0) {\r\n                 config.setMaxWaitMillis(url.getParameter(\"max.wait\", 0));\r\n-            if (url.getParameter(\"num.tests.per.eviction.run\", 0) > 0)\r\n+            }\r\n+            if (url.getParameter(\"num.tests.per.eviction.run\", 0) > 0) {\r\n                 config.setNumTestsPerEvictionRun(url.getParameter(\"num.tests.per.eviction.run\", 0));\r\n-            if (url.getParameter(\"time.between.eviction.runs.millis\", 0) > 0)\r\n+            }\r\n+            if (url.getParameter(\"time.between.eviction.runs.millis\", 0) > 0) {\r\n                 config.setTimeBetweenEvictionRunsMillis(url.getParameter(\"time.between.eviction.runs.millis\", 0));\r\n-            if (url.getParameter(\"min.evictable.idle.time.millis\", 0) > 0)\r\n+            }\r\n+            if (url.getParameter(\"min.evictable.idle.time.millis\", 0) > 0) {\r\n                 config.setMinEvictableIdleTimeMillis(url.getParameter(\"min.evictable.idle.time.millis\", 0));\r\n+            }\r\n             final JedisPool jedisPool = new JedisPool(config, url.getHost(), url.getPort(DEFAULT_PORT),\r\n                     url.getParameter(Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT),\r\n                     StringUtils.isBlank(url.getPassword()) ? null : url.getPassword(),\r",
                "changes": 24
            },
            {
                "status": "modified",
                "additions": 2,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftProtocol.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftProtocol.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftProtocol.java",
                "deletions": 1,
                "sha": "96f4726f1dfe76ce31a0177b47b438a21e98fd49",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftProtocol.java",
                "patch": "@@ -201,8 +201,9 @@ private ExchangeServer getServer(URL url) {\n         url = url.addParameterIfAbsent(Constants.CHANNEL_READONLYEVENT_SENT_KEY, Boolean.TRUE.toString());\n         String str = url.getParameter(Constants.SERVER_KEY, Constants.DEFAULT_REMOTING_SERVER);\n \n-        if (str != null && str.length() > 0 && !ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(str))\n+        if (str != null && str.length() > 0 && !ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(str)) {\n             throw new RpcException(\"Unsupported server type: \" + str + \", url: \" + url);\n+        }\n \n         ExchangeServer server;\n         try {",
                "changes": 3
            },
            {
                "status": "modified",
                "additions": 10,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/io/RandomAccessByteArrayOutputStream.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/io/RandomAccessByteArrayOutputStream.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/io/RandomAccessByteArrayOutputStream.java",
                "deletions": 5,
                "sha": "a5d0d119370c90ef89b2623df6e7f06d875ea7a0",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/io/RandomAccessByteArrayOutputStream.java",
                "patch": "@@ -36,31 +36,36 @@ public RandomAccessByteArrayOutputStream() {\n \n     public RandomAccessByteArrayOutputStream(int size) {\n \n-        if (size < 0)\n+        if (size < 0) {\n             throw new IllegalArgumentException(\"Negative initial size: \" + size);\n+        }\n         buffer = new byte[size];\n     }\n \n     @Override\n     public void write(int b) {\n \n         int newcount = count + 1;\n-        if (newcount > buffer.length)\n+        if (newcount > buffer.length) {\n             buffer = Bytes.copyOf(buffer, Math.max(buffer.length << 1, newcount));\n+        }\n         buffer[count] = (byte) b;\n         count = newcount;\n     }\n \n     @Override\n     public void write(byte b[], int off, int len) {\n \n-        if ((off < 0) || (off > b.length) || (len < 0) || ((off + len) > b.length) || ((off + len) < 0))\n+        if ((off < 0) || (off > b.length) || (len < 0) || ((off + len) > b.length) || ((off + len) < 0)) {\n             throw new IndexOutOfBoundsException();\n-        if (len == 0)\n+        }\n+        if (len == 0) {\n             return;\n+        }\n         int newcount = count + len;\n-        if (newcount > buffer.length)\n+        if (newcount > buffer.length) {\n             buffer = Bytes.copyOf(buffer, Math.max(buffer.length << 1, newcount));\n+        }\n         System.arraycopy(b, off, buffer, count, len);\n         count = newcount;\n     }",
                "changes": 15
            },
            {
                "status": "modified",
                "additions": 4,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-serialization/dubbo-serialization-fastjson/src/main/java/org/apache/dubbo/common/serialize/fastjson/FastJsonObjectInput.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-serialization/dubbo-serialization-fastjson/src/main/java/org/apache/dubbo/common/serialize/fastjson/FastJsonObjectInput.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-serialization/dubbo-serialization-fastjson/src/main/java/org/apache/dubbo/common/serialize/fastjson/FastJsonObjectInput.java",
                "deletions": 1,
                "sha": "96824fd58cf172367db2f321429781892b699c2e",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-serialization/dubbo-serialization-fastjson/src/main/java/org/apache/dubbo/common/serialize/fastjson/FastJsonObjectInput.java",
                "patch": "@@ -18,6 +18,7 @@\n \n import org.apache.dubbo.common.serialize.ObjectInput;\n import org.apache.dubbo.common.utils.PojoUtils;\n+\n import com.alibaba.fastjson.JSON;\n \n import java.io.BufferedReader;\n@@ -105,7 +106,9 @@ public Object readObject() throws IOException, ClassNotFoundException {\n \n     private String readLine() throws IOException, EOFException {\n         String line = reader.readLine();\n-        if (line == null || line.trim().length() == 0) throw new EOFException();\n+        if (line == null || line.trim().length() == 0) {\n+            throw new EOFException();\n+        }\n         return line;\n     }\n ",
                "changes": 5
            },
            {
                "status": "modified",
                "additions": 10,
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-serialization/dubbo-serialization-jdk/src/main/java/org/apache/dubbo/common/serialize/java/JavaObjectInput.java",
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-serialization/dubbo-serialization-jdk/src/main/java/org/apache/dubbo/common/serialize/java/JavaObjectInput.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "filename": "dubbo-serialization/dubbo-serialization-jdk/src/main/java/org/apache/dubbo/common/serialize/java/JavaObjectInput.java",
                "deletions": 5,
                "sha": "00e712e6e97c500726339c97faca333eb6946f64",
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-serialization/dubbo-serialization-jdk/src/main/java/org/apache/dubbo/common/serialize/java/JavaObjectInput.java",
                "patch": "@@ -40,12 +40,15 @@ public JavaObjectInput(InputStream is, boolean compacted) throws IOException {\n     @Override\n     public byte[] readBytes() throws IOException {\n         int len = getObjectInputStream().readInt();\n-        if (len < 0)\n+        if (len < 0) {\n             return null;\n-        if (len == 0)\n+        }\n+        if (len == 0) {\n             return new byte[0];\n-        if (len > MAX_BYTE_ARRAY_LENGTH)\n+        }\n+        if (len > MAX_BYTE_ARRAY_LENGTH) {\n             throw new IOException(\"Byte array length too large. \" + len);\n+        }\n \n         byte[] b = new byte[len];\n         getObjectInputStream().readFully(b);\n@@ -55,17 +58,19 @@ public JavaObjectInput(InputStream is, boolean compacted) throws IOException {\n     @Override\n     public String readUTF() throws IOException {\n         int len = getObjectInputStream().readInt();\n-        if (len < 0)\n+        if (len < 0) {\n             return null;\n+        }\n \n         return getObjectInputStream().readUTF();\n     }\n \n     @Override\n     public Object readObject() throws IOException, ClassNotFoundException {\n         byte b = getObjectInputStream().readByte();\n-        if (b == 0)\n+        if (b == 0) {\n             return null;\n+        }\n \n         return getObjectInputStream().readObject();\n     }",
                "changes": 15
            }
        ],
        "unit_tests": [
            "AbstractConfigTest.java",
            "StringUtilsTest.java",
            "UnsafeByteArrayOutputStreamTest.java",
            "BytesTest.java",
            "AbstractClusterInvokerTest.java",
            "ReferenceConfigTest.java",
            "ReflectUtilsTest.java",
            "UnsafeByteArrayInputStreamTest.java",
            "JavaBeanSerializeUtilTest.java",
            "AtomicPositiveIntegerTest.java",
            "StackTest.java",
            "UrlUtilsTest.java",
            "EchoFilterTest.java",
            "NettyClientTest.java",
            "NetUtilsTest.java",
            "UnsafeStringWriterTest.java",
            "ExtensionLoaderTest.java",
            "JSONReaderTest.java",
            "LogTest.java",
            "ReferenceConfigCacheTest.java",
            "UnsafeStringReaderTest.java",
            "MixinTest.java",
            "JSONWriterTest.java",
            "HeaderExchangeHandlerTest.java",
            "PojoUtilsTest.java",
            "JdkCompilerTest.java",
            "SimpleDataStoreTest.java",
            "ThriftProtocolTest.java",
            "ProxyTest.java",
            "CollectionUtilsTest.java",
            "ClassGeneratorTest.java",
            "JSONTest.java",
            "WrapperTest.java",
            "IOUtilsTest.java",
            "LogUtilTest.java",
            "DubboProtocolTest.java",
            "StreamUtilsTest.java",
            "RegistryConfigTest.java",
            "ExchangeCodecTest.java",
            "RedisProtocolTest.java",
            "URLTest.java",
            "FastJsonObjectInputTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "dubbo-compatible/src/test/java/org/apache/dubbo/config/ReferenceConfigTest.java",
        "buggy_files": [
            "dubbo-common/src/main/java/org/apache/dubbo/common/store/support/SimpleDataStore.java",
            "dubbo-common/src/main/java/org/apache/dubbo/common/io/StreamUtils.java",
            "dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Proxy.java",
            "dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java",
            "dubbo-common/src/main/java/org/apache/dubbo/common/utils/Log.java",
            "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/EchoFilter.java",
            "dubbo-common/src/main/java/org/apache/dubbo/common/json/JSON.java",
            "dubbo-common/src/main/java/org/apache/dubbo/common/utils/ReflectUtils.java",
            "dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeStringReader.java",
            "dubbo-common/src/main/java/org/apache/dubbo/common/utils/Stack.java",
            "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java",
            "dubbo-common/src/main/java/org/apache/dubbo/common/utils/IOUtils.java",
            "dubbo-common/src/main/java/org/apache/dubbo/common/utils/StringUtils.java",
            "dubbo-serialization/dubbo-serialization-fastjson/src/main/java/org/apache/dubbo/common/serialize/fastjson/FastJsonObjectInput.java",
            "dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/JdkCompiler.java",
            "dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONReader.java",
            "dubbo-common/src/main/java/org/apache/dubbo/common/utils/UrlUtils.java",
            "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeaderExchangeHandler.java",
            "dubbo-remoting/dubbo-remoting-netty/src/main/java/org/apache/dubbo/remoting/transport/netty/NettyClient.java",
            "dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyClient.java",
            "dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Mixin.java",
            "dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Wrapper.java",
            "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvoker.java",
            "dubbo-common/src/main/java/org/apache/dubbo/common/beanutil/JavaBeanSerializeUtil.java",
            "dubbo-rpc/dubbo-rpc-redis/src/main/java/org/apache/dubbo/rpc/protocol/redis/RedisProtocol.java",
            "dubbo-compatible/src/main/java/com/alibaba/dubbo/common/URL.java",
            "dubbo-common/src/main/java/org/apache/dubbo/common/URL.java",
            "dubbo-common/src/main/java/org/apache/dubbo/common/utils/NetUtils.java",
            "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
            "dubbo-compatible/src/main/java/com/alibaba/dubbo/config/ReferenceConfig.java",
            "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java",
            "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/RegistryConfig.java",
            "dubbo-compatible/src/main/java/com/alibaba/dubbo/config/RegistryConfig.java",
            "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/ReferenceConfigCache.java",
            "dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/ClassGenerator.java",
            "dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftProtocol.java",
            "dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONWriter.java",
            "dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java",
            "dubbo-common/src/main/java/org/apache/dubbo/common/utils/LogUtil.java",
            "dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeByteArrayOutputStream.java",
            "dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeStringWriter.java",
            "dubbo-common/src/main/java/org/apache/dubbo/common/io/Bytes.java",
            "dubbo-common/src/main/java/org/apache/dubbo/common/utils/AtomicPositiveInteger.java",
            "dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeByteArrayInputStream.java",
            "dubbo-common/src/main/java/org/apache/dubbo/common/utils/CollectionUtils.java",
            "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/codec/ExchangeCodec.java"
        ],
        "fixed": true
    }
]