[
    {
        "repo": "knox",
        "commit": "https://github.com/apache/knox/commit/3004ba8b9b78d603e04d8c6f2313b0b527fdd252",
        "bug_id": "knox_3004ba8",
        "message": "KNOX-965 - SecureQueryDecryptProcessor decode call could return null thus it would get a NPE (Jeffrey E Rodriguez via lmccay)",
        "parent": "https://github.com/apache/knox/commit/315a0ba9b1fd72999666c46ce300b808acb33d63",
        "patched_files": [
            "SecureQueryDecryptProcessor.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 35,
                "raw_url": "https://github.com/apache/knox/raw/3004ba8b9b78d603e04d8c6f2313b0b527fdd252/gateway-provider-rewrite-step-secure-query/src/main/java/org/apache/hadoop/gateway/securequery/SecureQueryDecryptProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-rewrite-step-secure-query/src/main/java/org/apache/hadoop/gateway/securequery/SecureQueryDecryptProcessor.java?ref=3004ba8b9b78d603e04d8c6f2313b0b527fdd252",
                "filename": "gateway-provider-rewrite-step-secure-query/src/main/java/org/apache/hadoop/gateway/securequery/SecureQueryDecryptProcessor.java",
                "deletions": 22,
                "sha": "0687cb4a98b5c1c32059daf2170ebeda3edfd148",
                "blob_url": "https://github.com/apache/knox/blob/3004ba8b9b78d603e04d8c6f2313b0b527fdd252/gateway-provider-rewrite-step-secure-query/src/main/java/org/apache/hadoop/gateway/securequery/SecureQueryDecryptProcessor.java",
                "patch": "@@ -30,7 +30,6 @@\n import org.apache.hadoop.gateway.util.urltemplate.Template;\n \n import java.io.UnsupportedEncodingException;\n-import java.util.List;\n import java.util.Map;\n import java.util.StringTokenizer;\n \n@@ -60,37 +59,51 @@ public UrlRewriteStepStatus process( UrlRewriteContext context ) throws Exceptio\n     Builder newUrl = new Builder( currUrl );\n     Map<String,Query> map = newUrl.getQuery();\n     Query query = map.remove( ENCRYPTED_PARAMETER_NAME );\n+    UrlRewriteStepStatus status = UrlRewriteStepStatus.FAILURE;\n+    status = getUrlRewriteStepStatus(context, newUrl, map, query, status);\n+    return status;\n+  }\n+\n+  private UrlRewriteStepStatus getUrlRewriteStepStatus(UrlRewriteContext context, Builder newUrl, Map<String, Query> map, Query query, UrlRewriteStepStatus status) throws UnsupportedEncodingException {\n     if( query != null ) {\n       String value = query.getFirstValue().getPattern();\n       value = decode( value );\n-      StringTokenizer outerParser = new StringTokenizer( value, \"&\" );\n-      while( outerParser.hasMoreTokens() ) {\n-        String pair = outerParser.nextToken();\n-        StringTokenizer innerParser = new StringTokenizer( pair, \"=\" );\n-        if( innerParser.hasMoreTokens() ) {\n-          String paramName = innerParser.nextToken();\n-          if( innerParser.hasMoreTokens() ) {\n-            String paramValue = innerParser.nextToken();\n-            // Need to remove from the clear parameters any param name in the encoded params.\n-            // If we don't then someone could override something in the encoded param.\n-            map.remove( paramName );\n-            newUrl.addQuery( paramName, \"\", paramValue, true );\n-          } else {\n-            newUrl.addQuery( paramName, \"\", null, true );\n-          }\n-        }\n-      }\n-      context.setCurrentUrl( newUrl.build() );\n-      context.getParameters().resolve( \"gateway.name\" );\n+      status = getUrlRewriteStepStatus(context, newUrl, map, status, value);\n+    }\n+    return status;\n+  }\n+\n+  private UrlRewriteStepStatus getUrlRewriteStepStatus(UrlRewriteContext context, Builder newUrl, Map<String, Query> map, UrlRewriteStepStatus status, String value) {\n+    if( value != null ) {\n+       StringTokenizer outerParser = new StringTokenizer( value, \"&\" );\n+       while( outerParser.hasMoreTokens() ) {\n+         String pair = outerParser.nextToken();\n+         StringTokenizer innerParser = new StringTokenizer( pair, \"=\" );\n+         if( innerParser.hasMoreTokens() ) {\n+           String paramName = innerParser.nextToken();\n+           if( innerParser.hasMoreTokens() ) {\n+             String paramValue = innerParser.nextToken();\n+             // Need to remove from the clear parameters any param name in the encoded params.\n+             // If we don't then someone could override something in the encoded param.\n+             map.remove( paramName );\n+             newUrl.addQuery( paramName, \"\", paramValue, true );\n+           } else {\n+             newUrl.addQuery( paramName, \"\", null, true );\n+           }\n+         }\n+       }\n+       context.setCurrentUrl( newUrl.build() );\n+       context.getParameters().resolve( \"gateway.name\" );\n+       status = UrlRewriteStepStatus.SUCCESS;\n     }\n-    return UrlRewriteStepStatus.SUCCESS;\n+    return status;\n   }\n \n   @Override\n   public void destroy() {\n   }\n \n-  private String decode( String string ) throws UnsupportedEncodingException {\n+  String decode( String string ) throws UnsupportedEncodingException {\n     byte[] bytes = Base64.decodeBase64( string );\n     EncryptionResult result = EncryptionResult.fromByteArray(bytes);\n     byte[] clear = cryptoService.decryptForCluster(clusterName, ",
                "changes": 57
            },
            {
                "status": "modified",
                "additions": 68,
                "raw_url": "https://github.com/apache/knox/raw/3004ba8b9b78d603e04d8c6f2313b0b527fdd252/gateway-provider-rewrite-step-secure-query/src/test/java/org/apache/hadoop/gateway/securequery/SecureQueryEncryptDecryptProcessorTest.java",
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-rewrite-step-secure-query/src/test/java/org/apache/hadoop/gateway/securequery/SecureQueryEncryptDecryptProcessorTest.java?ref=3004ba8b9b78d603e04d8c6f2313b0b527fdd252",
                "filename": "gateway-provider-rewrite-step-secure-query/src/test/java/org/apache/hadoop/gateway/securequery/SecureQueryEncryptDecryptProcessorTest.java",
                "deletions": 0,
                "sha": "453aeb9df901eb7f2956fced1f6162375cf6729a",
                "blob_url": "https://github.com/apache/knox/blob/3004ba8b9b78d603e04d8c6f2313b0b527fdd252/gateway-provider-rewrite-step-secure-query/src/test/java/org/apache/hadoop/gateway/securequery/SecureQueryEncryptDecryptProcessorTest.java",
                "patch": "@@ -27,9 +27,11 @@\n import org.apache.hadoop.gateway.util.urltemplate.Parser;\n import org.apache.hadoop.gateway.util.urltemplate.Query;\n import org.apache.hadoop.gateway.util.urltemplate.Template;\n+import org.apache.hadoop.gateway.filter.rewrite.spi.UrlRewriteStepStatus;\n import org.easymock.Capture;\n import org.easymock.EasyMock;\n import org.junit.Test;\n+import org.junit.Assert;\n \n import java.util.Arrays;\n \n@@ -108,4 +110,70 @@ public void testEncryptDecrypt() throws Exception {\n     assertThat( query, nullValue() );\n   }\n \n+  @Test\n+  public void testEncryptBadDecrypt() throws Exception {\n+    Query query;\n+    Template origTemplate = Parser.parseLiteral( \"http://host:0/path/file?query-param-name=query-param-value\" );\n+\n+    // Test encryption.  Results are left in encTemplate\n+\n+    AliasService as = EasyMock.createNiceMock( AliasService.class );\n+    String secret = \"sdkjfhsdkjfhsdfs\";\n+    EasyMock.expect( as.getPasswordFromAliasForCluster(\"test-cluster-name\", \"encryptQueryString\")).andReturn( secret.toCharArray() ).anyTimes();\n+    CryptoService cryptoService = new DefaultCryptoService();\n+    ((DefaultCryptoService)cryptoService).setAliasService(as);\n+    GatewayServices gatewayServices = EasyMock.createNiceMock( GatewayServices.class );\n+    EasyMock.expect( gatewayServices.getService( GatewayServices.CRYPTO_SERVICE ) ).andReturn( cryptoService );\n+\n+    UrlRewriteEnvironment encEnvironment = EasyMock.createNiceMock( UrlRewriteEnvironment.class );\n+    EasyMock.expect( encEnvironment.getAttribute( GatewayServices.GATEWAY_SERVICES_ATTRIBUTE ) ).andReturn( gatewayServices ).anyTimes();\n+    EasyMock.expect( encEnvironment.getAttribute( GatewayServices.GATEWAY_CLUSTER_ATTRIBUTE ) ).andReturn( \"test-cluster-name\" ).anyTimes();\n+    UrlRewriteContext encContext = EasyMock.createNiceMock( UrlRewriteContext.class );\n+    EasyMock.expect( encContext.getCurrentUrl() ).andReturn( origTemplate );\n+    Capture<Template> encTemplate = new Capture<Template>();\n+    encContext.setCurrentUrl( EasyMock.capture( encTemplate ) );\n+    EasyMock.replay( gatewayServices, as, encEnvironment, encContext );\n+\n+    SecureQueryEncryptDescriptor descriptor = new SecureQueryEncryptDescriptor();\n+    SecureQueryEncryptProcessor processor = new SecureQueryEncryptProcessor();\n+    processor.initialize( encEnvironment, descriptor );\n+    processor.process( encContext );\n+\n+    assertThat( encTemplate, notNullValue() );\n+    query = encTemplate.getValue().getQuery().get( \"_\" );\n+    assertThat( query.getFirstValue().getPattern().length(), greaterThan( 1 ) );\n+    query = encTemplate.getValue().getQuery().get( \"query-param-name\" );\n+    assertThat( query, nullValue() );\n+\n+    // Test decryption with decode returning null\n+\n+    gatewayServices = EasyMock.createNiceMock( GatewayServices.class );\n+    EasyMock.expect( gatewayServices.getService( GatewayServices.CRYPTO_SERVICE ) ).andReturn( cryptoService );\n+    as = EasyMock.createNiceMock( AliasService.class );\n+    EasyMock.expect( as.getPasswordFromAliasForCluster(\"test-cluster-name\", \"encryptQueryString\")).andReturn( secret.toCharArray() ).anyTimes();\n+\n+    UrlRewriteEnvironment decEnvironment = EasyMock.createNiceMock( UrlRewriteEnvironment.class );\n+    EasyMock.expect( decEnvironment.getAttribute( GatewayServices.GATEWAY_SERVICES_ATTRIBUTE ) ).andReturn( gatewayServices ).anyTimes();\n+    EasyMock.expect( decEnvironment.getAttribute( GatewayServices.GATEWAY_CLUSTER_ATTRIBUTE ) ).andReturn( \"test-cluster-name\" ).anyTimes();\n+    Params decParams = EasyMock.createNiceMock( Params.class );\n+    EasyMock.expect( decParams.resolve( GatewayServices.GATEWAY_CLUSTER_ATTRIBUTE ) ).andReturn( Arrays.asList(\"test-cluster-name\") ).anyTimes();\n+    UrlRewriteContext decContext = EasyMock.createNiceMock( UrlRewriteContext.class );\n+    EasyMock.expect( decContext.getCurrentUrl() ).andReturn( encTemplate.getValue() );\n+    EasyMock.expect( decContext.getParameters() ).andReturn( decParams );\n+    Capture<Template> decTemplate = new Capture<Template>();\n+    decContext.setCurrentUrl( EasyMock.capture( decTemplate ) );\n+    SecureQueryDecryptDescriptor descriptor1 = new SecureQueryDecryptDescriptor();\n+    SecureQueryDecryptProcessor decProcessor =\n+       EasyMock.createMockBuilder(\n+          SecureQueryDecryptProcessor.class ).addMockedMethod( SecureQueryDecryptProcessor.class.getDeclaredMethod(\"decode\", String.class )).createMock();\n+    EasyMock.expect( decProcessor.decode(EasyMock.anyObject(String.class))).andReturn( null );\n+    EasyMock.replay( gatewayServices, as, decEnvironment, decParams, decContext, decProcessor );\n+\n+    decProcessor.initialize( decEnvironment, descriptor1 );\n+    UrlRewriteStepStatus status = decProcessor.process( decContext );\n+\n+    Assert.assertTrue((status == UrlRewriteStepStatus.FAILURE));\n+  }\n+\n+\n }",
                "changes": 68
            }
        ],
        "unit_tests": [
            "SecureQueryEncryptDecryptProcessorTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "gateway-provider-rewrite-step-secure-query/src/test/java/org/apache/hadoop/gateway/securequery/SecureQueryEncryptDecryptProcessorTest.java",
        "buggy_files": [
            "gateway-provider-rewrite-step-secure-query/src/main/java/org/apache/hadoop/gateway/securequery/SecureQueryDecryptProcessor.java"
        ],
        "fixed": true
    }
]