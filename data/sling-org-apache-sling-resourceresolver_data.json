[{"commit": "https://github.com/apache/sling-org-apache-sling-resourceresolver/commit/e10e25b882c774c6ba8491db76a2e019d239c102", "parent": "https://github.com/apache/sling-org-apache-sling-resourceresolver/commit/688b62265001397d15fade9a1bbf8bedf1eddd06", "message": "SLING-7266 : NPE in resource resolver activator", "bug_id": "sling-org-apache-sling-resourceresolver_1", "file": [{"additions": 11, "raw_url": "https://github.com/apache/sling-org-apache-sling-resourceresolver/raw/e10e25b882c774c6ba8491db76a2e019d239c102/src/main/java/org/apache/sling/resourceresolver/impl/FactoryPreconditions.java", "blob_url": "https://github.com/apache/sling-org-apache-sling-resourceresolver/blob/e10e25b882c774c6ba8491db76a2e019d239c102/src/main/java/org/apache/sling/resourceresolver/impl/FactoryPreconditions.java", "sha": "3262805d26d3f2f9569ef95f056cc5ddfdc56702", "changes": 15, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-resourceresolver/contents/src/main/java/org/apache/sling/resourceresolver/impl/FactoryPreconditions.java?ref=e10e25b882c774c6ba8491db76a2e019d239c102", "patch": "@@ -24,6 +24,7 @@\n \n import org.apache.sling.resourceresolver.impl.legacy.LegacyResourceProviderWhiteboard;\n import org.apache.sling.resourceresolver.impl.providers.ResourceProviderHandler;\n+import org.apache.sling.resourceresolver.impl.providers.ResourceProviderInfo;\n import org.apache.sling.resourceresolver.impl.providers.ResourceProviderTracker;\n import org.osgi.framework.BundleContext;\n import org.osgi.framework.Constants;\n@@ -56,7 +57,7 @@ public void activate(final BundleContext bc,\n         synchronized ( this ) {\n             this.tracker = tracker;\n \n-            final List<RequiredProvider> rps = new ArrayList<RequiredProvider>();\n+            final List<RequiredProvider> rps = new ArrayList<>();\n             if ( legycyConfiguration != null ) {\n                 final Logger logger = LoggerFactory.getLogger(getClass());\n                 for(final String value : legycyConfiguration) {\n@@ -103,17 +104,23 @@ public boolean checkPreconditions(final String unavailableName, final String una\n                 for (final RequiredProvider rp : localRequiredProviders) {\n                     canRegister = false;\n                     for (final ResourceProviderHandler h : localTracker.getResourceProviderStorage().getAllHandlers()) {\n-                        final ServiceReference ref = h.getInfo().getServiceReference();\n+                        final ResourceProviderInfo info = h.getInfo();\n+                        if ( info == null ) {\n+                            // provider has been deactivated in the meantime\n+                            // ignore and continue\n+                            continue;\n+                        }\n+                        final ServiceReference ref = info.getServiceReference();\n                         final Object servicePid = ref.getProperty(Constants.SERVICE_PID);\n                         if ( unavailableServicePid != null && unavailableServicePid.equals(servicePid) ) {\n                             // ignore this service\n                             continue;\n                         }\n-                        if ( unavailableName != null && unavailableName.equals(h.getInfo().getName()) ) {\n+                        if ( unavailableName != null && unavailableName.equals(info.getName()) ) {\n                             // ignore this service\n                             continue;\n                         }\n-                        if ( rp.name != null && rp.name.equals(h.getInfo().getName()) ) {\n+                        if ( rp.name != null && rp.name.equals(info.getName()) ) {\n                             canRegister = true;\n                             break;\n                         } else if (rp.filter != null && rp.filter.match(ref)) {", "filename": "src/main/java/org/apache/sling/resourceresolver/impl/FactoryPreconditions.java"}], "repo": "sling-org-apache-sling-resourceresolver"}, {"commit": "https://github.com/apache/sling-org-apache-sling-resourceresolver/commit/52d2df7c2bb790c40e967235bbc0efe0b6812784", "parent": "https://github.com/apache/sling-org-apache-sling-resourceresolver/commit/59ed07e467160ee73be638a9358e56d527cf61ad", "message": "SLING-7009 NPE in ResourceChangeListenerInfo when resource.change.types is not String or String array\n\ncatch NPE also and mark config invalid when not String or String array\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1802897 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "sling-org-apache-sling-resourceresolver_2", "file": [{"additions": 5, "raw_url": "https://github.com/apache/sling-org-apache-sling-resourceresolver/raw/52d2df7c2bb790c40e967235bbc0efe0b6812784/src/main/java/org/apache/sling/resourceresolver/impl/observation/ResourceChangeListenerInfo.java", "blob_url": "https://github.com/apache/sling-org-apache-sling-resourceresolver/blob/52d2df7c2bb790c40e967235bbc0efe0b6812784/src/main/java/org/apache/sling/resourceresolver/impl/observation/ResourceChangeListenerInfo.java", "sha": "0d9eadb4340a5824efc34f3124be7f95a3b9013e", "changes": 10, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-resourceresolver/contents/src/main/java/org/apache/sling/resourceresolver/impl/observation/ResourceChangeListenerInfo.java?ref=52d2df7c2bb790c40e967235bbc0efe0b6812784", "patch": "@@ -117,17 +117,17 @@ public ResourceChangeListenerInfo(final ServiceReference<ResourceChangeListener>\n         if (ref.getProperty(CHANGES) != null ) {\n             final Set<ChangeType> rts = new HashSet<ChangeType>();\n             final Set<ChangeType> pts = new HashSet<ChangeType>();\n-            for (final String changeName : toStringArray(ref.getProperty(CHANGES))) {\n-                try {\n+            try {\n+                for (final String changeName : toStringArray(ref.getProperty(CHANGES))) {\n                     final ChangeType ct = ChangeType.valueOf(changeName);\n-                    if ( ct.ordinal() < ChangeType.PROVIDER_ADDED.ordinal()) {\n+                    if (ct.ordinal() < ChangeType.PROVIDER_ADDED.ordinal()) {\n                         rts.add(ct);\n                     } else {\n                         pts.add(ct);\n                     }\n-                } catch ( final IllegalArgumentException iae) {\n-                    configValid = false;\n                 }\n+            } catch (final Exception e) {\n+                configValid = false;\n             }\n             if ( rts.isEmpty() ) {\n                 this.resourceChangeTypes = Collections.emptySet();", "filename": "src/main/java/org/apache/sling/resourceresolver/impl/observation/ResourceChangeListenerInfo.java"}], "repo": "sling-org-apache-sling-resourceresolver"}, {"commit": "https://github.com/apache/sling-org-apache-sling-resourceresolver/commit/67c278a1093b1f67a84e4838afda537fffd9fe8a", "parent": "https://github.com/apache/sling-org-apache-sling-resourceresolver/commit/5b055a8da116626070b27ce4dec65ce255a981fe", "message": "SLING-6441 : NPE while processing mapping events\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1777542 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "sling-org-apache-sling-resourceresolver_3", "file": [{"additions": 1, "raw_url": "https://github.com/apache/sling-org-apache-sling-resourceresolver/raw/67c278a1093b1f67a84e4838afda537fffd9fe8a/src/main/java/org/apache/sling/resourceresolver/impl/mapping/MapEntries.java", "blob_url": "https://github.com/apache/sling-org-apache-sling-resourceresolver/blob/67c278a1093b1f67a84e4838afda537fffd9fe8a/src/main/java/org/apache/sling/resourceresolver/impl/mapping/MapEntries.java", "sha": "4fcadca1fffb5f375eb44efdd5d26fb164e74c09", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-resourceresolver/contents/src/main/java/org/apache/sling/resourceresolver/impl/mapping/MapEntries.java?ref=67c278a1093b1f67a84e4838afda537fffd9fe8a", "patch": "@@ -481,7 +481,7 @@ private boolean doUpdateAlias(final Resource resource) {\n             final String containingResourceName = containingResource.getName();\n             final String parentPath = ResourceUtil.getParent(containingResource.getPath());\n \n-            final Map<String, String> aliasMapEntry = aliasMap.get(parentPath);\n+            final Map<String, String> aliasMapEntry = parentPath == null ? null : aliasMap.get(parentPath);\n             if (aliasMapEntry != null) {\n                 for (Iterator<Map.Entry<String, String>> iterator = aliasMapEntry.entrySet().iterator(); iterator.hasNext(); ) {\n                     final Map.Entry<String, String> entry = iterator.next();", "filename": "src/main/java/org/apache/sling/resourceresolver/impl/mapping/MapEntries.java"}], "repo": "sling-org-apache-sling-resourceresolver"}, {"commit": "https://github.com/apache/sling-org-apache-sling-resourceresolver/commit/51a766032ea4e0d69943411cb7249cac3e8ccf45", "parent": "https://github.com/apache/sling-org-apache-sling-resourceresolver/commit/5e48237ac9401f0e4f202cf8238f5953d194be24", "message": "SLING-5545 Potential NPE in ResourceProviderTracker.postEvents during shutdown\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1731760 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "sling-org-apache-sling-resourceresolver_4", "file": [{"additions": 1, "raw_url": "https://github.com/apache/sling-org-apache-sling-resourceresolver/raw/51a766032ea4e0d69943411cb7249cac3e8ccf45/src/main/java/org/apache/sling/resourceresolver/impl/providers/ResourceProviderTracker.java", "blob_url": "https://github.com/apache/sling-org-apache-sling-resourceresolver/blob/51a766032ea4e0d69943411cb7249cac3e8ccf45/src/main/java/org/apache/sling/resourceresolver/impl/providers/ResourceProviderTracker.java", "sha": "d10fde9c26c9912a4e613dde47161ef2c3d164eb", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-resourceresolver/contents/src/main/java/org/apache/sling/resourceresolver/impl/providers/ResourceProviderTracker.java?ref=51a766032ea4e0d69943411cb7249cac3e8ccf45", "patch": "@@ -406,7 +406,7 @@ public void run() {\n                 for(final ProviderEvent e : events) {\n                     postOSGiEvent(e);\n                     postResourceProviderChange(e);\n-                    if ( e.pid != null ) {\n+                    if ( e.pid != null && listener != null ) {\n                         listener.providerChanged(e.pid);\n                     }\n                 }", "filename": "src/main/java/org/apache/sling/resourceresolver/impl/providers/ResourceProviderTracker.java"}], "repo": "sling-org-apache-sling-resourceresolver"}, {"commit": "https://github.com/apache/sling-org-apache-sling-resourceresolver/commit/5e48237ac9401f0e4f202cf8238f5953d194be24", "parent": "https://github.com/apache/sling-org-apache-sling-resourceresolver/commit/3e2931050672b095f37a1074245c7526e8e26138", "message": "SLING-5532 : resolver.map(../messaging.html) results in NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1731017 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "sling-org-apache-sling-resourceresolver_5", "file": [{"additions": 7, "raw_url": "https://github.com/apache/sling-org-apache-sling-resourceresolver/raw/5e48237ac9401f0e4f202cf8238f5953d194be24/src/main/java/org/apache/sling/resourceresolver/impl/ResourceResolverImpl.java", "blob_url": "https://github.com/apache/sling-org-apache-sling-resourceresolver/blob/5e48237ac9401f0e4f202cf8238f5953d194be24/src/main/java/org/apache/sling/resourceresolver/impl/ResourceResolverImpl.java", "sha": "7e5a672e241a714b71cc70d24470aa2126b25759", "changes": 9, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-resourceresolver/contents/src/main/java/org/apache/sling/resourceresolver/impl/ResourceResolverImpl.java?ref=5e48237ac9401f0e4f202cf8238f5953d194be24", "patch": "@@ -32,6 +32,7 @@\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+import javax.annotation.CheckForNull;\n import javax.jcr.NamespaceException;\n import javax.jcr.RepositoryException;\n import javax.jcr.Session;\n@@ -61,7 +62,6 @@\n import org.apache.sling.resourceresolver.impl.mapping.MapEntry;\n import org.apache.sling.resourceresolver.impl.params.ParsedParameters;\n import org.apache.sling.resourceresolver.impl.providers.ResourceProviderStorageProvider;\n-import org.apache.sling.resourceresolver.impl.providers.ResourceProviderTracker;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -1039,7 +1039,12 @@ private Resource getChildInternal(final Resource parent, final String childName)\n     /**\n      * Creates a resource with the given path if existing\n      */\n-    private Resource getAbsoluteResourceInternal(final Resource parent, final String path, final Map<String, String> parameters, final boolean isResolve) {\n+    private Resource getAbsoluteResourceInternal(@CheckForNull final Resource parent, @CheckForNull final String path, final Map<String, String> parameters, final boolean isResolve) {\n+        if (path == null || path.length() == 0 || path.charAt(0) != '/') {\n+            logger.debug(\"getResourceInternal: Path must be absolute {}\", path);\n+            return null; // path must be absolute\n+        }\n+\n         final Resource parentToUse;\n         if (parent != null && path.startsWith(parent.getPath())) {\n             parentToUse = parent;", "filename": "src/main/java/org/apache/sling/resourceresolver/impl/ResourceResolverImpl.java"}], "repo": "sling-org-apache-sling-resourceresolver"}, {"commit": "https://github.com/apache/sling-org-apache-sling-resourceresolver/commit/3e2931050672b095f37a1074245c7526e8e26138", "parent": "https://github.com/apache/sling-org-apache-sling-resourceresolver/commit/70de28d2626c4aefda8158b128140a40a2f9b360", "message": "SLING-5525 : Potential NPE / race condition with unregistered resource providers\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1730794 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "sling-org-apache-sling-resourceresolver_6", "file": [{"additions": 3, "raw_url": "https://github.com/apache/sling-org-apache-sling-resourceresolver/raw/3e2931050672b095f37a1074245c7526e8e26138/src/main/java/org/apache/sling/resourceresolver/impl/providers/ResourceProviderStorage.java", "blob_url": "https://github.com/apache/sling-org-apache-sling-resourceresolver/blob/3e2931050672b095f37a1074245c7526e8e26138/src/main/java/org/apache/sling/resourceresolver/impl/providers/ResourceProviderStorage.java", "sha": "dac3616d3f4298ba29cc8ed298ce6e7bad8b3dc8", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-resourceresolver/contents/src/main/java/org/apache/sling/resourceresolver/impl/providers/ResourceProviderStorage.java?ref=3e2931050672b095f37a1074245c7526e8e26138", "patch": "@@ -23,6 +23,7 @@\n \n import org.apache.sling.api.resource.runtime.dto.AuthType;\n import org.apache.sling.resourceresolver.impl.providers.tree.PathTree;\n+import org.apache.sling.spi.resource.provider.ResourceProvider;\n \n /**\n  * The resource provider storage contains all available handlers\n@@ -60,7 +61,8 @@ public ResourceProviderStorage(List<ResourceProviderHandler> handlers) {\n             if (info.isAttributable()) {\n                 this.attributableHandlers.add(h);\n             }\n-            if (h.getResourceProvider().getQueryLanguageProvider() != null) {\n+            final ResourceProvider<Object> rp = h.getResourceProvider();\n+            if (rp != null && rp.getQueryLanguageProvider() != null) {\n                 this.languageQueryableHandlers.add(h);\n             }\n         }", "filename": "src/main/java/org/apache/sling/resourceresolver/impl/providers/ResourceProviderStorage.java"}, {"additions": 15, "raw_url": "https://github.com/apache/sling-org-apache-sling-resourceresolver/raw/3e2931050672b095f37a1074245c7526e8e26138/src/main/java/org/apache/sling/resourceresolver/impl/providers/stateful/ProviderManager.java", "blob_url": "https://github.com/apache/sling-org-apache-sling-resourceresolver/blob/3e2931050672b095f37a1074245c7526e8e26138/src/main/java/org/apache/sling/resourceresolver/impl/providers/stateful/ProviderManager.java", "sha": "8509892cdd68b43c71fd6c9654fbc39ac1120901", "changes": 25, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-resourceresolver/contents/src/main/java/org/apache/sling/resourceresolver/impl/providers/stateful/ProviderManager.java?ref=3e2931050672b095f37a1074245c7526e8e26138", "patch": "@@ -81,17 +81,22 @@ public ProviderManager(@Nonnull final ResourceResolver resolver, @Nonnull final\n     throws LoginException {\n         AuthenticatedResourceProvider provider = this.contextMap.get(handler);\n         if (provider == null) {\n-            try {\n-                provider = authenticate(handler, control);\n-                this.contextMap.put(handler, provider);\n-                if ( handler.getInfo().getAuthType() == AuthType.lazy || handler.getInfo().getAuthType() == AuthType.required ) {\n-                    control.registerAuthenticatedProvider(handler, provider.getResolveContext().getProviderState());\n+            final ResourceProvider<Object> resourceProvider = handler.getResourceProvider();\n+            if ( resourceProvider != null ) {\n+                try {\n+                    provider = authenticate(handler, resourceProvider, control);\n+                    this.contextMap.put(handler, provider);\n+                    if ( handler.getInfo().getAuthType() == AuthType.lazy || handler.getInfo().getAuthType() == AuthType.required ) {\n+                        control.registerAuthenticatedProvider(handler, provider.getResolveContext().getProviderState());\n+                    }\n+                } catch ( final LoginException le) {\n+                    logger.debug(\"Authentication to resource provider \" + resourceProvider + \" failed: \" + le.getMessage(), le);\n+                    this.contextMap.put(handler, AuthenticatedResourceProvider.UNAUTHENTICATED_PROVIDER);\n+\n+                    throw le;\n                 }\n-            } catch ( final LoginException le) {\n-                logger.debug(\"Authentication to resource provider \" + handler.getResourceProvider() + \" failed: \" + le.getMessage(), le);\n+            } else {\n                 this.contextMap.put(handler, AuthenticatedResourceProvider.UNAUTHENTICATED_PROVIDER);\n-\n-                throw le;\n             }\n         }\n \n@@ -147,8 +152,8 @@ public void authenticateAll(@Nonnull final List<ResourceProviderHandler> handler\n      * @throws LoginException If authentication fails\n      */\n     private @Nonnull AuthenticatedResourceProvider authenticate(@Nonnull final ResourceProviderHandler handler,\n+            @Nonnull final ResourceProvider<Object> provider,\n             @Nonnull final ResourceResolverControl control) throws LoginException {\n-        final ResourceProvider<Object> provider = handler.getResourceProvider();\n         boolean isAuthenticated = false;\n         Object contextData = null;\n         if ( (handler.getInfo().getAuthType() == AuthType.required || handler.getInfo().getAuthType() == AuthType.lazy) ) {", "filename": "src/main/java/org/apache/sling/resourceresolver/impl/providers/stateful/ProviderManager.java"}], "repo": "sling-org-apache-sling-resourceresolver"}, {"commit": "https://github.com/apache/sling-org-apache-sling-resourceresolver/commit/ccd2ba4ecfe91e02008b99180e81232ef2caf002", "parent": "https://github.com/apache/sling-org-apache-sling-resourceresolver/commit/f2ab2f6777b3b3f766046ac503ed48e1b0fb464d", "message": "Fix NPE during tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1579457 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "sling-org-apache-sling-resourceresolver_7", "file": [{"additions": 5, "raw_url": "https://github.com/apache/sling-org-apache-sling-resourceresolver/raw/ccd2ba4ecfe91e02008b99180e81232ef2caf002/src/test/java/org/apache/sling/resourceresolver/impl/MockedResourceResolverImplTest.java", "blob_url": "https://github.com/apache/sling-org-apache-sling-resourceresolver/blob/ccd2ba4ecfe91e02008b99180e81232ef2caf002/src/test/java/org/apache/sling/resourceresolver/impl/MockedResourceResolverImplTest.java", "sha": "223c3b1e27348af56266ee97c9776f2f818a847a", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-resourceresolver/contents/src/test/java/org/apache/sling/resourceresolver/impl/MockedResourceResolverImplTest.java?ref=ccd2ba4ecfe91e02008b99180e81232ef2caf002", "patch": "@@ -36,6 +36,7 @@\n import org.apache.sling.api.resource.ResourceResolver;\n import org.apache.sling.api.resource.ResourceResolverFactory;\n import org.apache.sling.api.resource.ValueMap;\n+import org.apache.sling.api.wrappers.ValueMapDecorator;\n import org.junit.After;\n import org.junit.Assert;\n import org.junit.Before;\n@@ -293,7 +294,11 @@ private Resource buildResource(String fullpath, Iterable<Resource> children, Res\n                 resourceMetadata.put(properties[i], properties[i+1]);\n                 vm.put(properties[i], properties[i+1]);\n             }\n+            Mockito.when(resource.getValueMap()).thenReturn(vm);\n             Mockito.when(resource.adaptTo(Mockito.eq(ValueMap.class))).thenReturn(vm);\n+        } else {\n+            Mockito.when(resource.getValueMap()).thenReturn(ValueMapDecorator.EMPTY);\n+            Mockito.when(resource.adaptTo(Mockito.eq(ValueMap.class))).thenReturn(ValueMapDecorator.EMPTY);\n         }\n \n         return resource;", "filename": "src/test/java/org/apache/sling/resourceresolver/impl/MockedResourceResolverImplTest.java"}], "repo": "sling-org-apache-sling-resourceresolver"}, {"commit": "https://github.com/apache/sling-org-apache-sling-resourceresolver/commit/f650a28158af59edace8e4680c1d4e802039fb79", "parent": "https://github.com/apache/sling-org-apache-sling-resourceresolver/commit/912584c4381d88a7b8f006620576093e34ee01d1", "message": "SLING-2916, SLING-2922 NPE problem in RootResourceProviderEntry\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1494674 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "sling-org-apache-sling-resourceresolver_8", "file": [{"additions": 1, "raw_url": "https://github.com/apache/sling-org-apache-sling-resourceresolver/raw/f650a28158af59edace8e4680c1d4e802039fb79/src/main/java/org/apache/sling/resourceresolver/impl/tree/RootResourceProviderEntry.java", "blob_url": "https://github.com/apache/sling-org-apache-sling-resourceresolver/blob/f650a28158af59edace8e4680c1d4e802039fb79/src/main/java/org/apache/sling/resourceresolver/impl/tree/RootResourceProviderEntry.java", "sha": "86d6594dc06f08dbe56ef669122ec0edef384b84", "changes": 4, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-resourceresolver/contents/src/main/java/org/apache/sling/resourceresolver/impl/tree/RootResourceProviderEntry.java?ref=f650a28158af59edace8e4680c1d4e802039fb79", "patch": "@@ -137,16 +137,14 @@ public boolean select(final ProviderHandler handler, final QueriableResourceProv\n             \n             private ProviderHandler actProviderHandler;\n             \n-            private ResourceResolverContext rrCtx = ctx; \n-\n             private Resource seek() {\n                 Resource result = null;\n                 if ( nextResourceIter == null || !nextResourceIter.hasNext() ) {\n                     nextResourceIter = null;\n                     while ( i.hasNext() && nextResourceIter == null ) {\n                         final QueriableResourceProvider adap = i.next();\n                         nextResourceIter = adap.findResources(resolver, query, language);\n-                        actProviderHandler = queriableProviders.getProviderHandler(rrCtx, adap);\n+                        actProviderHandler = queriableProviders.getProviderHandler(ctx, adap);\n                     }\n                 }\n                 if ( nextResourceIter != null ) {", "filename": "src/main/java/org/apache/sling/resourceresolver/impl/tree/RootResourceProviderEntry.java"}], "repo": "sling-org-apache-sling-resourceresolver"}, {"commit": "https://github.com/apache/sling-org-apache-sling-resourceresolver/commit/912584c4381d88a7b8f006620576093e34ee01d1", "parent": "https://github.com/apache/sling-org-apache-sling-resourceresolver/commit/34471284e74fb49e4b1696edae7c07d0d9fd602a", "message": "SLING-2915 - Infrequent NPE in resourceresolver\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1490527 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "sling-org-apache-sling-resourceresolver_9", "file": [{"additions": 2, "raw_url": "https://github.com/apache/sling-org-apache-sling-resourceresolver/raw/912584c4381d88a7b8f006620576093e34ee01d1/src/main/java/org/apache/sling/resourceresolver/impl/helper/SortedProviderList.java", "blob_url": "https://github.com/apache/sling-org-apache-sling-resourceresolver/blob/912584c4381d88a7b8f006620576093e34ee01d1/src/main/java/org/apache/sling/resourceresolver/impl/helper/SortedProviderList.java", "sha": "110cac1af41035ac34179cdef4f50920c4a0c1b1", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-resourceresolver/contents/src/main/java/org/apache/sling/resourceresolver/impl/helper/SortedProviderList.java?ref=912584c4381d88a7b8f006620576093e34ee01d1", "patch": "@@ -188,15 +188,15 @@ public void remove(final ResourceProviderFactoryHandler factory) {\n     /**\n      * returns the ProviderHandler for a specific resource provider\n      */\n-    public ProviderHandler getProviderHandler ( ResourceProvider resourceProvider )\n+    public ProviderHandler getProviderHandler ( ResourceResolverContext ctx, ResourceProvider resourceProvider )\n     {\n         ProviderHandler returnValue = null;\n         final List<Entry> list = new ArrayList<Entry>();\n         list.addAll(Arrays.asList(this.sortedList));\n         final Iterator<Entry> i = list.iterator();\n         while ( i.hasNext() ) {\n             final Entry entry = i.next();\n-            if ( entry.handler.equals(resourceProvider) ) {\n+            if ( entry.handler.getResourceProvider(ctx).equals(resourceProvider) ) {\n                 returnValue = entry.handler;\n                 break;\n             }", "filename": "src/main/java/org/apache/sling/resourceresolver/impl/helper/SortedProviderList.java"}, {"additions": 6, "raw_url": "https://github.com/apache/sling-org-apache-sling-resourceresolver/raw/912584c4381d88a7b8f006620576093e34ee01d1/src/main/java/org/apache/sling/resourceresolver/impl/tree/RootResourceProviderEntry.java", "blob_url": "https://github.com/apache/sling-org-apache-sling-resourceresolver/blob/912584c4381d88a7b8f006620576093e34ee01d1/src/main/java/org/apache/sling/resourceresolver/impl/tree/RootResourceProviderEntry.java", "sha": "4d7949c0682c74064cc272ac3124c06e7aa8a651", "changes": 8, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-resourceresolver/contents/src/main/java/org/apache/sling/resourceresolver/impl/tree/RootResourceProviderEntry.java?ref=912584c4381d88a7b8f006620576093e34ee01d1", "patch": "@@ -136,6 +136,8 @@ public boolean select(final ProviderHandler handler, final QueriableResourceProv\n             private Iterator<Resource> nextResourceIter;\n             \n             private ProviderHandler actProviderHandler;\n+            \n+            private ResourceResolverContext rrCtx = ctx; \n \n             private Resource seek() {\n                 Resource result = null;\n@@ -144,14 +146,16 @@ private Resource seek() {\n                     while ( i.hasNext() && nextResourceIter == null ) {\n                         final QueriableResourceProvider adap = i.next();\n                         nextResourceIter = adap.findResources(resolver, query, language);\n-                        actProviderHandler = queriableProviders.getProviderHandler(adap);\n+                        actProviderHandler = queriableProviders.getProviderHandler(rrCtx, adap);\n                     }\n                 }\n                 if ( nextResourceIter != null ) {\n                     while ( nextResourceIter.hasNext() && result == null ) {\n                         result = nextResourceIter.next();\n                     }\n-                    result = actProviderHandler.getReadableResource(ctx, result);\n+                    if ( actProviderHandler != null ) {\n+                        result = actProviderHandler.getReadableResource(ctx, result);\n+                    }\n                     if ( result == null ) {\n                         result = seek();\n                     }", "filename": "src/main/java/org/apache/sling/resourceresolver/impl/tree/RootResourceProviderEntry.java"}], "repo": "sling-org-apache-sling-resourceresolver"}, {"commit": "https://github.com/apache/sling-org-apache-sling-resourceresolver/commit/ab3edd8b8843d233bae4abd4685179a2a4381978", "parent": "https://github.com/apache/sling-org-apache-sling-resourceresolver/commit/dea717b56aedeaf197be6067a0d5bc1b0d3d4bc1", "message": "SLING-3941 : NPE in org.apache.sling.jcr.resource.internal.helper.jcr.JcrResourceProviderFactory\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1625487 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "sling-org-apache-sling-resourceresolver_10", "file": [{"additions": 8, "raw_url": "https://github.com/apache/sling-org-apache-sling-resourceresolver/raw/ab3edd8b8843d233bae4abd4685179a2a4381978/src/main/java/org/apache/sling/resourceresolver/impl/CommonResourceResolverFactoryImpl.java", "blob_url": "https://github.com/apache/sling-org-apache-sling-resourceresolver/blob/ab3edd8b8843d233bae4abd4685179a2a4381978/src/main/java/org/apache/sling/resourceresolver/impl/CommonResourceResolverFactoryImpl.java", "sha": "078d3403c4507a83ddb54f0a5fb43205d14fd2c2", "changes": 11, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-resourceresolver/contents/src/main/java/org/apache/sling/resourceresolver/impl/CommonResourceResolverFactoryImpl.java?ref=ab3edd8b8843d233bae4abd4685179a2a4381978", "patch": "@@ -126,9 +126,14 @@ public ResourceResolver getThreadResourceResolver() {\n      * Make sure to remove it from the current thread context.\n      */\n     public void closed(final ResourceResolverImpl resourceResolverImpl) {\n-        final Stack<ResourceResolver> resolverStack = resolverStackHolder.get();\n-        if ( resolverStack != null ) {\n-            resolverStack.remove(resourceResolverImpl);\n+        // on shutdown, the factory might already be closed before the resolvers close\n+        // therefore we have to check for null\n+        final ThreadLocal<Stack<ResourceResolver>> tl = resolverStackHolder;\n+        if ( tl != null ) {\n+            final Stack<ResourceResolver> resolverStack = tl.get();\n+            if ( resolverStack != null ) {\n+                resolverStack.remove(resourceResolverImpl);\n+            }\n         }\n     }\n ", "filename": "src/main/java/org/apache/sling/resourceresolver/impl/CommonResourceResolverFactoryImpl.java"}], "repo": "sling-org-apache-sling-resourceresolver"}, {"commit": "https://github.com/apache/sling-org-apache-sling-resourceresolver/commit/37e624af5d3066c8df3d61463a3f79df56ff5fe5", "parent": "https://github.com/apache/sling-org-apache-sling-resourceresolver/commit/c8518b7f3c47c05bed25755412d6b8cfee6d9cad", "message": "SLING-2819 - resource resolver namespaces mangling tests added, with @Ignores for this issue's NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1466430 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "sling-org-apache-sling-resourceresolver_11", "file": [{"additions": 141, "raw_url": "https://github.com/apache/sling-org-apache-sling-resourceresolver/raw/37e624af5d3066c8df3d61463a3f79df56ff5fe5/src/test/java/org/apache/sling/resourceresolver/impl/ResourceResolverMangleNamespacesTest.java", "blob_url": "https://github.com/apache/sling-org-apache-sling-resourceresolver/blob/37e624af5d3066c8df3d61463a3f79df56ff5fe5/src/test/java/org/apache/sling/resourceresolver/impl/ResourceResolverMangleNamespacesTest.java", "sha": "ffdc065f29316630b5ba4fe4bc1b41d4f29c284e", "changes": 141, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-resourceresolver/contents/src/test/java/org/apache/sling/resourceresolver/impl/ResourceResolverMangleNamespacesTest.java?ref=37e624af5d3066c8df3d61463a3f79df56ff5fe5", "patch": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.sling.resourceresolver.impl;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import javax.jcr.RepositoryException;\n+import javax.jcr.Session;\n+\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.resourceresolver.impl.helper.ResourceResolverContext;\n+import org.apache.sling.resourceresolver.impl.tree.RootResourceProviderEntry;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+/** Test ResourceResolverImpl.mangleNamespaces methods */\n+public class ResourceResolverMangleNamespacesTest {\n+    private ResourceResolverImpl rr;\n+    \n+    @Mock\n+    private Session mockedSession;\n+    \n+    private Session activeSession;\n+    \n+    public static final String NS_PREFIX = \"testNS\";\n+    public static final String NS_URL = \"http://example.com/namespaces/testNS\";\n+    \n+    @Before \n+    public void setup() throws RepositoryException {\n+        MockitoAnnotations.initMocks(this);\n+        activeSession = mockedSession;\n+        \n+        // Setup a ResourceResolverImpl with namespace mangling and unmangling\n+        final ResourceResolverFactoryActivator act = new ResourceResolverFactoryActivator() {\n+            @Override\n+            public boolean isMangleNamespacePrefixes() {\n+                return true;\n+            }\n+        };\n+        \n+        Mockito.when(mockedSession.getNamespacePrefix(NS_PREFIX)).thenReturn(NS_URL);\n+        \n+        final RootResourceProviderEntry rrpe = new RootResourceProviderEntry() {\n+            @Override\n+            @SuppressWarnings(\"unchecked\")\n+            public <AdapterType> AdapterType adaptTo(ResourceResolverContext ctx, Class<AdapterType> type) {\n+                if(type == Session.class) {\n+                    return (AdapterType)activeSession;\n+                }\n+                return super.adaptTo(ctx, type);\n+            }\n+        };\n+        \n+        final ResourceResolverFactoryImpl fac = new ResourceResolverFactoryImpl(act) {\n+            @Override\n+            public RootResourceProviderEntry getRootProviderEntry() {\n+                return rrpe;\n+            }\n+        };\n+        \n+        rr = new ResourceResolverImpl(fac, new ResourceResolverContext(false, null));\n+    }\n+    \n+    @Test \n+    public void testUrlWithPath() {\n+        assertEquals(\"http://example.com/some/path\", rr.map(\"http://example.com/some/path\"));\n+    }\n+    \n+    @Test \n+    public void testMangleHttp() {\n+        assertEquals(\"http://example.com/path/_with_colon\", rr.map(\"http://example.com/path/with:colon\"));\n+    }\n+    \n+    @Test \n+    public void testUnmangleHttp() {\n+        final Resource r = rr.resolve(null, \"http://example.com/path/_with_mangling\");\n+        assertEquals(\"/http://example.com/path/with:mangling\", r.getPath());\n+    }\n+    \n+    @Test \n+    public void testUnmangleNoSession() {\n+        activeSession = null;\n+        final Resource r = rr.resolve(null, \"http://example.com/path/_with_mangling\");\n+        assertEquals(\"/http://example.com/path/_with_mangling\", r.getPath());\n+    }\n+    \n+    @Test \n+    public void testManglePath() {\n+        assertEquals(\"/example.com/path/_with_colon\", rr.map(\"/example.com/path/with:colon\"));\n+    }\n+    \n+    @Test \n+    public void testUnmanglePath() {\n+        final Resource r = rr.resolve(null, \"/example.com/path/_with_mangling\");\n+        assertEquals(\"/example.com/path/with:mangling\", r.getPath());\n+    }\n+    \n+    @Test \n+    @Ignore(\"SLING-2819\")\n+    public void testUrlNoPath() {\n+        assertEquals(\"http://withSlash.com/\", rr.map(\"http://withSlash.com/\"));\n+        assertEquals(\"http://noSlash.com\", rr.map(\"http://noSlash.com\"));\n+        assertEquals(\"http://nosuffix\", rr.map(\"http://nosuffix\"));\n+    }\n+    \n+    @Test \n+    @Ignore(\"SLING-2819\")\n+    public void testWeirdCases() {\n+        assertEquals(\"http://foo\", rr.map(\"http://foo\"));\n+        assertEquals(\"http://\", rr.map(\"http://\"));\n+        assertEquals(\"http:/\", rr.map(\"http:/\"));\n+        assertEquals(\"http:\", rr.map(\"http:\"));\n+        assertEquals(\"http\", rr.map(\"http\"));\n+        \n+        assertEquals(\"gopher://foo\", rr.map(\"gopher://foo\"));\n+        assertEquals(\"gopher://\", rr.map(\"gopher://\"));\n+        assertEquals(\"gopher:/\", rr.map(\"gopher:/\"));\n+        assertEquals(\"gopher:\", rr.map(\"gopher:\"));\n+        assertEquals(\"gopher\", rr.map(\"gopher\"));\n+    }\n+}", "filename": "src/test/java/org/apache/sling/resourceresolver/impl/ResourceResolverMangleNamespacesTest.java"}], "repo": "sling-org-apache-sling-resourceresolver"}, {"commit": "https://github.com/apache/sling-org-apache-sling-resourceresolver/commit/c1f9345570466402c5f63f689ccab2e49ad0594b", "parent": "https://github.com/apache/sling-org-apache-sling-resourceresolver/commit/d7a7ef86377bbfd69d75b239bccbc83af1cafce2", "message": "SLING-2626 :  NPE in ResourceResolverImpl.getResource. Apply slightly modifed version of patch from Radu Cotescu\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1400860 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "sling-org-apache-sling-resourceresolver_12", "file": [{"additions": 22, "raw_url": "https://github.com/apache/sling-org-apache-sling-resourceresolver/raw/c1f9345570466402c5f63f689ccab2e49ad0594b/src/main/java/org/apache/sling/resourceresolver/impl/ResourceResolverImpl.java", "blob_url": "https://github.com/apache/sling-org-apache-sling-resourceresolver/blob/c1f9345570466402c5f63f689ccab2e49ad0594b/src/main/java/org/apache/sling/resourceresolver/impl/ResourceResolverImpl.java", "sha": "9eddf6b99b77814a02563495882def8af6b77bae", "changes": 43, "status": "modified", "deletions": 21, "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-resourceresolver/contents/src/main/java/org/apache/sling/resourceresolver/impl/ResourceResolverImpl.java?ref=c1f9345570466402c5f63f689ccab2e49ad0594b", "patch": "@@ -563,31 +563,32 @@ public String map(final HttpServletRequest request, final String resourcePath) {\n     public Resource getResource(String path) {\n         checkClosed();\n \n-        // if the path is absolute, normalize . and .. segements and get res\n-        if (path.startsWith(\"/\")) {\n-            path = ResourceUtil.normalize(path);\n-            Resource result = (path != null) ? getResourceInternal(path) : null;\n-            if (result != null) {\n-                result = this.factory.getResourceDecoratorTracker().decorate(result);\n-                return result;\n-            }\n-            return null;\n-        }\n+        Resource result = null;\n+        if ( path != null ) {\n+            // if the path is absolute, normalize . and .. segments and get res\n+            if (path.startsWith(\"/\")) {\n+                path = ResourceUtil.normalize(path);\n+                result = (path != null) ? getResourceInternal(path) : null;\n+                if (result != null) {\n+                    result = this.factory.getResourceDecoratorTracker().decorate(result);\n+                }\n+            } else {\n \n-        // otherwise we have to apply the search path\n-        // (don't use this.getSearchPath() to save a few cycle for not cloning)\n-        final String[] paths = factory.getSearchPath();\n-        if (paths != null) {\n-            for (final String prefix : factory.getSearchPath()) {\n-                final Resource res = getResource(prefix + path);\n-                if (res != null) {\n-                    return res;\n+                // otherwise we have to apply the search path\n+                // (don't use this.getSearchPath() to save a few cycle for not cloning)\n+                final String[] paths = factory.getSearchPath();\n+                if (paths != null) {\n+                    for (final String prefix : factory.getSearchPath()) {\n+                        result = getResource(prefix + path);\n+                        if (result != null) {\n+                            break;\n+                        }\n+                    }\n                 }\n             }\n         }\n \n-        // no resource found, if we get here\n-        return null;\n+        return result;\n     }\n \n     /**\n@@ -597,7 +598,7 @@ public Resource getResource(String path) {\n     public Resource getResource(final Resource base, String path) {\n         checkClosed();\n \n-        if (!path.startsWith(\"/\") && base != null) {\n+        if (path != null && !path.startsWith(\"/\") && base != null) {\n             path = base.getPath() + \"/\" + path;\n         }\n ", "filename": "src/main/java/org/apache/sling/resourceresolver/impl/ResourceResolverImpl.java"}, {"additions": 22, "raw_url": "https://github.com/apache/sling-org-apache-sling-resourceresolver/raw/c1f9345570466402c5f63f689ccab2e49ad0594b/src/test/java/org/apache/sling/resourceresolver/impl/ResourceResolverImplTest.java", "blob_url": "https://github.com/apache/sling-org-apache-sling-resourceresolver/blob/c1f9345570466402c5f63f689ccab2e49ad0594b/src/test/java/org/apache/sling/resourceresolver/impl/ResourceResolverImplTest.java", "sha": "860e70fdd135c6bf7b59326c3785fa41c57058ba", "changes": 35, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-resourceresolver/contents/src/test/java/org/apache/sling/resourceresolver/impl/ResourceResolverImplTest.java?ref=c1f9345570466402c5f63f689ccab2e49ad0594b", "patch": "@@ -176,26 +176,26 @@\n         final Resource res00 = resResolver.resolve((String) null);\n         assertNotNull(res00);\n         assertTrue(\"Resource must be NonExistingResource\",\n-                        res00 instanceof NonExistingResource);\n+                res00 instanceof NonExistingResource);\n         assertEquals(\"Null path is expected to return root\", \"/\",\n-            res00.getPath());\n+                res00.getPath());\n \n         // relative paths are treated as if absolute\n         final String path01 = \"relPath/relPath\";\n         final Resource res01 = resResolver.resolve(path01);\n         assertNotNull(res01);\n         assertEquals(\"Expecting absolute path for relative path\", \"/\" + path01,\n-            res01.getPath());\n+                res01.getPath());\n         assertTrue(\"Resource must be NonExistingResource\",\n-            res01 instanceof NonExistingResource);\n+                res01 instanceof NonExistingResource);\n \n         final String no_resource_path = \"/no_resource/at/this/location\";\n         final Resource res02 = resResolver.resolve(no_resource_path);\n         assertNotNull(res02);\n         assertEquals(\"Expecting absolute path for relative path\",\n-            no_resource_path, res02.getPath());\n+                no_resource_path, res02.getPath());\n         assertTrue(\"Resource must be NonExistingResource\",\n-            res01 instanceof NonExistingResource);\n+                res01 instanceof NonExistingResource);\n \n         try {\n             resResolver.resolve((HttpServletRequest) null);\n@@ -207,25 +207,34 @@\n         final Resource res0 = resResolver.resolve(null, no_resource_path);\n         assertNotNull(\"Expecting resource if resolution fails\", res0);\n         assertTrue(\"Resource must be NonExistingResource\",\n-            res0 instanceof NonExistingResource);\n+                res0 instanceof NonExistingResource);\n         assertEquals(\"Path must be the original path\", no_resource_path,\n-            res0.getPath());\n+                res0.getPath());\n \n         final HttpServletRequest req1 = new ResourceResolverTestRequest(\n-            no_resource_path);\n+                no_resource_path);\n         final Resource res1 = resResolver.resolve(req1);\n         assertNotNull(\"Expecting resource if resolution fails\", res1);\n         assertTrue(\"Resource must be NonExistingResource\",\n-            res1 instanceof NonExistingResource);\n+                res1 instanceof NonExistingResource);\n         assertEquals(\"Path must be the original path\", no_resource_path,\n-            res1.getPath());\n+                res1.getPath());\n \n         final HttpServletRequest req2 = new ResourceResolverTestRequest(null);\n         final Resource res2 = resResolver.resolve(req2);\n         assertNotNull(\"Expecting resource if resolution fails\", res2);\n         assertTrue(\"Resource must be NonExistingResource\",\n-            res2 instanceof NonExistingResource);\n+                res2 instanceof NonExistingResource);\n         assertEquals(\"Path must be the the root path\", \"/\", res2.getPath());\n+\n+        final Resource res3 = resResolver.getResource(null);\n+        assertNull(\"Expected null resource for null path\", res3);\n+\n+        final Resource res4 = resResolver.getResource(null, null);\n+        assertNull(\"Expected null resource for null path\", res4);\n+\n+        final Resource res5 = resResolver.getResource(res01, null);\n+        assertNull(\"Expected null resource for null path\", res5);\n     }\n \n     @Test public void test_clone_based_on_anonymous() throws Exception {\n@@ -297,7 +306,7 @@\n         assertTrue(validNames.remove(names.next()));\n         assertFalse(\"Expect no more names\", names.hasNext());\n         assertTrue(\"Expect validNames set to be empty now\",\n-            validNames.isEmpty());\n+                validNames.isEmpty());\n \n         rr.close();\n     }", "filename": "src/test/java/org/apache/sling/resourceresolver/impl/ResourceResolverImplTest.java"}], "repo": "sling-org-apache-sling-resourceresolver"}]
