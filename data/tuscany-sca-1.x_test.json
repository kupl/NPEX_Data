{
    "tuscany-sca-1.x_453c759": {
        "bug_id": "tuscany-sca-1.x_453c759",
        "commit": "https://github.com/apache/tuscany-sca-1.x/commit/453c7598b598b9beda9a3b377d4810e5a0b31bae",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tuscany-sca-1.x/blob/453c7598b598b9beda9a3b377d4810e5a0b31bae/modules/domain-impl/src/test/java/org/apache/tuscany/sca/domain/impl/TestNodeManagerServiceImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tuscany-sca-1.x/contents/modules/domain-impl/src/test/java/org/apache/tuscany/sca/domain/impl/TestNodeManagerServiceImpl.java?ref=453c7598b598b9beda9a3b377d4810e5a0b31bae",
                "deletions": 1,
                "filename": "modules/domain-impl/src/test/java/org/apache/tuscany/sca/domain/impl/TestNodeManagerServiceImpl.java",
                "patch": "@@ -58,7 +58,7 @@ public void stop() throws NodeException {\n         System.out.println(\"stop\");\r\n     }\r\n     \r\n-    public void destroyNode() throws NodeException {\r\n+    public void destroyNode() {\r\n         System.out.println(\"destroy\");\r\n     } \r\n     \r",
                "raw_url": "https://github.com/apache/tuscany-sca-1.x/raw/453c7598b598b9beda9a3b377d4810e5a0b31bae/modules/domain-impl/src/test/java/org/apache/tuscany/sca/domain/impl/TestNodeManagerServiceImpl.java",
                "sha": "11deef5906b030ec668df985ecccf510c0fd88ad",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tuscany-sca-1.x/blob/453c7598b598b9beda9a3b377d4810e5a0b31bae/modules/interface-java/src/main/java/org/apache/tuscany/sca/interfacedef/java/impl/JavaInterfaceIntrospectorImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tuscany-sca-1.x/contents/modules/interface-java/src/main/java/org/apache/tuscany/sca/interfacedef/java/impl/JavaInterfaceIntrospectorImpl.java?ref=453c7598b598b9beda9a3b377d4810e5a0b31bae",
                "deletions": 2,
                "filename": "modules/interface-java/src/main/java/org/apache/tuscany/sca/interfacedef/java/impl/JavaInterfaceIntrospectorImpl.java",
                "patch": "@@ -175,12 +175,12 @@ public void introspectInterface(JavaInterface javaInterface, Class<?> clazz) thr\n             if (nonBlocking) {\n                 if (!(returnType == void.class)) {\n                         throw new InvalidOperationException(\n-                             \"Method should return 'void' when declared with an@OneWay annotation.\",\n+                             \"Method should return 'void' when declared with an @OneWay annotation. \"+method,\n                              method);\n                 }\n                 if (!(faultTypes.length == 0)) {\n                         throw new InvalidOperationException(\n-                             \"Method should not declare exceptions with an @OneWay annotation.\",\n+                             \"Method should not declare exceptions with an @OneWay annotation. \"+method,\n                              method);\n                 }\n              }",
                "raw_url": "https://github.com/apache/tuscany-sca-1.x/raw/453c7598b598b9beda9a3b377d4810e5a0b31bae/modules/interface-java/src/main/java/org/apache/tuscany/sca/interfacedef/java/impl/JavaInterfaceIntrospectorImpl.java",
                "sha": "0468c2c8401a4168ff9e225018ca1891b03c69fd",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tuscany-sca-1.x/blob/453c7598b598b9beda9a3b377d4810e5a0b31bae/modules/node-impl/src/main/java/org/apache/tuscany/sca/node/management/impl/SCANodeManagerServiceImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tuscany-sca-1.x/contents/modules/node-impl/src/main/java/org/apache/tuscany/sca/node/management/impl/SCANodeManagerServiceImpl.java?ref=453c7598b598b9beda9a3b377d4810e5a0b31bae",
                "deletions": 1,
                "filename": "modules/node-impl/src/main/java/org/apache/tuscany/sca/node/management/impl/SCANodeManagerServiceImpl.java",
                "patch": "@@ -90,7 +90,7 @@ public void stop() throws NodeException {\n         node.stopFromDomain();\r\n     }\r\n     \r\n-    public void destroyNode() throws NodeException {\r\n+    public void destroyNode() {\r\n         // do nothing - the domain can't destroy nodes\r\n     }    \r\n     \r",
                "raw_url": "https://github.com/apache/tuscany-sca-1.x/raw/453c7598b598b9beda9a3b377d4810e5a0b31bae/modules/node-impl/src/main/java/org/apache/tuscany/sca/node/management/impl/SCANodeManagerServiceImpl.java",
                "sha": "0aff1701ef3fcc638d2105af410cb75e75bffd11",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tuscany-sca-1.x/blob/453c7598b598b9beda9a3b377d4810e5a0b31bae/modules/node/src/main/java/org/apache/tuscany/sca/node/management/SCANodeManagerService.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tuscany-sca-1.x/contents/modules/node/src/main/java/org/apache/tuscany/sca/node/management/SCANodeManagerService.java?ref=453c7598b598b9beda9a3b377d4810e5a0b31bae",
                "deletions": 1,
                "filename": "modules/node/src/main/java/org/apache/tuscany/sca/node/management/SCANodeManagerService.java",
                "patch": "@@ -77,7 +77,7 @@\n      * as the WSDL processing struggles with methods called destroy\r\n      */\r\n     @OneWay\r\n-    void destroyNode() throws NodeException;     \r\n+    void destroyNode();\r\n \r\n     /**\r\n      * Pass in an updated version of a composite in base64 encoded XML form. The node will compare\r",
                "raw_url": "https://github.com/apache/tuscany-sca-1.x/raw/453c7598b598b9beda9a3b377d4810e5a0b31bae/modules/node/src/main/java/org/apache/tuscany/sca/node/management/SCANodeManagerService.java",
                "sha": "d9cc65947020198960412926710cccf86ff3ae3e",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/tuscany-sca-1.x/blob/453c7598b598b9beda9a3b377d4810e5a0b31bae/modules/node2-impl/src/main/java/org/apache/tuscany/sca/node/impl/NodeImpl.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/tuscany-sca-1.x/contents/modules/node2-impl/src/main/java/org/apache/tuscany/sca/node/impl/NodeImpl.java?ref=453c7598b598b9beda9a3b377d4810e5a0b31bae",
                "deletions": 0,
                "filename": "modules/node2-impl/src/main/java/org/apache/tuscany/sca/node/impl/NodeImpl.java",
                "patch": "@@ -83,6 +83,39 @@\n     // The composite loaded into this node\n     private Composite composite; \n     \n+    /** \n+     * Constructs a new SCA node.\n+     *  \n+     * @param configuration the the node configuration information.\n+     */\n+    NodeImpl(ConfiguredNodeImplementation configuration) {\n+        configurationName = configuration.getURI();\n+        logger.log(Level.INFO, \"Creating node: \" + configuration.getURI());               \n+\n+        try {\n+            // Initialize the runtime\n+            initRuntime();\n+            \n+            URL configurationURL = new URL(configuration.getURI());\n+\n+            // Resolve contribution URLs\n+            for (Contribution contribution: configuration.getContributions()) {\n+                URL contributionURL = new URL(configurationURL, contribution.getLocation());\n+                contribution.setLocation(contributionURL.toString());\n+            }\n+            \n+            // Resolve composite URL\n+            URL compositeURL = new URL(configurationURL, configuration.getComposite().getURI());\n+            configuration.getComposite().setURI(compositeURL.toString());\n+\n+            // Configure the node\n+            configureNode(configuration);\n+\n+        } catch (Exception e) {\n+            throw new ServiceRuntimeException(e);\n+        }        \n+    }\n+\n     /** \n      * Constructs a new SCA node.\n      *  ",
                "raw_url": "https://github.com/apache/tuscany-sca-1.x/raw/453c7598b598b9beda9a3b377d4810e5a0b31bae/modules/node2-impl/src/main/java/org/apache/tuscany/sca/node/impl/NodeImpl.java",
                "sha": "ce5fac51a38ef4ca7b4d492a154da0ceeba20233",
                "status": "modified"
            }
        ],
        "message": "TUSCANY-1867: Apply patch from Vamsavardhana Reddy to fix @OneWay with String return type causes NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@656521 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tuscany-sca-1.x/commit/1b2e68cc29e3917d57986ffa5b874dfb7892bfad",
        "patched_files": [
            "SCANodeManagerServiceImpl.java",
            "NodeImpl.java",
            "JavaInterfaceIntrospectorImpl.java",
            "SCANodeManagerService.java"
        ],
        "repo": "tuscany-sca-1.x",
        "unit_tests": [
            "TestNodeManagerServiceImpl.java"
        ]
    },
    "tuscany-sca-1.x_e22d946": {
        "bug_id": "tuscany-sca-1.x_e22d946",
        "commit": "https://github.com/apache/tuscany-sca-1.x/commit/e22d946ccff042b39f00f310ccb1cb9cea58c5f7",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/tuscany-sca-1.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/commands/launcher/src/main/resources/META-INF/tuscany/system.scdl",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/tuscany-sca-1.x/contents/commands/launcher/src/main/resources/META-INF/tuscany/system.scdl?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7",
                "deletions": 0,
                "filename": "commands/launcher/src/main/resources/META-INF/tuscany/system.scdl",
                "patch": "@@ -114,4 +114,12 @@\n         <system:implementation.system class=\"org.apache.tuscany.core.services.work.jsr237.Jsr237WorkScheduler\"/>\n     </component>\n \n+    <component name=\"policyBuilderRegistry\">\n+         <system:implementation.system class=\"org.apache.tuscany.core.policy.PolicyBuilderRegistryImpl\"/>\n+    </component>\n+\n+    <component name=\"propertyFactory\">\n+        <system:implementation.system class=\"org.apache.tuscany.core.loader.StringParserPropertyFactory\"/>\n+    </component>\n+\n </composite>",
                "raw_url": "https://github.com/apache/tuscany-sca-1.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/commands/launcher/src/main/resources/META-INF/tuscany/system.scdl",
                "sha": "48ab8cb59f7e25fbcce1b1e7b8da274ee067333d",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/tuscany-sca-1.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/core/src/main/java/org/apache/tuscany/core/implementation/system/wire/SystemOutboundAutowire.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/tuscany-sca-1.x/contents/core/src/main/java/org/apache/tuscany/core/implementation/system/wire/SystemOutboundAutowire.java?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7",
                "deletions": 4,
                "filename": "core/src/main/java/org/apache/tuscany/core/implementation/system/wire/SystemOutboundAutowire.java",
                "patch": "@@ -24,6 +24,7 @@\n \n import org.apache.tuscany.spi.QualifiedName;\n import org.apache.tuscany.spi.component.TargetException;\n+import org.apache.tuscany.spi.component.TargetNotFoundException;\n import org.apache.tuscany.spi.wire.InboundInvocationChain;\n import org.apache.tuscany.spi.wire.InboundWire;\n import org.apache.tuscany.spi.wire.OutboundInvocationChain;\n@@ -39,12 +40,12 @@\n public class SystemOutboundAutowire<T> implements OutboundAutowire<T>, SystemOutboundWire<T> {\n     private String referenceName;\n     private Class<T> businessInterface;\n-    private AutowireComponent<?> context;\n+    private AutowireComponent<?> component;\n \n-    public SystemOutboundAutowire(String referenceName, Class<T> businessInterface, AutowireComponent<?> context) {\n+    public SystemOutboundAutowire(String referenceName, Class<T> businessInterface, AutowireComponent<?> component) {\n         this.referenceName = referenceName;\n         this.businessInterface = businessInterface;\n-        this.context = context;\n+        this.component = component;\n     }\n \n     public String getReferenceName() {\n@@ -63,7 +64,13 @@ public void setTargetName(QualifiedName targetName) {\n     }\n \n     public T getTargetService() throws TargetException {\n-        return context.resolveInstance(businessInterface);\n+        T service = component.resolveInstance(businessInterface);\n+        if (service == null) {\n+            TargetNotFoundException e = new TargetNotFoundException(\"Autowire target not found\");\n+            e.setIdentifier(businessInterface.getName());\n+            throw e;\n+        }\n+        return service;\n     }\n \n     public Class<T> getBusinessInterface() {",
                "raw_url": "https://github.com/apache/tuscany-sca-1.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/core/src/main/java/org/apache/tuscany/core/implementation/system/wire/SystemOutboundAutowire.java",
                "sha": "e4a364ada52cabeb003bf1bbbd842154e145081e",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tuscany-sca-1.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/core/src/main/java/org/apache/tuscany/core/launcher/LauncherImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tuscany-sca-1.x/contents/core/src/main/java/org/apache/tuscany/core/launcher/LauncherImpl.java?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/tuscany/core/launcher/LauncherImpl.java",
                "patch": "@@ -85,6 +85,9 @@ public void bootRuntime(URL systemScdl, ClassLoader systemClassLoader, MonitorFa\n         RuntimeInfo runtimeInfo = new LauncherRuntimeInfo(getInstallDirectory(), getApplicationRootDirectory());\n         parent.registerJavaObject(\"RuntimeInfo\", RuntimeInfo.class, runtimeInfo);\n \n+        // registory the monitor factory\n+        parent.registerJavaObject(\"MonitorFactory\", MonitorFactory.class, monitor);\n+        \n         // create a ComponentDefinition to represent the component we are going to deploy\n         SystemCompositeImplementation moduleImplementation = new SystemCompositeImplementation();\n         moduleImplementation.setScdlLocation(systemScdl);",
                "raw_url": "https://github.com/apache/tuscany-sca-1.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/core/src/main/java/org/apache/tuscany/core/launcher/LauncherImpl.java",
                "sha": "cc81f95f3f2b3095f711aeab1684a0c03be642fb",
                "status": "modified"
            },
            {
                "additions": 41,
                "blob_url": "https://github.com/apache/tuscany-sca-1.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/core/src/test/java/org/apache/tuscany/core/implementation/system/wire/SystemOutboundAutowireTestCase.java",
                "changes": 41,
                "contents_url": "https://api.github.com/repos/apache/tuscany-sca-1.x/contents/core/src/test/java/org/apache/tuscany/core/implementation/system/wire/SystemOutboundAutowireTestCase.java?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7",
                "deletions": 0,
                "filename": "core/src/test/java/org/apache/tuscany/core/implementation/system/wire/SystemOutboundAutowireTestCase.java",
                "patch": "@@ -0,0 +1,41 @@\n+package org.apache.tuscany.core.implementation.system.wire;\n+\n+import org.apache.tuscany.spi.component.TargetNotFoundException;\n+\n+import junit.framework.TestCase;\n+import org.apache.tuscany.core.component.AutowireComponent;\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.replay;\n+import static org.easymock.EasyMock.verify;\n+\n+/**\n+ * @version $Rev$ $Date$\n+ */\n+public class SystemOutboundAutowireTestCase extends TestCase {\n+\n+    public void testAutowire() {\n+        AutowireComponent<?> component = createMock(AutowireComponent.class);\n+        expect(component.resolveInstance(Object.class)).andReturn(new Object());\n+        replay(component);\n+        SystemOutboundAutowire<Object> wire = new SystemOutboundAutowire<Object>(\"foo\", Object.class, component);\n+        assertNotNull(wire.getTargetService());\n+        verify(component);\n+    }\n+\n+\n+    public void testNonExistentAutowire() {\n+        AutowireComponent<?> component = createMock(AutowireComponent.class);\n+        expect(component.resolveInstance(Object.class)).andReturn(null);\n+        replay(component);\n+        SystemOutboundAutowire<Object> wire = new SystemOutboundAutowire<Object>(\"foo\", Object.class, component);\n+        try {\n+            wire.getTargetService();\n+            fail();\n+        } catch (TargetNotFoundException e) {\n+            // expected\n+        }\n+        verify(component);\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/tuscany-sca-1.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/core/src/test/java/org/apache/tuscany/core/implementation/system/wire/SystemOutboundAutowireTestCase.java",
                "sha": "d61525f1ef88fb8c5e6c879a8a5c21c1e1ac0627",
                "status": "added"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/tuscany-sca-1.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/core/src/test/resources/org/apache/tuscany/core/deployer/boot2.scdl",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/tuscany-sca-1.x/contents/core/src/test/resources/org/apache/tuscany/core/deployer/boot2.scdl?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7",
                "deletions": 0,
                "filename": "core/src/test/resources/org/apache/tuscany/core/deployer/boot2.scdl",
                "patch": "@@ -87,8 +87,31 @@\n         <system:implementation.system class=\"org.apache.tuscany.core.loader.ServiceLoader\"/>\n     </component>\n \n+    <component name=\"wireService\">\n+            <system:implementation.system class=\"org.apache.tuscany.core.wire.jdk.JDKWireService\"/>\n+    </component>\n+\n     <!-- Composite implementation type -->\n     <component name=\"composite.loader\">\n         <system:implementation.system class=\"org.apache.tuscany.core.implementation.composite.CompositeLoader\"/>\n     </component>\n+\n+    <component name=\"interfaceJava.introspector\">\n+        <system:implementation.system class=\"org.apache.tuscany.core.idl.java.InterfaceJavaIntrospectorImpl\"/>\n+    </component>\n+\n+    <component name=\"artifactRepository\">\n+        <system:implementation.system class=\"org.apache.tuscany.core.services.artifact.LocalMavenRepository\"/>\n+        <property name=\"repository\">.m2/repository</property>\n+    </component>\n+\n+    <component name=\"propertyFactory\">\n+        <system:implementation.system class=\"org.apache.tuscany.core.loader.StringParserPropertyFactory\"/>\n+    </component>\n+\n+    <component name=\"policyBuilderRegistry\">\n+        <system:implementation.system class=\"org.apache.tuscany.core.policy.PolicyBuilderRegistryImpl\"/>\n+    </component>\n+\n+\n </composite>",
                "raw_url": "https://github.com/apache/tuscany-sca-1.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/core/src/test/resources/org/apache/tuscany/core/deployer/boot2.scdl",
                "sha": "a0f46e1e36bae5f373aa740f192506079557ba65",
                "status": "modified"
            },
            {
                "additions": 190,
                "blob_url": "https://github.com/apache/tuscany-sca-1.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/.ruleset",
                "changes": 190,
                "contents_url": "https://api.github.com/repos/apache/tuscany-sca-1.x/contents/runtime/webapp-host/.ruleset?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7",
                "deletions": 0,
                "filename": "runtime/webapp-host/.ruleset",
                "patch": "@@ -0,0 +1,190 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+-->\n+<ruleset name=\"pmd-eclipse\">\n+  <description>PMD Plugin preferences rule set</description>\n+  \n+  \n+  <rule ref=\"rulesets/basic.xml/BooleanInstantiation\"/>\n+  <rule ref=\"rulesets/basic.xml/CollapsibleIfStatements\"/>\n+  <rule ref=\"rulesets/basic.xml/DoubleCheckedLocking\"/>\n+<!--<rule ref=\"rulesets/basic.xml/EmptyCatchBlock\"/>-->\n+<!--<rule ref=\"rulesets/basic.xml/EmptyFinallyBlock\"/>-->\n+<!--<rule ref=\"rulesets/basic.xml/EmptyIfStmt\"/>-->\n+  <rule ref=\"rulesets/basic.xml/EmptyStatementNotInLoop\"/>\n+<!--<rule ref=\"rulesets/basic.xml/EmptyStaticInitializer\"/>-->\n+<!--<rule ref=\"rulesets/basic.xml/EmptySwitchStatements\"/>-->\n+<!--<rule ref=\"rulesets/basic.xml/EmptySynchronizedBlock\"/>-->\n+<!--<rule ref=\"rulesets/basic.xml/EmptyTryBlock\"/>-->\n+<!--<rule ref=\"rulesets/basic.xml/EmptyWhileStmt\"/>-->\n+  <rule ref=\"rulesets/basic.xml/ForLoopShouldBeWhileLoop\"/>\n+  <rule ref=\"rulesets/basic.xml/JumbledIncrementer\"/>\n+<!--<rule ref=\"rulesets/basic.xml/OverrideBothEqualsAndHashcode\"/>-->\n+  <rule ref=\"rulesets/basic.xml/ReturnFromFinallyBlock\"/>\n+  <rule ref=\"rulesets/basic.xml/UnconditionalIfStatement\"/>\n+  <rule ref=\"rulesets/basic.xml/UnnecessaryConversionTemporary\"/>\n+  <rule ref=\"rulesets/basic.xml/UnnecessaryFinalModifier\"/>\n+  <rule ref=\"rulesets/basic.xml/UnnecessaryReturn\"/>\n+<!--<rule ref=\"rulesets/basic.xml/UselessOverridingMethod\"/>-->\n+  \n+<!--<rule ref=\"rulesets/braces.xml/ForLoopsMustUseBraces\"/>-->\n+<!--<rule ref=\"rulesets/braces.xml/IfElseStmtsMustUseBraces\"/>-->\n+<!--<rule ref=\"rulesets/braces.xml/IfStmtsMustUseBraces\"/>-->\n+<!--<rule ref=\"rulesets/braces.xml/WhileLoopsMustUseBraces\"/>-->\n+\n+<!--<rule ref=\"rulesets/clone.xml/CloneMethodMustImplementCloneable\"/>-->\n+<!--<rule ref=\"rulesets/clone.xml/CloneThrowsCloneNotSupportedException\"/>-->\n+<!--<rule ref=\"rulesets/clone.xml/ProperCloneImplementation\"/>-->\n+  \n+<!--<rule ref=\"rulesets/codesize.xml/CyclomaticComplexity\"/>-->\n+<!--<rule ref=\"rulesets/codesize.xml/ExcessiveClassLength\"/>-->\n+<!--<rule ref=\"rulesets/codesize.xml/ExcessiveMethodLength\"/>-->\n+<!--<rule ref=\"rulesets/codesize.xml/ExcessiveParameterList\"/>-->\n+<!--<rule ref=\"rulesets/codesize.xml/ExcessivePublicCount\"/>-->\n+<!--<rule ref=\"rulesets/codesize.xml/TooManyFields\"/>-->\n+\n+<rule ref=\"rulesets/controversial.xml/AssignmentInOperand\"/>\n+<!--<rule ref=\"rulesets/controversial.xml/AtLeastOneConstructor\"/>-->\n+<!--<rule ref=\"rulesets/controversial.xml/CallSuperInConstructor\"/>-->\n+<!--<rule ref=\"rulesets/controversial.xml/DontImportSun\"/>-->\n+<!--<rule ref=\"rulesets/controversial.xml/NullAssignment\"/>-->\n+<!--<rule ref=\"rulesets/controversial.xml/OnlyOneReturn\"/>-->\n+<!--<rule ref=\"rulesets/controversial.xml/SingularField\"/>-->\n+<!--<rule ref=\"rulesets/controversial.xml/SuspiciousOctalEscape\"/>-->\n+<!--<rule ref=\"rulesets/controversial.xml/UnnecessaryConstructor\"/>-->\n+<rule ref=\"rulesets/controversial.xml/UnnecessaryParentheses\"/>\n+<!--<rule ref=\"rulesets/controversial.xml/UnusedModifier\"/>-->\n+\n+<!--<rule ref=\"rulesets/coupling.xml/CouplingBetweenObjects\"/>-->\n+<!--<rule ref=\"rulesets/coupling.xml/ExcessiveImports\"/>-->\n+<!--<rule ref=\"rulesets/coupling.xml/LooseCoupling\"/>-->\n+\n+<!--<rule ref=\"rulesets/design.xml/AbstractClassWithoutAbstractMethod\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/AccessorClassGeneration\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/AssignmentToNonFinalStatic\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/AvoidDeeplyNestedIfStmts\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/AvoidInstanceofChecksInCatchClause\"/>-->\n+<rule ref=\"rulesets/design.xml/AvoidProtectedFieldInFinalClass\"/>\n+<!--<rule ref=\"rulesets/design.xml/AvoidReassigningParameters\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/AvoidSynchronizedAtMethodLevel\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/BadComparison\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/CloseConnection\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/CompareObjectsWithEquals\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/ConfusingTernary\"/>-->\n+<rule ref=\"rulesets/design.xml/ConstructorCallsOverridableMethod\"/>\n+<!--<rule ref=\"rulesets/design.xml/DefaultLabelNotLastInSwitchStmt\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/FinalFieldCouldBeStatic\"/>-->\n+<rule ref=\"rulesets/design.xml/IdempotentOperations\"/>\n+<!--<rule ref=\"rulesets/design.xml/ImmutableField\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/InstantiationToGetClass\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/MissingBreakInSwitch\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/MissingStaticMethodInNonInstantiatableClass\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/NonCaseLabelInSwitchStatement\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/NonStaticInitializer\"/>-->\n+<rule ref=\"rulesets/design.xml/OptimizableToArrayCall\"/>\n+<rule ref=\"rulesets/design.xml/PositionLiteralsFirstInComparisons\"/>\n+<rule ref=\"rulesets/design.xml/SimplifyBooleanExpressions\"/>\n+<rule ref=\"rulesets/design.xml/SimplifyBooleanReturns\"/>\n+<rule ref=\"rulesets/design.xml/SimplifyConditional\"/>\n+<!--<rule ref=\"rulesets/design.xml/SwitchDensity\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/SwitchStmtsShouldHaveDefault\"/>-->\n+<rule ref=\"rulesets/design.xml/UnnecessaryLocalBeforeReturn\"/>\n+<!--<rule ref=\"rulesets/design.xml/UseLocaleWithCaseConversions\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/UseNotifyAllInsteadOfNotify\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/UseSingleton\"/>-->\n+\n+<!--<rule ref=\"rulesets/finalizers.xml/EmptyFinalizer\"/>-->\n+<!--<rule ref=\"rulesets/finalizers.xml/FinalizeOnlyCallsSuperFinalize\"/>-->\n+<!--<rule ref=\"rulesets/finalizers.xml/FinalizeOverloaded\"/>-->\n+<!--<rule ref=\"rulesets/finalizers.xml/FinalizeDoesNotCallSuperFinalize\"/>-->\n+<!--<rule ref=\"rulesets/finalizers.xml/FinalizeShouldBeProtected\"/>-->\n+<!--<rule ref=\"rulesets/finalizers.xml/AvoidCallingFinalize\"/>-->\n+\n+<!--<rule ref=\"rulesets/imports.xml/DuplicateImports\"/>-->\n+<!--<rule ref=\"rulesets/imports.xml/DontImportJavaLang\"/>-->\n+<!--<rule ref=\"rulesets/imports.xml/UnusedImports\"/>-->\n+<!--<rule ref=\"rulesets/imports.xml/ImportFromSamePackage\"/>-->\n+\n+<!--<rule ref=\"rulesets/javabeans.xml/BeanMembersShouldSerialize\"/>-->\n+<!--<rule ref=\"rulesets/javabeans.xml/MissingSerialVersionUID\"/>-->\n+\n+<!--<rule ref=\"rulesets/junit.xml/JUnitStaticSuite\"/>-->\n+<!--<rule ref=\"rulesets/junit.xml/JUnitSpelling\"/>-->\n+<!--<rule ref=\"rulesets/junit.xml/JUnitAssertionsShouldIncludeMessage\"/>-->\n+<!--<rule ref=\"rulesets/junit.xml/JUnitTestsShouldIncludeAssert\"/>-->\n+<!--<rule ref=\"rulesets/junit.xml/TestClassWithoutTestCases\"/>-->\n+<!--<rule ref=\"rulesets/junit.xml/UnnecessaryBooleanAssertion\"/>-->\n+<!--<rule ref=\"rulesets/junit.xml/UseAssertEqualsInsteadOfAssertTrue\"/>-->\n+<!--<rule ref=\"rulesets/junit.xml/UseAssertSameInsteadOfAssertTrue\"/>-->\n+\n+  <!--<rule ref=\"rulesets/logging-java.xml/AvoidPrintStackTrace\"/>-->\n+  <!--<rule ref=\"rulesets/logging-java.xml/LoggerIsNotStaticFinal\"/>-->\n+  <!--<rule ref=\"rulesets/logging-java.xml/MoreThanOneLogger\"/>-->\n+  <!--<rule ref=\"rulesets/logging-java.xml/LoggerIsNotStaticFinal\"/>-->\n+  <!--<rule ref=\"rulesets/logging-java.xml/LogBlockWithoutIf\"/>-->\n+  <!--<rule ref=\"rulesets/logging-java.xml/SystemPrintln\"/>-->\n+  <!--<rule ref=\"rulesets/logging-jakarta-commons.xml/UseCorrectExceptionLogging\"/>-->\n+  <!--<rule ref=\"rulesets/logging-jakarta-commons.xml/ProperLogger\"/>-->\n+  \n+  <!--<rule ref=\"rulesets/naming.xml/ShortVariable\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/LongVariable\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/ShortMethodName\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/VariableNamingConventions\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/MethodNamingConventions\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/ClassNamingConventions\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/AbstractNaming\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/AvoidDollarSigns\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/MethodWithSameNameAsEnclosingClass\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/SuspiciousHashcodeMethodName\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/SuspiciousConstantFieldName\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/AvoidFieldNameMatchingTypeName\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/AvoidFieldNameMatchingMethodName\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/AvoidNonConstructorMethodsWithClassName\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/NoPackage\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/PackageCase\"/>-->\n+\n+  <!--<rule ref=\"rulesets/optimizations.xml/LocalVariableCouldBeFinal\"/>-->\n+  <!--<rule ref=\"rulesets/optimizations.xml/MethodArgumentCouldBeFinal\"/>-->\n+  <!--<rule ref=\"rulesets/optimizations.xml/AvoidInstantiatingObjectsInLoops\"/>-->\n+  <!--<rule ref=\"rulesets/optimizations.xml/UseArrayListInsteadOfVector\"/>-->\n+  <!--<rule ref=\"rulesets/optimizations.xml/SimplifyStartsWith\"/>-->\n+  <!--<rule ref=\"rulesets/optimizations.xml/UseStringBufferForStringAppends\"/>-->\n+\n+  <!--<rule ref=\"rulesets/strictexception.xml/AvoidCatchingThrowable\"/>-->\n+  <!--<rule ref=\"rulesets/strictexception.xml/SignatureDeclareThrowsException\"/>-->\n+  <!--<rule ref=\"rulesets/strictexception.xml/ExceptionAsFlowControl\"/>-->\n+  <!--<rule ref=\"rulesets/strictexception.xml/AvoidCatchingNPE\"/>-->\n+  <!--<rule ref=\"rulesets/strictexception.xml/AvoidThrowingRawExceptionTypes\"/>-->\n+  <!--<rule ref=\"rulesets/strictexception.xml/AvoidThrowingNullPointerException\"/>-->\n+ \n+  <!--<rule ref=\"rulesets/strings.xml/AvoidDuplicateLiterals\"/>-->\n+  <!--<rule ref=\"rulesets/strings.xml/StringInstantiation\"/>-->\n+  <!--<rule ref=\"rulesets/strings.xml/StringToString\"/>-->\n+  <!--<rule ref=\"rulesets/strings.xml/AvoidConcatenatingNonLiteralsInStringBuffer\"/>-->\n+  <!--<rule ref=\"rulesets/strings.xml/UnnecessaryCaseChange\"/>-->\n+  \n+  <!--<rule ref=\"rulesets/sunsecure.xml/MethodReturnsInternalArray\"/>-->\n+  <!--<rule ref=\"rulesets/sunsecure.xml/ArrayIsStoredDirectly\"/>-->\n+  \n+  <rule ref=\"rulesets/unusedcode.xml/UnusedLocalVariable\"/>\n+  <rule ref=\"rulesets/unusedcode.xml/UnusedPrivateField\"/>\n+  <rule ref=\"rulesets/unusedcode.xml/UnusedPrivateMethod\"/>\n+  <!--<rule ref=\"rulesets/unusedcode.xml/UnusedFormalParameter\"/>-->\n+  \n+</ruleset>",
                "raw_url": "https://github.com/apache/tuscany-sca-1.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/.ruleset",
                "sha": "3886f07f2d7dd60867eb1392bae2a4bfdef8f69c",
                "status": "added"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/tuscany-sca-1.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/pom.xml",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/tuscany-sca-1.x/contents/runtime/webapp-host/pom.xml?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7",
                "deletions": 4,
                "filename": "runtime/webapp-host/pom.xml",
                "patch": "@@ -71,13 +71,20 @@\n             <scope>test</scope>\n         </dependency>\n \n+        <!-- test dependencies -->\n         <dependency>\n-            <groupId>jmock</groupId>\n-            <artifactId>jmock</artifactId>\n+            <groupId>org.easymock</groupId>\n+            <artifactId>easymockclassextension</artifactId>\n+            <version>2.2</version>\n+            <scope>test</scope>\n         </dependency>\n+\n         <dependency>\n-            <groupId>org.easymock</groupId>\n-            <artifactId>easymock</artifactId>\n+            <groupId>org.apache.tuscany</groupId>\n+            <artifactId>test</artifactId>\n+            <version>${sca.version}</version>\n+            <scope>test</scope>\n         </dependency>\n+\n     </dependencies>\n </project>",
                "raw_url": "https://github.com/apache/tuscany-sca-1.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/pom.xml",
                "sha": "f818c2eb20f4c4473bcbb482bbe040e38c5790b5",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/tuscany-sca-1.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/main/java/org/apache/tuscany/runtime/webapp/ServletHostImpl.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/tuscany-sca-1.x/contents/runtime/webapp-host/src/main/java/org/apache/tuscany/runtime/webapp/ServletHostImpl.java?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7",
                "deletions": 7,
                "filename": "runtime/webapp-host/src/main/java/org/apache/tuscany/runtime/webapp/ServletHostImpl.java",
                "patch": "@@ -21,21 +21,22 @@\n import java.io.IOException;\n import java.util.HashMap;\n import java.util.Map;\n-\n import javax.servlet.Servlet;\n import javax.servlet.ServletException;\n import javax.servlet.ServletRequest;\n import javax.servlet.ServletResponse;\n import javax.servlet.http.HttpServletRequest;\n \n-import org.apache.tuscany.host.servlet.ServletRequestInjector;\n-import org.apache.tuscany.spi.host.ServletHost;\n import org.osoa.sca.annotations.Init;\n import org.osoa.sca.annotations.Service;\n \n+import org.apache.tuscany.spi.host.ServletHost;\n+\n+import org.apache.tuscany.host.servlet.ServletRequestInjector;\n+\n /**\n- * ServletHost impl that forwards requests to registered servlets\n- * TODO: TUSCANY-649, move this and ServletLauncherListener to a new webapp-host module\n+ * ServletHost impl that forwards requests to registered servlets TODO: TUSCANY-649, move this and\n+ * ServletLauncherListener to a new webapp-host module\n  */\n @Service(ServletHost.class)\n public class ServletHostImpl implements ServletHost, ServletRequestInjector {\n@@ -51,17 +52,19 @@ public void init() {\n     }\n \n     public void service(ServletRequest req, ServletResponse resp) throws ServletException, IOException {\n+        assert req instanceof HttpServletRequest : \"implementation only supports HttpServletRequest\";\n         String path = ((HttpServletRequest) req).getPathInfo();\n         Servlet servlet = servlets.get(path);\n         if (servlet == null) {\n-            throw new IllegalStateException(\"no servlet registered for path: \" + path);\n+            throw new IllegalStateException(\"No servlet registered for path: \" + path);\n         }\n         servlet.service(req, resp);\n     }\n \n     public void registerMapping(String path, Servlet servlet) {\n+\n         if (servlets.containsKey(path)) {\n-            throw new IllegalStateException(\"servlet already registered at path: \" + path);\n+            throw new IllegalStateException(\"Servlet already registered at path: \" + path);\n         }\n         servlets.put(path, servlet);\n     }",
                "raw_url": "https://github.com/apache/tuscany-sca-1.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/main/java/org/apache/tuscany/runtime/webapp/ServletHostImpl.java",
                "sha": "c0036ca95e1deb1bb55cbc747f06b1356bf13dcd",
                "status": "modified"
            },
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/tuscany-sca-1.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/main/java/org/apache/tuscany/runtime/webapp/ServletLauncherListener.java",
                "changes": 58,
                "contents_url": "https://api.github.com/repos/apache/tuscany-sca-1.x/contents/runtime/webapp-host/src/main/java/org/apache/tuscany/runtime/webapp/ServletLauncherListener.java?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7",
                "deletions": 20,
                "filename": "runtime/webapp-host/src/main/java/org/apache/tuscany/runtime/webapp/ServletLauncherListener.java",
                "patch": "@@ -23,27 +23,27 @@\n import java.util.HashMap;\n import java.util.Map;\n import java.util.logging.Level;\n-\n import javax.servlet.ServletContext;\n import javax.servlet.ServletContextEvent;\n import javax.servlet.ServletContextListener;\n \n+import org.apache.tuscany.spi.component.CompositeComponent;\n+import org.apache.tuscany.spi.loader.LoaderException;\n+import org.apache.tuscany.spi.loader.MissingResourceException;\n+\n import org.apache.tuscany.core.launcher.CompositeContextImpl;\n import org.apache.tuscany.core.launcher.LauncherImpl;\n import org.apache.tuscany.core.monitor.MonitorFactoryUtil;\n import org.apache.tuscany.host.MonitorFactory;\n-import org.apache.tuscany.spi.component.CompositeComponent;\n-import org.apache.tuscany.spi.loader.LoaderException;\n \n /**\n- * LauncherImpl for runtime environment that loads info from servlet context params.\n- * This listener manages one top-level LauncherImpl (and hence one Tuscany runtime context)\n- * per servlet context; the lifecycle of that runtime corresponds to the the lifecycle of the\n- * associated servlet context.\n- *\n+ * LauncherImpl for runtime environment that loads info from servlet context params. This listener manages one top-level\n+ * LauncherImpl (and hence one Tuscany runtime context) per servlet context; the lifecycle of that runtime corresponds\n+ * to the the lifecycle of the associated servlet context.\n+ * <p/>\n  * Web application code may obtain the top-level CompositeContext via\n- * {@link org.osoa.sca.CurrentCompositeContext#getContext()}.  If that returns null,\n- * it is likely the runtime failed to boot: the context param {@link LAUNCHER_THROWABLE_ATTRIBUTE}\n+ * {@link org.osoa.sca.CurrentCompositeContext#getContext()}.\n+ * If that returns null, it is likely the runtime failed to boot: the context param {@link LAUNCHER_THROWABLE_ATTRIBUTE}\n  * will contain a {@link Throwable} with diagnostic information.\n  *\n  * @version $$Rev$$ $$Date$$\n@@ -59,9 +59,8 @@\n      */\n     public static final String APPLICATION_SCDL_PATH_PARAM = \"applicationScdlPath\";\n     /**\n-     * Servlet context-param name for system monitoring level.\n-     * Supported values are the names of statics defined in java.util.logging.Level.\n-     * If absent, no monitoring will take place.\n+     * Servlet context-param name for system monitoring level. Supported values are the names of statics defined in\n+     * java.util.logging.Level. If absent, no monitoring will take place.\n      */\n     public static final String SYSTEM_MONITORING_PARAM = \"tuscanyMonitoringLevel\";\n \n@@ -71,17 +70,18 @@\n     public static final String DEFAULT_APPLICATION_SCDL_PATH = \"/WEB-INF/default.scdl\";\n \n     /**\n-     * Context attribute to which an Exception or Error object will be bound to if the\n-     * launcher fails to initialize.\n+     * Context attribute to which an Exception or Error object will be bound to if the launcher fails to initialize.\n      */\n     public static final String LAUNCHER_THROWABLE_ATTRIBUTE = \"Tuscany.LauncherImpl.Throwable\";\n \n     /**\n-     * Context attribute to which the active {@link LauncherImpl} managing the runtime for this\n-     * servlet context is stored.\n+     * Context attribute to which the active {@link LauncherImpl} managing the runtime for this servlet context is\n+     * stored.\n      */\n     private static final String LAUNCHER_ATTRIBUTE = \"Tuscany.LauncherImpl\";\n \n+    private URL testSystemScdl;\n+\n     public void contextInitialized(ServletContextEvent servletContextEvent) {\n         ServletContext servletContext = servletContextEvent.getServletContext();\n \n@@ -111,10 +111,21 @@ public void contextInitialized(ServletContextEvent servletContextEvent) {\n         CompositeContextImpl context;\n \n         try {\n-            URL systemScdl = getClass().getResource(systemScdlPath);\n+            URL systemScdl;\n+            if (testSystemScdl != null) {\n+                systemScdl = testSystemScdl;\n+            } else {\n+                systemScdl = getClass().getResource(systemScdlPath);\n+                if (systemScdl == null) {\n+                    MissingResourceException e = new MissingResourceException(\"System SCDL not found\");\n+                    e.setIdentifier(systemScdlPath);\n+                    throw e;\n+                }\n+            }\n             CompositeComponent<?> rt = launcher.bootRuntime(systemScdl, mf);\n             servletContext.setAttribute(LAUNCHER_ATTRIBUTE, launcher);\n-            servletContext.setAttribute(\"Tuscany.ServletRequestInjector\", rt.getChild(\"servletHost\").getServiceInstance());\n+            servletContext\n+                .setAttribute(\"Tuscany.ServletRequestInjector\", rt.getChild(\"servletHost\").getServiceInstance());\n \n             URL appScdl;\n             if (applicationScdlPath.startsWith(\"/\")) {\n@@ -143,7 +154,7 @@ public void contextInitialized(ServletContextEvent servletContextEvent) {\n \n         } catch (Throwable t) {\n             servletContext.setAttribute(LAUNCHER_THROWABLE_ATTRIBUTE, t);\n-            t.printStackTrace();\n+            servletContext.log(\"Error launching Tuscany Runtime\", t);\n         }\n     }\n \n@@ -157,6 +168,13 @@ public void contextDestroyed(ServletContextEvent servletContextEvent) {\n         }\n     }\n \n+    /**\n+     * Sets the system SCDL url for testing\n+     */\n+    void setTestSystemScdl(URL testSystemScdl) {\n+        this.testSystemScdl = testSystemScdl;\n+    }\n+\n     private MonitorFactory getMonitorFactory(String loggingLevel) {\n         String factoryName = \"org.apache.tuscany.core.monitor.NullMonitorFactory\";\n         Map<String, Object> props = null;",
                "raw_url": "https://github.com/apache/tuscany-sca-1.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/main/java/org/apache/tuscany/runtime/webapp/ServletLauncherListener.java",
                "sha": "a082f370a80878750aa51b0d65b248bc19482ea9",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/tuscany-sca-1.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/main/resources/META-INF/sca/webapp.system.scdl",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/tuscany-sca-1.x/contents/runtime/webapp-host/src/main/resources/META-INF/sca/webapp.system.scdl?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7",
                "deletions": 4,
                "filename": "runtime/webapp-host/src/main/resources/META-INF/sca/webapp.system.scdl",
                "patch": "@@ -113,11 +113,26 @@\n     <component name=\"servletHost\">\n         <system:implementation.system class=\"org.apache.tuscany.runtime.webapp.ServletHostImpl\"/>\n     </component>\n-    \n-    <!-- TODO: Hack the Axis extension in  -->\n-    <include name=\"binding.axis2\" scdlLocation=\"binding.axis2.scdl\"/>\n+\n+    <component name=\"policyBuilderRegistry\">\n+         <system:implementation.system class=\"org.apache.tuscany.core.policy.PolicyBuilderRegistryImpl\"/>\n+    </component>\n+\n+    <component name=\"propertyFactory\">\n+        <system:implementation.system class=\"org.apache.tuscany.core.loader.StringParserPropertyFactory\"/>\n+    </component>\n+\n+    <component name=\"artifactRepository\">\n+            <system:implementation.system class=\"org.apache.tuscany.core.services.artifact.LocalMavenRepository\"/>\n+            <!-- this value needs to change to a correct one -->\n+            <property name = \"repository\">.</property>\n+    </component>\n+\n+\n+    <!-- TODO: Hack the Axis extension in -->\n+    <include name=\"binding.axis2\" scdlLocation=\"binding.axis2.scdl\"/> \n     \n     <!-- TODO: Hack the SDO DataBinding extension in -->\n-    <include name=\"databinding.sdo\" scdlLocation=\"databinding.sdo.scdl\"/>\n+    <include name=\"databinding.sdo\" scdlLocation=\"databinding.sdo.scdl\"/>  \n \n </composite>",
                "raw_url": "https://github.com/apache/tuscany-sca-1.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/main/resources/META-INF/sca/webapp.system.scdl",
                "sha": "4480dcba71811b152b71ca55c771687b3dbc6fd1",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/tuscany-sca-1.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/Foo.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/tuscany-sca-1.x/contents/runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/Foo.java?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7",
                "deletions": 0,
                "filename": "runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/Foo.java",
                "patch": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.tuscany.runtime.webapp;\n+\n+/**\n+ * @version $Rev$ $Date$\n+ */\n+public interface Foo {\n+}",
                "raw_url": "https://github.com/apache/tuscany-sca-1.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/Foo.java",
                "sha": "75b49de18843c077f9e4cf2858da0578ca3b44c5",
                "status": "added"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/tuscany-sca-1.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/FooImpl.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/tuscany-sca-1.x/contents/runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/FooImpl.java?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7",
                "deletions": 0,
                "filename": "runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/FooImpl.java",
                "patch": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.tuscany.runtime.webapp;\n+\n+/**\n+ * @version $Rev$ $Date$\n+ */\n+public class FooImpl implements Foo {\n+}",
                "raw_url": "https://github.com/apache/tuscany-sca-1.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/FooImpl.java",
                "sha": "dd938f2a58eae3652b39f9f92e5c83a51876d961",
                "status": "added"
            },
            {
                "additions": 83,
                "blob_url": "https://github.com/apache/tuscany-sca-1.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/ServletHostTestCase.java",
                "changes": 83,
                "contents_url": "https://api.github.com/repos/apache/tuscany-sca-1.x/contents/runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/ServletHostTestCase.java?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7",
                "deletions": 0,
                "filename": "runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/ServletHostTestCase.java",
                "patch": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.tuscany.runtime.webapp;\n+\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.replay;\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.verify;\n+\n+import javax.servlet.Servlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import junit.framework.TestCase;\n+import org.easymock.EasyMock;\n+\n+/**\n+ * @version $Rev$ $Date$\n+ */\n+public class ServletHostTestCase extends TestCase {\n+\n+    public void testDispatch() throws Exception {\n+        HttpServletRequest req = createMock(HttpServletRequest.class);\n+        expect(req.getPathInfo()).andReturn(\"foo\");\n+        replay(req);\n+        HttpServletResponse res = createMock(HttpServletResponse.class);\n+        Servlet servlet = createMock(Servlet.class);\n+        servlet.service(req, res);\n+        EasyMock.expectLastCall();\n+        replay(servlet);\n+        ServletHostImpl host = new ServletHostImpl();\n+        host.registerMapping(\"foo\", servlet);\n+        host.service(req, res);\n+        verify(servlet);\n+    }\n+\n+    public void testDuplicateRegistration() throws Exception {\n+        Servlet servlet = createMock(Servlet.class);\n+        ServletHostImpl host = new ServletHostImpl();\n+        host.registerMapping(\"foo\", servlet);\n+        try {\n+            host.registerMapping(\"foo\", servlet);\n+            fail();\n+        } catch (IllegalStateException e) {\n+            // expected\n+        }\n+    }\n+\n+    public void testUnregister() throws Exception {\n+        HttpServletRequest req = createMock(HttpServletRequest.class);\n+        expect(req.getPathInfo()).andReturn(\"foo\");\n+        replay(req);\n+        HttpServletResponse res = createMock(HttpServletResponse.class);\n+        Servlet servlet = createMock(Servlet.class);\n+        replay(servlet);\n+        ServletHostImpl host = new ServletHostImpl();\n+        host.registerMapping(\"foo\", servlet);\n+        host.unregisterMapping(\"foo\");\n+        try {\n+            host.service(req, res);\n+        } catch (IllegalStateException e) {\n+            // expected\n+        }\n+        verify(servlet);\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/tuscany-sca-1.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/ServletHostTestCase.java",
                "sha": "543be9b7df4e2a4f610c9b804aa53d81e35b07b6",
                "status": "added"
            },
            {
                "additions": 123,
                "blob_url": "https://github.com/apache/tuscany-sca-1.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/ServletLauncherListenerTestCase.java",
                "changes": 123,
                "contents_url": "https://api.github.com/repos/apache/tuscany-sca-1.x/contents/runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/ServletLauncherListenerTestCase.java?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7",
                "deletions": 0,
                "filename": "runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/ServletLauncherListenerTestCase.java",
                "patch": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.tuscany.runtime.webapp;\n+\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletContextEvent;\n+\n+import org.apache.tuscany.spi.loader.LoaderException;\n+import org.apache.tuscany.spi.loader.MissingResourceException;\n+\n+import junit.framework.TestCase;\n+import static org.apache.tuscany.runtime.webapp.ServletLauncherListener.APPLICATION_SCDL_PATH_PARAM;\n+import static org.apache.tuscany.runtime.webapp.ServletLauncherListener.SYSTEM_MONITORING_PARAM;\n+import static org.apache.tuscany.runtime.webapp.ServletLauncherListener.SYSTEM_SCDL_PATH_PARAM;\n+import static org.easymock.EasyMock.expect;\n+import org.easymock.classextension.EasyMock;\n+\n+/**\n+ * @version $Rev$ $Date$\n+ */\n+public class ServletLauncherListenerTestCase extends TestCase {\n+\n+    /**\n+     * Verifies the web app host is configured properly to perform a basic boot\n+     * <p/>\n+     * FIXME Uncomment this test case when the webapp project is fixed by removing the dependency on web services\n+     */\n+    public void testBoot() throws Exception {\n+//        final Launcher[] launcher = new Launcher[1];\n+//        ServletLauncherListener listener = new ServletLauncherListener();\n+//        listener.setTestSystemScdl(getClass().getClassLoader().getResource(\"META-INF/sca/webapp.system.scdl\"));\n+//        ServletContext context = EasyMock.createMock(ServletContext.class);\n+//        expect(context.getServletContextName()).andReturn(\"foo\").anyTimes();\n+//        expect(context.getInitParameter(SYSTEM_SCDL_PATH_PARAM)).andReturn(null);\n+//        expect(context.getInitParameter(APPLICATION_SCDL_PATH_PARAM)).andReturn(null);\n+//        expect(context.getInitParameter(SYSTEM_MONITORING_PARAM)).andReturn(null);\n+//        context.setAttribute(EasyMock.eq(\"Tuscany.LauncherImpl\"), EasyMock.isA(Launcher.class));\n+//        EasyMock.expectLastCall().andStubAnswer(new IAnswer() {\n+//            public Object answer() throws Throwable {\n+//                Object o = EasyMock.getCurrentArguments()[1];\n+//                launcher[0] = (Launcher) o;\n+//                return null;\n+//            }\n+//        });\n+//        context.setAttribute(EasyMock.eq(\"Tuscany.ServletRequestInjector\"), EasyMock.isA(ServletHost.class));\n+//        expect(context.getResource(\"/WEB-INF/default.scdl\"))\n+//            .andReturn(getClass().getClassLoader().getResource(\"testapp.scdl\"));\n+//        expect(context.getAttribute(EasyMock.eq(\"Tuscany.LauncherImpl\"))).andReturn(launcher[0]);\n+//        EasyMock.replay(context);\n+//        ServletContextEvent event = EasyMock.createMock(ServletContextEvent.class);\n+//        EasyMock.expect(event.getServletContext()).andReturn(context).anyTimes();\n+//        EasyMock.replay(event);\n+//        listener.contextInitialized(event);\n+//        listener.contextDestroyed(event);\n+//        EasyMock.verify(context);\n+    }\n+\n+    /**\n+     * Verifies a {@link LoaderException} is thrown when the application SCDL is not found\n+     * <p/>\n+     * FIXME Uncomment this test case when the webapp project is fixed by removing the dependency on web services\n+     */\n+    public void testApplicationSCDLNotFound() throws Exception {\n+//        ServletLauncherListener listener = new ServletLauncherListener();\n+//        listener.setTestSystemScdl(getClass().getClassLoader().getResource(\"META-INF/sca/webapp.system.scdl\"));\n+//        ServletContext context = EasyMock.createMock(ServletContext.class);\n+//        expect(context.getInitParameter(SYSTEM_SCDL_PATH_PARAM)).andReturn(null);\n+//        expect(context.getServletContextName()).andReturn(\"foo\").anyTimes();\n+//        context.setAttribute(EasyMock.eq(\"Tuscany.LauncherImpl\"), EasyMock.isA(Launcher.class));\n+//        context.setAttribute(EasyMock.eq(\"Tuscany.ServletRequestInjector\"), EasyMock.isA(ServletHost.class));\n+//        expect(context.getInitParameter(APPLICATION_SCDL_PATH_PARAM)).andReturn(null);\n+//        expect(context.getInitParameter(SYSTEM_MONITORING_PARAM)).andReturn(null);\n+//        expect(context.getResource(\"/WEB-INF/default.scdl\")).andReturn(null);\n+//        context.setAttribute(EasyMock.eq(\"Tuscany.LauncherImpl.Throwable\"), EasyMock.isA(LoaderException.class));\n+//        context.log(EasyMock.isA(String.class), EasyMock.isA(Throwable.class));\n+//        EasyMock.replay(context);\n+//        ServletContextEvent event = EasyMock.createMock(ServletContextEvent.class);\n+//        expect(event.getServletContext()).andReturn(context);\n+//        EasyMock.replay(event);\n+//        listener.contextInitialized(event);\n+//        EasyMock.verify(context);\n+    }\n+\n+    /**\n+     * Verifies a {@link MissingResourceException} is thrown if the system SCDL is not found\n+     *\n+     * @throws Exception\n+     */\n+    public void testSystemSCDLNotFound() throws Exception {\n+        ServletLauncherListener listener = new ServletLauncherListener();\n+        ServletContext context = EasyMock.createMock(ServletContext.class);\n+        expect(context.getInitParameter(SYSTEM_SCDL_PATH_PARAM)).andReturn(\"notthere\");\n+        context\n+            .setAttribute(EasyMock.eq(\"Tuscany.LauncherImpl.Throwable\"), EasyMock.isA(MissingResourceException.class));\n+        expect(context.getInitParameter(APPLICATION_SCDL_PATH_PARAM)).andReturn(null);\n+        expect(context.getInitParameter(SYSTEM_MONITORING_PARAM)).andReturn(null);\n+        context.log(EasyMock.isA(String.class), EasyMock.isA(Throwable.class));\n+        EasyMock.replay(context);\n+        ServletContextEvent event = EasyMock.createMock(ServletContextEvent.class);\n+        EasyMock.expect(event.getServletContext()).andReturn(context);\n+        EasyMock.replay(event);\n+        listener.contextInitialized(event);\n+        EasyMock.verify(context);\n+    }\n+\n+\n+}",
                "raw_url": "https://github.com/apache/tuscany-sca-1.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/test/java/org/apache/tuscany/runtime/webapp/ServletLauncherListenerTestCase.java",
                "sha": "c881649acd352ccafc60260f5e762bed332c00bb",
                "status": "added"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/tuscany-sca-1.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/test/resources/testapp.scdl",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/tuscany-sca-1.x/contents/runtime/webapp-host/src/test/resources/testapp.scdl?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7",
                "deletions": 0,
                "filename": "runtime/webapp-host/src/test/resources/testapp.scdl",
                "patch": "@@ -0,0 +1,26 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+-->\n+<composite xmlns=\"http://www.osoa.org/xmlns/sca/1.0\" name=\"testapp\">\n+\n+    <component name=\"component\">\n+        <implementation.java class=\"org.apache.tuscany.runtime.webapp.FooImpl\"/>\n+    </component>\n+\n+</composite>",
                "raw_url": "https://github.com/apache/tuscany-sca-1.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp-host/src/test/resources/testapp.scdl",
                "sha": "9b5bda7fb6171cdea97eed31cde628e70195e282",
                "status": "added"
            },
            {
                "additions": 190,
                "blob_url": "https://github.com/apache/tuscany-sca-1.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp/.ruleset",
                "changes": 190,
                "contents_url": "https://api.github.com/repos/apache/tuscany-sca-1.x/contents/runtime/webapp/.ruleset?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7",
                "deletions": 0,
                "filename": "runtime/webapp/.ruleset",
                "patch": "@@ -0,0 +1,190 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+-->\n+<ruleset name=\"pmd-eclipse\">\n+  <description>PMD Plugin preferences rule set</description>\n+  \n+  \n+  <rule ref=\"rulesets/basic.xml/BooleanInstantiation\"/>\n+  <rule ref=\"rulesets/basic.xml/CollapsibleIfStatements\"/>\n+  <rule ref=\"rulesets/basic.xml/DoubleCheckedLocking\"/>\n+<!--<rule ref=\"rulesets/basic.xml/EmptyCatchBlock\"/>-->\n+<!--<rule ref=\"rulesets/basic.xml/EmptyFinallyBlock\"/>-->\n+<!--<rule ref=\"rulesets/basic.xml/EmptyIfStmt\"/>-->\n+  <rule ref=\"rulesets/basic.xml/EmptyStatementNotInLoop\"/>\n+<!--<rule ref=\"rulesets/basic.xml/EmptyStaticInitializer\"/>-->\n+<!--<rule ref=\"rulesets/basic.xml/EmptySwitchStatements\"/>-->\n+<!--<rule ref=\"rulesets/basic.xml/EmptySynchronizedBlock\"/>-->\n+<!--<rule ref=\"rulesets/basic.xml/EmptyTryBlock\"/>-->\n+<!--<rule ref=\"rulesets/basic.xml/EmptyWhileStmt\"/>-->\n+  <rule ref=\"rulesets/basic.xml/ForLoopShouldBeWhileLoop\"/>\n+  <rule ref=\"rulesets/basic.xml/JumbledIncrementer\"/>\n+<!--<rule ref=\"rulesets/basic.xml/OverrideBothEqualsAndHashcode\"/>-->\n+  <rule ref=\"rulesets/basic.xml/ReturnFromFinallyBlock\"/>\n+  <rule ref=\"rulesets/basic.xml/UnconditionalIfStatement\"/>\n+  <rule ref=\"rulesets/basic.xml/UnnecessaryConversionTemporary\"/>\n+  <rule ref=\"rulesets/basic.xml/UnnecessaryFinalModifier\"/>\n+  <rule ref=\"rulesets/basic.xml/UnnecessaryReturn\"/>\n+<!--<rule ref=\"rulesets/basic.xml/UselessOverridingMethod\"/>-->\n+  \n+<!--<rule ref=\"rulesets/braces.xml/ForLoopsMustUseBraces\"/>-->\n+<!--<rule ref=\"rulesets/braces.xml/IfElseStmtsMustUseBraces\"/>-->\n+<!--<rule ref=\"rulesets/braces.xml/IfStmtsMustUseBraces\"/>-->\n+<!--<rule ref=\"rulesets/braces.xml/WhileLoopsMustUseBraces\"/>-->\n+\n+<!--<rule ref=\"rulesets/clone.xml/CloneMethodMustImplementCloneable\"/>-->\n+<!--<rule ref=\"rulesets/clone.xml/CloneThrowsCloneNotSupportedException\"/>-->\n+<!--<rule ref=\"rulesets/clone.xml/ProperCloneImplementation\"/>-->\n+  \n+<!--<rule ref=\"rulesets/codesize.xml/CyclomaticComplexity\"/>-->\n+<!--<rule ref=\"rulesets/codesize.xml/ExcessiveClassLength\"/>-->\n+<!--<rule ref=\"rulesets/codesize.xml/ExcessiveMethodLength\"/>-->\n+<!--<rule ref=\"rulesets/codesize.xml/ExcessiveParameterList\"/>-->\n+<!--<rule ref=\"rulesets/codesize.xml/ExcessivePublicCount\"/>-->\n+<!--<rule ref=\"rulesets/codesize.xml/TooManyFields\"/>-->\n+\n+<rule ref=\"rulesets/controversial.xml/AssignmentInOperand\"/>\n+<!--<rule ref=\"rulesets/controversial.xml/AtLeastOneConstructor\"/>-->\n+<!--<rule ref=\"rulesets/controversial.xml/CallSuperInConstructor\"/>-->\n+<!--<rule ref=\"rulesets/controversial.xml/DontImportSun\"/>-->\n+<!--<rule ref=\"rulesets/controversial.xml/NullAssignment\"/>-->\n+<!--<rule ref=\"rulesets/controversial.xml/OnlyOneReturn\"/>-->\n+<!--<rule ref=\"rulesets/controversial.xml/SingularField\"/>-->\n+<!--<rule ref=\"rulesets/controversial.xml/SuspiciousOctalEscape\"/>-->\n+<!--<rule ref=\"rulesets/controversial.xml/UnnecessaryConstructor\"/>-->\n+<rule ref=\"rulesets/controversial.xml/UnnecessaryParentheses\"/>\n+<!--<rule ref=\"rulesets/controversial.xml/UnusedModifier\"/>-->\n+\n+<!--<rule ref=\"rulesets/coupling.xml/CouplingBetweenObjects\"/>-->\n+<!--<rule ref=\"rulesets/coupling.xml/ExcessiveImports\"/>-->\n+<!--<rule ref=\"rulesets/coupling.xml/LooseCoupling\"/>-->\n+\n+<!--<rule ref=\"rulesets/design.xml/AbstractClassWithoutAbstractMethod\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/AccessorClassGeneration\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/AssignmentToNonFinalStatic\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/AvoidDeeplyNestedIfStmts\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/AvoidInstanceofChecksInCatchClause\"/>-->\n+<rule ref=\"rulesets/design.xml/AvoidProtectedFieldInFinalClass\"/>\n+<!--<rule ref=\"rulesets/design.xml/AvoidReassigningParameters\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/AvoidSynchronizedAtMethodLevel\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/BadComparison\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/CloseConnection\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/CompareObjectsWithEquals\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/ConfusingTernary\"/>-->\n+<rule ref=\"rulesets/design.xml/ConstructorCallsOverridableMethod\"/>\n+<!--<rule ref=\"rulesets/design.xml/DefaultLabelNotLastInSwitchStmt\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/FinalFieldCouldBeStatic\"/>-->\n+<rule ref=\"rulesets/design.xml/IdempotentOperations\"/>\n+<!--<rule ref=\"rulesets/design.xml/ImmutableField\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/InstantiationToGetClass\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/MissingBreakInSwitch\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/MissingStaticMethodInNonInstantiatableClass\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/NonCaseLabelInSwitchStatement\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/NonStaticInitializer\"/>-->\n+<rule ref=\"rulesets/design.xml/OptimizableToArrayCall\"/>\n+<rule ref=\"rulesets/design.xml/PositionLiteralsFirstInComparisons\"/>\n+<rule ref=\"rulesets/design.xml/SimplifyBooleanExpressions\"/>\n+<rule ref=\"rulesets/design.xml/SimplifyBooleanReturns\"/>\n+<rule ref=\"rulesets/design.xml/SimplifyConditional\"/>\n+<!--<rule ref=\"rulesets/design.xml/SwitchDensity\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/SwitchStmtsShouldHaveDefault\"/>-->\n+<rule ref=\"rulesets/design.xml/UnnecessaryLocalBeforeReturn\"/>\n+<!--<rule ref=\"rulesets/design.xml/UseLocaleWithCaseConversions\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/UseNotifyAllInsteadOfNotify\"/>-->\n+<!--<rule ref=\"rulesets/design.xml/UseSingleton\"/>-->\n+\n+<!--<rule ref=\"rulesets/finalizers.xml/EmptyFinalizer\"/>-->\n+<!--<rule ref=\"rulesets/finalizers.xml/FinalizeOnlyCallsSuperFinalize\"/>-->\n+<!--<rule ref=\"rulesets/finalizers.xml/FinalizeOverloaded\"/>-->\n+<!--<rule ref=\"rulesets/finalizers.xml/FinalizeDoesNotCallSuperFinalize\"/>-->\n+<!--<rule ref=\"rulesets/finalizers.xml/FinalizeShouldBeProtected\"/>-->\n+<!--<rule ref=\"rulesets/finalizers.xml/AvoidCallingFinalize\"/>-->\n+\n+<!--<rule ref=\"rulesets/imports.xml/DuplicateImports\"/>-->\n+<!--<rule ref=\"rulesets/imports.xml/DontImportJavaLang\"/>-->\n+<!--<rule ref=\"rulesets/imports.xml/UnusedImports\"/>-->\n+<!--<rule ref=\"rulesets/imports.xml/ImportFromSamePackage\"/>-->\n+\n+<!--<rule ref=\"rulesets/javabeans.xml/BeanMembersShouldSerialize\"/>-->\n+<!--<rule ref=\"rulesets/javabeans.xml/MissingSerialVersionUID\"/>-->\n+\n+<!--<rule ref=\"rulesets/junit.xml/JUnitStaticSuite\"/>-->\n+<!--<rule ref=\"rulesets/junit.xml/JUnitSpelling\"/>-->\n+<!--<rule ref=\"rulesets/junit.xml/JUnitAssertionsShouldIncludeMessage\"/>-->\n+<!--<rule ref=\"rulesets/junit.xml/JUnitTestsShouldIncludeAssert\"/>-->\n+<!--<rule ref=\"rulesets/junit.xml/TestClassWithoutTestCases\"/>-->\n+<!--<rule ref=\"rulesets/junit.xml/UnnecessaryBooleanAssertion\"/>-->\n+<!--<rule ref=\"rulesets/junit.xml/UseAssertEqualsInsteadOfAssertTrue\"/>-->\n+<!--<rule ref=\"rulesets/junit.xml/UseAssertSameInsteadOfAssertTrue\"/>-->\n+\n+  <!--<rule ref=\"rulesets/logging-java.xml/AvoidPrintStackTrace\"/>-->\n+  <!--<rule ref=\"rulesets/logging-java.xml/LoggerIsNotStaticFinal\"/>-->\n+  <!--<rule ref=\"rulesets/logging-java.xml/MoreThanOneLogger\"/>-->\n+  <!--<rule ref=\"rulesets/logging-java.xml/LoggerIsNotStaticFinal\"/>-->\n+  <!--<rule ref=\"rulesets/logging-java.xml/LogBlockWithoutIf\"/>-->\n+  <!--<rule ref=\"rulesets/logging-java.xml/SystemPrintln\"/>-->\n+  <!--<rule ref=\"rulesets/logging-jakarta-commons.xml/UseCorrectExceptionLogging\"/>-->\n+  <!--<rule ref=\"rulesets/logging-jakarta-commons.xml/ProperLogger\"/>-->\n+  \n+  <!--<rule ref=\"rulesets/naming.xml/ShortVariable\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/LongVariable\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/ShortMethodName\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/VariableNamingConventions\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/MethodNamingConventions\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/ClassNamingConventions\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/AbstractNaming\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/AvoidDollarSigns\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/MethodWithSameNameAsEnclosingClass\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/SuspiciousHashcodeMethodName\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/SuspiciousConstantFieldName\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/AvoidFieldNameMatchingTypeName\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/AvoidFieldNameMatchingMethodName\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/AvoidNonConstructorMethodsWithClassName\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/NoPackage\"/>-->\n+  <!--<rule ref=\"rulesets/naming.xml/PackageCase\"/>-->\n+\n+  <!--<rule ref=\"rulesets/optimizations.xml/LocalVariableCouldBeFinal\"/>-->\n+  <!--<rule ref=\"rulesets/optimizations.xml/MethodArgumentCouldBeFinal\"/>-->\n+  <!--<rule ref=\"rulesets/optimizations.xml/AvoidInstantiatingObjectsInLoops\"/>-->\n+  <!--<rule ref=\"rulesets/optimizations.xml/UseArrayListInsteadOfVector\"/>-->\n+  <!--<rule ref=\"rulesets/optimizations.xml/SimplifyStartsWith\"/>-->\n+  <!--<rule ref=\"rulesets/optimizations.xml/UseStringBufferForStringAppends\"/>-->\n+\n+  <!--<rule ref=\"rulesets/strictexception.xml/AvoidCatchingThrowable\"/>-->\n+  <!--<rule ref=\"rulesets/strictexception.xml/SignatureDeclareThrowsException\"/>-->\n+  <!--<rule ref=\"rulesets/strictexception.xml/ExceptionAsFlowControl\"/>-->\n+  <!--<rule ref=\"rulesets/strictexception.xml/AvoidCatchingNPE\"/>-->\n+  <!--<rule ref=\"rulesets/strictexception.xml/AvoidThrowingRawExceptionTypes\"/>-->\n+  <!--<rule ref=\"rulesets/strictexception.xml/AvoidThrowingNullPointerException\"/>-->\n+ \n+  <!--<rule ref=\"rulesets/strings.xml/AvoidDuplicateLiterals\"/>-->\n+  <!--<rule ref=\"rulesets/strings.xml/StringInstantiation\"/>-->\n+  <!--<rule ref=\"rulesets/strings.xml/StringToString\"/>-->\n+  <!--<rule ref=\"rulesets/strings.xml/AvoidConcatenatingNonLiteralsInStringBuffer\"/>-->\n+  <!--<rule ref=\"rulesets/strings.xml/UnnecessaryCaseChange\"/>-->\n+  \n+  <!--<rule ref=\"rulesets/sunsecure.xml/MethodReturnsInternalArray\"/>-->\n+  <!--<rule ref=\"rulesets/sunsecure.xml/ArrayIsStoredDirectly\"/>-->\n+  \n+  <rule ref=\"rulesets/unusedcode.xml/UnusedLocalVariable\"/>\n+  <rule ref=\"rulesets/unusedcode.xml/UnusedPrivateField\"/>\n+  <rule ref=\"rulesets/unusedcode.xml/UnusedPrivateMethod\"/>\n+  <!--<rule ref=\"rulesets/unusedcode.xml/UnusedFormalParameter\"/>-->\n+  \n+</ruleset>",
                "raw_url": "https://github.com/apache/tuscany-sca-1.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp/.ruleset",
                "sha": "3886f07f2d7dd60867eb1392bae2a4bfdef8f69c",
                "status": "added"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/tuscany-sca-1.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp/pom.xml",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/tuscany-sca-1.x/contents/runtime/webapp/pom.xml?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7",
                "deletions": 4,
                "filename": "runtime/webapp/pom.xml",
                "patch": "@@ -43,13 +43,19 @@\n             <scope>compile</scope>\n         </dependency>\n \n+        <!-- test dependencies -->\n         <dependency>\n-            <groupId>jmock</groupId>\n-            <artifactId>jmock</artifactId>\n+            <groupId>org.easymock</groupId>\n+            <artifactId>easymockclassextension</artifactId>\n+            <version>2.2</version>\n+            <scope>test</scope>\n         </dependency>\n+\n         <dependency>\n-            <groupId>org.easymock</groupId>\n-            <artifactId>easymock</artifactId>\n+            <groupId>org.apache.tuscany</groupId>\n+            <artifactId>test</artifactId>\n+            <version>${sca.version}</version>\n+            <scope>test</scope>\n         </dependency>\n     </dependencies>\n </project>",
                "raw_url": "https://github.com/apache/tuscany-sca-1.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp/pom.xml",
                "sha": "6592563bf299aa8cb8f173cfc0ec03c00b35d929",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tuscany-sca-1.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp/src/main/java/org/apache/tuscany/runtime/webapp/TuscanyServlet.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tuscany-sca-1.x/contents/runtime/webapp/src/main/java/org/apache/tuscany/runtime/webapp/TuscanyServlet.java?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7",
                "deletions": 1,
                "filename": "runtime/webapp/src/main/java/org/apache/tuscany/runtime/webapp/TuscanyServlet.java",
                "patch": "@@ -34,6 +34,7 @@\n  */\n public class TuscanyServlet extends HttpServlet {\n \n+    public static final String TUSCANY_SERVLET_REQUEST_INJECTOR = \"Tuscany.ServletRequestInjector\";\n     private static final long serialVersionUID = 1L;\n \n     private ServletRequestInjector servletRequestInjector;\n@@ -42,7 +43,7 @@\n     public void init(ServletConfig config) {\n         ServletContext servletContext = config.getServletContext();\n         this.servletRequestInjector =\n-            (ServletRequestInjector) servletContext.getAttribute(\"Tuscany.ServletRequestInjector\");\n+            (ServletRequestInjector) servletContext.getAttribute(TUSCANY_SERVLET_REQUEST_INJECTOR);\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/tuscany-sca-1.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp/src/main/java/org/apache/tuscany/runtime/webapp/TuscanyServlet.java",
                "sha": "e1385e7a1b370c21f089c6cc319dca75cade8f47",
                "status": "modified"
            },
            {
                "additions": 76,
                "blob_url": "https://github.com/apache/tuscany-sca-1.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp/src/test/java/org/apache/tuscany/runtime/webapp/TuscanyContextListenerTestCase.java",
                "changes": 76,
                "contents_url": "https://api.github.com/repos/apache/tuscany-sca-1.x/contents/runtime/webapp/src/test/java/org/apache/tuscany/runtime/webapp/TuscanyContextListenerTestCase.java?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7",
                "deletions": 0,
                "filename": "runtime/webapp/src/test/java/org/apache/tuscany/runtime/webapp/TuscanyContextListenerTestCase.java",
                "patch": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.tuscany.runtime.webapp;\n+\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletContextEvent;\n+import javax.servlet.ServletContextListener;\n+\n+import junit.framework.TestCase;\n+import static org.easymock.EasyMock.expect;\n+import org.easymock.classextension.EasyMock;\n+\n+/**\n+ * Verifies a context listener is properly instantiated and lifecycle events are sent to it\n+ *\n+ * @version $Rev$ $Date$\n+ */\n+public class TuscanyContextListenerTestCase extends TestCase {\n+\n+    public void testLifecycle() {\n+        ServletContext context = EasyMock.createMock(ServletContext.class);\n+        expect(context.getInitParameter(TuscanyContextListener.BOOTDIR_PARAM)).andReturn(\"foo\");\n+        expect(context.getResourcePaths(\"foo\")).andReturn(null);\n+        expect(context.getInitParameter(TuscanyContextListener.LAUNCHER_PARAM)).andReturn(TestLauncher.class.getName());\n+        EasyMock.replay(context);\n+        ServletContextEvent event = EasyMock.createMock(ServletContextEvent.class);\n+        EasyMock.expect(event.getServletContext()).andReturn(context);\n+        EasyMock.replay(event);\n+        TuscanyContextListener listener = new TuscanyContextListener();\n+        listener.contextInitialized(event);\n+        assertEquals(1, TestLauncher.getInitialized());\n+        listener.contextDestroyed(event);\n+        assertEquals(1, TestLauncher.getDestroyed());\n+    }\n+\n+    public static class TestLauncher implements ServletContextListener {\n+\n+        private static int initialized;\n+        private static int destroyed;\n+\n+        public TestLauncher() {\n+        }\n+\n+        public static int getInitialized() {\n+            return initialized;\n+        }\n+\n+        public static int getDestroyed() {\n+            return destroyed;\n+        }\n+\n+        public void contextInitialized(ServletContextEvent servletContextEvent) {\n+            ++initialized;\n+        }\n+\n+        public void contextDestroyed(ServletContextEvent servletContextEvent) {\n+            ++destroyed;\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/tuscany-sca-1.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp/src/test/java/org/apache/tuscany/runtime/webapp/TuscanyContextListenerTestCase.java",
                "sha": "abc26f6c35ffc2430b694fba1358e0a8f4c536a7",
                "status": "added"
            },
            {
                "additions": 58,
                "blob_url": "https://github.com/apache/tuscany-sca-1.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp/src/test/java/org/apache/tuscany/runtime/webapp/TuscanyServletTestCase.java",
                "changes": 58,
                "contents_url": "https://api.github.com/repos/apache/tuscany-sca-1.x/contents/runtime/webapp/src/test/java/org/apache/tuscany/runtime/webapp/TuscanyServletTestCase.java?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7",
                "deletions": 0,
                "filename": "runtime/webapp/src/test/java/org/apache/tuscany/runtime/webapp/TuscanyServletTestCase.java",
                "patch": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.tuscany.runtime.webapp;\n+\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+\n+import junit.framework.TestCase;\n+import org.apache.tuscany.host.servlet.ServletRequestInjector;\n+import org.easymock.EasyMock;\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.isA;\n+\n+/**\n+ * Verifies {@link TuscanyServlet} properly services a request\n+ *\n+ * @version $Rev$ $Date$\n+ */\n+public class TuscanyServletTestCase extends TestCase {\n+\n+    public void testService() throws Exception {\n+        ServletRequestInjector requestInjector = EasyMock.createMock(ServletRequestInjector.class);\n+        requestInjector.service(isA(ServletRequest.class), isA(ServletResponse.class));\n+        EasyMock.expectLastCall();\n+        EasyMock.replay(requestInjector);\n+        ServletContext context = org.easymock.classextension.EasyMock.createMock(ServletContext.class);\n+        expect(context.getAttribute(TuscanyServlet.TUSCANY_SERVLET_REQUEST_INJECTOR)).andReturn(requestInjector);\n+        org.easymock.classextension.EasyMock.replay(context);\n+        ServletConfig config = EasyMock.createMock(ServletConfig.class);\n+        EasyMock.expect(config.getServletContext()).andReturn(context);\n+        EasyMock.replay(config);\n+        TuscanyServlet servlet = new TuscanyServlet();\n+        servlet.init(config);\n+        ServletRequest req = EasyMock.createNiceMock(ServletRequest.class);\n+        ServletResponse res = EasyMock.createNiceMock(ServletResponse.class);\n+        servlet.service(req, res);\n+        EasyMock.verify(requestInjector);\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/tuscany-sca-1.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/runtime/webapp/src/test/java/org/apache/tuscany/runtime/webapp/TuscanyServletTestCase.java",
                "sha": "0cbd8333b71919ecc9fbbb402645889d7942da51",
                "status": "added"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/tuscany-sca-1.x/blob/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/test/src/main/resources/META-INF/tuscany/system.scdl",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/tuscany-sca-1.x/contents/test/src/main/resources/META-INF/tuscany/system.scdl?ref=e22d946ccff042b39f00f310ccb1cb9cea58c5f7",
                "deletions": 0,
                "filename": "test/src/main/resources/META-INF/tuscany/system.scdl",
                "patch": "@@ -117,4 +117,12 @@\n         <system:implementation.system class=\"org.apache.tuscany.core.services.work.jsr237.Jsr237WorkScheduler\"/>\n     </component>\n \n+    <component name=\"policyBuilderRegistry\">\n+         <system:implementation.system class=\"org.apache.tuscany.core.policy.PolicyBuilderRegistryImpl\"/>\n+    </component>\n+\n+    <component name=\"propertyFactory\">\n+        <system:implementation.system class=\"org.apache.tuscany.core.loader.StringParserPropertyFactory\"/>\n+    </component>\n+    \n </composite>",
                "raw_url": "https://github.com/apache/tuscany-sca-1.x/raw/e22d946ccff042b39f00f310ccb1cb9cea58c5f7/test/src/main/resources/META-INF/tuscany/system.scdl",
                "sha": "5f23fecb65e137fae2c1055b41822c95facfa6f0",
                "status": "modified"
            }
        ],
        "message": "make autowire throw a TargetException when the target cannot be resolved (this will avoid NPEs being thrown in components as a result of configuration error; cleanup of system SCDLs to resolve all autowires; introduce test cases into webapp and webapp-host so that we can verify autowire configuration and basic bootstrap operation; cleanup of webapp and webapp-host projects\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/tuscany/java/sca@437500 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tuscany-sca-1.x/commit/f6e36f91184f3a2f37a29849a28024d56038fa70",
        "patched_files": [
            ".java",
            "webapp.java",
            "TuscanyContextListenerTestCase.java",
            "SystemOutboundAutowireTestCase.java",
            "ServletHostTestCase.java",
            "ServletLauncherListenerTestCase.java",
            "FooImpl.java",
            "ServletHostImpl.java",
            "pom.java",
            "Foo.java",
            "TuscanyServletTestCase.java",
            "LauncherImpl.java",
            "TuscanyServlet.java",
            "boot2.java",
            "ServletLauncherListener.java",
            "system.java",
            "SystemOutboundAutowire.java"
        ],
        "repo": "tuscany-sca-1.x",
        "unit_tests": [
            "testapp.java"
        ]
    }
}