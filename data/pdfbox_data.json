[{"commit": "https://github.com/apache/pdfbox/commit/88a1acdd6c5ab8889ee40afffebee59cc4d1c3fa", "parent": "https://github.com/apache/pdfbox/commit/0452bcb493c3665031632ff22610462e76647c8f", "message": "PDFBOX-4071: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1870405 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_1", "file": [{"additions": 8, "raw_url": "https://github.com/apache/pdfbox/raw/88a1acdd6c5ab8889ee40afffebee59cc4d1c3fa/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/ExtractEmbeddedFiles.java", "blob_url": "https://github.com/apache/pdfbox/blob/88a1acdd6c5ab8889ee40afffebee59cc4d1c3fa/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/ExtractEmbeddedFiles.java", "sha": "381084980b89a40c2f3529d678d55d90de6c5400", "changes": 10, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/ExtractEmbeddedFiles.java?ref=88a1acdd6c5ab8889ee40afffebee59cc4d1c3fa", "patch": "@@ -99,7 +99,10 @@ public static void main( String[] args ) throws IOException\n                             {\r\n                                 PDComplexFileSpecification complexFileSpec = (PDComplexFileSpecification) fileSpec;\r\n                                 PDEmbeddedFile embeddedFile = getEmbeddedFile(complexFileSpec);\r\n-                                extractFile(filePath, complexFileSpec.getFilename(), embeddedFile);\r\n+                                if (embeddedFile != null)\r\n+                                {\r\n+                                    extractFile(filePath, complexFileSpec.getFilename(), embeddedFile);\r\n+                                }\r\n                             }\r\n                         }\r\n                     }\r\n@@ -124,7 +127,10 @@ private static void extractFiles(Map<String, PDComplexFileSpecification> names,\n             String filename = entry.getKey();\r\n             PDComplexFileSpecification fileSpec = entry.getValue();\r\n             PDEmbeddedFile embeddedFile = getEmbeddedFile(fileSpec);\r\n-            extractFile(filePath, filename, embeddedFile);\r\n+            if (embeddedFile != null)\r\n+            {\r\n+                extractFile(filePath, filename, embeddedFile);\r\n+            }\r\n         }\r\n     }\r\n \r", "filename": "examples/src/main/java/org/apache/pdfbox/examples/pdmodel/ExtractEmbeddedFiles.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/e6faa5361e83a592e42471864e32fc1b9638380f", "parent": "https://github.com/apache/pdfbox/commit/88a1acdd6c5ab8889ee40afffebee59cc4d1c3fa", "message": "PDFBOX-3017: don't return null (which will go NPE) when the type of the element is wrong or could not be created, throw exception instead\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1870419 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_2", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/e6faa5361e83a592e42471864e32fc1b9638380f/examples/src/main/java/org/apache/pdfbox/examples/signature/validation/AddValidationInformation.java", "blob_url": "https://github.com/apache/pdfbox/blob/e6faa5361e83a592e42471864e32fc1b9638380f/examples/src/main/java/org/apache/pdfbox/examples/signature/validation/AddValidationInformation.java", "sha": "471b02e48db19dae0415c0c495841ef48a0deeb9", "changes": 3, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/examples/src/main/java/org/apache/pdfbox/examples/signature/validation/AddValidationInformation.java?ref=e6faa5361e83a592e42471864e32fc1b9638380f", "patch": "@@ -197,8 +197,7 @@ else if (element != null)\n             }\n             catch (ReflectiveOperationException | SecurityException e)\n             {\n-                LOG.error(\"Failed to create new instance of \" + clazz.getCanonicalName(), e);\n-                return null;\n+                throw new IOException(\"Failed to create new instance of \" + clazz.getCanonicalName(), e);\n             }\n             result.setDirect(false);\n             parent.setItem(COSName.getPDFName(name), result);", "filename": "examples/src/main/java/org/apache/pdfbox/examples/signature/validation/AddValidationInformation.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/c71ea9edd1e8ebc6d195c0209048844ca67947ff", "parent": "https://github.com/apache/pdfbox/commit/2e238062ba0d761c1544f59fab6e8379b3694752", "message": "PDFBOX-4631: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1865323 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_3", "file": [{"additions": 3, "raw_url": "https://github.com/apache/pdfbox/raw/c71ea9edd1e8ebc6d195c0209048844ca67947ff/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java", "blob_url": "https://github.com/apache/pdfbox/blob/c71ea9edd1e8ebc6d195c0209048844ca67947ff/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java", "sha": "570b2dad3e0e6774bbf7de5a17840b4e0bedcb64", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java?ref=c71ea9edd1e8ebc6d195c0209048844ca67947ff", "patch": "@@ -314,7 +314,9 @@ public void flatten(List<PDField> fields, boolean refreshAppearances) throws IOE\n                 {\n                     annotations.add(annotation);                 \n                 }\n-                else if (!annotation.isInvisible() && !annotation.isHidden() && annotation.getNormalAppearanceStream() != null)\n+                else if (!annotation.isInvisible() && !annotation.isHidden() &&\n+                         annotation.getNormalAppearanceStream() != null && \n+                         annotation.getNormalAppearanceStream().getBBox() != null)\n                 {\n                     contentStream = new PDPageContentStream(document, page, AppendMode.APPEND, true, !isContentStreamWrapped);\n                     isContentStreamWrapped = true;", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/2e238062ba0d761c1544f59fab6e8379b3694752", "parent": "https://github.com/apache/pdfbox/commit/ae1aa29d306cface6a14f3a52f21eaf284574c70", "message": "PDFBOX-4631: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1865318 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_4", "file": [{"additions": 2, "raw_url": "https://github.com/apache/pdfbox/raw/2e238062ba0d761c1544f59fab6e8379b3694752/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java", "blob_url": "https://github.com/apache/pdfbox/blob/2e238062ba0d761c1544f59fab6e8379b3694752/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java", "sha": "03b98bf93140c1dd946b1b59dd6a9ceaf2321acc", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java?ref=2e238062ba0d761c1544f59fab6e8379b3694752", "patch": "@@ -198,7 +198,8 @@ public void setAppearanceValue(String apValue) throws IOException\n                 // TODO support appearances other than \"normal\"\n                 \n                 PDAppearanceStream appearanceStream;\n-                if (appearance != null && appearance.isStream())\n+                if (appearance != null && appearance.isStream() &&\n+                        appearance.getAppearanceStream().getBBox() != null)\n                 {\n                     appearanceStream = appearance.getAppearanceStream();\n                 }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/583bf1b3f08dca78947e660a0987652dbbf71b5d", "parent": "https://github.com/apache/pdfbox/commit/6a288dea12608545061a41f64af74b653015fe83", "message": "PDFBOX-4622: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1864552 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_5", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/583bf1b3f08dca78947e660a0987652dbbf71b5d/fontbox/src/main/java/org/apache/fontbox/ttf/CmapSubtable.java", "blob_url": "https://github.com/apache/pdfbox/blob/583bf1b3f08dca78947e660a0987652dbbf71b5d/fontbox/src/main/java/org/apache/fontbox/ttf/CmapSubtable.java", "sha": "05617af74d17e800f82458d3f25b2690e9522a18", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/ttf/CmapSubtable.java?ref=583bf1b3f08dca78947e660a0987652dbbf71b5d", "patch": "@@ -280,6 +280,7 @@ protected void processSubtype12(TTFDataStream data, int numGlyphs) throws IOExce\n     protected void processSubtype13(TTFDataStream data, int numGlyphs) throws IOException\n     {\n         long nbGroups = data.readUnsignedInt();\n+        glyphIdToCharacterCode = newGlyphIdToCharacterCode(numGlyphs);\n         characterCodeToGlyphId = new HashMap<>(numGlyphs);\n         for (long i = 0; i < nbGroups; ++i)\n         {", "filename": "fontbox/src/main/java/org/apache/fontbox/ttf/CmapSubtable.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/b04d952449db318a1c80bc34c25660438d45a7d3", "parent": "https://github.com/apache/pdfbox/commit/0e100df58fa1aad43431222f79513266a7a9e9d3", "message": "PDFBOX-4622: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1864535 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_6", "file": [{"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/b04d952449db318a1c80bc34c25660438d45a7d3/fontbox/src/main/java/org/apache/fontbox/ttf/HorizontalMetricsTable.java", "blob_url": "https://github.com/apache/pdfbox/blob/b04d952449db318a1c80bc34c25660438d45a7d3/fontbox/src/main/java/org/apache/fontbox/ttf/HorizontalMetricsTable.java", "sha": "b9010319efa8b37a7c9693a388ea8b5f9649f79b", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/ttf/HorizontalMetricsTable.java?ref=b04d952449db318a1c80bc34c25660438d45a7d3", "patch": "@@ -51,6 +51,10 @@\n     public void read(TrueTypeFont ttf, TTFDataStream data) throws IOException\n     {\n         HorizontalHeaderTable hHeader = ttf.getHorizontalHeader();\n+        if (hHeader == null)\n+        {\n+            throw new IOException(\"Could not get hhea table\");\n+        }\n         numHMetrics = hHeader.getNumberOfHMetrics();\n         int numGlyphs = ttf.getNumberOfGlyphs();\n ", "filename": "fontbox/src/main/java/org/apache/fontbox/ttf/HorizontalMetricsTable.java"}, {"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/b04d952449db318a1c80bc34c25660438d45a7d3/fontbox/src/main/java/org/apache/fontbox/ttf/IndexToLocationTable.java", "blob_url": "https://github.com/apache/pdfbox/blob/b04d952449db318a1c80bc34c25660438d45a7d3/fontbox/src/main/java/org/apache/fontbox/ttf/IndexToLocationTable.java", "sha": "4876bce9dc158d81a100eb5fa35526d21fd60c20", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/ttf/IndexToLocationTable.java?ref=b04d952449db318a1c80bc34c25660438d45a7d3", "patch": "@@ -51,6 +51,10 @@\n     public void read(TrueTypeFont ttf, TTFDataStream data) throws IOException\n     {\n         HeaderTable head = ttf.getHeader();\n+        if (head == null)\n+        {\n+            throw new IOException(\"Could not get head table\");\n+        }\n         int numGlyphs = ttf.getNumberOfGlyphs();\n         offsets = new long[ numGlyphs +1];\n         for( int i=0; i<numGlyphs+1; i++ )", "filename": "fontbox/src/main/java/org/apache/fontbox/ttf/IndexToLocationTable.java"}, {"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/b04d952449db318a1c80bc34c25660438d45a7d3/fontbox/src/main/java/org/apache/fontbox/ttf/VerticalMetricsTable.java", "blob_url": "https://github.com/apache/pdfbox/blob/b04d952449db318a1c80bc34c25660438d45a7d3/fontbox/src/main/java/org/apache/fontbox/ttf/VerticalMetricsTable.java", "sha": "94e03ebc997fc6e3a605735176fa6366d31f589a", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/ttf/VerticalMetricsTable.java?ref=b04d952449db318a1c80bc34c25660438d45a7d3", "patch": "@@ -57,6 +57,10 @@\n     public void read(TrueTypeFont ttf, TTFDataStream data) throws IOException\n     {\n         VerticalHeaderTable vHeader = ttf.getVerticalHeader();\n+        if (vHeader == null)\n+        {\n+            throw new IOException(\"Could not get vhea table\");\n+        }\n         numVMetrics = vHeader.getNumberOfVMetrics();\n         int numGlyphs = ttf.getNumberOfGlyphs();\n ", "filename": "fontbox/src/main/java/org/apache/fontbox/ttf/VerticalMetricsTable.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/a1aca29cf12dc4f880c932514c8248acf53026e2", "parent": "https://github.com/apache/pdfbox/commit/1a40a1954b3a2c3f2107fb6e28c62afe95e2fe9b", "message": "PDFBOX-4017: avoid NPE with euro symbol; clarify comment\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1857941 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_7", "file": [{"additions": 8, "raw_url": "https://github.com/apache/pdfbox/raw/a1aca29cf12dc4f880c932514c8248acf53026e2/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1Font.java", "blob_url": "https://github.com/apache/pdfbox/blob/a1aca29cf12dc4f880c932514c8248acf53026e2/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1Font.java", "sha": "a341edd31b4a797ef5d6bee64388e6fc8c86f376", "changes": 13, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1Font.java?ref=a1aca29cf12dc4f880c932514c8248acf53026e2", "patch": "@@ -601,17 +601,20 @@ private String getNameInFont(String name) throws IOException\n                 return uniName;\n             }\n             // PDFBOX-4017: no postscript table on Windows 10, and the low uni00NN\n-            // names are not found. What works is using the PDF code plus 0xF000\n+            // names are not found in Symbol font. What works is using the PDF code plus 0xF000\n             // while disregarding encoding from the PDF (because of file from PDFBOX-1606,\n             // makes sense because this segment is about finding the name in a standard font)\n             //TODO bring up better solution than this\n             if (\"SymbolMT\".equals(genericFont.getName()))\n             {\n-                int code = SymbolEncoding.INSTANCE.getNameToCodeMap().get(name);\n-                uniName = getUniNameOfCodePoint(code + 0xF000);\n-                if (genericFont.hasGlyph(uniName))\n+                Integer code = SymbolEncoding.INSTANCE.getNameToCodeMap().get(name);\n+                if (code != null)\n                 {\n-                    return uniName;\n+                    uniName = getUniNameOfCodePoint(code + 0xF000);\n+                    if (genericFont.hasGlyph(uniName))\n+                    {\n+                        return uniName;\n+                    }\n                 }\n             }\n         }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1Font.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/2b7a2d3332424bff79910cc0c0248ea8507e7ba9", "parent": "https://github.com/apache/pdfbox/commit/548dd7a6bbffb8de701441d6b5b83fe095ef03bd", "message": "PDFBOX-45: avoid NPE, as suggested by softvisionfd\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1857149 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_8", "file": [{"additions": 5, "raw_url": "https://github.com/apache/pdfbox/raw/2b7a2d3332424bff79910cc0c0248ea8507e7ba9/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java", "blob_url": "https://github.com/apache/pdfbox/blob/2b7a2d3332424bff79910cc0c0248ea8507e7ba9/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java", "sha": "535375bb86e5a8eb71e792734e6ebb9028d23414", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java?ref=2b7a2d3332424bff79910cc0c0248ea8507e7ba9", "patch": "@@ -574,7 +574,11 @@ protected void doWriteTrailer(COSDocument doc) throws IOException\n         // Remove a checksum if present\n         trailer.removeItem( COSName.DOC_CHECKSUM );\n \n-        ((COSArray) trailer.getItem(COSName.ID)).setDirect(true);\n+        COSArray idArray = trailer.getCOSArray(COSName.ID);\n+        if (idArray != null)\n+        {\n+            idArray.setDirect(true);\n+        }\n \n         trailer.accept(this);\n     }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/31b832bc5434ec7e50502644cabcf0d995de28a4", "parent": "https://github.com/apache/pdfbox/commit/3a436929423ce82b58ab48cfed4f77f2312c62b3", "message": "PDFBOX-4476: avoid NPE, as suggested by Derek Liu\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1854506 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_9", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/31b832bc5434ec7e50502644cabcf0d995de28a4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java", "blob_url": "https://github.com/apache/pdfbox/blob/31b832bc5434ec7e50502644cabcf0d995de28a4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java", "sha": "a3453dc2da422d05bb9ad8010106f8cfe3e6e94b", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java?ref=31b832bc5434ec7e50502644cabcf0d995de28a4", "patch": "@@ -156,7 +156,7 @@ public static COSBase getInheritableAttribute(COSDictionary node, COSName key)\n             else\r\n             {\r\n                 LOG.warn(\"COSDictionary expected, but got \" +\r\n-                        (base == null ? \" null\" : base.getClass().getSimpleName()));\r\n+                        (base == null ? \"null\" : base.getClass().getSimpleName()));\r\n             }\r\n         }\r\n \r", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/3a436929423ce82b58ab48cfed4f77f2312c62b3", "parent": "https://github.com/apache/pdfbox/commit/e13b880b1fd5a44cd3bd002eb3dc5f3477f4f9dc", "message": "PDFBOX-4476: avoid NPE, as suggested by Derek Liu\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1854504 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_10", "file": [{"additions": 2, "raw_url": "https://github.com/apache/pdfbox/raw/3a436929423ce82b58ab48cfed4f77f2312c62b3/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java", "blob_url": "https://github.com/apache/pdfbox/blob/3a436929423ce82b58ab48cfed4f77f2312c62b3/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java", "sha": "a069722b7c2a8758d3f14d83bce29fa9269aa906", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java?ref=3a436929423ce82b58ab48cfed4f77f2312c62b3", "patch": "@@ -155,7 +155,8 @@ public static COSBase getInheritableAttribute(COSDictionary node, COSName key)\n             }\r\n             else\r\n             {\r\n-                LOG.warn(\"COSDictionary expected, but got \" + base.getClass().getSimpleName());\r\n+                LOG.warn(\"COSDictionary expected, but got \" +\r\n+                        (base == null ? \" null\" : base.getClass().getSimpleName()));\r\n             }\r\n         }\r\n \r", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/5330fe291982cce521ba0b52b1d1ffef88c9ea90", "parent": "https://github.com/apache/pdfbox/commit/98f13f0b80f705a03487149bc19d2c4e8015a451", "message": "PDFBOX-4474: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1854331 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_11", "file": [{"additions": 9, "raw_url": "https://github.com/apache/pdfbox/raw/5330fe291982cce521ba0b52b1d1ffef88c9ea90/fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java", "blob_url": "https://github.com/apache/pdfbox/blob/5330fe291982cce521ba0b52b1d1ffef88c9ea90/fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java", "sha": "b979c50058996ec371a2a9a0285ce9e655df4e79", "changes": 10, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java?ref=5330fe291982cce521ba0b52b1d1ffef88c9ea90", "patch": "@@ -368,13 +368,21 @@ private void readFontInfo(Map<String, List<Token>> fontInfo)\n     {\n         List<Token> value = new ArrayList<>();\n         Token token = lexer.nextToken();\n+        if (lexer.peekToken() == null)\n+        {\n+            return value;\n+        }\n         value.add(token);\n \n         if (token.getKind() == Token.START_ARRAY)\n         {\n             int openArray = 1;\n             while (true)\n             {\n+                if (lexer.peekToken() == null)\n+                {\n+                    return value;\n+                }\n                 if (lexer.peekToken().getKind() == Token.START_ARRAY)\n                 {\n                     openArray++;\n@@ -821,7 +829,7 @@ private void read(Token.Kind kind, String name) throws IOException\n     private Token readMaybe(Token.Kind kind, String name) throws IOException\n     {\n         Token token = lexer.peekToken();\n-        if (token.getKind() == kind && token.getText().equals(name))\n+        if (token != null && token.getKind() == kind && token.getText().equals(name))\n         {\n             return lexer.nextToken();\n         }", "filename": "fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/8b250520afbcceb6d0f0cb0a9e552a064aed0fb4", "parent": "https://github.com/apache/pdfbox/commit/ca5057167359def53b88992eaec0476ef098f3db", "message": "PDFBOX-4444: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1852210 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_12", "file": [{"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/8b250520afbcceb6d0f0cb0a9e552a064aed0fb4/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java", "blob_url": "https://github.com/apache/pdfbox/blob/8b250520afbcceb6d0f0cb0a9e552a064aed0fb4/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java", "sha": "b0474f2b993d7073028fde46517cf5252eae022f", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java?ref=8b250520afbcceb6d0f0cb0a9e552a064aed0fb4", "patch": "@@ -1215,6 +1215,10 @@ private void updatePageReferences(PDFCloneUtility cloner,\n     {\n         for (COSObjectable obj : numberTreeAsMap.values())\n         {\n+            if (obj == null)\n+            {\n+                continue;\n+            }\n             PDParentTreeValue val = (PDParentTreeValue) obj;\n             COSBase base = val.getCOSObject();\n             if (base instanceof COSArray)", "filename": "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/ca5057167359def53b88992eaec0476ef098f3db", "parent": "https://github.com/apache/pdfbox/commit/bd9995639240c2b763be3e9dc99a49df48ef642b", "message": "PDFBOX-4444: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1852208 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_13", "file": [{"additions": 2, "raw_url": "https://github.com/apache/pdfbox/raw/ca5057167359def53b88992eaec0476ef098f3db/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java", "blob_url": "https://github.com/apache/pdfbox/blob/ca5057167359def53b88992eaec0476ef098f3db/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java", "sha": "661f0eef9bb41ec2862a9eb766df6cc93972e3b1", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java?ref=ca5057167359def53b88992eaec0476ef098f3db", "patch": "@@ -30,6 +30,7 @@\n import org.apache.pdfbox.cos.COSDictionary;\n import org.apache.pdfbox.cos.COSInteger;\n import org.apache.pdfbox.cos.COSName;\n+import org.apache.pdfbox.cos.COSNull;\n \n /**\n  * This class represents a PDF Number tree. See the PDF Reference 1.7 section\n@@ -251,7 +252,7 @@ public void setNumbers( Map<Integer, ? extends COSObjectable> numbers )\n             {\n                 array.add( COSInteger.get( key ) );\n                 COSObjectable obj = numbers.get( key );\n-                array.add( obj );\n+                array.add(obj == null ? COSNull.NULL : obj);\n             }\n             Integer lower = null;\n             Integer upper = null;", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/bd7957b5986a7261bebfd4cc59acc8b33974c035", "parent": "https://github.com/apache/pdfbox/commit/2d8273051858824fc3721def784406010586fc16", "message": "PDFBOX-4444: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1852205 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_14", "file": [{"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/bd7957b5986a7261bebfd4cc59acc8b33974c035/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java", "blob_url": "https://github.com/apache/pdfbox/blob/bd7957b5986a7261bebfd4cc59acc8b33974c035/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java", "sha": "a4da469311acb4a332d164e3b3b755fa308aa5c8", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java?ref=bd7957b5986a7261bebfd4cc59acc8b33974c035", "patch": "@@ -189,8 +189,7 @@ public Object getValue(Integer index) throws IOException\n                 }\n                 COSInteger key = (COSInteger) base;\n                 COSBase cosValue = numbersArray.getObject(i + 1);\n-                COSObjectable pdValue = convertCOSToPD( cosValue );\n-                indices.put( key.intValue(), pdValue );\n+                indices.put(key.intValue(), cosValue == null ? null : convertCOSToPD(cosValue));\n             }\n             indices = Collections.unmodifiableMap(indices);\n         }\n@@ -215,6 +214,9 @@ protected COSObjectable convertCOSToPD(COSBase base) throws IOException\n         }\n         catch( Exception t )\n         {\n+            System.out.println(\"valueType: \" + valueType);\n+            System.out.println(\"base: \" + base);\n+            System.out.println(\"Exception: \" + t);\n             throw new IOException(\"Error while trying to create value in number tree:\" + t.getMessage(), t);\n         }\n     }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/9534ffd7e6030e0413cf5a73e326ded77fea14ae", "parent": "https://github.com/apache/pdfbox/commit/a6a0de7f5605d3919463807ad4936d8da194d92c", "message": "PDFBOX-4071: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1850783 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_15", "file": [{"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/9534ffd7e6030e0413cf5a73e326ded77fea14ae/debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/DebugTextOverlay.java", "blob_url": "https://github.com/apache/pdfbox/blob/9534ffd7e6030e0413cf5a73e326ded77fea14ae/debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/DebugTextOverlay.java", "sha": "c972f028cb868028eae02c4664af5775a44c790c", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/DebugTextOverlay.java?ref=9534ffd7e6030e0413cf5a73e326ded77fea14ae", "patch": "@@ -91,6 +91,10 @@ public void stripPage(PDDocument document, PDPage page, int pageIndex, float sca\n                 List<PDThreadBead> pageArticles = page.getThreadBeads();\n                 for (PDThreadBead bead : pageArticles)\n                 {\n+                    if (bead == null)\n+                    {\n+                        continue;\n+                    }\n                     PDRectangle r = bead.getRectangle();\n                     GeneralPath p = r.transform(Matrix.getTranslateInstance(-cropBox.getLowerLeftX(), cropBox.getLowerLeftY()));\n                     Shape s = flip.createTransformedShape(p);", "filename": "debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/DebugTextOverlay.java"}, {"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/9534ffd7e6030e0413cf5a73e326ded77fea14ae/examples/src/main/java/org/apache/pdfbox/examples/util/DrawPrintTextLocations.java", "blob_url": "https://github.com/apache/pdfbox/blob/9534ffd7e6030e0413cf5a73e326ded77fea14ae/examples/src/main/java/org/apache/pdfbox/examples/util/DrawPrintTextLocations.java", "sha": "21897cb98be306480157119bc18ea2289573a4ef", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/examples/src/main/java/org/apache/pdfbox/examples/util/DrawPrintTextLocations.java?ref=9534ffd7e6030e0413cf5a73e326ded77fea14ae", "patch": "@@ -255,6 +255,10 @@ private void stripPage(int page) throws IOException\n         List<PDThreadBead> pageArticles = pdPage.getThreadBeads();\n         for (PDThreadBead bead : pageArticles)\n         {\n+            if (bead == null)\n+            {\n+                continue;\n+            }\n             PDRectangle r = bead.getRectangle();\n             Shape s = r.toGeneralPath().createTransformedShape(transAT);\n             s = flipAT.createTransformedShape(s);", "filename": "examples/src/main/java/org/apache/pdfbox/examples/util/DrawPrintTextLocations.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/2598096138d73267b99f5a3517b91f0642264390", "parent": "https://github.com/apache/pdfbox/commit/242e96d17eeaf84b18954f9ddd4cd3ddab9989f5", "message": "PDFBOX-3017: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1847662 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_16", "file": [{"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/2598096138d73267b99f5a3517b91f0642264390/examples/src/main/java/org/apache/pdfbox/examples/signature/ShowSignature.java", "blob_url": "https://github.com/apache/pdfbox/blob/2598096138d73267b99f5a3517b91f0642264390/examples/src/main/java/org/apache/pdfbox/examples/signature/ShowSignature.java", "sha": "1e0158c43eba73e840d2281221c66883e2d5268b", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/examples/src/main/java/org/apache/pdfbox/examples/signature/ShowSignature.java?ref=2598096138d73267b99f5a3517b91f0642264390", "patch": "@@ -472,6 +472,10 @@ private TimeStampToken extractTimeStampTokenFromSignerInformation(SignerInformat\n         // https://stackoverflow.com/questions/1647759/how-to-validate-if-a-signed-jar-contains-a-timestamp\n         Attribute attribute = unsignedAttributes.get(\n                 PKCSObjectIdentifiers.id_aa_signatureTimeStampToken);\n+        if (attribute == null)\n+        {\n+            return null;\n+        }\n         ASN1Object obj = (ASN1Object) attribute.getAttrValues().getObjectAt(0);\n         CMSSignedData signedTSTData = new CMSSignedData(obj.getEncoded());\n         return new TimeStampToken(signedTSTData);", "filename": "examples/src/main/java/org/apache/pdfbox/examples/signature/ShowSignature.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/53fdf250d6f303eebafe597a0867d3329a101b90", "parent": "https://github.com/apache/pdfbox/commit/56869c987e7de00d985a18389acd0bb76c909ebf", "message": "PDFBOX-4366: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1845601 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_17", "file": [{"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/53fdf250d6f303eebafe597a0867d3329a101b90/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java", "blob_url": "https://github.com/apache/pdfbox/blob/53fdf250d6f303eebafe597a0867d3329a101b90/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java", "sha": "fb834901b443b042d25f5504ab042f41fa4c3a8b", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java?ref=53fdf250d6f303eebafe597a0867d3329a101b90", "patch": "@@ -381,6 +381,10 @@ private void updateByValue(String value)\n         // update the appearance state (AS)\n         for (PDAnnotationWidget widget : getWidgets())\n         {\n+            if (widget.getAppearance() == null)\n+            {\n+                continue;\n+            }\n             PDAppearanceEntry appearanceEntry = widget.getAppearance().getNormalAppearance();\n             if (((COSDictionary) appearanceEntry.getCOSObject()).containsKey(value))\n             {", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/efb7c03105525879b55732c9eee4fecfef02a7cf", "parent": "https://github.com/apache/pdfbox/commit/fac04aaed09b8f8156869a97a273c37309523e14", "message": "PDFBOX-3017: remove solved //TODOs; avoid NPE if no signing time\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1844133 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_18", "file": [{"additions": 18, "raw_url": "https://github.com/apache/pdfbox/raw/efb7c03105525879b55732c9eee4fecfef02a7cf/examples/src/main/java/org/apache/pdfbox/examples/signature/ShowSignature.java", "blob_url": "https://github.com/apache/pdfbox/blob/efb7c03105525879b55732c9eee4fecfef02a7cf/examples/src/main/java/org/apache/pdfbox/examples/signature/ShowSignature.java", "sha": "1b4f8b1ba0b674920c4c37ad7de57007675ce964", "changes": 28, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/examples/src/main/java/org/apache/pdfbox/examples/signature/ShowSignature.java?ref=efb7c03105525879b55732c9eee4fecfef02a7cf", "patch": "@@ -186,8 +186,6 @@ private void showSignature(String[] args) throws IOException,\n                             case \"adbe.pkcs7.detached\":\n                             case \"ETSI.CAdES.detached\":\n                                 verifyPKCS7(buf, contents, sig);\n-\n-                                //TODO check certificate chain, revocation lists, timestamp...\n                                 break;\n                             case \"adbe.pkcs7.sha1\":\n                             {\n@@ -199,8 +197,6 @@ private void showSignature(String[] args) throws IOException,\n                                 System.out.println(\"certs=\" + certs);\n                                 byte[] hash = MessageDigest.getInstance(\"SHA1\").digest(buf);\n                                 verifyPKCS7(hash, contents, sig);\n-\n-                                //TODO check certificate chain, revocation lists, timestamp...\n                                 break;\n                             }\n                             case \"adbe.x509.rsa_sha1\":\n@@ -334,9 +330,15 @@ private void verifyPKCS7(byte[] byteArray, COSString contents, PDSignature sig)\n \n         try\n         {\n-            //TODO NPE risk\n-            certFromSignedData.checkValidity(sig.getSignDate().getTime());\n-            System.out.println(\"Certificate valid at signing time\");\n+            if (sig.getSignDate() != null)\n+            {\n+                certFromSignedData.checkValidity(sig.getSignDate().getTime());\n+                System.out.println(\"Certificate valid at signing time\");\n+            }\n+            else\n+            {\n+                System.err.println(\"Certificate cannot be verified without signing time\");\n+            }\n         }\n         catch (CertificateExpiredException ex)\n         {\n@@ -380,9 +382,15 @@ private void verifyPKCS7(byte[] byteArray, COSString contents, PDSignature sig)\n                     additionalCerts.add(certificate);\n                 }\n             }\n-            //TODO NPE risk (signDate parameter)\n-            CertificateVerifier.verifyCertificate(certFromSignedData,\n-                    additionalCerts, true, sig.getSignDate().getTime());\n+            if (sig.getSignDate() != null)\n+            {\n+                CertificateVerifier.verifyCertificate(certFromSignedData,\n+                        additionalCerts, true, sig.getSignDate().getTime());\n+            }\n+            else\n+            {\n+                System.err.println(\"Certificate cannot be verified without signing time\");\n+            }\n         }\n     }\n ", "filename": "examples/src/main/java/org/apache/pdfbox/examples/signature/ShowSignature.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/62bb13e1fa67779770319de0123a04537d5a21c5", "parent": "https://github.com/apache/pdfbox/commit/1d8480180d24cdfd3438c3771b8bf7446acfcd3a", "message": "PDFBOX-4327: avoid NPEs by copying ExtGState into graphics state\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1842358 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_19", "file": [{"additions": 3, "raw_url": "https://github.com/apache/pdfbox/raw/62bb13e1fa67779770319de0123a04537d5a21c5/tools/src/main/java/org/apache/pdfbox/tools/ExtractImages.java", "blob_url": "https://github.com/apache/pdfbox/blob/62bb13e1fa67779770319de0123a04537d5a21c5/tools/src/main/java/org/apache/pdfbox/tools/ExtractImages.java", "sha": "69d4393b80526981e36f94db7da21402b74c53c2", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/tools/src/main/java/org/apache/pdfbox/tools/ExtractImages.java?ref=62bb13e1fa67779770319de0123a04537d5a21c5", "patch": "@@ -203,6 +203,9 @@ public void run() throws IOException\n                     PDTransparencyGroup group = softMask.getGroup();\n                     if (group != null)\n                     {\n+                        // PDFBOX-4327: without this line NPEs will occur\n+                        res.getExtGState(name).copyIntoGraphicsState(getGraphicsState());\n+\n                         processSoftMask(group);\n                     }\n                 }", "filename": "tools/src/main/java/org/apache/pdfbox/tools/ExtractImages.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/e473df6d34502cb1e69bee96d13082e6130e8728", "parent": "https://github.com/apache/pdfbox/commit/ccf6d2d6737594553ae7f4bac0c86d7c1d8f3b09", "message": "PDFBOX-2941: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1842152 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_20", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/e473df6d34502cb1e69bee96d13082e6130e8728/debugger/src/main/java/org/apache/pdfbox/debugger/ui/LogDialog.java", "blob_url": "https://github.com/apache/pdfbox/blob/e473df6d34502cb1e69bee96d13082e6130e8728/debugger/src/main/java/org/apache/pdfbox/debugger/ui/LogDialog.java", "sha": "684d3b516b7485ab1b48c673a5356a87e2a1e382", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/debugger/src/main/java/org/apache/pdfbox/debugger/ui/LogDialog.java?ref=e473df6d34502cb1e69bee96d13082e6130e8728", "patch": "@@ -122,7 +122,7 @@ public void log(String name, String level, Object o, Throwable throwable)\n         StyleConstants.setForeground(nameStyle, new Color(0x6A6A6A));\n \n         String shortName = name.substring(name.lastIndexOf('.') + 1);\n-        String message = o.toString();\n+        String message = o == null ? \"(null)\" : o.toString();\n         \n         if (throwable != null)\n         {", "filename": "debugger/src/main/java/org/apache/pdfbox/debugger/ui/LogDialog.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/803661fc7449b6613bbf64bb54a5bf1b593911b4", "parent": "https://github.com/apache/pdfbox/commit/7d8d755fbd60dea539161787bb7fe4774a2b7636", "message": "PDFBOX-2941: avoid NPE / CCE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1840490 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_21", "file": [{"additions": 10, "raw_url": "https://github.com/apache/pdfbox/raw/803661fc7449b6613bbf64bb54a5bf1b593911b4/debugger/src/main/java/org/apache/pdfbox/debugger/ui/PageEntry.java", "blob_url": "https://github.com/apache/pdfbox/blob/803661fc7449b6613bbf64bb54a5bf1b593911b4/debugger/src/main/java/org/apache/pdfbox/debugger/ui/PageEntry.java", "sha": "2011be41b3ef078e9ef73152d3cef4f25c39e29c", "changes": 13, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/debugger/src/main/java/org/apache/pdfbox/debugger/ui/PageEntry.java?ref=803661fc7449b6613bbf64bb54a5bf1b593911b4", "patch": "@@ -18,6 +18,7 @@\n package org.apache.pdfbox.debugger.ui;\n \n import org.apache.pdfbox.cos.COSArray;\n+import org.apache.pdfbox.cos.COSBase;\n import org.apache.pdfbox.cos.COSDictionary;\n import org.apache.pdfbox.cos.COSName;\n \n@@ -63,12 +64,18 @@ public String getPath()\n         COSDictionary node = dict;\n         while (node.containsKey(COSName.PARENT))\n         {\n-            COSDictionary parent = (COSDictionary)node.getDictionaryObject(COSName.PARENT);\n-            COSArray kids = (COSArray)parent.getDictionaryObject(COSName.KIDS);\n-            if (kids == null)\n+            COSBase base = node.getDictionaryObject(COSName.PARENT);\n+            if (!(base instanceof COSDictionary))\n             {\n                 return \"\";\n             }\n+            COSDictionary parent = (COSDictionary) base;\n+            base = parent.getDictionaryObject(COSName.KIDS);\n+            if (!(base instanceof COSArray))\n+            {\n+                return \"\";\n+            }\n+            COSArray kids = (COSArray) base;\n             int idx = kids.indexOfObject(node);\n             sb.append(\"/Kids/[\").append(idx).append(\"]\");\n             node = parent;", "filename": "debugger/src/main/java/org/apache/pdfbox/debugger/ui/PageEntry.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/1ed0b7b4a74a261bc311f172a62a724fe60c132b", "parent": "https://github.com/apache/pdfbox/commit/775f6024f29e0a91d057c36b5e6c9ea4aa5d0c68", "message": "PDFBOX-4298: avoid NPE; use similar text\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1838652 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_22", "file": [{"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/1ed0b7b4a74a261bc311f172a62a724fe60c132b/pdfbox/src/main/java/org/apache/pdfbox/multipdf/Overlay.java", "blob_url": "https://github.com/apache/pdfbox/blob/1ed0b7b4a74a261bc311f172a62a724fe60c132b/pdfbox/src/main/java/org/apache/pdfbox/multipdf/Overlay.java", "sha": "8ab8318aeea4fec486debde34f41902a8a64c10a", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/multipdf/Overlay.java?ref=1ed0b7b4a74a261bc311f172a62a724fe60c132b", "patch": "@@ -322,7 +322,8 @@ else if (contents instanceof COSObject)\n         }\n         else\n         {\n-            throw new IOException(\"Contents are unknown type:\" + contents.getClass().getName());\n+            throw new IOException(\"Unknown content type: \" +\n+                    (contents == null ? \"(null)\" : contents.getClass().getName()));\n         }\n         return contentStreams;\n     }\n@@ -371,7 +372,8 @@ else if (contents instanceof COSArray)\n         }\n         else\n         {\n-            throw new IOException(\"Unknown content type:\" + contents.getClass().getName());\n+            throw new IOException(\"Unknown content type: \" +\n+                    (contents == null ? \"(null)\" : contents.getClass().getName()));\n         }\n     }\n ", "filename": "pdfbox/src/main/java/org/apache/pdfbox/multipdf/Overlay.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/eb00bfc00399b8101c3503bdbe35cc2d4cb8d4ec", "parent": "https://github.com/apache/pdfbox/commit/cafbc0560e00c300d731d79884ea8c7562d5ae48", "message": "PDFBOX-2941: avoid NPE when looking at Root/AcroForm/SigFlags by passing document to AcroForm constructor\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1844022 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_23", "file": [{"additions": 3, "raw_url": "https://github.com/apache/pdfbox/raw/eb00bfc00399b8101c3503bdbe35cc2d4cb8d4ec/debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java", "blob_url": "https://github.com/apache/pdfbox/blob/eb00bfc00399b8101c3503bdbe35cc2d4cb8d4ec/debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java", "sha": "b784743ebadc3ac51426ad37ed641b94464f7273", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java?ref=eb00bfc00399b8101c3503bdbe35cc2d4cb8d4ec", "patch": "@@ -1004,7 +1004,9 @@ private void showFlagPane(Object parentNode, Object selectedNode)\n         {\n             selectedNode = ((MapEntry)selectedNode).getKey();\n             selectedNode = getUnderneathObject(selectedNode);\n-            FlagBitsPane flagBitsPane = new FlagBitsPane((COSDictionary) parentNode, (COSName) selectedNode);\n+            FlagBitsPane flagBitsPane = new FlagBitsPane(document,\n+                    (COSDictionary) parentNode,\n+                    (COSName) selectedNode);\n             replaceRightComponent(flagBitsPane.getPane());\n         }\n     }", "filename": "debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java"}, {"additions": 5, "raw_url": "https://github.com/apache/pdfbox/raw/eb00bfc00399b8101c3503bdbe35cc2d4cb8d4ec/debugger/src/main/java/org/apache/pdfbox/debugger/flagbitspane/FlagBitsPane.java", "blob_url": "https://github.com/apache/pdfbox/blob/eb00bfc00399b8101c3503bdbe35cc2d4cb8d4ec/debugger/src/main/java/org/apache/pdfbox/debugger/flagbitspane/FlagBitsPane.java", "sha": "42279080a4a533bc46302c965bb2b16738f1ffa6", "changes": 7, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/debugger/src/main/java/org/apache/pdfbox/debugger/flagbitspane/FlagBitsPane.java?ref=eb00bfc00399b8101c3503bdbe35cc2d4cb8d4ec", "patch": "@@ -20,6 +20,7 @@\n import javax.swing.JPanel;\n import org.apache.pdfbox.cos.COSDictionary;\n import org.apache.pdfbox.cos.COSName;\n+import org.apache.pdfbox.pdmodel.PDDocument;\n \n /**\n  * @author Khyrul Bashar\n@@ -29,14 +30,16 @@\n public class FlagBitsPane\n {\n     private FlagBitsPaneView view;\n+    private final PDDocument document;\n \n     /**\n      * Constructor.\n      * @param dictionary COSDictionary instance.\n      * @param flagType COSName instance.\n      */\n-    public FlagBitsPane(final COSDictionary dictionary, COSName flagType)\n+    public FlagBitsPane(PDDocument document, final COSDictionary dictionary, COSName flagType)\n     {\n+        this.document = document;\n         createPane(dictionary, flagType);\n     }\n \n@@ -79,7 +82,7 @@ private void createPane(final COSDictionary dictionary, final COSName flagType)\n         }\n         if (COSName.SIG_FLAGS.equals(flagType))\n         {\n-            flag = new SigFlag(dictionary);\n+            flag = new SigFlag(document, dictionary);\n             view = new FlagBitsPaneView(\n                     flag.getFlagType(), flag.getFlagValue(), flag.getFlagBits(), flag.getColumnNames());\n         }", "filename": "debugger/src/main/java/org/apache/pdfbox/debugger/flagbitspane/FlagBitsPane.java"}, {"additions": 8, "raw_url": "https://github.com/apache/pdfbox/raw/eb00bfc00399b8101c3503bdbe35cc2d4cb8d4ec/debugger/src/main/java/org/apache/pdfbox/debugger/flagbitspane/SigFlag.java", "blob_url": "https://github.com/apache/pdfbox/blob/eb00bfc00399b8101c3503bdbe35cc2d4cb8d4ec/debugger/src/main/java/org/apache/pdfbox/debugger/flagbitspane/SigFlag.java", "sha": "4df39c81945f056d8779db92ca5963ecb36a3715", "changes": 13, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/debugger/src/main/java/org/apache/pdfbox/debugger/flagbitspane/SigFlag.java?ref=eb00bfc00399b8101c3503bdbe35cc2d4cb8d4ec", "patch": "@@ -19,6 +19,7 @@\n \n import org.apache.pdfbox.cos.COSDictionary;\n import org.apache.pdfbox.cos.COSName;\n+import org.apache.pdfbox.pdmodel.PDDocument;\n import org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm;\n \n /**\n@@ -28,16 +29,18 @@\n  */\n public class SigFlag extends Flag\n {\n-    private final COSDictionary acroformDictionary;\n+    private final PDDocument document;\n+    private final COSDictionary acroFormDictionary;\n \n     /**\n      * Constructor\n      *\n      * @param acroFormDictionary COSDictionary instance.\n      */\n-    SigFlag(COSDictionary acroFormDictionary)\n+    SigFlag(PDDocument document, COSDictionary acroFormDictionary)\n     {\n-        acroformDictionary = acroFormDictionary;\n+        this.document = document;\n+        this.acroFormDictionary = acroFormDictionary;\n     }\n \n     @Override\n@@ -49,13 +52,13 @@ String getFlagType()\n     @Override\n     String getFlagValue()\n     {\n-        return \"Flag value: \" + acroformDictionary.getInt(COSName.SIG_FLAGS);\n+        return \"Flag value: \" + acroFormDictionary.getInt(COSName.SIG_FLAGS);\n     }\n \n     @Override\n     Object[][] getFlagBits()\n     {\n-        PDAcroForm acroForm = new PDAcroForm(null, acroformDictionary);\n+        PDAcroForm acroForm = new PDAcroForm(document, acroFormDictionary);\n         return new Object[][]{\n                 new Object[]{1, \"SignaturesExist\", acroForm.isSignaturesExist()},\n                 new Object[]{2, \"AppendOnly\", acroForm.isAppendOnly()},", "filename": "debugger/src/main/java/org/apache/pdfbox/debugger/flagbitspane/SigFlag.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/d184edd2e8bb774a4e3f75ca442e29eeabbf9fa6", "parent": "https://github.com/apache/pdfbox/commit/5a2463f8299d8fb93ae7bfd06890c3386ca7462a", "message": "PDFBOX-4230: avoid NPE, as suggested by Edi Weissmann\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832189 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_24", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/d184edd2e8bb774a4e3f75ca442e29eeabbf9fa6/fontbox/src/main/java/org/apache/fontbox/ttf/CmapSubtable.java", "blob_url": "https://github.com/apache/pdfbox/blob/d184edd2e8bb774a4e3f75ca442e29eeabbf9fa6/fontbox/src/main/java/org/apache/fontbox/ttf/CmapSubtable.java", "sha": "da4b3c5f260a3f2c962d0e28460dc5be7f02c305", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/ttf/CmapSubtable.java?ref=d184edd2e8bb774a4e3f75ca442e29eeabbf9fa6", "patch": "@@ -45,7 +45,7 @@\n     private long subTableOffset;\n     private int[] glyphIdToCharacterCode;\n     private final Map<Integer, List<Integer>> glyphIdToCharacterCodeMultiple = new HashMap<>();\n-    private Map<Integer, Integer> characterCodeToGlyphId;\n+    private Map<Integer, Integer> characterCodeToGlyphId = new HashMap<>();\n \n     /**\n      * This will read the required data from the stream.", "filename": "fontbox/src/main/java/org/apache/fontbox/ttf/CmapSubtable.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/e62a364cf83e55e5bcb0f5f9e5bc2ea384b95951", "parent": "https://github.com/apache/pdfbox/commit/d0443b775ab6016c70705059c3738ccba2e8d237", "message": "PDFBOX-4279: avoid NPE with empty annotation color that have no colorspace\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1836752 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_25", "file": [{"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/e62a364cf83e55e5bcb0f5f9e5bc2ea384b95951/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColor.java", "blob_url": "https://github.com/apache/pdfbox/blob/e62a364cf83e55e5bcb0f5f9e5bc2ea384b95951/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColor.java", "sha": "2cc1836de1ad90571e0c83501e69fcd60795f4a0", "changes": 7, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColor.java?ref=e62a364cf83e55e5bcb0f5f9e5bc2ea384b95951", "patch": "@@ -113,9 +113,11 @@ public PDColor(float[] components, COSName patternName, PDColorSpace colorSpace)\n      */\n     public float[] getComponents()\n     {\n-        if (colorSpace instanceof PDPattern)\n+        if (colorSpace instanceof PDPattern || colorSpace == null)\n         {\n             // colorspace of the pattern color isn't known, so just clone\n+            // null colorspace can happen with empty annotation color\n+            // see PDFBOX-3351-538928-p4.pdf\n             return components.clone();\n         }\n         // PDFBOX-4279: copyOf instead of clone in case array is too small\n@@ -184,7 +186,6 @@ public PDColorSpace getColorSpace()\n     @Override\n     public String toString()\n     {\n-        return \"PDColor{components=\" + Arrays.toString(components) +\n-                \", patternName=\" + patternName + \"}\";\n+        return \"PDColor{components=\" + Arrays.toString(components) + \", patternName=\" + patternName + \", colorSpace=\" + colorSpace + '}';\n     }\n }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColor.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/63b2a4d30a6d22a023399a21dd49b129086bb14f", "parent": "https://github.com/apache/pdfbox/commit/2a3af0e226242c73ea751c3b5a29b13d2a57909e", "message": "PDFBOX-4193: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1830509 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_26", "file": [{"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/63b2a4d30a6d22a023399a21dd49b129086bb14f/debugger/src/main/java/org/apache/pdfbox/debugger/ui/PageEntry.java", "blob_url": "https://github.com/apache/pdfbox/blob/63b2a4d30a6d22a023399a21dd49b129086bb14f/debugger/src/main/java/org/apache/pdfbox/debugger/ui/PageEntry.java", "sha": "ff505eab44a2808de461398bd8cce55d554e027d", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/debugger/src/main/java/org/apache/pdfbox/debugger/ui/PageEntry.java?ref=63b2a4d30a6d22a023399a21dd49b129086bb14f", "patch": "@@ -65,6 +65,10 @@ public String getPath()\n         {\n             COSDictionary parent = (COSDictionary)node.getDictionaryObject(COSName.PARENT);\n             COSArray kids = (COSArray)parent.getDictionaryObject(COSName.KIDS);\n+            if (kids == null)\n+            {\n+                return \"\";\n+            }\n             int idx = kids.indexOfObject(node);\n             sb.append(\"/Kids/[\").append(idx).append(\"]\");\n             node = parent;", "filename": "debugger/src/main/java/org/apache/pdfbox/debugger/ui/PageEntry.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/48bc5e90b987d43eb28536a6956d387f9f9d723b", "parent": "https://github.com/apache/pdfbox/commit/8e61ca064c84348847bef6a2dc725a2621e9f332", "message": "PDFBOX-4248: avoid NPE which can happen with a Batik graphics object\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1833945 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_27", "file": [{"additions": 6, "raw_url": "https://github.com/apache/pdfbox/raw/48bc5e90b987d43eb28536a6956d387f9f9d723b/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java", "blob_url": "https://github.com/apache/pdfbox/blob/48bc5e90b987d43eb28536a6956d387f9f9d723b/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java", "sha": "7bb951943d6ada5c25de5bd0b1ffb7f7bf094b61", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java?ref=48bc5e90b987d43eb28536a6956d387f9f9d723b", "patch": "@@ -1175,7 +1175,12 @@ public void showAnnotation(PDAnnotation annotation) throws IOException\n         lastClip = null;\r\n         //TODO support more annotation flags (Invisible, NoZoom, NoRotate)\r\n         // Example for NoZoom can be found in p5 of PDFBOX-2348\r\n-        int deviceType = graphics.getDeviceConfiguration().getDevice().getType();\r\n+        int deviceType = -1;\r\n+        if (graphics.getDeviceConfiguration() != null && \r\n+            graphics.getDeviceConfiguration().getDevice() != null)\r\n+        {\r\n+            deviceType = graphics.getDeviceConfiguration().getDevice().getType();\r\n+        }\r\n         if (deviceType == GraphicsDevice.TYPE_PRINTER && !annotation.isPrinted())\r\n         {\r\n             return;\r", "filename": "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/d009be58c15d9d55564d30403f8eaea2d2f83fe4", "parent": "https://github.com/apache/pdfbox/commit/d99055f42aa894bd509852b802c7159a9b74ae8e", "message": "PDFBOX-4181: revert due to NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1828269 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_28", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/d009be58c15d9d55564d30403f8eaea2d2f83fe4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/encoding/GlyphList.java", "blob_url": "https://github.com/apache/pdfbox/blob/d009be58c15d9d55564d30403f8eaea2d2f83fe4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/encoding/GlyphList.java", "sha": "cc75dd11384d8f80a1c4086f65798674249dd0ca", "changes": 3, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/encoding/GlyphList.java?ref=d009be58c15d9d55564d30403f8eaea2d2f83fe4", "patch": "@@ -25,7 +25,6 @@\n import java.io.IOException;\n import java.util.HashMap;\n import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n \n /**\n  * PostScript glyph list, maps glyph names to sequences of Unicode characters.\n@@ -98,7 +97,7 @@ public static GlyphList getZapfDingbats()\n     private final Map<String, String> unicodeToName;\n     \n     // additional read/write cache for uniXXXX names\n-    private final Map<String, String> uniNameToUnicodeCache = new ConcurrentHashMap<>();\n+    private final Map<String, String> uniNameToUnicodeCache = new HashMap<>();\n \n     /**\n      * Creates a new GlyphList from a glyph list file.", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/encoding/GlyphList.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/7463e74baf5ecc0f4eaaa9273493212835f38933", "parent": "https://github.com/apache/pdfbox/commit/0ba64f354733fab19280cb0bfc2d43d87da56a35", "message": "PDFBOX-4164: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1827585 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_29", "file": [{"additions": 9, "raw_url": "https://github.com/apache/pdfbox/raw/7463e74baf5ecc0f4eaaa9273493212835f38933/debugger/src/main/java/org/apache/pdfbox/debugger/ui/PDFTreeCellRenderer.java", "blob_url": "https://github.com/apache/pdfbox/blob/7463e74baf5ecc0f4eaaa9273493212835f38933/debugger/src/main/java/org/apache/pdfbox/debugger/ui/PDFTreeCellRenderer.java", "sha": "ee9c4e01d1d51b87fde3c477615e29bb138bc791", "changes": 12, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/debugger/src/main/java/org/apache/pdfbox/debugger/ui/PDFTreeCellRenderer.java?ref=7463e74baf5ecc0f4eaaa9273493212835f38933", "patch": "@@ -205,13 +205,19 @@ private String toTreePostfix(Object nodeValue)\n             if (dict.containsKey(COSName.TYPE))\n             {\n                 COSName type = dict.getCOSName(COSName.TYPE);\n-                sb.append(\"   /T:\").append(type.getName());\n+                if (type != null)\n+                {\n+                    sb.append(\"   /T:\").append(type.getName());\n+                }\n             }\n-            \n+\n             if (dict.containsKey(COSName.SUBTYPE))\n             {\n                 COSName subtype = dict.getCOSName(COSName.SUBTYPE);\n-                sb.append(\"  /S:\").append(subtype.getName());\n+                if (subtype != null)\n+                {\n+                    sb.append(\"  /S:\").append(subtype.getName());\n+                }\n             }\n             return sb.toString();\n         }", "filename": "debugger/src/main/java/org/apache/pdfbox/debugger/ui/PDFTreeCellRenderer.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/6134c4ad0b56f3ed92529cbdd64ad2ecd7eedf89", "parent": "https://github.com/apache/pdfbox/commit/9eff016f57f7782f91f63d35ea11aee33303b3ba", "message": "PDFBOX-4235: test to check that IllegalArgumentException is thrown and no NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832641 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_30", "file": [{"additions": 46, "raw_url": "https://github.com/apache/pdfbox/raw/6134c4ad0b56f3ed92529cbdd64ad2ecd7eedf89/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java", "blob_url": "https://github.com/apache/pdfbox/blob/6134c4ad0b56f3ed92529cbdd64ad2ecd7eedf89/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java", "sha": "fdfcc173f92f97fa39218a9fe398e211648a7718", "changes": 48, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java?ref=6134c4ad0b56f3ed92529cbdd64ad2ecd7eedf89", "patch": "@@ -20,6 +20,7 @@\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.io.ByteArrayOutputStream;\n import java.io.File;\n@@ -245,8 +246,51 @@ public void testAddMissingInformationOnAcroFormAccess()\n             return;\n         }\n     }\n-    \n-    \n+\n+    /**\n+     * PDFBOX-4235: a bad /DA string should not result in an NPE.\n+     * \n+     * @throws IOException \n+     */\n+    @Test\n+    public void testBadDA() throws IOException\n+    {\n+        try (PDDocument doc = new PDDocument())\n+        {\n+            PDPage page = new PDPage();\n+            doc.addPage(page);\n+\n+            PDAcroForm acroForm = new PDAcroForm(document);\n+            doc.getDocumentCatalog().setAcroForm(acroForm);\n+            acroForm.setDefaultResources(new PDResources());\n+\n+            PDTextField textBox = new PDTextField(acroForm);\n+            textBox.setPartialName(\"SampleField\");\n+\n+            // https://stackoverflow.com/questions/50609478/\n+            // \"tf\" is a typo, should have been \"Tf\" and this results that no font is chosen\n+            textBox.setDefaultAppearance(\"/Helv 0 tf 0 g\");\n+            acroForm.getFields().add(textBox);\n+\n+            PDAnnotationWidget widget = textBox.getWidgets().get(0);\n+            PDRectangle rect = new PDRectangle(50, 750, 200, 20);\n+            widget.setRectangle(rect);\n+            widget.setPage(page);\n+\n+            page.getAnnotations().add(widget);\n+\n+            try\n+            {\n+                textBox.setValue(\"huhu\");\n+            }\n+            catch (IllegalArgumentException ex)\n+            {\n+                return;\n+            }\n+            fail(\"IllegalArgumentException should have been thrown\");\n+        }\n+    }\n+\n     @After\n     public void tearDown() throws IOException\n     {", "filename": "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/679b076473675cd697124c16b1936e42324ae127", "parent": "https://github.com/apache/pdfbox/commit/fc473f26660e41f841b1630e60266d885b1ed220", "message": "PDFBOX-4235: avoid NPE if font is not defined in /DA string\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832635 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_31", "file": [{"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/679b076473675cd697124c16b1936e42324ae127/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java", "blob_url": "https://github.com/apache/pdfbox/blob/679b076473675cd697124c16b1936e42324ae127/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java", "sha": "1c40f70c5fb273307549de277aee69b6dfa56b33", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java?ref=679b076473675cd697124c16b1936e42324ae127", "patch": "@@ -411,7 +411,10 @@ private void insertGeneratedAppearance(PDAnnotationWidget widget,\n             \n             // get the font\n             PDFont font = defaultAppearance.getFont();\n-            \n+            if (font == null)\n+            {\n+                throw new IllegalStateException(\"font is null, check whether /DA entry is incomplete or incorrect\");\n+            }\n             // calculate the fontSize (because 0 = autosize)\n             float fontSize = defaultAppearance.getFontSize();\n             ", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/0b10d2a759faae743b608c39f478d39a71c4e5c6", "parent": "https://github.com/apache/pdfbox/commit/e8d6760ae835d7147c2ed76e9eaafb64629f57cc", "message": "PDFBOX-4122: avoid potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1825140 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_32", "file": [{"additions": 7, "raw_url": "https://github.com/apache/pdfbox/raw/0b10d2a759faae743b608c39f478d39a71c4e5c6/preflight/src/main/java/org/apache/pdfbox/preflight/process/BookmarkValidationProcess.java", "blob_url": "https://github.com/apache/pdfbox/blob/0b10d2a759faae743b608c39f478d39a71c4e5c6/preflight/src/main/java/org/apache/pdfbox/preflight/process/BookmarkValidationProcess.java", "sha": "f9e70acee74eecdabb210c9a4b3c7c135036b48f", "changes": 7, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/preflight/src/main/java/org/apache/pdfbox/preflight/process/BookmarkValidationProcess.java?ref=0b10d2a759faae743b608c39f478d39a71c4e5c6", "patch": "@@ -157,6 +157,13 @@ protected boolean exploreOutlineLevel(PreflightContext ctx, PDOutlineItem inputI\n                         \"Loop detected: /Next \" + currentObj + \" is already in the list\"));\n                 return false;\n             }\n+            if (realPrevObject == null)\n+            {\n+                // unclear if this can ever happen\n+                addValidationError(ctx, new ValidationError(ERROR_SYNTAX_TRAILER_OUTLINES_INVALID,\n+                        \"Outline object before \" + currentObj + \" is null\"));\n+                return false;\n+            }\n             levelObjects.add(currentObj);\n             currentItem = currentItem.getNextSibling();\n             if (currentItem == null)", "filename": "preflight/src/main/java/org/apache/pdfbox/preflight/process/BookmarkValidationProcess.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/138b0d6c8168e03b5f2b4ffe92301bdb7bcb82a1", "parent": "https://github.com/apache/pdfbox/commit/03449fd43fb9bafb630a7e54a4255a6e862dfdcc", "message": "PDFBOX-4071: avoid potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1824701 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_33", "file": [{"additions": 2, "raw_url": "https://github.com/apache/pdfbox/raw/138b0d6c8168e03b5f2b4ffe92301bdb7bcb82a1/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/logicalstructure/PDStructureElement.java", "blob_url": "https://github.com/apache/pdfbox/blob/138b0d6c8168e03b5f2b4ffe92301bdb7bcb82a1/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/logicalstructure/PDStructureElement.java", "sha": "397aacd67cbb7294e7b8e79a352bd076760366de", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/logicalstructure/PDStructureElement.java?ref=138b0d6c8168e03b5f2b4ffe92301bdb7bcb82a1", "patch": "@@ -16,6 +16,7 @@\n  */\n package org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure;\n \n+import java.util.Collections;\n import java.util.Iterator;\n import java.util.Map;\n \n@@ -743,7 +744,7 @@ private PDStructureTreeRoot getStructureTreeRoot()\n         {\n             return root.getRoleMap();\n         }\n-        return null;\n+        return Collections.emptyMap();\n     }\n \n }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/logicalstructure/PDStructureElement.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/03449fd43fb9bafb630a7e54a4255a6e862dfdcc", "parent": "https://github.com/apache/pdfbox/commit/1d86d5b191c6366b9df45767d59b3b058e049784", "message": "PDFBOX-4071: avoid potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1824693 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_34", "file": [{"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/03449fd43fb9bafb630a7e54a4255a6e862dfdcc/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java", "blob_url": "https://github.com/apache/pdfbox/blob/03449fd43fb9bafb630a7e54a4255a6e862dfdcc/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java", "sha": "a145699efc871fb5cffaf2675dd66a9e0739d3ea", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java?ref=03449fd43fb9bafb630a7e54a4255a6e862dfdcc", "patch": "@@ -1330,6 +1330,10 @@ public void write(PDDocument doc, SignatureInterface signInterface) throws IOExc\n                 missingID = false;\n             }\n         }\n+        else\n+        {\n+            idArray = new COSArray();\n+        }\n         // check for an existing documentID\n         if (idArray != null && idArray.size() == 2)\n         {", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/1d86d5b191c6366b9df45767d59b3b058e049784", "parent": "https://github.com/apache/pdfbox/commit/0279494b1bf88b1536dd57ad4b2a0c8da62e7191", "message": "PDFBOX-4071: avoid potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1824684 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_35", "file": [{"additions": 6, "raw_url": "https://github.com/apache/pdfbox/raw/1d86d5b191c6366b9df45767d59b3b058e049784/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java", "blob_url": "https://github.com/apache/pdfbox/blob/1d86d5b191c6366b9df45767d59b3b058e049784/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java", "sha": "1f12af880a0b3bc86466cbe15eee3c6ab0f523d4", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java?ref=1d86d5b191c6366b9df45767d59b3b058e049784", "patch": "@@ -1339,6 +1339,12 @@ public ExternalSigningSupport saveIncrementalForExternalSigning(OutputStream out\n                 break;\n             }\n         }\n+\n+        if (foundSignature == null)\n+        {\n+            throw new IllegalStateException(\"document does not contain signature fields\");\n+        }\n+\n         int[] byteRange = foundSignature.getByteRange();\n         if (!Arrays.equals(byteRange, RESERVE_BYTE_RANGE))\n         {", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/6a6c9d653736123506bcc5528578c83a56a3d2fa", "parent": "https://github.com/apache/pdfbox/commit/3334c957d0bb43d1dc91e993dccd7a663ed1fe1f", "message": "PDFBOX-4106: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1824519 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_36", "file": [{"additions": 2, "raw_url": "https://github.com/apache/pdfbox/raw/6a6c9d653736123506bcc5528578c83a56a3d2fa/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2Embedder.java", "blob_url": "https://github.com/apache/pdfbox/blob/6a6c9d653736123506bcc5528578c83a56a3d2fa/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2Embedder.java", "sha": "1b0fa237aaa7d9b52a3ecf7062c5a0d8f3255ebd", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2Embedder.java?ref=6a6c9d653736123506bcc5528578c83a56a3d2fa", "patch": "@@ -415,7 +415,7 @@ private COSArray getWidths(int[] widths) throws IOException\n         long lastCid = widths[0];\n         long lastValue = Math.round(widths[1] * scaling);\n \n-        COSArray inner = null;\n+        COSArray inner = new COSArray();\n         COSArray outer = new COSArray();\n         outer.add(COSInteger.get(lastCid));\n \n@@ -548,7 +548,7 @@ private COSArray getVerticalMetrics(int[] values) throws IOException\n         long lastW1Value = Math.round(-values[1] * scaling);\n         long lastVxValue = Math.round(values[2] * scaling / 2);\n \n-        COSArray inner = null;\n+        COSArray inner = new COSArray();\n         COSArray outer = new COSArray();\n         outer.add(COSInteger.get(lastCid));\n ", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2Embedder.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/4bfbd0a7ea73fa6f399284bc7e7c3c5d48f8b500", "parent": "https://github.com/apache/pdfbox/commit/a4a3723abbbac9b1d59b65276acc848084bbb593", "message": "PDFBOX-4106: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1824367 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_37", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/4bfbd0a7ea73fa6f399284bc7e7c3c5d48f8b500/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2.java", "blob_url": "https://github.com/apache/pdfbox/blob/4bfbd0a7ea73fa6f399284bc7e7c3c5d48f8b500/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2.java", "sha": "932797116038e12b4e714b1010451bfeac899e6f", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2.java?ref=4bfbd0a7ea73fa6f399284bc7e7c3c5d48f8b500", "patch": "@@ -158,7 +158,7 @@ public PDCIDFontType2(COSDictionary fontDictionary, PDType0Font parent, TrueType\n \n     private void fixVerticalDisplacements() throws IOException\n     {\n-        if (!parent.dict.getCOSName(COSName.ENCODING).equals(COSName.IDENTITY_V))\n+        if (!COSName.IDENTITY_V.equals(parent.dict.getCOSName(COSName.ENCODING)))\n         {\n             return;\n         }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/bdd43a03fddf8287297563eef12546ba9e1bab5b", "parent": "https://github.com/apache/pdfbox/commit/fdc927e703908e5d3b8a82c618b81ab2c4d0a545", "message": "PDFBOX-4107: avoid potential NPE; avoid potential ClassCastException\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1824081 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_38", "file": [{"additions": 14, "raw_url": "https://github.com/apache/pdfbox/raw/bdd43a03fddf8287297563eef12546ba9e1bab5b/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java", "blob_url": "https://github.com/apache/pdfbox/blob/bdd43a03fddf8287297563eef12546ba9e1bab5b/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java", "sha": "574fcd9ec9f774c629677f2ce6b9bd44440e7d4a", "changes": 16, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java?ref=bdd43a03fddf8287297563eef12546ba9e1bab5b", "patch": "@@ -711,8 +711,9 @@ private void acroFormLegacyMode(PDFCloneUtility cloner, PDAcroForm destAcroForm,\n             throws IOException\n     {\n         List<PDField> srcFields = srcAcroForm.getFields();\n+        COSArray destFields = null;\n \n-        if (srcFields != null)\n+        if (srcFields != null && srcFields.size() > 0)\n         {\n             // if a form is merged multiple times using PDFBox the newly generated\n             // fields starting with dummyFieldName may already exist. We need to determine the last unique \n@@ -729,7 +730,18 @@ private void acroFormLegacyMode(PDFCloneUtility cloner, PDAcroForm destAcroForm,\n                 }\n             }\n \n-            COSArray destFields = (COSArray) destAcroForm.getCOSObject().getItem(COSName.FIELDS);\n+            // get the destinations root fields. Could be that the entry doesn't exist\n+            // or is of wrong type\n+            COSBase base = destAcroForm.getCOSObject().getItem(COSName.FIELDS);\n+            if (base instanceof COSArray)\n+            {\n+                destFields = (COSArray) base;\n+            }\n+            else\n+            {\n+                destFields = new COSArray();\n+            }\n+            \n             for (PDField srcField : srcAcroForm.getFields())\n             {\n                 COSDictionary dstField = (COSDictionary) cloner.cloneForNewDocument(srcField.getCOSObject());", "filename": "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/ee79bb04f7f3a8e1df919c57a01e69456589e0aa", "parent": "https://github.com/apache/pdfbox/commit/1d4d4038a60b2de01e50d3116faa1aceccb60c91", "message": "PDFBOX-4071: avoid potential NPE as annotationFileAttachment.getFile() might return null\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1823796 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_39", "file": [{"additions": 8, "raw_url": "https://github.com/apache/pdfbox/raw/ee79bb04f7f3a8e1df919c57a01e69456589e0aa/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/ExtractEmbeddedFiles.java", "blob_url": "https://github.com/apache/pdfbox/blob/ee79bb04f7f3a8e1df919c57a01e69456589e0aa/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/ExtractEmbeddedFiles.java", "sha": "7fcc9172812e418c46d271b022930ac683efe7d9", "changes": 11, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/ExtractEmbeddedFiles.java?ref=ee79bb04f7f3a8e1df919c57a01e69456589e0aa", "patch": "@@ -29,6 +29,7 @@\n import org.apache.pdfbox.pdmodel.common.PDNameTreeNode;\r\n import org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification;\r\n import org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile;\r\n+import org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification;\r\n import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;\r\n import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFileAttachment;\r\n \r\n@@ -93,9 +94,13 @@ public static void main( String[] args ) throws IOException\n                         if (annotation instanceof PDAnnotationFileAttachment)\r\n                         {\r\n                             PDAnnotationFileAttachment annotationFileAttachment = (PDAnnotationFileAttachment) annotation;\r\n-                            PDComplexFileSpecification fileSpec = (PDComplexFileSpecification) annotationFileAttachment.getFile();\r\n-                            PDEmbeddedFile embeddedFile = getEmbeddedFile(fileSpec);\r\n-                            extractFile(filePath, fileSpec.getFilename(), embeddedFile);\r\n+                            PDFileSpecification fileSpec = annotationFileAttachment.getFile();\r\n+                            if (fileSpec instanceof PDComplexFileSpecification)\r\n+                            {\r\n+                                PDComplexFileSpecification complexFileSpec = (PDComplexFileSpecification) fileSpec;\r\n+                                PDEmbeddedFile embeddedFile = getEmbeddedFile(complexFileSpec);\r\n+                                extractFile(filePath, complexFileSpec.getFilename(), embeddedFile);\r\n+                            }\r\n                         }\r\n                     }\r\n                 }\r", "filename": "examples/src/main/java/org/apache/pdfbox/examples/pdmodel/ExtractEmbeddedFiles.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/78018896c2983b5c70ca1583f28a12960583e643", "parent": "https://github.com/apache/pdfbox/commit/d8c5bb676155ee8997cbe4835a6ade663c625e90", "message": "PDFBOX-4071: avoid potetial NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1823684 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_40", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/78018896c2983b5c70ca1583f28a12960583e643/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLinkAppearanceHandler.java", "blob_url": "https://github.com/apache/pdfbox/blob/78018896c2983b5c70ca1583f28a12960583e643/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLinkAppearanceHandler.java", "sha": "aca2bc378c7b0f253a3d4c5522e464d59e8ffdc4", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLinkAppearanceHandler.java?ref=78018896c2983b5c70ca1583f28a12960583e643", "patch": "@@ -108,11 +108,11 @@ public void generateNormalAppearance()\n                     {\n                         if (!rect.contains(pathsArray[i * 2], pathsArray[i * 2 + 1]))\n                         {\n-                            pathsArray = null;\n                             LOG.warn(\"At least one /QuadPoints entry (\" + \n                                     pathsArray[i * 2] + \";\" + pathsArray[i * 2 + 1] + \n                                     \") is outside of rectangle, \" + rect + \n                                     \", /QuadPoints are ignored and /Rect is used instead\");\n+                            pathsArray = null;\n                             break;\n                         }\n                     }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLinkAppearanceHandler.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/626e0327104918a15f5f4c03f2dea5df99fa34b3", "parent": "https://github.com/apache/pdfbox/commit/cf8a9b1eb618d45f05ae26a3b9d8f017d2bfd323", "message": "PDFBOX-3353: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1822907 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_41", "file": [{"additions": 5, "raw_url": "https://github.com/apache/pdfbox/raw/626e0327104918a15f5f4c03f2dea5df99fa34b3/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDHighlightAppearanceHandler.java", "blob_url": "https://github.com/apache/pdfbox/blob/626e0327104918a15f5f4c03f2dea5df99fa34b3/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDHighlightAppearanceHandler.java", "sha": "577aa3627981b5dd5b4602def74122ff36565a3e", "changes": 7, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDHighlightAppearanceHandler.java?ref=626e0327104918a15f5f4c03f2dea5df99fa34b3", "patch": "@@ -65,8 +65,11 @@ public void generateNormalAppearance()\n             return;\n         }\n         AnnotationBorder ab = AnnotationBorder.getAnnotationBorder(annotation, annotation.getBorderStyle());\n-        if (ab.color.getComponents().length == 0)\n+        if (annotation.getColor() == null || ab.color.getComponents().length == 0)\n         {\n+            //TODO Annotation border color handling is different here than with shape annotations,\n+            // consider this when/if refactoring AnnotationBorder class,\n+            // e.g. set a parameter what to use as default.\n             return;\n         }\n \n@@ -127,7 +130,7 @@ public void generateNormalAppearance()\n                 frm2.setBBox(annotation.getRectangle());\n                 os = frm2.getCOSObject().createOutputStream();\n                 //TODO why can't we get a \"classic\" content stream?\n-                PDColor color = annotation.getColor();\n+                PDColor color = ab.color;\n                 switch (color.getComponents().length)\n                 {\n                     case 1:", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDHighlightAppearanceHandler.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/b6836d2d220e60e4e0aabc9276f0f58b38eaa1ca", "parent": "https://github.com/apache/pdfbox/commit/c9bd86954bd69a87848f2d91f699a18187b2668e", "message": "PDFBOX-4071: avoid potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1822538 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_42", "file": [{"additions": 2, "raw_url": "https://github.com/apache/pdfbox/raw/b6836d2d220e60e4e0aabc9276f0f58b38eaa1ca/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java", "blob_url": "https://github.com/apache/pdfbox/blob/b6836d2d220e60e4e0aabc9276f0f58b38eaa1ca/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java", "sha": "1f8727364cafe70363bde4eb6a5052f1eb00f2b0", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java?ref=b6836d2d220e60e4e0aabc9276f0f58b38eaa1ca", "patch": "@@ -590,7 +590,8 @@ public PDColorSpace getColorSpace() throws IOException\n             if (cosBase != null)\r\n             {\r\n                 COSObject indirect = null;\r\n-                if (cosBase instanceof COSObject && resources.getResourceCache() != null)\r\n+                if (cosBase instanceof COSObject &&\r\n+                        resources != null && resources.getResourceCache() != null)\r\n                 {\r\n                     // PDFBOX-4022: use the resource cache because several images\r\n                     // might have the same colorspace indirect object.\r", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/e7ac739914efc74b3acd2c4e34265974ed7d89b6", "parent": "https://github.com/apache/pdfbox/commit/9b1a82fc7c86caa10d4e0f5ab795dc369de81366", "message": "PDFBOX-4122: initialize dstPrev to empty string to avoid potential NPE although this wouldn't happen given the follow up tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1825122 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_43", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/e7ac739914efc74b3acd2c4e34265974ed7d89b6/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/ToUnicodeWriter.java", "blob_url": "https://github.com/apache/pdfbox/blob/e7ac739914efc74b3acd2c4e34265974ed7d89b6/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/ToUnicodeWriter.java", "sha": "d08c85bf70f983ea76ce4443bceebf680cd3e5fd", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/ToUnicodeWriter.java?ref=e7ac739914efc74b3acd2c4e34265974ed7d89b6", "patch": "@@ -116,7 +116,7 @@ public void writeTo(OutputStream out) throws IOException\n         List<String> dstString = new ArrayList<>();\n \n         int srcPrev = -1;\n-        String dstPrev = null;\n+        String dstPrev = \"\";\n \n         int srcCode1 = -1;\n ", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/ToUnicodeWriter.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/e91e7e683c76945b0614721f39d75f50daa5c5f6", "parent": "https://github.com/apache/pdfbox/commit/fa360791afdb095017de511537ed1b193358a4b0", "message": "PDFBOX-3017: simplify code, avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1814037 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_44", "file": [{"additions": 8, "raw_url": "https://github.com/apache/pdfbox/raw/e91e7e683c76945b0614721f39d75f50daa5c5f6/examples/src/main/java/org/apache/pdfbox/examples/signature/ShowSignature.java", "blob_url": "https://github.com/apache/pdfbox/blob/e91e7e683c76945b0614721f39d75f50daa5c5f6/examples/src/main/java/org/apache/pdfbox/examples/signature/ShowSignature.java", "sha": "84f59baf5ecf9f44a7e31463f6677ff31d6415f3", "changes": 14, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/examples/src/main/java/org/apache/pdfbox/examples/signature/ShowSignature.java?ref=e91e7e683c76945b0614721f39d75f50daa5c5f6", "patch": "@@ -121,7 +121,7 @@ private void showSignature(String[] args) throws IOException, CertificateExcepti\n                         long fileLen = infile.length();\n                         long rangeMax = byteRange[2] + (long) byteRange[3];\n                         // multiply content length with 2 (because it is in hex in the PDF) and add 2 for < and >\n-                        int contentLen = sigDict.getString(COSName.CONTENTS).length() * 2 + 2;\n+                        int contentLen = contents.getString().length() * 2 + 2;\n                         if (fileLen != rangeMax || byteRange[0] != 0 || byteRange[1] + contentLen != byteRange[2])\n                         {\n                             // a false result doesn't necessarily mean that the PDF is a fake\n@@ -155,9 +155,7 @@ private void showSignature(String[] args) throws IOException, CertificateExcepti\n                             case \"adbe.pkcs7.sha1\":\n                             {\n                                 // example: PDFBOX-1452.pdf\n-                                COSString certString = (COSString) sigDict.getDictionaryObject(\n-                                        COSName.CONTENTS);\n-                                byte[] certData = certString.getBytes();\n+                                byte[] certData = contents.getBytes();\n                                 CertificateFactory factory = CertificateFactory.getInstance(\"X.509\");\n                                 ByteArrayInputStream certStream = new ByteArrayInputStream(certData);\n                                 Collection<? extends Certificate> certs = factory.generateCertificates(certStream);\n@@ -171,8 +169,12 @@ private void showSignature(String[] args) throws IOException, CertificateExcepti\n                             case \"adbe.x509.rsa_sha1\":\n                             {\n                                 // example: PDFBOX-2693.pdf\n-                                COSString certString = (COSString) sigDict.getDictionaryObject(\n-                                        COSName.getPDFName(\"Cert\"));\n+                                COSString certString = (COSString) sigDict.getDictionaryObject(COSName.CERT);\n+                                if (certString == null)\n+                                {\n+                                    System.err.println(\"The /Cert certificate string is missing in the signature dictionary\");\n+                                    return;\n+                                }\n                                 byte[] certData = certString.getBytes();\n                                 CertificateFactory factory = CertificateFactory.getInstance(\"X.509\");\n                                 ByteArrayInputStream certStream = new ByteArrayInputStream(certData);", "filename": "examples/src/main/java/org/apache/pdfbox/examples/signature/ShowSignature.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/2bcd8ab0ebd9e3cb69f9990494eeb8a2c357537b", "parent": "https://github.com/apache/pdfbox/commit/0573b073089f7daf71624d012157aef7faae6435", "message": "PDFBOX-3950: avoid NPE or CCE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1813605 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_45", "file": [{"additions": 13, "raw_url": "https://github.com/apache/pdfbox/raw/2bcd8ab0ebd9e3cb69f9990494eeb8a2c357537b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java", "blob_url": "https://github.com/apache/pdfbox/blob/2bcd8ab0ebd9e3cb69f9990494eeb8a2c357537b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java", "sha": "3652fb3e0e6fafc825db3ff29a0538cfef18748d", "changes": 19, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java?ref=2bcd8ab0ebd9e3cb69f9990494eeb8a2c357537b", "patch": "@@ -62,15 +62,22 @@\n     public PDType0Font(COSDictionary fontDictionary) throws IOException\n     {\n         super(fontDictionary);\n-        COSArray descendantFonts = (COSArray)dict.getDictionaryObject(COSName.DESCENDANT_FONTS);\n-        COSDictionary descendantFontDictionary = (COSDictionary) descendantFonts.getObject(0);\n-\n-        if (descendantFontDictionary == null)\n+        COSBase base = dict.getDictionaryObject(COSName.DESCENDANT_FONTS);\n+        if (!(base instanceof COSArray))\n+        {\n+            throw new IOException(\"Missing descendant font array\");\n+        }\n+        COSArray descendantFonts = (COSArray) base;\n+        if (descendantFonts.size() == 0)\n+        {\n+            throw new IOException(\"Descendant font array is empty\");\n+        }\n+        COSBase descendantFontDictBase = descendantFonts.getObject(0);\n+        if (!(descendantFontDictBase instanceof COSDictionary))\n         {\n             throw new IOException(\"Missing descendant font dictionary\");\n         }\n-\n-        descendantFont = PDFontFactory.createDescendantFont(descendantFontDictionary, this);\n+        descendantFont = PDFontFactory.createDescendantFont((COSDictionary) descendantFontDictBase, this);\n         readEncoding();\n         fetchCMapUCS2();\n     }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/bfffa8d4c0e2319b1c69095e30974c79ff743d02", "parent": "https://github.com/apache/pdfbox/commit/feb35abb1dc3078722a91d5795bc9f703edd2671", "message": "PDFBOX-3979: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1813356 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_46", "file": [{"additions": 21, "raw_url": "https://github.com/apache/pdfbox/raw/bfffa8d4c0e2319b1c69095e30974c79ff743d02/fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java", "blob_url": "https://github.com/apache/pdfbox/blob/bfffa8d4c0e2319b1c69095e30974c79ff743d02/fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java", "sha": "f0353ca4dcf0bf41f0fbf78917b3006ec98cd344", "changes": 22, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java?ref=bfffa8d4c0e2319b1c69095e30974c79ff743d02", "patch": "@@ -110,6 +110,10 @@ private void parseASCII(byte[] bytes) throws IOException\n         {\n             // premature end\n             Token token = lexer.peekToken();\n+            if (token == null)\n+            {\n+                break;\n+            }\n             if (token.getKind() == Token.NAME &&\n                 (\"currentdict\".equals(token.getText()) || \"end\".equals(token.getText())))\n             {\n@@ -312,12 +316,20 @@ private void readFontInfo(Map<String, List<Token>> fontInfo)\n \n         for (int i = 0; i < length; i++)\n         {\n+            if (lexer.peekToken() == null)\n+            {\n+                break;\n+            }\n             if (lexer.peekToken().getKind() == Token.NAME &&\n                !lexer.peekToken().getText().equals(\"end\"))\n             {\n                 read(Token.NAME);\n             }\n             // premature end\n+            if (lexer.peekToken() == null)\n+            {\n+                break;\n+            }\n             if (lexer.peekToken().getKind() == Token.NAME &&\n                 lexer.peekToken().getText().equals(\"end\"))\n             {\n@@ -501,7 +513,7 @@ private void parseBinary(byte[] bytes) throws IOException\n         for (int i = 0; i < length; i++)\n         {\n             // premature end\n-            if (lexer.peekToken().getKind() != Token.LITERAL)\n+            if (lexer.peekToken() == null || lexer.peekToken().getKind() != Token.LITERAL)\n             {\n                 break;\n             }\n@@ -633,6 +645,10 @@ private void readSubrs(int lenIV) throws IOException\n         for (int i = 0; i < length; i++)\n         {\n             // premature end\n+            if (lexer.peekToken() == null)\n+            {\n+                break;\n+            }\n             if (!(lexer.peekToken().getKind() == Token.NAME &&\n                   lexer.peekToken().getText().equals(\"dup\")))\n             {\n@@ -691,6 +707,10 @@ private void readCharStrings(int lenIV) throws IOException\n         for (int i = 0; i < length; i++)\n         {\n             // premature end\n+            if (lexer.peekToken() == null)\n+            {\n+                break;\n+            }\n             if (lexer.peekToken().getKind() == Token.NAME &&\n                 lexer.peekToken().getText().equals(\"end\"))\n             {", "filename": "fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/bd5024454b5bf83cc62b2b2202ac45bda41cd870", "parent": "https://github.com/apache/pdfbox/commit/7779803c14c6d33f14ce67322ffce9198d13232a", "message": "PDFBOX-3976: eliminate the root issue instead of avoiding the NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1813076 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_47", "file": [{"additions": 5, "raw_url": "https://github.com/apache/pdfbox/raw/bd5024454b5bf83cc62b2b2202ac45bda41cd870/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java", "blob_url": "https://github.com/apache/pdfbox/blob/bd5024454b5bf83cc62b2b2202ac45bda41cd870/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java", "sha": "d9175046b6c63fc239c2582e7a346c90c417f288", "changes": 13, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java?ref=bd5024454b5bf83cc62b2b2202ac45bda41cd870", "patch": "@@ -1653,7 +1653,7 @@ private long searchNearestValue(List<Long> values, long offset)\n                         int genNumber = ((COSObject) infoObj).getGenerationNumber();\n                         trailerKeys[1] = new COSObjectKey(objNumber, genNumber);\n                     }\n-                    if (trailerKeys[0] != null || trailerKeys[1] != null)\n+                    if (trailerKeys[0] != null && trailerKeys[1] != null)\n                     {\n                         trailerDicts.add(trailerKeys);\n                     }\n@@ -1671,15 +1671,12 @@ private long searchNearestValue(List<Long> values, long offset)\n         if (trailerdictsSize > 1)\n         {\n             COSObjectKey[] first = trailerDicts.get(0);\n-            if (first[0] != null && first[1] != null)\n+            for (int i = trailerdictsSize - 1; i > 0; i--)\n             {\n-                for (int i = trailerdictsSize - 1; i > 0; i--)\n+                COSObjectKey[] other = trailerDicts.get(i);\n+                if (first[0].equals(other[0]) && first[1].equals(other[1]))\n                 {\n-                    COSObjectKey[] other = trailerDicts.get(i);\n-                    if (first[0].equals(other[0]) && first[1].equals(other[1]))\n-                    {\n-                        trailerDicts.remove(other);\n-                    }\n+                    trailerDicts.remove(other);\n                 }\n             }\n         }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/adb1b88f462ba52115d1b4f3d498ee2fe27d0d9d", "parent": "https://github.com/apache/pdfbox/commit/0aeefbee3310e7800926b51e27c8b340558dfc2c", "message": "PDFBOX-3976: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1813061 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_48", "file": [{"additions": 8, "raw_url": "https://github.com/apache/pdfbox/raw/adb1b88f462ba52115d1b4f3d498ee2fe27d0d9d/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java", "blob_url": "https://github.com/apache/pdfbox/blob/adb1b88f462ba52115d1b4f3d498ee2fe27d0d9d/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java", "sha": "4435681c5de91ee0cc2151a1162831316685ab00", "changes": 14, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java?ref=adb1b88f462ba52115d1b4f3d498ee2fe27d0d9d", "patch": "@@ -1622,7 +1622,7 @@ private long searchNearestValue(List<Long> values, long offset)\n      */\n     private List<COSObjectKey[]> bfSearchForTrailer() throws IOException\n     {\n-        List<COSObjectKey[]> trailerDicts = new ArrayList<COSObjectKey[]>();\n+        List<COSObjectKey[]> trailerDicts = new ArrayList<>();\n         long originOffset = source.getPosition();\n         source.seek(MINIMUM_SEARCH_OFFSET);\n         while (!source.isEOF())\n@@ -1671,15 +1671,17 @@ private long searchNearestValue(List<Long> values, long offset)\n         if (trailerdictsSize > 1)\n         {\n             COSObjectKey[] first = trailerDicts.get(0);\n-            for (int i = trailerdictsSize - 1; i > 0; i--)\n+            if (first[0] != null && first[1] != null)\n             {\n-                COSObjectKey[] other = trailerDicts.get(i);\n-                if (first[0].equals(other[0]) && first[1].equals(other[1]))\n+                for (int i = trailerdictsSize - 1; i > 0; i--)\n                 {\n-                    trailerDicts.remove(other);\n+                    COSObjectKey[] other = trailerDicts.get(i);\n+                    if (first[0].equals(other[0]) && first[1].equals(other[1]))\n+                    {\n+                        trailerDicts.remove(other);\n+                    }\n                 }\n             }\n-\n         }\n         return trailerDicts;\n     }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/82f6756e1d59ef597ec82b16849d6db16f40f93b", "parent": "https://github.com/apache/pdfbox/commit/2e93e8f9ad1fb4c6c67b65497ed7f0c482f0270f", "message": "PDFBOX-2852: avoid NPE, improve message, use jdk7 syntax\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1812314 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_49", "file": [{"additions": 10, "raw_url": "https://github.com/apache/pdfbox/raw/82f6756e1d59ef597ec82b16849d6db16f40f93b/pdfbox/src/main/java/org/apache/pdfbox/text/PDFTextStripper.java", "blob_url": "https://github.com/apache/pdfbox/blob/82f6756e1d59ef597ec82b16849d6db16f40f93b/pdfbox/src/main/java/org/apache/pdfbox/text/PDFTextStripper.java", "sha": "1df0622867519a21ffa8d3f48b55a1b6e3a66f0a", "changes": 24, "status": "modified", "deletions": 14, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/text/PDFTextStripper.java?ref=82f6756e1d59ef597ec82b16849d6db16f40f93b", "patch": "@@ -1808,27 +1808,23 @@ private String handleDirection(String word)\n     static\n     {\n         String path = \"org/apache/pdfbox/resources/text/BidiMirroring.txt\";\n-        InputStream input = PDFTextStripper.class.getClassLoader().getResourceAsStream(path);\n-        try\n+        try (InputStream input = PDFTextStripper.class.getClassLoader().getResourceAsStream(path))\n         {\n-            parseBidiFile(input);\n+            if (input != null)\n+            {\n+                parseBidiFile(input);\n+            }\n+            else\n+            {\n+                LOG.warn(\"Could not find '\" + path + \"', mirroring char map will be empty: \");\n+            }\n+            \n         }\n         catch (IOException e)\n         {\n             LOG.warn(\"Could not parse BidiMirroring.txt, mirroring char map will be empty: \"\n                     + e.getMessage());\n         }\n-        finally\n-        {\n-            try\n-            {\n-                input.close();\n-            }\n-            catch (IOException e)\n-            {\n-                LOG.error(\"Could not close BidiMirroring.txt \", e);\n-            }\n-        }\n     }\n \n     /**", "filename": "pdfbox/src/main/java/org/apache/pdfbox/text/PDFTextStripper.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/cc8a9a8fdbdf2b423a8cd974f57d4b2f9e5362a1", "parent": "https://github.com/apache/pdfbox/commit/2b1c7c79a72da94d8370885142d4f5d6b02177f4", "message": "PDFBOX-3949: avoid NPE, skip incomplete streams\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1810996 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_50", "file": [{"additions": 9, "raw_url": "https://github.com/apache/pdfbox/raw/cc8a9a8fdbdf2b423a8cd974f57d4b2f9e5362a1/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java", "blob_url": "https://github.com/apache/pdfbox/blob/cc8a9a8fdbdf2b423a8cd974f57d4b2f9e5362a1/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java", "sha": "a3f5c8ca90d75f7084bd3b40e14a4dabe9c00686", "changes": 11, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java?ref=cc8a9a8fdbdf2b423a8cd974f57d4b2f9e5362a1", "patch": "@@ -1735,9 +1735,16 @@ private void bfSearchForObjStreams() throws IOException\n         // add all found compressed objects to the brute force search result\n         for (Long offset : bfSearchObjStreamsOffsets.keySet())\n         {\n-            long bfOffset = bfSearchCOSObjectKeyOffsets.get(bfSearchObjStreamsOffsets.get(offset));\n+            Long bfOffset = bfSearchCOSObjectKeyOffsets.get(bfSearchObjStreamsOffsets.get(offset));\n+            // incomplete object stream found?\n+            if (bfOffset == null)\n+            {\n+                LOG.warn(\"Skipped incomplete object stream:\" + bfSearchObjStreamsOffsets.get(offset)\n+                        + \" at \" + offset);\n+                continue;\n+            }\n             // check if the object was overwritten\n-            if (offset == bfOffset)\n+            if (offset.equals(bfOffset))\n             {\n                 source.seek(offset);\n                 long stmObjNumber = readObjectNumber();", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/bdab232e265a828d758979678920fcdaf2c5b7b9", "parent": "https://github.com/apache/pdfbox/commit/55586aadb4fd2008e8b7bd9017bef208b63c3454", "message": "PDFBOX-3946: avoid NPE if URI doesn't exist\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1810594 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_51", "file": [{"additions": 8, "raw_url": "https://github.com/apache/pdfbox/raw/bdab232e265a828d758979678920fcdaf2c5b7b9/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/action/PDActionURI.java", "blob_url": "https://github.com/apache/pdfbox/blob/bdab232e265a828d758979678920fcdaf2c5b7b9/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/action/PDActionURI.java", "sha": "2898bbe14f6b80dc7cf19f92c72990f2dad3f44a", "changes": 10, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/action/PDActionURI.java?ref=bdab232e265a828d758979678920fcdaf2c5b7b9", "patch": "@@ -16,6 +16,7 @@\n  */\n package org.apache.pdfbox.pdmodel.interactive.action;\n \n+import org.apache.pdfbox.cos.COSBase;\n import org.apache.pdfbox.cos.COSDictionary;\n import org.apache.pdfbox.cos.COSName;\n import org.apache.pdfbox.cos.COSString;\n@@ -57,11 +58,16 @@ public PDActionURI(COSDictionary a)\n      * This will get the uniform resource identifier to resolve. It should be encoded in 7-bit\n      * ASCII, but UTF-8 is supported too.\n      *\n-     * @return The URI entry of the specific URI action dictionary.\n+     * @return The URI entry of the specific URI action dictionary or null if there isn't any.\n      */\n     public String getURI()\n     {\n-        return new String(((COSString) action.getDictionaryObject(COSName.URI)).getBytes(), Charsets.UTF_8);\n+        COSBase base = action.getDictionaryObject(COSName.URI);\n+        if (base instanceof COSString)\n+        {\n+            return new String(((COSString) base).getBytes(), Charsets.UTF_8);\n+        }\n+        return null;\n     }\n \n     /**", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/action/PDActionURI.java"}, {"additions": 2, "raw_url": "https://github.com/apache/pdfbox/raw/bdab232e265a828d758979678920fcdaf2c5b7b9/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/action/PDActionURITest.java", "blob_url": "https://github.com/apache/pdfbox/blob/bdab232e265a828d758979678920fcdaf2c5b7b9/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/action/PDActionURITest.java", "sha": "e8d07b1bb8daddcead89d23ae62f68f51e6eef6b", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/action/PDActionURITest.java?ref=bdab232e265a828d758979678920fcdaf2c5b7b9", "patch": "@@ -16,6 +16,7 @@\n package org.apache.pdfbox.pdmodel.interactive.action;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n import org.junit.Test;\n \n /**\n@@ -31,6 +32,7 @@\n     public void testUTF8URI()\n     {\n         PDActionURI actionURI = new PDActionURI();\n+        assertNull(actionURI.getURI());\n         actionURI.setURI(\"http://\u00e7\u00b5\u201e\u00e5\u0152\u00b6\u00e6\u203a\u00bf\u00e7\u00b6\u017d.com/\");\n         assertEquals(\"http://\u7d4c\u55b6\u627f\u7d99.com/\", actionURI.getURI());\n     }", "filename": "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/action/PDActionURITest.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/06d1da0174eebf935c12748425ec59d409561d7c", "parent": "https://github.com/apache/pdfbox/commit/324f91fe618ac9ae0ed786c35427b5ab1999e51f", "message": "PDFBOX-3937: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1808782 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_52", "file": [{"additions": 15, "raw_url": "https://github.com/apache/pdfbox/raw/06d1da0174eebf935c12748425ec59d409561d7c/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2.java", "blob_url": "https://github.com/apache/pdfbox/blob/06d1da0174eebf935c12748425ec59d409561d7c/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2.java", "sha": "d54e885ce6fc1e29777ffb8db5ee94f48b0f8d6f", "changes": 28, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2.java?ref=06d1da0174eebf935c12748425ec59d409561d7c", "patch": "@@ -94,21 +94,23 @@ public PDCIDFontType2(COSDictionary fontDictionary, PDType0Font parent, TrueType\n             boolean fontIsDamaged = false;\n             TrueTypeFont ttfFont = null;\n             \n-            PDStream stream;\n-            if (fd.getFontFile2() != null)\n+            PDStream stream = null;\n+            if (fd != null)\n             {\n-                stream = fd.getFontFile2();\n-            }\n-            else if (fd.getFontFile3() != null)\n-            {\n-                stream = fd.getFontFile3();\n-            }\n-            else\n-            {\n-                // Acrobat looks in FontFile too, even though it is not in the spec, see PDFBOX-2599\n-                stream = fd.getFontFile();\n+                if (fd.getFontFile2() != null)\n+                {\n+                    stream = fd.getFontFile2();\n+                }\n+                else if (fd.getFontFile3() != null)\n+                {\n+                    stream = fd.getFontFile3();\n+                }\n+                else\n+                {\n+                    // Acrobat looks in FontFile too, even though it is not in the spec, see PDFBOX-2599\n+                    stream = fd.getFontFile();\n+                }\n             }\n-            \n             if (stream != null)\n             {\n                 try", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/d494c6e40ec8d483e746d87b2fb1ca50bfe2e2d5", "parent": "https://github.com/apache/pdfbox/commit/d8b7d5fc4ba59e6b9111734e35ed0ab98b0206e7", "message": "PDFBOX-3916: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1806716 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_53", "file": [{"additions": 5, "raw_url": "https://github.com/apache/pdfbox/raw/d494c6e40ec8d483e746d87b2fb1ca50bfe2e2d5/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java", "blob_url": "https://github.com/apache/pdfbox/blob/d494c6e40ec8d483e746d87b2fb1ca50bfe2e2d5/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java", "sha": "437d6be26321bb8d20f76c66f48263123adacc9f", "changes": 10, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java?ref=d494c6e40ec8d483e746d87b2fb1ca50bfe2e2d5", "patch": "@@ -225,11 +225,11 @@ else if (!cMap.hasCIDMappings())\n         PDCIDSystemInfo ros = descendantFont.getCIDSystemInfo();\n         if (ros != null)\n         {\n-            isDescendantCJK = ros.getRegistry().equals(\"Adobe\") &&\n-                    (ros.getOrdering().equals(\"GB1\") || \n-                     ros.getOrdering().equals(\"CNS1\") ||\n-                     ros.getOrdering().equals(\"Japan1\") ||\n-                     ros.getOrdering().equals(\"Korea1\"));\n+            isDescendantCJK = \"Adobe\".equals(ros.getRegistry()) &&\n+                    (\"GB1\".equals(ros.getOrdering()) || \n+                     \"CNS1\".equals(ros.getOrdering()) ||\n+                     \"Japan1\".equals(ros.getOrdering()) ||\n+                     \"Korea1\".equals(ros.getOrdering()));\n         }\n     }\n ", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/b9aaf1efb1261e1193a1272897b7d8e8bb813742", "parent": "https://github.com/apache/pdfbox/commit/46802f039793e93d4c929e8faa969d768dca7cfd", "message": "PDFBOX-3894: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1805547 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_54", "file": [{"additions": 2, "raw_url": "https://github.com/apache/pdfbox/raw/b9aaf1efb1261e1193a1272897b7d8e8bb813742/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java", "blob_url": "https://github.com/apache/pdfbox/blob/b9aaf1efb1261e1193a1272897b7d8e8bb813742/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java", "sha": "713710c3d3cc3406d98f498233a12fe0aefabcaf", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java?ref=b9aaf1efb1261e1193a1272897b7d8e8bb813742", "patch": "@@ -304,8 +304,8 @@ private boolean isPageTreeNode(COSDictionary node )\n     {\r\n         // some files such as PDFBOX-2250-229205.pdf don't have Pages set as the Type, so we have\r\n         // to check for the presence of Kids too\r\n-        return node.getCOSName(COSName.TYPE) == COSName.PAGES ||\r\n-               node.containsKey(COSName.KIDS);\r\n+        return node != null &&\r\n+               (node.getCOSName(COSName.TYPE) == COSName.PAGES || node.containsKey(COSName.KIDS));\r\n     }\r\n \r\n     /**\r", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/2cb23c52a77ed378f31d180f07c579fef01a3ca2", "parent": "https://github.com/apache/pdfbox/commit/30ffe3356d907cb61dedb416cf11222104668337", "message": "PDFBOX-3855: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1800901 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_55", "file": [{"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/2cb23c52a77ed378f31d180f07c579fef01a3ca2/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java", "blob_url": "https://github.com/apache/pdfbox/blob/2cb23c52a77ed378f31d180f07c579fef01a3ca2/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java", "sha": "2f64eb0814545182692eb475fbb3615ee300f30a", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java?ref=2cb23c52a77ed378f31d180f07c579fef01a3ca2", "patch": "@@ -124,6 +124,10 @@\n         @SuppressWarnings(\"unused\")\r\n         Header header = readHeader(input);\r\n         String[] nameIndex = readStringIndexData(input);\r\n+        if (nameIndex == null)\r\n+        {\r\n+            throw new IOException(\"Name index missing in CFF font\");\r\n+        }\r\n         byte[][] topDictIndex = readIndexData(input);\r\n         stringIndex = readStringIndexData(input);\r\n         byte[][] globalSubrIndex = readIndexData(input);\r", "filename": "fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/fb82bbff93708314f73c6073e5a7dc08681ffd08", "parent": "https://github.com/apache/pdfbox/commit/b0b8b9fceb0ac52387b1ac883994ed907c635650", "message": "PDFBOX-3838: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1799595 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_56", "file": [{"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/fb82bbff93708314f73c6073e5a7dc08681ffd08/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PatchMeshesShadingContext.java", "blob_url": "https://github.com/apache/pdfbox/blob/fb82bbff93708314f73c6073e5a7dc08681ffd08/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PatchMeshesShadingContext.java", "sha": "b9eeedf57a304c70614468eeefa9a031da101a9b", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PatchMeshesShadingContext.java?ref=fb82bbff93708314f73c6073e5a7dc08681ffd08", "patch": "@@ -92,6 +92,10 @@ protected PatchMeshesShadingContext(PDShadingType6 shading, ColorModel colorMode\n         for (int i = 0; i < numberOfColorComponents; ++i)\n         {\n             colRange[i] = shadingType.getDecodeForParameter(2 + i);\n+            if (colRange[i] == null)\n+            {\n+                throw new IOException(\"Range missing in shading /Decode entry\");\n+            }\n         }\n         List<Patch> list = new ArrayList<>();\n         long maxSrcCoord = (long) Math.pow(2, bitsPerCoordinate) - 1;", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/PatchMeshesShadingContext.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/e8d6760ae835d7147c2ed76e9eaafb64629f57cc", "parent": "https://github.com/apache/pdfbox/commit/68a1b1f46ba9e7f1442172b1895cf2b99c50d060", "message": "PDFBOX-4122: make errorCode final, remove code that is never used because errorCode is never null (if it was, it would throw NPE in the constructor)\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1825138 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_57", "file": [{"additions": 2, "raw_url": "https://github.com/apache/pdfbox/raw/e8d6760ae835d7147c2ed76e9eaafb64629f57cc/preflight/src/main/java/org/apache/pdfbox/preflight/ValidationResult.java", "blob_url": "https://github.com/apache/pdfbox/blob/e8d6760ae835d7147c2ed76e9eaafb64629f57cc/preflight/src/main/java/org/apache/pdfbox/preflight/ValidationResult.java", "sha": "0fa44124109546b961017783a5c45c668329b2d8", "changes": 10, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/preflight/src/main/java/org/apache/pdfbox/preflight/ValidationResult.java?ref=e8d6760ae835d7147c2ed76e9eaafb64629f57cc", "patch": "@@ -174,7 +174,7 @@ public void addErrors(List<ValidationError> errors)\n          * Error identifier. This error code can be used as identifier to internationalize the logging message using\n          * i18n.\n          */\n-        private String errorCode;\n+        private final String errorCode;\n \n         /**\n          * Error details\n@@ -436,11 +436,7 @@ public boolean equals(Object o)\n             {\n                 ValidationError ve = (ValidationError) o;\n                 // check errorCode\n-                if (errorCode == null && ve.errorCode != null)\n-                {\n-                    return false;\n-                }\n-                else if (!errorCode.equals(ve.errorCode))\n+                if (!errorCode.equals(ve.errorCode))\n                 {\n                     return false;\n                 }\n@@ -463,13 +459,11 @@ else if (pageNumber != null && ve.pageNumber != null\n                 }\n                 // check warning\n                 return isWarning == ve.isWarning;\n-\n             }\n             else\n             {\n                 return false;\n             }\n         }\n-\n     }\n }", "filename": "preflight/src/main/java/org/apache/pdfbox/preflight/ValidationResult.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/70dc5875052f2091cae086cfa9cd81fdd537a9e3", "parent": "https://github.com/apache/pdfbox/commit/231aa444e76123ceace8fd4529647fbed7717349", "message": "PDFBOX-3807: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1796092 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_58", "file": [{"additions": 2, "raw_url": "https://github.com/apache/pdfbox/raw/70dc5875052f2091cae086cfa9cd81fdd537a9e3/fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java", "blob_url": "https://github.com/apache/pdfbox/blob/70dc5875052f2091cae086cfa9cd81fdd537a9e3/fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java", "sha": "00e865bd5f5d418e6ca1d574db0e542f225e1e56", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java?ref=70dc5875052f2091cae086cfa9cd81fdd537a9e3", "patch": "@@ -361,9 +361,10 @@ private void parseBeginbfrange(Number cosCount, PushbackInputStream cmapStream,\n             {\n                 tokenBytes = (byte[]) nextToken;\n             }\n-            if (tokenBytes.length == 0)\n+            if (tokenBytes == null || tokenBytes.length == 0)\n             {\n                 // PDFBOX-3450: ignore <>\n+                // PDFBOX-3807: ignore null\n                 continue;\n             }\n             boolean done = false;", "filename": "fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/f39436a8796e8e72313ae03c2029662e33fde9a8", "parent": "https://github.com/apache/pdfbox/commit/5a20e5cac9ed3a4f52fe0de7f0b78789c43551e7", "message": "PDFBOX-3761: avoid NPE if /Outlines exists but is empty\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1791933 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_59", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/f39436a8796e8e72313ae03c2029662e33fde9a8/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java", "blob_url": "https://github.com/apache/pdfbox/blob/f39436a8796e8e72313ae03c2029662e33fde9a8/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java", "sha": "20eef6ea365528a07565878669965fe7a44e7265", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java?ref=f39436a8796e8e72313ae03c2029662e33fde9a8", "patch": "@@ -420,7 +420,7 @@ public void appendDocument(PDDocument destination, PDDocument source) throws IOE\n         PDDocumentOutline srcOutline = srcCatalog.getDocumentOutline();\n         if (srcOutline != null)\n         {\n-            if (destOutline == null)\n+            if (destOutline == null || destOutline.getFirstChild() == null)\n             {\n                 PDDocumentOutline cloned = new PDDocumentOutline((COSDictionary) cloner.cloneForNewDocument(srcOutline));\n                 destCatalog.setDocumentOutline(cloned);", "filename": "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/bc28d6b3a39305acc0c5e70000453396f3ada784", "parent": "https://github.com/apache/pdfbox/commit/b692119e707b374a7593fe9cab28b15957981e3f", "message": "PDFBOX-3739: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1789714 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_60", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/bc28d6b3a39305acc0c5e70000453396f3ada784/pdfbox/src/main/java/org/apache/pdfbox/filter/Filter.java", "blob_url": "https://github.com/apache/pdfbox/blob/bc28d6b3a39305acc0c5e70000453396f3ada784/pdfbox/src/main/java/org/apache/pdfbox/filter/Filter.java", "sha": "cb8ce97ca131665f41dc01c5f35dd4bfbeba869e", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/filter/Filter.java?ref=bc28d6b3a39305acc0c5e70000453396f3ada784", "patch": "@@ -118,7 +118,7 @@ protected static ImageReader findImageReader(String formatName, String errorCaus\n         while (readers.hasNext())\n         {\n             reader = readers.next();\n-            if (reader.canReadRaster())\n+            if (reader != null && reader.canReadRaster())\n             {\n                 break;\n             }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/filter/Filter.java"}, {"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/bc28d6b3a39305acc0c5e70000453396f3ada784/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactory.java", "blob_url": "https://github.com/apache/pdfbox/blob/bc28d6b3a39305acc0c5e70000453396f3ada784/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactory.java", "sha": "b4e401dd2f929fc692a993eee73eb4ba642a303f", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactory.java?ref=bc28d6b3a39305acc0c5e70000453396f3ada784", "patch": "@@ -253,6 +253,10 @@ private static ImageWriter getJPEGImageWriter() throws IOException\n                 writer.dispose();\r\n             }\r\n             writer = writers.next();\r\n+            if (writer == null)\r\n+            {\r\n+                continue;\r\n+            }\r\n             // PDFBOX-3566: avoid CLibJPEGImageWriter, which is not a JPEGImageWriteParam\r\n             if (writer.getDefaultWriteParam() instanceof JPEGImageWriteParam)\r\n             {\r", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactory.java"}, {"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/bc28d6b3a39305acc0c5e70000453396f3ada784/tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java", "blob_url": "https://github.com/apache/pdfbox/blob/bc28d6b3a39305acc0c5e70000453396f3ada784/tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java", "sha": "08219cc9fecae152e5d4cb62ea608389018199a3", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java?ref=bc28d6b3a39305acc0c5e70000453396f3ada784", "patch": "@@ -184,6 +184,10 @@ public static boolean writeImage(BufferedImage image, String formatName, OutputS\n                     writer.dispose();\n                 }\n                 writer = writers.next();\n+                if (writer == null)\n+                {\n+                    continue;\n+                }\n                 param = writer.getDefaultWriteParam();\n                 metadata = writer.getDefaultImageMetadata(new ImageTypeSpecifier(image), param);\n                 if (metadata != null", "filename": "tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/851d10cf56c2cd27ba699d32f5d93afa49cda7c9", "parent": "https://github.com/apache/pdfbox/commit/50cccec1d003dfed1f970ff545f81fe69dc7420c", "message": "PDFBOX-3728: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1788014 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_61", "file": [{"additions": 10, "raw_url": "https://github.com/apache/pdfbox/raw/851d10cf56c2cd27ba699d32f5d93afa49cda7c9/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java", "blob_url": "https://github.com/apache/pdfbox/blob/851d10cf56c2cd27ba699d32f5d93afa49cda7c9/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java", "sha": "4e6428639bfd12bb681dc8de0a933d7bfd42a0ef", "changes": 11, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java?ref=851d10cf56c2cd27ba699d32f5d93afa49cda7c9", "patch": "@@ -80,10 +80,19 @@ public PDICCBased(PDDocument doc)\n      * Creates a new ICC color space using the PDF array.\n      *\n      * @param iccArray the ICC stream object\n-     * @throws java.io.IOException if there is an error reading the ICC profile.\n+     * @throws IOException if there is an error reading the ICC profile or if the parameter\n+     * is invalid.\n      */\n     public PDICCBased(COSArray iccArray) throws IOException\n     {\n+        if (iccArray.size() < 2)\n+        {\n+            throw new IOException(\"ICCBased colorspace array must have two elements\");\n+        }\n+        if (!(iccArray.getObject(1) instanceof COSStream))\n+        {\n+            throw new IOException(\"ICCBased colorspace array must have a stream as second element\");\n+        }\n         array = iccArray;\n         stream = new PDStream((COSStream) iccArray.getObject(1));\n         loadICCProfile();", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/8782aa533901a30e3ad76a492d5d25138e97653a", "parent": "https://github.com/apache/pdfbox/commit/bb1078cdc5a35b790295848ee1bc869ad9061840", "message": "PDFBOX-3694: avoid NPE and ClassCastExcepton on empty inline images\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1783575 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_62", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/8782aa533901a30e3ad76a492d5d25138e97653a/pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/graphics/BeginInlineImage.java", "blob_url": "https://github.com/apache/pdfbox/blob/8782aa533901a30e3ad76a492d5d25138e97653a/pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/graphics/BeginInlineImage.java", "sha": "e6e1f3c71b7166a04d21eb4364fe942946f13d8b", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/graphics/BeginInlineImage.java?ref=8782aa533901a30e3ad76a492d5d25138e97653a", "patch": "@@ -34,7 +34,7 @@\n     @Override\n     public void process(Operator operator, List<COSBase> operands) throws IOException\n     {\n-        if (operator.getImageData().length == 0)\n+        if (operator.getImageData() == null || operator.getImageData().length == 0)\n         {\n             return;\n         }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/graphics/BeginInlineImage.java"}, {"additions": 7, "raw_url": "https://github.com/apache/pdfbox/raw/8782aa533901a30e3ad76a492d5d25138e97653a/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java", "blob_url": "https://github.com/apache/pdfbox/blob/8782aa533901a30e3ad76a492d5d25138e97653a/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java", "sha": "902bbc52f9757368d0e3fc3d996fb876509e8f76", "changes": 11, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java?ref=8782aa533901a30e3ad76a492d5d25138e97653a", "patch": "@@ -285,12 +285,15 @@ else if( next.equals( \"false\" ) )\n                         imageParams.setItem( (COSName)nextToken, (COSBase)value );\n                     }\n                     //final token will be the image data, maybe??\n-                    Operator imageData = (Operator)nextToken;\n-                    if (imageData.getImageData().length == 0)\n+                    if (nextToken instanceof Operator)\n                     {\n-                        LOG.warn(\"empty inline image at stream offset \" + seqSource.getPosition());\n+                        Operator imageData = (Operator) nextToken;\n+                        if (imageData.getImageData() == null || imageData.getImageData().length == 0)\n+                        {\n+                            LOG.warn(\"empty inline image at stream offset \" + seqSource.getPosition());\n+                        }\n+                        beginImageOP.setImageData(imageData.getImageData());\n                     }\n-                    beginImageOP.setImageData( imageData.getImageData() );\n                 }\n                 break;\n             }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/2b9bb6526de705de7842ac27da8f1b06e5cf7f69", "parent": "https://github.com/apache/pdfbox/commit/beeaaad60901519bb869cc3a9c694299e64d0d4a", "message": "PDFBOX-2852: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1783539 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_63", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/2b9bb6526de705de7842ac27da8f1b06e5cf7f69/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDInlineImage.java", "blob_url": "https://github.com/apache/pdfbox/blob/2b9bb6526de705de7842ac27da8f1b06e5cf7f69/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDInlineImage.java", "sha": "97e94e7f6a303094b61fe1d6abcd1ca77771d93d", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDInlineImage.java?ref=2b9bb6526de705de7842ac27da8f1b06e5cf7f69", "patch": "@@ -302,7 +302,7 @@ public InputStream createInputStream(List<String> stopFilters) throws IOExceptio\n         List<String> filters = getFilters();\n         ByteArrayInputStream in = new ByteArrayInputStream(rawData);\n         ByteArrayOutputStream out = new ByteArrayOutputStream(rawData.length);\n-        for (int i = 0; i < filters.size(); i++)\n+        for (int i = 0; filters != null && i < filters.size(); i++)\n         {\n             // TODO handling of abbreviated names belongs here, rather than in other classes\n             out.reset();", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDInlineImage.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/3356102c65af2032982c711b32fba77ac5ff382d", "parent": "https://github.com/apache/pdfbox/commit/8355db7b782a03a4fe8963fbfb8710492b0b929d", "message": "PDFBOX-2852: avoid NPE possibility\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1783127 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_64", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/3356102c65af2032982c711b32fba77ac5ff382d/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java", "blob_url": "https://github.com/apache/pdfbox/blob/3356102c65af2032982c711b32fba77ac5ff382d/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java", "sha": "08f2847a3a28c62725a0b5160a03b88c8e1bf0a6", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java?ref=3356102c65af2032982c711b32fba77ac5ff382d", "patch": "@@ -517,7 +517,7 @@ public float getSpaceWidth()\n             COSBase toUnicode = dict.getDictionaryObject(COSName.TO_UNICODE);\n             try\n             {\n-                if (toUnicode != null)\n+                if (toUnicode != null && toUnicodeCMap != null)\n                 {\n                     int spaceMapping = toUnicodeCMap.getSpaceMapping();\n                     if (spaceMapping > -1)", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/22276554b0c981e33e1dad63454df67274fc185e", "parent": "https://github.com/apache/pdfbox/commit/fb6a18392f3aebb5d12df5a4f4551267e590ddbd", "message": "PDFBOX-3677: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1782033 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_65", "file": [{"additions": 2, "raw_url": "https://github.com/apache/pdfbox/raw/22276554b0c981e33e1dad63454df67274fc185e/fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java", "blob_url": "https://github.com/apache/pdfbox/blob/22276554b0c981e33e1dad63454df67274fc185e/fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java", "sha": "e8ef2424f5e7bf0b25e5ef3d435e3329be3dfd59", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java?ref=22276554b0c981e33e1dad63454df67274fc185e", "patch": "@@ -758,7 +758,7 @@ else if (token.getText().equals(\"noaccess\"))\n     private Token read(Token.Kind kind) throws IOException\n     {\n         Token token = lexer.nextToken();\n-        if (token.getKind() != kind)\n+        if (token == null || token.getKind() != kind)\n         {\n             throw new IOException(\"Found \" + token + \" but expected \" + kind);\n         }\n@@ -772,7 +772,7 @@ private Token read(Token.Kind kind) throws IOException\n     private void read(Token.Kind kind, String name) throws IOException\n     {\n         Token token = read(kind);\n-        if (!token.getText().equals(name))\n+        if (token == null || !token.getText().equals(name))\n         {\n             throw new IOException(\"Found \" + token + \" but expected \" + name);\n         }", "filename": "fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/be5964793daaf560370212bcc713f4b8cab46d25", "parent": "https://github.com/apache/pdfbox/commit/047579e94208ef3a7d3bbe90e9765b59283c7203", "message": "PDFBOX-3663: avoid NPE if /AcroForm exists without /Fields\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1780413 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_66", "file": [{"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/be5964793daaf560370212bcc713f4b8cab46d25/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java", "blob_url": "https://github.com/apache/pdfbox/blob/be5964793daaf560370212bcc713f4b8cab46d25/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java", "sha": "9ade531107353a6019eabb3b30578ed85ab51c6d", "changes": 9, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java?ref=be5964793daaf560370212bcc713f4b8cab46d25", "patch": "@@ -283,18 +283,17 @@ public void addSignature(PDSignature sigObject, SignatureInterface signatureInte\n             acroForm.getCOSObject().setNeedToBeUpdated(true);\n         }\n \n-        List<PDField> fields = acroForm.getFields();\n-        if (fields == null)\n+        PDSignatureField signatureField = null;\n+        if (!(acroForm.getCOSObject().getDictionaryObject(COSName.FIELDS) instanceof COSArray))\n         {\n-            fields = new ArrayList<PDField>();\n-            acroForm.setFields(fields);\n+            acroForm.getCOSObject().setItem(COSName.FIELDS, new COSArray());\n         }\n         else\n         {\n             COSArray fieldArray = (COSArray) acroForm.getCOSObject().getDictionaryObject(COSName.FIELDS);\n             fieldArray.setNeedToBeUpdated(true);\n+            signatureField = findSignatureField(acroForm.getFields(), sigObject);\n         }\n-        PDSignatureField signatureField = findSignatureField(fields, sigObject);\n         if (signatureField == null)\n         {\n             signatureField = new PDSignatureField(acroForm);", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/2107fd6e66db4fce9f08c8d4fec65b99d5db66c7", "parent": "https://github.com/apache/pdfbox/commit/042c3ee671b6f0f292efa37d2f893b0129b5e070", "message": "PDFBOX-2941: avoid NPE when clicking when no file is open\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1780094 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_67", "file": [{"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/2107fd6e66db4fce9f08c8d4fec65b99d5db66c7/debugger/src/main/java/org/apache/pdfbox/debugger/ui/Tree.java", "blob_url": "https://github.com/apache/pdfbox/blob/2107fd6e66db4fce9f08c8d4fec65b99d5db66c7/debugger/src/main/java/org/apache/pdfbox/debugger/ui/Tree.java", "sha": "643309044b3ee2ff914edd67a415804cacd8bb70", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/debugger/src/main/java/org/apache/pdfbox/debugger/ui/Tree.java?ref=2107fd6e66db4fce9f08c8d4fec65b99d5db66c7", "patch": "@@ -76,6 +76,10 @@ public Point getPopupLocation(MouseEvent event)\n         if (event != null)\n         {\n             TreePath path = getClosestPathForLocation(event.getX(), event.getY());\n+            if (path == null)\n+            {\n+                return null;\n+            }\n             setSelectionPath(path);\n             treePopupMenu.removeAll();\n             addPopupMenuItems(path);", "filename": "debugger/src/main/java/org/apache/pdfbox/debugger/ui/Tree.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/5bccbde5265baf7f076c4c49e5e4d332aabac2b1", "parent": "https://github.com/apache/pdfbox/commit/fc90a948f4cafd4c12f56ffc0f15850f748bff0b", "message": "PDFBOX-2852: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1773911 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_68", "file": [{"additions": 5, "raw_url": "https://github.com/apache/pdfbox/raw/5bccbde5265baf7f076c4c49e5e4d332aabac2b1/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java", "blob_url": "https://github.com/apache/pdfbox/blob/5bccbde5265baf7f076c4c49e5e4d332aabac2b1/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java", "sha": "cb0d64d6bea219c9032aca1199bbaeaa986763a1", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java?ref=5bccbde5265baf7f076c4c49e5e4d332aabac2b1", "patch": "@@ -858,6 +858,11 @@ private BufferedImage applyTransferFunction(BufferedImage image, COSBase transfe\n     public void shadingFill(COSName shadingName) throws IOException\r\n     {\r\n         PDShading shading = getResources().getShading(shadingName);\r\n+        if (shading == null)\r\n+        {\r\n+            LOG.error(\"shading \" + shadingName + \" does not exist in resources dictionary\");\r\n+            return;\r\n+        }\r\n         Matrix ctm = getGraphicsState().getCurrentTransformationMatrix();\r\n         Paint paint = shading.toPaint(ctm);\r\n \r", "filename": "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/0ed99795067d0074461e8016fd83b46aa3255bd5", "parent": "https://github.com/apache/pdfbox/commit/81fd30228780efc975bbfd2c61e4f8da920504f0", "message": "PDFBOX-3000: avoid NPE if softmask /G entry missing\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1764153 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_69", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/0ed99795067d0074461e8016fd83b46aa3255bd5/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java", "blob_url": "https://github.com/apache/pdfbox/blob/0ed99795067d0074461e8016fd83b46aa3255bd5/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java", "sha": "a2233fcd79b4e4fe65421852998c1ac184bc5694", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java?ref=0ed99795067d0074461e8016fd83b46aa3255bd5", "patch": "@@ -421,7 +421,7 @@ public void appendRectangle(Point2D p0, Point2D p1, Point2D p2, Point2D p3)\n     //TODO: move soft mask apply to getPaint()?\r\n     private Paint applySoftMaskToPaint(Paint parentPaint, PDSoftMask softMask) throws IOException\r\n     {\r\n-        if (softMask == null)\r\n+        if (softMask == null || softMask.getGroup() == null)\r\n         {\r\n             return parentPaint;\r\n         }\r", "filename": "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/72ee8d4c624261f8d8404ecace9856b891c521c7", "parent": "https://github.com/apache/pdfbox/commit/4ba730a4c608f20e122dc7ea645c117da86b5423", "message": "PDFBOX-3300: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1763345 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_70", "file": [{"additions": 20, "raw_url": "https://github.com/apache/pdfbox/raw/72ee8d4c624261f8d8404ecace9856b891c521c7/fontbox/src/main/java/org/apache/fontbox/ttf/CmapSubtable.java", "blob_url": "https://github.com/apache/pdfbox/blob/72ee8d4c624261f8d8404ecace9856b891c521c7/fontbox/src/main/java/org/apache/fontbox/ttf/CmapSubtable.java", "sha": "1dba7baef7f13fb448b4b6704af454d96f28575b", "changes": 43, "status": "modified", "deletions": 23, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/ttf/CmapSubtable.java?ref=72ee8d4c624261f8d8404ecace9856b891c521c7", "patch": "@@ -611,6 +611,10 @@ public int getGlyphId(int characterCode)\n     public Integer getCharacterCode(int gid)\n     {\n         int code = getCharCode(gid);\n+        if (code == -1)\n+        {\n+            return null;\n+        }\n         // ambiguous mapping, use the first mapping\n         if (code == Integer.MIN_VALUE)\n         {\n@@ -623,21 +627,13 @@ public Integer getCharacterCode(int gid)\n         return code;\n     }\n \n-    private Integer getCharCode(int gid)\n+    private int getCharCode(int gid)\n     {\n         if (gid < 0 || gid >= glyphIdToCharacterCode.length)\n         {\n-            return null;\n-        }\n-\n-        // workaround for the fact that glyphIdToCharacterCode doesn't distinguish between\n-        // missing character codes and code 0.\n-        int code = glyphIdToCharacterCode[gid];\n-        if (code == -1)\n-        {\n-            return null;\n+            return -1;\n         }\n-        return code;\n+        return glyphIdToCharacterCode[gid];\n     }\n \n     /**\n@@ -651,23 +647,24 @@ public void createGID2UnicodeMapping(Map<Integer, Integer> gidToUni, int maxGid)\n     {\n         for (int gid = 1; gid <= maxGid; gid++)\n         {\n+            int codePoint = getCharCode(gid);\n             // skip composite glyph components that have no code point\n-            Integer codePoint = getCharCode(gid);\n-            if (codePoint != null)\n+            if (codePoint == -1)\n             {\n-                if (codePoint > 0)\n-                {\n-                    gidToUni.put(gid, codePoint); // CID = GID\n-                }\n-                else if (codePoint == Integer.MIN_VALUE)\n+                continue;\n+            }\n+            if (codePoint == Integer.MIN_VALUE)\n+            {\n+                List<Integer> mappedValues = glyphIdToCharacterCodeMultiple.get(gid);\n+                for (Integer mappedValue : mappedValues)\n                 {\n-                    List<Integer> mappedValues = glyphIdToCharacterCodeMultiple.get(gid);\n-                    for (Integer mappedValue : mappedValues)\n-                    {\n-                        gidToUni.put(gid, mappedValue); // CID = GID\n-                    }\n+                    gidToUni.put(gid, mappedValue); // CID = GID\n                 }\n             }\n+            else\n+            {\n+                gidToUni.put(gid, codePoint); // CID = GID\n+            }\n         }\n     }\n ", "filename": "fontbox/src/main/java/org/apache/fontbox/ttf/CmapSubtable.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/d8cce87f1115f69db04e4d57165252a24843c4a6", "parent": "https://github.com/apache/pdfbox/commit/c5e53f1b4527ac45b636f447a57ae5f528b67f01", "message": "PDFBOX-3332: avoid NPE if reverse mapping doesn't exist\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1760420 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_71", "file": [{"additions": 6, "raw_url": "https://github.com/apache/pdfbox/raw/d8cce87f1115f69db04e4d57165252a24843c4a6/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/encoding/Encoding.java", "blob_url": "https://github.com/apache/pdfbox/blob/d8cce87f1115f69db04e4d57165252a24843c4a6/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/encoding/Encoding.java", "sha": "d72c70b68262f0dfc502baabe8074b163022805b", "changes": 8, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/encoding/Encoding.java?ref=d8cce87f1115f69db04e4d57165252a24843c4a6", "patch": "@@ -115,9 +115,13 @@ protected void overwrite(int code, String name)\n     {\n         // remove existing reverse mapping first\n         String oldName = codeToName.get(code);\n-        if (oldName != null && code == inverted.get(oldName))\n+        if (oldName != null)\n         {\n-            inverted.remove(oldName);\n+            Integer oldCode = inverted.get(oldName);\n+            if (oldCode != null && oldCode == code)\n+            {\n+                inverted.remove(oldName);\n+            }\n         }\n         inverted.put(name, code);\n         codeToName.put(code, name);", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/encoding/Encoding.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/3eb456e79990d39d13ac4243e2b0893eb1cb1efa", "parent": "https://github.com/apache/pdfbox/commit/3f514c1f801a7d845db48877a25c382cb64eb960", "message": "PDFBOX-3490: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1760152 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_72", "file": [{"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/3eb456e79990d39d13ac4243e2b0893eb1cb1efa/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2.java", "blob_url": "https://github.com/apache/pdfbox/blob/3eb456e79990d39d13ac4243e2b0893eb1cb1efa/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2.java", "sha": "efe868b6abb8d6b0dd95ec91ac63b81ddb0c1de8", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2.java?ref=3eb456e79990d39d13ac4243e2b0893eb1cb1efa", "patch": "@@ -197,8 +197,10 @@ private BoundingBox generateBoundingBox() throws IOException\n     {\n         if (getFontDescriptor() != null) {\n             PDRectangle bbox = getFontDescriptor().getFontBoundingBox();\n-            if (bbox.getLowerLeftX() != 0 || bbox.getLowerLeftY() != 0 ||\n-                bbox.getUpperRightX() != 0 || bbox.getUpperRightY() != 0) {\n+            if (bbox != null &&\n+                    (bbox.getLowerLeftX() != 0 || bbox.getLowerLeftY() != 0\n+                    || bbox.getUpperRightX() != 0 || bbox.getUpperRightY() != 0))\n+            {\n                 return new BoundingBox(bbox.getLowerLeftX(), bbox.getLowerLeftY(),\n                                        bbox.getUpperRightX(), bbox.getUpperRightY());\n             }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2.java"}, {"additions": 5, "raw_url": "https://github.com/apache/pdfbox/raw/3eb456e79990d39d13ac4243e2b0893eb1cb1efa/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java", "blob_url": "https://github.com/apache/pdfbox/blob/3eb456e79990d39d13ac4243e2b0893eb1cb1efa/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java", "sha": "8486f1cd43777556632f668d77fb45c884438096", "changes": 7, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java?ref=3eb456e79990d39d13ac4243e2b0893eb1cb1efa", "patch": "@@ -312,8 +312,11 @@ private BoundingBox generateBoundingBox() throws IOException\n     {\n         if (getFontDescriptor() != null) {\n             PDRectangle bbox = getFontDescriptor().getFontBoundingBox();\n-            return new BoundingBox(bbox.getLowerLeftX(), bbox.getLowerLeftY(),\n-                                   bbox.getUpperRightX(), bbox.getUpperRightY());\n+            if (bbox != null)\n+            {\n+                return new BoundingBox(bbox.getLowerLeftX(), bbox.getLowerLeftY(),\n+                        bbox.getUpperRightX(), bbox.getUpperRightY());\n+            }\n         }\n         return ttf.getFontBBox();\n     }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java"}, {"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/3eb456e79990d39d13ac4243e2b0893eb1cb1efa/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1CFont.java", "blob_url": "https://github.com/apache/pdfbox/blob/3eb456e79990d39d13ac4243e2b0893eb1cb1efa/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1CFont.java", "sha": "0a03299241191990b92b94e6c8a59121a43cf4e0", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1CFont.java?ref=3eb456e79990d39d13ac4243e2b0893eb1cb1efa", "patch": "@@ -212,8 +212,10 @@ private BoundingBox generateBoundingBox() throws IOException\n     {\n         if (getFontDescriptor() != null) {\n             PDRectangle bbox = getFontDescriptor().getFontBoundingBox();\n-            if (bbox.getLowerLeftX() != 0 || bbox.getLowerLeftY() != 0 ||\n-                bbox.getUpperRightX() != 0 || bbox.getUpperRightY() != 0) {\n+            if (bbox != null\n+                    && (bbox.getLowerLeftX() != 0 || bbox.getLowerLeftY() != 0\n+                    || bbox.getUpperRightX() != 0 || bbox.getUpperRightY() != 0))\n+            {\n                 return new BoundingBox(bbox.getLowerLeftX(), bbox.getLowerLeftY(),\n                                        bbox.getUpperRightX(), bbox.getUpperRightY());\n             }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1CFont.java"}, {"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/3eb456e79990d39d13ac4243e2b0893eb1cb1efa/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1Font.java", "blob_url": "https://github.com/apache/pdfbox/blob/3eb456e79990d39d13ac4243e2b0893eb1cb1efa/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1Font.java", "sha": "104d80bb8a0e1988ce85e8bf5cf5fd91fa029c74", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1Font.java?ref=3eb456e79990d39d13ac4243e2b0893eb1cb1efa", "patch": "@@ -515,8 +515,10 @@ private BoundingBox generateBoundingBox() throws IOException\n     {\n         if (getFontDescriptor() != null) {\n             PDRectangle bbox = getFontDescriptor().getFontBoundingBox();\n-            if (bbox.getLowerLeftX() != 0 || bbox.getLowerLeftY() != 0 ||\n-                bbox.getUpperRightX() != 0 || bbox.getUpperRightY() != 0) {\n+            if (bbox != null &&\n+                    (bbox.getLowerLeftX() != 0 || bbox.getLowerLeftY() != 0 ||\n+                     bbox.getUpperRightX() != 0 || bbox.getUpperRightY() != 0))\n+            {\n                 return new BoundingBox(bbox.getLowerLeftX(), bbox.getLowerLeftY(),\n                                        bbox.getUpperRightX(), bbox.getUpperRightY());\n             }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1Font.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/fea89a2690f32b2153e4798285c5cc9e2d42b90a", "parent": "https://github.com/apache/pdfbox/commit/af909767e195601e383e819d87aea13e805ca47f", "message": "PDFBOX-3726: avoid NPE when updating the appearance and the NormalAppearance is COSNull\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1787853 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_73", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/fea89a2690f32b2153e4798285c5cc9e2d42b90a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java", "blob_url": "https://github.com/apache/pdfbox/blob/fea89a2690f32b2153e4798285c5cc9e2d42b90a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java", "sha": "96cc14dc6528ce0eeda3eae107ee442e2f5e163c", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java?ref=fea89a2690f32b2153e4798285c5cc9e2d42b90a", "patch": "@@ -134,7 +134,7 @@ public void setAppearanceValue(String apValue) throws IOException\n                 // TODO support appearances other than \"normal\"\n                 \n                 PDAppearanceStream appearanceStream;\n-                if (appearance.isStream())\n+                if (appearance != null && appearance.isStream())\n                 {\n                     appearanceStream = appearance.getAppearanceStream();\n                 }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/d4eaca1489000fe6e5e7f34ca27de89d722b2d0a", "parent": "https://github.com/apache/pdfbox/commit/b9b618c980903616342cc9fc753dab663451f986", "message": "PDFBOX-3479: avoid NPE if no rectangle in widget\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1758819 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_74", "file": [{"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/d4eaca1489000fe6e5e7f34ca27de89d722b2d0a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java", "blob_url": "https://github.com/apache/pdfbox/blob/d4eaca1489000fe6e5e7f34ca27de89d722b2d0a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java", "sha": "a8f7b7d2106f63238c18c2f6657881ea914088e6", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java?ref=d4eaca1489000fe6e5e7f34ca27de89d722b2d0a", "patch": "@@ -129,6 +129,10 @@ public void setAppearanceValue(String apValue) throws IOException\n                     appearanceStream = new PDAppearanceStream(field.getAcroForm().getDocument());\n                     \n                     PDRectangle rect = widget.getRectangle();\n+                    if (rect == null)\n+                    {\n+                        throw new IOException(\"widget of field \" + field.getFullyQualifiedName() + \" has no rectangle\");\n+                    }\n                     \n                     // Calculate the entries for the bounding box and the transformation matrix\n                     // settings for the appearance stream", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/c81e391978704b2bb51a2016694e2c3c7bf906b2", "parent": "https://github.com/apache/pdfbox/commit/0aee7b36aeb6ccc88874a6a0599e67fd3b5bdf67", "message": "PDFBOX-3472: avoid NPE as proposed by Petras; improve javadoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1757412 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_75", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/c81e391978704b2bb51a2016694e2c3c7bf906b2/preflight/src/main/java/org/apache/pdfbox/preflight/metadata/PDFAIdentificationValidation.java", "blob_url": "https://github.com/apache/pdfbox/blob/c81e391978704b2bb51a2016694e2c3c7bf906b2/preflight/src/main/java/org/apache/pdfbox/preflight/metadata/PDFAIdentificationValidation.java", "sha": "1d4fbe99b2ccbb04e4e00f125934897e48332b68", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/preflight/src/main/java/org/apache/pdfbox/preflight/metadata/PDFAIdentificationValidation.java?ref=c81e391978704b2bb51a2016694e2c3c7bf906b2", "patch": "@@ -82,7 +82,7 @@\n             }\n         }\n         checkConformanceLevel(ve, id.getConformance());\n-        checkPartNumber(ve, id.getPart());\n+        checkPartNumber(ve, id.getPart() == null ?  -1 : id.getPart());\n         return ve;\n     }\n ", "filename": "preflight/src/main/java/org/apache/pdfbox/preflight/metadata/PDFAIdentificationValidation.java"}, {"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/c81e391978704b2bb51a2016694e2c3c7bf906b2/xmpbox/src/main/java/org/apache/xmpbox/schema/PDFAIdentificationSchema.java", "blob_url": "https://github.com/apache/pdfbox/blob/c81e391978704b2bb51a2016694e2c3c7bf906b2/xmpbox/src/main/java/org/apache/xmpbox/schema/PDFAIdentificationSchema.java", "sha": "8a50676dea56197d5b52a603fc69bb773823413b", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/xmpbox/src/main/java/org/apache/xmpbox/schema/PDFAIdentificationSchema.java?ref=c81e391978704b2bb51a2016694e2c3c7bf906b2", "patch": "@@ -190,7 +190,7 @@ public void setConformanceProperty(TextType conf) throws BadFieldValueException\n     /**\n      * Give the PDFAVersionId (as an integer)\n      * \n-     * @return Part value (Integer)\n+     * @return Part value (Integer) or null if it is missing\n      */\n     public Integer getPart()\n     {", "filename": "xmpbox/src/main/java/org/apache/xmpbox/schema/PDFAIdentificationSchema.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/aac460ca0be00c4562e8864aa42aa25bda8bd529", "parent": "https://github.com/apache/pdfbox/commit/392edabe141f43d2f90c570fc6e1e62fd81e7039", "message": "PDFBOX-2854: avoid NPE for missing post table\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1750728 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_76", "file": [{"additions": 6, "raw_url": "https://github.com/apache/pdfbox/raw/aac460ca0be00c4562e8864aa42aa25bda8bd529/fontbox/src/main/java/org/apache/fontbox/ttf/TrueTypeFont.java", "blob_url": "https://github.com/apache/pdfbox/blob/aac460ca0be00c4562e8864aa42aa25bda8bd529/fontbox/src/main/java/org/apache/fontbox/ttf/TrueTypeFont.java", "sha": "f8cc39668128e9bf9b02b6571ffbc96b66711bfb", "changes": 9, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/ttf/TrueTypeFont.java?ref=aac460ca0be00c4562e8864aa42aa25bda8bd529", "patch": "@@ -577,10 +577,13 @@ public int nameToGID(String name) throws IOException\n     {\n         // look up in 'post' table\n         readPostScriptNames();\n-        Integer gid = postScriptNames.get(name);\n-        if (gid != null && gid > 0 && gid < getMaximumProfile().getNumGlyphs())\n+        if (postScriptNames != null)\n         {\n-            return gid;\n+            Integer gid = postScriptNames.get(name);\n+            if (gid != null && gid > 0 && gid < getMaximumProfile().getNumGlyphs())\n+            {\n+                return gid;\n+            }\n         }\n \n         // look up in 'cmap'", "filename": "fontbox/src/main/java/org/apache/fontbox/ttf/TrueTypeFont.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/ef3f2aeb6e9c4d48856b4827626631ed2395895d", "parent": "https://github.com/apache/pdfbox/commit/d5e52d4a71c9654c765bdd2c4d4769f11de23fc5", "message": "PDFBOX-3000: Add code from Harald Kuhr to create gray transparency group image with alpha channel to avoid NPE with alpha softmasks\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1780419 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_77", "file": [{"additions": 38, "raw_url": "https://github.com/apache/pdfbox/raw/ef3f2aeb6e9c4d48856b4827626631ed2395895d/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java", "blob_url": "https://github.com/apache/pdfbox/blob/ef3f2aeb6e9c4d48856b4827626631ed2395895d/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java", "sha": "b5ae02c187fffe8e51e6d4986daa8f0b67fe5ae3", "changes": 39, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java?ref=ef3f2aeb6e9c4d48856b4827626631ed2395895d", "patch": "@@ -22,17 +22,25 @@\n import java.awt.Graphics2D;\r\n import java.awt.GraphicsDevice;\r\n import java.awt.Paint;\r\n+import java.awt.Point;\r\n import java.awt.RenderingHints;\r\n import java.awt.Shape;\r\n import java.awt.Stroke;\r\n import java.awt.TexturePaint;\r\n+import java.awt.Transparency;\r\n+import java.awt.color.ColorSpace;\r\n import java.awt.geom.AffineTransform;\r\n import java.awt.geom.Area;\r\n import java.awt.geom.GeneralPath;\r\n import java.awt.geom.PathIterator;\r\n import java.awt.geom.Point2D;\r\n import java.awt.geom.Rectangle2D;\r\n import java.awt.image.BufferedImage;\r\n+import java.awt.image.ColorModel;\r\n+import java.awt.image.ComponentColorModel;\r\n+import java.awt.image.DataBuffer;\r\n+import java.awt.image.DataBufferByte;\r\n+import java.awt.image.Raster;\r\n import java.awt.image.WritableRaster;\r\n import java.io.IOException;\r\n import java.util.HashMap;\r\n@@ -1377,7 +1385,7 @@ private TransparencyGroup(PDTransparencyGroup form, boolean isSoftMask, Matrix c\n             // FIXME - color space\r\n             if (form.getGroup().getColorSpace() instanceof PDDeviceGray)\r\n             {\r\n-                image = new BufferedImage(width, height, BufferedImage.TYPE_BYTE_GRAY);\r\n+                image = create2ByteGrayAlphaImage(width, height);\r\n             }\r\n             else\r\n             {\r\n@@ -1448,6 +1456,35 @@ private TransparencyGroup(PDTransparencyGroup form, boolean isSoftMask, Matrix c\n             }\r\n         }\r\n \r\n+        // http://stackoverflow.com/a/21181943/535646\r\n+        private BufferedImage create2ByteGrayAlphaImage(int width, int height) \r\n+        {\r\n+            /**\r\n+             * gray + alpha\r\n+             */\r\n+            int[] bandOffsets = new int[] {1, 0};\r\n+            int bands = bandOffsets.length;\r\n+            \r\n+            /**\r\n+             * Color Model usesd for raw GRAY + ALPHA\r\n+             */\r\n+            final ColorModel CM_GRAY_ALPHA\r\n+                = new ComponentColorModel(\r\n+                        ColorSpace.getInstance(ColorSpace.CS_GRAY),\r\n+                        true, false, Transparency.TRANSLUCENT, DataBuffer.TYPE_BYTE);\r\n+\r\n+            // Init data buffer of type byte\r\n+            DataBuffer buffer = new DataBufferByte(width * height * bands);\r\n+\r\n+            // Wrap the data buffer in a raster\r\n+            WritableRaster raster =\r\n+                    Raster.createInterleavedRaster(buffer, width, height,\r\n+                            width * bands, bands, bandOffsets, new Point(0, 0));\r\n+\r\n+            // Create a custom BufferedImage with the raster and a suitable color model\r\n+            return new BufferedImage(CM_GRAY_ALPHA, raster, false, null);\r\n+        }\r\n+        \r\n         public BufferedImage getImage()\r\n         {\r\n             return image;\r", "filename": "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/6739eba46374f18db09ed413275f94742f79abb6", "parent": "https://github.com/apache/pdfbox/commit/dfc53aed5bd112807be1054c3afd4f5ce0620c43", "message": "PDFBOX-3348: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1743407 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_78", "file": [{"additions": 7, "raw_url": "https://github.com/apache/pdfbox/raw/6739eba46374f18db09ed413275f94742f79abb6/fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java", "blob_url": "https://github.com/apache/pdfbox/blob/6739eba46374f18db09ed413275f94742f79abb6/fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java", "sha": "504f3e17798f965934ff8bed9780b3d94d061b9e", "changes": 8, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java?ref=6739eba46374f18db09ed413275f94742f79abb6", "patch": "@@ -462,9 +462,15 @@ private void parseBinary(byte[] bytes) throws IOException\n         lexer = new Type1Lexer(decrypted);\n \n         // find /Private dict\n-        while (!lexer.peekToken().getText().equals(\"Private\"))\n+        Token peekToken = lexer.peekToken();\n+        while (peekToken != null && !peekToken.getText().equals(\"Private\"))\n         {\n             lexer.nextToken();\n+            peekToken = lexer.peekToken();\n+        }\n+        if (peekToken == null)\n+        {\n+            throw new IOException(\"/Private token not found\");\n         }\n \n         // Private dict", "filename": "fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/8fd5a17ab537e8302ac576018a28f4f04b2a0ad0", "parent": "https://github.com/apache/pdfbox/commit/e7bdcf6292250c96223b0a7636248de9a630ace9", "message": "PDFBOX-3312: avoid NPE if document wasn't loaded / fix javadoc \n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1738359 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_79", "file": [{"additions": 8, "raw_url": "https://github.com/apache/pdfbox/raw/8fd5a17ab537e8302ac576018a28f4f04b2a0ad0/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java", "blob_url": "https://github.com/apache/pdfbox/blob/8fd5a17ab537e8302ac576018a28f4f04b2a0ad0/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java", "sha": "3cfd8dc5ad0f0024d0390e5e1e8045f3dfb01b15", "changes": 11, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java?ref=8fd5a17ab537e8302ac576018a28f4f04b2a0ad0", "patch": "@@ -1107,18 +1107,23 @@ public void save(OutputStream output) throws IOException\n         }\n     }\n \n-   /**\n-     * Save the PDF as an incremental update. This is only possible if the PDF was loaded from a file.\n+    /**\n+     * Save the PDF as an incremental update. This is only possible if the PDF was loaded from a\n+     * file or a stream, not if the document was created in PDFBox itself.\n      *\n      * @param output stream to write\n      * @throws IOException if the output could not be written\n-     * @throws IllegalStateException if the document was not loaded from a file.\n+     * @throws IllegalStateException if the document was not loaded from a file or a stream.\n      */\n     public void saveIncremental(OutputStream output) throws IOException\n     {\n         COSWriter writer = null;\n         try\n         {\n+            if (pdfSource == null)\n+            {\n+                throw new IllegalStateException(\"document was not loaded from a file or a stream\");\n+            }\n             writer = new COSWriter(output, pdfSource);\n             writer.write(this, signInterface);\n             writer.close();", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/6559582fa2b29a8b56a7fbaa01b98e89941dbcc7", "parent": "https://github.com/apache/pdfbox/commit/1231fae4f014a7618488f1c3bfba5c0b1c6d6797", "message": "PDFBOX-2852: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1733495 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_80", "file": [{"additions": 5, "raw_url": "https://github.com/apache/pdfbox/raw/6559582fa2b29a8b56a7fbaa01b98e89941dbcc7/xmpbox/src/main/java/org/apache/xmpbox/type/DateType.java", "blob_url": "https://github.com/apache/pdfbox/blob/6559582fa2b29a8b56a7fbaa01b98e89941dbcc7/xmpbox/src/main/java/org/apache/xmpbox/type/DateType.java", "sha": "0ad9ee70689ab2a43a4d776da57ed3bd524fac71", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/xmpbox/src/main/java/org/apache/xmpbox/type/DateType.java?ref=6559582fa2b29a8b56a7fbaa01b98e89941dbcc7", "patch": "@@ -117,6 +117,11 @@ public void setValue(Object value)\n     {\n         if (!isGoodType(value))\n         {\n+            if (value == null)\n+            {\n+                throw new IllegalArgumentException(\n+                        \"Value null is not allowed for the Date type\");\n+            }\n             throw new IllegalArgumentException(\n                     \"Value given is not allowed for the Date type: \" \n                             + value.getClass() + \", value: \" + value);", "filename": "xmpbox/src/main/java/org/apache/xmpbox/type/DateType.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/f32b0272d66306b75bf3b749bbda4217c4fc1e56", "parent": "https://github.com/apache/pdfbox/commit/cc2000c867b8373f120a549ab11108bf46d9b15e", "message": "PDFBOX-3572: avoid NPE due to BC sometimes returning null instead of an empty array\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1769864 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_81", "file": [{"additions": 5, "raw_url": "https://github.com/apache/pdfbox/raw/f32b0272d66306b75bf3b749bbda4217c4fc1e56/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java", "blob_url": "https://github.com/apache/pdfbox/blob/f32b0272d66306b75bf3b749bbda4217c4fc1e56/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java", "sha": "d9feaf93d2a923cc1ff50523f2548ac6a6ebfe8e", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java?ref=f32b0272d66306b75bf3b749bbda4217c4fc1e56", "patch": "@@ -267,7 +267,11 @@ private void encryptDataAESother(byte[] finalKey, InputStream data, OutputStream\n             int n;\n             while ((n = data.read(buffer)) != -1)\n             {\n-                output.write(decryptCipher.update(buffer, 0, n));\n+                byte[] dst = decryptCipher.update(buffer, 0, n);\n+                if (dst != null)\n+                {\n+                    output.write(dst);\n+                }\n             }\n             output.write(decryptCipher.doFinal());\n         }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/56b819647ee120503fc2878d3468ee9f35272d1f", "parent": "https://github.com/apache/pdfbox/commit/6931869d1fcc56beb0ba88cbb53caab2438500ab", "message": "PDFBOX-2852, PDFBOX-3547: avoid NPE in getField if supplied name is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1768224 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_82", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/56b819647ee120503fc2878d3468ee9f35272d1f/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java", "blob_url": "https://github.com/apache/pdfbox/blob/56b819647ee120503fc2878d3468ee9f35272d1f/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java", "sha": "285e1b3b50c961dda277de53ac4071693f737143", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java?ref=56b819647ee120503fc2878d3468ee9f35272d1f", "patch": "@@ -453,7 +453,7 @@ public PDField getField(String fullyQualifiedName)\n         // get the field from the field tree\n         for (PDField field : getFieldTree())\n         {\n-            if (field.getFullyQualifiedName().compareTo(fullyQualifiedName) == 0)\n+            if (field.getFullyQualifiedName().equals(fullyQualifiedName))\n             {\n                 return field;\n             }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/e7aac85ef1605099aa2ea6cfd69ea722900216e4", "parent": "https://github.com/apache/pdfbox/commit/de6a1a2b6c53a90231d437c9719d1fa816a90e0b", "message": "PDFBOX-3217: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1727208 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_83", "file": [{"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/e7aac85ef1605099aa2ea6cfd69ea722900216e4/xmpbox/src/main/java/org/apache/xmpbox/xml/PdfaExtensionHelper.java", "blob_url": "https://github.com/apache/pdfbox/blob/e7aac85ef1605099aa2ea6cfd69ea722900216e4/xmpbox/src/main/java/org/apache/xmpbox/xml/PdfaExtensionHelper.java", "sha": "b7f6990daf12251570bc94da555594e39d9b348b", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/xmpbox/src/main/java/org/apache/xmpbox/xml/PdfaExtensionHelper.java?ref=e7aac85ef1605099aa2ea6cfd69ea722900216e4", "patch": "@@ -177,6 +177,10 @@ private static void populatePDFAPropertyType(PDFAPropertyType property, TypeMapp\n         }\n         // check ptype existance\n         PropertyType pt = transformValueType(tm, ptype);\n+        if (pt == null)\n+        {\n+            throw new XmpParsingException(ErrorType.NoValueType, \"Unknown property value type : \" + ptype);\n+        }\n         if (pt.type() == null)\n         {\n             throw new XmpParsingException(ErrorType.NoValueType, \"Type not defined : \" + ptype);", "filename": "xmpbox/src/main/java/org/apache/xmpbox/xml/PdfaExtensionHelper.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/aa11cea457ad35a40da4ab7622ea4776d41795fc", "parent": "https://github.com/apache/pdfbox/commit/51c71c2a96f91d009b8118fbca82fc033a86cbc0", "message": "PDFBOX-3534: avoid NPE if AcroForm field's child cosdict is null, as suggested by Tim Allison\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1765853 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_84", "file": [{"additions": 7, "raw_url": "https://github.com/apache/pdfbox/raw/aa11cea457ad35a40da4ab7622ea4776d41795fc/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDNonTerminalField.java", "blob_url": "https://github.com/apache/pdfbox/blob/aa11cea457ad35a40da4ab7622ea4776d41795fc/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDNonTerminalField.java", "sha": "680d8ac7fc67a5e8069294e4ad2c4e2be31ad85c", "changes": 10, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDNonTerminalField.java?ref=aa11cea457ad35a40da4ab7622ea4776d41795fc", "patch": "@@ -135,10 +135,14 @@ FDFField exportFDF() throws IOException\n         COSArray kids = (COSArray)getCOSObject().getDictionaryObject(COSName.KIDS);\n         for (int i = 0; i < kids.size(); i++)\n         {\n-            PDField field = PDField.fromDictionary(getAcroForm(), (COSDictionary)kids.getObject(i), this);\n-            if (field != null)\n+            COSDictionary cosDict = (COSDictionary)kids.getObject(i);\n+            if (cosDict != null)\n             {\n-                children.add(field);\n+                PDField field = PDField.fromDictionary(getAcroForm(), cosDict, this);\n+                if (field != null)\n+                {\n+                    children.add(field);\n+                }\n             }\n         }\n         return children;", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDNonTerminalField.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/e3c8b09cdae84e8dd7d5e8f5504a0e8bece919ad", "parent": "https://github.com/apache/pdfbox/commit/1d9155376cc2805aae8331f939dd7784b17eee41", "message": "PDFBOX-3187: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1724102 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_85", "file": [{"additions": 10, "raw_url": "https://github.com/apache/pdfbox/raw/e3c8b09cdae84e8dd7d5e8f5504a0e8bece919ad/fontbox/src/main/java/org/apache/fontbox/cff/CFFCharset.java", "blob_url": "https://github.com/apache/pdfbox/blob/e3c8b09cdae84e8dd7d5e8f5504a0e8bece919ad/fontbox/src/main/java/org/apache/fontbox/cff/CFFCharset.java", "sha": "217bfeb4b3c7883adf0dec01bf72a1dde1c0e35d", "changes": 10, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/cff/CFFCharset.java?ref=e3c8b09cdae84e8dd7d5e8f5504a0e8bece919ad", "patch": "@@ -47,6 +47,16 @@\n         this.isCIDFont = isCIDFont;\n     }\n \n+    /**\n+     * Indicates if the charset belongs to a CID font.\n+     * \n+     * @return true for CID fonts\n+     */\n+    public boolean isCIDFont()\n+    {\n+        return isCIDFont;\n+    }\n+    \n     /**\n      * Adds a new GID/SID/name combination to the charset.\n      *", "filename": "fontbox/src/main/java/org/apache/fontbox/cff/CFFCharset.java"}, {"additions": 12, "raw_url": "https://github.com/apache/pdfbox/raw/e3c8b09cdae84e8dd7d5e8f5504a0e8bece919ad/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java", "blob_url": "https://github.com/apache/pdfbox/blob/e3c8b09cdae84e8dd7d5e8f5504a0e8bece919ad/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java", "sha": "e579e8f0ecc36f89439f08a98f8f0d27a265ac96", "changes": 18, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java?ref=e3c8b09cdae84e8dd7d5e8f5504a0e8bece919ad", "patch": "@@ -1323,11 +1323,14 @@ protected Format1Charset(boolean isCIDFont)\n         @Override\r\n         public int getCIDForGID(int gid)\r\n         {\r\n-            for (RangeMapping mapping : rangesCID2GID)\r\n+            if (isCIDFont())\r\n             {\r\n-                if (mapping.isInRange(gid))\r\n+                for (RangeMapping mapping : rangesCID2GID)\r\n                 {\r\n-                    return mapping.mapValue(gid);\r\n+                    if (mapping.isInRange(gid))\r\n+                    {\r\n+                        return mapping.mapValue(gid);\r\n+                    }\r\n                 }\r\n             }\r\n             return super.getCIDForGID(gid);\r\n@@ -1336,11 +1339,14 @@ public int getCIDForGID(int gid)\n         @Override\r\n         public int getGIDForCID(int cid)\r\n         {\r\n-            for (RangeMapping mapping : rangesCID2GID)\r\n+            if (isCIDFont())\r\n             {\r\n-                if (mapping.isInReverseRange(cid))\r\n+                for (RangeMapping mapping : rangesCID2GID)\r\n                 {\r\n-                    return mapping.mapReverseValue(cid);\r\n+                    if (mapping.isInReverseRange(cid))\r\n+                    {\r\n+                        return mapping.mapReverseValue(cid);\r\n+                    }\r\n                 }\r\n             }\r\n             return super.getGIDForCID(cid);\r", "filename": "fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/f70d5641db2abceca97c9b0b6158d7a3f3e30533", "parent": "https://github.com/apache/pdfbox/commit/478b84fb55c258af81b2f6d3c15f9549d4035cec", "message": "PDFBOX-962: avoid NPE; setNeedAppearances\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1723925 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_86", "file": [{"additions": 7, "raw_url": "https://github.com/apache/pdfbox/raw/f70d5641db2abceca97c9b0b6158d7a3f3e30533/tools/src/main/java/org/apache/pdfbox/tools/ImportFDF.java", "blob_url": "https://github.com/apache/pdfbox/blob/f70d5641db2abceca97c9b0b6158d7a3f3e30533/tools/src/main/java/org/apache/pdfbox/tools/ImportFDF.java", "sha": "25ad367da72a65e9096cdf94773314117430eb8f", "changes": 7, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/tools/src/main/java/org/apache/pdfbox/tools/ImportFDF.java?ref=f70d5641db2abceca97c9b0b6158d7a3f3e30533", "patch": "@@ -52,8 +52,15 @@ public void importFDF( PDDocument pdfDocument, FDFDocument fdfDocument ) throws\n     {\n         PDDocumentCatalog docCatalog = pdfDocument.getDocumentCatalog();\n         PDAcroForm acroForm = docCatalog.getAcroForm();\n+        if (acroForm == null)\n+        {\n+            return;\n+        }\n         acroForm.setCacheFields( true );\n         acroForm.importFDF( fdfDocument );\n+        \n+        //TODO this can be removed when we create appearance streams\n+        acroForm.setNeedAppearances(true);\n     }\n \n     /**", "filename": "tools/src/main/java/org/apache/pdfbox/tools/ImportFDF.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/e6470feaf5eafb9de9981cf3a0529a1adb8eea00", "parent": "https://github.com/apache/pdfbox/commit/a51120cb1ec47de5bceb5b962bb4d536bf215cc2", "message": "PDFBOX-3131: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1721419 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_87", "file": [{"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/e6470feaf5eafb9de9981cf3a0529a1adb8eea00/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java", "blob_url": "https://github.com/apache/pdfbox/blob/e6470feaf5eafb9de9981cf3a0529a1adb8eea00/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java", "sha": "5dcdfc1c98c76d6f62d7b4aa0f037e79573c2a65", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java?ref=e6470feaf5eafb9de9981cf3a0529a1adb8eea00", "patch": "@@ -1075,7 +1075,6 @@ private Format2Charset readFormat2Charset(CFFDataInput dataInput, int format, in\n         {\r\n             int first = dataInput.readSID();\r\n             int nLeft = dataInput.readCard16();\r\n-            charset.rangesCID2GID.add(new Format2Charset.Range(gid, first, nLeft));\r\n             if (!isCIDFont)\r\n             {\r\n                 for (int j = 0; j < 1 + nLeft; j++)\r\n@@ -1084,6 +1083,10 @@ private Format2Charset readFormat2Charset(CFFDataInput dataInput, int format, in\n                     charset.addSID(gid + j, sid, readString(sid));\r\n                 }\r\n             }\r\n+            else\r\n+            {\r\n+                charset.rangesCID2GID.add(new Format2Charset.Range(gid, first, nLeft));\r\n+            }\r\n             gid += nLeft;\r\n         }\r\n         return charset;\r", "filename": "fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/79eb804b77d48d341f3a3741349e3e25d9abd1fd", "parent": "https://github.com/apache/pdfbox/commit/cc97e0223c518f5f1d8ab6c63cad7ce080477aa4", "message": "PDFBOX-3057: avoid NPE if private dict missing, throw IOException instead\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1710384 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_88", "file": [{"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/79eb804b77d48d341f3a3741349e3e25d9abd1fd/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java", "blob_url": "https://github.com/apache/pdfbox/blob/79eb804b77d48d341f3a3741349e3e25d9abd1fd/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java", "sha": "bd17417c0a5a87e359e40187b03a50bbc7cd6a7a", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java?ref=79eb804b77d48d341f3a3741349e3e25d9abd1fd", "patch": "@@ -601,6 +601,10 @@ else if (encodingId == 1)\n \r\n         // read private dict\r\n         DictData.Entry privateEntry = topDict.getEntry(\"Private\");\r\n+        if (privateEntry == null)\r\n+        {\r\n+            throw new IOException(\"Private dictionary entry missing for font \" + font.fontName);\r\n+        }\r\n         int privateOffset = privateEntry.getNumber(1).intValue();\r\n         input.setPosition(privateOffset);\r\n         int privateSize = privateEntry.getNumber(0).intValue();\r", "filename": "fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/c2e0be11cae5947a2306dfa7f6ef456351704196", "parent": "https://github.com/apache/pdfbox/commit/6e8676d7d46dfca333aba950aefb0e54605d1043", "message": "PDFBOX-2852: avoid exceptions (NPE, AOOB, CCE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1707336 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_89", "file": [{"additions": 17, "raw_url": "https://github.com/apache/pdfbox/raw/c2e0be11cae5947a2306dfa7f6ef456351704196/pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/state/SetGraphicsStateParameters.java", "blob_url": "https://github.com/apache/pdfbox/blob/c2e0be11cae5947a2306dfa7f6ef456351704196/pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/state/SetGraphicsStateParameters.java", "sha": "970a2f0b8ee61cf04206bb7982b0946a881be412", "changes": 20, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/state/SetGraphicsStateParameters.java?ref=c2e0be11cae5947a2306dfa7f6ef456351704196", "patch": "@@ -16,15 +16,15 @@\n  */\n package org.apache.pdfbox.contentstream.operator.state;\n \n+import java.io.IOException;\n import java.util.List;\n \n import org.apache.pdfbox.cos.COSBase;\n import org.apache.pdfbox.cos.COSName;\n import org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState;\n import org.apache.pdfbox.contentstream.operator.Operator;\n import org.apache.pdfbox.contentstream.operator.OperatorProcessor;\n-\n-import java.io.IOException;\n+import org.apache.pdfbox.contentstream.operator.MissingOperandException;\n \n /**\n  * gs: Set parameters from graphics state parameter dictionary.\n@@ -36,9 +36,23 @@\n     @Override\n     public void process(Operator operator, List<COSBase> arguments) throws IOException\n     {\n+        if (arguments.size() < 1)\n+        {\n+            throw new MissingOperandException(operator, arguments);\n+        }\n+        COSBase base0 = arguments.get(0);\n+        if (!(base0 instanceof COSName))\n+        {\n+            return;\n+        }\n+        \n         // set parameters from graphics state parameter dictionary\n-        COSName graphicsName = (COSName)arguments.get( 0 );\n+        COSName graphicsName = (COSName) base0;\n         PDExtendedGraphicsState gs = context.getResources().getExtGState(graphicsName);\n+        if (gs == null)\n+        {\n+            throw new IOException(\"name for 'gs' operator not found in resources: /\" + graphicsName.getName());\n+        }\n         gs.copyIntoGraphicsState( context.getGraphicsState() );\n     }\n ", "filename": "pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/state/SetGraphicsStateParameters.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/26553beed2e9135bfe181375bd8e11f69abe028c", "parent": "https://github.com/apache/pdfbox/commit/ba0a9488d2586f35c0dd685dadf128dd81fb08da", "message": "PDFBOX-2943: avoid NPE when charproc missing\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1705805 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_90", "file": [{"additions": 12, "raw_url": "https://github.com/apache/pdfbox/raw/26553beed2e9135bfe181375bd8e11f69abe028c/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3Font.java", "blob_url": "https://github.com/apache/pdfbox/blob/26553beed2e9135bfe181375bd8e11f69abe028c/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3Font.java", "sha": "9d7b8f124487b44fe699438101283d6bbb3e5339", "changes": 13, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3Font.java?ref=26553beed2e9135bfe181375bd8e11f69abe028c", "patch": "@@ -19,6 +19,8 @@\n import java.awt.geom.GeneralPath;\n import java.io.IOException;\n import java.io.InputStream;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n import org.apache.fontbox.FontBoxFont;\n import org.apache.fontbox.util.BoundingBox;\n import org.apache.pdfbox.cos.COSArray;\n@@ -40,6 +42,8 @@\n  */\n public class PDType3Font extends PDSimpleFont\n {\n+    private static final Log LOG = LogFactory.getLog(PDType3Font.class);\n+\n     private PDResources resources;\n     private COSDictionary charProcs;\n     private Matrix fontMatrix;\n@@ -127,6 +131,7 @@ public float getWidth(int code) throws IOException\n             }\n             else\n             {\n+                LOG.warn(\"No width for glyph \" + code + \" in font \" + getName() + \", using width from font\");\n                 return getWidthFromFont(code);\n             }\n         }\n@@ -135,7 +140,13 @@ public float getWidth(int code) throws IOException\n     @Override\n     public float getWidthFromFont(int code) throws IOException\n     {\n-        return getCharProc(code).getWidth();\n+        PDType3CharProc charProc = getCharProc(code);\n+        if (charProc == null)\n+        {\n+            LOG.warn(\"No CharProc for glyph \" + code + \" found, returning 0\");\n+            return 0;\n+        }\n+        return charProc.getWidth();\n     }\n \n     @Override", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3Font.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/4dc366384361b299355a463a0e53eca9d15ca175", "parent": "https://github.com/apache/pdfbox/commit/be28398651ffdf6b2843e8071cb178f923e75baf", "message": "PDFBOX-2995: avoid NPE if DA is not defined\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1705415 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_91", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/4dc366384361b299355a463a0e53eca9d15ca175/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java", "blob_url": "https://github.com/apache/pdfbox/blob/4dc366384361b299355a463a0e53eca9d15ca175/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java", "sha": "48fbbe44871df60806b6eff81e12455804d9ba07", "changes": 4, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java?ref=4dc366384361b299355a463a0e53eca9d15ca175", "patch": "@@ -29,7 +29,6 @@\n import org.apache.pdfbox.cos.COSDictionary;\n import org.apache.pdfbox.cos.COSName;\n import org.apache.pdfbox.cos.COSNumber;\n-import org.apache.pdfbox.cos.COSString;\n import org.apache.pdfbox.pdmodel.PDDocument;\n import org.apache.pdfbox.pdmodel.PDPage;\n import org.apache.pdfbox.pdmodel.PDPageContentStream;\n@@ -352,8 +351,7 @@ public PDField getField(String fullyQualifiedName)\n      */\n     public String getDefaultAppearance()\n     {\n-        COSString defaultAppearance = (COSString) dictionary.getItem(COSName.DA);\n-        return defaultAppearance.getString();\n+        return dictionary.getString(COSName.DA,\"\");\n     }\n \n     /**", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java"}, {"additions": 8, "raw_url": "https://github.com/apache/pdfbox/raw/4dc366384361b299355a463a0e53eca9d15ca175/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java", "blob_url": "https://github.com/apache/pdfbox/blob/4dc366384361b299355a463a0e53eca9d15ca175/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java", "sha": "2b4fa99018a2ba0d8464f5b0f1a55d3e490703d9", "changes": 8, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java?ref=4dc366384361b299355a463a0e53eca9d15ca175", "patch": "@@ -19,6 +19,8 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n import java.io.IOException;\n \n import org.apache.pdfbox.cos.COSName;\n@@ -67,6 +69,12 @@ public void testFieldsEntry()\n         // there shouldn't be an exception if there is no such field\n         assertNull(acroForm.getField(\"foo\"));\n     }\n+    \n+    @Test\n+    public void testAcroFormProperties()\n+    {\n+        assertTrue(acroForm.getDefaultAppearance().isEmpty());\n+    }\n \n     @After\n     public void tearDown() throws IOException", "filename": "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/f1d8001332955c9c3cc510ae6fee75cac4b70fab", "parent": "https://github.com/apache/pdfbox/commit/11d7bd39b904417f1a1fa575ef52f99137fa5a0a", "message": "PDFBOX-2941: avoid NPE if filter not installed\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1704904 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_92", "file": [{"additions": 13, "raw_url": "https://github.com/apache/pdfbox/raw/f1d8001332955c9c3cc510ae6fee75cac4b70fab/tools/src/main/java/org/apache/pdfbox/tools/pdfdebugger/streampane/StreamPane.java", "blob_url": "https://github.com/apache/pdfbox/blob/f1d8001332955c9c3cc510ae6fee75cac4b70fab/tools/src/main/java/org/apache/pdfbox/tools/pdfdebugger/streampane/StreamPane.java", "sha": "2d1421c1e34e854fac503894e27e23ac10dc2b4e", "changes": 14, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/tools/src/main/java/org/apache/pdfbox/tools/pdfdebugger/streampane/StreamPane.java?ref=f1d8001332955c9c3cc510ae6fee75cac4b70fab", "patch": "@@ -34,6 +34,7 @@\n import javax.swing.BoxLayout;\n import javax.swing.JComboBox;\n import javax.swing.JComponent;\n+import javax.swing.JOptionPane;\n import javax.swing.JPanel;\n import javax.swing.JTabbedPane;\n import javax.swing.SwingWorker;\n@@ -201,6 +202,11 @@ private void requestImageShowing() throws IOException\n             {\n                 image = stream.getImage(resources);\n             }\n+            if (image == null)\n+            {\n+                JOptionPane.showMessageDialog(panel, \"image not available (filter missing?)\");\n+                return;\n+            }\n             view.showStreamImage(image);\n \n             ByteArrayOutputStream baos = new ByteArrayOutputStream();\n@@ -217,7 +223,13 @@ private void requestStreamText(String command) throws IOException\n         new DocumentCreator(command).execute();\n         synchronized (stream)\n         {\n-            hexView.changeData(IOUtils.toByteArray(stream.getStream(command)));\n+            InputStream is = stream.getStream(command);\n+            if (is == null)\n+            {\n+                JOptionPane.showMessageDialog(panel, command + \" text not available (filter missing?)\");\n+                return;\n+            }\n+            hexView.changeData(IOUtils.toByteArray(is));\n         }\n     }\n ", "filename": "tools/src/main/java/org/apache/pdfbox/tools/pdfdebugger/streampane/StreamPane.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/a3cfeca0edd832d3b24b85a31f758f9c731dafdc", "parent": "https://github.com/apache/pdfbox/commit/8267ac941f0fac1902aebcd034b3801b9b47d240", "message": "PDFBOX-2985: avoid potential NPE, as pointed out by Petr Slaby\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1704680 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_93", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/a3cfeca0edd832d3b24b85a31f758f9c731dafdc/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/markedcontent/PDMarkedContent.java", "blob_url": "https://github.com/apache/pdfbox/blob/a3cfeca0edd832d3b24b85a31f758f9c731dafdc/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/markedcontent/PDMarkedContent.java", "sha": "98dd773e2d92ddf44eef1a2e098f636c5e4d6b73", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/markedcontent/PDMarkedContent.java?ref=a3cfeca0edd832d3b24b85a31f758f9c731dafdc", "patch": "@@ -92,7 +92,7 @@ public COSDictionary getProperties()\n     /**\n      * Gets the marked-content identifier.\n      * \n-     * @return the marked-content identifier\n+     * @return the marked-content identifier, or -1 if it doesn't exist.\n      */\n     public int getMCID()\n     {", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/markedcontent/PDMarkedContent.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/8267ac941f0fac1902aebcd034b3801b9b47d240", "parent": "https://github.com/apache/pdfbox/commit/9a52255c7f96ef648afc23caa76a04c363e25858", "message": "PDFBOX-2985: avoid potential NPE, as pointed out by Petr Slaby\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1704677 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_94", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/8267ac941f0fac1902aebcd034b3801b9b47d240/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/markedcontent/PDMarkedContent.java", "blob_url": "https://github.com/apache/pdfbox/blob/8267ac941f0fac1902aebcd034b3801b9b47d240/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/markedcontent/PDMarkedContent.java", "sha": "9b842a69dfbb640603a9675a8180d61884f9bae9", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/markedcontent/PDMarkedContent.java?ref=8267ac941f0fac1902aebcd034b3801b9b47d240", "patch": "@@ -96,7 +96,7 @@ public COSDictionary getProperties()\n      */\n     public int getMCID()\n     {\n-        return this.getProperties() == null ? null :\n+        return this.getProperties() == null ? -1 :\n             this.getProperties().getInt(COSName.MCID);\n     }\n ", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/markedcontent/PDMarkedContent.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/e8b34694cf320960375ebe28c66ad5a2b3ec9f81", "parent": "https://github.com/apache/pdfbox/commit/7196c84de4fe3639dd20a2d8a02c599242608d7c", "message": "PDFBOX-2948: prevent NPE when stream has no filter\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1698151 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_95", "file": [{"additions": 15, "raw_url": "https://github.com/apache/pdfbox/raw/e8b34694cf320960375ebe28c66ad5a2b3ec9f81/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java", "blob_url": "https://github.com/apache/pdfbox/blob/e8b34694cf320960375ebe28c66ad5a2b3ec9f81/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java", "sha": "f773de04ba049e2836fccf9af8acc354d73387ae", "changes": 27, "status": "modified", "deletions": 12, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java?ref=e8b34694cf320960375ebe28c66ad5a2b3ec9f81", "patch": "@@ -247,20 +247,23 @@ public InputStream createInputStream(List<String> stopFilters) throws IOExceptio\n         InputStream is = stream.createRawInputStream();\n         ByteArrayOutputStream os = new ByteArrayOutputStream();\n         List<COSName> filters = getFilters();\n-        for (int i = 0; i < filters.size(); i++)\n+        if (filters != null)\n         {\n-            COSName nextFilter = filters.get(i);\n-            if (stopFilters.contains(nextFilter.getName()))\n+            for (int i = 0; i < filters.size(); i++)\n             {\n-                break;\n-            }\n-            else\n-            {\n-                Filter filter = FilterFactory.INSTANCE.getFilter(nextFilter);\n-                filter.decode(is, os, stream, i);\n-                IOUtils.closeQuietly(is);\n-                is = new ByteArrayInputStream(os.toByteArray());\n-                os.reset();\n+                COSName nextFilter = filters.get(i);\n+                if ((stopFilters != null) && stopFilters.contains(nextFilter.getName()))\n+                {\n+                    break;\n+                }\n+                else\n+                {\n+                    Filter filter = FilterFactory.INSTANCE.getFilter(nextFilter);\n+                    filter.decode(is, os, stream, i);\n+                    IOUtils.closeQuietly(is);\n+                    is = new ByteArrayInputStream(os.toByteArray());\n+                    os.reset();\n+                }\n             }\n         }\n         return is;", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/eb385bf10f197123eb0979f7319df3b6aa351fbf", "parent": "https://github.com/apache/pdfbox/commit/fed8a29b81b5dda18d857c9bb99b07575c92f332", "message": "PDFBOX-2932: avoid NPE when field has no value\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1695466 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_96", "file": [{"additions": 2, "raw_url": "https://github.com/apache/pdfbox/raw/eb385bf10f197123eb0979f7319df3b6aa351fbf/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDSignatureField.java", "blob_url": "https://github.com/apache/pdfbox/blob/eb385bf10f197123eb0979f7319df3b6aa351fbf/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDSignatureField.java", "sha": "d37f6047eaf9d97056b38c236698a5687fd10845", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDSignatureField.java?ref=eb385bf10f197123eb0979f7319df3b6aa351fbf", "patch": "@@ -164,7 +164,8 @@ public PDSignature getDefaultValue()\n     @Override\n     public String getValueAsString()\n     {\n-        return getValue().toString();\n+        PDSignature signature = getValue();\n+        return signature != null ? signature.toString() : \"\";\n     }\n \n     /**", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDSignatureField.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/2efbacb4f122f0e886f3733216c71580db7f139a", "parent": "https://github.com/apache/pdfbox/commit/6db6bb4e4313ad73111ce80f3c90c93a8a584d19", "message": "PDFBOX-2530: avoid NPE risk created in previous commit\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1694827 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_97", "file": [{"additions": 7, "raw_url": "https://github.com/apache/pdfbox/raw/2efbacb4f122f0e886f3733216c71580db7f139a/tools/src/main/java/org/apache/pdfbox/tools/pdfdebugger/streampane/tooltip/ToolTipController.java", "blob_url": "https://github.com/apache/pdfbox/blob/2efbacb4f122f0e886f3733216c71580db7f139a/tools/src/main/java/org/apache/pdfbox/tools/pdfdebugger/streampane/tooltip/ToolTipController.java", "sha": "a6ff28a023cac3cc74817d99f9e95592e02d9255", "changes": 9, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/tools/src/main/java/org/apache/pdfbox/tools/pdfdebugger/streampane/tooltip/ToolTipController.java?ref=2efbacb4f122f0e886f3733216c71580db7f139a", "patch": "@@ -138,8 +138,13 @@ private String findColorSpace(int offset, String colorSpaceType)\n             while (offset != -1)\n             {\n                 offset = Utilities.getPositionAbove(textComponent, offset, 0);\n-                String previousRowText = getRowText(offset).trim();\n-                if (isColorSpace(colorSpaceType, previousRowText) && previousRowText != null)\n+                String previousRowText = getRowText(offset);\n+                if (previousRowText == null)\n+                {\n+                    return null;\n+                }\n+                previousRowText = previousRowText.trim();\n+                if (isColorSpace(colorSpaceType, previousRowText))\n                 {\n                     return previousRowText.split(\" \")[0];\n                 }", "filename": "tools/src/main/java/org/apache/pdfbox/tools/pdfdebugger/streampane/tooltip/ToolTipController.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/fc8321be44afc9ae0878304a7751bc70b93fb56a", "parent": "https://github.com/apache/pdfbox/commit/3b72a13c2a50a8b28864c554cb7dae394dc11f89", "message": "PDFBOX-2370: Avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1690216 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_98", "file": [{"additions": 3, "raw_url": "https://github.com/apache/pdfbox/raw/fc8321be44afc9ae0878304a7751bc70b93fb56a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/PDXObject.java", "blob_url": "https://github.com/apache/pdfbox/blob/fc8321be44afc9ae0878304a7751bc70b93fb56a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/PDXObject.java", "sha": "6459c5639bc5423bea0422dade69c30696599fa8", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/PDXObject.java?ref=fc8321be44afc9ae0878304a7751bc70b93fb56a", "patch": "@@ -21,6 +21,7 @@\n import org.apache.pdfbox.cos.COSStream;\n import org.apache.pdfbox.pdmodel.PDDocument;\n import org.apache.pdfbox.pdmodel.PDResources;\n+import org.apache.pdfbox.pdmodel.ResourceCache;\n import org.apache.pdfbox.pdmodel.common.COSObjectable;\n import org.apache.pdfbox.pdmodel.common.PDStream;\n import org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject;\n@@ -67,7 +68,8 @@ public static PDXObject createXObject(COSBase base, PDResources resources) throw\n         }\n         else if (COSName.FORM.getName().equals(subtype))\n         {\n-            return new PDFormXObject(new PDStream(stream), resources.getResourceCache());\n+            ResourceCache cache = resources != null ? resources.getResourceCache() : null;\n+            return new PDFormXObject(new PDStream(stream), cache);\n         }\n         else if (COSName.PS.getName().equals(subtype))\n         {", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/PDXObject.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/b903bcd8b3658b9dd89855cdaed399fd9949c8ac", "parent": "https://github.com/apache/pdfbox/commit/ad0619ff8e38b37d542cd32ce87ef4a962d19037", "message": "PDFBOX-2842: Avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1690024 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_99", "file": [{"additions": 5, "raw_url": "https://github.com/apache/pdfbox/raw/b903bcd8b3658b9dd89855cdaed399fd9949c8ac/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType0.java", "blob_url": "https://github.com/apache/pdfbox/blob/b903bcd8b3658b9dd89855cdaed399fd9949c8ac/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType0.java", "sha": "63d8b3991942a832ccbcbe0408d72bb7a2bed0b2", "changes": 7, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType0.java?ref=b903bcd8b3658b9dd89855cdaed399fd9949c8ac", "patch": "@@ -122,21 +122,24 @@ else if (bytes != null)\n             // find font or substitute\n             CIDFontMapping mapping = FontMapper.getCIDFont(getBaseFont(), getFontDescriptor(),\n                                                            getCIDSystemInfo());\n-\n+            FontBoxFont font;\n             if (mapping.isCIDFont())\n             {\n                 cidFont = (CFFCIDFont)mapping.getFont().getCFF().getFont();\n                 t1Font = null;\n+                font = cidFont;\n             }\n             else\n             {\n                 cidFont = null;\n                 t1Font = mapping.getTrueTypeFont();\n+                font = t1Font;\n             }\n \n             if (mapping.isFallback())\n             {\n-                LOG.warn(\"Using fallback \" + t1Font.getName() + \" for CID-keyed font \" + getBaseFont());\n+                LOG.warn(\"Using fallback \" + font.getName() + \" for CID-keyed font \" +\n+                         getBaseFont());\n             }\n             isEmbedded = false;\n             isDamaged = fontIsDamaged;", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType0.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/8b67152c64e6c00efc3ff14c5fbd9598f8bdf81c", "parent": "https://github.com/apache/pdfbox/commit/ce6f2e4f212f6d0360b164fbb9f58339fab9c558", "message": "PDFBOX-2530: NPE bugfix, as done by Khyrul Bashar in GSoC2015\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1689048 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_100", "file": [{"additions": 8, "raw_url": "https://github.com/apache/pdfbox/raw/8b67152c64e6c00efc3ff14c5fbd9598f8bdf81c/tools/src/main/java/org/apache/pdfbox/tools/pdfdebugger/flagbitspane/FieldFlag.java", "blob_url": "https://github.com/apache/pdfbox/blob/8b67152c64e6c00efc3ff14c5fbd9598f8bdf81c/tools/src/main/java/org/apache/pdfbox/tools/pdfdebugger/flagbitspane/FieldFlag.java", "sha": "9386d5229a1768be4485a0ce5c1e5d0c016e3fbb", "changes": 14, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/tools/src/main/java/org/apache/pdfbox/tools/pdfdebugger/flagbitspane/FieldFlag.java?ref=8b67152c64e6c00efc3ff14c5fbd9598f8bdf81c", "patch": "@@ -40,15 +40,16 @@\n     @Override\n     String getFlagType()\n     {\n-        if (dictionary.getCOSName(COSName.FT).equals(COSName.TX))\n+        COSName fieldType = dictionary.getCOSName(COSName.FT);\n+        if (COSName.TX.equals(fieldType))\n         {\n             return \"Text field flag\";\n         }\n-        else if (dictionary.getCOSName(COSName.FT).equals(COSName.BTN))\n+        else if (COSName.BTN.equals(fieldType))\n         {\n             return \"Button field flag\";\n         }\n-        else if (dictionary.getCOSName(COSName.FT).equals(COSName.CH))\n+        else if (COSName.CH.equals(fieldType))\n         {\n             return \"Choice field flag\";\n         }\n@@ -65,16 +66,17 @@ String getFlagValue()\n     Object[][] getFlagBits()\n     {\n         int flagValue = dictionary.getInt(COSName.FF);\n+        COSName fieldType = dictionary.getCOSName(COSName.FT);\n \n-        if (dictionary.getCOSName(COSName.FT).equals(COSName.TX))\n+        if (COSName.TX.equals(fieldType))\n         {\n             return getTextFieldFlagBits(flagValue);\n         }\n-        else if (dictionary.getCOSName(COSName.FT).equals(COSName.BTN))\n+        else if (COSName.BTN.equals(fieldType))\n         {\n             return getButtonFieldFlagBits(flagValue);\n         }\n-        else if (dictionary.getCOSName(COSName.FT).equals(COSName.CH))\n+        else if (COSName.CH.equals(fieldType))\n         {\n             return getChoiceFieldFlagBits(flagValue);\n         }", "filename": "tools/src/main/java/org/apache/pdfbox/tools/pdfdebugger/flagbitspane/FieldFlag.java"}, {"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/8b67152c64e6c00efc3ff14c5fbd9598f8bdf81c/tools/src/main/java/org/apache/pdfbox/tools/pdfdebugger/flagbitspane/FlagBitsPane.java", "blob_url": "https://github.com/apache/pdfbox/blob/8b67152c64e6c00efc3ff14c5fbd9598f8bdf81c/tools/src/main/java/org/apache/pdfbox/tools/pdfdebugger/flagbitspane/FlagBitsPane.java", "sha": "f6ed3f4290aeb586fe9e6a88e291c8b25818db33", "changes": 8, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/tools/src/main/java/org/apache/pdfbox/tools/pdfdebugger/flagbitspane/FlagBitsPane.java?ref=8b67152c64e6c00efc3ff14c5fbd9598f8bdf81c", "patch": "@@ -43,28 +43,28 @@ public FlagBitsPane(final COSDictionary dictionary, COSName flagType)\n     private void createPane(final COSDictionary dictionary, final COSName flagType)\n     {\n         Flag flag;\n-        if (flagType.equals(COSName.FLAGS))\n+        if (COSName.FLAGS.equals(flagType))\n         {\n             flag = new FontFlag(dictionary);\n             view = new FlagBitsPaneView(\n                     flag.getFlagType(), flag.getFlagValue(), flag.getFlagBits(), flag.getColumnNames());\n         }\n \n-        if (flagType.equals(COSName.F))\n+        if (COSName.F.equals(flagType))\n         {\n             flag = new AnnotFlag(dictionary);\n             view = new FlagBitsPaneView(\n                     flag.getFlagType(), flag.getFlagValue(), flag.getFlagBits(), flag.getColumnNames());\n         }\n \n-        if (flagType.equals(COSName.FF))\n+        if (COSName.FF.equals(flagType))\n         {\n             flag = new FieldFlag(dictionary);\n             view = new FlagBitsPaneView(\n                     flag.getFlagType(), flag.getFlagValue(), flag.getFlagBits(), flag.getColumnNames());\n         }\n \n-        if (flagType.equals(COSName.PANOSE))\n+        if (COSName.PANOSE.equals(flagType))\n         {\n             flag = new PanoseFlag(dictionary);\n             view = new FlagBitsPaneView(", "filename": "tools/src/main/java/org/apache/pdfbox/tools/pdfdebugger/flagbitspane/FlagBitsPane.java"}, {"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/8b67152c64e6c00efc3ff14c5fbd9598f8bdf81c/tools/src/main/java/org/apache/pdfbox/tools/pdfdebugger/flagbitspane/FlagBitsPaneView.java", "blob_url": "https://github.com/apache/pdfbox/blob/8b67152c64e6c00efc3ff14c5fbd9598f8bdf81c/tools/src/main/java/org/apache/pdfbox/tools/pdfdebugger/flagbitspane/FlagBitsPaneView.java", "sha": "e516ea036caec5ba17cc7d458840ded997b57890", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/tools/src/main/java/org/apache/pdfbox/tools/pdfdebugger/flagbitspane/FlagBitsPaneView.java?ref=8b67152c64e6c00efc3ff14c5fbd9598f8bdf81c", "patch": "@@ -56,7 +56,10 @@\n         this.columnNames = columnNames;\n         panel = new JPanel();\n \n-        createView();\n+        if (flagValue != null && tableData != null)\n+        {\n+            createView();\n+        }\n     }\n \n     private void createView()", "filename": "tools/src/main/java/org/apache/pdfbox/tools/pdfdebugger/flagbitspane/FlagBitsPaneView.java"}], "repo": "pdfbox"}]
[{"commit": "https://github.com/apache/pdfbox/commit/a9a86a0193426082849aa3070ee81a701a6f0661", "parent": "https://github.com/apache/pdfbox/commit/81da3e07d9959dd11c21a4c3a33a9acee098dbb2", "message": "PDFBOX-2530: temporary disable of null icon because of NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1687326 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_101", "file": [{"additions": 2, "raw_url": "https://github.com/apache/pdfbox/raw/a9a86a0193426082849aa3070ee81a701a6f0661/tools/src/main/java/org/apache/pdfbox/tools/gui/PDFTreeCellRenderer.java", "blob_url": "https://github.com/apache/pdfbox/blob/a9a86a0193426082849aa3070ee81a701a6f0661/tools/src/main/java/org/apache/pdfbox/tools/gui/PDFTreeCellRenderer.java", "sha": "263de7c1b9c17f31937923d83af65cef9f766712", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/tools/src/main/java/org/apache/pdfbox/tools/gui/PDFTreeCellRenderer.java?ref=a9a86a0193426082849aa3070ee81a701a6f0661", "patch": "@@ -46,7 +46,7 @@\n     private final ImageIcon ICON_INDIRECT = new ImageIcon(getImageUrl(\"indirect\"));\n     private final ImageIcon ICON_INTEGER = new ImageIcon(getImageUrl(\"integer\"));\n     private final ImageIcon ICON_NAME = new ImageIcon(getImageUrl(\"name\"));\n-    private final ImageIcon ICON_NULL = new ImageIcon(getImageUrl(\"null\"));\n+    //private final ImageIcon ICON_NULL = new ImageIcon(getImageUrl(\"null\"));\n     private final ImageIcon ICON_REAL = new ImageIcon(getImageUrl(\"real\"));\n     private final ImageIcon ICON_STREAM_DICT = new ImageIcon(getImageUrl(\"stream-dict\"));\n     private final ImageIcon ICON_STRING = new ImageIcon(getImageUrl(\"string\"));\n@@ -237,7 +237,7 @@ else if (nodeValue instanceof ArrayEntry)\n         }\n         else if (nodeValue instanceof COSNull)\n         {\n-            return ICON_NULL;\n+            return null; //ICON_NULL;\n         }\n         else if (nodeValue instanceof COSStream)\n         {", "filename": "tools/src/main/java/org/apache/pdfbox/tools/gui/PDFTreeCellRenderer.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/b87f9948260d772775cb2eecfb697ae91f702a6b", "parent": "https://github.com/apache/pdfbox/commit/4c4ed241142a9f78e7fd51f7df1749a011ff0eda", "message": "PDFBOX-2812: test to prevent NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1681651 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_102", "file": [{"additions": 46, "raw_url": "https://github.com/apache/pdfbox/raw/b87f9948260d772775cb2eecfb697ae91f702a6b/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBasedTest.java", "blob_url": "https://github.com/apache/pdfbox/blob/b87f9948260d772775cb2eecfb697ae91f702a6b/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBasedTest.java", "sha": "bb419e5aa8607ddb7147804325b4e933ce2ee316", "changes": 46, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBasedTest.java?ref=b87f9948260d772775cb2eecfb697ae91f702a6b", "patch": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2015 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.pdfbox.pdmodel.graphics.color;\n+\n+import org.apache.pdfbox.pdmodel.PDDocument;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import org.junit.Test;\n+\n+/**\n+ *\n+ * @author Tilman Hausherr\n+ */\n+public class PDICCBasedTest\n+{\n+\n+    public PDICCBasedTest()\n+    {\n+    }\n+\n+    /**\n+     * Test of Constructor for PDFBOX-2812.\n+     */\n+    @Test\n+    public void testConstructor()\n+    {\n+        PDDocument doc = new PDDocument();\n+        PDICCBased iccBased = new PDICCBased(doc);\n+        assertEquals(\"ICCBased\", iccBased.getName());\n+        assertNotNull(iccBased.getPDStream());\n+    }\n+\n+}", "filename": "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBasedTest.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/395f7c490e173163c05e6d39162f6ca6d5deef9e", "parent": "https://github.com/apache/pdfbox/commit/efff64923ae91c92d4127ed7c50c2e72b7e1f001", "message": "PDFBOX-2804: NPE potential wasn't intended\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1681573 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_103", "file": [{"additions": 2, "raw_url": "https://github.com/apache/pdfbox/raw/395f7c490e173163c05e6d39162f6ca6d5deef9e/preflight/src/main/java/org/apache/pdfbox/preflight/metadata/SynchronizedMetaDataValidation.java", "blob_url": "https://github.com/apache/pdfbox/blob/395f7c490e173163c05e6d39162f6ca6d5deef9e/preflight/src/main/java/org/apache/pdfbox/preflight/metadata/SynchronizedMetaDataValidation.java", "sha": "4fe55b29c48eb1a53f701e091bf68217d194e834", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/preflight/src/main/java/org/apache/pdfbox/preflight/metadata/SynchronizedMetaDataValidation.java?ref=395f7c490e173163c05e6d39162f6ca6d5deef9e", "patch": "@@ -282,7 +282,7 @@ protected void analyzeProducerProperty(PDDocumentInformation dico, AdobePDFSchem\n         if (item != null)\n         {\n             // automatically strip trailing Nul values\n-            if (producer == null)\n+            if (producer != null)\n             {\n                 producer = removeTrailingNul(producer);\n             }\n@@ -324,7 +324,7 @@ protected void analyzeCreatorToolProperty(PDDocumentInformation dico, XMPBasicSc\n         if (item != null)\n         {\n             // automatically strip trailing Nul values\n-            if (creatorTool == null)\n+            if (creatorTool != null)\n             {\n                 creatorTool = removeTrailingNul(creatorTool);\n             }", "filename": "preflight/src/main/java/org/apache/pdfbox/preflight/metadata/SynchronizedMetaDataValidation.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/cc7209bca4888e3196016baa0d18980e782aaa6a", "parent": "https://github.com/apache/pdfbox/commit/c0d5a194a86ab2e100822b098b9f3528d61fb764", "message": "PDFBOX-2803: Avoid NPE in willBeSubset()\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1679889 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_104", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/cc7209bca4888e3196016baa0d18980e782aaa6a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java", "blob_url": "https://github.com/apache/pdfbox/blob/cc7209bca4888e3196016baa0d18980e782aaa6a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java", "sha": "1165d9c42614d8fe4b75b292cbca2c4e1c6f5628", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java?ref=cc7209bca4888e3196016baa0d18980e782aaa6a", "patch": "@@ -144,7 +144,7 @@ public void subset() throws IOException\n     @Override\n     public boolean willBeSubset()\n     {\n-        return embedder.needsSubset();\n+        return embedder != null && embedder.needsSubset();\n     }\n \n     /**", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/68b14df9fa89fa10e8e0e5f966ee7e2310f95ee5", "parent": "https://github.com/apache/pdfbox/commit/6fe0b599fbba5b48748a0736b643babef740d1aa", "message": "PDFBOX-1642: NPE onClosed Choice\n* Fixed NPE, \"closed Choice of Text\" was not a known type\n* Trim namespaces parameter in schema definition (see line 17 of attached xmp)\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1546743 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_105", "file": [{"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/68b14df9fa89fa10e8e0e5f966ee7e2310f95ee5/xmpbox/src/main/java/org/apache/xmpbox/xml/PdfaExtensionHelper.java", "blob_url": "https://github.com/apache/pdfbox/blob/68b14df9fa89fa10e8e0e5f966ee7e2310f95ee5/xmpbox/src/main/java/org/apache/xmpbox/xml/PdfaExtensionHelper.java", "sha": "2d2ac6dcf19105b0d94c7e551148a7325b992e0e", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/xmpbox/src/main/java/org/apache/xmpbox/xml/PdfaExtensionHelper.java?ref=68b14df9fa89fa10e8e0e5f966ee7e2310f95ee5", "patch": "@@ -112,7 +112,7 @@ public static void populateSchemaMapping(XMPMetadata meta) throws XmpParsingExce\n                     if (af instanceof PDFASchemaType)\n                     {\n                         PDFASchemaType st = (PDFASchemaType) af;\n-                        String namespaceUri = st.getNamespaceURI();\n+                        String namespaceUri = st.getNamespaceURI().trim();\n                         String prefix = st.getPrefixValue();\n                         ArrayProperty properties = st.getProperty();\n                         ArrayProperty valueTypes = st.getValueType();\n@@ -240,6 +240,9 @@ private static PropertyType transformValueType(TypeMapping tm, String valueType)\n             return TypeMapping.createPropertyType(Types.LangAlt, Cardinality.Simple);\n         }\n         // else all other cases\n+        if (\"closed Choice of Text\".equals(valueType)) {\n+            valueType = \"Text\";\n+        }\n         int pos = valueType.indexOf(' ');\n         Cardinality card = Cardinality.Simple;\n         if (pos > 0)", "filename": "xmpbox/src/main/java/org/apache/xmpbox/xml/PdfaExtensionHelper.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/f46dc2bb0bdc71e80f5e501e835c558bdf099df6", "parent": "https://github.com/apache/pdfbox/commit/5524f2f35f8d093d4c372853181e5a233cbf98df", "message": "PDFBOX-2576: avoid NPE is listFiles() returns null\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1677395 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_106", "file": [{"additions": 7, "raw_url": "https://github.com/apache/pdfbox/raw/f46dc2bb0bdc71e80f5e501e835c558bdf099df6/preflight/src/main/java/org/apache/pdfbox/preflight/Validator_A1b.java", "blob_url": "https://github.com/apache/pdfbox/blob/f46dc2bb0bdc71e80f5e501e835c558bdf099df6/preflight/src/main/java/org/apache/pdfbox/preflight/Validator_A1b.java", "sha": "3ce5059e59c3feff44b21e451e8d8b910609a9d5", "changes": 10, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/preflight/src/main/java/org/apache/pdfbox/preflight/Validator_A1b.java?ref=f46dc2bb0bdc71e80f5e501e835c558bdf099df6", "patch": "@@ -50,7 +50,7 @@\n /**\n  * This class is a simple main class used to check the validity of a pdf file.\n  * \n- * Usage : java net.awl.edoc.pdfa.Validator <file path>\n+ * Usage : java net.awl.edoc.pdfa.Validator &lt;file path&gt;\n  * \n  * @author gbailleul\n  * \n@@ -168,7 +168,7 @@ private static void usage() throws IOException\n \n     private static int runSimple(DataSource fd) throws Exception\n     {\n-        ValidationResult result = null;\n+        ValidationResult result;\n         PreflightParser parser = new PreflightParser(fd);\n         try\n         {\n@@ -231,7 +231,11 @@ private static int runSimple(DataSource fd) throws Exception\n         }\n         else\n         {\n-            files.addAll(Arrays.asList(f.listFiles()));\n+            File[] fileList = f.listFiles();\n+            if (fileList != null)\n+            {\n+                files.addAll(Arrays.asList(fileList));\n+            }\n         }\n         return files;\n     }", "filename": "preflight/src/main/java/org/apache/pdfbox/preflight/Validator_A1b.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/4551be8739d6ca459f9ca0b00ef34fcd89d47fe2", "parent": "https://github.com/apache/pdfbox/commit/e5f70f27402a704942e35278964a9ae8955df5b3", "message": "PDFBOX-2769: avoid NPE if no protection policy when saving\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1675453 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_107", "file": [{"additions": 7, "raw_url": "https://github.com/apache/pdfbox/raw/4551be8739d6ca459f9ca0b00ef34fcd89d47fe2/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java", "blob_url": "https://github.com/apache/pdfbox/blob/4551be8739d6ca459f9ca0b00ef34fcd89d47fe2/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java", "sha": "d1927c505f42e2ec42255f567e4495143e5c453a", "changes": 7, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java?ref=4551be8739d6ca459f9ca0b00ef34fcd89d47fe2", "patch": "@@ -1222,6 +1222,8 @@ public void write(PDDocument doc) throws IOException\n      * @param signInterface class to be used for signing \n      *\n      * @throws IOException If an error occurs while generating the data.\n+     * @throws IllegalStateException If the document has an encryption dictionary but no protection\n+     * policy.\n      */\n     public void write(PDDocument doc, SignatureInterface signInterface) throws IOException\n     {\n@@ -1251,6 +1253,11 @@ public void write(PDDocument doc, SignatureInterface signInterface) throws IOExc\n             if (pdDocument.getEncryption() != null)\n             {\n                 SecurityHandler securityHandler = pdDocument.getEncryption().getSecurityHandler();\n+                if (!securityHandler.hasProtectionPolicy())\n+                {\n+                    throw new IllegalStateException(\"PDF contains an encryption dictionary, please remove it with \"\n+                            + \"setAllSecurityToBeRemoved() or set a protection policy with protect()\");\n+                }\n                 securityHandler.prepareDocumentForEncryption(pdDocument);\n                 willEncrypt = true;\n             }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java"}, {"additions": 9, "raw_url": "https://github.com/apache/pdfbox/raw/4551be8739d6ca459f9ca0b00ef34fcd89d47fe2/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java", "blob_url": "https://github.com/apache/pdfbox/blob/4551be8739d6ca459f9ca0b00ef34fcd89d47fe2/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java", "sha": "d8cdaaa69a4b81343433cb36aa074bd16612a152", "changes": 9, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java?ref=4551be8739d6ca459f9ca0b00ef34fcd89d47fe2", "patch": "@@ -483,4 +483,13 @@ private KeyTransRecipientInfo computeRecipientInfo(X509Certificate x509certifica\n         RecipientIdentifier recipientId = new RecipientIdentifier(serial);\n         return new KeyTransRecipientInfo(recipientId, algorithmId, octets);\n     }\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean hasProtectionPolicy()\n+    {\n+        return policy != null;\n+    }\n }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java"}, {"additions": 7, "raw_url": "https://github.com/apache/pdfbox/raw/4551be8739d6ca459f9ca0b00ef34fcd89d47fe2/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java", "blob_url": "https://github.com/apache/pdfbox/blob/4551be8739d6ca459f9ca0b00ef34fcd89d47fe2/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java", "sha": "64c0ee88d5fe9eb8d37e7440ad0c9718db8d5822", "changes": 7, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java?ref=4551be8739d6ca459f9ca0b00ef34fcd89d47fe2", "patch": "@@ -533,4 +533,11 @@ public void setAES(boolean aesValue)\n     {\n         useAES = aesValue;\n     }\n+\n+    /**\n+     * Returns whether a protection policy has been set.\n+     * \n+     * @return true if a protection policy has been set.\n+     */\n+    public abstract boolean hasProtectionPolicy();\n }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java"}, {"additions": 8, "raw_url": "https://github.com/apache/pdfbox/raw/4551be8739d6ca459f9ca0b00ef34fcd89d47fe2/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java", "blob_url": "https://github.com/apache/pdfbox/blob/4551be8739d6ca459f9ca0b00ef34fcd89d47fe2/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java", "sha": "4f0e5f6d4cc49cb1c28724ce4d8c6873324707e3", "changes": 8, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java?ref=4551be8739d6ca459f9ca0b00ef34fcd89d47fe2", "patch": "@@ -1152,4 +1152,12 @@ private static void logIfStrongEncryptionMissing()\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean hasProtectionPolicy()\n+    {\n+        return policy != null;\n+    }\n }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/4ab3467baceac24eaa804ab628ae294ea93a5da9", "parent": "https://github.com/apache/pdfbox/commit/77c3d9152b9239ee16e3bb7732bcc3dfc67a3114", "message": "PDFBOX-2760: avoid NPE by checking that textLineMatrix exists\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1674145 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_108", "file": [{"additions": 12, "raw_url": "https://github.com/apache/pdfbox/raw/4ab3467baceac24eaa804ab628ae294ea93a5da9/pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/text/MoveText.java", "blob_url": "https://github.com/apache/pdfbox/blob/4ab3467baceac24eaa804ab628ae294ea93a5da9/pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/text/MoveText.java", "sha": "db14dd3f9a681cb12eacf431d2e057e153745f65", "changes": 14, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/text/MoveText.java?ref=4ab3467baceac24eaa804ab628ae294ea93a5da9", "patch": "@@ -18,6 +18,8 @@\n \n import java.util.List;\n \n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n import org.apache.pdfbox.contentstream.operator.MissingOperandException;\n import org.apache.pdfbox.contentstream.operator.Operator;\n import org.apache.pdfbox.contentstream.operator.OperatorProcessor;\n@@ -32,20 +34,28 @@\n  */\n public class MoveText extends OperatorProcessor\n {\n+    private static final Log LOG = LogFactory.getLog(MoveText.class);\n+\n     @Override\n     public void process(Operator operator, List<COSBase> arguments) throws MissingOperandException\n     {\n         if (arguments.size() < 2)\n         {\n             throw new MissingOperandException(operator, arguments);\n         }\n+        Matrix textLineMatrix = context.getTextLineMatrix();\n+        if (textLineMatrix == null)\n+        {\n+            LOG.warn(\"TextLineMatrix is null, \" + getName() + \" operator will be ignored\");\n+            return;\n+        }        \n         \n         COSNumber x = (COSNumber)arguments.get( 0 );\n         COSNumber y = (COSNumber)arguments.get( 1 );\n \n         Matrix matrix = new Matrix(1, 0, 0, 1, x.floatValue(), y.floatValue());\n-        context.getTextLineMatrix().concatenate(matrix);\n-        context.setTextMatrix(context.getTextLineMatrix().clone());\n+        textLineMatrix.concatenate(matrix);\n+        context.setTextMatrix(textLineMatrix.clone());\n     }\n \n     @Override", "filename": "pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/text/MoveText.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/d1f31e82d738c8b77433d381ae2e06039820ee33", "parent": "https://github.com/apache/pdfbox/commit/aff89111a5aeefe6186cfc11b9bcf2c6b6cc80ea", "message": "PDFBOX-2759: avoid NPE when indirect object appears in content stream\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1674118 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_109", "file": [{"additions": 11, "raw_url": "https://github.com/apache/pdfbox/raw/d1f31e82d738c8b77433d381ae2e06039820ee33/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java", "blob_url": "https://github.com/apache/pdfbox/blob/d1f31e82d738c8b77433d381ae2e06039820ee33/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java", "sha": "9c431647a599d76aa780b691ac51a28b93775a06", "changes": 13, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java?ref=d1f31e82d738c8b77433d381ae2e06039820ee33", "patch": "@@ -232,7 +232,7 @@ private COSBase parseCOSDictionaryValue() throws IOException\n             }\n             COSObjectKey key = new COSObjectKey(((COSInteger) number).longValue(),\n                     ((COSInteger) generationNumber).intValue());\n-            retval = document.getObjectFromPool(key);\n+            retval = getObjectFromPool(key);\n         }\n         else\n         {\n@@ -241,6 +241,15 @@ private COSBase parseCOSDictionaryValue() throws IOException\n         return retval;\n     }\n \n+    private COSBase getObjectFromPool(COSObjectKey key) throws IOException\n+    {\n+        if (document == null)\n+        {\n+            throw new IOException(\"object reference \" + key + \" at offset \" + pdfSource.getOffset() + \" in content stream\");\n+        }\n+        return document.getObjectFromPool(key);\n+    }\n+\n     /**\n      * This will parse a PDF dictionary.\n      *\n@@ -979,7 +988,7 @@ protected COSArray parseCOSArray() throws IOException\n                     {\n                         COSInteger number = (COSInteger)po.remove( po.size() -1 );\n                         COSObjectKey key = new COSObjectKey(number.longValue(), genNumber.intValue());\n-                        pbo = document.getObjectFromPool(key);\n+                        pbo = getObjectFromPool(key);\n                     }\n                     else\n                     {", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/ace999fe2b5d0b49511bd5059fb70ca5dc59699c", "parent": "https://github.com/apache/pdfbox/commit/38a935da475db2461c7b3ecd94df3d11ee0e7792", "message": "PDFBOX-2576: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1671273 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_110", "file": [{"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/ace999fe2b5d0b49511bd5059fb70ca5dc59699c/tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java", "blob_url": "https://github.com/apache/pdfbox/blob/ace999fe2b5d0b49511bd5059fb70ca5dc59699c/tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java", "sha": "44e0b2fc64f34686d2342963de2e119e1649bd9a", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java?ref=ace999fe2b5d0b49511bd5059fb70ca5dc59699c", "patch": "@@ -274,7 +274,10 @@ else if( args[i].equals( CONSOLE ) )\n                                     } \n                                     finally \n                                     {\n-                                        subDoc.close();\n+                                        if (subDoc != null)\n+                                        {\n+                                            subDoc.close();\n+                                        }\n                                     }\n                                 }\n                             } ", "filename": "tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/06801e66df7dbc4aef42026c3150b95565938496", "parent": "https://github.com/apache/pdfbox/commit/f8c31b5336c91c9711ef4b79f941cc61aebbfb19", "message": "PDFBOX-2728: simplify API to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1670142 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_111", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/06801e66df7dbc4aef42026c3150b95565938496/tools/src/main/java/org/apache/pdfbox/tools/ExtractImages.java", "blob_url": "https://github.com/apache/pdfbox/blob/06801e66df7dbc4aef42026c3150b95565938496/tools/src/main/java/org/apache/pdfbox/tools/ExtractImages.java", "sha": "e48ee299dfb82925075715d2ac762c83889cf7b2", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/tools/src/main/java/org/apache/pdfbox/tools/ExtractImages.java?ref=06801e66df7dbc4aef42026c3150b95565938496", "patch": "@@ -249,7 +249,7 @@ public void curveTo(float x1, float y1, float x2, float y2, float x3, float y3)\n         }\n \n         @Override\n-        public Point2D.Float getCurrentPoint() throws IOException\n+        public Point2D getCurrentPoint() throws IOException\n         {\n             return new Point2D.Float(0, 0);\n         }", "filename": "tools/src/main/java/org/apache/pdfbox/tools/ExtractImages.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/a38a767bfcb10ce1dc8ee36632328a7447906459", "parent": "https://github.com/apache/pdfbox/commit/77c70cc795a8fa416042fafc3c9dc3ab1ea9d1ea", "message": "PDFBOX-2728: simplify API to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1669653 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_112", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/a38a767bfcb10ce1dc8ee36632328a7447906459/pdfbox/src/main/java/org/apache/pdfbox/contentstream/PDFGraphicsStreamEngine.java", "blob_url": "https://github.com/apache/pdfbox/blob/a38a767bfcb10ce1dc8ee36632328a7447906459/pdfbox/src/main/java/org/apache/pdfbox/contentstream/PDFGraphicsStreamEngine.java", "sha": "195713dfbb35909b6bdece0a364f5bd4ecf77891", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/contentstream/PDFGraphicsStreamEngine.java?ref=a38a767bfcb10ce1dc8ee36632328a7447906459", "patch": "@@ -216,7 +216,7 @@ public abstract void curveTo(float x1, float y1,\n     /**\n      * Returns the current point of the current path.\n      */\n-    public abstract Point2D.Float getCurrentPoint() throws IOException;\n+    public abstract Point2D getCurrentPoint() throws IOException;\n \n     /**\n      * Closes the current path.", "filename": "pdfbox/src/main/java/org/apache/pdfbox/contentstream/PDFGraphicsStreamEngine.java"}, {"additions": 17, "raw_url": "https://github.com/apache/pdfbox/raw/a38a767bfcb10ce1dc8ee36632328a7447906459/pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/graphics/CurveToReplicateInitialPoint.java", "blob_url": "https://github.com/apache/pdfbox/blob/a38a767bfcb10ce1dc8ee36632328a7447906459/pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/graphics/CurveToReplicateInitialPoint.java", "sha": "2f99c54a776338fc3a6c14144fa4f87307433357", "changes": 22, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/graphics/CurveToReplicateInitialPoint.java?ref=a38a767bfcb10ce1dc8ee36632328a7447906459", "patch": "@@ -20,6 +20,8 @@\n import java.io.IOException;\n import java.util.List;\n \n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n import org.apache.pdfbox.cos.COSBase;\n import org.apache.pdfbox.cos.COSNumber;\n import org.apache.pdfbox.contentstream.operator.Operator;\n@@ -31,22 +33,32 @@\n  */\n public class CurveToReplicateInitialPoint extends GraphicsOperatorProcessor\n {\n+    private static final Log LOG = LogFactory.getLog(CurveToReplicateInitialPoint.class);\n+    \n     @Override\n     public void process(Operator operator, List<COSBase> operands) throws IOException\n     {\n-        COSNumber x2 = (COSNumber)operands.get(0 );\n+        COSNumber x2 = (COSNumber)operands.get(0);\n         COSNumber y2 = (COSNumber)operands.get(1);\n         COSNumber x3 = (COSNumber)operands.get(2);\n         COSNumber y3 = (COSNumber)operands.get(3);\n \n-        Point2D.Float currentPoint = context.getCurrentPoint();\n+        Point2D currentPoint = context.getCurrentPoint();\n \n         Point2D.Float point2 = context.transformedPoint(x2.floatValue(), y2.floatValue());\n         Point2D.Float point3 = context.transformedPoint(x3.floatValue(), y3.floatValue());\n \n-        context.curveTo(currentPoint.x, currentPoint.y,\n-                        point2.x, point2.y,\n-                        point3.x, point3.y);\n+        if (currentPoint == null)\n+        {\n+            LOG.warn(\"curveTo (\" + point3.x + \",\" + point3.y + \") without initial MoveTo\");\n+            context.moveTo(point3.x, point3.y);\n+        }\n+        else\n+        {\n+            context.curveTo((float) currentPoint.getX(), (float) currentPoint.getY(),\n+                    point2.x, point2.y,\n+                    point3.x, point3.y);\n+        }\n     }\n \n     @Override", "filename": "pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/graphics/CurveToReplicateInitialPoint.java"}, {"additions": 2, "raw_url": "https://github.com/apache/pdfbox/raw/a38a767bfcb10ce1dc8ee36632328a7447906459/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java", "blob_url": "https://github.com/apache/pdfbox/blob/a38a767bfcb10ce1dc8ee36632328a7447906459/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java", "sha": "1302635655329212ea1a41102faa3fe335ddd743", "changes": 5, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java?ref=a38a767bfcb10ce1dc8ee36632328a7447906459", "patch": "@@ -646,10 +646,9 @@ public void curveTo(float x1, float y1, float x2, float y2, float x3, float y3)\n     }\r\n \r\n     @Override\r\n-    public Point2D.Float getCurrentPoint()\r\n+    public Point2D getCurrentPoint()\r\n     {\r\n-        Point2D current = linePath.getCurrentPoint();\r\n-        return new Point2D.Float((float)current.getX(), (float)current.getY());\r\n+        return linePath.getCurrentPoint();\r\n     }\r\n \r\n     @Override\r", "filename": "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/af95cd31ee1c7cd4f2d729566e039757b2d37794", "parent": "https://github.com/apache/pdfbox/commit/1f09ee49862fe3edc6a947fab8e228e92e3440e8", "message": "PDFBOX-2678: avoid NPE risk discovered by user \"nullpointer\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1659023 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_113", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/af95cd31ee1c7cd4f2d729566e039757b2d37794/tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java", "blob_url": "https://github.com/apache/pdfbox/blob/af95cd31ee1c7cd4f2d729566e039757b2d37794/tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java", "sha": "c2f02c1877757ebe8af83f8cad9904a78a6ec921", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java?ref=af95cd31ee1c7cd4f2d729566e039757b2d37794", "patch": "@@ -252,7 +252,7 @@ else if( args[i].equals( CONSOLE ) )\n                                 }\n                                 PDComplexFileSpecification spec = (PDComplexFileSpecification) ent.getValue();\n                                 PDEmbeddedFile file = spec.getEmbeddedFile();\n-                                if (file != null && file.getSubtype().equals(\"application/pdf\"))\n+                                if (file != null && \"application/pdf\".equals(file.getSubtype()))\n                                 {\n                                     if (debug)\n                                     {", "filename": "tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/65e82922ddde5508f49f0b305152486adf919615", "parent": "https://github.com/apache/pdfbox/commit/7a4e80a4698c3b7c5595a4582495b79cc05ffd97", "message": "PDFBOX-2654: avoid NPE if bi.getAlphaRaster() returns null\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1656322 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_114", "file": [{"additions": 5, "raw_url": "https://github.com/apache/pdfbox/raw/65e82922ddde5508f49f0b305152486adf919615/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactory.java", "blob_url": "https://github.com/apache/pdfbox/blob/65e82922ddde5508f49f0b305152486adf919615/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactory.java", "sha": "f59a292b904485899c45ffefa7332abfba047172", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactory.java?ref=65e82922ddde5508f49f0b305152486adf919615", "patch": "@@ -181,6 +181,11 @@ private static BufferedImage getAlphaImage(BufferedImage image) throws IOExcepti\n                     \" useful, use LosslessImageFactory instead\");\r\n         }\r\n         WritableRaster alphaRaster = image.getAlphaRaster();\r\n+        if (alphaRaster == null)\r\n+        {\r\n+            // happens sometimes (PDFBOX-2654) despite colormodel claiming to have alpha\r\n+            return null;\r\n+        }\r\n         BufferedImage alphaImage = new BufferedImage(image.getWidth(), image.getHeight(),\r\n                 BufferedImage.TYPE_BYTE_GRAY);\r\n         alphaImage.setData(alphaRaster);\r", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactory.java"}, {"additions": 5, "raw_url": "https://github.com/apache/pdfbox/raw/65e82922ddde5508f49f0b305152486adf919615/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java", "blob_url": "https://github.com/apache/pdfbox/blob/65e82922ddde5508f49f0b305152486adf919615/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java", "sha": "39c7ccb2667a3f67986ce196f08386e216c05d0c", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java?ref=65e82922ddde5508f49f0b305152486adf919615", "patch": "@@ -136,6 +136,11 @@ private static PDImageXObject createAlphaFromARGBImage(PDDocument document, Buff\n \n         // extract the alpha information\n         WritableRaster alphaRaster = image.getAlphaRaster();\n+        if (alphaRaster == null)\n+        {\n+            // happens sometimes (PDFBOX-2654) despite colormodel claiming to have alpha\n+            return null;\n+        }\n \n         int[] pixels = alphaRaster.getPixels(0, 0,\n                 alphaRaster.getSampleModel().getWidth(),", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/f1d569bdbe39a8e87a14ac85a98e188bea0420d2", "parent": "https://github.com/apache/pdfbox/commit/b936ffc416ca19519c6df72fceb3b7f7446f5ca9", "message": "PDFBOX-2642: Avoid NPE for damaged Type0 CID fonts\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1656101 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_115", "file": [{"additions": 12, "raw_url": "https://github.com/apache/pdfbox/raw/f1d569bdbe39a8e87a14ac85a98e188bea0420d2/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType0.java", "blob_url": "https://github.com/apache/pdfbox/blob/f1d569bdbe39a8e87a14ac85a98e188bea0420d2/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType0.java", "sha": "557b492391599ffedc0703f78a3f456640414196", "changes": 22, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType0.java?ref=f1d569bdbe39a8e87a14ac85a98e188bea0420d2", "patch": "@@ -22,7 +22,6 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.apache.fontbox.cff.CFFCIDFont;\n@@ -49,7 +48,8 @@\n \n     private final CFFCIDFont cidFont;  // Top DICT that uses CIDFont operators\n     private final CFFType1Font t1Font; // Top DICT that does not use CIDFont operators\n-\n+    // todo: PDFBOX-2642 contains a Type1 PFB font in a CIDFont, but we can't handle that currently\n+    \n     private final Map<Integer, Float> glyphHeights = new HashMap<Integer, Float>();\n     private final boolean isEmbedded;\n     private final boolean isDamaged;\n@@ -78,12 +78,10 @@ public PDCIDFontType0(COSDictionary fontDictionary, PDType0Font parent) throws I\n             }\n         }\n \n-        if (bytes != null)\n-        {\n-            // embedded\n+        boolean fontIsDamaged = false;\n+        CFFFont cffFont = null;\n+        if (bytes != null) {\n             CFFParser cffParser = new CFFParser();\n-            boolean fontIsDamaged = false;\n-            CFFFont cffFont = null;\n             try\n             {\n                 cffFont = cffParser.parse(bytes).get(0);\n@@ -93,7 +91,11 @@ public PDCIDFontType0(COSDictionary fontDictionary, PDType0Font parent) throws I\n                 LOG.error(\"Can't read the embedded CFF font \" + fd.getFontName(), e);\n                 fontIsDamaged = true;\n             }\n-\n+        }\n+        \n+        if (cffFont != null)\n+        {\n+            // embedded\n             if (cffFont instanceof CFFCIDFont)\n             {\n                 cidFont = (CFFCIDFont)cffFont;\n@@ -105,7 +107,7 @@ public PDCIDFontType0(COSDictionary fontDictionary, PDType0Font parent) throws I\n                 t1Font = (CFFType1Font)cffFont;\n             }\n             isEmbedded = true;\n-            isDamaged = fontIsDamaged;\n+            isDamaged = false;\n         }\n         else\n         {\n@@ -148,7 +150,7 @@ public PDCIDFontType0(COSDictionary fontDictionary, PDType0Font parent) throws I\n                 }\n             }\n             isEmbedded = false;\n-            isDamaged = false;\n+            isDamaged = fontIsDamaged;\n         }\n         fontMatrixTransform = getFontMatrix().createAffineTransform();\n         fontMatrixTransform.scale(1000, 1000);", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType0.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/3977af3ea6c8e0b1542d18e7fb2512518e60538d", "parent": "https://github.com/apache/pdfbox/commit/0c5973695b4aa1165d3fefbc3f8603c37ef9fb5e", "message": "PDFBOX-2488: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1640604 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_116", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/3977af3ea6c8e0b1542d18e7fb2512518e60538d/preflight/src/main/java/org/apache/pdfbox/preflight/font/FontValidator.java", "blob_url": "https://github.com/apache/pdfbox/blob/3977af3ea6c8e0b1542d18e7fb2512518e60538d/preflight/src/main/java/org/apache/pdfbox/preflight/font/FontValidator.java", "sha": "c901291d9306425595397900b36bfef978061d28", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/preflight/src/main/java/org/apache/pdfbox/preflight/font/FontValidator.java?ref=3977af3ea6c8e0b1542d18e7fb2512518e60538d", "patch": "@@ -45,7 +45,7 @@ public FontValidator(PreflightContext context, COSDictionary dict, T fContainer)\n \n     public static boolean isSubSet(String fontName)\n     {\n-        return fontName.matches(SUB_SET_PATTERN);\n+        return fontName != null && fontName.matches(SUB_SET_PATTERN);\n     }\n \n     public static String getSubSetPatternDelimiter()", "filename": "preflight/src/main/java/org/apache/pdfbox/preflight/font/FontValidator.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/da295c22eba43fd0b08696eedd59bde0fa09bcf1", "parent": "https://github.com/apache/pdfbox/commit/3ab6aaed23a74c6678ee8421ecfd4dd9d62657c2", "message": "PDFBOX-2491: null check to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1637579 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_117", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/da295c22eba43fd0b08696eedd59bde0fa09bcf1/preflight/src/main/java/org/apache/pdfbox/preflight/metadata/PDFAIdentificationValidation.java", "blob_url": "https://github.com/apache/pdfbox/blob/da295c22eba43fd0b08696eedd59bde0fa09bcf1/preflight/src/main/java/org/apache/pdfbox/preflight/metadata/PDFAIdentificationValidation.java", "sha": "0e4fae67bd64299630df3433807cdf9b78fa5a78", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/preflight/src/main/java/org/apache/pdfbox/preflight/metadata/PDFAIdentificationValidation.java?ref=da295c22eba43fd0b08696eedd59bde0fa09bcf1", "patch": "@@ -102,7 +102,7 @@ protected ValidationError unexpectedPrefixFoundError(String prefFound, String pr\n \n     protected void checkConformanceLevel(List<ValidationError> ve, String value)\n     {\n-        if (!(value.equals(\"A\") || value.equals(\"B\")))\n+        if (value == null || !(value.equals(\"A\") || value.equals(\"B\")))\n         {\n             ve.add(new ValidationError(ERROR_METADATA_INVALID_PDFA_CONFORMANCE));\n         }", "filename": "preflight/src/main/java/org/apache/pdfbox/preflight/metadata/PDFAIdentificationValidation.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/4a2754950a855e7342c1c0cc6661336ff833cc25", "parent": "https://github.com/apache/pdfbox/commit/55afd4abe7ed0d1df23c98fc60c4e34eff0cb6eb", "message": "PDFBOX-2469: simplify NPE check\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1637232 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_118", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/4a2754950a855e7342c1c0cc6661336ff833cc25/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/NonSequentialPDFParser.java", "blob_url": "https://github.com/apache/pdfbox/blob/4a2754950a855e7342c1c0cc6661336ff833cc25/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/NonSequentialPDFParser.java", "sha": "7c55c295b52f805fe33c011b9588f35f8fc7c636", "changes": 3, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/NonSequentialPDFParser.java?ref=4a2754950a855e7342c1c0cc6661336ff833cc25", "patch": "@@ -1452,9 +1452,8 @@ else if (securityHandler != null)\n                     else if (pb instanceof COSDictionary)\n                     {\n                         COSDictionary dict = (COSDictionary) pb;\n-                        COSName type = dict.getCOSName(COSName.TYPE);\n                         // skip dictionary containing the signature\n-                        if (type ==  null || !type.equals(COSName.SIG))\n+                        if (!COSName.SIG.equals(dict.getCOSName(COSName.TYPE)))\n                         {\n                             for (Entry<COSName, COSBase> entry : dict.entrySet())\n                             {", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/NonSequentialPDFParser.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/55afd4abe7ed0d1df23c98fc60c4e34eff0cb6eb", "parent": "https://github.com/apache/pdfbox/commit/333f3edc1a49cd89ebd6b2f41420a8cff5cc75f3", "message": "PDFBOX-2469: avoid NPE as proposed by Tilman Hausherr\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1637230 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_119", "file": [{"additions": 3, "raw_url": "https://github.com/apache/pdfbox/raw/55afd4abe7ed0d1df23c98fc60c4e34eff0cb6eb/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/NonSequentialPDFParser.java", "blob_url": "https://github.com/apache/pdfbox/blob/55afd4abe7ed0d1df23c98fc60c4e34eff0cb6eb/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/NonSequentialPDFParser.java", "sha": "e80a6edea74238231cad08d82c581140a0aa5420", "changes": 5, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/NonSequentialPDFParser.java?ref=55afd4abe7ed0d1df23c98fc60c4e34eff0cb6eb", "patch": "@@ -1452,8 +1452,9 @@ else if (securityHandler != null)\n                     else if (pb instanceof COSDictionary)\n                     {\n                         COSDictionary dict = (COSDictionary) pb;\n-                        // skip signature dictionary\n-                        if (!dict.getCOSName(COSName.TYPE).equals(COSName.SIG))\n+                        COSName type = dict.getCOSName(COSName.TYPE);\n+                        // skip dictionary containing the signature\n+                        if (type ==  null || !type.equals(COSName.SIG))\n                         {\n                             for (Entry<COSName, COSBase> entry : dict.entrySet())\n                             {", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/NonSequentialPDFParser.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/96001f71675aad9988aa1b8cffa4f671226efcf2", "parent": "https://github.com/apache/pdfbox/commit/39d00b480c4766e67a143a1a79b8c7b4d9998a38", "message": "PDFBOX-2478: avoid NPE in for image masks without bpc\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1636430 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_120", "file": [{"additions": 2, "raw_url": "https://github.com/apache/pdfbox/raw/96001f71675aad9988aa1b8cffa4f671226efcf2/preflight/src/main/java/org/apache/pdfbox/preflight/xobject/XObjImageValidator.java", "blob_url": "https://github.com/apache/pdfbox/blob/96001f71675aad9988aa1b8cffa4f671226efcf2/preflight/src/main/java/org/apache/pdfbox/preflight/xobject/XObjImageValidator.java", "sha": "f41860281221e30278410c0a910116c184496bc6", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/preflight/src/main/java/org/apache/pdfbox/preflight/xobject/XObjImageValidator.java?ref=96001f71675aad9988aa1b8cffa4f671226efcf2", "patch": "@@ -129,10 +129,10 @@ protected void checkColorSpaceAndImageMask() throws ValidationException\n             }\n \n             Integer bitsPerCompValue = COSUtils.getAsInteger(bitsPerComp, cosDocument);\n-            if (bitsPerCompValue != 1)\n+            if (bitsPerCompValue != null && bitsPerCompValue != 1)\n             {\n                 context.addValidationError(new ValidationError(ERROR_GRAPHIC_UNEXPECTED_VALUE_FOR_KEY,\n-                        \"ImageMask entry is true, BitsPerComponent must be 1.\"));\n+                        \"ImageMask entry is true, BitsPerComponent must be absent or 1.\"));\n             }\n \n         }", "filename": "preflight/src/main/java/org/apache/pdfbox/preflight/xobject/XObjImageValidator.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/34692a9f8f08ce57fe17f76910ffd68922abe47d", "parent": "https://github.com/apache/pdfbox/commit/5166394839fca851df35047330524317a2090cad", "message": "PDFBOX-2465: throw exception instead of NPE for malformed PDFA xmp\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1635828 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_121", "file": [{"additions": 5, "raw_url": "https://github.com/apache/pdfbox/raw/34692a9f8f08ce57fe17f76910ffd68922abe47d/xmpbox/src/main/java/org/apache/xmpbox/xml/PdfaExtensionHelper.java", "blob_url": "https://github.com/apache/pdfbox/blob/34692a9f8f08ce57fe17f76910ffd68922abe47d/xmpbox/src/main/java/org/apache/xmpbox/xml/PdfaExtensionHelper.java", "sha": "3b58e149642286f8a317fe37853cf2da0197aa03", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/xmpbox/src/main/java/org/apache/xmpbox/xml/PdfaExtensionHelper.java?ref=34692a9f8f08ce57fe17f76910ffd68922abe47d", "patch": "@@ -197,6 +197,11 @@ public static void populateSchemaMapping(XMPMetadata meta) throws XmpParsingExce\n                             }\n                         }\n                         // populate properties\n+                        if (properties == null)\n+                        {\n+                            throw new XmpParsingException(ErrorType.RequiredProperty,\n+                                    \"Missing pdfaSchema:property in type definition\");\n+                        }\n                         for (AbstractField af2 : properties.getAllProperties())\n                         {\n                             if (af2 instanceof PDFAPropertyType)", "filename": "xmpbox/src/main/java/org/apache/xmpbox/xml/PdfaExtensionHelper.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/2861dbb0411533730618d43ab9a40f5856e22081", "parent": "https://github.com/apache/pdfbox/commit/2e42434e5f9976dfe0982163a9330574cb18a0a9", "message": "PDFBOX-2334: Fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1626346 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_122", "file": [{"additions": 10, "raw_url": "https://github.com/apache/pdfbox/raw/2861dbb0411533730618d43ab9a40f5856e22081/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java", "blob_url": "https://github.com/apache/pdfbox/blob/2861dbb0411533730618d43ab9a40f5856e22081/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java", "sha": "4264ad98af998e6b9e5e8ede5506b81ffc6d0af3", "changes": 11, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java?ref=2861dbb0411533730618d43ab9a40f5856e22081", "patch": "@@ -133,11 +133,20 @@ else if (encoding instanceof COSDictionary)\n         }\n \n         // TTFs may have null encoding, but if it's non-symbolic then we have Standard Encoding\n-        if (this.encoding == null && getSymbolicFlag() != null && getSymbolicFlag())\n+        if (this.encoding == null && getSymbolicFlag() != null && !getSymbolicFlag())\n         {\n             this.encoding = StandardEncoding.INSTANCE;\n         }\n \n+        // TTFs may have null encoding, but if it's standard 14 then we know it's Standard Encoding\n+        if (this.encoding == null && isStandard14() &&\n+                !getName().equals(\"Symbol\") ||\n+                !getName().equals(\"ZapfDingbats\"))\n+        {\n+            this.encoding = StandardEncoding.INSTANCE;\n+        }\n+        // todo: what about Symbol and ZapfDingbats?\n+\n         // assign the glyph list based on the font\n         if (\"ZapfDingbats\".equals(getName()))\n         {", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/20c511a2303c2d351832c10437346661c5991373", "parent": "https://github.com/apache/pdfbox/commit/a45fc56c4569b89a9075c375d3f2bb2521fb35d7", "message": "PDFBOX-2317: Avoid potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1622925 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_123", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/20c511a2303c2d351832c10437346661c5991373/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java", "blob_url": "https://github.com/apache/pdfbox/blob/20c511a2303c2d351832c10437346661c5991373/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java", "sha": "fb76b8c1a2069fbfe6db9ff65442dbbe8ff56613", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java?ref=20c511a2303c2d351832c10437346661c5991373", "patch": "@@ -133,7 +133,7 @@ else if (encoding instanceof COSDictionary)\n         }\n \n         // assign the glyph list based on the font\n-        if (getBaseFont().equals(\"ZapfDingbats\"))\n+        if (\"ZapfDingbats\".equals(getBaseFont()))\n         {\n             glyphList = GlyphList.ZAPF_DINGBATS;\n         }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/ce6a690fd74c6fc66bc2df1baeb0b0d27b2fe940", "parent": "https://github.com/apache/pdfbox/commit/35a9009ac9c92b2ba1438ce52e432b0f1b66cd02", "message": "PDFBOX-2271: Avoid potential NPE in PDAppearanceString.java\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1618369 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_124", "file": [{"additions": 10, "raw_url": "https://github.com/apache/pdfbox/raw/ce6a690fd74c6fc66bc2df1baeb0b0d27b2fe940/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAppearanceString.java", "blob_url": "https://github.com/apache/pdfbox/blob/ce6a690fd74c6fc66bc2df1baeb0b0d27b2fe940/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAppearanceString.java", "sha": "8804a7601400084af43676b5936a05c19af8280c", "changes": 18, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAppearanceString.java?ref=ce6a690fd74c6fc66bc2df1baeb0b0d27b2fe940", "patch": "@@ -145,21 +145,21 @@ private int getQ()\n      *\n      * @return The tokens in the original appearance stream\n      */\n-    private List getStreamTokens( PDAppearanceStream appearanceStream ) throws IOException\n+    private List<Object> getStreamTokens( PDAppearanceStream appearanceStream ) throws IOException\n     {\n-        List tokens = null;\n+        List<Object> tokens = new ArrayList<Object>();\n         if( appearanceStream != null )\n         {\n             tokens = getStreamTokens( appearanceStream.getStream() );\n         }\n         return tokens;\n     }\n \n-    private List getStreamTokens( COSString string ) throws IOException\n+    private List<Object> getStreamTokens( COSString string ) throws IOException\n     {\n         PDFStreamParser parser;\n \n-        List tokens = null;\n+        List<Object> tokens =  new ArrayList<Object>();\n         if( string != null )\n         {\n             ByteArrayInputStream stream = new ByteArrayInputStream( string.getBytes() );\n@@ -170,11 +170,11 @@ private List getStreamTokens( COSString string ) throws IOException\n         return tokens;\n     }\n \n-    private List getStreamTokens( COSStream stream ) throws IOException\n+    private List<Object> getStreamTokens( COSStream stream ) throws IOException\n     {\n         PDFStreamParser parser;\n \n-        List tokens = null;\n+        List<Object> tokens = new ArrayList<Object>();\n         if( stream != null )\n         {\n             parser = new PDFStreamParser( stream );\n@@ -186,12 +186,14 @@ private List getStreamTokens( COSStream stream ) throws IOException\n \n     /**\n      * Tests if the apperance stream already contains content.\n+     * \n+     * @param streamTokens individual tokens within the appearance stream\n      *\n      * @return true if it contains any content\n      */\n-    private boolean containsMarkedContent( List stream )\n+    private boolean containsMarkedContent( List<Object> streamTokens )\n     {\n-        return stream.contains( Operator.getOperator(\"BMC\") );\n+        return streamTokens.contains( Operator.getOperator(\"BMC\") );\n     }\n \n     /**", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAppearanceString.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/e31abf5d415f5214339b199c748bc744b310b218", "parent": "https://github.com/apache/pdfbox/commit/69d8210c866717c20592c4acc36ef2c643d2e263", "message": "PDFBOX-2213: NPE from PDFBOX-122\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1615729 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_125", "file": [{"additions": 8, "raw_url": "https://github.com/apache/pdfbox/raw/e31abf5d415f5214339b199c748bc744b310b218/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java", "blob_url": "https://github.com/apache/pdfbox/blob/e31abf5d415f5214339b199c748bc744b310b218/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java", "sha": "8580e19974148903e0c35b25e783b109aed6863a", "changes": 8, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java?ref=e31abf5d415f5214339b199c748bc744b310b218", "patch": "@@ -410,6 +410,14 @@ private void drawType3String(PDType3Font font, int[] charCodes, AffineTransform\n      */\n     private void drawString(PDFont font, String string, AffineTransform at) throws IOException\n     {\n+        if (string == null) {\n+            // AWT fonts can't handle the case where there is no Unicode mapping for the character,\n+            // as we don't know what character it is. We use the replacement character which is\n+            // better than nothing, to show that something is missing.\n+            LOG.error(\"Could not render a character in font \" + font.getBaseFont());\n+            string = \"\\uFFFD\"; // REPLACEMENT CHARACTER\n+        }\n+\n         Font awtFont = createAWTFont(font);\n         FontRenderContext frc = new FontRenderContext(new AffineTransform(), true, true);\n         GlyphVector glyphs = awtFont.createGlyphVector(frc, string);", "filename": "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/d489701eea5d1ac2250eed4a984f35f9d632a999", "parent": "https://github.com/apache/pdfbox/commit/9b4d6e5484ec2db24aac3b2e673730abd28f92f4", "message": "PDFBOX-2020: avoid NPE if there is no colorspaces resource\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1614465 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_126", "file": [{"additions": 10, "raw_url": "https://github.com/apache/pdfbox/raw/d489701eea5d1ac2250eed4a984f35f9d632a999/preflight/src/main/java/org/apache/pdfbox/preflight/content/PreflightStreamEngine.java", "blob_url": "https://github.com/apache/pdfbox/blob/d489701eea5d1ac2250eed4a984f35f9d632a999/preflight/src/main/java/org/apache/pdfbox/preflight/content/PreflightStreamEngine.java", "sha": "8a435c60375f789b15a1f5a77c0a15780569b1c1", "changes": 16, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/preflight/src/main/java/org/apache/pdfbox/preflight/content/PreflightStreamEngine.java?ref=d489701eea5d1ac2250eed4a984f35f9d632a999", "patch": "@@ -546,13 +546,17 @@ else if (arguments.get(0) instanceof COSName)\n             /*\n              * The color space is unknown. Try to access the resources dictionary, the color space can be a reference.\n              */\n-            PDColorSpace pdCS = (PDColorSpace) this.getResources().getColorSpaces().get(colorSpaceName);\n-            if (pdCS != null)\n+            Map<String, PDColorSpace> colorSpaces = this.getResources().getColorSpaces();\n+            if (colorSpaces != null)\n             {\n-                cs = ColorSpaces.valueOf(pdCS.getName());\n-                PreflightConfiguration cfg = context.getConfig();\n-                ColorSpaceHelperFactory csFact = cfg.getColorSpaceHelperFact();\n-                csHelper = csFact.getColorSpaceHelper(context, pdCS, ColorSpaceRestriction.NO_RESTRICTION);\n+                PDColorSpace pdCS = colorSpaces.get(colorSpaceName);\n+                if (pdCS != null)\n+                {\n+                    cs = ColorSpaces.valueOf(pdCS.getName());\n+                    PreflightConfiguration cfg = context.getConfig();\n+                    ColorSpaceHelperFactory csFact = cfg.getColorSpaceHelperFact();\n+                    csHelper = csFact.getColorSpaceHelper(context, pdCS, ColorSpaceRestriction.NO_RESTRICTION);\n+                }\n             }\n         }\n ", "filename": "preflight/src/main/java/org/apache/pdfbox/preflight/content/PreflightStreamEngine.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/129d6bc3b04dcef56485e6adb7c6f41234308753", "parent": "https://github.com/apache/pdfbox/commit/5c1a80da423b8498e308edb5074dd43241023704", "message": "PDFBOX-2229: make getPointCount() return 0 instead of throwing NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1612067 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_127", "file": [{"additions": 24, "raw_url": "https://github.com/apache/pdfbox/raw/129d6bc3b04dcef56485e6adb7c6f41234308753/fontbox/src/main/java/org/apache/fontbox/ttf/GlyfCompositeDescript.java", "blob_url": "https://github.com/apache/pdfbox/blob/129d6bc3b04dcef56485e6adb7c6f41234308753/fontbox/src/main/java/org/apache/fontbox/ttf/GlyfCompositeDescript.java", "sha": "71d9a1315e0717f01e586fca7d5c1cfb9a02a1bd", "changes": 34, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/ttf/GlyfCompositeDescript.java?ref=129d6bc3b04dcef56485e6adb7c6f41234308753", "patch": "@@ -22,16 +22,23 @@ Licensed to the Apache Software Foundation (ASF) under one or more\n import java.util.ArrayList;\r\n import java.util.Iterator;\r\n import java.util.List;\r\n+import org.apache.commons.logging.Log;\r\n+import org.apache.commons.logging.LogFactory;\r\n \r\n /**\r\n- * Glyph description for composite glyphs. Composite glyphs are made up of one or more simple glyphs, usually with some\r\n- * sort of transformation applied to each.\r\n- * \r\n- * This class is based on code from Apache Batik a subproject of Apache XMLGraphics. see\r\n- * http://xmlgraphics.apache.org/batik/ for further details.\r\n+ * Glyph description for composite glyphs. Composite glyphs are made up of one\r\n+ * or more simple glyphs, usually with some sort of transformation applied to\r\n+ * each.\r\n+ *\r\n+ * This class is based on code from Apache Batik a subproject of Apache\r\n+ * XMLGraphics. see http://xmlgraphics.apache.org/batik/ for further details.\r\n  */\r\n public class GlyfCompositeDescript extends GlyfDescript\r\n {\r\n+    /**\r\n+     * Log instance.\r\n+     */\r\n+    private static final Log LOG = LogFactory.getLog(GlyfCompositeDescript.class);\r\n \r\n     private final List<GlyfCompositeComp> components = new ArrayList<GlyfCompositeComp>();\r\n     private GlyphData[] glyphs = null;\r\n@@ -57,7 +64,8 @@ public GlyfCompositeDescript(TTFDataStream bais, GlyphTable glyphTable) throws I\n         {\r\n             comp = new GlyfCompositeComp(bais);\r\n             components.add(comp);\r\n-        } while ((comp.getFlags() & GlyfCompositeComp.MORE_COMPONENTS) != 0);\r\n+        } \r\n+        while ((comp.getFlags() & GlyfCompositeComp.MORE_COMPONENTS) != 0);\r\n \r\n         // Are there hinting instructions to read?\r\n         if ((comp.getFlags() & GlyfCompositeComp.WE_HAVE_INSTRUCTIONS) != 0)\r\n@@ -78,7 +86,7 @@ public void resolve()\n         }\r\n         if (beingResolved)\r\n         {\r\n-            System.err.println(\"Circular reference in GlyfCompositeDesc\");\r\n+            LOG.error(\"Circular reference in GlyfCompositeDesc\");\r\n             return;\r\n         }\r\n         beingResolved = true;\r\n@@ -193,10 +201,16 @@ public int getPointCount()\n     {\r\n         if (!resolved)\r\n         {\r\n-            System.err.println(\"getPointCount called on unresolved GlyfCompositeDescript\");\r\n+            LOG.error(\"getPointCount called on unresolved GlyfCompositeDescript\");\r\n         }\r\n         GlyfCompositeComp c = (GlyfCompositeComp) components.get(components.size() - 1);\r\n-        return c.getFirstIndex() + getGlypDescription(c.getGlyphIndex()).getPointCount();\r\n+        GlyphDescription gd = getGlypDescription(c.getGlyphIndex());\r\n+        if (gd == null)\r\n+        {\r\n+            LOG.error(\"getGlypDescription(\" + c.getGlyphIndex() + \") is null, returning 0\");\r\n+            return 0;\r\n+        }\r\n+        return c.getFirstIndex() + gd.getPointCount();\r\n     }\r\n \r\n     /**\r\n@@ -207,7 +221,7 @@ public int getContourCount()\n     {\r\n         if (!resolved)\r\n         {\r\n-            System.err.println(\"getContourCount called on unresolved GlyfCompositeDescript\");\r\n+            LOG.error(\"getContourCount called on unresolved GlyfCompositeDescript\");\r\n         }\r\n         GlyfCompositeComp c = (GlyfCompositeComp) components.get(components.size() - 1);\r\n         return c.getFirstContour() + getGlypDescription(c.getGlyphIndex()).getContourCount();\r", "filename": "fontbox/src/main/java/org/apache/fontbox/ttf/GlyfCompositeDescript.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/a320f72617b1bc8af9784b68a1acafbeb49c221e", "parent": "https://github.com/apache/pdfbox/commit/9ba23541b3ad8478165021c0765a8831794b3f7b", "message": "PDFBOX-2181: Fix NPE in PreflightContentStream\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1607902 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_128", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/a320f72617b1bc8af9784b68a1acafbeb49c221e/preflight/src/main/java/org/apache/pdfbox/preflight/content/PreflightContentStream.java", "blob_url": "https://github.com/apache/pdfbox/blob/a320f72617b1bc8af9784b68a1acafbeb49c221e/preflight/src/main/java/org/apache/pdfbox/preflight/content/PreflightContentStream.java", "sha": "2fee6f37d87cd9078d90087f5a57e6bead4f51b7", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/preflight/src/main/java/org/apache/pdfbox/preflight/content/PreflightContentStream.java?ref=a320f72617b1bc8af9784b68a1acafbeb49c221e", "patch": "@@ -96,7 +96,7 @@ public void validXObjContentStream(PDFormXObject xobj) throws ValidationExceptio\n     {\n         try\n         {\n-            initStream(this.processeedPage.findCropBox());\n+            initStream(xobj.getBBox());\n             processSubStream(xobj.getResources(), xobj.getCOSStream());\n         }\n         catch (ContentStreamException e)", "filename": "preflight/src/main/java/org/apache/pdfbox/preflight/content/PreflightContentStream.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/d4f7155aac0f9d7922c8691b65becdd5ea30b5f9", "parent": "https://github.com/apache/pdfbox/commit/8b3384c707a4ef501704bc58a11c830181511047", "message": "PDFBOX-2169: NPE in PDTrueTypeFont.makeFontDescriptor\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1606956 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_129", "file": [{"additions": 34, "raw_url": "https://github.com/apache/pdfbox/raw/d4f7155aac0f9d7922c8691b65becdd5ea30b5f9/fontbox/src/main/java/org/apache/fontbox/util/FontManager.java", "blob_url": "https://github.com/apache/pdfbox/blob/d4f7155aac0f9d7922c8691b65becdd5ea30b5f9/fontbox/src/main/java/org/apache/fontbox/util/FontManager.java", "sha": "5add6337b6cd20641f6d661ffbe8fbe968f61fd7", "changes": 39, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/util/FontManager.java?ref=d4f7155aac0f9d7922c8691b65becdd5ea30b5f9", "patch": "@@ -50,6 +50,25 @@\n     // HashMap with all known true type fonts\n     private static HashMap<String, String> fontMappingTTF = new HashMap<String, String>();\n \n+    // fallback font\n+    private static TrueTypeFont standardFont;\n+\n+    static\n+    {\n+        try\n+        {\n+            standardFont = findTTFont(\"Arial\");\n+            if (standardFont == null)\n+            {\n+                throw new IOException(\"Could not load TTF fallback font\");\n+            }\n+        }\n+        catch (IOException e)\n+        {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n     private FontManager()\n     {\n     }\n@@ -318,23 +337,33 @@ public static String findTTFontname(String fontname)\n      * Search for a true type font for the given font name.\n      * \n      * @param fontname the given font name\n-     * @return the mapped true type font\n+     * @return the mapped true type font, or null if none could be found\n      * @throws IOException if something went wrong\n      */\n     public static TrueTypeFont findTTFont(String fontname) throws IOException\n     {\n-        String ttffontname = findTTFontname(fontname);\n+        String ttfFontName = findTTFontname(fontname);\n         TrueTypeFont ttfFont = null;\n-        if (ttffontname != null)\n+        if (ttfFontName != null)\n         {\n             TTFParser ttfParser = new TTFParser();\n-            InputStream fontStream = ResourceLoader.loadResource(ttffontname);\n+            InputStream fontStream = ResourceLoader.loadResource(ttfFontName);\n             if (fontStream == null)\n             {\n-                throw new IOException(\"Can't load external font: \" + ttffontname);\n+                throw new IOException(\"Can't load external font: \" + ttfFontName);\n             }\n             ttfFont = ttfParser.parseTTF(fontStream);\n         }\n         return ttfFont;\n     }\n+\n+    /**\n+     * Get the standard font from the environment.\n+     *\n+     * @return standard font\n+     */\n+    public static TrueTypeFont getStandardFont()\n+    {\n+        return standardFont;\n+    }\n }", "filename": "fontbox/src/main/java/org/apache/fontbox/util/FontManager.java"}, {"additions": 13, "raw_url": "https://github.com/apache/pdfbox/raw/d4f7155aac0f9d7922c8691b65becdd5ea30b5f9/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java", "blob_url": "https://github.com/apache/pdfbox/blob/d4f7155aac0f9d7922c8691b65becdd5ea30b5f9/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java", "sha": "df86c201f86ece1a005734b6dcc88ec6b4a5533b", "changes": 13, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java?ref=d4f7155aac0f9d7922c8691b65becdd5ea30b5f9", "patch": "@@ -289,6 +289,15 @@ else if (nr.getNameId() == NameRecord.NAME_FONT_FAMILY_NAME)\n             }\n         }\n \n+        if (this.getFontEncoding() == null)\n+        {\n+            // todo: calling this.getFontEncoding() doesn't work if the font is loaded\n+            //       from the local system, because it relies on the FontDescriptor!\n+            //       We make do for now by returning an incomplete descriptor pending further\n+            //       refactoring of PDFont#determineEncoding().\n+            return fd;\n+        }\n+\n         Map<Integer, String> codeToName = this.getFontEncoding().getCodeToNameMap();\n \n         int firstChar = Collections.min(codeToName.keySet());\n@@ -372,6 +381,10 @@ public TrueTypeFont getTTFFont() throws IOException\n                 // check if there is a font mapping for an external font file\n                 ttf = FontManager.findTTFont(getBaseFont());\n             }\n+            if (ttf == null)\n+            {\n+                ttf = FontManager.getStandardFont();\n+            }\n         }\n         return ttf;\n     }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/f47e84f60024b3db760ad6283e8374060bc7ba8e", "parent": "https://github.com/apache/pdfbox/commit/9a1e4a4adc7df8879a0d3a87eae5096d8e2edce5", "message": "PDFBOX-2164: NPE when reading non-terminal fields\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1605953 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_130", "file": [{"additions": 10, "raw_url": "https://github.com/apache/pdfbox/raw/f47e84f60024b3db760ad6283e8374060bc7ba8e/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDField.java", "blob_url": "https://github.com/apache/pdfbox/blob/f47e84f60024b3db760ad6283e8374060bc7ba8e/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDField.java", "sha": "79fdd3d12ecd5bc87e30dda2b96a946bd332ab28", "changes": 13, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDField.java?ref=f47e84f60024b3db760ad6283e8374060bc7ba8e", "patch": "@@ -534,16 +534,23 @@ public PDField findKid(String[] name, int nameIndex) throws IOException\n                 if (kidDictionary.getDictionaryObject(COSName.FT) != null\n                         || (parent != null && parent.getDictionaryObject(COSName.FT) != null))\n                 {\n-                    kidsList.add(PDFieldFactory.createField(form, kidDictionary));\n+                    PDField field = PDFieldFactory.createField(form, kidDictionary);\n+                    if (field != null)\n+                    {\n+                        kidsList.add(field);\n+                    }\n                 }\n                 else if (\"Widget\".equals(kidDictionary.getNameAsString(COSName.SUBTYPE)))\n                 {\n                     kidsList.add(new PDAnnotationWidget(kidDictionary));\n                 }\n                 else\n                 {\n-                    //\n-                    kidsList.add(PDFieldFactory.createField(form, kidDictionary));\n+                    PDField field = PDFieldFactory.createField(form, kidDictionary);\n+                    if (field != null)\n+                    {\n+                        kidsList.add(field);\n+                    }\n                 }\n             }\n             retval = new COSArrayList<COSObjectable>(kidsList, kids);", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDField.java"}, {"additions": 2, "raw_url": "https://github.com/apache/pdfbox/raw/f47e84f60024b3db760ad6283e8374060bc7ba8e/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldFactory.java", "blob_url": "https://github.com/apache/pdfbox/blob/f47e84f60024b3db760ad6283e8374060bc7ba8e/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldFactory.java", "sha": "f2fad273ca42c2100ea964287e2739ac28e25c3a", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldFactory.java?ref=f47e84f60024b3db760ad6283e8374060bc7ba8e", "patch": "@@ -95,7 +95,8 @@ else if (\"Sig\".equals(fieldType))\n         }\n         else\n         {\n-            throw new IOException(\"Invalid field type: \" + fieldType);\n+            // todo: inheritance and \"non-terminal fields\" are not supported yet\n+            return null;\n         }\n     }\n ", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldFactory.java"}, {"additions": 5, "raw_url": "https://github.com/apache/pdfbox/raw/f47e84f60024b3db760ad6283e8374060bc7ba8e/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDRadioButton.java", "blob_url": "https://github.com/apache/pdfbox/blob/f47e84f60024b3db760ad6283e8374060bc7ba8e/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDRadioButton.java", "sha": "e744f6372089786db9b38197cf724b629c82df04", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDRadioButton.java?ref=f47e84f60024b3db760ad6283e8374060bc7ba8e", "patch": "@@ -150,7 +150,11 @@ public List getKids() throws IOException\n             List kidsList = new ArrayList();\n             for (int i = 0; i < kids.size(); i++)\n             {\n-                kidsList.add( PDFieldFactory.createField( getAcroForm(), (COSDictionary)kids.getObject(i) ) );\n+                PDField field = PDFieldFactory.createField( getAcroForm(), (COSDictionary)kids.getObject(i) );\n+                if (field != null)\n+                {\n+                    kidsList.add( field );\n+                }\n             }\n             return new COSArrayList( kidsList, kids );\n         }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDRadioButton.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/ce5f95009ffd1a214043c6d2c383ea4f933cbb2d", "parent": "https://github.com/apache/pdfbox/commit/0d8ecca0fefdb124ccfa546cc063e35709ae6673", "message": "PDFBOX-2161: A PDRadioButton with no children throws an NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1604924 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_131", "file": [{"additions": 5, "raw_url": "https://github.com/apache/pdfbox/raw/ce5f95009ffd1a214043c6d2c383ea4f933cbb2d/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDRadioButton.java", "blob_url": "https://github.com/apache/pdfbox/blob/ce5f95009ffd1a214043c6d2c383ea4f933cbb2d/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDRadioButton.java", "sha": "d8a0456992a96b701ae20723cdb7f5fbec5ae467", "changes": 8, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDRadioButton.java?ref=ce5f95009ffd1a214043c6d2c383ea4f933cbb2d", "patch": "@@ -144,7 +144,6 @@ public String getValue() throws IOException\n     @SuppressWarnings(\"unchecked\")\n     public List getKids() throws IOException\n     {\n-        List retval = null;\n         COSArray kids = (COSArray)getDictionary().getDictionaryObject(COSName.KIDS);\n         if( kids != null )\n         {\n@@ -153,8 +152,11 @@ public List getKids() throws IOException\n             {\n                 kidsList.add( PDFieldFactory.createField( getAcroForm(), (COSDictionary)kids.getObject(i) ) );\n             }\n-            retval = new COSArrayList( kidsList, kids );\n+            return new COSArrayList( kidsList, kids );\n+        }\n+        else\n+        {\n+            return new ArrayList();\n         }\n-        return retval;\n     }\n }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDRadioButton.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/82bea6b6c33227c313fbda0435a449ad3fdd4e9f", "parent": "https://github.com/apache/pdfbox/commit/30c58bb66f556287cd80d73a2b3aeb98f0fa3e37", "message": "PDFBOX-2149: Prevent NPE in system TTF getFontDescriptor()\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1604681 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_132", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/82bea6b6c33227c313fbda0435a449ad3fdd4e9f/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDMemoryStream.java", "blob_url": "https://github.com/apache/pdfbox/blob/82bea6b6c33227c313fbda0435a449ad3fdd4e9f/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDMemoryStream.java", "sha": "e58e00e815f1225e98bbe91d62ce8544172b7f8c", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDMemoryStream.java?ref=82bea6b6c33227c313fbda0435a449ad3fdd4e9f", "patch": "@@ -91,7 +91,7 @@ public OutputStream createOutputStream() throws IOException\n      *\n      * @throws IOException If an IO error occurs during reading.\n      */\n-    public InputStream createInputStream()\n+    public InputStream createInputStream() throws IOException\n     {\n         return new ByteArrayInputStream( data );\n     }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDMemoryStream.java"}, {"additions": 0, "raw_url": "https://github.com/apache/pdfbox/raw/82bea6b6c33227c313fbda0435a449ad3fdd4e9f/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java", "blob_url": "https://github.com/apache/pdfbox/blob/82bea6b6c33227c313fbda0435a449ad3fdd4e9f/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java", "sha": "07ae03a52a96e0a6e06c06608df3174a98b02e3c", "changes": 4, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java?ref=82bea6b6c33227c313fbda0435a449ad3fdd4e9f", "patch": "@@ -691,10 +691,6 @@ public boolean isTrueTypeFont()\n      */\n     public boolean isSymbolicFont()\n     {\n-        if (getFontDescriptor() == null)\n-        {\n-            return false;\n-        }\n         return getFontDescriptor().isSymbolic();\n     }\n ", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/30c58bb66f556287cd80d73a2b3aeb98f0fa3e37", "parent": "https://github.com/apache/pdfbox/commit/0b4678aaaa28bb531843b367a7ae26e34ac81236", "message": "PDFBOX-2149: Prevent NPE in system TTF getFontDescriptor()\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1604679 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_133", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/30c58bb66f556287cd80d73a2b3aeb98f0fa3e37/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDMemoryStream.java", "blob_url": "https://github.com/apache/pdfbox/blob/30c58bb66f556287cd80d73a2b3aeb98f0fa3e37/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDMemoryStream.java", "sha": "78fe1d568d90a942834b146b9a0a534786586741", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDMemoryStream.java?ref=30c58bb66f556287cd80d73a2b3aeb98f0fa3e37", "patch": "@@ -91,7 +91,7 @@ public OutputStream createOutputStream() throws IOException\n      *\n      * @throws IOException If an IO error occurs during reading.\n      */\n-    public InputStream createInputStream() throws IOException\n+    public InputStream createInputStream()\n     {\n         return new ByteArrayInputStream( data );\n     }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDMemoryStream.java"}, {"additions": 5, "raw_url": "https://github.com/apache/pdfbox/raw/30c58bb66f556287cd80d73a2b3aeb98f0fa3e37/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java", "blob_url": "https://github.com/apache/pdfbox/blob/30c58bb66f556287cd80d73a2b3aeb98f0fa3e37/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java", "sha": "330924151a797445227f6d47449be62e7825de34", "changes": 7, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java?ref=30c58bb66f556287cd80d73a2b3aeb98f0fa3e37", "patch": "@@ -129,7 +129,7 @@ else if (length == 2)\n \n     private List<Integer> widths = null;\n \n-    private PDFontDescriptor fontDescriptor = null;\n+    protected PDFontDescriptor fontDescriptor = null;\n     private boolean widthsAreMissing = false;\n \n     // formerly in PDSimpleFont\n@@ -196,7 +196,6 @@ public PDFontDescriptor getFontDescriptor()\n                 {\n                     fontDescriptor = new PDFontDescriptorAFM(afm);\n                 }\n-                // it shouldn't be possible to reach this point...\n             }\n         }\n         return fontDescriptor;\n@@ -692,6 +691,10 @@ public boolean isTrueTypeFont()\n      */\n     public boolean isSymbolicFont()\n     {\n+        if (getFontDescriptor() == null)\n+        {\n+            return false;\n+        }\n         return getFontDescriptor().isSymbolic();\n     }\n ", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java"}, {"additions": 26, "raw_url": "https://github.com/apache/pdfbox/raw/30c58bb66f556287cd80d73a2b3aeb98f0fa3e37/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java", "blob_url": "https://github.com/apache/pdfbox/blob/30c58bb66f556287cd80d73a2b3aeb98f0fa3e37/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java", "sha": "98f6897e121308e95e88be778f4857edef33cfa9", "changes": 32, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java?ref=30c58bb66f556287cd80d73a2b3aeb98f0fa3e37", "patch": "@@ -93,19 +93,20 @@ public static PDTrueTypeFont loadTTF(PDDocument doc, File file) throws IOExcepti\n      *\n      * @param fontDictionary The font dictionary according to the PDF specification.\n      */\n-    public PDTrueTypeFont(COSDictionary fontDictionary)\n+    public PDTrueTypeFont(COSDictionary fontDictionary)  throws IOException\n     {\n         super(fontDictionary);\n+        getTTFFont(); // load the font file\n     }\n \n     /**\n      * Creates a new TrueType font for embedding.\n      */\n-    private PDTrueTypeFont(PDDocument document, InputStream ttf) throws IOException\n+    private PDTrueTypeFont(PDDocument document, InputStream ttfStream) throws IOException\n     {\n         dict.setItem(COSName.SUBTYPE, COSName.TRUE_TYPE);\n \n-        PDStream stream = new PDStream(document, ttf, false);\n+        PDStream stream = new PDStream(document, ttfStream, false);\n         stream.getStream().setInt(COSName.LENGTH1, stream.getByteArray().length); // todo: wrong?\n         stream.addCompression();\n \n@@ -122,7 +123,8 @@ private PDTrueTypeFont(PDDocument document, InputStream ttf) throws IOException\n         try\n         {\n             stream2 = stream.createInputStream();\n-            fd = getFontDescriptor(new TTFParser().parseTTF(stream2));\n+            ttf = new TTFParser().parseTTF(stream2);\n+            fd = makeFontDescriptor(ttf);\n         }\n         finally\n         {\n@@ -133,8 +135,26 @@ private PDTrueTypeFont(PDDocument document, InputStream ttf) throws IOException\n         dict.setItem(COSName.FONT_DESC, fd);\n     }\n \n+    @Override\n+    public PDFontDescriptor getFontDescriptor()\n+    {\n+        if (fontDescriptor == null)\n+        {\n+            COSDictionary fd = (COSDictionary) dict.getDictionaryObject(COSName.FONT_DESC);\n+            if (fd != null)\n+            {\n+                fontDescriptor = new PDFontDescriptorDictionary(fd);\n+            }\n+            else\n+            {\n+                fontDescriptor = makeFontDescriptor(ttf);\n+            }\n+        }\n+        return fontDescriptor;\n+    }\n+\n     // creates a new font descriptor dictionary for the given TTF\n-    private PDFontDescriptorDictionary getFontDescriptor(TrueTypeFont ttf) throws IOException\n+    private PDFontDescriptorDictionary makeFontDescriptor(TrueTypeFont ttf)\n     {\n         PDFontDescriptorDictionary fd = new PDFontDescriptorDictionary();\n \n@@ -334,7 +354,7 @@ public TrueTypeFont getTTFFont() throws IOException\n     {\n         if (ttf == null)\n         {\n-            PDFontDescriptorDictionary fd = (PDFontDescriptorDictionary) getFontDescriptor();\n+            PDFontDescriptorDictionary fd = (PDFontDescriptorDictionary) super.getFontDescriptor();\n             if (fd != null)\n             {\n                 PDStream ff2Stream = fd.getFontFile2();", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/13fd53c704d0a03c0c2f8af3829669d9a9b701f3", "parent": "https://github.com/apache/pdfbox/commit/493ca599868ef0a1b8bbe8d19d102282bef95ebf", "message": "PDFBOX-2149: Allow NPE which hopefully never happens\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1604018 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_134", "file": [{"additions": 3, "raw_url": "https://github.com/apache/pdfbox/raw/13fd53c704d0a03c0c2f8af3829669d9a9b701f3/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java", "blob_url": "https://github.com/apache/pdfbox/blob/13fd53c704d0a03c0c2f8af3829669d9a9b701f3/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java", "sha": "d2b915413d935dd06cea02da39343aaa656d5d4c", "changes": 10, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java?ref=13fd53c704d0a03c0c2f8af3829669d9a9b701f3", "patch": "@@ -141,7 +141,7 @@ else if (length == 2)\n     /**\n      * This will clear AFM resources that are stored statically. This is usually not a problem\n      * unless you want to reclaim resources for a long running process.\n-     * \n+     *\n      * SPECIAL NOTE: The font calculations are currently in COSObject, which is where they will\n      * reside until PDFont is mature enough to take them over. PDFont is the appropriate place for\n      * them and not in COSObject but we need font calculations for text extraction. THIS METHOD WILL\n@@ -196,6 +196,7 @@ public PDFontDescriptor getFontDescriptor()\n                 {\n                     fontDescriptor = new PDFontDescriptorAFM(afm);\n                 }\n+                // it shouldn't be possible to reach this point...\n             }\n         }\n         return fontDescriptor;\n@@ -691,12 +692,7 @@ public boolean isTrueTypeFont()\n      */\n     public boolean isSymbolicFont()\n     {\n-        // not all fonts have a font descriptor\n-        if (getFontDescriptor() != null)\n-        {\n-            return getFontDescriptor().isSymbolic();\n-        }\n-        return false;\n+        return getFontDescriptor().isSymbolic();\n     }\n \n     /**", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/0a8e3786ea815d32a99a4d1417c51e5af395198a", "parent": "https://github.com/apache/pdfbox/commit/c8504297861d3f24b4286402f5b21356ad4fd2f5", "message": "PDFBOX-2145: avoid NPE when initializing AFM_MAP\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1603490 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_135", "file": [{"additions": 22, "raw_url": "https://github.com/apache/pdfbox/raw/0a8e3786ea815d32a99a4d1417c51e5af395198a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1Font.java", "blob_url": "https://github.com/apache/pdfbox/blob/0a8e3786ea815d32a99a4d1417c51e5af395198a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1Font.java", "sha": "e7c8559ce83bed7ed49d640ffb528b9e6ac87eb8", "changes": 44, "status": "modified", "deletions": 22, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1Font.java?ref=0a8e3786ea815d32a99a4d1417c51e5af395198a", "patch": "@@ -96,36 +96,36 @@\n     private static Map<String, FontMetric> getAdobeFontMetrics()\n     {\n         Map<String, FontMetric> metrics = new HashMap<String, FontMetric>();\n-        addMetric(\"Courier-Bold\");\n-        addMetric(\"Courier-BoldOblique\");\n-        addMetric(\"Courier\");\n-        addMetric(\"Courier-Oblique\");\n-        addMetric(\"Helvetica\");\n-        addMetric(\"Helvetica-Bold\");\n-        addMetric(\"Helvetica-BoldOblique\");\n-        addMetric(\"Helvetica-Oblique\");\n-        addMetric(\"Symbol\");\n-        addMetric(\"Times-Bold\");\n-        addMetric(\"Times-BoldItalic\");\n-        addMetric(\"Times-Italic\");\n-        addMetric(\"Times-Roman\");\n-        addMetric(\"ZapfDingbats\");\n+        addMetric(metrics, \"Courier-Bold\");\n+        addMetric(metrics, \"Courier-BoldOblique\");\n+        addMetric(metrics, \"Courier\");\n+        addMetric(metrics, \"Courier-Oblique\");\n+        addMetric(metrics, \"Helvetica\");\n+        addMetric(metrics, \"Helvetica-Bold\");\n+        addMetric(metrics, \"Helvetica-BoldOblique\");\n+        addMetric(metrics, \"Helvetica-Oblique\");\n+        addMetric(metrics, \"Symbol\");\n+        addMetric(metrics, \"Times-Bold\");\n+        addMetric(metrics, \"Times-BoldItalic\");\n+        addMetric(metrics, \"Times-Italic\");\n+        addMetric(metrics, \"Times-Roman\");\n+        addMetric(metrics, \"ZapfDingbats\");\n         \n         // PDFBOX-239\n-        addMetric(\"Arial\", \"Helvetica\");\n-        addMetric(\"Arial,Bold\", \"Helvetica-Bold\");\n-        addMetric(\"Arial,Italic\", \"Helvetica-Oblique\");\n-        addMetric(\"Arial,BoldItalic\", \"Helvetica-BoldOblique\");\n+        addMetric(metrics, \"Arial\", \"Helvetica\");\n+        addMetric(metrics, \"Arial,Bold\", \"Helvetica-Bold\");\n+        addMetric(metrics, \"Arial,Italic\", \"Helvetica-Oblique\");\n+        addMetric(metrics, \"Arial,BoldItalic\", \"Helvetica-BoldOblique\");\n \n         return Collections.unmodifiableMap(metrics);\n     }\n \n-    private static void addMetric(String name)\n+    private static void addMetric(Map<String, FontMetric> metrics, String name)\n     {\n-        addMetric(name, name);\n+        addMetric(metrics, name, name);\n     }\n     \n-    private static void addMetric(String name, String prefix)\n+    private static void addMetric(Map<String, FontMetric> metrics, String name, String prefix)\n     {\n         try\n         {\n@@ -137,7 +137,7 @@ private static void addMetric(String name, String prefix)\n                 {\n                     AFMParser parser = new AFMParser(afmStream);\n                     FontMetric metric = parser.parse();\n-                    AFM_MAP.put(name, metric);\n+                    metrics.put(name, metric);\n                 }\n                 finally\n                 {", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1Font.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/6620defe6bf6fade01d398b315cf6eefc7fc77de", "parent": "https://github.com/apache/pdfbox/commit/f1ec2e506c2d8e63268d675af6ee5b4652ed42f1", "message": "PDFBOX-2134: avoid NPE if expected dup-values are missing\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1601944 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_136", "file": [{"additions": 5, "raw_url": "https://github.com/apache/pdfbox/raw/6620defe6bf6fade01d398b315cf6eefc7fc77de/fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java", "blob_url": "https://github.com/apache/pdfbox/blob/6620defe6bf6fade01d398b315cf6eefc7fc77de/fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java", "sha": "74b731310ab95309185a9d27886de46056efa8ca", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java?ref=6620defe6bf6fade01d398b315cf6eefc7fc77de", "patch": "@@ -139,8 +139,12 @@ else if (key.equals(\"Encoding\"))\n                     readMaybe(Token.NAME, \"array\");\n \n                     // 0 1 255 {1 index exch /.notdef put } for\n+                    // we have to check \"readonly\" and \"def\" too \n+                    // as some fonts don't provide any dup-values, see PDFBOX-2134 \n                     while (!(lexer.peekToken().getKind() == Token.NAME &&\n-                            lexer.peekToken().getText().equals(\"dup\")))\n+                            (lexer.peekToken().getText().equals(\"dup\") ||\n+                            lexer.peekToken().getText().equals(\"readonly\") ||\n+                            lexer.peekToken().getText().equals(\"def\"))))\n                     {\n                         lexer.nextToken();\n                     }", "filename": "fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/5f9b1f80b24f43848f4b7ddba8744e6609441c1e", "parent": "https://github.com/apache/pdfbox/commit/da5520d5e9398771ee840a27023fc0884cbd73d2", "message": "PDFBOX-1884: Avoid NPE in PDComplexFileSpecification\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1575069 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_137", "file": [{"additions": 10, "raw_url": "https://github.com/apache/pdfbox/raw/5f9b1f80b24f43848f4b7ddba8744e6609441c1e/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/filespecification/PDComplexFileSpecification.java", "blob_url": "https://github.com/apache/pdfbox/blob/5f9b1f80b24f43848f4b7ddba8744e6609441c1e/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/filespecification/PDComplexFileSpecification.java", "sha": "8ee7a393f4bc7d8aa8b0d9b3f8adea3ed906b3e7", "changes": 12, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/filespecification/PDComplexFileSpecification.java?ref=5f9b1f80b24f43848f4b7ddba8744e6609441c1e", "patch": "@@ -41,13 +41,21 @@ public PDComplexFileSpecification()\n     }\n \n     /**\n-     * Constructor.\n+     * Constructor. Creates empty COSDictionary if dict is null.\n      *\n      * @param dict The dictionary that fulfils this file specification.\n      */\n     public PDComplexFileSpecification( COSDictionary dict )\n     {\n-        fs = dict;\n+        if (dict == null)\n+        {\n+            fs = new COSDictionary();\n+            fs.setItem( COSName.TYPE, COSName.FILESPEC );\n+        }\n+        else\n+        {\n+            fs = dict;\n+        }\n     }\n \n     /**", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/filespecification/PDComplexFileSpecification.java"}, {"additions": 74, "raw_url": "https://github.com/apache/pdfbox/raw/5f9b1f80b24f43848f4b7ddba8744e6609441c1e/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/TestEmbeddedFiles.java", "blob_url": "https://github.com/apache/pdfbox/blob/5f9b1f80b24f43848f4b7ddba8744e6609441c1e/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/TestEmbeddedFiles.java", "sha": "a5a699bde96421fd98650f9418c14d04c315bebc", "changes": 74, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/TestEmbeddedFiles.java?ref=5f9b1f80b24f43848f4b7ddba8744e6609441c1e", "patch": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.pdfbox.pdmodel.common;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import org.apache.pdfbox.pdmodel.PDDocument;\n+import org.apache.pdfbox.pdmodel.PDDocumentCatalog;\n+import org.apache.pdfbox.pdmodel.PDDocumentNameDictionary;\n+import org.apache.pdfbox.pdmodel.PDEmbeddedFilesNameTreeNode;\n+import org.apache.pdfbox.pdmodel.TestPDDocumentCatalog;\n+import org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification;\n+import org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile;\n+import org.junit.Test;\n+\n+import junit.framework.TestCase;\n+\n+public class TestEmbeddedFiles extends TestCase\n+{\n+    @Test\n+    public void testNullEmbeddedFile() throws IOException\n+    {\n+        PDEmbeddedFile embeddedFile = null;\n+        boolean ok = false;\n+        try\n+        {\n+            PDDocument doc = PDDocument.load(TestEmbeddedFiles.class.getResourceAsStream(\n+                \"null_PDComplexFileSpecification.pdf\"));\n+\n+            PDDocumentCatalog catalog = doc.getDocumentCatalog();\n+            PDDocumentNameDictionary names = catalog.getNames();\n+            assertEquals(\"expected two files\", 2, names.getEmbeddedFiles().getNames().size());\n+            PDEmbeddedFilesNameTreeNode embeddedFiles = names.getEmbeddedFiles();\n+\n+            PDComplexFileSpecification spec = (PDComplexFileSpecification)\n+                                            embeddedFiles.getNames().get(\"non-existent-file.docx\");\n+\n+            if (spec != null)\n+            {\n+                embeddedFile = spec.getEmbeddedFile();\n+                ok = true;\n+            }\n+            //now test for actual attachment\n+            spec = (PDComplexFileSpecification)embeddedFiles.getNames().get(\"My first attachment\");\n+            assertNotNull(\"one attachment actually exists\", spec);\n+            assertEquals(\"existing file length\", 17660, spec.getEmbeddedFile().getLength());\n+            spec = (PDComplexFileSpecification)embeddedFiles\n+                                                    .getNames().get(\"non-existent-file.docx\");\n+        }\n+        catch (NullPointerException e)\n+        {\n+            assertNotNull(\"null pointer exception\", null);\n+        }\n+        assertTrue(\"Was able to get file without exception\", ok);\n+        assertNull(\"EmbeddedFile was correctly null\", embeddedFile);\n+    }\n+\n+}\n+", "filename": "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/TestEmbeddedFiles.java"}, {"additions": 0, "raw_url": "https://github.com/apache/pdfbox/raw/5f9b1f80b24f43848f4b7ddba8744e6609441c1e/pdfbox/src/test/resources/org/apache/pdfbox/pdmodel/common/null_PDComplexFileSpecification.pdf", "blob_url": "https://github.com/apache/pdfbox/blob/5f9b1f80b24f43848f4b7ddba8744e6609441c1e/pdfbox/src/test/resources/org/apache/pdfbox/pdmodel/common/null_PDComplexFileSpecification.pdf", "sha": "d4170b5b525446c2a9a015d50de079fe7cf87a0c", "changes": 0, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/test/resources/org/apache/pdfbox/pdmodel/common/null_PDComplexFileSpecification.pdf?ref=5f9b1f80b24f43848f4b7ddba8744e6609441c1e", "filename": "pdfbox/src/test/resources/org/apache/pdfbox/pdmodel/common/null_PDComplexFileSpecification.pdf"}, {"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/5f9b1f80b24f43848f4b7ddba8744e6609441c1e/tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java", "blob_url": "https://github.com/apache/pdfbox/blob/5f9b1f80b24f43848f4b7ddba8744e6609441c1e/tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java", "sha": "38e65ae71e042ef03e07ee2f71983dc9861bb243", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java?ref=5f9b1f80b24f43848f4b7ddba8744e6609441c1e", "patch": "@@ -291,7 +291,7 @@ else if( args[i].equals( NONSEQ ) )\n                                 }\n                                 PDComplexFileSpecification spec = (PDComplexFileSpecification) ent.getValue();\n                                 PDEmbeddedFile file = spec.getEmbeddedFile();\n-                                if (file.getSubtype().equals(\"application/pdf\")) \n+                                if (file != null && file.getSubtype().equals(\"application/pdf\"))\n                                 {\n                                     if (debug)\n                                     {", "filename": "tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/018d2ad27ebed72dc3723c43ff6cf519c7439e67", "parent": "https://github.com/apache/pdfbox/commit/2c22fd9eecd077d71ba0aff47ae5ec5d1b0b4dc7", "message": "PDFBOX-1094: Fix for NPE in jagpdf and patterns drawn black\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1572367 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_138", "file": [{"additions": 2, "raw_url": "https://github.com/apache/pdfbox/raw/018d2ad27ebed72dc3723c43ff6cf519c7439e67/pdfbox/src/main/java/org/apache/pdfbox/pdfviewer/PageDrawer.java", "blob_url": "https://github.com/apache/pdfbox/blob/018d2ad27ebed72dc3723c43ff6cf519c7439e67/pdfbox/src/main/java/org/apache/pdfbox/pdfviewer/PageDrawer.java", "sha": "b802dbb33a201ef0e801078e7c1dc6430faa1b24", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdfviewer/PageDrawer.java?ref=018d2ad27ebed72dc3723c43ff6cf519c7439e67", "patch": "@@ -211,6 +211,8 @@ public void drawTilingPattern(Graphics2D g, PDTilingPattern pattern, PDRectangle\n         {\n             getGraphicsState().setNonStrokingColorSpace(colorSpace);\n             getGraphicsState().setNonStrokingColor(color);\n+            getGraphicsState().setStrokingColorSpace(colorSpace);\n+            getGraphicsState().setStrokingColor(color);\n         }\n \n         processSubStream(pattern.getResources(), (COSStream)pattern.getCOSObject());", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdfviewer/PageDrawer.java"}, {"additions": 24, "raw_url": "https://github.com/apache/pdfbox/raw/018d2ad27ebed72dc3723c43ff6cf519c7439e67/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/pattern/TilingPaint.java", "blob_url": "https://github.com/apache/pdfbox/blob/018d2ad27ebed72dc3723c43ff6cf519c7439e67/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/pattern/TilingPaint.java", "sha": "3ecd02aef483db9b439c57947c855cb7073ade30", "changes": 31, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/pattern/TilingPaint.java?ref=018d2ad27ebed72dc3723c43ff6cf519c7439e67", "patch": "@@ -67,9 +67,16 @@ public TilingPaint(PDTilingPattern pattern, PDColorSpace colorSpace, PDColor col\n     //  gets rect in parent content stream coordinates\n     private static Rectangle getTransformedRect(PDTilingPattern pattern)\n     {\n-        AffineTransform at = pattern.getMatrix().createAffineTransform();\n-        Rectangle rect = new Rectangle(pattern.getBBox().createDimension());\n-        return at.createTransformedShape(rect).getBounds();\n+        if (pattern.getMatrix() == null)\n+        {\n+            return new Rectangle(pattern.getBBox().createDimension());\n+        }\n+        else\n+        {\n+            AffineTransform at = pattern.getMatrix().createAffineTransform();\n+            Rectangle rect = new Rectangle(pattern.getBBox().createDimension());\n+            return at.createTransformedShape(rect).getBounds();\n+        }\n     }\n \n     // gets image in parent stream coordinates\n@@ -90,10 +97,20 @@ private static BufferedImage getTilingImage(PDTilingPattern pattern, PDColorSpac\n \n         // TODO xStep and yStep\n \n-        // undo translation\n-        Matrix matrix = (Matrix)pattern.getMatrix().clone();\n-        matrix.setValue(2, 0, matrix.getValue(2, 0) - (float)rect.getX()); // tx\n-        matrix.setValue(2, 1, matrix.getValue(2, 1) - (float)rect.getY()); // ty\n+        // matrix\n+        Matrix matrix;\n+        if (pattern.getMatrix() == null)\n+        {\n+            // identity\n+            matrix = new Matrix();\n+        }\n+        else\n+        {\n+            // undo translation\n+            matrix = (Matrix)pattern.getMatrix().clone();\n+            matrix.setValue(2, 0, matrix.getValue(2, 0) - (float)rect.getX()); // tx\n+            matrix.setValue(2, 1, matrix.getValue(2, 1) - (float)rect.getY()); // ty\n+        }\n \n         PageDrawer drawer = new PageDrawer();\n         PDRectangle pdRect = new PDRectangle(0, 0, width, height);", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/pattern/TilingPaint.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/4400c91108fd412128e4218bfb239eaa9d41cf14", "parent": "https://github.com/apache/pdfbox/commit/9aa5c7d576189b8f2ae223f85de8b67f873b7147", "message": "PDFBOX-1799: avoid NPE based on a proposal by Puhong You\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1557793 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_139", "file": [{"additions": 7, "raw_url": "https://github.com/apache/pdfbox/raw/4400c91108fd412128e4218bfb239eaa9d41cf14/pdfbox/src/main/java/org/apache/pdfbox/util/ImageIOUtil.java", "blob_url": "https://github.com/apache/pdfbox/blob/4400c91108fd412128e4218bfb239eaa9d41cf14/pdfbox/src/main/java/org/apache/pdfbox/util/ImageIOUtil.java", "sha": "24508a3e315d0f413d134e59545e3df465c73462", "changes": 11, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/util/ImageIOUtil.java?ref=4400c91108fd412128e4218bfb239eaa9d41cf14", "patch": "@@ -156,9 +156,12 @@ public static boolean writeImage(BufferedImage image, String imageFormat, Object\n                         writerParams.setCompressionQuality(quality);\n                     }\n                     IIOMetadata meta = createMetadata( image, imageWriter, writerParams, resolution);\n-                    imageWriter.setOutput( output );\n-                    imageWriter.write( null, new IIOImage( image, null, meta ), writerParams );\n-                    foundWriter = true;\n+                    if (meta != null)\n+                    {\n+                    \timageWriter.setOutput( output );\n+                    \timageWriter.write( null, new IIOImage( image, null, meta ), writerParams );\n+                    \tfoundWriter = true;\n+                    }\n                 }\n                 catch( IIOException io )\n                 {\n@@ -208,7 +211,7 @@ private static IIOMetadata createMetadata(RenderedImage image, ImageWriter image\n \n     private static boolean addResolution(IIOMetadata meta, int resolution)\n     {\n-        if (!meta.isReadOnly() && meta.isStandardMetadataFormatSupported())\n+        if (meta != null && !meta.isReadOnly() && meta.isStandardMetadataFormatSupported())\n         {\n             IIOMetadataNode root = (IIOMetadataNode)meta.getAsTree(STANDARD_METADATA_FORMAT);\n             IIOMetadataNode dim = getChildNode(root, \"Dimension\");", "filename": "pdfbox/src/main/java/org/apache/pdfbox/util/ImageIOUtil.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/a6bba6b353737b7deb4667e3ade6ac9da2d86ba9", "parent": "https://github.com/apache/pdfbox/commit/401e1919f0034a1f0eff3bc893cf7a86c18fc7db", "message": "PDFBOX-1808: added a null check to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1557374 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_140", "file": [{"additions": 5, "raw_url": "https://github.com/apache/pdfbox/raw/a6bba6b353737b7deb4667e3ade6ac9da2d86ba9/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java", "blob_url": "https://github.com/apache/pdfbox/blob/a6bba6b353737b7deb4667e3ade6ac9da2d86ba9/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java", "sha": "731d0af841ef9e8c88b56d01dea32fd827e07c94", "changes": 7, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java?ref=a6bba6b353737b7deb4667e3ade6ac9da2d86ba9", "patch": "@@ -1314,8 +1314,11 @@ public void close() throws IOException\n     \t\tpageMap = null;\n     \t}\n     \tsecurityHandler = null;\n-        document.close();\n-        document = null;\n+    \tif (document != null)\n+    \t{\n+\t        document.close();\n+\t        document = null;\n+    \t}\n         if (parser != null)\n         {\n         \tparser.clearResources();", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/8b101b60fed2ad8f6e8b101f79fe1599bf0dcd9b", "parent": "https://github.com/apache/pdfbox/commit/9d240d2e769b3d96ee5126fed564e55dede22be2", "message": "PDFBOX-1829: avoid NPE when creating a smasked image\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1555186 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_141", "file": [{"additions": 12, "raw_url": "https://github.com/apache/pdfbox/raw/8b101b60fed2ad8f6e8b101f79fe1599bf0dcd9b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/xobject/PDXObjectImage.java", "blob_url": "https://github.com/apache/pdfbox/blob/8b101b60fed2ad8f6e8b101f79fe1599bf0dcd9b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/xobject/PDXObjectImage.java", "sha": "799a74ea4606085357f83e850547e4987d128a8d", "changes": 16, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/xobject/PDXObjectImage.java?ref=8b101b60fed2ad8f6e8b101f79fe1599bf0dcd9b", "patch": "@@ -154,10 +154,18 @@ protected BufferedImage applyMasks(BufferedImage baseImage) throws IOException\n         if (smask != null)\n         {\n             BufferedImage smaskBI = smask.getRGBImage();\n-            COSArray decodeArray = smask.getDecode();\n-            CompositeImage compositeImage = new CompositeImage(baseImage, smaskBI);\n-            BufferedImage rgbImage = compositeImage.createMaskedImage(decodeArray);\n-            return rgbImage;\n+            if (smaskBI != null)\n+            {\n+\t            COSArray decodeArray = smask.getDecode();\n+\t            CompositeImage compositeImage = new CompositeImage(baseImage, smaskBI);\n+\t            BufferedImage rgbImage = compositeImage.createMaskedImage(decodeArray);\n+\t            return rgbImage;\n+            }\n+            else\n+            {\n+            \t// this may happen if the smask is somehow broken, e.g. unsupported filter\n+                LOG.warn(\"masking getRGBImage returned NULL\");\n+            }\n         }\n         return baseImage;\n     }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/xobject/PDXObjectImage.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/6a1a74e6f77fe64f996bb347dead593e4376b07b", "parent": "https://github.com/apache/pdfbox/commit/cf82ccbcc6f09a26dce07fb846617033c52f8105", "message": "PDFBOX-1789: avoid NPE after reseting the content stream\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1547540 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_142", "file": [{"additions": 7, "raw_url": "https://github.com/apache/pdfbox/raw/6a1a74e6f77fe64f996bb347dead593e4376b07b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/edit/PDPageContentStream.java", "blob_url": "https://github.com/apache/pdfbox/blob/6a1a74e6f77fe64f996bb347dead593e4376b07b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/edit/PDPageContentStream.java", "sha": "981aa8f3a10c482545f400b85977bf82635b7010", "changes": 18, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/edit/PDPageContentStream.java?ref=6a1a74e6f77fe64f996bb347dead593e4376b07b", "patch": "@@ -66,7 +66,6 @@\n      */\n     private static final Log LOG = LogFactory.getLog(PDPageContentStream.class);\n \n-    private PDPage page;\n     private OutputStream output;\n     private boolean inTextMode = false;\n     private PDResources resources;\n@@ -186,15 +185,6 @@ public PDPageContentStream(PDDocument document, PDPage sourcePage, boolean appen\n     public PDPageContentStream(PDDocument document, PDPage sourcePage, boolean appendContent, boolean compress,\n             boolean resetContext) throws IOException\n     {\n-\n-        page = sourcePage;\n-        resources = page.getResources();\n-        if (resources == null)\n-        {\n-            resources = new PDResources();\n-            page.setResources(resources);\n-        }\n-\n         // Get the pdstream from the source page instead of creating a new one\n         PDStream contents = sourcePage.getContents();\n         boolean hasContent = contents != null;\n@@ -276,6 +266,13 @@ public PDPageContentStream(PDDocument document, PDPage sourcePage, boolean appen\n         }\n         formatDecimal.setMaximumFractionDigits(10);\n         formatDecimal.setGroupingUsed(false);\n+        // this has to be done here, as the resources will be set to null when reseting the content stream\n+        resources = sourcePage.getResources();\n+        if (resources == null)\n+        {\n+            resources = new PDResources();\n+            sourcePage.setResources(resources);\n+        }\n     }\n \n     /**\n@@ -1513,7 +1510,6 @@ public void close() throws IOException\n         output.close();\n         currentNonStrokingColorSpace = null;\n         currentStrokingColorSpace = null;\n-        page = null;\n         resources = null;\n     }\n }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/edit/PDPageContentStream.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/fe4237a4d461ea72a79b9a0217b3939c4952bae5", "parent": "https://github.com/apache/pdfbox/commit/68b14df9fa89fa10e8e0e5f966ee7e2310f95ee5", "message": "PDFBOX-1642: NPE on Closed Choice\n* manage closed and open Choice\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1546750 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_143", "file": [{"additions": 8, "raw_url": "https://github.com/apache/pdfbox/raw/fe4237a4d461ea72a79b9a0217b3939c4952bae5/xmpbox/src/main/java/org/apache/xmpbox/xml/PdfaExtensionHelper.java", "blob_url": "https://github.com/apache/pdfbox/blob/fe4237a4d461ea72a79b9a0217b3939c4952bae5/xmpbox/src/main/java/org/apache/xmpbox/xml/PdfaExtensionHelper.java", "sha": "0796c545657ba7ef08a97a7fd657bf871c655044", "changes": 10, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/xmpbox/src/main/java/org/apache/xmpbox/xml/PdfaExtensionHelper.java?ref=fe4237a4d461ea72a79b9a0217b3939c4952bae5", "patch": "@@ -50,6 +50,10 @@\n public final class PdfaExtensionHelper\n {\n \n+    public static final String CLOSED_CHOICE = \"closed Choice of \";\n+\n+    public static final String OPEN_CHOICE = \"open Choice of \";\n+\n     private PdfaExtensionHelper()\n     {\n     }\n@@ -240,8 +244,10 @@ private static PropertyType transformValueType(TypeMapping tm, String valueType)\n             return TypeMapping.createPropertyType(Types.LangAlt, Cardinality.Simple);\n         }\n         // else all other cases\n-        if (\"closed Choice of Text\".equals(valueType)) {\n-            valueType = \"Text\";\n+        if (valueType.startsWith(CLOSED_CHOICE)) {\n+            valueType = valueType.substring(CLOSED_CHOICE.length());\n+        } else if (valueType.startsWith(OPEN_CHOICE)) {\n+            valueType = valueType.substring(OPEN_CHOICE.length());\n         }\n         int pos = valueType.indexOf(' ');\n         Cardinality card = Cardinality.Simple;", "filename": "xmpbox/src/main/java/org/apache/xmpbox/xml/PdfaExtensionHelper.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/73129021bd446ec61d182186e024fde62e55d209", "parent": "https://github.com/apache/pdfbox/commit/5f43564de8055cb6bcbdd4ddd8d4a68fbe9cc7f6", "message": "PDFBOX-823: avoid NPE when setting a dtae property\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1540811 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_144", "file": [{"additions": 12, "raw_url": "https://github.com/apache/pdfbox/raw/73129021bd446ec61d182186e024fde62e55d209/jempbox/src/main/java/org/apache/jempbox/xmp/XMPSchema.java", "blob_url": "https://github.com/apache/pdfbox/blob/73129021bd446ec61d182186e024fde62e55d209/jempbox/src/main/java/org/apache/jempbox/xmp/XMPSchema.java", "sha": "b05022a095427db8546b3b3a1fd3b614506d0b05", "changes": 15, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/jempbox/src/main/java/org/apache/jempbox/xmp/XMPSchema.java?ref=73129021bd446ec61d182186e024fde62e55d209", "patch": "@@ -36,7 +36,7 @@\n  * subclasses for access to specific properties.\n  * \n  * @author <a href=\"mailto:ben@benlitchfield.com\">Ben Litchfield</a>\n- * @version $Revision: 1.8 $\n+ * \n  */\n public class XMPSchema\n {\n@@ -246,7 +246,15 @@ public Calendar getDateProperty(String propertyName) throws IOException\n      */\n     public void setDateProperty(String propertyName, Calendar date)\n     {\n-        setTextProperty(propertyName, DateConverter.toISO8601(date));\n+        if (date != null)\n+        {\n+            setTextProperty(propertyName, DateConverter.toISO8601(date));\n+        }\n+        else\n+        {\n+            // remove the value for the given property \n+            setTextProperty(propertyName, null);\n+        }\n     }\n \n     /**\n@@ -820,7 +828,8 @@ public String getLanguageProperty(String propertyName, String language)\n                     }\n                 }\n             }\n-            else if (property.getChildNodes().getLength() == 1 && Node.TEXT_NODE == property.getFirstChild().getNodeType())\n+            else if (property.getChildNodes().getLength() == 1 \n+                    && Node.TEXT_NODE == property.getFirstChild().getNodeType())\n             {\n                 retval = property.getFirstChild().getNodeValue();\n             }", "filename": "jempbox/src/main/java/org/apache/jempbox/xmp/XMPSchema.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/c083b71f5e0e5b97cfb59b661c7358ec1dc01ab3", "parent": "https://github.com/apache/pdfbox/commit/167ccb2473da6a6cbf1dba15a0742739449aa57f", "message": "PDFBOX-3129: avoid NPE if Tj / TJ is not within BT...ET\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1716207 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_145", "file": [{"additions": 5, "raw_url": "https://github.com/apache/pdfbox/raw/c083b71f5e0e5b97cfb59b661c7358ec1dc01ab3/pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/text/ShowText.java", "blob_url": "https://github.com/apache/pdfbox/blob/c083b71f5e0e5b97cfb59b661c7358ec1dc01ab3/pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/text/ShowText.java", "sha": "1bee9e13b5341f9856ea5c3963a9702200388b10", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/text/ShowText.java?ref=c083b71f5e0e5b97cfb59b661c7358ec1dc01ab3", "patch": "@@ -46,6 +46,11 @@ public void process(Operator operator, List<COSBase> arguments) throws IOExcepti\n             // ignore\n             return;\n         }\n+        if (context.getTextMatrix() == null)\n+        {\n+            // ignore: outside of BT...ET\n+            return;\n+        }\n         COSString string = (COSString) base;\n         context.showTextString(string.getBytes());\n     }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/text/ShowText.java"}, {"additions": 5, "raw_url": "https://github.com/apache/pdfbox/raw/c083b71f5e0e5b97cfb59b661c7358ec1dc01ab3/pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/text/ShowTextAdjusted.java", "blob_url": "https://github.com/apache/pdfbox/blob/c083b71f5e0e5b97cfb59b661c7358ec1dc01ab3/pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/text/ShowTextAdjusted.java", "sha": "9a877a81bf678a5facc287bdee1717b8d5b268de", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/text/ShowTextAdjusted.java?ref=c083b71f5e0e5b97cfb59b661c7358ec1dc01ab3", "patch": "@@ -43,6 +43,11 @@ public void process(Operator operator, List<COSBase> arguments) throws IOExcepti\n         {\n             return;\n         }\n+        if (context.getTextMatrix() == null)\n+        {\n+            // ignore: outside of BT...ET\n+            return;\n+        }\n         COSArray array = (COSArray) base;\n         context.showTextStrings(array);\n     }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/text/ShowTextAdjusted.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/5b3c5708af635257d12c51d1c99f274e70d2c2d1", "parent": "https://github.com/apache/pdfbox/commit/af49e1a8a0a23151c743726cae88b0519950f436", "message": "PDFBOX-1719\nNPE while signing PDF - acroform without fields\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1523680 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_146", "file": [{"additions": 5, "raw_url": "https://github.com/apache/pdfbox/raw/5b3c5708af635257d12c51d1c99f274e70d2c2d1/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java", "blob_url": "https://github.com/apache/pdfbox/blob/5b3c5708af635257d12c51d1c99f274e70d2c2d1/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java", "sha": "f8ee631ab960691aaae4a8b05a7b96a8c929e466", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java?ref=5b3c5708af635257d12c51d1c99f274e70d2c2d1", "patch": "@@ -360,6 +360,11 @@ else if (options.getPage() <= 0)\n \n         List<PDField> fields = acroForm.getFields();\n         PDSignatureField signatureField = null;\n+        if(fields == null) \n+        {\n+            fields = new ArrayList();\n+            acroForm.setFields(fields);\n+        }\n         for (PDField pdField : fields)\n         {\n             if (pdField instanceof PDSignatureField)", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/aa8156a81a3144c667628e3b9f4e22b125830afd", "parent": "https://github.com/apache/pdfbox/commit/243a28b5796a50481f92639d79b4374c6cda15fe", "message": "PDFBOX-3052: avoid NPE and assume horizontal when no current font set\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1710340 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_147", "file": [{"additions": 6, "raw_url": "https://github.com/apache/pdfbox/raw/aa8156a81a3144c667628e3b9f4e22b125830afd/pdfbox/src/main/java/org/apache/pdfbox/contentstream/PDFStreamEngine.java", "blob_url": "https://github.com/apache/pdfbox/blob/aa8156a81a3144c667628e3b9f4e22b125830afd/pdfbox/src/main/java/org/apache/pdfbox/contentstream/PDFStreamEngine.java", "sha": "ec1d9553a1dfcddac13f57715f6c3d654c62bbc4", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/contentstream/PDFStreamEngine.java?ref=aa8156a81a3144c667628e3b9f4e22b125830afd", "patch": "@@ -571,7 +571,12 @@ public void showTextStrings(COSArray array) throws IOException\n         PDTextState textState = getGraphicsState().getTextState();\n         float fontSize = textState.getFontSize();\n         float horizontalScaling = textState.getHorizontalScaling() / 100f;\n-        boolean isVertical = textState.getFont().isVertical();\n+        PDFont font = textState.getFont();\n+        boolean isVertical = false;\n+        if (font != null)\n+        {\n+            isVertical = font.isVertical();\n+        }\n \n         for (COSBase obj : array)\n         {", "filename": "pdfbox/src/main/java/org/apache/pdfbox/contentstream/PDFStreamEngine.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/645027540925f6ff90c1709539efcd3508ba0e5e", "parent": "https://github.com/apache/pdfbox/commit/f0bcbd83c553e97614fd447613c2de0b6e97aa02", "message": "PDFBOX-1476 : fixed rdf problem\nfixed NPE on invalid structured type\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1425258 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_148", "file": [{"additions": 5, "raw_url": "https://github.com/apache/pdfbox/raw/645027540925f6ff90c1709539efcd3508ba0e5e/xmpbox/src/main/java/org/apache/padaf/xmpbox/xml/DomXmpParser.java", "blob_url": "https://github.com/apache/pdfbox/blob/645027540925f6ff90c1709539efcd3508ba0e5e/xmpbox/src/main/java/org/apache/padaf/xmpbox/xml/DomXmpParser.java", "sha": "cf26b86d92b1958617e9e0770804fef176b70b49", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/xmpbox/src/main/java/org/apache/padaf/xmpbox/xml/DomXmpParser.java?ref=645027540925f6ff90c1709539efcd3508ba0e5e", "patch": "@@ -188,6 +188,8 @@ private void parseDescriptionRoot (XMPMetadata xmp, Element description) throws\n //\t\t\t\t\tif (schema instanceof XMPSchema) {\n //\t\t\t\t\t\t((XMPSchema)sp).setAboutAsSimple(attr.getValue());\n //\t\t\t\t\t}\n+\t\t\t\t} else if (attr.getPrefix()==null && XmpConstants.ABOUT_NAME.equals(attr.getLocalName())) {\n+\t\t\t\t\t// do nothing\n \t\t\t\t} else {\n \t\t\t\t\tString namespace = attr.getNamespaceURI();\n \t\t\t\t\tXMPSchema schema = xmp.getSchema(namespace);\n@@ -271,6 +273,9 @@ private void createProperty (XMPMetadata xmp, Element property, PropertyType typ\n \t\t\t\t\tcontainer.addProperty(ast);\n \t\t\t\t} else {\n \t\t\t\t\tElement inner = DomHelper.getFirstChildElement(property);\n+\t\t\t\t\tif (inner==null) {\n+\t\t\t\t\t\tthrow new XmpParsingException(ErrorType.Format, \"property should contain child element : \"+property);\n+\t\t\t\t\t}\n \t\t\t\t\tAbstractStructuredType ast = parseLiDescription(xmp, DomHelper.getQName(property), inner);\n \t\t\t\t\tast.setPrefix(prefix);\n \t\t\t\t\tcontainer.addProperty(ast);", "filename": "xmpbox/src/main/java/org/apache/padaf/xmpbox/xml/DomXmpParser.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/b5c7ddb3e9e7b831b59eda1229096100a0d5e044", "parent": "https://github.com/apache/pdfbox/commit/e4feccde80b99525883dc3238a3e35a16e642973", "message": "PDFBOX-1411: avoid NPE as proposed by Michael Graessle\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1385280 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_149", "file": [{"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/b5c7ddb3e9e7b831b59eda1229096100a0d5e044/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/xobject/PDPixelMap.java", "blob_url": "https://github.com/apache/pdfbox/blob/b5c7ddb3e9e7b831b59eda1229096100a0d5e044/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/xobject/PDPixelMap.java", "sha": "2c52af6768d83075e191ff904df5082f7e5da9b3", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/xobject/PDPixelMap.java?ref=b5c7ddb3e9e7b831b59eda1229096100a0d5e044", "patch": "@@ -156,7 +156,10 @@ private void createImageStream(PDDocument doc, BufferedImage bi) throws IOExcept\n         }\n         finally\n         {\n-            os.close();\n+            if (os != null)\n+            {\n+                os.close();\n+            }\n         }\n     }\n     /**", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/xobject/PDPixelMap.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/b24d78ced19afa23edf9fc67917a780c6f506297", "parent": "https://github.com/apache/pdfbox/commit/e8421fc0e4c8bf55cab57b67b996f4ad10fa8ea5", "message": "PDFBOX-1378: avoid NPE as proposed by Dominic Tubach\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1369092 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_150", "file": [{"additions": 9, "raw_url": "https://github.com/apache/pdfbox/raw/b24d78ced19afa23edf9fc67917a780c6f506297/pdfbox/src/main/java/org/apache/pdfbox/cos/COSArray.java", "blob_url": "https://github.com/apache/pdfbox/blob/b24d78ced19afa23edf9fc67917a780c6f506297/pdfbox/src/main/java/org/apache/pdfbox/cos/COSArray.java", "sha": "4f549ce1e63a3f76e2dc5c7801e8b2cac9f9f9c9", "changes": 11, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/cos/COSArray.java?ref=b24d78ced19afa23edf9fc67917a780c6f506297", "patch": "@@ -303,8 +303,15 @@ public String getName( int index, String defaultValue )\n      */\n     public void setString( int index, String string )\n     {\n-        set( index, new COSString( string ) );\n-    }\n+        if ( string != null )\n+        {\n+            set( index, new COSString( string ) );\n+        }\n+        else\n+        {\n+            set ( index, null );\n+        }\n+    }   \n \n     /**\n      * Get the value of the array as a string.", "filename": "pdfbox/src/main/java/org/apache/pdfbox/cos/COSArray.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/8d0fee0c284c9df0301444bfa63129d5f880d122", "parent": "https://github.com/apache/pdfbox/commit/d9221297cfdf24e8f7161dab24064e3c2a2d94f1", "message": "PDFBOX-2941: avoid vanishing of right panel if font type not supported; avoid NPE if getRightComponent() is null; format; javadoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1702304 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_151", "file": [{"additions": 11, "raw_url": "https://github.com/apache/pdfbox/raw/8d0fee0c284c9df0301444bfa63129d5f880d122/tools/src/main/java/org/apache/pdfbox/tools/PDFDebugger.java", "blob_url": "https://github.com/apache/pdfbox/blob/8d0fee0c284c9df0301444bfa63129d5f880d122/tools/src/main/java/org/apache/pdfbox/tools/PDFDebugger.java", "sha": "48fba716212308219caee8f55abf981b281f9e49", "changes": 14, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/tools/src/main/java/org/apache/pdfbox/tools/PDFDebugger.java?ref=8d0fee0c284c9df0301444bfa63129d5f880d122", "patch": "@@ -617,7 +617,8 @@ private void jTree1ValueChanged(TreeSelectionEvent evt)\n                     showString(selectedNode);\n                     return;\n                 }\n-                if (!jSplitPane1.getRightComponent().equals(jScrollPane2))\n+                if (jSplitPane1.getRightComponent() == null\n+                        || !jSplitPane1.getRightComponent().equals(jScrollPane2))\n                 {\n                     jSplitPane1.setRightComponent(jScrollPane2);\n                 }\n@@ -727,7 +728,7 @@ private boolean isFont(Object selectedNode)\n         if (selectedNode instanceof COSDictionary)\n         {\n             COSDictionary dic = (COSDictionary)selectedNode;\n-            return  dic.containsKey(COSName.TYPE) &&\n+            return dic.containsKey(COSName.TYPE) &&\n                     dic.getCOSName(COSName.TYPE).equals(COSName.FONT) &&\n                     !isCIDFont(dic);\n         }\n@@ -862,7 +863,14 @@ private void showFont(Object selectedNode, TreePath path)\n         COSDictionary resourceDic = (COSDictionary) getUnderneathObject(path.getParentPath().getParentPath().getLastPathComponent());\n \n         FontEncodingPaneController fontEncodingPaneController = new FontEncodingPaneController(fontName, resourceDic);\n-        jSplitPane1.setRightComponent(fontEncodingPaneController.getPane());\n+        JPanel pane = fontEncodingPaneController.getPane();\n+        if (pane == null)\n+        {\n+            // unsupported font type\n+            jSplitPane1.setRightComponent(jScrollPane2);\n+            return;\n+        }\n+        jSplitPane1.setRightComponent(pane);\n     }\n \n     private void showString(Object selectedNode)", "filename": "tools/src/main/java/org/apache/pdfbox/tools/PDFDebugger.java"}, {"additions": 9, "raw_url": "https://github.com/apache/pdfbox/raw/8d0fee0c284c9df0301444bfa63129d5f880d122/tools/src/main/java/org/apache/pdfbox/tools/pdfdebugger/fontencodingpane/FontEncodingPaneController.java", "blob_url": "https://github.com/apache/pdfbox/blob/8d0fee0c284c9df0301444bfa63129d5f880d122/tools/src/main/java/org/apache/pdfbox/tools/pdfdebugger/fontencodingpane/FontEncodingPaneController.java", "sha": "d2e4018dfd1a4dc4d5fa39a23ad89d0f9ae877da", "changes": 12, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/tools/src/main/java/org/apache/pdfbox/tools/pdfdebugger/fontencodingpane/FontEncodingPaneController.java?ref=8d0fee0c284c9df0301444bfa63129d5f880d122", "patch": "@@ -33,6 +33,7 @@\n \n /**\n  * @author Khyrul Bashar\n+ *\n  * A class that shows the glyph table or CIDToGID map depending on the font type. PDSimple and\n  * PDType0Font are supported.\n  */\n@@ -53,9 +54,10 @@ public FontEncodingPaneController(COSName fontName, COSDictionary dictionary)\n             PDFont font = resources.getFont(fontName);\n             if (font instanceof PDSimpleFont)\n             {\n-                fontPane = new SimpleFont((PDSimpleFont)font);\n+                fontPane = new SimpleFont((PDSimpleFont) font);\n             }\n-            else if (font instanceof PDType0Font && ((PDType0Font) font).getDescendantFont() instanceof PDCIDFontType2)\n+            else if (font instanceof PDType0Font\n+                    && ((PDType0Font) font).getDescendantFont() instanceof PDCIDFontType2)\n             {\n                 fontPane = new Type0Font((PDCIDFontType2) ((PDType0Font) font).getDescendantFont(), font);\n             }\n@@ -66,7 +68,11 @@ else if (font instanceof PDType0Font && ((PDType0Font) font).getDescendantFont()\n         }\n     }\n \n-\n+    /**\n+     * Return a pane to display details of a font.\n+     * \n+     * @return a pane for font information, or null if that font type is not supported.\n+     */\n     public JPanel getPane()\n     {\n         if (fontPane != null)", "filename": "tools/src/main/java/org/apache/pdfbox/tools/pdfdebugger/fontencodingpane/FontEncodingPaneController.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/66c19ee46bbec1ad99b9443b738014981752ccc8", "parent": "https://github.com/apache/pdfbox/commit/f7c36a4ef800eff69c342a1be2989e20a048add8", "message": "PDFBOX-2965: avoid NPE in getField() if the /Fields entry is missing\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1701905 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_152", "file": [{"additions": 21, "raw_url": "https://github.com/apache/pdfbox/raw/66c19ee46bbec1ad99b9443b738014981752ccc8/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java", "blob_url": "https://github.com/apache/pdfbox/blob/66c19ee46bbec1ad99b9443b738014981752ccc8/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java", "sha": "9e403b5c17d115b2b685b0638a61a7e0e14d8736", "changes": 40, "status": "modified", "deletions": 19, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java?ref=66c19ee46bbec1ad99b9443b738014981752ccc8", "patch": "@@ -234,9 +234,8 @@ public boolean isCachingFields()\n      *\n      * @param fullyQualifiedName The name of the field to get.\n      * @return The field with that name of null if one was not found.\n-     * @throws IOException If there is an error getting the field type.\n      */\n-    public PDField getField(String fullyQualifiedName) throws IOException\n+    public PDField getField(String fullyQualifiedName)\n     {\n         PDField retval = null;\n         if (fieldCache != null)\n@@ -248,35 +247,38 @@ public PDField getField(String fullyQualifiedName) throws IOException\n             String[] nameSubSection = fullyQualifiedName.split(\"\\\\.\");\n             COSArray fields = (COSArray) dictionary.getDictionaryObject(COSName.FIELDS);\n \n-            for (int i = 0; i < fields.size() && retval == null; i++)\n+            if (fields != null)\n             {\n-                COSDictionary element = (COSDictionary) fields.getObject(i);\n-                if (element != null)\n+                for (int i = 0; i < fields.size() && retval == null; i++)\n                 {\n-                    COSString fieldName =\n-                        (COSString)element.getDictionaryObject(COSName.T);\n-                    if (fieldName.getString().equals(fullyQualifiedName) ||\n-                        fieldName.getString().equals(nameSubSection[0]))\n+                    COSDictionary element = (COSDictionary) fields.getObject(i);\n+                    if (element != null)\n                     {\n-                        PDField root = PDField.fromDictionary(this, element, null);\n-                        if (root != null)\n+                        COSString fieldName =\n+                            (COSString)element.getDictionaryObject(COSName.T);\n+                        if (fieldName.getString().equals(fullyQualifiedName) ||\n+                            fieldName.getString().equals(nameSubSection[0]))\n                         {\n-                            if (nameSubSection.length > 1)\n+                            PDField root = PDField.fromDictionary(this, element, null);\n+                            if (root != null)\n                             {\n-                                PDField kid = root.findKid(nameSubSection, 1);\n-                                if (kid != null)\n+                                if (nameSubSection.length > 1)\n                                 {\n-                                    retval = kid;\n+                                    PDField kid = root.findKid(nameSubSection, 1);\n+                                    if (kid != null)\n+                                    {\n+                                        retval = kid;\n+                                    }\n+                                    else\n+                                    {\n+                                        retval = root;\n+                                    }\n                                 }\n                                 else\n                                 {\n                                     retval = root;\n                                 }\n                             }\n-                            else\n-                            {\n-                                retval = root;\n-                            }\n                         }\n                     }\n                 }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java"}, {"additions": 78, "raw_url": "https://github.com/apache/pdfbox/raw/66c19ee46bbec1ad99b9443b738014981752ccc8/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java", "blob_url": "https://github.com/apache/pdfbox/blob/66c19ee46bbec1ad99b9443b738014981752ccc8/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java", "sha": "9bafd3a3b8e6a8ecd4fa865ee29fc35ae61cf487", "changes": 78, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java?ref=66c19ee46bbec1ad99b9443b738014981752ccc8", "patch": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.pdfbox.pdmodel.interactive.form;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import java.io.IOException;\n+\n+import org.apache.pdfbox.cos.COSName;\n+import org.apache.pdfbox.pdmodel.PDDocument;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Test for the PDButton class.\n+ *\n+ */\n+public class PDAcroFormTest\n+{\n+    \n+    private PDDocument document;\n+    private PDAcroForm acroForm;\n+    \n+    @Before\n+    public void setUp()\n+    {\n+        document = new PDDocument();\n+        acroForm = new PDAcroForm(document);\n+        document.getDocumentCatalog().setAcroForm(acroForm);\n+    }\n+\n+    @Test\n+    public void testFieldsEntry()\n+    {\n+        // the /Fields entry has been created with the AcroForm\n+        // as this is a required entry\n+        assertNotNull(acroForm.getFields());\n+        assertEquals(acroForm.getFields().size(),0);\n+        \n+        // there shouldn't be an exception if there is no such field\n+        assertNull(acroForm.getField(\"foo\"));\n+        \n+        // remove the required entry which is the case for some\n+        // PDFs (see PDFBOX-2965)\n+        acroForm.getCOSObject().removeItem(COSName.FIELDS);\n+        \n+        // ensure there is always an empty collection returned\n+        assertNotNull(acroForm.getFields());\n+        assertEquals(acroForm.getFields().size(),0);\n+\n+        // there shouldn't be an exception if there is no such field\n+        assertNull(acroForm.getField(\"foo\"));\n+    }\n+\n+    @After\n+    public void tearDown() throws IOException\n+    {\n+        document.close();\n+    }\n+\n+}\n+", "filename": "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/1514b1031651fbae023c0e2e7c8c57e8109c8e0c", "parent": "https://github.com/apache/pdfbox/commit/f00fea4a61dc0f3a54b114397f5e50c923d8de9b", "message": "PDFBOX-1099: check map entry before comparing it to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1351132 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_153", "file": [{"additions": 2, "raw_url": "https://github.com/apache/pdfbox/raw/1514b1031651fbae023c0e2e7c8c57e8109c8e0c/pdfbox/src/main/java/org/apache/pdfbox/cos/COSDocument.java", "blob_url": "https://github.com/apache/pdfbox/blob/1514b1031651fbae023c0e2e7c8c57e8109c8e0c/pdfbox/src/main/java/org/apache/pdfbox/cos/COSDocument.java", "sha": "98361044d0228d6a7f84eb827a8128da0d538063", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/cos/COSDocument.java?ref=1514b1031651fbae023c0e2e7c8c57e8109c8e0c", "patch": "@@ -578,7 +578,8 @@ public void dereferenceObjectStreams() throws IOException\n             {\n                 COSObjectKey key = new COSObjectKey( next );\n                 if ( objectPool.get(key) == null || objectPool.get(key).getObject() == null ||\n-                     xrefTable.get( key ) == - objStream.getObjectNumber().longValue() )    // xrefTable stores negated objNr of objStream for objects in objStreams\n+                     // xrefTable stores negated objNr of objStream for objects in objStreams\n+                     (xrefTable.containsKey( key ) && xrefTable.get( key ) == - objStream.getObjectNumber().longValue()) )  \n                 {\n                     COSObject obj = getObjectFromPool(key);\n                     obj.setObject(next.getObject());", "filename": "pdfbox/src/main/java/org/apache/pdfbox/cos/COSDocument.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/d79d7cfd809328ea76db9c85bfb68655aa8edbd9", "parent": "https://github.com/apache/pdfbox/commit/a5717010b75f44191d93b613ce08c99e927d82b3", "message": "PDFBOX-1311: avoid NPE if no pdf is given\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1341102 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_154", "file": [{"additions": 5, "raw_url": "https://github.com/apache/pdfbox/raw/d79d7cfd809328ea76db9c85bfb68655aa8edbd9/pdfbox/src/main/java/org/apache/pdfbox/PDFReader.java", "blob_url": "https://github.com/apache/pdfbox/blob/d79d7cfd809328ea76db9c85bfb68655aa8edbd9/pdfbox/src/main/java/org/apache/pdfbox/PDFReader.java", "sha": "fcc8e2c851d2a17fc8e2e50f4eb66302e7d34959", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/PDFReader.java?ref=d79d7cfd809328ea76db9c85bfb68655aa8edbd9", "patch": "@@ -299,7 +299,11 @@ public static void main(String[] args) throws Exception\n                 filename = args[i];\n             }\n         }\n-        viewer.openPDFFile( filename, password );\n+        // open the pdf if present\n+        if (filename != null)\n+        {\n+            viewer.openPDFFile( filename, password );\n+        }\n         viewer.setVisible(true);\n     }\n ", "filename": "pdfbox/src/main/java/org/apache/pdfbox/PDFReader.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/367dcae1a6ba9d02ffb87aa31051f747cae5db88", "parent": "https://github.com/apache/pdfbox/commit/9737a662017203923ce60381ded7ac1c8c45efb2", "message": "PDFBOX-1277: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1329078 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_155", "file": [{"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/367dcae1a6ba9d02ffb87aa31051f747cae5db88/pdfbox/src/main/java/org/apache/pdfbox/ExtractImages.java", "blob_url": "https://github.com/apache/pdfbox/blob/367dcae1a6ba9d02ffb87aa31051f747cae5db88/pdfbox/src/main/java/org/apache/pdfbox/ExtractImages.java", "sha": "12db6b1eec680c6aea976cf5b9f9db6720d29142", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/ExtractImages.java?ref=367dcae1a6ba9d02ffb87aa31051f747cae5db88", "patch": "@@ -163,6 +163,10 @@ else if( args[i].equals( ADDKEY ) )\n \n     private void processResources(PDResources resources, String prefix, boolean addKey) throws IOException\n     {\n+        if (resources == null)\n+        {\n+            return;\n+        }\n         Map<String, PDXObject> xobjects = resources.getXObjects();\n         if( xobjects != null )\n         {", "filename": "pdfbox/src/main/java/org/apache/pdfbox/ExtractImages.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/8933ad8d58084ac690bdc10e7074edefffc2ca76", "parent": "https://github.com/apache/pdfbox/commit/a8245fa85261aa6a8423fabd733735a85e64b69b", "message": "PDFBOX-1108: fixed a NPE and an IndexOutOfBound exception\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1162368 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_156", "file": [{"additions": 19, "raw_url": "https://github.com/apache/pdfbox/raw/8933ad8d58084ac690bdc10e7074edefffc2ca76/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/function/PDFunction.java", "blob_url": "https://github.com/apache/pdfbox/blob/8933ad8d58084ac690bdc10e7074edefffc2ca76/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/function/PDFunction.java", "sha": "0b91fdeaa39e159d77f58ade09ffeb687f27d2e1", "changes": 30, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/function/PDFunction.java?ref=8933ad8d58084ac690bdc10e7074edefffc2ca76", "patch": "@@ -46,7 +46,8 @@\n     /**\n      * Constructor.\n      *\n-     * @param functionStream The function stream.\n+     * @param function The function stream.\n+     * \n      */\n     public PDFunction( COSBase function )\n     {\n@@ -130,7 +131,7 @@ public static PDFunction create( COSBase function ) throws IOException\n         PDFunction retval = null;\n         if( function instanceof COSObject )\n         {\n-            function = ((COSObject)function).getCOSObject();\n+            function = ((COSObject)function).getObject();\n         }\n         COSDictionary functionDictionary = (COSDictionary)function;\n         int functionType =  functionDictionary.getInt( COSName.FUNCTION_TYPE );\n@@ -191,7 +192,7 @@ public PDRange getRangeForOutput(int n)\n     /**\n      * This will set the range values.\n      *\n-     * @param range The new range values.\n+     * @param rangeValues The new range values.\n      */\n     public void setRangeValues(COSArray rangeValues)\n     {\n@@ -230,7 +231,7 @@ public PDRange getDomainForInput(int n)\n     /**\n      * This will set the domain values.\n      *\n-     * @param range The new domain values.\n+     * @param domainValues The new domain values.\n      */\n     public void setDomainValues(COSArray domainValues)\n     {\n@@ -242,8 +243,13 @@ public void setDomainValues(COSArray domainValues)\n      * Evaluates the function at the given input.\n      * ReturnValue = f(input)\n      *\n-     * @param input The array of input values for the function. In many cases will be an array of a single value, but not always.\n-     * @return The of outputs the function returns based on those inputs. In many cases will be an array of a single value, but not always.\n+     * @param input The array of input values for the function. \n+     * In many cases will be an array of a single value, but not always.\n+     * \n+     * @return The of outputs the function returns based on those inputs. \n+     * In many cases will be an array of a single value, but not always.\n+     * \n+     * @throws IOException an IOExcpetion is thrown if something went wrong processing the function.  \n      */\n     public abstract COSArray eval(COSArray input) throws IOException;\n     \n@@ -292,7 +298,9 @@ protected COSArray clipToRange(COSArray inputArray)\n             result = new COSArray();\n             int numberOfRanges = rangeValues.length/2;\n             for (int i=0; i<numberOfRanges; i++)\n+            {\n                 result.add(new COSFloat( clipToRange(inputValues[i], rangeValues[2*i], rangeValues[2*i+1])));\n+            }\n         }\n         else\n         {\n@@ -320,11 +328,11 @@ protected float clipToRange(float x, float rangeMin, float rangeMax)\n      * on the line defined by the two points (xRangeMin , xRangeMax ) \n      * and (yRangeMin , yRangeMax ).\n      * \n-     * @param x\n-     * @param xRangeMin\n-     * @param xRangeMax\n-     * @param yRangeMin\n-     * @param yRangeMax\n+     * @param x the to be interpolated value.\n+     * @param xRangeMin the min value of the x range\n+     * @param xRangeMax the max value of the x range\n+     * @param yRangeMin the min value of the y range\n+     * @param yRangeMax the max value of the y range\n      * @return the interpolated y value\n      */\n     protected float interpolate(float x, float xRangeMin, float xRangeMax, float yRangeMin, float yRangeMax) ", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/function/PDFunction.java"}, {"additions": 29, "raw_url": "https://github.com/apache/pdfbox/raw/8933ad8d58084ac690bdc10e7074edefffc2ca76/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/function/PDFunctionType3.java", "blob_url": "https://github.com/apache/pdfbox/blob/8933ad8d58084ac690bdc10e7074edefffc2ca76/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/function/PDFunctionType3.java", "sha": "43a69ea35a0896aa7f21afb06c3c1b847ff42df0", "changes": 57, "status": "modified", "deletions": 28, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/function/PDFunctionType3.java?ref=8933ad8d58084ac690bdc10e7074edefffc2ca76", "patch": "@@ -43,9 +43,9 @@\n      *\n      * @param functionStream The function .\n      */\n-    public PDFunctionType3(COSBase function)\n+    public PDFunctionType3(COSBase functionStream)\n     {\n-        super( function );\n+        super( functionStream );\n     }\n \n     /**\n@@ -62,49 +62,50 @@ public int getFunctionType()\n     public COSArray eval(COSArray input) throws IOException\n     {\n         //This function is known as a \"stitching\" function. Based on the input, it decides which child function to call.\n+        // All functions in the array are 1-value-input functions\n         //See PDF Reference section 3.9.3.\n         PDFunction function = null;\n         float x = ((COSNumber)input.get(0)).floatValue();\n-        PDRange domain = getDomainForInput(1);\n+        PDRange domain = getDomainForInput(0);\n         // clip input value to domain\n         x = clipToRange(x, domain.getMin(), domain.getMax());\n \n-        float[] boundsValues = getBounds().toFloatArray();\n-        int boundsSize = boundsValues.length;\n-        if (boundsSize == 0 || x < boundsValues[0])\n+        COSArray functionsArray = getFunctions();\n+        int numberOfFunctions = functionsArray.size();\n+        // This doesn't make sense but it may happen ...\n+        if (numberOfFunctions == 1) \n         {\n-            function = PDFunction.create(getFunctions().get(0));\n-            PDRange encode = getEncodeForParameter(0);\n-            if (boundsSize == 0)\n-            {\n-                x = interpolate(x, domain.getMin(), domain.getMax(), encode.getMin(), encode.getMax());\n-            }\n-            else\n-            {\n-                x = interpolate(x, domain.getMin(), boundsValues[0], encode.getMin(), encode.getMax());\n-            }\n+            function = PDFunction.create(functionsArray.get(0));\n+            PDRange encRange = getEncodeForParameter(0);\n+            x = interpolate(x, domain.getMin(), domain.getMax(), encRange.getMin(), encRange.getMax());\n         }\n-        else\n+        else \n         {\n-            for (int i=0; i<boundsSize-1; i++)\n+            float[] boundsValues = getBounds().toFloatArray();\n+            int boundsSize = boundsValues.length;\n+            // create a combined array containing the domain and the bounds values\n+            // domain.min, bounds[0], bounds[1], ...., bounds[boundsSize-1], domain.max\n+            float[] partitionValues = new float[boundsSize+2];\n+            int partitionValuesSize = partitionValues.length;\n+            partitionValues[0] = domain.getMin();\n+            partitionValues[partitionValuesSize-1] = domain.getMax();\n+            System.arraycopy(boundsValues, 0, partitionValues, 1, boundsSize);\n+            // find the partition \n+            for (int i=0; i < partitionValuesSize-1; i++)\n             {\n-                if ( x >= boundsValues[i] && x < boundsValues[i+1] )\n+                if ( x >= partitionValues[i] && \n+                        (x < partitionValues[i+1] || (i == partitionValuesSize - 2 && x == partitionValues[i+1])))\n                 {\n-                    function = PDFunction.create(getFunctions().get(i+1));\n-                    PDRange encode = getEncodeForParameter(i+1);\n-                    x = interpolate(x, boundsValues[i], boundsValues[i+1], encode.getMin(), encode.getMax());\n+                    function = PDFunction.create(functionsArray.get(i));\n+                    PDRange encRange = getEncodeForParameter(i);\n+                    x = interpolate(x, partitionValues[i], partitionValues[i+1], encRange.getMin(), encRange.getMax());\n                     break;\n                 }\n             }\n-            if(function==null) //must be in last partition\n-            {\n-                function = PDFunction.create(getFunctions().get(boundsSize+1));\n-                PDRange encode = getEncodeForParameter(boundsSize+1);\n-                x = interpolate(x, boundsValues[boundsSize-1], domain.getMax(), encode.getMin(), encode.getMax());\n-            }\n         }\n         COSArray functionValues = new COSArray();\n         functionValues.add(new COSFloat(x));\n+        // calculate the output values using the chosen function\n         COSArray functionResult = function.eval(functionValues);\n         // clip to range if available\n         return clipToRange(functionResult);", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/function/PDFunctionType3.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/86313ed69b2082e82169c3f308be3311b513c883", "parent": "https://github.com/apache/pdfbox/commit/f3b7db544a454f63015842b43846b5c9deeb5e8d", "message": "PDFBOX-2530: Avoid NPE if no file is open when switching view mode\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1694785 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_157", "file": [{"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/86313ed69b2082e82169c3f308be3311b513c883/tools/src/main/java/org/apache/pdfbox/tools/PDFDebugger.java", "blob_url": "https://github.com/apache/pdfbox/blob/86313ed69b2082e82169c3f308be3311b513c883/tools/src/main/java/org/apache/pdfbox/tools/PDFDebugger.java", "sha": "807ae658f5cf57db47f8adb009da8e83d632b7e5", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/tools/src/main/java/org/apache/pdfbox/tools/PDFDebugger.java?ref=86313ed69b2082e82169c3f308be3311b513c883", "patch": "@@ -419,7 +419,10 @@ public void actionPerformed(ActionEvent actionEvent)\n                     viewModeItem.setText(\"Show Internal Structure\");\n                     isPageMode = true;\n                 }\n-                initTree();\n+                if (document != null)\n+                {\n+                    initTree();\n+                }\n             }\n         });\n         viewMenu.add(viewModeItem);", "filename": "tools/src/main/java/org/apache/pdfbox/tools/PDFDebugger.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/c94a9e12071f4f60b85d93d399cc024b41377688", "parent": "https://github.com/apache/pdfbox/commit/96cb36e599c091b25084f20902a7c7eff9730857", "message": "PDFBOX-960: avoid NPE when annotation subtype is missing\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1070099 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_158", "file": [{"additions": 29, "raw_url": "https://github.com/apache/pdfbox/raw/c94a9e12071f4f60b85d93d399cc024b41377688/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotation.java", "blob_url": "https://github.com/apache/pdfbox/blob/c94a9e12071f4f60b85d93d399cc024b41377688/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotation.java", "sha": "963d4115a389521069fc568d823c8e0089692cdf", "changes": 50, "status": "modified", "deletions": 21, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotation.java?ref=c94a9e12071f4f60b85d93d399cc024b41377688", "patch": "@@ -18,6 +18,8 @@\n \n import java.io.IOException;\n \n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n import org.apache.pdfbox.cos.COSArray;\n import org.apache.pdfbox.cos.COSDictionary;\n import org.apache.pdfbox.cos.COSName;\n@@ -37,6 +39,11 @@\n  */\n public abstract class PDAnnotation implements COSObjectable\n {\n+    /**\n+     * Log instance.\n+     */\n+    private static final Log log = LogFactory.getLog(PDAnnotation.class);\n+\n     /**\n      * An annotation flag.\n      */\n@@ -85,7 +92,7 @@\n      * @return The correctly typed annotation object.\n      * @throws IOException If there is an error while creating the annotation.\n      */\n-    // TODO not yet implemented: FreeText, Polygon, PolyLine, Caret, Ink, Sound, \n+    // TODO not yet implemented: \n     // Movie, Screen, PrinterMark, TrapNet, Watermark, 3D, Redact\n     public static PDAnnotation createAnnotation( COSBase base ) throws IOException\n     {\n@@ -94,62 +101,63 @@ public static PDAnnotation createAnnotation( COSBase base ) throws IOException\n         {\n             COSDictionary annotDic = (COSDictionary)base;\n             String subtype = annotDic.getNameAsString( COSName.SUBTYPE );\n-            if( subtype.equals( PDAnnotationFileAttachment.SUB_TYPE ) )\n+            if( PDAnnotationFileAttachment.SUB_TYPE.equals(subtype) )\n             {\n                 annot = new PDAnnotationFileAttachment( annotDic );\n             }\n-            else if( subtype.equals( PDAnnotationLine.SUB_TYPE ) )\n+            else if( PDAnnotationLine.SUB_TYPE.equals(subtype) )\n             {\n                 annot = new PDAnnotationLine( annotDic );\n             }\n-            else if( subtype.equals( PDAnnotationLink.SUB_TYPE ) )\n+            else if( PDAnnotationLink.SUB_TYPE.equals(subtype) )\n             {\n                 annot = new PDAnnotationLink(annotDic);\n             }\n-            else if( subtype.equals( PDAnnotationPopup.SUB_TYPE ) )\n+            else if( PDAnnotationPopup.SUB_TYPE.equals(subtype) )\n             {\n                 annot = new PDAnnotationPopup(annotDic);\n             }\n-            else if( subtype.equals( PDAnnotationRubberStamp.SUB_TYPE ) )\n+            else if( PDAnnotationRubberStamp.SUB_TYPE.equals(subtype) )\n             {\n                 annot = new PDAnnotationRubberStamp(annotDic);\n             }\n-            else if( subtype.equals( PDAnnotationSquareCircle.SUB_TYPE_SQUARE ) ||\n-                    subtype.equals( PDAnnotationSquareCircle.SUB_TYPE_CIRCLE ) )\n+            else if( PDAnnotationSquareCircle.SUB_TYPE_SQUARE.equals(subtype) ||\n+                    PDAnnotationSquareCircle.SUB_TYPE_CIRCLE.equals(subtype) )\n             {\n                 annot = new PDAnnotationSquareCircle( annotDic );\n             }\n-            else if( subtype.equals( PDAnnotationText.SUB_TYPE ) )\n+            else if( PDAnnotationText.SUB_TYPE.equals(subtype) )\n             {\n                 annot = new PDAnnotationText( annotDic);\n             }\n-            else if( subtype.equals( PDAnnotationTextMarkup.SUB_TYPE_HIGHLIGHT ) ||\n-                    subtype.equals( PDAnnotationTextMarkup.SUB_TYPE_UNDERLINE ) ||\n-                    subtype.equals( PDAnnotationTextMarkup.SUB_TYPE_SQUIGGLY ) ||\n-                    subtype.equals( PDAnnotationTextMarkup.SUB_TYPE_STRIKEOUT ))\n+            else if( PDAnnotationTextMarkup.SUB_TYPE_HIGHLIGHT.equals(subtype) ||\n+                    PDAnnotationTextMarkup.SUB_TYPE_UNDERLINE.equals(subtype) ||\n+                    PDAnnotationTextMarkup.SUB_TYPE_SQUIGGLY.equals(subtype) ||\n+                    PDAnnotationTextMarkup.SUB_TYPE_STRIKEOUT.equals(subtype) )\n             {\n                 annot = new PDAnnotationTextMarkup( annotDic );\n             }\n-            else if( subtype.equals( PDAnnotationLink.SUB_TYPE ) )\n+            else if( PDAnnotationLink.SUB_TYPE.equals(subtype) )\n             {\n                 annot = new PDAnnotationLink( annotDic );\n             }\n-            else if( subtype.equals( PDAnnotationWidget.SUB_TYPE ) )\n+            else if( PDAnnotationWidget.SUB_TYPE.equals(subtype) )\n             {\n                annot = new PDAnnotationWidget( annotDic );\n             }\n-            else if( subtype.equals( PDAnnotationMarkup.SUB_TYPE_FREETEXT ) ||\n-                    subtype.equals( PDAnnotationMarkup.SUB_TYPE_POLYGON ) ||\n-                    subtype.equals( PDAnnotationMarkup.SUB_TYPE_POLYLINE ) ||\n-                    subtype.equals( PDAnnotationMarkup.SUB_TYPE_CARET ) ||\n-                    subtype.equals( PDAnnotationMarkup.SUB_TYPE_INK ) ||\n-                    subtype.equals( PDAnnotationMarkup.SUB_TYPE_SOUND ))\n+            else if( PDAnnotationMarkup.SUB_TYPE_FREETEXT.equals(subtype) ||\n+                    PDAnnotationMarkup.SUB_TYPE_POLYGON.equals(subtype) ||\n+                    PDAnnotationMarkup.SUB_TYPE_POLYLINE.equals(subtype) ||\n+                    PDAnnotationMarkup.SUB_TYPE_CARET.equals(subtype) ||\n+                    PDAnnotationMarkup.SUB_TYPE_INK.equals(subtype) ||\n+                    PDAnnotationMarkup.SUB_TYPE_SOUND.equals(subtype) )\n             {\n                 annot = new PDAnnotationMarkup( annotDic );\n             }\n             else\n             {\n                 annot = new PDAnnotationUnknown( annotDic );\n+                log.debug(\"Unknown or unsupported annotation subtype \"+subtype);\n             }\n         }\n         else", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotation.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/fafcb5e24d6d0b984903637b86bb0f47438cf8c6", "parent": "https://github.com/apache/pdfbox/commit/a008a943ee1188f29ce87ac5d736d7604cc440b1", "message": "PDFBOX-928: added NPE protection which occurred when reading corrupt PDFs\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1053229 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_159", "file": [{"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/fafcb5e24d6d0b984903637b86bb0f47438cf8c6/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/COSArrayList.java", "blob_url": "https://github.com/apache/pdfbox/blob/fafcb5e24d6d0b984903637b86bb0f47438cf8c6/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/COSArrayList.java", "sha": "488e799f8154519e88da217a9a739da1bc46490a", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/COSArrayList.java?ref=fafcb5e24d6d0b984903637b86bb0f47438cf8c6", "patch": "@@ -177,7 +177,10 @@ else if( o instanceof DualCOSObjectable )\n         }\n         else\n         {\n-            array.add( ((COSObjectable)o).getCOSObject() );\n+            if(array != null)\n+            {\n+                array.add(((COSObjectable)o).getCOSObject());\n+            }\n         }\n         return actual.add(o);\n     }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/COSArrayList.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/7c23e21faec5b3746e889cc4af6f81165c3f5f22", "parent": "https://github.com/apache/pdfbox/commit/2eacc3e07095d21a7d8aaef18164aa8aad19ee45", "message": "PDFBOX-797: NPE in PDPageNode\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1053194 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_160", "file": [{"additions": 10, "raw_url": "https://github.com/apache/pdfbox/raw/7c23e21faec5b3746e889cc4af6f81165c3f5f22/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageNode.java", "blob_url": "https://github.com/apache/pdfbox/blob/7c23e21faec5b3746e889cc4af6f81165c3f5f22/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageNode.java", "sha": "6056a458cfe4713f531c4f5cbd23c61bc321c92d", "changes": 11, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageNode.java?ref=7c23e21faec5b3746e889cc4af6f81165c3f5f22", "patch": "@@ -106,7 +106,16 @@ public long updateCount()\n      */\n     public long getCount()\n     {\n-        return ((COSNumber)page.getDictionaryObject( COSName.COUNT )).intValue();\n+        if(page == null)\n+        {\n+            return 0L;\n+        }\n+        COSBase num = page.getDictionaryObject(COSName.COUNT);\n+        if(num == null)\n+        {\n+            return 0L;\n+        }\n+        return ((COSNumber) num).intValue();\n     }\n \n     /**", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageNode.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/2eacc3e07095d21a7d8aaef18164aa8aad19ee45", "parent": "https://github.com/apache/pdfbox/commit/225b3e490101fd11b65c243d9ea196a0828a849f", "message": "PDFBOX-578: NPE NullPointerException in PDPageNode.getCount\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1053191 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_161", "file": [{"additions": 2, "raw_url": "https://github.com/apache/pdfbox/raw/2eacc3e07095d21a7d8aaef18164aa8aad19ee45/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageNode.java", "blob_url": "https://github.com/apache/pdfbox/blob/2eacc3e07095d21a7d8aaef18164aa8aad19ee45/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageNode.java", "sha": "e9ba71f27fa36ded0c525d7741cd290e4437f4ef", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageNode.java?ref=2eacc3e07095d21a7d8aaef18164aa8aad19ee45", "patch": "@@ -184,6 +184,8 @@ public void getAllKids(List result)\n      */\n     private static COSArray getAllKids(List result, COSDictionary page, boolean recurse)\n     {\n+        if(page == null)\n+            return null;\n         COSArray kids = (COSArray)page.getDictionaryObject( COSName.KIDS );\n         if ( kids == null)\n         {", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageNode.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/5b577131f84a8fa68afc2b8c3faa5d13c89407c3", "parent": "https://github.com/apache/pdfbox/commit/e31b301d83db4aaf12638bd093462c4ec9e4fcff", "message": "PDFBOX-521: fixed NPE which was introduced in revision 1039739\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1039871 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_162", "file": [{"additions": 19, "raw_url": "https://github.com/apache/pdfbox/raw/5b577131f84a8fa68afc2b8c3faa5d13c89407c3/pdfbox/src/main/java/org/apache/pdfbox/util/PDFStreamEngine.java", "blob_url": "https://github.com/apache/pdfbox/blob/5b577131f84a8fa68afc2b8c3faa5d13c89407c3/pdfbox/src/main/java/org/apache/pdfbox/util/PDFStreamEngine.java", "sha": "c979cb6a436ea3f721b6d2f99fbb30f8d984a85a", "changes": 42, "status": "modified", "deletions": 23, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/util/PDFStreamEngine.java?ref=5b577131f84a8fa68afc2b8c3faa5d13c89407c3", "patch": "@@ -335,15 +335,20 @@ public void processEncodedText( byte[] string ) throws IOException\n         //were a single byte will result in two output characters \"fi\"\n         \n         final PDFont font = graphicsState.getTextState().getFont();\n-        // TODO move that to PDFont\n-        boolean isType3Font = font instanceof PDType3Font;\n-        PDMatrix fontMatrix = font.getFontMatrix();\n-        float fontMatrixXScaling = fontMatrix.getValue(0, 0);\n-        float fontMatrixYScaling = fontMatrix.getValue(1, 1);\n-        \n-        //This will typically be 1000 but in the case of a type3 font\n-        //this might be a different number\n-        final float glyphSpaceToTextSpaceFactor = 1f/fontMatrix.getValue( 0, 0 );\n+        // all fonts are providing the width/height of a character in thousandths of a unit of text space\n+        float fontMatrixXScaling = 1/1000f;\n+        float fontMatrixYScaling = 1/1000f;\n+        float glyphSpaceToTextSpaceFactor = 1/1000f;\n+        // expect Type3 fonts, those are providing the width of a character in glyph space units\n+        if (font instanceof PDType3Font)\n+        {\n+            PDMatrix fontMatrix = font.getFontMatrix();\n+            fontMatrixXScaling = fontMatrix.getValue(0, 0);\n+            fontMatrixYScaling = fontMatrix.getValue(1, 1);\n+            //This will typically be 1000 but in the case of a type3 font\n+            //this might be a different number\n+            glyphSpaceToTextSpaceFactor = 1f/fontMatrix.getValue( 0, 0 );\n+        }\n         float spaceWidthText=0;\n         try\n         {   \n@@ -396,19 +401,11 @@ public void processEncodedText( byte[] string ) throws IOException\n             // get the width and height of this character in text units \n             float characterHorizontalDisplacementText = font.getFontWidth( string, i, codeLength );\n             float characterVerticalDisplacementText = font.getFontHeight( string, i, codeLength );\n-            // Type3 fonts are providing the width of a character in glyph space units\n-            if (isType3Font)\n-            {\n-                // multiply the width/height with the scaling factor of the font matrix\n-                characterHorizontalDisplacementText = characterHorizontalDisplacementText * fontMatrixXScaling;\n-                characterVerticalDisplacementText = characterVerticalDisplacementText * fontMatrixYScaling;\n-            }\n-            // all other fonts are providing the width/height of a character in thousandths of a unit of text space\n-            else\n-            {\n-                characterHorizontalDisplacementText = characterHorizontalDisplacementText/1000f;\n-                characterVerticalDisplacementText = characterVerticalDisplacementText/1000f;\n-            }\n+\n+            // multiply the width/height with the scaling factor\n+            characterHorizontalDisplacementText = characterHorizontalDisplacementText * fontMatrixXScaling;\n+            characterVerticalDisplacementText = characterVerticalDisplacementText * fontMatrixYScaling;\n+\n             maxVerticalDisplacementText = \n                 Math.max( \n                     maxVerticalDisplacementText, \n@@ -497,7 +494,6 @@ public void processEncodedText( byte[] string ) throws IOException\n                             fontSizeText,\n                             (int)(fontSizeText * textMatrix.getXScale())\n                             ));\n-\n         }\n     }\n ", "filename": "pdfbox/src/main/java/org/apache/pdfbox/util/PDFStreamEngine.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/77839e0120de3662f12c8bddc364d733bfa048f8", "parent": "https://github.com/apache/pdfbox/commit/7f608c0157b17138a46c33ba533dfb8e47dfffba", "message": "PDFBOX-743: PDAppereanceDictionary#getNormalAppearance might throw NPE\n\nPatch by Philipp Koch\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@956566 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_163", "file": [{"additions": 9, "raw_url": "https://github.com/apache/pdfbox/raw/77839e0120de3662f12c8bddc364d733bfa048f8/pdfbox/src/main/java/org/apache/pdfbox/pdfviewer/PageDrawer.java", "blob_url": "https://github.com/apache/pdfbox/blob/77839e0120de3662f12c8bddc364d733bfa048f8/pdfbox/src/main/java/org/apache/pdfbox/pdfviewer/PageDrawer.java", "sha": "a66b539cd726bb4bab9ac863af6aee079497d19f", "changes": 16, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdfviewer/PageDrawer.java?ref=77839e0120de3662f12c8bddc364d733bfa048f8", "patch": "@@ -124,13 +124,15 @@ public void drawPage( Graphics g, PDPage p, Dimension pageDimension ) throws IOE\n                     appearanceName = \"default\";\n                 }\n                 Map appearanceMap = appearDictionary.getNormalAppearance();\n-                PDAppearanceStream appearance =\n-                    (PDAppearanceStream)appearanceMap.get( appearanceName );\n-                if( appearance != null )\n-                {\n-                    g.translate( (int)rect.getLowerLeftX(), (int)-rect.getLowerLeftY()  );\n-                    processSubStream( page, appearance.getResources(), appearance.getStream() );\n-                    g.translate( (int)-rect.getLowerLeftX(), (int)+rect.getLowerLeftY()  );\n+                if (appearanceMap != null) { \n+                    PDAppearanceStream appearance = \n+                        (PDAppearanceStream)appearanceMap.get( appearanceName ); \n+                    if( appearance != null ) \n+                    { \n+                        g.translate( (int)rect.getLowerLeftX(), (int)-rect.getLowerLeftY() ); \n+                        processSubStream( page, appearance.getResources(), appearance.getStream() ); \n+                        g.translate( (int)-rect.getLowerLeftX(), (int)+rect.getLowerLeftY() ); \n+                    }\n                 }\n             }\n         }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdfviewer/PageDrawer.java"}, {"additions": 5, "raw_url": "https://github.com/apache/pdfbox/raw/77839e0120de3662f12c8bddc364d733bfa048f8/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAppearanceDictionary.java", "blob_url": "https://github.com/apache/pdfbox/blob/77839e0120de3662f12c8bddc364d733bfa048f8/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAppearanceDictionary.java", "sha": "1afc373a9b887e3700a4f4a139c15048d5ede40f", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAppearanceDictionary.java?ref=77839e0120de3662f12c8bddc364d733bfa048f8", "patch": "@@ -85,7 +85,11 @@ public COSBase getCOSObject()\n     public Map getNormalAppearance()\n     {\n         COSBase ap = dictionary.getDictionaryObject( COSName.getPDFName( \"N\" ) );\n-        if( ap instanceof COSStream )\n+        if ( ap == null )\n+        { \n+            return null; \n+        }\n+        else if( ap instanceof COSStream )\n         {\n             COSStream aux = (COSStream) ap;\n             ap = new COSDictionary();", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAppearanceDictionary.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/dee81ef19529525f910a542789008ed58b3f968d", "parent": "https://github.com/apache/pdfbox/commit/2a7896c5e37c184f3e92ab275cca0eec23f586f0", "message": "PDFBOX-421: avoid NPE because of a missing font-cache\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/pdfbox/trunk@742864 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_164", "file": [{"additions": 10, "raw_url": "https://github.com/apache/pdfbox/raw/dee81ef19529525f910a542789008ed58b3f968d/src/main/java/org/apache/pdfbox/pdmodel/PDResources.java", "blob_url": "https://github.com/apache/pdfbox/blob/dee81ef19529525f910a542789008ed58b3f968d/src/main/java/org/apache/pdfbox/pdmodel/PDResources.java", "sha": "f08c553faab31edbc812a01aebc6dd10b7ac07c1", "changes": 16, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/src/main/java/org/apache/pdfbox/pdmodel/PDResources.java?ref=dee81ef19529525f910a542789008ed58b3f968d", "patch": "@@ -121,13 +121,17 @@ public Map getFonts( Map fontCache ) throws IOException\n             {\n                 COSDictionary fontDictionary = (COSDictionary)font;\n                 PDFont newFont = null;\n-                if (fontCache.containsKey(fontName.getName()))\n-                \tnewFont = (PDFont)fontCache.get(fontName.getName());\n-                else {\n-                \tnewFont = PDFontFactory.createFont( fontDictionary );\n-                \tfontCache.put(fontName.getName(), newFont);\n+                if (fontCache != null) {\n+\t                if (fontCache.containsKey(fontName.getName()))\n+\t                \tnewFont = (PDFont)fontCache.get(fontName.getName());\n+\t                else {\n+\t                \tnewFont = PDFontFactory.createFont( fontDictionary );\n+\t                \tfontCache.put(fontName.getName(), newFont);\n+\t                }\n                 }\n-                actuals.put( fontName.getName(), newFont);\n+                else\n+                \tnewFont = PDFontFactory.createFont( fontDictionary );\n+\t            actuals.put( fontName.getName(), newFont);\n             }\n         }\n         return retval;", "filename": "src/main/java/org/apache/pdfbox/pdmodel/PDResources.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/c87d0e2e90552c4afaf0f92b0b93731b85100d2d", "parent": "https://github.com/apache/pdfbox/commit/89530ffa80a76b75b8739f833e3d41950f5600bf", "message": "PDFBOX-2868: avoid NPE in getValueAsString() if there is no value assigned\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1690263 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_165", "file": [{"additions": 2, "raw_url": "https://github.com/apache/pdfbox/raw/c87d0e2e90552c4afaf0f92b0b93731b85100d2d/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDNonTerminalField.java", "blob_url": "https://github.com/apache/pdfbox/blob/c87d0e2e90552c4afaf0f92b0b93731b85100d2d/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDNonTerminalField.java", "sha": "90eb87465fc9b633f239eed891cfa083d179efa6", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDNonTerminalField.java?ref=c87d0e2e90552c4afaf0f92b0b93731b85100d2d", "patch": "@@ -178,7 +178,8 @@ public COSBase getValue()\n     @Override\n     public String getValueAsString()\n     {\n-        return dictionary.getDictionaryObject(COSName.V).toString();\n+        COSBase fieldValue = dictionary.getDictionaryObject(COSName.V);\n+        return fieldValue != null ? fieldValue.toString() : \"\";\n     }\n \n     /**", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDNonTerminalField.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/4c4ed241142a9f78e7fd51f7df1749a011ff0eda", "parent": "https://github.com/apache/pdfbox/commit/c781e42cd9c6aa0ffebf0ce96abf776ccb6a2f18", "message": "PDFBOX-2812: avoid potiential later NPE by assigning local field\nPDFBOX-2576: make field final; improve message\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1681649 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_166", "file": [{"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/4c4ed241142a9f78e7fd51f7df1749a011ff0eda/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java", "blob_url": "https://github.com/apache/pdfbox/blob/4c4ed241142a9f78e7fd51f7df1749a011ff0eda/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java", "sha": "4a66bb7b1670dd630fce9467f23e4e379f23590a", "changes": 7, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java?ref=4c4ed241142a9f78e7fd51f7df1749a011ff0eda", "patch": "@@ -57,7 +57,7 @@\n {\n     private static final Log LOG = LogFactory.getLog(PDICCBased.class);\n \n-    private PDStream stream;\n+    private final PDStream stream;\n     private int numberOfComponents = -1;\n     private ICC_Profile iccProfile;\n     private PDColorSpace alternateColorSpace;\n@@ -72,7 +72,8 @@ public PDICCBased(PDDocument doc)\n     {\n         array = new COSArray();\n         array.add(COSName.ICCBASED);\n-        array.add(new PDStream(doc));\n+        stream = new PDStream(doc);\n+        array.add(stream);\n     }\n \n     /**\n@@ -148,7 +149,7 @@ private void loadICCProfile() throws IOException\n                 // fall back to alternateColorSpace color space\n                 awtColorSpace = null;\n                 alternateColorSpace = getAlternateColorSpace();\n-                LOG.error(\"Can't read embedded ICC profile, using alternate color space: \" + alternateColorSpace.getName());\n+                LOG.error(\"Can't read embedded ICC profile (\" + e.getLocalizedMessage() + \"), using alternate color space: \" + alternateColorSpace.getName());\n                 initialColor = alternateColorSpace.getInitialColor();\n             }\n             else", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/fdb019d531a938b5170a4cd4ecb8bb879c3d474d", "parent": "https://github.com/apache/pdfbox/commit/5519b3d8c1700a62b00adba8d4a6f04ba8b975c6", "message": "PDFBOX-2716: throw IllegalStateException instead of NPE if saveIncremental() called after loading from a stream instead of a file\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1674945 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_167", "file": [{"additions": 6, "raw_url": "https://github.com/apache/pdfbox/raw/fdb019d531a938b5170a4cd4ecb8bb879c3d474d/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java", "blob_url": "https://github.com/apache/pdfbox/blob/fdb019d531a938b5170a4cd4ecb8bb879c3d474d/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java", "sha": "03a0eb555a9723c903b0e4c2534f9d6922ba0111", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java?ref=fdb019d531a938b5170a4cd4ecb8bb879c3d474d", "patch": "@@ -968,13 +968,18 @@ public void save(OutputStream output) throws IOException\n     }\n \n    /**\n-     * Save the PDF as an incremental update.\n+     * Save the PDF as an incremental update. This is only possible if the PDF was loaded from a file.\n      *\n      * @param output stream to write\n      * @throws IOException if the output could not be written\n+     * @throws IllegalStateException if the document was not loaded from a file.\n      */\n     public void saveIncremental(OutputStream output) throws IOException\n     {\n+        if (incrementalFile == null)\n+        {\n+            throw new IllegalStateException(\"Incremental save is only possible if the document was loaded from a file\");\n+        }\n         InputStream input = new RandomAccessBufferedFileInputStream(incrementalFile);\n         COSWriter writer = null;\n         try", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/1f00d2619f0d260e2ee6a955614e882752a006a4", "parent": "https://github.com/apache/pdfbox/commit/07045f5447cb47adeb249b0d2b5e277d2172bb45", "message": "PDFBOX-1094: Avoid NPE when an IOException occurs in a Paint subclass\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1648891 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_168", "file": [{"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/1f00d2619f0d260e2ee6a955614e882752a006a4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingPaint.java", "blob_url": "https://github.com/apache/pdfbox/blob/1f00d2619f0d260e2ee6a955614e882752a006a4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingPaint.java", "sha": "d31fe0009c730aa4ec852a9db89f7949c56cfb6e", "changes": 7, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingPaint.java?ref=1f00d2619f0d260e2ee6a955614e882752a006a4", "patch": "@@ -16,6 +16,7 @@\n  */\n package org.apache.pdfbox.pdmodel.graphics.shading;\n \n+import java.awt.Color;\n import java.awt.Paint;\n import java.awt.PaintContext;\n import java.awt.Rectangle;\n@@ -67,10 +68,10 @@ public PaintContext createContext(ColorModel cm, Rectangle deviceBounds, Rectang\n         {\n             return new AxialShadingContext(shading, cm, xform, matrix, deviceBounds);\n         }\n-        catch (IOException ex)\n+        catch (IOException e)\n         {\n-            LOG.error(ex);\n-            return null;\n+            LOG.error(\"An error occurred while painting\", e);\n+            return new Color(0, 0, 0, 0).createContext(cm, deviceBounds, userBounds, xform, hints);\n         }\n     }\n }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingPaint.java"}, {"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/1f00d2619f0d260e2ee6a955614e882752a006a4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/RadialShadingPaint.java", "blob_url": "https://github.com/apache/pdfbox/blob/1f00d2619f0d260e2ee6a955614e882752a006a4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/RadialShadingPaint.java", "sha": "7e2276c07deed926017ffae4d095fb86140fd74c", "changes": 7, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/RadialShadingPaint.java?ref=1f00d2619f0d260e2ee6a955614e882752a006a4", "patch": "@@ -16,6 +16,7 @@\n  */\r\n package org.apache.pdfbox.pdmodel.graphics.shading;\r\n \r\n+import java.awt.Color;\r\n import java.awt.Paint;\r\n import java.awt.PaintContext;\r\n import java.awt.Rectangle;\r\n@@ -67,10 +68,10 @@ public PaintContext createContext(ColorModel cm, Rectangle deviceBounds, Rectang\n         {\r\n             return new RadialShadingContext(shading, cm, xform, matrix, deviceBounds);\r\n         }\r\n-        catch (IOException ex)\r\n+        catch (IOException e)\r\n         {\r\n-            LOG.error(ex);\r\n-            return null;\r\n+            LOG.error(\"An error occurred while painting\", e);\r\n+            return new Color(0, 0, 0, 0).createContext(cm, deviceBounds, userBounds, xform, hints);\r\n         }\r\n     }\r\n }\r", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/RadialShadingPaint.java"}, {"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/1f00d2619f0d260e2ee6a955614e882752a006a4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type1ShadingPaint.java", "blob_url": "https://github.com/apache/pdfbox/blob/1f00d2619f0d260e2ee6a955614e882752a006a4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type1ShadingPaint.java", "sha": "ba92af9e0455432b6ee590005e97642f3b8fa8f1", "changes": 7, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type1ShadingPaint.java?ref=1f00d2619f0d260e2ee6a955614e882752a006a4", "patch": "@@ -16,6 +16,7 @@\n  */\n package org.apache.pdfbox.pdmodel.graphics.shading;\n \n+import java.awt.Color;\n import java.awt.Paint;\n import java.awt.PaintContext;\n import java.awt.Rectangle;\n@@ -65,10 +66,10 @@ public PaintContext createContext(ColorModel cm, Rectangle deviceBounds, Rectang\n         {\n             return new Type1ShadingContext(shading, cm, xform, matrix, deviceBounds);\n         }\n-        catch (IOException ex)\n+        catch (IOException e)\n         {\n-            LOG.error(ex);\n-            return null;\n+            LOG.error(\"An error occurred while painting\", e);\n+            return new Color(0, 0, 0, 0).createContext(cm, deviceBounds, userBounds, xform, hints);\n         }\n     }\n }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type1ShadingPaint.java"}, {"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/1f00d2619f0d260e2ee6a955614e882752a006a4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type4ShadingPaint.java", "blob_url": "https://github.com/apache/pdfbox/blob/1f00d2619f0d260e2ee6a955614e882752a006a4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type4ShadingPaint.java", "sha": "5294beadf79ff22cf8c979c5c22a0d0831b42bd1", "changes": 7, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type4ShadingPaint.java?ref=1f00d2619f0d260e2ee6a955614e882752a006a4", "patch": "@@ -16,6 +16,7 @@\n  */\n package org.apache.pdfbox.pdmodel.graphics.shading;\n \n+import java.awt.Color;\n import java.awt.Paint;\n import java.awt.PaintContext;\n import java.awt.Rectangle;\n@@ -65,10 +66,10 @@ public PaintContext createContext(ColorModel cm, Rectangle deviceBounds, Rectang\n         {\n             return new Type4ShadingContext(shading, cm, xform, matrix, deviceBounds);\n         }\n-        catch (IOException ex)\n+        catch (IOException e)\n         {\n-            LOG.error(ex);\n-            return null;\n+            LOG.error(\"An error occurred while painting\", e);\n+            return new Color(0, 0, 0, 0).createContext(cm, deviceBounds, userBounds, xform, hints);\n         }\n     }\n }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type4ShadingPaint.java"}, {"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/1f00d2619f0d260e2ee6a955614e882752a006a4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type5ShadingPaint.java", "blob_url": "https://github.com/apache/pdfbox/blob/1f00d2619f0d260e2ee6a955614e882752a006a4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type5ShadingPaint.java", "sha": "e0859c1553b8f2d124d96edb831afec81f4e1f54", "changes": 7, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type5ShadingPaint.java?ref=1f00d2619f0d260e2ee6a955614e882752a006a4", "patch": "@@ -16,6 +16,7 @@\n  */\n package org.apache.pdfbox.pdmodel.graphics.shading;\n \n+import java.awt.Color;\n import java.awt.Paint;\n import java.awt.PaintContext;\n import java.awt.Rectangle;\n@@ -65,10 +66,10 @@ public PaintContext createContext(ColorModel cm, Rectangle deviceBounds, Rectang\n         {\n             return new Type5ShadingContext(shading, cm, xform, matrix, deviceBounds);\n         }\n-        catch (IOException ex)\n+        catch (IOException e)\n         {\n-            LOG.error(ex);\n-            return null;\n+            LOG.error(\"An error occurred while painting\", e);\n+            return new Color(0, 0, 0, 0).createContext(cm, deviceBounds, userBounds, xform, hints);\n         }\n     }\n }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type5ShadingPaint.java"}, {"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/1f00d2619f0d260e2ee6a955614e882752a006a4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type6ShadingPaint.java", "blob_url": "https://github.com/apache/pdfbox/blob/1f00d2619f0d260e2ee6a955614e882752a006a4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type6ShadingPaint.java", "sha": "b3c65c20a472407d91dcfbbf6cd94a7de1bbb4c3", "changes": 7, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type6ShadingPaint.java?ref=1f00d2619f0d260e2ee6a955614e882752a006a4", "patch": "@@ -15,6 +15,7 @@\n  */\n package org.apache.pdfbox.pdmodel.graphics.shading;\n \n+import java.awt.Color;\n import java.awt.Paint;\n import java.awt.PaintContext;\n import java.awt.Rectangle;\n@@ -66,10 +67,10 @@ public PaintContext createContext(ColorModel cm, Rectangle deviceBounds, Rectang\n         {\n             return new Type6ShadingContext(shading, cm, xform, matrix, deviceBounds);\n         }\n-        catch (IOException ex)\n+        catch (IOException e)\n         {\n-            LOG.error(ex);\n-            return null;\n+            LOG.error(\"An error occurred while painting\", e);\n+            return new Color(0, 0, 0, 0).createContext(cm, deviceBounds, userBounds, xform, hints);\n         }\n     }\n }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type6ShadingPaint.java"}, {"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/1f00d2619f0d260e2ee6a955614e882752a006a4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type7ShadingPaint.java", "blob_url": "https://github.com/apache/pdfbox/blob/1f00d2619f0d260e2ee6a955614e882752a006a4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type7ShadingPaint.java", "sha": "4173526678e7f4de23ef1058deadab2565c0f223", "changes": 7, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type7ShadingPaint.java?ref=1f00d2619f0d260e2ee6a955614e882752a006a4", "patch": "@@ -15,6 +15,7 @@\n  */\n package org.apache.pdfbox.pdmodel.graphics.shading;\n \n+import java.awt.Color;\n import java.awt.Paint;\n import java.awt.PaintContext;\n import java.awt.Rectangle;\n@@ -66,10 +67,10 @@ public PaintContext createContext(ColorModel cm, Rectangle deviceBounds, Rectang\n         {\n             return new Type7ShadingContext(shading, cm, xform, matrix, deviceBounds);\n         }\n-        catch (IOException ex)\n+        catch (IOException e)\n         {\n-            LOG.error(ex);\n-            return null;\n+            LOG.error(\"An error occurred while painting\", e);\n+            return new Color(0, 0, 0, 0).createContext(cm, deviceBounds, userBounds, xform, hints);\n         }\n     }\n }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/Type7ShadingPaint.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/39d00b480c4766e67a143a1a79b8c7b4d9998a38", "parent": "https://github.com/apache/pdfbox/commit/7c3d76a7a47253e619bce61aabb28bda4621ba9a", "message": "PDFBOX-2477: avoid NPE in ResourceRef with no child elements; minor code cleanup\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1636417 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_169", "file": [{"additions": 11, "raw_url": "https://github.com/apache/pdfbox/raw/39d00b480c4766e67a143a1a79b8c7b4d9998a38/xmpbox/src/main/java/org/apache/xmpbox/xml/DomXmpParser.java", "blob_url": "https://github.com/apache/pdfbox/blob/39d00b480c4766e67a143a1a79b8c7b4d9998a38/xmpbox/src/main/java/org/apache/xmpbox/xml/DomXmpParser.java", "sha": "1c5d2fb8c5357097edc80d15f90bddee14788bad", "changes": 17, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/xmpbox/src/main/java/org/apache/xmpbox/xml/DomXmpParser.java?ref=39d00b480c4766e67a143a1a79b8c7b4d9998a38", "patch": "@@ -342,8 +342,11 @@ else if (type.type().isStructured())\n                 if (DomHelper.isParseTypeResource(property))\r\n                 {\r\n                     AbstractStructuredType ast = parseLiDescription(xmp, DomHelper.getQName(property), property);\r\n-                    ast.setPrefix(prefix);\r\n-                    container.addProperty(ast);\r\n+                    if (ast != null)\r\n+                    {\r\n+                        ast.setPrefix(prefix);\r\n+                        container.addProperty(ast);\r\n+                    }\r\n                 }\r\n                 else\r\n                 {\r\n@@ -757,12 +760,14 @@ else if ((ln != null) && !(ln.equals(element.getLocalName())))\n      */\r\n     private void removeComments(Node root)\r\n     {\r\n-        if (root.getChildNodes().getLength()<=1) {\r\n+        if (root.getChildNodes().getLength()<=1) \r\n+        {\r\n             // There is only one node so we do not remove it\r\n             return;\r\n         }\r\n         NodeList nl = root.getChildNodes();\r\n-        for (int i=0; i < nl.getLength() ; i ++) {\r\n+        for (int i=0; i < nl.getLength() ; i ++) \r\n+        {\r\n             Node node = nl.item(i);\r\n             if (node instanceof Comment)\r\n             {\r\n@@ -771,7 +776,7 @@ private void removeComments(Node root)\n             }\r\n             else if (node instanceof Text)\r\n             {\r\n-                if (node.getTextContent().trim().length() == 0)\r\n+                if (node.getTextContent().trim().isEmpty())\r\n                 {\r\n                         root.removeChild(node);\r\n                 }\r\n@@ -837,7 +842,7 @@ private PropertyType checkPropertyDefinition(XMPMetadata xmp, QName prop) throws\n     protected class NamespaceFinder\r\n     {\r\n \r\n-        private Stack<Map<String, String>> stack = new Stack<Map<String, String>>();\r\n+        private final Stack<Map<String, String>> stack = new Stack<Map<String, String>>();\r\n \r\n         protected void push(Element description)\r\n         {\r", "filename": "xmpbox/src/main/java/org/apache/xmpbox/xml/DomXmpParser.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/2c7ac0e13a2b65c0f107cbf2534e6bae3811a9ac", "parent": "https://github.com/apache/pdfbox/commit/a0c485c5d03f38a9522b52f30974994d8d9e3f77", "message": "PDFBOX-2318: avoid NPE when parsing a XMP-file containing an undefined type as proposed by Jeremy Anderson\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1631175 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_170", "file": [{"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/2c7ac0e13a2b65c0f107cbf2534e6bae3811a9ac/xmpbox/pom.xml", "blob_url": "https://github.com/apache/pdfbox/blob/2c7ac0e13a2b65c0f107cbf2534e6bae3811a9ac/xmpbox/pom.xml", "sha": "9be76b16bd5e6ccfb02e8f6bf43ebc3f11b80935", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/xmpbox/pom.xml?ref=2c7ac0e13a2b65c0f107cbf2534e6bae3811a9ac", "patch": "@@ -42,6 +42,10 @@\n \t\t\t<artifactId>commons-io</artifactId>\n \t\t\t<scope>test</scope>\n \t\t</dependency>\n+        <dependency>\n+            <groupId>commons-logging</groupId>\n+            <artifactId>commons-logging</artifactId>\n+        </dependency>\n \t</dependencies>\n \n \t<build>", "filename": "xmpbox/pom.xml"}, {"additions": 34, "raw_url": "https://github.com/apache/pdfbox/raw/2c7ac0e13a2b65c0f107cbf2534e6bae3811a9ac/xmpbox/src/main/java/org/apache/xmpbox/xml/DomXmpParser.java", "blob_url": "https://github.com/apache/pdfbox/blob/2c7ac0e13a2b65c0f107cbf2534e6bae3811a9ac/xmpbox/src/main/java/org/apache/xmpbox/xml/DomXmpParser.java", "sha": "f2c6a872f4f111fd35566ab7cdf88962cc1daafe", "changes": 42, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/xmpbox/src/main/java/org/apache/xmpbox/xml/DomXmpParser.java?ref=2c7ac0e13a2b65c0f107cbf2534e6bae3811a9ac", "patch": "@@ -37,6 +37,8 @@\n import javax.xml.parsers.DocumentBuilderFactory;\n import javax.xml.parsers.ParserConfigurationException;\n \n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n import org.apache.xmpbox.XMPMetadata;\n import org.apache.xmpbox.XmpConstants;\n import org.apache.xmpbox.schema.XMPSchema;\n@@ -68,6 +70,12 @@\n public class DomXmpParser\n {\n \n+    /**\n+     * Log instance.\n+     */\n+    private static final Log LOG = LogFactory.getLog(DomXmpParser.class);\n+\n+\n     private DocumentBuilder dBuilder;\n \n     private NamespaceFinder nsFinder;\n@@ -230,19 +238,37 @@ else if (attr.getPrefix() == null && XmpConstants.ABOUT_NAME.equals(attr.getLoca\n                 {\n                     String namespace = attr.getNamespaceURI();\n                     XMPSchema schema = xmp.getSchema(namespace);\n-                    if (schema == null)\n+                    if (schema == null && tm.getSchemaFactory(namespace) != null)\n                     {\n                         schema = tm.getSchemaFactory(namespace).createXMPSchema(xmp, attr.getPrefix());\n                         loadAttributes(schema, description);\n                     }\n-                    ComplexPropertyContainer container = schema.getContainer();\n-                    PropertyType type = checkPropertyDefinition(xmp,\n-                            new QName(attr.getNamespaceURI(), attr.getLocalName()));\n-                    AbstractSimpleProperty sp = tm.instanciateSimpleProperty(namespace, schema.getPrefix(),\n-                            attr.getLocalName(), attr.getValue(), type.type());\n-                    container.addProperty(sp);\n+                    // Only process when a schema was successfully found\n+                    if( schema != null )\n+                    {\n+                        ComplexPropertyContainer container = schema.getContainer();\n+                        PropertyType type = checkPropertyDefinition(xmp,\n+                                new QName(attr.getNamespaceURI(), attr.getLocalName()));\n+                        \n+                        //Default to text if no type is found\n+                        if( type == null) \n+                        {\n+                            type = TypeMapping.createPropertyType(Types.Text, Cardinality.Simple);\n+                        }\n+                                           \n+                        try\n+                        {\n+                            AbstractSimpleProperty sp = tm.instanciateSimpleProperty(namespace, schema.getPrefix(),\n+                                    attr.getLocalName(), attr.getValue(), type.type());\n+                            container.addProperty(sp);\n+                        }\n+                        catch( IllegalArgumentException exception)\n+                        {\n+                            //Swallow, and continue adding additional properties\n+                            LOG.warn(\"Unable to add property: \"+ attr.getLocalName() + \" value: \"+attr.getValue(),exception);\n+                        }\n+                    }\n                 }\n-\n             }\n             // parse children elements as properties\n             for (Element property : properties)", "filename": "xmpbox/src/main/java/org/apache/xmpbox/xml/DomXmpParser.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/9b4d6e5484ec2db24aac3b2e673730abd28f92f4", "parent": "https://github.com/apache/pdfbox/commit/3d44d53b62654548ab63d75890e6b02ddad44d59", "message": "PDFBOX-2020: avoid NPE if there is no colorspaces resource; minor code cleanup\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1614460 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_171", "file": [{"additions": 12, "raw_url": "https://github.com/apache/pdfbox/raw/9b4d6e5484ec2db24aac3b2e673730abd28f92f4/preflight/src/main/java/org/apache/pdfbox/preflight/content/PreflightStreamEngine.java", "blob_url": "https://github.com/apache/pdfbox/blob/9b4d6e5484ec2db24aac3b2e673730abd28f92f4/preflight/src/main/java/org/apache/pdfbox/preflight/content/PreflightStreamEngine.java", "sha": "495eccd1f21694aa772387c32fbca9512682bd08", "changes": 22, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/preflight/src/main/java/org/apache/pdfbox/preflight/content/PreflightStreamEngine.java?ref=9b4d6e5484ec2db24aac3b2e673730abd28f92f4", "patch": "@@ -213,6 +213,7 @@ public PreflightStreamEngine(PreflightContext _context, PDPage _page)\n         registerOperatorProcessor(\"sh\", stubOp);\n     }\n \n+    @Override\n     public final void registerOperatorProcessor(String operator, OperatorProcessor op)\n     {\n         super.registerOperatorProcessor(operator, op);\n@@ -248,7 +249,6 @@ else if (arguments.get(0) instanceof String)\n             {\n                 registerError(\"Unexpected value '\" + arguments.get(0) + \"' for ri operand. \",\n                         ERROR_GRAPHIC_UNEXPECTED_VALUE_FOR_KEY);\n-                return;\n             }\n         }\n     }\n@@ -267,7 +267,6 @@ protected void validNumberOfGraphicStates(Operator operator) throws ContentStrea\n             if (numberOfGraphicStates > MAX_GRAPHIC_STATES)\n             {\n                 registerError(\"Too many graphic states\", ERROR_GRAPHIC_TOO_MANY_GRAPHIC_STATES);\n-                return;\n             }\n         }\n     }\n@@ -319,13 +318,17 @@ protected void validImageColorSpace(Operator operator) throws IOException\n                 {\n                     // The color space is unknown. Try to access the resources dictionary,\n                     // the color space can be a reference.\n-                    PDColorSpace pdCS = (PDColorSpace) this.getResources().getColorSpaces().get(colorSpace);\n-                    if (pdCS != null)\n+                    Map<String, PDColorSpace> colorSpaces = this.getResources().getColorSpaces();\n+                    if (colorSpaces != null)\n                     {\n-                        cs = ColorSpaces.valueOf(pdCS.getName());\n-                        PreflightConfiguration cfg = context.getConfig();\n-                        ColorSpaceHelperFactory csFact = cfg.getColorSpaceHelperFact();\n-                        csHelper = csFact.getColorSpaceHelper(context, pdCS, ColorSpaceRestriction.ONLY_DEVICE);\n+                        PDColorSpace pdCS = colorSpaces.get(colorSpace);\n+                        if (pdCS != null)\n+                        {\n+                            cs = ColorSpaces.valueOf(pdCS.getName());\n+                            PreflightConfiguration cfg = context.getConfig();\n+                            ColorSpaceHelperFactory csFact = cfg.getColorSpaceHelperFact();\n+                            csHelper = csFact.getColorSpaceHelper(context, pdCS, ColorSpaceRestriction.ONLY_DEVICE);\n+                        }\n                     }\n                 }\n \n@@ -397,7 +400,6 @@ protected void checkColorOperators(String operation) throws ContentStreamExcepti\n                 // The default fill color needs an OutputIntent\n                 registerError(\"The operator \\\"\" + operation + \"\\\" can't be used without Color Profile\",\n                         ERROR_GRAPHIC_INVALID_COLOR_SPACE_MISSING);\n-                return;\n             }\n         }\n     }\n@@ -514,7 +516,7 @@ protected void checkSetColorSpaceOperators(Operator operator, List<?> arguments)\n             return;\n         }\n \n-        String colorSpaceName = null;\n+        String colorSpaceName;\n         if (arguments.get(0) instanceof String)\n         {\n             colorSpaceName = (String) arguments.get(0);", "filename": "preflight/src/main/java/org/apache/pdfbox/preflight/content/PreflightStreamEngine.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/4ade6aeb94c730da42a9afd15dd3b54c8813528b", "parent": "https://github.com/apache/pdfbox/commit/47f7a4be1e4fb7c5c342a8064c5a6ca64d70d087", "message": "PDFBOX-2126: avoid NPE when cloning an instance which was created using the default constructor\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1606525 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_172", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/4ade6aeb94c730da42a9afd15dd3b54c8813528b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/state/PDGraphicsState.java", "blob_url": "https://github.com/apache/pdfbox/blob/4ade6aeb94c730da42a9afd15dd3b54c8813528b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/state/PDGraphicsState.java", "sha": "a608d619ebb8681a4952408a811ac39d320e3aab", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/state/PDGraphicsState.java?ref=4ade6aeb94c730da42a9afd15dd3b54c8813528b", "patch": "@@ -19,7 +19,6 @@\n import java.awt.BasicStroke;\n import java.awt.Composite;\n import java.awt.Rectangle;\n-import java.awt.Shape;\n import java.awt.geom.Area;\n import java.awt.geom.GeneralPath;\n \n@@ -74,6 +73,7 @@\n      */\n     public PDGraphicsState()\n     {\n+        clippingPath = new Area();\n     }\n \n     /**", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/state/PDGraphicsState.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/6e4a3c31f0da2926a758e515a59525e0caa0a452", "parent": "https://github.com/apache/pdfbox/commit/71963887e722b6ea6e713d925f1712edcc671aaa", "message": "PDFBOX-2158: be lenient / avoid NPE with bad decode arrays; be lenient towards fonts with lineTo without moveTo\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1605545 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_173", "file": [{"additions": 18, "raw_url": "https://github.com/apache/pdfbox/raw/6e4a3c31f0da2926a758e515a59525e0caa0a452/fontbox/src/main/java/org/apache/fontbox/cff/Type1CharString.java", "blob_url": "https://github.com/apache/pdfbox/blob/6e4a3c31f0da2926a758e515a59525e0caa0a452/fontbox/src/main/java/org/apache/fontbox/cff/Type1CharString.java", "sha": "4e17a7f171d2c05189b69fe5560f30b743f5a730", "changes": 20, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/cff/Type1CharString.java?ref=6e4a3c31f0da2926a758e515a59525e0caa0a452", "patch": "@@ -333,7 +333,15 @@ private void rlineTo(Number dx, Number dy)\n     {\n         float x = (float)current.getX() + dx.floatValue();\n         float y = (float)current.getY() + dy.floatValue();\n-        path.lineTo(x, y);\n+        if (path.getCurrentPoint() == null)\n+        {\n+            LOG.warn(\"rlineTo without initial moveTo in font \" + fontName + \", glyph \" + glyphName);\n+            path.moveTo(x, y);\n+        }\n+        else\n+        {\n+            path.lineTo(x, y);\n+        }\n         current.setLocation(x, y);\n     }\n \n@@ -349,7 +357,15 @@ private void rrcurveTo(Number dx1, Number dy1, Number dx2, Number dy2,\n         float y2 = y1 + dy2.floatValue();\n         float x3 = x2 + dx3.floatValue();\n         float y3 = y2 + dy3.floatValue();\n-        path.curveTo(x1, y1, x2, y2, x3, y3);\n+        if (path.getCurrentPoint() == null)\n+        {\n+            LOG.warn(\"rrcurveTo without initial moveTo in font \" + fontName + \", glyph \" + glyphName);\n+            path.moveTo(x3, y3);\n+        }\n+        else\n+        {\n+            path.curveTo(x1, y1, x2, y2, x3, y3);\n+        }\n         current.setLocation(x3, y3);\n     }\n ", "filename": "fontbox/src/main/java/org/apache/fontbox/cff/Type1CharString.java"}, {"additions": 10, "raw_url": "https://github.com/apache/pdfbox/raw/6e4a3c31f0da2926a758e515a59525e0caa0a452/pdfbox/src/main/java/org/apache/pdfbox/cos/COSNull.java", "blob_url": "https://github.com/apache/pdfbox/blob/6e4a3c31f0da2926a758e515a59525e0caa0a452/pdfbox/src/main/java/org/apache/pdfbox/cos/COSNull.java", "sha": "1473c3d4d4cda8636c96ff4c7abb2c9673e7c446", "changes": 10, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/cos/COSNull.java?ref=6e4a3c31f0da2926a758e515a59525e0caa0a452", "patch": "@@ -52,6 +52,7 @@ private COSNull()\n      * @return any object, depending on the visitor implementation, or null\n      * @throws IOException If an error occurs while visiting this object.\n      */\n+    @Override\n     public Object accept( ICOSVisitor  visitor ) throws IOException\n     {\n         return visitor.visitFromNull( this );\n@@ -67,4 +68,13 @@ public void writePDF( OutputStream output ) throws IOException\n     {\n         output.write(NULL_BYTES);\n     }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public String toString()\n+    {\n+        return \"COSNull{}\";\n+    }\n }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/cos/COSNull.java"}, {"additions": 24, "raw_url": "https://github.com/apache/pdfbox/raw/6e4a3c31f0da2926a758e515a59525e0caa0a452/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java", "blob_url": "https://github.com/apache/pdfbox/blob/6e4a3c31f0da2926a758e515a59525e0caa0a452/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java", "sha": "13dd32d26f5ee3704ad3487a3857ae9c20784b5d", "changes": 39, "status": "modified", "deletions": 15, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java?ref=6e4a3c31f0da2926a758e515a59525e0caa0a452", "patch": "@@ -37,6 +37,8 @@\n \n import javax.imageio.stream.ImageInputStream;\n import javax.imageio.stream.MemoryCacheImageInputStream;\n+import org.apache.pdfbox.cos.COSFloat;\n+import org.apache.pdfbox.cos.COSNumber;\n import org.apache.pdfbox.pdmodel.common.PDMemoryStream;\n \n /**\n@@ -420,24 +422,31 @@ private static BufferedImage applyColorKeyMask(BufferedImage image, BufferedImag\n \n         if (cosDecode != null)\n         {\n-            decode = cosDecode.toFloatArray();\n-\n-            // if ImageMask is true then decode must be [0 1] or [1 0]\n-            if (pdImage.isStencil() && (decode.length != 2 ||\n-                decode[0] < 0 || decode[0] > 1 ||\n-                decode[1] < 0 || decode[1] > 1))\n+            int numberOfComponents = pdImage.getColorSpace().getNumberOfComponents();\n+            if (cosDecode.size() != numberOfComponents * 2)\n             {\n-                LOG.warn(\"Ignored invalid decode array: not compatible with ImageMask\");\n-                decode = null;\n+                if (pdImage.isStencil() && cosDecode.size() >= 2\n+                        && cosDecode.get(0) instanceof COSNumber\n+                        && cosDecode.get(1) instanceof COSNumber)\n+                {\n+                    float decode0 = ((COSFloat) cosDecode.get(0)).floatValue();\n+                    float decode1 = ((COSFloat) cosDecode.get(1)).floatValue();\n+                    if (decode0 >= 0 && decode0 <= 1 && decode1 >= 0 && decode1 <= 1)\n+                    {\n+                        LOG.warn(\"decode array \" + cosDecode\n+                                + \" not compatible with color space, using the first two entries\");\n+                        return new float[]\n+                        {\n+                            decode0, decode1\n+                        };\n+                    }\n+                }\n+                LOG.error(\"decode array \" + cosDecode\n+                        + \" not compatible with color space, using default\");\n             }\n-\n-            // otherwise, its length shall be twice the number of colour\n-            // components required by ColorSpace\n-            int n = pdImage.getColorSpace().getNumberOfComponents();\n-            if (decode != null && decode.length != n * 2)\n+            else\n             {\n-                LOG.warn(\"Ignored invalid decode array: not compatible with color space\");\n-                decode = null;\n+                decode = cosDecode.toFloatArray();\n             }\n         }\n ", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/ecb2f58c6871b8da8f2bc5561c4b3124ca361afe", "parent": "https://github.com/apache/pdfbox/commit/e46676736abe6f8d25ecb6adc2e80e5b11903c00", "message": "PDFBOX-2149: avoid, NPE, as not all fonts have a font descriptor\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1603854 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_174", "file": [{"additions": 6, "raw_url": "https://github.com/apache/pdfbox/raw/ecb2f58c6871b8da8f2bc5561c4b3124ca361afe/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java", "blob_url": "https://github.com/apache/pdfbox/blob/ecb2f58c6871b8da8f2bc5561c4b3124ca361afe/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java", "sha": "45baa765d82a39b77c42346ba9121b69c869e836", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java?ref=ecb2f58c6871b8da8f2bc5561c4b3124ca361afe", "patch": "@@ -691,7 +691,12 @@ public boolean isTrueTypeFont()\n      */\n     public boolean isSymbolicFont()\n     {\n-        return getFontDescriptor().isSymbolic();\n+        // not all fonts have a font descriptor\n+        if (getFontDescriptor() != null)\n+        {\n+            return getFontDescriptor().isSymbolic();\n+        }\n+        return false;\n     }\n \n     /**", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/a331c9cd37892de63e43fa46017995e974d6c5c2", "parent": "https://github.com/apache/pdfbox/commit/1a114eeaeff32a23a0b524c0b45453ea73e3a38c", "message": "PDFBOX-1412: avoid NPE when iterating through the kids of a field\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1536173 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_175", "file": [{"additions": 55, "raw_url": "https://github.com/apache/pdfbox/raw/a331c9cd37892de63e43fa46017995e974d6c5c2/examples/src/main/java/org/apache/pdfbox/examples/fdf/PrintFields.java", "blob_url": "https://github.com/apache/pdfbox/blob/a331c9cd37892de63e43fa46017995e974d6c5c2/examples/src/main/java/org/apache/pdfbox/examples/fdf/PrintFields.java", "sha": "f294e7681c43aa894a54835d876f0b883e79342e", "changes": 102, "status": "modified", "deletions": 47, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/examples/src/main/java/org/apache/pdfbox/examples/fdf/PrintFields.java?ref=a331c9cd37892de63e43fa46017995e974d6c5c2", "patch": "@@ -17,36 +17,35 @@\n package org.apache.pdfbox.examples.fdf;\n \n import java.io.IOException;\n-\n import java.util.Iterator;\n import java.util.List;\n \n-import org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm;\n-import org.apache.pdfbox.pdmodel.interactive.form.PDField;\n-\n import org.apache.pdfbox.exceptions.CryptographyException;\n import org.apache.pdfbox.exceptions.InvalidPasswordException;\n-\n import org.apache.pdfbox.pdmodel.PDDocument;\n import org.apache.pdfbox.pdmodel.PDDocumentCatalog;\n+import org.apache.pdfbox.pdmodel.common.COSObjectable;\n+import org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm;\n+import org.apache.pdfbox.pdmodel.interactive.form.PDField;\n+import org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField;\n \n /**\n  * This example will take a PDF document and print all the fields from the file.\n- *\n+ * \n  * @author <a href=\"mailto:ben@benlitchfield.com\">Ben Litchfield</a>\n- * @version $Revision: 1.16 $\n+ * \n  */\n public class PrintFields\n {\n \n     /**\n      * This will print all the fields from the document.\n-     *\n+     * \n      * @param pdfDocument The PDF to get the fields from.\n-     *\n+     * \n      * @throws IOException If there is an error getting the fields.\n      */\n-    public void printFields( PDDocument pdfDocument ) throws IOException\n+    public void printFields(PDDocument pdfDocument) throws IOException\n     {\n         PDDocumentCatalog docCatalog = pdfDocument.getDocumentCatalog();\n         PDAcroForm acroForm = docCatalog.getAcroForm();\n@@ -55,51 +54,59 @@ public void printFields( PDDocument pdfDocument ) throws IOException\n \n         System.out.println(new Integer(fields.size()).toString() + \" top-level fields were found on the form\");\n \n-        while( fieldsIter.hasNext())\n+        while (fieldsIter.hasNext())\n         {\n-            PDField field = (PDField)fieldsIter.next();\n-               processField(field, \"|--\", field.getPartialName());\n+            PDField field = (PDField) fieldsIter.next();\n+            processField(field, \"|--\", field.getPartialName());\n         }\n     }\n \n     private void processField(PDField field, String sLevel, String sParent) throws IOException\n     {\n-        List kids = field.getKids();\n-        if(kids != null)\n+        List<COSObjectable> kids = field.getKids();\n+        if (kids != null)\n         {\n-            Iterator kidsIter = kids.iterator();\n-            if(!sParent.equals(field.getPartialName()))\n+            Iterator<COSObjectable> kidsIter = kids.iterator();\n+            if (!sParent.equals(field.getPartialName()))\n             {\n-               sParent = sParent + \".\" + field.getPartialName();\n+                sParent = sParent + \".\" + field.getPartialName();\n             }\n             System.out.println(sLevel + sParent);\n-            //System.out.println(sParent + \" is of type \" + field.getClass().getName());\n-            while(kidsIter.hasNext())\n+            // System.out.println(sParent + \" is of type \" + field.getClass().getName());\n+            while (kidsIter.hasNext())\n+            {\n+                Object pdfObj = kidsIter.next();\n+                if (pdfObj instanceof PDField)\n+                {\n+                    PDField kid = (PDField) pdfObj;\n+                    processField(kid, \"|  \" + sLevel, sParent);\n+                }\n+            }\n+        }\n+        else\n+        {\n+            String fieldValue = null;\n+            if (field instanceof PDSignatureField)\n             {\n-               Object pdfObj = kidsIter.next();\n-               if(pdfObj instanceof PDField)\n-               {\n-                   PDField kid = (PDField)pdfObj;\n-                   processField(kid, \"|  \" + sLevel, sParent);\n-               }\n+                // PDSignature doesn't have a value\n+                fieldValue = \"PDSignatureField\";\n             }\n-         }\n-         else\n-         {\n-             String outputString = sLevel + sParent + \".\" + field.getPartialName() + \" = \" + field.getValue() +\n-                 \",  type=\" + field.getClass().getName();\n-\n-             System.out.println(outputString);\n-         }\n+            else\n+            {\n+                fieldValue = field.getValue();\n+            }\n+            String outputString = sLevel + sParent + \".\" + field.getPartialName() + \" = \" + fieldValue + \",  type=\"\n+                    + field.getClass().getName();\n+            System.out.println(outputString);\n+        }\n     }\n \n     /**\n-     * This will read a PDF file and print out the form elements.\n-     * <br />\n+     * This will read a PDF file and print out the form elements. <br />\n      * see usage() for commandline\n-     *\n+     * \n      * @param args command line arguments\n-     *\n+     * \n      * @throws IOException If there is an error importing the FDF document.\n      * @throws CryptographyException If there is an error decrypting the document.\n      */\n@@ -108,42 +115,43 @@ public static void main(String[] args) throws IOException, CryptographyException\n         PDDocument pdf = null;\n         try\n         {\n-            if( args.length != 1 )\n+            if (args.length != 1)\n             {\n                 usage();\n             }\n             else\n             {\n-                pdf = PDDocument.load( args[0] );\n+                pdf = PDDocument.load(args[0]);\n                 PrintFields exporter = new PrintFields();\n-                if( pdf.isEncrypted() )\n+                if (pdf.isEncrypted())\n                 {\n                     try\n                     {\n-                        pdf.decrypt( \"\" );\n+                        pdf.decrypt(\"\");\n                     }\n-                    catch( InvalidPasswordException e )\n+                    catch (InvalidPasswordException e)\n                     {\n-                        System.err.println( \"Error: The document is encrypted.\" );\n+                        System.err.println(\"Error: The document is encrypted.\");\n                         usage();\n                     }\n                 }\n-                exporter.printFields( pdf );\n+                exporter.printFields(pdf);\n             }\n         }\n         finally\n         {\n-            if( pdf != null )\n+            if (pdf != null)\n             {\n                 pdf.close();\n             }\n         }\n     }\n+\n     /**\n      * This will print out a message telling how to use this example.\n      */\n     private static void usage()\n     {\n-        System.err.println( \"usage: org.apache.pdfbox.examples.fdf.PrintFields <pdf-file>\" );\n+        System.err.println(\"usage: org.apache.pdfbox.examples.fdf.PrintFields <pdf-file>\");\n     }\n }", "filename": "examples/src/main/java/org/apache/pdfbox/examples/fdf/PrintFields.java"}, {"additions": 178, "raw_url": "https://github.com/apache/pdfbox/raw/a331c9cd37892de63e43fa46017995e974d6c5c2/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDField.java", "blob_url": "https://github.com/apache/pdfbox/blob/a331c9cd37892de63e43fa46017995e974d6c5c2/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDField.java", "sha": "c9742b067a420b3f4b1fe712e33164778c455f69", "changes": 369, "status": "modified", "deletions": 191, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDField.java?ref=a331c9cd37892de63e43fa46017995e974d6c5c2", "patch": "@@ -16,34 +16,28 @@\n  */\n package org.apache.pdfbox.pdmodel.interactive.form;\n \n-import org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions;\n-import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget;\n-\n-import org.apache.pdfbox.pdmodel.common.COSArrayList;\n-import org.apache.pdfbox.pdmodel.common.COSObjectable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n \n import org.apache.pdfbox.cos.COSArray;\n import org.apache.pdfbox.cos.COSBase;\n import org.apache.pdfbox.cos.COSDictionary;\n import org.apache.pdfbox.cos.COSInteger;\n import org.apache.pdfbox.cos.COSName;\n-\n+import org.apache.pdfbox.pdmodel.common.COSArrayList;\n+import org.apache.pdfbox.pdmodel.common.COSObjectable;\n import org.apache.pdfbox.pdmodel.common.PDTextStream;\n-\n import org.apache.pdfbox.pdmodel.fdf.FDFField;\n+import org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions;\n+import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget;\n import org.apache.pdfbox.util.BitFlagHelper;\n \n-import java.io.IOException;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n /**\n- * This is the superclass for a Field element in a PDF.\n- * Based on the COS object model from PDFBox.\n- *\n+ * This is the superclass for a Field element in a PDF. Based on the COS object model from PDFBox.\n+ * \n  * @author sug\n- * @version $Revision: 1.23 $\n+ * \n  */\n public abstract class PDField implements COSObjectable\n {\n@@ -60,28 +54,25 @@\n      */\n     public static final int FLAG_NO_EXPORT = 1 << 2;\n \n-\n     private PDAcroForm acroForm;\n \n     private COSDictionary dictionary;\n \n     /**\n      * Constructor.\n-     *\n+     * \n      * @param theAcroForm The form that this field is part of.\n      */\n-    public PDField( PDAcroForm theAcroForm )\n+    public PDField(PDAcroForm theAcroForm)\n     {\n         acroForm = theAcroForm;\n         dictionary = new COSDictionary();\n-        //no required fields in base field class\n+        // no required fields in base field class\n     }\n \n-\n     /**\n-     * Creates a COSField from a COSDictionary, expected to be\n-     * a correct object definition for a field in PDF.\n-     *\n+     * Creates a COSField from a COSDictionary, expected to be a correct object definition for a field in PDF.\n+     * \n      * @param theAcroForm The form that this field is part of.\n      * @param field the PDF objet to represent as a field.\n      */\n@@ -93,42 +84,41 @@ public PDField(PDAcroForm theAcroForm, COSDictionary field)\n \n     /**\n      * Returns the partial name of the field.\n-     *\n+     * \n      * @return the name of the field\n      */\n     public String getPartialName()\n     {\n-        return getDictionary().getString( COSName.T );\n+        return getDictionary().getString(COSName.T);\n     }\n \n     /**\n      * This will set the partial name of the field.\n-     *\n+     * \n      * @param name The new name for the field.\n      */\n-    public void setPartialName( String name )\n+    public void setPartialName(String name)\n     {\n-        getDictionary().setString( COSName.T, name );\n+        getDictionary().setString(COSName.T, name);\n     }\n \n     /**\n-     * Returns the fully qualified name of the field, which is a concatenation of\n-     * the names of all the parents fields.\n-     *\n+     * Returns the fully qualified name of the field, which is a concatenation of the names of all the parents fields.\n+     * \n      * @return the name of the field\n-     *\n+     * \n      * @throws IOException If there is an error generating the fully qualified name.\n      */\n     public String getFullyQualifiedName() throws IOException\n     {\n         PDField parent = getParent();\n         String parentName = null;\n-        if( parent != null )\n+        if (parent != null)\n         {\n             parentName = parent.getFullyQualifiedName();\n         }\n         String finalName = getPartialName();\n-        if( parentName != null )\n+        if (parentName != null)\n         {\n             finalName = parentName + \".\" + finalName;\n         }\n@@ -156,135 +146,132 @@ public void setAlternateFieldName(String alternateFieldName)\n     }\n \n     /**\n-     * Get the FT entry of the field.  This is a read only field and is set depending\n-     * on the actual type.  The field type is an inheritable attribute.  This method will\n-     * return only the direct value on this object.  Use the findFieldType for an upward\n-     * recursive search.\n-     *\n+     * Get the FT entry of the field. This is a read only field and is set depending on the actual type. The field type\n+     * is an inheritable attribute. This method will return only the direct value on this object. Use the findFieldType\n+     * for an upward recursive search.\n+     * \n      * @return The Field type.\n-     *\n+     * \n      * @see PDField#findFieldType()\n      */\n     public String getFieldType()\n     {\n-        return getDictionary().getNameAsString( COSName.FT );\n+        return getDictionary().getNameAsString(COSName.FT);\n     }\n \n     /**\n-     * Find the field type and optionally do a recursive upward search.  Sometimes the fieldtype\n-     * will be specified on the parent instead of the direct object.  This will look at this\n-     * object for the field type, if none is specified then it will look to the parent if there\n-     * is a parent.  If there is no parent and no field type has been found then this\n+     * Find the field type and optionally do a recursive upward search. Sometimes the fieldtype will be specified on the\n+     * parent instead of the direct object. This will look at this object for the field type, if none is specified then\n+     * it will look to the parent if there is a parent. If there is no parent and no field type has been found then this\n      * will return null.\n-     *\n+     * \n      * @return The field type or null if none was found.\n      */\n     public String findFieldType()\n     {\n-        return findFieldType( getDictionary() );\n+        return findFieldType(getDictionary());\n     }\n \n-    private String findFieldType( COSDictionary dic )\n+    private String findFieldType(COSDictionary dic)\n     {\n-        String retval = dic.getNameAsString( COSName.FT );\n-        if( retval == null )\n+        String retval = dic.getNameAsString(COSName.FT);\n+        if (retval == null)\n         {\n-            COSDictionary parent = (COSDictionary)dic.getDictionaryObject( COSName.PARENT, COSName.P );\n-            if( parent != null )\n+            COSDictionary parent = (COSDictionary) dic.getDictionaryObject(COSName.PARENT, COSName.P);\n+            if (parent != null)\n             {\n-                retval = findFieldType( parent );\n+                retval = findFieldType(parent);\n             }\n         }\n         return retval;\n \n     }\n \n-\n     /**\n      * setValue sets the fields value to a given string.\n-     *\n+     * \n      * @param value the string value\n-     *\n+     * \n      * @throws IOException If there is an error creating the appearance stream.\n      */\n     public abstract void setValue(String value) throws IOException;\n \n     /**\n      * getValue gets the fields value to as a string.\n-     *\n+     * \n      * @return The string value of this field.\n-     *\n+     * \n      * @throws IOException If there is an error getting the value.\n      */\n     public abstract String getValue() throws IOException;\n \n     /**\n      * sets the field to be read-only.\n-     *\n+     * \n      * @param readonly The new flag for readonly.\n      */\n     public void setReadonly(boolean readonly)\n     {\n-        BitFlagHelper.setFlag( getDictionary(), COSName.FF, FLAG_READ_ONLY, readonly );\n+        BitFlagHelper.setFlag(getDictionary(), COSName.FF, FLAG_READ_ONLY, readonly);\n     }\n \n     /**\n-     *\n+     * \n      * @return true if the field is readonly\n      */\n     public boolean isReadonly()\n     {\n-        return BitFlagHelper.getFlag( getDictionary(), COSName.FF, FLAG_READ_ONLY );\n+        return BitFlagHelper.getFlag(getDictionary(), COSName.FF, FLAG_READ_ONLY);\n     }\n \n     /**\n      * sets the field to be required.\n-     *\n+     * \n      * @param required The new flag for required.\n      */\n     public void setRequired(boolean required)\n     {\n-        BitFlagHelper.setFlag( getDictionary(), COSName.FF, FLAG_REQUIRED, required );\n+        BitFlagHelper.setFlag(getDictionary(), COSName.FF, FLAG_REQUIRED, required);\n     }\n \n     /**\n-     *\n+     * \n      * @return true if the field is required\n      */\n     public boolean isRequired()\n     {\n-        return BitFlagHelper.getFlag( getDictionary(), COSName.FF, FLAG_REQUIRED );\n+        return BitFlagHelper.getFlag(getDictionary(), COSName.FF, FLAG_REQUIRED);\n     }\n \n     /**\n      * sets the field to be not exported..\n-     *\n+     * \n      * @param noExport The new flag for noExport.\n      */\n     public void setNoExport(boolean noExport)\n     {\n-        BitFlagHelper.setFlag( getDictionary(), COSName.FF, FLAG_NO_EXPORT, noExport );\n+        BitFlagHelper.setFlag(getDictionary(), COSName.FF, FLAG_NO_EXPORT, noExport);\n     }\n \n     /**\n-     *\n+     * \n      * @return true if the field is not to be exported.\n      */\n     public boolean isNoExport()\n     {\n-        return BitFlagHelper.getFlag( getDictionary(), COSName.FF, FLAG_NO_EXPORT );\n+        return BitFlagHelper.getFlag(getDictionary(), COSName.FF, FLAG_NO_EXPORT);\n     }\n \n     /**\n      * This will get the flags for this field.\n-     *\n+     * \n      * @return flags The set of flags.\n      */\n     public int getFieldFlags()\n     {\n         int retval = 0;\n-        COSInteger ff = (COSInteger)getDictionary().getDictionaryObject( COSName.FF );\n-        if( ff != null )\n+        COSInteger ff = (COSInteger) getDictionary().getDictionaryObject(COSName.FF);\n+        if (ff != null)\n         {\n             retval = ff.intValue();\n         }\n@@ -293,162 +280,160 @@ public int getFieldFlags()\n \n     /**\n      * This will set the flags for this field.\n-     *\n+     * \n      * @param flags The new flags.\n      */\n-    public void setFieldFlags( int flags )\n+    public void setFieldFlags(int flags)\n     {\n-        getDictionary().setInt( COSName.FF, flags );\n+        getDictionary().setInt(COSName.FF, flags);\n     }\n \n     /**\n      * This will import a fdf field from a fdf document.\n-     *\n+     * \n      * @param fdfField The fdf field to import.\n-     *\n+     * \n      * @throws IOException If there is an error importing the data for this field.\n      */\n-    public void importFDF( FDFField fdfField ) throws IOException\n+    public void importFDF(FDFField fdfField) throws IOException\n     {\n         Object fieldValue = fdfField.getValue();\n         int fieldFlags = getFieldFlags();\n \n-        if( fieldValue != null )\n+        if (fieldValue != null)\n         {\n-            if( fieldValue instanceof String )\n+            if (fieldValue instanceof String)\n             {\n-                setValue( (String)fieldValue );\n+                setValue((String) fieldValue);\n             }\n-            else if( fieldValue instanceof PDTextStream )\n+            else if (fieldValue instanceof PDTextStream)\n             {\n-                setValue( ((PDTextStream)fieldValue).getAsString() );\n+                setValue(((PDTextStream) fieldValue).getAsString());\n             }\n             else\n             {\n-                throw new IOException( \"Unknown field type:\" + fieldValue.getClass().getName() );\n+                throw new IOException(\"Unknown field type:\" + fieldValue.getClass().getName());\n             }\n         }\n         Integer ff = fdfField.getFieldFlags();\n-        if( ff != null )\n+        if (ff != null)\n         {\n-            setFieldFlags( ff.intValue() );\n+            setFieldFlags(ff.intValue());\n         }\n         else\n         {\n-            //these are suppose to be ignored if the Ff is set.\n+            // these are suppose to be ignored if the Ff is set.\n             Integer setFf = fdfField.getSetFieldFlags();\n \n-            if( setFf != null )\n+            if (setFf != null)\n             {\n                 int setFfInt = setFf.intValue();\n                 fieldFlags = fieldFlags | setFfInt;\n-                setFieldFlags( fieldFlags );\n+                setFieldFlags(fieldFlags);\n             }\n \n             Integer clrFf = fdfField.getClearFieldFlags();\n-            if( clrFf != null )\n+            if (clrFf != null)\n             {\n-                //we have to clear the bits of the document fields for every bit that is\n-                //set in this field.\n+                // we have to clear the bits of the document fields for every bit that is\n+                // set in this field.\n                 //\n-                //Example:\n-                //docFf = 1011\n-                //clrFf = 1101\n-                //clrFfValue = 0010;\n-                //newValue = 1011 & 0010 which is 0010\n+                // Example:\n+                // docFf = 1011\n+                // clrFf = 1101\n+                // clrFfValue = 0010;\n+                // newValue = 1011 & 0010 which is 0010\n                 int clrFfValue = clrFf.intValue();\n                 clrFfValue ^= 0xFFFFFFFF;\n                 fieldFlags = fieldFlags & clrFfValue;\n-                setFieldFlags( fieldFlags );\n+                setFieldFlags(fieldFlags);\n             }\n         }\n \n         PDAnnotationWidget widget = getWidget();\n-        if( widget != null )\n+        if (widget != null)\n         {\n             int annotFlags = widget.getAnnotationFlags();\n             Integer f = fdfField.getWidgetFieldFlags();\n-            if( f != null && widget != null )\n+            if (f != null && widget != null)\n             {\n-                widget.setAnnotationFlags( f.intValue() );\n+                widget.setAnnotationFlags(f.intValue());\n             }\n             else\n             {\n-                //these are suppose to be ignored if the F is set.\n+                // these are suppose to be ignored if the F is set.\n                 Integer setF = fdfField.getSetWidgetFieldFlags();\n-                if( setF != null )\n+                if (setF != null)\n                 {\n                     annotFlags = annotFlags | setF.intValue();\n-                    widget.setAnnotationFlags( annotFlags );\n+                    widget.setAnnotationFlags(annotFlags);\n                 }\n \n                 Integer clrF = fdfField.getClearWidgetFieldFlags();\n-                if( clrF != null )\n+                if (clrF != null)\n                 {\n-                    //we have to clear the bits of the document fields for every bit that is\n-                    //set in this field.\n+                    // we have to clear the bits of the document fields for every bit that is\n+                    // set in this field.\n                     //\n-                    //Example:\n-                    //docF = 1011\n-                    //clrF = 1101\n-                    //clrFValue = 0010;\n-                    //newValue = 1011 & 0010 which is 0010\n+                    // Example:\n+                    // docF = 1011\n+                    // clrF = 1101\n+                    // clrFValue = 0010;\n+                    // newValue = 1011 & 0010 which is 0010\n                     int clrFValue = clrF.intValue();\n                     clrFValue ^= 0xFFFFFFFFL;\n                     annotFlags = annotFlags & clrFValue;\n-                    widget.setAnnotationFlags( annotFlags );\n+                    widget.setAnnotationFlags(annotFlags);\n                 }\n             }\n         }\n         List<FDFField> fdfKids = fdfField.getKids();\n         List<COSObjectable> pdKids = getKids();\n-        for( int i=0; fdfKids != null && i<fdfKids.size(); i++ )\n+        for (int i = 0; fdfKids != null && i < fdfKids.size(); i++)\n         {\n-            FDFField fdfChild = fdfKids.get( i );\n+            FDFField fdfChild = fdfKids.get(i);\n             String fdfName = fdfChild.getPartialFieldName();\n-            for( int j=0; j<pdKids.size(); j++ )\n+            for (int j = 0; j < pdKids.size(); j++)\n             {\n-                Object pdChildObj = pdKids.get( j );\n-                if( pdChildObj instanceof PDField )\n+                Object pdChildObj = pdKids.get(j);\n+                if (pdChildObj instanceof PDField)\n                 {\n-                    PDField pdChild = (PDField)pdChildObj;\n-                    if( fdfName != null && fdfName.equals( pdChild.getPartialName() ) )\n+                    PDField pdChild = (PDField) pdChildObj;\n+                    if (fdfName != null && fdfName.equals(pdChild.getPartialName()))\n                     {\n-                        pdChild.importFDF( fdfChild );\n+                        pdChild.importFDF(fdfChild);\n                     }\n                 }\n             }\n         }\n     }\n \n     /**\n-     * This will get the single associated widget that is part of this field.  This\n-     * occurs when the Widget is embedded in the fields dictionary.  Sometimes there\n-     * are multiple sub widgets associated with this field, in which case you want to\n-     * use getKids().  If the kids entry is specified, then the first entry in that\n-     * list will be returned.\n-     *\n+     * This will get the single associated widget that is part of this field. This occurs when the Widget is embedded in\n+     * the fields dictionary. Sometimes there are multiple sub widgets associated with this field, in which case you\n+     * want to use getKids(). If the kids entry is specified, then the first entry in that list will be returned.\n+     * \n      * @return The widget that is associated with this field.\n      * @throws IOException If there is an error getting the widget object.\n      */\n     public PDAnnotationWidget getWidget() throws IOException\n     {\n         PDAnnotationWidget retval = null;\n         List<COSObjectable> kids = getKids();\n-        if( kids == null )\n+        if (kids == null)\n         {\n-            retval = new PDAnnotationWidget( getDictionary() );\n+            retval = new PDAnnotationWidget(getDictionary());\n         }\n-        else if( kids.size() > 0 )\n+        else if (kids.size() > 0)\n         {\n-            Object firstKid = kids.get( 0 );\n-            if( firstKid instanceof PDAnnotationWidget )\n+            Object firstKid = kids.get(0);\n+            if (firstKid instanceof PDAnnotationWidget)\n             {\n-                retval = (PDAnnotationWidget)firstKid;\n+                retval = (PDAnnotationWidget) firstKid;\n             }\n             else\n             {\n-                retval = ((PDField)firstKid).getWidget();\n+                retval = ((PDField) firstKid).getWidget();\n             }\n         }\n         else\n@@ -460,58 +445,57 @@ else if( kids.size() > 0 )\n \n     /**\n      * Get the parent field to this field, or null if none exists.\n-     *\n+     * \n      * @return The parent field.\n-     *\n+     * \n      * @throws IOException If there is an error creating the parent field.\n      */\n     public PDField getParent() throws IOException\n     {\n         PDField parent = null;\n-        COSDictionary parentDic = (COSDictionary)getDictionary().getDictionaryObject( COSName.PARENT, COSName.P );\n-        if( parentDic != null )\n+        COSDictionary parentDic = (COSDictionary) getDictionary().getDictionaryObject(COSName.PARENT, COSName.P);\n+        if (parentDic != null)\n         {\n-            parent = PDFieldFactory.createField( getAcroForm(), parentDic );\n+            parent = PDFieldFactory.createField(getAcroForm(), parentDic);\n         }\n         return parent;\n     }\n \n     /**\n      * Set the parent of this field.\n-     *\n+     * \n      * @param parent The parent to this field.\n      */\n-    public void setParent( PDField parent )\n+    public void setParent(PDField parent)\n     {\n-        getDictionary().setItem( \"Parent\", parent );\n+        getDictionary().setItem(\"Parent\", parent);\n     }\n \n     /**\n-     * This will find one of the child elements.  The name array are the components\n-     * of the name to search down the tree of names.  The nameIndex is where to\n-     * start in that array.  This method is called recursively until it finds\n-     * the end point based on the name array.\n-     *\n+     * This will find one of the child elements. The name array are the components of the name to search down the tree\n+     * of names. The nameIndex is where to start in that array. This method is called recursively until it finds the end\n+     * point based on the name array.\n+     * \n      * @param name An array that picks the path to the field.\n      * @param nameIndex The index into the array.\n      * @return The field at the endpoint or null if none is found.\n      * @throws IOException If there is an error creating the field.\n      */\n-    public PDField findKid( String[] name, int nameIndex ) throws IOException\n+    public PDField findKid(String[] name, int nameIndex) throws IOException\n     {\n         PDField retval = null;\n-        COSArray kids = (COSArray)getDictionary().getDictionaryObject( COSName.KIDS );\n-        if( kids != null )\n+        COSArray kids = (COSArray) getDictionary().getDictionaryObject(COSName.KIDS);\n+        if (kids != null)\n         {\n             for (int i = 0; retval == null && i < kids.size(); i++)\n             {\n-                COSDictionary kidDictionary = (COSDictionary)kids.getObject(i);\n-                if( name[nameIndex].equals( kidDictionary.getString( \"T\" ) ) )\n+                COSDictionary kidDictionary = (COSDictionary) kids.getObject(i);\n+                if (name[nameIndex].equals(kidDictionary.getString(\"T\")))\n                 {\n-                    retval = PDFieldFactory.createField( acroForm, kidDictionary );\n-                    if( name.length > nameIndex+1 )\n+                    retval = PDFieldFactory.createField(acroForm, kidDictionary);\n+                    if (name.length > nameIndex + 1)\n                     {\n-                        retval = retval.findKid( name, nameIndex+1 );\n+                        retval = retval.findKid(name, nameIndex + 1);\n                     }\n                 }\n             }\n@@ -520,69 +504,72 @@ public PDField findKid( String[] name, int nameIndex ) throws IOException\n     }\n \n     /**\n-     * This will get all the kids of this field.  The values in the list\n-     * will either be PDWidget or PDField.  Normally they will be PDWidget objects\n-     * unless this is a non-terminal field and they will be child PDField objects.\n-     *\n+     * This will get all the kids of this field. The values in the list will either be PDWidget or PDField. Normally\n+     * they will be PDWidget objects unless this is a non-terminal field and they will be child PDField objects.\n+     * \n      * @return A list of either PDWidget or PDField objects.\n      * @throws IOException If there is an error retrieving the kids.\n      */\n     public List<COSObjectable> getKids() throws IOException\n     {\n         List<COSObjectable> retval = null;\n-        COSArray kids = (COSArray)getDictionary().getDictionaryObject(COSName.KIDS);\n-        if( kids != null )\n+        COSArray kids = (COSArray) getDictionary().getDictionaryObject(COSName.KIDS);\n+        if (kids != null)\n         {\n             List<COSObjectable> kidsList = new ArrayList<COSObjectable>();\n             for (int i = 0; i < kids.size(); i++)\n             {\n-                COSDictionary kidDictionary = (COSDictionary)kids.getObject(i);\n-                COSDictionary parent = (COSDictionary)kidDictionary.getDictionaryObject( COSName.PARENT, COSName.P );\n-                if( kidDictionary.getDictionaryObject( COSName.FT ) != null ||\n-                    (parent != null && parent.getDictionaryObject( COSName.FT ) != null ) )\n+                COSDictionary kidDictionary = (COSDictionary) kids.getObject(i);\n+                if (kidDictionary == null)\n+                {\n+                    continue;\n+                }\n+                COSDictionary parent = (COSDictionary) kidDictionary.getDictionaryObject(COSName.PARENT, COSName.P);\n+                if (kidDictionary.getDictionaryObject(COSName.FT) != null\n+                        || (parent != null && parent.getDictionaryObject(COSName.FT) != null))\n                 {\n-                    kidsList.add( PDFieldFactory.createField( acroForm, kidDictionary ));\n+                    kidsList.add(PDFieldFactory.createField(acroForm, kidDictionary));\n                 }\n-                else if( \"Widget\".equals( kidDictionary.getNameAsString( COSName.SUBTYPE ) ) )\n+                else if (\"Widget\".equals(kidDictionary.getNameAsString(COSName.SUBTYPE)))\n                 {\n-                    kidsList.add( new PDAnnotationWidget( kidDictionary ) );\n+                    kidsList.add(new PDAnnotationWidget(kidDictionary));\n                 }\n                 else\n                 {\n                     //\n-                    kidsList.add( PDFieldFactory.createField( acroForm, kidDictionary ));\n+                    kidsList.add(PDFieldFactory.createField(acroForm, kidDictionary));\n                 }\n             }\n-            retval = new COSArrayList( kidsList, kids );\n+            retval = new COSArrayList<COSObjectable>(kidsList, kids);\n         }\n         return retval;\n     }\n \n     /**\n      * This will set the list of kids.\n-     *\n+     * \n      * @param kids The list of child widgets.\n      */\n-    public void setKids( List<COSObjectable> kids )\n+    public void setKids(List<COSObjectable> kids)\n     {\n-        COSArray kidsArray = COSArrayList.converterToCOSArray( kids );\n-        getDictionary().setItem( COSName.KIDS, kidsArray );\n+        COSArray kidsArray = COSArrayList.converterToCOSArray(kids);\n+        getDictionary().setItem(COSName.KIDS, kidsArray);\n     }\n \n     /**\n      * This will return a string representation of this field.\n-     *\n+     * \n      * @return A string representation of this field.\n      */\n     @Override\n     public String toString()\n     {\n-        return \"\" + getDictionary().getDictionaryObject( COSName.V );\n+        return \"\" + getDictionary().getDictionaryObject(COSName.V);\n     }\n \n     /**\n      * This will get the acroform that this field is part of.\n-     *\n+     * \n      * @return The form this field is on.\n      */\n     public PDAcroForm getAcroForm()\n@@ -592,7 +579,7 @@ public PDAcroForm getAcroForm()\n \n     /**\n      * This will set the form this field is on.\n-     *\n+     * \n      * @param value The new form to use.\n      */\n     public void setAcroForm(PDAcroForm value)\n@@ -602,7 +589,7 @@ public void setAcroForm(PDAcroForm value)\n \n     /**\n      * This will get the dictionary associated with this field.\n-     *\n+     * \n      * @return The dictionary that this class wraps.\n      */\n     public COSDictionary getDictionary()\n@@ -612,7 +599,7 @@ public COSDictionary getDictionary()\n \n     /**\n      * Convert this standard java object to a COS object.\n-     *\n+     * \n      * @return The cos object that matches this Java object.\n      */\n     public COSBase getCOSObject()\n@@ -621,29 +608,29 @@ public COSBase getCOSObject()\n     }\n \n     /**\n-     * Get the additional actions for this field.  This will return null\n-     * if there are no additional actions for this field.\n-     *\n+     * Get the additional actions for this field. This will return null if there are no additional actions for this\n+     * field.\n+     * \n      * @return The actions of the field.\n      */\n     public PDFormFieldAdditionalActions getActions()\n     {\n-        COSDictionary aa = (COSDictionary)dictionary.getDictionaryObject( COSName.AA );\n+        COSDictionary aa = (COSDictionary) dictionary.getDictionaryObject(COSName.AA);\n         PDFormFieldAdditionalActions retval = null;\n-        if( aa != null )\n+        if (aa != null)\n         {\n-            retval = new PDFormFieldAdditionalActions( aa );\n+            retval = new PDFormFieldAdditionalActions(aa);\n         }\n         return retval;\n     }\n \n     /**\n      * Set the actions of the field.\n-     *\n+     * \n      * @param actions The field actions.\n      */\n-    public void setActions( PDFormFieldAdditionalActions actions )\n+    public void setActions(PDFormFieldAdditionalActions actions)\n     {\n-        dictionary.setItem( COSName.AA, actions );\n+        dictionary.setItem(COSName.AA, actions);\n     }\n }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDField.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/228e39dd8535667f1dd48fe0d0106bdfaf81381f", "parent": "https://github.com/apache/pdfbox/commit/852c48fa1fef3f10dba648ff27553c40272060e5", "message": "PDFBOX-1559: avoid NPE if a monospaced font provides only one width value instead of an array for each glyphid\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1465266 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_176", "file": [{"additions": 11, "raw_url": "https://github.com/apache/pdfbox/raw/228e39dd8535667f1dd48fe0d0106bdfaf81381f/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java", "blob_url": "https://github.com/apache/pdfbox/blob/228e39dd8535667f1dd48fe0d0106bdfaf81381f/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java", "sha": "d0226cf8de0de1f7fc97f0c76b629280962a8058", "changes": 12, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java?ref=228e39dd8535667f1dd48fe0d0106bdfaf81381f", "patch": "@@ -380,6 +380,9 @@ else if( nr.getNameId() == NameRecord.NAME_FONT_FAMILY_NAME )\n             \n             HorizontalMetricsTable hMet = ttf.getHorizontalMetrics();\n             int[] widthValues = hMet.getAdvanceWidth();\n+            // some monospaced fonts provide only one value for the width \n+            // instead of an array containing the same value for every glyphid \n+            boolean isMonospaced = widthValues.length == 1;\n             int nWidths=lastChar-firstChar+1;\n             List<Float> widths = new ArrayList<Float>(nWidths);\n             // width of the .notdef character.\n@@ -406,7 +409,14 @@ else if( nr.getNameId() == NameRecord.NAME_FONT_FAMILY_NAME )\n                 int gid = uniMap.getGlyphId(charCode);\n                 if (gid != 0) \n                 {\n-                    widths.set( e.getKey().intValue()-firstChar,widthValues[gid]*scaling );\n+                    if (isMonospaced)\n+                    {\n+                        widths.set( e.getKey().intValue()-firstChar,widthValues[0]*scaling );\n+                    }\n+                    else\n+                    {\n+                        widths.set( e.getKey().intValue()-firstChar,widthValues[gid]*scaling );\n+                    }\n                 }\n             }\n             setWidths( widths );", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/cd14019b9d5a82db3282685114410ce788f8bcbb", "parent": "https://github.com/apache/pdfbox/commit/da7e1be335e89a7ab6e6adb1cf2b071cc1e21295", "message": "PDFBOX-1381: update limits in setKids and avoid NPEs as proposed by Dominic Tubach\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1454845 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_177", "file": [{"additions": 72, "raw_url": "https://github.com/apache/pdfbox/raw/cd14019b9d5a82db3282685114410ce788f8bcbb/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java", "blob_url": "https://github.com/apache/pdfbox/blob/cd14019b9d5a82db3282685114410ce788f8bcbb/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java", "sha": "b35a1cd4a273be9c8c4ac48bd20d38a338617e36", "changes": 106, "status": "modified", "deletions": 34, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java?ref=cd14019b9d5a82db3282685114410ce788f8bcbb", "patch": "@@ -24,6 +24,8 @@\n import java.util.List;\n import java.util.Map;\n \n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n import org.apache.pdfbox.cos.COSArray;\n import org.apache.pdfbox.cos.COSBase;\n import org.apache.pdfbox.cos.COSDictionary;\n@@ -33,22 +35,24 @@\n /**\n  * This class represents a PDF Number tree. See the PDF Reference 1.7 section\n  * 7.9.7 for more details.\n- * \n+ *\n  * @author <a href=\"mailto:ben@benlitchfield.com\">Ben Litchfield</a>,\n  *         <a href=\"igor.podolskiy@ievvwi.uni-stuttgart.de\">Igor Podolskiy</a>\n  * @version $Revision: 1.4 $\n  */\n public class PDNumberTreeNode implements COSObjectable\n {\n+    private static final Log LOG = LogFactory.getLog( PDNumberTreeNode.class );\n+\n     private COSDictionary node;\n-    private Class<?> valueType = null;\n+    private Class<? extends COSObjectable> valueType = null;\n \n     /**\n      * Constructor.\n      *\n      * @param valueClass The PD Model type of object that is the value.\n      */\n-    public PDNumberTreeNode( Class<?> valueClass )\n+    public PDNumberTreeNode( Class<? extends COSObjectable> valueClass )\n     {\n         node = new COSDictionary();\n         valueType = valueClass;\n@@ -60,7 +64,7 @@ public PDNumberTreeNode( Class<?> valueClass )\n      * @param dict The dictionary that holds the name information.\n      * @param valueClass The PD Model type of object that is the value.\n      */\n-    public PDNumberTreeNode( COSDictionary dict, Class<?> valueClass )\n+    public PDNumberTreeNode( COSDictionary dict, Class<? extends COSObjectable> valueClass )\n     {\n         node = dict;\n         valueType = valueClass;\n@@ -91,19 +95,18 @@ public COSDictionary getCOSDictionary()\n      *\n      * @return The list of children or null if there are no children.\n      */\n-    public List getKids()\n+    public List<PDNumberTreeNode> getKids()\n     {\n-\n-        List retval = null;\n+        List<PDNumberTreeNode> retval = null;\n         COSArray kids = (COSArray)node.getDictionaryObject( COSName.KIDS );\n         if( kids != null )\n         {\n-            List pdObjects = new ArrayList();\n+            List<PDNumberTreeNode> pdObjects = new ArrayList<PDNumberTreeNode>();\n             for( int i=0; i<kids.size(); i++ )\n             {\n                 pdObjects.add( createChildNode( (COSDictionary)kids.getObject(i) ) );\n             }\n-            retval = new COSArrayList(pdObjects,kids);\n+            retval = new COSArrayList<PDNumberTreeNode>(pdObjects,kids);\n         }\n \n         return retval;\n@@ -114,8 +117,22 @@ public List getKids()\n      *\n      * @param kids The children of this number tree.\n      */\n-    public void setKids( List kids )\n+    public void setKids( List<? extends PDNumberTreeNode> kids )\n     {\n+        if (kids != null && kids.size() > 0)\n+        {\n+            PDNumberTreeNode firstKid = kids.get(0);\n+            PDNumberTreeNode lastKid = kids.get(kids.size() - 1);\n+            Integer lowerLimit = firstKid.getLowerLimit();\n+            this.setLowerLimit(lowerLimit);\n+            Integer upperLimit = lastKid.getUpperLimit();\n+            this.setUpperLimit(upperLimit);\n+        }\n+        else if ( node.getDictionaryObject( COSName.NUMS ) == null )\n+        {\n+            // Remove limits if there are no kids and no numbers set.\n+            node.setItem( COSName.LIMITS, null);\n+        }\n         node.setItem( COSName.KIDS, COSArrayList.converterToCOSArray( kids ) );\n     }\n \n@@ -125,29 +142,36 @@ public void setKids( List kids )\n      * @param index The index in the number tree.\n      *\n      * @return The value corresponding to the index.\n-     * \n+     *\n      * @throws IOException If there is a problem creating the values.\n      */\n     public Object getValue( Integer index ) throws IOException\n     {\n         Object retval = null;\n-        Map<Integer,Object> names = getNumbers();\n+        Map<Integer,COSObjectable> names = getNumbers();\n         if( names != null )\n         {\n             retval = names.get( index );\n         }\n         else\n         {\n-            List kids = getKids();\n-            for( int i=0; i<kids.size() && retval == null; i++ )\n+            List<PDNumberTreeNode> kids = getKids();\n+            if ( kids != null )\n             {\n-                PDNumberTreeNode childNode = (PDNumberTreeNode)kids.get( i );\n-                if( childNode.getLowerLimit().compareTo( index ) <= 0 &&\n-                        childNode.getUpperLimit().compareTo( index ) >= 0 )\n+                for( int i=0; i<kids.size() && retval == null; i++ )\n                 {\n-                    retval = childNode.getValue( index );\n+                    PDNumberTreeNode childNode = kids.get( i );\n+                    if( childNode.getLowerLimit().compareTo( index ) <= 0 &&\n+                        childNode.getUpperLimit().compareTo( index ) >= 0 )\n+                    {\n+                        retval = childNode.getValue( index );\n+                    }\n                 }\n             }\n+            else\n+            {\n+                LOG.warn(\"NumberTreeNode does not have \\\"nums\\\" nor \\\"kids\\\" objects.\");\n+            }\n         }\n         return retval;\n     }\n@@ -158,27 +182,25 @@ public Object getValue( Integer index ) throws IOException\n      * depend on where this class is being used.\n      *\n      * @return A map of COS objects.\n-     * \n+     *\n      * @throws IOException If there is a problem creating the values.\n      */\n-    public Map getNumbers()  throws IOException\n+    public Map<Integer,COSObjectable> getNumbers()  throws IOException\n     {\n-        Map<Integer,Object> indices = null;\n+        Map<Integer, COSObjectable> indices = null;\n         COSArray namesArray = (COSArray)node.getDictionaryObject( COSName.NUMS );\n         if( namesArray != null )\n         {\n-            indices = new HashMap<Integer,Object>();\n+            indices = new HashMap<Integer,COSObjectable>();\n             for( int i=0; i<namesArray.size(); i+=2 )\n             {\n                 COSInteger key = (COSInteger)namesArray.getObject(i);\n                 COSBase cosValue = namesArray.getObject( i+1 );\n-                Object pdValue = convertCOSToPD( cosValue );\n-\n+                COSObjectable pdValue = convertCOSToPD( cosValue );\n                 indices.put( Integer.valueOf(key.intValue()), pdValue );\n             }\n             indices = Collections.unmodifiableMap(indices);\n         }\n-\n         return indices;\n     }\n \n@@ -191,12 +213,12 @@ public Map getNumbers()  throws IOException\n      * @return The converted PD Model object.\n      * @throws IOException If there is an error during creation.\n      */\n-    protected Object convertCOSToPD( COSBase base ) throws IOException\n+    protected COSObjectable convertCOSToPD( COSBase base ) throws IOException\n     {\n-        Object retval = null;\n+        COSObjectable retval = null;\n         try\n         {\n-            Constructor<?> ctor = valueType.getConstructor( new Class[] { base.getClass() } );\n+            Constructor<? extends COSObjectable> ctor = valueType.getConstructor( new Class[] { base.getClass() } );\n             retval = ctor.newInstance( new Object[] { base } );\n         }\n         catch( Throwable t )\n@@ -225,7 +247,7 @@ protected PDNumberTreeNode createChildNode( COSDictionary dic )\n      *\n      * @param numbers The map of names to objects.\n      */\n-    public void setNumbers( Map<Integer,Object> numbers )\n+    public void setNumbers( Map<Integer, ? extends COSObjectable> numbers )\n     {\n         if( numbers == null )\n         {\n@@ -234,7 +256,7 @@ public void setNumbers( Map<Integer,Object> numbers )\n         }\n         else\n         {\n-            List<Integer> keys = new ArrayList( numbers.keySet() );\n+            List<Integer> keys = new ArrayList<Integer>( numbers.keySet() );\n             Collections.sort( keys );\n             COSArray array = new COSArray();\n             for( int i=0; i<keys.size(); i++ )\n@@ -266,7 +288,7 @@ public Integer getUpperLimit()\n     {\n         Integer retval = null;\n         COSArray arr = (COSArray)node.getDictionaryObject( COSName.LIMITS );\n-        if( arr != null )\n+        if( arr != null && arr.get(0) != null )\n         {\n             retval = Integer.valueOf(arr.getInt( 1 ));\n         }\n@@ -286,8 +308,16 @@ private void setUpperLimit( Integer upper )\n             arr = new COSArray();\n             arr.add( null );\n             arr.add( null );\n+            node.setItem( COSName.LIMITS, arr );\n+        }\n+        if ( upper != null)\n+        {\n+            arr.setInt( 1, upper.intValue() );\n+        }\n+        else\n+        {\n+            arr.set( 1, null );\n         }\n-        arr.setInt( 1, upper.intValue() );\n     }\n \n     /**\n@@ -299,7 +329,7 @@ public Integer getLowerLimit()\n     {\n         Integer retval = null;\n         COSArray arr = (COSArray)node.getDictionaryObject( COSName.LIMITS );\n-        if( arr != null )\n+        if( arr != null && arr.get(0) != null )\n         {\n             retval = Integer.valueOf(arr.getInt( 0 ));\n         }\n@@ -319,7 +349,15 @@ private void setLowerLimit( Integer lower )\n             arr = new COSArray();\n             arr.add( null );\n             arr.add( null );\n+            node.setItem( COSName.LIMITS, arr );\n+        }\n+        if ( lower != null )\n+        {\n+            arr.setInt( 0, lower.intValue() );\n+        }\n+        else\n+        {\n+            arr.set( 0, null );\n         }\n-        arr.setInt( 0, lower.intValue() );\n     }\n }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java"}, {"additions": 17, "raw_url": "https://github.com/apache/pdfbox/raw/cd14019b9d5a82db3282685114410ce788f8bcbb/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java", "blob_url": "https://github.com/apache/pdfbox/blob/cd14019b9d5a82db3282685114410ce788f8bcbb/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java", "sha": "c05839a0bbd143f53b8075f1ac9007e8762f641e", "changes": 25, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java?ref=cd14019b9d5a82db3282685114410ce788f8bcbb", "patch": "@@ -98,19 +98,25 @@ public PDPageLabels(PDDocument document, COSDictionary dict) throws IOException\n         findLabels(root);\n     }\n     \n-    private void findLabels(PDNumberTreeNode node) throws IOException {\n-        if (node.getKids() != null) {\n+    private void findLabels(PDNumberTreeNode node) throws IOException \n+    {\n+        if (node.getKids() != null) \n+        {\n             List<PDNumberTreeNode> kids = node.getKids();\n-            for (PDNumberTreeNode kid : kids) {\n+            for (PDNumberTreeNode kid : kids) \n+            {\n                 findLabels(kid);\n             }\n         }\n-        else if (node.getNumbers() != null) {\n-            Map<Integer, COSDictionary> numbers = node.getNumbers();\n-            for (Entry<Integer, COSDictionary> i : numbers.entrySet())\n+        else if (node.getNumbers() != null) \n+        {\n+            Map<Integer, COSObjectable> numbers = node.getNumbers();\n+            for (Entry<Integer, COSObjectable> i : numbers.entrySet())\n             {\n                 if(i.getKey() >= 0)\n-                    labels.put(i.getKey(), new PDPageLabelRange(i.getValue()));\n+                {\n+                    labels.put(i.getKey(), new PDPageLabelRange((COSDictionary)i.getValue()));\n+                }\n             }\n         }\n     }\n@@ -160,7 +166,10 @@ public void setLabelItem(int startPage, PDPageLabelRange item)\n     {\n         labels.put(startPage, item);\n     }\n-\n+    \n+    /**\n+     * {@inheritDoc} \n+     */\n     public COSBase getCOSObject()\n     {\n         COSDictionary dict = new COSDictionary();", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java"}, {"additions": 188, "raw_url": "https://github.com/apache/pdfbox/raw/cd14019b9d5a82db3282685114410ce788f8bcbb/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/TestPDNumberTreeNode.java", "blob_url": "https://github.com/apache/pdfbox/blob/cd14019b9d5a82db3282685114410ce788f8bcbb/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/TestPDNumberTreeNode.java", "sha": "993c3c949e5ae5fe694c9134e9dbb0f6bbab8aa4", "changes": 188, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/TestPDNumberTreeNode.java?ref=cd14019b9d5a82db3282685114410ce788f8bcbb", "patch": "@@ -0,0 +1,188 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.pdfbox.pdmodel.common;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import junit.framework.Assert;\n+import junit.framework.TestCase;\n+\n+import org.apache.pdfbox.cos.COSBase;\n+import org.apache.pdfbox.cos.COSInteger;\n+\n+/**\n+ * A test case for PDNumberTreeNode.\n+ * Based on TestPDNameTreeNode.\n+ * \n+ * @author Dominic Tubach\n+ */\n+public class TestPDNumberTreeNode extends TestCase\n+{\n+\n+    private PDNumberTreeNode node1;\n+    private PDNumberTreeNode node2;\n+    private PDNumberTreeNode node4;\n+    private PDNumberTreeNode node5;\n+    private PDNumberTreeNode node24;\n+    \n+    public static class PDTest implements COSObjectable {\n+        private int value;\n+\n+        public PDTest(int value) {\n+            this.value = value;\n+        }\n+        \n+        public PDTest(COSInteger cosInt) {\n+            this.value = cosInt.intValue();\n+        }\n+\n+        public COSBase getCOSObject()\n+        {\n+            return COSInteger.get( value );\n+        }\n+\n+        @Override\n+        public int hashCode()\n+        {\n+            final int prime = 31;\n+            int result = 1;\n+            result = prime * result + value;\n+            return result;\n+        }\n+\n+        @Override\n+        public boolean equals( Object obj )\n+        {\n+            if ( this == obj)\n+                return true;\n+            if ( obj == null)\n+                return false;\n+            if ( getClass() != obj.getClass())\n+                return false;\n+            PDTest other = (PDTest) obj;\n+            if ( value != other.value)\n+                return false;\n+            return true;\n+        }\n+    }\n+\n+    @Override\n+    protected void setUp() throws Exception\n+    {\n+        this.node5 = new PDNumberTreeNode(PDTest.class);\n+        Map<Integer,PDTest> Numbers = new TreeMap<Integer, PDTest>();\n+        Numbers.put( 1, new PDTest( 89 ) );\n+        Numbers.put( 2, new PDTest( 13 ) );\n+        Numbers.put( 3, new PDTest( 95 ) );\n+        Numbers.put( 4, new PDTest( 51 ) );\n+        Numbers.put( 5, new PDTest( 18 ) );\n+        Numbers.put( 6, new PDTest( 33 ) );\n+        Numbers.put( 7, new PDTest( 85 ) );\n+        this.node5.setNumbers( Numbers );\n+\n+        this.node24 = new PDNumberTreeNode( PDTest.class );\n+        Numbers = new TreeMap<Integer, PDTest>();\n+        Numbers.put( 8, new PDTest( 54 ) );\n+        Numbers.put( 9, new PDTest( 70 ) );\n+        Numbers.put( 10, new PDTest( 39 ) );\n+        Numbers.put( 11, new PDTest( 30 ) );\n+        Numbers.put( 12, new PDTest( 40 ) );\n+        this.node24.setNumbers( Numbers );\n+\n+        this.node2 = new PDNumberTreeNode( PDTest.class );\n+        List<PDNumberTreeNode> kids = this.node2.getKids();\n+        if ( kids == null)\n+        {\n+            kids = new COSArrayList<PDNumberTreeNode>();\n+        }\n+        kids.add( this.node5 );\n+        this.node2.setKids( kids );\n+\n+        this.node4 = new PDNumberTreeNode( PDTest.class );\n+        kids = this.node4.getKids();\n+        if ( kids == null)\n+        {\n+            kids = new COSArrayList<PDNumberTreeNode>();\n+        }\n+        kids.add( this.node24 );\n+        this.node4.setKids( kids );\n+\n+        this.node1 = new PDNumberTreeNode( PDTest.class );\n+        kids = this.node1.getKids();\n+        if ( kids == null)\n+        {\n+            kids = new COSArrayList<PDNumberTreeNode>();\n+        }\n+        kids.add( this.node2 );\n+        kids.add( this.node4 );\n+        this.node1.setKids( kids );\n+    }\n+    \n+    public void testGetValue() throws IOException {\n+        Assert.assertEquals(new PDTest( 51 ), this.node5.getValue( 4 ));\n+        Assert.assertEquals(new PDTest(70), this.node1.getValue( 9 ));\n+        \n+        this.node1.setKids( null );\n+        this.node1.setNumbers( null );\n+        Assert.assertNull( this.node1.getValue( 0 ) );\n+    }\n+\n+    public void testUpperLimit() throws IOException\n+    {\n+        Assert.assertEquals(Integer.valueOf( 7 ), this.node5.getUpperLimit());\n+        Assert.assertEquals(Integer.valueOf( 7 ), this.node2.getUpperLimit());\n+\n+        Assert.assertEquals(Integer.valueOf( 12 ), this.node24.getUpperLimit());\n+        Assert.assertEquals(Integer.valueOf( 12 ), this.node4.getUpperLimit());\n+\n+        Assert.assertEquals(Integer.valueOf( 12 ), this.node1.getUpperLimit());\n+\n+        this.node24.setNumbers( new HashMap<Integer, COSObjectable>() );\n+        Assert.assertNull( this.node24.getUpperLimit() );\n+        \n+        this.node5.setNumbers( null );\n+        Assert.assertNull( this.node5.getUpperLimit() );\n+        \n+        this.node1.setKids( null );\n+        Assert.assertNull( this.node1.getUpperLimit() );\n+    }\n+\n+    public void testLowerLimit() throws IOException\n+    {\n+        Assert.assertEquals(Integer.valueOf( 1 ), this.node5.getLowerLimit());\n+        Assert.assertEquals(Integer.valueOf( 1 ), this.node2.getLowerLimit());\n+\n+        Assert.assertEquals(Integer.valueOf( 8 ), this.node24.getLowerLimit());\n+        Assert.assertEquals(Integer.valueOf( 8 ), this.node4.getLowerLimit());\n+\n+        Assert.assertEquals(Integer.valueOf( 1 ), this.node1.getLowerLimit());\n+        \n+        this.node24.setNumbers( new HashMap<Integer, COSObjectable>() );\n+        Assert.assertNull( this.node24.getLowerLimit() );\n+        \n+        this.node5.setNumbers( null );\n+        Assert.assertNull( this.node5.getLowerLimit() );\n+        \n+        this.node1.setKids( null );\n+        Assert.assertNull( this.node1.getLowerLimit() );\n+    }\n+\n+}", "filename": "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/TestPDNumberTreeNode.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/ccd417a3f9a519876852b23af594253f162b10ef", "parent": "https://github.com/apache/pdfbox/commit/7254525fb5fb9824d18198a64bd221d712671151", "message": "PDFBOX-1491: avoid NPE if an image mask uses colour key masking\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1432578 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_178", "file": [{"additions": 24, "raw_url": "https://github.com/apache/pdfbox/raw/ccd417a3f9a519876852b23af594253f162b10ef/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/xobject/PDXObjectImage.java", "blob_url": "https://github.com/apache/pdfbox/blob/ccd417a3f9a519876852b23af594253f162b10ef/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/xobject/PDXObjectImage.java", "sha": "af313592356688ae1d5af94538e8f1a7c47f3419", "changes": 38, "status": "modified", "deletions": 14, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/xobject/PDXObjectImage.java?ref=ccd417a3f9a519876852b23af594253f162b10ef", "patch": "@@ -175,20 +175,30 @@ public BufferedImage imageMask(BufferedImage baseImage) throws IOException\n     public BufferedImage mask(BufferedImage baseImage) \n     \tthrows IOException\n     {\n-    \tPDXObjectImage maskImageRef = (PDXObjectImage)PDXObject.createXObject(getMask());\n-    \tBufferedImage maskImage = maskImageRef.getRGBImage();\n-   \t \tif(maskImage == null)\n-   \t \t{\n-\t   \t\t LOG.warn(\"masking getRGBImage returned NULL\");\n-\t   \t\t return baseImage;\n-   \t \t}\n-   \t \n-\t   \t BufferedImage newImage = new BufferedImage( maskImage.getWidth(), maskImage.getHeight(), BufferedImage.TYPE_INT_ARGB);\n-\t   \t Graphics2D graphics = (Graphics2D)newImage.getGraphics();\n-\t   \t graphics.drawImage(baseImage, 0, 0, maskImage.getWidth(), maskImage.getHeight(), 0, 0, baseImage.getWidth(), baseImage.getHeight(), null);   \n-\t   \t graphics.setComposite(AlphaComposite.DstIn);\n-\t   \t graphics.drawImage(maskImage, null, 0, 0);\n-\t   \t return newImage;\n+        COSBase mask = getMask();\n+        if (mask instanceof COSStream)\n+        {\n+        \tPDXObjectImage maskImageRef = (PDXObjectImage)PDXObject.createXObject((COSStream)mask);\n+        \tBufferedImage maskImage = maskImageRef.getRGBImage();\n+       \t \tif(maskImage == null)\n+       \t \t{\n+    \t   \t\t LOG.warn(\"masking getRGBImage returned NULL\");\n+    \t   \t\t return baseImage;\n+       \t \t}\n+       \t \n+    \t   \t BufferedImage newImage = new BufferedImage( maskImage.getWidth(), maskImage.getHeight(), BufferedImage.TYPE_INT_ARGB);\n+    \t   \t Graphics2D graphics = (Graphics2D)newImage.getGraphics();\n+    \t   \t graphics.drawImage(baseImage, 0, 0, maskImage.getWidth(), maskImage.getHeight(), 0, 0, baseImage.getWidth(), baseImage.getHeight(), null);   \n+    \t   \t graphics.setComposite(AlphaComposite.DstIn);\n+    \t   \t graphics.drawImage(maskImage, null, 0, 0);\n+    \t   \t return newImage;\n+        }\n+        else\n+        {\n+            // TODO Colour key masking\n+            LOG.warn(\"Colour key masking isn't supported\");\n+            return baseImage;\n+        }\n     }\n \n     /**", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/xobject/PDXObjectImage.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/c190a33c48f4816c849327304c66cbe41b984dd2", "parent": "https://github.com/apache/pdfbox/commit/4b44b7d9c7b74eeeca3121b524b0c1d7dbb75bd3", "message": "PDFBOX-1431: avoid NPE if the type FONT is missing as proposed by Gustavo Moreira\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1402971 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_179", "file": [{"additions": 6, "raw_url": "https://github.com/apache/pdfbox/raw/c190a33c48f4816c849327304c66cbe41b984dd2/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFontFactory.java", "blob_url": "https://github.com/apache/pdfbox/blob/c190a33c48f4816c849327304c66cbe41b984dd2/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFontFactory.java", "sha": "1318b41389dae2324391579129254ba7b009adb1", "changes": 9, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFontFactory.java?ref=c190a33c48f4816c849327304c66cbe41b984dd2", "patch": "@@ -77,12 +77,16 @@ public static PDFont createFont( COSDictionary dic ) throws IOException\n         PDFont retval = null;\n \n         COSName type = (COSName)dic.getDictionaryObject( COSName.TYPE );\n-        if( !type.equals( COSName.FONT ) )\n+        if( type != null && !COSName.FONT.equals( type ) )\n         {\n             throw new IOException( \"Cannot create font if /Type is not /Font.  Actual=\" +type );\n         }\n \n         COSName subType = (COSName)dic.getDictionaryObject( COSName.SUBTYPE );\n+        if (subType == null) \n+        {\n+            throw new IOException( \"Cannot create font as /SubType is not set.\" );\n+        }\n         if( subType.equals( COSName.TYPE1) )\n         {\n             retval = new PDType1Font( dic );\n@@ -113,8 +117,7 @@ else if( subType.equals( COSName.CID_FONT_TYPE2 ) )\n         }\n         else\n         {\n-            LOG.warn(\"Substituting TrueType for unknown font subtype=\" + \n-                    dic.getDictionaryObject( COSName.SUBTYPE ).toString());\n+            LOG.warn(\"Substituting TrueType for unknown font subtype=\" + subType.getName());\n             retval = new PDTrueTypeFont( dic );\n         }\n         return retval;", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFontFactory.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/53cfd5e08ee713df4c4a798c52106eddd1588e3c", "parent": "https://github.com/apache/pdfbox/commit/2390a371a24e9a53ddc16025049f33a4d5979506", "message": "PDFBOX-1046: throw IOException instead of a NPE as proposed by Thomas Chojecki\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1139542 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_180", "file": [{"additions": 17, "raw_url": "https://github.com/apache/pdfbox/raw/53cfd5e08ee713df4c4a798c52106eddd1588e3c/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java", "blob_url": "https://github.com/apache/pdfbox/blob/53cfd5e08ee713df4c4a798c52106eddd1588e3c/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java", "sha": "1be793e4871f04d85b243dfe4241fe10bd6a934f", "changes": 27, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java?ref=53cfd5e08ee713df4c4a798c52106eddd1588e3c", "patch": "@@ -101,9 +101,9 @@\n      */\n     protected ARCFour rc4 = new ARCFour();\n \n-    private Set objects = new HashSet();\n+    private Set<COSBase> objects = new HashSet<COSBase>();\n \n-    private Set potentialSignatures = new HashSet();\n+    private Set<COSDictionary> potentialSignatures = new HashSet<COSDictionary>();\n \n     /*\n      * If true, AES will be used\n@@ -159,28 +159,35 @@ protected void proceedDecryption() throws IOException, CryptographyException\n             for( int i=0; i<fields.size(); i++ )\n             {\n                 COSDictionary field = (COSDictionary)fields.getObject( i );\n-                addDictionaryAndSubDictionary( potentialSignatures, field );\n+                if (field!= null)\n+                {\n+                    addDictionaryAndSubDictionary( potentialSignatures, field );\n+                }\n+                else\n+                {\n+                    throw new IOException(\"Could not decypt document, object not found.\");\n+                }\n             }\n         }\n \n-        List allObjects = document.getDocument().getObjects();\n-        Iterator objectIter = allObjects.iterator();\n+        List<COSObject> allObjects = document.getDocument().getObjects();\n+        Iterator<COSObject> objectIter = allObjects.iterator();\n         while( objectIter.hasNext() )\n         {\n-            decryptObject( (COSObject)objectIter.next() );\n+            decryptObject( objectIter.next() );\n         }\n         document.setEncryptionDictionary( null );\n     }\n \n-    private void addDictionaryAndSubDictionary( Set set, COSDictionary dic )\n+    private void addDictionaryAndSubDictionary( Set<COSDictionary> set, COSDictionary dic )\n     {\n         set.add( dic );\n-        COSArray kids = (COSArray)dic.getDictionaryObject( \"Kids\" );\n+        COSArray kids = (COSArray)dic.getDictionaryObject( COSName.KIDS );\n         for( int i=0; kids != null && i<kids.size(); i++ )\n         {\n             addDictionaryAndSubDictionary( set, (COSDictionary)kids.getObject( i ) );\n         }\n-        COSBase value = dic.getDictionaryObject( \"V\" );\n+        COSBase value = dic.getDictionaryObject( COSName.V );\n         if( value instanceof COSDictionary )\n         {\n             addDictionaryAndSubDictionary( set, (COSDictionary)value );\n@@ -340,7 +347,7 @@ private void decryptObject( COSObject object )\n      * @throws CryptographyException If there is an error decrypting the stream.\n      * @throws IOException If there is an error getting the stream data.\n      */\n-    private void decrypt( Object obj, long objNum, long genNum )\n+    private void decrypt( COSBase obj, long objNum, long genNum )\n         throws CryptographyException, IOException\n     {\n         if( !objects.contains( obj ) )", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/2390a371a24e9a53ddc16025049f33a4d5979506", "parent": "https://github.com/apache/pdfbox/commit/23d2430692f4d4c5fde108cc30651bb4f24d95e0", "message": "PDFBOX-1049: fixed a NPE when using external type1 fonts as proposed by Henning Saul\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1139497 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_181", "file": [{"additions": 5, "raw_url": "https://github.com/apache/pdfbox/raw/2390a371a24e9a53ddc16025049f33a4d5979506/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java", "blob_url": "https://github.com/apache/pdfbox/blob/2390a371a24e9a53ddc16025049f33a4d5979506/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java", "sha": "fae3a9390203e82ca39ba05928a165f0692f7c87", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java?ref=2390a371a24e9a53ddc16025049f33a4d5979506", "patch": "@@ -784,7 +784,11 @@ public float getFontWidth( int charCode )\n         if (charCode >= firstChar && charCode <= lastChar)\n         {\n             List<Float> widths = getWidths();\n-            width = widths.get(charCode-firstChar).floatValue();\n+            // maybe the font doesn't provide any widths\n+            if (widths != null)\n+            {\n+                width = widths.get(charCode-firstChar).floatValue();\n+            }\n         }\n         else \n         {", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/e96983aa602bb3ecc57860cbd3b9dd14b79bc325", "parent": "https://github.com/apache/pdfbox/commit/7cf0bd0df5d21e9f81cb549f90856800a0e343e2", "message": "PDFBOX-1008: use AFM metrics only with Type1 fonts to avoid NPE in getFontHeight \n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1133689 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_182", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/e96983aa602bb3ecc57860cbd3b9dd14b79bc325/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java", "blob_url": "https://github.com/apache/pdfbox/blob/e96983aa602bb3ecc57860cbd3b9dd14b79bc325/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java", "sha": "af6de4ed63a4b4bdddbc784a1063d380a99e25d3", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java?ref=e96983aa602bb3ecc57860cbd3b9dd14b79bc325", "patch": "@@ -377,7 +377,7 @@ protected float getAverageFontWidthFromAFMFile() throws IOException\n      */\n     protected FontMetric getAFM()\n     {\n-        if(afm==null){\n+        if(isType1Font() && afm==null){\n             COSBase baseFont = font.getDictionaryObject( COSName.BASE_FONT );\n             String name = null;\n             if( baseFont instanceof COSName )", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/0b862d20780c2d395e99aa279e9b095c64a5eae2", "parent": "https://github.com/apache/pdfbox/commit/bcf4b6e430ac12a7dd494f3ad1686a7ee995828a", "message": "PDFBOX-1013: fixed NPE as proposed by Craig Stires, added some more COSName constants, introduced more default values\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1133328 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_183", "file": [{"additions": 23, "raw_url": "https://github.com/apache/pdfbox/raw/0b862d20780c2d395e99aa279e9b095c64a5eae2/pdfbox/src/main/java/org/apache/pdfbox/cos/COSName.java", "blob_url": "https://github.com/apache/pdfbox/blob/0b862d20780c2d395e99aa279e9b095c64a5eae2/pdfbox/src/main/java/org/apache/pdfbox/cos/COSName.java", "sha": "40499fead8d570732b2a06ca9046b436bb3b0905", "changes": 25, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/cos/COSName.java?ref=0b862d20780c2d395e99aa279e9b095c64a5eae2", "patch": "@@ -83,6 +83,10 @@\n      * A common COSName value.\n      */\n     public static final COSName ANNOTS = new COSName( \"Annots\" );\n+    /**\n+     * A common COSName value.\n+     */\n+    public static final COSName ANTI_ALIAS = new COSName( \"AntiAlias\" );\n     /**\n      * A common COSName value.\n      */\n@@ -275,9 +279,13 @@\n      */\n     public static final COSName COLUMNS = new COSName( \"Columns\" );\n     /**\n-    * A common COSName value.\n-    */\n+     * A common COSName value.\n+     */\n     public static final COSName CONTENTS = new COSName( \"Contents\" );\n+     /**\n+      * A common COSName value.\n+      */\n+    public static final COSName COORDS = new COSName( \"Coords\" );\n     /**\n     * A common COSName value.\n     */\n@@ -433,6 +441,11 @@\n     /** \"ExtGState\" */\n     public static final COSName EXT_G_STATE = new COSName( \"ExtGState\" );\n \n+    /**\n+     * A common COSName value.\n+     */\n+    public static final COSName EXTEND = new COSName( \"Extend\" );\n+\n     /** \"Extends\" */\n     public static final COSName EXTENDS = new COSName( \"Extends\" );\n \n@@ -533,6 +546,10 @@\n      * A common COSName value.\n      */\n     public static final COSName FT = new COSName( \"FT\" );\n+    /**\n+     * A common COSName value.\n+     */\n+    public static final COSName FUNCTION = new COSName( \"Function\" );\n     /**\n      * A common COSName value.\n      */\n@@ -944,6 +961,10 @@\n \n     /** \"Shading\" */\n     public static final COSName SHADING = new COSName( \"Shading\" );\n+    /**\n+     * A common COSName value.\n+     */\n+    public static final COSName SHADING_TYPE = new COSName( \"ShadingType\" );\n     /**\n      * A common COSName value.\n      */", "filename": "pdfbox/src/main/java/org/apache/pdfbox/cos/COSName.java"}, {"additions": 42, "raw_url": "https://github.com/apache/pdfbox/raw/0b862d20780c2d395e99aa279e9b095c64a5eae2/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/PDShading.java", "blob_url": "https://github.com/apache/pdfbox/blob/0b862d20780c2d395e99aa279e9b095c64a5eae2/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/PDShading.java", "sha": "855de4640edb4871043ead63d8c9d9a4edf7d054", "changes": 57, "status": "modified", "deletions": 15, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/PDShading.java?ref=0b862d20780c2d395e99aa279e9b095c64a5eae2", "patch": "@@ -20,6 +20,7 @@\n import org.apache.pdfbox.cos.COSBase;\n import org.apache.pdfbox.cos.COSBoolean;\n import org.apache.pdfbox.cos.COSArray;\n+import org.apache.pdfbox.cos.COSFloat;\n import org.apache.pdfbox.cos.COSName;\n import org.apache.pdfbox.cos.COSDictionary;\n import org.apache.pdfbox.pdmodel.graphics.color.PDColorSpaceFactory;\n@@ -41,7 +42,11 @@\n {\n     private COSDictionary DictShading;\n     private COSName shadingname;\n-\n+    private COSArray domain = null;\n+    private COSArray extend = null;\n+    private PDFunction function = null;\n+    private PDColorSpace colorspace = null;\n+    \n     /**\n      * The name of this object.\n      */\n@@ -105,7 +110,7 @@ public COSName getShadingName()\n     */\n     public int getShadingType()\n     {\n-        return DictShading.getInt(\"ShadingType\");\n+        return DictShading.getInt(COSName.SHADING_TYPE);\n     }\n     \n     /**\n@@ -116,7 +121,11 @@ public int getShadingType()\n     */\n     public PDColorSpace getColorSpace() throws IOException\n     {\n-        return PDColorSpaceFactory.createColorSpace(DictShading.getDictionaryObject(\"ColorSpace\"));\n+        if (colorspace == null)\n+        {\n+            colorspace = PDColorSpaceFactory.createColorSpace(DictShading.getDictionaryObject(COSName.COLORSPACE));\n+        }\n+        return colorspace;\n     }\n     \n     /**\n@@ -126,7 +135,7 @@ public PDColorSpace getColorSpace() throws IOException\n     */\n     public boolean getAntiAlias()\n     {\n-        return DictShading.getBoolean(\"AntiAlias\",false);\n+        return DictShading.getBoolean(COSName.ANTI_ALIAS,false);\n     }\n     \n     /**\n@@ -136,7 +145,7 @@ public boolean getAntiAlias()\n     */\n     public COSArray getCoords()\n     {\n-        return (COSArray)(DictShading.getDictionaryObject(\"Coords\"));\n+        return (COSArray)(DictShading.getDictionaryObject(COSName.COORDS));\n     }\n     \n     /**\n@@ -146,7 +155,11 @@ public COSArray getCoords()\n     */\n     public PDFunction getFunction() throws IOException\n     {\n-        return PDFunction.create(DictShading.getDictionaryObject(\"Function\"));\n+        if (function == null)\n+        {\n+            function = PDFunction.create(DictShading.getDictionaryObject(COSName.FUNCTION));\n+        }\n+        return function;\n     }\n     \n     /**\n@@ -156,7 +169,18 @@ public PDFunction getFunction() throws IOException\n     */\n     public COSArray getDomain()\n     {\n-        return (COSArray)(DictShading.getDictionaryObject(\"Domain\"));\n+        if (domain == null) \n+        {\n+            domain = (COSArray)(DictShading.getDictionaryObject(COSName.DOMAIN));\n+            // use default values\n+            if (domain == null) \n+            {\n+                domain = new COSArray();\n+                domain.add(new COSFloat(0.0f));\n+                domain.add(new COSFloat(1.0f));\n+            }\n+        }\n+        return domain;\n     }\n     \n     /**\n@@ -167,15 +191,18 @@ public COSArray getDomain()\n     */\n     public COSArray getExtend()\n     {\n-        COSArray arExtend=(COSArray)(DictShading.getDictionaryObject(\"Extend\"));\n-        if (arExtend == null)\n+        if (extend == null)\n         {\n-            arExtend = new COSArray();\n-            arExtend.add(COSBoolean.FALSE);\n-            arExtend.add(COSBoolean.FALSE);\n+            extend = (COSArray)(DictShading.getDictionaryObject(COSName.EXTEND));\n+            // use default values\n+            if (extend == null)\n+            {\n+                extend = new COSArray();\n+                extend.add(COSBoolean.FALSE);\n+                extend.add(COSBoolean.FALSE);\n+            }\n         }\n-        \n-        return arExtend;\n+        return extend;\n     }\n     \n     /**\n@@ -205,7 +232,7 @@ public String toString()\n             + \"\\tShadingType: \" + getShadingType() + \"\\n\"\n             + \"\\tColorSpace: \" + sColorSpace + \"\\n\"\n             + \"\\tAntiAlias: \" + getAntiAlias() + \"\\n\"\n-            + \"\\tCoords: \" + getCoords().toString() + \"\\n\"\n+            + \"\\tCoords: \" + (getCoords() != null ? getCoords().toString() : \"\") + \"\\n\"\n             + \"\\tDomain: \" + getDomain().toString() + \"\\n\"\n             + \"\\tFunction: \" + sFunction + \"\\n\"\n             + \"\\tExtend: \" + getExtend().toString() + \"\\n\"", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/PDShading.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/ffbc2070ecd7dc6893a48330aae0db5942c75cd9", "parent": "https://github.com/apache/pdfbox/commit/fb9ab33a4943741ad165de2036128946d17e58b2", "message": "PDFBOX-889: Empty page causes NPE in importPage\nPatch contributed by Kevin Jackson\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1038232 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_184", "file": [{"additions": 12, "raw_url": "https://github.com/apache/pdfbox/raw/ffbc2070ecd7dc6893a48330aae0db5942c75cd9/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java", "blob_url": "https://github.com/apache/pdfbox/blob/ffbc2070ecd7dc6893a48330aae0db5942c75cd9/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java", "sha": "eff6afe92ceec424769f84ad0cb869fe3aa03d2b", "changes": 21, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java?ref=ffbc2070ecd7dc6893a48330aae0db5942c75cd9", "patch": "@@ -322,16 +322,19 @@ public PDPage importPage( PDPage page ) throws IOException\n         try\n         {\n             PDStream src = page.getContents();\n-            PDStream dest = new PDStream( new COSStream( src.getStream(), document.getScratchFile() ) );\n-            importedPage.setContents( dest );\n-            os = dest.createOutputStream();\n-\n-            byte[] buf = new byte[10240];\n-            int amountRead = 0;\n-            is = src.createInputStream();\n-            while((amountRead = is.read(buf,0,10240)) > -1)\n+            if(src != null)\n             {\n-                os.write(buf, 0, amountRead);\n+                PDStream dest = new PDStream( new COSStream( src.getStream(), document.getScratchFile() ) );\n+                importedPage.setContents( dest );\n+                os = dest.createOutputStream();\n+\n+                byte[] buf = new byte[10240];\n+                int amountRead = 0;\n+                is = src.createInputStream();\n+                while((amountRead = is.read(buf,0,10240)) > -1)\n+                {\n+                    os.write(buf, 0, amountRead);\n+                }\n             }\n             addPage( importedPage );\n         }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/f4e4fc542951b1c27b76ffd857d6d8973eb3f68d", "parent": "https://github.com/apache/pdfbox/commit/42087b9de7fd044853fc476e562c0274a1638157", "message": "PDFBOX-891: Malformed document causes NPE in PDNameTreeNode.getValue\nPatch courtesy of Kevin Jackson\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1037069 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_185", "file": [{"additions": 15, "raw_url": "https://github.com/apache/pdfbox/raw/f4e4fc542951b1c27b76ffd857d6d8973eb3f68d/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.java", "blob_url": "https://github.com/apache/pdfbox/blob/f4e4fc542951b1c27b76ffd857d6d8973eb3f68d/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.java", "sha": "62759c2fbac04c1b31666675e28f37db17834630", "changes": 20, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.java?ref=f4e4fc542951b1c27b76ffd857d6d8973eb3f68d", "patch": "@@ -23,6 +23,8 @@\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n \n import org.apache.pdfbox.cos.COSArray;\n import org.apache.pdfbox.cos.COSBase;\n@@ -39,6 +41,7 @@\n  */\n public class PDNameTreeNode implements COSObjectable\n {\n+    private static final Log log = LogFactory.getLog(PDNameTreeNode.class);\n     private COSDictionary node;\n     private Class valueType = null;\n \n@@ -147,15 +150,22 @@ public Object getValue( String name ) throws IOException\n         else\n         {\n             List kids = getKids();\n-            for( int i=0; i<kids.size() && retval == null; i++ )\n+            if (kids != null) \n             {\n-                PDNameTreeNode childNode = (PDNameTreeNode)kids.get( i );\n-                if( childNode.getLowerLimit().compareTo( name ) <= 0 &&\n-                        childNode.getUpperLimit().compareTo( name ) >= 0 )\n+                for( int i=0; i<kids.size() && retval == null; i++ )\n                 {\n-                    retval = childNode.getValue( name );\n+                    PDNameTreeNode childNode = (PDNameTreeNode)kids.get( i );\n+                    if( childNode.getLowerLimit().compareTo( name ) <= 0 &&\n+                        childNode.getUpperLimit().compareTo( name ) >= 0 )\n+                    {\n+                        retval = childNode.getValue( name );\n+                    }\n                 }\n             }\n+            else\n+            {\n+                log.warn(\"NameTreeNode does not have \\\"names\\\" nor \\\"kids\\\" objects.\");\n+            }\n         }\n         return retval;\n     }", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/e467a21fd9cfee2de8e1cb9d57780797e8c3143b", "parent": "https://github.com/apache/pdfbox/commit/879f64bf32322183bdcb272f0086b8408e39cc49", "message": "PDFBOX-780: EXCEPTION_ACCESS_VIOLATION in fontmanager.so/fontmanager.dll\n\nUse the default font instead of null to avoid a NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@988495 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_186", "file": [{"additions": 1, "raw_url": "https://github.com/apache/pdfbox/raw/e467a21fd9cfee2de8e1cb9d57780797e8c3143b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java", "blob_url": "https://github.com/apache/pdfbox/blob/e467a21fd9cfee2de8e1cb9d57780797e8c3143b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java", "sha": "8552d5a46dacca799426baee51ceeb33c4eff410", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java?ref=e467a21fd9cfee2de8e1cb9d57780797e8c3143b", "patch": "@@ -101,7 +101,7 @@ public void drawString( String string, Graphics g, float fontSize,\n         if (_awtFont.canDisplayUpTo(string) != -1) { \n             log.warn(\"Changing font on <\" + string + \"> from <\"\n                     + _awtFont.getName() + \"> to the default font\");\n-            _awtFont = null; \n+            _awtFont = Font.decode(null); \n         }\n \n         Graphics2D g2d = (Graphics2D)g;", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/f38c4d8457414d419af3f4478a3a9b59145acdf4", "parent": "https://github.com/apache/pdfbox/commit/aea2cf2e0eefc2c260452e8ee20d68474533e1c3", "message": "PDFBOX-737: added a fix for a potential NPE. Patch by Adam Nichols (adam at swmc dot com)\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@955842 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_187", "file": [{"additions": 12, "raw_url": "https://github.com/apache/pdfbox/raw/f38c4d8457414d419af3f4478a3a9b59145acdf4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageNode.java", "blob_url": "https://github.com/apache/pdfbox/blob/f38c4d8457414d419af3f4478a3a9b59145acdf4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageNode.java", "sha": "216fa95e05e855dba2cc2aef5922b7c8ed375483", "changes": 13, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageNode.java?ref=f38c4d8457414d419af3f4478a3a9b59145acdf4", "patch": "@@ -16,6 +16,8 @@\n  */\n package org.apache.pdfbox.pdmodel;\n \n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n import org.apache.pdfbox.cos.COSArray;\n import org.apache.pdfbox.cos.COSBase;\n import org.apache.pdfbox.cos.COSDictionary;\n@@ -41,6 +43,11 @@\n {\n     private COSDictionary page;\n \n+    /**\n+     * Log instance.\n+     */\n+    private static final Log log = LogFactory.getLog(PDPageNode.class);\n+\n     /**\n      * Creates a new instance of PDPage.\n      */\n@@ -178,7 +185,11 @@ public void getAllKids(List result)\n     private static COSArray getAllKids(List result, COSDictionary page, boolean recurse)\n     {\n         COSArray kids = (COSArray)page.getDictionaryObject( COSName.KIDS );\n-\n+        if ( kids == null)\n+        {\n+            log.error(\"No Kids found in getAllKids(). Probably a malformed pdf.\");\n+            return null;\n+        }\n         for( int i=0; i<kids.size(); i++ )\n         {\n             COSBase obj = kids.getObject( i );", "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageNode.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/71f6b0874c12f6e40f0b491e2559686d191aca14", "parent": "https://github.com/apache/pdfbox/commit/6b8316816efe98aee734100a75c75734ba403335", "message": "PDFBOX-703: added a check for null to avoid NPE. Patch by Peter Lenahan (Peter_Lenahan at ibi dot com)\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@941835 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_188", "file": [{"additions": 4, "raw_url": "https://github.com/apache/pdfbox/raw/71f6b0874c12f6e40f0b491e2559686d191aca14/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java", "blob_url": "https://github.com/apache/pdfbox/blob/71f6b0874c12f6e40f0b491e2559686d191aca14/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java", "sha": "3d18f80489b210becb4ac3fddbe995f4cb878ed6", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java?ref=71f6b0874c12f6e40f0b491e2559686d191aca14", "patch": "@@ -22,6 +22,7 @@\n import java.util.Collections;\n import java.util.List;\n \n+import org.apache.fontbox.cff.CFFOperator;\n import org.apache.fontbox.cff.charset.CFFCharset;\n import org.apache.fontbox.cff.charset.CFFExpertCharset;\n import org.apache.fontbox.cff.charset.CFFExpertSubsetCharset;\n@@ -623,7 +624,9 @@ private Entry getEntry(CFFOperator operator)\n         {\n             for (Entry entry : entries)\n             {\n-                if (entry.operator.equals(operator))\n+            \t// Check for null entry before comparing the Font\n+                if (entry != null && entry.operator != null && \n+                    entry.operator.equals(operator))\n                 {\n                     return entry;\n                 }", "filename": "fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/95fa048ad447bce2d2bb5477c2a2076ebabd6764", "parent": "https://github.com/apache/pdfbox/commit/f52731360d9f471ac4e76fe472d2075a955d6faf", "message": "PDFBOX-700: avoid NPE when merging pdfs containing an OutlineNode. Patch by Adam Nichols (adam at swmc dot com)\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@940369 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_189", "file": [{"additions": 6, "raw_url": "https://github.com/apache/pdfbox/raw/95fa048ad447bce2d2bb5477c2a2076ebabd6764/pdfbox/src/main/java/org/apache/pdfbox/util/PDFMergerUtility.java", "blob_url": "https://github.com/apache/pdfbox/blob/95fa048ad447bce2d2bb5477c2a2076ebabd6764/pdfbox/src/main/java/org/apache/pdfbox/util/PDFMergerUtility.java", "sha": "059296263fc3e5017d9789a3c6381ce87aeacb6d", "changes": 9, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/util/PDFMergerUtility.java?ref=95fa048ad447bce2d2bb5477c2a2076ebabd6764", "patch": "@@ -238,9 +238,12 @@ public void appendDocument(PDDocument destination, PDDocument source) throws IOE\n             else\n             {\n                 PDOutlineItem first = srcOutline.getFirstChild();\n-                PDOutlineItem clonedFirst = new PDOutlineItem( (COSDictionary)cloneForNewDocument(\n-                        destination, first ));\n-                destOutline.appendChild( clonedFirst );\n+                if(first != null)\n+                {\n+                    PDOutlineItem clonedFirst = new PDOutlineItem( (COSDictionary)cloneForNewDocument(\n+                            destination, first ));\n+                    destOutline.appendChild( clonedFirst );\n+                }\n             }\n         }\n ", "filename": "pdfbox/src/main/java/org/apache/pdfbox/util/PDFMergerUtility.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/d3c45be1be0d4d29aef41704a636b332cafb700c", "parent": "https://github.com/apache/pdfbox/commit/1a1eca4fe6d5f7c485458c2393df2617d71e3377", "message": "PDFBOX-391: avoid NPE if there aren't any input-ext files\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/pdfbox/trunk@795111 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_190", "file": [{"additions": 5, "raw_url": "https://github.com/apache/pdfbox/raw/d3c45be1be0d4d29aef41704a636b332cafb700c/src/test/java/org/apache/pdfbox/util/TestPDFToImage.java", "blob_url": "https://github.com/apache/pdfbox/blob/d3c45be1be0d4d29aef41704a636b332cafb700c/src/test/java/org/apache/pdfbox/util/TestPDFToImage.java", "sha": "6a877a18e79e78feb7cf8894872c4194f59b0abe", "changes": 8, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/src/test/java/org/apache/pdfbox/util/TestPDFToImage.java?ref=d3c45be1be0d4d29aef41704a636b332cafb700c", "patch": "@@ -190,10 +190,12 @@ public boolean accept(File dir, String name)\n                         return (name.endsWith(\".pdf\") || name.endsWith(\".ai\"));\n                     }\n                 });\n-\n-                for (int n = 0; n < testFiles.length; n++)\n+                if (testFiles != null)\n                 {\n-                    doTestFile(testFiles[n], false, inDirExt, outDirExt);\n+                    for (int n = 0; n < testFiles.length; n++)\n+                    {\n+                        doTestFile(testFiles[n], false, inDirExt, outDirExt);\n+                    }\n                 }\n             }\n             else", "filename": "src/test/java/org/apache/pdfbox/util/TestPDFToImage.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/9145c72a6db7a2e53af4ca6ccb8fc22446caff7c", "parent": "https://github.com/apache/pdfbox/commit/c68bc234bff27c153cacd6a9f0c472f39293c10b", "message": "PDFBOX-395: NPE on public key encryption of an unencrypted document\r\n\r\nUse a new PDEncryptionDictionary if one does not already exist.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/pdfbox/trunk@730175 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_191", "file": [{"additions": 3, "raw_url": "https://github.com/apache/pdfbox/raw/9145c72a6db7a2e53af4ca6ccb8fc22446caff7c/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java", "blob_url": "https://github.com/apache/pdfbox/blob/9145c72a6db7a2e53af4ca6ccb8fc22446caff7c/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java", "sha": "ad04ce95838c5ed961a427b5e126ba3e3ad3f445", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java?ref=9145c72a6db7a2e53af4ca6ccb8fc22446caff7c", "patch": "@@ -243,6 +243,9 @@ public void prepareDocumentForEncryption(PDDocument doc) throws CryptographyExce\n             Security.addProvider(new BouncyCastleProvider());\n \n             PDEncryptionDictionary dictionary = doc.getEncryptionDictionary();\n+            if (dictionary == null) {\n+                dictionary = new PDEncryptionDictionary();\n+            }\n \n             dictionary.setFilter(FILTER);\n             dictionary.setLength(this.keyLength);", "filename": "src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/93e6136929ed9aedb2ae2b0440c7635fc56dee44", "parent": "https://github.com/apache/pdfbox/commit/05546966f220021924e32ce99fa8b906dbba8149", "message": "PDFBOX-519: avoid NPE if a separation colorspace uses an other tint function than type 2. Patch by Andrew Duffy (aduffy at simiolus dot com)\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@907436 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_192", "file": [{"additions": 27, "raw_url": "https://github.com/apache/pdfbox/raw/93e6136929ed9aedb2ae2b0440c7635fc56dee44/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDSeparation.java", "blob_url": "https://github.com/apache/pdfbox/blob/93e6136929ed9aedb2ae2b0440c7635fc56dee44/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDSeparation.java", "sha": "b54249f9317ea47d58c489cfadcafb219bf49b9f", "changes": 40, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDSeparation.java?ref=93e6136929ed9aedb2ae2b0440c7635fc56dee44", "patch": "@@ -25,9 +25,11 @@\n import org.apache.commons.logging.LogFactory;\n import org.apache.pdfbox.cos.COSArray;\n import org.apache.pdfbox.cos.COSBase;\n+import org.apache.pdfbox.cos.COSFloat;\n import org.apache.pdfbox.cos.COSName;\n import org.apache.pdfbox.cos.COSDictionary;\n import org.apache.pdfbox.pdmodel.common.function.PDFunction;\n+import org.apache.pdfbox.pdmodel.common.function.PDFunctionType2;\n \n /**\n  * This class represents a Separation color space.\n@@ -102,13 +104,7 @@ protected ColorSpace createColorSpace() throws IOException\n     {\n         try\n         {\n-            ///dump some information to help figure these things out\n-            //logger().info( array.toString());\n-\n             PDColorSpace alt = getAlternateColorSpace();\n-\n-            //logger().info(alt.toString());\n-\n             return alt.getJavaColorSpace();\n         }\n         catch (IOException ioexception)\n@@ -171,9 +167,6 @@ public PDColorSpace getAlternateColorSpace() throws IOException\n     {\n         COSBase alternate = array.getObject( 2 );\n         PDColorSpace cs = PDColorSpaceFactory.createColorSpace( alternate );\n-\n-        //logger().info(\"Returning \" + cs.toString() + \" for input \" + alternate.toString());\n-\n         return cs;\n     }\n \n@@ -227,12 +220,33 @@ private COSDictionary getDictionary() throws IOException\n     }\n     \n     /**\n-     * Returns all colorvalues for this colorspace. \n-     * @return COSArry with all colorvalues\n-     * @throws IOException If there is an error getting the object from the dictionary\n+     * Returns the components of the color in the alternate colorspace for a tint value of 1.0.\n+     * @return COSArray with the color components\n+     * @throws IOException If the tint function is not supported\n      */\n     public COSArray getColorValues() throws IOException\n     {\n-        return (COSArray) getDictionary().getDictionaryObject(\"C1\");\n+        PDFunction tintTransform = getTintTransform();\n+        if(tintTransform instanceof PDFunctionType2)\n+        {\n+            return (COSArray) getDictionary().getDictionaryObject(\"C1\");\n+        }\n+        else\n+        {\n+            log.warn(\"Unsupported tint transformation type: \"+tintTransform.getClass().getName() \n+                    + \" in \"+getClass().getName()+\".getColorValues()\"\n+                    + \" using color black instead.\");\n+            int numberOfComponents = getAlternateColorSpace().getNumberOfComponents();\n+            // To get black as color:\n+            // 0.0f is used for the single value(s) if the colorspace is gray or RGB based\n+            // 1.0f is used for the single value if the colorspace is CMYK based\n+            float colorValue = numberOfComponents == 4 ? 1.0f : 0.0f;\n+            COSArray retval = new COSArray();\n+            for (int i=0;i<numberOfComponents;i++) \n+            {\n+                retval.add(new COSFloat(colorValue));\n+            }\n+            return retval;\n+        }\n     }\n }", "filename": "src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDSeparation.java"}], "repo": "pdfbox"}, {"commit": "https://github.com/apache/pdfbox/commit/34b4467309b5b0b1da2369a8a05b3530840b5408", "parent": "https://github.com/apache/pdfbox/commit/a290c8718b8dd5532310ffc53f9392b767630a2d", "message": "Fix an NPE in PDPixelMap.\nMake PDXObject inherit LoggingObject so it can participate in logging.\nAdd a source test file.\nSubmit modified control PNG files for changes that are changes at the binary level, but are not visible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/pdfbox/trunk@760769 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "pdfbox_193", "file": [{"additions": 61, "raw_url": "https://github.com/apache/pdfbox/raw/34b4467309b5b0b1da2369a8a05b3530840b5408/src/main/java/org/apache/pdfbox/pdmodel/graphics/xobject/PDPixelMap.java", "blob_url": "https://github.com/apache/pdfbox/blob/34b4467309b5b0b1da2369a8a05b3530840b5408/src/main/java/org/apache/pdfbox/pdmodel/graphics/xobject/PDPixelMap.java", "sha": "92dad386063c6a24cad4699a2b709f95e1ba2233", "changes": 110, "status": "modified", "deletions": 49, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/src/main/java/org/apache/pdfbox/pdmodel/graphics/xobject/PDPixelMap.java?ref=34b4467309b5b0b1da2369a8a05b3530840b5408", "patch": "@@ -115,55 +115,67 @@ public BufferedImage getRGBImage() throws IOException\n             return image;\n         }\n \n-        //byte[] index =\n-        //ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);\n-        int width = getWidth();\n-        int height = getHeight();\n-        int bpc = getBitsPerComponent();\n-        //COSInteger length =\n-        //        (COSInteger) stream.getStream().getDictionary().getDictionaryObject(COSName.LENGTH);\n-        //byte[] array = new byte[stream.getFilteredStream().];\n-        byte[] array = getPDStream().getByteArray();\n-\n-//      Get the ColorModel right\n-        PDColorSpace colorspace = getColorSpace();\n-        ColorModel cm = colorspace.createColorModel( bpc );\n-        WritableRaster raster = cm.createCompatibleWritableRaster( width, height );\n-        //DataBufferByte buffer = (DataBufferByte)raster.getDataBuffer();\n-        DataBufferByte buffer = (DataBufferByte)raster.getDataBuffer();\n-        byte[] bufferData = buffer.getData();\n-        //System.arraycopy( array, 0, bufferData, 0, array.length );\n-        int predictor = getPredictor();\n-        List filters = getPDStream().getFilters();\n-\n-        /**\n-         * PDF Spec 1.6 3.3.3 LZW and Flate predictor function\n-         *\n-         * Basically if predictor > 10 and LZW or Flate is being used then the\n-         * predictor is not used.\n-         *\n-         * \"For LZWDecode and FlateDecode, a Predictor value greater than or equal to 10\n-         * merely indicates that a PNG predictor is in use; the specific predictor function\n-         * used is explicitly encoded in the incoming data. The value of Predictor supplied\n-         * by the decoding filter need not match the value used when the data was encoded\n-         * if they are both greater than or equal to 10.\"\n-         */\n-        if( predictor < 10 ||\n-            filters == null || !(filters.contains( COSName.LZW_DECODE.getName()) ||\n-                                 filters.contains( COSName.FLATE_DECODE.getName()) ) )\n-        {\n-            PredictorAlgorithm filter = PredictorAlgorithm.getFilter(predictor);\n-            filter.setWidth(width);\n-            filter.setHeight(height);\n-            filter.setBpp((bpc * 3) / 8);\n-            filter.decode(array, bufferData);\n-        }\n-        else\n-        {\n-            System.arraycopy( array, 0,bufferData, 0, bufferData.length );\n-        }\n-        image = new BufferedImage(cm, raster, false, null);\n-        return image;\n+\ttry{\n+\t\t//byte[] index =\n+\t\t//ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);\n+\t\tint width = getWidth();\n+\t\tint height = getHeight();\n+\t\tint bpc = getBitsPerComponent();\n+\t\t//COSInteger length =\n+\t\t//        (COSInteger) stream.getStream().getDictionary().getDictionaryObject(COSName.LENGTH);\n+\t\t//byte[] array = new byte[stream.getFilteredStream().];\n+\t\tbyte[] array = getPDStream().getByteArray();\n+\n+\t//      Get the ColorModel right\n+\t\tPDColorSpace colorspace = getColorSpace();\n+\t\tif (colorspace == null){\n+\t\t\t//throw new IOException(\"getColorSpace() returned NULL\");\n+\t\t\tlogger().severe(\"getColorSpace() returned NULL\");\n+\t\t\treturn null;\n+\t\t}\n+\t\tColorModel cm = colorspace.createColorModel( bpc );\n+\t\tWritableRaster raster = cm.createCompatibleWritableRaster( width, height );\n+\t\t//DataBufferByte buffer = (DataBufferByte)raster.getDataBuffer();\n+\t\tDataBufferByte buffer = (DataBufferByte)raster.getDataBuffer();\n+\t\tbyte[] bufferData = buffer.getData();\n+\t\t//System.arraycopy( array, 0, bufferData, 0, array.length );\n+\t\tint predictor = getPredictor();\n+\t\tList filters = getPDStream().getFilters();\n+\n+\t\t/**\n+\t\t * PDF Spec 1.6 3.3.3 LZW and Flate predictor function\n+\t\t *\n+\t\t * Basically if predictor > 10 and LZW or Flate is being used then the\n+\t\t * predictor is not used.\n+\t\t *\n+\t\t * \"For LZWDecode and FlateDecode, a Predictor value greater than or equal to 10\n+\t\t * merely indicates that a PNG predictor is in use; the specific predictor function\n+\t\t * used is explicitly encoded in the incoming data. The value of Predictor supplied\n+\t\t * by the decoding filter need not match the value used when the data was encoded\n+\t\t * if they are both greater than or equal to 10.\"\n+\t\t */\n+\t\tif( predictor < 10 ||\n+\t\t    filters == null || !(filters.contains( COSName.LZW_DECODE.getName()) ||\n+\t\t\t\t\t filters.contains( COSName.FLATE_DECODE.getName()) ) )\n+\t\t{\n+\t\t    PredictorAlgorithm filter = PredictorAlgorithm.getFilter(predictor);\n+\t\t    filter.setWidth(width);\n+\t\t    filter.setHeight(height);\n+\t\t    filter.setBpp((bpc * 3) / 8);\n+\t\t    filter.decode(array, bufferData);\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t    System.arraycopy( array, 0,bufferData, 0, bufferData.length );\n+\t\t}\n+\t\timage = new BufferedImage(cm, raster, false, null);\n+\t\treturn image;\n+\t} catch (IOException IOe){\n+\t\tlogger().severe(IOe.toString() + \"\\n at\\n\" + FullStackTrace(IOe));\n+\t\t//A NULL return is caught in pagedrawer.Invoke.process() so don't re-throw.\n+\t\t//Returning the NULL falls through to Phlip Koch's TODO section.\n+\t\treturn null;\n+\t}\n     }\n \n     /**", "filename": "src/main/java/org/apache/pdfbox/pdmodel/graphics/xobject/PDPixelMap.java"}, {"additions": 3, "raw_url": "https://github.com/apache/pdfbox/raw/34b4467309b5b0b1da2369a8a05b3530840b5408/src/main/java/org/apache/pdfbox/pdmodel/graphics/xobject/PDXObject.java", "blob_url": "https://github.com/apache/pdfbox/blob/34b4467309b5b0b1da2369a8a05b3530840b5408/src/main/java/org/apache/pdfbox/pdmodel/graphics/xobject/PDXObject.java", "sha": "7af021b9d7815a49e01d4c99588146bcff5eef22", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/src/main/java/org/apache/pdfbox/pdmodel/graphics/xobject/PDXObject.java?ref=34b4467309b5b0b1da2369a8a05b3530840b5408", "patch": "@@ -28,6 +28,8 @@\n import org.apache.pdfbox.pdmodel.common.PDMetadata;\n import org.apache.pdfbox.pdmodel.common.PDStream;\n \n+import org.apache.pdfbox.exceptions.LoggingObject;\n+\n /**\n  * The base class for all XObjects in the PDF document.\n  *\n@@ -36,7 +38,7 @@\n  * @author Marcel Kammer\n  * @version $Revision: 1.14 $\n  */\n-public abstract class PDXObject implements COSObjectable\n+public abstract class PDXObject extends LoggingObject implements COSObjectable\n {\n     private PDStream xobject;\n ", "filename": "src/main/java/org/apache/pdfbox/pdmodel/graphics/xobject/PDXObject.java"}, {"additions": 770, "raw_url": "https://github.com/apache/pdfbox/raw/34b4467309b5b0b1da2369a8a05b3530840b5408/test/input/rendering/26101_Colors.ai", "blob_url": "https://github.com/apache/pdfbox/blob/34b4467309b5b0b1da2369a8a05b3530840b5408/test/input/rendering/26101_Colors.ai", "sha": "8f651ce4e6633c9539d8a842555923298de5cc27", "changes": 770, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/test/input/rendering/26101_Colors.ai?ref=34b4467309b5b0b1da2369a8a05b3530840b5408", "filename": "test/input/rendering/26101_Colors.ai"}, {"additions": 0, "raw_url": "https://github.com/apache/pdfbox/raw/34b4467309b5b0b1da2369a8a05b3530840b5408/test/input/rendering/26101_Colors.ai-1.png", "blob_url": "https://github.com/apache/pdfbox/blob/34b4467309b5b0b1da2369a8a05b3530840b5408/test/input/rendering/26101_Colors.ai-1.png", "sha": "b5ef561f53b15427583db2a99a87c7340512d32c", "changes": 0, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/test/input/rendering/26101_Colors.ai-1.png?ref=34b4467309b5b0b1da2369a8a05b3530840b5408", "filename": "test/input/rendering/26101_Colors.ai-1.png"}, {"additions": 0, "raw_url": "https://github.com/apache/pdfbox/raw/34b4467309b5b0b1da2369a8a05b3530840b5408/test/input/rendering/4PP-Highlighting.pdf", "blob_url": "https://github.com/apache/pdfbox/blob/34b4467309b5b0b1da2369a8a05b3530840b5408/test/input/rendering/4PP-Highlighting.pdf", "sha": "a207011634c67db89b584eacff4a5a4ec10c39f5", "changes": 0, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/test/input/rendering/4PP-Highlighting.pdf?ref=34b4467309b5b0b1da2369a8a05b3530840b5408", "filename": "test/input/rendering/4PP-Highlighting.pdf"}, {"additions": 0, "raw_url": "https://github.com/apache/pdfbox/raw/34b4467309b5b0b1da2369a8a05b3530840b5408/test/input/rendering/4PP-Highlighting.pdf-1.png", "blob_url": "https://github.com/apache/pdfbox/blob/34b4467309b5b0b1da2369a8a05b3530840b5408/test/input/rendering/4PP-Highlighting.pdf-1.png", "sha": "0ed7327534abb829528a8c4ade5298552ce27d99", "changes": 0, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/test/input/rendering/4PP-Highlighting.pdf-1.png?ref=34b4467309b5b0b1da2369a8a05b3530840b5408", "filename": "test/input/rendering/4PP-Highlighting.pdf-1.png"}], "repo": "pdfbox"}]
