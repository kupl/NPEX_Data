{
    "httpcomponents-client_0730d6c": {
        "bug_id": "httpcomponents-client_0730d6c",
        "commit": "https://github.com/apache/httpcomponents-client/commit/0730d6c7c97c8d3936ccb51af663757157002163",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/0730d6c7c97c8d3936ccb51af663757157002163/httpclient/src/main/java/org/apache/http/client/protocol/RequestAuthCache.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/main/java/org/apache/http/client/protocol/RequestAuthCache.java?ref=0730d6c7c97c8d3936ccb51af663757157002163",
                "deletions": 1,
                "filename": "httpclient/src/main/java/org/apache/http/client/protocol/RequestAuthCache.java",
                "patch": "@@ -92,7 +92,7 @@ public void process(final HttpRequest request, final HttpContext context)\n         }\n \n         final AuthState targetState = clientContext.getTargetAuthState();\n-        if (target != null && targetState != null && targetState.getState() == AuthProtocolState.UNCHALLENGED) {\n+        if (targetState != null && targetState.getState() == AuthProtocolState.UNCHALLENGED) {\n             final AuthScheme authScheme = authCache.get(target);\n             if (authScheme != null) {\n                 doPreemptiveAuth(target, authScheme, targetState, credsProvider);",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/0730d6c7c97c8d3936ccb51af663757157002163/httpclient/src/main/java/org/apache/http/client/protocol/RequestAuthCache.java",
                "sha": "214d87f24eb39a3989c704b1c4d30a50c7927d70",
                "status": "modified"
            }
        ],
        "message": "target cannot be null here otherwise the earlier invocation of target.getPort() would fail with NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1435320 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/5bdd456c8c5c32accfecf086b264961ea29e4ceb",
        "patched_files": [
            "RequestAuthCache.java"
        ],
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestRequestAuthCache.java"
        ]
    },
    "httpcomponents-client_11536d3": {
        "bug_id": "httpcomponents-client_11536d3",
        "commit": "https://github.com/apache/httpcomponents-client/commit/11536d3d075c82a12e708e9b07a5f5f11192d24a",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/11536d3d075c82a12e708e9b07a5f5f11192d24a/RELEASE_NOTES.txt",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/RELEASE_NOTES.txt?ref=11536d3d075c82a12e708e9b07a5f5f11192d24a",
                "deletions": 0,
                "filename": "RELEASE_NOTES.txt",
                "patch": "@@ -1,3 +1,12 @@\n+Changes since 4.3\n+-------------------\n+\n+* [HTTPCLIENT-1399] Fixed NPE in RequestBuilder.\n+  Contributed by Oleg Kalnichevski <olegk at apache.org>\n+\n+\n+\n+\n Release 4.3 Final\n -------------------\n ",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/11536d3d075c82a12e708e9b07a5f5f11192d24a/RELEASE_NOTES.txt",
                "sha": "4621a331cda75c6d74b95cf14b0f79b1c908cfa0",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/11536d3d075c82a12e708e9b07a5f5f11192d24a/httpclient/src/main/java/org/apache/http/client/methods/RequestBuilder.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/main/java/org/apache/http/client/methods/RequestBuilder.java?ref=11536d3d075c82a12e708e9b07a5f5f11192d24a",
                "deletions": 2,
                "filename": "httpclient/src/main/java/org/apache/http/client/methods/RequestBuilder.java",
                "patch": "@@ -226,15 +226,15 @@ public RequestBuilder removeHeaders(final String name) {\n     }\n \n     public RequestBuilder setHeader(final Header header) {\n-        if (headergroup != null) {\n+        if (headergroup == null) {\n             headergroup = new HeaderGroup();\n         }\n         this.headergroup.updateHeader(header);\n         return this;\n     }\n \n     public RequestBuilder setHeader(final String name, final String value) {\n-        if (headergroup != null) {\n+        if (headergroup == null) {\n             headergroup = new HeaderGroup();\n         }\n         this.headergroup.updateHeader(new BasicHeader(name, value));",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/11536d3d075c82a12e708e9b07a5f5f11192d24a/httpclient/src/main/java/org/apache/http/client/methods/RequestBuilder.java",
                "sha": "6ac5b96fb8ca1b3306e2f118a030ec0d6c71f352",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/11536d3d075c82a12e708e9b07a5f5f11192d24a/httpclient/src/test/java/org/apache/http/client/methods/TestRequestBuilder.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/test/java/org/apache/http/client/methods/TestRequestBuilder.java?ref=11536d3d075c82a12e708e9b07a5f5f11192d24a",
                "deletions": 0,
                "filename": "httpclient/src/test/java/org/apache/http/client/methods/TestRequestBuilder.java",
                "patch": "@@ -195,6 +195,11 @@ public void testGettersAndMutators() throws Exception {\n         Assert.assertEquals(0, builder.getHeaders(\"header1\").length);\n         Assert.assertSame(null, builder.getEntity());\n         Assert.assertSame(null, builder.getConfig());\n+\n+        builder.setHeader(h2)\n+            .setHeader(\"header1\", \"a-lot-more-stuff\");\n+        Assert.assertSame(\"a-lot-more-stuff\", builder.getLastHeader(\"header1\").getValue());\n+        Assert.assertEquals(1, builder.getHeaders(\"header1\").length);\n     }\n \n     @Test(expected=IllegalArgumentException.class)",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/11536d3d075c82a12e708e9b07a5f5f11192d24a/httpclient/src/test/java/org/apache/http/client/methods/TestRequestBuilder.java",
                "sha": "e27c6e3d7f146250b4686a4f7eb42cb1e5835bff",
                "status": "modified"
            }
        ],
        "message": "HTTPCLIENT-1399: fixed NPE in RequestBuilder\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1523642 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/eff62c7a6ea113702bdf6f120cc518bf3c00fb31",
        "patched_files": [
            "RELEASE_NOTES.txt",
            "RequestBuilder.java"
        ],
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestRequestBuilder.java"
        ]
    },
    "httpcomponents-client_13f31eb": {
        "bug_id": "httpcomponents-client_13f31eb",
        "commit": "https://github.com/apache/httpcomponents-client/commit/13f31eb2dbeee32367558692ee9ab0a59d7b2d14",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/13f31eb2dbeee32367558692ee9ab0a59d7b2d14/RELEASE_NOTES.txt",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/RELEASE_NOTES.txt?ref=13f31eb2dbeee32367558692ee9ab0a59d7b2d14",
                "deletions": 0,
                "filename": "RELEASE_NOTES.txt",
                "patch": "@@ -22,6 +22,10 @@ maintained as of 4.1 GA release.\n Changelog\n -------------------\n \n+* [HTTPCLIENT-936] Fixed bug causing NPE or an infinite loop in \n+  the authentication code in case of a SPNEGO authentication failure. \n+  Contributed by Oleg Kalnichevski <olegk at apache.org>\n+\n * [HTTPCLIENT-427] HTTP caching support\n   Contributed by Joe Campbell, David Cleaver, David Mays, Jon Moore, Brad Spenla\n ",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/13f31eb2dbeee32367558692ee9ab0a59d7b2d14/RELEASE_NOTES.txt",
                "sha": "4ace86fd2a2e14d5fe948a9080f2b48a410e9079",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/13f31eb2dbeee32367558692ee9ab0a59d7b2d14/httpclient-cache/src/test/java/org/apache/http/client/cache/impl/HttpTestUtils.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient-cache/src/test/java/org/apache/http/client/cache/impl/HttpTestUtils.java?ref=13f31eb2dbeee32367558692ee9ab0a59d7b2d14",
                "deletions": 1,
                "filename": "httpclient-cache/src/test/java/org/apache/http/client/cache/impl/HttpTestUtils.java",
                "patch": "@@ -78,6 +78,17 @@ public static boolean isHopByHopHeader(String name) {\n         return false;\n     }\n \n+    /*\n+     * Determines whether a given header name may appear multiple times.\n+     */\n+    public static boolean isMultiHeader(String name) {\n+        for (String s : MULTI_HEADERS) {\n+            if (s.equalsIgnoreCase(name))\n+                return true;\n+        }\n+        return false;\n+    }\n+\n     /*\n      * Determines whether a given header name may only appear once in a message.\n      */\n@@ -88,7 +99,6 @@ public static boolean isSingleHeader(String name) {\n         }\n         return false;\n     }\n-\n     /*\n      * Assert.asserts that two request or response bodies are byte-equivalent.\n      */",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/13f31eb2dbeee32367558692ee9ab0a59d7b2d14/httpclient-cache/src/test/java/org/apache/http/client/cache/impl/HttpTestUtils.java",
                "sha": "74b458c3f78e33af48ac08007d297fc4996f550c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/13f31eb2dbeee32367558692ee9ab0a59d7b2d14/httpclient-cache/src/test/java/org/apache/http/client/cache/impl/TestCacheEntry.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient-cache/src/test/java/org/apache/http/client/cache/impl/TestCacheEntry.java?ref=13f31eb2dbeee32367558692ee9ab0a59d7b2d14",
                "deletions": 4,
                "filename": "httpclient-cache/src/test/java/org/apache/http/client/cache/impl/TestCacheEntry.java",
                "patch": "@@ -26,8 +26,6 @@\n  */\n package org.apache.http.client.cache.impl;\n \n-import static junit.framework.Assert.assertFalse;\n-\n import java.util.Date;\n import java.util.Set;\n \n@@ -376,8 +374,7 @@ public void testCacheEntryIsNotRevalidatableIfNoAppropriateHeaders() {\n                 new BasicHeader(\"Cache-Control\", \"public\") };\n \n         CacheEntry entry = getEntry(headers);\n-\n-        assertFalse(entry.isRevalidatable());\n+        Assert.assertFalse(entry.isRevalidatable());\n     }\n \n ",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/13f31eb2dbeee32367558692ee9ab0a59d7b2d14/httpclient-cache/src/test/java/org/apache/http/client/cache/impl/TestCacheEntry.java",
                "sha": "2a458a7a8633be69ff037b798e17003a6de240ee",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/13f31eb2dbeee32367558692ee9ab0a59d7b2d14/httpclient/src/main/java/org/apache/http/impl/auth/AuthSchemeBase.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/main/java/org/apache/http/impl/auth/AuthSchemeBase.java?ref=13f31eb2dbeee32367558692ee9ab0a59d7b2d14",
                "deletions": 1,
                "filename": "httpclient/src/main/java/org/apache/http/impl/auth/AuthSchemeBase.java",
                "patch": "@@ -125,7 +125,7 @@ public Header authenticate(\n     }\n \n     protected abstract void parseChallenge(\n-            CharArrayBuffer buffer, int pos, int len) throws MalformedChallengeException;\n+            CharArrayBuffer buffer, int beginIndex, int endIndex) throws MalformedChallengeException;\n \n     /**\n      * Returns <code>true</code> if authenticating against a proxy, <code>false</code>",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/13f31eb2dbeee32367558692ee9ab0a59d7b2d14/httpclient/src/main/java/org/apache/http/impl/auth/AuthSchemeBase.java",
                "sha": "c790f3ebae66b9eb1003c1eef9027bb693034f07",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/13f31eb2dbeee32367558692ee9ab0a59d7b2d14/httpclient/src/main/java/org/apache/http/impl/auth/NTLMScheme.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/main/java/org/apache/http/impl/auth/NTLMScheme.java?ref=13f31eb2dbeee32367558692ee9ab0a59d7b2d14",
                "deletions": 2,
                "filename": "httpclient/src/main/java/org/apache/http/impl/auth/NTLMScheme.java",
                "patch": "@@ -99,8 +99,9 @@ public boolean isConnectionBased() {\n \n     @Override\n     protected void parseChallenge(\n-            final CharArrayBuffer buffer, int pos, int len) throws MalformedChallengeException {\n-        String challenge = buffer.substringTrimmed(pos, len);\n+            final CharArrayBuffer buffer, \n+            int beginIndex, int endIndex) throws MalformedChallengeException {\n+        String challenge = buffer.substringTrimmed(beginIndex, endIndex);\n         if (challenge.length() == 0) {\n             if (this.state == State.UNINITIATED) {\n                 this.state = State.CHALLENGE_RECEIVED;",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/13f31eb2dbeee32367558692ee9ab0a59d7b2d14/httpclient/src/main/java/org/apache/http/impl/auth/NTLMScheme.java",
                "sha": "4f616a5c2bdc2aaab54f9037f13c8c6f896f5314",
                "status": "modified"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/13f31eb2dbeee32367558692ee9ab0a59d7b2d14/httpclient/src/main/java/org/apache/http/impl/auth/NegotiateScheme.java",
                "changes": 96,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/main/java/org/apache/http/impl/auth/NegotiateScheme.java?ref=13f31eb2dbeee32367558692ee9ab0a59d7b2d14",
                "deletions": 61,
                "filename": "httpclient/src/main/java/org/apache/http/impl/auth/NegotiateScheme.java",
                "patch": "@@ -33,15 +33,14 @@\n import org.apache.http.Header;\n import org.apache.http.HttpHost;\n import org.apache.http.HttpRequest;\n-import org.apache.http.auth.AUTH;\n import org.apache.http.auth.AuthenticationException;\n-import org.apache.http.auth.ContextAwareAuthScheme;\n import org.apache.http.auth.Credentials;\n import org.apache.http.auth.InvalidCredentialsException;\n import org.apache.http.auth.MalformedChallengeException;\n import org.apache.http.message.BasicHeader;\n import org.apache.http.protocol.ExecutionContext;\n import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.CharArrayBuffer;\n import org.ietf.jgss.GSSContext;\n import org.ietf.jgss.GSSException;\n import org.ietf.jgss.GSSManager;\n@@ -54,28 +53,28 @@\n  *\n  * @since 4.1\n  */\n-public class NegotiateScheme implements ContextAwareAuthScheme {\n+public class NegotiateScheme extends AuthSchemeBase {\n \n-    private static final int UNINITIATED         = 0;\n-    private static final int INITIATED           = 1;\n-    private static final int NEGOTIATING         = 3;\n-    private static final int ESTABLISHED         = 4;\n-    private static final int FAILED              = Integer.MAX_VALUE;\n-    private static final String SPNEGO_OID        = \"1.3.6.1.5.5.2\";\n-    private static final String KERBEROS_OID        = \"1.2.840.113554.1.2.2\";\n+    enum State {\n+        UNINITIATED,\n+        CHALLENGE_RECEIVED,\n+        TOKEN_GENERATED,\n+        FAILED,\n+    }\n+    \n+    private static final String SPNEGO_OID       = \"1.3.6.1.5.5.2\";\n+    private static final String KERBEROS_OID     = \"1.2.840.113554.1.2.2\";\n \n     private final Log log = LogFactory.getLog(getClass());\n \n     private final SpnegoTokenGenerator spengoGenerator;\n \n     private final boolean stripPort;\n \n-    private boolean proxy;\n-\n     private GSSContext gssContext = null;\n \n     /** Authentication process state */\n-    private int state;\n+    private State state;\n \n     /** base64 decoded challenge **/\n     private byte[] token;\n@@ -88,7 +87,7 @@\n      */\n     public NegotiateScheme(final SpnegoTokenGenerator spengoGenerator, boolean stripPort) {\n         super();\n-        this.state = UNINITIATED;\n+        this.state = State.UNINITIATED;\n         this.spengoGenerator = spengoGenerator;\n         this.stripPort = stripPort;\n     }\n@@ -109,7 +108,7 @@ public NegotiateScheme() {\n      *\n      */\n     public boolean isComplete() {\n-        return this.state == ESTABLISHED || this.state == FAILED;\n+        return this.state == State.TOKEN_GENERATED || this.state == State.FAILED;\n     }\n \n     /**\n@@ -152,7 +151,7 @@ public Header authenticate(\n         if (request == null) {\n             throw new IllegalArgumentException(\"HTTP request may not be null\");\n         }\n-        if (state == UNINITIATED) {\n+        if (state != State.CHALLENGE_RECEIVED) {\n             throw new IllegalStateException(\n                     \"Negotiation authentication process has not been initiated\");\n         }\n@@ -227,19 +226,13 @@ public Header authenticate(\n                 gssContext.requestMutualAuth(true);\n                 gssContext.requestCredDeleg(true);\n             }\n-            state = INITIATED;\n-\n             if (token == null) {\n                 token = new byte[0];                \n             }\n-            // HTTP 1.1 issue:\n-            // Mutual auth will never complete to do 200 instead of 401 in\n-            // return from server. \"state\" will never reach ESTABLISHED\n-            // but it works anyway\n-\n             token = gssContext.initSecContext(token, 0, token.length);\n             if (token == null) {\n-                throw new AuthenticationException(\"Failed to initialize security context\");\n+                state = State.FAILED;\n+                throw new AuthenticationException(\"GSS security context initialization failed\");\n             }\n \n             /*\n@@ -250,11 +243,14 @@ public Header authenticate(\n                 token = spengoGenerator.generateSpnegoDERObject(token);\n             }\n \n+            state = State.TOKEN_GENERATED;\n+            String tokenstr = new String(Base64.encodeBase64(token, false));\n             if (log.isDebugEnabled()) {\n-                log.debug(\"got token, sending \" + token.length + \" bytes to server\");\n+                log.debug(\"Sending response '\" + tokenstr + \"' back to the auth server\");\n             }\n+            return new BasicHeader(\"Authorization\", \"Negotiate \" + tokenstr);\n         } catch (GSSException gsse) {\n-            state = FAILED;\n+            state = State.FAILED;\n             if (gsse.getMajor() == GSSException.DEFECTIVE_CREDENTIAL\n                     || gsse.getMajor() == GSSException.CREDENTIALS_EXPIRED)\n                 throw new InvalidCredentialsException(gsse.getMessage(), gsse);\n@@ -267,11 +263,9 @@ public Header authenticate(\n             // other error\n             throw new AuthenticationException(gsse.getMessage());\n         } catch (IOException ex){\n-            state = FAILED;\n+            state = State.FAILED;\n             throw new AuthenticationException(ex.getMessage());\n         }\n-        return new BasicHeader(\"Authorization\", \"Negotiate \" +\n-                new String(Base64.encodeBase64(token, false)) );\n     }\n \n \n@@ -312,41 +306,21 @@ public boolean isConnectionBased() {\n         return true;\n     }\n \n-    /**\n-     * Processes the Negotiate challenge.\n-     *\n-     */\n-    public void processChallenge(final Header header) throws MalformedChallengeException {\n+    @Override\n+    protected void parseChallenge(\n+            final CharArrayBuffer buffer, \n+            int beginIndex, int endIndex) throws MalformedChallengeException {\n+        String challenge = buffer.substringTrimmed(beginIndex, endIndex);\n         if (log.isDebugEnabled()) {\n-            log.debug(\"Challenge header: \" + header);\n+            log.debug(\"Received challenge '\" + challenge + \"' from the auth server\");\n         }\n-        String authheader = header.getName();\n-        String challenge = header.getValue();\n-        if (authheader.equalsIgnoreCase(AUTH.WWW_AUTH)) {\n-            this.proxy = false;\n-        } else if (authheader.equalsIgnoreCase(AUTH.PROXY_AUTH)) {\n-            this.proxy = true;\n+        if (state == State.UNINITIATED) {\n+            token = new Base64().decode(challenge.getBytes());\n+            state = State.CHALLENGE_RECEIVED;\n         } else {\n-            throw new MalformedChallengeException(\"Unexpected header name: \" + authheader);\n-        }\n-\n-        if (challenge.startsWith(\"Negotiate\")) {\n-            if(isComplete() == false)\n-                state = NEGOTIATING;\n-\n-            if (challenge.startsWith(\"Negotiate \")){\n-                token = new Base64().decode(challenge.substring(10).getBytes());\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"challenge = \" + challenge.substring(10));\n-                }\n-            } else {\n-                token = new byte[0];\n-            }\n+            log.debug(\"Authentication already attempted\");\n+            state = State.FAILED;\n         }\n     }\n-\n-    public boolean isProxy() {\n-        return this.proxy;\n-    }\n-\n+    \n }",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/13f31eb2dbeee32367558692ee9ab0a59d7b2d14/httpclient/src/main/java/org/apache/http/impl/auth/NegotiateScheme.java",
                "sha": "df2e9c326b06b9bfd9eb4076feee1daa34baefba",
                "status": "modified"
            },
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/13f31eb2dbeee32367558692ee9ab0a59d7b2d14/httpclient/src/test/java/org/apache/http/impl/auth/TestNegotiateScheme.java",
                "changes": 70,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/test/java/org/apache/http/impl/auth/TestNegotiateScheme.java?ref=13f31eb2dbeee32367558692ee9ab0a59d7b2d14",
                "deletions": 28,
                "filename": "httpclient/src/test/java/org/apache/http/impl/auth/TestNegotiateScheme.java",
                "patch": "@@ -26,26 +26,24 @@\n  */\n package org.apache.http.impl.auth;\n \n-import static org.mockito.Matchers.*;\n-import static org.mockito.Mockito.*;\n-\n import java.io.IOException;\n import java.security.Principal;\n \n+import junit.framework.Assert;\n+\n import org.apache.http.HttpEntity;\n import org.apache.http.HttpException;\n import org.apache.http.HttpHost;\n import org.apache.http.HttpRequest;\n import org.apache.http.HttpResponse;\n+import org.apache.http.HttpStatus;\n import org.apache.http.auth.AuthScheme;\n import org.apache.http.auth.AuthScope;\n import org.apache.http.auth.Credentials;\n import org.apache.http.client.methods.HttpGet;\n import org.apache.http.client.params.AuthPolicy;\n import org.apache.http.client.params.ClientPNames;\n import org.apache.http.entity.StringEntity;\n-import org.apache.http.impl.auth.NegotiateScheme;\n-import org.apache.http.impl.auth.NegotiateSchemeFactory;\n import org.apache.http.impl.client.DefaultHttpClient;\n import org.apache.http.localserver.BasicServerTestBase;\n import org.apache.http.localserver.LocalTestServer;\n@@ -59,8 +57,9 @@\n import org.ietf.jgss.GSSName;\n import org.ietf.jgss.Oid;\n import org.junit.Before;\n-import org.junit.Ignore;\n import org.junit.Test;\n+import org.mockito.Matchers;\n+import org.mockito.Mockito;\n \n /**\n  * Tests for {@link NegotiateScheme}.\n@@ -79,13 +78,15 @@ public void setUp() throws Exception {\n      * This service will continue to ask for authentication.\n      */\n     private static class PleaseNegotiateService implements HttpRequestHandler {\n-        public void handle(final HttpRequest request,\n+\n+        public void handle(\n+                final HttpRequest request,\n                 final HttpResponse response,\n                 final HttpContext context) throws HttpException, IOException {\n-            response.setStatusCode(401);\n+            response.setStatusCode(HttpStatus.SC_UNAUTHORIZED);\n             response.addHeader(new BasicHeader(\"WWW-Authenticate\", \"Negotiate blablabla\"));\n-            response.setEntity(new StringEntity(\"auth required \"));\n             response.addHeader(new BasicHeader(\"Connection\", \"Keep-Alive\"));\n+            response.setEntity(new StringEntity(\"auth required \"));\n         }\n     }\n \n@@ -96,55 +97,64 @@ public void handle(final HttpRequest request,\n      *\n      */\n     private static class NegotiateSchemeWithMockGssManager extends NegotiateScheme {\n-        GSSManager manager = mock(GSSManager.class);\n-        GSSName name = mock(GSSName.class);\n-        GSSContext context = mock(GSSContext.class);\n+        \n+        GSSManager manager = Mockito.mock(GSSManager.class);\n+        GSSName name = Mockito.mock(GSSName.class);\n+        GSSContext context = Mockito.mock(GSSContext.class);\n \n         NegotiateSchemeWithMockGssManager() throws Exception {\n             super(null, true);\n-\n-            when(context.initSecContext(any(byte[].class), anyInt(), anyInt()))\n-                .thenReturn(\"12345678\".getBytes());\n-            when(manager.createName(any(String.class), any(Oid.class)))\n-                .thenReturn(name);\n-            when(manager.createContext(any(GSSName.class), any(Oid.class), any(GSSCredential.class), anyInt()))\n-                .thenReturn(context);\n-\n+            Mockito.when(context.initSecContext(\n+                    Matchers.any(byte[].class), Matchers.anyInt(), Matchers.anyInt()))\n+                    .thenReturn(\"12345678\".getBytes());\n+            Mockito.when(manager.createName(\n+                    Matchers.any(String.class), Matchers.any(Oid.class)))\n+                    .thenReturn(name);\n+            Mockito.when(manager.createContext(\n+                    Matchers.any(GSSName.class), Matchers.any(Oid.class), \n+                    Matchers.any(GSSCredential.class), Matchers.anyInt()))\n+                    .thenReturn(context);\n         }\n \n         @Override\n         protected GSSManager getManager() {\n             return manager;\n         }\n+        \n     }\n \n     private static class UseJaasCredentials implements Credentials {\n+        \n         public String getPassword() {\n             return null;\n         }\n \n         public Principal getUserPrincipal() {\n             return null;\n         }\n+        \n     }\n \n     private static class NegotiateSchemeFactoryWithMockGssManager extends NegotiateSchemeFactory {\n+        \n         NegotiateSchemeWithMockGssManager scheme;\n+        \n         NegotiateSchemeFactoryWithMockGssManager() throws Exception {\n             scheme = new NegotiateSchemeWithMockGssManager();\n         }\n+        \n         @Override\n         public AuthScheme newInstance(HttpParams params) {\n             return scheme;\n         }\n+        \n     }\n \n     /**\n      * Tests that the client will stop connecting to the server if\n      * the server still keep asking for a valid ticket.\n      */\n     @Test\n-    @Ignore\n     public void testDontTryToAuthenticateEndlessly() throws Exception {\n         int port = this.localServer.getServiceAddress().getPort();\n         this.localServer.register(\"*\", new PleaseNegotiateService());\n@@ -163,25 +173,26 @@ public void testDontTryToAuthenticateEndlessly() throws Exception {\n         HttpGet httpget = new HttpGet(s);\n         HttpResponse response = client.execute(httpget);\n         HttpEntity e = response.getEntity();\n-        e.consumeContent();\n+        if (e != null) {\n+            e.consumeContent();\n+        }\n+        Assert.assertEquals(HttpStatus.SC_UNAUTHORIZED, response.getStatusLine().getStatusCode());\n     }\n \n-\n     /**\n      * Javadoc specifies that {@link GSSContext#initSecContext(byte[], int, int)} can return null\n      * if no token is generated. Client should be able to deal with this response.\n-     *\n      */\n     @Test\n-    @Ignore\n-    public void testNoTokenGeneratedGenerateAnError() throws Exception {\n+    public void testNoTokenGeneratedError() throws Exception {\n         int port = this.localServer.getServiceAddress().getPort();\n         this.localServer.register(\"*\", new PleaseNegotiateService());\n \n         HttpHost target = new HttpHost(\"localhost\", port);\n         DefaultHttpClient client = new DefaultHttpClient();\n         NegotiateSchemeFactoryWithMockGssManager nsf = new NegotiateSchemeFactoryWithMockGssManager();\n-        when(nsf.scheme.context.initSecContext(any(byte[].class), anyInt(), anyInt())).thenReturn(null);\n+        Mockito.when(nsf.scheme.context.initSecContext(\n+                Matchers.any(byte[].class), Matchers.anyInt(), Matchers.anyInt())).thenReturn(null);\n         client.getAuthSchemes().register(AuthPolicy.SPNEGO, nsf);\n \n         Credentials use_jaas_creds = new UseJaasCredentials();\n@@ -193,7 +204,10 @@ public void testNoTokenGeneratedGenerateAnError() throws Exception {\n         HttpGet httpget = new HttpGet(s);\n         HttpResponse response = client.execute(httpget);\n         HttpEntity e = response.getEntity();\n-        e.consumeContent();\n+        if (e != null) {\n+            e.consumeContent();\n+        }\n+        Assert.assertEquals(HttpStatus.SC_UNAUTHORIZED, response.getStatusLine().getStatusCode());\n     }\n \n }",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/13f31eb2dbeee32367558692ee9ab0a59d7b2d14/httpclient/src/test/java/org/apache/http/impl/auth/TestNegotiateScheme.java",
                "sha": "315d032697b9f1de89c2115831fd4d1d4ac0b5fe",
                "status": "modified"
            }
        ],
        "message": "HTTPCLIENT-936: Fixed bug causing NPE or an infinite loop in the authentication code in case of a SPNEGO authentication failure\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@943620 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/bb0ecdbcb43d8c36e3df95f67c6b1f3fe77e1d84",
        "patched_files": [
            "NTLMScheme.java",
            "RELEASE_NOTES.txt",
            "HttpTestUtils.java",
            "CacheEntry.java",
            "AuthSchemeBase.java",
            "NegotiateScheme.java"
        ],
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestNegotiateScheme.java",
            "TestCacheEntry.java"
        ]
    },
    "httpcomponents-client_1779158": {
        "bug_id": "httpcomponents-client_1779158",
        "commit": "https://github.com/apache/httpcomponents-client/commit/1779158a4f24b524d51216b656176c74dd23d6b4",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/1779158a4f24b524d51216b656176c74dd23d6b4/RELEASE_NOTES.txt",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/RELEASE_NOTES.txt?ref=1779158a4f24b524d51216b656176c74dd23d6b4",
                "deletions": 0,
                "filename": "RELEASE_NOTES.txt",
                "patch": "@@ -1,6 +1,9 @@\n Changes in trunk\n -------------------\n \n+* [HTTPCLIENT-1276] Cache update on a 304 response causes NPE. \n+  Contributed by Francois-Xavier Bonnet <francois-xavier.bonnet at centraliens.net> \n+\n * [HTTPCLIENT-1273] DecompressingHttpClient does not automatically consume response \n   content in case of an i/o, HTTP or runtime exception thrown by the decompressing \n   protocol interceptor leading to a potential connection leak. ",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/1779158a4f24b524d51216b656176c74dd23d6b4/RELEASE_NOTES.txt",
                "sha": "abb953d2fe42f88141cd185be1ab91c191ef8f27",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/1779158a4f24b524d51216b656176c74dd23d6b4/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CacheEntity.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CacheEntity.java?ref=1779158a4f24b524d51216b656176c74dd23d6b4",
                "deletions": 3,
                "filename": "httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CacheEntity.java",
                "patch": "@@ -35,7 +35,6 @@\n import org.apache.http.HttpEntity;\n import org.apache.http.annotation.Immutable;\n import org.apache.http.client.cache.HttpCacheEntry;\n-import org.apache.http.client.cache.Resource;\n import org.apache.http.protocol.HTTP;\n \n @Immutable\n@@ -67,8 +66,7 @@ public boolean isRepeatable() {\n     }\n \n     public long getContentLength() {\n-        Resource resource = this.cacheEntry.getResource();\n-\t\treturn (resource != null) ? resource.length() : 0L;\n+\t\treturn this.cacheEntry.getResource().length();\n     }\n \n     public InputStream getContent() throws IOException {",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/1779158a4f24b524d51216b656176c74dd23d6b4/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CacheEntity.java",
                "sha": "5987e499df295944fa103a751fd09167833680ad",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/1779158a4f24b524d51216b656176c74dd23d6b4/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CacheEntryUpdater.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CacheEntryUpdater.java?ref=1779158a4f24b524d51216b656176c74dd23d6b4",
                "deletions": 1,
                "filename": "httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CacheEntryUpdater.java",
                "patch": "@@ -87,7 +87,12 @@ public HttpCacheEntry updateCacheEntry(\n         if (response.getStatusLine().getStatusCode() != HttpStatus.SC_NOT_MODIFIED)\n             throw new IllegalArgumentException(\"Response must have 304 status code\");\n         Header[] mergedHeaders = mergeHeaders(entry, response);\n-        Resource resource = resourceFactory.copy(requestId, entry.getResource());\n+        Resource oldResource = entry.getResource();\n+        Resource resource = null;\n+        if (oldResource != null) {\n+            resource = resourceFactory.copy(requestId, entry.getResource());\n+            oldResource.dispose();\n+        }\n         return new HttpCacheEntry(\n                 requestDate,\n                 responseDate,",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/1779158a4f24b524d51216b656176c74dd23d6b4/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CacheEntryUpdater.java",
                "sha": "87a8f152ae05cb961907d7afe87428c31cc3fd47",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/1779158a4f24b524d51216b656176c74dd23d6b4/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachedHttpResponseGenerator.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachedHttpResponseGenerator.java?ref=1779158a4f24b524d51216b656176c74dd23d6b4",
                "deletions": 3,
                "filename": "httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachedHttpResponseGenerator.java",
                "patch": "@@ -73,11 +73,13 @@ HttpResponse generateResponse(HttpCacheEntry entry) {\n         HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, entry\n                 .getStatusCode(), entry.getReasonPhrase());\n \n-        HttpEntity entity = new CacheEntity(entry);\n         response.setHeaders(entry.getAllHeaders());\n-        addMissingContentLengthHeader(response, entity);\n-        response.setEntity(entity);\n \n+        if (entry.getResource() != null) {\n+            HttpEntity entity = new CacheEntity(entry);\n+            addMissingContentLengthHeader(response, entity);\n+            response.setEntity(entity);\n+        }\n \n         long age = this.validityStrategy.getCurrentAgeSecs(entry, now);\n         if (age > 0) {",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/1779158a4f24b524d51216b656176c74dd23d6b4/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachedHttpResponseGenerator.java",
                "sha": "51981dba7daba0dbee73bbe32d3a222fd3402713",
                "status": "modified"
            },
            {
                "additions": 67,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/1779158a4f24b524d51216b656176c74dd23d6b4/httpclient-cache/src/test/java/org/apache/http/impl/client/cache/TestCachingExec.java",
                "changes": 68,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient-cache/src/test/java/org/apache/http/impl/client/cache/TestCachingExec.java?ref=1779158a4f24b524d51216b656176c74dd23d6b4",
                "deletions": 1,
                "filename": "httpclient-cache/src/test/java/org/apache/http/impl/client/cache/TestCachingExec.java",
                "patch": "@@ -27,12 +27,12 @@\n package org.apache.http.impl.client.cache;\n \n import static org.easymock.EasyMock.anyObject;\n+import static org.easymock.EasyMock.eq;\n import static org.easymock.EasyMock.expect;\n import static org.easymock.EasyMock.expectLastCall;\n import static org.easymock.EasyMock.isA;\n import static org.easymock.EasyMock.isNull;\n import static org.easymock.EasyMock.same;\n-import static org.easymock.EasyMock.eq;\n import static org.easymock.classextension.EasyMock.createMockBuilder;\n import static org.easymock.classextension.EasyMock.createNiceMock;\n import static org.easymock.classextension.EasyMock.replay;\n@@ -1527,6 +1527,72 @@ public void testCanCacheAResponseWithoutABody() throws Exception {\n         assertEquals(1, backend.getExecutions());\n     }\n \n+\t@Test\n+\tpublic void testNoEntityForIfNoneMatchRequestNotYetInCache() throws Exception {\n+\n+\t\tDate now = new Date();\n+\t\tDate tenSecondsAgo = new Date(now.getTime() - 10 * 1000L);\n+\n+\t\timpl = new CachingExec(mockBackend, new BasicHttpCache(),\n+\t\t\t\tCacheConfig.DEFAULT);\n+\t\tHttpRequestWrapper req1 = HttpRequestWrapper.wrap(new HttpGet(\n+\t\t\t\t\"http://foo.example.com/\"));\n+\t\treq1.addHeader(\"If-None-Match\", \"\\\"etag\\\"\");\n+\n+\t\tHttpResponse resp1 = new BasicHttpResponse(HttpVersion.HTTP_1_1,\n+\t\t\t\tHttpStatus.SC_NOT_MODIFIED, \"Not modified\");\n+\t\tresp1.setHeader(\"Content-Length\", \"128\");\n+\t\tresp1.setHeader(\"ETag\", \"\\\"etag\\\"\");\n+\t\tresp1.setHeader(\"Date\", DateUtils.formatDate(tenSecondsAgo));\n+\t\tresp1.setHeader(\"Cache-Control\", \"public, max-age=5\");\n+\n+\t\tbackendExpectsAnyRequestAndReturn(resp1);\n+\t\treplayMocks();\n+\t\tHttpResponse result = impl.execute(route, req1);\n+\t\tverifyMocks();\n+\n+\t\tassertEquals(HttpStatus.SC_NOT_MODIFIED, result.getStatusLine()\n+\t\t\t\t.getStatusCode());\n+\t\tassertNull(\"The 304 response messages MUST NOT contain a message-body\",\n+\t\t\t\tresult.getEntity());\n+\t}\n+\n+\t@Test\n+\tpublic void testNotModifiedResponseUpdatesCacheEntryWhenNoEntity() throws Exception {\n+\n+\t\tDate now = new Date();\n+\n+\t\timpl = new CachingExec(mockBackend, new BasicHttpCache(),CacheConfig.DEFAULT);\n+\n+\t\tHttpRequestWrapper req1 = HttpRequestWrapper.wrap(new HttpGet(\"http://foo.example.com/\"));\n+\t\treq1.addHeader(\"If-None-Match\", \"etag\");\n+\n+\t\tHttpRequestWrapper req2 = HttpRequestWrapper.wrap(new HttpGet(\"http://foo.example.com/\"));\n+\t\treq2.addHeader(\"If-None-Match\", \"etag\");\n+\n+\t\tHttpResponse resp1 = new BasicHttpResponse(HttpVersion.HTTP_1_1, HttpStatus.SC_NOT_MODIFIED, \"Not modified\");\n+\t\tresp1.setHeader(\"Date\", DateUtils.formatDate(now));\n+\t\tresp1.setHeader(\"Cache-Control\",\"max-age=0\");\n+\t\tresp1.setHeader(\"Etag\", \"etag\");\n+\n+\t\tHttpResponse resp2 = new BasicHttpResponse(HttpVersion.HTTP_1_1, HttpStatus.SC_NOT_MODIFIED, \"Not modified\");\n+\t\tresp2.setHeader(\"Date\", DateUtils.formatDate(now));\n+\t\tresp2.setHeader(\"Cache-Control\",\"max-age=0\");\n+\t\tresp1.setHeader(\"Etag\", \"etag\");\n+\n+\t\tbackendExpectsAnyRequestAndReturn(resp1);\n+\t\tbackendExpectsAnyRequestAndReturn(resp2);\n+\t\treplayMocks();\n+\t\tHttpResponse result1 = impl.execute(route, req1);\n+\t\tHttpResponse result2 = impl.execute(route, req2);\n+\t\tverifyMocks();\n+\n+\t\tassertEquals(HttpStatus.SC_NOT_MODIFIED, result1.getStatusLine().getStatusCode());\n+\t\tassertEquals(\"etag\", result1.getFirstHeader(\"Etag\").getValue());\n+\t\tassertEquals(HttpStatus.SC_NOT_MODIFIED, result2.getStatusLine().getStatusCode());\n+\t\tassertEquals(\"etag\", result2.getFirstHeader(\"Etag\").getValue());\n+\t}\n+\n     private IExpectationSetters<CloseableHttpResponse> backendExpectsAnyRequestAndReturn(\n             HttpResponse response) throws Exception {\n         CloseableHttpResponse resp = mockBackend.execute(",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/1779158a4f24b524d51216b656176c74dd23d6b4/httpclient-cache/src/test/java/org/apache/http/impl/client/cache/TestCachingExec.java",
                "sha": "004e16f92389fa502da7b217ef7bbd5e89762c14",
                "status": "modified"
            }
        ],
        "message": "HTTPCLIENT-1276: cache update on a 304 response causes NPE\nContributed by Francois-Xavier Bonnet <francois-xavier.bonnet at centraliens.net>\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1421330 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/bfbc573cbddfe2c607771faf02c905b837769eb9",
        "patched_files": [
            "CachedHttpResponseGenerator.java",
            "RELEASE_NOTES.txt",
            "CacheEntryUpdater.java",
            "CachingExec.java",
            "CacheEntity.java"
        ],
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestCachedHttpResponseGenerator.java",
            "TestCacheEntryUpdater.java",
            "TestCachingExec.java"
        ]
    },
    "httpcomponents-client_28a6d5c": {
        "bug_id": "httpcomponents-client_28a6d5c",
        "commit": "https://github.com/apache/httpcomponents-client/commit/28a6d5c481f31cee11585493826322ac210e2aaf",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/28a6d5c481f31cee11585493826322ac210e2aaf/httpclient5/src/main/java/org/apache/hc/client5/http/impl/sync/ResponseEntityProxy.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient5/src/main/java/org/apache/hc/client5/http/impl/sync/ResponseEntityProxy.java?ref=28a6d5c481f31cee11585493826322ac210e2aaf",
                "deletions": 3,
                "filename": "httpclient5/src/main/java/org/apache/hc/client5/http/impl/sync/ResponseEntityProxy.java",
                "patch": "@@ -92,7 +92,9 @@ public InputStream getContent() throws IOException {\n     @Override\n     public void writeTo(final OutputStream outstream) throws IOException {\n         try {\n-            super.writeTo(outstream);\n+            if (outstream != null) {\n+                super.writeTo(outstream);\n+            }\n             releaseConnection();\n         } catch (IOException | RuntimeException ex) {\n             abortConnection();\n@@ -107,7 +109,9 @@ public boolean eofDetected(final InputStream wrapped) throws IOException {\n         try {\n             // there may be some cleanup required, such as\n             // reading trailers after the response body:\n-            wrapped.close();\n+            if (wrapped != null) {\n+                wrapped.close();\n+            }\n             releaseConnection();\n         } catch (IOException | RuntimeException ex) {\n             abortConnection();\n@@ -125,7 +129,9 @@ public boolean streamClosed(final InputStream wrapped) throws IOException {\n             // this assumes that closing the stream will\n             // consume the remainder of the response body:\n             try {\n-                wrapped.close();\n+                if (wrapped != null) {\n+                    wrapped.close();\n+                }\n                 releaseConnection();\n             } catch (final SocketException ex) {\n                 if (open) {",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/28a6d5c481f31cee11585493826322ac210e2aaf/httpclient5/src/main/java/org/apache/hc/client5/http/impl/sync/ResponseEntityProxy.java",
                "sha": "27845165d4818ea356e5b1c17529c1fe94118bef",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/28a6d5c481f31cee11585493826322ac210e2aaf/httpclient5/src/main/java/org/apache/hc/client5/http/io/EofSensorInputStream.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient5/src/main/java/org/apache/hc/client5/http/io/EofSensorInputStream.java?ref=28a6d5c481f31cee11585493826322ac210e2aaf",
                "deletions": 9,
                "filename": "httpclient5/src/main/java/org/apache/hc/client5/http/io/EofSensorInputStream.java",
                "patch": "@@ -193,14 +193,15 @@ public void close() throws IOException {\n      */\n     protected void checkEOF(final int eof) throws IOException {\n \n-        if ((wrappedStream != null) && (eof < 0)) {\n+        final InputStream toCheckStream = wrappedStream;\n+        if ((toCheckStream != null) && (eof < 0)) {\n             try {\n                 boolean scws = true; // should close wrapped stream?\n                 if (eofWatcher != null) {\n-                    scws = eofWatcher.eofDetected(wrappedStream);\n+                    scws = eofWatcher.eofDetected(toCheckStream);\n                 }\n                 if (scws) {\n-                    wrappedStream.close();\n+                    toCheckStream.close();\n                 }\n             } finally {\n                 wrappedStream = null;\n@@ -221,14 +222,15 @@ protected void checkEOF(final int eof) throws IOException {\n      */\n     protected void checkClose() throws IOException {\n \n-        if (wrappedStream != null) {\n+        final InputStream toCloseStream = wrappedStream;\n+        if (toCloseStream != null) {\n             try {\n                 boolean scws = true; // should close wrapped stream?\n                 if (eofWatcher != null) {\n-                    scws = eofWatcher.streamClosed(wrappedStream);\n+                    scws = eofWatcher.streamClosed(toCloseStream);\n                 }\n                 if (scws) {\n-                    wrappedStream.close();\n+                    toCloseStream.close();\n                 }\n             } finally {\n                 wrappedStream = null;\n@@ -251,14 +253,15 @@ protected void checkClose() throws IOException {\n      */\n     protected void checkAbort() throws IOException {\n \n-        if (wrappedStream != null) {\n+        final InputStream toAbortStream = wrappedStream;\n+        if (toAbortStream != null) {\n             try {\n                 boolean scws = true; // should close wrapped stream?\n                 if (eofWatcher != null) {\n-                    scws = eofWatcher.streamAbort(wrappedStream);\n+                    scws = eofWatcher.streamAbort(toAbortStream);\n                 }\n                 if (scws) {\n-                    wrappedStream.close();\n+                    toAbortStream.close();\n                 }\n             } finally {\n                 wrappedStream = null;",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/28a6d5c481f31cee11585493826322ac210e2aaf/httpclient5/src/main/java/org/apache/hc/client5/http/io/EofSensorInputStream.java",
                "sha": "66aa1a2cde30452444edb8956f32fabf3c364ca2",
                "status": "modified"
            }
        ],
        "message": "HTTPCLIENT-1767: Null pointer dereference in EofSensorInputStream and ResponseEntityProxy\n\nEofSensorInputStream is generating NullPointerExceptions in some rare situations. This commit fixes that behaviour for the check methods by dereferencing the instance variable to a final local variable to ensure that if it is not null at the null guard, that it will be not null after that point also to successfully close/abort the stream\n\nIn some rare cases, null parameters are sent to ReponseEntityProxy methods, this adds checks on those to ensure that the connections are still released, but the null variable is not dereferenced.\n\nContributed by Peter Ansell <p_ansell@yahoo.com>\n\nConflicts:\n\thttpclient5/src/main/java/org/apache/hc/client5/http/impl/sync/ResponseEntityProxy.java\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1760585 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/f779a4b65d04ef3ad8ab766d041e36eb4da0b564",
        "patched_files": [
            "EofSensorInputStream.java"
        ],
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestEofSensorInputStream.java"
        ]
    },
    "httpcomponents-client_2aa1fc1": {
        "bug_id": "httpcomponents-client_2aa1fc1",
        "commit": "https://github.com/apache/httpcomponents-client/commit/2aa1fc14004a1669d00d4d50aebb1ecabe5b3fa3",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/2aa1fc14004a1669d00d4d50aebb1ecabe5b3fa3/RELEASE_NOTES.txt",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/RELEASE_NOTES.txt?ref=2aa1fc14004a1669d00d4d50aebb1ecabe5b3fa3",
                "deletions": 2,
                "filename": "RELEASE_NOTES.txt",
                "patch": "@@ -1,8 +1,12 @@\n Changes in trunk\n -------------------\n \n-* [HTTPCLIENT-1281] GzipDecompressingEntity does not release InputStream when an IOException occurs \n-  while reading the Gzip header.\n+* [HTTPCLIENT-1279] Target host responding with status 407 (proxy authentication required)\n+  causes an NPE.\n+  Contributed by Oleg Kalnichevski <olegk at apache.org>\n+\n+* [HTTPCLIENT-1281] GzipDecompressingEntity does not release InputStream when an IOException\n+  occurs while reading the Gzip header.\n   Contributed by Francois-Xavier Bonnet <francois-xavier.bonnet at centraliens.net> \n \n * [HTTPCLIENT-1277] Caching client sends a 304 to an unconditional request. ",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/2aa1fc14004a1669d00d4d50aebb1ecabe5b3fa3/RELEASE_NOTES.txt",
                "sha": "3b586fad7b03d69224eed521c51189c217cab724",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/2aa1fc14004a1669d00d4d50aebb1ecabe5b3fa3/httpclient/src/main/java/org/apache/http/impl/client/DefaultRequestDirector.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/main/java/org/apache/http/impl/client/DefaultRequestDirector.java?ref=2aa1fc14004a1669d00d4d50aebb1ecabe5b3fa3",
                "deletions": 0,
                "filename": "httpclient/src/main/java/org/apache/http/impl/client/DefaultRequestDirector.java",
                "patch": "@@ -1075,6 +1075,10 @@ protected RoutedRequest handleResponse(RoutedRequest roureq,\n             HttpHost proxy = route.getProxyHost();\n             if (this.authenticator.isAuthenticationRequested(proxy, response,\n                     this.proxyAuthStrategy, this.proxyAuthState, context)) {\n+                // if proxy is not set use target host instead\n+                if (proxy == null) {\n+                    proxy = route.getTargetHost();\n+                }\n                 if (this.authenticator.authenticate(proxy, response,\n                         this.proxyAuthStrategy, this.proxyAuthState, context)) {\n                     // Re-try the same request via the same route",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/2aa1fc14004a1669d00d4d50aebb1ecabe5b3fa3/httpclient/src/main/java/org/apache/http/impl/client/DefaultRequestDirector.java",
                "sha": "ddd9ab39ff58fdf0e2f9e9b576434b0de42e59ea",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/2aa1fc14004a1669d00d4d50aebb1ecabe5b3fa3/httpclient/src/main/java/org/apache/http/impl/client/execchain/MainClientExec.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/main/java/org/apache/http/impl/client/execchain/MainClientExec.java?ref=2aa1fc14004a1669d00d4d50aebb1ecabe5b3fa3",
                "deletions": 0,
                "filename": "httpclient/src/main/java/org/apache/http/impl/client/execchain/MainClientExec.java",
                "patch": "@@ -567,6 +567,10 @@ private boolean needAuthentication(\n             HttpHost proxy = route.getProxyHost();\n             if (this.authenticator.isAuthenticationRequested(proxy, response,\n                     this.proxyAuthStrategy, proxyAuthState, context)) {\n+                // if proxy is not set use target host instead\n+                if (proxy == null) {\n+                    proxy = route.getTargetHost();\n+                }\n                 return this.authenticator.handleAuthChallenge(proxy, response,\n                         this.proxyAuthStrategy, proxyAuthState, context);\n             }",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/2aa1fc14004a1669d00d4d50aebb1ecabe5b3fa3/httpclient/src/main/java/org/apache/http/impl/client/execchain/MainClientExec.java",
                "sha": "924b3880c38b0940737bec6b4eb89b1fd5630086",
                "status": "modified"
            },
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/2aa1fc14004a1669d00d4d50aebb1ecabe5b3fa3/httpclient/src/test/java/org/apache/http/impl/client/integration/TestClientAuthentication.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/test/java/org/apache/http/impl/client/integration/TestClientAuthentication.java?ref=2aa1fc14004a1669d00d4d50aebb1ecabe5b3fa3",
                "deletions": 0,
                "filename": "httpclient/src/test/java/org/apache/http/impl/client/integration/TestClientAuthentication.java",
                "patch": "@@ -513,4 +513,38 @@ public void testPreemptiveAuthenticationFailure() throws Exception {\n         Assert.assertEquals(1, requestHandler.getCount());\n     }\n \n+    static class ProxyAuthHandler implements HttpRequestHandler {\n+\n+        public void handle(\n+                final HttpRequest request,\n+                final HttpResponse response,\n+                final HttpContext context) throws HttpException, IOException {\n+            String creds = (String) context.getAttribute(\"creds\");\n+            if (creds == null || !creds.equals(\"test:test\")) {\n+                response.setStatusCode(HttpStatus.SC_PROXY_AUTHENTICATION_REQUIRED);\n+            } else {\n+                response.setStatusCode(HttpStatus.SC_OK);\n+                StringEntity entity = new StringEntity(\"success\", Consts.ASCII);\n+                response.setEntity(entity);\n+            }\n+        }\n+\n+    }\n+\n+    @Test\n+    public void testAuthenticationTargetAsProxy() throws Exception {\n+        this.localServer.register(\"*\", new ProxyAuthHandler());\n+\n+        TestCredentialsProvider credsProvider = new TestCredentialsProvider(null);\n+        this.httpclient = HttpClients.custom().setCredentialsProvider(credsProvider).build();\n+\n+        HttpGet httpget = new HttpGet(\"/\");\n+\n+        HttpResponse response = this.httpclient.execute(getServerHttp(), httpget);\n+        HttpEntity entity = response.getEntity();\n+        Assert.assertEquals(HttpStatus.SC_PROXY_AUTHENTICATION_REQUIRED,\n+                response.getStatusLine().getStatusCode());\n+        EntityUtils.consume(entity);\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/2aa1fc14004a1669d00d4d50aebb1ecabe5b3fa3/httpclient/src/test/java/org/apache/http/impl/client/integration/TestClientAuthentication.java",
                "sha": "7d884bcdc7510a7707d8be02f2ffcf4d6945aa6d",
                "status": "modified"
            }
        ],
        "message": "HTTPCLIENT-1279: Target host responding with status 407 (proxy authentication required) causes an NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1423172 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/12d11324c0c45725e5c7ed4ec068983b1115f956",
        "patched_files": [
            "MainClientExec.java",
            "ClientAuthentication.java",
            "DefaultRequestDirector.java",
            "RELEASE_NOTES.txt"
        ],
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestClientAuthentication.java"
        ]
    },
    "httpcomponents-client_3220bbf": {
        "bug_id": "httpcomponents-client_3220bbf",
        "commit": "https://github.com/apache/httpcomponents-client/commit/3220bbf633e74e05d32a62005d1c9251974b88d1",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/3220bbf633e74e05d32a62005d1c9251974b88d1/httpclient/src/main/java-deprecated/org/apache/http/impl/client/DefaultRequestDirector.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/main/java-deprecated/org/apache/http/impl/client/DefaultRequestDirector.java?ref=3220bbf633e74e05d32a62005d1c9251974b88d1",
                "deletions": 0,
                "filename": "httpclient/src/main/java-deprecated/org/apache/http/impl/client/DefaultRequestDirector.java",
                "patch": "@@ -867,6 +867,7 @@ protected boolean createTunnelToTarget(final HttpRoute route,\n \n             // Populate the execution context\n             context.setAttribute(ExecutionContext.HTTP_TARGET_HOST, target);\n+            context.setAttribute(ClientContext.ROUTE, route);\n             context.setAttribute(ExecutionContext.HTTP_PROXY_HOST, proxy);\n             context.setAttribute(ExecutionContext.HTTP_CONNECTION, managedConn);\n             context.setAttribute(ExecutionContext.HTTP_REQUEST, connect);",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/3220bbf633e74e05d32a62005d1c9251974b88d1/httpclient/src/main/java-deprecated/org/apache/http/impl/client/DefaultRequestDirector.java",
                "sha": "eaf784b4f04bf9a2c3e3e411745bf848fc09bc75",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/3220bbf633e74e05d32a62005d1c9251974b88d1/httpclient/src/main/java/org/apache/http/client/protocol/RequestAuthCache.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/main/java/org/apache/http/client/protocol/RequestAuthCache.java?ref=3220bbf633e74e05d32a62005d1c9251974b88d1",
                "deletions": 0,
                "filename": "httpclient/src/main/java/org/apache/http/client/protocol/RequestAuthCache.java",
                "patch": "@@ -84,7 +84,17 @@ public void process(final HttpRequest request, final HttpContext context)\n         }\n \n         final RouteInfo route = clientContext.getHttpRoute();\n+        if (route == null) {\n+            this.log.debug(\"Route info not set in the context\");\n+            return;\n+        }\n+\n         HttpHost target = clientContext.getTargetHost();\n+        if (target == null) {\n+            this.log.debug(\"Target host not set in the context\");\n+            return;\n+        }\n+\n         if (target.getPort() < 0) {\n             target = new HttpHost(\n                     target.getHostName(),",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/3220bbf633e74e05d32a62005d1c9251974b88d1/httpclient/src/main/java/org/apache/http/client/protocol/RequestAuthCache.java",
                "sha": "fa6a362998e8a99f72ea6a019cb532861c4db699",
                "status": "modified"
            }
        ],
        "message": "HTTPCLIENT-1479: fixed NPE in RequestAuthCache caused by incorrect context initialization\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1575902 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/57c6856702348677f7331d7f5512fb04b118faa7",
        "patched_files": [
            "RequestAuthCache.java"
        ],
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestRequestAuthCache.java"
        ]
    },
    "httpcomponents-client_3956b9f": {
        "bug_id": "httpcomponents-client_3956b9f",
        "commit": "https://github.com/apache/httpcomponents-client/commit/3956b9f30fad4dced92ec5c68c7f14a4fd4d5d46",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/3956b9f30fad4dced92ec5c68c7f14a4fd4d5d46/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachingExec.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachingExec.java?ref=3956b9f30fad4dced92ec5c68c7f14a4fd4d5d46",
                "deletions": 1,
                "filename": "httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachingExec.java",
                "patch": "@@ -139,7 +139,7 @@ public CachingExec(\n         this.requestCompliance = new RequestProtocolCompliance();\n         this.responseCachingPolicy = new ResponseCachingPolicy(\n                 this.cacheConfig.getMaxObjectSize(), this.cacheConfig.isSharedCache(),\n-                this.cacheConfig.isNeverCacheHTTP10ResponsesWithQuery(), config.is303CachingEnabled());\n+                this.cacheConfig.isNeverCacheHTTP10ResponsesWithQuery(), this.cacheConfig.is303CachingEnabled());\n         this.asynchRevalidator = asynchRevalidator;\n     }\n ",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/3956b9f30fad4dced92ec5c68c7f14a4fd4d5d46/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachingExec.java",
                "sha": "72b837612f5a89101bb37f34a2ac9205648c40d9",
                "status": "modified"
            }
        ],
        "message": "Wrong field used; config parameter can be null which would cause NPE here\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1493755 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/0533ce7c5315ae9a899664cc2066b788172b7417",
        "patched_files": [
            "CachingExec.java"
        ],
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestCachingExec.java"
        ]
    },
    "httpcomponents-client_4f03bed": {
        "bug_id": "httpcomponents-client_4f03bed",
        "commit": "https://github.com/apache/httpcomponents-client/commit/4f03bedbf81d4a94d31542464598138243e255f8",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/4f03bedbf81d4a94d31542464598138243e255f8/RELEASE_NOTES.txt",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/RELEASE_NOTES.txt?ref=4f03bedbf81d4a94d31542464598138243e255f8",
                "deletions": 1,
                "filename": "RELEASE_NOTES.txt",
                "patch": "@@ -1,6 +1,10 @@\n-Changes sicne 4.3.1\n+Changes since 4.3.1\n -------------------\n \n+* [HTTPCLIENT-1417] Fixed NPE in BrowserCompatSpec#formatCookies caused by version 1\n+  cookies with null cookie value.\n+  Contributed by Oleg Kalnichevski <olegk at apache.org>\n+\n * [HTTPCLIENT-1416] Fixed NPE in CachingHttpClientBuilder#build().\n   Contributed by Oleg Kalnichevski <olegk at apache.org>\n ",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/4f03bedbf81d4a94d31542464598138243e255f8/RELEASE_NOTES.txt",
                "sha": "ad9b5ee8fb1c20056311ca09410599b01adbd962",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/4f03bedbf81d4a94d31542464598138243e255f8/httpclient/src/main/java/org/apache/http/impl/cookie/BrowserCompatSpec.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/main/java/org/apache/http/impl/cookie/BrowserCompatSpec.java?ref=4f03bedbf81d4a94d31542464598138243e255f8",
                "deletions": 2,
                "filename": "httpclient/src/main/java/org/apache/http/impl/cookie/BrowserCompatSpec.java",
                "patch": "@@ -168,6 +168,10 @@ public BrowserCompatSpec() {\n         return parse(helems, origin);\n     }\n \n+    private static boolean isQuoteEnclosed(final String s) {\n+        return s != null && s.startsWith(\"\\\"\") && s.endsWith(\"\\\"\");\n+    }\n+\n     public List<Header> formatCookies(final List<Cookie> cookies) {\n         Args.notEmpty(cookies, \"List of cookies\");\n         final CharArrayBuffer buffer = new CharArrayBuffer(20 * cookies.size());\n@@ -180,8 +184,7 @@ public BrowserCompatSpec() {\n             }\n             final String cookieName = cookie.getName();\n             final String cookieValue = cookie.getValue();\n-            if (cookie.getVersion() > 0 &&\n-                    !(cookieValue.startsWith(\"\\\"\") && cookieValue.endsWith(\"\\\"\"))) {\n+            if (cookie.getVersion() > 0 && !isQuoteEnclosed(cookieValue)) {\n                 BasicHeaderValueFormatter.INSTANCE.formatHeaderElement(\n                         buffer,\n                         new BasicHeaderElement(cookieName, cookieValue),",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/4f03bedbf81d4a94d31542464598138243e255f8/httpclient/src/main/java/org/apache/http/impl/cookie/BrowserCompatSpec.java",
                "sha": "ce5e2830d0fd48f61d3550384716da3a3bb3918d",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/4f03bedbf81d4a94d31542464598138243e255f8/httpclient/src/test/java/org/apache/http/impl/cookie/TestBrowserCompatSpec.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/test/java/org/apache/http/impl/cookie/TestBrowserCompatSpec.java?ref=4f03bedbf81d4a94d31542464598138243e255f8",
                "deletions": 0,
                "filename": "httpclient/src/test/java/org/apache/http/impl/cookie/TestBrowserCompatSpec.java",
                "patch": "@@ -922,6 +922,24 @@ public void testNullCookieValueFormatting() {\n         Assert.assertEquals(\"name=\", headers.get(0).getValue());\n     }\n \n+    @Test\n+    public void testNullCookieValueFormattingCookieVersion1() {\n+        final BasicClientCookie cookie = new BasicClientCookie(\"name\", null);\n+        cookie.setVersion(1);\n+        cookie.setDomain(\".whatever.com\");\n+        cookie.setAttribute(ClientCookie.DOMAIN_ATTR, cookie.getDomain());\n+        cookie.setPath(\"/\");\n+        cookie.setAttribute(ClientCookie.PATH_ATTR, cookie.getPath());\n+\n+        final CookieSpec cookiespec = new BrowserCompatSpec();\n+        final List<Cookie> cookies = new ArrayList<Cookie>(1);\n+        cookies.add(cookie);\n+        final List<Header> headers = cookiespec.formatCookies(cookies);\n+        Assert.assertNotNull(headers);\n+        Assert.assertEquals(1, headers.size());\n+        Assert.assertEquals(\"name\", headers.get(0).getValue());\n+    }\n+\n     /**\n      * Tests generic cookie formatting.\n      */",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/4f03bedbf81d4a94d31542464598138243e255f8/httpclient/src/test/java/org/apache/http/impl/cookie/TestBrowserCompatSpec.java",
                "sha": "3cb0c92af1210a8dd6e3877ab45b9342b6367fc2",
                "status": "modified"
            }
        ],
        "message": "HTTPCLIENT-1417: Fixed NPE in BrowserCompatSpec#formatCookies caused by version 1 cookies with null cookie value\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1530218 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/df36e1087cb3673ff7aac01fe7ff08f91e43422c",
        "patched_files": [
            "BrowserCompatSpec.java",
            "RELEASE_NOTES.txt"
        ],
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestBrowserCompatSpec.java"
        ]
    },
    "httpcomponents-client_52ddef9": {
        "bug_id": "httpcomponents-client_52ddef9",
        "commit": "https://github.com/apache/httpcomponents-client/commit/52ddef91faef5529bbb4d3d358dfbf5f2a10c56e",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/52ddef91faef5529bbb4d3d358dfbf5f2a10c56e/RELEASE_NOTES.txt",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/RELEASE_NOTES.txt?ref=52ddef91faef5529bbb4d3d358dfbf5f2a10c56e",
                "deletions": 0,
                "filename": "RELEASE_NOTES.txt",
                "patch": "@@ -1,6 +1,9 @@\n Changes since release 4.3 BETA2\n -------------------\n \n+* [HTTPCLIENT-1365] NPE when ManagedHttpClientConnectionFactory.create(ConnectionConfig) is called with null.\n+  Contributed by Gary Gregory <ggregory at apache.org>\n+\n * [HTTPCLIENT-1362] Better error messages for connect timed out and connection refused \n   exceptions.\n   Contributed by Oleg Kalnichevski <olegk at apache.org>",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/52ddef91faef5529bbb4d3d358dfbf5f2a10c56e/RELEASE_NOTES.txt",
                "sha": "6a10ed5c61fd879cf02948647a0ebd8a7f1c2576",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/52ddef91faef5529bbb4d3d358dfbf5f2a10c56e/httpclient/src/main/java/org/apache/http/impl/conn/ManagedHttpClientConnectionFactory.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/main/java/org/apache/http/impl/conn/ManagedHttpClientConnectionFactory.java?ref=52ddef91faef5529bbb4d3d358dfbf5f2a10c56e",
                "deletions": 2,
                "filename": "httpclient/src/main/java/org/apache/http/impl/conn/ManagedHttpClientConnectionFactory.java",
                "patch": "@@ -104,8 +104,8 @@ public ManagedHttpClientConnection create(final ConnectionConfig config) {\n                 log,\n                 headerlog,\n                 wirelog,\n-                config.getBufferSize(),\n-                config.getFragmentSizeHint(),\n+                cconfig.getBufferSize(),\n+                cconfig.getFragmentSizeHint(),\n                 chardecoder,\n                 charencoder,\n                 cconfig.getMessageConstraints(),",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/52ddef91faef5529bbb4d3d358dfbf5f2a10c56e/httpclient/src/main/java/org/apache/http/impl/conn/ManagedHttpClientConnectionFactory.java",
                "sha": "332449fbb38657b8dd848d08764a26ce800d510b",
                "status": "modified"
            },
            {
                "additions": 52,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/52ddef91faef5529bbb4d3d358dfbf5f2a10c56e/httpclient/src/test/java/org/apache/http/impl/conn/TestManagedHttpClientConnectionFactory.java",
                "changes": 52,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/test/java/org/apache/http/impl/conn/TestManagedHttpClientConnectionFactory.java?ref=52ddef91faef5529bbb4d3d358dfbf5f2a10c56e",
                "deletions": 0,
                "filename": "httpclient/src/test/java/org/apache/http/impl/conn/TestManagedHttpClientConnectionFactory.java",
                "patch": "@@ -0,0 +1,52 @@\n+/*\n+ * ====================================================================\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.http.impl.conn;\n+\n+import junit.framework.Assert;\n+\n+import org.apache.http.config.ConnectionConfig;\n+import org.apache.http.conn.ManagedHttpClientConnection;\n+import org.junit.Test;\n+\n+public class TestManagedHttpClientConnectionFactory {\n+\n+    @Test\n+    public void testDefaultConnectionConfig() throws Exception {\n+        validateDefault(ManagedHttpClientConnectionFactory.INSTANCE.create(ConnectionConfig.DEFAULT));\n+    }\n+\n+    private void validateDefault(ManagedHttpClientConnection managedHttpClientConnection) {\n+        // Nothing really interesting to check here\n+        Assert.assertNotNull(managedHttpClientConnection.getId());\n+    }\n+\n+    @Test\n+    public void testNullConnectionConfig() throws Exception {\n+        // Should not NPE\n+        validateDefault(ManagedHttpClientConnectionFactory.INSTANCE.create(null));\n+    }\n+}",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/52ddef91faef5529bbb4d3d358dfbf5f2a10c56e/httpclient/src/test/java/org/apache/http/impl/conn/TestManagedHttpClientConnectionFactory.java",
                "sha": "f09c5bbe9e90d4e35de81d19b939189df78dc1ca",
                "status": "added"
            }
        ],
        "message": "[HTTPCLIENT-1365] NPE when ManagedHttpClientConnectionFactory.create(ConnectionConfig) is called with null. Contributed by Gary Gregory <ggregory at apache.org>\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1490299 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/531ac65cc9f22873a0954e52520c532516267999",
        "patched_files": [
            "RELEASE_NOTES.txt",
            "ManagedHttpClientConnectionFactory.java"
        ],
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestManagedHttpClientConnectionFactory.java"
        ]
    },
    "httpcomponents-client_67a1cc7": {
        "bug_id": "httpcomponents-client_67a1cc7",
        "commit": "https://github.com/apache/httpcomponents-client/commit/67a1cc719969e0f4604cb3a34cb2ba42e1c4caa1",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/67a1cc719969e0f4604cb3a34cb2ba42e1c4caa1/RELEASE_NOTES.txt",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/RELEASE_NOTES.txt?ref=67a1cc719969e0f4604cb3a34cb2ba42e1c4caa1",
                "deletions": 0,
                "filename": "RELEASE_NOTES.txt",
                "patch": "@@ -4,6 +4,8 @@ Changes for 4.4-alpha1\n Changelog:\n -------------------\n \n+* [HTTPCLIENT-1470] CachingExec(ClientExecChain, HttpCache, CacheConfig, AsynchronousValidator) throws NPE if config is null\n+\n * [HTTPCLIENT-1466] FileBodyPart#generateContentType() ignores custom ContentType values.\n   Contributed by Oleg Kalnichevski <olegk at apache.org>\n ",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/67a1cc719969e0f4604cb3a34cb2ba42e1c4caa1/RELEASE_NOTES.txt",
                "sha": "607fc3e86259bb3b7d26aa8a5ec3c515488bea5c",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/67a1cc719969e0f4604cb3a34cb2ba42e1c4caa1/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachingExec.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachingExec.java?ref=67a1cc719969e0f4604cb3a34cb2ba42e1c4caa1",
                "deletions": 2,
                "filename": "httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachingExec.java",
                "patch": "@@ -136,10 +136,10 @@ public CachingExec(\n         this.validityPolicy = new CacheValidityPolicy();\n         this.responseGenerator = new CachedHttpResponseGenerator(this.validityPolicy);\n         this.cacheableRequestPolicy = new CacheableRequestPolicy();\n-        this.suitabilityChecker = new CachedResponseSuitabilityChecker(this.validityPolicy, config);\n+        this.suitabilityChecker = new CachedResponseSuitabilityChecker(this.validityPolicy, this.cacheConfig);\n         this.conditionalRequestBuilder = new ConditionalRequestBuilder();\n         this.responseCompliance = new ResponseProtocolCompliance();\n-        this.requestCompliance = new RequestProtocolCompliance(config.isWeakETagOnPutDeleteAllowed());\n+        this.requestCompliance = new RequestProtocolCompliance(this.cacheConfig.isWeakETagOnPutDeleteAllowed());\n         this.responseCachingPolicy = new ResponseCachingPolicy(\n                 this.cacheConfig.getMaxObjectSize(), this.cacheConfig.isSharedCache(),\n                 this.cacheConfig.isNeverCacheHTTP10ResponsesWithQuery(), this.cacheConfig.is303CachingEnabled());",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/67a1cc719969e0f4604cb3a34cb2ba42e1c4caa1/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachingExec.java",
                "sha": "cc267cf73fa0f0f28a30858af7180b59150d2580",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/67a1cc719969e0f4604cb3a34cb2ba42e1c4caa1/httpclient-cache/src/test/java/org/apache/http/impl/client/cache/TestRFC5861Compliance.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient-cache/src/test/java/org/apache/http/impl/client/cache/TestRFC5861Compliance.java?ref=67a1cc719969e0f4604cb3a34cb2ba42e1c4caa1",
                "deletions": 0,
                "filename": "httpclient-cache/src/test/java/org/apache/http/impl/client/cache/TestRFC5861Compliance.java",
                "patch": "@@ -366,6 +366,11 @@ public void testStaleWhileRevalidateReturnsStaleEntryWithWarning()\n         assertTrue(warning110Found);\n     }\n \n+    @Test\n+    public void testHTTPCLIENT1470() {\n+        impl = new CachingExec(mockBackend, cache, null, new AsynchronousValidator(config));\n+    }\n+\n     @Test\n     public void testStaleWhileRevalidateReturnsStaleNonRevalidatableEntryWithWarning()\n         throws Exception {",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/67a1cc719969e0f4604cb3a34cb2ba42e1c4caa1/httpclient-cache/src/test/java/org/apache/http/impl/client/cache/TestRFC5861Compliance.java",
                "sha": "aacd68c035cacdceee9364d0edfd6c4c77b1e749",
                "status": "modified"
            }
        ],
        "message": "HTTPCLIENT-1470 CachingExec(ClientExecChain, HttpCache, CacheConfig, AsynchronousValidator) throws NPE if config is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1570963 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/50b27ac7908615d8e5cf9e13b9a9a7b67cb4c1af",
        "patched_files": [
            "CachingExec.java",
            "RELEASE_NOTES.txt"
        ],
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestRFC5861Compliance.java",
            "TestCachingExec.java"
        ]
    },
    "httpcomponents-client_6921a32": {
        "bug_id": "httpcomponents-client_6921a32",
        "commit": "https://github.com/apache/httpcomponents-client/commit/6921a32fa66bea61206ff7b5e7d6872639f7d7ad",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/6921a32fa66bea61206ff7b5e7d6872639f7d7ad/httpclient-benchmark/src/main/java/org/apache/http/client/benchmark/TestHttpCore.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient-benchmark/src/main/java/org/apache/http/client/benchmark/TestHttpCore.java?ref=6921a32fa66bea61206ff7b5e7d6872639f7d7ad",
                "deletions": 9,
                "filename": "httpclient-benchmark/src/main/java/org/apache/http/client/benchmark/TestHttpCore.java",
                "patch": "@@ -180,18 +180,18 @@ public void run() {\n                         httpexecutor.postProcess(response, httpproc, context);\n \n                         HttpEntity entity = response.getEntity();\n-                        if (entity != null) {\n+                        if (entity != null) { // TODO can this be null?\n                             InputStream instream = entity.getContent();\n-                            try {\n+                            if (instream != null) {\n                                 contentLen = 0;\n-                                if (instream != null) {\n-                                    int l = 0;\n-                                    while ((l = instream.read(buffer)) != -1) {\n-                                        contentLen += l;\n-                                    }\n+                                try {\n+                                        int l = 0;\n+                                        while ((l = instream.read(buffer)) != -1) {\n+                                            contentLen += l;\n+                                        }\n+                                } finally {\n+                                    instream.close();\n                                 }\n-                            } finally {\n-                                instream.close();\n                             }\n                         }\n                         if (connStrategy.keepAlive(response, context)) {",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/6921a32fa66bea61206ff7b5e7d6872639f7d7ad/httpclient-benchmark/src/main/java/org/apache/http/client/benchmark/TestHttpCore.java",
                "sha": "4d07b0050fc91e9201b9432bf03a3728abf12c3c",
                "status": "modified"
            }
        ],
        "message": "Not sure that instream can be null, but assuming it can, there's no point entering the try block if it's null. This avoids NPE warning\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1206731 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/d7ce4582e2d35b7cef81c75864dcde693349be0b",
        "patched_files": [],
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestHttpCore.java"
        ]
    },
    "httpcomponents-client_8f91869": {
        "bug_id": "httpcomponents-client_8f91869",
        "commit": "https://github.com/apache/httpcomponents-client/commit/8f91869343991dd47add61bcdaf6beb234750d2b",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/8f91869343991dd47add61bcdaf6beb234750d2b/httpclient-benchmark/src/main/java/org/apache/http/client/benchmark/TestHttpClient4.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient-benchmark/src/main/java/org/apache/http/client/benchmark/TestHttpClient4.java?ref=8f91869343991dd47add61bcdaf6beb234750d2b",
                "deletions": 5,
                "filename": "httpclient-benchmark/src/main/java/org/apache/http/client/benchmark/TestHttpClient4.java",
                "patch": "@@ -139,16 +139,16 @@ public void run() {\n                     HttpEntity entity = response.getEntity();\n                     if (entity != null) {\n                         InputStream instream = entity.getContent();\n-                        try {\n-                            contentLen = 0;\n-                            if (instream != null) {\n+                        contentLen = 0;\n+                        if (instream != null) {\n+                            try {\n                                 int l = 0;\n                                 while ((l = instream.read(buffer)) != -1) {\n                                     contentLen += l;\n                                 }\n+                            } finally {\n+                                instream.close();\n                             }\n-                        } finally {\n-                            instream.close();\n                         }\n                     }\n                     if (response.getStatusLine().getStatusCode() == 200) {",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/8f91869343991dd47add61bcdaf6beb234750d2b/httpclient-benchmark/src/main/java/org/apache/http/client/benchmark/TestHttpClient4.java",
                "sha": "505e2455d792c09c7aa70a60b19832080f5870a2",
                "status": "modified"
            }
        ],
        "message": "Not sure that instream can be null, but assuming it can, there's no point entering the try block if it's null. This avoids NPE warning\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1206734 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/6921a32fa66bea61206ff7b5e7d6872639f7d7ad",
        "patched_files": [],
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestHttpClient4.java"
        ]
    },
    "httpcomponents-client_955f47e": {
        "bug_id": "httpcomponents-client_955f47e",
        "commit": "https://github.com/apache/httpcomponents-client/commit/955f47e6f592a97735ac80ff4fd265a9ba041430",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/955f47e6f592a97735ac80ff4fd265a9ba041430/httpclient/src/main/java/org/apache/http/conn/ssl/SSLSocketFactory.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/main/java/org/apache/http/conn/ssl/SSLSocketFactory.java?ref=955f47e6f592a97735ac80ff4fd265a9ba041430",
                "deletions": 1,
                "filename": "httpclient/src/main/java/org/apache/http/conn/ssl/SSLSocketFactory.java",
                "patch": "@@ -364,7 +364,7 @@ public Socket connectSocket(\n         }\n         SSLSocket sslsock = (SSLSocket) (sock != null ? sock : createSocket());\n         if (localAddress != null) {\n-            sock.setReuseAddress(HttpConnectionParams.getSoReuseaddr(params));\n+            sslsock.setReuseAddress(HttpConnectionParams.getSoReuseaddr(params));\n             sslsock.bind(localAddress);\n         }\n ",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/955f47e6f592a97735ac80ff4fd265a9ba041430/httpclient/src/main/java/org/apache/http/conn/ssl/SSLSocketFactory.java",
                "sha": "9c77b90ca7d0c7ec7723ddc38b92ccd05ec888e1",
                "status": "modified"
            }
        ],
        "message": "HTTPCLIENT-932 Fix possible NPE - use sslsock rather than sock\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@940069 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/1a26a94f9509d9044e2973c1779f10e7916e950f",
        "patched_files": [
            "SSLSocketFactory.java"
        ],
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestSSLSocketFactory.java"
        ]
    },
    "httpcomponents-client_9cc7c1a": {
        "bug_id": "httpcomponents-client_9cc7c1a",
        "commit": "https://github.com/apache/httpcomponents-client/commit/9cc7c1acecb5ce7af867718f0d1933b3bdf3c3f1",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/9cc7c1acecb5ce7af867718f0d1933b3bdf3c3f1/RELEASE_NOTES.txt",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/RELEASE_NOTES.txt?ref=9cc7c1acecb5ce7af867718f0d1933b3bdf3c3f1",
                "deletions": 0,
                "filename": "RELEASE_NOTES.txt",
                "patch": "@@ -1,6 +1,9 @@\n Changes since 4.3.1\n -------------------\n \n+* [HTTPCLIENT-1440] 'file' scheme in redirect location URI causes NPE.\n+  Contributed by James Leigh <james at 3roundstones dot com>\n+\n * [HTTPCLIENT-1437] Made Executor#execute thread safe.\n   Contributed by Oleg Kalnichevski <olegk at apache.org>\n ",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/9cc7c1acecb5ce7af867718f0d1933b3bdf3c3f1/RELEASE_NOTES.txt",
                "sha": "706677632793bf5a7b45c9a49f4e76d2f98a5bcb",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/9cc7c1acecb5ce7af867718f0d1933b3bdf3c3f1/httpclient/src/main/java/org/apache/http/client/utils/URIUtils.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/main/java/org/apache/http/client/utils/URIUtils.java?ref=9cc7c1acecb5ce7af867718f0d1933b3bdf3c3f1",
                "deletions": 1,
                "filename": "httpclient/src/main/java/org/apache/http/client/utils/URIUtils.java",
                "patch": "@@ -259,7 +259,8 @@ private static URI resolveReferenceStartingWithQueryString(\n      * @return the URI without dot segments\n      */\n     private static URI normalizeSyntax(final URI uri) {\n-        if (uri.isOpaque()) {\n+        if (uri.isOpaque() || uri.getAuthority() == null) {\n+            // opaque and file: URIs\n             return uri;\n         }\n         Args.check(uri.isAbsolute(), \"Base URI must be absolute\");",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/9cc7c1acecb5ce7af867718f0d1933b3bdf3c3f1/httpclient/src/main/java/org/apache/http/client/utils/URIUtils.java",
                "sha": "131f20d7af630579aa8b34cd041ca26578679f63",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/9cc7c1acecb5ce7af867718f0d1933b3bdf3c3f1/httpclient/src/test/java/org/apache/http/client/utils/TestURIUtils.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/test/java/org/apache/http/client/utils/TestURIUtils.java?ref=9cc7c1acecb5ce7af867718f0d1933b3bdf3c3f1",
                "deletions": 0,
                "filename": "httpclient/src/test/java/org/apache/http/client/utils/TestURIUtils.java",
                "patch": "@@ -173,6 +173,20 @@ public void testResolve() {\n                 \"http://s/mid/content=5/../6\").toString());\n     }\n \n+    @Test\n+    public void testResolveOpaque() {\n+        Assert.assertEquals(\"example://a/b/c/%7Bfoo%7D\", URIUtils.resolve(this.baseURI, \"eXAMPLE://a/./b/../b/%63/%7bfoo%7d\").toString());\n+        Assert.assertEquals(\"file://localhost/etc/fstab\", URIUtils.resolve(this.baseURI, \"file://localhost/etc/fstab\").toString());\n+        Assert.assertEquals(\"file:///etc/fstab\", URIUtils.resolve(this.baseURI, \"file:///etc/fstab\").toString());\n+        Assert.assertEquals(\"file://localhost/c:/WINDOWS/clock.avi\", URIUtils.resolve(this.baseURI, \"file://localhost/c:/WINDOWS/clock.avi\").toString());\n+        Assert.assertEquals(\"file:///c:/WINDOWS/clock.avi\", URIUtils.resolve(this.baseURI, \"file:///c:/WINDOWS/clock.avi\").toString());\n+        Assert.assertEquals(\"file://hostname/path/to/the%20file.txt\", URIUtils.resolve(this.baseURI, \"file://hostname/path/to/the%20file.txt\").toString());\n+        Assert.assertEquals(\"file:///c:/path/to/the%20file.txt\", URIUtils.resolve(this.baseURI, \"file:///c:/path/to/the%20file.txt\").toString());\n+        Assert.assertEquals(\"urn:issn:1535-3613\", URIUtils.resolve(this.baseURI, \"urn:issn:1535-3613\").toString());\n+        Assert.assertEquals(\"mailto:user@example.com\", URIUtils.resolve(this.baseURI, \"mailto:user@example.com\").toString());\n+        Assert.assertEquals(\"ftp://example.org/resource.txt\", URIUtils.resolve(this.baseURI, \"ftp://example.org/resource.txt\").toString());\n+    }\n+\n     @Test\n     public void testExtractHost() throws Exception {\n         Assert.assertEquals(new HttpHost(\"localhost\"),",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/9cc7c1acecb5ce7af867718f0d1933b3bdf3c3f1/httpclient/src/test/java/org/apache/http/client/utils/TestURIUtils.java",
                "sha": "6050061a6808c7a90fb8e7b409253a537c9d87a2",
                "status": "modified"
            }
        ],
        "message": "HTTPCLIENT-1440: 'file' scheme in redirect location URI causes NPE.\nContributed by James Leigh <james at 3roundstones dot com>\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1546315 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/037b915bd094e1c1c17b442cda92e822e90c0f59",
        "patched_files": [
            "RELEASE_NOTES.txt",
            "URIUtils.java"
        ],
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestURIUtils.java"
        ]
    },
    "httpcomponents-client_aaf723d": {
        "bug_id": "httpcomponents-client_aaf723d",
        "commit": "https://github.com/apache/httpcomponents-client/commit/aaf723d2bed524498cbbdffaf2180ae7ab75cfa1",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/aaf723d2bed524498cbbdffaf2180ae7ab75cfa1/httpclient-cache/src/main/java/org/apache/http/client/cache/impl/DefaultCacheEntrySerializer.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient-cache/src/main/java/org/apache/http/client/cache/impl/DefaultCacheEntrySerializer.java?ref=aaf723d2bed524498cbbdffaf2180ae7ab75cfa1",
                "deletions": 2,
                "filename": "httpclient-cache/src/main/java/org/apache/http/client/cache/impl/DefaultCacheEntrySerializer.java",
                "patch": "@@ -62,7 +62,9 @@ public void writeTo(CacheEntry cacheEntry, OutputStream os) throws IOException {\n             // oos.writeObject(sheaders);\n         } finally {\n             try {\n-                oos.close();\n+                if (oos != null) {\n+                    oos.close();\n+                }\n             } catch (Exception ignore) {\n             }\n             try {\n@@ -95,7 +97,9 @@ public CacheEntry readFrom(InputStream is) throws IOException {\n             throw new RuntimeException(cnfe);\n         } finally {\n             try {\n-                ois.close();\n+                if (ois != null) {\n+                    ois.close();\n+                }\n             } catch (Exception ignore) {\n             }\n             try {",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/aaf723d2bed524498cbbdffaf2180ae7ab75cfa1/httpclient-cache/src/main/java/org/apache/http/client/cache/impl/DefaultCacheEntrySerializer.java",
                "sha": "cb7f3d4550ce62633db4e81666b10ff5da3704bd",
                "status": "modified"
            }
        ],
        "message": "Avoid possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@939859 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/416085813efd1e764a2af8e880f7ef0f762e9d44",
        "patched_files": [
            "DefaultCacheEntrySerializer.java"
        ],
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestDefaultCacheEntrySerializer.java"
        ]
    },
    "httpcomponents-client_b40661e": {
        "bug_id": "httpcomponents-client_b40661e",
        "commit": "https://github.com/apache/httpcomponents-client/commit/b40661e45ec12fb1c7ef52b1891a9b677331f48d",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/b40661e45ec12fb1c7ef52b1891a9b677331f48d/httpclient/src/main/java/org/apache/http/client/utils/URIUtils.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/main/java/org/apache/http/client/utils/URIUtils.java?ref=b40661e45ec12fb1c7ef52b1891a9b677331f48d",
                "deletions": 1,
                "filename": "httpclient/src/main/java/org/apache/http/client/utils/URIUtils.java",
                "patch": "@@ -366,7 +366,7 @@ public static HttpHost extractHost(final URI uri) {\n                 }\n             }\n             final String scheme = uri.getScheme();\n-            if (host != null) {\n+            if (!TextUtils.isBlank(host)) {\n                 target = new HttpHost(host, port, scheme);\n             }\n         }",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/b40661e45ec12fb1c7ef52b1891a9b677331f48d/httpclient/src/main/java/org/apache/http/client/utils/URIUtils.java",
                "sha": "d485cfe1051ac45a48ca8ba4c19770a2f47b4351",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/b40661e45ec12fb1c7ef52b1891a9b677331f48d/httpclient/src/test/java/org/apache/http/client/utils/TestURIUtils.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/test/java/org/apache/http/client/utils/TestURIUtils.java?ref=b40661e45ec12fb1c7ef52b1891a9b677331f48d",
                "deletions": 0,
                "filename": "httpclient/src/test/java/org/apache/http/client/utils/TestURIUtils.java",
                "patch": "@@ -229,6 +229,8 @@ public void testExtractHost() throws Exception {\n                 URIUtils.extractHost(new URI(\"http://localhost:8080;sessionid=stuff/abcd\")));\n         Assert.assertEquals(new HttpHost(\"localhost\",-1),\n                 URIUtils.extractHost(new URI(\"http://localhost:;sessionid=stuff/abcd\")));\n+        Assert.assertEquals(null,\n+                URIUtils.extractHost(new URI(\"http://:80/robots.txt\")));\n     }\n \n     @Test",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/b40661e45ec12fb1c7ef52b1891a9b677331f48d/httpclient/src/test/java/org/apache/http/client/utils/TestURIUtils.java",
                "sha": "a0fb7eb6198423cd663019b3f7c5b31bf5a46db8",
                "status": "modified"
            }
        ],
        "message": "HTTPCLIENT-1498: empty host in redirect location causes NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1591221 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/92b5d6d09d9705bc69b6ccb77de9df7cf97fb6b7",
        "patched_files": [
            "URIUtils.java"
        ],
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestURIUtils.java"
        ]
    },
    "httpcomponents-client_bb15e4d": {
        "bug_id": "httpcomponents-client_bb15e4d",
        "commit": "https://github.com/apache/httpcomponents-client/commit/bb15e4d9b3f473d108249716f399ed4a96eab53f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/bb15e4d9b3f473d108249716f399ed4a96eab53f/httpclient/src/main/java/org/apache/http/conn/ssl/SSLSocketFactory.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/main/java/org/apache/http/conn/ssl/SSLSocketFactory.java?ref=bb15e4d9b3f473d108249716f399ed4a96eab53f",
                "deletions": 1,
                "filename": "httpclient/src/main/java/org/apache/http/conn/ssl/SSLSocketFactory.java",
                "patch": "@@ -321,7 +321,7 @@ public Socket connectSocket(\n             remoteAddress = new InetSocketAddress(host, port);            \n         }\n         try {\n-            sock.connect(remoteAddress, connTimeout);\n+            sslsock.connect(remoteAddress, connTimeout);\n         } catch (SocketTimeoutException ex) {\n             throw new ConnectTimeoutException(\"Connect to \" + remoteAddress + \" timed out\");\n         }",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/bb15e4d9b3f473d108249716f399ed4a96eab53f/httpclient/src/main/java/org/apache/http/conn/ssl/SSLSocketFactory.java",
                "sha": "04cc0671bba75572ddfce90a68e3161dcbd00734",
                "status": "modified"
            }
        ],
        "message": "HTTPCLIENT-833: fixed possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@754998 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/72eedbe0ea507e86af66f202e6ae300979781420",
        "patched_files": [
            "SSLSocketFactory.java"
        ],
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestSSLSocketFactory.java"
        ]
    },
    "httpcomponents-client_bb902af": {
        "bug_id": "httpcomponents-client_bb902af",
        "commit": "https://github.com/apache/httpcomponents-client/commit/bb902afa4fb4b6575e500c965c31cabf82791ec1",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/bb902afa4fb4b6575e500c965c31cabf82791ec1/httpclient/src/main/java/org/apache/http/impl/auth/NTLMEngineImpl.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/main/java/org/apache/http/impl/auth/NTLMEngineImpl.java?ref=bb902afa4fb4b6575e500c965c31cabf82791ec1",
                "deletions": 7,
                "filename": "httpclient/src/main/java/org/apache/http/impl/auth/NTLMEngineImpl.java",
                "patch": "@@ -624,7 +624,7 @@ public CipherGen(final String domain, final String user, final String password,\n             final MD4 md4 = new MD4();\n             md4.update(unicodePassword);\n             return md4.getOutput();\n-        } catch (java.io.UnsupportedEncodingException e) {\n+        } catch (UnsupportedEncodingException e) {\n             throw new NTLMEngineException(\"Unicode not supported: \" + e.getMessage(), e);\n         }\n     }\n@@ -641,9 +641,11 @@ public CipherGen(final String domain, final String user, final String password,\n             final HMACMD5 hmacMD5 = new HMACMD5(ntlmHash);\n             // Upper case username, upper case domain!\n             hmacMD5.update(user.toUpperCase(Locale.US).getBytes(\"UnicodeLittleUnmarked\"));\n-            hmacMD5.update(domain.toUpperCase(Locale.US).getBytes(\"UnicodeLittleUnmarked\"));\n+            if (domain != null) {\n+                hmacMD5.update(domain.toUpperCase(Locale.US).getBytes(\"UnicodeLittleUnmarked\"));\n+            }\n             return hmacMD5.getOutput();\n-        } catch (java.io.UnsupportedEncodingException e) {\n+        } catch (UnsupportedEncodingException e) {\n             throw new NTLMEngineException(\"Unicode not supported! \" + e.getMessage(), e);\n         }\n     }\n@@ -660,9 +662,11 @@ public CipherGen(final String domain, final String user, final String password,\n             final HMACMD5 hmacMD5 = new HMACMD5(ntlmHash);\n             // Upper case username, mixed case target!!\n             hmacMD5.update(user.toUpperCase(Locale.US).getBytes(\"UnicodeLittleUnmarked\"));\n-            hmacMD5.update(domain.getBytes(\"UnicodeLittleUnmarked\"));\n+            if (domain != null) {\n+                hmacMD5.update(domain.getBytes(\"UnicodeLittleUnmarked\"));\n+            }\n             return hmacMD5.getOutput();\n-        } catch (java.io.UnsupportedEncodingException e) {\n+        } catch (UnsupportedEncodingException e) {\n             throw new NTLMEngineException(\"Unicode not supported! \" + e.getMessage(), e);\n         }\n     }\n@@ -981,7 +985,7 @@ String getResponse() {\n                 hostBytes = unqualifiedHost != null? unqualifiedHost.getBytes(\"ASCII\") : null;\n                 domainBytes = unqualifiedDomain != null ? unqualifiedDomain\n                         .toUpperCase(Locale.US).getBytes(\"ASCII\") : null;\n-            } catch (java.io.UnsupportedEncodingException e) {\n+            } catch (UnsupportedEncodingException e) {\n                 throw new NTLMEngineException(\"Unicode unsupported: \" + e.getMessage(), e);\n             }\n         }\n@@ -1104,7 +1108,7 @@ String getResponse() {\n                 if (bytes.length != 0) {\n                     try {\n                         target = new String(bytes, \"UnicodeLittleUnmarked\");\n-                    } catch (java.io.UnsupportedEncodingException e) {\n+                    } catch (UnsupportedEncodingException e) {\n                         throw new NTLMEngineException(e.getMessage(), e);\n                     }\n                 }",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/bb902afa4fb4b6575e500c965c31cabf82791ec1/httpclient/src/main/java/org/apache/http/impl/auth/NTLMEngineImpl.java",
                "sha": "b2fb4c9572ddbd9aff54fa60748425310d38f600",
                "status": "modified"
            },
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/bb902afa4fb4b6575e500c965c31cabf82791ec1/httpclient/src/test/java/org/apache/http/impl/client/integration/TestClientAuthenticationFakeNTLM.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/test/java/org/apache/http/impl/client/integration/TestClientAuthenticationFakeNTLM.java?ref=bb902afa4fb4b6575e500c965c31cabf82791ec1",
                "deletions": 6,
                "filename": "httpclient/src/test/java/org/apache/http/impl/client/integration/TestClientAuthenticationFakeNTLM.java",
                "patch": "@@ -99,7 +99,13 @@ public void testNTLMAuthenticationFailure() throws Exception {\n                 response.getStatusLine().getStatusCode());\n     }\n \n-    static class NtlmType2ResponseHandler implements HttpRequestHandler {\n+    static class NtlmType2MessageResponseHandler implements HttpRequestHandler {\n+\n+        private final String authenticateHeaderValue;\n+\n+        public NtlmType2MessageResponseHandler(final String type2Message) {\n+            this.authenticateHeaderValue = \"NTLM \" + type2Message;\n+        }\n \n         public void handle(\n                 final HttpRequest request,\n@@ -113,16 +119,42 @@ public void handle(\n             if (!request.containsHeader(HttpHeaders.AUTHORIZATION)) {\n                 response.setHeader(HttpHeaders.WWW_AUTHENTICATE, \"NTLM\");\n             } else {\n-                response.setHeader(HttpHeaders.WWW_AUTHENTICATE, \"NTLM TlRMTVNTUAACAA\" +\n-                        \"AADAAMADgAAAAzwoICLgEjRWfCicKrw43DrwAAAAAAAAAAAAAAAAAAAAAGAHAX\" +\n-                        \"AAAAD1MAZQByAHYAZQByAA==\");\n+                response.setHeader(HttpHeaders.WWW_AUTHENTICATE, authenticateHeaderValue);\n             }\n         }\n     }\n \n     @Test\n-    public void testNTLMType2() throws Exception {\n-        this.localServer.register(\"*\", new NtlmType2ResponseHandler());\n+    public void testNTLMv1Type2Message() throws Exception {\n+        this.localServer.register(\"*\", new NtlmType2MessageResponseHandler(\"TlRMTVNTUAACAA\" +\n+                \"AADAAMADgAAAAzggLiASNFZ4mrze8AAAAAAAAAAAAAAAAAAAAABgBwFwAAAA9T\" +\n+                \"AGUAcgB2AGUAcgA=\"));\n+        this.localServer.start();\n+\n+        final BasicCredentialsProvider credsProvider = new BasicCredentialsProvider();\n+        credsProvider.setCredentials(AuthScope.ANY,\n+                new NTCredentials(\"test\", \"test\", null, null));\n+\n+        this.httpclient = HttpClients.custom()\n+                .setDefaultCredentialsProvider(credsProvider)\n+                .build();\n+\n+        final HttpContext context = HttpClientContext.create();\n+\n+        final HttpHost targethost = getServerHttp();\n+        final HttpGet httpget = new HttpGet(\"/\");\n+\n+        final HttpResponse response = this.httpclient.execute(targethost, httpget, context);\n+        EntityUtils.consume(response.getEntity());\n+        Assert.assertEquals(HttpStatus.SC_UNAUTHORIZED,\n+                response.getStatusLine().getStatusCode());\n+    }\n+\n+    @Test\n+    public void testNTLMv2Type2Message() throws Exception {\n+        this.localServer.register(\"*\", new NtlmType2MessageResponseHandler(\"TlRMTVNTUAACAA\" +\n+                \"AADAAMADgAAAAzgoriASNFZ4mrze8AAAAAAAAAACQAJABEAAAABgBwFwAAAA9T\" +\n+                \"AGUAcgB2AGUAcgACAAwARABvAG0AYQBpAG4AAQAMAFMAZQByAHYAZQByAAAAAAA=\"));\n         this.localServer.start();\n \n         final BasicCredentialsProvider credsProvider = new BasicCredentialsProvider();",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/bb902afa4fb4b6575e500c965c31cabf82791ec1/httpclient/src/test/java/org/apache/http/impl/client/integration/TestClientAuthenticationFakeNTLM.java",
                "sha": "684b39bdc69152cf5bbfa44794492fce58a6274b",
                "status": "modified"
            }
        ],
        "message": "Follow up to HTTPCLIENT-1381: fixes another NPE\nContributed by Ricardo Pereira <thc202 at gmail.com>\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1500401 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/f17ef0ad1159c60933ba41adb927839f238d8fc3",
        "patched_files": [
            "NTLMEngineImpl.java"
        ],
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestClientAuthenticationFakeNTLM.java",
            "TestNTLMEngineImpl.java"
        ]
    },
    "httpcomponents-client_df36e10": {
        "bug_id": "httpcomponents-client_df36e10",
        "commit": "https://github.com/apache/httpcomponents-client/commit/df36e1087cb3673ff7aac01fe7ff08f91e43422c",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/df36e1087cb3673ff7aac01fe7ff08f91e43422c/RELEASE_NOTES.txt",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/RELEASE_NOTES.txt?ref=df36e1087cb3673ff7aac01fe7ff08f91e43422c",
                "deletions": 0,
                "filename": "RELEASE_NOTES.txt",
                "patch": "@@ -1,3 +1,11 @@\n+Changes sicne 4.3.1\n+-------------------\n+\n+* [HTTPCLIENT-1416] Fixed NPE in CachingHttpClientBuilder#build().\n+  Contributed by Oleg Kalnichevski <olegk at apache.org>\n+\n+\n+\n Release 4.3.1\n -------------------\n ",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/df36e1087cb3673ff7aac01fe7ff08f91e43422c/RELEASE_NOTES.txt",
                "sha": "5b6bff59a9e8c7f3a825478b6220abf27d8dd21c",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/df36e1087cb3673ff7aac01fe7ff08f91e43422c/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachingHttpClientBuilder.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachingHttpClientBuilder.java?ref=df36e1087cb3673ff7aac01fe7ff08f91e43422c",
                "deletions": 2,
                "filename": "httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachingHttpClientBuilder.java",
                "patch": "@@ -107,9 +107,9 @@ protected ClientExecChain decorateMainExec(final ClientExecChain mainExec) {\n         HttpCacheStorage storage = this.storage;\n         if (storage == null) {\n             if (this.cacheDir == null) {\n-                storage = new BasicHttpCacheStorage(cacheConfig);\n+                storage = new BasicHttpCacheStorage(config);\n             } else {\n-                final ManagedHttpCacheStorage managedStorage = new ManagedHttpCacheStorage(cacheConfig);\n+                final ManagedHttpCacheStorage managedStorage = new ManagedHttpCacheStorage(config);\n                 addCloseable(managedStorage);\n                 storage = managedStorage;\n             }",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/df36e1087cb3673ff7aac01fe7ff08f91e43422c/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachingHttpClientBuilder.java",
                "sha": "04377dec3e6e9227d3036251ba2575adaa84277f",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/df36e1087cb3673ff7aac01fe7ff08f91e43422c/httpclient-cache/src/test/java/org/apache/http/impl/client/cache/TestCachingHttpClientBuilder.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient-cache/src/test/java/org/apache/http/impl/client/cache/TestCachingHttpClientBuilder.java?ref=df36e1087cb3673ff7aac01fe7ff08f91e43422c",
                "deletions": 0,
                "filename": "httpclient-cache/src/test/java/org/apache/http/impl/client/cache/TestCachingHttpClientBuilder.java",
                "patch": "@@ -40,4 +40,9 @@ public void testAsynchronousWorkersMax0() throws Exception {\n         CachingHttpClientBuilder.create().setCacheConfig(cacheConfig).build();\n     }\n \n+    @Test\n+    public void testNullCacheConfig() throws Exception {\n+        CachingHttpClientBuilder.create().setCacheConfig(null).build();\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/df36e1087cb3673ff7aac01fe7ff08f91e43422c/httpclient-cache/src/test/java/org/apache/http/impl/client/cache/TestCachingHttpClientBuilder.java",
                "sha": "c32b16f3bc5f473af9934daf97033850c1c4b7ea",
                "status": "modified"
            }
        ],
        "message": "HTTPCLIENT-1416: Fixed NPE in CachingHttpClientBuilder#build()\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1529812 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/b83c1b93589ec9b3ade0f7455d02a83ad51aeff1",
        "patched_files": [
            "CachingHttpClientBuilder.java",
            "RELEASE_NOTES.txt"
        ],
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestCachingHttpClientBuilder.java"
        ]
    },
    "httpcomponents-client_e8dbce5": {
        "bug_id": "httpcomponents-client_e8dbce5",
        "commit": "https://github.com/apache/httpcomponents-client/commit/e8dbce5f9be283e3f4b77a3a465e98850ef3ef91",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/e8dbce5f9be283e3f4b77a3a465e98850ef3ef91/httpclient/src/main/java/org/apache/http/client/protocol/ResponseProcessCookies.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/main/java/org/apache/http/client/protocol/ResponseProcessCookies.java?ref=e8dbce5f9be283e3f4b77a3a465e98850ef3ef91",
                "deletions": 3,
                "filename": "httpclient/src/main/java/org/apache/http/client/protocol/ResponseProcessCookies.java",
                "patch": "@@ -138,10 +138,12 @@ private static String formatCooke(final Cookie cookie) {\n         buf.append(cookie.getName());\n         buf.append(\"=\\\"\");\n         String v = cookie.getValue();\n-        if (v.length() > 100) {\n-            v = v.substring(0, 100) + \"...\";\n+        if (v != null) {\n+            if (v.length() > 100) {\n+                v = v.substring(0, 100) + \"...\";\n+            }\n+            buf.append(v);\n         }\n-        buf.append(v);\n         buf.append(\"\\\"\");\n         buf.append(\", version:\");\n         buf.append(Integer.toString(cookie.getVersion()));",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/e8dbce5f9be283e3f4b77a3a465e98850ef3ef91/httpclient/src/main/java/org/apache/http/client/protocol/ResponseProcessCookies.java",
                "sha": "5f3cfaba0bb66d355e402aaeb0be50ac890ae5b2",
                "status": "modified"
            }
        ],
        "message": "HTTPCLIENT-1544: Fixed NPE in ResponseProcessCookies when running with DEBUG priority\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1618328 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/683bb070fdbfecec4521fe7efac7a8d03a3cc309",
        "patched_files": [
            "ResponseProcessCookies.java"
        ],
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestResponseProcessCookies.java"
        ]
    }
}