{
    "activemq-artemis_0263d45": {
        "bug_id": "activemq-artemis_0263d45",
        "commit": "https://github.com/apache/activemq-artemis/commit/0263d45a3500d7ab8ba7f9920d83f46e081eeba4",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/0263d45a3500d7ab8ba7f9920d83f46e081eeba4/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/QueueImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/QueueImpl.java?ref=0263d45a3500d7ab8ba7f9920d83f46e081eeba4",
                "deletions": 1,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/QueueImpl.java",
                "patch": "@@ -895,7 +895,10 @@ public void addTail(final MessageReference ref, final boolean direct) {\n                // directDeliver flag to be re-computed resulting in direct delivery if the queue is empty\n                // We don't recompute it on every delivery since executing isEmpty is expensive for a ConcurrentQueue\n \n-               if (deliveriesInTransit.getCount() == 0 && getExecutor().isFlushed() && intermediateMessageReferences.isEmpty() && messageReferences.isEmpty() && !pageIterator.hasNext() && !pageSubscription.isPaging()) {\n+               if (deliveriesInTransit.getCount() == 0 && getExecutor().isFlushed() &&\n+                  intermediateMessageReferences.isEmpty() && messageReferences.isEmpty() &&\n+                  pageIterator != null && !pageIterator.hasNext() &&\n+                  pageSubscription != null && !pageSubscription.isPaging()) {\n                   // We must block on the executor to ensure any async deliveries have completed or we might get out of order\n                   // deliveries\n                   // Go into direct delivery mode",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/0263d45a3500d7ab8ba7f9920d83f46e081eeba4/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/QueueImpl.java",
                "sha": "faac337cce47531758f8d4c1cdc7e2045718fd64",
                "status": "modified"
            },
            {
                "additions": 62,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/0263d45a3500d7ab8ba7f9920d83f46e081eeba4/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/paging/GlobalPagingTest.java",
                "changes": 62,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/paging/GlobalPagingTest.java?ref=0263d45a3500d7ab8ba7f9920d83f46e081eeba4",
                "deletions": 0,
                "filename": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/paging/GlobalPagingTest.java",
                "patch": "@@ -19,8 +19,10 @@\n \n import java.nio.ByteBuffer;\n import java.util.Map;\n+import java.util.UUID;\n import java.util.concurrent.CountDownLatch;\n \n+import org.apache.activemq.artemis.api.config.ActiveMQDefaultConfiguration;\n import org.apache.activemq.artemis.api.core.ActiveMQAddressFullException;\n import org.apache.activemq.artemis.api.core.ActiveMQBuffer;\n import org.apache.activemq.artemis.api.core.ActiveMQException;\n@@ -33,11 +35,13 @@\n import org.apache.activemq.artemis.api.core.client.ClientSessionFactory;\n import org.apache.activemq.artemis.api.core.client.ServerLocator;\n import org.apache.activemq.artemis.api.core.management.ManagementHelper;\n+import org.apache.activemq.artemis.core.client.impl.ClientMessageImpl;\n import org.apache.activemq.artemis.core.config.Configuration;\n import org.apache.activemq.artemis.core.config.StoreConfiguration;\n import org.apache.activemq.artemis.core.paging.PagingManager;\n import org.apache.activemq.artemis.core.server.ActiveMQServer;\n import org.apache.activemq.artemis.core.server.ActiveMQServers;\n+import org.apache.activemq.artemis.core.server.MessageReference;\n import org.apache.activemq.artemis.core.server.Queue;\n import org.apache.activemq.artemis.core.server.impl.ActiveMQServerImpl;\n import org.apache.activemq.artemis.core.settings.impl.AddressFullMessagePolicy;\n@@ -287,4 +291,62 @@ public void testManagementAddressCannotPageOrChangeGlobalSize() throws Exception\n       }\n    }\n \n+   @Test\n+   public void testManagementMessageRequestCannotFailAfterFailedDirectDeliver() throws Exception {\n+      clearDataRecreateServerDirs();\n+\n+      Configuration config = createDefaultNettyConfig().setJournalSyncNonTransactional(false);\n+\n+      final ActiveMQServer server = createServer(true, config, PagingTest.PAGE_SIZE, -1);\n+\n+      try {\n+         final SimpleString managementAddress = server.getConfiguration().getManagementAddress();\n+         server.start();\n+         //need to use Netty in order to have direct delivery available\n+         final ServerLocator locator = createNettyNonHALocator()\n+            .setBlockOnNonDurableSend(true)\n+            .setBlockOnDurableSend(true)\n+            .setBlockOnAcknowledge(true);\n+\n+         try (ClientSessionFactory sf = createSessionFactory(locator);\n+\n+              ClientSession session = sf.createSession(false, true, true)) {\n+\n+            session.start();\n+\n+            if (server.locateQueue(managementAddress) == null) {\n+\n+               session.createQueue(managementAddress, managementAddress, null, true);\n+            }\n+\n+            final SimpleString address = SimpleString.toSimpleString(\"queue\");\n+\n+            if (server.locateQueue(address) == null) {\n+\n+               session.createQueue(address, address, null, true);\n+            }\n+\n+            try (ClientProducer requestProducer = session.createProducer(managementAddress)) {\n+               final SimpleString replyQueue = new SimpleString(managementAddress + \".\" + UUID.randomUUID().toString());\n+               session.createTemporaryQueue(replyQueue, ActiveMQDefaultConfiguration.getDefaultRoutingType(), replyQueue);\n+               try (ClientConsumer consumer = session.createConsumer(replyQueue)) {\n+                  final Queue queue = server.locateQueue(replyQueue);\n+                  final MessageReference reference = MessageReference.Factory.createReference(session.createMessage(false), queue);\n+                  //it will cause QueueImpl::directDeliver -> false\n+                  queue.addHead(reference, false);\n+                  Assert.assertSame(reference, queue.removeReferenceWithID(reference.getMessageID()));\n+                  ClientMessage message = session.createMessage(false);\n+                  message.putStringProperty(ClientMessageImpl.REPLYTO_HEADER_NAME, replyQueue);\n+                  ManagementHelper.putAttribute(message, \"queue.\" + address.toString(), \"messageCount\");\n+                  requestProducer.send(message);\n+                  Assert.assertNotNull(consumer.receive());\n+               }\n+            }\n+         }\n+\n+      } finally {\n+         server.stop(true);\n+      }\n+   }\n+\n }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/0263d45a3500d7ab8ba7f9920d83f46e081eeba4/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/paging/GlobalPagingTest.java",
                "sha": "10cf532e53a19ee8b8ec232eab949623ac7f94d8",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-2282 QueueImpl::addTail of a management message could throw NPE\n\nPerforming direct deliveries of management messages could enter\na code path on QueueImpl::addTail with a NULL pageIterator: performing\na null check will avoid it to throw NPE.",
        "parent": "https://github.com/apache/activemq-artemis/commit/022223d383192650e407c69c76c44ef26ea662d1",
        "patched_files": [
            "QueueImpl.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "GlobalPagingTest.java",
            "QueueImplTest.java"
        ]
    },
    "activemq-artemis_028529b": {
        "bug_id": "activemq-artemis_028529b",
        "commit": "https://github.com/apache/activemq-artemis/commit/028529b8a910af3d1d8c941c48184d1730ae4973",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/028529b8a910af3d1d8c941c48184d1730ae4973/artemis-protocols/artemis-proton-plug/src/test/java/org/proton/plug/test/minimalserver/MinimalServer.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-protocols/artemis-proton-plug/src/test/java/org/proton/plug/test/minimalserver/MinimalServer.java?ref=028529b8a910af3d1d8c941c48184d1730ae4973",
                "deletions": 2,
                "filename": "artemis-protocols/artemis-proton-plug/src/test/java/org/proton/plug/test/minimalserver/MinimalServer.java",
                "patch": "@@ -155,8 +155,15 @@ protected void decode(final ChannelHandlerContext ctx, ByteBuf byteIn, List<Obje\n \n    public synchronized void stop()\n    {\n-      serverChannelGroup.close().awaitUninterruptibly();\n-      ChannelGroupFuture future = channelGroup.close().awaitUninterruptibly();\n+      if (serverChannelGroup != null)\n+      {\n+         serverChannelGroup.close().awaitUninterruptibly();\n+      }\n+\n+      if (channelGroup != null)\n+      {\n+         ChannelGroupFuture future = channelGroup.close().awaitUninterruptibly();\n+      }\n    }\n \n ",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/028529b8a910af3d1d8c941c48184d1730ae4973/artemis-protocols/artemis-proton-plug/src/test/java/org/proton/plug/test/minimalserver/MinimalServer.java",
                "sha": "8351396b54b46e5c7702eb1b53232d115d0b7c5f",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/028529b8a910af3d1d8c941c48184d1730ae4973/artemis-server/src/main/java/org/apache/activemq/artemis/core/remoting/impl/netty/NettyAcceptor.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/remoting/impl/netty/NettyAcceptor.java?ref=028529b8a910af3d1d8c941c48184d1730ae4973",
                "deletions": 17,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/remoting/impl/netty/NettyAcceptor.java",
                "patch": "@@ -546,19 +546,26 @@ public synchronized void stop()\n \n \n       // serverChannelGroup has been unbound in pause()\n-      serverChannelGroup.close().awaitUninterruptibly();\n-      ChannelGroupFuture future = channelGroup.close().awaitUninterruptibly();\n+      if (serverChannelGroup != null)\n+      {\n+         serverChannelGroup.close().awaitUninterruptibly();\n+      }\n \n-      if (!future.isSuccess())\n+      if (channelGroup != null)\n       {\n-         ActiveMQServerLogger.LOGGER.nettyChannelGroupError();\n-         Iterator<Channel> iterator = future.group().iterator();\n-         while (iterator.hasNext())\n+         ChannelGroupFuture future = channelGroup.close().awaitUninterruptibly();\n+\n+         if (!future.isSuccess())\n          {\n-            Channel channel = iterator.next();\n-            if (channel.isActive())\n+            ActiveMQServerLogger.LOGGER.nettyChannelGroupError();\n+            Iterator<Channel> iterator = future.group().iterator();\n+            while (iterator.hasNext())\n             {\n-               ActiveMQServerLogger.LOGGER.nettyChannelStillOpen(channel, channel.remoteAddress());\n+               Channel channel = iterator.next();\n+               if (channel.isActive())\n+               {\n+                  ActiveMQServerLogger.LOGGER.nettyChannelStillOpen(channel, channel.remoteAddress());\n+               }\n             }\n          }\n       }\n@@ -617,17 +624,20 @@ public synchronized void pause()\n       }\n \n       // We *pause* the acceptor so no new connections are made\n-      ChannelGroupFuture future = serverChannelGroup.close().awaitUninterruptibly();\n-      if (!future.isSuccess())\n+      if (serverChannelGroup != null)\n       {\n-         ActiveMQServerLogger.LOGGER.nettyChannelGroupBindError();\n-         Iterator<Channel> iterator = future.group().iterator();\n-         while (iterator.hasNext())\n+         ChannelGroupFuture future = serverChannelGroup.close().awaitUninterruptibly();\n+         if (!future.isSuccess())\n          {\n-            Channel channel = iterator.next();\n-            if (channel.isActive())\n+            ActiveMQServerLogger.LOGGER.nettyChannelGroupBindError();\n+            Iterator<Channel> iterator = future.group().iterator();\n+            while (iterator.hasNext())\n             {\n-               ActiveMQServerLogger.LOGGER.nettyChannelStillBound(channel, channel.remoteAddress());\n+               Channel channel = iterator.next();\n+               if (channel.isActive())\n+               {\n+                  ActiveMQServerLogger.LOGGER.nettyChannelStillBound(channel, channel.remoteAddress());\n+               }\n             }\n          }\n       }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/028529b8a910af3d1d8c941c48184d1730ae4973/artemis-server/src/main/java/org/apache/activemq/artemis/core/remoting/impl/netty/NettyAcceptor.java",
                "sha": "8ed06be4eb5fb2c386979750108166ce9b68b043",
                "status": "modified"
            }
        ],
        "message": "Avoid potential NPEs seen on tests",
        "parent": "https://github.com/apache/activemq-artemis/commit/791cc5c50c914bfc22dd7adc3fc74e5ff1705929",
        "patched_files": [
            "NettyAcceptor.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "NettyAcceptorTest.java"
        ]
    },
    "activemq-artemis_04eed1b": {
        "bug_id": "activemq-artemis_04eed1b",
        "commit": "https://github.com/apache/activemq-artemis/commit/04eed1b7f4c5551746c883aa640ef5279ba9f30e",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/04eed1b7f4c5551746c883aa640ef5279ba9f30e/examples/features/standard/security-ldap/src/main/java/org/apache/activemq/artemis/jms/example/ldap/InMemoryDirectoryServiceFactory.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/examples/features/standard/security-ldap/src/main/java/org/apache/activemq/artemis/jms/example/ldap/InMemoryDirectoryServiceFactory.java?ref=04eed1b7f4c5551746c883aa640ef5279ba9f30e",
                "deletions": 1,
                "filename": "examples/features/standard/security-ldap/src/main/java/org/apache/activemq/artemis/jms/example/ldap/InMemoryDirectoryServiceFactory.java",
                "patch": "@@ -89,7 +89,7 @@ public InMemoryDirectoryServiceFactory(DirectoryService directoryService, Partit\n     */\n    @Override\n    public void init(String name) throws Exception {\n-      if ((directoryService != null) && directoryService.isStarted()) {\n+      if ((directoryService == null) || directoryService.isStarted()) {\n          return;\n       }\n ",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/04eed1b7f4c5551746c883aa640ef5279ba9f30e/examples/features/standard/security-ldap/src/main/java/org/apache/activemq/artemis/jms/example/ldap/InMemoryDirectoryServiceFactory.java",
                "sha": "d7ebde4b84f13db94dc400e4747ecce5908cf7cf",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/04eed1b7f4c5551746c883aa640ef5279ba9f30e/tests/extra-tests/src/test/java/org/apache/activemq/artemis/tests/extras/jms/xa/JMSXDeliveryCountTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/extra-tests/src/test/java/org/apache/activemq/artemis/tests/extras/jms/xa/JMSXDeliveryCountTest.java?ref=04eed1b7f4c5551746c883aa640ef5279ba9f30e",
                "deletions": 4,
                "filename": "tests/extra-tests/src/test/java/org/apache/activemq/artemis/tests/extras/jms/xa/JMSXDeliveryCountTest.java",
                "patch": "@@ -671,12 +671,10 @@ public void run() {\n                   if (tm == null) {\n                      failed = true;\n                   }\n-\n-                  if (!tm.getText().equals(\"testing\" + i)) {\n+                  else if (!tm.getText().equals(\"testing\" + i)) {\n                      failed = true;\n                   }\n-\n-                  if (tm.getIntProperty(\"JMSXDeliveryCount\") != j + 1) {\n+                  else if (tm.getIntProperty(\"JMSXDeliveryCount\") != j + 1) {\n                      failed = true;\n                   }\n                }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/04eed1b7f4c5551746c883aa640ef5279ba9f30e/tests/extra-tests/src/test/java/org/apache/activemq/artemis/tests/extras/jms/xa/JMSXDeliveryCountTest.java",
                "sha": "3c1c0b58c7553aaf6bcf61e373dc5199df99ff60",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/04eed1b7f4c5551746c883aa640ef5279ba9f30e/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/JournalCrashTest.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/JournalCrashTest.java?ref=04eed1b7f4c5551746c883aa640ef5279ba9f30e",
                "deletions": 19,
                "filename": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/JournalCrashTest.java",
                "patch": "@@ -108,10 +108,7 @@ public static void main(final String[] arg) {\n    }\n \n    public void sendMessages(final int start, final int end) throws Exception {\n-      ClientSession session = null;\n-      try {\n-\n-         session = factory.createSession(false, false);\n+      try (ClientSession session = factory.createSession(false, false)) {\n \n          try {\n             session.createQueue(QUEUE, QUEUE, true);\n@@ -132,9 +129,6 @@ public void sendMessages(final int start, final int end) throws Exception {\n          session.close();\n          // server.stop(); -- this test was not supposed to stop the server, it should crash\n       }\n-      finally {\n-         session.close();\n-      }\n    }\n \n    @Test\n@@ -146,11 +140,10 @@ public void testRestartJournal() throws Throwable {\n \n       printJournal();\n \n-      ClientSession session = null;\n-      try {\n-         startServer();\n+      startServer();\n+\n+      try (ClientSession session = factory.createSession(true, true)) {\n \n-         session = factory.createSession(true, true);\n          ClientConsumer consumer = session.createConsumer(QUEUE);\n          session.start();\n \n@@ -165,14 +158,6 @@ public void testRestartJournal() throws Throwable {\n          }\n          session.close();\n       }\n-      finally {\n-         try {\n-            session.close();\n-         }\n-         catch (Throwable ignored) {\n-         }\n-      }\n-\n    }\n \n    /**",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/04eed1b7f4c5551746c883aa640ef5279ba9f30e/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/JournalCrashTest.java",
                "sha": "e340d3805936c7a5d998ec50412f5d28fb806c46",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/04eed1b7f4c5551746c883aa640ef5279ba9f30e/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/stomp/v11/StompV11Test.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/stomp/v11/StompV11Test.java?ref=04eed1b7f4c5551746c883aa640ef5279ba9f30e",
                "deletions": 2,
                "filename": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/stomp/v11/StompV11Test.java",
                "patch": "@@ -64,8 +64,9 @@ public void setUp() throws Exception {\n    @After\n    public void tearDown() throws Exception {\n       try {\n-         log.debug(\"Connection 11 : \" + connV11.isConnected());\n-         if (connV11 != null && connV11.isConnected()) {\n+         boolean connected = connV11 != null && connV11.isConnected();\n+         log.debug(\"Connection 11 : \" + connected);\n+         if (connected) {\n             connV11.disconnect();\n          }\n       }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/04eed1b7f4c5551746c883aa640ef5279ba9f30e/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/stomp/v11/StompV11Test.java",
                "sha": "f539cd6f4d92460144f81db379557c4331bb10c1",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/04eed1b7f4c5551746c883aa640ef5279ba9f30e/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/stomp/v12/StompV12Test.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/stomp/v12/StompV12Test.java?ref=04eed1b7f4c5551746c883aa640ef5279ba9f30e",
                "deletions": 2,
                "filename": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/stomp/v12/StompV12Test.java",
                "patch": "@@ -67,8 +67,9 @@ public void setUp() throws Exception {\n    @After\n    public void tearDown() throws Exception {\n       try {\n-         log.debug(\"Connection 1.2 : \" + connV12.isConnected());\n-         if (connV12 != null && connV12.isConnected()) {\n+         boolean connected = connV12 != null && connV12.isConnected();\n+         log.debug(\"Connection 1.2 : \" + connected);\n+         if (connected) {\n             connV12.disconnect();\n          }\n       }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/04eed1b7f4c5551746c883aa640ef5279ba9f30e/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/stomp/v12/StompV12Test.java",
                "sha": "adebae6a5426641143fff3f9a8a1e3da58767ddc",
                "status": "modified"
            }
        ],
        "message": "Fix some potential NPEs in examples and tests",
        "parent": "https://github.com/apache/activemq-artemis/commit/61222233ca9846cb3bc4219a3f6e27ceef663a9b",
        "patched_files": [
            "InMemoryDirectoryServiceFactory.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "JMSXDeliveryCountTest.java",
            "StompV12Test.java",
            "JournalCrashTest.java",
            "StompV11Test.java"
        ]
    },
    "activemq-artemis_0a9a6c9": {
        "bug_id": "activemq-artemis_0a9a6c9",
        "commit": "https://github.com/apache/activemq-artemis/commit/0a9a6c92f4d2713ffe01639296587ab00566630a",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/0a9a6c92f4d2713ffe01639296587ab00566630a/artemis-server/src/main/java/org/apache/activemq/artemis/core/config/ClusterConnectionConfiguration.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/config/ClusterConnectionConfiguration.java?ref=0a9a6c92f4d2713ffe01639296587ab00566630a",
                "deletions": 1,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/config/ClusterConnectionConfiguration.java",
                "patch": "@@ -377,7 +377,7 @@ public ClusterConnectionConfiguration setClusterNotificationAttempts(int cluster\n          return list.toArray(new TransportConfiguration[list.size()]);\n       }\n       else {\n-         return configuration.getTransportConfigurations(staticConnectors);\n+         return staticConnectors != null ? configuration.getTransportConfigurations(staticConnectors) : null;\n       }\n    }\n ",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/0a9a6c92f4d2713ffe01639296587ab00566630a/artemis-server/src/main/java/org/apache/activemq/artemis/core/config/ClusterConnectionConfiguration.java",
                "sha": "3c715af6c491a494915fcaf2714a4aa028df5f30",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-347 Fixing NPE",
        "parent": "https://github.com/apache/activemq-artemis/commit/2d4654ca2631b98094c4021411447e201593b44d",
        "patched_files": [
            "ClusterConnectionConfiguration.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "ClusterConnectionConfigurationTest.java"
        ]
    },
    "activemq-artemis_16446c1": {
        "bug_id": "activemq-artemis_16446c1",
        "commit": "https://github.com/apache/activemq-artemis/commit/16446c1a6e6fdae9e0f35bb2211e45b8da5bfbc2",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/16446c1a6e6fdae9e0f35bb2211e45b8da5bfbc2/artemis-ra/src/main/java/org/apache/activemq/artemis/ra/ActiveMQRALogger.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-ra/src/main/java/org/apache/activemq/artemis/ra/ActiveMQRALogger.java?ref=16446c1a6e6fdae9e0f35bb2211e45b8da5bfbc2",
                "deletions": 0,
                "filename": "artemis-ra/src/main/java/org/apache/activemq/artemis/ra/ActiveMQRALogger.java",
                "patch": "@@ -24,6 +24,8 @@\n import org.jboss.logging.annotations.Message;\n import org.jboss.logging.annotations.MessageLogger;\n \n+import javax.jms.IllegalStateException;\n+\n /**\n  * Logger Code 15\n  * <br>\n@@ -144,4 +146,7 @@\n    @LogMessage(level = Logger.Level.DEBUG)\n    @Message(id = 153001, value = \"using different ActiveMQRAConnectionFactory\", format = Message.Format.MESSAGE_FORMAT)\n    void warnDifferentConnectionfactory();\n+\n+   @Message(id = 153002, value = \"Cannot create a subscriber on the durable subscription since it already has subscriber(s)\")\n+   IllegalStateException canNotCreatedNonSharedSubscriber();\n }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/16446c1a6e6fdae9e0f35bb2211e45b8da5bfbc2/artemis-ra/src/main/java/org/apache/activemq/artemis/ra/ActiveMQRALogger.java",
                "sha": "99fb031872de525cd30a6ba6bce7407ad9f167a4",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/16446c1a6e6fdae9e0f35bb2211e45b8da5bfbc2/artemis-ra/src/main/java/org/apache/activemq/artemis/ra/inflow/ActiveMQActivationSpec.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-ra/src/main/java/org/apache/activemq/artemis/ra/inflow/ActiveMQActivationSpec.java?ref=16446c1a6e6fdae9e0f35bb2211e45b8da5bfbc2",
                "deletions": 1,
                "filename": "artemis-ra/src/main/java/org/apache/activemq/artemis/ra/inflow/ActiveMQActivationSpec.java",
                "patch": "@@ -96,7 +96,7 @@\n    /**\n     * If this is true, a durable subscription could be shared by multiple MDB instances\n     */\n-   private Boolean shareSubscriptions;\n+   private Boolean shareSubscriptions = false;\n \n    /**\n     * The user",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/16446c1a6e6fdae9e0f35bb2211e45b8da5bfbc2/artemis-ra/src/main/java/org/apache/activemq/artemis/ra/inflow/ActiveMQActivationSpec.java",
                "sha": "fed36db895f4da028778ad2919ad7bc18e3b5ef1",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/16446c1a6e6fdae9e0f35bb2211e45b8da5bfbc2/artemis-ra/src/main/java/org/apache/activemq/artemis/ra/inflow/ActiveMQMessageHandler.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-ra/src/main/java/org/apache/activemq/artemis/ra/inflow/ActiveMQMessageHandler.java?ref=16446c1a6e6fdae9e0f35bb2211e45b8da5bfbc2",
                "deletions": 1,
                "filename": "artemis-ra/src/main/java/org/apache/activemq/artemis/ra/inflow/ActiveMQMessageHandler.java",
                "patch": "@@ -122,7 +122,7 @@ public void setup() throws Exception {\n             // As a deployed MDB could set up multiple instances in order to process messages in parallel.\n             if (sessionNr == 0 && subResponse.getConsumerCount() > 0) {\n                if (!spec.isShareSubscriptions()) {\n-                  throw new javax.jms.IllegalStateException(\"Cannot create a subscriber on the durable subscription since it already has subscriber(s)\");\n+                  throw ActiveMQRALogger.LOGGER.canNotCreatedNonSharedSubscriber();\n                } else if (ActiveMQRALogger.LOGGER.isDebugEnabled()) {\n                   logger.debug(\"the mdb on destination \" + queueName + \" already had \" +\n                                                    subResponse.getConsumerCount() +",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/16446c1a6e6fdae9e0f35bb2211e45b8da5bfbc2/artemis-ra/src/main/java/org/apache/activemq/artemis/ra/inflow/ActiveMQMessageHandler.java",
                "sha": "9133cdf462e9d0bb87527602fdb9064715fc4d56",
                "status": "modified"
            }
        ],
        "message": "[ARTEMIS-1475] Fix NPE in ActiveMQMessageHandler#setup\n\n* initialize ActiveMQActivationSpec#shareSubscriptions to false\n* i18n of the exception thrown by ActiveMQMessageHandler if it is not\n  possible to create a non-shared subscriber\n\nJIRA: https://issues.apache.org/jira/browse/ARTEMIS-1475",
        "parent": "https://github.com/apache/activemq-artemis/commit/0ef2c15ab7236890df1e853ce419b5dcfa225b71",
        "patched_files": [
            "ActiveMQMessageHandler.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "ActiveMQMessageHandlerTest.java"
        ]
    },
    "activemq-artemis_1d89bc7": {
        "bug_id": "activemq-artemis_1d89bc7",
        "commit": "https://github.com/apache/activemq-artemis/commit/1d89bc7dd279b6741b7ff276f2230aaab60f0db8",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/1d89bc7dd279b6741b7ff276f2230aaab60f0db8/artemis-server/src/main/java/org/apache/activemq/artemis/core/config/impl/ConfigurationImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/config/impl/ConfigurationImpl.java?ref=1d89bc7dd279b6741b7ff276f2230aaab60f0db8",
                "deletions": 1,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/config/impl/ConfigurationImpl.java",
                "patch": "@@ -1635,7 +1635,7 @@ public int hashCode() {\n       result = prime * result + (logJournalWriteRate ? 1231 : 1237);\n       result = prime * result + ((managementAddress == null) ? 0 : managementAddress.hashCode());\n       result = prime * result + ((managementNotificationAddress == null) ? 0 : managementNotificationAddress.hashCode());\n-      result = prime * result + (maskPassword ? 1231 : 1237);\n+      result = prime * result + (maskPassword == null ? 0 : maskPassword.hashCode());\n       result = prime * result + maxConcurrentPageIO;\n       result = prime * result + (int) (memoryMeasureInterval ^ (memoryMeasureInterval >>> 32));\n       result = prime * result + memoryWarningThreshold;",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/1d89bc7dd279b6741b7ff276f2230aaab60f0db8/artemis-server/src/main/java/org/apache/activemq/artemis/core/config/impl/ConfigurationImpl.java",
                "sha": "ae4a25f5d2e744e990449c182342d4e338895bc7",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/1d89bc7dd279b6741b7ff276f2230aaab60f0db8/artemis-server/src/test/java/org/apache/activemq/artemis/core/config/impl/ConfigurationImplTest.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/test/java/org/apache/activemq/artemis/core/config/impl/ConfigurationImplTest.java?ref=1d89bc7dd279b6741b7ff276f2230aaab60f0db8",
                "deletions": 0,
                "filename": "artemis-server/src/test/java/org/apache/activemq/artemis/core/config/impl/ConfigurationImplTest.java",
                "patch": "@@ -88,6 +88,13 @@ public void testDefaults() {\n       Assert.assertEquals(ActiveMQDefaultConfiguration.getDefaultMemoryMeasureInterval(), conf.getMemoryMeasureInterval());\n    }\n \n+   @Test\n+   public void testNullMaskPassword() {\n+      ConfigurationImpl impl = new ConfigurationImpl();\n+      impl.setMaskPassword(null);\n+      impl.hashCode();\n+   }\n+\n    @Test\n    public void testSetGetAttributes() throws Exception {\n       for (int j = 0; j < 100; j++) {",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/1d89bc7dd279b6741b7ff276f2230aaab60f0db8/artemis-server/src/test/java/org/apache/activemq/artemis/core/config/impl/ConfigurationImplTest.java",
                "sha": "ca28e356cc2c1c2eef23216dcacbb91efc7aad26",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-1914 Fix NPE on ConfigurationImpl.hashCode()",
        "parent": "https://github.com/apache/activemq-artemis/commit/46a41aecadbcddc4c2a97286369dec82a15af6a1",
        "patched_files": [
            "ConfigurationImpl.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "ConfigurationImplTest.java"
        ]
    },
    "activemq-artemis_2154c75": {
        "bug_id": "activemq-artemis_2154c75",
        "commit": "https://github.com/apache/activemq-artemis/commit/2154c754c850568988251d8c04ebfabdd41d9aee",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/2154c754c850568988251d8c04ebfabdd41d9aee/activemq-server/src/main/java/org/apache/activemq/core/transaction/impl/TransactionImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/activemq-server/src/main/java/org/apache/activemq/core/transaction/impl/TransactionImpl.java?ref=2154c754c850568988251d8c04ebfabdd41d9aee",
                "deletions": 1,
                "filename": "activemq-server/src/main/java/org/apache/activemq/core/transaction/impl/TransactionImpl.java",
                "patch": "@@ -167,7 +167,10 @@ public void prepare() throws Exception\n                   // so we reset it now\n                   beforeRollback();\n                   afterRollback();\n-                  operations.clear();\n+                  if (operations != null)\n+                  {\n+                     operations.clear();\n+                  }\n                   throw exception;\n                }\n                else",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/2154c754c850568988251d8c04ebfabdd41d9aee/activemq-server/src/main/java/org/apache/activemq/core/transaction/impl/TransactionImpl.java",
                "sha": "4697fbac7164ee31530e116db90ffc562761a03e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/2154c754c850568988251d8c04ebfabdd41d9aee/tests/integration-tests/src/test/java/org/apache/activemq/tests/integration/DuplicateDetectionTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/integration-tests/src/test/java/org/apache/activemq/tests/integration/DuplicateDetectionTest.java?ref=2154c754c850568988251d8c04ebfabdd41d9aee",
                "deletions": 0,
                "filename": "tests/integration-tests/src/test/java/org/apache/activemq/tests/integration/DuplicateDetectionTest.java",
                "patch": "@@ -1245,6 +1245,7 @@ public void testXADuplicateDetection4() throws Exception\n       }\n       catch (XAException expected)\n       {\n+         assertTrue(expected.getCause().toString().contains(\"DUPLICATE_ID_REJECTED\"));\n       }\n \n       session.rollback(xid2);",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/2154c754c850568988251d8c04ebfabdd41d9aee/tests/integration-tests/src/test/java/org/apache/activemq/tests/integration/DuplicateDetectionTest.java",
                "sha": "486a552a94920a88f16824221d7965cd5778261c",
                "status": "modified"
            }
        ],
        "message": "Fixing a NPE case after Duplciate detection\n\nIf a Transaction wasn't created, the case for duplciate Detection would cancel a transaction that never happened\nand it would get a NPE instead of a TX Exception.\n\nIt wasn't a big deal as the client got an exception anyways and the users were able to cancel in that case\nbut the message sent was a string containing just \"Null\".\n\nthis will fix it with a proper handling",
        "parent": "https://github.com/apache/activemq-artemis/commit/41b823be7ebcb83d0f8f24e805b6f4433ce5a049",
        "patched_files": [
            "TransactionImpl.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "DuplicateDetectionTest.java"
        ]
    },
    "activemq-artemis_2c32dda": {
        "bug_id": "activemq-artemis_2c32dda",
        "commit": "https://github.com/apache/activemq-artemis/commit/2c32dda39e4edab7d34e3fb0db8217944df33977",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/2c32dda39e4edab7d34e3fb0db8217944df33977/artemis-commons/src/main/java/org/apache/activemq/artemis/utils/collections/ConcurrentLongHashSet.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-commons/src/main/java/org/apache/activemq/artemis/utils/collections/ConcurrentLongHashSet.java?ref=2c32dda39e4edab7d34e3fb0db8217944df33977",
                "deletions": 2,
                "filename": "artemis-commons/src/main/java/org/apache/activemq/artemis/utils/collections/ConcurrentLongHashSet.java",
                "patch": "@@ -165,7 +165,7 @@ public void forEach(ConsumerLong processor) {\n       // Keys and values are stored interleaved in the table array\n       private long[] table;\n \n-      private int capacity;\n+      private volatile int capacity;\n       private volatile int size;\n       private int usedBuckets;\n       private int resizeThreshold;\n@@ -374,9 +374,9 @@ private void rehash() {\n             }\n          }\n \n-         capacity = newCapacity;\n          table = newTable;\n          usedBuckets = size;\n+         capacity = newCapacity;\n          resizeThreshold = (int) (capacity * SetFillFactor);\n       }\n ",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/2c32dda39e4edab7d34e3fb0db8217944df33977/artemis-commons/src/main/java/org/apache/activemq/artemis/utils/collections/ConcurrentLongHashSet.java",
                "sha": "8344c57f642b700808626d8b066ce20df3998a3d",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-1664 fix npe bug while getting element in the process of rehash\n\nApply same fix to ConcurrentLongHashSet",
        "parent": "https://github.com/apache/activemq-artemis/commit/6509c078fb4e4a60b40a4a44528453541caabb4b",
        "patched_files": [
            "ConcurrentLongHashSet.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "ConcurrentLongHashSetTest.java"
        ]
    },
    "activemq-artemis_3112b4f": {
        "bug_id": "activemq-artemis_3112b4f",
        "commit": "https://github.com/apache/activemq-artemis/commit/3112b4f3db6a77b3d996d72bac65d539d1135ce8",
        "file": [
            {
                "additions": 37,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/3112b4f3db6a77b3d996d72bac65d539d1135ce8/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/remoting/impl/netty/NettyConnector.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/remoting/impl/netty/NettyConnector.java?ref=3112b4f3db6a77b3d996d72bac65d539d1135ce8",
                "deletions": 3,
                "filename": "artemis-core-client/src/main/java/org/apache/activemq/artemis/core/remoting/impl/netty/NettyConnector.java",
                "patch": "@@ -47,6 +47,7 @@\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n import java.util.stream.Stream;\n \n import io.netty.bootstrap.Bootstrap;\n@@ -604,6 +605,7 @@ public void initChannel(Channel channel) throws Exception {\n             protocolManager.addChannelHandlers(pipeline);\n \n             pipeline.addLast(new ActiveMQClientChannelHandler(channelGroup, handler, new Listener(), closeExecutor));\n+            logger.debugf(\"Added ActiveMQClientChannelHandler to Channel with id = %s \", channel.id());\n          }\n       });\n \n@@ -737,6 +739,20 @@ public boolean isStarted() {\n \n    @Override\n    public Connection createConnection() {\n+      return createConnection(null);\n+   }\n+\n+   /**\n+    * Create and return a connection from this connector.\n+    * <p>\n+    * This method must NOT throw an exception if it fails to create the connection\n+    * (e.g. network is not available), in this case it MUST return null.<br>\n+    * This version can be used for testing purposes.\n+    *\n+    * @param onConnect a callback that would be called right after {@link Bootstrap#connect()}\n+    * @return The connection, or {@code null} if unable to create a connection (e.g. network is unavailable)\n+    */\n+   public final Connection createConnection(Consumer<ChannelFuture> onConnect) {\n       if (channelClazz == null) {\n          return null;\n       }\n@@ -758,7 +774,9 @@ public Connection createConnection() {\n       } else {\n          future = bootstrap.connect(remoteDestination);\n       }\n-\n+      if (onConnect != null) {\n+         onConnect.accept(future);\n+      }\n       future.awaitUninterruptibly();\n \n       if (future.isSuccess()) {\n@@ -770,7 +788,15 @@ public Connection createConnection() {\n                if (handshakeFuture.isSuccess()) {\n                   ChannelPipeline channelPipeline = ch.pipeline();\n                   ActiveMQChannelHandler channelHandler = channelPipeline.get(ActiveMQChannelHandler.class);\n-                  channelHandler.active = true;\n+                  if (channelHandler != null) {\n+                     channelHandler.active = true;\n+                  } else {\n+                     ch.close().awaitUninterruptibly();\n+                     ActiveMQClientLogger.LOGGER.errorCreatingNettyConnection(\n+                        new IllegalStateException(\"No ActiveMQChannelHandler has been found while connecting to \" +\n+                                                     remoteDestination + \" from Channel with id = \" + ch.id()));\n+                     return null;\n+                  }\n                } else {\n                   ch.close().awaitUninterruptibly();\n                   ActiveMQClientLogger.LOGGER.errorCreatingNettyConnection(handshakeFuture.cause());\n@@ -830,7 +856,15 @@ public Connection createConnection() {\n          } else {\n             ChannelPipeline channelPipeline = ch.pipeline();\n             ActiveMQChannelHandler channelHandler = channelPipeline.get(ActiveMQChannelHandler.class);\n-            channelHandler.active = true;\n+            if (channelHandler != null) {\n+               channelHandler.active = true;\n+            } else {\n+               ch.close().awaitUninterruptibly();\n+               ActiveMQClientLogger.LOGGER.errorCreatingNettyConnection(\n+                  new IllegalStateException(\"No ActiveMQChannelHandler has been found while connecting to \" +\n+                                               remoteDestination + \" from Channel with id = \" + ch.id()));\n+               return null;\n+            }\n          }\n \n          // No acceptor on a client connection",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/3112b4f3db6a77b3d996d72bac65d539d1135ce8/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/remoting/impl/netty/NettyConnector.java",
                "sha": "32deb385bbfd12c476990cbd14fdb2a498563bcc",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/3112b4f3db6a77b3d996d72bac65d539d1135ce8/tests/unit-tests/src/test/java/org/apache/activemq/artemis/tests/unit/core/remoting/impl/netty/NettyConnectorTest.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/unit-tests/src/test/java/org/apache/activemq/artemis/tests/unit/core/remoting/impl/netty/NettyConnectorTest.java?ref=3112b4f3db6a77b3d996d72bac65d539d1135ce8",
                "deletions": 0,
                "filename": "tests/unit-tests/src/test/java/org/apache/activemq/artemis/tests/unit/core/remoting/impl/netty/NettyConnectorTest.java",
                "patch": "@@ -20,11 +20,14 @@\n import java.util.Map;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n \n+import io.netty.channel.ChannelPipeline;\n import org.apache.activemq.artemis.api.core.ActiveMQBuffer;\n import org.apache.activemq.artemis.api.core.ActiveMQException;\n import org.apache.activemq.artemis.api.core.TransportConfiguration;\n import org.apache.activemq.artemis.core.config.impl.ConfigurationImpl;\n+import org.apache.activemq.artemis.core.remoting.impl.netty.ActiveMQChannelHandler;\n import org.apache.activemq.artemis.core.remoting.impl.netty.NettyConnector;\n import org.apache.activemq.artemis.core.remoting.impl.netty.TransportConstants;\n import org.apache.activemq.artemis.core.server.ActiveMQComponent;\n@@ -361,4 +364,34 @@ public void bufferReceived(final Object connectionID, final ActiveMQBuffer buffe\n       connector.close();\n       Assert.assertFalse(connector.isStarted());\n    }\n+\n+   @Test\n+   public void testChannelHandlerRemovedWhileCreatingConnection() throws Exception {\n+      BufferHandler handler = (connectionID, buffer) -> {\n+      };\n+      Map<String, Object> params = new HashMap<>();\n+      final ExecutorService closeExecutor = Executors.newCachedThreadPool(ActiveMQThreadFactory.defaultThreadFactory());\n+      final ExecutorService threadPool = Executors.newCachedThreadPool(ActiveMQThreadFactory.defaultThreadFactory());\n+      final ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(5, ActiveMQThreadFactory.defaultThreadFactory());\n+      try {\n+         NettyConnector connector = new NettyConnector(params, handler, listener, closeExecutor, threadPool, scheduledThreadPool);\n+         connector.start();\n+         final Connection connection = connector.createConnection(future -> {\n+            future.awaitUninterruptibly();\n+            Assert.assertTrue(future.isSuccess());\n+            final ChannelPipeline pipeline = future.channel().pipeline();\n+            final ActiveMQChannelHandler activeMQChannelHandler = pipeline.get(ActiveMQChannelHandler.class);\n+            Assert.assertNotNull(activeMQChannelHandler);\n+            pipeline.remove(activeMQChannelHandler);\n+            Assert.assertNull(pipeline.get(ActiveMQChannelHandler.class));\n+         });\n+         Assert.assertNull(connection);\n+         connector.close();\n+      } finally {\n+         closeExecutor.shutdownNow();\n+         threadPool.shutdownNow();\n+         scheduledThreadPool.shutdownNow();\n+      }\n+   }\n+\n }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/3112b4f3db6a77b3d996d72bac65d539d1135ce8/tests/unit-tests/src/test/java/org/apache/activemq/artemis/tests/unit/core/remoting/impl/netty/NettyConnectorTest.java",
                "sha": "ffd2cd4cac4be3308ab46c99a055be85795dd9e1",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-2093 NPE thrown by NettyConnector::createConnection\n\nGiven that NettyConnector::createConnection isn't happening on the\nchannel's event loop, it could race with a channel close event, that\nwould clean the whole channel pipeline, leading to a NPE while\ntrying to use a configured channel handler of the pipeline.",
        "parent": "https://github.com/apache/activemq-artemis/commit/bd0f11498c283df103454c5d6f65cfde4dfc3711",
        "patched_files": [
            "NettyConnector.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "NettyConnectorTest.java"
        ]
    },
    "activemq-artemis_32ac370": {
        "bug_id": "activemq-artemis_32ac370",
        "commit": "https://github.com/apache/activemq-artemis/commit/32ac370edce4b5232c8d0e3aa7c9df2fd8795766",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/32ac370edce4b5232c8d0e3aa7c9df2fd8795766/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/proton/ProtonServerSenderContext.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/proton/ProtonServerSenderContext.java?ref=32ac370edce4b5232c8d0e3aa7c9df2fd8795766",
                "deletions": 5,
                "filename": "artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/proton/ProtonServerSenderContext.java",
                "patch": "@@ -22,6 +22,8 @@\n import java.util.Set;\n import java.util.concurrent.TimeUnit;\n \n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.PooledByteBufAllocator;\n import org.apache.activemq.artemis.api.core.ActiveMQExceptionType;\n import org.apache.activemq.artemis.api.core.ActiveMQQueueExistsException;\n import org.apache.activemq.artemis.api.core.ActiveMQSecurityException;\n@@ -73,9 +75,6 @@\n import org.apache.qpid.proton.engine.Sender;\n import org.jboss.logging.Logger;\n \n-import io.netty.buffer.ByteBuf;\n-import io.netty.buffer.PooledByteBufAllocator;\n-\n /**\n  * TODO: Merge {@link ProtonServerSenderContext} and {@link org.apache.activemq.artemis.protocol.amqp.client.ProtonClientSenderContext} once we support 'global' link names. The split is a workaround for outgoing links\n  */\n@@ -334,8 +333,11 @@ public void initialise() throws Exception {\n             }\n \n             if (queueNameToUse != null) {\n-               SimpleString matchingAnycastQueue = sessionSPI.getMatchingQueue(addressToUse, queueNameToUse, RoutingType.MULTICAST);\n-               queue = matchingAnycastQueue.toString();\n+               SimpleString matchingQueue = sessionSPI.getMatchingQueue(addressToUse, queueNameToUse, RoutingType.MULTICAST);\n+               if (matchingQueue == null) {\n+                  throw new ActiveMQAMQPNotFoundException(\"Queue: '\" + queueNameToUse + \"' does not exist\");\n+               }\n+               queue = matchingQueue.toString();\n             }\n             //if the address specifies a broker configured queue then we always use this, treat it as a queue\n             if (queue != null) {",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/32ac370edce4b5232c8d0e3aa7c9df2fd8795766/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/proton/ProtonServerSenderContext.java",
                "sha": "d2a097c23c67326470dd4e498643a581c182605c",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/32ac370edce4b5232c8d0e3aa7c9df2fd8795766/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/AmqpFullyQualifiedNameTest.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/AmqpFullyQualifiedNameTest.java?ref=32ac370edce4b5232c8d0e3aa7c9df2fd8795766",
                "deletions": 1,
                "filename": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/AmqpFullyQualifiedNameTest.java",
                "patch": "@@ -68,6 +68,27 @@ protected void addAdditionalAcceptors(ActiveMQServer server) throws Exception {\n       server.getConfiguration().addAcceptorConfiguration(new TransportConfiguration(NETTY_ACCEPTOR_FACTORY, new HashMap<String, Object>(), \"netty\", new HashMap<String, Object>()));\n    }\n \n+   @Test\n+   public void testFQQNTopicWhenQueueDoesNotExist() throws Exception {\n+      Exception e = null;\n+      String queueName = \"testQueue\";\n+\n+      Connection connection = createConnection(false);\n+      try {\n+         connection.setClientID(\"FQQNconn\");\n+         connection.start();\n+         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+         Topic topic = session.createTopic(multicastAddress.toString() + \"::\" + queueName);\n+         session.createConsumer(topic);\n+      } catch (InvalidDestinationException ide) {\n+         e = ide;\n+      } finally {\n+         connection.close();\n+      }\n+      assertNotNull(e);\n+      assertTrue(e.getMessage().contains(\"Queue: '\" + queueName + \"' does not exist\"));\n+   }\n+\n    @Test(timeout = 60000)\n    //there isn't much use of FQQN for topics\n    //however we can test query functionality\n@@ -78,7 +99,7 @@ public void testTopic() throws Exception {\n          connection.setClientID(\"FQQNconn\");\n          connection.start();\n          Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n-         Topic topic = session.createTopic(multicastAddress.toString());\n+         Topic topic = session.createTopic(multicastAddress.toString() + \"::someaddress\");\n \n          MessageConsumer consumer1 = session.createConsumer(topic);\n          MessageConsumer consumer2 = session.createConsumer(topic);",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/32ac370edce4b5232c8d0e3aa7c9df2fd8795766/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/AmqpFullyQualifiedNameTest.java",
                "sha": "eaca868cbeef904945a1cd200707561b6c3009f9",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-1392 Fix NPE when FQQN queue does not exist during multicast subscribe",
        "parent": "https://github.com/apache/activemq-artemis/commit/d414a1968b3ec11d50376dbc45fbcd0d29ccd5eb",
        "patched_files": [
            "ProtonServerSenderContext.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "AmqpFullyQualifiedNameTest.java"
        ]
    },
    "activemq-artemis_32ce871": {
        "bug_id": "activemq-artemis_32ce871",
        "commit": "https://github.com/apache/activemq-artemis/commit/32ce8710fc23763742adbddb9c4493b45b24583e",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/32ce8710fc23763742adbddb9c4493b45b24583e/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/remoting/impl/ssl/SSLSupport.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/remoting/impl/ssl/SSLSupport.java?ref=32ce8710fc23763742adbddb9c4493b45b24583e",
                "deletions": 2,
                "filename": "artemis-core-client/src/main/java/org/apache/activemq/artemis/core/remoting/impl/ssl/SSLSupport.java",
                "patch": "@@ -103,7 +103,7 @@ private static KeyStore loadKeystore(final String keystoreProvider,\n             URL keystoreURL = SSLSupport.validateStoreURL(keystorePath);\n             in = keystoreURL.openStream();\n          }\n-         ks.load(in, keystorePassword.toCharArray());\n+         ks.load(in, keystorePassword == null ? null : keystorePassword.toCharArray());\n       }\n       finally {\n          if (in != null) {\n@@ -126,7 +126,7 @@ private static KeyStore loadKeystore(final String keystoreProvider,\n       else {\n          KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n          KeyStore ks = SSLSupport.loadKeystore(keyStoreProvider, keystorePath, keystorePassword);\n-         kmf.init(ks, keystorePassword.toCharArray());\n+         kmf.init(ks, keystorePassword == null ? null : keystorePassword.toCharArray());\n \n          return kmf.getKeyManagers();\n       }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/32ce8710fc23763742adbddb9c4493b45b24583e/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/remoting/impl/ssl/SSLSupport.java",
                "sha": "2b97c758889def73808cd23e1ea592d4f85cdf82",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/32ce8710fc23763742adbddb9c4493b45b24583e/tests/unit-tests/src/test/java/org/apache/activemq/artemis/tests/unit/core/remoting/impl/ssl/SSLSupportTest.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/unit-tests/src/test/java/org/apache/activemq/artemis/tests/unit/core/remoting/impl/ssl/SSLSupportTest.java?ref=32ce8710fc23763742adbddb9c4493b45b24583e",
                "deletions": 0,
                "filename": "tests/unit-tests/src/test/java/org/apache/activemq/artemis/tests/unit/core/remoting/impl/ssl/SSLSupportTest.java",
                "patch": "@@ -137,6 +137,17 @@ public void testContextWithBadKeyStorePassword() throws Exception {\n       }\n    }\n \n+   @Test\n+   public void testContextWithNullKeyStorePassword() throws Exception {\n+      try {\n+         SSLSupport.createContext(storeType, keyStorePath, null, storeType, trustStorePath, trustStorePassword);\n+         Assert.fail();\n+      }\n+      catch (Exception e) {\n+         assertFalse(e instanceof NullPointerException);\n+      }\n+   }\n+\n    @Test\n    public void testContextWithBadTrustStorePath() throws Exception {\n       try {",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/32ce8710fc23763742adbddb9c4493b45b24583e/tests/unit-tests/src/test/java/org/apache/activemq/artemis/tests/unit/core/remoting/impl/ssl/SSLSupportTest.java",
                "sha": "6ecb385c15122395753d8c8bd8ed0744435a6a8b",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-445 avoid NPE on null ks password",
        "parent": "https://github.com/apache/activemq-artemis/commit/923c12c7a4595cfbd9193742f6d5ae99b434475d",
        "patched_files": [
            "SSLSupport.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "SSLSupportTest.java"
        ]
    },
    "activemq-artemis_48d8a54": {
        "bug_id": "activemq-artemis_48d8a54",
        "commit": "https://github.com/apache/activemq-artemis/commit/48d8a54135732b2b34251f571aa3a5cadc44d3a9",
        "file": [
            {
                "additions": 63,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/48d8a54135732b2b34251f571aa3a5cadc44d3a9/artemis-protocols/artemis-amqp-protocol/src/test/java/org/apache/activemq/artemis/protocol/amqp/broker/AMQPMessageTest.java",
                "changes": 63,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-protocols/artemis-amqp-protocol/src/test/java/org/apache/activemq/artemis/protocol/amqp/broker/AMQPMessageTest.java?ref=48d8a54135732b2b34251f571aa3a5cadc44d3a9",
                "deletions": 0,
                "filename": "artemis-protocols/artemis-amqp-protocol/src/test/java/org/apache/activemq/artemis/protocol/amqp/broker/AMQPMessageTest.java",
                "patch": "@@ -33,6 +33,9 @@\n import java.util.List;\n import java.util.Map;\n import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n import org.apache.activemq.artemis.api.core.ActiveMQBuffer;\n import org.apache.activemq.artemis.api.core.ActiveMQBuffers;\n@@ -170,6 +173,66 @@ public void testGetMemoryEstimate() {\n \n    //----- Test Connection ID access -----------------------------------------//\n \n+\n+   @Test\n+   public void testDecodeMultiThreaded() throws Exception {\n+      MessageImpl protonMessage = (MessageImpl) Message.Factory.create();\n+      protonMessage.setHeader( new Header());\n+      Properties properties = new Properties();\n+      properties.setTo(\"someNiceLocal\");\n+      protonMessage.setProperties(properties);\n+      protonMessage.getHeader().setDeliveryCount(new UnsignedInteger(7));\n+      protonMessage.getHeader().setDurable(Boolean.TRUE);\n+      protonMessage.setApplicationProperties(new ApplicationProperties(new HashMap<>()));\n+\n+      final AtomicInteger failures = new AtomicInteger(0);\n+\n+\n+      for (int testTry = 0; testTry < 100; testTry++) {\n+         AMQPMessage decoded = encodeAndDecodeMessage(protonMessage);\n+         Thread[] threads = new Thread[100];\n+\n+         CountDownLatch latchAlign = new CountDownLatch(threads.length);\n+         CountDownLatch go = new CountDownLatch(1);\n+\n+         Runnable run = new Runnable() {\n+            @Override\n+            public void run() {\n+               try {\n+\n+                  latchAlign.countDown();\n+                  go.await();\n+\n+                  Assert.assertNotNull(decoded.getHeader());\n+                  // this is a method used by Core Converter\n+                  decoded.getProtonMessage();\n+                  Assert.assertNotNull(decoded.getHeader());\n+\n+               } catch (Throwable e) {\n+                  e.printStackTrace();\n+                  failures.incrementAndGet();\n+               }\n+            }\n+         };\n+\n+         for (int i = 0; i < threads.length; i++) {\n+            threads[i] = new Thread(run);\n+            threads[i].start();\n+         }\n+\n+         Assert.assertTrue(latchAlign.await(10, TimeUnit.SECONDS));\n+         go.countDown();\n+\n+         for (Thread thread : threads) {\n+            thread.join(5000);\n+            Assert.assertFalse(thread.isAlive());\n+         }\n+\n+         Assert.assertEquals(0, failures.get());\n+      }\n+   }\n+\n+\n    @Test\n    public void testGetConnectionID() {\n       MessageImpl protonMessage = (MessageImpl) Message.Factory.create();",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/48d8a54135732b2b34251f571aa3a5cadc44d3a9/artemis-protocols/artemis-amqp-protocol/src/test/java/org/apache/activemq/artemis/protocol/amqp/broker/AMQPMessageTest.java",
                "sha": "953dd0bfefc2ba5025593317ff0c677045768648",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-2135 Test avoiding NPE under race",
        "parent": "https://github.com/apache/activemq-artemis/commit/66d5e4fbd102dad22dd072ae53d4f619a0fb3fc9",
        "patched_files": [
            "AMQPMessage.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "AMQPMessageTest.java"
        ]
    },
    "activemq-artemis_4bab1f0": {
        "bug_id": "activemq-artemis_4bab1f0",
        "commit": "https://github.com/apache/activemq-artemis/commit/4bab1f06442fc27770d03b18af61c23168a30d52",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/4bab1f06442fc27770d03b18af61c23168a30d52/artemis-server/src/main/java/org/apache/activemq/artemis/core/config/impl/ConfigurationImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/config/impl/ConfigurationImpl.java?ref=4bab1f06442fc27770d03b18af61c23168a30d52",
                "deletions": 1,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/config/impl/ConfigurationImpl.java",
                "patch": "@@ -1151,7 +1151,10 @@ public ConfigurationImpl addResourceLimitSettings(ResourceLimitSettings resource\n    @Override\n    public Map<String, Set<Role>> getSecurityRoles() {\n       for (SecuritySettingPlugin securitySettingPlugin : securitySettingPlugins) {\n-         securitySettings.putAll(securitySettingPlugin.getSecurityRoles());\n+         Map<String, Set<Role>> securitySettings = securitySettingPlugin.getSecurityRoles();\n+         if (securitySettings != null) {\n+            securitySettings.putAll(securitySettings);\n+         }\n       }\n       return securitySettings;\n    }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/4bab1f06442fc27770d03b18af61c23168a30d52/artemis-server/src/main/java/org/apache/activemq/artemis/core/config/impl/ConfigurationImpl.java",
                "sha": "bedfa56de05064954be15bc25c32c0ed3ab94537",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/4bab1f06442fc27770d03b18af61c23168a30d52/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/LegacyLDAPSecuritySettingPlugin.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/LegacyLDAPSecuritySettingPlugin.java?ref=4bab1f06442fc27770d03b18af61c23168a30d52",
                "deletions": 1,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/LegacyLDAPSecuritySettingPlugin.java",
                "patch": "@@ -398,7 +398,9 @@ public SecuritySettingPlugin stop() {\n       }\n \n       try {\n-         context.close();\n+         if (context != null) {\n+            context.close();\n+         }\n       }\n       catch (NamingException e) {\n          // ignore",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/4bab1f06442fc27770d03b18af61c23168a30d52/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/LegacyLDAPSecuritySettingPlugin.java",
                "sha": "6a0710aa09def50836d0470277c180ff46642a93",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-512 NPEs in LDAP authz",
        "parent": "https://github.com/apache/activemq-artemis/commit/b863e69eb77369e6ff82a049606371a5f1337300",
        "patched_files": [
            "LegacyLDAPSecuritySettingPlugin.java",
            "ConfigurationImpl.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "ConfigurationImplTest.java",
            "LegacyLDAPSecuritySettingPluginTest.java"
        ]
    },
    "activemq-artemis_4d126ad": {
        "bug_id": "activemq-artemis_4d126ad",
        "commit": "https://github.com/apache/activemq-artemis/commit/4d126adedbd3ca255121747b5f52f6441ebc670b",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/4d126adedbd3ca255121747b5f52f6441ebc670b/artemis-protocols/artemis-mqtt-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/mqtt/MQTTPublishManager.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-protocols/artemis-mqtt-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/mqtt/MQTTPublishManager.java?ref=4d126adedbd3ca255121747b5f52f6441ebc670b",
                "deletions": 1,
                "filename": "artemis-protocols/artemis-mqtt-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/mqtt/MQTTPublishManager.java",
                "patch": "@@ -32,6 +32,7 @@\n import org.apache.activemq.artemis.core.io.IOCallback;\n import org.apache.activemq.artemis.core.server.Queue;\n import org.apache.activemq.artemis.core.server.ServerConsumer;\n+import org.apache.activemq.artemis.core.server.impl.ServerSessionImpl;\n import org.apache.activemq.artemis.core.transaction.Transaction;\n import org.jboss.logging.Logger;\n \n@@ -68,7 +69,10 @@ synchronized void start() throws Exception {\n    }\n \n    synchronized void stop() throws Exception {\n-      session.getServerSession().removeProducer(session.getServerSession().getName());\n+      ServerSessionImpl serversession = session.getServerSession();\n+      if (serversession != null) {\n+         serversession.removeProducer(serversession.getName());\n+      }\n       if (managementConsumer != null) {\n          managementConsumer.removeItself();\n          managementConsumer.setStarted(false);",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/4d126adedbd3ca255121747b5f52f6441ebc670b/artemis-protocols/artemis-mqtt-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/mqtt/MQTTPublishManager.java",
                "sha": "ae0c0edb4d5f96fa46fb8d2a7f5b816f72133990",
                "status": "modified"
            },
            {
                "additions": 76,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/4d126adedbd3ca255121747b5f52f6441ebc670b/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/mqtt/imported/MQTTSecurityTest.java",
                "changes": 76,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/mqtt/imported/MQTTSecurityTest.java?ref=4d126adedbd3ca255121747b5f52f6441ebc670b",
                "deletions": 0,
                "filename": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/mqtt/imported/MQTTSecurityTest.java",
                "patch": "@@ -0,0 +1,76 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.artemis.tests.integration.mqtt.imported;\n+\n+import java.io.EOFException;\n+import java.util.Arrays;\n+\n+import org.apache.activemq.artemis.tests.util.Wait;\n+import org.fusesource.mqtt.client.BlockingConnection;\n+import org.fusesource.mqtt.client.MQTT;\n+import org.jboss.logmanager.Level;\n+import org.jboss.logmanager.Logger;\n+import org.junit.Test;\n+\n+public class MQTTSecurityTest extends MQTTTestSupport {\n+\n+   @Override\n+   public boolean isSecurityEnabled() {\n+      return true;\n+   }\n+\n+   @Test(timeout = 30000)\n+   public void testConnection() throws Exception {\n+      for (String version : Arrays.asList(\"3.1\", \"3.1.1\")) {\n+\n+         BlockingConnection connection = null;\n+         try {\n+            MQTT mqtt = createMQTTConnection(\"test-\" + version, true);\n+            mqtt.setUserName(fullUser);\n+            mqtt.setPassword(fullPass);\n+            mqtt.setConnectAttemptsMax(1);\n+            mqtt.setVersion(version);\n+            connection = mqtt.blockingConnection();\n+            connection.connect();\n+            BlockingConnection finalConnection = connection;\n+            assertTrue(\"Should be connected\", Wait.waitFor(() -> finalConnection.isConnected(), 5000, 100));\n+         } finally {\n+            if (connection != null && connection.isConnected()) connection.disconnect();\n+         }\n+      }\n+   }\n+\n+   @Test(timeout = 30000, expected = EOFException.class)\n+   public void testConnectionWithNullPassword() throws Exception {\n+      for (String version : Arrays.asList(\"3.1\", \"3.1.1\")) {\n+\n+         BlockingConnection connection = null;\n+         try {\n+            MQTT mqtt = createMQTTConnection(\"test-\" + version, true);\n+            mqtt.setUserName(fullUser);\n+            mqtt.setPassword((String) null);\n+            mqtt.setConnectAttemptsMax(1);\n+            mqtt.setVersion(version);\n+            connection = mqtt.blockingConnection();\n+            connection.connect();\n+            fail(\"Connect should fail\");\n+         } finally {\n+            if (connection != null && connection.isConnected()) connection.disconnect();\n+         }\n+      }\n+   }\n+}",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/4d126adedbd3ca255121747b5f52f6441ebc670b/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/mqtt/imported/MQTTSecurityTest.java",
                "sha": "fd608ab44cb7bdaa72d22d0a0596c4f6681f4a53",
                "status": "added"
            },
            {
                "additions": 53,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/4d126adedbd3ca255121747b5f52f6441ebc670b/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/mqtt/imported/MQTTTestSupport.java",
                "changes": 56,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/mqtt/imported/MQTTTestSupport.java?ref=4d126adedbd3ca255121747b5f52f6441ebc670b",
                "deletions": 3,
                "filename": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/mqtt/imported/MQTTTestSupport.java",
                "patch": "@@ -28,9 +28,7 @@\n import java.security.SecureRandom;\n import java.security.cert.CertificateException;\n import java.security.cert.X509Certificate;\n-import java.util.HashMap;\n-import java.util.LinkedList;\n-import java.util.Map;\n+import java.util.*;\n import java.util.concurrent.TimeUnit;\n \n import io.netty.handler.codec.mqtt.MqttMessage;\n@@ -41,10 +39,13 @@\n import org.apache.activemq.artemis.core.config.Configuration;\n import org.apache.activemq.artemis.core.protocol.mqtt.MQTTInterceptor;\n import org.apache.activemq.artemis.core.remoting.impl.netty.TransportConstants;\n+import org.apache.activemq.artemis.core.security.Role;\n import org.apache.activemq.artemis.core.server.ActiveMQServer;\n+import org.apache.activemq.artemis.core.settings.HierarchicalRepository;\n import org.apache.activemq.artemis.core.settings.impl.AddressSettings;\n import org.apache.activemq.artemis.jms.client.ActiveMQConnectionFactory;\n import org.apache.activemq.artemis.spi.core.protocol.RemotingConnection;\n+import org.apache.activemq.artemis.spi.core.security.ActiveMQJAASSecurityManager;\n import org.apache.activemq.artemis.tests.util.ActiveMQTestBase;\n import org.fusesource.mqtt.client.MQTT;\n import org.fusesource.mqtt.client.Tracer;\n@@ -78,6 +79,18 @@\n    public static final int AT_LEAST_ONCE = 1;\n    public static final int EXACTLY_ONCE = 2;\n \n+   protected String noprivUser = \"noprivs\";\n+   protected String noprivPass = \"noprivs\";\n+\n+   protected String browseUser = \"browser\";\n+   protected String browsePass = \"browser\";\n+\n+   protected String guestUser = \"guest\";\n+   protected String guestPass = \"guest\";\n+\n+   protected String fullUser = \"user\";\n+   protected String fullPass = \"pass\";\n+\n    @Rule\n    public TestName name = new TestName();\n \n@@ -139,10 +152,43 @@ public void configureBroker() throws Exception {\n       addressSettings.setMaxSizeBytes(999999999);\n       addressSettings.setAutoCreateQueues(true);\n       addressSettings.setAutoCreateAddresses(true);\n+      configureBrokerSecurity(server);\n \n       server.getAddressSettingsRepository().addMatch(\"#\", addressSettings);\n    }\n \n+   /**\n+    * Copied from org.apache.activemq.artemis.tests.integration.amqp.AmqpClientTestSupport#configureBrokerSecurity()\n+    */\n+   protected void configureBrokerSecurity(ActiveMQServer server) {\n+      if (isSecurityEnabled()) {\n+         ActiveMQJAASSecurityManager securityManager = (ActiveMQJAASSecurityManager) server.getSecurityManager();\n+\n+         // User additions\n+         securityManager.getConfiguration().addUser(noprivUser, noprivPass);\n+         securityManager.getConfiguration().addRole(noprivUser, \"nothing\");\n+         securityManager.getConfiguration().addUser(browseUser, browsePass);\n+         securityManager.getConfiguration().addRole(browseUser, \"browser\");\n+         securityManager.getConfiguration().addUser(guestUser, guestPass);\n+         securityManager.getConfiguration().addRole(guestUser, \"guest\");\n+         securityManager.getConfiguration().addUser(fullUser, fullPass);\n+         securityManager.getConfiguration().addRole(fullUser, \"full\");\n+\n+         // Configure roles\n+         HierarchicalRepository<Set<Role>> securityRepository = server.getSecurityRepository();\n+         HashSet<Role> value = new HashSet<>();\n+         value.add(new Role(\"nothing\", false, false, false, false, false, false, false, false));\n+         value.add(new Role(\"browser\", false, false, false, false, false, false, false, true));\n+         value.add(new Role(\"guest\", false, true, false, false, false, false, false, true));\n+         value.add(new Role(\"full\", true, true, true, true, true, true, true, true));\n+         securityRepository.addMatch(getQueueName(), value);\n+\n+         server.getConfiguration().setSecurityEnabled(true);\n+      } else {\n+         server.getConfiguration().setSecurityEnabled(false);\n+      }\n+   }\n+\n    public void startBroker() throws Exception {\n       configureBroker();\n       server.start();\n@@ -252,6 +298,10 @@ public boolean isSchedulerSupportEnabled() {\n       return false;\n    }\n \n+   public boolean isSecurityEnabled() {\n+      return false;\n+   }\n+\n    protected interface Task {\n \n       void run() throws Exception;",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/4d126adedbd3ca255121747b5f52f6441ebc670b/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/mqtt/imported/MQTTTestSupport.java",
                "sha": "6a22b76a0aadeade1f1c03070bfb8b6561c330ae",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-1398 NPE on null pwd from MQTT client",
        "parent": "https://github.com/apache/activemq-artemis/commit/f29c238bcb98c87d5804454db1c49d968bf01c39",
        "patched_files": [
            "MQTTPublishManager.java",
            "MQTTTestSupport.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "MQTTSecurityTest.java"
        ]
    },
    "activemq-artemis_4d492be": {
        "bug_id": "activemq-artemis_4d492be",
        "commit": "https://github.com/apache/activemq-artemis/commit/4d492bea0ee5fb00dcceca9366375cb87d32fe94",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/4d492bea0ee5fb00dcceca9366375cb87d32fe94/artemis-jms-client/src/main/java/org/apache/activemq/artemis/jms/client/ActiveMQMessage.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-jms-client/src/main/java/org/apache/activemq/artemis/jms/client/ActiveMQMessage.java?ref=4d492bea0ee5fb00dcceca9366375cb87d32fe94",
                "deletions": 1,
                "filename": "artemis-jms-client/src/main/java/org/apache/activemq/artemis/jms/client/ActiveMQMessage.java",
                "patch": "@@ -965,7 +965,7 @@ private boolean handleCoreProperty(final String name,\n       boolean result = false;\n \n       if (jmsPropertyName.equals(name)) {\n-         message.putStringProperty(corePropertyName, value.toString());\n+         message.putStringProperty(corePropertyName, value == null ? null : value.toString());\n \n          result = true;\n       }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/4d492bea0ee5fb00dcceca9366375cb87d32fe94/artemis-jms-client/src/main/java/org/apache/activemq/artemis/jms/client/ActiveMQMessage.java",
                "sha": "18f8000582ca61526b05a96ac78cfa2e0b7e7405",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/4d492bea0ee5fb00dcceca9366375cb87d32fe94/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/jms/client/MessageTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/jms/client/MessageTest.java?ref=4d492bea0ee5fb00dcceca9366375cb87d32fe94",
                "deletions": 0,
                "filename": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/jms/client/MessageTest.java",
                "patch": "@@ -26,6 +26,7 @@\n import javax.jms.StreamMessage;\n \n import org.apache.activemq.artemis.api.jms.ActiveMQJMSClient;\n+import org.apache.activemq.artemis.reader.MessageUtil;\n import org.apache.activemq.artemis.tests.integration.IntegrationTestLogger;\n import org.apache.activemq.artemis.tests.util.JMSTestBase;\n import org.junit.Assert;\n@@ -193,6 +194,10 @@ public void testNullProperties() throws Exception {\n \n       msg.setObjectProperty(MessageTest.propName1, null);\n \n+      msg.setObjectProperty(MessageUtil.JMSXGROUPID, null);\n+\n+      msg.setObjectProperty(MessageUtil.JMSXUSERID, null);\n+\n       msg.setStringProperty(MessageTest.propName2, null);\n \n       msg.getStringProperty(MessageTest.propName1);",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/4d492bea0ee5fb00dcceca9366375cb87d32fe94/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/jms/client/MessageTest.java",
                "sha": "5641bbf4fcf47b0e08c7f9ae476c6541edf97eb5",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-1874 fix NPE setting object property",
        "parent": "https://github.com/apache/activemq-artemis/commit/6e6a76deabb3dab18d959128c92aaecdef7f93f6",
        "patched_files": [
            "Message.java",
            "ActiveMQMessage.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "MessageTest.java",
            "ActiveMQMessageTest.java"
        ]
    },
    "activemq-artemis_5d329a7": {
        "bug_id": "activemq-artemis_5d329a7",
        "commit": "https://github.com/apache/activemq-artemis/commit/5d329a70d197cea551b0e26a55c73d099f5e8093",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/5d329a70d197cea551b0e26a55c73d099f5e8093/artemis-commons/src/main/java/org/apache/activemq/artemis/utils/PasswordMaskingUtil.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-commons/src/main/java/org/apache/activemq/artemis/utils/PasswordMaskingUtil.java?ref=5d329a70d197cea551b0e26a55c73d099f5e8093",
                "deletions": 1,
                "filename": "artemis-commons/src/main/java/org/apache/activemq/artemis/utils/PasswordMaskingUtil.java",
                "patch": "@@ -61,7 +61,7 @@ public static String resolveMask(Boolean maskPassword, String password, String c\n    }\n \n    public static boolean isEncMasked(String password) {\n-      return (password.startsWith(BEGIN_ENC) && password.endsWith(END_ENC));\n+      return password == null ? false : (password.startsWith(BEGIN_ENC) && password.endsWith(END_ENC));\n    }\n \n    //remove ENC() from the password body",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/5d329a70d197cea551b0e26a55c73d099f5e8093/artemis-commons/src/main/java/org/apache/activemq/artemis/utils/PasswordMaskingUtil.java",
                "sha": "796f1d823c9b5ecaacbbdcd9648e2ae39c5df5b0",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/5d329a70d197cea551b0e26a55c73d099f5e8093/examples/features/standard/jmx-ssl/src/main/resources/activemq/server0/management.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/examples/features/standard/jmx-ssl/src/main/resources/activemq/server0/management.xml?ref=5d329a70d197cea551b0e26a55c73d099f5e8093",
                "deletions": 2,
                "filename": "examples/features/standard/jmx-ssl/src/main/resources/activemq/server0/management.xml",
                "patch": "@@ -21,9 +21,9 @@\n          connector-host=\"localhost\"\n          secured=\"true\"\n          key-store-path=\"${data.dir}/../etc/server-side-keystore.jks\"\n-         key-store-password=\"secureexample\"\n+         key-store-password=\"ENC(2a7c211d21c295cdbcde3589c205decb)\"\n          trust-store-path=\"${data.dir}/../etc/server-side-truststore.jks\"\n-         trust-store-password=\"secureexample\"/>\n+         trust-store-password=\"ENC(2a7c211d21c295cdbcde3589c205decb)\"/>\n    <authorisation>\n       <whitelist>\n          <entry domain=\"hawtio\"/>",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/5d329a70d197cea551b0e26a55c73d099f5e8093/examples/features/standard/jmx-ssl/src/main/resources/activemq/server0/management.xml",
                "sha": "dd15e5c218b41c0f3c665879e55722a3f9acb02d",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-2087 fix NPE; mask password in example",
        "parent": "https://github.com/apache/activemq-artemis/commit/7a463f038ae324f2c5c908321b2ebf03b5a8e303",
        "patched_files": [
            "PasswordMaskingUtil.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "PasswordMaskingUtilTest.java"
        ]
    },
    "activemq-artemis_60c586a": {
        "bug_id": "activemq-artemis_60c586a",
        "commit": "https://github.com/apache/activemq-artemis/commit/60c586a64c760414509c8990554e4bfbc5b0845f",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/60c586a64c760414509c8990554e4bfbc5b0845f/artemis-server/src/main/java/org/apache/activemq/artemis/core/postoffice/impl/PostOfficeImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/postoffice/impl/PostOfficeImpl.java?ref=60c586a64c760414509c8990554e4bfbc5b0845f",
                "deletions": 0,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/postoffice/impl/PostOfficeImpl.java",
                "patch": "@@ -512,6 +512,11 @@ public QueueBinding updateQueue(SimpleString name,\n             changed = true;\n             queue.setExclusive(exclusive);\n          }\n+         if (logger.isDebugEnabled()) {\n+            if (user == null && queue.getUser() != null) {\n+               logger.debug(\"Ignoring updating Queue to a NULL user\");\n+            }\n+         }\n          if (user != null && !user.equals(queue.getUser())) {\n             changed = true;\n             queue.setUser(user);",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/60c586a64c760414509c8990554e4bfbc5b0845f/artemis-server/src/main/java/org/apache/activemq/artemis/core/postoffice/impl/PostOfficeImpl.java",
                "sha": "21a75048c566d5668136fb8cf944b31e0346ea12",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/60c586a64c760414509c8990554e4bfbc5b0845f/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/ActiveMQServerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/ActiveMQServerImpl.java?ref=60c586a64c760414509c8990554e4bfbc5b0845f",
                "deletions": 1,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/ActiveMQServerImpl.java",
                "patch": "@@ -2970,7 +2970,7 @@ public Queue updateQueue(String name,\n                             Boolean purgeOnNoConsumers,\n                             Boolean exclusive,\n                             String user) throws Exception {\n-      final QueueBinding queueBinding = this.postOffice.updateQueue(new SimpleString(name), routingType, maxConsumers, purgeOnNoConsumers, exclusive, new SimpleString(user));\n+      final QueueBinding queueBinding = this.postOffice.updateQueue(new SimpleString(name), routingType, maxConsumers, purgeOnNoConsumers, exclusive, SimpleString.toSimpleString(user));\n       if (queueBinding != null) {\n          final Queue queue = queueBinding.getQueue();\n          return queue;",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/60c586a64c760414509c8990554e4bfbc5b0845f/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/ActiveMQServerImpl.java",
                "sha": "9359eccd2f62477d7a4c9cf44f6f696183536530",
                "status": "modified"
            },
            {
                "additions": 70,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/60c586a64c760414509c8990554e4bfbc5b0845f/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/UpdateQueueTest.java",
                "changes": 71,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/UpdateQueueTest.java?ref=60c586a64c760414509c8990554e4bfbc5b0845f",
                "deletions": 1,
                "filename": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/UpdateQueueTest.java",
                "patch": "@@ -21,7 +21,6 @@\n import javax.jms.MessageConsumer;\n import javax.jms.MessageProducer;\n import javax.jms.Session;\n-\n import java.util.EnumSet;\n import java.util.HashMap;\n import java.util.concurrent.atomic.AtomicInteger;\n@@ -39,6 +38,76 @@\n \n public class UpdateQueueTest extends ActiveMQTestBase {\n \n+   @Test\n+   public void testUpdateQueueWithNullUser() throws Exception {\n+      ActiveMQServer server = createServer(true, true);\n+\n+      ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();\n+\n+      server.start();\n+\n+      SimpleString ADDRESS = SimpleString.toSimpleString(\"queue.0\");\n+\n+      final SimpleString user = new SimpleString(\"newUser\");\n+\n+      Queue queue = server.createQueue(ADDRESS, RoutingType.ANYCAST, ADDRESS, user, null, true, false);\n+\n+      long originalID = queue.getID();\n+\n+      Assert.assertEquals(user, queue.getUser());\n+\n+      Connection conn = factory.createConnection();\n+      Session session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+      MessageProducer prod = session.createProducer(session.createQueue(ADDRESS.toString()));\n+\n+      for (int i = 0; i < 100; i++) {\n+         prod.send(session.createTextMessage(\"message \" + i));\n+      }\n+\n+      server.updateQueue(ADDRESS.toString(), RoutingType.ANYCAST, 1, false, false, null);\n+\n+      conn.close();\n+      factory.close();\n+\n+      server.stop();\n+      server.start();\n+\n+      validateBindingRecords(server, JournalRecordIds.QUEUE_BINDING_RECORD, 2);\n+\n+      queue = server.locateQueue(ADDRESS);\n+\n+      Assert.assertNotNull(\"queue not found\", queue);\n+\n+      Assert.assertEquals(\"newUser\", user, queue.getUser());\n+\n+      factory = new ActiveMQConnectionFactory();\n+\n+      conn = factory.createConnection();\n+      session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+\n+      MessageConsumer consumer = session.createConsumer(session.createQueue(ADDRESS.toString()));\n+\n+      conn.start();\n+      for (int i = 0; i < 100; i++) {\n+         Assert.assertNotNull(consumer.receive(5000));\n+      }\n+\n+      Assert.assertNull(consumer.receiveNoWait());\n+\n+      Assert.assertEquals(1, queue.getMaxConsumers());\n+\n+      conn.close();\n+\n+      Assert.assertEquals(originalID, server.locateQueue(ADDRESS).getID());\n+\n+      // stopping, restarting to make sure the system will not create an extra record without an udpate\n+      server.stop();\n+      server.start();\n+      validateBindingRecords(server, JournalRecordIds.QUEUE_BINDING_RECORD, 2);\n+      server.stop();\n+\n+   }\n+\n    @Test\n    public void testUpdateQueue() throws Exception {\n       ActiveMQServer server = createServer(true, true);",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/60c586a64c760414509c8990554e4bfbc5b0845f/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/UpdateQueueTest.java",
                "sha": "60a84a4c27b4885e3f5bc6716cafde9b6fbe2bcb",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-1951 Fix NPE on updateQueue with NULL user",
        "parent": "https://github.com/apache/activemq-artemis/commit/8d789726730d6c77713f8677cdfbc29f6180906e",
        "patched_files": [
            "ActiveMQServerImpl.java",
            "UpdateQueue.java",
            "PostOfficeImpl.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "UpdateQueueTest.java"
        ]
    },
    "activemq-artemis_6315e3f": {
        "bug_id": "activemq-artemis_6315e3f",
        "commit": "https://github.com/apache/activemq-artemis/commit/6315e3faf010c198d173ca406db278b17eab9d29",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/6315e3faf010c198d173ca406db278b17eab9d29/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/openmbean/OpenTypeSupport.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/openmbean/OpenTypeSupport.java?ref=6315e3faf010c198d173ca406db278b17eab9d29",
                "deletions": 6,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/openmbean/OpenTypeSupport.java",
                "patch": "@@ -267,10 +267,14 @@ protected void init() throws OpenDataException {\n       public Map<String, Object> getFields(MessageReference ref) throws OpenDataException {\n          Map<String, Object> rc = super.getFields(ref);\n          ICoreMessage m = ref.getMessage().toCore();\n-         ActiveMQBuffer bodyCopy = m.getReadOnlyBodyBuffer();\n-         byte[] bytes = new byte[bodyCopy.readableBytes()];\n-         bodyCopy.readBytes(bytes);\n-         rc.put(CompositeDataConstants.BODY, bytes);\n+         if (!m.isLargeMessage()) {\n+            ActiveMQBuffer bodyCopy = m.getReadOnlyBodyBuffer();\n+            byte[] bytes = new byte[bodyCopy.readableBytes()];\n+            bodyCopy.readBytes(bytes);\n+            rc.put(CompositeDataConstants.BODY, bytes);\n+         } else {\n+            rc.put(CompositeDataConstants.BODY, new byte[0]);\n+         }\n          return rc;\n       }\n    }\n@@ -288,8 +292,12 @@ protected void init() throws OpenDataException {\n       public Map<String, Object> getFields(MessageReference ref) throws OpenDataException {\n          Map<String, Object> rc = super.getFields(ref);\n          ICoreMessage m = ref.getMessage().toCore();\n-         SimpleString text = m.getReadOnlyBodyBuffer().readNullableSimpleString();\n-         rc.put(CompositeDataConstants.TEXT_BODY, text != null ? text.toString() : \"\");\n+         if (!m.isLargeMessage()) {\n+            SimpleString text = m.getReadOnlyBodyBuffer().readNullableSimpleString();\n+            rc.put(CompositeDataConstants.TEXT_BODY, text != null ? text.toString() : \"\");\n+         } else {\n+            rc.put(CompositeDataConstants.TEXT_BODY, \"\");\n+         }\n          return rc;\n       }\n    }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/6315e3faf010c198d173ca406db278b17eab9d29/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/openmbean/OpenTypeSupport.java",
                "sha": "bcda8c4b9ee12d8b49ed854a50859ff95c4b9e49",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-1505: NPE prevents browsing queue with large messages",
        "parent": "https://github.com/apache/activemq-artemis/commit/92ce07a58427b6cd7efc04fcd0a3b5f1b8f638a5",
        "patched_files": [
            "OpenTypeSupport.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "OpenTypeSupportTest.java"
        ]
    },
    "activemq-artemis_6509c07": {
        "bug_id": "activemq-artemis_6509c07",
        "commit": "https://github.com/apache/activemq-artemis/commit/6509c078fb4e4a60b40a4a44528453541caabb4b",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/6509c078fb4e4a60b40a4a44528453541caabb4b/artemis-commons/src/main/java/org/apache/activemq/artemis/utils/collections/ConcurrentLongHashMap.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-commons/src/main/java/org/apache/activemq/artemis/utils/collections/ConcurrentLongHashMap.java?ref=6509c078fb4e4a60b40a4a44528453541caabb4b",
                "deletions": 2,
                "filename": "artemis-commons/src/main/java/org/apache/activemq/artemis/utils/collections/ConcurrentLongHashMap.java",
                "patch": "@@ -199,7 +199,7 @@ public ConcurrentLongHashSet keysLongHashSet() {\n       private long[] keys;\n       private V[] values;\n \n-      private int capacity;\n+      private volatile int capacity;\n       private volatile int size;\n       private int usedBuckets;\n       private int resizeThreshold;\n@@ -457,10 +457,10 @@ private void rehash() {\n             }\n          }\n \n-         capacity = newCapacity;\n          keys = newKeys;\n          values = newValues;\n          usedBuckets = size;\n+         capacity = newCapacity;\n          resizeThreshold = (int) (capacity * MapFillFactor);\n       }\n ",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/6509c078fb4e4a60b40a4a44528453541caabb4b/artemis-commons/src/main/java/org/apache/activemq/artemis/utils/collections/ConcurrentLongHashMap.java",
                "sha": "34a0e60dc0c520b3eca68fc1bb24183fc09bb38e",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-1664 fix npe bug while getting element in the process of rehash",
        "parent": "https://github.com/apache/activemq-artemis/commit/3ff0dc2e6900a4fea7bc4a484dcfc2b1407f41c0",
        "patched_files": [
            "ConcurrentLongHashMap.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "ConcurrentLongHashMapTest.java"
        ]
    },
    "activemq-artemis_694a509": {
        "bug_id": "activemq-artemis_694a509",
        "commit": "https://github.com/apache/activemq-artemis/commit/694a5092b6a204b6356864ef4282bedc9917eec3",
        "file": [
            {
                "additions": 37,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/694a5092b6a204b6356864ef4282bedc9917eec3/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/QueueControlImpl.java",
                "changes": 68,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/QueueControlImpl.java?ref=694a5092b6a204b6356864ef4282bedc9917eec3",
                "deletions": 31,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/QueueControlImpl.java",
                "patch": "@@ -743,42 +743,48 @@ public String sendMessage(final Map<String, String> headers,\n                              boolean durable,\n                              final String user,\n                              final String password) throws Exception {\n-      securityStore.check(queue.getAddress(), CheckType.SEND, new SecurityAuth() {\n-         @Override\n-         public String getUsername() {\n-            return user;\n-         }\n+      try {\n+         securityStore.check(queue.getAddress(), CheckType.SEND, new SecurityAuth() {\n+            @Override\n+            public String getUsername() {\n+               return user;\n+            }\n \n-         @Override\n-         public String getPassword() {\n-            return password;\n-         }\n+            @Override\n+            public String getPassword() {\n+               return password;\n+            }\n \n-         @Override\n-         public RemotingConnection getRemotingConnection() {\n-            return null;\n+            @Override\n+            public RemotingConnection getRemotingConnection() {\n+               return null;\n+            }\n+         });\n+         CoreMessage message = new CoreMessage(storageManager.generateID(), 50);\n+         if (headers != null) {\n+            for (String header : headers.keySet()) {\n+               message.putStringProperty(new SimpleString(header), new SimpleString(headers.get(header)));\n+            }\n          }\n-      });\n-      CoreMessage message = new CoreMessage(storageManager.generateID(), 50);\n-      for (String header : headers.keySet()) {\n-         message.putStringProperty(new SimpleString(header), new SimpleString(headers.get(header)));\n-      }\n-      message.setType((byte) type);\n-      message.setDurable(durable);\n-      message.setTimestamp(System.currentTimeMillis());\n-      if (body != null) {\n-         if (type == Message.TEXT_TYPE) {\n-            message.getBodyBuffer().writeNullableSimpleString(new SimpleString(body));\n-         } else {\n-            message.getBodyBuffer().writeBytes(Base64.decode(body));\n+         message.setType((byte) type);\n+         message.setDurable(durable);\n+         message.setTimestamp(System.currentTimeMillis());\n+         if (body != null) {\n+            if (type == Message.TEXT_TYPE) {\n+               message.getBodyBuffer().writeNullableSimpleString(new SimpleString(body));\n+            } else {\n+               message.getBodyBuffer().writeBytes(Base64.decode(body));\n+            }\n          }\n+         message.setAddress(queue.getAddress());\n+         ByteBuffer buffer = ByteBuffer.allocate(8);\n+         buffer.putLong(queue.getID());\n+         message.putBytesProperty(Message.HDR_ROUTE_TO_IDS, buffer.array());\n+         postOffice.route(message, true);\n+         return \"\" + message.getMessageID();\n+      } catch (ActiveMQException e) {\n+         throw new IllegalStateException(e.getMessage());\n       }\n-      message.setAddress(queue.getAddress());\n-      ByteBuffer buffer = ByteBuffer.allocate(8);\n-      buffer.putLong(queue.getID());\n-      message.putBytesProperty(Message.HDR_ROUTE_TO_IDS, buffer.array());\n-      postOffice.route(message, true);\n-      return \"\" + message.getMessageID();\n    }\n \n    @Override",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/694a5092b6a204b6356864ef4282bedc9917eec3/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/QueueControlImpl.java",
                "sha": "6ed4f5b3459fb248b4ec15fd5ec302882cd0426e",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/694a5092b6a204b6356864ef4282bedc9917eec3/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/management/QueueControlTest.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/management/QueueControlTest.java?ref=694a5092b6a204b6356864ef4282bedc9917eec3",
                "deletions": 3,
                "filename": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/management/QueueControlTest.java",
                "patch": "@@ -57,6 +57,8 @@\n import org.junit.Before;\n import org.junit.Test;\n \n+import static org.apache.activemq.artemis.core.management.impl.openmbean.CompositeDataConstants.BODY;\n+\n public class QueueControlTest extends ManagementTestBase {\n \n    private ActiveMQServer server;\n@@ -2110,15 +2112,22 @@ public void testSendMessage() throws Exception {\n       QueueControl queueControl = createManagementControl(address, queue);\n \n       queueControl.sendMessage(new HashMap<String, String>(), Message.BYTES_TYPE, Base64.encodeBytes(\"theBody\".getBytes()), true, \"myUser\", \"myPassword\");\n+      queueControl.sendMessage(null, Message.BYTES_TYPE, Base64.encodeBytes(\"theBody\".getBytes()), true, \"myUser\", \"myPassword\");\n \n-      Assert.assertEquals(1, getMessageCount(queueControl));\n+      Assert.assertEquals(2, getMessageCount(queueControl));\n \n       // the message IDs are set on the server\n       CompositeData[] browse = queueControl.browse(null);\n \n-      Assert.assertEquals(1, browse.length);\n+      Assert.assertEquals(2, browse.length);\n+\n+      byte[] body = (byte[]) browse[0].get(BODY);\n+\n+      Assert.assertNotNull(body);\n+\n+      Assert.assertEquals(new String(body), \"theBody\");\n \n-      byte[] body = (byte[]) browse[0].get(\"BodyPreview\");\n+      body = (byte[]) browse[1].get(BODY);\n \n       Assert.assertNotNull(body);\n ",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/694a5092b6a204b6356864ef4282bedc9917eec3/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/management/QueueControlTest.java",
                "sha": "267549f644692672e11815fecba30f7cce5ac2fa",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-1128 QueueControlImpl.sendMessage() fixes\n\nsendMessage() may throw ActiveMQException that causes CNFE\nat the management client. Also it should check if headers\nin the message is null (to prevent NPE).",
        "parent": "https://github.com/apache/activemq-artemis/commit/e078666c0309b1ef911060186f44785257981991",
        "patched_files": [
            "QueueControlImpl.java",
            "QueueControl.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "QueueControlTest.java"
        ]
    },
    "activemq-artemis_6b033b5": {
        "bug_id": "activemq-artemis_6b033b5",
        "commit": "https://github.com/apache/activemq-artemis/commit/6b033b5b8d9e3bf157cd543fc63b0bced0a2aa6c",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/6b033b5b8d9e3bf157cd543fc63b0bced0a2aa6c/artemis-protocols/artemis-stomp-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/stomp/StompSession.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-protocols/artemis-stomp-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/stomp/StompSession.java?ref=6b033b5b8d9e3bf157cd543fc63b0bced0a2aa6c",
                "deletions": 1,
                "filename": "artemis-protocols/artemis-stomp-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/stomp/StompSession.java",
                "patch": "@@ -157,7 +157,7 @@ public int sendMessage(MessageReference ref,\n             buffer = coreMessage.getReadOnlyBodyBuffer();\n          }\n \n-         if (serverMessage.getBooleanProperty(Message.HDR_LARGE_COMPRESSED)) {\n+         if (Boolean.TRUE.equals(serverMessage.getBooleanProperty(Message.HDR_LARGE_COMPRESSED))) {\n             ActiveMQBuffer qbuff = buffer;\n             int bytesToRead = qbuff.readerIndex();\n             Inflater inflater = new Inflater();",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/6b033b5b8d9e3bf157cd543fc63b0bced0a2aa6c/artemis-protocols/artemis-stomp-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/stomp/StompSession.java",
                "sha": "18e0b107f6cd47cc272ba0ca05af6018cbd32912",
                "status": "modified"
            },
            {
                "additions": 97,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/6b033b5b8d9e3bf157cd543fc63b0bced0a2aa6c/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/crossprotocol/AMQPToStompTest.java",
                "changes": 97,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/crossprotocol/AMQPToStompTest.java?ref=6b033b5b8d9e3bf157cd543fc63b0bced0a2aa6c",
                "deletions": 0,
                "filename": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/crossprotocol/AMQPToStompTest.java",
                "patch": "@@ -0,0 +1,97 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.artemis.tests.integration.crossprotocol;\n+\n+import java.net.URI;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.config.Configuration;\n+import org.apache.activemq.artemis.core.server.ActiveMQServer;\n+import org.apache.activemq.artemis.core.settings.impl.AddressSettings;\n+import org.apache.activemq.artemis.tests.integration.stomp.StompTestBase;\n+import org.apache.activemq.artemis.tests.integration.stomp.util.ClientStompFrame;\n+import org.apache.activemq.artemis.tests.integration.stomp.util.StompClientConnection;\n+import org.apache.activemq.artemis.tests.integration.stomp.util.StompClientConnectionFactory;\n+import org.apache.activemq.artemis.tests.util.ActiveMQTestBase;\n+import org.apache.activemq.transport.amqp.client.AmqpClient;\n+import org.apache.activemq.transport.amqp.client.AmqpConnection;\n+import org.apache.activemq.transport.amqp.client.AmqpMessage;\n+import org.apache.activemq.transport.amqp.client.AmqpSender;\n+import org.apache.activemq.transport.amqp.client.AmqpSession;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class AMQPToStompTest extends ActiveMQTestBase {\n+\n+   private ActiveMQServer server;\n+   protected String queueName = \"amqpToStompTestQueue1\";\n+   private SimpleString coreQueue;\n+\n+   @Override\n+   @Before\n+   public void setUp() throws Exception {\n+      super.setUp();\n+      server = createServer(true, true);\n+      server.start();\n+      server.waitForActivation(10, TimeUnit.SECONDS);\n+\n+      Configuration serverConfig = server.getConfiguration();\n+      serverConfig.getAddressesSettings().put(\"#\", new AddressSettings().setAutoCreateQueues(false)\n+                                                                        .setAutoCreateAddresses(false)\n+                                                                        .setDeadLetterAddress(new SimpleString(\"ActiveMQ.DLQ\")));\n+      serverConfig.setSecurityEnabled(false);\n+      coreQueue = new SimpleString(queueName);\n+      server.createQueue(coreQueue, RoutingType.ANYCAST, coreQueue, null, false, false);\n+   }\n+\n+   @Override\n+   @After\n+   public void tearDown() throws Exception {\n+      server.stop();\n+      super.tearDown();\n+   }\n+\n+   @Test\n+   public void testSendAmqpReceiveStomp() throws Exception {\n+      AmqpClient client = new AmqpClient(new URI(\"tcp://127.0.0.1:61616\"), null, null);\n+      AmqpConnection amqpconnection = client.connect();\n+      try {\n+         AmqpSession session = amqpconnection.createSession();\n+         AmqpSender sender = session.createSender(queueName);\n+         AmqpMessage message = new AmqpMessage();\n+         message.setText(\"mine\");\n+         sender.send(message);\n+      } finally {\n+         amqpconnection.close();\n+      }\n+\n+      StompClientConnection conn = StompClientConnectionFactory.createClientConnection(new URI(\"tcp://127.0.0.1:61616\"));\n+      conn.connect(null, null);\n+      try {\n+         StompTestBase.subscribeQueue(conn, null, queueName);\n+         ClientStompFrame frame = conn.receiveFrame();\n+         assertNotNull(frame);\n+         assertNotNull(frame.getBody());\n+         assertTrue(frame.getBody().contains(\"mine\"));\n+      } finally {\n+         conn.closeTransport();\n+      }\n+   }\n+}",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/6b033b5b8d9e3bf157cd543fc63b0bced0a2aa6c/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/crossprotocol/AMQPToStompTest.java",
                "sha": "739750e4442428616058a16eb909e1a8284724c5",
                "status": "added"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/6b033b5b8d9e3bf157cd543fc63b0bced0a2aa6c/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/stomp/StompTestBase.java",
                "changes": 60,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/stomp/StompTestBase.java?ref=6b033b5b8d9e3bf157cd543fc63b0bced0a2aa6c",
                "deletions": 30,
                "filename": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/stomp/StompTestBase.java",
                "patch": "@@ -219,19 +219,19 @@ protected ConnectionFactory createConnectionFactory() {\n       return new ActiveMQJMSConnectionFactory(false, new TransportConfiguration(InVMConnectorFactory.class.getName()));\n    }\n \n-   protected String getQueueName() {\n+   protected static String getQueueName() {\n       return \"testQueue\";\n    }\n \n-   protected String getQueuePrefix() {\n+   protected static String getQueuePrefix() {\n       return \"\";\n    }\n \n-   protected String getTopicName() {\n+   protected static String getTopicName() {\n       return \"testtopic\";\n    }\n \n-   protected String getTopicPrefix() {\n+   protected static String getTopicPrefix() {\n       return \"\";\n    }\n \n@@ -264,25 +264,25 @@ public void sendJmsMessage(byte[] data,\n       producer.send(message);\n    }\n \n-   public void abortTransaction(StompClientConnection conn, String txID) throws IOException, InterruptedException {\n+   public static void abortTransaction(StompClientConnection conn, String txID) throws IOException, InterruptedException {\n       ClientStompFrame abortFrame = conn.createFrame(Stomp.Commands.ABORT)\n                                         .addHeader(Stomp.Headers.TRANSACTION, txID);\n \n       conn.sendFrame(abortFrame);\n    }\n \n-   public void beginTransaction(StompClientConnection conn, String txID) throws IOException, InterruptedException {\n+   public static void beginTransaction(StompClientConnection conn, String txID) throws IOException, InterruptedException {\n       ClientStompFrame beginFrame = conn.createFrame(Stomp.Commands.BEGIN)\n                                         .addHeader(Stomp.Headers.TRANSACTION, txID);\n \n       conn.sendFrame(beginFrame);\n    }\n \n-   public void commitTransaction(StompClientConnection conn, String txID) throws IOException, InterruptedException {\n+   public static void commitTransaction(StompClientConnection conn, String txID) throws IOException, InterruptedException {\n       commitTransaction(conn, txID, false);\n    }\n \n-   public void commitTransaction(StompClientConnection conn,\n+   public static void commitTransaction(StompClientConnection conn,\n                                  String txID,\n                                  boolean receipt) throws IOException, InterruptedException {\n       ClientStompFrame beginFrame = conn.createFrame(Stomp.Commands.COMMIT)\n@@ -297,7 +297,7 @@ public void commitTransaction(StompClientConnection conn,\n       }\n    }\n \n-   public void ack(StompClientConnection conn,\n+   public static void ack(StompClientConnection conn,\n                    String subscriptionId,\n                    ClientStompFrame messageIdFrame) throws IOException, InterruptedException {\n       String messageID = messageIdFrame.getHeader(Stomp.Headers.Message.MESSAGE_ID);\n@@ -315,7 +315,7 @@ public void ack(StompClientConnection conn,\n       }\n    }\n \n-   public void ack(StompClientConnection conn,\n+   public static void ack(StompClientConnection conn,\n                    String subscriptionId,\n                    String mid,\n                    String txID) throws IOException, InterruptedException {\n@@ -329,49 +329,49 @@ public void ack(StompClientConnection conn,\n       conn.sendFrame(frame);\n    }\n \n-   public void nack(StompClientConnection conn, String subscriptionId, String messageId) throws IOException, InterruptedException {\n+   public static void nack(StompClientConnection conn, String subscriptionId, String messageId) throws IOException, InterruptedException {\n       ClientStompFrame frame = conn.createFrame(Stomp.Commands.NACK)\n                                       .addHeader(Stomp.Headers.Ack.SUBSCRIPTION, subscriptionId)\n                                       .addHeader(Stomp.Headers.Message.MESSAGE_ID, messageId);\n \n       conn.sendFrame(frame);\n    }\n \n-   public ClientStompFrame subscribe(StompClientConnection conn,\n+   public static ClientStompFrame subscribe(StompClientConnection conn,\n                                      String subscriptionId) throws IOException, InterruptedException {\n       return subscribe(conn, subscriptionId, Stomp.Headers.Subscribe.AckModeValues.AUTO);\n    }\n \n-   public ClientStompFrame subscribe(StompClientConnection conn,\n+   public static ClientStompFrame subscribe(StompClientConnection conn,\n                                      String subscriptionId,\n                                      String ack) throws IOException, InterruptedException {\n       return subscribe(conn, subscriptionId, ack, null);\n    }\n \n-   public ClientStompFrame subscribe(StompClientConnection conn,\n+   public static ClientStompFrame subscribe(StompClientConnection conn,\n                                      String subscriptionId,\n                                      String ack,\n                                      String durableId) throws IOException, InterruptedException {\n       return subscribe(conn, subscriptionId, ack, durableId, true);\n    }\n \n-   public ClientStompFrame subscribe(StompClientConnection conn,\n+   public static ClientStompFrame subscribe(StompClientConnection conn,\n                                      String subscriptionId,\n                                      String ack,\n                                      String durableId,\n                                      boolean receipt) throws IOException, InterruptedException {\n       return subscribe(conn, subscriptionId, ack, durableId, null, receipt);\n    }\n \n-   public ClientStompFrame subscribe(StompClientConnection conn,\n+   public static ClientStompFrame subscribe(StompClientConnection conn,\n                                      String subscriptionId,\n                                      String ack,\n                                      String durableId,\n                                      String selector) throws IOException, InterruptedException {\n       return subscribe(conn, subscriptionId, ack, durableId, selector, true);\n    }\n \n-   public ClientStompFrame subscribe(StompClientConnection conn,\n+   public static ClientStompFrame subscribe(StompClientConnection conn,\n                                      String subscriptionId,\n                                      String ack,\n                                      String durableId,\n@@ -380,11 +380,11 @@ public ClientStompFrame subscribe(StompClientConnection conn,\n       return subscribe(conn, subscriptionId, ack, durableId, selector, getQueuePrefix() + getQueueName(), receipt);\n    }\n \n-   public ClientStompFrame subscribeQueue(StompClientConnection conn, String subId, String destination) throws IOException, InterruptedException {\n+   public static ClientStompFrame subscribeQueue(StompClientConnection conn, String subId, String destination) throws IOException, InterruptedException {\n       return subscribe(conn, subId, Stomp.Headers.Subscribe.AckModeValues.AUTO, null, null, destination, true);\n    }\n \n-   public ClientStompFrame subscribe(StompClientConnection conn,\n+   public static ClientStompFrame subscribe(StompClientConnection conn,\n                                      String subscriptionId,\n                                      String ack,\n                                      String durableId,\n@@ -426,22 +426,22 @@ public ClientStompFrame subscribe(StompClientConnection conn,\n       return frame;\n    }\n \n-   public ClientStompFrame subscribeTopic(StompClientConnection conn,\n+   public static ClientStompFrame subscribeTopic(StompClientConnection conn,\n                                           String subscriptionId,\n                                           String ack,\n                                           String durableId) throws IOException, InterruptedException {\n       return subscribeTopic(conn, subscriptionId, ack, durableId, true);\n    }\n \n-   public ClientStompFrame subscribeTopic(StompClientConnection conn,\n+   public static ClientStompFrame subscribeTopic(StompClientConnection conn,\n                                           String subscriptionId,\n                                           String ack,\n                                           String durableId,\n                                           boolean receipt) throws IOException, InterruptedException {\n       return subscribeTopic(conn, subscriptionId, ack, durableId, receipt, false);\n    }\n \n-   public ClientStompFrame subscribeTopic(StompClientConnection conn,\n+   public static ClientStompFrame subscribeTopic(StompClientConnection conn,\n                                           String subscriptionId,\n                                           String ack,\n                                           String durableId,\n@@ -481,17 +481,17 @@ public ClientStompFrame subscribeTopic(StompClientConnection conn,\n       return frame;\n    }\n \n-   public ClientStompFrame unsubscribe(StompClientConnection conn, String subscriptionId) throws IOException, InterruptedException {\n+   public static ClientStompFrame unsubscribe(StompClientConnection conn, String subscriptionId) throws IOException, InterruptedException {\n       return unsubscribe(conn, subscriptionId, null, false, false);\n    }\n \n-   public ClientStompFrame unsubscribe(StompClientConnection conn,\n+   public static ClientStompFrame unsubscribe(StompClientConnection conn,\n                                        String subscriptionId,\n                                        boolean receipt) throws IOException, InterruptedException {\n       return unsubscribe(conn, subscriptionId, null, receipt, false);\n    }\n \n-   public ClientStompFrame unsubscribe(StompClientConnection conn,\n+   public static ClientStompFrame unsubscribe(StompClientConnection conn,\n                                        String subscriptionId,\n                                        String destination,\n                                        boolean receipt,\n@@ -523,19 +523,19 @@ public ClientStompFrame unsubscribe(StompClientConnection conn,\n       return frame;\n    }\n \n-   public ClientStompFrame send(StompClientConnection conn, String destination, String contentType, String body) throws IOException, InterruptedException {\n+   public static ClientStompFrame send(StompClientConnection conn, String destination, String contentType, String body) throws IOException, InterruptedException {\n       return send(conn, destination, contentType, body, false);\n    }\n \n-   public ClientStompFrame send(StompClientConnection conn, String destination, String contentType, String body, boolean receipt) throws IOException, InterruptedException {\n+   public static ClientStompFrame send(StompClientConnection conn, String destination, String contentType, String body, boolean receipt) throws IOException, InterruptedException {\n       return send(conn, destination, contentType, body, receipt, null);\n    }\n \n-   public ClientStompFrame send(StompClientConnection conn, String destination, String contentType, String body, boolean receipt, RoutingType destinationType) throws IOException, InterruptedException {\n+   public static ClientStompFrame send(StompClientConnection conn, String destination, String contentType, String body, boolean receipt, RoutingType destinationType) throws IOException, InterruptedException {\n       return send(conn, destination, contentType, body, receipt, destinationType, null);\n    }\n \n-   public ClientStompFrame send(StompClientConnection conn, String destination, String contentType, String body, boolean receipt, RoutingType destinationType, String txId) throws IOException, InterruptedException {\n+   public static ClientStompFrame send(StompClientConnection conn, String destination, String contentType, String body, boolean receipt, RoutingType destinationType, String txId) throws IOException, InterruptedException {\n       ClientStompFrame frame = conn.createFrame(Stomp.Commands.SEND)\n                                    .addHeader(Stomp.Headers.Send.DESTINATION, destination)\n                                    .setBody(body);\n@@ -573,7 +573,7 @@ public ClientStompFrame send(StompClientConnection conn, String destination, Str\n       return frame;\n    }\n \n-   public URI createStompClientUri(String scheme, String hostname, int port) throws URISyntaxException {\n+   public static URI createStompClientUri(String scheme, String hostname, int port) throws URISyntaxException {\n       return new URI(scheme + \"://\" + hostname + \":\" + port);\n    }\n }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/6b033b5b8d9e3bf157cd543fc63b0bced0a2aa6c/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/stomp/StompTestBase.java",
                "sha": "ec166dd388227d896a9df1fbe6de4e2204090bd4",
                "status": "modified"
            },
            {
                "additions": 49,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/6b033b5b8d9e3bf157cd543fc63b0bced0a2aa6c/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/stomp/v11/StompV11Test.java",
                "changes": 98,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/stomp/v11/StompV11Test.java?ref=6b033b5b8d9e3bf157cd543fc63b0bced0a2aa6c",
                "deletions": 49,
                "filename": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/stomp/v11/StompV11Test.java",
                "patch": "@@ -1153,7 +1153,7 @@ public void testAckModeClient() throws Exception {\n       }\n \n       //ack the last\n-      this.ack(conn, \"sub1\", frame);\n+      ack(conn, \"sub1\", frame);\n \n       unsubscribe(conn, \"sub1\");\n \n@@ -1186,7 +1186,7 @@ public void testAckModeClient2() throws Exception {\n \n          //ack the 49th\n          if (i == num - 2) {\n-            this.ack(conn, \"sub1\", frame);\n+            ack(conn, \"sub1\", frame);\n          }\n       }\n \n@@ -1252,7 +1252,7 @@ public void testAckModeClientIndividual() throws Exception {\n          IntegrationTestLogger.LOGGER.info(i + \" == received: \" + frame);\n          //ack on even numbers\n          if (i % 2 == 0) {\n-            this.ack(conn, \"sub1\", frame);\n+            ack(conn, \"sub1\", frame);\n          }\n       }\n \n@@ -1279,12 +1279,12 @@ public void testAckModeClientIndividual() throws Exception {\n    public void testTwoSubscribers() throws Exception {\n       conn.connect(defUser, defPass, CLIENT_ID);\n \n-      this.subscribeTopic(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO, null);\n+      subscribeTopic(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO, null);\n \n       StompClientConnection newConn = StompClientConnectionFactory.createClientConnection(uri);\n       newConn.connect(defUser, defPass, \"myclientid2\");\n \n-      this.subscribeTopic(newConn, \"sub2\", Stomp.Headers.Subscribe.AckModeValues.AUTO, null);\n+      subscribeTopic(newConn, \"sub2\", Stomp.Headers.Subscribe.AckModeValues.AUTO, null);\n \n       send(newConn, getTopicPrefix() + getTopicName(), null, \"Hello World\");\n \n@@ -1302,8 +1302,8 @@ public void testTwoSubscribers() throws Exception {\n       assertEquals(\"sub2\", frame.getHeader(Stomp.Headers.Message.SUBSCRIPTION));\n \n       // remove suscription\n-      this.unsubscribe(conn, \"sub1\", true);\n-      this.unsubscribe(newConn, \"sub2\", true);\n+      unsubscribe(conn, \"sub1\", true);\n+      unsubscribe(newConn, \"sub2\", true);\n \n       conn.disconnect();\n       newConn.disconnect();\n@@ -1318,7 +1318,7 @@ public void testSendAndReceiveOnDifferentConnections() throws Exception {\n       StompClientConnection connV11_2 = StompClientConnectionFactory.createClientConnection(uri);\n       connV11_2.connect(defUser, defPass);\n \n-      this.subscribe(connV11_2, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n+      subscribe(connV11_2, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n \n       ClientStompFrame frame = connV11_2.receiveFrame(2000);\n \n@@ -1347,7 +1347,7 @@ public void testBeginSameTransactionTwice() throws Exception {\n    public void testBodyWithUTF8() throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, getName(), Stomp.Headers.Subscribe.AckModeValues.AUTO);\n+      subscribe(conn, getName(), Stomp.Headers.Subscribe.AckModeValues.AUTO);\n \n       String text = \"A\" + \"\\u00ea\" + \"\\u00f1\" + \"\\u00fc\" + \"C\";\n       IntegrationTestLogger.LOGGER.info(text);\n@@ -1366,7 +1366,7 @@ public void testBodyWithUTF8() throws Exception {\n    public void testClientAckNotPartOfTransaction() throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, getName(), Stomp.Headers.Subscribe.AckModeValues.CLIENT);\n+      subscribe(conn, getName(), Stomp.Headers.Subscribe.AckModeValues.CLIENT);\n \n       sendJmsMessage(getName());\n \n@@ -1381,15 +1381,15 @@ public void testClientAckNotPartOfTransaction() throws Exception {\n \n       beginTransaction(conn, \"tx1\");\n \n-      this.ack(conn, getName(), messageID, \"tx1\");\n+      ack(conn, getName(), messageID, \"tx1\");\n \n       abortTransaction(conn, \"tx1\");\n \n       frame = conn.receiveFrame(500);\n \n       assertNull(frame);\n \n-      this.unsubscribe(conn, getName());\n+      unsubscribe(conn, getName());\n \n       conn.disconnect();\n    }\n@@ -1398,7 +1398,7 @@ public void testClientAckNotPartOfTransaction() throws Exception {\n    public void testDisconnectAndError() throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, getName(), Stomp.Headers.Subscribe.AckModeValues.CLIENT);\n+      subscribe(conn, getName(), Stomp.Headers.Subscribe.AckModeValues.CLIENT);\n \n       String uuid = UUID.randomUUID().toString();\n \n@@ -1453,9 +1453,9 @@ public void run() {\n    public void testDurableSubscriber() throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.CLIENT, getName());\n+      subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.CLIENT, getName());\n \n-      this.subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.CLIENT, getName(), false);\n+      subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.CLIENT, getName(), false);\n       ClientStompFrame frame = conn.receiveFrame();\n \n       Assert.assertTrue(frame.getCommand().equals(Stomp.Responses.ERROR));\n@@ -1467,7 +1467,7 @@ public void testDurableSubscriber() throws Exception {\n    public void testDurableSubscriberWithReconnection() throws Exception {\n       conn.connect(defUser, defPass, CLIENT_ID);\n \n-      this.subscribeTopic(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO, getName());\n+      subscribeTopic(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO, getName());\n \n       String uuid = UUID.randomUUID().toString();\n \n@@ -1487,7 +1487,7 @@ public void testDurableSubscriberWithReconnection() throws Exception {\n       conn = StompClientConnectionFactory.createClientConnection(uri);\n       conn.connect(defUser, defPass, CLIENT_ID);\n \n-      this.subscribeTopic(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO, getName());\n+      subscribeTopic(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO, getName());\n \n       // we must have received the message\n       frame = conn.receiveFrame();\n@@ -1496,7 +1496,7 @@ public void testDurableSubscriberWithReconnection() throws Exception {\n       Assert.assertNotNull(frame.getHeader(Stomp.Headers.Message.DESTINATION));\n       Assert.assertEquals(getName(), frame.getBody());\n \n-      this.unsubscribe(conn, \"sub1\");\n+      unsubscribe(conn, \"sub1\");\n \n       conn.disconnect();\n    }\n@@ -1505,14 +1505,14 @@ public void testDurableSubscriberWithReconnection() throws Exception {\n    public void testDurableUnSubscribe() throws Exception {\n       conn.connect(defUser, defPass, CLIENT_ID);\n \n-      this.subscribeTopic(conn, null, Stomp.Headers.Subscribe.AckModeValues.AUTO, getName());\n+      subscribeTopic(conn, null, Stomp.Headers.Subscribe.AckModeValues.AUTO, getName());\n \n       conn.disconnect();\n       conn.destroy();\n       conn = StompClientConnectionFactory.createClientConnection(uri);\n       conn.connect(defUser, defPass, CLIENT_ID);\n \n-      this.unsubscribe(conn, getName(), null, false, true);\n+      unsubscribe(conn, getName(), null, false, true);\n \n       long start = System.currentTimeMillis();\n       SimpleString queueName = SimpleString.toSimpleString(CLIENT_ID + \".\" + getName());\n@@ -1552,7 +1552,7 @@ public void testMessagesAreInOrder() throws Exception {\n \n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n+      subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n \n       for (int i = 0; i < ctr; ++i) {\n          data[i] = getName() + i;\n@@ -1583,7 +1583,7 @@ public void testMessagesAreInOrder() throws Exception {\n    public void testSubscribeWithAutoAckAndSelector() throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO, null, \"foo = 'zzz'\");\n+      subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO, null, \"foo = 'zzz'\");\n \n       sendJmsMessage(\"Ignored message\", \"foo\", \"1234\");\n       sendJmsMessage(\"Real message\", \"foo\", \"zzz\");\n@@ -1599,7 +1599,7 @@ public void testSubscribeWithAutoAckAndSelector() throws Exception {\n    public void testRedeliveryWithClientAck() throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, \"subscriptionId\", Stomp.Headers.Subscribe.AckModeValues.CLIENT);\n+      subscribe(conn, \"subscriptionId\", Stomp.Headers.Subscribe.AckModeValues.CLIENT);\n \n       sendJmsMessage(getName());\n \n@@ -1834,7 +1834,7 @@ public void testSendMessageWithLongHeaders() throws Exception {\n    public void testSubscribeToTopic() throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribeTopic(conn, \"sub1\", null, null, true);\n+      subscribeTopic(conn, \"sub1\", null, null, true);\n \n       sendJmsMessage(getName(), topic);\n \n@@ -1844,7 +1844,7 @@ public void testSubscribeToTopic() throws Exception {\n       Assert.assertTrue(frame.getHeader(Stomp.Headers.Message.DESTINATION).equals(getTopicPrefix() + getTopicName()));\n       Assert.assertTrue(frame.getBody().equals(getName()));\n \n-      this.unsubscribe(conn, \"sub1\", true);\n+      unsubscribe(conn, \"sub1\", true);\n \n       sendJmsMessage(getName(), topic);\n \n@@ -1858,7 +1858,7 @@ public void testSubscribeToTopic() throws Exception {\n    public void testSubscribeToTopicWithNoLocal() throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribeTopic(conn, \"sub1\", null, null, true, true);\n+      subscribeTopic(conn, \"sub1\", null, null, true, true);\n \n       send(conn, getTopicPrefix() + getTopicName(), null, \"Hello World\");\n \n@@ -1875,7 +1875,7 @@ public void testSubscribeToTopicWithNoLocal() throws Exception {\n       Assert.assertTrue(frame.getHeader(Stomp.Headers.Message.DESTINATION).equals(getTopicPrefix() + getTopicName()));\n       Assert.assertTrue(frame.getBody().equals(getName()));\n \n-      this.unsubscribe(conn, \"sub1\");\n+      unsubscribe(conn, \"sub1\");\n \n       conn.disconnect();\n    }\n@@ -1884,7 +1884,7 @@ public void testSubscribeToTopicWithNoLocal() throws Exception {\n    public void testSubscribeWithAutoAck() throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n+      subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n \n       sendJmsMessage(getName());\n \n@@ -1906,7 +1906,7 @@ public void testSubscribeWithAutoAck() throws Exception {\n    public void testSubscribeWithAutoAckAndBytesMessage() throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n+      subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n \n       byte[] payload = new byte[]{1, 2, 3, 4, 5};\n       sendJmsMessage(payload, queue);\n@@ -1930,15 +1930,15 @@ public void testSubscribeWithAutoAckAndBytesMessage() throws Exception {\n    public void testSubscribeWithClientAck() throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.CLIENT);\n+      subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.CLIENT);\n \n       sendJmsMessage(getName());\n \n       ClientStompFrame frame = conn.receiveFrame();\n \n       assertEquals(getName().length(), Integer.parseInt(frame.getHeader(Stomp.Headers.CONTENT_LENGTH)));\n \n-      this.ack(conn, \"sub1\", frame);\n+      ack(conn, \"sub1\", frame);\n \n       conn.disconnect();\n \n@@ -1962,7 +1962,7 @@ public void testSubscribeWithClientAckThenConsumingAgainWithAutoAckWithNoDisconn\n    public void testSubscribeWithID() throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, \"mysubid\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n+      subscribe(conn, \"mysubid\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n \n       sendJmsMessage(getName());\n \n@@ -1977,7 +1977,7 @@ public void testSubscribeWithID() throws Exception {\n    public void testSubscribeWithMessageSentWithProperties() throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n+      subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n \n       MessageProducer producer = session.createProducer(queue);\n       BytesMessage message = session.createBytesMessage();\n@@ -2015,7 +2015,7 @@ public void testSuccessiveTransactionsWithSameID() throws Exception {\n       conn.connect(defUser, defPass);\n \n       // first tx\n-      this.beginTransaction(conn, \"tx1\");\n+      beginTransaction(conn, \"tx1\");\n \n       ClientStompFrame frame = conn.createFrame(Stomp.Commands.SEND)\n                                    .addHeader(Stomp.Headers.Send.DESTINATION, getQueuePrefix() + getQueueName())\n@@ -2024,13 +2024,13 @@ public void testSuccessiveTransactionsWithSameID() throws Exception {\n \n       conn.sendFrame(frame);\n \n-      this.commitTransaction(conn, \"tx1\");\n+      commitTransaction(conn, \"tx1\");\n \n       Message message = consumer.receive(1000);\n       Assert.assertNotNull(\"Should have received a message\", message);\n \n       // 2nd tx with same tx ID\n-      this.beginTransaction(conn, \"tx1\");\n+      beginTransaction(conn, \"tx1\");\n \n       frame = conn.createFrame(Stomp.Commands.SEND)\n                   .addHeader(Stomp.Headers.Send.DESTINATION, getQueuePrefix() + getQueueName())\n@@ -2039,7 +2039,7 @@ public void testSuccessiveTransactionsWithSameID() throws Exception {\n \n       conn.sendFrame(frame);\n \n-      this.commitTransaction(conn, \"tx1\");\n+      commitTransaction(conn, \"tx1\");\n \n       message = consumer.receive(1000);\n       Assert.assertNotNull(\"Should have received a message\", message);\n@@ -2053,7 +2053,7 @@ public void testTransactionCommit() throws Exception {\n \n       conn.connect(defUser, defPass);\n \n-      this.beginTransaction(conn, \"tx1\");\n+      beginTransaction(conn, \"tx1\");\n \n       ClientStompFrame frame = conn.createFrame(Stomp.Commands.SEND)\n                                    .addHeader(Stomp.Headers.Send.DESTINATION, getQueuePrefix() + getQueueName())\n@@ -2068,7 +2068,7 @@ public void testTransactionCommit() throws Exception {\n       // check the message is not committed\n       assertNull(consumer.receive(100));\n \n-      this.commitTransaction(conn, \"tx1\", true);\n+      commitTransaction(conn, \"tx1\", true);\n \n       Message message = consumer.receive(1000);\n       Assert.assertNotNull(\"Should have received a message\", message);\n@@ -2082,7 +2082,7 @@ public void testTransactionRollback() throws Exception {\n \n       conn.connect(defUser, defPass);\n \n-      this.beginTransaction(conn, \"tx1\");\n+      beginTransaction(conn, \"tx1\");\n \n       ClientStompFrame frame = conn.createFrame(Stomp.Commands.SEND)\n                                    .addHeader(Stomp.Headers.Send.DESTINATION, getQueuePrefix() + getQueueName())\n@@ -2092,9 +2092,9 @@ public void testTransactionRollback() throws Exception {\n       conn.sendFrame(frame);\n \n       // rollback first message\n-      this.abortTransaction(conn, \"tx1\");\n+      abortTransaction(conn, \"tx1\");\n \n-      this.beginTransaction(conn, \"tx1\");\n+      beginTransaction(conn, \"tx1\");\n \n       frame = conn.createFrame(Stomp.Commands.SEND)\n                   .addHeader(Stomp.Headers.Send.DESTINATION, getQueuePrefix() + getQueueName())\n@@ -2103,7 +2103,7 @@ public void testTransactionRollback() throws Exception {\n \n       conn.sendFrame(frame);\n \n-      this.commitTransaction(conn, \"tx1\", true);\n+      commitTransaction(conn, \"tx1\", true);\n \n       // only second msg should be received since first msg was rolled back\n       TextMessage message = (TextMessage) consumer.receive(1000);\n@@ -2117,7 +2117,7 @@ public void testTransactionRollback() throws Exception {\n    public void testUnsubscribe() throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n+      subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n \n       // send a message to our queue\n       sendJmsMessage(\"first message\");\n@@ -2128,7 +2128,7 @@ public void testUnsubscribe() throws Exception {\n       Assert.assertTrue(frame.getCommand().equals(Stomp.Responses.MESSAGE));\n \n       // remove suscription\n-      this.unsubscribe(conn, \"sub1\", true);\n+      unsubscribe(conn, \"sub1\", true);\n \n       // send a message to our queue\n       sendJmsMessage(\"second message\");\n@@ -2185,7 +2185,7 @@ public void testHeartBeat3() throws Exception {\n    protected void assertSubscribeWithClientAckThenConsumeWithAutoAck(boolean sendDisconnect) throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.CLIENT);\n+      subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.CLIENT);\n \n       sendJmsMessage(getName());\n \n@@ -2206,7 +2206,7 @@ protected void assertSubscribeWithClientAckThenConsumeWithAutoAck(boolean sendDi\n       // message should be received since message was not acknowledged\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, \"sub1\", null);\n+      subscribe(conn, \"sub1\", null);\n \n       frame = conn.receiveFrame();\n       Assert.assertTrue(frame.getCommand().equals(Stomp.Responses.MESSAGE));\n@@ -2218,7 +2218,7 @@ protected void assertSubscribeWithClientAckThenConsumeWithAutoAck(boolean sendDi\n       conn = StompClientConnectionFactory.createClientConnection(uri);\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, \"sub1\", null, null, true);\n+      subscribe(conn, \"sub1\", null, null, true);\n \n       sendJmsMessage(\"shouldBeNextMessage\");\n \n@@ -2273,7 +2273,7 @@ public void testReceiveContentType() throws Exception {\n    public void testSendContentType() throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n+      subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n \n       MessageProducer producer = session.createProducer(queue);\n       BytesMessage message = session.createBytesMessage();",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/6b033b5b8d9e3bf157cd543fc63b0bced0a2aa6c/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/stomp/v11/StompV11Test.java",
                "sha": "99ad1fba3ad913d8a06104ca140826f7ec686daa",
                "status": "modified"
            },
            {
                "additions": 46,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/6b033b5b8d9e3bf157cd543fc63b0bced0a2aa6c/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/stomp/v12/StompV12Test.java",
                "changes": 92,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/stomp/v12/StompV12Test.java?ref=6b033b5b8d9e3bf157cd543fc63b0bced0a2aa6c",
                "deletions": 46,
                "filename": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/stomp/v12/StompV12Test.java",
                "patch": "@@ -1268,12 +1268,12 @@ public void testAckModeClientIndividual() throws Exception {\n    public void testTwoSubscribers() throws Exception {\n       conn.connect(defUser, defPass, CLIENT_ID);\n \n-      this.subscribeTopic(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO, null);\n+      subscribeTopic(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO, null);\n \n       StompClientConnection newConn = StompClientConnectionFactory.createClientConnection(v11Uri);\n       newConn.connect(defUser, defPass, \"myclientid2\");\n \n-      this.subscribeTopic(newConn, \"sub2\", Stomp.Headers.Subscribe.AckModeValues.AUTO, null);\n+      subscribeTopic(newConn, \"sub2\", Stomp.Headers.Subscribe.AckModeValues.AUTO, null);\n \n       send(conn, getTopicPrefix() + getTopicName(), null, \"Hello World\");\n \n@@ -1291,8 +1291,8 @@ public void testTwoSubscribers() throws Exception {\n       Assert.assertEquals(\"sub2\", frame.getHeader(Stomp.Headers.Message.SUBSCRIPTION));\n \n       // remove suscription\n-      this.unsubscribe(conn, \"sub1\", true);\n-      this.unsubscribe(newConn, \"sub2\", true);\n+      unsubscribe(conn, \"sub1\", true);\n+      unsubscribe(newConn, \"sub2\", true);\n \n       conn.disconnect();\n       newConn.disconnect();\n@@ -1307,7 +1307,7 @@ public void testSendAndReceiveOnDifferentConnections() throws Exception {\n       StompClientConnection connV12_2 = StompClientConnectionFactory.createClientConnection(v11Uri);\n       connV12_2.connect(defUser, defPass);\n \n-      this.subscribe(connV12_2, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n+      subscribe(connV12_2, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n \n       ClientStompFrame frame = connV12_2.receiveFrame(2000);\n \n@@ -1336,7 +1336,7 @@ public void testBeginSameTransactionTwice() throws Exception {\n    public void testBodyWithUTF8() throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, getName(), Stomp.Headers.Subscribe.AckModeValues.AUTO);\n+      subscribe(conn, getName(), Stomp.Headers.Subscribe.AckModeValues.AUTO);\n \n       String text = \"A\" + \"\\u00ea\" + \"\\u00f1\" + \"\\u00fc\" + \"C\";\n       System.out.println(text);\n@@ -1355,7 +1355,7 @@ public void testBodyWithUTF8() throws Exception {\n    public void testClientAckNotPartOfTransaction() throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, getName(), \"client\");\n+      subscribe(conn, getName(), \"client\");\n \n       sendJmsMessage(getName());\n \n@@ -1379,7 +1379,7 @@ public void testClientAckNotPartOfTransaction() throws Exception {\n \n       Assert.assertNull(frame);\n \n-      this.unsubscribe(conn, getName());\n+      unsubscribe(conn, getName());\n \n       conn.disconnect();\n    }\n@@ -1388,7 +1388,7 @@ public void testClientAckNotPartOfTransaction() throws Exception {\n    public void testDisconnectAndError() throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, getName(), \"client\");\n+      subscribe(conn, getName(), \"client\");\n \n       ClientStompFrame frame = conn.createFrame(\"DISCONNECT\");\n       frame.addHeader(Stomp.Headers.RECEIPT_REQUESTED, \"1\");\n@@ -1441,9 +1441,9 @@ public void run() {\n    public void testDurableSubscriber() throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, \"sub1\", \"client\", getName());\n+      subscribe(conn, \"sub1\", \"client\", getName());\n \n-      ClientStompFrame frame = this.subscribe(conn, \"sub1\", \"client\", getName());\n+      ClientStompFrame frame = subscribe(conn, \"sub1\", \"client\", getName());\n \n       Assert.assertTrue(frame.getCommand().equals(Stomp.Responses.ERROR));\n \n@@ -1455,7 +1455,7 @@ public void testDurableSubscriber() throws Exception {\n    public void testDurableSubscriberWithReconnection() throws Exception {\n       conn.connect(defUser, defPass, CLIENT_ID);\n \n-      this.subscribeTopic(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO, getName());\n+      subscribeTopic(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO, getName());\n \n       ClientStompFrame frame = conn.createFrame(\"DISCONNECT\");\n       frame.addHeader(Stomp.Headers.RECEIPT_REQUESTED, \"1\");\n@@ -1473,7 +1473,7 @@ public void testDurableSubscriberWithReconnection() throws Exception {\n       conn = (StompClientConnectionV12) StompClientConnectionFactory.createClientConnection(uri);\n       conn.connect(defUser, defPass, CLIENT_ID);\n \n-      this.subscribeTopic(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO, getName());\n+      subscribeTopic(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO, getName());\n \n       // we must have received the message\n       frame = conn.receiveFrame();\n@@ -1482,7 +1482,7 @@ public void testDurableSubscriberWithReconnection() throws Exception {\n       Assert.assertNotNull(frame.getHeader(Stomp.Headers.Subscribe.DESTINATION));\n       Assert.assertEquals(getName(), frame.getBody());\n \n-      this.unsubscribe(conn, \"sub1\");\n+      unsubscribe(conn, \"sub1\");\n \n       conn.disconnect();\n    }\n@@ -1491,14 +1491,14 @@ public void testDurableSubscriberWithReconnection() throws Exception {\n    public void testDurableUnSubscribe() throws Exception {\n       conn.connect(defUser, defPass, CLIENT_ID);\n \n-      this.subscribeTopic(conn, null, Stomp.Headers.Subscribe.AckModeValues.AUTO, getName());\n+      subscribeTopic(conn, null, Stomp.Headers.Subscribe.AckModeValues.AUTO, getName());\n \n       conn.disconnect();\n       conn.destroy();\n       conn = (StompClientConnectionV12) StompClientConnectionFactory.createClientConnection(uri);\n       conn.connect(defUser, defPass, CLIENT_ID);\n \n-      this.unsubscribe(conn, getName(), null, false, true);\n+      unsubscribe(conn, getName(), null, false, true);\n \n       long start = System.currentTimeMillis();\n       SimpleString queueName = SimpleString.toSimpleString(CLIENT_ID + \".\" + getName());\n@@ -1538,7 +1538,7 @@ public void testMessagesAreInOrder() throws Exception {\n \n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n+      subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n \n       for (int i = 0; i < ctr; ++i) {\n          data[i] = getName() + i;\n@@ -1569,7 +1569,7 @@ public void testMessagesAreInOrder() throws Exception {\n    public void testSubscribeWithAutoAckAndSelector() throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO, null, \"foo = 'zzz'\");\n+      subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO, null, \"foo = 'zzz'\");\n \n       sendJmsMessage(\"Ignored message\", \"foo\", \"1234\");\n       sendJmsMessage(\"Real message\", \"foo\", \"zzz\");\n@@ -1585,7 +1585,7 @@ public void testSubscribeWithAutoAckAndSelector() throws Exception {\n    public void testRedeliveryWithClientAck() throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, \"subId\", \"client\");\n+      subscribe(conn, \"subId\", \"client\");\n \n       sendJmsMessage(getName());\n \n@@ -1825,7 +1825,7 @@ public void testSendMessageWithLongHeaders() throws Exception {\n    public void testSubscribeToTopic() throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribeTopic(conn, \"sub1\", null, null, true);\n+      subscribeTopic(conn, \"sub1\", null, null, true);\n \n       sendJmsMessage(getName(), topic);\n \n@@ -1835,7 +1835,7 @@ public void testSubscribeToTopic() throws Exception {\n       Assert.assertTrue(frame.getHeader(Stomp.Headers.Subscribe.DESTINATION).equals(getTopicPrefix() + getTopicName()));\n       Assert.assertTrue(frame.getBody().equals(getName()));\n \n-      this.unsubscribe(conn, \"sub1\", true);\n+      unsubscribe(conn, \"sub1\", true);\n \n       sendJmsMessage(getName(), topic);\n \n@@ -1849,7 +1849,7 @@ public void testSubscribeToTopic() throws Exception {\n    public void testSubscribeToTopicWithNoLocal() throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribeTopic(conn, \"sub1\", null, null, true, true);\n+      subscribeTopic(conn, \"sub1\", null, null, true, true);\n \n       // send a message on the same connection => it should not be received\n       send(conn, getTopicPrefix() + getTopicName(), null, \"Hello World\");\n@@ -1867,7 +1867,7 @@ public void testSubscribeToTopicWithNoLocal() throws Exception {\n       Assert.assertTrue(frame.getHeader(Stomp.Headers.Subscribe.DESTINATION).equals(getTopicPrefix() + getTopicName()));\n       Assert.assertTrue(frame.getBody().equals(getName()));\n \n-      this.unsubscribe(conn, \"sub1\");\n+      unsubscribe(conn, \"sub1\");\n \n       conn.disconnect();\n    }\n@@ -1876,7 +1876,7 @@ public void testSubscribeToTopicWithNoLocal() throws Exception {\n    public void testSubscribeWithAutoAck() throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n+      subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n \n       sendJmsMessage(getName());\n \n@@ -1898,7 +1898,7 @@ public void testSubscribeWithAutoAck() throws Exception {\n    public void testSubscribeWithAutoAckAndBytesMessage() throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n+      subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n \n       byte[] payload = new byte[]{1, 2, 3, 4, 5};\n       sendJmsMessage(payload, queue);\n@@ -1922,7 +1922,7 @@ public void testSubscribeWithAutoAckAndBytesMessage() throws Exception {\n    public void testSubscribeWithClientAck() throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, \"sub1\", \"client\");\n+      subscribe(conn, \"sub1\", \"client\");\n \n       sendJmsMessage(getName());\n \n@@ -1952,7 +1952,7 @@ public void testSubscribeWithClientAckThenConsumingAgainWithAutoAckWithNoDisconn\n    public void testSubscribeWithID() throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, \"mysubid\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n+      subscribe(conn, \"mysubid\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n \n       sendJmsMessage(getName());\n \n@@ -1967,7 +1967,7 @@ public void testSubscribeWithID() throws Exception {\n    public void testSubscribeWithMessageSentWithProperties() throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n+      subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n \n       MessageProducer producer = session.createProducer(queue);\n       BytesMessage message = session.createBytesMessage();\n@@ -2005,7 +2005,7 @@ public void testSuccessiveTransactionsWithSameID() throws Exception {\n       conn.connect(defUser, defPass);\n \n       // first tx\n-      this.beginTransaction(conn, \"tx1\");\n+      beginTransaction(conn, \"tx1\");\n \n       ClientStompFrame frame = conn.createFrame(Stomp.Commands.SEND)\n                                    .addHeader(Stomp.Headers.Subscribe.DESTINATION, getQueuePrefix() + getQueueName())\n@@ -2014,13 +2014,13 @@ public void testSuccessiveTransactionsWithSameID() throws Exception {\n \n       conn.sendFrame(frame);\n \n-      this.commitTransaction(conn, \"tx1\");\n+      commitTransaction(conn, \"tx1\");\n \n       Message message = consumer.receive(1000);\n       Assert.assertNotNull(\"Should have received a message\", message);\n \n       // 2nd tx with same tx ID\n-      this.beginTransaction(conn, \"tx1\");\n+      beginTransaction(conn, \"tx1\");\n \n       frame = conn.createFrame(Stomp.Commands.SEND)\n                   .addHeader(Stomp.Headers.Subscribe.DESTINATION, getQueuePrefix() + getQueueName())\n@@ -2029,7 +2029,7 @@ public void testSuccessiveTransactionsWithSameID() throws Exception {\n \n       conn.sendFrame(frame);\n \n-      this.commitTransaction(conn, \"tx1\");\n+      commitTransaction(conn, \"tx1\");\n \n       message = consumer.receive(1000);\n       Assert.assertNotNull(\"Should have received a message\", message);\n@@ -2043,7 +2043,7 @@ public void testTransactionCommit() throws Exception {\n \n       conn.connect(defUser, defPass);\n \n-      this.beginTransaction(conn, \"tx1\");\n+      beginTransaction(conn, \"tx1\");\n \n       ClientStompFrame frame = conn.createFrame(Stomp.Commands.SEND)\n                                    .addHeader(Stomp.Headers.Subscribe.DESTINATION, getQueuePrefix() + getQueueName())\n@@ -2058,7 +2058,7 @@ public void testTransactionCommit() throws Exception {\n       // check the message is not committed\n       Assert.assertNull(consumer.receive(100));\n \n-      this.commitTransaction(conn, \"tx1\", true);\n+      commitTransaction(conn, \"tx1\", true);\n \n       Message message = consumer.receive(1000);\n       Assert.assertNotNull(\"Should have received a message\", message);\n@@ -2072,7 +2072,7 @@ public void testTransactionRollback() throws Exception {\n \n       conn.connect(defUser, defPass);\n \n-      this.beginTransaction(conn, \"tx1\");\n+      beginTransaction(conn, \"tx1\");\n \n       ClientStompFrame frame = conn.createFrame(Stomp.Commands.SEND)\n                                    .addHeader(Stomp.Headers.Subscribe.DESTINATION, getQueuePrefix() + getQueueName())\n@@ -2082,9 +2082,9 @@ public void testTransactionRollback() throws Exception {\n       conn.sendFrame(frame);\n \n       // rollback first message\n-      this.abortTransaction(conn, \"tx1\");\n+      abortTransaction(conn, \"tx1\");\n \n-      this.beginTransaction(conn, \"tx1\");\n+      beginTransaction(conn, \"tx1\");\n \n       frame = conn.createFrame(Stomp.Commands.SEND)\n                   .addHeader(Stomp.Headers.Subscribe.DESTINATION, getQueuePrefix() + getQueueName())\n@@ -2093,7 +2093,7 @@ public void testTransactionRollback() throws Exception {\n \n       conn.sendFrame(frame);\n \n-      this.commitTransaction(conn, \"tx1\", true);\n+      commitTransaction(conn, \"tx1\", true);\n \n       // only second msg should be received since first msg was rolled back\n       TextMessage message = (TextMessage) consumer.receive(1000);\n@@ -2107,7 +2107,7 @@ public void testTransactionRollback() throws Exception {\n    public void testUnsubscribe() throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n+      subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n \n       // send a message to our queue\n       sendJmsMessage(\"first message\");\n@@ -2118,7 +2118,7 @@ public void testUnsubscribe() throws Exception {\n       Assert.assertTrue(frame.getCommand().equals(Stomp.Responses.MESSAGE));\n \n       // remove suscription\n-      this.unsubscribe(conn, \"sub1\", true);\n+      unsubscribe(conn, \"sub1\", true);\n \n       // send a message to our queue\n       sendJmsMessage(\"second message\");\n@@ -2133,7 +2133,7 @@ public void testUnsubscribe() throws Exception {\n    public void testDisconnectWithoutUnsubscribe() throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n+      subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n \n       // send a message to our queue\n       sendJmsMessage(\"first message\");\n@@ -2157,7 +2157,7 @@ public void testDisconnectWithoutUnsubscribe() throws Exception {\n       Assert.assertNull(\"not expected: \" + frame, frame);\n \n       //subscribe again.\n-      this.subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n+      subscribe(conn, \"sub1\", Stomp.Headers.Subscribe.AckModeValues.AUTO);\n \n       // receive message from socket\n       frame = conn.receiveFrame();\n@@ -2168,7 +2168,7 @@ public void testDisconnectWithoutUnsubscribe() throws Exception {\n       frame = conn.receiveFrame(1000);\n       Assert.assertNull(\"not expected: \" + frame, frame);\n \n-      this.unsubscribe(conn, \"sub1\", true);\n+      unsubscribe(conn, \"sub1\", true);\n \n       frame = conn.receiveFrame(1000);\n       Assert.assertNull(frame);\n@@ -2179,7 +2179,7 @@ public void testDisconnectWithoutUnsubscribe() throws Exception {\n    protected void assertSubscribeWithClientAckThenConsumeWithAutoAck(boolean sendDisconnect) throws Exception {\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, \"sub1\", \"client\");\n+      subscribe(conn, \"sub1\", \"client\");\n \n       sendJmsMessage(getName());\n \n@@ -2200,7 +2200,7 @@ protected void assertSubscribeWithClientAckThenConsumeWithAutoAck(boolean sendDi\n       // message should be received since message was not acknowledged\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, \"sub1\", null);\n+      subscribe(conn, \"sub1\", null);\n \n       frame = conn.receiveFrame();\n       Assert.assertTrue(frame.getCommand().equals(Stomp.Responses.MESSAGE));\n@@ -2212,7 +2212,7 @@ protected void assertSubscribeWithClientAckThenConsumeWithAutoAck(boolean sendDi\n       conn = (StompClientConnectionV12) StompClientConnectionFactory.createClientConnection(uri);\n       conn.connect(defUser, defPass);\n \n-      this.subscribe(conn, \"sub1\", null, null, true);\n+      subscribe(conn, \"sub1\", null, null, true);\n \n       sendJmsMessage(\"shouldBeNextMessage\");\n ",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/6b033b5b8d9e3bf157cd543fc63b0bced0a2aa6c/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/stomp/v12/StompV12Test.java",
                "sha": "d94d7c1421ec06bfb6ebbff04d7bb500ebc15312",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-1602 avoid potential NPE if property is null",
        "parent": "https://github.com/apache/activemq-artemis/commit/77805f9db21cfe7dd13f0134b8ccebc81281b233",
        "patched_files": [
            "StompTestBase.java",
            "StompSession.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "StompV12Test.java",
            "AMQPToStompTest.java",
            "StompV11Test.java"
        ]
    },
    "activemq-artemis_6d94997": {
        "bug_id": "activemq-artemis_6d94997",
        "commit": "https://github.com/apache/activemq-artemis/commit/6d94997aa8c9c0ed4d02ac9934eceee4161cdea0",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/6d94997aa8c9c0ed4d02ac9934eceee4161cdea0/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/broker/AMQPMessage.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/broker/AMQPMessage.java?ref=6d94997aa8c9c0ed4d02ac9934eceee4161cdea0",
                "deletions": 6,
                "filename": "artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/broker/AMQPMessage.java",
                "patch": "@@ -33,6 +33,7 @@\n import org.apache.activemq.artemis.api.core.SimpleString;\n import org.apache.activemq.artemis.core.persistence.Persister;\n import org.apache.activemq.artemis.protocol.amqp.converter.AMQPConverter;\n+import org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageIdHelper;\n import org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport;\n import org.apache.activemq.artemis.protocol.amqp.util.NettyWritable;\n import org.apache.activemq.artemis.protocol.amqp.util.TLSEncode;\n@@ -557,7 +558,6 @@ public Object getAMQPUserID() {\n       }\n    }\n \n-\n    @Override\n    public org.apache.activemq.artemis.api.core.Message setUserID(Object userID) {\n       return null;\n@@ -725,7 +725,6 @@ public AMQPMessage setExtraProperties(TypedProperties extraProperties) {\n       return this;\n    }\n \n-\n    @Override\n    public byte[] getExtraBytesProperty(SimpleString key) throws ActiveMQPropertyConversionException {\n       if (extraProperties == null) {\n@@ -735,7 +734,6 @@ public AMQPMessage setExtraProperties(TypedProperties extraProperties) {\n       }\n    }\n \n-\n    @Override\n    public byte[] removeExtraBytesProperty(SimpleString key) throws ActiveMQPropertyConversionException {\n       if (extraProperties == null) {\n@@ -745,8 +743,6 @@ public AMQPMessage setExtraProperties(TypedProperties extraProperties) {\n       }\n    }\n \n-\n-\n    @Override\n    public org.apache.activemq.artemis.api.core.Message putBooleanProperty(String key, boolean value) {\n       getApplicationPropertiesMap().put(key, Boolean.valueOf(value));\n@@ -904,9 +900,19 @@ public Long getLongProperty(String key) throws ActiveMQPropertyConversionExcepti\n    @Override\n    public Object getObjectProperty(String key) {\n       if (key.equals(MessageUtil.TYPE_HEADER_NAME.toString())) {\n-         return getProperties().getSubject();\n+         if (getProperties() != null) {\n+            return getProperties().getSubject();\n+         }\n       } else if (key.equals(MessageUtil.CONNECTION_ID_PROPERTY_NAME.toString())) {\n          return getConnectionID();\n+      } else if (key.equals(MessageUtil.JMSXGROUPID)) {\n+         return getGroupID();\n+      } else if (key.equals(MessageUtil.JMSXUSERID)) {\n+         return getAMQPUserID();\n+      } else if (key.equals(MessageUtil.CORRELATIONID_HEADER_NAME.toString())) {\n+         if (getProperties() != null && getProperties().getCorrelationId() != null) {\n+            return AMQPMessageIdHelper.INSTANCE.toCorrelationIdString(getProperties().getCorrelationId());\n+         }\n       } else {\n          Object value = getApplicationPropertiesMap().get(key);\n          if (value instanceof UnsignedInteger ||\n@@ -918,6 +924,8 @@ public Object getObjectProperty(String key) {\n             return value;\n          }\n       }\n+\n+      return null;\n    }\n \n    @Override",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/6d94997aa8c9c0ed4d02ac9934eceee4161cdea0/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/broker/AMQPMessage.java",
                "sha": "eb8edb53f5d2671d1a0ab43673de961480f53eff",
                "status": "modified"
            },
            {
                "additions": 198,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/6d94997aa8c9c0ed4d02ac9934eceee4161cdea0/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AMQPMessageIdHelper.java",
                "changes": 313,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AMQPMessageIdHelper.java?ref=6d94997aa8c9c0ed4d02ac9934eceee4161cdea0",
                "deletions": 115,
                "filename": "artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AMQPMessageIdHelper.java",
                "patch": "@@ -1,5 +1,4 @@\n /*\n- *\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n  * distributed with this work for additional information\n@@ -16,7 +15,6 @@\n  * KIND, either express or implied.  See the License for the\n  * specific language governing permissions and limitations\n  * under the License.\n- *\n  */\n package org.apache.activemq.artemis.protocol.amqp.converter;\n \n@@ -28,26 +26,32 @@\n import org.apache.qpid.proton.amqp.UnsignedLong;\n \n /**\n- * Helper class for identifying and converting message-id and correlation-id values between the\n- * AMQP types and the Strings values used by JMS.\n+ * Helper class for identifying and converting message-id and correlation-id\n+ * values between the AMQP types and the Strings values used by JMS.\n+ *\n  * <p>\n- * AMQP messages allow for 4 types of message-id/correlation-id: message-id-string,\n- * message-id-binary, message-id-uuid, or message-id-ulong. In order to accept or return a\n- * string representation of these for interoperability with other AMQP clients, the following\n- * encoding can be used after removing or before adding the \"ID:\" prefix used for a JMSMessageID\n+ * AMQP messages allow for 4 types of message-id/correlation-id:\n+ * message-id-string, message-id-binary, message-id-uuid, or message-id-ulong.\n+ * In order to accept or return a string representation of these for\n+ * interoperability with other AMQP clients, the following encoding can be used\n+ * after removing or before adding the \"ID:\" prefix used for a JMSMessageID\n  * value:<br>\n- * <p>\n+ *\n  * {@literal \"AMQP_BINARY:<hex representation of binary content>\"}<br>\n  * {@literal \"AMQP_UUID:<string representation of uuid>\"}<br>\n  * {@literal \"AMQP_ULONG:<string representation of ulong>\"}<br>\n  * {@literal \"AMQP_STRING:<string>\"}<br>\n+ *\n  * <p>\n- * The AMQP_STRING encoding exists only for escaping message-id-string values that happen to\n- * begin with one of the encoding prefixes (including AMQP_STRING itself). It MUST NOT be used\n- * otherwise.\n+ * The AMQP_STRING encoding exists only for escaping message-id-string values\n+ * that happen to begin with one of the encoding prefixes (including AMQP_STRING\n+ * itself). It MUST NOT be used otherwise.\n+ *\n  * <p>\n- * When provided a string for conversion which attempts to identify itself as an encoded binary,\n- * uuid, or ulong but can't be converted into the indicated format, an exception will be thrown.\n+ * When provided a string for conversion which attempts to identify itself as an\n+ * encoded binary, uuid, or ulong but can't be converted into the indicated\n+ * format, an exception will be thrown.\n+ *\n  */\n public class AMQPMessageIdHelper {\n \n@@ -57,109 +61,213 @@\n    public static final String AMQP_UUID_PREFIX = \"AMQP_UUID:\";\n    public static final String AMQP_ULONG_PREFIX = \"AMQP_ULONG:\";\n    public static final String AMQP_BINARY_PREFIX = \"AMQP_BINARY:\";\n+   public static final String AMQP_NO_PREFIX = \"AMQP_NO_PREFIX:\";\n+   public static final String JMS_ID_PREFIX = \"ID:\";\n \n+   private static final String AMQP_PREFIX = \"AMQP_\";\n+   private static final int JMS_ID_PREFIX_LENGTH = JMS_ID_PREFIX.length();\n    private static final int AMQP_UUID_PREFIX_LENGTH = AMQP_UUID_PREFIX.length();\n    private static final int AMQP_ULONG_PREFIX_LENGTH = AMQP_ULONG_PREFIX.length();\n    private static final int AMQP_STRING_PREFIX_LENGTH = AMQP_STRING_PREFIX.length();\n    private static final int AMQP_BINARY_PREFIX_LENGTH = AMQP_BINARY_PREFIX.length();\n+   private static final int AMQP_NO_PREFIX_LENGTH = AMQP_NO_PREFIX.length();\n    private static final char[] HEX_CHARS = \"0123456789ABCDEF\".toCharArray();\n \n    /**\n-    * Takes the provided AMQP messageId style object, and convert it to a base string. Encodes\n-    * type information as a prefix where necessary to convey or escape the type of the provided\n-    * object.\n+    * Checks whether the given string begins with \"ID:\" prefix used to denote a\n+    * JMSMessageID\n     *\n-    * @param messageId\n-    *        the raw messageId object to process\n-    * @return the base string to be used in creating the actual id.\n+    * @param string\n+    *        the string to check\n+    * @return true if and only id the string begins with \"ID:\"\n     */\n-   public String toBaseMessageIdString(Object messageId) {\n-      if (messageId == null) {\n-         return null;\n-      } else if (messageId instanceof String) {\n-         String stringId = (String) messageId;\n-\n-         // If the given string has a type encoding prefix,\n-         // we need to escape it as an encoded string (even if\n-         // the existing encoding prefix was also for string)\n-         if (hasTypeEncodingPrefix(stringId)) {\n-            return AMQP_STRING_PREFIX + stringId;\n+   public boolean hasMessageIdPrefix(String string) {\n+      if (string == null) {\n+         return false;\n+      }\n+\n+      return string.startsWith(JMS_ID_PREFIX);\n+   }\n+\n+   public String toMessageIdString(Object idObject) {\n+      if (idObject instanceof String) {\n+         final String stringId = (String) idObject;\n+\n+         boolean hasMessageIdPrefix = hasMessageIdPrefix(stringId);\n+         if (!hasMessageIdPrefix) {\n+            // For JMSMessageID, has no \"ID:\" prefix, we need to record\n+            // that for later use as a JMSCorrelationID.\n+            return JMS_ID_PREFIX + AMQP_NO_PREFIX + stringId;\n+         } else if (hasTypeEncodingPrefix(stringId, JMS_ID_PREFIX_LENGTH)) {\n+            // We are for a JMSMessageID value, but have 'ID:' followed by\n+            // one of the encoding prefixes. Need to escape the entire string\n+            // to preserve for later re-use as a JMSCorrelationID.\n+            return JMS_ID_PREFIX + AMQP_STRING_PREFIX + stringId;\n          } else {\n+            // It has \"ID:\" prefix and doesn't have encoding prefix, use it as-is.\n             return stringId;\n          }\n-      } else if (messageId instanceof UUID) {\n-         return AMQP_UUID_PREFIX + messageId.toString();\n-      } else if (messageId instanceof UnsignedLong) {\n-         return AMQP_ULONG_PREFIX + messageId.toString();\n-      } else if (messageId instanceof Binary) {\n-         ByteBuffer dup = ((Binary) messageId).asByteBuffer();\n+      } else {\n+         // Not a string, convert it\n+         return convertToIdString(idObject);\n+      }\n+   }\n+\n+   public String toCorrelationIdString(Object idObject) {\n+      if (idObject instanceof String) {\n+         final String stringId = (String) idObject;\n+\n+         boolean hasMessageIdPrefix = hasMessageIdPrefix(stringId);\n+         if (!hasMessageIdPrefix) {\n+            // For JMSCorrelationID, has no \"ID:\" prefix, use it as-is.\n+            return stringId;\n+         } else if (hasTypeEncodingPrefix(stringId, JMS_ID_PREFIX_LENGTH)) {\n+            // We are for a JMSCorrelationID value, but have 'ID:' followed by\n+            // one of the encoding prefixes. Need to escape the entire string\n+            // to preserve for later re-use as a JMSCorrelationID.\n+            return JMS_ID_PREFIX + AMQP_STRING_PREFIX + stringId;\n+         } else {\n+            // It has \"ID:\" prefix and doesn't have encoding prefix, use it as-is.\n+            return stringId;\n+         }\n+      } else {\n+         // Not a string, convert it\n+         return convertToIdString(idObject);\n+      }\n+   }\n+\n+   /**\n+    * Takes the provided non-String AMQP message-id/correlation-id object, and\n+    * convert it it to a String usable as either a JMSMessageID or\n+    * JMSCorrelationID value, encoding the type information as a prefix to\n+    * convey for later use in reversing the process if used to set\n+    * JMSCorrelationID on a message.\n+    *\n+    * @param idObject\n+    *        the object to process\n+    * @return string to be used for the actual JMS ID.\n+    */\n+   private String convertToIdString(Object idObject) {\n+      if (idObject == null) {\n+         return null;\n+      }\n+\n+      if (idObject instanceof UUID) {\n+         return JMS_ID_PREFIX + AMQP_UUID_PREFIX + idObject.toString();\n+      } else if (idObject instanceof UnsignedLong) {\n+         return JMS_ID_PREFIX + AMQP_ULONG_PREFIX + idObject.toString();\n+      } else if (idObject instanceof Binary) {\n+         ByteBuffer dup = ((Binary) idObject).asByteBuffer();\n \n          byte[] bytes = new byte[dup.remaining()];\n          dup.get(bytes);\n \n          String hex = convertBinaryToHexString(bytes);\n \n-         return AMQP_BINARY_PREFIX + hex;\n+         return JMS_ID_PREFIX + AMQP_BINARY_PREFIX + hex;\n       } else {\n-         throw new IllegalArgumentException(\"Unsupported type provided: \" + messageId.getClass());\n+         throw new IllegalArgumentException(\"Unsupported type provided: \" + idObject.getClass());\n+      }\n+   }\n+\n+   private boolean hasTypeEncodingPrefix(String stringId, int offset) {\n+      if (!stringId.startsWith(AMQP_PREFIX, offset)) {\n+         return false;\n       }\n+\n+      return hasAmqpBinaryPrefix(stringId, offset) || hasAmqpUuidPrefix(stringId, offset) || hasAmqpUlongPrefix(stringId, offset)\n+         || hasAmqpStringPrefix(stringId, offset) || hasAmqpNoPrefix(stringId, offset);\n+   }\n+\n+   private boolean hasAmqpStringPrefix(String stringId, int offset) {\n+      return stringId.startsWith(AMQP_STRING_PREFIX, offset);\n+   }\n+\n+   private boolean hasAmqpUlongPrefix(String stringId, int offset) {\n+      return stringId.startsWith(AMQP_ULONG_PREFIX, offset);\n+   }\n+\n+   private boolean hasAmqpUuidPrefix(String stringId, int offset) {\n+      return stringId.startsWith(AMQP_UUID_PREFIX, offset);\n+   }\n+\n+   private boolean hasAmqpBinaryPrefix(String stringId, int offset) {\n+      return stringId.startsWith(AMQP_BINARY_PREFIX, offset);\n+   }\n+\n+   private boolean hasAmqpNoPrefix(String stringId, int offset) {\n+      return stringId.startsWith(AMQP_NO_PREFIX, offset);\n    }\n \n    /**\n-    * Takes the provided base id string and return the appropriate amqp messageId style object.\n-    * Converts the type based on any relevant encoding information found as a prefix.\n+    * Takes the provided id string and return the appropriate amqp messageId\n+    * style object. Converts the type based on any relevant encoding information\n+    * found as a prefix.\n     *\n-    * @param baseId\n-    *        the object to be converted to an AMQP MessageId value.\n+    * @param origId\n+    *        the object to be converted\n     * @return the AMQP messageId style object\n-    * @throws ActiveMQAMQPIllegalStateException\n-    *         if the provided baseId String indicates an encoded type but can't be converted to\n-    *         that type.\n+    *\n+    * @throws IllegalArgument\n+    *         if the provided baseId String indicates an encoded type but can't\n+    *         be converted to that type.\n     */\n-   public Object toIdObject(String baseId) throws ActiveMQAMQPIllegalStateException {\n-      if (baseId == null) {\n+   public Object toIdObject(final String origId) throws ActiveMQAMQPIllegalStateException {\n+      if (origId == null) {\n          return null;\n       }\n \n+      if (!AMQPMessageIdHelper.INSTANCE.hasMessageIdPrefix(origId)) {\n+         // We have a string without any \"ID:\" prefix, it is an\n+         // application-specific String, use it as-is.\n+         return origId;\n+      }\n+\n       try {\n-         if (hasAmqpUuidPrefix(baseId)) {\n-            String uuidString = strip(baseId, AMQP_UUID_PREFIX_LENGTH);\n+         if (hasAmqpNoPrefix(origId, JMS_ID_PREFIX_LENGTH)) {\n+            // Prefix telling us there was originally no \"ID:\" prefix,\n+            // strip it and return the remainder\n+            return origId.substring(JMS_ID_PREFIX_LENGTH + AMQP_NO_PREFIX_LENGTH);\n+         } else if (hasAmqpUuidPrefix(origId, JMS_ID_PREFIX_LENGTH)) {\n+            String uuidString = origId.substring(JMS_ID_PREFIX_LENGTH + AMQP_UUID_PREFIX_LENGTH);\n             return UUID.fromString(uuidString);\n-         } else if (hasAmqpUlongPrefix(baseId)) {\n-            String longString = strip(baseId, AMQP_ULONG_PREFIX_LENGTH);\n-            return UnsignedLong.valueOf(longString);\n-         } else if (hasAmqpStringPrefix(baseId)) {\n-            return strip(baseId, AMQP_STRING_PREFIX_LENGTH);\n-         } else if (hasAmqpBinaryPrefix(baseId)) {\n-            String hexString = strip(baseId, AMQP_BINARY_PREFIX_LENGTH);\n+         } else if (hasAmqpUlongPrefix(origId, JMS_ID_PREFIX_LENGTH)) {\n+            String ulongString = origId.substring(JMS_ID_PREFIX_LENGTH + AMQP_ULONG_PREFIX_LENGTH);\n+            return UnsignedLong.valueOf(ulongString);\n+         } else if (hasAmqpStringPrefix(origId, JMS_ID_PREFIX_LENGTH)) {\n+            return origId.substring(JMS_ID_PREFIX_LENGTH + AMQP_STRING_PREFIX_LENGTH);\n+         } else if (hasAmqpBinaryPrefix(origId, JMS_ID_PREFIX_LENGTH)) {\n+            String hexString = origId.substring(JMS_ID_PREFIX_LENGTH + AMQP_BINARY_PREFIX_LENGTH);\n             byte[] bytes = convertHexStringToBinary(hexString);\n             return new Binary(bytes);\n          } else {\n-            // We have a string without any type prefix, transmit it as-is.\n-            return baseId;\n+            // We have a string without any encoding prefix needing processed,\n+            // so transmit it as-is, including the \"ID:\"\n+            return origId;\n          }\n-      } catch (IllegalArgumentException e) {\n-         throw new ActiveMQAMQPIllegalStateException(\"Unable to convert ID value\");\n+      } catch (IllegalArgumentException iae) {\n+         throw new ActiveMQAMQPIllegalStateException(iae.getMessage());\n       }\n    }\n \n    /**\n-    * Convert the provided hex-string into a binary representation where each byte represents\n-    * two characters of the hex string.\n-    * <p>\n+    * Convert the provided hex-string into a binary representation where each\n+    * byte represents two characters of the hex string.\n+    *\n     * The hex characters may be upper or lower case.\n     *\n     * @param hexString\n-    *        string to convert to a binary value.\n+    *        string to convert\n     * @return a byte array containing the binary representation\n     * @throws IllegalArgumentException\n-    *         if the provided String is a non-even length or contains non-hex characters\n+    *         if the provided String is a non-even length or contains non-hex\n+    *         characters\n     */\n    public byte[] convertHexStringToBinary(String hexString) throws IllegalArgumentException {\n       int length = hexString.length();\n \n-      // As each byte needs two characters in the hex encoding, the string must be an even\n-      // length.\n+      // As each byte needs two characters in the hex encoding, the string must\n+      // be an even length.\n       if (length % 2 != 0) {\n          throw new IllegalArgumentException(\"The provided hex String must be an even length, but was of length \" + length + \": \" + hexString);\n       }\n@@ -179,14 +287,32 @@ public Object toIdObject(String baseId) throws ActiveMQAMQPIllegalStateException\n       return binary;\n    }\n \n+   private int hexCharToInt(char ch, String orig) throws IllegalArgumentException {\n+      if (ch >= '0' && ch <= '9') {\n+         // subtract '0' to get difference in position as an int\n+         return ch - '0';\n+      } else if (ch >= 'A' && ch <= 'F') {\n+         // subtract 'A' to get difference in position as an int\n+         // and then add 10 for the offset of 'A'\n+         return ch - 'A' + 10;\n+      } else if (ch >= 'a' && ch <= 'f') {\n+         // subtract 'a' to get difference in position as an int\n+         // and then add 10 for the offset of 'a'\n+         return ch - 'a' + 10;\n+      }\n+\n+      throw new IllegalArgumentException(\"The provided hex string contains non-hex character '\" + ch + \"': \" + orig);\n+   }\n+\n    /**\n-    * Convert the provided binary into a hex-string representation where each character\n-    * represents 4 bits of the provided binary, i.e each byte requires two characters.\n-    * <p>\n+    * Convert the provided binary into a hex-string representation where each\n+    * character represents 4 bits of the provided binary, i.e each byte requires\n+    * two characters.\n+    *\n     * The returned hex characters are upper-case.\n     *\n     * @param bytes\n-    *        the binary value to convert to a hex String instance.\n+    *        binary to convert\n     * @return a String containing a hex representation of the bytes\n     */\n    public String convertBinaryToHexString(byte[] bytes) {\n@@ -206,47 +332,4 @@ public String convertBinaryToHexString(byte[] bytes) {\n \n       return builder.toString();\n    }\n-\n-   // ----- Internal implementation ------------------------------------------//\n-\n-   private boolean hasTypeEncodingPrefix(String stringId) {\n-      return hasAmqpBinaryPrefix(stringId) || hasAmqpUuidPrefix(stringId) || hasAmqpUlongPrefix(stringId) || hasAmqpStringPrefix(stringId);\n-   }\n-\n-   private boolean hasAmqpStringPrefix(String stringId) {\n-      return stringId.startsWith(AMQP_STRING_PREFIX);\n-   }\n-\n-   private boolean hasAmqpUlongPrefix(String stringId) {\n-      return stringId.startsWith(AMQP_ULONG_PREFIX);\n-   }\n-\n-   private boolean hasAmqpUuidPrefix(String stringId) {\n-      return stringId.startsWith(AMQP_UUID_PREFIX);\n-   }\n-\n-   private boolean hasAmqpBinaryPrefix(String stringId) {\n-      return stringId.startsWith(AMQP_BINARY_PREFIX);\n-   }\n-\n-   private String strip(String id, int numChars) {\n-      return id.substring(numChars);\n-   }\n-\n-   private int hexCharToInt(char ch, String orig) throws IllegalArgumentException {\n-      if (ch >= '0' && ch <= '9') {\n-         // subtract '0' to get difference in position as an int\n-         return ch - '0';\n-      } else if (ch >= 'A' && ch <= 'F') {\n-         // subtract 'A' to get difference in position as an int\n-         // and then add 10 for the offset of 'A'\n-         return ch - 'A' + 10;\n-      } else if (ch >= 'a' && ch <= 'f') {\n-         // subtract 'a' to get difference in position as an int\n-         // and then add 10 for the offset of 'a'\n-         return ch - 'a' + 10;\n-      }\n-\n-      throw new IllegalArgumentException(\"The provided hex string contains non-hex character '\" + ch + \"': \" + orig);\n-   }\n }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/6d94997aa8c9c0ed4d02ac9934eceee4161cdea0/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AMQPMessageIdHelper.java",
                "sha": "e53d2cc5d61aceb9f4dd5bf2ba088cdce9bc907f",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/6d94997aa8c9c0ed4d02ac9934eceee4161cdea0/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AmqpCoreConverter.java",
                "changes": 59,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AmqpCoreConverter.java?ref=6d94997aa8c9c0ed4d02ac9934eceee4161cdea0",
                "deletions": 29,
                "filename": "artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AmqpCoreConverter.java",
                "patch": "@@ -17,8 +17,27 @@\n \n package org.apache.activemq.artemis.protocol.amqp.converter;\n \n-import javax.jms.DeliveryMode;\n-import javax.jms.JMSException;\n+import static org.apache.activemq.artemis.api.core.Message.HDR_SCHEDULED_DELIVERY_TIME;\n+import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.JMS_AMQP_CONTENT_ENCODING;\n+import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.JMS_AMQP_CONTENT_TYPE;\n+import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.JMS_AMQP_FIRST_ACQUIRER;\n+import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.JMS_AMQP_FOOTER_PREFIX;\n+import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.JMS_AMQP_HEADER;\n+import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.JMS_AMQP_HEADER_DURABLE;\n+import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.JMS_AMQP_HEADER_PRIORITY;\n+import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.JMS_AMQP_MESSAGE_ANNOTATION_PREFIX;\n+import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.JMS_AMQP_REPLYTO_GROUP_ID;\n+import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.OCTET_STREAM_CONTENT_TYPE;\n+import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.SERIALIZED_JAVA_OBJECT_CONTENT_TYPE;\n+import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.createBytesMessage;\n+import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.createMapMessage;\n+import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.createMessage;\n+import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.createObjectMessage;\n+import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.createStreamMessage;\n+import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.createTextMessage;\n+import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.getCharsetForTextualContent;\n+import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.isContentType;\n+\n import java.nio.ByteBuffer;\n import java.nio.CharBuffer;\n import java.nio.charset.CharacterCodingException;\n@@ -28,8 +47,9 @@\n import java.util.Map;\n import java.util.Set;\n \n-import io.netty.buffer.ByteBuf;\n-import io.netty.buffer.PooledByteBufAllocator;\n+import javax.jms.DeliveryMode;\n+import javax.jms.JMSException;\n+\n import org.apache.activemq.artemis.api.core.ICoreMessage;\n import org.apache.activemq.artemis.api.core.SimpleString;\n import org.apache.activemq.artemis.protocol.amqp.broker.AMQPMessage;\n@@ -59,33 +79,16 @@\n import org.apache.qpid.proton.amqp.messaging.Section;\n import org.apache.qpid.proton.codec.WritableBuffer;\n \n-import static org.apache.activemq.artemis.api.core.Message.HDR_SCHEDULED_DELIVERY_TIME;\n-import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.JMS_AMQP_CONTENT_ENCODING;\n-import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.JMS_AMQP_CONTENT_TYPE;\n-import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.JMS_AMQP_FIRST_ACQUIRER;\n-import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.JMS_AMQP_FOOTER_PREFIX;\n-import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.JMS_AMQP_HEADER;\n-import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.JMS_AMQP_HEADER_DURABLE;\n-import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.JMS_AMQP_HEADER_PRIORITY;\n-import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.JMS_AMQP_MESSAGE_ANNOTATION_PREFIX;\n-import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.JMS_AMQP_REPLYTO_GROUP_ID;\n-import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.OCTET_STREAM_CONTENT_TYPE;\n-import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.SERIALIZED_JAVA_OBJECT_CONTENT_TYPE;\n-import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.createBytesMessage;\n-import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.createMapMessage;\n-import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.createMessage;\n-import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.createObjectMessage;\n-import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.createStreamMessage;\n-import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.createTextMessage;\n-import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.getCharsetForTextualContent;\n-import static org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport.isContentType;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.PooledByteBufAllocator;\n \n /**\n  *  This class was created just to separate concerns on AMQPConverter.\n  *  For better organization of the code.\n  * */\n public class AmqpCoreConverter {\n \n+   @SuppressWarnings(\"unchecked\")\n    public static ICoreMessage toCore(AMQPMessage message) throws Exception {\n \n       Section body = message.getProtonMessage().getBody();\n@@ -189,6 +192,7 @@ public static ICoreMessage toCore(AMQPMessage message) throws Exception {\n       return result != null ? result.getInnerMessage() : null;\n    }\n \n+   @SuppressWarnings(\"unchecked\")\n    protected static ServerJMSMessage populateMessage(ServerJMSMessage jms, org.apache.qpid.proton.message.Message amqp) throws Exception {\n       Header header = amqp.getHeader();\n       if (header != null) {\n@@ -250,11 +254,10 @@ protected static ServerJMSMessage populateMessage(ServerJMSMessage jms, org.apac\n       final Properties properties = amqp.getProperties();\n       if (properties != null) {\n          if (properties.getMessageId() != null) {\n-            jms.setJMSMessageID(AMQPMessageIdHelper.INSTANCE.toBaseMessageIdString(properties.getMessageId()));\n+            jms.setJMSMessageID(AMQPMessageIdHelper.INSTANCE.toMessageIdString(properties.getMessageId()));\n          }\n          Binary userId = properties.getUserId();\n          if (userId != null) {\n-            // TODO - Better Way to set this?\n             jms.setStringProperty(\"JMSXUserID\", new String(userId.getArray(), userId.getArrayOffset(), userId.getLength(), StandardCharsets.UTF_8));\n          }\n          if (properties.getTo() != null) {\n@@ -267,7 +270,7 @@ protected static ServerJMSMessage populateMessage(ServerJMSMessage jms, org.apac\n             jms.setJMSReplyTo(new ServerDestination(properties.getReplyTo()));\n          }\n          if (properties.getCorrelationId() != null) {\n-            jms.setJMSCorrelationID(AMQPMessageIdHelper.INSTANCE.toBaseMessageIdString(properties.getCorrelationId()));\n+            jms.setJMSCorrelationID(AMQPMessageIdHelper.INSTANCE.toCorrelationIdString(properties.getCorrelationId()));\n          }\n          if (properties.getContentType() != null) {\n             jms.setStringProperty(JMS_AMQP_CONTENT_TYPE, properties.getContentType().toString());\n@@ -357,6 +360,4 @@ private static void setProperty(javax.jms.Message msg, String key, Object value)\n          msg.setObjectProperty(key, value);\n       }\n    }\n-\n-\n }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/6d94997aa8c9c0ed4d02ac9934eceee4161cdea0/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AmqpCoreConverter.java",
                "sha": "acd940bd6db00c8d4cc17b2b10634e9f3f8fbb17",
                "status": "modified"
            },
            {
                "additions": 539,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/6d94997aa8c9c0ed4d02ac9934eceee4161cdea0/artemis-protocols/artemis-amqp-protocol/src/test/java/org/apache/activemq/artemis/protocol/amqp/converter/message/AMQPMessageIdHelperTest.java",
                "changes": 680,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-protocols/artemis-amqp-protocol/src/test/java/org/apache/activemq/artemis/protocol/amqp/converter/message/AMQPMessageIdHelperTest.java?ref=6d94997aa8c9c0ed4d02ac9934eceee4161cdea0",
                "deletions": 141,
                "filename": "artemis-protocols/artemis-amqp-protocol/src/test/java/org/apache/activemq/artemis/protocol/amqp/converter/message/AMQPMessageIdHelperTest.java",
                "patch": "@@ -1,5 +1,4 @@\n /*\n- *\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n  * distributed with this work for additional information\n@@ -16,194 +15,558 @@\n  * KIND, either express or implied.  See the License for the\n  * specific language governing permissions and limitations\n  * under the License.\n- *\n  */\n package org.apache.activemq.artemis.protocol.amqp.converter.message;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.util.UUID;\n \n import org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageIdHelper;\n-import org.apache.activemq.artemis.protocol.amqp.exceptions.ActiveMQAMQPException;\n+import org.apache.activemq.artemis.protocol.amqp.exceptions.ActiveMQAMQPIllegalStateException;\n import org.apache.qpid.proton.amqp.Binary;\n import org.apache.qpid.proton.amqp.UnsignedLong;\n import org.junit.Before;\n import org.junit.Test;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.fail;\n-\n public class AMQPMessageIdHelperTest {\n \n    private AMQPMessageIdHelper messageIdHelper;\n \n    @Before\n    public void setUp() throws Exception {\n-      messageIdHelper = new AMQPMessageIdHelper();\n+      messageIdHelper = AMQPMessageIdHelper.INSTANCE;\n+   }\n+\n+   /**\n+    * Test that {@link AMQPMessageIdHelper#hasMessageIdPrefix(String)} returns\n+    * true for strings that begin \"ID:\"\n+    */\n+   @Test\n+   public void testHasIdPrefixWithPrefix() {\n+      String myId = \"ID:something\";\n+      assertTrue(\"'ID:' prefix should have been identified\", messageIdHelper.hasMessageIdPrefix(myId));\n+   }\n+\n+   /**\n+    * Test that {@link AMQPMessageIdHelper#hasMessageIdPrefix(String)} returns\n+    * false for string beings \"ID\" without colon.\n+    */\n+   @Test\n+   public void testHasIdPrefixWithIDButNoColonPrefix() {\n+      String myIdNoColon = \"IDsomething\";\n+      assertFalse(\"'ID' prefix should not have been identified without trailing colon\", messageIdHelper.hasMessageIdPrefix(myIdNoColon));\n    }\n \n    /**\n-    * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)} returns null if given\n-    * null\n+    * Test that {@link AMQPMessageIdHelper#hasMessageIdPrefix(String)} returns\n+    * false for null\n     */\n    @Test\n-   public void testToBaseMessageIdStringWithNull() {\n+   public void testHasIdPrefixWithNull() {\n       String nullString = null;\n-      assertNull(\"null string should have been returned\", messageIdHelper.toBaseMessageIdString(nullString));\n+      assertFalse(\"null string should not result in identification as having the prefix\", messageIdHelper.hasMessageIdPrefix(nullString));\n+   }\n+\n+   /**\n+    * Test that {@link AMQPMessageIdHelper#hasMessageIdPrefix(String)} returns\n+    * false for strings that doesnt have \"ID:\" anywhere\n+    */\n+   @Test\n+   public void testHasIdPrefixWithoutPrefix() {\n+      String myNonId = \"something\";\n+      assertFalse(\"string without 'ID:' anywhere should not have been identified as having the prefix\", messageIdHelper.hasMessageIdPrefix(myNonId));\n+   }\n+\n+   /**\n+    * Test that {@link AMQPMessageIdHelper#hasMessageIdPrefix(String)} returns\n+    * false for strings has lowercase \"id:\" prefix\n+    */\n+   @Test\n+   public void testHasIdPrefixWithLowercaseID() {\n+      String myLowerCaseNonId = \"id:something\";\n+      assertFalse(\"lowercase 'id:' prefix should not result in identification as having 'ID:' prefix\", messageIdHelper.hasMessageIdPrefix(myLowerCaseNonId));\n+   }\n+\n+   /**\n+    * Test that {@link AMQPMessageIdHelper#toMessageIdString(Object)} returns\n+    * null if given null\n+    */\n+   @Test\n+   public void testToMessageIdStringWithNull() {\n+      assertNull(\"null string should have been returned\", messageIdHelper.toMessageIdString(null));\n    }\n \n    /**\n-    * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)} throws an IAE if given\n-    * an unexpected object type.\n+    * Test that {@link AMQPMessageIdHelper#toMessageIdString(Object)} throws an\n+    * IAE if given an unexpected object type.\n     */\n    @Test\n-   public void testToBaseMessageIdStringThrowsIAEWithUnexpectedType() {\n+   public void testToMessageIdStringThrowsIAEWithUnexpectedType() {\n       try {\n-         messageIdHelper.toBaseMessageIdString(new Object());\n+         messageIdHelper.toMessageIdString(new Object());\n          fail(\"expected exception not thrown\");\n       } catch (IllegalArgumentException iae) {\n          // expected\n       }\n    }\n \n+   private void doToMessageIdTestImpl(Object idObject, String expected) {\n+      String idString = messageIdHelper.toMessageIdString(idObject);\n+      assertNotNull(\"null string should not have been returned\", idString);\n+      assertEquals(\"expected id string was not returned\", expected, idString);\n+   }\n+\n+   /**\n+    * Test that {@link AMQPMessageIdHelper#toMessageIdString(Object)} returns\n+    * the given basic \"ID:content\" string unchanged.\n+    */\n+   @Test\n+   public void testToMessageIdStringWithString() {\n+      String stringId = \"ID:myIdString\";\n+\n+      doToMessageIdTestImpl(stringId, stringId);\n+   }\n+\n    /**\n-    * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)} returns the given\n-    * basic string unchanged\n+    * Test that {@link AMQPMessageIdHelper#toMessageIdString(Object)} returns\n+    * the given basic string with the 'no prefix' prefix and \"ID:\" prefix.\n     */\n    @Test\n-   public void testToBaseMessageIdStringWithString() {\n-      String stringMessageId = \"myIdString\";\n+   public void testToMessageIdStringWithStringNoPrefix() {\n+      String stringId = \"myIdStringNoPrefix\";\n+      String expected = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_NO_PREFIX + stringId;\n \n-      String baseMessageIdString = messageIdHelper.toBaseMessageIdString(stringMessageId);\n-      assertNotNull(\"null string should not have been returned\", baseMessageIdString);\n-      assertEquals(\"expected base id string was not returned\", stringMessageId, baseMessageIdString);\n+      doToMessageIdTestImpl(stringId, expected);\n    }\n \n    /**\n-    * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)} returns a string\n-    * indicating an AMQP encoded string, when the given string happens to already begin with the\n-    * {@link AMQPMessageIdHelper#AMQP_UUID_PREFIX}.\n+    * Test that {@link AMQPMessageIdHelper#toMessageIdString(Object)} returns a\n+    * string indicating lack of \"ID:\" prefix, when the given string happens to\n+    * begin with the {@link AMQPMessageIdHelper#AMQP_UUID_PREFIX}.\n     */\n    @Test\n-   public void testToBaseMessageIdStringWithStringBeginningWithEncodingPrefixForUUID() {\n+   public void testToMessageIdStringWithStringBeginningWithEncodingPrefixForUUID() {\n       String uuidStringMessageId = AMQPMessageIdHelper.AMQP_UUID_PREFIX + UUID.randomUUID();\n-      String expected = AMQPMessageIdHelper.AMQP_STRING_PREFIX + uuidStringMessageId;\n+      String expected = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_NO_PREFIX + uuidStringMessageId;\n \n-      String baseMessageIdString = messageIdHelper.toBaseMessageIdString(uuidStringMessageId);\n-      assertNotNull(\"null string should not have been returned\", baseMessageIdString);\n-      assertEquals(\"expected base id string was not returned\", expected, baseMessageIdString);\n+      doToMessageIdTestImpl(uuidStringMessageId, expected);\n    }\n \n    /**\n-    * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)} returns a string\n-    * indicating an AMQP encoded string, when the given string happens to already begin with the\n-    * {@link AMQPMessageIdHelper#AMQP_ULONG_PREFIX}.\n+    * Test that {@link AMQPMessageIdHelper#toMessageIdString(Object)} returns a\n+    * string indicating lack of \"ID:\" prefix, when the given string happens to\n+    * begin with the {@link AMQPMessageIdHelper#AMQP_ULONG_PREFIX}.\n     */\n    @Test\n-   public void testToBaseMessageIdStringWithStringBeginningWithEncodingPrefixForLong() {\n+   public void testToMessageIdStringWithStringBeginningWithEncodingPrefixForLong() {\n       String longStringMessageId = AMQPMessageIdHelper.AMQP_ULONG_PREFIX + Long.valueOf(123456789L);\n-      String expected = AMQPMessageIdHelper.AMQP_STRING_PREFIX + longStringMessageId;\n+      String expected = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_NO_PREFIX + longStringMessageId;\n \n-      String baseMessageIdString = messageIdHelper.toBaseMessageIdString(longStringMessageId);\n-      assertNotNull(\"null string should not have been returned\", baseMessageIdString);\n-      assertEquals(\"expected base id string was not returned\", expected, baseMessageIdString);\n+      doToMessageIdTestImpl(longStringMessageId, expected);\n    }\n \n    /**\n-    * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)} returns a string\n-    * indicating an AMQP encoded string, when the given string happens to already begin with the\n-    * {@link AMQPMessageIdHelper#AMQP_BINARY_PREFIX}.\n+    * Test that {@link AMQPMessageIdHelper#toMessageIdString(Object)} returns a\n+    * string indicating lack of \"ID:\" prefix, when the given string happens to\n+    * begin with the {@link AMQPMessageIdHelper#AMQP_BINARY_PREFIX}.\n     */\n    @Test\n-   public void testToBaseMessageIdStringWithStringBeginningWithEncodingPrefixForBinary() {\n+   public void testToMessageIdStringWithStringBeginningWithEncodingPrefixForBinary() {\n       String binaryStringMessageId = AMQPMessageIdHelper.AMQP_BINARY_PREFIX + \"0123456789ABCDEF\";\n-      String expected = AMQPMessageIdHelper.AMQP_STRING_PREFIX + binaryStringMessageId;\n+      String expected = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_NO_PREFIX + binaryStringMessageId;\n \n-      String baseMessageIdString = messageIdHelper.toBaseMessageIdString(binaryStringMessageId);\n-      assertNotNull(\"null string should not have been returned\", baseMessageIdString);\n-      assertEquals(\"expected base id string was not returned\", expected, baseMessageIdString);\n+      doToMessageIdTestImpl(binaryStringMessageId, expected);\n    }\n \n    /**\n-    * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)} returns a string\n-    * indicating an AMQP encoded string (effectively twice), when the given string happens to\n-    * already begin with the {@link AMQPMessageIdHelper#AMQP_STRING_PREFIX}.\n+    * Test that {@link AMQPMessageIdHelper#toMessageIdString(Object)} returns a\n+    * string indicating lack of \"ID:\" prefix, when the given string happens to\n+    * begin with the {@link AMQPMessageIdHelper#AMQP_STRING_PREFIX}.\n     */\n    @Test\n-   public void testToBaseMessageIdStringWithStringBeginningWithEncodingPrefixForString() {\n+   public void testToMessageIdStringWithStringBeginningWithEncodingPrefixForString() {\n       String stringMessageId = AMQPMessageIdHelper.AMQP_STRING_PREFIX + \"myStringId\";\n-      String expected = AMQPMessageIdHelper.AMQP_STRING_PREFIX + stringMessageId;\n+      String expected = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_NO_PREFIX + stringMessageId;\n+\n+      doToMessageIdTestImpl(stringMessageId, expected);\n+   }\n+\n+   /**\n+    * Test that {@link AMQPMessageIdHelper#toMessageIdString(Object)} returns a\n+    * string indicating lack of \"ID:\" prefix, effectively twice, when the given\n+    * string happens to begin with the\n+    * {@link AMQPMessageIdHelper#AMQP_NO_PREFIX}.\n+    */\n+   @Test\n+   public void testToMessageIdStringWithStringBeginningWithEncodingPrefixForNoIdPrefix() {\n+      String stringMessageId = AMQPMessageIdHelper.AMQP_NO_PREFIX + \"myStringId\";\n+      String expected = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_NO_PREFIX + stringMessageId;\n \n-      String baseMessageIdString = messageIdHelper.toBaseMessageIdString(stringMessageId);\n-      assertNotNull(\"null string should not have been returned\", baseMessageIdString);\n-      assertEquals(\"expected base id string was not returned\", expected, baseMessageIdString);\n+      doToMessageIdTestImpl(stringMessageId, expected);\n    }\n \n    /**\n-    * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)} returns a string\n-    * indicating an AMQP encoded UUID when given a UUID object.\n+    * Test that {@link AMQPMessageIdHelper#toMessageIdString(Object)} returns a\n+    * string indicating an AMQP encoded UUID when given a UUID object.\n     */\n    @Test\n-   public void testToBaseMessageIdStringWithUUID() {\n+   public void testToMessageIdStringWithUUID() {\n       UUID uuidMessageId = UUID.randomUUID();\n-      String expected = AMQPMessageIdHelper.AMQP_UUID_PREFIX + uuidMessageId.toString();\n+      String expected = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_UUID_PREFIX + uuidMessageId.toString();\n \n-      String baseMessageIdString = messageIdHelper.toBaseMessageIdString(uuidMessageId);\n-      assertNotNull(\"null string should not have been returned\", baseMessageIdString);\n-      assertEquals(\"expected base id string was not returned\", expected, baseMessageIdString);\n+      doToMessageIdTestImpl(uuidMessageId, expected);\n    }\n \n    /**\n-    * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)} returns a string\n-    * indicating an AMQP encoded ulong when given a UnsignedLong object.\n+    * Test that {@link AMQPMessageIdHelper#toMessageIdString(Object)} returns a\n+    * string indicating an AMQP encoded ulong when given a UnsignedLong object.\n     */\n    @Test\n-   public void testToBaseMessageIdStringWithUnsignedLong() {\n+   public void testToMessageIdStringWithUnsignedLong() {\n       UnsignedLong uLongMessageId = UnsignedLong.valueOf(123456789L);\n-      String expected = AMQPMessageIdHelper.AMQP_ULONG_PREFIX + uLongMessageId.toString();\n+      String expected = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_ULONG_PREFIX + uLongMessageId.toString();\n+\n+      doToMessageIdTestImpl(uLongMessageId, expected);\n+   }\n+\n+   /**\n+    * Test that {@link AMQPMessageIdHelper#toMessageIdString(Object)} returns a\n+    * string indicating an AMQP encoded binary when given a Binary object.\n+    */\n+   @Test\n+   public void testToMessageIdStringWithBinary() {\n+      byte[] bytes = new byte[] {(byte) 0x00, (byte) 0xAB, (byte) 0x09, (byte) 0xFF};\n+      Binary binary = new Binary(bytes);\n+\n+      String expected = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_BINARY_PREFIX + \"00AB09FF\";\n+\n+      doToMessageIdTestImpl(binary, expected);\n+   }\n+\n+   /**\n+    * Test that {@link AMQPMessageIdHelper#toMessageIdString(Object)} returns a\n+    * string indicating an escaped string, when given an input string that\n+    * already has the \"ID:\" prefix, but follows it with an encoding prefix, in\n+    * this case the {@link AMQPMessageIdHelper#AMQP_STRING_PREFIX}.\n+    */\n+   @Test\n+   public void testToMessageIdStringWithStringBeginningWithIdAndEncodingPrefixForString() {\n+      String unescapedStringPrefixMessageId = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_STRING_PREFIX + \"id-content\";\n+      String expected = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_STRING_PREFIX + unescapedStringPrefixMessageId;\n+\n+      doToMessageIdTestImpl(unescapedStringPrefixMessageId, expected);\n+   }\n+\n+   /**\n+    * Test that {@link AMQPMessageIdHelper#toMessageIdString(Object)} returns a\n+    * string indicating an escaped string, when given an input string that\n+    * already has the \"ID:\" prefix, but follows it with an encoding prefix, in\n+    * this case the {@link AMQPMessageIdHelper#AMQP_UUID_PREFIX}.\n+    */\n+   @Test\n+   public void testToMessageIdStringWithStringBeginningWithIdAndEncodingPrefixForUUID() {\n+      String unescapedUuidPrefixMessageId = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_UUID_PREFIX + UUID.randomUUID();\n+      String expected = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_STRING_PREFIX + unescapedUuidPrefixMessageId;\n+\n+      doToMessageIdTestImpl(unescapedUuidPrefixMessageId, expected);\n+   }\n+\n+   /**\n+    * Test that {@link AMQPMessageIdHelper#toMessageIdString(Object)} returns a\n+    * string indicating an escaped string, when given an input string that\n+    * already has the \"ID:\" prefix, but follows it with an encoding prefix, in\n+    * this case the {@link AMQPMessageIdHelper#AMQP_ULONG_PREFIX}.\n+    */\n+   @Test\n+   public void testToMessageIdStringWithStringBeginningWithIdAndEncodingPrefixForUlong() {\n+      String unescapedUlongPrefixMessageId = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_ULONG_PREFIX + \"42\";\n+      String expected = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_STRING_PREFIX + unescapedUlongPrefixMessageId;\n+\n+      doToMessageIdTestImpl(unescapedUlongPrefixMessageId, expected);\n+   }\n+\n+   /**\n+    * Test that {@link AMQPMessageIdHelper#toMessageIdString(Object)} returns a\n+    * string indicating an escaped string, when given an input string that\n+    * already has the \"ID:\" prefix, but follows it with an encoding prefix, in\n+    * this case the {@link AMQPMessageIdHelper#AMQP_BINARY_PREFIX}.\n+    */\n+   @Test\n+   public void testToMessageIdStringWithStringBeginningWithIdAndEncodingPrefixForBinary() {\n+      String unescapedBinaryPrefixMessageId = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_BINARY_PREFIX + \"ABCDEF\";\n+      String expected = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_STRING_PREFIX + unescapedBinaryPrefixMessageId;\n+\n+      doToMessageIdTestImpl(unescapedBinaryPrefixMessageId, expected);\n+   }\n+\n+   /**\n+    * Test that {@link AMQPMessageIdHelper#toMessageIdString(Object)} returns a\n+    * string indicating an escaped string, when given an input string that\n+    * already has the \"ID:\" prefix, but follows it with an encoding prefix, in\n+    * this case the {@link AMQPMessageIdHelper#AMQP_NO_PREFIX}.\n+    */\n+   @Test\n+   public void testToMessageIdStringWithStringBeginningWithIdAndEncodingPrefixForNoIDPrefix() {\n+      String unescapedNoPrefixPrefixedMessageId = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_NO_PREFIX + \"id-content\";\n+      String expected = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_STRING_PREFIX + unescapedNoPrefixPrefixedMessageId;\n+\n+      doToMessageIdTestImpl(unescapedNoPrefixPrefixedMessageId, expected);\n+   }\n+\n+   /**\n+    * Test that {@link AMQPMessageIdHelper#toCorrelationIdString(Object)}\n+    * returns null if given null\n+    */\n+   @Test\n+   public void testToCorrelationIdStringWithNull() {\n+      assertNull(\"null string should have been returned\", messageIdHelper.toCorrelationIdString(null));\n+   }\n+\n+   /**\n+    * Test that {@link AMQPMessageIdHelper#toCorrelationIdString(Object)} throws\n+    * an IAE if given an unexpected object type.\n+    */\n+   @Test\n+   public void testToCorrelationIdStringThrowsIAEWithUnexpectedType() {\n+      try {\n+         messageIdHelper.toCorrelationIdString(new Object());\n+         fail(\"expected exception not thrown\");\n+      } catch (IllegalArgumentException iae) {\n+         // expected\n+      }\n+   }\n+\n+   private void doToCorrelationIDTestImpl(Object idObject, String expected) {\n+      String idString = messageIdHelper.toCorrelationIdString(idObject);\n+      assertNotNull(\"null string should not have been returned\", idString);\n+      assertEquals(\"expected id string was not returned\", expected, idString);\n+   }\n+\n+   /**\n+    * Test that {@link AMQPMessageIdHelper#toCorrelationIdString(Object)}\n+    * returns the given basic string unchanged when it has the \"ID:\" prefix (but\n+    * no others).\n+    */\n+   @Test\n+   public void testToCorrelationIdStringWithString() {\n+      String stringId = \"ID:myCorrelationIdString\";\n+\n+      doToCorrelationIDTestImpl(stringId, stringId);\n+   }\n+\n+   /**\n+    * Test that {@link AMQPMessageIdHelper#toCorrelationIdString(Object)}\n+    * returns the given basic string unchanged when it lacks the \"ID:\" prefix\n+    * (and any others)\n+    */\n+   @Test\n+   public void testToCorrelationIdStringWithStringNoPrefix() {\n+      String stringNoId = \"myCorrelationIdString\";\n+\n+      doToCorrelationIDTestImpl(stringNoId, stringNoId);\n+   }\n+\n+   /**\n+    * Test that {@link AMQPMessageIdHelper#toCorrelationIdString(Object)}\n+    * returns a string unchanged when it lacks the \"ID:\" prefix but happens to\n+    * already begin with the {@link AMQPMessageIdHelper#AMQP_UUID_PREFIX}.\n+    */\n+   @Test\n+   public void testToCorrelationIdStringWithStringBeginningWithEncodingPrefixForUUID() {\n+      String uuidPrefixStringCorrelationId = AMQPMessageIdHelper.AMQP_UUID_PREFIX + UUID.randomUUID();\n+\n+      doToCorrelationIDTestImpl(uuidPrefixStringCorrelationId, uuidPrefixStringCorrelationId);\n+   }\n+\n+   /**\n+    * Test that {@link AMQPMessageIdHelper#toCorrelationIdString(Object)}\n+    * returns a string unchanged when it lacks the \"ID:\" prefix but happens to\n+    * already begin with the {@link AMQPMessageIdHelper#AMQP_ULONG_PREFIX}.\n+    */\n+   @Test\n+   public void testToCorrelationIdStringWithStringBeginningWithEncodingPrefixForLong() {\n+      String ulongPrefixStringCorrelationId = AMQPMessageIdHelper.AMQP_ULONG_PREFIX + Long.valueOf(123456789L);\n+\n+      doToCorrelationIDTestImpl(ulongPrefixStringCorrelationId, ulongPrefixStringCorrelationId);\n+   }\n+\n+   /**\n+    * Test that {@link AMQPMessageIdHelper#toCorrelationIdString(Object)}\n+    * returns a string unchanged when it lacks the \"ID:\" prefix but happens to\n+    * already begin with the {@link AMQPMessageIdHelper#AMQP_BINARY_PREFIX}.\n+    */\n+   @Test\n+   public void testToCorrelationIdStringWithStringBeginningWithEncodingPrefixForBinary() {\n+      String binaryPrefixStringCorrelationId = AMQPMessageIdHelper.AMQP_BINARY_PREFIX + \"0123456789ABCDEF\";\n+\n+      doToCorrelationIDTestImpl(binaryPrefixStringCorrelationId, binaryPrefixStringCorrelationId);\n+   }\n+\n+   /**\n+    * Test that {@link AMQPMessageIdHelper#toCorrelationIdString(Object)}\n+    * returns a string unchanged when it lacks the \"ID:\" prefix but happens to\n+    * already begin with the {@link AMQPMessageIdHelper#AMQP_STRING_PREFIX}.\n+    */\n+   @Test\n+   public void testToCorrelationIdStringWithStringBeginningWithEncodingPrefixForString() {\n+      String stringPrefixCorrelationId = AMQPMessageIdHelper.AMQP_STRING_PREFIX + \"myStringId\";\n+\n+      doToCorrelationIDTestImpl(stringPrefixCorrelationId, stringPrefixCorrelationId);\n+   }\n+\n+   /**\n+    * Test that {@link AMQPMessageIdHelper#toCorrelationIdString(Object)}\n+    * returns a string unchanged when it lacks the \"ID:\" prefix but happens to\n+    * already begin with the {@link AMQPMessageIdHelper#AMQP_NO_PREFIX}.\n+    */\n+   @Test\n+   public void testToCorrelationIdStringWithStringBeginningWithEncodingPrefixForNoIdPrefix() {\n+      String noPrefixStringCorrelationId = AMQPMessageIdHelper.AMQP_NO_PREFIX + \"myStringId\";\n+\n+      doToCorrelationIDTestImpl(noPrefixStringCorrelationId, noPrefixStringCorrelationId);\n+   }\n \n-      String baseMessageIdString = messageIdHelper.toBaseMessageIdString(uLongMessageId);\n-      assertNotNull(\"null string should not have been returned\", baseMessageIdString);\n-      assertEquals(\"expected base id string was not returned\", expected, baseMessageIdString);\n+   /**\n+    * Test that {@link AMQPMessageIdHelper#toCorrelationIdString(Object)}\n+    * returns a string indicating an AMQP encoded UUID when given a UUID object.\n+    */\n+   @Test\n+   public void testToCorrelationIdStringWithUUID() {\n+      UUID uuidCorrelationId = UUID.randomUUID();\n+      String expected = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_UUID_PREFIX + uuidCorrelationId.toString();\n+\n+      doToCorrelationIDTestImpl(uuidCorrelationId, expected);\n+   }\n+\n+   /**\n+    * Test that {@link AMQPMessageIdHelper#toCorrelationIdString(Object)}\n+    * returns a string indicating an AMQP encoded ulong when given a\n+    * UnsignedLong object.\n+    */\n+   @Test\n+   public void testToCorrelationIdStringWithUnsignedLong() {\n+      UnsignedLong uLongCorrelationId = UnsignedLong.valueOf(123456789L);\n+      String expected = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_ULONG_PREFIX + uLongCorrelationId.toString();\n+\n+      doToCorrelationIDTestImpl(uLongCorrelationId, expected);\n    }\n \n    /**\n-    * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)} returns a string\n-    * indicating an AMQP encoded binary when given a Binary object.\n+    * Test that {@link AMQPMessageIdHelper#toCorrelationIdString(Object)}\n+    * returns a string indicating an AMQP encoded binary when given a Binary\n+    * object.\n     */\n    @Test\n-   public void testToBaseMessageIdStringWithBinary() {\n+   public void testToCorrelationIdStringWithBinary() {\n       byte[] bytes = new byte[] {(byte) 0x00, (byte) 0xAB, (byte) 0x09, (byte) 0xFF};\n       Binary binary = new Binary(bytes);\n \n-      String expected = AMQPMessageIdHelper.AMQP_BINARY_PREFIX + \"00AB09FF\";\n+      String expected = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_BINARY_PREFIX + \"00AB09FF\";\n \n-      String baseMessageIdString = messageIdHelper.toBaseMessageIdString(binary);\n-      assertNotNull(\"null string should not have been returned\", baseMessageIdString);\n-      assertEquals(\"expected base id string was not returned\", expected, baseMessageIdString);\n+      doToCorrelationIDTestImpl(binary, expected);\n    }\n \n    /**\n-    * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns an UnsignedLong when\n-    * given a string indicating an encoded AMQP ulong id.\n+    * Test that {@link AMQPMessageIdHelper#toCorrelationIdString(Object)}\n+    * returns a string indicating an escaped string, when given an input string\n+    * that already has the \"ID:\" prefix, but follows it with an encoding prefix,\n+    * in this case the {@link AMQPMessageIdHelper#AMQP_STRING_PREFIX}.\n+    */\n+   @Test\n+   public void testToCorrelationIdStringWithStringBeginningWithIdAndEncodingPrefixForString() {\n+      String unescapedStringPrefixCorrelationId = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_STRING_PREFIX + \"id-content\";\n+      String expected = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_STRING_PREFIX + unescapedStringPrefixCorrelationId;\n+\n+      doToCorrelationIDTestImpl(unescapedStringPrefixCorrelationId, expected);\n+   }\n+\n+   /**\n+    * Test that {@link AMQPMessageIdHelper#toCorrelationIdString(Object)}\n+    * returns a string indicating an escaped string, when given an input string\n+    * that already has the \"ID:\" prefix, but follows it with an encoding prefix,\n+    * in this case the {@link AMQPMessageIdHelper#AMQP_UUID_PREFIX}.\n+    */\n+   @Test\n+   public void testToCorrelationIdStringWithStringBeginningWithIdAndEncodingPrefixForUUID() {\n+      String unescapedUuidPrefixCorrelationId = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_UUID_PREFIX + UUID.randomUUID();\n+      String expected = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_STRING_PREFIX + unescapedUuidPrefixCorrelationId;\n+\n+      doToCorrelationIDTestImpl(unescapedUuidPrefixCorrelationId, expected);\n+   }\n+\n+   /**\n+    * Test that {@link AMQPMessageIdHelper#toCorrelationIdString(Object)}\n+    * returns a string indicating an escaped string, when given an input string\n+    * that already has the \"ID:\" prefix, but follows it with an encoding prefix,\n+    * in this case the {@link AMQPMessageIdHelper#AMQP_ULONG_PREFIX}.\n+    */\n+   @Test\n+   public void testToCorrelationIdStringWithStringBeginningWithIdAndEncodingPrefixForUlong() {\n+      String unescapedUlongPrefixCorrelationId = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_ULONG_PREFIX + \"42\";\n+      String expected = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_STRING_PREFIX + unescapedUlongPrefixCorrelationId;\n+\n+      doToCorrelationIDTestImpl(unescapedUlongPrefixCorrelationId, expected);\n+   }\n+\n+   /**\n+    * Test that {@link AMQPMessageIdHelper#toCorrelationIdString(Object)}\n+    * returns a string indicating an escaped string, when given an input string\n+    * that already has the \"ID:\" prefix, but follows it with an encoding prefix,\n+    * in this case the {@link AMQPMessageIdHelper#AMQP_BINARY_PREFIX}.\n+    */\n+   @Test\n+   public void testToCorrelationIdStringWithStringBeginningWithIdAndEncodingPrefixForBinary() {\n+      String unescapedBinaryPrefixCorrelationId = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_BINARY_PREFIX + \"ABCDEF\";\n+      String expected = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_STRING_PREFIX + unescapedBinaryPrefixCorrelationId;\n+\n+      doToCorrelationIDTestImpl(unescapedBinaryPrefixCorrelationId, expected);\n+   }\n+\n+   /**\n+    * Test that {@link AMQPMessageIdHelper#toCorrelationIdString(Object)}\n+    * returns a string indicating an escaped string, when given an input string\n+    * that already has the \"ID:\" prefix, but follows it with an encoding prefix,\n+    * in this case the {@link AMQPMessageIdHelper#AMQP_NO_PREFIX}.\n+    */\n+   @Test\n+   public void testToCorrelationIdStringWithStringBeginningWithIdAndEncodingPrefixForNoIDPrefix() {\n+      String unescapedNoPrefixCorrelationId = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_NO_PREFIX + \"id-content\";\n+      String expected = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_STRING_PREFIX + unescapedNoPrefixCorrelationId;\n+\n+      doToCorrelationIDTestImpl(unescapedNoPrefixCorrelationId, expected);\n+   }\n+\n+   private void doToIdObjectTestImpl(String idString, Object expected) throws ActiveMQAMQPIllegalStateException {\n+      Object idObject = messageIdHelper.toIdObject(idString);\n+      assertNotNull(\"null object should not have been returned\", idObject);\n+      assertEquals(\"expected id object was not returned\", expected, idObject);\n+   }\n+\n+   /**\n+    * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns an\n+    * UnsignedLong when given a string indicating an encoded AMQP ulong id.\n     *\n     * @throws Exception\n     *         if an error occurs during the test.\n     */\n    @Test\n    public void testToIdObjectWithEncodedUlong() throws Exception {\n       UnsignedLong longId = UnsignedLong.valueOf(123456789L);\n-      String provided = AMQPMessageIdHelper.AMQP_ULONG_PREFIX + \"123456789\";\n+      String provided = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_ULONG_PREFIX + \"123456789\";\n \n-      Object idObject = messageIdHelper.toIdObject(provided);\n-      assertNotNull(\"null object should not have been returned\", idObject);\n-      assertEquals(\"expected id object was not returned\", longId, idObject);\n+      doToIdObjectTestImpl(provided, longId);\n    }\n \n    /**\n-    * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns a Binary when given a\n-    * string indicating an encoded AMQP binary id, using upper case hex characters\n+    * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns a Binary\n+    * when given a string indicating an encoded AMQP binary id, using upper case\n+    * hex characters\n     *\n     * @throws Exception\n     *         if an error occurs during the test.\n@@ -213,15 +576,14 @@ public void testToIdObjectWithEncodedBinaryUppercaseHexString() throws Exception\n       byte[] bytes = new byte[] {(byte) 0x00, (byte) 0xAB, (byte) 0x09, (byte) 0xFF};\n       Binary binaryId = new Binary(bytes);\n \n-      String provided = AMQPMessageIdHelper.AMQP_BINARY_PREFIX + \"00AB09FF\";\n+      String provided = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_BINARY_PREFIX + \"00AB09FF\";\n \n-      Object idObject = messageIdHelper.toIdObject(provided);\n-      assertNotNull(\"null object should not have been returned\", idObject);\n-      assertEquals(\"expected id object was not returned\", binaryId, idObject);\n+      doToIdObjectTestImpl(provided, binaryId);\n    }\n \n    /**\n-    * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns null when given null.\n+    * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns null when\n+    * given null.\n     *\n     * @throws Exception\n     *         if an error occurs during the test.\n@@ -232,8 +594,9 @@ public void testToIdObjectWithNull() throws Exception {\n    }\n \n    /**\n-    * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns a Binary when given a\n-    * string indicating an encoded AMQP binary id, using lower case hex characters.\n+    * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns a Binary\n+    * when given a string indicating an encoded AMQP binary id, using lower case\n+    * hex characters.\n     *\n     * @throws Exception\n     *         if an error occurs during the test.\n@@ -243,150 +606,185 @@ public void testToIdObjectWithEncodedBinaryLowercaseHexString() throws Exception\n       byte[] bytes = new byte[] {(byte) 0x00, (byte) 0xAB, (byte) 0x09, (byte) 0xFF};\n       Binary binaryId = new Binary(bytes);\n \n-      String provided = AMQPMessageIdHelper.AMQP_BINARY_PREFIX + \"00ab09ff\";\n+      String provided = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_BINARY_PREFIX + \"00ab09ff\";\n \n-      Object idObject = messageIdHelper.toIdObject(provided);\n-      assertNotNull(\"null object should not have been returned\", idObject);\n-      assertEquals(\"expected id object was not returned\", binaryId, idObject);\n+      doToIdObjectTestImpl(provided, binaryId);\n    }\n \n    /**\n-    * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns a UUID when given a\n-    * string indicating an encoded AMQP uuid id.\n+    * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns a UUID\n+    * when given a string indicating an encoded AMQP uuid id.\n     *\n     * @throws Exception\n     *         if an error occurs during the test.\n     */\n    @Test\n    public void testToIdObjectWithEncodedUuid() throws Exception {\n       UUID uuid = UUID.randomUUID();\n-      String provided = AMQPMessageIdHelper.AMQP_UUID_PREFIX + uuid.toString();\n+      String provided = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_UUID_PREFIX + uuid.toString();\n \n-      Object idObject = messageIdHelper.toIdObject(provided);\n-      assertNotNull(\"null object should not have been returned\", idObject);\n-      assertEquals(\"expected id object was not returned\", uuid, idObject);\n+      doToIdObjectTestImpl(provided, uuid);\n    }\n \n    /**\n-    * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns a string when given a\n-    * string without any type encoding prefix.\n+    * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns a string\n+    * unchanged when given a string without any prefix.\n     *\n     * @throws Exception\n     *         if an error occurs during the test.\n     */\n    @Test\n-   public void testToIdObjectWithStringContainingNoEncodingPrefix() throws Exception {\n+   public void testToIdObjectWithAppSpecificString() throws Exception {\n       String stringId = \"myStringId\";\n \n-      Object idObject = messageIdHelper.toIdObject(stringId);\n-      assertNotNull(\"null object should not have been returned\", idObject);\n-      assertEquals(\"expected id object was not returned\", stringId, idObject);\n+      doToIdObjectTestImpl(stringId, stringId);\n    }\n \n    /**\n-    * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns the remainder of the\n-    * provided string after removing the {@link AMQPMessageIdHelper#AMQP_STRING_PREFIX} prefix.\n+    * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns a string\n+    * unchanged when given a string with only the 'ID:' prefix.\n     *\n     * @throws Exception\n     *         if an error occurs during the test.\n     */\n    @Test\n-   public void testToIdObjectWithStringContainingStringEncodingPrefix() throws Exception {\n+   public void testToIdObjectWithSimplIdString() throws Exception {\n+      String stringId = \"ID:myStringId\";\n+\n+      doToIdObjectTestImpl(stringId, stringId);\n+   }\n+\n+   /**\n+    * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns the\n+    * remainder of the provided string after removing the 'ID:' and\n+    * {@link AMQPMessageIdHelper#AMQP_NO_PREFIX} prefix used to indicate it\n+    * originally had no 'ID:' prefix [when arriving as a message id].\n+    *\n+    * @throws Exception\n+    *         if an error occurs during the test.\n+    */\n+   @Test\n+   public void testToIdObjectWithStringContainingEncodingPrefixForNoIdPrefix() throws Exception {\n       String suffix = \"myStringSuffix\";\n-      String stringId = AMQPMessageIdHelper.AMQP_STRING_PREFIX + suffix;\n+      String stringId = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_NO_PREFIX + suffix;\n \n-      Object idObject = messageIdHelper.toIdObject(stringId);\n-      assertNotNull(\"null object should not have been returned\", idObject);\n-      assertEquals(\"expected id object was not returned\", suffix, idObject);\n+      doToIdObjectTestImpl(stringId, suffix);\n    }\n \n    /**\n-    * Test that when given a string with with the {@link AMQPMessageIdHelper#AMQP_STRING_PREFIX}\n-    * prefix and then additionally the {@link AMQPMessageIdHelper#AMQP_UUID_PREFIX}, the\n-    * {@link AMQPMessageIdHelper#toIdObject(String)} method returns the remainder of the\n-    * provided string after removing the {@link AMQPMessageIdHelper#AMQP_STRING_PREFIX} prefix.\n+    * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns the\n+    * remainder of the provided string after removing the\n+    * {@link AMQPMessageIdHelper#AMQP_STRING_PREFIX} prefix.\n     *\n     * @throws Exception\n     *         if an error occurs during the test.\n     */\n    @Test\n-   public void testToIdObjectWithStringContainingStringEncodingPrefixAndThenUuidPrefix() throws Exception {\n+   public void testToIdObjectWithStringContainingIdStringEncodingPrefix() throws Exception {\n+      String suffix = \"myStringSuffix\";\n+      String stringId = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_STRING_PREFIX + suffix;\n+\n+      doToIdObjectTestImpl(stringId, suffix);\n+   }\n+\n+   /**\n+    * Test that when given a string with with the\n+    * {@link AMQPMessageIdHelper#AMQP_STRING_PREFIX} prefix and then\n+    * additionally the {@link AMQPMessageIdHelper#AMQP_UUID_PREFIX}, the\n+    * {@link AMQPMessageIdHelper#toIdObject(String)} method returns the\n+    * remainder of the provided string after removing the\n+    * {@link AMQPMessageIdHelper#AMQP_STRING_PREFIX} prefix.\n+    *\n+    * @throws Exception\n+    *         if an error occurs during the test.\n+    */\n+   @Test\n+   public void testToIdObjectWithStringContainingIdStringEncodingPrefixAndThenUuidPrefix() throws Exception {\n       String encodedUuidString = AMQPMessageIdHelper.AMQP_UUID_PREFIX + UUID.randomUUID().toString();\n-      String stringId = AMQPMessageIdHelper.AMQP_STRING_PREFIX + encodedUuidString;\n+      String stringId = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_STRING_PREFIX + encodedUuidString;\n \n-      Object idObject = messageIdHelper.toIdObject(stringId);\n-      assertNotNull(\"null object should not have been returned\", idObject);\n-      assertEquals(\"expected id object was not returned\", encodedUuidString, idObject);\n+      doToIdObjectTestImpl(stringId, encodedUuidString);\n    }\n \n    /**\n     * Test that {@link AMQPMessageIdHelper#toIdObject(String)} throws an\n-    * {@link IdConversionException} when presented with an encoded binary hex string of uneven\n-    * length (after the prefix) that thus can't be converted due to each byte using 2 characters\n+    * {@link IdConversionException} when presented with an encoded binary hex\n+    * string of uneven length (after the prefix) that thus can't be converted\n+    * due to each byte using 2 characters\n     */\n    @Test\n-   public void testToIdObjectWithStringContainingBinaryHexThrowsWithUnevenLengthString() {\n-      String unevenHead = AMQPMessageIdHelper.AMQP_BINARY_PREFIX + \"123\";\n+   public void testToIdObjectWithStringContainingBinaryHexThrowsICEWithUnevenLengthString() {\n+      String unevenHead = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_BINARY_PREFIX + \"123\";\n \n       try {\n          messageIdHelper.toIdObject(unevenHead);\n          fail(\"expected exception was not thrown\");\n-      } catch (ActiveMQAMQPException ex) {\n+      } catch (ActiveMQAMQPIllegalStateException iae) {\n          // expected\n+         String msg = iae.getMessage();\n+         assertTrue(\"Message was not as expected: \" + msg, msg.contains(\"even length\"));\n       }\n    }\n \n    /**\n     * Test that {@link AMQPMessageIdHelper#toIdObject(String)} throws an\n-    * {@link IdConversionException} when presented with an encoded binary hex string (after the\n-    * prefix) that contains characters other than 0-9 and A-F and a-f, and thus can't be\n-    * converted\n+    * {@link IdConversionException} when presented with an encoded binary hex\n+    * string (after the prefix) that contains characters other than 0-9 and A-F\n+    * and a-f, and thus can't be converted\n     */\n    @Test\n-   public void testToIdObjectWithStringContainingBinaryHexThrowsWithNonHexCharacters() {\n+   public void testToIdObjectWithStringContainingBinaryHexThrowsICEWithNonHexCharacters() {\n \n       // char before '0'\n       char nonHexChar = '/';\n-      String nonHexString = AMQPMessageIdHelper.AMQP_BINARY_PREFIX + nonHexChar + nonHexChar;\n+      String nonHexString = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_BINARY_PREFIX + nonHexChar + nonHexChar;\n \n       try {\n          messageIdHelper.toIdObject(nonHexString);\n          fail(\"expected exception was not thrown\");\n-      } catch (ActiveMQAMQPException ex) {\n+      } catch (ActiveMQAMQPIllegalStateException ice) {\n          // expected\n+         String msg = ice.getMessage();\n+         assertTrue(\"Message was not as expected: \" + msg, msg.contains(\"non-hex\"));\n       }\n \n       // char after '9', before 'A'\n       nonHexChar = ':';\n-      nonHexString = AMQPMessageIdHelper.AMQP_BINARY_PREFIX + nonHexChar + nonHexChar;\n+      nonHexString = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_BINARY_PREFIX + nonHexChar + nonHexChar;\n \n       try {\n          messageIdHelper.toIdObject(nonHexString);\n          fail(\"expected exception was not thrown\");\n-      } catch (ActiveMQAMQPException ex) {\n+      } catch (ActiveMQAMQPIllegalStateException iae) {\n          // expected\n+         String msg = iae.getMessage();\n+         assertTrue(\"Message was not as expected: \" + msg, msg.contains(\"non-hex\"));\n       }\n \n       // char after 'F', before 'a'\n       nonHexChar = 'G';\n-      nonHexString = AMQPMessageIdHelper.AMQP_BINARY_PREFIX + nonHexChar + nonHexChar;\n+      nonHexString = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_BINARY_PREFIX + nonHexChar + nonHexChar;\n \n       try {\n          messageIdHelper.toIdObject(nonHexString);\n          fail(\"expected exception was not thrown\");\n-      } catch (ActiveMQAMQPException ex) {\n+      } catch (ActiveMQAMQPIllegalStateException iae) {\n          // expected\n+         String msg = iae.getMessage();\n+         assertTrue(\"Message was not as expected: \" + msg, msg.contains(\"non-hex\"));\n       }\n \n       // char after 'f'\n       nonHexChar = 'g';\n-      nonHexString = AMQPMessageIdHelper.AMQP_BINARY_PREFIX + nonHexChar + nonHexChar;\n+      nonHexString = AMQPMessageIdHelper.JMS_ID_PREFIX + AMQPMessageIdHelper.AMQP_BINARY_PREFIX + nonHexChar + nonHexChar;\n \n       try {\n          messageIdHelper.toIdObject(nonHexString);\n          fail(\"expected exception was not thrown\");\n-      } catch (ActiveMQAMQPException ex) {\n+      } catch (ActiveMQAMQPIllegalStateException ice) {\n          // expected\n+         String msg = ice.getMessage();\n+         assertTrue(\"Message was not as expected: \" + msg, msg.contains(\"non-hex\"));\n       }\n    }\n }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/6d94997aa8c9c0ed4d02ac9934eceee4161cdea0/artemis-protocols/artemis-amqp-protocol/src/test/java/org/apache/activemq/artemis/protocol/amqp/converter/message/AMQPMessageIdHelperTest.java",
                "sha": "bd7192bb93631c0df7f5ac1de153fa3b0e999295",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/6d94997aa8c9c0ed4d02ac9934eceee4161cdea0/tests/artemis-test-support/src/main/java/org/apache/activemq/transport/amqp/client/AmqpMessage.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/artemis-test-support/src/main/java/org/apache/activemq/transport/amqp/client/AmqpMessage.java?ref=6d94997aa8c9c0ed4d02ac9934eceee4161cdea0",
                "deletions": 0,
                "filename": "tests/artemis-test-support/src/main/java/org/apache/activemq/transport/amqp/client/AmqpMessage.java",
                "patch": "@@ -389,6 +389,31 @@ public String getGroupId() {\n       return message.getProperties().getGroupId();\n    }\n \n+   /**\n+    * Sets the Subject property on an outbound message using the provided String\n+    *\n+    * @param subject the String Subject value to set.\n+    */\n+   public void setSubject(String subject) {\n+      checkReadOnly();\n+      lazyCreateProperties();\n+      getWrappedMessage().setSubject(subject);\n+   }\n+\n+   /**\n+    * Return the set Subject value in String form, if there are no properties\n+    * in the given message return null.\n+    *\n+    * @return the set Subject in String form or null if not set.\n+    */\n+   public String getSubject() {\n+      if (message.getProperties() == null) {\n+         return null;\n+      }\n+\n+      return message.getProperties().getSubject();\n+   }\n+\n    /**\n     * Sets the durable header on the outgoing message.\n     *",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/6d94997aa8c9c0ed4d02ac9934eceee4161cdea0/tests/artemis-test-support/src/main/java/org/apache/activemq/transport/amqp/client/AmqpMessage.java",
                "sha": "bd5551cbd944158bed6eac42f07133e1766e162e",
                "status": "modified"
            },
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/6d94997aa8c9c0ed4d02ac9934eceee4161cdea0/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/AmqpSendReceiveTest.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/AmqpSendReceiveTest.java?ref=6d94997aa8c9c0ed4d02ac9934eceee4161cdea0",
                "deletions": 0,
                "filename": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/AmqpSendReceiveTest.java",
                "patch": "@@ -418,6 +418,37 @@ public void testReceiveWithJMSSelectorFilter() throws Exception {\n       connection.close();\n    }\n \n+   @Test(timeout = 60000)\n+   public void testReceiveWithJMSSelectorFilterOnJMSType() throws Exception {\n+      AmqpClient client = createAmqpClient();\n+      AmqpConnection connection = addConnection(client.connect());\n+      AmqpSession session = connection.createSession();\n+\n+      AmqpMessage message1 = new AmqpMessage();\n+      message1.setText(\"msg:1\");\n+\n+      AmqpMessage message2 = new AmqpMessage();\n+      message2.setSubject(\"target\");\n+      message2.setText(\"msg:2\");\n+\n+      AmqpSender sender = session.createSender(getQueueName());\n+      sender.send(message1);\n+      sender.send(message2);\n+      sender.close();\n+\n+      AmqpReceiver receiver = session.createReceiver(getQueueName(), \"JMSType = 'target'\");\n+      receiver.flow(2);\n+      AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);\n+      assertNotNull(\"Should have read a message\", received);\n+      assertEquals(\"target\", received.getSubject());\n+      received.accept();\n+\n+      assertNull(receiver.receive(1, TimeUnit.SECONDS));\n+\n+      receiver.close();\n+      connection.close();\n+   }\n+\n    @Test(timeout = 60000)\n    public void testAdvancedLinkFlowControl() throws Exception {\n       final int MSG_COUNT = 20;",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/6d94997aa8c9c0ed4d02ac9934eceee4161cdea0/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/AmqpSendReceiveTest.java",
                "sha": "5c16dfb3f0241270ead298959b77dbb53d9f078e",
                "status": "modified"
            },
            {
                "additions": 247,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/6d94997aa8c9c0ed4d02ac9934eceee4161cdea0/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/JMSMessageConsumerTest.java",
                "changes": 276,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/JMSMessageConsumerTest.java?ref=6d94997aa8c9c0ed4d02ac9934eceee4161cdea0",
                "deletions": 29,
                "filename": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/JMSMessageConsumerTest.java",
                "patch": "@@ -16,6 +16,13 @@\n  */\n package org.apache.activemq.artemis.tests.integration.amqp;\n \n+import java.util.ArrayList;\n+import java.util.Enumeration;\n+import java.util.Random;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n import javax.jms.BytesMessage;\n import javax.jms.Connection;\n import javax.jms.DeliveryMode;\n@@ -28,11 +35,6 @@\n import javax.jms.QueueBrowser;\n import javax.jms.Session;\n import javax.jms.TextMessage;\n-import java.util.ArrayList;\n-import java.util.Enumeration;\n-import java.util.Random;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n \n import org.apache.activemq.artemis.core.server.Queue;\n import org.apache.activemq.artemis.tests.util.Wait;\n@@ -167,13 +169,29 @@ private void testPriority(Connection connection1, Connection connection2) throws\n    }\n \n    @Test(timeout = 60000)\n-   public void testSelector() throws Exception {\n+   public void testSelectorOnTopic() throws Exception {\n+      doTestSelector(true);\n+   }\n+\n+   @Test(timeout = 60000)\n+   public void testSelectorOnQueue() throws Exception {\n+      doTestSelector(false);\n+   }\n+\n+   private void doTestSelector(boolean topic) throws Exception {\n       Connection connection = createConnection();\n \n       try {\n          Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n-         javax.jms.Queue queue = session.createQueue(getQueueName());\n-         MessageProducer producer = session.createProducer(queue);\n+         Destination destination = null;\n+         if (topic) {\n+            destination = session.createTopic(getTopicName());\n+         } else {\n+            destination = session.createQueue(getQueueName());\n+         }\n+\n+         MessageProducer producer = session.createProducer(destination);\n+         MessageConsumer messageConsumer = session.createConsumer(destination, \"color = 'RED'\");\n \n          TextMessage message = session.createTextMessage();\n          message.setText(\"msg:0\");\n@@ -185,7 +203,6 @@ public void testSelector() throws Exception {\n \n          connection.start();\n \n-         MessageConsumer messageConsumer = session.createConsumer(queue, \"color = 'RED'\");\n          TextMessage m = (TextMessage) messageConsumer.receive(5000);\n          assertNotNull(m);\n          assertEquals(\"msg:1\", m.getText());\n@@ -195,28 +212,75 @@ public void testSelector() throws Exception {\n       }\n    }\n \n-   @SuppressWarnings(\"rawtypes\")\n    @Test(timeout = 30000)\n-   public void testSelectorsWithJMSType() throws Exception {\n-      Connection connection = createConnection();\n+   public void testSelectorsWithJMSTypeOnTopic() throws Exception {\n+      doTestSelectorsWithJMSType(true);\n+   }\n+\n+   @Test(timeout = 30000)\n+   public void testSelectorsWithJMSTypeOnQueue() throws Exception {\n+      doTestSelectorsWithJMSType(false);\n+   }\n+\n+   private void doTestSelectorsWithJMSType(boolean topic) throws Exception {\n+      final Connection connection = createConnection();\n+      final String type = \"myJMSType\";\n \n       try {\n          Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n-         javax.jms.Queue queue = session.createQueue(getQueueName());\n-         MessageProducer p = session.createProducer(queue);\n+         Destination destination = null;\n+         if (topic) {\n+            destination = session.createTopic(getTopicName());\n+         } else {\n+            destination = session.createQueue(getQueueName());\n+         }\n \n-         TextMessage message = session.createTextMessage();\n-         message.setText(\"text\");\n-         p.send(message, DeliveryMode.NON_PERSISTENT, Message.DEFAULT_PRIORITY, Message.DEFAULT_TIME_TO_LIVE);\n+         MessageProducer producer = session.createProducer(destination);\n+         MessageConsumer consumer = session.createConsumer(destination, \"JMSType = '\" + type + \"'\");\n+\n+         TextMessage message1 = session.createTextMessage();\n+         message1.setText(\"text\");\n+         producer.send(message1, DeliveryMode.NON_PERSISTENT, Message.DEFAULT_PRIORITY, Message.DEFAULT_TIME_TO_LIVE);\n \n          TextMessage message2 = session.createTextMessage();\n-         String type = \"myJMSType\";\n          message2.setJMSType(type);\n          message2.setText(\"text + type\");\n-         p.send(message2, DeliveryMode.NON_PERSISTENT, Message.DEFAULT_PRIORITY, Message.DEFAULT_TIME_TO_LIVE);\n+         producer.send(message2, DeliveryMode.NON_PERSISTENT, Message.DEFAULT_PRIORITY, Message.DEFAULT_TIME_TO_LIVE);\n+\n+         connection.start();\n+\n+         Message msg = consumer.receive(2000);\n+         assertNotNull(msg);\n+         assertTrue(msg instanceof TextMessage);\n+         assertEquals(\"Unexpected JMSType value\", type, msg.getJMSType());\n+         assertEquals(\"Unexpected message content\", \"text + type\", ((TextMessage) msg).getText());\n+      } finally {\n+         connection.close();\n+      }\n+   }\n+\n+   @Test(timeout = 30000)\n+   public void testSelectorsWithJMSCorrelationID() throws Exception {\n+      Connection connection = createConnection();\n+\n+      final String correlationID = UUID.randomUUID().toString();\n+\n+      try {\n+         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+         javax.jms.Queue queue = session.createQueue(getQueueName());\n+         MessageProducer producer = session.createProducer(queue);\n+\n+         TextMessage message1 = session.createTextMessage();\n+         message1.setText(\"text\");\n+         producer.send(message1);\n+\n+         TextMessage message2 = session.createTextMessage();\n+         message2.setJMSCorrelationID(correlationID);\n+         message2.setText(\"JMSCorrelationID\");\n+         producer.send(message2);\n \n          QueueBrowser browser = session.createBrowser(queue);\n-         Enumeration enumeration = browser.getEnumeration();\n+         Enumeration<?> enumeration = browser.getEnumeration();\n          int count = 0;\n          while (enumeration.hasMoreElements()) {\n             Message m = (Message) enumeration.nextElement();\n@@ -226,37 +290,36 @@ public void testSelectorsWithJMSType() throws Exception {\n \n          assertEquals(2, count);\n \n-         MessageConsumer consumer = session.createConsumer(queue, \"JMSType = '\" + type + \"'\");\n+         MessageConsumer consumer = session.createConsumer(queue, \"JMSCorrelationID = '\" + correlationID + \"'\");\n          Message msg = consumer.receive(2000);\n          assertNotNull(msg);\n          assertTrue(msg instanceof TextMessage);\n-         assertEquals(\"Unexpected JMSType value\", type, msg.getJMSType());\n-         assertEquals(\"Unexpected message content\", \"text + type\", ((TextMessage) msg).getText());\n+         assertEquals(\"Unexpected JMSCorrelationID value\", correlationID, msg.getJMSCorrelationID());\n+         assertEquals(\"Unexpected message content\", \"JMSCorrelationID\", ((TextMessage) msg).getText());\n       } finally {\n          connection.close();\n       }\n    }\n \n-   @SuppressWarnings(\"rawtypes\")\n    @Test(timeout = 30000)\n    public void testSelectorsWithJMSPriority() throws Exception {\n       Connection connection = createConnection();\n \n       try {\n          Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n          javax.jms.Queue queue = session.createQueue(getQueueName());\n-         MessageProducer p = session.createProducer(queue);\n+         MessageProducer producer = session.createProducer(queue);\n \n          TextMessage message = session.createTextMessage();\n          message.setText(\"hello\");\n-         p.send(message, DeliveryMode.PERSISTENT, 5, 0);\n+         producer.send(message, DeliveryMode.PERSISTENT, 5, 0);\n \n          message = session.createTextMessage();\n          message.setText(\"hello + 9\");\n-         p.send(message, DeliveryMode.PERSISTENT, 9, 0);\n+         producer.send(message, DeliveryMode.PERSISTENT, 9, 0);\n \n          QueueBrowser browser = session.createBrowser(queue);\n-         Enumeration enumeration = browser.getEnumeration();\n+         Enumeration<?> enumeration = browser.getEnumeration();\n          int count = 0;\n          while (enumeration.hasMoreElements()) {\n             Message m = (Message) enumeration.nextElement();\n@@ -276,8 +339,163 @@ public void testSelectorsWithJMSPriority() throws Exception {\n       }\n    }\n \n+   @Test(timeout = 30000)\n+   public void testSelectorsWithJMSXGroupIDOnTopic() throws Exception {\n+      doTestSelectorsWithJMSXGroupID(true);\n+   }\n+\n+   @Test(timeout = 30000)\n+   public void testSelectorsWithJMSXGroupIDOnQueue() throws Exception {\n+      doTestSelectorsWithJMSXGroupID(false);\n+   }\n+\n+   private void doTestSelectorsWithJMSXGroupID(boolean topic) throws Exception {\n+\n+      Connection connection = createConnection();\n+\n+      try {\n+         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+         Destination destination = null;\n+         if (topic) {\n+            destination = session.createTopic(getTopicName());\n+         } else {\n+            destination = session.createQueue(getQueueName());\n+         }\n+\n+         MessageProducer producer = session.createProducer(destination);\n+         MessageConsumer consumer = session.createConsumer(destination, \"JMSXGroupID = '1'\");\n+\n+         TextMessage message = session.createTextMessage();\n+         message.setText(\"group 1 - 1\");\n+         message.setStringProperty(\"JMSXGroupID\", \"1\");\n+         message.setIntProperty(\"JMSXGroupSeq\", 1);\n+         producer.send(message);\n+\n+         message = session.createTextMessage();\n+         message.setText(\"group 2\");\n+         message.setStringProperty(\"JMSXGroupID\", \"2\");\n+         producer.send(message);\n+\n+         message = session.createTextMessage();\n+         message.setText(\"group 1 - 2\");\n+         message.setStringProperty(\"JMSXGroupID\", \"1\");\n+         message.setIntProperty(\"JMSXGroupSeq\", -1);\n+         producer.send(message);\n+\n+         connection.start();\n+\n+         Message msg = consumer.receive(2000);\n+         assertNotNull(msg);\n+         assertTrue(msg instanceof TextMessage);\n+         assertEquals(\"group 1 - 1\", ((TextMessage) msg).getText());\n+         msg = consumer.receive(2000);\n+         assertNotNull(msg);\n+         assertTrue(msg instanceof TextMessage);\n+         assertEquals(\"group 1 - 2\", ((TextMessage) msg).getText());\n+      } finally {\n+         connection.close();\n+      }\n+   }\n+\n+   @Test(timeout = 30000)\n+   public void testSelectorsWithJMSDeliveryOnQueue() throws Exception {\n+      final Connection connection = createConnection();\n+\n+      String selector = \"JMSDeliveryMode = 'PERSISTENT'\";\n+\n+      try {\n+         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+         Destination destination = session.createQueue(getQueueName());\n+\n+         MessageProducer producer = session.createProducer(destination);\n+         MessageConsumer consumer = session.createConsumer(destination, selector);\n+\n+         TextMessage message1 = session.createTextMessage();\n+         message1.setText(\"non-persistent\");\n+         producer.send(message1, DeliveryMode.NON_PERSISTENT, Message.DEFAULT_PRIORITY, Message.DEFAULT_TIME_TO_LIVE);\n+\n+         TextMessage message2 = session.createTextMessage();\n+         message2.setText(\"persistent\");\n+         producer.send(message2, DeliveryMode.PERSISTENT, Message.DEFAULT_PRIORITY, Message.DEFAULT_TIME_TO_LIVE);\n+\n+         connection.start();\n+\n+         Message msg = consumer.receive(2000);\n+         assertNotNull(msg);\n+         assertTrue(msg instanceof TextMessage);\n+         assertEquals(\"Unexpected JMSDeliveryMode value\", DeliveryMode.PERSISTENT, msg.getJMSDeliveryMode());\n+         assertEquals(\"Unexpected message content\", \"persistent\", ((TextMessage) msg).getText());\n+      } finally {\n+         connection.close();\n+      }\n+   }\n+\n+   @Test(timeout = 30000)\n+   public void testSelectorsWithJMSTimestampOnQueue() throws Exception {\n+      final Connection connection = createConnection();\n+\n+      try {\n+         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+         Destination destination = session.createQueue(getQueueName());\n+\n+         MessageProducer producer = session.createProducer(destination);\n+\n+         TextMessage message1 = session.createTextMessage();\n+         message1.setText(\"filtered\");\n+         producer.send(message1, DeliveryMode.PERSISTENT, Message.DEFAULT_PRIORITY, Message.DEFAULT_TIME_TO_LIVE);\n+\n+         TextMessage message2 = session.createTextMessage();\n+         message2.setText(\"expected\");\n+         producer.send(message2, DeliveryMode.PERSISTENT, Message.DEFAULT_PRIORITY, Message.DEFAULT_TIME_TO_LIVE);\n+\n+         MessageConsumer consumer = session.createConsumer(destination, \"JMSTimestamp = \" + message2.getJMSTimestamp());\n+\n+         connection.start();\n+\n+         Message msg = consumer.receive(2000);\n+         assertNotNull(msg);\n+         assertTrue(msg instanceof TextMessage);\n+         assertEquals(\"Unexpected JMSTimestamp value\", message2.getJMSTimestamp(), msg.getJMSTimestamp());\n+         assertEquals(\"Unexpected message content\", \"expected\", ((TextMessage) msg).getText());\n+      } finally {\n+         connection.close();\n+      }\n+   }\n+\n+   @Test(timeout = 30000)\n+   public void testSelectorsWithJMSExpirationOnQueue() throws Exception {\n+      final Connection connection = createConnection();\n+\n+      try {\n+         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+         Destination destination = session.createQueue(getQueueName());\n+\n+         MessageProducer producer = session.createProducer(destination);\n+\n+         TextMessage message1 = session.createTextMessage();\n+         message1.setText(\"filtered\");\n+         producer.send(message1, DeliveryMode.PERSISTENT, Message.DEFAULT_PRIORITY, Message.DEFAULT_TIME_TO_LIVE);\n+\n+         TextMessage message2 = session.createTextMessage();\n+         message2.setText(\"expected\");\n+         producer.send(message2, DeliveryMode.PERSISTENT, Message.DEFAULT_PRIORITY, 60000);\n+\n+         MessageConsumer consumer = session.createConsumer(destination, \"JMSExpiration = \" + message2.getJMSExpiration());\n+\n+         connection.start();\n+\n+         Message msg = consumer.receive(2000);\n+         assertNotNull(msg);\n+         assertTrue(msg instanceof TextMessage);\n+         assertEquals(\"Unexpected JMSExpiration value\", message2.getJMSExpiration(), msg.getJMSExpiration());\n+         assertEquals(\"Unexpected message content\", \"expected\", ((TextMessage) msg).getText());\n+      } finally {\n+         connection.close();\n+      }\n+   }\n+\n    @Test(timeout = 60000)\n-   public void testJMSSelectorFiltersJMSMessageID() throws Exception {\n+   public void testJMSSelectorFiltersJMSMessageIDOnTopic() throws Exception {\n       Connection connection = createConnection();\n \n       try {",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/6d94997aa8c9c0ed4d02ac9934eceee4161cdea0/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/JMSMessageConsumerTest.java",
                "sha": "5d6ee47b76e201e2978f3cc83877cbedfd056d95",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-1314 Fixing issues with JMS selectors on AMQP\n\nAllows for JMS selectors on JMSCorrelationID as well as JMSXGroupID\nand JMSXUserID along with some fixes to avoid an NPE case and fixes\nto the conversion of AMQP MessageID and CorrelationID values when\ndoing cross protocol mappings.  Adds new tests to cover more cases\nof using the JMS selector with Qpid JMS and the AMQP test client.",
        "parent": "https://github.com/apache/activemq-artemis/commit/8af0569521100780fb82422e19236c373a109173",
        "patched_files": [
            "AMQPMessage.java",
            "AmqpMessage.java",
            "AMQPMessageIdHelper.java",
            "AmqpCoreConverter.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "JMSMessageConsumerTest.java",
            "AMQPMessageTest.java",
            "AmqpSendReceiveTest.java",
            "AMQPMessageIdHelperTest.java"
        ]
    },
    "activemq-artemis_6fbafc4": {
        "bug_id": "activemq-artemis_6fbafc4",
        "commit": "https://github.com/apache/activemq-artemis/commit/6fbafc4441791bd3883e695f395ef35a4d36e62e",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/6fbafc4441791bd3883e695f395ef35a4d36e62e/artemis-selector/src/main/java/org/apache/activemq/artemis/selector/filter/UnaryExpression.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-selector/src/main/java/org/apache/activemq/artemis/selector/filter/UnaryExpression.java?ref=6fbafc4441791bd3883e695f395ef35a4d36e62e",
                "deletions": 8,
                "filename": "artemis-selector/src/main/java/org/apache/activemq/artemis/selector/filter/UnaryExpression.java",
                "patch": "@@ -61,15 +61,12 @@ public static BooleanExpression createInExpression(PropertyExpression right,\n                                                       final boolean not) {\n \n       // Use a HashSet if there are many elements.\n-      Collection<Object> t;\n-      if (elements.size() == 0) {\n-         t = null;\n-      } else if (elements.size() < 5) {\n-         t = elements;\n+      final Collection<Object> inList;\n+      if (elements.size() < 5) {\n+         inList = elements;\n       } else {\n-         t = new HashSet<>(elements);\n+         inList = new HashSet<>(elements);\n       }\n-      final Collection<Object> inList = t;\n \n       return new BooleanUnaryExpression(right) {\n          @Override\n@@ -83,7 +80,7 @@ public Object evaluate(Filterable message) throws FilterException {\n                return null;\n             }\n \n-            return (inList != null && inList.contains(rvalue)) ^ not;\n+            return inList.contains(rvalue) ^ not;\n          }\n \n          @Override",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/6fbafc4441791bd3883e695f395ef35a4d36e62e/artemis-selector/src/main/java/org/apache/activemq/artemis/selector/filter/UnaryExpression.java",
                "sha": "e70de83861f3078cea2ea47612ea8dd6c54a97ec",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/6fbafc4441791bd3883e695f395ef35a4d36e62e/artemis-selector/src/test/java/org/apache/activemq/artemis/selector/filter/UnaryExpressionTest.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-selector/src/test/java/org/apache/activemq/artemis/selector/filter/UnaryExpressionTest.java?ref=6fbafc4441791bd3883e695f395ef35a4d36e62e",
                "deletions": 0,
                "filename": "artemis-selector/src/test/java/org/apache/activemq/artemis/selector/filter/UnaryExpressionTest.java",
                "patch": "@@ -16,6 +16,8 @@\n  */\n package org.apache.activemq.artemis.selector.filter;\n \n+import java.util.Collections;\n+\n import org.apache.activemq.artemis.selector.impl.SelectorParser;\n import org.junit.Assert;\n import org.junit.Test;\n@@ -30,4 +32,13 @@ public void testEquals() throws Exception {\n       Assert.assertTrue(\"Created unary expression 2\", expr2 instanceof UnaryExpression);\n       Assert.assertEquals(\"Unary expressions are equal\", expr1, expr2);\n    }\n+\n+   @Test\n+   public void testInExpressionToString() throws Exception {\n+      BooleanExpression expr;\n+      expr = UnaryExpression.createInExpression(new PropertyExpression(\"foo\"), Collections.<Object>singletonList(\"bar\"), false);\n+      Assert.assertTrue(expr.toString().matches(\"foo\\\\s+IN\\\\s+.*bar.*\"));\n+      expr = UnaryExpression.createInExpression(new PropertyExpression(\"foo\"), Collections.emptyList(), false);\n+      Assert.assertTrue(expr.toString().matches(\"foo\\\\s+IN\\\\s+.*\"));\n+   }\n }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/6fbafc4441791bd3883e695f395ef35a4d36e62e/artemis-selector/src/test/java/org/apache/activemq/artemis/selector/filter/UnaryExpressionTest.java",
                "sha": "8f1b1a19bc1d1fa2221fef32f291568899bcaa0b",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in empty InExpression.toString",
        "parent": "https://github.com/apache/activemq-artemis/commit/586abba94ee6b9cd576508ea042d74dcd4667b6c",
        "patched_files": [
            "UnaryExpression.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "UnaryExpressionTest.java"
        ]
    },
    "activemq-artemis_702f445": {
        "bug_id": "activemq-artemis_702f445",
        "commit": "https://github.com/apache/activemq-artemis/commit/702f445205de953a343c1beef436fc8b984c7624",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/702f445205de953a343c1beef436fc8b984c7624/artemis-journal/src/main/java/org/apache/activemq/artemis/core/journal/impl/JournalImpl.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-journal/src/main/java/org/apache/activemq/artemis/core/journal/impl/JournalImpl.java?ref=702f445205de953a343c1beef436fc8b984c7624",
                "deletions": 0,
                "filename": "artemis-journal/src/main/java/org/apache/activemq/artemis/core/journal/impl/JournalImpl.java",
                "patch": "@@ -974,6 +974,7 @@ public void run() {\n             } catch (Throwable e) {\n                result.fail(e);\n                logger.error(\"appendDeleteRecord:\" + e, e);\n+               setErrorCondition(callback, null, e);\n             } finally {\n                journalLock.readLock().unlock();\n             }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/702f445205de953a343c1beef436fc8b984c7624/artemis-journal/src/main/java/org/apache/activemq/artemis/core/journal/impl/JournalImpl.java",
                "sha": "c9d0dce6e8e20f44a5e26ad3160db78d5722949f",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/702f445205de953a343c1beef436fc8b984c7624/artemis-server/src/main/java/org/apache/activemq/artemis/core/persistence/impl/journal/AbstractJournalStorageManager.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/persistence/impl/journal/AbstractJournalStorageManager.java?ref=702f445205de953a343c1beef436fc8b984c7624",
                "deletions": 6,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/persistence/impl/journal/AbstractJournalStorageManager.java",
                "patch": "@@ -1654,12 +1654,14 @@ public Journal getBindingsJournal() {\n    // Package protected ---------------------------------------------\n \n    protected void confirmLargeMessage(final LargeServerMessage largeServerMessage) {\n-      if (largeServerMessage.getPendingRecordID() >= 0) {\n-         try {\n-            confirmPendingLargeMessage(largeServerMessage.getPendingRecordID());\n-            largeServerMessage.setPendingRecordID(LargeServerMessage.NO_PENDING_ID);\n-         } catch (Exception e) {\n-            ActiveMQServerLogger.LOGGER.warn(e.getMessage(), e);\n+      synchronized (largeServerMessage) {\n+         if (largeServerMessage.getPendingRecordID() >= 0) {\n+            try {\n+               confirmPendingLargeMessage(largeServerMessage.getPendingRecordID());\n+               largeServerMessage.setPendingRecordID(LargeServerMessage.NO_PENDING_ID);\n+            } catch (Exception e) {\n+               ActiveMQServerLogger.LOGGER.warn(e.getMessage(), e);\n+            }\n          }\n       }\n    }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/702f445205de953a343c1beef436fc8b984c7624/artemis-server/src/main/java/org/apache/activemq/artemis/core/persistence/impl/journal/AbstractJournalStorageManager.java",
                "sha": "2790f32d13074f0fc8b5bcb6a530d7885287e066",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/702f445205de953a343c1beef436fc8b984c7624/artemis-server/src/main/java/org/apache/activemq/artemis/core/persistence/impl/journal/JournalStorageManager.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/persistence/impl/journal/JournalStorageManager.java?ref=702f445205de953a343c1beef436fc8b984c7624",
                "deletions": 9,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/persistence/impl/journal/JournalStorageManager.java",
                "patch": "@@ -454,15 +454,17 @@ public long storePendingLargeMessage(final long messageID, long recordID) throws\n \n    // This should be accessed from this package only\n    void deleteLargeMessageFile(final LargeServerMessage largeServerMessage) throws ActiveMQException {\n-      if (largeServerMessage.getPendingRecordID() < 0) {\n-         try {\n-            // The delete file happens asynchronously\n-            // And the client won't be waiting for the actual file to be deleted.\n-            // We set a temporary record (short lived) on the journal\n-            // to avoid a situation where the server is restarted and pending large message stays on forever\n-            largeServerMessage.setPendingRecordID(storePendingLargeMessage(largeServerMessage.getMessageID(), largeServerMessage.getPendingRecordID()));\n-         } catch (Exception e) {\n-            throw new ActiveMQInternalErrorException(e.getMessage(), e);\n+      synchronized (largeServerMessage) {\n+         if (largeServerMessage.getPendingRecordID() < 0) {\n+            try {\n+               // The delete file happens asynchronously\n+               // And the client won't be waiting for the actual file to be deleted.\n+               // We set a temporary record (short lived) on the journal\n+               // to avoid a situation where the server is restarted and pending large message stays on forever\n+               largeServerMessage.setPendingRecordID(storePendingLargeMessage(largeServerMessage.getMessageID(), largeServerMessage.getPendingRecordID()));\n+            } catch (Exception e) {\n+               throw new ActiveMQInternalErrorException(e.getMessage(), e);\n+            }\n          }\n       }\n       final SequentialFile file = largeServerMessage.getFile();",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/702f445205de953a343c1beef436fc8b984c7624/artemis-server/src/main/java/org/apache/activemq/artemis/core/persistence/impl/journal/JournalStorageManager.java",
                "sha": "e245740d49e913852f1a734997267f3736e2ddf7",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/702f445205de953a343c1beef436fc8b984c7624/artemis-server/src/main/java/org/apache/activemq/artemis/core/postoffice/impl/PostOfficeImpl.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/postoffice/impl/PostOfficeImpl.java?ref=702f445205de953a343c1beef436fc8b984c7624",
                "deletions": 6,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/postoffice/impl/PostOfficeImpl.java",
                "patch": "@@ -1364,13 +1364,15 @@ public void done() {\n     */\n    private void confirmLargeMessageSend(Transaction tx, final Message message) throws Exception {\n       LargeServerMessage largeServerMessage = (LargeServerMessage) message;\n-      if (largeServerMessage.getPendingRecordID() >= 0) {\n-         if (tx == null) {\n-            storageManager.confirmPendingLargeMessage(largeServerMessage.getPendingRecordID());\n-         } else {\n-            storageManager.confirmPendingLargeMessageTX(tx, largeServerMessage.getMessageID(), largeServerMessage.getPendingRecordID());\n+      synchronized (largeServerMessage) {\n+         if (largeServerMessage.getPendingRecordID() >= 0) {\n+            if (tx == null) {\n+               storageManager.confirmPendingLargeMessage(largeServerMessage.getPendingRecordID());\n+            } else {\n+               storageManager.confirmPendingLargeMessageTX(tx, largeServerMessage.getMessageID(), largeServerMessage.getPendingRecordID());\n+            }\n+            largeServerMessage.setPendingRecordID(-1);\n          }\n-         largeServerMessage.setPendingRecordID(-1);\n       }\n    }\n ",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/702f445205de953a343c1beef436fc8b984c7624/artemis-server/src/main/java/org/apache/activemq/artemis/core/postoffice/impl/PostOfficeImpl.java",
                "sha": "7ea2ab64c8983d5a8e33f429d7aad1c7d156bd06",
                "status": "modified"
            },
            {
                "additions": 69,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/702f445205de953a343c1beef436fc8b984c7624/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/openwire/OpenWireLargeMessageTest.java",
                "changes": 69,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/openwire/OpenWireLargeMessageTest.java?ref=702f445205de953a343c1beef436fc8b984c7624",
                "deletions": 0,
                "filename": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/openwire/OpenWireLargeMessageTest.java",
                "patch": "@@ -23,9 +23,15 @@\n import javax.jms.MessageProducer;\n import javax.jms.Queue;\n import javax.jms.Session;\n+import java.util.Map;\n \n import org.apache.activemq.artemis.api.core.RoutingType;\n import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.paging.PagingStore;\n+import org.apache.activemq.artemis.core.settings.impl.AddressFullMessagePolicy;\n+import org.apache.activemq.artemis.core.settings.impl.AddressSettings;\n+import org.apache.activemq.artemis.logs.AssertionLoggerHandler;\n+import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n \n@@ -36,13 +42,15 @@ public OpenWireLargeMessageTest() {\n    }\n \n    public SimpleString lmAddress = new SimpleString(\"LargeMessageAddress\");\n+   public SimpleString lmDropAddress = new SimpleString(\"LargeMessageDropAddress\");\n \n    @Override\n    @Before\n    public void setUp() throws Exception {\n       this.realStore = true;\n       super.setUp();\n       server.createQueue(lmAddress, RoutingType.ANYCAST, lmAddress, null, true, false);\n+      server.createQueue(lmDropAddress, RoutingType.ANYCAST, lmDropAddress, null, true, false);\n    }\n \n    @Test\n@@ -62,6 +70,18 @@ public void testSendLargeMessage() throws Exception {\n       }\n    }\n \n+   @Override\n+   protected void configureAddressSettings(Map<String, AddressSettings> addressSettingsMap) {\n+      addressSettingsMap.put(\"#\", new AddressSettings().setAutoCreateQueues(false).setAutoCreateAddresses(false).setDeadLetterAddress(new SimpleString(\"ActiveMQ.DLQ\")).setAutoCreateAddresses(true));\n+      addressSettingsMap.put(lmDropAddress.toString(),\n+                             new AddressSettings()\n+                                .setMaxSizeBytes(15 * 1024 * 1024)\n+                                .setAddressFullMessagePolicy(AddressFullMessagePolicy.DROP)\n+                                .setMessageCounterHistoryDayLimit(10)\n+                                .setRedeliveryDelay(0)\n+                                .setMaxDeliveryAttempts(0));\n+   }\n+\n    @Test\n    public void testSendReceiveLargeMessage() throws Exception {\n       // Create 1MB Message\n@@ -103,4 +123,53 @@ public void testSendReceiveLargeMessage() throws Exception {\n          assertArrayEquals(body, bytes);\n       }\n    }\n+\n+   @Test\n+   public void testFastLargeMessageProducerDropOnPaging() throws Exception {\n+      AssertionLoggerHandler.startCapture();\n+      try {\n+         // Create 100K Message\n+         int size = 100 * 1024;\n+\n+         final byte[] bytes = new byte[size];\n+\n+         try (Connection connection = factory.createConnection()) {\n+            connection.start();\n+\n+            try (Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE)) {\n+               Queue queue = session.createQueue(lmDropAddress.toString());\n+               try (MessageProducer producer = session.createProducer(queue)) {\n+                  producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);\n+\n+                  bytes[0] = 1;\n+\n+                  BytesMessage message = session.createBytesMessage();\n+                  message.writeBytes(bytes);\n+\n+                  final PagingStore pageStore = server.getPagingManager().getPageStore(lmDropAddress);\n+                  while (!pageStore.isPaging()) {\n+                     producer.send(message);\n+                  }\n+                  for (int i = 0; i < 10; i++) {\n+                     producer.send(message);\n+                  }\n+                  final long messageCount = server.locateQueue(lmDropAddress).getMessageCount();\n+                  Assert.assertTrue(\"The queue cannot be empty\", messageCount > 0);\n+                  try (MessageConsumer messageConsumer = session.createConsumer(queue)) {\n+                     for (long m = 0; m < messageCount; m++) {\n+                        if (messageConsumer.receive(2000) == null) {\n+                           Assert.fail(\"The messages are not finished yet\");\n+                        }\n+                     }\n+                  }\n+               }\n+            }\n+         }\n+         server.stop();\n+         Assert.assertFalse(AssertionLoggerHandler.findText(\"NullPointerException\"));\n+         Assert.assertFalse(AssertionLoggerHandler.findText(\"Cannot find record\"));\n+      } finally {\n+         AssertionLoggerHandler.stopCapture();\n+      }\n+   }\n }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/702f445205de953a343c1beef436fc8b984c7624/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/openwire/OpenWireLargeMessageTest.java",
                "sha": "01c56b7eb6554f6c75c0cb8990c3fde22e2ad7de",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-2200 NPE while dropping/failing large messages on paging\n\nLarge messages pendingRecordID is not accessed atomically, leading\nto races that would lead to records that cannot been found on the\njournal for deletion: it would lead to cause NPE that won't clean\nthe pending tasks on the current OperationContextImpl.\nAdding a cleanup on error of those tasks and avoiding the race\nto happen by adding proper synchronization will both enforce\ncorrect clean up when something bad happen and avoid NPE.",
        "parent": "https://github.com/apache/activemq-artemis/commit/2b096ad926d95e39a421933b9af12f7164d0f983",
        "patched_files": [
            "JournalImpl.java",
            "PostOfficeImpl.java",
            "AbstractJournalStorageManager.java",
            "JournalStorageManager.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "OpenWireLargeMessageTest.java",
            "JournalStorageManagerTest.java"
        ]
    },
    "activemq-artemis_71e664a": {
        "bug_id": "activemq-artemis_71e664a",
        "commit": "https://github.com/apache/activemq-artemis/commit/71e664a705e8a54adb530e3c769ce936fb851fb7",
        "file": [
            {
                "additions": 72,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/71e664a705e8a54adb530e3c769ce936fb851fb7/tests/compatibility-tests/src/main/resources/serial/cfserial.groovy",
                "changes": 72,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/compatibility-tests/src/main/resources/serial/cfserial.groovy?ref=71e664a705e8a54adb530e3c769ce936fb851fb7",
                "deletions": 0,
                "filename": "tests/compatibility-tests/src/main/resources/serial/cfserial.groovy",
                "patch": "@@ -0,0 +1,72 @@\n+package clients\n+\n+import io.netty.buffer.Unpooled\n+import org.apache.activemq.artemis.api.core.ActiveMQBuffer\n+import org.apache.activemq.artemis.api.core.ActiveMQBuffers\n+import org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper\n+import org.apache.activemq.artemis.jms.server.config.impl.ConnectionFactoryConfigurationImpl\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// Create a client connection factory\n+\n+import org.apache.activemq.artemis.tests.compatibility.GroovyRun;\n+import javax.jms.*;\n+import org.apache.activemq.artemis.jms.client.*\n+\n+import java.nio.ByteBuffer\n+\n+file = arg[0]\n+method = arg[1]\n+version = arg[2]\n+\n+if (method.equals(\"write\")) {\n+    List<String> transportConfigurations = new ArrayList<>();\n+    transportConfigurations.add(\"tst\");    cfConfiguration = new ConnectionFactoryConfigurationImpl();\n+    cfConfiguration.setName(\"np\").setConnectorNames(transportConfigurations);\n+    ActiveMQBuffer buffer = ActiveMQBuffers.dynamicBuffer(1024);\n+    cfConfiguration.encode(buffer);\n+    byte[] bytes = new byte[buffer.readableBytes()];\n+    buffer.readBytes(bytes);\n+\n+\n+\n+    ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(file));\n+    objectOutputStream.write(bytes);\n+    objectOutputStream.close();\n+} else {\n+    ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream(file))\n+    ActiveMQBuffer buffer = ActiveMQBuffers.dynamicBuffer(1024);\n+    while (true) {\n+        int byteRead = inputStream.read()\n+        if (byteRead < 0) {\n+            break;\n+        }\n+\n+        buffer.writeByte((byte)byteRead);\n+    }\n+    cfConfiguration = new ConnectionFactoryConfigurationImpl();\n+    cfConfiguration.decode(buffer);\n+\n+    inputStream.close();\n+}\n+\n+GroovyRun.assertEquals(\"np\", cfConfiguration.getName())\n+\n+\n+",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/71e664a705e8a54adb530e3c769ce936fb851fb7/tests/compatibility-tests/src/main/resources/serial/cfserial.groovy",
                "sha": "26085cd8d5ae682a07e9c748224b2c49fc12e048",
                "status": "added"
            },
            {
                "additions": 100,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/71e664a705e8a54adb530e3c769ce936fb851fb7/tests/compatibility-tests/src/test/java/org/apache/activemq/artemis/tests/compatibility/ConnectionFactoryConfigurationSerializationTest.java",
                "changes": 100,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/compatibility-tests/src/test/java/org/apache/activemq/artemis/tests/compatibility/ConnectionFactoryConfigurationSerializationTest.java?ref=71e664a705e8a54adb530e3c769ce936fb851fb7",
                "deletions": 0,
                "filename": "tests/compatibility-tests/src/test/java/org/apache/activemq/artemis/tests/compatibility/ConnectionFactoryConfigurationSerializationTest.java",
                "patch": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.activemq.artemis.tests.compatibility;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.activemq.artemis.utils.FileUtil;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import static org.apache.activemq.artemis.tests.compatibility.GroovyRun.ONE_FIVE;\n+import static org.apache.activemq.artemis.tests.compatibility.GroovyRun.SNAPSHOT;\n+import static org.apache.activemq.artemis.tests.compatibility.GroovyRun.TWO_FOUR;\n+\n+/**\n+ * To run this test on the IDE and debug it, run the compatibility-tests through a command line once:\n+ *\n+ * cd /compatibility-tests\n+ * mvn install -Ptests | tee output.log\n+ *\n+ * on the output.log you will see the output generated by {@link #getClasspathProperty(String)}\n+ *\n+ * On your IDE, edit the Run Configuration to your test and add those -D as parameters to your test.\n+ * On Idea you would do the following:\n+ *\n+ * Run->Edit Configuration->Add ArtemisMeshTest and add your properties.\n+ */\n+@RunWith(Parameterized.class)\n+public class ConnectionFactoryConfigurationSerializationTest extends VersionedBaseTest {\n+\n+   // this will ensure that all tests in this class are run twice,\n+   // once with \"true\" passed to the class' constructor and once with \"false\"\n+   @Parameterized.Parameters(name = \"server={0}, producer={1}, consumer={2}\")\n+   public static Collection getParameters() {\n+      // we don't need every single version ever released..\n+      // if we keep testing current one against 2.4 and 1.4.. we are sure the wire and API won't change over time\n+      List<Object[]> combinations = new ArrayList<>();\n+\n+      /*\n+      // during development sometimes is useful to comment out the combinations\n+      // and add the ones you are interested.. example:\n+       */\n+      //      combinations.add(new Object[]{SNAPSHOT, ONE_FIVE, ONE_FIVE});\n+      //      combinations.add(new Object[]{ONE_FIVE, ONE_FIVE, ONE_FIVE});\n+\n+      combinations.addAll(combinatory(new Object[]{null}, new Object[]{ONE_FIVE, SNAPSHOT, TWO_FOUR}, new Object[]{ONE_FIVE, SNAPSHOT, TWO_FOUR}));\n+      return combinations;\n+   }\n+\n+   public ConnectionFactoryConfigurationSerializationTest(String server, String sender, String receiver) throws Exception {\n+      super(server, sender, receiver);\n+   }\n+\n+   @Before\n+   public void beforeTest() throws Throwable {\n+      FileUtil.deleteDirectory(serverFolder.getRoot());\n+      serverFolder.getRoot().mkdirs();\n+      setVariable(senderClassloader, \"persistent\", false);\n+      startServer(serverFolder.getRoot(), senderClassloader, \"1\");\n+   }\n+\n+   @After\n+   public void afterTest() {\n+      try {\n+         stopServer(senderClassloader);\n+      } catch (Throwable ignored) {\n+         ignored.printStackTrace();\n+      }\n+   }\n+\n+   @Test\n+   public void testSerializeFactory() throws Throwable {\n+      File file = serverFolder.newFile(\"objects.ser\");\n+      evaluate(senderClassloader, \"serial/cfserial.groovy\", file.getAbsolutePath(), \"write\", sender);\n+      evaluate(receiverClassloader, \"serial/cfserial.groovy\", file.getAbsolutePath(), \"read\", receiver);\n+   }\n+\n+}\n+",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/71e664a705e8a54adb530e3c769ce936fb851fb7/tests/compatibility-tests/src/test/java/org/apache/activemq/artemis/tests/compatibility/ConnectionFactoryConfigurationSerializationTest.java",
                "sha": "d40a8da87c3a426e54b68d412b081460f30ef1ef",
                "status": "added"
            }
        ],
        "message": "ARTEMIS-2023 test showing NPE",
        "parent": "https://github.com/apache/activemq-artemis/commit/e549a153a447f0b06383d9f9dc1474ed278a75b5",
        "patched_files": [
            "cfserial.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "ConnectionFactoryConfigurationSerializationTest.java"
        ]
    },
    "activemq-artemis_74600b2": {
        "bug_id": "activemq-artemis_74600b2",
        "commit": "https://github.com/apache/activemq-artemis/commit/74600b2a53fab4aa811109b02d6e5b612dc869da",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/74600b2a53fab4aa811109b02d6e5b612dc869da/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/broker/BrokerService.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/broker/BrokerService.java?ref=74600b2a53fab4aa811109b02d6e5b612dc869da",
                "deletions": 3,
                "filename": "tests/activemq5-unit-tests/src/main/java/org/apache/activemq/broker/BrokerService.java",
                "patch": "@@ -89,9 +89,12 @@\n    private Throwable startException = null;\n    private boolean startAsync = false;\n    public Set<Integer> extraConnectors = new HashSet<Integer>();\n+\n+   private final List<TransportConnector> transportConnectors = new ArrayList<TransportConnector>();\n    private File dataDirectoryFile;\n \n    private PolicyMap destinationPolicy;\n+   private SystemUsage systemUsage;\n \n    static\n    {\n@@ -340,7 +343,7 @@ public BrokerView getAdminView() throws Exception\n \n    public List<TransportConnector> getTransportConnectors()\n    {\n-      return new ArrayList<>();\n+      return transportConnectors;\n    }\n \n    public TransportConnector addConnector(String bindAddress) throws Exception\n@@ -406,7 +409,11 @@ public URI getVmConnectorURI()\n \n    public SystemUsage getSystemUsage()\n    {\n-      return null;\n+      if (systemUsage == null)\n+      {\n+         systemUsage = new SystemUsage();\n+      }\n+      return systemUsage;\n    }\n \n    public synchronized PListStore getTempDataStore()\n@@ -460,6 +467,7 @@ public void setEnableStatistics(boolean enableStatistics)\n \n    public void setSystemUsage(SystemUsage memoryManager)\n    {\n+      this.systemUsage = memoryManager;\n    }\n \n    public void setManagementContext(ManagementContext managementContext)\n@@ -568,11 +576,19 @@ public ObjectName getBrokerObjectName() throws MalformedObjectNameException\n    public TransportConnector addConnector(URI bindAddress) throws Exception\n    {\n       Integer port = bindAddress.getPort();\n+      FakeTransportConnector connector = null;\n       if (port != 0)\n       {\n+         connector = new FakeTransportConnector(bindAddress);\n+         this.transportConnectors.add(connector);\n          this.extraConnectors.add(port);\n       }\n-      return null;\n+      else\n+      {\n+         connector = new FakeTransportConnector(new URI(this.getDefaultUri()));\n+         this.transportConnectors.add(connector);\n+      }\n+      return connector;\n    }\n \n    public void setCacheTempDestinations(boolean cacheTempDestinations)",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/74600b2a53fab4aa811109b02d6e5b612dc869da/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/broker/BrokerService.java",
                "sha": "f2b5b302e10e871585eeedbec15f11676cb409dd",
                "status": "modified"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/74600b2a53fab4aa811109b02d6e5b612dc869da/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/broker/FakeTransportConnector.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/broker/FakeTransportConnector.java?ref=74600b2a53fab4aa811109b02d6e5b612dc869da",
                "deletions": 0,
                "filename": "tests/activemq5-unit-tests/src/main/java/org/apache/activemq/broker/FakeTransportConnector.java",
                "patch": "@@ -0,0 +1,29 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.broker;\n+\n+\n+import java.net.URI;\n+\n+public class FakeTransportConnector extends TransportConnector\n+{\n+   public FakeTransportConnector(URI uri)\n+   {\n+      super();\n+      this.setUri(uri);\n+   }\n+}",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/74600b2a53fab4aa811109b02d6e5b612dc869da/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/broker/FakeTransportConnector.java",
                "sha": "4d4ab0050ea6a20ccd581c90df83d5377e644f45",
                "status": "added"
            },
            {
                "additions": 284,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/74600b2a53fab4aa811109b02d6e5b612dc869da/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/usage/SystemUsage.java",
                "changes": 284,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/usage/SystemUsage.java?ref=74600b2a53fab4aa811109b02d6e5b612dc869da",
                "deletions": 0,
                "filename": "tests/activemq5-unit-tests/src/main/java/org/apache/activemq/usage/SystemUsage.java",
                "patch": "@@ -0,0 +1,284 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.usage;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.ThreadPoolExecutor;\n+\n+import org.apache.activemq.Service;\n+import org.apache.activemq.broker.scheduler.JobSchedulerStore;\n+import org.apache.activemq.store.PListStore;\n+import org.apache.activemq.store.PersistenceAdapter;\n+\n+//fake\n+public class SystemUsage implements Service {\n+\n+   private SystemUsage parent;\n+   private String name;\n+   private MemoryUsage memoryUsage;\n+   private StoreUsage storeUsage;\n+   private TempUsage tempUsage;\n+   private ThreadPoolExecutor executor;\n+   private JobSchedulerUsage jobSchedulerUsage;\n+   private String checkLimitsLogLevel = \"warn\";\n+\n+   /**\n+    * True if someone called setSendFailIfNoSpace() on this particular usage\n+    * manager\n+    */\n+   private boolean sendFailIfNoSpaceExplicitySet;\n+   private boolean sendFailIfNoSpace;\n+   private boolean sendFailIfNoSpaceAfterTimeoutExplicitySet;\n+   private long sendFailIfNoSpaceAfterTimeout = 0;\n+\n+   private final List<SystemUsage> children = new CopyOnWriteArrayList<SystemUsage>();\n+\n+   public SystemUsage() {\n+      this(\"default\", null, null, null);\n+   }\n+\n+   public SystemUsage(String name, PersistenceAdapter adapter, PListStore tempStore, JobSchedulerStore jobSchedulerStore) {\n+      this.parent = null;\n+      this.name = name;\n+      this.memoryUsage = new MemoryUsage(name + \":memory\");\n+      this.storeUsage = new StoreUsage(name + \":store\", adapter);\n+      this.tempUsage = new TempUsage(name + \":temp\", tempStore);\n+      this.jobSchedulerUsage = new JobSchedulerUsage(name + \":jobScheduler\", jobSchedulerStore);\n+      this.memoryUsage.setExecutor(getExecutor());\n+      this.storeUsage.setExecutor(getExecutor());\n+      this.tempUsage.setExecutor(getExecutor());\n+   }\n+\n+   public SystemUsage(SystemUsage parent, String name) {\n+      this.parent = parent;\n+      this.executor = parent.getExecutor();\n+      this.name = name;\n+      this.memoryUsage = new MemoryUsage(parent.memoryUsage, name + \":memory\");\n+      this.storeUsage = new StoreUsage(parent.storeUsage, name + \":store\");\n+      this.tempUsage = new TempUsage(parent.tempUsage, name + \":temp\");\n+      this.jobSchedulerUsage = new JobSchedulerUsage(parent.jobSchedulerUsage, name + \":jobScheduler\");\n+      this.memoryUsage.setExecutor(getExecutor());\n+      this.storeUsage.setExecutor(getExecutor());\n+      this.tempUsage.setExecutor(getExecutor());\n+   }\n+\n+   public String getName() {\n+      return name;\n+   }\n+\n+   /**\n+    * @return the memoryUsage\n+    */\n+   public MemoryUsage getMemoryUsage() {\n+      return this.memoryUsage;\n+   }\n+\n+   /**\n+    * @return the storeUsage\n+    */\n+   public StoreUsage getStoreUsage() {\n+      return this.storeUsage;\n+   }\n+\n+   /**\n+    * @return the tempDiskUsage\n+    */\n+   public TempUsage getTempUsage() {\n+      return this.tempUsage;\n+   }\n+\n+   /**\n+    * @return the schedulerUsage\n+    */\n+   public JobSchedulerUsage getJobSchedulerUsage() {\n+      return this.jobSchedulerUsage;\n+   }\n+\n+   @Override\n+   public String toString() {\n+      return \"UsageManager(\" + getName() + \")\";\n+   }\n+\n+   @Override\n+   public void start() {\n+      if (parent != null) {\n+         parent.addChild(this);\n+      }\n+      this.memoryUsage.start();\n+      this.storeUsage.start();\n+      this.tempUsage.start();\n+      this.jobSchedulerUsage.start();\n+   }\n+\n+   @Override\n+   public void stop() {\n+      if (parent != null) {\n+         parent.removeChild(this);\n+      }\n+      this.memoryUsage.stop();\n+      this.storeUsage.stop();\n+      this.tempUsage.stop();\n+      this.jobSchedulerUsage.stop();\n+   }\n+\n+   public void setSendFailIfNoSpace(boolean failProducerIfNoSpace) {\n+      sendFailIfNoSpaceExplicitySet = true;\n+      this.sendFailIfNoSpace = failProducerIfNoSpace;\n+   }\n+\n+   public boolean isSendFailIfNoSpace() {\n+      if (sendFailIfNoSpaceExplicitySet || parent == null) {\n+         return sendFailIfNoSpace;\n+      } else {\n+         return parent.isSendFailIfNoSpace();\n+      }\n+   }\n+\n+   private void addChild(SystemUsage child) {\n+      children.add(child);\n+   }\n+\n+   private void removeChild(SystemUsage child) {\n+      children.remove(child);\n+   }\n+\n+   public SystemUsage getParent() {\n+      return parent;\n+   }\n+\n+   public void setParent(SystemUsage parent) {\n+      this.parent = parent;\n+   }\n+\n+   public boolean isSendFailIfNoSpaceExplicitySet() {\n+      return sendFailIfNoSpaceExplicitySet;\n+   }\n+\n+   public void setSendFailIfNoSpaceExplicitySet(boolean sendFailIfNoSpaceExplicitySet) {\n+      this.sendFailIfNoSpaceExplicitySet = sendFailIfNoSpaceExplicitySet;\n+   }\n+\n+   public long getSendFailIfNoSpaceAfterTimeout() {\n+      if (sendFailIfNoSpaceAfterTimeoutExplicitySet || parent == null) {\n+         return sendFailIfNoSpaceAfterTimeout;\n+      } else {\n+         return parent.getSendFailIfNoSpaceAfterTimeout();\n+      }\n+   }\n+\n+   public void setSendFailIfNoSpaceAfterTimeout(long sendFailIfNoSpaceAfterTimeout) {\n+      this.sendFailIfNoSpaceAfterTimeoutExplicitySet = true;\n+      this.sendFailIfNoSpaceAfterTimeout = sendFailIfNoSpaceAfterTimeout;\n+   }\n+\n+   public void setName(String name) {\n+      this.name = name;\n+      this.memoryUsage.setName(name + \":memory\");\n+      this.storeUsage.setName(name + \":store\");\n+      this.tempUsage.setName(name + \":temp\");\n+      this.jobSchedulerUsage.setName(name + \":jobScheduler\");\n+   }\n+\n+   public void setMemoryUsage(MemoryUsage memoryUsage) {\n+      if (memoryUsage.getName() == null) {\n+         memoryUsage.setName(this.memoryUsage.getName());\n+      }\n+      if (parent != null) {\n+         memoryUsage.setParent(parent.memoryUsage);\n+      }\n+      this.memoryUsage = memoryUsage;\n+      this.memoryUsage.setExecutor(getExecutor());\n+   }\n+\n+   public void setStoreUsage(StoreUsage storeUsage) {\n+      if (storeUsage.getStore() == null) {\n+         storeUsage.setStore(this.storeUsage.getStore());\n+      }\n+      if (storeUsage.getName() == null) {\n+         storeUsage.setName(this.storeUsage.getName());\n+      }\n+      if (parent != null) {\n+         storeUsage.setParent(parent.storeUsage);\n+      }\n+      this.storeUsage = storeUsage;\n+      this.storeUsage.setExecutor(executor);\n+   }\n+\n+   public void setTempUsage(TempUsage tempDiskUsage) {\n+      if (tempDiskUsage.getStore() == null) {\n+         tempDiskUsage.setStore(this.tempUsage.getStore());\n+      }\n+      if (tempDiskUsage.getName() == null) {\n+         tempDiskUsage.setName(this.tempUsage.getName());\n+      }\n+      if (parent != null) {\n+         tempDiskUsage.setParent(parent.tempUsage);\n+      }\n+      this.tempUsage = tempDiskUsage;\n+      this.tempUsage.setExecutor(getExecutor());\n+   }\n+\n+   public void setJobSchedulerUsage(JobSchedulerUsage jobSchedulerUsage) {\n+      if (jobSchedulerUsage.getStore() == null) {\n+         jobSchedulerUsage.setStore(this.jobSchedulerUsage.getStore());\n+      }\n+      if (jobSchedulerUsage.getName() == null) {\n+         jobSchedulerUsage.setName(this.jobSchedulerUsage.getName());\n+      }\n+      if (parent != null) {\n+         jobSchedulerUsage.setParent(parent.jobSchedulerUsage);\n+      }\n+      this.jobSchedulerUsage = jobSchedulerUsage;\n+      this.jobSchedulerUsage.setExecutor(getExecutor());\n+   }\n+\n+   /**\n+    * @return the executor\n+    */\n+   public ThreadPoolExecutor getExecutor() {\n+      return this.executor;\n+   }\n+\n+   /**\n+    * @param executor\n+    *            the executor to set\n+    */\n+   public void setExecutor(ThreadPoolExecutor executor) {\n+      this.executor = executor;\n+      if (this.memoryUsage != null) {\n+         this.memoryUsage.setExecutor(this.executor);\n+      }\n+      if (this.storeUsage != null) {\n+         this.storeUsage.setExecutor(this.executor);\n+      }\n+      if (this.tempUsage != null) {\n+         this.tempUsage.setExecutor(this.executor);\n+      }\n+      if(this.jobSchedulerUsage != null) {\n+         this.jobSchedulerUsage.setExecutor(this.executor);\n+      }\n+   }\n+\n+   public String getCheckLimitsLogLevel() {\n+      return checkLimitsLogLevel;\n+   }\n+\n+   public void setCheckLimitsLogLevel(String checkLimitsLogLevel) {\n+      this.checkLimitsLogLevel = checkLimitsLogLevel;\n+   }\n+}",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/74600b2a53fab4aa811109b02d6e5b612dc869da/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/usage/SystemUsage.java",
                "sha": "5086daebe7590a8f9cc5f41b91c63dc9d3776b1e",
                "status": "added"
            }
        ],
        "message": "openwire tests: Fix some NPEs and Index out of boundary errors",
        "parent": "https://github.com/apache/activemq-artemis/commit/d560aa4c4099925591a39c41d821f849ba9d3558",
        "patched_files": [
            "BrokerService.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "BrokerServiceTest.java"
        ]
    },
    "activemq-artemis_772156d": {
        "bug_id": "activemq-artemis_772156d",
        "commit": "https://github.com/apache/activemq-artemis/commit/772156dd358ceb8186c9d31644b08d3b06875624",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/772156dd358ceb8186c9d31644b08d3b06875624/artemis-server/src/main/java/org/apache/activemq/artemis/core/protocol/core/ServerSessionPacketHandler.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/protocol/core/ServerSessionPacketHandler.java?ref=772156dd358ceb8186c9d31644b08d3b06875624",
                "deletions": 2,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/protocol/core/ServerSessionPacketHandler.java",
                "patch": "@@ -389,7 +389,7 @@ private void slowPacketHandler(final Packet packet) {\n                   SessionQueueQueryMessage request = (SessionQueueQueryMessage) packet;\n                   QueueQueryResult result = session.executeQueueQuery(request.getQueueName());\n \n-                  if (remotingConnection.getChannelVersion() < PacketImpl.ADDRESSING_CHANGE_VERSION) {\n+                  if (result.isExists() && remotingConnection.getChannelVersion() < PacketImpl.ADDRESSING_CHANGE_VERSION) {\n                      result.setAddress(SessionQueueQueryMessage.getOldPrefixedAddress(result.getAddress(), result.getRoutingType()));\n                   }\n \n@@ -412,7 +412,7 @@ private void slowPacketHandler(final Packet packet) {\n                    * names otherwise the older client won't realize the queue exists and will try to create it and receive\n                    * an error\n                    */\n-                  if (clientVersion < PacketImpl.ADDRESSING_CHANGE_VERSION && session.getMetaData(ClientSession.JMS_SESSION_IDENTIFIER_PROPERTY) != null) {\n+                  if (result.isExists() && clientVersion < PacketImpl.ADDRESSING_CHANGE_VERSION && session.getMetaData(ClientSession.JMS_SESSION_IDENTIFIER_PROPERTY) != null) {\n                      final List<SimpleString> queueNames = result.getQueueNames();\n                      if (!queueNames.isEmpty()) {\n                         final List<SimpleString> convertedQueueNames = request.convertQueueNames(clientVersion, queueNames);",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/772156dd358ceb8186c9d31644b08d3b06875624/artemis-server/src/main/java/org/apache/activemq/artemis/core/protocol/core/ServerSessionPacketHandler.java",
                "sha": "edfd566c15bbd5b95c12c350fcf3e3eee9cf3ec2",
                "status": "modified"
            },
            {
                "additions": 90,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/772156dd358ceb8186c9d31644b08d3b06875624/tests/compatibility-tests/src/main/resources/oldAddressSpace/artemisServer.groovy",
                "changes": 90,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/compatibility-tests/src/main/resources/oldAddressSpace/artemisServer.groovy?ref=772156dd358ceb8186c9d31644b08d3b06875624",
                "deletions": 0,
                "filename": "tests/compatibility-tests/src/main/resources/oldAddressSpace/artemisServer.groovy",
                "patch": "@@ -0,0 +1,90 @@\n+package servers\n+\n+import org.apache.activemq.artemis.api.core.RoutingType\n+import org.apache.activemq.artemis.api.core.SimpleString\n+import org.apache.activemq.artemis.core.config.impl.ConfigurationImpl\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// starts an artemis server\n+import org.apache.activemq.artemis.core.server.JournalType\n+import org.apache.activemq.artemis.core.server.impl.AddressInfo\n+import org.apache.activemq.artemis.core.settings.impl.AddressFullMessagePolicy\n+import org.apache.activemq.artemis.core.settings.impl.AddressSettings\n+import org.apache.activemq.artemis.jms.server.config.impl.JMSConfigurationImpl\n+import org.apache.activemq.artemis.jms.server.embedded.EmbeddedJMS\n+\n+String folder = arg[0];\n+String type = arg[1]\n+String id = \"server\";\n+\n+String queueName = \"myQueue\";\n+String queueAddress = \"jms.queue.myQueue\";\n+String topicAddress = \"jms.topic.myTopic\";\n+\n+configuration = new ConfigurationImpl();\n+configuration.setJournalType(JournalType.NIO);\n+System.out.println(\"folder:: \" + folder);\n+configuration.setBrokerInstance(new File(folder + \"/\" + id));\n+configuration.addAcceptorConfiguration(\"artemis\", \"tcp://0.0.0.0:61616\");\n+configuration.setSecurityEnabled(false);\n+configuration.setPersistenceEnabled(false);\n+\n+AddressSettings addressSettings = new AddressSettings();\n+addressSettings.setAddressFullMessagePolicy(AddressFullMessagePolicy.BLOCK)\n+        .setMaxSizeBytes(10 * 1024)\n+        .setPageSizeBytes(1024)\n+        .setDeadLetterAddress(SimpleString.toSimpleString(\"DLA\"))\n+        .setExpiryAddress(SimpleString.toSimpleString(\"Expiry\"));\n+\n+if (!(type.startsWith(\"ARTEMIS-1\") || type.startsWith(\"HORNETQ\"))) {\n+    addressSettings.setAutoCreateAddresses(false);\n+    addressSettings.setAutoCreateQueues(false);\n+}\n+configuration.addAddressesSetting(\"#\", addressSettings);\n+\n+addressSettings = new AddressSettings();\n+addressSettings.setAddressFullMessagePolicy(AddressFullMessagePolicy.PAGE)\n+        .setMaxSizeBytes(1024 * 1024 * 1024)\n+        .setPageSizeBytes(1024)\n+        .setDeadLetterAddress(SimpleString.toSimpleString(\"DLA\"))\n+        .setExpiryAddress(SimpleString.toSimpleString(\"Expiry\"));\n+\n+if (!(type.startsWith(\"ARTEMIS-1\") || type.startsWith(\"HORNETQ\"))) {\n+    addressSettings.setAutoCreateAddresses(false);\n+    addressSettings.setAutoCreateQueues(false);\n+}\n+configuration.addAddressesSetting(\"jms.#\", addressSettings);\n+\n+// if the client is using the wrong address, it will wrongly block\n+\n+jmsConfiguration = new JMSConfigurationImpl();\n+\n+server = new EmbeddedJMS();\n+server.setConfiguration(configuration);\n+server.setJmsConfiguration(jmsConfiguration);\n+server.start();\n+\n+if (type.startsWith(\"ARTEMIS-1\") || type.startsWith(\"HORNETQ\")) {\n+    server.getJMSServerManager().createQueue(true, queueName, null, true, null);\n+} else {\n+    server.getActiveMQServer().addAddressInfo(new AddressInfo(SimpleString.toSimpleString(queueAddress), RoutingType.ANYCAST));\n+    server.getActiveMQServer().createQueue(SimpleString.toSimpleString(queueAddress), RoutingType.ANYCAST, SimpleString.toSimpleString(queueAddress), null, true, false);\n+\n+    server.getActiveMQServer().addAddressInfo(new AddressInfo(SimpleString.toSimpleString(topicAddress), RoutingType.MULTICAST));\n+}",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/772156dd358ceb8186c9d31644b08d3b06875624/tests/compatibility-tests/src/main/resources/oldAddressSpace/artemisServer.groovy",
                "sha": "6ffa086c06f556c9ff9918c318a25f340dfc1a10",
                "status": "added"
            },
            {
                "additions": 75,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/772156dd358ceb8186c9d31644b08d3b06875624/tests/compatibility-tests/src/main/resources/oldAddressSpace/receiveMessages.groovy",
                "changes": 75,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/compatibility-tests/src/main/resources/oldAddressSpace/receiveMessages.groovy?ref=772156dd358ceb8186c9d31644b08d3b06875624",
                "deletions": 0,
                "filename": "tests/compatibility-tests/src/main/resources/oldAddressSpace/receiveMessages.groovy",
                "patch": "@@ -0,0 +1,75 @@\n+package meshTest\n+\n+import org.apache.activemq.artemis.jms.client.ActiveMQConnectionFactory\n+import org.apache.activemq.artemis.tests.compatibility.GroovyRun\n+\n+import javax.jms.*\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+ConnectionFactory cf = new ActiveMQConnectionFactory();\n+Connection connection = cf.createConnection();\n+connection.setClientID(\"myClientId\");\n+\n+Session session = connection.createSession(true, Session.SESSION_TRANSACTED);\n+\n+String clientType = arg[0];\n+\n+Queue queue;\n+Topic topic;\n+\n+if (clientType.startsWith(\"ARTEMIS-1\") || clientType.startsWith(\"HORNETQ\")) {\n+    queue = session.createQueue(\"myQueue\");\n+    topic = session.createTopic(\"myTopic\");\n+} else {\n+    queue = session.createQueue(\"jms.queue.myQueue\");\n+    topic = session.createTopic(\"jms.topic.myTopic\");\n+}\n+\n+System.out.println(\"Receiving...\");\n+\n+MessageConsumer topicConsumer = session.createDurableSubscriber(topic, \"myDurableSub\")\n+MessageConsumer queueConsumer = session.createConsumer(queue)\n+\n+connection.start()\n+for (int i = 0; i < 500; i++) {\n+    BytesMessage bytesMessage = (BytesMessage) queueConsumer.receive(5000);\n+    GroovyRun.assertNotNull(bytesMessage)\n+    if (i % 100) {\n+        session.commit();\n+    }\n+}\n+session.commit();\n+System.out.println(\"Consumed all messages from Queue\");\n+\n+for (int i = 0; i < 500; i++) {\n+    BytesMessage bytesMessage = (BytesMessage) topicConsumer.receive(5000);\n+    GroovyRun.assertNotNull(bytesMessage)\n+    if (i % 100) {\n+        session.commit();\n+    }\n+}\n+session.commit();\n+System.out.println(\"Consumed all messages from Topic\");\n+\n+// Defined on AddressConfigTest.java at the test with setVariable\n+\n+latch.countDown();\n+\n+\n+",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/772156dd358ceb8186c9d31644b08d3b06875624/tests/compatibility-tests/src/main/resources/oldAddressSpace/receiveMessages.groovy",
                "sha": "149a6b79ee3854d68f23d2420d2c65ab974927f7",
                "status": "added"
            },
            {
                "additions": 80,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/772156dd358ceb8186c9d31644b08d3b06875624/tests/compatibility-tests/src/main/resources/oldAddressSpace/sendMessagesAddress.groovy",
                "changes": 80,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/compatibility-tests/src/main/resources/oldAddressSpace/sendMessagesAddress.groovy?ref=772156dd358ceb8186c9d31644b08d3b06875624",
                "deletions": 0,
                "filename": "tests/compatibility-tests/src/main/resources/oldAddressSpace/sendMessagesAddress.groovy",
                "patch": "@@ -0,0 +1,80 @@\n+package meshTest\n+\n+import org.apache.activemq.artemis.jms.client.ActiveMQConnectionFactory\n+\n+import javax.jms.*\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+ConnectionFactory cf = new ActiveMQConnectionFactory();\n+Connection connection = cf.createConnection();\n+Session session = connection.createSession(true, Session.SESSION_TRANSACTED);\n+\n+String clientType = arg[0];\n+\n+Queue queue;\n+Topic topic;\n+\n+if (clientType.startsWith(\"ARTEMIS-1\") || clientType.startsWith(\"HORNETQ\")) {\n+    queue = session.createQueue(\"myQueue\");\n+    topic = session.createTopic(\"myTopic\");\n+} else {\n+    queue = session.createQueue(\"jms.queue.myQueue\");\n+    topic = session.createTopic(\"jms.topic.myTopic\");\n+}\n+\n+System.out.println(\"Receiving \");\n+MessageProducer queueProducer = session.createProducer(queue)\n+MessageProducer topicProducer = session.createProducer(topic);\n+\n+println(\"sending...\")\n+\n+queueProducer.setDeliveryMode(DeliveryMode.PERSISTENT);\n+for (int i = 0; i < 500; i++) {\n+    BytesMessage bytesMessage = session.createBytesMessage();\n+    bytesMessage.writeBytes(new byte[512]);\n+    queueProducer.send(bytesMessage);\n+    // we send a big batch as that should be enough to cause blocking on the address\n+    // if the wrong address is being used\n+    if (i % 100 == 0) {\n+        session.commit();\n+    }\n+}\n+session.commit();\n+println(\"Sent Queue Messages.\")\n+\n+queueProducer.setDeliveryMode(DeliveryMode.PERSISTENT);\n+for (int i = 0; i < 500; i++) {\n+    BytesMessage bytesMessage = session.createBytesMessage();\n+    bytesMessage.writeBytes(new byte[512]);\n+    topicProducer.send(bytesMessage);\n+    // we send a big batch as that should be enough to cause blocking on the address\n+    // if the wrong address is being used\n+    if (i % 100 == 0) {\n+        session.commit();\n+    }\n+}\n+session.commit();\n+println(\"Sent Topic Messages.\")\n+\n+connection.close();\n+System.out.println(\"All Messages sent\");\n+senderLatch.countDown();\n+\n+\n+",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/772156dd358ceb8186c9d31644b08d3b06875624/tests/compatibility-tests/src/main/resources/oldAddressSpace/sendMessagesAddress.groovy",
                "sha": "afd30b16969f2ee70d9d3a38b25e832b6f4fa91d",
                "status": "added"
            },
            {
                "additions": 117,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/772156dd358ceb8186c9d31644b08d3b06875624/tests/compatibility-tests/src/test/java/org/apache/activemq/artemis/tests/compatibility/OldAddressSpaceTest.java",
                "changes": 117,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/compatibility-tests/src/test/java/org/apache/activemq/artemis/tests/compatibility/OldAddressSpaceTest.java?ref=772156dd358ceb8186c9d31644b08d3b06875624",
                "deletions": 0,
                "filename": "tests/compatibility-tests/src/test/java/org/apache/activemq/artemis/tests/compatibility/OldAddressSpaceTest.java",
                "patch": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.artemis.tests.compatibility;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.activemq.artemis.utils.FileUtil;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import static org.apache.activemq.artemis.tests.compatibility.GroovyRun.ONE_FIVE;\n+import static org.apache.activemq.artemis.tests.compatibility.GroovyRun.SNAPSHOT;\n+\n+@RunWith(Parameterized.class)\n+public class OldAddressSpaceTest extends VersionedBaseTest {\n+\n+   @Parameterized.Parameters(name = \"server={0}, producer={1}, consumer={2}\")\n+   public static Collection getParameters() {\n+      List<Object[]> combinations = new ArrayList<>();\n+      combinations.addAll(combinatory(new Object[]{SNAPSHOT}, new Object[]{ONE_FIVE, SNAPSHOT}, new Object[]{ONE_FIVE, SNAPSHOT}));\n+      return combinations;\n+   }\n+\n+   public OldAddressSpaceTest(String server, String sender, String receiver) throws Exception {\n+      super(server, sender, receiver);\n+   }\n+\n+\n+   @Before\n+   public void setUp() throws Throwable {\n+      FileUtil.deleteDirectory(serverFolder.getRoot());\n+   }\n+\n+   @After\n+   public void stopTest() throws Exception {\n+      execute(serverClassloader, \"server.stop()\");\n+   }\n+\n+   @Test\n+   public void testClientSenderServerAddressSettings() throws Throwable {\n+      evaluate(serverClassloader, \"oldAddressSpace/artemisServer.groovy\", serverFolder.getRoot().getAbsolutePath(), server);\n+\n+      CountDownLatch receiverLatch = new CountDownLatch(1);\n+      CountDownLatch senderLatch = new CountDownLatch(1);\n+\n+      setVariable(receiverClassloader, \"latch\", receiverLatch);\n+\n+      AtomicInteger errors = new AtomicInteger(0);\n+      Thread t1 = new Thread() {\n+         @Override\n+         public void run() {\n+            try {\n+               evaluate(receiverClassloader, \"oldAddressSpace/receiveMessages.groovy\", receiver);\n+            } catch (Throwable e) {\n+               errors.incrementAndGet();\n+            }\n+         }\n+      };\n+      t1.start();\n+\n+      setVariable(senderClassloader, \"senderLatch\", senderLatch);\n+      Thread t2 = new Thread() {\n+         @Override\n+         public void run() {\n+            try {\n+               evaluate(senderClassloader, \"oldAddressSpace/sendMessagesAddress.groovy\", sender);\n+            } catch (Throwable e) {\n+               errors.incrementAndGet();\n+            }\n+         }\n+      };\n+      t2.start();\n+\n+\n+      try {\n+         Assert.assertTrue(\"Sender is blocking by mistake\", senderLatch.await(100, TimeUnit.SECONDS));\n+         Assert.assertTrue(\"Receiver did not receive messages\", receiverLatch.await(100, TimeUnit.SECONDS));\n+      } finally {\n+\n+         t1.join(TimeUnit.SECONDS.toMillis(1));\n+         t2.join(TimeUnit.SECONDS.toMillis(1));\n+\n+         if (t1.isAlive()) {\n+            t1.interrupt();\n+         }\n+\n+         if (t2.isAlive()) {\n+            t2.interrupt();\n+         }\n+      }\n+\n+   }\n+\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/772156dd358ceb8186c9d31644b08d3b06875624/tests/compatibility-tests/src/test/java/org/apache/activemq/artemis/tests/compatibility/OldAddressSpaceTest.java",
                "sha": "4b439a822449ecc0e383236663a7460ad4aa9f68",
                "status": "added"
            }
        ],
        "message": "ARTEMIS-1753 Prevent NPE on 1.x Client Topic Sub\n\nWhen creting a durable topic subscription using the Artemis 1.x JMS\nclient library.  The client sends a QueueQuery to the server to see if\nthe durable subsciption queue already exists.  The broker then performs\nsome transformation of the queue addresses to suit the 1.x naming\nscheme.  However, if the queue does not already exist the transform is\nattempted on a null string causing NPE.  To fix we simply check that the\nresult return isExists=true.",
        "parent": "https://github.com/apache/activemq-artemis/commit/e56b38b3e009c971b16502d863fa338ad9becc20",
        "patched_files": [
            "artemisServer.java",
            "ServerSessionPacketHandler.java",
            "sendMessagesAddress.java",
            "receiveMessages.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "OldAddressSpaceTest.java"
        ]
    },
    "activemq-artemis_77989c3": {
        "bug_id": "activemq-artemis_77989c3",
        "commit": "https://github.com/apache/activemq-artemis/commit/77989c3763c477de4bc45d2d0a8824201735235a",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/77989c3763c477de4bc45d2d0a8824201735235a/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/management/impl/ManagementServiceImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/management/impl/ManagementServiceImpl.java?ref=77989c3763c477de4bc45d2d0a8824201735235a",
                "deletions": 1,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/server/management/impl/ManagementServiceImpl.java",
                "patch": "@@ -550,7 +550,10 @@ public void start() throws Exception {\n          @Override\n          public void activated() {\n             try {\n-               messagingServer.addAddressInfo(new AddressInfo(managementNotificationAddress, RoutingType.MULTICAST));\n+               ActiveMQServer usedServer = messagingServer;\n+               if (usedServer != null) {\n+                  usedServer.addAddressInfo(new AddressInfo(managementNotificationAddress, RoutingType.MULTICAST));\n+               }\n             } catch (Exception e) {\n                ActiveMQServerLogger.LOGGER.unableToCreateManagementNotificationAddress(managementNotificationAddress, e);\n             }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/77989c3763c477de4bc45d2d0a8824201735235a/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/management/impl/ManagementServiceImpl.java",
                "sha": "ad888d007737b317ee9a1bc0d98d1f6b45584749",
                "status": "modified"
            }
        ],
        "message": "NO-JIRA avoiding a NPE if the server is stopped",
        "parent": "https://github.com/apache/activemq-artemis/commit/3e4d65e14c1252539a77262b4eba2cb7cab98f00",
        "patched_files": [
            "ManagementServiceImpl.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "ManagementServiceImplTest.java"
        ]
    },
    "activemq-artemis_7a5d143": {
        "bug_id": "activemq-artemis_7a5d143",
        "commit": "https://github.com/apache/activemq-artemis/commit/7a5d1434fb72f2127919d3f7676431ef8f4201fd",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/7a5d1434fb72f2127919d3f7676431ef8f4201fd/artemis-server/src/test/java/org/apache/activemq/artemis/core/server/group/impl/ClusteredResetMockTest.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/test/java/org/apache/activemq/artemis/core/server/group/impl/ClusteredResetMockTest.java?ref=7a5d1434fb72f2127919d3f7676431ef8f4201fd",
                "deletions": 2,
                "filename": "artemis-server/src/test/java/org/apache/activemq/artemis/core/server/group/impl/ClusteredResetMockTest.java",
                "patch": "@@ -158,8 +158,7 @@ public void run() {\n             if (response == null) {\n                ex = new NullPointerException(\"expected value on \" + getName());\n             }\n-\n-            if (!response.getGroupId().equals(code)) {\n+            else if (!response.getGroupId().equals(code)) {\n                ex = new IllegalStateException(\"expected code=\" + code + \" but it was \" + response.getGroupId());\n             }\n          }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/7a5d1434fb72f2127919d3f7676431ef8f4201fd/artemis-server/src/test/java/org/apache/activemq/artemis/core/server/group/impl/ClusteredResetMockTest.java",
                "sha": "47b45faa0ca7b8af61739f144aae1f70bd14b7bb",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE on testMultipleSenders null response",
        "parent": "https://github.com/apache/activemq-artemis/commit/72bf5b7a0a0b794900361f7665e29faf05305bf4",
        "patched_files": [],
        "repo": "activemq-artemis",
        "unit_tests": [
            "ClusteredResetMockTest.java"
        ]
    },
    "activemq-artemis_7ef95ae": {
        "bug_id": "activemq-artemis_7ef95ae",
        "commit": "https://github.com/apache/activemq-artemis/commit/7ef95ae977f7c9dcaf13da2959feafb897e8ea80",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/7ef95ae977f7c9dcaf13da2959feafb897e8ea80/activemq-protocols/activemq-proton-plug/src/main/java/org/proton/plug/context/AbstractConnectionContext.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/activemq-protocols/activemq-proton-plug/src/main/java/org/proton/plug/context/AbstractConnectionContext.java?ref=7ef95ae977f7c9dcaf13da2959feafb897e8ea80",
                "deletions": 1,
                "filename": "activemq-protocols/activemq-proton-plug/src/main/java/org/proton/plug/context/AbstractConnectionContext.java",
                "patch": "@@ -47,12 +47,13 @@\n \n    private final Map<Session, AbstractProtonSessionContext> sessions = new ConcurrentHashMap<>();\n \n+   protected LocalListener listener = new LocalListener();\n \n    public AbstractConnectionContext(AMQPConnectionCallback connectionCallback)\n    {\n       this.connectionCallback = connectionCallback;\n       connectionCallback.setConnection(this);\n-      handler.addEventHandler(new LocalListener());\n+      handler.addEventHandler(listener);\n    }\n \n    public SASLResult getSASLResult()",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/7ef95ae977f7c9dcaf13da2959feafb897e8ea80/activemq-protocols/activemq-proton-plug/src/main/java/org/proton/plug/context/AbstractConnectionContext.java",
                "sha": "3d0d0bc03796d7c2654c264d203e5ca185934f07",
                "status": "modified"
            },
            {
                "additions": 114,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/7ef95ae977f7c9dcaf13da2959feafb897e8ea80/activemq-protocols/activemq-proton-plug/src/test/java/org/proton/plug/context/AbstractConnectionContextTest.java",
                "changes": 114,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/activemq-protocols/activemq-proton-plug/src/test/java/org/proton/plug/context/AbstractConnectionContextTest.java?ref=7ef95ae977f7c9dcaf13da2959feafb897e8ea80",
                "deletions": 0,
                "filename": "activemq-protocols/activemq-proton-plug/src/test/java/org/proton/plug/context/AbstractConnectionContextTest.java",
                "patch": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.proton.plug.context;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import org.apache.qpid.proton.engine.Connection;\n+import org.apache.qpid.proton.engine.Link;\n+import org.apache.qpid.proton.engine.Session;\n+import org.junit.Test;\n+import org.proton.plug.AMQPConnectionCallback;\n+import org.proton.plug.AMQPConnectionContext;\n+import org.proton.plug.AMQPSessionCallback;\n+import org.proton.plug.ServerSASL;\n+import org.proton.plug.exceptions.ActiveMQAMQPException;\n+import org.proton.plug.handler.EventHandler;\n+\n+public class AbstractConnectionContextTest\n+{\n+\n+   @Test\n+   public void testListenerDoesntThrowNPEWhenClosingLinkWithNullContext() throws Exception\n+   {\n+      TestConnectionContext connectionContext = new TestConnectionContext(new TestConnectionCallback());\n+      EventHandler listener = connectionContext.getListener();\n+\n+      Connection protonConnection = Connection.Factory.create();\n+      Session protonSession = protonConnection.session();\n+      Link link = protonSession.receiver(\"link\");\n+\n+      link.setContext(null);\n+\n+      listener.onRemoteClose(link);\n+   }\n+\n+   private class TestConnectionContext extends AbstractConnectionContext\n+   {\n+\n+      public TestConnectionContext(AMQPConnectionCallback connectionCallback)\n+      {\n+         super(connectionCallback);\n+      }\n+\n+      @Override\n+      protected void remoteLinkOpened(Link link) throws Exception\n+      {\n+\n+      }\n+\n+      @Override\n+      protected AbstractProtonSessionContext newSessionExtension(Session realSession) throws ActiveMQAMQPException\n+      {\n+         return null;\n+      }\n+\n+      public EventHandler getListener()\n+      {\n+         return listener;\n+      }\n+   }\n+\n+   private class TestConnectionCallback implements AMQPConnectionCallback\n+   {\n+      @Override\n+      public void close()\n+      {\n+\n+      }\n+\n+      @Override\n+      public void onTransport(ByteBuf bytes, AMQPConnectionContext connection)\n+      {\n+\n+      }\n+\n+      @Override\n+      public AMQPSessionCallback createSessionCallback(AMQPConnectionContext connection)\n+      {\n+         return null;\n+      }\n+\n+      @Override\n+      public void setConnection(AMQPConnectionContext connection)\n+      {\n+\n+      }\n+\n+      @Override\n+      public AMQPConnectionContext getConnection()\n+      {\n+         return null;\n+      }\n+\n+      @Override\n+      public ServerSASL[] getSASLMechnisms()\n+      {\n+         return null;\n+      }\n+   }\n+}",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/7ef95ae977f7c9dcaf13da2959feafb897e8ea80/activemq-protocols/activemq-proton-plug/src/test/java/org/proton/plug/context/AbstractConnectionContextTest.java",
                "sha": "2396b1ec884bdccfe2c8c8314a715f69eb3eb2e4",
                "status": "added"
            }
        ],
        "message": "ACTIVEMQ6-55: add a test of the listener method throwing the NPE",
        "parent": "https://github.com/apache/activemq-artemis/commit/983effca9d9ab95f9babe488847cd75b68cc24a8",
        "patched_files": [
            "AbstractConnectionContext.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "AbstractConnectionContextTest.java"
        ]
    },
    "activemq-artemis_81b5563": {
        "bug_id": "activemq-artemis_81b5563",
        "commit": "https://github.com/apache/activemq-artemis/commit/81b5563a52ab56cbc30e91fcdd274985af13d0d8",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/81b5563a52ab56cbc30e91fcdd274985af13d0d8/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/ActiveMQServerLogger.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/ActiveMQServerLogger.java?ref=81b5563a52ab56cbc30e91fcdd274985af13d0d8",
                "deletions": 0,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/server/ActiveMQServerLogger.java",
                "patch": "@@ -1574,4 +1574,7 @@ void slowConsumerDetected(String sessionID,\n    @Message(id = 224075, value = \"Cannot find pageTX id = {0}\", format = Message.Format.MESSAGE_FORMAT)\n    void journalCannotFindPageTX(Long id);\n \n+   @LogMessage(level = Logger.Level.ERROR)\n+   @Message(id = 224076, value = \"No cluster locator found. This server will not participate in a cluster. Ensure a valid cluster-connection is configured.\", format = Message.Format.MESSAGE_FORMAT)\n+   void noClusterLocatorFound();\n }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/81b5563a52ab56cbc30e91fcdd274985af13d0d8/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/ActiveMQServerLogger.java",
                "sha": "4ef12fa7504b1382718138cc5a7cfb5af82a4c85",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/81b5563a52ab56cbc30e91fcdd274985af13d0d8/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/cluster/ClusterController.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/cluster/ClusterController.java?ref=81b5563a52ab56cbc30e91fcdd274985af13d0d8",
                "deletions": 1,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/server/cluster/ClusterController.java",
                "patch": "@@ -106,6 +106,9 @@ public void start() throws Exception {\n       } else {\n          replicationLocator = defaultLocator;\n       }\n+      if (replicationLocator == null) {\n+         ActiveMQServerLogger.LOGGER.noClusterLocatorFound();\n+      }\n       //latch so we know once we are connected\n       replicationClusterConnectedLatch = new CountDownLatch(1);\n       //and add the quorum manager as a topology listener\n@@ -198,7 +201,9 @@ private void configAndAdd(SimpleString name,\n     * @param listener\n     */\n    public void addClusterTopologyListenerForReplication(ClusterTopologyListener listener) {\n-      replicationLocator.addClusterTopologyListener(listener);\n+      if (replicationLocator != null) {\n+         replicationLocator.addClusterTopologyListener(listener);\n+      }\n    }\n \n    /**",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/81b5563a52ab56cbc30e91fcdd274985af13d0d8/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/cluster/ClusterController.java",
                "sha": "0849d0e733cf473ad0c595e46b5322ae4f6596ab",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-992 NPE on startup",
        "parent": "https://github.com/apache/activemq-artemis/commit/fd0513e4f5f17d86e4fd81b8eea6d801e2c41fb3",
        "patched_files": [
            "ClusterController.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "ClusterControllerTest.java"
        ]
    },
    "activemq-artemis_84a098a": {
        "bug_id": "activemq-artemis_84a098a",
        "commit": "https://github.com/apache/activemq-artemis/commit/84a098a4f4901732d347533ef0ee3a16d8ccd68e",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/84a098a4f4901732d347533ef0ee3a16d8ccd68e/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/message/impl/CoreMessage.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/message/impl/CoreMessage.java?ref=84a098a4f4901732d347533ef0ee3a16d8ccd68e",
                "deletions": 1,
                "filename": "artemis-core-client/src/main/java/org/apache/activemq/artemis/core/message/impl/CoreMessage.java",
                "patch": "@@ -644,8 +644,11 @@ public Message setLastValueProperty(SimpleString lastValueName) {\n \n    @Override\n    public int getEncodeSize() {\n+      if (buffer == null) {\n+         return -1;\n+      }\n       checkEncode();\n-      return buffer == null ? -1 : buffer.writerIndex();\n+      return buffer.writerIndex();\n    }\n \n    @Override",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/84a098a4f4901732d347533ef0ee3a16d8ccd68e/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/message/impl/CoreMessage.java",
                "sha": "5ed46cdd41c9650e850612033c3e269c0fec05bb",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-1743 fix NPE in server log when Artemis trace logging is enabled",
        "parent": "https://github.com/apache/activemq-artemis/commit/a00245dd067123574efa14a378d2017ddb33c817",
        "patched_files": [
            "CoreMessage.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "CoreMessageTest.java"
        ]
    },
    "activemq-artemis_886ae7b": {
        "bug_id": "activemq-artemis_886ae7b",
        "commit": "https://github.com/apache/activemq-artemis/commit/886ae7bfc524fcd3250bd82e17594976b940f59f",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/886ae7bfc524fcd3250bd82e17594976b940f59f/artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/impl/PagingStoreFactoryNIO.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/impl/PagingStoreFactoryNIO.java?ref=886ae7bfc524fcd3250bd82e17594976b940f59f",
                "deletions": 1,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/impl/PagingStoreFactoryNIO.java",
                "patch": "@@ -56,7 +56,7 @@\n \n    // Constants -----------------------------------------------------\n \n-   private static final String ADDRESS_FILE = \"address.txt\";\n+   public static final String ADDRESS_FILE = \"address.txt\";\n \n    // Attributes ----------------------------------------------------\n \n@@ -217,6 +217,12 @@ public void setPagingManager(final PagingManager pagingManager) {\n                addressString = reader.readLine();\n             }\n \n+            // there's no address listed in the file so we just skip it\n+            if (addressString == null) {\n+               ActiveMQServerLogger.LOGGER.emptyAddressFile(PagingStoreFactoryNIO.ADDRESS_FILE, file.toString());\n+               continue;\n+            }\n+\n             SimpleString address = new SimpleString(addressString);\n \n             SequentialFileFactory factory = newFileFactory(guid);",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/886ae7bfc524fcd3250bd82e17594976b940f59f/artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/impl/PagingStoreFactoryNIO.java",
                "sha": "364f221b819ada0c6846fe1574a6c99fda66fb93",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/886ae7bfc524fcd3250bd82e17594976b940f59f/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/ActiveMQServerLogger.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/ActiveMQServerLogger.java?ref=886ae7bfc524fcd3250bd82e17594976b940f59f",
                "deletions": 0,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/server/ActiveMQServerLogger.java",
                "patch": "@@ -1629,6 +1629,11 @@ void slowConsumerDetected(String sessionID,\n    @Message(id = 222281, value = \"Federation upstream {0} policy ref {1} are too self referential, avoiding stack overflow , \", format = Message.Format.MESSAGE_FORMAT)\n    void federationAvoidStackOverflowPolicyRef(String upstreamName, String policyRef);\n \n+   @LogMessage(level = Logger.Level.WARN)\n+   @Message(id = 222282, value = \"File {0} at {1} is empty. Delete the empty file to stop this message.\",\n+      format = Message.Format.MESSAGE_FORMAT)\n+   void emptyAddressFile(String addressFile, String directory);\n+\n    @LogMessage(level = Logger.Level.ERROR)\n    @Message(id = 224000, value = \"Failure in initialisation\", format = Message.Format.MESSAGE_FORMAT)\n    void initializationError(@Cause Throwable e);",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/886ae7bfc524fcd3250bd82e17594976b940f59f/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/ActiveMQServerLogger.java",
                "sha": "4751473f43ca11f4d13abd81fd4b0d235fb21e29",
                "status": "modified"
            },
            {
                "additions": 65,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/886ae7bfc524fcd3250bd82e17594976b940f59f/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/paging/PagingTest.java",
                "changes": 65,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/paging/PagingTest.java?ref=886ae7bfc524fcd3250bd82e17594976b940f59f",
                "deletions": 0,
                "filename": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/paging/PagingTest.java",
                "patch": "@@ -25,6 +25,7 @@\n import java.io.File;\n import java.io.IOException;\n import java.io.OutputStream;\n+import java.io.PrintWriter;\n import java.lang.management.ManagementFactory;\n import java.nio.ByteBuffer;\n import java.util.ArrayList;\n@@ -491,6 +492,70 @@ public void testPageCleanup() throws Exception {\n       System.out.println(\"pgComplete = \" + pgComplete);\n    }\n \n+   @Test\n+   public void testEmptyAddress() throws Exception {\n+      if (storeType == StoreConfiguration.StoreType.FILE) {\n+         clearDataRecreateServerDirs();\n+\n+         Configuration config = createDefaultInVMConfig().setJournalSyncNonTransactional(false);\n+\n+         server = createServer(true, config, PagingTest.PAGE_SIZE, PagingTest.PAGE_MAX);\n+\n+         server.start();\n+\n+         final int numberOfMessages = 5000;\n+\n+         locator = createInVMNonHALocator().setBlockOnNonDurableSend(true).setBlockOnDurableSend(true).setBlockOnAcknowledge(true);\n+\n+         sf = createSessionFactory(locator);\n+\n+         ClientSession session = sf.createSession(false, false, false);\n+\n+         session.createQueue(PagingTest.ADDRESS, RoutingType.ANYCAST, PagingTest.ADDRESS, null, true);\n+\n+         ClientProducer producer = session.createProducer(PagingTest.ADDRESS);\n+\n+         byte[] body = new byte[MESSAGE_SIZE];\n+\n+         ByteBuffer bb = ByteBuffer.wrap(body);\n+\n+         for (int j = 1; j <= MESSAGE_SIZE; j++) {\n+            bb.put(getSamplebyte(j));\n+         }\n+\n+         for (int i = 0; i < numberOfMessages; i++) {\n+            ClientMessage message = session.createMessage(true);\n+\n+            message.getBodyBuffer().writeBytes(body);\n+\n+            producer.send(message);\n+            if (i % 1000 == 0) {\n+               session.commit();\n+            }\n+         }\n+         session.commit();\n+         producer.close();\n+         session.close();\n+\n+         String addressTxt = server.getPagingManager().getPageStore(PagingTest.ADDRESS).getFolder().getAbsolutePath() + File.separator + PagingStoreFactoryNIO.ADDRESS_FILE;\n+\n+         server.stop();\n+\n+         // delete contents of address.txt\n+         new PrintWriter(addressTxt).close();\n+\n+         final AtomicBoolean activationFailures = new AtomicBoolean();\n+\n+         server.registerActivationFailureListener(exception -> activationFailures.set(true));\n+\n+         server.start();\n+\n+         server.stop();\n+\n+         assertFalse(activationFailures.get());\n+      }\n+   }\n+\n    @Test\n    public void testPurge() throws Exception {\n       clearDataRecreateServerDirs();",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/886ae7bfc524fcd3250bd82e17594976b940f59f/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/paging/PagingTest.java",
                "sha": "b12f25c05ebcc68a3ac364594fb53b0805307c52",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-2395 empty address.txt causes NPE",
        "parent": "https://github.com/apache/activemq-artemis/commit/f964f955fa8a877d2f15d4665dadbfb0be96442a",
        "patched_files": [
            "PagingStoreFactoryNIO.java",
            "ActiveMQServerLogger.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "PagingTest.java"
        ]
    },
    "activemq-artemis_8b458b5": {
        "bug_id": "activemq-artemis_8b458b5",
        "commit": "https://github.com/apache/activemq-artemis/commit/8b458b568268e4364bae94d25535d9373a8a49f8",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/8b458b568268e4364bae94d25535d9373a8a49f8/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/remoting/impl/ssl/SSLSupport.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/remoting/impl/ssl/SSLSupport.java?ref=8b458b568268e4364bae94d25535d9373a8a49f8",
                "deletions": 1,
                "filename": "artemis-core-client/src/main/java/org/apache/activemq/artemis/core/remoting/impl/ssl/SSLSupport.java",
                "patch": "@@ -125,7 +125,7 @@ public static SslContext createNettyClientContext(final String keystoreProvider,\n                                                final boolean trustAll  ) throws Exception {\n       KeyStore keyStore = SSLSupport.loadKeystore(keystoreProvider, keystorePath, keystorePassword);\n       KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n-      keyManagerFactory.init(keyStore, keystorePassword.toCharArray());\n+      keyManagerFactory.init(keyStore, keystorePassword == null ? null : keystorePassword.toCharArray());\n       return SslContextBuilder.forClient().sslProvider(SslProvider.valueOf(sslProvider)).keyManager(keyManagerFactory).trustManager(SSLSupport.loadTrustManagerFactory(trustStoreProvider, trustStorePath, trustStorePassword, trustAll, null)).build();\n    }\n ",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/8b458b568268e4364bae94d25535d9373a8a49f8/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/remoting/impl/ssl/SSLSupport.java",
                "sha": "905e19e93303068a1026a082654dea0b7062b309",
                "status": "modified"
            },
            {
                "additions": 84,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/8b458b568268e4364bae94d25535d9373a8a49f8/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/ssl/SSLProviderTest.java",
                "changes": 84,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/ssl/SSLProviderTest.java?ref=8b458b568268e4364bae94d25535d9373a8a49f8",
                "deletions": 0,
                "filename": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/ssl/SSLProviderTest.java",
                "patch": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.artemis.tests.integration.ssl;\n+\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.client.ActiveMQClient;\n+import org.apache.activemq.artemis.api.core.client.ClientConsumer;\n+import org.apache.activemq.artemis.api.core.client.ClientMessage;\n+import org.apache.activemq.artemis.api.core.client.ClientProducer;\n+import org.apache.activemq.artemis.api.core.client.ClientSession;\n+import org.apache.activemq.artemis.api.core.client.ClientSessionFactory;\n+import org.apache.activemq.artemis.api.core.client.ServerLocator;\n+import org.apache.activemq.artemis.core.remoting.impl.netty.NettyAcceptor;\n+import org.apache.activemq.artemis.core.remoting.impl.netty.TransportConstants;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class SSLProviderTest extends SSLTestBase {\n+\n+   public SSLProviderTest(String sslProvider, String clientSslProvider) {\n+      super(sslProvider, clientSslProvider);\n+   }\n+\n+   @Test\n+   public void testProviderConfig() {\n+      NettyAcceptor acceptor = (NettyAcceptor) server.getRemotingService().getAcceptor(getNettyAcceptorName());\n+      assertNotNull(acceptor);\n+      String sslProviderInUse = (String) acceptor.getConfiguration().get(TransportConstants.SSL_PROVIDER);\n+      assertEquals(sslProvider, sslProviderInUse);\n+   }\n+\n+   @Test\n+   public void testProviderLoading() throws Exception {\n+      if (!isOpenSSLSupported()) {\n+         System.out.println(\"*** Skip test on un-supported platform.\");\n+         return;\n+      }\n+\n+      final String text = \"Hello SSL!\";\n+      StringBuilder uri = new StringBuilder(\"tcp://\" + tc.getParams().get(TransportConstants.HOST_PROP_NAME).toString()\n+              + \":\" + tc.getParams().get(TransportConstants.PORT_PROP_NAME).toString());\n+\n+      uri.append(\"?\").append(TransportConstants.SSL_ENABLED_PROP_NAME).append(\"=true\");\n+      uri.append(\"&\").append(TransportConstants.SSL_PROVIDER).append(\"=\").append(clientSslProvider);\n+      uri.append(\"&\").append(TransportConstants.TRUSTSTORE_PROVIDER_PROP_NAME).append(\"=JKS\");\n+      uri.append(\"&\").append(TransportConstants.TRUSTSTORE_PATH_PROP_NAME).append(\"=\").append(CLIENT_SIDE_TRUSTSTORE);\n+      uri.append(\"&\").append(TransportConstants.TRUSTSTORE_PASSWORD_PROP_NAME).append(\"=\").append(PASSWORD);\n+\n+      System.out.println(\"uri: \" + uri.toString());\n+      ServerLocator locator = addServerLocator(ActiveMQClient.createServerLocator(uri.toString()));\n+      ClientSessionFactory sf = addSessionFactory(createSessionFactory(locator));\n+      ClientSession session = addClientSession(sf.createSession(false, true, true));\n+      session.createQueue(QUEUE, RoutingType.ANYCAST, QUEUE);\n+      ClientProducer producer = addClientProducer(session.createProducer(QUEUE));\n+\n+      ClientMessage message = createTextMessage(session, text);\n+      producer.send(message);\n+\n+      ClientConsumer consumer = addClientConsumer(session.createConsumer(QUEUE));\n+      session.start();\n+\n+      ClientMessage m = consumer.receive(1000);\n+      Assert.assertNotNull(m);\n+      Assert.assertEquals(text, m.getBodyBuffer().readString());\n+\n+   }\n+}",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/8b458b568268e4364bae94d25535d9373a8a49f8/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/ssl/SSLProviderTest.java",
                "sha": "3fa976fc0ca82f10da729d0190883b729e091147",
                "status": "added"
            },
            {
                "additions": 101,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/8b458b568268e4364bae94d25535d9373a8a49f8/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/ssl/SSLProviderTwoWayTest.java",
                "changes": 101,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/ssl/SSLProviderTwoWayTest.java?ref=8b458b568268e4364bae94d25535d9373a8a49f8",
                "deletions": 0,
                "filename": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/ssl/SSLProviderTwoWayTest.java",
                "patch": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.artemis.tests.integration.ssl;\n+\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.client.ActiveMQClient;\n+import org.apache.activemq.artemis.api.core.client.ClientConsumer;\n+import org.apache.activemq.artemis.api.core.client.ClientMessage;\n+import org.apache.activemq.artemis.api.core.client.ClientProducer;\n+import org.apache.activemq.artemis.api.core.client.ClientSession;\n+import org.apache.activemq.artemis.api.core.client.ClientSessionFactory;\n+import org.apache.activemq.artemis.api.core.client.ServerLocator;\n+import org.apache.activemq.artemis.core.remoting.impl.netty.NettyAcceptor;\n+import org.apache.activemq.artemis.core.remoting.impl.netty.TransportConstants;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.util.Map;\n+\n+@RunWith(Parameterized.class)\n+public class SSLProviderTwoWayTest extends SSLTestBase {\n+\n+   public SSLProviderTwoWayTest(String sslProvider, String clientSslProvider) {\n+      super(sslProvider, clientSslProvider);\n+   }\n+\n+   @Override\n+   protected void configureSSLParameters(Map<String, Object> params) {\n+      super.configureSSLParameters(params);\n+\n+      params.put(TransportConstants.TRUSTSTORE_PATH_PROP_NAME, SERVER_SIDE_TRUSTSTORE);\n+      params.put(TransportConstants.TRUSTSTORE_PASSWORD_PROP_NAME, PASSWORD);\n+      params.put(TransportConstants.TRUSTSTORE_PROVIDER_PROP_NAME, \"JKS\");\n+      params.put(TransportConstants.NEED_CLIENT_AUTH_PROP_NAME, true);\n+   }\n+\n+   @Test\n+   public void testProviderConfig() {\n+      NettyAcceptor acceptor = (NettyAcceptor) server.getRemotingService().getAcceptor(getNettyAcceptorName());\n+      assertNotNull(acceptor);\n+      String sslProviderInUse = (String) acceptor.getConfiguration().get(TransportConstants.SSL_PROVIDER);\n+      assertEquals(sslProvider, sslProviderInUse);\n+      assertTrue((Boolean) acceptor.getConfiguration().get(TransportConstants.NEED_CLIENT_AUTH_PROP_NAME));\n+   }\n+\n+   @Test\n+   public void testProviderLoading2Way() throws Exception {\n+      if (!isOpenSSLSupported()) {\n+         System.out.println(\"*** Skip test on un-supported platform.\");\n+         return;\n+      }\n+\n+      final String text = \"Hello SSL!\";\n+      StringBuilder uri = new StringBuilder(\"tcp://\" + tc.getParams().get(TransportConstants.HOST_PROP_NAME).toString()\n+              + \":\" + tc.getParams().get(TransportConstants.PORT_PROP_NAME).toString());\n+\n+      uri.append(\"?\").append(TransportConstants.SSL_ENABLED_PROP_NAME).append(\"=true\");\n+      uri.append(\"&\").append(TransportConstants.SSL_PROVIDER).append(\"=\").append(clientSslProvider);\n+      uri.append(\"&\").append(TransportConstants.KEYSTORE_PROVIDER_PROP_NAME).append(\"=\").append(\"JKS\");\n+      uri.append(\"&\").append(TransportConstants.KEYSTORE_PATH_PROP_NAME).append(\"=\").append(CLIENT_SIDE_KEYSTORE);\n+      uri.append(\"&\").append(TransportConstants.KEYSTORE_PASSWORD_PROP_NAME).append(\"=\").append(PASSWORD);\n+      uri.append(\"&\").append(TransportConstants.TRUSTSTORE_PROVIDER_PROP_NAME).append(\"=JKS\");\n+      uri.append(\"&\").append(TransportConstants.TRUSTSTORE_PATH_PROP_NAME).append(\"=\").append(CLIENT_SIDE_TRUSTSTORE);\n+      uri.append(\"&\").append(TransportConstants.TRUSTSTORE_PASSWORD_PROP_NAME).append(\"=\").append(PASSWORD);\n+\n+      System.out.println(\"uri: \" + uri.toString());\n+      ServerLocator locator = addServerLocator(ActiveMQClient.createServerLocator(uri.toString()));\n+      ClientSessionFactory sf = addSessionFactory(createSessionFactory(locator));\n+      ClientSession session = addClientSession(sf.createSession(false, true, true));\n+      session.createQueue(QUEUE, RoutingType.ANYCAST, QUEUE);\n+      ClientProducer producer = addClientProducer(session.createProducer(QUEUE));\n+\n+      ClientMessage message = createTextMessage(session, text);\n+      producer.send(message);\n+\n+      ClientConsumer consumer = addClientConsumer(session.createConsumer(QUEUE));\n+      session.start();\n+\n+      ClientMessage m = consumer.receive(1000);\n+      Assert.assertNotNull(m);\n+      Assert.assertEquals(text, m.getBodyBuffer().readString());\n+\n+   }\n+\n+}",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/8b458b568268e4364bae94d25535d9373a8a49f8/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/ssl/SSLProviderTwoWayTest.java",
                "sha": "cc93d4746076f9615ed0b560c746b6a1443c3d16",
                "status": "added"
            },
            {
                "additions": 108,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/8b458b568268e4364bae94d25535d9373a8a49f8/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/ssl/SSLTestBase.java",
                "changes": 108,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/ssl/SSLTestBase.java?ref=8b458b568268e4364bae94d25535d9373a8a49f8",
                "deletions": 0,
                "filename": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/ssl/SSLTestBase.java",
                "patch": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.artemis.tests.integration.ssl;\n+\n+import io.netty.handler.ssl.OpenSsl;\n+import org.apache.activemq.artemis.api.core.TransportConfiguration;\n+import org.apache.activemq.artemis.core.config.impl.ConfigurationImpl;\n+import org.apache.activemq.artemis.core.remoting.impl.netty.TransportConstants;\n+import org.apache.activemq.artemis.core.server.ActiveMQServer;\n+import org.apache.activemq.artemis.core.server.ActiveMQServers;\n+import org.apache.activemq.artemis.tests.util.ActiveMQTestBase;\n+import org.junit.Before;\n+import org.junit.runners.Parameterized;\n+\n+import java.lang.management.ManagementFactory;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public abstract class SSLTestBase extends ActiveMQTestBase {\n+\n+   @Parameterized.Parameters(name = \"sslProvider={0},clientProvider={1}\")\n+   public static Collection getParameters() {\n+      return Arrays.asList(new Object[][]{{TransportConstants.OPENSSL_PROVIDER, TransportConstants.DEFAULT_SSL_PROVIDER},\n+                                          {TransportConstants.OPENSSL_PROVIDER, TransportConstants.OPENSSL_PROVIDER},\n+                                          {TransportConstants.DEFAULT_SSL_PROVIDER, TransportConstants.DEFAULT_SSL_PROVIDER},\n+                                          {TransportConstants.DEFAULT_SSL_PROVIDER, TransportConstants.OPENSSL_PROVIDER}});\n+   }\n+\n+   protected static final String QUEUE = \"ssl.test.queue\";\n+\n+   protected final String PASSWORD = \"secureexample\";\n+   protected String SERVER_SIDE_KEYSTORE = \"openssl-server-side-keystore.jks\";\n+   protected String SERVER_SIDE_TRUSTSTORE = \"openssl-server-side-truststore.jks\";\n+   protected String CLIENT_SIDE_TRUSTSTORE = \"openssl-client-side-truststore.jks\";\n+   protected String CLIENT_SIDE_KEYSTORE = \"openssl-client-side-keystore.jks\";\n+\n+   protected ActiveMQServer server;\n+\n+   protected TransportConfiguration tc;\n+\n+   protected String sslProvider;\n+   protected String clientSslProvider;\n+\n+   public SSLTestBase(String sslProvider, String clientSslProvider) {\n+      this.sslProvider = sslProvider;\n+      this.clientSslProvider = clientSslProvider;\n+   }\n+\n+   @Override\n+   @Before\n+   public void setUp() throws Exception {\n+      super.setUp();\n+      Map<String, Object> params = new HashMap<>();\n+      configureSSLParameters(params);\n+      ConfigurationImpl config = createBasicConfig();\n+      config.addAcceptorConfiguration(new TransportConfiguration(NETTY_ACCEPTOR_FACTORY, params, getNettyAcceptorName()));\n+      config.addAcceptorConfiguration(new TransportConfiguration(NETTY_ACCEPTOR_FACTORY));\n+\n+      server = addServer(ActiveMQServers.newActiveMQServer(config, ManagementFactory.getPlatformMBeanServer(), null, false));\n+\n+      server.start();\n+      waitForServerToStart(server);\n+      tc = new TransportConfiguration(NETTY_CONNECTOR_FACTORY);\n+      tc.getParams().put(TransportConstants.HOST_PROP_NAME, params.get(TransportConstants.HOST_PROP_NAME));\n+      tc.getParams().put(TransportConstants.PORT_PROP_NAME, params.get(TransportConstants.PORT_PROP_NAME));\n+      tc.getParams().put(TransportConstants.SSL_PROVIDER, clientSslProvider);\n+   }\n+\n+   protected void configureSSLParameters(Map<String, Object> params) {\n+      System.out.println(\"*** Configure server SSL using provider: \" + sslProvider);\n+      params.put(TransportConstants.SSL_ENABLED_PROP_NAME, true);\n+      params.put(TransportConstants.SSL_PROVIDER, sslProvider);\n+      params.put(TransportConstants.KEYSTORE_PROVIDER_PROP_NAME, \"JKS\");\n+      params.put(TransportConstants.KEYSTORE_PATH_PROP_NAME, SERVER_SIDE_KEYSTORE);\n+      params.put(TransportConstants.KEYSTORE_PASSWORD_PROP_NAME, PASSWORD);\n+      params.put(TransportConstants.HOST_PROP_NAME, \"localhost\");\n+      params.put(TransportConstants.PORT_PROP_NAME, \"61617\");\n+   }\n+\n+   public String getNettyAcceptorName() {\n+      return \"SSLTestAcceptor\";\n+   }\n+\n+\n+   protected boolean isOpenSSLSupported() {\n+      if (sslProvider.equals(TransportConstants.OPENSSL_PROVIDER) || clientSslProvider.equals(TransportConstants.OPENSSL_PROVIDER)) {\n+         return OpenSsl.isAvailable();\n+      }\n+      return true;\n+   }\n+\n+}",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/8b458b568268e4364bae94d25535d9373a8a49f8/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/ssl/SSLTestBase.java",
                "sha": "92281e50b0c9cdfab0c6f9f570ebb8bfc4919c64",
                "status": "added"
            }
        ],
        "message": "ARTEMIS-1853 Adding Netty OpenSSL provider test\n\nAdded some netty openssl tests\nFix a NPE issue",
        "parent": "https://github.com/apache/activemq-artemis/commit/ef03ce4ee9704a611370fc13096358af8504b6dd",
        "patched_files": [
            "SSLTestBase.java",
            "SSLSupport.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "SSLProviderTest.java",
            "SSLSupportTest.java",
            "SSLProviderTwoWayTest.java"
        ]
    },
    "activemq-artemis_971f673": {
        "bug_id": "activemq-artemis_971f673",
        "commit": "https://github.com/apache/activemq-artemis/commit/971f673c602f859f342e22afe988c71687f754b6",
        "file": [
            {
                "additions": 57,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/971f673c602f859f342e22afe988c71687f754b6/artemis-protocols/artemis-mqtt-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/mqtt/MQTTConnectionManager.java",
                "changes": 110,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-protocols/artemis-mqtt-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/mqtt/MQTTConnectionManager.java?ref=971f673c602f859f342e22afe988c71687f754b6",
                "deletions": 53,
                "filename": "artemis-protocols/artemis-mqtt-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/mqtt/MQTTConnectionManager.java",
                "patch": "@@ -58,50 +58,52 @@ public MQTTConnectionManager(MQTTSession session) {\n    /**\n     * Handles the connect packet.  See spec for details on each of parameters.\n     */\n-   synchronized void connect(String cId,\n-                             String username,\n-                             byte[] passwordInBytes,\n-                             boolean will,\n-                             byte[] willMessage,\n-                             String willTopic,\n-                             boolean willRetain,\n-                             int willQosLevel,\n-                             boolean cleanSession) throws Exception {\n+   void connect(String cId,\n+                String username,\n+                byte[] passwordInBytes,\n+                boolean will,\n+                byte[] willMessage,\n+                String willTopic,\n+                boolean willRetain,\n+                int willQosLevel,\n+                boolean cleanSession) throws Exception {\n       String clientId = validateClientId(cId, cleanSession);\n       if (clientId == null) {\n          session.getProtocolHandler().sendConnack(MqttConnectReturnCode.CONNECTION_REFUSED_IDENTIFIER_REJECTED);\n          session.getProtocolHandler().disconnect(true);\n          return;\n       }\n \n-      String password = passwordInBytes == null ? null : new String(passwordInBytes, CharsetUtil.UTF_8);\n-      session.getConnection().setClientID(clientId);\n-      ServerSessionImpl serverSession = createServerSession(username, password);\n-      serverSession.start();\n-      session.setServerSession(serverSession);\n+      MQTTSessionState sessionState = getSessionState(clientId);\n+      synchronized (sessionState) {\n+         session.setSessionState(sessionState);\n+         String password = passwordInBytes == null ? null : new String(passwordInBytes, CharsetUtil.UTF_8);\n+         session.getConnection().setClientID(clientId);\n+         ServerSessionImpl serverSession = createServerSession(username, password);\n+         serverSession.start();\n+         session.setServerSession(serverSession);\n \n-      session.setSessionState(getSessionState(clientId));\n+         if (cleanSession) {\n+            /* [MQTT-3.1.2-6] If CleanSession is set to 1, the Client and Server MUST discard any previous Session and\n+             * start a new one. This Session lasts as long as the Network Connection. State data associated with this Session\n+             * MUST NOT be reused in any subsequent Session */\n+            session.clean();\n+            session.setClean(true);\n+         }\n \n-      if (cleanSession) {\n-         /* [MQTT-3.1.2-6] If CleanSession is set to 1, the Client and Server MUST discard any previous Session and\n-          * start a new one. This Session lasts as long as the Network Connection. State data associated with this Session\n-          * MUST NOT be reused in any subsequent Session */\n-         session.clean();\n-         session.setClean(true);\n-      }\n+         if (will) {\n+            isWill = true;\n+            this.willMessage = ByteBufAllocator.DEFAULT.buffer(willMessage.length);\n+            this.willMessage.writeBytes(willMessage);\n+            this.willQoSLevel = willQosLevel;\n+            this.willRetain = willRetain;\n+            this.willTopic = willTopic;\n+         }\n \n-      if (will) {\n-         isWill = true;\n-         this.willMessage = ByteBufAllocator.DEFAULT.buffer(willMessage.length);\n-         this.willMessage.writeBytes(willMessage);\n-         this.willQoSLevel = willQosLevel;\n-         this.willRetain = willRetain;\n-         this.willTopic = willTopic;\n+         session.getConnection().setConnected(true);\n+         session.start();\n+         session.getProtocolHandler().sendConnack(MqttConnectReturnCode.CONNECTION_ACCEPTED);\n       }\n-\n-      session.getConnection().setConnected(true);\n-      session.start();\n-      session.getProtocolHandler().sendConnack(MqttConnectReturnCode.CONNECTION_ACCEPTED);\n    }\n \n    /**\n@@ -133,35 +135,37 @@ ServerSessionImpl createServerSession(String username, String password) throws E\n       return (ServerSessionImpl) serverSession;\n    }\n \n-   synchronized void disconnect(boolean failure) {\n+   void disconnect(boolean failure) {\n       if (session == null || session.getStopped()) {\n          return;\n       }\n \n-      try {\n-         if (isWill && failure) {\n-            session.getMqttPublishManager().sendInternal(0, willTopic, willQoSLevel, willMessage, willRetain, true);\n-         }\n-         session.stop();\n-         session.getConnection().destroy();\n-      } catch (Exception e) {\n-         log.error(\"Error disconnecting client: \" + e.getMessage());\n-      } finally {\n-         if (session.getSessionState() != null) {\n-            session.getSessionState().setAttached(false);\n-            String clientId = session.getSessionState().getClientId();\n-            /**\n-             *  ensure that the connection for the client ID matches *this* connection otherwise we could remove the\n-             *  entry for the client who \"stole\" this client ID via [MQTT-3.1.4-2]\n-             */\n-            if (clientId != null && session.getProtocolManager().isClientConnected(clientId, session.getConnection())) {\n-               session.getProtocolManager().removeConnectedClient(clientId);\n+      synchronized (session.getSessionState()) {\n+         try {\n+            if (isWill && failure) {\n+               session.getMqttPublishManager().sendInternal(0, willTopic, willQoSLevel, willMessage, willRetain, true);\n+            }\n+            session.stop();\n+            session.getConnection().destroy();\n+         } catch (Exception e) {\n+            log.error(\"Error disconnecting client: \" + e.getMessage());\n+         } finally {\n+            if (session.getSessionState() != null) {\n+               session.getSessionState().setAttached(false);\n+               String clientId = session.getSessionState().getClientId();\n+               /**\n+                *  ensure that the connection for the client ID matches *this* connection otherwise we could remove the\n+                *  entry for the client who \"stole\" this client ID via [MQTT-3.1.4-2]\n+                */\n+               if (clientId != null && session.getProtocolManager().isClientConnected(clientId, session.getConnection())) {\n+                  session.getProtocolManager().removeConnectedClient(clientId);\n+               }\n             }\n          }\n       }\n    }\n \n-   private MQTTSessionState getSessionState(String clientId) {\n+   private synchronized MQTTSessionState getSessionState(String clientId) {\n       return session.getProtocolManager().getSessionState(clientId);\n    }\n ",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/971f673c602f859f342e22afe988c71687f754b6/artemis-protocols/artemis-mqtt-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/mqtt/MQTTConnectionManager.java",
                "sha": "c24a684c4f4b20028129a17c4ecec0f27bbee469",
                "status": "modified"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/971f673c602f859f342e22afe988c71687f754b6/artemis-protocols/artemis-mqtt-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/mqtt/MQTTSubscriptionManager.java",
                "changes": 48,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-protocols/artemis-mqtt-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/mqtt/MQTTSubscriptionManager.java?ref=971f673c602f859f342e22afe988c71687f754b6",
                "deletions": 16,
                "filename": "artemis-protocols/artemis-mqtt-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/mqtt/MQTTSubscriptionManager.java",
                "patch": "@@ -30,6 +30,7 @@\n import org.apache.activemq.artemis.api.core.SimpleString;\n import org.apache.activemq.artemis.core.server.ActiveMQMessageBundle;\n import org.apache.activemq.artemis.core.server.BindingQueryResult;\n+import org.apache.activemq.artemis.core.server.Consumer;\n import org.apache.activemq.artemis.core.server.Queue;\n import org.apache.activemq.artemis.core.server.ServerConsumer;\n import org.apache.activemq.artemis.core.server.impl.AddressInfo;\n@@ -182,24 +183,37 @@ private void addSubscription(MqttTopicSubscription subscription) throws Exceptio\n    }\n \n    void removeSubscriptions(List<String> topics) throws Exception {\n-      for (String topic : topics) {\n-         removeSubscription(topic);\n+      synchronized (session.getSessionState()) {\n+         for (String topic : topics) {\n+            removeSubscription(topic);\n+         }\n       }\n    }\n \n-   // FIXME: Do we need this synchronzied?\n-   private synchronized void removeSubscription(String address) throws Exception {\n+   private void removeSubscription(String address) throws Exception {\n       String internalAddress = MQTTUtil.convertMQTTAddressFilterToCore(address, session.getWildcardConfiguration());\n-\n       SimpleString internalQueueName = getQueueNameForTopic(internalAddress);\n       session.getSessionState().removeSubscription(address);\n \n-\n-      ServerConsumer consumer = consumers.get(address);\n-      consumers.remove(address);\n-      if (consumer != null) {\n-         consumer.close(false);\n-         consumerQoSLevels.remove(consumer.getID());\n+      SimpleString sAddress = SimpleString.toSimpleString(internalAddress);\n+      AddressInfo addressInfo = session.getServerSession().getAddress(sAddress);\n+      if (addressInfo != null && addressInfo.getRoutingTypes().contains(RoutingType.ANYCAST)) {\n+         ServerConsumer consumer = consumers.get(address);\n+         consumers.remove(address);\n+         if (consumer != null) {\n+            consumer.close(false);\n+            consumerQoSLevels.remove(consumer.getID());\n+         }\n+      } else {\n+         consumers.remove(address);\n+         Queue queue = session.getServer().locateQueue(internalQueueName);\n+         Set<Consumer> queueConsumers;\n+         if (queue != null && (queueConsumers = (Set<Consumer>) queue.getConsumers()) != null) {\n+            for (Consumer consumer : queueConsumers) {\n+               ((ServerConsumer) consumer).close(false);\n+               consumerQoSLevels.remove(((ServerConsumer) consumer).getID());\n+            }\n+         }\n       }\n \n       if (session.getServerSession().executeQueueQuery(internalQueueName).isExists()) {\n@@ -219,13 +233,15 @@ private SimpleString getQueueNameForTopic(String topic) {\n     * @throws Exception\n     */\n    int[] addSubscriptions(List<MqttTopicSubscription> subscriptions) throws Exception {\n-      int[] qos = new int[subscriptions.size()];\n+      synchronized (session.getSessionState()) {\n+         int[] qos = new int[subscriptions.size()];\n \n-      for (int i = 0; i < subscriptions.size(); i++) {\n-         addSubscription(subscriptions.get(i));\n-         qos[i] = subscriptions.get(i).qualityOfService().value();\n+         for (int i = 0; i < subscriptions.size(); i++) {\n+            addSubscription(subscriptions.get(i));\n+            qos[i] = subscriptions.get(i).qualityOfService().value();\n+         }\n+         return qos;\n       }\n-      return qos;\n    }\n \n    Map<Long, Integer> getConsumerQoSLevels() {",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/971f673c602f859f342e22afe988c71687f754b6/artemis-protocols/artemis-mqtt-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/mqtt/MQTTSubscriptionManager.java",
                "sha": "501c26bf850475114a0b1a8f54f36b48e2b642de",
                "status": "modified"
            },
            {
                "additions": 69,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/971f673c602f859f342e22afe988c71687f754b6/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/mqtt/imported/MQTTQueueCleanTest.java",
                "changes": 69,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/mqtt/imported/MQTTQueueCleanTest.java?ref=971f673c602f859f342e22afe988c71687f754b6",
                "deletions": 0,
                "filename": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/mqtt/imported/MQTTQueueCleanTest.java",
                "patch": "@@ -0,0 +1,69 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.activemq.artemis.tests.integration.mqtt.imported;\n+\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.tests.util.Wait;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashSet;\n+import java.util.Random;\n+import java.util.Set;\n+\n+public class MQTTQueueCleanTest extends MQTTTestSupport {\n+\n+   private static final Logger LOG = LoggerFactory.getLogger(MQTTQueueCleanTest.class);\n+\n+   @Test\n+   public void testQueueCleanWhenConnectionSynExeConnectAndDisconnect() throws Exception {\n+      Random random = new Random();\n+      Set<MQTTClientProvider> clientProviders = new HashSet<>(11);\n+      int repeatCount = 0;\n+      String address = \"clean/test\";\n+      String clientId = \"sameClientId\";\n+      String queueName = \"::sameClientId.clean.test\";\n+      //The abnormal scene does not necessarily occur, repeating 100 times to ensure the recurrence of the abnormality\n+      while (repeatCount < 100) {\n+         repeatCount++;\n+         int subConnectionCount = random.nextInt(50) + 1;\n+         int sC = 0;\n+         try {\n+            //Reconnect at least twice to reproduce the problem\n+            while (sC < subConnectionCount) {\n+               sC++;\n+               MQTTClientProvider clientProvider = getMQTTClientProvider();\n+               clientProvider.setClientId(clientId);\n+               initializeConnection(clientProvider);\n+               clientProviders.add(clientProvider);\n+               clientProvider.subscribe(address, AT_LEAST_ONCE);\n+            }\n+         } catch (Throwable e) {\n+            LOG.error(e.getMessage(), e);\n+         } finally {\n+            for (MQTTClientProvider clientProvider : clientProviders) {\n+               clientProvider.disconnect();\n+            }\n+            clientProviders.clear();\n+            assertTrue(Wait.waitFor(() -> server.locateQueue(SimpleString.toSimpleString(queueName)) == null, 5000, 10));\n+         }\n+      }\n+   }\n+\n+}",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/971f673c602f859f342e22afe988c71687f754b6/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/mqtt/imported/MQTTQueueCleanTest.java",
                "sha": "cb97e16bdd9ce53871dcfff773e198100d48ae65",
                "status": "added"
            }
        ],
        "message": "ARTEMIS-2206 The MQTT consumer reconnection caused the queue to not be cleared, and caused Artemis broker to throw a NullPointerException.\n\nWhen the MQTT consumer client (cleanSession property set to true) reconnected, there are certain probabilities that these two bugs will occur.\nThis is because the MQTT consumer client thinks that its connection has been disconnected and triggers reconnection, but the MQTT connection is still alive at Artemis broker. This bug occurs when new and old connections occur while operating the same queue for unsafe behavior.",
        "parent": "https://github.com/apache/activemq-artemis/commit/2a3ce34a58817002e637a33ed244749f23f36471",
        "patched_files": [
            "MQTTConnectionManager.java",
            "MQTTSubscriptionManager.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "MQTTQueueCleanTest.java"
        ]
    },
    "activemq-artemis_97f3fb2": {
        "bug_id": "activemq-artemis_97f3fb2",
        "commit": "https://github.com/apache/activemq-artemis/commit/97f3fb241ccc72d230dabef4deb028219f8ac8ad",
        "file": [
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/97f3fb241ccc72d230dabef4deb028219f8ac8ad/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/proton/plug/ProtonSessionIntegrationCallback.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/proton/plug/ProtonSessionIntegrationCallback.java?ref=97f3fb241ccc72d230dabef4deb028219f8ac8ad",
                "deletions": 12,
                "filename": "artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/proton/plug/ProtonSessionIntegrationCallback.java",
                "patch": "@@ -242,23 +242,29 @@ public void commitCurrentTX() throws Exception {\n \n    @Override\n    public void rollbackCurrentTX() throws Exception {\n-      recoverContext();\n-      try {\n-         serverSession.rollback(false);\n-      }\n-      finally {\n-         resetContext();\n+      //need to check here as this can be called if init fails\n+      if (serverSession != null) {\n+         recoverContext();\n+         try {\n+            serverSession.rollback(false);\n+         }\n+         finally {\n+            resetContext();\n+         }\n       }\n    }\n \n    @Override\n    public void close() throws Exception {\n-      recoverContext();\n-      try {\n-         serverSession.close(false);\n-      }\n-      finally {\n-         resetContext();\n+      //need to check here as this can be called if init fails\n+      if (serverSession != null) {\n+         recoverContext();\n+         try {\n+            serverSession.close(false);\n+         }\n+         finally {\n+            resetContext();\n+         }\n       }\n    }\n ",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/97f3fb241ccc72d230dabef4deb028219f8ac8ad/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/proton/plug/ProtonSessionIntegrationCallback.java",
                "sha": "2dccc30962468cd1813de4b8b5afafef409aa15e",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/97f3fb241ccc72d230dabef4deb028219f8ac8ad/artemis-protocols/artemis-proton-plug/src/main/java/org/proton/plug/context/AbstractConnectionContext.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-protocols/artemis-proton-plug/src/main/java/org/proton/plug/context/AbstractConnectionContext.java?ref=97f3fb241ccc72d230dabef4deb028219f8ac8ad",
                "deletions": 1,
                "filename": "artemis-protocols/artemis-proton-plug/src/main/java/org/proton/plug/context/AbstractConnectionContext.java",
                "patch": "@@ -182,7 +182,11 @@ public void onRemoteOpen(Connection connection) throws Exception {\n             connection.open();\n          }\n          initialise();\n-         if (!connection.getRemoteProperties().containsKey(CONNECTION_OPEN_FAILED)) {\n+         /*\n+         * This can be null which is in effect an empty map, also we really dont need to check this for in bound connections\n+         * but its here in case we add support for outbound connections.\n+         * */\n+         if (connection.getRemoteProperties() == null || !connection.getRemoteProperties().containsKey(CONNECTION_OPEN_FAILED)) {\n             long nextKeepAliveTime = handler.tick(true);\n             flushBytes();\n             if (nextKeepAliveTime > 0 && scheduledPool != null) {",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/97f3fb241ccc72d230dabef4deb028219f8ac8ad/artemis-protocols/artemis-proton-plug/src/main/java/org/proton/plug/context/AbstractConnectionContext.java",
                "sha": "93442de98e820a2d4a31fa43c796905e5b21cb3c",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-493 - NullPointerException when trying a null connection remote properties are passed by client\n\nadde a check and fixed a couple of other potential NPE's\n\nhttps://issues.apache.org/jira/browse/ARTEMIS-493",
        "parent": "https://github.com/apache/activemq-artemis/commit/bfa3b27cf740a1249491b0c7221268082306641e",
        "patched_files": [
            "AbstractConnectionContext.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "AbstractConnectionContextTest.java"
        ]
    },
    "activemq-artemis_9c840bd": {
        "bug_id": "activemq-artemis_9c840bd",
        "commit": "https://github.com/apache/activemq-artemis/commit/9c840bdeb8107ce1570c3f5d7cabd6edb37356b0",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/9c840bdeb8107ce1570c3f5d7cabd6edb37356b0/artemis-ra/src/main/java/org/apache/activemq/artemis/ra/inflow/ActiveMQActivation.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-ra/src/main/java/org/apache/activemq/artemis/ra/inflow/ActiveMQActivation.java?ref=9c840bdeb8107ce1570c3f5d7cabd6edb37356b0",
                "deletions": 2,
                "filename": "artemis-ra/src/main/java/org/apache/activemq/artemis/ra/inflow/ActiveMQActivation.java",
                "patch": "@@ -42,6 +42,7 @@\n import org.apache.activemq.artemis.api.core.ActiveMQNonExistentQueueException;\n import org.apache.activemq.artemis.api.core.ActiveMQNotConnectedException;\n import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.api.core.client.ActiveMQClient;\n import org.apache.activemq.artemis.api.core.client.ClientSession;\n import org.apache.activemq.artemis.api.core.client.ClientSessionFactory;\n import org.apache.activemq.artemis.api.core.client.ClusterTopologyListener;\n@@ -360,6 +361,8 @@ protected synchronized void setup() throws Exception {\n    protected synchronized void teardown() {\n       ActiveMQRALogger.LOGGER.debug(\"Tearing down \" + spec);\n \n+      long timeout = factory == null ? ActiveMQClient.DEFAULT_CALL_TIMEOUT : factory.getCallTimeout();\n+\n       if (resourceRecovery != null) {\n          ra.getRecoveryManager().unRegister(resourceRecovery);\n       }\n@@ -385,7 +388,7 @@ protected synchronized void teardown() {\n       }\n \n       //wait for all the consumers to complete any onmessage calls\n-      boolean stuckThreads = !future.await(factory.getCallTimeout());\n+      boolean stuckThreads = !future.await(timeout);\n       //if any are stuck then we need to interrupt them\n       if (stuckThreads) {\n          for (Thread interruptThread : interruptThreads) {\n@@ -413,7 +416,7 @@ public void run() {\n       threadTearDown.start();\n \n       try {\n-         threadTearDown.join(factory.getCallTimeout());\n+         threadTearDown.join(timeout);\n       }\n       catch (InterruptedException e) {\n          // nothing to be done on this context.. we will just keep going as we need to send an interrupt to threadTearDown and give up",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/9c840bdeb8107ce1570c3f5d7cabd6edb37356b0/artemis-ra/src/main/java/org/apache/activemq/artemis/ra/inflow/ActiveMQActivation.java",
                "sha": "510e6803c6a60019ddd92a9a2fc7c77eedd7f7ce",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-459 NPE during RA tearDown",
        "parent": "https://github.com/apache/activemq-artemis/commit/7d9d3086ab74713b84aaf5deea7357bd6432c030",
        "patched_files": [
            "ActiveMQActivation.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "ActiveMQActivationTest.java"
        ]
    },
    "activemq-artemis_b3f0a87": {
        "bug_id": "activemq-artemis_b3f0a87",
        "commit": "https://github.com/apache/activemq-artemis/commit/b3f0a87e0db4832585a0460633889e13ef4bcbf8",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/b3f0a87e0db4832585a0460633889e13ef4bcbf8/artemis-journal/src/main/java/org/apache/activemq/artemis/core/journal/impl/JournalImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-journal/src/main/java/org/apache/activemq/artemis/core/journal/impl/JournalImpl.java?ref=b3f0a87e0db4832585a0460633889e13ef4bcbf8",
                "deletions": 0,
                "filename": "artemis-journal/src/main/java/org/apache/activemq/artemis/core/journal/impl/JournalImpl.java",
                "patch": "@@ -964,6 +964,12 @@ public void run() {\n                // computing the delete should be done after compacting is done\n                if (record == null) {\n                   compactor.addCommandDelete(id, usedFile);\n+                  // JournalImplTestUni::testDoubleDelete was written to validate this condition:\n+                  if (compactor == null) {\n+                     logger.debug(\"Record \" + id + \" had been deleted already from a different call\");\n+                  } else {\n+                     compactor.addCommandDelete(id, usedFile);\n+                  }\n                } else {\n                   record.delete(usedFile);\n                }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/b3f0a87e0db4832585a0460633889e13ef4bcbf8/artemis-journal/src/main/java/org/apache/activemq/artemis/core/journal/impl/JournalImpl.java",
                "sha": "f46ad92def16c293eba7d102e7700463dadfb89e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/b3f0a87e0db4832585a0460633889e13ef4bcbf8/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/openwire/OpenWireLargeMessageTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/openwire/OpenWireLargeMessageTest.java?ref=b3f0a87e0db4832585a0460633889e13ef4bcbf8",
                "deletions": 1,
                "filename": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/openwire/OpenWireLargeMessageTest.java",
                "patch": "@@ -167,7 +167,7 @@ public void testFastLargeMessageProducerDropOnPaging() throws Exception {\n          }\n          server.stop();\n          Assert.assertFalse(AssertionLoggerHandler.findText(\"NullPointerException\"));\n-         Assert.assertFalse(AssertionLoggerHandler.findText(\"Cannot find record\"));\n+         Assert.assertFalse(AssertionLoggerHandler.findText(\"It was not possible to delete message\"));\n       } finally {\n          AssertionLoggerHandler.stopCapture();\n       }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/b3f0a87e0db4832585a0460633889e13ef4bcbf8/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/openwire/OpenWireLargeMessageTest.java",
                "sha": "cdb646db95cb9a69209d01a5773cbfe5d20353f9",
                "status": "modified"
            },
            {
                "additions": 65,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/b3f0a87e0db4832585a0460633889e13ef4bcbf8/tests/unit-tests/src/test/java/org/apache/activemq/artemis/tests/unit/core/journal/impl/JournalImplTestUnit.java",
                "changes": 74,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/unit-tests/src/test/java/org/apache/activemq/artemis/tests/unit/core/journal/impl/JournalImplTestUnit.java?ref=b3f0a87e0db4832585a0460633889e13ef4bcbf8",
                "deletions": 9,
                "filename": "tests/unit-tests/src/test/java/org/apache/activemq/artemis/tests/unit/core/journal/impl/JournalImplTestUnit.java",
                "patch": "@@ -19,6 +19,8 @@\n import java.io.File;\n import java.nio.ByteBuffer;\n import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.activemq.artemis.api.core.ActiveMQException;\n import org.apache.activemq.artemis.api.core.ActiveMQIOErrorException;\n@@ -27,6 +29,7 @@\n import org.apache.activemq.artemis.core.journal.RecordInfo;\n import org.apache.activemq.artemis.core.journal.TestableJournal;\n import org.apache.activemq.artemis.core.journal.impl.JournalImpl;\n+import org.apache.activemq.artemis.logs.AssertionLoggerHandler;\n import org.apache.activemq.artemis.tests.unit.UnitTestLogger;\n import org.apache.activemq.artemis.tests.unit.core.journal.impl.fakes.SimpleEncoding;\n import org.apache.activemq.artemis.utils.RandomUtil;\n@@ -437,7 +440,10 @@ private int calculateRecordsPerFile(final int fileSize, final int alignment, int\n    /**\n     * Use: calculateNumberOfFiles (fileSize, numberOfRecords, recordSize,  numberOfRecords2, recordSize2, , ...., numberOfRecordsN, recordSizeN);\n     */\n-   private int calculateNumberOfFiles(TestableJournal journal, final int fileSize, final int alignment, final int... record) throws Exception {\n+   private int calculateNumberOfFiles(TestableJournal journal,\n+                                      final int fileSize,\n+                                      final int alignment,\n+                                      final int... record) throws Exception {\n       if (journal != null) {\n          journal.flush();\n       }\n@@ -1413,8 +1419,7 @@ public void testCommitRecordsInFileReclaim() throws Exception {\n \n    @Test\n    public void testCommitRecordsInFileNoReclaim() throws Exception {\n-      setup(2, calculateRecordSize(JournalImpl.SIZE_HEADER, getAlignment()) + calculateRecordSize(recordLength, getAlignment()) +\n-         512, true);\n+      setup(2, calculateRecordSize(JournalImpl.SIZE_HEADER, getAlignment()) + calculateRecordSize(recordLength, getAlignment()) + 512, true);\n       createJournal();\n       startJournal();\n       load();\n@@ -1497,8 +1502,7 @@ public void testCommitRecordsInFileNoReclaim() throws Exception {\n \n    @Test\n    public void testRollbackRecordsInFileNoReclaim() throws Exception {\n-      setup(2, calculateRecordSize(JournalImpl.SIZE_HEADER, getAlignment()) + calculateRecordSize(recordLength, getAlignment()) +\n-         512, true);\n+      setup(2, calculateRecordSize(JournalImpl.SIZE_HEADER, getAlignment()) + calculateRecordSize(recordLength, getAlignment()) + 512, true);\n       createJournal();\n       startJournal();\n       load();\n@@ -1589,8 +1593,7 @@ public void testRollbackRecordsInFileNoReclaim() throws Exception {\n \n    @Test\n    public void testEmptyPrepare() throws Exception {\n-      setup(2, calculateRecordSize(JournalImpl.SIZE_HEADER, getAlignment()) + calculateRecordSize(recordLength, getAlignment()) +\n-         512, true);\n+      setup(2, calculateRecordSize(JournalImpl.SIZE_HEADER, getAlignment()) + calculateRecordSize(recordLength, getAlignment()) + 512, true);\n       createJournal();\n       startJournal();\n       load();\n@@ -1624,8 +1627,7 @@ public void testEmptyPrepare() throws Exception {\n \n    @Test\n    public void testPrepareNoReclaim() throws Exception {\n-      setup(2, calculateRecordSize(JournalImpl.SIZE_HEADER, getAlignment()) + calculateRecordSize(recordLength, getAlignment()) +\n-         512, true);\n+      setup(2, calculateRecordSize(JournalImpl.SIZE_HEADER, getAlignment()) + calculateRecordSize(recordLength, getAlignment()) + 512, true);\n       createJournal();\n       startJournal();\n       load();\n@@ -1998,6 +2000,60 @@ public void testMultipleAddUpdate() throws Exception {\n       loadAndCheck();\n    }\n \n+   @Test\n+   public void testDoubleDelete() throws Exception {\n+\n+      AssertionLoggerHandler.startCapture();\n+      try {\n+         setup(10, 10 * 1024, true);\n+         createJournal();\n+         startJournal();\n+         load();\n+\n+         byte[] record = generateRecord(100);\n+\n+         add(1);\n+\n+         // I'm not adding that to the test assertion, as it will be deleted anyway.\n+         // the test assertion doesn't support multi-thread, so I'm calling the journal directly here\n+         journal.appendAddRecord(2, (byte) 0, record, sync);\n+\n+         Thread[] threads = new Thread[100];\n+         CountDownLatch alignLatch = new CountDownLatch(threads.length);\n+         CountDownLatch startFlag = new CountDownLatch(1);\n+         for (int i = 0; i < threads.length; i++) {\n+            threads[i] = new Thread(() -> {\n+               alignLatch.countDown();\n+               try {\n+                  startFlag.await(5, TimeUnit.SECONDS);\n+                  journal.appendDeleteRecord(2, false);\n+               } catch (java.lang.IllegalStateException expected) {\n+               } catch (Exception e) {\n+                  e.printStackTrace();\n+               }\n+            });\n+            threads[i].start();\n+         }\n+\n+         Assert.assertTrue(alignLatch.await(5, TimeUnit.SECONDS));\n+         startFlag.countDown();\n+\n+         for (Thread t : threads) {\n+            t.join(TimeUnit.SECONDS.toMillis(10));\n+            Assert.assertFalse(t.isAlive());\n+         }\n+         journal.flush();\n+\n+         Assert.assertFalse(AssertionLoggerHandler.findText(\"NullPointerException\"));\n+         stopJournal();\n+         createJournal();\n+         startJournal();\n+         loadAndCheck();\n+      } finally {\n+         AssertionLoggerHandler.stopCapture();\n+      }\n+   }\n+\n    @Test\n    public void testMultipleAddUpdateAll() throws Exception {\n       setup(10, 10 * 1024, true);",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/b3f0a87e0db4832585a0460633889e13ef4bcbf8/tests/unit-tests/src/test/java/org/apache/activemq/artemis/tests/unit/core/journal/impl/JournalImplTestUnit.java",
                "sha": "25b2413845c217a6508d9bcca4c2a934da1ffb56",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-2200 NPE when calling journal.delete from Multiple Threads",
        "parent": "https://github.com/apache/activemq-artemis/commit/702f445205de953a343c1beef436fc8b984c7624",
        "patched_files": [
            "JournalImpl.java",
            "JournalImplTestUnit.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "OpenWireLargeMessageTest.java"
        ]
    },
    "activemq-artemis_b8dd021": {
        "bug_id": "activemq-artemis_b8dd021",
        "commit": "https://github.com/apache/activemq-artemis/commit/b8dd0219a3576094fcdba08ef8c6489eafabf814",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/b8dd0219a3576094fcdba08ef8c6489eafabf814/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/QueueImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/QueueImpl.java?ref=b8dd0219a3576094fcdba08ef8c6489eafabf814",
                "deletions": 1,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/QueueImpl.java",
                "patch": "@@ -2603,7 +2603,9 @@ public void postAcknowledge(final MessageReference ref) {\n          message = null;\n       }\n \n-      boolean durableRef = message != null && message.isDurable() && queue.durable;\n+      if (message == null) return;\n+\n+      boolean durableRef = message.isDurable() && queue.durable;\n \n       try {\n          message.decrementRefCount();",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/b8dd0219a3576094fcdba08ef8c6489eafabf814/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/QueueImpl.java",
                "sha": "0d58eed160cc2de6a5c245017d3256601617a4aa",
                "status": "modified"
            }
        ],
        "message": "eliminated NPE possibility in QueueImpl class",
        "parent": "https://github.com/apache/activemq-artemis/commit/e0f5cb6eeeb13c191b825836203cb6568c2ddf4a",
        "patched_files": [
            "QueueImpl.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "QueueImplTest.java"
        ]
    },
    "activemq-artemis_d4041b5": {
        "bug_id": "activemq-artemis_d4041b5",
        "commit": "https://github.com/apache/activemq-artemis/commit/d4041b5a72edae68fd70c43ba9a53023b5ec567d",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/d4041b5a72edae68fd70c43ba9a53023b5ec567d/artemis-protocols/artemis-openwire-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/openwire/OpenWireConnection.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-protocols/artemis-openwire-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/openwire/OpenWireConnection.java?ref=d4041b5a72edae68fd70c43ba9a53023b5ec567d",
                "deletions": 2,
                "filename": "artemis-protocols/artemis-openwire-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/openwire/OpenWireConnection.java",
                "patch": "@@ -193,7 +193,7 @@\n \n    private final Set<SimpleString> knownDestinations = new ConcurrentHashSet<>();\n \n-   private AtomicBoolean disableTtl = new AtomicBoolean(false);\n+   private final AtomicBoolean disableTtl = new AtomicBoolean(false);\n \n    public OpenWireConnection(Connection connection,\n                              ActiveMQServer server,\n@@ -1676,7 +1676,7 @@ public String getProtocolName() {\n \n    @Override\n    public String getClientID() {\n-      return context.getClientId();\n+      return context != null ? context.getClientId() : null;\n    }\n \n    @Override",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/d4041b5a72edae68fd70c43ba9a53023b5ec567d/artemis-protocols/artemis-openwire-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/openwire/OpenWireConnection.java",
                "sha": "803ed22f3fe1f1210fa6696ac3c184ea2a6a0c63",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/d4041b5a72edae68fd70c43ba9a53023b5ec567d/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/plugin/OpenwirePluginTest.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/plugin/OpenwirePluginTest.java?ref=d4041b5a72edae68fd70c43ba9a53023b5ec567d",
                "deletions": 2,
                "filename": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/plugin/OpenwirePluginTest.java",
                "patch": "@@ -60,9 +60,12 @@\n import javax.jms.Queue;\n import javax.jms.Session;\n \n+import org.apache.activemq.artemis.api.core.ActiveMQException;\n import org.apache.activemq.artemis.core.config.Configuration;\n import org.apache.activemq.artemis.core.server.ActiveMQServer;\n+import org.apache.activemq.artemis.core.server.plugin.ActiveMQServerPlugin;\n import org.apache.activemq.artemis.core.settings.impl.AddressSettings;\n+import org.apache.activemq.artemis.spi.core.protocol.RemotingConnection;\n import org.apache.activemq.artemis.tests.integration.openwire.BasicOpenWireTest;\n import org.junit.Test;\n \n@@ -76,14 +79,27 @@ protected ActiveMQServer createServer(boolean realFiles, Configuration configura\n                                          long maxAddressSize, Map<String, AddressSettings> settings) {\n       ActiveMQServer server = super.createServer(realFiles, configuration, pageSize, maxAddressSize, settings);\n       server.registerBrokerPlugin(verifier);\n+      server.registerBrokerPlugin(new ActiveMQServerPlugin() {\n+\n+         @Override\n+         public void afterCreateConnection(RemotingConnection connection) throws ActiveMQException {\n+            try {\n+               //Verify that calling getClientID() before initialized doesn't cause an error\n+               //Test for ARTEMIS-1713\n+               connection.getClientID();\n+            } catch (Exception e) {\n+               throw new ActiveMQException(e.getMessage());\n+            }\n+         }\n+      });\n \n       configuration.getAddressesSettings().put(\"autoCreated\", new AddressSettings().setAutoDeleteAddresses(true)\n             .setAutoDeleteQueues(true).setAutoCreateQueues(true).setAutoCreateAddresses(true));\n \n       return server;\n    }\n \n-   @Test\n+   @Test(timeout = 10000)\n    public void testAckedMessageAreConsumed() throws JMSException {\n       connection.start();\n       Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n@@ -119,7 +135,7 @@ public void testAckedMessageAreConsumed() throws JMSException {\n \n    }\n \n-   @Test\n+   @Test(timeout = 10000)\n    public void testAutoCreatedQueue() throws JMSException {\n       connection.start();\n       Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/d4041b5a72edae68fd70c43ba9a53023b5ec567d/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/plugin/OpenwirePluginTest.java",
                "sha": "d0206a7be5fa840ed963030b51d8b9f0562cf823",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-1713 - Fix NPE inside OpenWireConnection\n\nfix NPE inside getClientId() in OpenWireConnection",
        "parent": "https://github.com/apache/activemq-artemis/commit/bbf0fb495be3c63cdff6e2fe31d88953f1b662ea",
        "patched_files": [
            "OpenWireConnection.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "OpenwirePluginTest.java"
        ]
    },
    "activemq-artemis_d5eaccf": {
        "bug_id": "activemq-artemis_d5eaccf",
        "commit": "https://github.com/apache/activemq-artemis/commit/d5eaccf3ba8088c9308837a2e4173320d366038c",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/d5eaccf3ba8088c9308837a2e4173320d366038c/artemis-commons/src/main/java/org/apache/activemq/artemis/utils/UUIDGenerator.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-commons/src/main/java/org/apache/activemq/artemis/utils/UUIDGenerator.java?ref=d5eaccf3ba8088c9308837a2e4173320d366038c",
                "deletions": 0,
                "filename": "artemis-commons/src/main/java/org/apache/activemq/artemis/utils/UUIDGenerator.java",
                "patch": "@@ -247,6 +247,10 @@ private static String asString(final byte[] bytes) {\n       try {\n          networkInterfaces = NetworkInterface.getNetworkInterfaces();\n \n+         if (networkInterfaces == null) {\n+            return Collections.emptyList();\n+         }\n+\n          List<NetworkInterface> ifaces = new ArrayList<>();\n          while (networkInterfaces.hasMoreElements()) {\n             ifaces.add(networkInterfaces.nextElement());",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/d5eaccf3ba8088c9308837a2e4173320d366038c/artemis-commons/src/main/java/org/apache/activemq/artemis/utils/UUIDGenerator.java",
                "sha": "111d8f03cc0981a5f980b52a8fc3b8a5e5e4adf9",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-709 Possible NPE on UUIDGenerator.getAllNetworkInterfaces()",
        "parent": "https://github.com/apache/activemq-artemis/commit/63172e7d361d1e03b907636379d84dcbebf97dfe",
        "patched_files": [
            "UUIDGenerator.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "UUIDGeneratorTest.java"
        ]
    },
    "activemq-artemis_dac332f": {
        "bug_id": "activemq-artemis_dac332f",
        "commit": "https://github.com/apache/activemq-artemis/commit/dac332fe1fca33343a8fe3f7ea6c29ee772d32bc",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/dac332fe1fca33343a8fe3f7ea6c29ee772d32bc/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/remoting/impl/netty/NettyConnection.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/remoting/impl/netty/NettyConnection.java?ref=dac332fe1fca33343a8fe3f7ea6c29ee772d32bc",
                "deletions": 24,
                "filename": "artemis-core-client/src/main/java/org/apache/activemq/artemis/core/remoting/impl/netty/NettyConnection.java",
                "patch": "@@ -30,7 +30,6 @@\n import io.netty.channel.ChannelFutureListener;\n import io.netty.channel.ChannelPromise;\n import io.netty.channel.EventLoop;\n-import io.netty.handler.ssl.SslHandler;\n import org.apache.activemq.artemis.api.core.ActiveMQBuffer;\n import org.apache.activemq.artemis.api.core.ActiveMQInterruptedException;\n import org.apache.activemq.artemis.api.core.TransportConfiguration;\n@@ -238,12 +237,10 @@ public final void close() {\n       boolean inEventLoop = eventLoop.inEventLoop();\n       //if we are in an event loop we need to close the channel after the writes have finished\n       if (!inEventLoop) {\n-         final SslHandler sslHandler = (SslHandler) channel.pipeline().get(\"ssl\");\n-         closeSSLAndChannel(sslHandler, channel, false);\n+         closeChannel(channel, false);\n       } else {\n          eventLoop.execute(() -> {\n-            final SslHandler sslHandler = (SslHandler) channel.pipeline().get(\"ssl\");\n-            closeSSLAndChannel(sslHandler, channel, true);\n+            closeChannel(channel, true);\n          });\n       }\n \n@@ -555,26 +552,12 @@ public final String toString() {\n       return super.toString() + \"[ID=\" + getID() + \", local= \" + channel.localAddress() + \", remote=\" + channel.remoteAddress() + \"]\";\n    }\n \n-   private void closeSSLAndChannel(SslHandler sslHandler, final Channel channel, boolean inEventLoop) {\n+   private void closeChannel(final Channel channel, boolean inEventLoop) {\n       checkFlushBatchBuffer();\n-      if (sslHandler != null) {\n-         try {\n-            ChannelFuture sslCloseFuture = sslHandler.close();\n-            sslCloseFuture.addListener(future -> channel.close());\n-            if (!inEventLoop && !sslCloseFuture.awaitUninterruptibly(DEFAULT_WAIT_MILLIS)) {\n-               ActiveMQClientLogger.LOGGER.timeoutClosingSSL();\n-            }\n-         } catch (Throwable t) {\n-            // ignore\n-            if (ActiveMQClientLogger.LOGGER.isTraceEnabled()) {\n-               ActiveMQClientLogger.LOGGER.trace(t.getMessage(), t);\n-            }\n-         }\n-      } else {\n-         ChannelFuture closeFuture = channel.close();\n-         if (!inEventLoop && !closeFuture.awaitUninterruptibly(DEFAULT_WAIT_MILLIS)) {\n-            ActiveMQClientLogger.LOGGER.timeoutClosingNettyChannel();\n-         }\n+      // closing the channel results in closing any sslHandler first; SslHandler#close() was deprecated by netty\n+      ChannelFuture closeFuture = channel.close();\n+      if (!inEventLoop && !closeFuture.awaitUninterruptibly(DEFAULT_WAIT_MILLIS)) {\n+         ActiveMQClientLogger.LOGGER.timeoutClosingNettyChannel();\n       }\n    }\n ",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/dac332fe1fca33343a8fe3f7ea6c29ee772d32bc/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/remoting/impl/netty/NettyConnection.java",
                "sha": "f8195fbdcedcf3f2243159df3acea8c5fcbd942a",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-1804 deprecated Netty SslHandler.close() causing NPE\n\nThe NPE can appear when an OpenWire client which is using SSL disconnects.",
        "parent": "https://github.com/apache/activemq-artemis/commit/acc34d90881313d5c94a5a377aac9438175e55ef",
        "patched_files": [
            "NettyConnection.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "NettyConnectionTest.java"
        ]
    },
    "activemq-artemis_dae1b7d": {
        "bug_id": "activemq-artemis_dae1b7d",
        "commit": "https://github.com/apache/activemq-artemis/commit/dae1b7de1cf411994b550715c2fce143917df6f6",
        "file": [
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/dae1b7de1cf411994b550715c2fce143917df6f6/artemis-cli/src/main/java/org/apache/activemq/artemis/cli/commands/messages/ConsumerThread.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-cli/src/main/java/org/apache/activemq/artemis/cli/commands/messages/ConsumerThread.java?ref=dae1b7de1cf411994b550715c2fce143917df6f6",
                "deletions": 5,
                "filename": "artemis-cli/src/main/java/org/apache/activemq/artemis/cli/commands/messages/ConsumerThread.java",
                "patch": "@@ -21,6 +21,7 @@\n import javax.jms.JMSException;\n import javax.jms.Message;\n import javax.jms.MessageConsumer;\n+import javax.jms.ObjectMessage;\n import javax.jms.Queue;\n import javax.jms.QueueBrowser;\n import javax.jms.Session;\n@@ -157,11 +158,23 @@ public void consume() {\n                      System.out.println(\"Received \" + count);\n                   }\n                }\n-               if (bytesAsText && (msg instanceof BytesMessage)) {\n-                  long length = ((BytesMessage) msg).getBodyLength();\n-                  byte[] bytes = new byte[(int) length];\n-                  ((BytesMessage) msg).readBytes(bytes);\n-                  System.out.println(\"Message:\" + msg);\n+               if (verbose) {\n+                  if (bytesAsText && (msg instanceof BytesMessage)) {\n+                     long length = ((BytesMessage) msg).getBodyLength();\n+                     byte[] bytes = new byte[(int) length];\n+                     ((BytesMessage) msg).readBytes(bytes);\n+                     System.out.println(\"Received a message with \" + bytes.length);\n+                  }\n+\n+                  if (msg instanceof TextMessage) {\n+                     String text = ((TextMessage) msg).getText();\n+                     System.out.println(\"Received text sized at \" + text.length());\n+                  }\n+\n+                  if (msg instanceof ObjectMessage) {\n+                     Object obj = ((ObjectMessage) msg).getObject();\n+                     System.out.println(\"Received object \" + obj.toString().length());\n+                  }\n                }\n                received++;\n             } else {",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/dae1b7de1cf411994b550715c2fce143917df6f6/artemis-cli/src/main/java/org/apache/activemq/artemis/cli/commands/messages/ConsumerThread.java",
                "sha": "ab3640bd62e36a113c5f404f9101ee9c02560296",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/dae1b7de1cf411994b550715c2fce143917df6f6/artemis-cli/src/main/java/org/apache/activemq/artemis/cli/commands/messages/Producer.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-cli/src/main/java/org/apache/activemq/artemis/cli/commands/messages/Producer.java?ref=dae1b7de1cf411994b550715c2fce143917df6f6",
                "deletions": 1,
                "filename": "artemis-cli/src/main/java/org/apache/activemq/artemis/cli/commands/messages/Producer.java",
                "patch": "@@ -29,6 +29,8 @@\n @Command(name = \"producer\", description = \"It will send messages to an instance\")\n public class Producer extends DestAbstract {\n \n+   public static final String DEMO_TEXT = \"demo.txt\";\n+\n    @Option(name = \"--non-persistent\", description = \"It will send messages non persistently\")\n    boolean nonpersistent = false;\n \n@@ -38,6 +40,9 @@\n    @Option(name = \"--text-size\", description = \"Size of each textMessage (The producer will use text message on this case)\")\n    int textMessageSize;\n \n+   @Option(name = \"--object-size\", description = \"Size of each ObjectMessage (The producer will use object mesasge on this case)\")\n+   int objectSize;\n+\n    @Option(name = \"--msgttl\", description = \"TTL for each message\")\n    long msgTTL = 0L;\n \n@@ -63,7 +68,7 @@ public Object execute(ActionContext context) throws Exception {\n             threadsArray[i] = new ProducerThread(session, dest, i);\n \n             threadsArray[i].setVerbose(verbose).setSleep(sleep).setPersistent(!nonpersistent).\n-               setMessageSize(messageSize).setTextMessageSize(textMessageSize).\n+               setMessageSize(messageSize).setTextMessageSize(textMessageSize).setObjectSize(objectSize).\n                setMsgTTL(msgTTL).setMsgGroupID(msgGroupID).setTransactionBatchSize(txBatchSize).\n                setMessageCount(messageCount);\n          }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/dae1b7de1cf411994b550715c2fce143917df6f6/artemis-cli/src/main/java/org/apache/activemq/artemis/cli/commands/messages/Producer.java",
                "sha": "3cb5effb0462ab72551e6aed14f7a4c9fb7a354c",
                "status": "modified"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/dae1b7de1cf411994b550715c2fce143917df6f6/artemis-cli/src/main/java/org/apache/activemq/artemis/cli/commands/messages/ProducerThread.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-cli/src/main/java/org/apache/activemq/artemis/cli/commands/messages/ProducerThread.java?ref=dae1b7de1cf411994b550715c2fce143917df6f6",
                "deletions": 3,
                "filename": "artemis-cli/src/main/java/org/apache/activemq/artemis/cli/commands/messages/ProducerThread.java",
                "patch": "@@ -44,6 +44,7 @@\n    boolean persistent = true;\n    int messageSize = 0;\n    int textMessageSize;\n+   int objectSize;\n    long msgTTL = 0L;\n    String msgGroupID = null;\n    int transactionBatchSize;\n@@ -150,9 +151,23 @@ protected Message createMessage(int i, String threadName) throws Exception {\n          answer = session.createBytesMessage();\n          ((BytesMessage) answer).writeBytes(payload);\n       } else {\n-         if (textMessageSize > 0) {\n+         if (textMessageSize > 0 || objectSize > 0) {\n+\n+            if (objectSize > 0) {\n+               textMessageSize = objectSize;\n+            }\n             if (messageText == null) {\n-               messageText = readInputStream(getClass().getResourceAsStream(\"demo.txt\"), textMessageSize, i);\n+               String read = readInputStream(getClass().getResourceAsStream(Producer.DEMO_TEXT), textMessageSize, i);\n+               if (read.length() == textMessageSize) {\n+                  messageText = read;\n+               } else {\n+                  StringBuffer buffer = new StringBuffer(read);\n+                  while (buffer.length() < textMessageSize) {\n+                     buffer.append(read);\n+                  }\n+                  messageText = buffer.toString();\n+               }\n+\n             }\n          } else if (payloadUrl != null) {\n             messageText = readInputStream(new URL(payloadUrl).openStream(), -1, i);\n@@ -161,7 +176,12 @@ protected Message createMessage(int i, String threadName) throws Exception {\n          } else {\n             messageText = createDefaultMessage(i);\n          }\n-         answer = session.createTextMessage(messageText);\n+\n+         if (objectSize > 0) {\n+            answer = session.createObjectMessage(messageText);\n+         } else {\n+            answer = session.createTextMessage(messageText);\n+         }\n       }\n       if ((msgGroupID != null) && (!msgGroupID.isEmpty())) {\n          answer.setStringProperty(\"JMSXGroupID\", msgGroupID);\n@@ -341,4 +361,13 @@ public ProducerThread setVerbose(boolean verbose) {\n       this.verbose = verbose;\n       return this;\n    }\n+\n+   public int getObjectSize() {\n+      return objectSize;\n+   }\n+\n+   public ProducerThread setObjectSize(int objectSize) {\n+      this.objectSize = objectSize;\n+      return this;\n+   }\n }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/dae1b7de1cf411994b550715c2fce143917df6f6/artemis-cli/src/main/java/org/apache/activemq/artemis/cli/commands/messages/ProducerThread.java",
                "sha": "6e9fc5c4d64493fc4998e28c1ca83b3b4d0626e4",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/dae1b7de1cf411994b550715c2fce143917df6f6/artemis-cli/src/main/resources/org/apache/activemq/artemis/cli/commands/messages/demo.txt",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-cli/src/main/resources/org/apache/activemq/artemis/cli/commands/messages/demo.txt?ref=dae1b7de1cf411994b550715c2fce143917df6f6",
                "deletions": 0,
                "filename": "artemis-cli/src/main/resources/org/apache/activemq/artemis/cli/commands/messages/demo.txt",
                "previous_filename": "artemis-cli/src/main/resources/org/apache/activemq/artemis/cli/commands/util/demo.txt",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/dae1b7de1cf411994b550715c2fce143917df6f6/artemis-cli/src/main/resources/org/apache/activemq/artemis/cli/commands/messages/demo.txt",
                "sha": "4a6002ef1975e0a337fccb098f0188ea9d6157e7",
                "status": "renamed"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/dae1b7de1cf411994b550715c2fce143917df6f6/artemis-cli/src/test/java/org/apache/activemq/cli/test/ArtemisTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-cli/src/test/java/org/apache/activemq/cli/test/ArtemisTest.java?ref=dae1b7de1cf411994b550715c2fce143917df6f6",
                "deletions": 0,
                "filename": "artemis-cli/src/test/java/org/apache/activemq/cli/test/ArtemisTest.java",
                "patch": "@@ -583,6 +583,10 @@ public void testSimpleRun(String folderName) throws Exception {\n \n          assertEquals(Integer.valueOf(100), Artemis.internalExecute(\"producer\", \"--message-count\", \"100\", \"--user\", \"admin\", \"--password\", \"admin\"));\n          assertEquals(Integer.valueOf(100), Artemis.internalExecute(\"consumer\", \"--break-on-null\", \"--receive-timeout\", \"100\", \"--user\", \"admin\", \"--password\", \"admin\"));\n+         assertEquals(Integer.valueOf(10), Artemis.internalExecute(\"producer\", \"--text-size\", \"500\", \"--message-count\", \"10\", \"--user\", \"admin\", \"--password\", \"admin\"));\n+         assertEquals(Integer.valueOf(10), Artemis.internalExecute(\"consumer\", \"--break-on-null\", \"--receive-timeout\", \"100\", \"--user\", \"admin\", \"--password\", \"admin\"));\n+         assertEquals(Integer.valueOf(10), Artemis.internalExecute(\"producer\", \"--message-size\", \"500\", \"--message-count\", \"10\", \"--user\", \"admin\", \"--password\", \"admin\"));\n+         assertEquals(Integer.valueOf(10), Artemis.internalExecute(\"consumer\", \"--break-on-null\", \"--receive-timeout\", \"100\", \"--user\", \"admin\", \"--password\", \"admin\"));\n \n          ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(\"tcp://localhost:61616\");\n          Connection connection = cf.createConnection(\"admin\", \"admin\");",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/dae1b7de1cf411994b550715c2fce143917df6f6/artemis-cli/src/test/java/org/apache/activemq/cli/test/ArtemisTest.java",
                "sha": "526f7dff8561ffeabe96677073e1d7db1afefb33",
                "status": "modified"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/dae1b7de1cf411994b550715c2fce143917df6f6/artemis-cli/src/test/java/org/apache/activemq/cli/test/StreamClassPathTest.java",
                "changes": 69,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-cli/src/test/java/org/apache/activemq/cli/test/StreamClassPathTest.java?ref=dae1b7de1cf411994b550715c2fce143917df6f6",
                "deletions": 34,
                "filename": "artemis-cli/src/test/java/org/apache/activemq/cli/test/StreamClassPathTest.java",
                "patch": "@@ -20,6 +20,7 @@\n import java.io.InputStream;\n \n import org.apache.activemq.artemis.cli.commands.Create;\n+import org.apache.activemq.artemis.cli.commands.messages.Producer;\n import org.junit.Assert;\n import org.junit.Test;\n \n@@ -30,43 +31,43 @@\n     */\n    @Test\n    public void testFindStreams() throws Exception {\n-      openStream(Create.BIN_ARTEMIS_CMD);\n-      openStream(Create.BIN_ARTEMIS_SERVICE_EXE);\n-      openStream(Create.BIN_ARTEMIS_SERVICE_XML);\n-      openStream(\"etc/\" + Create.ETC_ARTEMIS_PROFILE_CMD);\n-      openStream(Create.BIN_ARTEMIS);\n-      openStream(Create.BIN_ARTEMIS_SERVICE);\n-      openStream(\"etc/\" + Create.ETC_ARTEMIS_PROFILE);\n-      openStream(\"etc/\" + Create.ETC_LOGGING_PROPERTIES);\n-      openStream(\"etc/\" + Create.ETC_BOOTSTRAP_XML);\n-      openStream(\"etc/\" + Create.ETC_MANAGEMENT_XML);\n-      openStream(\"etc/\" + Create.ETC_BROKER_XML);\n-      openStream(\"etc/\" + Create.ETC_ARTEMIS_ROLES_PROPERTIES);\n-      openStream(\"etc/\" + Create.ETC_ARTEMIS_USERS_PROPERTIES);\n-      openStream(Create.ETC_REPLICATED_SETTINGS_TXT);\n-      openStream(Create.ETC_REPLICATED_SETTINGS_TXT);\n-      openStream(Create.ETC_SHARED_STORE_SETTINGS_TXT);\n-      openStream(Create.ETC_CLUSTER_SECURITY_SETTINGS_TXT);\n-      openStream(Create.ETC_CLUSTER_SETTINGS_TXT);\n-      openStream(Create.ETC_CONNECTOR_SETTINGS_TXT);\n-      openStream(Create.ETC_BOOTSTRAP_WEB_SETTINGS_TXT);\n-      openStream(Create.ETC_JOURNAL_BUFFER_SETTINGS);\n-      openStream(Create.ETC_AMQP_ACCEPTOR_TXT);\n-      openStream(Create.ETC_MQTT_ACCEPTOR_TXT);\n-      openStream(Create.ETC_HORNETQ_ACCEPTOR_TXT);\n-      openStream(Create.ETC_STOMP_ACCEPTOR_TXT);\n-      openStream(Create.ETC_PING_TXT);\n-      openStream(Create.ETC_COMMENTED_PING_TXT);\n-      openStream(Create.ETC_GLOBAL_MAX_SPECIFIED_TXT);\n-      openStream(Create.ETC_GLOBAL_MAX_DEFAULT_TXT);\n-      openStream(\"etc/\" + Create.ETC_JOLOKIA_ACCESS_XML);\n-      openStream(Create.ETC_DATABASE_STORE_TXT);\n+      testStream(Create.class, Create.BIN_ARTEMIS_CMD);\n+      testStream(Create.class, Create.BIN_ARTEMIS_SERVICE_EXE);\n+      testStream(Create.class, Create.BIN_ARTEMIS_SERVICE_XML);\n+      testStream(Create.class, \"etc/\" + Create.ETC_ARTEMIS_PROFILE_CMD);\n+      testStream(Create.class, Create.BIN_ARTEMIS);\n+      testStream(Create.class, Create.BIN_ARTEMIS_SERVICE);\n+      testStream(Create.class, \"etc/\" + Create.ETC_ARTEMIS_PROFILE);\n+      testStream(Create.class, \"etc/\" + Create.ETC_LOGGING_PROPERTIES);\n+      testStream(Create.class, \"etc/\" + Create.ETC_BOOTSTRAP_XML);\n+      testStream(Create.class, \"etc/\" + Create.ETC_MANAGEMENT_XML);\n+      testStream(Create.class, \"etc/\" + Create.ETC_BROKER_XML);\n+      testStream(Create.class, \"etc/\" + Create.ETC_ARTEMIS_ROLES_PROPERTIES);\n+      testStream(Create.class, \"etc/\" + Create.ETC_ARTEMIS_USERS_PROPERTIES);\n+      testStream(Create.class, Create.ETC_REPLICATED_SETTINGS_TXT);\n+      testStream(Create.class, Create.ETC_REPLICATED_SETTINGS_TXT);\n+      testStream(Create.class, Create.ETC_SHARED_STORE_SETTINGS_TXT);\n+      testStream(Create.class, Create.ETC_CLUSTER_SECURITY_SETTINGS_TXT);\n+      testStream(Create.class, Create.ETC_CLUSTER_SETTINGS_TXT);\n+      testStream(Create.class, Create.ETC_CONNECTOR_SETTINGS_TXT);\n+      testStream(Create.class, Create.ETC_BOOTSTRAP_WEB_SETTINGS_TXT);\n+      testStream(Create.class, Create.ETC_JOURNAL_BUFFER_SETTINGS);\n+      testStream(Create.class, Create.ETC_AMQP_ACCEPTOR_TXT);\n+      testStream(Create.class, Create.ETC_MQTT_ACCEPTOR_TXT);\n+      testStream(Create.class, Create.ETC_HORNETQ_ACCEPTOR_TXT);\n+      testStream(Create.class, Create.ETC_STOMP_ACCEPTOR_TXT);\n+      testStream(Create.class, Create.ETC_PING_TXT);\n+      testStream(Create.class, Create.ETC_COMMENTED_PING_TXT);\n+      testStream(Create.class, Create.ETC_GLOBAL_MAX_SPECIFIED_TXT);\n+      testStream(Create.class, Create.ETC_GLOBAL_MAX_DEFAULT_TXT);\n+      testStream(Create.class, \"etc/\" + Create.ETC_JOLOKIA_ACCESS_XML);\n+      testStream(Create.class, Create.ETC_DATABASE_STORE_TXT);\n+      testStream(Producer.class, Producer.DEMO_TEXT);\n \n    }\n \n-   private void openStream(String source) throws Exception {\n-      Create create = new Create();\n-      InputStream in = create.openStream(source);\n+   private void testStream(Class clazz, String source) throws Exception {\n+      InputStream in = clazz.getResourceAsStream(source);\n       Assert.assertNotNull(source + \" not found\", in);\n       in.close();\n    }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/dae1b7de1cf411994b550715c2fce143917df6f6/artemis-cli/src/test/java/org/apache/activemq/cli/test/StreamClassPathTest.java",
                "sha": "c348476951b97f1ed077b1f750840dab1c915057",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-1785 Producer CLI would throw NPEs if using Text Messages",
        "parent": "https://github.com/apache/activemq-artemis/commit/0bd99dfff7c297953f03fa9b06f27305fc1a1341",
        "patched_files": [
            "Artemis.java",
            "ConsumerThread.java",
            "Producer.java",
            "ProducerThread.java",
            "demo.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "StreamClassPathTest.java",
            "ArtemisTest.java",
            "ProducerTest.java"
        ]
    },
    "activemq-artemis_de0747a": {
        "bug_id": "activemq-artemis_de0747a",
        "commit": "https://github.com/apache/activemq-artemis/commit/de0747a9a40f44c309287a54f324cc9a21f31b93",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/de0747a9a40f44c309287a54f324cc9a21f31b93/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/broker/AMQPConnectionCallback.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/broker/AMQPConnectionCallback.java?ref=de0747a9a40f44c309287a54f324cc9a21f31b93",
                "deletions": 1,
                "filename": "artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/broker/AMQPConnectionCallback.java",
                "patch": "@@ -291,7 +291,9 @@ public URI getFailoverList() {\n       ClusterConnection clusterConnection = clusterManager.getDefaultConnection(null);\n       if (clusterConnection != null) {\n          TopologyMemberImpl member = clusterConnection.getTopology().getMember(server.getNodeID().toString());\n-         return member.toBackupURI();\n+         if (member != null) {\n+            return member.toBackupURI();\n+         }\n       }\n       return null;\n    }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/de0747a9a40f44c309287a54f324cc9a21f31b93/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/broker/AMQPConnectionCallback.java",
                "sha": "84fdd24aa67f1f90b6913580aca062e31e6e0255",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/de0747a9a40f44c309287a54f324cc9a21f31b93/artemis-server/src/main/java/org/apache/activemq/artemis/core/postoffice/impl/BindingsImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/postoffice/impl/BindingsImpl.java?ref=de0747a9a40f44c309287a54f324cc9a21f31b93",
                "deletions": 1,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/postoffice/impl/BindingsImpl.java",
                "patch": "@@ -258,7 +258,7 @@ private void route(final Message message,\n                if (entry.getValue() instanceof RemoteQueueBinding) {\n                   RemoteQueueBinding remoteQueueBinding = (RemoteQueueBinding) entry.getValue();\n                   if (remoteQueueBinding.getRemoteQueueID() == id) {\n-                     message.putBytesProperty(Message.HDR_ROUTE_TO_IDS, ByteBuffer.allocate(8).putLong(remoteQueueBinding.getID()).array());\n+                     message.putExtraBytesProperty(Message.HDR_ROUTE_TO_IDS, ByteBuffer.allocate(8).putLong(remoteQueueBinding.getID()).array());\n                   }\n                }\n             }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/de0747a9a40f44c309287a54f324cc9a21f31b93/artemis-server/src/main/java/org/apache/activemq/artemis/core/postoffice/impl/BindingsImpl.java",
                "sha": "c669ebace1c96573618dea3394fa1d419ca26665",
                "status": "modified"
            },
            {
                "additions": 85,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/de0747a9a40f44c309287a54f324cc9a21f31b93/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/cluster/crossprotocol/ProtocolsMessageLoadBalancingTest.java",
                "changes": 85,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/cluster/crossprotocol/ProtocolsMessageLoadBalancingTest.java?ref=de0747a9a40f44c309287a54f324cc9a21f31b93",
                "deletions": 0,
                "filename": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/cluster/crossprotocol/ProtocolsMessageLoadBalancingTest.java",
                "patch": "@@ -26,6 +26,7 @@\n import java.util.Arrays;\n import java.util.Collection;\n \n+import org.apache.activemq.artemis.api.core.ActiveMQException;\n import org.apache.activemq.artemis.api.core.RoutingType;\n import org.apache.activemq.artemis.api.core.SimpleString;\n import org.apache.activemq.artemis.core.config.impl.ConfigurationImpl;\n@@ -37,7 +38,9 @@\n import org.apache.activemq.artemis.core.server.cluster.impl.MessageLoadBalancingType;\n import org.apache.activemq.artemis.core.settings.impl.AddressSettings;\n import org.apache.activemq.artemis.jms.client.ActiveMQConnectionFactory;\n+import org.apache.activemq.artemis.junit.Wait;\n import org.apache.activemq.artemis.protocol.amqp.broker.ProtonProtocolManagerFactory;\n+import org.apache.activemq.artemis.spi.core.protocol.RemotingConnection;\n import org.apache.activemq.artemis.tests.integration.cluster.distribution.ClusterTestBase;\n import org.apache.qpid.jms.JmsConnectionFactory;\n import org.junit.Assert;\n@@ -282,6 +285,88 @@ public void testExpireRedistributed() throws Exception {\n       connection.close();\n    }\n \n+   @Test\n+   public void testRestartConnection() throws Exception {\n+\n+      startServers(MessageLoadBalancingType.STRICT);\n+\n+      System.out.println(\"connections \" + servers[1].getRemotingService().getConnections().size());\n+\n+      Wait.assertEquals(3, () -> servers[1].getRemotingService().getConnections().size());\n+      Wait.assertEquals(3, () -> servers[0].getRemotingService().getConnections().size());\n+\n+      RemotingConnection[] connectionsServer1 = servers[1].getRemotingService().getConnections().toArray(new RemotingConnection[3]);\n+      RemotingConnection[] connectionsServer0 = servers[0].getRemotingService().getConnections().toArray(new RemotingConnection[3]);\n+\n+      ConnectionFactory[] factory = new ConnectionFactory[NUMBER_OF_SERVERS];\n+      Connection[] connection = new Connection[NUMBER_OF_SERVERS];\n+      Session[] session = new Session[NUMBER_OF_SERVERS];\n+      MessageConsumer[] consumer = new MessageConsumer[NUMBER_OF_SERVERS];\n+\n+      // this will pre create consumers to make sure messages are distributed evenly without redistribution\n+      for (int node = 0; node < NUMBER_OF_SERVERS; node++) {\n+         factory[node] = getJmsConnectionFactory(node);\n+         connection[node] = factory[node].createConnection();\n+         session[node] = connection[node].createSession(false, Session.AUTO_ACKNOWLEDGE);\n+         consumer[node] = session[node].createConsumer(session[node].createQueue(queueName.toString()));\n+      }\n+\n+      waitForBindings(0, \"queues.0\", 1, 1, true);\n+      waitForBindings(1, \"queues.0\", 1, 1, true);\n+\n+      waitForBindings(0, \"queues.0\", 1, 1, false);\n+      waitForBindings(1, \"queues.0\", 1, 1, false);\n+\n+      for (RemotingConnection remotingConnection : servers[1].getRemotingService().getConnections()) {\n+         remotingConnection.fail(new ActiveMQException(\"forcing failure\"));\n+      }\n+      for (RemotingConnection remotingConnection : servers[1].getRemotingService().getConnections()) {\n+         remotingConnection.fail(new ActiveMQException(\"forcing failure\"));\n+      }\n+\n+      // this is to allow reconnects\n+      Thread.sleep(500);\n+\n+      // this will pre create consumers to make sure messages are distributed evenly without redistribution\n+      for (int node = 0; node < NUMBER_OF_SERVERS; node++) {\n+         try {\n+            connection[node].close();\n+         } catch (Throwable e) {\n+            e.printStackTrace();\n+         }\n+         factory[node] = getJmsConnectionFactory(node);\n+         connection[node] = factory[node].createConnection();\n+         session[node] = connection[node].createSession(false, Session.AUTO_ACKNOWLEDGE);\n+         consumer[node] = session[node].createConsumer(session[node].createQueue(queueName.toString()));\n+      }\n+\n+      waitForBindings(0, \"queues.0\", 1, 1, true);\n+      waitForBindings(1, \"queues.0\", 1, 1, true);\n+\n+      waitForBindings(0, \"queues.0\", 1, 1, false);\n+      waitForBindings(1, \"queues.0\", 1, 1, false);\n+\n+      System.out.println(\"connections \" + servers[1].getRemotingService().getConnections().size());\n+\n+      // sending Messages.. they should be load balanced\n+      {\n+         ConnectionFactory cf = getJmsConnectionFactory(0);\n+         Connection cn = cf.createConnection();\n+         Session sn = cn.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+         MessageProducer pd = sn.createProducer(sn.createQueue(queueName.toString()));\n+\n+         for (int i = 0; i < NUMBER_OF_MESSAGES; i++) {\n+            pd.send(sn.createTextMessage(\"hello \" + i));\n+         }\n+\n+         cn.close();\n+      }\n+\n+      receiveMessages(connection[0], consumer[0], NUMBER_OF_MESSAGES / 2, true);\n+      receiveMessages(connection[1], consumer[1], NUMBER_OF_MESSAGES / 2, true);\n+\n+   }\n+\n    private void receiveMessages(Connection connection,\n                                 MessageConsumer messageConsumer,\n                                 int messageCount,",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/de0747a9a40f44c309287a54f324cc9a21f31b93/tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/cluster/crossprotocol/ProtocolsMessageLoadBalancingTest.java",
                "sha": "8ed685cf36296052007f5fa6953c8fe793ef2de9",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-1920 AMQP throw NPE if can't find a backup server",
        "parent": "https://github.com/apache/activemq-artemis/commit/22f3f02aea077934a9c2b4569d37dd0c03ed8b72",
        "patched_files": [
            "AMQPConnectionCallback.java",
            "BindingsImpl.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "AMQPConnectionCallbackTest.java",
            "BindingsImplTest.java",
            "ProtocolsMessageLoadBalancingTest.java"
        ]
    },
    "activemq-artemis_e2d6d07": {
        "bug_id": "activemq-artemis_e2d6d07",
        "commit": "https://github.com/apache/activemq-artemis/commit/e2d6d0729818ea9ba8b1bcd5781d2702502dd9b1",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/e2d6d0729818ea9ba8b1bcd5781d2702502dd9b1/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/FileLockNodeManager.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/FileLockNodeManager.java?ref=e2d6d0729818ea9ba8b1bcd5781d2702502dd9b1",
                "deletions": 6,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/FileLockNodeManager.java",
                "patch": "@@ -106,12 +106,14 @@ protected synchronized void setUpServerLockFile() throws IOException {\n    @Override\n    public synchronized void stop() throws Exception {\n       for (FileChannel channel : lockChannels) {\n-         try {\n-            channel.close();\n-         } catch (Throwable e) {\n-            // I do not want to interrupt a shutdown. If anything is wrong here, just log it\n-            // it could be a critical error or something like that throwing the system down\n-            logger.warn(e.getMessage(), e);\n+         if (channel != null && channel.isOpen()) {\n+            try {\n+               channel.close();\n+            } catch (Throwable e) {\n+               // I do not want to interrupt a shutdown. If anything is wrong here, just log it\n+               // it could be a critical error or something like that throwing the system down\n+               logger.warn(e.getMessage(), e);\n+            }\n          }\n       }\n ",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/e2d6d0729818ea9ba8b1bcd5781d2702502dd9b1/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/FileLockNodeManager.java",
                "sha": "66ebbdc63955809b7f9b6fc060c36a75e1565849",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-2441 Avoiding NPE on FileLockNodeManager",
        "parent": "https://github.com/apache/activemq-artemis/commit/7fa4d5fa70a74b0455d491f45bbd45e04ff79606",
        "patched_files": [
            "FileLockNodeManager.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "FileLockNodeManagerTest.java"
        ]
    },
    "activemq-artemis_f09ee40": {
        "bug_id": "activemq-artemis_f09ee40",
        "commit": "https://github.com/apache/activemq-artemis/commit/f09ee40b538ec739b745cb9678131cf706fb1f08",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/f09ee40b538ec739b745cb9678131cf706fb1f08/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/message/impl/CoreMessage.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/message/impl/CoreMessage.java?ref=f09ee40b538ec739b745cb9678131cf706fb1f08",
                "deletions": 1,
                "filename": "artemis-core-client/src/main/java/org/apache/activemq/artemis/core/message/impl/CoreMessage.java",
                "patch": "@@ -437,7 +437,11 @@ public CoreMessage setMessageID(long messageID) {\n \n    @Override\n    public CoreMessage setAddress(SimpleString address) {\n-      if (validBuffer && !address.equals(this.address)) {\n+      if (address == null && this.address == null) {\n+         // no-op so just return\n+         return this;\n+      }\n+      if (validBuffer && (address == null || !address.equals(this.address))) {\n          messageChanged();\n       }\n       this.address = address;",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/f09ee40b538ec739b745cb9678131cf706fb1f08/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/message/impl/CoreMessage.java",
                "sha": "0fb7c3e6691fae54c26c21515d9e95d4ef041308",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE when setting null address",
        "parent": "https://github.com/apache/activemq-artemis/commit/9c40a514f26c28b591516fa89f761740f1bc29dd",
        "patched_files": [
            "CoreMessage.java"
        ],
        "repo": "activemq-artemis",
        "unit_tests": [
            "CoreMessageTest.java"
        ]
    }
}