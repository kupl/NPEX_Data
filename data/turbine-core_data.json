[{"commit": "https://github.com/apache/turbine-core/commit/1b8d16fbbf5b32c8c5773fd29b2f8b3c31ebad87", "parent": "https://github.com/apache/turbine-core/commit/153cece7e73ea683bfa35062c83f4f0c9c3775da", "message": "Fix NPE in LogoutAction: draw user from session instead of RunData. Add test.\n\ngit-svn-id: https://svn.apache.org/repos/asf/turbine/core/trunk@1754670 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "turbine-core_1", "file": [{"additions": 3, "raw_url": "https://github.com/apache/turbine-core/raw/1b8d16fbbf5b32c8c5773fd29b2f8b3c31ebad87/src/changes/changes.xml", "blob_url": "https://github.com/apache/turbine-core/blob/1b8d16fbbf5b32c8c5773fd29b2f8b3c31ebad87/src/changes/changes.xml", "sha": "91d86b6dec2c2cd428fa8093cb60f69720e07703", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/turbine-core/contents/src/changes/changes.xml?ref=1b8d16fbbf5b32c8c5773fd29b2f8b3c31ebad87", "patch": "@@ -25,6 +25,9 @@\n \n   <body>\n     <release version=\"4.0\" date=\"in Subversion\">\n+      <action type=\"fix\" dev=\"tv\">\n+        Fix NPE in LogoutAction: draw user from session instead of RunData. Add test.\n+      </action>\n       <action type=\"update\" dev=\"tv\">\n         Update BrowserDetector to support contemporary browsers.\n       </action>", "filename": "src/changes/changes.xml"}, {"additions": 4, "raw_url": "https://github.com/apache/turbine-core/raw/1b8d16fbbf5b32c8c5773fd29b2f8b3c31ebad87/src/java/org/apache/turbine/modules/actions/LogoutUser.java", "blob_url": "https://github.com/apache/turbine-core/blob/1b8d16fbbf5b32c8c5773fd29b2f8b3c31ebad87/src/java/org/apache/turbine/modules/actions/LogoutUser.java", "sha": "d564cc43a5b312dd5bf05858378ce6f565ca5d96", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/turbine-core/contents/src/java/org/apache/turbine/modules/actions/LogoutUser.java?ref=1b8d16fbbf5b32c8c5773fd29b2f8b3c31ebad87", "patch": "@@ -63,7 +63,7 @@\n      * If this action name is the value of action.logout then we are\n      * being run before the session validator, so we don't need to\n      * set the screen (we assume that the session validator will handle\n-     * that). This is basically still here simply to preserve old behaviour\n+     * that). This is basically still here simply to preserve old behavior\n      * - it is recommended that action.logout is set to \"LogoutUser\" and\n      * that the session validator does handle setting the screen/template\n      * for a logged out (read not-logged-in) user.\n@@ -77,7 +77,9 @@ public void doPerform(PipelineData pipelineData)\n             throws FulcrumSecurityException\n     {\n         RunData data = getRunData(pipelineData);\n-        User user = data.getUser();\n+\n+        // Session validator did not run, so RunData is not populated\n+        User user = data.getUserFromSession();\n \n         if (!security.isAnonymousUser(user))\n         {", "filename": "src/java/org/apache/turbine/modules/actions/LogoutUser.java"}, {"additions": 37, "raw_url": "https://github.com/apache/turbine-core/raw/1b8d16fbbf5b32c8c5773fd29b2f8b3c31ebad87/src/test/org/apache/turbine/pipeline/DefaultLoginValveTest.java", "blob_url": "https://github.com/apache/turbine-core/blob/1b8d16fbbf5b32c8c5773fd29b2f8b3c31ebad87/src/test/org/apache/turbine/pipeline/DefaultLoginValveTest.java", "sha": "9606f79d81247b647b7096405157ce483c00dc97", "changes": 43, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/turbine-core/contents/src/test/org/apache/turbine/pipeline/DefaultLoginValveTest.java?ref=1b8d16fbbf5b32c8c5773fd29b2f8b3c31ebad87", "patch": "@@ -22,6 +22,7 @@\n \n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n@@ -61,6 +62,7 @@\n     private EnhancedMockHttpServletRequest request = null;\n     private EnhancedMockHttpSession session = null;\n     private HttpServletResponse response = null;\n+    private SecurityService securityService = null;\n \n \n     @BeforeClass\n@@ -89,22 +91,25 @@ public void setUpBefore() throws Exception {\n         session = new EnhancedMockHttpSession();\n         response = new MockHttpServletResponse();\n \n-        session.setupGetAttribute(User.SESSION_KEY, null);\n-\n         request.setSession(session);\n \n         // User must exist\n-        SecurityService securityService = (SecurityService)TurbineServices.getInstance().getService(SecurityService.SERVICE_NAME);\n-        User user = securityService.getUserInstance();\n-        user.setName(\"username\");\n-        securityService.addUser(user, \"password\");\n+        securityService = (SecurityService)TurbineServices.getInstance().getService(SecurityService.SERVICE_NAME);\n+        if (!securityService.accountExists(\"username\"))\n+        {\n+            User user = securityService.getUserInstance();\n+            user.setName(\"username\");\n+            securityService.addUser(user, \"password\");\n+        }\n     }\n \n     /**\n      * Tests the Valve.\n      */\n     @Test public void testDefaults() throws Exception\n     {\n+        session.setupGetAttribute(User.SESSION_KEY, null);\n+\n         Vector<String> v = new Vector<String>();\n         v.add(LoginUser.CGI_USERNAME);\n         v.add(LoginUser.CGI_PASSWORD);\n@@ -130,6 +135,32 @@ public void setUpBefore() throws Exception {\n         assertTrue(user.hasLoggedIn());\n     }\n \n+    /**\n+     * Tests the LogoutAction.\n+     */\n+    @Test public void testLogout() throws Exception\n+    {\n+        User user = securityService.getUser(\"username\");\n+        user.setHasLoggedIn(Boolean.TRUE);\n+        session.setupGetAttribute(User.SESSION_KEY, user);\n+\n+        RunData runData = getRunData(request,response,config);\n+        runData.setAction(TurbineConstants.ACTION_LOGOUT_DEFAULT);\n+\n+        Pipeline pipeline = new TurbinePipeline();\n+        PipelineData pipelineData = runData;\n+\n+        DefaultLoginValve valve = new DefaultLoginValve();\n+        pipeline.addValve(valve);\n+        pipeline.initialize();\n+\n+        pipeline.invoke(pipelineData);\n+        user = runData.getUser();\n+        assertNotNull(user);\n+        assertTrue(securityService.isAnonymousUser(user));\n+        assertFalse(user.hasLoggedIn());\n+    }\n+\n     @AfterClass\n     public static void destroy() {\n         tc.dispose();", "filename": "src/test/org/apache/turbine/pipeline/DefaultLoginValveTest.java"}], "repo": "turbine-core"}, {"commit": "https://github.com/apache/turbine-core/commit/97b2cbd648282967f37cf8fbfc00e50790e1c6ac", "parent": "https://github.com/apache/turbine-core/commit/82c7bea68ee3aa4fc3dd004fa663a8a9eacd5178", "message": "Fix possible NPE in TurbinePullService.\n\ngit-svn-id: https://svn.apache.org/repos/asf/turbine/core/trunk@1163317 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "turbine-core_2", "file": [{"additions": 3, "raw_url": "https://github.com/apache/turbine-core/raw/97b2cbd648282967f37cf8fbfc00e50790e1c6ac/src/changes/changes.xml", "blob_url": "https://github.com/apache/turbine-core/blob/97b2cbd648282967f37cf8fbfc00e50790e1c6ac/src/changes/changes.xml", "sha": "24967af5abb5bae1d5268a6e457a394f5e18bbe6", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/turbine-core/contents/src/changes/changes.xml?ref=97b2cbd648282967f37cf8fbfc00e50790e1c6ac", "patch": "@@ -25,6 +25,9 @@\n \n   <body>\n     <release version=\"4.0-M2\" date=\"in Subversion\">\n+      <action type=\"fix\" dev=\"tv\">\n+        Fix possible NPE in TurbinePullService.\n+      </action>\n       <action type=\"fix\" dev=\"tv\" issue=\"TRB-82\">\n         Use lastIndexOf() to get the template extension in TurbineTemplateService.\n       </action>", "filename": "src/changes/changes.xml"}, {"additions": 8, "raw_url": "https://github.com/apache/turbine-core/raw/97b2cbd648282967f37cf8fbfc00e50790e1c6ac/src/java/org/apache/turbine/services/pull/TurbinePullService.java", "blob_url": "https://github.com/apache/turbine-core/blob/97b2cbd648282967f37cf8fbfc00e50790e1c6ac/src/java/org/apache/turbine/services/pull/TurbinePullService.java", "sha": "5bc8a880d42ed42c232fa04c95acade3e33743b8", "changes": 18, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/turbine-core/contents/src/java/org/apache/turbine/services/pull/TurbinePullService.java?ref=97b2cbd648282967f37cf8fbfc00e50790e1c6ac", "patch": "@@ -557,7 +557,6 @@ private void populateWithRequestTools(Context context, PipelineData pipelineData\n      * @param user The <code>User</code> object whose storage to\n      * retrieve the tool from.\n      */\n-    @SuppressWarnings({ \"null\" })\n     private void populateWithSessionTools(List<ToolData> tools, Context context,\n             PipelineData pipelineData, User user)\n     {\n@@ -588,16 +587,16 @@ private void populateWithSessionTools(List<ToolData> tools, Context context,\n \n                         // session tools are init'd with the User object\n                         initTool(tool, user);\n+                    }\n \n+                    // *NOT* else\n+                    if(tool != null)\n+                    {\n                         // store the newly created tool in the session\n                         runData.getSession().setAttribute(\n                                 SESSION_TOOLS_ATTRIBUTE_PREFIX\n                                 + tool.getClass().getName(), tool);\n-                    }\n \n-                    // *NOT* else\n-                    if(tool != null)\n-                    {\n                         // This is a semantics change. In the old\n                         // Turbine, Session tools were initialized and\n                         // then refreshed every time they were pulled\n@@ -647,7 +646,6 @@ private void populateWithSessionTools(List<ToolData> tools, Context context,\n      * @param user The <code>User</code> object whose storage to\n      * retrieve the tool from.\n      */\n-    @SuppressWarnings({ \"null\" })\n     private void populateWithSessionTools(List<ToolData> tools, Context context,\n             RunData data, User user)\n     {\n@@ -675,16 +673,16 @@ private void populateWithSessionTools(List<ToolData> tools, Context context,\n \n                         // session tools are init'd with the User object\n                         initTool(tool, user);\n+                    }\n \n+                    // *NOT* else\n+                    if(tool != null)\n+                    {\n                         // store the newly created tool in the session\n                         data.getSession().setAttribute(\n                                 SESSION_TOOLS_ATTRIBUTE_PREFIX\n                                 + tool.getClass().getName(), tool);\n-                    }\n \n-                    // *NOT* else\n-                    if(tool != null)\n-                    {\n                         // This is a semantics change. In the old\n                         // Turbine, Session tools were initialized and\n                         // then refreshed every time they were pulled", "filename": "src/java/org/apache/turbine/services/pull/TurbinePullService.java"}], "repo": "turbine-core"}, {"commit": "https://github.com/apache/turbine-core/commit/60ba02ecb0c2b1b10372870a24c1ca019ca4a704", "parent": "https://github.com/apache/turbine-core/commit/49d700942b7fc616984255c9e4090d5f5223e10b", "message": "Fix a NPE when the session has expired.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/turbine/core/trunk@221676 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "turbine-core_3", "file": [{"additions": 2, "raw_url": "https://github.com/apache/turbine-core/raw/60ba02ecb0c2b1b10372870a24c1ca019ca4a704/src/java/org/apache/turbine/modules/actions/sessionvalidator/TemplateSecureSessionValidator.java", "blob_url": "https://github.com/apache/turbine-core/blob/60ba02ecb0c2b1b10372870a24c1ca019ca4a704/src/java/org/apache/turbine/modules/actions/sessionvalidator/TemplateSecureSessionValidator.java", "sha": "befb9c089f1f7b7885ac9111b9b38af831c001c9", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/turbine-core/contents/src/java/org/apache/turbine/modules/actions/sessionvalidator/TemplateSecureSessionValidator.java?ref=60ba02ecb0c2b1b10372870a24c1ca019ca4a704", "patch": "@@ -177,7 +177,8 @@ public void doPerform(RunData data)\n         // browsers back button and submitting stale data.\n         // FIXME!! a template needs to be written to use this with templates.\n \n-        if (data.getParameters().containsKey(\"_session_access_counter\"))\n+        if (data.getParameters().containsKey(\"_session_access_counter\")\n+                && !TurbineSecurity.isAnonymousUser(data.getUser()))\n         {\n             // See comments in screens.error.InvalidState.\n             if (data.getParameters().getInt(\"_session_access_counter\") ", "filename": "src/java/org/apache/turbine/modules/actions/sessionvalidator/TemplateSecureSessionValidator.java"}, {"additions": 2, "raw_url": "https://github.com/apache/turbine-core/raw/60ba02ecb0c2b1b10372870a24c1ca019ca4a704/src/java/org/apache/turbine/modules/actions/sessionvalidator/TemplateSessionValidator.java", "blob_url": "https://github.com/apache/turbine-core/blob/60ba02ecb0c2b1b10372870a24c1ca019ca4a704/src/java/org/apache/turbine/modules/actions/sessionvalidator/TemplateSessionValidator.java", "sha": "3021c374a118f9280d5780fc67f23989e663aeed", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/turbine-core/contents/src/java/org/apache/turbine/modules/actions/sessionvalidator/TemplateSessionValidator.java?ref=60ba02ecb0c2b1b10372870a24c1ca019ca4a704", "patch": "@@ -136,7 +136,8 @@ public void doPerform(RunData data)\n         // the session_access_counter can be placed as a hidden field in\n         // forms.  This can be used to prevent a user from using the\n         // browsers back button and submitting stale data.\n-        else if (data.getParameters().containsKey(\"_session_access_counter\"))\n+        else if (data.getParameters().containsKey(\"_session_access_counter\")\n+                && !TurbineSecurity.isAnonymousUser(data.getUser()))\n         {\n             // See comments in screens.error.InvalidState.\n             if (data.getParameters().getInt(\"_session_access_counter\") ", "filename": "src/java/org/apache/turbine/modules/actions/sessionvalidator/TemplateSessionValidator.java"}], "repo": "turbine-core"}, {"commit": "https://github.com/apache/turbine-core/commit/23d175ccdd42dce3cb31469414c48c2b39e76b92", "parent": "https://github.com/apache/turbine-core/commit/79fd45484baf06b4e48945b47a718c0d2a611a92", "message": "BrowserDetector was throwing an NPE for recent versions of Opera.\r\nAdded a test case.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/turbine/core/trunk@350121 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "turbine-core_4", "file": [{"additions": 6, "raw_url": "https://github.com/apache/turbine-core/raw/23d175ccdd42dce3cb31469414c48c2b39e76b92/src/java/org/apache/turbine/util/BrowserDetector.java", "blob_url": "https://github.com/apache/turbine-core/blob/23d175ccdd42dce3cb31469414c48c2b39e76b92/src/java/org/apache/turbine/util/BrowserDetector.java", "sha": "e189d5987ca23613c7aa4f552f9321390fbf5148", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/turbine-core/contents/src/java/org/apache/turbine/util/BrowserDetector.java?ref=23d175ccdd42dce3cb31469414c48c2b39e76b92", "patch": "@@ -232,10 +232,15 @@ private void parse()\n         // Modificaton by Chris Mospaw <mospaw@polk-county.com>\n         if (userAgentString.indexOf(OPERA) != -1)\n         {\n-            //Ex: Mozilla/4.0 (Windows NT 4.0;US) Opera 3.61  [en]\n+            // Ex: Mozilla/4.0 (Windows NT 4.0;US) Opera 3.61  [en]\n+            // Ex: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; en) Opera 8.02\n             versionStartIndex = (userAgentString.indexOf(OPERA) \n                     + OPERA.length() + 1);\n             versionEndIndex = userAgentString.indexOf(\" \", versionStartIndex);\n+            if (versionEndIndex == -1)\n+            {\n+                versionEndIndex = userAgentString.length();\n+            }\n \n             browserName = OPERA;\n             try", "filename": "src/java/org/apache/turbine/util/BrowserDetector.java"}, {"additions": 73, "raw_url": "https://github.com/apache/turbine-core/raw/23d175ccdd42dce3cb31469414c48c2b39e76b92/src/test/org/apache/turbine/util/BrowserDetectorTest.java", "blob_url": "https://github.com/apache/turbine-core/blob/23d175ccdd42dce3cb31469414c48c2b39e76b92/src/test/org/apache/turbine/util/BrowserDetectorTest.java", "sha": "dac371dfa5a8ae531eb318cb4a9304cdefeba305", "changes": 73, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/turbine-core/contents/src/test/org/apache/turbine/util/BrowserDetectorTest.java?ref=23d175ccdd42dce3cb31469414c48c2b39e76b92", "patch": "@@ -0,0 +1,73 @@\n+package org.apache.turbine.util;\n+\n+/*\n+ * Copyright 2005 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\")\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import org.apache.turbine.test.BaseTestCase;\n+\n+/**\n+ * Testing of the BrowserDetector class.\n+ *\n+ * @author <a href=\"mailto:seade@backstagetech.com.au\">Scott Eade</a>\n+ * @version $Id$\n+ */\n+public class BrowserDetectorTest extends BaseTestCase\n+{\n+    public BrowserDetectorTest(String name) throws Exception\n+    {\n+        super(name);\n+    }\n+\n+    public void testFirefox()\n+    {\n+        String userAgent = \"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8) Gecko/20051111 Firefox/1.5\";\n+        BrowserDetector bd = new BrowserDetector(userAgent);\n+        assertEquals(BrowserDetector.MOZILLA, bd.getBrowserName());\n+        // Should this really be 5?\n+        assertEquals(5f, bd.getBrowserVersion(), 0.0f);\n+        assertEquals(BrowserDetector.WINDOWS, bd.getBrowserPlatform());\n+    }\n+\n+    public void testOpera()\n+    {\n+        String userAgent = \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; en) Opera 8.02\";\n+        BrowserDetector bd = new BrowserDetector(userAgent);\n+        assertEquals(BrowserDetector.OPERA, bd.getBrowserName());\n+        assertEquals(8.02f, bd.getBrowserVersion(), 0.0f);\n+        assertEquals(BrowserDetector.WINDOWS, bd.getBrowserPlatform());\n+\n+        userAgent = \"Opera/7.51 (Windows NT 5.1; U) [en]\";\n+        bd = new BrowserDetector(userAgent);\n+        assertEquals(BrowserDetector.OPERA, bd.getBrowserName());\n+        assertEquals(7.51f, bd.getBrowserVersion(), 0.0f);\n+        assertEquals(BrowserDetector.WINDOWS, bd.getBrowserPlatform());\n+    }\n+\n+    public void testIE()\n+    {\n+        String userAgent = \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\";\n+        BrowserDetector bd = new BrowserDetector(userAgent);\n+        assertEquals(BrowserDetector.MSIE, bd.getBrowserName());\n+        assertEquals(6.0f, bd.getBrowserVersion(), 0.0f);\n+        assertEquals(BrowserDetector.WINDOWS, bd.getBrowserPlatform());\n+\n+        userAgent = \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322)\";\n+        bd = new BrowserDetector(userAgent);\n+        assertEquals(BrowserDetector.MSIE, bd.getBrowserName());\n+        assertEquals(6.0f, bd.getBrowserVersion(), 0.0f);\n+        assertEquals(BrowserDetector.WINDOWS, bd.getBrowserPlatform());\n+    }\n+}", "filename": "src/test/org/apache/turbine/util/BrowserDetectorTest.java"}, {"additions": 5, "raw_url": "https://github.com/apache/turbine-core/raw/23d175ccdd42dce3cb31469414c48c2b39e76b92/xdocs/changes.xml", "blob_url": "https://github.com/apache/turbine-core/blob/23d175ccdd42dce3cb31469414c48c2b39e76b92/xdocs/changes.xml", "sha": "8ed1c40532244da349ac62a1a5d23d6c9fb6bee4", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/turbine-core/contents/xdocs/changes.xml?ref=23d175ccdd42dce3cb31469414c48c2b39e76b92", "patch": "@@ -24,8 +24,12 @@\n \n   <body>\n     <release version=\"2.4-M2\" date=\"in cvs\">\n+      <action dev=\"seade\" type=\"fix\">\n+        BrowserDetector was throwing a NPE for recent versions of Opera - this\n+        has been fixed.\n+      </action>\n       <action dev=\"sgoeschl\" type=\"update\">\n-\t\t\t\tSetting all members of BaseServiceBroker to private as it should be.\n+        Setting all members of BaseServiceBroker to private as it should be.\n       </action>\n       <action dev=\"sgoeschl\" type=\"update\">\n         Removed hack in Turbine.java forcing an early init of the AvalonComponentService. The", "filename": "xdocs/changes.xml"}], "repo": "turbine-core"}, {"commit": "https://github.com/apache/turbine-core/commit/accc91ec3e13731f3197529b17de18202d159a7e", "parent": "https://github.com/apache/turbine-core/commit/a27e50e10465ee5e5def97e8089088e915995d26", "message": "Ensure an NPE does not occur when emptyValue is used to set an object's primitive properties.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/turbine/core/trunk@221745 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "turbine-core_5", "file": [{"additions": 16, "raw_url": "https://github.com/apache/turbine-core/raw/accc91ec3e13731f3197529b17de18202d159a7e/src/java/org/apache/turbine/services/intake/model/BooleanField.java", "blob_url": "https://github.com/apache/turbine-core/blob/accc91ec3e13731f3197529b17de18202d159a7e/src/java/org/apache/turbine/services/intake/model/BooleanField.java", "sha": "95b71af1503430b893f70b050cd225e8d550d7c4", "changes": 16, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/turbine-core/contents/src/java/org/apache/turbine/services/intake/model/BooleanField.java?ref=accc91ec3e13731f3197529b17de18202d159a7e", "patch": "@@ -67,6 +67,7 @@\n  * @author <a href=\"mailto:jmcnally@collab.net\">John McNally</a>\n  * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @author <a href=\"mailto:quintonm@bellsouth.net\">Quinton McCombs</a>\n+ * @author <a href=\"mailto:seade@backstagetech.com.au\">Scott Eade</a>\n  * @version $Id$\n  */\n public class BooleanField\n@@ -115,6 +116,21 @@ public void setEmptyValue(String prop)\n         emptyValue = new Boolean(prop);\n     }\n \n+    /**\n+     * Provides access to emptyValue such that the value returned will be \n+     * acceptable as an argument parameter to Method.invoke.  Subclasses\n+     * that deal with primitive types should ensure that they return an \n+     * appropriate value wrapped in the object wrapper class for the \n+     * primitive type.\n+     *   \n+     * @return the value to use when the field is empty or an Object that\n+     * wraps the empty value for primitive types.\n+     */\n+    Object getSafeEmptyValue()\n+    {\n+        return (null == getEmptyValue()) ? Boolean.FALSE : getEmptyValue(); \n+    }\n+\n     /**\n      * A suitable validator.\n      *", "filename": "src/java/org/apache/turbine/services/intake/model/BooleanField.java"}, {"additions": 16, "raw_url": "https://github.com/apache/turbine-core/raw/accc91ec3e13731f3197529b17de18202d159a7e/src/java/org/apache/turbine/services/intake/model/DoubleField.java", "blob_url": "https://github.com/apache/turbine-core/blob/accc91ec3e13731f3197529b17de18202d159a7e/src/java/org/apache/turbine/services/intake/model/DoubleField.java", "sha": "afcc19bfdc6c87801aea93b785ea480f9f9bc2bb", "changes": 16, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/turbine-core/contents/src/java/org/apache/turbine/services/intake/model/DoubleField.java?ref=accc91ec3e13731f3197529b17de18202d159a7e", "patch": "@@ -64,6 +64,7 @@\n  * Creates Double Field objects.\n  *\n  * @author <a href=\"mailto:quintonm@bellsouth.net\">Quinton McCombs</a>\n+ * @author <a href=\"mailto:seade@backstagetech.com.au\">Scott Eade</a>\n  * @version $Id$\n  */\n public class DoubleField\n@@ -119,6 +120,21 @@ public void setEmptyValue(String prop)\n         emptyValue = new Double(prop);\n     }\n \n+    /**\n+     * Provides access to emptyValue such that the value returned will be \n+     * acceptable as an argument parameter to Method.invoke.  Subclasses\n+     * that deal with primitive types should ensure that they return an \n+     * appropriate value wrapped in the object wrapper class for the \n+     * primitive type.\n+     *   \n+     * @return the value to use when the field is empty or an Object that\n+     * wraps the empty value for primitive types.\n+     */\n+    Object getSafeEmptyValue()\n+    {\n+        return (null == getEmptyValue()) ? new Double(0.0) : getEmptyValue(); \n+    }\n+\n     /**\n      * A suitable validator.\n      *", "filename": "src/java/org/apache/turbine/services/intake/model/DoubleField.java"}, {"additions": 16, "raw_url": "https://github.com/apache/turbine-core/raw/accc91ec3e13731f3197529b17de18202d159a7e/src/java/org/apache/turbine/services/intake/model/Field.java", "blob_url": "https://github.com/apache/turbine-core/blob/accc91ec3e13731f3197529b17de18202d159a7e/src/java/org/apache/turbine/services/intake/model/Field.java", "sha": "bb5caa6c3476ed37b6bba23c9b800dbcc82db33a", "changes": 17, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/turbine-core/contents/src/java/org/apache/turbine/services/intake/model/Field.java?ref=accc91ec3e13731f3197529b17de18202d159a7e", "patch": "@@ -900,7 +900,7 @@ public void setProperty(Object obj) throws IntakeException\n         }\n         else\n         {\n-            valArray[0] = getEmptyValue();\n+            valArray[0] = getSafeEmptyValue();\n             if (isDebugEnabled)\n             {\n                 log.debug(name + \": Property is not set, using emptyValue \" + valArray[0]);\n@@ -969,6 +969,21 @@ public Object getEmptyValue()\n         return emptyValue;\n     }\n \n+    /**\n+     * Provides access to emptyValue such that the value returned will be \n+     * acceptable as an argument parameter to Method.invoke.  Subclasses\n+     * that deal with primitive types should ensure that they return an \n+     * appropriate value wrapped in the object wrapper class for the \n+     * primitive type.\n+     *   \n+     * @return the value to use when the field is empty or an Object that\n+     * wraps the empty value for primitive types.\n+     */\n+    Object getSafeEmptyValue()\n+    {\n+        return getEmptyValue();\n+    }\n+\n     /**\n      * Gets the name of the field.\n      *", "filename": "src/java/org/apache/turbine/services/intake/model/Field.java"}, {"additions": 16, "raw_url": "https://github.com/apache/turbine-core/raw/accc91ec3e13731f3197529b17de18202d159a7e/src/java/org/apache/turbine/services/intake/model/FloatField.java", "blob_url": "https://github.com/apache/turbine-core/blob/accc91ec3e13731f3197529b17de18202d159a7e/src/java/org/apache/turbine/services/intake/model/FloatField.java", "sha": "7afcba913bcddcb96b6672af9fb99a7d976a8e67", "changes": 16, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/turbine-core/contents/src/java/org/apache/turbine/services/intake/model/FloatField.java?ref=accc91ec3e13731f3197529b17de18202d159a7e", "patch": "@@ -67,6 +67,7 @@\n  * @author <a href=\"mailto:jmcnally@collab.net>John McNally</a>\n  * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @author <a href=\"mailto:quintonm@bellsouth.net\">Quinton McCombs</a>\n+ * @author <a href=\"mailto:seade@backstagetech.com.au\">Scott Eade</a>\n  * @version $Id$\n  */\n public class FloatField\n@@ -123,6 +124,21 @@ public void setEmptyValue(String prop)\n         emptyValue = new Double(prop);\n     }\n \n+    /**\n+     * Provides access to emptyValue such that the value returned will be \n+     * acceptable as an argument parameter to Method.invoke.  Subclasses\n+     * that deal with primitive types should ensure that they return an \n+     * appropriate value wrapped in the object wrapper class for the \n+     * primitive type.\n+     *   \n+     * @return the value to use when the field is empty or an Object that\n+     * wraps the empty value for primitive types.\n+     */\n+    Object getSafeEmptyValue()\n+    {\n+        return (null == getEmptyValue()) ? new Float(0.0) : getEmptyValue(); \n+    }\n+\n     /**\n      * A suitable validator.\n      *", "filename": "src/java/org/apache/turbine/services/intake/model/FloatField.java"}, {"additions": 16, "raw_url": "https://github.com/apache/turbine-core/raw/accc91ec3e13731f3197529b17de18202d159a7e/src/java/org/apache/turbine/services/intake/model/IntegerField.java", "blob_url": "https://github.com/apache/turbine-core/blob/accc91ec3e13731f3197529b17de18202d159a7e/src/java/org/apache/turbine/services/intake/model/IntegerField.java", "sha": "0d088603164fcae4e11fbf0411ecf8b77a4e27c6", "changes": 16, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/turbine-core/contents/src/java/org/apache/turbine/services/intake/model/IntegerField.java?ref=accc91ec3e13731f3197529b17de18202d159a7e", "patch": "@@ -64,6 +64,7 @@\n  * @author <a href=\"mailto:jmcnally@collab.net\">John McNally</a>\n  * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @author <a href=\"mailto:quintonm@bellsouth.net\">Quinton McCombs</a>\n+ * @author <a href=\"mailto:seade@backstagetech.com.au\">Scott Eade</a>\n  * @version $Id$\n  */\n public class IntegerField\n@@ -120,6 +121,21 @@ public void setEmptyValue(String prop)\n         emptyValue = new Integer(prop);\n     }\n \n+    /**\n+     * Provides access to emptyValue such that the value returned will be \n+     * acceptable as an argument parameter to Method.invoke.  Subclasses\n+     * that deal with primitive types should ensure that they return an \n+     * appropriate value wrapped in the object wrapper class for the \n+     * primitive type.\n+     *   \n+     * @return the value to use when the field is empty or an Object that\n+     * wraps the empty value for primitive types.\n+     */\n+    Object getSafeEmptyValue()\n+    {\n+        return (null == getEmptyValue()) ? new Integer(0) : getEmptyValue(); \n+    }\n+\n     /**\n      * A suitable validator.\n      *", "filename": "src/java/org/apache/turbine/services/intake/model/IntegerField.java"}, {"additions": 16, "raw_url": "https://github.com/apache/turbine-core/raw/accc91ec3e13731f3197529b17de18202d159a7e/src/java/org/apache/turbine/services/intake/model/LongField.java", "blob_url": "https://github.com/apache/turbine-core/blob/accc91ec3e13731f3197529b17de18202d159a7e/src/java/org/apache/turbine/services/intake/model/LongField.java", "sha": "6fb284af4190ca176f38d59b5502a388fbecc3e2", "changes": 16, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/turbine-core/contents/src/java/org/apache/turbine/services/intake/model/LongField.java?ref=accc91ec3e13731f3197529b17de18202d159a7e", "patch": "@@ -65,6 +65,7 @@\n  *\n  * @author <a href=\"mailto:jmcnally@collab.net>John McNally</a>\n  * @author <a href=\"mailto:Colin.Chalmers@maxware.nl\">Colin Chalmers</a>\n+ * @author <a href=\"mailto:seade@backstagetech.com.au\">Scott Eade</a>\n  * @version $Id$\n  */\n public class LongField\n@@ -121,6 +122,21 @@ public void setEmptyValue(String prop)\n         emptyValue = new Long(prop);\n     }\n \n+    /**\n+     * Provides access to emptyValue such that the value returned will be \n+     * acceptable as an argument parameter to Method.invoke.  Subclasses\n+     * that deal with primitive types should ensure that they return an \n+     * appropriate value wrapped in the object wrapper class for the \n+     * primitive type.\n+     *   \n+     * @return the value to use when the field is empty or an Object that\n+     * wraps the empty value for primitive types.\n+     */\n+    Object getSafeEmptyValue()\n+    {\n+        return (null == getEmptyValue()) ? new Long(0l) : getEmptyValue(); \n+    }\n+\n     /**\n      * A suitable validator.\n      *", "filename": "src/java/org/apache/turbine/services/intake/model/LongField.java"}, {"additions": 17, "raw_url": "https://github.com/apache/turbine-core/raw/accc91ec3e13731f3197529b17de18202d159a7e/src/java/org/apache/turbine/services/intake/model/ShortField.java", "blob_url": "https://github.com/apache/turbine-core/blob/accc91ec3e13731f3197529b17de18202d159a7e/src/java/org/apache/turbine/services/intake/model/ShortField.java", "sha": "3d5f8b18ca75fc98a312a215c739c117febf241e", "changes": 17, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/turbine-core/contents/src/java/org/apache/turbine/services/intake/model/ShortField.java?ref=accc91ec3e13731f3197529b17de18202d159a7e", "patch": "@@ -65,6 +65,7 @@\n  *\n  * @author <a href=\"mailto:jmcnally@collab.net>John McNally</a>\n  * @author <a href=\"mailto:Colin.Chalmers@maxware.nl\">Colin Chalmers</a>\n+ * @author <a href=\"mailto:seade@backstagetech.com.au\">Scott Eade</a>\n  * @version $Id$\n  */\n public class ShortField\n@@ -121,6 +122,22 @@ public void setEmptyValue(String prop)\n         emptyValue = new Short(prop);\n     }\n \n+    /**\n+     * Provides access to emptyValue such that the value returned will be \n+     * acceptable as an argument parameter to Method.invoke.  Subclasses\n+     * that deal with primitive types should ensure that they return an \n+     * appropriate value wrapped in the object wrapper class for the \n+     * primitive type.\n+     *   \n+     * @return the value to use when the field is empty or an Object that\n+     * wraps the empty value for primitive types.\n+     */\n+    Object getSafeEmptyValue()\n+    {\n+        return (null == getEmptyValue()) \n+                ? new Short((short) 0) : getEmptyValue(); \n+    }\n+\n     /**\n      * A suitable validator.\n      *", "filename": "src/java/org/apache/turbine/services/intake/model/ShortField.java"}], "repo": "turbine-core"}, {"commit": "https://github.com/apache/turbine-core/commit/e0a59eba6ac9a3daf49b8be40db9116de270bfbd", "parent": "https://github.com/apache/turbine-core/commit/6e30b42a73923791884d0fd990fb70bf8680a9f7", "message": "fixed an NPE and added a StringKeyField type\n\nPR:\nObtained from:\nSubmitted by:\nReviewed by:\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/turbine/core/trunk@220439 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "turbine-core_6", "file": [{"additions": 17, "raw_url": "https://github.com/apache/turbine-core/raw/e0a59eba6ac9a3daf49b8be40db9116de270bfbd/src/java/org/apache/turbine/services/intake/model/FieldFactory.java", "blob_url": "https://github.com/apache/turbine-core/blob/e0a59eba6ac9a3daf49b8be40db9116de270bfbd/src/java/org/apache/turbine/services/intake/model/FieldFactory.java", "sha": "2784b29cbdbc3aea5279b345efd5dd80a953124a", "changes": 20, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/turbine-core/contents/src/java/org/apache/turbine/services/intake/model/FieldFactory.java?ref=e0a59eba6ac9a3daf49b8be40db9116de270bfbd", "patch": "@@ -127,6 +127,15 @@ public Field getInstance(XmlField f, Group g)\n                 }\n             }\n                        );\n+        fieldCtors.put(\"StringKey\", new FieldFactory.FieldCtor()\n+            {\n+                public Field getInstance(XmlField f, Group g)\n+                    throws Exception\n+                {\n+                    return new StringKeyField(f, g);\n+                }\n+            }\n+                       );\n         fieldCtors.put(\"FileItem\", new FieldFactory.FieldCtor()\n             {\n                 public Field getInstance(XmlField f, Group g)\n@@ -157,15 +166,20 @@ public Field getInstance(XmlField f, Group g) throws Exception\n     public static final Field getInstance(XmlField f, Group g)\n         throws Exception\n     {\n+        FieldCtor fieldCtor = null;\n         Field field = null;\n         String type = f.getType();\n \n-        field = ((FieldCtor)fieldCtors.get(type)).getInstance(f, g);\n-        if ( field == null)\n+        fieldCtor = (FieldCtor)fieldCtors.get(type);\n+        if ( fieldCtor == null)\n         {\n             throw new TurbineException(\"Unsupported type: \" + type);\n         }\n-\n+        else \n+        {\n+            field = fieldCtor.getInstance(f, g);\n+        }\n+        \n         return field;\n     }\n }", "filename": "src/java/org/apache/turbine/services/intake/model/FieldFactory.java"}, {"additions": 104, "raw_url": "https://github.com/apache/turbine-core/raw/e0a59eba6ac9a3daf49b8be40db9116de270bfbd/src/java/org/apache/turbine/services/intake/model/StringKeyField.java", "blob_url": "https://github.com/apache/turbine-core/blob/e0a59eba6ac9a3daf49b8be40db9116de270bfbd/src/java/org/apache/turbine/services/intake/model/StringKeyField.java", "sha": "abe36e31a4016002d64fa41cdd7b06c27ac032d4", "changes": 104, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/turbine-core/contents/src/java/org/apache/turbine/services/intake/model/StringKeyField.java?ref=e0a59eba6ac9a3daf49b8be40db9116de270bfbd", "patch": "@@ -0,0 +1,104 @@\n+package org.apache.turbine.services.intake.model;\n+\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Turbine\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Turbine\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+import org.apache.turbine.om.StringKey;\n+import org.apache.turbine.util.ParameterParser;\n+import org.apache.turbine.services.intake.xmlmodel.XmlField;\n+\n+/**  */\n+public class StringKeyField extends Field\n+{\n+    public StringKeyField(XmlField field, Group group)\n+        throws Exception\n+    {\n+        super(field, group);\n+\n+    }\n+\n+\n+    /**\n+     * A suitable validator.\n+     *\n+     * @return \"DefaultValidator\"\n+     */\n+    protected String getDefaultValidator()\n+    {\n+        return\n+            \"org.apache.fulcrum.intake.validator.DefaultValidator\";\n+    }\n+\n+    /**\n+     * converts the parameter to the correct Object.\n+     */\n+    protected void doSetValue(ParameterParser pp)\n+    {\n+        if ( isMultiValued  )\n+        {\n+            String[] ss = pp.getStrings(getKey());\n+            StringKey[] ival = new StringKey[ss.length];\n+            for (int i=0; i<ss.length; i++)\n+            {\n+                ival[i] = new StringKey(ss[i]);\n+            }\n+            setTestValue(ival);\n+        }\n+        else\n+        {\n+            setTestValue( new StringKey(pp.getString(getKey())) );\n+        }\n+    }\n+\n+}", "filename": "src/java/org/apache/turbine/services/intake/model/StringKeyField.java"}], "repo": "turbine-core"}, {"commit": "https://github.com/apache/turbine-core/commit/2e489d97a49b093bb988bf8e4d02a8af95a9492f", "parent": "https://github.com/apache/turbine-core/commit/28caefbaa0b82625125ad535b8046b08e361e39c", "message": "Fix NPEs in get()ting groups from the Intake Tool. Make sure that get(group, key, create)\nbehaves the same as get(group,key).\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/turbine/core/trunk@221702 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "turbine-core_7", "file": [{"additions": 14, "raw_url": "https://github.com/apache/turbine-core/raw/2e489d97a49b093bb988bf8e4d02a8af95a9492f/src/java/org/apache/turbine/services/intake/IntakeTool.java", "blob_url": "https://github.com/apache/turbine-core/blob/2e489d97a49b093bb988bf8e4d02a8af95a9492f/src/java/org/apache/turbine/services/intake/IntakeTool.java", "sha": "886493eaadc45ee9dd141e6b4d54e8fd12452655", "changes": 16, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/turbine-core/contents/src/java/org/apache/turbine/services/intake/IntakeTool.java?ref=2e489d97a49b093bb988bf8e4d02a8af95a9492f", "patch": "@@ -406,7 +406,9 @@ public Group get(String groupName, String key)\n         {\n             throw new IntakeException(\"Intake.get: key == null\");\n         }\n-        return ((PullHelper) get(groupName)).setKey(key);\n+\n+        PullHelper ph = get(groupName);\n+        return (ph == null) ? null : ph.setKey(key);\n     }\n \n     /**\n@@ -416,7 +418,17 @@ public Group get(String groupName, String key)\n     public Group get(String groupName, String key, boolean create)\n             throws IntakeException\n     {\n-        return ((PullHelper) get(groupName)).setKey(key, create);\n+        if (groupName == null)\n+        {\n+            throw new IntakeException(\"Intake.get: groupName == null\");\n+        }\n+        if (key == null)\n+        {\n+            throw new IntakeException(\"Intake.get: key == null\");\n+        }\n+\n+        PullHelper ph = get(groupName);\n+        return (ph == null) ? null : ph.setKey(key, create);\n     }\n \n     /**", "filename": "src/java/org/apache/turbine/services/intake/IntakeTool.java"}], "repo": "turbine-core"}, {"commit": "https://github.com/apache/turbine-core/commit/01517ba2b5ae102dd5950a337624edf5b0e5ff81", "parent": "https://github.com/apache/turbine-core/commit/a5b5555e659851cdef72a3df10b423e410c65262", "message": "Move the serviceManager member into a getter so we can assure that it is\nnever null. Makes it possible to call destroy() unconditionally on a\nTurbine object without getting NPEs.\n\nAdded a test for this.\n\nPR:\nObtained from:\nSubmitted by:\nReviewed by:\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/turbine/core/trunk@221472 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "turbine-core_8", "file": [{"additions": 15, "raw_url": "https://github.com/apache/turbine-core/raw/01517ba2b5ae102dd5950a337624edf5b0e5ff81/src/java/org/apache/turbine/Turbine.java", "blob_url": "https://github.com/apache/turbine-core/blob/01517ba2b5ae102dd5950a337624edf5b0e5ff81/src/java/org/apache/turbine/Turbine.java", "sha": "6c468b7599abf5b7019b47db10b22e4df09ed4ee", "changes": 27, "status": "modified", "deletions": 12, "contents_url": "https://api.github.com/repos/apache/turbine-core/contents/src/java/org/apache/turbine/Turbine.java?ref=01517ba2b5ae102dd5950a337624edf5b0e5ff81", "patch": "@@ -84,6 +84,7 @@\n import org.apache.turbine.modules.ActionLoader;\n import org.apache.turbine.modules.PageLoader;\n \n+import org.apache.turbine.services.ServiceManager;\n import org.apache.turbine.services.TurbineServices;\n import org.apache.turbine.services.avaloncomponent.AvalonComponentService;\n import org.apache.turbine.services.component.ComponentService;\n@@ -186,9 +187,6 @@\n      */\n     private static String webappRoot;\n \n-    /** instance of turbine services */\n-    private static TurbineServices serviceManager = null;\n-\n     /** Our internal configuration object */\n     private static Configuration configuration = null;\n \n@@ -325,8 +323,6 @@ private void configure(ServletConfig config, ServletContext context)\n         String confPath;\n         String confStyle = \"unset\";\n \n-\n-\n         if (StringUtils.isNotEmpty(confFile))\n         {\n             confPath = getRealPath(confFile);\n@@ -395,10 +391,7 @@ private void configure(ServletConfig config, ServletContext context)\n         setTurbineServletConfig(config);\n         setTurbineServletContext(context);\n \n-        // Get the instance of the service manager\n-        serviceManager = (TurbineServices) TurbineServices.getInstance();\n-\n-        serviceManager.setApplicationRoot(applicationRoot);\n+        getServiceManager().setApplicationRoot(applicationRoot);\n \n         // We want to set a few values in the configuration so\n         // that ${variable} interpolation will work for\n@@ -420,13 +413,13 @@ private void configure(ServletConfig config, ServletContext context)\n                                   AvalonComponentService.SERVICE_NAME + \".earlyInit\",\n                                   Boolean.TRUE);\n \n-        serviceManager.setConfiguration(configuration);\n+        getServiceManager().setConfiguration(configuration);\n \n         // Initialize the service manager. Services\n         // that have its 'earlyInit' property set to\n         // a value of 'true' will be started when\n         // the service manager is initialized.\n-        serviceManager.init();\n+        getServiceManager().init();\n     }\n \n     /**\n@@ -661,7 +654,7 @@ public static ServletContext getTurbineServletContext()\n     public final void destroy()\n     {\n         // Shut down all Turbine Services.\n-        serviceManager.shutdownServices();\n+        getServiceManager().shutdownServices();\n         System.gc();\n \n         log.info(\"Turbine: Done shutting down!\");\n@@ -1131,4 +1124,14 @@ public static String getRealPath(String path)\n \n         return new File(getApplicationRoot(), path).getAbsolutePath();\n     }\n+\n+    /**\n+     * Return an instance of the currently configured Service Manager\n+     *\n+     * @return A service Manager instance\n+     */\n+    private ServiceManager getServiceManager()\n+    {\n+        return TurbineServices.getInstance();\n+    }\n }", "filename": "src/java/org/apache/turbine/Turbine.java"}, {"additions": 99, "raw_url": "https://github.com/apache/turbine-core/raw/01517ba2b5ae102dd5950a337624edf5b0e5ff81/src/test/org/apache/turbine/DestroyTest.java", "blob_url": "https://github.com/apache/turbine-core/blob/01517ba2b5ae102dd5950a337624edf5b0e5ff81/src/test/org/apache/turbine/DestroyTest.java", "sha": "1b40c28a4ebcf2910fbc41b41385e410c996179c", "changes": 99, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/turbine-core/contents/src/test/org/apache/turbine/DestroyTest.java?ref=01517ba2b5ae102dd5950a337624edf5b0e5ff81", "patch": "@@ -0,0 +1,99 @@\n+package org.apache.turbine;\n+\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Turbine\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Turbine\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.apache.turbine.Turbine;\n+import org.apache.turbine.util.TurbineConfig;\n+\n+/**\n+ * Can we call \"destroy\" unconditionally on our Turbine Servlet, even if\n+ * it hasn't configured?\n+ *\n+ * @version $Id$\n+ */\n+public class DestroyTest\n+    extends TestCase\n+{\n+    private static TurbineConfig tc = null;\n+\n+    public DestroyTest(String name)\n+    {\n+        super(name);\n+        tc = new TurbineConfig(\".\", \"/conf/test/TemplateService.properties\");\n+    }\n+\n+    public static Test suite()\n+    {\n+        return new TestSuite(DestroyTest.class);\n+    }\n+\n+    public void testDestroy()\n+        throws Exception\n+    {\n+        Turbine t = new Turbine();\n+        t.destroy();\n+    }\n+\n+    public void testInitAndDestroy()\n+        throws Exception\n+    {\n+        tc.initialize();\n+        tc.dispose();\n+    }\n+}", "filename": "src/test/org/apache/turbine/DestroyTest.java"}], "repo": "turbine-core"}, {"commit": "https://github.com/apache/turbine-core/commit/2bdfaf7f54f805491d635f14612918e77f21fbee", "parent": "https://github.com/apache/turbine-core/commit/9f403dda2bf7441398067171e223f87beb21548c", "message": "Initial cut at a TurbineUser Test case.  This test case seems to highlight that \r\nI can NOT create a turbine user.  I get a NPE.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/turbine/core/trunk@221404 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "turbine-core_9", "file": [{"additions": 137, "raw_url": "https://github.com/apache/turbine-core/raw/2bdfaf7f54f805491d635f14612918e77f21fbee/src/test-cactus/org/apache/turbine/om/security/TurbineUserTest.java", "blob_url": "https://github.com/apache/turbine-core/blob/2bdfaf7f54f805491d635f14612918e77f21fbee/src/test-cactus/org/apache/turbine/om/security/TurbineUserTest.java", "sha": "2abf2a69e8959f017593756770ec44ad87732d34", "changes": 137, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/turbine-core/contents/src/test-cactus/org/apache/turbine/om/security/TurbineUserTest.java?ref=2bdfaf7f54f805491d635f14612918e77f21fbee", "patch": "@@ -0,0 +1,137 @@\n+package org.apache.turbine.om.security;\n+\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Turbine\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Turbine\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+import java.io.CharArrayReader;\n+import java.io.IOException;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.cactus.ServletTestCase;\n+import org.apache.turbine.Turbine;\n+\n+/**\n+ * Test the CSVParser.\n+ *\n+ * NOTE : I am assuming (as is in the code of DataStreamParser.java\n+ * that the values are reusing the same object for the values.\n+ * If this shouldn't be, we need to fix that in the code!.\n+ *\n+ * @author <a href=\"mailto:martin@mvdb.net\">Martin van den Bemt</a>\n+ * @version $Id$\n+ */\n+public class TurbineUserTest extends ServletTestCase\n+{\n+\n+    Turbine turbine = null;\n+\n+    /**\n+     * Constructor for TurbineUserTest.\n+     * @param arg0\n+     */\n+    public TurbineUserTest(String name)\n+    {\n+        super(name);\n+    }\n+\n+    /**\n+     * This will setup an instance of turbine to use when testing\n+     * @exception if an exception occurs.\n+     */\n+\n+    protected void setUp() throws Exception\n+    {\n+        super.setUp();\n+\n+        config.setInitParameter(\"properties\", \"/WEB-INF/conf/TurbineComplete.properties\");\n+        turbine = new Turbine();\n+        turbine.init(config);\n+    }\n+\n+    /**\n+     * Shut down our turbine servlet and let our parents clean up also.\n+     *\n+     * @exception Exception if an error occurs\n+     */\n+    protected void tearDown() throws Exception\n+    {\n+        turbine.destroy();\n+        super.tearDown();\n+    }\n+\n+    /**\n+     * Return a test suite of all our tests.\n+     *\n+     * @return a <code>Test</code> value\n+     */\n+    public static Test suite()\n+    {\n+        return new TestSuite(TurbineUserTest.class);\n+    }\n+\n+    /**\n+     * Tests if a TurbineUser can be created.\n+     */\n+    public void testCreatingTurbineUser() throws Exception\n+    {\n+        TurbineUser user = null;\n+        \n+        user = new TurbineUser();\n+\n+        assertNotNull(user);\n+    }\n+\n+}", "filename": "src/test-cactus/org/apache/turbine/om/security/TurbineUserTest.java"}], "repo": "turbine-core"}, {"commit": "https://github.com/apache/turbine-core/commit/07a38211bbe69e0f74ee465463bdaa34b1cb4753", "parent": "https://github.com/apache/turbine-core/commit/02632be06d61ef8eb8aa013349ab2e9f9437aed7", "message": "Cleaned up the toString() handling with respect to the\ntemplate being unset. If you simply call $navigation\nin your template before using \"$navigation.setTemplate()\" you\nwould get a strange NPE in your logs without any real hint\nwhere the problem is.\n\nNow your application will report\n\n\"Navigation Template is null (Might be unset)\"\n\non screen to show where the bug is.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/turbine/core/trunk@221253 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "turbine-core_10", "file": [{"additions": 30, "raw_url": "https://github.com/apache/turbine-core/raw/07a38211bbe69e0f74ee465463bdaa34b1cb4753/src/java/org/apache/turbine/util/template/TemplateNavigation.java", "blob_url": "https://github.com/apache/turbine-core/blob/07a38211bbe69e0f74ee465463bdaa34b1cb4753/src/java/org/apache/turbine/util/template/TemplateNavigation.java", "sha": "e0d3545316549e5fff1485fadcf8f2e4612117f1", "changes": 40, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/turbine-core/contents/src/java/org/apache/turbine/util/template/TemplateNavigation.java?ref=07a38211bbe69e0f74ee465463bdaa34b1cb4753", "patch": "@@ -57,6 +57,8 @@\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n \n+import org.apache.commons.lang.StringUtils;\n+\n import org.apache.ecs.ConcreteElement;\n \n import org.apache.turbine.modules.NavigationLoader;\n@@ -91,7 +93,7 @@\n     private RunData data;\n \n     /* The name of the navigation template. */\n-    private String template;\n+    private String template = null;     \n \n     /**\n      * Constructor\n@@ -112,6 +114,7 @@ public TemplateNavigation(RunData data)\n      */\n     public TemplateNavigation setTemplate(String template)\n     {\n+        log.debug(\"setTemplate(\" + template + \")\");\n         this.template = template;\n         return this;\n     }\n@@ -123,25 +126,42 @@ public TemplateNavigation setTemplate(String template)\n      */\n     public String toString()\n     {\n-        log.debug(\"toString: \" + this.template);\n-        data.getTemplateInfo().setNavigationTemplate(this.template);\n         String module = null;\n         String returnValue = null;\n+\n         try\n         {\n-            module = TurbineTemplate.getNavigationName(template);\n+            if (template == null)\n+            {\n+                returnValue = \"Navigation Template is null (Might be unset)\";\n+                throw new Exception(returnValue);\n+            }\n \n-            ConcreteElement results = NavigationLoader.getInstance()\n-                    .eval(data, module);\n+            data.getTemplateInfo().setNavigationTemplate(template);\n+            module = TurbineTemplate.getNavigationName(template);\n+                \n+            if (module == null)\n+            {\n+                returnValue = \"Template Service returned null for Navigation Template \" + template;\n+                throw new Exception(returnValue);\n+            }\n+            \n+            ConcreteElement results = \n+                    NavigationLoader.getInstance().eval(data, module);\n             returnValue = results.toString();\n         }\n         catch (Exception e)\n         {\n-            String message = (\"Error processing navigation template:\"\n-                    + this.template + \" using module: \" + module);\n-            log.error(message, e);\n-            returnValue = message;\n+            if (returnValue == null)\n+            {\n+                returnValue = \"Error processing navigation template: \"\n+                        + template + \", using module: \" + module;\n+            }\n+            log.error(returnValue, e);\n         }\n+\n+        log.debug(\"Returning \" + returnValue);\n+\n         return returnValue;\n     }\n }", "filename": "src/java/org/apache/turbine/util/template/TemplateNavigation.java"}], "repo": "turbine-core"}, {"commit": "https://github.com/apache/turbine-core/commit/e16eba36c209fb818b8ef9f374975c6f944b8cac", "parent": "https://github.com/apache/turbine-core/commit/eea49f2ae5a5772db4bc99fcc14fe27a91b1986e", "message": "Patch supplied by dvandegrift@bluearc.com for Issue #TTWS11\n\nsetRunData() in DefaultCookieParser.java will throw a NullPointerException if the HttpRequest does not yet have any cookies associated with it.\nAccording to the Servlet Spec, HttpServletRequest.getCookies() retuns null if no cookies are defined.\nCookie[] cookies = data.getRequest().getCookies();\n\nThe existing code immediately accesses cookies.length. But since cookies is null an NPE is throw.\n- adds a variable 'cookiesLength' and sets it's value by checking for null first.\n- removes a the redundant line:\ncookiePath = new DynamicURI(data);\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/turbine/core/trunk@220911 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "turbine-core_11", "file": [{"additions": 10, "raw_url": "https://github.com/apache/turbine-core/raw/e16eba36c209fb818b8ef9f374975c6f944b8cac/src/java/org/apache/turbine/util/parser/DefaultCookieParser.java", "blob_url": "https://github.com/apache/turbine-core/blob/e16eba36c209fb818b8ef9f374975c6f944b8cac/src/java/org/apache/turbine/util/parser/DefaultCookieParser.java", "sha": "2498e584b552b2bb0a3b4dc03ee7f9977ced1489", "changes": 19, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/turbine-core/contents/src/java/org/apache/turbine/util/parser/DefaultCookieParser.java?ref=e16eba36c209fb818b8ef9f374975c6f944b8cac", "patch": "@@ -55,6 +55,7 @@\n  */\n \n import javax.servlet.http.Cookie;\n+\n import org.apache.turbine.util.CookieParser;\n import org.apache.turbine.util.DynamicURI;\n import org.apache.commons.logging.Log;\n@@ -139,7 +140,7 @@ public RunData getRunData()\n      *\n      * @param data the RunData object.\n      */\n-    public void setRunData (RunData data)\n+    public void setRunData(RunData data)\n     {\n         clear();\n \n@@ -148,18 +149,18 @@ public void setRunData (RunData data)\n \n         cookiePath = new DynamicURI(data);\n \n-        cookiePath = new DynamicURI(data);\n-\n         Cookie[] cookies = data.getRequest().getCookies();\n \n-        log.debug(\"Number of Cookies \" + cookies.length);\n+        int cookiesCount = (cookies != null ? cookies.length : 0);\n+\n+        log.debug(\"Number of Cookies \" + cookiesCount);\n \n-        for (int i = 0; i < cookies.length; i++)\n+        for(int i = 0; i < cookiesCount; i++)\n         {\n             String name = convert(cookies[i].getName());\n             String value = cookies[i].getValue();\n             log.debug(\"Adding \" + name + \"=\" + value);\n-            add(name,value);\n+            add(name, value);\n         }\n \n         this.data = data;\n@@ -187,7 +188,7 @@ public void setCookiePath(DynamicURI path)\n      */\n     public void set(String name, String value)\n     {\n-        set(name,value,AGE_SESSION);\n+        set(name, value, AGE_SESSION);\n     }\n \n     /**\n@@ -196,7 +197,7 @@ public void set(String name, String value)\n      */\n     public void set(String name, String value, int seconds_age)\n     {\n-        if (data == null)\n+        if(data == null)\n         {\n             throw new IllegalStateException(\"RunData not available\");\n         }\n@@ -212,6 +213,6 @@ public void set(String name, String value, int seconds_age)\n      */\n     public void unset(String name)\n     {\n-        set(name,\" \",AGE_DELETE);\n+        set(name, \" \", AGE_DELETE);\n     }\n }", "filename": "src/java/org/apache/turbine/util/parser/DefaultCookieParser.java"}], "repo": "turbine-core"}]
