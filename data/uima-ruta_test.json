{
    "uima-ruta_04844d3": {
        "bug_id": "uima-ruta_04844d3",
        "commit": "https://github.com/apache/uima-ruta/commit/04844d3aa9137ebe7e66f3f5efb93013c10714e1",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/uima-ruta/blob/04844d3aa9137ebe7e66f3f5efb93013c10714e1/uimaj-ep-textmarker-addons/src/main/java/org/apache/uima/textmarker/testing/searchStrategy/TestingSearchStrategy.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/uimaj-ep-textmarker-addons/src/main/java/org/apache/uima/textmarker/testing/searchStrategy/TestingSearchStrategy.java?ref=04844d3aa9137ebe7e66f3f5efb93013c10714e1",
                "deletions": 0,
                "filename": "uimaj-ep-textmarker-addons/src/main/java/org/apache/uima/textmarker/testing/searchStrategy/TestingSearchStrategy.java",
                "patch": "@@ -49,6 +49,9 @@ public IFile findTypeSystem(IFile casFile) {\n     IPath relativeTo = location.makeRelativeTo(testFolder.getLocation());\r\n     IPath segments = relativeTo.removeLastSegments(2);\r\n     String scriptName = segments.lastSegment();\r\n+    if(scriptName == null) {\r\n+      return null;\r\n+    }\r\n     scriptName += \"TypeSystem.xml\";\r\n     segments = segments.removeLastSegments(1);\r\n     IFolder descPackageFolder = null;\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/04844d3aa9137ebe7e66f3f5efb93013c10714e1/uimaj-ep-textmarker-addons/src/main/java/org/apache/uima/textmarker/testing/searchStrategy/TestingSearchStrategy.java",
                "sha": "f0c4223c40c32b63c4fb5d0c35be20689d85385c",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/uima-ruta/blob/04844d3aa9137ebe7e66f3f5efb93013c10714e1/uimaj-ep-textmarker-addons/src/main/java/org/apache/uima/textmarker/testing/ui/views/tree/TestEvaluationTree.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/uimaj-ep-textmarker-addons/src/main/java/org/apache/uima/textmarker/testing/ui/views/tree/TestEvaluationTree.java?ref=04844d3aa9137ebe7e66f3f5efb93013c10714e1",
                "deletions": 4,
                "filename": "uimaj-ep-textmarker-addons/src/main/java/org/apache/uima/textmarker/testing/ui/views/tree/TestEvaluationTree.java",
                "patch": "@@ -25,6 +25,7 @@\n import org.apache.uima.cas.FeatureStructure;\r\n import org.apache.uima.cas.Type;\r\n import org.apache.uima.cas.text.AnnotationFS;\r\n+import org.apache.uima.textmarker.addons.TextMarkerAddonsPlugin;\r\n import org.apache.uima.textmarker.caseditor.view.tree.AnnotationTreeNode;\r\n import org.apache.uima.textmarker.caseditor.view.tree.ITreeNode;\r\n import org.apache.uima.textmarker.caseditor.view.tree.TypeTreeNode;\r\n@@ -49,7 +50,6 @@ public void createTree(CAS cas) {\n     // Creating RootNode and children that function as root nodes\r\n     // for the FalsePositive /FalseNegative subtrees\r\n     root = new TypeTreeNode(null, cas.getAnnotationType());\r\n-    boolean containsEvalInfos = false;\r\n \r\n     TypeTreeNode fproot = new TypeTreeNode(root, falsePositiveType);\r\n     TypeTreeNode fnroot = new TypeTreeNode(root, falseNegativeType);\r\n@@ -61,11 +61,9 @@ public void createTree(CAS cas) {\n     addEvalNodes(cas, falseNegativeType, fnroot);\r\n     addEvalNodes(cas, truePositiveType, tproot);\r\n \r\n-    // if (containsEvalInfos) {\r\n     root.addChild(fproot);\r\n     root.addChild(fnroot);\r\n     root.addChild(tproot);\r\n-    // }\r\n   }\r\n \r\n   private void addEvalNodes(CAS cas, Type falsePositiveType, TypeTreeNode fproot) {\r\n@@ -82,7 +80,12 @@ private void addEvalNodes(CAS cas, Type falsePositiveType, TypeTreeNode fproot)\n           fproot.addChild(parentTypeNode);\r\n         }\r\n         AnnotationTreeNode newNode = new AnnotationTreeNode(parentTypeNode, a);\r\n-        parentTypeNode.addChild(newNode);\r\n+        if (parentTypeNode != null) {\r\n+          parentTypeNode.addChild(newNode);\r\n+        } else {\r\n+          TextMarkerAddonsPlugin.error(new IllegalArgumentException(\r\n+                  \"Trying to display unknown type for \" + a));\r\n+        }\r\n       }\r\n       iter.moveToNext();\r\n     }\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/04844d3aa9137ebe7e66f3f5efb93013c10714e1/uimaj-ep-textmarker-addons/src/main/java/org/apache/uima/textmarker/testing/ui/views/tree/TestEvaluationTree.java",
                "sha": "c8c14344a303d480885b58bac5b691e4f46276a4",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/uima-ruta/blob/04844d3aa9137ebe7e66f3f5efb93013c10714e1/uimaj-ep-textmarker-caseditor/src/main/java/org/apache/uima/textmarker/caseditor/view/tree/FSTreeNode.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/uimaj-ep-textmarker-caseditor/src/main/java/org/apache/uima/textmarker/caseditor/view/tree/FSTreeNode.java?ref=04844d3aa9137ebe7e66f3f5efb93013c10714e1",
                "deletions": 5,
                "filename": "uimaj-ep-textmarker-caseditor/src/main/java/org/apache/uima/textmarker/caseditor/view/tree/FSTreeNode.java",
                "patch": "@@ -19,6 +19,7 @@\n \r\n package org.apache.uima.textmarker.caseditor.view.tree;\r\n \r\n+import java.util.ArrayList;\r\n import java.util.Collections;\r\n import java.util.List;\r\n \r\n@@ -34,7 +35,7 @@\n   protected FeatureStructure fs;\r\n \r\n   public FSTreeNode(ITreeNode parent, FeatureStructure annotation) {\r\n-    this(parent, annotation, null);\r\n+    this(parent, annotation, new ArrayList<Type>());\r\n   }\r\n \r\n   public FSTreeNode(ITreeNode parent, FeatureStructure annotation, List<Type> parentTypes) {\r\n@@ -92,19 +93,17 @@ public void addFeatures(ITreeNode parent, Feature f, FeatureStructure featureStr\n       }\r\n     } else if (f.getRange() instanceof Type) {\r\n       FeatureStructure featureValue = featureStructure.getFeatureValue(f);\r\n-      if (featureValue instanceof AnnotationFS\r\n-              && expandable(featureValue.getType(), parentTypes)) {\r\n+      if (featureValue instanceof AnnotationFS && expandable(featureValue.getType(), parentTypes)) {\r\n         parent.addChild(new AnnotationTreeNode(this, ((AnnotationFS) featureValue), parentTypes));\r\n       }\r\n     }\r\n   }\r\n \r\n-  \r\n   private boolean expandable(Type type, List<Type> parentTypes) {\r\n     int frequency = Collections.frequency(parentTypes, type);\r\n     return frequency < 5;\r\n   }\r\n-  \r\n+\r\n   public Object getAdapter(Class adapter) {\r\n \r\n     if (FSTreeNode.class.equals(adapter)) {\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/04844d3aa9137ebe7e66f3f5efb93013c10714e1/uimaj-ep-textmarker-caseditor/src/main/java/org/apache/uima/textmarker/caseditor/view/tree/FSTreeNode.java",
                "sha": "6fc3c56189d11acbcba66ff9e1c256b1bafaee95",
                "status": "modified"
            }
        ],
        "message": "UIMA-2495\n- fixed NPE for missing parent nodes\n- added error message if evaluated types are not defined\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/trunk/TextMarker@1406513 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/uima-ruta/commit/ef6f927fb85ab669ba11205e32302a610feeacfe",
        "patched_files": [
            "FSTreeNode.java"
        ],
        "repo": "uima-ruta",
        "unit_tests": [
            "TestEvaluationTree.java",
            "TestingSearchStrategy.java"
        ]
    },
    "uima-ruta_05aaeba": {
        "bug_id": "uima-ruta_05aaeba",
        "commit": "https://github.com/apache/uima-ruta/commit/05aaeba6c5d78f570a6fe32e45ec1a17640201d2",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/uima-ruta/blob/05aaeba6c5d78f570a6fe32e45ec1a17640201d2/ruta-core/src/main/java/org/apache/uima/ruta/expression/AnnotationTypeExpression.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/expression/AnnotationTypeExpression.java?ref=05aaeba6c5d78f570a6fe32e45ec1a17640201d2",
                "deletions": 1,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/expression/AnnotationTypeExpression.java",
                "patch": "@@ -21,6 +21,7 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.List;\n \n import org.apache.uima.cas.FeatureStructure;\n@@ -230,7 +231,7 @@ public String getStringValue(MatchContext context, RutaStream stream) {\n         }\n       }\n     }\n-    return null;\n+    return Collections.emptyList();\n   }\n \n   public MatchReference getReference() {",
                "raw_url": "https://github.com/apache/uima-ruta/raw/05aaeba6c5d78f570a6fe32e45ec1a17640201d2/ruta-core/src/main/java/org/apache/uima/ruta/expression/AnnotationTypeExpression.java",
                "sha": "ba460c28bc8a7ca1a90919cde14a4fd8dc501c08",
                "status": "modified"
            },
            {
                "additions": 58,
                "blob_url": "https://github.com/apache/uima-ruta/blob/05aaeba6c5d78f570a6fe32e45ec1a17640201d2/ruta-core/src/test/java/org/apache/uima/ruta/expression/AnnotationTypeExpressionTest.java",
                "changes": 58,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/test/java/org/apache/uima/ruta/expression/AnnotationTypeExpressionTest.java?ref=05aaeba6c5d78f570a6fe32e45ec1a17640201d2",
                "deletions": 0,
                "filename": "ruta-core/src/test/java/org/apache/uima/ruta/expression/AnnotationTypeExpressionTest.java",
                "patch": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.uima.ruta.expression;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import org.apache.uima.cas.CAS;\n+import org.apache.uima.ruta.engine.Ruta;\n+import org.apache.uima.ruta.engine.RutaTestUtils;\n+import org.apache.uima.ruta.engine.RutaTestUtils.TestFeature;\n+import org.junit.Test;\n+\n+public class AnnotationTypeExpressionTest {\n+\n+  @Test\n+  public void testEmptyAnnotationList() throws Exception {\n+    String document = \"This is a test.\";\n+    String script = \"\";\n+    script += \"Document{-> CREATE(Struct1, \\\"as\\\" = COMMA)};\\n\";\n+    script += \"Struct1.as{-> T1};\\n\";\n+    \n+    Map<String, String> complexTypes = new TreeMap<String, String>();\n+    complexTypes.put(\"Struct1\", \"uima.tcas.Annotation\");\n+    complexTypes.put(\"Struct2\", \"uima.tcas.Annotation\");\n+    Map<String, List<TestFeature>> features = new TreeMap<String, List<TestFeature>>();\n+    List<TestFeature> list = new ArrayList<RutaTestUtils.TestFeature>();\n+    features.put(\"Struct1\", list);\n+    features.put(\"Struct2\", list);\n+    list.add(new TestFeature(\"a\", \"\", \"uima.tcas.Annotation\"));\n+    list.add(new TestFeature(\"as\", \"\", \"uima.cas.FSArray\"));\n+    \n+    CAS cas = RutaTestUtils.getCAS(document, complexTypes, features);\n+    Ruta.apply(cas, script);    \n+    \n+    RutaTestUtils.assertAnnotationsEquals(cas, 1, 0);\n+  }\n+\n+}",
                "raw_url": "https://github.com/apache/uima-ruta/raw/05aaeba6c5d78f570a6fe32e45ec1a17640201d2/ruta-core/src/test/java/org/apache/uima/ruta/expression/AnnotationTypeExpressionTest.java",
                "sha": "82271435a5c60b6d51baf37667f1adb79c65f0fe",
                "status": "added"
            }
        ],
        "message": "UIMA-5370\n- avoid NPE\n- added test\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1787078 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/uima-ruta/commit/78816764bcbda395a6ddbb8e965165b53500dc26",
        "patched_files": [
            "AnnotationTypeExpression.java"
        ],
        "repo": "uima-ruta",
        "unit_tests": [
            "AnnotationTypeExpressionTest.java"
        ]
    },
    "uima-ruta_0e878dc": {
        "bug_id": "uima-ruta_0e878dc",
        "commit": "https://github.com/apache/uima-ruta/commit/0e878dcf932baa09893e8677f894b4b62dc5eca7",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/uima-ruta/blob/0e878dcf932baa09893e8677f894b4b62dc5eca7/ruta-core/src/main/java/org/apache/uima/ruta/expression/feature/SimpleFeatureExpression.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/expression/feature/SimpleFeatureExpression.java?ref=0e878dcf932baa09893e8677f894b4b62dc5eca7",
                "deletions": 1,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/expression/feature/SimpleFeatureExpression.java",
                "patch": "@@ -117,7 +117,9 @@ public Type getInitialType(MatchContext context, RutaStream stream) {\n       IAnnotationExpression annotationExpression = mr.getAnnotationExpression(context, stream);\r\n       if(annotationExpression != null) {\r\n         AnnotationFS annotation = annotationExpression.getAnnotation(context, stream);\r\n-        return annotation.getType();\r\n+        if(annotation != null) {\r\n+          return annotation.getType();\r\n+        }\r\n       }\r\n     }\r\n     return null;\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/0e878dcf932baa09893e8677f894b4b62dc5eca7/ruta-core/src/main/java/org/apache/uima/ruta/expression/feature/SimpleFeatureExpression.java",
                "sha": "c8a7c9b2f5a264aba2b3f1567664843a06e73453",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/uima-ruta/blob/0e878dcf932baa09893e8677f894b4b62dc5eca7/ruta-core/src/test/java/org/apache/uima/ruta/verbalizer/ExpressionVerbalizerTest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/test/java/org/apache/uima/ruta/verbalizer/ExpressionVerbalizerTest.java?ref=0e878dcf932baa09893e8677f894b4b62dc5eca7",
                "deletions": 0,
                "filename": "ruta-core/src/test/java/org/apache/uima/ruta/verbalizer/ExpressionVerbalizerTest.java",
                "patch": "@@ -24,6 +24,8 @@\n import java.util.ArrayList;\r\n import java.util.List;\r\n \r\n+import org.apache.uima.ruta.expression.annotation.AnnotationLabelExpression;\r\n+import org.apache.uima.ruta.expression.annotation.AnnotationVariableExpression;\r\n import org.apache.uima.ruta.expression.bool.AbstractBooleanListExpression;\r\n import org.apache.uima.ruta.expression.bool.BooleanListVariableExpression;\r\n import org.apache.uima.ruta.expression.bool.BooleanNumberExpression;\r\n@@ -217,4 +219,12 @@ public void test() {\n     assertEquals(\"anyVar\", s);\r\n \r\n   }\r\n+  \r\n+  @Test\r\n+  public void testAnnotationExpression() {\r\n+    RutaVerbalizer v = new RutaVerbalizer();\r\n+    assertEquals(\"l\" , v.verbalize(new AnnotationLabelExpression(\"l\")));\r\n+    assertEquals(\"l\" , v.verbalize(new AnnotationVariableExpression(\"l\")));\r\n+  }\r\n+  \r\n }\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/0e878dcf932baa09893e8677f894b4b62dc5eca7/ruta-core/src/test/java/org/apache/uima/ruta/verbalizer/ExpressionVerbalizerTest.java",
                "sha": "70ca3e56ffdfb65e1b70fbb3cbeec684c3dbf6bf",
                "status": "modified"
            }
        ],
        "message": "UIMA-4976\n- extended test, avoid npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1748671 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/uima-ruta/commit/4859252a71ded3dcc10378a09a6276feddc7972a",
        "patched_files": [
            "ExpressionVerbalizer.java",
            "SimpleFeatureExpression.java"
        ],
        "repo": "uima-ruta",
        "unit_tests": [
            "ExpressionVerbalizerTest.java"
        ]
    },
    "uima-ruta_2f9b208": {
        "bug_id": "uima-ruta_2f9b208",
        "commit": "https://github.com/apache/uima-ruta/commit/2f9b208c335f5cadda3b9345218d3a460c809e2c",
        "file": [
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/uima-ruta/blob/2f9b208c335f5cadda3b9345218d3a460c809e2c/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ActionVerbalizer.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ActionVerbalizer.java?ref=2f9b208c335f5cadda3b9345218d3a460c809e2c",
                "deletions": 0,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ActionVerbalizer.java",
                "patch": "@@ -26,6 +26,8 @@\n import org.apache.commons.lang3.StringUtils;\r\n import org.apache.uima.ruta.action.AbstractRutaAction;\r\n import org.apache.uima.ruta.action.AddAction;\r\n+import org.apache.uima.ruta.action.AddFilterTypeAction;\r\n+import org.apache.uima.ruta.action.AddRetainTypeAction;\r\n import org.apache.uima.ruta.action.AssignAction;\r\n import org.apache.uima.ruta.action.CallAction;\r\n import org.apache.uima.ruta.action.ClearAction;\r\n@@ -57,6 +59,8 @@\n import org.apache.uima.ruta.action.MergeAction;\r\n import org.apache.uima.ruta.action.RemoveAction;\r\n import org.apache.uima.ruta.action.RemoveDuplicateAction;\r\n+import org.apache.uima.ruta.action.RemoveFilterTypeAction;\r\n+import org.apache.uima.ruta.action.RemoveRetainTypeAction;\r\n import org.apache.uima.ruta.action.ReplaceAction;\r\n import org.apache.uima.ruta.action.RetainTypeAction;\r\n import org.apache.uima.ruta.action.SetFeatureAction;\r\n@@ -102,6 +106,10 @@ public String verbalizeName(AbstractRutaAction action) {\n       return \"FILL\";\r\n     } else if (action instanceof FilterTypeAction) {\r\n       return \"FILTERTYPE\";\r\n+    } else if (action instanceof AddFilterTypeAction) {\r\n+      return \"ADDFILTERTYPE\";\r\n+    } else if (action instanceof RemoveFilterTypeAction) {\r\n+      return \"REMOVEFILTERTYPE\";\r\n     } else if (action instanceof LogAction) {\r\n       return \"LOG\";\r\n     } else if (action instanceof MarkOnceAction) {\r\n@@ -124,6 +132,10 @@ public String verbalizeName(AbstractRutaAction action) {\n       return \"REPLACE\";\r\n     } else if (action instanceof RetainTypeAction) {\r\n       return \"RETAINTYPE\";\r\n+    } else if (action instanceof AddRetainTypeAction) {\r\n+      return \"ADDRETAINTYPE\";\r\n+    } else if (action instanceof RemoveRetainTypeAction) {\r\n+      return \"REMOVERETAINTYPE\";\r\n     } else if (action instanceof SetFeatureAction) {\r\n       String name = \"SETFEATURE\";\r\n       return name;\r\n@@ -268,6 +280,12 @@ public String verbalize(AbstractRutaAction action) {\n       FilterTypeAction a = (FilterTypeAction) action;\r\n       return a.getList().isEmpty() ? \"FILTERTYPE\" : \"FILTERTYPE(\"\r\n               + verbalizer.verbalizeExpressionList(a.getList()) + \")\";\r\n+    } else if (action instanceof AddFilterTypeAction) {\r\n+      AddFilterTypeAction a = (AddFilterTypeAction) action;\r\n+      return name + verbalizer.verbalizeExpressionList(a.getList()) + \")\";\r\n+    } else if (action instanceof RemoveFilterTypeAction) {\r\n+      RemoveFilterTypeAction a = (RemoveFilterTypeAction) action;\r\n+      return name + verbalizer.verbalizeExpressionList(a.getList()) + \")\";\r\n     } else if (action instanceof LogAction) {\r\n       LogAction a = (LogAction) action;\r\n       return name + verbalizer.verbalize(a.getText()) + \", \" + a.getLevel() + \")\";\r\n@@ -333,6 +351,12 @@ public String verbalize(AbstractRutaAction action) {\n       RetainTypeAction a = (RetainTypeAction) action;\r\n       return a.getList().isEmpty() ? \"RETAINTYPE\" : \"RETAINTYPE(\"\r\n               + verbalizer.verbalizeExpressionList(a.getList()) + \")\";\r\n+    } else if (action instanceof AddRetainTypeAction) {\r\n+      AddRetainTypeAction a = (AddRetainTypeAction) action;\r\n+      return name + verbalizer.verbalizeExpressionList(a.getList()) + \")\";\r\n+    } else if (action instanceof RemoveRetainTypeAction) {\r\n+      RemoveRetainTypeAction a = (RemoveRetainTypeAction) action;\r\n+      return name + verbalizer.verbalizeExpressionList(a.getList()) + \")\";\r\n     } else if (action instanceof SetFeatureAction) {\r\n       SetFeatureAction a = (SetFeatureAction) action;\r\n       String e1 = verbalizer.verbalize(a.getFeatureStringExpression());\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/2f9b208c335f5cadda3b9345218d3a460c809e2c/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ActionVerbalizer.java",
                "sha": "c7727bfd3e30cbc6441f5362f8a7b6e63cf6d7de",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/uima-ruta/blob/2f9b208c335f5cadda3b9345218d3a460c809e2c/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/VerbalizerUtils.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/VerbalizerUtils.java?ref=2f9b208c335f5cadda3b9345218d3a460c809e2c",
                "deletions": 0,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/verbalize/VerbalizerUtils.java",
                "patch": "@@ -61,6 +61,9 @@ public String verbalizeTypeList(List<Type> list) {\n   }\r\n \r\n   public String verbalizeExpressionList(List<? extends IRutaExpression> list) {\r\n+    if(list == null) {\r\n+      return \"\";\r\n+    }\r\n     StringBuilder result = new StringBuilder();\r\n     Iterator<? extends IRutaExpression> it = list.iterator();\r\n     while (it.hasNext()) {\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/2f9b208c335f5cadda3b9345218d3a460c809e2c/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/VerbalizerUtils.java",
                "sha": "00ff6253967fc6072f6545af8948a23bb659821f",
                "status": "modified"
            }
        ],
        "message": "UIMA-4976\n- avoid npe for empty macros\n- add verbalization of add/remove filterings\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1748728 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/uima-ruta/commit/1db3a7e20a007e7e6f3d4b18594522aa5d6a9674",
        "patched_files": [
            "ActionVerbalizer.java"
        ],
        "repo": "uima-ruta",
        "unit_tests": [
            "ActionVerbalizerTest.java"
        ]
    },
    "uima-ruta_3e65ad1": {
        "bug_id": "uima-ruta_3e65ad1",
        "commit": "https://github.com/apache/uima-ruta/commit/3e65ad16fef22ad3576add8068145b51d29a5f27",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/uima-ruta/blob/3e65ad16fef22ad3576add8068145b51d29a5f27/ruta-core/src/main/java/org/apache/uima/ruta/action/GatherAction.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/action/GatherAction.java?ref=3e65ad16fef22ad3576add8068145b51d29a5f27",
                "deletions": 4,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/action/GatherAction.java",
                "patch": "@@ -59,8 +59,8 @@\n \r\n   private List<INumberExpression> indexes;\r\n \r\n-  public GatherAction(TypeExpression structureType, Map<IStringExpression, IRutaExpression> features,\r\n-          List<INumberExpression> indexes) {\r\n+  public GatherAction(TypeExpression structureType,\r\n+          Map<IStringExpression, IRutaExpression> features, List<INumberExpression> indexes) {\r\n     super();\r\n     this.structureType = structureType;\r\n     this.features = features == null ? new HashMap<IStringExpression, IRutaExpression>() : features;\r\n@@ -141,7 +141,8 @@ private void gatherFeatures(TOP structure, Map<IStringExpression, IRutaExpressio\n               // search for\r\n               Collection<AnnotationFS> beginAnchors = stream.getBeginAnchor(fs.getBegin())\r\n                       .getBeginAnchors(range);\r\n-              Collection<AnnotationFS> endAnchors = stream.getEndAnchor(fs.getEnd()).getEndAnchors(range);\r\n+              Collection<AnnotationFS> endAnchors = stream.getEndAnchor(fs.getEnd()).getEndAnchors(\r\n+                      range);\r\n               @SuppressWarnings(\"unchecked\")\r\n               Collection<AnnotationFS> intersection = CollectionUtils.intersection(beginAnchors,\r\n                       endAnchors);\r\n@@ -197,7 +198,9 @@ private void gatherFeatures(TOP structure, Map<IStringExpression, IRutaExpressio\n       RuleElement ruleElement = elements.get(eachInt - 1);\r\n       List<List<RuleElementMatch>> matchInfo = match.getMatchInfo(ruleElement);\r\n       for (List<RuleElementMatch> list : matchInfo) {\r\n-        result.addAll(list);\r\n+        if (list != null) {\r\n+          result.addAll(list);\r\n+        }\r\n       }\r\n     }\r\n     return result;\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/3e65ad16fef22ad3576add8068145b51d29a5f27/ruta-core/src/main/java/org/apache/uima/ruta/action/GatherAction.java",
                "sha": "5f55a317924c267aee66b9a5914904119100f5b2",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/uima-ruta/blob/3e65ad16fef22ad3576add8068145b51d29a5f27/ruta-core/src/main/java/org/apache/uima/ruta/rule/RuleMatch.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/rule/RuleMatch.java?ref=3e65ad16fef22ad3576add8068145b51d29a5f27",
                "deletions": 7,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/rule/RuleMatch.java",
                "patch": "@@ -68,10 +68,11 @@ public boolean matchedCompletely() {\n     return getMatchedAnnotations(element.getSelfIndexList(), element.getContainer());\r\n   }\r\n \r\n-  public AnnotationFS getLastMatchedAnnotation(RuleElement element, boolean direction, AnnotationFS annotation, RutaBlock parent, RutaStream stream) {\r\n+  public AnnotationFS getLastMatchedAnnotation(RuleElement element, boolean direction,\r\n+          AnnotationFS annotation, RutaBlock parent, RutaStream stream) {\r\n     List<AnnotationFS> matchedAnnotations = getMatchedAnnotationsOf(element);\r\n     if (matchedAnnotations.isEmpty()) {\r\n-      if(element.getQuantifier().isOptional(parent, stream)) {\r\n+      if (element.getQuantifier().isOptional(parent, stream)) {\r\n         return annotation;\r\n       } else {\r\n         return null;\r\n@@ -179,16 +180,16 @@ private AnnotationFS getFirstNormal(List<AnnotationFS> textsMatched) {\n     // hotfix for invisible dummy matches\r\n     int pointer = 0;\r\n     AnnotationFS annotationFS = null;\r\n-    \r\n-    if(textsMatched.size() == 0) {\r\n+\r\n+    if (textsMatched.size() == 0) {\r\n       return null;\r\n-    } else if(textsMatched.size() ==1) {\r\n+    } else if (textsMatched.size() == 1) {\r\n       AnnotationFS fs = textsMatched.get(0);\r\n-      if(fs.getType().getName().equals(RutaEngine.OPTIONAL_TYPE)) {\r\n+      if (fs.getType().getName().equals(RutaEngine.OPTIONAL_TYPE)) {\r\n         return null;\r\n       }\r\n     }\r\n-    \r\n+\r\n     while (pointer < textsMatched.size() && (annotationFS = textsMatched.get(pointer)) != null\r\n             && annotationFS.getType().getName().equals(RutaEngine.OPTIONAL_TYPE)) {\r\n       pointer++;\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/3e65ad16fef22ad3576add8068145b51d29a5f27/ruta-core/src/main/java/org/apache/uima/ruta/rule/RuleMatch.java",
                "sha": "2829e666751d5f94033fdd2f01fefb156a058840",
                "status": "modified"
            },
            {
                "additions": 58,
                "blob_url": "https://github.com/apache/uima-ruta/blob/3e65ad16fef22ad3576add8068145b51d29a5f27/ruta-core/src/test/java/org/apache/uima/ruta/action/GatherTest.java",
                "changes": 64,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/test/java/org/apache/uima/ruta/action/GatherTest.java?ref=3e65ad16fef22ad3576add8068145b51d29a5f27",
                "deletions": 6,
                "filename": "ruta-core/src/test/java/org/apache/uima/ruta/action/GatherTest.java",
                "patch": "@@ -32,6 +32,7 @@\n import org.apache.uima.cas.Type;\r\n import org.apache.uima.cas.text.AnnotationFS;\r\n import org.apache.uima.cas.text.AnnotationIndex;\r\n+import org.apache.uima.ruta.engine.Ruta;\r\n import org.apache.uima.ruta.engine.RutaEngine;\r\n import org.apache.uima.ruta.engine.RutaTestUtils;\r\n import org.apache.uima.ruta.engine.RutaTestUtils.TestFeature;\r\n@@ -43,23 +44,24 @@\n   public void test() {\r\n     String name = this.getClass().getSimpleName();\r\n     String namespace = this.getClass().getPackage().getName().replaceAll(\"\\\\.\", \"/\");\r\n-    \r\n+\r\n     Map<String, String> complexTypes = new TreeMap<String, String>();\r\n     String typeName = \"org.apache.uima.C\";\r\n     complexTypes.put(typeName, \"uima.tcas.Annotation\");\r\n-    \r\n+\r\n     Map<String, List<TestFeature>> features = new TreeMap<String, List<TestFeature>>();\r\n     List<TestFeature> list = new ArrayList<RutaTestUtils.TestFeature>();\r\n     features.put(typeName, list);\r\n     String fn1 = \"a\";\r\n     list.add(new TestFeature(fn1, \"\", \"uima.tcas.Annotation\"));\r\n     String fn2 = \"b\";\r\n     list.add(new TestFeature(fn2, \"\", \"uima.tcas.Annotation\"));\r\n-    \r\n+\r\n     CAS cas = null;\r\n     try {\r\n-      cas = RutaTestUtils.process(namespace + \"/\" + name + RutaEngine.SCRIPT_FILE_EXTENSION, namespace + \"/\" + name\r\n-              + \".txt\", 50, false, false, complexTypes, features, namespace + \"/\");\r\n+      cas = RutaTestUtils.process(namespace + \"/\" + name + RutaEngine.SCRIPT_FILE_EXTENSION,\r\n+              namespace + \"/\" + name + \".txt\", 50, false, false, complexTypes, features, namespace\r\n+                      + \"/\");\r\n     } catch (Exception e) {\r\n       e.printStackTrace();\r\n       assert (false);\r\n@@ -81,7 +83,57 @@ public void test() {\n     v2 = (AnnotationFS) next.getFeatureValue(f2);\r\n     assertEquals(\"A\", v1.getCoveredText());\r\n     assertEquals(\"B\", v2.getCoveredText());\r\n-   \r\n+\r\n     cas.release();\r\n   }\r\n+\r\n+  @Test\r\n+  public void testOptionalMatch() {\r\n+    String document = \"A X C\";\r\n+    String script = \"\";\r\n+    script += \"W{REGEXP(\\\"A\\\")->MARK(T1)};\";\r\n+    script += \"W{REGEXP(\\\"B\\\")->MARK(T2)};\";\r\n+    script += \"T1 T2?{-> GATHER(C, 1, 2, \\\"a\\\" = 1, \\\"b\\\" = 2)};\";\r\n+    Map<String, String> complexTypes = new TreeMap<String, String>();\r\n+    String typeName = \"org.apache.uima.C\";\r\n+    complexTypes.put(typeName, \"uima.tcas.Annotation\");\r\n+\r\n+    Map<String, List<TestFeature>> features = new TreeMap<String, List<TestFeature>>();\r\n+    List<TestFeature> list = new ArrayList<RutaTestUtils.TestFeature>();\r\n+    features.put(typeName, list);\r\n+    String fn1 = \"a\";\r\n+    list.add(new TestFeature(fn1, \"\", \"uima.tcas.Annotation\"));\r\n+    String fn2 = \"b\";\r\n+    list.add(new TestFeature(fn2, \"\", \"uima.tcas.Annotation\"));\r\n+    CAS cas = null;\r\n+    try {\r\n+      cas = RutaTestUtils.getCAS(document, complexTypes, features);\r\n+      Ruta.apply(cas, script);\r\n+    } catch (Exception e) {\r\n+      e.printStackTrace();\r\n+    }\r\n+\r\n+    Type t = null;\r\n+    AnnotationIndex<AnnotationFS> ai = null;\r\n+    FSIterator<AnnotationFS> iterator = null;\r\n+    AnnotationFS next = null;\r\n+    AnnotationFS v1 = null;\r\n+    AnnotationFS v2 = null;\r\n+    t = cas.getTypeSystem().getType(typeName);\r\n+    Feature f1 = t.getFeatureByBaseName(fn1);\r\n+    Feature f2 = t.getFeatureByBaseName(fn2);\r\n+    ai = cas.getAnnotationIndex(t);\r\n+    assertEquals(1, ai.size());\r\n+    iterator = ai.iterator();\r\n+    next = iterator.next();\r\n+    v1 = (AnnotationFS) next.getFeatureValue(f1);\r\n+    v2 = (AnnotationFS) next.getFeatureValue(f2);\r\n+    assertEquals(\"A\", v1.getCoveredText());\r\n+    assertEquals(null, v2);\r\n+\r\n+    if (cas != null) {\r\n+      cas.release();\r\n+    }\r\n+\r\n+  }\r\n }\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/3e65ad16fef22ad3576add8068145b51d29a5f27/ruta-core/src/test/java/org/apache/uima/ruta/action/GatherTest.java",
                "sha": "6b55e04e50720515eca10846918ed3045d5226ea",
                "status": "modified"
            }
        ],
        "message": "UIMA-4233\n- fixed NPE\n- added test\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1658807 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/uima-ruta/commit/60ee37564eb67c7b37e4e4abffe520d523832712",
        "patched_files": [
            "RuleMatch.java",
            "GatherAction.java"
        ],
        "repo": "uima-ruta",
        "unit_tests": [
            "GatherTest.java"
        ]
    },
    "uima-ruta_79c6b32": {
        "bug_id": "uima-ruta_79c6b32",
        "commit": "https://github.com/apache/uima-ruta/commit/79c6b323d9beeb30d8219ec9f9456365ab2fd582",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/uima-ruta/blob/79c6b323d9beeb30d8219ec9f9456365ab2fd582/ruta-core/src/main/java/org/apache/uima/ruta/expression/type/TypeListVariableExpression.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/expression/type/TypeListVariableExpression.java?ref=79c6b323d9beeb30d8219ec9f9456365ab2fd582",
                "deletions": 1,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/expression/type/TypeListVariableExpression.java",
                "patch": "@@ -48,7 +48,12 @@ public TypeListVariableExpression(String var) {\n       } else if (each instanceof Type) {\r\n         result.add((Type) each);\r\n       } else if(each instanceof String) {\r\n-        result.add(parent.getEnvironment().getType((String) each));\r\n+        Type type = parent.getEnvironment().getType((String) each);\r\n+        if(type != null) {\r\n+          result.add(type);\r\n+        } else {\r\n+          throw new IllegalArgumentException(\"Not able to resolve type: \" + each);\r\n+        }\r\n       }\r\n     }\r\n     return result;\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/79c6b323d9beeb30d8219ec9f9456365ab2fd582/ruta-core/src/main/java/org/apache/uima/ruta/expression/type/TypeListVariableExpression.java",
                "sha": "3e6e20158f7bd2970f2113c98109ae08b0bfbd68",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/uima-ruta/blob/79c6b323d9beeb30d8219ec9f9456365ab2fd582/ruta-core/src/test/java/org/apache/uima/ruta/engine/ParamVarTest.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/test/java/org/apache/uima/ruta/engine/ParamVarTest.java?ref=79c6b323d9beeb30d8219ec9f9456365ab2fd582",
                "deletions": 1,
                "filename": "ruta-core/src/test/java/org/apache/uima/ruta/engine/ParamVarTest.java",
                "patch": "@@ -22,6 +22,7 @@\n import java.util.HashMap;\n import java.util.Map;\n \n+import org.apache.uima.analysis_engine.AnalysisEngineProcessException;\n import org.apache.uima.cas.CAS;\n import org.apache.uima.ruta.type.CW;\n import org.apache.uima.ruta.type.SW;\n@@ -88,10 +89,35 @@ public void testMultiValue() throws Exception {\n         SW.class.getName() + RutaEngine.SEPARATOR_VAR_VALUES + CW.class.getName() });\n \n     CAS cas = RutaTestUtils.getCAS(document);\n-      Ruta.apply(cas, script, params);\n+    Ruta.apply(cas, script, params);\n \n     RutaTestUtils.assertAnnotationsEquals(cas, 1, 2, \"Some\", \"text\");\n     \n     cas.release();\n   }\n+  \n+  @Test(expected = AnalysisEngineProcessException.class)\n+  public void testWithStrictImport() throws Exception {\n+    String document = \"Some text.\";\n+    String script = \"\";\n+    script += \"TYPE t1;\";\n+    script += \"TYPE t2;\";\n+    script += \"TYPELIST tl;\";\n+    script += \"CW{ -> t1};\";\n+    script += \"SW{ -> t2};\";\n+    script += \"ANY{PARTOF(tl) -> T3};\";\n+    Map<String, Object> params = new HashMap<String, Object>();\n+    params.put(RutaEngine.PARAM_STRICT_IMPORTS, true);\n+    params.put(RutaEngine.PARAM_VAR_NAMES, new String[] { \"t1\", \"t2\", \"tl\" });\n+    params.put(RutaEngine.PARAM_VAR_VALUES, new String[] {\"org.apache.uima.T1\", \"org.apache.uima.T2\", \n+        \"org.apache.uima.T1,org.apache.uima.T2\"  });\n+\n+    CAS cas = RutaTestUtils.getCAS(document);\n+    Ruta.apply(cas, script, params);\n+\n+    RutaTestUtils.assertAnnotationsEquals(cas, 3, 2, \"Some\", \"text\");\n+    \n+    cas.release();\n+  }\n+  \n }",
                "raw_url": "https://github.com/apache/uima-ruta/raw/79c6b323d9beeb30d8219ec9f9456365ab2fd582/ruta-core/src/test/java/org/apache/uima/ruta/engine/ParamVarTest.java",
                "sha": "401c18e6835ad4a7a5d44484e441c22b3b00c98e",
                "status": "modified"
            }
        ],
        "message": "UIMA-5467 - IAE instead of NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1801047 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/uima-ruta/commit/03ec5a46ba624eee266b344901f26408e1425138",
        "patched_files": [
            "TypeListVariableExpression.java"
        ],
        "repo": "uima-ruta",
        "unit_tests": [
            "ParamVarTest.java"
        ]
    },
    "uima-ruta_7bb769c": {
        "bug_id": "uima-ruta_7bb769c",
        "commit": "https://github.com/apache/uima-ruta/commit/7bb769cdbab112f3752a1f9389c3d78b299c907d",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/uima-ruta/blob/7bb769cdbab112f3752a1f9389c3d78b299c907d/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/RutaVerbalizer.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/RutaVerbalizer.java?ref=7bb769cdbab112f3752a1f9389c3d78b299c907d",
                "deletions": 14,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/verbalize/RutaVerbalizer.java",
                "patch": "@@ -67,21 +67,24 @@ public void addExternalVerbalizers(IRutaExtension verbalizer) {\n   }\r\n \r\n   public String verbalize(Object element) {\r\n-    if (externalVerbalizers.keySet().contains(element.getClass()) && element instanceof RutaElement) {\r\n-      return externalVerbalizers.get(element.getClass()).verbalize((RutaElement) element, this);\r\n-    } else if (element instanceof AbstractRutaAction) {\r\n-      return actionVerbalizer.verbalize((AbstractRutaAction) element);\r\n-    } else if (element instanceof AbstractRutaCondition) {\r\n-      return conditionVerbalizer.verbalize((AbstractRutaCondition) element);\r\n-    } else if (element instanceof IRutaExpression) {\r\n-      return expressionVerbalizer.verbalize((RutaExpression) element);\r\n-    } else if (element instanceof RutaBlock) {\r\n-      return verbalize((RutaBlock) element, false);\r\n-    } else if (element instanceof RutaElement) {\r\n-      return scriptVerbalizer.verbalize((RutaElement) element);\r\n-    } else {\r\n-      return element.getClass().getSimpleName();\r\n+    if (element != null) {\r\n+      if (externalVerbalizers.keySet().contains(element.getClass()) && element instanceof RutaElement) {\r\n+        return externalVerbalizers.get(element.getClass()).verbalize((RutaElement) element, this);\r\n+      } else if (element instanceof AbstractRutaAction) {\r\n+        return actionVerbalizer.verbalize((AbstractRutaAction) element);\r\n+      } else if (element instanceof AbstractRutaCondition) {\r\n+        return conditionVerbalizer.verbalize((AbstractRutaCondition) element);\r\n+      } else if (element instanceof IRutaExpression) {\r\n+        return expressionVerbalizer.verbalize((RutaExpression) element);\r\n+      } else if (element instanceof RutaBlock) {\r\n+        return verbalize((RutaBlock) element, false);\r\n+      } else if (element instanceof RutaElement) {\r\n+        return scriptVerbalizer.verbalize((RutaElement) element);\r\n+      } else {\r\n+        return element.getClass().getSimpleName();\r\n+      }\r\n     }\r\n+    return \"\";\r\n   }\r\n \r\n   public String verbalizeName(RutaElement element) {\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/7bb769cdbab112f3752a1f9389c3d78b299c907d/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/RutaVerbalizer.java",
                "sha": "86d23cacb99ade94ddb8aad2af7d18c575096826",
                "status": "modified"
            }
        ],
        "message": "HD-6029: added NPE check in verbalization\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1859298 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/uima-ruta/commit/7da5d3adfd1e485e5bf49a6998b4c025acc62c2d",
        "patched_files": [
            "RutaVerbalizer.java"
        ],
        "repo": "uima-ruta",
        "unit_tests": [
            "RutaVerbalizerTest.java"
        ]
    },
    "uima-ruta_9a24355": {
        "bug_id": "uima-ruta_9a24355",
        "commit": "https://github.com/apache/uima-ruta/commit/9a24355d4df677524647f56f856f125734c9190c",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/uima-ruta/blob/9a24355d4df677524647f56f856f125734c9190c/ruta-core/src/main/java/org/apache/uima/ruta/rule/RegExpRule.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/rule/RegExpRule.java?ref=9a24355d4df677524647f56f856f125734c9190c",
                "deletions": 1,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/rule/RegExpRule.java",
                "patch": "@@ -98,7 +98,8 @@ public ScriptApply apply(RutaStream stream, InferenceCrowd crowd) {\n           ruleMatch.addMatched(0, afs);\r\n         }\r\n       }\r\n-      if (!ruleMatch.getMatchedAnnotationsOfRoot().isEmpty()) {\r\n+      List<AnnotationFS> matchedAnnotationsOfRoot = ruleMatch.getMatchedAnnotationsOfRoot();\r\n+      if (matchedAnnotationsOfRoot != null && !matchedAnnotationsOfRoot.isEmpty()) {\r\n         ruleApply.add(ruleMatch);\r\n       }\r\n     }\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/9a24355d4df677524647f56f856f125734c9190c/ruta-core/src/main/java/org/apache/uima/ruta/rule/RegExpRule.java",
                "sha": "eed68e2406540cbcfe8ca1cfa114241cb2a1c57f",
                "status": "modified"
            }
        ],
        "message": "UIMA-3051\n- fixed NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/ruta/trunk@1500266 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/uima-ruta/commit/217ac69ef38aeb8125b83b997ab70c173a85fc35",
        "patched_files": [
            "RegExpRule.java"
        ],
        "repo": "uima-ruta",
        "unit_tests": [
            "RegExpRuleTest.java"
        ]
    },
    "uima-ruta_c957c02": {
        "bug_id": "uima-ruta_c957c02",
        "commit": "https://github.com/apache/uima-ruta/commit/c957c02b87120262cdc7efb576a2b91591797c89",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/uima-ruta/blob/c957c02b87120262cdc7efb576a2b91591797c89/ruta-core/src/main/java/org/apache/uima/ruta/action/ActionFactory.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/action/ActionFactory.java?ref=c957c02b87120262cdc7efb576a2b91591797c89",
                "deletions": 1,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/action/ActionFactory.java",
                "patch": "@@ -297,9 +297,13 @@ public static AbstractRutaAction createMacroAction(Token id, List<IRutaExpressio\n     if (macroActionDefinition == null) {\r\n       return null;\r\n     }\r\n+    int argSize = 0;\r\n+    if(args != null) {\r\n+      argSize = args.size();\r\n+    }\r\n     Map<String, String> definition = macroActionDefinition.getKey();\r\n     List<AbstractRutaAction> actions = macroActionDefinition.getValue();\r\n-    if (definition.size() != args.size()) {\r\n+    if (definition.size() != argSize) {\r\n       throw new RutaParseRuntimeException(\"Arguments of macro action '\" + name\r\n               + \"' do not match its definition: \" + definition.values());\r\n     }\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/c957c02b87120262cdc7efb576a2b91591797c89/ruta-core/src/main/java/org/apache/uima/ruta/action/ActionFactory.java",
                "sha": "29b210d380c66fe6a1e15b8625f2fa80ccfc6bc2",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/uima-ruta/blob/c957c02b87120262cdc7efb576a2b91591797c89/ruta-core/src/main/java/org/apache/uima/ruta/condition/ConditionFactory.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/condition/ConditionFactory.java?ref=c957c02b87120262cdc7efb576a2b91591797c89",
                "deletions": 5,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/condition/ConditionFactory.java",
                "patch": "@@ -112,12 +112,13 @@ public static AbstractRutaCondition createConditionContains(List<IRutaExpression\n       sb.append(\"(\");\r\n       sb.append(each.getClass().getSimpleName());\r\n       sb.append(\")\");\r\n-      if(iterator.hasNext()) {\r\n+      if (iterator.hasNext()) {\r\n         sb.append(\", \");\r\n       }\r\n     }\r\n-    \r\n-    throw new RutaParseRuntimeException(\"The condition CONTAINS does not support the following arguments: \" + sb.toString());\r\n+\r\n+    throw new RutaParseRuntimeException(\r\n+            \"The condition CONTAINS does not support the following arguments: \" + sb.toString());\r\n   }\r\n \r\n   public static AbstractRutaCondition createConditionContains(ITypeExpression typeExpr,\r\n@@ -325,16 +326,21 @@ public static AbstractRutaCondition createImplicitCondition(IRutaExpression expr\n     return new ImplicitCondition(expr);\r\n   }\r\n \r\n-  public static AbstractRutaCondition createMacroCondition(Token id, List<IRutaExpression> args, RutaBlock env) {\r\n+  public static AbstractRutaCondition createMacroCondition(Token id, List<IRutaExpression> args,\r\n+          RutaBlock env) {\r\n     String name = id.getText();\r\n     Pair<Map<String, String>, List<AbstractRutaCondition>> macroConditionDefinition = env\r\n             .getEnvironment().getMacroCondition(name);\r\n     if (macroConditionDefinition == null) {\r\n       return null;\r\n     }\r\n+    int argSize = 0;\r\n+    if(args != null) {\r\n+      argSize = args.size();\r\n+    }\r\n     Map<String, String> definition = macroConditionDefinition.getKey();\r\n     List<AbstractRutaCondition> conditions = macroConditionDefinition.getValue();\r\n-    if (definition.size() != args.size()) {\r\n+    if (definition.size() != argSize) {\r\n       throw new RutaParseRuntimeException(\"Arguments of macro action '\" + name\r\n               + \"' do not match its definition: \" + definition.values());\r\n     }\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/c957c02b87120262cdc7efb576a2b91591797c89/ruta-core/src/main/java/org/apache/uima/ruta/condition/ConditionFactory.java",
                "sha": "affa4d1ae4f62a51230331f925bd8f93261675ff",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/uima-ruta/blob/c957c02b87120262cdc7efb576a2b91591797c89/ruta-core/src/test/java/org/apache/uima/ruta/action/MacroActionTest.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/test/java/org/apache/uima/ruta/action/MacroActionTest.java?ref=c957c02b87120262cdc7efb576a2b91591797c89",
                "deletions": 0,
                "filename": "ruta-core/src/test/java/org/apache/uima/ruta/action/MacroActionTest.java",
                "patch": "@@ -36,6 +36,27 @@ public void test() {\n     script += \"Document{(j>0)->T2};\\n\";\n \n \n+    CAS cas = null;\n+    try {\n+      cas = RutaTestUtils.getCAS(document);\n+      Ruta.apply(cas, script);\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+\n+    RutaTestUtils.assertAnnotationsEquals(cas, 1, 1, \"Test\");\n+    RutaTestUtils.assertAnnotationsEquals(cas, 2, 1, \"Test\");\n+\n+    cas.release();\n+  }\n+  \n+  @Test\n+  public void testNoArgs() {\n+    String document = \"Test.\";\n+    String script = \"INT j;\\n\";\n+    script += \"ACTION macro() = MARK(T1), MARK(T2);\\n\";\n+    script += \"W{-> macro()};\\n\";\n+\n     CAS cas = null;\n     try {\n       cas = RutaTestUtils.getCAS(document);",
                "raw_url": "https://github.com/apache/uima-ruta/raw/c957c02b87120262cdc7efb576a2b91591797c89/ruta-core/src/test/java/org/apache/uima/ruta/action/MacroActionTest.java",
                "sha": "417fd398b7cc6b336355555d8e97d555acd5c323",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/uima-ruta/blob/c957c02b87120262cdc7efb576a2b91591797c89/ruta-core/src/test/java/org/apache/uima/ruta/condition/MacroConditionTest.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/test/java/org/apache/uima/ruta/condition/MacroConditionTest.java?ref=c957c02b87120262cdc7efb576a2b91591797c89",
                "deletions": 0,
                "filename": "ruta-core/src/test/java/org/apache/uima/ruta/condition/MacroConditionTest.java",
                "patch": "@@ -51,4 +51,24 @@ public void test() {\n \n     cas.release();\n   }\n+  \n+  @Test\n+  public void testNoArgs() {\n+    String document = \"This is a Test.\";\n+    String script = \"INT j;\\n\";\n+    script += \"CONDITION macro() = OR(IS(CW),IS(PERIOD));\\n\";\n+    script += \"ANY{macro()-> T1};\\n\";\n+\n+    CAS cas = null;\n+    try {\n+      cas = RutaTestUtils.getCAS(document);\n+      Ruta.apply(cas, script);\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+\n+    RutaTestUtils.assertAnnotationsEquals(cas, 1, 3, \"This\", \"Test\", \".\");\n+\n+    cas.release();\n+  }\n }",
                "raw_url": "https://github.com/apache/uima-ruta/raw/c957c02b87120262cdc7efb576a2b91591797c89/ruta-core/src/test/java/org/apache/uima/ruta/condition/MacroConditionTest.java",
                "sha": "18d79ea9fd7553a8f5b552f3cd7382978edcc483",
                "status": "modified"
            }
        ],
        "message": "UIMA-4842 - avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1734804 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/uima-ruta/commit/c8239b54f33c7d3a1016e32929d01add2459d675",
        "patched_files": [
            "ConditionFactory.java",
            "ActionFactory.java",
            "MacroCondition.java",
            "MacroAction.java"
        ],
        "repo": "uima-ruta",
        "unit_tests": [
            "MacroActionTest.java",
            "MacroConditionTest.java"
        ]
    },
    "uima-ruta_fe67e50": {
        "bug_id": "uima-ruta_fe67e50",
        "commit": "https://github.com/apache/uima-ruta/commit/fe67e50daa78ae2fb56ebeaa98a715501fb636d3",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/uima-ruta/blob/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/action/GetFeatureAction.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/action/GetFeatureAction.java?ref=fe67e50daa78ae2fb56ebeaa98a715501fb636d3",
                "deletions": 1,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/action/GetFeatureAction.java",
                "patch": "@@ -33,6 +33,7 @@\n import org.apache.uima.ruta.rule.MatchContext;\r\n import org.apache.uima.ruta.rule.RuleElement;\r\n import org.apache.uima.ruta.rule.RuleMatch;\r\n+import org.apache.uima.ruta.rule.RutaMatcher;\r\n import org.apache.uima.ruta.rule.RutaRuleElement;\r\n import org.apache.uima.ruta.visitor.InferenceCrowd;\r\n \r\n@@ -57,7 +58,10 @@ public void execute(MatchContext context, RutaStream stream, InferenceCrowd crow\n \r\n     Type type = null;\r\n     if (element instanceof RutaRuleElement) {\r\n-      type = ((RutaRuleElement) element).getMatcher().getType(parent, stream);\r\n+      RutaMatcher matcher = ((RutaRuleElement) element).getMatcher();\r\n+      if (matcher != null) {\r\n+        type = matcher.getType(parent, stream);\r\n+      }\r\n     }\r\n     if (type == null) {\r\n       return;\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/action/GetFeatureAction.java",
                "sha": "0541a035947c85a0f2e8835373bced24cbe00689",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/uima-ruta/blob/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/block/ForEachBlock.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/block/ForEachBlock.java?ref=fe67e50daa78ae2fb56ebeaa98a715501fb636d3",
                "deletions": 0,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/block/ForEachBlock.java",
                "patch": "@@ -122,6 +122,9 @@ private void setRuleElementAnchor() {\n   private boolean setRuleElementAnchorRecursively(RuleElement ruleElement) {\n     if (ruleElement instanceof RutaRuleElement) {\n       RutaMatcher matcher = ((RutaRuleElement) ruleElement).getMatcher();\n+      if (matcher == null) {\n+        return false;\n+      }\n       IRutaExpression expression = matcher.getExpression();\n       if (expression instanceof AnnotationTypeExpression) {\n         MatchReference reference = ((AnnotationTypeExpression) expression).getReference();",
                "raw_url": "https://github.com/apache/uima-ruta/raw/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/block/ForEachBlock.java",
                "sha": "a1353ef97f8ea3fab3ff9de3c268e4e80caa4204",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/uima-ruta/blob/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/block/RutaScriptBlock.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/block/RutaScriptBlock.java?ref=fe67e50daa78ae2fb56ebeaa98a715501fb636d3",
                "deletions": 2,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/block/RutaScriptBlock.java",
                "patch": "@@ -30,6 +30,7 @@\n import org.apache.uima.ruta.rule.AbstractRuleMatch;\r\n import org.apache.uima.ruta.rule.RuleApply;\r\n import org.apache.uima.ruta.rule.RuleMatch;\r\n+import org.apache.uima.ruta.rule.RutaMatcher;\r\n import org.apache.uima.ruta.rule.RutaRule;\r\n import org.apache.uima.ruta.rule.RutaRuleElement;\r\n import org.apache.uima.ruta.visitor.InferenceCrowd;\r\n@@ -59,8 +60,12 @@ public ScriptApply apply(RutaStream stream, InferenceCrowd crowd) {\n           continue;\r\n         }\r\n         // TODO refactor!!\r\n-        Type type = ((RutaRuleElement) rule.getRuleElements().get(0)).getMatcher()\r\n-                .getType(getParent() == null ? this : getParent(), stream);\r\n+        RutaMatcher matcher = ((RutaRuleElement) rule.getRuleElements().get(0)).getMatcher();\r\n+        if (matcher == null) {\r\n+          continue;\r\n+        }\r\n+\r\n+        Type type = matcher.getType(getParent() == null ? this : getParent(), stream);\r\n         RutaStream window = stream.getWindowStream(each, type);\r\n         for (RutaStatement element : getElements()) {\r\n           if (element != null) {\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/block/RutaScriptBlock.java",
                "sha": "9dc1f51ffb70420210e07659bf405dd4092ab88f",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/uima-ruta/blob/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/condition/PositionCondition.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/condition/PositionCondition.java?ref=fe67e50daa78ae2fb56ebeaa98a715501fb636d3",
                "deletions": 1,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/condition/PositionCondition.java",
                "patch": "@@ -32,6 +32,7 @@\n import org.apache.uima.ruta.rule.EvaluatedCondition;\r\n import org.apache.uima.ruta.rule.MatchContext;\r\n import org.apache.uima.ruta.rule.RuleElement;\r\n+import org.apache.uima.ruta.rule.RutaMatcher;\r\n import org.apache.uima.ruta.rule.RutaRuleElement;\r\n import org.apache.uima.ruta.type.RutaBasic;\r\n import org.apache.uima.ruta.visitor.InferenceCrowd;\r\n@@ -91,7 +92,10 @@ public EvaluatedCondition eval(MatchContext context, RutaStream stream, Inferenc\n     List<Type> targetTypes = new ArrayList<Type>();\r\n     if (element instanceof RutaRuleElement) {\r\n       RutaRuleElement re = (RutaRuleElement) element;\r\n-      targetTypes.add(re.getMatcher().getType(element.getParent(), stream));\r\n+      RutaMatcher matcher = re.getMatcher();\r\n+      if (matcher != null) {\r\n+        targetTypes.add(matcher.getType(element.getParent(), stream));\r\n+      }\r\n     } else {\r\n       targetTypes.add(annotation.getType());\r\n     }\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/condition/PositionCondition.java",
                "sha": "577309c883c05838f164be64ada4390b7c5d7e53",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/uima-ruta/blob/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/rule/WildCardRuleElement.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/rule/WildCardRuleElement.java?ref=fe67e50daa78ae2fb56ebeaa98a715501fb636d3",
                "deletions": 1,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/rule/WildCardRuleElement.java",
                "patch": "@@ -473,7 +473,7 @@ private ComposedRuleElementMatch getContainerMatchOfNextElement(\n           Type type = matcher.getType(parent, stream);\r\n           iterator = getIteratorOfType(after, type, annotation, stream);\r\n         }\r\n-      } else {\r\n+      } else if (matcher != null) {\r\n         // fallback\r\n         Type type = matcher.getType(parent, stream);\r\n         iterator = getIteratorOfType(after, type, annotation, stream);\r\n@@ -580,6 +580,9 @@ private ComposedRuleElementMatch getContainerMatchOfNextElement(\n           RutaStream stream, InferenceCrowd crowd) {\r\n     List<RuleMatch> result = new ArrayList<RuleMatch>();\r\n     RutaLiteralMatcher matcher = (RutaLiteralMatcher) nextElement.getMatcher();\r\n+    if (matcher == null) {\r\n+      return result;\r\n+    }\r\n     IStringExpression expression = matcher.getExpression();\r\n     MatchContext context = new MatchContext(this, ruleMatch, true);\r\n     String stringValue = expression.getStringValue(context, stream);\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/rule/WildCardRuleElement.java",
                "sha": "658aad357646300b1965d53fdc4fa6fd2da0efee",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/uima-ruta/blob/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ScriptVerbalizer.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ScriptVerbalizer.java?ref=fe67e50daa78ae2fb56ebeaa98a715501fb636d3",
                "deletions": 8,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ScriptVerbalizer.java",
                "patch": "@@ -156,14 +156,19 @@ public String verbalizeRuleElement(RuleElement re) {\n       RutaRuleElement tmre = (RutaRuleElement) re;\r\n       RutaMatcher matcher = tmre.getMatcher();\r\n       // action-only rule\r\n-      IRutaExpression expression = matcher.getExpression();\r\n-      boolean actionOnlyRule = expression == null;\r\n-      if (expression != null) {\r\n-        String verbalize = verbalizer.verbalize(expression);\r\n-        if (StringUtils.isBlank(verbalize)) {\r\n-          actionOnlyRule = true;\r\n-        } else {\r\n-          result.append(verbalize);\r\n+      boolean actionOnlyRule = false;\r\n+      if (matcher == null) {\r\n+        result.append(\"_\");\r\n+      } else {\r\n+        IRutaExpression expression = matcher.getExpression();\r\n+        actionOnlyRule = expression == null;\r\n+        if (expression != null) {\r\n+          String verbalize = verbalizer.verbalize(expression);\r\n+          if (StringUtils.isBlank(verbalize)) {\r\n+            actionOnlyRule = true;\r\n+          } else {\r\n+            result.append(verbalize);\r\n+          }\r\n         }\r\n       }\r\n       if (actionOnlyRule) {\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ScriptVerbalizer.java",
                "sha": "78a8e9863410e63178b7cf58730b974e9268915e",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/uima-ruta/blob/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/test/java/org/apache/uima/ruta/block/ForEachBlockTest.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/test/java/org/apache/uima/ruta/block/ForEachBlockTest.java?ref=fe67e50daa78ae2fb56ebeaa98a715501fb636d3",
                "deletions": 17,
                "filename": "ruta-core/src/test/java/org/apache/uima/ruta/block/ForEachBlockTest.java",
                "patch": "@@ -35,17 +35,12 @@\n   private String text = \"Some text 4 more text.\";\n \n   @Test\n-  public void testDefault() {\n+  public void testDefault() throws Exception {\n \n     String script = getForEachScript();\n \n-    CAS cas = null;\n-    try {\n-      cas = RutaTestUtils.getCAS(text);\n-      Ruta.apply(cas, script);\n-    } catch (Exception e) {\n-      e.printStackTrace();\n-    }\n+    CAS cas = RutaTestUtils.getCAS(text);\n+    Ruta.apply(cas, script);\n \n     RutaTestUtils.assertAnnotationsEquals(cas, 1, 1, \"4\");\n     RutaTestUtils.assertAnnotationsEquals(cas, 2, 1, \"4\");\n@@ -58,7 +53,6 @@ public void testDefault() {\n     RutaTestUtils.assertAnnotationsEquals(cas, 9, 1, \"Some\");\n     RutaTestUtils.assertAnnotationsEquals(cas, 10, 1, \"4\");\n \n-    cas.release();\n   }\n \n   @Test\n@@ -90,8 +84,6 @@ public void testPerformance() throws Exception {\n     long endForEach = System.currentTimeMillis();\n     System.out.println(\"FOREACH: \" + (endForEach - startForEach) + \"ms\");\n \n-    cas.release();\n-\n   }\n \n   private String getForEachScript() {\n@@ -128,7 +120,6 @@ public void testRigthToLeft() throws Exception {\n     Ruta.apply(cas, script);\n \n     RutaTestUtils.assertAnnotationsEquals(cas, 1, 2, \"2^3\", \"2\");\n-    cas.release();\n   }\n \n   @Test\n@@ -144,7 +135,6 @@ public void testEnforcedLeftToRigthInComposedWithDebbugging() throws Exception {\n     Ruta.apply(cas, script, parameters);\n \n     RutaTestUtils.assertAnnotationsEquals(cas, 1, 2, \"4\", \"2^3\");\n-    cas.release();\n   }\n \n   @Test\n@@ -161,7 +151,6 @@ public void testDirection() throws Exception {\n \n     RutaTestUtils.assertAnnotationsEquals(cas, 2, 3, \"text 4x2^3\", \"text 4x2\", \"text 4\");\n     RutaTestUtils.assertAnnotationsEquals(cas, 3, 1, \"text 4x2^3\");\n-    cas.release();\n   }\n \n   @Test\n@@ -175,7 +164,6 @@ public void testComposed() throws Exception {\n     Ruta.apply(cas, script);\n \n     RutaTestUtils.assertAnnotationsEquals(cas, 2, 1, \"4x2^3\");\n-    cas.release();\n   }\n \n   @Test\n@@ -189,7 +177,6 @@ public void testConditionMacro() throws Exception {\n     Ruta.apply(cas, script);\n \n     RutaTestUtils.assertAnnotationsEquals(cas, 1, 1, \"1\");\n-    cas.release();\n   }\n \n   @Test\n@@ -207,7 +194,19 @@ public void testWithContainingBlock() throws Exception {\n \n     RutaTestUtils.assertAnnotationsEquals(cas, 1, 0);\n     RutaTestUtils.assertAnnotationsEquals(cas, 2, 3, \"1\", \"22\", \"333\");\n-    cas.release();\n+  }\n+\n+  @Test\n+  public void testWithOptional() throws Exception {\n+    String script = \"\";\n+    script += \"FOREACH(num) NUM{} {\\n\";\n+    script += \"_{-PARTOF(W)} num{-> T1};\\n\";\n+    script += \"}\\n\";\n+\n+    CAS cas = RutaTestUtils.getCAS(\"1 22 333\");\n+    Ruta.apply(cas, script);\n+\n+    RutaTestUtils.assertAnnotationsEquals(cas, 1, 3, \"1\", \"22\", \"333\");\n   }\n \n }",
                "raw_url": "https://github.com/apache/uima-ruta/raw/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/test/java/org/apache/uima/ruta/block/ForEachBlockTest.java",
                "sha": "9468c9de5131e90a1be269f0c35a6b3e95b0c043",
                "status": "modified"
            }
        ],
        "message": "UIMA-6065: fix NPE for optional in FOREACH\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1861314 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/uima-ruta/commit/6229125321681e9a444c2a7d4c2ab6cb62bae365",
        "patched_files": [
            "GetFeatureAction.java",
            "ForEachBlock.java",
            "PositionCondition.java",
            "WildCardRuleElement.java",
            "RutaScriptBlock.java",
            "ScriptVerbalizer.java"
        ],
        "repo": "uima-ruta",
        "unit_tests": [
            "ForEachBlockTest.java",
            "RutaScriptBlockTest.java",
            "ScriptVerbalizerTest.java"
        ]
    },
    "uima-ruta_ffaf490": {
        "bug_id": "uima-ruta_ffaf490",
        "commit": "https://github.com/apache/uima-ruta/commit/ffaf490b6d5c6c0302865142d259d57d60bb8813",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/uima-ruta/blob/ffaf490b6d5c6c0302865142d259d57d60bb8813/ruta-core/src/main/java/org/apache/uima/ruta/resource/MultiTreeWordList.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/resource/MultiTreeWordList.java?ref=ffaf490b6d5c6c0302865142d259d57d60bb8813",
                "deletions": 0,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/resource/MultiTreeWordList.java",
                "patch": "@@ -99,6 +99,10 @@ public MultiTreeWordList(Resource... lists) throws IOException {\n     this.root = new MultiTextNode();\r\n     this.costMap = new EditDistanceCostMap();\r\n \r\n+    if (lists == null) {\r\n+      return;\r\n+    }\r\n+\r\n     for (Resource list : lists) {\r\n       // check if the resource is a directory\r\n       File directory = null;\r\n@@ -155,6 +159,11 @@ public MultiTreeWordList(InputStream stream, String name) throws IOException {\n   public MultiTreeWordList(String[] pathnames, File base) throws IOException {\r\n     this.root = new MultiTextNode();\r\n     this.costMap = new EditDistanceCostMap();\r\n+\r\n+    if (pathnames == null) {\r\n+      return;\r\n+    }\r\n+\r\n     for (String pathname : pathnames) {\r\n       String name = getRelativePath(new File(pathname), base);\r\n       load(new FileSystemResource(pathname), name);\r\n@@ -172,6 +181,11 @@ public MultiTreeWordList(String[] pathnames, File base) throws IOException {\n   public MultiTreeWordList(List<File> files, File base) throws IOException {\r\n     this.root = new MultiTextNode();\r\n     this.costMap = new EditDistanceCostMap();\r\n+\r\n+    if (files == null) {\r\n+      return;\r\n+    }\r\n+\r\n     for (File file : files) {\r\n       String name = getRelativePath(file, base);\r\n       load(new FileSystemResource(file), name);\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/ffaf490b6d5c6c0302865142d259d57d60bb8813/ruta-core/src/main/java/org/apache/uima/ruta/resource/MultiTreeWordList.java",
                "sha": "74047d7b7d424fee117eec53bec50360e625c2b1",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/uima-ruta/blob/ffaf490b6d5c6c0302865142d259d57d60bb8813/ruta-core/src/main/java/org/apache/uima/ruta/resource/TreeWordList.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/resource/TreeWordList.java?ref=ffaf490b6d5c6c0302865142d259d57d60bb8813",
                "deletions": 0,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/resource/TreeWordList.java",
                "patch": "@@ -144,6 +144,11 @@ public TreeWordList(List<String> data, boolean dictRemoveWS) {\n \r\n   public void buildNewTree(List<String> data) {\r\n     this.root = new TextNode();\r\n+\r\n+    if (data == null) {\r\n+      return;\r\n+    }\r\n+\r\n     for (String s : data) {\r\n       addWord(s);\r\n     }\r\n@@ -191,6 +196,11 @@ public TextNode getRoot() {\n    */\r\n   public void addWord(String s) {\r\n     // Create Nodes from all chars of the strings besides the last one\r\n+\r\n+    if (s == null) {\r\n+      return;\r\n+    }\r\n+\r\n     TextNode pointer = root;\r\n     for (Character each : s.toCharArray()) {\r\n       if (dictRemoveWS && Character.isWhitespace(each)) {\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/ffaf490b6d5c6c0302865142d259d57d60bb8813/ruta-core/src/main/java/org/apache/uima/ruta/resource/TreeWordList.java",
                "sha": "079de68057d534dd1403cc6330e49ebb8e3a07c6",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/uima-ruta/blob/ffaf490b6d5c6c0302865142d259d57d60bb8813/ruta-core/src/test/java/org/apache/uima/ruta/action/GatherTest.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/test/java/org/apache/uima/ruta/action/GatherTest.java?ref=ffaf490b6d5c6c0302865142d259d57d60bb8813",
                "deletions": 13,
                "filename": "ruta-core/src/test/java/org/apache/uima/ruta/action/GatherTest.java",
                "patch": "@@ -41,7 +41,7 @@\n public class GatherTest {\r\n \r\n   @Test\r\n-  public void test() {\r\n+  public void test() throws Exception {\r\n     String name = this.getClass().getSimpleName();\r\n     String namespace = this.getClass().getPackage().getName().replaceAll(\"\\\\.\", \"/\");\r\n \r\n@@ -57,15 +57,9 @@ public void test() {\n     String fn2 = \"b\";\r\n     list.add(new TestFeature(fn2, \"\", \"uima.tcas.Annotation\"));\r\n \r\n-    CAS cas = null;\r\n-    try {\r\n-      cas = RutaTestUtils.process(namespace + \"/\" + name + RutaEngine.SCRIPT_FILE_EXTENSION,\r\n-              namespace + \"/\" + name + \".txt\", 50, false, false, complexTypes, features, namespace\r\n-                      + \"/\");\r\n-    } catch (Exception e) {\r\n-      e.printStackTrace();\r\n-      assert (false);\r\n-    }\r\n+    CAS cas = RutaTestUtils.process(namespace + \"/\" + name + RutaEngine.SCRIPT_FILE_EXTENSION,\r\n+            namespace + \"/\" + name + \".txt\", 50, false, false, complexTypes, features,\r\n+            namespace + \"/\");\r\n     Type t = null;\r\n     AnnotationIndex<AnnotationFS> ai = null;\r\n     FSIterator<AnnotationFS> iterator = null;\r\n@@ -84,7 +78,6 @@ public void test() {\n     assertEquals(\"A\", v1.getCoveredText());\r\n     assertEquals(\"B\", v2.getCoveredText());\r\n \r\n-    cas.release();\r\n   }\r\n \r\n   @Test\r\n@@ -105,8 +98,8 @@ public void testOptionalMatch() throws Exception {\n     list.add(new TestFeature(fn1, \"\", \"uima.tcas.Annotation\"));\r\n     String fn2 = \"b\";\r\n     list.add(new TestFeature(fn2, \"\", \"uima.tcas.Annotation\"));\r\n-    CAS cas  = RutaTestUtils.getCAS(document, complexTypes, features);\r\n-      Ruta.apply(cas, script);\r\n+    CAS cas = RutaTestUtils.getCAS(document, complexTypes, features);\r\n+    Ruta.apply(cas, script);\r\n \r\n     Type t = null;\r\n     AnnotationIndex<AnnotationFS> ai = null;\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/ffaf490b6d5c6c0302865142d259d57d60bb8813/ruta-core/src/test/java/org/apache/uima/ruta/action/GatherTest.java",
                "sha": "df45ade3209ccb5942ac558ac7119327db034b78",
                "status": "modified"
            },
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/uima-ruta/blob/ffaf490b6d5c6c0302865142d259d57d60bb8813/ruta-core/src/test/java/org/apache/uima/ruta/action/MarkFastTest.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/test/java/org/apache/uima/ruta/action/MarkFastTest.java?ref=ffaf490b6d5c6c0302865142d259d57d60bb8813",
                "deletions": 10,
                "filename": "ruta-core/src/test/java/org/apache/uima/ruta/action/MarkFastTest.java",
                "patch": "@@ -19,32 +19,56 @@\n \r\n package org.apache.uima.ruta.action;\r\n \r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.TreeMap;\r\n+\r\n import org.apache.uima.cas.CAS;\r\n+import org.apache.uima.ruta.engine.Ruta;\r\n import org.apache.uima.ruta.engine.RutaEngine;\r\n import org.apache.uima.ruta.engine.RutaTestUtils;\r\n+import org.apache.uima.ruta.engine.RutaTestUtils.TestFeature;\r\n import org.junit.Test;\r\n \r\n public class MarkFastTest {\r\n \r\n   @Test\r\n-  public void test() {\r\n+  public void test() throws Exception {\r\n     String name = this.getClass().getSimpleName();\r\n     String namespace = this.getClass().getPackage().getName().replaceAll(\"\\\\.\", \"/\");\r\n \r\n-    CAS cas = null;\r\n-    try {\r\n-      cas = RutaTestUtils.process(namespace + \"/\" + name + RutaEngine.SCRIPT_FILE_EXTENSION, namespace + \"/\" + name\r\n-              + \".txt\", 50, false, false, null, namespace + \"/\");\r\n-    } catch (Exception e) {\r\n-      e.printStackTrace();\r\n-      assert (false);\r\n-    }\r\n+    CAS cas = RutaTestUtils.process(namespace + \"/\" + name + RutaEngine.SCRIPT_FILE_EXTENSION,\r\n+            namespace + \"/\" + name + \".txt\", 50, false, false, null, namespace + \"/\");\r\n \r\n     RutaTestUtils.assertAnnotationsEquals(cas, 1, 3, \"1 0 0\", \"100\", \"2 0 0\");\r\n     RutaTestUtils.assertAnnotationsEquals(cas, 2, 0);\r\n     RutaTestUtils.assertAnnotationsEquals(cas, 3, 1, \"100\");\r\n     RutaTestUtils.assertAnnotationsEquals(cas, 4, 2, \"1 0 0\", \"2 0 0\");\r\n \r\n-    cas.release();\r\n   }\r\n+\r\n+  @Test\r\n+  public void testWithNullStringList() throws Exception {\r\n+\r\n+    String text = \"Some text.\";\r\n+    String script = \"\";\r\n+    script += \"STRINGLIST list;\\n\";\r\n+    script += \"Document{-> ADD(list, null)};\\n\";\r\n+    script += \"MARKFAST(T1,list);\\n\";\r\n+\r\n+    Map<String, String> complexTypes = new TreeMap<String, String>();\r\n+    String typeName = \"org.apache.uima.Struct\";\r\n+    complexTypes.put(typeName, \"uima.tcas.Annotation\");\r\n+\r\n+    Map<String, List<TestFeature>> features = new TreeMap<String, List<TestFeature>>();\r\n+    List<TestFeature> list = new ArrayList<RutaTestUtils.TestFeature>();\r\n+    features.put(typeName, list);\r\n+    String fn1 = \"s\";\r\n+    list.add(new TestFeature(fn1, \"\", \"uima.cas.String\"));\r\n+    CAS cas = RutaTestUtils.getCAS(text, complexTypes, features);\r\n+    Ruta.apply(cas, script);\r\n+    RutaTestUtils.assertAnnotationsEquals(cas, 1, 0);\r\n+  }\r\n+\r\n }\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/ffaf490b6d5c6c0302865142d259d57d60bb8813/ruta-core/src/test/java/org/apache/uima/ruta/action/MarkFastTest.java",
                "sha": "e81831625fbfdb4d931c5d0b3feaae2905a21704",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/uima-ruta/blob/ffaf490b6d5c6c0302865142d259d57d60bb8813/ruta-core/src/test/java/org/apache/uima/ruta/action/Shift1Test.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/test/java/org/apache/uima/ruta/action/Shift1Test.java?ref=ffaf490b6d5c6c0302865142d259d57d60bb8813",
                "deletions": 1,
                "filename": "ruta-core/src/test/java/org/apache/uima/ruta/action/Shift1Test.java",
                "patch": "@@ -45,7 +45,6 @@ public void testOverlapping() throws Exception {\n     CAS cas = RutaTestUtils.getCAS(text);\r\n     Ruta.apply(cas, script);\r\n     RutaTestUtils.assertAnnotationsEquals(cas, 1, 3, \"2 3\", \"3 x 4\", \"4\");\r\n-    cas.release();\r\n   }\r\n \r\n }\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/ffaf490b6d5c6c0302865142d259d57d60bb8813/ruta-core/src/test/java/org/apache/uima/ruta/action/Shift1Test.java",
                "sha": "48bf2f9d58d77b0ec3a6d62b8b9f4fa812fb85b1",
                "status": "modified"
            }
        ],
        "message": "UIMA-5993 - avoid NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1860450 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/uima-ruta/commit/b5fa9a55f00659a5efd8d7ffbaed1819457607bf",
        "patched_files": [
            "TreeWordList.java",
            "MultiTreeWordList.java"
        ],
        "repo": "uima-ruta",
        "unit_tests": [
            "GatherTest.java",
            "MarkFastTest.java",
            "Shift1Test.java"
        ]
    }
}