[
    {
        "repo": "commons-functor",
        "message": "[FUNCTOR-10] throw NullPointerException for illegal null values\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/functor/trunk@1234990 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-functor/commit/e9d85d70d3eb4ea988c610185b0e4f46424a7235",
        "parent": "https://github.com/apache/commons-functor/commit/dfdb498e8c6b0f43be69a94449ddd4187bcb6d36",
        "bug_id": "commons-functor_1",
        "file": [
            {
                "sha": "093640d003e7b0c57a98e5c60a1935bdfaaa428a",
                "filename": "NOTICE.txt",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/NOTICE.txt",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/NOTICE.txt",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/NOTICE.txt?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -1,5 +1,5 @@\n Apache Commons Functor\n-Copyright 2003-2004, 2008 The Apache Software Foundation\n+Copyright 2003-2004, 2008-2012 The Apache Software Foundation\n \n This product includes software developed by\n The Apache Software Foundation (http://www.apache.org/).",
                "deletions": 1
            },
            {
                "sha": "39c290e8277cdf1f596afc2edf0b506bc379047c",
                "filename": "pom.xml",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/pom.xml",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/pom.xml",
                "status": "modified",
                "changes": 114,
                "additions": 113,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/pom.xml?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -22,7 +22,6 @@\n     <version>22</version>\n   </parent>\n   <modelVersion>4.0.0</modelVersion>\n-  <groupId>org.apache.commons</groupId>\n   <artifactId>commons-functor</artifactId>\n   <version>1.0-SNAPSHOT</version>\n   <name>Commons Functor</name>\n@@ -89,6 +88,12 @@\n   </contributors>\n \n   <dependencies>\n+    <dependency>\n+      <groupId>org.apache.commons</groupId>\n+      <artifactId>commons-lang3</artifactId>\n+      <!-- if upgrading, be sure to check shaded jar relocations! -->\n+      <version>3.1</version>\n+    </dependency>\n     <dependency>\n       <groupId>junit</groupId>\n       <artifactId>junit</artifactId>\n@@ -129,6 +134,63 @@\n           <tarLongFileMode>gnu</tarLongFileMode>\n         </configuration>\n       </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-shade-plugin</artifactId>\n+        <version>1.5</version>\n+        <configuration>\n+          <minimizeJar>true</minimizeJar>\n+          <createDependencyReducedPom>true</createDependencyReducedPom>\n+          <createSourcesJar>true</createSourcesJar>\n+          <artifactSet>\n+            <includes>\n+              <include>org.apache.commons:commons-lang3</include>\n+            </includes>\n+          </artifactSet>\n+          <relocations>\n+            <relocation>\n+              <pattern>org.apache.commons.lang3.builder.</pattern>\n+              <shadedPattern>org.apache.commons.functor._lang3.builder.__</shadedPattern>\n+            </relocation>\n+            <relocation>\n+              <pattern>org.apache.commons.lang3.exception.</pattern>\n+              <shadedPattern>org.apache.commons.functor._lang3.exception.__</shadedPattern>\n+            </relocation>\n+            <relocation>\n+              <pattern>org.apache.commons.lang3.mutable.</pattern>\n+              <shadedPattern>org.apache.commons.functor._lang3.mutable.__</shadedPattern>\n+            </relocation>\n+            <relocation>\n+              <pattern>org.apache.commons.lang3.tuple.</pattern>\n+              <shadedPattern>org.apache.commons.functor._lang3.tuple.__</shadedPattern>\n+            </relocation>\n+            <relocation>\n+              <pattern>org.apache.commons.lang3.</pattern>\n+              <shadedPattern>org.apache.commons.functor._lang3.__</shadedPattern>\n+            </relocation>\n+          </relocations>\n+        </configuration>\n+        <executions>\n+          <execution>\n+            <phase>package</phase>\n+            <goals>\n+              <goal>shade</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-jar-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <phase>package</phase>\n+            <goals>\n+              <goal>test-jar</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n     </plugins>\n \n     <!--\n@@ -142,6 +204,56 @@\n         <version>1.0</version>\n       </extension>\n     </extensions>\n+    <pluginManagement>\n+    \t<plugins>\n+    \t\t<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->\n+    \t\t<plugin>\n+    \t\t\t<groupId>org.eclipse.m2e</groupId>\n+    \t\t\t<artifactId>lifecycle-mapping</artifactId>\n+    \t\t\t<version>1.0.0</version>\n+    \t\t\t<configuration>\n+    \t\t\t\t<lifecycleMappingMetadata>\n+    \t\t\t\t\t<pluginExecutions>\n+    \t\t\t\t\t\t<pluginExecution>\n+    \t\t\t\t\t\t\t<pluginExecutionFilter>\n+    \t\t\t\t\t\t\t\t<groupId>\n+    \t\t\t\t\t\t\t\t\torg.apache.maven.plugins\n+    \t\t\t\t\t\t\t\t</groupId>\n+    \t\t\t\t\t\t\t\t<artifactId>\n+    \t\t\t\t\t\t\t\t\tmaven-antrun-plugin\n+    \t\t\t\t\t\t\t\t</artifactId>\n+    \t\t\t\t\t\t\t\t<versionRange>[1.6,)</versionRange>\n+    \t\t\t\t\t\t\t\t<goals>\n+    \t\t\t\t\t\t\t\t\t<goal>run</goal>\n+    \t\t\t\t\t\t\t\t</goals>\n+    \t\t\t\t\t\t\t</pluginExecutionFilter>\n+    \t\t\t\t\t\t\t<action>\n+    \t\t\t\t\t\t\t\t<ignore></ignore>\n+    \t\t\t\t\t\t\t</action>\n+    \t\t\t\t\t\t</pluginExecution>\n+    \t\t\t\t\t\t<pluginExecution>\n+    \t\t\t\t\t\t\t<pluginExecutionFilter>\n+    \t\t\t\t\t\t\t\t<groupId>org.apache.felix</groupId>\n+    \t\t\t\t\t\t\t\t<artifactId>\n+    \t\t\t\t\t\t\t\t\tmaven-bundle-plugin\n+    \t\t\t\t\t\t\t\t</artifactId>\n+    \t\t\t\t\t\t\t\t<versionRange>\n+    \t\t\t\t\t\t\t\t\t[2.3.5,)\n+    \t\t\t\t\t\t\t\t</versionRange>\n+    \t\t\t\t\t\t\t\t<goals>\n+    \t\t\t\t\t\t\t\t\t<goal>manifest</goal>\n+    \t\t\t\t\t\t\t\t</goals>\n+    \t\t\t\t\t\t\t</pluginExecutionFilter>\n+    \t\t\t\t\t\t\t<action>\n+    \t\t\t\t\t\t\t\t<ignore></ignore>\n+    \t\t\t\t\t\t\t</action>\n+    \t\t\t\t\t\t</pluginExecution>\n+    \t\t\t\t\t</pluginExecutions>\n+    \t\t\t\t</lifecycleMappingMetadata>\n+    \t\t\t</configuration>\n+    \t\t</plugin>\n+    \t</plugins>\n+    </pluginManagement>\n   </build>\n   <reporting>\n     <plugins>",
                "deletions": 1
            },
            {
                "sha": "58a5e6aae1c64727737914d5391f7fdff7cdee05",
                "filename": "src/main/java/org/apache/commons/functor/adapter/BinaryFunctionBinaryPredicate.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/BinaryFunctionBinaryPredicate.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/BinaryFunctionBinaryPredicate.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/BinaryFunctionBinaryPredicate.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.BinaryFunction;\n import org.apache.commons.functor.BinaryPredicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a <code>Boolean</code>-valued {@link BinaryFunction BinaryFunction} to\n@@ -47,10 +48,7 @@\n      * @param function the {@link BinaryFunction BinaryFunction} to wrap\n      */\n     public BinaryFunctionBinaryPredicate(final BinaryFunction<? super L, ? super R, Boolean> function) {\n-        if (function == null) {\n-            throw new IllegalArgumentException(\"BinaryFunction argument must not be null\");\n-        }\n-        this.function = function;\n+        this.function = Validate.notNull(function, \"BinaryFunction argument must not be null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "59ac5e7dfd364f8bb3062cdd537ad0646493ff66",
                "filename": "src/main/java/org/apache/commons/functor/adapter/BinaryFunctionUnaryFunction.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/BinaryFunctionUnaryFunction.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/BinaryFunctionUnaryFunction.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/BinaryFunctionUnaryFunction.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -18,6 +18,7 @@\n \n import org.apache.commons.functor.BinaryFunction;\n import org.apache.commons.functor.UnaryFunction;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a BinaryFunction as a UnaryFunction by sending the same argument to both sides of the BinaryFunction.\n@@ -38,10 +39,7 @@\n      * @param function to adapt\n      */\n     public BinaryFunctionUnaryFunction(BinaryFunction<? super A, ? super A, ? extends T> function) {\n-        if (null == function) {\n-            throw new IllegalArgumentException(\"BinaryFunction argument was null\");\n-        }\n-        this.function = function;\n+        this.function = Validate.notNull(function, \"BinaryFunction argument was null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "4ec7d64259e6e7d5a4386532e1623fc17264a2f1",
                "filename": "src/main/java/org/apache/commons/functor/adapter/BinaryPredicateUnaryPredicate.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/BinaryPredicateUnaryPredicate.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/BinaryPredicateUnaryPredicate.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/BinaryPredicateUnaryPredicate.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -18,6 +18,7 @@\n \n import org.apache.commons.functor.BinaryPredicate;\n import org.apache.commons.functor.UnaryPredicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a BinaryPredicate as a UnaryPredicate by sending the same argument to both sides of the BinaryPredicate.\n@@ -36,10 +37,7 @@\n      * @param predicate to adapt\n      */\n     public BinaryPredicateUnaryPredicate(BinaryPredicate<? super A, ? super A> predicate) {\n-        if (null == predicate) {\n-            throw new IllegalArgumentException(\"BinaryPredicate argument was null\");\n-        }\n-        this.predicate = predicate;\n+        this.predicate = Validate.notNull(predicate, \"BinaryPredicate argument was null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "0eeab276b0fab0378578127047dd61d0686f128b",
                "filename": "src/main/java/org/apache/commons/functor/adapter/BinaryProcedureBinaryFunction.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/BinaryProcedureBinaryFunction.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/BinaryProcedureBinaryFunction.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/BinaryProcedureBinaryFunction.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.BinaryFunction;\n import org.apache.commons.functor.BinaryProcedure;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a\n@@ -54,10 +55,7 @@\n      * @param procedure to adapt as a BinaryFunction\n      */\n     public BinaryProcedureBinaryFunction(BinaryProcedure<? super L, ? super R> procedure) {\n-        if (procedure == null) {\n-            throw new IllegalArgumentException(\"BinaryProcedure argument was null\");\n-        }\n-        this.procedure = procedure;\n+        this.procedure = Validate.notNull(procedure, \"BinaryProcedure argument was null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "fe7390e4f5e027c4a2891f70af916add90485c7b",
                "filename": "src/main/java/org/apache/commons/functor/adapter/BinaryProcedureUnaryProcedure.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/BinaryProcedureUnaryProcedure.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/BinaryProcedureUnaryProcedure.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/BinaryProcedureUnaryProcedure.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -18,6 +18,7 @@\n \n import org.apache.commons.functor.BinaryProcedure;\n import org.apache.commons.functor.UnaryProcedure;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a BinaryProcedure as a UnaryProcedure by sending the same argument to both sides of the BinaryProcedure.\n@@ -36,10 +37,7 @@\n      * @param procedure to adapt\n      */\n     public BinaryProcedureUnaryProcedure(BinaryProcedure<? super A, ? super A> procedure) {\n-        if (null == procedure) {\n-            throw new IllegalArgumentException(\"BinaryProcedure argument was null\");\n-        }\n-        this.procedure = procedure;\n+        this.procedure = Validate.notNull(procedure, \"BinaryProcedure argument was null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "d2cf9e4c0928d31bf035664a9ff072853f530152",
                "filename": "src/main/java/org/apache/commons/functor/adapter/BoundFunction.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/BoundFunction.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/BoundFunction.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/BoundFunction.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.Function;\n import org.apache.commons.functor.UnaryFunction;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a\n@@ -57,10 +58,9 @@\n      */\n     @SuppressWarnings(\"unchecked\")\n     public <A> BoundFunction(UnaryFunction<? super A, ? extends T> function, A arg) {\n-        if (function == null) {\n-            throw new IllegalArgumentException(\"UnaryFunction argument was null\");\n-        }\n-        this.function = (UnaryFunction<Object, ? extends T>) function;\n+        this.function =\n+            (UnaryFunction<Object, ? extends T>) Validate.notNull(function,\n+                \"UnaryFunction argument was null\");\n         this.arg = arg;\n     }\n ",
                "deletions": 4
            },
            {
                "sha": "a8ce3b2cefb697cbe757419f4a619cd3f1c13f06",
                "filename": "src/main/java/org/apache/commons/functor/adapter/BoundPredicate.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/BoundPredicate.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/BoundPredicate.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/BoundPredicate.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.Predicate;\n import org.apache.commons.functor.UnaryPredicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a\n@@ -56,10 +57,9 @@\n      */\n     @SuppressWarnings(\"unchecked\")\n     public <A> BoundPredicate(UnaryPredicate<? super A> predicate, A arg) {\n-        if (predicate == null) {\n-            throw new IllegalArgumentException(\"UnaryPredicate argument was null\");\n-        }\n-        this.predicate = (UnaryPredicate<Object>) predicate;\n+        this.predicate =\n+            (UnaryPredicate<Object>) Validate.notNull(predicate,\n+                \"UnaryPredicate argument was null\");\n         this.param = arg;\n     }\n ",
                "deletions": 4
            },
            {
                "sha": "e92702b94ffcb4dae58f14c0ec7ef10383ec8823",
                "filename": "src/main/java/org/apache/commons/functor/adapter/BoundProcedure.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/BoundProcedure.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/BoundProcedure.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/BoundProcedure.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.Procedure;\n import org.apache.commons.functor.UnaryProcedure;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a\n@@ -56,10 +57,9 @@\n      */\n     @SuppressWarnings(\"unchecked\")\n     public <A> BoundProcedure(UnaryProcedure<? super A> procedure, A arg) {\n-        if (procedure == null) {\n-            throw new IllegalArgumentException(\"UnaryProcedure argument was null\");\n-        }\n-        this.procedure = (UnaryProcedure<Object>) procedure;\n+        this.procedure =\n+            (UnaryProcedure<Object>) Validate.notNull(procedure,\n+                \"UnaryProcedure argument was null\");\n         this.param = arg;\n     }\n ",
                "deletions": 4
            },
            {
                "sha": "889874cfc3f390ef9ac88236081e3751c730232f",
                "filename": "src/main/java/org/apache/commons/functor/adapter/FullyBoundFunction.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/FullyBoundFunction.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/FullyBoundFunction.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/FullyBoundFunction.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.BinaryFunction;\n import org.apache.commons.functor.Function;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a\n@@ -61,10 +62,9 @@\n      */\n     @SuppressWarnings(\"unchecked\")\n     public <L, R> FullyBoundFunction(BinaryFunction<? super L, ? super R, ? extends T> function, L left, R right) {\n-        if (function == null) {\n-            throw new IllegalArgumentException(\"BinaryFunction argument was null\");\n-        }\n-        this.function = (BinaryFunction<Object, Object, T>) function;\n+        this.function =\n+            (BinaryFunction<Object, Object, T>) Validate.notNull(function,\n+                \"BinaryFunction argument was null\");\n         this.left = left;\n         this.right = right;\n     }",
                "deletions": 4
            },
            {
                "sha": "5190f3f20eec2ce0b34f02bdd5b0891b5ea17c66",
                "filename": "src/main/java/org/apache/commons/functor/adapter/FullyBoundPredicate.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/FullyBoundPredicate.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/FullyBoundPredicate.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/FullyBoundPredicate.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.BinaryPredicate;\n import org.apache.commons.functor.Predicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a\n@@ -61,10 +62,9 @@\n      */\n     @SuppressWarnings(\"unchecked\")\n     public <L, R> FullyBoundPredicate(BinaryPredicate<? super L, ? super R> predicate, L left, R right) {\n-        if (predicate == null) {\n-            throw new IllegalArgumentException(\"BinaryPredicate argument was null\");\n-        }\n-        this.predicate = (BinaryPredicate<Object, Object>) predicate;\n+        this.predicate =\n+            (BinaryPredicate<Object, Object>) Validate.notNull(predicate,\n+                \"BinaryPredicate argument was null\");\n         this.left = left;\n         this.right = right;\n     }",
                "deletions": 4
            },
            {
                "sha": "77f7349ead1bbce5e4c9f4182e896f3dd19e4480",
                "filename": "src/main/java/org/apache/commons/functor/adapter/FullyBoundProcedure.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/FullyBoundProcedure.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/FullyBoundProcedure.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/FullyBoundProcedure.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.BinaryProcedure;\n import org.apache.commons.functor.Procedure;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a\n@@ -60,10 +61,9 @@\n      */\n     @SuppressWarnings(\"unchecked\")\n     public <L, R> FullyBoundProcedure(BinaryProcedure<? super L, ? super R> procedure, L left, R right) {\n-        if (procedure == null) {\n-            throw new IllegalArgumentException(\"BinaryProcedure argument was null\");\n-        }\n-        this.procedure = (BinaryProcedure<Object, Object>) procedure;\n+        this.procedure =\n+            (BinaryProcedure<Object, Object>) Validate.notNull(procedure,\n+                \"BinaryProcedure argument was null\");\n         this.left = left;\n         this.right = right;\n     }",
                "deletions": 4
            },
            {
                "sha": "e91171ce313ab8b1f3799cef2fe8174803dc3aee",
                "filename": "src/main/java/org/apache/commons/functor/adapter/FunctionPredicate.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/FunctionPredicate.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/FunctionPredicate.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/FunctionPredicate.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.Function;\n import org.apache.commons.functor.Predicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a <code>Boolean</code>-valued\n@@ -50,10 +51,7 @@\n      * @param function to adapt\n      */\n     public FunctionPredicate(Function<Boolean> function) {\n-        if (function == null) {\n-            throw new IllegalArgumentException(\"Function argument was null\");\n-        }\n-        this.function = function;\n+        this.function = Validate.notNull(function, \"Function argument was null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "edaeddcfc90d04f85e32e1b2d2ee2dd7ca9a8071",
                "filename": "src/main/java/org/apache/commons/functor/adapter/FunctionProcedure.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/FunctionProcedure.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/FunctionProcedure.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/FunctionProcedure.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.Function;\n import org.apache.commons.functor.Procedure;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a {@link Function Function}\n@@ -51,10 +52,7 @@\n      * @param function the {@link Function Function} to wrap\n      */\n     public FunctionProcedure(Function<?> function) {\n-        if (function == null) {\n-            throw new IllegalArgumentException(\"Function argument was null\");\n-        }\n-        this.function = function;\n+        this.function = Validate.notNull(function, \"Function argument was null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "49992638dae2ee0abbb47e41b2b8176808db221e",
                "filename": "src/main/java/org/apache/commons/functor/adapter/FunctionUnaryFunction.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/FunctionUnaryFunction.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/FunctionUnaryFunction.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/FunctionUnaryFunction.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.Function;\n import org.apache.commons.functor.UnaryFunction;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a\n@@ -53,10 +54,7 @@\n      * @param function to adapt\n      */\n     public FunctionUnaryFunction(Function<? extends T> function) {\n-        if (function == null) {\n-            throw new IllegalArgumentException(\"Function argument was null\");\n-        }\n-        this.function = function;\n+        this.function = Validate.notNull(function, \"Function argument was null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "3547a59352cb07040057a0200061cad8a37ab08c",
                "filename": "src/main/java/org/apache/commons/functor/adapter/IgnoreLeftFunction.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/IgnoreLeftFunction.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/IgnoreLeftFunction.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/IgnoreLeftFunction.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.BinaryFunction;\n import org.apache.commons.functor.UnaryFunction;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a\n@@ -54,10 +55,7 @@\n      * @param function UnaryFunction for right argument\n      */\n     public IgnoreLeftFunction(UnaryFunction<? super R, ? extends T> function) {\n-        if (function == null) {\n-            throw new IllegalArgumentException(\"UnaryFunction argument was null\");\n-        }\n-        this.function = function;\n+        this.function = Validate.notNull(function, \"UnaryFunction argument was null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "6671c6699d7b85c42f777b217846febeb00b8946",
                "filename": "src/main/java/org/apache/commons/functor/adapter/IgnoreLeftPredicate.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/IgnoreLeftPredicate.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/IgnoreLeftPredicate.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/IgnoreLeftPredicate.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.BinaryPredicate;\n import org.apache.commons.functor.UnaryPredicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a\n@@ -53,10 +54,7 @@\n      * @param predicate the right predicate\n      */\n     public IgnoreLeftPredicate(UnaryPredicate<? super R> predicate) {\n-        if (predicate == null) {\n-            throw new IllegalArgumentException(\"UnaryPredicate argument was null\");\n-        }\n-        this.predicate = predicate;\n+        this.predicate = Validate.notNull(predicate, \"UnaryPredicate argument was null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "844cc491744232ff592a59e288ce119caab241f8",
                "filename": "src/main/java/org/apache/commons/functor/adapter/IgnoreLeftProcedure.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/IgnoreLeftProcedure.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/IgnoreLeftProcedure.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/IgnoreLeftProcedure.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.BinaryProcedure;\n import org.apache.commons.functor.UnaryProcedure;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a\n@@ -53,10 +54,7 @@\n      * @param procedure to adapt\n      */\n     public IgnoreLeftProcedure(UnaryProcedure<? super R> procedure) {\n-        if (procedure == null) {\n-            throw new IllegalArgumentException(\"UnaryProcedure argument was null\");\n-        }\n-        this.procedure = procedure;\n+        this.procedure = Validate.notNull(procedure, \"UnaryProcedure argument was null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "7756572eee7942eabed90e9ea6876cc7ddba217c",
                "filename": "src/main/java/org/apache/commons/functor/adapter/IgnoreRightFunction.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/IgnoreRightFunction.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/IgnoreRightFunction.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/IgnoreRightFunction.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.BinaryFunction;\n import org.apache.commons.functor.UnaryFunction;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a\n@@ -54,10 +55,7 @@\n      * @param function UnaryFunction to wrap\n      */\n     public IgnoreRightFunction(UnaryFunction<? super L, ? extends T> function) {\n-        if (function == null) {\n-            throw new IllegalArgumentException(\"UnaryFunction argument was null\");\n-        }\n-        this.function = function;\n+        this.function = Validate.notNull(function, \"UnaryFunction argument was null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "dd60da49055334f4d6102e623778039e81fb3e88",
                "filename": "src/main/java/org/apache/commons/functor/adapter/IgnoreRightPredicate.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/IgnoreRightPredicate.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/IgnoreRightPredicate.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/IgnoreRightPredicate.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.BinaryPredicate;\n import org.apache.commons.functor.UnaryPredicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a\n@@ -53,10 +54,7 @@\n      * @param predicate left\n      */\n     public IgnoreRightPredicate(UnaryPredicate<? super L> predicate) {\n-        if (predicate == null) {\n-            throw new IllegalArgumentException(\"UnaryPredicate argument was null\");\n-        }\n-        this.predicate = predicate;\n+        this.predicate = Validate.notNull(predicate, \"UnaryPredicate argument was null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "d886b587a7f17d110b0608195910c5bc98d9a720",
                "filename": "src/main/java/org/apache/commons/functor/adapter/IgnoreRightProcedure.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/IgnoreRightProcedure.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/IgnoreRightProcedure.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/IgnoreRightProcedure.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.BinaryProcedure;\n import org.apache.commons.functor.UnaryProcedure;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a\n@@ -53,10 +54,7 @@\n      * @param procedure UnaryProcedure to adapt\n      */\n     public IgnoreRightProcedure(UnaryProcedure<? super L> procedure) {\n-        if (procedure == null) {\n-            throw new IllegalArgumentException(\"UnaryProcedure argument was null\");\n-        }\n-        this.procedure = procedure;\n+        this.procedure = Validate.notNull(procedure, \"UnaryProcedure argument was null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "85da7adacc2d1afd603f0d99e6fac8960f8c5950",
                "filename": "src/main/java/org/apache/commons/functor/adapter/LeftBoundFunction.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/LeftBoundFunction.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/LeftBoundFunction.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/LeftBoundFunction.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.BinaryFunction;\n import org.apache.commons.functor.UnaryFunction;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a\n@@ -58,10 +59,9 @@\n      */\n     @SuppressWarnings(\"unchecked\")\n     public <L> LeftBoundFunction(BinaryFunction<? super L, ? super A, ? extends T> function, L arg) {\n-        if (function == null) {\n-            throw new IllegalArgumentException(\"BinaryFunction argument was null\");\n-        }\n-        this.function = (BinaryFunction<Object, ? super A, ? extends T>) function;\n+        this.function =\n+            (BinaryFunction<Object, ? super A, ? extends T>) Validate.notNull(\n+                function, \"BinaryFunction argument was null\");\n         this.param = arg;\n     }\n ",
                "deletions": 4
            },
            {
                "sha": "2ae973df6c227cb90f15c126733fc9d20788304b",
                "filename": "src/main/java/org/apache/commons/functor/adapter/LeftBoundPredicate.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/LeftBoundPredicate.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/LeftBoundPredicate.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/LeftBoundPredicate.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.BinaryPredicate;\n import org.apache.commons.functor.UnaryPredicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a\n@@ -58,10 +59,9 @@\n      */\n     @SuppressWarnings(\"unchecked\")\n     public <L> LeftBoundPredicate(BinaryPredicate<? super L, ? super A> predicate, L arg) {\n-        if (predicate == null) {\n-            throw new IllegalArgumentException(\"BinaryPredicate argument was null\");\n-        }\n-        this.predicate = (BinaryPredicate<Object, ? super A>) predicate;\n+        this.predicate =\n+            (BinaryPredicate<Object, ? super A>) Validate.notNull(predicate,\n+                \"BinaryPredicate argument was null\");\n         this.param = arg;\n     }\n ",
                "deletions": 4
            },
            {
                "sha": "86e798193970e736444e25c57004b4fa3e5f1d90",
                "filename": "src/main/java/org/apache/commons/functor/adapter/LeftBoundProcedure.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/LeftBoundProcedure.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/LeftBoundProcedure.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/LeftBoundProcedure.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.BinaryProcedure;\n import org.apache.commons.functor.UnaryProcedure;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a\n@@ -57,10 +58,9 @@\n      */\n     @SuppressWarnings(\"unchecked\")\n     public <L> LeftBoundProcedure(BinaryProcedure<? super L, ? super A> procedure, L arg) {\n-        if (procedure == null) {\n-            throw new IllegalArgumentException(\"BinaryProcedure argument was null\");\n-        }\n-        this.procedure = (BinaryProcedure<Object, ? super A>) procedure;\n+        this.procedure =\n+            (BinaryProcedure<Object, ? super A>) Validate.notNull(procedure,\n+                \"BinaryProcedure argument was null\");\n         this.param = arg;\n     }\n ",
                "deletions": 4
            },
            {
                "sha": "7d58414d6dbbef637b652590848916d8b140eef6",
                "filename": "src/main/java/org/apache/commons/functor/adapter/PredicateFunction.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/PredicateFunction.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/PredicateFunction.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/PredicateFunction.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.Function;\n import org.apache.commons.functor.Predicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a\n@@ -50,10 +51,7 @@\n      * @param predicate to adapt\n      */\n     public PredicateFunction(Predicate predicate) {\n-        if (predicate == null) {\n-            throw new IllegalArgumentException(\"Predicate argument was null\");\n-        }\n-        this.predicate = predicate;\n+        this.predicate = Validate.notNull(predicate, \"Predicate argument was null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "8136dcb45d0c157ebe443d0653624c17d04c560f",
                "filename": "src/main/java/org/apache/commons/functor/adapter/PredicateUnaryPredicate.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/PredicateUnaryPredicate.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/PredicateUnaryPredicate.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/PredicateUnaryPredicate.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.Predicate;\n import org.apache.commons.functor.UnaryPredicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a\n@@ -52,10 +53,7 @@\n      * @param predicate to adapt\n      */\n     public PredicateUnaryPredicate(Predicate predicate) {\n-        if (predicate == null) {\n-            throw new IllegalArgumentException(\"Predicate argument was null\");\n-        }\n-        this.predicate = predicate;\n+        this.predicate = Validate.notNull(predicate, \"Predicate argument was null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "0d2a8f0a12406eac7760e7c43ff0506e67e4c6bf",
                "filename": "src/main/java/org/apache/commons/functor/adapter/ProcedureFunction.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/ProcedureFunction.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/ProcedureFunction.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/ProcedureFunction.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.Function;\n import org.apache.commons.functor.Procedure;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a\n@@ -52,10 +53,7 @@\n      * @param procedure to adapt\n      */\n     public ProcedureFunction(Procedure procedure) {\n-        if (procedure == null) {\n-            throw new IllegalArgumentException(\"Procedure argument was null\");\n-        }\n-        this.procedure = procedure;\n+        this.procedure = Validate.notNull(procedure, \"Procedure argument was null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "b62125d914246b4d41ebb9216392757cce4c4faf",
                "filename": "src/main/java/org/apache/commons/functor/adapter/ProcedureUnaryProcedure.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/ProcedureUnaryProcedure.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/ProcedureUnaryProcedure.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/ProcedureUnaryProcedure.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.Procedure;\n import org.apache.commons.functor.UnaryProcedure;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a\n@@ -52,10 +53,7 @@\n      * @param procedure to adapt\n      */\n     public ProcedureUnaryProcedure(Procedure procedure) {\n-        if (procedure == null) {\n-            throw new IllegalArgumentException(\"Procedure argument was null\");\n-        }\n-        this.procedure = procedure;\n+        this.procedure = Validate.notNull(procedure, \"Procedure argument was null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "bd3e3ecedc3205cae10bd8961dd6aa74d57f3934",
                "filename": "src/main/java/org/apache/commons/functor/adapter/RightBoundFunction.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/RightBoundFunction.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/RightBoundFunction.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/RightBoundFunction.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.BinaryFunction;\n import org.apache.commons.functor.UnaryFunction;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a\n@@ -57,10 +58,9 @@\n      */\n     @SuppressWarnings(\"unchecked\")\n     public <R> RightBoundFunction(BinaryFunction<? super A, ? super R, ? extends T> function, R arg) {\n-        if (function == null) {\n-            throw new IllegalArgumentException(\"left-hand BinaryFunction argument was null\");\n-        }\n-        this.function = (BinaryFunction<? super A, Object, ? extends T>) function;\n+        this.function =\n+            (BinaryFunction<? super A, Object, ? extends T>) Validate.notNull(\n+                function, \"left-hand BinaryFunction argument was null\");\n         this.param = arg;\n     }\n ",
                "deletions": 4
            },
            {
                "sha": "fe2eb13eafdc3eeb3d9976f28e5ca8bc52dfa380",
                "filename": "src/main/java/org/apache/commons/functor/adapter/RightBoundPredicate.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/RightBoundPredicate.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/RightBoundPredicate.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/RightBoundPredicate.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.BinaryPredicate;\n import org.apache.commons.functor.UnaryPredicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a\n@@ -57,10 +58,9 @@\n      */\n     @SuppressWarnings(\"unchecked\")\n     public <R> RightBoundPredicate(BinaryPredicate<? super A, ? super R> predicate, R arg) {\n-        if (predicate == null) {\n-            throw new IllegalArgumentException(\"BinaryPredicate argument was null\");\n-        }\n-        this.predicate = (BinaryPredicate<? super A, Object>) predicate;\n+        this.predicate =\n+            (BinaryPredicate<? super A, Object>) Validate.notNull(predicate,\n+                \"BinaryPredicate argument was null\");\n         this.param = arg;\n     }\n ",
                "deletions": 4
            },
            {
                "sha": "2071f9daa56586ac2e719c98d64bda2ce4b987d6",
                "filename": "src/main/java/org/apache/commons/functor/adapter/RightBoundProcedure.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/RightBoundProcedure.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/RightBoundProcedure.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/RightBoundProcedure.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.BinaryProcedure;\n import org.apache.commons.functor.UnaryProcedure;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a\n@@ -57,10 +58,9 @@\n      */\n     @SuppressWarnings(\"unchecked\")\n     public <R> RightBoundProcedure(BinaryProcedure<? super A, ? super R> procedure, R arg) {\n-        if (procedure == null) {\n-            throw new IllegalArgumentException(\"BinaryProcedure argument was null\");\n-        }\n-        this.procedure = (BinaryProcedure<? super A, Object>) procedure;\n+        this.procedure =\n+            (BinaryProcedure<? super A, Object>) Validate.notNull(procedure,\n+                \"BinaryProcedure argument was null\");\n         this.param = arg;\n     }\n ",
                "deletions": 4
            },
            {
                "sha": "1385cfe7b23deb8ec8e915668d79ee04be5be386",
                "filename": "src/main/java/org/apache/commons/functor/adapter/UnaryFunctionUnaryPredicate.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/UnaryFunctionUnaryPredicate.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/UnaryFunctionUnaryPredicate.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/UnaryFunctionUnaryPredicate.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.UnaryFunction;\n import org.apache.commons.functor.UnaryPredicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a <code>Boolean</code>-valued\n@@ -52,10 +53,7 @@\n      * @param function the {@link UnaryFunction UnaryFunction} to wrap\n      */\n     public UnaryFunctionUnaryPredicate(UnaryFunction<? super A, Boolean> function) {\n-        if (function == null) {\n-            throw new IllegalArgumentException(\"UnaryFunction argument was null\");\n-        }\n-        this.function = function;\n+        this.function = Validate.notNull(function, \"UnaryFunction argument was null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "49cb16a938711947d5b935473be0fd89545e99f4",
                "filename": "src/main/java/org/apache/commons/functor/adapter/UnaryFunctionUnaryProcedure.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/UnaryFunctionUnaryProcedure.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/UnaryFunctionUnaryProcedure.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/UnaryFunctionUnaryProcedure.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.UnaryFunction;\n import org.apache.commons.functor.UnaryProcedure;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a {@link UnaryFunction UnaryFunction}\n@@ -53,10 +54,7 @@\n      * @param function the {@link UnaryFunction UnaryFunction} to wrap\n      */\n     public UnaryFunctionUnaryProcedure(UnaryFunction<? super A, ?> function) {\n-        if (function == null) {\n-            throw new IllegalArgumentException(\"UnaryFunction argument was null\");\n-        }\n-        this.function = function;\n+        this.function = Validate.notNull(function, \"UnaryFunction argument was null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "fdcdffb6de2e504ed47188bcaee17ec2f04b17c0",
                "filename": "src/main/java/org/apache/commons/functor/adapter/UnaryPredicateUnaryFunction.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/UnaryPredicateUnaryFunction.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/UnaryPredicateUnaryFunction.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/UnaryPredicateUnaryFunction.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.UnaryFunction;\n import org.apache.commons.functor.UnaryPredicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a\n@@ -51,10 +52,7 @@\n      * @param predicate to adapt\n      */\n     public UnaryPredicateUnaryFunction(UnaryPredicate<? super A> predicate) {\n-        if (predicate == null) {\n-            throw new IllegalArgumentException(\"UnaryPredicate argument was null\");\n-        }\n-        this.predicate = predicate;\n+        this.predicate = Validate.notNull(predicate, \"UnaryPredicate argument was null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "f3d6b4c49bae4d259e70e1988240e828b402b559",
                "filename": "src/main/java/org/apache/commons/functor/adapter/UnaryProcedureUnaryFunction.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/UnaryProcedureUnaryFunction.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/adapter/UnaryProcedureUnaryFunction.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/UnaryProcedureUnaryFunction.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.UnaryFunction;\n import org.apache.commons.functor.UnaryProcedure;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a\n@@ -53,10 +54,7 @@\n      * @param procedure to adapt\n      */\n     public UnaryProcedureUnaryFunction(UnaryProcedure<? super A> procedure) {\n-        if (procedure == null) {\n-            throw new IllegalArgumentException(\"UnaryProcedure argument was null\");\n-        }\n-        this.procedure = procedure;\n+        this.procedure = Validate.notNull(procedure, \"UnaryProcedure argument was null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "07af04b9849bc2adc2210ccd9ba93ac3413b2c16",
                "filename": "src/main/java/org/apache/commons/functor/core/algorithm/RecursiveEvaluation.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/algorithm/RecursiveEvaluation.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/algorithm/RecursiveEvaluation.java",
                "status": "modified",
                "changes": 9,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/algorithm/RecursiveEvaluation.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -19,6 +19,7 @@\n import java.io.Serializable;\n \n import org.apache.commons.functor.Function;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Tail recursion for {@link Function functions}. If the {@link Function}\n@@ -55,14 +56,12 @@ public RecursiveEvaluation(Function<?> function) {\n      * @param functionType as long as result is an instance, keep processing.\n      */\n     public RecursiveEvaluation(Function<?> function, Class<?> functionType) {\n-        if (function == null) {\n-            throw new IllegalArgumentException(\"Function argument was null\");\n-        }\n-        if (functionType == null || !Function.class.isAssignableFrom(functionType)) {\n+        Validate.notNull(function, \"Function argument was null\");\n+        if (!Function.class.isAssignableFrom(functionType)) {\n             throw new IllegalArgumentException(Function.class + \" is not assignable from \" + functionType);\n         }\n         this.function = function;\n-        this.functionType = functionType;\n+        this.functionType = Validate.notNull(functionType, \"FunctionType argument was null\");\n     }\n \n     /**",
                "deletions": 5
            },
            {
                "sha": "7236cf5adb440fa922d79e51f25745fc82c34cb6",
                "filename": "src/main/java/org/apache/commons/functor/core/collection/FilteredIterator.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/collection/FilteredIterator.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/collection/FilteredIterator.java",
                "status": "modified",
                "changes": 11,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/collection/FilteredIterator.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n import java.util.NoSuchElementException;\n \n import org.apache.commons.functor.UnaryPredicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Iterator that filters another Iterator by only passing through those elements\n@@ -63,14 +64,8 @@\n      * @param predicate to apply\n      */\n     public FilteredIterator(Iterator<? extends T> iterator, UnaryPredicate<? super T> predicate) {\n-        if (null == iterator) {\n-            throw new IllegalArgumentException(\"Iterator argument was null\");\n-        }\n-        if (null == predicate) {\n-            throw new IllegalArgumentException(\"filtering UnaryPredicate argument was null\");\n-        }\n-        this.predicate = predicate;\n-        this.iterator = iterator;\n+        this.iterator = Validate.notNull(iterator, \"Iterator argument was null\");\n+        this.predicate = Validate.notNull(predicate, \"filtering UnaryPredicate argument was null\");\n     }\n \n     // iterator methods",
                "deletions": 8
            },
            {
                "sha": "04e19d3572a28b32dcaa6dfb58a19ac3725f99d1",
                "filename": "src/main/java/org/apache/commons/functor/core/collection/IsElementOf.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/collection/IsElementOf.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/collection/IsElementOf.java",
                "status": "modified",
                "changes": 7,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/collection/IsElementOf.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -23,6 +23,7 @@\n import org.apache.commons.functor.BinaryPredicate;\n import org.apache.commons.functor.UnaryPredicate;\n import org.apache.commons.functor.adapter.RightBoundPredicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * A {@link BinaryPredicate} that checks to see if the\n@@ -63,15 +64,13 @@ public IsElementOf() {\n      * {@inheritDoc}\n      */\n     public boolean test(L obj, R col) {\n+        Validate.notNull(col, \"Right side argument must not be null.\");\n         if (col instanceof Collection<?>) {\n             return testCollection(obj, (Collection<?>) col);\n         }\n-        if (null != col && col.getClass().isArray()) {\n+        if (col.getClass().isArray()) {\n             return testArray(obj, col);\n         }\n-        if (null == col) {\n-            throw new IllegalArgumentException(\"Right side argument must not be null.\");\n-        }\n         throw new IllegalArgumentException(\"Expected Collection or Array, found \" + col.getClass());\n     }\n ",
                "deletions": 4
            },
            {
                "sha": "3ebda92916039ee9e4e506e2c92c540e27b3fbc9",
                "filename": "src/main/java/org/apache/commons/functor/core/collection/IsEmpty.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/collection/IsEmpty.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/collection/IsEmpty.java",
                "status": "modified",
                "changes": 7,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/collection/IsEmpty.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -22,6 +22,7 @@\n import java.util.Map;\n \n import org.apache.commons.functor.UnaryPredicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * @param <A> the predicate argument type.\n@@ -57,6 +58,7 @@ public IsEmpty() {\n      * {@inheritDoc}\n      */\n     public boolean test(A obj) {\n+        Validate.notNull(obj, \"Argument must not be null\");\n         if (obj instanceof Collection<?>) {\n             return testCollection((Collection<?>) obj);\n         }\n@@ -66,12 +68,9 @@ public boolean test(A obj) {\n         if (obj instanceof String) {\n             return testString((String) obj);\n         }\n-        if (null != obj && obj.getClass().isArray()) {\n+        if (obj.getClass().isArray()) {\n             return testArray(obj);\n         }\n-        if (null == obj) {\n-            throw new IllegalArgumentException(\"Argument must not be null\");\n-        }\n         throw new IllegalArgumentException(\"Expected Collection, Map, String or Array, found \" + obj.getClass());\n     }\n ",
                "deletions": 4
            },
            {
                "sha": "6bf30df1482dabec345932e310bb523ae1e4a486",
                "filename": "src/main/java/org/apache/commons/functor/core/collection/Size.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/collection/Size.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/collection/Size.java",
                "status": "modified",
                "changes": 7,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/collection/Size.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -21,6 +21,7 @@\n import java.util.Collection;\n \n import org.apache.commons.functor.UnaryFunction;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Returns the size of the specified Collection, or the length\n@@ -52,18 +53,16 @@ public Size() { }\n      * {@inheritDoc}\n      */\n     public Integer evaluate(Object obj) {\n+        Validate.notNull(obj, \"Argument must not be null\");\n         if (obj instanceof Collection<?>) {\n             return evaluate((Collection<?>) obj);\n         }\n         if (obj instanceof String) {\n             return evaluate((String) obj);\n         }\n-        if (null != obj && obj.getClass().isArray()) {\n+        if (obj.getClass().isArray()) {\n             return evaluateArray(obj);\n         }\n-        if (null == obj) {\n-            throw new IllegalArgumentException(\"Argument must not be null\");\n-        }\n         throw new IllegalArgumentException(\"Expected Collection, String or Array, found \" + obj);\n     }\n ",
                "deletions": 4
            },
            {
                "sha": "89ab5ba432f22ce858bfe247a7e464cfb2946bb7",
                "filename": "src/main/java/org/apache/commons/functor/core/collection/TransformedIterator.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/collection/TransformedIterator.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/collection/TransformedIterator.java",
                "status": "modified",
                "changes": 11,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/collection/TransformedIterator.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -19,6 +19,7 @@\n import java.util.Iterator;\n \n import org.apache.commons.functor.UnaryFunction;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Iterator that transforms another Iterator by applying a UnaryFunction to each returned element.\n@@ -50,14 +51,8 @@\n      * @param function to apply\n      */\n     public TransformedIterator(Iterator<? extends E> iterator, UnaryFunction<? super E, ? extends T> function) {\n-        if (null == iterator) {\n-            throw new IllegalArgumentException(\"Iterator argument was null\");\n-        }\n-        if (null == function) {\n-            throw new IllegalArgumentException(\"filtering UnaryFunction argument was null\");\n-        }\n-        this.function = function;\n-        this.iterator = iterator;\n+        this.function = Validate.notNull(function, \"filtering UnaryFunction argument was null\");\n+        this.iterator = Validate.notNull(iterator, \"Iterator argument was null\");\n     }\n \n     // iterator methods",
                "deletions": 8
            },
            {
                "sha": "ddf57a93c60762821882c32c5d743162f1e0345f",
                "filename": "src/main/java/org/apache/commons/functor/core/comparator/ComparatorFunction.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/comparator/ComparatorFunction.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/comparator/ComparatorFunction.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/comparator/ComparatorFunction.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n import java.util.Comparator;\n \n import org.apache.commons.functor.BinaryFunction;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a {@link Comparator Comparator} to the\n@@ -51,10 +52,7 @@\n      * @param comparator to wrap\n      */\n     public ComparatorFunction(Comparator<? super T> comparator) {\n-        if (comparator == null) {\n-            throw new IllegalArgumentException(\"Comparator must not be null\");\n-        }\n-        this.comparator = comparator;\n+        this.comparator = Validate.notNull(comparator, \"Comparator argument must not be null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "e9967d8c363ca2d37b564e305d707a8c4e8f408d",
                "filename": "src/main/java/org/apache/commons/functor/core/comparator/IsEquivalent.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/comparator/IsEquivalent.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/comparator/IsEquivalent.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/comparator/IsEquivalent.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -22,6 +22,7 @@\n import org.apache.commons.functor.BinaryPredicate;\n import org.apache.commons.functor.UnaryPredicate;\n import org.apache.commons.functor.adapter.RightBoundPredicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * A {@link BinaryPredicate BinaryPredicate} that {@link #test tests}\n@@ -70,10 +71,7 @@ public IsEquivalent() {\n      *        be used.\n      */\n     public IsEquivalent(Comparator<? super T> comparator) {\n-        if (comparator == null) {\n-            throw new IllegalArgumentException(\"Comparator must not be null\");\n-        }\n-        this.comparator = comparator;\n+        this.comparator = Validate.notNull(comparator, \"Comparator argument must not be null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "50589fa6de5a26a646514f5b70526775a014aa66",
                "filename": "src/main/java/org/apache/commons/functor/core/comparator/IsGreaterThan.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/comparator/IsGreaterThan.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/comparator/IsGreaterThan.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/comparator/IsGreaterThan.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -22,6 +22,7 @@\n import org.apache.commons.functor.BinaryPredicate;\n import org.apache.commons.functor.UnaryPredicate;\n import org.apache.commons.functor.adapter.RightBoundPredicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * A {@link BinaryPredicate BinaryPredicate} that {@link #test tests}\n@@ -69,10 +70,7 @@ public IsGreaterThan() {\n      *        be used.\n      */\n     public IsGreaterThan(Comparator<? super T> comparator) {\n-        if (comparator == null) {\n-            throw new IllegalArgumentException(\"Comparator argument must not be null\");\n-        }\n-        this.comparator = comparator;\n+        this.comparator = Validate.notNull(comparator, \"Comparator argument must not be null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "672e7a37d10a56e1b60a118f077aa0b9929b727e",
                "filename": "src/main/java/org/apache/commons/functor/core/comparator/IsGreaterThanOrEqual.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/comparator/IsGreaterThanOrEqual.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/comparator/IsGreaterThanOrEqual.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/comparator/IsGreaterThanOrEqual.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -22,6 +22,7 @@\n import org.apache.commons.functor.BinaryPredicate;\n import org.apache.commons.functor.UnaryPredicate;\n import org.apache.commons.functor.adapter.RightBoundPredicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * A {@link BinaryPredicate BinaryPredicate} that {@link #test tests}\n@@ -70,10 +71,7 @@ public IsGreaterThanOrEqual() {\n      *        be used.\n      */\n     public IsGreaterThanOrEqual(Comparator<? super T> comparator) {\n-        if (comparator == null) {\n-            throw new IllegalArgumentException(\"Comparator argument must not be null\");\n-        }\n-        this.comparator = comparator;\n+        this.comparator = Validate.notNull(comparator, \"Comparator argument must not be null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "6ed7ea3e181d6846a9c673daa531967bdb239f14",
                "filename": "src/main/java/org/apache/commons/functor/core/comparator/IsLessThan.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/comparator/IsLessThan.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/comparator/IsLessThan.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/comparator/IsLessThan.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -22,6 +22,7 @@\n import org.apache.commons.functor.BinaryPredicate;\n import org.apache.commons.functor.UnaryPredicate;\n import org.apache.commons.functor.adapter.RightBoundPredicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * A {@link BinaryPredicate BinaryPredicate} that {@link #test tests}\n@@ -69,10 +70,7 @@ public IsLessThan() {\n      *        be used.\n      */\n     public IsLessThan(Comparator<? super T> comparator) {\n-        if (comparator == null) {\n-            throw new IllegalArgumentException(\"Comparator argument must not be null\");\n-        }\n-        this.comparator = comparator;\n+        this.comparator = Validate.notNull(comparator, \"Comparator argument must not be null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "6132760ca7cb650f2a7aa81abf947d3804391be9",
                "filename": "src/main/java/org/apache/commons/functor/core/comparator/IsLessThanOrEqual.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/comparator/IsLessThanOrEqual.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/comparator/IsLessThanOrEqual.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/comparator/IsLessThanOrEqual.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -22,6 +22,7 @@\n import org.apache.commons.functor.BinaryPredicate;\n import org.apache.commons.functor.UnaryPredicate;\n import org.apache.commons.functor.adapter.RightBoundPredicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * A {@link BinaryPredicate BinaryPredicate} that {@link #test tests}\n@@ -69,10 +70,7 @@ public IsLessThanOrEqual() {\n      *        be used.\n      */\n     public IsLessThanOrEqual(Comparator<? super T> comparator) {\n-        if (comparator == null) {\n-            throw new IllegalArgumentException(\"Comparator argument must not be null\");\n-        }\n-        this.comparator = comparator;\n+        this.comparator = Validate.notNull(comparator, \"Comparator argument must not be null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "f481662413be9e698115c10563674319ef268b10",
                "filename": "src/main/java/org/apache/commons/functor/core/comparator/IsNotEquivalent.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/comparator/IsNotEquivalent.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/comparator/IsNotEquivalent.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/comparator/IsNotEquivalent.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -22,6 +22,7 @@\n import org.apache.commons.functor.BinaryPredicate;\n import org.apache.commons.functor.UnaryPredicate;\n import org.apache.commons.functor.adapter.RightBoundPredicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * A {@link BinaryPredicate BinaryPredicate} that {@link #test tests}\n@@ -70,10 +71,7 @@ public IsNotEquivalent() {\n      *        be used.\n      */\n     public IsNotEquivalent(Comparator<? super T> comparator) {\n-        if (comparator == null) {\n-            throw new IllegalArgumentException(\"Comparator must not be null\");\n-        }\n-        this.comparator = comparator;\n+        this.comparator = Validate.notNull(comparator, \"Comparator argument must not be null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "b7756d93c01cbc722bfedd480e7e4127ed4cd61a",
                "filename": "src/main/java/org/apache/commons/functor/core/comparator/IsWithinRange.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/comparator/IsWithinRange.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/comparator/IsWithinRange.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/comparator/IsWithinRange.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -18,6 +18,7 @@\n \n import java.io.Serializable;\n import org.apache.commons.functor.UnaryPredicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * A {@link UnaryPredicate} that tests whether a {@link Comparable} object is\n@@ -61,9 +62,8 @@\n      * @param max Comparable\n      */\n     public IsWithinRange(A min, A max) {\n-        if (min == null || max == null) {\n-            throw new IllegalArgumentException(\"min and max must not be null\");\n-        }\n+        Validate.notNull(min, \"min must not be null\");\n+        Validate.notNull(max, \"max must not be null\");\n         if (min.compareTo(max) > 0) {\n             throw new IllegalArgumentException(\"min must be <= max\");\n         }",
                "deletions": 3
            },
            {
                "sha": "6034e799b903c6b2ebb69904a8ecfa5a56f5980a",
                "filename": "src/main/java/org/apache/commons/functor/core/comparator/Max.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/comparator/Max.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/comparator/Max.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/comparator/Max.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -22,6 +22,7 @@\n import org.apache.commons.functor.BinaryFunction;\n import org.apache.commons.functor.UnaryFunction;\n import org.apache.commons.functor.adapter.RightBoundFunction;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a {@link Comparator Comparator} to the\n@@ -61,10 +62,7 @@ public Max() {\n      * @param comparator Comparator to use\n      */\n     public Max(Comparator<T> comparator) {\n-        if (comparator == null) {\n-            throw new IllegalArgumentException(\"Comparator argument must not be null\");\n-        }\n-        this.comparator = comparator;\n+        this.comparator = Validate.notNull(comparator, \"Comparator argument must not be null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "7bf9d5194f5e5ce4996315f5147c7b4a48f97c3a",
                "filename": "src/main/java/org/apache/commons/functor/core/comparator/Min.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/comparator/Min.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/comparator/Min.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/comparator/Min.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -22,6 +22,7 @@\n import org.apache.commons.functor.BinaryFunction;\n import org.apache.commons.functor.UnaryFunction;\n import org.apache.commons.functor.adapter.RightBoundFunction;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Adapts a {@link Comparator Comparator} to the\n@@ -61,10 +62,7 @@ public Min() {\n      * @param comparator to use\n      */\n     public Min(Comparator<T> comparator) {\n-        if (comparator == null) {\n-            throw new IllegalArgumentException(\"Comparator argument must not be null\");\n-        }\n-        this.comparator = comparator;\n+        this.comparator = Validate.notNull(comparator, \"Comparator argument must not be null\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "98c1b8ced733e6d0d4f9ab708374b67f3a3a4d94",
                "filename": "src/main/java/org/apache/commons/functor/core/composite/BaseBinaryPredicateList.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/BaseBinaryPredicateList.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/BaseBinaryPredicateList.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/composite/BaseBinaryPredicateList.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -21,6 +21,7 @@\n import java.util.List;\n \n import org.apache.commons.functor.BinaryPredicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Abstract base class for {@link BinaryPredicate BinaryPredicates}\n@@ -116,10 +117,7 @@ protected BaseBinaryPredicateList(Iterable<BinaryPredicate<? super L, ? super R>\n      * @param p BinaryPredicate to add\n      */\n     protected void addBinaryPredicate(BinaryPredicate<? super L, ? super R> p) {\n-        if (p == null) {\n-            throw new IllegalArgumentException(\"Cannot add null BinaryPredicate\");\n-        }\n-        list.add(p);\n+        list.add(Validate.notNull(p, \"Cannot add null BinaryPredicate\"));\n     }\n \n     // protected",
                "deletions": 4
            },
            {
                "sha": "93b824f200b183a4fa2e550bd6e49437b009e673",
                "filename": "src/main/java/org/apache/commons/functor/core/composite/BasePredicateList.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/BasePredicateList.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/BasePredicateList.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/composite/BasePredicateList.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -21,6 +21,7 @@\n import java.util.List;\n \n import org.apache.commons.functor.Predicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Abstract base class for {@link Predicate Predicates}\n@@ -112,10 +113,7 @@ protected BasePredicateList(Iterable<Predicate> predicates) {\n      * @param p Predicate to add\n      */\n     protected void addPredicate(Predicate p) {\n-        if (p == null) {\n-            throw new IllegalArgumentException(\"Cannot add null Predicate\");\n-        }\n-        list.add(p);\n+        list.add(Validate.notNull(p, \"Cannot add null Predicate\"));\n     }\n \n     // protected",
                "deletions": 4
            },
            {
                "sha": "da6d590af067f506fc41f0368d81d2f972051668",
                "filename": "src/main/java/org/apache/commons/functor/core/composite/BaseUnaryPredicateList.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/BaseUnaryPredicateList.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/BaseUnaryPredicateList.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/composite/BaseUnaryPredicateList.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -21,6 +21,7 @@\n import java.util.List;\n \n import org.apache.commons.functor.UnaryPredicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Abstract base class for {@link UnaryPredicate UnaryPredicates}\n@@ -114,10 +115,7 @@ protected BaseUnaryPredicateList(Iterable<UnaryPredicate<? super A>> predicates)\n      * @param p UnaryPredicate to add\n      */\n     protected void addUnaryPredicate(UnaryPredicate<? super A> p) {\n-        if (p == null) {\n-            throw new IllegalArgumentException(\"Cannot add null UnaryPredicate\");\n-        }\n-        list.add(p);\n+        list.add(Validate.notNull(p, \"Cannot add null UnaryPredicate\"));\n     }\n \n     // protected",
                "deletions": 4
            },
            {
                "sha": "0f081a33e7ec4567671e022b3773308b8ccf4a9f",
                "filename": "src/main/java/org/apache/commons/functor/core/composite/BinaryCompositeBinaryFunction.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/BinaryCompositeBinaryFunction.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/BinaryCompositeBinaryFunction.java",
                "status": "modified",
                "changes": 10,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/composite/BinaryCompositeBinaryFunction.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -19,6 +19,7 @@\n import java.io.Serializable;\n \n import org.apache.commons.functor.BinaryFunction;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * A {@link BinaryFunction BinaryFunction} composed of\n@@ -113,10 +114,11 @@ public T evaluate(L left, R right) {\n      */\n     public <G, H> BinaryCompositeBinaryFunction(BinaryFunction<? super G, ? super H, ? extends T> f,\n             BinaryFunction<? super L, ? super R, ? extends G> g, BinaryFunction<? super L, ? super R, ? extends H> h) {\n-        if (f == null || g == null || h == null) {\n-            throw new IllegalArgumentException(\"BinaryFunction arguments may not be null\");\n-        }\n-        this.helper = new Helper<G, H, L, R, T>(f, g, h);\n+        this.helper = new Helper<G, H, L, R, T>(\n+                Validate.notNull(f, \"final BinaryFunction argument must not be null\"),\n+                Validate.notNull(g, \"left preceding BinaryFunction argument must not be null\"),\n+                Validate.notNull(h, \"right preceding BinaryFunction argument must not be null\")\n+        );\n     }\n \n     // function interface",
                "deletions": 4
            },
            {
                "sha": "860648301970108cc1556ec47dad57a30ad225a2",
                "filename": "src/main/java/org/apache/commons/functor/core/composite/BinaryNot.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/BinaryNot.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/BinaryNot.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/composite/BinaryNot.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -19,6 +19,7 @@\n import java.io.Serializable;\n \n import org.apache.commons.functor.BinaryPredicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * {@link #test Tests} to the logical inverse\n@@ -55,10 +56,7 @@\n      * @param predicate BinaryPredicate to negate\n      */\n     public BinaryNot(BinaryPredicate<? super L, ? super R> predicate) {\n-        if (predicate == null) {\n-            throw new IllegalArgumentException(\"BinaryPredicate argument was null\");\n-        }\n-        this.predicate = predicate;\n+        this.predicate = Validate.notNull(predicate, \"BinaryPredicate argument was null\");\n     }\n \n     // predicate interface",
                "deletions": 4
            },
            {
                "sha": "ff862b478ec48127ddbb49d3acca22e4e435a68b",
                "filename": "src/main/java/org/apache/commons/functor/core/composite/CompositeUnaryFunction.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/CompositeUnaryFunction.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/CompositeUnaryFunction.java",
                "status": "modified",
                "changes": 10,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/composite/CompositeUnaryFunction.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -19,6 +19,7 @@\n import java.io.Serializable;\n \n import org.apache.commons.functor.UnaryFunction;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * A {@link UnaryFunction UnaryFunction}\n@@ -148,10 +149,7 @@ public String toString() {\n      * @param function UnaryFunction to call\n      */\n     public CompositeUnaryFunction(UnaryFunction<? super A, ? extends T> function) {\n-        if (function == null) {\n-            throw new IllegalArgumentException(\"function must not be null\");\n-        }\n-        this.function = function;\n+        this.function = Validate.notNull(function, \"function must not be null\");\n     }\n \n     /**\n@@ -180,9 +178,7 @@ public final T evaluate(A obj) {\n      * @return CompositeUnaryFunction<P, T>\n      */\n     public final <P> CompositeUnaryFunction<P, T> of(UnaryFunction<? super P, ? extends A> preceding) {\n-        if (preceding == null) {\n-            throw new IllegalArgumentException(\"preceding function was null\");\n-        }\n+        Validate.notNull(preceding, \"preceding function was null\");\n         return new CompositeUnaryFunction<P, T>(function, preceding);\n     }\n ",
                "deletions": 7
            },
            {
                "sha": "d0f76299e3679107109c8f624ac0ab73361169db",
                "filename": "src/main/java/org/apache/commons/functor/core/composite/CompositeUnaryPredicate.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/CompositeUnaryPredicate.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/CompositeUnaryPredicate.java",
                "status": "modified",
                "changes": 9,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/composite/CompositeUnaryPredicate.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -21,6 +21,7 @@\n import org.apache.commons.functor.UnaryFunction;\n import org.apache.commons.functor.UnaryPredicate;\n import org.apache.commons.functor.adapter.UnaryPredicateUnaryFunction;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * A {@link UnaryPredicate UnaryPredicate}\n@@ -65,10 +66,10 @@\n      * @param predicate UnaryPredicate against which the composite functions' output will be tested\n      */\n     public CompositeUnaryPredicate(UnaryPredicate<? super A> predicate) {\n-        if (null == predicate) {\n-            throw new IllegalArgumentException(\"predicate must not be null\");\n-        }\n-        this.function = new CompositeUnaryFunction<A, Boolean>(new UnaryPredicateUnaryFunction<A>(predicate));\n+        this.function =\n+            new CompositeUnaryFunction<A, Boolean>(\n+                new UnaryPredicateUnaryFunction<A>(Validate.notNull(predicate,\n+                    \"predicate must not be null\")));\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "0af44a8b47da645a1da48b2ecb73b2894b19bc07",
                "filename": "src/main/java/org/apache/commons/functor/core/composite/CompositeUnaryProcedure.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/CompositeUnaryProcedure.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/CompositeUnaryProcedure.java",
                "status": "modified",
                "changes": 9,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/composite/CompositeUnaryProcedure.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -21,6 +21,7 @@\n import org.apache.commons.functor.UnaryFunction;\n import org.apache.commons.functor.UnaryProcedure;\n import org.apache.commons.functor.adapter.UnaryProcedureUnaryFunction;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * A {@link UnaryProcedure UnaryProcedure}\n@@ -65,10 +66,10 @@\n      * @param procedure final UnaryProcedure to run\n      */\n     public CompositeUnaryProcedure(UnaryProcedure<? super A> procedure) {\n-        if (null == procedure) {\n-            throw new IllegalArgumentException(\"procedure must not be null\");\n-        }\n-        this.function = new CompositeUnaryFunction<A, Object>(new UnaryProcedureUnaryFunction<A, Object>(procedure));\n+        this.function =\n+            new CompositeUnaryFunction<A, Object>(\n+                new UnaryProcedureUnaryFunction<A, Object>(Validate.notNull(\n+                    procedure, \"procedure must not be null\")));\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "317f4cc4b9a086f29d06aa1c11d0666afe027ab0",
                "filename": "src/main/java/org/apache/commons/functor/core/composite/ConditionalBinaryFunction.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/ConditionalBinaryFunction.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/ConditionalBinaryFunction.java",
                "status": "modified",
                "changes": 13,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/composite/ConditionalBinaryFunction.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.BinaryFunction;\n import org.apache.commons.functor.BinaryPredicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * A {@link BinaryFunction BinaryFunction}\n@@ -78,15 +79,9 @@\n     public ConditionalBinaryFunction(BinaryPredicate<? super L, ? super R> ifPred,\n             BinaryFunction<? super L, ? super R, ? extends T> thenFunc,\n             BinaryFunction<? super L, ? super R, ? extends T> elseFunc) {\n-        if (ifPred == null) {\n-            throw new IllegalArgumentException(\"BinaryPredicate argument was null\");\n-        }\n-        if (thenFunc == null || elseFunc == null) {\n-            throw new IllegalArgumentException(\"One or more BinaryFunction arguments was null\");\n-        }\n-        this.ifPred = ifPred;\n-        this.thenFunc = thenFunc;\n-        this.elseFunc = elseFunc;\n+        this.ifPred = Validate.notNull(ifPred, \"BinaryPredicate argument was null\");\n+        this.thenFunc = Validate.notNull(thenFunc, \"'then' BinaryFunction argument was null\");\n+        this.elseFunc = Validate.notNull(elseFunc, \"'else' BinaryFunction argument was null\");\n     }\n \n     // predicate interface",
                "deletions": 9
            },
            {
                "sha": "5e3f8f54a34abbb42df376ca2b58e6b7d6fbc8bd",
                "filename": "src/main/java/org/apache/commons/functor/core/composite/ConditionalBinaryPredicate.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/ConditionalBinaryPredicate.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/ConditionalBinaryPredicate.java",
                "status": "modified",
                "changes": 10,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/composite/ConditionalBinaryPredicate.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -19,6 +19,7 @@\n import java.io.Serializable;\n \n import org.apache.commons.functor.BinaryPredicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * A {@link BinaryPredicate BinaryPredicate}\n@@ -75,12 +76,9 @@\n      */\n     public ConditionalBinaryPredicate(BinaryPredicate<? super L, ? super R> ifPred,\n             BinaryPredicate<? super L, ? super R> thenPred, BinaryPredicate<? super L, ? super R> elsePred) {\n-        if (ifPred == null || thenPred == null || elsePred == null) {\n-            throw new IllegalArgumentException(\"One or more BinaryPredicate arguments was null\");\n-        }\n-        this.ifPred = ifPred;\n-        this.thenPred = thenPred;\n-        this.elsePred = elsePred;\n+        this.ifPred = Validate.notNull(ifPred, \"'if' BinaryPredicate argument was null\");\n+        this.thenPred = Validate.notNull(thenPred, \"'then' BinaryPredicate argument was null\");\n+        this.elsePred = Validate.notNull(elsePred, \"'else' BinaryPredicate argument was null\");\n     }\n \n     // predicate interface",
                "deletions": 6
            },
            {
                "sha": "8daf0ffe96fa326ee12288d3d90a230d8c6c35cc",
                "filename": "src/main/java/org/apache/commons/functor/core/composite/ConditionalBinaryProcedure.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/ConditionalBinaryProcedure.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/ConditionalBinaryProcedure.java",
                "status": "modified",
                "changes": 13,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/composite/ConditionalBinaryProcedure.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -21,6 +21,7 @@\n import org.apache.commons.functor.BinaryPredicate;\n import org.apache.commons.functor.BinaryProcedure;\n import org.apache.commons.functor.core.NoOp;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * A {@link BinaryProcedure BinaryProcedure}\n@@ -88,15 +89,9 @@ public ConditionalBinaryProcedure(BinaryPredicate<? super L, ? super R> ifPred,\n      */\n     public ConditionalBinaryProcedure(BinaryPredicate<? super L, ? super R> ifPred,\n             BinaryProcedure<? super L, ? super R> thenProc, BinaryProcedure<? super L, ? super R> elseProc) {\n-        if (ifPred == null) {\n-            throw new IllegalArgumentException(\"BinaryPredicate argument was null\");\n-        }\n-        this.ifPred = ifPred;\n-        if (thenProc == null || elseProc == null) {\n-            throw new IllegalArgumentException(\"One or more BinaryProcedure arguments was null\");\n-        }\n-        this.thenProc = thenProc;\n-        this.elseProc = elseProc;\n+        this.ifPred = Validate.notNull(ifPred, \"BinaryPredicate argument was null\");\n+        this.thenProc = Validate.notNull(thenProc, \"'then' BinaryProcedure argument was null\");\n+        this.elseProc = Validate.notNull(elseProc, \"'else' BinaryProcedure argument was null\");\n     }\n \n     // predicate interface",
                "deletions": 9
            },
            {
                "sha": "a0e60764217a52627ac25152a005a205c02d673e",
                "filename": "src/main/java/org/apache/commons/functor/core/composite/ConditionalFunction.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/ConditionalFunction.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/ConditionalFunction.java",
                "status": "modified",
                "changes": 13,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/composite/ConditionalFunction.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.Function;\n import org.apache.commons.functor.Predicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * A {@link Function Function}\n@@ -74,15 +75,9 @@\n      * @param elseFunc else\n      */\n     public ConditionalFunction(Predicate ifPred, Function<? extends T> thenFunc, Function<? extends T> elseFunc) {\n-        if (ifPred == null) {\n-            throw new IllegalArgumentException(\"Predicate argument was null\");\n-        }\n-        this.ifPred = ifPred;\n-        if (thenFunc == null || elseFunc == null) {\n-            throw new IllegalArgumentException(\"One or more Function arguments was null\");\n-        }\n-        this.thenFunc = thenFunc;\n-        this.elseFunc = elseFunc;\n+        this.ifPred = Validate.notNull(ifPred, \"Predicate argument was null\");\n+        this.thenFunc = Validate.notNull(thenFunc, \"'then' Function argument was null\");\n+        this.elseFunc = Validate.notNull(elseFunc, \"'else' Function argument was null\");\n     }\n \n     // predicate interface",
                "deletions": 9
            },
            {
                "sha": "1a8e6c39714acb68ed5a5972bb0c9c69e5e8047b",
                "filename": "src/main/java/org/apache/commons/functor/core/composite/ConditionalPredicate.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/ConditionalPredicate.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/ConditionalPredicate.java",
                "status": "modified",
                "changes": 10,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/composite/ConditionalPredicate.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -19,6 +19,7 @@\n import java.io.Serializable;\n \n import org.apache.commons.functor.Predicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * A {@link Predicate Predicate}\n@@ -72,12 +73,9 @@\n      * @param elsePred else\n      */\n     public ConditionalPredicate(Predicate ifPred, Predicate thenPred, Predicate elsePred) {\n-        if (ifPred == null || thenPred == null || elsePred == null) {\n-            throw new IllegalArgumentException(\"One or more Predicate arguments was null\");\n-        }\n-        this.ifPred = ifPred;\n-        this.thenPred = thenPred;\n-        this.elsePred = elsePred;\n+        this.ifPred = Validate.notNull(ifPred, \"'if' Predicate argument was null\");\n+        this.thenPred = Validate.notNull(thenPred, \"'then' Predicate argument was null\");\n+        this.elsePred = Validate.notNull(elsePred, \"'else' Predicate argument was null\");\n     }\n \n     // predicate interface",
                "deletions": 6
            },
            {
                "sha": "e96d4aabf9d253f11d881f16c737ee00dfd890ee",
                "filename": "src/main/java/org/apache/commons/functor/core/composite/ConditionalProcedure.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/ConditionalProcedure.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/ConditionalProcedure.java",
                "status": "modified",
                "changes": 13,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/composite/ConditionalProcedure.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -21,6 +21,7 @@\n import org.apache.commons.functor.Predicate;\n import org.apache.commons.functor.Procedure;\n import org.apache.commons.functor.core.NoOp;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * A {@link Procedure Procedure}\n@@ -83,15 +84,9 @@ public ConditionalProcedure(Predicate ifPred, Procedure thenProc) {\n      * @param elseProc else\n      */\n     public ConditionalProcedure(Predicate ifPred, Procedure thenProc, Procedure elseProc) {\n-        if (ifPred == null) {\n-            throw new IllegalArgumentException(\"Predicate argument was null\");\n-        }\n-        this.ifPred = ifPred;\n-        if (thenProc == null || elseProc == null) {\n-            throw new IllegalArgumentException(\"Procedure argument was null\");\n-        }\n-        this.thenProc = thenProc;\n-        this.elseProc = elseProc;\n+        this.ifPred = Validate.notNull(ifPred, \"Predicate argument was null\");\n+        this.thenProc = Validate.notNull(thenProc, \"'then' Procedure argument was null\");\n+        this.elseProc = Validate.notNull(elseProc, \"'else' Procedure argument was null\");\n     }\n \n     // predicate interface",
                "deletions": 9
            },
            {
                "sha": "6da2447ef472f5dd30614b72eb0d6e64958d1c29",
                "filename": "src/main/java/org/apache/commons/functor/core/composite/ConditionalUnaryFunction.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/ConditionalUnaryFunction.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/ConditionalUnaryFunction.java",
                "status": "modified",
                "changes": 15,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/composite/ConditionalUnaryFunction.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.UnaryFunction;\n import org.apache.commons.functor.UnaryPredicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * A {@link UnaryFunction UnaryFunction}\n@@ -75,16 +76,10 @@\n      * @param elseFunc else\n      */\n     public ConditionalUnaryFunction(UnaryPredicate<? super A> ifPred, UnaryFunction<? super A, ? extends T> thenFunc,\n-            UnaryFunction<? super A, ? extends T> elseFunc) {\n-        if (ifPred == null) {\n-            throw new IllegalArgumentException(\"UnaryPredicate argument was null\");\n-        }\n-        this.ifPred = ifPred;\n-        if (thenFunc == null || elseFunc == null) {\n-            throw new IllegalArgumentException(\"One or more UnaryFunction arguments was null\");\n-        }\n-        this.thenFunc = thenFunc;\n-        this.elseFunc = elseFunc;\n+        UnaryFunction<? super A, ? extends T> elseFunc) {\n+        this.ifPred = Validate.notNull(ifPred, \"UnaryPredicate argument was null\");\n+        this.thenFunc = Validate.notNull(thenFunc, \"'then' UnaryFunction argument was null\");\n+        this.elseFunc = Validate.notNull(elseFunc, \"'else' UnaryFunction argument was null\");\n     }\n \n     // predicate interface",
                "deletions": 10
            },
            {
                "sha": "6c411ebf21e7c6201c0a640625f94b7cf3a8f01f",
                "filename": "src/main/java/org/apache/commons/functor/core/composite/ConditionalUnaryPredicate.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/ConditionalUnaryPredicate.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/ConditionalUnaryPredicate.java",
                "status": "modified",
                "changes": 10,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/composite/ConditionalUnaryPredicate.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -19,6 +19,7 @@\n import java.io.Serializable;\n \n import org.apache.commons.functor.UnaryPredicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * A {@link UnaryPredicate UnaryPredicate}\n@@ -74,12 +75,9 @@\n      */\n     public ConditionalUnaryPredicate(UnaryPredicate<? super A> ifPred, UnaryPredicate<? super A> thenPred,\n             UnaryPredicate<? super A> elsePred) {\n-        if (ifPred == null || thenPred == null || elsePred == null) {\n-            throw new IllegalArgumentException(\"One or more UnaryPredicate arguments was null\");\n-        }\n-        this.ifPred = ifPred;\n-        this.thenPred = thenPred;\n-        this.elsePred = elsePred;\n+        this.ifPred = Validate.notNull(ifPred, \"'if' UnaryPredicate argument was null\");\n+        this.thenPred = Validate.notNull(thenPred, \"'then' UnaryPredicate argument was null\");\n+        this.elsePred = Validate.notNull(elsePred, \"'else' UnaryPredicate argument was null\");\n     }\n \n     // predicate interface",
                "deletions": 6
            },
            {
                "sha": "361506d08d74b723490c14bab0ba58db35e3fff6",
                "filename": "src/main/java/org/apache/commons/functor/core/composite/ConditionalUnaryProcedure.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/ConditionalUnaryProcedure.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/ConditionalUnaryProcedure.java",
                "status": "modified",
                "changes": 13,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/composite/ConditionalUnaryProcedure.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -21,6 +21,7 @@\n import org.apache.commons.functor.UnaryPredicate;\n import org.apache.commons.functor.UnaryProcedure;\n import org.apache.commons.functor.core.NoOp;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * A {@link UnaryProcedure UnaryProcedure}\n@@ -85,15 +86,9 @@ public ConditionalUnaryProcedure(UnaryPredicate<? super A> ifPred, UnaryProcedur\n     public ConditionalUnaryProcedure(UnaryPredicate<? super A> ifPred,\n             UnaryProcedure<? super A> thenProc,\n             UnaryProcedure<? super A> elseProc) {\n-        if (ifPred == null) {\n-            throw new IllegalArgumentException(\"UnaryPredicate argument was null\");\n-        }\n-        this.ifPred = ifPred;\n-        if (thenProc == null || elseProc == null) {\n-            throw new IllegalArgumentException(\"One or more UnaryProcedure arguments was null\");\n-        }\n-        this.thenProc = thenProc;\n-        this.elseProc = elseProc;\n+        this.ifPred = Validate.notNull(ifPred, \"UnaryPredicate argument was null\");\n+        this.thenProc = Validate.notNull(thenProc, \"'then' UnaryProcedure argument was null\");\n+        this.elseProc = Validate.notNull(elseProc, \"'else' UnaryProcedure argument was null\");\n     }\n \n     // predicate interface",
                "deletions": 9
            },
            {
                "sha": "67849a636e25ad936957691fc32db832c716b5a8",
                "filename": "src/main/java/org/apache/commons/functor/core/composite/Not.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/Not.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/Not.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/composite/Not.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -19,6 +19,7 @@\n import java.io.Serializable;\n \n import org.apache.commons.functor.Predicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * {@link #test Tests} to the logical inverse\n@@ -54,10 +55,7 @@\n      * @param predicate Predicate to negate\n      */\n     public Not(Predicate predicate) {\n-        if (predicate == null) {\n-            throw new IllegalArgumentException(\"Predicate argument was null\");\n-        }\n-        this.predicate = predicate;\n+        this.predicate = Validate.notNull(predicate, \"Predicate argument was null\");\n     }\n \n     // predicate interface",
                "deletions": 4
            },
            {
                "sha": "f46375f09d3fd515d90b626c0d7b5ec903084c03",
                "filename": "src/main/java/org/apache/commons/functor/core/composite/TransposedFunction.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/TransposedFunction.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/TransposedFunction.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/composite/TransposedFunction.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -19,6 +19,7 @@\n import java.io.Serializable;\n \n import org.apache.commons.functor.BinaryFunction;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Transposes (swaps) the arguments to some other\n@@ -62,10 +63,7 @@\n      * @param function BinaryFunction to transpose.\n      */\n     public TransposedFunction(BinaryFunction<? super R, ? super L, ? extends T> function) {\n-        if (function == null) {\n-            throw new IllegalArgumentException(\"BinaryFunction argument was null\");\n-        }\n-        this.function = function;\n+        this.function = Validate.notNull(function, \"BinaryFunction argument was null\");\n     }\n \n     // functor interface",
                "deletions": 4
            },
            {
                "sha": "ad6e7ee2f46a0561774c911abb0e5bc03afdef3f",
                "filename": "src/main/java/org/apache/commons/functor/core/composite/TransposedPredicate.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/TransposedPredicate.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/TransposedPredicate.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/composite/TransposedPredicate.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -19,6 +19,7 @@\n import java.io.Serializable;\n \n import org.apache.commons.functor.BinaryPredicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Transposes (swaps) the arguments to some other\n@@ -60,10 +61,7 @@\n      * @param predicate the BinaryPredicate to transpose\n      */\n     public TransposedPredicate(BinaryPredicate<? super R, ? super L> predicate) {\n-        if (predicate == null) {\n-            throw new IllegalArgumentException(\"BinaryPredicate argument must not be null\");\n-        }\n-        this.predicate = predicate;\n+        this.predicate = Validate.notNull(predicate, \"BinaryPredicate argument must not be null\");\n     }\n \n     // functor interface",
                "deletions": 4
            },
            {
                "sha": "5bac7f48398cc2d064c3b1dedaf8712ee47b8434",
                "filename": "src/main/java/org/apache/commons/functor/core/composite/TransposedProcedure.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/TransposedProcedure.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/TransposedProcedure.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/composite/TransposedProcedure.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -19,6 +19,7 @@\n import java.io.Serializable;\n \n import org.apache.commons.functor.BinaryProcedure;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Transposes (swaps) the arguments to some other\n@@ -60,10 +61,7 @@\n      * @param procedure BinaryProcedure to transpose\n      */\n     public TransposedProcedure(BinaryProcedure<? super R, ? super L> procedure) {\n-        if (procedure == null) {\n-            throw new IllegalArgumentException(\"BinaryProcedure argument was null\");\n-        }\n-        this.procedure = procedure;\n+        this.procedure = Validate.notNull(procedure, \"BinaryProcedure argument was null\");\n     }\n \n     // functor interface",
                "deletions": 4
            },
            {
                "sha": "f08a6e60a9389c2c71a81a0dcbbca2cabb3b8198",
                "filename": "src/main/java/org/apache/commons/functor/core/composite/UnaryCompositeBinaryFunction.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/UnaryCompositeBinaryFunction.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/UnaryCompositeBinaryFunction.java",
                "status": "modified",
                "changes": 13,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/composite/UnaryCompositeBinaryFunction.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.BinaryFunction;\n import org.apache.commons.functor.UnaryFunction;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * A {@link BinaryFunction BinaryFunction} composed of\n@@ -117,13 +118,11 @@ public T evaluate(L left, R right) {\n      */\n     public <G, H> UnaryCompositeBinaryFunction(BinaryFunction<? super G, ? super H, ? extends T> f,\n             UnaryFunction<? super L, ? extends G> g, UnaryFunction<? super R, ? extends H> h) {\n-        if (f == null) {\n-            throw new IllegalArgumentException(\"BinaryFunction must not be null\");\n-        }\n-        if (g == null || h == null) {\n-            throw new IllegalArgumentException(\"Left and right UnaryFunctions may not be null\");\n-        }\n-        this.helper = new Helper<G, H, L, R, T>(f, g, h);\n+        this.helper = new Helper<G, H, L, R, T>(\n+                Validate.notNull(f, \"BinaryFunction must not be null\"),\n+                Validate.notNull(g, \"left UnaryFunction must not be null\"),\n+                Validate.notNull(h, \"right UnaryFunction must not be null\")\n+        );\n     }\n \n     // function interface",
                "deletions": 7
            },
            {
                "sha": "f2fce42eb48b5c647fc7b04f8ebd0c7ab1258b01",
                "filename": "src/main/java/org/apache/commons/functor/core/composite/UnaryCompositeBinaryPredicate.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/UnaryCompositeBinaryPredicate.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/UnaryCompositeBinaryPredicate.java",
                "status": "modified",
                "changes": 13,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/composite/UnaryCompositeBinaryPredicate.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.functor.BinaryPredicate;\n import org.apache.commons.functor.UnaryFunction;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * A {@link BinaryPredicate BinaryPredicate} composed of\n@@ -116,13 +117,11 @@ public boolean test(L left, R right) {\n      */\n     public <G, H> UnaryCompositeBinaryPredicate(final BinaryPredicate<? super G, ? super H> f,\n             final UnaryFunction<? super L, ? extends G> g, final UnaryFunction<? super R, ? extends H> h) {\n-        if (f == null) {\n-            throw new IllegalArgumentException(\"BinaryPredicate must not be null\");\n-        }\n-        if (g == null || h == null) {\n-            throw new IllegalArgumentException(\"Left and right UnaryFunctions may not be null\");\n-        }\n-        helper = new Helper<G, H, L, R>(f, g, h);\n+        helper = new Helper<G, H, L, R>(\n+                Validate.notNull(f, \"BinaryPredicate must not be null\"),\n+                Validate.notNull(g, \"left UnaryFunction must not be null\"),\n+                Validate.notNull(h, \"right UnaryFunction must not be null\")\n+        );\n     }\n \n     // function interface",
                "deletions": 7
            },
            {
                "sha": "a28e7c674040bb74e484d60b4a19f5bbef4c7b6f",
                "filename": "src/main/java/org/apache/commons/functor/core/composite/UnaryNot.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/UnaryNot.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/core/composite/UnaryNot.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/composite/UnaryNot.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -19,6 +19,7 @@\n import java.io.Serializable;\n \n import org.apache.commons.functor.UnaryPredicate;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * {@link #test Tests} to the logical inverse\n@@ -54,10 +55,7 @@\n      * @param predicate UnaryPredicate to negate\n      */\n     public UnaryNot(UnaryPredicate<? super A> predicate) {\n-        if (predicate == null) {\n-            throw new IllegalArgumentException(\"UnaryPredicate argument was null\");\n-        }\n-        this.predicate = predicate;\n+        this.predicate = Validate.notNull(predicate, \"UnaryPredicate argument was null\");\n     }\n \n     // predicate interface",
                "deletions": 4
            },
            {
                "sha": "4203c5ee48ce4cd9903259847c7452883ae02ce4",
                "filename": "src/main/java/org/apache/commons/functor/generator/FilteredGenerator.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/generator/FilteredGenerator.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/generator/FilteredGenerator.java",
                "status": "modified",
                "changes": 11,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/generator/FilteredGenerator.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -19,6 +19,7 @@\n import org.apache.commons.functor.UnaryPredicate;\n import org.apache.commons.functor.UnaryProcedure;\n import org.apache.commons.functor.core.composite.ConditionalUnaryProcedure;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Generator that filters another Generator by only passing through those elements\n@@ -40,14 +41,8 @@\n      * @param pred filtering UnaryPredicate\n      */\n     public FilteredGenerator(Generator<? extends E> wrapped, UnaryPredicate<? super E> pred) {\n-        super(wrapped);\n-        if (wrapped == null) {\n-            throw new IllegalArgumentException(\"Generator argument was null\");\n-        }\n-        if (pred == null) {\n-            throw new IllegalArgumentException(\"UnaryPredicate argument was null\");\n-        }\n-        this.pred = pred;\n+        super(Validate.notNull(wrapped, \"Generator argument was null\"));\n+        this.pred = Validate.notNull(pred, \"UnaryPredicate argument was null\");\n     }\n \n     /**",
                "deletions": 8
            },
            {
                "sha": "d031821a4a9f72d73d548bf12d7f476dccea4c1e",
                "filename": "src/main/java/org/apache/commons/functor/generator/GenerateUntil.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/generator/GenerateUntil.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/generator/GenerateUntil.java",
                "status": "modified",
                "changes": 11,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/generator/GenerateUntil.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -18,6 +18,7 @@\n \n import org.apache.commons.functor.UnaryPredicate;\n import org.apache.commons.functor.UnaryProcedure;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Wrap another {@link Generator} such that {@link #run(UnaryProcedure)} terminates once\n@@ -39,14 +40,8 @@\n      * @param test {@link UnaryPredicate}\n      */\n     public GenerateUntil(Generator<? extends E> wrapped, UnaryPredicate<? super E> test) {\n-        super(wrapped);\n-        if (wrapped == null) {\n-            throw new IllegalArgumentException(\"Generator argument was null\");\n-        }\n-        if (test == null) {\n-            throw new IllegalArgumentException(\"UnaryPredicate argument was null\");\n-        }\n-        this.test = test;\n+        super(Validate.notNull(wrapped, \"Generator argument was null\"));\n+        this.test = Validate.notNull(test, \"UnaryPredicate argument was null\");\n     }\n \n     /**",
                "deletions": 8
            },
            {
                "sha": "6c0a84d1a1e82406c8c1296a1bc5e8365b5fa25d",
                "filename": "src/main/java/org/apache/commons/functor/generator/GenerateWhile.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/generator/GenerateWhile.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/generator/GenerateWhile.java",
                "status": "modified",
                "changes": 11,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/generator/GenerateWhile.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -18,6 +18,7 @@\n \n import org.apache.commons.functor.UnaryPredicate;\n import org.apache.commons.functor.UnaryProcedure;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Wrap another {@link Generator} such that {@link #run(UnaryProcedure)} continues\n@@ -39,14 +40,8 @@\n      * @param test {@link UnaryPredicate}\n      */\n     public GenerateWhile(Generator<? extends E> wrapped, UnaryPredicate<? super E> test) {\n-        super(wrapped);\n-        if (wrapped == null) {\n-            throw new IllegalArgumentException(\"Generator argument was null\");\n-        }\n-        if (test == null) {\n-            throw new IllegalArgumentException(\"UnaryPredicate argument was null\");\n-        }\n-        this.test = test;\n+        super(Validate.notNull(wrapped, \"Generator argument was null\"));\n+        this.test = Validate.notNull(test, \"UnaryPredicate argument was null\");\n     }\n \n     /**",
                "deletions": 8
            },
            {
                "sha": "f3f2a7c6923a01bc2c875ce9ca2aded769a9f55a",
                "filename": "src/main/java/org/apache/commons/functor/generator/IteratorToGeneratorAdapter.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/generator/IteratorToGeneratorAdapter.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/generator/IteratorToGeneratorAdapter.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/generator/IteratorToGeneratorAdapter.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -15,6 +15,7 @@\n package org.apache.commons.functor.generator;\n \n import org.apache.commons.functor.UnaryProcedure;\n+import org.apache.commons.lang3.Validate;\n \n import java.util.Iterator;\n \n@@ -43,10 +44,7 @@\n      * @param iter Iterator to adapt\n      */\n     public IteratorToGeneratorAdapter(Iterator<? extends E> iter) {\n-        if (null == iter) {\n-            throw new IllegalArgumentException(\"Iterator argument was null\");\n-        }\n-        this.iter = iter;\n+        this.iter = Validate.notNull(iter, \"Iterator argument was null\");\n     }\n \n     // instance methods",
                "deletions": 4
            },
            {
                "sha": "0b1aeb65bc6b883c4f2a89d85d287edd1fe543ce",
                "filename": "src/main/java/org/apache/commons/functor/generator/TransformedGenerator.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/generator/TransformedGenerator.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/generator/TransformedGenerator.java",
                "status": "modified",
                "changes": 11,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/generator/TransformedGenerator.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -18,6 +18,7 @@\n \n import org.apache.commons.functor.UnaryFunction;\n import org.apache.commons.functor.UnaryProcedure;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Generator that transforms the elements of another Generator.\n@@ -39,14 +40,8 @@\n      * @param func UnaryFunction to apply to each element\n      */\n     public TransformedGenerator(Generator<? extends I> wrapped, UnaryFunction<? super I, ? extends E> func) {\n-        super(wrapped);\n-        if (wrapped == null) {\n-            throw new IllegalArgumentException(\"Generator argument was null\");\n-        }\n-        if (func == null) {\n-            throw new IllegalArgumentException(\"UnaryFunction argument was null\");\n-        }\n-        this.func = func;\n+        super(Validate.notNull(wrapped, \"Generator argument was null\"));\n+        this.func = Validate.notNull(func, \"UnaryFunction argument was null\");\n     }\n \n     /**",
                "deletions": 8
            },
            {
                "sha": "6c2fdc8254c6ad480e5a685574ad1386d37d5556",
                "filename": "src/main/java/org/apache/commons/functor/generator/UntilGenerate.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/generator/UntilGenerate.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/generator/UntilGenerate.java",
                "status": "modified",
                "changes": 11,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/generator/UntilGenerate.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -18,6 +18,7 @@\n \n import org.apache.commons.functor.UnaryPredicate;\n import org.apache.commons.functor.UnaryProcedure;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Wrap another {@link Generator} such that {@link #run(UnaryProcedure)} terminates once\n@@ -39,14 +40,8 @@\n      * @param test {@link UnaryPredicate}\n      */\n     public UntilGenerate(UnaryPredicate<? super E> test, Generator<? extends E> wrapped) {\n-        super(wrapped);\n-        if (wrapped == null) {\n-            throw new IllegalArgumentException(\"Generator argument was null\");\n-        }\n-        if (test == null) {\n-            throw new IllegalArgumentException(\"UnaryPredicate argument was null\");\n-        }\n-        this.test = test;\n+        super(Validate.notNull(wrapped, \"Generator argument was null\"));\n+        this.test = Validate.notNull(test, \"UnaryPredicate argument was null\");\n     }\n \n     /**",
                "deletions": 8
            },
            {
                "sha": "f50411e12c62e61ac4dee1483f17cd39d180fdfb",
                "filename": "src/main/java/org/apache/commons/functor/generator/WhileGenerate.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/generator/WhileGenerate.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/main/java/org/apache/commons/functor/generator/WhileGenerate.java",
                "status": "modified",
                "changes": 11,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/generator/WhileGenerate.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -18,6 +18,7 @@\n \n import org.apache.commons.functor.UnaryPredicate;\n import org.apache.commons.functor.UnaryProcedure;\n+import org.apache.commons.lang3.Validate;\n \n /**\n  * Wrap another {@link Generator} such that {@link #run(UnaryProcedure)} continues\n@@ -39,14 +40,8 @@\n      * @param wrapped {@link Generator}\n      */\n     public WhileGenerate(UnaryPredicate<? super E> test, Generator<? extends E> wrapped) {\n-        super(wrapped);\n-        if (wrapped == null) {\n-            throw new IllegalArgumentException(\"Generator argument was null\");\n-        }\n-        if (test == null) {\n-            throw new IllegalArgumentException(\"UnaryPredicate argument was null\");\n-        }\n-        this.test = test;\n+        super(Validate.notNull(wrapped, \"Generator argument was null\"));\n+        this.test = Validate.notNull(test,\"UnaryPredicate argument was null\");\n     }\n \n     /**",
                "deletions": 8
            },
            {
                "sha": "8569466e6b8fe0936973fa149b3b12281a7279c9",
                "filename": "src/test/java/org/apache/commons/functor/core/collection/TestFilteredIterator.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/test/java/org/apache/commons/functor/core/collection/TestFilteredIterator.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/test/java/org/apache/commons/functor/core/collection/TestFilteredIterator.java",
                "status": "modified",
                "changes": 30,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/core/collection/TestFilteredIterator.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -218,28 +218,20 @@ public void testFilterWithNullPredicateReturnsIdentity() {\n         assertSame(iter,FilteredIterator.filter(iter,null));\n     }\n \n-    @Test\n+    @Test(expected = NullPointerException.class)\n     public void testConstructorProhibitsNull() {\n-        try {\n-            new FilteredIterator(null,null);\n-            fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n-            // expected\n-        }\n-        try {\n-            new FilteredIterator(null,Constant.truePredicate());\n-            fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n-            // expected\n-        }\n-        try {\n-            new FilteredIterator(list.iterator(),null);\n-            fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n-            // expected\n-        }\n+        new FilteredIterator(null,null);\n     }\n \n+    @Test(expected = NullPointerException.class)\n+    public void testConstructorProhibitsNull2() {\n+        new FilteredIterator(null,Constant.truePredicate());\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testConstructorProhibitsNull3() {\n+        new FilteredIterator(list.iterator(),null);\n+    }\n \n     // Attributes\n     // ------------------------------------------------------------------------",
                "deletions": 19
            },
            {
                "sha": "2fded3ca369d0ff390fa2aa360c89aec04119bb6",
                "filename": "src/test/java/org/apache/commons/functor/core/collection/TestIsElementOf.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/test/java/org/apache/commons/functor/core/collection/TestIsElementOf.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/test/java/org/apache/commons/functor/core/collection/TestIsElementOf.java",
                "status": "modified",
                "changes": 9,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/core/collection/TestIsElementOf.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -103,14 +103,9 @@ public void testWrapNonCollection() {\n         }\n     }\n \n-    @Test\n+    @Test(expected = NullPointerException.class)\n     public void testTestNull() {\n-        try {\n-            IsElementOf.instance().test(new Integer(5),null);\n-            fail(\"expected IllegalArgumentException\");\n-        } catch (IllegalArgumentException e) {\n-            // expected\n-        }\n+        IsElementOf.instance().test(new Integer(5),null);\n     }\n \n     @Test",
                "deletions": 7
            },
            {
                "sha": "e9fe7723b6fd8ebbd4b92b1e9880a4f6d16001ec",
                "filename": "src/test/java/org/apache/commons/functor/core/collection/TestIsEmpty.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/test/java/org/apache/commons/functor/core/collection/TestIsEmpty.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/test/java/org/apache/commons/functor/core/collection/TestIsEmpty.java",
                "status": "modified",
                "changes": 9,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/core/collection/TestIsEmpty.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -68,14 +68,9 @@ public void testTest() throws Exception {\n         }\n     }\n \n-    @Test\n+    @Test(expected = NullPointerException.class)\n     public void testTestNull() throws Exception {\n-        try {\n-            IsEmpty.instance().test(null);\n-            fail(\"Expected IllegalArgumentException\");\n-        } catch(IllegalArgumentException e) {\n-            // expected\n-        }\n+        IsEmpty.instance().test(null);\n     }\n \n     @Test",
                "deletions": 7
            },
            {
                "sha": "4fd3215ed70ef771eef8a08149bdd058a7d09ec7",
                "filename": "src/test/java/org/apache/commons/functor/core/collection/TestSize.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/test/java/org/apache/commons/functor/core/collection/TestSize.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/test/java/org/apache/commons/functor/core/collection/TestSize.java",
                "status": "modified",
                "changes": 9,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/core/collection/TestSize.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -73,14 +73,9 @@ public void testEvaluate() throws Exception {\n         }\n     }\n \n-    @Test\n+    @Test(expected = NullPointerException.class)\n     public void testEvaluateNull() throws Exception {\n-        try {\n-            Size.instance().evaluate(null);\n-            fail(\"Expected IllegalArgumentException\");\n-        } catch(IllegalArgumentException e) {\n-            // expected\n-        }\n+        Size.instance().evaluate(null);\n     }\n \n     @Test",
                "deletions": 7
            },
            {
                "sha": "5dbb6896063387ce752cc483472af74c76268f0c",
                "filename": "src/test/java/org/apache/commons/functor/core/collection/TestTransformedIterator.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/test/java/org/apache/commons/functor/core/collection/TestTransformedIterator.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/test/java/org/apache/commons/functor/core/collection/TestTransformedIterator.java",
                "status": "modified",
                "changes": 30,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/core/collection/TestTransformedIterator.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -178,28 +178,20 @@ public void testTransformWithNullPredicateReturnsIdentity() {\n         assertSame(iter,TransformedIterator.maybeTransform(iter,null));\n     }\n \n-    @Test\n+    @Test(expected = NullPointerException.class)\n     public void testConstructorProhibitsNull() {\n-        try {\n-            new TransformedIterator<Integer, Integer>(null,null);\n-            fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n-            // expected\n-        }\n-        try {\n-            new TransformedIterator<Integer, Integer>(null,negate);\n-            fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n-            // expected\n-        }\n-        try {\n-            new TransformedIterator<Integer, Integer>(list.iterator(),null);\n-            fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n-            // expected\n-        }\n+        new TransformedIterator<Integer, Integer>(null, null);\n     }\n \n+    @Test(expected = NullPointerException.class)\n+    public void testConstructorProhibitsNull2() {\n+        new TransformedIterator<Integer, Integer>(null, negate);\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testConstructorProhibitsNull3() {\n+        new TransformedIterator<Integer, Integer>(list.iterator(), null);\n+    }\n \n     // Attributes\n     // ------------------------------------------------------------------------",
                "deletions": 19
            },
            {
                "sha": "f7ee3426e6f9b589001946097c17b1ba0b9caa8b",
                "filename": "src/test/java/org/apache/commons/functor/core/comparator/TestIsWithinRange.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/test/java/org/apache/commons/functor/core/comparator/TestIsWithinRange.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/test/java/org/apache/commons/functor/core/comparator/TestIsWithinRange.java",
                "status": "modified",
                "changes": 23,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/core/comparator/TestIsWithinRange.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -56,25 +56,14 @@ public void testTest() throws Exception {\n \n     }\n \n-    @Test\n+    @Test(expected = IllegalArgumentException.class)\n     public void testInvalidRange() {\n-        try {\n-            new IsWithinRange<Integer>(new Integer(5), new Integer(4));\n-            fail(\"should have thrown IllegalArgumentException\");\n-        } catch (IllegalArgumentException e) {\n-            // good\n-        } catch (Exception e) {\n-            fail(\"should have thrown IllegalArgumentException, not \" + e);\n-        }\n+        new IsWithinRange<Integer>(new Integer(5), new Integer(4));\n+    }\n \n-        try {\n-            new IsWithinRange<Integer>(new Integer(5), null);\n-            fail(\"should have thrown IllegalArgumentException\");\n-        } catch (IllegalArgumentException e) {\n-            // good\n-        } catch (Exception e) {\n-            fail(\"should have thrown IllegalArgumentException, not \" + e);\n-        }\n+    @Test(expected = NullPointerException.class)\n+    public void testInvalidRange2() {\n+        new IsWithinRange<Integer>(new Integer(5), null);\n     }\n \n     @Test",
                "deletions": 17
            },
            {
                "sha": "ea26b4ba9757161ab79a5b01cf70436169950f95",
                "filename": "src/test/java/org/apache/commons/functor/core/composite/TestCompositeUnaryPredicate.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/test/java/org/apache/commons/functor/core/composite/TestCompositeUnaryPredicate.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/test/java/org/apache/commons/functor/core/composite/TestCompositeUnaryPredicate.java",
                "status": "modified",
                "changes": 22,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/core/composite/TestCompositeUnaryPredicate.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -49,21 +49,15 @@ public void testTest() throws Exception {\n         assertFalse(Composite.predicate(Constant.FALSE, Constant.of(4)).test(\"xyzzy\"));\n     }\n \n-    @Test\n-    @SuppressWarnings(\"unchecked\")\n+    @Test(expected = NullPointerException.class)\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     public void testNullNotAllowed() throws Exception {\n-        try {\n-            new CompositeUnaryPredicate(null);\n-            fail(\"Expected IllegalArgumentException\");\n-        } catch(IllegalArgumentException e) {\n-            // expected\n-        }\n-        try {\n-            Composite.function(Constant.TRUE, null);\n-            fail(\"Expected IllegalArgumentException\");\n-        } catch(IllegalArgumentException e) {\n-            // expected\n-        }\n+        new CompositeUnaryPredicate(null);\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testNullNotAllowed2() throws Exception {\n+        Composite.function(Constant.TRUE, null);\n     }\n \n     @Test",
                "deletions": 14
            },
            {
                "sha": "44d400da2ee38362f58f686240ffd28c3c5da694",
                "filename": "src/test/java/org/apache/commons/functor/generator/TestIteratorToGeneratorAdapter.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/test/java/org/apache/commons/functor/generator/TestIteratorToGeneratorAdapter.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e9d85d70d3eb4ea988c610185b0e4f46424a7235/src/test/java/org/apache/commons/functor/generator/TestIteratorToGeneratorAdapter.java",
                "status": "modified",
                "changes": 9,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/generator/TestIteratorToGeneratorAdapter.java?ref=e9d85d70d3eb4ea988c610185b0e4f46424a7235",
                "patch": "@@ -84,14 +84,9 @@ public void testGenerate() {\n         assertEquals(list,list2);\n     }\n \n-    @Test\n+    @Test(expected = NullPointerException.class)\n     public void testConstructNull() {\n-        try {\n-            new IteratorToGeneratorAdapter(null);\n-            fail(\"Expected NullPointerException\");\n-        } catch(IllegalArgumentException e) {\n-            // expected\n-        }\n+        new IteratorToGeneratorAdapter(null);\n     }\n \n     @Test",
                "deletions": 7
            }
        ]
    },
    {
        "repo": "commons-functor",
        "message": "fixed checkstyle violations: Unused @throws tag for 'NullPointerException', 'ClassCastException'\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/functor/trunk@1156745 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-functor/commit/0636ce6a67255698b5d4da586676ba7a90afbe62",
        "parent": "https://github.com/apache/commons-functor/commit/c6aacef29c03bb6c5c94cc4e531a60f3ce731b58",
        "bug_id": "commons-functor_2",
        "file": [
            {
                "sha": "418436904ea40136586fd983590cba0f63403009",
                "filename": "src/main/java/org/apache/commons/functor/adapter/BinaryFunctionBinaryPredicate.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/0636ce6a67255698b5d4da586676ba7a90afbe62/src/main/java/org/apache/commons/functor/adapter/BinaryFunctionBinaryPredicate.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/0636ce6a67255698b5d4da586676ba7a90afbe62/src/main/java/org/apache/commons/functor/adapter/BinaryFunctionBinaryPredicate.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/BinaryFunctionBinaryPredicate.java?ref=0636ce6a67255698b5d4da586676ba7a90afbe62",
                "patch": "@@ -59,9 +59,9 @@ public BinaryFunctionBinaryPredicate(final BinaryFunction<? super L, ? super R,\n      * {@link BinaryFunction#evaluate evaluate} method of my underlying\n      * function.\n      *\n-     * @throws NullPointerException if my underlying function returns\n-     * <code>null</code>\n-     * @throws ClassCastException if my underlying function returns a\n+     * The mehod throws NullPointerException if the underlying function returns\n+     * <code>null</code>, and\n+     * ClassCastException if the underlying function returns a\n      * non-<code>Boolean</code>\n      */\n     public boolean test(final L left, final R right) {",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "commons-functor",
        "message": "fixed checkstyle violations: Unused @throws tag for 'NullPointerException' and 'ClassCastException'.\t\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/functor/trunk@1157647 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-functor/commit/0b250293ced208b1190f00eacf2328e40c01859d",
        "parent": "https://github.com/apache/commons-functor/commit/2e1805e4aebb59b4ede3d30031d54f1f1a14259e",
        "bug_id": "commons-functor_3",
        "file": [
            {
                "sha": "29c02dfbd545ada701e8d38e8596865d7139e764",
                "filename": "src/main/java/org/apache/commons/functor/adapter/UnaryFunctionUnaryPredicate.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/0b250293ced208b1190f00eacf2328e40c01859d/src/main/java/org/apache/commons/functor/adapter/UnaryFunctionUnaryPredicate.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/0b250293ced208b1190f00eacf2328e40c01859d/src/main/java/org/apache/commons/functor/adapter/UnaryFunctionUnaryPredicate.java",
                "status": "modified",
                "changes": 3,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/UnaryFunctionUnaryPredicate.java?ref=0b250293ced208b1190f00eacf2328e40c01859d",
                "patch": "@@ -63,9 +63,6 @@ public UnaryFunctionUnaryPredicate(UnaryFunction<? super A, Boolean> function) {\n      * Returns the <code>boolean</code> value of the non-<code>null</code>\n      * <code>Boolean</code> returned by the {@link UnaryFunction#evaluate evaluate}\n      * method of my underlying function.\n-     *\n-     * @throws NullPointerException if my underlying function returns <code>null</code>\n-     * @throws ClassCastException if my underlying function returns a non-<code>Boolean</code>\n      */\n     public boolean test(A obj) {\n         return function.evaluate(obj);",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "commons-functor",
        "message": "fixed checkstyle violations: Unused @throws tag for 'NullPointerException' and 'ClassCastException'.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/functor/trunk@1157608 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-functor/commit/15f604e9d2bc95f51eff7369d53dde99fbfa7d4c",
        "parent": "https://github.com/apache/commons-functor/commit/83db6f9106492a0f93fe0cfba99cf683e44ee098",
        "bug_id": "commons-functor_4",
        "file": [
            {
                "sha": "bb1514296e891c258bbf79e85e5052a017444b2a",
                "filename": "src/main/java/org/apache/commons/functor/adapter/FunctionPredicate.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/15f604e9d2bc95f51eff7369d53dde99fbfa7d4c/src/main/java/org/apache/commons/functor/adapter/FunctionPredicate.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/15f604e9d2bc95f51eff7369d53dde99fbfa7d4c/src/main/java/org/apache/commons/functor/adapter/FunctionPredicate.java",
                "status": "modified",
                "changes": 2,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/adapter/FunctionPredicate.java?ref=15f604e9d2bc95f51eff7369d53dde99fbfa7d4c",
                "patch": "@@ -61,8 +61,6 @@ public FunctionPredicate(Function<Boolean> function) {\n      * <code>Boolean</code> returned by the {@link Function#evaluate evaluate}\n      * method of my underlying function.\n      * {@inheritDoc}\n-     * @throws NullPointerException if my underlying function returns <code>null</code>\n-     * @throws ClassCastException if my underlying function returns a non-<code>Boolean</code>\n      */\n     public boolean test() {\n         return function.evaluate();",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "commons-functor",
        "message": "expected NPE, caucght IAE, tests were broken\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/functor/trunk@1344781 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-functor/commit/c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d",
        "parent": "https://github.com/apache/commons-functor/commit/e738aefa204b5e9420a8af0b6882e9be0db4d325",
        "bug_id": "commons-functor_5",
        "file": [
            {
                "sha": "7d7a0aa318b24e8fce67b6ecbcf8908bbdb2f1ec",
                "filename": "src/test/java/org/apache/commons/functor/generator/TestFilteredGenerator.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d/src/test/java/org/apache/commons/functor/generator/TestFilteredGenerator.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d/src/test/java/org/apache/commons/functor/generator/TestFilteredGenerator.java",
                "status": "modified",
                "changes": 28,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/generator/TestFilteredGenerator.java?ref=c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d",
                "patch": "@@ -38,13 +38,13 @@\n  */\n public class TestFilteredGenerator\n {\n-    \n+\n     @Before\n     public void setUp() throws Exception {\n         wrappedGenerator = new IntegerRange(1, 10);\n         filteredGenerator = new FilteredGenerator<Integer>(wrappedGenerator, isEven);\n     }\n-    \n+\n     @After\n     public void tearDown() {\n         wrappedGenerator = null;\n@@ -54,49 +54,49 @@ public void tearDown() {\n \n     // Tests\n     // ------------------------------------------------------------------------\n-    \n+\n     @Test\n     public void testConstructorProhibitsNull() {\n         try {\n             new FilteredGenerator<Integer>(filteredGenerator, null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n         try {\n             new FilteredGenerator<Integer>(null, isEven);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n         try {\n             new FilteredGenerator<Integer>(null, null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n     }\n-    \n+\n     @Test\n     public void testEquals() {\n         Generator<Integer> anotherGenerate = new FilteredGenerator<Integer>(new IntegerRange(1, 10), isEven);\n         assertEquals(filteredGenerator, filteredGenerator);\n         assertEquals(filteredGenerator, anotherGenerate);\n         assertTrue(!filteredGenerator.equals((FilteredGenerator<Integer>)null));\n-        \n+\n \t\tGenerator<Integer> aGenerateWithADifferentPredicate = new FilteredGenerator<Integer>(\n \t\t\tnew IntegerRange(1, 10), new UnaryPredicate<Integer>() {\n \t\t\t\tpublic boolean test(Integer obj) {\n \t\t\t\t\treturn obj % 2 == 0;\n \t\t\t\t}\n \t\t\t});\n-\t\t\n+\n         assertTrue(!filteredGenerator.equals(aGenerateWithADifferentPredicate));\n-        \n+\n         Generator<Integer> aGenerateWithADifferentWrapped = new FilteredGenerator<Integer>(new IntegerRange(1,11), isEven);\n         assertTrue(!filteredGenerator.equals(aGenerateWithADifferentWrapped));\n     }\n-    \n+\n     @Test\n     public void testHashcode() {\n         assertEquals(filteredGenerator.hashCode(), filteredGenerator.hashCode());\n@@ -108,7 +108,7 @@ public void testHashcode() {\n             }\n         }.hashCode());\n     }\n-    \n+\n     @Test\n     public void testGenerate() {\n     \tfinal List<Integer> evenNumbers = new ArrayList<Integer>();\n@@ -118,7 +118,7 @@ public void run(Integer obj) {\n     \t\t}\n \t\t});\n     \tassertEquals(4, evenNumbers.size());\n-    \t\n+\n     \tList<Integer> expected = Arrays.asList(2, 4, 6, 8);\n     \tassertEquals(expected, evenNumbers);\n     }\n@@ -133,5 +133,5 @@ public boolean test( Integer obj ) {\n         }\n     };\n     private Generator<Integer> filteredGenerator = null;\n-    \n+\n }",
                "deletions": 14
            },
            {
                "sha": "a130a5b797147f66a4167723ecb7859dea8bfc7d",
                "filename": "src/test/java/org/apache/commons/functor/generator/TestGenerateUntil.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d/src/test/java/org/apache/commons/functor/generator/TestGenerateUntil.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d/src/test/java/org/apache/commons/functor/generator/TestGenerateUntil.java",
                "status": "modified",
                "changes": 24,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/generator/TestGenerateUntil.java?ref=c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d",
                "patch": "@@ -33,13 +33,13 @@\n  */\n public class TestGenerateUntil\n {\n-    \n+\n     @Before\n     public void setUp() throws Exception {\n         wrappedGenerator = new IntegerRange(1, 10);\n         generateUntil = new GenerateUntil<Integer>(wrappedGenerator, isMoreThanFive);\n     }\n-    \n+\n     @After\n     public void tearDown() {\n         wrappedGenerator = null;\n@@ -49,49 +49,49 @@ public void tearDown() {\n \n     // Tests\n     // ------------------------------------------------------------------------\n-    \n+\n     @Test\n     public void testConstructorProhibitsNull() {\n         try {\n             new GenerateUntil<Integer>(generateUntil, null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n         try {\n             new GenerateUntil<Integer>(null, isMoreThanFive);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n         try {\n             new GenerateUntil<Integer>(null, null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n     }\n-    \n+\n     @Test\n     public void testEquals() {\n         Generator<Integer> anotherGenerate = new GenerateUntil<Integer>(new IntegerRange(1, 10), isMoreThanFive);\n         assertEquals(generateUntil, generateUntil);\n         assertEquals(generateUntil, anotherGenerate);\n         assertTrue(!generateUntil.equals((GenerateUntil<Integer>)null));\n-        \n+\n \t\tGenerator<Integer> aGenerateWithADifferentPredicate = new GenerateUntil<Integer>(\n-\t\t\t\tnew IntegerRange(1, 10), \n+\t\t\t\tnew IntegerRange(1, 10),\n \t\t\t\tnew UnaryPredicate<Integer>() {\n \t\t\t\tpublic boolean test(Integer obj) {\n \t\t\t\t\treturn obj > FIVE;\n \t\t\t\t}\n \t\t\t});\n         assertTrue(!generateUntil.equals(aGenerateWithADifferentPredicate));\n-        \n+\n         Generator<Integer> aGenerateWithADifferentWrapped = new GenerateUntil<Integer>(new IntegerRange(1,2), isMoreThanFive);\n         assertTrue(!generateUntil.equals(aGenerateWithADifferentWrapped));\n     }\n-    \n+\n     @Test\n     public void testHashcode() {\n         assertEquals(generateUntil.hashCode(), generateUntil.hashCode());\n@@ -108,7 +108,7 @@ public void testHashcode() {\n     // Attributes\n     // ------------------------------------------------------------------------\n     private static final Integer FIVE = new Integer(5);\n-    \n+\n     private Generator<Integer> wrappedGenerator = null;\n     private UnaryPredicate<Integer> isMoreThanFive = new UnaryPredicate<Integer>() {\n         public boolean test( Integer obj ) {",
                "deletions": 12
            },
            {
                "sha": "72a3aa0dc39f5a9687400c341a04ab23f39d1ffc",
                "filename": "src/test/java/org/apache/commons/functor/generator/TestGenerateWhile.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d/src/test/java/org/apache/commons/functor/generator/TestGenerateWhile.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d/src/test/java/org/apache/commons/functor/generator/TestGenerateWhile.java",
                "status": "modified",
                "changes": 26,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/generator/TestGenerateWhile.java?ref=c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d",
                "patch": "@@ -33,13 +33,13 @@\n  */\n public class TestGenerateWhile\n {\n-    \n+\n     @Before\n     public void setUp() throws Exception {\n         wrappedGenerator = new IntegerRange(1, 10);\n         generateWhile = new GenerateWhile<Integer>(wrappedGenerator, isLessThanFive);\n     }\n-    \n+\n     @After\n     public void tearDown() {\n         wrappedGenerator = null;\n@@ -49,49 +49,49 @@ public void tearDown() {\n \n     // Tests\n     // ------------------------------------------------------------------------\n-    \n+\n     @Test\n     public void testConstructorProhibitsNull() {\n         try {\n             new GenerateWhile<Integer>(generateWhile, null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n         try {\n             new GenerateWhile<Integer>(null, isLessThanFive);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n         try {\n             new GenerateWhile<Integer>(null, null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n     }\n-    \n+\n     @Test\n     public void testEquals() {\n         Generator<Integer> anotherGenerate = new GenerateWhile<Integer>(new IntegerRange(1, 10), isLessThanFive);\n         assertEquals(generateWhile, generateWhile);\n         assertEquals(generateWhile, anotherGenerate);\n         assertTrue(!generateWhile.equals((GenerateWhile<Integer>)null));\n-        \n+\n \t\tGenerator<Integer> aGenerateWithADifferentPredicate = new GenerateWhile<Integer>(\n \t\t\tnew IntegerRange(1, 10), new UnaryPredicate<Integer>() {\n \t\t\t\tpublic boolean test(Integer obj) {\n \t\t\t\t\treturn obj < FIVE;\n \t\t\t\t}\n \t\t\t});\n-\t\t\n+\n         assertTrue(!generateWhile.equals(aGenerateWithADifferentPredicate));\n-        \n+\n         Generator<Integer> aGenerateWithADifferentWrapped = new GenerateWhile<Integer>(new IntegerRange(1,11), isLessThanFive);\n         assertTrue(!generateWhile.equals(aGenerateWithADifferentWrapped));\n     }\n-    \n+\n     @Test\n     public void testHashcode() {\n         assertEquals(generateWhile.hashCode(), generateWhile.hashCode());\n@@ -107,7 +107,7 @@ public void testHashcode() {\n     // Attributes\n     // ------------------------------------------------------------------------\n     private static final Integer FIVE = new Integer(5);\n-\t\n+\n     private Generator<Integer> wrappedGenerator = null;\n     private UnaryPredicate<Integer> isLessThanFive = new UnaryPredicate<Integer>()\n     {\n@@ -116,5 +116,5 @@ public boolean test( Integer obj ) {\n         }\n     };\n     private Generator<Integer> generateWhile = null;\n-    \n+\n }",
                "deletions": 13
            },
            {
                "sha": "5a13b6655667212b47b3ee00420c6497ebd897e5",
                "filename": "src/test/java/org/apache/commons/functor/generator/TestTransformedGenerator.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d/src/test/java/org/apache/commons/functor/generator/TestTransformedGenerator.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d/src/test/java/org/apache/commons/functor/generator/TestTransformedGenerator.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/generator/TestTransformedGenerator.java?ref=c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d",
                "patch": "@@ -56,19 +56,19 @@ public void testConstructorProhibitsNull() {\n         try {\n             new TransformedGenerator<Integer, Integer>(null, sumsTwo);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n         try {\n             new TransformedGenerator<Integer, Integer>(wrappedGenerator, null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n         try {\n             new TransformedGenerator<Integer, Integer>(null, null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n     }",
                "deletions": 3
            },
            {
                "sha": "3a25584e231739ec992d7a2d0cc1777c89bd1c0c",
                "filename": "src/test/java/org/apache/commons/functor/generator/TestUntilGenerate.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d/src/test/java/org/apache/commons/functor/generator/TestUntilGenerate.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d/src/test/java/org/apache/commons/functor/generator/TestUntilGenerate.java",
                "status": "modified",
                "changes": 26,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/generator/TestUntilGenerate.java?ref=c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d",
                "patch": "@@ -38,13 +38,13 @@\n  */\n public class TestUntilGenerate\n {\n-    \n+\n     @Before\n     public void setUp() throws Exception {\n         wrappedGenerator = new IntegerRange(1, 10);\n         untilGenerate = new UntilGenerate<Integer>(isLessThanFive, wrappedGenerator);\n     }\n-    \n+\n     @After\n     public void tearDown() {\n         wrappedGenerator = null;\n@@ -54,48 +54,48 @@ public void tearDown() {\n \n     // Tests\n     // ------------------------------------------------------------------------\n-    \n+\n     @Test\n     public void testConstructorProhibitsNull() {\n         try {\n             new UntilGenerate<Integer>(null, untilGenerate);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n         try {\n             new UntilGenerate<Integer>(isLessThanFive, null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n         try {\n             new UntilGenerate<Integer>(null, null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n     }\n-    \n+\n     @Test\n     public void testEquals() {\n         Generator<Integer> anotherGenerate = new UntilGenerate<Integer>(isLessThanFive, new IntegerRange(1, 10));\n         assertEquals(untilGenerate, untilGenerate);\n         assertEquals(untilGenerate, anotherGenerate);\n         assertTrue(!untilGenerate.equals((UntilGenerate<Integer>)null));\n-        \n+\n \t\tGenerator<Integer> aGenerateWithADifferentPredicate = new UntilGenerate<Integer>(\n \t\t\tnew UnaryPredicate<Integer>() {\n \t\t\t\tpublic boolean test(Integer obj) {\n \t\t\t\t\treturn obj < FIVE;\n \t\t\t\t}\n \t\t\t}, new IntegerRange(1, 10));\n         assertTrue(!untilGenerate.equals(aGenerateWithADifferentPredicate));\n-        \n+\n         Generator<Integer> aGenerateWithADifferentWrapped = new UntilGenerate<Integer>(isLessThanFive, new IntegerRange(1,2));\n         assertTrue(!untilGenerate.equals(aGenerateWithADifferentWrapped));\n     }\n-    \n+\n     @Test\n     public void testHashcode() {\n         assertEquals(untilGenerate.hashCode(), untilGenerate.hashCode());\n@@ -108,7 +108,7 @@ public void testHashcode() {\n             }\n         }.hashCode());\n     }\n-    \n+\n     @Test\n     public void testGenerate() {\n         final List<Integer> numbersGreaterThanFive = new ArrayList<Integer>();\n@@ -118,15 +118,15 @@ public void run( Integer obj ) {\n             }\n         });\n         assertEquals(5, numbersGreaterThanFive.size());\n-        \n+\n         final List<Integer> expected = Arrays.asList(5, 6, 7, 8, 9);\n         assertEquals(expected, numbersGreaterThanFive);\n     }\n \n     // Attributes\n     // ------------------------------------------------------------------------\n     private static final Integer FIVE = new Integer(5);\n-    \n+\n     private Generator<Integer> wrappedGenerator = null;\n     private UnaryPredicate<Integer> isLessThanFive = new UnaryPredicate<Integer>() {\n         public boolean test( Integer obj ) {",
                "deletions": 13
            },
            {
                "sha": "cc80395f5de869b0cfcbd23dce493803801b5432",
                "filename": "src/test/java/org/apache/commons/functor/generator/TestWhileGenerate.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d/src/test/java/org/apache/commons/functor/generator/TestWhileGenerate.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d/src/test/java/org/apache/commons/functor/generator/TestWhileGenerate.java",
                "status": "modified",
                "changes": 26,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/generator/TestWhileGenerate.java?ref=c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d",
                "patch": "@@ -37,64 +37,64 @@\n  * @author Bruno P. Kinoshita (brunodepaulak@yahoo.com.br)\n  */\n public class TestWhileGenerate {\n-\t\n+\n     @Before\n     public void setUp() throws Exception {\n         wrappedGenerator = new IntegerRange(1, 10);\n         whileGenerate = new WhileGenerate<Integer>(isLessThanFive, wrappedGenerator);\n     }\n-    \n+\n     @After\n     public void tearDown() {\n         wrappedGenerator = null;\n         isLessThanFive = null;\n         whileGenerate = null;\n     }\n-    \n+\n     // Tests\n     // ------------------------------------------------------------------------\n-    \n+\n     @Test\n     public void testConstructorProhibitsNull() {\n         try {\n             new WhileGenerate<Integer>(null, whileGenerate);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n         try {\n             new WhileGenerate<Integer>(isLessThanFive, null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n         try {\n             new WhileGenerate<Integer>(null, null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n     }\n-    \n+\n     @Test\n     public void testEquals() {\n         Generator<Integer> anotherGenerate = new WhileGenerate<Integer>(isLessThanFive, new IntegerRange(1, 10));\n         assertEquals(whileGenerate, whileGenerate);\n         assertEquals(whileGenerate, anotherGenerate);\n         assertTrue(!whileGenerate.equals((WhileGenerate<Integer>)null));\n-        \n+\n \t\tGenerator<Integer> aGenerateWithADifferentPredicate = new WhileGenerate<Integer>(\n \t\t\tnew UnaryPredicate<Integer>() {\n \t\t\t\tpublic boolean test(Integer obj) {\n \t\t\t\t\treturn obj < FIVE;\n \t\t\t\t}\n \t\t\t}, new IntegerRange(1, 10));\n         assertTrue(!whileGenerate.equals(aGenerateWithADifferentPredicate));\n-        \n+\n         Generator<Integer> aGenerateWithADifferentWrapped = new WhileGenerate<Integer>(isLessThanFive, new IntegerRange(1,11));\n         assertTrue(!whileGenerate.equals(aGenerateWithADifferentWrapped));\n     }\n-    \n+\n     @Test\n     public void testHashcode() {\n         assertEquals(whileGenerate.hashCode(), whileGenerate.hashCode());\n@@ -106,7 +106,7 @@ public void testHashcode() {\n             }\n         }.hashCode());\n     }\n-    \n+\n     @Test\n     public void testGenerate() {\n         final List<Integer> numbersMinorThanFive = new ArrayList<Integer>();\n@@ -124,7 +124,7 @@ public void run( Integer obj ) {\n     // Attributes\n     // ------------------------------------------------------------------------\n \tprivate static final Integer FIVE = new Integer(5);\n-\t\n+\n     private Generator<Integer> wrappedGenerator = null;\n     private UnaryPredicate<Integer> isLessThanFive = new UnaryPredicate<Integer>() {\n         public boolean test( Integer obj ) {",
                "deletions": 13
            }
        ]
    },
    {
        "repo": "commons-functor",
        "message": "IllegalArgumentException more to-the-point than NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/functor/trunk@646500 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-functor/commit/1ee2ee2378da773b81c0484b50ad68c8164f86ad",
        "parent": "https://github.com/apache/commons-functor/commit/07c5d143cb9afc8415af1cc0b584119df58686fc",
        "bug_id": "commons-functor_6",
        "file": [
            {
                "sha": "0853f2bb60d3bf291d213addc944b61bfefc28a4",
                "filename": "src/main/java/org/apache/commons/functor/core/collection/TransformedIterator.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/1ee2ee2378da773b81c0484b50ad68c8164f86ad/src/main/java/org/apache/commons/functor/core/collection/TransformedIterator.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/1ee2ee2378da773b81c0484b50ad68c8164f86ad/src/main/java/org/apache/commons/functor/core/collection/TransformedIterator.java",
                "status": "modified",
                "changes": 12,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/collection/TransformedIterator.java?ref=1ee2ee2378da773b81c0484b50ad68c8164f86ad",
                "patch": "@@ -41,12 +41,14 @@\n      * @param function to apply\n      */\n     public TransformedIterator(Iterator iterator, UnaryFunction function) {\n-        if (null == iterator || null == function) {\n-            throw new NullPointerException();\n-        } else {\n-            this.function = function;\n-            this.iterator = iterator;\n+        if (null == iterator) {\n+            throw new IllegalArgumentException(\"Iterator argument was null\");\n         }\n+        if (null == function) {\n+            throw new IllegalArgumentException(\"filtering UnaryFunction argument was null\");\n+        }\n+        this.function = function;\n+        this.iterator = iterator;\n     }\n \n     // iterator methods",
                "deletions": 5
            },
            {
                "sha": "30c40b12b59786c89b3efc7891e24bbbde761ead",
                "filename": "src/test/java/org/apache/commons/functor/core/collection/TestTransformedIterator.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/1ee2ee2378da773b81c0484b50ad68c8164f86ad/src/test/java/org/apache/commons/functor/core/collection/TestTransformedIterator.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/1ee2ee2378da773b81c0484b50ad68c8164f86ad/src/test/java/org/apache/commons/functor/core/collection/TestTransformedIterator.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/core/collection/TestTransformedIterator.java?ref=1ee2ee2378da773b81c0484b50ad68c8164f86ad",
                "patch": "@@ -175,19 +175,19 @@ public void testConstructorProhibitsNull() {\n         try {\n             new TransformedIterator(null,null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(NullPointerException e) {\n+        } catch(IllegalArgumentException e) {\n             // expected\n         }\n         try {\n             new TransformedIterator(null,negate);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(NullPointerException e) {\n+        } catch(IllegalArgumentException e) {\n             // expected\n         }\n         try {\n             new TransformedIterator(list.iterator(),null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(NullPointerException e) {\n+        } catch(IllegalArgumentException e) {\n             // expected\n         }\n     }",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "commons-functor",
        "message": "IllegalArgumentException more to-the-point than NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/functor/trunk@646498 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-functor/commit/28e6c72688908097c9f7e12c1cafca4827315536",
        "parent": "https://github.com/apache/commons-functor/commit/7edb9fc038b4ce1b5ae1b28525b4c560d4548566",
        "bug_id": "commons-functor_7",
        "file": [
            {
                "sha": "2a59ce7bbbf70c6997a0b73f61de9a05de071155",
                "filename": "src/main/java/org/apache/commons/functor/core/collection/FilteredIterator.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/28e6c72688908097c9f7e12c1cafca4827315536/src/main/java/org/apache/commons/functor/core/collection/FilteredIterator.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/28e6c72688908097c9f7e12c1cafca4827315536/src/main/java/org/apache/commons/functor/core/collection/FilteredIterator.java",
                "status": "modified",
                "changes": 12,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/collection/FilteredIterator.java?ref=28e6c72688908097c9f7e12c1cafca4827315536",
                "patch": "@@ -45,12 +45,14 @@\n      * @param predicate to apply\n      */\n     public FilteredIterator(Iterator iterator, UnaryPredicate predicate) {\n-        if (null == iterator || null == predicate) {\n-            throw new NullPointerException();\n-        } else {\n-            this.predicate = predicate;\n-            this.iterator = iterator;\n+        if (null == iterator) {\n+            throw new IllegalArgumentException(\"iterator argument was null\");\n+        }\n+        if (null == predicate) {\n+            throw new IllegalArgumentException(\"filtering predicate argument was null\");\n         }\n+        this.predicate = predicate;\n+        this.iterator = iterator;\n     }\n \n     // iterator methods",
                "deletions": 5
            },
            {
                "sha": "7f6efa13687d2ce01ff12658859dabd65c82b783",
                "filename": "src/test/java/org/apache/commons/functor/core/collection/TestFilteredIterator.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/28e6c72688908097c9f7e12c1cafca4827315536/src/test/java/org/apache/commons/functor/core/collection/TestFilteredIterator.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/28e6c72688908097c9f7e12c1cafca4827315536/src/test/java/org/apache/commons/functor/core/collection/TestFilteredIterator.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/core/collection/TestFilteredIterator.java?ref=28e6c72688908097c9f7e12c1cafca4827315536",
                "patch": "@@ -213,19 +213,19 @@ public void testConstructorProhibitsNull() {\n         try {\n             new FilteredIterator(null,null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(NullPointerException e) {\n+        } catch(IllegalArgumentException e) {\n             // expected\n         }\n         try {\n             new FilteredIterator(null,Constant.truePredicate());\n             fail(\"ExpectedNullPointerException\");\n-        } catch(NullPointerException e) {\n+        } catch(IllegalArgumentException e) {\n             // expected\n         }\n         try {\n             new FilteredIterator(list.iterator(),null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(NullPointerException e) {\n+        } catch(IllegalArgumentException e) {\n             // expected\n         }\n     }",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "commons-functor",
        "message": "IllegalArgumentException more to-the-point than NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/functor/trunk@646495 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-functor/commit/d6da27d20583db629fa71ea572907acf564f5904",
        "parent": "https://github.com/apache/commons-functor/commit/89d6b6f7b74beeefbfe0a3aff209e67c3b06b33e",
        "bug_id": "commons-functor_8",
        "file": [
            {
                "sha": "75c4aa8503ae9d663cff867ba91fcc7e27c3287f",
                "filename": "src/main/java/org/apache/commons/functor/generator/IteratorToGeneratorAdapter.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/d6da27d20583db629fa71ea572907acf564f5904/src/main/java/org/apache/commons/functor/generator/IteratorToGeneratorAdapter.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/d6da27d20583db629fa71ea572907acf564f5904/src/main/java/org/apache/commons/functor/generator/IteratorToGeneratorAdapter.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/generator/IteratorToGeneratorAdapter.java?ref=d6da27d20583db629fa71ea572907acf564f5904",
                "patch": "@@ -40,10 +40,9 @@\n      */\n     public IteratorToGeneratorAdapter(Iterator iter) {\n         if (null == iter) {\n-            throw new NullPointerException();\n-        } else {\n-            this.iter = iter;\n+            throw new IllegalArgumentException(\"Iterator argument was null\");\n         }\n+        this.iter = iter;\n     }\n \n     // instance methods",
                "deletions": 3
            },
            {
                "sha": "524f749cf1cf9168ed125fe2437074cd4c426a41",
                "filename": "src/test/java/org/apache/commons/functor/generator/TestIteratorToGeneratorAdapter.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/d6da27d20583db629fa71ea572907acf564f5904/src/test/java/org/apache/commons/functor/generator/TestIteratorToGeneratorAdapter.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/d6da27d20583db629fa71ea572907acf564f5904/src/test/java/org/apache/commons/functor/generator/TestIteratorToGeneratorAdapter.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/generator/TestIteratorToGeneratorAdapter.java?ref=d6da27d20583db629fa71ea572907acf564f5904",
                "patch": "@@ -90,7 +90,7 @@ public void testConstructNull() {\n         try {\n             new IteratorToGeneratorAdapter(null);\n             fail(\"Expected NullPointerException\");\n-        } catch(NullPointerException e) {\n+        } catch(IllegalArgumentException e) {\n             // expected\n         }\n     }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "commons-functor",
        "message": "fixed checkstyle NP_NULL_ON_SOME_PATH violation: There is a branch of statement that, if executed, guarantees that a null value will be dereferenced, which would generate a NullPointerException when the code is executed.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/functor/trunk@1155559 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-functor/commit/d4cdc442aefa148917b0fc55291e1acd8eb1997f",
        "parent": "https://github.com/apache/commons-functor/commit/5f1723f373f73c2d9ebfebb4b8eeb6fa27e75e62",
        "bug_id": "commons-functor_9",
        "file": [
            {
                "sha": "67518328fb1d99403ded97c7b334db032b06237e",
                "filename": "src/main/java/org/apache/commons/functor/core/comparator/IsEquivalent.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/d4cdc442aefa148917b0fc55291e1acd8eb1997f/src/main/java/org/apache/commons/functor/core/comparator/IsEquivalent.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/d4cdc442aefa148917b0fc55291e1acd8eb1997f/src/main/java/org/apache/commons/functor/core/comparator/IsEquivalent.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/comparator/IsEquivalent.java?ref=d4cdc442aefa148917b0fc55291e1acd8eb1997f",
                "patch": "@@ -90,7 +90,13 @@ public boolean equals(Object that) {\n      * @return boolean\n      */\n     public boolean equals(IsEquivalent<?> that) {\n-        return null != that && null == comparator ? null == that.comparator : comparator.equals(that.comparator);\n+        if (null != that) {\n+            if (null == comparator) {\n+                return null == that.comparator;\n+            }\n+            return comparator.equals(that.comparator);\n+        }\n+        return false;\n     }\n \n     /**",
                "deletions": 1
            },
            {
                "sha": "c7d9ca6774ee8f9234d2e9ff6a036f3cbaaef93d",
                "filename": "src/main/java/org/apache/commons/functor/core/comparator/IsGreaterThan.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/d4cdc442aefa148917b0fc55291e1acd8eb1997f/src/main/java/org/apache/commons/functor/core/comparator/IsGreaterThan.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/d4cdc442aefa148917b0fc55291e1acd8eb1997f/src/main/java/org/apache/commons/functor/core/comparator/IsGreaterThan.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/comparator/IsGreaterThan.java?ref=d4cdc442aefa148917b0fc55291e1acd8eb1997f",
                "patch": "@@ -88,7 +88,13 @@ public boolean equals(Object that) {\n      * @return boolean\n      */\n     public boolean equals(IsGreaterThan<?> that) {\n-        return null != that && null == comparator ? null == that.comparator : comparator.equals(that.comparator);\n+        if (null != that) {\n+            if (null == comparator) {\n+                return null == that.comparator;\n+            }\n+            return comparator.equals(that.comparator);\n+        }\n+        return false;\n     }\n \n     /**",
                "deletions": 1
            },
            {
                "sha": "dd04f8298726c7fdcf53e80b608ae071d312ecc2",
                "filename": "src/main/java/org/apache/commons/functor/core/comparator/IsGreaterThanOrEqual.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/d4cdc442aefa148917b0fc55291e1acd8eb1997f/src/main/java/org/apache/commons/functor/core/comparator/IsGreaterThanOrEqual.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/d4cdc442aefa148917b0fc55291e1acd8eb1997f/src/main/java/org/apache/commons/functor/core/comparator/IsGreaterThanOrEqual.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/comparator/IsGreaterThanOrEqual.java?ref=d4cdc442aefa148917b0fc55291e1acd8eb1997f",
                "patch": "@@ -89,7 +89,13 @@ public boolean equals(Object that) {\n      * @return boolean\n      */\n     public boolean equals(IsGreaterThanOrEqual<?> that) {\n-        return null != that && null == comparator ? null == that.comparator : comparator.equals(that.comparator);\n+        if (null != that) {\n+            if (null == comparator) {\n+                return null == that.comparator;\n+            }\n+            return comparator.equals(that.comparator);\n+        }\n+        return false;\n     }\n \n     /**",
                "deletions": 1
            },
            {
                "sha": "c9041416f0a2749d3f63389d7fa017eea11793ea",
                "filename": "src/main/java/org/apache/commons/functor/core/comparator/IsLessThan.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/d4cdc442aefa148917b0fc55291e1acd8eb1997f/src/main/java/org/apache/commons/functor/core/comparator/IsLessThan.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/d4cdc442aefa148917b0fc55291e1acd8eb1997f/src/main/java/org/apache/commons/functor/core/comparator/IsLessThan.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/comparator/IsLessThan.java?ref=d4cdc442aefa148917b0fc55291e1acd8eb1997f",
                "patch": "@@ -88,7 +88,13 @@ public boolean equals(Object that) {\n      * @return boolean\n      */\n     public boolean equals(IsLessThan<?> that) {\n-        return null != that && null == comparator ? null == that.comparator : comparator.equals(that.comparator);\n+        if (null != that) {\n+            if (null == comparator) {\n+                return null == that.comparator;\n+            }\n+            return comparator.equals(that.comparator);\n+        }\n+        return false;\n     }\n \n     /**",
                "deletions": 1
            },
            {
                "sha": "c8674868e2f55b369afcf82bc7d4403144a23e73",
                "filename": "src/main/java/org/apache/commons/functor/core/comparator/IsLessThanOrEqual.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/d4cdc442aefa148917b0fc55291e1acd8eb1997f/src/main/java/org/apache/commons/functor/core/comparator/IsLessThanOrEqual.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/d4cdc442aefa148917b0fc55291e1acd8eb1997f/src/main/java/org/apache/commons/functor/core/comparator/IsLessThanOrEqual.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/comparator/IsLessThanOrEqual.java?ref=d4cdc442aefa148917b0fc55291e1acd8eb1997f",
                "patch": "@@ -88,7 +88,13 @@ public boolean equals(Object that) {\n      * @return boolean\n      */\n     public boolean equals(IsLessThanOrEqual<?> that) {\n-        return null != that && null == comparator ? null == that.comparator : comparator.equals(that.comparator);\n+        if (null != that) {\n+            if (null == comparator) {\n+                return null == that.comparator;\n+            }\n+            return comparator.equals(that.comparator);\n+        }\n+        return false;\n     }\n \n     /**",
                "deletions": 1
            },
            {
                "sha": "30dff82f32ceae401196772e09aa788ccc1baf8d",
                "filename": "src/main/java/org/apache/commons/functor/core/comparator/IsNotEquivalent.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/d4cdc442aefa148917b0fc55291e1acd8eb1997f/src/main/java/org/apache/commons/functor/core/comparator/IsNotEquivalent.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/d4cdc442aefa148917b0fc55291e1acd8eb1997f/src/main/java/org/apache/commons/functor/core/comparator/IsNotEquivalent.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/comparator/IsNotEquivalent.java?ref=d4cdc442aefa148917b0fc55291e1acd8eb1997f",
                "patch": "@@ -90,7 +90,13 @@ public boolean equals(Object that) {\n      * @return boolean\n      */\n     public boolean equals(IsNotEquivalent<?> that) {\n-        return null != that && null == comparator ? null == that.comparator : comparator.equals(that.comparator);\n+        if (null != that) {\n+            if (null == comparator) {\n+                return null == that.comparator;\n+            }\n+            return comparator.equals(that.comparator);\n+        }\n+        return false;\n     }\n \n     /**",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "commons-functor",
        "message": "[FUNCTOR-21] Added an extra verification in the then() method of UnarySequence to avoid the NPE. Tests in place.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/functor/trunk@1363382 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-functor/commit/f72ca72b68487ad6e9eb9245cc24ff987269bcd1",
        "parent": "https://github.com/apache/commons-functor/commit/fbc0dc7d81d8b4d3c448155c5907e06d996d9d58",
        "bug_id": "commons-functor_10",
        "file": [
            {
                "sha": "05c6de82fff1c3b2de13a6609edabb20d6d0cdfd",
                "filename": "src/main/java/org/apache/commons/functor/core/composite/UnarySequence.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/f72ca72b68487ad6e9eb9245cc24ff987269bcd1/src/main/java/org/apache/commons/functor/core/composite/UnarySequence.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/f72ca72b68487ad6e9eb9245cc24ff987269bcd1/src/main/java/org/apache/commons/functor/core/composite/UnarySequence.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/composite/UnarySequence.java?ref=f72ca72b68487ad6e9eb9245cc24ff987269bcd1",
                "patch": "@@ -98,7 +98,9 @@ public UnarySequence(Iterable<UnaryProcedure<? super A>> procedures) {\n      * @return this\n      */\n     public UnarySequence<A> then(UnaryProcedure<? super A> p) {\n-        list.add(p);\n+        if (p != null) {\n+            list.add(p);\n+        }\n         return this;\n     }\n ",
                "deletions": 1
            },
            {
                "sha": "d3f6323fc7f4c252d269f28f04a7446ff8fa0b10",
                "filename": "src/test/java/org/apache/commons/functor/core/composite/TestUnarySequence.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/f72ca72b68487ad6e9eb9245cc24ff987269bcd1/src/test/java/org/apache/commons/functor/core/composite/TestUnarySequence.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/f72ca72b68487ad6e9eb9245cc24ff987269bcd1/src/test/java/org/apache/commons/functor/core/composite/TestUnarySequence.java",
                "status": "modified",
                "changes": 22,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/core/composite/TestUnarySequence.java?ref=f72ca72b68487ad6e9eb9245cc24ff987269bcd1",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.commons.functor.core.composite;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n \n import java.util.ArrayList;\n import java.util.List;\n@@ -43,6 +44,26 @@ protected Object makeFunctor() {\n     // Tests\n     // ------------------------------------------------------------------------\n \n+    @Test\n+    public void testConstructors() throws Exception {\n+        UnarySequence<Object> seq1 = new UnarySequence<Object>((UnaryProcedure<? super Object>)null);\n+        UnarySequence<Object> seq2 = new UnarySequence<Object>();\n+        assertObjectsAreEqual(seq1, seq2);\n+        \n+        RunCounter p1 = new RunCounter();\n+        RunCounter p2 = new RunCounter();\n+        List<UnaryProcedure<? super Object>> iterable = new ArrayList<UnaryProcedure<? super Object>>();\n+        iterable.add(p1);\n+        iterable.add(p2);\n+        UnarySequence<Object> seq3 = new UnarySequence<Object>(iterable);\n+        UnarySequence<Object> seq4 = new UnarySequence<Object>(p1, p2);\n+        assertObjectsAreEqual(seq3, seq4);\n+        \n+        UnarySequence<Object> seq5 = new UnarySequence<Object>((Iterable<UnaryProcedure<? super Object>>)null);\n+        UnarySequence<Object> seq6 = new UnarySequence<Object>((UnaryProcedure<? super Object>[])null);\n+        assertObjectsAreEqual(seq5, seq6);\n+    }\n+    \n     @Test\n     public void testRunZero() throws Exception {\n         UnarySequence<String> seq = new UnarySequence<String>();\n@@ -110,6 +131,7 @@ public void testEquals() throws Exception {\n         }\n \n         assertObjectsAreNotEqual(p,new NoOp());\n+        assertFalse(p.equals(null));\n     }\n \n     // Classes",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "commons-functor",
        "message": "[FUNCTOR-8] Possible NPE in TransformedGenerator if getWrappedGenerator() is overridden to return null - patch submitted by Bruno P. Kinoshita\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/functor/trunk@1344780 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-functor/commit/e738aefa204b5e9420a8af0b6882e9be0db4d325",
        "parent": "https://github.com/apache/commons-functor/commit/f501421ec00fe5c9a15382ec8355b75b096706f3",
        "bug_id": "commons-functor_11",
        "file": [
            {
                "sha": "40511fa2ebc67718e186a87033c6d8af29dbde87",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/commons-functor/blob/e738aefa204b5e9420a8af0b6882e9be0db4d325/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-functor/raw/e738aefa204b5e9420a8af0b6882e9be0db4d325/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/changes/changes.xml?ref=e738aefa204b5e9420a8af0b6882e9be0db4d325",
                "patch": "@@ -23,6 +23,9 @@\n   </properties>\n   <body>\n     <release version=\"1.0\" date=\"2012-??-??\" description=\"First release.\">\n+      <action dev=\"simonetripodi\" issue=\"FUNCTOR-8\" due-to=\"Bruno P. Kinoshita\">\n+        Possible NPE in TransformedGenerator if getWrappedGenerator() is overridden to return null\n+      </action>\n       <action dev=\"simonetripodi\" issue=\"FUNCTOR-7\" due-to=\"Bruno P. Kinoshita\">\n         Tests for generators\n       </action>",
                "deletions": 0
            },
            {
                "sha": "8c8e3627be4173221bfce2b1bbedd3104df2abd4",
                "filename": "src/main/java/org/apache/commons/functor/generator/TransformedGenerator.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e738aefa204b5e9420a8af0b6882e9be0db4d325/src/main/java/org/apache/commons/functor/generator/TransformedGenerator.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e738aefa204b5e9420a8af0b6882e9be0db4d325/src/main/java/org/apache/commons/functor/generator/TransformedGenerator.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/generator/TransformedGenerator.java?ref=e738aefa204b5e9420a8af0b6882e9be0db4d325",
                "patch": "@@ -86,7 +86,8 @@ public boolean equals(Object obj) {\n     public int hashCode() {\n         int result = \"TransformedGenerator\".hashCode();\n         result <<= 2;\n-        result ^= getWrappedGenerator().hashCode();\n+        Generator<?> gen = getWrappedGenerator();\n+        result ^= gen == null ? 0 : gen.hashCode();\n         result <<= 2;\n         result ^= func.hashCode();\n         return result;",
                "deletions": 1
            },
            {
                "sha": "a1db4529bfdea72fec2d917032cd6d2d5136d3eb",
                "filename": "src/test/java/org/apache/commons/functor/generator/TestTransformedGenerator.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/e738aefa204b5e9420a8af0b6882e9be0db4d325/src/test/java/org/apache/commons/functor/generator/TestTransformedGenerator.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/e738aefa204b5e9420a8af0b6882e9be0db4d325/src/test/java/org/apache/commons/functor/generator/TestTransformedGenerator.java",
                "status": "modified",
                "changes": 41,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/generator/TestTransformedGenerator.java?ref=e738aefa204b5e9420a8af0b6882e9be0db4d325",
                "patch": "@@ -1,10 +1,7 @@\n /*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n  *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n@@ -17,6 +14,7 @@\n package org.apache.commons.functor.generator;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n@@ -33,7 +31,6 @@\n \n /**\n  * Tests the Transformed Generator class.\n- * @author Bruno P. Kinoshita (brunodepaulak@yahoo.com.br)\n  */\n public class TestTransformedGenerator\n {\n@@ -43,7 +40,7 @@ public void setUp() throws Exception {\n         wrappedGenerator = new IntegerRange(1, 10);\n         sumsTwoGenerator = new TransformedGenerator<Integer, Integer>(wrappedGenerator, sumsTwo);\n     }\n-    \n+\n     @After\n     public void tearDown() {\n         wrappedGenerator = null;\n@@ -53,7 +50,7 @@ public void tearDown() {\n \n     // Tests\n     // ------------------------------------------------------------------------\n-    \n+\n     @Test\n     public void testConstructorProhibitsNull() {\n         try {\n@@ -75,10 +72,10 @@ public void testConstructorProhibitsNull() {\n             // expected\n         }\n     }\n-    \n+\n     @Test\n     public void testEquals() {\n-        TransformedGenerator<Integer, Integer> anotherTransformedGenerator = \n+        TransformedGenerator<Integer, Integer> anotherTransformedGenerator =\n                         new TransformedGenerator<Integer, Integer>(wrappedGenerator, sumsTwo);\n         assertEquals(sumsTwoGenerator, sumsTwoGenerator);\n         assertEquals(sumsTwoGenerator, anotherTransformedGenerator);\n@@ -91,18 +88,24 @@ public Integer evaluate( Integer obj ) {\n                 }\n             });\n         assertTrue( !sumsTwoGenerator.equals(aGenerateWithADifferentFunction));\n-        \n-        TransformedGenerator<Integer, Integer> aTransformedGeneratorWithADifferentWrapped = \n+\n+        TransformedGenerator<Integer, Integer> aTransformedGeneratorWithADifferentWrapped =\n         \t\tnew TransformedGenerator<Integer, Integer>(new IntegerRange(1,2), sumsTwo);\n         assertTrue(!sumsTwoGenerator.equals(aTransformedGeneratorWithADifferentWrapped));\n     }\n-    \n+\n     @Test\n     public void testHashcode() {\n         assertEquals(sumsTwoGenerator.hashCode(), sumsTwoGenerator.hashCode());\n         assertEquals(sumsTwoGenerator.hashCode(), new TransformedGenerator<Integer, Integer>(wrappedGenerator, sumsTwo).hashCode());\n+        assertFalse(sumsTwoGenerator.hashCode() == new TransformedGenerator<Integer, Integer>(wrappedGenerator, sumsTwo) {\n+            @Override\n+            protected Generator<? extends Integer> getWrappedGenerator() {\n+                return null;\n+            }\n+        }.hashCode());\n     }\n-    \n+\n     @Test\n     public void testGenerate() {\n         final List<Integer> doubledValues = new ArrayList<Integer>();\n@@ -111,23 +114,23 @@ public void run( Integer obj ) {\n                 doubledValues.add(obj);\n             }\n         });\n-        \n+\n         final List<Integer> expected = Arrays.asList(3, 4, 5, 6, 7, 8, 9, 10 , 11);\n-        \n+\n         assertEquals(9, doubledValues.size());\n         assertEquals(expected, doubledValues);\n     }\n \n     // Attributes\n     // ------------------------------------------------------------------------\n     private static final Integer TWO = new Integer(2);\n-    \n+\n     private Generator<Integer> wrappedGenerator = null;\n     private UnaryFunction<Integer, Integer> sumsTwo = new UnaryFunction<Integer, Integer>() {\n         public Integer evaluate( Integer obj ) {\n             return obj += TWO;\n         }\n     };\n     private TransformedGenerator<Integer, Integer> sumsTwoGenerator = null;\n-    \n+\n }",
                "deletions": 19
            }
        ]
    },
    {
        "repo": "commons-functor",
        "message": "* add tests to restore 100% coverage\n* prevent NPE on hashCode() when children are null, add tests for that\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/functor/trunk@144443 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-functor/commit/d6eeed8ea442ab0754ecfbdd0e4de1dcefcd9a7d",
        "parent": "https://github.com/apache/commons-functor/commit/16599027e2f905d348384ed62546967f62e93b37",
        "bug_id": "commons-functor_12",
        "file": [
            {
                "sha": "b7a10d7667e876acafe41309515561273174edbf",
                "filename": "src/java/org/apache/commons/functor/core/composite/AbstractLoopProcedure.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/d6eeed8ea442ab0754ecfbdd0e4de1dcefcd9a7d/src/java/org/apache/commons/functor/core/composite/AbstractLoopProcedure.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/d6eeed8ea442ab0754ecfbdd0e4de1dcefcd9a7d/src/java/org/apache/commons/functor/core/composite/AbstractLoopProcedure.java",
                "status": "modified",
                "changes": 229,
                "additions": 120,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/java/org/apache/commons/functor/core/composite/AbstractLoopProcedure.java?ref=d6eeed8ea442ab0754ecfbdd0e4de1dcefcd9a7d",
                "patch": "@@ -1,109 +1,120 @@\n-/*\r\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons-sandbox//functor/src/java/org/apache/commons/functor/core/composite/AbstractLoopProcedure.java,v 1.1 2003/11/11 23:36:00 rwaldhoff Exp $\r\n- * ====================================================================\r\n- * The Apache Software License, Version 1.1\r\n- *\r\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\r\n- * reserved.\r\n- *\r\n- * Redistribution and use in source and binary forms, with or without\r\n- * modification, are permitted provided that the following conditions\r\n- * are met:\r\n- *\r\n- * 1. Redistributions of source code must retain the above copyright\r\n- *    notice, this list of conditions and the following disclaimer.\r\n- *\r\n- * 2. Redistributions in binary form must reproduce the above copyright\r\n- *    notice, this list of conditions and the following disclaimer in\r\n- *    the documentation and/or other materials provided with the\r\n- *    distribution.\r\n- *\r\n- * 3. The end-user documentation included with the redistribution,\r\n- *    if any, must include the following acknowledgment:\r\n- *       \"This product includes software developed by the\r\n- *        Apache Software Foundation (http://www.apache.org/).\"\r\n- *    Alternately, this acknowledgment may appear in the software itself,\r\n- *    if and wherever such third-party acknowledgments normally appear.\r\n- *\r\n- * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\r\n- *    Foundation\" must not be used to endorse or promote products derived \r\n- *    from this software without prior written permission. For written\r\n- *    permission, please contact apache@apache.org.\r\n- *\r\n- * 5. Products derived from this software may not be called \"Apache\",\r\n- *    nor may \"Apache\" appear in their name, without prior written\r\n- *    permission of the Apache Software Foundation.\r\n- *\r\n- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n- * SUCH DAMAGE.\r\n- * ====================================================================\r\n- *\r\n- * This software consists of voluntary contributions made by many\r\n- * individuals on behalf of the Apache Software Foundation.  For more\r\n- * information on the Apache Software Foundation, please see\r\n- * <http://www.apache.org/>.\r\n- *\r\n- */\r\n-package org.apache.commons.functor.core.composite;\r\n-\r\n-import org.apache.commons.functor.Predicate;\r\n-import org.apache.commons.functor.Procedure;\r\n-\r\n-import java.io.Serializable;\r\n-\r\n-\r\n-/**\r\n- * Abstract base class for {@link WhileDoProcedure} and {@link DoWhileProcedure}\r\n- * used to implement loop procedures.\r\n- * <p>\r\n- * @version $Revision: 1.1 $ $Date: 2003/11/11 23:36:00 $\r\n- * @author Herve Quiroz\r\n- * @author Rodney Waldhoff\r\n- */\r\n-public abstract class AbstractLoopProcedure implements Procedure, Serializable {\r\n-    protected AbstractLoopProcedure(Predicate condition, Procedure action) {\r\n-        this.condition=condition;\r\n-        this.action=action;\r\n-    }\r\n-\r\n-\tpublic boolean equals(Object object) {\r\n-\t\tif (object instanceof AbstractLoopProcedure) {\t\t\t\r\n-\t\t\tAbstractLoopProcedure that = (AbstractLoopProcedure)object;\r\n-\t\t\treturn (null == getCondition() ? null == that.getCondition() : getCondition().equals(that.getCondition())) &&\r\n-\t\t\t\t(null == getAction() ? null == that.getAction() : getAction().equals(that.getAction())); \r\n-\t\t} else {\r\n-\t\t\treturn false;\r\n-\t\t}\r\n-\t}\r\n-\r\n-\tprotected int hashCode(int hash) {\r\n-\t\thash <<= 4;\r\n-\t\thash ^= action.hashCode();\r\n-\t\thash <<= 4;\r\n-\t\thash ^= condition.hashCode();\r\n-\t\treturn hash;\r\n-\t}\r\n-\r\n-\r\n-\tprotected Predicate getCondition() {\r\n-\t\treturn condition;\r\n-\t}\r\n-\r\n-\tprotected Procedure getAction() {\r\n-\t\treturn action;\r\n-\t}\r\n-\r\n-\tprivate Predicate condition;\r\n-\tprivate Procedure action;\r\n-\r\n-}\r\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons-sandbox//functor/src/java/org/apache/commons/functor/core/composite/AbstractLoopProcedure.java,v 1.2 2003/11/12 00:06:28 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived \n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    nor may \"Apache\" appear in their name, without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.functor.core.composite;\n+\n+import org.apache.commons.functor.Predicate;\n+import org.apache.commons.functor.Procedure;\n+\n+import java.io.Serializable;\n+\n+\n+/**\n+ * Abstract base class for {@link WhileDoProcedure} and {@link DoWhileProcedure}\n+ * used to implement loop procedures.\n+ * <p>\n+ * @version $Revision: 1.2 $ $Date: 2003/11/12 00:06:28 $\n+ * @author Herve Quiroz\n+ * @author Rodney Waldhoff\n+ */\n+public abstract class AbstractLoopProcedure implements Procedure, Serializable {\n+    protected AbstractLoopProcedure(Predicate condition, Procedure action) {\n+        this.condition=condition;\n+        this.action=action;\n+    }\n+\n+\tpublic boolean equals(Object object) {\n+\t\tif (object instanceof AbstractLoopProcedure) {\t\t\t\n+\t\t\tAbstractLoopProcedure that = (AbstractLoopProcedure)object;\n+\t\t\treturn (null == getCondition() ? null == that.getCondition() : getCondition().equals(that.getCondition())) &&\n+\t\t\t\t(null == getAction() ? null == that.getAction() : getAction().equals(that.getAction())); \n+\t\t} else {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\tpublic int hashCode() {\n+\t\treturn hashCode(\"AbstractLoopProcedure\".hashCode());\n+\t}\n+\t\n+\tpublic String toString() {\n+\t\treturn getClass().getName() + \"<\" + getCondition() + \",\" + getAction() + \">\";\n+\t}\n+\tprotected int hashCode(int hash) {\n+\t\thash <<= 4;\n+\t\tif(null != getAction()) {\n+\t\t\thash ^= getAction().hashCode();\n+\t\t}\n+\t\thash <<= 4;\n+\t\tif(null != getCondition()) {\n+\t\t\thash ^= getCondition().hashCode();\n+\t\t}\n+\t\treturn hash;\n+\t}\n+\n+\n+\tprotected Predicate getCondition() {\n+\t\treturn condition;\n+\t}\n+\n+\tprotected Procedure getAction() {\n+\t\treturn action;\n+\t}\n+\n+\tprivate Predicate condition;\n+\tprivate Procedure action;\n+\n+}",
                "deletions": 109
            },
            {
                "sha": "9cf148c491c23ff7cde41cc5a34d6553d46e153b",
                "filename": "src/test/org/apache/commons/functor/core/composite/TestAbstractLoopProcedure.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/d6eeed8ea442ab0754ecfbdd0e4de1dcefcd9a7d/src/test/org/apache/commons/functor/core/composite/TestAbstractLoopProcedure.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/d6eeed8ea442ab0754ecfbdd0e4de1dcefcd9a7d/src/test/org/apache/commons/functor/core/composite/TestAbstractLoopProcedure.java",
                "status": "added",
                "changes": 111,
                "additions": 111,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/org/apache/commons/functor/core/composite/TestAbstractLoopProcedure.java?ref=d6eeed8ea442ab0754ecfbdd0e4de1dcefcd9a7d",
                "patch": "@@ -0,0 +1,111 @@\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons-sandbox//functor/src/test/org/apache/commons/functor/core/composite/TestAbstractLoopProcedure.java,v 1.1 2003/11/12 00:06:28 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived \n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    nor may \"Apache\" appear in their name, without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.functor.core.composite;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.functor.BaseFunctorTest;\n+import org.apache.commons.functor.Predicate;\n+import org.apache.commons.functor.Procedure;\n+import org.apache.commons.functor.core.ConstantPredicate;\n+import org.apache.commons.functor.core.NoOp;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/11/12 00:06:28 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestAbstractLoopProcedure extends BaseFunctorTest {\n+\n+    // Conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestAbstractLoopProcedure(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestAbstractLoopProcedure.class);\n+    }\n+\n+    // Functor Testing Framework\n+    // ------------------------------------------------------------------------\n+\n+    protected Object makeFunctor() {\n+\t\treturn new MockLoopProcedure(new ConstantPredicate(false), new NoOp());\n+    }\n+\n+\t// tests\n+\t// ------------------------------------------------------------------------\n+\tpublic void testEqualsAndHashCodeWithNullArgs() {\n+\t\tProcedure p = new MockLoopProcedure(null,null);\n+\t\tassertNotNull(p.toString());\n+\t\tassertFalse(p.equals(null));\n+\t\tassertTrue(p.equals(p));\n+\t\tassertEquals(p.hashCode(),p.hashCode());\n+\t}\n+\n+}\n+\n+class MockLoopProcedure extends AbstractLoopProcedure {\n+\tpublic MockLoopProcedure(Predicate condition, Procedure action) {\n+\t\tsuper(condition,action);\n+\t}\n+\t\t\n+\tpublic void run() {\n+\t}\n+}",
                "deletions": 0
            },
            {
                "sha": "29eb60e99751dbd01755e1f46eb0637879e4f90c",
                "filename": "src/test/org/apache/commons/functor/core/composite/TestAll.java",
                "blob_url": "https://github.com/apache/commons-functor/blob/d6eeed8ea442ab0754ecfbdd0e4de1dcefcd9a7d/src/test/org/apache/commons/functor/core/composite/TestAll.java",
                "raw_url": "https://github.com/apache/commons-functor/raw/d6eeed8ea442ab0754ecfbdd0e4de1dcefcd9a7d/src/test/org/apache/commons/functor/core/composite/TestAll.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/org/apache/commons/functor/core/composite/TestAll.java?ref=d6eeed8ea442ab0754ecfbdd0e4de1dcefcd9a7d",
                "patch": "@@ -1,5 +1,5 @@\n /* \n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons-sandbox//functor/src/test/org/apache/commons/functor/core/composite/TestAll.java,v 1.6 2003/11/11 23:36:00 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons-sandbox//functor/src/test/org/apache/commons/functor/core/composite/TestAll.java,v 1.7 2003/11/12 00:06:28 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n@@ -61,7 +61,7 @@\n import junit.framework.TestSuite;\n \n /**\n- * @version $Revision: 1.6 $ $Date: 2003/11/11 23:36:00 $\n+ * @version $Revision: 1.7 $ $Date: 2003/11/12 00:06:28 $\n  * @author Rodney Waldhoff\n  */\n public class TestAll extends TestCase {\n@@ -108,6 +108,7 @@ public static Test suite() {\n         suite.addTest(TestConditionalUnaryProcedure.suite());\n         suite.addTest(TestConditionalBinaryProcedure.suite());\n         \n+\t\tsuite.addTest(TestAbstractLoopProcedure.suite());\n \t\tsuite.addTest(TestWhileDoProcedure.suite());\n \t\tsuite.addTest(TestDoWhileProcedure.suite());\n         ",
                "deletions": 2
            }
        ]
    }
]