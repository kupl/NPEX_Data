[{"commit": "https://github.com/apache/commons-functor/commit/c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d", "parent": "https://github.com/apache/commons-functor/commit/e738aefa204b5e9420a8af0b6882e9be0db4d325", "message": "expected NPE, caucght IAE, tests were broken\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/functor/trunk@1344781 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "commons-functor_1", "file": [{"additions": 14, "raw_url": "https://github.com/apache/commons-functor/raw/c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d/src/test/java/org/apache/commons/functor/generator/TestFilteredGenerator.java", "blob_url": "https://github.com/apache/commons-functor/blob/c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d/src/test/java/org/apache/commons/functor/generator/TestFilteredGenerator.java", "sha": "7d7a0aa318b24e8fce67b6ecbcf8908bbdb2f1ec", "changes": 28, "status": "modified", "deletions": 14, "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/generator/TestFilteredGenerator.java?ref=c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d", "patch": "@@ -38,13 +38,13 @@\n  */\n public class TestFilteredGenerator\n {\n-    \n+\n     @Before\n     public void setUp() throws Exception {\n         wrappedGenerator = new IntegerRange(1, 10);\n         filteredGenerator = new FilteredGenerator<Integer>(wrappedGenerator, isEven);\n     }\n-    \n+\n     @After\n     public void tearDown() {\n         wrappedGenerator = null;\n@@ -54,49 +54,49 @@ public void tearDown() {\n \n     // Tests\n     // ------------------------------------------------------------------------\n-    \n+\n     @Test\n     public void testConstructorProhibitsNull() {\n         try {\n             new FilteredGenerator<Integer>(filteredGenerator, null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n         try {\n             new FilteredGenerator<Integer>(null, isEven);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n         try {\n             new FilteredGenerator<Integer>(null, null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n     }\n-    \n+\n     @Test\n     public void testEquals() {\n         Generator<Integer> anotherGenerate = new FilteredGenerator<Integer>(new IntegerRange(1, 10), isEven);\n         assertEquals(filteredGenerator, filteredGenerator);\n         assertEquals(filteredGenerator, anotherGenerate);\n         assertTrue(!filteredGenerator.equals((FilteredGenerator<Integer>)null));\n-        \n+\n \t\tGenerator<Integer> aGenerateWithADifferentPredicate = new FilteredGenerator<Integer>(\n \t\t\tnew IntegerRange(1, 10), new UnaryPredicate<Integer>() {\n \t\t\t\tpublic boolean test(Integer obj) {\n \t\t\t\t\treturn obj % 2 == 0;\n \t\t\t\t}\n \t\t\t});\n-\t\t\n+\n         assertTrue(!filteredGenerator.equals(aGenerateWithADifferentPredicate));\n-        \n+\n         Generator<Integer> aGenerateWithADifferentWrapped = new FilteredGenerator<Integer>(new IntegerRange(1,11), isEven);\n         assertTrue(!filteredGenerator.equals(aGenerateWithADifferentWrapped));\n     }\n-    \n+\n     @Test\n     public void testHashcode() {\n         assertEquals(filteredGenerator.hashCode(), filteredGenerator.hashCode());\n@@ -108,7 +108,7 @@ public void testHashcode() {\n             }\n         }.hashCode());\n     }\n-    \n+\n     @Test\n     public void testGenerate() {\n     \tfinal List<Integer> evenNumbers = new ArrayList<Integer>();\n@@ -118,7 +118,7 @@ public void run(Integer obj) {\n     \t\t}\n \t\t});\n     \tassertEquals(4, evenNumbers.size());\n-    \t\n+\n     \tList<Integer> expected = Arrays.asList(2, 4, 6, 8);\n     \tassertEquals(expected, evenNumbers);\n     }\n@@ -133,5 +133,5 @@ public boolean test( Integer obj ) {\n         }\n     };\n     private Generator<Integer> filteredGenerator = null;\n-    \n+\n }", "filename": "src/test/java/org/apache/commons/functor/generator/TestFilteredGenerator.java"}, {"additions": 12, "raw_url": "https://github.com/apache/commons-functor/raw/c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d/src/test/java/org/apache/commons/functor/generator/TestGenerateUntil.java", "blob_url": "https://github.com/apache/commons-functor/blob/c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d/src/test/java/org/apache/commons/functor/generator/TestGenerateUntil.java", "sha": "a130a5b797147f66a4167723ecb7859dea8bfc7d", "changes": 24, "status": "modified", "deletions": 12, "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/generator/TestGenerateUntil.java?ref=c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d", "patch": "@@ -33,13 +33,13 @@\n  */\n public class TestGenerateUntil\n {\n-    \n+\n     @Before\n     public void setUp() throws Exception {\n         wrappedGenerator = new IntegerRange(1, 10);\n         generateUntil = new GenerateUntil<Integer>(wrappedGenerator, isMoreThanFive);\n     }\n-    \n+\n     @After\n     public void tearDown() {\n         wrappedGenerator = null;\n@@ -49,49 +49,49 @@ public void tearDown() {\n \n     // Tests\n     // ------------------------------------------------------------------------\n-    \n+\n     @Test\n     public void testConstructorProhibitsNull() {\n         try {\n             new GenerateUntil<Integer>(generateUntil, null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n         try {\n             new GenerateUntil<Integer>(null, isMoreThanFive);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n         try {\n             new GenerateUntil<Integer>(null, null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n     }\n-    \n+\n     @Test\n     public void testEquals() {\n         Generator<Integer> anotherGenerate = new GenerateUntil<Integer>(new IntegerRange(1, 10), isMoreThanFive);\n         assertEquals(generateUntil, generateUntil);\n         assertEquals(generateUntil, anotherGenerate);\n         assertTrue(!generateUntil.equals((GenerateUntil<Integer>)null));\n-        \n+\n \t\tGenerator<Integer> aGenerateWithADifferentPredicate = new GenerateUntil<Integer>(\n-\t\t\t\tnew IntegerRange(1, 10), \n+\t\t\t\tnew IntegerRange(1, 10),\n \t\t\t\tnew UnaryPredicate<Integer>() {\n \t\t\t\tpublic boolean test(Integer obj) {\n \t\t\t\t\treturn obj > FIVE;\n \t\t\t\t}\n \t\t\t});\n         assertTrue(!generateUntil.equals(aGenerateWithADifferentPredicate));\n-        \n+\n         Generator<Integer> aGenerateWithADifferentWrapped = new GenerateUntil<Integer>(new IntegerRange(1,2), isMoreThanFive);\n         assertTrue(!generateUntil.equals(aGenerateWithADifferentWrapped));\n     }\n-    \n+\n     @Test\n     public void testHashcode() {\n         assertEquals(generateUntil.hashCode(), generateUntil.hashCode());\n@@ -108,7 +108,7 @@ public void testHashcode() {\n     // Attributes\n     // ------------------------------------------------------------------------\n     private static final Integer FIVE = new Integer(5);\n-    \n+\n     private Generator<Integer> wrappedGenerator = null;\n     private UnaryPredicate<Integer> isMoreThanFive = new UnaryPredicate<Integer>() {\n         public boolean test( Integer obj ) {", "filename": "src/test/java/org/apache/commons/functor/generator/TestGenerateUntil.java"}, {"additions": 13, "raw_url": "https://github.com/apache/commons-functor/raw/c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d/src/test/java/org/apache/commons/functor/generator/TestGenerateWhile.java", "blob_url": "https://github.com/apache/commons-functor/blob/c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d/src/test/java/org/apache/commons/functor/generator/TestGenerateWhile.java", "sha": "72a3aa0dc39f5a9687400c341a04ab23f39d1ffc", "changes": 26, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/generator/TestGenerateWhile.java?ref=c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d", "patch": "@@ -33,13 +33,13 @@\n  */\n public class TestGenerateWhile\n {\n-    \n+\n     @Before\n     public void setUp() throws Exception {\n         wrappedGenerator = new IntegerRange(1, 10);\n         generateWhile = new GenerateWhile<Integer>(wrappedGenerator, isLessThanFive);\n     }\n-    \n+\n     @After\n     public void tearDown() {\n         wrappedGenerator = null;\n@@ -49,49 +49,49 @@ public void tearDown() {\n \n     // Tests\n     // ------------------------------------------------------------------------\n-    \n+\n     @Test\n     public void testConstructorProhibitsNull() {\n         try {\n             new GenerateWhile<Integer>(generateWhile, null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n         try {\n             new GenerateWhile<Integer>(null, isLessThanFive);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n         try {\n             new GenerateWhile<Integer>(null, null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n     }\n-    \n+\n     @Test\n     public void testEquals() {\n         Generator<Integer> anotherGenerate = new GenerateWhile<Integer>(new IntegerRange(1, 10), isLessThanFive);\n         assertEquals(generateWhile, generateWhile);\n         assertEquals(generateWhile, anotherGenerate);\n         assertTrue(!generateWhile.equals((GenerateWhile<Integer>)null));\n-        \n+\n \t\tGenerator<Integer> aGenerateWithADifferentPredicate = new GenerateWhile<Integer>(\n \t\t\tnew IntegerRange(1, 10), new UnaryPredicate<Integer>() {\n \t\t\t\tpublic boolean test(Integer obj) {\n \t\t\t\t\treturn obj < FIVE;\n \t\t\t\t}\n \t\t\t});\n-\t\t\n+\n         assertTrue(!generateWhile.equals(aGenerateWithADifferentPredicate));\n-        \n+\n         Generator<Integer> aGenerateWithADifferentWrapped = new GenerateWhile<Integer>(new IntegerRange(1,11), isLessThanFive);\n         assertTrue(!generateWhile.equals(aGenerateWithADifferentWrapped));\n     }\n-    \n+\n     @Test\n     public void testHashcode() {\n         assertEquals(generateWhile.hashCode(), generateWhile.hashCode());\n@@ -107,7 +107,7 @@ public void testHashcode() {\n     // Attributes\n     // ------------------------------------------------------------------------\n     private static final Integer FIVE = new Integer(5);\n-\t\n+\n     private Generator<Integer> wrappedGenerator = null;\n     private UnaryPredicate<Integer> isLessThanFive = new UnaryPredicate<Integer>()\n     {\n@@ -116,5 +116,5 @@ public boolean test( Integer obj ) {\n         }\n     };\n     private Generator<Integer> generateWhile = null;\n-    \n+\n }", "filename": "src/test/java/org/apache/commons/functor/generator/TestGenerateWhile.java"}, {"additions": 3, "raw_url": "https://github.com/apache/commons-functor/raw/c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d/src/test/java/org/apache/commons/functor/generator/TestTransformedGenerator.java", "blob_url": "https://github.com/apache/commons-functor/blob/c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d/src/test/java/org/apache/commons/functor/generator/TestTransformedGenerator.java", "sha": "5a13b6655667212b47b3ee00420c6497ebd897e5", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/generator/TestTransformedGenerator.java?ref=c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d", "patch": "@@ -56,19 +56,19 @@ public void testConstructorProhibitsNull() {\n         try {\n             new TransformedGenerator<Integer, Integer>(null, sumsTwo);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n         try {\n             new TransformedGenerator<Integer, Integer>(wrappedGenerator, null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n         try {\n             new TransformedGenerator<Integer, Integer>(null, null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n     }", "filename": "src/test/java/org/apache/commons/functor/generator/TestTransformedGenerator.java"}, {"additions": 13, "raw_url": "https://github.com/apache/commons-functor/raw/c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d/src/test/java/org/apache/commons/functor/generator/TestUntilGenerate.java", "blob_url": "https://github.com/apache/commons-functor/blob/c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d/src/test/java/org/apache/commons/functor/generator/TestUntilGenerate.java", "sha": "3a25584e231739ec992d7a2d0cc1777c89bd1c0c", "changes": 26, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/generator/TestUntilGenerate.java?ref=c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d", "patch": "@@ -38,13 +38,13 @@\n  */\n public class TestUntilGenerate\n {\n-    \n+\n     @Before\n     public void setUp() throws Exception {\n         wrappedGenerator = new IntegerRange(1, 10);\n         untilGenerate = new UntilGenerate<Integer>(isLessThanFive, wrappedGenerator);\n     }\n-    \n+\n     @After\n     public void tearDown() {\n         wrappedGenerator = null;\n@@ -54,48 +54,48 @@ public void tearDown() {\n \n     // Tests\n     // ------------------------------------------------------------------------\n-    \n+\n     @Test\n     public void testConstructorProhibitsNull() {\n         try {\n             new UntilGenerate<Integer>(null, untilGenerate);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n         try {\n             new UntilGenerate<Integer>(isLessThanFive, null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n         try {\n             new UntilGenerate<Integer>(null, null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n     }\n-    \n+\n     @Test\n     public void testEquals() {\n         Generator<Integer> anotherGenerate = new UntilGenerate<Integer>(isLessThanFive, new IntegerRange(1, 10));\n         assertEquals(untilGenerate, untilGenerate);\n         assertEquals(untilGenerate, anotherGenerate);\n         assertTrue(!untilGenerate.equals((UntilGenerate<Integer>)null));\n-        \n+\n \t\tGenerator<Integer> aGenerateWithADifferentPredicate = new UntilGenerate<Integer>(\n \t\t\tnew UnaryPredicate<Integer>() {\n \t\t\t\tpublic boolean test(Integer obj) {\n \t\t\t\t\treturn obj < FIVE;\n \t\t\t\t}\n \t\t\t}, new IntegerRange(1, 10));\n         assertTrue(!untilGenerate.equals(aGenerateWithADifferentPredicate));\n-        \n+\n         Generator<Integer> aGenerateWithADifferentWrapped = new UntilGenerate<Integer>(isLessThanFive, new IntegerRange(1,2));\n         assertTrue(!untilGenerate.equals(aGenerateWithADifferentWrapped));\n     }\n-    \n+\n     @Test\n     public void testHashcode() {\n         assertEquals(untilGenerate.hashCode(), untilGenerate.hashCode());\n@@ -108,7 +108,7 @@ public void testHashcode() {\n             }\n         }.hashCode());\n     }\n-    \n+\n     @Test\n     public void testGenerate() {\n         final List<Integer> numbersGreaterThanFive = new ArrayList<Integer>();\n@@ -118,15 +118,15 @@ public void run( Integer obj ) {\n             }\n         });\n         assertEquals(5, numbersGreaterThanFive.size());\n-        \n+\n         final List<Integer> expected = Arrays.asList(5, 6, 7, 8, 9);\n         assertEquals(expected, numbersGreaterThanFive);\n     }\n \n     // Attributes\n     // ------------------------------------------------------------------------\n     private static final Integer FIVE = new Integer(5);\n-    \n+\n     private Generator<Integer> wrappedGenerator = null;\n     private UnaryPredicate<Integer> isLessThanFive = new UnaryPredicate<Integer>() {\n         public boolean test( Integer obj ) {", "filename": "src/test/java/org/apache/commons/functor/generator/TestUntilGenerate.java"}, {"additions": 13, "raw_url": "https://github.com/apache/commons-functor/raw/c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d/src/test/java/org/apache/commons/functor/generator/TestWhileGenerate.java", "blob_url": "https://github.com/apache/commons-functor/blob/c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d/src/test/java/org/apache/commons/functor/generator/TestWhileGenerate.java", "sha": "cc80395f5de869b0cfcbd23dce493803801b5432", "changes": 26, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/generator/TestWhileGenerate.java?ref=c3529b7a4db1f2de91c8b69cf4a3e062aa1c194d", "patch": "@@ -37,64 +37,64 @@\n  * @author Bruno P. Kinoshita (brunodepaulak@yahoo.com.br)\n  */\n public class TestWhileGenerate {\n-\t\n+\n     @Before\n     public void setUp() throws Exception {\n         wrappedGenerator = new IntegerRange(1, 10);\n         whileGenerate = new WhileGenerate<Integer>(isLessThanFive, wrappedGenerator);\n     }\n-    \n+\n     @After\n     public void tearDown() {\n         wrappedGenerator = null;\n         isLessThanFive = null;\n         whileGenerate = null;\n     }\n-    \n+\n     // Tests\n     // ------------------------------------------------------------------------\n-    \n+\n     @Test\n     public void testConstructorProhibitsNull() {\n         try {\n             new WhileGenerate<Integer>(null, whileGenerate);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n         try {\n             new WhileGenerate<Integer>(isLessThanFive, null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n         try {\n             new WhileGenerate<Integer>(null, null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(IllegalArgumentException e) {\n+        } catch(NullPointerException e) {\n             // expected\n         }\n     }\n-    \n+\n     @Test\n     public void testEquals() {\n         Generator<Integer> anotherGenerate = new WhileGenerate<Integer>(isLessThanFive, new IntegerRange(1, 10));\n         assertEquals(whileGenerate, whileGenerate);\n         assertEquals(whileGenerate, anotherGenerate);\n         assertTrue(!whileGenerate.equals((WhileGenerate<Integer>)null));\n-        \n+\n \t\tGenerator<Integer> aGenerateWithADifferentPredicate = new WhileGenerate<Integer>(\n \t\t\tnew UnaryPredicate<Integer>() {\n \t\t\t\tpublic boolean test(Integer obj) {\n \t\t\t\t\treturn obj < FIVE;\n \t\t\t\t}\n \t\t\t}, new IntegerRange(1, 10));\n         assertTrue(!whileGenerate.equals(aGenerateWithADifferentPredicate));\n-        \n+\n         Generator<Integer> aGenerateWithADifferentWrapped = new WhileGenerate<Integer>(isLessThanFive, new IntegerRange(1,11));\n         assertTrue(!whileGenerate.equals(aGenerateWithADifferentWrapped));\n     }\n-    \n+\n     @Test\n     public void testHashcode() {\n         assertEquals(whileGenerate.hashCode(), whileGenerate.hashCode());\n@@ -106,7 +106,7 @@ public void testHashcode() {\n             }\n         }.hashCode());\n     }\n-    \n+\n     @Test\n     public void testGenerate() {\n         final List<Integer> numbersMinorThanFive = new ArrayList<Integer>();\n@@ -124,7 +124,7 @@ public void run( Integer obj ) {\n     // Attributes\n     // ------------------------------------------------------------------------\n \tprivate static final Integer FIVE = new Integer(5);\n-\t\n+\n     private Generator<Integer> wrappedGenerator = null;\n     private UnaryPredicate<Integer> isLessThanFive = new UnaryPredicate<Integer>() {\n         public boolean test( Integer obj ) {", "filename": "src/test/java/org/apache/commons/functor/generator/TestWhileGenerate.java"}], "repo": "commons-functor"}, {"commit": "https://github.com/apache/commons-functor/commit/1ee2ee2378da773b81c0484b50ad68c8164f86ad", "parent": "https://github.com/apache/commons-functor/commit/07c5d143cb9afc8415af1cc0b584119df58686fc", "message": "IllegalArgumentException more to-the-point than NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/functor/trunk@646500 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "commons-functor_2", "file": [{"additions": 7, "raw_url": "https://github.com/apache/commons-functor/raw/1ee2ee2378da773b81c0484b50ad68c8164f86ad/src/main/java/org/apache/commons/functor/core/collection/TransformedIterator.java", "blob_url": "https://github.com/apache/commons-functor/blob/1ee2ee2378da773b81c0484b50ad68c8164f86ad/src/main/java/org/apache/commons/functor/core/collection/TransformedIterator.java", "sha": "0853f2bb60d3bf291d213addc944b61bfefc28a4", "changes": 12, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/collection/TransformedIterator.java?ref=1ee2ee2378da773b81c0484b50ad68c8164f86ad", "patch": "@@ -41,12 +41,14 @@\n      * @param function to apply\n      */\n     public TransformedIterator(Iterator iterator, UnaryFunction function) {\n-        if (null == iterator || null == function) {\n-            throw new NullPointerException();\n-        } else {\n-            this.function = function;\n-            this.iterator = iterator;\n+        if (null == iterator) {\n+            throw new IllegalArgumentException(\"Iterator argument was null\");\n         }\n+        if (null == function) {\n+            throw new IllegalArgumentException(\"filtering UnaryFunction argument was null\");\n+        }\n+        this.function = function;\n+        this.iterator = iterator;\n     }\n \n     // iterator methods", "filename": "src/main/java/org/apache/commons/functor/core/collection/TransformedIterator.java"}, {"additions": 3, "raw_url": "https://github.com/apache/commons-functor/raw/1ee2ee2378da773b81c0484b50ad68c8164f86ad/src/test/java/org/apache/commons/functor/core/collection/TestTransformedIterator.java", "blob_url": "https://github.com/apache/commons-functor/blob/1ee2ee2378da773b81c0484b50ad68c8164f86ad/src/test/java/org/apache/commons/functor/core/collection/TestTransformedIterator.java", "sha": "30c40b12b59786c89b3efc7891e24bbbde761ead", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/core/collection/TestTransformedIterator.java?ref=1ee2ee2378da773b81c0484b50ad68c8164f86ad", "patch": "@@ -175,19 +175,19 @@ public void testConstructorProhibitsNull() {\n         try {\n             new TransformedIterator(null,null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(NullPointerException e) {\n+        } catch(IllegalArgumentException e) {\n             // expected\n         }\n         try {\n             new TransformedIterator(null,negate);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(NullPointerException e) {\n+        } catch(IllegalArgumentException e) {\n             // expected\n         }\n         try {\n             new TransformedIterator(list.iterator(),null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(NullPointerException e) {\n+        } catch(IllegalArgumentException e) {\n             // expected\n         }\n     }", "filename": "src/test/java/org/apache/commons/functor/core/collection/TestTransformedIterator.java"}], "repo": "commons-functor"}, {"commit": "https://github.com/apache/commons-functor/commit/28e6c72688908097c9f7e12c1cafca4827315536", "parent": "https://github.com/apache/commons-functor/commit/7edb9fc038b4ce1b5ae1b28525b4c560d4548566", "message": "IllegalArgumentException more to-the-point than NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/functor/trunk@646498 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "commons-functor_3", "file": [{"additions": 7, "raw_url": "https://github.com/apache/commons-functor/raw/28e6c72688908097c9f7e12c1cafca4827315536/src/main/java/org/apache/commons/functor/core/collection/FilteredIterator.java", "blob_url": "https://github.com/apache/commons-functor/blob/28e6c72688908097c9f7e12c1cafca4827315536/src/main/java/org/apache/commons/functor/core/collection/FilteredIterator.java", "sha": "2a59ce7bbbf70c6997a0b73f61de9a05de071155", "changes": 12, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/collection/FilteredIterator.java?ref=28e6c72688908097c9f7e12c1cafca4827315536", "patch": "@@ -45,12 +45,14 @@\n      * @param predicate to apply\n      */\n     public FilteredIterator(Iterator iterator, UnaryPredicate predicate) {\n-        if (null == iterator || null == predicate) {\n-            throw new NullPointerException();\n-        } else {\n-            this.predicate = predicate;\n-            this.iterator = iterator;\n+        if (null == iterator) {\n+            throw new IllegalArgumentException(\"iterator argument was null\");\n+        }\n+        if (null == predicate) {\n+            throw new IllegalArgumentException(\"filtering predicate argument was null\");\n         }\n+        this.predicate = predicate;\n+        this.iterator = iterator;\n     }\n \n     // iterator methods", "filename": "src/main/java/org/apache/commons/functor/core/collection/FilteredIterator.java"}, {"additions": 3, "raw_url": "https://github.com/apache/commons-functor/raw/28e6c72688908097c9f7e12c1cafca4827315536/src/test/java/org/apache/commons/functor/core/collection/TestFilteredIterator.java", "blob_url": "https://github.com/apache/commons-functor/blob/28e6c72688908097c9f7e12c1cafca4827315536/src/test/java/org/apache/commons/functor/core/collection/TestFilteredIterator.java", "sha": "7f6efa13687d2ce01ff12658859dabd65c82b783", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/core/collection/TestFilteredIterator.java?ref=28e6c72688908097c9f7e12c1cafca4827315536", "patch": "@@ -213,19 +213,19 @@ public void testConstructorProhibitsNull() {\n         try {\n             new FilteredIterator(null,null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(NullPointerException e) {\n+        } catch(IllegalArgumentException e) {\n             // expected\n         }\n         try {\n             new FilteredIterator(null,Constant.truePredicate());\n             fail(\"ExpectedNullPointerException\");\n-        } catch(NullPointerException e) {\n+        } catch(IllegalArgumentException e) {\n             // expected\n         }\n         try {\n             new FilteredIterator(list.iterator(),null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(NullPointerException e) {\n+        } catch(IllegalArgumentException e) {\n             // expected\n         }\n     }", "filename": "src/test/java/org/apache/commons/functor/core/collection/TestFilteredIterator.java"}], "repo": "commons-functor"}, {"commit": "https://github.com/apache/commons-functor/commit/d6da27d20583db629fa71ea572907acf564f5904", "parent": "https://github.com/apache/commons-functor/commit/89d6b6f7b74beeefbfe0a3aff209e67c3b06b33e", "message": "IllegalArgumentException more to-the-point than NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/functor/trunk@646495 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "commons-functor_4", "file": [{"additions": 2, "raw_url": "https://github.com/apache/commons-functor/raw/d6da27d20583db629fa71ea572907acf564f5904/src/main/java/org/apache/commons/functor/generator/IteratorToGeneratorAdapter.java", "blob_url": "https://github.com/apache/commons-functor/blob/d6da27d20583db629fa71ea572907acf564f5904/src/main/java/org/apache/commons/functor/generator/IteratorToGeneratorAdapter.java", "sha": "75c4aa8503ae9d663cff867ba91fcc7e27c3287f", "changes": 5, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/generator/IteratorToGeneratorAdapter.java?ref=d6da27d20583db629fa71ea572907acf564f5904", "patch": "@@ -40,10 +40,9 @@\n      */\n     public IteratorToGeneratorAdapter(Iterator iter) {\n         if (null == iter) {\n-            throw new NullPointerException();\n-        } else {\n-            this.iter = iter;\n+            throw new IllegalArgumentException(\"Iterator argument was null\");\n         }\n+        this.iter = iter;\n     }\n \n     // instance methods", "filename": "src/main/java/org/apache/commons/functor/generator/IteratorToGeneratorAdapter.java"}, {"additions": 1, "raw_url": "https://github.com/apache/commons-functor/raw/d6da27d20583db629fa71ea572907acf564f5904/src/test/java/org/apache/commons/functor/generator/TestIteratorToGeneratorAdapter.java", "blob_url": "https://github.com/apache/commons-functor/blob/d6da27d20583db629fa71ea572907acf564f5904/src/test/java/org/apache/commons/functor/generator/TestIteratorToGeneratorAdapter.java", "sha": "524f749cf1cf9168ed125fe2437074cd4c426a41", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/generator/TestIteratorToGeneratorAdapter.java?ref=d6da27d20583db629fa71ea572907acf564f5904", "patch": "@@ -90,7 +90,7 @@ public void testConstructNull() {\n         try {\n             new IteratorToGeneratorAdapter(null);\n             fail(\"Expected NullPointerException\");\n-        } catch(NullPointerException e) {\n+        } catch(IllegalArgumentException e) {\n             // expected\n         }\n     }", "filename": "src/test/java/org/apache/commons/functor/generator/TestIteratorToGeneratorAdapter.java"}], "repo": "commons-functor"}, {"commit": "https://github.com/apache/commons-functor/commit/f72ca72b68487ad6e9eb9245cc24ff987269bcd1", "parent": "https://github.com/apache/commons-functor/commit/fbc0dc7d81d8b4d3c448155c5907e06d996d9d58", "message": "[FUNCTOR-21] Added an extra verification in the then() method of UnarySequence to avoid the NPE. Tests in place.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/functor/trunk@1363382 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "commons-functor_5", "file": [{"additions": 3, "raw_url": "https://github.com/apache/commons-functor/raw/f72ca72b68487ad6e9eb9245cc24ff987269bcd1/src/main/java/org/apache/commons/functor/core/composite/UnarySequence.java", "blob_url": "https://github.com/apache/commons-functor/blob/f72ca72b68487ad6e9eb9245cc24ff987269bcd1/src/main/java/org/apache/commons/functor/core/composite/UnarySequence.java", "sha": "05c6de82fff1c3b2de13a6609edabb20d6d0cdfd", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/composite/UnarySequence.java?ref=f72ca72b68487ad6e9eb9245cc24ff987269bcd1", "patch": "@@ -98,7 +98,9 @@ public UnarySequence(Iterable<UnaryProcedure<? super A>> procedures) {\n      * @return this\n      */\n     public UnarySequence<A> then(UnaryProcedure<? super A> p) {\n-        list.add(p);\n+        if (p != null) {\n+            list.add(p);\n+        }\n         return this;\n     }\n ", "filename": "src/main/java/org/apache/commons/functor/core/composite/UnarySequence.java"}, {"additions": 22, "raw_url": "https://github.com/apache/commons-functor/raw/f72ca72b68487ad6e9eb9245cc24ff987269bcd1/src/test/java/org/apache/commons/functor/core/composite/TestUnarySequence.java", "blob_url": "https://github.com/apache/commons-functor/blob/f72ca72b68487ad6e9eb9245cc24ff987269bcd1/src/test/java/org/apache/commons/functor/core/composite/TestUnarySequence.java", "sha": "d3f6323fc7f4c252d269f28f04a7446ff8fa0b10", "changes": 22, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/core/composite/TestUnarySequence.java?ref=f72ca72b68487ad6e9eb9245cc24ff987269bcd1", "patch": "@@ -17,6 +17,7 @@\n package org.apache.commons.functor.core.composite;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n \n import java.util.ArrayList;\n import java.util.List;\n@@ -43,6 +44,26 @@ protected Object makeFunctor() {\n     // Tests\n     // ------------------------------------------------------------------------\n \n+    @Test\n+    public void testConstructors() throws Exception {\n+        UnarySequence<Object> seq1 = new UnarySequence<Object>((UnaryProcedure<? super Object>)null);\n+        UnarySequence<Object> seq2 = new UnarySequence<Object>();\n+        assertObjectsAreEqual(seq1, seq2);\n+        \n+        RunCounter p1 = new RunCounter();\n+        RunCounter p2 = new RunCounter();\n+        List<UnaryProcedure<? super Object>> iterable = new ArrayList<UnaryProcedure<? super Object>>();\n+        iterable.add(p1);\n+        iterable.add(p2);\n+        UnarySequence<Object> seq3 = new UnarySequence<Object>(iterable);\n+        UnarySequence<Object> seq4 = new UnarySequence<Object>(p1, p2);\n+        assertObjectsAreEqual(seq3, seq4);\n+        \n+        UnarySequence<Object> seq5 = new UnarySequence<Object>((Iterable<UnaryProcedure<? super Object>>)null);\n+        UnarySequence<Object> seq6 = new UnarySequence<Object>((UnaryProcedure<? super Object>[])null);\n+        assertObjectsAreEqual(seq5, seq6);\n+    }\n+    \n     @Test\n     public void testRunZero() throws Exception {\n         UnarySequence<String> seq = new UnarySequence<String>();\n@@ -110,6 +131,7 @@ public void testEquals() throws Exception {\n         }\n \n         assertObjectsAreNotEqual(p,new NoOp());\n+        assertFalse(p.equals(null));\n     }\n \n     // Classes", "filename": "src/test/java/org/apache/commons/functor/core/composite/TestUnarySequence.java"}], "repo": "commons-functor"}, {"commit": "https://github.com/apache/commons-functor/commit/e738aefa204b5e9420a8af0b6882e9be0db4d325", "parent": "https://github.com/apache/commons-functor/commit/f501421ec00fe5c9a15382ec8355b75b096706f3", "message": "[FUNCTOR-8] Possible NPE in TransformedGenerator if getWrappedGenerator() is overridden to return null - patch submitted by Bruno P. Kinoshita\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/functor/trunk@1344780 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "commons-functor_6", "file": [{"additions": 3, "raw_url": "https://github.com/apache/commons-functor/raw/e738aefa204b5e9420a8af0b6882e9be0db4d325/src/changes/changes.xml", "blob_url": "https://github.com/apache/commons-functor/blob/e738aefa204b5e9420a8af0b6882e9be0db4d325/src/changes/changes.xml", "sha": "40511fa2ebc67718e186a87033c6d8af29dbde87", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/changes/changes.xml?ref=e738aefa204b5e9420a8af0b6882e9be0db4d325", "patch": "@@ -23,6 +23,9 @@\n   </properties>\n   <body>\n     <release version=\"1.0\" date=\"2012-??-??\" description=\"First release.\">\n+      <action dev=\"simonetripodi\" issue=\"FUNCTOR-8\" due-to=\"Bruno P. Kinoshita\">\n+        Possible NPE in TransformedGenerator if getWrappedGenerator() is overridden to return null\n+      </action>\n       <action dev=\"simonetripodi\" issue=\"FUNCTOR-7\" due-to=\"Bruno P. Kinoshita\">\n         Tests for generators\n       </action>", "filename": "src/changes/changes.xml"}, {"additions": 2, "raw_url": "https://github.com/apache/commons-functor/raw/e738aefa204b5e9420a8af0b6882e9be0db4d325/src/main/java/org/apache/commons/functor/generator/TransformedGenerator.java", "blob_url": "https://github.com/apache/commons-functor/blob/e738aefa204b5e9420a8af0b6882e9be0db4d325/src/main/java/org/apache/commons/functor/generator/TransformedGenerator.java", "sha": "8c8e3627be4173221bfce2b1bbedd3104df2abd4", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/generator/TransformedGenerator.java?ref=e738aefa204b5e9420a8af0b6882e9be0db4d325", "patch": "@@ -86,7 +86,8 @@ public boolean equals(Object obj) {\n     public int hashCode() {\n         int result = \"TransformedGenerator\".hashCode();\n         result <<= 2;\n-        result ^= getWrappedGenerator().hashCode();\n+        Generator<?> gen = getWrappedGenerator();\n+        result ^= gen == null ? 0 : gen.hashCode();\n         result <<= 2;\n         result ^= func.hashCode();\n         return result;", "filename": "src/main/java/org/apache/commons/functor/generator/TransformedGenerator.java"}, {"additions": 22, "raw_url": "https://github.com/apache/commons-functor/raw/e738aefa204b5e9420a8af0b6882e9be0db4d325/src/test/java/org/apache/commons/functor/generator/TestTransformedGenerator.java", "blob_url": "https://github.com/apache/commons-functor/blob/e738aefa204b5e9420a8af0b6882e9be0db4d325/src/test/java/org/apache/commons/functor/generator/TestTransformedGenerator.java", "sha": "a1db4529bfdea72fec2d917032cd6d2d5136d3eb", "changes": 41, "status": "modified", "deletions": 19, "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/generator/TestTransformedGenerator.java?ref=e738aefa204b5e9420a8af0b6882e9be0db4d325", "patch": "@@ -1,10 +1,7 @@\n /*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n  *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n@@ -17,6 +14,7 @@\n package org.apache.commons.functor.generator;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n@@ -33,7 +31,6 @@\n \n /**\n  * Tests the Transformed Generator class.\n- * @author Bruno P. Kinoshita (brunodepaulak@yahoo.com.br)\n  */\n public class TestTransformedGenerator\n {\n@@ -43,7 +40,7 @@ public void setUp() throws Exception {\n         wrappedGenerator = new IntegerRange(1, 10);\n         sumsTwoGenerator = new TransformedGenerator<Integer, Integer>(wrappedGenerator, sumsTwo);\n     }\n-    \n+\n     @After\n     public void tearDown() {\n         wrappedGenerator = null;\n@@ -53,7 +50,7 @@ public void tearDown() {\n \n     // Tests\n     // ------------------------------------------------------------------------\n-    \n+\n     @Test\n     public void testConstructorProhibitsNull() {\n         try {\n@@ -75,10 +72,10 @@ public void testConstructorProhibitsNull() {\n             // expected\n         }\n     }\n-    \n+\n     @Test\n     public void testEquals() {\n-        TransformedGenerator<Integer, Integer> anotherTransformedGenerator = \n+        TransformedGenerator<Integer, Integer> anotherTransformedGenerator =\n                         new TransformedGenerator<Integer, Integer>(wrappedGenerator, sumsTwo);\n         assertEquals(sumsTwoGenerator, sumsTwoGenerator);\n         assertEquals(sumsTwoGenerator, anotherTransformedGenerator);\n@@ -91,18 +88,24 @@ public Integer evaluate( Integer obj ) {\n                 }\n             });\n         assertTrue( !sumsTwoGenerator.equals(aGenerateWithADifferentFunction));\n-        \n-        TransformedGenerator<Integer, Integer> aTransformedGeneratorWithADifferentWrapped = \n+\n+        TransformedGenerator<Integer, Integer> aTransformedGeneratorWithADifferentWrapped =\n         \t\tnew TransformedGenerator<Integer, Integer>(new IntegerRange(1,2), sumsTwo);\n         assertTrue(!sumsTwoGenerator.equals(aTransformedGeneratorWithADifferentWrapped));\n     }\n-    \n+\n     @Test\n     public void testHashcode() {\n         assertEquals(sumsTwoGenerator.hashCode(), sumsTwoGenerator.hashCode());\n         assertEquals(sumsTwoGenerator.hashCode(), new TransformedGenerator<Integer, Integer>(wrappedGenerator, sumsTwo).hashCode());\n+        assertFalse(sumsTwoGenerator.hashCode() == new TransformedGenerator<Integer, Integer>(wrappedGenerator, sumsTwo) {\n+            @Override\n+            protected Generator<? extends Integer> getWrappedGenerator() {\n+                return null;\n+            }\n+        }.hashCode());\n     }\n-    \n+\n     @Test\n     public void testGenerate() {\n         final List<Integer> doubledValues = new ArrayList<Integer>();\n@@ -111,23 +114,23 @@ public void run( Integer obj ) {\n                 doubledValues.add(obj);\n             }\n         });\n-        \n+\n         final List<Integer> expected = Arrays.asList(3, 4, 5, 6, 7, 8, 9, 10 , 11);\n-        \n+\n         assertEquals(9, doubledValues.size());\n         assertEquals(expected, doubledValues);\n     }\n \n     // Attributes\n     // ------------------------------------------------------------------------\n     private static final Integer TWO = new Integer(2);\n-    \n+\n     private Generator<Integer> wrappedGenerator = null;\n     private UnaryFunction<Integer, Integer> sumsTwo = new UnaryFunction<Integer, Integer>() {\n         public Integer evaluate( Integer obj ) {\n             return obj += TWO;\n         }\n     };\n     private TransformedGenerator<Integer, Integer> sumsTwoGenerator = null;\n-    \n+\n }", "filename": "src/test/java/org/apache/commons/functor/generator/TestTransformedGenerator.java"}], "repo": "commons-functor"}, {"commit": "https://github.com/apache/commons-functor/commit/d6eeed8ea442ab0754ecfbdd0e4de1dcefcd9a7d", "parent": "https://github.com/apache/commons-functor/commit/16599027e2f905d348384ed62546967f62e93b37", "message": "* add tests to restore 100% coverage\n* prevent NPE on hashCode() when children are null, add tests for that\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/functor/trunk@144443 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "commons-functor_7", "file": [{"additions": 120, "raw_url": "https://github.com/apache/commons-functor/raw/d6eeed8ea442ab0754ecfbdd0e4de1dcefcd9a7d/src/java/org/apache/commons/functor/core/composite/AbstractLoopProcedure.java", "blob_url": "https://github.com/apache/commons-functor/blob/d6eeed8ea442ab0754ecfbdd0e4de1dcefcd9a7d/src/java/org/apache/commons/functor/core/composite/AbstractLoopProcedure.java", "sha": "b7a10d7667e876acafe41309515561273174edbf", "changes": 229, "status": "modified", "deletions": 109, "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/java/org/apache/commons/functor/core/composite/AbstractLoopProcedure.java?ref=d6eeed8ea442ab0754ecfbdd0e4de1dcefcd9a7d", "patch": "@@ -1,109 +1,120 @@\n-/*\r\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons-sandbox//functor/src/java/org/apache/commons/functor/core/composite/AbstractLoopProcedure.java,v 1.1 2003/11/11 23:36:00 rwaldhoff Exp $\r\n- * ====================================================================\r\n- * The Apache Software License, Version 1.1\r\n- *\r\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\r\n- * reserved.\r\n- *\r\n- * Redistribution and use in source and binary forms, with or without\r\n- * modification, are permitted provided that the following conditions\r\n- * are met:\r\n- *\r\n- * 1. Redistributions of source code must retain the above copyright\r\n- *    notice, this list of conditions and the following disclaimer.\r\n- *\r\n- * 2. Redistributions in binary form must reproduce the above copyright\r\n- *    notice, this list of conditions and the following disclaimer in\r\n- *    the documentation and/or other materials provided with the\r\n- *    distribution.\r\n- *\r\n- * 3. The end-user documentation included with the redistribution,\r\n- *    if any, must include the following acknowledgment:\r\n- *       \"This product includes software developed by the\r\n- *        Apache Software Foundation (http://www.apache.org/).\"\r\n- *    Alternately, this acknowledgment may appear in the software itself,\r\n- *    if and wherever such third-party acknowledgments normally appear.\r\n- *\r\n- * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\r\n- *    Foundation\" must not be used to endorse or promote products derived \r\n- *    from this software without prior written permission. For written\r\n- *    permission, please contact apache@apache.org.\r\n- *\r\n- * 5. Products derived from this software may not be called \"Apache\",\r\n- *    nor may \"Apache\" appear in their name, without prior written\r\n- *    permission of the Apache Software Foundation.\r\n- *\r\n- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n- * SUCH DAMAGE.\r\n- * ====================================================================\r\n- *\r\n- * This software consists of voluntary contributions made by many\r\n- * individuals on behalf of the Apache Software Foundation.  For more\r\n- * information on the Apache Software Foundation, please see\r\n- * <http://www.apache.org/>.\r\n- *\r\n- */\r\n-package org.apache.commons.functor.core.composite;\r\n-\r\n-import org.apache.commons.functor.Predicate;\r\n-import org.apache.commons.functor.Procedure;\r\n-\r\n-import java.io.Serializable;\r\n-\r\n-\r\n-/**\r\n- * Abstract base class for {@link WhileDoProcedure} and {@link DoWhileProcedure}\r\n- * used to implement loop procedures.\r\n- * <p>\r\n- * @version $Revision: 1.1 $ $Date: 2003/11/11 23:36:00 $\r\n- * @author Herve Quiroz\r\n- * @author Rodney Waldhoff\r\n- */\r\n-public abstract class AbstractLoopProcedure implements Procedure, Serializable {\r\n-    protected AbstractLoopProcedure(Predicate condition, Procedure action) {\r\n-        this.condition=condition;\r\n-        this.action=action;\r\n-    }\r\n-\r\n-\tpublic boolean equals(Object object) {\r\n-\t\tif (object instanceof AbstractLoopProcedure) {\t\t\t\r\n-\t\t\tAbstractLoopProcedure that = (AbstractLoopProcedure)object;\r\n-\t\t\treturn (null == getCondition() ? null == that.getCondition() : getCondition().equals(that.getCondition())) &&\r\n-\t\t\t\t(null == getAction() ? null == that.getAction() : getAction().equals(that.getAction())); \r\n-\t\t} else {\r\n-\t\t\treturn false;\r\n-\t\t}\r\n-\t}\r\n-\r\n-\tprotected int hashCode(int hash) {\r\n-\t\thash <<= 4;\r\n-\t\thash ^= action.hashCode();\r\n-\t\thash <<= 4;\r\n-\t\thash ^= condition.hashCode();\r\n-\t\treturn hash;\r\n-\t}\r\n-\r\n-\r\n-\tprotected Predicate getCondition() {\r\n-\t\treturn condition;\r\n-\t}\r\n-\r\n-\tprotected Procedure getAction() {\r\n-\t\treturn action;\r\n-\t}\r\n-\r\n-\tprivate Predicate condition;\r\n-\tprivate Procedure action;\r\n-\r\n-}\r\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons-sandbox//functor/src/java/org/apache/commons/functor/core/composite/AbstractLoopProcedure.java,v 1.2 2003/11/12 00:06:28 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived \n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    nor may \"Apache\" appear in their name, without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.functor.core.composite;\n+\n+import org.apache.commons.functor.Predicate;\n+import org.apache.commons.functor.Procedure;\n+\n+import java.io.Serializable;\n+\n+\n+/**\n+ * Abstract base class for {@link WhileDoProcedure} and {@link DoWhileProcedure}\n+ * used to implement loop procedures.\n+ * <p>\n+ * @version $Revision: 1.2 $ $Date: 2003/11/12 00:06:28 $\n+ * @author Herve Quiroz\n+ * @author Rodney Waldhoff\n+ */\n+public abstract class AbstractLoopProcedure implements Procedure, Serializable {\n+    protected AbstractLoopProcedure(Predicate condition, Procedure action) {\n+        this.condition=condition;\n+        this.action=action;\n+    }\n+\n+\tpublic boolean equals(Object object) {\n+\t\tif (object instanceof AbstractLoopProcedure) {\t\t\t\n+\t\t\tAbstractLoopProcedure that = (AbstractLoopProcedure)object;\n+\t\t\treturn (null == getCondition() ? null == that.getCondition() : getCondition().equals(that.getCondition())) &&\n+\t\t\t\t(null == getAction() ? null == that.getAction() : getAction().equals(that.getAction())); \n+\t\t} else {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\tpublic int hashCode() {\n+\t\treturn hashCode(\"AbstractLoopProcedure\".hashCode());\n+\t}\n+\t\n+\tpublic String toString() {\n+\t\treturn getClass().getName() + \"<\" + getCondition() + \",\" + getAction() + \">\";\n+\t}\n+\tprotected int hashCode(int hash) {\n+\t\thash <<= 4;\n+\t\tif(null != getAction()) {\n+\t\t\thash ^= getAction().hashCode();\n+\t\t}\n+\t\thash <<= 4;\n+\t\tif(null != getCondition()) {\n+\t\t\thash ^= getCondition().hashCode();\n+\t\t}\n+\t\treturn hash;\n+\t}\n+\n+\n+\tprotected Predicate getCondition() {\n+\t\treturn condition;\n+\t}\n+\n+\tprotected Procedure getAction() {\n+\t\treturn action;\n+\t}\n+\n+\tprivate Predicate condition;\n+\tprivate Procedure action;\n+\n+}", "filename": "src/java/org/apache/commons/functor/core/composite/AbstractLoopProcedure.java"}, {"additions": 111, "raw_url": "https://github.com/apache/commons-functor/raw/d6eeed8ea442ab0754ecfbdd0e4de1dcefcd9a7d/src/test/org/apache/commons/functor/core/composite/TestAbstractLoopProcedure.java", "blob_url": "https://github.com/apache/commons-functor/blob/d6eeed8ea442ab0754ecfbdd0e4de1dcefcd9a7d/src/test/org/apache/commons/functor/core/composite/TestAbstractLoopProcedure.java", "sha": "9cf148c491c23ff7cde41cc5a34d6553d46e153b", "changes": 111, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/org/apache/commons/functor/core/composite/TestAbstractLoopProcedure.java?ref=d6eeed8ea442ab0754ecfbdd0e4de1dcefcd9a7d", "patch": "@@ -0,0 +1,111 @@\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons-sandbox//functor/src/test/org/apache/commons/functor/core/composite/TestAbstractLoopProcedure.java,v 1.1 2003/11/12 00:06:28 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived \n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    nor may \"Apache\" appear in their name, without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.functor.core.composite;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.functor.BaseFunctorTest;\n+import org.apache.commons.functor.Predicate;\n+import org.apache.commons.functor.Procedure;\n+import org.apache.commons.functor.core.ConstantPredicate;\n+import org.apache.commons.functor.core.NoOp;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/11/12 00:06:28 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestAbstractLoopProcedure extends BaseFunctorTest {\n+\n+    // Conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestAbstractLoopProcedure(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestAbstractLoopProcedure.class);\n+    }\n+\n+    // Functor Testing Framework\n+    // ------------------------------------------------------------------------\n+\n+    protected Object makeFunctor() {\n+\t\treturn new MockLoopProcedure(new ConstantPredicate(false), new NoOp());\n+    }\n+\n+\t// tests\n+\t// ------------------------------------------------------------------------\n+\tpublic void testEqualsAndHashCodeWithNullArgs() {\n+\t\tProcedure p = new MockLoopProcedure(null,null);\n+\t\tassertNotNull(p.toString());\n+\t\tassertFalse(p.equals(null));\n+\t\tassertTrue(p.equals(p));\n+\t\tassertEquals(p.hashCode(),p.hashCode());\n+\t}\n+\n+}\n+\n+class MockLoopProcedure extends AbstractLoopProcedure {\n+\tpublic MockLoopProcedure(Predicate condition, Procedure action) {\n+\t\tsuper(condition,action);\n+\t}\n+\t\t\n+\tpublic void run() {\n+\t}\n+}", "filename": "src/test/org/apache/commons/functor/core/composite/TestAbstractLoopProcedure.java"}, {"additions": 3, "raw_url": "https://github.com/apache/commons-functor/raw/d6eeed8ea442ab0754ecfbdd0e4de1dcefcd9a7d/src/test/org/apache/commons/functor/core/composite/TestAll.java", "blob_url": "https://github.com/apache/commons-functor/blob/d6eeed8ea442ab0754ecfbdd0e4de1dcefcd9a7d/src/test/org/apache/commons/functor/core/composite/TestAll.java", "sha": "29eb60e99751dbd01755e1f46eb0637879e4f90c", "changes": 5, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/org/apache/commons/functor/core/composite/TestAll.java?ref=d6eeed8ea442ab0754ecfbdd0e4de1dcefcd9a7d", "patch": "@@ -1,5 +1,5 @@\n /* \n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons-sandbox//functor/src/test/org/apache/commons/functor/core/composite/TestAll.java,v 1.6 2003/11/11 23:36:00 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons-sandbox//functor/src/test/org/apache/commons/functor/core/composite/TestAll.java,v 1.7 2003/11/12 00:06:28 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n@@ -61,7 +61,7 @@\n import junit.framework.TestSuite;\n \n /**\n- * @version $Revision: 1.6 $ $Date: 2003/11/11 23:36:00 $\n+ * @version $Revision: 1.7 $ $Date: 2003/11/12 00:06:28 $\n  * @author Rodney Waldhoff\n  */\n public class TestAll extends TestCase {\n@@ -108,6 +108,7 @@ public static Test suite() {\n         suite.addTest(TestConditionalUnaryProcedure.suite());\n         suite.addTest(TestConditionalBinaryProcedure.suite());\n         \n+\t\tsuite.addTest(TestAbstractLoopProcedure.suite());\n \t\tsuite.addTest(TestWhileDoProcedure.suite());\n \t\tsuite.addTest(TestDoWhileProcedure.suite());\n         ", "filename": "src/test/org/apache/commons/functor/core/composite/TestAll.java"}], "repo": "commons-functor"}]
