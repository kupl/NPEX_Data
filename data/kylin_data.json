[{"commit": "https://github.com/apache/kylin/commit/9ae2bd17489e87efacd7b177735c9ddc8e03e09f", "parent": "https://github.com/apache/kylin/commit/566ded888733dec7aba241944675169c4ef869d3", "message": "KYLIN-3628 Fix regression bug\n\nPrevious code change will cause NPE for \"SELECT * from DIMENSION_TABLE\" when dimension table name use alias.", "bug_id": "kylin_1", "file": [{"additions": 20, "raw_url": "https://github.com/apache/kylin/raw/9ae2bd17489e87efacd7b177735c9ddc8e03e09f/core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java", "blob_url": "https://github.com/apache/kylin/blob/9ae2bd17489e87efacd7b177735c9ddc8e03e09f/core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java", "sha": "7ad4dd3f7baa1ba10e183d35ec159e11c9a6d42a", "changes": 36, "status": "modified", "deletions": 16, "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java?ref=9ae2bd17489e87efacd7b177735c9ddc8e03e09f", "patch": "@@ -1235,31 +1235,35 @@ public SnapshotTable buildSnapshotTable(CubeSegment cubeSeg, String lookupTable,\n     public CubeInstance findLatestSnapshot(List<RealizationEntry> realizationEntries, String lookupTableName,\n             CubeInstance cubeInstance) {\n         CubeInstance cube = null;\n-        if (!realizationEntries.isEmpty()) {\n-            long maxBuildTime = Long.MIN_VALUE;\n-            RealizationRegistry registry = RealizationRegistry.getInstance(config);\n-            for (RealizationEntry entry : realizationEntries) {\n-                IRealization realization = registry.getRealization(entry.getType(), entry.getRealization());\n-                if (realization != null && realization.isReady() && realization instanceof CubeInstance) {\n-                    CubeInstance current = (CubeInstance) realization;\n-                    if (checkMeetSnapshotTable(current, lookupTableName)) {\n-                        CubeSegment segment = current.getLatestReadySegment();\n-                        if (segment != null) {\n-                            long latestBuildTime = segment.getLastBuildTime();\n-                            if (latestBuildTime > maxBuildTime) {\n-                                maxBuildTime = latestBuildTime;\n-                                cube = current;\n+        try {\n+            if (!realizationEntries.isEmpty()) {\n+                long maxBuildTime = Long.MIN_VALUE;\n+                RealizationRegistry registry = RealizationRegistry.getInstance(config);\n+                for (RealizationEntry entry : realizationEntries) {\n+                    IRealization realization = registry.getRealization(entry.getType(), entry.getRealization());\n+                    if (realization != null && realization.isReady() && realization instanceof CubeInstance) {\n+                        CubeInstance current = (CubeInstance) realization;\n+                        if (checkMeetSnapshotTable(current, lookupTableName)) {\n+                            CubeSegment segment = current.getLatestReadySegment();\n+                            if (segment != null) {\n+                                long latestBuildTime = segment.getLastBuildTime();\n+                                if (latestBuildTime > maxBuildTime) {\n+                                    maxBuildTime = latestBuildTime;\n+                                    cube = current;\n+                                }\n                             }\n                         }\n                     }\n                 }\n             }\n+        } catch (Exception e) {\n+            logger.info(\"Unexpected error.\", e);\n         }\n         if (!cubeInstance.equals(cube)) {\n             logger.debug(\"Picked cube {} over {} as it provides a more recent snapshot of the lookup table {}\", cube,\n                     cubeInstance, lookupTableName);\n         }\n-        return cube;\n+        return cube == null ? cubeInstance : cube;\n     }\n \n     /**\n@@ -1274,7 +1278,7 @@ private boolean checkMeetSnapshotTable(CubeInstance toCheck, String lookupTableN\n             lookupTbl = strArr[strArr.length - 1];\n         }\n         for (DimensionDesc dimensionDesc : toCheck.getDescriptor().getDimensions()) {\n-            if (dimensionDesc.getTable().equalsIgnoreCase(lookupTbl)) {\n+            if (dimensionDesc.getTableRef().getTableName().equalsIgnoreCase(lookupTbl)) {\n                 checkRes = true;\n                 break;\n             }", "filename": "core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/4a1a4debb2d8eca6b49e4a38e67119619215dc76", "parent": "https://github.com/apache/kylin/commit/6da979581476e80db1524dff919d3d9c55d7448b", "message": "KYLIN-3742 Fix DataRequest for NPE and add some javadoc", "bug_id": "kylin_2", "file": [{"additions": 11, "raw_url": "https://github.com/apache/kylin/raw/4a1a4debb2d8eca6b49e4a38e67119619215dc76/core-metadata/src/main/java/org/apache/kylin/metadata/model/ParameterDesc.java", "blob_url": "https://github.com/apache/kylin/blob/4a1a4debb2d8eca6b49e4a38e67119619215dc76/core-metadata/src/main/java/org/apache/kylin/metadata/model/ParameterDesc.java", "sha": "45af39727800d18be4ad7a4467e712afb706c236", "changes": 14, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-metadata/src/main/java/org/apache/kylin/metadata/model/ParameterDesc.java?ref=4a1a4debb2d8eca6b49e4a38e67119619215dc76", "patch": "@@ -149,8 +149,11 @@ public boolean equals(Object o) {\n             if (p.isColumnType()) {\n                 if (q.isColumnType() == false)\n                     return false;\n-                if (q.getColRef().equals(p.getColRef()) == false)\n+                if (q.getColRef() != null && q.getColRef().equals(p.getColRef()) == false)\n                     return false;\n+                if (!(q.getType().equals(p.getType()) && q.getValue().equals(q.getValue()))) {\n+                    return false;\n+                }\n             } else {\n                 if (q.isColumnType() == true)\n                     return false;\n@@ -185,8 +188,13 @@ public int hashCode() {\n \n     @Override\n     public String toString() {\n-        String thisStr = isColumnType() ? colRef.toString() : value;\n-        return nextParameter == null ? thisStr : thisStr + \",\" + nextParameter.toString();\n+        String tmp = null;\n+        if (isColumnType() && colRef != null) {\n+            tmp = colRef.toString();\n+        } else {\n+            tmp = value;\n+        }\n+        return nextParameter == null ? tmp : tmp + \",\" + nextParameter.toString();\n     }\n \n     /**", "filename": "core-metadata/src/main/java/org/apache/kylin/metadata/model/ParameterDesc.java"}, {"additions": 22, "raw_url": "https://github.com/apache/kylin/raw/4a1a4debb2d8eca6b49e4a38e67119619215dc76/server-base/src/main/java/org/apache/kylin/rest/controller/StreamingCoordinatorController.java", "blob_url": "https://github.com/apache/kylin/blob/4a1a4debb2d8eca6b49e4a38e67119619215dc76/server-base/src/main/java/org/apache/kylin/rest/controller/StreamingCoordinatorController.java", "sha": "afb6a43afb9cd8510518f78a8556ee95cc5f1755", "changes": 34, "status": "modified", "deletions": 12, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/controller/StreamingCoordinatorController.java?ref=4a1a4debb2d8eca6b49e4a38e67119619215dc76", "patch": "@@ -100,71 +100,80 @@ public CoordinatorResponse reBalance(@RequestBody String reBalancePlanStr) {\n         }\n     }\n \n-    @RequestMapping(value = \"/cubes/{cubeName}/assign\", method = { RequestMethod.PUT })\n+    @RequestMapping(value = \"/cubes/{cubeName}/assign\", method = { RequestMethod.PUT }, produces = {\n+            \"application/json\" })\n     @ResponseBody\n     public CoordinatorResponse assignStreamingCube(@PathVariable String cubeName) {\n         streamingCoordinartorService.assignCube(cubeName);\n         return new CoordinatorResponse();\n     }\n \n-    @RequestMapping(value = \"/cubes/{cubeName}/unAssign\", method = { RequestMethod.PUT })\n+    @RequestMapping(value = \"/cubes/{cubeName}/unAssign\", method = { RequestMethod.PUT }, produces = {\n+            \"application/json\" })\n     @ResponseBody\n     public CoordinatorResponse unAssignStreamingCube(@PathVariable String cubeName) {\n         streamingCoordinartorService.unAssignCube(cubeName);\n         return new CoordinatorResponse();\n     }\n \n-    @RequestMapping(value = \"/cubes/{cubeName}/reAssign\", method = { RequestMethod.POST })\n+    @RequestMapping(value = \"/cubes/{cubeName}/reAssign\", method = { RequestMethod.POST }, produces = {\n+            \"application/json\" })\n     @ResponseBody\n     public CoordinatorResponse reAssignStreamingCube(@PathVariable String cubeName,\n             @RequestBody CubeAssignment newAssignments) {\n         streamingCoordinartorService.reAssignCube(cubeName, newAssignments);\n         return new CoordinatorResponse();\n     }\n \n-    @RequestMapping(value = \"/replicaSet\", method = { RequestMethod.POST })\n+    @RequestMapping(value = \"/replicaSet\", method = { RequestMethod.POST }, produces = { \"application/json\" })\n     @ResponseBody\n     public CoordinatorResponse createReplicaSet(@RequestBody ReplicaSet rs) {\n         streamingCoordinartorService.createReplicaSet(rs);\n         return new CoordinatorResponse();\n     }\n \n-    @RequestMapping(value = \"/replicaSet/{replicaSetID}\", method = { RequestMethod.DELETE })\n+    @RequestMapping(value = \"/replicaSet/{replicaSetID}\", method = { RequestMethod.DELETE }, produces = {\n+            \"application/json\" })\n     @ResponseBody\n     public CoordinatorResponse deleteReplicaSet(@PathVariable Integer replicaSetID) {\n         streamingCoordinartorService.removeReplicaSet(replicaSetID);\n         return new CoordinatorResponse();\n     }\n \n-    @RequestMapping(value = \"/replicaSet/{replicaSetID}/{nodeID:.+}\", method = { RequestMethod.PUT })\n+    @RequestMapping(value = \"/replicaSet/{replicaSetID}/{nodeID:.+}\", method = { RequestMethod.PUT }, produces = {\n+            \"application/json\" })\n     @ResponseBody\n     public CoordinatorResponse addNodeToReplicaSet(@PathVariable Integer replicaSetID, @PathVariable String nodeID) {\n         streamingCoordinartorService.addNodeToReplicaSet(replicaSetID, nodeID);\n         return new CoordinatorResponse();\n     }\n \n-    @RequestMapping(value = \"/replicaSet/{replicaSetID}/{nodeID:.+}\", method = { RequestMethod.DELETE })\n+    @RequestMapping(value = \"/replicaSet/{replicaSetID}/{nodeID:.+}\", method = { RequestMethod.DELETE }, produces = {\n+            \"application/json\" })\n     @ResponseBody\n-    public CoordinatorResponse removeNodeFromReplicaSet(@PathVariable Integer replicaSetID, @PathVariable String nodeID) {\n+    public CoordinatorResponse removeNodeFromReplicaSet(@PathVariable Integer replicaSetID,\n+            @PathVariable String nodeID) {\n         streamingCoordinartorService.removeNodeFromReplicaSet(replicaSetID, nodeID);\n         return new CoordinatorResponse();\n     }\n \n-    @RequestMapping(value = \"/cubes/{cubeName}/pauseConsume\", method = { RequestMethod.PUT })\n+    @RequestMapping(value = \"/cubes/{cubeName}/pauseConsume\", method = { RequestMethod.PUT }, produces = {\n+            \"application/json\" })\n     @ResponseBody\n     public CoordinatorResponse pauseCubeConsume(@PathVariable String cubeName) {\n         streamingCoordinartorService.pauseConsumers(cubeName);\n         return new CoordinatorResponse();\n     }\n \n-    @RequestMapping(value = \"/cubes/{cubeName}/resumeConsume\", method = { RequestMethod.PUT })\n+    @RequestMapping(value = \"/cubes/{cubeName}/resumeConsume\", method = { RequestMethod.PUT }, produces = {\n+            \"application/json\" })\n     @ResponseBody\n     public CoordinatorResponse resumeCubeConsume(@PathVariable String cubeName) {\n         streamingCoordinartorService.resumeConsumers(cubeName);\n         return new CoordinatorResponse();\n     }\n \n-    @RequestMapping(value = \"/remoteStoreComplete\", method = { RequestMethod.POST })\n+    @RequestMapping(value = \"/remoteStoreComplete\", method = { RequestMethod.POST }, produces = { \"application/json\" })\n     @ResponseBody\n     public CoordinatorResponse segmentRemoteStoreComplete(@RequestBody RemoteStoreCompleteRequest request) {\n         Pair<Long, Long> segmentRange = new Pair<>(request.getSegmentStart(), request.getSegmentEnd());\n@@ -176,7 +185,8 @@ public CoordinatorResponse segmentRemoteStoreComplete(@RequestBody RemoteStoreCo\n         return new CoordinatorResponse();\n     }\n \n-    @RequestMapping(value = \"/replicaSetLeaderChange\", method = { RequestMethod.POST })\n+    @RequestMapping(value = \"/replicaSetLeaderChange\", method = { RequestMethod.POST }, produces = {\n+            \"application/json\" })\n     @ResponseBody\n     public CoordinatorResponse replicaSetLeaderChange(@RequestBody ReplicaSetLeaderChangeRequest request) {\n         logger.info(\"receive replicaSet leader change:\" + request);", "filename": "server-base/src/main/java/org/apache/kylin/rest/controller/StreamingCoordinatorController.java"}, {"additions": 5, "raw_url": "https://github.com/apache/kylin/raw/4a1a4debb2d8eca6b49e4a38e67119619215dc76/storage-stream/src/main/java/org/apache/kylin/storage/stream/rpc/HttpStreamDataSearchClient.java", "blob_url": "https://github.com/apache/kylin/blob/4a1a4debb2d8eca6b49e4a38e67119619215dc76/storage-stream/src/main/java/org/apache/kylin/storage/stream/rpc/HttpStreamDataSearchClient.java", "sha": "36ae3b315d01e22a0ea9988852970e659ecbf538", "changes": 11, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/kylin/contents/storage-stream/src/main/java/org/apache/kylin/storage/stream/rpc/HttpStreamDataSearchClient.java?ref=4a1a4debb2d8eca6b49e4a38e67119619215dc76", "patch": "@@ -103,8 +103,8 @@ public ITupleIterator search(final long minSegmentTime, final CubeInstance cube,\n         final ResponseResultSchema schema = new ResponseResultSchema(cubeDesc, dimensions, metrics);\n         final StreamingTupleConverter tupleConverter = new StreamingTupleConverter(schema, tupleInfo);\n         final RecordsSerializer recordsSerializer = new RecordsSerializer(schema);\n-        final DataRequest dataRequest = createDataRequest(query.getQueryId(), cube.getName(), minSegmentTime,\n-                tupleInfo, tupleFilter, dimensions, groups, metrics, storagePushDownLimit, allowStorageAggregation);\n+        final DataRequest dataRequest = createDataRequest(query.getQueryId(), cube.getName(), minSegmentTime, tupleInfo,\n+                tupleFilter, dimensions, groups, metrics, storagePushDownLimit, allowStorageAggregation);\n \n         logger.info(\"Query-{}:send request to stream receivers\", query.getQueryId());\n         for (final ReplicaSet rs : replicaSetsOfCube) {\n@@ -173,9 +173,8 @@ private Node findBestReceiverServeQuery(List<Node> receivers, Node lead, String\n         return receivers.get((receiverNo + 1) % receiversSize);\n     }\n \n-    public Iterator<ITuple> doSearch(DataRequest dataRequest, CubeInstance cube,\n-            StreamingTupleConverter tupleConverter, RecordsSerializer recordsSerializer, Node receiver,\n-            TupleInfo tupleInfo) throws Exception {\n+    public Iterator<ITuple> doSearch(DataRequest dataRequest, CubeInstance cube, StreamingTupleConverter tupleConverter,\n+            RecordsSerializer recordsSerializer, Node receiver, TupleInfo tupleInfo) throws Exception {\n         String queryId = dataRequest.getQueryId();\n         logger.info(\"send query to receiver \" + receiver + \" with query id:\" + queryId);\n         String url = \"http://\" + receiver.getHost() + \":\" + receiver.getPort() + \"/kylin/api/data/query\";\n@@ -235,7 +234,7 @@ private DataRequest createDataRequest(String queryId, String cubeName, long minS\n         }\n         request.setGroups(groupSet);\n \n-        request.setMetrics(metrics);\n+        request.setMetrics(Lists.newArrayList(metrics));\n \n         return request;\n     }", "filename": "storage-stream/src/main/java/org/apache/kylin/storage/stream/rpc/HttpStreamDataSearchClient.java"}, {"additions": 7, "raw_url": "https://github.com/apache/kylin/raw/4a1a4debb2d8eca6b49e4a38e67119619215dc76/stream-coordinator/src/main/java/org/apache/kylin/stream/coordinator/Coordinator.java", "blob_url": "https://github.com/apache/kylin/blob/4a1a4debb2d8eca6b49e4a38e67119619215dc76/stream-coordinator/src/main/java/org/apache/kylin/stream/coordinator/Coordinator.java", "sha": "f218d9d573a39605773a1ebcb94ea7d0a698ae1b", "changes": 9, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/kylin/contents/stream-coordinator/src/main/java/org/apache/kylin/stream/coordinator/Coordinator.java?ref=4a1a4debb2d8eca6b49e4a38e67119619215dc76", "patch": "@@ -100,9 +100,14 @@\n import javax.annotation.Nullable;\n \n /**\n- * \n- * Each Kylin Streaming cluster has a coordinator to handle generic assignment, membership and streaming cube state management.\n+ * <pre>\n+ * Each Kylin streaming cluster has at least one coordinator processes/server, coordinator\n+ * server works as the master node of streaming cluster and handle generic assignment,\n+ * membership and streaming cube state management.\n  *\n+ * When cluster have several coordinator processes, only the leader try to answer coordinator client's\n+ * request, others process will become standby/candidate, so single point of failure will be eliminated.\n+ * </pre>\n  */\n public class Coordinator implements CoordinatorClient {\n     private static final Logger logger = LoggerFactory.getLogger(Coordinator.class);", "filename": "stream-coordinator/src/main/java/org/apache/kylin/stream/coordinator/Coordinator.java"}, {"additions": 4, "raw_url": "https://github.com/apache/kylin/raw/4a1a4debb2d8eca6b49e4a38e67119619215dc76/stream-core/src/main/java/org/apache/kylin/stream/core/model/DataRequest.java", "blob_url": "https://github.com/apache/kylin/blob/4a1a4debb2d8eca6b49e4a38e67119619215dc76/stream-core/src/main/java/org/apache/kylin/stream/core/model/DataRequest.java", "sha": "07c902872980cac5391f7a644525cffd9a2dca2a", "changes": 7, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/kylin/contents/stream-core/src/main/java/org/apache/kylin/stream/core/model/DataRequest.java?ref=4a1a4debb2d8eca6b49e4a38e67119619215dc76", "patch": "@@ -18,6 +18,7 @@\n \n package org.apache.kylin.stream.core.model;\n \n+import java.util.List;\n import java.util.Set;\n \n import org.apache.kylin.metadata.model.FunctionDesc;\n@@ -30,7 +31,7 @@\n     private String havingFilter;\n     private Set<String> dimensions; // what contains in Pair is <tableName, columnName>\n     private Set<String> groups;\n-    private Set<FunctionDesc> metrics;\n+    private List<FunctionDesc> metrics;\n     private int storagePushDownLimit = Integer.MAX_VALUE;\n     private boolean allowStorageAggregation;\n \n@@ -78,11 +79,11 @@ public void setGroups(Set<String> groups) {\n         this.groups = groups;\n     }\n \n-    public Set<FunctionDesc> getMetrics() {\n+    public List<FunctionDesc> getMetrics() {\n         return metrics;\n     }\n \n-    public void setMetrics(Set<FunctionDesc> metrics) {\n+    public void setMetrics(List<FunctionDesc> metrics) {\n         this.metrics = metrics;\n     }\n ", "filename": "stream-core/src/main/java/org/apache/kylin/stream/core/model/DataRequest.java"}, {"additions": 2, "raw_url": "https://github.com/apache/kylin/raw/4a1a4debb2d8eca6b49e4a38e67119619215dc76/stream-core/src/main/java/org/apache/kylin/stream/core/storage/StreamingSegmentManager.java", "blob_url": "https://github.com/apache/kylin/blob/4a1a4debb2d8eca6b49e4a38e67119619215dc76/stream-core/src/main/java/org/apache/kylin/stream/core/storage/StreamingSegmentManager.java", "sha": "537f5a47399ce8718a9367528af6c8900f490f2c", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/stream-core/src/main/java/org/apache/kylin/stream/core/storage/StreamingSegmentManager.java?ref=4a1a4debb2d8eca6b49e4a38e67119619215dc76", "patch": "@@ -149,6 +149,8 @@ public void addEvent(StreamingMessage event) {\n                 }\n \n                 activeSegments.put(segmentStart, segment);\n+                // when current active segments exceed tolerance, some unpredictable accident may happend,\n+                // but is should be configurable or computed on the fly\n                 if (activeSegments.size() > 12) {\n                     logger.warn(\"Two many active segments, segments size = \" + activeSegments.keySet());\n                 }", "filename": "stream-core/src/main/java/org/apache/kylin/stream/core/storage/StreamingSegmentManager.java"}, {"additions": 10, "raw_url": "https://github.com/apache/kylin/raw/4a1a4debb2d8eca6b49e4a38e67119619215dc76/stream-core/src/main/java/org/apache/kylin/stream/core/util/RestService.java", "blob_url": "https://github.com/apache/kylin/blob/4a1a4debb2d8eca6b49e4a38e67119619215dc76/stream-core/src/main/java/org/apache/kylin/stream/core/util/RestService.java", "sha": "50c4ba691e77f4a655d0d4a791a4ee535040ac2d", "changes": 10, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/stream-core/src/main/java/org/apache/kylin/stream/core/util/RestService.java?ref=4a1a4debb2d8eca6b49e4a38e67119619215dc76", "patch": "@@ -109,6 +109,16 @@ public String execRequest(HttpRequestBase request, int connectionTimeout, int re\n             HttpResponse response = httpClient.execute(request);\n             String msg = EntityUtils.toString(response.getEntity());\n             int code = response.getStatusLine().getStatusCode();\n+            if (logger.isTraceEnabled()) {\n+                String displayMessage;\n+                if (msg.length() > 500) {\n+                    displayMessage = msg.substring(0, 500);\n+                } else {\n+                    displayMessage = msg;\n+                }\n+                logger.trace(\"Send request: {}. And receive response[{}] which lenght is {}, and content is {}.\", code,\n+                        request.getRequestLine().toString(), msg.length(), displayMessage);\n+            }\n             if (code != 200)\n                 throw new IOException(\"Invalid http response \" + code + \" when send request: \"\n                         + request.getURI().toString() + \"\\n\" + msg);", "filename": "stream-core/src/main/java/org/apache/kylin/stream/core/util/RestService.java"}, {"additions": 19, "raw_url": "https://github.com/apache/kylin/raw/4a1a4debb2d8eca6b49e4a38e67119619215dc76/stream-receiver/src/main/java/org/apache/kylin/stream/server/StreamingServer.java", "blob_url": "https://github.com/apache/kylin/blob/4a1a4debb2d8eca6b49e4a38e67119619215dc76/stream-receiver/src/main/java/org/apache/kylin/stream/server/StreamingServer.java", "sha": "c171561fca34880a457b4dfc419b50766b702bfb", "changes": 28, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/kylin/contents/stream-receiver/src/main/java/org/apache/kylin/stream/server/StreamingServer.java?ref=4a1a4debb2d8eca6b49e4a38e67119619215dc76", "patch": "@@ -85,7 +85,7 @@\n import org.apache.kylin.stream.core.util.HDFSUtil;\n import org.apache.kylin.stream.core.util.NamedThreadFactory;\n import org.apache.kylin.stream.core.util.NodeUtil;\n-import org.apache.kylin.stream.server.retention.PolicyInfo;\n+import org.apache.kylin.stream.server.retention.RetentionPolicyInfo;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -109,6 +109,9 @@\n     private StreamMetadataStore streamMetadataStore;\n     private Node currentNode;\n     private int replicaSetID = -1;\n+    /**\n+     * indicate whether current receiver is the leader of whole replica set\n+     */\n     private volatile boolean isLeader = false;\n \n     private ScheduledExecutorService segmentStateCheckerExecutor;\n@@ -155,21 +158,21 @@ public void run() {\n                     CubeInstance cubeInstance = segmentManager.getCubeInstance();\n                     String cubeName = cubeInstance.getName();\n                     try {\n-                        PolicyInfo policyInfo = new PolicyInfo();\n+                        RetentionPolicyInfo retentionPolicyInfo = new RetentionPolicyInfo();\n                         String policyName = cubeInstance.getConfig().getStreamingSegmentRetentionPolicy();\n                         Map<String, String> policyProps = cubeInstance.getConfig()\n                                 .getStreamingSegmentRetentionPolicyProperties(policyName);\n-                        policyInfo.setName(policyName);\n-                        policyInfo.setProperties(policyProps);\n+                        retentionPolicyInfo.setName(policyName);\n+                        retentionPolicyInfo.setProperties(policyProps);\n                         //The returned segments that require remote persisted are already sorted in ascending order by the segment start time\n                         Collection<StreamingCubeSegment> segments = segmentManager.getRequireRemotePersistSegments();\n                         if (!segments.isEmpty()) {\n                             logger.info(\"found cube {} segments:{} are immutable, retention policy is: {}\", cubeName,\n-                                    segments, policyInfo.getName());\n+                                    segments, retentionPolicyInfo.getName());\n                         } else {\n                             continue;\n                         }\n-                        handleImmutableCubeSegments(cubeName, segmentManager, segments, policyInfo);\n+                        handleImmutableCubeSegments(cubeName, segmentManager, segments, retentionPolicyInfo);\n                     } catch (Exception e) {\n                         logger.error(\"error when handle cube:\" + cubeName, e);\n                     }\n@@ -178,14 +181,21 @@ public void run() {\n         }, 60, 60, TimeUnit.SECONDS);\n     }\n \n+    /**\n+     * <pre>\n+     * When segment status was changed to immutable, the leader of replica will\n+     * try to upload local segment cache to remote, while the follower will remove\n+     * local segment cache.\n+     * </pre>\n+     */\n     private void handleImmutableCubeSegments(String cubeName, StreamingSegmentManager segmentManager,\n-            Collection<StreamingCubeSegment> segments, PolicyInfo policyInfo) throws Exception {\n-        if (PolicyInfo.FULL_BUILD_POLICY.equalsIgnoreCase(policyInfo.getName())) {\n+            Collection<StreamingCubeSegment> segments, RetentionPolicyInfo retentionPolicyInfo) throws Exception {\n+        if (RetentionPolicyInfo.FULL_BUILD_POLICY.equalsIgnoreCase(retentionPolicyInfo.getName())) {\n             if (isLeader) {\n                 sendSegmentsToFullBuild(cubeName, segmentManager, segments);\n             }\n         } else {\n-            purgeSegments(cubeName, segments, policyInfo.getProperties());\n+            purgeSegments(cubeName, segments, retentionPolicyInfo.getProperties());\n         }\n     }\n ", "filename": "stream-receiver/src/main/java/org/apache/kylin/stream/server/StreamingServer.java"}, {"additions": 2, "raw_url": "https://github.com/apache/kylin/raw/4a1a4debb2d8eca6b49e4a38e67119619215dc76/stream-receiver/src/main/java/org/apache/kylin/stream/server/rest/controller/DataController.java", "blob_url": "https://github.com/apache/kylin/blob/4a1a4debb2d8eca6b49e4a38e67119619215dc76/stream-receiver/src/main/java/org/apache/kylin/stream/server/rest/controller/DataController.java", "sha": "45c630751853e634727df5b1b783226be7d76cc6", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/stream-receiver/src/main/java/org/apache/kylin/stream/server/rest/controller/DataController.java?ref=4a1a4debb2d8eca6b49e4a38e67119619215dc76", "patch": "@@ -18,6 +18,7 @@\n \n package org.apache.kylin.stream.server.rest.controller;\n \n+import java.util.List;\n import java.util.Set;\n \n import org.apache.commons.codec.binary.Base64;\n@@ -140,7 +141,7 @@ public DataResponse query(@RequestBody DataRequest dataRequest) {\n         }\n     }\n \n-    private Set<FunctionDesc> convertMetrics(CubeDesc cubeDesc, Set<FunctionDesc> metrics) {\n+    private Set<FunctionDesc> convertMetrics(CubeDesc cubeDesc, List<FunctionDesc> metrics) {\n         Set<FunctionDesc> result = Sets.newHashSet();\n         for (FunctionDesc metric : metrics) {\n             result.add(findAggrFuncFromCubeDesc(cubeDesc, metric));", "filename": "stream-receiver/src/main/java/org/apache/kylin/stream/server/rest/controller/DataController.java"}, {"additions": 10, "raw_url": "https://github.com/apache/kylin/raw/4a1a4debb2d8eca6b49e4a38e67119619215dc76/stream-receiver/src/main/java/org/apache/kylin/stream/server/retention/RetentionPolicyInfo.java", "blob_url": "https://github.com/apache/kylin/blob/4a1a4debb2d8eca6b49e4a38e67119619215dc76/stream-receiver/src/main/java/org/apache/kylin/stream/server/retention/RetentionPolicyInfo.java", "previous_filename": "stream-receiver/src/main/java/org/apache/kylin/stream/server/retention/PolicyInfo.java", "sha": "032003210897a0e3b7c9cb8c1b32445ed80d55e8", "changes": 11, "status": "renamed", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/stream-receiver/src/main/java/org/apache/kylin/stream/server/retention/RetentionPolicyInfo.java?ref=4a1a4debb2d8eca6b49e4a38e67119619215dc76", "patch": "@@ -22,8 +22,17 @@\n \n import com.google.common.collect.Maps;\n \n-public class PolicyInfo {\n+/**\n+ * Retention policy for local segment cache\n+ */\n+public class RetentionPolicyInfo {\n+    /**\n+     * outdated data will be dropped\n+     */\n     public static final String PURGE_POLICY = \"purge\";\n+    /**\n+     * when data become immutable, it will be presisted remotely\n+     */\n     public static final String FULL_BUILD_POLICY = \"fullBuild\";\n \n     private String name;", "filename": "stream-receiver/src/main/java/org/apache/kylin/stream/server/retention/RetentionPolicyInfo.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/4fb7eeec2f16896d85f63eeef903b22fe99ddbdf", "parent": "https://github.com/apache/kylin/commit/24f1987d71df1c51f9e1fca5885a2bfa4fca501d", "message": "minor, fix NPE", "bug_id": "kylin_3", "file": [{"additions": 5, "raw_url": "https://github.com/apache/kylin/raw/4fb7eeec2f16896d85f63eeef903b22fe99ddbdf/server-base/src/main/java/org/apache/kylin/rest/controller/ProjectController.java", "blob_url": "https://github.com/apache/kylin/blob/4fb7eeec2f16896d85f63eeef903b22fe99ddbdf/server-base/src/main/java/org/apache/kylin/rest/controller/ProjectController.java", "sha": "880c09a46c600b62cc21cb57bda875d1a8ee5abe", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/controller/ProjectController.java?ref=4fb7eeec2f16896d85f63eeef903b22fe99ddbdf", "patch": "@@ -193,7 +193,11 @@ public void deleteProject(@PathVariable String projectName) {\n         try {\n \n             ProjectInstance project = projectService.getProjectManager().getProject(projectName);\n-            projectService.deleteProject(projectName, project);\n+            if (project != null) {\n+                projectService.deleteProject(projectName, project);\n+            } else {\n+                logger.info(\"Project {} not exists\", projectName);\n+            }\n         } catch (Exception e) {\n             logger.error(e.getLocalizedMessage(), e);\n             throw new InternalErrorException(\"Failed to delete project. \" + \" Caused by: \" + e.getMessage(), e);", "filename": "server-base/src/main/java/org/apache/kylin/rest/controller/ProjectController.java"}, {"additions": 2, "raw_url": "https://github.com/apache/kylin/raw/4fb7eeec2f16896d85f63eeef903b22fe99ddbdf/server-base/src/main/java/org/apache/kylin/rest/metrics/QueryMetricsFacade.java", "blob_url": "https://github.com/apache/kylin/blob/4fb7eeec2f16896d85f63eeef903b22fe99ddbdf/server-base/src/main/java/org/apache/kylin/rest/metrics/QueryMetricsFacade.java", "sha": "17ad74d62e36ec0f65d28ce4f4ed741aa1889633", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/metrics/QueryMetricsFacade.java?ref=4fb7eeec2f16896d85f63eeef903b22fe99ddbdf", "patch": "@@ -145,7 +145,8 @@ private static void updateMetricsToReservoir(SQLRequest sqlRequest, SQLResponse\n                 }\n             }\n             setQueryStats(queryMetricsEvent, //\n-                    sqlResponse.getDuration(), sqlResponse.getResults().size(), totalStorageReturnCount);\n+                    sqlResponse.getDuration(), sqlResponse.getResults() == null ? 0 : sqlResponse.getResults().size(),\n+                    totalStorageReturnCount);\n             //For update query level metrics\n             MetricsManager.getInstance().update(queryMetricsEvent);\n         }", "filename": "server-base/src/main/java/org/apache/kylin/rest/metrics/QueryMetricsFacade.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/2cbb8cd9cbd5170aa7e0799f712e19ae6e95c20a", "parent": "https://github.com/apache/kylin/commit/b7a52af09c26f3d39394deca01738487ebaae4a3", "message": "KYLIN-3787 NPE throws when dimension value has null when query real-time data", "bug_id": "kylin_4", "file": [{"additions": 15, "raw_url": "https://github.com/apache/kylin/raw/2cbb8cd9cbd5170aa7e0799f712e19ae6e95c20a/stream-core/src/main/java/org/apache/kylin/stream/core/query/RecordsAggregator.java", "blob_url": "https://github.com/apache/kylin/blob/2cbb8cd9cbd5170aa7e0799f712e19ae6e95c20a/stream-core/src/main/java/org/apache/kylin/stream/core/query/RecordsAggregator.java", "sha": "bb35c9008e31e73c20dc2710c6f6a6f91dc9eacf", "changes": 19, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/kylin/contents/stream-core/src/main/java/org/apache/kylin/stream/core/query/RecordsAggregator.java?ref=2cbb8cd9cbd5170aa7e0799f712e19ae6e95c20a", "patch": "@@ -136,14 +136,25 @@ public void aggregate(String[] dimVals, Object[] metricsVals) {\n     final Comparator<String[]> comparator = new Comparator<String[]>() {\n         @Override\n         public int compare(String[] o1, String[] o2) {\n+            int result = 0;\n             for (int i = 0; i < groupIndexes.length; i++) {\n                 int groupIdx = groupIndexes[i];\n-                int result = o1[groupIdx].compareTo(o2[groupIdx]);\n-                if (result != 0) {\n-                    return result;\n+                if (o1[groupIdx] == null && o2[groupIdx] == null) {\n+                    continue;\n+                } else if (o1[groupIdx] != null && o2[groupIdx] == null) {\n+                    return 1;\n+                } else if (o1[groupIdx] == null && o2[groupIdx] != null) {\n+                    return -1;\n+                } else {\n+                    result = o1[groupIdx].compareTo(o2[groupIdx]);\n+                    if (result == 0) {\n+                        continue;\n+                    } else {\n+                        return result;\n+                    }\n                 }\n             }\n-            return 0;\n+            return result;\n         }\n     };\n }", "filename": "stream-core/src/main/java/org/apache/kylin/stream/core/query/RecordsAggregator.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/6bc2aaeb7032aa89feed91316a2179263c4c4c35", "parent": "https://github.com/apache/kylin/commit/e5c7c0de0a93a89b97d9427f95e3bbf6bada61dc", "message": "KYLIN-3836 fix Kylin StringUtil.join() may cause NPE if iterator is empty", "bug_id": "kylin_5", "file": [{"additions": 23, "raw_url": "https://github.com/apache/kylin/raw/6bc2aaeb7032aa89feed91316a2179263c4c4c35/core-common/src/main/java/org/apache/kylin/common/util/StringUtil.java", "blob_url": "https://github.com/apache/kylin/blob/6bc2aaeb7032aa89feed91316a2179263c4c4c35/core-common/src/main/java/org/apache/kylin/common/util/StringUtil.java", "sha": "5dde9cf5f34e5ea09a8bafa7d992372ec588f43e", "changes": 38, "status": "modified", "deletions": 15, "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-common/src/main/java/org/apache/kylin/common/util/StringUtil.java?ref=6bc2aaeb7032aa89feed91316a2179263c4c4c35", "patch": "@@ -75,26 +75,34 @@ public static String trimSuffix(String str, String suffix) {\n     }\n \n     public static String join(Iterable<String> parts, String separator) {\n-        StringBuilder buf = new StringBuilder();\n-        Iterator<String> iterator = parts.iterator();\n-        if (iterator == null || (!iterator.hasNext())) {\n+        if (parts == null) {\n             return null;\n         }\n-        final String first = iterator.next();\n-        if (first != null) {\n-            buf.append(first);\n-        }\n-        while (iterator.hasNext()) {\n-            if (separator != null) {\n-                buf.append(separator);\n+\n+        Iterator<String> iterator = parts.iterator();\n+\n+        if (iterator == null) {\n+            return null;\n+        } else if (!iterator.hasNext()) {\n+            return \"\";\n+        } else {\n+            StringBuilder buf = new StringBuilder();\n+            final String first = iterator.next();\n+            if (first != null) {\n+                buf.append(first);\n             }\n-            final String part = iterator.next();\n-            if (part != null) {\n-                buf.append(part);\n+            while (iterator.hasNext()) {\n+                if (separator != null) {\n+                    buf.append(separator);\n+                }\n+                final String part = iterator.next();\n+                if (part != null) {\n+                    buf.append(part);\n+                }\n             }\n-        }\n \n-        return buf.toString();\n+            return buf.toString();\n+        }\n     }\n \n     public static void toUpperCaseArray(String[] source, String[] target) {", "filename": "core-common/src/main/java/org/apache/kylin/common/util/StringUtil.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/b780759c6641f0dfbd57f91d4f3d568b8dbb46f6", "parent": "https://github.com/apache/kylin/commit/250f1a1941432059e86207fbf483f183d5b3ed9a", "message": "KYLIN-3740 fix NPE during step of Extract Fact Table Distinct Columns", "bug_id": "kylin_6", "file": [{"additions": 13, "raw_url": "https://github.com/apache/kylin/raw/b780759c6641f0dfbd57f91d4f3d568b8dbb46f6/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/FactDistinctColumnsJob.java", "blob_url": "https://github.com/apache/kylin/blob/b780759c6641f0dfbd57f91d4f3d568b8dbb46f6/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/FactDistinctColumnsJob.java", "sha": "6f78de127f6ea82781a683a36d768ec342a530f8", "changes": 22, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/FactDistinctColumnsJob.java?ref=b780759c6641f0dfbd57f91d4f3d568b8dbb46f6", "patch": "@@ -78,6 +78,19 @@ public int run(String[] args) throws Exception {\n             // add metadata to distributed cache\n             CubeManager cubeMgr = CubeManager.getInstance(KylinConfig.getInstanceFromEnv());\n             CubeInstance cube = cubeMgr.getCube(cubeName);\n+            CubeSegment segment = cube.getSegmentById(segmentID);\n+            if (segment == null) {\n+                logger.warn(\"Failed to find segment {} in cube {}\", segmentID, cube);\n+                cube = cubeMgr.reloadCubeQuietly(cubeName);\n+                segment = cube.getSegmentById(segmentID);\n+            }\n+            if (segment == null) {\n+                logger.error(\"Failed to find {} in cube {}\", segmentID, cube);\n+                for (CubeSegment s : cube.getSegments()) {\n+                    logger.error(s.getName() + \" with status \" + s.getStatus());\n+                }\n+                throw new IllegalStateException();\n+            }\n \n             job.getConfiguration().set(BatchConstants.CFG_CUBE_NAME, cubeName);\n             job.getConfiguration().set(BatchConstants.CFG_CUBE_SEGMENT_ID, segmentID);\n@@ -88,15 +101,6 @@ public int run(String[] args) throws Exception {\n \n             setJobClasspath(job, cube.getConfig());\n \n-            CubeSegment segment = cube.getSegmentById(segmentID);\n-            if (segment == null) {\n-                logger.error(\"Failed to find {} in cube {}\", segmentID, cube);\n-                for (CubeSegment s : cube.getSegments()) {\n-                    logger.error(s.getName() + \" with status \" + s.getStatus());\n-                }\n-                throw new IllegalStateException();\n-            }\n-\n             setupMapper(segment);\n             setupReducer(output, segment);\n ", "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/FactDistinctColumnsJob.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/64dfa7b9f7ef95a3edd8548d46a21ea9e71facc7", "parent": "https://github.com/apache/kylin/commit/2372b96ad3ab483591e68d184ad0ecc37507b78a", "message": "KYLIN-3507 Avoid NPE when project is not found", "bug_id": "kylin_7", "file": [{"additions": 6, "raw_url": "https://github.com/apache/kylin/raw/64dfa7b9f7ef95a3edd8548d46a21ea9e71facc7/server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java", "blob_url": "https://github.com/apache/kylin/blob/64dfa7b9f7ef95a3edd8548d46a21ea9e71facc7/server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java", "sha": "16358e4141359c3ee02b428db7ac332816664f53", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java?ref=64dfa7b9f7ef95a3edd8548d46a21ea9e71facc7", "patch": "@@ -86,6 +86,7 @@\n import org.apache.kylin.metadata.model.ModelDimensionDesc;\n import org.apache.kylin.metadata.model.TableRef;\n import org.apache.kylin.metadata.project.ProjectInstance;\n+import org.apache.kylin.metadata.project.ProjectManager;\n import org.apache.kylin.metadata.querymeta.ColumnMeta;\n import org.apache.kylin.metadata.querymeta.ColumnMetaWithType;\n import org.apache.kylin.metadata.querymeta.SelectedColumnMeta;\n@@ -359,6 +360,11 @@ public SQLResponse doQueryWithCache(SQLRequest sqlRequest, boolean isQueryInspec\n         if (StringUtils.isBlank(sqlRequest.getProject())) {\n             throw new BadRequestException(msg.getEMPTY_PROJECT_NAME());\n         }\n+        // project not found\n+        ProjectManager mgr = ProjectManager.getInstance(KylinConfig.getInstanceFromEnv());\n+        if (mgr.getProject(sqlRequest.getProject()) == null) {\n+            throw new BadRequestException(msg.getPROJECT_NOT_FOUND());\n+        }\n         if (StringUtils.isBlank(sqlRequest.getSql())) {\n             throw new BadRequestException(msg.getNULL_EMPTY_SQL());\n         }", "filename": "server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468", "parent": "https://github.com/apache/kylin/commit/e3dcafb097d04f50f22994dc722d8bc0736dccbb", "message": "KYLIN-3396 NPE throws when materialize lookup table to HBase\n\nSigned-off-by: shaofengshi <shaofengshi@apache.org>", "bug_id": "kylin_8", "file": [{"additions": 8, "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/BatchCubingJobBuilder2.java", "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/BatchCubingJobBuilder2.java", "sha": "b1149edf092134c845f334971a2eaa0163a45e1c", "changes": 13, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/BatchCubingJobBuilder2.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468", "patch": "@@ -72,7 +72,7 @@ public CubingJob build() {\n         result.addTask(createSaveStatisticsStep(jobId));\n \n         // add materialize lookup tables if needed\n-        addMaterializeLookupTableSteps(result);\n+        LookupMaterializeContext lookupMaterializeContext = addMaterializeLookupTableSteps(result);\n \n         outputSide.addStepPhase2_BuildDictionary(result);\n \n@@ -82,7 +82,7 @@ public CubingJob build() {\n         outputSide.addStepPhase3_BuildCube(result);\n \n         // Phase 4: Update Metadata & Cleanup\n-        result.addTask(createUpdateCubeInfoAfterBuildStep(jobId));\n+        result.addTask(createUpdateCubeInfoAfterBuildStep(jobId, lookupMaterializeContext));\n         inputSide.addStepPhase4_Cleanup(result);\n         outputSide.addStepPhase4_Cleanup(result);\n \n@@ -102,16 +102,19 @@ private boolean isEnableUHCDictStep() {\n         return true;\n     }\n \n-    private void addMaterializeLookupTableSteps(final CubingJob result) {\n+    private LookupMaterializeContext addMaterializeLookupTableSteps(final CubingJob result) {\n+        LookupMaterializeContext lookupMaterializeContext = new LookupMaterializeContext(result);\n         CubeDesc cubeDesc = seg.getCubeDesc();\n         List<String> allSnapshotTypes = cubeDesc.getAllExtLookupSnapshotTypes();\n         if (allSnapshotTypes.isEmpty()) {\n-            return;\n+            return null;\n         }\n         for (String snapshotType : allSnapshotTypes) {\n+            logger.info(\"add lookup table materialize steps for storage type:{}\", snapshotType);\n             ILookupMaterializer materializer = MRUtil.getExtLookupMaterializer(snapshotType);\n-            materializer.materializeLookupTablesForCube(result, seg.getCubeInstance());\n+            materializer.materializeLookupTablesForCube(lookupMaterializeContext, seg.getCubeInstance());\n         }\n+        return lookupMaterializeContext;\n     }\n \n     protected void addLayerCubingSteps(final CubingJob result, final String jobId, final String cuboidRootPath) {", "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/BatchCubingJobBuilder2.java"}, {"additions": 15, "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/ILookupMaterializer.java", "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/ILookupMaterializer.java", "sha": "6ec485765ef75a7c0eb20f9c73d7306e9ddb6831", "changes": 18, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/ILookupMaterializer.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468", "patch": "@@ -19,10 +19,22 @@\n package org.apache.kylin.engine.mr;\n \n import org.apache.kylin.cube.CubeInstance;\n-import org.apache.kylin.job.execution.DefaultChainedExecutable;\n \n public interface ILookupMaterializer {\n-    void materializeLookupTable(DefaultChainedExecutable jobFlow, CubeInstance cube, String lookupTableName);\n+    /**\n+     * materialize lookup table\n+     * @param context materialize context, the snapshotPath of lookup table should be put into context\n+     *                via {@code LookupMaterializeContext.addLookupSnapshotPath} method\n+     * @param cube\n+     * @param lookupTableName\n+     */\n+    void materializeLookupTable(LookupMaterializeContext context, CubeInstance cube, String lookupTableName);\n \n-    void materializeLookupTablesForCube(DefaultChainedExecutable jobFlow, CubeInstance cube);\n+    /**\n+     * materialize all ext lookup tables in the cube\n+     * @param context materialize context, the snapshotPath of lookup table should be put into context\n+     *                via {@code LookupMaterializeContext.addLookupSnapshotPath} method\n+     * @param cube\n+     */\n+    void materializeLookupTablesForCube(LookupMaterializeContext context, CubeInstance cube);\n }", "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/ILookupMaterializer.java"}, {"additions": 4, "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/JobBuilderSupport.java", "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/JobBuilderSupport.java", "sha": "6458a6a4cbba0659b774373caae43258e16a61d2", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/JobBuilderSupport.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468", "patch": "@@ -135,10 +135,13 @@ public HadoopShellExecutable createBuildDictionaryStep(String jobId) {\n         return buildDictionaryStep;\n     }\n \n-    public UpdateCubeInfoAfterBuildStep createUpdateCubeInfoAfterBuildStep(String jobId) {\n+    public UpdateCubeInfoAfterBuildStep createUpdateCubeInfoAfterBuildStep(String jobId, LookupMaterializeContext lookupMaterializeContext) {\n         final UpdateCubeInfoAfterBuildStep result = new UpdateCubeInfoAfterBuildStep();\n         result.setName(ExecutableConstants.STEP_NAME_UPDATE_CUBE_INFO);\n         result.getParams().put(BatchConstants.CFG_OUTPUT_PATH, getFactDistinctColumnsPath(jobId));\n+        if (lookupMaterializeContext != null) {\n+            result.getParams().put(BatchConstants.ARG_EXT_LOOKUP_SNAPSHOTS_INFO, lookupMaterializeContext.getAllLookupSnapshotsInString());\n+        }\n \n         CubingExecutableUtil.setCubeName(seg.getRealization().getName(), result.getParams());\n         CubingExecutableUtil.setSegmentId(seg.getUuid(), result.getParams());", "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/JobBuilderSupport.java"}, {"additions": 84, "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupMaterializeContext.java", "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupMaterializeContext.java", "sha": "f235283576e4fa8c616de8c696c90bbc8831b777", "changes": 84, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupMaterializeContext.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468", "patch": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.apache.kylin.engine.mr;\n+\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.apache.kylin.job.execution.DefaultChainedExecutable;\n+\n+import com.google.common.collect.Maps;\n+\n+public class LookupMaterializeContext {\n+    private DefaultChainedExecutable jobFlow;\n+    private Map<String, String> lookupSnapshotMap;\n+\n+    public LookupMaterializeContext(DefaultChainedExecutable jobFlow) {\n+        this.jobFlow = jobFlow;\n+        this.lookupSnapshotMap = Maps.newHashMap();\n+    }\n+\n+    public DefaultChainedExecutable getJobFlow() {\n+        return jobFlow;\n+    }\n+\n+    /**\n+     * add snapshot path info into the context\n+     * @param lookupTable\n+     * @param snapshotPath\n+     */\n+    public void addLookupSnapshotPath(String lookupTable, String snapshotPath) {\n+        lookupSnapshotMap.put(lookupTable, snapshotPath);\n+    }\n+\n+    /**\n+     *\n+     * @return string format of lookup snapshotPath info, it will return like: \"lookup1=/path/uuid1,lookup2=/path/uuid2\"\n+     *\n+     */\n+    public String getAllLookupSnapshotsInString() {\n+        StringBuilder result = new StringBuilder();\n+        boolean first = true;\n+        for (Entry<String, String> lookupSnapshotEntry : lookupSnapshotMap.entrySet()) {\n+            if (!first) {\n+                result.append(\",\");\n+            }\n+            first = false;\n+            result.append(lookupSnapshotEntry.getKey());\n+            result.append(\"=\");\n+            result.append(lookupSnapshotEntry.getValue());\n+        }\n+        return result.toString();\n+    }\n+\n+    /**\n+     * parse the lookup snapshot string to lookup snapshot path map.\n+     * @param snapshotsString\n+     * @return\n+     */\n+    public static Map<String, String> parseLookupSnapshots(String snapshotsString) {\n+        Map<String, String> lookupSnapshotMap = Maps.newHashMap();\n+        String[] lookupSnapshotEntries = snapshotsString.split(\",\");\n+        for (String lookupSnapshotEntryStr : lookupSnapshotEntries) {\n+            String[] split = lookupSnapshotEntryStr.split(\"=\");\n+            lookupSnapshotMap.put(split[0], split[1]);\n+        }\n+        return lookupSnapshotMap;\n+    }\n+}", "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupMaterializeContext.java"}, {"additions": 5, "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupSnapshotJobBuilder.java", "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupSnapshotJobBuilder.java", "sha": "fff9bcf19a1d40d882375fbdd8bfc422f60d19de", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupSnapshotJobBuilder.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468", "patch": "@@ -24,6 +24,7 @@\n import org.apache.kylin.cube.CubeInstance;\n import org.apache.kylin.cube.model.CubeDesc;\n import org.apache.kylin.cube.model.SnapshotTableDesc;\n+import org.apache.kylin.engine.mr.common.BatchConstants;\n import org.apache.kylin.engine.mr.steps.lookup.LookupExecutableUtil;\n import org.apache.kylin.engine.mr.steps.lookup.LookupSnapshotToMetaStoreStep;\n import org.apache.kylin.engine.mr.steps.lookup.UpdateCubeAfterSnapshotStep;\n@@ -62,11 +63,14 @@ public LookupSnapshotBuildJob build() {\n \n     private void addExtMaterializeLookupTableSteps(final LookupSnapshotBuildJob result,\n             SnapshotTableDesc snapshotTableDesc) {\n+        LookupMaterializeContext lookupMaterializeContext = new LookupMaterializeContext(result);\n         ILookupMaterializer materializer = MRUtil.getExtLookupMaterializer(snapshotTableDesc.getStorageType());\n-        materializer.materializeLookupTable(result, cube, lookupTable);\n+        materializer.materializeLookupTable(lookupMaterializeContext, cube, lookupTable);\n \n         UpdateCubeAfterSnapshotStep afterSnapshotStep = new UpdateCubeAfterSnapshotStep();\n         afterSnapshotStep.setName(ExecutableConstants.STEP_NAME_MATERIALIZE_LOOKUP_TABLE_UPDATE_CUBE);\n+\n+        afterSnapshotStep.getParams().put(BatchConstants.ARG_EXT_LOOKUP_SNAPSHOTS_INFO, lookupMaterializeContext.getAllLookupSnapshotsInString());\n         LookupExecutableUtil.setCubeName(cube.getName(), afterSnapshotStep.getParams());\n         LookupExecutableUtil.setLookupTableName(lookupTable, afterSnapshotStep.getParams());\n         LookupExecutableUtil.setSegments(segments, afterSnapshotStep.getParams());", "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupSnapshotJobBuilder.java"}, {"additions": 1, "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/BatchConstants.java", "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/BatchConstants.java", "sha": "18ac4ac0aecc303a4743bcb4c3526a86cca1d963", "changes": 6, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/BatchConstants.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468", "patch": "@@ -99,6 +99,7 @@\n     String ARG_DICT_PATH = \"dictPath\";\n     String ARG_TABLE_NAME = \"tableName\";\n     String ARG_LOOKUP_SNAPSHOT_ID = \"snapshotID\";\n+    String ARG_EXT_LOOKUP_SNAPSHOTS_INFO = \"extlookupsnapshots\";\n \n     /**\n      * logger and counter\n@@ -111,10 +112,5 @@\n      */\n     String GLOBAL_DICTIONNARY_CLASS = \"org.apache.kylin.dict.GlobalDictionaryBuilder\";\n \n-    /**\n-     * the prefix of ext lookup table snapshot resource path that stored in the build context\n-     */\n-    String LOOKUP_EXT_SNAPSHOT_CONTEXT_PFX = \"lookup.ext.snapshot.res.path.\";\n-\n     String LOOKUP_EXT_SNAPSHOT_SRC_RECORD_CNT_PFX = \"lookup.ext.snapshot.src.record.cnt.\";\n }", "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/common/BatchConstants.java"}, {"additions": 15, "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/UpdateCubeInfoAfterBuildStep.java", "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/UpdateCubeInfoAfterBuildStep.java", "sha": "f749c80a09a72ad32109eb7b748c343904b46edb", "changes": 21, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/UpdateCubeInfoAfterBuildStep.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468", "patch": "@@ -22,6 +22,7 @@\n import java.io.IOException;\n import java.io.InputStreamReader;\n import java.util.List;\n+import java.util.Map;\n \n import org.apache.commons.io.IOUtils;\n import org.apache.hadoop.fs.FSDataInputStream;\n@@ -33,6 +34,7 @@\n import org.apache.kylin.cube.CubeSegment;\n import org.apache.kylin.cube.model.SnapshotTableDesc;\n import org.apache.kylin.engine.mr.CubingJob;\n+import org.apache.kylin.engine.mr.LookupMaterializeContext;\n import org.apache.kylin.engine.mr.common.BatchConstants;\n import org.apache.kylin.job.exception.ExecuteException;\n import org.apache.kylin.job.execution.AbstractExecutable;\n@@ -73,7 +75,7 @@ protected ExecuteResult doWork(ExecutableContext context) throws ExecuteExceptio\n         segment.setInputRecordsSize(sourceSizeBytes);\n \n         try {\n-            saveExtSnapshotIfNeeded(cubeManager, cubingJob, cube, segment);\n+            saveExtSnapshotIfNeeded(cubeManager, cube, segment);\n             if (segment.isOffsetCube()) {\n                 updateTimeRange(segment);\n             }\n@@ -86,19 +88,26 @@ protected ExecuteResult doWork(ExecutableContext context) throws ExecuteExceptio\n         }\n     }\n \n-    private void saveExtSnapshotIfNeeded(CubeManager cubeManager, CubingJob cubingJob, CubeInstance cube, CubeSegment segment) throws IOException {\n+    private void saveExtSnapshotIfNeeded(CubeManager cubeManager, CubeInstance cube, CubeSegment segment) throws IOException {\n+        String extLookupSnapshotStr = this.getParam(BatchConstants.ARG_EXT_LOOKUP_SNAPSHOTS_INFO);\n+        if (extLookupSnapshotStr == null || extLookupSnapshotStr.isEmpty()) {\n+            return;\n+        }\n+        Map<String, String> extLookupSnapshotMap = LookupMaterializeContext.parseLookupSnapshots(extLookupSnapshotStr);\n+        logger.info(\"update ext lookup snapshots:{}\", extLookupSnapshotMap);\n         List<SnapshotTableDesc> snapshotTableDescList = cube.getDescriptor().getSnapshotTableDescList();\n         for (SnapshotTableDesc snapshotTableDesc : snapshotTableDescList) {\n             String tableName = snapshotTableDesc.getTableName();\n             if (snapshotTableDesc.isExtSnapshotTable()) {\n-                String contextKey = BatchConstants.LOOKUP_EXT_SNAPSHOT_CONTEXT_PFX + tableName;\n-                String newSnapshotResPath = cubingJob.getExtraInfo(contextKey);\n-                if (newSnapshotResPath == null) {\n+                String newSnapshotResPath = extLookupSnapshotMap.get(tableName);\n+                if (newSnapshotResPath == null || newSnapshotResPath.isEmpty()) {\n                     continue;\n                 }\n \n                 if (snapshotTableDesc.isGlobal()) {\n-                    cubeManager.updateCubeLookupSnapshot(cube, tableName, newSnapshotResPath);\n+                    if (!newSnapshotResPath.equals(cube.getSnapshotResPath(tableName))) {\n+                        cubeManager.updateCubeLookupSnapshot(cube, tableName, newSnapshotResPath);\n+                    }\n                 } else {\n                     segment.putSnapshotResPath(tableName, newSnapshotResPath);\n                 }", "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/UpdateCubeInfoAfterBuildStep.java"}, {"additions": 10, "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/lookup/UpdateCubeAfterSnapshotStep.java", "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/lookup/UpdateCubeAfterSnapshotStep.java", "sha": "514c9409a9c903a2247b80dc2608301dc618a689", "changes": 15, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/lookup/UpdateCubeAfterSnapshotStep.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468", "patch": "@@ -20,15 +20,16 @@\n \n import java.io.IOException;\n import java.util.List;\n+import java.util.Map;\n \n import org.apache.kylin.common.KylinConfig;\n import org.apache.kylin.cube.CubeInstance;\n import org.apache.kylin.cube.CubeManager;\n import org.apache.kylin.cube.model.CubeDesc;\n+import org.apache.kylin.engine.mr.LookupMaterializeContext;\n import org.apache.kylin.engine.mr.common.BatchConstants;\n import org.apache.kylin.job.exception.ExecuteException;\n import org.apache.kylin.job.execution.AbstractExecutable;\n-import org.apache.kylin.job.execution.DefaultChainedExecutable;\n import org.apache.kylin.job.execution.ExecutableContext;\n import org.apache.kylin.job.execution.ExecuteResult;\n import org.slf4j.Logger;\n@@ -53,17 +54,21 @@ protected ExecuteResult doWork(ExecutableContext context) throws ExecuteExceptio\n         CubeInstance cube = cubeManager.getCube(LookupExecutableUtil.getCubeName(this.getParams()));\n         List<String> segmentIDs = LookupExecutableUtil.getSegments(this.getParams());\n         String lookupTableName = LookupExecutableUtil.getLookupTableName(this.getParams());\n-        DefaultChainedExecutable job = (DefaultChainedExecutable) getManager().getJob(LookupExecutableUtil.getJobID(this.getParams()));\n \n-        String contextKey = BatchConstants.LOOKUP_EXT_SNAPSHOT_CONTEXT_PFX + lookupTableName;\n-        String snapshotResPath = job.getExtraInfo(contextKey);\n+        String extLookupSnapshotStr = this.getParam(BatchConstants.ARG_EXT_LOOKUP_SNAPSHOTS_INFO);\n+        if (extLookupSnapshotStr == null || extLookupSnapshotStr.isEmpty()) {\n+            return new ExecuteResult();\n+        }\n+\n+        Map<String, String> extLookupSnapshotMap = LookupMaterializeContext.parseLookupSnapshots(extLookupSnapshotStr);\n+        String snapshotResPath = extLookupSnapshotMap.get(lookupTableName);\n         if (snapshotResPath == null) {\n             logger.info(\"no snapshot path exist in the context, so no need to update snapshot path\");\n             return new ExecuteResult();\n         }\n         CubeDesc cubeDesc = cube.getDescriptor();\n         try {\n-            logger.info(\"update snapshot path to cube metadata\");\n+            logger.info(\"update snapshot path:{} to cube:{}\", snapshotResPath, cube.getName());\n             if (cubeDesc.isGlobalSnapshotTable(lookupTableName)) {\n                 if (!snapshotResPath.equals(cube.getSnapshotResPath(lookupTableName))) {\n                     LookupExecutableUtil.updateSnapshotPathToCube(cubeManager, cube, lookupTableName,", "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/lookup/UpdateCubeAfterSnapshotStep.java"}, {"additions": 41, "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/test/java/org/apache/kylin/engine/mr/steps/LookupMaterializeContextTest.java", "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/test/java/org/apache/kylin/engine/mr/steps/LookupMaterializeContextTest.java", "sha": "a876cb23ea2d0063862094dab9b1a1823882a090", "changes": 41, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/test/java/org/apache/kylin/engine/mr/steps/LookupMaterializeContextTest.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468", "patch": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.apache.kylin.engine.mr.steps;\n+\n+import org.apache.kylin.engine.mr.LookupMaterializeContext;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class LookupMaterializeContextTest {\n+    @Test\n+    public void parseAndToStringTest() throws Exception {\n+        LookupMaterializeContext context = new LookupMaterializeContext(null);\n+        context.addLookupSnapshotPath(\"lookup1\", \"/ext_snapshot/uuid1\");\n+        context.addLookupSnapshotPath(\"lookup2\", \"/ext_snapshot/uuid2\");\n+\n+        String lookupSnapshotsStr = context.getAllLookupSnapshotsInString();\n+        Map<String, String> lookupSnapshotMap = LookupMaterializeContext.parseLookupSnapshots(lookupSnapshotsStr);\n+        assertEquals(2, lookupSnapshotMap.size());\n+        assertEquals(\"/ext_snapshot/uuid1\", lookupSnapshotMap.get(\"lookup1\"));\n+        assertEquals(\"/ext_snapshot/uuid2\", lookupSnapshotMap.get(\"lookup2\"));\n+    }\n+}", "filename": "engine-mr/src/test/java/org/apache/kylin/engine/mr/steps/LookupMaterializeContextTest.java"}, {"additions": 1, "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java", "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java", "sha": "da907719fa5cc5360875d789c3b4db1c93b4cc80", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468", "patch": "@@ -512,6 +512,7 @@ private void releaseAllSegments(CubeInstance cube) throws IOException {\n         update.setToRemoveSegs(cube.getSegments().toArray(new CubeSegment[cube.getSegments().size()]));\n         update.setCuboids(Maps.<Long, Long> newHashMap());\n         update.setCuboidsRecommend(Sets.<Long> newHashSet());\n+        update.setUpdateTableSnapshotPath(Maps.<String, String>newHashMap());\n         CubeManager.getInstance(getConfig()).updateCube(update);\n     }\n ", "filename": "server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java"}, {"additions": 11, "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/HBaseLookupMRSteps.java", "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/HBaseLookupMRSteps.java", "sha": "1c91be2604170b18cba5d16d9e84af422a0a5f01", "changes": 20, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/kylin/contents/storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/HBaseLookupMRSteps.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468", "patch": "@@ -31,6 +31,7 @@\n import org.apache.kylin.dict.lookup.ExtTableSnapshotInfo;\n import org.apache.kylin.dict.lookup.ExtTableSnapshotInfoManager;\n import org.apache.kylin.engine.mr.JobBuilderSupport;\n+import org.apache.kylin.engine.mr.LookupMaterializeContext;\n import org.apache.kylin.engine.mr.common.BatchConstants;\n import org.apache.kylin.engine.mr.common.HadoopShellExecutable;\n import org.apache.kylin.engine.mr.common.MapReduceExecutable;\n@@ -59,7 +60,7 @@ public HBaseLookupMRSteps(CubeInstance cube) {\n         this.config = new JobEngineConfig(cube.getConfig());\n     }\n \n-    public void addMaterializeLookupTablesSteps(DefaultChainedExecutable jobFlow) {\n+    public void addMaterializeLookupTablesSteps(LookupMaterializeContext context) {\n         CubeDesc cubeDesc = cube.getDescriptor();\n         Set<String> allLookupTables = Sets.newHashSet();\n         for (DimensionDesc dim : cubeDesc.getDimensions()) {\n@@ -72,33 +73,34 @@ public void addMaterializeLookupTablesSteps(DefaultChainedExecutable jobFlow) {\n         for (SnapshotTableDesc snapshotTableDesc : snapshotTableDescs) {\n             if (ExtTableSnapshotInfo.STORAGE_TYPE_HBASE.equals(snapshotTableDesc.getStorageType())\n                     && allLookupTables.contains(snapshotTableDesc.getTableName())) {\n-                addMaterializeLookupTableSteps(jobFlow, snapshotTableDesc.getTableName(), snapshotTableDesc);\n+                addMaterializeLookupTableSteps(context, snapshotTableDesc.getTableName(), snapshotTableDesc);\n             }\n         }\n     }\n \n-    public void addMaterializeLookupTableSteps(DefaultChainedExecutable jobFlow, String tableName, SnapshotTableDesc snapshotTableDesc) {\n+    public void addMaterializeLookupTableSteps(LookupMaterializeContext context, String tableName, SnapshotTableDesc snapshotTableDesc) {\n         KylinConfig kylinConfig = KylinConfig.getInstanceFromEnv();\n         ExtTableSnapshotInfoManager extTableSnapshotInfoManager = ExtTableSnapshotInfoManager.getInstance(kylinConfig);\n         TableDesc tableDesc = TableMetadataManager.getInstance(kylinConfig).getTableDesc(tableName, cube.getProject());\n         IReadableTable sourceTable = SourceManager.createReadableTable(tableDesc);\n         try {\n-            ExtTableSnapshotInfo latestSnapshot = extTableSnapshotInfoManager.getLatestSnapshot(sourceTable.getSignature(), tableName);\n+            ExtTableSnapshotInfo latestSnapshot = extTableSnapshotInfoManager.getLatestSnapshot(\n+                    sourceTable.getSignature(), tableName);\n             if (latestSnapshot != null) {\n                 logger.info(\"there is latest snapshot exist for table:{}, skip build snapshot step.\", tableName);\n-                jobFlow.addExtraInfo(BatchConstants.LOOKUP_EXT_SNAPSHOT_CONTEXT_PFX + latestSnapshot.getTableName(),\n-                        latestSnapshot.getResourcePath());\n+                context.addLookupSnapshotPath(tableName, latestSnapshot.getResourcePath());\n                 return;\n             }\n         } catch (IOException ioException) {\n             throw new RuntimeException(ioException);\n         }\n         logger.info(\"add build snapshot steps for table:{}\", tableName);\n         String snapshotID = genLookupSnapshotID();\n-        addLookupTableConvertToHFilesStep(jobFlow, tableName, snapshotID);\n-        addLookupTableHFilesBulkLoadStep(jobFlow, tableName, snapshotID);\n+        context.addLookupSnapshotPath(tableName, ExtTableSnapshotInfo.getResourcePath(tableName, snapshotID));\n+        addLookupTableConvertToHFilesStep(context.getJobFlow(), tableName, snapshotID);\n+        addLookupTableHFilesBulkLoadStep(context.getJobFlow(), tableName, snapshotID);\n         if (snapshotTableDesc !=null && snapshotTableDesc.isEnableLocalCache()) {\n-            addUpdateSnapshotQueryCacheStep(jobFlow, tableName, snapshotID);\n+            addUpdateSnapshotQueryCacheStep(context.getJobFlow(), tableName, snapshotID);\n         }\n     }\n ", "filename": "storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/HBaseLookupMRSteps.java"}, {"additions": 5, "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/HBaseLookupMaterializer.java", "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/HBaseLookupMaterializer.java", "sha": "31d9150605bae255ccee0345e214fa778f30ff6c", "changes": 10, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/kylin/contents/storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/HBaseLookupMaterializer.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468", "patch": "@@ -21,20 +21,20 @@\n import org.apache.kylin.cube.CubeInstance;\n import org.apache.kylin.cube.model.SnapshotTableDesc;\n import org.apache.kylin.engine.mr.ILookupMaterializer;\n-import org.apache.kylin.job.execution.DefaultChainedExecutable;\n+import org.apache.kylin.engine.mr.LookupMaterializeContext;\n \n public class HBaseLookupMaterializer implements ILookupMaterializer{\n \n     @Override\n-    public void materializeLookupTable(DefaultChainedExecutable jobFlow, CubeInstance cube, String lookupTableName) {\n+    public void materializeLookupTable(LookupMaterializeContext context, CubeInstance cube, String lookupTableName) {\n         HBaseLookupMRSteps lookupMRSteps = new HBaseLookupMRSteps(cube);\n         SnapshotTableDesc snapshotTableDesc = cube.getDescriptor().getSnapshotTableDesc(lookupTableName);\n-        lookupMRSteps.addMaterializeLookupTableSteps(jobFlow, lookupTableName, snapshotTableDesc);\n+        lookupMRSteps.addMaterializeLookupTableSteps(context, lookupTableName, snapshotTableDesc);\n     }\n \n     @Override\n-    public void materializeLookupTablesForCube(DefaultChainedExecutable jobFlow, CubeInstance cube) {\n+    public void materializeLookupTablesForCube(LookupMaterializeContext context, CubeInstance cube) {\n         HBaseLookupMRSteps lookupMRSteps = new HBaseLookupMRSteps(cube);\n-        lookupMRSteps.addMaterializeLookupTablesSteps(jobFlow);\n+        lookupMRSteps.addMaterializeLookupTablesSteps(context);\n     }\n }", "filename": "storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/HBaseLookupMaterializer.java"}, {"additions": 0, "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/LookupTableToHFileJob.java", "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/LookupTableToHFileJob.java", "sha": "39ebe996a67f283aa695f928ee3a0c2d4f3091b0", "changes": 11, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/kylin/contents/storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/LookupTableToHFileJob.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468", "patch": "@@ -52,8 +52,6 @@\n import org.apache.kylin.engine.mr.MRUtil;\n import org.apache.kylin.engine.mr.common.AbstractHadoopJob;\n import org.apache.kylin.engine.mr.common.BatchConstants;\n-import org.apache.kylin.job.execution.DefaultChainedExecutable;\n-import org.apache.kylin.job.execution.ExecutableManager;\n import org.apache.kylin.metadata.TableMetadataManager;\n import org.apache.kylin.metadata.model.DataModelDesc;\n import org.apache.kylin.metadata.model.JoinDesc;\n@@ -91,7 +89,6 @@ public int run(String[] args) throws Exception {\n             Path output = new Path(getOptionValue(OPTION_OUTPUT_PATH));\n             String cubeName = getOptionValue(OPTION_CUBE_NAME).toUpperCase();\n             String tableName = getOptionValue(OPTION_TABLE_NAME);\n-            String cubingJobID = getOptionValue(OPTION_CUBING_JOB_ID);\n             String lookupSnapshotID = getOptionValue(OPTION_LOOKUP_SNAPSHOT_ID);\n \n             KylinConfig kylinConfig = KylinConfig.getInstanceFromEnv();\n@@ -112,7 +109,6 @@ public int run(String[] args) throws Exception {\n             ExtTableSnapshotInfo snapshot = createSnapshotResource(extSnapshotInfoManager, tableName, lookupSnapshotID,\n                     keyColumns, hTableNameAndShard.getFirst(), hTableNameAndShard.getSecond(), sourceTable);\n             logger.info(\"created snapshot information at:{}\", snapshot.getResourcePath());\n-            saveSnapshotInfoToJobContext(kylinConfig, cubingJobID, snapshot);\n \n             job = Job.getInstance(HBaseConfiguration.create(getConf()), getOptionValue(OPTION_JOB_NAME));\n \n@@ -194,13 +190,6 @@ private void removeSnapshotIfExist(ExtTableSnapshotInfoManager extSnapshotInfoMa\n         return result;\n     }\n \n-    private void saveSnapshotInfoToJobContext(KylinConfig kylinConfig, String jobID, ExtTableSnapshotInfo snapshot) {\n-        ExecutableManager execMgr = ExecutableManager.getInstance(kylinConfig);\n-        DefaultChainedExecutable job = (DefaultChainedExecutable) execMgr.getJob(jobID);\n-        job.addExtraInfo(BatchConstants.LOOKUP_EXT_SNAPSHOT_CONTEXT_PFX + snapshot.getTableName(),\n-                snapshot.getResourcePath());\n-    }\n-\n     /**\n      *\n      * @param sourceTableName", "filename": "storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/LookupTableToHFileJob.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/ca42b92b6d86eb6cb3eb22a212e77f2155b19890", "parent": "https://github.com/apache/kylin/commit/f37fbce17f6e25775877290ba1f0de076c62f32f", "message": "Add null pointer check for ProjectManager#getProject to avoid NPE", "bug_id": "kylin_9", "file": [{"additions": 4, "raw_url": "https://github.com/apache/kylin/raw/ca42b92b6d86eb6cb3eb22a212e77f2155b19890/core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java", "blob_url": "https://github.com/apache/kylin/blob/ca42b92b6d86eb6cb3eb22a212e77f2155b19890/core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java", "sha": "0dd364d124c6832de0c6b40d2c582b8d358d010f", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java?ref=ca42b92b6d86eb6cb3eb22a212e77f2155b19890", "patch": "@@ -132,6 +132,10 @@ public ProjectInstance reloadProjectQuietly(String project) throws IOException {\n     }\n \n     public ProjectInstance getProject(String projectName) {\n+        // Null check is needed for ConcurrentMap does not supporting .get(null)\n+        if (projectName == null)\n+            return null;\n+\n         try (AutoLock lock = prjMapLock.lockForRead()) {\n             return projectMap.get(projectName);\n         }", "filename": "core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/8edc901dec945776c7989c414a4eee746a5f741a", "parent": "https://github.com/apache/kylin/commit/b1559c669c3594b33f9e4aeff415d780a0a170ca", "message": "minor, fix NPE", "bug_id": "kylin_10", "file": [{"additions": 1, "raw_url": "https://github.com/apache/kylin/raw/8edc901dec945776c7989c414a4eee746a5f741a/engine-spark/src/main/java/org/apache/kylin/engine/spark/SparkBatchCubingJobBuilder2.java", "blob_url": "https://github.com/apache/kylin/blob/8edc901dec945776c7989c414a4eee746a5f741a/engine-spark/src/main/java/org/apache/kylin/engine/spark/SparkBatchCubingJobBuilder2.java", "sha": "27bcff3ae13f6506411608b4183f48675b1285f2", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-spark/src/main/java/org/apache/kylin/engine/spark/SparkBatchCubingJobBuilder2.java?ref=8edc901dec945776c7989c414a4eee746a5f741a", "patch": "@@ -52,6 +52,7 @@ protected void addLayerCubingSteps(final CubingJob result, final String jobId, f\n         sparkExecutable.setParam(SparkCubingByLayer.OPTION_META_URL.getOpt(),\n                 getSegmentMetadataUrl(seg.getConfig(), seg.getUuid()));\n         sparkExecutable.setParam(SparkCubingByLayer.OPTION_OUTPUT_PATH.getOpt(), cuboidRootPath);\n+        sparkExecutable.setJobId(jobId);\n \n         StringBuilder jars = new StringBuilder();\n ", "filename": "engine-spark/src/main/java/org/apache/kylin/engine/spark/SparkBatchCubingJobBuilder2.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/9265e150d80519d3e4f532c5f106e6718543daba", "parent": "https://github.com/apache/kylin/commit/14dd92e00fa1548889bf6e6bba8010f8a6a8cfcf", "message": "KYLIN-3055 Fix NPE for intersect_count query", "bug_id": "kylin_11", "file": [{"additions": 9, "raw_url": "https://github.com/apache/kylin/raw/9265e150d80519d3e4f532c5f106e6718543daba/core-storage/src/main/java/org/apache/kylin/storage/gtrecord/GTCubeStorageQueryBase.java", "blob_url": "https://github.com/apache/kylin/blob/9265e150d80519d3e4f532c5f106e6718543daba/core-storage/src/main/java/org/apache/kylin/storage/gtrecord/GTCubeStorageQueryBase.java", "sha": "024990f303f1fad9cbf4071e4fc80367ebb085f8", "changes": 11, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-storage/src/main/java/org/apache/kylin/storage/gtrecord/GTCubeStorageQueryBase.java?ref=9265e150d80519d3e4f532c5f106e6718543daba", "patch": "@@ -39,6 +39,7 @@\n import org.apache.kylin.dict.lookup.LookupStringTable;\n import org.apache.kylin.gridtable.StorageLimitLevel;\n import org.apache.kylin.measure.MeasureType;\n+import org.apache.kylin.measure.bitmap.BitmapMeasureType;\n import org.apache.kylin.metadata.filter.CaseTupleFilter;\n import org.apache.kylin.metadata.filter.ColumnTupleFilter;\n import org.apache.kylin.metadata.filter.CompareTupleFilter;\n@@ -143,7 +144,7 @@ protected GTCubeStorageQueryRequest getStorageQueryRequest(StorageContext contex\n \n         // exactAggregation mean: needn't aggregation at storage and query engine both.\n         boolean exactAggregation = isExactAggregation(context, cuboid, groups, otherDimsD, singleValuesD,\n-                derivedPostAggregation, sqlDigest.aggregations);\n+                derivedPostAggregation, sqlDigest.aggregations, sqlDigest.aggrSqlCalls);\n         context.setExactAggregation(exactAggregation);\n \n         // replace derived columns in filter with host columns; columns on loosened condition must be added to group by\n@@ -518,7 +519,7 @@ private TupleFilter checkHavingCanPushDown(TupleFilter havingFilter, Set<TblColR\n \n     private boolean isExactAggregation(StorageContext context, Cuboid cuboid, Collection<TblColRef> groups,\n             Set<TblColRef> othersD, Set<TblColRef> singleValuesD, Set<TblColRef> derivedPostAggregation,\n-            Collection<FunctionDesc> functionDescs) {\n+            Collection<FunctionDesc> functionDescs, List<SQLDigest.SQLCall> aggrSQLCalls) {\n         if (context.isNeedStorageAggregation()) {\n             logger.info(\"exactAggregation is false because need storage aggregation\");\n             return false;\n@@ -550,6 +551,12 @@ private boolean isExactAggregation(StorageContext context, Cuboid cuboid, Collec\n                 return false;\n             }\n         }\n+        for (SQLDigest.SQLCall aggrSQLCall : aggrSQLCalls) {\n+            if (aggrSQLCall.function.equals(BitmapMeasureType.FUNC_INTERSECT_COUNT_DISTINCT)) {\n+                logger.info(\"exactAggregation is false because has INTERSECT_COUNT\");\n+                return false;\n+            }\n+        }\n \n         // for partitioned cube, the partition column must belong to group by or has single value\n         PartitionDesc partDesc = cuboid.getCubeDesc().getModel().getPartitionDesc();", "filename": "core-storage/src/main/java/org/apache/kylin/storage/gtrecord/GTCubeStorageQueryBase.java"}, {"additions": 27, "raw_url": "https://github.com/apache/kylin/raw/9265e150d80519d3e4f532c5f106e6718543daba/kylin-it/src/test/resources/query/sql_intersect_count/query01.sql", "blob_url": "https://github.com/apache/kylin/blob/9265e150d80519d3e4f532c5f106e6718543daba/kylin-it/src/test/resources/query/sql_intersect_count/query01.sql", "sha": "7fd5ca2b4d289425e2efa275fa80784d223669e4", "changes": 27, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/kylin-it/src/test/resources/query/sql_intersect_count/query01.sql?ref=9265e150d80519d3e4f532c5f106e6718543daba", "patch": "@@ -0,0 +1,27 @@\n+--\n+-- Licensed to the Apache Software Foundation (ASF) under one\n+-- or more contributor license agreements.  See the NOTICE file\n+-- distributed with this work for additional information\n+-- regarding copyright ownership.  The ASF licenses this file\n+-- to you under the Apache License, Version 2.0 (the\n+-- \"License\"); you may not use this file except in compliance\n+-- with the License.  You may obtain a copy of the License at\n+--\n+--     http://www.apache.org/licenses/LICENSE-2.0\n+--\n+-- Unless required by applicable law or agreed to in writing, software\n+-- distributed under the License is distributed on an \"AS IS\" BASIS,\n+-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+-- See the License for the specific language governing permissions and\n+-- limitations under the License.\n+--\n+select CAL_DT,\n+intersect_count(TEST_COUNT_DISTINCT_BITMAP, CAL_DT, array[date'2012-01-01']) as first_day,\n+intersect_count(TEST_COUNT_DISTINCT_BITMAP, CAL_DT, array[date'2012-01-02']) as second_day,\n+intersect_count(TEST_COUNT_DISTINCT_BITMAP, CAL_DT, array[date'2012-01-03']) as third_day,\n+intersect_count(TEST_COUNT_DISTINCT_BITMAP, CAL_DT, array[date'2012-01-01',date'2012-01-02']) as retention_oneday,\n+intersect_count(TEST_COUNT_DISTINCT_BITMAP, CAL_DT, array[date'2012-01-01',date'2012-01-02',date'2012-01-03']) as retention_twoday\n+from test_kylin_fact\n+where CAL_DT in (date'2012-01-01',date'2012-01-02',date'2012-01-03')\n+group by CAL_DT\n+", "filename": "kylin-it/src/test/resources/query/sql_intersect_count/query01.sql"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/2415fd9e65b7bf483c375eda7d074c6804edb60e", "parent": "https://github.com/apache/kylin/commit/bd7cb9c9570f3d3cb0ceeb8f4c6be81853eb59bd", "message": "minor, fix NPE in ACL ValidateUtil getALlUsers", "bug_id": "kylin_12", "file": [{"additions": 4, "raw_url": "https://github.com/apache/kylin/raw/2415fd9e65b7bf483c375eda7d074c6804edb60e/server-base/src/main/java/org/apache/kylin/rest/util/ValidateUtil.java", "blob_url": "https://github.com/apache/kylin/blob/2415fd9e65b7bf483c375eda7d074c6804edb60e/server-base/src/main/java/org/apache/kylin/rest/util/ValidateUtil.java", "sha": "7e513aeb07029dae76e9b4ca7453b2485714b73f", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/util/ValidateUtil.java?ref=2415fd9e65b7bf483c375eda7d074c6804edb60e", "patch": "@@ -122,8 +122,10 @@ public void validateColumn(String project, String table, Collection<String> colu\n         ProjectInstance prj = projectService.getProjectManager().getProject(project);\n         AclEntity ae = accessService.getAclEntity(\"ProjectInstance\", prj.getUuid());\n         Acl acl = accessService.getAcl(ae);\n-        for (AccessControlEntry ace : acl.getEntries()) {\n-            allUsers.add(((PrincipalSid) ace.getSid()).getPrincipal());\n+        if (acl != null && acl.getEntries() != null) {\n+            for (AccessControlEntry ace : acl.getEntries()) {\n+                allUsers.add(((PrincipalSid) ace.getSid()).getPrincipal());\n+            }\n         }\n         return allUsers;\n     }", "filename": "server-base/src/main/java/org/apache/kylin/rest/util/ValidateUtil.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/3e9bc5bd2e818d9e855ac2b917c8942800e0788e", "parent": "https://github.com/apache/kylin/commit/3ec60100454bd2ff841a77581c32bdb3d9b7074e", "message": "KYLIN-3081, fix potential NPE\n\nSigned-off-by: shaofengshi <shaofengshi@apache.org>", "bug_id": "kylin_13", "file": [{"additions": 20, "raw_url": "https://github.com/apache/kylin/raw/3e9bc5bd2e818d9e855ac2b917c8942800e0788e/server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java", "blob_url": "https://github.com/apache/kylin/blob/3e9bc5bd2e818d9e855ac2b917c8942800e0788e/server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java", "sha": "20ba9ae5de29d4d40415a1022d0eefa4d7e61902", "changes": 38, "status": "modified", "deletions": 18, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java?ref=3e9bc5bd2e818d9e855ac2b917c8942800e0788e", "patch": "@@ -797,27 +797,29 @@ public void cuboidsExport(@PathVariable String cubeName, @RequestParam(value = \"\n             HttpServletResponse response) throws IOException {\n         CubeInstance cube = cubeService.getCubeManager().getCube(cubeName);\n         if (cube == null) {\n-            logger.error(\"Get cube: [\" + cubeName + \"] failed when get recommend cuboids\");\n-            throw new BadRequestException(\"Get cube: [\" + cubeName + \"] failed when get recommend cuboids\");\n-        }\n-        Map<Long, Long> cuboidList = getRecommendCuboidList(cube);\n-        if (cuboidList == null || cuboidList.isEmpty()) {\n-            logger.warn(\"Cannot get recommend cuboid list for cube \" + cubeName);\n+            throw new BadRequestException(\"Cube: [\" + cubeName + \"] not exist.\");\n         }\n-        if (cuboidList.size() < top) {\n-            logger.info(\"Only recommend \" + cuboidList.size() + \" cuboids less than topn \" + top);\n-        }\n-        Iterator<Long> cuboidIterator = cuboidList.keySet().iterator();\n-        RowKeyColDesc[] rowKeyColDescList = cube.getDescriptor().getRowkey().getRowKeyColumns();\n \n+        Map<Long, Long> cuboidList = getRecommendCuboidList(cube);\n         List<Set<String>> dimensionSetList = Lists.newLinkedList();\n-        while (top-- > 0 && cuboidIterator.hasNext()) {\n-            Set<String> dimensionSet = Sets.newHashSet();\n-            dimensionSetList.add(dimensionSet);\n-            long cuboid = cuboidIterator.next();\n-            for (int i = 0; i < rowKeyColDescList.length; i++) {\n-                if ((cuboid & (1L << rowKeyColDescList[i].getBitIndex())) > 0) {\n-                    dimensionSet.add(rowKeyColDescList[i].getColumn());\n+\n+        if (cuboidList == null || cuboidList.isEmpty()) {\n+            logger.info(\"Cannot get recommended cuboid list for cube \" + cubeName);\n+        }else {\n+            if (cuboidList.size() < top) {\n+                logger.info(\"Require \" + top + \" recommended cuboids, but only \" + cuboidList.size() + \" is found.\");\n+            }\n+            Iterator<Long> cuboidIterator = cuboidList.keySet().iterator();\n+            RowKeyColDesc[] rowKeyColDescList = cube.getDescriptor().getRowkey().getRowKeyColumns();\n+\n+            while (top-- > 0 && cuboidIterator.hasNext()) {\n+                Set<String> dimensionSet = Sets.newHashSet();\n+                dimensionSetList.add(dimensionSet);\n+                long cuboid = cuboidIterator.next();\n+                for (int i = 0; i < rowKeyColDescList.length; i++) {\n+                    if ((cuboid & (1L << rowKeyColDescList[i].getBitIndex())) > 0) {\n+                        dimensionSet.add(rowKeyColDescList[i].getColumn());\n+                    }\n                 }\n             }\n         }", "filename": "server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/04d3ed5cea32b928bd43a64d1e6f58e983a8d162", "parent": "https://github.com/apache/kylin/commit/f65a1dbf3eb1585b4e27104e75e8af1462b3dbc6", "message": "KYLIN-2671 fix NPE", "bug_id": "kylin_14", "file": [{"additions": 2, "raw_url": "https://github.com/apache/kylin/raw/04d3ed5cea32b928bd43a64d1e6f58e983a8d162/server-base/src/main/java/org/apache/kylin/rest/controller/QueryController.java", "blob_url": "https://github.com/apache/kylin/blob/04d3ed5cea32b928bd43a64d1e6f58e983a8d162/server-base/src/main/java/org/apache/kylin/rest/controller/QueryController.java", "sha": "44b5e722bb794b0c87ee412226dfbfdfd08a5ab2", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/controller/QueryController.java?ref=04d3ed5cea32b928bd43a64d1e6f58e983a8d162", "patch": "@@ -83,7 +83,8 @@ public SQLResponse query(@RequestBody SQLRequest sqlRequest) {\n     @ResponseBody\n     public SQLResponse prepareQuery(@RequestBody PrepareSqlRequest sqlRequest) {\n         Map<String, String> newToggles = Maps.newHashMap();\n-        newToggles.putAll(sqlRequest.getBackdoorToggles());\n+        if (sqlRequest.getBackdoorToggles() != null)\n+            newToggles.putAll(sqlRequest.getBackdoorToggles());\n         newToggles.put(BackdoorToggles.DEBUG_TOGGLE_PREPARE_ONLY, \"true\");\n         sqlRequest.setBackdoorToggles(newToggles);\n ", "filename": "server-base/src/main/java/org/apache/kylin/rest/controller/QueryController.java"}, {"additions": 2, "raw_url": "https://github.com/apache/kylin/raw/04d3ed5cea32b928bd43a64d1e6f58e983a8d162/server-base/src/main/java/org/apache/kylin/rest/controller2/QueryControllerV2.java", "blob_url": "https://github.com/apache/kylin/blob/04d3ed5cea32b928bd43a64d1e6f58e983a8d162/server-base/src/main/java/org/apache/kylin/rest/controller2/QueryControllerV2.java", "sha": "2ef4415fad75f735b5290c650c94767c37b5bddd", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/controller2/QueryControllerV2.java?ref=04d3ed5cea32b928bd43a64d1e6f58e983a8d162", "patch": "@@ -89,7 +89,8 @@ public EnvelopeResponse queryV2(@RequestBody SQLRequest sqlRequest) {\n     @ResponseBody\n     public EnvelopeResponse prepareQueryV2(@RequestBody PrepareSqlRequest sqlRequest) {\n         Map<String, String> newToggles = Maps.newHashMap();\n-        newToggles.putAll(sqlRequest.getBackdoorToggles());\n+        if (sqlRequest.getBackdoorToggles() != null)\n+            newToggles.putAll(sqlRequest.getBackdoorToggles());\n         newToggles.put(BackdoorToggles.DEBUG_TOGGLE_PREPARE_ONLY, \"true\");\n         sqlRequest.setBackdoorToggles(newToggles);\n ", "filename": "server-base/src/main/java/org/apache/kylin/rest/controller2/QueryControllerV2.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/263791d2bed483a1a496450ee33d8a1c73ec0a98", "parent": "https://github.com/apache/kylin/commit/5d8adbf0def0a2c034d7a1547e736c8044889fd9", "message": "minor, fix NPE when saving model", "bug_id": "kylin_15", "file": [{"additions": 1, "raw_url": "https://github.com/apache/kylin/raw/263791d2bed483a1a496450ee33d8a1c73ec0a98/server-base/src/main/java/org/apache/kylin/rest/service/ModelService.java", "blob_url": "https://github.com/apache/kylin/blob/263791d2bed483a1a496450ee33d8a1c73ec0a98/server-base/src/main/java/org/apache/kylin/rest/service/ModelService.java", "sha": "8b1ebb34ce7234d9c6d8a6a39281604fa1906f81", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/service/ModelService.java?ref=263791d2bed483a1a496450ee33d8a1c73ec0a98", "patch": "@@ -365,7 +365,7 @@ private String checkIfBreakExistingCubes(DataModelDesc dataModelDesc, String pro\n \n         StringBuilder checkRet = new StringBuilder();\n         if (cubes != null && cubes.size() != 0) {\n-            dataModelDesc.init(getConfig(), getMetadataManager().getAllTablesMap(dataModelDesc.getProject()),\n+            dataModelDesc.init(getConfig(), getMetadataManager().getAllTablesMap(project),\n                     getMetadataManager().listDataModels());\n \n             List<String> curModelDims = getModelCols(dataModelDesc);", "filename": "server-base/src/main/java/org/apache/kylin/rest/service/ModelService.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/0655dbc383790f61ef9b04cd23b6b6ebf5f2ff6e", "parent": "https://github.com/apache/kylin/commit/50435e1143430f3f5c601c1eab22e9fe37c7bf98", "message": "KYLIN-3223 - Query for the list of hybrid cubes results in NPE\n\nSigned-off-by: Billy Liu <billyliu@apache.org>", "bug_id": "kylin_16", "file": [{"additions": 34, "raw_url": "https://github.com/apache/kylin/raw/0655dbc383790f61ef9b04cd23b6b6ebf5f2ff6e/server-base/src/main/java/org/apache/kylin/rest/service/HybridService.java", "blob_url": "https://github.com/apache/kylin/blob/0655dbc383790f61ef9b04cd23b6b6ebf5f2ff6e/server-base/src/main/java/org/apache/kylin/rest/service/HybridService.java", "sha": "eebc991f5fa74fa793ae27db235a100eb7118319", "changes": 49, "status": "modified", "deletions": 15, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/service/HybridService.java?ref=0655dbc383790f61ef9b04cd23b6b6ebf5f2ff6e", "patch": "@@ -19,7 +19,6 @@\n package org.apache.kylin.rest.service;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n \n import org.apache.commons.lang.StringUtils;\n@@ -35,6 +34,7 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n+import org.springframework.security.access.AccessDeniedException;\n \n @Component(\"hybridService\")\n public class HybridService extends BasicService {\n@@ -113,32 +113,51 @@ public HybridInstance getHybridInstance(String hybridName) {\n     }\n \n     public List<HybridInstance> listHybrids(final String projectName, final String modelName) {\n-        aclEvaluate.checkProjectReadPermission(projectName);\n-        ProjectInstance project = (null != projectName) ? getProjectManager().getProject(projectName) : null;\n-        List<HybridInstance> hybridsInProject = new ArrayList<HybridInstance>();\n-\n+        List<HybridInstance> allHybrids = new ArrayList<HybridInstance>();\n         if (StringUtils.isEmpty(projectName)) {\n-            hybridsInProject = new ArrayList(getHybridManager().listHybridInstances());\n-        } else if (project == null) {\n-            return Collections.emptyList();\n+            List<ProjectInstance> allProjectInstances = getProjectManager().listAllProjects();\n+            List<ProjectInstance> readableProjects = new ArrayList<ProjectInstance>();\n+            for (ProjectInstance projectInstance : allProjectInstances) {\n+                if (projectInstance == null) {\n+                    continue;\n+                }\n+                boolean hasReadAccess = false;\n+                try {\n+                    hasReadAccess = aclEvaluate.hasProjectReadPermission(projectInstance);\n+                } catch (AccessDeniedException e) {\n+                    //ignore to continue\n+                }\n+                if (hasReadAccess) {\n+                    readableProjects.add(projectInstance);\n+                }\n+            }\n+            for (ProjectInstance projectInstance : readableProjects) {\n+                List<RealizationEntry> realizationEntries = projectInstance.getRealizationEntries(RealizationType.HYBRID);\n+                if (realizationEntries != null) {\n+                    for (RealizationEntry entry : realizationEntries) {\n+                        HybridInstance instance = getHybridManager().getHybridInstance(entry.getRealization());\n+                        allHybrids.add(instance);\n+                    }\n+                }\n+            }\n         } else {\n-            List<RealizationEntry> realizationEntries = project.getRealizationEntries(RealizationType.HYBRID);\n+            aclEvaluate.checkProjectReadPermission(projectName);\n+            ProjectInstance projectInstance = getProjectManager().getProject(projectName);\n+            List<RealizationEntry> realizationEntries = projectInstance.getRealizationEntries(RealizationType.HYBRID);\n             if (realizationEntries != null) {\n                 for (RealizationEntry entry : realizationEntries) {\n                     HybridInstance instance = getHybridManager().getHybridInstance(entry.getRealization());\n-                    hybridsInProject.add(instance);\n+                    allHybrids.add(instance);\n                 }\n             }\n         }\n \n-        DataModelDesc model = (null != modelName) ? getDataModelManager().getDataModelDesc(modelName) : null;\n         if (StringUtils.isEmpty(modelName)) {\n-            return hybridsInProject;\n-        } else if (model == null) {\n-            return Collections.emptyList();\n+            return allHybrids;\n         } else {\n+            DataModelDesc model = getMetadataManager().getDataModelDesc(modelName);\n             List<HybridInstance> hybridsInModel = new ArrayList<HybridInstance>();\n-            for (HybridInstance hybridInstance : hybridsInProject) {\n+            for (HybridInstance hybridInstance : allHybrids) {\n                 boolean hybridInModel = false;\n                 for (RealizationEntry entry : hybridInstance.getRealizationEntries()) {\n                     CubeDesc cubeDesc = getCubeDescManager().getCubeDesc(entry.getRealization());", "filename": "server-base/src/main/java/org/apache/kylin/rest/service/HybridService.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/052d6096779d5826ba24517b0b4cc9a45b78bf4a", "parent": "https://github.com/apache/kylin/commit/8ca0d3217453929d0ac0c3078d9e78e769f852b0", "message": "minor, fix ACL NPE", "bug_id": "kylin_17", "file": [{"additions": 5, "raw_url": "https://github.com/apache/kylin/raw/052d6096779d5826ba24517b0b4cc9a45b78bf4a/server-base/src/main/java/org/apache/kylin/rest/service/AccessService.java", "blob_url": "https://github.com/apache/kylin/blob/052d6096779d5826ba24517b0b4cc9a45b78bf4a/server-base/src/main/java/org/apache/kylin/rest/service/AccessService.java", "sha": "ae7ac6e045e610a17334e4b5446bf6e2d32d94fa", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/service/AccessService.java?ref=052d6096779d5826ba24517b0b4cc9a45b78bf4a", "patch": "@@ -19,6 +19,7 @@\n package org.apache.kylin.rest.service;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n \n import org.apache.kylin.common.persistence.AclEntity;\n@@ -297,8 +298,11 @@ public Sid getSid(String sid, boolean isPrincepal) {\n     }\n \n     public List<AccessEntryResponse> generateAceResponses(Acl acl) {\n-        List<AccessEntryResponse> result = new ArrayList<AccessEntryResponse>();\n+        if (null == acl) {\n+            return Collections.emptyList();\n+        }\n \n+        List<AccessEntryResponse> result = new ArrayList<AccessEntryResponse>();\n         for (AccessControlEntry ace : acl.getEntries()) {\n             result.add(new AccessEntryResponse(ace.getId(), ace.getSid(), ace.getPermission(), ace.isGranting()));\n         }", "filename": "server-base/src/main/java/org/apache/kylin/rest/service/AccessService.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/714b225122bd6686ef6e1c1d7075bc662b5a6eb2", "parent": "https://github.com/apache/kylin/commit/4f16f1cdc61f9bd01edad27151abff1bf4aa3596", "message": "KYLIN-2778 avoid NPE in AclService.java", "bug_id": "kylin_18", "file": [{"additions": 2, "raw_url": "https://github.com/apache/kylin/raw/714b225122bd6686ef6e1c1d7075bc662b5a6eb2/server-base/src/main/java/org/apache/kylin/rest/service/AclService.java", "blob_url": "https://github.com/apache/kylin/blob/714b225122bd6686ef6e1c1d7075bc662b5a6eb2/server-base/src/main/java/org/apache/kylin/rest/service/AclService.java", "sha": "fe31bd94c50c22859b39f2cc01cae4529513eb7c", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/service/AclService.java?ref=714b225122bd6686ef6e1c1d7075bc662b5a6eb2", "patch": "@@ -151,9 +151,9 @@ public Acl readAclById(ObjectIdentity object, List<Sid> sids) throws NotFoundExc\n             for (ObjectIdentity oid : oids) {\n                 AclRecord record = aclStore.getResource(getQueryKeyById(String.valueOf(oid.getIdentifier())),\n                         AclRecord.class, SERIALIZER);\n-                if (record != null) {\n+                if (record != null && record.getOwnerInfo() != null) {\n                     SidInfo owner = record.getOwnerInfo();\n-                    Sid ownerSid = (null == owner) ? null : (owner.isPrincipal() ? new PrincipalSid(owner.getSid()) : new GrantedAuthoritySid(owner.getSid()));\n+                    Sid ownerSid = owner.isPrincipal() ? new PrincipalSid(owner.getSid()) : new GrantedAuthoritySid(owner.getSid());\n                     boolean entriesInheriting = record.isEntriesInheriting();\n \n                     Acl parentAcl = null;", "filename": "server-base/src/main/java/org/apache/kylin/rest/service/AclService.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/4e8e2f755c28e746acbbfa9cd6cfa3e53d3593ee", "parent": "https://github.com/apache/kylin/commit/35774a14118618ec8a355a325ba343f0b291a197", "message": "APACHE-KYLIN-2707: fix NPE\n\nSigned-off-by: Zhong <nju_yaho@apache.org>", "bug_id": "kylin_19", "file": [{"additions": 10, "raw_url": "https://github.com/apache/kylin/raw/4e8e2f755c28e746acbbfa9cd6cfa3e53d3593ee/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/JobInfoConverter.java", "blob_url": "https://github.com/apache/kylin/blob/4e8e2f755c28e746acbbfa9cd6cfa3e53d3593ee/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/JobInfoConverter.java", "sha": "a2305170d8289c5a6e0c55e32242571e66d4c7c3", "changes": 10, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/JobInfoConverter.java?ref=4e8e2f755c28e746acbbfa9cd6cfa3e53d3593ee", "patch": "@@ -62,6 +62,11 @@ public static JobInstance parseToJobInstance(CubingJob job, Map<String, Output>\n         }\n \n         Output output = outputs.get(job.getId());\n+        if (output == null) {\n+            logger.warn(\"job output is null.\");\n+            return null;\n+        }\n+\n         final JobInstance result = new JobInstance();\n         result.setName(job.getName());\n         result.setRelatedCube(CubingExecutableUtil.getCubeName(job.getParams()));\n@@ -91,6 +96,11 @@ public static JobInstance parseToJobInstance(CheckpointExecutable job, Map<Strin\n         }\n \n         Output output = outputs.get(job.getId());\n+        if (output == null) {\n+            logger.warn(\"job output is null.\");\n+            return null;\n+        }\n+\n         final JobInstance result = new JobInstance();\n         result.setName(job.getName());\n         result.setRelatedCube(CubingExecutableUtil.getCubeName(job.getParams()));", "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/common/JobInfoConverter.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/924c6672d042bb6f77ab18cc425cda64ba731b35", "parent": "https://github.com/apache/kylin/commit/fbd83ce4cfe782bad432730d5a93f1ced6c13ca2", "message": "minor, add more logs to troubleshot a mysterious NPE in ScannerWorker.java (#3361)", "bug_id": "kylin_20", "file": [{"additions": 18, "raw_url": "https://github.com/apache/kylin/raw/924c6672d042bb6f77ab18cc425cda64ba731b35/core-storage/src/main/java/org/apache/kylin/storage/gtrecord/ScannerWorker.java", "blob_url": "https://github.com/apache/kylin/blob/924c6672d042bb6f77ab18cc425cda64ba731b35/core-storage/src/main/java/org/apache/kylin/storage/gtrecord/ScannerWorker.java", "sha": "def7e589d16b7a7bd37e7e2aec710ddd9e7617fa", "changes": 22, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-storage/src/main/java/org/apache/kylin/storage/gtrecord/ScannerWorker.java?ref=924c6672d042bb6f77ab18cc425cda64ba731b35", "patch": "@@ -19,7 +19,7 @@\n package org.apache.kylin.storage.gtrecord;\n \n import java.io.IOException;\n-import java.lang.reflect.InvocationTargetException;\n+import java.util.Arrays;\n import java.util.Iterator;\n \n import org.apache.kylin.cube.cuboid.Cuboid;\n@@ -39,10 +39,15 @@\n public class ScannerWorker {\n \n     private static final Logger logger = LoggerFactory.getLogger(ScannerWorker.class);\n-    private IGTScanner internal = null;\n+    \n+    private final IGTScanner internal;\n+    private final Object[] inputArgs;\n \n     public ScannerWorker(ISegment segment, Cuboid cuboid, GTScanRequest scanRequest, String gtStorage,\n             StorageContext context) {\n+        \n+        inputArgs = new Object[] { segment, cuboid, scanRequest, gtStorage, context };\n+        \n         try (TraceScope scope = Trace.startSpan(\"visit segment \" + segment.getName())) {\n \n             if (scanRequest == null) {\n@@ -58,21 +63,30 @@ public ScannerWorker(ISegment segment, Cuboid cuboid, GTScanRequest scanRequest,\n                         .getConstructor(ISegment.class, Cuboid.class, GTInfo.class, StorageContext.class)\n                         .newInstance(segment, cuboid, info, context); // default behavior\n                 internal = rpc.getGTScanner(scanRequest);\n-            } catch (IOException | InstantiationException | InvocationTargetException | IllegalAccessException\n-                    | ClassNotFoundException | NoSuchMethodException e) {\n+            } catch (Exception e) {\n                 throw new RuntimeException(e);\n             }\n         }\n+        \n+        checkNPE();\n     }\n \n     public boolean isSegmentSkipped() {\n         return internal instanceof EmptyGTScanner;\n     }\n \n     public Iterator<GTRecord> iterator() {\n+        // to troubleshoot a myth NPE on line: return internal.iterator()\n+        checkNPE();\n         return internal.iterator();\n     }\n \n+    private void checkNPE() {\n+        if (internal == null) {\n+            logger.error(\"Caught an impossible NPE, args are \" + Arrays.toString(inputArgs), new Exception());\n+        }\n+    }\n+\n     public void close() throws IOException {\n         internal.close();\n     }", "filename": "core-storage/src/main/java/org/apache/kylin/storage/gtrecord/ScannerWorker.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/51c6fce10e35f2543e745d6136a1b380e39deef1", "parent": "https://github.com/apache/kylin/commit/68efbc2d1bfdb1ce53794fd4263f41b287ff5baf", "message": "minor, avoid NPE in doPushDownQuery check", "bug_id": "kylin_21", "file": [{"additions": 5, "raw_url": "https://github.com/apache/kylin/raw/51c6fce10e35f2543e745d6136a1b380e39deef1/kylin-it/src/test/java/org/apache/kylin/query/KylinTestBase.java", "blob_url": "https://github.com/apache/kylin/blob/51c6fce10e35f2543e745d6136a1b380e39deef1/kylin-it/src/test/java/org/apache/kylin/query/KylinTestBase.java", "sha": "404cb7fbc59d83240b16a570c6608ac868a6d84f", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/kylin-it/src/test/java/org/apache/kylin/query/KylinTestBase.java?ref=51c6fce10e35f2543e745d6136a1b380e39deef1", "patch": "@@ -263,7 +263,11 @@ protected int executeQuery(String sql, boolean needDisplay) throws Exception {\n         } catch (SQLException sqlException) {\n             List<List<String>> results = Lists.newArrayList();\n             List<SelectedColumnMeta> columnMetas = Lists.newArrayList();\n-            PushDownUtil.doPushDownQuery(ProjectInstance.DEFAULT_PROJECT_NAME, sql, results, columnMetas, sqlException);\n+            boolean b = PushDownUtil.doPushDownQuery(ProjectInstance.DEFAULT_PROJECT_NAME, sql, results, columnMetas,\n+                    sqlException);\n+            if (!b) {\n+                throw sqlException;\n+            }\n             return results.size();\n         } finally {\n             if (resultSet != null) {", "filename": "kylin-it/src/test/java/org/apache/kylin/query/KylinTestBase.java"}, {"additions": 5, "raw_url": "https://github.com/apache/kylin/raw/51c6fce10e35f2543e745d6136a1b380e39deef1/server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java", "blob_url": "https://github.com/apache/kylin/blob/51c6fce10e35f2543e745d6136a1b380e39deef1/server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java", "sha": "f4ae06ca1e9cad5999c5603d665f485ea3bbc010", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java?ref=51c6fce10e35f2543e745d6136a1b380e39deef1", "patch": "@@ -487,7 +487,8 @@ private SQLResponse queryWithSqlMassage(SQLRequest sqlRequest) throws Exception\n             return fakeResponse;\n         }\n \n-        String correctedSql = QueryUtil.massageSql(sqlRequest.getSql(), sqlRequest.getProject(), sqlRequest.getLimit(), sqlRequest.getOffset());\n+        String correctedSql = QueryUtil.massageSql(sqlRequest.getSql(), sqlRequest.getProject(), sqlRequest.getLimit(),\n+                sqlRequest.getOffset());\n         if (!correctedSql.equals(sqlRequest.getSql())) {\n             logger.info(\"The corrected query: \" + correctedSql);\n \n@@ -792,6 +793,9 @@ private SQLResponse execute(String correctedSql, SQLRequest sqlRequest) throws E\n         } catch (SQLException sqlException) {\n             isPushDown = PushDownUtil.doPushDownQuery(sqlRequest.getProject(), correctedSql, results, columnMetas,\n                     sqlException);\n+            if (!isPushDown) {\n+                throw sqlException;\n+            }\n         } finally {\n             close(resultSet, stat, conn);\n         }", "filename": "server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java"}, {"additions": 8, "raw_url": "https://github.com/apache/kylin/raw/51c6fce10e35f2543e745d6136a1b380e39deef1/server-base/src/main/java/org/apache/kylin/rest/util/PushDownUtil.java", "blob_url": "https://github.com/apache/kylin/blob/51c6fce10e35f2543e745d6136a1b380e39deef1/server-base/src/main/java/org/apache/kylin/rest/util/PushDownUtil.java", "sha": "0802718243f4e38629826146065581385e282f0a", "changes": 12, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/util/PushDownUtil.java?ref=51c6fce10e35f2543e745d6136a1b380e39deef1", "patch": "@@ -49,11 +49,15 @@\n     public static boolean doPushDownQuery(String project, String sql, List<List<String>> results,\n             List<SelectedColumnMeta> columnMetas, SQLException sqlException) throws Exception {\n \n-        boolean isExpectedCause = (ExceptionUtils.getRootCause(sqlException).getClass()\n-                .equals(NoRealizationFoundException.class));\n         KylinConfig kylinConfig = KylinConfig.getInstanceFromEnv();\n+        if (!kylinConfig.isPushDownEnabled()) {\n+            return false;\n+        }\n+\n+        Throwable rootCause = ExceptionUtils.getRootCause(sqlException);\n+        boolean isExpectedCause = rootCause != null && (rootCause.getClass().equals(NoRealizationFoundException.class));\n \n-        if (isExpectedCause && kylinConfig.isPushDownEnabled()) {\n+        if (isExpectedCause) {\n \n             logger.info(\"Query failed to utilize pre-calculation, routing to other engines\", sqlException);\n             IPushDownRunner runner = (IPushDownRunner) ClassUtil.newInstance(kylinConfig.getPushDownRunnerClassName());\n@@ -78,7 +82,7 @@ public static boolean doPushDownQuery(String project, String sql, List<List<Stri\n \n             return true;\n         } else {\n-            throw sqlException;\n+            return false;\n         }\n     }\n ", "filename": "server-base/src/main/java/org/apache/kylin/rest/util/PushDownUtil.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/c0c96bba0ca83b610c266a6ffdedb5728acce820", "parent": "https://github.com/apache/kylin/commit/6ca141a9f2e6cd5bc67fc37ec0fba61b1fc2d49c", "message": "KYLIN-2612 fix potential NPE accessing familyMap", "bug_id": "kylin_22", "file": [{"additions": 7, "raw_url": "https://github.com/apache/kylin/raw/c0c96bba0ca83b610c266a6ffdedb5728acce820/server-base/src/main/java/org/apache/kylin/rest/service/AclTableMigrationTool.java", "blob_url": "https://github.com/apache/kylin/blob/c0c96bba0ca83b610c266a6ffdedb5728acce820/server-base/src/main/java/org/apache/kylin/rest/service/AclTableMigrationTool.java", "sha": "e8b675e6d5e505a2ae70c5a07e5f3712037fa6f0", "changes": 12, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/service/AclTableMigrationTool.java?ref=c0c96bba0ca83b610c266a6ffdedb5728acce820", "patch": "@@ -223,11 +223,13 @@ private SidInfo getOwnerSidInfo(Result result) throws IOException {\n     private Map<String, AceInfo> getAllAceInfo(Result result) throws IOException {\n         Map<String, AceInfo> allAceInfoMap = new HashMap<>();\n         NavigableMap<byte[], byte[]> familyMap = result.getFamilyMap(Bytes.toBytes(AclConstant.ACL_ACES_FAMILY));\n-        for (Map.Entry<byte[], byte[]> entry : familyMap.entrySet()) {\n-            String sid = new String(entry.getKey());\n-            AceInfo aceInfo = aceSerializer.deserialize(entry.getValue());\n-            if (null != aceInfo) {\n-                allAceInfoMap.put(sid, aceInfo);\n+        if(familyMap != null && !familyMap.isEmpty()) {\n+            for (Map.Entry<byte[], byte[]> entry : familyMap.entrySet()) {\n+                String sid = new String(entry.getKey());\n+                AceInfo aceInfo = aceSerializer.deserialize(entry.getValue());\n+                if (null != aceInfo) {\n+                    allAceInfoMap.put(sid, aceInfo);\n+                }\n             }\n         }\n         return allAceInfoMap;", "filename": "server-base/src/main/java/org/apache/kylin/rest/service/AclTableMigrationTool.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/0e675cf2cbaa9f2bc9a520aaef82443641efb8ca", "parent": "https://github.com/apache/kylin/commit/0dc2cd4665efd32d2f782e53382f86e5dadb720a", "message": "KYLIN-2707 Fix NPE in JobInfoConverter", "bug_id": "kylin_23", "file": [{"additions": 6, "raw_url": "https://github.com/apache/kylin/raw/0e675cf2cbaa9f2bc9a520aaef82443641efb8ca/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/JobInfoConverter.java", "blob_url": "https://github.com/apache/kylin/blob/0e675cf2cbaa9f2bc9a520aaef82443641efb8ca/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/JobInfoConverter.java", "sha": "ec5aef1f0c16a7ea9c78938049710023b82b1b1a", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/JobInfoConverter.java?ref=0e675cf2cbaa9f2bc9a520aaef82443641efb8ca", "patch": "@@ -63,11 +63,16 @@ public static JobInstance parseToJobInstance(AbstractExecutable job, Map<String,\n     }\n \n     public static JobInstance.JobStep parseToJobStep(AbstractExecutable task, int i, Output stepOutput) {\n-        Preconditions.checkNotNull(stepOutput);\n         JobInstance.JobStep result = new JobInstance.JobStep();\n         result.setId(task.getId());\n         result.setName(task.getName());\n         result.setSequenceID(i);\n+\n+        if (stepOutput == null) {\n+            result.setStatus(JobStepStatusEnum.ERROR);\n+            return result;\n+        }\n+\n         result.setStatus(parseToJobStepStatus(stepOutput.getState()));\n         for (Map.Entry<String, String> entry : stepOutput.getExtra().entrySet()) {\n             if (entry.getKey() != null && entry.getValue() != null) {", "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/common/JobInfoConverter.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/c487fe4990473afa11d30a2e16ceb133e3f25b6d", "parent": "https://github.com/apache/kylin/commit/2eca43c40723cce0f12a56a1299894bbf5803d03", "message": "#1949, fix NPE when discarding model check job (#1952)", "bug_id": "kylin_24", "file": [{"additions": 63, "raw_url": "https://github.com/apache/kylin/raw/c487fe4990473afa11d30a2e16ceb133e3f25b6d/server-base/src/main/java/org/apache/kylin/rest/service/JobService.java", "blob_url": "https://github.com/apache/kylin/blob/c487fe4990473afa11d30a2e16ceb133e3f25b6d/server-base/src/main/java/org/apache/kylin/rest/service/JobService.java", "sha": "5dafa08bd9d382b5ada8693811d5e6fcee8c87d7", "changes": 127, "status": "modified", "deletions": 64, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/service/JobService.java?ref=c487fe4990473afa11d30a2e16ceb133e3f25b6d", "patch": "@@ -18,18 +18,12 @@\n \n package org.apache.kylin.rest.service;\n \n-import java.io.IOException;\n-import java.util.Calendar;\n-import java.util.Collections;\n-import java.util.Date;\n-import java.util.EnumSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.TimeZone;\n-\n-import javax.annotation.Nullable;\n-\n+import com.google.common.base.Function;\n+import com.google.common.base.Predicate;\n+import com.google.common.base.Predicates;\n+import com.google.common.collect.FluentIterable;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Sets;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.directory.api.util.Strings;\n import org.apache.kylin.common.KylinConfig;\n@@ -72,12 +66,16 @@\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n \n-import com.google.common.base.Function;\n-import com.google.common.base.Predicate;\n-import com.google.common.base.Predicates;\n-import com.google.common.collect.FluentIterable;\n-import com.google.common.collect.Lists;\n-import com.google.common.collect.Sets;\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TimeZone;\n \n /**\n  * @author ysong1\n@@ -158,53 +156,53 @@ private ExecutableState parseToExecutableState(JobStatusEnum status) {\n         Message msg = MsgPicker.getMsg();\n \n         switch (status) {\n-        case DISCARDED:\n-            return ExecutableState.DISCARDED;\n-        case ERROR:\n-            return ExecutableState.ERROR;\n-        case FINISHED:\n-            return ExecutableState.SUCCEED;\n-        case NEW:\n-            return ExecutableState.READY;\n-        case PENDING:\n-            return ExecutableState.READY;\n-        case RUNNING:\n-            return ExecutableState.RUNNING;\n-        case STOPPED:\n-            return ExecutableState.STOPPED;\n-        default:\n-            throw new BadRequestException(String.format(msg.getILLEGAL_EXECUTABLE_STATE(), status));\n+            case DISCARDED:\n+                return ExecutableState.DISCARDED;\n+            case ERROR:\n+                return ExecutableState.ERROR;\n+            case FINISHED:\n+                return ExecutableState.SUCCEED;\n+            case NEW:\n+                return ExecutableState.READY;\n+            case PENDING:\n+                return ExecutableState.READY;\n+            case RUNNING:\n+                return ExecutableState.RUNNING;\n+            case STOPPED:\n+                return ExecutableState.STOPPED;\n+            default:\n+                throw new BadRequestException(String.format(msg.getILLEGAL_EXECUTABLE_STATE(), status));\n         }\n     }\n \n     private long getTimeStartInMillis(Calendar calendar, JobTimeFilterEnum timeFilter) {\n         Message msg = MsgPicker.getMsg();\n \n         switch (timeFilter) {\n-        case LAST_ONE_DAY:\n-            calendar.add(Calendar.DAY_OF_MONTH, -1);\n-            return calendar.getTimeInMillis();\n-        case LAST_ONE_WEEK:\n-            calendar.add(Calendar.WEEK_OF_MONTH, -1);\n-            return calendar.getTimeInMillis();\n-        case LAST_ONE_MONTH:\n-            calendar.add(Calendar.MONTH, -1);\n-            return calendar.getTimeInMillis();\n-        case LAST_ONE_YEAR:\n-            calendar.add(Calendar.YEAR, -1);\n-            return calendar.getTimeInMillis();\n-        case ALL:\n-            return 0;\n-        default:\n-            throw new BadRequestException(String.format(msg.getILLEGAL_TIME_FILTER(), timeFilter));\n+            case LAST_ONE_DAY:\n+                calendar.add(Calendar.DAY_OF_MONTH, -1);\n+                return calendar.getTimeInMillis();\n+            case LAST_ONE_WEEK:\n+                calendar.add(Calendar.WEEK_OF_MONTH, -1);\n+                return calendar.getTimeInMillis();\n+            case LAST_ONE_MONTH:\n+                calendar.add(Calendar.MONTH, -1);\n+                return calendar.getTimeInMillis();\n+            case LAST_ONE_YEAR:\n+                calendar.add(Calendar.YEAR, -1);\n+                return calendar.getTimeInMillis();\n+            case ALL:\n+                return 0;\n+            default:\n+                throw new BadRequestException(String.format(msg.getILLEGAL_TIME_FILTER(), timeFilter));\n         }\n     }\n \n     @PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN\n             + \" or hasPermission(#cube, 'ADMINISTRATION') or hasPermission(#cube, 'OPERATION') or hasPermission(#cube, 'MANAGEMENT')\")\n     public JobInstance submitJob(CubeInstance cube, long startDate, long endDate, long startOffset, long endOffset, //\n-            Map<Integer, Long> sourcePartitionOffsetStart, Map<Integer, Long> sourcePartitionOffsetEnd,\n-            CubeBuildTypeEnum buildType, boolean force, String submitter) throws IOException {\n+                                 Map<Integer, Long> sourcePartitionOffsetStart, Map<Integer, Long> sourcePartitionOffsetEnd,\n+                                 CubeBuildTypeEnum buildType, boolean force, String submitter) throws IOException {\n         JobInstance jobInstance = submitJobInternal(cube, startDate, endDate, startOffset, endOffset, sourcePartitionOffsetStart,\n                 sourcePartitionOffsetEnd, buildType, force, submitter);\n \n@@ -215,9 +213,9 @@ public JobInstance submitJob(CubeInstance cube, long startDate, long endDate, lo\n     }\n \n     public JobInstance submitJobInternal(CubeInstance cube, long startDate, long endDate, long startOffset,\n-            long endOffset, //\n-            Map<Integer, Long> sourcePartitionOffsetStart, Map<Integer, Long> sourcePartitionOffsetEnd,\n-            CubeBuildTypeEnum buildType, boolean force, String submitter) throws IOException {\n+                                         long endOffset, //\n+                                         Map<Integer, Long> sourcePartitionOffsetStart, Map<Integer, Long> sourcePartitionOffsetEnd,\n+                                         CubeBuildTypeEnum buildType, boolean force, String submitter) throws IOException {\n         Message msg = MsgPicker.getMsg();\n \n         if (cube.getStatus() == RealizationStatusEnum.DESCBROKEN) {\n@@ -330,7 +328,7 @@ public void rollbackJob(JobInstance job, String stepId) {\n     @PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN\n             + \" or hasPermission(#job, 'ADMINISTRATION') or hasPermission(#job, 'OPERATION') or hasPermission(#job, 'MANAGEMENT')\")\n     public JobInstance cancelJob(JobInstance job) throws IOException {\n-        if (null == job.getRelatedCube() || null == getCubeManager().getCube(job.getRelatedCube())) {\n+        if (null == job.getRelatedCube() || null == getCubeManager().getCube(job.getRelatedCube()) || null == job.getRelatedSegment()) {\n             getExecutableManager().discardJob(job.getId());\n             return job;\n         }\n@@ -366,11 +364,12 @@ public void dropJob(JobInstance job) throws IOException {\n \n     /**\n      * currently only support substring match\n+     *\n      * @return\n      */\n     public List<JobInstance> searchJobs(final String cubeNameSubstring, final String projectName,\n-            final List<JobStatusEnum> statusList, final Integer limitValue, final Integer offsetValue,\n-            final JobTimeFilterEnum timeFilter) {\n+                                        final List<JobStatusEnum> statusList, final Integer limitValue, final Integer offsetValue,\n+                                        final JobTimeFilterEnum timeFilter) {\n         Integer limit = (null == limitValue) ? 30 : limitValue;\n         Integer offset = (null == offsetValue) ? 0 : offsetValue;\n         List<JobInstance> jobs = searchJobsByCubeName(cubeNameSubstring, projectName, statusList, timeFilter);\n@@ -388,17 +387,17 @@ public void dropJob(JobInstance job) throws IOException {\n     }\n \n     public List<JobInstance> searchJobsByCubeName(final String cubeNameSubstring, final String projectName,\n-            final List<JobStatusEnum> statusList, final JobTimeFilterEnum timeFilter) {\n+                                                  final List<JobStatusEnum> statusList, final JobTimeFilterEnum timeFilter) {\n         return innerSearchCubingJobs(cubeNameSubstring, null, projectName, statusList, timeFilter);\n     }\n \n     public List<JobInstance> searchJobsByJobName(final String jobName, final String projectName,\n-            final List<JobStatusEnum> statusList, final JobTimeFilterEnum timeFilter) {\n+                                                 final List<JobStatusEnum> statusList, final JobTimeFilterEnum timeFilter) {\n         return innerSearchCubingJobs(null, jobName, projectName, statusList, timeFilter);\n     }\n \n     public List<JobInstance> innerSearchCubingJobs(final String cubeName, final String jobName,\n-            final String projectName, final List<JobStatusEnum> statusList, final JobTimeFilterEnum timeFilter) {\n+                                                   final String projectName, final List<JobStatusEnum> statusList, final JobTimeFilterEnum timeFilter) {\n         // prepare time range\n         Calendar calendar = Calendar.getInstance();\n         calendar.setTime(new Date());\n@@ -421,8 +420,8 @@ public JobInstance apply(CubingJob cubingJob) {\n     }\n \n     public List<CubingJob> innerSearchCubingJobs(final String cubeName, final String jobName,\n-            final Set<ExecutableState> statusList, long timeStartInMillis, long timeEndInMillis,\n-            final Map<String, Output> allOutputs, final boolean nameExactMatch, final String projectName) {\n+                                                 final Set<ExecutableState> statusList, long timeStartInMillis, long timeEndInMillis,\n+                                                 final Map<String, Output> allOutputs, final boolean nameExactMatch, final String projectName) {\n         List<CubingJob> results = Lists.newArrayList(FluentIterable.from(\n                 getExecutableManager().getAllAbstractExecutables(timeStartInMillis, timeEndInMillis, CubingJob.class))\n                 .filter(new Predicate<AbstractExecutable>() {\n@@ -491,7 +490,7 @@ public boolean apply(@Nullable CubingJob cubeJob) {\n     }\n \n     public List<CubingJob> listJobsByRealizationName(final String realizationName, final String projectName,\n-            final Set<ExecutableState> statusList) {\n+                                                     final Set<ExecutableState> statusList) {\n         return innerSearchCubingJobs(realizationName, null, statusList, 0L, Long.MAX_VALUE,\n                 getExecutableManager().getAllOutputs(), true, projectName);\n     }", "filename": "server-base/src/main/java/org/apache/kylin/rest/service/JobService.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/3bb93c32d073c10cf9a045e32a25715524324421", "parent": "https://github.com/apache/kylin/commit/a509186f6c1d54776edf34dc961ea50ff37e1c8d", "message": "minor, fix NPE when droping a project", "bug_id": "kylin_25", "file": [{"additions": 4, "raw_url": "https://github.com/apache/kylin/raw/3bb93c32d073c10cf9a045e32a25715524324421/core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java", "blob_url": "https://github.com/apache/kylin/blob/3bb93c32d073c10cf9a045e32a25715524324421/core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java", "sha": "afa3dede1e141f1653c681ef4723899d8a15f64f", "changes": 7, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java?ref=3bb93c32d073c10cf9a045e32a25715524324421", "patch": "@@ -114,11 +114,12 @@ public void onEntityChange(Broadcaster broadcaster, String entity, Event event,\n                 throws IOException {\n             String project = cacheKey;\n \n-            if (event == Event.DROP)\n+            if (event == Event.DROP) {\n                 removeProjectLocal(project);\n-            else\n-                reloadProjectLocal(project);\n+                return;\n+            }\n \n+            reloadProjectLocal(project);\n             broadcaster.notifyProjectSchemaUpdate(project);\n             broadcaster.notifyProjectDataUpdate(project);\n         }", "filename": "core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/280f6738b765aa32dbcdc50951777a8d30e6b489", "parent": "https://github.com/apache/kylin/commit/ad3dd3f63d399640142bd2c97669080bc3e37560", "message": "KYLIN-2994 Handle NPE when load dict in DictionaryManager\n\nSigned-off-by: Li Yang <liyang@apache.org>", "bug_id": "kylin_26", "file": [{"additions": 4, "raw_url": "https://github.com/apache/kylin/raw/280f6738b765aa32dbcdc50951777a8d30e6b489/core-dictionary/src/main/java/org/apache/kylin/dict/DictionaryManager.java", "blob_url": "https://github.com/apache/kylin/blob/280f6738b765aa32dbcdc50951777a8d30e6b489/core-dictionary/src/main/java/org/apache/kylin/dict/DictionaryManager.java", "sha": "232f0ea550f592457e894d931a4be53a65478d5b", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-dictionary/src/main/java/org/apache/kylin/dict/DictionaryManager.java?ref=280f6738b765aa32dbcdc50951777a8d30e6b489", "patch": "@@ -115,6 +115,10 @@ public DictionaryInfo load(String key) throws Exception {\n \n     public DictionaryInfo getDictionaryInfo(final String resourcePath) throws IOException {\n         try {\n+            //when all the value for this column is NULL, the resourcePath will be NULL\n+            if (resourcePath == null) {\n+                return NONE_INDICATOR;\n+            }\n             DictionaryInfo result = dictCache.get(resourcePath);\n             if (result == NONE_INDICATOR) {\n                 return null;", "filename": "core-dictionary/src/main/java/org/apache/kylin/dict/DictionaryManager.java"}, {"additions": 5, "raw_url": "https://github.com/apache/kylin/raw/280f6738b765aa32dbcdc50951777a8d30e6b489/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MergeCuboidMapper.java", "blob_url": "https://github.com/apache/kylin/blob/280f6738b765aa32dbcdc50951777a8d30e6b489/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MergeCuboidMapper.java", "sha": "255315ac181c32dac7ebb835c65d05d829e2b56a", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MergeCuboidMapper.java?ref=280f6738b765aa32dbcdc50951777a8d30e6b489", "patch": "@@ -163,6 +163,11 @@ public void doMap(Text key, Text value, Context context) throws IOException, Int\n                 DictionaryManager dictMgr = DictionaryManager.getInstance(config);\n                 Dictionary<String> mergedDict = dictMgr.getDictionary(mergedCubeSegment.getDictResPath(col));\n \n+                // handle the dict of all merged segments is null\n+                if (mergedDict == null) {\n+                    continue;\n+                }\n+\n                 Dictionary<String> sourceDict;\n                 // handle the column that all records is null\n                 if (sourceCubeSegment.getDictionary(col) == null) {", "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MergeCuboidMapper.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/5a53564976856dac32f71983d547b6f5682ee441", "parent": "https://github.com/apache/kylin/commit/631fe416cb60223c5f96325fda40abbea24cff3b", "message": "minor, fix get model NPE when getting cube list.", "bug_id": "kylin_27", "file": [{"additions": 19, "raw_url": "https://github.com/apache/kylin/raw/5a53564976856dac32f71983d547b6f5682ee441/server-base/src/main/java/org/apache/kylin/rest/controller2/CubeControllerV2.java", "blob_url": "https://github.com/apache/kylin/blob/5a53564976856dac32f71983d547b6f5682ee441/server-base/src/main/java/org/apache/kylin/rest/controller2/CubeControllerV2.java", "sha": "cdc09b98392125c9a370262b7a846e410a851d61", "changes": 24, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/controller2/CubeControllerV2.java?ref=5a53564976856dac32f71983d547b6f5682ee441", "patch": "@@ -109,7 +109,11 @@ public EnvelopeResponse getCubesPaging(@RequestParam(value = \"cubeName\", require\n \n         // official cubes\n         for (CubeInstance cube : cubes) {\n-            response.add(createCubeInstanceResponse(cube));\n+            try {\n+                response.add(createCubeInstanceResponse(cube));\n+            } catch (Exception e) {\n+                logger.error(\"Error creating cube instance response, skipping.\", e);\n+            }\n         }\n         \n         // draft cubes\n@@ -174,9 +178,14 @@ private CubeInstanceResponse createCubeInstanceResponse(CubeInstance cube) {\n \n         r.setModel(cube.getDescriptor().getModelName());\n         r.setPartitionDateStart(cube.getDescriptor().getPartitionDateStart());\n-        r.setPartitionDateColumn(cube.getModel().getPartitionDesc().getPartitionDateColumn());\n-        r.setIs_streaming(\n-                cube.getModel().getRootFactTable().getTableDesc().getSourceType() == ISourceAware.ID_STREAMING);\n+        // cuz model doesn't have a state the label a model is broken,\n+        // so in some case the model can not be loaded due to some check failed,\n+        // but the cube in this model can still be loaded.\n+        if (cube.getModel() != null) {\n+            r.setPartitionDateColumn(cube.getModel().getPartitionDesc().getPartitionDateColumn());\n+            r.setIs_streaming(\n+                    cube.getModel().getRootFactTable().getTableDesc().getSourceType() == ISourceAware.ID_STREAMING);\n+        }\n         r.setProject(projectService.getProjectOfCube(cube.getName()));\n         \n         return r;\n@@ -202,7 +211,12 @@ public EnvelopeResponse getCubeV2(@PathVariable String cubeName) {\n             throw new BadRequestException(String.format(msg.getCUBE_NOT_FOUND(), cubeName));\n         }\n \n-        CubeInstanceResponse r = createCubeInstanceResponse(cube);\n+        CubeInstanceResponse r;\n+        try {\n+            r = createCubeInstanceResponse(cube);\n+        } catch (Exception e) {\n+            throw new BadRequestException(\"Error getting cube instance response.\", ResponseCode.CODE_UNDEFINED, e);\n+        }\n         return new EnvelopeResponse(ResponseCode.CODE_SUCCESS, r, \"\");\n     }\n ", "filename": "server-base/src/main/java/org/apache/kylin/rest/controller2/CubeControllerV2.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/b8f2292641ae6d00b207196f6294de36e2a17bd6", "parent": "https://github.com/apache/kylin/commit/e0d8dda58819786076d028d4ba0a571dddb8afe9", "message": "KYLIN-2940 List job restful throw NPE when time filter not set\n\nSigned-off-by: shaofengshi <shaofengshi@apache.org>", "bug_id": "kylin_28", "file": [{"additions": 4, "raw_url": "https://github.com/apache/kylin/raw/b8f2292641ae6d00b207196f6294de36e2a17bd6/server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java", "blob_url": "https://github.com/apache/kylin/blob/b8f2292641ae6d00b207196f6294de36e2a17bd6/server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java", "sha": "ca3be992de81247667d33f1a4c6635532752d92b", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java?ref=b8f2292641ae6d00b207196f6294de36e2a17bd6", "patch": "@@ -69,7 +69,10 @@\n             }\n         }\n \n-        JobTimeFilterEnum timeFilter = JobTimeFilterEnum.getByCode(jobRequest.getTimeFilter());\n+        JobTimeFilterEnum timeFilter = JobTimeFilterEnum.LAST_ONE_WEEK;\n+        if (null != jobRequest.getTimeFilter()) {\n+            timeFilter = JobTimeFilterEnum.getByCode(jobRequest.getTimeFilter());\n+        }\n \n         try {\n             jobInstanceList = jobService.searchJobs(jobRequest.getCubeName(), jobRequest.getProjectName(), statusList,", "filename": "server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/ba7bfd6131f3bb296dacbec3066340ffdce5765b", "parent": "https://github.com/apache/kylin/commit/3280172b737f85479eb3432fa12c267b477674fd", "message": "minor, fix NPE when limit or offset is null", "bug_id": "kylin_29", "file": [{"additions": 2, "raw_url": "https://github.com/apache/kylin/raw/ba7bfd6131f3bb296dacbec3066340ffdce5765b/server-base/src/main/java/org/apache/kylin/rest/request/SQLRequest.java", "blob_url": "https://github.com/apache/kylin/blob/ba7bfd6131f3bb296dacbec3066340ffdce5765b/server-base/src/main/java/org/apache/kylin/rest/request/SQLRequest.java", "sha": "54900ba2f2fa784829145fe40ca67a544a52f91f", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/request/SQLRequest.java?ref=ba7bfd6131f3bb296dacbec3066340ffdce5765b", "patch": "@@ -68,15 +68,15 @@ public void setSql(String sql) {\n     }\n \n     public Integer getOffset() {\n-        return offset;\n+        return offset == null ? 0 : offset;\n     }\n \n     public void setOffset(Integer offset) {\n         this.offset = offset;\n     }\n \n     public Integer getLimit() {\n-        return limit;\n+        return limit == null ? 0 : limit;\n     }\n \n     public void setLimit(Integer limit) {", "filename": "server-base/src/main/java/org/apache/kylin/rest/request/SQLRequest.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/727920b4d3642aaa3657d90b7f3dce7dcdd68fe2", "parent": "https://github.com/apache/kylin/commit/a1c234a9afbc5a30306f4275127649f980ab75bd", "message": "KYLIN-2811, fix NPE\n\nSigned-off-by: Hongbin Ma <mahongbin@apache.org>", "bug_id": "kylin_30", "file": [{"additions": 24, "raw_url": "https://github.com/apache/kylin/raw/727920b4d3642aaa3657d90b7f3dce7dcdd68fe2/engine-spark/src/main/java/org/apache/kylin/engine/spark/SparkCubingByLayer.java", "blob_url": "https://github.com/apache/kylin/blob/727920b4d3642aaa3657d90b7f3dce7dcdd68fe2/engine-spark/src/main/java/org/apache/kylin/engine/spark/SparkCubingByLayer.java", "sha": "a03e2380be64951a4f0375f107ef27394365c20c", "changes": 43, "status": "modified", "deletions": 19, "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-spark/src/main/java/org/apache/kylin/engine/spark/SparkCubingByLayer.java?ref=727920b4d3642aaa3657d90b7f3dce7dcdd68fe2", "patch": "@@ -100,7 +100,6 @@\n             .withDescription(\"Configuration Path\").create(\"confPath\");\n \n     private Options options;\n-    private static String metaUrl;\n \n     public SparkCubingByLayer() {\n         options = new Options();\n@@ -117,7 +116,7 @@ protected Options getOptions() {\n         return options;\n     }\n \n-    public static KylinConfig getKylinConfigForExecutor() {\n+    public static KylinConfig getKylinConfigForExecutor(String metaUrl) {\n         File file = new File(SparkFiles.get(KylinConfig.KYLIN_CONF_PROPERTIES_FILE));\n         String confPath = file.getParentFile().getAbsolutePath();\n         System.setProperty(KylinConfig.KYLIN_CONF, confPath);\n@@ -128,7 +127,7 @@ public static KylinConfig getKylinConfigForExecutor() {\n \n     @Override\n     protected void execute(OptionsHelper optionsHelper) throws Exception {\n-        metaUrl = optionsHelper.getOptionValue(OPTION_META_URL);\n+        String metaUrl = optionsHelper.getOptionValue(OPTION_META_URL);\n         String hiveTable = optionsHelper.getOptionValue(OPTION_INPUT_TABLE);\n         String cubeName = optionsHelper.getOptionValue(OPTION_CUBE_NAME);\n         String segmentId = optionsHelper.getOptionValue(OPTION_SEGMENT_ID);\n@@ -178,17 +177,17 @@ protected void execute(OptionsHelper optionsHelper) throws Exception {\n \n         // encode with dimension encoding, transform to <ByteArray, Object[]> RDD\n         final JavaPairRDD<ByteArray, Object[]> encodedBaseRDD = intermediateTable.javaRDD()\n-                .mapToPair(new EncodeBaseCuboid(cubeName, segmentId));\n+                .mapToPair(new EncodeBaseCuboid(cubeName, segmentId, metaUrl));\n \n         Long totalCount = 0L;\n         if (envConfig.isSparkSanityCheckEnabled()) {\n             totalCount = encodedBaseRDD.count();\n         }\n \n-        final BaseCuboidReducerFunction2 baseCuboidReducerFunction = new BaseCuboidReducerFunction2(cubeName);\n+        final BaseCuboidReducerFunction2 baseCuboidReducerFunction = new BaseCuboidReducerFunction2(cubeName, metaUrl);\n         BaseCuboidReducerFunction2 reducerFunction2 = baseCuboidReducerFunction;\n         if (allNormalMeasure == false) {\n-            reducerFunction2 = new CuboidReducerFunction2(cubeName, needAggr);\n+            reducerFunction2 = new CuboidReducerFunction2(cubeName, metaUrl, needAggr);\n         }\n \n         final int totalLevels = cubeDesc.getBuildLevel();\n@@ -202,18 +201,18 @@ protected void execute(OptionsHelper optionsHelper) throws Exception {\n         Configuration confOverwrite = new Configuration(sc.hadoopConfiguration());\n         confOverwrite.set(\"dfs.replication\", \"2\"); // cuboid intermediate files, replication=2\n \n-        saveToHDFS(allRDDs[0], cubeName, cubeSegment, outputPath, 0, confOverwrite);\n+        saveToHDFS(allRDDs[0], cubeName, metaUrl, cubeSegment, outputPath, 0, confOverwrite);\n \n         // aggregate to ND cuboids\n         for (level = 1; level <= totalLevels; level++) {\n             long levelRddSize = SizeEstimator.estimate(allRDDs[level - 1]) / (1024 * 1024);\n             partition = estimateRDDPartitionNum(level, cubeStatsReader, envConfig, (int) levelRddSize);\n-            allRDDs[level] = allRDDs[level - 1].flatMapToPair(new CuboidFlatMap(cubeName, segmentId))\n+            allRDDs[level] = allRDDs[level - 1].flatMapToPair(new CuboidFlatMap(cubeName, segmentId, metaUrl))\n                     .reduceByKey(reducerFunction2, partition).persist(storageLevel);\n             if (envConfig.isSparkSanityCheckEnabled() == true) {\n                 sanityCheck(allRDDs[level], totalCount, level, cubeStatsReader, countMeasureIndex);\n             }\n-            saveToHDFS(allRDDs[level], cubeName, cubeSegment, outputPath, level, confOverwrite);\n+            saveToHDFS(allRDDs[level], cubeName, metaUrl, cubeSegment, outputPath, level, confOverwrite);\n             allRDDs[level - 1].unpersist();\n         }\n         allRDDs[totalLevels].unpersist();\n@@ -231,7 +230,7 @@ private static int estimateRDDPartitionNum(int level, CubeStatsReader statsReade\n         return partition;\n     }\n \n-    private void saveToHDFS(final JavaPairRDD<ByteArray, Object[]> rdd, final String cubeName,\n+    private void saveToHDFS(final JavaPairRDD<ByteArray, Object[]> rdd, final String cubeName, final String metaUrl,\n             final CubeSegment cubeSeg, final String hdfsBaseLocation, int level, Configuration conf) throws Exception {\n         final String cuboidOutputPath = BatchCubingJobBuilder2.getCuboidOutputPathsByLevel(hdfsBaseLocation, level);\n \n@@ -256,7 +255,7 @@ private void saveToHDFS(final JavaPairRDD<ByteArray, Object[]> rdd, final String\n                         if (!initialized) {\n                             synchronized (SparkCubingByLayer.class) {\n                                 if (!initialized) {\n-                                    KylinConfig kylinConfig = getKylinConfigForExecutor();\n+                                    KylinConfig kylinConfig = getKylinConfigForExecutor(metaUrl);\n                                     CubeDesc desc = CubeDescManager.getInstance(kylinConfig).getCubeDesc(cubeName);\n                                     codec = new BufferedMeasureCodec(desc.getMeasures());\n                                     initialized = true;\n@@ -278,18 +277,20 @@ private void saveToHDFS(final JavaPairRDD<ByteArray, Object[]> rdd, final String\n         private BaseCuboidBuilder baseCuboidBuilder = null;\n         private String cubeName;\n         private String segmentId;\n+        private String metaurl;\n \n-        public EncodeBaseCuboid(String cubeName, String segmentId) {\n+        public EncodeBaseCuboid(String cubeName, String segmentId, String metaurl) {\n             this.cubeName = cubeName;\n             this.segmentId = segmentId;\n+            this.metaurl = metaurl;\n         }\n \n         @Override\n         public Tuple2<ByteArray, Object[]> call(Row row) throws Exception {\n             if (initialized == false) {\n                 synchronized (SparkCubingByLayer.class) {\n                     if (initialized == false) {\n-                        KylinConfig kConfig = getKylinConfigForExecutor();\n+                        KylinConfig kConfig = getKylinConfigForExecutor(metaurl);\n                         CubeInstance cubeInstance = CubeManager.getInstance(kConfig).getCube(cubeName);\n                         CubeDesc cubeDesc = cubeInstance.getDescriptor();\n                         CubeSegment cubeSegment = cubeInstance.getSegmentById(segmentId);\n@@ -327,17 +328,19 @@ public EncodeBaseCuboid(String cubeName, String segmentId) {\n \n     static class BaseCuboidReducerFunction2 implements Function2<Object[], Object[], Object[]> {\n         protected String cubeName;\n+        protected String metaUrl;\n         protected CubeDesc cubeDesc;\n         protected int measureNum;\n         protected MeasureAggregators aggregators;\n         protected volatile transient boolean initialized = false;\n \n-        public BaseCuboidReducerFunction2(String cubeName) {\n+        public BaseCuboidReducerFunction2(String cubeName, String metaUrl) {\n             this.cubeName = cubeName;\n+            this.metaUrl = metaUrl;\n         }\n \n         public void init() {\n-            KylinConfig kConfig = getKylinConfigForExecutor();\n+            KylinConfig kConfig = getKylinConfigForExecutor(metaUrl);\n             CubeInstance cubeInstance = CubeManager.getInstance(kConfig).getCube(cubeName);\n             cubeDesc = cubeInstance.getDescriptor();\n             aggregators = new MeasureAggregators(cubeDesc.getMeasures());\n@@ -363,8 +366,8 @@ public void init() {\n     static class CuboidReducerFunction2 extends BaseCuboidReducerFunction2 {\n         private boolean[] needAggr;\n \n-        public CuboidReducerFunction2(String cubeName, boolean[] needAggr) {\n-            super(cubeName);\n+        public CuboidReducerFunction2(String cubeName, String metaUrl, boolean[] needAggr) {\n+            super(cubeName, metaUrl);\n             this.needAggr = needAggr;\n         }\n \n@@ -390,20 +393,22 @@ public CuboidReducerFunction2(String cubeName, boolean[] needAggr) {\n \n         private String cubeName;\n         private String segmentId;\n+        private String metaUrl;\n         private CubeSegment cubeSegment;\n         private CubeDesc cubeDesc;\n         private CuboidScheduler cuboidScheduler;\n         private NDCuboidBuilder ndCuboidBuilder;\n         private RowKeySplitter rowKeySplitter;\n         private volatile transient boolean initialized = false;\n \n-        public CuboidFlatMap(String cubeName, String segmentId) {\n+        public CuboidFlatMap(String cubeName, String segmentId, String metaUrl) {\n             this.cubeName = cubeName;\n             this.segmentId = segmentId;\n+            this.metaUrl = metaUrl;\n         }\n \n         public void init() {\n-            KylinConfig kConfig = getKylinConfigForExecutor();\n+            KylinConfig kConfig = getKylinConfigForExecutor(metaUrl);\n             CubeInstance cubeInstance = CubeManager.getInstance(kConfig).getCube(cubeName);\n             this.cubeSegment = cubeInstance.getSegmentById(segmentId);\n             this.cubeDesc = cubeInstance.getDescriptor();", "filename": "engine-spark/src/main/java/org/apache/kylin/engine/spark/SparkCubingByLayer.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/ada37a9109678abf347d3600b3a19888d6f64056", "parent": "https://github.com/apache/kylin/commit/34a65baec0d47de0d91aa8a98b8e1a70db7b6d65", "message": "KYLIN-2630 NPE when a subquery joins another lookup tables", "bug_id": "kylin_31", "file": [{"additions": 15, "raw_url": "https://github.com/apache/kylin/raw/ada37a9109678abf347d3600b3a19888d6f64056/kylin-it/src/test/resources/query/sql_subquery/query30.sql", "blob_url": "https://github.com/apache/kylin/blob/ada37a9109678abf347d3600b3a19888d6f64056/kylin-it/src/test/resources/query/sql_subquery/query30.sql", "sha": "3b0dfbf51e59d39a0fbaa5ddc48aeeb7e824d801", "changes": 15, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/kylin-it/src/test/resources/query/sql_subquery/query30.sql?ref=ada37a9109678abf347d3600b3a19888d6f64056", "patch": "@@ -0,0 +1,15 @@\n+\n+SELECT t1.cal_dt, t1.sum_price,t1.lstg_site_id \n+FROM (\n+  select cal_dt, lstg_site_id, sum(price) as sum_price\n+  from test_kylin_fact\n+  group by cal_dt, lstg_site_id\n+  \n+) t1\n+\n+inner JOIN edw.test_cal_dt as test_cal_dt\n+on t1.cal_dt=test_cal_dt.cal_dt\n+\n+inner JOIN edw.test_sites as test_sites\n+on t1.lstg_site_id = test_sites.site_id\n+", "filename": "kylin-it/src/test/resources/query/sql_subquery/query30.sql"}, {"additions": 19, "raw_url": "https://github.com/apache/kylin/raw/ada37a9109678abf347d3600b3a19888d6f64056/kylin-it/src/test/resources/query/sql_subquery/query31.sql", "blob_url": "https://github.com/apache/kylin/blob/ada37a9109678abf347d3600b3a19888d6f64056/kylin-it/src/test/resources/query/sql_subquery/query31.sql", "sha": "fafc01f7aaf3159dc41b0e0f1af0c4ec5d62b48d", "changes": 19, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/kylin-it/src/test/resources/query/sql_subquery/query31.sql?ref=ada37a9109678abf347d3600b3a19888d6f64056", "patch": "@@ -0,0 +1,19 @@\n+\n+SELECT t1.week_beg_dt, t1.sum_price,t1.lstg_site_id \n+FROM (\n+  select test_cal_dt.week_beg_dt, sum(price) as sum_price, lstg_site_id\n+  from test_kylin_fact\n+  inner JOIN edw.test_cal_dt as test_cal_dt\n+  ON test_kylin_fact.cal_dt = test_cal_dt.cal_dt\n+  inner JOIN test_category_groupings\n+  ON test_kylin_fact.leaf_categ_id = test_category_groupings.leaf_categ_id AND test_kylin_fact.lstg_site_id = test_category_groupings.site_id\n+  inner JOIN edw.test_sites as test_sites\n+  ON test_kylin_fact.lstg_site_id = test_sites.site_id\n+  group by test_cal_dt.week_beg_dt, lstg_site_id\n+) t1\n+inner JOIN edw.test_cal_dt as test_cal_dt\n+on t1.week_beg_dt=test_cal_dt.week_beg_dt\n+ inner JOIN edw.test_sites as test_sites\n+ \n+  on t1.lstg_site_id = test_sites.site_id\n+", "filename": "kylin-it/src/test/resources/query/sql_subquery/query31.sql"}, {"additions": 12, "raw_url": "https://github.com/apache/kylin/raw/ada37a9109678abf347d3600b3a19888d6f64056/query/src/main/java/org/apache/kylin/query/relnode/OLAPJoinRel.java", "blob_url": "https://github.com/apache/kylin/blob/ada37a9109678abf347d3600b3a19888d6f64056/query/src/main/java/org/apache/kylin/query/relnode/OLAPJoinRel.java", "sha": "1b5970c88e8f1b82593d4c96969f45c0ea14fb38", "changes": 12, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/query/src/main/java/org/apache/kylin/query/relnode/OLAPJoinRel.java?ref=ada37a9109678abf347d3600b3a19888d6f64056", "patch": "@@ -140,12 +140,24 @@ public void implementOLAP(OLAPImplementor implementor) {\n                 implementor.freeContext();\n             }\n         }\n+\n+        if (leftHasSubquery) {\n+            // After KYLIN-2579, leftHasSubquery means right side have to be separate olap context \n+            implementor.setNewOLAPContextRequired(true);\n+        }\n+\n         implementor.fixSharedOlapTableScanOnTheRight(this);\n         implementor.visitChild(this.right, this);\n         if (this.context != implementor.getContext() || ((OLAPRel) this.right).hasSubQuery()) {\n             this.hasSubQuery = true;\n             rightHasSubquery = true;\n             // if child is also an OLAPJoin, then the context has already been popped\n+\n+            if (leftHasSubquery) {\n+                Preconditions.checkState(!implementor.isNewOLAPContextRequired());//should have been satisfied\n+                Preconditions.checkState(this.context != implementor.getContext(), \"missing a new olapcontext\");\n+            }\n+\n             if (this.context != implementor.getContext()) {\n                 implementor.freeContext();\n             }", "filename": "query/src/main/java/org/apache/kylin/query/relnode/OLAPJoinRel.java"}, {"additions": 17, "raw_url": "https://github.com/apache/kylin/raw/ada37a9109678abf347d3600b3a19888d6f64056/query/src/main/java/org/apache/kylin/query/relnode/OLAPRel.java", "blob_url": "https://github.com/apache/kylin/blob/ada37a9109678abf347d3600b3a19888d6f64056/query/src/main/java/org/apache/kylin/query/relnode/OLAPRel.java", "sha": "814b0fd357dd5611df5882c2ee31f984cd646717", "changes": 31, "status": "modified", "deletions": 14, "contents_url": "https://api.github.com/repos/apache/kylin/contents/query/src/main/java/org/apache/kylin/query/relnode/OLAPRel.java?ref=ada37a9109678abf347d3600b3a19888d6f64056", "patch": "@@ -77,6 +77,7 @@\n         private RelNode parentNode = null;\n         private int ctxSeq = 0;\n         private Stack<OLAPContext> ctxStack = new Stack<OLAPContext>();\n+        private boolean newOLAPContextRequired = false;\n \n         public void visitChild(RelNode input, RelNode parentNode) {\n             this.parentNode = parentNode;\n@@ -102,6 +103,16 @@ public void allocateContext() {\n             OLAPContext context = new OLAPContext(ctxSeq++);\n             ctxStack.push(context);\n             OLAPContext.registerContext(context);\n+            setNewOLAPContextRequired(false);\n+        }\n+\n+        // set the flag to let OLAPImplementor allocate a new context more proactively\n+        public void setNewOLAPContextRequired(boolean newOLAPContextRequired) {\n+            this.newOLAPContextRequired = newOLAPContextRequired;\n+        }\n+\n+        public boolean isNewOLAPContextRequired() {\n+            return this.newOLAPContextRequired;\n         }\n \n         public void fixSharedOlapTableScan(SingleRel parent) {\n@@ -115,19 +126,19 @@ public void fixSharedOlapTableScanOnTheLeft(BiRel parent) {\n             if (copy != null)\n                 parent.replaceInput(0, copy);\n         }\n-        \n+\n         public void fixSharedOlapTableScanOnTheRight(BiRel parent) {\n             OLAPTableScan copy = copyTableScanIfNeeded(parent.getRight());\n             if (copy != null)\n                 parent.replaceInput(1, copy);\n         }\n-        \n+\n         public void fixSharedOlapTableScanAt(RelNode parent, int ordinalInParent) {\n             OLAPTableScan copy = copyTableScanIfNeeded(parent.getInputs().get(ordinalInParent));\n             if (copy != null)\n                 parent.replaceInput(ordinalInParent, copy);\n         }\n-        \n+\n         private OLAPTableScan copyTableScanIfNeeded(RelNode input) {\n             if (input instanceof OLAPTableScan) {\n                 OLAPTableScan tableScan = (OLAPTableScan) input;\n@@ -165,11 +176,11 @@ public OLAPContext getParentContext() {\n         public static boolean needRewrite(OLAPContext ctx) {\n             if (ctx.hasJoin)\n                 return true;\n-            \n+\n             String realRootFact = ctx.realization.getModel().getRootFactTable().getTableIdentity();\n             if (ctx.firstTableScan.getTableName().equals(realRootFact))\n                 return true;\n-            \n+\n             return false;\n         }\n     }\n@@ -205,15 +216,7 @@ public EnumerableRel createEnumerable(OLAPRel parent) {\n \n         @Override\n         public EnumerableRel.Result visitChild(EnumerableRel parent, int ordinal, EnumerableRel child, EnumerableRel.Prefer prefer) {\n-            // OLAPTableScan is shared instance when the same table appears multiple times in the tree.\n-            // Its context must be set (or corrected) right before visiting.\n-            if (child instanceof OLAPTableScan) {\n-                OLAPContext parentContext = relContexts.get(parent);\n-                if (parentContext != null) {\n-                    ((OLAPTableScan) child).overrideContext(parentContext);\n-                }\n-            }\n-\n+            \n             if (calciteDebug) {\n                 OLAPContext context;\n                 if (child instanceof OLAPRel)", "filename": "query/src/main/java/org/apache/kylin/query/relnode/OLAPRel.java"}, {"additions": 9, "raw_url": "https://github.com/apache/kylin/raw/ada37a9109678abf347d3600b3a19888d6f64056/query/src/main/java/org/apache/kylin/query/relnode/OLAPTableScan.java", "blob_url": "https://github.com/apache/kylin/blob/ada37a9109678abf347d3600b3a19888d6f64056/query/src/main/java/org/apache/kylin/query/relnode/OLAPTableScan.java", "sha": "a424818a7ee04b2827528bf73ada5ccc855d13da", "changes": 18, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/kylin/contents/query/src/main/java/org/apache/kylin/query/relnode/OLAPTableScan.java?ref=ada37a9109678abf347d3600b3a19888d6f64056", "patch": "@@ -180,7 +180,6 @@ public void register(RelOptPlanner planner) {\n         // distinct count will be split into a separated query that is joined with the left query\n         planner.removeRule(AggregateExpandDistinctAggregatesRule.INSTANCE);\n \n-\n         // see Dec 26th email @ http://mail-archives.apache.org/mod_mbox/calcite-dev/201412.mbox/browser\n         planner.removeRule(ExpandConversionRule.INSTANCE);\n     }\n@@ -208,11 +207,12 @@ public RelWriter explainTerms(RelWriter pw) {\n     @Override\n     public void implementOLAP(OLAPImplementor implementor) {\n         Preconditions.checkState(columnRowType == null, \"OLAPTableScan MUST NOT be shared by more than one prent\");\n-        \n+\n         // create context in case of non-join\n-        if (implementor.getContext() == null || !(implementor.getParentNode() instanceof OLAPJoinRel)) {\n+        if (implementor.getContext() == null || !(implementor.getParentNode() instanceof OLAPJoinRel) || implementor.isNewOLAPContextRequired()) {\n             implementor.allocateContext();\n         }\n+        \n         columnRowType = buildColumnRowType();\n         context = implementor.getContext();\n         context.allTableScans.add(this);\n@@ -231,32 +231,32 @@ public void implementOLAP(OLAPImplementor implementor) {\n     public String getAlias() {\n         return alias;\n     }\n-    \n+\n     private ColumnRowType buildColumnRowType() {\n         this.alias = Integer.toHexString(System.identityHashCode(this));\n         TableRef tableRef = TblColRef.tableForUnknownModel(this.alias, olapTable.getSourceTable());\n-        \n+\n         List<TblColRef> columns = new ArrayList<TblColRef>();\n         for (ColumnDesc sourceColumn : olapTable.getExposedColumns()) {\n             TblColRef colRef = TblColRef.columnForUnknownModel(tableRef, sourceColumn);\n             columns.add(colRef);\n         }\n-        \n+\n         if (columns.size() != rowType.getFieldCount()) {\n             throw new IllegalStateException(\"RowType=\" + rowType.getFieldCount() + \", ColumnRowType=\" + columns.size());\n         }\n         return new ColumnRowType(columns);\n     }\n-    \n+\n     public TableRef getTableRef() {\n         return columnRowType.getColumnByIndex(0).getTableRef();\n     }\n-    \n+\n     @SuppressWarnings(\"deprecation\")\n     public TblColRef makeRewriteColumn(String name) {\n         return getTableRef().makeFakeColumn(name);\n     }\n-    \n+\n     public void fixColumnRowTypeWithModel(DataModelDesc model, Map<String, String> aliasMap) {\n         String newAlias = aliasMap.get(this.alias);\n         for (TblColRef col : columnRowType.getAllColumns()) {", "filename": "query/src/main/java/org/apache/kylin/query/relnode/OLAPTableScan.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/0b49eff2ceda02c0b2ba74245583b5184bb65955", "parent": "https://github.com/apache/kylin/commit/b052d6f22930c45bd34f1d7a2fd493cbf4330791", "message": "fix NPE in SchemaChecker", "bug_id": "kylin_32", "file": [{"additions": 5, "raw_url": "https://github.com/apache/kylin/raw/0b49eff2ceda02c0b2ba74245583b5184bb65955/source-hive/src/main/java/org/apache/kylin/source/hive/SchemaChecker.java", "blob_url": "https://github.com/apache/kylin/blob/0b49eff2ceda02c0b2ba74245583b5184bb65955/source-hive/src/main/java/org/apache/kylin/source/hive/SchemaChecker.java", "sha": "e2a94fb7a9bc0d6a02d0081184f20c3693ffeb51", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/source-hive/src/main/java/org/apache/kylin/source/hive/SchemaChecker.java?ref=0b49eff2ceda02c0b2ba74245583b5184bb65955", "patch": "@@ -32,6 +32,7 @@\n import org.apache.kylin.metadata.MetadataManager;\n import org.apache.kylin.metadata.datatype.DataType;\n import org.apache.kylin.metadata.model.ColumnDesc;\n+import org.apache.kylin.metadata.model.DataModelDesc;\n import org.apache.kylin.metadata.model.TableDesc;\n import org.apache.kylin.metadata.model.TblColRef;\n \n@@ -103,7 +104,10 @@ public boolean apply(@Nullable CubeInstance cube) {\n                 if (cube == null || cube.allowBrokenDescriptor()) {\n                     return false;\n                 }\n-                return cube.getModel().containsTable(fullTableName);\n+                DataModelDesc model = cube.getModel();\n+                if (model == null)\n+                    return false;\n+                return model.containsTable(fullTableName);\n             }\n         });\n ", "filename": "source-hive/src/main/java/org/apache/kylin/source/hive/SchemaChecker.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/8be842e9b845477541c2569ae1c2484e9d627214", "parent": "https://github.com/apache/kylin/commit/dde297e48a6886f662cd153c6f834f7e26560522", "message": "KYLIN-2510 Fix unintended NPE in CubeMetaExtractor", "bug_id": "kylin_33", "file": [{"additions": 2, "raw_url": "https://github.com/apache/kylin/raw/8be842e9b845477541c2569ae1c2484e9d627214/tool/src/main/java/org/apache/kylin/tool/CubeMetaExtractor.java", "blob_url": "https://github.com/apache/kylin/blob/8be842e9b845477541c2569ae1c2484e9d627214/tool/src/main/java/org/apache/kylin/tool/CubeMetaExtractor.java", "sha": "188524db8162a3da368e611d7d2562e71e3b5b11", "changes": 5, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/kylin/contents/tool/src/main/java/org/apache/kylin/tool/CubeMetaExtractor.java?ref=8be842e9b845477541c2569ae1c2484e9d627214", "patch": "@@ -65,6 +65,7 @@\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.SerializationFeature;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.base.Preconditions;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Sets;\n \n@@ -172,6 +173,7 @@ protected void executeExtract(OptionsHelper optionsHelper, File exportDir) throw\n             String projectNames = optionsHelper.getOptionValue(OPTION_PROJECT);\n             for (String projectName : projectNames.split(\",\")) {\n                 ProjectInstance projectInstance = projectManager.getProject(projectName);\n+                Preconditions.checkNotNull(projectInstance, \"Project \" + projectName + \" does not exist.\");\n                 requireProject(projectInstance);\n             }\n         } else if (optionsHelper.hasOption(OPTION_CUBE)) {\n@@ -202,9 +204,6 @@ protected void executeExtract(OptionsHelper optionsHelper, File exportDir) throw\n     }\n \n     private void requireProject(ProjectInstance projectInstance) throws IOException {\n-        if (projectInstance == null) {\n-            throw new IllegalArgumentException(\"Project \" + projectInstance.getName() + \" does not exist\");\n-        }\n         addRequired(projectInstance.getResourcePath());\n         List<RealizationEntry> realizationEntries = projectInstance.getRealizationEntries();\n         for (RealizationEntry realizationEntry : realizationEntries) {", "filename": "tool/src/main/java/org/apache/kylin/tool/CubeMetaExtractor.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/cccf3a9c1a8dd0c7ac326c958aafab050a3886cb", "parent": "https://github.com/apache/kylin/commit/84ec908b57cff0d3167cc35a9e4ea6d4b7bf94ce", "message": "fix NPE in OLAPEnumerator.setConnectionProperties()", "bug_id": "kylin_34", "file": [{"additions": 5, "raw_url": "https://github.com/apache/kylin/raw/cccf3a9c1a8dd0c7ac326c958aafab050a3886cb/query/src/main/java/org/apache/kylin/query/enumerator/OLAPEnumerator.java", "blob_url": "https://github.com/apache/kylin/blob/cccf3a9c1a8dd0c7ac326c958aafab050a3886cb/query/src/main/java/org/apache/kylin/query/enumerator/OLAPEnumerator.java", "sha": "f012638cd0c148f3577488ea021a7b808c8a5c62", "changes": 7, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/kylin/contents/query/src/main/java/org/apache/kylin/query/enumerator/OLAPEnumerator.java?ref=cccf3a9c1a8dd0c7ac326c958aafab050a3886cb", "patch": "@@ -25,6 +25,7 @@\n import org.apache.calcite.DataContext;\n import org.apache.calcite.jdbc.CalciteConnection;\n import org.apache.calcite.linq4j.Enumerator;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.kylin.common.util.DateFormat;\n import org.apache.kylin.metadata.filter.CompareTupleFilter;\n import org.apache.kylin.metadata.filter.TupleFilter;\n@@ -161,8 +162,10 @@ private void setConnectionProperties() {\n         Properties connProps = conn.getProperties();\n \n         String propThreshold = connProps.getProperty(OLAPQuery.PROP_SCAN_THRESHOLD);\n-        int threshold = Integer.valueOf(propThreshold);\n-        olapContext.storageContext.setThreshold(threshold);\n+        if (!StringUtils.isBlank(propThreshold)) {\n+            int threshold = Integer.valueOf(propThreshold);\n+            olapContext.storageContext.setThreshold(threshold);\n+        }\n     }\n \n }", "filename": "query/src/main/java/org/apache/kylin/query/enumerator/OLAPEnumerator.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/b32cc9545a76657570c4a3353469ded43892c772", "parent": "https://github.com/apache/kylin/commit/6d11dd1d27a74fe50cd4fa58d2acf26f728f82e7", "message": "KYLIN-2433 Fix NPE in MergeCuboidMapper", "bug_id": "kylin_35", "file": [{"additions": 10, "raw_url": "https://github.com/apache/kylin/raw/b32cc9545a76657570c4a3353469ded43892c772/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MergeCuboidMapper.java", "blob_url": "https://github.com/apache/kylin/blob/b32cc9545a76657570c4a3353469ded43892c772/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MergeCuboidMapper.java", "sha": "acf14031744855bb88d63d31dcb6259c134dc3ce", "changes": 10, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MergeCuboidMapper.java?ref=b32cc9545a76657570c4a3353469ded43892c772", "patch": "@@ -129,6 +129,11 @@ protected void setup(Context context) throws IOException, InterruptedException {\n             List<TblColRef> columns = measureType.getColumnsNeedDictionary(measureDesc.getFunction());\n             boolean needReEncode = false;\n             for (TblColRef col : columns) {\n+                //handle the column that all records is null\n+                if (sourceCubeSegment.getDictionary(col) == null) {\n+                    continue;\n+                }\n+\n                 if (!sourceCubeSegment.getDictionary(col).equals(mergedCubeSegment.getDictionary(col))) {\n                     oldDicts.put(col, sourceCubeSegment.getDictionary(col));\n                     newDicts.put(col, mergedCubeSegment.getDictionary(col));\n@@ -249,6 +254,11 @@ public void doMap(Text key, Text value, Context context) throws IOException, Int\n     }\n \n     private Boolean checkNeedMerging(TblColRef col) throws IOException {\n+        //handle the column that all records is null\n+        if (sourceCubeSegment.getDictionary(col) == null) {\n+            return false;\n+        }\n+\n         Boolean ret = dimensionsNeedDict.get(col);\n         if (ret != null)\n             return ret;", "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MergeCuboidMapper.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/d48e5eb6905a1bd7e4263e8efef8e451088d326f", "parent": "https://github.com/apache/kylin/commit/6ce341dbdfd02f06fbc9c0013e2638e4a5954879", "message": "minor, fix model desc NPE in diagnosis, broken cube can be exported", "bug_id": "kylin_36", "file": [{"additions": 14, "raw_url": "https://github.com/apache/kylin/raw/d48e5eb6905a1bd7e4263e8efef8e451088d326f/tool/src/main/java/org/apache/kylin/tool/CubeMetaExtractor.java", "blob_url": "https://github.com/apache/kylin/blob/d48e5eb6905a1bd7e4263e8efef8e451088d326f/tool/src/main/java/org/apache/kylin/tool/CubeMetaExtractor.java", "sha": "5bfe96b91c49a03571f3b477fe0d9485481989f2", "changes": 21, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/kylin/contents/tool/src/main/java/org/apache/kylin/tool/CubeMetaExtractor.java?ref=d48e5eb6905a1bd7e4263e8efef8e451088d326f", "patch": "@@ -321,13 +321,7 @@ private void retrieveResourcePath(IRealization realization) {\n \n             dealWithStreaming(cube);\n \n-            for (TableRef table : modelDesc.getAllTables()) {\n-                String tableName = table.getTableIdentity();\n-                addRequired(TableDesc.concatResourcePath(tableName));\n-                addOptional(TableDesc.concatExdResourcePath(tableName));\n-            }\n-\n-            addRequired(DataModelDesc.concatResourcePath(modelDesc.getName()));\n+            retrieveDataModelDesc(modelDesc);\n             addRequired(CubeDesc.concatResourcePath(cubeDesc.getName()));\n \n             if (includeSegments) {\n@@ -389,6 +383,19 @@ private void retrieveResourcePath(IRealization realization) {\n         }\n     }\n \n+    private void retrieveDataModelDesc(DataModelDesc modelDesc) {\n+        if (modelDesc == null) {\n+            return;\n+        }\n+        for (TableRef table : modelDesc.getAllTables()) {\n+            String tableName = table.getTableIdentity();\n+            addRequired(TableDesc.concatResourcePath(tableName));\n+            addOptional(TableDesc.concatExdResourcePath(tableName));\n+        }\n+\n+        addRequired(DataModelDesc.concatResourcePath(modelDesc.getName()));\n+    }\n+\n     private void addRequired(String record) {\n         logger.info(\"adding required resource {}\", record);\n         requiredResources.add(record);", "filename": "tool/src/main/java/org/apache/kylin/tool/CubeMetaExtractor.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/3003d9fba7c0b20a74785cbc431f9e708e775418", "parent": "https://github.com/apache/kylin/commit/1c2c43cb88d2abc5a1ea1cbf18cbede02fe8c4f5", "message": "minor, fix NPE in OLAPTable", "bug_id": "kylin_37", "file": [{"additions": 6, "raw_url": "https://github.com/apache/kylin/raw/3003d9fba7c0b20a74785cbc431f9e708e775418/query/src/main/java/org/apache/kylin/query/schema/OLAPTable.java", "blob_url": "https://github.com/apache/kylin/blob/3003d9fba7c0b20a74785cbc431f9e708e775418/query/src/main/java/org/apache/kylin/query/schema/OLAPTable.java", "sha": "c33c4edadc4dfa385272ac132b1f2c58e8df40ef", "changes": 13, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/kylin/contents/query/src/main/java/org/apache/kylin/query/schema/OLAPTable.java?ref=3003d9fba7c0b20a74785cbc431f9e708e775418", "patch": "@@ -43,13 +43,13 @@\n import org.apache.calcite.sql.type.SqlTypeName;\n import org.apache.calcite.sql.type.SqlTypeUtil;\n import org.apache.calcite.util.ImmutableBitSet;\n-import org.apache.kylin.metadata.MetadataManager;\n import org.apache.kylin.metadata.datatype.DataType;\n import org.apache.kylin.metadata.model.ColumnDesc;\n import org.apache.kylin.metadata.model.DataModelDesc;\n import org.apache.kylin.metadata.model.FunctionDesc;\n import org.apache.kylin.metadata.model.MeasureDesc;\n import org.apache.kylin.metadata.model.TableDesc;\n+import org.apache.kylin.metadata.model.TblColRef;\n import org.apache.kylin.metadata.project.ProjectManager;\n import org.apache.kylin.metadata.realization.IRealization;\n import org.apache.kylin.metadata.realization.RealizationType;\n@@ -198,14 +198,13 @@ else if (precision >= 0)\n             }\n         }\n         //2. All integer measures in non-cube realizations\n-        MetadataManager metadataManager = MetadataManager.getInstance(olapSchema.getConfig());\n         for (IRealization realization : mgr.listAllRealizations(olapSchema.getProjectName())) {\n             if (realization.getType() == RealizationType.INVERTED_INDEX && realization.getModel().isFactTable(sourceTable.getIdentity())) {\n-                DataModelDesc dataModelDesc = realization.getModel();\n-                for (String metricColumn : dataModelDesc.getMetrics()) {\n-                    ColumnDesc columnDesc = metadataManager.getColumnDesc(dataModelDesc.getRootFactTable().getTableIdentity() + \".\" + metricColumn);\n-                    if (columnDesc.getType().isIntegerFamily() && !columnDesc.getType().isBigInt())\n-                        updateColumns.add(columnDesc);\n+                DataModelDesc model = realization.getModel();\n+                for (String metricColumn : model.getMetrics()) {\n+                    TblColRef col = model.findColumn(metricColumn);\n+                    if (col.getType().isIntegerFamily() && !col.getType().isBigInt())\n+                        updateColumns.add(col.getColumnDesc());\n                 }\n             }\n         }", "filename": "query/src/main/java/org/apache/kylin/query/schema/OLAPTable.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/dcd12b0ea561987f30f348b33c2746b605fc5c71", "parent": "https://github.com/apache/kylin/commit/0e675cf2cbaa9f2bc9a520aaef82443641efb8ca", "message": "KYLIN-2711 avoid NPE if output is lost\n\nSigned-off-by: Li Yang <liyang@apache.org>", "bug_id": "kylin_38", "file": [{"additions": 4, "raw_url": "https://github.com/apache/kylin/raw/dcd12b0ea561987f30f348b33c2746b605fc5c71/server-base/src/main/java/org/apache/kylin/rest/service/JobService.java", "blob_url": "https://github.com/apache/kylin/blob/dcd12b0ea561987f30f348b33c2746b605fc5c71/server-base/src/main/java/org/apache/kylin/rest/service/JobService.java", "sha": "5bf684a4ac9c4e0315f1a4598bbe8d347dc27902", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/service/JobService.java?ref=dcd12b0ea561987f30f348b33c2746b605fc5c71", "patch": "@@ -462,6 +462,10 @@ public boolean apply(CubingJob executable) {\n                     public boolean apply(CubingJob executable) {\n                         try {\n                             Output output = allOutputs.get(executable.getId());\n+                            if (output == null){\n+                                return false;\n+                            }\n+                            \n                             ExecutableState state = output.getState();\n                             boolean ret = statusList.contains(state);\n                             return ret;", "filename": "server-base/src/main/java/org/apache/kylin/rest/service/JobService.java"}, {"additions": 33, "raw_url": "https://github.com/apache/kylin/raw/dcd12b0ea561987f30f348b33c2746b605fc5c71/server/src/test/java/org/apache/kylin/rest/service/JobServiceTest.java", "blob_url": "https://github.com/apache/kylin/blob/dcd12b0ea561987f30f348b33c2746b605fc5c71/server/src/test/java/org/apache/kylin/rest/service/JobServiceTest.java", "sha": "fce6027565fa0c765497f0952efcb38777181522", "changes": 33, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server/src/test/java/org/apache/kylin/rest/service/JobServiceTest.java?ref=dcd12b0ea561987f30f348b33c2746b605fc5c71", "patch": "@@ -19,9 +19,14 @@\n package org.apache.kylin.rest.service;\n \n import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n \n+import org.apache.kylin.engine.mr.CubingJob;\n import org.apache.kylin.job.constant.JobTimeFilterEnum;\n+import org.apache.kylin.job.exception.ExecuteException;\n import org.apache.kylin.job.exception.JobException;\n+import org.apache.kylin.job.execution.*;\n import org.apache.kylin.metadata.project.ProjectInstance;\n import org.junit.Assert;\n import org.junit.Test;\n@@ -50,4 +55,32 @@ public void testBasics() throws JobException, IOException {\n         Assert.assertNull(jobService.getJobInstance(\"job_not_exist\"));\n         Assert.assertNotNull(jobService.searchJobs(null, null, null, 0, 0, JobTimeFilterEnum.ALL));\n     }\n+\n+    @Test\n+    public void testExceptionOnLostJobOutput() {\n+        ExecutableManager manager = ExecutableManager.getInstance(jobService.getConfig());\n+        AbstractExecutable executable = new TestJob();\n+        manager.addJob(executable);\n+        List<CubingJob> jobs = jobService.innerSearchCubingJobs(\"cube\",\n+                \"jobName\",\n+                Collections.<ExecutableState>emptySet(),\n+                0,\n+                Long.MAX_VALUE,\n+                Collections.<String, Output>emptyMap(),\n+                true,\n+                \"project\");\n+        Assert.assertEquals(0, jobs.size());\n+    }\n+\n+    public static class TestJob extends CubingJob {\n+\n+        public TestJob(){\n+            super();\n+        }\n+\n+        @Override\n+        protected ExecuteResult doWork(ExecutableContext context) throws ExecuteException {\n+            return new ExecuteResult(ExecuteResult.State.SUCCEED, \"\");\n+        }\n+    }\n }", "filename": "server/src/test/java/org/apache/kylin/rest/service/JobServiceTest.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/66bca9a676fda02aa88cc25bad2e545f779f6dde", "parent": "https://github.com/apache/kylin/commit/2cf52b49ed9a1158cb2ec0ded6d907f90ee024fe", "message": "fix NPE in CacheDictionary in Spark cubing", "bug_id": "kylin_39", "file": [{"additions": 1, "raw_url": "https://github.com/apache/kylin/raw/66bca9a676fda02aa88cc25bad2e545f779f6dde/core-dictionary/src/main/java/org/apache/kylin/dict/CacheDictionary.java", "blob_url": "https://github.com/apache/kylin/blob/66bca9a676fda02aa88cc25bad2e545f779f6dde/core-dictionary/src/main/java/org/apache/kylin/dict/CacheDictionary.java", "sha": "b2bad5355d8852fc5cf10534ef79d416dcdf975c", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-dictionary/src/main/java/org/apache/kylin/dict/CacheDictionary.java?ref=66bca9a676fda02aa88cc25bad2e545f779f6dde", "patch": "@@ -35,7 +35,7 @@\n \n     protected transient int baseId;\n \n-    protected transient BytesConverter<T> bytesConvert;\n+    protected BytesConverter<T> bytesConvert;\n \n     public CacheDictionary() {\n ", "filename": "core-dictionary/src/main/java/org/apache/kylin/dict/CacheDictionary.java"}, {"additions": 2, "raw_url": "https://github.com/apache/kylin/raw/66bca9a676fda02aa88cc25bad2e545f779f6dde/engine-mr/src/main/java/org/apache/kylin/engine/mr/BatchCubingJobBuilder.java", "blob_url": "https://github.com/apache/kylin/blob/66bca9a676fda02aa88cc25bad2e545f779f6dde/engine-mr/src/main/java/org/apache/kylin/engine/mr/BatchCubingJobBuilder.java", "sha": "36c12a12a95c722e74167d585c9a7c8961a8b5a9", "changes": 5, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/BatchCubingJobBuilder.java?ref=66bca9a676fda02aa88cc25bad2e545f779f6dde", "patch": "@@ -65,12 +65,11 @@ public CubingJob build() {\n         // Phase 3: Build Cube\n         RowKeyDesc rowKeyDesc = seg.getCubeDesc().getRowkey();\n         final int groupRowkeyColumnsCount = seg.getCubeDesc().getBuildLevel();\n-        final String[] cuboidOutputTempPath = getCuboidOutputPaths(cuboidRootPath, groupRowkeyColumnsCount);\n         // base cuboid step\n-        result.addTask(createBaseCuboidStep(cuboidOutputTempPath[0], jobId));\n+        result.addTask(createBaseCuboidStep(getCuboidOutputPathsByLevel(cuboidRootPath, 0), jobId));\n         // n dim cuboid steps\n         for (int i = 1; i <= groupRowkeyColumnsCount; i++) {\n-            result.addTask(createNDimensionCuboidStep(cuboidOutputTempPath[i - 1], cuboidOutputTempPath[i], i));\n+            result.addTask(createNDimensionCuboidStep(getCuboidOutputPathsByLevel(cuboidRootPath, i - 1), getCuboidOutputPathsByLevel(cuboidRootPath, i), i));\n         }\n         outputSide.addStepPhase3_BuildCube(result, cuboidRootPath);\n ", "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/BatchCubingJobBuilder.java"}, {"additions": 3, "raw_url": "https://github.com/apache/kylin/raw/66bca9a676fda02aa88cc25bad2e545f779f6dde/engine-mr/src/main/java/org/apache/kylin/engine/mr/BatchCubingJobBuilder2.java", "blob_url": "https://github.com/apache/kylin/blob/66bca9a676fda02aa88cc25bad2e545f779f6dde/engine-mr/src/main/java/org/apache/kylin/engine/mr/BatchCubingJobBuilder2.java", "sha": "dd866bd091ba672df9d24722e1bb17086750a593", "changes": 7, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/BatchCubingJobBuilder2.java?ref=66bca9a676fda02aa88cc25bad2e545f779f6dde", "patch": "@@ -76,14 +76,13 @@ public CubingJob build() {\n         return result;\n     }\n \n-    private void addLayerCubingSteps(final CubingJob result, final String jobId, final String cuboidRootPath) {\n+    protected void addLayerCubingSteps(final CubingJob result, final String jobId, final String cuboidRootPath) {\n         final int maxLevel = seg.getCubeDesc().getBuildLevel();\n-        final String[] cuboidOutputTempPath = getCuboidOutputPaths(cuboidRootPath, maxLevel);\n         // base cuboid step\n-        result.addTask(createBaseCuboidStep(cuboidOutputTempPath[0], jobId));\n+        result.addTask(createBaseCuboidStep(getCuboidOutputPathsByLevel(cuboidRootPath, 0), jobId));\n         // n dim cuboid steps\n         for (int i = 1; i <= maxLevel; i++) {\n-            result.addTask(createNDimensionCuboidStep(cuboidOutputTempPath[i - 1], cuboidOutputTempPath[i], i, jobId));\n+            result.addTask(createNDimensionCuboidStep(getCuboidOutputPathsByLevel(cuboidRootPath, i-1), getCuboidOutputPathsByLevel(cuboidRootPath, i-1), i, jobId));\n         }\n     }\n ", "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/BatchCubingJobBuilder2.java"}, {"additions": 1, "raw_url": "https://github.com/apache/kylin/raw/66bca9a676fda02aa88cc25bad2e545f779f6dde/engine-mr/src/main/java/org/apache/kylin/engine/mr/JobBuilderSupport.java", "blob_url": "https://github.com/apache/kylin/blob/66bca9a676fda02aa88cc25bad2e545f779f6dde/engine-mr/src/main/java/org/apache/kylin/engine/mr/JobBuilderSupport.java", "sha": "696b22aa5b7ac85f6a0abf89d47ff3cae8e58422", "changes": 14, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/JobBuilderSupport.java?ref=66bca9a676fda02aa88cc25bad2e545f779f6dde", "patch": "@@ -193,23 +193,11 @@ public static StringBuilder appendExecCmdParameters(StringBuilder buf, String pa\n         return buf.append(\" -\").append(paraName).append(\" \").append(paraValue);\n     }\n \n-    public String[] getCuboidOutputPaths(String cuboidRootPath, int levels) {\n-        String[] paths = new String[levels + 1];\n-        for (int i = 0; i <= levels; i++) {\n-            if (i == 0) {\n-                paths[i] = cuboidRootPath + \"base_cuboid\";\n-            } else {\n-                paths[i] = cuboidRootPath + \"level_\" + i + \"_cuboid\";\n-            }\n-        }\n-        return paths;\n-    }\n-\n     public static String getCuboidOutputPathsByLevel(String cuboidRootPath, int level) {\n         if (level == 0) {\n             return cuboidRootPath + \"base_cuboid\";\n         } else {\n-            return cuboidRootPath + level + \"level_cuboid\";\n+            return cuboidRootPath + \"level_\" + level + \"_cuboid\";\n         }\n     }\n ", "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/JobBuilderSupport.java"}, {"additions": 1, "raw_url": "https://github.com/apache/kylin/raw/66bca9a676fda02aa88cc25bad2e545f779f6dde/engine-spark/src/main/java/org/apache/kylin/engine/spark/SparkBatchCubingJobBuilder2.java", "blob_url": "https://github.com/apache/kylin/blob/66bca9a676fda02aa88cc25bad2e545f779f6dde/engine-spark/src/main/java/org/apache/kylin/engine/spark/SparkBatchCubingJobBuilder2.java", "sha": "55e11c4ab0d0aeec1b8c1d615bd2441b9f8a33b1", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-spark/src/main/java/org/apache/kylin/engine/spark/SparkBatchCubingJobBuilder2.java?ref=66bca9a676fda02aa88cc25bad2e545f779f6dde", "patch": "@@ -41,6 +41,7 @@ public SparkBatchCubingJobBuilder2(CubeSegment newSegment, String submitter) {\n         super(newSegment, submitter);\n     }\n \n+    @Override\n     protected void addLayerCubingSteps(final CubingJob result, final String jobId, final String cuboidRootPath) {\n \n     }", "filename": "engine-spark/src/main/java/org/apache/kylin/engine/spark/SparkBatchCubingJobBuilder2.java"}, {"additions": 1, "raw_url": "https://github.com/apache/kylin/raw/66bca9a676fda02aa88cc25bad2e545f779f6dde/engine-spark/src/main/java/org/apache/kylin/engine/spark/SparkCubingByLayer.java", "blob_url": "https://github.com/apache/kylin/blob/66bca9a676fda02aa88cc25bad2e545f779f6dde/engine-spark/src/main/java/org/apache/kylin/engine/spark/SparkCubingByLayer.java", "sha": "93cce81283d1d1eb779956569d6e24b10ddc91c4", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-spark/src/main/java/org/apache/kylin/engine/spark/SparkCubingByLayer.java?ref=66bca9a676fda02aa88cc25bad2e545f779f6dde", "patch": "@@ -260,7 +260,7 @@ public boolean apply(@Nullable String input) {\n         // aggregate to ND cuboids\n         PairFlatMapFunction<Tuple2<ByteArray, Object[]>, ByteArray, Object[]> flatMapFunction = new CuboidFlatMap(vCubeSegment.getValue(), vCubeDesc.getValue(), vCuboidScheduler.getValue(), ndCuboidBuilder);\n \n-        for (level = 1; level < totalLevels; level++) {\n+        for (level = 1; level <= totalLevels; level++) {\n             partition = estimateRDDPartitionNum(level, cubeStatsReader, kylinConfig);\n             logger.info(\"Level \" + level + \" partition number: \" + partition);\n             allRDDs[level] = allRDDs[level - 1].flatMapToPair(flatMapFunction).reduceByKey(reducerFunction2, partition).persist(storageLevel);", "filename": "engine-spark/src/main/java/org/apache/kylin/engine/spark/SparkCubingByLayer.java"}, {"additions": 0, "raw_url": "https://github.com/apache/kylin/raw/66bca9a676fda02aa88cc25bad2e545f779f6dde/engine-spark/src/main/java/org/apache/kylin/engine/spark/SparkCubingJobBuilder.java", "blob_url": "https://github.com/apache/kylin/blob/66bca9a676fda02aa88cc25bad2e545f779f6dde/engine-spark/src/main/java/org/apache/kylin/engine/spark/SparkCubingJobBuilder.java", "sha": "76e4521485a8ab09815b3a79fc46232b81b85e13", "changes": 1, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-spark/src/main/java/org/apache/kylin/engine/spark/SparkCubingJobBuilder.java?ref=66bca9a676fda02aa88cc25bad2e545f779f6dde", "patch": "@@ -50,7 +50,6 @@ public SparkCubingJobBuilder(CubeSegment seg, String submitter, String confPath,\n \n     public DefaultChainedExecutable build() {\n         final CubingJob result = CubingJob.createBuildJob(seg, submitter, config);\n-        final String jobId = result.getId();\n \n         inputSide.addStepPhase1_CreateFlatTable(result);\n         final IJoinedFlatTableDesc joinedFlatTableDesc = EngineFactory.getJoinedFlatTableDesc(seg);", "filename": "engine-spark/src/main/java/org/apache/kylin/engine/spark/SparkCubingJobBuilder.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/971b10905e23a1b2b97d2aa19de93d38d4f527f4", "parent": "https://github.com/apache/kylin/commit/297730dc97e705f2c8526dcdc7718cee900e40e9", "message": "KYLIN-2172 fix potential NPE", "bug_id": "kylin_40", "file": [{"additions": 1, "raw_url": "https://github.com/apache/kylin/raw/971b10905e23a1b2b97d2aa19de93d38d4f527f4/core-job/src/main/java/org/apache/kylin/job/execution/ExecutableManager.java", "blob_url": "https://github.com/apache/kylin/blob/971b10905e23a1b2b97d2aa19de93d38d4f527f4/core-job/src/main/java/org/apache/kylin/job/execution/ExecutableManager.java", "sha": "0e39ad1069fac99049e36a154d0f558e5de738d7", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-job/src/main/java/org/apache/kylin/job/execution/ExecutableManager.java?ref=971b10905e23a1b2b97d2aa19de93d38d4f527f4", "patch": "@@ -312,7 +312,7 @@ public void updateJobOutput(String jobId, ExecutableState newStatus, Map<String,\n             executableDao.updateJobOutput(jobOutput);\n             logger.info(\"job id:\" + jobId + \" from \" + oldStatus + \" to \" + newStatus);\n         } catch (PersistentException e) {\n-            logger.error(\"error change job:\" + jobId + \" to \" + newStatus.toString());\n+            logger.error(\"error change job:\" + jobId + \" to \" + newStatus);\n             throw new RuntimeException(e);\n         }\n     }", "filename": "core-job/src/main/java/org/apache/kylin/job/execution/ExecutableManager.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/5ea095a3251a6588331a26d57ae3bdee4eb61fbb", "parent": "https://github.com/apache/kylin/commit/862aaabe6990fff7bfbfedbe72b13e1ffa370ba6", "message": "KYLIN-1726 fix a NPE", "bug_id": "kylin_41", "file": [{"additions": 6, "raw_url": "https://github.com/apache/kylin/raw/5ea095a3251a6588331a26d57ae3bdee4eb61fbb/core-metadata/src/main/java/org/apache/kylin/source/SourcePartition.java", "blob_url": "https://github.com/apache/kylin/blob/5ea095a3251a6588331a26d57ae3bdee4eb61fbb/core-metadata/src/main/java/org/apache/kylin/source/SourcePartition.java", "sha": "e48970498ea74f7a04318b29e8fd1b8071f6dd31", "changes": 8, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-metadata/src/main/java/org/apache/kylin/source/SourcePartition.java?ref=5ea095a3251a6588331a26d57ae3bdee4eb61fbb", "patch": "@@ -104,8 +104,12 @@ public static SourcePartition getCopyOf(SourcePartition origin) {\n         copy.setEndDate(origin.getEndDate());\n         copy.setStartOffset(origin.getStartOffset());\n         copy.setEndOffset(origin.getEndOffset());\n-        copy.setSourcePartitionOffsetStart(new HashMap<>(origin.getSourcePartitionOffsetStart()));\n-        copy.setSourcePartitionOffsetEnd(new HashMap<>(origin.getSourcePartitionOffsetEnd()));\n+        if (origin.getSourcePartitionOffsetStart() != null) {\n+            copy.setSourcePartitionOffsetStart(new HashMap<>(origin.getSourcePartitionOffsetStart()));\n+        }\n+        if (origin.getSourcePartitionOffsetEnd() != null) {\n+            copy.setSourcePartitionOffsetEnd(new HashMap<>(origin.getSourcePartitionOffsetEnd()));\n+        }\n         return copy;\n     }\n }", "filename": "core-metadata/src/main/java/org/apache/kylin/source/SourcePartition.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/4c39fcb0eaab053d43554ac6add377343d585065", "parent": "https://github.com/apache/kylin/commit/c0c56f4b6b05bb108a4952a56af992b237c1bbe6", "message": "KYLIN-2217 fix NPE in FactDistinctColumnsReducer", "bug_id": "kylin_42", "file": [{"additions": 3, "raw_url": "https://github.com/apache/kylin/raw/4c39fcb0eaab053d43554ac6add377343d585065/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/FactDistinctColumnsReducer.java", "blob_url": "https://github.com/apache/kylin/blob/4c39fcb0eaab053d43554ac6add377343d585065/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/FactDistinctColumnsReducer.java", "sha": "776d7509280a83e386f39e4d715cb754d226ba8e", "changes": 7, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/FactDistinctColumnsReducer.java?ref=4c39fcb0eaab053d43554ac6add377343d585065", "patch": "@@ -117,7 +117,6 @@ protected void setup(Context context) throws IOException {\n             isPartitionCol = true;\n             col = cubeDesc.getModel().getPartitionDesc().getPartitionDateColumnRef();\n             if (col == null) {\n-                isPartitionCol = false;\n                 logger.info(\"Do not have partition col. This reducer will keep empty\");\n             }\n             colValues = Lists.newLinkedList();\n@@ -283,9 +282,9 @@ protected void doCleanup(Context context) throws IOException, InterruptedExcepti\n                     cuboidHLLMap, samplingPercentage, mapperNumber, mapperOverlapRatio);\n         } else if (isPartitionCol) {\n             // partition col\n-            if (col == null)\n-                return;\n-            outputPartitionInfo(context);\n+            if (col != null) {\n+                outputPartitionInfo(context);\n+            }\n         } else {\n             // normal col\n             if (isReducerLocalBuildDict) {", "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/FactDistinctColumnsReducer.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/5a18af04ca40aaa6509cdf7c39b71b17dc5eb4a3", "parent": "https://github.com/apache/kylin/commit/122b15a2a5fb7385e64839edfb9cbdaec5fde841", "message": "fix NPE bug\n\nSigned-off-by: shaofengshi <shaofengshi@apache.org>", "bug_id": "kylin_43", "file": [{"additions": 2, "raw_url": "https://github.com/apache/kylin/raw/5a18af04ca40aaa6509cdf7c39b71b17dc5eb4a3/core-dictionary/src/main/java/org/apache/kylin/dict/CacheDictionary.java", "blob_url": "https://github.com/apache/kylin/blob/5a18af04ca40aaa6509cdf7c39b71b17dc5eb4a3/core-dictionary/src/main/java/org/apache/kylin/dict/CacheDictionary.java", "sha": "d7ed6bdfb665e1f3aa72c3d849f819d8e3e77225", "changes": 8, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-dictionary/src/main/java/org/apache/kylin/dict/CacheDictionary.java?ref=5a18af04ca40aaa6509cdf7c39b71b17dc5eb4a3", "patch": "@@ -29,8 +29,6 @@\n public abstract class CacheDictionary<T> extends Dictionary<T> {\n     private static final long serialVersionUID = 1L;\n \n-    protected transient boolean enableValueCache = false;\n-\n     private transient SoftReference<ConcurrentHashMap> valueToIdCache;\n \n     private transient SoftReference<Object[]> idToValueCache;\n@@ -46,7 +44,7 @@ public CacheDictionary() {\n     //value --> id\n     @Override\n     protected final int getIdFromValueImpl(T value, int roundingFlag) {\n-        if (enableValueCache && roundingFlag == 0) {\n+        if (this.valueToIdCache != null && roundingFlag == 0) {\n             Map cache = valueToIdCache.get(); // SoftReference to skip cache gracefully when short of memory\n             if (cache != null) {\n                 Integer id;\n@@ -66,7 +64,7 @@ protected final int getIdFromValueImpl(T value, int roundingFlag) {\n     //id --> value\n     @Override\n     protected final T getValueFromIdImpl(int id) {\n-        if (enableValueCache) {\n+        if (this.idToValueCache != null) {\n             Object[] cache = idToValueCache.get();\n             if (cache != null) {\n                 int seq = calcSeqNoFromId(id);\n@@ -91,15 +89,13 @@ protected final int calcSeqNoFromId(int id) {\n     }\n \n     public final void enableCache() {\n-        this.enableValueCache = true;\n         if (this.valueToIdCache == null)\n             this.valueToIdCache = new SoftReference<>(new ConcurrentHashMap());\n         if (this.idToValueCache == null)\n             this.idToValueCache = new SoftReference<>(new Object[getSize()]);\n     }\n \n     public final void disableCache() {\n-        this.enableValueCache = false;\n         this.valueToIdCache = null;\n         this.idToValueCache = null;\n     }", "filename": "core-dictionary/src/main/java/org/apache/kylin/dict/CacheDictionary.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/e850593d4b32ac486021f2ba6853725ba891fef7", "parent": "https://github.com/apache/kylin/commit/4c636b8a3a4df90d27f72391605b5500800a95a4", "message": "KYLIN-2069, fix NPE in LookupStringTable", "bug_id": "kylin_44", "file": [{"additions": 2, "raw_url": "https://github.com/apache/kylin/raw/e850593d4b32ac486021f2ba6853725ba891fef7/core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupStringTable.java", "blob_url": "https://github.com/apache/kylin/blob/e850593d4b32ac486021f2ba6853725ba891fef7/core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupStringTable.java", "sha": "56c1c98d91f353dec48bcc6cd7593003ecb1f9dc", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupStringTable.java?ref=e850593d4b32ac486021f2ba6853725ba891fef7", "patch": "@@ -83,7 +83,8 @@ protected void init() throws IOException {\n     protected String[] convertRow(String[] cols) {\r\n         for (int i = 0; i < cols.length; i++) {\r\n             if (colIsDateTime[i]) {\r\n-                cols[i] = String.valueOf(DateFormat.stringToMillis(cols[i]));\r\n+                if (cols[i] != null)\n+                    cols[i] = String.valueOf(DateFormat.stringToMillis(cols[i]));\n             }\r\n         }\r\n         return cols;\r", "filename": "core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupStringTable.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/fd745c8804848a60ac96eff1bd9b30bbe38bdafc", "parent": "https://github.com/apache/kylin/commit/73a7c25dfeb28764658af3e73065aa04cc1b92cd", "message": "minor, fix NPE when filter Non-Cubing Job", "bug_id": "kylin_45", "file": [{"additions": 5, "raw_url": "https://github.com/apache/kylin/raw/fd745c8804848a60ac96eff1bd9b30bbe38bdafc/server-base/src/main/java/org/apache/kylin/rest/service/JobService.java", "blob_url": "https://github.com/apache/kylin/blob/fd745c8804848a60ac96eff1bd9b30bbe38bdafc/server-base/src/main/java/org/apache/kylin/rest/service/JobService.java", "sha": "4709a919de777f306a3790fcf99c04f763f909aa", "changes": 7, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/service/JobService.java?ref=fd745c8804848a60ac96eff1bd9b30bbe38bdafc", "patch": "@@ -536,10 +536,13 @@ private String getServerName() {\n             @Override\n             public boolean apply(AbstractExecutable executable) {\n                 if (executable instanceof CubingJob) {\n-                    if (cubeName == null) {\n+                    if (StringUtils.isEmpty(cubeName)) {\n                         return true;\n                     }\n-                    return CubingExecutableUtil.getCubeName(executable.getParams()).equalsIgnoreCase(cubeName);\n+                    String executableCubeName = CubingExecutableUtil.getCubeName(executable.getParams());\n+                    if (executableCubeName == null)\n+                        return true;\n+                    return executableCubeName.contains(cubeName);\n                 } else {\n                     return false;\n                 }", "filename": "server-base/src/main/java/org/apache/kylin/rest/service/JobService.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/de2f75458b3a5d76390173fdd9359eadbcb11764", "parent": "https://github.com/apache/kylin/commit/4f32927558ff6ebc1899241af87e93bd2747e242", "message": "minor, fix an NPE", "bug_id": "kylin_46", "file": [{"additions": 7, "raw_url": "https://github.com/apache/kylin/raw/de2f75458b3a5d76390173fdd9359eadbcb11764/server/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java", "blob_url": "https://github.com/apache/kylin/blob/de2f75458b3a5d76390173fdd9359eadbcb11764/server/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java", "sha": "b530586f72663d59cba9157b1fc9da2f21715cd4", "changes": 7, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java?ref=de2f75458b3a5d76390173fdd9359eadbcb11764", "patch": "@@ -63,4 +63,11 @@ public String dumpJobDiagnosisInfo(String jobId) throws IOException {\n         jobInfoExtractor.execute(args);\n         return jobInfoExtractor.getExportDest();\n     }\n+\n+    public static void main(String args1[]) {\n+        String[] args = { \"-project\", \"learn_kylin\", \"-destDir\", Files.createTempDir().getAbsolutePath() };\n+        logger.info(\"DiagnosisInfoCLI args: \" + args);\n+        DiagnosisInfoCLI diagnosisInfoCli = new DiagnosisInfoCLI();\n+        diagnosisInfoCli.execute(args);\n+    }\n }", "filename": "server/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/4f32927558ff6ebc1899241af87e93bd2747e242", "parent": "https://github.com/apache/kylin/commit/cabd2f9cb9f4fd50c21bcfcaceb37c1fa122bb94", "message": "minor, fix an NPE", "bug_id": "kylin_47", "file": [{"additions": 1, "raw_url": "https://github.com/apache/kylin/raw/4f32927558ff6ebc1899241af87e93bd2747e242/core-common/src/main/java/org/apache/kylin/common/KylinVersion.java", "blob_url": "https://github.com/apache/kylin/blob/4f32927558ff6ebc1899241af87e93bd2747e242/core-common/src/main/java/org/apache/kylin/common/KylinVersion.java", "sha": "d1d2f7a8a345ffdb37e31f2269acd643cbe068f9", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-common/src/main/java/org/apache/kylin/common/KylinVersion.java?ref=4f32927558ff6ebc1899241af87e93bd2747e242", "patch": "@@ -126,7 +126,7 @@ public static void main(String[] args) {\n     public static String getKylinClientInformation() {\n         StringBuilder buf = new StringBuilder();\n \n-        buf.append(\"kylin.home: \").append(new File(KylinConfig.getKylinHome()).getAbsolutePath()).append(\"\\n\");\n+        buf.append(\"kylin.home: \").append(KylinConfig.getKylinHome() == null ? \"UNKNOWN\" : new File(KylinConfig.getKylinHome()).getAbsolutePath()).append(\"\\n\");\n         buf.append(\"kylin.version:\").append(KylinVersion.getCurrentVersion()).append(\"\\n\");\n         buf.append(\"commit:\").append(getGitCommitInfo()).append(\"\\n\");\n         buf.append(\"os.name:\").append(System.getProperty(\"os.name\")).append(\"\\n\");", "filename": "core-common/src/main/java/org/apache/kylin/common/KylinVersion.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/e1c2b4f5376406ba643d4f5c5865fe3d9ff86d3c", "parent": "https://github.com/apache/kylin/commit/35c5807686f4302ba554ee7668755885363b83c7", "message": "minor, fix a NPE", "bug_id": "kylin_48", "file": [{"additions": 1, "raw_url": "https://github.com/apache/kylin/raw/e1c2b4f5376406ba643d4f5c5865fe3d9ff86d3c/core-cube/src/main/java/org/apache/kylin/gridtable/GTInfo.java", "blob_url": "https://github.com/apache/kylin/blob/e1c2b4f5376406ba643d4f5c5865fe3d9ff86d3c/core-cube/src/main/java/org/apache/kylin/gridtable/GTInfo.java", "sha": "85b45cf744612f7c5a4a221e4232f091cb9ea4a6", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-cube/src/main/java/org/apache/kylin/gridtable/GTInfo.java?ref=e1c2b4f5376406ba643d4f5c5865fe3d9ff86d3c", "patch": "@@ -149,7 +149,7 @@ void validate() {\n         if (codeSystem == null)\n             throw new IllegalStateException();\n \n-        if (primaryKey == null && primaryKey.cardinality() == 0)\n+        if (primaryKey == null || primaryKey.cardinality() == 0)\n             throw new IllegalStateException();\n \n         codeSystem.init(this);", "filename": "core-cube/src/main/java/org/apache/kylin/gridtable/GTInfo.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/14be33f8f16d20bb18500934d56272a30face1b8", "parent": "https://github.com/apache/kylin/commit/de2f75458b3a5d76390173fdd9359eadbcb11764", "message": "minor, fix NPE on diag", "bug_id": "kylin_49", "file": [{"additions": 2, "raw_url": "https://github.com/apache/kylin/raw/14be33f8f16d20bb18500934d56272a30face1b8/tool/src/main/java/org/apache/kylin/tool/ToolUtil.java", "blob_url": "https://github.com/apache/kylin/blob/14be33f8f16d20bb18500934d56272a30face1b8/tool/src/main/java/org/apache/kylin/tool/ToolUtil.java", "sha": "494f4fea86a04a3d40d39441788bc303755b3c49", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/tool/src/main/java/org/apache/kylin/tool/ToolUtil.java?ref=14be33f8f16d20bb18500934d56272a30face1b8", "patch": "@@ -50,6 +50,8 @@ public static String getHBaseMetaStoreId() throws IOException {\n             final String metaStoreName = KylinConfig.getInstanceFromEnv().getMetadataUrlPrefix();\n             final HTableDescriptor desc = hbaseAdmin.getTableDescriptor(TableName.valueOf(metaStoreName));\n             return desc.getValue(HBaseConnection.HTABLE_UUID_TAG);\n+        } catch (Exception e) {\n+            return null;\n         }\n     }\n ", "filename": "tool/src/main/java/org/apache/kylin/tool/ToolUtil.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/32d724440657fd97462d4d10f9a5d91ba0d5a6da", "parent": "https://github.com/apache/kylin/commit/a9ee6d33eca53f67d9d4dd1da52b6fbfe98cb510", "message": "minor, fix NPE and check table using by model code in MetadataManager", "bug_id": "kylin_50", "file": [{"additions": 11, "raw_url": "https://github.com/apache/kylin/raw/32d724440657fd97462d4d10f9a5d91ba0d5a6da/core-metadata/src/main/java/org/apache/kylin/metadata/MetadataManager.java", "blob_url": "https://github.com/apache/kylin/blob/32d724440657fd97462d4d10f9a5d91ba0d5a6da/core-metadata/src/main/java/org/apache/kylin/metadata/MetadataManager.java", "sha": "7290d4c95896c17c8d5cbd871cb6779269d52937", "changes": 21, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-metadata/src/main/java/org/apache/kylin/metadata/MetadataManager.java?ref=32d724440657fd97462d4d10f9a5d91ba0d5a6da", "patch": "@@ -39,6 +39,7 @@\n import org.apache.kylin.metadata.model.ExternalFilterDesc;\n import org.apache.kylin.metadata.model.TableDesc;\n import org.apache.kylin.metadata.model.TableExtDesc;\n+import org.apache.kylin.metadata.model.TableRef;\n import org.apache.kylin.metadata.project.ProjectInstance;\n import org.apache.kylin.metadata.project.ProjectManager;\n import org.slf4j.Logger;\n@@ -395,6 +396,7 @@ private TableExtDesc reloadTableExtAt(String path) throws IOException {\n         // remove old json\n         if (name == null) {\n             getStore().deleteResource(path);\n+            return null;\n         }\n \n         srcTableExdMap.putLocal(name, t);\n@@ -495,28 +497,27 @@ public DataModelDesc getDataModelDesc(String name) {\n     }\n \n     public boolean isTableInModel(String tableName, String projectName) throws IOException {\n-        for (DataModelDesc modelDesc : getModels(projectName)) {\n-            if (modelDesc.getAllTables().contains(tableName.toUpperCase())) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        return getModelsUsingTable(tableName, projectName).size() > 0;\n     }\n \n     public List<String> getModelsUsingTable(String tableName, String projectName) throws IOException {\n         List<String> models = new ArrayList<>();\n         for (DataModelDesc modelDesc : getModels(projectName)) {\n-            if (modelDesc.getAllTables().contains(tableName.toUpperCase())) {\n-                models.add(modelDesc.getName());\n+            for(TableRef tableRef : modelDesc.getAllTables()){\n+                if(tableRef.getTableName().equalsIgnoreCase(tableName)){\n+                    models.add(modelDesc.getName());\n+                }\n             }\n         }\n         return models;\n     }\n \n     public boolean isTableInAnyModel(String tableName) {\n         for (DataModelDesc modelDesc : getModels()) {\n-            if (modelDesc.getAllTables().contains(tableName.toUpperCase())) {\n-                return true;\n+            for(TableRef tableRef : modelDesc.getAllTables()){\n+                if(tableRef.getTableName().equalsIgnoreCase(tableName)){\n+                    return true;\n+                }\n             }\n         }\n         return false;", "filename": "core-metadata/src/main/java/org/apache/kylin/metadata/MetadataManager.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/57569a7dc3144a82873941e20c4139d008e9512d", "parent": "https://github.com/apache/kylin/commit/22f09c18214df9239b4b546eb44ea164cf10334b", "message": "KYLIN-1911 NPE when extended column has NULL value", "bug_id": "kylin_51", "file": [{"additions": 5, "raw_url": "https://github.com/apache/kylin/raw/57569a7dc3144a82873941e20c4139d008e9512d/core-metadata/src/main/java/org/apache/kylin/measure/extendedcolumn/ExtendedColumnMeasureType.java", "blob_url": "https://github.com/apache/kylin/blob/57569a7dc3144a82873941e20c4139d008e9512d/core-metadata/src/main/java/org/apache/kylin/measure/extendedcolumn/ExtendedColumnMeasureType.java", "sha": "dc718d14ebf22eb711366c276ea3dec10e0b3ed2", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-metadata/src/main/java/org/apache/kylin/measure/extendedcolumn/ExtendedColumnMeasureType.java?ref=57569a7dc3144a82873941e20c4139d008e9512d", "patch": "@@ -147,6 +147,11 @@ public IAdvMeasureFiller getAdvancedTupleFiller(FunctionDesc function, TupleInfo\n \n             @Override\n             public void reload(Object measureValue) {\n+                if (measureValue == null) {\n+                    value = null;\n+                    return;\n+                }\n+                \n                 ByteArray byteArray = (ByteArray) measureValue;\n                 //the array in ByteArray is guaranteed to be completed owned by the ByteArray\n                 value = Bytes.toString(byteArray.array());", "filename": "core-metadata/src/main/java/org/apache/kylin/measure/extendedcolumn/ExtendedColumnMeasureType.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/c94d2182904b0f1174eaba2504ce242b7d509168", "parent": "https://github.com/apache/kylin/commit/c0b87039eb45ee94c6ecab71e27d14ee81bac8e2", "message": "KYLIN-2209 fix potential NPE\n\nSigned-off-by: Li Yang <liyang@apache.org>", "bug_id": "kylin_52", "file": [{"additions": 11, "raw_url": "https://github.com/apache/kylin/raw/c94d2182904b0f1174eaba2504ce242b7d509168/server-base/src/main/java/org/apache/kylin/rest/controller/StreamingController.java", "blob_url": "https://github.com/apache/kylin/blob/c94d2182904b0f1174eaba2504ce242b7d509168/server-base/src/main/java/org/apache/kylin/rest/controller/StreamingController.java", "sha": "e04ebc838b33499b72f4c18e7f8132358be43e03", "changes": 16, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/controller/StreamingController.java?ref=c94d2182904b0f1174eaba2504ce242b7d509168", "patch": "@@ -26,9 +26,9 @@\n import org.apache.kylin.common.KylinConfig;\n import org.apache.kylin.common.util.JsonUtil;\n import org.apache.kylin.engine.mr.HadoopUtil;\n-import org.apache.kylin.metadata.streaming.StreamingConfig;\n import org.apache.kylin.metadata.MetadataManager;\n import org.apache.kylin.metadata.model.TableDesc;\n+import org.apache.kylin.metadata.streaming.StreamingConfig;\n import org.apache.kylin.rest.exception.BadRequestException;\n import org.apache.kylin.rest.exception.ForbiddenException;\n import org.apache.kylin.rest.exception.InternalErrorException;\n@@ -104,6 +104,10 @@ public StreamingRequest saveStreamingConfig(@RequestBody StreamingRequest stream\n \n         String project = streamingRequest.getProject();\n         TableDesc tableDesc = deserializeTableDesc(streamingRequest);\n+        if (null == tableDesc) {\n+            throw new BadRequestException(\"Failed to add streaming table.\");\n+        }\n+\n         StreamingConfig streamingConfig = deserializeSchemalDesc(streamingRequest);\n         KafkaConfig kafkaConfig = deserializeKafkaSchemalDesc(streamingRequest);\n         boolean saveStreamingSuccess = false, saveKafkaSuccess = false;\n@@ -235,10 +239,12 @@ private TableDesc deserializeTableDesc(StreamingRequest streamingRequest) {\n             throw new InternalErrorException(\"Failed to deal with the request:\" + e.getMessage(), e);\n         }\n \n-        String[] dbTable = HadoopUtil.parseHiveTableName(desc.getName());\n-        desc.setName(dbTable[1]);\n-        desc.setDatabase(dbTable[0]);\n-        desc.getIdentity();\n+        if (null != desc) {\n+            String[] dbTable = HadoopUtil.parseHiveTableName(desc.getName());\n+            desc.setName(dbTable[1]);\n+            desc.setDatabase(dbTable[0]);\n+            desc.getIdentity();\n+        }\n         return desc;\n     }\n ", "filename": "server-base/src/main/java/org/apache/kylin/rest/controller/StreamingController.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/e9a36c6c5d47b67ab1a8b0bd3361a77001e06080", "parent": "https://github.com/apache/kylin/commit/1a124e68faab349f34f5f47e5e144a8854172f41", "message": "KYLIN-1821 fix CI, NPE in MeasureDesc.hashCode()", "bug_id": "kylin_53", "file": [{"additions": 2, "raw_url": "https://github.com/apache/kylin/raw/e9a36c6c5d47b67ab1a8b0bd3361a77001e06080/core-metadata/src/main/java/org/apache/kylin/metadata/model/MeasureDesc.java", "blob_url": "https://github.com/apache/kylin/blob/e9a36c6c5d47b67ab1a8b0bd3361a77001e06080/core-metadata/src/main/java/org/apache/kylin/metadata/model/MeasureDesc.java", "sha": "dcf6350000866cc7da5aefb501016aa59cc42c31", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-metadata/src/main/java/org/apache/kylin/metadata/model/MeasureDesc.java?ref=e9a36c6c5d47b67ab1a8b0bd3361a77001e06080", "patch": "@@ -63,7 +63,7 @@ public void setDependentMeasureRef(String dependentMeasureRef) {\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(function, dependentMeasureRef.toLowerCase());\n+        return Objects.hash(function, dependentMeasureRef);\n     }\n \n     @Override\n@@ -84,7 +84,7 @@ public boolean equals(Object o) {\n         if (dependentMeasureRef == null && that.getDependentMeasureRef() == null)\n             return true;\n \n-        return dependentMeasureRef.equalsIgnoreCase(that.getDependentMeasureRef());\n+        return dependentMeasureRef.equals(that.getDependentMeasureRef());\n     }\n \n     @Override", "filename": "core-metadata/src/main/java/org/apache/kylin/metadata/model/MeasureDesc.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/c0569baa169f26f911be05baeab568139bb45670", "parent": "https://github.com/apache/kylin/commit/d2cbc8f26df02147c4040655f0470d7bc271f90f", "message": "KYLIN-1127 fix a NPE", "bug_id": "kylin_54", "file": [{"additions": 2, "raw_url": "https://github.com/apache/kylin/raw/c0569baa169f26f911be05baeab568139bb45670/server/src/main/java/org/apache/kylin/rest/service/CacheService.java", "blob_url": "https://github.com/apache/kylin/blob/c0569baa169f26f911be05baeab568139bb45670/server/src/main/java/org/apache/kylin/rest/service/CacheService.java", "sha": "63fe8c4d30e1dfd199871ac8733d80a8e23d4b10", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server/src/main/java/org/apache/kylin/rest/service/CacheService.java?ref=c0569baa169f26f911be05baeab568139bb45670", "patch": "@@ -125,9 +125,11 @@ public void removeCache(Broadcaster.TYPE cacheType, String cacheKey) {\n         try {\n             switch (cacheType) {\n                 case CUBE:\n+                if (getCubeManager().getCube(cacheKey) != null) {\n                     String storageUUID = getCubeManager().getCube(cacheKey).getUuid();\n                     getCubeManager().removeCubeLocal(cacheKey);\n                     super.cleanDataCache(storageUUID);\n+                }\n                     break;\n                 case CUBE_DESC:\n                     getCubeDescManager().removeLocalCubeDesc(cacheKey);", "filename": "server/src/main/java/org/apache/kylin/rest/service/CacheService.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/efd533fc4e6f1812f09f39dd0211ba697fb88d1a", "parent": "https://github.com/apache/kylin/commit/dd85db452b0dd05afa0544fb246aac73bc94575c", "message": "fix NPE", "bug_id": "kylin_55", "file": [{"additions": 4, "raw_url": "https://github.com/apache/kylin/raw/efd533fc4e6f1812f09f39dd0211ba697fb88d1a/invertedindex/src/main/java/org/apache/kylin/invertedindex/index/TableRecordInfoDigest.java", "blob_url": "https://github.com/apache/kylin/blob/efd533fc4e6f1812f09f39dd0211ba697fb88d1a/invertedindex/src/main/java/org/apache/kylin/invertedindex/index/TableRecordInfoDigest.java", "sha": "35482d06911aad3bad2a716529b0567672cc5946", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/invertedindex/src/main/java/org/apache/kylin/invertedindex/index/TableRecordInfoDigest.java?ref=efd533fc4e6f1812f09f39dd0211ba697fb88d1a", "patch": "@@ -72,6 +72,10 @@ public boolean isMetrics(int col) {\n \t\treturn isMetric[col];\n \t}\n \n+    public boolean[] isMetrics() {\n+        return isMetric;\n+    }\n+\n \tpublic int getColumnCount() {\n \t\treturn nColumns;\n \t}", "filename": "invertedindex/src/main/java/org/apache/kylin/invertedindex/index/TableRecordInfoDigest.java"}, {"additions": 3, "raw_url": "https://github.com/apache/kylin/raw/efd533fc4e6f1812f09f39dd0211ba697fb88d1a/metadata/src/main/java/org/apache/kylin/metadata/model/TableDesc.java", "blob_url": "https://github.com/apache/kylin/blob/efd533fc4e6f1812f09f39dd0211ba697fb88d1a/metadata/src/main/java/org/apache/kylin/metadata/model/TableDesc.java", "sha": "95a1d81f3a8cb3e44d43ea6298e42de35c1d3482", "changes": 5, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/kylin/contents/metadata/src/main/java/org/apache/kylin/metadata/model/TableDesc.java?ref=efd533fc4e6f1812f09f39dd0211ba697fb88d1a", "patch": "@@ -74,6 +74,9 @@ public String getResourcePathV1() {\n     }\n \n     public String getIdentity() {\n+        if (identity == null) {\n+            identity = String.format(\"%s.%s\", this.getDatabase().toUpperCase(), this.getName()).toUpperCase();\n+        }\n         return identity;\n     }\n \n@@ -157,8 +160,6 @@ public int compare(ColumnDesc col1, ColumnDesc col2) {\n                 col.init(this);\n             }\n         }\n-\n-        this.identity = String.format(\"%s.%s\", this.getDatabase().toUpperCase(), this.getName()).toUpperCase();\n     }\n \n     @Override", "filename": "metadata/src/main/java/org/apache/kylin/metadata/model/TableDesc.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/089b200e5123e1685de15eb95a67bee0d075658a", "parent": "https://github.com/apache/kylin/commit/3e0abe49bf80651965060cef4a3e5188011000df", "message": "fix npe", "bug_id": "kylin_56", "file": [{"additions": 18, "raw_url": "https://github.com/apache/kylin/raw/089b200e5123e1685de15eb95a67bee0d075658a/storage/src/main/java/org/apache/kylin/storage/hbase/coprocessor/endpoint/HbaseServerKVIterator.java", "blob_url": "https://github.com/apache/kylin/blob/089b200e5123e1685de15eb95a67bee0d075658a/storage/src/main/java/org/apache/kylin/storage/hbase/coprocessor/endpoint/HbaseServerKVIterator.java", "sha": "d6c8c2902564c8d129e808f44fb3ba5f51284a32", "changes": 31, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/kylin/contents/storage/src/main/java/org/apache/kylin/storage/hbase/coprocessor/endpoint/HbaseServerKVIterator.java?ref=089b200e5123e1685de15eb95a67bee0d075658a", "patch": "@@ -22,18 +22,15 @@\n import org.apache.commons.io.IOUtils;\n import org.apache.hadoop.hbase.Cell;\n import org.apache.hadoop.hbase.regionserver.RegionScanner;\n-import org.apache.kylin.common.util.BytesUtil;\n-import org.apache.kylin.invertedindex.index.TableRecordInfoDigest;\n-import org.apache.kylin.invertedindex.model.IIDesc;\n import org.apache.kylin.invertedindex.model.IIRow;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import java.io.Closeable;\n import java.io.IOException;\n-import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.NoSuchElementException;\n \n /**\n  * Created by honma on 11/10/14.\n@@ -56,32 +53,40 @@ public void close() throws IOException {\n \n         private final RegionScanner regionScanner;\n         private final IIRow row = new IIRow();\n-        private boolean hasMore = true;\n         List<Cell> results = Lists.newArrayList();\n \n+        private boolean hasMore;\n+\n         IIRowIterator(RegionScanner innerScanner) {\n             this.regionScanner = innerScanner;\n+            try {\n+                hasMore = regionScanner.nextRaw(results);\n+            } catch (IOException e) {\n+                throw new RuntimeException(e);\n+            }\n         }\n \n         @Override\n         public boolean hasNext() {\n-            return hasMore;\n+            return !results.isEmpty();\n         }\n \n         @Override\n         public IIRow next() {\n-            results.clear();\n-            try {\n-                hasMore = regionScanner.next(results);\n-            } catch (IOException e) {\n-                throw new RuntimeException(e);\n-            }\n             if (results.size() < 1) {\n-                throw new IllegalStateException(\"Hbase row contains less than 1 cell\");\n+                throw new NoSuchElementException();\n             }\n             for (Cell c : results) {\n                 row.updateWith(c);\n             }\n+            results.clear();\n+            try {\n+                if (hasMore) {\n+                    hasMore = regionScanner.next(results);\n+                }\n+            } catch (IOException e) {\n+                throw new RuntimeException(e);\n+            }\n             return row;\n         }\n ", "filename": "storage/src/main/java/org/apache/kylin/storage/hbase/coprocessor/endpoint/HbaseServerKVIterator.java"}, {"additions": 2, "raw_url": "https://github.com/apache/kylin/raw/089b200e5123e1685de15eb95a67bee0d075658a/streaming/src/main/java/org/apache/kylin/streaming/KafkaRequester.java", "blob_url": "https://github.com/apache/kylin/blob/089b200e5123e1685de15eb95a67bee0d075658a/streaming/src/main/java/org/apache/kylin/streaming/KafkaRequester.java", "sha": "76f152855145df71902cf7708aa38cd168c106e9", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/streaming/src/main/java/org/apache/kylin/streaming/KafkaRequester.java?ref=089b200e5123e1685de15eb95a67bee0d075658a", "patch": "@@ -76,7 +76,8 @@ private static SimpleConsumer getSimpleConsumer(Broker broker, int timeout, int\n         if (consumerCache.containsKey(key)) {\n             return consumerCache.get(key);\n         } else {\n-            return consumerCache.putIfAbsent(key, new SimpleConsumer(broker.host(), broker.port(), timeout, bufferSize, clientId));\n+            consumerCache.putIfAbsent(key, new SimpleConsumer(broker.host(), broker.port(), timeout, bufferSize, clientId));\n+            return consumerCache.get(key);\n         }\n     }\n ", "filename": "streaming/src/main/java/org/apache/kylin/streaming/KafkaRequester.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/cdd1bfd4628c16aa95e26a6cbb7433f6eda69a8e", "parent": "https://github.com/apache/kylin/commit/5432f0449dee5ae9b339d5a6fa0bda03a452ead1", "message": "fix NPE", "bug_id": "kylin_57", "file": [{"additions": 2, "raw_url": "https://github.com/apache/kylin/raw/cdd1bfd4628c16aa95e26a6cbb7433f6eda69a8e/invertedindex/src/main/java/org/apache/kylin/invertedindex/model/IIDesc.java", "blob_url": "https://github.com/apache/kylin/blob/cdd1bfd4628c16aa95e26a6cbb7433f6eda69a8e/invertedindex/src/main/java/org/apache/kylin/invertedindex/model/IIDesc.java", "sha": "cda3c4d64237c296c2bf6cb64e5c1fb143f4ce36", "changes": 7, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/kylin/contents/invertedindex/src/main/java/org/apache/kylin/invertedindex/model/IIDesc.java?ref=cdd1bfd4628c16aa95e26a6cbb7433f6eda69a8e", "patch": "@@ -20,10 +20,7 @@\n \n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n-import java.util.ArrayList;\n-import java.util.BitSet;\n-import java.util.HashSet;\n-import java.util.List;\n+import java.util.*;\n \n import org.apache.commons.net.util.Base64;\n import org.apache.hadoop.hbase.util.Bytes;\n@@ -68,7 +65,7 @@\n     @JsonProperty(\"timestamp_dimension\")\n     private String timestampDimension;\n     @JsonProperty(\"bitmap_dimensions\")\n-    private List<DimensionDesc> bitmapDimensions;\n+    private List<DimensionDesc> bitmapDimensions = Collections.emptyList();\n     @JsonProperty(\"value_dimensions\")\n     private List<DimensionDesc> valueDimensions;\n     @JsonProperty(\"metrics\")", "filename": "invertedindex/src/main/java/org/apache/kylin/invertedindex/model/IIDesc.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/3cf6703394712289e2739eff3ca73ea9880544f4", "parent": "https://github.com/apache/kylin/commit/7e127a60852767ce00294e7af60ee4471acd351b", "message": "KYLIN-838 fix NPE", "bug_id": "kylin_58", "file": [{"additions": 1, "raw_url": "https://github.com/apache/kylin/raw/3cf6703394712289e2739eff3ca73ea9880544f4/common/src/main/java/org/apache/kylin/common/persistence/HBaseResourceStore.java", "blob_url": "https://github.com/apache/kylin/blob/3cf6703394712289e2739eff3ca73ea9880544f4/common/src/main/java/org/apache/kylin/common/persistence/HBaseResourceStore.java", "sha": "6c5847e8aad78d88e1a715475fef6f805bb9ebe5", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/common/src/main/java/org/apache/kylin/common/persistence/HBaseResourceStore.java?ref=3cf6703394712289e2739eff3ca73ea9880544f4", "patch": "@@ -134,7 +134,7 @@ protected boolean existsImpl(String resPath) throws IOException {\n     @Override\r\n     protected List<RawResource> getAllResources(String rangeStart, String rangeEnd) throws IOException {\r\n         byte[] startRow = Bytes.toBytes(rangeStart);\r\n-        byte[] endRow = Bytes.toBytes(rangeEnd);\r\n+        byte[] endRow = plusZero(Bytes.toBytes(rangeEnd));\r\n \r\n         Scan scan = new Scan(startRow, endRow);\r\n         scan.addColumn(B_FAMILY, B_COLUMN_TS);\r", "filename": "common/src/main/java/org/apache/kylin/common/persistence/HBaseResourceStore.java"}, {"additions": 2, "raw_url": "https://github.com/apache/kylin/raw/3cf6703394712289e2739eff3ca73ea9880544f4/job/src/main/java/org/apache/kylin/job/dao/ExecutableDao.java", "blob_url": "https://github.com/apache/kylin/blob/3cf6703394712289e2739eff3ca73ea9880544f4/job/src/main/java/org/apache/kylin/job/dao/ExecutableDao.java", "sha": "4862bb14fe988eb9eb694f14c8a1604a43016a92", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/kylin/contents/job/src/main/java/org/apache/kylin/job/dao/ExecutableDao.java?ref=3cf6703394712289e2739eff3ca73ea9880544f4", "patch": "@@ -98,7 +98,7 @@ private long writeJobOutputResource(String path, ExecutableOutputPO output) thro\n     public List<ExecutableOutputPO> getJobOutputs() throws PersistentException {\n         try {\n             ArrayList<String> resources = store.listResources(JOB_OUTPUT_ROOT);\n-            if (resources == null) {\n+            if (resources == null || resources.isEmpty()) {\n                 return Collections.emptyList();\n             }\n             Collections.sort(resources);\n@@ -114,7 +114,7 @@ private long writeJobOutputResource(String path, ExecutableOutputPO output) thro\n     public List<ExecutablePO> getJobs() throws PersistentException {\n         try {\n             final List<String> jobIds = store.listResources(JOB_PATH_ROOT);\n-            if (jobIds.isEmpty()) {\n+            if (jobIds == null || jobIds.isEmpty()) {\n                 return Collections.emptyList();\n             }\n             Collections.sort(jobIds);", "filename": "job/src/main/java/org/apache/kylin/job/dao/ExecutableDao.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/5ec65be735ce0f0581859da326df50a1fcc79bb6", "parent": "https://github.com/apache/kylin/commit/81b2914919e856070708120eae01da598cd6bcd6", "message": "fix NPE", "bug_id": "kylin_59", "file": [{"additions": 3, "raw_url": "https://github.com/apache/kylin/raw/5ec65be735ce0f0581859da326df50a1fcc79bb6/server/src/main/java/com/kylinolap/rest/service/JobService.java", "blob_url": "https://github.com/apache/kylin/blob/5ec65be735ce0f0581859da326df50a1fcc79bb6/server/src/main/java/com/kylinolap/rest/service/JobService.java", "sha": "5b4ddf0aa09c2d0817b54e2fcccd58880e805666", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server/src/main/java/com/kylinolap/rest/service/JobService.java?ref=5ec65be735ce0f0581859da326df50a1fcc79bb6", "patch": "@@ -156,6 +156,9 @@ public JobInstance getJobInstance(String uuid) throws IOException, JobException\n     }\n \n     private JobInstance parseToJobInstance(AbstractExecutable job) {\n+        if (job == null) {\n+            return null;\n+        }\n         Preconditions.checkState(job instanceof CubingJob, \"illegal job type, id:\" + job.getId());\n         CubingJob cubeJob = (CubingJob) job;\n         final JobInstance result = new JobInstance();", "filename": "server/src/main/java/com/kylinolap/rest/service/JobService.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/781588a3845250df7000439a5dd3db06c726b7bf", "parent": "https://github.com/apache/kylin/commit/6fd43046382d0d445979b176abda8f17084d935c", "message": "fix NPE", "bug_id": "kylin_60", "file": [{"additions": 3, "raw_url": "https://github.com/apache/kylin/raw/781588a3845250df7000439a5dd3db06c726b7bf/job/src/main/java/com/kylinolap/job2/service/ExecutableManager.java", "blob_url": "https://github.com/apache/kylin/blob/781588a3845250df7000439a5dd3db06c726b7bf/job/src/main/java/com/kylinolap/job2/service/ExecutableManager.java", "sha": "2c9f21bfe04bdf8c0a591ba3392bead668d1965c", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/job/src/main/java/com/kylinolap/job2/service/ExecutableManager.java?ref=781588a3845250df7000439a5dd3db06c726b7bf", "patch": "@@ -291,6 +291,9 @@ private JobPO getJobPO(AbstractExecutable executable) {\n     }\n \n     private AbstractExecutable parseTo(JobPO jobPO) {\n+        if (jobPO == null) {\n+            return null;\n+        }\n         String type = jobPO.getType();\n         try {\n             Class<? extends AbstractExecutable> clazz = (Class<? extends AbstractExecutable>) Class.forName(type);", "filename": "job/src/main/java/com/kylinolap/job2/service/ExecutableManager.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/37e45b0311707fc76358d3efd454be012b1fa288", "parent": "https://github.com/apache/kylin/commit/ebbc42589aae647e7fb572a89861f097aebe10ae", "message": "fix NPE", "bug_id": "kylin_61", "file": [{"additions": 12, "raw_url": "https://github.com/apache/kylin/raw/37e45b0311707fc76358d3efd454be012b1fa288/job/src/main/java/com/kylinolap/job/cmd/JavaHadoopCmdOutput.java", "blob_url": "https://github.com/apache/kylin/blob/37e45b0311707fc76358d3efd454be012b1fa288/job/src/main/java/com/kylinolap/job/cmd/JavaHadoopCmdOutput.java", "sha": "c3f9236cd91b281134f42f9da90f6274b2ab3020", "changes": 16, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/kylin/contents/job/src/main/java/com/kylinolap/job/cmd/JavaHadoopCmdOutput.java?ref=37e45b0311707fc76358d3efd454be012b1fa288", "patch": "@@ -18,6 +18,7 @@\n \n import java.util.Map;\n \n+import org.apache.hadoop.mapreduce.Counters;\n import org.apache.hadoop.mapreduce.TaskCounter;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -159,16 +160,23 @@ private void updateHadoopJobInfo() {\n \n     private void updateJobCounter() {\n         try {\n-            this.output.append(job.getCounters().toString()).append(\"\\n\");\n-            log.debug(job.getCounters().toString());\n+            Counters counters = job.getCounters();\n+            if (counters == null) {\n+                String errorMsg = \"no counters for job \" + mrJobID;\n+                log.warn(errorMsg);\n+                output.append(errorMsg);\n+                return;\n+            }\n+            this.output.append(counters.toString()).append(\"\\n\");\n+            log.debug(counters.toString());\n \n             JobDAO jobDAO = JobDAO.getInstance(config);\n             JobInstance jobInstance = jobDAO.getJob(jobInstanceID);\n             JobStep jobStep = jobInstance.getSteps().get(jobStepID);\n \n-            long mapInputRecords = job.getCounters().findCounter(TaskCounter.MAP_INPUT_RECORDS).getValue();\n+            long mapInputRecords = counters.findCounter(TaskCounter.MAP_INPUT_RECORDS).getValue();\n             jobStep.putInfo(JobInstance.SOURCE_RECORDS_COUNT, String.valueOf(mapInputRecords));\n-            long hdfsBytesWritten = job.getCounters().findCounter(\"FileSystemCounters\", \"HDFS_BYTES_WRITTEN\").getValue();\n+            long hdfsBytesWritten = counters.findCounter(\"FileSystemCounters\", \"HDFS_BYTES_WRITTEN\").getValue();\n             jobStep.putInfo(JobInstance.HDFS_BYTES_WRITTEN, String.valueOf(hdfsBytesWritten));\n \n             jobDAO.updateJobInstance(jobInstance);", "filename": "job/src/main/java/com/kylinolap/job/cmd/JavaHadoopCmdOutput.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/8a2e128c12460d63e581ceef182f9b287da623d6", "parent": "https://github.com/apache/kylin/commit/aad62c256ece98ee33cc9cdc9462f44b3a353ec9", "message": "KYLIN-901 fix a NPE", "bug_id": "kylin_62", "file": [{"additions": 24, "raw_url": "https://github.com/apache/kylin/raw/8a2e128c12460d63e581ceef182f9b287da623d6/job/src/main/java/org/apache/kylin/job/hadoop/cube/MetadataCleanupJob.java", "blob_url": "https://github.com/apache/kylin/blob/8a2e128c12460d63e581ceef182f9b287da623d6/job/src/main/java/org/apache/kylin/job/hadoop/cube/MetadataCleanupJob.java", "sha": "8b842770621273c02349cfbe627c7670d9e85c3f", "changes": 44, "status": "modified", "deletions": 20, "contents_url": "https://api.github.com/repos/apache/kylin/contents/job/src/main/java/org/apache/kylin/job/hadoop/cube/MetadataCleanupJob.java?ref=8a2e128c12460d63e581ceef182f9b287da623d6", "patch": "@@ -107,33 +107,37 @@ public void cleanup() throws Exception {\n         for (String resourceRoot : new String[]{ResourceStore.SNAPSHOT_RESOURCE_ROOT}) {\n             ArrayList<String> snapshotTables = getStore().listResources(resourceRoot);\n \n-            for (String snapshotTable : snapshotTables) {\n-                ArrayList<String> snapshotNames = getStore().listResources(snapshotTable);\n-                if (snapshotNames != null)\n-                    for (String snapshot : snapshotNames) {\n-                        if (!activeResourceList.contains(snapshot)) {\n-                            if (isOlderThanThreshold(getStore().getResourceTimestamp(snapshot)))\n-                                toDeleteResource.add(snapshot);\n+            if (snapshotTables != null) {\n+                for (String snapshotTable : snapshotTables) {\n+                    ArrayList<String> snapshotNames = getStore().listResources(snapshotTable);\n+                    if (snapshotNames != null)\n+                        for (String snapshot : snapshotNames) {\n+                            if (!activeResourceList.contains(snapshot)) {\n+                                if (isOlderThanThreshold(getStore().getResourceTimestamp(snapshot)))\n+                                    toDeleteResource.add(snapshot);\n+                            }\n                         }\n-                    }\n+                }\n             }\n         }\n \n         // three level resources, only dictionaries\n         ArrayList<String> dictTables = getStore().listResources(ResourceStore.DICT_RESOURCE_ROOT);\n \n-        for (String table : dictTables) {\n-            ArrayList<String> tableColNames = getStore().listResources(table);\n-            if (tableColNames != null)\n-                for (String tableCol : tableColNames) {\n-                    ArrayList<String> dictionaries = getStore().listResources(tableCol);\n-                    if (dictionaries != null)\n-                        for (String dict : dictionaries)\n-                            if (!activeResourceList.contains(dict)) {\n-                                if (isOlderThanThreshold(getStore().getResourceTimestamp(dict)))\n-                                    toDeleteResource.add(dict);\n-                            }\n-                }\n+        if (dictTables != null) {\n+            for (String table : dictTables) {\n+                ArrayList<String> tableColNames = getStore().listResources(table);\n+                if (tableColNames != null)\n+                    for (String tableCol : tableColNames) {\n+                        ArrayList<String> dictionaries = getStore().listResources(tableCol);\n+                        if (dictionaries != null)\n+                            for (String dict : dictionaries)\n+                                if (!activeResourceList.contains(dict)) {\n+                                    if (isOlderThanThreshold(getStore().getResourceTimestamp(dict)))\n+                                        toDeleteResource.add(dict);\n+                                }\n+                    }\n+            }\n         }\n \n ", "filename": "job/src/main/java/org/apache/kylin/job/hadoop/cube/MetadataCleanupJob.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/cc1ca2d32b508a758bd85d3da58006d70eeb9104", "parent": "https://github.com/apache/kylin/commit/d8fcfeac84f4fce4217ec955d0cfbd7303332e4c", "message": "KYLIN-901 fix a NPE", "bug_id": "kylin_63", "file": [{"additions": 10, "raw_url": "https://github.com/apache/kylin/raw/cc1ca2d32b508a758bd85d3da58006d70eeb9104/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MetadataCleanupJob.java", "blob_url": "https://github.com/apache/kylin/blob/cc1ca2d32b508a758bd85d3da58006d70eeb9104/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MetadataCleanupJob.java", "sha": "43bdf6ef3f5fa2051f533eaf0cdcfc9130b7cf28", "changes": 18, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MetadataCleanupJob.java?ref=cc1ca2d32b508a758bd85d3da58006d70eeb9104", "patch": "@@ -111,15 +111,17 @@ public void cleanup() throws Exception {\n         for (String resourceRoot : new String[]{ResourceStore.SNAPSHOT_RESOURCE_ROOT, ResourceStore.CUBE_STATISTICS_ROOT}) {\n             ArrayList<String> snapshotTables = getStore().listResources(resourceRoot);\n \n-            for (String snapshotTable : snapshotTables) {\n-                ArrayList<String> snapshotNames = getStore().listResources(snapshotTable);\n-                if (snapshotNames != null)\n-                    for (String snapshot : snapshotNames) {\n-                        if (!activeResourceList.contains(snapshot)) {\n-                            if (isOlderThanThreshold(getStore().getResourceTimestamp(snapshot)))\n-                                toDeleteResource.add(snapshot);\n+            if (snapshotTables != null) {\n+                for (String snapshotTable : snapshotTables) {\n+                    ArrayList<String> snapshotNames = getStore().listResources(snapshotTable);\n+                    if (snapshotNames != null)\n+                        for (String snapshot : snapshotNames) {\n+                            if (!activeResourceList.contains(snapshot)) {\n+                                if (isOlderThanThreshold(getStore().getResourceTimestamp(snapshot)))\n+                                    toDeleteResource.add(snapshot);\n+                            }\n                         }\n-                    }\n+                }\n             }\n         }\n ", "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MetadataCleanupJob.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/444302b2afe05940ec8fed43f437d8cd1ffbf62c", "parent": "https://github.com/apache/kylin/commit/96bd3c455ffb2fd37466bd4cfc0ce9a5866925d3", "message": "KYLIN-1581 NPE in Job engine when execute MR job", "bug_id": "kylin_64", "file": [{"additions": 1, "raw_url": "https://github.com/apache/kylin/raw/444302b2afe05940ec8fed43f437d8cd1ffbf62c/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/MapReduceExecutable.java", "blob_url": "https://github.com/apache/kylin/blob/444302b2afe05940ec8fed43f437d8cd1ffbf62c/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/MapReduceExecutable.java", "sha": "19d888cf09b6b3d0307199cab6726857f8614fd0", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/MapReduceExecutable.java?ref=444302b2afe05940ec8fed43f437d8cd1ffbf62c", "patch": "@@ -74,7 +74,7 @@ protected void onExecuteStart(ExecutableContext executableContext) {\n             try {\n                 Configuration conf = HadoopUtil.getCurrentConfiguration();\n                 Job job = new Cluster(conf).getJob(JobID.forName(mrJobId));\n-                if (job.getJobState() == JobStatus.State.FAILED) {\n+                if (job == null || job.getJobState() == JobStatus.State.FAILED) {\n                     //remove previous mr job info\n                     super.onExecuteStart(executableContext);\n                 } else {", "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/common/MapReduceExecutable.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/2472fc86916db3c45ab9c730b0e8fe81144cbb6f", "parent": "https://github.com/apache/kylin/commit/79114d7d39c52b34adf28679c996b7fbf70a96cc", "message": "minor, fix a NPE in SnapshotTable.equals()", "bug_id": "kylin_65", "file": [{"additions": 2, "raw_url": "https://github.com/apache/kylin/raw/2472fc86916db3c45ab9c730b0e8fe81144cbb6f/dictionary/src/main/java/org/apache/kylin/dict/lookup/SnapshotTable.java", "blob_url": "https://github.com/apache/kylin/blob/2472fc86916db3c45ab9c730b0e8fe81144cbb6f/dictionary/src/main/java/org/apache/kylin/dict/lookup/SnapshotTable.java", "sha": "96a7cd6dbec78e11a5d5ca4cdc5106f447fd377c", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/dictionary/src/main/java/org/apache/kylin/dict/lookup/SnapshotTable.java?ref=2472fc86916db3c45ab9c730b0e8fe81144cbb6f", "patch": "@@ -23,6 +23,7 @@\n import java.io.IOException;\r\n import java.util.ArrayList;\r\n import java.util.Arrays;\r\n+import java.util.Collections;\r\n import java.util.List;\r\n \r\n import org.apache.commons.lang.ArrayUtils;\r\n@@ -50,7 +51,7 @@\n     @JsonProperty(\"useDictionary\")\r\n     private boolean useDictionary;\r\n \r\n-    private ArrayList<int[]> rowIndices;\r\n+    private List<int[]> rowIndices = Collections.emptyList();\r\n     private Dictionary<String> dict;\r\n \r\n     // default constructor for JSON serialization\r", "filename": "dictionary/src/main/java/org/apache/kylin/dict/lookup/SnapshotTable.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/b87db176411870a281c66f99e197fceb8cb93946", "parent": "https://github.com/apache/kylin/commit/e6bac5f29cefe5b0c45a87872dfe48363988de07", "message": "minor, fix NPE in CubingJob.formatNotifications()", "bug_id": "kylin_66", "file": [{"additions": 1, "raw_url": "https://github.com/apache/kylin/raw/b87db176411870a281c66f99e197fceb8cb93946/job/src/main/java/org/apache/kylin/job/cube/CubingJob.java", "blob_url": "https://github.com/apache/kylin/blob/b87db176411870a281c66f99e197fceb8cb93946/job/src/main/java/org/apache/kylin/job/cube/CubingJob.java", "sha": "182196c1e50937a8166cb3543622cc9395e95e36", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/job/src/main/java/org/apache/kylin/job/cube/CubingJob.java?ref=b87db176411870a281c66f99e197fceb8cb93946", "patch": "@@ -87,7 +87,7 @@ public String getSegmentIds() {\n         content = content.replaceAll(\"\\\\$\\\\{job_name\\\\}\", getName());\n         content = content.replaceAll(\"\\\\$\\\\{result\\\\}\", state.toString());\n         content = content.replaceAll(\"\\\\$\\\\{cube_name\\\\}\", getCubeName());\n-        content = content.replaceAll(\"\\\\$\\\\{source_records_count\\\\}\", getSourceRecordCount());\n+        content = content.replaceAll(\"\\\\$\\\\{source_records_count\\\\}\", StringUtil.noBlank(getSourceRecordCount(), \"0\"));\n         content = content.replaceAll(\"\\\\$\\\\{start_time\\\\}\", new Date(getStartTime()).toString());\n         content = content.replaceAll(\"\\\\$\\\\{duration\\\\}\", getDuration() / 60000 + \"mins\");\n         content = content.replaceAll(\"\\\\$\\\\{mr_waiting\\\\}\", getMapReduceWaitTime() / 60000 + \"mins\");", "filename": "job/src/main/java/org/apache/kylin/job/cube/CubingJob.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/e2c688d5419d77658e03ad11e37a75dc771a9005", "parent": "https://github.com/apache/kylin/commit/18e43e0aca2b0c6a306f5cb2f0198d4a04215d50", "message": "minor, fix NPE in CubingJob.formatNotifications()", "bug_id": "kylin_67", "file": [{"additions": 4, "raw_url": "https://github.com/apache/kylin/raw/e2c688d5419d77658e03ad11e37a75dc771a9005/core-common/src/main/java/org/apache/kylin/common/util/StringUtil.java", "blob_url": "https://github.com/apache/kylin/blob/e2c688d5419d77658e03ad11e37a75dc771a9005/core-common/src/main/java/org/apache/kylin/common/util/StringUtil.java", "sha": "249726ff02270f1c6d88c04e66aded1c70cf735c", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-common/src/main/java/org/apache/kylin/common/util/StringUtil.java?ref=e2c688d5419d77658e03ad11e37a75dc771a9005", "patch": "@@ -67,6 +67,10 @@ public static void toUpperCaseArray(String[] source, String[] target) {\n         }\n     }\n \n+    public static String noBlank(String str, String dft) {\n+        return StringUtils.isBlank(str) ? dft : str;\n+    }\n+    \n     public static String dropSuffix(String str, String suffix) {\n         if (str.endsWith(suffix))\n             return str.substring(0, str.length() - suffix.length());", "filename": "core-common/src/main/java/org/apache/kylin/common/util/StringUtil.java"}, {"additions": 3, "raw_url": "https://github.com/apache/kylin/raw/e2c688d5419d77658e03ad11e37a75dc771a9005/engine-mr/src/main/java/org/apache/kylin/engine/mr/CubingJob.java", "blob_url": "https://github.com/apache/kylin/blob/e2c688d5419d77658e03ad11e37a75dc771a9005/engine-mr/src/main/java/org/apache/kylin/engine/mr/CubingJob.java", "sha": "bee030f98eebbb49096c25af712a14a7113b90c6", "changes": 8, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/CubingJob.java?ref=e2c688d5419d77658e03ad11e37a75dc771a9005", "patch": "@@ -29,6 +29,7 @@\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.kylin.common.util.StringUtil;\n import org.apache.kylin.cube.CubeInstance;\n import org.apache.kylin.cube.CubeManager;\n import org.apache.kylin.cube.CubeSegment;\n@@ -122,9 +123,6 @@ public String getSegmentIds() {\n         default:\n             return null;\n         }\n-        if (logMsg == null) {\n-            logMsg = \"no error message\";\n-        }\n         String content = ExecutableConstants.NOTIFY_EMAIL_TEMPLATE;\n         content = content.replaceAll(\"\\\\$\\\\{job_name\\\\}\", getName());\n         content = content.replaceAll(\"\\\\$\\\\{result\\\\}\", state.toString());\n@@ -134,8 +132,8 @@ public String getSegmentIds() {\n         content = content.replaceAll(\"\\\\$\\\\{duration\\\\}\", getDuration() / 60000 + \"mins\");\n         content = content.replaceAll(\"\\\\$\\\\{mr_waiting\\\\}\", getMapReduceWaitTime() / 60000 + \"mins\");\n         content = content.replaceAll(\"\\\\$\\\\{last_update_time\\\\}\", new Date(getLastModified()).toString());\n-        content = content.replaceAll(\"\\\\$\\\\{submitter\\\\}\", getSubmitter());\n-        content = content.replaceAll(\"\\\\$\\\\{error_log\\\\}\", logMsg);\n+        content = content.replaceAll(\"\\\\$\\\\{submitter\\\\}\", StringUtil.noBlank(getSubmitter(), \"missing submitter\"));\n+        content = content.replaceAll(\"\\\\$\\\\{error_log\\\\}\", StringUtil.noBlank(logMsg, \"no error message\"));\n \n         try {\n             InetAddress inetAddress = InetAddress.getLocalHost();", "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/CubingJob.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/81750e2e1b86ffd6275a05a528ef53fa064aed23", "parent": "https://github.com/apache/kylin/commit/279430a861c431d9680bd09b2c6087c7711e5503", "message": "minor, fix NPE in CubingJob.formatNotifications()", "bug_id": "kylin_68", "file": [{"additions": 7, "raw_url": "https://github.com/apache/kylin/raw/81750e2e1b86ffd6275a05a528ef53fa064aed23/common/src/main/java/org/apache/kylin/common/util/StringUtil.java", "blob_url": "https://github.com/apache/kylin/blob/81750e2e1b86ffd6275a05a528ef53fa064aed23/common/src/main/java/org/apache/kylin/common/util/StringUtil.java", "sha": "dbf338056be51d87dc2e32ac39c25dc213cdfcf5", "changes": 8, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/common/src/main/java/org/apache/kylin/common/util/StringUtil.java?ref=81750e2e1b86ffd6275a05a528ef53fa064aed23", "patch": "@@ -21,6 +21,8 @@\n import java.util.ArrayList;\n import java.util.Collection;\n \n+import org.apache.commons.lang.StringUtils;\n+\n /**\n  * Created with IntelliJ IDEA. User: lukhan Date: 12/2/13 Time: 11:43 AM To\n  * change this template use File | Settings | File Templates.\n@@ -56,7 +58,11 @@ public static void toUpperCaseArray(String[] source, String[] target) {\n             }\n         }\n     }\n-\n+    \n+    public static String noBlank(String str, String dft) {\n+        return StringUtils.isBlank(str) ? dft : str;\n+    }\n+    \n     public static String dropSuffix(String str, String suffix) {\n         if (str.endsWith(suffix))\n             return str.substring(0, str.length() - suffix.length());", "filename": "common/src/main/java/org/apache/kylin/common/util/StringUtil.java"}, {"additions": 3, "raw_url": "https://github.com/apache/kylin/raw/81750e2e1b86ffd6275a05a528ef53fa064aed23/job/src/main/java/org/apache/kylin/job/cube/CubingJob.java", "blob_url": "https://github.com/apache/kylin/blob/81750e2e1b86ffd6275a05a528ef53fa064aed23/job/src/main/java/org/apache/kylin/job/cube/CubingJob.java", "sha": "760a6c32e6cc4bd73c6cb4539b6f53b6e849533c", "changes": 5, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/kylin/contents/job/src/main/java/org/apache/kylin/job/cube/CubingJob.java?ref=81750e2e1b86ffd6275a05a528ef53fa064aed23", "patch": "@@ -25,6 +25,7 @@\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.kylin.common.util.StringUtil;\n import org.apache.kylin.job.common.MapReduceExecutable;\n import org.apache.kylin.job.constant.ExecutableConstants;\n import org.apache.kylin.job.execution.AbstractExecutable;\n@@ -91,8 +92,8 @@ public String getSegmentIds() {\n         content = content.replaceAll(\"\\\\$\\\\{duration\\\\}\", getDuration() / 60000 + \"mins\");\n         content = content.replaceAll(\"\\\\$\\\\{mr_waiting\\\\}\", getMapReduceWaitTime() / 60000 + \"mins\");\n         content = content.replaceAll(\"\\\\$\\\\{last_update_time\\\\}\", new Date(getLastModified()).toString());\n-        content = content.replaceAll(\"\\\\$\\\\{submitter\\\\}\", getSubmitter());\n-        content = content.replaceAll(\"\\\\$\\\\{error_log\\\\}\", logMsg);\n+        content = content.replaceAll(\"\\\\$\\\\{submitter\\\\}\", StringUtil.noBlank(getSubmitter(), \"missing submitter\"));\n+        content = content.replaceAll(\"\\\\$\\\\{error_log\\\\}\", StringUtil.noBlank(logMsg, \"no error log\"));\n \n         try {\n             InetAddress inetAddress = InetAddress.getLocalHost();", "filename": "job/src/main/java/org/apache/kylin/job/cube/CubingJob.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/023866b0cc57632a8a90259a0c0073966875fdd3", "parent": "https://github.com/apache/kylin/commit/2d4c5097d37982ca84ff9b9d641fa39c056f1d74", "message": "minor, patch a NPE in CubeService.isCubeInProject() and CubeService.listAllCubes()", "bug_id": "kylin_69", "file": [{"additions": 8, "raw_url": "https://github.com/apache/kylin/raw/023866b0cc57632a8a90259a0c0073966875fdd3/server/src/main/java/org/apache/kylin/rest/service/CubeService.java", "blob_url": "https://github.com/apache/kylin/blob/023866b0cc57632a8a90259a0c0073966875fdd3/server/src/main/java/org/apache/kylin/rest/service/CubeService.java", "sha": "c3a19f6b0785b9554ecb792f2cdb7e7f7c88067d", "changes": 11, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server/src/main/java/org/apache/kylin/rest/service/CubeService.java?ref=023866b0cc57632a8a90259a0c0073966875fdd3", "patch": "@@ -216,8 +216,10 @@ public CubeInstance createCubeAndDesc(String cubeName, String projectName, CubeD\n         for (RealizationEntry projectDataModel : project.getRealizationEntries()) {\n             if (projectDataModel.getType() == RealizationType.CUBE) {\n                 CubeInstance cube = getCubeManager().getCube(projectDataModel.getRealization());\n-                assert cube != null;\n-                result.add(cube);\n+                if (cube != null)\n+                    result.add(cube);\n+                else\n+                    logger.error(\"Cube instance \" + projectDataModel.getRealization() + \" is failed to load\");\n             }\n         }\n         return result;\n@@ -232,7 +234,10 @@ private boolean isCubeInProject(String projectName, CubeInstance target) {\n         for (RealizationEntry projectDataModel : project.getRealizationEntries()) {\n             if (projectDataModel.getType() == RealizationType.CUBE) {\n                 CubeInstance cube = getCubeManager().getCube(projectDataModel.getRealization());\n-                assert cube != null;\n+                if (cube == null) {\n+                    logger.error(\"Project \" + projectName + \" contains realization \" + projectDataModel.getRealization() + \" which is not found by CubeManager\");\n+                    continue;\n+                }\n                 if (cube.equals(target)) {\n                     return true;\n                 }", "filename": "server/src/main/java/org/apache/kylin/rest/service/CubeService.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/6ed1e19563f7ce0d80bc5fed8f52bb94b5592995", "parent": "https://github.com/apache/kylin/commit/5f008ec27538214945fc95e918a6441c8ab82dc1", "message": "Fix a NPE in sending email notification;", "bug_id": "kylin_70", "file": [{"additions": 1, "raw_url": "https://github.com/apache/kylin/raw/6ed1e19563f7ce0d80bc5fed8f52bb94b5592995/job/src/main/java/org/apache/kylin/job/cube/CubingJob.java", "blob_url": "https://github.com/apache/kylin/blob/6ed1e19563f7ce0d80bc5fed8f52bb94b5592995/job/src/main/java/org/apache/kylin/job/cube/CubingJob.java", "sha": "cd40b9e03eb249afd0895b842433d0f5fd574dd6", "changes": 4, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/kylin/contents/job/src/main/java/org/apache/kylin/job/cube/CubingJob.java?ref=6ed1e19563f7ce0d80bc5fed8f52bb94b5592995", "patch": "@@ -70,16 +70,14 @@ public String getSegmentIds() {\n     @Override\n     protected Pair<String, String> formatNotifications(ExecutableState state) {\n         final Output output = jobService.getOutput(getId());\n-        String logMsg;\n+        String logMsg = \"\";\n         switch (output.getState()) {\n         case ERROR:\n             logMsg = output.getVerboseMsg();\n             break;\n         case DISCARDED:\n-            logMsg = \"\";\n             break;\n         case SUCCEED:\n-            logMsg = \"\";\n             break;\n         default:\n             return null;", "filename": "job/src/main/java/org/apache/kylin/job/cube/CubingJob.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/c7bb3640f83ae9f934311654715b0f3f52f8fea6", "parent": "https://github.com/apache/kylin/commit/ddac497a2cf62bccba8618829a03e3be1a030098", "message": "minor, fix concurrent NPE in InMemCubeBuilder", "bug_id": "kylin_71", "file": [{"additions": 12, "raw_url": "https://github.com/apache/kylin/raw/c7bb3640f83ae9f934311654715b0f3f52f8fea6/job/src/main/java/org/apache/kylin/job/inmemcubing/InMemCubeBuilder.java", "blob_url": "https://github.com/apache/kylin/blob/c7bb3640f83ae9f934311654715b0f3f52f8fea6/job/src/main/java/org/apache/kylin/job/inmemcubing/InMemCubeBuilder.java", "sha": "761199cda7146c8937087b4b44fb6f868b9f80eb", "changes": 22, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/kylin/contents/job/src/main/java/org/apache/kylin/job/inmemcubing/InMemCubeBuilder.java?ref=c7bb3640f83ae9f934311654715b0f3f52f8fea6", "patch": "@@ -142,23 +142,25 @@ public void build(BlockingQueue<List<String>> input, ICuboidWriter output) throw\n             cuboidResult.table.close();\n         }\n     }\n-    \n+\n     TreeMap<Long, CuboidResult> build(BlockingQueue<List<String>> input) throws IOException {\n         final TreeMap<Long, CuboidResult> result = new TreeMap<Long, CuboidResult>();\n         ICuboidCollector collector = new ICuboidCollector() {\n             @Override\n             public void collect(CuboidResult cuboidResult) {\n-                result.put(cuboidResult.cuboidId, cuboidResult);\n+                synchronized (result) {\n+                    result.put(cuboidResult.cuboidId, cuboidResult);\n+                }\n             }\n         };\n         build(input, collector);\n         return result;\n     }\n-    \n+\n     static interface ICuboidCollector {\n         public void collect(CuboidResult result);\n     }\n-    \n+\n     static class CuboidResult {\n         public long cuboidId;\n         public GridTable table;\n@@ -207,7 +209,7 @@ private void build(BlockingQueue<List<String>> input, ICuboidCollector collector\n \n         throwExceptionIfAny();\n     }\n-    \n+\n     public void abort() {\n         interrupt(taskThreads);\n     }\n@@ -216,7 +218,7 @@ private void start(Thread... threads) {\n         for (Thread t : threads)\n             t.start();\n     }\n-    \n+\n     private void interrupt(Thread... threads) {\n         for (Thread t : threads)\n             t.interrupt();\n@@ -264,7 +266,7 @@ private void throwExceptionIfAny() throws IOException {\n     public boolean isAllCuboidDone() {\n         return taskCuboidCompleted.get() == totalCuboidCount;\n     }\n-    \n+\n     private class CuboidTaskThread extends Thread {\n         private int id;\n \n@@ -397,10 +399,10 @@ private CuboidResult updateCuboidResult(long cuboidId, GridTable table, int nRow\n         if (aggrCacheMB <= 0) {\n             aggrCacheMB = (int) Math.ceil(1.0 * nRows / baseResult.nRows * baseResult.aggrCacheMB);\n         }\n-        \n+\n         CuboidResult result = new CuboidResult(cuboidId, table, nRows, timeSpent, aggrCacheMB);\n         taskCuboidCompleted.incrementAndGet();\n-        \n+\n         resultCollector.collect(result);\n         return result;\n     }\n@@ -651,6 +653,6 @@ private void buildGTRecord(List<String> row, GTRecord record) {\n         private byte[] toBytes(String v) {\n             return v == null ? null : Bytes.toBytes(v);\n         }\n-        \n+\n     }\n }", "filename": "job/src/main/java/org/apache/kylin/job/inmemcubing/InMemCubeBuilder.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/ddac497a2cf62bccba8618829a03e3be1a030098", "parent": "https://github.com/apache/kylin/commit/eb86239c22bfb292ea854442848a8ee62be16d11", "message": "KYLIN-867 fix a NPE in CacheServiceTest", "bug_id": "kylin_72", "file": [{"additions": 1, "raw_url": "https://github.com/apache/kylin/raw/ddac497a2cf62bccba8618829a03e3be1a030098/examples/test_case_data/localmeta/cube_desc/test_kylin_cube_without_slr_desc.json", "blob_url": "https://github.com/apache/kylin/blob/ddac497a2cf62bccba8618829a03e3be1a030098/examples/test_case_data/localmeta/cube_desc/test_kylin_cube_without_slr_desc.json", "sha": "567a0991148aac7331c8c163e1a2d0ade2738e13", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/examples/test_case_data/localmeta/cube_desc/test_kylin_cube_without_slr_desc.json?ref=ddac497a2cf62bccba8618829a03e3be1a030098", "patch": "@@ -172,7 +172,7 @@\n       \"dictionary\" : \"true\",\n       \"mandatory\" : false\n     } ],\n-    \"aggregation_groups\" : [ [ \"lstg_format_name\", \"lstg_site_id\", \"slr_segment_cd\" ], [ \"leaf_categ_id\", \"meta_categ_name\", \"categ_lvl3_name\", \"categ_lvl2_name\", ] ]\n+    \"aggregation_groups\" : [ [ \"lstg_format_name\", \"lstg_site_id\", \"slr_segment_cd\" ], [ \"leaf_categ_id\", \"meta_categ_name\", \"categ_lvl3_name\", \"categ_lvl2_name\" ] ]\n   },\n   \"last_modified\" : 1422435345362,\n   \"model_name\" : \"test_kylin_inner_join_model_desc\",", "filename": "examples/test_case_data/localmeta/cube_desc/test_kylin_cube_without_slr_desc.json"}, {"additions": 4, "raw_url": "https://github.com/apache/kylin/raw/ddac497a2cf62bccba8618829a03e3be1a030098/server/src/main/java/org/apache/kylin/rest/service/CacheService.java", "blob_url": "https://github.com/apache/kylin/blob/ddac497a2cf62bccba8618829a03e3be1a030098/server/src/main/java/org/apache/kylin/rest/service/CacheService.java", "sha": "14f0a433b28d59110358f0e31278e8b8e5d676f4", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server/src/main/java/org/apache/kylin/rest/service/CacheService.java?ref=ddac497a2cf62bccba8618829a03e3be1a030098", "patch": "@@ -49,7 +49,6 @@\n     @Autowired\n     private CacheUpdater cacheUpdater;\n \n-\n     @Autowired\n     private CubeService cubeService;\n \n@@ -63,6 +62,10 @@ public void initCacheUpdater(CacheUpdater cacheUpdater) {\n         AbstractRestCache.setCacheUpdater(cacheUpdater);\n     }\n \n+    public void setCubeService(CubeService cubeService) {\n+        this.cubeService = cubeService;\n+    }\n+\n     private static final Logger logger = LoggerFactory.getLogger(CacheService.class);\n \n     public void rebuildCache(Broadcaster.TYPE cacheType, String cacheKey) {", "filename": "server/src/main/java/org/apache/kylin/rest/service/CacheService.java"}, {"additions": 2, "raw_url": "https://github.com/apache/kylin/raw/ddac497a2cf62bccba8618829a03e3be1a030098/server/src/main/java/org/apache/kylin/rest/service/CubeService.java", "blob_url": "https://github.com/apache/kylin/blob/ddac497a2cf62bccba8618829a03e3be1a030098/server/src/main/java/org/apache/kylin/rest/service/CubeService.java", "sha": "43ecfd584959553343d68cdfe6a814248ed1cbc9", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server/src/main/java/org/apache/kylin/rest/service/CubeService.java?ref=ddac497a2cf62bccba8618829a03e3be1a030098", "patch": "@@ -76,7 +76,7 @@\n \n     private static final Logger logger = LoggerFactory.getLogger(CubeService.class);\n \n-    private static WeakHashMap<String, HBaseResponse> htableInfoCache = new WeakHashMap<>();\n+    private WeakHashMap<String, HBaseResponse> htableInfoCache = new WeakHashMap<>();\n \n     @Autowired\n     private AccessService accessService;\n@@ -580,7 +580,7 @@ public void mergeCubeOnNewSegmentReady(String cubeName) {\n             CubeSegment newSeg;\n             CubeInstance cube = getCubeManager().getCube(cubeName);\n             if (cube.needAutoMerge()) {\n-                synchronized (CacheService.class) {\n+                synchronized (CubeService.class) {\n                     try {\n                         newSeg = getCubeManager().autoMergeCubeSegments(cube);\n                         if (newSeg != null) {", "filename": "server/src/main/java/org/apache/kylin/rest/service/CubeService.java"}, {"additions": 17, "raw_url": "https://github.com/apache/kylin/raw/ddac497a2cf62bccba8618829a03e3be1a030098/server/src/test/java/org/apache/kylin/rest/service/CacheServiceTest.java", "blob_url": "https://github.com/apache/kylin/blob/ddac497a2cf62bccba8618829a03e3be1a030098/server/src/test/java/org/apache/kylin/rest/service/CacheServiceTest.java", "sha": "8860d223ee8987da935854b21569d1245365ea16", "changes": 17, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server/src/test/java/org/apache/kylin/rest/service/CacheServiceTest.java?ref=ddac497a2cf62bccba8618829a03e3be1a030098", "patch": "@@ -86,8 +86,25 @@ public KylinConfig getConfig() {\n             }\n         };\n \n+\n+        final CubeService cubeServiceA = new CubeService() {\n+            @Override\n+            public KylinConfig getConfig() {\n+                return configA;\n+            }\n+        };\n+        final CubeService cubeServiceB = new CubeService() {\n+            @Override\n+            public KylinConfig getConfig() {\n+                return configB;\n+            }\n+        };\n+\n+\n         serviceA.initCacheUpdater(new RemoteCacheUpdater());\n+        serviceA.setCubeService(cubeServiceA);\n         serviceB.initCacheUpdater(new RemoteCacheUpdater());\n+        serviceB.setCubeService(cubeServiceB);\n \n         context.addServlet(new ServletHolder(new BroadcasterReceiveServlet(new BroadcasterReceiveServlet.BroadcasterHandler() {\n             @Override", "filename": "server/src/test/java/org/apache/kylin/rest/service/CacheServiceTest.java"}, {"additions": 1, "raw_url": "https://github.com/apache/kylin/raw/ddac497a2cf62bccba8618829a03e3be1a030098/storage/src/main/java/org/apache/kylin/storage/hybrid/HybridInstance.java", "blob_url": "https://github.com/apache/kylin/blob/ddac497a2cf62bccba8618829a03e3be1a030098/storage/src/main/java/org/apache/kylin/storage/hybrid/HybridInstance.java", "sha": "fee3bab875e0360da0d19d797fbfb52630581a4e", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/storage/src/main/java/org/apache/kylin/storage/hybrid/HybridInstance.java?ref=ddac497a2cf62bccba8618829a03e3be1a030098", "patch": "@@ -70,7 +70,7 @@ private void init() {\n             for (int i = 0; i < realizationEntries.size(); i++) {\n                 IRealization realization = registry.getRealization(realizationEntries.get(i).getType(), realizationEntries.get(i).getRealization());\n                 if (realization == null) {\n-                    logger.error(\"Realization '\" + realization.getName() + \" is not found, remove from Hybrid '\" + this.getName() + \"'\");\n+                    logger.error(\"Realization '\" + realizationEntries.get(i) + \" is not found, remove from Hybrid '\" + this.getName() + \"'\");\n                     continue;\n                 }\n                 if (realization.isReady() == false) {", "filename": "storage/src/main/java/org/apache/kylin/storage/hybrid/HybridInstance.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/d7cf675541771000ff37f164070a686e61f7fa8f", "parent": "https://github.com/apache/kylin/commit/696fb89aa2eb684408d1009218f80fe323dffd3b", "message": "minor, fix NPE when metastore cleanup\n\nSigned-off-by: shaofengshi <shaofengshi@apache.org>", "bug_id": "kylin_73", "file": [{"additions": 12, "raw_url": "https://github.com/apache/kylin/raw/d7cf675541771000ff37f164070a686e61f7fa8f/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MetadataCleanupJob.java", "blob_url": "https://github.com/apache/kylin/blob/d7cf675541771000ff37f164070a686e61f7fa8f/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MetadataCleanupJob.java", "sha": "f3ab31065200c744a3f7290b7ec772e8776aef75", "changes": 22, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MetadataCleanupJob.java?ref=d7cf675541771000ff37f164070a686e61f7fa8f", "patch": "@@ -122,16 +122,18 @@ public void cleanup() throws Exception {\n         // three level resources, only dictionaries\n         NavigableSet<String> dictTables = getStore().listResources(ResourceStore.DICT_RESOURCE_ROOT);\n \n-        for (String table : dictTables) {\n-            NavigableSet<String> tableColNames = getStore().listResources(table);\n-            if (tableColNames != null)\n-                for (String tableCol : tableColNames) {\n-                    NavigableSet<String> dictionaries = getStore().listResources(tableCol);\n-                    if (dictionaries != null)\n-                        for (String dict : dictionaries)\n-                            if (isOlderThanThreshold(getStore().getResourceTimestamp(dict)))\n-                                toDeleteResource.add(dict);\n-                }\n+        if (dictTables != null) {\n+            for (String table : dictTables) {\n+                NavigableSet<String> tableColNames = getStore().listResources(table);\n+                if (tableColNames != null)\n+                    for (String tableCol : tableColNames) {\n+                        NavigableSet<String> dictionaries = getStore().listResources(tableCol);\n+                        if (dictionaries != null)\n+                            for (String dict : dictionaries)\n+                                if (isOlderThanThreshold(getStore().getResourceTimestamp(dict)))\n+                                    toDeleteResource.add(dict);\n+                    }\n+            }\n         }\n \n         Set<String> activeResourceList = Sets.newHashSet();", "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MetadataCleanupJob.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/8b6d21133aab18b65ae571d9463089283b7dcbe1", "parent": "https://github.com/apache/kylin/commit/5500cbba042975699a98b8ccb75ffb364ae5c199", "message": "KYLIN-875 Fix CI, NPE in DictionaryManager.decideSourceData()", "bug_id": "kylin_74", "file": [{"additions": 1, "raw_url": "https://github.com/apache/kylin/raw/8b6d21133aab18b65ae571d9463089283b7dcbe1/core-common/src/main/java/org/apache/kylin/common/persistence/ResourceStore.java", "blob_url": "https://github.com/apache/kylin/blob/8b6d21133aab18b65ae571d9463089283b7dcbe1/core-common/src/main/java/org/apache/kylin/common/persistence/ResourceStore.java", "sha": "630477b01d3de3b8973480d20ae3890748ea5e6a", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-common/src/main/java/org/apache/kylin/common/persistence/ResourceStore.java?ref=8b6d21133aab18b65ae571d9463089283b7dcbe1", "patch": "@@ -68,7 +68,7 @@\n             try {\n                 knownImpl.add(ClassUtil.forName(\"org.apache.kylin.storage.hbase.HBaseResourceStore\", ResourceStore.class));\n             } catch (Throwable e) {\n-                logger.warn(\"Failed to load ResourceStore impl class\", e);\n+                logger.warn(\"Failed to load ResourceStore impl class: \" + e.toString());\n             }\n         }\n         return knownImpl;", "filename": "core-common/src/main/java/org/apache/kylin/common/persistence/ResourceStore.java"}, {"additions": 1, "raw_url": "https://github.com/apache/kylin/raw/8b6d21133aab18b65ae571d9463089283b7dcbe1/core-dictionary/src/main/java/org/apache/kylin/dict/DictionaryManager.java", "blob_url": "https://github.com/apache/kylin/blob/8b6d21133aab18b65ae571d9463089283b7dcbe1/core-dictionary/src/main/java/org/apache/kylin/dict/DictionaryManager.java", "sha": "f7a407b6e5f5e522a2512a70ccbcb4428b6be154", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-dictionary/src/main/java/org/apache/kylin/dict/DictionaryManager.java?ref=8b6d21133aab18b65ae571d9463089283b7dcbe1", "patch": "@@ -248,7 +248,7 @@ public DictionaryInfo buildDictionary(DataModelDesc model, String dict, TblColRe\n             srcCol = col.getName();\n             srcColIdx = col.getColumnDesc().getZeroBasedIndex();\n             if (model.isFactTable(col.getTable())) {\n-                table = factTableValueProvider.getDistinctValuesFor(col);\n+                table = (factTableValueProvider == null) ? null : factTableValueProvider.getDistinctValuesFor(col);\n             } else {\n                 table = TableSourceFactory.createReadableTable(metaMgr.getTableDesc(col.getTable()));\n             }", "filename": "core-dictionary/src/main/java/org/apache/kylin/dict/DictionaryManager.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/5c3bfb2185869450a16f1c7a9e97c5912f9e761e", "parent": "https://github.com/apache/kylin/commit/023866b0cc57632a8a90259a0c0073966875fdd3", "message": "KYLIN-1419 NPE occurs when query from subqueries with order by (revised by Yang)", "bug_id": "kylin_75", "file": [{"additions": 43, "raw_url": "https://github.com/apache/kylin/raw/5c3bfb2185869450a16f1c7a9e97c5912f9e761e/kylin-it/src/test/resources/query/sql_subquery/query09.sql", "blob_url": "https://github.com/apache/kylin/blob/5c3bfb2185869450a16f1c7a9e97c5912f9e761e/kylin-it/src/test/resources/query/sql_subquery/query09.sql", "sha": "436ced5803f653742efefcfc62cf3709fc22089e", "changes": 43, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/kylin-it/src/test/resources/query/sql_subquery/query09.sql?ref=5c3bfb2185869450a16f1c7a9e97c5912f9e761e", "patch": "@@ -0,0 +1,43 @@\n+--\n+-- Licensed to the Apache Software Foundation (ASF) under one\n+-- or more contributor license agreements.  See the NOTICE file\n+-- distributed with this work for additional information\n+-- regarding copyright ownership.  The ASF licenses this file\n+-- to you under the Apache License, Version 2.0 (the\n+-- \"License\"); you may not use this file except in compliance\n+-- with the License.  You may obtain a copy of the License at\n+--\n+--     http://www.apache.org/licenses/LICENSE-2.0\n+--\n+-- Unless required by applicable law or agreed to in writing, software\n+-- distributed under the License is distributed on an \"AS IS\" BASIS,\n+-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+-- See the License for the specific language governing permissions and\n+-- limitations under the License.\n+--\n+\n+SELECT t1.week_beg_dt, t1.sum_price, t2.cnt\n+FROM (\n+  select test_cal_dt.week_beg_dt, sum(price) as sum_price\n+  from test_kylin_fact\n+  inner JOIN edw.test_cal_dt as test_cal_dt\n+  ON test_kylin_fact.cal_dt = test_cal_dt.cal_dt\n+  inner JOIN test_category_groupings\n+  ON test_kylin_fact.leaf_categ_id = test_category_groupings.leaf_categ_id AND test_kylin_fact.lstg_site_id = test_category_groupings.site_id\n+  inner JOIN edw.test_sites as test_sites\n+  ON test_kylin_fact.lstg_site_id = test_sites.site_id\n+  group by test_cal_dt.week_beg_dt\n+) t1\n+inner join  (\n+  select test_cal_dt.week_beg_dt, count(*) as cnt\n+  from test_kylin_fact\n+  inner JOIN edw.test_cal_dt as test_cal_dt\n+  ON test_kylin_fact.cal_dt = test_cal_dt.cal_dt\n+  inner JOIN test_category_groupings\n+  ON test_kylin_fact.leaf_categ_id = test_category_groupings.leaf_categ_id AND test_kylin_fact.lstg_site_id = test_category_groupings.site_id\n+  inner JOIN edw.test_sites as test_sites\n+  ON test_kylin_fact.lstg_site_id = test_sites.site_id\n+  group by test_cal_dt.week_beg_dt\n+) t2\n+on t1.week_beg_dt=t2.week_beg_dt\n+order by t1.week_beg_dt\n\\ No newline at end of file", "filename": "kylin-it/src/test/resources/query/sql_subquery/query09.sql"}, {"additions": 6, "raw_url": "https://github.com/apache/kylin/raw/5c3bfb2185869450a16f1c7a9e97c5912f9e761e/query/src/main/java/org/apache/kylin/query/relnode/OLAPSortRel.java", "blob_url": "https://github.com/apache/kylin/blob/5c3bfb2185869450a16f1c7a9e97c5912f9e761e/query/src/main/java/org/apache/kylin/query/relnode/OLAPSortRel.java", "sha": "c3e0595b0a9a3598544e1a740a9a020855175e94", "changes": 8, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/kylin/contents/query/src/main/java/org/apache/kylin/query/relnode/OLAPSortRel.java?ref=5c3bfb2185869450a16f1c7a9e97c5912f9e761e", "patch": "@@ -36,7 +36,6 @@\n import org.apache.kylin.metadata.model.MeasureDesc;\n import org.apache.kylin.metadata.model.TblColRef;\n import org.apache.kylin.metadata.realization.SQLDigest;\n-import org.apache.kylin.storage.StorageContext;\n \n import com.google.common.base.Preconditions;\n \n@@ -81,6 +80,11 @@ private ColumnRowType buildColumnRowType() {\n     public void implementRewrite(RewriteImplementor implementor) {\n         implementor.visitChild(this, getInput());\n \n+        // No need to rewrite \"order by\" applied on non-olap context.\n+        // Occurs in sub-query like \"select ... from (...) inner join (...) order by ...\"\n+        if (this.context.realization == null)\n+            return;\n+        \n         for (RelFieldCollation fieldCollation : this.collation.getFieldCollations()) {\n             int index = fieldCollation.getFieldIndex();\n             SQLDigest.OrderEnum order = getOrderEnum(fieldCollation.getDirection());\n@@ -116,7 +120,7 @@ private MeasureDesc findMeasure(TblColRef col) {\n \n     @Override\n     public EnumerableRel implementEnumerable(List<EnumerableRel> inputs) {\n-        return new EnumerableSort(getCluster(), getCluster().traitSetOf(EnumerableConvention.INSTANCE, collation), //\n+        return new EnumerableSort(getCluster(), getCluster().traitSetOf(EnumerableConvention.INSTANCE).replace(collation), //\n                 sole(inputs), collation, offset, fetch);\n     }\n ", "filename": "query/src/main/java/org/apache/kylin/query/relnode/OLAPSortRel.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/4e52d2fcb92aa337a47546d2fb28b1c5acbb79dd", "parent": "https://github.com/apache/kylin/commit/0c94968598f157fe16058d77f5198c40f6defc09", "message": "KYLIN-1762 Query threw NPE with 3 or more join conditions\n\nSigned-off-by: Yang Li <liyang@apache.org>", "bug_id": "kylin_76", "file": [{"additions": 28, "raw_url": "https://github.com/apache/kylin/raw/4e52d2fcb92aa337a47546d2fb28b1c5acbb79dd/kylin-it/src/test/resources/query/sql/query100.sql", "blob_url": "https://github.com/apache/kylin/blob/4e52d2fcb92aa337a47546d2fb28b1c5acbb79dd/kylin-it/src/test/resources/query/sql/query100.sql", "sha": "1edf92d6f0a52d35abaa85da13a2663f55ff1751", "changes": 28, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/kylin-it/src/test/resources/query/sql/query100.sql?ref=4e52d2fcb92aa337a47546d2fb28b1c5acbb79dd", "patch": "@@ -0,0 +1,28 @@\n+--\n+-- Licensed to the Apache Software Foundation (ASF) under one\n+-- or more contributor license agreements.  See the NOTICE file\n+-- distributed with this work for additional information\n+-- regarding copyright ownership.  The ASF licenses this file\n+-- to you under the Apache License, Version 2.0 (the\n+-- \"License\"); you may not use this file except in compliance\n+-- with the License.  You may obtain a copy of the License at\n+--\n+--     http://www.apache.org/licenses/LICENSE-2.0\n+--\n+-- Unless required by applicable law or agreed to in writing, software\n+-- distributed under the License is distributed on an \"AS IS\" BASIS,\n+-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+-- See the License for the specific language governing permissions and\n+-- limitations under the License.\n+--\n+\n+select t1.leaf_categ_id, max_price, min_price, sum_price\n+from\n+(select leaf_categ_id, sum(price) as sum_price from test_kylin_fact group by leaf_categ_id) t1\n+join\n+(select leaf_categ_id, max(price) as max_price from test_kylin_fact group by leaf_categ_id) t2\n+on t1.leaf_categ_id = t2.leaf_categ_id\n+join\n+(select leaf_categ_id, min(price) as min_price from test_kylin_fact group by leaf_categ_id) t3\n+on t1.leaf_categ_id = t3.leaf_categ_id\n+order by t1.leaf_categ_id", "filename": "kylin-it/src/test/resources/query/sql/query100.sql"}, {"additions": 7, "raw_url": "https://github.com/apache/kylin/raw/4e52d2fcb92aa337a47546d2fb28b1c5acbb79dd/query/src/main/java/org/apache/kylin/query/relnode/OLAPJoinRel.java", "blob_url": "https://github.com/apache/kylin/blob/4e52d2fcb92aa337a47546d2fb28b1c5acbb79dd/query/src/main/java/org/apache/kylin/query/relnode/OLAPJoinRel.java", "sha": "4b293bc57f51fedb263e0a774eaa6a09826e6c17", "changes": 9, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/kylin/contents/query/src/main/java/org/apache/kylin/query/relnode/OLAPJoinRel.java?ref=4e52d2fcb92aa337a47546d2fb28b1c5acbb79dd", "patch": "@@ -121,12 +121,17 @@ public void implementOLAP(OLAPImplementor implementor) {\n         implementor.visitChild(this.left, this);\n         if (this.context != implementor.getContext() || ((OLAPRel) this.left).hasSubQuery()) {\n             this.hasSubQuery = true;\n-            implementor.freeContext();\n+            // child join node didn't allocated a new context, and free context should be skipped\n+            if (!(this.left instanceof OLAPJoinRel)) {\n+                implementor.freeContext();\n+            }\n         }\n         implementor.visitChild(this.right, this);\n         if (this.context != implementor.getContext() || ((OLAPRel) this.right).hasSubQuery()) {\n             this.hasSubQuery = true;\n-            implementor.freeContext();\n+            if (!(this.right instanceof OLAPJoinRel)) {\n+                implementor.freeContext();\n+            }\n         }\n \n         this.columnRowType = buildColumnRowType();", "filename": "query/src/main/java/org/apache/kylin/query/relnode/OLAPJoinRel.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/a0386564f5c095f924cef56c33ccb42093d25b9f", "parent": "https://github.com/apache/kylin/commit/1fa447a52d378242005296fd168fe5743ba4aec5", "message": "KYLIN-1180 Fix some NPE on Dictionary\n\nSigned-off-by: honma <honma@ebay.com>", "bug_id": "kylin_77", "file": [{"additions": 1, "raw_url": "https://github.com/apache/kylin/raw/a0386564f5c095f924cef56c33ccb42093d25b9f/core-dictionary/src/main/java/org/apache/kylin/dict/TableColumnValueEnumerator.java", "blob_url": "https://github.com/apache/kylin/blob/a0386564f5c095f924cef56c33ccb42093d25b9f/core-dictionary/src/main/java/org/apache/kylin/dict/TableColumnValueEnumerator.java", "sha": "5f9460c4aacbe5f0501288029f3047ef6732e699", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-dictionary/src/main/java/org/apache/kylin/dict/TableColumnValueEnumerator.java?ref=a0386564f5c095f924cef56c33ccb42093d25b9f", "patch": "@@ -53,7 +53,7 @@ public boolean moveNext() throws IOException {\n                 colStrValue = split[colIndex];\n             }\n \n-            colValue = Bytes.toBytes(colStrValue);\n+            colValue = colStrValue == null ? null : Bytes.toBytes(colStrValue);\n             return true;\n \n         } else {", "filename": "core-dictionary/src/main/java/org/apache/kylin/dict/TableColumnValueEnumerator.java"}, {"additions": 4, "raw_url": "https://github.com/apache/kylin/raw/a0386564f5c095f924cef56c33ccb42093d25b9f/core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupBytesTable.java", "blob_url": "https://github.com/apache/kylin/blob/a0386564f5c095f924cef56c33ccb42093d25b9f/core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupBytesTable.java", "sha": "0758edccf5a44b90dd74704374d84604e895da87", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupBytesTable.java?ref=a0386564f5c095f924cef56c33ccb42093d25b9f", "patch": "@@ -49,4 +49,8 @@ protected String toString(ByteArray cell) {\n         return cell.toString();\r\n     }\r\n \r\n+    public Class<?> getType() {\n+        return ByteArray.class;\n+    }\n+\n }\r", "filename": "core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupBytesTable.java"}, {"additions": 3, "raw_url": "https://github.com/apache/kylin/raw/a0386564f5c095f924cef56c33ccb42093d25b9f/core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupStringTable.java", "blob_url": "https://github.com/apache/kylin/blob/a0386564f5c095f924cef56c33ccb42093d25b9f/core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupStringTable.java", "sha": "ce73febf1e467490387fb7d24828e690d8f2a584", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupStringTable.java?ref=a0386564f5c095f924cef56c33ccb42093d25b9f", "patch": "@@ -43,4 +43,7 @@ protected String toString(String cell) {\n         return cell;\r\n     }\r\n \r\n+    public Class<?> getType() {\n+        return String.class;\n+    }\n }\r", "filename": "core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupStringTable.java"}, {"additions": 4, "raw_url": "https://github.com/apache/kylin/raw/a0386564f5c095f924cef56c33ccb42093d25b9f/core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupTable.java", "blob_url": "https://github.com/apache/kylin/blob/a0386564f5c095f924cef56c33ccb42093d25b9f/core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupTable.java", "sha": "eb2b9633fa460a6207e94f99069af8f07942309d", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupTable.java?ref=a0386564f5c095f924cef56c33ccb42093d25b9f", "patch": "@@ -36,7 +36,7 @@\n /**\r\n  * An in-memory lookup table, in which each cell is an object of type T. The\r\n  * table is indexed by specified PK for fast lookup.\r\n- * \r\n+ *\n  * @author yangli9\r\n  */\r\n abstract public class LookupTable<T extends Comparable<T>> {\r\n@@ -73,7 +73,7 @@ protected void init() throws IOException {\n     @SuppressWarnings(\"unchecked\")\r\n     private void initRow(String[] cols, int[] keyIndex) {\r\n         T[] value = convertRow(cols);\r\n-        T[] keyCols = (T[]) java.lang.reflect.Array.newInstance(value[0].getClass(), keyIndex.length);\r\n+        T[] keyCols = (T[]) java.lang.reflect.Array.newInstance(getType(), keyIndex.length);\n         for (int i = 0; i < keyCols.length; i++)\r\n             keyCols[i] = value[keyIndex[i]];\r\n \r\n@@ -162,6 +162,8 @@ protected String toString(T[] cols) {\n \r\n     abstract protected String toString(T cell);\r\n \r\n+    abstract public Class<?> getType();\n+\n     public void dump() {\r\n         for (Array<T> key : data.keySet()) {\r\n             System.out.println(toString(key.data) + \" => \" + toString(data.get(key)));\r", "filename": "core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupTable.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/7a5469e07f68aaa882a3d924b8f4d99cc2660cf7", "parent": "https://github.com/apache/kylin/commit/74ceea9723e1b56f2b8be135109c29e7f6aa6e44", "message": "KYLIN_956, fix NPE when there is no value for kylin.hbase.default.compression.codec", "bug_id": "kylin_78", "file": [{"additions": 1, "raw_url": "https://github.com/apache/kylin/raw/7a5469e07f68aaa882a3d924b8f4d99cc2660cf7/common/src/main/java/org/apache/kylin/common/KylinConfig.java", "blob_url": "https://github.com/apache/kylin/blob/7a5469e07f68aaa882a3d924b8f4d99cc2660cf7/common/src/main/java/org/apache/kylin/common/KylinConfig.java", "sha": "deb2eda77bc7f23583a4508b62187061fd1970d2", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/common/src/main/java/org/apache/kylin/common/KylinConfig.java?ref=7a5469e07f68aaa882a3d924b8f4d99cc2660cf7", "patch": "@@ -452,7 +452,7 @@ public int getHBaseKeyValueSize() {\n     }\n \n     public String getHbaseDefaultCompressionCodec() {\n-        return getOptional(HTABLE_DEFAULT_COMPRESSION_CODEC);\n+        return getOptional(HTABLE_DEFAULT_COMPRESSION_CODEC, \"\");\n \n     }\n ", "filename": "common/src/main/java/org/apache/kylin/common/KylinConfig.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/4632254541ce25dc1b3ca8c812d0ae8af3195f86", "parent": "https://github.com/apache/kylin/commit/dd53d7138fc27fce2bb16167fa5a81176915f78d", "message": "KYLIN_956, fix NPE when there is no value for kylin.hbase.default.compression.codec", "bug_id": "kylin_79", "file": [{"additions": 1, "raw_url": "https://github.com/apache/kylin/raw/4632254541ce25dc1b3ca8c812d0ae8af3195f86/common/src/main/java/org/apache/kylin/common/KylinConfig.java", "blob_url": "https://github.com/apache/kylin/blob/4632254541ce25dc1b3ca8c812d0ae8af3195f86/common/src/main/java/org/apache/kylin/common/KylinConfig.java", "sha": "deb2eda77bc7f23583a4508b62187061fd1970d2", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/kylin/contents/common/src/main/java/org/apache/kylin/common/KylinConfig.java?ref=4632254541ce25dc1b3ca8c812d0ae8af3195f86", "patch": "@@ -452,7 +452,7 @@ public int getHBaseKeyValueSize() {\n     }\n \n     public String getHbaseDefaultCompressionCodec() {\n-        return getOptional(HTABLE_DEFAULT_COMPRESSION_CODEC);\n+        return getOptional(HTABLE_DEFAULT_COMPRESSION_CODEC, \"\");\n \n     }\n ", "filename": "common/src/main/java/org/apache/kylin/common/KylinConfig.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/b6d63ab9de87b81bfd383f0d08ee3e9e9c0255d4", "parent": "https://github.com/apache/kylin/commit/4b55d171dcc00f679c567ad9b38fb1e6eef2e286", "message": "KYLIN-940 ,fix NPE in monitor module ,apply patch from Xiaoyu Wang", "bug_id": "kylin_80", "file": [{"additions": 21, "raw_url": "https://github.com/apache/kylin/raw/b6d63ab9de87b81bfd383f0d08ee3e9e9c0255d4/monitor/src/main/java/org/apache/kylin/monitor/FileUtils.java", "blob_url": "https://github.com/apache/kylin/blob/b6d63ab9de87b81bfd383f0d08ee3e9e9c0255d4/monitor/src/main/java/org/apache/kylin/monitor/FileUtils.java", "sha": "1daa4040dfdcd2a5fb9f70f7cee8f9285f1a598e", "changes": 28, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/kylin/contents/monitor/src/main/java/org/apache/kylin/monitor/FileUtils.java?ref=b6d63ab9de87b81bfd383f0d08ee3e9e9c0255d4", "patch": "@@ -47,7 +47,9 @@ public static boolean pathCheck(String filePath) throws IOException {\n                 return false;\n             }\n         } catch (Exception e) {\n-            fs.close();\n+            if(fs != null) {\n+                fs.close();\n+            }\n             logger.info(\"Failed to init:\", e);\n         }\n         return true;\n@@ -67,8 +69,12 @@ public static void clearHdfsFile(String dPath) throws IOException {\n         } catch (Exception e) {\n             logger.info(\"Exception\", e);\n         } finally {\n-            writer.close();\n-            fs.close();\n+            if(writer != null) {\n+                writer.close();\n+            }\n+            if(fs != null) {\n+                fs.close();\n+            }\n         }\n     }\n \n@@ -90,9 +96,15 @@ public static void appendResultToHdfs(String dPath, String[] record) throws IOEx\n         } catch (Exception e) {\n             logger.info(\"Exception\", e);\n         } finally {\n-            writer.close();\n-            cwriter.close();\n-            fs.close();\n+            if(writer != null) {\n+                writer.close();\n+            }\n+            if(cwriter != null) {\n+                cwriter.close();\n+            }\n+            if(fs != null) {\n+                fs.close();\n+            }\n         }\n     }\n \n@@ -106,7 +118,9 @@ public static FileSystem getHdfsFileSystem() throws IOException {\n         try {\n             fs = FileSystem.newInstance(conf);\n         } catch (IOException e) {\n-            fs.close();\n+            if(fs != null) {\n+                fs.close();\n+            }\n             logger.info(\"Failed to get hdfs FileSystem\", e);\n         }\n         return fs;", "filename": "monitor/src/main/java/org/apache/kylin/monitor/FileUtils.java"}, {"additions": 24, "raw_url": "https://github.com/apache/kylin/raw/b6d63ab9de87b81bfd383f0d08ee3e9e9c0255d4/monitor/src/main/java/org/apache/kylin/monitor/QueryParser.java", "blob_url": "https://github.com/apache/kylin/blob/b6d63ab9de87b81bfd383f0d08ee3e9e9c0255d4/monitor/src/main/java/org/apache/kylin/monitor/QueryParser.java", "sha": "4996265051ff553ad63b067dcb8056a77017c4a1", "changes": 32, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/kylin/contents/monitor/src/main/java/org/apache/kylin/monitor/QueryParser.java?ref=b6d63ab9de87b81bfd383f0d08ee3e9e9c0255d4", "patch": "@@ -107,7 +107,9 @@ public void parseQueryInit() throws IOException {\n                 this.writeResultToHdfs(QueryParser.QUERY_PARSE_RESULT_PATH, QueryParser.KYLIN_QUERY_CSV_HEADER);\n             }\n         } catch (IOException e) {\n-            fs.close();\n+            if(fs != null) {\n+                fs.close();\n+            }\n             logger.info(\"Failed to init:\", e);\n         }\n     }\n@@ -181,9 +183,15 @@ public void parseQueryLog(String filePath, String dPath) throws ParseException,\n         } catch (IOException ex) {\n             logger.info(\"Failed to write to hdfs:\", ex);\n         } finally {\n-            writer.close();\n-            cwriter.close();\n-            fs.close();\n+            if(writer != null) {\n+                writer.close();\n+            }\n+            if(cwriter != null) {\n+                cwriter.close();\n+            }\n+            if(fs != null) {\n+                fs.close();\n+            }\n         }\n \n         logger.info(\"Finish parsing file \" + filePath + \" !\");\n@@ -208,9 +216,15 @@ public void writeResultToHdfs(String dPath, String[] record) throws IOException\n         } catch (IOException e) {\n             logger.info(\"Exception\", e);\n         } finally {\n-            writer.close();\n-            cwriter.close();\n-            fs.close();\n+            if(writer != null) {\n+                writer.close();\n+            }\n+            if(cwriter != null) {\n+                cwriter.close();\n+            }\n+            if(fs != null) {\n+                fs.close();\n+            }\n         }\n     }\n \n@@ -247,7 +261,9 @@ public FileSystem getHdfsFileSystem() throws IOException {\n         try {\n             fs = FileSystem.get(conf);\n         } catch (IOException e) {\n-            fs.close();\n+            if(fs != null) {\n+                fs.close();\n+            }\n             logger.info(\"Failed to get hdfs FileSystem\", e);\n         }\n         return fs;", "filename": "monitor/src/main/java/org/apache/kylin/monitor/QueryParser.java"}], "repo": "kylin"}, {"commit": "https://github.com/apache/kylin/commit/3299b0fa0a6ed0304bd284bc8188db0590070055", "parent": "https://github.com/apache/kylin/commit/86ddae64a1f3d46631d1c80ebc26499695b993e9", "message": "KYLIN-1808, unload table cause NPE\n\nSigned-off-by: fengyu <hzfengyu@corp.netease.com>\nSigned-off-by: shaofengshi <shaofengshi@apache.org>", "bug_id": "kylin_81", "file": [{"additions": 2, "raw_url": "https://github.com/apache/kylin/raw/3299b0fa0a6ed0304bd284bc8188db0590070055/server-base/src/main/java/org/apache/kylin/rest/controller/TableController.java", "blob_url": "https://github.com/apache/kylin/blob/3299b0fa0a6ed0304bd284bc8188db0590070055/server-base/src/main/java/org/apache/kylin/rest/controller/TableController.java", "sha": "eefeba87a4d368aadb38cc874b19fe64e3ca5056", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/controller/TableController.java?ref=3299b0fa0a6ed0304bd284bc8188db0590070055", "patch": "@@ -189,6 +189,8 @@ private boolean unLoadHiveTable(String tableName, String project) {\n         String[] dbTableName = HadoopUtil.parseHiveTableName(tableName);\n         tableName = dbTableName[0] + \".\" + dbTableName[1];\n         TableDesc desc = cubeMgmtService.getMetadataManager().getTableDesc(tableName);\n+        if(desc == null)\n+            return false;\n         tableType = desc.getSourceType();\n \n         try {", "filename": "server-base/src/main/java/org/apache/kylin/rest/controller/TableController.java"}], "repo": "kylin"}]
