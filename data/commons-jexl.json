{
    "commons-jexl_05044a7": {
        "bug_id": "commons-jexl_05044a7",
        "commit": "https://github.com/apache/commons-jexl/commit/05044a7c4a04886dc78a48f8fd71127496b9709f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/commons-jexl/blob/05044a7c4a04886dc78a48f8fd71127496b9709f/src/main/java/org/apache/commons/jexl3/internal/introspection/MethodKey.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-jexl/contents/src/main/java/org/apache/commons/jexl3/internal/introspection/MethodKey.java?ref=05044a7c4a04886dc78a48f8fd71127496b9709f",
                "deletions": 1,
                "filename": "src/main/java/org/apache/commons/jexl3/internal/introspection/MethodKey.java",
                "patch": "@@ -373,7 +373,7 @@ private static boolean isInvocationConvertible(\n             return true;\n         }\n         /* system asssignable, both sides must be array or not */\n-        if (formal.isAssignableFrom(actual) && (actual != null && actual.isArray() == formal.isArray())) {\n+        if (actual != null && formal.isAssignableFrom(actual) && actual.isArray() == formal.isArray()) {\n             return true;\n         }\n         /** catch all... */",
                "raw_url": "https://github.com/apache/commons-jexl/raw/05044a7c4a04886dc78a48f8fd71127496b9709f/src/main/java/org/apache/commons/jexl3/internal/introspection/MethodKey.java",
                "sha": "b0c3cae7733e94d9feb4a201c9339e563bd52857",
                "status": "modified"
            }
        ],
        "message": "JEXL:\nProtect against potential NPE\n\ngit-svn-id: https://svn-us.apache.org/repos/asf/commons/proper/jexl/trunk@1821779 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-jexl/commit/13cf54fe23674761bf19e087c29139676c363774",
        "repo": "commons-jexl",
        "unit_tests": [
            "MethodKeyTest.java"
        ]
    },
    "commons-jexl_5f1fcc9": {
        "bug_id": "commons-jexl_5f1fcc9",
        "commit": "https://github.com/apache/commons-jexl/commit/5f1fcc9538033d82823bc8e69ba225be5a772194",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/commons-jexl/blob/5f1fcc9538033d82823bc8e69ba225be5a772194/src/main/java/org/apache/commons/jexl/util/introspection/IntrospectorBase.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-jexl/contents/src/main/java/org/apache/commons/jexl/util/introspection/IntrospectorBase.java?ref=5f1fcc9538033d82823bc8e69ba225be5a772194",
                "deletions": 1,
                "filename": "src/main/java/org/apache/commons/jexl/util/introspection/IntrospectorBase.java",
                "patch": "@@ -174,7 +174,7 @@ public CacheMiss() {}\n                         l.add(ictor);\n                     }\n                     // try to find one\n-                    ctor = MethodKey.CONSTRUCTORS.getMostSpecific(l, key.getParameters());\n+                    ctor = key.getMostSpecific(l);\n                     if (ctor != null) {\n                         constructorsMap.put(key, ctor);\n                     } else {",
                "raw_url": "https://github.com/apache/commons-jexl/raw/5f1fcc9538033d82823bc8e69ba225be5a772194/src/main/java/org/apache/commons/jexl/util/introspection/IntrospectorBase.java",
                "sha": "1ed47d686aaaa9ae308884a44af575c6d2487691",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/commons-jexl/blob/5f1fcc9538033d82823bc8e69ba225be5a772194/src/main/java/org/apache/commons/jexl/util/introspection/MethodKey.java",
                "changes": 50,
                "contents_url": "https://api.github.com/repos/apache/commons-jexl/contents/src/main/java/org/apache/commons/jexl/util/introspection/MethodKey.java?ref=5f1fcc9538033d82823bc8e69ba225be5a772194",
                "deletions": 17,
                "filename": "src/main/java/org/apache/commons/jexl/util/introspection/MethodKey.java",
                "patch": "@@ -40,7 +40,7 @@\n  * A key can be constructed either from arguments (array of objects) or from parameters\n  * (array of class).\n  * Roughly 3x faster than string key to access the map & uses less memory.\n- * \n+ *\n  * For the parameters methods:\n  * @author <a href=\"mailto:jvanzyl@apache.org\">Jason van Zyl</a>\n  * @author <a href=\"mailto:bob@werken.com\">Bob McWhirter</a>\n@@ -180,6 +180,26 @@ public String debugString() {\n         return builder.toString();\n     }\n \n+    /**\n+     * Gets the most specific method that is applicable to the parameters of this key.\n+     * @param methods a list of methods.\n+     * @return the most specific method.\n+     * @throws MethodKey.AmbiguousException if there is more than one.\n+     */\n+    public Method getMostSpecific(List<Method> methods) {\n+        return METHODS.getMostSpecific(methods, params);\n+    }\n+\n+    /**\n+     * Gets the most specific constructor that is applicable to the parameters of this key.\n+     * @param methods a list of constructors.\n+     * @return the most specific constructor.\n+     * @throws MethodKey.AmbiguousException if there is more than one.\n+     */\n+    public Constructor<?> getMostSpecific(List<Constructor<?>> methods) {\n+        return CONSTRUCTORS.getMostSpecific(methods, params);\n+    }\n+\n     /**\n      * whether a method/ctor is more specific than a previously compared one.\n      */\n@@ -207,9 +227,9 @@ public String debugString() {\n \n     /**\n      * Utility for parameters matching.\n-     * @param <T> method or contructor\n+     * @param <T> Method or Constructor\n      */\n-     public abstract static class Parameters<T> {\n+     private abstract static class Parameters<T> {\n         /**\n          * Extract the parameter types from its applicable argument.\n          * @param app a method or constructor\n@@ -225,7 +245,7 @@ public String debugString() {\n          * @return the most specific method.\n          * @throws MethodKey.AmbiguousException if there is more than one.\n          */\n-        protected T getMostSpecific(List<T> methods, Class<?>[] classes) {\n+        private T getMostSpecific(List<T> methods, Class<?>[] classes) {\n             LinkedList<T> applicables = getApplicables(methods, classes);\n \n             if (applicables.isEmpty()) {\n@@ -357,7 +377,7 @@ private int moreSpecific(Class<?>[] c1, Class<?>[] c2) {\n          *         formal and actual arguments matches, and argument types are assignable\n          *         to formal types through a method invocation conversion).\n          */\n-        protected LinkedList<T> getApplicables(List<T> methods, Class<?>[] classes) {\n+        private LinkedList<T> getApplicables(List<T> methods, Class<?>[] classes) {\n             LinkedList<T> list = new LinkedList<T>();\n \n             for (Iterator<T> imethod = methods.iterator(); imethod.hasNext();) {\n@@ -438,13 +458,8 @@ private boolean isApplicable(T method, Class<?>[] classes) {\n          */\n         private boolean isConvertible(Class<?> formal, Class<?> actual,\n                 boolean possibleVarArg) {\n-            // if we see Void.class as the class of an argument most likely\n-            // obtained through a MethodKey, we consider it\n-            // as a wildcard; non primitives are thus convertible.\n-            if (actual.equals(Void.class) && !formal.isPrimitive()) {\n-                return true;\n-            }\n-            return isInvocationConvertible(formal, actual, possibleVarArg);\n+            // if we see Void.class, the argument was null\n+            return isInvocationConvertible(formal, actual.equals(Void.class)? null : actual, possibleVarArg);\n         }\n \n         /**\n@@ -458,7 +473,8 @@ private boolean isConvertible(Class<?> formal, Class<?> actual,\n          */\n         private boolean isStrictConvertible(Class<?> formal, Class<?> actual,\n                 boolean possibleVarArg) {\n-            return isStrictInvocationConvertible(formal, actual, possibleVarArg);\n+            // if we see Void.class, the argument was null\n+            return isStrictInvocationConvertible(formal, actual.equals(Void.class)? null : actual, possibleVarArg);\n         }\n \n     }\n@@ -531,7 +547,7 @@ public static boolean isInvocationConvertible(Class<?> formal,\n \n         /* Check for vararg conversion. */\n         if (possibleVarArg && formal.isArray()) {\n-            if (actual.isArray()) {\n+            if (actual != null && actual.isArray()) {\n                 actual = actual.getComponentType();\n             }\n             return isInvocationConvertible(formal.getComponentType(),\n@@ -595,7 +611,7 @@ public static boolean isStrictInvocationConvertible(Class<?> formal,\n \n         /* Check for vararg conversion. */\n         if (possibleVarArg && formal.isArray()) {\n-            if (actual.isArray()) {\n+            if (actual != null && actual.isArray()) {\n                 actual = actual.getComponentType();\n             }\n             return isStrictInvocationConvertible(formal.getComponentType(),\n@@ -607,7 +623,7 @@ public static boolean isStrictInvocationConvertible(Class<?> formal,\n     /**\n      * The parameter matching service for methods.\n      */\n-    public static final Parameters<Method> METHODS = new Parameters<Method>() {\n+    private static final Parameters<Method> METHODS = new Parameters<Method>() {\n         @Override\n         protected Class<?>[] getParameterTypes(Method app) {\n             return app.getParameterTypes();\n@@ -618,7 +634,7 @@ public static boolean isStrictInvocationConvertible(Class<?> formal,\n     /**\n      * The parameter matching service for constructors.\n      */\n-    public static final Parameters<Constructor<?>> CONSTRUCTORS = new Parameters<Constructor<?>>() {\n+    private static final Parameters<Constructor<?>> CONSTRUCTORS = new Parameters<Constructor<?>>() {\n         @Override\n         protected Class<?>[] getParameterTypes(Constructor<?> app) {\n             return app.getParameterTypes();",
                "raw_url": "https://github.com/apache/commons-jexl/raw/5f1fcc9538033d82823bc8e69ba225be5a772194/src/main/java/org/apache/commons/jexl/util/introspection/MethodKey.java",
                "sha": "3ff5c7470a05c6c410065da73f2cf99642a15410",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/commons-jexl/blob/5f1fcc9538033d82823bc8e69ba225be5a772194/src/main/java/org/apache/commons/jexl/util/introspection/MethodMap.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/commons-jexl/contents/src/main/java/org/apache/commons/jexl/util/introspection/MethodMap.java?ref=5f1fcc9538033d82823bc8e69ba225be5a772194",
                "deletions": 15,
                "filename": "src/main/java/org/apache/commons/jexl/util/introspection/MethodMap.java",
                "patch": "@@ -122,21 +122,7 @@ Method find(MethodKey methodKey) throws MethodKey.AmbiguousException {\n         if (methodList == null) {\n             return null;\n         }\n-        return MethodKey.METHODS.getMostSpecific(methodList, methodKey.getParameters());\n+        return methodKey.getMostSpecific(methodList);\n     } // CSON: RedundantThrows\n \n-\n-    /**\n-     * Simple distinguishable exception, used when\n-     * we run across ambiguous overloading.  Caught\n-     * by the introspector.\n-     */\n-    public static class AmbiguousException extends RuntimeException {\n-        /**\n-         * Version Id for serializable.\n-         */\n-        private static final long serialVersionUID = -2314636505414551663L;\n-    }\n-\n-\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/commons-jexl/raw/5f1fcc9538033d82823bc8e69ba225be5a772194/src/main/java/org/apache/commons/jexl/util/introspection/MethodMap.java",
                "sha": "beeaf0bab914c8807546e91cc8b0bba14a5bf926",
                "status": "modified"
            }
        ],
        "message": "Various MethodKey fixes:\n * Fix potential NPEs.\n * Reduce visibility of many methods\n * Use Void.class as a signature for null arguments\n * Need only one AmbiguousException\nPatch by Henri Biestro <hbiestro at gmail dot com>.\nJEXL-67\n\n\ngit-svn-id: https://svn-us.apache.org/repos/asf/commons/proper/jexl/branches/2.0@802288 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-jexl/commit/158a6018b030def41d77a514990c44df05b9df4b",
        "repo": "commons-jexl",
        "unit_tests": [
            "MethodKeyTest.java"
        ]
    },
    "commons-jexl_dc013ef": {
        "bug_id": "commons-jexl_dc013ef",
        "commit": "https://github.com/apache/commons-jexl/commit/dc013efedf7134dd2da4565c90f1f6f7207d42c6",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/commons-jexl/blob/dc013efedf7134dd2da4565c90f1f6f7207d42c6/src/java/org/apache/commons/jexl/scripting/JexlScriptEngine.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/commons-jexl/contents/src/java/org/apache/commons/jexl/scripting/JexlScriptEngine.java?ref=dc013efedf7134dd2da4565c90f1f6f7207d42c6",
                "deletions": 2,
                "filename": "src/java/org/apache/commons/jexl/scripting/JexlScriptEngine.java",
                "patch": "@@ -75,6 +75,10 @@ public Bindings createBindings() {\n \n     /** {@inheritDoc} */\n     public Object eval(Reader script, ScriptContext context) throws ScriptException {\n+        // This is mandated by JSR-223 (see SCR.5.5.2   Methods)\n+        if (script == null || context == null) {\n+            throw new NullPointerException(\"script and context must be non-null\");\n+        }\n         BufferedReader reader = new BufferedReader(script);\n         StringBuilder buffer = new StringBuilder();\n         try {\n@@ -98,8 +102,9 @@ public Object eval(Reader script, ScriptContext context) throws ScriptException\n     /** {@inheritDoc} */\n     @SuppressWarnings(\"unchecked\")\n     public Object eval(String scriptText, final ScriptContext context) throws ScriptException {\n-        if (scriptText == null) {\n-            return null;\n+        // This is mandated by JSR-223 (see SCR.5.5.2   Methods)\n+        if (scriptText == null || context == null) {\n+            throw new NullPointerException(\"script and context must be non-null\");\n         }\n         // This is mandated by JSR-223 (end of section SCR.4.3.4.1.2 - Script Execution)\n         context.setAttribute(\"context\", context, ScriptContext.ENGINE_SCOPE);",
                "raw_url": "https://github.com/apache/commons-jexl/raw/dc013efedf7134dd2da4565c90f1f6f7207d42c6/src/java/org/apache/commons/jexl/scripting/JexlScriptEngine.java",
                "sha": "fa80364158e8ac6894784f201783bf30e23c3bc3",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/commons-jexl/blob/dc013efedf7134dd2da4565c90f1f6f7207d42c6/src/test/org/apache/commons/jexl/scripting/JexlScriptEngineTest.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/commons-jexl/contents/src/test/org/apache/commons/jexl/scripting/JexlScriptEngineTest.java?ref=dc013efedf7134dd2da4565c90f1f6f7207d42c6",
                "deletions": 0,
                "filename": "src/test/org/apache/commons/jexl/scripting/JexlScriptEngineTest.java",
                "patch": "@@ -18,10 +18,12 @@\n \n package org.apache.commons.jexl.scripting;\n \n+import java.io.Reader;\n import java.util.Map;\n \n import javax.script.ScriptEngine;\n import javax.script.ScriptEngineManager;\n+import javax.script.ScriptException;\n \n import junit.framework.TestCase;\n \n@@ -50,6 +52,25 @@ public void testScripting() throws Exception {\n         assertEquals(initialValue,engine.get(\"old\"));\n         assertEquals(newValue,engine.get(\"value\"));\n     }\n+    \n+    public void testNulls() throws Exception {\n+        ScriptEngineManager manager = new ScriptEngineManager();\n+        assertNotNull(\"Manager should not be null\", manager);\n+        ScriptEngine engine = manager.getEngineByName(\"jexl\");\n+        assertNotNull(\"Engine should not be null (name)\", engine);\n+        try {\n+            engine.eval((String)null);\n+            fail(\"Should have caused NPE\");\n+        } catch (NullPointerException e) {\n+            // NOOP\n+        }\n+        try {\n+            engine.eval((Reader)null);\n+            fail(\"Should have caused NPE\");\n+        } catch (NullPointerException e) {\n+            // NOOP\n+        }\n+    }\n \n     public void testEngineNames() throws Exception {\n         ScriptEngine engine;",
                "raw_url": "https://github.com/apache/commons-jexl/raw/dc013efedf7134dd2da4565c90f1f6f7207d42c6/src/test/org/apache/commons/jexl/scripting/JexlScriptEngineTest.java",
                "sha": "3f879bf3807fd53c4771e3e3c7ddb7d3fd2837f8",
                "status": "modified"
            }
        ],
        "message": "Script engine must throw NPE if either parameter is null\n\ngit-svn-id: https://svn-us.apache.org/repos/asf/commons/proper/jexl/branches/2.0@799910 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-jexl/commit/a80683ce2276554f0e7929e5ed3731a5156d64a1",
        "repo": "commons-jexl",
        "unit_tests": [
            "JexlScriptEngineTest.java"
        ]
    }
}