{
    "chainsaw_8f90f4d": {
        "bug_id": "chainsaw_8f90f4d",
        "commit": "https://github.com/apache/chainsaw/commit/8f90f4ddce2f03b5e0e7c8d538c828689752681d",
        "file": [
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/chainsaw/blob/8f90f4ddce2f03b5e0e7c8d538c828689752681d/src/java/org/apache/log4j/chainsaw/ChainsawAppenderHandler.java",
                "changes": 164,
                "contents_url": "https://api.github.com/repos/apache/chainsaw/contents/src/java/org/apache/log4j/chainsaw/ChainsawAppenderHandler.java?ref=8f90f4ddce2f03b5e0e7c8d538c828689752681d",
                "deletions": 126,
                "filename": "src/java/org/apache/log4j/chainsaw/ChainsawAppenderHandler.java",
                "patch": "@@ -54,20 +54,15 @@\n import org.apache.log4j.helpers.LogLog;\n import org.apache.log4j.net.SocketReceiver;\n import org.apache.log4j.plugins.PluginRegistry;\n-import org.apache.log4j.spi.LocationInfo;\n import org.apache.log4j.spi.LoggingEvent;\n \n import java.beans.PropertyChangeListener;\n import java.beans.PropertyChangeSupport;\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Date;\n-import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n import java.util.Vector;\n \n import javax.swing.event.EventListenerList;\n@@ -135,97 +130,6 @@ public boolean requiresLayout() {\n     return false;\n   }\n \n-  /**\n-   * Converts a LoggingEvent into a Vector of element (columns really).\n-   * @param event\n-   * @return\n-   *\n-   * @deprecated\n-   */\n-  public static Vector convert(LoggingEvent event) {\n-    Vector v = new Vector();\n-    LocationInfo info = event.getLocationInformation();\n-    String className = \"\";\n-    String methodName = \"\";\n-    String fileName = \"\";\n-    String lineNum = \"\";\n-\n-    if (info != null) {\n-      try {\n-        className = info.getClassName();\n-        methodName = info.getMethodName();\n-        fileName = info.getFileName();\n-        lineNum = info.getLineNumber();\n-      } catch (NullPointerException npe) {\n-      }\n-\n-      //ignore..malformed info\n-    }\n-\n-    StringBuffer MDC = new StringBuffer();\n-    Set mdc = event.getMDCKeySet();\n-    Iterator iter = mdc.iterator();\n-\n-    while (iter.hasNext()) {\n-      if (MDC.length() != 0) {\n-        MDC.append(\",\");\n-      }\n-\n-      String propName = (String) iter.next();\n-      MDC.append(propName);\n-      MDC.append(\"=\");\n-\n-      String propValue = (String) event.getMDC(propName);\n-      MDC.append(propValue);\n-    }\n-\n-    StringBuffer prop = new StringBuffer();\n-    Set properties = event.getPropertyKeySet();\n-\n-    if (properties != null) {\n-      Iterator iter2 = properties.iterator();\n-\n-      while (iter2.hasNext()) {\n-        if (prop.length() != 0) {\n-          prop.append(\",\");\n-        }\n-\n-        String propName = (String) iter2.next();\n-        prop.append(propName);\n-        prop.append(\"=\");\n-\n-        String propValue = (String) event.getProperty(propName);\n-        prop.append(propValue);\n-      }\n-    }\n-\n-    v.add(event.getLoggerName());\n-    v.add(new Date(event.timeStamp));\n-    v.add(event.getLevel().toString());\n-    v.add(event.getThreadName());\n-    v.add(event.getRenderedMessage());\n-    v.add(event.getNDC());\n-    v.add(MDC.toString());\n-\n-    StringBuffer exc = new StringBuffer();\n-    String[] excarray = event.getThrowableStrRep();\n-\n-    if (excarray != null) {\n-      for (int i = 0; i < excarray.length; i++) {\n-        exc.append(excarray[i]);\n-      }\n-    }\n-\n-    v.add(exc.toString());\n-    v.add(className);\n-    v.add(methodName);\n-    v.add(fileName);\n-    v.add(lineNum);\n-    v.add(prop.toString());\n-\n-    return v;\n-  }\n-\n   public int getQueueInterval() {\n     return sleepInterval;\n   }\n@@ -251,9 +155,10 @@ private static String getTabIdentifier(LoggingEvent e) {\n     String appname = e.getProperty(ChainsawConstants.LOG4J_APP_KEY);\n \n     if (appname != null) {\n-      if(ident.length()>0){\n-          ident.append(\"-\");\n+      if (ident.length() > 0) {\n+        ident.append(\"-\");\n       }\n+\n       ident.append(appname);\n     }\n \n@@ -378,21 +283,23 @@ public synchronized void removePropertyChangeListener(\n    */\n   class WorkQueue {\n     private final ArrayList queue = new ArrayList();\n-    private boolean stopped = false;\n+    Thread workerThread;\n \n     protected WorkQueue() {\n-      new WorkerThread().start();\n+      workerThread = new WorkerThread();\n+      workerThread.start();\n     }\n \n     public final void enqueue(LoggingEvent event) {\n       synchronized (mutex) {\n         queue.add(event);\n+        mutex.notify();\n       }\n     }\n \n     public final void stop() {\n       synchronized (mutex) {\n-        stopped = true;\n+        workerThread.interrupt();\n       }\n     }\n \n@@ -409,59 +316,64 @@ public WorkerThread() {\n       public void run() {\n         List innerList = new ArrayList();\n \n-        while (isAlive()) {\n+        while (true) {\n           long timeStart = System.currentTimeMillis();\n \n           synchronized (mutex) {\n-            if (stopped) {\n-              return;\n-            } else {\n+            try {\n+              while (queue.size() == 0) {\n+                mutex.wait();\n+              }\n+\n               if (queue.size() > 0) {\n                 innerList.addAll(queue);\n                 queue.clear();\n               }\n+            } catch (InterruptedException ie) {\n             }\n           }\n \n           int size = innerList.size();\n \n-          if (innerList.size() > 0) {\n+          if (size > 0) {\n             Iterator iter = innerList.iterator();\n-            Map identifiersEventsMap = new HashMap();\n             ChainsawEventBatch eventBatch = new ChainsawEventBatch();\n \n             while (iter.hasNext()) {\n               LoggingEvent e = (LoggingEvent) iter.next();\n-              String eventType =\n-                e.getProperty(ChainsawConstants.EVENT_TYPE_KEY);\n-\n-              if (eventType == null) {\n-                eventType = ChainsawConstants.LOG4J_EVENT_TYPE;\n+              Vector properties = new Vector();\n+              Iterator iterx = e.getPropertyKeySet().iterator();\n+              while (iterx.hasNext()) {\n+                  String thisProp = iterx.next().toString();\n+                  properties.add(thisProp +\" \" + e.getProperty(thisProp));\n               }\n-\n-              String ident = getTabIdentifier(e);\n-              eventBatch.addEvent(ident, eventType, e);\n+              eventBatch.addEvent(\n+                getTabIdentifier(e),\n+                (e.getProperty(ChainsawConstants.EVENT_TYPE_KEY) == null)\n+                ? ChainsawConstants.LOG4J_EVENT_TYPE\n+                : e.getProperty(ChainsawConstants.EVENT_TYPE_KEY), e);\n             }\n \n             dispatchEventBatch(eventBatch);\n \n             innerList.clear();\n           }\n \n-\n-\n           try {\n-            Thread.sleep(getQueueInterval());\n+            synchronized (this) {\n+              wait(getQueueInterval());\n+            }\n           } catch (InterruptedException ie) {\n           }\n-\t\t  if (size == 0) {\n-\t\t\tsetDataRate(0.0);\n-\t\t  } else {\n-\t\t\tlong timeEnd = System.currentTimeMillis();\n-\t\t\tlong diffInSeconds = (timeEnd - timeStart)/1000;\n-\t\t\tdouble rate = (((double) size) / diffInSeconds);\n-\t\t\tsetDataRate(rate);\n-\t\t  }\n+\n+          if (size == 0) {\n+            setDataRate(0.0);\n+          } else {\n+            long timeEnd = System.currentTimeMillis();\n+            long diffInSeconds = (timeEnd - timeStart) / 1000;\n+            double rate = (((double) size) / diffInSeconds);\n+            setDataRate(rate);\n+          }\n         }\n       }\n ",
                "raw_url": "https://github.com/apache/chainsaw/raw/8f90f4ddce2f03b5e0e7c8d538c828689752681d/src/java/org/apache/log4j/chainsaw/ChainsawAppenderHandler.java",
                "sha": "68fa480e41b16664cf53cb4a24b39ed06573ff8c",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/chainsaw/blob/8f90f4ddce2f03b5e0e7c8d538c828689752681d/src/java/org/apache/log4j/chainsaw/ChainsawCyclicBufferTableModel.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/chainsaw/contents/src/java/org/apache/log4j/chainsaw/ChainsawCyclicBufferTableModel.java?ref=8f90f4ddce2f03b5e0e7c8d538c828689752681d",
                "deletions": 12,
                "filename": "src/java/org/apache/log4j/chainsaw/ChainsawCyclicBufferTableModel.java",
                "patch": "@@ -90,9 +90,11 @@\n class ChainsawCyclicBufferTableModel extends AbstractTableModel\n   implements EventContainer, PropertyChangeListener {\n   private boolean cyclic = true;\n-  private final int INITIAL_CAPACITY = 5000;\n-  List unfilteredList = new CyclicBufferList(INITIAL_CAPACITY);\n-  List filteredList = new CyclicBufferList(INITIAL_CAPACITY);\n+  private final int DEFAULT_CAPACITY = 5000;\n+  private int capacity = DEFAULT_CAPACITY;\n+  private static final String PANEL_CAPACITY = \"CHAINSAW_CAPACITY\";\n+  List unfilteredList = new CyclicBufferList(capacity);\n+  List filteredList = new CyclicBufferList(capacity);\n   private boolean currentSortAscending;\n   private int currentSortColumn;\n   private EventListenerList eventListenerList = new EventListenerList();\n@@ -115,6 +117,11 @@\n \n   public ChainsawCyclicBufferTableModel() {\n     propertySupport.addPropertyChangeListener(\"cyclic\", new ModelChanger());\n+    if (System.getProperty(PANEL_CAPACITY) != null) {\n+        try {\n+            capacity = Integer.parseInt(System.getProperty(PANEL_CAPACITY));\n+        } catch (NumberFormatException nfe) {}\n+    }\n   }\n \n   /**\n@@ -330,7 +337,10 @@ public Object getValueAt(int rowIndex, int columnIndex) {\n       return null;\n     }\n \n-    LocationInfo info = event.getLocationInformation();\n+    LocationInfo info = null;\n+    if (event.locationInformationExists()) {\n+        info = event.getLocationInformation();\n+    }\n \n     if (event == null) {\n       LogLog.error(\"Invalid rowindex=\" + rowIndex);\n@@ -376,16 +386,16 @@ public Object getValueAt(int rowIndex, int columnIndex) {\n       return event.getThrowableStrRep();\n \n     case ChainsawColumns.INDEX_CLASS_COL_NAME:\n-      return (info != null) ? info.getClassName() : \"\";\n+      return (info == null) ?  \"\" : info.getClassName();\n \n     case ChainsawColumns.INDEX_FILE_COL_NAME:\n-      return (info != null) ? info.getFileName() : \"\";\n+      return (info == null) ? \"\" : info.getFileName();\n \n     case ChainsawColumns.INDEX_LINE_COL_NAME:\n-      return (info != null) ? info.getLineNumber() : \"\";\n+      return (info == null) ? \"\" : info.getLineNumber();\n \n     case ChainsawColumns.INDEX_METHOD_COL_NAME:\n-      return (info != null) ? info.getMethodName() : \"\";\n+      return (info == null) ? \"\" : info.getMethodName();\n \n     default:\n \n@@ -594,9 +604,9 @@ public synchronized void run() {\n         List newFilteredList = null;\n \n         if (isCyclic()) {\n-          newFilteredList = new CyclicBufferList(INITIAL_CAPACITY);\n+          newFilteredList = new CyclicBufferList(capacity);\n         } else {\n-          newFilteredList = new ArrayList(INITIAL_CAPACITY);\n+          newFilteredList = new ArrayList(capacity);\n         }\n \n         synchronized (unfilteredList) {\n@@ -669,9 +679,9 @@ public void run() {\n                   List newUnfilteredList = null;\n \n                   if (isCyclic()) {\n-                    newUnfilteredList = new CyclicBufferList(INITIAL_CAPACITY);\n+                    newUnfilteredList = new CyclicBufferList(capacity);\n                   } else {\n-                    newUnfilteredList = new ArrayList(INITIAL_CAPACITY);\n+                    newUnfilteredList = new ArrayList(capacity);\n                   }\n \n                   for (Iterator iter = unfilteredList.iterator();",
                "raw_url": "https://github.com/apache/chainsaw/raw/8f90f4ddce2f03b5e0e7c8d538c828689752681d/src/java/org/apache/log4j/chainsaw/ChainsawCyclicBufferTableModel.java",
                "sha": "28676159ea623d5e8b908bb89a0a2967d57b20f0",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/chainsaw/blob/8f90f4ddce2f03b5e0e7c8d538c828689752681d/src/java/org/apache/log4j/chainsaw/ChainsawEventBatchEntry.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/chainsaw/contents/src/java/org/apache/log4j/chainsaw/ChainsawEventBatchEntry.java?ref=8f90f4ddce2f03b5e0e7c8d538c828689752681d",
                "deletions": 15,
                "filename": "src/java/org/apache/log4j/chainsaw/ChainsawEventBatchEntry.java",
                "patch": "@@ -57,9 +57,6 @@\n \n import org.apache.log4j.spi.LoggingEvent;\n \n-import java.util.Vector;\n-\n-\n /**\n  * A simple container of Events, mapped to an identifier\n  * @author Paul Smith <psmith@apache.org>\n@@ -82,18 +79,6 @@ String getEventType() {\n     return eventType;\n   }\n \n-  /**\n-   * @deprecated\n-   * @return\n-   */\n-  Vector getEventVector() {\n-    return ChainsawAppenderHandler.convert(getEvent());\n-//    throw new UnsupportedOperationException(\n-//      \"Transistion to non Vector based model\");\n-\n-    //    return eventVector;\n-  }\n-\n   public LoggingEvent getEvent() {\n     return event;\n   }",
                "raw_url": "https://github.com/apache/chainsaw/raw/8f90f4ddce2f03b5e0e7c8d538c828689752681d/src/java/org/apache/log4j/chainsaw/ChainsawEventBatchEntry.java",
                "sha": "c547e618f66acc410860bd09f83ae3c86adbf331",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/chainsaw/blob/8f90f4ddce2f03b5e0e7c8d538c828689752681d/src/java/org/apache/log4j/chainsaw/ColumnComparator.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/chainsaw/contents/src/java/org/apache/log4j/chainsaw/ColumnComparator.java?ref=8f90f4ddce2f03b5e0e7c8d538c828689752681d",
                "deletions": 6,
                "filename": "src/java/org/apache/log4j/chainsaw/ColumnComparator.java",
                "patch": "@@ -100,8 +100,8 @@ public int compare(Object o1, Object o2) {\n       case ChainsawColumns.INDEX_METHOD_COL_NAME:\n \n         if (\n-          (e1.getLocationInformation() != null)\n-            & (e2.getLocationInformation() != null)) {\n+          (e1.locationInformationExists())\n+            & (e2.locationInformationExists())) {\n           sort =\n             e1.getLocationInformation().getMethodName().compareToIgnoreCase(\n               e2.getLocationInformation().getMethodName());\n@@ -112,8 +112,8 @@ public int compare(Object o1, Object o2) {\n       case ChainsawColumns.INDEX_CLASS_COL_NAME:\n \n         if (\n-          (e1.getLocationInformation() != null)\n-            & (e2.getLocationInformation() != null)) {\n+          (e1.locationInformationExists())\n+            & (e2.locationInformationExists())) {\n           sort =\n             e1.getLocationInformation().getClassName().compareToIgnoreCase(\n               e2.getLocationInformation().getClassName());\n@@ -124,8 +124,8 @@ public int compare(Object o1, Object o2) {\n       case ChainsawColumns.INDEX_FILE_COL_NAME:\n \n         if (\n-          (e1.getLocationInformation() != null)\n-            & (e2.getLocationInformation() != null)) {\n+          (e1.locationInformationExists())\n+            & (e2.locationInformationExists())) {\n           sort =\n             e1.getLocationInformation().getFileName().compareToIgnoreCase(\n               e2.getLocationInformation().getFileName());",
                "raw_url": "https://github.com/apache/chainsaw/raw/8f90f4ddce2f03b5e0e7c8d538c828689752681d/src/java/org/apache/log4j/chainsaw/ColumnComparator.java",
                "sha": "1dbfff8e88b3596d691f351eb9f3d53e9b218495",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/chainsaw/blob/8f90f4ddce2f03b5e0e7c8d538c828689752681d/src/java/org/apache/log4j/chainsaw/Details_XMLSocketReceiver.html",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/chainsaw/contents/src/java/org/apache/log4j/chainsaw/Details_XMLSocketReceiver.html?ref=8f90f4ddce2f03b5e0e7c8d538c828689752681d",
                "deletions": 0,
                "filename": "src/java/org/apache/log4j/chainsaw/Details_XMLSocketReceiver.html",
                "patch": "@@ -0,0 +1,21 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n+<html>\n+<Head><link rel=\"stylesheet\" href=\"stylesheet.css\" type=\"text/css\"></head>\n+<body>\n+<B>XML Socket Receiver</b>\n+<p>XMLSocketReceiver compliments externally provided SocketAppenders. <br>\n+XMLSocketReceiver supports Log4J's log4j.dtd and Java 1.4's logger.dtd.<br>\n+However, only Log4J's log4j.dtd is currently supported when defining the receiver \n+through this panel.\n+</p>\n+\n+<p>XMLSocketReceiver listens\n+on a specified port, accepting connections from remote sockets\n+, converts the XML into logging events received from these sockets,\n+and posts them into Chainsaw's local Log4j environment allowing you \n+to view them.</p>\n+<p>Click here to see more information about XMLSocketReceiver.</p>\n+\n+<p>Click <a href=\"http://jakarta.apache.org/log4j/docs/api/org/apache/log4j/net/XMLSocketAppender.html\">here</a> to see more information about SocketAppender.</p>\n+</body>\n+</html>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/chainsaw/raw/8f90f4ddce2f03b5e0e7c8d538c828689752681d/src/java/org/apache/log4j/chainsaw/Details_XMLSocketReceiver.html",
                "sha": "62aafa78233aa85807eecceed4be1690bbfa0d13",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/chainsaw/blob/8f90f4ddce2f03b5e0e7c8d538c828689752681d/src/java/org/apache/log4j/chainsaw/FileLoadAction.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/chainsaw/contents/src/java/org/apache/log4j/chainsaw/FileLoadAction.java?ref=8f90f4ddce2f03b5e0e7c8d538c828689752681d",
                "deletions": 1,
                "filename": "src/java/org/apache/log4j/chainsaw/FileLoadAction.java",
                "patch": "@@ -135,7 +135,7 @@ public void actionPerformed(ActionEvent e) {\n     chooser.setFileFilter(\n       new FileFilter() {\n         public boolean accept(File f) {\n-          return f.getName().toLowerCase().endsWith(\".xml\");\n+          return (f.getName().toLowerCase().endsWith(\".xml\")|| f.isDirectory());\n         }\n \n         public String getDescription() {",
                "raw_url": "https://github.com/apache/chainsaw/raw/8f90f4ddce2f03b5e0e7c8d538c828689752681d/src/java/org/apache/log4j/chainsaw/FileLoadAction.java",
                "sha": "37086c8e2e93bbb0f1e7c5a11d513ec42f7af115",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/chainsaw/blob/8f90f4ddce2f03b5e0e7c8d538c828689752681d/src/java/org/apache/log4j/chainsaw/LogPanel.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/chainsaw/contents/src/java/org/apache/log4j/chainsaw/LogPanel.java?ref=8f90f4ddce2f03b5e0e7c8d538c828689752681d",
                "deletions": 2,
                "filename": "src/java/org/apache/log4j/chainsaw/LogPanel.java",
                "patch": "@@ -253,7 +253,7 @@ public void propertyChange(PropertyChangeEvent evt) {\n           boolean newValue = ((Boolean) evt.getNewValue()).booleanValue();\n \n           if (newValue) {\n-            lowerPanel.setDividerLocation(150);\n+            lowerPanel.setDividerLocation(400);\n           }\n \n           detailPanel.setVisible(newValue);\n@@ -904,7 +904,7 @@ public void actionPerformed(ActionEvent e) {\n       new JSplitPane(\n         JSplitPane.VERTICAL_SPLIT, eventsAndStatusPanel, detailPanel);\n     lowerPanel.setBorder(null);\n-    lowerPanel.setDividerLocation(150);\n+    lowerPanel.setDividerLocation(400);\n     lowerPanel.setLastDividerLocation(-1);\n     lowerPanel.setOneTouchExpandable(true);\n ",
                "raw_url": "https://github.com/apache/chainsaw/raw/8f90f4ddce2f03b5e0e7c8d538c828689752681d/src/java/org/apache/log4j/chainsaw/LogPanel.java",
                "sha": "bf33ef9572dea15f1c6368cf70e49b7cd1bdb34a",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/chainsaw/blob/8f90f4ddce2f03b5e0e7c8d538c828689752681d/src/java/org/apache/log4j/chainsaw/LoggingEventFieldResolver.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/chainsaw/contents/src/java/org/apache/log4j/chainsaw/LoggingEventFieldResolver.java?ref=8f90f4ddce2f03b5e0e7c8d538c828689752681d",
                "deletions": 5,
                "filename": "src/java/org/apache/log4j/chainsaw/LoggingEventFieldResolver.java",
                "patch": "@@ -49,6 +49,7 @@\n \n package org.apache.log4j.chainsaw;\n \n+import org.apache.log4j.spi.LocationInfo;\n import org.apache.log4j.spi.LoggingEvent;\n \n import java.util.ArrayList;\n@@ -139,19 +140,22 @@ public boolean isField(String fieldName) {\n \n   public Object getValue(String fieldName, LoggingEvent event) {\n     String upperField = fieldName.toUpperCase();\n-\n+    LocationInfo info = null;\n+    if (event.locationInformationExists()) {\n+        info = event.getLocationInformation();\n+    }\n     if (LOGGER_FIELD.equals(upperField)) {\n       return event.getLoggerName();\n     } else if (LEVEL_FIELD.equals(upperField)) {\n       return event.getLevel();\n     } else if (CLASS_FIELD.equals(upperField)) {\n-      return event.getLocationInformation().getClassName();\n+      return ((info == null) ? \"\" : info.getClassName());\n     } else if (FILE_FIELD.equals(upperField)) {\n-      return event.getLocationInformation().getFileName();\n+      return ((info == null) ? \"\" : info.getFileName());\n     } else if (LINE_FIELD.equals(upperField)) {\n-      return event.getLocationInformation().getLineNumber();\n+      return ((info == null) ? \"\" : info.getLineNumber());\n     } else if (METHOD_FIELD.equals(upperField)) {\n-      return event.getLocationInformation().getMethodName();\n+      return ((info == null) ? \"\" : info.getMethodName());\n     } else if (MSG_FIELD.equals(upperField)) {\n       return event.getMessage();\n     } else if (NDC_FIELD.equals(upperField)) {",
                "raw_url": "https://github.com/apache/chainsaw/raw/8f90f4ddce2f03b5e0e7c8d538c828689752681d/src/java/org/apache/log4j/chainsaw/LoggingEventFieldResolver.java",
                "sha": "829a32ec4f3bde1aa9df25a207ff78689e0c24e3",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/chainsaw/blob/8f90f4ddce2f03b5e0e7c8d538c828689752681d/src/java/org/apache/log4j/chainsaw/ReceiversPanel.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/chainsaw/contents/src/java/org/apache/log4j/chainsaw/ReceiversPanel.java?ref=8f90f4ddce2f03b5e0e7c8d538c828689752681d",
                "deletions": 1,
                "filename": "src/java/org/apache/log4j/chainsaw/ReceiversPanel.java",
                "patch": "@@ -123,6 +123,7 @@\n import org.apache.log4j.net.SocketReceiver;\n import org.apache.log4j.net.UDPAppender;\n import org.apache.log4j.net.UDPReceiver;\n+import org.apache.log4j.net.XMLSocketReceiver;\n import org.apache.log4j.plugins.Pauseable;\n import org.apache.log4j.plugins.PluginRegistry;\n import org.apache.log4j.plugins.Receiver;\n@@ -664,6 +665,13 @@ private List createSortedDialogMapEntryList() throws IOException {\n           new SimplePortBasedReceiverDialogPanel(\n             UDPReceiver.class, \"UDPReceiver\", UDPAppender.DEFAULT_PORT)));\n \n+        dialogMap.put(\n+          XMLSocketReceiver.class,\n+          new CreateReceiverDialog(\n+            XMLSocketReceiver.class, \"XMLSocketReceiver\", \"XML Socket Receiver (log4j.dtd)\",\n+            new SimplePortBasedReceiverDialogPanel(\n+              XMLSocketReceiver.class, \"XMLSocketReceiver\", XMLSocketReceiver.DEFAULT_PORT)));\n+\n       List dialogMapEntryList = new ArrayList();\n \n       for (Iterator iter = dialogMap.entrySet().iterator(); iter.hasNext();) {\n@@ -715,8 +723,10 @@ public void show(Component invoker, int x, int y) {\n \n       if (userObject == getRootOfTree().getUserObject()) {\n         buildForReceiversRoot();\n-      } else {\n+      } else if (getCurrentlySelectedReceiver() != null) {\n         buildForReceiverNode();\n+      } else {\n+          return;\n       }\n \n       this.invalidate();",
                "raw_url": "https://github.com/apache/chainsaw/raw/8f90f4ddce2f03b5e0e7c8d538c828689752681d/src/java/org/apache/log4j/chainsaw/ReceiversPanel.java",
                "sha": "babebf60856bf8c7577c3e7665515fd9f94045c4",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/chainsaw/blob/8f90f4ddce2f03b5e0e7c8d538c828689752681d/src/java/org/apache/log4j/chainsaw/ReceiversTreeModel.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/chainsaw/contents/src/java/org/apache/log4j/chainsaw/ReceiversTreeModel.java?ref=8f90f4ddce2f03b5e0e7c8d538c828689752681d",
                "deletions": 6,
                "filename": "src/java/org/apache/log4j/chainsaw/ReceiversTreeModel.java",
                "patch": "@@ -173,16 +173,18 @@ public void pluginStopped(PluginEvent e) {\n       Receiver receiver = (Receiver) e.getPlugin();\n       DefaultMutableTreeNode node =\n         (DefaultMutableTreeNode) resolvePluginNode(receiver);\n-      int index = getRootNode().getIndex(node);\n-      getRootNode().remove(node);\n-      nodesWereRemoved(\n-        getRootNode(), new int[] { index }, new Object[] { node });\n-      pluginNodeMap.remove(receiver);\n+        if (node != null) {\n+            int index = getRootNode().getIndex(node);\n+            getRootNode().remove(node);\n+            nodesWereRemoved(\n+                getRootNode(), new int[] { index }, new Object[] { node });\n+            pluginNodeMap.remove(receiver);\n+        }\n \n       if (getRootNode().getChildCount() == 0) {\n         getRootNode().add(NoReceiversNode);\n \n-        index = getRootNode().getIndex(NoReceiversNode);\n+        int index = getRootNode().getIndex(NoReceiversNode);\n         nodesWereInserted(getRootNode(), new int[] { index });\n       }\n     }",
                "raw_url": "https://github.com/apache/chainsaw/raw/8f90f4ddce2f03b5e0e7c8d538c828689752681d/src/java/org/apache/log4j/chainsaw/ReceiversTreeModel.java",
                "sha": "f88a2a78610e003f4cf243a63489d3f7be84b5e9",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/chainsaw/blob/8f90f4ddce2f03b5e0e7c8d538c828689752681d/src/java/org/apache/log4j/chainsaw/filter/FilterModel.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/chainsaw/contents/src/java/org/apache/log4j/chainsaw/filter/FilterModel.java?ref=8f90f4ddce2f03b5e0e7c8d538c828689752681d",
                "deletions": 1,
                "filename": "src/java/org/apache/log4j/chainsaw/filter/FilterModel.java",
                "patch": "@@ -77,7 +77,7 @@ public void processNewLoggingEvent(String eventType, LoggingEvent event) {\n     container.addNDC(event.getNDC());\n     container.addMDCKeys(event.getMDCKeySet());\n \n-    if (event.getLocationInformation() != null) {\n+    if (event.locationInformationExists()) {\n       LocationInfo info = event.getLocationInformation();\n       container.addClass(info.getClassName());\n       container.addMethod(info.getMethodName());",
                "raw_url": "https://github.com/apache/chainsaw/raw/8f90f4ddce2f03b5e0e7c8d538c828689752681d/src/java/org/apache/log4j/chainsaw/filter/FilterModel.java",
                "sha": "997f8872d87531036d1551332a790715502dacb5",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/chainsaw/blob/8f90f4ddce2f03b5e0e7c8d538c828689752681d/src/java/org/apache/log4j/chainsaw/layout/EventDetailLayout.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/chainsaw/contents/src/java/org/apache/log4j/chainsaw/layout/EventDetailLayout.java?ref=8f90f4ddce2f03b5e0e7c8d538c828689752681d",
                "deletions": 1,
                "filename": "src/java/org/apache/log4j/chainsaw/layout/EventDetailLayout.java",
                "patch": "@@ -219,7 +219,10 @@ private static LoggingEvent copyForHTML(LoggingEvent event) {\n     String ndc = event.getNDC();\n     Hashtable mdc = formatMDC(event);\n     String[] throwableStringRep = event.getThrowableStrRep();\n-    LocationInfo li = formatLocationInfo(event);\n+    LocationInfo li = null;\n+    if (event.locationInformationExists()) {\n+        formatLocationInfo(event);\n+    }\n     Hashtable properties = formatProperties(event);\n     LoggingEvent copy =\n       new LoggingEvent(",
                "raw_url": "https://github.com/apache/chainsaw/raw/8f90f4ddce2f03b5e0e7c8d538c828689752681d/src/java/org/apache/log4j/chainsaw/layout/EventDetailLayout.java",
                "sha": "f2b0ef7a78ce45a4fa50324352a9ba574b4e274c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/chainsaw/blob/8f90f4ddce2f03b5e0e7c8d538c828689752681d/src/java/org/apache/log4j/chainsaw/rule/RuleTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/chainsaw/contents/src/java/org/apache/log4j/chainsaw/rule/RuleTest.java?ref=8f90f4ddce2f03b5e0e7c8d538c828689752681d",
                "deletions": 0,
                "filename": "src/java/org/apache/log4j/chainsaw/rule/RuleTest.java",
                "patch": "@@ -233,6 +233,7 @@ public static void main(String[] args) {\n     String lastField = null;\n     JPopupMenu contextMenu = new JPopupMenu();\n     JList list = new JList();\n+ \n     JScrollPane scrollPane = new JScrollPane(list);\n     final JTextField textField;\n     private DefaultListModel fieldModel = new DefaultListModel();",
                "raw_url": "https://github.com/apache/chainsaw/raw/8f90f4ddce2f03b5e0e7c8d538c828689752681d/src/java/org/apache/log4j/chainsaw/rule/RuleTest.java",
                "sha": "d644e7a47698e727994fdb5f40e4b23ed2d5c212",
                "status": "modified"
            }
        ],
        "message": "Bug fix commit\nChanges:\n\n* build.xml - copy logger.dtd into jar\n* locationinfo - non-log4j apps may only specify a subset of the locationinfo fields (the rest would be null), a check was added to prevent an NPE on each accessor\n* loggingevent - Added locationInformationExists method (getLocationInfo creates a location info if it does not exist), and added exist checks to code as needed to prevent location info construction\n* loggingevent - modified setProperty behavior, if value is null, the property is removed\n* receiverpanel - add xmlsocketreceiver support(built-in support for reception of xml-formatted log4j events via tcp socket)\n* utillogginglevel - modified intvalues so that the lowest value is greater than log4j's debug level intvalue (so the appender skeleton would forward the events correctly with threshold set to debug)\n* fileloadaction - when attempting to load an xml file, directories are displayed as well as xml files\n* modified thread code in chainsawappenderhandler in an attempt to improve performance\n* multicastappender/udpappender - removing internally specified properties (log4japp/log4jmachine name) so the rest of the appenders in the appender chain could specify these properties themselves or the default behavior of using the remote machine could be used\n* multicastappender/receiver, udpappender/receiver added encoding support (chartset) as a property.  If none set, the default system encoding is used.\n* xmlsocketreceiver/udpreceiver/multicastreceiver - added pausable support (useful in receiver panel)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/chainsaw/trunk@307733 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/chainsaw/commit/ffe729161217fa37ab199cbc0be825ea92e45491",
        "patched_files": [
            "EventDetailLayout.java",
            "ChainsawCyclicBufferTableModel.java",
            "FilterModel.java",
            "LogPanel.java",
            "LoggingEventFieldResolver.java",
            "FileLoadAction.java",
            "Rule.java",
            "ColumnComparator.java",
            "ReceiversPanel.java",
            "ReceiversTreeModel.java",
            "ChainsawAppenderHandler.java",
            "Details_XMLSocketReceiver.java",
            "ChainsawEventBatchEntry.java"
        ],
        "repo": "chainsaw",
        "unit_tests": [
            "RuleTest.java"
        ]
    }
}