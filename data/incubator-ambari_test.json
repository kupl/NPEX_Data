{
    "incubator-ambari_45a53ed": {
        "bug_id": "incubator-ambari_45a53ed",
        "commit": "https://github.com/apache/incubator-ambari/commit/45a53ede17c6a1f451bbf0a795a5cac6dec04298",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/45a53ede17c6a1f451bbf0a795a5cac6dec04298/ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java?ref=45a53ede17c6a1f451bbf0a795a5cac6dec04298",
                "deletions": 1,
                "filename": "ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java",
                "patch": "@@ -222,7 +222,9 @@ public StreamProvider getStreamProvider() {\n           Map<String, PropertyInfo> componentMetricMap =\n             getComponentMetrics().get(getComponentName(resource));\n \n-          if (!componentMetricMap.containsKey(id)) {\n+          // Not all components have metrics\n+          if (componentMetricMap != null &&\n+              !componentMetricMap.containsKey(id)) {\n             updateComponentMetricMap(componentMetricMap, id);\n           }\n ",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/45a53ede17c6a1f451bbf0a795a5cac6dec04298/ambari-server/src/main/java/org/apache/ambari/server/controller/ganglia/GangliaPropertyProvider.java",
                "sha": "6cc981ccba3381269f53a6d90fd942a9f6b93fe7",
                "status": "modified"
            }
        ],
        "message": "AMBARI-3119. NullPointerException thrown while retrieving ganglia properties. (swagle)",
        "parent": "https://github.com/apache/incubator-ambari/commit/ceb2fc41299cf172b898a02a2581d55a1109ffe3",
        "patched_files": [
            "GangliaPropertyProvider.java"
        ],
        "repo": "incubator-ambari",
        "unit_tests": [
            "GangliaPropertyProviderTest.java"
        ]
    },
    "incubator-ambari_9496abd": {
        "bug_id": "incubator-ambari_9496abd",
        "commit": "https://github.com/apache/incubator-ambari/commit/9496abdd25f5c93afd9d866d4f1626d6c547d2c2",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/9496abdd25f5c93afd9d866d4f1626d6c547d2c2/ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java?ref=9496abdd25f5c93afd9d866d4f1626d6c547d2c2",
                "deletions": 4,
                "filename": "ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java",
                "patch": "@@ -275,8 +275,10 @@ public RepositoryInfo getRepository(String stackName,\n   public boolean isSupportedStack(String stackName, String version) throws AmbariException {\n     boolean exist = false;\n     try {\n-      getStackInfo(stackName, version);\n-      exist = true;\n+      StackInfo stackInfo = getStackInfo(stackName, version);\n+      if (stackInfo != null) {\n+        exist = true;\n+      }\n     } catch (ObjectNotFoundException e) {\n     }\n     return exist;\n@@ -290,8 +292,10 @@ public boolean isValidService(String stackName, String version,\n \n     boolean exist = false;\n     try {\n-      getServiceInfo(stackName, version, serviceName);\n-      exist = true;\n+      ServiceInfo info= getServiceInfo(stackName, version, serviceName);\n+      if (info != null) {\n+        exist = true;\n+      }\n     } catch (ObjectNotFoundException e) {\n     }\n     return exist;",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/9496abdd25f5c93afd9d866d4f1626d6c547d2c2/ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java",
                "sha": "d1de2a2fd37442953294c5b60139a9ff4ec75709",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/9496abdd25f5c93afd9d866d4f1626d6c547d2c2/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java?ref=9496abdd25f5c93afd9d866d4f1626d6c547d2c2",
                "deletions": 1,
                "filename": "ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java",
                "patch": "@@ -134,7 +134,7 @@ public void isValidService() throws AmbariException {\n         SERVICE_NAME_HDFS);\n     assertTrue(valid);\n \n-    boolean invalid = metaInfo.isValidService(STACK_NAME_HDP, NON_EXT_VALUE, NON_EXT_VALUE);\n+    boolean invalid = metaInfo.isValidService(STACK_NAME_HDP, STACK_VERSION_HDP, NON_EXT_VALUE);\n     assertFalse(invalid);\n   }\n ",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/9496abdd25f5c93afd9d866d4f1626d6c547d2c2/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java",
                "sha": "56d24d322c47f01df5f44eaae1b8bdcc8ae0f5d7",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/9496abdd25f5c93afd9d866d4f1626d6c547d2c2/ambari-server/src/test/java/org/apache/ambari/server/controller/AmbariManagementControllerTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-server/src/test/java/org/apache/ambari/server/controller/AmbariManagementControllerTest.java?ref=9496abdd25f5c93afd9d866d4f1626d6c547d2c2",
                "deletions": 1,
                "filename": "ambari-server/src/test/java/org/apache/ambari/server/controller/AmbariManagementControllerTest.java",
                "patch": "@@ -606,7 +606,7 @@ public void testCreateServicesMultiple() throws AmbariException {\n     controller.createServices(set1);\n \n     try {\n-      valid1 = new ServiceRequest(\"foo\", \"bar\", null, null);\n+      valid1 = new ServiceRequest(\"foo\", \"PIG\", null, null);\n       valid2 = new ServiceRequest(\"foo\", \"MAPREDUCE\", null, null);\n       set1.add(valid1);\n       set1.add(valid2);",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/9496abdd25f5c93afd9d866d4f1626d6c547d2c2/ambari-server/src/test/java/org/apache/ambari/server/controller/AmbariManagementControllerTest.java",
                "sha": "7a63a85cd16c56c9ca0076b9049fe326f377f83f",
                "status": "modified"
            }
        ],
        "message": "AMBARI-3110. NullPointerException when trying to access a service that does not exist (dlysnichenko)",
        "parent": "https://github.com/apache/incubator-ambari/commit/f8e59976d7ab96e1407b40795ebf2b6295169f71",
        "patched_files": [
            "AmbariMetaInfo.java",
            "AmbariManagementController.java"
        ],
        "repo": "incubator-ambari",
        "unit_tests": [
            "AmbariMetaInfoTest.java",
            "AmbariManagementControllerTest.java"
        ]
    },
    "incubator-ambari_978f4cd": {
        "bug_id": "incubator-ambari_978f4cd",
        "commit": "https://github.com/apache/incubator-ambari/commit/978f4cd86a62f5b70b4af6bf9ab9e761928e2055",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/978f4cd86a62f5b70b4af6bf9ab9e761928e2055/ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerNoOpProvider.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerNoOpProvider.java?ref=978f4cd86a62f5b70b4af6bf9ab9e761928e2055",
                "deletions": 0,
                "filename": "ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerNoOpProvider.java",
                "patch": "@@ -21,11 +21,18 @@\n import org.apache.ambari.server.controller.spi.Request;\n import org.apache.ambari.server.controller.spi.Resource;\n \n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n /**\n  * A NO-OP resource provider for a gsInstaller defined cluster.\n  */\n public class GSInstallerNoOpProvider extends GSInstallerResourceProvider{\n \n+  private final Map<Resource.Type, String> keyPropertyIds = new HashMap<Resource.Type, String>();\n+\n   // ----- GSInstallerResourceProvider ---------------------------------------\n \n   @Override\n@@ -37,5 +44,17 @@ public void updateProperties(Resource resource, Request request, Predicate predi\n \n   public GSInstallerNoOpProvider(Resource.Type type, ClusterDefinition clusterDefinition) {\n     super(type, clusterDefinition);\n+    keyPropertyIds.put(type, \"id\");\n+  }\n+\n+\n+  @Override\n+  public Map<Resource.Type, String> getKeyPropertyIds() {\n+    return keyPropertyIds;\n+  }\n+\n+  @Override\n+  public Set<String> checkPropertyIds(Set<String> propertyIds) {\n+    return Collections.emptySet();\n   }\n }",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/978f4cd86a62f5b70b4af6bf9ab9e761928e2055/ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerNoOpProvider.java",
                "sha": "948b7f59efee1cf05fb9f738e1e504e98f4f0913",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/978f4cd86a62f5b70b4af6bf9ab9e761928e2055/ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerResourceProvider.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerResourceProvider.java?ref=978f4cd86a62f5b70b4af6bf9ab9e761928e2055",
                "deletions": 1,
                "filename": "ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerResourceProvider.java",
                "patch": "@@ -140,8 +140,17 @@ protected ClusterDefinition getClusterDefinition() {\n     return clusterDefinition;\n   }\n \n+  /**\n+   * Get the resource provider type.\n+   *\n+   * @return the type\n+   */\n+  public Resource.Type getType() {\n+    return type;\n+  }\n+\n \n-  // ----- helper methods ----------------------------------------------------\n+// ----- helper methods ----------------------------------------------------\n \n   /**\n    * Get the set of property ids required to satisfy the given request.",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/978f4cd86a62f5b70b4af6bf9ab9e761928e2055/ambari-server/src/main/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerResourceProvider.java",
                "sha": "539978ed345f9f443ac96cf075ea8bfc74758ffe",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/978f4cd86a62f5b70b4af6bf9ab9e761928e2055/ambari-server/src/test/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerNoOpProviderTest.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-server/src/test/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerNoOpProviderTest.java?ref=978f4cd86a62f5b70b4af6bf9ab9e761928e2055",
                "deletions": 0,
                "filename": "ambari-server/src/test/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerNoOpProviderTest.java",
                "patch": "@@ -0,0 +1,27 @@\n+package org.apache.ambari.server.controller.gsinstaller;\n+\n+import junit.framework.Assert;\n+import org.apache.ambari.server.controller.spi.Resource;\n+import org.junit.Test;\n+\n+import java.util.Collections;\n+\n+/**\n+ * GSInstallerNoOpProvider tests.\n+ */\n+public class GSInstallerNoOpProviderTest {\n+\n+  @Test\n+  public void testGetKeyPropertyIds() throws Exception {\n+    ClusterDefinition clusterDefinition = new ClusterDefinition(new TestGSInstallerStateProvider());\n+    GSInstallerNoOpProvider provider = new GSInstallerNoOpProvider(Resource.Type.Workflow, clusterDefinition);\n+    Assert.assertNotNull(provider.getKeyPropertyIds());\n+  }\n+\n+  @Test\n+  public void testCheckPropertyIds() throws Exception {\n+    ClusterDefinition clusterDefinition = new ClusterDefinition(new TestGSInstallerStateProvider());\n+    GSInstallerNoOpProvider provider = new GSInstallerNoOpProvider(Resource.Type.Workflow, clusterDefinition);\n+    Assert.assertTrue(provider.checkPropertyIds(Collections.singleton(\"id\")).isEmpty());\n+  }\n+}",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/978f4cd86a62f5b70b4af6bf9ab9e761928e2055/ambari-server/src/test/java/org/apache/ambari/server/controller/gsinstaller/GSInstallerNoOpProviderTest.java",
                "sha": "f0e66cd8c5910160aa14f1cb074dddf8b884e332",
                "status": "added"
            }
        ],
        "message": "AMBARI-2747 - NPE in GSInstaller provider",
        "parent": "https://github.com/apache/incubator-ambari/commit/9ab6227eb342c8215baae9998feaded9ecbea922",
        "patched_files": [
            "GSInstallerResourceProvider.java",
            "GSInstallerNoOpProvider.java"
        ],
        "repo": "incubator-ambari",
        "unit_tests": [
            "GSInstallerNoOpProviderTest.java"
        ]
    },
    "incubator-ambari_d4a2b2b": {
        "bug_id": "incubator-ambari_d4a2b2b",
        "commit": "https://github.com/apache/incubator-ambari/commit/d4a2b2b9eb0864dd26327c896547868f16a56f6e",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/d4a2b2b9eb0864dd26327c896547868f16a56f6e/contrib/ambari-log4j/src/main/java/org/apache/ambari/log4j/common/store/DatabaseStore.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/contrib/ambari-log4j/src/main/java/org/apache/ambari/log4j/common/store/DatabaseStore.java?ref=d4a2b2b9eb0864dd26327c896547868f16a56f6e",
                "deletions": 2,
                "filename": "contrib/ambari-log4j/src/main/java/org/apache/ambari/log4j/common/store/DatabaseStore.java",
                "patch": "@@ -96,10 +96,12 @@ public void persist(LoggingEvent originalEvent, Object parsedEvent)\n   @Override\n   public void close() throws IOException {\n     try {\n-      connection.close();\n+      if (this.initialized && this.connection != null) {\n+        connection.close();\n+      }\n     } catch (SQLException sqle) {\n       throw new IOException(\n-          \"Failed to close connectionto database \" + this.database, sqle);\n+          \"Failed to close connection to database \" + this.database, sqle);\n     }\n   }\n }",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/d4a2b2b9eb0864dd26327c896547868f16a56f6e/contrib/ambari-log4j/src/main/java/org/apache/ambari/log4j/common/store/DatabaseStore.java",
                "sha": "55934d42dc64997a244ff0b43a7efe7c99886eee",
                "status": "modified"
            },
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/d4a2b2b9eb0864dd26327c896547868f16a56f6e/contrib/ambari-log4j/src/test/java/org/apache/ambari/log4j/common/store/TestDatabaseStore.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/contrib/ambari-log4j/src/test/java/org/apache/ambari/log4j/common/store/TestDatabaseStore.java?ref=d4a2b2b9eb0864dd26327c896547868f16a56f6e",
                "deletions": 0,
                "filename": "contrib/ambari-log4j/src/test/java/org/apache/ambari/log4j/common/store/TestDatabaseStore.java",
                "patch": "@@ -0,0 +1,42 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ambari.log4j.common.store;\n+\n+import junit.framework.TestCase;\n+import org.apache.ambari.log4j.common.LogStoreUpdateProvider;\n+import org.apache.log4j.spi.LoggingEvent;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+\n+public class TestDatabaseStore extends TestCase {\n+\n+  class SampleLogStoreUpdateProvider implements LogStoreUpdateProvider {\n+    public void init(Connection connection) throws IOException {\n+    }\n+\n+    public void update(LoggingEvent originalEvent, Object parsedEvent)\n+        throws IOException {\n+    }\n+  }\n+\n+  public void testDatabaseStore() throws IOException {\n+    DatabaseStore store = new DatabaseStore(TestDatabaseStore.class.getName(), \"\", \"\", \"\",\n+        new SampleLogStoreUpdateProvider());\n+    store.close();\n+  }\n+}",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/d4a2b2b9eb0864dd26327c896547868f16a56f6e/contrib/ambari-log4j/src/test/java/org/apache/ambari/log4j/common/store/TestDatabaseStore.java",
                "sha": "bafe16c041f5377012e8d8083630f27c8f672faa",
                "status": "added"
            }
        ],
        "message": "AMBARI-2526. NPE in the ambari log4j when the threads are shutting down. (smohanty)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/ambari/trunk@1498603 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/incubator-ambari/commit/2b671a163da30ae9693726c0d6e5ce1b9f880ae2",
        "patched_files": [
            "DatabaseStore.java"
        ],
        "repo": "incubator-ambari",
        "unit_tests": [
            "TestDatabaseStore.java"
        ]
    },
    "incubator-ambari_dfb7f03": {
        "bug_id": "incubator-ambari_dfb7f03",
        "commit": "https://github.com/apache/incubator-ambari/commit/dfb7f03927aee48e81597a1dad0b270067c68563",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/dfb7f03927aee48e81597a1dad0b270067c68563/AMBARI-666-CHANGES.txt",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/AMBARI-666-CHANGES.txt?ref=dfb7f03927aee48e81597a1dad0b270067c68563",
                "deletions": 0,
                "filename": "AMBARI-666-CHANGES.txt",
                "patch": "@@ -12,6 +12,9 @@ AMBARI-666 branch (unreleased changes)\n \n   NEW FEATURES\n \n+  AMBARI-801. Fix heartbeat message from the agent which is causing NPE at the\n+  server. (mahadev)\n+\n   AMBARI-778. Ensure data flows across all steps in installer wizard.\n   (Jaimin Jetly via yusaku)\n ",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/dfb7f03927aee48e81597a1dad0b270067c68563/AMBARI-666-CHANGES.txt",
                "sha": "4ccfd6238b92c5c35bcdc33f8f48d5c23cce5d7d",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/dfb7f03927aee48e81597a1dad0b270067c68563/ambari-agent/src/main/python/ambari_agent/Controller.py",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-agent/src/main/python/ambari_agent/Controller.py?ref=dfb7f03927aee48e81597a1dad0b270067c68563",
                "deletions": 1,
                "filename": "ambari-agent/src/main/python/ambari_agent/Controller.py",
                "patch": "@@ -107,7 +107,8 @@ def heartbeatWithServer(self):\n       try:\n         if retry==False:\n           data = json.dumps(self.heartbeat.build(id))\n-\n+          pass\n+        logger.info(\"Sending HeartBeat \" + pprint.pformat(data))\n         req = urllib2.Request(self.heartbeatUrl, data, {'Content-Type': 'application/json'})\n         \n         logger.info(data)",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/dfb7f03927aee48e81597a1dad0b270067c68563/ambari-agent/src/main/python/ambari_agent/Controller.py",
                "sha": "445399cc7340282bfaf8737dc207bf23cf892e3a",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/dfb7f03927aee48e81597a1dad0b270067c68563/ambari-agent/src/main/python/ambari_agent/Heartbeat.py",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-agent/src/main/python/ambari_agent/Heartbeat.py?ref=dfb7f03927aee48e81597a1dad0b270067c68563",
                "deletions": 2,
                "filename": "ambari-agent/src/main/python/ambari_agent/Heartbeat.py",
                "patch": "@@ -39,11 +39,15 @@ def build(self, id='-1'):\n     timestamp = int(time.time()*1000)\n     queueResult = self.actionQueue.result()\n     installedRoleStates = serverStatus.build()\n+    nodeStatus = { \"status\" : \"HEALTHY\",\n+                   \"cause\" : \"NONE\"}\n+    \n     heartbeat = { 'responseId'        : int(id),\n                   'timestamp'         : timestamp,\n                   'hostname'          : socket.gethostname(),\n-                  'reports'           : self.reports,\n-                  'componentStatus'   : self.componentStatus\n+                 # 'reports'           : self.reports,\n+                 # 'componentStatus'   : self.componentStatus,\n+                  'nodeStatus'        : nodeStatus\n                 }\n   \n     ",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/dfb7f03927aee48e81597a1dad0b270067c68563/ambari-agent/src/main/python/ambari_agent/Heartbeat.py",
                "sha": "e9215f766fa187c951ee8b0e9937cf8debc83bf6",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/dfb7f03927aee48e81597a1dad0b270067c68563/ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java?ref=dfb7f03927aee48e81597a1dad0b270067c68563",
                "deletions": 1,
                "filename": "ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java",
                "patch": "@@ -21,8 +21,13 @@\n \n import org.apache.ambari.server.agent.ActionQueue;\n import org.apache.ambari.server.agent.CommandReport;\n+import org.apache.ambari.server.agent.rest.AgentResource;\n import org.apache.ambari.server.state.live.Clusters;\n import org.apache.ambari.server.utils.StageUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import com.google.inject.Inject;\n import com.google.inject.Singleton;\n@@ -38,7 +43,8 @@\n   private final ActionDBAccessor db;\n   private final ActionQueue actionQueue;\n   private final Clusters fsm;\n-\n+  private static Logger LOG = LoggerFactory.getLogger(ActionManager.class);\n+  \n   @Inject\n   public ActionManager(@Named(\"schedulerSleeptime\") long schedulerSleepTime,\n       @Named(\"actionTimeout\") long actionTimeout,",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/dfb7f03927aee48e81597a1dad0b270067c68563/ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java",
                "sha": "baa3df8fe89260b0fd093c6416863b726f005cad",
                "status": "modified"
            }
        ],
        "message": "AMBARI-801. Fix heartbeat message from the agent which is causing NPE at the server. (mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/ambari/branches/AMBARI-666@1393810 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/incubator-ambari/commit/ff66974b8912a037662212052cbd05b96c11f6e3",
        "patched_files": [
            "ActionManager.java"
        ],
        "repo": "incubator-ambari",
        "unit_tests": [
            "TestActionManager.java"
        ]
    },
    "incubator-ambari_eb5f09c": {
        "bug_id": "incubator-ambari_eb5f09c",
        "commit": "https://github.com/apache/incubator-ambari/commit/eb5f09c8b637835e7b836b5a08ba469df7078d16",
        "file": [
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/eb5f09c8b637835e7b836b5a08ba469df7078d16/ambari-server/src/main/python/ambari-server.py",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-server/src/main/python/ambari-server.py?ref=eb5f09c8b637835e7b836b5a08ba469df7078d16",
                "deletions": 7,
                "filename": "ambari-server/src/main/python/ambari-server.py",
                "patch": "@@ -39,6 +39,7 @@\n import datetime\n import socket\n import tempfile\n+import random\n \n # debug settings\n VERBOSE = False\n@@ -93,6 +94,7 @@\n \n # openssl command\n EXPRT_KSTR_CMD = \"openssl pkcs12 -export -in {0} -inkey {1} -certfile {0} -out {3} -password pass:{2} -passin pass:{2}\"\n+CHANGE_KEY_PWD_CND = 'openssl rsa -in {0} -des3 -out {0}.secured -passout pass:{1}'\n \n # constants\n STACK_NAME_VER_SEP = \"-\"\n@@ -161,6 +163,7 @@\n SSL_KEY_FILE_NAME = \"ca.key\"\n SSL_KEYSTORE_FILE_NAME = \"keystore.p12\"\n SSL_KEY_PASSWORD_FILE_NAME = \"pass.txt\"\n+SSL_KEY_PASSWORD_LENGTH = 50\n DEFAULT_SSL_API_PORT = 8443\n \n JDBC_RCA_PASSWORD_ALIAS = \"ambari.db.password\"\n@@ -2707,12 +2710,24 @@ def import_cert_and_key(security_server_keys_dir):\n   import_key_path  =  get_validated_filepath_input(\\\n                       \"Please enter path to Private Key: \", \"Private Key not found\")\n   pem_password = get_validated_string_input(\"Please enter password for private key: \", \"\", None, None, True)\n-  keystoreFilePath = os.path.join(security_server_keys_dir,\\\n-                                  SSL_KEYSTORE_FILE_NAME)\n-  passFilePath = os.path.join(security_server_keys_dir,\\\n-                              SSL_KEY_PASSWORD_FILE_NAME)\n-  retcode, out, err = run_os_command(EXPRT_KSTR_CMD.format(import_cert_path,\\\n-  import_key_path, pem_password, keystoreFilePath))\n+\n+  #jetty requires private key files with non-empty key passwords\n+  retcode = 0\n+  err = ''\n+  if not pem_password:\n+    #print message here\n+    pem_password = generate_random_string()\n+    retcode, out, err = run_os_command(CHANGE_KEY_PWD_CND.format(\n+      import_key_path, pem_password))\n+    import_key_path += '.secured'\n+\n+  if retcode == 0:\n+    keystoreFilePath = os.path.join(security_server_keys_dir,\\\n+                                    SSL_KEYSTORE_FILE_NAME)\n+    passFilePath = os.path.join(security_server_keys_dir,\\\n+                                SSL_KEY_PASSWORD_FILE_NAME)\n+    retcode, out, err = run_os_command(EXPRT_KSTR_CMD.format(import_cert_path,\\\n+    import_key_path, pem_password, keystoreFilePath))\n \n   if retcode == 0:\n    print 'Importing and saving certificate...done.'\n@@ -2734,7 +2749,10 @@ def import_cert_and_key(security_server_keys_dir):\n def import_file_to_keystore(source, destination):\n   shutil.copy(source, destination)\n   set_file_permissions(destination, \"660\", read_ambari_user(), \"root\", False)\n- \n+\n+def generate_random_string(length=SSL_KEY_PASSWORD_LENGTH):\n+  chars = string.digits + string.ascii_letters\n+  return ''.join(random.choice(chars) for x in range(length))\n  \n def get_validated_filepath_input(prompt, description, default=None):\n   input = False",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/eb5f09c8b637835e7b836b5a08ba469df7078d16/ambari-server/src/main/python/ambari-server.py",
                "sha": "dc65747a86fd5d19f1d3697cf94f7b9a4a7974b0",
                "status": "modified"
            },
            {
                "additions": 58,
                "blob_url": "https://github.com/apache/incubator-ambari/blob/eb5f09c8b637835e7b836b5a08ba469df7078d16/ambari-server/src/test/python/TestAmbaryServer.py",
                "changes": 71,
                "contents_url": "https://api.github.com/repos/apache/incubator-ambari/contents/ambari-server/src/test/python/TestAmbaryServer.py?ref=eb5f09c8b637835e7b836b5a08ba469df7078d16",
                "deletions": 13,
                "filename": "ambari-server/src/test/python/TestAmbaryServer.py",
                "patch": "@@ -1116,26 +1116,63 @@ def test_import_cert_and_key(self, get_validated_string_input_mock,\\\n                                os_path_join_mock, run_os_command_mock,\\\n                                open_mock, import_file_to_keystore_mock,\\\n                                set_file_permissions_mock, read_ambari_user_mock):\n-  \tget_validated_string_input_mock.return_value = \"password\"\n-  \tget_validated_filepath_input_mock.side_effect = \\\n+    get_validated_string_input_mock.return_value = \"password\"\n+    get_validated_filepath_input_mock.side_effect = \\\n                                             [\"cert_file_path\",\"key_file_path\"]\n-  \tos_path_join_mock.side_effect = [\"cert_file_path\",\"key_file_path\",\\\n+    os_path_join_mock.side_effect = [\"cert_file_path\",\"key_file_path\",\\\n                                         \"keystore_cert_file_path\",\\\n                                         \"keystore_cert_key_file_path\",]\n-  \trun_os_command_mock.return_value = (0, \"\",\t\"\") \n-  \tom = open_mock.return_value\n-  \texpect_import_file_to_keystore = \"[call('cert_file_path',\"+\\\n+    run_os_command_mock.return_value = (0, \"\",\t\"\")\n+    om = open_mock.return_value\n+    expect_import_file_to_keystore = \"[call('cert_file_path',\"+\\\n                                           \" 'keystore_cert_file_path'),\\n\"+\\\n                                           \" call('key_file_path',\"+\\\n                                           \" 'keystore_cert_key_file_path')]\"\n \n-  \tambari_server.import_cert_and_key(\"key_dir\")\n-  \tself.assertTrue(get_validated_filepath_input_mock.call_count == 2)\n-  \tself.assertTrue(get_validated_string_input_mock.called)\n-  \tself.assertTrue(os_path_join_mock.call_count == 4)\n-  \tself.assertTrue(set_file_permissions_mock.call_count == 2)\n-  \tself.assertEqual(str(import_file_to_keystore_mock.call_args_list),\\\n-                         expect_import_file_to_keystore)      \n+    ambari_server.import_cert_and_key(\"key_dir\")\n+    self.assertTrue(get_validated_filepath_input_mock.call_count == 2)\n+    self.assertTrue(get_validated_string_input_mock.called)\n+    self.assertTrue(os_path_join_mock.call_count == 4)\n+    self.assertTrue(set_file_permissions_mock.call_count == 2)\n+    self.assertEqual(str(import_file_to_keystore_mock.call_args_list),\\\n+                         expect_import_file_to_keystore)\n+\n+  @patch.object(ambari_server, \"generate_random_string\")\n+  @patch.object(ambari_server, \"read_ambari_user\")\n+  @patch.object(ambari_server, \"set_file_permissions\")\n+  @patch.object(ambari_server, \"import_file_to_keystore\")\n+  @patch(\"__builtin__.open\")\n+  @patch.object(ambari_server, \"run_os_command\")\n+  @patch(\"os.path.join\")\n+  @patch.object(ambari_server, \"get_validated_filepath_input\")\n+  @patch.object(ambari_server, \"get_validated_string_input\")\n+  def test_import_cert_and_key_with_empty_password(self, \\\n+    get_validated_string_input_mock, get_validated_filepath_input_mock,\\\n+    os_path_join_mock, run_os_command_mock, open_mock, \\\n+    import_file_to_keystore_mock, set_file_permissions_mock,\n+    read_ambari_user_mock, generate_random_string_mock):\n+\n+    get_validated_string_input_mock.return_value = \"\"\n+    get_validated_filepath_input_mock.side_effect =\\\n+    [\"cert_file_path\",\"key_file_path\"]\n+    os_path_join_mock.side_effect = [\"cert_file_path\",\"key_file_path\",\\\n+                                     \"keystore_cert_file_path\",\\\n+                                     \"keystore_cert_key_file_path\",]\n+    run_os_command_mock.return_value = (0, \"\",\t\"\")\n+\n+    expect_import_file_to_keystore = \"[call('cert_file_path',\"+\\\n+                                     \" 'keystore_cert_file_path'),\\n\"+\\\n+                                     \" call('key_file_path.secured',\"+\\\n+                                     \" 'keystore_cert_key_file_path')]\"\n+\n+    ambari_server.import_cert_and_key(\"key_dir\")\n+    self.assertEquals(get_validated_filepath_input_mock.call_count, 2)\n+    self.assertTrue(get_validated_string_input_mock.called)\n+    self.assertEquals(os_path_join_mock.call_count, 4)\n+    self.assertEquals(set_file_permissions_mock.call_count, 2)\n+    self.assertEqual(str(import_file_to_keystore_mock.call_args_list),\\\n+      expect_import_file_to_keystore)\n+    self.assertTrue(generate_random_string_mock.called)\n \n   @patch.object(ambari_server, \"run_os_command\")\n   @patch(\"__builtin__.open\")\n@@ -3021,6 +3058,14 @@ def test_configure_ldap_password(self, read_password_method):\n     self.assertTrue(read_password_method.called)\n \n     sys.stdout = sys.__stdout__\n+    \n+  def test_generate_random_string(self):\n+    random_str_len = 100\n+    str1 = ambari_server.generate_random_string(random_str_len)\n+    self.assertTrue(len(str1) == random_str_len)\n+    \n+    str2 = ambari_server.generate_random_string(random_str_len)\n+    self.assertTrue(str1 != str2)\n \n \n ",
                "raw_url": "https://github.com/apache/incubator-ambari/raw/eb5f09c8b637835e7b836b5a08ba469df7078d16/ambari-server/src/test/python/TestAmbaryServer.py",
                "sha": "0aca4d3134d2adefc54f9c50a43cc0fcf8a6bd00",
                "status": "modified"
            }
        ],
        "message": "AMBARI-2511. NPE in AmbariServer startup with HTTPS configured. (Dmitry Sen via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/ambari/trunk@1497482 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/incubator-ambari/commit/28ebbafbc422be37d07fcf4b13fce96bab1797d4",
        "patched_files": [
            "ambari-server.java"
        ],
        "repo": "incubator-ambari",
        "unit_tests": [
            "TestAmbaryServer.java"
        ]
    }
}