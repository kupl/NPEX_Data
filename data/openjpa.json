{
    "openjpa_20e0762": {
        "bug_id": "openjpa_20e0762",
        "commit": "https://github.com/apache/openjpa/commit/20e0762e43734170fd7d97297693382329877b33",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/openjpa/blob/20e0762e43734170fd7d97297693382329877b33/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=20e0762e43734170fd7d97297693382329877b33",
                "deletions": 2,
                "filename": "openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java",
                "patch": "@@ -374,8 +374,12 @@ public Image getIcon(int kind) {\n         PropertyDescriptor[] pds = getPropertyDescriptors();\n         _mds = new MethodDescriptor[pds.length * 2];\n         for (int i = 0; i < pds.length; i++) {\n-            _mds[i * 2] = new MethodDescriptor(pds[i].getWriteMethod());\n-            _mds[(i * 2) + 1] = new MethodDescriptor(pds[i].getReadMethod());\n+            Method write = pds[i].getWriteMethod();\n+            if (write != null)\n+                _mds[i * 2] = new MethodDescriptor(write);\n+            Method read = pds[i].getReadMethod();\n+            if (read != null)\n+                _mds[(i * 2) + 1] = new MethodDescriptor(read);\n         }\n         return _mds;\n     }",
                "raw_url": "https://github.com/apache/openjpa/raw/20e0762e43734170fd7d97297693382329877b33/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java",
                "sha": "551e5e5e1bb1ad385e6d57b26d2c4dacd8b1206c",
                "status": "modified"
            }
        ],
        "message": "Fixed getMethodDescriptors to not try to create a MethodDescriptor for a non-existant method (which would cause an NPE).\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@443524 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openjpa/commit/47edcb8edce8dc6b0c384af53e6a679aa68f1abd",
        "repo": "openjpa",
        "unit_tests": [
            "TestConfigurationImpl.java"
        ]
    },
    "openjpa_25e80a9": {
        "bug_id": "openjpa_25e80a9",
        "commit": "https://github.com/apache/openjpa/commit/25e80a994e6e50afb0e146066cf6e0185e4b8af7",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/openjpa/blob/25e80a994e6e50afb0e146066cf6e0185e4b8af7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=25e80a994e6e50afb0e146066cf6e0185e4b8af7",
                "deletions": 2,
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "patch": "@@ -810,8 +810,9 @@ private void replaceDefinedSuperclassFields(FieldMetaData[] fields,\n      * Return the superclass copy of the given field.\n      */\n     protected FieldMetaData getSuperclassField(FieldMetaData supField) {\n-        FieldMetaData fmd = getPCSuperclassMetaData().\n-            getField(supField.getName());\n+        ClassMetaData sm = getPCSuperclassMetaData();\n+        FieldMetaData fmd = sm == null ? null : sm.getField(supField.getName());\n+\n         if (fmd == null || fmd.getManagement() != fmd.MANAGE_PERSISTENT)\n             throw new MetaDataException(_loc.get(\"unmanaged-sup-field\",\n                 supField, this));",
                "raw_url": "https://github.com/apache/openjpa/raw/25e80a994e6e50afb0e146066cf6e0185e4b8af7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "sha": "703b5c2e7178c99e94d7cdef968f84ddb65e2082",
                "status": "modified"
            }
        ],
        "message": "OPENJPA-42 Check for the existence of superclass metadata in getSuperclassField so we throw a better exception than an NPE if it doesn't exist.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@442030 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openjpa/commit/3b2f6a720dcf71073f25fde87f02c522c9eb8f80",
        "repo": "openjpa",
        "unit_tests": [
            "TestClassMetaData.java"
        ]
    },
    "openjpa_5337ce1": {
        "bug_id": "openjpa_5337ce1",
        "commit": "https://github.com/apache/openjpa/commit/5337ce10d0a4f00c3b04ca6bfe5cc05a76020afc",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/openjpa/blob/5337ce10d0a4f00c3b04ca6bfe5cc05a76020afc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java?ref=5337ce10d0a4f00c3b04ca6bfe5cc05a76020afc",
                "deletions": 2,
                "filename": "openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java",
                "patch": "@@ -35,6 +35,7 @@\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.ValueStrategies;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.MetaDataException;\n@@ -341,7 +342,7 @@ public void setAutoAssignedValue(OpenJPAStateManager sm, JDBCStore store,\n         Column col, Object autoInc) {\n         Object data;\n         if (_cols.length == 1)\n-            data = autoInc;\n+            data = JavaTypes.convert(autoInc, col.getJavaType());\n         else {\n             // multiple columns; have to get current value, replace this col's\n             // value with the given one, and reset\n@@ -351,7 +352,8 @@ public void setAutoAssignedValue(OpenJPAStateManager sm, JDBCStore store,\n                 data = new Object[_cols.length];\n             for (int i = 0; i < _cols.length; i++) {\n                 if (_cols[i] == col) {\n-                    ((Object[]) data)[i] = autoInc;\n+                    ((Object[]) data)[i] = JavaTypes.convert(autoInc, \n+                        col.getJavaType());\n                     break;\n                 }\n             }",
                "raw_url": "https://github.com/apache/openjpa/raw/5337ce10d0a4f00c3b04ca6bfe5cc05a76020afc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java",
                "sha": "b1090879afcd33a6d3ad337a4281c78b261da5e1",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/openjpa/blob/5337ce10d0a4f00c3b04ca6bfe5cc05a76020afc/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=5337ce10d0a4f00c3b04ca6bfe5cc05a76020afc",
                "deletions": 5,
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java",
                "patch": "@@ -1794,7 +1794,9 @@ public void afterCompletion(int status) {\n             _flags &= ~FLAG_FLUSHED;\n             _flags &= ~FLAG_TRANS_ENDING;\n \n-            if (_transEventManager.hasEndListeners()) {\n+            // event manager nulled if freed broker\n+            if (_transEventManager != null \n+                && _transEventManager.hasEndListeners()) {\n                 fireTransactionEvent(new TransactionEvent(this,\n                     status == Status.STATUS_COMMITTED\n                         ? TransactionEvent.AFTER_COMMIT_COMPLETE\n@@ -4021,10 +4023,7 @@ protected void free() {\n             _extents = null;\n         }\n \n-        try {\n-            releaseConnection();\n-        } catch (RuntimeException re) {\n-        }\n+        try { releaseConnection(); } catch (RuntimeException re) {}\n \n         _lm.close();\n         _store.close();",
                "raw_url": "https://github.com/apache/openjpa/raw/5337ce10d0a4f00c3b04ca6bfe5cc05a76020afc/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java",
                "sha": "f31f072a17089012fc7aeed7f22741b45aa178df",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/openjpa/blob/5337ce10d0a4f00c3b04ca6bfe5cc05a76020afc/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java?ref=5337ce10d0a4f00c3b04ca6bfe5cc05a76020afc",
                "deletions": 5,
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java",
                "patch": "@@ -287,7 +287,7 @@ public static Object convert(Object val, int typeCode) {\n                 // no break\n             case DOUBLE:\n                 if (val instanceof String)\n-                    new Double(val.toString());\n+                    return new Double(val.toString());\n                 return val;\n             case FLOAT_OBJ:\n                 if (val instanceof Float)\n@@ -297,7 +297,7 @@ public static Object convert(Object val, int typeCode) {\n                 // no break\n             case FLOAT:\n                 if (val instanceof String)\n-                    new Float(val.toString());\n+                    return new Float(val.toString());\n                 return val;\n             case INT_OBJ:\n                 if (val instanceof Integer)\n@@ -307,7 +307,7 @@ public static Object convert(Object val, int typeCode) {\n                 // no break\n             case INT:\n                 if (val instanceof String)\n-                    new Integer(val.toString());\n+                    return new Integer(val.toString());\n                 return val;\n             case LONG_OBJ:\n                 if (val instanceof Long)\n@@ -317,7 +317,7 @@ public static Object convert(Object val, int typeCode) {\n                 // no break\n             case LONG:\n                 if (val instanceof String)\n-                    new Long(val.toString());\n+                    return new Long(val.toString());\n                 return val;\n             case NUMBER:\n                 if (val instanceof Number)\n@@ -333,7 +333,7 @@ public static Object convert(Object val, int typeCode) {\n                 // no break\n             case SHORT:\n                 if (val instanceof String)\n-                    new Short(val.toString());\n+                    return new Short(val.toString());\n                 return val;\n             case STRING:\n                 return val.toString();",
                "raw_url": "https://github.com/apache/openjpa/raw/5337ce10d0a4f00c3b04ca6bfe5cc05a76020afc/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java",
                "sha": "4748d0f06aefbfed789b8b255069f933828fbeeb",
                "status": "modified"
            }
        ],
        "message": "Possible fix for OPENJPA-13 JIRA issue.  Also fix possible NPE on delayed close\non transaction completion in managed environment.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@453016 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openjpa/commit/8785be46e71c65c4d87ab59203c17771d9faec26",
        "repo": "openjpa",
        "unit_tests": [
            "TestJavaTypes.java"
        ]
    },
    "openjpa_7cee19d": {
        "bug_id": "openjpa_7cee19d",
        "commit": "https://github.com/apache/openjpa/commit/7cee19d3be610e178020eabdae6c877e6784373c",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/openjpa/blob/7cee19d3be610e178020eabdae6c877e6784373c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=7cee19d3be610e178020eabdae6c877e6784373c",
                "deletions": 3,
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "patch": "@@ -2787,12 +2787,14 @@ public String getSourceName(){\n \n     public boolean hasInverseManagedFields() {\n         if (inverseManagedFields == null) {\n-            for(FieldMetaData fmd: getFields()){\n-                if(fmd.getInverseMetaDatas().length > 0){\n-                    inverseManagedFields = Boolean.TRUE;\n+            Boolean res = Boolean.FALSE;\n+            for (FieldMetaData fmd : getFields()) {\n+                if (fmd.getInverseMetaDatas().length > 0) {\n+                    res = Boolean.TRUE;\n                     break;\n                 }\n             }\n+            inverseManagedFields = res;\n         }\n         return inverseManagedFields.booleanValue();\n     }",
                "raw_url": "https://github.com/apache/openjpa/raw/7cee19d3be610e178020eabdae6c877e6784373c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "sha": "cf37d747cac6e2b7c30bb5a452a6d1c2b857ae8b",
                "status": "modified"
            }
        ],
        "message": "OPENJPA-2151: Fix NPE in ClassMetaData.hasInverseManagedFields.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1342747 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openjpa/commit/908e0f69350a5804d6f54387d86ee4a39906698b",
        "repo": "openjpa",
        "unit_tests": [
            "TestClassMetaData.java"
        ]
    },
    "openjpa_88cc847": {
        "bug_id": "openjpa_88cc847",
        "commit": "https://github.com/apache/openjpa/commit/88cc847a1cd2d4fb4f91b88b4de5a91c4b39228e",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/openjpa/blob/88cc847a1cd2d4fb4f91b88b4de5a91c4b39228e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=88cc847a1cd2d4fb4f91b88b4de5a91c4b39228e",
                "deletions": 4,
                "filename": "openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java",
                "patch": "@@ -1361,10 +1361,8 @@ protected void setCascades(FieldMetaData fmd) {\n             return;\n \n         ValueMetaData vmd = fmd;\n-        switch (_strategy) {\n-            case ONE_MANY:\n-            case MANY_MANY:\n-                vmd = fmd.getElement();\n+        if (_strategy == ONE_MANY || _strategy == MANY_MANY) {\n+            vmd = fmd.getElement();\n         }\n         for (CascadeType cascade : cascades) {\n             switch (cascade) {",
                "raw_url": "https://github.com/apache/openjpa/raw/88cc847a1cd2d4fb4f91b88b4de5a91c4b39228e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java",
                "sha": "3dc65495fbe65402f61eca4e932da71acd9db254",
                "status": "modified"
            }
        ],
        "message": "OPENJPA-2284: Save NPE while parsing cascade\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1416742 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openjpa/commit/2d5ab5c862737cf13c6a77bee4924dd959e8b941",
        "repo": "openjpa",
        "unit_tests": [
            "TestXMLPersistenceMetaDataParser.java"
        ]
    },
    "openjpa_89df4a7": {
        "bug_id": "openjpa_89df4a7",
        "commit": "https://github.com/apache/openjpa/commit/89df4a75321f4066bb7a0a83d0fa03ace16e32bf",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/openjpa/blob/89df4a75321f4066bb7a0a83d0fa03ace16e32bf/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=89df4a75321f4066bb7a0a83d0fa03ace16e32bf",
                "deletions": 1,
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "patch": "@@ -1880,7 +1880,9 @@ private void validateAppIdClass() {\n         if (_super != null) {\n             // concrete superclass oids must match or be parent of ours\n             ClassMetaData sup = getPCSuperclassMetaData();\n-            if (!sup.getObjectIdType().isAssignableFrom(_objectId))\n+            Class objectIdType = sup.getObjectIdType();\n+            if (objectIdType != null && \n+                !objectIdType.isAssignableFrom(_objectId))\n                 throw new MetaDataException(_loc.get(\"id-classes\",\n                     new Object[]{ _type, _objectId, _super,\n                         sup.getObjectIdType() }));",
                "raw_url": "https://github.com/apache/openjpa/raw/89df4a75321f4066bb7a0a83d0fa03ace16e32bf/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "sha": "507eeced744f7e2bba58b243ec0dbad9e03cff19",
                "status": "modified"
            }
        ],
        "message": "OPENJPA-873: fix NPE when MappedSuperclass does not have \nIdClass defined.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@737816 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openjpa/commit/e70fd12a5933871b1e937e77a1dba04330b31de6",
        "repo": "openjpa",
        "unit_tests": [
            "TestClassMetaData.java"
        ]
    },
    "openjpa_89e7531": {
        "bug_id": "openjpa_89e7531",
        "commit": "https://github.com/apache/openjpa/commit/89e7531398352ba214faa845098ba773562bdc70",
        "file": [
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/openjpa/blob/89e7531398352ba214faa845098ba773562bdc70/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java",
                "changes": 62,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=89e7531398352ba214faa845098ba773562bdc70",
                "deletions": 39,
                "filename": "openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java",
                "patch": "@@ -72,8 +72,8 @@\n     protected static final String useKeepExclusiveLockClause\r\n         = \"USE AND KEEP EXCLUSIVE LOCKS\";\r\n     protected static final String forReadOnlyClause = \"FOR READ ONLY\";\r\n-    protected String databaseProductName = null;\r\n-    protected String databaseProductVersion = null;\r\n+    protected String databaseProductName = \"\";\r\n+    protected String databaseProductVersion = \"\";\r\n     protected int maj = 0;\r\n     protected int min = 0;\r\n     \r\n@@ -242,8 +242,8 @@ public void connectedConfiguration(Connection conn) throws SQLException {\n     \tsuper.connectedConfiguration(conn);\r\n \r\n     \tDatabaseMetaData metaData = conn.getMetaData();\r\n-        databaseProductName = metaData.getDatabaseProductName();\r\n-        databaseProductVersion = metaData.getDatabaseProductVersion();\r\n+        databaseProductName = nullSafe(metaData.getDatabaseProductName());\r\n+        databaseProductVersion = nullSafe(metaData.getDatabaseProductVersion());\r\n         \r\n         // Determine the type of DB2 database\r\n         // First check for AS/400\r\n@@ -384,51 +384,32 @@ protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n     }\r\n \r\n     public boolean isDB2UDBV82OrLater() {\r\n-        boolean match = false;\r\n-        if (databaseProductName != null &&\r\n-            (databaseProductVersion.indexOf(\"SQL\") != -1\r\n-            || databaseProductName.indexOf(\"DB2/\") != -1)\r\n-            && ((maj == 8 && min >= 2) || (maj >= 9)))\r\n-            match = true;\r\n-        return match;\r\n+        return (databaseProductVersion.indexOf(\"SQL\") != -1\r\n+             || databaseProductName.indexOf(\"DB2/\") != -1)\r\n+             && ((maj == 8 && min >= 2) || (maj >= 9));\r\n     }\r\n \r\n     public boolean isDB2ZOSV8xOrLater() {\r\n-       boolean match = false;\r\n-       if (databaseProductName != null &&\r\n-           (databaseProductVersion.indexOf(\"DSN\") != -1\r\n-           || databaseProductName.indexOf(\"DB2/\") == -1)\r\n-           && maj >= 8)\r\n-           match = true;\r\n-        return match;\r\n+       return (databaseProductVersion.indexOf(\"DSN\") != -1\r\n+            || databaseProductName.indexOf(\"DB2/\") == -1)\r\n+            && maj >= 8;\r\n+           \r\n     }\r\n \r\n     public boolean isDB2ISeriesV5R3OrEarlier() {\r\n-       boolean match = false;\r\n-       if (databaseProductName != null &&\r\n-           databaseProductName.indexOf(\"AS\") != -1\r\n-           && ((maj == 5 && min <=3) || maj < 5))\r\n-           match = true;\r\n-       return match;\r\n+       return (databaseProductName.indexOf(\"AS\") != -1\r\n+           && ((maj == 5 && min <=3) || maj < 5));\r\n     }\r\n \r\n     public boolean isDB2ISeriesV5R4OrLater() {\r\n-       boolean match = false;\r\n-       if (databaseProductName != null &&\r\n-           databaseProductName.indexOf(\"AS\") != -1\r\n-           && (maj >=6 || (maj == 5 && min >=4)))\r\n-           match = true;\r\n-      return match;\r\n+       return databaseProductName.indexOf(\"AS\") != -1\r\n+           && (maj >=6 || (maj == 5 && min >=4));\r\n     }\r\n \r\n     public boolean isDB2UDBV81OrEarlier() {\r\n-        boolean match = false;\r\n-        if (databaseProductName != null &&\r\n-            (databaseProductVersion.indexOf(\"SQL\") != -1 \r\n-            || databaseProductName.indexOf(\"DB2/\") != -1) &&\r\n-            ((maj == 8 && min <= 1) || maj < 8))\r\n-            match = true;\r\n-        return match;\r\n+        return (databaseProductVersion.indexOf(\"SQL\") != -1 \r\n+            || databaseProductName.indexOf(\"DB2/\") != -1) \r\n+            && ((maj == 8 && min <= 1) || maj < 8);\r\n     }\r\n \r\n     /** Get the version Major/Minor for the ISeries\r\n@@ -456,8 +437,7 @@ private void getProductVersionMajorMinorForISeries() {\n                     String s2 =  stringtokenizer.nextToken();\r\n                     min = Integer.parseInt(s2);\r\n                 }\r\n-            }\r\n-            else {\r\n+            } else {\r\n                 index = databaseProductVersion.indexOf('0');\r\n                 if (index != -1) {\r\n                     String s = databaseProductVersion.substring(index);\r\n@@ -844,4 +824,8 @@ public void createIndexIfNecessary(Schema schema, String table,\n             idx.addColumn(pkColumn);\r\n         }\r\n     }\r\n+    \r\n+    String nullSafe(String s) {\r\n+    \treturn s == null ? \"\" : s;\r\n+    }\r\n }\r",
                "raw_url": "https://github.com/apache/openjpa/raw/89e7531398352ba214faa845098ba773562bdc70/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java",
                "sha": "69091419f75113f3dfd8e0774d2043abb8d32e9a",
                "status": "modified"
            }
        ],
        "message": "Initialize Database Prodcut/Vendor name to empty string to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@675387 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openjpa/commit/c7a906314641bc2a3f7d997422028686938c1d55",
        "repo": "openjpa",
        "unit_tests": [
            "TestDB2Dictionary.java"
        ]
    },
    "openjpa_9a2a907": {
        "bug_id": "openjpa_9a2a907",
        "commit": "https://github.com/apache/openjpa/commit/9a2a9072617ffffca3bbbb6713ca337f6d286b88",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/openjpa/blob/9a2a9072617ffffca3bbbb6713ca337f6d286b88/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=9a2a9072617ffffca3bbbb6713ca337f6d286b88",
                "deletions": 0,
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java",
                "patch": "@@ -571,9 +571,15 @@ private void evictOptimisticLockFailure(OptimisticException e) {\n         // and less write locks to do the mutation.\n         ClassMetaData meta = sm.getMetaData();\n         DataCache cache = meta.getDataCache();\n+        if (cache == null)\n+            return;\n+\n         cache.writeLock();\n         try {\n             DataCachePCData data = cache.get(sm.getId());\n+            if (data == null)\n+                return;\n+\n             boolean remove;\n             switch (compareVersion(sm, sm.getVersion(), data.getVersion())) {\n                 case StoreManager.VERSION_LATER:",
                "raw_url": "https://github.com/apache/openjpa/raw/9a2a9072617ffffca3bbbb6713ca337f6d286b88/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java",
                "sha": "40b9e78cd7afd754780e21664bb853cd271d2c58",
                "status": "modified"
            }
        ],
        "message": "Fix possible NPEs resulting from Patrick's last DataCacheStoreManager commit.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@471831 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openjpa/commit/cd65ce1c4dad2c8d0382db07d573f28497791142",
        "repo": "openjpa",
        "unit_tests": [
            "TestDataCacheStoreManager.java"
        ]
    },
    "openjpa_b4077bd": {
        "bug_id": "openjpa_b4077bd",
        "commit": "https://github.com/apache/openjpa/commit/b4077bd6a64f73fd28c210f265d5ef8b089199dd",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/openjpa/blob/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=b4077bd6a64f73fd28c210f265d5ef8b089199dd",
                "deletions": 0,
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java",
                "patch": "@@ -1628,6 +1628,9 @@ public void dump(PrintStream out, String prefix, boolean text) {\n         }\n \n         private static final JPQLNode parse(String jpql) {\n+            if (jpql == null)\n+                jpql = \"\";\n+\n             try {\n                 return (JPQLNode) new JPQL(jpql).parseQuery();\n             } catch (Error e) {",
                "raw_url": "https://github.com/apache/openjpa/raw/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java",
                "sha": "8b2097e5e18fd60dd21624287ac7cc7b191bf2ca",
                "status": "modified"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/openjpa/blob/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=b4077bd6a64f73fd28c210f265d5ef8b089199dd",
                "deletions": 2,
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java",
                "patch": "@@ -1461,11 +1461,38 @@ public void endConfiguration() {\n     public synchronized QueryMetaData getQueryMetaData(Class cls, String name,\n         ClassLoader envLoader, boolean mustExist) {\n         QueryMetaData meta = getQueryMetaDataInternal(cls, name, envLoader);\n-        if (meta == null && mustExist)\n-            throw new MetaDataException(_loc.get(\"no-named-query\", cls, name));\n+        if (meta == null) {\n+            // load all the metadatas for all the known classes so that\n+            // query names are seen and registered\n+            resolveAll(envLoader);\n+            meta = getQueryMetaDataInternal(cls, name, envLoader);\n+        }\n+\n+        if (meta == null && mustExist) {\n+            if (cls == null) {\n+                throw new MetaDataException(_loc.get\n+                    (\"no-named-query-null-class\",\n+                        getPersistentTypeNames(false, envLoader), name));\n+            } else {\n+                throw new MetaDataException(_loc.get(\"no-named-query\",\n+                    cls, name));\n+            }\n+        }\n+\n         return meta;\n     }\n \n+    /** \n+     * Resolve all known metadata classes. \n+     */\n+    private void resolveAll(ClassLoader envLoader) {\n+        Collection types = loadPersistentTypes(false, envLoader);\n+        for (Iterator i = types.iterator(); i.hasNext(); ) {\n+            Class c = (Class) i.next();\n+            getMetaData(c, envLoader, false);\n+        }\n+    }\n+\n     /**\n      * Return query metadata for the given class, name, and classloader.\n      */",
                "raw_url": "https://github.com/apache/openjpa/raw/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java",
                "sha": "48cdc71f773e15895371d9b6ad4347c9257335f2",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/openjpa/blob/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties?ref=b4077bd6a64f73fd28c210f265d5ef8b089199dd",
                "deletions": 1,
                "filename": "openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties",
                "patch": "@@ -204,6 +204,8 @@ tool-usage: Usage: java org.apache.openjpa.meta.MetaDataTool\\n\\\n \t\\t<class name | .java file | .class file>+\n no-named-query: There is no named query defined for the class \"{0}\" with \\\n \tthe name \"{1}\".\n+no-named-query-null-class: There is no query with the name \"{1}\" defined for \\\n+    any of the known persistent classes: {0}.\n no-named-sequence: Could not locate the sequence with name \"{0}\".  It is \\\n \tpossible that the metadata file containing the sequence has not been \\\n \tparsed yet.  Make sure to use a persistent class whose metadata is in \\\n@@ -274,4 +276,4 @@ no-metadatafactory: MetaDataFactory could not be configured \\\n     using Ant, please see the <properties> or <propertiesFile> attributes \\\n     of the task''s nested <config> element. This can also occur if your \\\n     OpenJPA distribution jars are corrupt, or if your security policy is \\\n-    overly strict.\n\\ No newline at end of file\n+    overly strict.",
                "raw_url": "https://github.com/apache/openjpa/raw/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties",
                "sha": "601f70066f63f16b1a934f0234ffbb4adc9ad9b3",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/openjpa/blob/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java?ref=b4077bd6a64f73fd28c210f265d5ef8b089199dd",
                "deletions": 0,
                "filename": "openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java",
                "patch": "@@ -42,6 +42,7 @@\n     MAP_KEY,\n     NATIVE_QUERIES,\n     NATIVE_QUERY,\n+    QUERY_STRING,\n     ORDER_BY,\n     QUERIES,\n     QUERY,",
                "raw_url": "https://github.com/apache/openjpa/raw/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java",
                "sha": "2d913268828a95918956e9dbd0cfe2a1dc4a62b1",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/openjpa/blob/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=b4077bd6a64f73fd28c210f265d5ef8b089199dd",
                "deletions": 0,
                "filename": "openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java",
                "patch": "@@ -119,6 +119,7 @@\n         _elems.put(\"named-query\", QUERY);\n         _elems.put(\"named-native-query\", NATIVE_QUERY);\n         _elems.put(\"query-hint\", QUERY_HINT);\n+        _elems.put(\"query\", QUERY_STRING);\n \n         _elems.put(\"flush-mode\", FLUSH_MODE);\n         _elems.put(\"sequence-generator\", SEQ_GENERATOR);\n@@ -442,6 +443,9 @@ protected boolean startSystemElement(String name, Attributes attrs)\n                 case NATIVE_QUERY:\n                     ret = startNamedNativeQuery(attrs);\n                     break;\n+                case QUERY_STRING:\n+                    ret = startQueryString(attrs);\n+                    break;\n                 case SEQ_GENERATOR:\n                     ret = startSequenceGenerator(attrs);\n                     break;\n@@ -489,6 +493,9 @@ else if (tag instanceof MetaDataTag) {\n                 case NATIVE_QUERY:\n                     endNamedNativeQuery();\n                     break;\n+                case QUERY_STRING:\n+                    endQueryString();\n+                    break;\n                 case SEQ_GENERATOR:\n                     endSequenceGenerator();\n                     break;\n@@ -553,6 +560,9 @@ protected boolean startClassElement(String name, Attributes attrs)\n                 case NATIVE_QUERY:\n                     ret = startNamedNativeQuery(attrs);\n                     break;\n+                case QUERY_STRING:\n+                    ret = startQueryString(attrs);\n+                    break;\n                 case SEQ_GENERATOR:\n                     ret = startSequenceGenerator(attrs);\n                     break;\n@@ -640,6 +650,9 @@ else if (tag instanceof MetaDataTag) {\n                 case NATIVE_QUERY:\n                     endNamedNativeQuery();\n                     break;\n+                case QUERY_STRING:\n+                    endQueryString();\n+                    break;\n                 case SEQ_GENERATOR:\n                     endSequenceGenerator();\n                     break;\n@@ -1368,6 +1381,17 @@ protected void endNamedQuery()\n         popElement();\n     }\n \n+    protected boolean startQueryString(Attributes attrs)\n+        throws SAXException {\n+        return true;\n+    }\n+\n+    protected void endQueryString()\n+        throws SAXException {\n+        QueryMetaData meta = (QueryMetaData) currentElement();\n+        meta.setQueryString(currentText());\n+    }\n+\n     /**\n      * Parse query-hint.\n      */",
                "raw_url": "https://github.com/apache/openjpa/raw/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java",
                "sha": "c76eaeb1884fc5b71b99f3e4f971492828a772ee",
                "status": "modified"
            }
        ],
        "message": "OPENJPA-74: Fixed multiple problems with named queries: 1. They were not being parsed as part of the orm.xml file, since we were incorrectly looking for an attribute named 'query' (when it really should have been a sub-element named 'query'). 2. Looking for a named query did not force resolution of all metadatas. 3. An NPE was being thrown when a JPQL query was created with a null filter\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@470996 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openjpa/commit/22226fc0f4b49f5cdb16792e0901d94ae7d838b7",
        "repo": "openjpa",
        "unit_tests": [
            "TestXMLPersistenceMetaDataParser.java"
        ]
    },
    "openjpa_bb01292": {
        "bug_id": "openjpa_bb01292",
        "commit": "https://github.com/apache/openjpa/commit/bb01292ce90b5ad2e733390bf4cfcb238989e1b8",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/openjpa/blob/bb01292ce90b5ad2e733390bf4cfcb238989e1b8/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=bb01292ce90b5ad2e733390bf4cfcb238989e1b8",
                "deletions": 1,
                "filename": "openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java",
                "patch": "@@ -350,7 +350,8 @@ protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n         else\n             isolationLevel = conf.getTransactionIsolationConstant();\n \n-        if (fetch.getReadLockLevel() >= MixedLockLevels.LOCK_PESSIMISTIC_WRITE)\n+        if (fetch != null\n+            && fetch.getReadLockLevel() >= MixedLockLevels.LOCK_PESSIMISTIC_WRITE)\n             isolationLevel = Connection.TRANSACTION_SERIALIZABLE;\n \n         if (isForUpdate) {",
                "raw_url": "https://github.com/apache/openjpa/raw/bb01292ce90b5ad2e733390bf4cfcb238989e1b8/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java",
                "sha": "7b89c927206acdfd25c3b40c27f4f87ed977262b",
                "status": "modified"
            }
        ],
        "message": "OPENJPA-957 - Guard NPE as fetch may be null in getForUpdateClause.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@762177 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openjpa/commit/718370e1ef8ceaa48fedfa92b90dc49de6cb530b",
        "repo": "openjpa",
        "unit_tests": [
            "TestDB2Dictionary.java"
        ]
    }
}