{
    "openjpa_20e0762": {
        "bug_id": "openjpa_20e0762",
        "commit": "https://github.com/apache/openjpa/commit/20e0762e43734170fd7d97297693382329877b33",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/openjpa/blob/20e0762e43734170fd7d97297693382329877b33/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=20e0762e43734170fd7d97297693382329877b33",
                "deletions": 2,
                "filename": "openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java",
                "patch": "@@ -374,8 +374,12 @@ public Image getIcon(int kind) {\n         PropertyDescriptor[] pds = getPropertyDescriptors();\n         _mds = new MethodDescriptor[pds.length * 2];\n         for (int i = 0; i < pds.length; i++) {\n-            _mds[i * 2] = new MethodDescriptor(pds[i].getWriteMethod());\n-            _mds[(i * 2) + 1] = new MethodDescriptor(pds[i].getReadMethod());\n+            Method write = pds[i].getWriteMethod();\n+            if (write != null)\n+                _mds[i * 2] = new MethodDescriptor(write);\n+            Method read = pds[i].getReadMethod();\n+            if (read != null)\n+                _mds[(i * 2) + 1] = new MethodDescriptor(read);\n         }\n         return _mds;\n     }",
                "raw_url": "https://github.com/apache/openjpa/raw/20e0762e43734170fd7d97297693382329877b33/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java",
                "sha": "551e5e5e1bb1ad385e6d57b26d2c4dacd8b1206c",
                "status": "modified"
            }
        ],
        "message": "Fixed getMethodDescriptors to not try to create a MethodDescriptor for a non-existant method (which would cause an NPE).\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@443524 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openjpa/commit/47edcb8edce8dc6b0c384af53e6a679aa68f1abd",
        "repo": "openjpa",
        "unit_tests": [
            "TestConfigurationImpl.java"
        ]
    },
    "openjpa_25e80a9": {
        "bug_id": "openjpa_25e80a9",
        "commit": "https://github.com/apache/openjpa/commit/25e80a994e6e50afb0e146066cf6e0185e4b8af7",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/openjpa/blob/25e80a994e6e50afb0e146066cf6e0185e4b8af7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=25e80a994e6e50afb0e146066cf6e0185e4b8af7",
                "deletions": 2,
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "patch": "@@ -810,8 +810,9 @@ private void replaceDefinedSuperclassFields(FieldMetaData[] fields,\n      * Return the superclass copy of the given field.\n      */\n     protected FieldMetaData getSuperclassField(FieldMetaData supField) {\n-        FieldMetaData fmd = getPCSuperclassMetaData().\n-            getField(supField.getName());\n+        ClassMetaData sm = getPCSuperclassMetaData();\n+        FieldMetaData fmd = sm == null ? null : sm.getField(supField.getName());\n+\n         if (fmd == null || fmd.getManagement() != fmd.MANAGE_PERSISTENT)\n             throw new MetaDataException(_loc.get(\"unmanaged-sup-field\",\n                 supField, this));",
                "raw_url": "https://github.com/apache/openjpa/raw/25e80a994e6e50afb0e146066cf6e0185e4b8af7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "sha": "703b5c2e7178c99e94d7cdef968f84ddb65e2082",
                "status": "modified"
            }
        ],
        "message": "OPENJPA-42 Check for the existence of superclass metadata in getSuperclassField so we throw a better exception than an NPE if it doesn't exist.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@442030 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openjpa/commit/3b2f6a720dcf71073f25fde87f02c522c9eb8f80",
        "repo": "openjpa",
        "unit_tests": [
            "TestClassMetaData.java"
        ]
    },
    "openjpa_5337ce1": {
        "bug_id": "openjpa_5337ce1",
        "commit": "https://github.com/apache/openjpa/commit/5337ce10d0a4f00c3b04ca6bfe5cc05a76020afc",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/openjpa/blob/5337ce10d0a4f00c3b04ca6bfe5cc05a76020afc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java?ref=5337ce10d0a4f00c3b04ca6bfe5cc05a76020afc",
                "deletions": 2,
                "filename": "openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java",
                "patch": "@@ -35,6 +35,7 @@\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.ValueStrategies;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.MetaDataException;\n@@ -341,7 +342,7 @@ public void setAutoAssignedValue(OpenJPAStateManager sm, JDBCStore store,\n         Column col, Object autoInc) {\n         Object data;\n         if (_cols.length == 1)\n-            data = autoInc;\n+            data = JavaTypes.convert(autoInc, col.getJavaType());\n         else {\n             // multiple columns; have to get current value, replace this col's\n             // value with the given one, and reset\n@@ -351,7 +352,8 @@ public void setAutoAssignedValue(OpenJPAStateManager sm, JDBCStore store,\n                 data = new Object[_cols.length];\n             for (int i = 0; i < _cols.length; i++) {\n                 if (_cols[i] == col) {\n-                    ((Object[]) data)[i] = autoInc;\n+                    ((Object[]) data)[i] = JavaTypes.convert(autoInc, \n+                        col.getJavaType());\n                     break;\n                 }\n             }",
                "raw_url": "https://github.com/apache/openjpa/raw/5337ce10d0a4f00c3b04ca6bfe5cc05a76020afc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java",
                "sha": "b1090879afcd33a6d3ad337a4281c78b261da5e1",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/openjpa/blob/5337ce10d0a4f00c3b04ca6bfe5cc05a76020afc/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=5337ce10d0a4f00c3b04ca6bfe5cc05a76020afc",
                "deletions": 5,
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java",
                "patch": "@@ -1794,7 +1794,9 @@ public void afterCompletion(int status) {\n             _flags &= ~FLAG_FLUSHED;\n             _flags &= ~FLAG_TRANS_ENDING;\n \n-            if (_transEventManager.hasEndListeners()) {\n+            // event manager nulled if freed broker\n+            if (_transEventManager != null \n+                && _transEventManager.hasEndListeners()) {\n                 fireTransactionEvent(new TransactionEvent(this,\n                     status == Status.STATUS_COMMITTED\n                         ? TransactionEvent.AFTER_COMMIT_COMPLETE\n@@ -4021,10 +4023,7 @@ protected void free() {\n             _extents = null;\n         }\n \n-        try {\n-            releaseConnection();\n-        } catch (RuntimeException re) {\n-        }\n+        try { releaseConnection(); } catch (RuntimeException re) {}\n \n         _lm.close();\n         _store.close();",
                "raw_url": "https://github.com/apache/openjpa/raw/5337ce10d0a4f00c3b04ca6bfe5cc05a76020afc/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java",
                "sha": "f31f072a17089012fc7aeed7f22741b45aa178df",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/openjpa/blob/5337ce10d0a4f00c3b04ca6bfe5cc05a76020afc/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java?ref=5337ce10d0a4f00c3b04ca6bfe5cc05a76020afc",
                "deletions": 5,
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java",
                "patch": "@@ -287,7 +287,7 @@ public static Object convert(Object val, int typeCode) {\n                 // no break\n             case DOUBLE:\n                 if (val instanceof String)\n-                    new Double(val.toString());\n+                    return new Double(val.toString());\n                 return val;\n             case FLOAT_OBJ:\n                 if (val instanceof Float)\n@@ -297,7 +297,7 @@ public static Object convert(Object val, int typeCode) {\n                 // no break\n             case FLOAT:\n                 if (val instanceof String)\n-                    new Float(val.toString());\n+                    return new Float(val.toString());\n                 return val;\n             case INT_OBJ:\n                 if (val instanceof Integer)\n@@ -307,7 +307,7 @@ public static Object convert(Object val, int typeCode) {\n                 // no break\n             case INT:\n                 if (val instanceof String)\n-                    new Integer(val.toString());\n+                    return new Integer(val.toString());\n                 return val;\n             case LONG_OBJ:\n                 if (val instanceof Long)\n@@ -317,7 +317,7 @@ public static Object convert(Object val, int typeCode) {\n                 // no break\n             case LONG:\n                 if (val instanceof String)\n-                    new Long(val.toString());\n+                    return new Long(val.toString());\n                 return val;\n             case NUMBER:\n                 if (val instanceof Number)\n@@ -333,7 +333,7 @@ public static Object convert(Object val, int typeCode) {\n                 // no break\n             case SHORT:\n                 if (val instanceof String)\n-                    new Short(val.toString());\n+                    return new Short(val.toString());\n                 return val;\n             case STRING:\n                 return val.toString();",
                "raw_url": "https://github.com/apache/openjpa/raw/5337ce10d0a4f00c3b04ca6bfe5cc05a76020afc/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java",
                "sha": "4748d0f06aefbfed789b8b255069f933828fbeeb",
                "status": "modified"
            }
        ],
        "message": "Possible fix for OPENJPA-13 JIRA issue.  Also fix possible NPE on delayed close\non transaction completion in managed environment.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@453016 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openjpa/commit/8785be46e71c65c4d87ab59203c17771d9faec26",
        "repo": "openjpa",
        "unit_tests": [
            "TestJavaTypes.java"
        ]
    },
    "openjpa_73cd301": {
        "bug_id": "openjpa_73cd301",
        "commit": "https://github.com/apache/openjpa/commit/73cd30152044f4fc56f25eb4b64529983dc9b0a1",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/openjpa/blob/73cd30152044f4fc56f25eb4b64529983dc9b0a1/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=73cd30152044f4fc56f25eb4b64529983dc9b0a1",
                "deletions": 3,
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java",
                "patch": "@@ -392,9 +392,14 @@ public boolean initialize(OpenJPAStateManager sm, PCState state, FetchConfigurat\n                            && ((fetch.getCacheStoreMode() == DataCacheStoreMode.USE && !alreadyCached)\n                             || (fetch.getCacheStoreMode() == DataCacheStoreMode.REFRESH));\n         if (updateCache) {\n-            cacheStateManager(cache, sm, data);\n-            if (stats.isEnabled()) {\n-                ((CacheStatisticsSPI) stats).newPut(sm.getMetaData().getDescribedType());\n+            // It is possible that the \"cacheability\" of the provided SM changed after hitting the DB. This can happen\n+            // when we are operating against an Entity that is in some sort of inheritance structure.\n+            cache = _mgr.selectCache(sm);\n+            if (cache != null) {\n+                cacheStateManager(cache, sm, data);\n+                if (stats.isEnabled()) {\n+                    ((CacheStatisticsSPI) stats).newPut(sm.getMetaData().getDescribedType());\n+                }\n             }\n         }\n         return fromDatabase || alreadyCached;",
                "raw_url": "https://github.com/apache/openjpa/raw/73cd30152044f4fc56f25eb4b64529983dc9b0a1/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java",
                "sha": "127d50a6e11d750829e0e6f4fd883885b287ed3f",
                "status": "modified"
            },
            {
                "additions": 65,
                "blob_url": "https://github.com/apache/openjpa/blob/73cd30152044f4fc56f25eb4b64529983dc9b0a1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeDisableSelectiveInheritance.java",
                "changes": 65,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeDisableSelectiveInheritance.java?ref=73cd30152044f4fc56f25eb4b64529983dc9b0a1",
                "deletions": 0,
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeDisableSelectiveInheritance.java",
                "patch": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.cache.jpa.model.ChildUncacheable;\n+import org.apache.openjpa.persistence.cache.jpa.model.ParentUnspecifiedEntity;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * This test was added for https://issues.apache.org/jira/browse/OPENJPA-1892.\n+ * \n+ * The key to this test is that the ChildUncacheable is uncacheable and ParentUnspecifiedEntity is cacheable. In the\n+ * case were we pass the root Entity in em.find(ParentUnspecifiedEntity.class, 1) AND the id we passed corresponds to\n+ * the child Entity we shouldn't be caching this result.\n+ * \n+ */\n+public class TestCacheModeDisableSelectiveInheritance extends SingleEMFTestCase {\n+    Object[] params =\n+        new Object[] { ChildUncacheable.class, ParentUnspecifiedEntity.class, CLEAR_TABLES,\n+            \"javax.persistence.sharedCache.mode\", \"DISABLE_SELECTIVE\", \"openjpa.DataCache\", \"true\" };\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp(params);\n+    }\n+\n+    @Override\n+    public void tearDown() throws Exception {\n+\n+    }\n+\n+    public void testSimpleFind() throws Exception {\n+        EntityManager em = emf.createEntityManager();\n+        try {\n+            ChildUncacheable c = new ChildUncacheable();\n+            em.getTransaction().begin();\n+            em.persist(c);\n+            em.getTransaction().commit();\n+            assertEquals(c, em.find(ChildUncacheable.class, c.getId()));\n+            em.clear();\n+            assertEquals(c.getId(), em.find(ChildUncacheable.class, c.getId()).getId());\n+\n+        } finally {\n+            em.close();\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/openjpa/raw/73cd30152044f4fc56f25eb4b64529983dc9b0a1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeDisableSelectiveInheritance.java",
                "sha": "4c5245465056eab2272d638137b4dc171d1d4d8a",
                "status": "added"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/openjpa/blob/73cd30152044f4fc56f25eb4b64529983dc9b0a1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/model/ChildUncacheable.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/model/ChildUncacheable.java?ref=73cd30152044f4fc56f25eb4b64529983dc9b0a1",
                "deletions": 0,
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/model/ChildUncacheable.java",
                "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa.model;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Cacheable;\n+import javax.persistence.Entity;\n+\n+@Entity\n+@Cacheable(value = false)\n+public class ChildUncacheable extends ParentUnspecifiedEntity {\n+    @Basic\n+    String child;\n+}",
                "raw_url": "https://github.com/apache/openjpa/raw/73cd30152044f4fc56f25eb4b64529983dc9b0a1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/model/ChildUncacheable.java",
                "sha": "0ebdf818b6c3a0b97523f09048bc9bf1b62391e3",
                "status": "added"
            },
            {
                "additions": 61,
                "blob_url": "https://github.com/apache/openjpa/blob/73cd30152044f4fc56f25eb4b64529983dc9b0a1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/model/ParentUnspecifiedEntity.java",
                "changes": 61,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/model/ParentUnspecifiedEntity.java?ref=73cd30152044f4fc56f25eb4b64529983dc9b0a1",
                "deletions": 0,
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/model/ParentUnspecifiedEntity.java",
                "patch": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa.model;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class ParentUnspecifiedEntity {\n+    @Id\n+    @Column(name = \"ID\")\n+    protected int id;\n+\n+    @Version\n+    @Column(name = \"VERSN\")\n+    protected int version;\n+\n+    protected String name;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+}",
                "raw_url": "https://github.com/apache/openjpa/raw/73cd30152044f4fc56f25eb4b64529983dc9b0a1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/model/ParentUnspecifiedEntity.java",
                "sha": "62be9aa98fc39ecd8a4af690a0f83b9f284cb699",
                "status": "added"
            }
        ],
        "message": "OPENJPA-1892: Fix NPE in DataCacheStoreManager.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1036988 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openjpa/commit/24e17363ef3faf489bf187b26f748eb80a19d3a0",
        "repo": "openjpa",
        "unit_tests": [
            "TestDataCacheStoreManager.java"
        ]
    },
    "openjpa_7cee19d": {
        "bug_id": "openjpa_7cee19d",
        "commit": "https://github.com/apache/openjpa/commit/7cee19d3be610e178020eabdae6c877e6784373c",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/openjpa/blob/7cee19d3be610e178020eabdae6c877e6784373c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=7cee19d3be610e178020eabdae6c877e6784373c",
                "deletions": 3,
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "patch": "@@ -2787,12 +2787,14 @@ public String getSourceName(){\n \n     public boolean hasInverseManagedFields() {\n         if (inverseManagedFields == null) {\n-            for(FieldMetaData fmd: getFields()){\n-                if(fmd.getInverseMetaDatas().length > 0){\n-                    inverseManagedFields = Boolean.TRUE;\n+            Boolean res = Boolean.FALSE;\n+            for (FieldMetaData fmd : getFields()) {\n+                if (fmd.getInverseMetaDatas().length > 0) {\n+                    res = Boolean.TRUE;\n                     break;\n                 }\n             }\n+            inverseManagedFields = res;\n         }\n         return inverseManagedFields.booleanValue();\n     }",
                "raw_url": "https://github.com/apache/openjpa/raw/7cee19d3be610e178020eabdae6c877e6784373c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "sha": "cf37d747cac6e2b7c30bb5a452a6d1c2b857ae8b",
                "status": "modified"
            }
        ],
        "message": "OPENJPA-2151: Fix NPE in ClassMetaData.hasInverseManagedFields.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1342747 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openjpa/commit/908e0f69350a5804d6f54387d86ee4a39906698b",
        "repo": "openjpa",
        "unit_tests": [
            "TestClassMetaData.java"
        ]
    },
    "openjpa_88cc847": {
        "bug_id": "openjpa_88cc847",
        "commit": "https://github.com/apache/openjpa/commit/88cc847a1cd2d4fb4f91b88b4de5a91c4b39228e",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/openjpa/blob/88cc847a1cd2d4fb4f91b88b4de5a91c4b39228e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=88cc847a1cd2d4fb4f91b88b4de5a91c4b39228e",
                "deletions": 4,
                "filename": "openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java",
                "patch": "@@ -1361,10 +1361,8 @@ protected void setCascades(FieldMetaData fmd) {\n             return;\n \n         ValueMetaData vmd = fmd;\n-        switch (_strategy) {\n-            case ONE_MANY:\n-            case MANY_MANY:\n-                vmd = fmd.getElement();\n+        if (_strategy == ONE_MANY || _strategy == MANY_MANY) {\n+            vmd = fmd.getElement();\n         }\n         for (CascadeType cascade : cascades) {\n             switch (cascade) {",
                "raw_url": "https://github.com/apache/openjpa/raw/88cc847a1cd2d4fb4f91b88b4de5a91c4b39228e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java",
                "sha": "3dc65495fbe65402f61eca4e932da71acd9db254",
                "status": "modified"
            }
        ],
        "message": "OPENJPA-2284: Save NPE while parsing cascade\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1416742 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openjpa/commit/2d5ab5c862737cf13c6a77bee4924dd959e8b941",
        "repo": "openjpa",
        "unit_tests": [
            "TestXMLPersistenceMetaDataParser.java"
        ]
    },
    "openjpa_89df4a7": {
        "bug_id": "openjpa_89df4a7",
        "commit": "https://github.com/apache/openjpa/commit/89df4a75321f4066bb7a0a83d0fa03ace16e32bf",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/openjpa/blob/89df4a75321f4066bb7a0a83d0fa03ace16e32bf/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=89df4a75321f4066bb7a0a83d0fa03ace16e32bf",
                "deletions": 1,
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "patch": "@@ -1880,7 +1880,9 @@ private void validateAppIdClass() {\n         if (_super != null) {\n             // concrete superclass oids must match or be parent of ours\n             ClassMetaData sup = getPCSuperclassMetaData();\n-            if (!sup.getObjectIdType().isAssignableFrom(_objectId))\n+            Class objectIdType = sup.getObjectIdType();\n+            if (objectIdType != null && \n+                !objectIdType.isAssignableFrom(_objectId))\n                 throw new MetaDataException(_loc.get(\"id-classes\",\n                     new Object[]{ _type, _objectId, _super,\n                         sup.getObjectIdType() }));",
                "raw_url": "https://github.com/apache/openjpa/raw/89df4a75321f4066bb7a0a83d0fa03ace16e32bf/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "sha": "507eeced744f7e2bba58b243ec0dbad9e03cff19",
                "status": "modified"
            }
        ],
        "message": "OPENJPA-873: fix NPE when MappedSuperclass does not have \nIdClass defined.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@737816 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openjpa/commit/e70fd12a5933871b1e937e77a1dba04330b31de6",
        "repo": "openjpa",
        "unit_tests": [
            "TestClassMetaData.java"
        ]
    },
    "openjpa_89e7531": {
        "bug_id": "openjpa_89e7531",
        "commit": "https://github.com/apache/openjpa/commit/89e7531398352ba214faa845098ba773562bdc70",
        "file": [
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/openjpa/blob/89e7531398352ba214faa845098ba773562bdc70/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java",
                "changes": 62,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=89e7531398352ba214faa845098ba773562bdc70",
                "deletions": 39,
                "filename": "openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java",
                "patch": "@@ -72,8 +72,8 @@\n     protected static final String useKeepExclusiveLockClause\r\n         = \"USE AND KEEP EXCLUSIVE LOCKS\";\r\n     protected static final String forReadOnlyClause = \"FOR READ ONLY\";\r\n-    protected String databaseProductName = null;\r\n-    protected String databaseProductVersion = null;\r\n+    protected String databaseProductName = \"\";\r\n+    protected String databaseProductVersion = \"\";\r\n     protected int maj = 0;\r\n     protected int min = 0;\r\n     \r\n@@ -242,8 +242,8 @@ public void connectedConfiguration(Connection conn) throws SQLException {\n     \tsuper.connectedConfiguration(conn);\r\n \r\n     \tDatabaseMetaData metaData = conn.getMetaData();\r\n-        databaseProductName = metaData.getDatabaseProductName();\r\n-        databaseProductVersion = metaData.getDatabaseProductVersion();\r\n+        databaseProductName = nullSafe(metaData.getDatabaseProductName());\r\n+        databaseProductVersion = nullSafe(metaData.getDatabaseProductVersion());\r\n         \r\n         // Determine the type of DB2 database\r\n         // First check for AS/400\r\n@@ -384,51 +384,32 @@ protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n     }\r\n \r\n     public boolean isDB2UDBV82OrLater() {\r\n-        boolean match = false;\r\n-        if (databaseProductName != null &&\r\n-            (databaseProductVersion.indexOf(\"SQL\") != -1\r\n-            || databaseProductName.indexOf(\"DB2/\") != -1)\r\n-            && ((maj == 8 && min >= 2) || (maj >= 9)))\r\n-            match = true;\r\n-        return match;\r\n+        return (databaseProductVersion.indexOf(\"SQL\") != -1\r\n+             || databaseProductName.indexOf(\"DB2/\") != -1)\r\n+             && ((maj == 8 && min >= 2) || (maj >= 9));\r\n     }\r\n \r\n     public boolean isDB2ZOSV8xOrLater() {\r\n-       boolean match = false;\r\n-       if (databaseProductName != null &&\r\n-           (databaseProductVersion.indexOf(\"DSN\") != -1\r\n-           || databaseProductName.indexOf(\"DB2/\") == -1)\r\n-           && maj >= 8)\r\n-           match = true;\r\n-        return match;\r\n+       return (databaseProductVersion.indexOf(\"DSN\") != -1\r\n+            || databaseProductName.indexOf(\"DB2/\") == -1)\r\n+            && maj >= 8;\r\n+           \r\n     }\r\n \r\n     public boolean isDB2ISeriesV5R3OrEarlier() {\r\n-       boolean match = false;\r\n-       if (databaseProductName != null &&\r\n-           databaseProductName.indexOf(\"AS\") != -1\r\n-           && ((maj == 5 && min <=3) || maj < 5))\r\n-           match = true;\r\n-       return match;\r\n+       return (databaseProductName.indexOf(\"AS\") != -1\r\n+           && ((maj == 5 && min <=3) || maj < 5));\r\n     }\r\n \r\n     public boolean isDB2ISeriesV5R4OrLater() {\r\n-       boolean match = false;\r\n-       if (databaseProductName != null &&\r\n-           databaseProductName.indexOf(\"AS\") != -1\r\n-           && (maj >=6 || (maj == 5 && min >=4)))\r\n-           match = true;\r\n-      return match;\r\n+       return databaseProductName.indexOf(\"AS\") != -1\r\n+           && (maj >=6 || (maj == 5 && min >=4));\r\n     }\r\n \r\n     public boolean isDB2UDBV81OrEarlier() {\r\n-        boolean match = false;\r\n-        if (databaseProductName != null &&\r\n-            (databaseProductVersion.indexOf(\"SQL\") != -1 \r\n-            || databaseProductName.indexOf(\"DB2/\") != -1) &&\r\n-            ((maj == 8 && min <= 1) || maj < 8))\r\n-            match = true;\r\n-        return match;\r\n+        return (databaseProductVersion.indexOf(\"SQL\") != -1 \r\n+            || databaseProductName.indexOf(\"DB2/\") != -1) \r\n+            && ((maj == 8 && min <= 1) || maj < 8);\r\n     }\r\n \r\n     /** Get the version Major/Minor for the ISeries\r\n@@ -456,8 +437,7 @@ private void getProductVersionMajorMinorForISeries() {\n                     String s2 =  stringtokenizer.nextToken();\r\n                     min = Integer.parseInt(s2);\r\n                 }\r\n-            }\r\n-            else {\r\n+            } else {\r\n                 index = databaseProductVersion.indexOf('0');\r\n                 if (index != -1) {\r\n                     String s = databaseProductVersion.substring(index);\r\n@@ -844,4 +824,8 @@ public void createIndexIfNecessary(Schema schema, String table,\n             idx.addColumn(pkColumn);\r\n         }\r\n     }\r\n+    \r\n+    String nullSafe(String s) {\r\n+    \treturn s == null ? \"\" : s;\r\n+    }\r\n }\r",
                "raw_url": "https://github.com/apache/openjpa/raw/89e7531398352ba214faa845098ba773562bdc70/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java",
                "sha": "69091419f75113f3dfd8e0774d2043abb8d32e9a",
                "status": "modified"
            }
        ],
        "message": "Initialize Database Prodcut/Vendor name to empty string to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@675387 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openjpa/commit/c7a906314641bc2a3f7d997422028686938c1d55",
        "repo": "openjpa",
        "unit_tests": [
            "TestDB2Dictionary.java"
        ]
    },
    "openjpa_9a2a907": {
        "bug_id": "openjpa_9a2a907",
        "commit": "https://github.com/apache/openjpa/commit/9a2a9072617ffffca3bbbb6713ca337f6d286b88",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/openjpa/blob/9a2a9072617ffffca3bbbb6713ca337f6d286b88/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=9a2a9072617ffffca3bbbb6713ca337f6d286b88",
                "deletions": 0,
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java",
                "patch": "@@ -571,9 +571,15 @@ private void evictOptimisticLockFailure(OptimisticException e) {\n         // and less write locks to do the mutation.\n         ClassMetaData meta = sm.getMetaData();\n         DataCache cache = meta.getDataCache();\n+        if (cache == null)\n+            return;\n+\n         cache.writeLock();\n         try {\n             DataCachePCData data = cache.get(sm.getId());\n+            if (data == null)\n+                return;\n+\n             boolean remove;\n             switch (compareVersion(sm, sm.getVersion(), data.getVersion())) {\n                 case StoreManager.VERSION_LATER:",
                "raw_url": "https://github.com/apache/openjpa/raw/9a2a9072617ffffca3bbbb6713ca337f6d286b88/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java",
                "sha": "40b9e78cd7afd754780e21664bb853cd271d2c58",
                "status": "modified"
            }
        ],
        "message": "Fix possible NPEs resulting from Patrick's last DataCacheStoreManager commit.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@471831 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openjpa/commit/cd65ce1c4dad2c8d0382db07d573f28497791142",
        "repo": "openjpa",
        "unit_tests": [
            "TestDataCacheStoreManager.java"
        ]
    },
    "openjpa_b4077bd": {
        "bug_id": "openjpa_b4077bd",
        "commit": "https://github.com/apache/openjpa/commit/b4077bd6a64f73fd28c210f265d5ef8b089199dd",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/openjpa/blob/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=b4077bd6a64f73fd28c210f265d5ef8b089199dd",
                "deletions": 0,
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java",
                "patch": "@@ -1628,6 +1628,9 @@ public void dump(PrintStream out, String prefix, boolean text) {\n         }\n \n         private static final JPQLNode parse(String jpql) {\n+            if (jpql == null)\n+                jpql = \"\";\n+\n             try {\n                 return (JPQLNode) new JPQL(jpql).parseQuery();\n             } catch (Error e) {",
                "raw_url": "https://github.com/apache/openjpa/raw/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java",
                "sha": "8b2097e5e18fd60dd21624287ac7cc7b191bf2ca",
                "status": "modified"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/openjpa/blob/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=b4077bd6a64f73fd28c210f265d5ef8b089199dd",
                "deletions": 2,
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java",
                "patch": "@@ -1461,11 +1461,38 @@ public void endConfiguration() {\n     public synchronized QueryMetaData getQueryMetaData(Class cls, String name,\n         ClassLoader envLoader, boolean mustExist) {\n         QueryMetaData meta = getQueryMetaDataInternal(cls, name, envLoader);\n-        if (meta == null && mustExist)\n-            throw new MetaDataException(_loc.get(\"no-named-query\", cls, name));\n+        if (meta == null) {\n+            // load all the metadatas for all the known classes so that\n+            // query names are seen and registered\n+            resolveAll(envLoader);\n+            meta = getQueryMetaDataInternal(cls, name, envLoader);\n+        }\n+\n+        if (meta == null && mustExist) {\n+            if (cls == null) {\n+                throw new MetaDataException(_loc.get\n+                    (\"no-named-query-null-class\",\n+                        getPersistentTypeNames(false, envLoader), name));\n+            } else {\n+                throw new MetaDataException(_loc.get(\"no-named-query\",\n+                    cls, name));\n+            }\n+        }\n+\n         return meta;\n     }\n \n+    /** \n+     * Resolve all known metadata classes. \n+     */\n+    private void resolveAll(ClassLoader envLoader) {\n+        Collection types = loadPersistentTypes(false, envLoader);\n+        for (Iterator i = types.iterator(); i.hasNext(); ) {\n+            Class c = (Class) i.next();\n+            getMetaData(c, envLoader, false);\n+        }\n+    }\n+\n     /**\n      * Return query metadata for the given class, name, and classloader.\n      */",
                "raw_url": "https://github.com/apache/openjpa/raw/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java",
                "sha": "48cdc71f773e15895371d9b6ad4347c9257335f2",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/openjpa/blob/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties?ref=b4077bd6a64f73fd28c210f265d5ef8b089199dd",
                "deletions": 1,
                "filename": "openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties",
                "patch": "@@ -204,6 +204,8 @@ tool-usage: Usage: java org.apache.openjpa.meta.MetaDataTool\\n\\\n \t\\t<class name | .java file | .class file>+\n no-named-query: There is no named query defined for the class \"{0}\" with \\\n \tthe name \"{1}\".\n+no-named-query-null-class: There is no query with the name \"{1}\" defined for \\\n+    any of the known persistent classes: {0}.\n no-named-sequence: Could not locate the sequence with name \"{0}\".  It is \\\n \tpossible that the metadata file containing the sequence has not been \\\n \tparsed yet.  Make sure to use a persistent class whose metadata is in \\\n@@ -274,4 +276,4 @@ no-metadatafactory: MetaDataFactory could not be configured \\\n     using Ant, please see the <properties> or <propertiesFile> attributes \\\n     of the task''s nested <config> element. This can also occur if your \\\n     OpenJPA distribution jars are corrupt, or if your security policy is \\\n-    overly strict.\n\\ No newline at end of file\n+    overly strict.",
                "raw_url": "https://github.com/apache/openjpa/raw/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties",
                "sha": "601f70066f63f16b1a934f0234ffbb4adc9ad9b3",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/openjpa/blob/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java?ref=b4077bd6a64f73fd28c210f265d5ef8b089199dd",
                "deletions": 0,
                "filename": "openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java",
                "patch": "@@ -42,6 +42,7 @@\n     MAP_KEY,\n     NATIVE_QUERIES,\n     NATIVE_QUERY,\n+    QUERY_STRING,\n     ORDER_BY,\n     QUERIES,\n     QUERY,",
                "raw_url": "https://github.com/apache/openjpa/raw/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java",
                "sha": "2d913268828a95918956e9dbd0cfe2a1dc4a62b1",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/openjpa/blob/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=b4077bd6a64f73fd28c210f265d5ef8b089199dd",
                "deletions": 0,
                "filename": "openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java",
                "patch": "@@ -119,6 +119,7 @@\n         _elems.put(\"named-query\", QUERY);\n         _elems.put(\"named-native-query\", NATIVE_QUERY);\n         _elems.put(\"query-hint\", QUERY_HINT);\n+        _elems.put(\"query\", QUERY_STRING);\n \n         _elems.put(\"flush-mode\", FLUSH_MODE);\n         _elems.put(\"sequence-generator\", SEQ_GENERATOR);\n@@ -442,6 +443,9 @@ protected boolean startSystemElement(String name, Attributes attrs)\n                 case NATIVE_QUERY:\n                     ret = startNamedNativeQuery(attrs);\n                     break;\n+                case QUERY_STRING:\n+                    ret = startQueryString(attrs);\n+                    break;\n                 case SEQ_GENERATOR:\n                     ret = startSequenceGenerator(attrs);\n                     break;\n@@ -489,6 +493,9 @@ else if (tag instanceof MetaDataTag) {\n                 case NATIVE_QUERY:\n                     endNamedNativeQuery();\n                     break;\n+                case QUERY_STRING:\n+                    endQueryString();\n+                    break;\n                 case SEQ_GENERATOR:\n                     endSequenceGenerator();\n                     break;\n@@ -553,6 +560,9 @@ protected boolean startClassElement(String name, Attributes attrs)\n                 case NATIVE_QUERY:\n                     ret = startNamedNativeQuery(attrs);\n                     break;\n+                case QUERY_STRING:\n+                    ret = startQueryString(attrs);\n+                    break;\n                 case SEQ_GENERATOR:\n                     ret = startSequenceGenerator(attrs);\n                     break;\n@@ -640,6 +650,9 @@ else if (tag instanceof MetaDataTag) {\n                 case NATIVE_QUERY:\n                     endNamedNativeQuery();\n                     break;\n+                case QUERY_STRING:\n+                    endQueryString();\n+                    break;\n                 case SEQ_GENERATOR:\n                     endSequenceGenerator();\n                     break;\n@@ -1368,6 +1381,17 @@ protected void endNamedQuery()\n         popElement();\n     }\n \n+    protected boolean startQueryString(Attributes attrs)\n+        throws SAXException {\n+        return true;\n+    }\n+\n+    protected void endQueryString()\n+        throws SAXException {\n+        QueryMetaData meta = (QueryMetaData) currentElement();\n+        meta.setQueryString(currentText());\n+    }\n+\n     /**\n      * Parse query-hint.\n      */",
                "raw_url": "https://github.com/apache/openjpa/raw/b4077bd6a64f73fd28c210f265d5ef8b089199dd/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java",
                "sha": "c76eaeb1884fc5b71b99f3e4f971492828a772ee",
                "status": "modified"
            }
        ],
        "message": "OPENJPA-74: Fixed multiple problems with named queries: 1. They were not being parsed as part of the orm.xml file, since we were incorrectly looking for an attribute named 'query' (when it really should have been a sub-element named 'query'). 2. Looking for a named query did not force resolution of all metadatas. 3. An NPE was being thrown when a JPQL query was created with a null filter\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@470996 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openjpa/commit/22226fc0f4b49f5cdb16792e0901d94ae7d838b7",
        "repo": "openjpa",
        "unit_tests": [
            "TestMetaDataRepository.java",
            "TestXMLPersistenceMetaDataParser.java"
        ]
    },
    "openjpa_bb01292": {
        "bug_id": "openjpa_bb01292",
        "commit": "https://github.com/apache/openjpa/commit/bb01292ce90b5ad2e733390bf4cfcb238989e1b8",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/openjpa/blob/bb01292ce90b5ad2e733390bf4cfcb238989e1b8/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=bb01292ce90b5ad2e733390bf4cfcb238989e1b8",
                "deletions": 1,
                "filename": "openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java",
                "patch": "@@ -350,7 +350,8 @@ protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n         else\n             isolationLevel = conf.getTransactionIsolationConstant();\n \n-        if (fetch.getReadLockLevel() >= MixedLockLevels.LOCK_PESSIMISTIC_WRITE)\n+        if (fetch != null\n+            && fetch.getReadLockLevel() >= MixedLockLevels.LOCK_PESSIMISTIC_WRITE)\n             isolationLevel = Connection.TRANSACTION_SERIALIZABLE;\n \n         if (isForUpdate) {",
                "raw_url": "https://github.com/apache/openjpa/raw/bb01292ce90b5ad2e733390bf4cfcb238989e1b8/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java",
                "sha": "7b89c927206acdfd25c3b40c27f4f87ed977262b",
                "status": "modified"
            }
        ],
        "message": "OPENJPA-957 - Guard NPE as fetch may be null in getForUpdateClause.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@762177 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openjpa/commit/718370e1ef8ceaa48fedfa92b90dc49de6cb530b",
        "repo": "openjpa",
        "unit_tests": [
            "TestDB2Dictionary.java"
        ]
    },
    "openjpa_c960f72": {
        "bug_id": "openjpa_c960f72",
        "commit": "https://github.com/apache/openjpa/commit/c960f725cb6d6ad6211ceec654ea657ccbebface",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/openjpa/blob/c960f725cb6d6ad6211ceec654ea657ccbebface/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=c960f725cb6d6ad6211ceec654ea657ccbebface",
                "deletions": 8,
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java",
                "patch": "@@ -281,17 +281,17 @@ private static Modifications getModifications(Map<DataCache,Modifications> modMa\n \n     public boolean exists(OpenJPAStateManager sm, Object edata) {\n         DataCache cache = _mgr.selectCache(sm);\n-        CacheStatistics stats = cache.getStatistics();\n+        CacheStatistics stats = (cache == null) ? null : cache.getStatistics();\n         if (cache != null && !isLocking(null) && cache.contains(sm.getObjectId())){\n-            if (stats.isEnabled()) {\n+            if (stats != null && stats.isEnabled()) {\n                 // delay this call ONLY if stats collection is enabled\n                 Class<?> cls = sm.getMetaData().getDescribedType();\n                 ((CacheStatisticsSPI)stats).newGet(cls, false);\n             }\n             return true;\n         }\n         // If isLocking(null)==true && cache.contains(..) == true... probably shouldn't count?\n-        if (stats.isEnabled()) {\n+        if (stats != null && stats.isEnabled()) {\n             // delay this call ONLY if stats collection is enabled\n             Class<?> cls = sm.getMetaData().getDescribedType();\n             ((CacheStatisticsSPI)stats).newGet(cls, false);\n@@ -322,14 +322,13 @@ public boolean isCached(List<Object> oids, BitSet edata) {\n     public boolean syncVersion(OpenJPAStateManager sm, Object edata) {\n         DataCache cache = _mgr.selectCache(sm);\n         FetchConfiguration fc = sm.getContext().getFetchConfiguration();\n-        CacheStatistics stats = cache.getStatistics();\n+        CacheStatistics stats = (cache == null) ? null : cache.getStatistics();\n         if (cache == null || sm.isEmbedded() || fc.getCacheRetrieveMode() == DataCacheRetrieveMode.BYPASS) {\n-            if(stats.isEnabled()){\n-                ((CacheStatisticsSPI)stats).newGet(sm.getMetaData().getDescribedType(), false);\n+            if (stats != null && stats.isEnabled()) {\n+                ((CacheStatisticsSPI) stats).newGet(sm.getMetaData().getDescribedType(), false);\n             }\n             return super.syncVersion(sm, edata);\n         }\n-        \n         DataCachePCData data;\n         Object version = null;\n         data = cache.get(sm.getObjectId());\n@@ -338,7 +337,7 @@ public boolean syncVersion(OpenJPAStateManager sm, Object edata) {\n \n         // if we have a cached version update from there\n         if (version != null) {\n-            if(stats.isEnabled()){\n+            if (stats != null && stats.isEnabled()) {\n                 ((CacheStatisticsSPI)stats).newGet(data.getType(), true);\n             }\n             if (!version.equals(sm.getVersion())) {",
                "raw_url": "https://github.com/apache/openjpa/raw/c960f725cb6d6ad6211ceec654ea657ccbebface/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java",
                "sha": "8f1fecf645abe5319ba1152fcbe21a432436a337",
                "status": "modified"
            },
            {
                "additions": 82,
                "blob_url": "https://github.com/apache/openjpa/blob/c960f725cb6d6ad6211ceec654ea657ccbebface/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheStoreManager.java",
                "changes": 82,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheStoreManager.java?ref=c960f725cb6d6ad6211ceec654ea657ccbebface",
                "deletions": 0,
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheStoreManager.java",
                "patch": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.datacache.DataCacheManager;\n+import org.apache.openjpa.datacache.DataCacheStoreManager;\n+import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.kernel.DelegatingStoreManager;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.persistence.EntityManagerImpl;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * \n+ * This test was added for OPENJPA-1882.\n+ * <p>\n+ * When caching is enabled and a given type isn't being cached, make sure calling exists/syncVersion with that type\n+ * doesn't result in a NPE.\n+ * \n+ */\n+public class TestDataCacheStoreManager extends SingleEMFTestCase {\n+    Object[] p =\n+        new Object[] { CLEAR_TABLES, CachedEntityStatistics.class, \"openjpa.DataCache\", \"true(EnableStatistics=true)\",\n+            \"openjpa.QueryCache\", \"true\", };\n+\n+    private EntityManager em;\n+    private DataCacheStoreManager dsm;\n+    private DataCacheManager dcm;\n+    private OpenJPAStateManager sm;\n+\n+    public void setUp() {\n+        super.setUp(p);\n+\n+        em = emf.createEntityManager();\n+        dcm = emf.getConfiguration().getDataCacheManagerInstance();\n+        dsm =\n+            (DataCacheStoreManager) ((DelegatingStoreManager) ((EntityManagerImpl) em).getBroker().getStoreManager())\n+                .getDelegate();\n+\n+        em.getTransaction().begin();\n+        CachedEntityStatistics p = new CachedEntityStatistics();\n+        em.persist(p);\n+        em.getTransaction().commit();\n+\n+        dcm.stopCaching(CachedEntityStatistics.class.getName());\n+\n+        sm = (OpenJPAStateManager) ((PersistenceCapable) p).pcGetStateManager();\n+    }\n+\n+    public void tearDown() throws Exception {\n+        dcm.startCaching(CachedEntityStatistics.class.getName());\n+        em.close();\n+\n+        super.tearDown();\n+    }\n+\n+    public void testExists() {\n+        dsm.exists(sm, null);\n+    }\n+\n+    public void testsyncVersion() {\n+        dsm.syncVersion(sm, null);\n+    }\n+}",
                "raw_url": "https://github.com/apache/openjpa/raw/c960f725cb6d6ad6211ceec654ea657ccbebface/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheStoreManager.java",
                "sha": "e84cf8c91811000650b021406db7414b1ac5f4d6",
                "status": "added"
            }
        ],
        "message": "OPENJPA-1882: Fix DataCacheStoreManager NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1033637 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openjpa/commit/5040a436e7dc394dececa869321cfae52f30e4ac",
        "repo": "openjpa",
        "unit_tests": [
            "TestDataCacheStoreManager.java"
        ]
    },
    "openjpa_cc1dcd9": {
        "bug_id": "openjpa_cc1dcd9",
        "commit": "https://github.com/apache/openjpa/commit/cc1dcd9a4c177a28db4d8060748f59bf4e9b670e",
        "file": [
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/openjpa/blob/cc1dcd9a4c177a28db4d8060748f59bf4e9b670e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java",
                "changes": 76,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java?ref=cc1dcd9a4c177a28db4d8060748f59bf4e9b670e",
                "deletions": 42,
                "filename": "openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java",
                "patch": "@@ -267,59 +267,52 @@ public void generateSchemas(String[] schemasAndTables)\n      * {@link #generatePrimaryKeys}, and {@link #generateForeignKeys}\n      * automatically.\n      */\n-    public void generateSchemas(DBIdentifier[] schemasAndTables)\n-        throws SQLException {\n+    public void generateSchemas(DBIdentifier[] schemasAndTables) throws SQLException {\n         fireGenerationEvent(_loc.get(\"generating-schemas\"));\n+        // generate all schemas and tables\n+        try {\n+            getConn();\n+            Object[][] schemaMap;\n+            if (schemasAndTables == null || schemasAndTables.length == 0)\n+                schemaMap = _allowed;\n+            else\n+                schemaMap = parseSchemasList(schemasAndTables);\n \n-        Object[][] schemaMap;\n-        if (schemasAndTables == null || schemasAndTables.length == 0)\n-            schemaMap = _allowed;\n-        else\n-            schemaMap = parseSchemasList(schemasAndTables);\n-\n-        if (schemaMap == null) {\n-            generateSchema(DBIdentifier.NULL, (DBIdentifier[])null);\n-\n-            // estimate the number of schema objects we will need to visit\n-            // in order to estimate progress total for any listeners\n-            int numTables = getTables(null).size();\n-            _schemaObjects += numTables\n-                + (_pks ? numTables : 0)\n-                + (_indexes ? numTables : 0)\n-                + (_fks ? numTables : 0);\n-\n-            if (_pks)\n-                generatePrimaryKeys(DBIdentifier.NULL, null);\n-            if (_indexes)\n-                generateIndexes(DBIdentifier.NULL, null);\n-            if (_fks)\n-                generateForeignKeys(DBIdentifier.NULL, null);\n-            return;\n-        }\n+            if (schemaMap == null) {\n+                generateSchema(DBIdentifier.NULL, (DBIdentifier[]) null);\n+\n+                // estimate the number of schema objects we will need to visit\n+                // in order to estimate progress total for any listeners\n+                int numTables = getTables(null).size();\n+                _schemaObjects +=\n+                    numTables + (_pks ? numTables : 0) + (_indexes ? numTables : 0) + (_fks ? numTables : 0);\n+\n+                if (_pks)\n+                    generatePrimaryKeys(DBIdentifier.NULL, null);\n+                if (_indexes)\n+                    generateIndexes(DBIdentifier.NULL, null);\n+                if (_fks)\n+                    generateForeignKeys(DBIdentifier.NULL, null);\n+                return;\n+            }\n \n-        // generate all schemas and tables\n-        try{ \n-            getConn(); \n             for (int i = 0; i < schemaMap.length; i++) {\n                 generateSchema((DBIdentifier) schemaMap[i][0], (DBIdentifier[]) schemaMap[i][1]);\n             }\n-        \n+\n             // generate pks, indexes, fks\n             DBIdentifier schemaName = DBIdentifier.NULL;\n             DBIdentifier[] tableNames;\n             for (int i = 0; i < schemaMap.length; i++) {\n                 schemaName = (DBIdentifier) schemaMap[i][0];\n                 tableNames = (DBIdentifier[]) schemaMap[i][1];\n-    \n+\n                 // estimate the number of schema objects we will need to visit\n                 // in order to estimate progress total for any listeners\n-                int numTables = (tableNames != null) ? tableNames.length\n-                    : getTables(schemaName).size();\n-                _schemaObjects += numTables\n-                    + (_pks ? numTables : 0)\n-                    + (_indexes ? numTables : 0)\n-                    + (_fks ? numTables : 0);\n-    \n+                int numTables = (tableNames != null) ? tableNames.length : getTables(schemaName).size();\n+                _schemaObjects +=\n+                    numTables + (_pks ? numTables : 0) + (_indexes ? numTables : 0) + (_fks ? numTables : 0);\n+\n                 if (_pks) {\n                     generatePrimaryKeys(schemaName, tableNames);\n                 }\n@@ -330,9 +323,8 @@ public void generateSchemas(DBIdentifier[] schemasAndTables)\n                     generateForeignKeys(schemaName, tableNames);\n                 }\n             }\n-        }\n-        finally  { \n-            closeConn(); \n+        } finally {\n+            closeConn();\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/openjpa/raw/cc1dcd9a4c177a28db4d8060748f59bf4e9b670e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java",
                "sha": "51bf3acbdf54e3481eebc25e127ef887f29ef7c1",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/openjpa/blob/cc1dcd9a4c177a28db4d8060748f59bf4e9b670e/openjpa-persistence-jdbc/pom.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/pom.xml?ref=cc1dcd9a4c177a28db4d8060748f59bf4e9b670e",
                "deletions": 1,
                "filename": "openjpa-persistence-jdbc/pom.xml",
                "patch": "@@ -926,7 +926,6 @@\n                         <exclude>org/apache/openjpa/persistence/jdbc/schema/TestPerClassSequenceFactory.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/jdbc/schema/TestSchema.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/jdbc/schema/TestSchemaClone.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/jdbc/schema/TestSequenceGeneratorEnsureCapacityCall.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaParser.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaSerializer.java</exclude>",
                "raw_url": "https://github.com/apache/openjpa/raw/cc1dcd9a4c177a28db4d8060748f59bf4e9b670e/openjpa-persistence-jdbc/pom.xml",
                "sha": "35fc1c398c4aa082b1e8e6d61e5cdaac87cb6581",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/openjpa/blob/cc1dcd9a4c177a28db4d8060748f59bf4e9b670e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/BaseJDBCTest.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/BaseJDBCTest.java?ref=cc1dcd9a4c177a28db4d8060748f59bf4e9b670e",
                "deletions": 20,
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/BaseJDBCTest.java",
                "patch": "@@ -27,31 +27,17 @@\n  */\n package org.apache.openjpa.persistence.jdbc.kernel;\n \n-import java.beans.BeanInfo;\n-import java.beans.Introspector;\n-import java.beans.PropertyDescriptor;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.math.BigDecimal;\n-import java.math.BigInteger;\n-import java.util.*;\n-import javax.management.IntrospectionException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n import org.apache.openjpa.kernel.Broker;\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.jpql.JPQLParser;\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n import org.apache.openjpa.lib.conf.Configurations;\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\n-\n-\n-\n-import java.lang.annotation.Annotation;\n-import junit.framework.*;\n-import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n \n \n public class BaseJDBCTest",
                "raw_url": "https://github.com/apache/openjpa/raw/cc1dcd9a4c177a28db4d8060748f59bf4e9b670e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/BaseJDBCTest.java",
                "sha": "ec67df180415a5572e9ed929bdca7777386a9ebe",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/openjpa/blob/cc1dcd9a4c177a28db4d8060748f59bf4e9b670e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java",
                "changes": 83,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java?ref=cc1dcd9a4c177a28db4d8060748f59bf4e9b670e",
                "deletions": 65,
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java",
                "patch": "@@ -42,7 +42,6 @@\n \n import org.apache.openjpa.persistence.jdbc.common.apps.*;\n \n-\n import java.lang.annotation.Annotation;\n import junit.framework.*;\n import javax.persistence.EntityManager;\n@@ -53,82 +52,36 @@\n import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n \n+public class TestSchemaGenerator extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest {\n \n-public class TestSchemaGenerator\n-        extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest {\n-        \n-    /** Creates a new instance of TestSchemaGenerator */\n-    public TestSchemaGenerator(String name) \n-    {\n-    \tsuper(name);\n+    @Override\n+    protected String getPersistenceUnitName() {\n+        // TODO Auto-generated method stub\n+        return \"TestConv\";\n     }\n-    \n-    public void DBMetadataTest()\n-    throws Exception {\n-        OpenJPAEntityManagerFactory pmf = (OpenJPAEntityManagerFactory)\n-        getEmf();\n-        //FIXME jthomas\n-        \n-        //ClassMapping cm = (ClassMapping) KodoJDOHelper.getMetaData\n-        //    (pmf, RuntimeTest1.class);\n-        ClassMapping cm =null;\n-        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\n-        \n-        DataSource ds = (DataSource) conf.getDataSource2(null);\n-        Connection c = ds.getConnection();\n-        DatabaseMetaData meta = c.getMetaData();\n-        DBDictionary dict = conf.getDBDictionaryInstance();\n-        \n-        String schema = cm.getTable().getSchema().getName();\n-        Table[] tables = dict.getTables(meta, c.getCatalog(), schema,\n-                cm.getTable().getName(), c);\n-        assertEquals(1, tables.length);\n-        \n-        Column[] columns = dict.getColumns(meta, c.getCatalog(), schema,\n-                cm.getTable().getName(), null, c);\n-        for (int i = 0; i < columns.length; i++)\n-            System.out.println(\"### \" + columns[i].getName());\n+\n+    /** Creates a new instance of TestSchemaGenerator */\n+    public TestSchemaGenerator(String name) {\n+        super(name);\n     }\n-    \n-    public void testSchemaGen()\n-    throws Exception {\n-        OpenJPAEntityManagerFactory pmf = (OpenJPAEntityManagerFactory)\n-        getEmf();\n+\n+    public void testSchemaGen() throws Exception {\n+        OpenJPAEntityManagerFactory pmf = (OpenJPAEntityManagerFactory) getEmf();\n         OpenJPAEntityManager pm = pmf.createEntityManager();\n-        JDBCConfiguration con =\n-            (JDBCConfiguration) ((OpenJPAEntityManagerSPI) pm)\n-            .getConfiguration();\n-        DBDictionary dict = con.getDBDictionaryInstance();\n-        MappingRepository repos = con.getMappingRepositoryInstance();\n-        ClassMapping cm = repos.getMapping(RuntimeTest1.class,\n-                pm.getClassLoader(), true);\n-        String schemas = cm.getTable().getSchema().getName();\n-        if (schemas == null)\n-            schemas = \"\";\n-        schemas += \".\" + cm.getTable().getName();\n-        \n-        Map props=new HashMap();\n-        props.put(\"openjpa.jdbc.Schemas\", schemas);\n-        \n-        OpenJPAEntityManagerFactory kpmf =(OpenJPAEntityManagerFactory)\n-                getEmf(props);\n-        JDBCConfiguration conf =\n-            (JDBCConfiguration) ((OpenJPAEntityManagerFactorySPI) kpmf)\n-            .getConfiguration();\n-        \n+        JDBCConfiguration conf = (JDBCConfiguration) ((OpenJPAEntityManagerFactorySPI) pmf).getConfiguration();\n+\n         StringWriter sw = new StringWriter();\n-        \n+\n         SchemaTool.Flags flags = new SchemaTool.Flags();\n         flags.writer = sw;\n         flags.primaryKeys = true;\n         flags.foreignKeys = true;\n         flags.indexes = true;\n         flags.openjpaTables = true;\n         flags.action = SchemaTool.ACTION_REFLECT;\n-        \n-        SchemaTool.run(conf, new String[0], flags,\n-                getClass().getClassLoader());\n-        \n+\n+        SchemaTool.run(conf, new String[0], flags, getClass().getClassLoader());\n+\n         sw.flush();\n         String data = sw.toString();\n         assertTrue(data.length() > 0);",
                "raw_url": "https://github.com/apache/openjpa/raw/cc1dcd9a4c177a28db4d8060748f59bf4e9b670e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java",
                "sha": "2832d6c47109142d725613fff06bcfd2e921fa4b",
                "status": "modified"
            }
        ],
        "message": "OPENJPA-1847: Fix NPE in SchemaGenerator and formatting.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1063827 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openjpa/commit/d91475d506d06aa550b4ff15c20bcdc348c58684",
        "repo": "openjpa",
        "unit_tests": [
            "TestSchemaGenerator.java"
        ]
    },
    "openjpa_f641376": {
        "bug_id": "openjpa_f641376",
        "commit": "https://github.com/apache/openjpa/commit/f6413764d5b41a83003a163b74023dce8398fb05",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/openjpa/blob/f6413764d5b41a83003a163b74023dce8398fb05/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java?ref=f6413764d5b41a83003a163b74023dce8398fb05",
                "deletions": 5,
                "filename": "openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java",
                "patch": "@@ -94,15 +94,16 @@\n     private static long _lastMillis = 0L;\n     private static final int MAX_14BIT = 0x3FFF;\n     private static short _seq = 0;\n-        \n+\n+    private static boolean type1Initialized = false;\n     /*\n      * Initializer for type 1 UUIDs.  Creates random generator and genenerates\n      * the node portion of the UUID using the IP address.\n      */\n-    private static synchronized void initializeForType1()\n-    {\n-        if (RANDOM != null)\n+    private static synchronized void initializeForType1() {\n+        if (type1Initialized == true) {\n             return;\n+        }\n         // note that secure random is very slow the first time\n         // it is used; consider switching to a standard random\n         RANDOM = new SecureRandom();\n@@ -118,6 +119,7 @@ private static synchronized void initializeForType1()\n         IP = new byte[6];\n         RANDOM.nextBytes(IP);\n         System.arraycopy(ip, 0, IP, 2, ip.length);        \n+        type1Initialized = true;\n     }\n \n     /**\n@@ -134,8 +136,9 @@ private static synchronized void initializeForType1()\n      * Creates a type 1 UUID \n      */\n     public static byte[] createType1() {\n-        if (RANDOM == null)\n+        if (type1Initialized == false) {\n             initializeForType1();\n+        }\n         // set ip addr\n         byte[] uuid = new byte[16];\n         System.arraycopy(IP, 0, uuid, 10, IP.length);",
                "raw_url": "https://github.com/apache/openjpa/raw/f6413764d5b41a83003a163b74023dce8398fb05/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java",
                "sha": "a9028a6383827b4079169907a550f7ac10ac19d1",
                "status": "modified"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/openjpa/blob/f6413764d5b41a83003a163b74023dce8398fb05/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java?ref=f6413764d5b41a83003a163b74023dce8398fb05",
                "deletions": 0,
                "filename": "openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java",
                "patch": "@@ -18,6 +18,10 @@\n  */\n package org.apache.openjpa.lib.util;\n \n+import java.lang.reflect.Field;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.security.PrivilegedExceptionAction;\n import java.util.HashSet;\n import java.util.Set;\n \n@@ -76,4 +80,35 @@ public void testGetTime() {\n             time = newTime;\n         }\n     }\n+    \n+    public void testInitType1MultiThreaded() throws Exception {\n+        // This test method depends IP and RANDOM in UUIDGenerator to be null\n+        // and type1Initialized to be false. Using reflection to ensure that\n+        // those fields are null. Wrap this  method in doPrivledgedAction so it\n+        // doesn't fail when running with security.\n+        AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {\n+            public Object run() throws Exception {\n+                Class uuid = UUIDGenerator.class;\n+                Field[] fields = uuid.getDeclaredFields();\n+                for (Field f : fields) {\n+                    if (f.getName().equals(\"type1Initialized\")) {\n+                        f.setAccessible(true);\n+                        f.set(null, false);\n+                    } else if (f.getName().equals(\"IP\") || f.getName().equals(\"RANDOM\")) {\n+                        f.setAccessible(true);\n+                        f.set(null, null);\n+                    }\n+                }\n+                Thread t = new Thread() {\n+                    public void run() {\n+                        UUIDGenerator.createType1();\n+                    }\n+                };\n+\n+                t.start();\n+                UUIDGenerator.createType1();\n+                return null;\n+            }\n+        });\n+    }// end testInitType1MultiThreaded\n }",
                "raw_url": "https://github.com/apache/openjpa/raw/f6413764d5b41a83003a163b74023dce8398fb05/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java",
                "sha": "8b86fe23429fdbedbd7f0c81789edb39c47916c7",
                "status": "modified"
            }
        ],
        "message": "OPENJPA-1168:\nImproved checking for type1 UUID generator is initialized. Reducing\ntiming window which could result in a NPE.\nSubmitted by: Rick Curtis\n\tmodified:   openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java\n\tmodified:   openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@792592 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/openjpa/commit/07a98e871b2676bc3c868e4ca0e652a6af9027f2",
        "repo": "openjpa",
        "unit_tests": [
            "TestUUIDGenerator.java"
        ]
    }
}