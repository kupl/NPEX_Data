{
    "directory-scimple_010e86c": {
        "bug_id": "directory-scimple_010e86c",
        "commit": "https://github.com/apache/directory-scimple/commit/010e86cfd551da2e134975b59c5f2584d0d37a86",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/directory-scimple/blob/010e86cfd551da2e134975b59c5f2584d0d37a86/scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/utility/AttributeUtil.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/directory-scimple/contents/scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/utility/AttributeUtil.java?ref=010e86cfd551da2e134975b59c5f2584d0d37a86",
                "deletions": 11,
                "filename": "scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/utility/AttributeUtil.java",
                "patch": "@@ -7,6 +7,7 @@\n import java.io.ObjectOutputStream;\n import java.lang.reflect.Field;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map.Entry;\n@@ -82,7 +83,6 @@ public void init() { // TODO move this to a CDI producer\n   }\n   \n   private <T extends ScimResource> T setAttributesForDisplayInternal(T resource, Returned ... removeAttributesOfTypes) throws IllegalArgumentException, IllegalAccessException, AttributeDoesNotExistException, IOException {\n-\n     T copy = cloneScimResource(resource);\n     String resourceType = copy.getResourceType();\n     Schema schema = registry.getBaseSchemaOfResourceType(resourceType);\n@@ -110,7 +110,7 @@ public void init() { // TODO move this to a CDI producer\n       return setAttributesForDisplay(resource);\n     } else {\n       T copy = cloneScimResource(resource);\n-\n+      \n       String resourceType = copy.getResourceType();\n       Schema schema = registry.getBaseSchemaOfResourceType(resourceType);\n \n@@ -198,7 +198,6 @@ private void removeAttributes(Object object, AttributeContainer attributeContain\n   }\n \n   private void processAttributes(Object object, AttributeContainer attributeContainer, Function<Attribute, Boolean> function) throws IllegalArgumentException, IllegalAccessException {\n-\n     if (attributeContainer != null && object != null) {\n       for (Attribute attribute : attributeContainer.getAttributes()) {\n         Field field = attribute.getField();\n@@ -276,7 +275,9 @@ private void processAttributes(Object object, AttributeContainer attributeContai\n \n     for (AttributeReference attributeReference : attributeReferences) {\n       Set<Attribute> findAttributes = findAttribute(attributeReference, includeAttributeChain);\n-      attributes.addAll(findAttributes);\n+      if (!findAttributes.isEmpty()) {\n+        attributes.addAll(findAttributes);\n+      }\n     }\n \n     return attributes;\n@@ -285,35 +286,42 @@ private void processAttributes(Object object, AttributeContainer attributeContai\n   private Set<Attribute> findAttribute(AttributeReference attributeReference, boolean includeAttributeChain) throws AttributeDoesNotExistException {\n     String schemaUrn = attributeReference.getUrn();\n     Schema schema = null;\n-\n+    Set<Attribute> attributes;\n+    \n     if (!StringUtils.isEmpty(schemaUrn)) {\n       schema = registry.getSchema(schemaUrn);\n \n-      Set<Attribute> attributes = findAttributeInSchema(schema, attributeReference, includeAttributeChain);\n-      if (attributes == null) {\n+      attributes = findAttributeInSchema(schema, attributeReference, includeAttributeChain);\n+      if (attributes.isEmpty()) {\n+        log.error(\"Attribute \" + attributeReference.getFullyQualifiedAttributeName() + \"not found in schema \" + schemaUrn);\n         throw new AttributeDoesNotExistException(attributeReference.getFullyQualifiedAttributeName());\n       }\n       return attributes;\n     }\n \n     // Handle unqualified attributes, look in the core schemas\n     schema = registry.getSchema(ScimUser.SCHEMA_URI);\n-    Set<Attribute> attributes = findAttributeInSchema(schema, attributeReference, includeAttributeChain);\n-    if (attributes != null) {\n+    attributes = findAttributeInSchema(schema, attributeReference, includeAttributeChain);\n+    if (!attributes.isEmpty()) {\n       return attributes;\n     }\n \n     schema = registry.getSchema(ScimGroup.SCHEMA_URI);\n     attributes = findAttributeInSchema(schema, attributeReference, includeAttributeChain);\n-    if (attributes != null) {\n+    if (!attributes.isEmpty()) {\n       return attributes;\n     }\n \n+    log.error(\"Attribute \" + attributeReference.getFullyQualifiedAttributeName() + \"not found in any schema.\");\n     throw new AttributeDoesNotExistException(attributeReference.getFullyQualifiedAttributeName());\n   }\n \n   private Set<Attribute> findAttributeInSchema(Schema schema, AttributeReference attributeReference, boolean includeAttributeChain) {\n     AttributeContainer attributeContainer = schema;\n+    if (attributeContainer == null) {\n+      return Collections.emptySet();\n+    }\n+    \n     String[] attributeNames = attributeReference.getAttributeName();\n \n     Set<Attribute> attributes = new HashSet<>();\n@@ -322,7 +330,7 @@ private void processAttributes(Object object, AttributeContainer attributeContai\n       attributeContainer = attributeContainer.getAttribute(attributeName);\n \n       if (attributeContainer == null) {\n-        return null;\n+        return Collections.emptySet();\n       }\n \n       if (includeAttributeChain) {",
                "raw_url": "https://github.com/apache/directory-scimple/raw/010e86cfd551da2e134975b59c5f2584d0d37a86/scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/utility/AttributeUtil.java",
                "sha": "f26dad2b8c76a5e9af95284cf7f555c082fc80b3",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #46 from src125/bugfix/issue45\n\nAdd null checks to AttributeUtil to avoid NPE",
        "parent": "https://github.com/apache/directory-scimple/commit/b34e3714ff1945df9b0993b6709d55491abe830c",
        "repo": "directory-scimple",
        "unit_tests": [
            "AttributeUtilTest.java"
        ]
    },
    "directory-scimple_3b8e4c1": {
        "bug_id": "directory-scimple_3b8e4c1",
        "commit": "https://github.com/apache/directory-scimple/commit/3b8e4c16ed38d8314f5b8a716b5e9913265e7932",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-scimple/blob/3b8e4c16ed38d8314f5b8a716b5e9913265e7932/scim-spec/scim-spec-schema/src/main/java/edu/psu/swe/scim/spec/resources/PhoneNumber.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-scimple/contents/scim-spec/scim-spec-schema/src/main/java/edu/psu/swe/scim/spec/resources/PhoneNumber.java?ref=3b8e4c16ed38d8314f5b8a716b5e9913265e7932",
                "deletions": 1,
                "filename": "scim-spec/scim-spec-schema/src/main/java/edu/psu/swe/scim/spec/resources/PhoneNumber.java",
                "patch": "@@ -71,7 +71,7 @@\n   @ScimAttribute(description = \"A Boolean value indicating the 'primary' or preferred attribute value for this attribute, e.g. the preferred phone number or primary phone number. The primary attribute value 'true' MUST appear no more than once.\")\n   @Getter\n   @Setter\n-  Boolean primary;\n+  Boolean primary = false;\n \n   @Setter(AccessLevel.NONE)\n   @Getter",
                "raw_url": "https://github.com/apache/directory-scimple/raw/3b8e4c16ed38d8314f5b8a716b5e9913265e7932/scim-spec/scim-spec-schema/src/main/java/edu/psu/swe/scim/spec/resources/PhoneNumber.java",
                "sha": "7b8c75034e97bc1bd1281ea50698a27e801f8a45",
                "status": "modified"
            }
        ],
        "message": "Added default false value for PhoneNumber's primary flag. When the primary flag was not specified, serializing a ScimUser would throw a NPE. This fixes the NPE.",
        "parent": "https://github.com/apache/directory-scimple/commit/ec4297fccf17751f81b0e41e1c5cfd4f265e4b0b",
        "repo": "directory-scimple",
        "unit_tests": [
            "PhoneNumberTest.java"
        ]
    },
    "directory-scimple_7edb6d7": {
        "bug_id": "directory-scimple_7edb6d7",
        "commit": "https://github.com/apache/directory-scimple/commit/7edb6d7957ba115922814cceb5dca0853f63a87b",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/directory-scimple/blob/7edb6d7957ba115922814cceb5dca0853f63a87b/scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/utility/AttributeUtil.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/directory-scimple/contents/scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/utility/AttributeUtil.java?ref=7edb6d7957ba115922814cceb5dca0853f63a87b",
                "deletions": 11,
                "filename": "scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/utility/AttributeUtil.java",
                "patch": "@@ -7,6 +7,7 @@\n import java.io.ObjectOutputStream;\n import java.lang.reflect.Field;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map.Entry;\n@@ -82,7 +83,6 @@ public void init() { // TODO move this to a CDI producer\n   }\n   \n   private <T extends ScimResource> T setAttributesForDisplayInternal(T resource, Returned ... removeAttributesOfTypes) throws IllegalArgumentException, IllegalAccessException, AttributeDoesNotExistException, IOException {\n-\n     T copy = cloneScimResource(resource);\n     String resourceType = copy.getResourceType();\n     Schema schema = registry.getBaseSchemaOfResourceType(resourceType);\n@@ -110,7 +110,7 @@ public void init() { // TODO move this to a CDI producer\n       return setAttributesForDisplay(resource);\n     } else {\n       T copy = cloneScimResource(resource);\n-\n+      \n       String resourceType = copy.getResourceType();\n       Schema schema = registry.getBaseSchemaOfResourceType(resourceType);\n \n@@ -198,7 +198,6 @@ private void removeAttributes(Object object, AttributeContainer attributeContain\n   }\n \n   private void processAttributes(Object object, AttributeContainer attributeContainer, Function<Attribute, Boolean> function) throws IllegalArgumentException, IllegalAccessException {\n-\n     if (attributeContainer != null && object != null) {\n       for (Attribute attribute : attributeContainer.getAttributes()) {\n         Field field = attribute.getField();\n@@ -276,7 +275,9 @@ private void processAttributes(Object object, AttributeContainer attributeContai\n \n     for (AttributeReference attributeReference : attributeReferences) {\n       Set<Attribute> findAttributes = findAttribute(attributeReference, includeAttributeChain);\n-      attributes.addAll(findAttributes);\n+      if (!findAttributes.isEmpty()) {\n+        attributes.addAll(findAttributes);\n+      }\n     }\n \n     return attributes;\n@@ -285,35 +286,42 @@ private void processAttributes(Object object, AttributeContainer attributeContai\n   private Set<Attribute> findAttribute(AttributeReference attributeReference, boolean includeAttributeChain) throws AttributeDoesNotExistException {\n     String schemaUrn = attributeReference.getUrn();\n     Schema schema = null;\n-\n+    Set<Attribute> attributes;\n+    \n     if (!StringUtils.isEmpty(schemaUrn)) {\n       schema = registry.getSchema(schemaUrn);\n \n-      Set<Attribute> attributes = findAttributeInSchema(schema, attributeReference, includeAttributeChain);\n-      if (attributes == null) {\n+      attributes = findAttributeInSchema(schema, attributeReference, includeAttributeChain);\n+      if (attributes.isEmpty()) {\n+        log.error(\"Attribute \" + attributeReference.getFullyQualifiedAttributeName() + \"not found in schema \" + schemaUrn);\n         throw new AttributeDoesNotExistException(attributeReference.getFullyQualifiedAttributeName());\n       }\n       return attributes;\n     }\n \n     // Handle unqualified attributes, look in the core schemas\n     schema = registry.getSchema(ScimUser.SCHEMA_URI);\n-    Set<Attribute> attributes = findAttributeInSchema(schema, attributeReference, includeAttributeChain);\n-    if (attributes != null) {\n+    attributes = findAttributeInSchema(schema, attributeReference, includeAttributeChain);\n+    if (!attributes.isEmpty()) {\n       return attributes;\n     }\n \n     schema = registry.getSchema(ScimGroup.SCHEMA_URI);\n     attributes = findAttributeInSchema(schema, attributeReference, includeAttributeChain);\n-    if (attributes != null) {\n+    if (!attributes.isEmpty()) {\n       return attributes;\n     }\n \n+    log.error(\"Attribute \" + attributeReference.getFullyQualifiedAttributeName() + \"not found in any schema.\");\n     throw new AttributeDoesNotExistException(attributeReference.getFullyQualifiedAttributeName());\n   }\n \n   private Set<Attribute> findAttributeInSchema(Schema schema, AttributeReference attributeReference, boolean includeAttributeChain) {\n     AttributeContainer attributeContainer = schema;\n+    if (attributeContainer == null) {\n+      return Collections.emptySet();\n+    }\n+    \n     String[] attributeNames = attributeReference.getAttributeName();\n \n     Set<Attribute> attributes = new HashSet<>();\n@@ -322,7 +330,7 @@ private void processAttributes(Object object, AttributeContainer attributeContai\n       attributeContainer = attributeContainer.getAttribute(attributeName);\n \n       if (attributeContainer == null) {\n-        return null;\n+        return Collections.emptySet();\n       }\n \n       if (includeAttributeChain) {",
                "raw_url": "https://github.com/apache/directory-scimple/raw/7edb6d7957ba115922814cceb5dca0853f63a87b/scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/utility/AttributeUtil.java",
                "sha": "f26dad2b8c76a5e9af95284cf7f555c082fc80b3",
                "status": "modified"
            }
        ],
        "message": "Add null checks before processing schemas and attributes\n\nISSUE #45: The findAttributeInSchema method would throw a NPE if the\nattribute does not exist in the given schema. Added null checks to\nensure that the AttributeDoesNotExistException is thrown if an attribute\nthat does not belong to any known schema is encountered.",
        "parent": "https://github.com/apache/directory-scimple/commit/7f4b40178721ed008c9b768c769a51a67232fea5",
        "repo": "directory-scimple",
        "unit_tests": [
            "AttributeUtilTest.java"
        ]
    },
    "directory-scimple_80f779d": {
        "bug_id": "directory-scimple_80f779d",
        "commit": "https://github.com/apache/directory-scimple/commit/80f779d0d9b952d069d030e47ceb4919f52745f1",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/directory-scimple/blob/80f779d0d9b952d069d030e47ceb4919f52745f1/scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/rest/BaseResourceTypeResourceImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/directory-scimple/contents/scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/rest/BaseResourceTypeResourceImpl.java?ref=80f779d0d9b952d069d030e47ceb4919f52745f1",
                "deletions": 2,
                "filename": "scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/rest/BaseResourceTypeResourceImpl.java",
                "patch": "@@ -188,8 +188,8 @@ public Response find(SearchRequest request) {\n       return BaseResourceTypeResource.super.find(request);\n     }\n     \n-    Set<AttributeReference> attributes = request.getAttributes();\n-    Set<AttributeReference> excludedAttributes = request.getExcludedAttributes();\n+    Set<AttributeReference> attributes = Optional.ofNullable(request.getAttributes()).orElse(Collections.emptySet());\n+    Set<AttributeReference> excludedAttributes = Optional.ofNullable(request.getExcludedAttributes()).orElse(Collections.emptySet());\n     if (!attributes.isEmpty() && !excludedAttributes.isEmpty()) {\n       return createAmbiguousAttributeParametersResponse();\n     }",
                "raw_url": "https://github.com/apache/directory-scimple/raw/80f779d0d9b952d069d030e47ceb4919f52745f1/scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/rest/BaseResourceTypeResourceImpl.java",
                "sha": "faf8e4d6efd6d2af214a6c7267927f803eeca0ac",
                "status": "modified"
            }
        ],
        "message": "Fixing NPE with attributes",
        "parent": "https://github.com/apache/directory-scimple/commit/5cf637dd79dd7dc555b31dadb22799949da808f6",
        "repo": "directory-scimple",
        "unit_tests": [
            "BaseResourceTypeResourceImplTest.java"
        ]
    },
    "directory-scimple_8e2b7d7": {
        "bug_id": "directory-scimple_8e2b7d7",
        "commit": "https://github.com/apache/directory-scimple/commit/8e2b7d7905f7657307f68b5647288c5e4c6d8a31",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/directory-scimple/blob/8e2b7d7905f7657307f68b5647288c5e4c6d8a31/scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/rest/BaseResourceTypeResourceImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/directory-scimple/contents/scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/rest/BaseResourceTypeResourceImpl.java?ref=8e2b7d7905f7657307f68b5647288c5e4c6d8a31",
                "deletions": 0,
                "filename": "scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/rest/BaseResourceTypeResourceImpl.java",
                "patch": "@@ -262,6 +262,10 @@ private EntityTag generateEtag(T resource) throws JAXBException {\n     StringWriter sw = new StringWriter();\n     \n     Meta meta = resource.getMeta();\n+    \n+    if (meta == null) {\n+      meta = new Meta();\n+    }\n \n     marshaller.setProperty(Marshaller.JAXB_ENCODING, \"UTF-8\");\n     resource.setMeta(null);",
                "raw_url": "https://github.com/apache/directory-scimple/raw/8e2b7d7905f7657307f68b5647288c5e4c6d8a31/scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/rest/BaseResourceTypeResourceImpl.java",
                "sha": "b68f404c0cb243ee068d3fb44b57ac33ed72e204",
                "status": "modified"
            }
        ],
        "message": "Fixing NPE when no Meta exists",
        "parent": "https://github.com/apache/directory-scimple/commit/1fea7c1370d5c2c0e0e19ca72d38bb80f88882c5",
        "repo": "directory-scimple",
        "unit_tests": [
            "BaseResourceTypeResourceImplTest.java"
        ]
    },
    "directory-scimple_953f19f": {
        "bug_id": "directory-scimple_953f19f",
        "commit": "https://github.com/apache/directory-scimple/commit/953f19fe0ad1b3c361fc79528f30f059a65133b4",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/directory-scimple/blob/953f19fe0ad1b3c361fc79528f30f059a65133b4/scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/rest/BaseResourceTypeResourceImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/directory-scimple/contents/scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/rest/BaseResourceTypeResourceImpl.java?ref=953f19fe0ad1b3c361fc79528f30f059a65133b4",
                "deletions": 2,
                "filename": "scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/rest/BaseResourceTypeResourceImpl.java",
                "patch": "@@ -201,8 +201,8 @@ public Response query(AttributeReferenceListWrapper attributes, AttributeReferen\n                                                 .map(wrapper -> wrapper.getAttributeReferences())\n                                                 .orElse(Collections.emptySet()));\n \n-    searchRequest.setFilter(filter.getFilter());\n-\n+    searchRequest.setFilter((filter != null) ? filter.getFilter() : null);\n+    \n     searchRequest.setSortBy(sortBy);\n     searchRequest.setSortOrder(sortOrder);\n     searchRequest.setStartIndex(startIndex);",
                "raw_url": "https://github.com/apache/directory-scimple/raw/953f19fe0ad1b3c361fc79528f30f059a65133b4/scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/rest/BaseResourceTypeResourceImpl.java",
                "sha": "b28e2a162695a8a9a178c2f1b72754478ae005c9",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in BaseResourceTypeResourceImpl\n\nAdd a null check to the FilterWrapper object in the query method to avoid NPE when building the SearchRequest object. This was preventing SCIM GET without a filter from executing properly.",
        "parent": "https://github.com/apache/directory-scimple/commit/f46daf48e6564b096b78d34da828281d9d7cd53e",
        "repo": "directory-scimple",
        "unit_tests": [
            "BaseResourceTypeResourceImplTest.java"
        ]
    },
    "directory-scimple_aac2037": {
        "bug_id": "directory-scimple_aac2037",
        "commit": "https://github.com/apache/directory-scimple/commit/aac20376cf6ccb4eef8c5b8a995b9a5825e08ce2",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/directory-scimple/blob/aac20376cf6ccb4eef8c5b8a995b9a5825e08ce2/scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/rest/BaseResourceTypeResourceImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/directory-scimple/contents/scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/rest/BaseResourceTypeResourceImpl.java?ref=aac20376cf6ccb4eef8c5b8a995b9a5825e08ce2",
                "deletions": 2,
                "filename": "scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/rest/BaseResourceTypeResourceImpl.java",
                "patch": "@@ -201,8 +201,8 @@ public Response query(AttributeReferenceListWrapper attributes, AttributeReferen\n                                                 .map(wrapper -> wrapper.getAttributeReferences())\n                                                 .orElse(Collections.emptySet()));\n \n-    searchRequest.setFilter(filter.getFilter());\n-\n+    searchRequest.setFilter((filter != null) ? filter.getFilter() : null);\n+    \n     searchRequest.setSortBy(sortBy);\n     searchRequest.setSortOrder(sortOrder);\n     searchRequest.setStartIndex(startIndex);",
                "raw_url": "https://github.com/apache/directory-scimple/raw/aac20376cf6ccb4eef8c5b8a995b9a5825e08ce2/scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/rest/BaseResourceTypeResourceImpl.java",
                "sha": "b28e2a162695a8a9a178c2f1b72754478ae005c9",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #30 from src125/src125-patch-BaseResourceTypeResourceImpl\n\nFix NPE in BaseResourceTypeResourceImpl",
        "parent": "https://github.com/apache/directory-scimple/commit/0e64de269498f6c4ed418232852eac896a4d0727",
        "repo": "directory-scimple",
        "unit_tests": [
            "BaseResourceTypeResourceImplTest.java"
        ]
    },
    "directory-scimple_dc18360": {
        "bug_id": "directory-scimple_dc18360",
        "commit": "https://github.com/apache/directory-scimple/commit/dc18360a12d0423d2765c60479da897d267848ca",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-scimple/blob/dc18360a12d0423d2765c60479da897d267848ca/scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/provider/ProviderRegistry.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-scimple/contents/scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/provider/ProviderRegistry.java?ref=dc18360a12d0423d2765c60479da897d267848ca",
                "deletions": 1,
                "filename": "scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/provider/ProviderRegistry.java",
                "patch": "@@ -150,7 +150,7 @@ private ResourceType generateResourceType(Class<? extends ScimResource> base, Pr\n \n         ScimExtensionType extensionType = se.getAnnotation(ScimExtensionType.class);\n \n-        if (extensionList == null) {\n+        if (extensionType == null) {\n           throw new InvalidProviderException(\"Missing annotation: ScimExtensionType must be at the top of scim extension classes\");\n         }\n ",
                "raw_url": "https://github.com/apache/directory-scimple/raw/dc18360a12d0423d2765c60479da897d267848ca/scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/provider/ProviderRegistry.java",
                "sha": "b29af9abff6d8173d0912d2732f1ab56f1657a5b",
                "status": "modified"
            }
        ],
        "message": "Fixing NPE on missing ScimExtensionType annotation",
        "parent": "https://github.com/apache/directory-scimple/commit/2c19114ef1c6c6e0f8be46482211820fa048b5ab",
        "repo": "directory-scimple",
        "unit_tests": [
            "ProviderRegistryTest.java"
        ]
    },
    "directory-scimple_dfe917f": {
        "bug_id": "directory-scimple_dfe917f",
        "commit": "https://github.com/apache/directory-scimple/commit/dfe917fe02324ad94f47cc43c28d1796f6148ba6",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/directory-scimple/blob/dfe917fe02324ad94f47cc43c28d1796f6148ba6/scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/rest/BaseResourceTypeResourceImpl.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/directory-scimple/contents/scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/rest/BaseResourceTypeResourceImpl.java?ref=dfe917fe02324ad94f47cc43c28d1796f6148ba6",
                "deletions": 5,
                "filename": "scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/rest/BaseResourceTypeResourceImpl.java",
                "patch": "@@ -8,6 +8,7 @@\n import java.util.Base64;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n \n import javax.inject.Inject;\n@@ -30,6 +31,7 @@\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector;\n import com.fasterxml.jackson.module.jaxb.JaxbAnnotationModule;\n+import com.google.common.base.Equivalence.Wrapper;\n \n import edu.psu.swe.scim.server.exception.AttributeDoesNotExistException;\n import edu.psu.swe.scim.server.exception.UnableToCreateResourceException;\n@@ -79,8 +81,8 @@ public Response getById(String id, AttributeReferenceListWrapper attributes, Att\n       return BaseResourceTypeResource.super.getById(id, attributes, excludedAttributes);\n     }\n \n-    Set<AttributeReference> attributeReferences = attributes.getAttributeReferences();\n-    Set<AttributeReference> excludedAttributeReferences = excludedAttributes.getAttributeReferences();\n+    Set<AttributeReference> attributeReferences = Optional.ofNullable(attributes).map(wrapper -> wrapper.getAttributeReferences()).orElse(Collections.emptySet());\n+    Set<AttributeReference> excludedAttributeReferences = Optional.ofNullable(excludedAttributes).map(wrapper -> wrapper.getAttributeReferences()).orElse(Collections.emptySet());\n     \n     if (!attributeReferences.isEmpty() && !excludedAttributeReferences.isEmpty()) {\n       return createAmbiguousAttributeParametersResponse();\n@@ -118,14 +120,13 @@ public Response getById(String id, AttributeReferenceListWrapper attributes, Att\n       return createAttriubteProcessingErrorResponse(e);\n     }\n     \n-    \n   }\n \n   @Override\n   public Response query(AttributeReferenceListWrapper attributes, AttributeReferenceListWrapper excludedAttributes, Filter filter, AttributeReference sortBy, SortOrder sortOrder, Integer startIndex, Integer count) {\n     SearchRequest searchRequest = new SearchRequest();\n-    searchRequest.setAttributes(attributes.getAttributeReferences());\n-    searchRequest.setExcludedAttributes(excludedAttributes.getAttributeReferences());\n+    searchRequest.setAttributes(Optional.ofNullable(attributes).map(wrapper -> wrapper.getAttributeReferences()).orElse(Collections.emptySet()));\n+    searchRequest.setExcludedAttributes(Optional.ofNullable(excludedAttributes).map(wrapper -> wrapper.getAttributeReferences()).orElse(Collections.emptySet()));\n     searchRequest.setFilter(filter);\n     searchRequest.setSortBy(sortBy);\n     searchRequest.setSortOrder(sortOrder);",
                "raw_url": "https://github.com/apache/directory-scimple/raw/dfe917fe02324ad94f47cc43c28d1796f6148ba6/scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/rest/BaseResourceTypeResourceImpl.java",
                "sha": "c1b61dd622b01a137aa3172dc6185210b7b0da96",
                "status": "modified"
            }
        ],
        "message": "Fixing NPE with attributes",
        "parent": "https://github.com/apache/directory-scimple/commit/59002728aa843690928cab2584fb97cc32ed816d",
        "repo": "directory-scimple",
        "unit_tests": [
            "BaseResourceTypeResourceImplTest.java"
        ]
    },
    "directory-scimple_f713676": {
        "bug_id": "directory-scimple_f713676",
        "commit": "https://github.com/apache/directory-scimple/commit/f713676bfb1abfc28e8e8e252b7821b243955a5f",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/directory-scimple/blob/f713676bfb1abfc28e8e8e252b7821b243955a5f/scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/rest/BaseResourceTypeResourceImpl.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/directory-scimple/contents/scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/rest/BaseResourceTypeResourceImpl.java?ref=f713676bfb1abfc28e8e8e252b7821b243955a5f",
                "deletions": 7,
                "filename": "scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/rest/BaseResourceTypeResourceImpl.java",
                "patch": "@@ -23,6 +23,9 @@\n import javax.ws.rs.core.Response.Status.Family;\n import javax.ws.rs.core.UriInfo;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import com.fasterxml.jackson.annotation.JsonInclude.Include;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n@@ -59,6 +62,8 @@\n @Slf4j\n public abstract class BaseResourceTypeResourceImpl<T extends ScimResource> implements BaseResourceTypeResource<T> {\n \n+  private static final Logger LOG = LoggerFactory.getLogger(BaseResourceTypeResourceImpl.class);\n+  \n   public abstract Provider<T> getProvider();\n \n   @Context\n@@ -215,18 +220,18 @@ public Response create(T resource, AttributeReferenceListWrapper attributes, Att\n       }\n     } catch (IllegalArgumentException | IllegalAccessException | AttributeDoesNotExistException | IOException e) {\n       if (etag == null) {\n-        return Response.status(Status.CREATED).location(buildLocationTag(resource)).build();\n+        return Response.status(Status.CREATED).location(buildLocationTag(created)).build();\n       } else {\n-        Response.status(Status.CREATED).location(buildLocationTag(resource)).tag(etag).build();\n+        Response.status(Status.CREATED).location(buildLocationTag(created)).tag(etag).build();\n       }\n     }\n \n     // TODO - Is this the right behavior?\n     if (etag == null) {\n-      return Response.status(Status.CREATED).location(buildLocationTag(resource)).entity(created).build();\n+      return Response.status(Status.CREATED).location(buildLocationTag(created)).entity(created).build();\n     }\n \n-    return Response.status(Status.CREATED).location(buildLocationTag(resource)).tag(etag).entity(created).build();\n+    return Response.status(Status.CREATED).location(buildLocationTag(created)).tag(etag).entity(created).build();\n   }\n \n   @Override\n@@ -368,10 +373,10 @@ public Response update(T resource, String id, AttributeReferenceListWrapper attr\n \n     // TODO - Is this correct or should we support roll back semantics\n     if (etag == null) {\n-      return Response.ok(updated).location(buildLocationTag(resource)).build();\n+      return Response.ok(updated).location(buildLocationTag(updated)).build();\n     }\n \n-    return Response.ok(updated).location(buildLocationTag(resource)).tag(etag).build();\n+    return Response.ok(updated).location(buildLocationTag(updated)).tag(etag).build();\n   }\n \n   @Override\n@@ -442,7 +447,12 @@ public static EntityTag hash(String input) throws NoSuchAlgorithmException, Unsu\n   }\n \n   private URI buildLocationTag(T resource) {\n-    return uriInfo.getAbsolutePathBuilder().path(resource.getId()).build();\n+    String id = resource.getId();\n+    if (id == null) {\n+      LOG.warn(\"Provider must supply an id for a resource\");\n+      id = \"unknown\";\n+    }\n+    return uriInfo.getAbsolutePathBuilder().path(id).build();\n   }\n \n   private Response createGenericExceptionResponse(Exception e1, Status status) {",
                "raw_url": "https://github.com/apache/directory-scimple/raw/f713676bfb1abfc28e8e8e252b7821b243955a5f/scim-server/scim-server-common/src/main/java/edu/psu/swe/scim/server/rest/BaseResourceTypeResourceImpl.java",
                "sha": "d360fb04cba1d50db069fe4219f87f9717d5be4e",
                "status": "modified"
            }
        ],
        "message": "Fixing NPE when Provider is generating an id\n\nSee Issue #20",
        "parent": "https://github.com/apache/directory-scimple/commit/6104bbb7420aa431b9c8d0e5260807f9ab9ae308",
        "repo": "directory-scimple",
        "unit_tests": [
            "BaseResourceTypeResourceImplTest.java"
        ]
    }
}