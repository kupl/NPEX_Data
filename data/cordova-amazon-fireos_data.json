[
    {
        "commit": "https://github.com/apache/cordova-amazon-fireos/commit/be04e232bd7c9319d37cd15a674712203df2861d",
        "file": [
            {
                "patch": "@@ -0,0 +1,4 @@\n+eclipse.preferences.version=1\n+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6\n+org.eclipse.jdt.core.compiler.compliance=1.6\n+org.eclipse.jdt.core.compiler.source=1.6",
                "additions": 4,
                "raw_url": "https://github.com/apache/cordova-amazon-fireos/raw/be04e232bd7c9319d37cd15a674712203df2861d/framework/.settings/org.eclipse.jdt.core.prefs",
                "status": "added",
                "changes": 4,
                "deletions": 0,
                "sha": "b080d2ddc88fb0b4d7c93cd4d361c775525b4dbb",
                "blob_url": "https://github.com/apache/cordova-amazon-fireos/blob/be04e232bd7c9319d37cd15a674712203df2861d/framework/.settings/org.eclipse.jdt.core.prefs",
                "filename": "framework/.settings/org.eclipse.jdt.core.prefs",
                "contents_url": "https://api.github.com/repos/apache/cordova-amazon-fireos/contents/framework/.settings/org.eclipse.jdt.core.prefs?ref=be04e232bd7c9319d37cd15a674712203df2861d"
            },
            {
                "patch": "@@ -83,7 +83,7 @@ public NativeToJsMessageQueue(CordovaWebView webView, CordovaInterface cordova)\n         this.cordova = cordova;\n         this.webView = webView;\n         registeredListeners = new BridgeMode[4];\n-        registeredListeners[0] = null;  // Polling. Requires no logic.\n+        registeredListeners[0] = new PollingBridgeMode();\n         registeredListeners[1] = new LoadUrlBridgeMode();\n         registeredListeners[2] = new OnlineEventsBridgeMode();\n         registeredListeners[3] = new PrivateApiBridgeMode();\n@@ -279,7 +279,13 @@ public boolean getPaused() {\n         abstract void onNativeToJsMessageAvailable();\n         void notifyOfFlush(boolean fromOnlineEvent) {}\n     }\n-    \n+\n+    /** Uses JS polls for messages on a timer.. */\n+    private class PollingBridgeMode extends BridgeMode {\n+        @Override void onNativeToJsMessageAvailable() {\n+        }\n+    }\n+\n     /** Uses webView.loadUrl(\"javascript:\") to execute messages. */\n     private class LoadUrlBridgeMode extends BridgeMode {\n         final Runnable runnable = new Runnable() {",
                "additions": 8,
                "raw_url": "https://github.com/apache/cordova-amazon-fireos/raw/be04e232bd7c9319d37cd15a674712203df2861d/framework/src/org/apache/cordova/NativeToJsMessageQueue.java",
                "status": "modified",
                "changes": 10,
                "deletions": 2,
                "sha": "babb871461b935237fef53aacb4ccb61c2f61cff",
                "blob_url": "https://github.com/apache/cordova-amazon-fireos/blob/be04e232bd7c9319d37cd15a674712203df2861d/framework/src/org/apache/cordova/NativeToJsMessageQueue.java",
                "filename": "framework/src/org/apache/cordova/NativeToJsMessageQueue.java",
                "contents_url": "https://api.github.com/repos/apache/cordova-amazon-fireos/contents/framework/src/org/apache/cordova/NativeToJsMessageQueue.java?ref=be04e232bd7c9319d37cd15a674712203df2861d"
            }
        ],
        "bug_id": "cordova-amazon-fireos_1",
        "parent": "https://github.com/apache/cordova-amazon-fireos/commit/23a64cc834e0557a3c34f7277f767cdc6bca2c5c",
        "message": "Fix NPE when POLLING bridge mode is used.",
        "repo": "cordova-amazon-fireos"
    },
    {
        "commit": "https://github.com/apache/cordova-amazon-fireos/commit/8733eff86b5a483dda3a8fd7042ef1905d0bfe39",
        "file": [
            {
                "patch": "@@ -335,7 +335,8 @@ private void setup() {\n         \n         // Jellybean rightfully tried to lock this down. Too bad they didn't give us a whitelist\n         // while we do this\n-        if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1)\n+        if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1\n+            || (getWebViewBackend(this.cordova.getFactory()) == WebViewBackend.CHROMIUM))\n             Level16Apis.enableUniversalAccess(settings);\n         \n         if (getWebViewBackend(this.cordova.getFactory()) == WebViewBackend.ANDROID) {\n@@ -537,49 +538,14 @@ public void loadUrlIntoView(final String url) {\n \n         this.url = url;\n         this.pluginManager.init();\n-\n-\n-        // Create a timeout timer for loadUrl\n-        final CordovaWebView me = this;\n-        final int currentLoadUrlTimeout = me.loadUrlTimeout;\n-        final int loadUrlTimeoutValue = Integer.parseInt(this.getProperty(\"LoadUrlTimeoutValue\", \"20000\"));\n-\n-        // Timeout error method\n-        final Runnable loadError = new Runnable() {\n-            public void run() {\n-                me.stopLoading();\n-                LOG.e(TAG, \"CordovaWebView: TIMEOUT ERROR!\");\n-                if (viewClient != null) {\n-                    viewClient.onReceivedError(me, -6, \"The connection to the server was unsuccessful.\", url);\n-                }\n-            }\n-        };\n-\n-        // Timeout timer method\n-        final Runnable timeoutCheck = new Runnable() {\n-            public void run() {\n-                try {\n-                    synchronized (this) {\n-                        wait(loadUrlTimeoutValue);\n-                    }\n-                } catch (InterruptedException e) {\n-                    e.printStackTrace();\n-                }\n-\n-                // If timeout, then stop loading and handle error\n-                if (me.loadUrlTimeout == currentLoadUrlTimeout) {\n-                    me.cordova.getActivity().runOnUiThread(loadError);\n-                }\n-            }\n-        };\n-\n-        // Load url\n+        \n+        // Got rid of the timers logic to check for errors/non-responding webpages.\n+        // Timers were creating threading issues and NPE in some cases where app needed to load more urls or navigate back and forth a lot.\n+        // PS. this change exists only on amazon-fireos platform.\n         this.cordova.getActivity().runOnUiThread(new Runnable() {\n-            public void run() {\n-                Thread thread = new Thread(timeoutCheck);\n-                thread.start();\n-                me.loadUrlNow(url);\n-            }\n+        \tpublic void run() {\n+        \t    CordovaWebView.this.loadUrlNow(url);\n+        \t}\n         });\n     }\n \n@@ -624,7 +590,6 @@ public void loadUrlIntoView(final String url, final int time) {\n         this.loadUrlIntoView(url);\n     }\n     \n-    \n     public void onScrollChanged(int l, int t, int oldl, int oldt)\n     {\n         super.onScrollChanged(l, t, oldl, oldt);\n@@ -945,7 +910,8 @@ public void handleResume(boolean keepRunning, boolean activityResultKeepRunning)\n     public void handleDestroy()\n     {\n         // Send destroy event to JavaScript\n-        this.loadUrl(\"javascript:try{cordova.require('cordova/channel').onDestroy.fire();}catch(e){console.log('exception firing destroy event from native');};\");\n+        // Since baseUrl is set in loadUrlIntoView, if user hit Back button before loadUrl was called, we'll get an NPE on baseUrl (CB-2458)\n+        this.loadUrl(\"javascript:try{cordova.require('cordova/channel').onDestroy.fire();}catch(e){};\");\n \n         // Load blank page so that JavaScript onunload is called\n         this.loadUrl(\"about:blank\");",
                "additions": 11,
                "raw_url": "https://github.com/apache/cordova-amazon-fireos/raw/8733eff86b5a483dda3a8fd7042ef1905d0bfe39/framework/src/org/apache/cordova/CordovaWebView.java",
                "status": "modified",
                "changes": 56,
                "deletions": 45,
                "sha": "b26d4b810de92e2de7cba33d4db5b7efc4a0494f",
                "blob_url": "https://github.com/apache/cordova-amazon-fireos/blob/8733eff86b5a483dda3a8fd7042ef1905d0bfe39/framework/src/org/apache/cordova/CordovaWebView.java",
                "filename": "framework/src/org/apache/cordova/CordovaWebView.java",
                "contents_url": "https://api.github.com/repos/apache/cordova-amazon-fireos/contents/framework/src/org/apache/cordova/CordovaWebView.java?ref=8733eff86b5a483dda3a8fd7042ef1905d0bfe39"
            },
            {
                "patch": "@@ -22,13 +22,11 @@ Licensed to the Apache Software Foundation (ASF) under one\n import org.apache.cordova.CordovaInterface;\n import org.apache.cordova.CordovaPlugin;\n \n-//import android.content.Context;\n-//import com.amazon.android.webkit.AmazonWebView;\n \n /**\n  * This class represents a service entry object.\n  */\n-public class PluginEntry {\n+public class PluginEntry implements Comparable<PluginEntry> {\n \n     /**\n      * The name of the service that this plugin implements\n@@ -52,17 +50,27 @@ Licensed to the Apache Software Foundation (ASF) under one\n      */\n     public boolean onload = false;\n \n+\t/**\n+\t * The numerical priority used to determine which plugin takes precendence\n+\t * in a conflict scenario with consumable webview callbacks. Note that this\n+\t * is a float value, therefore decimal and negative values are supported.\n+\t * The priority field represents order, and for this reason a lower value\n+\t * will take precedence over a higher value.\n+\t */\n+\tpublic float priority = 0;\n+\n     /**\n      * Constructor\n      *\n      * @param service               The name of the service\n      * @param pluginClass           The plugin class name\n      * @param onload                Create plugin object when HTML page is loaded\n      */\n-    public PluginEntry(String service, String pluginClass, boolean onload) {\n+    public PluginEntry(String service, String pluginClass, boolean onload, float priority) {\n         this.service = service;\n         this.pluginClass = pluginClass;\n         this.onload = onload;\n+        this.priority = priority;\n     }\n \n     /**\n@@ -76,6 +84,7 @@ public PluginEntry(String service, CordovaPlugin plugin) {\n         this.plugin = plugin;\n         this.pluginClass = plugin.getClass().getName();\n         this.onload = false;\n+        this.priority = 0;\n     }\n \n     /**\n@@ -129,4 +138,12 @@ private boolean isCordovaPlugin(Class c) {\n         }\n         return false;\n     }\n+\n+\t/**\n+\t * Make PluginEntry comparable to allow for sorting by priority.\n+\t */\n+\t@Override\n+\tpublic int compareTo(PluginEntry another) {\n+\t\treturn Float.compare(this.priority, another.priority);\n+\t}\n }",
                "additions": 21,
                "raw_url": "https://github.com/apache/cordova-amazon-fireos/raw/8733eff86b5a483dda3a8fd7042ef1905d0bfe39/framework/src/org/apache/cordova/PluginEntry.java",
                "status": "modified",
                "changes": 25,
                "deletions": 4,
                "sha": "b18fb0aa37f2d8e2332bf1521820df672a62a98b",
                "blob_url": "https://github.com/apache/cordova-amazon-fireos/blob/8733eff86b5a483dda3a8fd7042ef1905d0bfe39/framework/src/org/apache/cordova/PluginEntry.java",
                "filename": "framework/src/org/apache/cordova/PluginEntry.java",
                "contents_url": "https://api.github.com/repos/apache/cordova-amazon-fireos/contents/framework/src/org/apache/cordova/PluginEntry.java?ref=8733eff86b5a483dda3a8fd7042ef1905d0bfe39"
            },
            {
                "patch": "@@ -20,24 +20,18 @@ Licensed to the Apache Software Foundation (ASF) under one\n \n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.Iterator;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.concurrent.atomic.AtomicInteger;\n \n-import org.apache.cordova.CordovaArgs;\n-import org.apache.cordova.CordovaWebView;\n-import org.apache.cordova.CallbackContext;\n-import org.apache.cordova.CordovaInterface;\n-import org.apache.cordova.CordovaPlugin;\n-import org.apache.cordova.PluginEntry;\n-import org.apache.cordova.PluginResult;\n import org.json.JSONException;\n import org.xmlpull.v1.XmlPullParserException;\n \n import android.content.Intent;\n import android.content.res.XmlResourceParser;\n-\n import android.net.Uri;\n import android.os.Debug;\n import android.util.Log;\n@@ -52,8 +46,8 @@ Licensed to the Apache Software Foundation (ASF) under one\n     private static String TAG = \"PluginManager\";\n     private static final int SLOW_EXEC_WARNING_THRESHOLD = Debug.isDebuggerConnected() ? 60 : 16;\n \n-    // List of service entries\n-    private final HashMap<String, PluginEntry> entries = new HashMap<String, PluginEntry>();\n+    // List of service entries, sorted by priority\n+    private final HashMap<String, PluginEntry> entries = new LinkedHashMap<String, PluginEntry>();\n \n     private final CordovaInterface ctx;\n     private final CordovaWebView app;\n@@ -123,10 +117,13 @@ public void loadPlugins() {\n             }\n         }\n         XmlResourceParser xml = this.ctx.getActivity().getResources().getXml(id);\n+        ArrayList<PluginEntry> tmpEntries = new ArrayList<PluginEntry>();\n         int eventType = -1;\n         String service = \"\", pluginClass = \"\", paramType = \"\";\n+        float priority = 0;\n         boolean onload = false;\n         boolean insideFeature = false;\n+\n         while (eventType != XmlResourceParser.END_DOCUMENT) {\n             if (eventType == XmlResourceParser.START_TAG) {\n                 String strNode = xml.getName();\n@@ -152,19 +149,27 @@ else if (paramType.equals(\"package\") || paramType.equals(\"android-package\"))\n                         pluginClass = xml.getAttributeValue(null,\"value\");\n                     else if (paramType.equals(\"onload\"))\n                         onload = \"true\".equals(xml.getAttributeValue(null, \"value\"));\n+                    else if (paramType.equals(\"priority\")) {\n+                        try {\n+                            priority = Float.parseFloat(xml.getAttributeValue(null,\"value\"));\n+                        } catch (NumberFormatException nfe) {\n+                            priority = 0;\n+                        }\n+                    }\n                 }\n             }\n             else if (eventType == XmlResourceParser.END_TAG)\n             {\n                 String strNode = xml.getName();\n                 if (strNode.equals(\"feature\") || strNode.equals(\"plugin\"))\n                 {\n-                    PluginEntry entry = new PluginEntry(service, pluginClass, onload);\n-                    this.addService(entry);\n+                    PluginEntry entry = new PluginEntry(service, pluginClass, onload, priority);\n+                    tmpEntries.add(entry);\n \n                     //Empty the strings to prevent plugin loading bugs\n                     service = \"\";\n                     pluginClass = \"\";\n+                    priority = 0;\n                     insideFeature = false;\n                 }\n             }\n@@ -176,6 +181,9 @@ else if (eventType == XmlResourceParser.END_TAG)\n                 e.printStackTrace();\n             }\n         }\n+\n+        // sort and add list of items to final entries collection\n+        this.addServices(tmpEntries);\n     }\n \n     /**\n@@ -289,19 +297,56 @@ public CordovaPlugin getPlugin(String service) {\n      * @param className         The plugin class name\n      */\n     public void addService(String service, String className) {\n-        PluginEntry entry = new PluginEntry(service, className, false);\n+        PluginEntry entry = new PluginEntry(service, className, false, 0);\n         this.addService(entry);\n     }\n \n-    /**\n-     * Add a plugin class that implements a service to the service entry table.\n-     * This does not create the plugin object instance.\n-     *\n-     * @param entry             The plugin entry\n-     */\n-    public void addService(PluginEntry entry) {\n-        this.entries.put(entry.service, entry);\n-    }\n+\t/**\n+\t * Add a plugin class that implements a service to the service entry table.\n+\t * This does not create the plugin object instance.\n+\t *\n+\t * @param entry\n+\t *            The plugin entry\n+\t */\n+\tpublic void addService(PluginEntry entry) {\n+\t\t/*\n+\t\t * When adding a new plugin we must reconstruct and sort the list of\n+\t\t * PluginEntries (which reside in a LinkedHashMap) to maintain its\n+\t\t * order. Although this may not be entirely desirable, it prevents us\n+\t\t * from having to maintain a separate sorted data structure while still\n+\t\t * keeping the benefits of storing the objects in a HashMap.\n+\t\t * Furthermore, this function is currently only called once during the\n+\t\t * initialization; and so by default is a total of only two overall\n+\t\t * sorts (one for initial config.xml parse, and another for the\n+\t\t * PluginManager service).\n+\t\t *\n+\t\t * Note: this method is not thread-safe, and is planned to be improved\n+\t\t * in future commits (along with some other thread-unsafe areas)\n+\t\t */\n+\n+\t\t// create list from existing set of plugin entries, then add new item to list\n+\t\tList<PluginEntry> pluginEntries = new ArrayList<PluginEntry>(entries.values());\n+\t\tpluginEntries.add(entry);\n+\n+\t\t// clear list and recreate final set entries in priority order\n+\t\tentries.clear();\n+\t\tthis.addServices(pluginEntries);\n+\t}\n+\n+\t/**\n+\t * Takes a list of plugin entries which are first sorted by priority and\n+\t * then individually added to the final ordered hashmap. This does not\n+\t * create the plugin object instance.\n+\t *\n+\t * @param services\n+\t *            the list of services to sort and add to final entry hash\n+\t */\n+\tprivate void addServices(List<PluginEntry> services) {\n+\t\tCollections.sort(services);\n+\t\tfor (PluginEntry pluginEntry : services) {\n+\t\t\tthis.entries.put(pluginEntry.service, pluginEntry);\n+\t\t}\n+\t}\n \n     /**\n      * Called when the system is about to start resuming a previous activity.",
                "additions": 67,
                "raw_url": "https://github.com/apache/cordova-amazon-fireos/raw/8733eff86b5a483dda3a8fd7042ef1905d0bfe39/framework/src/org/apache/cordova/PluginManager.java",
                "status": "modified",
                "changes": 89,
                "deletions": 22,
                "sha": "0c525428fb4fa9c385be5e07a2920f22edb201d8",
                "blob_url": "https://github.com/apache/cordova-amazon-fireos/blob/8733eff86b5a483dda3a8fd7042ef1905d0bfe39/framework/src/org/apache/cordova/PluginManager.java",
                "filename": "framework/src/org/apache/cordova/PluginManager.java",
                "contents_url": "https://api.github.com/repos/apache/cordova-amazon-fireos/contents/framework/src/org/apache/cordova/PluginManager.java?ref=8733eff86b5a483dda3a8fd7042ef1905d0bfe39"
            },
            {
                "patch": "@@ -255,16 +255,6 @@\n                 <action android:name=\"android.intent.action.MAIN\" />\n                 <category android:name=\"android.intent.category.SAMPLE_CODE\" />\n             </intent-filter>\n-        </activity>\n-        <activity\n-            android:windowSoftInputMode=\"adjustPan\"\n-            android:label=\"@string/app_name\" \n-            android:configChanges=\"orientation|keyboardHidden\"\n-            android:name=\"org.apache.cordova.test.loadurl\" >\n-            <intent-filter>\n-                <action android:name=\"android.intent.action.MAIN\" />\n-                <category android:name=\"android.intent.category.SAMPLE_CODE\" />\n-            </intent-filter>\n         </activity>\n                 <!-- This is required for the Tests to work with AmazonWebView -->\n         <amazon:enable-feature ",
                "additions": 0,
                "raw_url": "https://github.com/apache/cordova-amazon-fireos/raw/8733eff86b5a483dda3a8fd7042ef1905d0bfe39/test/AndroidManifest.xml",
                "status": "modified",
                "changes": 10,
                "deletions": 10,
                "sha": "8815624c082df6c0921cae5f9989693efc55dc74",
                "blob_url": "https://github.com/apache/cordova-amazon-fireos/blob/8733eff86b5a483dda3a8fd7042ef1905d0bfe39/test/AndroidManifest.xml",
                "filename": "test/AndroidManifest.xml",
                "contents_url": "https://api.github.com/repos/apache/cordova-amazon-fireos/contents/test/AndroidManifest.xml?ref=8733eff86b5a483dda3a8fd7042ef1905d0bfe39"
            },
            {
                "patch": "@@ -6,11 +6,7 @@\n     </description>\n     <author email=\"dev@cordova.apache.org\" href=\"http://cordova.io\">\n     </author>\n-    \n-    <access origin=\"*.apache.org\"/>\n-    <access origin=\"http://www.flickr.com/explore\" />\n-\n-    <!-- <content src=\"http://mysite.com/myapp.html\" /> for external pages -->\n+    <access origin=\"*.apache.org\" />\n     <content src=\"index.html\" />\n     <log level=\"DEBUG\" />\n     <preference name=\"useBrowserHistory\" value=\"true\" />",
                "additions": 1,
                "raw_url": "https://github.com/apache/cordova-amazon-fireos/raw/8733eff86b5a483dda3a8fd7042ef1905d0bfe39/test/res/xml/config.xml",
                "status": "modified",
                "changes": 6,
                "deletions": 5,
                "sha": "1986cff0f2a30c296f04c85114796c4a04552850",
                "blob_url": "https://github.com/apache/cordova-amazon-fireos/blob/8733eff86b5a483dda3a8fd7042ef1905d0bfe39/test/res/xml/config.xml",
                "filename": "test/res/xml/config.xml",
                "contents_url": "https://api.github.com/repos/apache/cordova-amazon-fireos/contents/test/res/xml/config.xml?ref=8733eff86b5a483dda3a8fd7042ef1905d0bfe39"
            },
            {
                "patch": "@@ -1,99 +0,0 @@\n-package org.apache.cordova.test.junit;\n-\n-import org.apache.cordova.CordovaWebView;\n-import org.apache.cordova.test.AmazonWebViewOnUiThread;\n-import org.apache.cordova.test.loadurl;\n-\n-import android.test.ActivityInstrumentationTestCase2;\n-import android.util.Log;\n-import android.widget.FrameLayout;\n-import android.widget.LinearLayout;\n-\n-public class CordovaTimeoutTest extends\n-\t\tActivityInstrumentationTestCase2<loadurl> {\n-\n-\tprivate int SLEEPTIME = 10000;\n-\tprivate static final String ERROR_URL = \"file:///android_asset/www/htmlnotfound/error.html\";\n-\tprivate static final String TEST_URL = \"http://www.flickr.com/explore\";\n-\n-\tloadurl testActivity;\n-\tprivate FrameLayout containerView;\n-\tprivate LinearLayout innerContainer;\n-\tprivate CordovaWebView testView;\n-\n-\tprivate AmazonWebViewOnUiThread mUiThread;\n-\n-\tpublic CordovaTimeoutTest() {\n-\t\tsuper(\"org.apache.cordova.test.actions\", loadurl.class);\n-\t}\n-\n-\tprotected void setUp() throws Exception {\n-\t\tsuper.setUp();\n-\t\ttestActivity = this.getActivity();\n-\t\tcontainerView = (FrameLayout) testActivity\n-\t\t\t\t.findViewById(android.R.id.content);\n-\t\tinnerContainer = (LinearLayout) containerView.getChildAt(0);\n-\t\ttestView = (CordovaWebView) innerContainer.getChildAt(0);\n-\t\tmUiThread = new AmazonWebViewOnUiThread(this, testView);\n-\t}\n-\n-\tpublic void testPreconditions() {\n-\t\tassertNotNull(innerContainer);\n-\t\tassertNotNull(testView);\n-\t}\n-\n-\t/**\n-\t * Verify that timeout error occurs and a error page is loaded when set.\n-\t */\n-\tpublic void testTimeOutErrorOccurs() {\n-\t\t// Set the timeout value small so that error occurs\n-\t\tthis.getActivity().setStringProperty(\"loadUrlTimeoutValue\", \"500\");\n-\t\tthis.getActivity().setStringProperty(\"errorUrl\",\n-\t\t\t\t\"file:///android_asset/www/htmlnotfound/error.html\");\n-\t\tmUiThread.loadUrl(TEST_URL);\n-\t\tsleep();\n-\t\tString url = mUiThread.getUrl();\n-\t\tassertNotNull(url);\n-\t\tassertTrue(url.equals(ERROR_URL));\n-\t}\n-\n-\t/**\n-\t * Verify that timeout does not occur for default timeout\n-\t */\n-\tpublic void testTimeOutErrorDoesNotOccur() {\n-\t\t// With default timeout= 20000ms verify error does not occur and\n-\t\t// page loads\n-\t\tthis.getActivity().setStringProperty(\"errorUrl\",\n-\t\t\t\t\"file:///android_asset/www/htmlnotfound/error.html\");\n-\t\tmUiThread.loadUrl(TEST_URL);\n-\t\tsleep();\n-\t\tString url = mUiThread.getUrl();\n-\t\tassertNotNull(url);\n-\t\tassertTrue(url.equals(TEST_URL));\n-\n-\t}\n-\n-\t/**\n-\t * Verify if a error splash screen is showing when the error page is not set\n-\t */\n-\tpublic void testErrorDialogShows() {\n-\t\tthis.getActivity().setStringProperty(\"loadUrlTimeoutValue\", \"500\");\n-\t\tmUiThread.loadUrl(TEST_URL);\n-\t\tsleep();\n-\t\tString url = mUiThread.getUrl();\n-\t\tassertNotNull(url);\n-\t\tassertFalse(this.getActivity().hasWindowFocus());\n-\t}\n-\n-\t/**\n-\t * Sleep to make sure URL loads completely\n-\t */\n-\tprivate void sleep() {\n-\t\ttry {\n-\t\t\tThread.sleep(SLEEPTIME);\n-\t\t} catch (InterruptedException e) {\n-\t\t\tfail(\"Unexpected Timeout\");\n-\t\t}\n-\t}\n-\n-}",
                "additions": 0,
                "raw_url": "https://github.com/apache/cordova-amazon-fireos/raw/3c8e47882c1aa0050eab6829d2e1f06a194cf5d6/test/src/org/apache/cordova/test/junit/CordovaTimeoutTest.java",
                "status": "removed",
                "changes": 99,
                "deletions": 99,
                "sha": "6978dfc5e58e80e6a0a6509b5422560187e42cf1",
                "blob_url": "https://github.com/apache/cordova-amazon-fireos/blob/3c8e47882c1aa0050eab6829d2e1f06a194cf5d6/test/src/org/apache/cordova/test/junit/CordovaTimeoutTest.java",
                "filename": "test/src/org/apache/cordova/test/junit/CordovaTimeoutTest.java",
                "contents_url": "https://api.github.com/repos/apache/cordova-amazon-fireos/contents/test/src/org/apache/cordova/test/junit/CordovaTimeoutTest.java?ref=3c8e47882c1aa0050eab6829d2e1f06a194cf5d6"
            },
            {
                "patch": "@@ -1,13 +0,0 @@\n-package org.apache.cordova.test;\n-\n-import android.os.Bundle;\n-import org.apache.cordova.*;\n-\n-public class loadurl extends CordovaActivity {\n-\t@Override\n-\tpublic void onCreate(Bundle savedInstanceState) {\n-\t\tsuper.onCreate(savedInstanceState);\n-\t\tsuper.loadUrl(Config.getStartUrl());\n-\t}\n-\n-}",
                "additions": 0,
                "raw_url": "https://github.com/apache/cordova-amazon-fireos/raw/3c8e47882c1aa0050eab6829d2e1f06a194cf5d6/test/src/org/apache/cordova/test/loadurl.java",
                "status": "removed",
                "changes": 13,
                "deletions": 13,
                "sha": "deddc37699292c5ee923a1c4c27837a05d8b7791",
                "blob_url": "https://github.com/apache/cordova-amazon-fireos/blob/3c8e47882c1aa0050eab6829d2e1f06a194cf5d6/test/src/org/apache/cordova/test/loadurl.java",
                "filename": "test/src/org/apache/cordova/test/loadurl.java",
                "contents_url": "https://api.github.com/repos/apache/cordova-amazon-fireos/contents/test/src/org/apache/cordova/test/loadurl.java?ref=3c8e47882c1aa0050eab6829d2e1f06a194cf5d6"
            }
        ],
        "bug_id": "cordova-amazon-fireos_2",
        "parent": "https://github.com/apache/cordova-amazon-fireos/commit/3c8e47882c1aa0050eab6829d2e1f06a194cf5d6",
        "message": "1. Removed timers logic while loading Urls. Timers were creating threads to check for errors.\nThat was causing crashes while navigating back and forth.\nAlso, fixed handleDestroy() method to fix NPE while hitting back button.\n2.Revert \"Add Timeout Tests\"\n3.Implementation of Cordova delegate priority system\n4.Fix for fileAccess on gen5 devices\n5.Fix for potential AWV call outside UIthread",
        "repo": "cordova-amazon-fireos"
    }
]