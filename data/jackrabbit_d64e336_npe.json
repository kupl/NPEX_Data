[
    {
        "repo": "jackrabbit",
        "commit": "https://github.com/apache/jackrabbit/commit/d64e3367c4bbb01e893b172bd735c1459d4c5f08",
        "bug_id": "jackrabbit_d64e336",
        "message": "JCR-3702 : NPE if user w/o read permission on admin user node removes any node\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1546953 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit/commit/e134f4233aba42748cd6b35f56eadcf9cc6c4eb5",
        "patched_files": [
            "BatchedItemOperations.java",
            "ItemValidator.java",
            "UserManagerImpl.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/d64e3367c4bbb01e893b172bd735c1459d4c5f08/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/BatchedItemOperations.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/BatchedItemOperations.java?ref=d64e3367c4bbb01e893b172bd735c1459d4c5f08",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/BatchedItemOperations.java",
                "deletions": 5,
                "sha": "ff32888e91aa4922f35fc8c25a07d453b1a1d4ef",
                "blob_url": "https://github.com/apache/jackrabbit/blob/d64e3367c4bbb01e893b172bd735c1459d4c5f08/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/BatchedItemOperations.java",
                "patch": "@@ -43,7 +43,6 @@\n import org.apache.jackrabbit.core.retention.RetentionRegistry;\n import org.apache.jackrabbit.core.security.AccessManager;\n import org.apache.jackrabbit.core.security.authorization.Permission;\n-import org.apache.jackrabbit.core.security.user.UserManagerImpl;\n import org.apache.jackrabbit.core.session.SessionContext;\n import org.apache.jackrabbit.core.state.ChildNodeEntry;\n import org.apache.jackrabbit.core.state.ItemState;\n@@ -934,10 +933,6 @@ public void checkRemoveNode(NodeState targetState, NodeId parentId,\n                 throw new RepositoryException(\"Unable to perform removal. Node is affected by a retention.\");\n             }\n         }\n-\n-        if (UserManagerImpl.includesAdmin(context.getSessionImpl().getItemManager().getNode(targetPath))) {\n-            throw new RepositoryException(\"Attempt to remove/move the admin user.\");\n-        }\n     }\n \n     /**",
                "changes": 5
            },
            {
                "status": "modified",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/d64e3367c4bbb01e893b172bd735c1459d4c5f08/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemValidator.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemValidator.java?ref=d64e3367c4bbb01e893b172bd735c1459d4c5f08",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemValidator.java",
                "deletions": 5,
                "sha": "eb08c56812c9680ae9aab060fcb9095297c3797f",
                "blob_url": "https://github.com/apache/jackrabbit/blob/d64e3367c4bbb01e893b172bd735c1459d4c5f08/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemValidator.java",
                "patch": "@@ -33,7 +33,6 @@\n import org.apache.jackrabbit.core.nodetype.NodeTypeConflictException;\n import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry;\n import org.apache.jackrabbit.core.security.authorization.Permission;\n-import org.apache.jackrabbit.core.security.user.UserManagerImpl;\n import org.apache.jackrabbit.core.session.SessionContext;\n import org.apache.jackrabbit.core.session.SessionOperation;\n import org.apache.jackrabbit.core.state.NodeState;\n@@ -303,10 +302,6 @@ private void checkCondition(ItemImpl item, int options, int permissions, boolean\n                 throw new RepositoryException(\"Unable to perform operation. Node is affected by a retention.\");\n             }\n         }\n-\n-        if (isRemoval && item.isNode() && UserManagerImpl.includesAdmin((NodeImpl) item)) {\n-            throw new RepositoryException(\"Attempt to remove/move the admin user.\");\n-        }\n     }\n \n     public synchronized boolean canModify(",
                "changes": 5
            },
            {
                "status": "modified",
                "additions": 0,
                "raw_url": "https://github.com/apache/jackrabbit/raw/d64e3367c4bbb01e893b172bd735c1459d4c5f08/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/UserManagerImpl.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/UserManagerImpl.java?ref=d64e3367c4bbb01e893b172bd735c1459d4c5f08",
                "filename": "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/UserManagerImpl.java",
                "deletions": 15,
                "sha": "dcdc91d5b9d1142c657dfa463d9e6355a472312d",
                "blob_url": "https://github.com/apache/jackrabbit/blob/d64e3367c4bbb01e893b172bd735c1459d4c5f08/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/UserManagerImpl.java",
                "patch": "@@ -16,7 +16,6 @@\n  */\n package org.apache.jackrabbit.core.security.user;\n \n-import org.apache.jackrabbit.api.JackrabbitRepository;\n import org.apache.jackrabbit.api.security.principal.ItemBasedPrincipal;\n import org.apache.jackrabbit.api.security.user.Authorizable;\n import org.apache.jackrabbit.api.security.user.AuthorizableExistsException;\n@@ -1154,20 +1153,6 @@ public void loggedOut(SessionImpl session) {\n         }\n     }\n \n-    //--------------------------------------------------------------------------\n-    public static boolean includesAdmin(NodeImpl node) throws RepositoryException {\n-        SessionImpl s = (SessionImpl) node.getSession();\n-        if (s.getRepository().getDescriptorValue(JackrabbitRepository.OPTION_USER_MANAGEMENT_SUPPORTED).getBoolean()) {\n-            UserManager uMgr = s.getUserManager();\n-            if (uMgr instanceof UserManagerImpl) {\n-                UserManagerImpl uMgrImpl = (UserManagerImpl) uMgr;\n-                AuthorizableImpl admin = (AuthorizableImpl) uMgrImpl.getAuthorizable(uMgrImpl.adminId);\n-                return Text.isDescendantOrEqual(node.getPath(), admin.getNode().getPath());\n-            }\n-        }\n-        return false;\n-    }\n-\n     //------------------------------------------------------< inner classes >---\n     /**\n      * Inner class",
                "changes": 15
            },
            {
                "status": "modified",
                "additions": 149,
                "raw_url": "https://github.com/apache/jackrabbit/raw/d64e3367c4bbb01e893b172bd735c1459d4c5f08/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/AdministratorTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit/contents/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/AdministratorTest.java?ref=d64e3367c4bbb01e893b172bd735c1459d4c5f08",
                "filename": "jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/AdministratorTest.java",
                "deletions": 64,
                "sha": "b26ac51731a8c899504728007d49b76051e5ec0f",
                "blob_url": "https://github.com/apache/jackrabbit/blob/d64e3367c4bbb01e893b172bd735c1459d4c5f08/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/AdministratorTest.java",
                "patch": "@@ -16,13 +16,20 @@\n  */\n package org.apache.jackrabbit.core.security.user;\n \n+import java.util.Properties;\n+import javax.jcr.Node;\n import javax.jcr.RepositoryException;\n import javax.jcr.Session;\n \n import org.apache.jackrabbit.api.security.user.AbstractUserTest;\n import org.apache.jackrabbit.api.security.user.Authorizable;\n+import org.apache.jackrabbit.api.security.user.User;\n+import org.apache.jackrabbit.api.security.user.UserManager;\n import org.apache.jackrabbit.core.NodeImpl;\n+import org.apache.jackrabbit.core.SessionImpl;\n+import org.apache.jackrabbit.core.id.NodeId;\n import org.apache.jackrabbit.core.security.principal.AdminPrincipal;\n+import org.apache.jackrabbit.spi.commons.conversion.NameResolver;\n import org.apache.jackrabbit.test.NotExecutableException;\n \n /**\n@@ -65,119 +72,197 @@ public void testRemoveSelf() throws RepositoryException, NotExecutableException\n         }\n     }\n \n+    /**\n+     * Test if the administrator is recreated upon login if the corresponding\n+     * node gets removed.\n+     *\n+     * @throws RepositoryException\n+     * @throws NotExecutableException\n+     */\n     public void testRemoveAdminNode() throws RepositoryException, NotExecutableException {\n         Authorizable admin = userMgr.getAuthorizable(adminId);\n \n         if (admin == null || !(admin instanceof AuthorizableImpl)) {\n             throw new NotExecutableException();\n         }\n \n-        Session s = null;\n+        // access the node corresponding to the admin user and remove it\n+        NodeImpl adminNode = ((AuthorizableImpl) admin).getNode();\n+        Session s = adminNode.getSession();\n+        adminNode.remove();\n+        // use session obtained from the node as usermgr may point to a dedicated\n+        // system workspace different from the superusers workspace.\n+        s.save();\n+\n+        // after removing the node the admin user doesn't exist any more\n+        assertNull(userMgr.getAuthorizable(adminId));\n+\n+        // login must succeed as system user mgr recreates the admin user\n+        Session s2 = getHelper().getSuperuserSession();\n         try {\n-            NodeImpl adminNode = ((AuthorizableImpl) admin).getNode();\n-            s = adminNode.getSession();\n-            adminNode.remove();\n-            // use session obtained from the node as usermgr may point to a dedicated\n-            // system workspace different from the superusers workspace.\n-            s.save();\n-            fail();\n-        } catch (RepositoryException e) {\n-            // success\n+            admin = userMgr.getAuthorizable(adminId);\n+            assertNotNull(admin);\n+            assertNotNull(getUserManager(s2).getAuthorizable(adminId));\n         } finally {\n-            if (s != null) {\n-                s.refresh(false);\n-            }\n+            s2.logout();\n         }\n     }\n \n-    public void testSessionRemoveItem()  throws RepositoryException, NotExecutableException {\n+    /**\n+     * Test for collisions that would prevent from recreate the admin user.\n+     * - an intermediate rep:AuthorizableFolder node with the same name\n+     */\n+    public void testAdminNodeCollidingWithAuthorizableFolder() throws RepositoryException, NotExecutableException {\n         Authorizable admin = userMgr.getAuthorizable(adminId);\n \n         if (admin == null || !(admin instanceof AuthorizableImpl)) {\n             throw new NotExecutableException();\n         }\n \n-        Session s = null;\n+        // access the node corresponding to the admin user and remove it\n+        NodeImpl adminNode = ((AuthorizableImpl) admin).getNode();\n+        String adminPath = adminNode.getPath();\n+        String adminNodeName = adminNode.getName();\n+        Node parentNode = adminNode.getParent();\n+\n+        Session s = adminNode.getSession();\n+        adminNode.remove();\n+        // use session obtained from the node as usermgr may point to a dedicated\n+        // system workspace different from the superusers workspace.\n+        s.save();\n+\n+        Session s2 = null;\n+        String collidingPath = null;\n         try {\n-            NodeImpl parent = (NodeImpl) ((AuthorizableImpl) admin).getNode().getParent();\n-            s = parent.getSession();\n-            s.removeItem(parent.getPath());\n+            // now create a colliding node:\n+            Node n = parentNode.addNode(adminNodeName, \"rep:AuthorizableFolder\");\n+            collidingPath = n.getPath();\n             s.save();\n-            fail();\n-        } catch (RepositoryException e) {\n-            // success\n+\n+            // force recreation of admin user.\n+            s2 = getHelper().getSuperuserSession();\n+\n+            admin = userMgr.getAuthorizable(adminId);\n+            assertNotNull(admin);\n+            assertEquals(adminNodeName, ((AuthorizableImpl) admin).getNode().getName());\n+            assertFalse(adminPath.equals(((AuthorizableImpl) admin).getNode().getPath()));\n+\n         } finally {\n-            if (s != null) {\n-                s.refresh(false);\n+            if (s2 != null) {\n+                s2.logout();\n+            }\n+            // remove the extra folder and the admin user (created underneath) again.\n+            if (collidingPath != null) {\n+                s.getNode(collidingPath).remove();\n+                s.save();\n             }\n         }\n     }\n \n-    public void testSessionMoveAdminNode()  throws RepositoryException, NotExecutableException {\n+    /**\n+     * Test for collisions that would prevent from recreate the admin user.\n+     * - a colliding node somewhere else with the same jcr:uuid.\n+     *\n+     * Test if creation of the administrator user forces the removal of some\n+     * other node in the repository that by change happens to have the same\n+     * jcr:uuid and thus inhibits the creation of the admininstrator user.\n+     */\n+    public void testAdminNodeCollidingWithRandomNode() throws RepositoryException, NotExecutableException {\n         Authorizable admin = userMgr.getAuthorizable(adminId);\n \n         if (admin == null || !(admin instanceof AuthorizableImpl)) {\n             throw new NotExecutableException();\n         }\n \n-        Session s = null;\n+        // access the node corresponding to the admin user and remove it\n+        NodeImpl adminNode = ((AuthorizableImpl) admin).getNode();\n+        NodeId nid = adminNode.getNodeId();\n+\n+        Session s = adminNode.getSession();\n+        adminNode.remove();\n+        // use session obtained from the node as usermgr may point to a dedicated\n+        // system workspace different from the superusers workspace.\n+        s.save();\n+\n+        Session s2 = null;\n+        String collidingPath = null;\n         try {\n-            NodeImpl adminNode = ((AuthorizableImpl) admin).getNode();\n-            s = adminNode.getSession();\n-            s.move(adminNode.getPath(), \"/somewhereelse\");\n-            // use session obtained from the node as usermgr may point to a dedicated\n-            // system workspace different from the superusers workspace.\n+            // create a colliding node outside of the user tree\n+            NameResolver nr = (SessionImpl) s;\n+            // NOTE: testRootNode will not be present if users are stored in a distinct wsp.\n+            //       therefore use root node as start...\n+            NodeImpl tr = (NodeImpl) s.getRootNode();\n+            Node n = tr.addNode(nr.getQName(\"tmpNode\"), nr.getQName(testNodeType), nid);\n+            collidingPath = n.getPath();\n             s.save();\n-            fail();\n-        } catch (RepositoryException e) {\n-            // success\n-        }  finally {\n-            if (s != null) {\n-                s.refresh(false);\n-            }\n-        }\n-    }\n \n-    public void testSessionMoveParentNode()  throws RepositoryException, NotExecutableException {\n-        Authorizable admin = userMgr.getAuthorizable(adminId);\n+            // force recreation of admin user.\n+            s2 = getHelper().getSuperuserSession();\n \n-        if (admin == null || !(admin instanceof AuthorizableImpl)) {\n-            throw new NotExecutableException();\n-        }\n+            admin = userMgr.getAuthorizable(adminId);\n+            assertNotNull(admin);\n+            // the colliding node must have been removed.\n+            assertFalse(s2.nodeExists(collidingPath));\n \n-        Session s = null;\n-        try {\n-            NodeImpl parent = (NodeImpl) ((AuthorizableImpl) admin).getNode().getParent();\n-            s = parent.getSession();\n-            s.move(parent.getPath(), \"/somewhereelse\");\n-            // use session obtained from the node as usermgr may point to a dedicated\n-            // system workspace different from the superusers workspace.\n-            s.save();\n-            fail();\n-        } catch (RepositoryException e) {\n-            // success\n         } finally {\n-            if (s != null) {\n-                s.refresh(false);\n+            if (s2 != null) {\n+                s2.logout();\n+            }\n+            if (collidingPath != null && s.nodeExists(collidingPath)) {\n+                s.getNode(collidingPath).remove();\n+                s.save();\n             }\n         }\n     }\n \n-    public void testWorkspaceMoveAdminNode()  throws RepositoryException, NotExecutableException {\n+    /**\n+     * Reconfiguration of the user-root-path will result in node collision\n+     * upon initialization of the built-in repository users. Test if the\n+     * UserManagerImpl in this case removes the colliding admin-user node.\n+     */\n+    public void testChangeUserRootPath() throws RepositoryException, NotExecutableException {\n         Authorizable admin = userMgr.getAuthorizable(adminId);\n \n         if (admin == null || !(admin instanceof AuthorizableImpl)) {\n             throw new NotExecutableException();\n         }\n \n         // access the node corresponding to the admin user and remove it\n+        NodeImpl adminNode = ((AuthorizableImpl) admin).getNode();\n+\n+        Session s = adminNode.getSession();\n+        adminNode.remove();\n+        // use session obtained from the node as usermgr may point to a dedicated\n+        // system workspace different from the superusers workspace.\n+        s.save();\n+\n+        Session s2 = null;\n+        String collidingPath = null;\n         try {\n-            NodeImpl adminNode = ((AuthorizableImpl) admin).getNode();\n-            Session s = adminNode.getSession();\n-            s.getWorkspace().move(adminNode.getPath(), \"/somewhereelse\");\n-            fail();\n-        } catch (RepositoryException e) {\n-            // success\n+            // create a colliding user node outside of the user tree\n+            Properties props = new Properties();\n+            props.setProperty(\"usersPath\", \"/testPath\");\n+            UserManager um = new UserManagerImpl((SessionImpl) s, adminId, props);\n+            User collidingUser = um.createUser(adminId, adminId);\n+            collidingPath = ((AuthorizableImpl) collidingUser).getNode().getPath();\n+            s.save();\n+\n+            // force recreation of admin user.\n+            s2 = getHelper().getSuperuserSession();\n+\n+            admin = userMgr.getAuthorizable(adminId);\n+            assertNotNull(admin);\n+            // the colliding node must have been removed.\n+            assertFalse(s2.nodeExists(collidingPath));\n+\n+        } finally {\n+            if (s2 != null) {\n+                s2.logout();\n+            }\n+            if (collidingPath != null && s.nodeExists(collidingPath)) {\n+                s.getNode(collidingPath).remove();\n+                s.save();\n+            }\n         }\n     }\n }",
                "changes": 213
            }
        ],
        "unit_tests": [
            "AdministratorTest.java",
            "UserManagerImplTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/AdministratorTest.java",
        "buggy_files": [
            "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/BatchedItemOperations.java",
            "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemValidator.java",
            "jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/UserManagerImpl.java"
        ],
        "fixed": true
    }
]