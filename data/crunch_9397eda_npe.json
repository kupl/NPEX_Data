[
    {
        "repo": "crunch",
        "commit": "https://github.com/apache/crunch/commit/9397edad2dce5b055a2eb539b933aa16759e2a55",
        "bug_id": "crunch_9397eda",
        "message": "Merge pull request #29 from gabrielreid/sourcetarget-npe\n\nPrevent NPE on getPathSize for non-existant file",
        "parent": "https://github.com/apache/crunch/commit/400b63706b2382bba72b064f55ae80ed22f9ba22",
        "patched_files": [
            "SourceTargetHelper.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 31,
                "raw_url": "https://github.com/apache/crunch/raw/9397edad2dce5b055a2eb539b933aa16759e2a55/src/main/java/com/cloudera/crunch/io/SourceTargetHelper.java",
                "contents_url": "https://api.github.com/repos/apache/crunch/contents/src/main/java/com/cloudera/crunch/io/SourceTargetHelper.java?ref=9397edad2dce5b055a2eb539b933aa16759e2a55",
                "filename": "src/main/java/com/cloudera/crunch/io/SourceTargetHelper.java",
                "deletions": 22,
                "sha": "60b60501f808efad80e10239242057e9a43e64ec",
                "blob_url": "https://github.com/apache/crunch/blob/9397edad2dce5b055a2eb539b933aa16759e2a55/src/main/java/com/cloudera/crunch/io/SourceTargetHelper.java",
                "patch": "@@ -17,35 +17,44 @@\n import java.io.FileNotFoundException;\n import java.io.IOException;\n \n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.fs.FileStatus;\n import org.apache.hadoop.fs.FileSystem;\n import org.apache.hadoop.fs.Path;\n \n /**\n  * Functions for configuring the inputs/outputs of MapReduce jobs.\n- *\n+ * \n  */\n public class SourceTargetHelper {\n-  public static long getPathSize(Configuration conf, Path path) throws IOException {\n-\treturn getPathSize(FileSystem.get(conf), path);\n-  }\n-  \n-  public static long getPathSize(FileSystem fs, Path path) throws IOException {\n-    FileStatus[] stati = null;\n-    try {\n-      stati = fs.listStatus(path);\n-    } catch (FileNotFoundException e) {\n-      return 0L;\n-    }\n-    \n-    if (stati.length == 0) {\n-      return 0L;\n-    }\n-    long size = 0;\n-    for (FileStatus status : stati) {\n-      size += status.getLen();\n-    }\n-    return size;\n-  }\n+\n+\tprivate static final Log LOG = LogFactory.getLog(SourceTargetHelper.class);\n+\n+\tpublic static long getPathSize(Configuration conf, Path path) throws IOException {\n+\t\treturn getPathSize(FileSystem.get(conf), path);\n+\t}\n+\n+\tpublic static long getPathSize(FileSystem fs, Path path) throws IOException {\n+\t\tFileStatus[] stati = null;\n+\t\ttry {\n+\t\t\tstati = fs.listStatus(path);\n+\t\t\tif (stati == null) {\n+\t\t\t\tthrow new FileNotFoundException(path + \" doesn't exist\");\n+\t\t\t}\n+\t\t} catch (FileNotFoundException e) {\n+\t\t\tLOG.warn(\"Returning 0 for getPathSize on non-existant path '\" + path + \"'\");\n+\t\t\treturn 0L;\n+\t\t}\n+\n+\t\tif (stati.length == 0) {\n+\t\t\treturn 0L;\n+\t\t}\n+\t\tlong size = 0;\n+\t\tfor (FileStatus status : stati) {\n+\t\t\tsize += status.getLen();\n+\t\t}\n+\t\treturn size;\n+\t}\n }",
                "changes": 53
            },
            {
                "status": "modified",
                "additions": 28,
                "raw_url": "https://github.com/apache/crunch/raw/9397edad2dce5b055a2eb539b933aa16759e2a55/src/test/java/com/cloudera/crunch/io/SourceTargetHelperTest.java",
                "contents_url": "https://api.github.com/repos/apache/crunch/contents/src/test/java/com/cloudera/crunch/io/SourceTargetHelperTest.java?ref=9397edad2dce5b055a2eb539b933aa16759e2a55",
                "filename": "src/test/java/com/cloudera/crunch/io/SourceTargetHelperTest.java",
                "deletions": 8,
                "sha": "fd3c6ff88e65b8397e17116bdb902f1b612842f8",
                "blob_url": "https://github.com/apache/crunch/blob/9397edad2dce5b055a2eb539b933aa16759e2a55/src/test/java/com/cloudera/crunch/io/SourceTargetHelperTest.java",
                "patch": "@@ -3,19 +3,39 @@\n import static org.junit.Assert.assertEquals;\n \n import java.io.File;\n+import java.io.IOException;\n \n import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.LocalFileSystem;\n import org.apache.hadoop.fs.Path;\n import org.junit.Test;\n \n public class SourceTargetHelperTest {\n-  @Test\n-  public void testGetNonexistentPathSize() throws Exception {\n-\tFile tmp = File.createTempFile(\"pathsize\", \"\");\n-\tPath tmpPath = new Path(tmp.getAbsolutePath());\n-\ttmp.delete();\n-\tFileSystem fs = FileSystem.getLocal(new Configuration());\n-\tassertEquals(0L, SourceTargetHelper.getPathSize(fs, tmpPath));\n-  }\n+\t@Test\n+\tpublic void testGetNonexistentPathSize() throws Exception {\n+\t\tFile tmp = File.createTempFile(\"pathsize\", \"\");\n+\t\tPath tmpPath = new Path(tmp.getAbsolutePath());\n+\t\ttmp.delete();\n+\t\tFileSystem fs = FileSystem.getLocal(new Configuration());\n+\t\tassertEquals(0L, SourceTargetHelper.getPathSize(fs, tmpPath));\n+\t}\n+\n+\t@Test\n+\tpublic void testGetNonExistentPathSize_NonExistantPath() throws IOException {\n+\t\tFileSystem mockFs = new MockFileSystem();\n+\t\tassertEquals(0L, SourceTargetHelper.getPathSize(mockFs, new Path(\"does/not/exist\")));\n+\t}\n+\n+\t/**\n+\t * Mock FileSystem that returns null for {@link FileSystem#listStatus(Path)}.\n+\t */\n+\tstatic class MockFileSystem extends LocalFileSystem {\n+\n+\t\t@Override\n+\t\tpublic FileStatus[] listStatus(Path f) throws IOException {\n+\t\t\treturn null;\n+\t\t}\n+\t}\n }",
                "changes": 36
            }
        ],
        "unit_tests": [
            "SourceTargetHelperTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "src/test/java/com/cloudera/crunch/io/SourceTargetHelperTest.java",
        "buggy_files": [
            "src/main/java/com/cloudera/crunch/io/SourceTargetHelper.java"
        ],
        "fixed": true
    }
]