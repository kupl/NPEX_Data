[
    {
        "repo": "calcite",
        "commit": "https://github.com/apache/calcite/commit/883e19170a45e0badffa5b8fba04cd536e0f2eb2",
        "bug_id": "calcite_883e191",
        "message": "[CALCITE-3360] SqlValidator throws NPE for unregistered function without implicit type coercion\n\nSqlValidator should report the function signature for unregistered UDFs\nwhen implicit type coercion is turned off.\n\nWe also change SqlTypeNameSpec constructor to public so that any other\nengine can extend it and implement their custom data type.(Because it is\ntoo small change, i just merge it into this one)",
        "parent": "https://github.com/apache/calcite/commit/67fd318ed755ef975cf31262c96c982f0922a975",
        "patched_files": [
            "SqlTypeNameSpec.java",
            "SqlFunction.java",
            "SqlValidator.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 13,
                "raw_url": "https://github.com/apache/calcite/raw/883e19170a45e0badffa5b8fba04cd536e0f2eb2/core/src/main/java/org/apache/calcite/sql/SqlFunction.java",
                "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/main/java/org/apache/calcite/sql/SqlFunction.java?ref=883e19170a45e0badffa5b8fba04cd536e0f2eb2",
                "filename": "core/src/main/java/org/apache/calcite/sql/SqlFunction.java",
                "deletions": 11,
                "sha": "b830a0885aa82346cfba0f5a1d5671b805a28270",
                "blob_url": "https://github.com/apache/calcite/blob/883e19170a45e0badffa5b8fba04cd536e0f2eb2/core/src/main/java/org/apache/calcite/sql/SqlFunction.java",
                "patch": "@@ -271,18 +271,20 @@ private RelDataType deriveType(\n         return validator.deriveConstructorType(scope, call, this, function,\n             argTypes);\n       }\n-      if (function == null && validator.isTypeCoercionEnabled()) {\n-        // try again if implicit type coercion is allowed.\n+      if (function == null) {\n         boolean changed = false;\n-        function = (SqlFunction) SqlUtil.lookupRoutine(validator.getOperatorTable(),\n-            getNameAsId(), argTypes, argNames, getFunctionType(), SqlSyntax.FUNCTION, getKind(),\n-            validator.getCatalogReader().nameMatcher(),\n-            true);\n-        // try to coerce the function arguments to the declared sql type name.\n-        // if we succeed, the arguments would be wrapped with CAST operator.\n-        if (function != null) {\n-          TypeCoercion typeCoercion = validator.getTypeCoercion();\n-          changed = typeCoercion.userDefinedFunctionCoercion(scope, call, function);\n+        if (validator.isTypeCoercionEnabled()) {\n+          // try again if implicit type coercion is allowed.\n+          function = (SqlFunction) SqlUtil.lookupRoutine(validator.getOperatorTable(),\n+              getNameAsId(), argTypes, argNames, getFunctionType(), SqlSyntax.FUNCTION, getKind(),\n+              validator.getCatalogReader().nameMatcher(),\n+              true);\n+          // try to coerce the function arguments to the declared sql type name.\n+          // if we succeed, the arguments would be wrapped with CAST operator.\n+          if (function != null) {\n+            TypeCoercion typeCoercion = validator.getTypeCoercion();\n+            changed = typeCoercion.userDefinedFunctionCoercion(scope, call, function);\n+          }\n         }\n         if (!changed) {\n           throw validator.handleUnresolvedFunction(call, this, argTypes,",
                "changes": 24
            },
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/calcite/raw/883e19170a45e0badffa5b8fba04cd536e0f2eb2/core/src/main/java/org/apache/calcite/sql/SqlTypeNameSpec.java",
                "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/main/java/org/apache/calcite/sql/SqlTypeNameSpec.java?ref=883e19170a45e0badffa5b8fba04cd536e0f2eb2",
                "filename": "core/src/main/java/org/apache/calcite/sql/SqlTypeNameSpec.java",
                "deletions": 1,
                "sha": "a0be99ae6a046d2f7732e900844ce24cae4191fa",
                "blob_url": "https://github.com/apache/calcite/blob/883e19170a45e0badffa5b8fba04cd536e0f2eb2/core/src/main/java/org/apache/calcite/sql/SqlTypeNameSpec.java",
                "patch": "@@ -40,7 +40,7 @@\n    * @param name Name of the type.\n    * @param pos  Parser position, must not be null.\n    */\n-  SqlTypeNameSpec(SqlIdentifier name, SqlParserPos pos) {\n+  public SqlTypeNameSpec(SqlIdentifier name, SqlParserPos pos) {\n     this.typeName = name;\n     this.pos = pos;\n   }",
                "changes": 2
            },
            {
                "status": "modified",
                "additions": 42,
                "raw_url": "https://github.com/apache/calcite/raw/883e19170a45e0badffa5b8fba04cd536e0f2eb2/core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java",
                "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java?ref=883e19170a45e0badffa5b8fba04cd536e0f2eb2",
                "filename": "core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java",
                "deletions": 0,
                "sha": "77679a1742f85aa357bba40a90a558e7d364664f",
                "blob_url": "https://github.com/apache/calcite/blob/883e19170a45e0badffa5b8fba04cd536e0f2eb2/core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java",
                "patch": "@@ -11513,6 +11513,48 @@ private void checkCustomColumnResolving(String table) {\n         \"VARCHAR NOT NULL\");\n   }\n \n+  @Test public void testInvalidFunctionCall() {\n+    final SqlTester tester1 = tester\n+        .withCaseSensitive(true);\n+    final MockSqlOperatorTable operatorTable =\n+        new MockSqlOperatorTable(SqlStdOperatorTable.instance());\n+    MockSqlOperatorTable.addRamp(operatorTable);\n+    tester1.withOperatorTable(operatorTable);\n+    // With implicit type coercion.\n+    checkExpFails(\"^unknown_udf(1, 2)^\",\n+        \"(?s).*No match found for function signature \"\n+            + \"UNKNOWN_UDF\\\\(<NUMERIC>, <NUMERIC>\\\\).*\");\n+    checkExpFails(\"^power(cast(1 as timestamp), cast(2 as timestamp))^\",\n+        \"(?s).*Cannot apply 'POWER' to arguments of type \"\n+            + \"'POWER\\\\(<TIMESTAMP\\\\(0\\\\)>, <TIMESTAMP\\\\(0\\\\)>\\\\)'.*\");\n+    tester1.checkFails(\"^myFUN(cast('124' as timestamp))^\",\n+            \"(?s).*Cannot apply 'MYFUN' to arguments of type \"\n+                + \"'MYFUN\\\\(<TIMESTAMP\\\\(0\\\\)>\\\\)'.*\",\n+            false);\n+    tester1.checkFails(\"^myFUN(1, 2)^\",\n+        \"(?s).*No match found for function signature \"\n+            + \"MYFUN\\\\(<NUMERIC>, <NUMERIC>\\\\).*\",\n+        false);\n+    // Without implicit type coercion.\n+    checkExpFails(\"^unknown_udf(1, 2)^\",\n+        \"(?s).*No match found for function signature \"\n+            + \"UNKNOWN_UDF\\\\(<NUMERIC>, <NUMERIC>\\\\).*\",\n+        false);\n+    checkExpFails(\"^power(cast(1 as timestamp), cast(2 as timestamp))^\",\n+        \"(?s).*Cannot apply 'POWER' to arguments of type \"\n+            + \"'POWER\\\\(<TIMESTAMP\\\\(0\\\\)>, <TIMESTAMP\\\\(0\\\\)>\\\\)'.*\", false);\n+    tester1.enableTypeCoercion(false)\n+        .checkFails(\"^myFUN(cast('124' as timestamp))^\",\n+            \"(?s).*Cannot apply 'MYFUN' to arguments of type \"\n+                + \"'MYFUN\\\\(<TIMESTAMP\\\\(0\\\\)>\\\\)'.*\",\n+            false);\n+    tester1.enableTypeCoercion(false)\n+        .checkFails(\"^myFUN(1, 2)^\",\n+        \"(?s).*No match found for function signature \"\n+            + \"MYFUN\\\\(<NUMERIC>, <NUMERIC>\\\\).*\",\n+        false);\n+  }\n+\n   @Test public void testValidatorReportsOriginalQueryUsingReader()\n       throws Exception {\n     final String sql = \"select a from b\";",
                "changes": 42
            }
        ],
        "unit_tests": [
            "SqlValidatorTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java",
        "buggy_files": [
            "core/src/main/java/org/apache/calcite/sql/SqlTypeNameSpec.java",
            "core/src/main/java/org/apache/calcite/sql/SqlFunction.java",
            "core/src/main/java/org/apache/calcite/sql/validate/SqlValidator.java"
        ],
        "fixed": true
    }
]