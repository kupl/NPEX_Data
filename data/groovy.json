{
    "groovy_0de685c": {
        "bug_id": "groovy_0de685c",
        "commit": "https://github.com/apache/groovy/commit/0de685ca192e9e842b28ec565711103a6a16c5ec",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/groovy/blob/0de685ca192e9e842b28ec565711103a6a16c5ec/src/main/org/codehaus/groovy/ant/Groovyc.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/ant/Groovyc.java?ref=0de685ca192e9e842b28ec565711103a6a16c5ec",
                "deletions": 4,
                "filename": "src/main/org/codehaus/groovy/ant/Groovyc.java",
                "patch": "@@ -77,7 +77,7 @@\n  * @version $Revision$ \n  */\n public class Groovyc extends MatchingTask {\n-    \n+\n     private FileSystemCompiler compiler = new FileSystemCompiler();\n     private Path src;\n     private File destDir;\n@@ -151,7 +151,7 @@ public void setDestdir(File destDir) {\n     public void setVerbose(boolean verbose) {\n         compiler.setVerbose(verbose);\n     }\n-    \n+\n     /**\n      * Gets the destination directory into which the java source files\n      * should be compiled.\n@@ -365,7 +365,8 @@ protected void checkParameters() throws BuildException {\n     protected void compile() {\n \n         if (compileList.length > 0) {\n-            log(\"Compiling \"\n+            log(\n+                \"Compiling \"\n                     + compileList.length\n                     + \" source file\"\n                     + (compileList.length == 1 ? \"\" : \"s\")\n@@ -379,7 +380,10 @@ protected void compile() {\n             }\n \n             try {\n-                compiler.setClasspath(getClasspath().toString());\n+                String classpath = getClasspath().toString();\n+                if (classpath != null) {\n+                    compiler.setClasspath(classpath);\n+                }\n                 compiler.setOutputDir(destDir);\n                 compiler.compile(compileList);\n             }",
                "raw_url": "https://github.com/apache/groovy/raw/0de685ca192e9e842b28ec565711103a6a16c5ec/src/main/org/codehaus/groovy/ant/Groovyc.java",
                "sha": "ad7d930b2c85db5c1ba2591847e5daa8461167ee",
                "status": "modified"
            }
        ],
        "message": "Committed Sam's patch to avoid NPEs when not specifying classpath\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@289 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/e52182853d6eba9eb662038359c3ede678197db5",
        "repo": "groovy",
        "unit_tests": [
            "GroovycTest.java"
        ]
    },
    "groovy_21c1e4b": {
        "bug_id": "groovy_21c1e4b",
        "commit": "https://github.com/apache/groovy/commit/21c1e4b041c95bac940e8eabbc8849a320fa12ef",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/21c1e4b041c95bac940e8eabbc8849a320fa12ef/src/main/org/codehaus/groovy/ant/Groovydoc.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/ant/Groovydoc.java?ref=21c1e4b041c95bac940e8eabbc8849a320fa12ef",
                "deletions": 2,
                "filename": "src/main/org/codehaus/groovy/ant/Groovydoc.java",
                "patch": "@@ -42,8 +42,8 @@\n     private File destDir;\n     private List<String> packageNames;\n     private List<String> excludePackageNames;\n-    private String windowTitle;\n-    private String footer;\n+    private String windowTitle = \"Groovy Documentation\";\n+    private String footer = \"Groovy Documentation\";\n     private boolean privateScope;\n     private boolean useDefaultExcludes;\n     private boolean includeNoSourcePackages;",
                "raw_url": "https://github.com/apache/groovy/raw/21c1e4b041c95bac940e8eabbc8849a320fa12ef/src/main/org/codehaus/groovy/ant/Groovydoc.java",
                "sha": "45c5abdd323bd2739a605c9fc4268f190ee9d09f",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/groovy/blob/21c1e4b041c95bac940e8eabbc8849a320fa12ef/src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java?ref=21c1e4b041c95bac940e8eabbc8849a320fa12ef",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java",
                "patch": "@@ -184,6 +184,9 @@ private void processFile(String filename, File srcFile) throws IOException {\n         }\n     }\n \n+    // TODO non-strict XML parsing (CyberNeko, TagSoup)\n+    // and extract first sentence for summary\n+    // and full text for package page\n     private void processHtmlPackage(String src, SimpleGroovyPackageDoc packageDoc) {\n         try {\n             XmlSlurper parser = new XmlSlurper();",
                "raw_url": "https://github.com/apache/groovy/raw/21c1e4b041c95bac940e8eabbc8849a320fa12ef/src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java",
                "sha": "798fa7ee649f49174388c9da5c3200a5f436a10b",
                "status": "modified"
            }
        ],
        "message": "groovydoc (avoid NPE)\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@14977 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/7349983c11b26a84120659aea6f1d6cf553ffc99",
        "repo": "groovy",
        "unit_tests": [
            "GroovyRootDocBuilderTest.java"
        ]
    },
    "groovy_3481fd2": {
        "bug_id": "groovy_3481fd2",
        "commit": "https://github.com/apache/groovy/commit/3481fd2478bb74fad111534db3570475c4b7983d",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/3481fd2478bb74fad111534db3570475c4b7983d/src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java?ref=3481fd2478bb74fad111534db3570475c4b7983d",
                "deletions": 2,
                "filename": "src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java",
                "patch": "@@ -151,8 +151,10 @@ public void buildTree(List<String> filenames) throws IOException, RecognitionExc\n         setOverview();\n \n         List<File> sourcepathFiles = new ArrayList<File>();\n-        for (String sourcepath : sourcepaths) {\n-            sourcepathFiles.add(new File(sourcepath).getAbsoluteFile());\n+        if (sourcepaths != null) {\n+            for (String sourcepath : sourcepaths) {\n+                sourcepathFiles.add(new File(sourcepath).getAbsoluteFile());\n+            }\n         }\n \n         for (String filename : filenames) {",
                "raw_url": "https://github.com/apache/groovy/raw/3481fd2478bb74fad111534db3570475c4b7983d/src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java",
                "sha": "2a18142a8b6b2ad64c97e936e43374f81c44383d",
                "status": "modified"
            }
        ],
        "message": "NPE fix\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@19628 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/7d4e5c7cbf9f6734185e545d53323e1646637383",
        "repo": "groovy",
        "unit_tests": [
            "GroovyRootDocBuilderTest.java"
        ]
    },
    "groovy_428f5f7": {
        "bug_id": "groovy_428f5f7",
        "commit": "https://github.com/apache/groovy/commit/428f5f769a031b1e3483270d0e34611e941c9b54",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/428f5f769a031b1e3483270d0e34611e941c9b54/src/main/groovy/lang/GroovyClassLoader.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/GroovyClassLoader.java?ref=428f5f769a031b1e3483270d0e34611e941c9b54",
                "deletions": 2,
                "filename": "src/main/groovy/lang/GroovyClassLoader.java",
                "patch": "@@ -339,8 +339,10 @@ public ProtectionDomain run() {\n             }\n         });\n         PermissionCollection myPerms = myDomain.getPermissions();\n-        for (Enumeration<Permission> elements = myPerms.elements(); elements.hasMoreElements();) {\n-            perms.add(elements.nextElement());\n+        if(myPerms != null) {\n+            for (Enumeration<Permission> elements = myPerms.elements(); elements.hasMoreElements();) {\n+                perms.add(elements.nextElement());\n+            }\n         }\n         perms.setReadOnly();\n         return perms;",
                "raw_url": "https://github.com/apache/groovy/raw/428f5f769a031b1e3483270d0e34611e941c9b54/src/main/groovy/lang/GroovyClassLoader.java",
                "sha": "7ed98e0829a565103959b46a836addf4dd0f8eaf",
                "status": "modified"
            }
        ],
        "message": "GROOVY-3542\nAdded a null check for permissions returned by ProtectionDomain.getPermissions() call to avoid reported NPE.\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@16478 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/8bf7910c1b3b890b79dcd679a003663f1ac51671",
        "repo": "groovy",
        "unit_tests": [
            "GroovyClassLoaderTest.java"
        ]
    },
    "groovy_486da8d": {
        "bug_id": "groovy_486da8d",
        "commit": "https://github.com/apache/groovy/commit/486da8d7b41e72315cdeaddf2d06e859336eab4f",
        "file": [
            {
                "additions": 92,
                "blob_url": "https://github.com/apache/groovy/blob/486da8d7b41e72315cdeaddf2d06e859336eab4f/src/main/groovy/servlet/GroovyServlet.java",
                "changes": 177,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/servlet/GroovyServlet.java?ref=486da8d7b41e72315cdeaddf2d06e859336eab4f",
                "deletions": 85,
                "filename": "src/main/groovy/servlet/GroovyServlet.java",
                "patch": "@@ -92,93 +92,100 @@\n  */\n public class GroovyServlet extends AbstractHttpServlet {\n \n-  /**\n-   * The script engine executing the Groovy scripts for this servlet\n-   */\n-  private static GroovyScriptEngine gse;\n-\n-  /**\n-   * Initialize the GroovyServlet.\n-   *\n-   * @throws ServletException\n-   *  if this method encountered difficulties\n-   */\n-  public void init(ServletConfig config) throws ServletException {\n-    super.init(config);\n-\n-    // Set up the scripting engine\n-    gse = new GroovyScriptEngine(this);\n-\n-    servletContext.log(\"Groovy servlet initialized\");\n-  }\n-\n-  /**\n-   * Handle web requests to the GroovyServlet\n-   */\n-  public void service(HttpServletRequest request,\n-      HttpServletResponse response) throws IOException {\n-\n-    // Get the script path from the request - include aware (GROOVY-815)\n-    final String scriptUri = getScriptUri(request);\n-\n-    // Set it to HTML by default\n-    response.setContentType(\"text/html\");\n-\n-    // Set up the script context\n-    final Binding binding = new ServletBinding(request, response, servletContext);\n-\n-    // Run the script\n-    try {\n-      Closure closure = new Closure(gse) {\n-\n-        public Object call() {\n-          try {\n-            return ((GroovyScriptEngine) getDelegate()).run(scriptUri, binding);\n-          }\n-          catch (ResourceException e) {\n-            throw new RuntimeException(e);\n-          }\n-          catch (ScriptException e) {\n-            throw new RuntimeException(e);\n-          }\n-        }\n-\n-      };\n-      GroovyCategorySupport.use(ServletCategory.class, closure);\n-      // Set reponse code 200 and flush buffers\n-      response.setStatus(HttpServletResponse.SC_OK);\n-      response.flushBuffer();\n-      // log(\"Flushed response buffer.\");\n+    /**\n+     * The script engine executing the Groovy scripts for this servlet\n+     */\n+    private static GroovyScriptEngine gse;\n+\n+    /**\n+     * Initialize the GroovyServlet.\n+     *\n+     * @throws ServletException\n+     *  if this method encountered difficulties\n+     */\n+    public void init(ServletConfig config) throws ServletException {\n+        super.init(config);\n+\n+        // Set up the scripting engine\n+        gse = new GroovyScriptEngine(this);\n+\n+        servletContext.log(\"Groovy servlet initialized on \" + gse + \".\");\n     }\n-    catch (RuntimeException re) {\n-      StringBuffer error = new StringBuffer(\"GroovyServlet Error: \");\n-      error.append(\" script: '\");\n-      error.append(scriptUri);\n-      error.append(\"': \");\n-      Throwable e = re.getCause();\n-      if (e instanceof ResourceException) {\n-        error.append(\" Script not found, sending 404.\");\n-        servletContext.log(error.toString());\n-        System.out.println(error.toString());\n-        response.sendError(HttpServletResponse.SC_NOT_FOUND);\n-      }\n-      else {\n-        // write the script errors (if any) to the servlet context's log\n-        if (re.getMessage() != null)\n-          error.append(re.getMessage());\n-\n-        if (e != null) {\n-          servletContext.log(\"An error occurred processing the request\", e);\n-        }\n-        else {\n-          servletContext.log(\"An error occurred processing the request\", re);\n+\n+    /**\n+     * Handle web requests to the GroovyServlet\n+     */\n+    public void service(HttpServletRequest request, HttpServletResponse response) throws IOException {\n+\n+        // Get the script path from the request - include aware (GROOVY-815)\n+        final String scriptUri = getScriptUri(request);\n+\n+        // Set it to HTML by default\n+        response.setContentType(\"text/html\");\n+\n+        // Set up the script context\n+        final Binding binding = new ServletBinding(request, response, servletContext);\n+\n+        // Run the script\n+        try {\n+            Closure closure = new Closure(gse) {\n+\n+                public Object call() {\n+                    try {\n+                        return ((GroovyScriptEngine) getDelegate()).run(scriptUri, binding);\n+                    } catch (ResourceException e) {\n+                        throw new RuntimeException(e);\n+                    } catch (ScriptException e) {\n+                        throw new RuntimeException(e);\n+                    }\n+                }\n+\n+            };\n+            GroovyCategorySupport.use(ServletCategory.class, closure);\n+            /*\n+             * Set reponse code 200.\n+             */\n+            response.setStatus(HttpServletResponse.SC_OK);\n+        } catch (RuntimeException runtimeException) {\n+            StringBuffer error = new StringBuffer(\"GroovyServlet Error: \");\n+            error.append(\" script: '\");\n+            error.append(scriptUri);\n+            error.append(\"': \");\n+            Throwable e = runtimeException.getCause();\n+            /*\n+             * Null cause?!\n+             */\n+            if (e == null) {\n+                error.append(\" Script processing failed.\");\n+                servletContext.log(error.toString());\n+                System.err.println(error.toString());\n+                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n+                return;\n+            }\n+            /*\n+             * Resource not found.\n+             */\n+            if (e instanceof ResourceException) {\n+                error.append(\" Script not found, sending 404.\");\n+                servletContext.log(error.toString());\n+                System.err.println(error.toString());\n+                response.sendError(HttpServletResponse.SC_NOT_FOUND);\n+                return;\n+            }\n+            /*\n+             * Other internal error. Perhaps syntax?! \n+             */\n+            servletContext.log(\"An error occurred processing the request\", e);\n+            servletContext.log(error.toString());\n+            System.err.println(error.toString());\n+            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.toString());\n+        } finally {\n+            /*\n+             * Finally, flush the response buffer.\n+             */\n+            response.flushBuffer();\n+            // servletContext.log(\"Flushed response buffer.\");\n         }\n-        servletContext.log(error.toString());\n-        System.out.println(error.toString());\n-        response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.toString());\n-      }\n     }\n \n-  }\n-\n }",
                "raw_url": "https://github.com/apache/groovy/raw/486da8d7b41e72315cdeaddf2d06e859336eab4f/src/main/groovy/servlet/GroovyServlet.java",
                "sha": "4fa7c611b640067473994d65ef09e558bfc74139",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE in catch block and re-formatted the entire file to the Groovy code style. Sorry for the not nice diff.\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@2276 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/b31711d5851cbe4d9076ffa7738e9411d24f9308",
        "repo": "groovy",
        "unit_tests": [
            "GroovyServletTest.java"
        ]
    },
    "groovy_4d3a020": {
        "bug_id": "groovy_4d3a020",
        "commit": "https://github.com/apache/groovy/commit/4d3a020b5cd8b9549498716e48f45c1b79ab8e99",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/4d3a020b5cd8b9549498716e48f45c1b79ab8e99/src/main/org/codehaus/groovy/runtime/MetaClassHelper.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/MetaClassHelper.java?ref=4d3a020b5cd8b9549498716e48f45c1b79ab8e99",
                "deletions": 2,
                "filename": "src/main/org/codehaus/groovy/runtime/MetaClassHelper.java",
                "patch": "@@ -278,12 +278,12 @@ private static int getPrimitiveDistance(Class from, Class to) {\n     }\n     \n     private static int getMaximumInterfaceDistance(Class c, Class interfaceClass) {\n-        if (c==interfaceClass) return 0;\n+        if (c==null || c==interfaceClass) return 0;\n         Class[] interfaces = c.getInterfaces();\n         int max = 0;\n         for (int i=0; i<interfaces.length; i++) {\n             int sub = 0;\n-            if (interfaces[i].isAssignableFrom(c)) {\n+            if (interfaces[i].isAssignableFrom(interfaceClass)) {\n                 sub = 1+ getMaximumInterfaceDistance(interfaces[i],interfaceClass);\n             }\n             max = Math.max(max,sub);",
                "raw_url": "https://github.com/apache/groovy/raw/4d3a020b5cd8b9549498716e48f45c1b79ab8e99/src/main/org/codehaus/groovy/runtime/MetaClassHelper.java",
                "sha": "aba2584a4fcfbe67ef659b2ebf911399e37cfcbc",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE bug in getMaximumInterfaceDistance\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@5082 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/3cd7a5079e43b61dbf1ff74e8021bd28889cc707",
        "repo": "groovy",
        "unit_tests": [
            "MetaClassHelperTest.java"
        ]
    },
    "groovy_7d4e5c7": {
        "bug_id": "groovy_7d4e5c7",
        "commit": "https://github.com/apache/groovy/commit/7d4e5c7cbf9f6734185e545d53323e1646637383",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/groovy/blob/7d4e5c7cbf9f6734185e545d53323e1646637383/src/main/org/codehaus/groovy/ant/Groovy.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/ant/Groovy.java?ref=7d4e5c7cbf9f6734185e545d53323e1646637383",
                "deletions": 3,
                "filename": "src/main/org/codehaus/groovy/ant/Groovy.java",
                "patch": "@@ -475,9 +475,11 @@ private void createClasspathParts() {\n         }\n         String groovyHome = null;\n         final String[] strings = getSysProperties().getVariables();\n-        for (String prop : strings) {\n-            if (prop.startsWith(\"-Dgroovy.home=\")) {\n-                groovyHome = prop.substring(\"-Dgroovy.home=\".length());\n+        if (strings != null) {\n+            for (String prop : strings) {\n+                if (prop.startsWith(\"-Dgroovy.home=\")) {\n+                    groovyHome = prop.substring(\"-Dgroovy.home=\".length());\n+                }\n             }\n         }\n         if (groovyHome == null) {",
                "raw_url": "https://github.com/apache/groovy/raw/7d4e5c7cbf9f6734185e545d53323e1646637383/src/main/org/codehaus/groovy/ant/Groovy.java",
                "sha": "b26fd04f264e343163528dc4657d431670cab253",
                "status": "modified"
            }
        ],
        "message": "GROOVY-4108: Possible NPE in Groovy Ant task\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@19626 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/1dafad4016852ebad8b75d9ed5ab74096b7ca2f1",
        "repo": "groovy",
        "unit_tests": [
            "GroovyTest.java"
        ]
    },
    "groovy_860577a": {
        "bug_id": "groovy_860577a",
        "commit": "https://github.com/apache/groovy/commit/860577a6e59e6c086ded4b23f9120b5d55430d35",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/groovy/blob/860577a6e59e6c086ded4b23f9120b5d55430d35/src/main/org/codehaus/groovy/runtime/InvokerHelper.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/InvokerHelper.java?ref=860577a6e59e6c086ded4b23f9120b5d55430d35",
                "deletions": 12,
                "filename": "src/main/org/codehaus/groovy/runtime/InvokerHelper.java",
                "patch": "@@ -117,9 +117,9 @@ public static String inspect(Object self) {\n     }\n \n     public static Object getAttribute(Object object, String attribute) {\n-//        if (object == null) {\n-//            throw new NullPointerException(\"Cannot get attribute: \" + attribute + \" on null object\");\n-//        }\n+        if (object == null) {\n+            object = NullObject.getNullObject();\n+        }\n \n         if (object instanceof Class) {\n             return metaRegistry.getMetaClass((Class) object).getAttribute(object, attribute);\n@@ -131,9 +131,9 @@ public static Object getAttribute(Object object, String attribute) {\n     }\n \n     public static void setAttribute(Object object, String attribute, Object newValue) {\n-//        if (object == null) {\n-//            throw new GroovyRuntimeException(\"Cannot set attribute on null object\");\n-//        }\n+        if (object == null) {\n+            object = NullObject.getNullObject();\n+        }\n \n         if (object instanceof Class) {\n             metaRegistry.getMetaClass((Class) object).setAttribute(object, attribute, newValue);\n@@ -145,9 +145,10 @@ public static void setAttribute(Object object, String attribute, Object newValue\n     }\n \n     public static Object getProperty(Object object, String property) {\n-//        if (object == null) {\n-//            throw new NullPointerException(\"Cannot get property: \" + property + \" on null object\");\n-//        }\n+        if (object == null) {\n+            object = NullObject.getNullObject();\n+        }\n+        \n         if (object instanceof GroovyObject) {\n             GroovyObject pogo = (GroovyObject) object;\n             return pogo.getProperty(property);\n@@ -167,9 +168,10 @@ public static Object getPropertySafe(Object object, String property) {\n     }\n \n     public static void setProperty(Object object, String property, Object newValue) {\n-//        if (object == null) {\n-//            throw new GroovyRuntimeException(\"Cannot set property on null object\");\n-//        }\n+        if (object == null) {\n+            object = NullObject.getNullObject();\n+        }\n+\n         if (object instanceof GroovyObject) {\n             GroovyObject pogo = (GroovyObject) object;\n             pogo.setProperty(property, newValue);",
                "raw_url": "https://github.com/apache/groovy/raw/860577a6e59e6c086ded4b23f9120b5d55430d35/src/main/org/codehaus/groovy/runtime/InvokerHelper.java",
                "sha": "da4683847532f44852a3ae51851a425aa3292293",
                "status": "modified"
            }
        ],
        "message": "GROOVY-3510: NPE in MetaClassRegistryImpl\nBring back NullObject to properly handle the null cases from within InvokerHelper\n(merge rev 16276)\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@16277 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/c43959198ef3886419f1df6b9b9e83fd9420f9b1",
        "repo": "groovy",
        "unit_tests": [
            "InvokerHelperTest.java"
        ]
    },
    "groovy_8ea5329": {
        "bug_id": "groovy_8ea5329",
        "commit": "https://github.com/apache/groovy/commit/8ea532994756c2178365a8aab62f70e4dee87eba",
        "file": [
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/groovy/blob/8ea532994756c2178365a8aab62f70e4dee87eba/src/main/groovy/lang/GroovyClassLoader.java",
                "changes": 67,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/GroovyClassLoader.java?ref=8ea532994756c2178365a8aab62f70e4dee87eba",
                "deletions": 31,
                "filename": "src/main/groovy/lang/GroovyClassLoader.java",
                "patch": "@@ -360,41 +360,46 @@ protected Class findGroovyClass(String name) throws ClassNotFoundException {\n      * @param classpath\n      */\n     private void expandClassPath(List pathList, String base, String classpath) {\n-        String[] paths = classpath.split(File.pathSeparator);\n-        for (int i = 0; i < paths.length; i++) {\n-            File path = null;\n \n-            if (\"\".equals(base)) {\n-                path = new File(paths[i]);\n-            } else {\n-                path = new File(base, paths[i]);\n-            }\n+        // checking against null prevents an NPE when recursevely expanding the classpath\n+        // in case the classpath is malformed\n+        if (classpath != null) {\n \n-            if (path.exists()) {\n-                if (!path.isDirectory()) {\n-                    try {\n-                        JarFile jar = new JarFile(path);\n-                        pathList.add(paths[i]);\n-                        // Get the manifest classpath entry from the jar\n-                        // SPG This code is currently unreliable - the Class-Path attribute\n-                        // returns entries which are delimited in unpredictable ways.\n-                        // See for example openejb-loader jar.  Commenting until we\n-                        // decide how we want to handle these cases (if at all).\n-                        /*\n-                        Manifest manifest = jar.getManifest();\n-                        Attributes classPathAttributes = manifest.getMainAttributes();\n-                        String manifestClassPath = classPathAttributes.getValue(\"Class-Path\");\n-\n-                        if (manifestClassPath != null)\n-                            expandClassPath(pathList, paths[i], manifestClassPath);\n-                        */\n+            // Sun's convention for the class-path attribute is to seperate each entry with spaces\n+            // but some libraries don't respect that convention and add commas, colons, semi-colons\n+            String[] paths = classpath.split(\"[\\\\ ,:;]\");\n \n-                    } catch (IOException e) {\n-                        // Bad jar, ignore\n-                        continue;\n+            for (int i = 0; i < paths.length; i++) {\n+                if (paths.length > 0) {\n+                    File path = null;\n+\n+                    if (\"\".equals(base)) {\n+                        path = new File(paths[i]);\n+                    } else {\n+                        path = new File(base, paths[i]);\n+                    }\n+\n+                    if (path.exists()) {\n+                        if (!path.isDirectory()) {\n+                            try {\n+                                JarFile jar = new JarFile(path);\n+                                pathList.add(paths[i]);\n+\n+                                Manifest manifest = jar.getManifest();\n+                                Attributes classPathAttributes = manifest.getMainAttributes();\n+                                String manifestClassPath = classPathAttributes.getValue(\"Class-Path\");\n+\n+                                if (manifestClassPath != null)\n+                                    expandClassPath(pathList, paths[i], manifestClassPath);\n+\n+                            } catch (IOException e) {\n+                                // Bad jar, ignore\n+                                continue;\n+                            }\n+                        } else {\n+                            pathList.add(paths[i]);\n+                        }\n                     }\n-                } else {\n-                    pathList.add(paths[i]);\n                 }\n             }\n         }",
                "raw_url": "https://github.com/apache/groovy/raw/8ea532994756c2178365a8aab62f70e4dee87eba/src/main/groovy/lang/GroovyClassLoader.java",
                "sha": "41c29ed1a78aee88d5067d2890930d832aa131ba",
                "status": "modified"
            }
        ],
        "message": "GROOVY-452's NPE fixed, and restored the expansion of Class-Path, so that even a mal-formed path be parsed. When Chris adds warning capabilities to the compiler, we'll be able to warn the user that he uses a jar with a malformed manifest file.\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@1151 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/615048528f0d502892ff4470386e3513dda65fe1",
        "repo": "groovy",
        "unit_tests": [
            "GroovyClassLoaderTest.java"
        ]
    },
    "groovy_9b1497a": {
        "bug_id": "groovy_9b1497a",
        "commit": "https://github.com/apache/groovy/commit/9b1497ae86b951dae07e4b6285dc7814a5848494",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/groovy/blob/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/groovy/lang/MissingClassException.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/MissingClassException.java?ref=9b1497ae86b951dae07e4b6285dc7814a5848494",
                "deletions": 0,
                "filename": "src/main/groovy/lang/MissingClassException.java",
                "patch": "@@ -46,6 +46,7 @@\n package groovy.lang;\n \n import org.codehaus.groovy.ast.ASTNode;\n+import org.codehaus.groovy.ast.Type;\n \n /**\n  * An exception occurred if a dynamic method dispatch fails with an unknown class.\n@@ -64,6 +65,10 @@ public MissingClassException(String type, ASTNode node, String message) {\n         super(\"No such class: \" + type + \" \" + message, node);\n         this.type = type;\n     }\n+    \n+    public MissingClassException(Type type, String message){\n+        super(\"No such class: \" + type.getName() + \" \" + message);\n+    }\n \n     /**\n      * ",
                "raw_url": "https://github.com/apache/groovy/raw/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/groovy/lang/MissingClassException.java",
                "sha": "f9d0d661844674aa653cc92a2221ab21161d65bd",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/groovy/blob/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/org/codehaus/groovy/ast/ClassNode.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/ast/ClassNode.java?ref=9b1497ae86b951dae07e4b6285dc7814a5848494",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/ast/ClassNode.java",
                "patch": "@@ -630,8 +630,11 @@ protected Parameter createParameter(Class parameterType, int idx) {\n         return new Parameter(Type.makeType(parameterType), \"param\" + idx);\n     }\n \n-\n     public Type resolveClassName(Type type) {\n+        return resolveClassName(type,null);\n+    }\n+    \n+    public Type resolveClassName(Type type, String message) {\n         Type answer = null;\n         if (type != null) {\n             if (getType().equals(type) || getNameWithoutPackage().equals(type.getName())) {\n@@ -650,6 +653,7 @@ public Type resolveClassName(Type type) {\n                 answer = tryResolveClassAndInnerClass(Type.makeType(replacedPointType));\n             }\n         }\n+        if (answer==null && message!=null) throw new MissingClassException(type,message);\n         return answer;\n     }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/org/codehaus/groovy/ast/ClassNode.java",
                "sha": "715e71688e151348b5c3282c110f95425f28343c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java?ref=9b1497ae86b951dae07e4b6285dc7814a5848494",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java",
                "patch": "@@ -1699,7 +1699,7 @@ public void visitConstructorCallExpression(ConstructorCallExpression call) {\n \n         // lets check that the type exists\n         Type type = call.getType();\n-        type = classNode.resolveClassName(type);\n+        type = classNode.resolveClassName(type, \"\");\n         call.setType(type);\n         \n         visitClassExpression(new ClassExpression(type));",
                "raw_url": "https://github.com/apache/groovy/raw/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java",
                "sha": "e4b8a29982286e1bd6f282240e3b66d35f8e62f5",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/control/CompilationUnit.java?ref=9b1497ae86b951dae07e4b6285dc7814a5848494",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "patch": "@@ -54,7 +54,6 @@\n package org.codehaus.groovy.control;\n \n import java.io.File;\n-import java.io.FileNotFoundException;\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n@@ -853,6 +852,8 @@ public void applyToPrimaryClassNodes(LoopBodyForPrimaryClassNodeOperations body)\n                 }\n             } catch (CompilationFailedException e) {\n                 // fall thorugh, getErrorREporter().failIfErrors() will triger\n+            } catch (NullPointerException npe){\n+                throw npe;\n             } catch (Exception e) {\n                 failures = true;\n //                String msg = e.getMessage();",
                "raw_url": "https://github.com/apache/groovy/raw/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "sha": "280b0365f57341a9e9739cb6726f46938f11a4d9",
                "status": "modified"
            }
        ],
        "message": "avoids npe for missing classes and improves error reporting\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@2868 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/c0e40e8e1fe8751652b9e9d5cfbaecd1a7030bce",
        "repo": "groovy",
        "unit_tests": [
            "CompilationUnitTest.java"
        ]
    },
    "groovy_c13994e": {
        "bug_id": "groovy_c13994e",
        "commit": "https://github.com/apache/groovy/commit/c13994ea07956717a1f3c8b2def273896c5430c4",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/c13994ea07956717a1f3c8b2def273896c5430c4/src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java?ref=c13994ea07956717a1f3c8b2def273896c5430c4",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java",
                "patch": "@@ -51,7 +51,7 @@ public void visitClass(ClassNode node) {\n         currentClass = node;\n         \n         checkImplementsAndExtends(node);\n-        if (!getSourceUnit().getErrorCollector().hasErrors()) {\n+        if (source!=null && !source.getErrorCollector().hasErrors()) {\n             checkClassForOverwritingFinal(node);\n             checkMethodsForOverwritingFinal(node);\n             checkNoAbstractMethodsNonabstractClass(node);",
                "raw_url": "https://github.com/apache/groovy/raw/c13994ea07956717a1f3c8b2def273896c5430c4/src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java",
                "sha": "4af1af5eb654206d1ac6a9507bb52948172ffda4",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/c13994ea07956717a1f3c8b2def273896c5430c4/src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/control/CompilationUnit.java?ref=c13994ea07956717a1f3c8b2def273896c5430c4",
                "deletions": 3,
                "filename": "src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "patch": "@@ -295,8 +295,7 @@ public void addSources(File[] files) {\n     public SourceUnit addSource(File file) {\n         return addSource(new SourceUnit(file, configuration, classLoader, getErrorCollector()));\n     }\n-\n-\n+    \n     /**\n      * Adds a source file to the unit.\n      */\n@@ -357,7 +356,9 @@ public void remove() {\n \n     /**\n      * Adds a ClassNode directly to the unit (ie. without source).\n-     * Used primarily for testing support.\n+     * WARNING: the source is needed for error reporting, using\n+     *          this method without setting a SourceUnit will cause\n+     *          NullPinterExceptions\n      */\n     public void addClassNode(ClassNode node) {\n         ModuleNode module = new ModuleNode(this.ast);",
                "raw_url": "https://github.com/apache/groovy/raw/c13994ea07956717a1f3c8b2def273896c5430c4/src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "sha": "a770c0a9ce69455bacc82c5d23a5fee15856cd99",
                "status": "modified"
            }
        ],
        "message": "warning comment for adding ClassNodes without SourceUnit added and test for SourceUnit in ClassCompletionVerifyer added to avoid NPEs in cases without faliures\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@3729 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/8976032fce3bff693f72047a9db2a1e0b9c64321",
        "repo": "groovy",
        "unit_tests": [
            "CompilationUnitTest.java"
        ]
    },
    "groovy_ceccc4c": {
        "bug_id": "groovy_ceccc4c",
        "commit": "https://github.com/apache/groovy/commit/ceccc4cee84d80fe390b01fa7aee8d4f4d53d954",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/groovy/blob/ceccc4cee84d80fe390b01fa7aee8d4f4d53d954/src/main/org/codehaus/groovy/control/CompilerConfiguration.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/control/CompilerConfiguration.java?ref=ceccc4cee84d80fe390b01fa7aee8d4f4d53d954",
                "deletions": 3,
                "filename": "src/main/org/codehaus/groovy/control/CompilerConfiguration.java",
                "patch": "@@ -171,11 +171,21 @@ public CompilerConfiguration() {\n         //\n         // Try for better defaults, ignore errors.\n \n+        String encoding = null;\n         try {\n-            setSourceEncoding(System.getProperty(\"file.encoding\", \"US-ASCII\"));\n-        }\n-        catch (Exception e) {\n+            //\n+            // Source file encoding\n+            encoding = System.getProperty(\"groovy.source.encoding\");\n+        } catch (Exception e) {\n+            //\n+            // Try for better defaults, ignore errors.\n+            try {\n+                encoding = System.getProperty(\"file.encoding\", \"US-ASCII\");\n+            } catch (Exception ee) {\n+            }\n         }\n+        setSourceEncoding(encoding);\n+\n         try {\n             setOutput(new PrintWriter(System.err));\n         }\n@@ -376,6 +386,7 @@ public String getSourceEncoding() {\n      * Sets the encoding to be used when reading source files.\n      */\n     public void setSourceEncoding(String encoding) {\n+        if (encoding == null) encoding = \"US-ASCII\";\n         this.sourceEncoding = encoding;\n     }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/ceccc4cee84d80fe390b01fa7aee8d4f4d53d954/src/main/org/codehaus/groovy/control/CompilerConfiguration.java",
                "sha": "f7650143cfc805979264dbeb1c017d803cd7ccc4",
                "status": "modified"
            }
        ],
        "message": "patch for GROOVY-1946 applied (a modification was needed, because in the suggested patch null as encoding was used sometimes, which results in NPEs later, the default encoding is now used if encoding is null)\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@6643 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/12929de7afabc3b6b02fcb0970f6372a0235b5b8",
        "repo": "groovy",
        "unit_tests": [
            "CompilerConfigurationTest.java"
        ]
    },
    "groovy_d21d71d": {
        "bug_id": "groovy_d21d71d",
        "commit": "https://github.com/apache/groovy/commit/d21d71d898ec3d3b77521d48f339038ba7e7ce69",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/groovy/blob/d21d71d898ec3d3b77521d48f339038ba7e7ce69/src/main/org/codehaus/groovy/runtime/Invoker.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/Invoker.java?ref=d21d71d898ec3d3b77521d48f339038ba7e7ce69",
                "deletions": 2,
                "filename": "src/main/org/codehaus/groovy/runtime/Invoker.java",
                "patch": "@@ -445,8 +445,9 @@ public String toTypeString(Object[] arguments) {\n \t\t}\n \t    StringBuffer argBuf = new StringBuffer();\n \t    for (int i = 0; i < arguments.length; i++) {\n-\t    \tif (i>0)argBuf.append(\", \");\n-\t\t\targBuf.append(arguments[i].getClass().getName());\n+\t    \tif (i>0)\n+                argBuf.append(\", \");\n+\t\t\targBuf.append(arguments[i] != null ? arguments[i].getClass().getName() : \"null\");\n \t\t}\n \t    return argBuf.toString();\n \t}",
                "raw_url": "https://github.com/apache/groovy/raw/d21d71d898ec3d3b77521d48f339038ba7e7ce69/src/main/org/codehaus/groovy/runtime/Invoker.java",
                "sha": "c5dfbe936390fc4dafce218f59343ab765552796",
                "status": "modified"
            }
        ],
        "message": "Fixed a potential NPE (GROOVY-561)\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@1256 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/87b8129c1ed56c2f57072f8c9de0420c84435ee6",
        "repo": "groovy",
        "unit_tests": [
            "InvokerTest.java"
        ]
    },
    "groovy_ec89363": {
        "bug_id": "groovy_ec89363",
        "commit": "https://github.com/apache/groovy/commit/ec89363470d0aa3bba5afee627eba261dc78a91d",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/ec89363470d0aa3bba5afee627eba261dc78a91d/src/main/org/codehaus/groovy/ast/ClassNode.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/ast/ClassNode.java?ref=ec89363470d0aa3bba5afee627eba261dc78a91d",
                "deletions": 2,
                "filename": "src/main/org/codehaus/groovy/ast/ClassNode.java",
                "patch": "@@ -119,11 +119,13 @@ protected ClassNode redirect(){\n     }\n     \n     /**\n-     * Sets this instance as proxy for the given ClassNode\n+     * Sets this instance as proxy for the given ClassNode. \n+     * @param cn the class to redirect to. If set to null the redirect will be removed\n      */\n     public void setRedirect(ClassNode cn) {\n         if (isPrimaryNode) throw new GroovyBugError(\"tried to set a redirect for a primary ClassNode (\"+getName()+\"->\"+cn.getName()+\").\");\n-        redirect = cn.redirect();        \n+        if (cn!=null) cn = cn.redirect();\n+        redirect = cn;\n     }\n     \n     /**",
                "raw_url": "https://github.com/apache/groovy/raw/ec89363470d0aa3bba5afee627eba261dc78a91d/src/main/org/codehaus/groovy/ast/ClassNode.java",
                "sha": "c5224a9df45a8f7194f170a717e558ee386951c1",
                "status": "modified"
            }
        ],
        "message": "avoid NPE when setting redirect\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@3685 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/3d0ae5fb032021f51733b14691ba3ea92f919c5f",
        "repo": "groovy",
        "unit_tests": [
            "ClassNodeTest.java"
        ]
    },
    "groovy_f233b54": {
        "bug_id": "groovy_f233b54",
        "commit": "https://github.com/apache/groovy/commit/f233b543f3f887b37888fc5157e650ce27181dc2",
        "file": [
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/groovy/blob/f233b543f3f887b37888fc5157e650ce27181dc2/src/main/org/codehaus/groovy/ant/Groovyc.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/ant/Groovyc.java?ref=f233b543f3f887b37888fc5157e650ce27181dc2",
                "deletions": 8,
                "filename": "src/main/org/codehaus/groovy/ant/Groovyc.java",
                "patch": "@@ -115,6 +115,8 @@\n     private boolean jointCompilation;\n \n     private List<File> temporaryFiles = new ArrayList(2);\n+    private File stubDir;\n+    private boolean keepStubs;\n \n \n     /**\n@@ -667,7 +669,7 @@ protected void compile() {\n                                 || (key.contains(\"encoding\"))\n                                 || (key.contains(\"source\"))\n                                 || (key.contains(\"target\"))\n-                                || (key.contains(\"verbose\"))) {\n+                                || (key.contains(\"verbose\"))) { // TODO remove extra verbose?\n                             jointOptions.add(\"-J\" + key + \"=\" + value);\n                         } else {\n                             log(\"The option \" + key + \" cannot be set on the contained <javac> element. The option will be ignored\", Project.MSG_WARN);\n@@ -859,12 +861,18 @@ protected void compile() {\n     }\n \n     protected CompilationUnit makeCompileUnit() {\n-        if (configuration.getJointCompilationOptions() != null) {\n-            if (!configuration.getJointCompilationOptions().containsKey(\"stubDir\")) {\n+        Map<String, Object> options = configuration.getJointCompilationOptions();\n+        if (options != null) {\n+            if (keepStubs) {\n+                options.put(\"keepStubs\", Boolean.TRUE);\n+            }\n+            if (stubDir != null) {\n+                options.put(\"stubDir\", stubDir);\n+            } else {\n                 try {\n                     File tempStubDir = FileSystemCompiler.createTempDir();\n                     temporaryFiles.add(tempStubDir);\n-                    configuration.getJointCompilationOptions().put(\"stubDir\", tempStubDir);\n+                    options.put(\"stubDir\", tempStubDir);\n                 } catch (IOException ioe) {\n                     throw new BuildException(ioe);\n                 }\n@@ -911,14 +919,15 @@ protected GroovyClassLoader buildClassLoaderFor() {\n \n     /**\n      * Set the stub directory into which the Java source stub\n-     * files should be generated. The directory should exist \n-     * will not be deleted automatically.\n+     * files should be generated. The directory need not exist\n+     * and will not be deleted automatically - though its contents\n+     * will be cleared unless 'keepStubs' is true. Ignored when forked.\n      *\n      * @param stubDir the stub directory\n      */\n     public void setStubdir(File stubDir) {\n         jointCompilation = true;\n-        configuration.getJointCompilationOptions().put(\"stubDir\", stubDir);\n+        this.stubDir = stubDir;\n     }\n \n     /**\n@@ -928,6 +937,25 @@ public void setStubdir(File stubDir) {\n      * @return the stub directory\n      */\n     public File getStubdir() {\n-        return (File) configuration.getJointCompilationOptions().get(\"stubDir\");\n+        return stubDir;\n+    }\n+\n+    /**\n+     * Set the keepStubs flag. Defaults to false. Set to true for debugging.\n+     * Ignored when forked.\n+     *\n+     * @param keepStubs should stubs be retained\n+     */\n+    public void setKeepStubs(boolean keepStubs) {\n+        this.keepStubs = keepStubs;\n+    }\n+\n+    /**\n+     * Gets the keepStubs flag.\n+     *\n+     * @return the keepStubs flag\n+     */\n+    public boolean getKeepStubs() {\n+        return keepStubs;\n     }\n }",
                "raw_url": "https://github.com/apache/groovy/raw/f233b543f3f887b37888fc5157e650ce27181dc2/src/main/org/codehaus/groovy/ant/Groovyc.java",
                "sha": "f40b55aeeb4934c53a923a333eb0ce711468b39d",
                "status": "modified"
            }
        ],
        "message": "GROOVY-4203: Groovyc Ant task can get a NPE when trying to set stubDir plus doesn't expose keepStubs flag\n\n\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@20009 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/0ebac128a8aa7cad9a20df4616eac00e07f2cceb",
        "repo": "groovy",
        "unit_tests": [
            "GroovycTest.java"
        ]
    },
    "groovy_f5ff44a": {
        "bug_id": "groovy_f5ff44a",
        "commit": "https://github.com/apache/groovy/commit/f5ff44a4a528ca61d9293abf05a9802e63a5b60c",
        "file": [
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/groovy/blob/f5ff44a4a528ca61d9293abf05a9802e63a5b60c/src/main/groovy/lang/GroovyClassLoader.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/GroovyClassLoader.java?ref=f5ff44a4a528ca61d9293abf05a9802e63a5b60c",
                "deletions": 22,
                "filename": "src/main/groovy/lang/GroovyClassLoader.java",
                "patch": "@@ -538,47 +538,48 @@ protected synchronized Class loadClass(final String name, boolean resolve) throw\n             }\n         }\n         \n-        boolean loadGroovyFile = false;\n         Class cls = null;\n         ClassNotFoundException last = null;\n         try {\n             cls = super.loadClass(name, resolve);\n     \n+            boolean recompile = false;\n             if (getTimeStamp(cls) < Long.MAX_VALUE) {\n-                Class[] inters = cls.getInterfaces();\n-                boolean isGroovyObject = false;\n+                Class[] inters = cls.getInterfaces();                \n                 for (int i = 0; i < inters.length; i++) {\n                     if (inters[i].getName().equals(GroovyObject.class.getName())) {\n-                        loadGroovyFile = true;\n+                        recompile=true;\n                         break;\n                     }\n-                }\n+                }                \n             }\n+            if (!recompile) return cls;\n         } catch (ClassNotFoundException cnfe) {\n             last = cnfe; \n-            loadGroovyFile=true;\n         }\n         \n-        if (loadGroovyFile) {\n-            try {\n-                File source = (File) AccessController.doPrivileged(new PrivilegedAction() {\n-                    public Object run() {\n-                        return getSourceFile(name);\n-                    }\n-                });\n-                if (source != null) {\n-                    if ((cls!=null && isSourceNewer(source, cls)) || (cls==null)) {\n-                      cls = parseClass(source);\n-                    }\n+        // try groovy file\n+        try {\n+            File source = (File) AccessController.doPrivileged(new PrivilegedAction() {\n+                public Object run() {\n+                    return getSourceFile(name);\n                 }\n-            } catch (Exception e) {\n-                synchronized (cache) {\n-                    cache.put(name, NOT_RESOLVED.class);\n+            });\n+            if (source != null) {\n+                if ((cls!=null && isSourceNewer(source, cls)) || (cls==null)) {\n+                    cls = parseClass(source);\n                 }\n-                throw new ClassNotFoundException(\"Failed to parse groovy file: \" + name, e);\n             }\n+        } catch (Exception e) {\n+            synchronized (cache) {\n+                cache.put(name, NOT_RESOLVED.class);\n+            }\n+            throw new ClassNotFoundException(\"Failed to parse groovy file: \" + name, e);\n         }\n-        if (cls==null) throw last;\n+        if (cls==null) {\n+            if (last==null) throw new AssertionError(true);\n+            throw last;            \n+        }        \n         return cls;\n     }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/f5ff44a4a528ca61d9293abf05a9802e63a5b60c/src/main/groovy/lang/GroovyClassLoader.java",
                "sha": "4d9dd26e6f30ad3b1f5f17cb23c336e555ea1cb1",
                "status": "modified"
            }
        ],
        "message": "another change to avoid NPEs during handling dependent scripts\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@2332 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/5835d302ae2e9934160274d016bec495898d0c5d",
        "repo": "groovy",
        "unit_tests": [
            "GroovyClassLoaderTest.java"
        ]
    }
}