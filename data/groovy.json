{
    "groovy_0de685c": {
        "bug_id": "groovy_0de685c",
        "commit": "https://github.com/apache/groovy/commit/0de685ca192e9e842b28ec565711103a6a16c5ec",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/groovy/blob/0de685ca192e9e842b28ec565711103a6a16c5ec/src/main/org/codehaus/groovy/ant/Groovyc.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/ant/Groovyc.java?ref=0de685ca192e9e842b28ec565711103a6a16c5ec",
                "deletions": 4,
                "filename": "src/main/org/codehaus/groovy/ant/Groovyc.java",
                "patch": "@@ -77,7 +77,7 @@\n  * @version $Revision$ \n  */\n public class Groovyc extends MatchingTask {\n-    \n+\n     private FileSystemCompiler compiler = new FileSystemCompiler();\n     private Path src;\n     private File destDir;\n@@ -151,7 +151,7 @@ public void setDestdir(File destDir) {\n     public void setVerbose(boolean verbose) {\n         compiler.setVerbose(verbose);\n     }\n-    \n+\n     /**\n      * Gets the destination directory into which the java source files\n      * should be compiled.\n@@ -365,7 +365,8 @@ protected void checkParameters() throws BuildException {\n     protected void compile() {\n \n         if (compileList.length > 0) {\n-            log(\"Compiling \"\n+            log(\n+                \"Compiling \"\n                     + compileList.length\n                     + \" source file\"\n                     + (compileList.length == 1 ? \"\" : \"s\")\n@@ -379,7 +380,10 @@ protected void compile() {\n             }\n \n             try {\n-                compiler.setClasspath(getClasspath().toString());\n+                String classpath = getClasspath().toString();\n+                if (classpath != null) {\n+                    compiler.setClasspath(classpath);\n+                }\n                 compiler.setOutputDir(destDir);\n                 compiler.compile(compileList);\n             }",
                "raw_url": "https://github.com/apache/groovy/raw/0de685ca192e9e842b28ec565711103a6a16c5ec/src/main/org/codehaus/groovy/ant/Groovyc.java",
                "sha": "ad7d930b2c85db5c1ba2591847e5daa8461167ee",
                "status": "modified"
            }
        ],
        "message": "Committed Sam's patch to avoid NPEs when not specifying classpath\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@289 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/e52182853d6eba9eb662038359c3ede678197db5",
        "repo": "groovy",
        "unit_tests": [
            "GroovycTest.java"
        ]
    },
    "groovy_21c1e4b": {
        "bug_id": "groovy_21c1e4b",
        "commit": "https://github.com/apache/groovy/commit/21c1e4b041c95bac940e8eabbc8849a320fa12ef",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/21c1e4b041c95bac940e8eabbc8849a320fa12ef/src/main/org/codehaus/groovy/ant/Groovydoc.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/ant/Groovydoc.java?ref=21c1e4b041c95bac940e8eabbc8849a320fa12ef",
                "deletions": 2,
                "filename": "src/main/org/codehaus/groovy/ant/Groovydoc.java",
                "patch": "@@ -42,8 +42,8 @@\n     private File destDir;\n     private List<String> packageNames;\n     private List<String> excludePackageNames;\n-    private String windowTitle;\n-    private String footer;\n+    private String windowTitle = \"Groovy Documentation\";\n+    private String footer = \"Groovy Documentation\";\n     private boolean privateScope;\n     private boolean useDefaultExcludes;\n     private boolean includeNoSourcePackages;",
                "raw_url": "https://github.com/apache/groovy/raw/21c1e4b041c95bac940e8eabbc8849a320fa12ef/src/main/org/codehaus/groovy/ant/Groovydoc.java",
                "sha": "45c5abdd323bd2739a605c9fc4268f190ee9d09f",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/groovy/blob/21c1e4b041c95bac940e8eabbc8849a320fa12ef/src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java?ref=21c1e4b041c95bac940e8eabbc8849a320fa12ef",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java",
                "patch": "@@ -184,6 +184,9 @@ private void processFile(String filename, File srcFile) throws IOException {\n         }\n     }\n \n+    // TODO non-strict XML parsing (CyberNeko, TagSoup)\n+    // and extract first sentence for summary\n+    // and full text for package page\n     private void processHtmlPackage(String src, SimpleGroovyPackageDoc packageDoc) {\n         try {\n             XmlSlurper parser = new XmlSlurper();",
                "raw_url": "https://github.com/apache/groovy/raw/21c1e4b041c95bac940e8eabbc8849a320fa12ef/src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java",
                "sha": "798fa7ee649f49174388c9da5c3200a5f436a10b",
                "status": "modified"
            }
        ],
        "message": "groovydoc (avoid NPE)\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@14977 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/7349983c11b26a84120659aea6f1d6cf553ffc99",
        "repo": "groovy",
        "unit_tests": [
            "GroovyRootDocBuilderTest.java"
        ]
    },
    "groovy_3481fd2": {
        "bug_id": "groovy_3481fd2",
        "commit": "https://github.com/apache/groovy/commit/3481fd2478bb74fad111534db3570475c4b7983d",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/3481fd2478bb74fad111534db3570475c4b7983d/src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java?ref=3481fd2478bb74fad111534db3570475c4b7983d",
                "deletions": 2,
                "filename": "src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java",
                "patch": "@@ -151,8 +151,10 @@ public void buildTree(List<String> filenames) throws IOException, RecognitionExc\n         setOverview();\n \n         List<File> sourcepathFiles = new ArrayList<File>();\n-        for (String sourcepath : sourcepaths) {\n-            sourcepathFiles.add(new File(sourcepath).getAbsoluteFile());\n+        if (sourcepaths != null) {\n+            for (String sourcepath : sourcepaths) {\n+                sourcepathFiles.add(new File(sourcepath).getAbsoluteFile());\n+            }\n         }\n \n         for (String filename : filenames) {",
                "raw_url": "https://github.com/apache/groovy/raw/3481fd2478bb74fad111534db3570475c4b7983d/src/main/org/codehaus/groovy/tools/groovydoc/GroovyRootDocBuilder.java",
                "sha": "2a18142a8b6b2ad64c97e936e43374f81c44383d",
                "status": "modified"
            }
        ],
        "message": "NPE fix\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@19628 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/7d4e5c7cbf9f6734185e545d53323e1646637383",
        "repo": "groovy",
        "unit_tests": [
            "GroovyRootDocBuilderTest.java"
        ]
    },
    "groovy_428f5f7": {
        "bug_id": "groovy_428f5f7",
        "commit": "https://github.com/apache/groovy/commit/428f5f769a031b1e3483270d0e34611e941c9b54",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/428f5f769a031b1e3483270d0e34611e941c9b54/src/main/groovy/lang/GroovyClassLoader.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/GroovyClassLoader.java?ref=428f5f769a031b1e3483270d0e34611e941c9b54",
                "deletions": 2,
                "filename": "src/main/groovy/lang/GroovyClassLoader.java",
                "patch": "@@ -339,8 +339,10 @@ public ProtectionDomain run() {\n             }\n         });\n         PermissionCollection myPerms = myDomain.getPermissions();\n-        for (Enumeration<Permission> elements = myPerms.elements(); elements.hasMoreElements();) {\n-            perms.add(elements.nextElement());\n+        if(myPerms != null) {\n+            for (Enumeration<Permission> elements = myPerms.elements(); elements.hasMoreElements();) {\n+                perms.add(elements.nextElement());\n+            }\n         }\n         perms.setReadOnly();\n         return perms;",
                "raw_url": "https://github.com/apache/groovy/raw/428f5f769a031b1e3483270d0e34611e941c9b54/src/main/groovy/lang/GroovyClassLoader.java",
                "sha": "7ed98e0829a565103959b46a836addf4dd0f8eaf",
                "status": "modified"
            }
        ],
        "message": "GROOVY-3542\nAdded a null check for permissions returned by ProtectionDomain.getPermissions() call to avoid reported NPE.\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@16478 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/8bf7910c1b3b890b79dcd679a003663f1ac51671",
        "repo": "groovy",
        "unit_tests": [
            "GroovyClassLoaderTest.java"
        ]
    },
    "groovy_44f25ae": {
        "bug_id": "groovy_44f25ae",
        "commit": "https://github.com/apache/groovy/commit/44f25aec40eb2eef9c69ad051492667f9debb2c2",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/44f25aec40eb2eef9c69ad051492667f9debb2c2/src/main/org/codehaus/groovy/runtime/InvokerHelper.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/InvokerHelper.java?ref=44f25aec40eb2eef9c69ad051492667f9debb2c2",
                "deletions": 4,
                "filename": "src/main/org/codehaus/groovy/runtime/InvokerHelper.java",
                "patch": "@@ -314,16 +314,14 @@ public static Matcher findRegex(Object left, Object right) {\n      * @param right regular expression to compare the string to\n      */\n     public static boolean matchRegex(Object left, Object right) {\n+    \tif(left == null || right == null) return false;\n         Pattern pattern;\n         if (right instanceof Pattern) {\n             pattern = (Pattern) right;\n         } else {\n             pattern = Pattern.compile(toString(right));\n         }\n-        String stringToCompare = null;\n-        if(left != null) {\n-        \tstringToCompare = toString(left);\n-        }\n+        String stringToCompare = toString(left);\n         Matcher matcher = pattern.matcher(stringToCompare);\n         RegexSupport.setLastMatcher(matcher);\n         return matcher.matches();",
                "raw_url": "https://github.com/apache/groovy/raw/44f25aec40eb2eef9c69ad051492667f9debb2c2/src/main/org/codehaus/groovy/runtime/InvokerHelper.java",
                "sha": "8c0b1e5709fac7787729df4452dfdd0252bbe7ee",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/groovy/blob/44f25aec40eb2eef9c69ad051492667f9debb2c2/src/test/groovy/bugs/Groovy3718Bug.groovy",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/bugs/Groovy3718Bug.groovy?ref=44f25aec40eb2eef9c69ad051492667f9debb2c2",
                "deletions": 10,
                "filename": "src/test/groovy/bugs/Groovy3718Bug.groovy",
                "patch": "@@ -2,15 +2,12 @@ package groovy.bugs\n \r\n class Groovy3718Bug extends GroovyTestCase {\r\n     void testPatternMatchOfNull() {\r\n-    \tdef doNullMatch1 = { ->\r\n-    \t\tnull ==~ /[^0-9]+/\r\n-\t    }\r\n-\t\r\n-\t    def doNullMatch2 = { ->\r\n-\t        null ==~ /[0-9]+/\r\n-\t    }\r\n-    \t\r\n-    \tshouldFail NullPointerException, doNullMatch1\r\n-        shouldFail NullPointerException, doNullMatch2\r\n+\t\tassertFalse null ==~ /[^0-9]+/\r\n+\t\t\r\n+\t\tassertFalse null ==~ /[0-9]+/\r\n+\r\n+\t\tassertFalse \"test\" ==~ null\r\n+\t\t\r\n+\t\tassertFalse null ==~ null\r\n     }\r\n }\r",
                "raw_url": "https://github.com/apache/groovy/raw/44f25aec40eb2eef9c69ad051492667f9debb2c2/src/test/groovy/bugs/Groovy3718Bug.groovy",
                "sha": "e831bb3bcadfa2dd9e8c75350d8a5ec96ace8225",
                "status": "modified"
            }
        ],
        "message": "GROOVY-3718\nAfter the discussion on the dev list, it has been decided to return false for null values/patterns instead of NPEs that result from Java.\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@17540 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/9eccac2d4cfb40f97ab9f2a807118e0d2b8b3521",
        "repo": "groovy",
        "unit_tests": [
            "InvokerHelperTest.java"
        ]
    },
    "groovy_486da8d": {
        "bug_id": "groovy_486da8d",
        "commit": "https://github.com/apache/groovy/commit/486da8d7b41e72315cdeaddf2d06e859336eab4f",
        "file": [
            {
                "additions": 92,
                "blob_url": "https://github.com/apache/groovy/blob/486da8d7b41e72315cdeaddf2d06e859336eab4f/src/main/groovy/servlet/GroovyServlet.java",
                "changes": 177,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/servlet/GroovyServlet.java?ref=486da8d7b41e72315cdeaddf2d06e859336eab4f",
                "deletions": 85,
                "filename": "src/main/groovy/servlet/GroovyServlet.java",
                "patch": "@@ -92,93 +92,100 @@\n  */\n public class GroovyServlet extends AbstractHttpServlet {\n \n-  /**\n-   * The script engine executing the Groovy scripts for this servlet\n-   */\n-  private static GroovyScriptEngine gse;\n-\n-  /**\n-   * Initialize the GroovyServlet.\n-   *\n-   * @throws ServletException\n-   *  if this method encountered difficulties\n-   */\n-  public void init(ServletConfig config) throws ServletException {\n-    super.init(config);\n-\n-    // Set up the scripting engine\n-    gse = new GroovyScriptEngine(this);\n-\n-    servletContext.log(\"Groovy servlet initialized\");\n-  }\n-\n-  /**\n-   * Handle web requests to the GroovyServlet\n-   */\n-  public void service(HttpServletRequest request,\n-      HttpServletResponse response) throws IOException {\n-\n-    // Get the script path from the request - include aware (GROOVY-815)\n-    final String scriptUri = getScriptUri(request);\n-\n-    // Set it to HTML by default\n-    response.setContentType(\"text/html\");\n-\n-    // Set up the script context\n-    final Binding binding = new ServletBinding(request, response, servletContext);\n-\n-    // Run the script\n-    try {\n-      Closure closure = new Closure(gse) {\n-\n-        public Object call() {\n-          try {\n-            return ((GroovyScriptEngine) getDelegate()).run(scriptUri, binding);\n-          }\n-          catch (ResourceException e) {\n-            throw new RuntimeException(e);\n-          }\n-          catch (ScriptException e) {\n-            throw new RuntimeException(e);\n-          }\n-        }\n-\n-      };\n-      GroovyCategorySupport.use(ServletCategory.class, closure);\n-      // Set reponse code 200 and flush buffers\n-      response.setStatus(HttpServletResponse.SC_OK);\n-      response.flushBuffer();\n-      // log(\"Flushed response buffer.\");\n+    /**\n+     * The script engine executing the Groovy scripts for this servlet\n+     */\n+    private static GroovyScriptEngine gse;\n+\n+    /**\n+     * Initialize the GroovyServlet.\n+     *\n+     * @throws ServletException\n+     *  if this method encountered difficulties\n+     */\n+    public void init(ServletConfig config) throws ServletException {\n+        super.init(config);\n+\n+        // Set up the scripting engine\n+        gse = new GroovyScriptEngine(this);\n+\n+        servletContext.log(\"Groovy servlet initialized on \" + gse + \".\");\n     }\n-    catch (RuntimeException re) {\n-      StringBuffer error = new StringBuffer(\"GroovyServlet Error: \");\n-      error.append(\" script: '\");\n-      error.append(scriptUri);\n-      error.append(\"': \");\n-      Throwable e = re.getCause();\n-      if (e instanceof ResourceException) {\n-        error.append(\" Script not found, sending 404.\");\n-        servletContext.log(error.toString());\n-        System.out.println(error.toString());\n-        response.sendError(HttpServletResponse.SC_NOT_FOUND);\n-      }\n-      else {\n-        // write the script errors (if any) to the servlet context's log\n-        if (re.getMessage() != null)\n-          error.append(re.getMessage());\n-\n-        if (e != null) {\n-          servletContext.log(\"An error occurred processing the request\", e);\n-        }\n-        else {\n-          servletContext.log(\"An error occurred processing the request\", re);\n+\n+    /**\n+     * Handle web requests to the GroovyServlet\n+     */\n+    public void service(HttpServletRequest request, HttpServletResponse response) throws IOException {\n+\n+        // Get the script path from the request - include aware (GROOVY-815)\n+        final String scriptUri = getScriptUri(request);\n+\n+        // Set it to HTML by default\n+        response.setContentType(\"text/html\");\n+\n+        // Set up the script context\n+        final Binding binding = new ServletBinding(request, response, servletContext);\n+\n+        // Run the script\n+        try {\n+            Closure closure = new Closure(gse) {\n+\n+                public Object call() {\n+                    try {\n+                        return ((GroovyScriptEngine) getDelegate()).run(scriptUri, binding);\n+                    } catch (ResourceException e) {\n+                        throw new RuntimeException(e);\n+                    } catch (ScriptException e) {\n+                        throw new RuntimeException(e);\n+                    }\n+                }\n+\n+            };\n+            GroovyCategorySupport.use(ServletCategory.class, closure);\n+            /*\n+             * Set reponse code 200.\n+             */\n+            response.setStatus(HttpServletResponse.SC_OK);\n+        } catch (RuntimeException runtimeException) {\n+            StringBuffer error = new StringBuffer(\"GroovyServlet Error: \");\n+            error.append(\" script: '\");\n+            error.append(scriptUri);\n+            error.append(\"': \");\n+            Throwable e = runtimeException.getCause();\n+            /*\n+             * Null cause?!\n+             */\n+            if (e == null) {\n+                error.append(\" Script processing failed.\");\n+                servletContext.log(error.toString());\n+                System.err.println(error.toString());\n+                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n+                return;\n+            }\n+            /*\n+             * Resource not found.\n+             */\n+            if (e instanceof ResourceException) {\n+                error.append(\" Script not found, sending 404.\");\n+                servletContext.log(error.toString());\n+                System.err.println(error.toString());\n+                response.sendError(HttpServletResponse.SC_NOT_FOUND);\n+                return;\n+            }\n+            /*\n+             * Other internal error. Perhaps syntax?! \n+             */\n+            servletContext.log(\"An error occurred processing the request\", e);\n+            servletContext.log(error.toString());\n+            System.err.println(error.toString());\n+            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.toString());\n+        } finally {\n+            /*\n+             * Finally, flush the response buffer.\n+             */\n+            response.flushBuffer();\n+            // servletContext.log(\"Flushed response buffer.\");\n         }\n-        servletContext.log(error.toString());\n-        System.out.println(error.toString());\n-        response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.toString());\n-      }\n     }\n \n-  }\n-\n }",
                "raw_url": "https://github.com/apache/groovy/raw/486da8d7b41e72315cdeaddf2d06e859336eab4f/src/main/groovy/servlet/GroovyServlet.java",
                "sha": "4fa7c611b640067473994d65ef09e558bfc74139",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE in catch block and re-formatted the entire file to the Groovy code style. Sorry for the not nice diff.\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@2276 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/b31711d5851cbe4d9076ffa7738e9411d24f9308",
        "repo": "groovy",
        "unit_tests": [
            "GroovyServletTest.java"
        ]
    },
    "groovy_4d3a020": {
        "bug_id": "groovy_4d3a020",
        "commit": "https://github.com/apache/groovy/commit/4d3a020b5cd8b9549498716e48f45c1b79ab8e99",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/4d3a020b5cd8b9549498716e48f45c1b79ab8e99/src/main/org/codehaus/groovy/runtime/MetaClassHelper.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/MetaClassHelper.java?ref=4d3a020b5cd8b9549498716e48f45c1b79ab8e99",
                "deletions": 2,
                "filename": "src/main/org/codehaus/groovy/runtime/MetaClassHelper.java",
                "patch": "@@ -278,12 +278,12 @@ private static int getPrimitiveDistance(Class from, Class to) {\n     }\n     \n     private static int getMaximumInterfaceDistance(Class c, Class interfaceClass) {\n-        if (c==interfaceClass) return 0;\n+        if (c==null || c==interfaceClass) return 0;\n         Class[] interfaces = c.getInterfaces();\n         int max = 0;\n         for (int i=0; i<interfaces.length; i++) {\n             int sub = 0;\n-            if (interfaces[i].isAssignableFrom(c)) {\n+            if (interfaces[i].isAssignableFrom(interfaceClass)) {\n                 sub = 1+ getMaximumInterfaceDistance(interfaces[i],interfaceClass);\n             }\n             max = Math.max(max,sub);",
                "raw_url": "https://github.com/apache/groovy/raw/4d3a020b5cd8b9549498716e48f45c1b79ab8e99/src/main/org/codehaus/groovy/runtime/MetaClassHelper.java",
                "sha": "aba2584a4fcfbe67ef659b2ebf911399e37cfcbc",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE bug in getMaximumInterfaceDistance\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@5082 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/3cd7a5079e43b61dbf1ff74e8021bd28889cc707",
        "repo": "groovy",
        "unit_tests": [
            "MetaClassHelperTest.java"
        ]
    },
    "groovy_596853f": {
        "bug_id": "groovy_596853f",
        "commit": "https://github.com/apache/groovy/commit/596853fe9b54cc1f5b144b214fe24d40ab006258",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/groovy/blob/596853fe9b54cc1f5b144b214fe24d40ab006258/src/main/groovy/groovy/lang/GroovyRuntimeException.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/groovy/lang/GroovyRuntimeException.java?ref=596853fe9b54cc1f5b144b214fe24d40ab006258",
                "deletions": 1,
                "filename": "src/main/groovy/groovy/lang/GroovyRuntimeException.java",
                "patch": "@@ -60,7 +60,12 @@ public ModuleNode getModule() {\n     }\n \n     public String getMessage() {\n-        return getMessageWithoutLocationText() + getLocationText();\n+        String messageWithoutLocationText = getMessageWithoutLocationText();\n+        String locationText = getLocationText();\n+        if (messageWithoutLocationText == null && locationText.isEmpty()) {\n+            return null; // not \"null\"\n+        }\n+        return messageWithoutLocationText + locationText;\n     }\n \n     public ASTNode getNode() {",
                "raw_url": "https://github.com/apache/groovy/raw/596853fe9b54cc1f5b144b214fe24d40ab006258/src/main/groovy/groovy/lang/GroovyRuntimeException.java",
                "sha": "af62bb6e3ae9bf6fce00cd9d1892f927fdeabeed",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/groovy/blob/596853fe9b54cc1f5b144b214fe24d40ab006258/src/main/groovy/groovy/lang/MissingPropertyException.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/groovy/lang/MissingPropertyException.java?ref=596853fe9b54cc1f5b144b214fe24d40ab006258",
                "deletions": 0,
                "filename": "src/main/groovy/groovy/lang/MissingPropertyException.java",
                "patch": "@@ -58,6 +58,9 @@ public MissingPropertyException(String message, String property, Class type) {\n     }\n \n     public String getMessageWithoutLocationText() {\n+        if (property == null || type == null) {\n+            return super.getMessageWithoutLocationText();\n+        }\n         final Throwable cause = getCause();\n         if (cause == null) {\n             if (super.getMessageWithoutLocationText() != null) {",
                "raw_url": "https://github.com/apache/groovy/raw/596853fe9b54cc1f5b144b214fe24d40ab006258/src/main/groovy/groovy/lang/MissingPropertyException.java",
                "sha": "4d2739352ebd1653c6599c481d800eccc73d04ea",
                "status": "modified"
            },
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/groovy/blob/596853fe9b54cc1f5b144b214fe24d40ab006258/src/test/groovy/lang/MissingPropertyExceptionTest.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/lang/MissingPropertyExceptionTest.java?ref=596853fe9b54cc1f5b144b214fe24d40ab006258",
                "deletions": 0,
                "filename": "src/test/groovy/lang/MissingPropertyExceptionTest.java",
                "patch": "@@ -0,0 +1,34 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package groovy.lang;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Provides unit tests for the <code>MissingPropertyException</code> class.\n+ */\n+public class MissingPropertyExceptionTest extends TestCase {\n+\n+    public void testNullMessage() {\n+        Throwable mpe = new MissingPropertyException(null);\n+        assertNull(mpe.getMessage());\n+        assertEquals(\"groovy.lang.MissingPropertyException\", mpe.toString());\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/groovy/raw/596853fe9b54cc1f5b144b214fe24d40ab006258/src/test/groovy/lang/MissingPropertyExceptionTest.java",
                "sha": "3b6c746c62c4f98bd9fc1538f11538032ebaec42",
                "status": "added"
            }
        ],
        "message": "GROOVY-8936: NPE occurred when `null` message passed into `MissingPropertyException`(closes #844)",
        "parent": "https://github.com/apache/groovy/commit/f667007269f95d212a835f7e38aff8bb8d0eec35",
        "repo": "groovy",
        "unit_tests": [
            "MissingPropertyExceptionTest.java"
        ]
    },
    "groovy_7d4e5c7": {
        "bug_id": "groovy_7d4e5c7",
        "commit": "https://github.com/apache/groovy/commit/7d4e5c7cbf9f6734185e545d53323e1646637383",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/groovy/blob/7d4e5c7cbf9f6734185e545d53323e1646637383/src/main/org/codehaus/groovy/ant/Groovy.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/ant/Groovy.java?ref=7d4e5c7cbf9f6734185e545d53323e1646637383",
                "deletions": 3,
                "filename": "src/main/org/codehaus/groovy/ant/Groovy.java",
                "patch": "@@ -475,9 +475,11 @@ private void createClasspathParts() {\n         }\n         String groovyHome = null;\n         final String[] strings = getSysProperties().getVariables();\n-        for (String prop : strings) {\n-            if (prop.startsWith(\"-Dgroovy.home=\")) {\n-                groovyHome = prop.substring(\"-Dgroovy.home=\".length());\n+        if (strings != null) {\n+            for (String prop : strings) {\n+                if (prop.startsWith(\"-Dgroovy.home=\")) {\n+                    groovyHome = prop.substring(\"-Dgroovy.home=\".length());\n+                }\n             }\n         }\n         if (groovyHome == null) {",
                "raw_url": "https://github.com/apache/groovy/raw/7d4e5c7cbf9f6734185e545d53323e1646637383/src/main/org/codehaus/groovy/ant/Groovy.java",
                "sha": "b26fd04f264e343163528dc4657d431670cab253",
                "status": "modified"
            }
        ],
        "message": "GROOVY-4108: Possible NPE in Groovy Ant task\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@19626 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/1dafad4016852ebad8b75d9ed5ab74096b7ca2f1",
        "repo": "groovy",
        "unit_tests": [
            "GroovyTest.java"
        ]
    },
    "groovy_860577a": {
        "bug_id": "groovy_860577a",
        "commit": "https://github.com/apache/groovy/commit/860577a6e59e6c086ded4b23f9120b5d55430d35",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/groovy/blob/860577a6e59e6c086ded4b23f9120b5d55430d35/src/main/org/codehaus/groovy/runtime/InvokerHelper.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/InvokerHelper.java?ref=860577a6e59e6c086ded4b23f9120b5d55430d35",
                "deletions": 12,
                "filename": "src/main/org/codehaus/groovy/runtime/InvokerHelper.java",
                "patch": "@@ -117,9 +117,9 @@ public static String inspect(Object self) {\n     }\n \n     public static Object getAttribute(Object object, String attribute) {\n-//        if (object == null) {\n-//            throw new NullPointerException(\"Cannot get attribute: \" + attribute + \" on null object\");\n-//        }\n+        if (object == null) {\n+            object = NullObject.getNullObject();\n+        }\n \n         if (object instanceof Class) {\n             return metaRegistry.getMetaClass((Class) object).getAttribute(object, attribute);\n@@ -131,9 +131,9 @@ public static Object getAttribute(Object object, String attribute) {\n     }\n \n     public static void setAttribute(Object object, String attribute, Object newValue) {\n-//        if (object == null) {\n-//            throw new GroovyRuntimeException(\"Cannot set attribute on null object\");\n-//        }\n+        if (object == null) {\n+            object = NullObject.getNullObject();\n+        }\n \n         if (object instanceof Class) {\n             metaRegistry.getMetaClass((Class) object).setAttribute(object, attribute, newValue);\n@@ -145,9 +145,10 @@ public static void setAttribute(Object object, String attribute, Object newValue\n     }\n \n     public static Object getProperty(Object object, String property) {\n-//        if (object == null) {\n-//            throw new NullPointerException(\"Cannot get property: \" + property + \" on null object\");\n-//        }\n+        if (object == null) {\n+            object = NullObject.getNullObject();\n+        }\n+        \n         if (object instanceof GroovyObject) {\n             GroovyObject pogo = (GroovyObject) object;\n             return pogo.getProperty(property);\n@@ -167,9 +168,10 @@ public static Object getPropertySafe(Object object, String property) {\n     }\n \n     public static void setProperty(Object object, String property, Object newValue) {\n-//        if (object == null) {\n-//            throw new GroovyRuntimeException(\"Cannot set property on null object\");\n-//        }\n+        if (object == null) {\n+            object = NullObject.getNullObject();\n+        }\n+\n         if (object instanceof GroovyObject) {\n             GroovyObject pogo = (GroovyObject) object;\n             pogo.setProperty(property, newValue);",
                "raw_url": "https://github.com/apache/groovy/raw/860577a6e59e6c086ded4b23f9120b5d55430d35/src/main/org/codehaus/groovy/runtime/InvokerHelper.java",
                "sha": "da4683847532f44852a3ae51851a425aa3292293",
                "status": "modified"
            }
        ],
        "message": "GROOVY-3510: NPE in MetaClassRegistryImpl\nBring back NullObject to properly handle the null cases from within InvokerHelper\n(merge rev 16276)\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@16277 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/c43959198ef3886419f1df6b9b9e83fd9420f9b1",
        "repo": "groovy",
        "unit_tests": [
            "InvokerHelperTest.java"
        ]
    },
    "groovy_8ea5329": {
        "bug_id": "groovy_8ea5329",
        "commit": "https://github.com/apache/groovy/commit/8ea532994756c2178365a8aab62f70e4dee87eba",
        "file": [
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/groovy/blob/8ea532994756c2178365a8aab62f70e4dee87eba/src/main/groovy/lang/GroovyClassLoader.java",
                "changes": 67,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/GroovyClassLoader.java?ref=8ea532994756c2178365a8aab62f70e4dee87eba",
                "deletions": 31,
                "filename": "src/main/groovy/lang/GroovyClassLoader.java",
                "patch": "@@ -360,41 +360,46 @@ protected Class findGroovyClass(String name) throws ClassNotFoundException {\n      * @param classpath\n      */\n     private void expandClassPath(List pathList, String base, String classpath) {\n-        String[] paths = classpath.split(File.pathSeparator);\n-        for (int i = 0; i < paths.length; i++) {\n-            File path = null;\n \n-            if (\"\".equals(base)) {\n-                path = new File(paths[i]);\n-            } else {\n-                path = new File(base, paths[i]);\n-            }\n+        // checking against null prevents an NPE when recursevely expanding the classpath\n+        // in case the classpath is malformed\n+        if (classpath != null) {\n \n-            if (path.exists()) {\n-                if (!path.isDirectory()) {\n-                    try {\n-                        JarFile jar = new JarFile(path);\n-                        pathList.add(paths[i]);\n-                        // Get the manifest classpath entry from the jar\n-                        // SPG This code is currently unreliable - the Class-Path attribute\n-                        // returns entries which are delimited in unpredictable ways.\n-                        // See for example openejb-loader jar.  Commenting until we\n-                        // decide how we want to handle these cases (if at all).\n-                        /*\n-                        Manifest manifest = jar.getManifest();\n-                        Attributes classPathAttributes = manifest.getMainAttributes();\n-                        String manifestClassPath = classPathAttributes.getValue(\"Class-Path\");\n-\n-                        if (manifestClassPath != null)\n-                            expandClassPath(pathList, paths[i], manifestClassPath);\n-                        */\n+            // Sun's convention for the class-path attribute is to seperate each entry with spaces\n+            // but some libraries don't respect that convention and add commas, colons, semi-colons\n+            String[] paths = classpath.split(\"[\\\\ ,:;]\");\n \n-                    } catch (IOException e) {\n-                        // Bad jar, ignore\n-                        continue;\n+            for (int i = 0; i < paths.length; i++) {\n+                if (paths.length > 0) {\n+                    File path = null;\n+\n+                    if (\"\".equals(base)) {\n+                        path = new File(paths[i]);\n+                    } else {\n+                        path = new File(base, paths[i]);\n+                    }\n+\n+                    if (path.exists()) {\n+                        if (!path.isDirectory()) {\n+                            try {\n+                                JarFile jar = new JarFile(path);\n+                                pathList.add(paths[i]);\n+\n+                                Manifest manifest = jar.getManifest();\n+                                Attributes classPathAttributes = manifest.getMainAttributes();\n+                                String manifestClassPath = classPathAttributes.getValue(\"Class-Path\");\n+\n+                                if (manifestClassPath != null)\n+                                    expandClassPath(pathList, paths[i], manifestClassPath);\n+\n+                            } catch (IOException e) {\n+                                // Bad jar, ignore\n+                                continue;\n+                            }\n+                        } else {\n+                            pathList.add(paths[i]);\n+                        }\n                     }\n-                } else {\n-                    pathList.add(paths[i]);\n                 }\n             }\n         }",
                "raw_url": "https://github.com/apache/groovy/raw/8ea532994756c2178365a8aab62f70e4dee87eba/src/main/groovy/lang/GroovyClassLoader.java",
                "sha": "41c29ed1a78aee88d5067d2890930d832aa131ba",
                "status": "modified"
            }
        ],
        "message": "GROOVY-452's NPE fixed, and restored the expansion of Class-Path, so that even a mal-formed path be parsed. When Chris adds warning capabilities to the compiler, we'll be able to warn the user that he uses a jar with a malformed manifest file.\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@1151 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/615048528f0d502892ff4470386e3513dda65fe1",
        "repo": "groovy",
        "unit_tests": [
            "GroovyClassLoaderTest.java"
        ]
    },
    "groovy_903df1c": {
        "bug_id": "groovy_903df1c",
        "commit": "https://github.com/apache/groovy/commit/903df1c6920db792b4249a2f9e3e130fef8bcc20",
        "file": [
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/groovy/lang/MetaClassImpl.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/MetaClassImpl.java?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 8,
                "filename": "src/main/groovy/lang/MetaClassImpl.java",
                "patch": "@@ -1238,19 +1238,37 @@ else if (MetaClassHelper.isGenericSetMethod(method) && genericSetMethod == null)\n            list.add(method);\n        }\n        else {\n-           if (forceOverwrite) {\n-               removeMatchingMethod(list,method);\n-               list.add(method);\n-           } else if (!MetaClassHelper.containsMatchingMethod(list, method)) {\n+           addMethodToList(list,method,forceOverwrite);\n+       }\n+   }\n+   \n+   private void addMethodToList(List list, MetaMethod method, boolean forceOverwrite) {\n+       MetaMethod match = removeMatchingMethod(list,method);\n+       if (forceOverwrite) {\n+           list.add(method);\n+       } else if (match==null) {\n+           list.add(method);\n+       } else {\n+           Class methodC = method.getDeclaringClass();\n+           Class matchC = match.getDeclaringClass();\n+           if (methodC == matchC){\n+               if (method instanceof NewInstanceMetaMethod) {\n+                   list.add(method);\n+               } else {\n+                   list.add(match);\n+               }               \n+           } else if (MetaClassHelper.isAssignableFrom(methodC,matchC)){\n+               list.add(match);\n+           } else {\n                list.add(method);\n            }\n        }\n    }\n-\n+   \n    /**\n     * remove a method of the same matching prototype was found in the list\n     */\n-   private void removeMatchingMethod(List list, MetaMethod method) {\n+   private MetaMethod removeMatchingMethod(List list, MetaMethod method) {\n        for (Iterator iter = list.iterator(); iter.hasNext();) {\n            MetaMethod aMethod = (MetaMethod) iter.next();\n            Class[] params1 = aMethod.getParameterTypes();\n@@ -1265,11 +1283,11 @@ private void removeMatchingMethod(List list, MetaMethod method) {\n                }\n                if (matches) {\n                    iter.remove();\n-                   return;\n+                   return (MetaMethod) aMethod;\n                }\n            }\n        }\n-       return;\n+       return null;\n    }\n \n ",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/groovy/lang/MetaClassImpl.java",
                "sha": "9436948a0c6528236b90ad5f2efa9aa8d6c1b90f",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/groovy/util/CharsetToolkit.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/util/CharsetToolkit.java?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 14,
                "filename": "src/main/groovy/util/CharsetToolkit.java",
                "patch": "@@ -81,22 +81,26 @@\n      */\n     public CharsetToolkit(File file) throws IOException {\n         this.file = file;\n-        InputStream input = new FileInputStream(file);\n-        byte[] bytes = new byte[4096];\n-        int bytesRead = input.read(bytes);\n-        if (bytesRead == -1) {\n-            this.buffer = new byte[0];\n-        }\n-        else if (bytesRead < 4096) {\n-            byte[] bytesToGuess = new byte[bytesRead];\n-            System.arraycopy(bytes, 0, bytesToGuess, 0, bytesRead);\n-            this.buffer = bytesToGuess;\n-        }\n-        else {\n-            this.buffer = bytes;\n-        }\n         this.defaultCharset = getDefaultSystemCharset();\n         this.charset = null;\n+        InputStream input = new FileInputStream(file);\n+        try {\n+            byte[] bytes = new byte[4096];\n+            int bytesRead = input.read(bytes);\n+            if (bytesRead == -1) {\n+                this.buffer = new byte[0];\n+            }\n+            else if (bytesRead < 4096) {\n+                byte[] bytesToGuess = new byte[bytesRead];\n+                System.arraycopy(bytes, 0, bytesToGuess, 0, bytesRead);\n+                this.buffer = bytesToGuess;\n+            }\n+            else {\n+                this.buffer = bytes;\n+            }\n+        } finally {\n+            try {input.close();} catch (IOException e){}\n+        }\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/groovy/util/CharsetToolkit.java",
                "sha": "f01902677747ba95e0fe1caf7435d4a80d2c8054",
                "status": "modified"
            },
            {
                "additions": 115,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/ConversionHandler.java",
                "changes": 115,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/ConversionHandler.java?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/runtime/ConversionHandler.java",
                "patch": "@@ -0,0 +1,115 @@\n+package org.codehaus.groovy.runtime;\r\n+\r\n+import java.lang.reflect.InvocationHandler;\r\n+import java.lang.reflect.InvocationTargetException;\r\n+import java.lang.reflect.Method;\r\n+\r\n+/**\r\n+ * This class is a general adapter to map a call to an Java interface \r\n+ * to a given delegate.\r\n+ * <p>\r\n+ * @author Ben Yu\r\n+ * @author <a href=\"mailto:blackdrag@gmx.org\">Jochen Theodorou</a>\r\n+ */\r\n+public abstract class ConversionHandler implements InvocationHandler {\r\n+    private Object delegate;\r\n+    \r\n+    /**\r\n+     * Creates a ConversionHandler with an deleagte.\r\n+     * @param delegate the delegate\r\n+     * @throws IllegalArgumentException if the given delegate is null\r\n+     */\r\n+    public ConversionHandler(Object delegate) {\r\n+        if (delegate==null) throw new IllegalArgumentException(\"delegate must not be null\");\r\n+        this.delegate = delegate;\r\n+    }\r\n+    \r\n+    /**\r\n+     * gets the delegate.\r\n+     * @return the delegate\r\n+     */\r\n+    public Object getDelegate(){\r\n+        return delegate;\r\n+    }\r\n+    \r\n+    /**\r\n+     * This method is a default implementation for the invoke method\r\n+     * given in Invocationhandler. Any call to an method with an\r\n+     * declaring class that is not Object is redirected to invokeCustom. \r\n+     * Methods like tostring, equals and hashcode are called on the class\r\n+     * itself instead of the delegate. It is better to overwrite the \r\n+     * invokeCustom method where the Object related methods are filtered out.\r\n+     * \r\n+     * @see #invokeCustom(Object, Method, Object[])\r\n+     * @see InvocationHandler#invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])\r\n+     * \r\n+     * @param proxy the proxy\r\n+     * @param method the method\r\n+     * @param args the arguments\r\n+     * @return the result of the invocation by method or delegate\r\n+     * @throws Throwable any exception caused by the delegate or the method\r\n+     */\r\n+    public Object invoke(Object proxy, Method method, Object[] args)\r\n+    throws Throwable {\r\n+        if(!isObjectMethod(method)){\r\n+            return invokeCustom(proxy,method,args);\r\n+        }\r\n+        try {\r\n+            return method.invoke(this, args);\r\n+        } catch (InvocationTargetException ite) {\r\n+            throw ite.getTargetException();\r\n+        }  \r\n+    }\r\n+    \r\n+    /**\r\n+     * This method is called for all Methods not defined on Object. \r\n+     * The delegate should be called here.\r\n+     * \r\n+     * @param proxy the proxy\r\n+     * @param method the method\r\n+     * @param args the arguments\r\n+     * @return the result of the invocation of the delegate\r\n+     * @throws Throwable any exception causes by the delegate\r\n+     * @see #invoke(Object, Method, Object[])\r\n+     * @see InvocationHandler#invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])\r\n+     * \r\n+     */\r\n+    public abstract Object invokeCustom(Object proxy, Method method, Object[] args) throws Throwable;\r\n+    \r\n+    /**\r\n+     * Indicates whether some other object is \"equal to\" this one.\r\n+     * The delegate is used if the class of the parameter and the\r\n+     * current class are equal. In other cases the method will return \r\n+     * false. The exact class is here used, if inheritance is needed,\r\n+     * this method must be overwritten. \r\n+     *        \r\n+     * @see java.lang.Object#equals(java.lang.Object)\r\n+     */\r\n+    public boolean equals(Object obj) {\r\n+        if (obj!=null && obj.getClass()==this.getClass()){\r\n+            return (((ConversionHandler)obj).getDelegate()).equals(obj);\r\n+        } else {\r\n+            return false;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns a hash code value for the delegate. \r\n+     * @see java.lang.Object#hashCode()\r\n+     */\r\n+    public int hashCode() {\r\n+        return delegate.hashCode();\r\n+    }\r\n+    \r\n+    /**\r\n+     * Returns a String version of the delegate.\r\n+     * @see java.lang.Object#toString()\r\n+     */\r\n+    public String toString() {\r\n+        return delegate.toString();\r\n+    }\r\n+    \r\n+    private static boolean isObjectMethod(Method mtd){\r\n+        return mtd.getDeclaringClass().equals(Object.class);\r\n+    }\r\n+}\r",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/ConversionHandler.java",
                "sha": "4112d5a2a2120337080a25294c031a813f0766c6",
                "status": "added"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/ConvertedClosure.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/ConvertedClosure.java?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/runtime/ConvertedClosure.java",
                "patch": "@@ -0,0 +1,28 @@\n+package org.codehaus.groovy.runtime;\r\n+\r\n+import java.lang.reflect.Method;\r\n+import groovy.lang.Closure;\r\n+\r\n+/**\r\n+ * This class is a general adapter to adapt a closure to any Java interface.\r\n+ * <p>\r\n+ * @author Ben Yu\r\n+ * @author <a href=\"mailto:blackdrag@gmx.org\">Jochen Theodorou</a>\r\n+ * Jul 27, 2006 3:50:51 PM\r\n+ */\r\n+public class ConvertedClosure extends ConversionHandler {\r\n+    \r\n+    /**\r\n+     * to create a ConvertedClosure object.\r\n+     * @param closure the closure object.\r\n+     */\r\n+    protected ConvertedClosure(Closure closure) {\r\n+        super(closure);\r\n+    }\r\n+    \r\n+    public Object invokeCustom(Object proxy, Method method, Object[] args)\r\n+    throws Throwable {\r\n+        return ((Closure) getDelegate()).call(args);\r\n+    }\r\n+}\r\n+\r",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/ConvertedClosure.java",
                "sha": "5a4ce583cce9ca46aeac4575891e3e2b4031f8f3",
                "status": "added"
            },
            {
                "additions": 41,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/ConvertedMap.java",
                "changes": 41,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/ConvertedMap.java?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/runtime/ConvertedMap.java",
                "patch": "@@ -0,0 +1,41 @@\n+/*\r\n+ * ConvertedClosure.java created on 12.10.2006\r\n+ *\r\n+ * To change this generated comment go to \r\n+ * Window>Preferences>Java>Code Generation>Code and Comments\r\n+ */\r\n+package org.codehaus.groovy.runtime;\r\n+\r\n+import java.lang.reflect.Method;\r\n+import java.util.Map;\r\n+\r\n+import groovy.lang.Closure;\r\n+\r\n+/**\r\n+ * This class is a general adapter to adapt a map of closures to\r\n+ * any Java interface.\r\n+ * <p>\r\n+ * @author <a href=\"mailto:blackdrag@gmx.org\">Jochen Theodorou</a>\r\n+ */\r\n+public class ConvertedMap extends ConversionHandler {\r\n+        \r\n+    /**\r\n+     * to create a ConvertedMap object.\r\n+     * @param map the map of closres\r\n+     */\r\n+    protected ConvertedMap(Map closures) {\r\n+        super(closures);\r\n+    }\r\n+    \r\n+    public Object invokeCustom(Object proxy, Method method, Object[] args)\r\n+    throws Throwable {\r\n+        Map m = (Map) getDelegate();\r\n+        Closure cl = (Closure) m.get(method.getName());\r\n+        return cl.call(args);\r\n+    }\r\n+    \r\n+    public String toString() {\r\n+        return DefaultGroovyMethods.toString((Map) getDelegate());\r\n+    }\r\n+}\r\n+\r",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/ConvertedMap.java",
                "sha": "90590d67a2ad57796ab70605e6617681a9506e28",
                "status": "added"
            },
            {
                "additions": 43,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 3,
                "filename": "src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java",
                "patch": "@@ -43,6 +43,7 @@\n import java.lang.reflect.Array;\n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n+import java.lang.reflect.Proxy;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.net.MalformedURLException;\n@@ -551,6 +552,26 @@ public static Collection unique(Collection self) {\n         self.addAll(answer);\n         return self;\n     }\n+    \n+    /**\n+     * A convenience method for making a collection unique using a closure as a comparator\n+     * (by Michael Baehr)\n+     * @param self    a Collection\n+     * @param closure a Closure used as a comparator\n+     * @return self   without any duplicates\n+     */\n+    public static Collection unique(Collection self, Closure closure) {\n+        if (self instanceof Set)\n+            return self;\n+        // use a comparator of one item or two\n+        int params = closure.getMaximumNumberOfParameters();\n+        if (params == 1) {\n+            unique(self, new OrderBy(closure));\n+        } else {\n+            unique(self, new ClosureComparator(closure));\n+        }\n+        return self;\n+    }\n \n     /**\n      * Remove all duplicates from a given Collection.\n@@ -2554,6 +2575,26 @@ public static Object asType(Collection col, Class clazz) {\n         }\n         return asType((Object) col, clazz);\n     }\n+    \n+    public static Object asType(Closure cl, Class clazz) {\n+        if (clazz.isInterface() && !(clazz.isInstance(cl))) {\n+            return Proxy.newProxyInstance(\n+                    clazz.getClassLoader(),\n+                    new Class[]{clazz},\n+                    new ConvertedClosure(cl));\n+        }\n+        return asType((Object) cl, clazz);\n+    }\n+    \n+    public static Object asType(Map map, Class clazz) {\n+        if (clazz.isInterface() && !(clazz.isInstance(map))) {\n+            return Proxy.newProxyInstance(\n+                    clazz.getClassLoader(),\n+                    new Class[]{clazz},\n+                    new ConvertedMap(map));\n+        }\n+        return asType((Object) map, clazz);\n+    }\n \n     /**\n      * Reverses the list\n@@ -2618,12 +2659,11 @@ public static List multiply(Collection self, Number factor) {\n     /**\n      * Create a List composed of the intersection of both collections\n      *\n-     * @param left  a List\n+     * @param left  a Collection\n      * @param right a Collection\n      * @return a List as an intersection of both collections\n      */\n-    public static List intersect(List left, Collection right) {\n-\n+    public static List intersect(Collection left, Collection right) {\n         if (left.size() == 0)\n             return new ArrayList();\n ",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java",
                "sha": "851b07c766fba0fb616d76de6a95b6e580a38d22",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/MetaClassHelper.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/MetaClassHelper.java?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/runtime/MetaClassHelper.java",
                "patch": "@@ -681,6 +681,7 @@ public static Object doMethodInvoke(Object object, MetaMethod method, Object[] a\n     }\n     \n     protected static String getClassName(Object object) {\n+        if (object==null) return null;\n         return (object instanceof Class) ? ((Class)object).getName() : object.getClass().getName();\n     }\n     \n@@ -709,7 +710,7 @@ public static Closure getMethodPointer(Object object, String methodName) {\n         throw new IllegalArgumentException(\"Must be a Method or Constructor\");\n     }\n    \n-    protected static boolean isAssignableFrom(Class classToTransformTo, Class classToTransformFrom) {\n+    public static boolean isAssignableFrom(Class classToTransformTo, Class classToTransformFrom) {\n         if (classToTransformFrom==null) return true;\n         classToTransformTo = autoboxType(classToTransformTo);\n         classToTransformFrom = autoboxType(classToTransformFrom);",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/MetaClassHelper.java",
                "sha": "a35611b481f702d21ed91deb8be1d9dc85b64847",
                "status": "modified"
            },
            {
                "additions": 143,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/typehandling/ClassDistance.java",
                "changes": 143,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/typehandling/ClassDistance.java?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/runtime/typehandling/ClassDistance.java",
                "patch": "@@ -0,0 +1,143 @@\n+/*\r\n+ * Class for calculating \"distances\" between classes. Such a distance\r\n+ * is not a real distance to something but should be seen as the order\r\n+ * classes and interfaces are choosen for method selection. The class\r\n+ * will keep a weak cache and recalculate the distances on demand. \r\n+ */\r\n+package org.codehaus.groovy.runtime.typehandling;\r\n+\r\n+import java.io.Serializable;\r\n+import java.math.BigDecimal;\r\n+import java.math.BigInteger;\r\n+import java.util.WeakHashMap;\r\n+\r\n+public class ClassDistance {\r\n+    private static WeakHashMap classDistances;\r\n+    \r\n+    private static class Entry {\r\n+        \r\n+    }\r\n+    \r\n+    private static class LinearEntry  extends Entry{\r\n+        Class[] entries;\r\n+        void concat(Class[] c,LinearEntry le){\r\n+            entries = new Class[c.length+le.entries.length];\r\n+            System.arraycopy(c,0,entries,0,c.length);\r\n+            System.arraycopy(le.entries,0,entries,c.length,le.entries.length);\r\n+        }\r\n+        void concat(Class c,LinearEntry le){\r\n+            entries = new Class[1+le.entries.length];\r\n+            entries[0] = c;\r\n+            System.arraycopy(le.entries,0,entries,1,le.entries.length);\r\n+        }\r\n+    }\r\n+    \r\n+    static {\r\n+        classDistances = new WeakHashMap();\r\n+        initialPopulate();\r\n+    }\r\n+    \r\n+    private static void initialPopulate() {\r\n+        // int, double, byte, float, BigInteger, BigDecimal, long, short\r\n+        // GString, char\r\n+        \r\n+        \r\n+        LinearEntry object = new LinearEntry();\r\n+        object.entries = new Class[]{Object.class};\r\n+        classDistances.put(Object.class,object);\r\n+        \r\n+        LinearEntry number = new LinearEntry();\r\n+        number.concat(new Class[]{Number.class,Serializable.class},object);\r\n+        classDistances.put(Number.class,number);\r\n+\r\n+        LinearEntry compareableNumber = new LinearEntry();\r\n+        compareableNumber.concat(Comparable.class,number);\r\n+        \r\n+        LinearEntry binteger = new LinearEntry();\r\n+        binteger.concat(new Class[]{BigInteger.class, BigDecimal.class}, compareableNumber);\r\n+        classDistances.put(BigInteger.class,object);\r\n+        \r\n+        LinearEntry bdec = new LinearEntry();\r\n+        binteger.concat(new Class[]{BigDecimal.class, BigInteger.class}, compareableNumber);\r\n+        classDistances.put(BigDecimal.class,object);\r\n+        \r\n+        \r\n+        \r\n+        // byte:\r\n+        LinearEntry start = new LinearEntry();\r\n+        start.entries =  new Class[]{\r\n+                byte.class, Byte.class, short.class, Short.class,\r\n+                int.class, Integer.class, long.class, Long.class,\r\n+                BigInteger.class,\r\n+                float.class, Float.class,  double.class, Double.class, \r\n+                BigDecimal.class,\r\n+                Number.class,Object.class};\r\n+        classDistances.put(byte.class,start);\r\n+        \r\n+        // short:\r\n+        start = new LinearEntry();\r\n+        start.entries =  new Class[]{\r\n+                short.class, Short.class,\r\n+                int.class, Integer.class, long.class, Long.class,\r\n+                BigInteger.class,\r\n+                float.class, Float.class,  double.class, Double.class, \r\n+                BigDecimal.class,\r\n+                Number.class,Object.class};\r\n+        classDistances.put(short.class,start);\r\n+        \r\n+        // int:\r\n+        start = new LinearEntry();\r\n+        start.entries =  new Class[]{\r\n+                int.class, Integer.class, long.class, Long.class,\r\n+                BigInteger.class,\r\n+                float.class, Float.class,  double.class, Double.class, \r\n+                BigDecimal.class,\r\n+                Number.class,Object.class};\r\n+        classDistances.put(int.class,start);\r\n+        \r\n+        // long:\r\n+        start = new LinearEntry();\r\n+        start.entries =  new Class[]{\r\n+                long.class, Long.class,\r\n+                BigInteger.class,\r\n+                float.class, Float.class,  double.class, Double.class, \r\n+                BigDecimal.class,\r\n+                Number.class,Object.class};\r\n+        classDistances.put(long.class,start);\r\n+        \r\n+        // Biginteger:\r\n+        start = new LinearEntry();\r\n+        start.entries =  new Class[]{\r\n+                BigInteger.class,\r\n+                float.class, Float.class,  double.class, Double.class, \r\n+                BigDecimal.class,\r\n+                Number.class,Object.class};\r\n+        classDistances.put(long.class,start);\r\n+        \r\n+        // float:\r\n+        start = new LinearEntry();\r\n+        start.entries =  new Class[]{ \r\n+                byte.class, Byte.class, short.class, Short.class,\r\n+                int.class, Integer.class, long.class, Long.class,\r\n+                BigInteger.class,\r\n+                float.class, Float.class,  double.class, Double.class, \r\n+                BigDecimal.class,\r\n+                Number.class,Object.class};\r\n+        classDistances.put(float.class,start);\r\n+        \r\n+        // double:\r\n+        start = new LinearEntry();\r\n+        start.entries =  new Class[]{ \r\n+                double.class,\r\n+                Double.class, BigDecimal.class,\r\n+                Number.class,Object.class};\r\n+        classDistances.put(double.class,start);\r\n+\r\n+    }\r\n+    \r\n+    private synchronized static void popultate(Class clazz) {\r\n+        if (classDistances.get(clazz) != null) return;\r\n+        \r\n+    }\r\n+    \r\n+}\r",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/typehandling/ClassDistance.java",
                "sha": "da630581ac8b441d81a62eb44931ced19b7d3a0b",
                "status": "added"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java",
                "patch": "@@ -33,6 +33,7 @@\n public class DefaultTypeTransformation {\n     \n     protected static final Object[] EMPTY_ARGUMENTS = {};\n+    protected static final BigInteger ONE_NEG = new BigInteger(\"-1\");\n     \n     //  --------------------------------------------------------\n     //                  unboxing methods\n@@ -249,7 +250,14 @@ public static Object castToType(Object object, Class type) {\n             } else if (type == BigDecimal.class) {\n                 return new BigDecimal(n.toString());\n             } else if (type == BigInteger.class) {\n-                return new BigInteger(n.toString());\n+                if (object instanceof Float || object instanceof Double) {\n+                    BigDecimal bd = new BigDecimal(n.doubleValue());\n+                    return bd.toBigInteger();\n+                } else if (object instanceof BigDecimal) {\n+                    return ((BigDecimal) object).toBigInteger();\n+                } else {\n+                    return new BigInteger(n.toString());\n+                }\n             }\n         } else if (type.isPrimitive()) {\n             if (type == byte.class) {",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java",
                "sha": "6de40cc1294d422b05c43ee3cc802c237d241ac1",
                "status": "modified"
            },
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/groovy/BigDecimalOperationTest.groovy",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/BigDecimalOperationTest.groovy?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 0,
                "filename": "src/test/groovy/BigDecimalOperationTest.groovy",
                "patch": "@@ -86,4 +86,42 @@ class BigDecimalOperationTest extends GroovyTestCase {\n     void testBigDecimalCoerce() {\n         assert echoX(9.95, 1.0) == echoX(9.95, 1)\n     }\n+    \n+    void testAssign() {\n+        BigDecimal foo\n+        foo = (byte) 20\n+        assert foo.class == BigDecimal.class\n+        assert foo == 20\n+\n+        foo = (short) 20\n+        assert foo.class == BigDecimal.class\n+        assert foo == 20\n+\n+        foo = (int) 20\n+        assert foo.class == BigDecimal.class\n+        assert foo == 20\n+\n+        foo = (long) 20\n+        assert foo.class == BigDecimal.class\n+        assert foo == 20\n+\n+        foo = (float) 0.5f\n+        assert foo.class == BigDecimal.class\n+        assert foo == 0.5\n+\n+        foo = (double) 0.5d\n+        assert foo.class == BigDecimal.class\n+        assert foo == 0.5\n+        \n+        foo = 10G\n+        assert foo.class == BigDecimal.class\n+        assert foo == 10\n+        \n+        double d = 1000\n+        d *= d\n+        d *= d\n+        d *= d\n+        assert (long)d != d\n+\t\tassert (BigDecimal) d == d\n+    }\n }",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/groovy/BigDecimalOperationTest.groovy",
                "sha": "f448516e1c3fb91d1211560724bc80b01c4088b9",
                "status": "modified"
            },
            {
                "additions": 39,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/groovy/BigIntegerOperationTest.groovy",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/BigIntegerOperationTest.groovy?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 0,
                "filename": "src/test/groovy/BigIntegerOperationTest.groovy",
                "patch": "@@ -0,0 +1,39 @@\n+class BigIntegerOperationTest extends GroovyTestCase {\r\n+    void testAssign() {\r\n+        BigInteger foo\r\n+        foo = (byte) 20\r\n+        assert foo.class == BigInteger\r\n+        assert foo == 20\r\n+\r\n+        foo = (short) 20\r\n+        assert foo.class == BigInteger\r\n+        assert foo == 20\r\n+\r\n+        foo = (int) 20\r\n+        assert foo.class == BigInteger\r\n+        assert foo == 20\r\n+\r\n+        foo = (long) 20\r\n+        assert foo.class == BigInteger\r\n+        assert foo == 20\r\n+\r\n+        foo = (float) 0.5f\r\n+        assert foo.class == BigInteger\r\n+        assert foo == 0\r\n+\r\n+        foo = (double) 0.5d\r\n+        assert foo.class == BigInteger\r\n+        assert foo == 0\r\n+        \r\n+        foo = 10.5G\r\n+        assert foo.class == BigInteger\r\n+        assert foo == 10\r\n+        \r\n+        double d = 1000\r\n+        d *= d\r\n+        d *= d\r\n+        d *= d\r\n+        assert (long)d != d\r\n+\t\tassert (BigInteger) d == d\r\n+    }\r\n+}\r",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/groovy/BigIntegerOperationTest.groovy",
                "sha": "0205213a5fdee1028a9716f7d46d37d46b1bdb12",
                "status": "added"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/groovy/GroovyMethodsTest.groovy",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/GroovyMethodsTest.groovy?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 0,
                "filename": "src/test/groovy/GroovyMethodsTest.groovy",
                "patch": "@@ -306,6 +306,31 @@ class GroovyMethodsTest extends GroovyTestCase {\n         assert [3.5, 4.6] == result[BigDecimal]\n         assert 3 == result.size()\n     }\n+    \n+    def leftCol  = [\"2\"]\n+    def rightCol = [\"1\",\"2\",\"3\"]\n+\n+    void testList() {\n+      def lst  = [] as LinkedList\n+      doIt(lst)\n+    }\n+\n+    void testSet() {\n+      def set  = [] as HashSet \n+      doIt(set)\n+    }\n+                    \n+    void testVector() {\n+      def vctr  = [] as Vector\n+      doIt(vctr)\n+    }\n+\n+    void doIt(col) {\n+      col.clear();\n+      col.addAll(leftCol);\n+      // not really concerned about  correctness, rather that the method can be called, however..\n+      assert col.intersect(rightCol) == [\"2\"]\n+    }\n }\n \n class WackyHashCode {",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/groovy/GroovyMethodsTest.groovy",
                "sha": "5558c2c9d6cd2e2c552e6106d1f8b5ff139a7dd9",
                "status": "modified"
            },
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/groovy/UniqueTest.groovy",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/UniqueTest.groovy?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 0,
                "filename": "src/test/groovy/UniqueTest.groovy",
                "patch": "@@ -0,0 +1,31 @@\n+/** \r\n+ * @author Michael Baehr\r\n+ */\r\n+class UniqueTest extends GroovyTestCase {\r\n+    \r\n+\tvoid testUnique() {\r\n+\t\tdef list = [-1, 0, 1, 1, 0, -1]\r\n+    assert list.unique() == [-1, 0, 1]\r\n+\t}\r\n+\t\r\n+\tvoid testUniqueWithComparator() {\r\n+\t\tdef list = [-1, 0, 1, 1, 0, -1]\r\n+\t\tdef comparator = new ClosureComparator() {a,b -> Math.abs(a) <=> Math.abs(b)} \r\n+    assert list.unique(comparator) == [-1, 0]\r\n+\t}    \r\n+\t\r\n+\t// new functionality - see GROOVY-1236\r\n+\tvoid testUniqueWithTwoParameterClosure() {\r\n+\t\tdef list = [-1, 0, 1, 1, 0, -1]\r\n+\t\tdef closure = {a,b -> Math.abs(a) <=> Math.abs(b)} \r\n+    assert list.unique(closure) == [-1, 0]\r\n+\t}   \r\n+\r\n+\t// new functionality - see GROOVY-1236\t\r\n+\tvoid testUniqueWithOneParameterClosure() {\r\n+\t\tdef list = [-1, 0, 1, 1, 0, -1]\r\n+\t\tdef closure = {a -> Math.abs(a)} \r\n+    assert list.unique(closure) == [-1, 0]\r\n+\t}   \r\n+\t\t\r\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/groovy/UniqueTest.groovy",
                "sha": "ed7e0e4f8c3da8848421170871e39a8607473a8d",
                "status": "added"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/org/codehaus/groovy/runtime/InterfaceConversionTest.groovy",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/runtime/InterfaceConversionTest.groovy?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/runtime/InterfaceConversionTest.groovy",
                "patch": "@@ -0,0 +1,26 @@\n+class InterfaceConversionTest extends GroovyTestCase {\r\n+ \r\n+  void testClosureConversion(){\r\n+\tdef c1 = {Object[] args -> args?.length}\r\n+\tdef c2 = c1 as InterfaceConversionTestFoo\r\n+\tassert !(c1 instanceof InterfaceConversionTestFoo)\r\n+\tassert c2 instanceof InterfaceConversionTestFoo\r\n+\tassert c2.a() == null\r\n+\tassert c2.b(null) == 1\r\n+  }\r\n+  \r\n+  void testMapConversion() {  \r\n+\tdef m1 = [a:{1}, b:{2}]\r\n+\tdef m2 = m1 as InterfaceConversionTestFoo\r\n+\t\r\n+\tassert !(m1 instanceof InterfaceConversionTestFoo)\r\n+\tassert m2 instanceof InterfaceConversionTestFoo\r\n+\tassert m2.a() == 1\r\n+\tassert m2.b(null) == 2\r\n+  }\r\n+}\r\n+ \r\n+interface InterfaceConversionTestFoo {\r\n+    def a();\r\n+    def b(Integer i);\r\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/org/codehaus/groovy/runtime/InterfaceConversionTest.groovy",
                "sha": "fb803d1661017ea2b3d5323f2fbd8f1acd0d17ee",
                "status": "added"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/groovy/blob/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/org/codehaus/groovy/runtime/MetaClassHelperTest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/org/codehaus/groovy/runtime/MetaClassHelperTest.java?ref=903df1c6920db792b4249a2f9e3e130fef8bcc20",
                "deletions": 0,
                "filename": "src/test/org/codehaus/groovy/runtime/MetaClassHelperTest.java",
                "patch": "@@ -0,0 +1,10 @@\n+package org.codehaus.groovy.runtime;\r\n+\r\n+import junit.framework.TestCase;\r\n+\r\n+public class MetaClassHelperTest extends TestCase {\r\n+    public void testGetClassName() {\r\n+        // GROOVY-1262\r\n+        MetaClassHelper.getClassName(null); \r\n+    }\r\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/groovy/raw/903df1c6920db792b4249a2f9e3e130fef8bcc20/src/test/org/codehaus/groovy/runtime/MetaClassHelperTest.java",
                "sha": "202116f4efba90651f7ca37546b8d20821d84966",
                "status": "added"
            }
        ],
        "message": "patches for Groovy-748 (ensure files are closed), Groovy-1125 (intersect on Collection), Groovy-1141 (conversion from int to BigInteger), Groovy-1236 (unique on Collection), Groovy-1262 (NPE in MetaClassHelper), Groovy-1439 (use closure as for interface implementation), Groovy-1529 (use map of closures for interface implementation)\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@4112 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/5abd4ecd0cd98ce5c6b9278ba021f42f07e21788",
        "repo": "groovy",
        "unit_tests": [
            "MetaClassHelperTest.java"
        ]
    },
    "groovy_939c56e": {
        "bug_id": "groovy_939c56e",
        "commit": "https://github.com/apache/groovy/commit/939c56e25e88774d5996d57eeca8bf17d2fed40f",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/groovy/blob/939c56e25e88774d5996d57eeca8bf17d2fed40f/src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/control/CompilationUnit.java?ref=939c56e25e88774d5996d57eeca8bf17d2fed40f",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "patch": "@@ -1038,7 +1038,9 @@ public void applyToPrimaryClassNodes(PrimaryClassNodeOperation body) throws Comp\n             } catch (CompilationFailedException e) {\n                 // fall through, getErrorReporter().failIfErrors() will trigger\n             } catch (NullPointerException npe) {\n-                throw npe;\n+                GroovyBugError gbe = new GroovyBugError(\"unexpected NullpointerException\", npe);\n+                changeBugText(gbe, context);\n+                throw gbe;\n             } catch (GroovyBugError e) {\n                 changeBugText(e, context);\n                 throw e;",
                "raw_url": "https://github.com/apache/groovy/raw/939c56e25e88774d5996d57eeca8bf17d2fed40f/src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "sha": "e554a716ca35ce63a618ec58064a54d42d793900",
                "status": "modified"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/groovy/blob/939c56e25e88774d5996d57eeca8bf17d2fed40f/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java?ref=939c56e25e88774d5996d57eeca8bf17d2fed40f",
                "deletions": 6,
                "filename": "src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "patch": "@@ -3435,7 +3435,7 @@ protected ClassNode inferReturnTypeGenerics(final ClassNode receiver, final Meth\n \n         return resolveGenericsWithContext(resolvedPlaceholders, returnType);\n     }\n-    \n+\n     private ClassNode resolveGenericsWithContext(Map<String, GenericsType> resolvedPlaceholders, ClassNode currentType) {\n         Map<String, GenericsType> placeholdersFromContext = getGenericsParameterMapOfThis(typeCheckingContext.getEnclosingMethod());\n         applyContextGenerics(resolvedPlaceholders,placeholdersFromContext);\n@@ -3521,7 +3521,12 @@ private static ClassNode getDeclaringClass(MethodNode method, Expression argumen\n     private Map<String, GenericsType> resolvePlaceHoldersFromDeclartion(ClassNode receiver, ClassNode declaration, MethodNode method, boolean isStaticTarget) {\n         Map<String, GenericsType> resolvedPlaceholders;\n         if (isStaticTarget && CLASS_Type.equals(receiver) && receiver.isUsingGenerics() && receiver.getGenericsTypes().length>0) {\n-            resolvedPlaceholders = new HashMap<String, GenericsType>();\n+            resolvedPlaceholders = new HashMap<String, GenericsType>() {\n+                public GenericsType put(String key, GenericsType value) {\n+                    if (key==null || value==null) throw new NullPointerException(\"Key and value must not be null.\");\n+                    return super.put(key,value);\n+                }\n+            };\n             GenericsUtils.extractPlaceholders(receiver.getGenericsTypes()[0].getType(), resolvedPlaceholders);\n         } else {\n             resolvedPlaceholders = extractPlaceHolders(method, receiver, declaration);\n@@ -3537,7 +3542,12 @@ private static void addMethodLevelDeclaredGenerics(MethodNode method, Map<String\n     \n     private static Map<String, GenericsType> extractPlaceHolders(MethodNode method, ClassNode receiver, ClassNode declaringClass) {\n         if (declaringClass.equals(OBJECT_TYPE)) {\n-            Map<String, GenericsType> resolvedPlaceholders = new HashMap<String, GenericsType>();\n+            Map<String, GenericsType> resolvedPlaceholders = new HashMap<String, GenericsType>() {\n+                public GenericsType put(String key, GenericsType value) {\n+                    if (key==null || value==null) throw new NullPointerException(\"Key and value must not be null.\");\n+                    return super.put(key,value);\n+                }\n+            };\n             if (method!=null) addMethodLevelDeclaredGenerics(method, resolvedPlaceholders);\n             return resolvedPlaceholders;\n         }\n@@ -3546,7 +3556,12 @@ private static void addMethodLevelDeclaredGenerics(MethodNode method, Map<String\n         ClassNode current = receiver;\n         while (true) {\n             //extract the place holders\n-            Map<String, GenericsType> currentPlaceHolders = new HashMap<String, GenericsType>();\n+            Map<String, GenericsType> currentPlaceHolders = new HashMap<String, GenericsType>() {\n+                public GenericsType put(String key, GenericsType value) {\n+                    if (key==null || value==null) throw new NullPointerException(\"Key and value must not be null.\");\n+                    return super.put(key,value);\n+                }\n+            };\n             GenericsUtils.extractPlaceholders(current, currentPlaceHolders);\n \n             if (method!=null && declaringClass.equals(current)) {\n@@ -3611,6 +3626,11 @@ private static void addMethodLevelDeclaredGenerics(MethodNode method, Map<String\n      * for which placeholders are resolved recursively.\n      */\n     protected static GenericsType fullyResolve(GenericsType gt, Map<String, GenericsType> placeholders) {\n+        if (gt==null) throw new GroovyBugError(\"gt must not be null.\");\n+        if (placeholders==null) throw new GroovyBugError(\"placeholders map must not be null\");\n+        GenericsType fromMap = placeholders.get(gt.getName());\n+        if (fromMap==null) throw new GroovyBugError(\"placeholders entry has null value, key was: \"+gt.getName()+\" and map entry exists: \"+placeholders.containsKey(gt.getName()));\n+\n         if (gt.isPlaceholder() && placeholders.containsKey(gt.getName()) && !placeholders.get(gt.getName()).isPlaceholder()) {\n             gt = placeholders.get(gt.getName());\n         }\n@@ -3731,7 +3751,12 @@ protected void typeCheckMethodsWithGenerics(ClassNode receiver, ClassNode[] argu\n                 ClassNode firstArgType = GenericsUtils.parameterizeType(receiver, dgmMethodFirstArgType);\n \n \n-                Map<String, GenericsType> placeholders = new HashMap<String, GenericsType>();\n+                Map<String, GenericsType> placeholders = new HashMap<String, GenericsType>() {\n+                    public GenericsType put(String key, GenericsType value) {\n+                        if (key==null || value==null) throw new NullPointerException(\"Key and value must not be null.\");\n+                        return super.put(key,value);\n+                    }\n+                };\n                 GenericsType[] gts = dgmMethodFirstArgType.getGenericsTypes();\n                 for (int i = 0; gts != null && i < gts.length; i++) {\n                     GenericsType gt = gts[i];\n@@ -4051,7 +4076,12 @@ private void applyContextGenerics(Map<String, GenericsType> resolvedPlaceholders\n \n     private static Map<String, GenericsType> mergeGenerics(Map<String, GenericsType> current, GenericsType[] newGenerics) {\n         if (newGenerics == null || newGenerics.length == 0) return null;\n-        if (current==null) current = new HashMap<String, GenericsType>();\n+        if (current==null) current = new HashMap<String, GenericsType>() {\n+            public GenericsType put(String key, GenericsType value) {\n+                if (key==null || value==null) throw new NullPointerException(\"Key and value must not be null.\");\n+                return super.put(key,value);\n+            }\n+        };\n         for (int i = 0; i < newGenerics.length; i++) {\n             GenericsType gt = newGenerics[i];\n             if (!gt.isPlaceholder()) continue;",
                "raw_url": "https://github.com/apache/groovy/raw/939c56e25e88774d5996d57eeca8bf17d2fed40f/src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
                "sha": "ae26116a925e023c5f59c5332c65203f04c0e33e",
                "status": "modified"
            }
        ],
        "message": "Some modifications to be able to diagnose NPEs better",
        "parent": "https://github.com/apache/groovy/commit/8ee6e5efa8887ce460ff4aa60a5691361a38bd19",
        "repo": "groovy",
        "unit_tests": [
            "CompilationUnitTest.java"
        ]
    },
    "groovy_9b1497a": {
        "bug_id": "groovy_9b1497a",
        "commit": "https://github.com/apache/groovy/commit/9b1497ae86b951dae07e4b6285dc7814a5848494",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/groovy/blob/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/groovy/lang/MissingClassException.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/MissingClassException.java?ref=9b1497ae86b951dae07e4b6285dc7814a5848494",
                "deletions": 0,
                "filename": "src/main/groovy/lang/MissingClassException.java",
                "patch": "@@ -46,6 +46,7 @@\n package groovy.lang;\n \n import org.codehaus.groovy.ast.ASTNode;\n+import org.codehaus.groovy.ast.Type;\n \n /**\n  * An exception occurred if a dynamic method dispatch fails with an unknown class.\n@@ -64,6 +65,10 @@ public MissingClassException(String type, ASTNode node, String message) {\n         super(\"No such class: \" + type + \" \" + message, node);\n         this.type = type;\n     }\n+    \n+    public MissingClassException(Type type, String message){\n+        super(\"No such class: \" + type.getName() + \" \" + message);\n+    }\n \n     /**\n      * ",
                "raw_url": "https://github.com/apache/groovy/raw/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/groovy/lang/MissingClassException.java",
                "sha": "f9d0d661844674aa653cc92a2221ab21161d65bd",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/groovy/blob/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/org/codehaus/groovy/ast/ClassNode.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/ast/ClassNode.java?ref=9b1497ae86b951dae07e4b6285dc7814a5848494",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/ast/ClassNode.java",
                "patch": "@@ -630,8 +630,11 @@ protected Parameter createParameter(Class parameterType, int idx) {\n         return new Parameter(Type.makeType(parameterType), \"param\" + idx);\n     }\n \n-\n     public Type resolveClassName(Type type) {\n+        return resolveClassName(type,null);\n+    }\n+    \n+    public Type resolveClassName(Type type, String message) {\n         Type answer = null;\n         if (type != null) {\n             if (getType().equals(type) || getNameWithoutPackage().equals(type.getName())) {\n@@ -650,6 +653,7 @@ public Type resolveClassName(Type type) {\n                 answer = tryResolveClassAndInnerClass(Type.makeType(replacedPointType));\n             }\n         }\n+        if (answer==null && message!=null) throw new MissingClassException(type,message);\n         return answer;\n     }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/org/codehaus/groovy/ast/ClassNode.java",
                "sha": "715e71688e151348b5c3282c110f95425f28343c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java?ref=9b1497ae86b951dae07e4b6285dc7814a5848494",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java",
                "patch": "@@ -1699,7 +1699,7 @@ public void visitConstructorCallExpression(ConstructorCallExpression call) {\n \n         // lets check that the type exists\n         Type type = call.getType();\n-        type = classNode.resolveClassName(type);\n+        type = classNode.resolveClassName(type, \"\");\n         call.setType(type);\n         \n         visitClassExpression(new ClassExpression(type));",
                "raw_url": "https://github.com/apache/groovy/raw/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java",
                "sha": "e4b8a29982286e1bd6f282240e3b66d35f8e62f5",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/groovy/blob/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/control/CompilationUnit.java?ref=9b1497ae86b951dae07e4b6285dc7814a5848494",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "patch": "@@ -54,7 +54,6 @@\n package org.codehaus.groovy.control;\n \n import java.io.File;\n-import java.io.FileNotFoundException;\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n@@ -853,6 +852,8 @@ public void applyToPrimaryClassNodes(LoopBodyForPrimaryClassNodeOperations body)\n                 }\n             } catch (CompilationFailedException e) {\n                 // fall thorugh, getErrorREporter().failIfErrors() will triger\n+            } catch (NullPointerException npe){\n+                throw npe;\n             } catch (Exception e) {\n                 failures = true;\n //                String msg = e.getMessage();",
                "raw_url": "https://github.com/apache/groovy/raw/9b1497ae86b951dae07e4b6285dc7814a5848494/src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "sha": "280b0365f57341a9e9739cb6726f46938f11a4d9",
                "status": "modified"
            }
        ],
        "message": "avoids npe for missing classes and improves error reporting\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@2868 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/c0e40e8e1fe8751652b9e9d5cfbaecd1a7030bce",
        "repo": "groovy",
        "unit_tests": [
            "ClassNodeTest.java",
            "CompilationUnitTest.java"
        ]
    },
    "groovy_befa786": {
        "bug_id": "groovy_befa786",
        "commit": "https://github.com/apache/groovy/commit/befa7863c985ed24a72c9f69ce42d529616be3ec",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/befa7863c985ed24a72c9f69ce42d529616be3ec/src/main/org/codehaus/groovy/ast/ClassNode.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/ast/ClassNode.java?ref=befa7863c985ed24a72c9f69ce42d529616be3ec",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/ast/ClassNode.java",
                "patch": "@@ -327,6 +327,7 @@ public List getAbstractMethods() {\n         // No need to be extra carefull here for that.\n         ClassNode parent = this.redirect();\n         do {\n+        \tabstractNodes.add(parent);\n             ClassNode[] interfaces = parent.getInterfaces();\n             for (int i = 0; i < interfaces.length; i++) {\n                 abstractNodes.add(interfaces[i].redirect());",
                "raw_url": "https://github.com/apache/groovy/raw/befa7863c985ed24a72c9f69ce42d529616be3ec/src/main/org/codehaus/groovy/ast/ClassNode.java",
                "sha": "d3debbb4ff99576cd57ddcaa2a4c1ba73525632e",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/groovy/blob/befa7863c985ed24a72c9f69ce42d529616be3ec/src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java?ref=befa7863c985ed24a72c9f69ce42d529616be3ec",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java",
                "patch": "@@ -295,7 +295,6 @@ public AsmClassGenerator(\n     }\n     \n     protected SourceUnit getSourceUnit() {\n-        // TODO Auto-generated method stub\n         return null;\n     }\n \n@@ -3050,6 +3049,12 @@ protected ClassNode getExpressionType(Expression expression) {\n             return ClassHelper.boolean_TYPE;\n         }\n         if (expression instanceof VariableExpression) {\n+        \tif (expression == VariableExpression.THIS_EXPRESSION) {\n+        \t\treturn classNode;\n+        \t}else  if (expression==VariableExpression.SUPER_EXPRESSION) {\n+        \t\treturn classNode.getSuperClass();\n+        \t}\n+        \t\n             VariableExpression varExpr = (VariableExpression) expression;\n             Variable variable = compileStack.getVariable(varExpr.getName(),false);\n             if (variable != null && !variable.isHolder()) {",
                "raw_url": "https://github.com/apache/groovy/raw/befa7863c985ed24a72c9f69ce42d529616be3ec/src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java",
                "sha": "7ed3eb20f93b2df26af759cc9ecf457f351701e6",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/befa7863c985ed24a72c9f69ce42d529616be3ec/src/main/org/codehaus/groovy/classgen/Variable.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/classgen/Variable.java?ref=befa7863c985ed24a72c9f69ce42d529616be3ec",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/classgen/Variable.java",
                "patch": "@@ -74,7 +74,7 @@\n     private boolean dynamicTyped;\n \n     private Variable(){\n-        dynamicTyped = false;\n+        dynamicTyped = true;\n         index=0;\n         holder=false;\n         property=false;",
                "raw_url": "https://github.com/apache/groovy/raw/befa7863c985ed24a72c9f69ce42d529616be3ec/src/main/org/codehaus/groovy/classgen/Variable.java",
                "sha": "659d55d44318d676722e27a932fab64a64590d12",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/groovy/blob/befa7863c985ed24a72c9f69ce42d529616be3ec/src/test/groovy/AbstractClassAndInterfaceTest.groovy",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/AbstractClassAndInterfaceTest.groovy?ref=befa7863c985ed24a72c9f69ce42d529616be3ec",
                "deletions": 23,
                "filename": "src/test/groovy/AbstractClassAndInterfaceTest.groovy",
                "patch": "@@ -1,6 +1,18 @@\n+import org.codehaus.groovy.control.CompilationFailedException\n \n class AbstractClassAndInterfaceTest extends GroovyTestCase {\n \n+\tdef shouldNotCompile(String script) {\n+\t  try {\n+        GroovyShell shell = new GroovyShell()\n+        shell.parse(script, getTestClassName())\n+      } catch (CompilationFailedException cfe) {\n+        assert true\n+        return\n+      }\n+      fail(\"the compilation succeeded but should have failed\")\n+\t}\n+\n \tvoid testInterface() {\n     \tdef shell = new GroovyShell()\n         def text = \"\"\"\n@@ -26,8 +38,7 @@ class AbstractClassAndInterfaceTest extends GroovyTestCase {\n \t}\n \t\n \tvoid testClassImplementingAnInterfaceButMissesMethod() {\n-    \tdef shell = new GroovyShell()\n-        def text = \"\"\"\n+        shouldNotCompile \"\"\"\n         \tinterface A {\n \t\t\t\tvoid methodOne(Object o)\n \t\t\t\tObject methodTwo()\n@@ -40,10 +51,8 @@ class AbstractClassAndInterfaceTest extends GroovyTestCase {\n \t\t\tdef b = new B();\n \t\t\treturn b.methodTwo()\n \t\t\t\"\"\"\n-\t\tshouldFail {\n-\t\t\tshell.evaluate(text)\n-\t\t}\n-\t\ttext = \"\"\"\n+\t\t\n+\t\tshouldNotCompile \"\"\"\n \t\t\tinterface A {\n \t\t\t\tObject methodTwo()\n \t\t    }\n@@ -58,9 +67,6 @@ class AbstractClassAndInterfaceTest extends GroovyTestCase {\n \t\t\tdef b = new C();\n \t\t\treturn b.methodTwo()\n \t\t\t\"\"\"\n-\t\tshouldFail {\n-\t\t\tshell.evaluate(text)\n-\t\t}\t\t\t\n \t}\n \t\n \tvoid testAbstractClass() {\n@@ -87,8 +93,7 @@ class AbstractClassAndInterfaceTest extends GroovyTestCase {\n \t}\t\n \t\n \tvoid testClassExtendingAnAbstractClassButMissesMethod() {\n-    \tdef shell = new GroovyShell()\n-        def text = \"\"\"\n+        shouldNotCompile \"\"\"\n         \tabstract class A {\n \t\t\t\tabstract void methodOne(Object o)\n \t\t\t\tObject methodTwo(){\n@@ -107,12 +112,9 @@ class AbstractClassAndInterfaceTest extends GroovyTestCase {\n \t\t\t\n \t\t\tdef b = new C();\n \t\t\treturn b.methodTwo()\n-\t\t\t\"\"\"\n-\t\tshouldFail {\n-\t\t\tshell.evaluate(text)\n-\t\t}\t\t\t\n+\t\t\t\"\"\"\t\n \t\t\n-        text = \"\"\"\n+       shouldNotCompile \"\"\"\n         \tabstract class A {\n \t\t\t\tabstract void methodOne(Object o)\n \t\t\t\tObject methodTwo(){\n@@ -130,9 +132,6 @@ class AbstractClassAndInterfaceTest extends GroovyTestCase {\n \t\t\tdef b = new B();\n \t\t\treturn b.methodTwo()\n \t\t\t\"\"\"\n-\t\tshouldFail {\n-\t\t\tshell.evaluate(text)\n-\t\t}\n \t}\n \t\n \tvoid testInterfaceAbstractClassCombination() {\n@@ -157,7 +156,7 @@ class AbstractClassAndInterfaceTest extends GroovyTestCase {\n \t\t\t\"\"\"\n \t\tshell.evaluate(text)\n \t\t\n-\t\ttext = \"\"\"\n+\t\tshouldNotCompile \"\"\"\n \t\t\tinterface A {\n \t\t\t\tvoid methodOne()\n \t\t\t}\n@@ -170,9 +169,6 @@ class AbstractClassAndInterfaceTest extends GroovyTestCase {\n \t\t\tdef c = new c()\n \t\t\tc.methodTwo()\n \t\t\t\"\"\"\n-\t\tshouldFail {\n-\t\t\tshell.evaluate(text)\n-\t\t}\t\n \t}\n \t\n \tvoid testDefaultModifiersForInterfaces() {",
                "raw_url": "https://github.com/apache/groovy/raw/befa7863c985ed24a72c9f69ce42d529616be3ec/src/test/groovy/AbstractClassAndInterfaceTest.groovy",
                "sha": "878cba837a487d4bd966d1569e80ea0a47a71e7b",
                "status": "modified"
            }
        ],
        "message": "fix for NPE and abstract class test\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@3693 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/740d1bc8ee263386d9ea2e53f728997d8ddb2157",
        "repo": "groovy",
        "unit_tests": [
            "ClassNodeTest.java"
        ]
    },
    "groovy_c13994e": {
        "bug_id": "groovy_c13994e",
        "commit": "https://github.com/apache/groovy/commit/c13994ea07956717a1f3c8b2def273896c5430c4",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/c13994ea07956717a1f3c8b2def273896c5430c4/src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java?ref=c13994ea07956717a1f3c8b2def273896c5430c4",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java",
                "patch": "@@ -51,7 +51,7 @@ public void visitClass(ClassNode node) {\n         currentClass = node;\n         \n         checkImplementsAndExtends(node);\n-        if (!getSourceUnit().getErrorCollector().hasErrors()) {\n+        if (source!=null && !source.getErrorCollector().hasErrors()) {\n             checkClassForOverwritingFinal(node);\n             checkMethodsForOverwritingFinal(node);\n             checkNoAbstractMethodsNonabstractClass(node);",
                "raw_url": "https://github.com/apache/groovy/raw/c13994ea07956717a1f3c8b2def273896c5430c4/src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java",
                "sha": "4af1af5eb654206d1ac6a9507bb52948172ffda4",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/c13994ea07956717a1f3c8b2def273896c5430c4/src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/control/CompilationUnit.java?ref=c13994ea07956717a1f3c8b2def273896c5430c4",
                "deletions": 3,
                "filename": "src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "patch": "@@ -295,8 +295,7 @@ public void addSources(File[] files) {\n     public SourceUnit addSource(File file) {\n         return addSource(new SourceUnit(file, configuration, classLoader, getErrorCollector()));\n     }\n-\n-\n+    \n     /**\n      * Adds a source file to the unit.\n      */\n@@ -357,7 +356,9 @@ public void remove() {\n \n     /**\n      * Adds a ClassNode directly to the unit (ie. without source).\n-     * Used primarily for testing support.\n+     * WARNING: the source is needed for error reporting, using\n+     *          this method without setting a SourceUnit will cause\n+     *          NullPinterExceptions\n      */\n     public void addClassNode(ClassNode node) {\n         ModuleNode module = new ModuleNode(this.ast);",
                "raw_url": "https://github.com/apache/groovy/raw/c13994ea07956717a1f3c8b2def273896c5430c4/src/main/org/codehaus/groovy/control/CompilationUnit.java",
                "sha": "a770c0a9ce69455bacc82c5d23a5fee15856cd99",
                "status": "modified"
            }
        ],
        "message": "warning comment for adding ClassNodes without SourceUnit added and test for SourceUnit in ClassCompletionVerifyer added to avoid NPEs in cases without faliures\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@3729 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/8976032fce3bff693f72047a9db2a1e0b9c64321",
        "repo": "groovy",
        "unit_tests": [
            "ClassCompletionVerifierTest.java",
            "CompilationUnitTest.java"
        ]
    },
    "groovy_c515f6d": {
        "bug_id": "groovy_c515f6d",
        "commit": "https://github.com/apache/groovy/commit/c515f6d2ae0b174ecf0c7ef06eb7552cf490fc91",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/groovy/blob/c515f6d2ae0b174ecf0c7ef06eb7552cf490fc91/src/main/org/codehaus/groovy/runtime/MetaClassHelper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/MetaClassHelper.java?ref=c515f6d2ae0b174ecf0c7ef06eb7552cf490fc91",
                "deletions": 2,
                "filename": "src/main/org/codehaus/groovy/runtime/MetaClassHelper.java",
                "patch": "@@ -303,8 +303,6 @@ private static long calculateParameterDistance(Class argument, CachedClass param\n             // choose the distance to Object if a parameter is null\n             // this will mean that Object is preferred over a more\n             // specific type\n-            // remove one to dist to be sure Object is preferred\n-            objectDistance--;\n             Class clazz = parameter.getTheClass();\n             if (clazz.isPrimitive()) {\n                 objectDistance += 2;",
                "raw_url": "https://github.com/apache/groovy/raw/c515f6d2ae0b174ecf0c7ef06eb7552cf490fc91/src/main/org/codehaus/groovy/runtime/MetaClassHelper.java",
                "sha": "ca56ec6a1833b085813973d5958d9cde887ada44",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/groovy/blob/c515f6d2ae0b174ecf0c7ef06eb7552cf490fc91/src/test/groovy/bugs/Groovy4029Bug.groovy",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/test/groovy/bugs/Groovy4029Bug.groovy?ref=c515f6d2ae0b174ecf0c7ef06eb7552cf490fc91",
                "deletions": 0,
                "filename": "src/test/groovy/bugs/Groovy4029Bug.groovy",
                "patch": "@@ -0,0 +1,9 @@\n+package groovy.bugs\r\n+\r\n+class Groovy4029Bug extends GroovyTestCase {\r\n+    void testAddNullKeyEntryInMapUsingSubscriptNotation() {\r\n+\t\tMap m = [:]\r\n+\t\tm[null] = null\r\n+\t\tassert m.size() == 1\r\n+    }\r\n+}\r",
                "raw_url": "https://github.com/apache/groovy/raw/c515f6d2ae0b174ecf0c7ef06eb7552cf490fc91/src/test/groovy/bugs/Groovy4029Bug.groovy",
                "sha": "dfe15ec7e0ee086100d7515b4c760a35f1b4dbf2",
                "status": "added"
            }
        ],
        "message": "GROOVY-4029\nPutting a map entry using subscript notation with a null key resulted in NPE. Fixed it.\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@19202 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/c2f1bebfa12aec40261d029fe4061f40048b1b07",
        "repo": "groovy",
        "unit_tests": [
            "MetaClassHelperTest.java"
        ]
    },
    "groovy_ceccc4c": {
        "bug_id": "groovy_ceccc4c",
        "commit": "https://github.com/apache/groovy/commit/ceccc4cee84d80fe390b01fa7aee8d4f4d53d954",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/groovy/blob/ceccc4cee84d80fe390b01fa7aee8d4f4d53d954/src/main/org/codehaus/groovy/control/CompilerConfiguration.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/control/CompilerConfiguration.java?ref=ceccc4cee84d80fe390b01fa7aee8d4f4d53d954",
                "deletions": 3,
                "filename": "src/main/org/codehaus/groovy/control/CompilerConfiguration.java",
                "patch": "@@ -171,11 +171,21 @@ public CompilerConfiguration() {\n         //\n         // Try for better defaults, ignore errors.\n \n+        String encoding = null;\n         try {\n-            setSourceEncoding(System.getProperty(\"file.encoding\", \"US-ASCII\"));\n-        }\n-        catch (Exception e) {\n+            //\n+            // Source file encoding\n+            encoding = System.getProperty(\"groovy.source.encoding\");\n+        } catch (Exception e) {\n+            //\n+            // Try for better defaults, ignore errors.\n+            try {\n+                encoding = System.getProperty(\"file.encoding\", \"US-ASCII\");\n+            } catch (Exception ee) {\n+            }\n         }\n+        setSourceEncoding(encoding);\n+\n         try {\n             setOutput(new PrintWriter(System.err));\n         }\n@@ -376,6 +386,7 @@ public String getSourceEncoding() {\n      * Sets the encoding to be used when reading source files.\n      */\n     public void setSourceEncoding(String encoding) {\n+        if (encoding == null) encoding = \"US-ASCII\";\n         this.sourceEncoding = encoding;\n     }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/ceccc4cee84d80fe390b01fa7aee8d4f4d53d954/src/main/org/codehaus/groovy/control/CompilerConfiguration.java",
                "sha": "f7650143cfc805979264dbeb1c017d803cd7ccc4",
                "status": "modified"
            }
        ],
        "message": "patch for GROOVY-1946 applied (a modification was needed, because in the suggested patch null as encoding was used sometimes, which results in NPEs later, the default encoding is now used if encoding is null)\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@6643 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/12929de7afabc3b6b02fcb0970f6372a0235b5b8",
        "repo": "groovy",
        "unit_tests": [
            "CompilerConfigurationTest.java"
        ]
    },
    "groovy_d21d71d": {
        "bug_id": "groovy_d21d71d",
        "commit": "https://github.com/apache/groovy/commit/d21d71d898ec3d3b77521d48f339038ba7e7ce69",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/groovy/blob/d21d71d898ec3d3b77521d48f339038ba7e7ce69/src/main/org/codehaus/groovy/runtime/Invoker.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/Invoker.java?ref=d21d71d898ec3d3b77521d48f339038ba7e7ce69",
                "deletions": 2,
                "filename": "src/main/org/codehaus/groovy/runtime/Invoker.java",
                "patch": "@@ -445,8 +445,9 @@ public String toTypeString(Object[] arguments) {\n \t\t}\n \t    StringBuffer argBuf = new StringBuffer();\n \t    for (int i = 0; i < arguments.length; i++) {\n-\t    \tif (i>0)argBuf.append(\", \");\n-\t\t\targBuf.append(arguments[i].getClass().getName());\n+\t    \tif (i>0)\n+                argBuf.append(\", \");\n+\t\t\targBuf.append(arguments[i] != null ? arguments[i].getClass().getName() : \"null\");\n \t\t}\n \t    return argBuf.toString();\n \t}",
                "raw_url": "https://github.com/apache/groovy/raw/d21d71d898ec3d3b77521d48f339038ba7e7ce69/src/main/org/codehaus/groovy/runtime/Invoker.java",
                "sha": "c5dfbe936390fc4dafce218f59343ab765552796",
                "status": "modified"
            }
        ],
        "message": "Fixed a potential NPE (GROOVY-561)\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@1256 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/87b8129c1ed56c2f57072f8c9de0420c84435ee6",
        "repo": "groovy",
        "unit_tests": [
            "InvokerTest.java"
        ]
    },
    "groovy_dd441dc": {
        "bug_id": "groovy_dd441dc",
        "commit": "https://github.com/apache/groovy/commit/dd441dcf109165f852f10e67a842a6aa6db5ade2",
        "file": [
            {
                "additions": 142,
                "blob_url": "https://github.com/apache/groovy/blob/dd441dcf109165f852f10e67a842a6aa6db5ade2/src/main/groovy/servlet/AbstractHttpServlet.java",
                "changes": 142,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/servlet/AbstractHttpServlet.java?ref=dd441dcf109165f852f10e67a842a6aa6db5ade2",
                "deletions": 0,
                "filename": "src/main/groovy/servlet/AbstractHttpServlet.java",
                "patch": "@@ -0,0 +1,142 @@\n+/*\n+ * $Id$\n+ * \n+ * Copyright 2003 (C) James Strachan and Bob Mcwhirter. All Rights Reserved.\n+ * \n+ * Redistribution and use of this software and associated documentation\n+ * (\"Software\"), with or without modification, are permitted provided that the\n+ * following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain copyright statements and\n+ * notices. Redistributions must also contain a copy of this document.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * \n+ * 3. The name \"groovy\" must not be used to endorse or promote products derived\n+ * from this Software without prior written permission of The Codehaus. For\n+ * written permission, please contact info@codehaus.org.\n+ * \n+ * 4. Products derived from this Software may not be called \"groovy\" nor may\n+ * \"groovy\" appear in their names without prior written permission of The\n+ * Codehaus. \"groovy\" is a registered trademark of The Codehaus.\n+ * \n+ * 5. Due credit should be given to The Codehaus - http://groovy.codehaus.org/\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE CODEHAUS AND CONTRIBUTORS ``AS IS'' AND ANY\n+ * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE CODEHAUS OR ITS CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ */\n+package groovy.servlet;\n+\n+import java.io.File;\n+\n+import javax.servlet.ServletContext;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+\n+/**\n+ * A common ground dealing with the http servlet API wrinkles.\n+ *\n+ * @author Christian Stein\n+ */\n+public abstract class AbstractHttpServlet extends HttpServlet {\n+\n+  /**\n+   * Content type of the HTTP response.\n+   */\n+  public static final String CONTENT_TYPE_TEXT_HTML = \"text/html\";\n+\n+  /*\n+   * Servlet API include key names.\n+   */\n+  public static final String INC_PATH_INFO = \"javax.servlet.include.path_info\";\n+  // public static final String INC_REQUEST_URI = \"javax.servlet.include.request_uri\";\n+  public static final String INC_SERVLET_PATH = \"javax.servlet.include.servlet_path\";\n+\n+  /**\n+   * TODO ... \n+   */\n+  protected String getScriptUri(HttpServletRequest request) {\n+    //\n+    // NOTE: This piece of code is heavily inspired by Apaches Jasper2!\n+    // \n+    // http://cvs.apache.org/viewcvs.cgi/jakarta-tomcat-jasper/jasper2/ \\\n+    //        src/share/org/apache/jasper/servlet/JspServlet.java?view=markup\n+    //\n+    // Why doesn't it use request.getRequestURI()?\n+    //\n+\n+    String uri = null;\n+    String info = null;\n+\n+    //\n+    // Check to see if the requested script/template has been the target of a\n+    // RequestDispatcher.include().\n+    //\n+    uri = (String) request.getAttribute(INC_SERVLET_PATH);\n+    if (uri != null) {\n+      //\n+      // Requested script/template file has been target of \n+      // RequestDispatcher.include(). Its path is assembled from the relevant\n+      // javax.servlet.include.* request attributes and returned!\n+      //\n+      info = (String) request.getAttribute(INC_PATH_INFO);\n+      if (info != null) {\n+        uri += info;\n+      }\n+      return uri;\n+    }\n+\n+    //\n+    // Requested script/template file has not been the target of a \n+    // RequestDispatcher.include(). Reconstruct its path from the request's\n+    // getServletPath() and getPathInfo() results.\n+    //\n+    uri = request.getServletPath();\n+    info = request.getPathInfo();\n+    if (info != null) {\n+      uri += info;\n+    }\n+\n+    return uri;\n+  }\n+\n+  /**\n+   * Parses the http request for the real script or template source file.\n+   */\n+  protected File getScriptUriAsFile(HttpServletRequest request,\n+      ServletContext context) {\n+    String uri = getScriptUri(request);\n+    String real = context.getRealPath(uri);\n+    File file = new File(real).getAbsoluteFile();\n+\n+      log(\"\\tInclude-aware URI: \" + uri);\n+      log(\"\\tContext real path: \" + real); // context.getRealPath(uri)\n+      log(\"\\t             File: \" + file);\n+      log(\"\\t      File exists? \" + file.exists());\n+      log(\"\\t    File can read? \" + file.canRead());\n+      log(\"\\t      ServletPath: \" + request.getServletPath());\n+      log(\"\\t         PathInfo: \" + request.getPathInfo()); \n+      log(\"\\t       RequestURI: \" + request.getRequestURI());\n+      log(\"\\t      QueryString: \" + request.getQueryString());\n+      //log(\"\\t  Request Params: \");\n+      //Enumeration e = request.getParameterNames();\n+      //while (e.hasMoreElements()) {\n+      //  String name = (String) e.nextElement();\n+      //  log(\"\\t\\t \" + name + \" = \" + request.getParameter(name));\n+      //}   \n+\n+    return file;\n+  }\n+\n+}",
                "raw_url": "https://github.com/apache/groovy/raw/dd441dcf109165f852f10e67a842a6aa6db5ade2/src/main/groovy/servlet/AbstractHttpServlet.java",
                "sha": "1c0cb04e91ba6d89b854c415374aa3579dfa95a4",
                "status": "added"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/groovy/blob/dd441dcf109165f852f10e67a842a6aa6db5ade2/src/main/groovy/servlet/GroovyServlet.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/servlet/GroovyServlet.java?ref=dd441dcf109165f852f10e67a842a6aa6db5ade2",
                "deletions": 18,
                "filename": "src/main/groovy/servlet/GroovyServlet.java",
                "patch": "@@ -48,7 +48,6 @@\n import javax.servlet.ServletException;\n import javax.servlet.ServletRequest;\n import javax.servlet.ServletResponse;\n-import javax.servlet.http.HttpServlet;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n \n@@ -101,7 +100,7 @@\n  * @author Mark Turansky (markturansky at hotmail.com)\n  * @author Guillaume Laforge\n  */\n-public class GroovyServlet extends HttpServlet implements ResourceConnector {\n+public class GroovyServlet extends AbstractHttpServlet implements ResourceConnector {\n \n     // ------------------------------------------------------ instance variables\n \n@@ -127,17 +126,24 @@\n \n     // ---------------------------------------------------------- public methods\n \n-    /**\n-     * Returns the ServletContext for this servlet\n-     */\n-    public ServletContext getServletContext() {\n-        return sc;\n-    }\n+    //\n+    // (cstein) Do NOT override GenericServlet - using super.init() instead\n+    //\n+    //    /**\n+    //     * Returns the ServletContext for this servlet\n+    //     */\n+    //    public ServletContext getServletContext() {\n+    //        return sc;\n+    //    }\n \n     /**\n      * Initialize the GroovyServlet.\n+     *\n+     * @throws ServletException if init() method defined in super class \n+     * javax.servlet.GenericServlet throws it\n      */\n-    public void init(ServletConfig config) {\n+    public void init(ServletConfig config) throws ServletException {\n+        super.init(config);\n \n         // Use reflection, some containers don't load classes properly\n         MetaClass.setUseReflection(true);\n@@ -148,6 +154,9 @@ public void init(ServletConfig config) {\n \n         // Ensure that we use the correct classloader so that we can find\n         // classes in an application server.\n+        //\n+        // TODO (cstein) Is parent used? Somewhere else then here?\n+        //\n         parent = Thread.currentThread().getContextClassLoader();\n         if (parent == null)\n             parent = GroovyServlet.class.getClassLoader();\n@@ -178,20 +187,21 @@ public URLConnection getResourceConnection(String name) throws ResourceException\n      * Handle web requests to the GroovyServlet\n      */\n     public void service(ServletRequest request, ServletResponse response)\n-        throws ServletException, IOException {\n+        throws IOException {\n \n         // Convert the generic servlet request and response to their Http versions\n         final HttpServletRequest httpRequest = (HttpServletRequest) request;\n         final HttpServletResponse httpResponse = (HttpServletResponse) response;\n \n         // get the script path from the request\n         final String scriptFilename = getGroovyScriptPath(httpRequest);\n+        // log(\"Serving \" + scriptFilename);\n \n         // Set it to HTML by default\n         response.setContentType(\"text/html\");\n \n         // Set up the script context\n-        final Binding binding = new ServletBinding((HttpServletRequest) request, (HttpServletResponse) response, sc);\n+        final Binding binding = new ServletBinding(httpRequest, httpResponse, sc);\n \n         // Run the script\n         try {\n@@ -207,6 +217,10 @@ public Object call() {\n                 }\n             };\n             GroovyCategorySupport.use(ServletCategory.class, closure);\n+            // Set reponse code 200 and flush buffers\n+            httpResponse.setStatus(HttpServletResponse.SC_OK);\n+            httpResponse.flushBuffer();            \n+            // log(\"Flushed response buffer.\");\n         } catch (RuntimeException re) {\n \n             StringBuffer error = new StringBuffer(\"GroovyServlet Error: \");\n@@ -238,6 +252,7 @@ public Object call() {\n                     HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n             }\n         }\n+\n     }\n \n     // --------------------------------------------------------- private methods\n@@ -249,13 +264,7 @@ public Object call() {\n     private String getGroovyScriptPath(HttpServletRequest request) {\n \n         // Get the name of the Groovy script - include aware (GROOVY-815)\n-        String includeURI = (String)request.getAttribute(\"javax.servlet.include.request_uri\");\n-        String strURI = null;\n-        if (includeURI != null) {\n-            strURI = includeURI; \n-        } else {\n-            strURI = request.getRequestURI(); \n-        }\n+        String strURI = super.getScriptUri(request);\n \n         int contextLength = request.getContextPath().length();\n         String scriptFilename = strURI.substring(contextLength).substring(1);",
                "raw_url": "https://github.com/apache/groovy/raw/dd441dcf109165f852f10e67a842a6aa6db5ade2/src/main/groovy/servlet/GroovyServlet.java",
                "sha": "6533f546925ad3143999cd6c42bb05d6bb27c0d3",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/groovy/blob/dd441dcf109165f852f10e67a842a6aa6db5ade2/src/main/groovy/servlet/TemplateServlet.java",
                "changes": 75,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/servlet/TemplateServlet.java?ref=dd441dcf109165f852f10e67a842a6aa6db5ade2",
                "deletions": 67,
                "filename": "src/main/groovy/servlet/TemplateServlet.java",
                "patch": "@@ -38,7 +38,7 @@\n  */\n package groovy.servlet;\n \n-import groovy.servlet.ServletBinding;\n+import groovy.lang.MetaClass;\n import groovy.text.SimpleTemplateEngine;\n import groovy.text.Template;\n import groovy.text.TemplateEngine;\n@@ -55,7 +55,6 @@\n import javax.servlet.ServletConfig;\n import javax.servlet.ServletContext;\n import javax.servlet.ServletException;\n-import javax.servlet.http.HttpServlet;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n \n@@ -89,7 +88,7 @@\n  * @author Guillaume Laforge\n  * @version 2.0\n  */\n-public class TemplateServlet extends HttpServlet {\n+public class TemplateServlet extends AbstractHttpServlet {\n \n   /**\n    * Simple cache entry that validates against last modified and length\n@@ -137,17 +136,6 @@ public boolean validate(File file) {\n \n   }\n \n-  /**\n-   * Content type of the HTTP response.\n-   */\n-  public static final String CONTENT_TYPE = \"text/html\";\n-\n-  /*\n-   * Servlet API include key names.\n-   */\n-  private static final String INC_REQUEST_URI = \"javax.servlet.include.request_uri\";\n-  private static final String INC_SERVLET_PATH = \"javax.servlet.include.servlet_path\";\n-\n   /*\n    * Enables more log statements.\n    */\n@@ -218,57 +206,6 @@ private Template createTemplate(int bufferCapacity, FileReader fileReader)\n     return template;\n   }\n \n-  /*\n-   * Parses the http request for the real template source file.\n-   */\n-  private File extractAbsoluteFile(HttpServletRequest request) {\n-    String uri = null;\n-    String requestUri = (String) request.getAttribute(INC_REQUEST_URI);\n-    String includeUri = (String) request.getAttribute(INC_SERVLET_PATH);\n-    // \n-    // The first scenario occurs when the template is not directly under /\n-    // example: /foo/bar.template\n-    //\n-    if (requestUri != null) {\n-      String current = requestUri.substring(requestUri.indexOf(includeUri));\n-      if (!includeUri.equals(current)) {\n-        includeUri = current;\n-      }\n-    }\n-    //\n-    // The second scenario is when the includeUri is null but it is still\n-    // possible to recreate the request.\n-    //\n-    if (includeUri == null) {\n-      uri = request.getServletPath();\n-      if (request.getPathInfo() != null) {\n-        uri = request.getServletPath() + request.getPathInfo();\n-      }\n-    }\n-    else {\n-      uri = includeUri;\n-    }\n-    //\n-    // Create a file object from the real path.\n-    //\n-    File file = new File(context.getRealPath(uri)).getAbsoluteFile();\n-    //  log(\"\\t    TemplateFile: \" + file);\n-    //  log(\"\\t     File exists? \" + file.exists());\n-    //  log(\"\\t     File exists? \" + file.canRead());\n-    //  log(\"\\t     ServletPath: \" + request.getServletPath());\n-    //  log(\"\\t        PathInfo: \" + request.getPathInfo());\n-    //  log(\"\\t        RealPath: \" + context.getRealPath(uri));\n-    //  log(\"\\t      RequestURI: \" + request.getRequestURI());\n-    //  log(\"\\t     QueryString: \" + request.getQueryString());\n-    //  //log(\"\\t  Request Params: \");\n-    //  //Enumeration e = request.getParameterNames();\n-    //  //while (e.hasMoreElements()) {\n-    //  //  String name = (String) e.nextElement();\n-    //  //  log(\"\\t\\t \" + name + \" = \" + request.getParameter(name));\n-    //  //}\n-    return file;\n-  }\n-\n   /**\n    * Gets the template created by the underlying engine parsing the request.\n    * \n@@ -379,6 +316,10 @@ public void init(ServletConfig config) throws ServletException {\n     if (engine == null) {\n       throw new ServletException(\"Template engine not instantiated.\");\n     }\n+    \n+    // Use reflection, some containers don't load classes properly\n+    MetaClass.setUseReflection(true);\n+    \n     String value = config.getInitParameter(\"generatedBy\");\n     if (value != null) {\n       this.generatedBy = Boolean.valueOf(value).booleanValue();\n@@ -449,7 +390,7 @@ public void service(HttpServletRequest request,\n     //\n     // Get the template source file handle.\n     //\n-    File file = extractAbsoluteFile(request);\n+    File file = super.getScriptUriAsFile(request, context);\n     if (!file.exists()) {\n       response.sendError(HttpServletResponse.SC_NOT_FOUND);\n       return; // throw new IOException(file.getAbsolutePath());\n@@ -475,7 +416,7 @@ public void service(HttpServletRequest request,\n     //\n     // Prepare the response buffer content type _before_ getting the writer.\n     //\n-    response.setContentType(CONTENT_TYPE);\n+    response.setContentType(CONTENT_TYPE_TEXT_HTML);\n \n     //\n     // Get the output stream writer from the binding.",
                "raw_url": "https://github.com/apache/groovy/raw/dd441dcf109165f852f10e67a842a6aa6db5ade2/src/main/groovy/servlet/TemplateServlet.java",
                "sha": "a7a5d24b2dcb71150c0a4f596719449fe4d682e8",
                "status": "modified"
            }
        ],
        "message": "Introduced abstract base class for Groovy's HTTP servlets. Atm, it provides one method (inspired by Jaspers JspServlet) that parses the request for include attributes and merges them to the final URI hint.\n\nMade GroovyServlet and TemplateServlet extend that new class.\n\nFixed NPE in GroovyServlet, which didn't initialized correctly in init(...). See comments in code.\n\nMore details here http://jira.codehaus.org/browse/GROOVY-815 and GROOVY-814.\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@2181 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/b92cc49ae3f71bf963aa28ad2898be029fc2ffa2",
        "repo": "groovy",
        "unit_tests": [
            "GroovyServletTest.java"
        ]
    },
    "groovy_e47744a": {
        "bug_id": "groovy_e47744a",
        "commit": "https://github.com/apache/groovy/commit/e47744aa5258ba8a386dbe97bead4dabcf4003f7",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/build.gradle",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/build.gradle?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 0,
                "filename": "build.gradle",
                "patch": "@@ -138,6 +138,7 @@ dependencies {\n         exclude(group: 'junit', module: 'junit')\n         exclude(group: 'jmock', module: 'jmock')\n     }\n+    compile files(\"lib/openbeans-1.0.jar\")\n     compile \"org.fusesource.jansi:jansi:$jansiVersion\"\n     compile(\"org.apache.ivy:ivy:$ivyVersion\") {\n         transitive = false",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/build.gradle",
                "sha": "496808eee911b2d6bbe9b8936244d1856a1741ba",
                "status": "modified"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/gradle/assemble.gradle",
                "changes": 41,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/gradle/assemble.gradle?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 5,
                "filename": "gradle/assemble.gradle",
                "patch": "@@ -133,9 +133,10 @@ allprojects {\n         classifier = jar.classifier\n         includeEmptyDirs = false\n         def target = new File(\"${archivePath}.tmp\")\n-        from zipTree(target)\n \n         doFirst {\n+            from zipTree(target)\n+\n             def keepUntouched = [\n                     'org/codehaus/groovy/cli/GroovyPosixParser*.class',\n                     'groovy/util/CliBuilder*.class',\n@@ -154,7 +155,7 @@ allprojects {\n                     // only groovy core will include the dependencies repackaged\n                     if (isRoot) {\n                         configurations.runtime.files.findAll { file ->\n-                            ['antlr', 'asm', 'commons-cli'].any {\n+                            ['antlr', 'asm', 'commons-cli', 'openbeans'].any {\n                                 file.name.startsWith(it)\n                             } && ['asm-attr', 'asm-util', 'asm-analysis'].every { !file.name.startsWith(it) }\n                         }.each { jarjarFile ->\n@@ -189,13 +190,43 @@ allprojects {\n \n         }\n         doLast {\n-            // for some obscure reason, this produces a Gradle warning\n             target.delete()\n-            rootProject.isJarJar = false\n         }\n     }\n-}\n \n+    if (project.name in ['groovy', 'groovy-test']) {\n+        task grooidjar(type: Jar) {\n+            onlyIf {\n+                !rootProject.useIndy()\n+            }\n+            destinationDir = jar.destinationDir\n+            baseName = jar.baseName\n+            appendix = jar.appendix\n+            classifier = jar.classifier ? \"${jar.classifier}grooid\" : 'grooid'\n+            includeEmptyDirs = false\n+            def target = new File(\"${archivePath}.tmp\")\n+\n+            doFirst {\n+                from zipTree(target)\n+                ant {\n+                    taskdef name: 'jarjar', classname: 'com.tonicsystems.jarjar.JarJarTask', classpath: rootProject.configurations.tools.asPath\n+                    jarjar(jarfile: target) {\n+                        zipfileset(src: jarjar.archivePath)\n+\n+                        rule pattern: 'com.googlecode.openbeans.**', result: 'groovyjarjaropenbeans.@1'\n+                        rule pattern: 'org.apache.harmony.beans.**', result: 'groovyjarjarharmonybeans.@1'\n+                        rule pattern: 'java.beans.**', result: 'groovyjarjaropenbeans.@1'\n+                    }\n+                }\n+\n+            }\n+            doLast {\n+                target.delete()\n+            }\n+        }\n+        jarjar.finalizedBy(grooidjar)\n+    }\n+}\n \n subprojects {\n     jar {",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/gradle/assemble.gradle",
                "sha": "b36315ff373c1d88e0228fc556735d6ea7164b97",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/gradle/upload.gradle",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/gradle/upload.gradle?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 0,
                "filename": "gradle/upload.gradle",
                "patch": "@@ -75,6 +75,10 @@ allprojects {\n             if (indyJar.exists()) {\n                 project.artifacts.add('archives', indyJar)\n             }\n+            def grooidJar = new File(archive.parent, archive.name[0..archive.name.lastIndexOf('.')-1]+'-grooid.jar')\n+            if (grooidJar.exists()) {\n+                project.artifacts.add('archives', grooidJar)\n+            }\n         }\n     }\n }\n@@ -94,6 +98,10 @@ allprojects {\n         if (indyJar.exists()) {\n             project.artifacts.add('archives', indyJar)\n         }\n+        def grooidJar = new File(archive.parent, archive.name[0..archive.name.lastIndexOf('.')-1]+'-grooid.jar')\n+        if (grooidJar.exists()) {\n+            project.artifacts.add('archives', grooidJar)\n+        }\n     }\n }\n ext.pomAll = {",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/gradle/upload.gradle",
                "sha": "6e5839c6bafcf1a5c3a82c9e6b5b596474e4321a",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/lib/openbeans-1.0.jar",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/lib/openbeans-1.0.jar?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 0,
                "filename": "lib/openbeans-1.0.jar",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/lib/openbeans-1.0.jar",
                "sha": "7e61907094f0c05e5b7fea03b33722865f92b8c2",
                "status": "added"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/groovy/lang/GroovyClassLoader.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/GroovyClassLoader.java?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 15,
                "filename": "src/main/groovy/lang/GroovyClassLoader.java",
                "patch": "@@ -335,22 +335,27 @@ private void definePackage(String className) {\n     protected PermissionCollection getPermissions(CodeSource codeSource) {\n         PermissionCollection perms;\n         try {\n-            perms = super.getPermissions(codeSource);\n-        } catch (SecurityException e) {\n-            // We lied about our CodeSource and that makes URLClassLoader unhappy.\n-            perms = new Permissions();\n-        }\n-\n-        ProtectionDomain myDomain = AccessController.doPrivileged(new PrivilegedAction<ProtectionDomain>() {\n-            public ProtectionDomain run() {\n-                return getClass().getProtectionDomain();\n+            try {\n+                perms = super.getPermissions(codeSource);\n+            } catch (SecurityException e) {\n+                // We lied about our CodeSource and that makes URLClassLoader unhappy.\n+                perms = new Permissions();\n             }\n-        });\n-        PermissionCollection myPerms = myDomain.getPermissions();\n-        if (myPerms != null) {\n-            for (Enumeration<Permission> elements = myPerms.elements(); elements.hasMoreElements();) {\n-                perms.add(elements.nextElement());\n+\n+            ProtectionDomain myDomain = AccessController.doPrivileged(new PrivilegedAction<ProtectionDomain>() {\n+                public ProtectionDomain run() {\n+                    return getClass().getProtectionDomain();\n+                }\n+            });\n+            PermissionCollection myPerms = myDomain.getPermissions();\n+            if (myPerms != null) {\n+                for (Enumeration<Permission> elements = myPerms.elements(); elements.hasMoreElements();) {\n+                    perms.add(elements.nextElement());\n+                }\n             }\n+        } catch (Throwable e) {\n+            // We lied about our CodeSource and that makes URLClassLoader unhappy.\n+            perms = new Permissions();\n         }\n         perms.setReadOnly();\n         return perms;\n@@ -474,8 +479,13 @@ public GroovyClassLoader getDefiningClassLoader() {\n         }\n \n         protected Class createClass(byte[] code, ClassNode classNode) {\n+            BytecodeProcessor bytecodePostprocessor = unit.getConfiguration().getBytecodePostprocessor();\n+            byte[] fcode = code;\n+            if (bytecodePostprocessor!=null) {\n+                fcode = bytecodePostprocessor.processBytecode(classNode.getName(), fcode);\n+            }\n             GroovyClassLoader cl = getDefiningClassLoader();\n-            Class theClass = cl.defineClass(classNode.getName(), code, 0, code.length, unit.getAST().getCodeSource());\n+            Class theClass = cl.defineClass(classNode.getName(), fcode, 0, fcode.length, unit.getAST().getCodeSource());\n             this.loadedClasses.add(theClass);\n \n             if (generatedClass == null) {",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/groovy/lang/GroovyClassLoader.java",
                "sha": "c8c8224f5e4b59018cc0677c47668c93721e6155",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/groovy/lang/MetaClassImpl.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/MetaClassImpl.java?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 2,
                "filename": "src/main/groovy/lang/MetaClassImpl.java",
                "patch": "@@ -16,7 +16,6 @@\n package groovy.lang;\n \n import org.codehaus.groovy.GroovyBugError;\n-import org.codehaus.groovy.ast.ClassHelper;\n import org.codehaus.groovy.ast.ClassNode;\n import org.codehaus.groovy.classgen.asm.BytecodeHelper;\n import org.codehaus.groovy.control.CompilationUnit;\n@@ -32,6 +31,7 @@\n import org.codehaus.groovy.runtime.ConvertedClosure;\n import org.codehaus.groovy.runtime.CurriedClosure;\n import org.codehaus.groovy.runtime.DefaultGroovyMethods;\n+import org.codehaus.groovy.runtime.ExceptionUtils;\n import org.codehaus.groovy.runtime.GeneratedClosure;\n import org.codehaus.groovy.runtime.GroovyCategorySupport;\n import org.codehaus.groovy.runtime.InvokerHelper;\n@@ -68,6 +68,7 @@\n import org.codehaus.groovy.util.ComplexKeyHashMap;\n import org.codehaus.groovy.util.FastArray;\n import org.codehaus.groovy.util.SingleKeyHashMap;\n+import org.codehaus.groovy.reflection.android.AndroidSupport;\n import org.objectweb.asm.ClassVisitor;\n \n import java.beans.BeanInfo;\n@@ -3043,7 +3044,15 @@ private boolean isGenericGetMethod(MetaMethod method) {\n     public synchronized void initialize() {\n         if (!isInitialized()) {\n             fillMethodIndex();\n-            addProperties();\n+            try {\n+                addProperties();\n+            } catch (Throwable e) {\n+                if (!AndroidSupport.isRunningAndroid()) {\n+                    ExceptionUtils.sneakyThrow(e);\n+                }\n+                // Introspection failure...\n+                // May happen in Android\n+            }\n             initialized = true;\n         }\n     }",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/groovy/lang/MetaClassImpl.java",
                "sha": "f3644512c5c644f263815b8a2e7851f216f5b43f",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java",
                "patch": "@@ -226,6 +226,10 @@ private void makeInnerClassEntry(ClassNode cn) {\n         int mods = adjustedClassModifiersForInnerClassTable(cn);\n \n \n+        if (Modifier.isPrivate(mods)) {\n+            mods = mods ^ Modifier.PRIVATE;\n+            innerClass.setModifiers(mods);\n+        }\n         cv.visitInnerClass(\n                 innerClassInternalName,\n                 outerClassName,",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java",
                "sha": "50020a3de549ca3d85f8cd2a87db88d6bf574c0e",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/control/BytecodeProcessor.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/control/BytecodeProcessor.java?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/control/BytecodeProcessor.java",
                "patch": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2003-2013 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.codehaus.groovy.control;\n+\n+public interface BytecodeProcessor {\n+    byte[] processBytecode(String name, byte[] original);\n+}",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/control/BytecodeProcessor.java",
                "sha": "0931d313f88dbe58fd982b8b8de9985e452c000d",
                "status": "added"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/control/CompilerConfiguration.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/control/CompilerConfiguration.java?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/control/CompilerConfiguration.java",
                "patch": "@@ -161,6 +161,8 @@\n      */\n     private Set<String> disabledGlobalASTTransformations;\n \n+    private BytecodeProcessor bytecodePostprocessor;\n+\n     /**\n      * Sets the Flags to defaults.\n      */\n@@ -828,4 +830,12 @@ public CompilerConfiguration addCompilationCustomizers(CompilationCustomizer...\n     public void setDisabledGlobalASTTransformations(final Set<String> disabledGlobalASTTransformations) {\n         this.disabledGlobalASTTransformations = disabledGlobalASTTransformations;\n     }\n+\n+    public BytecodeProcessor getBytecodePostprocessor() {\n+        return bytecodePostprocessor;\n+    }\n+\n+    public void setBytecodePostprocessor(final BytecodeProcessor bytecodePostprocessor) {\n+        this.bytecodePostprocessor = bytecodePostprocessor;\n+    }\n }",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/control/CompilerConfiguration.java",
                "sha": "a1d0145eb66ece73770a4f340c760e29e183256a",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/reflection/CachedClass.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/reflection/CachedClass.java?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 5,
                "filename": "src/main/org/codehaus/groovy/reflection/CachedClass.java",
                "patch": "@@ -81,13 +81,18 @@\n             final Method[] declaredMethods = (Method[])\n                AccessController.doPrivileged(new PrivilegedAction/*<Method[]>*/() {\n                    public /*Method[]*/ Object run() {\n-                       final Method[] dm = getTheClass().getDeclaredMethods();\n                        try {\n-                           AccessibleObject.setAccessible(dm, true);\n-                       } catch (SecurityException e) {\n-                           // swallow for strict security managers\n+                           final Method[] dm = getTheClass().getDeclaredMethods();\n+                           try {\n+                               AccessibleObject.setAccessible(dm, true);\n+                           } catch (SecurityException e) {\n+                               // swallow for strict security managers\n+                           }\n+                           return dm;\n+                       } catch (Throwable e) {\n+                           // Typically, Android can throw ClassNotFoundException\n+                           return new Method[0];\n                        }\n-                       return dm;\n                    }\n                });\n             List<CachedMethod> methods = new ArrayList<CachedMethod>(declaredMethods.length);",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/reflection/CachedClass.java",
                "sha": "a3fe0693d2dc0d35afdc13d7b1d1e42d1b6893e9",
                "status": "modified"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/reflection/android/AndroidSupport.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/reflection/android/AndroidSupport.java?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 0,
                "filename": "src/main/org/codehaus/groovy/reflection/android/AndroidSupport.java",
                "patch": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2003-2014 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.codehaus.groovy.reflection.android;\n+\n+public abstract class AndroidSupport {\n+    private static final boolean IS_ANDROID;\n+\n+    static {\n+        boolean isAndroid = true;\n+        try {\n+            Class.forName(\"android.app.Activity\", false, AndroidSupport.class.getClassLoader());\n+        } catch (ClassNotFoundException e) {\n+            isAndroid = false;\n+        }\n+        IS_ANDROID = isAndroid;\n+    }\n+\n+    public static boolean isRunningAndroid() {\n+        return IS_ANDROID;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/reflection/android/AndroidSupport.java",
                "sha": "83cd4ec6f74d7437f5b88503481e790b5545c133",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/groovy/blob/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/runtime/callsite/CallSiteGenerator.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/runtime/callsite/CallSiteGenerator.java?ref=e47744aa5258ba8a386dbe97bead4dabcf4003f7",
                "deletions": 1,
                "filename": "src/main/org/codehaus/groovy/runtime/callsite/CallSiteGenerator.java",
                "patch": "@@ -19,6 +19,7 @@\n import org.codehaus.groovy.classgen.asm.BytecodeHelper;\n import org.codehaus.groovy.reflection.CachedClass;\n import org.codehaus.groovy.reflection.CachedMethod;\n+import org.codehaus.groovy.reflection.android.AndroidSupport;\n import org.objectweb.asm.ClassWriter;\n import org.objectweb.asm.Label;\n import org.objectweb.asm.MethodVisitor;\n@@ -242,7 +243,8 @@ public static Constructor compileStaticMethod(CachedMethod cachedMethod) {\n     }\n \n     public static boolean isCompilable (CachedMethod method) {\n-        return GroovySunClassLoader.sunVM != null || Modifier.isPublic(method.cachedClass.getModifiers()) && method.isPublic() && publicParams(method);\n+        return (GroovySunClassLoader.sunVM != null || Modifier.isPublic(method.cachedClass.getModifiers()) && method.isPublic() && publicParams(method))\n+                && !AndroidSupport.isRunningAndroid();\n     }\n \n     private static boolean publicParams(CachedMethod method) {",
                "raw_url": "https://github.com/apache/groovy/raw/e47744aa5258ba8a386dbe97bead4dabcf4003f7/src/main/org/codehaus/groovy/runtime/callsite/CallSiteGenerator.java",
                "sha": "64064c806d936c0b2078c106fb252102fa76d40a",
                "status": "modified"
            }
        ],
        "message": "Raw modifications to run Groovy on Android\n   * replaced uses of java.beans with openbeans\n   * added a bytecode postprocessor\n   * commented code which triggered NPEs on Android due to security exceptions\n   * Repackage openbeans within core jar\n   * Android patch: Catch introspection errors\n   * Use \"grooid\" classifier for modified jars",
        "parent": "https://github.com/apache/groovy/commit/198af57011ae357acef42c8095fed9e3b91953e1",
        "repo": "groovy",
        "unit_tests": [
            "GroovyClassLoaderTest.java",
            "CompilerConfigurationTest.java"
        ]
    },
    "groovy_ec89363": {
        "bug_id": "groovy_ec89363",
        "commit": "https://github.com/apache/groovy/commit/ec89363470d0aa3bba5afee627eba261dc78a91d",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/groovy/blob/ec89363470d0aa3bba5afee627eba261dc78a91d/src/main/org/codehaus/groovy/ast/ClassNode.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/ast/ClassNode.java?ref=ec89363470d0aa3bba5afee627eba261dc78a91d",
                "deletions": 2,
                "filename": "src/main/org/codehaus/groovy/ast/ClassNode.java",
                "patch": "@@ -119,11 +119,13 @@ protected ClassNode redirect(){\n     }\n     \n     /**\n-     * Sets this instance as proxy for the given ClassNode\n+     * Sets this instance as proxy for the given ClassNode. \n+     * @param cn the class to redirect to. If set to null the redirect will be removed\n      */\n     public void setRedirect(ClassNode cn) {\n         if (isPrimaryNode) throw new GroovyBugError(\"tried to set a redirect for a primary ClassNode (\"+getName()+\"->\"+cn.getName()+\").\");\n-        redirect = cn.redirect();        \n+        if (cn!=null) cn = cn.redirect();\n+        redirect = cn;\n     }\n     \n     /**",
                "raw_url": "https://github.com/apache/groovy/raw/ec89363470d0aa3bba5afee627eba261dc78a91d/src/main/org/codehaus/groovy/ast/ClassNode.java",
                "sha": "c5224a9df45a8f7194f170a717e558ee386951c1",
                "status": "modified"
            }
        ],
        "message": "avoid NPE when setting redirect\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@3685 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/3d0ae5fb032021f51733b14691ba3ea92f919c5f",
        "repo": "groovy",
        "unit_tests": [
            "ClassNodeTest.java"
        ]
    },
    "groovy_f233b54": {
        "bug_id": "groovy_f233b54",
        "commit": "https://github.com/apache/groovy/commit/f233b543f3f887b37888fc5157e650ce27181dc2",
        "file": [
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/groovy/blob/f233b543f3f887b37888fc5157e650ce27181dc2/src/main/org/codehaus/groovy/ant/Groovyc.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/org/codehaus/groovy/ant/Groovyc.java?ref=f233b543f3f887b37888fc5157e650ce27181dc2",
                "deletions": 8,
                "filename": "src/main/org/codehaus/groovy/ant/Groovyc.java",
                "patch": "@@ -115,6 +115,8 @@\n     private boolean jointCompilation;\n \n     private List<File> temporaryFiles = new ArrayList(2);\n+    private File stubDir;\n+    private boolean keepStubs;\n \n \n     /**\n@@ -667,7 +669,7 @@ protected void compile() {\n                                 || (key.contains(\"encoding\"))\n                                 || (key.contains(\"source\"))\n                                 || (key.contains(\"target\"))\n-                                || (key.contains(\"verbose\"))) {\n+                                || (key.contains(\"verbose\"))) { // TODO remove extra verbose?\n                             jointOptions.add(\"-J\" + key + \"=\" + value);\n                         } else {\n                             log(\"The option \" + key + \" cannot be set on the contained <javac> element. The option will be ignored\", Project.MSG_WARN);\n@@ -859,12 +861,18 @@ protected void compile() {\n     }\n \n     protected CompilationUnit makeCompileUnit() {\n-        if (configuration.getJointCompilationOptions() != null) {\n-            if (!configuration.getJointCompilationOptions().containsKey(\"stubDir\")) {\n+        Map<String, Object> options = configuration.getJointCompilationOptions();\n+        if (options != null) {\n+            if (keepStubs) {\n+                options.put(\"keepStubs\", Boolean.TRUE);\n+            }\n+            if (stubDir != null) {\n+                options.put(\"stubDir\", stubDir);\n+            } else {\n                 try {\n                     File tempStubDir = FileSystemCompiler.createTempDir();\n                     temporaryFiles.add(tempStubDir);\n-                    configuration.getJointCompilationOptions().put(\"stubDir\", tempStubDir);\n+                    options.put(\"stubDir\", tempStubDir);\n                 } catch (IOException ioe) {\n                     throw new BuildException(ioe);\n                 }\n@@ -911,14 +919,15 @@ protected GroovyClassLoader buildClassLoaderFor() {\n \n     /**\n      * Set the stub directory into which the Java source stub\n-     * files should be generated. The directory should exist \n-     * will not be deleted automatically.\n+     * files should be generated. The directory need not exist\n+     * and will not be deleted automatically - though its contents\n+     * will be cleared unless 'keepStubs' is true. Ignored when forked.\n      *\n      * @param stubDir the stub directory\n      */\n     public void setStubdir(File stubDir) {\n         jointCompilation = true;\n-        configuration.getJointCompilationOptions().put(\"stubDir\", stubDir);\n+        this.stubDir = stubDir;\n     }\n \n     /**\n@@ -928,6 +937,25 @@ public void setStubdir(File stubDir) {\n      * @return the stub directory\n      */\n     public File getStubdir() {\n-        return (File) configuration.getJointCompilationOptions().get(\"stubDir\");\n+        return stubDir;\n+    }\n+\n+    /**\n+     * Set the keepStubs flag. Defaults to false. Set to true for debugging.\n+     * Ignored when forked.\n+     *\n+     * @param keepStubs should stubs be retained\n+     */\n+    public void setKeepStubs(boolean keepStubs) {\n+        this.keepStubs = keepStubs;\n+    }\n+\n+    /**\n+     * Gets the keepStubs flag.\n+     *\n+     * @return the keepStubs flag\n+     */\n+    public boolean getKeepStubs() {\n+        return keepStubs;\n     }\n }",
                "raw_url": "https://github.com/apache/groovy/raw/f233b543f3f887b37888fc5157e650ce27181dc2/src/main/org/codehaus/groovy/ant/Groovyc.java",
                "sha": "f40b55aeeb4934c53a923a333eb0ce711468b39d",
                "status": "modified"
            }
        ],
        "message": "GROOVY-4203: Groovyc Ant task can get a NPE when trying to set stubDir plus doesn't expose keepStubs flag\n\n\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@20009 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/0ebac128a8aa7cad9a20df4616eac00e07f2cceb",
        "repo": "groovy",
        "unit_tests": [
            "GroovycTest.java"
        ]
    },
    "groovy_f5ff44a": {
        "bug_id": "groovy_f5ff44a",
        "commit": "https://github.com/apache/groovy/commit/f5ff44a4a528ca61d9293abf05a9802e63a5b60c",
        "file": [
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/groovy/blob/f5ff44a4a528ca61d9293abf05a9802e63a5b60c/src/main/groovy/lang/GroovyClassLoader.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/groovy/contents/src/main/groovy/lang/GroovyClassLoader.java?ref=f5ff44a4a528ca61d9293abf05a9802e63a5b60c",
                "deletions": 22,
                "filename": "src/main/groovy/lang/GroovyClassLoader.java",
                "patch": "@@ -538,47 +538,48 @@ protected synchronized Class loadClass(final String name, boolean resolve) throw\n             }\n         }\n         \n-        boolean loadGroovyFile = false;\n         Class cls = null;\n         ClassNotFoundException last = null;\n         try {\n             cls = super.loadClass(name, resolve);\n     \n+            boolean recompile = false;\n             if (getTimeStamp(cls) < Long.MAX_VALUE) {\n-                Class[] inters = cls.getInterfaces();\n-                boolean isGroovyObject = false;\n+                Class[] inters = cls.getInterfaces();                \n                 for (int i = 0; i < inters.length; i++) {\n                     if (inters[i].getName().equals(GroovyObject.class.getName())) {\n-                        loadGroovyFile = true;\n+                        recompile=true;\n                         break;\n                     }\n-                }\n+                }                \n             }\n+            if (!recompile) return cls;\n         } catch (ClassNotFoundException cnfe) {\n             last = cnfe; \n-            loadGroovyFile=true;\n         }\n         \n-        if (loadGroovyFile) {\n-            try {\n-                File source = (File) AccessController.doPrivileged(new PrivilegedAction() {\n-                    public Object run() {\n-                        return getSourceFile(name);\n-                    }\n-                });\n-                if (source != null) {\n-                    if ((cls!=null && isSourceNewer(source, cls)) || (cls==null)) {\n-                      cls = parseClass(source);\n-                    }\n+        // try groovy file\n+        try {\n+            File source = (File) AccessController.doPrivileged(new PrivilegedAction() {\n+                public Object run() {\n+                    return getSourceFile(name);\n                 }\n-            } catch (Exception e) {\n-                synchronized (cache) {\n-                    cache.put(name, NOT_RESOLVED.class);\n+            });\n+            if (source != null) {\n+                if ((cls!=null && isSourceNewer(source, cls)) || (cls==null)) {\n+                    cls = parseClass(source);\n                 }\n-                throw new ClassNotFoundException(\"Failed to parse groovy file: \" + name, e);\n             }\n+        } catch (Exception e) {\n+            synchronized (cache) {\n+                cache.put(name, NOT_RESOLVED.class);\n+            }\n+            throw new ClassNotFoundException(\"Failed to parse groovy file: \" + name, e);\n         }\n-        if (cls==null) throw last;\n+        if (cls==null) {\n+            if (last==null) throw new AssertionError(true);\n+            throw last;            \n+        }        \n         return cls;\n     }\n ",
                "raw_url": "https://github.com/apache/groovy/raw/f5ff44a4a528ca61d9293abf05a9802e63a5b60c/src/main/groovy/lang/GroovyClassLoader.java",
                "sha": "4d9dd26e6f30ad3b1f5f17cb23c336e555ea1cb1",
                "status": "modified"
            }
        ],
        "message": "another change to avoid NPEs during handling dependent scripts\n\n\ngit-svn-id: http://svn.codehaus.org/groovy/trunk/groovy/groovy-core@2332 a5544e8c-8a19-0410-ba12-f9af4593a198",
        "parent": "https://github.com/apache/groovy/commit/5835d302ae2e9934160274d016bec495898d0c5d",
        "repo": "groovy",
        "unit_tests": [
            "GroovyClassLoaderTest.java"
        ]
    }
}