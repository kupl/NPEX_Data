[
    {
        "repo": "beam",
        "commit": "https://github.com/apache/beam/commit/2c8a6546af2adb1f7694f29a092338898f851d16",
        "bug_id": "beam_2c8a654",
        "message": "Fix NPE in BigQueryIO.TransformingReader",
        "parent": "https://github.com/apache/beam/commit/7ac8d6ded34bc5f46a1ddd350a00da122693d648",
        "patched_files": [
            "SourceTestUtils.java",
            "BigQueryIO.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 132,
                "raw_url": "https://github.com/apache/beam/raw/2c8a6546af2adb1f7694f29a092338898f851d16/sdks/java/core/src/main/java/org/apache/beam/sdk/testing/SourceTestUtils.java",
                "contents_url": "https://api.github.com/repos/apache/beam/contents/sdks/java/core/src/main/java/org/apache/beam/sdk/testing/SourceTestUtils.java?ref=2c8a6546af2adb1f7694f29a092338898f851d16",
                "filename": "sdks/java/core/src/main/java/org/apache/beam/sdk/testing/SourceTestUtils.java",
                "deletions": 0,
                "sha": "9ce9c5e518da8ea391e1e2ca09584d7ebf2a2752",
                "blob_url": "https://github.com/apache/beam/blob/2c8a6546af2adb1f7694f29a092338898f851d16/sdks/java/core/src/main/java/org/apache/beam/sdk/testing/SourceTestUtils.java",
                "patch": "@@ -17,6 +17,8 @@\n  */\n package org.apache.beam.sdk.testing;\n \n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n import static org.hamcrest.Matchers.containsInAnyOrder;\n import static org.hamcrest.Matchers.equalTo;\n import static org.junit.Assert.assertEquals;\n@@ -27,24 +29,32 @@\n \n import org.apache.beam.sdk.coders.Coder;\n import org.apache.beam.sdk.io.BoundedSource;\n+import org.apache.beam.sdk.io.BoundedSource.BoundedReader;\n import org.apache.beam.sdk.io.Source;\n import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.sdk.transforms.display.DisplayData;\n import org.apache.beam.sdk.values.KV;\n \n+import com.google.common.collect.ImmutableList;\n+\n+import org.joda.time.Instant;\n import org.junit.Assert;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.NoSuchElementException;\n import java.util.Objects;\n import java.util.concurrent.Callable;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n import java.util.concurrent.Future;\n \n+import javax.annotation.Nullable;\n+\n /**\n  * Helper functions and test harnesses for checking correctness of {@link Source}\n  * implementations.\n@@ -673,4 +683,126 @@ public SplitAtFractionResult(int numPrimaryItems, int numResidualItems) {\n         numItemsToReadBeforeSplitting, fraction, options);\n     return (res.numResidualItems > 0);\n   }\n+\n+  /**\n+   * Returns an equivalent unsplittable {@code BoundedSource<T>}.\n+   *\n+   * <p>It forwards most methods to the given {@code boundedSource}, except:\n+   * <ol>\n+   * <li> {@link BoundedSource#splitIntoBundles} rejects initial splitting\n+   * by returning itself in a list.\n+   * <li> {@link BoundedReader#splitAtFraction} rejects dynamic splitting by returning null.\n+   * </ol>\n+   */\n+  public static <T> BoundedSource<T> toUnsplittableSource(BoundedSource<T> boundedSource) {\n+    return new UnsplittableSource<>(boundedSource);\n+  }\n+\n+  private static class UnsplittableSource<T> extends BoundedSource<T> {\n+\n+    private final BoundedSource<T> boundedSource;\n+\n+    private UnsplittableSource(BoundedSource<T> boundedSource) {\n+      this.boundedSource = checkNotNull(boundedSource, \"boundedSource\");\n+    }\n+\n+    @Override\n+    public void populateDisplayData(DisplayData.Builder builder) {\n+      this.boundedSource.populateDisplayData(builder);\n+    }\n+\n+    @Override\n+    public List<? extends BoundedSource<T>> splitIntoBundles(\n+        long desiredBundleSizeBytes, PipelineOptions options) throws Exception {\n+      return ImmutableList.of(this);\n+    }\n+\n+    @Override\n+    public long getEstimatedSizeBytes(PipelineOptions options) throws Exception {\n+      return boundedSource.getEstimatedSizeBytes(options);\n+    }\n+\n+    @Override\n+    public boolean producesSortedKeys(PipelineOptions options) throws Exception {\n+      return boundedSource.producesSortedKeys(options);\n+    }\n+\n+    @Override\n+    public BoundedReader<T> createReader(PipelineOptions options) throws IOException {\n+      return new UnsplittableReader<>(boundedSource, boundedSource.createReader(options));\n+    }\n+\n+    @Override\n+    public void validate() {\n+      boundedSource.validate();\n+    }\n+\n+    @Override\n+    public Coder<T> getDefaultOutputCoder() {\n+      return boundedSource.getDefaultOutputCoder();\n+    }\n+\n+    private static class UnsplittableReader<T> extends BoundedReader<T> {\n+\n+      private final BoundedSource<T> boundedSource;\n+      private final BoundedReader<T> boundedReader;\n+\n+      private UnsplittableReader(BoundedSource<T> boundedSource, BoundedReader<T> boundedReader) {\n+        this.boundedSource = checkNotNull(boundedSource, \"boundedSource\");\n+        this.boundedReader = checkNotNull(boundedReader, \"boundedReader\");\n+      }\n+\n+      @Override\n+      public BoundedSource<T> getCurrentSource() {\n+        return boundedSource;\n+      }\n+\n+      @Override\n+      public boolean start() throws IOException {\n+        return boundedReader.start();\n+      }\n+\n+      @Override\n+      public boolean advance() throws IOException {\n+        return boundedReader.advance();\n+      }\n+\n+      @Override\n+      public T getCurrent() throws NoSuchElementException {\n+        return boundedReader.getCurrent();\n+      }\n+\n+      @Override\n+      public void close() throws IOException {\n+        boundedReader.close();\n+      }\n+\n+      @Override\n+      @Nullable\n+      public BoundedSource<T> splitAtFraction(double fraction) {\n+        return null;\n+      }\n+\n+      @Override\n+      @Nullable\n+      public Double getFractionConsumed() {\n+        return boundedReader.getFractionConsumed();\n+      }\n+\n+      @Override\n+      public long getSplitPointsConsumed() {\n+        return boundedReader.getSplitPointsConsumed();\n+      }\n+\n+      @Override\n+      public long getSplitPointsRemaining() {\n+        return boundedReader.getSplitPointsRemaining();\n+      }\n+\n+      @Override\n+      public Instant getCurrentTimestamp() throws NoSuchElementException {\n+        return boundedReader.getCurrentTimestamp();\n+      }\n+    }\n+  }\n }",
                "changes": 132
            },
            {
                "status": "added",
                "additions": 66,
                "raw_url": "https://github.com/apache/beam/raw/2c8a6546af2adb1f7694f29a092338898f851d16/sdks/java/core/src/test/java/org/apache/beam/sdk/testing/SourceTestUtilsTest.java",
                "contents_url": "https://api.github.com/repos/apache/beam/contents/sdks/java/core/src/test/java/org/apache/beam/sdk/testing/SourceTestUtilsTest.java?ref=2c8a6546af2adb1f7694f29a092338898f851d16",
                "filename": "sdks/java/core/src/test/java/org/apache/beam/sdk/testing/SourceTestUtilsTest.java",
                "deletions": 0,
                "sha": "f2b332bb7dd3ac4af884b66022f55e7a67b873e1",
                "blob_url": "https://github.com/apache/beam/blob/2c8a6546af2adb1f7694f29a092338898f851d16/sdks/java/core/src/test/java/org/apache/beam/sdk/testing/SourceTestUtilsTest.java",
                "patch": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.testing;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+\n+import org.apache.beam.sdk.io.BoundedSource;\n+import org.apache.beam.sdk.io.BoundedSource.BoundedReader;\n+import org.apache.beam.sdk.io.CountingSource;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.sdk.options.PipelineOptionsFactory;\n+\n+import com.google.common.collect.Sets;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * Tests for {@link SourceTestUtils}.\n+ */\n+@RunWith(JUnit4.class)\n+public class SourceTestUtilsTest {\n+\n+  @Test\n+  public void testToUnsplittableSource() throws Exception {\n+    PipelineOptions options = PipelineOptionsFactory.create();\n+    BoundedSource<Long> baseSource = CountingSource.upTo(100);\n+    BoundedSource<Long> unsplittableSource = SourceTestUtils.toUnsplittableSource(baseSource);\n+    List<?> splits = unsplittableSource.splitIntoBundles(1, options);\n+    assertEquals(splits.size(), 1);\n+    assertEquals(splits.get(0), unsplittableSource);\n+\n+    BoundedReader<Long> unsplittableReader = unsplittableSource.createReader(options);\n+    assertEquals(0, unsplittableReader.getFractionConsumed(), 1e-15);\n+\n+    Set<Long> expected = Sets.newHashSet(SourceTestUtils.readFromSource(baseSource, options));\n+    Set<Long> actual = Sets.newHashSet();\n+    actual.addAll(SourceTestUtils.readNItemsFromUnstartedReader(unsplittableReader, 40));\n+    assertNull(unsplittableReader.splitAtFraction(0.5));\n+    actual.addAll(SourceTestUtils.readRemainingFromReader(unsplittableReader, true /* started */));\n+    assertEquals(1, unsplittableReader.getFractionConsumed(), 1e-15);\n+\n+    assertEquals(100, actual.size());\n+    assertEquals(Sets.newHashSet(expected), Sets.newHashSet(actual));\n+  }\n+}",
                "changes": 66
            },
            {
                "status": "modified",
                "additions": 6,
                "raw_url": "https://github.com/apache/beam/raw/2c8a6546af2adb1f7694f29a092338898f851d16/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIO.java",
                "contents_url": "https://api.github.com/repos/apache/beam/contents/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIO.java?ref=2c8a6546af2adb1f7694f29a092338898f851d16",
                "filename": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIO.java",
                "deletions": 6,
                "sha": "e61dcca993a00010e16c33e6c4c0585d0090107d",
                "blob_url": "https://github.com/apache/beam/blob/2c8a6546af2adb1f7694f29a092338898f851d16/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIO.java",
                "patch": "@@ -1123,9 +1123,9 @@ public void close() throws IOException {\n         BoundedSource<T> boundedSource,\n         SerializableFunction<T, V> function,\n         Coder<V> outputCoder) {\n-      this.boundedSource = boundedSource;\n-      this.function = function;\n-      this.outputCoder = outputCoder;\n+      this.boundedSource = checkNotNull(boundedSource, \"boundedSource\");\n+      this.function = checkNotNull(function, \"function\");\n+      this.outputCoder = checkNotNull(outputCoder, \"outputCoder\");\n     }\n \n     @Override\n@@ -1170,7 +1170,7 @@ public void validate() {\n       private final BoundedReader<T> boundedReader;\n \n       private TransformingReader(BoundedReader<T> boundedReader) {\n-        this.boundedReader = boundedReader;\n+        this.boundedReader = checkNotNull(boundedReader, \"boundedReader\");\n       }\n \n       @Override\n@@ -1201,8 +1201,8 @@ public void close() throws IOException {\n \n       @Override\n       public synchronized BoundedSource<V> splitAtFraction(double fraction) {\n-        return new TransformingSource<>(\n-            boundedReader.splitAtFraction(fraction), function, outputCoder);\n+        BoundedSource<T> split = boundedReader.splitAtFraction(fraction);\n+        return split == null ? null : new TransformingSource<>(split, function, outputCoder);\n       }\n \n       @Override",
                "changes": 12
            },
            {
                "status": "modified",
                "additions": 31,
                "raw_url": "https://github.com/apache/beam/raw/2c8a6546af2adb1f7694f29a092338898f851d16/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOTest.java",
                "contents_url": "https://api.github.com/repos/apache/beam/contents/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOTest.java?ref=2c8a6546af2adb1f7694f29a092338898f851d16",
                "filename": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOTest.java",
                "deletions": 0,
                "sha": "ca60696960e8dda1bc94c1e80d5f13c6ef377f89",
                "blob_url": "https://github.com/apache/beam/blob/2c8a6546af2adb1f7694f29a092338898f851d16/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIOTest.java",
                "patch": "@@ -1215,6 +1215,37 @@ public String apply(Long input) {\n         stringSource, stringSource.splitIntoBundles(100, options), options);\n   }\n \n+  @Test\n+  public void testTransformingSourceUnsplittable() throws Exception {\n+    int numElements = 10000;\n+    @SuppressWarnings(\"deprecation\")\n+    BoundedSource<Long> longSource =\n+        SourceTestUtils.toUnsplittableSource(CountingSource.upTo(numElements));\n+    SerializableFunction<Long, String> toStringFn =\n+        new SerializableFunction<Long, String>() {\n+          @Override\n+          public String apply(Long input) {\n+            return input.toString();\n+          }\n+        };\n+    BoundedSource<String> stringSource =\n+        new TransformingSource<>(longSource, toStringFn, StringUtf8Coder.of());\n+\n+    List<String> expected = Lists.newArrayList();\n+    for (int i = 0; i < numElements; i++) {\n+      expected.add(String.valueOf(i));\n+    }\n+\n+    PipelineOptions options = PipelineOptionsFactory.create();\n+    Assert.assertThat(\n+        SourceTestUtils.readFromSource(stringSource, options), CoreMatchers.is(expected));\n+    SourceTestUtils.assertSplitAtFractionBehavior(\n+        stringSource, 100, 0.3, ExpectedSplitOutcome.MUST_BE_CONSISTENT_IF_SUCCEEDS, options);\n+\n+    SourceTestUtils.assertSourcesEqualReferenceSource(\n+        stringSource, stringSource.splitIntoBundles(100, options), options);\n+  }\n+\n   @Test\n   @Category(RunnableOnService.class)\n   public void testPassThroughThenCleanup() throws Exception {",
                "changes": 31
            }
        ],
        "unit_tests": [
            "SourceTestUtilsTest.java",
            "BigQueryIOTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "sdks/java/core/src/test/java/org/apache/beam/sdk/testing/SourceTestUtilsTest.java",
        "buggy_files": [
            "sdks/java/core/src/main/java/org/apache/beam/sdk/testing/SourceTestUtils.java",
            "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIO.java"
        ],
        "fixed": true
    }
]