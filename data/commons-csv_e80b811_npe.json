[
    {
        "repo": "commons-csv",
        "commit": "https://github.com/apache/commons-csv/commit/e80b8112a719b6b213e833bd0d1ee27f55bfe5f4",
        "bug_id": "commons-csv_e80b811",
        "message": "Fixed the NullPointerException on null values in CSVPrinter and print an empty value instead (SANDBOX-209)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1297306 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-csv/commit/fafacd179d4a564b3176014039eef05669a26ffb",
        "patched_files": [
            "CSVPrinter.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 13,
                "raw_url": "https://github.com/apache/commons-csv/raw/e80b8112a719b6b213e833bd0d1ee27f55bfe5f4/src/main/java/org/apache/commons/csv/CSVPrinter.java",
                "contents_url": "https://api.github.com/repos/apache/commons-csv/contents/src/main/java/org/apache/commons/csv/CSVPrinter.java?ref=e80b8112a719b6b213e833bd0d1ee27f55bfe5f4",
                "filename": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
                "deletions": 14,
                "sha": "aaa34e6651110334bc0549f8eb4afbc4acb37fa3",
                "blob_url": "https://github.com/apache/commons-csv/blob/e80b8112a719b6b213e833bd0d1ee27f55bfe5f4/src/main/java/org/apache/commons/csv/CSVPrinter.java",
                "patch": "@@ -97,7 +97,7 @@ public void println(String... values) throws IOException {\n      * @param comment the comment to output\n      */\n     public void printComment(String comment) throws IOException {\n-        if (this.format.isCommentingDisabled()) {\n+        if (format.isCommentingDisabled()) {\n             return;\n         }\n         if (!newLine) {\n@@ -127,13 +127,7 @@ public void printComment(String comment) throws IOException {\n     }\n \n \n-    private void print(char[] value, int offset, int len, boolean checkForEscape) throws IOException {\n-        if (!checkForEscape) {\n-            printSep();\n-            out.write(value, offset, len);\n-            return;\n-        }\n-        \n+    private void print(char[] value, int offset, int len) throws IOException {        \n         if (format.isEncapsulating()) {\n             printAndEncapsulate(value, offset, len);\n         } else if (format.isEscaping()) {\n@@ -148,7 +142,7 @@ void printSep() throws IOException {\n         if (newLine) {\n             newLine = false;\n         } else {\n-            out.write(this.format.getDelimiter());\n+            out.write(format.getDelimiter());\n         }\n     }\n \n@@ -159,8 +153,8 @@ void printAndEscape(char[] value, int offset, int len) throws IOException {\n \n         printSep();\n \n-        char delim = this.format.getDelimiter();\n-        char escape = this.format.getEscape();\n+        char delim = format.getDelimiter();\n+        char escape = format.getEscape();\n \n         while (pos < end) {\n             char c = value[pos];\n@@ -201,8 +195,8 @@ void printAndEncapsulate(char[] value, int offset, int len) throws IOException {\n \n         printSep();\n \n-        char delim = this.format.getDelimiter();\n-        char encapsulator = this.format.getEncapsulator();\n+        char delim = format.getDelimiter();\n+        char encapsulator = format.getEncapsulator();\n \n         if (len <= 0) {\n             // always quote an empty token that is the first\n@@ -288,6 +282,11 @@ void printAndEncapsulate(char[] value, int offset, int len) throws IOException {\n      * @param value value to be outputted.\n      */\n     public void print(String value, boolean checkForEscape) throws IOException {\n+        if (value == null) {\n+            // null values are considered empty\n+            value = \"\";\n+        }\n+        \n         if (!checkForEscape) {\n             // write directly from string\n             printSep();\n@@ -300,7 +299,7 @@ public void print(String value, boolean checkForEscape) throws IOException {\n         }\n \n         value.getChars(0, value.length(), buf, 0);\n-        print(buf, 0, value.length(), checkForEscape);\n+        print(buf, 0, value.length());\n     }\n \n     /**",
                "changes": 27
            },
            {
                "status": "modified",
                "additions": 7,
                "raw_url": "https://github.com/apache/commons-csv/raw/e80b8112a719b6b213e833bd0d1ee27f55bfe5f4/src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                "contents_url": "https://api.github.com/repos/apache/commons-csv/contents/src/test/java/org/apache/commons/csv/CSVPrinterTest.java?ref=e80b8112a719b6b213e833bd0d1ee27f55bfe5f4",
                "filename": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                "deletions": 0,
                "sha": "ef2ad002be8a5e8f40205ec16f92ddfe2efc1697",
                "blob_url": "https://github.com/apache/commons-csv/blob/e80b8112a719b6b213e833bd0d1ee27f55bfe5f4/src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                "patch": "@@ -92,6 +92,13 @@ public void testExcelPrinter2() throws IOException {\n         assertEquals(\"\\\"a,b\\\",b\" + lineSeparator, sw.toString());\n     }\n \n+    public void testPrintNullValues() throws IOException {\n+        StringWriter sw = new StringWriter();\n+        CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n+        printer.println(\"a\", null, \"b\");\n+        assertEquals(\"a,,b\" + lineSeparator, sw.toString());\n+    }\n+\n     public void testDisabledComment() throws IOException {\n         StringWriter sw = new StringWriter();\n         CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);",
                "changes": 7
            }
        ],
        "unit_tests": [
            "CSVPrinterTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "buggy_files": [
            "src/main/java/org/apache/commons/csv/CSVPrinter.java"
        ],
        "fixed": true
    }
]