[
    {
        "repo": "xmlgraphics-fop-pdf-images",
        "message": "FOP-2772: NPE where pdf used as background image\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlgraphics/fop-pdf-images/trunk@1831255 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/xmlgraphics-fop-pdf-images/commit/85249736684c2b77c7034d95e9a3f0a2ba0111b4",
        "parent": "https://github.com/apache/xmlgraphics-fop-pdf-images/commit/182c546a4751e2864bb9b6ca84b8ef2b6cf57a8a",
        "bug_id": "xmlgraphics-fop-pdf-images_1",
        "file": [
            {
                "sha": "3612befc947b84fe239bceda20b47805c816a110",
                "filename": "src/java/org/apache/fop/render/pdf/pdfbox/AbstractPDFBoxHandler.java",
                "blob_url": "https://github.com/apache/xmlgraphics-fop-pdf-images/blob/85249736684c2b77c7034d95e9a3f0a2ba0111b4/src/java/org/apache/fop/render/pdf/pdfbox/AbstractPDFBoxHandler.java",
                "raw_url": "https://github.com/apache/xmlgraphics-fop-pdf-images/raw/85249736684c2b77c7034d95e9a3f0a2ba0111b4/src/java/org/apache/fop/render/pdf/pdfbox/AbstractPDFBoxHandler.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/xmlgraphics-fop-pdf-images/contents/src/java/org/apache/fop/render/pdf/pdfbox/AbstractPDFBoxHandler.java?ref=85249736684c2b77c7034d95e9a3f0a2ba0111b4",
                "patch": "@@ -110,7 +110,7 @@ protected String createStreamForPDF(ImagePDF image, PDFPage targetPage, FOUserAg\n         }\n         String stream = adapter.createStreamFromPDFBoxPage(pddoc, page, originalImageUri,\n                  at, fontinfo, pos);\n-        if (userAgent.isAccessibilityEnabled()) {\n+        if (userAgent.isAccessibilityEnabled() && curentSessionElem != null) {\n             TaggedPDFConductor conductor = new TaggedPDFConductor(curentSessionElem, handler, page, adapter);\n             conductor.handleLogicalStructure(pddoc);\n         }",
                "deletions": 1
            },
            {
                "sha": "d3558b383b5ebbb6960467109ed9d1bb96bb9872",
                "filename": "test/java/org/apache/fop/render/pdf/PDFBoxAdapterTestCase.java",
                "blob_url": "https://github.com/apache/xmlgraphics-fop-pdf-images/blob/85249736684c2b77c7034d95e9a3f0a2ba0111b4/test/java/org/apache/fop/render/pdf/PDFBoxAdapterTestCase.java",
                "raw_url": "https://github.com/apache/xmlgraphics-fop-pdf-images/raw/85249736684c2b77c7034d95e9a3f0a2ba0111b4/test/java/org/apache/fop/render/pdf/PDFBoxAdapterTestCase.java",
                "status": "modified",
                "changes": 17,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/xmlgraphics-fop-pdf-images/contents/test/java/org/apache/fop/render/pdf/PDFBoxAdapterTestCase.java?ref=85249736684c2b77c7034d95e9a3f0a2ba0111b4",
                "patch": "@@ -543,4 +543,21 @@ public void testNoPageResource() throws IOException {\n         getPDFBoxAdapter(false).createStreamFromPDFBoxPage(doc, page, CFF1, at, new FontInfo(), new Rectangle());\n         doc.close();\n     }\n+\n+    @Test\n+    public void testPDFBoxImageHandlerAccessibilityEnabled() throws Exception {\n+        ImageInfo imgi = new ImageInfo(\"a\", \"b\");\n+        PDDocument doc = PDDocument.load(new File(SHADING));\n+        ImagePDF img = new ImagePDF(imgi, doc);\n+        PDFDocument pdfdoc = new PDFDocument(\"\");\n+        PDFPage pdfpage = getPDFPage(pdfdoc);\n+        pdfpage.setDocument(pdfdoc);\n+        PDFContentGenerator con = new PDFContentGenerator(pdfdoc, null, null);\n+        FOUserAgent mockedAgent = mock(FOUserAgent.class);\n+        when(mockedAgent.isAccessibilityEnabled()).thenReturn(true);\n+        when(mockedAgent.getPDFObjectCache()).thenReturn(new SoftMapCache(true));\n+        PDFRenderingContext c = new PDFRenderingContext(mockedAgent, con, pdfpage, null);\n+        c.setPageNumbers(new HashMap<Integer, PDFArray>());\n+        new PDFBoxImageHandler().handleImage(c, img, new Rectangle());\n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "xmlgraphics-fop-pdf-images",
        "message": "FOP-2746: PDF to PDF NPE during structuretree merge\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlgraphics/fop-pdf-images/trunk@1810355 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/xmlgraphics-fop-pdf-images/commit/ec30e9247a8115bc9404f13226f24f2589527b80",
        "parent": "https://github.com/apache/xmlgraphics-fop-pdf-images/commit/ae06a2da19915b1d185b2c4de426b8effac7d161",
        "bug_id": "xmlgraphics-fop-pdf-images_2",
        "file": [
            {
                "sha": "2201c9cef317cba4f22e7a073c6ce91bb58884a8",
                "filename": "src/java/org/apache/fop/render/pdf/pdfbox/StructureTreeMerger.java",
                "blob_url": "https://github.com/apache/xmlgraphics-fop-pdf-images/blob/ec30e9247a8115bc9404f13226f24f2589527b80/src/java/org/apache/fop/render/pdf/pdfbox/StructureTreeMerger.java",
                "raw_url": "https://github.com/apache/xmlgraphics-fop-pdf-images/raw/ec30e9247a8115bc9404f13226f24f2589527b80/src/java/org/apache/fop/render/pdf/pdfbox/StructureTreeMerger.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/xmlgraphics-fop-pdf-images/contents/src/java/org/apache/fop/render/pdf/pdfbox/StructureTreeMerger.java?ref=ec30e9247a8115bc9404f13226f24f2589527b80",
                "patch": "@@ -132,8 +132,10 @@ private void createParents(COSArray markedContentParents) throws IOException {\n         for (COSBase entry : markedContentParents) {\n             COSObject elemCos = (COSObject)entry;\n             COSObject elemParent = (COSObject)elemCos.getItem(COSName.P);\n-            PDFStructElem elem = structElemCache.get((int)elemCos.getObjectNumber());\n-            createParents(elemCos, elemParent, elem);\n+            if (elemParent != null) {\n+                PDFStructElem elem = structElemCache.get((int)elemCos.getObjectNumber());\n+                createParents(elemCos, elemParent, elem);\n+            }\n         }\n     }\n ",
                "deletions": 2
            },
            {
                "sha": "bad5ae9015397f4e094aaef13b6899f619bf5e86",
                "filename": "test/java/org/apache/fop/render/pdf/StructureTreeMergerTestCase.java",
                "blob_url": "https://github.com/apache/xmlgraphics-fop-pdf-images/blob/ec30e9247a8115bc9404f13226f24f2589527b80/test/java/org/apache/fop/render/pdf/StructureTreeMergerTestCase.java",
                "raw_url": "https://github.com/apache/xmlgraphics-fop-pdf-images/raw/ec30e9247a8115bc9404f13226f24f2589527b80/test/java/org/apache/fop/render/pdf/StructureTreeMergerTestCase.java",
                "status": "modified",
                "changes": 13,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/xmlgraphics-fop-pdf-images/contents/test/java/org/apache/fop/render/pdf/StructureTreeMergerTestCase.java?ref=ec30e9247a8115bc9404f13226f24f2589527b80",
                "patch": "@@ -218,4 +218,17 @@ public void testDirectDescedants() throws IOException {\n         String test = name.getName();\n         Assert.assertEquals(test, \"P\");\n     }\n+\n+    @Test\n+    public void testEmptyDict() throws IOException {\n+        adapter = new PDFBoxAdapter(pdfPage, new HashMap(), new HashMap<Integer, PDFArray>());\n+        StructureTreeMerger structureTreeMerger = new StructureTreeMerger(null, null, adapter, null);\n+        COSArray cosArray = new COSArray();\n+        COSObject o = new COSObject(new COSDictionary());\n+        o.setObjectNumber(1);\n+        o.setGenerationNumber(1);\n+        cosArray.add(o);\n+        structureTreeMerger.copyStructure(cosArray);\n+        structureTreeMerger.addToPageParentTreeArray();\n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "xmlgraphics-fop-pdf-images",
        "message": "FOP-2698: NPE when page resource missing\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlgraphics/fop-pdf-images/trunk@1785316 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/xmlgraphics-fop-pdf-images/commit/b8262eb1055d95998c275994f50a9ed141e31a68",
        "parent": "https://github.com/apache/xmlgraphics-fop-pdf-images/commit/320458cf29b29c265d466af1e694131319cc44e5",
        "bug_id": "xmlgraphics-fop-pdf-images_3",
        "file": [
            {
                "sha": "702fcf6c8e2afcc2577c2d115003f7b19a4d7be6",
                "filename": "src/java/org/apache/fop/render/pdf/pdfbox/PDFBoxAdapter.java",
                "blob_url": "https://github.com/apache/xmlgraphics-fop-pdf-images/blob/b8262eb1055d95998c275994f50a9ed141e31a68/src/java/org/apache/fop/render/pdf/pdfbox/PDFBoxAdapter.java",
                "raw_url": "https://github.com/apache/xmlgraphics-fop-pdf-images/raw/b8262eb1055d95998c275994f50a9ed141e31a68/src/java/org/apache/fop/render/pdf/pdfbox/PDFBoxAdapter.java",
                "status": "modified",
                "changes": 24,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/xmlgraphics-fop-pdf-images/contents/src/java/org/apache/fop/render/pdf/pdfbox/PDFBoxAdapter.java?ref=b8262eb1055d95998c275994f50a9ed141e31a68",
                "patch": "@@ -348,10 +348,10 @@ public String createStreamFromPDFBoxPage(PDDocument sourceDoc, PDPage page, Stri\n         if (pageNumbers.containsKey(targetPage.getPageIndex())) {\n             pageNumbers.get(targetPage.getPageIndex()).set(0, targetPage.makeReference());\n         }\n-        PDResources sourcePageResources = page.getResources();\n+        COSDictionary sourcePageResources = getResources(page);\n         PDStream pdStream = getContents(page);\n \n-        COSDictionary fonts = (COSDictionary)sourcePageResources.getCOSObject().getDictionaryObject(COSName.FONT);\n+        COSDictionary fonts = (COSDictionary)sourcePageResources.getDictionaryObject(COSName.FONT);\n         COSDictionary fontsBackup = null;\n         UniqueName uniqueName = new UniqueName(key, sourcePageResources);\n         String newStream = null;\n@@ -375,8 +375,8 @@ public String createStreamFromPDFBoxPage(PDDocument sourceDoc, PDPage page, Stri\n \n         }\n         pdStream = new PDStream(sourceDoc, new ByteArrayInputStream(newStream.getBytes(\"ISO-8859-1\")));\n-        mergeXObj(sourcePageResources.getCOSObject(), fontinfo, uniqueName);\n-        PDFDictionary pageResources = (PDFDictionary)cloneForNewDocument(sourcePageResources.getCOSObject());\n+        mergeXObj(sourcePageResources, fontinfo, uniqueName);\n+        PDFDictionary pageResources = (PDFDictionary)cloneForNewDocument(sourcePageResources);\n \n         PDFDictionary fontDict = (PDFDictionary)pageResources.get(\"Font\");\n         if (fontDict != null && pdfDoc.isMergeFontsEnabled()) {\n@@ -392,9 +392,9 @@ public String createStreamFromPDFBoxPage(PDDocument sourceDoc, PDPage page, Stri\n                 }\n             }\n         }\n-        updateXObj(sourcePageResources.getCOSObject(), pageResources);\n+        updateXObj(sourcePageResources, pageResources);\n         if (fontsBackup != null) {\n-            sourcePageResources.getCOSObject().setItem(COSName.FONT, fontsBackup);\n+            sourcePageResources.setItem(COSName.FONT, fontsBackup);\n         }\n \n         COSStream originalPageContents = pdStream.getCOSObject();\n@@ -462,6 +462,14 @@ private PDStream getContents(PDPage page) throws IOException {\n         return pdStream;\n     }\n \n+    private COSDictionary getResources(PDPage page) {\n+        PDResources res = page.getResources();\n+        if (res == null) {\n+            return new COSDictionary();\n+        }\n+        return res.getCOSObject();\n+    }\n+\n     private void mergeXObj(COSDictionary sourcePageResources, FontInfo fontinfo, UniqueName uniqueName)\n         throws IOException {\n         COSDictionary xobj = (COSDictionary) sourcePageResources.getDictionaryObject(COSName.XOBJECT);\n@@ -515,15 +523,15 @@ private void updateXObj(COSDictionary sourcePageResources, PDFDictionary pageRes\n         }\n     }\n \n-    private void transferPageDict(COSDictionary fonts, UniqueName uniqueName, PDResources sourcePageResources)\n+    private void transferPageDict(COSDictionary fonts, UniqueName uniqueName, COSDictionary sourcePageResources)\n         throws IOException {\n         if (fonts != null) {\n             for (Map.Entry<COSName, COSBase> f : fonts.entrySet()) {\n                 String name = uniqueName.getName(f.getKey());\n                 targetPage.getPDFResources().addFont(name, (PDFDictionary)cloneForNewDocument(f.getValue()));\n             }\n         }\n-        for (Map.Entry<COSName, COSBase> e : sourcePageResources.getCOSObject().entrySet()) {\n+        for (Map.Entry<COSName, COSBase> e : sourcePageResources.entrySet()) {\n             transferDict(e, uniqueName);\n         }\n     }",
                "deletions": 8
            },
            {
                "sha": "4bd61b620759dc405f720821aace9827a085d8ec",
                "filename": "src/java/org/apache/fop/render/pdf/pdfbox/UniqueName.java",
                "blob_url": "https://github.com/apache/xmlgraphics-fop-pdf-images/blob/b8262eb1055d95998c275994f50a9ed141e31a68/src/java/org/apache/fop/render/pdf/pdfbox/UniqueName.java",
                "raw_url": "https://github.com/apache/xmlgraphics-fop-pdf-images/raw/b8262eb1055d95998c275994f50a9ed141e31a68/src/java/org/apache/fop/render/pdf/pdfbox/UniqueName.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/xmlgraphics-fop-pdf-images/contents/src/java/org/apache/fop/render/pdf/pdfbox/UniqueName.java?ref=b8262eb1055d95998c275994f50a9ed141e31a68",
                "patch": "@@ -25,15 +25,14 @@\n import org.apache.pdfbox.cos.COSDictionary;\n import org.apache.pdfbox.cos.COSName;\n import org.apache.pdfbox.cos.COSObject;\n-import org.apache.pdfbox.pdmodel.PDResources;\n \n public class UniqueName {\n     private String key;\n     private List<COSName> resourceNames;\n \n-    public UniqueName(String key, PDResources sourcePageResources) {\n+    public UniqueName(String key, COSDictionary sourcePageResources) {\n         this.key = Integer.toString(key.hashCode());\n-        resourceNames = getResourceNames(sourcePageResources.getCOSObject());\n+        resourceNames = getResourceNames(sourcePageResources);\n     }\n \n     protected String getName(COSName cn) {",
                "deletions": 3
            },
            {
                "sha": "c9dd62075a08c432dfbe59b00c6f297be9c8724e",
                "filename": "test/java/org/apache/fop/render/pdf/PDFBoxAdapterTestCase.java",
                "blob_url": "https://github.com/apache/xmlgraphics-fop-pdf-images/blob/b8262eb1055d95998c275994f50a9ed141e31a68/test/java/org/apache/fop/render/pdf/PDFBoxAdapterTestCase.java",
                "raw_url": "https://github.com/apache/xmlgraphics-fop-pdf-images/raw/b8262eb1055d95998c275994f50a9ed141e31a68/test/java/org/apache/fop/render/pdf/PDFBoxAdapterTestCase.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/xmlgraphics-fop-pdf-images/contents/test/java/org/apache/fop/render/pdf/PDFBoxAdapterTestCase.java?ref=b8262eb1055d95998c275994f50a9ed141e31a68",
                "patch": "@@ -460,4 +460,14 @@ public void testErrorMsgToPDF() throws IOException {\n         }\n         Assert.assertTrue(msg.startsWith(\"Error on PDF page: \" + ERROR));\n     }\n+\n+    @Test\n+    public void testNoPageResource() throws IOException {\n+        PDDocument doc = PDDocument.load(new File(CFF1));\n+        PDPage page = doc.getPage(0);\n+        page.setResources(null);\n+        AffineTransform at = new AffineTransform();\n+        getPDFBoxAdapter(false).createStreamFromPDFBoxPage(doc, page, CFF1, at, new FontInfo(), new Rectangle());\n+        doc.close();\n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "xmlgraphics-fop-pdf-images",
        "message": "FOP-2719: PDF to PS NPE when encode param not set\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlgraphics/fop-pdf-images/trunk@1801064 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/xmlgraphics-fop-pdf-images/commit/7a00f7e5707d805fe39eab59e539d2e376cddb3b",
        "parent": "https://github.com/apache/xmlgraphics-fop-pdf-images/commit/97bfc3be063948e20ec5cfd5ebd807a62c6e2e68",
        "bug_id": "xmlgraphics-fop-pdf-images_4",
        "file": [
            {
                "sha": "ad7c8478c8976a941ed8e9b9f33b6f01814eab3e",
                "filename": "src/java/org/apache/fop/render/pdf/pdfbox/PSPDFGraphics2D.java",
                "blob_url": "https://github.com/apache/xmlgraphics-fop-pdf-images/blob/7a00f7e5707d805fe39eab59e539d2e376cddb3b/src/java/org/apache/fop/render/pdf/pdfbox/PSPDFGraphics2D.java",
                "raw_url": "https://github.com/apache/xmlgraphics-fop-pdf-images/raw/7a00f7e5707d805fe39eab59e539d2e376cddb3b/src/java/org/apache/fop/render/pdf/pdfbox/PSPDFGraphics2D.java",
                "status": "modified",
                "changes": 18,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/xmlgraphics-fop-pdf-images/contents/src/java/org/apache/fop/render/pdf/pdfbox/PSPDFGraphics2D.java?ref=7a00f7e5707d805fe39eab59e539d2e376cddb3b",
                "patch": "@@ -173,7 +173,7 @@ private void transformCoords(float[] coords, Paint paint, boolean axialShading)\n         }\n     }\n \n-    private static Function getFunction(PDFunction f) throws IOException {\n+    protected static Function getFunction(PDFunction f) throws IOException {\n         if (f instanceof PDFunctionType3) {\n             PDFunctionType3 sourceFT3 = (PDFunctionType3) f;\n             float[] bounds = sourceFT3.getBounds().toFloatArray();\n@@ -193,11 +193,11 @@ private static Function getFunction(PDFunction f) throws IOException {\n             COSDictionary s = f.getCOSObject();\n             assert s instanceof COSStream;\n             COSStream stream = (COSStream) s;\n-            COSArray encode = (COSArray) s.getDictionaryObject(COSName.ENCODE);\n             COSArray domain = (COSArray) s.getDictionaryObject(COSName.DOMAIN);\n             COSArray range = (COSArray) s.getDictionaryObject(COSName.RANGE);\n             int bits = ((COSInteger)s.getDictionaryObject(COSName.BITS_PER_SAMPLE)).intValue();\n             COSArray size = (COSArray) s.getDictionaryObject(COSName.SIZE);\n+            COSArray encode = getEncode(s);\n             byte[] x = IOUtils.toByteArray(stream.getUnfilteredStream());\n             for (byte y : x) {\n                 if (y != 0) {\n@@ -215,6 +215,20 @@ private static Function getFunction(PDFunction f) throws IOException {\n         throw new IOException(\"Unsupported \" + f.toString());\n     }\n \n+    private static COSArray getEncode(COSDictionary s) {\n+        COSArray encode = (COSArray) s.getDictionaryObject(COSName.ENCODE);\n+        if (encode == null) {\n+            encode = new COSArray();\n+            COSArray size = (COSArray) s.getDictionaryObject(COSName.SIZE);\n+            int sizeValuesSize = size.size();\n+            for (int i = 0; i < sizeValuesSize; i++) {\n+                encode.add(COSInteger.ZERO);\n+                encode.add(COSInteger.get(size.getInt(i) - 1));\n+            }\n+        }\n+        return encode;\n+    }\n+\n     private static List<Float> toList(float[] array) {\n         List<Float> list = new ArrayList<Float>(array.length);\n         for (float f : array) {",
                "deletions": 2
            },
            {
                "sha": "b3eadcad1fefb9619f7483ef2b5fdfcb0398927f",
                "filename": "test/java/org/apache/fop/render/pdf/PSPDFGraphics2DTestCase.java",
                "blob_url": "https://github.com/apache/xmlgraphics-fop-pdf-images/blob/7a00f7e5707d805fe39eab59e539d2e376cddb3b/test/java/org/apache/fop/render/pdf/PSPDFGraphics2DTestCase.java",
                "raw_url": "https://github.com/apache/xmlgraphics-fop-pdf-images/raw/7a00f7e5707d805fe39eab59e539d2e376cddb3b/test/java/org/apache/fop/render/pdf/PSPDFGraphics2DTestCase.java",
                "status": "added",
                "changes": 73,
                "additions": 73,
                "contents_url": "https://api.github.com/repos/apache/xmlgraphics-fop-pdf-images/contents/test/java/org/apache/fop/render/pdf/PSPDFGraphics2DTestCase.java?ref=7a00f7e5707d805fe39eab59e539d2e376cddb3b",
                "patch": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/* $Id$ */\n+package org.apache.fop.render.pdf;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import org.apache.pdfbox.cos.COSArray;\n+import org.apache.pdfbox.cos.COSInteger;\n+import org.apache.pdfbox.cos.COSName;\n+import org.apache.pdfbox.cos.COSStream;\n+import org.apache.pdfbox.pdmodel.common.function.PDFunction;\n+import org.apache.pdfbox.pdmodel.common.function.PDFunctionType0;\n+\n+import org.apache.fop.render.gradient.Function;\n+import org.apache.fop.render.pdf.pdfbox.PSPDFGraphics2D;\n+\n+public class PSPDFGraphics2DTestCase {\n+\n+    @Test\n+    public void testShading() throws IOException {\n+        COSStream stream = new COSStream();\n+        OutputStream streamData = stream.createOutputStream();\n+        streamData.write(\"test\".getBytes(\"UTF-8\"));\n+        streamData.close();\n+        stream.setItem(COSName.BITS_PER_SAMPLE, COSInteger.get(8));\n+        stream.setItem(COSName.FUNCTION_TYPE, COSInteger.ZERO);\n+        COSArray range = new COSArray();\n+        range.add(COSInteger.ZERO);\n+        range.add(COSInteger.ONE);\n+        range.add(COSInteger.ZERO);\n+        range.add(COSInteger.ONE);\n+        range.add(COSInteger.ZERO);\n+        range.add(COSInteger.ONE);\n+        stream.setItem(COSName.RANGE, range);\n+        stream.setItem(COSName.DOMAIN, range);\n+        COSArray size = new COSArray();\n+        size.add(COSInteger.ONE);\n+        stream.setItem(COSName.SIZE, size);\n+\n+        Function f = new MyPSPDFGraphics2D().getAFunction(new PDFunctionType0(stream));\n+        Assert.assertEquals(f.getBitsPerSample(), 8);\n+    }\n+\n+    static class MyPSPDFGraphics2D extends PSPDFGraphics2D {\n+        MyPSPDFGraphics2D() {\n+            super(false);\n+        }\n+\n+        Function getAFunction(PDFunction function) throws IOException {\n+            return getFunction(function);\n+        }\n+    }\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "xmlgraphics-fop-pdf-images",
        "message": "FOP-2687: NPE for merge fonts in pdf with accessibility\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlgraphics/fop-pdf-images/trunk@1781906 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/xmlgraphics-fop-pdf-images/commit/4154d93543ff9bd507d13ce623c262b258713baf",
        "parent": "https://github.com/apache/xmlgraphics-fop-pdf-images/commit/80a46982178d61d50a9c4599f8b4369c2b61e091",
        "bug_id": "xmlgraphics-fop-pdf-images_5",
        "file": [
            {
                "sha": "db8ba37cc7af0cdf60c2243636715179b3131935",
                "filename": "src/java/org/apache/fop/render/pdf/pdfbox/FOPPDFMultiByteFont.java",
                "blob_url": "https://github.com/apache/xmlgraphics-fop-pdf-images/blob/4154d93543ff9bd507d13ce623c262b258713baf/src/java/org/apache/fop/render/pdf/pdfbox/FOPPDFMultiByteFont.java",
                "raw_url": "https://github.com/apache/xmlgraphics-fop-pdf-images/raw/4154d93543ff9bd507d13ce623c262b258713baf/src/java/org/apache/fop/render/pdf/pdfbox/FOPPDFMultiByteFont.java",
                "status": "modified",
                "changes": 41,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/xmlgraphics-fop-pdf-images/contents/src/java/org/apache/fop/render/pdf/pdfbox/FOPPDFMultiByteFont.java?ref=4154d93543ff9bd507d13ce623c262b258713baf",
                "patch": "@@ -105,9 +105,9 @@ public String addFont(COSDictionary fontData) throws IOException {\n         }\n         CMap c = font.getToUnicodeCMap();\n         Map<Integer, String> mapping = getMapping(font, c, glyphData.length);\n-        //if (glyphData.length > 0 && differentGlyphData(glyphData, mapping)) {\n-        //    return null;\n-        //}\n+        if (glyphData.length > 0) {\n+            differentGlyphData(glyphData, mapping);\n+        }\n         Map<Integer, String> gidToGlyph = new TreeMap<Integer, String>(mapping);\n         if (font.font instanceof PDTrueTypeFont) {\n             CmapSubtable cmap = ttf.getCmap().getCmaps()[0];\n@@ -233,28 +233,31 @@ private String readString(int index) throws IOException {\n         return \"SID\" + index;\n     }\n \n-//        private boolean differentGlyphData(GlyphData[] data, Map<Integer, String> mapping) throws IOException {\n-//            Map<String, Integer> tmpMap = new HashMap<String, Integer>();\n-//            for (Map.Entry<Integer, String> entry : mapping.entrySet()) {\n-//                if (!tmpMap.containsKey(entry.getValue())) {\n-//                    tmpMap.put(entry.getValue(), entry.getKey());\n-//                }\n-//            }\n-//            mapping.clear();\n-//            for (Map.Entry<String, Integer> entry : tmpMap.entrySet()) {\n-//                mapping.put(entry.getValue(), entry.getKey());\n-//            }\n-//\n-//            for (Map.Entry<Integer, String> n : mapping.entrySet()) {\n+        private boolean differentGlyphData(GlyphData[] data, Map<Integer, String> mapping) throws IOException {\n+            Map<String, Integer> tmpMap = new HashMap<String, Integer>();\n+            for (Map.Entry<Integer, String> entry : mapping.entrySet()) {\n+                if (!tmpMap.containsKey(entry.getValue())) {\n+                    tmpMap.put(entry.getValue(), entry.getKey());\n+                }\n+            }\n+            mapping.clear();\n+            for (Map.Entry<String, Integer> entry : tmpMap.entrySet()) {\n+                mapping.put(entry.getValue(), entry.getKey());\n+            }\n+\n+            for (Map.Entry<Integer, String> n : mapping.entrySet()) {\n+                if (n.getKey() >= data.length) {\n+                    throw new IOException(\"Mapping not found in glyphData\");\n+                }\n //                if (data[n.getKey()] != null) {\n //                    if (glyphs.containsKey(n.getValue()) && !glyphs.get(n.getValue()).equals(data[n.getKey()])) {\n //                        return true;\n //                    }\n //                    glyphs.put(n.getValue(), data[n.getKey()]);\n //                }\n-//            }\n-//            return false;\n-//        }\n+            }\n+            return false;\n+        }\n \n     private InputStream readFontFile(PDFont font) throws IOException {\n         PDFontDescriptor fd = font.getFontDescriptor();",
                "deletions": 19
            },
            {
                "sha": "fb98c0ecd9540381ebf9c68472e66d89faacacd6",
                "filename": "src/java/org/apache/fop/render/pdf/pdfbox/FontContainer.java",
                "blob_url": "https://github.com/apache/xmlgraphics-fop-pdf-images/blob/4154d93543ff9bd507d13ce623c262b258713baf/src/java/org/apache/fop/render/pdf/pdfbox/FontContainer.java",
                "raw_url": "https://github.com/apache/xmlgraphics-fop-pdf-images/raw/4154d93543ff9bd507d13ce623c262b258713baf/src/java/org/apache/fop/render/pdf/pdfbox/FontContainer.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/xmlgraphics-fop-pdf-images/contents/src/java/org/apache/fop/render/pdf/pdfbox/FontContainer.java?ref=4154d93543ff9bd507d13ce623c262b258713baf",
                "patch": "@@ -137,4 +137,8 @@ String getBaseEncodingName() {\n         BoundingBox bb = font.getBoundingBox();\n         return new float[] {bb.getLowerLeftX(), bb.getLowerLeftY(), bb.getUpperRightX(), bb.getUpperRightY()};\n     }\n+\n+    public PDFont getFont() {\n+        return font;\n+    }\n }",
                "deletions": 0
            },
            {
                "sha": "987317b6d16413837be6d2d9b8ee2d02e1d7615b",
                "filename": "test/java/org/apache/fop/render/pdf/FOPPDFSingleMultiByteFontTestCase.java",
                "blob_url": "https://github.com/apache/xmlgraphics-fop-pdf-images/blob/4154d93543ff9bd507d13ce623c262b258713baf/test/java/org/apache/fop/render/pdf/FOPPDFSingleMultiByteFontTestCase.java",
                "raw_url": "https://github.com/apache/xmlgraphics-fop-pdf-images/raw/4154d93543ff9bd507d13ce623c262b258713baf/test/java/org/apache/fop/render/pdf/FOPPDFSingleMultiByteFontTestCase.java",
                "status": "modified",
                "changes": 34,
                "additions": 34,
                "contents_url": "https://api.github.com/repos/apache/xmlgraphics-fop-pdf-images/contents/test/java/org/apache/fop/render/pdf/FOPPDFSingleMultiByteFontTestCase.java?ref=4154d93543ff9bd507d13ce623c262b258713baf",
                "patch": "@@ -28,15 +28,20 @@\n import org.apache.commons.io.IOUtils;\n import org.apache.fontbox.cff.CFFFont;\n import org.apache.fontbox.cff.CFFParser;\n+import org.apache.fontbox.ttf.GlyphData;\n+import org.apache.fontbox.ttf.GlyphTable;\n import org.apache.fontbox.type1.Type1Font;\n import org.apache.pdfbox.cos.COSDictionary;\n import org.apache.pdfbox.cos.COSName;\n import org.apache.pdfbox.pdmodel.PDDocument;\n import org.apache.pdfbox.pdmodel.PDPage;\n import org.apache.pdfbox.pdmodel.PDResources;\n+import org.apache.pdfbox.pdmodel.font.PDCIDFontType2;\n+import org.apache.pdfbox.pdmodel.font.PDType0Font;\n \n import org.apache.fop.render.pdf.pdfbox.FOPPDFMultiByteFont;\n import org.apache.fop.render.pdf.pdfbox.FOPPDFSingleByteFont;\n+import org.apache.fop.render.pdf.pdfbox.FontContainer;\n \n public class FOPPDFSingleMultiByteFontTestCase {\n     private COSDictionary getFont(PDDocument doc, String internalname) throws IOException {\n@@ -160,4 +165,33 @@ public void testHadMappingOperations() throws IOException {\n         Assert.assertTrue(multiByteFont.hadMappingOperations());\n         pdf.close();\n     }\n+\n+    @Test\n+    public void testMappingNotFound() throws IOException {\n+        PDDocument pdf = PDDocument.load(new File(PDFBoxAdapterTestCase.TTCID1));\n+        final COSDictionary fontDict = getFont(pdf, \"C2_0\");\n+        MyFOPPDFMultiByteFont multiByteFont = new MyFOPPDFMultiByteFont(fontDict, null);\n+        PDType0Font font = (PDType0Font) multiByteFont.getFontContainer().getFont();\n+        GlyphTable glyphTable = ((PDCIDFontType2)font.getDescendantFont()).getTrueTypeFont().getGlyph();\n+        glyphTable.setGlyphs(new GlyphData[glyphTable.getGlyphs().length - 1]);\n+        String ex = \"\";\n+        try {\n+            multiByteFont.addFont(fontDict);\n+        } catch (IOException e) {\n+            ex = e.getMessage();\n+        }\n+        Assert.assertEquals(ex, \"Mapping not found in glyphData\");\n+        pdf.close();\n+    }\n+\n+    private static class MyFOPPDFMultiByteFont extends FOPPDFMultiByteFont {\n+        COSDictionary fontData;\n+        MyFOPPDFMultiByteFont(COSDictionary fontData, String name) throws IOException {\n+            super(fontData, name);\n+            this.fontData = fontData;\n+        }\n+        FontContainer getFontContainer() throws IOException {\n+            return getFont(fontData);\n+        }\n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "xmlgraphics-fop-pdf-images",
        "message": "FOP-2687: NPE for merge fonts in pdf with accessibility\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlgraphics/fop-pdf-images/trunk@1781895 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/xmlgraphics-fop-pdf-images/commit/80a46982178d61d50a9c4599f8b4369c2b61e091",
        "parent": "https://github.com/apache/xmlgraphics-fop-pdf-images/commit/0f49b1b10b362414cea5104db5c6db4ad5683240",
        "bug_id": "xmlgraphics-fop-pdf-images_6",
        "file": [
            {
                "sha": "d4a339b8d20a610340626a5af0dfe340186dd430",
                "filename": "src/java/org/apache/fop/render/pdf/pdfbox/FOPPDFMultiByteFont.java",
                "blob_url": "https://github.com/apache/xmlgraphics-fop-pdf-images/blob/80a46982178d61d50a9c4599f8b4369c2b61e091/src/java/org/apache/fop/render/pdf/pdfbox/FOPPDFMultiByteFont.java",
                "raw_url": "https://github.com/apache/xmlgraphics-fop-pdf-images/raw/80a46982178d61d50a9c4599f8b4369c2b61e091/src/java/org/apache/fop/render/pdf/pdfbox/FOPPDFMultiByteFont.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/xmlgraphics-fop-pdf-images/contents/src/java/org/apache/fop/render/pdf/pdfbox/FOPPDFMultiByteFont.java?ref=80a46982178d61d50a9c4599f8b4369c2b61e091",
                "patch": "@@ -72,6 +72,7 @@ public FOPPDFMultiByteFont(COSDictionary fontData, String name) throws IOExcepti\n         readFontBBox(fontData);\n         setFontName(name);\n         addFont(fontData);\n+        notifyMapOperation();\n     }\n \n     public String addFont(COSDictionary fontData) throws IOException {",
                "deletions": 0
            },
            {
                "sha": "ba3d0dc165ef48a20a1bafa53f5ebac52be12f1f",
                "filename": "test/java/org/apache/fop/render/pdf/FOPPDFSingleMultiByteFontTestCase.java",
                "blob_url": "https://github.com/apache/xmlgraphics-fop-pdf-images/blob/80a46982178d61d50a9c4599f8b4369c2b61e091/test/java/org/apache/fop/render/pdf/FOPPDFSingleMultiByteFontTestCase.java",
                "raw_url": "https://github.com/apache/xmlgraphics-fop-pdf-images/raw/80a46982178d61d50a9c4599f8b4369c2b61e091/test/java/org/apache/fop/render/pdf/FOPPDFSingleMultiByteFontTestCase.java",
                "status": "added",
                "changes": 163,
                "additions": 163,
                "contents_url": "https://api.github.com/repos/apache/xmlgraphics-fop-pdf-images/contents/test/java/org/apache/fop/render/pdf/FOPPDFSingleMultiByteFontTestCase.java?ref=80a46982178d61d50a9c4599f8b4369c2b61e091",
                "patch": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.fop.render.pdf;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.fontbox.cff.CFFFont;\n+import org.apache.fontbox.cff.CFFParser;\n+import org.apache.fontbox.type1.Type1Font;\n+import org.apache.pdfbox.cos.COSDictionary;\n+import org.apache.pdfbox.cos.COSName;\n+import org.apache.pdfbox.pdmodel.PDDocument;\n+import org.apache.pdfbox.pdmodel.PDPage;\n+import org.apache.pdfbox.pdmodel.PDResources;\n+\n+import org.apache.fop.render.pdf.pdfbox.FOPPDFMultiByteFont;\n+import org.apache.fop.render.pdf.pdfbox.FOPPDFSingleByteFont;\n+\n+public class FOPPDFSingleMultiByteFontTestCase {\n+    private COSDictionary getFont(PDDocument doc, String internalname) throws IOException {\n+        PDPage page = doc.getDocumentCatalog().getPages().get(0);\n+        PDResources sourcePageResources = page.getResources();\n+        COSDictionary fonts = (COSDictionary)sourcePageResources.getCOSObject().getDictionaryObject(COSName.FONT);\n+        return (COSDictionary) fonts.getDictionaryObject(internalname);\n+    }\n+\n+    @Test\n+    public void testCFF() throws Exception {\n+        PDDocument doc = PDDocument.load(new File(PDFBoxAdapterTestCase.CFF1));\n+        FOPPDFSingleByteFont sbfont = new FOPPDFSingleByteFont(getFont(doc, \"R11\"),\n+                \"MyriadPro-Regular_Type1f0encstdcs\");\n+\n+        Assert.assertTrue(Arrays.asList(sbfont.getEncoding().getCharNameMap()).contains(\"bracketright\"));\n+        Assert.assertTrue(!Arrays.asList(sbfont.getEncoding().getCharNameMap()).contains(\"A\"));\n+        Assert.assertTrue(!Arrays.toString(sbfont.getEncoding().getUnicodeCharMap()).contains(\"A\"));\n+        Assert.assertEquals(sbfont.mapChar('A'), 0);\n+        Assert.assertEquals(sbfont.getWidths().length, 28);\n+        Assert.assertEquals(sbfont.getFirstChar(), 87);\n+        Assert.assertEquals(sbfont.getLastChar(), 114);\n+\n+        PDDocument doc2 = PDDocument.load(new File(PDFBoxAdapterTestCase.CFF2));\n+        String name = sbfont.addFont(getFont(doc2, \"R11\"));\n+        Assert.assertTrue(name.contains(\"MyriadPro\"));\n+\n+        Assert.assertEquals(sbfont.getFontName(), \"MyriadPro-Regular_Type1f0encstdcs\");\n+        Assert.assertEquals(sbfont.getEncodingName(), \"WinAnsiEncoding\");\n+        Assert.assertEquals(sbfont.mapChar('W'), 'W');\n+        String x = IOUtils.toString(sbfont.getInputStream());\n+        Assert.assertTrue(x, x.contains(\"Adobe Systems\"));\n+        Assert.assertEquals(sbfont.getEncoding().getName(), \"FOPPDFEncoding\");\n+        Assert.assertTrue(Arrays.asList(sbfont.getEncoding().getCharNameMap()).contains(\"A\"));\n+        Assert.assertEquals(sbfont.getWidths().length, 65);\n+        Assert.assertEquals(sbfont.getFirstChar(), 50);\n+        Assert.assertEquals(sbfont.getLastChar(), 114);\n+\n+        Assert.assertEquals(sbfont.addFont(getFont(doc2, \"R13\")), null);\n+\n+        doc.close();\n+        doc2.close();\n+    }\n+\n+    @Test\n+    public void testCFF2() throws Exception {\n+        PDDocument doc = PDDocument.load(new File(PDFBoxAdapterTestCase.CFF3));\n+        FOPPDFSingleByteFont sbfont = new FOPPDFSingleByteFont(getFont(doc, \"T1_0\"),\n+                \"Myriad_Pro_Type1f0encf1cs\");\n+        Assert.assertTrue(Arrays.asList(sbfont.getEncoding().getCharNameMap()).contains(\"uni004E\"));\n+        Assert.assertEquals(sbfont.getFontName(), \"Myriad_Pro_Type1f0encf1cs\");\n+        Assert.assertEquals(sbfont.getEncodingName(), null);\n+        byte[] is = IOUtils.toByteArray(sbfont.getInputStream());\n+\n+        CFFParser p = new CFFParser();\n+        CFFFont ff = p.parse(is).get(0);\n+        Assert.assertEquals(ff.getName(), \"MNEACN+Myriad_Pro\");\n+//        Assert.assertEquals(ff.getCharset().getEntries().get(0).getSID(), 391);\n+\n+        doc.close();\n+    }\n+\n+    @Test\n+    public void testTTCID() throws Exception {\n+        PDDocument doc = PDDocument.load(new File(PDFBoxAdapterTestCase.TTCID1));\n+        FOPPDFMultiByteFont mbfont = new FOPPDFMultiByteFont(getFont(doc, \"C2_0\"),\n+                \"ArialMT_Type0\");\n+        mbfont.addFont(getFont(doc, \"C2_0\"));\n+        Assert.assertEquals(mbfont.mapChar('t'), 67);\n+\n+        PDDocument doc2 = PDDocument.load(new File(PDFBoxAdapterTestCase.TTCID2));\n+        String name = mbfont.addFont(getFont(doc2, \"C2_0\"));\n+        Assert.assertEquals(name, \"ArialMT_Type0\");\n+        Assert.assertEquals(mbfont.getFontName(), \"ArialMT_Type0\");\n+        byte[] is = IOUtils.toByteArray(mbfont.getInputStream());\n+        Assert.assertEquals(is.length, 38640);\n+        doc.close();\n+        doc2.close();\n+    }\n+\n+    @Test\n+    public void testTTSubset() throws Exception {\n+        PDDocument doc = PDDocument.load(new File(PDFBoxAdapterTestCase.TTSubset1));\n+        FOPPDFSingleByteFont mbfont = new FOPPDFSingleByteFont(getFont(doc, \"R9\"),\n+                \"TimesNewRomanPSMT_TrueType\");\n+        mbfont.addFont(getFont(doc, \"R9\"));\n+//        Assert.assertEquals(mbfont.mapChar('t'), 116);\n+\n+        PDDocument doc2 = PDDocument.load(new File(PDFBoxAdapterTestCase.TTSubset2));\n+        String name = mbfont.addFont(getFont(doc2, \"R9\"));\n+        Assert.assertEquals(name, \"TimesNewRomanPSMT_TrueType\");\n+        Assert.assertEquals(mbfont.getFontName(), \"TimesNewRomanPSMT_TrueType\");\n+        byte[] is = IOUtils.toByteArray(mbfont.getInputStream());\n+        Assert.assertEquals(is.length, 41112);\n+        doc.close();\n+        doc2.close();\n+    }\n+\n+    @Test\n+    public void testType1Subset() throws Exception {\n+        PDDocument doc = PDDocument.load(new File(PDFBoxAdapterTestCase.Type1Subset1));\n+        FOPPDFSingleByteFont mbfont = new FOPPDFSingleByteFont(getFont(doc, \"F15\"), \"\");\n+        mbfont.addFont(getFont(doc, \"F15\"));\n+        PDDocument doc2 = PDDocument.load(new File(PDFBoxAdapterTestCase.Type1Subset2));\n+        mbfont.addFont(getFont(doc2, \"F15\"));\n+        Type1Font f = Type1Font.createWithPFB(mbfont.getInputStream());\n+        Set<String> csDict = new TreeSet<String>(f.getCharStringsDict().keySet());\n+        Assert.assertEquals(csDict.toString(), \"[.notdef, a, d, e, hyphen, l, m, n, p, s, space, t, two, x]\");\n+        Assert.assertEquals(f.getSubrsArray().size(), 518);\n+        Assert.assertEquals(f.getFamilyName(), \"Verdana\");\n+        doc.close();\n+        doc2.close();\n+    }\n+\n+    @Test\n+    public void testHadMappingOperations() throws IOException {\n+        PDDocument pdf = PDDocument.load(new File(PDFBoxAdapterTestCase.TTCID1));\n+        COSDictionary font = getFont(pdf, \"C2_0\");\n+        font.removeItem(COSName.TO_UNICODE);\n+        FOPPDFMultiByteFont multiByteFont = new FOPPDFMultiByteFont(font, null);\n+        Assert.assertTrue(multiByteFont.hadMappingOperations());\n+        pdf.close();\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "54c460d5a21fb74ae4e5c257cbde03a982c49ebd",
                "filename": "test/java/org/apache/fop/render/pdf/PDFBoxAdapterTestCase.java",
                "blob_url": "https://github.com/apache/xmlgraphics-fop-pdf-images/blob/80a46982178d61d50a9c4599f8b4369c2b61e091/test/java/org/apache/fop/render/pdf/PDFBoxAdapterTestCase.java",
                "raw_url": "https://github.com/apache/xmlgraphics-fop-pdf-images/raw/80a46982178d61d50a9c4599f8b4369c2b61e091/test/java/org/apache/fop/render/pdf/PDFBoxAdapterTestCase.java",
                "status": "modified",
                "changes": 137,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/xmlgraphics-fop-pdf-images/contents/test/java/org/apache/fop/render/pdf/PDFBoxAdapterTestCase.java?ref=80a46982178d61d50a9c4599f8b4369c2b61e091",
                "patch": "@@ -27,12 +27,9 @@\n import java.io.InputStream;\n import java.io.OutputStream;\n import java.net.URI;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n-import java.util.Set;\n-import java.util.TreeSet;\n \n import org.junit.Test;\n \n@@ -41,7 +38,6 @@\n import static org.mockito.Mockito.when;\n \n import org.apache.commons.io.IOUtils;\n-import org.apache.fontbox.cff.CFFFont;\n import org.apache.fontbox.cff.CFFParser;\n import org.apache.fontbox.ttf.TTFParser;\n import org.apache.fontbox.type1.Type1Font;\n@@ -52,7 +48,6 @@\n import org.apache.pdfbox.cos.COSObject;\n import org.apache.pdfbox.pdmodel.PDDocument;\n import org.apache.pdfbox.pdmodel.PDPage;\n-import org.apache.pdfbox.pdmodel.PDResources;\n \n import org.apache.xmlgraphics.image.loader.ImageException;\n import org.apache.xmlgraphics.image.loader.ImageInfo;\n@@ -77,8 +72,6 @@\n import org.apache.fop.pdf.PDFPage;\n import org.apache.fop.pdf.PDFResources;\n import org.apache.fop.pdf.PDFStream;\n-import org.apache.fop.render.pdf.pdfbox.FOPPDFMultiByteFont;\n-import org.apache.fop.render.pdf.pdfbox.FOPPDFSingleByteFont;\n import org.apache.fop.render.pdf.pdfbox.ImageConverterPDF2G2D;\n import org.apache.fop.render.pdf.pdfbox.ImagePDF;\n import org.apache.fop.render.pdf.pdfbox.PDFBoxAdapter;\n@@ -92,19 +85,19 @@\n \n public class PDFBoxAdapterTestCase {\n     private Rectangle2D r = new Rectangle2D.Double();\n-    private static final String CFF1 = \"test/resources/2fonts.pdf\";\n-    private static final String CFF2 = \"test/resources/2fonts2.pdf\";\n-    private static final String CFF3 = \"test/resources/simpleh.pdf\";\n-    private static final String TTCID1 = \"test/resources/ttcid1.pdf\";\n-    private static final String TTCID2 = \"test/resources/ttcid2.pdf\";\n-    private static final String TTSubset1 = \"test/resources/ttsubset.pdf\";\n-    private static final String TTSubset2 = \"test/resources/ttsubset2.pdf\";\n+    protected static final String CFF1 = \"test/resources/2fonts.pdf\";\n+    protected static final String CFF2 = \"test/resources/2fonts2.pdf\";\n+    protected static final String CFF3 = \"test/resources/simpleh.pdf\";\n+    protected static final String TTCID1 = \"test/resources/ttcid1.pdf\";\n+    protected static final String TTCID2 = \"test/resources/ttcid2.pdf\";\n+    protected static final String TTSubset1 = \"test/resources/ttsubset.pdf\";\n+    protected static final String TTSubset2 = \"test/resources/ttsubset2.pdf\";\n     private static final String TTSubset3 = \"test/resources/ttsubset3.pdf\";\n     private static final String TTSubset5 = \"test/resources/ttsubset5.pdf\";\n     private static final String CFFCID1 = \"test/resources/cffcid1.pdf\";\n     private static final String CFFCID2 = \"test/resources/cffcid2.pdf\";\n-    private static final String Type1Subset1 = \"test/resources/t1subset.pdf\";\n-    private static final String Type1Subset2 = \"test/resources/t1subset2.pdf\";\n+    protected static final String Type1Subset1 = \"test/resources/t1subset.pdf\";\n+    protected static final String Type1Subset2 = \"test/resources/t1subset2.pdf\";\n     private static final String Type1Subset3 = \"test/resources/t1subset3.pdf\";\n     private static final String Type1Subset4 = \"test/resources/t1subset4.pdf\";\n     protected static final String ROTATE = \"test/resources/rotate.pdf\";\n@@ -193,118 +186,6 @@ private String writeText(FontInfo fi, String pdf) throws IOException {\n         return c;\n     }\n \n-    private COSDictionary getFont(PDDocument doc, String internalname) throws IOException {\n-        PDPage page = doc.getDocumentCatalog().getPages().get(0);\n-        PDResources sourcePageResources = page.getResources();\n-        COSDictionary fonts = (COSDictionary)sourcePageResources.getCOSObject().getDictionaryObject(COSName.FONT);\n-        return (COSDictionary) fonts.getDictionaryObject(internalname);\n-    }\n-\n-    @Test\n-    public void testCFF() throws Exception {\n-        PDDocument doc = PDDocument.load(new File(CFF1));\n-        FOPPDFSingleByteFont sbfont = new FOPPDFSingleByteFont(getFont(doc, \"R11\"),\n-                \"MyriadPro-Regular_Type1f0encstdcs\");\n-\n-        Assert.assertTrue(Arrays.asList(sbfont.getEncoding().getCharNameMap()).contains(\"bracketright\"));\n-        Assert.assertTrue(!Arrays.asList(sbfont.getEncoding().getCharNameMap()).contains(\"A\"));\n-        Assert.assertTrue(!Arrays.toString(sbfont.getEncoding().getUnicodeCharMap()).contains(\"A\"));\n-        Assert.assertEquals(sbfont.mapChar('A'), 0);\n-        Assert.assertEquals(sbfont.getWidths().length, 28);\n-        Assert.assertEquals(sbfont.getFirstChar(), 87);\n-        Assert.assertEquals(sbfont.getLastChar(), 114);\n-\n-        PDDocument doc2 = PDDocument.load(new File(CFF2));\n-        String name = sbfont.addFont(getFont(doc2, \"R11\"));\n-        Assert.assertTrue(name.contains(\"MyriadPro\"));\n-\n-        Assert.assertEquals(sbfont.getFontName(), \"MyriadPro-Regular_Type1f0encstdcs\");\n-        Assert.assertEquals(sbfont.getEncodingName(), \"WinAnsiEncoding\");\n-        Assert.assertEquals(sbfont.mapChar('W'), 'W');\n-        String x = IOUtils.toString(sbfont.getInputStream());\n-        Assert.assertTrue(x, x.contains(\"Adobe Systems\"));\n-        Assert.assertEquals(sbfont.getEncoding().getName(), \"FOPPDFEncoding\");\n-        Assert.assertTrue(Arrays.asList(sbfont.getEncoding().getCharNameMap()).contains(\"A\"));\n-        Assert.assertEquals(sbfont.getWidths().length, 65);\n-        Assert.assertEquals(sbfont.getFirstChar(), 50);\n-        Assert.assertEquals(sbfont.getLastChar(), 114);\n-\n-        Assert.assertEquals(sbfont.addFont(getFont(doc2, \"R13\")), null);\n-\n-        doc.close();\n-        doc2.close();\n-    }\n-\n-    @Test\n-    public void testCFF2() throws Exception {\n-        PDDocument doc = PDDocument.load(new File(CFF3));\n-        FOPPDFSingleByteFont sbfont = new FOPPDFSingleByteFont(getFont(doc, \"T1_0\"),\n-                \"Myriad_Pro_Type1f0encf1cs\");\n-        Assert.assertTrue(Arrays.asList(sbfont.getEncoding().getCharNameMap()).contains(\"uni004E\"));\n-        Assert.assertEquals(sbfont.getFontName(), \"Myriad_Pro_Type1f0encf1cs\");\n-        Assert.assertEquals(sbfont.getEncodingName(), null);\n-        byte[] is = IOUtils.toByteArray(sbfont.getInputStream());\n-\n-        CFFParser p = new CFFParser();\n-        CFFFont ff = p.parse(is).get(0);\n-        Assert.assertEquals(ff.getName(), \"MNEACN+Myriad_Pro\");\n-//        Assert.assertEquals(ff.getCharset().getEntries().get(0).getSID(), 391);\n-\n-        doc.close();\n-    }\n-\n-    @Test\n-    public void testTTCID() throws Exception {\n-        PDDocument doc = PDDocument.load(new File(TTCID1));\n-        FOPPDFMultiByteFont mbfont = new FOPPDFMultiByteFont(getFont(doc, \"C2_0\"),\n-                \"ArialMT_Type0\");\n-        mbfont.addFont(getFont(doc, \"C2_0\"));\n-        Assert.assertEquals(mbfont.mapChar('t'), 67);\n-\n-        PDDocument doc2 = PDDocument.load(new File(TTCID2));\n-        String name = mbfont.addFont(getFont(doc2, \"C2_0\"));\n-        Assert.assertEquals(name, \"ArialMT_Type0\");\n-        Assert.assertEquals(mbfont.getFontName(), \"ArialMT_Type0\");\n-        byte[] is = IOUtils.toByteArray(mbfont.getInputStream());\n-        Assert.assertEquals(is.length, 38640);\n-        doc.close();\n-        doc2.close();\n-    }\n-\n-    @Test\n-    public void testTTSubset() throws Exception {\n-        PDDocument doc = PDDocument.load(new File(TTSubset1));\n-        FOPPDFSingleByteFont mbfont = new FOPPDFSingleByteFont(getFont(doc, \"R9\"),\n-                \"TimesNewRomanPSMT_TrueType\");\n-        mbfont.addFont(getFont(doc, \"R9\"));\n-//        Assert.assertEquals(mbfont.mapChar('t'), 116);\n-\n-        PDDocument doc2 = PDDocument.load(new File(TTSubset2));\n-        String name = mbfont.addFont(getFont(doc2, \"R9\"));\n-        Assert.assertEquals(name, \"TimesNewRomanPSMT_TrueType\");\n-        Assert.assertEquals(mbfont.getFontName(), \"TimesNewRomanPSMT_TrueType\");\n-        byte[] is = IOUtils.toByteArray(mbfont.getInputStream());\n-        Assert.assertEquals(is.length, 41112);\n-        doc.close();\n-        doc2.close();\n-    }\n-\n-    @Test\n-    public void testType1Subset() throws Exception {\n-        PDDocument doc = PDDocument.load(new File(Type1Subset1));\n-        FOPPDFSingleByteFont mbfont = new FOPPDFSingleByteFont(getFont(doc, \"F15\"), \"\");\n-        mbfont.addFont(getFont(doc, \"F15\"));\n-        PDDocument doc2 = PDDocument.load(new File(Type1Subset2));\n-        mbfont.addFont(getFont(doc2, \"F15\"));\n-        Type1Font f = Type1Font.createWithPFB(mbfont.getInputStream());\n-        Set<String> csDict = new TreeSet<String>(f.getCharStringsDict().keySet());\n-        Assert.assertEquals(csDict.toString(), \"[.notdef, a, d, e, hyphen, l, m, n, p, s, space, t, two, x]\");\n-        Assert.assertEquals(f.getSubrsArray().size(), 518);\n-        Assert.assertEquals(f.getFamilyName(), \"Verdana\");\n-        doc.close();\n-        doc2.close();\n-    }\n-\n     @Test\n     public void testStream() throws Exception {\n         PDFDocument pdfdoc = new PDFDocument(\"\");",
                "deletions": 128
            }
        ]
    }
]