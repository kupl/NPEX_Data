{
    "openjpa_d260d34": {
        "repo": "openjpa",
        "message": "Oops; fixing NPE caused by previous short-circuiting.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@563664 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/openjpa/commit/d260d34d69be456f78f195fc2fb075dcfa2aa4fb",
        "parent": "https://github.com/apache/openjpa/commit/fa39addf827a6ef14492389574e89055906efd49",
        "bug_id": "openjpa_d260d34",
        "file": [
            {
                "sha": "01563e37a3da46d0603b2fc35507435eb320a972",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java",
                "blob_url": "https://github.com/apache/openjpa/blob/d260d34d69be456f78f195fc2fb075dcfa2aa4fb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java",
                "raw_url": "https://github.com/apache/openjpa/raw/d260d34d69be456f78f195fc2fb075dcfa2aa4fb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java",
                "status": "modified",
                "changes": 12,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java?ref=d260d34d69be456f78f195fc2fb075dcfa2aa4fb",
                "patch": "@@ -49,6 +49,8 @@\n public class TestXMLCustomerOrder\n     extends SQLListenerTestCase {\n \n+    private boolean enabled = false;\n+\n     public void setUp() {\n         OpenJPAEntityManagerFactory emf = createEMF();\n         DBDictionary dict = ((JDBCConfiguration) emf.getConfiguration())\n@@ -58,6 +60,8 @@ public void setUp() {\n         if (!dict.supportsXMLColumn)\n             return;\n \n+        enabled = true;\n+\n         setUp(org.apache.openjpa.persistence.xmlmapping.entities.Customer.class\n             , org.apache.openjpa.persistence.xmlmapping.entities.Customer\n                 .CustomerKey.class\n@@ -71,15 +75,15 @@ public static void main(String[] args) {\n     }\n \n     public void testXMLCustomerOrder() {\t\n+        // skip if dictionary has no support for XML column type\n+        if (!enabled)\n+            return;\n+\n         OpenJPAEntityManager em =\n             OpenJPAPersistence.cast(emf.createEntityManager());\n         DBDictionary dict = ((JDBCConfiguration) em.getConfiguration())\n             .getDBDictionaryInstance();\n \n-        // skip if dictionary has no support for XML column type \n-        if (!dict.supportsXMLColumn)\n-            return;\n-\n         String sqllog = TestXMLCustomerOrder.class.getName();\n         sqllog = sqllog.replace('.', '/');\n         sqllog = \"./\" + sqllog;",
                "deletions": 4
            }
        ],
        "patched_files": [],
        "unit_tests": [
            "TestXMLCustomerOrder.java"
        ]
    },
    "openjpa_20e0762": {
        "repo": "openjpa",
        "message": "Fixed getMethodDescriptors to not try to create a MethodDescriptor for a non-existant method (which would cause an NPE).\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@443524 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/openjpa/commit/20e0762e43734170fd7d97297693382329877b33",
        "parent": "https://github.com/apache/openjpa/commit/47edcb8edce8dc6b0c384af53e6a679aa68f1abd",
        "bug_id": "openjpa_20e0762",
        "file": [
            {
                "sha": "551e5e5e1bb1ad385e6d57b26d2c4dacd8b1206c",
                "filename": "openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java",
                "blob_url": "https://github.com/apache/openjpa/blob/20e0762e43734170fd7d97297693382329877b33/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java",
                "raw_url": "https://github.com/apache/openjpa/raw/20e0762e43734170fd7d97297693382329877b33/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java",
                "status": "modified",
                "changes": 8,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=20e0762e43734170fd7d97297693382329877b33",
                "patch": "@@ -374,8 +374,12 @@ public Image getIcon(int kind) {\n         PropertyDescriptor[] pds = getPropertyDescriptors();\n         _mds = new MethodDescriptor[pds.length * 2];\n         for (int i = 0; i < pds.length; i++) {\n-            _mds[i * 2] = new MethodDescriptor(pds[i].getWriteMethod());\n-            _mds[(i * 2) + 1] = new MethodDescriptor(pds[i].getReadMethod());\n+            Method write = pds[i].getWriteMethod();\n+            if (write != null)\n+                _mds[i * 2] = new MethodDescriptor(write);\n+            Method read = pds[i].getReadMethod();\n+            if (read != null)\n+                _mds[(i * 2) + 1] = new MethodDescriptor(read);\n         }\n         return _mds;\n     }",
                "deletions": 2
            }
        ],
        "patched_files": [
            "ConfigurationImpl.java"
        ],
        "unit_tests": [
            "TestConfigurationImpl.java"
        ]
    },
    "openjpa_89df4a7": {
        "repo": "openjpa",
        "message": "OPENJPA-873: fix NPE when MappedSuperclass does not have \nIdClass defined.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@737816 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/openjpa/commit/89df4a75321f4066bb7a0a83d0fa03ace16e32bf",
        "parent": "https://github.com/apache/openjpa/commit/e70fd12a5933871b1e937e77a1dba04330b31de6",
        "bug_id": "openjpa_89df4a7",
        "file": [
            {
                "sha": "507eeced744f7e2bba58b243ec0dbad9e03cff19",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "blob_url": "https://github.com/apache/openjpa/blob/89df4a75321f4066bb7a0a83d0fa03ace16e32bf/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "raw_url": "https://github.com/apache/openjpa/raw/89df4a75321f4066bb7a0a83d0fa03ace16e32bf/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=89df4a75321f4066bb7a0a83d0fa03ace16e32bf",
                "patch": "@@ -1880,7 +1880,9 @@ private void validateAppIdClass() {\n         if (_super != null) {\n             // concrete superclass oids must match or be parent of ours\n             ClassMetaData sup = getPCSuperclassMetaData();\n-            if (!sup.getObjectIdType().isAssignableFrom(_objectId))\n+            Class objectIdType = sup.getObjectIdType();\n+            if (objectIdType != null && \n+                !objectIdType.isAssignableFrom(_objectId))\n                 throw new MetaDataException(_loc.get(\"id-classes\",\n                     new Object[]{ _type, _objectId, _super,\n                         sup.getObjectIdType() }));",
                "deletions": 1
            }
        ],
        "patched_files": [
            "ClassMetaData.java"
        ],
        "unit_tests": [
            "TestClassMetaData.java"
        ]
    },
    "openjpa_88cc847": {
        "repo": "openjpa",
        "message": "OPENJPA-2284: Save NPE while parsing cascade\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1416742 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/openjpa/commit/88cc847a1cd2d4fb4f91b88b4de5a91c4b39228e",
        "parent": "https://github.com/apache/openjpa/commit/2d5ab5c862737cf13c6a77bee4924dd959e8b941",
        "bug_id": "openjpa_88cc847",
        "file": [
            {
                "sha": "3dc65495fbe65402f61eca4e932da71acd9db254",
                "filename": "openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java",
                "blob_url": "https://github.com/apache/openjpa/blob/88cc847a1cd2d4fb4f91b88b4de5a91c4b39228e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java",
                "raw_url": "https://github.com/apache/openjpa/raw/88cc847a1cd2d4fb4f91b88b4de5a91c4b39228e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=88cc847a1cd2d4fb4f91b88b4de5a91c4b39228e",
                "patch": "@@ -1361,10 +1361,8 @@ protected void setCascades(FieldMetaData fmd) {\n             return;\n \n         ValueMetaData vmd = fmd;\n-        switch (_strategy) {\n-            case ONE_MANY:\n-            case MANY_MANY:\n-                vmd = fmd.getElement();\n+        if (_strategy == ONE_MANY || _strategy == MANY_MANY) {\n+            vmd = fmd.getElement();\n         }\n         for (CascadeType cascade : cascades) {\n             switch (cascade) {",
                "deletions": 4
            }
        ],
        "patched_files": [
            "XMLPersistenceMetaDataParser.java"
        ],
        "unit_tests": [
            "TestXMLPersistenceMetaDataParser.java"
        ]
    },
    "openjpa_7cee19d": {
        "repo": "openjpa",
        "message": "OPENJPA-2151: Fix NPE in ClassMetaData.hasInverseManagedFields.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1342747 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/openjpa/commit/7cee19d3be610e178020eabdae6c877e6784373c",
        "parent": "https://github.com/apache/openjpa/commit/908e0f69350a5804d6f54387d86ee4a39906698b",
        "bug_id": "openjpa_7cee19d",
        "file": [
            {
                "sha": "cf37d747cac6e2b7c30bb5a452a6d1c2b857ae8b",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "blob_url": "https://github.com/apache/openjpa/blob/7cee19d3be610e178020eabdae6c877e6784373c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "raw_url": "https://github.com/apache/openjpa/raw/7cee19d3be610e178020eabdae6c877e6784373c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=7cee19d3be610e178020eabdae6c877e6784373c",
                "patch": "@@ -2787,12 +2787,14 @@ public String getSourceName(){\n \n     public boolean hasInverseManagedFields() {\n         if (inverseManagedFields == null) {\n-            for(FieldMetaData fmd: getFields()){\n-                if(fmd.getInverseMetaDatas().length > 0){\n-                    inverseManagedFields = Boolean.TRUE;\n+            Boolean res = Boolean.FALSE;\n+            for (FieldMetaData fmd : getFields()) {\n+                if (fmd.getInverseMetaDatas().length > 0) {\n+                    res = Boolean.TRUE;\n                     break;\n                 }\n             }\n+            inverseManagedFields = res;\n         }\n         return inverseManagedFields.booleanValue();\n     }",
                "deletions": 3
            }
        ],
        "patched_files": [
            "ClassMetaData.java"
        ],
        "unit_tests": [
            "TestClassMetaData.java"
        ]
    },
    "openjpa_80aea14": {
        "repo": "openjpa",
        "message": "OPENJPA-912 Potential NPE in setInverseRelation\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@741994 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/openjpa/commit/80aea14f18227ceafca32cc4a36f614280a7fcc9",
        "parent": "https://github.com/apache/openjpa/commit/0416d6b54c83585ace5fab8280151b2af0c4c354",
        "bug_id": "openjpa_80aea14",
        "file": [
            {
                "sha": "cb853d42614e3bfef053cf9ced5ae3bc7271fbbe",
                "filename": "openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java",
                "blob_url": "https://github.com/apache/openjpa/blob/80aea14f18227ceafca32cc4a36f614280a7fcc9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java",
                "raw_url": "https://github.com/apache/openjpa/raw/80aea14f18227ceafca32cc4a36f614280a7fcc9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=80aea14f18227ceafca32cc4a36f614280a7fcc9",
                "patch": "@@ -392,6 +392,10 @@ private void setInverseRelation(OpenJPAStateManager owner,\n                     for (Iterator itr = ((Collection) coll).iterator();\n                         itr.hasNext();) {\n                         PersistenceCapable pc = (PersistenceCapable) itr.next();\n+\n+                        if (pc == null)\n+                            continue;\n+\n                         OpenJPAStateManager sm = (OpenJPAStateManager) pc.\n                             pcGetStateManager();\n                         FieldMapping[] fmd = ((ClassMapping) sm.getMetaData()).",
                "deletions": 0
            },
            {
                "sha": "2b32fff481a900d5735762757502f25971dae713",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestChainEntities.java",
                "blob_url": "https://github.com/apache/openjpa/blob/80aea14f18227ceafca32cc4a36f614280a7fcc9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestChainEntities.java",
                "raw_url": "https://github.com/apache/openjpa/raw/80aea14f18227ceafca32cc4a36f614280a7fcc9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestChainEntities.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestChainEntities.java?ref=80aea14f18227ceafca32cc4a36f614280a7fcc9",
                "patch": "@@ -32,7 +32,8 @@\n \tlong aid;\n \n \tpublic void setUp () {\n-\t\tsetUp (ChainEntityA.class, ChainEntityB.class, ChainEntityC.class);\n+\t\tsetUp (DROP_TABLES,\n+\t\t    ChainEntityA.class, ChainEntityB.class, ChainEntityC.class);\n \t\t// Create A\n \t\tChainEntityA a = new ChainEntityA ();\n \t\ta.setName (\"TEST_A\");",
                "deletions": 1
            }
        ],
        "patched_files": [
            "JDBCStoreManager.java"
        ],
        "unit_tests": [
            "TestChainEntities.java"
        ]
    },
    "openjpa_f641376": {
        "repo": "openjpa",
        "message": "OPENJPA-1168:\nImproved checking for type1 UUID generator is initialized. Reducing\ntiming window which could result in a NPE.\nSubmitted by: Rick Curtis\n\tmodified:   openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java\n\tmodified:   openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@792592 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/openjpa/commit/f6413764d5b41a83003a163b74023dce8398fb05",
        "parent": "https://github.com/apache/openjpa/commit/07a98e871b2676bc3c868e4ca0e652a6af9027f2",
        "bug_id": "openjpa_f641376",
        "file": [
            {
                "sha": "a9028a6383827b4079169907a550f7ac10ac19d1",
                "filename": "openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java",
                "blob_url": "https://github.com/apache/openjpa/blob/f6413764d5b41a83003a163b74023dce8398fb05/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java",
                "raw_url": "https://github.com/apache/openjpa/raw/f6413764d5b41a83003a163b74023dce8398fb05/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java",
                "status": "modified",
                "changes": 13,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java?ref=f6413764d5b41a83003a163b74023dce8398fb05",
                "patch": "@@ -94,15 +94,16 @@\n     private static long _lastMillis = 0L;\n     private static final int MAX_14BIT = 0x3FFF;\n     private static short _seq = 0;\n-        \n+\n+    private static boolean type1Initialized = false;\n     /*\n      * Initializer for type 1 UUIDs.  Creates random generator and genenerates\n      * the node portion of the UUID using the IP address.\n      */\n-    private static synchronized void initializeForType1()\n-    {\n-        if (RANDOM != null)\n+    private static synchronized void initializeForType1() {\n+        if (type1Initialized == true) {\n             return;\n+        }\n         // note that secure random is very slow the first time\n         // it is used; consider switching to a standard random\n         RANDOM = new SecureRandom();\n@@ -118,6 +119,7 @@ private static synchronized void initializeForType1()\n         IP = new byte[6];\n         RANDOM.nextBytes(IP);\n         System.arraycopy(ip, 0, IP, 2, ip.length);        \n+        type1Initialized = true;\n     }\n \n     /**\n@@ -134,8 +136,9 @@ private static synchronized void initializeForType1()\n      * Creates a type 1 UUID \n      */\n     public static byte[] createType1() {\n-        if (RANDOM == null)\n+        if (type1Initialized == false) {\n             initializeForType1();\n+        }\n         // set ip addr\n         byte[] uuid = new byte[16];\n         System.arraycopy(IP, 0, uuid, 10, IP.length);",
                "deletions": 5
            },
            {
                "sha": "8b86fe23429fdbedbd7f0c81789edb39c47916c7",
                "filename": "openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java",
                "blob_url": "https://github.com/apache/openjpa/blob/f6413764d5b41a83003a163b74023dce8398fb05/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java",
                "raw_url": "https://github.com/apache/openjpa/raw/f6413764d5b41a83003a163b74023dce8398fb05/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java",
                "status": "modified",
                "changes": 35,
                "additions": 35,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java?ref=f6413764d5b41a83003a163b74023dce8398fb05",
                "patch": "@@ -18,6 +18,10 @@\n  */\n package org.apache.openjpa.lib.util;\n \n+import java.lang.reflect.Field;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.security.PrivilegedExceptionAction;\n import java.util.HashSet;\n import java.util.Set;\n \n@@ -76,4 +80,35 @@ public void testGetTime() {\n             time = newTime;\n         }\n     }\n+    \n+    public void testInitType1MultiThreaded() throws Exception {\n+        // This test method depends IP and RANDOM in UUIDGenerator to be null\n+        // and type1Initialized to be false. Using reflection to ensure that\n+        // those fields are null. Wrap this  method in doPrivledgedAction so it\n+        // doesn't fail when running with security.\n+        AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {\n+            public Object run() throws Exception {\n+                Class uuid = UUIDGenerator.class;\n+                Field[] fields = uuid.getDeclaredFields();\n+                for (Field f : fields) {\n+                    if (f.getName().equals(\"type1Initialized\")) {\n+                        f.setAccessible(true);\n+                        f.set(null, false);\n+                    } else if (f.getName().equals(\"IP\") || f.getName().equals(\"RANDOM\")) {\n+                        f.setAccessible(true);\n+                        f.set(null, null);\n+                    }\n+                }\n+                Thread t = new Thread() {\n+                    public void run() {\n+                        UUIDGenerator.createType1();\n+                    }\n+                };\n+\n+                t.start();\n+                UUIDGenerator.createType1();\n+                return null;\n+            }\n+        });\n+    }// end testInitType1MultiThreaded\n }",
                "deletions": 0
            }
        ],
        "patched_files": [
            "UUIDGenerator.java"
        ],
        "unit_tests": [
            "TestUUIDGenerator.java"
        ]
    },
    "openjpa_c960f72": {
        "repo": "openjpa",
        "message": "OPENJPA-1882: Fix DataCacheStoreManager NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1033637 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/openjpa/commit/c960f725cb6d6ad6211ceec654ea657ccbebface",
        "parent": "https://github.com/apache/openjpa/commit/5040a436e7dc394dececa869321cfae52f30e4ac",
        "bug_id": "openjpa_c960f72",
        "file": [
            {
                "sha": "8f1fecf645abe5319ba1152fcbe21a432436a337",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java",
                "blob_url": "https://github.com/apache/openjpa/blob/c960f725cb6d6ad6211ceec654ea657ccbebface/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java",
                "raw_url": "https://github.com/apache/openjpa/raw/c960f725cb6d6ad6211ceec654ea657ccbebface/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java",
                "status": "modified",
                "changes": 15,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=c960f725cb6d6ad6211ceec654ea657ccbebface",
                "patch": "@@ -281,17 +281,17 @@ private static Modifications getModifications(Map<DataCache,Modifications> modMa\n \n     public boolean exists(OpenJPAStateManager sm, Object edata) {\n         DataCache cache = _mgr.selectCache(sm);\n-        CacheStatistics stats = cache.getStatistics();\n+        CacheStatistics stats = (cache == null) ? null : cache.getStatistics();\n         if (cache != null && !isLocking(null) && cache.contains(sm.getObjectId())){\n-            if (stats.isEnabled()) {\n+            if (stats != null && stats.isEnabled()) {\n                 // delay this call ONLY if stats collection is enabled\n                 Class<?> cls = sm.getMetaData().getDescribedType();\n                 ((CacheStatisticsSPI)stats).newGet(cls, false);\n             }\n             return true;\n         }\n         // If isLocking(null)==true && cache.contains(..) == true... probably shouldn't count?\n-        if (stats.isEnabled()) {\n+        if (stats != null && stats.isEnabled()) {\n             // delay this call ONLY if stats collection is enabled\n             Class<?> cls = sm.getMetaData().getDescribedType();\n             ((CacheStatisticsSPI)stats).newGet(cls, false);\n@@ -322,14 +322,13 @@ public boolean isCached(List<Object> oids, BitSet edata) {\n     public boolean syncVersion(OpenJPAStateManager sm, Object edata) {\n         DataCache cache = _mgr.selectCache(sm);\n         FetchConfiguration fc = sm.getContext().getFetchConfiguration();\n-        CacheStatistics stats = cache.getStatistics();\n+        CacheStatistics stats = (cache == null) ? null : cache.getStatistics();\n         if (cache == null || sm.isEmbedded() || fc.getCacheRetrieveMode() == DataCacheRetrieveMode.BYPASS) {\n-            if(stats.isEnabled()){\n-                ((CacheStatisticsSPI)stats).newGet(sm.getMetaData().getDescribedType(), false);\n+            if (stats != null && stats.isEnabled()) {\n+                ((CacheStatisticsSPI) stats).newGet(sm.getMetaData().getDescribedType(), false);\n             }\n             return super.syncVersion(sm, edata);\n         }\n-        \n         DataCachePCData data;\n         Object version = null;\n         data = cache.get(sm.getObjectId());\n@@ -338,7 +337,7 @@ public boolean syncVersion(OpenJPAStateManager sm, Object edata) {\n \n         // if we have a cached version update from there\n         if (version != null) {\n-            if(stats.isEnabled()){\n+            if (stats != null && stats.isEnabled()) {\n                 ((CacheStatisticsSPI)stats).newGet(data.getType(), true);\n             }\n             if (!version.equals(sm.getVersion())) {",
                "deletions": 8
            },
            {
                "sha": "e84cf8c91811000650b021406db7414b1ac5f4d6",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheStoreManager.java",
                "blob_url": "https://github.com/apache/openjpa/blob/c960f725cb6d6ad6211ceec654ea657ccbebface/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheStoreManager.java",
                "raw_url": "https://github.com/apache/openjpa/raw/c960f725cb6d6ad6211ceec654ea657ccbebface/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheStoreManager.java",
                "status": "added",
                "changes": 82,
                "additions": 82,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheStoreManager.java?ref=c960f725cb6d6ad6211ceec654ea657ccbebface",
                "patch": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.datacache.DataCacheManager;\n+import org.apache.openjpa.datacache.DataCacheStoreManager;\n+import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.kernel.DelegatingStoreManager;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.persistence.EntityManagerImpl;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * \n+ * This test was added for OPENJPA-1882.\n+ * <p>\n+ * When caching is enabled and a given type isn't being cached, make sure calling exists/syncVersion with that type\n+ * doesn't result in a NPE.\n+ * \n+ */\n+public class TestDataCacheStoreManager extends SingleEMFTestCase {\n+    Object[] p =\n+        new Object[] { CLEAR_TABLES, CachedEntityStatistics.class, \"openjpa.DataCache\", \"true(EnableStatistics=true)\",\n+            \"openjpa.QueryCache\", \"true\", };\n+\n+    private EntityManager em;\n+    private DataCacheStoreManager dsm;\n+    private DataCacheManager dcm;\n+    private OpenJPAStateManager sm;\n+\n+    public void setUp() {\n+        super.setUp(p);\n+\n+        em = emf.createEntityManager();\n+        dcm = emf.getConfiguration().getDataCacheManagerInstance();\n+        dsm =\n+            (DataCacheStoreManager) ((DelegatingStoreManager) ((EntityManagerImpl) em).getBroker().getStoreManager())\n+                .getDelegate();\n+\n+        em.getTransaction().begin();\n+        CachedEntityStatistics p = new CachedEntityStatistics();\n+        em.persist(p);\n+        em.getTransaction().commit();\n+\n+        dcm.stopCaching(CachedEntityStatistics.class.getName());\n+\n+        sm = (OpenJPAStateManager) ((PersistenceCapable) p).pcGetStateManager();\n+    }\n+\n+    public void tearDown() throws Exception {\n+        dcm.startCaching(CachedEntityStatistics.class.getName());\n+        em.close();\n+\n+        super.tearDown();\n+    }\n+\n+    public void testExists() {\n+        dsm.exists(sm, null);\n+    }\n+\n+    public void testsyncVersion() {\n+        dsm.syncVersion(sm, null);\n+    }\n+}",
                "deletions": 0
            }
        ],
        "patched_files": [
            "DataCacheStoreManager.java"
        ],
        "unit_tests": [
            "TestDataCacheStoreManager.java"
        ]
    },
    "openjpa_04900fe": {
        "repo": "openjpa",
        "message": "OPENJPA-819 Committing fix for NPE and corresponding test case contributed by Dianne Richards.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@727813 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/openjpa/commit/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8",
        "parent": "https://github.com/apache/openjpa/commit/78dda5c2b720872d3898b47f6af18f01f25746f1",
        "bug_id": "openjpa_04900fe",
        "file": [
            {
                "sha": "d7a10545ccb73103ac280d068f4619e03c5fbbe7",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java",
                "blob_url": "https://github.com/apache/openjpa/blob/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java",
                "raw_url": "https://github.com/apache/openjpa/raw/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java",
                "status": "modified",
                "changes": 11,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java?ref=04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8",
                "patch": "@@ -43,6 +43,7 @@\n import org.apache.openjpa.util.GeneratedClasses;\r\n import org.apache.openjpa.util.ImplHelper;\r\n import org.apache.openjpa.util.InternalException;\r\n+import org.apache.openjpa.util.MetaDataException;\r\n import org.apache.openjpa.util.UserException;\r\n import serp.bytecode.BCClass;\r\n \r\n@@ -133,10 +134,16 @@ public void write(BCClass bc) throws IOException {\n \r\n             // set this before enhancement as well as after since enhancement\r\n             // uses a different metadata repository, and the metadata config\r\n-            // matters in the enhancement contract. Don't do any warning here,\r\n+            // matters in the enhancement contract. In order to avoid a \r\n+            // NullPointerException, check for no metadata and throw an\r\n+            // exception if none exists. Otherwise, don't do any warning here,\r\n             // since we'll issue warnings when we do the final metadata\r\n             // reconfiguration at the end of this method.\r\n-            configureMetaData(enhancer.getMetaData(), conf, redefine, false);\r\n+            ClassMetaData meta = enhancer.getMetaData();\r\n+            if (meta == null) {\r\n+                throw new MetaDataException(_loc.get(\"no-meta\", cls)).setFatal(true);\r\n+            }\r\n+            configureMetaData(meta, conf, redefine, false);\r\n \r\n             unspecified = collectRelatedUnspecifiedTypes(enhancer.getMetaData(),\r\n                 classes, unspecified);\r",
                "deletions": 2
            },
            {
                "sha": "bfcedb60512b0d27333fb64f9aa8e7c32bd6b5b7",
                "filename": "openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties",
                "blob_url": "https://github.com/apache/openjpa/blob/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties",
                "raw_url": "https://github.com/apache/openjpa/raw/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties?ref=04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8",
                "patch": "@@ -16,7 +16,9 @@\n # under the License.  \n \n copy-no-oid: Cannot copy identity for abstract type \"{0}\".\n-no-meta: No registered metadata for type \"{0}\".\n+no-meta: No registered metadata for type \"{0}\". This can happen if this \\\n+    class has not been annotated as a persistent entity or specified in the \\\n+    persistence unit (ex: in the orm.xml). \n bad-getter: Missing getter for property \"{1}\" in type \"{0}\". \n bad-setter: Missing setter for property \"{1}\" in type \"{0}\". \n bad-field: Missing field for property \"{1}\" in type \"{0}\".",
                "deletions": 1
            },
            {
                "sha": "b21fd2428c5870250f9fa4c337bd391b6f199533",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Animal.java",
                "blob_url": "https://github.com/apache/openjpa/blob/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Animal.java",
                "raw_url": "https://github.com/apache/openjpa/raw/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Animal.java",
                "status": "added",
                "changes": 28,
                "additions": 28,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Animal.java?ref=04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8",
                "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+// This class specifically does NOT have @Entity specified for it since it is\n+// used by the TestMissingMetaData test case.\n+public class Animal {\n+    private String name;\n+    \n+    public Animal() {\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "7286f85f09a392c8926130d19e52870bf616aa6b",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestMissingMetaData.java",
                "blob_url": "https://github.com/apache/openjpa/blob/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestMissingMetaData.java",
                "raw_url": "https://github.com/apache/openjpa/raw/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestMissingMetaData.java",
                "status": "added",
                "changes": 64,
                "additions": 64,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestMissingMetaData.java?ref=04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8",
                "patch": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import org.apache.openjpa.persistence.ArgumentException;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+\n+import junit.framework.TestCase;\n+import junit.textui.TestRunner;\n+\n+// This test case extends TestCase directly instead of SingleEMTestCase with the\n+// corresponding setup() method because that scheme goes down a different code\n+// path and doesn't test the intended code change.\n+public class TestMissingMetaData extends TestCase {\n+    private OpenJPAEntityManagerFactory emf;\n+\n+    public void setUp() {\n+        // This test case uses a different persistence xml file because\n+        // modifying the current persistence.xml file with a bad class would\n+        // cause the TestEnhancementWithMultiplePUs test case to fail.\n+        emf = OpenJPAPersistence.createEntityManagerFactory(\n+            \"test-missing-metadata\", \"persistence2.xml\");\n+    }\n+    \n+    public void testMissingMetaData() {\n+        String msg =\n+            \"No registered metadata for type \" +\n+            \"\\\"class org.apache.openjpa.persistence.simple.Animal\\\".\";\n+        try {\n+            emf.createEntityManager();\n+            fail(\"didn't receive expected ArgumentException - \" + msg);\n+        } catch (Exception e) {\n+            assertEquals(ArgumentException.class,e.getClass());\n+            assertTrue(e.getMessage().startsWith(msg));\n+        }\n+    }\n+    \n+    public void tearDown() {\n+        emf.close();\n+    }\n+    \n+    public static void main(String[] args) {\n+        TestRunner.run(TestMissingMetaData.class);\n+\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "5b1994e6582039befe90490b7eab37ac02c9f373",
                "filename": "openjpa-persistence-jdbc/src/test/resources/META-INF/persistence2.xml",
                "blob_url": "https://github.com/apache/openjpa/blob/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence2.xml",
                "raw_url": "https://github.com/apache/openjpa/raw/04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence2.xml",
                "status": "added",
                "changes": 28,
                "additions": 28,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence2.xml?ref=04900fe85c90b86e0becb5b2cb59ba4d08ae4cf8",
                "patch": "@@ -0,0 +1,28 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    version=\"1.0\">\n+    \n+    <persistence-unit name=\"test-missing-metadata\">\n+    \t<class>org.apache.openjpa.persistence.simple.Animal</class>\n+    </persistence-unit>\n+    \n+</persistence>",
                "deletions": 0
            }
        ],
        "patched_files": [
            "ManagedClassSubclasser.java",
            "Animal.java"
        ],
        "unit_tests": [
            "TestMissingMetaData.java"
        ]
    },
    "openjpa_3f3d586": {
        "repo": "openjpa",
        "message": "OPENJPA-1413: fix NPE when update using CASE expression on Derby\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@886991 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/openjpa/commit/3f3d586c7301b1f2f926fb40fac194b6229d970e",
        "parent": "https://github.com/apache/openjpa/commit/f697798fd8dac5c9567ecdbd2bd768169cbcc2ef",
        "bug_id": "openjpa_3f3d586",
        "file": [
            {
                "sha": "efe1ba3fd7908a6bcf97f2e42496ac1b8806edbf",
                "filename": "openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareEqualExpression.java",
                "blob_url": "https://github.com/apache/openjpa/blob/3f3d586c7301b1f2f926fb40fac194b6229d970e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareEqualExpression.java",
                "raw_url": "https://github.com/apache/openjpa/raw/3f3d586c7301b1f2f926fb40fac194b6229d970e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareEqualExpression.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareEqualExpression.java?ref=3f3d586c7301b1f2f926fb40fac194b6229d970e",
                "patch": "@@ -106,7 +106,8 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         boolean val2Null = _val2 instanceof Const\n             && ((Const) _val2).isSQLValueNull(sel, ctx, bstate.state2);\n         appendTo(sel, ctx, bstate, buf, val1Null, val2Null);\n-        sel.append(buf, state.joins);\n+        if (sel != null)\n+            sel.append(buf, state.joins);\n     }\n \n     public void selectColumns(Select sel, ExpContext ctx, ExpState state, ",
                "deletions": 1
            },
            {
                "sha": "8c884949a0f576f9d7f0d49f8497ffdcaaa18f9e",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java",
                "blob_url": "https://github.com/apache/openjpa/blob/3f3d586c7301b1f2f926fb40fac194b6229d970e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java",
                "raw_url": "https://github.com/apache/openjpa/raw/3f3d586c7301b1f2f926fb40fac194b6229d970e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java",
                "status": "modified",
                "changes": 23,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java?ref=3f3d586c7301b1f2f926fb40fac194b6229d970e",
                "patch": "@@ -249,22 +249,19 @@ public void testGeneralCaseExpressions() {\n         assertEquals(\"the name is not Jacob\", \"Jacob\", result3[0]);\n         assertEquals(\"the credit rating is not 'POOR'\", \"POOR\", result3[1]);\n \n-        /*\n-        // this jpql fail with NPE in Derby. It works with DB2 \n         String update2 = \"update CompUser c set c.creditRating = \" +\n             \" CASE WHEN c.name ='Jacob' THEN \" +\n-            \"org.apache.openjpa.persistence.common.apps.CompUser$\n-            CreditRating.POOR\" + \n+            \"org.apache.openjpa.persistence.common.apps.CompUser$CreditRating.POOR\" + \n             \" WHEN c.name = 'Ugo' THEN \" + \n-            \"org.apache.openjpa.persistence.common.apps.CompUser$\n-            CreditRating.GOOD \" +\n+            \"org.apache.openjpa.persistence.common.apps.CompUser$CreditRating.GOOD \" +\n             \" ELSE \" + \n-            \"org.apache.openjpa.persistence.common.apps.CompUser$\n-            CreditRating.EXCELLENT \" +\n+            \"org.apache.openjpa.persistence.common.apps.CompUser$CreditRating.EXCELLENT \" +\n             \" END \";\n-        */\n+        int updateCount = em.createQuery(update2).executeUpdate();\n+        assertEquals(\"the result is not 6\", 6, updateCount);\n         \n-        String update2 = \"update CompUser c set c.creditRating = \" +\n+        \n+        String update3 = \"update CompUser c set c.creditRating = \" +\n             \" CASE WHEN c.age > 30 THEN \" +\n             \"org.apache.openjpa.persistence.common.apps.\" +\n             \"CompUser$CreditRating.POOR\" + \n@@ -275,7 +272,7 @@ public void testGeneralCaseExpressions() {\n             \"org.apache.openjpa.persistence.common.apps.\" +\n             \"CompUser$CreditRating.EXCELLENT \" +\n             \" END \"; \n-        int updateCount = em.createQuery(update2).executeUpdate();\n+        updateCount = em.createQuery(update3).executeUpdate();\n         assertEquals(\"the result is not 6\", 6, updateCount);\n         \n         String query4 = \"select e.name, e.creditRating from CompUser e \" + \n@@ -300,7 +297,7 @@ public void testGeneralCaseExpressions() {\n             ((org.apache.openjpa.persistence.common.apps.CompUser.CreditRating)\n             result4[1]).name());\n         \n-        String update3 = \"update CompUser c set c.creditRating = \" +\n+        String update4 = \"update CompUser c set c.creditRating = \" +\n             \" CASE c.age WHEN 35 THEN \" +\n             \"org.apache.openjpa.persistence.common.apps.\" +\n             \"CompUser$CreditRating.POOR\" + \n@@ -311,7 +308,7 @@ public void testGeneralCaseExpressions() {\n             \"org.apache.openjpa.persistence.common.apps.\" +\n             \"CompUser$CreditRating.EXCELLENT \" +\n             \" END \"; \n-        result = em.createQuery(update3).executeUpdate();\n+        result = em.createQuery(update4).executeUpdate();\n         assertEquals(\"the result is not 6\", 6, result);\n \n         // Derby fails but DB2 works ",
                "deletions": 13
            }
        ],
        "patched_files": [
            "CompareEqualExpression.java"
        ],
        "unit_tests": [
            "TestJPQLScalarExpressions.java"
        ]
    },
    "openjpa_9496937": {
        "repo": "openjpa",
        "message": "OPENJPA-2234: Avoid NPE when the ManagedRuntime returns a null TransactionManager.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1396043 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/openjpa/commit/94969374f623a82a8d659b763b2c987d2b1c3d79",
        "parent": "https://github.com/apache/openjpa/commit/4823f1748eeba31bbf81b7fde1c017470f0d3d92",
        "bug_id": "openjpa_9496937",
        "file": [
            {
                "sha": "f338b1ff2b7811e8e74cb970d017b244b3593242",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java",
                "blob_url": "https://github.com/apache/openjpa/blob/94969374f623a82a8d659b763b2c987d2b1c3d79/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java",
                "raw_url": "https://github.com/apache/openjpa/raw/94969374f623a82a8d659b763b2c987d2b1c3d79/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=94969374f623a82a8d659b763b2c987d2b1c3d79",
                "patch": "@@ -65,6 +65,7 @@\n import org.apache.openjpa.meta.MetaDataModes;\n import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.util.GeneralException;\n+import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.InvalidStateException;\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.UserException;\n@@ -722,6 +723,9 @@ boolean syncWithManagedTransaction(BrokerImpl broker, boolean begin) {\n         try {\n             ManagedRuntime mr = broker.getManagedRuntime();\n             TransactionManager tm = mr.getTransactionManager();\n+            if (tm == null) {\n+                throw new InternalException(_loc.get(\"null-transactionmanager\", mr));\n+            }\n             trans = tm.getTransaction();\n             if (trans != null\n                 && (trans.getStatus() == Status.STATUS_NO_TRANSACTION",
                "deletions": 0
            },
            {
                "sha": "3e5a1ed28f2bb75a62be33c4d79919c1047ae268",
                "filename": "openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties",
                "blob_url": "https://github.com/apache/openjpa/blob/94969374f623a82a8d659b763b2c987d2b1c3d79/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties",
                "raw_url": "https://github.com/apache/openjpa/raw/94969374f623a82a8d659b763b2c987d2b1c3d79/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties?ref=94969374f623a82a8d659b763b2c987d2b1c3d79",
                "patch": "@@ -456,4 +456,4 @@ writebehind-cfg-err: Missing required WriteBehind configuration parameter \"{0}\"\n bad-lock-scope: This lock manager does not recognize lock scope \"{0}\".\n detach-none-exclusive: Configured AutoDetach option \"{0}\" is incorrect because \\\n     NONE option can not be specified with any other option other than CLOSE. \n-\n+null-transactionmanager: Received a null javax.transaction.TransactionManager from the openjpa.ManagedRuntime \"{0}\".",
                "deletions": 1
            },
            {
                "sha": "378c4e96bcf1e759909c2030884d98a62a0dbeff",
                "filename": "openjpa-kernel/src/test/java/org/apache/openjpa/ee/TestNullTransactionManagerFromRuntime.java",
                "blob_url": "https://github.com/apache/openjpa/blob/94969374f623a82a8d659b763b2c987d2b1c3d79/openjpa-kernel/src/test/java/org/apache/openjpa/ee/TestNullTransactionManagerFromRuntime.java",
                "raw_url": "https://github.com/apache/openjpa/raw/94969374f623a82a8d659b763b2c987d2b1c3d79/openjpa-kernel/src/test/java/org/apache/openjpa/ee/TestNullTransactionManagerFromRuntime.java",
                "status": "added",
                "changes": 309,
                "additions": 309,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/test/java/org/apache/openjpa/ee/TestNullTransactionManagerFromRuntime.java?ref=94969374f623a82a8d659b763b2c987d2b1c3d79",
                "patch": "@@ -0,0 +1,309 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.ee;\n+\n+import java.util.BitSet;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import javax.transaction.TransactionManager;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n+import org.apache.openjpa.kernel.AbstractBrokerFactory;\n+import org.apache.openjpa.kernel.BrokerImpl;\n+import org.apache.openjpa.kernel.DelegatingStoreManager;\n+import org.apache.openjpa.kernel.FetchConfiguration;\n+import org.apache.openjpa.kernel.FetchConfigurationImpl;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.kernel.PCState;\n+import org.apache.openjpa.kernel.Seq;\n+import org.apache.openjpa.kernel.StoreContext;\n+import org.apache.openjpa.kernel.StoreManager;\n+import org.apache.openjpa.kernel.StoreQuery;\n+import org.apache.openjpa.lib.rop.ResultObjectProvider;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.FieldMetaData;\n+\n+public class TestNullTransactionManagerFromRuntime extends TestCase {\n+    public void test() {\n+        OpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\n+        conf.setMetaDataFactory(\"org.apache.openjpa.meta.NoneMetaDataFactory\");\n+        conf.setManagedRuntime(new ManagedRuntimeNullTransactionManager());\n+        MangagedRuntimeTestBrokerFactory fact = new MangagedRuntimeTestBrokerFactory(conf);\n+        BrokerImpl b = new BrokerImpl();\n+        try {\n+            b.initialize(fact, new ManagedRuntimeNoopDelegatingStoreManager(null), true, 0, false);\n+            fail(\"Calling syncWithManagedTransaction should have thrown an exception.\");\n+        } catch (RuntimeException re) {\n+            // expected\n+        }\n+    }\n+\n+    class ManagedRuntimeNullTransactionManager extends AbstractManagedRuntime {\n+        @Override\n+        public Throwable getRollbackCause() throws Exception {\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public TransactionManager getTransactionManager() throws Exception {\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public void setRollbackOnly(Throwable cause) throws Exception {\n+\n+        }\n+    }\n+\n+    class MangagedRuntimeTestBrokerFactory extends AbstractBrokerFactory {\n+        public MangagedRuntimeTestBrokerFactory(OpenJPAConfiguration conf) {\n+            super(conf);\n+        }\n+\n+        @Override\n+        protected StoreManager newStoreManager() {\n+\n+            return null;\n+        }\n+    }\n+\n+    class ManagedRuntimeNoopDelegatingStoreManager extends DelegatingStoreManager {\n+        public ManagedRuntimeNoopDelegatingStoreManager(StoreManager store) {\n+            super(store);\n+        }\n+\n+        @Override\n+        public StoreManager getDelegate() {\n+\n+            return super.getDelegate();\n+        }\n+\n+        @Override\n+        public StoreManager getInnermostDelegate() {\n+\n+            return super.getInnermostDelegate();\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+\n+            return super.hashCode();\n+        }\n+\n+        @Override\n+        public boolean equals(Object other) {\n+\n+            return super.equals(other);\n+        }\n+\n+        @Override\n+        public void setContext(StoreContext ctx) {\n+        }\n+\n+        @Override\n+        public void beginOptimistic() {\n+\n+            super.beginOptimistic();\n+        }\n+\n+        @Override\n+        public void rollbackOptimistic() {\n+\n+            super.rollbackOptimistic();\n+        }\n+\n+        @Override\n+        public void begin() {\n+\n+            super.begin();\n+        }\n+\n+        @Override\n+        public void commit() {\n+\n+            super.commit();\n+        }\n+\n+        @Override\n+        public void rollback() {\n+\n+            super.rollback();\n+        }\n+\n+        @Override\n+        public boolean exists(OpenJPAStateManager sm, Object context) {\n+\n+            return super.exists(sm, context);\n+        }\n+\n+        @Override\n+        public boolean syncVersion(OpenJPAStateManager sm, Object context) {\n+\n+            return super.syncVersion(sm, context);\n+        }\n+\n+        @Override\n+        public boolean initialize(OpenJPAStateManager sm, PCState state, FetchConfiguration fetch, Object context) {\n+\n+            return super.initialize(sm, state, fetch, context);\n+        }\n+\n+        @Override\n+        public boolean load(OpenJPAStateManager sm, BitSet fields, FetchConfiguration fetch, int lockLevel,\n+            Object context) {\n+\n+            return super.load(sm, fields, fetch, lockLevel, context);\n+        }\n+\n+        @Override\n+        public Collection<Object> loadAll(Collection<OpenJPAStateManager> sms, PCState state, int load,\n+            FetchConfiguration fetch, Object context) {\n+\n+            return super.loadAll(sms, state, load, fetch, context);\n+        }\n+\n+        @Override\n+        public void beforeStateChange(OpenJPAStateManager sm, PCState fromState, PCState toState) {\n+\n+            super.beforeStateChange(sm, fromState, toState);\n+        }\n+\n+        @Override\n+        public Collection<Exception> flush(Collection<OpenJPAStateManager> sms) {\n+\n+            return super.flush(sms);\n+        }\n+\n+        @Override\n+        public boolean assignObjectId(OpenJPAStateManager sm, boolean preFlush) {\n+\n+            return super.assignObjectId(sm, preFlush);\n+        }\n+\n+        @Override\n+        public boolean assignField(OpenJPAStateManager sm, int field, boolean preFlush) {\n+\n+            return super.assignField(sm, field, preFlush);\n+        }\n+\n+        @Override\n+        public Class<?> getManagedType(Object oid) {\n+\n+            return super.getManagedType(oid);\n+        }\n+\n+        @Override\n+        public Class<?> getDataStoreIdType(ClassMetaData meta) {\n+\n+            return super.getDataStoreIdType(meta);\n+        }\n+\n+        @Override\n+        public Object copyDataStoreId(Object oid, ClassMetaData meta) {\n+\n+            return super.copyDataStoreId(oid, meta);\n+        }\n+\n+        @Override\n+        public Object newDataStoreId(Object oidVal, ClassMetaData meta) {\n+\n+            return super.newDataStoreId(oidVal, meta);\n+        }\n+\n+        @Override\n+        public Object getClientConnection() {\n+\n+            return super.getClientConnection();\n+        }\n+\n+        @Override\n+        public void retainConnection() {\n+\n+            super.retainConnection();\n+        }\n+\n+        @Override\n+        public void releaseConnection() {\n+\n+            super.releaseConnection();\n+        }\n+\n+        @Override\n+        public ResultObjectProvider executeExtent(ClassMetaData meta, boolean subclasses, FetchConfiguration fetch) {\n+\n+            return super.executeExtent(meta, subclasses, fetch);\n+        }\n+\n+        @Override\n+        public StoreQuery newQuery(String language) {\n+\n+            return super.newQuery(language);\n+        }\n+\n+        @Override\n+        public FetchConfiguration newFetchConfiguration() {\n+\n+            return new FetchConfigurationImpl();\n+        }\n+\n+        @Override\n+        public void close() {\n+\n+            super.close();\n+        }\n+\n+        @Override\n+        public int compareVersion(OpenJPAStateManager state, Object v1, Object v2) {\n+\n+            return super.compareVersion(state, v1, v2);\n+        }\n+\n+        @Override\n+        public Seq getDataStoreIdSequence(ClassMetaData forClass) {\n+\n+            return super.getDataStoreIdSequence(forClass);\n+        }\n+\n+        @Override\n+        public Seq getValueSequence(FieldMetaData fmd) {\n+\n+            return super.getValueSequence(fmd);\n+        }\n+\n+        @Override\n+        public boolean cancelAll() {\n+\n+            return super.cancelAll();\n+        }\n+\n+        @Override\n+        public boolean isCached(List<Object> oids, BitSet edata) {\n+\n+            return super.isCached(oids, edata);\n+        }\n+\n+    }\n+\n+}",
                "deletions": 0
            }
        ],
        "patched_files": [
            "AbstractBrokerFactory.java"
        ],
        "unit_tests": [
            "TestNullTransactionManagerFromRuntime.java"
        ]
    },
    "openjpa_6599b7b": {
        "repo": "openjpa",
        "message": "OPENJPA-2136: Fix NPE when using LiteAutoDetach.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1292034 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/openjpa/commit/6599b7b403fecc75ec7b3fb2bfd0b51bcfa6cdb8",
        "parent": "https://github.com/apache/openjpa/commit/c55f8469f1c24c88360220e9c5d82389a4b82dff",
        "bug_id": "openjpa_6599b7b",
        "file": [
            {
                "sha": "f7678e95b6c692fbea5502bf69bba43e3bbd8276",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java",
                "blob_url": "https://github.com/apache/openjpa/blob/6599b7b403fecc75ec7b3fb2bfd0b51bcfa6cdb8/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java",
                "raw_url": "https://github.com/apache/openjpa/raw/6599b7b403fecc75ec7b3fb2bfd0b51bcfa6cdb8/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=6599b7b403fecc75ec7b3fb2bfd0b51bcfa6cdb8",
                "patch": "@@ -3457,6 +3457,9 @@ private void detachAllInternalLite() {\n         if (_transAdditions != null) {\n             _transAdditions.clear();\n         }\n+        if (_pending != null) {\n+            _pending = null;\n+        }\n         if (_dmLite == null) {\n             _dmLite = new DetachManagerLite(_conf);\n         }",
                "deletions": 0
            },
            {
                "sha": "9fd9fd102bdff79f8ad4f70bf73cfb6d7f04ccef",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachLite.java",
                "blob_url": "https://github.com/apache/openjpa/blob/6599b7b403fecc75ec7b3fb2bfd0b51bcfa6cdb8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachLite.java",
                "raw_url": "https://github.com/apache/openjpa/raw/6599b7b403fecc75ec7b3fb2bfd0b51bcfa6cdb8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachLite.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachLite.java?ref=6599b7b403fecc75ec7b3fb2bfd0b51bcfa6cdb8",
                "patch": "@@ -45,6 +45,16 @@ public void setUp() {\n         root = createData();\n     }\n \n+    public void testPendingClear() {\n+        EntityManager em = emf.createEntityManager();\n+        DMCustomer dm = em.find(DMCustomer.class, root.getId());\n+        dm.setLastName(System.currentTimeMillis() + \"--last\");\n+        em.clear();\n+        em.getTransaction().begin();\n+        // Pre OPENJPA-2136 this commit call would fail.\n+        em.getTransaction().commit();\n+    }\n+\n     public void testLeaveProxy() {\n         Object[] p = props;\n         p[1] = \"loaded(LiteAutoDetach=true,DetachProxyFields=false)\";",
                "deletions": 0
            }
        ],
        "patched_files": [
            "BrokerImpl.java"
        ],
        "unit_tests": [
            "TestDetachLite.java"
        ]
    },
    "openjpa_fd4ca96": {
        "repo": "openjpa",
        "message": "OPENJPA-2267: Fix NPE in ResultPacker when there is a null result.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1391218 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/openjpa/commit/fd4ca960502967429a242bbdbb51abd778346899",
        "parent": "https://github.com/apache/openjpa/commit/e424097b564273b807f0637056ea244c40a125c3",
        "bug_id": "openjpa_fd4ca96",
        "file": [
            {
                "sha": "153a1bfcf63479fc8e221f2278ae270687c6dd37",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java",
                "blob_url": "https://github.com/apache/openjpa/blob/fd4ca960502967429a242bbdbb51abd778346899/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java",
                "raw_url": "https://github.com/apache/openjpa/raw/fd4ca960502967429a242bbdbb51abd778346899/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java?ref=fd4ca960502967429a242bbdbb51abd778346899",
                "patch": "@@ -199,7 +199,7 @@ private void assertConvertable(Class<?> candidate, Class<?>[] types,\n      * Pack the given object into an instance of the query's result class.\n      */\n     public Object pack(Object result) {\n-        if (_resultClass == result.getClass())\n+        if (result == null || _resultClass == result.getClass())\n             return result;\n         // special cases for efficient basic types where we want to avoid\n         // creating an array for call to general pack method below",
                "deletions": 1
            },
            {
                "sha": "e1f91ed7a1aee0ae49517624c3d08f01f481e306",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestNativeQueries.java",
                "blob_url": "https://github.com/apache/openjpa/blob/fd4ca960502967429a242bbdbb51abd778346899/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestNativeQueries.java",
                "raw_url": "https://github.com/apache/openjpa/raw/fd4ca960502967429a242bbdbb51abd778346899/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestNativeQueries.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestNativeQueries.java?ref=fd4ca960502967429a242bbdbb51abd778346899",
                "patch": "@@ -31,6 +31,8 @@\n \n public class TestNativeQueries extends SingleEMFTestCase {\n     private static final String TABLE_NAME = \"entity_1\";\n+    private static final String TABLE_NAME_2 = \"ENTITY2\";\n+    \n     private static final String CONST_NAME = \"testSimple\";\n     private static final int CONST_INT = 42;\n     \n@@ -148,6 +150,11 @@ public void testHintsAreProcessed() {\n         assertEquals(\"abc\", q.getHints().get(hintKey));\n         \n     }\n+    \n+    public void testNullResult(){\n+        String sql = \"SELECT max(pk) FROM \" + TABLE_NAME_2+ \"\";\n+        assertNull(em.createNativeQuery(sql, Long.class).getSingleResult());\n+    }\n \n     public void assertSize(int num, List l) {\n         assertNotNull(l);",
                "deletions": 0
            }
        ],
        "patched_files": [
            "ResultPacker.java"
        ],
        "unit_tests": [
            "TestNativeQueries.java"
        ]
    },
    "openjpa_cc1dcd9": {
        "repo": "openjpa",
        "message": "OPENJPA-1847: Fix NPE in SchemaGenerator and formatting.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1063827 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/openjpa/commit/cc1dcd9a4c177a28db4d8060748f59bf4e9b670e",
        "parent": "https://github.com/apache/openjpa/commit/d91475d506d06aa550b4ff15c20bcdc348c58684",
        "bug_id": "openjpa_cc1dcd9",
        "file": [
            {
                "sha": "51bf3acbdf54e3481eebc25e127ef887f29ef7c1",
                "filename": "openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java",
                "blob_url": "https://github.com/apache/openjpa/blob/cc1dcd9a4c177a28db4d8060748f59bf4e9b670e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java",
                "raw_url": "https://github.com/apache/openjpa/raw/cc1dcd9a4c177a28db4d8060748f59bf4e9b670e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java",
                "status": "modified",
                "changes": 76,
                "additions": 34,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java?ref=cc1dcd9a4c177a28db4d8060748f59bf4e9b670e",
                "patch": "@@ -267,59 +267,52 @@ public void generateSchemas(String[] schemasAndTables)\n      * {@link #generatePrimaryKeys}, and {@link #generateForeignKeys}\n      * automatically.\n      */\n-    public void generateSchemas(DBIdentifier[] schemasAndTables)\n-        throws SQLException {\n+    public void generateSchemas(DBIdentifier[] schemasAndTables) throws SQLException {\n         fireGenerationEvent(_loc.get(\"generating-schemas\"));\n+        // generate all schemas and tables\n+        try {\n+            getConn();\n+            Object[][] schemaMap;\n+            if (schemasAndTables == null || schemasAndTables.length == 0)\n+                schemaMap = _allowed;\n+            else\n+                schemaMap = parseSchemasList(schemasAndTables);\n \n-        Object[][] schemaMap;\n-        if (schemasAndTables == null || schemasAndTables.length == 0)\n-            schemaMap = _allowed;\n-        else\n-            schemaMap = parseSchemasList(schemasAndTables);\n-\n-        if (schemaMap == null) {\n-            generateSchema(DBIdentifier.NULL, (DBIdentifier[])null);\n-\n-            // estimate the number of schema objects we will need to visit\n-            // in order to estimate progress total for any listeners\n-            int numTables = getTables(null).size();\n-            _schemaObjects += numTables\n-                + (_pks ? numTables : 0)\n-                + (_indexes ? numTables : 0)\n-                + (_fks ? numTables : 0);\n-\n-            if (_pks)\n-                generatePrimaryKeys(DBIdentifier.NULL, null);\n-            if (_indexes)\n-                generateIndexes(DBIdentifier.NULL, null);\n-            if (_fks)\n-                generateForeignKeys(DBIdentifier.NULL, null);\n-            return;\n-        }\n+            if (schemaMap == null) {\n+                generateSchema(DBIdentifier.NULL, (DBIdentifier[]) null);\n+\n+                // estimate the number of schema objects we will need to visit\n+                // in order to estimate progress total for any listeners\n+                int numTables = getTables(null).size();\n+                _schemaObjects +=\n+                    numTables + (_pks ? numTables : 0) + (_indexes ? numTables : 0) + (_fks ? numTables : 0);\n+\n+                if (_pks)\n+                    generatePrimaryKeys(DBIdentifier.NULL, null);\n+                if (_indexes)\n+                    generateIndexes(DBIdentifier.NULL, null);\n+                if (_fks)\n+                    generateForeignKeys(DBIdentifier.NULL, null);\n+                return;\n+            }\n \n-        // generate all schemas and tables\n-        try{ \n-            getConn(); \n             for (int i = 0; i < schemaMap.length; i++) {\n                 generateSchema((DBIdentifier) schemaMap[i][0], (DBIdentifier[]) schemaMap[i][1]);\n             }\n-        \n+\n             // generate pks, indexes, fks\n             DBIdentifier schemaName = DBIdentifier.NULL;\n             DBIdentifier[] tableNames;\n             for (int i = 0; i < schemaMap.length; i++) {\n                 schemaName = (DBIdentifier) schemaMap[i][0];\n                 tableNames = (DBIdentifier[]) schemaMap[i][1];\n-    \n+\n                 // estimate the number of schema objects we will need to visit\n                 // in order to estimate progress total for any listeners\n-                int numTables = (tableNames != null) ? tableNames.length\n-                    : getTables(schemaName).size();\n-                _schemaObjects += numTables\n-                    + (_pks ? numTables : 0)\n-                    + (_indexes ? numTables : 0)\n-                    + (_fks ? numTables : 0);\n-    \n+                int numTables = (tableNames != null) ? tableNames.length : getTables(schemaName).size();\n+                _schemaObjects +=\n+                    numTables + (_pks ? numTables : 0) + (_indexes ? numTables : 0) + (_fks ? numTables : 0);\n+\n                 if (_pks) {\n                     generatePrimaryKeys(schemaName, tableNames);\n                 }\n@@ -330,9 +323,8 @@ public void generateSchemas(DBIdentifier[] schemasAndTables)\n                     generateForeignKeys(schemaName, tableNames);\n                 }\n             }\n-        }\n-        finally  { \n-            closeConn(); \n+        } finally {\n+            closeConn();\n         }\n     }\n ",
                "deletions": 42
            },
            {
                "sha": "35fc1c398c4aa082b1e8e6d61e5cdaac87cb6581",
                "filename": "openjpa-persistence-jdbc/pom.xml",
                "blob_url": "https://github.com/apache/openjpa/blob/cc1dcd9a4c177a28db4d8060748f59bf4e9b670e/openjpa-persistence-jdbc/pom.xml",
                "raw_url": "https://github.com/apache/openjpa/raw/cc1dcd9a4c177a28db4d8060748f59bf4e9b670e/openjpa-persistence-jdbc/pom.xml",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/pom.xml?ref=cc1dcd9a4c177a28db4d8060748f59bf4e9b670e",
                "patch": "@@ -926,7 +926,6 @@\n                         <exclude>org/apache/openjpa/persistence/jdbc/schema/TestPerClassSequenceFactory.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/jdbc/schema/TestSchema.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/jdbc/schema/TestSchemaClone.java</exclude>\n-                        <exclude>org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/jdbc/schema/TestSequenceGeneratorEnsureCapacityCall.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaParser.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaSerializer.java</exclude>",
                "deletions": 1
            },
            {
                "sha": "ec67df180415a5572e9ed929bdca7777386a9ebe",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/BaseJDBCTest.java",
                "blob_url": "https://github.com/apache/openjpa/blob/cc1dcd9a4c177a28db4d8060748f59bf4e9b670e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/BaseJDBCTest.java",
                "raw_url": "https://github.com/apache/openjpa/raw/cc1dcd9a4c177a28db4d8060748f59bf4e9b670e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/BaseJDBCTest.java",
                "status": "modified",
                "changes": 26,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/BaseJDBCTest.java?ref=cc1dcd9a4c177a28db4d8060748f59bf4e9b670e",
                "patch": "@@ -27,31 +27,17 @@\n  */\n package org.apache.openjpa.persistence.jdbc.kernel;\n \n-import java.beans.BeanInfo;\n-import java.beans.Introspector;\n-import java.beans.PropertyDescriptor;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.math.BigDecimal;\n-import java.math.BigInteger;\n-import java.util.*;\n-import javax.management.IntrospectionException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n import org.apache.openjpa.kernel.Broker;\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.jpql.JPQLParser;\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n import org.apache.openjpa.lib.conf.Configurations;\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\n-\n-\n-\n-import java.lang.annotation.Annotation;\n-import junit.framework.*;\n-import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n \n \n public class BaseJDBCTest",
                "deletions": 20
            },
            {
                "sha": "2832d6c47109142d725613fff06bcfd2e921fa4b",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java",
                "blob_url": "https://github.com/apache/openjpa/blob/cc1dcd9a4c177a28db4d8060748f59bf4e9b670e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java",
                "raw_url": "https://github.com/apache/openjpa/raw/cc1dcd9a4c177a28db4d8060748f59bf4e9b670e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java",
                "status": "modified",
                "changes": 83,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java?ref=cc1dcd9a4c177a28db4d8060748f59bf4e9b670e",
                "patch": "@@ -42,7 +42,6 @@\n \n import org.apache.openjpa.persistence.jdbc.common.apps.*;\n \n-\n import java.lang.annotation.Annotation;\n import junit.framework.*;\n import javax.persistence.EntityManager;\n@@ -53,82 +52,36 @@\n import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n \n+public class TestSchemaGenerator extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest {\n \n-public class TestSchemaGenerator\n-        extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest {\n-        \n-    /** Creates a new instance of TestSchemaGenerator */\n-    public TestSchemaGenerator(String name) \n-    {\n-    \tsuper(name);\n+    @Override\n+    protected String getPersistenceUnitName() {\n+        // TODO Auto-generated method stub\n+        return \"TestConv\";\n     }\n-    \n-    public void DBMetadataTest()\n-    throws Exception {\n-        OpenJPAEntityManagerFactory pmf = (OpenJPAEntityManagerFactory)\n-        getEmf();\n-        //FIXME jthomas\n-        \n-        //ClassMapping cm = (ClassMapping) KodoJDOHelper.getMetaData\n-        //    (pmf, RuntimeTest1.class);\n-        ClassMapping cm =null;\n-        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\n-        \n-        DataSource ds = (DataSource) conf.getDataSource2(null);\n-        Connection c = ds.getConnection();\n-        DatabaseMetaData meta = c.getMetaData();\n-        DBDictionary dict = conf.getDBDictionaryInstance();\n-        \n-        String schema = cm.getTable().getSchema().getName();\n-        Table[] tables = dict.getTables(meta, c.getCatalog(), schema,\n-                cm.getTable().getName(), c);\n-        assertEquals(1, tables.length);\n-        \n-        Column[] columns = dict.getColumns(meta, c.getCatalog(), schema,\n-                cm.getTable().getName(), null, c);\n-        for (int i = 0; i < columns.length; i++)\n-            System.out.println(\"### \" + columns[i].getName());\n+\n+    /** Creates a new instance of TestSchemaGenerator */\n+    public TestSchemaGenerator(String name) {\n+        super(name);\n     }\n-    \n-    public void testSchemaGen()\n-    throws Exception {\n-        OpenJPAEntityManagerFactory pmf = (OpenJPAEntityManagerFactory)\n-        getEmf();\n+\n+    public void testSchemaGen() throws Exception {\n+        OpenJPAEntityManagerFactory pmf = (OpenJPAEntityManagerFactory) getEmf();\n         OpenJPAEntityManager pm = pmf.createEntityManager();\n-        JDBCConfiguration con =\n-            (JDBCConfiguration) ((OpenJPAEntityManagerSPI) pm)\n-            .getConfiguration();\n-        DBDictionary dict = con.getDBDictionaryInstance();\n-        MappingRepository repos = con.getMappingRepositoryInstance();\n-        ClassMapping cm = repos.getMapping(RuntimeTest1.class,\n-                pm.getClassLoader(), true);\n-        String schemas = cm.getTable().getSchema().getName();\n-        if (schemas == null)\n-            schemas = \"\";\n-        schemas += \".\" + cm.getTable().getName();\n-        \n-        Map props=new HashMap();\n-        props.put(\"openjpa.jdbc.Schemas\", schemas);\n-        \n-        OpenJPAEntityManagerFactory kpmf =(OpenJPAEntityManagerFactory)\n-                getEmf(props);\n-        JDBCConfiguration conf =\n-            (JDBCConfiguration) ((OpenJPAEntityManagerFactorySPI) kpmf)\n-            .getConfiguration();\n-        \n+        JDBCConfiguration conf = (JDBCConfiguration) ((OpenJPAEntityManagerFactorySPI) pmf).getConfiguration();\n+\n         StringWriter sw = new StringWriter();\n-        \n+\n         SchemaTool.Flags flags = new SchemaTool.Flags();\n         flags.writer = sw;\n         flags.primaryKeys = true;\n         flags.foreignKeys = true;\n         flags.indexes = true;\n         flags.openjpaTables = true;\n         flags.action = SchemaTool.ACTION_REFLECT;\n-        \n-        SchemaTool.run(conf, new String[0], flags,\n-                getClass().getClassLoader());\n-        \n+\n+        SchemaTool.run(conf, new String[0], flags, getClass().getClassLoader());\n+\n         sw.flush();\n         String data = sw.toString();\n         assertTrue(data.length() > 0);",
                "deletions": 65
            }
        ],
        "patched_files": [
            "SchemaGenerator.java"
        ],
        "unit_tests": [
            "TestSchemaGenerator.java",
            "BaseJDBCTest.java"
        ]
    },
    "openjpa_73cd301": {
        "repo": "openjpa",
        "message": "OPENJPA-1892: Fix NPE in DataCacheStoreManager.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1036988 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/openjpa/commit/73cd30152044f4fc56f25eb4b64529983dc9b0a1",
        "parent": "https://github.com/apache/openjpa/commit/24e17363ef3faf489bf187b26f748eb80a19d3a0",
        "bug_id": "openjpa_73cd301",
        "file": [
            {
                "sha": "127d50a6e11d750829e0e6f4fd883885b287ed3f",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java",
                "blob_url": "https://github.com/apache/openjpa/blob/73cd30152044f4fc56f25eb4b64529983dc9b0a1/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java",
                "raw_url": "https://github.com/apache/openjpa/raw/73cd30152044f4fc56f25eb4b64529983dc9b0a1/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java",
                "status": "modified",
                "changes": 11,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=73cd30152044f4fc56f25eb4b64529983dc9b0a1",
                "patch": "@@ -392,9 +392,14 @@ public boolean initialize(OpenJPAStateManager sm, PCState state, FetchConfigurat\n                            && ((fetch.getCacheStoreMode() == DataCacheStoreMode.USE && !alreadyCached)\n                             || (fetch.getCacheStoreMode() == DataCacheStoreMode.REFRESH));\n         if (updateCache) {\n-            cacheStateManager(cache, sm, data);\n-            if (stats.isEnabled()) {\n-                ((CacheStatisticsSPI) stats).newPut(sm.getMetaData().getDescribedType());\n+            // It is possible that the \"cacheability\" of the provided SM changed after hitting the DB. This can happen\n+            // when we are operating against an Entity that is in some sort of inheritance structure.\n+            cache = _mgr.selectCache(sm);\n+            if (cache != null) {\n+                cacheStateManager(cache, sm, data);\n+                if (stats.isEnabled()) {\n+                    ((CacheStatisticsSPI) stats).newPut(sm.getMetaData().getDescribedType());\n+                }\n             }\n         }\n         return fromDatabase || alreadyCached;",
                "deletions": 3
            },
            {
                "sha": "4c5245465056eab2272d638137b4dc171d1d4d8a",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeDisableSelectiveInheritance.java",
                "blob_url": "https://github.com/apache/openjpa/blob/73cd30152044f4fc56f25eb4b64529983dc9b0a1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeDisableSelectiveInheritance.java",
                "raw_url": "https://github.com/apache/openjpa/raw/73cd30152044f4fc56f25eb4b64529983dc9b0a1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeDisableSelectiveInheritance.java",
                "status": "added",
                "changes": 65,
                "additions": 65,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeDisableSelectiveInheritance.java?ref=73cd30152044f4fc56f25eb4b64529983dc9b0a1",
                "patch": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.cache.jpa.model.ChildUncacheable;\n+import org.apache.openjpa.persistence.cache.jpa.model.ParentUnspecifiedEntity;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * This test was added for https://issues.apache.org/jira/browse/OPENJPA-1892.\n+ * \n+ * The key to this test is that the ChildUncacheable is uncacheable and ParentUnspecifiedEntity is cacheable. In the\n+ * case were we pass the root Entity in em.find(ParentUnspecifiedEntity.class, 1) AND the id we passed corresponds to\n+ * the child Entity we shouldn't be caching this result.\n+ * \n+ */\n+public class TestCacheModeDisableSelectiveInheritance extends SingleEMFTestCase {\n+    Object[] params =\n+        new Object[] { ChildUncacheable.class, ParentUnspecifiedEntity.class, CLEAR_TABLES,\n+            \"javax.persistence.sharedCache.mode\", \"DISABLE_SELECTIVE\", \"openjpa.DataCache\", \"true\" };\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp(params);\n+    }\n+\n+    @Override\n+    public void tearDown() throws Exception {\n+\n+    }\n+\n+    public void testSimpleFind() throws Exception {\n+        EntityManager em = emf.createEntityManager();\n+        try {\n+            ChildUncacheable c = new ChildUncacheable();\n+            em.getTransaction().begin();\n+            em.persist(c);\n+            em.getTransaction().commit();\n+            assertEquals(c, em.find(ChildUncacheable.class, c.getId()));\n+            em.clear();\n+            assertEquals(c.getId(), em.find(ChildUncacheable.class, c.getId()).getId());\n+\n+        } finally {\n+            em.close();\n+        }\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "0ebdf818b6c3a0b97523f09048bc9bf1b62391e3",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/model/ChildUncacheable.java",
                "blob_url": "https://github.com/apache/openjpa/blob/73cd30152044f4fc56f25eb4b64529983dc9b0a1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/model/ChildUncacheable.java",
                "raw_url": "https://github.com/apache/openjpa/raw/73cd30152044f4fc56f25eb4b64529983dc9b0a1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/model/ChildUncacheable.java",
                "status": "added",
                "changes": 30,
                "additions": 30,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/model/ChildUncacheable.java?ref=73cd30152044f4fc56f25eb4b64529983dc9b0a1",
                "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa.model;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Cacheable;\n+import javax.persistence.Entity;\n+\n+@Entity\n+@Cacheable(value = false)\n+public class ChildUncacheable extends ParentUnspecifiedEntity {\n+    @Basic\n+    String child;\n+}",
                "deletions": 0
            },
            {
                "sha": "62be9aa98fc39ecd8a4af690a0f83b9f284cb699",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/model/ParentUnspecifiedEntity.java",
                "blob_url": "https://github.com/apache/openjpa/blob/73cd30152044f4fc56f25eb4b64529983dc9b0a1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/model/ParentUnspecifiedEntity.java",
                "raw_url": "https://github.com/apache/openjpa/raw/73cd30152044f4fc56f25eb4b64529983dc9b0a1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/model/ParentUnspecifiedEntity.java",
                "status": "added",
                "changes": 61,
                "additions": 61,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/model/ParentUnspecifiedEntity.java?ref=73cd30152044f4fc56f25eb4b64529983dc9b0a1",
                "patch": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa.model;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class ParentUnspecifiedEntity {\n+    @Id\n+    @Column(name = \"ID\")\n+    protected int id;\n+\n+    @Version\n+    @Column(name = \"VERSN\")\n+    protected int version;\n+\n+    protected String name;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+}",
                "deletions": 0
            }
        ],
        "patched_files": [
            "ChildUncacheable.java",
            "ParentUnspecifiedEntity.java",
            "DataCacheStoreManager.java"
        ],
        "unit_tests": [
            "TestDataCacheStoreManager.java",
            "TestCacheModeDisableSelectiveInheritance.java"
        ]
    },
    "openjpa_63c4899": {
        "repo": "openjpa",
        "message": "OPENJPA-602: Avoid NPE when table-per-class inheritance staregy with an abstract root. See test cases for further details.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666314 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/openjpa/commit/63c48992274fce84b2c08bf8bbe6df024736557c",
        "parent": "https://github.com/apache/openjpa/commit/ddc42e807837f340306dbbf2e9f04255f8437539",
        "bug_id": "openjpa_63c4899",
        "file": [
            {
                "sha": "7a3bec02fece2146ec986ca18ab01c0eb8880fe9",
                "filename": "openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java",
                "blob_url": "https://github.com/apache/openjpa/blob/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java",
                "raw_url": "https://github.com/apache/openjpa/raw/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java",
                "status": "modified",
                "changes": 13,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java?ref=63c48992274fce84b2c08bf8bbe6df024736557c",
                "patch": "@@ -133,9 +133,16 @@ public void map(boolean adapt) {\n             elem.setJoinDirection(ValueMapping.JOIN_EXPECTED_INVERSE);\n             elem.setUseClassCriteria(criteria);\n \n-            field.setOrderColumn(finfo.getOrderColumn(field,\n-                mapped.getForeignKey().getTable(), adapt));\n-            field.setOrderColumnIO(finfo.getColumnIO());\n+            ForeignKey fk = mapped.getForeignKey();\n+            /** Foreign key may be null if declared type of the mapped field is \n+             * abstract and under table-per-class inheritance strategy will have\n+             * no mapped table.  \n+             */\n+            if (fk != null) {\n+            \tfield.setOrderColumn(finfo.getOrderColumn(field,\n+            \t\t\tfk.getTable(), adapt));\n+            \tfield.setOrderColumnIO(finfo.getColumnIO());\n+            }\n             return;\n         }\n ",
                "deletions": 3
            },
            {
                "sha": "a5f5622fabfef091f6dd90dea3f16c775a622324",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/BaseEntity.java",
                "blob_url": "https://github.com/apache/openjpa/blob/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/BaseEntity.java",
                "raw_url": "https://github.com/apache/openjpa/raw/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/BaseEntity.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/BaseEntity.java?ref=63c48992274fce84b2c08bf8bbe6df024736557c",
                "patch": "@@ -0,0 +1,55 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n+\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.MappedSuperclass;\r\n+import javax.persistence.Version;\r\n+\r\n+/**\r\n+ * An abstract base entity class with auto-generated identty and version field.\r\n+ * Used for testing special case of table-per-class inheritance strategy when \r\n+ * the root of persistent inheritance hierarchy is abstract and itself \r\n+ * derives from an abstract MappedSuperClass (i.e. this class).\r\n+ * \r\n+ * For a more detailed description of the domain model to which this receiver\r\n+ * belongs\r\n+ * @see TestTablePerClassInheritanceWithAbstractRoot\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ * \r\n+ */\r\n+@MappedSuperclass\r\n+public abstract class BaseEntity {\r\n+\t@Id\r\n+\t@GeneratedValue\r\n+\tprivate long id;\r\n+\t\r\n+\t@Version\r\n+\tprivate long version;\r\n+\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic long getVersion() {\r\n+\t\treturn version;\r\n+\t}\r\n+}\r",
                "deletions": 0
            },
            {
                "sha": "1572ffb0eedd6154eaa07d00662b6d221b209f71",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/EnglishParagraph.java",
                "blob_url": "https://github.com/apache/openjpa/blob/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/EnglishParagraph.java",
                "raw_url": "https://github.com/apache/openjpa/raw/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/EnglishParagraph.java",
                "status": "added",
                "changes": 45,
                "additions": 45,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/EnglishParagraph.java?ref=63c48992274fce84b2c08bf8bbe6df024736557c",
                "patch": "@@ -0,0 +1,45 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * A persistent class derived from an abstract persistent class and \r\n+ * using table-per-concrete-class inheritance strategy.\r\n+ * \r\n+ * For a more detailed description of the domain model to which this receiver\r\n+ * belongs\r\n+ * @see TestTablePerClassInheritanceWithAbstractRoot\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class EnglishParagraph extends Translatable {\r\n+\tprivate String content;\r\n+\r\n+\tpublic String getContent() {\r\n+\t\treturn content;\r\n+\t}\r\n+\r\n+\tpublic void setContent(String content) {\r\n+\t\tthis.content = content;\r\n+\t}\r\n+}\r",
                "deletions": 0
            },
            {
                "sha": "16aba3f065fea0f0db965b6928854c89edaf366a",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/FrenchParagraph.java",
                "blob_url": "https://github.com/apache/openjpa/blob/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/FrenchParagraph.java",
                "raw_url": "https://github.com/apache/openjpa/raw/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/FrenchParagraph.java",
                "status": "added",
                "changes": 45,
                "additions": 45,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/FrenchParagraph.java?ref=63c48992274fce84b2c08bf8bbe6df024736557c",
                "patch": "@@ -0,0 +1,45 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * A persistent class derived from an abstract persistent class and \r\n+ * using table-per-concrete-class inheritance strategy.\r\n+ * \r\n+ * For a more detailed description of the domain model to which this receiver\r\n+ * belongs\r\n+ * @see TestTablePerClassInheritanceWithAbstractRoot\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class FrenchParagraph extends Translatable {\r\n+\tprivate String content;\r\n+\r\n+\tpublic String getContent() {\r\n+\t\treturn content;\r\n+\t}\r\n+\r\n+\tpublic void setContent(String content) {\r\n+\t\tthis.content = content;\r\n+\t}\r\n+}\r",
                "deletions": 0
            },
            {
                "sha": "8852f56e074fd0fa92985f3940fe38edd04d52af",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/GermanParagraph.java",
                "blob_url": "https://github.com/apache/openjpa/blob/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/GermanParagraph.java",
                "raw_url": "https://github.com/apache/openjpa/raw/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/GermanParagraph.java",
                "status": "added",
                "changes": 45,
                "additions": 45,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/GermanParagraph.java?ref=63c48992274fce84b2c08bf8bbe6df024736557c",
                "patch": "@@ -0,0 +1,45 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * A persistent class derived from an abstract persistent class and \r\n+ * using table-per-concrete-class inheritance strategy.\r\n+ * \r\n+ * For a more detailed description of the domain model to which this receiver\r\n+ * belongs\r\n+ * @see TestTablePerClassInheritanceWithAbstractRoot\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class GermanParagraph extends Translatable {\r\n+\tprivate String content;\r\n+\r\n+\tpublic String getContent() {\r\n+\t\treturn content;\r\n+\t}\r\n+\r\n+\tpublic void setContent(String content) {\r\n+\t\tthis.content = content;\r\n+\t}\r\n+}\r",
                "deletions": 0
            },
            {
                "sha": "f9e25c4e8df19468eb5f1642e8d6fa20d764a02f",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java",
                "blob_url": "https://github.com/apache/openjpa/blob/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java",
                "raw_url": "https://github.com/apache/openjpa/raw/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java",
                "status": "added",
                "changes": 155,
                "additions": 155,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java?ref=63c48992274fce84b2c08bf8bbe6df024736557c",
                "patch": "@@ -0,0 +1,155 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Tests a domain model with following characteristics:\r\n+ * a) A typical bidirectional ManyToOne/OneToMany relation \r\n+ *    EntityA references a single instance of EntityB\r\n+ *    EntityB references a collection of EntityA\r\n+ * b) EntityB itself is abstract \r\n+ * c) Many concrete subclasses of EntityB exist\r\n+ * d) EntityB uses TABLE_PER_CLASS inheritance strategy, hence no mapping table \r\n+ *    exists for EntityB itself.\r\n+ * e) Relation field in EntityA is declared as abstract type EntityB (for which\r\n+ * f) all the domain classes i.e. EntityA, EntityB and all its subclasses is\r\n+ *    derived from an abstract MappedSuperClass which holds primary key and\r\n+ *    version fields.\r\n+ *    \r\n+ *  The test addresses a reported error [1] in mapping the above domain model.\r\n+ *  The test verifies basic persist, query and delete operations on the domain\r\n+ *  model.\r\n+ *  \r\n+ *  [1] <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-602\"> OPENJPA-602</A>}\r\n+ *        \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+public class TestTablePerClassInheritanceWithAbstractRoot extends\r\n+\t\tSingleEMFTestCase {\r\n+\tClass[] UNJOINED_SUBCLASSES = {\r\n+\t\t\tEnglishParagraph.class, \r\n+\t\t\tFrenchParagraph.class, \r\n+\t\t\tGermanParagraph.class};\r\n+\t\r\n+    public void setUp() {\r\n+        setUp(CLEAR_TABLES, \r\n+        \t\t\"openjpa.Log\", \"SQL=TRACE\", \r\n+        \t\tTranslation.class, BaseEntity.class,\r\n+        \t\tEnglishParagraph.class, FrenchParagraph.class, \r\n+        \t\tGermanParagraph.class, Translatable.class);\r\n+    }\r\n+    \r\n+\tpublic void testConsistency() {\r\n+\t\tOpenJPAEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\t/**\r\n+\t\t * Aggregate query operations can not be performed on unjoined \r\n+\t\t * subclasses. Hence all concrete subclasses of abstract base\r\n+\t\t * class is counted separately to count all Translatable instances.\r\n+\t\t */\r\n+\t\tint nTranslatableBefore = count(UNJOINED_SUBCLASSES);\r\n+\t\tint nTranslationBefore = count(Translation.class);\r\n+\t\t\r\n+\t\tEnglishParagraph english = new EnglishParagraph();\r\n+\t\tFrenchParagraph french   = new FrenchParagraph();\r\n+\t\tGermanParagraph german   = new GermanParagraph();\r\n+\t\t\r\n+\t\tTranslation translation1 = new Translation(); \r\n+\t\tTranslation translation2 = new Translation(); \r\n+\t\tTranslation translation3 = new Translation(); \r\n+\t\tTranslation translation4 = new Translation(); \r\n+\t\t\r\n+\t\tenglish.setContent(\"Hello\");\r\n+\t\tfrench.setContent(\"Bon jour\");\r\n+\t\tgerman.setContent(\"Guten Tag\");\r\n+\r\n+\t\t\r\n+\t\ttranslation1.setTranslatable(english);\r\n+\t\ttranslation2.setTranslatable(english);\r\n+\t\ttranslation3.setTranslatable(french);\r\n+\t\ttranslation4.setTranslatable(german);\r\n+\t\t\r\n+\t\tenglish.addTranslation(translation1);\r\n+\t\tenglish.addTranslation(translation2);\r\n+\t\tfrench.addTranslation(translation3);\r\n+\t\tgerman.addTranslation(translation4);\r\n+\t\t\r\n+\t\tem.persist(translation1);\r\n+\t\tem.persist(translation2);\r\n+\t\tem.persist(translation3);\r\n+\t\tem.persist(translation4);\r\n+\t\tem.getTransaction().commit();\r\n+\t\t\r\n+\t\tem.clear();\r\n+\r\n+\t\tint nTranslatableAfter = count(UNJOINED_SUBCLASSES);\r\n+\t\tint nTranslationAfter  = count(Translation.class);\r\n+\t\t\r\n+\t\tassertEquals(nTranslatableBefore+3, nTranslatableAfter);\r\n+\t\tassertEquals(nTranslationBefore+4, nTranslationAfter);\r\n+\t\t\r\n+\t\t/**\r\n+\t\t * Verify that if A refers to B then A must be a member of the set \r\n+\t\t * referred by B\r\n+\t\t */\r\n+\t\tem.getTransaction().begin();\r\n+\t\tList<Translation> result = em.createQuery(\"SELECT p FROM Translation p\")\r\n+\t\t\t.getResultList();\r\n+\t\tassertTrue(!result.isEmpty());\r\n+\t\tfor (Translation translation : result) {\r\n+\t\t\tassertTrue(translation.getTranslatable()\r\n+\t\t\t\t\t.getTranslations().contains(translation));\r\n+\t\t}\r\n+\t\tem.getTransaction().rollback();\r\n+\t}\r\n+\t\r\n+\t\r\n+\tvoid linkConsistently(Translation translation, Translatable translatable) {\r\n+\t\ttranslatable.addTranslation(translation);\r\n+\t\ttranslation.setTranslatable(translatable);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Count the number of instances in the given class by aggregate JPQL query.\r\n+\t */\r\n+\tpublic int count(Class c) {\r\n+\t\tOpenJPAEntityManager em = emf.createEntityManager();\r\n+\t\treturn ((Number) em.createQuery(\"SELECT COUNT(p) FROM \" + \r\n+\t\t\t\tc.getSimpleName() + \" p\").getSingleResult()).intValue();\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Count total number of instances of all the given classes by separate JPQL\r\n+\t * aggregate query. Useful when a base class has unjoined subclasses.\r\n+\t */\r\n+\tpublic int count(Class... classes) {\r\n+\t\tint total = 0;\r\n+\t\tfor (Class c:classes) {\r\n+\t\t\ttotal += count(c);\r\n+\t\t}\r\n+\t\treturn total;\r\n+\t}\r\n+\t\r\n+}\r",
                "deletions": 0
            },
            {
                "sha": "f995bfaedbc380301d58b946c703cf47d75c67ae",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translatable.java",
                "blob_url": "https://github.com/apache/openjpa/blob/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translatable.java",
                "raw_url": "https://github.com/apache/openjpa/raw/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translatable.java",
                "status": "added",
                "changes": 57,
                "additions": 57,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translatable.java?ref=63c48992274fce84b2c08bf8bbe6df024736557c",
                "patch": "@@ -0,0 +1,57 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.OneToMany;\r\n+\r\n+/**\r\n+ * An abstract persistent class used as root of inheritance hierarchy and \r\n+ * using table-per-concrete-class inheritance strategy.\r\n+ * \r\n+ * For a more detailed description of the domain model to which this receiver\r\n+ * belongs\r\n+ * @see TestTablePerClassInheritanceWithAbstractRoot\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+@Inheritance(strategy=InheritanceType.TABLE_PER_CLASS)\r\n+public abstract class Translatable extends BaseEntity {\r\n+\t@OneToMany(mappedBy=\"translatable\", cascade=CascadeType.PERSIST)\r\n+\tprivate Set<Translation> translations;\r\n+\t\r\n+\tpublic void addTranslation(Translation t) {\r\n+\t\tif (translations == null)\r\n+\t\t\ttranslations = new HashSet<Translation>();\r\n+\t\ttranslations.add(t);\r\n+\t}\r\n+\t\r\n+\tpublic Set<Translation> getTranslations() {\r\n+\t\treturn Collections.unmodifiableSet(translations);\r\n+\t}\r\n+}\r",
                "deletions": 0
            },
            {
                "sha": "1b93a0390c2e8a357d4dde4b371463e54c6e6659",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translation.java",
                "blob_url": "https://github.com/apache/openjpa/blob/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translation.java",
                "raw_url": "https://github.com/apache/openjpa/raw/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translation.java",
                "status": "added",
                "changes": 51,
                "additions": 51,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translation.java?ref=63c48992274fce84b2c08bf8bbe6df024736557c",
                "patch": "@@ -0,0 +1,51 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name=\"TRANSLATIONS\")\r\n+/**\r\n+ * An persistent class that refers to a polymorphic uni-cardinality relation. \r\n+ * The polymorphic relation itself derives from an abstract class that uses\r\n+ * table-per-class inheritance strategy.\r\n+ *   \r\n+ * For a more detailed description of the domain model to which this receiver\r\n+ * belongs\r\n+ * @see TestTablePerClassInheritanceWithAbstractRoot\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+public class Translation extends BaseEntity {\r\n+\t@ManyToOne(cascade=CascadeType.PERSIST)\r\n+\tprivate Translatable translatable;\r\n+\r\n+\tpublic Translatable getTranslatable() {\r\n+\t\treturn translatable;\r\n+\t}\r\n+\r\n+\tpublic void setTranslatable(Translatable translatable) {\r\n+\t\tthis.translatable = translatable;\r\n+\t}\r\n+}\r",
                "deletions": 0
            }
        ],
        "patched_files": [
            "EnglishParagraph.java",
            "Translatable.java",
            "BaseEntity.java",
            "Translation.java",
            "RelationToManyInverseKeyFieldStrategy.java",
            "GermanParagraph.java",
            "FrenchParagraph.java"
        ],
        "unit_tests": [
            "TestTablePerClassInheritanceWithAbstractRoot.java"
        ]
    },
    "openjpa_8be86a6": {
        "repo": "openjpa",
        "message": "OPENJPA-2646: Sporadic NullPointerException and ClassCastException caused by query cache misses in multithreaded environments.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1831596 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/openjpa/commit/8be86a6903dcf5d6486bf5578486fdd1fd28fc4a",
        "parent": "https://github.com/apache/openjpa/commit/4d577c0fd27d1fb0e37fdb44a7f355c010768a20",
        "bug_id": "openjpa_8be86a6",
        "file": [
            {
                "sha": "fe1ec2a738f9ca336e79e9570e085d1e3b78eeb3",
                "filename": "openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java",
                "blob_url": "https://github.com/apache/openjpa/blob/8be86a6903dcf5d6486bf5578486fdd1fd28fc4a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java",
                "raw_url": "https://github.com/apache/openjpa/raw/8be86a6903dcf5d6486bf5578486fdd1fd28fc4a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java",
                "status": "modified",
                "changes": 10,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java?ref=8be86a6903dcf5d6486bf5578486fdd1fd28fc4a",
                "patch": "@@ -362,7 +362,15 @@ public void setEnableStatistics(boolean enable){\n     public boolean getEnableStatistics(){\n         return _statsEnabled;\n     }\n-        \n+\n+    public void setMaxCacheSize(int size) {\n+        ((CacheMap)_delegate).setCacheSize(size);\n+    }\n+\n+    public int getCacheSize() {\n+        return _delegate.size();\n+    }\n+\n \t//-------------------------------------------------------\n \t// Configurable contract\n \t//-------------------------------------------------------",
                "deletions": 1
            },
            {
                "sha": "8385914e72d5de6dbc92751c096cd4745b7f0a48",
                "filename": "openjpa-kernel/src/main/java/org/apache/openjpa/util/CacheMap.java",
                "blob_url": "https://github.com/apache/openjpa/blob/8be86a6903dcf5d6486bf5578486fdd1fd28fc4a/openjpa-kernel/src/main/java/org/apache/openjpa/util/CacheMap.java",
                "raw_url": "https://github.com/apache/openjpa/raw/8be86a6903dcf5d6486bf5578486fdd1fd28fc4a/openjpa-kernel/src/main/java/org/apache/openjpa/util/CacheMap.java",
                "status": "modified",
                "changes": 38,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/CacheMap.java?ref=8be86a6903dcf5d6486bf5578486fdd1fd28fc4a",
                "patch": "@@ -35,7 +35,8 @@\n import org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap;\n import org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap;\n \n-import java.util.concurrent.locks.ReentrantLock;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n \n /**\n  * Fixed-size map that has ability to pin/unpin entries and move overflow to\n@@ -65,8 +66,9 @@\n     // number of pinned values (not including keys not mapped to values)\n     private int _pinnedSize = 0;\n \n-    private final ReentrantLock _writeLock = new ReentrantLock();\n-    private final ReentrantLock _readLock;\n+    private final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock(true);\n+    private final Lock _readLock = rwl.readLock();\n+    private final Lock _writeLock = rwl.writeLock();\n \n     /**\n      * Create a non-LRU (and therefore highly concurrent) cache map with a\n@@ -128,14 +130,12 @@ public void overflowRemoved(Object key, Object value) {\n                     cacheMapOverflowRemoved(key, value);\n                 }\n             };\n-            _readLock = null;\n         } else {\n             cacheMap = new LRUMap(size, load) {\n                 public void overflowRemoved(Object key, Object value) {\n                     cacheMapOverflowRemoved(key, value);\n                 }\n             };\n-            _readLock = _writeLock;\n         }\n         if (max < 0)\n             max = Integer.MAX_VALUE;\n@@ -186,16 +186,14 @@ protected Object remove(Map map, Object key) {\n      * Acquire read lock.\n      */\n     public void readLock() {\n-        if (_readLock != null)\n-            _readLock.lock();\n+        _readLock.lock();\n     }\n \n     /**\n      * Release read lock.\n      */\n     public void readUnlock() {\n-        if (_readLock != null)\n-            _readLock.unlock();\n+        _readLock.unlock();\n     }\n \n     /**\n@@ -216,7 +214,7 @@ public void writeUnlock() {\n      * Whether this cache map uses LRU eviction.\n      */\n     public boolean isLRU() {\n-        return _readLock != null;\n+        return cacheMap instanceof LRUMap;\n     }\n \n     /**\n@@ -348,24 +346,26 @@ protected void entryAdded(Object key, Object value) {\n     }\n \n     public Object get(Object key) {\n+        boolean putcache = false;\n+        Object val = null;\n         readLock();\n         try {\n-            // Check the main map first\n-            Object  val = cacheMap.get(key);\n+            val = softMap.get(key);\n             if (val == null) {\n-                // if we find the key in the soft map, move it back into\n-                // the primary map\n-                val = softMap.get(key);\n-                if (val != null){\n-                    put(key, val);\n-                }else{\n+                val = cacheMap.get(key);\n+                if (val == null) {\n                     val = pinnedMap.get(key);\n+                } else {\n+                    putcache = true;\n                 }\n             }\n-           \n             return val;\n         } finally {\n             readUnlock();\n+            //cannot obtain a write lock while holding a read lock\n+            //doing it this way prevents a deadlock\n+            if (putcache)\n+                put(key, val);\n         }\n     }\n ",
                "deletions": 19
            },
            {
                "sha": "64f73717b0bad82e1f1d8d2b4ef1532597a0a11f",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestMultithreadedReparameterization.java",
                "blob_url": "https://github.com/apache/openjpa/blob/8be86a6903dcf5d6486bf5578486fdd1fd28fc4a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestMultithreadedReparameterization.java",
                "raw_url": "https://github.com/apache/openjpa/raw/8be86a6903dcf5d6486bf5578486fdd1fd28fc4a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestMultithreadedReparameterization.java",
                "status": "modified",
                "changes": 141,
                "additions": 112,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestMultithreadedReparameterization.java?ref=8be86a6903dcf5d6486bf5578486fdd1fd28fc4a",
                "patch": "@@ -19,10 +19,13 @@\n \n package org.apache.openjpa.persistence.jdbc.sqlcache;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Properties;\n \n import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n \n import junit.framework.TestCase;\n@@ -41,19 +44,19 @@\n     private static String RESOURCE = \"META-INF/persistence.xml\"; \n     private static String UNIT_NAME = \"PreparedQuery\";\n     protected static OpenJPAEntityManagerFactory emf;\n-    \n+\n     public void setUp() throws Exception {\n         super.setUp();\n         if (emf == null) {\n             Properties config = new Properties();\n             config.put(\"openjpa.jdbc.SynchronizeMappings\", \"buildSchema(ForeignKeys=true,SchemaAction='drop,add')\");\n             config.put(\"openjpa.Log\", \"SQL=WARN\");\n-            config.put(\"openjpa.jdbc.QuerySQLCache\", \"true(EnableStatistics=true)\");\n+            config.put(\"openjpa.jdbc.QuerySQLCache\", \"true(EnableStatistics=true, MaxCacheSize=2)\");\n             config.put(\"openjpa.ConnectionFactoryProperties\", \"PrintParameters=true\");\n             emf = OpenJPAPersistence.createEntityManagerFactory(UNIT_NAME, RESOURCE, config);\n         }\n     }\n-    \n+\n     public void testReparameterizationUnderHeavyLoad() throws Exception {\n         long baseId = System.currentTimeMillis();\n         EntityManager em = emf.createEntityManager();\n@@ -68,14 +71,16 @@ public void testReparameterizationUnderHeavyLoad() throws Exception {\n             em.persist(p);\n         }\n         em.getTransaction().commit();\n-    \n+\n         String jpql = \"select p from Person p \" \n                     + \"where p.id=:id and p.firstName=:first and p.lastName=:last and p.age=:age\";\n         int nRepeats = 20;\n         Thread[] threads = new Thread[nThreads];\n+        final List<Throwable> exceptions = Collections.synchronizedList(new ArrayList<Throwable>());\n+\n         for (int i = 0; i < nThreads; i++) {\n             Object[] args = {\"id\", baseId+i, \"first\", \"First\"+i, \"last\", \"Last\"+i, \"age\", (short)(20+i)};\n-            QueryThread thread = new QueryThread(emf.createEntityManager(), jpql, args, nRepeats);\n+            QueryThread thread = new QueryThread(emf.createEntityManager(), jpql, args, nRepeats, exceptions);\n             threads[i] = new Thread(thread);\n         }\n         for (Thread thread : threads) {\n@@ -84,12 +89,90 @@ public void testReparameterizationUnderHeavyLoad() throws Exception {\n         for (Thread thread : threads) {\n             thread.join();\n         }\n-        QueryStatistics<String> stats = emf.getConfiguration().getQuerySQLCacheInstance().getStatistics();\n-        assertEquals(nThreads*nRepeats,stats.getExecutionCount(), stats.getExecutionCount(jpql));\n-        assertEquals(nThreads*nRepeats-1,stats.getExecutionCount(), stats.getHitCount(jpql));\n-        \n+        try {\n+            QueryStatistics<String> stats = emf.getConfiguration().getQuerySQLCacheInstance().getStatistics();\n+            for(Throwable t : exceptions) {\n+                fail((t.getCause() != null ? t.getCause().toString() : t.toString()));\n+            }\n+            assertEquals(nThreads*nRepeats,stats.getExecutionCount(), stats.getExecutionCount(jpql));\n+            assertEquals(nThreads*nRepeats-1,stats.getExecutionCount(), stats.getHitCount(jpql));\n+        } finally {\n+            //clear statistics for other tests\n+            emf.getConfiguration().getQuerySQLCacheInstance().clear();\n+        }\n+    }\n+\n+    /**\n+     *  This is a test to verify that the PreparedQueryCache correctly swaps queries between\n+     *  the hard and the soft cache maps. It is important for this test that the max cache size\n+     *  is set to a number much smaller than the default (1000) to force swapping between hard\n+     *  and soft maps. During this swapping interval, it is possible that another thread will\n+     *  attempt to read from the maps and cause either NPE or CCE. \n+     *  \n+     * @see OPENJPA-2646\n+     * @throws Exception\n+     */\n+    public void testCacheSwappingUnderHeavyLoad() throws Exception {\n+        final int nRuns = 10;\n+        final int nThreads = 20;\n+        //This value needs to be more than the max cache size to reliably cause cache\n+        //overflow to start swapping between hard -> soft cache\n+        // (\"openjpa.jdbc.QuerySQLCache\", \"true(MaxCacheSize=2\")\n+        final int nQueries = 10;\n+\n+        final List<Throwable> exceptions = Collections.synchronizedList(new ArrayList<Throwable>());\n+\n+        for (int y = 0; y < nRuns; y++) {\n+            Thread[] threads = new Thread[nThreads];\n+            for (int i = 0; i < nThreads; i++) {\n+                threads[i] = new Thread(new Runnable() {\n+                    @Override public void run() {\n+                        try {\n+                            EntityManager em = emf.createEntityManager();\n+                            // Since the cache (CacheMap) is set to a size of '2' all threads will \n+                            // fill up the cache and constantly cause query strings to move \n+                            // to/from the main cache and soft cache, eventually causing a \n+                            // \"cache miss\" by a thread.\n+                            String qStr = \"select p from Person p where p.firstName=:first and p.id = \";\n+                            for (int j = 0; j < nQueries; j++) {\n+                                Query q = em.createQuery(qStr + j);\n+                                q.setParameter(\"first\", \"test\");\n+                                q.getResultList();\n+                            }\n+                            em.close();\n+                        } catch (Throwable t) {\n+                            System.err.println(\"\\nThread (\" + Thread.currentThread().getName()\n+                                    + \"): Caught the following exception: \" + t\n+                                    + \"\\n  With cause: \" + t.getCause());\n+                            //catch the AssertionError so that we can fail the main Thread\n+                            exceptions.add(t);\n+                        }\n+                    }\n+                });\n+                threads[i].start();\n+            }\n+\n+            for (Thread thread : threads) {\n+                synchronized (thread) {\n+                    try {\n+                        thread.join();\n+                    } catch (InterruptedException e) {\n+                        e.printStackTrace();\n+                    }\n+                }\n+            }\n+\n+            try {\n+                for(Throwable t : exceptions) {\n+                    fail((t.getCause() != null ? t.getCause().toString() : t.toString()));\n+                }\n+            } finally {\n+                //clear statistics for other tests\n+                emf.getConfiguration().getQuerySQLCacheInstance().clear();\n+            }\n+        }\n     }\n-    \n+\n     /**\n      * Each thread executes same query with same parameters repeatedly.\n      * \n@@ -101,34 +184,34 @@ public void testReparameterizationUnderHeavyLoad() throws Exception {\n         public final String jpql;\n         public final Object[] args;\n         public final int nTimes;\n-        public QueryThread(EntityManager em, String jpql, Object[] args, int r) {\n+        public final List<Throwable> exceptions;\n+        public QueryThread(EntityManager em, String jpql, Object[] args, int r, List<Throwable> exceptions) {\n             this.em = em;\n             this.jpql = jpql;\n             this.args = args;\n             this.nTimes = r;\n+            this.exceptions = exceptions;\n         }\n-        \n+\n         public void run()  {\n             try {\n-            for (int i = 0; i < nTimes; i++) {\n-                TypedQuery<Person> q = em.createQuery(jpql, Person.class);\n-                for (int j = 0; j < args.length; j += 2) {\n-                    q.setParameter(args[j].toString(), args[j+1]);\n+                for (int i = 0; i < nTimes; i++) {\n+                    TypedQuery<Person> q = em.createQuery(jpql, Person.class);\n+                    for (int j = 0; j < args.length; j += 2) {\n+                        q.setParameter(args[j].toString(), args[j+1]);\n+                    }\n+                    List<Person> result = q.getResultList();\n+                    assertEquals(Thread.currentThread() + \" failed\", 1, result.size());\n+                    Person p = result.get(0);\n+                    assertEquals(args[1], p.getId());\n+                    assertEquals(args[3], p.getFirstName());\n+                    assertEquals(args[5], p.getLastName());\n+                    assertEquals(args[7], p.getAge());\n                 }\n-                List<Person> result = q.getResultList();\n-                assertEquals(Thread.currentThread() + \" failed\", 1, result.size());\n-                Person p = result.get(0);\n-                assertEquals(args[1], p.getId());\n-                assertEquals(args[3], p.getFirstName());\n-                assertEquals(args[5], p.getLastName());\n-                assertEquals(args[7], p.getAge());\n-                \n-            }\n-            } catch (Exception ex) {\n-                ex.printStackTrace();\n-                fail();\n+            } catch (Throwable t) {\n+                //catch the AssertionError so that we can fail the main Thread\n+                exceptions.add(t);\n             }\n         }\n-        \n     }\n }",
                "deletions": 29
            },
            {
                "sha": "8eaab807f68797fd7e3dfb151d00a3b5ff04f398",
                "filename": "openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java",
                "blob_url": "https://github.com/apache/openjpa/blob/8be86a6903dcf5d6486bf5578486fdd1fd28fc4a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java",
                "raw_url": "https://github.com/apache/openjpa/raw/8be86a6903dcf5d6486bf5578486fdd1fd28fc4a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java",
                "status": "modified",
                "changes": 9,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=8be86a6903dcf5d6486bf5578486fdd1fd28fc4a",
                "patch": "@@ -521,7 +521,7 @@ public boolean equals(Object other) {\n      * cache. \n      */\n     private boolean preExecute(Map params) {\n-    \t\n+\n         PreparedQueryCache cache = _em.getPreparedQueryCache();\n         if (cache == null) {\n             return false;\n@@ -533,20 +533,21 @@ private boolean preExecute(Map params) {\n             }\n             return false;\n         }\n-        \n+\n         // Determine if the query has NULL parameters.  If so, then do not use a PreparedQuery from the cache\n         for (Object val : params.values()) {\n             if (val == null) {\n                 ignorePreparedQuery();\n                 return false;\n             }\n         }\n-        \n+\n         Boolean registered = cache.register(_id, _query, fetch);\n         boolean alreadyCached = (registered == null);\n         String lang = _query.getLanguage();\n         QueryStatistics<String> stats = cache.getStatistics();\n         if (alreadyCached && LANG_PREPARED_SQL.equals(lang)) {\n+            //This value is expected to be non-null as it was just registered\n             PreparedQuery pq = _em.getPreparedQuery(_id);\n             if (pq.isInitialized()) {\n                 try {\n@@ -567,7 +568,7 @@ private boolean preExecute(Map params) {\n         }\n         return registered == Boolean.TRUE;\n     }\n-    \n+\n     /**\n      * Initialize the registered Prepared Query from the given opaque object.\n      * ",
                "deletions": 4
            }
        ],
        "patched_files": [
            "CacheMap.java",
            "QueryImpl.java",
            "PreparedQueryCacheImpl.java"
        ],
        "unit_tests": [
            "TestMultithreadedReparameterization.java"
        ]
    },
    "openjpa_ec7f6f5": {
        "repo": "openjpa",
        "message": "Modified same named entities to use unique table names.  Also corrected an NPE in test cleanup which occurred when embeddable metadata was present in the metadata repository.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@828786 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/openjpa/commit/ec7f6f5b01f502069454b842c98cb7e9ef868789",
        "parent": "https://github.com/apache/openjpa/commit/105d46c6eacbaad594e991b012f046da5d7d38fd",
        "bug_id": "openjpa_ec7f6f5",
        "file": [
            {
                "sha": "a15c8eaca9659ab6e048d9e2744ab2da3936e960",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java",
                "blob_url": "https://github.com/apache/openjpa/blob/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java",
                "raw_url": "https://github.com/apache/openjpa/raw/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java",
                "status": "modified",
                "changes": 10,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java?ref=ec7f6f5b01f502069454b842c98cb7e9ef868789",
                "patch": "@@ -81,10 +81,12 @@ public void tearDown() throws Exception {\n             for (ClassMapping mapping : ((ClassMapping[]) emf\n                 .getConfiguration().getMetaDataRepositoryInstance()\n                 .getMetaDatas())) {\n-                Query q =\n-                    em.createNativeQuery(\"DROP TABLE \"\n-                        + mapping.getTable().getName());\n-                q.executeUpdate();\n+                if (mapping.getTable() != null) {\n+                    Query q =\n+                        em.createNativeQuery(\"DROP TABLE \"\n+                            + mapping.getTable().getName());\n+                    q.executeUpdate();\n+                }\n             }\n             em.getTransaction().commit();\n             em.close();",
                "deletions": 4
            },
            {
                "sha": "1a37a9002a132787d4d0e14a3e4ef50b3d6dc2b2",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java",
                "blob_url": "https://github.com/apache/openjpa/blob/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java",
                "raw_url": "https://github.com/apache/openjpa/raw/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java?ref=ec7f6f5b01f502069454b842c98cb7e9ef868789",
                "patch": "@@ -316,7 +316,7 @@ public void verifyRefresh(boolean useDataCache, LockModeType lock,\n         // Modify the record in the database in a separate transaction using\n         // native SQL so that the in-memory instance is not altered \n         em.getTransaction().begin();\n-        String sql = \"UPDATE PObject SET NAME='\" + MARKER_DATABASE\n+        String sql = \"UPDATE L2_PObject SET NAME='\" + MARKER_DATABASE\n         + \"' WHERE id=\" + oid;\n         em.createNativeQuery(sql).executeUpdate();\n         em.getTransaction().commit();\n@@ -483,7 +483,7 @@ public void verifyDeleteDetectionOnRefresh(boolean useDataCache,\n         // delete the record in the database in a separate transaction using\n         // native SQL so that the in-memory instance is not altered \n         em.getTransaction().begin();\n-        String sql = \"DELETE FROM PObject WHERE id=\"+oid;\n+        String sql = \"DELETE FROM L2_PObject WHERE id=\"+oid;\n         em.createNativeQuery(sql).executeUpdate();\n         em.getTransaction().commit();\n         ",
                "deletions": 2
            },
            {
                "sha": "23e6142e06c41102f0868542d1491e97418390cf",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachA.java",
                "blob_url": "https://github.com/apache/openjpa/blob/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachA.java",
                "raw_url": "https://github.com/apache/openjpa/raw/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachA.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachA.java?ref=ec7f6f5b01f502069454b842c98cb7e9ef868789",
                "patch": "@@ -23,8 +23,10 @@\n import java.io.ObjectOutputStream;\n import java.io.Serializable;\n import javax.persistence.Entity;\n+import javax.persistence.Table;\n \n @Entity\n+@Table(name=\"L2_AttachA\")\n public class AttachA\n     implements Serializable {\n ",
                "deletions": 0
            },
            {
                "sha": "0094463bd6820f9e1f04ac5039b1b4dd56bfb961",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachE.java",
                "blob_url": "https://github.com/apache/openjpa/blob/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachE.java",
                "raw_url": "https://github.com/apache/openjpa/raw/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachE.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachE.java?ref=ec7f6f5b01f502069454b842c98cb7e9ef868789",
                "patch": "@@ -21,8 +21,10 @@\n import java.io.Serializable;\n import java.util.Date;\n import javax.persistence.Entity;\n+import javax.persistence.Table;\n \n @Entity\n+@Table(name=\"L2_AttachE\")\n public class AttachE\n     implements Serializable {\n ",
                "deletions": 0
            },
            {
                "sha": "1d579e18331cc7c4623e65a11618b4a0bf9314f6",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/PObject.java",
                "blob_url": "https://github.com/apache/openjpa/blob/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/PObject.java",
                "raw_url": "https://github.com/apache/openjpa/raw/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/PObject.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/PObject.java?ref=ec7f6f5b01f502069454b842c98cb7e9ef868789",
                "patch": "@@ -21,6 +21,7 @@\n import javax.persistence.Entity;\n import javax.persistence.GeneratedValue;\n import javax.persistence.Id;\n+import javax.persistence.Table;\n import javax.persistence.Version;\n \n /**\n@@ -31,6 +32,7 @@\n  *\n  */\n @Entity\n+@Table(name=\"L2_PObject\")\n public class PObject {\n \t@Id\n \t@GeneratedValue",
                "deletions": 0
            },
            {
                "sha": "166f352281a73694d7293c8a31bde3a43c46c0fc",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java",
                "blob_url": "https://github.com/apache/openjpa/blob/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java",
                "raw_url": "https://github.com/apache/openjpa/raw/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java?ref=ec7f6f5b01f502069454b842c98cb7e9ef868789",
                "patch": "@@ -21,6 +21,7 @@\n import javax.persistence.Entity;\n import javax.persistence.GeneratedValue;\n import javax.persistence.Id;\n+import javax.persistence.Table;\n import javax.persistence.Version;\n \n /**\n@@ -31,6 +32,7 @@\n  *\n  */\n @Entity\n+@Table(name=\"EX_POBJECT\")\n public class PObject {\n \t@Id\n \tprivate long id;",
                "deletions": 0
            },
            {
                "sha": "04444a652461dabe8ba0e131bfcd7576f135061e",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachA.java",
                "blob_url": "https://github.com/apache/openjpa/blob/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachA.java",
                "raw_url": "https://github.com/apache/openjpa/raw/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachA.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachA.java?ref=ec7f6f5b01f502069454b842c98cb7e9ef868789",
                "patch": "@@ -25,11 +25,12 @@\n \n import javax.persistence.Entity;\n import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n import java.lang.annotation.Annotation;\n \n @Entity\n-\n-\n+@Table(name=\"JDBC_AttachA\")\n public class AttachA\n     implements Serializable, PreDetachCallback,\n     PostDetachCallback, PreAttachCallback, PostAttachCallback {",
                "deletions": 2
            },
            {
                "sha": "f68aabcdb04f41d8a2ea4ba610a1c356ea43547f",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachE.java",
                "blob_url": "https://github.com/apache/openjpa/blob/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachE.java",
                "raw_url": "https://github.com/apache/openjpa/raw/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachE.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachE.java?ref=ec7f6f5b01f502069454b842c98cb7e9ef868789",
                "patch": "@@ -25,9 +25,12 @@\n \n import javax.persistence.Entity;\n import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n import java.lang.annotation.Annotation;\n \n @Entity\n+@Table(name=\"JDBC_AttachE\")\n public class AttachE\n     implements Serializable {\n ",
                "deletions": 0
            },
            {
                "sha": "c728b036d62d5c9bfbc7a64c9e0070e5f2626699",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/oracle/PObject.java",
                "blob_url": "https://github.com/apache/openjpa/blob/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/oracle/PObject.java",
                "raw_url": "https://github.com/apache/openjpa/raw/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/oracle/PObject.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/oracle/PObject.java?ref=ec7f6f5b01f502069454b842c98cb7e9ef868789",
                "patch": "@@ -22,6 +22,7 @@\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n+import javax.persistence.Table;\n \n /**\n  * A persistent entity to verify IDENTITY strategy for primary key value\n@@ -31,6 +32,7 @@\n  *\n  */\n @Entity\n+@Table(name=\"ORCL_POBJECT\")\n public class PObject {\n \t@Id\n \t@GeneratedValue(strategy=GenerationType.IDENTITY)",
                "deletions": 0
            },
            {
                "sha": "7a213d4f9044dee37d55ed652869172d4263e0ac",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachA.java",
                "blob_url": "https://github.com/apache/openjpa/blob/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachA.java",
                "raw_url": "https://github.com/apache/openjpa/raw/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachA.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachA.java?ref=ec7f6f5b01f502069454b842c98cb7e9ef868789",
                "patch": "@@ -28,6 +28,7 @@\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n+import javax.persistence.Table;\n import javax.persistence.Version;\n \n import org.apache.openjpa.persistence.FetchAttribute;\n@@ -42,6 +43,7 @@\n @FetchAttribute(name = \"attachEArray\", recursionDepth = 0)\n     })\n     })\n+@Table(name=\"K_AttachA\")\n public class AttachA implements Serializable {\n \n     @Id",
                "deletions": 0
            },
            {
                "sha": "279163ab575cc8b7a8363552af66ef4a5af7f5b2",
                "filename": "openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachE.java",
                "blob_url": "https://github.com/apache/openjpa/blob/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachE.java",
                "raw_url": "https://github.com/apache/openjpa/raw/ec7f6f5b01f502069454b842c98cb7e9ef868789/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachE.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachE.java?ref=ec7f6f5b01f502069454b842c98cb7e9ef868789",
                "patch": "@@ -31,6 +31,7 @@\n import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n import javax.persistence.Temporal;\n import javax.persistence.TemporalType;\n \n@@ -46,6 +47,7 @@\n @FetchAttribute(name = \"f\")\n     })\n     })\n+@Table(name=\"K_AttachE\")\n public class AttachE implements Serializable {\n \n     @Id",
                "deletions": 0
            }
        ],
        "patched_files": [
            "AttachE.java",
            "AttachA.java",
            "PObject.java"
        ],
        "unit_tests": [
            "TestCacheExclusions.java",
            "TestDataCacheBehavesIdentical.java"
        ]
    }
}