{
    "servicemix-utils_81c96e1": {
        "repo": "servicemix-utils",
        "message": "SM-2148: NPE in TimeoutMemoryStore under heavy load\n\ngit-svn-id: https://svn.apache.org/repos/asf/servicemix/utils/trunk@1302379 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/servicemix-utils/commit/81c96e16a4f2b90240e18962569f9c8659e6fd31",
        "parent": "https://github.com/apache/servicemix-utils/commit/bcb6bee7d9a8059bb56ed7cafde0e47ba7829e3d",
        "bug_id": "servicemix-utils_81c96e1",
        "file": [
            {
                "sha": "8b2e9c2598f6c64532b72c449f93177a96253508",
                "filename": "src/main/java/org/apache/servicemix/store/memory/TimeoutMemoryStore.java",
                "blob_url": "https://github.com/apache/servicemix-utils/blob/81c96e16a4f2b90240e18962569f9c8659e6fd31/src/main/java/org/apache/servicemix/store/memory/TimeoutMemoryStore.java",
                "raw_url": "https://github.com/apache/servicemix-utils/raw/81c96e16a4f2b90240e18962569f9c8659e6fd31/src/main/java/org/apache/servicemix/store/memory/TimeoutMemoryStore.java",
                "status": "modified",
                "changes": 19,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/servicemix-utils/contents/src/main/java/org/apache/servicemix/store/memory/TimeoutMemoryStore.java?ref=81c96e16a4f2b90240e18962569f9c8659e6fd31",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.servicemix.store.memory;\n \n import java.io.IOException;\n+import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n@@ -59,24 +60,26 @@ public Object load(String id) throws IOException {\n         evict();\n         LOG.debug(\"Loading object with id:\" + id);\n         Entry entry = datas.remove(id);\n-        if(entry != null) {\n+        if (entry != null) {\n             Object data = entry.getData();\n             fireRemovedEvent(id,data);\n             return data;\n         } else return null;\n     }\n \n+    /*\n+     * Remove timed out entries from the data map.\n+     */\n     private void evict() {\n         long now = System.currentTimeMillis();\n-        for (String key : datas.keySet()) {\n-            long age = now - datas.get(key).getTime();\n+\n+        for (Map.Entry<String, Entry> entry : datas.entrySet()) {\n+            long age = now - entry.getValue().getTime();\n             if (age > timeout) {\n-                LOG.debug(\"Removing object with id \" + key + \" from store after \" + age + \" ms\");\n-                Entry entry = datas.get(key);\n-                if(entry != null) {\n-                    fireEvictedEvent(key,entry.getData());\n+                LOG.debug(\"Removing object with id \" + entry.getKey() + \" from store after \" + age + \" ms\");\n+                if(datas.remove(entry.getKey()) != null) {\n+                    fireEvictedEvent(entry.getKey(), entry.getValue().getData());\n                 }\n-                datas.remove(key);\n             }\n         }\n     }",
                "deletions": 8
            },
            {
                "sha": "b26282c01bd1b68e3b643eada31ba32db75121b8",
                "filename": "src/test/java/org/apache/servicemix/store/memory/ConcurrentTimeoutMemoryStoreTest.java",
                "blob_url": "https://github.com/apache/servicemix-utils/blob/81c96e16a4f2b90240e18962569f9c8659e6fd31/src/test/java/org/apache/servicemix/store/memory/ConcurrentTimeoutMemoryStoreTest.java",
                "raw_url": "https://github.com/apache/servicemix-utils/raw/81c96e16a4f2b90240e18962569f9c8659e6fd31/src/test/java/org/apache/servicemix/store/memory/ConcurrentTimeoutMemoryStoreTest.java",
                "status": "added",
                "changes": 69,
                "additions": 69,
                "contents_url": "https://api.github.com/repos/apache/servicemix-utils/contents/src/test/java/org/apache/servicemix/store/memory/ConcurrentTimeoutMemoryStoreTest.java?ref=81c96e16a4f2b90240e18962569f9c8659e6fd31",
                "patch": "@@ -0,0 +1,69 @@\n+package org.apache.servicemix.store.memory;\n+\n+import org.apache.servicemix.executors.Executor;\n+import org.apache.servicemix.executors.ExecutorFactory;\n+import org.apache.servicemix.executors.impl.ExecutorFactoryImpl;\n+import org.apache.servicemix.id.IdGenerator;\n+import org.apache.servicemix.store.Store;\n+import org.junit.Test;\n+\n+import java.util.Random;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Test case to ensure the {@link TimeoutMemoryStore} behaves properly under multi-threaded l\n+ */\n+public class ConcurrentTimeoutMemoryStoreTest {\n+\n+    private static final int NUMBER_OF_EXECUTORS = 5;\n+    private static final int NUMBER_OF_OPERATIONS = 1000;\n+    private static final Random RANDOM = new Random();\n+    private static final int RANDOMNESS = 5;\n+    \n+    private final ExecutorFactory factory = new ExecutorFactoryImpl();\n+    private final Store store = new TimeoutMemoryStore(new IdGenerator(), 100);\n+    \n+    @Test\n+    public void testConcurrentLoadAndStore() throws Exception {\n+        final CountDownLatch latch = new CountDownLatch(NUMBER_OF_EXECUTORS * NUMBER_OF_OPERATIONS);\n+        \n+        final Executor executor = factory.createExecutor(\"concurrent.timemout.memory.store\");\n+        for (int i = 0 ; i < 5 ; i++) {\n+            executor.execute(new RandomAccessExecutable(store, latch));\n+        }\n+        \n+        assertTrue(\"We should have processed all operations successfully\", latch.await(3, TimeUnit.SECONDS));\n+    }\n+\n+    /**\n+     * {@link Runnable} that randomly stores and removes items from a {@link Store} implementation\n+     */\n+    private class RandomAccessExecutable implements Runnable {\n+\n+        private final Store store;\n+        private final CountDownLatch latch;\n+\n+        public RandomAccessExecutable(Store store, CountDownLatch latch) {\n+            super();\n+            this.store = store;\n+            this.latch = latch;\n+        }\n+\n+        public void run() {\n+            for (int i = 0 ; i < NUMBER_OF_OPERATIONS ; i++) {\n+                try {\n+                    store.store(\"Item \" + RANDOM.nextInt(RANDOMNESS));\n+                    store.load(\"Item \" + RANDOM.nextInt(RANDOMNESS));\n+                    latch.countDown();\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                    fail(\"Unexception exception caught: \" + e);\n+                }\n+            }\n+        }\n+    }\n+}",
                "deletions": 0
            }
        ],
        "patched_files": [
            "TimeoutMemoryStore.java"
        ],
        "unit_tests": [
            "ConcurrentTimeoutMemoryStoreTest.java",
            "TimeoutMemoryStoreTest.java"
        ]
    }
}