{
    "httpcomponents-client_0730d6c": {
        "bug_id": "httpcomponents-client_0730d6c",
        "commit": "https://github.com/apache/httpcomponents-client/commit/0730d6c7c97c8d3936ccb51af663757157002163",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/0730d6c7c97c8d3936ccb51af663757157002163/httpclient/src/main/java/org/apache/http/client/protocol/RequestAuthCache.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/main/java/org/apache/http/client/protocol/RequestAuthCache.java?ref=0730d6c7c97c8d3936ccb51af663757157002163",
                "deletions": 1,
                "filename": "httpclient/src/main/java/org/apache/http/client/protocol/RequestAuthCache.java",
                "patch": "@@ -92,7 +92,7 @@ public void process(final HttpRequest request, final HttpContext context)\n         }\n \n         final AuthState targetState = clientContext.getTargetAuthState();\n-        if (target != null && targetState != null && targetState.getState() == AuthProtocolState.UNCHALLENGED) {\n+        if (targetState != null && targetState.getState() == AuthProtocolState.UNCHALLENGED) {\n             final AuthScheme authScheme = authCache.get(target);\n             if (authScheme != null) {\n                 doPreemptiveAuth(target, authScheme, targetState, credsProvider);",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/0730d6c7c97c8d3936ccb51af663757157002163/httpclient/src/main/java/org/apache/http/client/protocol/RequestAuthCache.java",
                "sha": "214d87f24eb39a3989c704b1c4d30a50c7927d70",
                "status": "modified"
            }
        ],
        "message": "target cannot be null here otherwise the earlier invocation of target.getPort() would fail with NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1435320 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/5bdd456c8c5c32accfecf086b264961ea29e4ceb",
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestRequestAuthCache.java"
        ]
    },
    "httpcomponents-client_1779158": {
        "bug_id": "httpcomponents-client_1779158",
        "commit": "https://github.com/apache/httpcomponents-client/commit/1779158a4f24b524d51216b656176c74dd23d6b4",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/1779158a4f24b524d51216b656176c74dd23d6b4/RELEASE_NOTES.txt",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/RELEASE_NOTES.txt?ref=1779158a4f24b524d51216b656176c74dd23d6b4",
                "deletions": 0,
                "filename": "RELEASE_NOTES.txt",
                "patch": "@@ -1,6 +1,9 @@\n Changes in trunk\n -------------------\n \n+* [HTTPCLIENT-1276] Cache update on a 304 response causes NPE. \n+  Contributed by Francois-Xavier Bonnet <francois-xavier.bonnet at centraliens.net> \n+\n * [HTTPCLIENT-1273] DecompressingHttpClient does not automatically consume response \n   content in case of an i/o, HTTP or runtime exception thrown by the decompressing \n   protocol interceptor leading to a potential connection leak. ",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/1779158a4f24b524d51216b656176c74dd23d6b4/RELEASE_NOTES.txt",
                "sha": "abb953d2fe42f88141cd185be1ab91c191ef8f27",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/1779158a4f24b524d51216b656176c74dd23d6b4/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CacheEntity.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CacheEntity.java?ref=1779158a4f24b524d51216b656176c74dd23d6b4",
                "deletions": 3,
                "filename": "httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CacheEntity.java",
                "patch": "@@ -35,7 +35,6 @@\n import org.apache.http.HttpEntity;\n import org.apache.http.annotation.Immutable;\n import org.apache.http.client.cache.HttpCacheEntry;\n-import org.apache.http.client.cache.Resource;\n import org.apache.http.protocol.HTTP;\n \n @Immutable\n@@ -67,8 +66,7 @@ public boolean isRepeatable() {\n     }\n \n     public long getContentLength() {\n-        Resource resource = this.cacheEntry.getResource();\n-\t\treturn (resource != null) ? resource.length() : 0L;\n+\t\treturn this.cacheEntry.getResource().length();\n     }\n \n     public InputStream getContent() throws IOException {",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/1779158a4f24b524d51216b656176c74dd23d6b4/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CacheEntity.java",
                "sha": "5987e499df295944fa103a751fd09167833680ad",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/1779158a4f24b524d51216b656176c74dd23d6b4/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CacheEntryUpdater.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CacheEntryUpdater.java?ref=1779158a4f24b524d51216b656176c74dd23d6b4",
                "deletions": 1,
                "filename": "httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CacheEntryUpdater.java",
                "patch": "@@ -87,7 +87,12 @@ public HttpCacheEntry updateCacheEntry(\n         if (response.getStatusLine().getStatusCode() != HttpStatus.SC_NOT_MODIFIED)\n             throw new IllegalArgumentException(\"Response must have 304 status code\");\n         Header[] mergedHeaders = mergeHeaders(entry, response);\n-        Resource resource = resourceFactory.copy(requestId, entry.getResource());\n+        Resource oldResource = entry.getResource();\n+        Resource resource = null;\n+        if (oldResource != null) {\n+            resource = resourceFactory.copy(requestId, entry.getResource());\n+            oldResource.dispose();\n+        }\n         return new HttpCacheEntry(\n                 requestDate,\n                 responseDate,",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/1779158a4f24b524d51216b656176c74dd23d6b4/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CacheEntryUpdater.java",
                "sha": "87a8f152ae05cb961907d7afe87428c31cc3fd47",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/1779158a4f24b524d51216b656176c74dd23d6b4/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachedHttpResponseGenerator.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachedHttpResponseGenerator.java?ref=1779158a4f24b524d51216b656176c74dd23d6b4",
                "deletions": 3,
                "filename": "httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachedHttpResponseGenerator.java",
                "patch": "@@ -73,11 +73,13 @@ HttpResponse generateResponse(HttpCacheEntry entry) {\n         HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, entry\n                 .getStatusCode(), entry.getReasonPhrase());\n \n-        HttpEntity entity = new CacheEntity(entry);\n         response.setHeaders(entry.getAllHeaders());\n-        addMissingContentLengthHeader(response, entity);\n-        response.setEntity(entity);\n \n+        if (entry.getResource() != null) {\n+            HttpEntity entity = new CacheEntity(entry);\n+            addMissingContentLengthHeader(response, entity);\n+            response.setEntity(entity);\n+        }\n \n         long age = this.validityStrategy.getCurrentAgeSecs(entry, now);\n         if (age > 0) {",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/1779158a4f24b524d51216b656176c74dd23d6b4/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachedHttpResponseGenerator.java",
                "sha": "51981dba7daba0dbee73bbe32d3a222fd3402713",
                "status": "modified"
            },
            {
                "additions": 67,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/1779158a4f24b524d51216b656176c74dd23d6b4/httpclient-cache/src/test/java/org/apache/http/impl/client/cache/TestCachingExec.java",
                "changes": 68,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient-cache/src/test/java/org/apache/http/impl/client/cache/TestCachingExec.java?ref=1779158a4f24b524d51216b656176c74dd23d6b4",
                "deletions": 1,
                "filename": "httpclient-cache/src/test/java/org/apache/http/impl/client/cache/TestCachingExec.java",
                "patch": "@@ -27,12 +27,12 @@\n package org.apache.http.impl.client.cache;\n \n import static org.easymock.EasyMock.anyObject;\n+import static org.easymock.EasyMock.eq;\n import static org.easymock.EasyMock.expect;\n import static org.easymock.EasyMock.expectLastCall;\n import static org.easymock.EasyMock.isA;\n import static org.easymock.EasyMock.isNull;\n import static org.easymock.EasyMock.same;\n-import static org.easymock.EasyMock.eq;\n import static org.easymock.classextension.EasyMock.createMockBuilder;\n import static org.easymock.classextension.EasyMock.createNiceMock;\n import static org.easymock.classextension.EasyMock.replay;\n@@ -1527,6 +1527,72 @@ public void testCanCacheAResponseWithoutABody() throws Exception {\n         assertEquals(1, backend.getExecutions());\n     }\n \n+\t@Test\n+\tpublic void testNoEntityForIfNoneMatchRequestNotYetInCache() throws Exception {\n+\n+\t\tDate now = new Date();\n+\t\tDate tenSecondsAgo = new Date(now.getTime() - 10 * 1000L);\n+\n+\t\timpl = new CachingExec(mockBackend, new BasicHttpCache(),\n+\t\t\t\tCacheConfig.DEFAULT);\n+\t\tHttpRequestWrapper req1 = HttpRequestWrapper.wrap(new HttpGet(\n+\t\t\t\t\"http://foo.example.com/\"));\n+\t\treq1.addHeader(\"If-None-Match\", \"\\\"etag\\\"\");\n+\n+\t\tHttpResponse resp1 = new BasicHttpResponse(HttpVersion.HTTP_1_1,\n+\t\t\t\tHttpStatus.SC_NOT_MODIFIED, \"Not modified\");\n+\t\tresp1.setHeader(\"Content-Length\", \"128\");\n+\t\tresp1.setHeader(\"ETag\", \"\\\"etag\\\"\");\n+\t\tresp1.setHeader(\"Date\", DateUtils.formatDate(tenSecondsAgo));\n+\t\tresp1.setHeader(\"Cache-Control\", \"public, max-age=5\");\n+\n+\t\tbackendExpectsAnyRequestAndReturn(resp1);\n+\t\treplayMocks();\n+\t\tHttpResponse result = impl.execute(route, req1);\n+\t\tverifyMocks();\n+\n+\t\tassertEquals(HttpStatus.SC_NOT_MODIFIED, result.getStatusLine()\n+\t\t\t\t.getStatusCode());\n+\t\tassertNull(\"The 304 response messages MUST NOT contain a message-body\",\n+\t\t\t\tresult.getEntity());\n+\t}\n+\n+\t@Test\n+\tpublic void testNotModifiedResponseUpdatesCacheEntryWhenNoEntity() throws Exception {\n+\n+\t\tDate now = new Date();\n+\n+\t\timpl = new CachingExec(mockBackend, new BasicHttpCache(),CacheConfig.DEFAULT);\n+\n+\t\tHttpRequestWrapper req1 = HttpRequestWrapper.wrap(new HttpGet(\"http://foo.example.com/\"));\n+\t\treq1.addHeader(\"If-None-Match\", \"etag\");\n+\n+\t\tHttpRequestWrapper req2 = HttpRequestWrapper.wrap(new HttpGet(\"http://foo.example.com/\"));\n+\t\treq2.addHeader(\"If-None-Match\", \"etag\");\n+\n+\t\tHttpResponse resp1 = new BasicHttpResponse(HttpVersion.HTTP_1_1, HttpStatus.SC_NOT_MODIFIED, \"Not modified\");\n+\t\tresp1.setHeader(\"Date\", DateUtils.formatDate(now));\n+\t\tresp1.setHeader(\"Cache-Control\",\"max-age=0\");\n+\t\tresp1.setHeader(\"Etag\", \"etag\");\n+\n+\t\tHttpResponse resp2 = new BasicHttpResponse(HttpVersion.HTTP_1_1, HttpStatus.SC_NOT_MODIFIED, \"Not modified\");\n+\t\tresp2.setHeader(\"Date\", DateUtils.formatDate(now));\n+\t\tresp2.setHeader(\"Cache-Control\",\"max-age=0\");\n+\t\tresp1.setHeader(\"Etag\", \"etag\");\n+\n+\t\tbackendExpectsAnyRequestAndReturn(resp1);\n+\t\tbackendExpectsAnyRequestAndReturn(resp2);\n+\t\treplayMocks();\n+\t\tHttpResponse result1 = impl.execute(route, req1);\n+\t\tHttpResponse result2 = impl.execute(route, req2);\n+\t\tverifyMocks();\n+\n+\t\tassertEquals(HttpStatus.SC_NOT_MODIFIED, result1.getStatusLine().getStatusCode());\n+\t\tassertEquals(\"etag\", result1.getFirstHeader(\"Etag\").getValue());\n+\t\tassertEquals(HttpStatus.SC_NOT_MODIFIED, result2.getStatusLine().getStatusCode());\n+\t\tassertEquals(\"etag\", result2.getFirstHeader(\"Etag\").getValue());\n+\t}\n+\n     private IExpectationSetters<CloseableHttpResponse> backendExpectsAnyRequestAndReturn(\n             HttpResponse response) throws Exception {\n         CloseableHttpResponse resp = mockBackend.execute(",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/1779158a4f24b524d51216b656176c74dd23d6b4/httpclient-cache/src/test/java/org/apache/http/impl/client/cache/TestCachingExec.java",
                "sha": "004e16f92389fa502da7b217ef7bbd5e89762c14",
                "status": "modified"
            }
        ],
        "message": "HTTPCLIENT-1276: cache update on a 304 response causes NPE\nContributed by Francois-Xavier Bonnet <francois-xavier.bonnet at centraliens.net>\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1421330 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/bfbc573cbddfe2c607771faf02c905b837769eb9",
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestCachedHttpResponseGenerator.java"
        ]
    },
    "httpcomponents-client_2aa1fc1": {
        "bug_id": "httpcomponents-client_2aa1fc1",
        "commit": "https://github.com/apache/httpcomponents-client/commit/2aa1fc14004a1669d00d4d50aebb1ecabe5b3fa3",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/2aa1fc14004a1669d00d4d50aebb1ecabe5b3fa3/RELEASE_NOTES.txt",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/RELEASE_NOTES.txt?ref=2aa1fc14004a1669d00d4d50aebb1ecabe5b3fa3",
                "deletions": 2,
                "filename": "RELEASE_NOTES.txt",
                "patch": "@@ -1,8 +1,12 @@\n Changes in trunk\n -------------------\n \n-* [HTTPCLIENT-1281] GzipDecompressingEntity does not release InputStream when an IOException occurs \n-  while reading the Gzip header.\n+* [HTTPCLIENT-1279] Target host responding with status 407 (proxy authentication required)\n+  causes an NPE.\n+  Contributed by Oleg Kalnichevski <olegk at apache.org>\n+\n+* [HTTPCLIENT-1281] GzipDecompressingEntity does not release InputStream when an IOException\n+  occurs while reading the Gzip header.\n   Contributed by Francois-Xavier Bonnet <francois-xavier.bonnet at centraliens.net> \n \n * [HTTPCLIENT-1277] Caching client sends a 304 to an unconditional request. ",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/2aa1fc14004a1669d00d4d50aebb1ecabe5b3fa3/RELEASE_NOTES.txt",
                "sha": "3b586fad7b03d69224eed521c51189c217cab724",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/2aa1fc14004a1669d00d4d50aebb1ecabe5b3fa3/httpclient/src/main/java/org/apache/http/impl/client/DefaultRequestDirector.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/main/java/org/apache/http/impl/client/DefaultRequestDirector.java?ref=2aa1fc14004a1669d00d4d50aebb1ecabe5b3fa3",
                "deletions": 0,
                "filename": "httpclient/src/main/java/org/apache/http/impl/client/DefaultRequestDirector.java",
                "patch": "@@ -1075,6 +1075,10 @@ protected RoutedRequest handleResponse(RoutedRequest roureq,\n             HttpHost proxy = route.getProxyHost();\n             if (this.authenticator.isAuthenticationRequested(proxy, response,\n                     this.proxyAuthStrategy, this.proxyAuthState, context)) {\n+                // if proxy is not set use target host instead\n+                if (proxy == null) {\n+                    proxy = route.getTargetHost();\n+                }\n                 if (this.authenticator.authenticate(proxy, response,\n                         this.proxyAuthStrategy, this.proxyAuthState, context)) {\n                     // Re-try the same request via the same route",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/2aa1fc14004a1669d00d4d50aebb1ecabe5b3fa3/httpclient/src/main/java/org/apache/http/impl/client/DefaultRequestDirector.java",
                "sha": "ddd9ab39ff58fdf0e2f9e9b576434b0de42e59ea",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/2aa1fc14004a1669d00d4d50aebb1ecabe5b3fa3/httpclient/src/main/java/org/apache/http/impl/client/execchain/MainClientExec.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/main/java/org/apache/http/impl/client/execchain/MainClientExec.java?ref=2aa1fc14004a1669d00d4d50aebb1ecabe5b3fa3",
                "deletions": 0,
                "filename": "httpclient/src/main/java/org/apache/http/impl/client/execchain/MainClientExec.java",
                "patch": "@@ -567,6 +567,10 @@ private boolean needAuthentication(\n             HttpHost proxy = route.getProxyHost();\n             if (this.authenticator.isAuthenticationRequested(proxy, response,\n                     this.proxyAuthStrategy, proxyAuthState, context)) {\n+                // if proxy is not set use target host instead\n+                if (proxy == null) {\n+                    proxy = route.getTargetHost();\n+                }\n                 return this.authenticator.handleAuthChallenge(proxy, response,\n                         this.proxyAuthStrategy, proxyAuthState, context);\n             }",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/2aa1fc14004a1669d00d4d50aebb1ecabe5b3fa3/httpclient/src/main/java/org/apache/http/impl/client/execchain/MainClientExec.java",
                "sha": "924b3880c38b0940737bec6b4eb89b1fd5630086",
                "status": "modified"
            },
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/2aa1fc14004a1669d00d4d50aebb1ecabe5b3fa3/httpclient/src/test/java/org/apache/http/impl/client/integration/TestClientAuthentication.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/test/java/org/apache/http/impl/client/integration/TestClientAuthentication.java?ref=2aa1fc14004a1669d00d4d50aebb1ecabe5b3fa3",
                "deletions": 0,
                "filename": "httpclient/src/test/java/org/apache/http/impl/client/integration/TestClientAuthentication.java",
                "patch": "@@ -513,4 +513,38 @@ public void testPreemptiveAuthenticationFailure() throws Exception {\n         Assert.assertEquals(1, requestHandler.getCount());\n     }\n \n+    static class ProxyAuthHandler implements HttpRequestHandler {\n+\n+        public void handle(\n+                final HttpRequest request,\n+                final HttpResponse response,\n+                final HttpContext context) throws HttpException, IOException {\n+            String creds = (String) context.getAttribute(\"creds\");\n+            if (creds == null || !creds.equals(\"test:test\")) {\n+                response.setStatusCode(HttpStatus.SC_PROXY_AUTHENTICATION_REQUIRED);\n+            } else {\n+                response.setStatusCode(HttpStatus.SC_OK);\n+                StringEntity entity = new StringEntity(\"success\", Consts.ASCII);\n+                response.setEntity(entity);\n+            }\n+        }\n+\n+    }\n+\n+    @Test\n+    public void testAuthenticationTargetAsProxy() throws Exception {\n+        this.localServer.register(\"*\", new ProxyAuthHandler());\n+\n+        TestCredentialsProvider credsProvider = new TestCredentialsProvider(null);\n+        this.httpclient = HttpClients.custom().setCredentialsProvider(credsProvider).build();\n+\n+        HttpGet httpget = new HttpGet(\"/\");\n+\n+        HttpResponse response = this.httpclient.execute(getServerHttp(), httpget);\n+        HttpEntity entity = response.getEntity();\n+        Assert.assertEquals(HttpStatus.SC_PROXY_AUTHENTICATION_REQUIRED,\n+                response.getStatusLine().getStatusCode());\n+        EntityUtils.consume(entity);\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/2aa1fc14004a1669d00d4d50aebb1ecabe5b3fa3/httpclient/src/test/java/org/apache/http/impl/client/integration/TestClientAuthentication.java",
                "sha": "7d884bcdc7510a7707d8be02f2ffcf4d6945aa6d",
                "status": "modified"
            }
        ],
        "message": "HTTPCLIENT-1279: Target host responding with status 407 (proxy authentication required) causes an NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1423172 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/12d11324c0c45725e5c7ed4ec068983b1115f956",
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestMainClientExec.java"
        ]
    },
    "httpcomponents-client_3220bbf": {
        "bug_id": "httpcomponents-client_3220bbf",
        "commit": "https://github.com/apache/httpcomponents-client/commit/3220bbf633e74e05d32a62005d1c9251974b88d1",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/3220bbf633e74e05d32a62005d1c9251974b88d1/httpclient/src/main/java-deprecated/org/apache/http/impl/client/DefaultRequestDirector.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/main/java-deprecated/org/apache/http/impl/client/DefaultRequestDirector.java?ref=3220bbf633e74e05d32a62005d1c9251974b88d1",
                "deletions": 0,
                "filename": "httpclient/src/main/java-deprecated/org/apache/http/impl/client/DefaultRequestDirector.java",
                "patch": "@@ -867,6 +867,7 @@ protected boolean createTunnelToTarget(final HttpRoute route,\n \n             // Populate the execution context\n             context.setAttribute(ExecutionContext.HTTP_TARGET_HOST, target);\n+            context.setAttribute(ClientContext.ROUTE, route);\n             context.setAttribute(ExecutionContext.HTTP_PROXY_HOST, proxy);\n             context.setAttribute(ExecutionContext.HTTP_CONNECTION, managedConn);\n             context.setAttribute(ExecutionContext.HTTP_REQUEST, connect);",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/3220bbf633e74e05d32a62005d1c9251974b88d1/httpclient/src/main/java-deprecated/org/apache/http/impl/client/DefaultRequestDirector.java",
                "sha": "eaf784b4f04bf9a2c3e3e411745bf848fc09bc75",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/3220bbf633e74e05d32a62005d1c9251974b88d1/httpclient/src/main/java/org/apache/http/client/protocol/RequestAuthCache.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/main/java/org/apache/http/client/protocol/RequestAuthCache.java?ref=3220bbf633e74e05d32a62005d1c9251974b88d1",
                "deletions": 0,
                "filename": "httpclient/src/main/java/org/apache/http/client/protocol/RequestAuthCache.java",
                "patch": "@@ -84,7 +84,17 @@ public void process(final HttpRequest request, final HttpContext context)\n         }\n \n         final RouteInfo route = clientContext.getHttpRoute();\n+        if (route == null) {\n+            this.log.debug(\"Route info not set in the context\");\n+            return;\n+        }\n+\n         HttpHost target = clientContext.getTargetHost();\n+        if (target == null) {\n+            this.log.debug(\"Target host not set in the context\");\n+            return;\n+        }\n+\n         if (target.getPort() < 0) {\n             target = new HttpHost(\n                     target.getHostName(),",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/3220bbf633e74e05d32a62005d1c9251974b88d1/httpclient/src/main/java/org/apache/http/client/protocol/RequestAuthCache.java",
                "sha": "fa6a362998e8a99f72ea6a019cb532861c4db699",
                "status": "modified"
            }
        ],
        "message": "HTTPCLIENT-1479: fixed NPE in RequestAuthCache caused by incorrect context initialization\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1575902 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/57c6856702348677f7331d7f5512fb04b118faa7",
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestRequestAuthCache.java"
        ]
    },
    "httpcomponents-client_3956b9f": {
        "bug_id": "httpcomponents-client_3956b9f",
        "commit": "https://github.com/apache/httpcomponents-client/commit/3956b9f30fad4dced92ec5c68c7f14a4fd4d5d46",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/3956b9f30fad4dced92ec5c68c7f14a4fd4d5d46/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachingExec.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachingExec.java?ref=3956b9f30fad4dced92ec5c68c7f14a4fd4d5d46",
                "deletions": 1,
                "filename": "httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachingExec.java",
                "patch": "@@ -139,7 +139,7 @@ public CachingExec(\n         this.requestCompliance = new RequestProtocolCompliance();\n         this.responseCachingPolicy = new ResponseCachingPolicy(\n                 this.cacheConfig.getMaxObjectSize(), this.cacheConfig.isSharedCache(),\n-                this.cacheConfig.isNeverCacheHTTP10ResponsesWithQuery(), config.is303CachingEnabled());\n+                this.cacheConfig.isNeverCacheHTTP10ResponsesWithQuery(), this.cacheConfig.is303CachingEnabled());\n         this.asynchRevalidator = asynchRevalidator;\n     }\n ",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/3956b9f30fad4dced92ec5c68c7f14a4fd4d5d46/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachingExec.java",
                "sha": "72b837612f5a89101bb37f34a2ac9205648c40d9",
                "status": "modified"
            }
        ],
        "message": "Wrong field used; config parameter can be null which would cause NPE here\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1493755 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/0533ce7c5315ae9a899664cc2066b788172b7417",
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestCachingExec.java"
        ]
    },
    "httpcomponents-client_67a1cc7": {
        "bug_id": "httpcomponents-client_67a1cc7",
        "commit": "https://github.com/apache/httpcomponents-client/commit/67a1cc719969e0f4604cb3a34cb2ba42e1c4caa1",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/67a1cc719969e0f4604cb3a34cb2ba42e1c4caa1/RELEASE_NOTES.txt",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/RELEASE_NOTES.txt?ref=67a1cc719969e0f4604cb3a34cb2ba42e1c4caa1",
                "deletions": 0,
                "filename": "RELEASE_NOTES.txt",
                "patch": "@@ -4,6 +4,8 @@ Changes for 4.4-alpha1\n Changelog:\n -------------------\n \n+* [HTTPCLIENT-1470] CachingExec(ClientExecChain, HttpCache, CacheConfig, AsynchronousValidator) throws NPE if config is null\n+\n * [HTTPCLIENT-1466] FileBodyPart#generateContentType() ignores custom ContentType values.\n   Contributed by Oleg Kalnichevski <olegk at apache.org>\n ",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/67a1cc719969e0f4604cb3a34cb2ba42e1c4caa1/RELEASE_NOTES.txt",
                "sha": "607fc3e86259bb3b7d26aa8a5ec3c515488bea5c",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/67a1cc719969e0f4604cb3a34cb2ba42e1c4caa1/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachingExec.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachingExec.java?ref=67a1cc719969e0f4604cb3a34cb2ba42e1c4caa1",
                "deletions": 2,
                "filename": "httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachingExec.java",
                "patch": "@@ -136,10 +136,10 @@ public CachingExec(\n         this.validityPolicy = new CacheValidityPolicy();\n         this.responseGenerator = new CachedHttpResponseGenerator(this.validityPolicy);\n         this.cacheableRequestPolicy = new CacheableRequestPolicy();\n-        this.suitabilityChecker = new CachedResponseSuitabilityChecker(this.validityPolicy, config);\n+        this.suitabilityChecker = new CachedResponseSuitabilityChecker(this.validityPolicy, this.cacheConfig);\n         this.conditionalRequestBuilder = new ConditionalRequestBuilder();\n         this.responseCompliance = new ResponseProtocolCompliance();\n-        this.requestCompliance = new RequestProtocolCompliance(config.isWeakETagOnPutDeleteAllowed());\n+        this.requestCompliance = new RequestProtocolCompliance(this.cacheConfig.isWeakETagOnPutDeleteAllowed());\n         this.responseCachingPolicy = new ResponseCachingPolicy(\n                 this.cacheConfig.getMaxObjectSize(), this.cacheConfig.isSharedCache(),\n                 this.cacheConfig.isNeverCacheHTTP10ResponsesWithQuery(), this.cacheConfig.is303CachingEnabled());",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/67a1cc719969e0f4604cb3a34cb2ba42e1c4caa1/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/CachingExec.java",
                "sha": "cc267cf73fa0f0f28a30858af7180b59150d2580",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/67a1cc719969e0f4604cb3a34cb2ba42e1c4caa1/httpclient-cache/src/test/java/org/apache/http/impl/client/cache/TestRFC5861Compliance.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient-cache/src/test/java/org/apache/http/impl/client/cache/TestRFC5861Compliance.java?ref=67a1cc719969e0f4604cb3a34cb2ba42e1c4caa1",
                "deletions": 0,
                "filename": "httpclient-cache/src/test/java/org/apache/http/impl/client/cache/TestRFC5861Compliance.java",
                "patch": "@@ -366,6 +366,11 @@ public void testStaleWhileRevalidateReturnsStaleEntryWithWarning()\n         assertTrue(warning110Found);\n     }\n \n+    @Test\n+    public void testHTTPCLIENT1470() {\n+        impl = new CachingExec(mockBackend, cache, null, new AsynchronousValidator(config));\n+    }\n+\n     @Test\n     public void testStaleWhileRevalidateReturnsStaleNonRevalidatableEntryWithWarning()\n         throws Exception {",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/67a1cc719969e0f4604cb3a34cb2ba42e1c4caa1/httpclient-cache/src/test/java/org/apache/http/impl/client/cache/TestRFC5861Compliance.java",
                "sha": "aacd68c035cacdceee9364d0edfd6c4c77b1e749",
                "status": "modified"
            }
        ],
        "message": "HTTPCLIENT-1470 CachingExec(ClientExecChain, HttpCache, CacheConfig, AsynchronousValidator) throws NPE if config is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1570963 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/50b27ac7908615d8e5cf9e13b9a9a7b67cb4c1af",
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestCachingExec.java"
        ]
    },
    "httpcomponents-client_955f47e": {
        "bug_id": "httpcomponents-client_955f47e",
        "commit": "https://github.com/apache/httpcomponents-client/commit/955f47e6f592a97735ac80ff4fd265a9ba041430",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/955f47e6f592a97735ac80ff4fd265a9ba041430/httpclient/src/main/java/org/apache/http/conn/ssl/SSLSocketFactory.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/main/java/org/apache/http/conn/ssl/SSLSocketFactory.java?ref=955f47e6f592a97735ac80ff4fd265a9ba041430",
                "deletions": 1,
                "filename": "httpclient/src/main/java/org/apache/http/conn/ssl/SSLSocketFactory.java",
                "patch": "@@ -364,7 +364,7 @@ public Socket connectSocket(\n         }\n         SSLSocket sslsock = (SSLSocket) (sock != null ? sock : createSocket());\n         if (localAddress != null) {\n-            sock.setReuseAddress(HttpConnectionParams.getSoReuseaddr(params));\n+            sslsock.setReuseAddress(HttpConnectionParams.getSoReuseaddr(params));\n             sslsock.bind(localAddress);\n         }\n ",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/955f47e6f592a97735ac80ff4fd265a9ba041430/httpclient/src/main/java/org/apache/http/conn/ssl/SSLSocketFactory.java",
                "sha": "9c77b90ca7d0c7ec7723ddc38b92ccd05ec888e1",
                "status": "modified"
            }
        ],
        "message": "HTTPCLIENT-932 Fix possible NPE - use sslsock rather than sock\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@940069 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/1a26a94f9509d9044e2973c1779f10e7916e950f",
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestSSLSocketFactory.java"
        ]
    },
    "httpcomponents-client_9cc7c1a": {
        "bug_id": "httpcomponents-client_9cc7c1a",
        "commit": "https://github.com/apache/httpcomponents-client/commit/9cc7c1acecb5ce7af867718f0d1933b3bdf3c3f1",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/9cc7c1acecb5ce7af867718f0d1933b3bdf3c3f1/RELEASE_NOTES.txt",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/RELEASE_NOTES.txt?ref=9cc7c1acecb5ce7af867718f0d1933b3bdf3c3f1",
                "deletions": 0,
                "filename": "RELEASE_NOTES.txt",
                "patch": "@@ -1,6 +1,9 @@\n Changes since 4.3.1\n -------------------\n \n+* [HTTPCLIENT-1440] 'file' scheme in redirect location URI causes NPE.\n+  Contributed by James Leigh <james at 3roundstones dot com>\n+\n * [HTTPCLIENT-1437] Made Executor#execute thread safe.\n   Contributed by Oleg Kalnichevski <olegk at apache.org>\n ",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/9cc7c1acecb5ce7af867718f0d1933b3bdf3c3f1/RELEASE_NOTES.txt",
                "sha": "706677632793bf5a7b45c9a49f4e76d2f98a5bcb",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/9cc7c1acecb5ce7af867718f0d1933b3bdf3c3f1/httpclient/src/main/java/org/apache/http/client/utils/URIUtils.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/main/java/org/apache/http/client/utils/URIUtils.java?ref=9cc7c1acecb5ce7af867718f0d1933b3bdf3c3f1",
                "deletions": 1,
                "filename": "httpclient/src/main/java/org/apache/http/client/utils/URIUtils.java",
                "patch": "@@ -259,7 +259,8 @@ private static URI resolveReferenceStartingWithQueryString(\n      * @return the URI without dot segments\n      */\n     private static URI normalizeSyntax(final URI uri) {\n-        if (uri.isOpaque()) {\n+        if (uri.isOpaque() || uri.getAuthority() == null) {\n+            // opaque and file: URIs\n             return uri;\n         }\n         Args.check(uri.isAbsolute(), \"Base URI must be absolute\");",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/9cc7c1acecb5ce7af867718f0d1933b3bdf3c3f1/httpclient/src/main/java/org/apache/http/client/utils/URIUtils.java",
                "sha": "131f20d7af630579aa8b34cd041ca26578679f63",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/9cc7c1acecb5ce7af867718f0d1933b3bdf3c3f1/httpclient/src/test/java/org/apache/http/client/utils/TestURIUtils.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/test/java/org/apache/http/client/utils/TestURIUtils.java?ref=9cc7c1acecb5ce7af867718f0d1933b3bdf3c3f1",
                "deletions": 0,
                "filename": "httpclient/src/test/java/org/apache/http/client/utils/TestURIUtils.java",
                "patch": "@@ -173,6 +173,20 @@ public void testResolve() {\n                 \"http://s/mid/content=5/../6\").toString());\n     }\n \n+    @Test\n+    public void testResolveOpaque() {\n+        Assert.assertEquals(\"example://a/b/c/%7Bfoo%7D\", URIUtils.resolve(this.baseURI, \"eXAMPLE://a/./b/../b/%63/%7bfoo%7d\").toString());\n+        Assert.assertEquals(\"file://localhost/etc/fstab\", URIUtils.resolve(this.baseURI, \"file://localhost/etc/fstab\").toString());\n+        Assert.assertEquals(\"file:///etc/fstab\", URIUtils.resolve(this.baseURI, \"file:///etc/fstab\").toString());\n+        Assert.assertEquals(\"file://localhost/c:/WINDOWS/clock.avi\", URIUtils.resolve(this.baseURI, \"file://localhost/c:/WINDOWS/clock.avi\").toString());\n+        Assert.assertEquals(\"file:///c:/WINDOWS/clock.avi\", URIUtils.resolve(this.baseURI, \"file:///c:/WINDOWS/clock.avi\").toString());\n+        Assert.assertEquals(\"file://hostname/path/to/the%20file.txt\", URIUtils.resolve(this.baseURI, \"file://hostname/path/to/the%20file.txt\").toString());\n+        Assert.assertEquals(\"file:///c:/path/to/the%20file.txt\", URIUtils.resolve(this.baseURI, \"file:///c:/path/to/the%20file.txt\").toString());\n+        Assert.assertEquals(\"urn:issn:1535-3613\", URIUtils.resolve(this.baseURI, \"urn:issn:1535-3613\").toString());\n+        Assert.assertEquals(\"mailto:user@example.com\", URIUtils.resolve(this.baseURI, \"mailto:user@example.com\").toString());\n+        Assert.assertEquals(\"ftp://example.org/resource.txt\", URIUtils.resolve(this.baseURI, \"ftp://example.org/resource.txt\").toString());\n+    }\n+\n     @Test\n     public void testExtractHost() throws Exception {\n         Assert.assertEquals(new HttpHost(\"localhost\"),",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/9cc7c1acecb5ce7af867718f0d1933b3bdf3c3f1/httpclient/src/test/java/org/apache/http/client/utils/TestURIUtils.java",
                "sha": "6050061a6808c7a90fb8e7b409253a537c9d87a2",
                "status": "modified"
            }
        ],
        "message": "HTTPCLIENT-1440: 'file' scheme in redirect location URI causes NPE.\nContributed by James Leigh <james at 3roundstones dot com>\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1546315 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/037b915bd094e1c1c17b442cda92e822e90c0f59",
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestURIUtils.java"
        ]
    },
    "httpcomponents-client_b40661e": {
        "bug_id": "httpcomponents-client_b40661e",
        "commit": "https://github.com/apache/httpcomponents-client/commit/b40661e45ec12fb1c7ef52b1891a9b677331f48d",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/b40661e45ec12fb1c7ef52b1891a9b677331f48d/httpclient/src/main/java/org/apache/http/client/utils/URIUtils.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/main/java/org/apache/http/client/utils/URIUtils.java?ref=b40661e45ec12fb1c7ef52b1891a9b677331f48d",
                "deletions": 1,
                "filename": "httpclient/src/main/java/org/apache/http/client/utils/URIUtils.java",
                "patch": "@@ -366,7 +366,7 @@ public static HttpHost extractHost(final URI uri) {\n                 }\n             }\n             final String scheme = uri.getScheme();\n-            if (host != null) {\n+            if (!TextUtils.isBlank(host)) {\n                 target = new HttpHost(host, port, scheme);\n             }\n         }",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/b40661e45ec12fb1c7ef52b1891a9b677331f48d/httpclient/src/main/java/org/apache/http/client/utils/URIUtils.java",
                "sha": "d485cfe1051ac45a48ca8ba4c19770a2f47b4351",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/b40661e45ec12fb1c7ef52b1891a9b677331f48d/httpclient/src/test/java/org/apache/http/client/utils/TestURIUtils.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/test/java/org/apache/http/client/utils/TestURIUtils.java?ref=b40661e45ec12fb1c7ef52b1891a9b677331f48d",
                "deletions": 0,
                "filename": "httpclient/src/test/java/org/apache/http/client/utils/TestURIUtils.java",
                "patch": "@@ -229,6 +229,8 @@ public void testExtractHost() throws Exception {\n                 URIUtils.extractHost(new URI(\"http://localhost:8080;sessionid=stuff/abcd\")));\n         Assert.assertEquals(new HttpHost(\"localhost\",-1),\n                 URIUtils.extractHost(new URI(\"http://localhost:;sessionid=stuff/abcd\")));\n+        Assert.assertEquals(null,\n+                URIUtils.extractHost(new URI(\"http://:80/robots.txt\")));\n     }\n \n     @Test",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/b40661e45ec12fb1c7ef52b1891a9b677331f48d/httpclient/src/test/java/org/apache/http/client/utils/TestURIUtils.java",
                "sha": "a0fb7eb6198423cd663019b3f7c5b31bf5a46db8",
                "status": "modified"
            }
        ],
        "message": "HTTPCLIENT-1498: empty host in redirect location causes NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1591221 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/92b5d6d09d9705bc69b6ccb77de9df7cf97fb6b7",
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestURIUtils.java"
        ]
    },
    "httpcomponents-client_bb15e4d": {
        "bug_id": "httpcomponents-client_bb15e4d",
        "commit": "https://github.com/apache/httpcomponents-client/commit/bb15e4d9b3f473d108249716f399ed4a96eab53f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/bb15e4d9b3f473d108249716f399ed4a96eab53f/httpclient/src/main/java/org/apache/http/conn/ssl/SSLSocketFactory.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/main/java/org/apache/http/conn/ssl/SSLSocketFactory.java?ref=bb15e4d9b3f473d108249716f399ed4a96eab53f",
                "deletions": 1,
                "filename": "httpclient/src/main/java/org/apache/http/conn/ssl/SSLSocketFactory.java",
                "patch": "@@ -321,7 +321,7 @@ public Socket connectSocket(\n             remoteAddress = new InetSocketAddress(host, port);            \n         }\n         try {\n-            sock.connect(remoteAddress, connTimeout);\n+            sslsock.connect(remoteAddress, connTimeout);\n         } catch (SocketTimeoutException ex) {\n             throw new ConnectTimeoutException(\"Connect to \" + remoteAddress + \" timed out\");\n         }",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/bb15e4d9b3f473d108249716f399ed4a96eab53f/httpclient/src/main/java/org/apache/http/conn/ssl/SSLSocketFactory.java",
                "sha": "04cc0671bba75572ddfce90a68e3161dcbd00734",
                "status": "modified"
            }
        ],
        "message": "HTTPCLIENT-833: fixed possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@754998 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/72eedbe0ea507e86af66f202e6ae300979781420",
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestSSLSocketFactory.java"
        ]
    },
    "httpcomponents-client_bb902af": {
        "bug_id": "httpcomponents-client_bb902af",
        "commit": "https://github.com/apache/httpcomponents-client/commit/bb902afa4fb4b6575e500c965c31cabf82791ec1",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/bb902afa4fb4b6575e500c965c31cabf82791ec1/httpclient/src/main/java/org/apache/http/impl/auth/NTLMEngineImpl.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/main/java/org/apache/http/impl/auth/NTLMEngineImpl.java?ref=bb902afa4fb4b6575e500c965c31cabf82791ec1",
                "deletions": 7,
                "filename": "httpclient/src/main/java/org/apache/http/impl/auth/NTLMEngineImpl.java",
                "patch": "@@ -624,7 +624,7 @@ public CipherGen(final String domain, final String user, final String password,\n             final MD4 md4 = new MD4();\n             md4.update(unicodePassword);\n             return md4.getOutput();\n-        } catch (java.io.UnsupportedEncodingException e) {\n+        } catch (UnsupportedEncodingException e) {\n             throw new NTLMEngineException(\"Unicode not supported: \" + e.getMessage(), e);\n         }\n     }\n@@ -641,9 +641,11 @@ public CipherGen(final String domain, final String user, final String password,\n             final HMACMD5 hmacMD5 = new HMACMD5(ntlmHash);\n             // Upper case username, upper case domain!\n             hmacMD5.update(user.toUpperCase(Locale.US).getBytes(\"UnicodeLittleUnmarked\"));\n-            hmacMD5.update(domain.toUpperCase(Locale.US).getBytes(\"UnicodeLittleUnmarked\"));\n+            if (domain != null) {\n+                hmacMD5.update(domain.toUpperCase(Locale.US).getBytes(\"UnicodeLittleUnmarked\"));\n+            }\n             return hmacMD5.getOutput();\n-        } catch (java.io.UnsupportedEncodingException e) {\n+        } catch (UnsupportedEncodingException e) {\n             throw new NTLMEngineException(\"Unicode not supported! \" + e.getMessage(), e);\n         }\n     }\n@@ -660,9 +662,11 @@ public CipherGen(final String domain, final String user, final String password,\n             final HMACMD5 hmacMD5 = new HMACMD5(ntlmHash);\n             // Upper case username, mixed case target!!\n             hmacMD5.update(user.toUpperCase(Locale.US).getBytes(\"UnicodeLittleUnmarked\"));\n-            hmacMD5.update(domain.getBytes(\"UnicodeLittleUnmarked\"));\n+            if (domain != null) {\n+                hmacMD5.update(domain.getBytes(\"UnicodeLittleUnmarked\"));\n+            }\n             return hmacMD5.getOutput();\n-        } catch (java.io.UnsupportedEncodingException e) {\n+        } catch (UnsupportedEncodingException e) {\n             throw new NTLMEngineException(\"Unicode not supported! \" + e.getMessage(), e);\n         }\n     }\n@@ -981,7 +985,7 @@ String getResponse() {\n                 hostBytes = unqualifiedHost != null? unqualifiedHost.getBytes(\"ASCII\") : null;\n                 domainBytes = unqualifiedDomain != null ? unqualifiedDomain\n                         .toUpperCase(Locale.US).getBytes(\"ASCII\") : null;\n-            } catch (java.io.UnsupportedEncodingException e) {\n+            } catch (UnsupportedEncodingException e) {\n                 throw new NTLMEngineException(\"Unicode unsupported: \" + e.getMessage(), e);\n             }\n         }\n@@ -1104,7 +1108,7 @@ String getResponse() {\n                 if (bytes.length != 0) {\n                     try {\n                         target = new String(bytes, \"UnicodeLittleUnmarked\");\n-                    } catch (java.io.UnsupportedEncodingException e) {\n+                    } catch (UnsupportedEncodingException e) {\n                         throw new NTLMEngineException(e.getMessage(), e);\n                     }\n                 }",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/bb902afa4fb4b6575e500c965c31cabf82791ec1/httpclient/src/main/java/org/apache/http/impl/auth/NTLMEngineImpl.java",
                "sha": "b2fb4c9572ddbd9aff54fa60748425310d38f600",
                "status": "modified"
            },
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/bb902afa4fb4b6575e500c965c31cabf82791ec1/httpclient/src/test/java/org/apache/http/impl/client/integration/TestClientAuthenticationFakeNTLM.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/test/java/org/apache/http/impl/client/integration/TestClientAuthenticationFakeNTLM.java?ref=bb902afa4fb4b6575e500c965c31cabf82791ec1",
                "deletions": 6,
                "filename": "httpclient/src/test/java/org/apache/http/impl/client/integration/TestClientAuthenticationFakeNTLM.java",
                "patch": "@@ -99,7 +99,13 @@ public void testNTLMAuthenticationFailure() throws Exception {\n                 response.getStatusLine().getStatusCode());\n     }\n \n-    static class NtlmType2ResponseHandler implements HttpRequestHandler {\n+    static class NtlmType2MessageResponseHandler implements HttpRequestHandler {\n+\n+        private final String authenticateHeaderValue;\n+\n+        public NtlmType2MessageResponseHandler(final String type2Message) {\n+            this.authenticateHeaderValue = \"NTLM \" + type2Message;\n+        }\n \n         public void handle(\n                 final HttpRequest request,\n@@ -113,16 +119,42 @@ public void handle(\n             if (!request.containsHeader(HttpHeaders.AUTHORIZATION)) {\n                 response.setHeader(HttpHeaders.WWW_AUTHENTICATE, \"NTLM\");\n             } else {\n-                response.setHeader(HttpHeaders.WWW_AUTHENTICATE, \"NTLM TlRMTVNTUAACAA\" +\n-                        \"AADAAMADgAAAAzwoICLgEjRWfCicKrw43DrwAAAAAAAAAAAAAAAAAAAAAGAHAX\" +\n-                        \"AAAAD1MAZQByAHYAZQByAA==\");\n+                response.setHeader(HttpHeaders.WWW_AUTHENTICATE, authenticateHeaderValue);\n             }\n         }\n     }\n \n     @Test\n-    public void testNTLMType2() throws Exception {\n-        this.localServer.register(\"*\", new NtlmType2ResponseHandler());\n+    public void testNTLMv1Type2Message() throws Exception {\n+        this.localServer.register(\"*\", new NtlmType2MessageResponseHandler(\"TlRMTVNTUAACAA\" +\n+                \"AADAAMADgAAAAzggLiASNFZ4mrze8AAAAAAAAAAAAAAAAAAAAABgBwFwAAAA9T\" +\n+                \"AGUAcgB2AGUAcgA=\"));\n+        this.localServer.start();\n+\n+        final BasicCredentialsProvider credsProvider = new BasicCredentialsProvider();\n+        credsProvider.setCredentials(AuthScope.ANY,\n+                new NTCredentials(\"test\", \"test\", null, null));\n+\n+        this.httpclient = HttpClients.custom()\n+                .setDefaultCredentialsProvider(credsProvider)\n+                .build();\n+\n+        final HttpContext context = HttpClientContext.create();\n+\n+        final HttpHost targethost = getServerHttp();\n+        final HttpGet httpget = new HttpGet(\"/\");\n+\n+        final HttpResponse response = this.httpclient.execute(targethost, httpget, context);\n+        EntityUtils.consume(response.getEntity());\n+        Assert.assertEquals(HttpStatus.SC_UNAUTHORIZED,\n+                response.getStatusLine().getStatusCode());\n+    }\n+\n+    @Test\n+    public void testNTLMv2Type2Message() throws Exception {\n+        this.localServer.register(\"*\", new NtlmType2MessageResponseHandler(\"TlRMTVNTUAACAA\" +\n+                \"AADAAMADgAAAAzgoriASNFZ4mrze8AAAAAAAAAACQAJABEAAAABgBwFwAAAA9T\" +\n+                \"AGUAcgB2AGUAcgACAAwARABvAG0AYQBpAG4AAQAMAFMAZQByAHYAZQByAAAAAAA=\"));\n         this.localServer.start();\n \n         final BasicCredentialsProvider credsProvider = new BasicCredentialsProvider();",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/bb902afa4fb4b6575e500c965c31cabf82791ec1/httpclient/src/test/java/org/apache/http/impl/client/integration/TestClientAuthenticationFakeNTLM.java",
                "sha": "684b39bdc69152cf5bbfa44794492fce58a6274b",
                "status": "modified"
            }
        ],
        "message": "Follow up to HTTPCLIENT-1381: fixes another NPE\nContributed by Ricardo Pereira <thc202 at gmail.com>\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1500401 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/f17ef0ad1159c60933ba41adb927839f238d8fc3",
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestNTLMEngineImpl.java"
        ]
    },
    "httpcomponents-client_e8dbce5": {
        "bug_id": "httpcomponents-client_e8dbce5",
        "commit": "https://github.com/apache/httpcomponents-client/commit/e8dbce5f9be283e3f4b77a3a465e98850ef3ef91",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/httpcomponents-client/blob/e8dbce5f9be283e3f4b77a3a465e98850ef3ef91/httpclient/src/main/java/org/apache/http/client/protocol/ResponseProcessCookies.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-client/contents/httpclient/src/main/java/org/apache/http/client/protocol/ResponseProcessCookies.java?ref=e8dbce5f9be283e3f4b77a3a465e98850ef3ef91",
                "deletions": 3,
                "filename": "httpclient/src/main/java/org/apache/http/client/protocol/ResponseProcessCookies.java",
                "patch": "@@ -138,10 +138,12 @@ private static String formatCooke(final Cookie cookie) {\n         buf.append(cookie.getName());\n         buf.append(\"=\\\"\");\n         String v = cookie.getValue();\n-        if (v.length() > 100) {\n-            v = v.substring(0, 100) + \"...\";\n+        if (v != null) {\n+            if (v.length() > 100) {\n+                v = v.substring(0, 100) + \"...\";\n+            }\n+            buf.append(v);\n         }\n-        buf.append(v);\n         buf.append(\"\\\"\");\n         buf.append(\", version:\");\n         buf.append(Integer.toString(cookie.getVersion()));",
                "raw_url": "https://github.com/apache/httpcomponents-client/raw/e8dbce5f9be283e3f4b77a3a465e98850ef3ef91/httpclient/src/main/java/org/apache/http/client/protocol/ResponseProcessCookies.java",
                "sha": "5f3cfaba0bb66d355e402aaeb0be50ac890ae5b2",
                "status": "modified"
            }
        ],
        "message": "HTTPCLIENT-1544: Fixed NPE in ResponseProcessCookies when running with DEBUG priority\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1618328 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-client/commit/683bb070fdbfecec4521fe7efac7a8d03a3cc309",
        "repo": "httpcomponents-client",
        "unit_tests": [
            "TestResponseProcessCookies.java"
        ]
    }
}