[
    {
        "repo": "eagle",
        "message": "[MINOR] Fix Topology Check system config thrown NullPointerException bug\n\nWhen 'dataSourceConfig.system.enabled' is false, NullPointerException will thrown out\n\nAuthor: koone <luokun1028@126.com>\n\nCloses #892 from koone/fixbug.",
        "commit": "https://github.com/apache/eagle/commit/4e228a8ded607a9e77676e7f48463a02d1145022",
        "parent": "https://github.com/apache/eagle/commit/812002740cd6acea8c5e4b2f0e2267e47668aa10",
        "bug_id": "eagle_1",
        "file": [
            {
                "sha": "2d49c2ad4642ad38c3a9b479f8e3cd9b2b2cec56",
                "filename": "eagle-topology-check/eagle-topology-app/src/main/java/org/apache/eagle/topology/TopologyCheckApp.java",
                "blob_url": "https://github.com/apache/eagle/blob/4e228a8ded607a9e77676e7f48463a02d1145022/eagle-topology-check/eagle-topology-app/src/main/java/org/apache/eagle/topology/TopologyCheckApp.java",
                "raw_url": "https://github.com/apache/eagle/raw/4e228a8ded607a9e77676e7f48463a02d1145022/eagle-topology-check/eagle-topology-app/src/main/java/org/apache/eagle/topology/TopologyCheckApp.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-topology-check/eagle-topology-app/src/main/java/org/apache/eagle/topology/TopologyCheckApp.java?ref=4e228a8ded607a9e77676e7f48463a02d1145022",
                "patch": "@@ -73,7 +73,7 @@ public StormTopology execute(Config config, StormEnvironment environment) {\n         ).setNumTasks(topologyCheckAppConfig.dataExtractorConfig.numKafkaSinkBolt).shuffleGrouping(parseBoltName);\n \n         // system check data collector\n-        if (topologyCheckAppConfig.systemConfig.systemInstanceEnable) {\n+        if (null != topologyCheckAppConfig.systemConfig) {\n             topologyBuilder.setSpout(\n                 systemSpoutName,\n                 new KafkaSpoutProvider(SYSTEM_COLLECTOR_CONFIG_PREFIX).getSpout(config),",
                "deletions": 1
            },
            {
                "sha": "9a51db2df79a76b6bb1d3413c38a169bf0a2d6a0",
                "filename": "eagle-topology-check/eagle-topology-app/src/main/java/org/apache/eagle/topology/TopologyCheckAppConfig.java",
                "blob_url": "https://github.com/apache/eagle/blob/4e228a8ded607a9e77676e7f48463a02d1145022/eagle-topology-check/eagle-topology-app/src/main/java/org/apache/eagle/topology/TopologyCheckAppConfig.java",
                "raw_url": "https://github.com/apache/eagle/raw/4e228a8ded607a9e77676e7f48463a02d1145022/eagle-topology-check/eagle-topology-app/src/main/java/org/apache/eagle/topology/TopologyCheckAppConfig.java",
                "status": "modified",
                "changes": 2,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-topology-check/eagle-topology-app/src/main/java/org/apache/eagle/topology/TopologyCheckAppConfig.java?ref=4e228a8ded607a9e77676e7f48463a02d1145022",
                "patch": "@@ -123,7 +123,6 @@ private void init(Config config) {\n             systemConfig.systemInstanceKafkaSchemeCls = getOptionalConfig(\"dataSourceConfig.system.schemeCls\", null);\n             systemConfig.systemInstanceZkQuorum = getOptionalConfig(\"dataSourceConfig.system.zkConnection\", null);\n             systemConfig.systemInstanceSendBatchSize = config.getInt(\"dataSourceConfig.system.dataSendBatchSize\");\n-            systemConfig.systemInstanceEnable = config.getBoolean(\"dataSourceConfig.system.enabled\");\n         }\n     }\n \n@@ -161,7 +160,6 @@ private void init(Config config) {\n         public String systemInstanceZkQuorum;\n         public String systemInstanceKafkaSchemeCls;\n         public int systemInstanceSendBatchSize;\n-        public boolean systemInstanceEnable;\n     }\n \n     private String getOptionalConfig(String key, String defaultValue) {",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "eagle",
        "message": "[EAGLE-1008] java.lang.NullPointerException in JHFEventReaderBase.close\n\nhttps://issues.apache.org/jira/browse/EAGLE-1008\n\nAuthor: Zhao, Qingwen <qingwzhao@apache.org>\n\nCloses #919 from qingwen220/minor.",
        "commit": "https://github.com/apache/eagle/commit/3b66c0d3c710b7c64be7839c0246218edf806e8b",
        "parent": "https://github.com/apache/eagle/commit/cc5d23baed2a30bafc31bba713cc1dbffed86971",
        "bug_id": "eagle_2",
        "file": [
            {
                "sha": "cca6b1885e907082d80e40152a9a4f5dfc649f6d",
                "filename": "eagle-jpm/eagle-jpm-analyzer/src/main/java/org/apache/eagle/jpm/analyzer/mr/MRJobPerformanceAnalyzer.java",
                "blob_url": "https://github.com/apache/eagle/blob/3b66c0d3c710b7c64be7839c0246218edf806e8b/eagle-jpm/eagle-jpm-analyzer/src/main/java/org/apache/eagle/jpm/analyzer/mr/MRJobPerformanceAnalyzer.java",
                "raw_url": "https://github.com/apache/eagle/raw/3b66c0d3c710b7c64be7839c0246218edf806e8b/eagle-jpm/eagle-jpm-analyzer/src/main/java/org/apache/eagle/jpm/analyzer/mr/MRJobPerformanceAnalyzer.java",
                "status": "modified",
                "changes": 12,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-jpm/eagle-jpm-analyzer/src/main/java/org/apache/eagle/jpm/analyzer/mr/MRJobPerformanceAnalyzer.java?ref=3b66c0d3c710b7c64be7839c0246218edf806e8b",
                "patch": "@@ -61,14 +61,18 @@ public void analyze(T analyzerJobEntity) throws Exception {\n         Result result = new Result();\n \n         for (Evaluator evaluator : evaluators) {\n-            Result.EvaluatorResult evaluatorResult = evaluator.evaluate(analyzerJobEntity);\n-            if (evaluatorResult != null) {\n-                result.addEvaluatorResult(evaluator.getClass(), evaluatorResult);\n+            try {\n+                Result.EvaluatorResult evaluatorResult = evaluator.evaluate(analyzerJobEntity);\n+                if (evaluatorResult != null) {\n+                    result.addEvaluatorResult(evaluator.getClass(), evaluatorResult);\n+                }\n+            } catch (Throwable e) {\n+                LOG.error(\"evaluator {} fails to analyse job {}\", evaluator, analyzerJobEntity.getJobId(), e);\n             }\n         }\n \n         if (alertDeduplicator.dedup(analyzerJobEntity, result)) {\n-            LOG.info(\"skip publish job {} alert because it is duplicated\", analyzerJobEntity.getJobDefId());\n+            LOG.info(\"skip publish job {} alert because it is duplicated\", analyzerJobEntity.getJobId());\n             return;\n         }\n ",
                "deletions": 4
            },
            {
                "sha": "4e2726b13cdfe4feab138f46bc04bbd66fd6a797",
                "filename": "eagle-jpm/eagle-jpm-analyzer/src/main/java/org/apache/eagle/jpm/analyzer/mr/suggestion/JobSuggestionEvaluator.java",
                "blob_url": "https://github.com/apache/eagle/blob/3b66c0d3c710b7c64be7839c0246218edf806e8b/eagle-jpm/eagle-jpm-analyzer/src/main/java/org/apache/eagle/jpm/analyzer/mr/suggestion/JobSuggestionEvaluator.java",
                "raw_url": "https://github.com/apache/eagle/raw/3b66c0d3c710b7c64be7839c0246218edf806e8b/eagle-jpm/eagle-jpm-analyzer/src/main/java/org/apache/eagle/jpm/analyzer/mr/suggestion/JobSuggestionEvaluator.java",
                "status": "modified",
                "changes": 12,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-jpm/eagle-jpm-analyzer/src/main/java/org/apache/eagle/jpm/analyzer/mr/suggestion/JobSuggestionEvaluator.java?ref=3b66c0d3c710b7c64be7839c0246218edf806e8b",
                "patch": "@@ -63,7 +63,6 @@ public JobSuggestionEvaluator(Config config) {\n             return null;\n         }\n \n-\n         if (analyzerEntity.getTotalCounters() == null) {\n             LOG.warn(\"Total counters of Job {} is null\", analyzerEntity.getJobId());\n             return null;\n@@ -73,13 +72,14 @@ public JobSuggestionEvaluator(Config config) {\n             return null;\n         }\n \n-        MapReduceJobSuggestionContext jobContext = new MapReduceJobSuggestionContext(analyzerEntity);\n-        if (jobContext.getNumMaps() == 0) {\n-            return null;\n-        }\n-\n         try {\n             Result.EvaluatorResult result = new Result.EvaluatorResult();\n+\n+            MapReduceJobSuggestionContext jobContext = new MapReduceJobSuggestionContext(analyzerEntity);\n+            if (jobContext.getNumMaps() == 0) {\n+                return null;\n+            }\n+\n             for (Processor processor : loadProcessors(jobContext)) {\n                 Result.ProcessorResult processorResult = processor.process(analyzerEntity);\n                 if (processorResult != null) {",
                "deletions": 6
            },
            {
                "sha": "e337c1364129bf95289bca95073b5d8f4eeb6687",
                "filename": "eagle-jpm/eagle-jpm-util/src/main/java/org/apache/eagle/jpm/util/jobcounter/JobCounters.java",
                "blob_url": "https://github.com/apache/eagle/blob/3b66c0d3c710b7c64be7839c0246218edf806e8b/eagle-jpm/eagle-jpm-util/src/main/java/org/apache/eagle/jpm/util/jobcounter/JobCounters.java",
                "raw_url": "https://github.com/apache/eagle/raw/3b66c0d3c710b7c64be7839c0246218edf806e8b/eagle-jpm/eagle-jpm-util/src/main/java/org/apache/eagle/jpm/util/jobcounter/JobCounters.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-jpm/eagle-jpm-util/src/main/java/org/apache/eagle/jpm/util/jobcounter/JobCounters.java?ref=3b66c0d3c710b7c64be7839c0246218edf806e8b",
                "patch": "@@ -48,7 +48,8 @@ public void clear() {\n     }\n \n     public Long getCounterValue(CounterName counterName) {\n-        if (counters.get(counterName.group.name).containsKey(counterName.name)) {\n+        if (counters.containsKey(counterName.group.name)\n+                && counters.get(counterName.group.name).containsKey(counterName.name)) {\n             return counters.get(counterName.group.name).get(counterName.name);\n         } else {\n             return 0L;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "eagle",
        "message": "[EAGLE-511] Fix NullPointerException for spark history job\n\nAuthor: pkuwm <ihuizhi.lu@gmail.com>\n\nCloses #404 from pkuwm/EAGLE-511.",
        "commit": "https://github.com/apache/eagle/commit/9488afc15e3d721f55aaaf10da46673d3ebb69a7",
        "parent": "https://github.com/apache/eagle/commit/3f7004f1cc939ba2e633e38248c322d2216e48a9",
        "bug_id": "eagle_3",
        "file": [
            {
                "sha": "04cc19bdf23b961a0918bf09dc3754a11dcc88c6",
                "filename": "eagle-core/eagle-app/eagle-app-base/src/main/java/org/apache/eagle/app/environment/impl/StormExecutionRuntime.java",
                "blob_url": "https://github.com/apache/eagle/blob/9488afc15e3d721f55aaaf10da46673d3ebb69a7/eagle-core/eagle-app/eagle-app-base/src/main/java/org/apache/eagle/app/environment/impl/StormExecutionRuntime.java",
                "raw_url": "https://github.com/apache/eagle/raw/9488afc15e3d721f55aaaf10da46673d3ebb69a7/eagle-core/eagle-app/eagle-app-base/src/main/java/org/apache/eagle/app/environment/impl/StormExecutionRuntime.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-app/eagle-app-base/src/main/java/org/apache/eagle/app/environment/impl/StormExecutionRuntime.java?ref=9488afc15e3d721f55aaaf10da46673d3ebb69a7",
                "patch": "@@ -98,9 +98,9 @@ public void start(Application<StormEnvironment, StormTopology> executor, com.typ\n         String topologyName = config.getString(\"appId\");\n         Preconditions.checkNotNull(topologyName,\"[appId] is required by null for \"+executor.getClass().getCanonicalName());\n         StormTopology topology = executor.execute(config, environment);\n-        LOG.info(\"Starting {} ({})\",topologyName,executor.getClass().getCanonicalName());\n+        LOG.info(\"Starting {} ({}), mode: {}\",topologyName,executor.getClass().getCanonicalName(), config.getString(\"mode\"));\n         Config conf = getStormConfig();\n-        if(config.getString(\"mode\").equals(ApplicationEntity.Mode.CLUSTER.name())){\n+        if(ApplicationEntity.Mode.CLUSTER.name().equalsIgnoreCase(config.getString(\"mode\"))){\n             String jarFile = config.hasPath(\"jarPath\") ? config.getString(\"jarPath\") : null;\n             if(jarFile == null){\n                 jarFile = DynamicJarPathFinder.findPath(executor.getClass());",
                "deletions": 2
            },
            {
                "sha": "22b715a1b5852566665df876468a370180d186ac",
                "filename": "eagle-jpm/eagle-jpm-entity/src/main/java/org/apache/eagle/jpm/spark/crawl/JHFSparkEventReader.java",
                "blob_url": "https://github.com/apache/eagle/blob/9488afc15e3d721f55aaaf10da46673d3ebb69a7/eagle-jpm/eagle-jpm-entity/src/main/java/org/apache/eagle/jpm/spark/crawl/JHFSparkEventReader.java",
                "raw_url": "https://github.com/apache/eagle/raw/9488afc15e3d721f55aaaf10da46673d3ebb69a7/eagle-jpm/eagle-jpm-entity/src/main/java/org/apache/eagle/jpm/spark/crawl/JHFSparkEventReader.java",
                "status": "modified",
                "changes": 28,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-jpm/eagle-jpm-entity/src/main/java/org/apache/eagle/jpm/spark/crawl/JHFSparkEventReader.java?ref=9488afc15e3d721f55aaaf10da46673d3ebb69a7",
                "patch": "@@ -23,13 +23,15 @@\n import org.apache.eagle.jpm.spark.entity.*;\n import org.apache.eagle.jpm.util.*;\n import org.apache.eagle.log.base.taggedlog.TaggedLogAPIEntity;\n+import org.apache.eagle.service.client.EagleServiceClientException;\n import org.apache.eagle.service.client.impl.EagleServiceBaseClient;\n import org.apache.eagle.service.client.impl.EagleServiceClientImpl;\n import org.json.simple.JSONArray;\n import org.json.simple.JSONObject;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.io.IOException;\n import java.util.*;\n \n public class JHFSparkEventReader {\n@@ -44,7 +46,7 @@\n     private Map<Integer, SparkJob> jobs;\n     private Map<String, SparkStage> stages;\n     private Map<Integer, Set<String>> jobStageMap;\n-    private Map<Integer, SparkTask> tasks;\n+    private Map<Long, SparkTask> tasks;\n     private EagleServiceClientImpl client;\n     private Map<String, Map<Integer, Boolean>> stageTaskStatusMap;\n \n@@ -61,7 +63,7 @@ public JHFSparkEventReader(Map<String, String> baseTags, SparkApplicationInfo in\n         jobs = new HashMap<Integer, SparkJob>();\n         stages = new HashMap<String, SparkStage>();\n         jobStageMap = new HashMap<Integer, Set<String>>();\n-        tasks = new HashMap<Integer, SparkTask>();\n+        tasks = new HashMap<Long, SparkTask>();\n         executors = new HashMap<String, SparkExecutor>();\n         stageTaskStatusMap = new HashMap<>();\n         conf = ConfigFactory.load();\n@@ -72,7 +74,7 @@ public SparkApp getApp() {\n         return this.app;\n     }\n \n-    public void read(JSONObject eventObj) throws Exception {\n+    public void read(JSONObject eventObj) {\n         String eventType = (String) eventObj.get(\"Event\");\n         if (eventType.equalsIgnoreCase(EventType.SparkListenerApplicationStart.toString())) {\n             handleAppStarted(eventObj);\n@@ -168,7 +170,7 @@ private void handleAppStarted(JSONObject event) {\n         this.lastEventTime = appStartTime;\n     }\n \n-    private void handleExecutorAdd(JSONObject event) throws Exception {\n+    private void handleExecutorAdd(JSONObject event) {\n         String executorID = (String) event.get(\"Executor ID\");\n         long executorAddTime = JSONUtils.getLong(event, \"Timestamp\", lastEventTime);\n         this.lastEventTime = executorAddTime;\n@@ -178,7 +180,7 @@ private void handleExecutorAdd(JSONObject event) throws Exception {\n \n     }\n \n-    private void handleBlockManagerAdd(JSONObject event) throws Exception {\n+    private void handleBlockManagerAdd(JSONObject event) {\n         long maxMemory = JSONUtils.getLong(event, \"Maximum Memory\");\n         long timestamp = JSONUtils.getLong(event, \"Timestamp\", lastEventTime);\n         this.lastEventTime = timestamp;\n@@ -197,7 +199,7 @@ private void handleTaskStart(JSONObject event) {\n \n     private void handleTaskEnd(JSONObject event) {\n         JSONObject taskInfo = JSONUtils.getJSONObject(event, \"Task Info\");\n-        int taskId = JSONUtils.getInt(taskInfo, \"Task ID\");\n+        long taskId = JSONUtils.getLong(taskInfo, \"Task ID\");\n         SparkTask task = tasks.get(taskId);\n         if (task == null) {\n             return;\n@@ -261,10 +263,10 @@ private SparkTask initializeTask(JSONObject event) {\n         task.getTags().put(SparkJobTagName.SPARK_STAGE_ATTEMPT_ID.toString(), Long.toString(JSONUtils.getLong(event, \"Stage Attempt ID\")));\n \n         JSONObject taskInfo = JSONUtils.getJSONObject(event, \"Task Info\");\n-        int taskId = JSONUtils.getInt(taskInfo, \"Task ID\");\n+        long taskId = JSONUtils.getLong(taskInfo, \"Task ID\");\n         task.setTaskId(taskId);\n \n-        task.getTags().put(SparkJobTagName.SPARK_TASK_INDEX.toString(), Integer.toString(JSONUtils.getInt(taskInfo, \"Index\")));\n+        task.getTags().put(SparkJobTagName.SPARK_TASK_INDEX.toString(), Long.toString(JSONUtils.getLong(taskInfo, \"Index\")));\n         task.getTags().put(SparkJobTagName.SPARK_TASK_ATTEMPT_ID.toString(), Integer.toString(JSONUtils.getInt(taskInfo, \"Attempt\")));\n         long launchTime = JSONUtils.getLong(taskInfo, \"Launch Time\", lastEventTime);\n         this.lastEventTime = launchTime;\n@@ -323,7 +325,7 @@ private void handleStageSubmit(JSONObject event) {\n         String key = this.generateStageKey(Integer.toString(stageId), Integer.toString(stageAttemptId));\n         stageTaskStatusMap.put(key, new HashMap<Integer, Boolean>());\n \n-        if (!stages.containsKey(this.generateStageKey(Integer.toString(stageId), Integer.toString(stageAttemptId)))) {\n+        if (!stages.containsKey(key)) {\n             //may be further attempt for one stage\n             String baseAttempt = this.generateStageKey(Integer.toString(stageId), \"0\");\n             if (stages.containsKey(baseAttempt)) {\n@@ -651,7 +653,7 @@ private void initiateStage(int jobId, int stageId, int stageAttemptId, String na\n     }\n \n \n-    private SparkExecutor initiateExecutor(String executorID, long startTime) throws Exception {\n+    private SparkExecutor initiateExecutor(String executorID, long startTime) {\n         if (!executors.containsKey(executorID)) {\n             SparkExecutor executor = new SparkExecutor();\n             executor.setTags(new HashMap<>(this.app.getTags()));\n@@ -703,9 +705,9 @@ private EagleServiceBaseClient initiateClient() {\n         return client;\n     }\n \n-    private void doFlush(List entities) throws Exception {\n-        LOG.info(\"start flushing entities of total number \" + entities.size());\n+    private void doFlush(List entities) throws IOException, EagleServiceClientException {\n         client.create(entities);\n-        LOG.info(\"finish flushing entities of total number \" + entities.size());\n+        int size = (entities == null ? 0 : entities.size());\n+        LOG.info(\"finish flushing entities of total number \" + size);\n     }\n }\n\\ No newline at end of file",
                "deletions": 13
            },
            {
                "sha": "02fc5cf0135fbbb96255aa82102663fbb648cfba",
                "filename": "eagle-jpm/eagle-jpm-entity/src/main/java/org/apache/eagle/jpm/spark/crawl/JHFSparkParser.java",
                "blob_url": "https://github.com/apache/eagle/blob/9488afc15e3d721f55aaaf10da46673d3ebb69a7/eagle-jpm/eagle-jpm-entity/src/main/java/org/apache/eagle/jpm/spark/crawl/JHFSparkParser.java",
                "raw_url": "https://github.com/apache/eagle/raw/9488afc15e3d721f55aaaf10da46673d3ebb69a7/eagle-jpm/eagle-jpm-entity/src/main/java/org/apache/eagle/jpm/spark/crawl/JHFSparkParser.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-jpm/eagle-jpm-entity/src/main/java/org/apache/eagle/jpm/spark/crawl/JHFSparkParser.java?ref=9488afc15e3d721f55aaaf10da46673d3ebb69a7",
                "patch": "@@ -50,7 +50,7 @@ public void parse(InputStream is) throws Exception {\n                     try {\n                         this.eventReader.read(eventObj);\n                     } catch (Exception e) {\n-                        logger.error(\"Fail to read eventObj. Exception: \" + e);\n+                        e.printStackTrace();\n                     }\n                 }\n             }",
                "deletions": 1
            },
            {
                "sha": "5d8f1d3dd3c1f01d9770365b4bcbe6e022f2e5bd",
                "filename": "eagle-jpm/eagle-jpm-entity/src/main/java/org/apache/eagle/jpm/spark/entity/SparkTask.java",
                "blob_url": "https://github.com/apache/eagle/blob/9488afc15e3d721f55aaaf10da46673d3ebb69a7/eagle-jpm/eagle-jpm-entity/src/main/java/org/apache/eagle/jpm/spark/entity/SparkTask.java",
                "raw_url": "https://github.com/apache/eagle/raw/9488afc15e3d721f55aaaf10da46673d3ebb69a7/eagle-jpm/eagle-jpm-entity/src/main/java/org/apache/eagle/jpm/spark/entity/SparkTask.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-jpm/eagle-jpm-entity/src/main/java/org/apache/eagle/jpm/spark/entity/SparkTask.java?ref=9488afc15e3d721f55aaaf10da46673d3ebb69a7",
                "patch": "@@ -34,7 +34,7 @@\n public class SparkTask extends TaggedLogAPIEntity {\n \n     @Column(\"a\")\n-    private int taskId;\n+    private long taskId;\n     @Column(\"b\")\n     private long launchTime;\n     @Column(\"c\")\n@@ -80,7 +80,7 @@\n     @Column(\"v\")\n     private boolean failed;\n \n-    public int getTaskId() {\n+    public long getTaskId() {\n         return taskId;\n     }\n \n@@ -177,7 +177,7 @@ public void setFailed(boolean failed) {\n         valueChanged(\"failed\");\n     }\n \n-    public void setTaskId(int taskId) {\n+    public void setTaskId(long taskId) {\n         this.taskId = taskId;\n         valueChanged(\"taskId\");\n     }",
                "deletions": 3
            },
            {
                "sha": "0fc74d7d7a30508507459601cffe54be1f191f06",
                "filename": "eagle-jpm/eagle-jpm-spark-history/src/main/java/org/apache/eagle/jpm/spark/history/SparkHistoryJobAppConfig.java",
                "blob_url": "https://github.com/apache/eagle/blob/9488afc15e3d721f55aaaf10da46673d3ebb69a7/eagle-jpm/eagle-jpm-spark-history/src/main/java/org/apache/eagle/jpm/spark/history/SparkHistoryJobAppConfig.java",
                "raw_url": "https://github.com/apache/eagle/raw/9488afc15e3d721f55aaaf10da46673d3ebb69a7/eagle-jpm/eagle-jpm-spark-history/src/main/java/org/apache/eagle/jpm/spark/history/SparkHistoryJobAppConfig.java",
                "status": "modified",
                "changes": 2,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-jpm/eagle-jpm-spark-history/src/main/java/org/apache/eagle/jpm/spark/history/SparkHistoryJobAppConfig.java?ref=9488afc15e3d721f55aaaf10da46673d3ebb69a7",
                "patch": "@@ -82,7 +82,6 @@ private void init(Config config) {\n         this.eagleInfo.host = config.getString(\"eagleProps.eagle.service.host\");\n         this.eagleInfo.port = config.getInt(\"eagleProps.eagle.service.port\");\n \n-        this.stormConfig.mode = config.getString(\"storm.mode\");\n         this.stormConfig.topologyName = config.getString(\"storm.name\");\n         this.stormConfig.workerNo = config.getInt(\"storm.worker.num\");\n         this.stormConfig.timeoutSec = config.getInt(\"storm.messageTimeoutSec\");\n@@ -118,7 +117,6 @@ private void init(Config config) {\n     }\n \n     public static class StormConfig implements Serializable {\n-        public String mode;\n         public int workerNo;\n         public int timeoutSec;\n         public String topologyName;",
                "deletions": 2
            },
            {
                "sha": "58dd5525b5f2dd71b3d17da9dfcd21f3904adb76",
                "filename": "eagle-jpm/eagle-jpm-spark-history/src/main/resources/application.conf",
                "blob_url": "https://github.com/apache/eagle/blob/9488afc15e3d721f55aaaf10da46673d3ebb69a7/eagle-jpm/eagle-jpm-spark-history/src/main/resources/application.conf",
                "raw_url": "https://github.com/apache/eagle/raw/9488afc15e3d721f55aaaf10da46673d3ebb69a7/eagle-jpm/eagle-jpm-spark-history/src/main/resources/application.conf",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-jpm/eagle-jpm-spark-history/src/main/resources/application.conf?ref=9488afc15e3d721f55aaaf10da46673d3ebb69a7",
                "patch": "@@ -46,7 +46,6 @@\n   },\n   \"storm\":{\n     worker.num: 2,\n-    \"mode\": \"local\",\n     \"name\":\"sparkHistoryJob\",\n     \"messageTimeoutSec\": 3000,\n     \"pendingSpout\": 1000,\n@@ -75,5 +74,5 @@\n     }\n   },\n   \"appId\": \"sparkHistoryJob\",\n-  \"mode\": \"LOCAL\"\n+  \"mode\": \"CLUSTER\"\n }\n\\ No newline at end of file",
                "deletions": 2
            },
            {
                "sha": "8a12cc54d3efba75113f1cf5a4e8f49c18756009",
                "filename": "eagle-jpm/eagle-jpm-util/src/main/java/org/apache/eagle/jpm/util/JSONUtils.java",
                "blob_url": "https://github.com/apache/eagle/blob/9488afc15e3d721f55aaaf10da46673d3ebb69a7/eagle-jpm/eagle-jpm-util/src/main/java/org/apache/eagle/jpm/util/JSONUtils.java",
                "raw_url": "https://github.com/apache/eagle/raw/9488afc15e3d721f55aaaf10da46673d3ebb69a7/eagle-jpm/eagle-jpm-util/src/main/java/org/apache/eagle/jpm/util/JSONUtils.java",
                "status": "modified",
                "changes": 15,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-jpm/eagle-jpm-util/src/main/java/org/apache/eagle/jpm/util/JSONUtils.java?ref=9488afc15e3d721f55aaaf10da46673d3ebb69a7",
                "patch": "@@ -30,23 +30,24 @@ public static String getString(JSONObject obj, String field) {\n         }\n \n         try {\n-            return obj.get(field).toString();\n+            return (String) obj.get(field);\n         } catch (JSONException e) {\n             e.printStackTrace();\n             return null;\n         }\n     }\n \n-    public static int getInt(JSONObject obj, String field) {\n+    public static int getInt(JSONObject obj, String field) throws JSONException {\n         if (obj == null || StringUtils.isEmpty(field)) {\n             return 0;\n         }\n-\n+        Object object = obj.get(field);\n         try {\n-            return (int) obj.get(field);\n-        } catch (JSONException e) {\n-            e.printStackTrace();\n-            return 0;\n+            return object instanceof Number ? ((Number) object).intValue()\n+                    : Integer.parseInt((String) object);\n+        } catch (Exception e) {\n+            throw new JSONException(\"JSONObject[\" + field\n+                    + \"] is not an int.\");\n         }\n     }\n ",
                "deletions": 7
            }
        ]
    },
    {
        "repo": "eagle",
        "message": "EAGLE-641: Publishment reload may introduce NPE\n\nThe publishment initialization may have problem which will cause reload NPE.\n\nAuthor: Li, Garrett\nReviewer: ralphsu\n\nThis closes #534",
        "commit": "https://github.com/apache/eagle/commit/44259aeca48554b9ee60d127cbc4d39649067943",
        "parent": "https://github.com/apache/eagle/commit/c45ac6d57a29cecde179476b93ca53fd2ef89cc1",
        "bug_id": "eagle_4",
        "file": [
            {
                "sha": "e9c0c7074b7e40aa6fb76e578989989fa264f2fd",
                "filename": "eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/publisher/impl/AlertKafkaPublisher.java",
                "blob_url": "https://github.com/apache/eagle/blob/44259aeca48554b9ee60d127cbc4d39649067943/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/publisher/impl/AlertKafkaPublisher.java",
                "raw_url": "https://github.com/apache/eagle/raw/44259aeca48554b9ee60d127cbc4d39649067943/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/publisher/impl/AlertKafkaPublisher.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/publisher/impl/AlertKafkaPublisher.java?ref=44259aeca48554b9ee60d127cbc4d39649067943",
                "patch": "@@ -75,7 +75,9 @@ public void update(String dedupIntervalMin, Map<String, String> pluginProperties\n         String newBrokerList = pluginProperties.get(PublishConstants.BROKER_LIST).trim();\n         String newTopic = pluginProperties.get(PublishConstants.TOPIC).trim();\n         if (!newBrokerList.equals(this.brokerList)) {\n-            producer.close();\n+            if (producer != null) {\n+                producer.close();\n+            }\n             brokerList = newBrokerList;\n             KafkaProducer newProducer = null;\n             try {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "eagle",
        "message": "EAGLE-609: Fix nullPointerException in DefaultDeduplicator\n\nhttps://issues.apache.org/jira/browse/EAGLE-609\n\nAuthor: Zhao, Qingwen <qingwzhao@apache.org>\n\nCloses #492 from qingwen220/EAGLE-609.",
        "commit": "https://github.com/apache/eagle/commit/279bc01cd6115281d44df7f81ac3b2be9f3b748f",
        "parent": "https://github.com/apache/eagle/commit/fc2407cd53438a31b4c1072ce7d5b08578b8e43d",
        "bug_id": "eagle_5",
        "file": [
            {
                "sha": "01882101c49c151f2ae01d63e4e732cbda597f89",
                "filename": "eagle-core/eagle-alert-parent/eagle-alert-app/src/main/resources/META-INF/providers/org.apache.eagle.alert.app.AlertUnitTopologyAppProvider.xml",
                "blob_url": "https://github.com/apache/eagle/blob/279bc01cd6115281d44df7f81ac3b2be9f3b748f/eagle-core/eagle-alert-parent/eagle-alert-app/src/main/resources/META-INF/providers/org.apache.eagle.alert.app.AlertUnitTopologyAppProvider.xml",
                "raw_url": "https://github.com/apache/eagle/raw/279bc01cd6115281d44df7f81ac3b2be9f3b748f/eagle-core/eagle-alert-parent/eagle-alert-app/src/main/resources/META-INF/providers/org.apache.eagle.alert.app.AlertUnitTopologyAppProvider.xml",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-alert-parent/eagle-alert-app/src/main/resources/META-INF/providers/org.apache.eagle.alert.app.AlertUnitTopologyAppProvider.xml?ref=279bc01cd6115281d44df7f81ac3b2be9f3b748f",
                "patch": "@@ -24,6 +24,12 @@\n     <viewPath>/apps/alert</viewPath>\n     <configuration>\n        <!-- alert topology sizing parameters -->\n+        <property>\n+            <name>topology.name</name>\n+            <displayName>topology.name</displayName>\n+            <value>alertUnitTopology_1</value>\n+            <description>alert topology name</description>\n+        </property>\n         <property>\n             <name>topology.numOfTotalWorkers</name>\n             <displayName>topology.numOfTotalWorkers</displayName>",
                "deletions": 0
            },
            {
                "sha": "ac99db3780293aab588a5f764816eb696737b118",
                "filename": "eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/publisher/impl/DefaultDeduplicator.java",
                "blob_url": "https://github.com/apache/eagle/blob/279bc01cd6115281d44df7f81ac3b2be9f3b748f/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/publisher/impl/DefaultDeduplicator.java",
                "raw_url": "https://github.com/apache/eagle/raw/279bc01cd6115281d44df7f81ac3b2be9f3b748f/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/publisher/impl/DefaultDeduplicator.java",
                "status": "modified",
                "changes": 21,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/publisher/impl/DefaultDeduplicator.java?ref=279bc01cd6115281d44df7f81ac3b2be9f3b748f",
                "patch": "@@ -116,19 +116,22 @@ public DefaultDeduplicator(String intervalMin, List<String> customDedupFields,\n                 continue;\n             }\n             String colName = streamDefinition.getColumns().get(i).getName();\n+            Object colValue = event.getData()[i];\n \n-            if (colName.equals(dedupStateField)) {\n-                stateFiledValue = event.getData()[i].toString();\n+            if (colName.equals(dedupStateField) && colValue != null) {\n+                stateFiledValue = colValue.toString();\n             }\n \n             // make all of the field as unique key if no custom dedup field provided\n-            if (customDedupFields == null || customDedupFields.size() <= 0) {\n-                customFieldValues.put(colName, event.getData()[i].toString());\n-            } else {\n-                for (String field : customDedupFields) {\n-                    if (colName.equals(field)) {\n-                        customFieldValues.put(field, event.getData()[i].toString());\n-                        break;\n+            if (colValue != null) {\n+                if (customDedupFields == null || customDedupFields.size() <= 0) {\n+                    customFieldValues.put(colName, colValue.toString());\n+                } else {\n+                    for (String field : customDedupFields) {\n+                        if (colName.equals(field)) {\n+                            customFieldValues.put(field, colValue.toString());\n+                            break;\n+                        }\n                     }\n                 }\n             }",
                "deletions": 9
            },
            {
                "sha": "1134cb54f07b091c29e42e43594ffa854e712f2b",
                "filename": "eagle-security/eagle-security-hdfs-auditlog/src/main/java/org/apache/eagle/security/auditlog/HdfsAuditLogParserBolt.java",
                "blob_url": "https://github.com/apache/eagle/blob/279bc01cd6115281d44df7f81ac3b2be9f3b748f/eagle-security/eagle-security-hdfs-auditlog/src/main/java/org/apache/eagle/security/auditlog/HdfsAuditLogParserBolt.java",
                "raw_url": "https://github.com/apache/eagle/raw/279bc01cd6115281d44df7f81ac3b2be9f3b748f/eagle-security/eagle-security-hdfs-auditlog/src/main/java/org/apache/eagle/security/auditlog/HdfsAuditLogParserBolt.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-security/eagle-security-hdfs-auditlog/src/main/java/org/apache/eagle/security/auditlog/HdfsAuditLogParserBolt.java?ref=279bc01cd6115281d44df7f81ac3b2be9f3b748f",
                "patch": "@@ -52,7 +52,7 @@ public void execute(Tuple input) {\n \n         HDFSAuditLogParser parser = new HDFSAuditLogParser();\n         HDFSAuditLogObject entity = null;\n-        try{\n+        try {\n             entity = parser.parse(logLine);\n             Map<String, Object> map = new TreeMap<String, Object>();\n             map.put(\"src\", entity.src);\n@@ -63,9 +63,9 @@ public void execute(Tuple input) {\n             map.put(\"user\", entity.user);\n             map.put(\"cmd\", entity.cmd);\n             collector.emit(Arrays.asList(map));\n-        }catch(Exception ex){\n-            LOG.error(\"Failing parse audit log message\", ex);\n-        }finally {\n+        } catch (Exception ex) {\n+            LOG.error(\"Failing parse audit log message {}\", logLine, ex);\n+        } finally {\n             collector.ack(input);\n         }\n     }",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "eagle",
        "message": "EAGLE-401: StreamRouterBolt and PublishBolt also have NPE\n\nmake all stream bolts avoid NPE exception, instead throw stream not found exception for easy troublesooting\n\nAuthor: ralphsu\nReviewer: ralphsu\n\nCloses #284",
        "commit": "https://github.com/apache/eagle/commit/994a1e584432e8bef5463be57faf955553bd4d01",
        "parent": "https://github.com/apache/eagle/commit/7e9dfaf3d5a51b52539ba5b298fbeb9d559ddd07",
        "bug_id": "eagle_6",
        "file": [
            {
                "sha": "88661d1682158e34101c1db5da80fec54d7ccf06",
                "filename": "eagle-core/eagle-alert-parent/eagle-alert/alert-common/src/main/java/org/apache/eagle/alert/utils/StreamIdConversion.java",
                "blob_url": "https://github.com/apache/eagle/blob/994a1e584432e8bef5463be57faf955553bd4d01/eagle-core/eagle-alert-parent/eagle-alert/alert-common/src/main/java/org/apache/eagle/alert/utils/StreamIdConversion.java",
                "raw_url": "https://github.com/apache/eagle/raw/994a1e584432e8bef5463be57faf955553bd4d01/eagle-core/eagle-alert-parent/eagle-alert/alert-common/src/main/java/org/apache/eagle/alert/utils/StreamIdConversion.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-alert-parent/eagle-alert/alert-common/src/main/java/org/apache/eagle/alert/utils/StreamIdConversion.java?ref=994a1e584432e8bef5463be57faf955553bd4d01",
                "patch": "@@ -17,8 +17,8 @@\n  * limitations under the License.\n  */\n public class StreamIdConversion {\n-    private final static String STREAM_ID_TEMPLATE = \"stream_%s_to_%s\";\n-    private final static String STREAM_ID_NUM_TEMPLATE = \"stream_%s\";\n+    public final static String STREAM_ID_TEMPLATE = \"stream_%s_to_%s\";\n+    public final static String STREAM_ID_NUM_TEMPLATE = \"stream_%s\";\n     public static String generateStreamIdBetween(String sourceId, String targetId){\n         return String.format(STREAM_ID_TEMPLATE,sourceId,targetId);\n     }",
                "deletions": 2
            },
            {
                "sha": "285ca139b924e30242913b231093e7b575573991",
                "filename": "eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/evaluator/PolicyHandlerContext.java",
                "blob_url": "https://github.com/apache/eagle/blob/994a1e584432e8bef5463be57faf955553bd4d01/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/evaluator/PolicyHandlerContext.java",
                "raw_url": "https://github.com/apache/eagle/raw/994a1e584432e8bef5463be57faf955553bd4d01/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/evaluator/PolicyHandlerContext.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/evaluator/PolicyHandlerContext.java?ref=994a1e584432e8bef5463be57faf955553bd4d01",
                "patch": "@@ -22,7 +22,7 @@\n  */\n public class PolicyHandlerContext {\n     private PolicyDefinition policyDefinition;\n-    private PolicyGroupEvaluator parentEvaluator;\n+    private PolicyGroupEvaluator policyEvaluator;\n     private MultiCountMetric policyCounter;\n     private String policyEvaluatorId;\n \n@@ -34,12 +34,12 @@ public void setPolicyDefinition(PolicyDefinition policyDefinition) {\n         this.policyDefinition = policyDefinition;\n     }\n \n-    public PolicyGroupEvaluator getParentEvaluator() {\n-        return parentEvaluator;\n+    public PolicyGroupEvaluator getPolicyEvaluator() {\n+        return policyEvaluator;\n     }\n \n-    public void setParentEvaluator(PolicyGroupEvaluator parentEvaluator) {\n-        this.parentEvaluator = parentEvaluator;\n+    public void setPolicyEvaluator(PolicyGroupEvaluator policyEvaluator) {\n+        this.policyEvaluator = policyEvaluator;\n     }\n \n     public void setPolicyCounter(MultiCountMetric metric) {",
                "deletions": 5
            },
            {
                "sha": "228b7fb66335121ed78fa487749970f0be995c4b",
                "filename": "eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/evaluator/impl/PolicyGroupEvaluatorImpl.java",
                "blob_url": "https://github.com/apache/eagle/blob/994a1e584432e8bef5463be57faf955553bd4d01/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/evaluator/impl/PolicyGroupEvaluatorImpl.java",
                "raw_url": "https://github.com/apache/eagle/raw/994a1e584432e8bef5463be57faf955553bd4d01/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/evaluator/impl/PolicyGroupEvaluatorImpl.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/evaluator/impl/PolicyGroupEvaluatorImpl.java?ref=994a1e584432e8bef5463be57faf955553bd4d01",
                "patch": "@@ -16,10 +16,6 @@\n  */\n package org.apache.eagle.alert.engine.evaluator.impl;\n \n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n import org.apache.eagle.alert.engine.AlertStreamCollector;\n import org.apache.eagle.alert.engine.StreamContext;\n import org.apache.eagle.alert.engine.coordinator.PolicyDefinition;\n@@ -32,6 +28,10 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n public class PolicyGroupEvaluatorImpl implements PolicyGroupEvaluator {\n     private static final long serialVersionUID = -5499413193675985288L;\n \n@@ -141,7 +141,7 @@ private void inplaceAdd(Map<String, PolicyDefinition> policies, Map<String, Poli\n                 PolicyHandlerContext context = new PolicyHandlerContext();\n                 context.setPolicyCounter(this.context.counter());\n                 context.setPolicyDefinition(policy);\n-                context.setParentEvaluator(this);\n+                context.setPolicyEvaluator(this);\n                 context.setPolicyEvaluatorId(policyEvaluatorId);\n                 handler.prepare(collector, context);\n                 handlers.put(policy.getName(), handler);",
                "deletions": 5
            },
            {
                "sha": "b9d1eb2a9d040704edb1aac1ead56672c067d857",
                "filename": "eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/evaluator/impl/SiddhiPolicyHandler.java",
                "blob_url": "https://github.com/apache/eagle/blob/994a1e584432e8bef5463be57faf955553bd4d01/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/evaluator/impl/SiddhiPolicyHandler.java",
                "raw_url": "https://github.com/apache/eagle/raw/994a1e584432e8bef5463be57faf955553bd4d01/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/evaluator/impl/SiddhiPolicyHandler.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/evaluator/impl/SiddhiPolicyHandler.java?ref=994a1e584432e8bef5463be57faf955553bd4d01",
                "patch": "@@ -85,8 +85,8 @@ public void receive(Event[] events) {\n                 event.setData(e.getData());\n                 event.setStreamId(outputStream);\n                 event.setPolicy(context.getPolicyDefinition());\n-                if (this.context.getParentEvaluator() != null) {\n-                    event.setCreatedBy(context.getParentEvaluator().getName());\n+                if (this.context.getPolicyEvaluator() != null) {\n+                    event.setCreatedBy(context.getPolicyEvaluator().getName());\n                 }\n                 event.setCreatedTime(System.currentTimeMillis());\n                 event.setSchema(definition);",
                "deletions": 2
            },
            {
                "sha": "9ad7529351004f31dc34245d84675c9a680d42dc",
                "filename": "eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/evaluator/nodata/NoDataPolicyHandler.java",
                "blob_url": "https://github.com/apache/eagle/blob/994a1e584432e8bef5463be57faf955553bd4d01/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/evaluator/nodata/NoDataPolicyHandler.java",
                "raw_url": "https://github.com/apache/eagle/raw/994a1e584432e8bef5463be57faf955553bd4d01/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/evaluator/nodata/NoDataPolicyHandler.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/evaluator/nodata/NoDataPolicyHandler.java?ref=994a1e584432e8bef5463be57faf955553bd4d01",
                "patch": "@@ -191,8 +191,8 @@ private AlertStreamEvent createAlertEvent(long timestamp, Object[] triggerEvent)\n         event.setData(triggerEvent);\n         event.setStreamId(policyDef.getOutputStreams().get(0));\n         event.setPolicy(context.getPolicyDefinition());\n-        if (this.context.getParentEvaluator() != null) {\n-            event.setCreatedBy(context.getParentEvaluator().getName());\n+        if (this.context.getPolicyEvaluator() != null) {\n+            event.setCreatedBy(context.getPolicyEvaluator().getName());\n         }\n         event.setCreatedTime(System.currentTimeMillis());\n         event.setSchema(sd);",
                "deletions": 2
            },
            {
                "sha": "fe896d17e9550ea363ca6b5e55c330c7a000ee0d",
                "filename": "eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/runner/AbstractStreamBolt.java",
                "blob_url": "https://github.com/apache/eagle/blob/994a1e584432e8bef5463be57faf955553bd4d01/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/runner/AbstractStreamBolt.java",
                "raw_url": "https://github.com/apache/eagle/raw/994a1e584432e8bef5463be57faf955553bd4d01/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/runner/AbstractStreamBolt.java",
                "status": "modified",
                "changes": 51,
                "additions": 48,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/runner/AbstractStreamBolt.java?ref=994a1e584432e8bef5463be57faf955553bd4d01",
                "patch": "@@ -16,10 +16,21 @@\n  */\n package org.apache.eagle.alert.engine.runner;\n \n+import java.io.IOException;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n+import backtype.storm.metric.api.MultiCountMetric;\n+import org.apache.eagle.alert.engine.StreamContext;\n+import org.apache.eagle.alert.engine.StreamContextImpl;\n import org.apache.eagle.alert.engine.coordinator.IMetadataChangeNotifyService;\n+import org.apache.eagle.alert.engine.coordinator.StreamDefinition;\n+import org.apache.eagle.alert.engine.coordinator.StreamDefinitionNotFoundException;\n+import org.apache.eagle.alert.engine.model.PartitionedEvent;\n+import org.apache.eagle.alert.engine.serialization.PartitionedEventSerializer;\n+import org.apache.eagle.alert.engine.serialization.SerializationMetadataProvider;\n+import org.apache.eagle.alert.engine.serialization.Serializers;\n import org.apache.eagle.alert.utils.AlertConstants;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -34,15 +45,22 @@\n import com.typesafe.config.Config;\n \n @SuppressWarnings({\"rawtypes\", \"serial\"})\n-public abstract class AbstractStreamBolt extends BaseRichBolt {\n+public abstract class AbstractStreamBolt extends BaseRichBolt implements SerializationMetadataProvider {\n     private static final Logger LOG = LoggerFactory.getLogger(AbstractStreamBolt.class);\n     private IMetadataChangeNotifyService changeNotifyService;\n     private Config config;\n     private List<String> outputStreamIds;\n     protected OutputCollector collector;\n     protected Map stormConf;\n \n-    public AbstractStreamBolt(IMetadataChangeNotifyService changeNotifyService, Config config){\n+    private String boltId;\n+    protected PartitionedEventSerializer serializer;\n+    protected volatile Map<String, StreamDefinition> sdf  = new HashMap<String, StreamDefinition>();\n+    protected volatile String specVersion = \"Not Initialized\";\n+    protected StreamContext streamContext;\n+\n+    public AbstractStreamBolt(String boltId, IMetadataChangeNotifyService changeNotifyService, Config config) {\n+        this.boltId = boltId;\n         this.changeNotifyService = changeNotifyService;\n         this.config = config;\n     }\n@@ -57,15 +75,29 @@ public void declareOutputStreams(List<String> outputStreamIds){\n \n     @Override\n     public void prepare(Map stormConf, TopologyContext context, OutputCollector collector) {\n-        this.stormConf = stormConf;\n         Preconditions.checkNotNull(this.changeNotifyService, \"IMetadataChangeNotifyService is not set yet\");\n+        this.stormConf = stormConf;\n         this.collector = collector;\n+        this.serializer = Serializers.newPartitionedEventSerializer(this);\n         internalPrepare(collector,this.changeNotifyService,this.config,context);\n     }\n \n+\n+    protected PartitionedEvent deserialize(Object object) throws IOException {\n+        // byte[] in higher priority\n+        if(object instanceof byte[]) {\n+            return serializer.deserialize((byte[]) object);\n+        } else if (object instanceof PartitionedEvent){\n+            return (PartitionedEvent) object;\n+        } else {\n+            throw new IllegalStateException(String.format(\"Unsupported event class '%s', expect byte array or PartitionedEvent!\", object == null ? null : object.getClass().getCanonicalName()));\n+        }\n+    }\n+\n     /**\n      * subclass should implement more initialization for example\n      * 1) register metadata change\n+     * 2) init stream context\n      * @param collector\n      * @param metadataManager\n      * @param config\n@@ -92,4 +124,17 @@ public void declareOutputFields(OutputFieldsDeclarer declarer) {\n             declarer.declare(new Fields(AlertConstants.FIELD_0));\n         }\n     }\n+\n+    @Override\n+    public StreamDefinition getStreamDefinition(String streamId) throws StreamDefinitionNotFoundException {\n+        if (sdf.containsKey(streamId)) {\n+            return sdf.get(streamId);\n+        } else {\n+            throw new StreamDefinitionNotFoundException(streamId, specVersion);\n+        }\n+    }\n+\n+    public String getBoltId() {\n+        return boltId;\n+    }\n }\n\\ No newline at end of file",
                "deletions": 3
            },
            {
                "sha": "683e571f15c5d789692a96a8a7b7d9da3b61dedd",
                "filename": "eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/runner/AlertBolt.java",
                "blob_url": "https://github.com/apache/eagle/blob/994a1e584432e8bef5463be57faf955553bd4d01/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/runner/AlertBolt.java",
                "raw_url": "https://github.com/apache/eagle/raw/994a1e584432e8bef5463be57faf955553bd4d01/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/runner/AlertBolt.java",
                "status": "modified",
                "changes": 36,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/runner/AlertBolt.java?ref=994a1e584432e8bef5463be57faf955553bd4d01",
                "patch": "@@ -31,6 +31,7 @@\n import org.apache.eagle.alert.engine.coordinator.*;\n import org.apache.eagle.alert.engine.evaluator.PolicyGroupEvaluator;\n import org.apache.eagle.alert.engine.evaluator.impl.AlertBoltOutputCollectorWrapper;\n+import org.apache.eagle.alert.engine.evaluator.impl.PolicyGroupEvaluatorImpl;\n import org.apache.eagle.alert.engine.model.PartitionedEvent;\n import org.apache.eagle.alert.engine.router.AlertBoltSpecListener;\n import org.apache.eagle.alert.engine.serialization.PartitionedEventSerializer;\n@@ -61,26 +62,12 @@\n     // mapping from policy name to PolicyDefinition\n     private volatile Map<String, PolicyDefinition> cachedPolicies = new HashMap<>(); // for one streamGroup, there are multiple policies\n \n-    private StreamContext streamContext;\n-    private volatile Map<String, StreamDefinition> sdf  = new HashMap<String, StreamDefinition>();\n-    private PartitionedEventSerializer serializer;\n-    private volatile String specVersion = \"Not Initialized\";\n \n-    public AlertBolt(String boltId, PolicyGroupEvaluator policyGroupEvaluator, Config config, IMetadataChangeNotifyService changeNotifyService){\n-        super(changeNotifyService, config);\n+    public AlertBolt(String boltId, Config config, IMetadataChangeNotifyService changeNotifyService){\n+        super(boltId, changeNotifyService, config);\n         this.boltId = boltId;\n-        this.policyGroupEvaluator = policyGroupEvaluator;\n-    }\n-\n-    PartitionedEvent deserialize(Object object) throws IOException {\n-        // byte[] in higher priority\n-        if(object instanceof byte[]) {\n-            return serializer.deserialize((byte[]) object);\n-        } else if (object instanceof PartitionedEvent){\n-            return (PartitionedEvent) object;\n-        } else {\n-            throw new IllegalStateException(String.format(\"Unsupported event class '%s', expect byte array or PartitionedEvent!\", object == null ? null : object.getClass().getCanonicalName()));\n-        }\n+        this.policyGroupEvaluator = new PolicyGroupEvaluatorImpl(boltId + \"-evaluator_stage1\"); // use bolt id as evaluatorId.\n+        // TODO next stage evaluator\n     }\n \n     @Override\n@@ -108,7 +95,6 @@ public void internalPrepare(OutputCollector collector, IMetadataChangeNotifyServ\n         // instantiate output lock object\n         outputLock = new Object();\n         streamContext = new StreamContextImpl(config,context.registerMetric(\"eagle.evaluator\",new MultiCountMetric(),60),context);\n-        serializer = Serializers.newPartitionedEventSerializer(this);\n         alertOutputCollector = new AlertBoltOutputCollectorWrapper(collector, outputLock,streamContext);\n         policyGroupEvaluator.init(streamContext, alertOutputCollector);\n         metadataChangeNotifyService.registerListener(this);\n@@ -149,16 +135,4 @@ public synchronized void onAlertBoltSpecChange(AlertBoltSpec spec, Map<String, S\n         specVersion = spec.getVersion();\n     }\n \n-    @Override\n-    public StreamDefinition getStreamDefinition(String streamId) throws StreamDefinitionNotFoundException {\n-        if (sdf.containsKey(streamId)) {\n-            return sdf.get(streamId);\n-        } else {\n-            throw new StreamDefinitionNotFoundException(streamId, specVersion);\n-        }\n-    }\n-\n-    public String getBoltId() {\n-        return boltId;\n-    }\n }\n\\ No newline at end of file",
                "deletions": 31
            },
            {
                "sha": "5f58536b709fe10d47e563dd48c3232107ffb42e",
                "filename": "eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/runner/AlertPublisherBolt.java",
                "blob_url": "https://github.com/apache/eagle/blob/994a1e584432e8bef5463be57faf955553bd4d01/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/runner/AlertPublisherBolt.java",
                "raw_url": "https://github.com/apache/eagle/raw/994a1e584432e8bef5463be57faf955553bd4d01/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/runner/AlertPublisherBolt.java",
                "status": "modified",
                "changes": 33,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/runner/AlertPublisherBolt.java?ref=994a1e584432e8bef5463be57faf955553bd4d01",
                "patch": "@@ -16,11 +16,13 @@\n  */\n package org.apache.eagle.alert.engine.runner;\n \n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n+import backtype.storm.metric.api.MultiCountMetric;\n+import backtype.storm.task.OutputCollector;\n+import backtype.storm.task.TopologyContext;\n+import backtype.storm.topology.OutputFieldsDeclarer;\n+import backtype.storm.tuple.Fields;\n+import backtype.storm.tuple.Tuple;\n+import com.typesafe.config.Config;\n import org.apache.eagle.alert.coordination.model.PublishSpec;\n import org.apache.eagle.alert.engine.StreamContextImpl;\n import org.apache.eagle.alert.engine.coordinator.IMetadataChangeNotifyService;\n@@ -30,29 +32,25 @@\n import org.apache.eagle.alert.engine.model.AlertStreamEvent;\n import org.apache.eagle.alert.engine.publisher.AlertPublishSpecListener;\n import org.apache.eagle.alert.engine.publisher.AlertPublisher;\n+import org.apache.eagle.alert.engine.publisher.impl.AlertPublisherImpl;\n import org.apache.eagle.alert.utils.AlertConstants;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import backtype.storm.metric.api.MultiCountMetric;\n-import backtype.storm.task.OutputCollector;\n-import backtype.storm.task.TopologyContext;\n-import backtype.storm.topology.OutputFieldsDeclarer;\n-import backtype.storm.tuple.Fields;\n-import backtype.storm.tuple.Tuple;\n-\n-import com.typesafe.config.Config;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n @SuppressWarnings(\"serial\")\n public class AlertPublisherBolt extends AbstractStreamBolt implements AlertPublishSpecListener {\n     private final static Logger LOG = LoggerFactory.getLogger(AlertPublisherBolt.class);\n     private final AlertPublisher alertPublisher;\n     private volatile Map<String, Publishment> cachedPublishments = new HashMap<>();\n-    private StreamContextImpl streamContext;\n \n-    public AlertPublisherBolt(AlertPublisher alertPublisher, Config config, IMetadataChangeNotifyService coordinatorService){\n-        super(coordinatorService, config);\n-        this.alertPublisher = alertPublisher;\n+    public AlertPublisherBolt(String alertPublisherName, Config config, IMetadataChangeNotifyService coordinatorService){\n+        super(alertPublisherName, coordinatorService, config);\n+        this.alertPublisher = new AlertPublisherImpl(alertPublisherName);\n     }\n \n     @Override\n@@ -109,5 +107,6 @@ public void onAlertPublishSpecChange(PublishSpec pubSpec, Map<String, StreamDefi\n \n         // switch\n         cachedPublishments = newPublishmentsMap;\n+        specVersion = pubSpec.getVersion();\n     }\n }\n\\ No newline at end of file",
                "deletions": 17
            },
            {
                "sha": "0c1d12ccd09f2c86490bed13d1997765b828471e",
                "filename": "eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/runner/StreamRouterBolt.java",
                "blob_url": "https://github.com/apache/eagle/blob/994a1e584432e8bef5463be57faf955553bd4d01/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/runner/StreamRouterBolt.java",
                "raw_url": "https://github.com/apache/eagle/raw/994a1e584432e8bef5463be57faf955553bd4d01/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/runner/StreamRouterBolt.java",
                "status": "modified",
                "changes": 60,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/runner/StreamRouterBolt.java?ref=994a1e584432e8bef5463be57faf955553bd4d01",
                "patch": "@@ -16,43 +16,27 @@\n  */\n package org.apache.eagle.alert.engine.runner;\n \n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-\n+import backtype.storm.metric.api.MultiCountMetric;\n+import backtype.storm.task.OutputCollector;\n+import backtype.storm.task.TopologyContext;\n+import backtype.storm.tuple.Tuple;\n+import com.typesafe.config.Config;\n import org.apache.commons.collections.CollectionUtils;\n import org.apache.eagle.alert.coordination.model.PolicyWorkerQueue;\n import org.apache.eagle.alert.coordination.model.RouterSpec;\n import org.apache.eagle.alert.coordination.model.StreamRouterSpec;\n-import org.apache.eagle.alert.engine.StreamContext;\n import org.apache.eagle.alert.engine.StreamContextImpl;\n-import org.apache.eagle.alert.engine.coordinator.IMetadataChangeNotifyService;\n-import org.apache.eagle.alert.engine.coordinator.MetadataType;\n-import org.apache.eagle.alert.engine.coordinator.StreamDefinition;\n-import org.apache.eagle.alert.engine.coordinator.StreamPartition;\n-import org.apache.eagle.alert.engine.coordinator.StreamSortSpec;\n-import org.apache.eagle.alert.engine.model.PartitionedEvent;\n+import org.apache.eagle.alert.engine.coordinator.*;\n import org.apache.eagle.alert.engine.router.StreamRouter;\n import org.apache.eagle.alert.engine.router.StreamRouterBoltSpecListener;\n import org.apache.eagle.alert.engine.router.impl.StreamRouterBoltOutputCollector;\n-import org.apache.eagle.alert.engine.serialization.PartitionedEventSerializer;\n+import org.apache.eagle.alert.engine.router.impl.StreamRouterImpl;\n import org.apache.eagle.alert.engine.serialization.SerializationMetadataProvider;\n-import org.apache.eagle.alert.engine.serialization.Serializers;\n import org.apache.eagle.alert.utils.AlertConstants;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import backtype.storm.metric.api.MultiCountMetric;\n-import backtype.storm.task.OutputCollector;\n-import backtype.storm.task.TopologyContext;\n-import backtype.storm.tuple.Tuple;\n-\n-import com.typesafe.config.Config;\n+import java.util.*;\n \n public class StreamRouterBolt extends AbstractStreamBolt implements StreamRouterBoltSpecListener, SerializationMetadataProvider{\n     private final static Logger LOG = LoggerFactory.getLogger(StreamRouterBolt.class);\n@@ -63,35 +47,22 @@\n     private volatile Map<StreamPartition, StreamSortSpec> cachedSSS = new HashMap<>();\n     // mapping from StreamPartition(streamId, groupbyspec) to StreamRouterSpec\n     private volatile Map<StreamPartition, StreamRouterSpec> cachedSRS = new HashMap<>();\n-    private volatile Map<String,StreamDefinition> sdf = new HashMap<>();\n-    private PartitionedEventSerializer serializer;\n \n-    public StreamRouterBolt(StreamRouter router, Config config, IMetadataChangeNotifyService changeNotifyService) {\n-        super(changeNotifyService, config);\n-        this.router = router;\n+    public StreamRouterBolt(String boltId, Config config, IMetadataChangeNotifyService changeNotifyService) {\n+        super(boltId, changeNotifyService, config);\n+        this.router = new StreamRouterImpl(boltId + \"-router\");\n     }\n \n-    private StreamContext streamContext;\n \n     @Override\n     public void internalPrepare(OutputCollector collector, IMetadataChangeNotifyService changeNotifyService, Config config, TopologyContext context) {\n         streamContext = new StreamContextImpl(config,context.registerMetric(\"eagle.router\",new MultiCountMetric(),60),context);\n-        serializer= Serializers.newPartitionedEventSerializer(this);\n-        routeCollector = new StreamRouterBoltOutputCollector(this.router.getName(),collector,this.getOutputStreamIds(),streamContext,serializer);\n+        routeCollector = new StreamRouterBoltOutputCollector(getBoltId(),collector,this.getOutputStreamIds(),streamContext,serializer);\n         router.prepare(streamContext, routeCollector);\n         changeNotifyService.registerListener(this);\n         changeNotifyService.init(config, MetadataType.STREAM_ROUTER_BOLT);\n     }\n \n-    PartitionedEvent deserialize(Object object) throws IOException {\n-        // byte[] in higher priority\n-        if(object instanceof byte[]) {\n-            return serializer.deserialize((byte[]) object);\n-        } else {\n-            return (PartitionedEvent) object;\n-        }\n-    }\n-\n     @Override\n     public void execute(Tuple input) {\n         try {\n@@ -184,6 +155,7 @@ public void onStreamRouteBoltSpecChange(RouterSpec spec, Map<String, StreamDefin\n         // switch cache\n         cachedSRS = newSRS;\n         sdf = sds;\n+        specVersion = spec.getVersion();\n     }\n \n     /**\n@@ -206,8 +178,8 @@ private void sanityCheck(RouterSpec spec){\n         }\n     }\n \n-    @Override\n-    public StreamDefinition getStreamDefinition(String streamId) {\n-        return this.sdf.get(streamId);\n+    public StreamRouter getStreamRouter() {\n+        return router;\n     }\n+\n }\n\\ No newline at end of file",
                "deletions": 44
            },
            {
                "sha": "87faf821e4020f2c380f53c4204d5b6ad4a0270b",
                "filename": "eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/runner/UnitTopologyRunner.java",
                "blob_url": "https://github.com/apache/eagle/blob/994a1e584432e8bef5463be57faf955553bd4d01/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/runner/UnitTopologyRunner.java",
                "raw_url": "https://github.com/apache/eagle/raw/994a1e584432e8bef5463be57faf955553bd4d01/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/runner/UnitTopologyRunner.java",
                "status": "modified",
                "changes": 37,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/runner/UnitTopologyRunner.java?ref=994a1e584432e8bef5463be57faf955553bd4d01",
                "patch": "@@ -19,30 +19,25 @@\n \n package org.apache.eagle.alert.engine.runner;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import org.apache.eagle.alert.engine.coordinator.IMetadataChangeNotifyService;\n-import org.apache.eagle.alert.engine.coordinator.impl.ZKMetadataChangeNotifyService;\n-import org.apache.eagle.alert.engine.evaluator.impl.PolicyGroupEvaluatorImpl;\n-import org.apache.eagle.alert.engine.publisher.impl.AlertPublisherImpl;\n-import org.apache.eagle.alert.engine.router.impl.StreamRouterImpl;\n-import org.apache.eagle.alert.engine.spout.CorrelationSpout;\n-import org.apache.eagle.alert.utils.AlertConstants;\n-import org.apache.eagle.alert.utils.StreamIdConversion;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n import backtype.storm.LocalCluster;\n import backtype.storm.StormSubmitter;\n import backtype.storm.generated.StormTopology;\n import backtype.storm.topology.BoltDeclarer;\n import backtype.storm.topology.TopologyBuilder;\n import backtype.storm.tuple.Fields;\n import backtype.storm.utils.Utils;\n-\n import com.typesafe.config.Config;\n import com.typesafe.config.ConfigRenderOptions;\n+import org.apache.eagle.alert.engine.coordinator.IMetadataChangeNotifyService;\n+import org.apache.eagle.alert.engine.coordinator.impl.ZKMetadataChangeNotifyService;\n+import org.apache.eagle.alert.engine.spout.CorrelationSpout;\n+import org.apache.eagle.alert.utils.AlertConstants;\n+import org.apache.eagle.alert.utils.StreamIdConversion;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n \n /**\n  * By default\n@@ -86,11 +81,8 @@ public StormTopology buildTopology(String topologyId,\n                               int numOfPublishTasks,\n                               Config config) {\n \n-        StreamRouterImpl[] routers = new StreamRouterImpl[numOfRouterBolts];\n         StreamRouterBolt[] routerBolts = new StreamRouterBolt[numOfRouterBolts];\n-        PolicyGroupEvaluatorImpl[] evaluators = new PolicyGroupEvaluatorImpl[numOfAlertBolts];\n         AlertBolt[] alertBolts = new AlertBolt[numOfAlertBolts];\n-        AlertPublisherImpl publisher;\n         AlertPublisherBolt publisherBolt;\n \n         TopologyBuilder builder = new TopologyBuilder();\n@@ -102,19 +94,16 @@ public StormTopology buildTopology(String topologyId,\n \n         // construct StreamRouterBolt objects\n         for(int i=0; i<numOfRouterBolts; i++){\n-            routers[i] = new StreamRouterImpl(streamRouterBoltNamePrefix + i);\n-            routerBolts[i] = new StreamRouterBolt(routers[i], config, getMetadataChangeNotifyService());\n+            routerBolts[i] = new StreamRouterBolt(streamRouterBoltNamePrefix + i, config, getMetadataChangeNotifyService());\n         }\n \n         // construct AlertBolt objects\n         for(int i=0; i<numOfAlertBolts; i++){\n-            evaluators[i] = new PolicyGroupEvaluatorImpl(alertBoltNamePrefix + i);\n-            alertBolts[i] = new AlertBolt(alertBoltNamePrefix+i, evaluators[i], config, getMetadataChangeNotifyService());\n+            alertBolts[i] = new AlertBolt(alertBoltNamePrefix+i, config, getMetadataChangeNotifyService());\n         }\n \n         // construct AlertPublishBolt object\n-        publisher = new AlertPublisherImpl(alertPublishBoltName);\n-        publisherBolt = new AlertPublisherBolt(publisher, config, getMetadataChangeNotifyService());\n+        publisherBolt = new AlertPublisherBolt(alertPublishBoltName, config, getMetadataChangeNotifyService());\n \n         // connect spout and router bolt, also define output streams for downstreaming alert bolt\n         for(int i=0; i<numOfRouterBolts; i++){",
                "deletions": 24
            },
            {
                "sha": "7dea16757e067bb90d6afd62c895ea7a8fe9fe20",
                "filename": "eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/test/java/org/apache/eagle/alert/engine/router/TestAlertBolt.java",
                "blob_url": "https://github.com/apache/eagle/blob/994a1e584432e8bef5463be57faf955553bd4d01/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/test/java/org/apache/eagle/alert/engine/router/TestAlertBolt.java",
                "raw_url": "https://github.com/apache/eagle/raw/994a1e584432e8bef5463be57faf955553bd4d01/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/test/java/org/apache/eagle/alert/engine/router/TestAlertBolt.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/test/java/org/apache/eagle/alert/engine/router/TestAlertBolt.java?ref=994a1e584432e8bef5463be57faf955553bd4d01",
                "patch": "@@ -167,7 +167,7 @@ private AlertBolt createAlertBolt(OutputCollector collector) {\n         Config config = ConfigFactory.load();\n         PolicyGroupEvaluator policyGroupEvaluator = new PolicyGroupEvaluatorImpl(\"testPolicyGroupEvaluatorImpl\");\n         TestStreamRouterBolt.MockChangeService mockChangeService = new TestStreamRouterBolt.MockChangeService();\n-        AlertBolt bolt = new AlertBolt(\"alertBolt1\", policyGroupEvaluator, config, mockChangeService);\n+        AlertBolt bolt = new AlertBolt(\"alertBolt1\", config, mockChangeService);\n         Map stormConf = new HashMap<>();\n         TopologyContext topologyContext = mock(TopologyContext.class);\n         when(topologyContext.registerMetric(any(String.class), any(MultiCountMetric.class), any(int.class))).thenReturn(new MultiCountMetric());",
                "deletions": 1
            },
            {
                "sha": "01f6de7ca43f1f130eeddb4d7136815f2ee82fa4",
                "filename": "eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/test/java/org/apache/eagle/alert/engine/router/TestAlertPublisherBolt.java",
                "blob_url": "https://github.com/apache/eagle/blob/994a1e584432e8bef5463be57faf955553bd4d01/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/test/java/org/apache/eagle/alert/engine/router/TestAlertPublisherBolt.java",
                "raw_url": "https://github.com/apache/eagle/raw/994a1e584432e8bef5463be57faf955553bd4d01/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/test/java/org/apache/eagle/alert/engine/router/TestAlertPublisherBolt.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/test/java/org/apache/eagle/alert/engine/router/TestAlertPublisherBolt.java?ref=994a1e584432e8bef5463be57faf955553bd4d01",
                "patch": "@@ -87,8 +87,7 @@ public void testMapComparator() {\n         comparator.compare();\n         Assert.assertTrue(comparator.getModified().size() == 1);\n \n-        AlertPublisher alertPublisher = new AlertPublisherImpl(\"alert-publisher-test\");\n-        AlertPublisherBolt publisherBolt = new AlertPublisherBolt(alertPublisher, null, null);\n+        AlertPublisherBolt publisherBolt = new AlertPublisherBolt(\"alert-publisher-test\", null, null);\n         publisherBolt.onAlertPublishSpecChange(spec1, null);\n         publisherBolt.onAlertPublishSpecChange(spec2, null);\n     }",
                "deletions": 2
            },
            {
                "sha": "13550e16fc977a1b946b4adf9195aa195cad1afb",
                "filename": "eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/test/java/org/apache/eagle/alert/engine/runner/TestStreamRouterBolt.java",
                "blob_url": "https://github.com/apache/eagle/blob/994a1e584432e8bef5463be57faf955553bd4d01/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/test/java/org/apache/eagle/alert/engine/runner/TestStreamRouterBolt.java",
                "raw_url": "https://github.com/apache/eagle/raw/994a1e584432e8bef5463be57faf955553bd4d01/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/test/java/org/apache/eagle/alert/engine/runner/TestStreamRouterBolt.java",
                "status": "modified",
                "changes": 31,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/test/java/org/apache/eagle/alert/engine/runner/TestStreamRouterBolt.java?ref=994a1e584432e8bef5463be57faf955553bd4d01",
                "patch": "@@ -42,6 +42,7 @@\n import org.apache.eagle.alert.engine.model.StreamEvent;\n import org.apache.eagle.alert.engine.router.impl.StreamRouterImpl;\n import org.apache.eagle.alert.utils.DateTimeUtil;\n+import org.apache.eagle.alert.utils.StreamIdConversion;\n import org.joda.time.Period;\n import org.junit.Assert;\n import org.junit.Test;\n@@ -77,9 +78,8 @@\n     @Test\n     public void testRouterWithSortAndRouteSpec() throws Exception{\n         Config config = ConfigFactory.load();\n-        StreamRouterImpl routerImpl = new StreamRouterImpl(\"testStreamRouterImpl\");\n         MockChangeService mockChangeService = new MockChangeService();\n-        StreamRouterBolt bolt = new StreamRouterBolt(routerImpl, config, mockChangeService);\n+        StreamRouterBolt routerBolt = new StreamRouterBolt(\"routerBolt1\", config, mockChangeService);\n \n         final Map<String,List<PartitionedEvent>> streamCollected = new HashMap<>();\n         final List<PartitionedEvent> orderCollected = new ArrayList<>();\n@@ -90,7 +90,7 @@ public void testRouterWithSortAndRouteSpec() throws Exception{\n             public List<Integer> emit(String streamId, Collection<Tuple> anchors, List<Object> tuple) {\n                 PartitionedEvent event;\n                 try {\n-                    event = bolt.deserialize(tuple.get(0));\n+                    event = routerBolt.deserialize(tuple.get(0));\n                 } catch (IOException e) {\n                     throw new RuntimeException(e);\n                 }\n@@ -120,7 +120,7 @@ public void reportError(Throwable error) {            }\n         Map stormConf = new HashMap<>();\n         TopologyContext topologyContext = mock(TopologyContext.class);\n         when(topologyContext.registerMetric(any(String.class), any(MultiCountMetric.class), any(int.class))).thenReturn(new MultiCountMetric());\n-        bolt.prepare(stormConf, topologyContext, collector);\n+        routerBolt.prepare(stormConf, topologyContext, collector);\n \n         String streamId = \"cpuUsageStream\";\n         // StreamPartition, groupby col1 for stream cpuUsageStream\n@@ -147,6 +147,7 @@ public void reportError(Throwable error) {            }\n         queue.setWorkers(Arrays.asList(new WorkSlot(\"testTopology\",\"alertBolt1\"), new WorkSlot(\"testTopology\",\"alertBolt2\")));\n         routerSpec.setTargetQueue(Collections.singletonList(queue));\n         boltSpec.addRouterSpec(routerSpec);\n+        boltSpec.setVersion(\"version1\");\n \n         // construct StreamDefinition\n         StreamDefinition schema = new StreamDefinition();\n@@ -158,8 +159,8 @@ public void reportError(Throwable error) {            }\n         Map<String, StreamDefinition> sds = new HashMap<>();\n         sds.put(schema.getStreamId(), schema);\n \n-        bolt.declareOutputStreams(Arrays.asList(\"alertBolt1\", \"alertBolt2\"));\n-        bolt.onStreamRouteBoltSpecChange(boltSpec, sds);\n+        routerBolt.declareOutputStreams(Arrays.asList(\"alertBolt1\", \"alertBolt2\"));\n+        routerBolt.onStreamRouteBoltSpecChange(boltSpec, sds);\n         GeneralTopologyContext context = mock(GeneralTopologyContext.class);\n         int taskId = 1;\n         when(context.getComponentId(taskId)).thenReturn(\"comp1\");\n@@ -185,7 +186,7 @@ public void reportError(Throwable error) {            }\n         pEvent.setEvent(event);\n         pEvent.setPartition(sp);\n         Tuple input = new TupleImpl(context, Collections.singletonList(pEvent), taskId, \"default\");\n-        bolt.execute(input);\n+        routerBolt.execute(input);\n \n         // construct another event with \"value2\"\n         event = new StreamEvent();\n@@ -197,7 +198,7 @@ public void reportError(Throwable error) {            }\n         pEvent.setPartition(sp);\n         pEvent.setEvent(event);\n         input = new TupleImpl(context, Collections.singletonList(pEvent), taskId, \"default\");\n-        bolt.execute(input);\n+        routerBolt.execute(input);\n \n         // construct another event with \"value3\"\n         event = new StreamEvent();\n@@ -209,7 +210,7 @@ public void reportError(Throwable error) {            }\n         pEvent.setPartition(sp);\n         pEvent.setEvent(event);\n         input = new TupleImpl(context, Collections.singletonList(pEvent), taskId, \"default\");\n-        bolt.execute(input);\n+        routerBolt.execute(input);\n \n         // construct another event with \"value4\"\n         event = new StreamEvent();\n@@ -221,7 +222,7 @@ public void reportError(Throwable error) {            }\n         pEvent.setPartition(sp);\n         pEvent.setEvent(event);\n         input = new TupleImpl(context, Collections.singletonList(pEvent), taskId, \"default\");\n-        bolt.execute(input);\n+        routerBolt.execute(input);\n \n         // construct another event with \"value5\", which will be thrown because two late\n         event = new StreamEvent();\n@@ -233,18 +234,20 @@ public void reportError(Throwable error) {            }\n         pEvent.setPartition(sp);\n         pEvent.setEvent(event);\n         input = new TupleImpl(context, Collections.singletonList(pEvent), taskId, \"default\");\n-        bolt.execute(input);\n+        routerBolt.execute(input);\n \n         Assert.assertEquals(\"Should finally collect two streams\",2,streamCollected.size());\n-        Assert.assertTrue(\"Should collect stream stream_testStreamRouterImpl_to_alertBolt1\",streamCollected.keySet().contains(\"stream_testStreamRouterImpl_to_alertBolt1\"));\n-        Assert.assertTrue(\"Should collect stream stream_testStreamRouterImpl_to_alertBolt2\",streamCollected.keySet().contains(\"stream_testStreamRouterImpl_to_alertBolt2\"));\n+        Assert.assertTrue(\"Should collect stream stream_routerBolt_to_alertBolt1\",streamCollected.keySet().contains(\n+                String.format(StreamIdConversion.generateStreamIdBetween(routerBolt.getBoltId(), \"alertBolt1\"))));\n+        Assert.assertTrue(\"Should collect stream stream_routerBolt_to_alertBolt2\",streamCollected.keySet().contains(\n+                String.format(StreamIdConversion.generateStreamIdBetween(routerBolt.getBoltId(), \"alertBolt2\"))));\n \n         Assert.assertEquals(\"Should finally collect 3 events\",3,orderCollected.size());\n         Assert.assertArrayEquals(\"Should sort 3 events in ASC order\",new String[]{\"value2\",\"value1\",\"value3\"},orderCollected.stream().map((d)->d.getData()[0]).toArray());\n \n         // The first 3 events are ticked automatically by window\n \n-        bolt.cleanup();\n+        routerBolt.cleanup();\n \n         // Close will flush all events in memory, so will receive the last event which is still in memory as window is not expired according to clock\n         // The 5th event will be thrown because too late and out of margin",
                "deletions": 14
            },
            {
                "sha": "1799fa8eebb09c27ef52f3f9014c2d0e81514c49",
                "filename": "eagle-core/eagle-alert-parent/eagle-alert/alert-metadata-parent/alert-metadata-service/src/main/java/org/apache/eagle/service/metadata/resource/MetadataResource.java",
                "blob_url": "https://github.com/apache/eagle/blob/994a1e584432e8bef5463be57faf955553bd4d01/eagle-core/eagle-alert-parent/eagle-alert/alert-metadata-parent/alert-metadata-service/src/main/java/org/apache/eagle/service/metadata/resource/MetadataResource.java",
                "raw_url": "https://github.com/apache/eagle/raw/994a1e584432e8bef5463be57faf955553bd4d01/eagle-core/eagle-alert-parent/eagle-alert/alert-metadata-parent/alert-metadata-service/src/main/java/org/apache/eagle/service/metadata/resource/MetadataResource.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-alert-parent/eagle-alert/alert-metadata-parent/alert-metadata-service/src/main/java/org/apache/eagle/service/metadata/resource/MetadataResource.java?ref=994a1e584432e8bef5463be57faf955553bd4d01",
                "patch": "@@ -54,6 +54,10 @@\n //    private IMetadataDao dao = MetadataDaoFactory.getInstance().getMetadataDao();\n     private final IMetadataDao dao;\n \n+    public MetadataResource(){\n+        this.dao = MetadataDaoFactory.getInstance().getMetadataDao();;\n+    }\n+\n     @Inject\n     public MetadataResource(IMetadataDao dao){\n         this.dao = dao;",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "eagle",
        "message": "EAGLE-394 : fix NPE and broken test\n\n1. avoid mismatch metadata caused serialize/deserialize NPE issue\n2. fix broken test in remote branch after merge\n\nAuthor: ralphsu\nReviewer: ralphsu\n\nCloses #273",
        "commit": "https://github.com/apache/eagle/commit/f1a93b1bbc29aadbda5f09ddf2622252e8893b0b",
        "parent": "https://github.com/apache/eagle/commit/fabfc25b9d30faff7b72f45c2ca39e392726eda8",
        "bug_id": "eagle_7",
        "file": [
            {
                "sha": "205905b33ecf4142ac3dba798ae6d30a0e7add14",
                "filename": "eagle-core/eagle-alert-parent/eagle-alert/alert-common/src/test/resources/streamDef.json",
                "blob_url": "https://github.com/apache/eagle/blob/f1a93b1bbc29aadbda5f09ddf2622252e8893b0b/eagle-core/eagle-alert-parent/eagle-alert/alert-common/src/test/resources/streamDef.json",
                "raw_url": "https://github.com/apache/eagle/raw/f1a93b1bbc29aadbda5f09ddf2622252e8893b0b/eagle-core/eagle-alert-parent/eagle-alert/alert-common/src/test/resources/streamDef.json",
                "status": "modified",
                "changes": 14,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-alert-parent/eagle-alert/alert-common/src/test/resources/streamDef.json?ref=f1a93b1bbc29aadbda5f09ddf2622252e8893b0b",
                "patch": "@@ -17,14 +17,14 @@\n \t\t\t\"defaultValue\": 0,\n \t\t\t\"required\":true\n \t\t},{\n-\t\t\t\"name\": \"metric\",\n-\t\t\t\"type\" : \"string\",\n-\t\t\t\"defaultValue\": \"perfmon_cpu\",\n+\t\t\t\"name\": \"floatField\",\n+\t\t\t\"type\" : \"float\",\n+\t\t\t\"defaultValue\": \"1.2\",\n \t\t\t\"required\": true\n \t\t},{\n-\t\t\t\"name\": \"pool\",\n-\t\t\t\"type\" : \"string\",\n-\t\t\t\"defaultValue\": \"raptor_general\",\n+\t\t\t\"name\": \"intField\",\n+\t\t\t\"type\" : \"int\",\n+\t\t\t\"defaultValue\": \"3\",\n \t\t\t\"required\":true\n \t\t},{\n \t\t\t\"name\": \"value\",\n@@ -33,7 +33,7 @@\n \t\t\t\"required\":true\n \t\t},\n \t\t{\n-\t\t\t\"name\": \"colo\",\n+\t\t\t\"name\": \"boolField\",\n \t\t\t\"type\" : \"bool\",\n \t\t\t\"defaultValue\": true,\n \t\t\t\"required\":true",
                "deletions": 7
            },
            {
                "sha": "8b8fef354579bd31e6439631d4eedbfc36b00b29",
                "filename": "eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/coordinator/StreamDefinitionNotFoundException.java",
                "blob_url": "https://github.com/apache/eagle/blob/f1a93b1bbc29aadbda5f09ddf2622252e8893b0b/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/coordinator/StreamDefinitionNotFoundException.java",
                "raw_url": "https://github.com/apache/eagle/raw/f1a93b1bbc29aadbda5f09ddf2622252e8893b0b/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/coordinator/StreamDefinitionNotFoundException.java",
                "status": "modified",
                "changes": 15,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/coordinator/StreamDefinitionNotFoundException.java?ref=f1a93b1bbc29aadbda5f09ddf2622252e8893b0b",
                "patch": "@@ -1,5 +1,7 @@\n package org.apache.eagle.alert.engine.coordinator;\n \n+import java.io.IOException;\n+\n /**\n  * Licensed to the Apache Software Foundation (ASF) under one or more\n  * contributor license agreements.  See the NOTICE file distributed with\n@@ -16,10 +18,17 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-public class StreamDefinitionNotFoundException extends Exception {\n+public class StreamDefinitionNotFoundException extends IOException {\n     private static final long serialVersionUID = 6027811718016485808L;\n \n-    public StreamDefinitionNotFoundException(String streamId){\n-        super(\"Stream definition not found: \"+streamId);\n+    public StreamDefinitionNotFoundException() {\n+    }\n+\n+    public StreamDefinitionNotFoundException(String streamId) {\n+        super(\"Stream definition not found: \" + streamId);\n+    }\n+\n+    public StreamDefinitionNotFoundException(String streamName, String specVersion) {\n+        super(String.format(\"Stream '%s' not found! Current spec version '%s'. Possibly metadata not loaded or metadata mismatch between upstream and alert bolts yet!\", streamName, specVersion));\n     }\n }\n\\ No newline at end of file",
                "deletions": 3
            },
            {
                "sha": "fec8ff642449d351d5feb419d28f088951a6be13",
                "filename": "eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/evaluator/PolicyStreamHandlers.java",
                "blob_url": "https://github.com/apache/eagle/blob/f1a93b1bbc29aadbda5f09ddf2622252e8893b0b/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/evaluator/PolicyStreamHandlers.java",
                "raw_url": "https://github.com/apache/eagle/raw/f1a93b1bbc29aadbda5f09ddf2622252e8893b0b/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/evaluator/PolicyStreamHandlers.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/evaluator/PolicyStreamHandlers.java?ref=f1a93b1bbc29aadbda5f09ddf2622252e8893b0b",
                "patch": "@@ -16,12 +16,12 @@\n  */\n package org.apache.eagle.alert.engine.evaluator;\n \n-import java.util.Map;\n-\n import org.apache.eagle.alert.engine.coordinator.StreamDefinition;\n import org.apache.eagle.alert.engine.evaluator.absence.AbsencePolicyHandler;\n-import org.apache.eagle.alert.engine.evaluator.nodata.NoDataPolicyHandler;\n import org.apache.eagle.alert.engine.evaluator.impl.SiddhiPolicyHandler;\n+import org.apache.eagle.alert.engine.evaluator.nodata.NoDataPolicyHandler;\n+\n+import java.util.Map;\n \n public class PolicyStreamHandlers {\n     public static final String SIDDHI_ENGINE =\"siddhi\";",
                "deletions": 3
            },
            {
                "sha": "5daa2366445789a501b71b14606b6d5fd23fd956",
                "filename": "eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/runner/AlertBolt.java",
                "blob_url": "https://github.com/apache/eagle/blob/f1a93b1bbc29aadbda5f09ddf2622252e8893b0b/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/runner/AlertBolt.java",
                "raw_url": "https://github.com/apache/eagle/raw/f1a93b1bbc29aadbda5f09ddf2622252e8893b0b/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/runner/AlertBolt.java",
                "status": "modified",
                "changes": 53,
                "additions": 30,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/runner/AlertBolt.java?ref=f1a93b1bbc29aadbda5f09ddf2622252e8893b0b",
                "patch": "@@ -16,20 +16,19 @@\n  */\n package org.apache.eagle.alert.engine.runner;\n \n-import java.io.IOException;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n+import backtype.storm.metric.api.MultiCountMetric;\n+import backtype.storm.task.OutputCollector;\n+import backtype.storm.task.TopologyContext;\n+import backtype.storm.topology.OutputFieldsDeclarer;\n+import backtype.storm.tuple.Fields;\n+import backtype.storm.tuple.Tuple;\n+import com.typesafe.config.Config;\n import org.apache.eagle.alert.coordination.model.AlertBoltSpec;\n import org.apache.eagle.alert.coordination.model.WorkSlot;\n import org.apache.eagle.alert.engine.AlertStreamCollector;\n import org.apache.eagle.alert.engine.StreamContext;\n import org.apache.eagle.alert.engine.StreamContextImpl;\n-import org.apache.eagle.alert.engine.coordinator.IMetadataChangeNotifyService;\n-import org.apache.eagle.alert.engine.coordinator.MetadataType;\n-import org.apache.eagle.alert.engine.coordinator.PolicyDefinition;\n-import org.apache.eagle.alert.engine.coordinator.StreamDefinition;\n+import org.apache.eagle.alert.engine.coordinator.*;\n import org.apache.eagle.alert.engine.evaluator.PolicyGroupEvaluator;\n import org.apache.eagle.alert.engine.evaluator.impl.AlertBoltOutputCollectorWrapper;\n import org.apache.eagle.alert.engine.model.PartitionedEvent;\n@@ -41,14 +40,10 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import backtype.storm.metric.api.MultiCountMetric;\n-import backtype.storm.task.OutputCollector;\n-import backtype.storm.task.TopologyContext;\n-import backtype.storm.topology.OutputFieldsDeclarer;\n-import backtype.storm.tuple.Fields;\n-import backtype.storm.tuple.Tuple;\n-\n-import com.typesafe.config.Config;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n /**\n  * Since 5/1/16.\n@@ -69,6 +64,7 @@\n     private StreamContext streamContext;\n     private volatile Map<String, StreamDefinition> sdf  = new HashMap<String, StreamDefinition>();\n     private PartitionedEventSerializer serializer;\n+    private volatile String specVersion = \"Not Initialized\";\n \n     public AlertBolt(String boltId, PolicyGroupEvaluator policyGroupEvaluator, Config config, IMetadataChangeNotifyService changeNotifyService){\n         super(changeNotifyService, config);\n@@ -80,8 +76,10 @@ PartitionedEvent deserialize(Object object) throws IOException {\n         // byte[] in higher priority\n         if(object instanceof byte[]) {\n             return serializer.deserialize((byte[]) object);\n-        } else {\n+        } else if (object instanceof PartitionedEvent){\n             return (PartitionedEvent) object;\n+        } else {\n+            throw new IllegalStateException(String.format(\"Unsupported event class '%s', expect byte array or PartitionedEvent!\", object == null ? null : object.getClass().getCanonicalName()));\n         }\n     }\n \n@@ -94,8 +92,8 @@ public void execute(Tuple input) {\n                 this.collector.ack(input);\n             }\n             this.streamContext.counter().scope(\"ack_count\").incr();\n-        }catch (Exception ex) {\n-            LOG.error(ex.getMessage(),ex);\n+        } catch (Exception ex) {\n+            LOG.error(ex.getMessage(), ex);\n             synchronized (outputLock) {\n                 this.streamContext.counter().scope(\"fail_count\").incr();\n                 this.collector.fail(input);\n@@ -131,7 +129,7 @@ public void cleanup() {\n     }\n \n     @Override\n-    public void onAlertBoltSpecChange(AlertBoltSpec spec, Map<String, StreamDefinition> sds) {\n+    public synchronized void onAlertBoltSpecChange(AlertBoltSpec spec, Map<String, StreamDefinition> sds) {\n         List<PolicyDefinition> newPolicies = spec.getBoltPoliciesMap().get(boltId);\n         if(newPolicies == null) {\n             LOG.info(\"no new policy with AlertBoltSpec {} for this bolt {}\", spec, boltId);\n@@ -148,10 +146,19 @@ public void onAlertBoltSpecChange(AlertBoltSpec spec, Map<String, StreamDefiniti\n         // switch\n         cachedPolicies = newPoliciesMap;\n         sdf = sds;\n+        specVersion = spec.getVersion();\n     }\n \n     @Override\n-    public StreamDefinition getStreamDefinition(String streamId) {\n-        return sdf.get(streamId);\n+    public StreamDefinition getStreamDefinition(String streamId) throws StreamDefinitionNotFoundException {\n+        if (sdf.containsKey(streamId)) {\n+            return sdf.get(streamId);\n+        } else {\n+            throw new StreamDefinitionNotFoundException(streamId, specVersion);\n+        }\n+    }\n+\n+    public String getBoltId() {\n+        return boltId;\n     }\n }\n\\ No newline at end of file",
                "deletions": 23
            },
            {
                "sha": "69bb695be32b41d63575772d111047873e3a4e85",
                "filename": "eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/serialization/SerializationMetadataProvider.java",
                "blob_url": "https://github.com/apache/eagle/blob/f1a93b1bbc29aadbda5f09ddf2622252e8893b0b/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/serialization/SerializationMetadataProvider.java",
                "raw_url": "https://github.com/apache/eagle/raw/f1a93b1bbc29aadbda5f09ddf2622252e8893b0b/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/serialization/SerializationMetadataProvider.java",
                "status": "modified",
                "changes": 8,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/serialization/SerializationMetadataProvider.java?ref=f1a93b1bbc29aadbda5f09ddf2622252e8893b0b",
                "patch": "@@ -17,6 +17,9 @@\n package org.apache.eagle.alert.engine.serialization;\n \n import org.apache.eagle.alert.engine.coordinator.StreamDefinition;\n+import org.apache.eagle.alert.engine.coordinator.StreamDefinitionNotFoundException;\n+\n+import java.io.IOException;\n \n /**\n  * Integration interface to provide stream definition for serializer\n@@ -26,5 +29,6 @@\n      * @param streamId\n      * @return StreamDefinition or null if not exist\n      */\n-    StreamDefinition getStreamDefinition(String streamId);\n-}\n\\ No newline at end of file\n+    StreamDefinition getStreamDefinition(String streamId) throws StreamDefinitionNotFoundException;\n+\n+}",
                "deletions": 2
            },
            {
                "sha": "3bd7b9bdcb6b5fe8f3e622a9a702663d946e6507",
                "filename": "eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/test/java/org/apache/eagle/alert/engine/router/TestAlertBolt.java",
                "blob_url": "https://github.com/apache/eagle/blob/f1a93b1bbc29aadbda5f09ddf2622252e8893b0b/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/test/java/org/apache/eagle/alert/engine/router/TestAlertBolt.java",
                "raw_url": "https://github.com/apache/eagle/raw/f1a93b1bbc29aadbda5f09ddf2622252e8893b0b/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/test/java/org/apache/eagle/alert/engine/router/TestAlertBolt.java",
                "status": "modified",
                "changes": 153,
                "additions": 120,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/test/java/org/apache/eagle/alert/engine/router/TestAlertBolt.java?ref=f1a93b1bbc29aadbda5f09ddf2622252e8893b0b",
                "patch": "@@ -16,21 +16,16 @@\n  */\n package org.apache.eagle.alert.engine.router;\n \n-import static org.mockito.Matchers.any;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.concurrent.Semaphore;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicInteger;\n-\n+import backtype.storm.metric.api.MultiCountMetric;\n+import backtype.storm.task.GeneralTopologyContext;\n+import backtype.storm.task.IOutputCollector;\n+import backtype.storm.task.OutputCollector;\n+import backtype.storm.task.TopologyContext;\n+import backtype.storm.tuple.Fields;\n+import backtype.storm.tuple.Tuple;\n+import backtype.storm.tuple.TupleImpl;\n+import com.typesafe.config.Config;\n+import com.typesafe.config.ConfigFactory;\n import org.apache.eagle.alert.coordination.model.AlertBoltSpec;\n import org.apache.eagle.alert.engine.coordinator.PolicyDefinition;\n import org.apache.eagle.alert.engine.coordinator.StreamColumn;\n@@ -44,21 +39,20 @@\n import org.apache.eagle.alert.engine.model.StreamEvent;\n import org.apache.eagle.alert.engine.runner.AlertBolt;\n import org.apache.eagle.alert.engine.runner.TestStreamRouterBolt;\n+import org.apache.eagle.alert.engine.serialization.impl.PartitionedEventSerializerImpl;\n import org.apache.eagle.alert.utils.DateTimeUtil;\n+import org.jetbrains.annotations.NotNull;\n import org.junit.Assert;\n import org.junit.Test;\n \n-import backtype.storm.metric.api.MultiCountMetric;\n-import backtype.storm.task.GeneralTopologyContext;\n-import backtype.storm.task.IOutputCollector;\n-import backtype.storm.task.OutputCollector;\n-import backtype.storm.task.TopologyContext;\n-import backtype.storm.tuple.Fields;\n-import backtype.storm.tuple.Tuple;\n-import backtype.storm.tuple.TupleImpl;\n+import java.util.*;\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n-import com.typesafe.config.Config;\n-import com.typesafe.config.ConfigFactory;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n /**\n  * Since 5/2/16.\n@@ -82,10 +76,6 @@\n     public void testAlertBolt() throws Exception{\n         final AtomicInteger alertCount = new AtomicInteger();\n         final Semaphore mutex = new Semaphore(0);\n-        Config config = ConfigFactory.load();\n-        PolicyGroupEvaluator policyGroupEvaluator = new PolicyGroupEvaluatorImpl(\"testPolicyGroupEvaluatorImpl\");\n-        TestStreamRouterBolt.MockChangeService mockChangeService = new TestStreamRouterBolt.MockChangeService();\n-        AlertBolt bolt = new AlertBolt(\"alertBolt1\", policyGroupEvaluator, config, mockChangeService);\n         OutputCollector collector = new OutputCollector(new IOutputCollector(){\n             int count = 0;\n             @Override\n@@ -106,10 +96,7 @@ public void fail(Tuple input) {            }\n             @Override\n             public void reportError(Throwable error) {            }\n         });\n-        Map stormConf = new HashMap<>();\n-        TopologyContext topologyContext = mock(TopologyContext.class);\n-        when(topologyContext.registerMetric(any(String.class), any(MultiCountMetric.class), any(int.class))).thenReturn(new MultiCountMetric());\n-        bolt.prepare(stormConf, topologyContext, collector);\n+        AlertBolt bolt = createAlertBolt(collector);\n \n         String streamId = \"cpuUsageStream\";\n \n@@ -174,4 +161,104 @@ public void reportError(Throwable error) {            }\n         Assert.assertEquals(2, alertCount.get());\n         bolt.cleanup();\n     }\n+\n+    @NotNull\n+    private AlertBolt createAlertBolt(OutputCollector collector) {\n+        Config config = ConfigFactory.load();\n+        PolicyGroupEvaluator policyGroupEvaluator = new PolicyGroupEvaluatorImpl(\"testPolicyGroupEvaluatorImpl\");\n+        TestStreamRouterBolt.MockChangeService mockChangeService = new TestStreamRouterBolt.MockChangeService();\n+        AlertBolt bolt = new AlertBolt(\"alertBolt1\", policyGroupEvaluator, config, mockChangeService);\n+        Map stormConf = new HashMap<>();\n+        TopologyContext topologyContext = mock(TopologyContext.class);\n+        when(topologyContext.registerMetric(any(String.class), any(MultiCountMetric.class), any(int.class))).thenReturn(new MultiCountMetric());\n+        bolt.prepare(stormConf, topologyContext, collector);\n+        return bolt;\n+    }\n+\n+    @Test\n+    public void testMetadataMismatch() throws Exception {\n+        AtomicInteger failedCount = new AtomicInteger();\n+        OutputCollector collector = new OutputCollector(new IOutputCollector(){\n+            int count = 0;\n+            @Override\n+            public List<Integer> emit(String streamId, Collection<Tuple> anchors, List<Object> tuple) {\n+                Assert.assertEquals(\"testAlertStream\", tuple.get(0));\n+                AlertStreamEvent event = (AlertStreamEvent) tuple.get(1);\n+                System.out.println(String.format(\"collector received: [streamId=[%s], tuple=[%s] \", streamId, tuple));\n+                return null;\n+            }\n+            @Override\n+            public void emitDirect(int taskId, String streamId, Collection<Tuple> anchors, List<Object> tuple) {            }\n+            @Override\n+            public void ack(Tuple input) {            }\n+            @Override\n+            public void fail(Tuple input) {      failedCount.incrementAndGet();      }\n+            @Override\n+            public void reportError(Throwable error) {            }\n+        });\n+        AlertBolt bolt = createAlertBolt(collector);\n+\n+        GeneralTopologyContext context = mock(GeneralTopologyContext.class);\n+        int taskId = 1;\n+        when(context.getComponentId(taskId)).thenReturn(\"comp1\");\n+        when(context.getComponentOutputFields(\"comp1\", \"default\")).thenReturn(new Fields(\"f0\"));\n+        // case 1: bolt prepared but metadata not initialized\n+        PartitionedEvent pe = new PartitionedEvent();\n+        pe.setPartitionKey(1);\n+        pe.setPartition(createPartition());\n+        StreamEvent streamEvent = new StreamEvent();\n+        streamEvent.setStreamId(\"test-stream\");\n+        streamEvent.setTimestamp(System.currentTimeMillis());\n+        pe.setEvent(streamEvent);\n+\n+        PartitionedEventSerializerImpl peSer = new PartitionedEventSerializerImpl(bolt);\n+        byte[] serializedEvent = peSer.serialize(pe);\n+        Tuple input = new TupleImpl(context, Collections.singletonList(serializedEvent), taskId, \"default\");\n+        bolt.execute(input);\n+\n+        Assert.assertEquals(1, failedCount.get());\n+        failedCount.set(0);\n+\n+        {\n+            // case 2: metadata loaded but empty\n+            bolt.onAlertBoltSpecChange(new AlertBoltSpec(), new HashMap());\n+\n+            bolt.execute(input);\n+            Assert.assertEquals(1, failedCount.get());\n+            failedCount.set(0);\n+        }\n+\n+        // case 3: metadata loaded but mismatched\n+        {\n+            Map<String, StreamDefinition> sds = new HashMap();\n+            StreamDefinition sdTest = new StreamDefinition();\n+            String streamId = \"pd-test\";\n+            sdTest.setStreamId(streamId);\n+            sds.put(sdTest.getStreamId(), sdTest);\n+            AlertBoltSpec boltSpecs = new AlertBoltSpec();\n+            boltSpecs.setVersion(\"specVersion-\"+System.currentTimeMillis());\n+            PolicyDefinition def = new PolicyDefinition();\n+            def.setName(\"policy-definition\");\n+            def.setInputStreams(Arrays.asList(streamId));\n+            PolicyDefinition.Definition definition = new PolicyDefinition.Definition();\n+            definition.setType(PolicyStreamHandlers.NO_DATA_ALERT_ENGINE);\n+            definition.setValue(\"PT0M,plain,1,host,host1\");\n+            def.setDefinition(definition);\n+\n+            boltSpecs.getBoltPoliciesMap().put(bolt.getBoltId(), Arrays.asList(def));\n+\n+            bolt.onAlertBoltSpecChange(boltSpecs, sds);\n+\n+            bolt.execute(input);\n+            Assert.assertEquals(1, failedCount.get());\n+        }\n+    }\n+\n+    @NotNull\n+    private StreamPartition createPartition() {\n+        StreamPartition sp = new StreamPartition();\n+        sp.setType(StreamPartition.Type.GROUPBY);\n+        return sp;\n+    }\n+\n }",
                "deletions": 33
            },
            {
                "sha": "3014b16fd0bf3a35552012abfb80d394b37d84be",
                "filename": "eagle-core/eagle-app/eagle-app-base/src/test/java/org/apache/eagle/app/TestApplicationTestSuite.java",
                "blob_url": "https://github.com/apache/eagle/blob/f1a93b1bbc29aadbda5f09ddf2622252e8893b0b/eagle-core/eagle-app/eagle-app-base/src/test/java/org/apache/eagle/app/TestApplicationTestSuite.java",
                "raw_url": "https://github.com/apache/eagle/raw/f1a93b1bbc29aadbda5f09ddf2622252e8893b0b/eagle-core/eagle-app/eagle-app-base/src/test/java/org/apache/eagle/app/TestApplicationTestSuite.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-app/eagle-app-base/src/test/java/org/apache/eagle/app/TestApplicationTestSuite.java?ref=f1a93b1bbc29aadbda5f09ddf2622252e8893b0b",
                "patch": "@@ -26,6 +26,7 @@\n import org.apache.eagle.metadata.model.SiteEntity;\n import org.apache.eagle.metadata.resource.SiteResource;\n import org.junit.Assert;\n+import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "eagle",
        "message": "[MINOR] Fix bug for NPE caused by Kafka2TupleMetadata.properties and debug log checking",
        "commit": "https://github.com/apache/eagle/commit/8734c37cbaeb00120eba9127f92f7d44f0f1736e",
        "parent": "https://github.com/apache/eagle/commit/7639ff2237352884c76e862fd14826cb053bb0fc",
        "bug_id": "eagle_8",
        "file": [
            {
                "sha": "eb9c18fb9f287623e2ff3789a825363d31b35fa5",
                "filename": "eagle-core/eagle-alert-parent/eagle-alert/alert-common/src/main/java/org/apache/eagle/alert/coordination/model/Kafka2TupleMetadata.java",
                "blob_url": "https://github.com/apache/eagle/blob/8734c37cbaeb00120eba9127f92f7d44f0f1736e/eagle-core/eagle-alert-parent/eagle-alert/alert-common/src/main/java/org/apache/eagle/alert/coordination/model/Kafka2TupleMetadata.java",
                "raw_url": "https://github.com/apache/eagle/raw/8734c37cbaeb00120eba9127f92f7d44f0f1736e/eagle-core/eagle-alert-parent/eagle-alert/alert-common/src/main/java/org/apache/eagle/alert/coordination/model/Kafka2TupleMetadata.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-alert-parent/eagle-alert/alert-common/src/main/java/org/apache/eagle/alert/coordination/model/Kafka2TupleMetadata.java?ref=8734c37cbaeb00120eba9127f92f7d44f0f1736e",
                "patch": "@@ -18,6 +18,8 @@\n \n import com.google.common.base.Objects;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+import java.util.HashMap;\n import java.util.Map;\n \n /**\n@@ -27,7 +29,7 @@\n public class Kafka2TupleMetadata {\n     private String type;\n     private String name; // data source name\n-    private Map<String, String> properties;\n+    private Map<String, String> properties = new HashMap<>();\n     private String topic;\n     private String schemeCls;\n ",
                "deletions": 1
            },
            {
                "sha": "bb29cea9bfa96eab6d70e9ddff353642f605cd21",
                "filename": "eagle-core/eagle-app/eagle-app-base/src/main/java/org/apache/eagle/app/messaging/MetricSchemaGenerator.java",
                "blob_url": "https://github.com/apache/eagle/blob/8734c37cbaeb00120eba9127f92f7d44f0f1736e/eagle-core/eagle-app/eagle-app-base/src/main/java/org/apache/eagle/app/messaging/MetricSchemaGenerator.java",
                "raw_url": "https://github.com/apache/eagle/raw/8734c37cbaeb00120eba9127f92f7d44f0f1736e/eagle-core/eagle-app/eagle-app-base/src/main/java/org/apache/eagle/app/messaging/MetricSchemaGenerator.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-app/eagle-app-base/src/main/java/org/apache/eagle/app/messaging/MetricSchemaGenerator.java?ref=8734c37cbaeb00120eba9127f92f7d44f0f1736e",
                "patch": "@@ -95,7 +95,7 @@ public void cleanup() {\n \n     private void createMetricSchemaEntity(String metricName, MetricDefinition metricDefinition) throws IOException, EagleServiceClientException {\n         MetricSchemaEntity schemaEntity = new MetricSchemaEntity();\n-        Map<String,String> schemaTags = new HashMap<>();\n+        Map<String, String> schemaTags = new HashMap<>();\n         schemaEntity.setTags(schemaTags);\n         schemaTags.put(MetricSchemaEntity.METRIC_NAME_TAG, metricName);\n         schemaTags.put(MetricSchemaEntity.METRIC_TYPE_TAG, metricDefinition.getMetricType());\n@@ -104,8 +104,10 @@ private void createMetricSchemaEntity(String metricName, MetricDefinition metric\n         schemaEntity.setMetricFields(Collections.singletonList(GENERIC_METRIC_VALUE_NAME));\n         schemaEntity.setModifiedTimestamp(System.currentTimeMillis());\n         GenericServiceAPIResponseEntity<String> response = this.client.create(Collections.singletonList(schemaEntity));\n-        if (response.isSuccess() && LOG.isDebugEnabled()) {\n-            LOG.debug(\"Created {}\", schemaEntity);\n+        if (response.isSuccess()) {\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Created {}\", schemaEntity);\n+            }\n         } else {\n             LOG.error(\"Failed to create {}\", schemaEntity, response.getException());\n             throw new IOException(\"Service error: \" + response.getException());",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "eagle",
        "message": "EAGLE-755: Publishment without streamIds update encountered NPE\n\nAuthor: Li, Garrett\nReviewer: ralphsu\n\nThis closes #629",
        "commit": "https://github.com/apache/eagle/commit/bd5f242307fa184b9e8f272a862d7468e4dedd23",
        "parent": "https://github.com/apache/eagle/commit/60206b5b5d0e078102d78c5b2f73da28afb49f38",
        "bug_id": "eagle_9",
        "file": [
            {
                "sha": "a4038e721c6a8e12d5ade4d54c57921e35629be8",
                "filename": "eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/publisher/impl/AlertPublisherImpl.java",
                "blob_url": "https://github.com/apache/eagle/blob/bd5f242307fa184b9e8f272a862d7468e4dedd23/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/publisher/impl/AlertPublisherImpl.java",
                "raw_url": "https://github.com/apache/eagle/raw/bd5f242307fa184b9e8f272a862d7468e4dedd23/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/publisher/impl/AlertPublisherImpl.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/publisher/impl/AlertPublisherImpl.java?ref=bd5f242307fa184b9e8f272a862d7468e4dedd23",
                "patch": "@@ -35,6 +35,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.common.base.Objects;\n import com.typesafe.config.Config;\n \n @SuppressWarnings(\"rawtypes\")\n@@ -167,7 +168,7 @@ public synchronized void onPublishChange(List<Publishment> added,\n             List<String> oldPolicies = beforeModified.get(i).getPolicyIds();\n             List<String> oldStreams = beforeModified.get(i).getStreamIds();\n \n-            if (!newPolicies.equals(oldPolicies) || !newStreams.equals(oldStreams)) {\n+            if (!newPolicies.equals(oldPolicies) || !Objects.equal(newStreams, oldStreams)) {\n                 // since both policy & stream may change, skip the compare and difference update\n                 removePublihsPoliciesStreams(newPSPublishPluginMapping, oldPolicies, pubName);\n                 addPublishmentPoliciesStreams(newPSPublishPluginMapping, newPolicies, newStreams, pubName);",
                "deletions": 1
            },
            {
                "sha": "0de82187baa4e9ce013193a16ddcd657b9baeafa",
                "filename": "eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/test/resources/testPublishSpec3.json",
                "blob_url": "https://github.com/apache/eagle/blob/bd5f242307fa184b9e8f272a862d7468e4dedd23/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/test/resources/testPublishSpec3.json",
                "raw_url": "https://github.com/apache/eagle/raw/bd5f242307fa184b9e8f272a862d7468e4dedd23/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/test/resources/testPublishSpec3.json",
                "status": "modified",
                "changes": 3,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/test/resources/testPublishSpec3.json?ref=bd5f242307fa184b9e8f272a862d7468e4dedd23",
                "patch": "@@ -9,9 +9,6 @@\n       \"policyIds\": [\n         \"policy1\"\n       ],\n-      \"streamIds\": [\n-        \"stream2\"\n-      ],\n       \"dedupIntervalMin\": \"PT2M\",\n       \"properties\": {\n         \"subject\": \"Test Alert\",",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "eagle",
        "message": "[EAGLE-614]: NPE in DynamicPolicyLoader\n\nAuthor: Zeng, Bryant\nReviewer: ralphsu\n\nThis closes #498",
        "commit": "https://github.com/apache/eagle/commit/4dfb528c4bf2d8935bac78b10a82b6bc15f0be59",
        "parent": "https://github.com/apache/eagle/commit/74c3cbb5b1653974870e805b717987eb75e5113d",
        "bug_id": "eagle_10",
        "file": [
            {
                "sha": "6df682a6a78048a2f6493875c027a5c8febb921f",
                "filename": "eagle-core/eagle-alert-parent/eagle-alert/alert-common/src/main/java/org/apache/eagle/alert/engine/coordinator/PolicyDefinition.java",
                "blob_url": "https://github.com/apache/eagle/blob/4dfb528c4bf2d8935bac78b10a82b6bc15f0be59/eagle-core/eagle-alert-parent/eagle-alert/alert-common/src/main/java/org/apache/eagle/alert/engine/coordinator/PolicyDefinition.java",
                "raw_url": "https://github.com/apache/eagle/raw/4dfb528c4bf2d8935bac78b10a82b6bc15f0be59/eagle-core/eagle-alert-parent/eagle-alert/alert-common/src/main/java/org/apache/eagle/alert/engine/coordinator/PolicyDefinition.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-alert-parent/eagle-alert/alert-common/src/main/java/org/apache/eagle/alert/engine/coordinator/PolicyDefinition.java?ref=4dfb528c4bf2d8935bac78b10a82b6bc15f0be59",
                "patch": "@@ -139,15 +139,18 @@ public boolean equals(Object that) {\n         if (that == this) {\n             return true;\n         }\n+\n         if (!(that instanceof PolicyDefinition)) {\n             return false;\n         }\n+\n         PolicyDefinition another = (PolicyDefinition) that;\n+\n         if (Objects.equals(another.name, this.name)\n             && Objects.equals(another.description, this.description)\n             && CollectionUtils.isEqualCollection(another.inputStreams, this.inputStreams)\n             && CollectionUtils.isEqualCollection(another.outputStreams, this.outputStreams)\n-            && another.definition.equals(this.definition)\n+            && (another.definition != null && another.definition.equals(this.definition))\n             && Objects.equals(this.definition, another.definition)\n             && CollectionUtils.isEqualCollection(another.partitionSpec, this.partitionSpec)\n             // && another.parallelismHint == this.parallelismHint",
                "deletions": 1
            },
            {
                "sha": "07ae9660c9fa20fcd722ba9019c98d7029033ff8",
                "filename": "eagle-core/eagle-alert-parent/eagle-alert/alert-coordinator/src/main/java/org/apache/eagle/alert/coordinator/trigger/DynamicPolicyLoader.java",
                "blob_url": "https://github.com/apache/eagle/blob/4dfb528c4bf2d8935bac78b10a82b6bc15f0be59/eagle-core/eagle-alert-parent/eagle-alert/alert-coordinator/src/main/java/org/apache/eagle/alert/coordinator/trigger/DynamicPolicyLoader.java",
                "raw_url": "https://github.com/apache/eagle/raw/4dfb528c4bf2d8935bac78b10a82b6bc15f0be59/eagle-core/eagle-alert-parent/eagle-alert/alert-coordinator/src/main/java/org/apache/eagle/alert/coordinator/trigger/DynamicPolicyLoader.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-alert-parent/eagle-alert/alert-coordinator/src/main/java/org/apache/eagle/alert/coordinator/trigger/DynamicPolicyLoader.java?ref=4dfb528c4bf2d8935bac78b10a82b6bc15f0be59",
                "patch": "@@ -66,7 +66,8 @@ public void run() {\n \n             List<String> reallyModifiedPolicies = new ArrayList<>();\n             for (String updatedPolicy : potentiallyModifiedPolicies) {\n-                if (!currPolicies.get(updatedPolicy).equals(cachedPolicies.get(updatedPolicy))) {\n+                if (currPolicies.get(updatedPolicy) != null\n+                        && !currPolicies.get(updatedPolicy).equals(cachedPolicies.get(updatedPolicy))) {\n                     reallyModifiedPolicies.add(updatedPolicy);\n                 }\n             }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "eagle",
        "message": "[EAGLE-573]: NPE when apply change of EAGLE-569\n\nAuthor : ralphsu\n\nThis closes #458",
        "commit": "https://github.com/apache/eagle/commit/1fa490e0c5b0c1b827791909968fcee7adc8ea7c",
        "parent": "https://github.com/apache/eagle/commit/0fac33799e21ae92d9b4a7e98e5090b032145b06",
        "bug_id": "eagle_11",
        "file": [
            {
                "sha": "87ac30f02e216e026ff847b7bf453db494fb32f1",
                "filename": "eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/publisher/impl/AlertPublisherImpl.java",
                "blob_url": "https://github.com/apache/eagle/blob/1fa490e0c5b0c1b827791909968fcee7adc8ea7c/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/publisher/impl/AlertPublisherImpl.java",
                "raw_url": "https://github.com/apache/eagle/raw/1fa490e0c5b0c1b827791909968fcee7adc8ea7c/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/publisher/impl/AlertPublisherImpl.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-alert-parent/eagle-alert/alert-engine/src/main/java/org/apache/eagle/alert/engine/publisher/impl/AlertPublisherImpl.java?ref=1fa490e0c5b0c1b827791909968fcee7adc8ea7c",
                "patch": "@@ -74,7 +74,13 @@ private void notifyAlert(AlertStreamEvent event) {\n             LOG.warn(\"policyId cannot be null for event to be published\");\n             return;\n         }\n-        for (String pubId : policyPublishPluginMapping.get(policyId)) {\n+        List<String> pubIds = policyPublishPluginMapping.get(policyId);\n+        if (pubIds == null) {\n+            LOG.warn(\"Policy {} does *NOT* subscribe any publishment!\", policyId);\n+            return;\n+        }\n+\n+        for (String pubId : pubIds) {\n             AlertPublishPlugin plugin = pubId != null ? publishPluginMapping.get(pubId) : null;\n             if (plugin == null) {\n                 LOG.warn(\"Policy {} does *NOT* subscribe any publishment!\", policyId);",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "eagle",
        "message": "[EAGLE-892] fixng NPE on ResourceFetcher\n\nMRRunningJobFetchSpout uses these functions which if returned Null, the follow up log line will throw NPE. ( as shown below )\n```\napps = resourceFetcher.getResource(Constants.ResourceType.RUNNING_MR_JOB);\nLOG.info(\"get {} apps from resource manager\", apps.size());\n```\n\nAuthor: Jay <jhsonline@gmail.com>\n\nCloses #800 from jhsenjaliya/EAGLE-892.",
        "commit": "https://github.com/apache/eagle/commit/ac577675017a6ef437b8a774aa2c0e43cc973502",
        "parent": "https://github.com/apache/eagle/commit/1cfff2b9a9ade5dd7c9fd1b9c5e8f5928963da85",
        "bug_id": "eagle_12",
        "file": [
            {
                "sha": "225ede95203d31e399714c5792a5f84edf92a811",
                "filename": "eagle-jpm/eagle-jpm-util/src/main/java/org/apache/eagle/jpm/util/resourcefetch/RMResourceFetcher.java",
                "blob_url": "https://github.com/apache/eagle/blob/ac577675017a6ef437b8a774aa2c0e43cc973502/eagle-jpm/eagle-jpm-util/src/main/java/org/apache/eagle/jpm/util/resourcefetch/RMResourceFetcher.java",
                "raw_url": "https://github.com/apache/eagle/raw/ac577675017a6ef437b8a774aa2c0e43cc973502/eagle-jpm/eagle-jpm-util/src/main/java/org/apache/eagle/jpm/util/resourcefetch/RMResourceFetcher.java",
                "status": "modified",
                "changes": 11,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-jpm/eagle-jpm-util/src/main/java/org/apache/eagle/jpm/util/resourcefetch/RMResourceFetcher.java?ref=ac577675017a6ef437b8a774aa2c0e43cc973502",
                "patch": "@@ -38,6 +38,7 @@\n \n import java.io.IOException;\n import java.io.InputStream;\n+import java.util.ArrayList;\n import java.util.List;\n \n public class RMResourceFetcher implements ResourceFetcher<AppInfo> {\n@@ -66,7 +67,7 @@ private void checkUrl() throws IOException {\n     }\n \n     private List<AppInfo> doFetchFinishApplicationsList(String urlString, Constants.CompressionType compressionType) throws Exception {\n-        List<AppInfo> result;\n+        List<AppInfo> result = new ArrayList<>(0);\n         InputStream is = null;\n         try {\n             checkUrl();\n@@ -76,9 +77,8 @@ private void checkUrl() throws IOException {\n             if (appWrapper != null && appWrapper.getApps() != null\n                 && appWrapper.getApps().getApp() != null) {\n                 result = appWrapper.getApps().getApp();\n-                return result;\n             }\n-            return null;\n+            return result;\n         } finally {\n             if (is != null) {\n                 try {\n@@ -113,7 +113,7 @@ private String getMRFinishedJobURL(String lastFinishedTime) {\n     }\n \n     private List<AppInfo> doFetchRunningApplicationsList(String urlString, Constants.CompressionType compressionType) throws Exception {\n-        List<AppInfo> result;\n+        List<AppInfo> result = new ArrayList<>(0);\n         InputStream is = null;\n         try {\n             checkUrl();\n@@ -122,9 +122,8 @@ private String getMRFinishedJobURL(String lastFinishedTime) {\n             final AppsWrapper appWrapper = OBJ_MAPPER.readValue(is, AppsWrapper.class);\n             if (appWrapper != null && appWrapper.getApps() != null && appWrapper.getApps().getApp() != null) {\n                 result = appWrapper.getApps().getApp();\n-                return result;\n             }\n-            return null;\n+            return result;\n         } finally {\n             if (is != null) {\n                 try {",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "eagle",
        "message": "[EAGLE-844] Fix a potential NPE\n\nhttps://issues.apache.org/jira/browse/EAGLE-844\n\nAuthor: lifove <jc@lifove.net>\nAuthor: JC <jc@lifove.net>\n\nCloses #751 from lifove/master.",
        "commit": "https://github.com/apache/eagle/commit/73642a4ee2e307a572457bca664b790385038c81",
        "parent": "https://github.com/apache/eagle/commit/a34ef878a21dada05c8c297a4b66f93889361d50",
        "bug_id": "eagle_13",
        "file": [
            {
                "sha": "8e4005cf676b1b4f700d5d63740fe2e3b83ae48a",
                "filename": "eagle-core/eagle-query/eagle-storage-hbase/src/main/java/org/apache/eagle/storage/hbase/HBaseEntitySchemaManager.java",
                "blob_url": "https://github.com/apache/eagle/blob/73642a4ee2e307a572457bca664b790385038c81/eagle-core/eagle-query/eagle-storage-hbase/src/main/java/org/apache/eagle/storage/hbase/HBaseEntitySchemaManager.java",
                "raw_url": "https://github.com/apache/eagle/raw/73642a4ee2e307a572457bca664b790385038c81/eagle-core/eagle-query/eagle-storage-hbase/src/main/java/org/apache/eagle/storage/hbase/HBaseEntitySchemaManager.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/eagle/contents/eagle-core/eagle-query/eagle-storage-hbase/src/main/java/org/apache/eagle/storage/hbase/HBaseEntitySchemaManager.java?ref=73642a4ee2e307a572457bca664b790385038c81",
                "patch": "@@ -65,7 +65,7 @@ public void init() {\n         try {\n             admin = new HBaseAdmin(conf);\n             Map<String, EntityDefinition> entityServiceMap = EntityDefinitionManager.entities();\n-            if (entityServiceMap != null || entityServiceMap.values() != null) {\n+            if (entityServiceMap != null) {\n                 for (EntityDefinition entityDefinition : entityServiceMap.values()) {\n                     createTable(entityDefinition);\n                 }",
                "deletions": 1
            }
        ]
    }
]