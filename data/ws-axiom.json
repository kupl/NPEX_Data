{
    "ws-axiom_2c42993": {
        "bug_id": "ws-axiom_2c42993",
        "commit": "https://github.com/apache/ws-axiom/commit/2c4299360c46cc7bc1fbd990495676b63a99871d",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/ws-axiom/blob/2c4299360c46cc7bc1fbd990495676b63a99871d/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/serialize/StreamingOMSerializer.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/serialize/StreamingOMSerializer.java?ref=2c4299360c46cc7bc1fbd990495676b63a99871d",
                "deletions": 1,
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/om/impl/serialize/StreamingOMSerializer.java",
                "patch": "@@ -235,7 +235,11 @@ protected void serializeElement(XMLStreamReader reader,\n                 String prefix = (String) writePrefixList.get(i);\n                 String namespace = (String) writeNSList.get(i);\n                 if (prefix != null) {\n-                    writer.writeNamespace(prefix, namespace);\n+                    if (namespace == null) {\n+                        writer.writeNamespace(prefix, \"\");\n+                    } else {\n+                        writer.writeNamespace(prefix, namespace);\n+                    }\n                 } else {\n                     writer.writeDefaultNamespace(namespace);\n                 }",
                "raw_url": "https://github.com/apache/ws-axiom/raw/2c4299360c46cc7bc1fbd990495676b63a99871d/modules/axiom-api/src/main/java/org/apache/axiom/om/impl/serialize/StreamingOMSerializer.java",
                "sha": "bbd85a4e1a9b4f166a33a2e81cb4a997cd167056",
                "status": "modified"
            },
            {
                "additions": 112,
                "blob_url": "https://github.com/apache/ws-axiom/blob/2c4299360c46cc7bc1fbd990495676b63a99871d/modules/axiom-tests/src/test/java/org/apache/axiom/om/impl/serializer/OMSerializerTest2.java",
                "changes": 112,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-tests/src/test/java/org/apache/axiom/om/impl/serializer/OMSerializerTest2.java?ref=2c4299360c46cc7bc1fbd990495676b63a99871d",
                "deletions": 0,
                "filename": "modules/axiom-tests/src/test/java/org/apache/axiom/om/impl/serializer/OMSerializerTest2.java",
                "patch": "@@ -0,0 +1,112 @@\n+package org.apache.axiom.om.impl.serializer;\r\n+\r\n+import org.apache.axiom.om.AbstractTestCase;\r\n+import org.apache.axiom.om.OMXMLParserWrapper;\r\n+import org.apache.axiom.om.OMAbstractFactory;\r\n+import org.apache.axiom.om.impl.serialize.StreamingOMSerializer;\r\n+import org.apache.axiom.om.impl.llom.factory.OMXMLBuilderFactory;\r\n+import org.apache.axiom.om.impl.builder.StAXOMBuilder;\r\n+import org.apache.axiom.soap.SOAPEnvelope;\r\n+import org.apache.axiom.soap.SOAPBody;\r\n+import org.apache.axiom.soap.impl.builder.StAXSOAPModelBuilder;\r\n+import org.custommonkey.xmlunit.XMLTestCase;\r\n+\r\n+import javax.xml.stream.*;\r\n+import java.io.*;\r\n+\r\n+public class OMSerializerTest2 extends XMLTestCase {\r\n+    private XMLStreamReader reader;\r\n+    private XMLStreamWriter writer;\r\n+    private static final String xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\" +\r\n+            \"<soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\" +\r\n+            \"<soapenv:Header/>\" +\r\n+            \"<soapenv:Body>\" +\r\n+            \"<ReportService_GetOlapServers_1_0_Response xmlns=\\\"http://reportservice.type\\\">\" +\r\n+            \"<status>\" +\r\n+            \"<returnCode xmlns=\\\"\\\">\" +\r\n+            \"<returnCode>0</returnCode>\" +\r\n+            \"</returnCode>\" +\r\n+            \"</status>\" +\r\n+            \"<olapServerId xmlns=\\\"http://type.ws.analyzer.jrisk.appl.net\\\">jnp://192.168.111.66:1234</olapServerId>\" +\r\n+            \"</ReportService_GetOlapServers_1_0_Response>\" +\r\n+            \"</soapenv:Body>\" +\r\n+            \"</soapenv:Envelope>\";\r\n+\r\n+    public OMSerializerTest2(String testName) {\r\n+        super(testName);\r\n+    }\r\n+\r\n+    protected void setUp() throws Exception {\r\n+        reader =\r\n+                XMLInputFactory.newInstance().\r\n+                        createXMLStreamReader(\r\n+                                new StringReader(xml));\r\n+    }\r\n+\r\n+    public void testRawSerializer() throws Exception {\r\n+        StreamingOMSerializer serializer = new StreamingOMSerializer();\r\n+        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\r\n+        writer =\r\n+                XMLOutputFactory.newInstance().\r\n+                        createXMLStreamWriter(byteArrayOutputStream);\r\n+        serializer.serialize(reader, writer);\r\n+        writer.flush();\r\n+\r\n+        String outputString = new String(byteArrayOutputStream.toByteArray());\r\n+        assertXMLEqual(xml, outputString);\r\n+\r\n+    }\r\n+\r\n+    public void testElementPullStream1() throws Exception {\r\n+        OMXMLParserWrapper builder = OMXMLBuilderFactory.createStAXSOAPModelBuilder(\r\n+                OMAbstractFactory.getSOAP11Factory(),\r\n+                reader);\r\n+        SOAPEnvelope env = (SOAPEnvelope) builder.getDocumentElement();\r\n+        StreamingOMSerializer serializer = new StreamingOMSerializer();\r\n+        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\r\n+        writer =\r\n+                XMLOutputFactory.newInstance().\r\n+                        createXMLStreamWriter(byteArrayOutputStream);\r\n+\r\n+        serializer.serialize(env.getXMLStreamReaderWithoutCaching(), writer);\r\n+        writer.flush();\r\n+\r\n+        String outputString = new String(byteArrayOutputStream.toByteArray());\r\n+        assertXMLEqual(xml, outputString);\r\n+    }\r\n+\r\n+    public void testElementPullStream1WithCacheOff() throws Exception {\r\n+\r\n+        StAXSOAPModelBuilder soapBuilder = new StAXSOAPModelBuilder(reader, null);\r\n+        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\r\n+        writer =\r\n+                XMLOutputFactory.newInstance().\r\n+                        createXMLStreamWriter(byteArrayOutputStream);\r\n+\r\n+        SOAPEnvelope env = (SOAPEnvelope) soapBuilder.getDocumentElement();\r\n+        env.serializeAndConsume(writer);\r\n+        writer.flush();\r\n+\r\n+        String outputString = new String(byteArrayOutputStream.toByteArray());\r\n+        assertTrue(outputString != null && !\"\".equals(outputString) && outputString.length() > 1);\r\n+\r\n+        writer =\r\n+                XMLOutputFactory.newInstance().\r\n+                        createXMLStreamWriter(byteArrayOutputStream);\r\n+\r\n+        StringWriter stringWriter = new StringWriter();\r\n+\r\n+        //now we should not be able to serilaize anything ! this should throw\r\n+        //an error\r\n+        try {\r\n+            env.serializeAndConsume(writer);\r\n+            fail();\r\n+        } catch (XMLStreamException e) {\r\n+            e.printStackTrace(new PrintWriter(stringWriter, true));\r\n+            assertTrue(stringWriter.toString()\r\n+                    .indexOf(\"problem accessing the parser. Parser already accessed!\") > -1);\r\n+        } catch (Exception e) {\r\n+            fail(\"Expecting an XMLStreamException \" + e.getMessage());\r\n+        }\r\n+    }\r\n+}\r",
                "raw_url": "https://github.com/apache/ws-axiom/raw/2c4299360c46cc7bc1fbd990495676b63a99871d/modules/axiom-tests/src/test/java/org/apache/axiom/om/impl/serializer/OMSerializerTest2.java",
                "sha": "b26cc1652cbc771edeed6f7b5c3e442e7c3fe962",
                "status": "added"
            }
        ],
        "message": "Fix for WSCOMMONS-172 [Default Namespace NPE] and AXIS2-1964 [Null Pointer Exception in Service STUB class at _operationClient.execute(true); line for AXIS2 1.1.1]",
        "parent": "https://github.com/apache/ws-axiom/commit/a4b6d710c93e683d841068c7ce07985b6cbbec38",
        "repo": "ws-axiom",
        "unit_tests": [
            "StreamingOMSerializerTest.java"
        ]
    },
    "ws-axiom_39f1b33": {
        "bug_id": "ws-axiom_39f1b33",
        "commit": "https://github.com/apache/ws-axiom/commit/39f1b33605414684db925c34b9dc53508ac5c915",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ws-axiom/blob/39f1b33605414684db925c34b9dc53508ac5c915/modules/axiom-api/src/main/java/org/apache/axiom/om/OMOutputFormat.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/om/OMOutputFormat.java?ref=39f1b33605414684db925c34b9dc53508ac5c915",
                "deletions": 1,
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/om/OMOutputFormat.java",
                "patch": "@@ -214,7 +214,7 @@ public String getNextContentId() {\n      * @return Returns encoding string.\n      */\n     public String getCharSetEncoding() {\n-        return this.charSetEncoding;\n+        return (this.charSetEncoding != null)?this.charSetEncoding:DEFAULT_CHAR_SET_ENCODING;\n     }\n \n     public void setCharSetEncoding(String charSetEncoding) {",
                "raw_url": "https://github.com/apache/ws-axiom/raw/39f1b33605414684db925c34b9dc53508ac5c915/modules/axiom-api/src/main/java/org/apache/axiom/om/OMOutputFormat.java",
                "sha": "31c388b242abaea62caf68df4312a165c2ee10c9",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/ws-axiom/blob/39f1b33605414684db925c34b9dc53508ac5c915/modules/axiom-tests/src/test/java/org/apache/axiom/om/OMSourcedElementTest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-tests/src/test/java/org/apache/axiom/om/OMSourcedElementTest.java?ref=39f1b33605414684db925c34b9dc53508ac5c915",
                "deletions": 1,
                "filename": "modules/axiom-tests/src/test/java/org/apache/axiom/om/OMSourcedElementTest.java",
                "patch": "@@ -139,7 +139,15 @@ public void testByteArrayDS() throws Exception {\n         String payload = new String(bytes, \"utf-16\");\n         assertTrue(\"The obtained bytes did not match the payload\",\n                    payload1.equals(payload));\n-        \n+\n+        // Test getting the raw bytes with the default encoding\n+        OMOutputFormat outputFormat = new OMOutputFormat();\n+        baos = new ByteArrayOutputStream();\n+        ds.serialize(baos, outputFormat);\n+        output = baos.toString(OMOutputFormat.DEFAULT_CHAR_SET_ENCODING);\n+        System.out.println(output);\n+        assertTrue(\"The obtained bytes did not match the payload\",\n+                   payload1.equals(output));     \n     }\n     \n     /**",
                "raw_url": "https://github.com/apache/ws-axiom/raw/39f1b33605414684db925c34b9dc53508ac5c915/modules/axiom-tests/src/test/java/org/apache/axiom/om/OMSourcedElementTest.java",
                "sha": "e0c7f744906721abc13068046c829c38666f8f20",
                "status": "modified"
            }
        ],
        "message": "Fix potential NPE during serialization if an encoding has not been set for the OMOutputFormat.",
        "parent": "https://github.com/apache/ws-axiom/commit/e1b5c240c8c3e31a6636c2e52926e9c89972d9ac",
        "repo": "ws-axiom",
        "unit_tests": [
            "OMOutputFormatTest.java"
        ]
    },
    "ws-axiom_959af60": {
        "bug_id": "ws-axiom_959af60",
        "commit": "https://github.com/apache/ws-axiom/commit/959af604b36b92ffcc79058495ab631ee8d193da",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/ws-axiom/blob/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-api/src/main/java/org/apache/axiom/om/OMElement.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/om/OMElement.java?ref=959af604b36b92ffcc79058495ab631ee8d193da",
                "deletions": 3,
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/om/OMElement.java",
                "patch": "@@ -365,9 +365,11 @@\n      *            the given attribute value can be serialized directly as an XML value. The caller\n      *            may, for example, pass a string with the character 0x01.\n      * @param ns\n-     *            The namespace has to be one of the in scope namespace. i.e. the passed namespace\n-     *            must be declared in the parent element of this attribute or ancestors of the\n-     *            parent element of the attribute.\n+     *            The namespace for the attribute. If no corresponding namespace declaration is in\n+     *            scope, then a new namespace declaration will be added to the element. The\n+     *            {@link OMNamespace} may have a <code>null</code> prefix, in which case the method\n+     *            will generate a prefix (if no namespace declaration for the given namespace URI is\n+     *            in scope) or use an existing one.\n      * @return Returns the added attribute.\n      * @throws IllegalArgumentException\n      *             if an attempt is made to create a prefixed attribute with an empty namespace name",
                "raw_url": "https://github.com/apache/ws-axiom/raw/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-api/src/main/java/org/apache/axiom/om/OMElement.java",
                "sha": "2d62079a500f2fb7cd63a526fe37db6c3fd30602",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/ws-axiom/blob/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ElementImpl.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ElementImpl.java?ref=959af604b36b92ffcc79058495ab631ee8d193da",
                "deletions": 8,
                "filename": "modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ElementImpl.java",
                "patch": "@@ -59,6 +59,7 @@\n import javax.xml.namespace.NamespaceContext;\n import javax.xml.namespace.QName;\n import javax.xml.stream.XMLStreamException;\n+\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.io.Reader;\n@@ -531,17 +532,16 @@ public OMAttribute addAttribute(OMAttribute attr) {\n \n     public OMAttribute addAttribute(String localName, String value,\n                                     OMNamespace ns) {\n+        OMNamespace namespace = null;\n         if (ns != null) {\n-            String uri = ns.getNamespaceURI();\n-            if (uri.length() > 0) {\n-                String prefix = ns.getPrefix();\n-                OMNamespace ns2 = findNamespaceURI(prefix);\n-                if (ns2 == null || !uri.equals(ns2.getNamespaceURI())) {\n-                    declareNamespace(uri, prefix);\n-                }\n+            String namespaceURI = ns.getNamespaceURI();\n+            String prefix = ns.getPrefix();\n+            namespace = findNamespace(namespaceURI, prefix);\n+            if (namespace == null) {\n+                namespace = new OMNamespaceImpl(namespaceURI, prefix != null ? prefix : OMSerializerUtil.getNextNSPrefix());\n             }\n         }\n-        return addAttribute(new AttrImpl(null, localName, ns, value, factory));\n+        return addAttribute(new AttrImpl(null, localName, namespace, value, factory));\n     }\n \n     public OMNamespace addNamespaceDeclaration(String uri, String prefix) {",
                "raw_url": "https://github.com/apache/ws-axiom/raw/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-dom/src/main/java/org/apache/axiom/om/impl/dom/ElementImpl.java",
                "sha": "045a0c1ff54348dc04b36513c246ecd5bc016580",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/ws-axiom/blob/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMElementImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMElementImpl.java?ref=959af604b36b92ffcc79058495ab631ee8d193da",
                "deletions": 3,
                "filename": "modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMElementImpl.java",
                "patch": "@@ -593,18 +593,18 @@ public void removeAttribute(OMAttribute attr) {\n         attributes.remove(attr.getQName());\n     }\n \n-    public OMAttribute addAttribute(String attributeName, String value,\n+    public OMAttribute addAttribute(String localName, String value,\n                                     OMNamespace ns) {\n         OMNamespace namespace = null;\n         if (ns != null) {\n             String namespaceURI = ns.getNamespaceURI();\n             String prefix = ns.getPrefix();\n             namespace = findNamespace(namespaceURI, prefix);\n             if (namespace == null) {\n-                namespace = new OMNamespaceImpl(namespaceURI, prefix);\n+                namespace = new OMNamespaceImpl(namespaceURI, prefix != null ? prefix : OMSerializerUtil.getNextNSPrefix());\n             }\n         }\n-        return addAttribute(new OMAttributeImpl(attributeName, namespace, value, this.factory));\n+        return addAttribute(new OMAttributeImpl(localName, namespace, value, this.factory));\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/ws-axiom/raw/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-impl/src/main/java/org/apache/axiom/om/impl/llom/OMElementImpl.java",
                "sha": "21f0c5b4ff96a883a6232400f3ab29b39a677d9c",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ws-axiom/blob/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/OMTestSuiteBuilder.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/OMTestSuiteBuilder.java?ref=959af604b36b92ffcc79058495ab631ee8d193da",
                "deletions": 0,
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/OMTestSuiteBuilder.java",
                "patch": "@@ -198,6 +198,8 @@ protected void addTests() {\n         addTest(new org.apache.axiom.ts.om.document.sr.TestDTDReaderFromParser(metaFactory, false, false));\n         addTest(new org.apache.axiom.ts.om.element.TestAddAttributeAlreadyOwnedByElement(metaFactory));\n         addTest(new org.apache.axiom.ts.om.element.TestAddAttributeAlreadyOwnedByOtherElement(metaFactory));\n+        addTest(new org.apache.axiom.ts.om.element.TestAddAttributeGeneratedPrefix(metaFactory));\n+        addTest(new org.apache.axiom.ts.om.element.TestAddAttributeReuseExistingPrefix(metaFactory));\n         addTest(new org.apache.axiom.ts.om.element.TestAddAttributeWithInvalidNamespace1(metaFactory));\n         addTest(new org.apache.axiom.ts.om.element.TestAddAttributeWithInvalidNamespace2(metaFactory));\n         for (int i=0; i<addAttributeStrategies.length; i++) {",
                "raw_url": "https://github.com/apache/ws-axiom/raw/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/OMTestSuiteBuilder.java",
                "sha": "1e1c967dd0acf98ef24f600c71939cdd7aba74a0",
                "status": "modified"
            },
            {
                "additions": 51,
                "blob_url": "https://github.com/apache/ws-axiom/blob/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddAttributeGeneratedPrefix.java",
                "changes": 51,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddAttributeGeneratedPrefix.java?ref=959af604b36b92ffcc79058495ab631ee8d193da",
                "deletions": 0,
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddAttributeGeneratedPrefix.java",
                "patch": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.axiom.ts.om.element;\n+\n+import java.util.Iterator;\n+\n+import org.apache.axiom.om.OMAttribute;\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.OMFactory;\n+import org.apache.axiom.om.OMMetaFactory;\n+import org.apache.axiom.om.OMNamespace;\n+import org.apache.axiom.ts.AxiomTestCase;\n+\n+/**\n+ * Tests that when {@link OMElement#addAttribute(String, String, OMNamespace)} is called with an\n+ * {@link OMNamespace} with a <code>null</code> prefix and no namespace declaration for the given\n+ * namespace URI is in scope, the method generates a prefix.\n+ */\n+public class TestAddAttributeGeneratedPrefix extends AxiomTestCase {\n+    public TestAddAttributeGeneratedPrefix(OMMetaFactory metaFactory) {\n+        super(metaFactory);\n+    }\n+\n+    protected void runTest() throws Throwable {\n+        OMFactory factory = metaFactory.getOMFactory();\n+        OMElement element = factory.createOMElement(\"test\", null);\n+        OMAttribute attr = element.addAttribute(\"attr\", \"value\", factory.createOMNamespace(\"urn:test\", null));\n+        OMNamespace ns = attr.getNamespace();\n+        assertTrue(ns.getPrefix().length() > 0);\n+        Iterator it = element.getAllDeclaredNamespaces();\n+        assertTrue(it.hasNext());\n+        assertEquals(ns, it.next());\n+        assertFalse(it.hasNext());\n+    }\n+}",
                "raw_url": "https://github.com/apache/ws-axiom/raw/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddAttributeGeneratedPrefix.java",
                "sha": "aef7015a4623b2ae6601dee901a048196ad727c2",
                "status": "added"
            },
            {
                "additions": 47,
                "blob_url": "https://github.com/apache/ws-axiom/blob/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddAttributeReuseExistingPrefix.java",
                "changes": 47,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddAttributeReuseExistingPrefix.java?ref=959af604b36b92ffcc79058495ab631ee8d193da",
                "deletions": 0,
                "filename": "modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddAttributeReuseExistingPrefix.java",
                "patch": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.axiom.ts.om.element;\n+\n+import org.apache.axiom.om.OMAttribute;\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.OMFactory;\n+import org.apache.axiom.om.OMMetaFactory;\n+import org.apache.axiom.om.OMNamespace;\n+import org.apache.axiom.ts.AxiomTestCase;\n+\n+/**\n+ * Tests that when {@link OMElement#addAttribute(String, String, OMNamespace)} is called with an\n+ * {@link OMNamespace} with a <code>null</code> prefix and a namespace declaration for the given\n+ * namespace URI is in scope, the method reuses the existing prefix instead of generating one.\n+ */\n+public class TestAddAttributeReuseExistingPrefix extends AxiomTestCase {\n+    public TestAddAttributeReuseExistingPrefix(OMMetaFactory metaFactory) {\n+        super(metaFactory);\n+    }\n+\n+    protected void runTest() throws Throwable {\n+        OMFactory factory = metaFactory.getOMFactory();\n+        OMElement parent = factory.createOMElement(\"parent\", null);\n+        OMElement element = factory.createOMElement(\"element\", null, parent);\n+        parent.declareNamespace(\"urn:test\", \"p\");\n+        OMAttribute attr = element.addAttribute(\"attr\", \"test\", factory.createOMNamespace(\"urn:test\", null));\n+        assertEquals(\"p\", attr.getPrefix());\n+        assertFalse(element.getAllDeclaredNamespaces().hasNext());\n+    }\n+}",
                "raw_url": "https://github.com/apache/ws-axiom/raw/959af604b36b92ffcc79058495ab631ee8d193da/modules/axiom-testsuite/src/main/java/org/apache/axiom/ts/om/element/TestAddAttributeReuseExistingPrefix.java",
                "sha": "1819b88d52f8e05fdb68ef3ea135666cb0fba6cd",
                "status": "added"
            }
        ],
        "message": "Improve consistency of the OMElement#addAttribute(String, String, OMNamespace) API:\n* Let LLOM's addAttribute implementation generate a prefix (instead of throwing a NPE) if the prefix is null and no namespace declaration for the given namespace URI is found.\n* Add test coverage for the scenario where the prefix is null and a namespace declaration for the given URI is found (in which case the corresponding prefix is reused). This worked correctly in LLOM.\n* Make DOOM's behavior consistent with LLOM.\n* Update Javadoc of the addAttribute method.",
        "parent": "https://github.com/apache/ws-axiom/commit/8ea27174a675ae98f161571df4e246561af5c0da",
        "repo": "ws-axiom",
        "unit_tests": [
            "OMElementTest.java"
        ]
    },
    "ws-axiom_a764ce2": {
        "bug_id": "ws-axiom_a764ce2",
        "commit": "https://github.com/apache/ws-axiom/commit/a764ce2c6d6fb87c023e6269eabd8c393dfc2fd1",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ws-axiom/blob/a764ce2c6d6fb87c023e6269eabd8c393dfc2fd1/modules/axiom-api/src/main/java/org/apache/axiom/om/OMOutputFormat.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/om/OMOutputFormat.java?ref=a764ce2c6d6fb87c023e6269eabd8c393dfc2fd1",
                "deletions": 3,
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/om/OMOutputFormat.java",
                "patch": "@@ -208,10 +208,9 @@ public String getNextContentId() {\n     }\n \n     /**\n-     * Returns the character set encoding scheme. If the value of the charSetEncoding is not set\n-     * then the default will be returned.\n+     * Returns the character set encoding scheme.\n      *\n-     * @return Returns encoding string.\n+     * @return Returns encoding string or null if it has not been set.\n      */\n     public String getCharSetEncoding() {\n         return this.charSetEncoding;",
                "raw_url": "https://github.com/apache/ws-axiom/raw/a764ce2c6d6fb87c023e6269eabd8c393dfc2fd1/modules/axiom-api/src/main/java/org/apache/axiom/om/OMOutputFormat.java",
                "sha": "86a96a6cb8859241179f9bc84f11844dde024604",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/ws-axiom/blob/a764ce2c6d6fb87c023e6269eabd8c393dfc2fd1/modules/axiom-api/src/main/java/org/apache/axiom/om/ds/ByteArrayDataSource.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-api/src/main/java/org/apache/axiom/om/ds/ByteArrayDataSource.java?ref=a764ce2c6d6fb87c023e6269eabd8c393dfc2fd1",
                "deletions": 0,
                "filename": "modules/axiom-api/src/main/java/org/apache/axiom/om/ds/ByteArrayDataSource.java",
                "patch": "@@ -19,6 +19,7 @@\n package org.apache.axiom.om.ds;\n \n import org.apache.axiom.om.OMDataSourceExt;\n+import org.apache.axiom.om.OMOutputFormat;\n import org.apache.axiom.om.util.StAXUtils;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n@@ -77,9 +78,15 @@ public boolean isDestructiveWrite() {\n     }\n \n     public byte[] getXMLBytes(String encoding) throws UnsupportedEncodingException {\n+        if (encoding == null)\n+        {\n+          encoding = OMOutputFormat.DEFAULT_CHAR_SET_ENCODING;\n+        }\n+\n         if (DEBUG_ENABLED) {\n             log.debug(\"getXMLBytes encoding=\"+encoding);\n         }\n+\n         // Return the byte array directly if it is the same encoding\n         // Otherwise convert the bytes to the proper encoding\n         if (!byteArray.encoding.equalsIgnoreCase(encoding)) {",
                "raw_url": "https://github.com/apache/ws-axiom/raw/a764ce2c6d6fb87c023e6269eabd8c393dfc2fd1/modules/axiom-api/src/main/java/org/apache/axiom/om/ds/ByteArrayDataSource.java",
                "sha": "361f707dc2a90c2e26cdfae80726e1c125417939",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/ws-axiom/blob/a764ce2c6d6fb87c023e6269eabd8c393dfc2fd1/modules/axiom-tests/src/test/java/org/apache/axiom/om/OMSourcedElementTest.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/ws-axiom/contents/modules/axiom-tests/src/test/java/org/apache/axiom/om/OMSourcedElementTest.java?ref=a764ce2c6d6fb87c023e6269eabd8c393dfc2fd1",
                "deletions": 0,
                "filename": "modules/axiom-tests/src/test/java/org/apache/axiom/om/OMSourcedElementTest.java",
                "patch": "@@ -140,6 +140,15 @@ public void testByteArrayDS() throws Exception {\n         assertTrue(\"The obtained bytes did not match the payload\",\n                    payload1.equals(payload));\n         \n+       \n+        // Test getting the raw bytes with the default encoding\n+        OMOutputFormat outputFormat = new OMOutputFormat();\n+        baos = new ByteArrayOutputStream();\n+        ds.serialize(baos, outputFormat);\n+        output = baos.toString(OMOutputFormat.DEFAULT_CHAR_SET_ENCODING);\n+        System.out.println(output);\n+        assertTrue(\"The obtained bytes did not match the payload\",\n+                   payload1.equals(output));     \n     }\n     \n     /**",
                "raw_url": "https://github.com/apache/ws-axiom/raw/a764ce2c6d6fb87c023e6269eabd8c393dfc2fd1/modules/axiom-tests/src/test/java/org/apache/axiom/om/OMSourcedElementTest.java",
                "sha": "8e2b7810f43cac260db0671be9da773d8f1ef4bf",
                "status": "modified"
            }
        ],
        "message": "Revised patch for fixing potential NPE during serialization if an encoding has not been set for the OMOutputFormat.",
        "parent": "https://github.com/apache/ws-axiom/commit/943bf918ac8dfc7f11945eb21753b2f3829ace43",
        "repo": "ws-axiom",
        "unit_tests": [
            "OMOutputFormatTest.java"
        ]
    }
}