[{"commit": "https://github.com/apache/james-project/commit/b7d44a1089e6388d32c1fb77376887bf2f8faf63", "parent": "https://github.com/apache/james-project/commit/8c99d0d9e3a86922ef4e426b574e23b1fe017d1c", "message": "JAMES-2550 Avoid NPE upon MQ dequeue", "bug_id": "james-project_1", "file": [{"additions": 2, "raw_url": "https://github.com/apache/james-project/raw/b7d44a1089e6388d32c1fb77376887bf2f8faf63/server/queue/queue-rabbitmq/src/main/java/org/apache/james/queue/rabbitmq/view/cassandra/CassandraMailQueueView.java", "blob_url": "https://github.com/apache/james-project/blob/b7d44a1089e6388d32c1fb77376887bf2f8faf63/server/queue/queue-rabbitmq/src/main/java/org/apache/james/queue/rabbitmq/view/cassandra/CassandraMailQueueView.java", "sha": "211917acf71decd880477a4e4a52e49c30f5a984", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/james-project/contents/server/queue/queue-rabbitmq/src/main/java/org/apache/james/queue/rabbitmq/view/cassandra/CassandraMailQueueView.java?ref=b7d44a1089e6388d32c1fb77376887bf2f8faf63", "patch": "@@ -105,7 +105,8 @@ public long getSize() {\n     public long delete(DeleteCondition deleteCondition) {\n         if (deleteCondition instanceof DeleteCondition.WithName) {\n             DeleteCondition.WithName nameDeleteCondition = (DeleteCondition.WithName) deleteCondition;\n-            return delete(MailKey.of(nameDeleteCondition.getName())).map(any -> 1L).block();\n+            delete(MailKey.of(nameDeleteCondition.getName())).block();\n+            return 1L;\n         }\n         return browseThenDelete(deleteCondition);\n     }", "filename": "server/queue/queue-rabbitmq/src/main/java/org/apache/james/queue/rabbitmq/view/cassandra/CassandraMailQueueView.java"}], "repo": "james-project"}, {"commit": "https://github.com/apache/james-project/commit/b10fa18aa252624ce178e064919d92c7929d7d50", "parent": "https://github.com/apache/james-project/commit/25e9a11be2ea06617b1a7bc3b2c41ead9d0c3f0b", "message": "JAMES-2437 When the publickey is missing in the keystore a NPE is thrown", "bug_id": "james-project_2", "file": [{"additions": 12, "raw_url": "https://github.com/apache/james-project/raw/b10fa18aa252624ce178e064919d92c7929d7d50/server/protocols/jmap/src/main/java/org/apache/james/jmap/crypto/JamesSignatureHandler.java", "blob_url": "https://github.com/apache/james-project/blob/b10fa18aa252624ce178e064919d92c7929d7d50/server/protocols/jmap/src/main/java/org/apache/james/jmap/crypto/JamesSignatureHandler.java", "sha": "5d3dd4fd2a17fd39c08362d60baac15ba41c881d", "changes": 16, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/james-project/contents/server/protocols/jmap/src/main/java/org/apache/james/jmap/crypto/JamesSignatureHandler.java?ref=b10fa18aa252624ce178e064919d92c7929d7d50", "patch": "@@ -23,11 +23,14 @@\n import java.security.InvalidKeyException;\n import java.security.Key;\n import java.security.KeyStore;\n+import java.security.KeyStoreException;\n import java.security.NoSuchAlgorithmException;\n import java.security.PrivateKey;\n import java.security.PublicKey;\n import java.security.Signature;\n import java.security.SignatureException;\n+import java.security.cert.Certificate;\n+import java.util.Optional;\n \n import javax.inject.Inject;\n \n@@ -65,11 +68,16 @@\n     public void init() throws Exception {\n         KeyStore keystore = KeyStore.getInstance(JKS);\n         InputStream fis = fileSystem.getResource(jmapConfiguration.getKeystore());\n-        keystore.load(fis, jmapConfiguration.getSecret().toCharArray());\n-        publicKey = keystore.getCertificate(ALIAS).getPublicKey();\n-        Key key = keystore.getKey(ALIAS, jmapConfiguration.getSecret().toCharArray());\n+        char[] secret = jmapConfiguration.getSecret().toCharArray();\n+        keystore.load(fis, secret);\n+        Certificate aliasCertificate = Optional\n+                .ofNullable(keystore.getCertificate(ALIAS))\n+                .orElseThrow(() -> new KeyStoreException(\"Alias '\" + ALIAS + \"' keystore can't be found\"));\n+\n+        publicKey = aliasCertificate.getPublicKey();\n+        Key key = keystore.getKey(ALIAS, secret);\n         if (! (key instanceof PrivateKey)) {\n-            throw new Exception(\"Provided key is not a PrivateKey\");\n+            throw new KeyStoreException(\"Provided key is not a PrivateKey\");\n         }\n         privateKey = (PrivateKey) key;\n     }", "filename": "server/protocols/jmap/src/main/java/org/apache/james/jmap/crypto/JamesSignatureHandler.java"}, {"additions": 22, "raw_url": "https://github.com/apache/james-project/raw/b10fa18aa252624ce178e064919d92c7929d7d50/server/protocols/jmap/src/test/java/org/apache/james/jmap/crypto/JamesSignatureHandlerProvider.java", "blob_url": "https://github.com/apache/james-project/blob/b10fa18aa252624ce178e064919d92c7929d7d50/server/protocols/jmap/src/test/java/org/apache/james/jmap/crypto/JamesSignatureHandlerProvider.java", "sha": "c531581535ee0e0b23d99f81921bd9b78b100de1", "changes": 33, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/james-project/contents/server/protocols/jmap/src/test/java/org/apache/james/jmap/crypto/JamesSignatureHandlerProvider.java?ref=b10fa18aa252624ce178e064919d92c7929d7d50", "patch": "@@ -27,8 +27,10 @@\n \n import org.apache.james.filesystem.api.FileSystem;\n import org.apache.james.jmap.JMAPConfiguration;\n+import org.apache.james.jmap.JMAPConfiguration.Builder;\n \n public class JamesSignatureHandlerProvider {\n+\n     private static final String JWT_PUBLIC_KEY = \"-----BEGIN PUBLIC KEY-----\\n\" +\n         \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtlChO/nlVP27MpdkG0Bh\\n\" +\n         \"16XrMRf6M4NeyGa7j5+1UKm42IKUf3lM28oe82MqIIRyvskPc11NuzSor8HmvH8H\\n\" +\n@@ -39,11 +41,29 @@\n         \"kwIDAQAB\\n\" +\n         \"-----END PUBLIC KEY-----\";\n \n+    public JamesSignatureHandlerProvider() {\n+    }\n+\n     public JamesSignatureHandler provide() throws Exception {\n-        FileSystem fileSystem = new FileSystem() {\n+        JamesSignatureHandler signatureHandler = new JamesSignatureHandler(newFileSystem(),\n+                newConfigurationBuilder().build());\n+        signatureHandler.init();\n+        return signatureHandler;\n+    }\n+\n+    public static Builder newConfigurationBuilder() {\n+        return JMAPConfiguration.builder()\n+            .enable()\n+            .keystore(\"keystore\")\n+            .secret(\"james72laBalle\")\n+            .jwtPublicKeyPem(Optional.of(JWT_PUBLIC_KEY));\n+    }\n+\n+    public static FileSystem newFileSystem() {\n+        return new FileSystem() {\n             @Override\n             public InputStream getResource(String url) throws IOException {\n-                return ClassLoader.getSystemResourceAsStream(\"keystore\");\n+                return ClassLoader.getSystemResourceAsStream(url);\n             }\n \n             @Override\n@@ -56,15 +76,6 @@ public File getBasedir() throws FileNotFoundException {\n                 return null;\n             }\n         };\n-        JamesSignatureHandler signatureHandler = new JamesSignatureHandler(fileSystem, \n-                JMAPConfiguration.builder()\n-                    .enable()\n-                    .keystore(\"keystore\")\n-                    .secret(\"james72laBalle\")\n-                    .jwtPublicKeyPem(Optional.of(JWT_PUBLIC_KEY))\n-                    .build());\n-        signatureHandler.init();\n-        return signatureHandler;\n     }\n \n }", "filename": "server/protocols/jmap/src/test/java/org/apache/james/jmap/crypto/JamesSignatureHandlerProvider.java"}, {"additions": 16, "raw_url": "https://github.com/apache/james-project/raw/b10fa18aa252624ce178e064919d92c7929d7d50/server/protocols/jmap/src/test/java/org/apache/james/jmap/crypto/JamesSignatureHandlerTest.java", "blob_url": "https://github.com/apache/james-project/blob/b10fa18aa252624ce178e064919d92c7929d7d50/server/protocols/jmap/src/test/java/org/apache/james/jmap/crypto/JamesSignatureHandlerTest.java", "sha": "e885f415ef174239c74e27cdf0104f543a573336", "changes": 17, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/james-project/contents/server/protocols/jmap/src/test/java/org/apache/james/jmap/crypto/JamesSignatureHandlerTest.java?ref=b10fa18aa252624ce178e064919d92c7929d7d50", "patch": "@@ -21,6 +21,9 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n+import java.security.KeyStoreException;\n+\n+import org.apache.james.jmap.JMAPConfiguration;\n import org.junit.Before;\n import org.junit.Test;\n \n@@ -34,7 +37,19 @@\n \n     @Before\n     public void setUp() throws Exception {\n-        signatureHandler = new JamesSignatureHandlerProvider().provide();\n+       signatureHandler = new JamesSignatureHandlerProvider().provide();\n+    }\n+\n+    @Test(expected = KeyStoreException.class)\n+    public void initShouldThrowOnUnknownKeystore() throws Exception {\n+        JMAPConfiguration jmapConfiguration = JamesSignatureHandlerProvider.newConfigurationBuilder()\n+            .keystore(\"badAliasKeystore\")\n+            .secret(\"password\")\n+            .build();\n+\n+        JamesSignatureHandler signatureHandler = new JamesSignatureHandler(JamesSignatureHandlerProvider.newFileSystem(),\n+                jmapConfiguration);\n+        signatureHandler.init();\n     }\n \n     @Test", "filename": "server/protocols/jmap/src/test/java/org/apache/james/jmap/crypto/JamesSignatureHandlerTest.java"}, {"additions": 0, "raw_url": "https://github.com/apache/james-project/raw/b10fa18aa252624ce178e064919d92c7929d7d50/server/protocols/jmap/src/test/resources/badAliasKeystore", "blob_url": "https://github.com/apache/james-project/blob/b10fa18aa252624ce178e064919d92c7929d7d50/server/protocols/jmap/src/test/resources/badAliasKeystore", "sha": "0a4de224f8f3f8dc59ea84b6f45ad3abbfc1434b", "changes": 0, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/james-project/contents/server/protocols/jmap/src/test/resources/badAliasKeystore?ref=b10fa18aa252624ce178e064919d92c7929d7d50", "filename": "server/protocols/jmap/src/test/resources/badAliasKeystore"}], "repo": "james-project"}, {"commit": "https://github.com/apache/james-project/commit/570996295199e4212bac6d9192ecaad93d64570b", "parent": "https://github.com/apache/james-project/commit/9fc7e722d415b95ce2898c6419de44b86110c11e", "message": "JAMES-2223 NPE in MessageContantExtractor when no content dispostion", "bug_id": "james-project_3", "file": [{"additions": 2, "raw_url": "https://github.com/apache/james-project/raw/570996295199e4212bac6d9192ecaad93d64570b/server/container/util-java8/src/main/java/org/apache/james/util/mime/MessageContentExtractor.java", "blob_url": "https://github.com/apache/james-project/blob/570996295199e4212bac6d9192ecaad93d64570b/server/container/util-java8/src/main/java/org/apache/james/util/mime/MessageContentExtractor.java", "sha": "09d2916e4d619e0acd8257ffd3057b6eb993577c", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/james-project/contents/server/container/util-java8/src/main/java/org/apache/james/util/mime/MessageContentExtractor.java?ref=570996295199e4212bac6d9192ecaad93d64570b", "patch": "@@ -173,7 +173,8 @@ private boolean isNotAttachment(Entity part) {\n     }\n \n     private boolean isInlinedWithoutCid(Entity part) {\n-        return part.getDispositionType().equals(MimeMessage.INLINE) && part.getHeader().getField(CONTENT_ID) == null;\n+        return Objects.equals(part.getDispositionType(), MimeMessage.INLINE)\n+            && part.getHeader().getField(CONTENT_ID) == null;\n     }\n \n     public static class MessageContent {", "filename": "server/container/util-java8/src/main/java/org/apache/james/util/mime/MessageContentExtractor.java"}, {"additions": 5, "raw_url": "https://github.com/apache/james-project/raw/570996295199e4212bac6d9192ecaad93d64570b/server/protocols/jmap-integration-testing/jmap-integration-testing-common/src/test/java/org/apache/james/jmap/methods/integration/cucumber/GetMessagesMethodStepdefs.java", "blob_url": "https://github.com/apache/james-project/blob/570996295199e4212bac6d9192ecaad93d64570b/server/protocols/jmap-integration-testing/jmap-integration-testing-common/src/test/java/org/apache/james/jmap/methods/integration/cucumber/GetMessagesMethodStepdefs.java", "sha": "2717d7eb0a9ca7ac02417981d2ac0ee22fc28c94", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/james-project/contents/server/protocols/jmap-integration-testing/jmap-integration-testing-common/src/test/java/org/apache/james/jmap/methods/integration/cucumber/GetMessagesMethodStepdefs.java?ref=570996295199e4212bac6d9192ecaad93d64570b", "patch": "@@ -327,6 +327,11 @@ public void appendMessageWithSameInlinedAttachmentsToMailbox(String messageName,\n         appendMessage(messageName, mailbox, \"eml/sameInlinedImages.eml\");\n     }\n \n+    @Given(\"^\\\"([^\\\"]*)\\\" has a message \\\"([^\\\"]*)\\\" in the \\\"([^\\\"]*)\\\" mailbox with inlined attachments without content disposition$\")\n+    public void test(String username, String messageName, String mailbox) throws Exception {\n+        userStepdefs.execWithUser(username, () -> appendMessage(messageName, mailbox, \"eml/inlinedWithoutContentDisposition.eml\"));\n+    }\n+\n     @Given(\"^\\\"([^\\\"]*)\\\" has a message \\\"([^\\\"]*)\\\" in \\\"([^\\\"]*)\\\" mailbox with specific charset$\")\n     public void appendMessageWithSpecificCharset(String username, String messageName, String mailbox) throws Throwable {\n         userStepdefs.execWithUser(username, () -> appendMessageWithSpecificCharset(messageName, mailbox));", "filename": "server/protocols/jmap-integration-testing/jmap-integration-testing-common/src/test/java/org/apache/james/jmap/methods/integration/cucumber/GetMessagesMethodStepdefs.java"}, {"additions": 9, "raw_url": "https://github.com/apache/james-project/raw/570996295199e4212bac6d9192ecaad93d64570b/server/protocols/jmap-integration-testing/jmap-integration-testing-common/src/test/resources/cucumber/GetMessages.feature", "blob_url": "https://github.com/apache/james-project/blob/570996295199e4212bac6d9192ecaad93d64570b/server/protocols/jmap-integration-testing/jmap-integration-testing-common/src/test/resources/cucumber/GetMessages.feature", "sha": "fcf952f956529502525b462ce32c1767ca148de5", "changes": 10, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/james-project/contents/server/protocols/jmap-integration-testing/jmap-integration-testing-common/src/test/resources/cucumber/GetMessages.feature?ref=570996295199e4212bac6d9192ecaad93d64570b", "patch": "@@ -419,4 +419,12 @@ Feature: GetMessages method\n     When \"alice@domain.tld\" ask for messages \"m1\"\n     Then no error is returned\n     And the list should contain 1 message\n-    And the isForwarded property of the message is \"false\"\n\\ No newline at end of file\n+    And the isForwarded property of the message is \"false\"\n+\n+  Scenario: Retrieving message should be possible when message with inlined attachment but without content disposition\n+    Given \"alice@domain.tld\" has a message \"m1\" in the \"INBOX\" mailbox with inlined attachments without content disposition\n+    When \"alice@domain.tld\" ask for messages \"m1\"\n+    Then no error is returned\n+    And the list should contain 1 message\n+    And the hasAttachment of the message is \"true\"\n+    And the list of attachments of the message contains 1 attachments", "filename": "server/protocols/jmap-integration-testing/jmap-integration-testing-common/src/test/resources/cucumber/GetMessages.feature"}, {"additions": 69, "raw_url": "https://github.com/apache/james-project/raw/570996295199e4212bac6d9192ecaad93d64570b/server/protocols/jmap-integration-testing/jmap-integration-testing-common/src/test/resources/eml/inlinedWithoutContentDisposition.eml", "blob_url": "https://github.com/apache/james-project/blob/570996295199e4212bac6d9192ecaad93d64570b/server/protocols/jmap-integration-testing/jmap-integration-testing-common/src/test/resources/eml/inlinedWithoutContentDisposition.eml", "sha": "a3713d6ee4e52f496942ad19d603e162dc0110ff", "changes": 69, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/james-project/contents/server/protocols/jmap-integration-testing/jmap-integration-testing-common/src/test/resources/eml/inlinedWithoutContentDisposition.eml?ref=570996295199e4212bac6d9192ecaad93d64570b", "patch": "@@ -0,0 +1,69 @@\n+FCC: imap://user@localhost.com/Sent\n+X-Identity-Key: id6\n+X-Account-Key: account7\n+Subject: Re: Excuse pour vendredi dernier\n+To: To User <to@localhost.com>\n+From: From User <from@localhost.com>\n+X-Enigmail-Draft-Status: N1110\n+Message-ID: <55AE39CD.8050802>\n+Date: Tue, 21 Jul 2015 14:23:41 +0200\n+X-Mozilla-Draft-Info: internal/draft; vcard=0; receipt=0; DSN=0; uuencode=0;\n+ attachmentreminder=0\n+User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:38.0) Gecko/20100101\n+ Thunderbird/38.1.0\n+MIME-Version: 1.0\n+In-Reply-To: <dcc6e01637bbd527c411f34de96e6326>\n+Content-Type: multipart/encrypted;\n+ protocol=\"application/pgp-encrypted\";\n+ boundary=\"09AtNRN8t1bkTL9UtJde8HAiXSJ7dIX0X\"\n+\n+This is an OpenPGP/MIME encrypted message (RFC 4880 and 3156)\n+--09AtNRN8t1bkTL9UtJde8HAiXSJ7dIX0X\n+Content-Type: application/pgp-encrypted\n+Content-Description: PGP/MIME version identification\n+\n+Version: 1\n+\n+--09AtNRN8t1bkTL9UtJde8HAiXSJ7dIX0X\n+Content-Type: application/octet-stream; name=\"encrypted.asc\"\n+Content-Description: OpenPGP encrypted message\n+Content-Disposition: inline; filename=\"encrypted.asc\"\n+\n+-----BEGIN PGP MESSAGE-----\n+Version: GnuPG v2\n+\n+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\n+=4I6B\n+-----END PGP MESSAGE-----\n+\n+--09AtNRN8t1bkTL9UtJde8HAiXSJ7dIX0X--\n\\ No newline at end of file", "filename": "server/protocols/jmap-integration-testing/jmap-integration-testing-common/src/test/resources/eml/inlinedWithoutContentDisposition.eml"}], "repo": "james-project"}, {"commit": "https://github.com/apache/james-project/commit/8942eaff850265defa6c9c6e629350067d65a1f9", "parent": "https://github.com/apache/james-project/commit/95d241de993bd78baec2958d65b59ed9f4a5fda9", "message": "JAMES-1982 Set logger on MailboxManagement to avoid NPE", "bug_id": "james-project_4", "file": [{"additions": 35, "raw_url": "https://github.com/apache/james-project/raw/8942eaff850265defa6c9c6e629350067d65a1f9/server/container/guice/jmx/src/main/java/org/apache/james/modules/server/JMXServerModule.java", "blob_url": "https://github.com/apache/james-project/blob/8942eaff850265defa6c9c6e629350067d65a1f9/server/container/guice/jmx/src/main/java/org/apache/james/modules/server/JMXServerModule.java", "sha": "626ef3aee054762c91d450ed7f2cdc58ffb3e697", "changes": 36, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/james-project/contents/server/container/guice/jmx/src/main/java/org/apache/james/modules/server/JMXServerModule.java?ref=8942eaff850265defa6c9c6e629350067d65a1f9", "patch": "@@ -47,11 +47,13 @@\n import org.apache.james.user.lib.UsersRepositoryManagement;\n import org.apache.james.utils.ConfigurationPerformer;\n import org.apache.james.utils.GuiceMailboxManagerResolver;\n+import org.slf4j.LoggerFactory;\n \n import com.google.common.base.Throwables;\n import com.google.common.collect.ImmutableList;\n import com.google.inject.AbstractModule;\n import com.google.inject.Inject;\n+import com.google.inject.Scopes;\n import com.google.inject.Singleton;\n import com.google.inject.multibindings.Multibinder;\n import com.google.inject.name.Names;\n@@ -69,6 +71,15 @@\n \n     @Override\n     protected void configure() {\n+        bind(ReIndexerManagement.class).in(Scopes.SINGLETON);\n+        bind(QuotaManagement.class).in(Scopes.SINGLETON);\n+        bind(RecipientRewriteTableManagement.class).in(Scopes.SINGLETON);\n+        bind(MailboxManagerManagement.class).in(Scopes.SINGLETON);\n+        bind(UsersRepositoryManagement.class).in(Scopes.SINGLETON);\n+        bind(DomainListManagement.class).in(Scopes.SINGLETON);\n+        bind(MailboxCopierManagement.class).in(Scopes.SINGLETON);\n+        bind(SieveRepositoryManagement.class).in(Scopes.SINGLETON);\n+\n         bind(MailboxCopier.class).annotatedWith(Names.named(\"mailboxcopier\")).to(MailboxCopierImpl.class);\n         bind(MailboxCopierManagementMBean.class).to(MailboxCopierManagement.class);\n         bind(MailboxManagerResolver.class).to(GuiceMailboxManagerResolver.class);\n@@ -81,7 +92,9 @@ protected void configure() {\n         bind(ReIndexerManagementMBean.class).to(ReIndexerManagement.class);\n         bind(QuotaManagementMBean.class).to(QuotaManagement.class);\n         bind(SieveRepositoryManagementMBean.class).to(SieveRepositoryManagement.class);\n-        Multibinder.newSetBinder(binder(), ConfigurationPerformer.class).addBinding().to(JMXModuleConfigurationPerformer.class);\n+        Multibinder<ConfigurationPerformer> configurationMultibinder = Multibinder.newSetBinder(binder(), ConfigurationPerformer.class);\n+        configurationMultibinder.addBinding().to(JMXModuleConfigurationPerformer.class);\n+        configurationMultibinder.addBinding().to(MailboxManagementLogSetter.class);\n     }\n \n     @Singleton\n@@ -141,4 +154,25 @@ public void initModule() {\n         }\n     }\n \n+    @Singleton\n+    public static class MailboxManagementLogSetter implements ConfigurationPerformer {\n+\n+        private final MailboxManagerManagement mailboxManagerManagement;\n+\n+        @Inject\n+        public MailboxManagementLogSetter(MailboxManagerManagement mailboxManagerManagement) {\n+            this.mailboxManagerManagement = mailboxManagerManagement;\n+        }\n+\n+        @Override\n+        public void initModule() {\n+            mailboxManagerManagement.setLog(LoggerFactory.getLogger(MailboxManagerManagement.class));\n+        }\n+\n+        @Override\n+        public List<Class<? extends Configurable>> forClasses() {\n+            return ImmutableList.of();\n+        }\n+    }\n+\n }", "filename": "server/container/guice/jmx/src/main/java/org/apache/james/modules/server/JMXServerModule.java"}], "repo": "james-project"}, {"commit": "https://github.com/apache/james-project/commit/b0d973c0d86395789e2f2036750d2f8bfaa5fdc3", "parent": "https://github.com/apache/james-project/commit/cbd2bdf62ff989a18de614de389568a604968814", "message": "improved fix for JAMES-1815, also fixes potential NPE", "bug_id": "james-project_5", "file": [{"additions": 7, "raw_url": "https://github.com/apache/james-project/raw/b0d973c0d86395789e2f2036750d2f8bfaa5fdc3/server/data/data-library/src/main/java/org/apache/james/domainlist/lib/AbstractDomainList.java", "blob_url": "https://github.com/apache/james-project/blob/b0d973c0d86395789e2f2036750d2f8bfaa5fdc3/server/data/data-library/src/main/java/org/apache/james/domainlist/lib/AbstractDomainList.java", "sha": "c84e836c205d97fba8bb53fcd43d7a2b03ad3bda", "changes": 12, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/james-project/contents/server/data/data-library/src/main/java/org/apache/james/domainlist/lib/AbstractDomainList.java?ref=b0d973c0d86395789e2f2036750d2f8bfaa5fdc3", "patch": "@@ -119,7 +119,7 @@ public String getDefaultDomain() throws DomainListException {\n         if (domains != null) {\n \n             // create mutable copy, some subclasses return ImmutableList\n-            domains = new ArrayList<String>(domains);\n+            ArrayList<String> mutableDomains = new ArrayList<String>(domains);\n \n             String hostName;\n             try {\n@@ -131,20 +131,22 @@ public String getDefaultDomain() throws DomainListException {\n             getLogger().info(\"Local host is: \" + hostName);\n \n             if (autoDetect && (!hostName.equals(\"localhost\"))) {\n-                domains.add(hostName.toLowerCase(Locale.US));\n+                mutableDomains.add(hostName.toLowerCase(Locale.US));\n             }\n \n             if (autoDetectIP) {\n-                domains.addAll(getDomainsIP(domains, dns, getLogger()));\n+                mutableDomains.addAll(getDomainsIP(mutableDomains, dns, getLogger()));\n             }\n \n             if (getLogger().isInfoEnabled()) {\n-                for (String domain : domains) {\n+                for (String domain : mutableDomains) {\n                     getLogger().debug(\"Handling mail for: \" + domain);\n                 }\n             }\n+\n+            return ImmutableList.copyOf(mutableDomains);\n         }\n-        return ImmutableList.copyOf(domains);\n+        return ImmutableList.of();// empty list\n     }\n \n     /**", "filename": "server/data/data-library/src/main/java/org/apache/james/domainlist/lib/AbstractDomainList.java"}], "repo": "james-project"}, {"commit": "https://github.com/apache/james-project/commit/1835554ef47b467e2ec18f0ecc9d244cfe054c50", "parent": "https://github.com/apache/james-project/commit/45fba91dba433b21548425361c479f9d5d8bccae", "message": "Remove whitespace because of the NPE which happen with whitespace\n\ngit-svn-id: https://svn.apache.org/repos/asf/james/project/trunk@645044 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "james-project_6", "file": [{"additions": 1, "raw_url": "https://github.com/apache/james-project/raw/1835554ef47b467e2ec18f0ecc9d244cfe054c50/HOWTO_RELEASE.txt", "blob_url": "https://github.com/apache/james-project/blob/1835554ef47b467e2ec18f0ecc9d244cfe054c50/HOWTO_RELEASE.txt", "sha": "9b85efe568896c88b049a3db6a0f765c2e0c45a7", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/james-project/contents/HOWTO_RELEASE.txt?ref=1835554ef47b467e2ec18f0ecc9d244cfe054c50", "patch": "@@ -88,7 +88,7 @@ Howto release via maven release plugin:\n       \n       General:\n       1 Move to the root folder of the project:\n-      2 Use ' mvn -Plocal,release release:prepare -Dgpg.keyname=$(YOURKEYNAME) -Dgpg.passphrase=$(YOURPASSPHRASE) -Darguments=\"-Dgpg.keyname=$(YOURKEYNAME) -Dgpg.passphrase=$(YOURPASSPHRASE) \" ' to prepare the release\n+      2 Use ' mvn -Plocal,release release:prepare -Dgpg.keyname=$(YOURKEYNAME) -Dgpg.passphrase=$(YOURPASSPHRASE) -Darguments=\"-Dgpg.keyname=$(YOURKEYNAME) -Dgpg.passphrase=$(YOURPASSPHRASE)\" ' to prepare the release\n       3 Use ' mvn -Plocal,release release:perform -Dgoals=deploy -Darguments=\"-Dgoals=deploy\" ' to finally perfom all needed steps to finish the release stuff\n       4 If the step 3 does not work try this more verbose\n         ' mvn -Plocal,release release:perform -Dgoals=deploy -Dgpg.keyname=$(YOURKEYNAME) -Dgpg.passphrase=$(YOURPASSPHRASE) -Darguments=\"-Dgoals=deploy -Dgpg.keyname=$(YOURKEYNAME) -Dgpg.passphrase=$(YOURPASSPHRASE)\" '", "filename": "HOWTO_RELEASE.txt"}], "repo": "james-project"}]
