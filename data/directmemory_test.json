{
    "directmemory_f3cf17e": {
        "repo": "directmemory",
        "message": "[DIRECTMEMORY-73] NPE on put method in CacheServiceImpl when cache is full.\nSubmitted by Michael Andr\u00e9 Pearce.\nPatch modified with code formatting rule we use.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/directmemory/trunk@1293849 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/directmemory/commit/f3cf17ebf42e41c0724c2cd61b4e1fcb83555571",
        "parent": "https://github.com/apache/directmemory/commit/616670ef571362195da97570407b991c6ffee7d7",
        "bug_id": "directmemory_f3cf17e",
        "file": [
            {
                "sha": "2bf73340bd587079f40b1135c8f9fd209e6459eb",
                "filename": "directmemory-cache/src/main/java/org/apache/directmemory/cache/CacheServiceImpl.java",
                "blob_url": "https://github.com/apache/directmemory/blob/f3cf17ebf42e41c0724c2cd61b4e1fcb83555571/directmemory-cache/src/main/java/org/apache/directmemory/cache/CacheServiceImpl.java",
                "raw_url": "https://github.com/apache/directmemory/raw/f3cf17ebf42e41c0724c2cd61b4e1fcb83555571/directmemory-cache/src/main/java/org/apache/directmemory/cache/CacheServiceImpl.java",
                "status": "modified",
                "changes": 34,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/directmemory/contents/directmemory-cache/src/main/java/org/apache/directmemory/cache/CacheServiceImpl.java?ref=f3cf17ebf42e41c0724c2cd61b4e1fcb83555571",
                "patch": "@@ -19,15 +19,7 @@\n  * under the License.\n  */\n \n-import static java.lang.String.format;\n-import static org.apache.directmemory.serialization.SerializerFactory.createNewSerializer;\n-\n-import java.io.EOFException;\n-import java.io.IOException;\n-import java.util.Timer;\n-import java.util.TimerTask;\n-import java.util.concurrent.ConcurrentMap;\n-\n+import com.google.common.collect.MapMaker;\n import org.apache.directmemory.measures.Every;\n import org.apache.directmemory.measures.Ram;\n import org.apache.directmemory.memory.MemoryManagerService;\n@@ -38,7 +30,14 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.google.common.collect.MapMaker;\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import static java.lang.String.format;\n+import static org.apache.directmemory.serialization.SerializerFactory.createNewSerializer;\n \n public class CacheServiceImpl<K, V>\n     implements CacheService<K, V>\n@@ -142,11 +141,13 @@ public void init( int numberOfBuffers, int size )\n         {\n             byte[] payload = serializer.serialize( value );\n             Pointer<V> ptr = store( key, payload, expiresIn );\n+            if ( ptr != null )\n+            {\n+                @SuppressWarnings( \"unchecked\" ) // type driven by the compiler\n+                    Class<? extends V> clazz = (Class<? extends V>) value.getClass();\n \n-            @SuppressWarnings( \"unchecked\" ) // type driven by the compiler\n-            Class<? extends V> clazz = (Class<? extends V>) value.getClass();\n-\n-            ptr.setClazz( clazz );\n+                ptr.setClazz( clazz );\n+            }\n             return ptr;\n         }\n         catch ( IOException e )\n@@ -174,7 +175,10 @@ public void init( int numberOfBuffers, int size )\n         else\n         {\n             pointer = memoryManager.store( payload, expiresIn );\n-            map.put( key, pointer );\n+            if ( pointer != null )\n+            {\n+                map.put( key, pointer );\n+            }\n             return pointer;\n         }\n     }",
                "deletions": 15
            },
            {
                "sha": "ec134ac005e13c3215ce7d717762b243ff1501d5",
                "filename": "directmemory-cache/src/test/java/org/apache/directmemory/cache/CacheServiceImplTest.java",
                "blob_url": "https://github.com/apache/directmemory/blob/f3cf17ebf42e41c0724c2cd61b4e1fcb83555571/directmemory-cache/src/test/java/org/apache/directmemory/cache/CacheServiceImplTest.java",
                "raw_url": "https://github.com/apache/directmemory/raw/f3cf17ebf42e41c0724c2cd61b4e1fcb83555571/directmemory-cache/src/test/java/org/apache/directmemory/cache/CacheServiceImplTest.java",
                "status": "added",
                "changes": 56,
                "additions": 56,
                "contents_url": "https://api.github.com/repos/apache/directmemory/contents/directmemory-cache/src/test/java/org/apache/directmemory/cache/CacheServiceImplTest.java?ref=f3cf17ebf42e41c0724c2cd61b4e1fcb83555571",
                "patch": "@@ -0,0 +1,56 @@\n+package org.apache.directmemory.cache;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import org.apache.directmemory.measures.Ram;\n+import org.apache.directmemory.memory.AllocationPolicy;\n+import org.apache.directmemory.memory.MemoryManagerService;\n+import org.apache.directmemory.memory.MemoryManagerServiceWithAllocationPolicyImpl;\n+import org.apache.directmemory.memory.Pointer;\n+import org.apache.directmemory.memory.RoundRobinAllocationPolicy;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class CacheServiceImplTest\n+{\n+\n+    @Test\n+    public void testOffHeapExceedMemoryReturnNullWhenTrue()\n+    {\n+        AllocationPolicy<byte[]> allocationPolicy = new RoundRobinAllocationPolicy<byte[]>();\n+        MemoryManagerService<byte[]> memoryManager =\n+            new MemoryManagerServiceWithAllocationPolicyImpl<byte[]>( allocationPolicy, true );\n+        CacheService<Integer, byte[]> cache = new CacheServiceImpl<Integer, byte[]>( memoryManager );\n+        cache.init( 1, (int) ( Ram.Mb( 1 ) ) );\n+\n+        for ( int i = 0; i < 1000; i++ )\n+        {\n+            Pointer<byte[]> pointer = cache.put( i, new byte[1024] );\n+            if ( ( i % 100 ) == 0 )\n+            {\n+                System.out.println( pointer );\n+            }\n+        }\n+        Assert.assertTrue( \"This test ensures that no unexpected errors/behaviours occurs when heap space is full\",\n+                           true );\n+\n+    }\n+\n+}",
                "deletions": 0
            }
        ],
        "patched_files": [
            "CacheServiceImpl.java"
        ],
        "unit_tests": [
            "CacheServiceImplTest.java"
        ]
    }
}