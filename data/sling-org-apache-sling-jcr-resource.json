{
    "sling-org-apache-sling-jcr-resource_149e81b": {
        "bug_id": "sling-org-apache-sling-jcr-resource_149e81b",
        "commit": "https://github.com/apache/sling-org-apache-sling-jcr-resource/commit/149e81b37229f5cac73bf706b2e36785a990cbec",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/149e81b37229f5cac73bf706b2e36785a990cbec/src/main/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProvider.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/src/main/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProvider.java?ref=149e81b37229f5cac73bf706b2e36785a990cbec",
                "deletions": 1,
                "filename": "src/main/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProvider.java",
                "patch": "@@ -392,7 +392,7 @@ public Object getAttribute(final ResourceResolver resolver, final String name) {\n             return (AdapterType) session;\n         } else if (type == Principal.class) {       \n             try {\n-                if (this.session instanceof JackrabbitSession){\n+                if (this.session instanceof JackrabbitSession && session.getUserID()!=null) {\n                     JackrabbitSession s =((JackrabbitSession) this.session);\n                     final UserManager um = s.getUserManager();\n                     if (um != null) {",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/149e81b37229f5cac73bf706b2e36785a990cbec/src/main/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProvider.java",
                "sha": "69e1f4200f971d74b4519267c413c9f3925fbc94",
                "status": "modified"
            }
        ],
        "message": "SLING-3831 - Possible NPE in JcrResourceProvider#adaptTo\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1616478 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/sling-org-apache-sling-jcr-resource/commit/be2700a60d1ab98a8983ed3e3b61b9ddd33d27e8",
        "repo": "sling-org-apache-sling-jcr-resource",
        "unit_tests": [
            "JcrResourceProviderTest.java"
        ]
    },
    "sling-org-apache-sling-jcr-resource_1b29aa7": {
        "bug_id": "sling-org-apache-sling-jcr-resource_1b29aa7",
        "commit": "https://github.com/apache/sling-org-apache-sling-jcr-resource/commit/1b29aa73b477f574d20963a027f361613cbe0464",
        "file": [
            {
                "additions": 69,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/1b29aa73b477f574d20963a027f361613cbe0464/src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceListener.java",
                "changes": 135,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceListener.java?ref=1b29aa73b477f574d20963a027f361613cbe0464",
                "deletions": 66,
                "filename": "src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceListener.java",
                "patch": "@@ -34,22 +34,18 @@\n import javax.jcr.observation.EventIterator;\n import javax.jcr.observation.EventListener;\n \n-import org.apache.felix.scr.annotations.Activate;\n-import org.apache.felix.scr.annotations.Component;\n-import org.apache.felix.scr.annotations.Deactivate;\n-import org.apache.felix.scr.annotations.Properties;\n-import org.apache.felix.scr.annotations.Property;\n-import org.apache.felix.scr.annotations.Reference;\n-import org.apache.felix.scr.annotations.ReferencePolicy;\n import org.apache.jackrabbit.api.observation.JackrabbitEvent;\n import org.apache.sling.api.SlingConstants;\n import org.apache.sling.api.resource.LoginException;\n import org.apache.sling.api.resource.Resource;\n import org.apache.sling.api.resource.ResourceResolver;\n import org.apache.sling.api.resource.ResourceResolverFactory;\n-import org.osgi.framework.Constants;\n+import org.apache.sling.jcr.api.SlingRepository;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.ServiceReference;\n import org.osgi.service.event.EventAdmin;\n import org.osgi.service.event.EventConstants;\n+import org.osgi.util.tracker.ServiceTracker;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -58,34 +54,26 @@\n  * events and creates resource events which are sent through the\n  * OSGi event admin.\n  */\n-@Component(immediate = true)\n-@Properties({\n-    @Property(name = Constants.SERVICE_DESCRIPTION, value = \"Apache Sling JcrResourceListener\"),\n-    @Property(name = Constants.SERVICE_VENDOR, value = \"The Apache Software Foundation\")\n-\n-})\n public class JcrResourceListener implements EventListener {\n \n     /** Logger */\n     private final Logger logger = LoggerFactory.getLogger(JcrResourceListener.class);\n \n-    @Reference(policy=ReferencePolicy.DYNAMIC)\n-    private EventAdmin eventAdmin;\n+    private final ServiceTracker eventAdminTracker;\n \n-    @Reference\n-    private ResourceResolverFactory resourceResolverFactory;\n+    private ServiceReference resourceResolverFactoryReference;\n \n     /** The admin resource resolver. */\n     private ResourceResolver resourceResolver;\n \n     /** The session for observation. */\n-    private Session session;\n+    private final Session session;\n \n     /** Everything below this path is observed. */\n-    private String startPath;\n+    private final String startPath;\n \n     /** The repository is mounted under this path. */\n-    private String mountPrefix;\n+    private final String mountPrefix;\n \n     /** Is the Jackrabbit event class available? */\n     private final boolean hasJackrabbitEventClass;\n@@ -96,15 +84,21 @@\n      * waiting for actual dispatching to the OSGi Event Admin in\n      * {@link #processOsgiEventQueue()}\n      */\n-    private LinkedBlockingQueue<Dictionary<String, Object>> osgiEventQueue;\n+    private final LinkedBlockingQueue<Dictionary<String, Object>> osgiEventQueue;\n+\n+    private final BundleContext bundleContext;\n \n     /**\n      * Marker event for {@link #processOsgiEventQueue()} to be signaled to\n      * terminate processing Events.\n      */\n     private final Dictionary<String, Object> TERMINATE_PROCESSING = new Hashtable<String, Object>(1);\n \n-    public JcrResourceListener() {\n+    public JcrResourceListener(final String startPath,\n+                    final String mountPrefix,\n+                    final SlingRepository repository,\n+                    final BundleContext bundleContext)\n+    throws RepositoryException {\n         boolean foundClass = false;\n         try {\n             this.getClass().getClassLoader().loadClass(JackrabbitEvent.class.getName());\n@@ -113,58 +107,36 @@ public JcrResourceListener() {\n             // we ignore this\n         }\n         this.hasJackrabbitEventClass = foundClass;\n-    }\n+        this.startPath = startPath;\n+        this.mountPrefix = mountPrefix;\n+        this.bundleContext = bundleContext;\n \n-    @Activate\n-    protected void activate() throws LoginException {\n-        this.resourceResolver = this.resourceResolverFactory.getAdministrativeResourceResolver(null);\n-        this.startPath = \"/\";\n-        this.mountPrefix = null;\n+        this.eventAdminTracker = new ServiceTracker(bundleContext, EventAdmin.class.getName(), null);\n+        this.eventAdminTracker.open();\n+\n+        this.session = repository.loginAdministrative(null);\n+        try {\n+            session.getWorkspace().getObservationManager().addEventListener(this,\n+                            Event.NODE_ADDED|Event.NODE_REMOVED|Event.PROPERTY_ADDED|Event.PROPERTY_CHANGED|Event.PROPERTY_REMOVED,\n+                            this.startPath, true, null, null, false);\n+        } catch (final RepositoryException re) {\n+            session.logout();\n+            throw re;\n+        }\n \n         this.osgiEventQueue = new LinkedBlockingQueue<Dictionary<String,Object>>();\n         final Thread oeqt = new Thread(new Runnable() {\n             public void run() {\n-                init();\n                 processOsgiEventQueue();\n             }\n-        }, \"JCR Resource Event Queue Processor\");\n+        }, \"Apche Sling JCR Resource Event Queue Processor for path '\" + this.startPath + \"'\");\n         oeqt.start();\n-\n-    }\n-\n-    private void init() {\n-        // lazy polling\n-        Session session = null;\n-        ResourceResolver resolver = this.resourceResolver;\n-        while ( resolver != null && session == null ) {\n-            session = this.resourceResolver.adaptTo(Session.class);\n-            if ( session == null ) {\n-                try {\n-                    Thread.sleep(100);\n-                } catch (final InterruptedException ignore) {\n-                    // we ignore this\n-                }\n-                resolver = this.resourceResolver;\n-            }\n-        }\n-        if ( session != null ) {\n-            try {\n-                session.getWorkspace().getObservationManager().addEventListener(this,\n-                                Event.NODE_ADDED|Event.NODE_REMOVED|Event.PROPERTY_ADDED|Event.PROPERTY_CHANGED|Event.PROPERTY_REMOVED,\n-                                this.startPath, true, null, null, false);\n-                this.session = session;\n-            } catch (final RepositoryException re) {\n-                logger.error(\"Unable to register event listener.\", re);\n-                this.deactivate();\n-            }\n-        }\n     }\n \n     /**\n      * Dispose this listener.\n      */\n-    @Deactivate\n-    protected void deactivate() {\n+    public void deactivate() {\n         // unregister from observations\n         if ( this.session != null ) {\n             try {\n@@ -178,17 +150,25 @@ protected void deactivate() {\n             this.resourceResolver = null;\n         }\n \n+        if ( this.resourceResolverFactoryReference != null ) {\n+            this.bundleContext.ungetService(this.resourceResolverFactoryReference);\n+        }\n+\n         // drop any remaining OSGi Events not processed yet\n         this.osgiEventQueue.clear();\n         this.osgiEventQueue.offer(TERMINATE_PROCESSING);\n+\n+        if ( this.eventAdminTracker != null ) {\n+            this.eventAdminTracker.close();\n+        }\n     }\n \n     /**\n      * @see javax.jcr.observation.EventListener#onEvent(javax.jcr.observation.EventIterator)\n      */\n     public void onEvent(final EventIterator events) {\n         // if the event admin is currently not available, we just skip this\n-        final EventAdmin localEA = this.eventAdmin;\n+        final EventAdmin localEA = (EventAdmin) this.eventAdminTracker.getService();\n         if ( localEA == null ) {\n             return;\n         }\n@@ -337,6 +317,28 @@ private void sendOsgiEvent(final String path, final Event event, final String to\n         this.osgiEventQueue.offer(properties);\n     }\n \n+    /**\n+     * Get a resource resolver.\n+     * We don't need any syncing as this is called from the process osgi thread.\n+     */\n+    private ResourceResolver getResourceResolver() {\n+        if ( this.resourceResolver == null ) {\n+            final ServiceReference ref = this.bundleContext.getServiceReference(ResourceResolverFactory.class.getName());\n+            if ( ref != null ) {\n+                final ResourceResolverFactory factory = (ResourceResolverFactory) this.bundleContext.getService(ref);\n+                if ( factory != null ) {\n+                    try {\n+                        this.resourceResolver = factory.getAdministrativeResourceResolver(null);\n+                        this.resourceResolverFactoryReference = ref;\n+                    } catch (final LoginException le) {\n+                        logger.error(\"Unable to get administrative resource resolver.\", le);\n+                        this.bundleContext.ungetService(ref);\n+                    }\n+                }\n+            }\n+        }\n+        return this.resourceResolver;\n+    }\n     /**\n      * Called by the Runnable.run method of the JCR Event Queue processor to\n      * process the {@link #osgiEventQueue} until the\n@@ -357,11 +359,12 @@ void processOsgiEventQueue() {\n             }\n \n             try {\n-                final EventAdmin localEa = this.eventAdmin;\n-                if (localEa != null) {\n+                final EventAdmin localEa = (EventAdmin) this.eventAdminTracker.getService();\n+                final ResourceResolver resolver = this.getResourceResolver();\n+                if (localEa != null && resolver != null ) {\n                     final String topic = (String) event.remove(EventConstants.EVENT_TOPIC);\n                     final String path = (String) event.get(SlingConstants.PROPERTY_PATH);\n-                    Resource resource = this.resourceResolver.getResource(path);\n+                    Resource resource = resolver.getResource(path);\n                     boolean sendEvent = true;\n                     if (!SlingConstants.TOPIC_RESOURCE_REMOVED.equals(topic)) {\n                         if (resource != null) {",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/1b29aa73b477f574d20963a027f361613cbe0464/src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceListener.java",
                "sha": "79540c12c5e9318c7ff2f524343816ef2f4ad24e",
                "status": "modified"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/1b29aa73b477f574d20963a027f361613cbe0464/src/main/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderFactory.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/src/main/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderFactory.java?ref=1b29aa73b477f574d20963a027f361613cbe0464",
                "deletions": 0,
                "filename": "src/main/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderFactory.java",
                "patch": "@@ -27,7 +27,9 @@\n import javax.jcr.SimpleCredentials;\n import javax.jcr.query.Query;\n \n+import org.apache.felix.scr.annotations.Activate;\n import org.apache.felix.scr.annotations.Component;\n+import org.apache.felix.scr.annotations.Deactivate;\n import org.apache.felix.scr.annotations.Properties;\n import org.apache.felix.scr.annotations.Property;\n import org.apache.felix.scr.annotations.Reference;\n@@ -41,9 +43,12 @@\n import org.apache.sling.api.resource.ResourceResolver;\n import org.apache.sling.api.resource.ResourceResolverFactory;\n import org.apache.sling.commons.classloader.DynamicClassLoaderManager;\n+import org.apache.sling.commons.osgi.PropertiesUtil;\n import org.apache.sling.jcr.api.SlingRepository;\n import org.apache.sling.jcr.resource.JcrResourceConstants;\n+import org.apache.sling.jcr.resource.internal.JcrResourceListener;\n import org.osgi.framework.Constants;\n+import org.osgi.service.component.ComponentContext;\n \n /**\n  * The <code>JcrResourceProviderFactory</code> creates\n@@ -67,6 +72,24 @@\n     @Reference\n     private SlingRepository repository;\n \n+    /** The jcr resource listner. */\n+    private JcrResourceListener listener;\n+\n+    @Activate\n+    protected void activate(final ComponentContext context)\n+    throws RepositoryException {\n+        final String root = PropertiesUtil.toString(context.getProperties().get(ResourceProvider.ROOTS), \"/\");\n+        this.listener = new JcrResourceListener(root, null, this.repository, context.getBundleContext());\n+    }\n+\n+    @Deactivate\n+    protected void deactivate() {\n+        if ( this.listener != null ) {\n+            this.listener.deactivate();\n+            this.listener = null;\n+        }\n+    }\n+\n     /** Get the dynamic class loader if available */\n     ClassLoader getDynamicClassLoader() {\n         final DynamicClassLoaderManager dclm = this.dynamicClassLoaderManager;",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/1b29aa73b477f574d20963a027f361613cbe0464/src/main/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderFactory.java",
                "sha": "b5d8ca8a480dd98e6e5575490d6906add68a329e",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/1b29aa73b477f574d20963a027f361613cbe0464/src/test/java/org/apache/sling/jcr/resource/internal/JcrResourceListenerTest.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/src/test/java/org/apache/sling/jcr/resource/internal/JcrResourceListenerTest.java?ref=1b29aa73b477f574d20963a027f361613cbe0464",
                "deletions": 6,
                "filename": "src/test/java/org/apache/sling/jcr/resource/internal/JcrResourceListenerTest.java",
                "patch": "@@ -16,6 +16,10 @@\n  */\n package org.apache.sling.jcr.resource.internal;\n \n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n@@ -36,8 +40,10 @@\n import org.apache.sling.commons.testing.jcr.RepositoryTestBase;\n import org.apache.sling.commons.testing.jcr.RepositoryUtil;\n import org.apache.sling.jcr.resource.internal.helper.jcr.JcrNodeResource;\n+import org.osgi.framework.BundleContext;\n import org.osgi.service.event.Event;\n import org.osgi.service.event.EventAdmin;\n+import org.osgi.util.tracker.ServiceTracker;\n \n /**\n  * Test of JcrResourceListener.\n@@ -52,16 +58,16 @@\n     @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n-        RepositoryUtil.startRepository();\n-        final Session adminSession = RepositoryUtil.getRepository().loginAdministrative(null);\n-        RepositoryUtil.registerSlingNodeTypes(adminSession);\n-        adminSession.logout();\n+        RepositoryUtil.stopRepository();\n     }\n \n     @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n-        RepositoryUtil.stopRepository();\n+        RepositoryUtil.startRepository();\n+        final Session adminSession = RepositoryUtil.getRepository().loginAdministrative(null);\n+        RepositoryUtil.registerSlingNodeTypes(adminSession);\n+        adminSession.logout();\n     }\n \n     public void testDefaultWorkspace() throws Exception {\n@@ -264,7 +270,16 @@ public void sendEvent(Event event) {\n             }\n         };\n \n-        SynchronousJcrResourceListener listener = new SynchronousJcrResourceListener(factory, mockEA);\n+        final ServiceTracker tracker = mock(ServiceTracker.class);\n+        when(tracker.getService()).thenReturn(mockEA);\n+\n+        final BundleContext bundleContext = mock(BundleContext.class);\n+        when(bundleContext.createFilter(any(String.class))).thenReturn(null);\n+        when(bundleContext.getServiceReference(any(String.class))).thenReturn(null);\n+        when(bundleContext.getService(null)).thenReturn(mockEA);\n+\n+        SynchronousJcrResourceListener listener = new SynchronousJcrResourceListener(factory, getRepository(),\n+                        bundleContext, resolver, tracker);\n \n         createdPath = createTestPath();\n         createNode(session, createdPath);",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/1b29aa73b477f574d20963a027f361613cbe0464/src/test/java/org/apache/sling/jcr/resource/internal/JcrResourceListenerTest.java",
                "sha": "e509776334af25a8950069404ba37d3432d56ae3",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/1b29aa73b477f574d20963a027f361613cbe0464/src/test/java/org/apache/sling/jcr/resource/internal/SynchronousJcrResourceListener.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/src/test/java/org/apache/sling/jcr/resource/internal/SynchronousJcrResourceListener.java?ref=1b29aa73b477f574d20963a027f361613cbe0464",
                "deletions": 5,
                "filename": "src/test/java/org/apache/sling/jcr/resource/internal/SynchronousJcrResourceListener.java",
                "patch": "@@ -22,8 +22,11 @@\n \n import org.apache.jackrabbit.core.observation.SynchronousEventListener;\n import org.apache.sling.api.resource.LoginException;\n+import org.apache.sling.api.resource.ResourceResolver;\n import org.apache.sling.api.resource.ResourceResolverFactory;\n-import org.osgi.service.event.EventAdmin;\n+import org.apache.sling.jcr.api.SlingRepository;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.util.tracker.ServiceTracker;\n \n /**\n  * This class is used to ensure that events are handled during the test.\n@@ -35,11 +38,15 @@\n public class SynchronousJcrResourceListener extends JcrResourceListener implements SynchronousEventListener {\n \n     public SynchronousJcrResourceListener(\n-            ResourceResolverFactory factory, EventAdmin eventAdmin)\n+            ResourceResolverFactory factory,\n+            SlingRepository repo,\n+            BundleContext bundleContext,\n+            final ResourceResolver resolver,\n+            final ServiceTracker tracker)\n             throws LoginException, RepositoryException, NoSuchFieldException {\n-        PrivateAccessor.setField(this, \"resourceResolverFactory\", factory);\n-        PrivateAccessor.setField(this, \"eventAdmin\", eventAdmin);\n-        this.activate();\n+        super(\"/\", null, repo, bundleContext);\n+        PrivateAccessor.setField(this, \"resourceResolver\", resolver);\n+        PrivateAccessor.setField(this, \"eventAdminTracker\", tracker);\n     }\n \n     public void dispose() {",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/1b29aa73b477f574d20963a027f361613cbe0464/src/test/java/org/apache/sling/jcr/resource/internal/SynchronousJcrResourceListener.java",
                "sha": "4763702c3d9591c8a094861c6a108ea4e9c0b389",
                "status": "modified"
            }
        ],
        "message": "SLING-2573 : JcrResourceListener activation is failing with NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1376876 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/sling-org-apache-sling-jcr-resource/commit/be8ab2053a9e462539e53d3fbca5a69533c3cde4",
        "repo": "sling-org-apache-sling-jcr-resource",
        "unit_tests": [
            "JcrResourceListenerTest.java"
        ]
    },
    "sling-org-apache-sling-jcr-resource_301a487": {
        "bug_id": "sling-org-apache-sling-jcr-resource_301a487",
        "commit": "https://github.com/apache/sling-org-apache-sling-jcr-resource/commit/301a487159522336702ae2ebeaf28b9f830f4019",
        "file": [
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/301a487159522336702ae2ebeaf28b9f830f4019/src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceListener.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceListener.java?ref=301a487159522336702ae2ebeaf28b9f830f4019",
                "deletions": 6,
                "filename": "src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceListener.java",
                "patch": "@@ -134,9 +134,15 @@ public void onEvent(EventIterator events) {\n             final Resource resource = this.resolver.getResource(path);\n             if ( resource != null ) {\n                 final Dictionary<String, String> properties = new Hashtable<String, String>();\n-                properties.put(SlingConstants.PROPERTY_PATH, resource.getPath());\n-                properties.put(SlingConstants.PROPERTY_RESOURCE_TYPE, resource.getResourceType());\n-                properties.put(SlingConstants.PROPERTY_RESOURCE_SUPER_TYPE, resource.getResourceSuperType());\n+                properties.put(SlingConstants.PROPERTY_PATH, path);\n+                final String resourceType = resource.getResourceType();\n+                final String resourceSuperType = resource.getResourceSuperType();\n+                if ( resourceType != null ) {\n+                    properties.put(SlingConstants.PROPERTY_RESOURCE_TYPE, resource.getResourceType());\n+                }\n+                if ( resourceSuperType != null ) {\n+                    properties.put(SlingConstants.PROPERTY_RESOURCE_SUPER_TYPE, resource.getResourceSuperType());\n+                }\n \n                 localEA.postEvent(new org.osgi.service.event.Event(SlingConstants.TOPIC_RESOURCE_ADDED, properties));\n             }\n@@ -145,9 +151,15 @@ public void onEvent(EventIterator events) {\n             final Resource resource = this.resolver.getResource(path);\n             if ( resource != null ) {\n                 final Dictionary<String, String> properties = new Hashtable<String, String>();\n-                properties.put(SlingConstants.PROPERTY_PATH, resource.getPath());\n-                properties.put(SlingConstants.PROPERTY_RESOURCE_TYPE, resource.getResourceType());\n-                properties.put(SlingConstants.PROPERTY_RESOURCE_SUPER_TYPE, resource.getResourceSuperType());\n+                properties.put(SlingConstants.PROPERTY_PATH, path);\n+                final String resourceType = resource.getResourceType();\n+                final String resourceSuperType = resource.getResourceSuperType();\n+                if ( resourceType != null ) {\n+                    properties.put(SlingConstants.PROPERTY_RESOURCE_TYPE, resource.getResourceType());\n+                }\n+                if ( resourceSuperType != null ) {\n+                    properties.put(SlingConstants.PROPERTY_RESOURCE_SUPER_TYPE, resource.getResourceSuperType());\n+                }\n \n                 localEA.postEvent(new org.osgi.service.event.Event(SlingConstants.TOPIC_RESOURCE_CHANGED, properties));\n             }",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/301a487159522336702ae2ebeaf28b9f830f4019/src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceListener.java",
                "sha": "433a41ea3744cb9f22adc10acb498b0702f32d45",
                "status": "modified"
            }
        ],
        "message": "SLING-1034 - Fix NPE in jcr resource listener.\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@791234 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/sling-org-apache-sling-jcr-resource/commit/655b43e94f2e9b051c472d05072078257c380c6a",
        "repo": "sling-org-apache-sling-jcr-resource",
        "unit_tests": [
            "JcrResourceListenerTest.java"
        ]
    },
    "sling-org-apache-sling-jcr-resource_82e4306": {
        "bug_id": "sling-org-apache-sling-jcr-resource_82e4306",
        "commit": "https://github.com/apache/sling-org-apache-sling-jcr-resource/commit/82e430633bf3516a71648acca43e1de71c3903a5",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/82e430633bf3516a71648acca43e1de71c3903a5/src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceListener.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceListener.java?ref=82e430633bf3516a71648acca43e1de71c3903a5",
                "deletions": 1,
                "filename": "src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceListener.java",
                "patch": "@@ -295,7 +295,9 @@ private void sendOsgiEvent(final String path, final Event event, final String to\n             final ChangedAttributes changedAttributes) {\n \n         final Dictionary<String, Object> properties = new Hashtable<String, Object>();\n-        properties.put(SlingConstants.PROPERTY_USERID, event.getUserID());\n+        if ( event.getUserID() != null ) {\n+            properties.put(SlingConstants.PROPERTY_USERID, event.getUserID());\n+        }\n         if (this.isExternal(event)) {\n             properties.put(\"event.application\", \"unknown\");\n         }",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/82e430633bf3516a71648acca43e1de71c3903a5/src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceListener.java",
                "sha": "921e20d9a95811ad751d48dc1a726115f3ef36ab",
                "status": "modified"
            }
        ],
        "message": "SLING-2773 : NPE in JcrResourceListener on missing user id\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1453303 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/sling-org-apache-sling-jcr-resource/commit/ec4ae2adfc701e39a78513059a42fbf146d04e05",
        "repo": "sling-org-apache-sling-jcr-resource",
        "unit_tests": [
            "JcrResourceListenerTest.java"
        ]
    },
    "sling-org-apache-sling-jcr-resource_8531843": {
        "bug_id": "sling-org-apache-sling-jcr-resource_8531843",
        "commit": "https://github.com/apache/sling-org-apache-sling-jcr-resource/commit/85318436430d8680e6a2a3acf1a45fc76ecbad53",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/85318436430d8680e6a2a3acf1a45fc76ecbad53/src/main/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProvider.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/src/main/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProvider.java?ref=85318436430d8680e6a2a3acf1a45fc76ecbad53",
                "deletions": 1,
                "filename": "src/main/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProvider.java",
                "patch": "@@ -392,7 +392,7 @@ public Object getAttribute(final ResourceResolver resolver, final String name) {\n             return (AdapterType) session;\n         } else if (type == Principal.class) {       \n             try {\n-                if (this.session instanceof JackrabbitSession && session.getUserID()!=null) {\n+                if (this.session instanceof JackrabbitSession && session.getUserID() != null) {\n                     JackrabbitSession s =((JackrabbitSession) this.session);\n                     final UserManager um = s.getUserManager();\n                     if (um != null) {",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/85318436430d8680e6a2a3acf1a45fc76ecbad53/src/main/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProvider.java",
                "sha": "52d1cc1f872c8198097bbafd99ba0d384782f61c",
                "status": "modified"
            }
        ],
        "message": "SLING-3831 - Possible NPE in JcrResourceProvider#adaptTo\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1616484 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/sling-org-apache-sling-jcr-resource/commit/149e81b37229f5cac73bf706b2e36785a990cbec",
        "repo": "sling-org-apache-sling-jcr-resource",
        "unit_tests": [
            "JcrResourceProviderTest.java"
        ]
    },
    "sling-org-apache-sling-jcr-resource_fcff814": {
        "bug_id": "sling-org-apache-sling-jcr-resource_fcff814",
        "commit": "https://github.com/apache/sling-org-apache-sling-jcr-resource/commit/fcff814295ee6c4b9d6da217574a1f2e00486746",
        "file": [
            {
                "additions": 43,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/fcff814295ee6c4b9d6da217574a1f2e00486746/src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceListener.java",
                "changes": 65,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceListener.java?ref=fcff814295ee6c4b9d6da217574a1f2e00486746",
                "deletions": 22,
                "filename": "src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceListener.java",
                "patch": "@@ -40,6 +40,7 @@\n import org.apache.felix.scr.annotations.Properties;\n import org.apache.felix.scr.annotations.Property;\n import org.apache.felix.scr.annotations.Reference;\n+import org.apache.felix.scr.annotations.ReferencePolicy;\n import org.apache.jackrabbit.api.observation.JackrabbitEvent;\n import org.apache.sling.api.SlingConstants;\n import org.apache.sling.api.resource.LoginException;\n@@ -68,7 +69,7 @@\n     /** Logger */\n     private final Logger logger = LoggerFactory.getLogger(JcrResourceListener.class);\n \n-    @Reference\n+    @Reference(policy=ReferencePolicy.DYNAMIC)\n     private EventAdmin eventAdmin;\n \n     @Reference\n@@ -115,28 +116,47 @@ public JcrResourceListener() {\n     }\n \n     @Activate\n-    protected void activate() throws RepositoryException, LoginException {\n+    protected void activate() throws LoginException {\n         this.resourceResolver = this.resourceResolverFactory.getAdministrativeResourceResolver(null);\n-        try {\n-            this.session = this.resourceResolver.adaptTo(Session.class);\n-            this.startPath = \"/\";\n-            this.mountPrefix = null;\n-\n-            this.osgiEventQueue = new LinkedBlockingQueue<Dictionary<String,Object>>();\n-            Thread oeqt = new Thread(new Runnable() {\n-                public void run() {\n-                    processOsgiEventQueue();\n-                }\n-            }, \"JCR Resource Event Queue Processor\");\n-            oeqt.start();\n+        this.startPath = \"/\";\n+        this.mountPrefix = null;\n+\n+        this.osgiEventQueue = new LinkedBlockingQueue<Dictionary<String,Object>>();\n+        final Thread oeqt = new Thread(new Runnable() {\n+            public void run() {\n+                init();\n+                processOsgiEventQueue();\n+            }\n+        }, \"JCR Resource Event Queue Processor\");\n+        oeqt.start();\n \n-            this.session.getWorkspace().getObservationManager().addEventListener(this,\n-                Event.NODE_ADDED|Event.NODE_REMOVED|Event.PROPERTY_ADDED|Event.PROPERTY_CHANGED|Event.PROPERTY_REMOVED,\n-                this.startPath, true, null, null, false);\n-        } catch (final RepositoryException re) {\n-            this.resourceResolver.close();\n-            this.resourceResolver = null;\n-            throw re;\n+    }\n+\n+    private void init() {\n+        // lazy polling\n+        Session session = null;\n+        ResourceResolver resolver = this.resourceResolver;\n+        while ( resolver != null && session == null ) {\n+            session = this.resourceResolver.adaptTo(Session.class);\n+            if ( session == null ) {\n+                try {\n+                    Thread.sleep(100);\n+                } catch (final InterruptedException ignore) {\n+                    // we ignore this\n+                }\n+                resolver = this.resourceResolver;\n+            }\n+        }\n+        if ( session != null ) {\n+            try {\n+                session.getWorkspace().getObservationManager().addEventListener(this,\n+                                Event.NODE_ADDED|Event.NODE_REMOVED|Event.PROPERTY_ADDED|Event.PROPERTY_CHANGED|Event.PROPERTY_REMOVED,\n+                                this.startPath, true, null, null, false);\n+                this.session = session;\n+            } catch (final RepositoryException re) {\n+                logger.error(\"Unable to register event listener.\", re);\n+                this.deactivate();\n+            }\n         }\n     }\n \n@@ -155,6 +175,7 @@ protected void deactivate() {\n         }\n         if ( this.resourceResolver != null ) {\n             this.resourceResolver.close();\n+            this.resourceResolver = null;\n         }\n \n         // drop any remaining OSGi Events not processed yet\n@@ -165,7 +186,7 @@ protected void deactivate() {\n     /**\n      * @see javax.jcr.observation.EventListener#onEvent(javax.jcr.observation.EventIterator)\n      */\n-    public void onEvent(EventIterator events) {\n+    public void onEvent(final EventIterator events) {\n         // if the event admin is currently not available, we just skip this\n         final EventAdmin localEA = this.eventAdmin;\n         if ( localEA == null ) {",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/fcff814295ee6c4b9d6da217574a1f2e00486746/src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceListener.java",
                "sha": "6a39579b33c7769f180ed2f0b4ff5754a2abe40d",
                "status": "modified"
            }
        ],
        "message": "SLING-2573 : JcrResourceListener activation is failing with NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1376410 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/sling-org-apache-sling-jcr-resource/commit/478bc4e66ef237864cbb0aff02659b27f9284d6c",
        "repo": "sling-org-apache-sling-jcr-resource",
        "unit_tests": [
            "JcrResourceListenerTest.java"
        ]
    }
}