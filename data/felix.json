{
    "felix_0192fe4": {
        "bug_id": "felix_0192fe4",
        "commit": "https://github.com/apache/felix/commit/0192fe44ed1263035e02551267edd7d4d22f7427",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/felix/blob/0192fe44ed1263035e02551267edd7d4d22f7427/gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/Expression.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/Expression.java?ref=0192fe44ed1263035e02551267edd7d4d22f7427",
                "deletions": 1,
                "filename": "gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/Expression.java",
                "patch": "@@ -1048,7 +1048,7 @@ public BigDecimal eval(List<BigDecimal> parameters) {\n      * @return <code>true</code>, if the input string is a number.\n      */\n     private boolean isNumber(String st) {\n-        if (st.charAt(0) == minusSign && st.length() == 1)\n+        if (st == null || st.isEmpty() || st.charAt(0) == minusSign && st.length() == 1)\n             return false;\n         for (char ch : st.toCharArray()) {\n             if (!Character.isDigit(ch) && ch != minusSign",
                "raw_url": "https://github.com/apache/felix/raw/0192fe44ed1263035e02551267edd7d4d22f7427/gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/Expression.java",
                "sha": "e85f2c29f46a58c9d2cd790e8ecfae645b33d87d",
                "status": "modified"
            }
        ],
        "message": "[FELIX-5655] Possible NPE in Expression.isNumber when passing an empty string\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1799927 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/51cdd67c759daf49bcbdd6617469c07d7fe3a26a",
        "repo": "felix",
        "unit_tests": [
            "ExpressionTest.java"
        ]
    },
    "felix_087c0ea": {
        "bug_id": "felix_087c0ea",
        "commit": "https://github.com/apache/felix/commit/087c0ea8696c49df7fbadd3cb6fc6d90718de075",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/felix/blob/087c0ea8696c49df7fbadd3cb6fc6d90718de075/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java?ref=087c0ea8696c49df7fbadd3cb6fc6d90718de075",
                "deletions": 3,
                "filename": "resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java",
                "patch": "@@ -2007,8 +2007,20 @@ private static String toStringBlame(\n                         allCandidates,\n                         blame.m_reqs.get(i));\n                     sb.append(export.getNamespace());\n-                    sb.append(\"=\");\n-                    sb.append(export.getAttributes().get(export.getNamespace()).toString());\n+                    sb.append(\": \");\n+                    Object namespaceVal = export.getAttributes().get(export.getNamespace());\n+                    if (namespaceVal != null)\n+                    {\n+                        sb.append(namespaceVal.toString());\n+                    }\n+                    else\n+                    {\n+                        for (Entry<String, Object> attrEntry : export.getAttributes().entrySet())\n+                        {\n+                            sb.append(attrEntry.getKey()).append('=')\n+                                .append(attrEntry.getValue()).append(';');\n+                        }\n+                    }\n                     if (export.getNamespace().equals(PackageNamespace.PACKAGE_NAMESPACE)\n                         && !export.getAttributes().get(PackageNamespace.PACKAGE_NAMESPACE)\n                         .equals(blame.m_cap.getAttributes().get(\n@@ -2193,4 +2205,4 @@ public String toString()\n             return m_blames.toString();\n         }\n     }\n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/felix/raw/087c0ea8696c49df7fbadd3cb6fc6d90718de075/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java",
                "sha": "0f2caa0a31e698131e801892944aa2a793a37ed7",
                "status": "modified"
            }
        ],
        "message": "Apply patch (FELIX-4008) to avoid NPE when converting blame to string.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1464569 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/51dc877a678ef327a595c98e2e9397bd9e0e5cd2",
        "repo": "felix",
        "unit_tests": [
            "ResolverImplTest.java"
        ]
    },
    "felix_14d9e21": {
        "bug_id": "felix_14d9e21",
        "commit": "https://github.com/apache/felix/commit/14d9e21ecac16c1207fd6457626ed233d136bc66",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/felix/blob/14d9e21ecac16c1207fd6457626ed233d136bc66/webconsole/src/main/java/org/apache/felix/webconsole/internal/misc/LicenseServlet.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/webconsole/src/main/java/org/apache/felix/webconsole/internal/misc/LicenseServlet.java?ref=14d9e21ecac16c1207fd6457626ed233d136bc66",
                "deletions": 17,
                "filename": "webconsole/src/main/java/org/apache/felix/webconsole/internal/misc/LicenseServlet.java",
                "patch": "@@ -295,30 +295,32 @@ private boolean sendResource( final PathInfo pathInfo, final HttpServletResponse\n                 }\n             }\n         }\n-\n-        // license is in a nested JAR\n-        final URL zipResource = bundle.getResource( pathInfo.innerJar );\n-        if ( zipResource != null )\n+        else\n         {\n-            final InputStream input = zipResource.openStream();\n-            ZipInputStream zin = null;\n-            try\n+            // license is in a nested JAR\n+            final URL zipResource = bundle.getResource( pathInfo.innerJar );\n+            if ( zipResource != null )\n             {\n-                zin = new ZipInputStream( input );\n-                for ( ZipEntry zentry = zin.getNextEntry(); zentry != null; zentry = zin.getNextEntry() )\n+                final InputStream input = zipResource.openStream();\n+                ZipInputStream zin = null;\n+                try\n                 {\n-                    if ( pathInfo.licenseFile.equals( zentry.getName() ) )\n+                    zin = new ZipInputStream( input );\n+                    for ( ZipEntry zentry = zin.getNextEntry(); zentry != null; zentry = zin.getNextEntry() )\n                     {\n-                        IOUtils.copy( zin, response.getWriter() );\n-                        return true;\n+                        if ( pathInfo.licenseFile.equals( zentry.getName() ) )\n+                        {\n+                            IOUtils.copy( zin, response.getWriter() );\n+                            return true;\n+                        }\n                     }\n                 }\n-            }\n-            finally\n-            {\n+                finally\n+                {\n \n-                IOUtils.closeQuietly( zin );\n-                IOUtils.closeQuietly( input );\n+                    IOUtils.closeQuietly( zin );\n+                    IOUtils.closeQuietly( input );\n+                }\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/felix/raw/14d9e21ecac16c1207fd6457626ed233d136bc66/webconsole/src/main/java/org/apache/felix/webconsole/internal/misc/LicenseServlet.java",
                "sha": "b2cd890edc715a3e63cd03a6583ac455d31a0b71",
                "status": "modified"
            }
        ],
        "message": "FELIX-2708 Prevent NPE in LicenseServlet\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1220409 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/05ede3a5662502e63139484748c98a84fa887aab",
        "repo": "felix",
        "unit_tests": [
            "LicenseServletTest.java"
        ]
    },
    "felix_1504e7b": {
        "bug_id": "felix_1504e7b",
        "commit": "https://github.com/apache/felix/commit/1504e7b6a4f4ee5c2a86ee359aa14c846e67be16",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/felix/blob/1504e7b6a4f4ee5c2a86ee359aa14c846e67be16/scrplugin/src/main/java/org/apache/felix/scrplugin/tags/annotation/defaulttag/Util.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scrplugin/src/main/java/org/apache/felix/scrplugin/tags/annotation/defaulttag/Util.java?ref=1504e7b6a4f4ee5c2a86ee359aa14c846e67be16",
                "deletions": 0,
                "filename": "scrplugin/src/main/java/org/apache/felix/scrplugin/tags/annotation/defaulttag/Util.java",
                "patch": "@@ -347,6 +347,14 @@ private static String getAnnotationValue(final AnnotationValue av, final JavaCla\n     {\n         if ( av instanceof AnnotationFieldRef )\n         {\n+            // during prescan of AnnotationTagProviderManager#hasScrPluginAnnotation this method is called without desc attribute\n+            // avoid NPE in this case and just skip value resolving\n+            // FELIX-1629\n+            if ( desc == null)\n+            {\n+                return null;\n+            }\n+\n             // getField throws AIOOBE\n             // return ((AnnotationFieldRef)av).getField().getInitializationExpression();\n             final String s = av.getParameterValue().toString().trim();",
                "raw_url": "https://github.com/apache/felix/raw/1504e7b6a4f4ee5c2a86ee359aa14c846e67be16/scrplugin/src/main/java/org/apache/felix/scrplugin/tags/annotation/defaulttag/Util.java",
                "sha": "28f71c74b7fc94a6908a6545a3a9e00c03dd5f24",
                "status": "modified"
            }
        ],
        "message": "FELIX-1629 : SCR Annotations with Constanst reference may cause NPE. Apply patch from Stefan Seifert\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@818374 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/fd69ad6b9fd510588d858e4e06a31dee1fb59199",
        "repo": "felix",
        "unit_tests": [
            "UtilTest.java"
        ]
    },
    "felix_17c3161": {
        "bug_id": "felix_17c3161",
        "commit": "https://github.com/apache/felix/commit/17c31618089a049f7dc6a10675d275dbd6bb71b7",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/felix/blob/17c31618089a049f7dc6a10675d275dbd6bb71b7/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java?ref=17c31618089a049f7dc6a10675d275dbd6bb71b7",
                "deletions": 1,
                "filename": "resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java",
                "patch": "@@ -1520,7 +1520,7 @@ static void permutateIfNeeded(\n             for (Candidates existingPerm : permutations)\n             {\n                 List<Capability> existingPermCands = existingPerm.getCandidates(req);\n-                if (!existingPermCands.get(0).equals(candidates.get(0)))\n+                if (existingPermCands != null && !existingPermCands.get(0).equals(candidates.get(0)))\n                 {\n                     permutated = true;\n                 }",
                "raw_url": "https://github.com/apache/felix/raw/17c31618089a049f7dc6a10675d275dbd6bb71b7/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java",
                "sha": "230912a17235a6f0ddd0914ce3a996a20f6d5038",
                "status": "modified"
            }
        ],
        "message": "[FELIX-4642] NPE in the resolver when substituting\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1625895 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/7c92cad682d1bedd19af9dcace1e5c932c9b4473",
        "repo": "felix",
        "unit_tests": [
            "ResolverImplTest.java"
        ]
    },
    "felix_1957dc1": {
        "bug_id": "felix_1957dc1",
        "commit": "https://github.com/apache/felix/commit/1957dc193859f107f1c53d7ae9633163827f69b9",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/felix/blob/1957dc193859f107f1c53d7ae9633163827f69b9/scr/src/main/java/org/apache/felix/scr/impl/BundleComponentActivator.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/BundleComponentActivator.java?ref=1957dc193859f107f1c53d7ae9633163827f69b9",
                "deletions": 18,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/BundleComponentActivator.java",
                "patch": "@@ -54,25 +54,25 @@\n public class BundleComponentActivator implements Logger\n {\n     // global component registration\n-    private ComponentRegistry m_componentRegistry;\n+    private final ComponentRegistry m_componentRegistry;\n \n     // The bundle context owning the registered component\n-    private BundleContext m_context = null;\n+    private final BundleContext m_context;\n \n     // This is a list of component instance managers that belong to a particular bundle\n     private List<ComponentHolder> m_managers = new ArrayList<ComponentHolder>();\n \n     // The Configuration Admin tracker providing configuration for components\n-    private ServiceTracker m_logService;\n+    private final ServiceTracker m_logService;\n \n     // thread acting upon configurations\n-    private ComponentActorThread m_componentActor;\n+    private final ComponentActorThread m_componentActor;\n \n     // true as long as the dispose method is not called\n     private boolean m_active;\n \n     // the configuration\n-    private ScrConfiguration m_configuration;\n+    private final ScrConfiguration m_configuration;\n \n \n     /**\n@@ -316,14 +316,15 @@ private void loadDescriptor( final URL descriptorURL )\n     */\n     void dispose( int reason )\n     {\n-        if ( m_context == null )\n+        synchronized ( this )\n         {\n-            return;\n+            if ( !m_active )\n+            {\n+                return;\n+            }\n+            // mark instance inactive (no more component activations)\n+            m_active = false;\n         }\n-\n-        // mark instance inactive (no more component activations)\n-        m_active = false;\n-\n         log( LogService.LOG_DEBUG, \"BundleComponentActivator : Bundle [{0}] will destroy {1} instances\", new Object[]\n             { m_context.getBundle().getBundleId(), m_managers.size() }, null, null, null );\n \n@@ -351,14 +352,8 @@ void dispose( int reason )\n         log( LogService.LOG_DEBUG, \"BundleComponentActivator : Bundle [{0}] STOPPED\", new Object[]\n             {m_context.getBundle().getBundleId()}, null, null, null );\n \n-        if (m_logService != null) {\n-            m_logService.close();\n-            m_logService = null;\n-        }\n+        m_logService.close();\n \n-        m_componentActor = null;\n-        m_componentRegistry = null;\n-        m_context = null;\n     }\n \n ",
                "raw_url": "https://github.com/apache/felix/raw/1957dc193859f107f1c53d7ae9633163827f69b9/scr/src/main/java/org/apache/felix/scr/impl/BundleComponentActivator.java",
                "sha": "315137c26b9979a9e8a9f3a5334f0300ec6dac3e",
                "status": "modified"
            },
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/felix/blob/1957dc193859f107f1c53d7ae9633163827f69b9/scr/src/main/java/org/apache/felix/scr/impl/manager/AbstractComponentManager.java",
                "changes": 72,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/manager/AbstractComponentManager.java?ref=1957dc193859f107f1c53d7ae9633163827f69b9",
                "deletions": 41,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/manager/AbstractComponentManager.java",
                "patch": "@@ -513,7 +513,7 @@ public final void disable( final boolean async )\n             enableLatch = enableLatchWait();\n             if ( !async )\n             {\n-                deactivateInternal( ComponentConstants.DEACTIVATION_REASON_DISABLED, true, m_trackingCount.get() );\n+                deactivateInternal( ComponentConstants.DEACTIVATION_REASON_DISABLED, true, false );\n             }\n             disableInternal();\n         }\n@@ -538,7 +538,7 @@ public void run()\n                 {\n                     try\n                     {\n-                        deactivateInternal( ComponentConstants.DEACTIVATION_REASON_DISABLED, true, m_trackingCount.get() );\n+                        deactivateInternal( ComponentConstants.DEACTIVATION_REASON_DISABLED, true, false );\n                     }\n                     finally\n                     {\n@@ -572,8 +572,7 @@ void dispose()\n      */\n     public void dispose( int reason )\n     {\n-        m_disposed = true;\n-        disposeInternal( reason );\n+        deactivateInternal( reason, true, true );\n     }\n     \n     <T> void registerMissingDependency( DependencyManager<S, T> dm, ServiceReference<T> ref, int trackingCount)\n@@ -834,16 +833,22 @@ final void activateInternal( int trackingCount )\n         }\n     }\n \n-    final void deactivateInternal( int reason, boolean disable, int trackingCount )\n+    /**\n+     * Handles deactivating, disabling, and disposing a component manager. Deactivating a factory instance\n+     * always disables and disposes it.  Deactivating a factory disposes it.\n+     * @param reason reason for action\n+     * @param disable whether to also disable the manager\n+     * @param dispose whether to also dispose of the manager\n+     */\n+    final void deactivateInternal( int reason, boolean disable, boolean dispose )\n     {\n-        if ( m_disposed )\n-        {\n-            return;\n-        }\n-        if ( m_factoryInstance )\n+        synchronized ( this )\n         {\n-            disposeInternal( reason );\n-            return;\n+            if ( m_disposed )\n+            {\n+                return;\n+            }\n+            m_disposed = dispose;\n         }\n         log( LogService.LOG_DEBUG, \"Deactivating component\", null );\n \n@@ -852,45 +857,20 @@ final void deactivateInternal( int reason, boolean disable, int trackingCount )\n         obtainActivationReadLock( \"deactivateInternal\" );\n         try\n         {\n-            doDeactivate( reason, disable );\n+            doDeactivate( reason, disable || m_factoryInstance );\n         }\n         finally \n         {\n             releaseActivationReadLock( \"deactivateInternal\" );\n         }\n-        if ( isFactory() )\n+        if ( isFactory() || m_factoryInstance || dispose )\n         {\n+            log( LogService.LOG_DEBUG, \"Disposing component (reason: \" + reason + \")\", null );\n             clear();\n         }\n     }\n \n-    final void disableInternal()\n-    {\n-        m_internalEnabled = false;\n-        if ( m_disposed )\n-        {\n-            throw new IllegalStateException( \"Cannot disable a disposed component \" + getName() );\n-        }\n-        unregisterComponentId();\n-    }\n-\n-    /**\n-     * Disposes off this component deactivating and disabling it first as\n-     * required. After disposing off the component, it may not be used anymore.\n-     * <p>\n-     * This method unlike the other state change methods immediately takes\n-     * action and disposes the component. The reason for this is, that this\n-     * method has to actually complete before other actions like bundle stopping\n-     * may continue.\n-     */\n-    final void disposeInternal( int reason )\n-    {\n-        log( LogService.LOG_DEBUG, \"Disposing component (reason: \" + reason + \")\", null );\n-        doDeactivate( reason, true );\n-        clear();\n-    }\n-         \n-    final void doDeactivate( int reason, boolean disable )\n+    private void doDeactivate( int reason, boolean disable )\n     {\n         try\n         {\n@@ -924,6 +904,16 @@ final void doDeactivate( int reason, boolean disable )\n         }\n     }\n \n+    final void disableInternal()\n+    {\n+        m_internalEnabled = false;\n+        if ( m_disposed )\n+        {\n+            throw new IllegalStateException( \"Cannot disable a disposed component \" + getName() );\n+        }\n+        unregisterComponentId();\n+    }\n+\n     final ServiceReference<S> getServiceReference()\n     {\n         ServiceRegistration<S> reg = getServiceRegistration();",
                "raw_url": "https://github.com/apache/felix/raw/1957dc193859f107f1c53d7ae9633163827f69b9/scr/src/main/java/org/apache/felix/scr/impl/manager/AbstractComponentManager.java",
                "sha": "a8c895e411eea58dbea25eaf877d496d76abf567",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/felix/blob/1957dc193859f107f1c53d7ae9633163827f69b9/scr/src/main/java/org/apache/felix/scr/impl/manager/ComponentFactoryImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/manager/ComponentFactoryImpl.java?ref=1957dc193859f107f1c53d7ae9633163827f69b9",
                "deletions": 3,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/manager/ComponentFactoryImpl.java",
                "patch": "@@ -129,7 +129,7 @@ public ComponentInstance newInstance( Dictionary<String, ?> dictionary )\n         if ( instance == null || instance.getInstance() == null )\n         {\n             // activation failed, clean up component manager\n-            cm.disposeInternal( ComponentConstants.DEACTIVATION_REASON_DISPOSED );\n+            cm.dispose( ComponentConstants.DEACTIVATION_REASON_DISPOSED );\n             throw new ComponentException( \"Failed activating component\" );\n         }\n \n@@ -313,7 +313,7 @@ public void configurationDeleted( String pid )\n             if ( ( getState() & STATE_DISPOSED ) == 0 && getComponentMetadata().isConfigurationRequired() )\n             {\n                 log( LogService.LOG_DEBUG, \"Deactivating component factory (required configuration has gone)\", null );\n-                deactivateInternal( ComponentConstants.DEACTIVATION_REASON_CONFIGURATION_DELETED, true, getTrackingCount().get() );\n+                deactivateInternal( ComponentConstants.DEACTIVATION_REASON_CONFIGURATION_DELETED, true, false );\n             }\n         }\n         else\n@@ -381,7 +381,7 @@ public boolean configurationUpdated( String pid, Dictionary<String, Object> conf\n                 {\n                     log( LogService.LOG_DEBUG,\n                             \"Component Factory target filters not satisfied anymore: deactivating\", null );\n-                    deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, getTrackingCount().get() );\n+                    deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, false );\n                     return false;\n                 }\n             }",
                "raw_url": "https://github.com/apache/felix/raw/1957dc193859f107f1c53d7ae9633163827f69b9/scr/src/main/java/org/apache/felix/scr/impl/manager/ComponentFactoryImpl.java",
                "sha": "c8f20a16357e68240d780ae0936cac746dd26967",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/felix/blob/1957dc193859f107f1c53d7ae9633163827f69b9/scr/src/main/java/org/apache/felix/scr/impl/manager/DependencyManager.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/manager/DependencyManager.java?ref=1957dc193859f107f1c53d7ae9633163827f69b9",
                "deletions": 10,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/manager/DependencyManager.java",
                "patch": "@@ -263,7 +263,7 @@ public void removedService( ServiceReference<T> serviceReference, RefPair<T> ref\n             {\n                 if (getTracker().isEmpty())\n                 {\n-                    m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, trackingCount );\n+                    m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, false );\n                 }\n             }\n         }\n@@ -362,7 +362,7 @@ public void removedService( ServiceReference<T> serviceReference, RefPair<T> ref\n                 lastRefPair = refPair;\n                 lastRefPairTrackingCount = trackingCount;\n                 tracked( trackingCount );\n-                m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, trackingCount );\n+                m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, false );\n                 lastRefPair = null;\n                 m_componentManager.log( LogService.LOG_DEBUG, \"dm {0} tracking {1} MultipleDynamic removed (deactivate) {2}\", new Object[] {getName(), trackingCount, serviceReference}, null );\n             }\n@@ -440,7 +440,7 @@ public void addedService( ServiceReference<T> serviceReference, RefPair<T> refPa\n                 m_componentManager.log( LogService.LOG_DEBUG,\n                         \"Dependency Manager: Static dependency on {0}/{1} is broken\", new Object[]\n                         {getName(), m_dependencyMetadata.getInterface()}, null );\n-                m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, trackingCount );\n+                m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, false );\n                 m_componentManager.activateInternal( trackingCount );\n \n             }\n@@ -472,7 +472,7 @@ public void removedService( ServiceReference<T> serviceReference, RefPair<T> ref\n                 m_componentManager.log( LogService.LOG_DEBUG,\n                         \"Dependency Manager: Static dependency on {0}/{1} is broken\", new Object[]\n                         {getName(), m_dependencyMetadata.getInterface()}, null );\n-                m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, trackingCount );\n+                m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, false );\n                 //try to reactivate after ref is no longer tracked.\n                 m_componentManager.activateInternal( trackingCount );\n             }\n@@ -481,7 +481,7 @@ else if ( !isOptional() && getTracker().isEmpty() )\n                 m_componentManager.log( LogService.LOG_DEBUG,\n                         \"Dependency Manager: Static dependency on {0}/{1} is broken\", new Object[]\n                         {getName(), m_dependencyMetadata.getInterface()}, null );\n-                m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, trackingCount );                \n+                m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, false );                \n             }\n             //This is unlikely\n             ungetService( refPair );\n@@ -572,7 +572,7 @@ public void removedService( ServiceReference<T> serviceReference, RefPair<T> ref\n                     m_componentManager.log( LogService.LOG_DEBUG,\n                         \"Dependency Manager: Static dependency on {0}/{1} is broken\", new Object[]\n                             { getName(), m_dependencyMetadata.getInterface() }, null );\n-                    m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, trackingCount );\n+                    m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, false );\n \n                     // FELIX-2368: immediately try to reactivate\n                     m_componentManager.activateInternal( trackingCount );\n@@ -584,7 +584,7 @@ else if ( !isOptional() && getTracker().isEmpty() )\n                 m_componentManager.log( LogService.LOG_DEBUG,\n                         \"Dependency Manager: Static dependency on {0}/{1} is broken\", new Object[]\n                         {getName(), m_dependencyMetadata.getInterface()}, null );\n-                m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, trackingCount );                \n+                m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, false );                \n             }\n             ungetService( refPair );\n             m_componentManager.log( LogService.LOG_DEBUG, \"dm {0} tracking {1} MultipleStaticReluctant removed {2} (exit)\", new Object[] {getName(), trackingCount, serviceReference}, null );\n@@ -792,7 +792,7 @@ else if ( deactivate )\n                 this.trackingCount = trackingCount;\n                 tracked( trackingCount );\n                 untracked = false;\n-                m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, trackingCount );\n+                m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, false );\n             }\n             if ( oldRefPair != null )\n             {\n@@ -894,7 +894,7 @@ public void addedService( ServiceReference<T> serviceReference, RefPair<T> refPa\n                 }\n                 if ( reactivate )\n                 {\n-                    m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, trackingCount );\n+                    m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, false );\n                     m_componentManager.activateInternal( trackingCount );\n                 }\n                 else \n@@ -942,7 +942,7 @@ public void removedService( ServiceReference<T> serviceReference, RefPair<T> ref\n             }\n             if ( reactivate )\n             {\n-                m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, trackingCount );\n+                m_componentManager.deactivateInternal( ComponentConstants.DEACTIVATION_REASON_REFERENCE, false, false );\n                 m_componentManager.activateInternal( trackingCount );\n             }\n             m_componentManager.log( LogService.LOG_DEBUG, \"dm {0} tracking {1} SingleStatic removed {2} (exit)\", new Object[] {getName(), trackingCount, serviceReference}, null );",
                "raw_url": "https://github.com/apache/felix/raw/1957dc193859f107f1c53d7ae9633163827f69b9/scr/src/main/java/org/apache/felix/scr/impl/manager/DependencyManager.java",
                "sha": "f75f41c48cd4e3d66bbff883207329a3fb9c5145",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/felix/blob/1957dc193859f107f1c53d7ae9633163827f69b9/scr/src/main/java/org/apache/felix/scr/impl/manager/SingleComponentManager.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/manager/SingleComponentManager.java?ref=1957dc193859f107f1c53d7ae9633163827f69b9",
                "deletions": 2,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/manager/SingleComponentManager.java",
                "patch": "@@ -587,7 +587,7 @@ public void reconfigure( Dictionary<String, Object> configuration, long changeCo\n             if ( configuration == null && getComponentMetadata().isConfigurationRequired() )\n             {\n                 //deactivate and remove service listeners\n-                deactivateInternal( ComponentConstants.DEACTIVATION_REASON_CONFIGURATION_DELETED, true, getTrackingCount().get() );\n+                deactivateInternal( ComponentConstants.DEACTIVATION_REASON_CONFIGURATION_DELETED, true, false );\n                 //do not reset targets as that will reinstall the service listeners which may activate the component.\n                 //when a configuration arrives the properties will get set based on the new configuration.\n                 return;\n@@ -619,7 +619,7 @@ public void reconfigure( Dictionary<String, Object> configuration, long changeCo\n                     //     called through ConfigurationListener API which itself is\n                     //     called asynchronously by the Configuration Admin Service\n                     releaseActivationWriteeLock( \"reconfigure.modified.1\" );;\n-                    deactivateInternal( reason, false, getTrackingCount().get() );\n+                    deactivateInternal( reason, false, false );\n                     obtainActivationWriteLock( \"reconfigure.deactivate.activate\" );\n                     try\n                     {",
                "raw_url": "https://github.com/apache/felix/raw/1957dc193859f107f1c53d7ae9633163827f69b9/scr/src/main/java/org/apache/felix/scr/impl/manager/SingleComponentManager.java",
                "sha": "dc72b8cc46a0008ef630f31dd5ee331d965a673d",
                "status": "modified"
            }
        ],
        "message": "FELIX-4287 fix NPE when dispose called after bundle stopped, simplify deactivate method calls\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1534395 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/0e376caeb10f19d0cc0cfe9430b35dd712f42ac5",
        "repo": "felix",
        "unit_tests": [
            "SingleComponentManagerTest.java"
        ]
    },
    "felix_23b58cf": {
        "bug_id": "felix_23b58cf",
        "commit": "https://github.com/apache/felix/commit/23b58cf4a7d3cc9333906c050e246f3934252c1c",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/felix/blob/23b58cf4a7d3cc9333906c050e246f3934252c1c/gogo/jline/src/main/java/org/apache/felix/gogo/jline/BaseConverters.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/gogo/jline/src/main/java/org/apache/felix/gogo/jline/BaseConverters.java?ref=23b58cf4a7d3cc9333906c050e246f3934252c1c",
                "deletions": 1,
                "filename": "gogo/jline/src/main/java/org/apache/felix/gogo/jline/BaseConverters.java",
                "patch": "@@ -29,6 +29,7 @@\n import java.lang.reflect.Method;\n import java.lang.reflect.Proxy;\n import java.util.Arrays;\n+import java.util.Collections;\n \n public class BaseConverters implements Converter {\n \n@@ -63,7 +64,8 @@ public Object invoke(Object proxy, Method method, Object[] args)\n                                         .bindTo(proxy)\n                                         .invokeWithArguments(args);\n                             } else {\n-                                return command.execute(null, Arrays.asList(args));\n+                                return command.execute(null,\n+                                        args != null ? Arrays.asList(args) : Collections.emptyList());\n                             }\n                         }\n                     });",
                "raw_url": "https://github.com/apache/felix/raw/23b58cf4a7d3cc9333906c050e246f3934252c1c/gogo/jline/src/main/java/org/apache/felix/gogo/jline/BaseConverters.java",
                "sha": "a5a545af92952efa321e8fb537f451d8ffaf12a9",
                "status": "modified"
            }
        ],
        "message": "[FELIX-5463] [gogo][jline] Fix possible NPE in converter\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1779308 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/7c5c20d8748a51fd91559c80de426a6a5812a07f",
        "repo": "felix",
        "unit_tests": [
            "BaseConvertersTest.java"
        ]
    },
    "felix_2bdfaf9": {
        "bug_id": "felix_2bdfaf9",
        "commit": "https://github.com/apache/felix/commit/2bdfaf9f91c100c34c9f2ae1f97af7b19afa8b29",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/felix/blob/2bdfaf9f91c100c34c9f2ae1f97af7b19afa8b29/dependencymanager/core/src/main/java/org/apache/felix/dm/impl/ServiceImpl.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/dependencymanager/core/src/main/java/org/apache/felix/dm/impl/ServiceImpl.java?ref=2bdfaf9f91c100c34c9f2ae1f97af7b19afa8b29",
                "deletions": 5,
                "filename": "dependencymanager/core/src/main/java/org/apache/felix/dm/impl/ServiceImpl.java",
                "patch": "@@ -1046,9 +1046,10 @@ public String getType() {\n     }\n \n     public String getName() {\n-        if (m_serviceName instanceof String[]) {\n+        Object serviceName = m_serviceName;\n+        if (serviceName instanceof String[]) {\n             StringBuffer sb = new StringBuffer();\n-            String[] names = (String[]) m_serviceName;\n+            String[] names = (String[]) serviceName;\n             for (int i = 0; i < names.length; i++) {\n                 if (i > 0) {\n                     sb.append(\", \");\n@@ -1057,11 +1058,17 @@ public String getName() {\n             }\n             return sb.toString();\n         }\n-        else if (m_serviceName instanceof String) {\n-            return m_serviceName.toString();\n+        else if (serviceName instanceof String) {\n+            return serviceName.toString();\n         }\n         else {\n-            return m_implementation.toString();\n+            Object implementation = m_implementation;\n+            if (implementation != null) {\n+                return implementation.toString();\n+            }\n+            else {\n+                return super.toString();\n+            }\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/felix/raw/2bdfaf9f91c100c34c9f2ae1f97af7b19afa8b29/dependencymanager/core/src/main/java/org/apache/felix/dm/impl/ServiceImpl.java",
                "sha": "a8da931b34738f654e08a97bca7c926b2ae3e5fb",
                "status": "modified"
            }
        ],
        "message": "Fixed a NPE in getName().\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@993264 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/2b4f7ec90633b8cf1b06b8e1ce9c77214175addd",
        "repo": "felix",
        "unit_tests": [
            "TestServiceImpl.java"
        ]
    },
    "felix_33113b3": {
        "bug_id": "felix_33113b3",
        "commit": "https://github.com/apache/felix/commit/33113b30dee87927a9e05090785e3887a23f019f",
        "file": [
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/felix/blob/33113b30dee87927a9e05090785e3887a23f019f/ipojo/runtime/core-it/ipojo-core-configuration-processor-test/src/main/java/org/apache/felix/ipojo/runtime/core/components/SimpleConfiguration.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/ipojo/runtime/core-it/ipojo-core-configuration-processor-test/src/main/java/org/apache/felix/ipojo/runtime/core/components/SimpleConfiguration.java?ref=33113b30dee87927a9e05090785e3887a23f019f",
                "deletions": 0,
                "filename": "ipojo/runtime/core-it/ipojo-core-configuration-processor-test/src/main/java/org/apache/felix/ipojo/runtime/core/components/SimpleConfiguration.java",
                "patch": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.felix.ipojo.runtime.core.components;\n+\n+import org.apache.felix.ipojo.configuration.Configuration;\n+import org.apache.felix.ipojo.configuration.Instance;\n+\n+import java.util.Properties;\n+\n+import static org.apache.felix.ipojo.configuration.Instance.instance;\n+\n+/**\n+ * Simple configuration\n+ */\n+@Configuration\n+public class SimpleConfiguration {\n+\n+    // Declare an instance of MyComponent named myInstance\n+    Instance myInstance = instance().of(MyComponent.class)\n+            .named(\"foo\");\n+}",
                "raw_url": "https://github.com/apache/felix/raw/33113b30dee87927a9e05090785e3887a23f019f/ipojo/runtime/core-it/ipojo-core-configuration-processor-test/src/main/java/org/apache/felix/ipojo/runtime/core/components/SimpleConfiguration.java",
                "sha": "314fb8c305c6e253ef836152a96f1b97327146ab",
                "status": "added"
            },
            {
                "additions": 77,
                "blob_url": "https://github.com/apache/felix/blob/33113b30dee87927a9e05090785e3887a23f019f/ipojo/runtime/core-it/ipojo-core-configuration-processor-test/src/test/java/org/apache/felix/ipojo/runtime/core/TestSimpleConfiguration.java",
                "changes": 77,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/ipojo/runtime/core-it/ipojo-core-configuration-processor-test/src/test/java/org/apache/felix/ipojo/runtime/core/TestSimpleConfiguration.java?ref=33113b30dee87927a9e05090785e3887a23f019f",
                "deletions": 0,
                "filename": "ipojo/runtime/core-it/ipojo-core-configuration-processor-test/src/test/java/org/apache/felix/ipojo/runtime/core/TestSimpleConfiguration.java",
                "patch": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.felix.ipojo.runtime.core;\n+\n+import junit.framework.Assert;\n+import org.apache.felix.ipojo.runtime.core.components.MyComponent;\n+import org.apache.felix.ipojo.runtime.core.components.SimpleConfiguration;\n+import org.apache.felix.ipojo.runtime.core.services.FooService;\n+import org.junit.Test;\n+import org.ops4j.pax.exam.Configuration;\n+import org.ops4j.pax.exam.Option;\n+import org.ops4j.pax.exam.OptionUtils;\n+import org.ops4j.pax.tinybundles.core.TinyBundles;\n+import org.osgi.framework.Constants;\n+import org.ow2.chameleon.testing.helpers.TimeUtils;\n+import org.ow2.chameleon.testing.tinybundles.ipojo.IPOJOStrategy;\n+\n+import java.io.IOException;\n+\n+import static org.ops4j.pax.exam.CoreOptions.streamBundle;\n+import static org.ops4j.pax.tinybundles.core.TinyBundles.withBnd;\n+\n+/**\n+ * Check a simple @Configuration\n+ */\n+public class TestSimpleConfiguration extends Common {\n+\n+    @Configuration\n+    public Option[] config() throws IOException {\n+\n+        Option[] options = super.config();\n+\n+        // Build a service bundle\n+        return OptionUtils.combine(options,\n+                streamBundle(\n+                        TinyBundles.bundle()\n+                                .add(FooService.class)\n+                                .set(Constants.BUNDLE_SYMBOLICNAME, \"ServiceInterface\")\n+                                .set(Constants.EXPORT_PACKAGE, \"org.apache.felix.ipojo.runtime.core.services\")\n+                                .build(withBnd())\n+                ),\n+                streamBundle(\n+                        TinyBundles.bundle()\n+                                .add(MyComponent.class)\n+                                .add(SimpleConfiguration.class)\n+                                .set(Constants.BUNDLE_SYMBOLICNAME, \"MyComponent\")\n+                                .build(IPOJOStrategy.withiPOJO())\n+                )\n+        );\n+    }\n+\n+    @Test\n+    public void testConfiguration() throws InterruptedException {\n+        TimeUtils.grace(1000);\n+        // Check configuration\n+        Assert.assertNotNull(osgiHelper.getServiceReference(FooService.class));\n+    }\n+\n+\n+}",
                "raw_url": "https://github.com/apache/felix/raw/33113b30dee87927a9e05090785e3887a23f019f/ipojo/runtime/core-it/ipojo-core-configuration-processor-test/src/test/java/org/apache/felix/ipojo/runtime/core/TestSimpleConfiguration.java",
                "sha": "1888d9736c4f6f962a2c56390e239fc1509f6114",
                "status": "added"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/felix/blob/33113b30dee87927a9e05090785e3887a23f019f/ipojo/runtime/core/src/main/java/org/apache/felix/ipojo/configuration/Instance.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/ipojo/runtime/core/src/main/java/org/apache/felix/ipojo/configuration/Instance.java?ref=33113b30dee87927a9e05090785e3887a23f019f",
                "deletions": 2,
                "filename": "ipojo/runtime/core/src/main/java/org/apache/felix/ipojo/configuration/Instance.java",
                "patch": "@@ -62,8 +62,10 @@ public String name() {\n \n     public Dictionary<String, Object> configuration() {\n         Hashtable<String, Object> configuration = new Hashtable<String, Object>();\n-        for (Property property : this.configuration) {\n-            configuration.put(property.name, property.value);\n+        if (this.configuration != null) {\n+            for (Property property : this.configuration) {\n+                configuration.put(property.name, property.value);\n+            }\n         }\n \n         if (name != null) {",
                "raw_url": "https://github.com/apache/felix/raw/33113b30dee87927a9e05090785e3887a23f019f/ipojo/runtime/core/src/main/java/org/apache/felix/ipojo/configuration/Instance.java",
                "sha": "bda9f4f5ccca6619500d8e946c590da36af8860b",
                "status": "modified"
            }
        ],
        "message": "Fix FELIX-4261 NPE when an instance is declared without a configuration using the @ConfigurationTracker\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1528105 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/1fdfedc2a6f711ef9d7c2d95a0e72f76585a8e07",
        "repo": "felix",
        "unit_tests": [
            "InstanceTest.java"
        ]
    },
    "felix_3581344": {
        "bug_id": "felix_3581344",
        "commit": "https://github.com/apache/felix/commit/3581344c7b323b2ee7120933dd9c75f3d69e528b",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/felix/blob/3581344c7b323b2ee7120933dd9c75f3d69e528b/scr/src/main/java/org/apache/felix/scr/impl/config/ConfigurationSupport.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/config/ConfigurationSupport.java?ref=3581344c7b323b2ee7120933dd9c75f3d69e528b",
                "deletions": 0,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/config/ConfigurationSupport.java",
                "patch": "@@ -108,6 +108,10 @@ public void configureComponentHolder(final ComponentHolder holder)\n         if (!holder.getComponentMetadata().isConfigurationIgnored())\n         {\n             final BundleContext bundleContext = holder.getActivator().getBundleContext();\n+            if ( bundleContext == null )\n+            {\n+                return;// bundle was stopped concurrently with configuration deletion\n+            }\n             final String confPid = holder.getComponentMetadata().getConfigurationPid();\n \n             final ServiceReference caRef = bundleContext.getServiceReference(ComponentRegistry.CONFIGURATION_ADMIN);",
                "raw_url": "https://github.com/apache/felix/raw/3581344c7b323b2ee7120933dd9c75f3d69e528b/scr/src/main/java/org/apache/felix/scr/impl/config/ConfigurationSupport.java",
                "sha": "4492cb4262947e5fd265b9926980f86ede004cbb",
                "status": "modified"
            }
        ],
        "message": "FELIX-4088 Fix NPE on concurrent configuration deletion/bundle stop\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1487635 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/8fd0a7b69c6f5c1d8f96792dbec826a8df3a1bf0",
        "repo": "felix",
        "unit_tests": [
            "ConfigurationSupportTest.java"
        ]
    },
    "felix_3645d19": {
        "bug_id": "felix_3645d19",
        "commit": "https://github.com/apache/felix/commit/3645d19956bd42c8aa416d1045e1983b565994e7",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/felix/blob/3645d19956bd42c8aa416d1045e1983b565994e7/configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationManager.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationManager.java?ref=3645d19956bd42c8aa416d1045e1983b565994e7",
                "deletions": 7,
                "filename": "configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationManager.java",
                "patch": "@@ -1006,18 +1006,28 @@ else if ( pidObj instanceof Collection )\n     static String toString( ServiceReference ref )\n     {\n         String[] ocs = ( String[] ) ref.getProperty( \"objectClass\" );\n-        String oc = \"[\";\n+        StringBuffer buf = new StringBuffer(\"[\");\n         for ( int i = 0; i < ocs.length; i++ )\n         {\n-            oc += ocs[i];\n+            buf.append(ocs[i]);\n             if ( i < ocs.length - 1 )\n-                oc += \", \";\n+                buf.append(\", \");\n         }\n \n-        oc += \", id=\" + ref.getProperty( Constants.SERVICE_ID );\n-        oc += \", bundle=\" + ref.getBundle().getBundleId();\n-        oc += \"]\";\n-        return oc;\n+        buf.append( \", id=\" ).append( ref.getProperty( Constants.SERVICE_ID ) );\n+\n+        Bundle provider = ref.getBundle();\n+        if ( provider != null )\n+        {\n+            buf.append( \", bundle=\" ).append( provider.getBundleId() );\n+        }\n+        else\n+        {\n+            buf.append( \", unregistered\" );\n+        }\n+\n+        buf.append( \"]\" );\n+        return buf.toString();\n     }\n \n ",
                "raw_url": "https://github.com/apache/felix/raw/3645d19956bd42c8aa416d1045e1983b565994e7/configadmin/src/main/java/org/apache/felix/cm/impl/ConfigurationManager.java",
                "sha": "b94e32283a7d2c2ee9e4554a6d998ea8d6e3eed0",
                "status": "modified"
            }
        ],
        "message": "FELIX-2847 Prevent NPE if service already unregistered\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1071990 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/c894cacbb8cc90872cfaa0ce60ce6be167a69cf5",
        "repo": "felix",
        "unit_tests": [
            "ConfigurationManagerTest.java"
        ]
    },
    "felix_3eb9702": {
        "bug_id": "felix_3eb9702",
        "commit": "https://github.com/apache/felix/commit/3eb97028bc2d5fb5955da7212577e51598a61b06",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/felix/blob/3eb97028bc2d5fb5955da7212577e51598a61b06/ipojo/core/src/main/java/org/apache/felix/ipojo/handlers/dependency/Dependency.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/ipojo/core/src/main/java/org/apache/felix/ipojo/handlers/dependency/Dependency.java?ref=3eb97028bc2d5fb5955da7212577e51598a61b06",
                "deletions": 0,
                "filename": "ipojo/core/src/main/java/org/apache/felix/ipojo/handlers/dependency/Dependency.java",
                "patch": "@@ -247,6 +247,13 @@ protected void onObjectCreation(Object pojo) {\n             refs = getServiceReferences(); // Stack confinement.\n         }\n \n+        // This is a pretty strange case, but we don't have any service.\n+        // This may happen during refresh.\n+        // So we just return.\n+        if (refs == null) {\n+        \treturn;\n+        }\n+\n         // Call bind callback.\n         for (int j = 0; m_callbacks != null && j < m_callbacks.length; j++) { // The array is constant.\n             if (m_callbacks[j].getMethodType() == DependencyCallback.BIND) {",
                "raw_url": "https://github.com/apache/felix/raw/3eb97028bc2d5fb5955da7212577e51598a61b06/ipojo/core/src/main/java/org/apache/felix/ipojo/handlers/dependency/Dependency.java",
                "sha": "bdbb269e29b0669e0fa78282e1edd6f4d00709b7",
                "status": "modified"
            }
        ],
        "message": "Try a first approach to fix FELIX-2596 DependencyHandler.onObjectCreation throws NPE when bundle is refreshed.\nIf refs is null, exit immediately.\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@996286 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/27f98e32eb1829129cbea60469b78e5552f297fd",
        "repo": "felix",
        "unit_tests": [
            "DependencyTest.java",
            "TestDependency.java"
        ]
    },
    "felix_4365f04": {
        "bug_id": "felix_4365f04",
        "commit": "https://github.com/apache/felix/commit/4365f04e0bda5a92df682a57552d46cca83cddf4",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/felix/blob/4365f04e0bda5a92df682a57552d46cca83cddf4/webconsole/src/main/java/org/apache/felix/webconsole/AbstractWebConsolePlugin.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/webconsole/src/main/java/org/apache/felix/webconsole/AbstractWebConsolePlugin.java?ref=4365f04e0bda5a92df682a57552d46cca83cddf4",
                "deletions": 1,
                "filename": "webconsole/src/main/java/org/apache/felix/webconsole/AbstractWebConsolePlugin.java",
                "patch": "@@ -31,6 +31,7 @@\n import org.apache.commons.io.IOUtils;\n import org.osgi.framework.Bundle;\n import org.osgi.framework.BundleContext;\n+import org.osgi.service.log.LogService;\n \n \n /**\n@@ -898,7 +899,7 @@ private final String readTemplateFile( final Class clazz, final String templateF\n         }\n \n         // template file does not exist, return an empty string\n-        log( \"readTemplateFile: File '\" + templateFile + \"' not found through class \" + clazz ); //$NON-NLS-1$ //$NON-NLS-2$\n+        log( LogService.LOG_ERROR, \"readTemplateFile: File '\" + templateFile + \"' not found through class \" + clazz ); //$NON-NLS-1$ //$NON-NLS-2$\n         return \"\"; //$NON-NLS-1$\n     }\n ",
                "raw_url": "https://github.com/apache/felix/raw/4365f04e0bda5a92df682a57552d46cca83cddf4/webconsole/src/main/java/org/apache/felix/webconsole/AbstractWebConsolePlugin.java",
                "sha": "16d8e56a4461d4aa5aca2c8e2c7ee15486a014d8",
                "status": "modified"
            }
        ],
        "message": "Fixed FELIX-3405 NPE in Web Console\nhttps://issues.apache.org/jira/browse/FELIX-3405\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1306203 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/36e947451db3b558d660b6e4e17e24cc588e411b",
        "repo": "felix",
        "unit_tests": [
            "AbstractWebConsolePluginTest.java"
        ]
    },
    "felix_4aaa34a": {
        "bug_id": "felix_4aaa34a",
        "commit": "https://github.com/apache/felix/commit/4aaa34a20eb4b5c27a96ead3749996a35ac969b1",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/felix/blob/4aaa34a20eb4b5c27a96ead3749996a35ac969b1/bundleplugin/src/main/java/org/apache/felix/bundleplugin/BundlePlugin.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/bundleplugin/src/main/java/org/apache/felix/bundleplugin/BundlePlugin.java?ref=4aaa34a20eb4b5c27a96ead3749996a35ac969b1",
                "deletions": 4,
                "filename": "bundleplugin/src/main/java/org/apache/felix/bundleplugin/BundlePlugin.java",
                "patch": "@@ -937,10 +937,13 @@ protected Properties getDefaultProperties( MavenProject currentProject )\n \n         if ( currentProject.getOrganization() != null )\n         {\n-            String organizationName = currentProject.getOrganization().getName();\n-            header( properties, Analyzer.BUNDLE_VENDOR, organizationName );\n-            properties.put( \"project.organization.name\", organizationName );\n-            properties.put( \"pom.organization.name\", organizationName );\n+            if ( currentProject.getOrganization().getName() != null )\n+            {\n+                String organizationName = currentProject.getOrganization().getName();\n+                header( properties, Analyzer.BUNDLE_VENDOR, organizationName );\n+                properties.put( \"project.organization.name\", organizationName );\n+                properties.put( \"pom.organization.name\", organizationName );\n+            }\n             if ( currentProject.getOrganization().getUrl() != null )\n             {\n                 String organizationUrl = currentProject.getOrganization().getUrl();",
                "raw_url": "https://github.com/apache/felix/raw/4aaa34a20eb4b5c27a96ead3749996a35ac969b1/bundleplugin/src/main/java/org/apache/felix/bundleplugin/BundlePlugin.java",
                "sha": "7a43d2c660a8f97c171dbaa90d7f0c0d806d13b5",
                "status": "modified"
            }
        ],
        "message": "FELIX-2722: avoid NPE when project.organization.name is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1139278 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/acee946653e22fd863b8ccd78473ad4ff0fb3823",
        "repo": "felix",
        "unit_tests": [
            "BundlePluginTest.java"
        ]
    },
    "felix_54eaa9e": {
        "bug_id": "felix_54eaa9e",
        "commit": "https://github.com/apache/felix/commit/54eaa9ea58ea56b1d58b5f978d9d0defd4795573",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/felix/blob/54eaa9ea58ea56b1d58b5f978d9d0defd4795573/scr/src/main/java/org/apache/felix/scr/impl/BundleComponentActivator.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/BundleComponentActivator.java?ref=54eaa9ea58ea56b1d58b5f978d9d0defd4795573",
                "deletions": 3,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/BundleComponentActivator.java",
                "patch": "@@ -757,9 +757,11 @@ public BundleLogger getLogger() {\n     public RegionConfigurationSupport setRegionConfigurationSupport(ServiceReference<ConfigurationAdmin> reference)\n     {\n         RegionConfigurationSupport rcs = m_componentRegistry.registerRegionConfigurationSupport( reference );\n-        for ( ComponentHolder<?> holder : m_holders )\n-        {\n-            rcs.configureComponentHolder( holder );\n+        if (rcs != null) {\n+            for ( ComponentHolder<?> holder : m_holders )\n+            {\n+                rcs.configureComponentHolder( holder );\n+            }\n         }\n         return rcs;\n     }",
                "raw_url": "https://github.com/apache/felix/raw/54eaa9ea58ea56b1d58b5f978d9d0defd4795573/scr/src/main/java/org/apache/felix/scr/impl/BundleComponentActivator.java",
                "sha": "4a8c94a21cb5181dea09061f423f15557ac5ba70",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/felix/blob/54eaa9ea58ea56b1d58b5f978d9d0defd4795573/scr/src/main/java/org/apache/felix/scr/impl/ComponentRegistry.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/ComponentRegistry.java?ref=54eaa9ea58ea56b1d58b5f978d9d0defd4795573",
                "deletions": 1,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/ComponentRegistry.java",
                "patch": "@@ -640,7 +640,11 @@ public String toString()\n \n     public RegionConfigurationSupport registerRegionConfigurationSupport(\n             ServiceReference<ConfigurationAdmin> reference) {\n-        RegionConfigurationSupport trialRcs = new RegionConfigurationSupport(m_logger, reference) {\n+        Bundle bundle = reference.getBundle();\n+        if (bundle == null) {\n+            return null;\n+        }\n+        RegionConfigurationSupport trialRcs = new RegionConfigurationSupport(m_logger, reference, bundle) {\n             @Override\n             protected Collection<ComponentHolder<?>> getComponentHolders(TargetedPID pid)\n             {",
                "raw_url": "https://github.com/apache/felix/raw/54eaa9ea58ea56b1d58b5f978d9d0defd4795573/scr/src/main/java/org/apache/felix/scr/impl/ComponentRegistry.java",
                "sha": "32f617dcd33e3a86f5cf2e1810c9c4607ec49cf5",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/felix/blob/54eaa9ea58ea56b1d58b5f978d9d0defd4795573/scr/src/main/java/org/apache/felix/scr/impl/manager/RegionConfigurationSupport.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/manager/RegionConfigurationSupport.java?ref=54eaa9ea58ea56b1d58b5f978d9d0defd4795573",
                "deletions": 2,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/manager/RegionConfigurationSupport.java",
                "patch": "@@ -69,11 +69,10 @@\n      * @param bundleContext of the ConfigurationAdmin we are tracking\n      * @param registry\n      */\n-    public RegionConfigurationSupport(final ScrLogger logger, final ServiceReference<ConfigurationAdmin> reference)\n+    public RegionConfigurationSupport(final ScrLogger logger, final ServiceReference<ConfigurationAdmin> reference, Bundle bundle)\n     {\n         this.logger = logger;\n         this.caReference = reference;\n-        final Bundle bundle = reference.getBundle();\n         this.bundleId = bundle.getBundleId();\n         this.caBundleContext = bundle.getBundleContext();\n     }",
                "raw_url": "https://github.com/apache/felix/raw/54eaa9ea58ea56b1d58b5f978d9d0defd4795573/scr/src/main/java/org/apache/felix/scr/impl/manager/RegionConfigurationSupport.java",
                "sha": "d90ac045adf4ba41783a43730975d08ace40fb41",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/felix/blob/54eaa9ea58ea56b1d58b5f978d9d0defd4795573/scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java?ref=54eaa9ea58ea56b1d58b5f978d9d0defd4795573",
                "deletions": 3,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java",
                "patch": "@@ -288,15 +288,19 @@ private ServiceReferenceDTO serviceReferenceToDTO( ServiceReference<?> serviceRe\n     {\n         if (serviceRef == null)\n             return null;\n-        final long bundleId = serviceRef.getBundle().getBundleId();\n+        final Bundle bundle = serviceRef.getBundle();\n+        if (bundle == null) {\n+            return null;\n+        }\n+        final long bundleId = bundle.getBundleId();\n         ConcurrentHashMap<Long, ServiceReferenceDTO[]> cache = dtoCache.get();\n         if (cache == null) {\n             cache = new ConcurrentHashMap<>();\n             dtoCache = new SoftReference<>(cache);\n         }\n         ServiceReferenceDTO[] dtos = cache.get(bundleId);\n         if (dtos == null) {\n-            dtos = serviceRef.getBundle().adapt(ServiceReferenceDTO[].class);\n+            dtos = bundle.adapt(ServiceReferenceDTO[].class);\n             if (dtos == null) {\n                 dtos = new ServiceReferenceDTO[0];\n             }\n@@ -488,7 +492,9 @@ public void serviceChanged(final ServiceEvent event) {\n             ConcurrentHashMap<Long, ServiceReferenceDTO[]> cache = dtoCache.get();\n             if (cache != null)\n             {\n-                cache.remove(event.getServiceReference().getBundle().getBundleId());\n+                // using bundle id property incase the service has gotten unregistered\n+                // before we could get the bundle object\n+                cache.remove(event.getServiceReference().getProperty(Constants.SERVICE_BUNDLEID));\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/felix/raw/54eaa9ea58ea56b1d58b5f978d9d0defd4795573/scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java",
                "sha": "328fd0a95fabe97056220a0c1d27734a72560b2c",
                "status": "modified"
            }
        ],
        "message": "WORKING - fix NPE on ServiceRef.getBundle\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1853160 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/26e1cb9037e1ba96e49f27b29b0e4aef74ea8771",
        "repo": "felix",
        "unit_tests": [
            "ServiceComponentRuntimeImplTest.java"
        ]
    },
    "felix_57cc459": {
        "bug_id": "felix_57cc459",
        "commit": "https://github.com/apache/felix/commit/57cc459267362ef68fe33d3026d180451b5b30d2",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/felix/blob/57cc459267362ef68fe33d3026d180451b5b30d2/scrplugin/src/main/java/org/apache/felix/scrplugin/om/Component.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scrplugin/src/main/java/org/apache/felix/scrplugin/om/Component.java?ref=57cc459267362ef68fe33d3026d180451b5b30d2",
                "deletions": 1,
                "filename": "scrplugin/src/main/java/org/apache/felix/scrplugin/om/Component.java",
                "patch": "@@ -224,7 +224,9 @@ public void validate(List issues, List warnings)\n                     }\n \n                     // verify service\n-                    this.getService().validate(issues, warnings);\n+                    if (this.getService() != null) {\n+                        this.getService().validate(issues, warnings);\n+                    }\n \n                     // serviceFactory must not be true for immediate of component factory\n                     if (this.isServiceFactory() && this.isImmediate() != null && this.isImmediate().booleanValue() && this.getFactory() != null) {",
                "raw_url": "https://github.com/apache/felix/raw/57cc459267362ef68fe33d3026d180451b5b30d2/scrplugin/src/main/java/org/apache/felix/scrplugin/om/Component.java",
                "sha": "51c5e915a63ac43f2237d6653f6f20a795e78575",
                "status": "modified"
            }
        ],
        "message": "Prevent NPE if a component to be validated does is not a service\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@568434 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/6fa0edef2e59339b2848459cb5236ed04a927a39",
        "repo": "felix",
        "unit_tests": [
            "ComponentTest.java",
            "TestComponent.java"
        ]
    },
    "felix_6511160": {
        "bug_id": "felix_6511160",
        "commit": "https://github.com/apache/felix/commit/65111605a44553b7be4009dace612f32f7a646a2",
        "file": [
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/felix/blob/65111605a44553b7be4009dace612f32f7a646a2/configadmin/src/main/java/org/apache/felix/cm/file/FilePersistenceManager.java",
                "changes": 61,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/configadmin/src/main/java/org/apache/felix/cm/file/FilePersistenceManager.java?ref=65111605a44553b7be4009dace612f32f7a646a2",
                "deletions": 30,
                "filename": "configadmin/src/main/java/org/apache/felix/cm/file/FilePersistenceManager.java",
                "patch": "@@ -1,4 +1,4 @@\n-/* \n+/*\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n  * distributed with this work for additional information\n@@ -115,7 +115,7 @@\n     /**\n      * The extension of the configuration files, while they are being written\n      * (value is \".tmp\").\n-     * \n+     *\n      * @see #store(String, Dictionary)\n      */\n     private static final String TMP_EXT = \".tmp\";\n@@ -159,9 +159,9 @@\n      * This method is not part of the API of this class and is declared package\n      * private to enable JUnit testing on it. This method may be removed or\n      * modified at any time without notice.\n-     * \n+     *\n      * @param pid The Service PID to encode into a relative path name.\n-     * \n+     *\n      * @return The relative path name corresponding to the Service PID.\n      */\n     static String encodePid( String pid )\n@@ -231,11 +231,11 @@ static String encodePid( String pid )\n      * This constructor is equivalent to calling\n      * {@link #FilePersistenceManager(BundleContext, String)} with a\n      * <code>null</code> <code>BundleContext</code>.\n-     * \n+     *\n      * @param location The configuration file location. If this is\n      *      <code>null</code> the <code>config</code> directory below the current\n      *      working directory is used.\n-     * \n+     *\n      * @throws IllegalArgumentException If the <code>location</code> exists but\n      *      is not a directory or does not exist and cannot be created.\n      */\n@@ -269,15 +269,15 @@ public FilePersistenceManager( String location )\n      * step or the named directory (including any parent directories) cannot be\n      * created, an <code>IllegalArgumentException</code> is thrown.</li>\n      * </ul>\n-     * \n+     *\n      * @param bundleContext The <code>BundleContext</code> to optionally get\n      *      the data location for the configuration files. This may be\n      *      <code>null</code>, in which case this constructor acts exactly the\n      *      same as calling {@link #FilePersistenceManager(String)}.\n      * @param location The configuration file location. If this is\n      *      <code>null</code> the <code>config</code> directory below the current\n      *      working directory is used.\n-     * \n+     *\n      * @throws IllegalArgumentException If the location exists but is not a\n      *      directory or does not exist and cannot be created.\n      * @throws IllegalStateException If the <code>bundleContext</code> is not\n@@ -315,11 +315,11 @@ public FilePersistenceManager( BundleContext bundleContext, String location )\n                     locationFile = bundleLocationFile;\n                 }\n             }\n-            \n+\n             // ensure the file object is an absolute file object\n             locationFile = locationFile.getAbsoluteFile();\n         }\n-        \n+\n         // check the location\n         if ( !locationFile.isDirectory() )\n         {\n@@ -341,7 +341,7 @@ public FilePersistenceManager( BundleContext bundleContext, String location )\n     /**\n      * Returns the directory in which the configuration files are written as\n      * a <code>File</code> object.\n-     * \n+     *\n      * @return The configuration file location.\n      */\n     public File getLocation()\n@@ -356,7 +356,7 @@ public File getLocation()\n      * <p>\n      * This method is a lazy implementation, which is just one configuration\n      * file ahead of the current enumeration location.\n-     * \n+     *\n      * @return an enumeration of configuration data returned as instances of\n      *      the <code>Dictionary</code> class.\n      */\n@@ -368,7 +368,7 @@ public Enumeration getDictionaries()\n \n     /**\n      * Deletes the file for the given identifier.\n-     * \n+     *\n      * @param pid The identifier of the configuration file to delete.\n      */\n     public void delete( String pid )\n@@ -380,9 +380,9 @@ public void delete( String pid )\n     /**\n      * Returns <code>true</code> if a (configuration) file exists for the given\n      * identifier.\n-     * \n+     *\n      * @param pid The identifier of the configuration file to check.\n-     * \n+     *\n      * @return <code>true</code> if the file exists\n      */\n     public boolean exists( String pid )\n@@ -394,9 +394,9 @@ public boolean exists( String pid )\n     /**\n      * Reads the (configuration) for the given identifier into a\n      * <code>Dictionary</code> object.\n-     * \n+     *\n      * @param pid The identifier of the configuration file to delete.\n-     * \n+     *\n      * @return The configuration read from the file. This <code>Dictionary</code>\n      *      may be empty if the file contains no configuration information\n      *      or is not properly formatted.\n@@ -410,11 +410,11 @@ public Dictionary load( String pid ) throws IOException\n     /**\n      * Stores the contents of the <code>Dictionary</code> in a file denoted\n      * by the given identifier.\n-     * \n+     *\n      * @param pid The identifier of the configuration file to which to write\n      *      the configuration contents.\n      * @param props The configuration data to write.\n-     * \n+     *\n      * @throws IOException If an error occurrs writing the configuration data.\n      */\n     public void store( String pid, Dictionary props ) throws IOException\n@@ -424,7 +424,7 @@ public void store( String pid, Dictionary props ) throws IOException\n         try\n         {\n             File cfgFile = getFile( pid );\n-            \n+\n             // ensure parent path\n             File cfgDir = cfgFile.getParentFile();\n             cfgDir.mkdirs();\n@@ -443,7 +443,7 @@ public void store( String pid, Dictionary props ) throws IOException\n                 if (cfgFile.exists()) {\n                     cfgFile.delete();\n                 }\n-                \n+\n                 // rename the temporary file to the new file\n                 tmpFile.renameTo( cfgFile );\n             }\n@@ -461,8 +461,9 @@ public void store( String pid, Dictionary props ) throws IOException\n                     // ignore\n                 }\n             }\n-            \n-            if (tmpFile.exists()) {\n+\n+            if (tmpFile != null && tmpFile.exists())\n+            {\n                 tmpFile.delete();\n             }\n         }\n@@ -472,11 +473,11 @@ public void store( String pid, Dictionary props ) throws IOException\n     /**\n      * Loads the contents of the <code>cfgFile</code> into a new\n      * <code>Dictionary</code> object.\n-     * \n+     *\n      * @param cfgFile The file from which to load the data.\n-     * \n+     *\n      * @return A new <code>Dictionary</code> object providing the file contents.\n-     * \n+     *\n      * @throws java.io.FileNotFoundException If the given file does not exist.\n      * @throws IOException If an error occurrs reading the configuration file.\n      */\n@@ -524,9 +525,9 @@ private Dictionary load( File cfgFile ) throws IOException\n      * </ul>\n      * Before returning the path name, the parent directory and any ancestors\n      * are created.\n-     *  \n+     *\n      * @param pid The identifier for which to create the abstract file name.\n-     * \n+     *\n      * @return The abstract path name, which the parent directory path created.\n      */\n     private File getFile( String pid )\n@@ -602,9 +603,9 @@ private Dictionary seek()\n                         try\n                         {\n                             Dictionary dict =  load( cfgFile );\n-                            \n+\n                             // use the dictionary if it has no PID or the PID\n-                            // derived file name matches the source file name \n+                            // derived file name matches the source file name\n                             if ( dict.get( Constants.SERVICE_PID ) == null\n                                 || cfgFile.equals( getFile( ( String ) dict.get( Constants.SERVICE_PID ) ) ) )\n                             {",
                "raw_url": "https://github.com/apache/felix/raw/65111605a44553b7be4009dace612f32f7a646a2/configadmin/src/main/java/org/apache/felix/cm/file/FilePersistenceManager.java",
                "sha": "369778d9192eed0419e99c3437dbb8f93cfd862b",
                "status": "modified"
            }
        ],
        "message": "Prevent possible NPE when tmpFile is null (if an error occurs before tmpFile could be set)\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@572288 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/0add2d42d8e83c353166c8d7a4089ea0bb2d6cfc",
        "repo": "felix",
        "unit_tests": [
            "FilePersistenceManagerTest.java"
        ]
    },
    "felix_65b98ca": {
        "bug_id": "felix_65b98ca",
        "commit": "https://github.com/apache/felix/commit/65b98ca9339d09303823e065a1bdbe83f22831cd",
        "file": [
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/felix/blob/65b98ca9339d09303823e065a1bdbe83f22831cd/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java?ref=65b98ca9339d09303823e065a1bdbe83f22831cd",
                "deletions": 7,
                "filename": "resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java",
                "patch": "@@ -197,15 +197,14 @@ public ResolverImpl(Logger logger)\n                 // If a populated resource is a fragment, then its host\n                 // must ultimately be verified, so store its host requirement\n                 // to use for package space calculation.\n-                Map<Resource, List<Requirement>> hostReqs =\n-                    new HashMap<Resource, List<Requirement>>();\n+                Map<Resource, Requirement> hostReqs = new HashMap<Resource, Requirement>();\n                 for (Resource resource : allResources)\n                 {\n                     if (Util.isFragment(resource))\n                     {\n                         hostReqs.put(\n                             resource,\n-                            resource.getRequirements(HostNamespace.HOST_NAMESPACE));\n+                            resource.getRequirements(HostNamespace.HOST_NAMESPACE).get(0));\n                     }\n                 }\n \n@@ -260,10 +259,18 @@ public ResolverImpl(Logger logger)\n \n                         // If we are resolving a fragment, then get its\n                         // host candidate and verify it instead.\n-                        List<Requirement> hostReq = hostReqs.get(resource);\n+                        Requirement hostReq = hostReqs.get(resource);\n                         if (hostReq != null)\n                         {\n-                            target = allCandidates.getFirstCandidate(hostReq.get(0)).getResource();\n+                            Capability hostCap = allCandidates.getFirstCandidate(hostReq);\n+                            // If the resource is an already resolved fragment and can not\n+                            // be attached to new hosts, there will be no matching host,\n+                            // so ignore this resource\n+                            if (hostCap == null)\n+                            {\n+                                continue;\n+                            }\n+                            target = hostCap.getResource();\n                         }\n \n                         calculatePackageSpaces(\n@@ -366,10 +373,18 @@ else if (faultyResources.size() > currentFaultyResources.size())\n \n                         // If we are resolving a fragment, then we\n                         // actually want to populate its host's wires.\n-                        List<Requirement> hostReq = hostReqs.get(resource);\n+                        Requirement hostReq = hostReqs.get(resource);\n                         if (hostReq != null)\n                         {\n-                            target = allCandidates.getFirstCandidate(hostReq.get(0)).getResource();\n+                            Capability hostCap = allCandidates.getFirstCandidate(hostReq);\n+                            // If the resource is an already resolved fragment and can not\n+                            // be attached to new hosts, there will be no matching host,\n+                            // so ignore this resource\n+                            if (hostCap == null)\n+                            {\n+                                continue;\n+                            }\n+                            target = hostCap.getResource();\n                         }\n \n                         if (allCandidates.isPopulated(target))",
                "raw_url": "https://github.com/apache/felix/raw/65b98ca9339d09303823e065a1bdbe83f22831cd/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java",
                "sha": "381240b944741f3a7e83ff461064363815a4c506",
                "status": "modified"
            }
        ],
        "message": "[FELIX-4495] Fix possible NPE when trying to resolve a single bundle which is an already resolved fragment\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1667218 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/e4939fe97f399f8b855d1934f38a4bce6e33aec9",
        "repo": "felix",
        "unit_tests": [
            "ResolverImplTest.java"
        ]
    },
    "felix_6c02570": {
        "bug_id": "felix_6c02570",
        "commit": "https://github.com/apache/felix/commit/6c0257035e13838358dd0d3c5410ba0c04ce266b",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/felix/blob/6c0257035e13838358dd0d3c5410ba0c04ce266b/bundlerepository/src/main/java/org/apache/felix/bundlerepository/ResolverImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/bundlerepository/src/main/java/org/apache/felix/bundlerepository/ResolverImpl.java?ref=6c0257035e13838358dd0d3c5410ba0c04ce266b",
                "deletions": 1,
                "filename": "bundlerepository/src/main/java/org/apache/felix/bundlerepository/ResolverImpl.java",
                "patch": "@@ -560,6 +560,10 @@ private boolean isResourceUpdatable(\n         // Get all of the local resolvable requirements for the old\n         // version of the resource from the specified resource array.\n         Requirement[] reqs = getResolvableRequirements(oldVersion, resources);\n+        if (reqs == null)\n+        {\n+            return true;\n+        }\n \n         // Now make sure that all of the requirements resolved by the\n         // old version of the resource can also be resolved by the new\n@@ -623,4 +627,4 @@ private boolean isResourceUpdatable(\n         }\n         return null;\n     }\n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/felix/raw/6c0257035e13838358dd0d3c5410ba0c04ce266b/bundlerepository/src/main/java/org/apache/felix/bundlerepository/ResolverImpl.java",
                "sha": "c096097821760215334c179a00d548adb414a2fc",
                "status": "modified"
            }
        ],
        "message": "Applied a patch to avoid an NPE.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/felix/trunk@452484 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/1b21b00ba033f2f6aa67dfba9888a3fcb09d7582",
        "repo": "felix",
        "unit_tests": [
            "ResolverImplTest.java"
        ]
    },
    "felix_6d84b19": {
        "bug_id": "felix_6d84b19",
        "commit": "https://github.com/apache/felix/commit/6d84b1961721b76637782f38c78e84f7d64c4c0f",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/felix/blob/6d84b1961721b76637782f38c78e84f7d64c4c0f/webconsole/src/main/java/org/apache/felix/webconsole/internal/servlet/OsgiManager.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/webconsole/src/main/java/org/apache/felix/webconsole/internal/servlet/OsgiManager.java?ref=6d84b1961721b76637782f38c78e84f7d64c4c0f",
                "deletions": 0,
                "filename": "webconsole/src/main/java/org/apache/felix/webconsole/internal/servlet/OsgiManager.java",
                "patch": "@@ -677,6 +677,10 @@ private final Locale getConfiguredLocale(HttpServletRequest request)\n             locale = configuredLocale;\n         if (locale == null)\n             locale = request.getLocale();\n+        // this should never happen as request.getLocale()\n+        // must return a locale (and not null). But just as a sanity check.\n+        if (locale == null)\n+            locale = Locale.ENGLISH;\n \n         return locale;\n     }",
                "raw_url": "https://github.com/apache/felix/raw/6d84b1961721b76637782f38c78e84f7d64c4c0f/webconsole/src/main/java/org/apache/felix/webconsole/internal/servlet/OsgiManager.java",
                "sha": "0eb211f1b84fa2a2fad42fefbcefd340531ef6f4",
                "status": "modified"
            }
        ],
        "message": "FELIX-5387 : NPE for requests missing 'felix-webconsole-locale' cookie\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1766584 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/9757556e2bed3de4b4cd1073c0d4ef3210b531c1",
        "repo": "felix",
        "unit_tests": [
            "OsgiManagerTest.java"
        ]
    },
    "felix_6dea751": {
        "bug_id": "felix_6dea751",
        "commit": "https://github.com/apache/felix/commit/6dea75105231d39ca155e89dda12acbb87bf8e63",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/felix/blob/6dea75105231d39ca155e89dda12acbb87bf8e63/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java?ref=6dea75105231d39ca155e89dda12acbb87bf8e63",
                "deletions": 1,
                "filename": "resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java",
                "patch": "@@ -1717,7 +1717,25 @@ private static boolean isCompatible(\n     private static Set<Capability> getPackageSources(\n             Capability cap, Map<Resource, Packages> resourcePkgMap)\n     {\n-        return resourcePkgMap.get(cap.getResource()).m_sources.get(cap);\n+        Resource resource = cap.getResource();\n+        if(resource == null)\n+        {\n+            return new HashSet<Capability>();\n+        }\n+\n+        OpenHashMap<Capability, Set<Capability>> sources = resourcePkgMap.get(resource).m_sources;\n+        if(sources == null)\n+        {\n+            return new HashSet<Capability>();\n+        }\n+\n+        Set<Capability> packageSources = sources.get(cap);\n+        if(packageSources == null) \n+        {\n+            return new HashSet<Capability>();\n+        }\n+\n+        return packageSources;  \n     }\n \n     private static void getPackageSourcesInternal(",
                "raw_url": "https://github.com/apache/felix/raw/6dea75105231d39ca155e89dda12acbb87bf8e63/resolver/src/main/java/org/apache/felix/resolver/ResolverImpl.java",
                "sha": "cf7daa098b4ce107ef179d5e7c3e1f104d0e1fe0",
                "status": "modified"
            }
        ],
        "message": "FELIX-5015 NPE in ResolverImpl\n\nApplying patch on behalf of Alexandre Roman with many thanks!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1705679 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/5745b8c3dae6950a3a77ebe285345a58a3ae23dc",
        "repo": "felix",
        "unit_tests": [
            "ResolverImplTest.java"
        ]
    },
    "felix_6e63f91": {
        "bug_id": "felix_6e63f91",
        "commit": "https://github.com/apache/felix/commit/6e63f916cc5aa55b0cc61f3cdc320ccd1d4e8555",
        "file": [
            {
                "additions": 60,
                "blob_url": "https://github.com/apache/felix/blob/6e63f916cc5aa55b0cc61f3cdc320ccd1d4e8555/useradmin/mongodb/src/main/java/org/apache/felix/useradmin/mongodb/MongoDBStore.java",
                "changes": 131,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/useradmin/mongodb/src/main/java/org/apache/felix/useradmin/mongodb/MongoDBStore.java?ref=6e63f916cc5aa55b0cc61f3cdc320ccd1d4e8555",
                "deletions": 71,
                "filename": "useradmin/mongodb/src/main/java/org/apache/felix/useradmin/mongodb/MongoDBStore.java",
                "patch": "@@ -47,30 +47,33 @@\n  * The configuration options recognized by this service are:\n  * </p>\n  * <dl>\n- * <dt>\"useradmin.mongodb.server\"</dt>\n- * <dd>A space separated string containing the MongoDB servers. The format for this string is: \"<code>&lt;host1:port1&gt; &lt;host2:port2&gt;</code>\". This value is mandatory;</dd>\n- * <dt>\"useradmin.mongodb.name\"</dt>\n- * <dd>A string containing the name of the database to use for this store. This value is mandatory;</dd>\n- * <dt>\"useradmin.mongodb.collection\"</dt>\n- * <dd>The name of the database collection to use for this store. This value is mandatory;</dd>\n- * <dt>\"useradmin.mongodb.username\"</dt>\n- * <dd>An optional string value representing the name of the user to authenticate against MongoDB;</dd>\n- * <dt>\"useradmin.mongodb.password\"</dt>\n- * <dd>An optional string value representing the password to authenticate against MongoDB.</dd>\n+ * <dt>server</dt>\n+ * <dd>A space separated string containing the MongoDB servers. The format for this string is: \"<code>&lt;host1:port1&gt; &lt;host2:port2&gt;</code>\". This value is optional;</dd>\n+ * <dt>dbname</dt>\n+ * <dd>A string value containing the name of the database to use for this store. This value is optional;</dd>\n+ * <dt>collection</dt>\n+ * <dd>The name of the database collection to use for this store. This value is optional;</dd>\n+ * <dt>username</dt>\n+ * <dd>A string value representing the name of the user to authenticate against MongoDB. This value is optional;</dd>\n+ * <dt>password</dt>\n+ * <dd>A string value representing the password to authenticate against MongoDB. This value is optional.</dd>\n  * </dl>\n  * <p>\n- * Alternatively, one can also supply the above mentioned configuration keys as system properties. However,\n- * this implies that only a single store can be configured on a system!\n+ * Alternatively, one can also supply the above mentioned configuration keys prefixed with \n+ * \"<tt>org.apache.felix.useradmin.mongodb.</tt>\" as system properties (e.g.: \n+ * <tt>-Dorg.apache.felix.useradmin.mongodb.server=my.mongo.server:27017</tt>). However, this \n+ * implies that only a single store can be configured on a system (which could be a sensible\n+ * default for some situations)!\n  * </p>\n  * <p>\n  * By default, the following values are used:\n  * </p>\n  * <table>\n- * <tr><td>\"<tt>useradmin.mongodb.server</tt>\"</td><td>\"<tt>localhost:27017</tt>\"</td></tr>\n- * <tr><td>\"<tt>useradmin.mongodb.name</tt>\"</td><td>\"<tt>ua_repo</tt>\"</td></tr>\n- * <tr><td>\"<tt>useradmin.mongodb.collection</tt>\"</td><td>\"<tt>useradmin</tt>\"</td></tr>\n- * <tr><td>\"<tt>useradmin.mongodb.username</tt>\"</td><td>&lt;none&gt;</td></tr>\n- * <tr><td>\"<tt>useradmin.mongodb.password</tt>\"</td><td>&lt;none&gt;</td></tr>\n+ * <tr><td><tt>server</tt></td><td>\"<tt>localhost:27017</tt>\"</td></tr>\n+ * <tr><td><tt>dbname</tt></td><td>\"<tt>ua_repo</tt>\"</td></tr>\n+ * <tr><td><tt>collection</tt></td><td>\"<tt>useradmin</tt>\"</td></tr>\n+ * <tr><td><tt>username</tt></td><td>&lt;none&gt;</td></tr>\n+ * <tr><td><tt>password</tt></td><td>&lt;none&gt;</td></tr>\n  * </table>\n  * <p>\n  * This class is thread-safe.\n@@ -85,26 +88,27 @@\n      * A space-separated array with server definitions to access MongoDB. \n      * Format = \"&lt;host1:port1&gt; &lt;host2:port2&gt;\". \n      * */\n-    private static final String KEY_MONGODB_SERVER = \"useradmin.mongodb.server\";\n+    private static final String KEY_MONGODB_SERVER = \"server\";\n     /** The name of the MongoDB database instance. */\n-    private static final String KEY_MONGODB_NAME = \"useradmin.mongodb.name\";\n+    private static final String KEY_MONGODB_DBNAME = \"dbname\";\n     /** The username of the MongoDB database instance. */\n-    private static final String KEY_MONGODB_USERNAME = \"useradmin.mongodb.username\";\n+    private static final String KEY_MONGODB_USERNAME = \"username\";\n     /** The password of the MongoDB database instance. */\n-    private static final String KEY_MONGODB_PASSWORD = \"useradmin.mongodb.password\";\n+    private static final String KEY_MONGODB_PASSWORD = \"password\";\n     /** The name of the MongoDB collection to use. */\n-    private static final String KEY_MONGODB_COLLECTION_NAME = \"useradmin.mongodb.collection\";\n+    private static final String KEY_MONGODB_COLLECTION_NAME = \"collection\";\n \n+    private static final String PREFIX = PID.concat(\".\");\n     /** Default MongoDB server; first checks a system property */\n-    private static final String DEFAULT_MONGODB_SERVER = System.getProperty(KEY_MONGODB_SERVER, \"localhost:27017\");\n+    private static final String DEFAULT_MONGODB_SERVER = System.getProperty(PREFIX.concat(KEY_MONGODB_SERVER), \"localhost:27017\");\n     /** Default MongoDB name */\n-    private static final String DEFAULT_MONGODB_NAME = System.getProperty(KEY_MONGODB_NAME, \"ua_repo\");\n+    private static final String DEFAULT_MONGODB_DBNAME = System.getProperty(PREFIX.concat(KEY_MONGODB_DBNAME), \"ua_repo\");\n     /** Default MongoDB collection */\n-    private static final String DEFAULT_MONGODB_COLLECTION = System.getProperty(KEY_MONGODB_COLLECTION_NAME, \"useradmin\");\n+    private static final String DEFAULT_MONGODB_COLLECTION = System.getProperty(PREFIX.concat(KEY_MONGODB_COLLECTION_NAME), \"useradmin\");\n     /** Default MongoDB username */\n-    private static final String DEFAULT_MONGODB_USERNAME = System.getProperty(KEY_MONGODB_USERNAME);\n+    private static final String DEFAULT_MONGODB_USERNAME = System.getProperty(PREFIX.concat(KEY_MONGODB_USERNAME));\n     /** Default MongoDB password */\n-    private static final String DEFAULT_MONGODB_PASSWORD = System.getProperty(KEY_MONGODB_PASSWORD);\n+    private static final String DEFAULT_MONGODB_PASSWORD = System.getProperty(PREFIX.concat(KEY_MONGODB_PASSWORD));\n \n     private final AtomicReference<MongoDB> m_mongoDbRef;\n     private final MongoSerializerHelper m_helper;\n@@ -220,7 +224,7 @@ public void initialize() throws IOException {\n         // already done by the #updated method...\n         MongoDB oldMongoDB = m_mongoDbRef.get();\n         if (oldMongoDB == null) {\n-            MongoDB mongoDB = new MongoDB(DEFAULT_MONGODB_SERVER, DEFAULT_MONGODB_NAME, DEFAULT_MONGODB_COLLECTION);\n+            MongoDB mongoDB = new MongoDB(DEFAULT_MONGODB_SERVER, DEFAULT_MONGODB_DBNAME, DEFAULT_MONGODB_COLLECTION);\n             \n             do {\n                 oldMongoDB = m_mongoDbRef.get();\n@@ -290,21 +294,16 @@ public void setLogService(LogService log) {\n     \n     @Override\n     public void updated(Dictionary properties) throws ConfigurationException {\n-        String newServers = DEFAULT_MONGODB_SERVER;\n-        String newDbName = DEFAULT_MONGODB_NAME;\n-        String newCollectionName = DEFAULT_MONGODB_COLLECTION;\n-        String newUsername = DEFAULT_MONGODB_USERNAME;\n-        String newPassword = DEFAULT_MONGODB_PASSWORD;\n-        \n-        if (properties != null) {\n-            // Use values supplied...\n-            newServers = getMandatoryProperty(properties, KEY_MONGODB_SERVER);\n-            newDbName = getMandatoryProperty(properties, KEY_MONGODB_NAME);\n-            newCollectionName = getMandatoryProperty(properties, KEY_MONGODB_COLLECTION_NAME);\n-            \n-            newUsername = getProperty(properties, KEY_MONGODB_USERNAME);\n-            newPassword = getProperty(properties, DEFAULT_MONGODB_PASSWORD);\n-        }\n+        // Defaults to \"ua_repo\"\n+        String newDbName = getProperty(properties, KEY_MONGODB_DBNAME, DEFAULT_MONGODB_DBNAME);\n+        // Defaults to \"localhost:27017\"\n+        String newServers = getProperty(properties, KEY_MONGODB_SERVER, DEFAULT_MONGODB_SERVER);\n+        // Defaults to \"useradmin\"\n+        String newCollectionName = getProperty(properties, KEY_MONGODB_COLLECTION_NAME, DEFAULT_MONGODB_COLLECTION);\n+        // Defaults to null\n+        String newUsername = getProperty(properties, KEY_MONGODB_USERNAME, DEFAULT_MONGODB_USERNAME);\n+        // Defaults to null. FELIX-3774; use correct property name...\n+        String newPassword = getProperty(properties, KEY_MONGODB_PASSWORD, DEFAULT_MONGODB_PASSWORD); \n \n         MongoDB newMongoDb = new MongoDB(newServers, newDbName, newCollectionName);\n \n@@ -315,7 +314,10 @@ public void updated(Dictionary properties) throws ConfigurationException {\n         while (!m_mongoDbRef.compareAndSet(oldMongoDb, newMongoDb));\n \n         try {\n-            oldMongoDb.disconnect();\n+            // FELIX-3775: oldMongoDb can be null when supplying the configuration for the first time...\n+            if (oldMongoDb != null) {\n+                oldMongoDb.disconnect();\n+            }\n         }\n         catch (MongoException e) {\n             m_log.log(LogService.LOG_WARNING, \"Failed to disconnect from (old) MongoDB!\", e);\n@@ -342,7 +344,7 @@ private void connectToDB(MongoDB mongoDB, String userName, String password) thro\n         if (!mongoDB.connect(userName, password)) {\n             throw new MongoException(\"Failed to connect to MongoDB! Authentication failed!\");\n         }\n-        \n+\n         DBCollection collection = mongoDB.getCollection();\n         if (collection == null) {\n             throw new MongoException(\"Failed to connect to MongoDB! No collection returned!\");\n@@ -364,37 +366,24 @@ private DBCollection getCollection() {\n         }\n         return mongoDB.getCollection();\n     }\n-\n-    /**\n-     * Returns the mandatory value for the given key.\n-     * \n-     * @param properties the properties to get the mandatory value from;\n-     * @param key the key of the value to retrieve;\n-     * @return the value, never <code>null</code>.\n-     * @throws ConfigurationException in case the given key had no value.\n-     */\n-    private String getMandatoryProperty(Dictionary properties, String key) throws ConfigurationException {\n-        String result = getProperty(properties, key);\n-        if (result == null || \"\".equals(result.trim())) {\n-            throw new ConfigurationException(key, \"cannot be null or empty!\");\n-        }\n-        return result;\n-    }\n     \n     /**\n-     * Returns the value for the given key.\n+     * Returns the value for the given key from the given properties.\n      * \n-     * @param properties the properties to get the value from;\n-     * @param key the key of the value to retrieve;\n-     * @return the value, can be <code>null</code> in case no such key is present.\n-     * @throws ConfigurationException in case the given key had no value.\n+     * @param properties the properties to get the value from, may be <code>null</code>;\n+     * @param key the key to retrieve the value for, cannot be <code>null</code>;\n+     * @param defaultValue the default value to use in case no value is present in the given dictionary, the value is not a string, or the dictionary itself was <code>null</code>.\n+     * @return the value, can be <code>null</code> in case the given key lead to a null value, or a null value was supplied as default value.\n      */\n-    private String getProperty(Dictionary properties, String key) throws ConfigurationException {\n-        Object result = properties.get(key);\n-        if (result == null || !(result instanceof String)) {\n-            return null;\n+    private String getProperty(Dictionary properties, String key, String defaultValue) {\n+        String result = defaultValue;\n+        if (properties != null) {\n+            Object value = properties.get(key);\n+            if (value != null && (value instanceof String)) {\n+                result = (String) value;\n+            }\n         }\n-        return (String) result;\n+        return result;\n     }\n     \n     /**",
                "raw_url": "https://github.com/apache/felix/raw/6e63f916cc5aa55b0cc61f3cdc320ccd1d4e8555/useradmin/mongodb/src/main/java/org/apache/felix/useradmin/mongodb/MongoDBStore.java",
                "sha": "5dc17191d79e16fb35bae9410738cd0483322c10",
                "status": "modified"
            }
        ],
        "message": "FELIX-3774, FELIX-3775 & FELIX-3776:\n\n- wrong key used in the retrieval of password property;\n- possible NPE when supplying the configuration for the first time (oldMongoDb can be null);\n- use sensible defaults and shorter keys for the configuration of the MongoDb backend.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1412466 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/ed18c55f435d4d9e5b1b032ccfbe08f5e147c720",
        "repo": "felix",
        "unit_tests": [
            "MongoDBStoreTest.java"
        ]
    },
    "felix_7a74324": {
        "bug_id": "felix_7a74324",
        "commit": "https://github.com/apache/felix/commit/7a74324eef3537b1474c955a33b01d5922afbdb9",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/felix/blob/7a74324eef3537b1474c955a33b01d5922afbdb9/org.apache.felix.bundlerepository/src/main/java/org/apache/felix/bundlerepository/RepositoryImpl.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/org.apache.felix.bundlerepository/src/main/java/org/apache/felix/bundlerepository/RepositoryImpl.java?ref=7a74324eef3537b1474c955a33b01d5922afbdb9",
                "deletions": 3,
                "filename": "org.apache.felix.bundlerepository/src/main/java/org/apache/felix/bundlerepository/RepositoryImpl.java",
                "patch": "@@ -108,6 +108,16 @@ public void setLastmodified(String s)\n         }\n     }\n \n+    /**\n+     * Default setter method when setting parsed data from the XML file,\n+     * which currently ignores everything. \n+    **/\n+    protected Object put(Object key, Object value)\n+    {\n+        // Ignore everything for now.\n+        return null;\n+    }\n+\n     private void parseRepositoryFile(int hopCount)\n     {\n // TODO: OBR - Implement hop count.\n@@ -145,13 +155,17 @@ public RepositoryImpl newInstance()\n                     }\n                 };\n \n+                // Get default setter method for Repository.\n+                Method repoSetter = RepositoryImpl.class.getDeclaredMethod(\n+                    \"put\", new Class[] { Object.class, Object.class });\n+\n                 // Get default setter method for Resource.\n-                Method resourceSetter = ResourceImpl.class.getDeclaredMethod(\n+                Method resSetter = ResourceImpl.class.getDeclaredMethod(\n                     \"put\", new Class[] { Object.class, Object.class });\n \n                 // Map XML tags to types.\n-                handler.addType(\"repository\", factory, Repository.class, null);\n-                handler.addType(\"resource\", ResourceImpl.class, Resource.class, resourceSetter);\n+                handler.addType(\"repository\", factory, Repository.class, repoSetter);\n+                handler.addType(\"resource\", ResourceImpl.class, Resource.class, resSetter);\n                 handler.addType(\"category\", CategoryImpl.class, null, null);\n                 handler.addType(\"require\", RequirementImpl.class, Requirement.class, null);\n                 handler.addType(\"capability\", CapabilityImpl.class, Capability.class, null);",
                "raw_url": "https://github.com/apache/felix/raw/7a74324eef3537b1474c955a33b01d5922afbdb9/org.apache.felix.bundlerepository/src/main/java/org/apache/felix/bundlerepository/RepositoryImpl.java",
                "sha": "ca73ecf96ca0a35b31882708c6dbee922059e8d7",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/felix/blob/7a74324eef3537b1474c955a33b01d5922afbdb9/org.apache.felix.bundlerepository/src/main/java/org/apache/felix/bundlerepository/RequirementImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/org.apache.felix.bundlerepository/src/main/java/org/apache/felix/bundlerepository/RequirementImpl.java?ref=7a74324eef3537b1474c955a33b01d5922afbdb9",
                "deletions": 1,
                "filename": "org.apache.felix.bundlerepository/src/main/java/org/apache/felix/bundlerepository/RequirementImpl.java",
                "patch": "@@ -118,7 +118,8 @@ public synchronized boolean equals(Object o)\n                 (m_optional == r.isOptional()) &&\n                 (m_multiple == r.isMultiple()) &&\n                 m_filter.toString().equals(r.getFilter()) &&\n-                m_comment.equals(r.getComment());\n+                ((m_comment == r.getComment()) ||\n+                    ((m_comment != null) && (m_comment.equals(r.getComment()))));\n         }\n         return false;\n     }",
                "raw_url": "https://github.com/apache/felix/raw/7a74324eef3537b1474c955a33b01d5922afbdb9/org.apache.felix.bundlerepository/src/main/java/org/apache/felix/bundlerepository/RequirementImpl.java",
                "sha": "b959f74b600b0646df07a29c3fa2acfab945a598",
                "status": "modified"
            }
        ],
        "message": "The repository impl now ignores extra metadata in the XML file. Also fixed\na bug in the requirement impl that could lead to a NPE when comparing\nrequirements with null comments.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/felix/trunk@396876 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/21ac64c4271fa06096d0ed50f0d564e345e05b8d",
        "repo": "felix",
        "unit_tests": [
            "RequirementImplTest.java"
        ]
    },
    "felix_8b420cc": {
        "bug_id": "felix_8b420cc",
        "commit": "https://github.com/apache/felix/commit/8b420ccc71de3cf2e293f79e90b585095eb281d4",
        "file": [
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/felix/blob/8b420ccc71de3cf2e293f79e90b585095eb281d4/framework/src/main/java/org/apache/felix/framework/FilterImpl.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/framework/src/main/java/org/apache/felix/framework/FilterImpl.java?ref=8b420ccc71de3cf2e293f79e90b585095eb281d4",
                "deletions": 16,
                "filename": "framework/src/main/java/org/apache/felix/framework/FilterImpl.java",
                "patch": "@@ -1,4 +1,4 @@\n-/* \n+/*\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n  * distributed with this work for additional information\n@@ -20,8 +20,8 @@\n \n import java.io.CharArrayReader;\n import java.io.IOException;\n-import java.util.*;\n import java.lang.ref.SoftReference;\n+import java.util.*;\n \n import org.apache.felix.framework.util.StringMap;\n import org.apache.felix.framework.util.ldap.*;\n@@ -56,7 +56,7 @@ public FilterImpl(Logger logger, String expr) throws InvalidSyntaxException\n         m_logger = logger;\n         if (expr == null)\n         {\n-            throw new InvalidSyntaxException(\"Filter cannot be null\", null);\n+            throw new NullPointerException(\"Filter cannot be null\");\n         }\n         Object[] program = null;\n         synchronized (m_programCache)\n@@ -127,44 +127,44 @@ public int hashCode()\n         return toString().hashCode();\n     }\n \n-    private boolean match(Dictionary dict, ServiceReference ref, boolean caseSensitive) \n+    private boolean match(Dictionary dict, ServiceReference ref, boolean caseSensitive)\n         throws IllegalArgumentException\n     {\n         SoftReference tupleRef = (SoftReference) m_cache.get();\n         Evaluator evaluator = null;\n         SimpleMapper mapper = null;\n         Object[] tuple = null;\n \n-        if (tupleRef != null) \n+        if (tupleRef != null)\n         {\n             tuple = (Object[]) tupleRef.get();\n         }\n \n-        if (tuple == null) \n+        if (tuple == null)\n         {\n             evaluator = new Evaluator(m_program);\n             mapper = new SimpleMapper();\n         }\n-        else \n+        else\n         {\n             evaluator = (Evaluator) tuple[0];\n             mapper = (SimpleMapper) tuple[1];\n             m_cache.set(null);\n         }\n \n-        try \n+        try\n         {\n-            if (dict != null) \n+            if (dict != null)\n             {\n                 mapper.setSource(dict, caseSensitive);\n             }\n-            else \n+            else\n             {\n                 mapper.setSource(ref);\n             }\n \n             return evaluator.evaluate(mapper);\n-        } \n+        }\n         catch (AttributeNotFoundException ex)\n         {\n             log(Logger.LOG_DEBUG, \"FilterImpl: Attribute not found.\", ex);\n@@ -173,18 +173,18 @@ private boolean match(Dictionary dict, ServiceReference ref, boolean caseSensiti\n         {\n             log(Logger.LOG_ERROR, \"FilterImpl: \" + toString(), ex);\n         }\n-        finally \n+        finally\n         {\n-            if (dict != null) \n+            if (dict != null)\n             {\n                 mapper.setSource(null, caseSensitive);\n             }\n-            else \n+            else\n             {\n                 mapper.setSource(null);\n             }\n-            \n-            if (tuple == null) \n+\n+            if (tuple == null)\n             {\n                 m_cache.set(new SoftReference(new Object[] {evaluator, mapper}));\n             }",
                "raw_url": "https://github.com/apache/felix/raw/8b420ccc71de3cf2e293f79e90b585095eb281d4/framework/src/main/java/org/apache/felix/framework/FilterImpl.java",
                "sha": "4b7abfbc1a8f20200f036d27e31dddff385f41d7",
                "status": "modified"
            }
        ],
        "message": "FELIX-1028 : Throw NPE instead of InvalidSyntaxException if expr is null.\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@763227 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/8d0e201d300e7d5d4e12be75130ce5586ea881fe",
        "repo": "felix",
        "unit_tests": [
            "FilterImplTest.java"
        ]
    },
    "felix_8e97091": {
        "bug_id": "felix_8e97091",
        "commit": "https://github.com/apache/felix/commit/8e97091f81b13e5a744b275222665a8d02e8bee5",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/felix/blob/8e97091f81b13e5a744b275222665a8d02e8bee5/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/DirectoryWatcher.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/DirectoryWatcher.java?ref=8e97091f81b13e5a744b275222665a8d02e8bee5",
                "deletions": 1,
                "filename": "fileinstall/src/main/java/org/apache/felix/fileinstall/internal/DirectoryWatcher.java",
                "patch": "@@ -1236,7 +1236,9 @@ private boolean startBundle(Bundle bundle)\n         // Bundles can only be started transient when the start level of the framework is high\n         // enough. Persistent (i.e. non-transient) starts will simply make the framework start the\n         // bundle when the start level is high enough.\n-        if (!isFragment(bundle) && startBundles\n+        if (startBundles\n+                && bundle.getState() != Bundle.UNINSTALLED\n+                && !isFragment(bundle)\n                 && startLevelSvc.getStartLevel() >= startLevelSvc.getBundleStartLevel(bundle))\n         {\n             try",
                "raw_url": "https://github.com/apache/felix/raw/8e97091f81b13e5a744b275222665a8d02e8bee5/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/DirectoryWatcher.java",
                "sha": "8600e0e709caff7c76d18b64dfb35c3690a6ce6d",
                "status": "modified"
            }
        ],
        "message": "[FELIX-3493] PackageAdminImpl throws NPE - File Install does not handle a bundle uninstall gracefully\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1348898 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/0e4d764291be43fe29e1fb88276069aa5952ede3",
        "repo": "felix",
        "unit_tests": [
            "DirectoryWatcherTest.java"
        ]
    },
    "felix_9a12575": {
        "bug_id": "felix_9a12575",
        "commit": "https://github.com/apache/felix/commit/9a1257521a770eb34623595bd8c43066d3797fb8",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/felix/blob/9a1257521a770eb34623595bd8c43066d3797fb8/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/ConfigInstaller.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/ConfigInstaller.java?ref=9a1257521a770eb34623595bd8c43066d3797fb8",
                "deletions": 1,
                "filename": "fileinstall/src/main/java/org/apache/felix/fileinstall/internal/ConfigInstaller.java",
                "patch": "@@ -127,7 +127,7 @@ public void doConfigurationEvent(ConfigurationEvent configurationEvent)\n                                             configurationEvent.getPid(),\n                                             \"?\");\n                 Dictionary dict = config.getProperties();\n-                String fileName = (String) dict.get( DirectoryWatcher.FILENAME );\n+                String fileName = dict != null ? (String) dict.get( DirectoryWatcher.FILENAME ) : null;\n                 File file = fileName != null ? fromConfigKey(fileName) : null;\n                 if( file != null && file.isFile() ) {\n                     TypedProperties props = new TypedProperties( bundleSubstitution() );",
                "raw_url": "https://github.com/apache/felix/raw/9a1257521a770eb34623595bd8c43066d3797fb8/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/ConfigInstaller.java",
                "sha": "0573e1e850ab84cee756583c02f8613984d874d7",
                "status": "modified"
            }
        ],
        "message": "[FELIX-5125] Possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1812985 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/c4eff57fa2c87b50b479afd6f0a23060700bf2af",
        "repo": "felix",
        "unit_tests": [
            "ConfigInstallerTest.java"
        ]
    },
    "felix_a44649e": {
        "bug_id": "felix_a44649e",
        "commit": "https://github.com/apache/felix/commit/a44649edd369a4444c7682e62ab68b1851ad6af9",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/felix/blob/a44649edd369a4444c7682e62ab68b1851ad6af9/deploymentadmin/autoconf/src/main/java/org/apache/felix/deployment/rp/autoconf/AutoConfResourceProcessor.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/deploymentadmin/autoconf/src/main/java/org/apache/felix/deployment/rp/autoconf/AutoConfResourceProcessor.java?ref=a44649edd369a4444c7682e62ab68b1851ad6af9",
                "deletions": 0,
                "filename": "deploymentadmin/autoconf/src/main/java/org/apache/felix/deployment/rp/autoconf/AutoConfResourceProcessor.java",
                "patch": "@@ -100,6 +100,11 @@ public void process(String name, InputStream stream) throws ResourceProcessorExc\n \n \t   // process resources\n \t   Map designates = data.getDesignates();\n+\t   if (designates == null) {\n+\t       // if there are no designates, there's nothing to process\n+\t       m_log.log(LogService.LOG_INFO, \"No designates found in the resource, so there's nothing to process.\");\n+\t       return;\n+\t   }\n \t   Map localOcds = data.getObjectClassDefinitions();\n \t   Iterator i = designates.keySet().iterator();\n \t   while (i.hasNext()) {",
                "raw_url": "https://github.com/apache/felix/raw/a44649edd369a4444c7682e62ab68b1851ad6af9/deploymentadmin/autoconf/src/main/java/org/apache/felix/deployment/rp/autoconf/AutoConfResourceProcessor.java",
                "sha": "980c0906633387bc7e1d8a5d10c90bbb09225356",
                "status": "modified"
            }
        ],
        "message": "When the resource processor gets a resource that contains no Designates, which might be a bit strange but is allowed according to the spec, the processor throws a NPE, when it should just not do any processing. This change does just that, and logs the fact that there are no Designates.\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1061781 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/7427f720266df0b558757493f13873765c760494",
        "repo": "felix",
        "unit_tests": [
            "AutoConfResourceProcessorTest.java"
        ]
    },
    "felix_a99b3e8": {
        "bug_id": "felix_a99b3e8",
        "commit": "https://github.com/apache/felix/commit/a99b3e84c3944f1dee2864a06b07a1699442cfb1",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/felix/blob/a99b3e84c3944f1dee2864a06b07a1699442cfb1/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/ConfigInstaller.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/ConfigInstaller.java?ref=a99b3e84c3944f1dee2864a06b07a1699442cfb1",
                "deletions": 13,
                "filename": "fileinstall/src/main/java/org/apache/felix/fileinstall/internal/ConfigInstaller.java",
                "patch": "@@ -18,6 +18,18 @@\n  */\n package org.apache.felix.fileinstall.internal;\n \n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Dictionary;\n+import java.util.Enumeration;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Properties;\n+\n import org.apache.felix.cm.file.ConfigurationHandler;\n import org.apache.felix.fileinstall.ArtifactInstaller;\n import org.apache.felix.fileinstall.internal.Util.Logger;\n@@ -31,18 +43,6 @@\n import org.osgi.service.cm.ConfigurationEvent;\n import org.osgi.service.cm.ConfigurationListener;\n \n-import java.io.BufferedInputStream;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n-import java.util.Dictionary;\n-import java.util.Enumeration;\n-import java.util.Hashtable;\n-import java.util.Map;\n-import java.util.Properties;\n-\n /**\n  * ArtifactInstaller for configurations.\n  * TODO: This service lifecycle should be bound to the ConfigurationAdmin service lifecycle.\n@@ -212,7 +212,8 @@ else if ( f.getName().endsWith( \".config\" ) )\n         String pid[] = parsePid(f.getName());\n         Configuration config = getConfiguration(f.getAbsolutePath(), pid[0], pid[1]);\n \n-        Hashtable old = new Hashtable(new DictionaryAsMap(config.getProperties()));\n+        Dictionary props = config.getProperties();\n+        Hashtable old = props != null ? new Hashtable(new DictionaryAsMap(props)) : new Hashtable();\n         old.remove( DirectoryWatcher.FILENAME );\n         old.remove( Constants.SERVICE_PID );\n         old.remove( ConfigurationAdmin.SERVICE_FACTORYPID );",
                "raw_url": "https://github.com/apache/felix/raw/a99b3e84c3944f1dee2864a06b07a1699442cfb1/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/ConfigInstaller.java",
                "sha": "4e2114cc07c814faa6a6cafc56b6edbe6798217a",
                "status": "modified"
            }
        ],
        "message": "[FELIX-2756] NPE when loading configurations\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1054550 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/e5ebb4f48dd278df9dbe03f8914fee4dfb77394f",
        "repo": "felix",
        "unit_tests": [
            "ConfigInstallerTest.java"
        ]
    },
    "felix_b0b2bf4": {
        "bug_id": "felix_b0b2bf4",
        "commit": "https://github.com/apache/felix/commit/b0b2bf4f78721ea9e9dfbd0d4740b01c599243b2",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/felix/blob/b0b2bf4f78721ea9e9dfbd0d4740b01c599243b2/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/BundleTransformer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/BundleTransformer.java?ref=b0b2bf4f78721ea9e9dfbd0d4740b01c599243b2",
                "deletions": 1,
                "filename": "fileinstall/src/main/java/org/apache/felix/fileinstall/internal/BundleTransformer.java",
                "patch": "@@ -49,7 +49,7 @@ public boolean canHandle(File artifact)\n             }\n             jar = new JarFile(artifact);\n             Manifest m = jar.getManifest();\n-            if (m.getMainAttributes().getValue(new Attributes.Name(\"Bundle-SymbolicName\")) != null)\n+            if (m != null && m.getMainAttributes().getValue(new Attributes.Name(\"Bundle-SymbolicName\")) != null)\n             {\n                 return true;\n             }",
                "raw_url": "https://github.com/apache/felix/raw/b0b2bf4f78721ea9e9dfbd0d4740b01c599243b2/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/BundleTransformer.java",
                "sha": "f269dea787ab88b06091d3ffe7368412d994c3f0",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/felix/blob/b0b2bf4f78721ea9e9dfbd0d4740b01c599243b2/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/DirectoryWatcher.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/DirectoryWatcher.java?ref=b0b2bf4f78721ea9e9dfbd0d4740b01c599243b2",
                "deletions": 0,
                "filename": "fileinstall/src/main/java/org/apache/felix/fileinstall/internal/DirectoryWatcher.java",
                "patch": "@@ -921,6 +921,11 @@ private Bundle installOrUpdateBundle(\n         is.mark(256 * 1024);\n         JarInputStream jar = new JarInputStream(is);\n         Manifest m = jar.getManifest();\n+        if( m == null ) {\n+            throw new BundleException(\n+                \"The bundle \" + bundleLocation + \" does not have a META-INF/MANIFEST.MF! \"+\n+                    \"Make sure, META-INF and MANIFEST.MF are the first 2 entries in your JAR!\");\n+        }\n         String sn = m.getMainAttributes().getValue(Constants.BUNDLE_SYMBOLICNAME);\n         String vStr = m.getMainAttributes().getValue(Constants.BUNDLE_VERSION);\n         Version v = vStr == null ? Version.emptyVersion : Version.parseVersion(vStr);",
                "raw_url": "https://github.com/apache/felix/raw/b0b2bf4f78721ea9e9dfbd0d4740b01c599243b2/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/DirectoryWatcher.java",
                "sha": "a7e3620e02510f00e3030cd61149225b857cf4c7",
                "status": "modified"
            }
        ],
        "message": "[FELIX-2318] Possible NPE for jars with null Manifest\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1027387 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/0465e29241a14580e6d10ae66d9e9a375a5bf315",
        "repo": "felix",
        "unit_tests": [
            "DirectoryWatcherTest.java"
        ]
    },
    "felix_b2969a2": {
        "bug_id": "felix_b2969a2",
        "commit": "https://github.com/apache/felix/commit/b2969a2765c1770712efe6842c6eb1d55ee5f894",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/felix/blob/b2969a2765c1770712efe6842c6eb1d55ee5f894/fileinstall/src/main/java/org/apache/felix/fileinstall/DirectoryWatcher.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/fileinstall/src/main/java/org/apache/felix/fileinstall/DirectoryWatcher.java?ref=b2969a2765c1770712efe6842c6eb1d55ee5f894",
                "deletions": 0,
                "filename": "fileinstall/src/main/java/org/apache/felix/fileinstall/DirectoryWatcher.java",
                "patch": "@@ -142,6 +142,15 @@ public void run()\n             try\n             {\n                 Set/*<File>*/ files = scanner.scan();\n+                // Check that there is a result.  If not, this means that the directory can not be listed,\n+                // so it's presumably not a valid directory (it may have been deleted by someone).\n+                // In such case, just sleep\n+                if (files == null)\n+                {\n+                    Thread.sleep(poll);\n+                    continue;\n+                }\n+\n                 List/*<ArtifactListener>*/ listeners = FileInstall.getListeners();\n                 List/*<Artifact>*/ deleted = new ArrayList/*<Artifact>*/();\n                 List/*<Artifact>*/ modified = new ArrayList/*<Artifact>*/();",
                "raw_url": "https://github.com/apache/felix/raw/b2969a2765c1770712efe6842c6eb1d55ee5f894/fileinstall/src/main/java/org/apache/felix/fileinstall/DirectoryWatcher.java",
                "sha": "168ad79103d98675219eeda066d99d7416abd705",
                "status": "modified"
            }
        ],
        "message": "Fix possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@810483 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/80c00cb295148c9d088563af9f6291e1fb3bd87f",
        "repo": "felix",
        "unit_tests": [
            "DirectoryWatcherTest.java"
        ]
    },
    "felix_ce6a80c": {
        "bug_id": "felix_ce6a80c",
        "commit": "https://github.com/apache/felix/commit/ce6a80c41ce2473de68074618a86faaf10b7fc0c",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/felix/blob/ce6a80c41ce2473de68074618a86faaf10b7fc0c/scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java?ref=ce6a80c41ce2473de68074618a86faaf10b7fc0c",
                "deletions": 0,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java",
                "patch": "@@ -192,6 +192,9 @@ private ComponentConfigurationDTO managerToConfiguration(ComponentManager<?> man\n \n \tprivate ServiceReferenceDTO serviceReferenceToDTO( ServiceReference<?> serviceRef)\n \t{\n+\t    if (serviceRef == null)\n+\t        return null;\n+\n \t\tServiceReferenceDTO dto = new ServiceReferenceDTO();\n \t\tdto.bundle = serviceRef.getBundle().getBundleId();\n \t\tdto.id = (Long) serviceRef.getProperty(Constants.SERVICE_ID);",
                "raw_url": "https://github.com/apache/felix/raw/ce6a80c41ce2473de68074618a86faaf10b7fc0c/scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java",
                "sha": "eb43a329bec874308b46350dcb6bddbf5edf36a0",
                "status": "modified"
            }
        ],
        "message": "FELIX-4883 Fix NPE when creating ServiceReferenceDTO\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1681073 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/4215fe371e0e2902cc3952b4d55619f9905c8e9b",
        "repo": "felix",
        "unit_tests": [
            "ServiceComponentRuntimeImplTest.java"
        ]
    },
    "felix_d629298": {
        "bug_id": "felix_d629298",
        "commit": "https://github.com/apache/felix/commit/d629298fc4639897d40306a854b7d020695f28bc",
        "file": [
            {
                "additions": 95,
                "blob_url": "https://github.com/apache/felix/blob/d629298fc4639897d40306a854b7d020695f28bc/framework/src/main/java/org/apache/felix/framework/ServiceRegistry.java",
                "changes": 179,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/framework/src/main/java/org/apache/felix/framework/ServiceRegistry.java?ref=d629298fc4639897d40306a854b7d020695f28bc",
                "deletions": 84,
                "filename": "framework/src/main/java/org/apache/felix/framework/ServiceRegistry.java",
                "patch": "@@ -1,4 +1,4 @@\n-/* \n+/*\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n  * distributed with this work for additional information\n@@ -197,51 +197,51 @@ else if (className != null)\n \n     public synchronized Object getService(Bundle bundle, ServiceReference ref)\n     {\n-        // Get usage counts for specified bundle.\n-        UsageCount[] usages = (UsageCount[]) m_inUseMap.get(bundle);\n+        // Variable for service object.\n+        Object svcObj = null;\n+\n+        // Get the service registration.\n+        ServiceRegistrationImpl reg = ((ServiceReferenceImpl) ref).getServiceRegistration();\n \n         // Make sure the service registration is still valid.\n-        if (!((ServiceReferenceImpl) ref).getServiceRegistration().isValid())\n+        if (!reg.isValid())\n         {\n             // If the service registration is not valid, then this means\n             // that the service provider unregistered the service. The spec\n             // says that calls to get an unregistered service should always\n             // return null (assumption: even if it is currently cached\n             // by the bundle). So in this case, flush the service reference\n             // from the cache and return null.\n-            m_inUseMap.put(bundle, removeUsageCount(usages, ref));\n+            flushUsageCount(bundle, ref);\n \n             // It is not necessary to unget the service object from\n             // the providing bundle, since the associated service is\n             // unregistered and hence not in the list of registered services\n             // of the providing bundle. This is precisely why the service\n             // registration was not found above in the first place.\n-            return null;\n-        }\n-\n-        // Get the service registration.\n-        ServiceRegistrationImpl reg = ((ServiceReferenceImpl) ref).getServiceRegistration();\n-\n-        // Get the usage count, if any.\n-        UsageCount usage = getUsageCount(usages, ref);\n-       \n-        // If the service object is cached, then increase the usage\n-        // count and return the cached service object.\n-        Object svcObj = null;\n-        if (usage != null)\n-        {\n-            usage.m_count++;\n-            svcObj = usage.m_svcObj;\n         }\n         else\n         {\n-            // Get service object from service registration.\n-            svcObj = reg.getService(bundle);\n+            // Get the usage count, if any.\n+            UsageCount usage = getUsageCount(bundle, ref);\n \n-            // Cache the service object.\n-            if (svcObj != null)\n+            // If the service object is cached, then increase the usage\n+            // count and return the cached service object.\n+            if (usage != null)\n+            {\n+                usage.m_count++;\n+                svcObj = usage.m_svcObj;\n+            }\n+            else\n             {\n-                m_inUseMap.put(bundle, addUsageCount(usages, ref, svcObj));\n+                // Get service object from service registration.\n+                svcObj = reg.getService(bundle);\n+\n+                // Cache the service object.\n+                if (svcObj != null)\n+                {\n+                    addUsageCount(bundle, ref, svcObj);\n+                }\n             }\n         }\n \n@@ -250,57 +250,49 @@ public synchronized Object getService(Bundle bundle, ServiceReference ref)\n \n     public synchronized boolean ungetService(Bundle bundle, ServiceReference ref)\n     {\n+        // Result of unget.\n+        boolean result = false;\n+\n         // Get usage count.\n-        UsageCount[] usages = (UsageCount[]) m_inUseMap.get(bundle);\n-        UsageCount usage = getUsageCount(usages, ref);\n+        UsageCount usage = getUsageCount(bundle, ref);\n \n         // If no usage count, then return.\n-        if (usage == null)\n-        {\n-            return false;\n-        }\n-\n-        // Make sure the service registration is still valid.\n-        if (!((ServiceReferenceImpl) ref).getServiceRegistration().isValid())\n-        {\n-            // If the service registration is not valid, then this means\n-            // that the service provider unregistered the service. The spec\n-            // says that calls to get an unregistered service should always\n-            // return null (assumption: even if it is currently cached\n-            // by the bundle). So in this case, flush the service reference\n-            // from the cache and return null.\n-            m_inUseMap.put(bundle, removeUsageCount(usages, ref));\n-            return false;\n-        }\n-\n-        // Decrement usage count.\n-        usage.m_count--;\n-\n-        // Remove reference when usage count goes to zero\n-        // and unget the service object from the exporting\n-        // bundle.\n-        if (usage.m_count == 0)\n+        if (usage != null)\n         {\n-            // Remove reference from usages array.\n-            usages = removeUsageCount(usages, ref);\n-            // If there are no more usages in the array, then remove\n-            // the bundle from the inUseMap to allow for garbage collection.\n-            if (usages.length == 0)\n+            // Make sure the service registration is still valid.\n+            if (!((ServiceReferenceImpl) ref).getServiceRegistration().isValid())\n             {\n-                m_inUseMap.remove(bundle);\n+                // If the service registration is not valid, then this means\n+                // that the service provider unregistered the service. The spec\n+                // says that calls to get an unregistered service should always\n+                // return null (assumption: even if it is currently cached\n+                // by the bundle). So in this case, flush the service reference\n+                // from the cache and return null.\n+                flushUsageCount(bundle, ref);\n             }\n             else\n             {\n-                m_inUseMap.put(bundle, usages);\n+                // Decrement usage count.\n+                usage.m_count--;\n+\n+                // Remove reference when usage count goes to zero\n+                // and unget the service object from the exporting\n+                // bundle.\n+                if (usage.m_count == 0)\n+                {\n+                    // Remove reference from usages array.\n+                    flushUsageCount(bundle, ref);\n+                    ((ServiceReferenceImpl) ref)\n+                        .getServiceRegistration().ungetService(bundle, usage.m_svcObj);\n+                    usage.m_svcObj = null;\n+                }\n+\n+                // Return true if the usage count is greater than zero.\n+                result = (usage.m_count > 0);\n             }\n-            ServiceRegistrationImpl reg =\n-                ((ServiceReferenceImpl) ref).getServiceRegistration();\n-            reg.ungetService(bundle, usage.m_svcObj);\n-            usage.m_svcObj = null;\n         }\n \n-        // Return true if the usage count is greater than zero.\n-        return (usage.m_count > 0);\n+        return result;\n     }\n \n \n@@ -411,7 +403,7 @@ public Logger getLogger()\n                     regs = newRegs;\n                 }\n             }\n-        }      \n+        }\n         return regs;\n     }\n \n@@ -440,18 +432,18 @@ protected void fireServiceChanged(ServiceEvent event)\n     {\n         protected ServiceListener m_a = null, m_b = null;\n \n-        protected ServiceListenerMulticaster(ServiceListener a, ServiceListener b)    \n-        {        \n-            m_a = a;        \n-            m_b = b;    \n-        }    \n-    \n-        public void serviceChanged(ServiceEvent e)    \n+        protected ServiceListenerMulticaster(ServiceListener a, ServiceListener b)\n+        {\n+            m_a = a;\n+            m_b = b;\n+        }\n+\n+        public void serviceChanged(ServiceEvent e)\n         {\n             m_a.serviceChanged(e);\n             m_b.serviceChanged(e);\n         }\n-    \n+\n         public static ServiceListener add(ServiceListener a, ServiceListener b)\n         {\n             if (a == null)\n@@ -467,7 +459,7 @@ else if (b == null)\n                 return new ServiceListenerMulticaster(a, b);\n             }\n         }\n-    \n+\n         public static ServiceListener remove(ServiceListener a, ServiceListener b)\n         {\n             if ((a == null) || (a == b))\n@@ -487,8 +479,9 @@ else if (a instanceof ServiceListenerMulticaster)\n         }\n     }\n \n-    private static UsageCount getUsageCount(UsageCount[] usages, ServiceReference ref)\n+    private UsageCount getUsageCount(Bundle bundle, ServiceReference ref)\n     {\n+        UsageCount[] usages = (UsageCount[]) m_inUseMap.get(bundle);\n         for (int i = 0; (usages != null) && (i < usages.length); i++)\n         {\n             if (usages[i].m_ref.equals(ref))\n@@ -499,8 +492,17 @@ private static UsageCount getUsageCount(UsageCount[] usages, ServiceReference re\n         return null;\n     }\n \n-    private static UsageCount[] addUsageCount(UsageCount[] usages, ServiceReference ref, Object svcObj)\n+    /**\n+     * Utility method to update the specified bundle's usage count array to\n+     * include the specified service.\n+     * @param bundle The bundle acquiring the service.\n+     * @param ref The service reference of the acquired service.\n+     * @param svcObj The service object of the acquired service.\n+     */\n+    private void addUsageCount(Bundle bundle, ServiceReference ref, Object svcObj)\n     {\n+        UsageCount[] usages = (UsageCount[]) m_inUseMap.get(bundle);\n+\n         UsageCount usage = new UsageCount();\n         usage.m_ref = ref;\n         usage.m_svcObj = svcObj;\n@@ -517,24 +519,26 @@ private static UsageCount getUsageCount(UsageCount[] usages, ServiceReference re\n             newUsages[usages.length] = usage;\n             usages = newUsages;\n         }\n-        return usages;\n+\n+        m_inUseMap.put(bundle, usages);\n     }\n \n-    private static UsageCount[] removeUsageCount(UsageCount[] usages, ServiceReference ref)\n+    private void flushUsageCount(Bundle bundle, ServiceReference ref)\n     {\n+        UsageCount[] usages = (UsageCount[]) m_inUseMap.get(bundle);\n         for (int i = 0; (usages != null) && (i < usages.length); i++)\n         {\n             if (usages[i].m_ref.equals(ref))\n             {\n                 // If this is the only usage, then point to empty list.\n                 if ((usages.length - 1) == 0)\n                 {\n-                    usages = new UsageCount[0];\n+                    usages = null;\n                 }\n                 // Otherwise, we need to do some array copying.\n                 else\n                 {\n-                    UsageCount[] newUsages= new UsageCount[usages.length - 1];\n+                    UsageCount[] newUsages = new UsageCount[usages.length - 1];\n                     System.arraycopy(usages, 0, newUsages, 0, i);\n                     if (i < newUsages.length)\n                     {\n@@ -545,8 +549,15 @@ private static UsageCount getUsageCount(UsageCount[] usages, ServiceReference re\n                 }\n             }\n         }\n-        \n-        return usages;\n+\n+        if (usages != null)\n+        {\n+            m_inUseMap.put(bundle, usages);\n+        }\n+        else\n+        {\n+            m_inUseMap.remove(bundle);\n+        }\n     }\n \n     private static class UsageCount",
                "raw_url": "https://github.com/apache/felix/raw/d629298fc4639897d40306a854b7d020695f28bc/framework/src/main/java/org/apache/felix/framework/ServiceRegistry.java",
                "sha": "7dbd94ea94026ec9bd8cc24ac1f2b3efec939615",
                "status": "modified"
            }
        ],
        "message": "Reorganized usage count methods to better handle null reference checking\nin response to Karl Pauls seeing an NPE when trying to get a service that\nwas already unregistered while shutting down the framework.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@593337 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/56f32318f7047c6c90ce742600f8109ebebc4801",
        "repo": "felix",
        "unit_tests": [
            "ServiceRegistryTest.java"
        ]
    },
    "felix_da7768d": {
        "bug_id": "felix_da7768d",
        "commit": "https://github.com/apache/felix/commit/da7768dedabb7ad671a446ed3fa72f16c4de50e1",
        "file": [
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/felix/blob/da7768dedabb7ad671a446ed3fa72f16c4de50e1/framework/src/main/java/org/apache/felix/framework/ExtensionManager.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/framework/src/main/java/org/apache/felix/framework/ExtensionManager.java?ref=da7768dedabb7ad671a446ed3fa72f16c4de50e1",
                "deletions": 2,
                "filename": "framework/src/main/java/org/apache/felix/framework/ExtensionManager.java",
                "patch": "@@ -33,6 +33,7 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.NoSuchElementException;\n import java.util.Set;\n \n import org.apache.felix.framework.util.FelixConstants;\n@@ -78,7 +79,7 @@\n // with the parent classloader and one instance per framework instance that\n // keeps track of extension bundles and systembundle exports for that framework\n // instance.\n-class ExtensionManager extends URLStreamHandler implements IModuleDefinition, IContentLoader\n+class ExtensionManager extends URLStreamHandler implements IModuleDefinition, IContentLoader, IContent\n {\n     // The private instance that is added to Felix.class.getClassLoader() -\n     // will be null if extension bundles are not supported (i.e., we are not \n@@ -414,7 +415,7 @@ public void close()\n \n     public IContent getContent()\n     {\n-        return null;\n+        return this;\n     }\n \n     public ISearchPolicy getSearchPolicy()\n@@ -573,4 +574,34 @@ private void _add(String name, Bundle extension)\n             m_extensions.add(extension);\n         }\n     }\n+\n+    public Enumeration getEntries() \n+    {\n+        return new Enumeration()\n+        {\n+            public boolean hasMoreElements() \n+            {\n+                return false;\n+            }\n+\n+            public Object nextElement() throws NoSuchElementException \n+            {\n+                throw new NoSuchElementException();\n+            }\n+        };\n+    }\n+\n+    public byte[] getEntry(String name) \n+    {\n+        return null;\n+    }\n+\n+    public InputStream getEntryAsStream(String name) throws IOException \n+    {\n+        return null;\n+    }\n+\n+    public boolean hasEntry(String name) {\n+        return false;\n+    }\n }",
                "raw_url": "https://github.com/apache/felix/raw/da7768dedabb7ad671a446ed3fa72f16c4de50e1/framework/src/main/java/org/apache/felix/framework/ExtensionManager.java",
                "sha": "709f2ae5fabe35a8761b6dbdb8d0e4cb82278f19",
                "status": "modified"
            }
        ],
        "message": "Fix a NPE when getEntryPaths is called on the system bundle (FELIX-394).\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@587183 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/d8507981f406c30750b5e06fa555defbe0f360f2",
        "repo": "felix",
        "unit_tests": [
            "ExtensionManagerTest.java"
        ]
    },
    "felix_da892ce": {
        "bug_id": "felix_da892ce",
        "commit": "https://github.com/apache/felix/commit/da892ce1ad54867ca41df2ee11e1ec95740b4add",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/felix/blob/da892ce1ad54867ca41df2ee11e1ec95740b4add/scr/src/main/java/org/apache/felix/scr/impl/BundleComponentActivator.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/BundleComponentActivator.java?ref=da892ce1ad54867ca41df2ee11e1ec95740b4add",
                "deletions": 2,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/BundleComponentActivator.java",
                "patch": "@@ -556,8 +556,11 @@ void dispose(int reason)\n                 }\n \n             }\n-            configAdminTracker.dispose();\n-\n+            if (configAdminTracker != null)\n+            {\n+            \tconfigAdminTracker.dispose();\n+            }\n+            \n             log(LogService.LOG_DEBUG, \"BundleComponentActivator : Bundle [{0}] STOPPED\",\n                 new Object[] { m_bundle.getBundleId() }, null, null, null);\n ",
                "raw_url": "https://github.com/apache/felix/raw/da892ce1ad54867ca41df2ee11e1ec95740b4add/scr/src/main/java/org/apache/felix/scr/impl/BundleComponentActivator.java",
                "sha": "7ec8bad458659589dd60a40f4920b509f432b123",
                "status": "modified"
            }
        ],
        "message": "FELIX-5079 fix NPE introduced in 1717854\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1719115 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/5ba10eb544b7430674156d38334b8aa588954a40",
        "repo": "felix",
        "unit_tests": [
            "BundleComponentActivatorTest.java"
        ]
    },
    "felix_e1f2842": {
        "bug_id": "felix_e1f2842",
        "commit": "https://github.com/apache/felix/commit/e1f2842590e35f6487b27542d4fe17f4b4741c0e",
        "file": [
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/felix/blob/e1f2842590e35f6487b27542d4fe17f4b4741c0e/scrplugin/generator/src/main/java/org/apache/felix/scrplugin/SCRDescriptorGenerator.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scrplugin/generator/src/main/java/org/apache/felix/scrplugin/SCRDescriptorGenerator.java?ref=e1f2842590e35f6487b27542d4fe17f4b4741c0e",
                "deletions": 15,
                "filename": "scrplugin/generator/src/main/java/org/apache/felix/scrplugin/SCRDescriptorGenerator.java",
                "patch": "@@ -232,6 +232,11 @@ public Result execute() throws SCRDescriptorException, SCRDescriptorFailureExcep\n \n     private void generateMethods(final ComponentContainer container) throws SCRDescriptorException {\n         for (final ReferenceDescription ref : container.getReferences().values()) {\n+            // skip refs without a interface name (validate will be called next)\n+            if (StringUtils.isEmpty(ref.getInterfaceName())) {\n+                continue;\n+            }\n+\n             // if this is a field with a single cardinality,\n             // we look for the bind/unbind methods\n             // and create them if they are not availabe\n@@ -642,24 +647,26 @@ private void processReferences(final ClassDescription current,\n \n             this.testReference(current, component.getReferences(), rd, component.getClassDescription() == current);\n \n-            // check for method signature\n-            try {\n-                final Validator.MethodResult bindMethod = Validator.findMethod(this.project, this.options, current, rd,\n-                        rd.getBind() == null ? \"bind\" : rd.getBind());\n-                if ( bindMethod != null ) {\n-                    component.getComponentDescription().setSpecVersion(bindMethod.requiredSpecVersion);\n-                }\n+            // check for method signature - if interface name is set (empty interface name will fail during validate)\n+            if (!StringUtils.isEmpty(rd.getInterfaceName())) {\n \n-                final Validator.MethodResult unbindMethod = Validator.findMethod(this.project, this.options, current, rd,\n-                        rd.getUnbind() == null ? \"unbind\" : rd.getUnbind());\n-                if ( unbindMethod != null ) {\n-                    component.getComponentDescription().setSpecVersion(unbindMethod.requiredSpecVersion);\n-                }\n+                try {\n+                    final Validator.MethodResult bindMethod = Validator.findMethod(this.project, this.options, current, rd,\n+                            rd.getBind() == null ? \"bind\" : rd.getBind());\n+                    if ( bindMethod != null ) {\n+                        component.getComponentDescription().setSpecVersion(bindMethod.requiredSpecVersion);\n+                    }\n \n-            } catch (final SCRDescriptorException sde) {\n-                // this happens only if a class not found exception occurs, so we can ignore this at this point!\n-            }\n+                    final Validator.MethodResult unbindMethod = Validator.findMethod(this.project, this.options, current, rd,\n+                            rd.getUnbind() == null ? \"unbind\" : rd.getUnbind());\n+                    if ( unbindMethod != null ) {\n+                        component.getComponentDescription().setSpecVersion(unbindMethod.requiredSpecVersion);\n+                    }\n \n+                } catch (final SCRDescriptorException sde) {\n+                    // this happens only if a class not found exception occurs, so we can ignore this at this point!\n+                }\n+            }\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/felix/raw/e1f2842590e35f6487b27542d4fe17f4b4741c0e/scrplugin/generator/src/main/java/org/apache/felix/scrplugin/SCRDescriptorGenerator.java",
                "sha": "487f217c768a84d55620e2617e452947c3c784d7",
                "status": "modified"
            }
        ],
        "message": "FELIX-4192 : SCR Generator fails with a NPE in case a class level Reference doesn't define a referenceInterface\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1512947 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/31c7c9b5ee07de85bf554f2086113c7e1d63f55e",
        "repo": "felix",
        "unit_tests": [
            "SCRDescriptorGeneratorTest.java"
        ]
    },
    "felix_f1370a9": {
        "bug_id": "felix_f1370a9",
        "commit": "https://github.com/apache/felix/commit/f1370a9005c2af59c14f8131e772244fa03ec426",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/felix/blob/f1370a9005c2af59c14f8131e772244fa03ec426/osgi-r7/configurator/src/main/java/org/apache/felix/configurator/impl/Configurator.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/osgi-r7/configurator/src/main/java/org/apache/felix/configurator/impl/Configurator.java?ref=f1370a9005c2af59c14f8131e772244fa03ec426",
                "deletions": 1,
                "filename": "osgi-r7/configurator/src/main/java/org/apache/felix/configurator/impl/Configurator.java",
                "patch": "@@ -35,6 +35,7 @@\n \n import org.apache.felix.configurator.impl.json.BinUtil;\n import org.apache.felix.configurator.impl.json.JSONUtil;\n+import org.apache.felix.configurator.impl.json.TypeConverter;\n import org.apache.felix.configurator.impl.logger.SystemLogger;\n import org.apache.felix.configurator.impl.model.BundleState;\n import org.apache.felix.configurator.impl.model.Config;\n@@ -253,10 +254,11 @@ public void start() {\n                 if ( state.getInitialHashes() != null ) {\n                     processRemoveBundle(-1);\n                 }\n+                final TypeConverter converter = new TypeConverter(null);\n                 final JSONUtil.Report report = new JSONUtil.Report();\n                 final List<ConfigurationFile> allFiles = new ArrayList<>();\n                 for(final Map.Entry<String, String> entry : files.entrySet()) {\n-                    final ConfigurationFile file = org.apache.felix.configurator.impl.json.JSONUtil.readJSON(null, entry.getKey(), null, -1, entry.getValue(), report);\n+                    final ConfigurationFile file = org.apache.felix.configurator.impl.json.JSONUtil.readJSON(converter, entry.getKey(), null, -1, entry.getValue(), report);\n                     if ( file != null ) {\n                         allFiles.add(file);\n                     }",
                "raw_url": "https://github.com/apache/felix/raw/f1370a9005c2af59c14f8131e772244fa03ec426/osgi-r7/configurator/src/main/java/org/apache/felix/configurator/impl/Configurator.java",
                "sha": "c7bdc5afb97f33791b4c1cfe2ee48109ef47e6d5",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/felix/blob/f1370a9005c2af59c14f8131e772244fa03ec426/osgi-r7/configurator/src/main/java/org/apache/felix/configurator/impl/json/JSONUtil.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/osgi-r7/configurator/src/main/java/org/apache/felix/configurator/impl/json/JSONUtil.java?ref=f1370a9005c2af59c14f8131e772244fa03ec426",
                "deletions": 1,
                "filename": "osgi-r7/configurator/src/main/java/org/apache/felix/configurator/impl/json/JSONUtil.java",
                "patch": "@@ -190,7 +190,9 @@ public static ConfigurationFile readJSON(\n         final List<Config> configurations = new ArrayList<>();\n         for(final Map.Entry<String, ?> entry : configs.entrySet()) {\n             if ( ! (entry.getValue() instanceof Map) ) {\n-                report.errors.add(\"Ignoring configuration in '\" + identifier + \"' (not a configuration) : \" + entry.getKey());\n+            \t    if ( !entry.getKey().startsWith(INTERNAL_PREFIX) ) {\n+            \t    \t    report.errors.add(\"Ignoring configuration in '\" + identifier + \"' (not a configuration) : \" + entry.getKey());\n+            \t    }\n             } else {\n                 @SuppressWarnings(\"unchecked\")\n                 final Map<String, ?> mainMap = (Map<String, ?>)entry.getValue();",
                "raw_url": "https://github.com/apache/felix/raw/f1370a9005c2af59c14f8131e772244fa03ec426/osgi-r7/configurator/src/main/java/org/apache/felix/configurator/impl/json/JSONUtil.java",
                "sha": "f765bea5e0aeb1fe1c3ea417a6761e89bf926994",
                "status": "modified"
            }
        ],
        "message": "Fix NPE for initial configurations and ignore internal properties\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1821609 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/e7cc642a22ad498e336e654951cac2d67e28b493",
        "repo": "felix",
        "unit_tests": [
            "JSONUtilTest.java"
        ]
    },
    "felix_f3a147e": {
        "bug_id": "felix_f3a147e",
        "commit": "https://github.com/apache/felix/commit/f3a147ec0f2af3430db259073b74d2a6fd48330d",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/felix/blob/f3a147ec0f2af3430db259073b74d2a6fd48330d/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/ConfigInstaller.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/ConfigInstaller.java?ref=f3a147ec0f2af3430db259073b74d2a6fd48330d",
                "deletions": 1,
                "filename": "fileinstall/src/main/java/org/apache/felix/fileinstall/internal/ConfigInstaller.java",
                "patch": "@@ -183,7 +183,7 @@ public void doConfigurationEvent(ConfigurationEvent configurationEvent)\n                         configurationEvent.getPid(),\n                         \"?\");\n                 Dictionary dict = config.getProperties();\n-                String fileName = (String) dict.get(DirectoryWatcher.FILENAME);\n+                String fileName = dict != null ? (String) dict.get(DirectoryWatcher.FILENAME) : null;\n                 File file = fileName != null ? fromConfigKey(fileName) : null;\n                 if (file != null && file.isFile()) {\n                     if (!file.delete()) {",
                "raw_url": "https://github.com/apache/felix/raw/f3a147ec0f2af3430db259073b74d2a6fd48330d/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/ConfigInstaller.java",
                "sha": "1a4f12a4a24e72304f0a9d77550f2191d56d60a3",
                "status": "modified"
            }
        ],
        "message": "[FELIX-5686] NPE in ConfigInstaller on ConfigDelete\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1812602 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/9cc019ff39290732201c3a09b5dd125f8b689552",
        "repo": "felix",
        "unit_tests": [
            "ConfigInstallerTest.java"
        ]
    },
    "felix_f781122": {
        "bug_id": "felix_f781122",
        "commit": "https://github.com/apache/felix/commit/f7811225907d199c0c955314a148615673bc387b",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/felix/blob/f7811225907d199c0c955314a148615673bc387b/scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java?ref=f7811225907d199c0c955314a148615673bc387b",
                "deletions": 4,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java",
                "patch": "@@ -2,6 +2,7 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n \n@@ -56,14 +57,24 @@ public ServiceComponentRuntimeImpl(BundleContext context,\n \t\treturn result;\n \t}\n \n-\tpublic ComponentDescriptionDTO getComponentDescriptionDTO(Bundle bundle,\n-\t\t\tString name) {\n+\tpublic ComponentDescriptionDTO getComponentDescriptionDTO(Bundle bundle, String name) {\n \t\tComponentHolder<?> holder = componentRegistry.getComponentHolder(bundle, name);\n-\t\treturn holderToDescription(holder);\n+\t\tif ( holder != null )\n+\t\t{\n+\t\t\treturn holderToDescription(holder);\n+\t\t}\n+\t\telse \n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n \t}\n \n \tpublic Collection<ComponentConfigurationDTO> getComponentConfigurationDTOs(\n \t\t\tComponentDescriptionDTO description) {\n+\t\tif ( description == null)\n+\t\t{\n+\t\t\treturn Collections.emptyList();\n+\t\t}\n \t\tComponentHolder<?> holder = getHolderFromDescription( description);\n \t\t//Get a fully filled out valid description DTO\n \t\tdescription = holderToDescription(holder);\n@@ -130,7 +141,7 @@ private ServiceReferenceDTO serviceReferenceToDTO(\n \t\treturn dto;\n \t}\n \n-\tprivate ComponentHolder getHolderFromDescription(\n+\tprivate ComponentHolder<?> getHolderFromDescription(\n \t\t\tComponentDescriptionDTO description) {\n \t\tif (description.bundle == null)\n \t\t{",
                "raw_url": "https://github.com/apache/felix/raw/f7811225907d199c0c955314a148615673bc387b/scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java",
                "sha": "62c2b866aa60b110603e3fd3909f38e14b532ef1",
                "status": "modified"
            }
        ],
        "message": "FELIX-4401 avoid NPE fetching a nonexistant DTO\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1602638 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/9a3fd76339d0ad42212999f99675e6a106c81c9a",
        "repo": "felix",
        "unit_tests": [
            "ServiceComponentRuntimeImplTest.java"
        ]
    },
    "felix_f79068a": {
        "bug_id": "felix_f79068a",
        "commit": "https://github.com/apache/felix/commit/f79068aa767a8ba449b18de3965de601ed42a75f",
        "file": [
            {
                "additions": 106,
                "blob_url": "https://github.com/apache/felix/blob/f79068aa767a8ba449b18de3965de601ed42a75f/ipojo/manipulator/src/main/java/org/apache/felix/ipojo/manipulator/Pojoization.java",
                "changes": 178,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/ipojo/manipulator/src/main/java/org/apache/felix/ipojo/manipulator/Pojoization.java?ref=f79068aa767a8ba449b18de3965de601ed42a75f",
                "deletions": 72,
                "filename": "ipojo/manipulator/src/main/java/org/apache/felix/ipojo/manipulator/Pojoization.java",
                "patch": "@@ -315,7 +315,11 @@ private void computeAnnotations(byte[] inC) {\n                 String name = m_metadata[m_metadata.length - 1].getAttribute(\"classname\");\n                 name = name.replace('.', '/');\n                 name += \".class\";\n-                m_components.add(new ComponentInfo(name, m_metadata[m_metadata.length - 1]));\n+\n+                // Creates the ComponentInfo and store bytecode\n+                ComponentInfo info = new ComponentInfo(name, m_metadata[m_metadata.length - 1]);\n+                info.m_bytecode = inC;\n+                m_components.add(info);\n             }\n         }\n     }\n@@ -348,11 +352,13 @@ private void manipulateJarFile(File out) {\n             Enumeration entries = m_inputJar.entries();\n             while (entries.hasMoreElements()) {\n                 JarEntry curEntry = (JarEntry) entries.nextElement();\n-                // Check if we need to manipulate the class\n+\n+                // If the class was manipulated, write out the manipulated\n+                // version of the bytecode\n                 if (m_classes.containsKey(curEntry.getName())) {\n                     JarEntry je = new JarEntry(curEntry.getName());\n                     byte[] outClazz = (byte[]) m_classes.get(curEntry.getName());\n-                    if (outClazz.length != 0) {\n+                    if (outClazz != null && outClazz.length != 0) {\n                         jos.putNextEntry(je); // copy the entry header to jos\n                         jos.write(outClazz);\n                         jos.closeEntry();\n@@ -452,76 +458,104 @@ private void manipulateDirectory() {\n         }\n \n     }\n-    \n-    /**\n-     * Reads the entry to extract the byte array.\n-     * This method should be called only if the class has to be read.\n-     * The cost of this method is not negligible.\n-     * @param name name of the entry to read from the input jar\n-     * @return the read byte array\n-     * @throws IOException occurs when the entry cannot be read\n-     */\n-    private byte[] readEntry(String name) throws IOException {\n-        InputStream currIn = getInputStream(name);\n-        byte[] in = new byte[0];\n-        int c;\n-        while ((c = currIn.read()) >= 0) {\n-            byte[] in2 = new byte[in.length + 1];\n-            System.arraycopy(in, 0, in2, 0, in.length);\n-            in2[in.length] = (byte) c;\n-            in = in2;\n-        }\n-        currIn.close();\n-        return in;\n-    }\n \n     /**\n      * Manipulate classes of the input Jar.\n      */\n     private void manipulateComponents() {\n-        Enumeration entries = getClassFiles();\n \n-        while (entries.hasMoreElements()) {\n-            String curName = (String) entries.nextElement();\n-            try {\n-                byte[] in = null; // Will store the bytes of the entry if required.\n-                if (!m_ignoreAnnotations) {\n-                    // If we need to process annotations, all classes has to be read.\n-                    in = readEntry(curName);\n-                    computeAnnotations(in); // This method adds the class to the\n-                                            // component list.\n+        // 1. Discover components described with annotations\n+        // Only do this if annotations are enabled\n+        if (!m_ignoreAnnotations) {\n+            Enumeration entries = getClassFiles();\n+\n+            while (entries.hasMoreElements()) {\n+                String curName = (String) entries.nextElement();\n+                try {\n+\n+                    // Need to load the bytecode for each .class entry\n+                    byte[] in = getBytecode(curName);\n+\n+                    // This method adds the class to the component list\n+                    // if that bytecode is annotated with @Component.\n+                    computeAnnotations(in);\n+                } catch (IOException e) {\n+                    error(\"Cannot read the class : \" + curName);\n+                    return;\n                 }\n-                // Check if we need to manipulate the class\n-                for (int i = 0; i < m_components.size(); i++) {\n-                    ComponentInfo ci = (ComponentInfo) m_components.get(i);\n-                    if (ci.m_classname.equals(curName)) {\n-                        // So, we have to manipulate the class, if not already read, read the input class\n-                        // Else reuse the same one.\n-                        if (in == null) {\n-                            in = readEntry(curName);\n-                        }\n-                        byte[] outClazz = manipulateComponent(in, ci);\n-                        m_classes.put(ci.m_classname, outClazz);\n-                        \n-                        // Manipulate inner classes ?\n-                        if (!ci.m_inners.isEmpty()) {\n-                            for (int k = 0; k < ci.m_inners.size(); k++) {\n-                                String innerCN = (String) ci.m_inners.get(k)\n-                                        + \".class\";\n-                                InputStream innerStream = getInputStream(innerCN);\n-                                // manipulateInnerClass(inputJar, inner,\n-                                // (String) ci.m_inners.get(k), ci);\n-                                manipulateInnerClass(innerStream, innerCN, ci);\n-                            }\n-                        }\n+            }\n+        }\n+\n+        // 2. Iterates over the list of discovered components\n+        // Note that this list includes components from metadata.xml AND from annotations\n+\n+        for (int i = 0; i < m_components.size(); i++) {\n+            ComponentInfo info = (ComponentInfo) m_components.get(i);\n+\n+            // Get the bytecode if necessary\n+            if (info.m_bytecode == null) {\n+                try {\n+                    info.m_bytecode = getBytecode(info.m_classname);\n+                } catch (IOException e) {\n+                    error(\"Cannot extract bytecode for component '\" + info.m_classname + \"'\");\n+                    return;\n+                }\n+            }\n+            // Manipulate the original bytecode and store the modified one\n+            byte[] outClazz = manipulateComponent(info.m_bytecode, info);\n+            m_classes.put(info.m_classname, outClazz);\n+\n+            // Are there any inner classes to be manipulated ?\n+            if (!info.m_inners.isEmpty()) {\n+                for (int k = 0; k < info.m_inners.size(); k++) {\n+                    String innerCN = (String) info.m_inners.get(k) + \".class\";\n+                    try {\n+                        // Get the bytecode and start manipulation\n+                        byte[] innerClassBytecode = getBytecode(innerCN);\n+                        manipulateInnerClass(innerClassBytecode, innerCN, info);\n+                    } catch (IOException e) {\n+                        error(\"Cannot manipulate inner class '\" + innerCN + \"'\");\n+                        return;\n                     }\n                 }\n-            } catch (IOException e) {\n-                error(\"Cannot read the class : \" + curName);\n-                return;\n             }\n+        }\n+    }\n+\n+    /**\n+     * Return a byte array that contains the bytecode of the given classname.\n+     * @param classname name of a class to be read\n+     * @return a byte array\n+     * @throws IOException if the classname cannot be read\n+     */\n+    private byte[] getBytecode(final String classname) throws IOException {\n \n+        InputStream currIn = null;\n+        byte[] in = new byte[0];\n+        try {\n+            // Get the stream to read\n+            currIn = getInputStream(classname);\n+            int c;\n+\n+            // Fill the byte array with IS content\n+            while ((c = currIn.read()) >= 0) {\n+                byte[] in2 = new byte[in.length + 1];\n+                System.arraycopy(in, 0, in2, 0, in.length);\n+                in2[in.length] = (byte) c;\n+                in = in2;\n+            }\n+        } finally {\n+            // Close the stream\n+            if (currIn != null) {\n+                try {\n+                    currIn.close();\n+                } catch (IOException e) {\n+                    // Ignored\n+                }\n+            }\n         }\n+\n+        return in;\n     }\n \n     /**\n@@ -533,6 +567,7 @@ private void manipulateComponents() {\n      */\n     private InputStream getInputStream(String classname) throws IOException {\n         if (m_inputJar != null) {\n+            // Fix entry name if needed\n             if (! classname.endsWith(\".class\")) {\n                 classname += \".class\";\n             }\n@@ -630,22 +665,15 @@ private String computeRelativePath(String absolutePath) {\n \n     /**\n      * Manipulates an inner class.\n-     * @param clazz input stream on the inner file to manipulate\n+     * @param in input bytecode of the inner file to manipulate\n      * @param cn the inner class name (ends with .class)\n      * @param ci component info of the component owning the inner class\n      * @throws IOException the inner class cannot be read\n      */\n-    private void manipulateInnerClass(InputStream clazz, String cn, ComponentInfo ci) throws IOException {\n-        byte[] in = new byte[0];\n-        int c;\n-        while ((c = clazz.read()) >= 0) {\n-            byte[] in2 = new byte[in.length + 1];\n-            System.arraycopy(in, 0, in2, 0, in.length);\n-            in2[in.length] = (byte) c;\n-            in = in2;\n-        }\n+    private void manipulateInnerClass(byte[] in, String cn, ComponentInfo ci) throws IOException {\n         // Remove '.class' from class name.\n-        InnerClassManipulator man = new InnerClassManipulator(ci.m_classname.substring(0, ci.m_classname.length() - 6), ci.m_fields);\n+        String name = ci.m_classname.substring(0, ci.m_classname.length() - 6);\n+        InnerClassManipulator man = new InnerClassManipulator(name, ci.m_fields);\n         byte[] out = man.manipulate(in);\n \n         m_classes.put(cn, out);\n@@ -773,6 +801,12 @@ private void computeDeclaredComponents() {\n          */\n         Set m_fields;\n \n+        /**\n+         * Initial (unmodified) bytecode of the component's class.\n+         * May be null !!\n+         */\n+        byte[] m_bytecode;\n+\n         /**\n          * Constructor.\n          * @param cn : class name",
                "raw_url": "https://github.com/apache/felix/raw/f79068aa767a8ba449b18de3965de601ed42a75f/ipojo/manipulator/src/main/java/org/apache/felix/ipojo/manipulator/Pojoization.java",
                "sha": "90a1448c8132b8a6db3b844b2ad916a90084ce25",
                "status": "modified"
            }
        ],
        "message": "Re-work on Felix-1518\nApply Guillaume patch, Fix the potential NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@807115 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/f68e29949119dfcc3d877be41cd00f1d9f31ccfd",
        "repo": "felix",
        "unit_tests": [
            "PojoizationTest.java"
        ]
    },
    "felix_fca44c7": {
        "bug_id": "felix_fca44c7",
        "commit": "https://github.com/apache/felix/commit/fca44c7ef5adc6b3afe46f7282d999ce8602a761",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/felix/blob/fca44c7ef5adc6b3afe46f7282d999ce8602a761/webconsole/src/main/java/org/apache/felix/webconsole/internal/servlet/ConfigurationSupport.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/webconsole/src/main/java/org/apache/felix/webconsole/internal/servlet/ConfigurationSupport.java?ref=fca44c7ef5adc6b3afe46f7282d999ce8602a761",
                "deletions": 4,
                "filename": "webconsole/src/main/java/org/apache/felix/webconsole/internal/servlet/ConfigurationSupport.java",
                "patch": "@@ -19,7 +19,6 @@\n package org.apache.felix.webconsole.internal.servlet;\n \n \n-import java.security.AccessControlContext;\n import java.security.AccessController;\n import java.security.PrivilegedActionException;\n import java.security.PrivilegedExceptionAction;\n@@ -104,9 +103,11 @@ void updated0( Dictionary config ) throws ConfigurationException\n                         Dictionary newConfig = cfg.getProperties();\n                         if ( newConfig != null )\n                         {\n-                            // assumption: config is not null and as a non-null password String property\n-                            final String pwd = ( String ) config.get( OsgiManager.PROP_PASSWORD );\n-                            final String hashedPassword = Password.hashPassword( pwd );\n+                            String pwd = ( String ) config.get( OsgiManager.PROP_PASSWORD );\n+                            // password can be null, see FELIX-4995\n+                            final String hashedPassword = null == pwd \n+                                ? OsgiManager.DEFAULT_PASSWORD\n+                                : Password.hashPassword( pwd );\n                             newConfig.put( OsgiManager.PROP_PASSWORD, hashedPassword );\n                             cfg.update( newConfig );\n                         }",
                "raw_url": "https://github.com/apache/felix/raw/fca44c7ef5adc6b3afe46f7282d999ce8602a761/webconsole/src/main/java/org/apache/felix/webconsole/internal/servlet/ConfigurationSupport.java",
                "sha": "444eeb6591c2f69711a916af5b7f79f578c97b48",
                "status": "modified"
            }
        ],
        "message": "Fixed FELIX-4995 : NPE when updating Apache Felix OSGi Management Console configuration without a password\nhttps://issues.apache.org/jira/browse/FELIX-4995\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1694628 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/f42ee6716db6b8d34eea35bb938c71fbb2919690",
        "repo": "felix",
        "unit_tests": [
            "ConfigurationSupportTest.java"
        ]
    },
    "felix_ff08e5c": {
        "bug_id": "felix_ff08e5c",
        "commit": "https://github.com/apache/felix/commit/ff08e5caf75b5b78454d699c3bff45af1b809539",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/felix/blob/ff08e5caf75b5b78454d699c3bff45af1b809539/scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/felix/contents/scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java?ref=ff08e5caf75b5b78454d699c3bff45af1b809539",
                "deletions": 2,
                "filename": "scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java",
                "patch": "@@ -157,7 +157,9 @@ private ComponentConfigurationDTO managerToConfiguration(ComponentManager<?> man\n                 int j = 0;\n                 for (ServiceReference<?> serviceRef : serviceRefs)\n                 {\n-                    srDTOs[j++] = serviceReferenceToDTO(serviceRef);\n+                    ServiceReferenceDTO srefDTO = serviceReferenceToDTO(serviceRef);\n+                    if (srefDTO != null)\n+                        srDTOs[j++] = srefDTO;\n                 }\n                 dto.boundServices = srDTOs;\n                 dtos.add(dto);\n@@ -181,7 +183,9 @@ private ComponentConfigurationDTO managerToConfiguration(ComponentManager<?> man\n                 int j = 0;\n                 for (ServiceReference<?> serviceRef : serviceRefs)\n                 {\n-                    srDTOs[j++] = serviceReferenceToDTO(serviceRef);\n+                    ServiceReferenceDTO srefDTO = serviceReferenceToDTO(serviceRef);\n+                    if (srefDTO != null)\n+                        srDTOs[j++] = srefDTO;\n                 }\n                 dto.targetServices = srDTOs;\n                 dtos.add(dto);",
                "raw_url": "https://github.com/apache/felix/raw/ff08e5caf75b5b78454d699c3bff45af1b809539/scr/src/main/java/org/apache/felix/scr/impl/runtime/ServiceComponentRuntimeImpl.java",
                "sha": "4dd05c40680b8fccde1f71d9eda451f111fe3736",
                "status": "modified"
            }
        ],
        "message": "FELIX-4883 Fix NPE when creating ServiceReferenceDTO - callsite\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk@1681097 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/felix/commit/ce6a80c41ce2473de68074618a86faaf10b7fc0c",
        "repo": "felix",
        "unit_tests": [
            "ServiceComponentRuntimeImplTest.java"
        ]
    }
}