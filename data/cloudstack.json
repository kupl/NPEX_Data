{
    "cloudstack_0040c4a": {
        "bug_id": "cloudstack_0040c4a",
        "commit": "https://github.com/apache/cloudstack/commit/0040c4adef4f7b92aa63737a8f2c5405a07fabda",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/0040c4adef4f7b92aa63737a8f2c5405a07fabda/engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeObject.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeObject.java?ref=0040c4adef4f7b92aa63737a8f2c5405a07fabda",
                "deletions": 1,
                "filename": "engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeObject.java",
                "patch": "@@ -335,7 +335,11 @@ public String getPath() {\n             return this.volumeVO.getPath();\n         } else {\n             DataObjectInStore objInStore = this.objectInStoreMgr.findObject(this, dataStore);\n-            return objInStore.getInstallPath();\n+            if (objInStore != null) {\n+                return objInStore.getInstallPath();\n+            } else {\n+                return null;\n+            }\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/0040c4adef4f7b92aa63737a8f2c5405a07fabda/engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeObject.java",
                "sha": "f5a1276cf2d4e36f605ce8c4aa3670b5267c6a2c",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-4363: fix possible NPE, if copy volume failed.",
        "parent": "https://github.com/apache/cloudstack/commit/1c96898ae1314521d32a557ec39bd745f0f4a709",
        "repo": "cloudstack",
        "unit_tests": [
            "VolumeObjectTest.java"
        ]
    },
    "cloudstack_0059dd0": {
        "bug_id": "cloudstack_0059dd0",
        "commit": "https://github.com/apache/cloudstack/commit/0059dd0e5742235448b1551e5c047daa485778d1",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/0059dd0e5742235448b1551e5c047daa485778d1/server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=0059dd0e5742235448b1551e5c047daa485778d1",
                "deletions": 1,
                "filename": "server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -1534,7 +1534,7 @@ protected Command compareState(long hostId, VMInstanceVO vm, final AgentVmInfo i\n         }\n         \n         if(trackExternalChange) {\n-        \tif(hostId != vm.getHostId()) {\n+        \tif(vm.getHostId() == null || hostId != vm.getHostId()) {\n         \t\ttry {\n         \t\t\tstateTransitTo(vm, VirtualMachine.Event.AgentReportMigrated, hostId);\n         \t\t} catch (NoTransitionException e) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/0059dd0e5742235448b1551e5c047daa485778d1/server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "ed01e94d0a5be3aa0fbc178cda319c7c0ea0c7f7",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/cloudstack/blob/0059dd0e5742235448b1551e5c047daa485778d1/setup/db/db/schema-225to226.sql",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/setup/db/db/schema-225to226.sql?ref=0059dd0e5742235448b1551e5c047daa485778d1",
                "deletions": 0,
                "filename": "setup/db/db/schema-225to226.sql",
                "patch": "@@ -9,5 +9,27 @@ ALTER TABLE `cloud`.`network_offerings` ADD COLUMN `unique_name` varchar(64) NOT\n UPDATE `cloud`.`network_offerings` SET unique_name=name;\n ALTER TABLE `cloud`.`network_offerings` MODIFY `unique_name` varchar(64) NOT NULL UNIQUE COMMENT 'unique name of the network offering';\n \n+DROP TABLE IF EXISTS `cloud`.`certificate`;\n+CREATE TABLE IF NOT EXISTS `cloud`.`keystore` (\n+  `id` bigint unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\n+  `name` varchar(64) NOT NULL COMMENT 'unique name for the certifiation',\n+  `certificate` text NOT NULL COMMENT 'the actual certificate being stored in the db',\n+  `key` text NOT NULL COMMENT 'private key associated wih the certificate',\n+  `domain_suffix` varchar(256) NOT NULL COMMENT 'DNS domain suffix associated with the certificate',\n+  PRIMARY KEY (`id`),\n+  UNIQUE(name)\n+) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n \n+CREATE TABLE IF NOT EXISTS `cloud`.`cmd_exec_log` (\n+  `id` bigint unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\n+  `host_id` bigint unsigned NOT NULL COMMENT 'host id of the system VM agent that command is sent to',\n+  `instance_id` bigint unsigned NOT NULL COMMENT 'instance id of the system VM that command is executed on',\n+  `command_name` varchar(255) NOT NULL COMMENT 'command name',\n+  `weight` integer NOT NULL DEFAULT 1 COMMENT 'command weight in consideration of the load factor added to host that is executing the command',\n+  `created` datetime NOT NULL COMMENT 'date created',\n+  PRIMARY KEY (`id`),\n+  INDEX `i_cmd_exec_log__host_id`(`host_id`),\n+  INDEX `i_cmd_exec_log__instance_id`(`instance_id`),\n+  CONSTRAINT `fk_cmd_exec_log_ref__inst_id` FOREIGN KEY (`instance_id`) REFERENCES `vm_instance`(`id`) ON DELETE CASCADE\n+) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/0059dd0e5742235448b1551e5c047daa485778d1/setup/db/db/schema-225to226.sql",
                "sha": "eb39f0c91a9c888f5f6227536bdb76be66bb40bb",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/0059dd0e5742235448b1551e5c047daa485778d1/setup/db/db/schema-227to228.sql",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/setup/db/db/schema-227to228.sql?ref=0059dd0e5742235448b1551e5c047daa485778d1",
                "deletions": 3,
                "filename": "setup/db/db/schema-227to228.sql",
                "patch": "@@ -11,7 +11,7 @@ ALTER TABLE `cloud`.`service_offering` ADD COLUMN `vm_type` varchar(32) COMMENT\n ALTER TABLE `cloud`.`storage_pool` MODIFY `host_address` varchar(255) NOT NULL;\r\n \r\n DROP TABLE IF EXISTS `cloud`.`certificate`;\r\n-CREATE TABLE `cloud`.`keystore` (\r\n+CREATE TABLE IF NOT EXISTS `cloud`.`keystore` (\r\n   `id` bigint unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\r\n   `name` varchar(64) NOT NULL COMMENT 'unique name for the certifiation',\r\n   `certificate` text NOT NULL COMMENT 'the actual certificate being stored in the db',\r\n@@ -21,7 +21,7 @@ CREATE TABLE `cloud`.`keystore` (\n   UNIQUE(name)\r\n ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r\n \r\n-CREATE TABLE `cloud`.`cmd_exec_log` (\r\n+CREATE TABLE IF NOT EXISTS `cloud`.`cmd_exec_log` (\r\n   `id` bigint unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\r\n   `host_id` bigint unsigned NOT NULL COMMENT 'host id of the system VM agent that command is sent to',\r\n   `instance_id` bigint unsigned NOT NULL COMMENT 'instance id of the system VM that command is executed on',\r\n@@ -34,7 +34,7 @@ CREATE TABLE `cloud`.`cmd_exec_log` (\n   CONSTRAINT `fk_cmd_exec_log_ref__inst_id` FOREIGN KEY (`instance_id`) REFERENCES `vm_instance`(`id`) ON DELETE CASCADE\r\n ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r\n \r\n-CREATE TABLE `cloud`.`network_tags` (\r\n+CREATE TABLE IF NOT EXISTS `cloud`.`network_tags` (\r\n   `id` bigint unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\r\n   `network_id` bigint unsigned NOT NULL COMMENT 'id of the network',\r\n   `tag` varchar(255) NOT NULL COMMENT 'tag',\r",
                "raw_url": "https://github.com/apache/cloudstack/raw/0059dd0e5742235448b1551e5c047daa485778d1/setup/db/db/schema-227to228.sql",
                "sha": "b9f74dc72c86092b746695a132e6da571786d623",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cloudstack/blob/0059dd0e5742235448b1551e5c047daa485778d1/utils/src/com/cloud/utils/StringUtils.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/com/cloud/utils/StringUtils.java?ref=0059dd0e5742235448b1551e5c047daa485778d1",
                "deletions": 0,
                "filename": "utils/src/com/cloud/utils/StringUtils.java",
                "patch": "@@ -119,4 +119,16 @@ public static String unicodeEscape(String s) {\n     \t}\n     \treturn sb.toString();\n     }\n+    \n+    public static String getMaskedPasswordForDisplay(String password) {\n+    \tif(password == null || password.isEmpty())\n+    \t\treturn \"*\";\n+    \t\n+    \tStringBuffer sb = new StringBuffer();\n+    \tsb.append(password.charAt(0));\n+    \tfor(int i = 1; i < password.length(); i++)\n+    \t\tsb.append(\"*\");\n+    \t\n+    \treturn sb.toString();\n+    }\n }\r",
                "raw_url": "https://github.com/apache/cloudstack/raw/0059dd0e5742235448b1551e5c047daa485778d1/utils/src/com/cloud/utils/StringUtils.java",
                "sha": "f4226efe33385d9a70cd3e0abe184a2a810f0e59",
                "status": "modified"
            }
        ],
        "message": "bug 10480, 10494: NPE fix in VirtualMachineManagerImpl, move keystore upgrade sql to upgrade225to226.sql",
        "parent": "https://github.com/apache/cloudstack/commit/80028345813200ef1aa039838b63549dcbf5f9dd",
        "repo": "cloudstack",
        "unit_tests": [
            "StringUtilsTest.java"
        ]
    },
    "cloudstack_04a8682": {
        "bug_id": "cloudstack_04a8682",
        "commit": "https://github.com/apache/cloudstack/commit/04a868231311477dde8e60d4f87a0360ef681dd1",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/04a868231311477dde8e60d4f87a0360ef681dd1/server/src/com/cloud/server/ManagementServerImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/ManagementServerImpl.java?ref=04a868231311477dde8e60d4f87a0360ef681dd1",
                "deletions": 3,
                "filename": "server/src/com/cloud/server/ManagementServerImpl.java",
                "patch": "@@ -1254,11 +1254,10 @@ private Date massageDate(Date date, int hourOfDay, int minute, int second) {\n             // Get all the pools available. Only shared pools are considered because only a volume on a shared pools\n             // can be live migrated while the virtual machine stays on the same host.\n             List<StoragePoolVO> storagePools = null;\n-\n             if (srcVolumePool.getClusterId() == null) {\n                 storagePools = _poolDao.findZoneWideStoragePoolsByTags(volume.getDataCenterId(), null);\n             } else {\n-                storagePools = _poolDao.findPoolsByTags(volume.getDataCenterId(), volume.getPodId(), srcVolumePool.getClusterId(), null);\n+                storagePools = _poolDao.findPoolsByTags(volume.getDataCenterId(), srcVolumePool.getPodId(), srcVolumePool.getClusterId(), null);\n             }\n \n             storagePools.remove(srcVolumePool);\n@@ -1274,7 +1273,7 @@ private Date massageDate(Date date, int hourOfDay, int minute, int second) {\n             avoid.addPool(srcVolumePool.getId());\n \n             // Volume stays in the same cluster after migration.\n-            DataCenterDeployment plan = new DataCenterDeployment(volume.getDataCenterId(), volume.getPodId(),\n+            DataCenterDeployment plan = new DataCenterDeployment(volume.getDataCenterId(), srcVolumePool.getPodId(),\n                     srcVolumePool.getClusterId(), null, null, null);\n             VirtualMachineProfile<VMInstanceVO> profile = new VirtualMachineProfileImpl<VMInstanceVO>(vm);\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/04a868231311477dde8e60d4f87a0360ef681dd1/server/src/com/cloud/server/ManagementServerImpl.java",
                "sha": "29272dd33c9be5b032f5a91bcf54f6977327a159",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-3545: NPE in listStoragePoolsForMigration api. The volume table no longer holds\nthe pod id, the column is null now. Made a change to get the pod id from the storage pool\non which the volume resides.",
        "parent": "https://github.com/apache/cloudstack/commit/a67cce3d26c5d6e6de0f8c58f2772ff93b666404",
        "repo": "cloudstack",
        "unit_tests": [
            "ManagementServerImplTest.java"
        ]
    },
    "cloudstack_12adbff": {
        "bug_id": "cloudstack_12adbff",
        "commit": "https://github.com/apache/cloudstack/commit/12adbffbea77b6a21aa8350d0b0effd1c7fb9702",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/12adbffbea77b6a21aa8350d0b0effd1c7fb9702/server/src/com/cloud/user/AccountManagerImpl.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/user/AccountManagerImpl.java?ref=12adbffbea77b6a21aa8350d0b0effd1c7fb9702",
                "deletions": 4,
                "filename": "server/src/com/cloud/user/AccountManagerImpl.java",
                "patch": "@@ -750,11 +750,14 @@ protected boolean cleanupAccount(AccountVO account, long callerUserId, Account c\n \n             // release account specific acquired portable IP's. Since all the portable IP's must have been already\n             // disassociated with VPC/guest network (due to deletion), so just mark portable IP as free.\n-            List<? extends IpAddress> portableIpsToRelease = _ipAddressDao.listByAccount(accountId);\n-            for (IpAddress ip : portableIpsToRelease) {\n-                s_logger.debug(\"Releasing portable ip \" + ip + \" as a part of account id=\" + accountId + \" cleanup\");\n-                _ipAddrMgr.releasePortableIpAddress(ip.getId());\n+            List<? extends IpAddress> ipsToRelease = _ipAddressDao.listByAccount(accountId);\n+            for (IpAddress ip : ipsToRelease) {\n+                if (ip.isPortable()) {\n+                    s_logger.debug(\"Releasing portable ip \" + ip + \" as a part of account id=\" + accountId + \" cleanup\");\n+                    _ipAddrMgr.releasePortableIpAddress(ip.getId());\n+                }\n             }\n+\n             // release dedication if any\n             List<DedicatedResourceVO> dedicatedResources = _dedicatedDao.listByAccountId(accountId);\n             if (dedicatedResources != null && !dedicatedResources.isEmpty()) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/12adbffbea77b6a21aa8350d0b0effd1c7fb9702/server/src/com/cloud/user/AccountManagerImpl.java",
                "sha": "20a6242cfd64f405e39741d6d240779dc5c51b94",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-5517: NPE observed during \"release portable IPs\" as part of\naccount cleanup\n\nensure proper portable ip address are released  as part of account\ncleanup",
        "parent": "https://github.com/apache/cloudstack/commit/c6c299523151345bbc3c97614c8ac995676e229b",
        "repo": "cloudstack",
        "unit_tests": [
            "AccountManagerImplTest.java"
        ]
    },
    "cloudstack_14abe4c": {
        "bug_id": "cloudstack_14abe4c",
        "commit": "https://github.com/apache/cloudstack/commit/14abe4cb2dbdc9293926ec706b01ab068d03c34d",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/14abe4cb2dbdc9293926ec706b01ab068d03c34d/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java?ref=14abe4cb2dbdc9293926ec706b01ab068d03c34d",
                "deletions": 1,
                "filename": "plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "patch": "@@ -2679,7 +2679,8 @@ protected StartAnswer execute(StartCommand cmd) {\n                 ManagedObjectReference environmentBrowser =\n                         context.getVimClient().getMoRefProp(computeMor, \"environmentBrowser\");\n                 HostCapability hostCapability = context.getService().queryTargetCapabilities(environmentBrowser, hostMor);\n-                if (hostCapability.isNestedHVSupported()) {\n+                Boolean nestedHvSupported = hostCapability.isNestedHVSupported();\n+                if (nestedHvSupported != null && nestedHvSupported.booleanValue()) {\n                     s_logger.debug(\"Hypervisor supports nested virtualization, enabling for VM \" + vmSpec.getName());\n                     vmConfigSpec.setNestedHVEnabled(true);\n                 }",
                "raw_url": "https://github.com/apache/cloudstack/raw/14abe4cb2dbdc9293926ec706b01ab068d03c34d/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "sha": "c61e171f7cad80c5ae923eb68996e97fad903902",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-4155 [VMWARE] Failed to deploy VM with NPE when vmware.nested.virtualization is enabled to true\n\nSigned-off-by: Sateesh Chodapuneedi <sateesh@apache.org>",
        "parent": "https://github.com/apache/cloudstack/commit/59f944d7c33d75561f0ac6a53255bfa0497c925a",
        "repo": "cloudstack",
        "unit_tests": [
            "VmwareResourceTest.java"
        ]
    },
    "cloudstack_1741fdf": {
        "bug_id": "cloudstack_1741fdf",
        "commit": "https://github.com/apache/cloudstack/commit/1741fdfb12fd37ce73708b4d563ac22217098c03",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/1741fdfb12fd37ce73708b4d563ac22217098c03/utils/src/com/cloud/utils/UriUtils.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/com/cloud/utils/UriUtils.java?ref=1741fdfb12fd37ce73708b4d563ac22217098c03",
                "deletions": 5,
                "filename": "utils/src/com/cloud/utils/UriUtils.java",
                "patch": "@@ -108,17 +108,22 @@ public static Long getRemoteSize(String url) {\n         HttpsURLConnection httpsConn = null;\n         try {\n             URI uri = new URI(url);\n-            if(uri.getScheme().equalsIgnoreCase(\"http\")) {\n+            if (uri.getScheme().equalsIgnoreCase(\"http\")) {\n                 httpConn = (HttpURLConnection) uri.toURL().openConnection();\n                 if (httpConn != null) {\n-                    remoteSize = Long.parseLong(httpConn.getHeaderField(\"content-length\"));\n+                    String contentLength = httpConn.getHeaderField(\"content-length\");\n+                    if (contentLength != null) {\n+                        remoteSize = Long.parseLong(contentLength);\n+                    }\n                     httpConn.disconnect();\n                 }\n-            }\n-            else if(uri.getScheme().equalsIgnoreCase(\"https\")) {\n+            } else if (uri.getScheme().equalsIgnoreCase(\"https\")) {\n                 httpsConn = (HttpsURLConnection) uri.toURL().openConnection();\n                 if (httpsConn != null) {\n-                    remoteSize = Long.parseLong(httpsConn.getHeaderField(\"content-length\"));\n+                    String contentLength = httpsConn.getHeaderField(\"content-length\");\n+                    if (contentLength != null) {\n+                        remoteSize = Long.parseLong(contentLength);\n+                    }\n                     httpsConn.disconnect();\n                 }\n             }",
                "raw_url": "https://github.com/apache/cloudstack/raw/1741fdfb12fd37ce73708b4d563ac22217098c03/utils/src/com/cloud/utils/UriUtils.java",
                "sha": "1ff4d729cbf50154688bcea79bb8f48d1a972674",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-3774: NPE while creating template from snapshot on a upgraded setup.\nAfter upgrade the SSVM was staying in connecting/alert state. This was because\nwhile handling the processConnect command for ssvm the management server was\ntrying to template sync. For resource limit calculation it was trying to get the\nremote size of the template. If the template was no longer available a number\nformat exception was thrown. The process connect wasn't getting completed and\nthe ssvm used to stay in connecting/alert state. While creating template from\nsnapshot cloudstack looks for up and enabled ssvms and because there wasn't\nany available (as the ssvm was in coonecting/alert state) it used to pick the\nwrong resource (LocalNfs*Resource) instead of the NfsSecondaryStorageResource.\n\nFixed the issue by making sure number format exceptions are avoided so that\nSSVM moves to the right state.",
        "parent": "https://github.com/apache/cloudstack/commit/6164077ee88786bc80b895f889b45c17fdf7ae2e",
        "repo": "cloudstack",
        "unit_tests": [
            "UriUtilsTest.java"
        ]
    },
    "cloudstack_17e4e70": {
        "bug_id": "cloudstack_17e4e70",
        "commit": "https://github.com/apache/cloudstack/commit/17e4e7014fed8bd010c7858e5bd086c4f479ba1f",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cloudstack/blob/17e4e7014fed8bd010c7858e5bd086c4f479ba1f/server/src/com/cloud/server/StatsCollector.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/StatsCollector.java?ref=17e4e7014fed8bd010c7858e5bd086c4f479ba1f",
                "deletions": 7,
                "filename": "server/src/com/cloud/server/StatsCollector.java",
                "patch": "@@ -259,21 +259,26 @@ public VmStats getVmStats(long id) {\n \t\t@Override\n         public void run() {\r\n \t\t\ttry {\n-\t\t\t\ts_logger.debug(\"StorageCollector is running...\");\n+\t            if (s_logger.isDebugEnabled()) {\n+\t            \ts_logger.debug(\"StorageCollector is running...\");\n+\t            }\n \t\t\t\t\r\n                 List<HostVO> hosts = _hostDao.listSecondaryStorageHosts();\n-                ConcurrentHashMap<Long, StorageStats> storageStats = new ConcurrentHashMap<Long, StorageStats>();\r\n+                ConcurrentHashMap<Long, StorageStats> storageStats = new ConcurrentHashMap<Long, StorageStats>();\n+                \r\n                 for (HostVO host : hosts) {\r\n                     GetStorageStatsCommand command = new GetStorageStatsCommand(host.getStorageUrl());\n-                    HostVO ssAhost = _agentMgr.getSSAgent(host);\n-                    if (ssAhost == null) {\n-                        return;\n-                    }\n+        \t\t\tHostVO ssAhost = _agentMgr.getSSAgent(host);\n+        \t\t\tif( ssAhost == null ) {\n+        \t\t\t\ts_logger.warn(\"There is no secondary storage VM for secondary storage host \" + host.getName());\n+        \t\t\t\tcontinue;\n+        \t\t\t}\n+        \t\t\t\n                     long hostId = host.getId();\r\n                     Answer answer = _agentMgr.easySend(ssAhost.getId(), command);\r\n                     if (answer != null && answer.getResult()) {\r\n                         storageStats.put(hostId, (StorageStats)answer);\n-                        s_logger.debug(\"HostId: \"+hostId+ \" Used: \" + ((StorageStats)answer).getByteUsed() + \" Total Available: \" + ((StorageStats)answer).getCapacityBytes());\n+                        s_logger.trace(\"HostId: \"+hostId+ \" Used: \" + ((StorageStats)answer).getByteUsed() + \" Total Available: \" + ((StorageStats)answer).getCapacityBytes());\n                         //Seems like we have dynamically updated the sec. storage as prev. size and the current do not match\n                         if (_storageStats.get(hostId)!=null &&\n                         \t\t_storageStats.get(hostId).getCapacityBytes() != ((StorageStats)answer).getCapacityBytes()){",
                "raw_url": "https://github.com/apache/cloudstack/raw/17e4e7014fed8bd010c7858e5bd086c4f479ba1f/server/src/com/cloud/server/StatsCollector.java",
                "sha": "6561567da8315aa88fdc5ed2f0ebc609b4a7c686",
                "status": "modified"
            }
        ],
        "message": "bug 10602: Fix NPE in StatsCollector - ssvm might not be up so check for that.\nstatus 10602: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/73b79deb9943820f968adc513d4187caf4aa3ab6",
        "repo": "cloudstack",
        "unit_tests": [
            "StatsCollectorTest.java"
        ]
    },
    "cloudstack_1889247": {
        "bug_id": "cloudstack_1889247",
        "commit": "https://github.com/apache/cloudstack/commit/188924751ed87a01541a094e03e958cd8d01653b",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/188924751ed87a01541a094e03e958cd8d01653b/developer/developer-prefill.sql",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/developer/developer-prefill.sql?ref=188924751ed87a01541a094e03e958cd8d01653b",
                "deletions": 16,
                "filename": "developer/developer-prefill.sql",
                "patch": "@@ -62,22 +62,6 @@ INSERT INTO `cloud`.`configuration` (category, instance, component, name, value)\n             VALUES ('Advanced', 'DEFAULT', 'management-server',\n             'expunge.interval', '60');\n \n-INSERT INTO `cloud`.`configuration` (category, instance, component, name, value)\n-            VALUES ('Advanced', 'DEFAULT', 'management-server',\n-            'cluster.cpu.allocated.capacity.disablethreshold', '0.95');\n-\n-INSERT INTO `cloud`.`configuration` (category, instance, component, name, value)\n-            VALUES ('Advanced', 'DEFAULT', 'management-server',\n-            'cluster.memory.allocated.capacity.disablethreshold ', '0.95');\n-\n-INSERT INTO `cloud`.`configuration` (category, instance, component, name, value)\n-            VALUES ('Advanced', 'DEFAULT', 'management-server',\n-            'pool.storage.allocated.capacity.disablethreshold ', '0.95');\n-\n-INSERT INTO `cloud`.`configuration` (category, instance, component, name, value)\n-            VALUES ('Advanced', 'DEFAULT', 'management-server',\n-            'pool.storage.capacity.disablethreshold ', '0.95');\n-\n -- Add developer configuration entry; allows management server to be run as a user other than \"cloud\"\n INSERT INTO `cloud`.`configuration` (category, instance, component, name, value)\n             VALUES ('Advanced', 'DEFAULT', 'management-server',",
                "raw_url": "https://github.com/apache/cloudstack/raw/188924751ed87a01541a094e03e958cd8d01653b/developer/developer-prefill.sql",
                "sha": "89d9c7ebe28402f53b3dd5f10d852107ae6711af",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cloudstack/blob/188924751ed87a01541a094e03e958cd8d01653b/server/src/com/cloud/server/ManagementServerImpl.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/ManagementServerImpl.java?ref=188924751ed87a01541a094e03e958cd8d01653b",
                "deletions": 3,
                "filename": "server/src/com/cloud/server/ManagementServerImpl.java",
                "patch": "@@ -1709,9 +1709,18 @@ private boolean hasSuitablePoolsForVolume(VolumeVO volume, Host host, VirtualMac\n             List<ConfigurationVO> configVOList = new ArrayList<ConfigurationVO>();\n             for (ConfigurationVO param : result.first()) {\n                 ConfigurationVO configVo = _configDao.findByName(param.getName());\n-                configVo.setValue(_configDepot.get(param.getName()).valueIn(id).toString());\n-                configVOList.add(configVo);\n-    }\n+                if (configVo != null) {\n+                    ConfigKey<?> key = _configDepot.get(param.getName());\n+                    if (key != null) {\n+                        configVo.setValue(key.valueIn(id).toString());\n+                        configVOList.add(configVo);\n+                    } else {\n+                        s_logger.warn(\"ConfigDepot could not find parameter \" + param.getName() + \" for scope \" + scope);\n+                    }\n+                } else {\n+                    s_logger.warn(\"Configuration item  \" + param.getName() + \" not found in \" + scope);\n+                }\n+            }\n \n             return new Pair<List<? extends Configuration>, Integer>(configVOList, configVOList.size());\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/188924751ed87a01541a094e03e958cd8d01653b/server/src/com/cloud/server/ManagementServerImpl.java",
                "sha": "85ce413d96a8cf857a2e369f370b7ac337cd9e61",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-7219: Fix NPE, log warning when config item is missing from scope\n\n- Cherry picked from Daan's fix 63fbd16dd11388bd93cdbec4ea7fe6de37aa7fc5\n- Added another check if configDepot returned null\n- Removed developer prefill values\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/b99d950dd31420ffb06d6c910a075ec691ae2e67",
        "repo": "cloudstack",
        "unit_tests": [
            "ManagementServerImplTest.java"
        ]
    },
    "cloudstack_1a03097": {
        "bug_id": "cloudstack_1a03097",
        "commit": "https://github.com/apache/cloudstack/commit/1a03097d1b6eda3d3705b800e23077f2e10a732b",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/1a03097d1b6eda3d3705b800e23077f2e10a732b/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java?ref=1a03097d1b6eda3d3705b800e23077f2e10a732b",
                "deletions": 1,
                "filename": "server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "patch": "@@ -1020,8 +1020,13 @@ public boolean finalizeDeployment(Commands cmds, VirtualMachineProfile<DomainRou\n         }\n         _routerDao.update(router.getId(), router);\n        \n+        //restart network if restartNetwork = false is not specified in profile parameters\n+        boolean restartNetwork = true;\n+        if (profile.getParameter(Param.RestartNetwork) != null && (Boolean)profile.getParameter(Param.RestartNetwork) == false) {\n+            restartNetwork = false;\n+        }\n         //The commands should be sent for domR only, skip for DHCP\n-        if (router.getRole() == VirtualRouter.Role.DHCP_FIREWALL_LB_PASSWD_USERDATA && ((Boolean)profile.getParameter(Param.RestartNetwork))== true) {\n+        if (router.getRole() == VirtualRouter.Role.DHCP_FIREWALL_LB_PASSWD_USERDATA && restartNetwork) {\n             s_logger.debug(\"Resending ipAssoc, port forwarding, load balancing rules as a part of Virtual router start\");\n             long networkId = router.getNetworkId();\n             long ownerId = router.getAccountId();",
                "raw_url": "https://github.com/apache/cloudstack/raw/1a03097d1b6eda3d3705b800e23077f2e10a732b/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "sha": "0411c98a8b951ad057769b1c41b0467335068baa",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE in VirtualNetworkApplianceManager - happened when stopped domR start was initiated by user vm start",
        "parent": "https://github.com/apache/cloudstack/commit/a8ce46b57aac08b89e3d874d9ef1d9460dede27c",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualNetworkApplianceManagerImplTest.java"
        ]
    },
    "cloudstack_1a0ec2a": {
        "bug_id": "cloudstack_1a0ec2a",
        "commit": "https://github.com/apache/cloudstack/commit/1a0ec2a00f8cd2a1961d4a5dad793e3565a57640",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/1a0ec2a00f8cd2a1961d4a5dad793e3565a57640/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=1a0ec2a00f8cd2a1961d4a5dad793e3565a57640",
                "deletions": 3,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -1094,9 +1094,11 @@ public IpForwardingRuleResponse createIpForwardingRuleResponse(FirewallRule fwRu\n         response.setPublicIpAddress(fwRule.getPublicIpAddress());\n         if (fwRule.getPublicIpAddress() != null && fwRule.getPrivateIpAddress() != null) {\n             UserVm vm = ApiDBUtils.findUserVmByPublicIpAndGuestIp(fwRule.getPublicIpAddress(), fwRule.getPrivateIpAddress());\n-            response.setVirtualMachineId(vm.getId());\n-            response.setVirtualMachineName(vm.getHostName());\n-            response.setVirtualMachineDisplayName(vm.getDisplayName());\n+            if(vm != null){//vm might be destroyed\n+            \tresponse.setVirtualMachineId(vm.getId());\n+            \tresponse.setVirtualMachineName(vm.getHostName());\n+            \tresponse.setVirtualMachineDisplayName(vm.getDisplayName());\n+            }\n         }\n         response.setObjectName(\"ipforwardingrule\");\n         return response;",
                "raw_url": "https://github.com/apache/cloudstack/raw/1a0ec2a00f8cd2a1961d4a5dad793e3565a57640/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "aa8ab7512f9dffb5aa1eb895e1ecfa6851f093d1",
                "status": "modified"
            }
        ],
        "message": "bug 7346: fixing the corner case where list ip forwarding rules is called for a rule, which is yet to be expunged, but the vm is destroyed. if you call list here, an npe results\nstatus 7346: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/ed9207014265095a6cf69297bb025238a4495d78",
        "repo": "cloudstack",
        "unit_tests": [
            "ApiResponseHelperTest.java"
        ]
    },
    "cloudstack_1cf165f": {
        "bug_id": "cloudstack_1cf165f",
        "commit": "https://github.com/apache/cloudstack/commit/1cf165f86df718bdbd1db1f094a341c8abaca42e",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/1cf165f86df718bdbd1db1f094a341c8abaca42e/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=1cf165f86df718bdbd1db1f094a341c8abaca42e",
                "deletions": 1,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -500,7 +500,10 @@ public VMSnapshotResponse createVMSnapshotResponse(VMSnapshot vmSnapshot) {\n             vmSnapshotResponse.setVirtualMachineid(vm.getUuid());\n         }\n         if (vmSnapshot.getParent() != null) {\n-            vmSnapshotResponse.setParentName(ApiDBUtils.getVMSnapshotById(vmSnapshot.getParent()).getDisplayName());\n+            VMSnapshot vmSnapshotParent = ApiDBUtils.getVMSnapshotById(vmSnapshot.getParent());\n+            if (vmSnapshotParent != null) {\n+                vmSnapshotResponse.setParentName(vmSnapshotParent.getDisplayName());\n+            }\n         }\n         vmSnapshotResponse.setCurrent(vmSnapshot.getCurrent());\n         vmSnapshotResponse.setType(vmSnapshot.getType().toString());",
                "raw_url": "https://github.com/apache/cloudstack/raw/1cf165f86df718bdbd1db1f094a341c8abaca42e/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "a13e99694238a140833c30693ebfc5501d42457b",
                "status": "modified"
            }
        ],
        "message": "ApiResponseHelper: fix NPE when parent of snapshot is null",
        "parent": "https://github.com/apache/cloudstack/commit/ca0a77088c773516d07c24df8613ac9ff334a441",
        "repo": "cloudstack",
        "unit_tests": [
            "ApiResponseHelperTest.java"
        ]
    },
    "cloudstack_1e8126a": {
        "bug_id": "cloudstack_1e8126a",
        "commit": "https://github.com/apache/cloudstack/commit/1e8126afbf8c4473a4fb0f3bf6dc5c9df6823e9f",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/1e8126afbf8c4473a4fb0f3bf6dc5c9df6823e9f/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java?ref=1e8126afbf8c4473a4fb0f3bf6dc5c9df6823e9f",
                "deletions": 0,
                "filename": "engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "patch": "@@ -1523,6 +1523,8 @@ public NicProfile prepareNic(final VirtualMachineProfile vmProfile, final Deploy\n             nic.setIPv4Address(profile.getIPv4Address());\n             nic.setAddressFormat(profile.getFormat());\n             nic.setIPv6Address(profile.getIPv6Address());\n+            nic.setIPv6Cidr(profile.getIPv6Cidr());\n+            nic.setIPv6Gateway(profile.getIPv6Gateway());\n             nic.setMacAddress(profile.getMacAddress());\n             nic.setIsolationUri(profile.getIsolationUri());\n             nic.setBroadcastUri(profile.getBroadCastUri());",
                "raw_url": "https://github.com/apache/cloudstack/raw/1e8126afbf8c4473a4fb0f3bf6dc5c9df6823e9f/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "sha": "a2505fbe638e95ca16fabbeb1e09488b9514b973",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #1927 from wido/ipv6-ssvm-fix\n\nipv6: Set IPv6 CIDR and Gateway in 'nic' profileWithout this information a NPE might be triggered when starting a VR, SSVM or CP\nas this information is read from the 'nics' table and causes a NPE.\n\nDuring deployment we should set the IPv6 Gateway and CIDR for the NIC object so that\nit is persisted to the database.\n\nSigned-off-by: Wido den Hollander <wido@widodh.nl>\n\n* pr/1927:\n  ipv6: Set IPv6 CIDR and Gateway in 'nic' profile\n\nSigned-off-by: Rajani Karuturi <rajani.karuturi@accelerite.com>",
        "parent": "https://github.com/apache/cloudstack/commit/cd68e99148ac9ed96a8d1906b206cb5c5bcee11b",
        "repo": "cloudstack",
        "unit_tests": [
            "NetworkOrchestratorTest.java"
        ]
    },
    "cloudstack_1edf772": {
        "bug_id": "cloudstack_1edf772",
        "commit": "https://github.com/apache/cloudstack/commit/1edf772f92dd645d3e00dfe373ddb8a5ac4b864b",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/1edf772f92dd645d3e00dfe373ddb8a5ac4b864b/server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=1edf772f92dd645d3e00dfe373ddb8a5ac4b864b",
                "deletions": 1,
                "filename": "server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -1525,7 +1525,7 @@ protected Command compareState(long hostId, VMInstanceVO vm, final AgentVmInfo i\n         }\n         \n         if(trackExternalChange) {\n-        \tif(hostId != vm.getHostId()) {\n+        \tif(vm.getHostId() == null || hostId != vm.getHostId()) {\n         \t\ttry {\n         \t\t\tstateTransitTo(vm, VirtualMachine.Event.AgentReportMigrated, hostId);\n         \t\t} catch (NoTransitionException e) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/1edf772f92dd645d3e00dfe373ddb8a5ac4b864b/server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "798f8f5b3dd10ea061b4a0f00effaf78d6a73d00",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/cloudstack/blob/1edf772f92dd645d3e00dfe373ddb8a5ac4b864b/setup/db/db/schema-225to226.sql",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/setup/db/db/schema-225to226.sql?ref=1edf772f92dd645d3e00dfe373ddb8a5ac4b864b",
                "deletions": 0,
                "filename": "setup/db/db/schema-225to226.sql",
                "patch": "@@ -9,5 +9,27 @@ ALTER TABLE `cloud`.`network_offerings` ADD COLUMN `unique_name` varchar(64) NOT\n UPDATE `cloud`.`network_offerings` SET unique_name=name;\n ALTER TABLE `cloud`.`network_offerings` MODIFY `unique_name` varchar(64) NOT NULL UNIQUE COMMENT 'unique name of the network offering';\n \n+DROP TABLE IF EXISTS `cloud`.`certificate`;\n+CREATE TABLE IF NOT EXISTS `cloud`.`keystore` (\n+  `id` bigint unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\n+  `name` varchar(64) NOT NULL COMMENT 'unique name for the certifiation',\n+  `certificate` text NOT NULL COMMENT 'the actual certificate being stored in the db',\n+  `key` text NOT NULL COMMENT 'private key associated wih the certificate',\n+  `domain_suffix` varchar(256) NOT NULL COMMENT 'DNS domain suffix associated with the certificate',\n+  PRIMARY KEY (`id`),\n+  UNIQUE(name)\n+) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n \n+CREATE TABLE IF NOT EXISTS `cloud`.`cmd_exec_log` (\n+  `id` bigint unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\n+  `host_id` bigint unsigned NOT NULL COMMENT 'host id of the system VM agent that command is sent to',\n+  `instance_id` bigint unsigned NOT NULL COMMENT 'instance id of the system VM that command is executed on',\n+  `command_name` varchar(255) NOT NULL COMMENT 'command name',\n+  `weight` integer NOT NULL DEFAULT 1 COMMENT 'command weight in consideration of the load factor added to host that is executing the command',\n+  `created` datetime NOT NULL COMMENT 'date created',\n+  PRIMARY KEY (`id`),\n+  INDEX `i_cmd_exec_log__host_id`(`host_id`),\n+  INDEX `i_cmd_exec_log__instance_id`(`instance_id`),\n+  CONSTRAINT `fk_cmd_exec_log_ref__inst_id` FOREIGN KEY (`instance_id`) REFERENCES `vm_instance`(`id`) ON DELETE CASCADE\n+) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/1edf772f92dd645d3e00dfe373ddb8a5ac4b864b/setup/db/db/schema-225to226.sql",
                "sha": "eb39f0c91a9c888f5f6227536bdb76be66bb40bb",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/1edf772f92dd645d3e00dfe373ddb8a5ac4b864b/setup/db/db/schema-227to228.sql",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/setup/db/db/schema-227to228.sql?ref=1edf772f92dd645d3e00dfe373ddb8a5ac4b864b",
                "deletions": 3,
                "filename": "setup/db/db/schema-227to228.sql",
                "patch": "@@ -11,7 +11,7 @@ ALTER TABLE `cloud`.`service_offering` ADD COLUMN `vm_type` varchar(32) COMMENT\n ALTER TABLE `cloud`.`storage_pool` MODIFY `host_address` varchar(255) NOT NULL;\r\n \r\n DROP TABLE IF EXISTS `cloud`.`certificate`;\r\n-CREATE TABLE `cloud`.`keystore` (\r\n+CREATE TABLE IF NOT EXISTS `cloud`.`keystore` (\r\n   `id` bigint unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\r\n   `name` varchar(64) NOT NULL COMMENT 'unique name for the certifiation',\r\n   `certificate` text NOT NULL COMMENT 'the actual certificate being stored in the db',\r\n@@ -21,7 +21,7 @@ CREATE TABLE `cloud`.`keystore` (\n   UNIQUE(name)\r\n ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r\n \r\n-CREATE TABLE `cloud`.`cmd_exec_log` (\r\n+CREATE TABLE IF NOT EXISTS `cloud`.`cmd_exec_log` (\r\n   `id` bigint unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\r\n   `host_id` bigint unsigned NOT NULL COMMENT 'host id of the system VM agent that command is sent to',\r\n   `instance_id` bigint unsigned NOT NULL COMMENT 'instance id of the system VM that command is executed on',\r\n@@ -34,7 +34,7 @@ CREATE TABLE `cloud`.`cmd_exec_log` (\n   CONSTRAINT `fk_cmd_exec_log_ref__inst_id` FOREIGN KEY (`instance_id`) REFERENCES `vm_instance`(`id`) ON DELETE CASCADE\r\n ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r\n \r\n-CREATE TABLE `cloud`.`network_tags` (\r\n+CREATE TABLE IF NOT EXISTS `cloud`.`network_tags` (\r\n   `id` bigint unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\r\n   `network_id` bigint unsigned NOT NULL COMMENT 'id of the network',\r\n   `tag` varchar(255) NOT NULL COMMENT 'tag',\r",
                "raw_url": "https://github.com/apache/cloudstack/raw/1edf772f92dd645d3e00dfe373ddb8a5ac4b864b/setup/db/db/schema-227to228.sql",
                "sha": "3ce53a22e0fc93dfbd3ce8bdda0be640db4de841",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cloudstack/blob/1edf772f92dd645d3e00dfe373ddb8a5ac4b864b/utils/src/com/cloud/utils/StringUtils.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/com/cloud/utils/StringUtils.java?ref=1edf772f92dd645d3e00dfe373ddb8a5ac4b864b",
                "deletions": 0,
                "filename": "utils/src/com/cloud/utils/StringUtils.java",
                "patch": "@@ -119,4 +119,16 @@ public static String unicodeEscape(String s) {\n     \t}\n     \treturn sb.toString();\n     }\n+    \n+    public static String getMaskedPasswordForDisplay(String password) {\n+    \tif(password == null || password.isEmpty())\n+    \t\treturn \"*\";\n+    \t\n+    \tStringBuffer sb = new StringBuffer();\n+    \tsb.append(password.charAt(0));\n+    \tfor(int i = 1; i < password.length(); i++)\n+    \t\tsb.append(\"*\");\n+    \t\n+    \treturn sb.toString();\n+    }\n }\r",
                "raw_url": "https://github.com/apache/cloudstack/raw/1edf772f92dd645d3e00dfe373ddb8a5ac4b864b/utils/src/com/cloud/utils/StringUtils.java",
                "sha": "f4226efe33385d9a70cd3e0abe184a2a810f0e59",
                "status": "modified"
            }
        ],
        "message": "bug 10480, 10494: NPE fix in VirtualMachineManagerImpl, move keystore upgrade sql to upgrade225to226.sql",
        "parent": "https://github.com/apache/cloudstack/commit/33624efd2f688818d15a9b88b6184ea56db583dc",
        "repo": "cloudstack",
        "unit_tests": [
            "StringUtilsTest.java"
        ]
    },
    "cloudstack_1ee9afd": {
        "bug_id": "cloudstack_1ee9afd",
        "commit": "https://github.com/apache/cloudstack/commit/1ee9afd8df9828f100946e83c31f98eb87de32fc",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/1ee9afd8df9828f100946e83c31f98eb87de32fc/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=1ee9afd8df9828f100946e83c31f98eb87de32fc",
                "deletions": 6,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -822,12 +822,14 @@ public VolumeResponse createVolumeResponse(Volume volume) {\n         Long instanceId = volume.getInstanceId();\n         if (instanceId != null && volume.getState() != Volume.State.Destroy) {\n             VMInstanceVO vm = ApiDBUtils.findVMInstanceById(instanceId);\n-            volResponse.setVirtualMachineId(vm.getId());\n-            volResponse.setVirtualMachineName(vm.getHostName());\n-            UserVm userVm = ApiDBUtils.findUserVmById(vm.getId());\n-            if (userVm != null) {\n-                volResponse.setVirtualMachineDisplayName(userVm.getDisplayName());\n-                volResponse.setVirtualMachineState(vm.getState().toString());\n+            if (vm != null) {\n+                volResponse.setVirtualMachineId(vm.getId());\n+                volResponse.setVirtualMachineName(vm.getHostName());\n+                UserVm userVm = ApiDBUtils.findUserVmById(vm.getId());\n+                if (userVm != null) {\n+                    volResponse.setVirtualMachineDisplayName(userVm.getDisplayName());\n+                    volResponse.setVirtualMachineState(vm.getState().toString());\n+                }\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/1ee9afd8df9828f100946e83c31f98eb87de32fc/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "f0b232b3d88c90013dece8a1de8729684fd91219",
                "status": "modified"
            }
        ],
        "message": "fix NPE when listvolume if vm got destroyed",
        "parent": "https://github.com/apache/cloudstack/commit/671b360df7175c007a221172ec75836b6855bc03",
        "repo": "cloudstack",
        "unit_tests": [
            "ApiResponseHelperTest.java"
        ]
    },
    "cloudstack_1efcc19": {
        "bug_id": "cloudstack_1efcc19",
        "commit": "https://github.com/apache/cloudstack/commit/1efcc19dbd0e609733f93089ce5cb2a5be84209b",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/1efcc19dbd0e609733f93089ce5cb2a5be84209b/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=1efcc19dbd0e609733f93089ce5cb2a5be84209b",
                "deletions": 1,
                "filename": "engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -1748,6 +1748,10 @@ private void orchestrateStorageMigration(final String vmUuid, final StoragePool\n         final HostVO srcHost = _hostDao.findById(srchostId);\n         final Long srcClusterId = srcHost.getClusterId();\n \n+        if (destPool == null) {\n+            throw new CloudRuntimeException(\"Unable to migrate vm: missing destination storage pool\");\n+        }\n+\n         try {\n             stateTransitTo(vm, VirtualMachine.Event.StorageMigrationRequested, null);\n         } catch (final NoTransitionException e) {\n@@ -1763,7 +1767,7 @@ private void orchestrateStorageMigration(final String vmUuid, final StoragePool\n             if (migrationResult) {\n                 //if the vm is migrated to different pod in basic mode, need to reallocate ip\n \n-                if (!vm.getPodIdToDeployIn().equals(destPool.getPodId())) {\n+                if (destPool.getPodId() != null && !destPool.getPodId().equals(vm.getPodIdToDeployIn())) {\n                     final DataCenterDeployment plan = new DataCenterDeployment(vm.getDataCenterId(), destPool.getPodId(), null, null, null, null);\n                     final VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vm, null, null, null, null);\n                     _networkMgr.reallocate(vmProfile, plan);",
                "raw_url": "https://github.com/apache/cloudstack/raw/1efcc19dbd0e609733f93089ce5cb2a5be84209b/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "f972539fc7dd430bfd448200a5daac51f4a393dc",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-8941: fix NPE when migrate vm to other zone-wide pools the second time",
        "parent": "https://github.com/apache/cloudstack/commit/f241455a632345540ccc727513e75473bba4418a",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_1f387b2": {
        "bug_id": "cloudstack_1f387b2",
        "commit": "https://github.com/apache/cloudstack/commit/1f387b298d577d39268be1e27c622ae0a5240492",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/1f387b298d577d39268be1e27c622ae0a5240492/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java?ref=1f387b298d577d39268be1e27c622ae0a5240492",
                "deletions": 0,
                "filename": "server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "patch": "@@ -1162,7 +1162,13 @@ protected int getUpdatedPriority(Network guestNetwork, List<DomainRouterVO> rout\n                     physicalNetworkId = _networkMgr.findPhysicalNetworkId(network.getDataCenterId(), null);\n                 }\n                 PhysicalNetworkServiceProvider provider = _physicalProviderDao.findByServiceProvider(physicalNetworkId, typeString);\n+                if (provider == null) {\n+                    throw new CloudRuntimeException(\"Cannot find service provider \" + typeString + \" in physical network \" + physicalNetworkId);\n+                }\n                 VirtualRouterProvider vrProvider = _vrProviderDao.findByNspIdAndType(provider.getId(), type);\n+                if (vrProvider == null) {\n+                    throw new CloudRuntimeException(\"Cannot find virtual router provider \" + typeString + \" as service provider \" + provider.getId());\n+                }\n                 ServiceOfferingVO routerOffering = _serviceOfferingDao.findById(offering_id);\n                 int retry = 0;\n                 for (HypervisorType hType : supportedHypervisors) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/1f387b298d577d39268be1e27c622ae0a5240492/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "sha": "6363a47961863a67ae32318222430038fa7e075a",
                "status": "modified"
            }
        ],
        "message": "NaaS: Fix NPEs",
        "parent": "https://github.com/apache/cloudstack/commit/3051dc2621df0fc531899ef4b707bf72494b3810",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualNetworkApplianceManagerImplTest.java"
        ]
    },
    "cloudstack_1fa00d1": {
        "bug_id": "cloudstack_1fa00d1",
        "commit": "https://github.com/apache/cloudstack/commit/1fa00d14b11ff1e09c45cef53cddabca03604319",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/1fa00d14b11ff1e09c45cef53cddabca03604319/agent/src/com/cloud/agent/resource/computing/LibvirtComputingResource.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/agent/src/com/cloud/agent/resource/computing/LibvirtComputingResource.java?ref=1fa00d14b11ff1e09c45cef53cddabca03604319",
                "deletions": 6,
                "filename": "agent/src/com/cloud/agent/resource/computing/LibvirtComputingResource.java",
                "patch": "@@ -1988,12 +1988,6 @@ protected Answer execute(StopCommand cmd) {\n         try {\n         \tConnect conn = LibvirtConnection.getConnection();\n         \t\n-        \tString macAddress = null;\n-        \tif (vmName.startsWith(\"i-\")) {\n-        \t    List<InterfaceDef> nics = getInterfaces(conn, vmName);\n-        \t    macAddress = nics.get(0).getMacAddress();\n-        \t}\n-        \t\n         \tdestroy_network_rules_for_vm(conn, vmName);\n             String result = stopVM(conn, vmName, defineOps.UNDEFINE_VM);\n             ",
                "raw_url": "https://github.com/apache/cloudstack/raw/1fa00d14b11ff1e09c45cef53cddabca03604319/agent/src/com/cloud/agent/resource/computing/LibvirtComputingResource.java",
                "sha": "195754bd536efc791675ef36dca525e48285c1cd",
                "status": "modified"
            }
        ],
        "message": "fix NPE when stopvm",
        "parent": "https://github.com/apache/cloudstack/commit/cab765f85e976100b8a5b9477166ee70dfccfab1",
        "repo": "cloudstack",
        "unit_tests": [
            "LibvirtComputingResourceTest.java"
        ]
    },
    "cloudstack_21b1c94": {
        "bug_id": "cloudstack_21b1c94",
        "commit": "https://github.com/apache/cloudstack/commit/21b1c9449a1289db9fa92c2ec76a936006100ab3",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cloudstack/blob/21b1c9449a1289db9fa92c2ec76a936006100ab3/server/src/com/cloud/user/AccountManagerImpl.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/user/AccountManagerImpl.java?ref=21b1c9449a1289db9fa92c2ec76a936006100ab3",
                "deletions": 10,
                "filename": "server/src/com/cloud/user/AccountManagerImpl.java",
                "patch": "@@ -734,16 +734,6 @@ protected boolean cleanupAccount(AccountVO account, long callerUserId, Account c\n             int vlansReleased = _accountGuestVlanMapDao.removeByAccountId(accountId);\n             s_logger.info(\"deleteAccount: Released \" + vlansReleased + \" dedicated guest vlan ranges from account \" + accountId);\n \n-            // Update resource count for this account and for parent domains.\n-            List<ResourceCountVO> resourceCounts = _resourceCountDao.listByOwnerId(accountId, ResourceOwnerType.Account);\n-            for (ResourceCountVO resourceCount : resourceCounts) {\n-                _resourceLimitMgr.decrementResourceCount(accountId, resourceCount.getType(), resourceCount.getCount());\n-            }\n-\n-            // Delete resource count and resource limits entries set for this account (if there are any).\n-            _resourceCountDao.removeEntriesByOwner(accountId, ResourceOwnerType.Account);\n-            _resourceLimitDao.removeEntriesByOwner(accountId, ResourceOwnerType.Account);\n-\n             // release account specific acquired portable IP's. Since all the portable IP's must have been already\n             // disassociated with VPC/guest network (due to deletion), so just mark portable IP as free.\n             List<? extends IpAddress> portableIpsToRelease = _ipAddressDao.listByAccount(accountId);\n@@ -761,6 +751,17 @@ protected boolean cleanupAccount(AccountVO account, long callerUserId, Account c\n                     }\n                 }\n             }\n+\n+            // Updating and deleting the resourceLimit and resourceCount should be the last step in cleanupAccount process.\n+            // Update resource count for this account and for parent domains.\n+            List<ResourceCountVO> resourceCounts = _resourceCountDao.listByOwnerId(accountId, ResourceOwnerType.Account);\n+            for (ResourceCountVO resourceCount : resourceCounts) {\n+                _resourceLimitMgr.decrementResourceCount(accountId, resourceCount.getType(), resourceCount.getCount());\n+            }\n+\n+            // Delete resource count and resource limits entries set for this account (if there are any).\n+            _resourceCountDao.removeEntriesByOwner(accountId, ResourceOwnerType.Account);\n+            _resourceLimitDao.removeEntriesByOwner(accountId, ResourceOwnerType.Account);\n             return true;\n         } catch (Exception ex) {\n             s_logger.warn(\"Failed to cleanup account \" + account + \" due to \", ex);",
                "raw_url": "https://github.com/apache/cloudstack/raw/21b1c9449a1289db9fa92c2ec76a936006100ab3/server/src/com/cloud/user/AccountManagerImpl.java",
                "sha": "512f9130a06ed72857d394db3a897e0abfecb605",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-3376: NPE: resource count calculation from the account manager on account cleanup\n\nThis issue is happing because of the steps the code follow to cleanup the account.\nThe cleanupAccount was deleting the entries from the resource_limit and\nresource_count table and performing further cleaning afterwards. Ideally, deletion\nof entries from resourceLimit and resourceCount should be the last step in\ncleanupAccount process.\n\nSigned-off-by: Prasanna Santhanam <tsp@apache.org>",
        "parent": "https://github.com/apache/cloudstack/commit/5fbec76c8a7a57c01d456ab0af23dcb44e29ca14",
        "repo": "cloudstack",
        "unit_tests": [
            "AccountManagerImplTest.java"
        ]
    },
    "cloudstack_22ee711": {
        "bug_id": "cloudstack_22ee711",
        "commit": "https://github.com/apache/cloudstack/commit/22ee7117f52ef639009711ce015ac7c5a64b8751",
        "file": [
            {
                "additions": 323,
                "blob_url": "https://github.com/apache/cloudstack/blob/22ee7117f52ef639009711ce015ac7c5a64b8751/server/src/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java",
                "changes": 636,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java?ref=22ee7117f52ef639009711ce015ac7c5a64b8751",
                "deletions": 313,
                "filename": "server/src/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java",
                "patch": "@@ -146,11 +146,11 @@\n public class ConsoleProxyManagerImpl implements ConsoleProxyManager, ConsoleProxyService, Manager, AgentHook, VirtualMachineGuru<ConsoleProxyVO>, SystemVmLoadScanHandler<Long> {\n     private static final Logger s_logger = Logger.getLogger(ConsoleProxyManagerImpl.class);\n \n-    private static final int DEFAULT_CAPACITY_SCAN_INTERVAL = 30000;    \t\t// 30 seconds\n-    private static final int ACQUIRE_GLOBAL_LOCK_TIMEOUT_FOR_SYNC = 180;        // 3 minutes\n+    private static final int DEFAULT_CAPACITY_SCAN_INTERVAL = 30000; // 30 seconds\n+    private static final int ACQUIRE_GLOBAL_LOCK_TIMEOUT_FOR_SYNC = 180; // 3 minutes\n \n-    private static final int API_WAIT_TIMEOUT = 5000;   // 5 seconds (in milliseconds)\n-    private static final int STARTUP_DELAY = 60000;     // 60 seconds\n+    private static final int API_WAIT_TIMEOUT = 5000; // 5 seconds (in milliseconds)\n+    private static final int STARTUP_DELAY = 60000; // 60 seconds\n \n     private int _consoleProxyPort = ConsoleProxyManager.DEFAULT_PROXY_VNC_PORT;\n \n@@ -160,32 +160,48 @@\n     private String _name;\n     private Adapters<ConsoleProxyAllocator> _consoleProxyAllocators;\n \n-    @Inject private ConsoleProxyDao _consoleProxyDao;\n-    @Inject private DataCenterDao _dcDao;\n-    @Inject private VMTemplateDao _templateDao;\n-    @Inject private HostPodDao _podDao;\n-    @Inject private HostDao _hostDao;\n-    @Inject private ConfigurationDao _configDao;\n-    @Inject private CertificateDao _certDao;\n-    @Inject private VMInstanceDao _instanceDao;\n-    @Inject private VMTemplateHostDao _vmTemplateHostDao;\n-    @Inject private AgentManager _agentMgr;\n-    @Inject private StorageManager _storageMgr;\n-    @Inject NetworkManager _networkMgr;\n-    @Inject AccountManager _accountMgr;\n-    @Inject ServiceOfferingDao _offeringDao;\n-    @Inject NetworkOfferingDao _networkOfferingDao;\n-    \n+    @Inject\n+    private ConsoleProxyDao _consoleProxyDao;\n+    @Inject\n+    private DataCenterDao _dcDao;\n+    @Inject\n+    private VMTemplateDao _templateDao;\n+    @Inject\n+    private HostPodDao _podDao;\n+    @Inject\n+    private HostDao _hostDao;\n+    @Inject\n+    private ConfigurationDao _configDao;\n+    @Inject\n+    private CertificateDao _certDao;\n+    @Inject\n+    private VMInstanceDao _instanceDao;\n+    @Inject\n+    private VMTemplateHostDao _vmTemplateHostDao;\n+    @Inject\n+    private AgentManager _agentMgr;\n+    @Inject\n+    private StorageManager _storageMgr;\n+    @Inject\n+    NetworkManager _networkMgr;\n+    @Inject\n+    AccountManager _accountMgr;\n+    @Inject\n+    ServiceOfferingDao _offeringDao;\n+    @Inject\n+    NetworkOfferingDao _networkOfferingDao;\n+\n     private ConsoleProxyListener _listener;\n \n     private ServiceOfferingVO _serviceOffering;\n-    \n+\n     NetworkOfferingVO _publicNetworkOffering;\n     NetworkOfferingVO _managementNetworkOffering;\n     NetworkOfferingVO _linkLocalNetworkOffering;\n \n-    @Inject private VirtualMachineManager _itMgr;\n-    \n+    @Inject\n+    private VirtualMachineManager _itMgr;\n+\n     private final ExecutorService _requestHandlerScheduler = Executors.newCachedThreadPool(new NamedThreadFactory(\"Request-handler\"));\n \n     private long _capacityScanInterval = DEFAULT_CAPACITY_SCAN_INTERVAL;\n@@ -198,16 +214,16 @@\n     private boolean _use_storage_vm;\n     private boolean _disable_rp_filter = false;\n     private String _instance;\n-    \n+\n     private int _proxySessionTimeoutValue = DEFAULT_PROXY_SESSION_TIMEOUT;\n     private boolean _sslEnabled = false;\n \n     // global load picture at zone basis\n     private SystemVmLoadScanner<Long> _loadScanner;\n-    private Map<Long, ZoneHostInfo> _zoneHostInfoMap;\t\t\t\t\t// map <zone id, info about running host in zone>\n-    private Map<Long, ConsoleProxyLoadInfo> _zoneProxyCountMap; \t\t// map <zone id, info about proxy VMs count in zone> \n-    private Map<Long, ConsoleProxyLoadInfo> _zoneVmCountMap; \t\t\t// map <zone id, info about running VMs count in zone>\n-    \n+    private Map<Long, ZoneHostInfo> _zoneHostInfoMap; // map <zone id, info about running host in zone>\n+    private Map<Long, ConsoleProxyLoadInfo> _zoneProxyCountMap; // map <zone id, info about proxy VMs count in zone>\n+    private Map<Long, ConsoleProxyLoadInfo> _zoneVmCountMap; // map <zone id, info about running VMs count in zone>\n+\n     private final GlobalLock _allocProxyLock = GlobalLock.getInternLock(getAllocProxyLockName());\n \n     @Override\n@@ -241,17 +257,17 @@ public void run() {\n                 s_logger.info(\"Waiting for console proxy assignment is interrupted\");\n             }\n         }\n-        \n+\n         ConsoleProxyVO proxy = result.second();\n         if (proxy == null) {\n             return null;\n         }\n-        \n-        if(proxy.getPublicIpAddress() == null) {\n-        \ts_logger.warn(\"Assigned console proxy does not have a valid public IP address\");\n-        \treturn null;\n+\n+        if (proxy.getPublicIpAddress() == null) {\n+            s_logger.warn(\"Assigned console proxy does not have a valid public IP address\");\n+            return null;\n         }\n-        \n+\n         return new ConsoleProxyInfo(proxy.isSslEnabled(), proxy.getPublicIpAddress(), _consoleProxyPort, proxy.getPort(), _configDao.getValue(\"consoleproxy.url.domain\"));\n     }\n \n@@ -271,8 +287,7 @@ public ConsoleProxyVO doAssignProxy(long dataCenterId, long vmId) {\n                 _allocProxyLock.unlock();\n             }\n         } else {\n-            s_logger.error(\"Unable to acquire synchronization lock to get/allocate proxy resource for vm :\" + vmId\n-                    + \". Previous console proxy allocation is taking too long\");\n+            s_logger.error(\"Unable to acquire synchronization lock to get/allocate proxy resource for vm :\" + vmId + \". Previous console proxy allocation is taking too long\");\n         }\n \n         if (proxy == null) {\n@@ -302,7 +317,7 @@ public ConsoleProxyVO doAssignProxy(long dataCenterId, long vmId) {\n             } else {\n                 proxy.setPort(80);\n             }\n-            \n+\n             return proxy;\n         }\n     }\n@@ -431,7 +446,7 @@ private boolean hasPreviousSession(ConsoleProxyVO proxy, VMInstanceVO vm) {\n             return false;\n         }\n     }\n-    \n+\n     @Override\n     public ConsoleProxyVO startProxy(long proxyVmId) {\n         try {\n@@ -441,18 +456,19 @@ public ConsoleProxyVO startProxy(long proxyVmId) {\n             if (proxy.getState() == VirtualMachine.State.Running) {\n                 return proxy;\n             }\n-            \n+\n             String restart = _configDao.getValue(Config.ConsoleProxyRestart.key());\n-            if(restart != null && restart.equalsIgnoreCase(\"false\")) {\n+            if (restart != null && restart.equalsIgnoreCase(\"false\")) {\n                 return null;\n             }\n-            \n-            if(proxy.getState() == VirtualMachine.State.Stopped) {\n+\n+            if (proxy.getState() == VirtualMachine.State.Stopped) {\n                 return _itMgr.start(proxy, null, systemUser, systemAcct);\n             }\n-        \n+\n             // For VMs that are in Stopping, Starting, Migrating state, let client to wait by returning null\n-            // as sooner or later, Starting/Migrating state will be transited to Running and Stopping will be transited to Stopped to allow\n+            // as sooner or later, Starting/Migrating state will be transited to Running and Stopping will be transited to\n+            // Stopped to allow\n             // Starting of it\n             return null;\n         } catch (StorageUnavailableException e) {\n@@ -464,7 +480,7 @@ public ConsoleProxyVO startProxy(long proxyVmId) {\n         } catch (ResourceUnavailableException e) {\n             s_logger.warn(\"Exception while trying to start console proxy\", e);\n             return null;\n-        } catch(CloudRuntimeException e) {\n+        } catch (CloudRuntimeException e) {\n             s_logger.warn(\"Runtime Exception while trying to start console proxy\", e);\n             return null;\n         }\n@@ -508,8 +524,9 @@ public ConsoleProxyVO assignProxyFromRunningPool(long dataCenterId) {\n     }\n \n     public ConsoleProxyVO assignProxyFromStoppedPool(long dataCenterId) {\n-        \n-        // practically treat all console proxy VM that is not in Running state but can be entering into Running state as candidates\n+\n+        // practically treat all console proxy VM that is not in Running state but can be entering into Running state as\n+        // candidates\n         // this is to prevent launching unneccessary console proxy VMs because of temporarily unavailable state\n         List<ConsoleProxyVO> l = _consoleProxyDao.getProxyListInStates(dataCenterId, State.Starting, State.Stopped, State.Migrating, State.Stopping);\n         if (l != null && l.size() > 0) {\n@@ -524,13 +541,13 @@ public ConsoleProxyVO startNew(long dataCenterId) throws ConcurrentOperationExce\n         if (s_logger.isDebugEnabled()) {\n             s_logger.debug(\"Assign console proxy from a newly started instance for request from data center : \" + dataCenterId);\n         }\n-        \n-        if(!allowToLaunchNew(dataCenterId)) {\n+\n+        if (!allowToLaunchNew(dataCenterId)) {\n             s_logger.warn(\"The number of launched console proxy on zone \" + dataCenterId + \" has reached to limit\");\n             return null;\n         }\n         HypervisorType currentHyp = currentHypervisorType(dataCenterId);\n-        \n+\n         Map<String, Object> context = createProxyInstance(dataCenterId, currentHyp);\n \n         long proxyVmId = (Long) context.get(\"proxyVmId\");\n@@ -541,7 +558,7 @@ public ConsoleProxyVO startNew(long dataCenterId) throws ConcurrentOperationExce\n             return null;\n         }\n \n-        ConsoleProxyVO proxy = _consoleProxyDao.findById(proxyVmId); \n+        ConsoleProxyVO proxy = _consoleProxyDao.findById(proxyVmId);\n         if (proxy != null) {\n             SubscriptionMgr.getInstance().notifySubscribers(ConsoleProxyManager.ALERT_SUBJECT, this,\n                     new ConsoleProxyAlertEventArgs(ConsoleProxyAlertEventArgs.PROXY_CREATED, dataCenterId, proxy.getId(), proxy, null));\n@@ -551,11 +568,8 @@ public ConsoleProxyVO startNew(long dataCenterId) throws ConcurrentOperationExce\n                 s_logger.debug(\"Unable to allocate console proxy storage, remove the console proxy record from DB, proxy id: \" + proxyVmId);\n             }\n \n-            SubscriptionMgr.getInstance().notifySubscribers(\n-                    ConsoleProxyManager.ALERT_SUBJECT,\n-                    this,\n-                    new ConsoleProxyAlertEventArgs(ConsoleProxyAlertEventArgs.PROXY_CREATE_FAILURE, dataCenterId, proxyVmId, null,\n-                            \"Unable to allocate storage\"));\n+            SubscriptionMgr.getInstance().notifySubscribers(ConsoleProxyManager.ALERT_SUBJECT, this,\n+                    new ConsoleProxyAlertEventArgs(ConsoleProxyAlertEventArgs.PROXY_CREATE_FAILURE, dataCenterId, proxyVmId, null, \"Unable to allocate storage\"));\n         }\n         return null;\n     }\n@@ -566,14 +580,14 @@ public ConsoleProxyVO startNew(long dataCenterId) throws ConcurrentOperationExce\n         String name = VirtualMachineName.getConsoleProxyName(id, _instance);\n         DataCenterVO dc = _dcDao.findById(dataCenterId);\n         Account systemAcct = _accountMgr.getSystemAccount();\n-        \n+\n         DataCenterDeployment plan = new DataCenterDeployment(dataCenterId);\n         List<NetworkOfferingVO> defaultOffering = _networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemPublicNetwork);\n \n         if (dc.getNetworkType() == NetworkType.Basic || dc.isSecurityGroupEnabled()) {\n             defaultOffering = _networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemGuestNetwork);\n         }\n-        \n+\n         List<NetworkOfferingVO> offerings = _networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemControlNetwork, NetworkOfferingVO.SystemManagementNetwork);\n         List<Pair<NetworkVO, NicProfile>> networks = new ArrayList<Pair<NetworkVO, NicProfile>>(offerings.size() + 1);\n         NicProfile defaultNic = new NicProfile();\n@@ -583,21 +597,22 @@ public ConsoleProxyVO startNew(long dataCenterId) throws ConcurrentOperationExce\n         for (NetworkOfferingVO offering : offerings) {\n             networks.add(new Pair<NetworkVO, NicProfile>(_networkMgr.setupNetwork(systemAcct, offering, plan, null, null, false, false).get(0), null));\n         }\n-        \n+\n         VMTemplateVO template = _templateDao.findSystemVMTemplate(dataCenterId, desiredHyp);\n         if (template == null) {\n             s_logger.debug(\"Can't find a template to start\");\n             throw new CloudRuntimeException(\"Insufficient capacity exception\");\n         }\n-        \n-        ConsoleProxyVO proxy = new ConsoleProxyVO(id, _serviceOffering.getId(), name, template.getId(), template.getHypervisorType(), template.getGuestOSId(), dataCenterId, systemAcct.getDomainId(), systemAcct.getId(), 0);\n+\n+        ConsoleProxyVO proxy = new ConsoleProxyVO(id, _serviceOffering.getId(), name, template.getId(), template.getHypervisorType(), template.getGuestOSId(), dataCenterId, systemAcct.getDomainId(),\n+                systemAcct.getId(), 0);\n         try {\n             proxy = _itMgr.allocate(proxy, template, _serviceOffering, networks, plan, null, systemAcct);\n         } catch (InsufficientCapacityException e) {\n             s_logger.warn(\"InsufficientCapacity\", e);\n             throw new CloudRuntimeException(\"Insufficient capacity exception\", e);\n         }\n-        \n+\n         Map<String, Object> context = new HashMap<String, Object>();\n         context.put(\"dc\", dc);\n         HostPodVO pod = _podDao.findById(proxy.getPodId());\n@@ -606,7 +621,7 @@ public ConsoleProxyVO startNew(long dataCenterId) throws ConcurrentOperationExce\n \n         return context;\n     }\n-    \n+\n     private ConsoleProxyAllocator getCurrentAllocator() {\n         // for now, only one adapter is supported\n         Enumeration<ConsoleProxyAllocator> it = _consoleProxyAllocators.enumeration();\n@@ -692,37 +707,37 @@ public void onLoadReport(ConsoleProxyLoadReportCommand cmd) {\n     @Override\n     public AgentControlAnswer onConsoleAccessAuthentication(ConsoleAccessAuthenticationCommand cmd) {\n         long vmId = 0;\n-        \n-\t\tString ticketInUrl = cmd.getTicket();\n-\t\tif(ticketInUrl == null) {\n-\t\t\ts_logger.error(\"Access ticket could not be found, you could be running an old version of console proxy. vmId: \" + cmd.getVmId());\n-\t\t\treturn new ConsoleAccessAuthenticationAnswer(cmd, false);\n-\t\t}\n-\t\t\n-\t\tif(s_logger.isDebugEnabled()) {\n+\n+        String ticketInUrl = cmd.getTicket();\n+        if (ticketInUrl == null) {\n+            s_logger.error(\"Access ticket could not be found, you could be running an old version of console proxy. vmId: \" + cmd.getVmId());\n+            return new ConsoleAccessAuthenticationAnswer(cmd, false);\n+        }\n+\n+        if (s_logger.isDebugEnabled()) {\n             s_logger.debug(\"Console authentication. Ticket in url for \" + cmd.getHost() + \":\" + cmd.getPort() + \"-\" + cmd.getVmId() + \" is \" + ticketInUrl);\n         }\n \n         String ticket = ConsoleProxyServlet.genAccessTicket(cmd.getHost(), cmd.getPort(), cmd.getSid(), cmd.getVmId());\n-        if(s_logger.isDebugEnabled()) {\n+        if (s_logger.isDebugEnabled()) {\n             s_logger.debug(\"Console authentication. Ticket in 1 minute boundary for \" + cmd.getHost() + \":\" + cmd.getPort() + \"-\" + cmd.getVmId() + \" is \" + ticket);\n         }\n-        \n-\t\tif(!ticket.equals(ticketInUrl)) {\n-\t\t\tDate now = new Date();\n-\t\t\t// considering of minute round-up\n-\t\t\tString minuteEarlyTicket = ConsoleProxyServlet.genAccessTicket(cmd.getHost(), cmd.getPort(), cmd.getSid(), cmd.getVmId(), \n-\t\t\t\tnew Date(now.getTime() - 60*1000));\n \n-\t\t\tif(s_logger.isDebugEnabled()) {\n+        if (!ticket.equals(ticketInUrl)) {\n+            Date now = new Date();\n+            // considering of minute round-up\n+            String minuteEarlyTicket = ConsoleProxyServlet.genAccessTicket(cmd.getHost(), cmd.getPort(), cmd.getSid(), cmd.getVmId(), new Date(now.getTime() - 60 * 1000));\n+\n+            if (s_logger.isDebugEnabled()) {\n                 s_logger.debug(\"Console authentication. Ticket in 2-minute boundary for \" + cmd.getHost() + \":\" + cmd.getPort() + \"-\" + cmd.getVmId() + \" is \" + minuteEarlyTicket);\n             }\n-\t\t\t\n-\t\t\tif(!minuteEarlyTicket.equals(ticketInUrl)) {\n-\t\t\t\ts_logger.error(\"Access ticket expired or has been modified. vmId: \" + cmd.getVmId() + \"ticket in URL: \" + ticketInUrl + \", tickets to check against: \" + ticket + \",\" + minuteEarlyTicket);\n-\t\t\t\treturn new ConsoleAccessAuthenticationAnswer(cmd, false);\n-\t\t\t}\n-\t\t}\n+\n+            if (!minuteEarlyTicket.equals(ticketInUrl)) {\n+                s_logger.error(\"Access ticket expired or has been modified. vmId: \" + cmd.getVmId() + \"ticket in URL: \" + ticketInUrl + \", tickets to check against: \" + ticket + \",\"\n+                        + minuteEarlyTicket);\n+                return new ConsoleAccessAuthenticationAnswer(cmd, false);\n+            }\n+        }\n \n         if (cmd.getVmId() != null && cmd.getVmId().isEmpty()) {\n             if (s_logger.isDebugEnabled()) {\n@@ -769,32 +784,32 @@ public AgentControlAnswer onConsoleAccessAuthentication(ConsoleAccessAuthenticat\n \n     @Override\n     public void onAgentConnect(HostVO host, StartupCommand cmd) {\n-//        if (host.getType() == Type.ConsoleProxy) {\n-//            // TODO we can use this event to mark the proxy is up and\n-//            // functioning instead of\n-//            // pinging the console proxy VM command port\n-//            //\n-//            // for now, just log a message\n-//            if (s_logger.isInfoEnabled()) {\n-//                s_logger.info(\"Console proxy agent is connected. proxy: \" + host.getName());\n-//            }\n-//\n-//            /* update public/private ip address */\n-//            if (_IpAllocator != null && _IpAllocator.exteralIpAddressAllocatorEnabled()) {\n-//                try {\n-//                    ConsoleProxyVO console = findConsoleProxyByHost(host);\n-//                    if (console == null) {\n-//                        s_logger.debug(\"Can't find console proxy \");\n-//                        return;\n-//                    }\n-//                    console.setPrivateIpAddress(cmd.getPrivateIpAddress());\n-//                    console.setPublicIpAddress(cmd.getPublicIpAddress());\n-//                    console.setPublicNetmask(cmd.getPublicNetmask());\n-//                    _consoleProxyDao.persist(console);\n-//                } catch (NumberFormatException e) {\n-//                }\n-//            }\n-//        }\n+        // if (host.getType() == Type.ConsoleProxy) {\n+        // // TODO we can use this event to mark the proxy is up and\n+        // // functioning instead of\n+        // // pinging the console proxy VM command port\n+        // //\n+        // // for now, just log a message\n+        // if (s_logger.isInfoEnabled()) {\n+        // s_logger.info(\"Console proxy agent is connected. proxy: \" + host.getName());\n+        // }\n+        //\n+        // /* update public/private ip address */\n+        // if (_IpAllocator != null && _IpAllocator.exteralIpAddressAllocatorEnabled()) {\n+        // try {\n+        // ConsoleProxyVO console = findConsoleProxyByHost(host);\n+        // if (console == null) {\n+        // s_logger.debug(\"Can't find console proxy \");\n+        // return;\n+        // }\n+        // console.setPrivateIpAddress(cmd.getPrivateIpAddress());\n+        // console.setPublicIpAddress(cmd.getPublicIpAddress());\n+        // console.setPublicNetmask(cmd.getPublicNetmask());\n+        // _consoleProxyDao.persist(console);\n+        // } catch (NumberFormatException e) {\n+        // }\n+        // }\n+        // }\n     }\n \n     @Override\n@@ -832,17 +847,13 @@ public void onAgentDisconnect(long agentId, com.cloud.host.Status state) {\n                         // continue on forever\n \n                         /*\n-                         * _capacityScanScheduler.execute(new Runnable() {\n-                         * public void run() { if(s_logger.isInfoEnabled())\n-                         * s_logger.info(\"Stop console proxy \" + proxy.getName()\n-                         * +\n-                         * \" VM because of that the agent running inside it has disconnected\"\n-                         * ); stopProxy(proxy.getId()); } });\n+                         * _capacityScanScheduler.execute(new Runnable() { public void run() { if(s_logger.isInfoEnabled())\n+                         * s_logger.info(\"Stop console proxy \" + proxy.getName() +\n+                         * \" VM because of that the agent running inside it has disconnected\" ); stopProxy(proxy.getId()); } });\n                          */\n                     } else {\n                         if (s_logger.isInfoEnabled()) {\n-                            s_logger.info(\"Console proxy agent disconnected but corresponding console proxy VM no longer exists in DB, proxy: \"\n-                                    + name);\n+                            s_logger.info(\"Console proxy agent disconnected but corresponding console proxy VM no longer exists in DB, proxy: \" + name);\n                         }\n                     }\n                 } else {\n@@ -851,32 +862,30 @@ public void onAgentDisconnect(long agentId, com.cloud.host.Status state) {\n             }\n         }\n     }\n-    \n+\n     private boolean reserveStandbyCapacity() {\n         String value = _configDao.getValue(Config.SystemVMAutoReserveCapacity.key());\n-        if(value != null && value.equalsIgnoreCase(\"true\")) {\n+        if (value != null && value.equalsIgnoreCase(\"true\")) {\n             return true;\n         }\n-        \n+\n         return false;\n     }\n-    \n+\n     private boolean allowToLaunchNew(long dcId) {\n-        List<ConsoleProxyVO> l = _consoleProxyDao.getProxyListInStates(dcId, VirtualMachine.State.Starting, \n-          VirtualMachine.State.Running, VirtualMachine.State.Stopping, VirtualMachine.State.Stopped,\n-          VirtualMachine.State.Migrating, VirtualMachine.State.Shutdowned, VirtualMachine.State.Unknown);\n-        \n+        List<ConsoleProxyVO> l = _consoleProxyDao.getProxyListInStates(dcId, VirtualMachine.State.Starting, VirtualMachine.State.Running, VirtualMachine.State.Stopping, VirtualMachine.State.Stopped,\n+                VirtualMachine.State.Migrating, VirtualMachine.State.Shutdowned, VirtualMachine.State.Unknown);\n+\n         String value = _configDao.getValue(Config.ConsoleProxyLaunchMax.key());\n         int launchLimit = NumbersUtil.parseInt(value, 10);\n         return l.size() < launchLimit;\n     }\n-    \n+\n     private HypervisorType currentHypervisorType(long dcId) {\n-        List<ConsoleProxyVO> l = _consoleProxyDao.getProxyListInStates(dcId, VirtualMachine.State.Starting, \n-          VirtualMachine.State.Running, VirtualMachine.State.Stopping, VirtualMachine.State.Stopped,\n-          VirtualMachine.State.Migrating, VirtualMachine.State.Shutdowned, VirtualMachine.State.Unknown);\n-        \n-        return l.size() > 0? l.get(0).getHypervisorType():HypervisorType.Any;\n+        List<ConsoleProxyVO> l = _consoleProxyDao.getProxyListInStates(dcId, VirtualMachine.State.Starting, VirtualMachine.State.Running, VirtualMachine.State.Stopping, VirtualMachine.State.Stopped,\n+                VirtualMachine.State.Migrating, VirtualMachine.State.Shutdowned, VirtualMachine.State.Unknown);\n+\n+        return l.size() > 0 ? l.get(0).getHypervisorType() : HypervisorType.Any;\n     }\n \n     private boolean checkCapacity(ConsoleProxyLoadInfo proxyCountInfo, ConsoleProxyLoadInfo vmCountInfo) {\n@@ -901,10 +910,10 @@ private void allocCapacity(long dataCenterId) {\n                     if (s_logger.isInfoEnabled()) {\n                         s_logger.info(\"No stopped console proxy is available, need to allocate a new console proxy\");\n                     }\n-        \n+\n                     try {\n                         proxy = startNew(dataCenterId);\n-                    }  catch (ConcurrentOperationException e) {\n+                    } catch (ConcurrentOperationException e) {\n                         s_logger.info(\"Concurrent Operation caught \" + e);\n                     }\n                 } else {\n@@ -916,7 +925,7 @@ private void allocCapacity(long dataCenterId) {\n                 _allocProxyLock.unlock();\n             }\n         } else {\n-            if(s_logger.isInfoEnabled()) {\n+            if (s_logger.isInfoEnabled()) {\n                 s_logger.info(\"Unable to acquire proxy allocation lock, skip for next time\");\n             }\n         }\n@@ -1007,7 +1016,7 @@ public boolean stop() {\n         if (s_logger.isInfoEnabled()) {\n             s_logger.info(\"Stop console proxy manager\");\n         }\n-        \n+\n         this._loadScanner.stop();\n         _allocProxyLock.releaseRef();\n         return true;\n@@ -1030,7 +1039,7 @@ public boolean stopProxy(long proxyVmId) {\n             }\n             return false;\n         }\n-        \n+\n         try {\n             return _itMgr.stop(proxy, _accountMgr.getSystemUser(), _accountMgr.getSystemAccount());\n         } catch (ResourceUnavailableException e) {\n@@ -1056,11 +1065,8 @@ public boolean rebootProxy(long proxyVmId) {\n                     s_logger.debug(\"Successfully reboot console proxy \" + proxy.getName());\n                 }\n \n-                SubscriptionMgr.getInstance().notifySubscribers(\n-                    ConsoleProxyManager.ALERT_SUBJECT,\n-                    this,\n-                    new ConsoleProxyAlertEventArgs(ConsoleProxyAlertEventArgs.PROXY_REBOOTED, proxy.getDataCenterId(), proxy.getId(),\n-                    proxy, null));\n+                SubscriptionMgr.getInstance().notifySubscribers(ConsoleProxyManager.ALERT_SUBJECT, this,\n+                        new ConsoleProxyAlertEventArgs(ConsoleProxyAlertEventArgs.PROXY_REBOOTED, proxy.getDataCenterId(), proxy.getId(), proxy, null));\n \n                 return true;\n             } else {\n@@ -1089,7 +1095,7 @@ public boolean destroyProxy(long vmId) {\n     private String getAllocProxyLockName() {\n         return \"consoleproxy.alloc\";\n     }\n-    \n+\n     @Override\n     public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n         if (s_logger.isInfoEnabled()) {\n@@ -1108,7 +1114,7 @@ public boolean configure(String name, Map<String, Object> params) throws Configu\n \n         _proxyRamSize = NumbersUtil.parseInt(configs.get(Config.ConsoleProxyRamSize.key()), DEFAULT_PROXY_VM_RAMSIZE);\n         _proxyCpuMHz = NumbersUtil.parseInt(configs.get(Config.ConsoleProxyCpuMHz.key()), DEFAULT_PROXY_VM_CPUMHZ);\n-        \n+\n         String value = configs.get(Config.ConsoleProxyCmdPort.key());\n         value = configs.get(\"consoleproxy.sslEnabled\");\n         if (value != null && value.equalsIgnoreCase(\"true\")) {\n@@ -1126,9 +1132,9 @@ public boolean configure(String name, Map<String, Object> params) throws Configu\n         if (value != null) {\n             _consoleProxyPort = NumbersUtil.parseInt(value, ConsoleProxyManager.DEFAULT_PROXY_VNC_PORT);\n         }\n-        \n+\n         value = configs.get(Config.ConsoleProxyDisableRpFilter.key());\n-        if(value != null && value.equalsIgnoreCase(\"true\")) {\n+        if (value != null && value.equalsIgnoreCase(\"true\")) {\n             _disable_rp_filter = true;\n         }\n \n@@ -1141,7 +1147,7 @@ public boolean configure(String name, Map<String, Object> params) throws Configu\n         if (value != null && value.equalsIgnoreCase(\"true\")) {\n             _use_storage_vm = true;\n         }\n-        \n+\n         if (s_logger.isInfoEnabled()) {\n             s_logger.info(\"Console proxy max session soft limit : \" + _capacityPerProxy);\n             s_logger.info(\"Console proxy standby capacity : \" + _standbyCapacity);\n@@ -1178,23 +1184,23 @@ public boolean configure(String name, Map<String, Object> params) throws Configu\n \n         _loadScanner = new SystemVmLoadScanner<Long>(this);\n         _loadScanner.initScan(STARTUP_DELAY, _capacityScanInterval);\n-        \n+\n         if (s_logger.isInfoEnabled()) {\n             s_logger.info(\"Console Proxy Manager is configured.\");\n         }\n         return true;\n     }\n \n     @Override\n-    public boolean destroyConsoleProxy(DestroyConsoleProxyCmd cmd) throws ServerApiException{\n+    public boolean destroyConsoleProxy(DestroyConsoleProxyCmd cmd) throws ServerApiException {\n         Long proxyId = cmd.getId();\n-        \n+\n         // verify parameters\n         ConsoleProxyVO proxy = _consoleProxyDao.findById(proxyId);\n         if (proxy == null) {\n             throw new InvalidParameterValueException(\"unable to find a console proxy with id \" + proxyId);\n         }\n-        \n+\n         return destroyProxy(proxyId);\n     }\n \n@@ -1203,7 +1209,7 @@ protected ConsoleProxyManagerImpl() {\n \n     @Override\n     public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<ConsoleProxyVO> profile, DeployDestination dest, ReservationContext context) {\n-    \tStringBuilder buf = profile.getBootArgsBuilder();\n+        StringBuilder buf = profile.getBootArgsBuilder();\n         buf.append(\" template=domP type=consoleproxy\");\n         buf.append(\" host=\").append(_mgmt_host);\n         buf.append(\" port=\").append(_mgmt_port);\n@@ -1215,118 +1221,122 @@ public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<ConsoleProxyV\n         buf.append(\" pod=\").append(dest.getPod().getId());\n         buf.append(\" guid=Proxy.\").append(profile.getId());\n         buf.append(\" proxy_vm=\").append(profile.getId());\n-        if(_disable_rp_filter) {\n+        if (_disable_rp_filter) {\n             buf.append(\" disable_rp_filter=true\");\n         }\n \n         boolean externalDhcp = false;\n         String externalDhcpStr = _configDao.getValue(\"direct.attach.network.externalIpAllocator.enabled\");\n-        if(externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(\"true\")) {\n+        if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(\"true\")) {\n             externalDhcp = true;\n         }\n-        \n+\n         for (NicProfile nic : profile.getNics()) {\n             int deviceId = nic.getDeviceId();\n-            if(nic.getIp4Address() == null) {\n-\t            buf.append(\" eth\").append(deviceId).append(\"ip=\").append(\"0.0.0.0\");\n-\t            buf.append(\" eth\").append(deviceId).append(\"mask=\").append(\"0.0.0.0\");\n+            if (nic.getIp4Address() == null) {\n+                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(\"0.0.0.0\");\n+                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(\"0.0.0.0\");\n             } else {\n-\t            buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIp4Address());\n-\t            buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getNetmask());\n+                buf.append(\" eth\").append(deviceId).append(\"ip=\").append(nic.getIp4Address());\n+                buf.append(\" eth\").append(deviceId).append(\"mask=\").append(nic.getNetmask());\n             }\n-            \n+\n             if (nic.isDefaultNic()) {\n                 buf.append(\" gateway=\").append(nic.getGateway());\n                 buf.append(\" dns1=\").append(nic.getDns1());\n                 if (nic.getDns2() != null) {\n                     buf.append(\" dns2=\").append(nic.getDns2());\n                 }\n             }\n-            \n+\n             if (nic.getTrafficType() == TrafficType.Management) {\n-            \tString mgmt_cidr = _configDao.getValue(Config.ManagementNetwork.key());\n-            \tif (NetUtils.isValidCIDR(mgmt_cidr)) {\n-            \t    buf.append(\" mgmtcidr=\").append(mgmt_cidr);\n-            \t}\n+                String mgmt_cidr = _configDao.getValue(Config.ManagementNetwork.key());\n+                if (NetUtils.isValidCIDR(mgmt_cidr)) {\n+                    buf.append(\" mgmtcidr=\").append(mgmt_cidr);\n+                }\n                 buf.append(\" localgw=\").append(dest.getPod().getGateway());\n-            } \n+            }\n         }\n \n-\t\t/*External DHCP mode*/\n-\t\tif(externalDhcp) {\n+        /* External DHCP mode */\n+        if (externalDhcp) {\n             buf.append(\" bootproto=dhcp\");\n         }\n-        \n+\n         String bootArgs = buf.toString();\n         if (s_logger.isDebugEnabled()) {\n             s_logger.debug(\"Boot Args for \" + profile + \": \" + bootArgs);\n         }\n-        \n+\n         return true;\n     }\n \n     @Override\n     public boolean finalizeDeployment(Commands cmds, VirtualMachineProfile<ConsoleProxyVO> profile, DeployDestination dest, ReservationContext context) {\n-    \t\n+\n         finalizeCommandsOnStart(cmds, profile);\n-        \n+\n         ConsoleProxyVO proxy = profile.getVirtualMachine();\n         DataCenter dc = dest.getDataCenter();\n         List<NicProfile> nics = profile.getNics();\n         for (NicProfile nic : nics) {\n-        \tif ((nic.getTrafficType() == TrafficType.Public && dc.getNetworkType() == NetworkType.Advanced) || (nic.getTrafficType() == TrafficType.Guest && (dc.getNetworkType() == NetworkType.Basic || dc.isSecurityGroupEnabled()))) {\n-        \t\tproxy.setPublicIpAddress(nic.getIp4Address());\n-        \t\tproxy.setPublicNetmask(nic.getNetmask());\n-        \t\tproxy.setPublicMacAddress(nic.getMacAddress());\n-        \t} else if (nic.getTrafficType() == TrafficType.Management) {\n-        \t\tproxy.setPrivateIpAddress(nic.getIp4Address());\n-        \t\tproxy.setPrivateMacAddress(nic.getMacAddress());\n-        \t}\n+            if ((nic.getTrafficType() == TrafficType.Public && dc.getNetworkType() == NetworkType.Advanced)\n+                    || (nic.getTrafficType() == TrafficType.Guest && (dc.getNetworkType() == NetworkType.Basic || dc.isSecurityGroupEnabled()))) {\n+                proxy.setPublicIpAddress(nic.getIp4Address());\n+                proxy.setPublicNetmask(nic.getNetmask());\n+                proxy.setPublicMacAddress(nic.getMacAddress());\n+            } else if (nic.getTrafficType() == TrafficType.Management) {\n+                proxy.setPrivateIpAddress(nic.getIp4Address());\n+                proxy.setPrivateMacAddress(nic.getMacAddress());\n+            }\n         }\n         _consoleProxyDao.update(proxy.getId(), proxy);\n         return true;\n     }\n-    \n+\n     @Override\n     public boolean finalizeCommandsOnStart(Commands cmds, VirtualMachineProfile<ConsoleProxyVO> profile) {\n-        \n+\n         NicProfile managementNic = null;\n         NicProfile controlNic = null;\n         for (NicProfile nic : profile.getNics()) {\n-           if (nic.getTrafficType() == TrafficType.Management) {\n-               managementNic = nic;\n-           } else if (nic.getTrafficType() == TrafficType.Control && nic.getIp4Address() != null) {\n-               controlNic = nic;\n-           }\n+            if (nic.getTrafficType() == TrafficType.Management) {\n+                managementNic = nic;\n+            } else if (nic.getTrafficType() == TrafficType.Control && nic.getIp4Address() != null) {\n+                controlNic = nic;\n+            }\n         }\n \n         if (controlNic == null) {\n-          assert (managementNic != null);\n-          controlNic = managementNic;\n+            if (managementNic == null) {\n+                s_logger.error(\"Management network doesn't exist for the console proxy vm \" + profile.getVirtualMachine());\n+                return false;\n+            }\n+            controlNic = managementNic;\n         }\n \n         CheckSshCommand check = new CheckSshCommand(profile.getInstanceName(), controlNic.getIp4Address(), 3922, 5, 20);\n         cmds.addCommand(\"checkSsh\", check);\n-        \n+\n         return true;\n     }\n-    \n+\n     @Override\n     public boolean finalizeStart(VirtualMachineProfile<ConsoleProxyVO> profile, long hostId, Commands cmds, ReservationContext context) {\n-        CheckSshAnswer answer = (CheckSshAnswer)cmds.getAnswer(\"checkSsh\");\n+        CheckSshAnswer answer = (CheckSshAnswer) cmds.getAnswer(\"checkSsh\");\n         if (answer == null || !answer.getResult()) {\n-            if(answer != null) {\n+            if (answer != null) {\n                 s_logger.warn(\"Unable to ssh to the VM: \" + answer.getDetails());\n             } else {\n                 s_logger.warn(\"Unable to ssh to the VM: null answer\");\n             }\n             return false;\n         }\n-        \n+\n         return true;\n     }\n-    \n-    @Override \n+\n+    @Override\n     public void finalizeExpunge(ConsoleProxyVO proxy) {\n         proxy.setPublicIpAddress(null);\n         proxy.setPublicMacAddress(null);\n@@ -1335,95 +1345,94 @@ public void finalizeExpunge(ConsoleProxyVO proxy) {\n         proxy.setPrivateIpAddress(null);\n         _consoleProxyDao.update(proxy.getId(), proxy);\n     }\n-    \n+\n     @Override\n-    public boolean applyCustomCertToNewProxy(StartupProxyCommand cmd){\n-        //this is the case for updating cust cert on each new starting proxy, if such cert exists\n-\t\t//get cert from db\n-\t\tCertificateVO cert = _certDao.listAll().get(0);\n-\t\t\n-\t\tif(cert.getUpdated().equalsIgnoreCase(\"Y\")){\n-\t\t\tString certStr = cert.getCertificate(); \n-\t\t\tlong proxyVmId = (cmd).getProxyVmId();\n-\t\t\tConsoleProxyVO consoleProxy = _consoleProxyDao.findById(proxyVmId);\n-\t\t\t//find corresponding host\n-\t\t\tif(consoleProxy!=null){\n-\t\t\t\tHostVO consoleProxyHost = _hostDao.findConsoleProxyHost(consoleProxy.getName(), Type.ConsoleProxy);\n-\t\t\t\t//now send a command to console proxy host\n-\t    \t\tUpdateCertificateCommand certCmd = new UpdateCertificateCommand(certStr, true);\n-\t    \t\ttry {\n-\t\t\t\t\t\tAnswer updateCertAns = _agentMgr.send(consoleProxyHost.getId(), certCmd);\n-\t\t\t\t\t\tif(updateCertAns.getResult() == true)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t//we have the cert copied over on cpvm\n-\t\t\t\t\t\t\trebootProxy(consoleProxy.getId());\n-\t\t\t\t\t\t\t//when cp reboots, the context will be reinit with the new cert \n-\t\t\t\t\t\t\ts_logger.info(\"Successfully rebooted console proxy resource after custom certificate application for proxy:\"+cmd.getProxyVmId());\n-\t\t\t\t\t\t\treturn true;\n-\t\t\t\t\t\t}\n-\t\t\t\t} catch (AgentUnavailableException e) {\n-\t\t\t\t\ts_logger.warn(\"Unable to send update certificate command to the console proxy resource for proxy:\"+cmd.getProxyVmId(), e);\n-\t\t\t\t\treturn false;\n-\t\t\t\t} catch (OperationTimedoutException e) {\n-\t\t\t\t\ts_logger.warn(\"Unable to send update certificate command to the console proxy resource for proxy:\"+cmd.getProxyVmId(), e);\n-\t\t\t\t\treturn false;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\treturn false;//no cert entry in the db record\n-\t\t}\n-\t\treturn false;//cert already applied in previous cycles\n+    public boolean applyCustomCertToNewProxy(StartupProxyCommand cmd) {\n+        // this is the case for updating cust cert on each new starting proxy, if such cert exists\n+        // get cert from db\n+        CertificateVO cert = _certDao.listAll().get(0);\n+\n+        if (cert.getUpdated().equalsIgnoreCase(\"Y\")) {\n+            String certStr = cert.getCertificate();\n+            long proxyVmId = (cmd).getProxyVmId();\n+            ConsoleProxyVO consoleProxy = _consoleProxyDao.findById(proxyVmId);\n+            // find corresponding host\n+            if (consoleProxy != null) {\n+                HostVO consoleProxyHost = _hostDao.findConsoleProxyHost(consoleProxy.getName(), Type.ConsoleProxy);\n+                // now send a command to console proxy host\n+                UpdateCertificateCommand certCmd = new UpdateCertificateCommand(certStr, true);\n+                try {\n+                    Answer updateCertAns = _agentMgr.send(consoleProxyHost.getId(), certCmd);\n+                    if (updateCertAns.getResult() == true) {\n+                        // we have the cert copied over on cpvm\n+                        rebootProxy(consoleProxy.getId());\n+                        // when cp reboots, the context will be reinit with the new cert\n+                        s_logger.info(\"Successfully rebooted console proxy resource after custom certificate application for proxy:\" + cmd.getProxyVmId());\n+                        return true;\n+                    }\n+                } catch (AgentUnavailableException e) {\n+                    s_logger.warn(\"Unable to send update certificate command to the console proxy resource for proxy:\" + cmd.getProxyVmId(), e);\n+                    return false;\n+                } catch (OperationTimedoutException e) {\n+                    s_logger.warn(\"Unable to send update certificate command to the console proxy resource for proxy:\" + cmd.getProxyVmId(), e);\n+                    return false;\n+                }\n+            }\n+        } else {\n+            return false;// no cert entry in the db record\n+        }\n+        return false;// cert already applied in previous cycles\n     }\n-    \n+\n     @Override\n     public ConsoleProxyVO persist(ConsoleProxyVO proxy) {\n         return _consoleProxyDao.persist(proxy);\n     }\n-    \n+\n     @Override\n     public ConsoleProxyVO findById(long id) {\n         return _consoleProxyDao.findById(id);\n     }\n-    \n+\n     @Override\n     public ConsoleProxyVO findByName(String name) {\n         if (!VirtualMachineName.isValidConsoleProxyName(name)) {\n             return null;\n         }\n         return findById(VirtualMachineName.getConsoleProxyId(name));\n     }\n-    \n+\n     @Override\n     public void finalizeStop(VirtualMachineProfile<ConsoleProxyVO> profile, StopAnswer answer) {\n     }\n \n     @Override\n-\tpublic String getScanHandlerName() {\n-\t\treturn \"consoleproxy\";\n-\t}\n-    \n+    public String getScanHandlerName() {\n+        return \"consoleproxy\";\n+    }\n+\n     @Override\n-\tpublic void onScanStart() {\n+    public void onScanStart() {\n         // to reduce possible number of DB queries for capacity scan, we run following aggregated queries in preparation stage\n         _zoneHostInfoMap = getZoneHostInfo();\n-        \n+\n         _zoneProxyCountMap = new HashMap<Long, ConsoleProxyLoadInfo>();\n         List<ConsoleProxyLoadInfo> listProxyCounts = _consoleProxyDao.getDatacenterProxyLoadMatrix();\n         for (ConsoleProxyLoadInfo info : listProxyCounts) {\n-        \t_zoneProxyCountMap.put(info.getId(), info);\n+            _zoneProxyCountMap.put(info.getId(), info);\n         }\n \n         _zoneVmCountMap = new HashMap<Long, ConsoleProxyLoadInfo>();\n         List<ConsoleProxyLoadInfo> listVmCounts = _consoleProxyDao.getDatacenterSessionLoadMatrix();\n         for (ConsoleProxyLoadInfo info : listVmCounts) {\n-        \t_zoneVmCountMap.put(info.getId(), info);\n+            _zoneVmCountMap.put(info.getId(), info);\n         }\n     }\n-    \n+\n     @Override\n-\tpublic boolean canScan() {\n-        if(!reserveStandbyCapacity()) {\n-            if(s_logger.isDebugEnabled()) {\n+    public boolean canScan() {\n+        if (!reserveStandbyCapacity()) {\n+            if (s_logger.isDebugEnabled()) {\n                 s_logger.debug(\"Reserving standby capacity is disable, skip capacity scan\");\n             }\n             return false;\n@@ -1435,71 +1444,72 @@ public boolean canScan() {\n             s_logger.debug(\"Capacity scan disabled purposefully, consoleproxy.restart = false. This happens when the primarystorage is in maintenance mode\");\n             return false;\n         }\n-        \n+\n+        return true;\n+    }\n+\n+    @Override\n+    public Long[] getScannablePools() {\n+        List<DataCenterVO> zones = _dcDao.listEnabledZones();\n+\n+        Long[] dcIdList = new Long[zones.size()];\n+        int i = 0;\n+        for (DataCenterVO dc : zones) {\n+            dcIdList[i++] = dc.getId();\n+        }\n+\n+        return dcIdList;\n+    }\n+\n+    @Override\n+    public boolean isPoolReadyForScan(Long pool) {\n+        // pool is at zone basis\n+        long dataCenterId = pool.longValue();\n+\n+        if (!isZoneReady(_zoneHostInfoMap, dataCenterId)) {\n+            if (s_logger.isDebugEnabled())\n+                s_logger.debug(\"Zone \" + dataCenterId + \" is not ready to launch console proxy yet\");\n+            return false;\n+        }\n+\n+        if (s_logger.isDebugEnabled())\n+            s_logger.debug(\"Zone \" + dataCenterId + \" is ready to launch console proxy\");\n         return true;\n-\t}\n+    }\n \n     @Override\n-\tpublic Long[] getScannablePools() {\n-\t\tList<DataCenterVO> zones = _dcDao.listEnabledZones();\n-\n-\t\tLong[] dcIdList = new Long[zones.size()];\n-\t\tint i = 0;\n-\t\tfor(DataCenterVO dc : zones) {\n-\t\t\tdcIdList[i++] = dc.getId();\n-\t\t}\n-\t\t\n-\t\treturn dcIdList;\n-\t}\n-\t\n-\tpublic boolean isPoolReadyForScan(Long pool) {\n-\t\t// pool is at zone basis\n-\t\tlong dataCenterId = pool.longValue();\n-\t\t\n-\t\tif(!isZoneReady(_zoneHostInfoMap, dataCenterId)) {\n-\t\t\tif(s_logger.isDebugEnabled())\n-\t\t\t\ts_logger.debug(\"Zone \" + dataCenterId + \" is not ready to launch console proxy yet\");\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\tif(s_logger.isDebugEnabled())\n-\t\t\ts_logger.debug(\"Zone \" + dataCenterId + \" is ready to launch console proxy\");\n-\t\treturn true;\n-\t}\n-\t\n-\t@Override\n-\tpublic Pair<AfterScanAction, Object> scanPool(Long pool) {\n-\t\tlong dataCenterId = pool.longValue();\n-\t\t\n-\t\tConsoleProxyLoadInfo proxyInfo = this._zoneProxyCountMap.get(dataCenterId);\n-\t\tif(proxyInfo == null)\n-\t\t\treturn new Pair<AfterScanAction, Object>(AfterScanAction.nop, null);\n-\t\t\t\n+    public Pair<AfterScanAction, Object> scanPool(Long pool) {\n+        long dataCenterId = pool.longValue();\n+\n+        ConsoleProxyLoadInfo proxyInfo = this._zoneProxyCountMap.get(dataCenterId);\n+        if (proxyInfo == null)\n+            return new Pair<AfterScanAction, Object>(AfterScanAction.nop, null);\n+\n         ConsoleProxyLoadInfo vmInfo = this._zoneVmCountMap.get(dataCenterId);\n-        if(vmInfo == null)\n-        \tvmInfo = new ConsoleProxyLoadInfo();\n-        \n+        if (vmInfo == null)\n+            vmInfo = new ConsoleProxyLoadInfo();\n+\n         if (!checkCapacity(proxyInfo, vmInfo)) {\n-        \tif(s_logger.isDebugEnabled())\n-        \t\ts_logger.debug(\"Expand console proxy standby capacity for zone \" + proxyInfo.getName());\n-        \t\n-        \treturn new Pair<AfterScanAction, Object>(AfterScanAction.expand, null);\n-        }\n-        \n-\t\treturn new Pair<AfterScanAction, Object>(AfterScanAction.nop, null);\n-\t}\n-\t\n-\t@Override\n-\tpublic void expandPool(Long pool, Object actionArgs) {\n-\t\tlong dataCenterId = pool.longValue();\n-\t\tallocCapacity(dataCenterId);\n-\t}\n-\t\n-\t@Override\n-\tpublic void shrinkPool(Long pool, Object actionArgs) {\n-\t}\n-\n-\t@Override\n-\tpublic void onScanEnd() {\n-\t}\n+            if (s_logger.isDebugEnabled())\n+                s_logger.debug(\"Expand console proxy standby capacity for zone \" + proxyInfo.getName());\n+\n+            return new Pair<AfterScanAction, Object>(AfterScanAction.expand, null);\n+        }\n+\n+        return new Pair<AfterScanAction, Object>(AfterScanAction.nop, null);\n+    }\n+\n+    @Override\n+    public void expandPool(Long pool, Object actionArgs) {\n+        long dataCenterId = pool.longValue();\n+        allocCapacity(dataCenterId);\n+    }\n+\n+    @Override\n+    public void shrinkPool(Long pool, Object actionArgs) {\n+    }\n+\n+    @Override\n+    public void onScanEnd() {\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/22ee7117f52ef639009711ce015ac7c5a64b8751/server/src/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java",
                "sha": "5acf93097a1037f38b6d76d8b36d025aa24d300c",
                "status": "modified"
            },
            {
                "additions": 115,
                "blob_url": "https://github.com/apache/cloudstack/blob/22ee7117f52ef639009711ce015ac7c5a64b8751/server/src/com/cloud/storage/secondary/SecondaryStorageManagerImpl.java",
                "changes": 244,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/secondary/SecondaryStorageManagerImpl.java?ref=22ee7117f52ef639009711ce015ac7c5a64b8751",
                "deletions": 129,
                "filename": "server/src/com/cloud/storage/secondary/SecondaryStorageManagerImpl.java",
                "patch": "@@ -185,8 +185,8 @@\n     private String _allowedInternalSites;\n \n     private SystemVmLoadScanner<Long> _loadScanner;\n-    private Map<Long, ZoneHostInfo> _zoneHostInfoMap;\t\t\t\t\t// map <zone id, info about running host in zone>\n-    \n+    private Map<Long, ZoneHostInfo> _zoneHostInfoMap; // map <zone id, info about running host in zone>\n+\n     private final GlobalLock _allocLock = GlobalLock.getInternLock(getAllocLockName());\n \n     @Override\n@@ -255,7 +255,7 @@ public boolean generateSetupCommand(Long zoneId) {\n             String privateCidr = NetUtils.ipAndNetMaskToCidr(privateNic.getIp4Address(), privateNic.getNetmask());\n             String publicCidr = NetUtils.ipAndNetMaskToCidr(secStorageVm.getPublicIpAddress(), secStorageVm.getPublicNetmask());\n             if (NetUtils.isNetworkAWithinNetworkB(privateCidr, publicCidr) || NetUtils.isNetworkAWithinNetworkB(publicCidr, privateCidr)) {\n-            \ts_logger.info(\"private and public interface overlaps, add a default route through private interface. privateCidr: \" + privateCidr + \", publicCidr: \" + publicCidr);\n+                s_logger.info(\"private and public interface overlaps, add a default route through private interface. privateCidr: \" + privateCidr + \", publicCidr: \" + publicCidr);\n                 allowedCidrs.add(\"0.0.0.0/0\");\n             }\n             setupCmd.setAllowedInternalSites(allowedCidrs.toArray(new String[allowedCidrs.size()]));\n@@ -278,9 +278,9 @@ public boolean generateSetupCommand(Long zoneId) {\n     }\n \n     @Override\n-\tpublic Pair<HostVO, SecondaryStorageVmVO> assignSecStorageVm(long zoneId, Command cmd) {\n-\t\treturn null;\n-\t}\n+    public Pair<HostVO, SecondaryStorageVmVO> assignSecStorageVm(long zoneId, Command cmd) {\n+        return null;\n+    }\n \n     private boolean generateFirewallConfigurationForZone(Long zoneId) {\n         List<SecondaryStorageVmVO> zoneSsvms = _secStorageVmDao.listByZoneId(SecondaryStorageVm.Role.templateProcessor, zoneId);\n@@ -354,15 +354,11 @@ public SecondaryStorageVmVO startNew(long dataCenterId, SecondaryStorageVm.Role\n             return secStorageVm;\n         } else {\n             if (s_logger.isDebugEnabled()) {\n-                s_logger.debug(\"Unable to allocate secondary storage vm storage, remove the secondary storage vm record from DB, secondary storage vm id: \"\n-                        + secStorageVmId);\n+                s_logger.debug(\"Unable to allocate secondary storage vm storage, remove the secondary storage vm record from DB, secondary storage vm id: \" + secStorageVmId);\n             }\n \n-            SubscriptionMgr.getInstance().notifySubscribers(\n-                    ALERT_SUBJECT,\n-                    this,\n-                    new SecStorageVmAlertEventArgs(SecStorageVmAlertEventArgs.SSVM_CREATE_FAILURE, dataCenterId, secStorageVmId, null,\n-                            \"Unable to allocate storage\"));\n+            SubscriptionMgr.getInstance().notifySubscribers(ALERT_SUBJECT, this,\n+                    new SecStorageVmAlertEventArgs(SecStorageVmAlertEventArgs.SSVM_CREATE_FAILURE, dataCenterId, secStorageVmId, null, \"Unable to allocate storage\"));\n         }\n         return null;\n     }\n@@ -383,37 +379,34 @@ public SecondaryStorageVmVO startNew(long dataCenterId, SecondaryStorageVm.Role\n         DataCenter dc = _dcDao.findById(plan.getDataCenterId());\n \n         List<NetworkOfferingVO> defaultOffering = _networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemPublicNetwork);\n-        \n+\n         if (dc.getNetworkType() == NetworkType.Basic || dc.isSecurityGroupEnabled()) {\n             defaultOffering = _networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemGuestNetwork);\n         }\n \n-        List<NetworkOfferingVO> offerings = _networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemControlNetwork,\n-                NetworkOfferingVO.SystemManagementNetwork);\n+        List<NetworkOfferingVO> offerings = _networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemControlNetwork, NetworkOfferingVO.SystemManagementNetwork);\n         List<Pair<NetworkVO, NicProfile>> networks = new ArrayList<Pair<NetworkVO, NicProfile>>(offerings.size() + 1);\n         NicProfile defaultNic = new NicProfile();\n         defaultNic.setDefaultNic(true);\n         defaultNic.setDeviceId(2);\n         try {\n-            networks.add(new Pair<NetworkVO, NicProfile>(_networkMgr.setupNetwork(systemAcct, defaultOffering.get(0), plan, null, null, false, false)\n-                    .get(0), defaultNic));\n+            networks.add(new Pair<NetworkVO, NicProfile>(_networkMgr.setupNetwork(systemAcct, defaultOffering.get(0), plan, null, null, false, false).get(0), defaultNic));\n             for (NetworkOfferingVO offering : offerings) {\n-                networks.add(new Pair<NetworkVO, NicProfile>(_networkMgr.setupNetwork(systemAcct, offering, plan, null, null, false, false).get(0),\n-                        null));\n+                networks.add(new Pair<NetworkVO, NicProfile>(_networkMgr.setupNetwork(systemAcct, offering, plan, null, null, false, false).get(0), null));\n             }\n         } catch (ConcurrentOperationException e) {\n             s_logger.info(\"Unable to setup due to concurrent operation. \" + e);\n             return new HashMap<String, Object>();\n         }\n-        \n+\n         VMTemplateVO template = _templateDao.findSystemVMTemplate(dataCenterId);\n         if (template == null) {\n             s_logger.debug(\"Can't find a template to start\");\n             throw new CloudRuntimeException(\"Insufficient capacity exception\");\n         }\n-        \n-        SecondaryStorageVmVO secStorageVm = new SecondaryStorageVmVO(id, _serviceOffering.getId(), name, template.getId(),\n-                template.getHypervisorType(), template.getGuestOSId(), dataCenterId, systemAcct.getDomainId(), systemAcct.getId(), role);\n+\n+        SecondaryStorageVmVO secStorageVm = new SecondaryStorageVmVO(id, _serviceOffering.getId(), name, template.getId(), template.getHypervisorType(), template.getGuestOSId(), dataCenterId,\n+                systemAcct.getDomainId(), systemAcct.getId(), role);\n         try {\n             secStorageVm = _itMgr.allocate(secStorageVm, template, _serviceOffering, networks, plan, null, systemAcct);\n         } catch (InsufficientCapacityException e) {\n@@ -521,8 +514,7 @@ private void allocCapacity(long dataCenterId, SecondaryStorageVm.Role role) {\n                     }\n                 } else {\n                     if (s_logger.isInfoEnabled()) {\n-                        s_logger.info(\"Unable to acquire synchronization lock to start secStorageVm for standby capacity, secStorageVm vm id : \"\n-                                + secStorageVm.getId());\n+                        s_logger.info(\"Unable to acquire synchronization lock to start secStorageVm for standby capacity, secStorageVm vm id : \" + secStorageVm.getId());\n                     }\n                     return;\n                 }\n@@ -532,8 +524,7 @@ private void allocCapacity(long dataCenterId, SecondaryStorageVm.Role role) {\n \n             if (secStorageVm == null) {\n                 if (s_logger.isInfoEnabled()) {\n-                    s_logger.info(\"Unable to start secondary storage vm for standby capacity, secStorageVm vm Id : \" + secStorageVmId\n-                            + \", will recycle it and start a new one\");\n+                    s_logger.info(\"Unable to start secondary storage vm for standby capacity, secStorageVm vm Id : \" + secStorageVmId + \", will recycle it and start a new one\");\n                 }\n \n                 if (secStorageVmFromStoppedPool) {\n@@ -554,8 +545,7 @@ public boolean isZoneReady(Map<Long, ZoneHostInfo> zoneHostInfoMap, long dataCen\n             HostVO secHost = _hostDao.findSecondaryStorageHost(dataCenterId);\n             if (secHost == null) {\n                 if (s_logger.isDebugEnabled()) {\n-                    s_logger.debug(\"No secondary storage available in zone \" + dataCenterId\n-                            + \", wait until it is ready to launch secondary storage vm\");\n+                    s_logger.debug(\"No secondary storage available in zone \" + dataCenterId + \", wait until it is ready to launch secondary storage vm\");\n                 }\n                 return false;\n             }\n@@ -616,7 +606,7 @@ public boolean start() {\n \n     @Override\n     public boolean stop() {\n-    \t_loadScanner.stop();\n+        _loadScanner.stop();\n         _allocLock.releaseRef();\n         return true;\n     }\n@@ -761,11 +751,8 @@ public boolean rebootSecStorageVm(long secStorageVmId) {\n                     s_logger.debug(\"Successfully reboot secondary storage vm \" + secStorageVm.getName());\n                 }\n \n-                SubscriptionMgr.getInstance().notifySubscribers(\n-                        ALERT_SUBJECT,\n-                        this,\n-                        new SecStorageVmAlertEventArgs(SecStorageVmAlertEventArgs.SSVM_REBOOTED, secStorageVm.getDataCenterId(),\n-                                secStorageVm.getId(), secStorageVm, null));\n+                SubscriptionMgr.getInstance().notifySubscribers(ALERT_SUBJECT, this,\n+                        new SecStorageVmAlertEventArgs(SecStorageVmAlertEventArgs.SSVM_REBOOTED, secStorageVm.getDataCenterId(), secStorageVm.getId(), secStorageVm, null));\n \n                 return true;\n             } else {\n@@ -825,8 +812,7 @@ public SecondaryStorageVmVO persist(SecondaryStorageVmVO vm) {\n     }\n \n     @Override\n-    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<SecondaryStorageVmVO> profile, DeployDestination dest,\n-            ReservationContext context) {\n+    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<SecondaryStorageVmVO> profile, DeployDestination dest, ReservationContext context) {\n \n         HostVO secHost = _hostDao.findSecondaryStorageHost(dest.getDataCenter().getId());\n         assert (secHost != null);\n@@ -840,25 +826,25 @@ public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<SecondaryStor\n         buf.append(\" zone=\").append(dest.getDataCenter().getId());\n         buf.append(\" pod=\").append(dest.getPod().getId());\n \n-        if(profile.getVirtualMachine().getRole() == SecondaryStorageVm.Role.templateProcessor)\n-        \tbuf.append(\" guid=\").append(secHost.getGuid());\n+        if (profile.getVirtualMachine().getRole() == SecondaryStorageVm.Role.templateProcessor)\n+            buf.append(\" guid=\").append(secHost.getGuid());\n         else\n-        \tbuf.append(\" guid=\").append(profile.getVirtualMachine().getName());\n-        \n+            buf.append(\" guid=\").append(profile.getVirtualMachine().getName());\n+\n         String nfsMountPoint = null;\n         try {\n             nfsMountPoint = NfsUtils.url2Mount(secHost.getStorageUrl());\n         } catch (Exception e) {\n         }\n \n         buf.append(\" mount.path=\").append(nfsMountPoint);\n-        if(_configDao.isPremium()) {\n+        if (_configDao.isPremium()) {\n             if (profile.getHypervisorType() == HypervisorType.Hyperv) {\n-            \tbuf.append(\" resource=com.cloud.storage.resource.CifsSecondaryStorageResource\");\n+                buf.append(\" resource=com.cloud.storage.resource.CifsSecondaryStorageResource\");\n             } else\n-            \tbuf.append(\" resource=com.cloud.storage.resource.PremiumSecondaryStorageResource\");\n-        } else\t\n-        \tbuf.append(\" resource=com.cloud.storage.resource.NfsSecondaryStorageResource\");\n+                buf.append(\" resource=com.cloud.storage.resource.PremiumSecondaryStorageResource\");\n+        } else\n+            buf.append(\" resource=com.cloud.storage.resource.NfsSecondaryStorageResource\");\n         buf.append(\" instance=SecStorage\");\n         buf.append(\" sslcopy=\").append(Boolean.toString(_useSSlCopy));\n         buf.append(\" role=\").append(profile.getVirtualMachine().getRole().toString());\n@@ -884,11 +870,11 @@ public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<SecondaryStor\n                 buf.append(\" gateway=\").append(nic.getGateway());\n             }\n             if (nic.getTrafficType() == TrafficType.Management) {\n-            \tString mgmt_cidr = _configDao.getValue(Config.ManagementNetwork.key());\n-            \tif (NetUtils.isValidCIDR(mgmt_cidr)) {\n-            \t    buf.append(\" mgmtcidr=\").append(mgmt_cidr);\n-            \t}\n-            \t\n+                String mgmt_cidr = _configDao.getValue(Config.ManagementNetwork.key());\n+                if (NetUtils.isValidCIDR(mgmt_cidr)) {\n+                    buf.append(\" mgmtcidr=\").append(mgmt_cidr);\n+                }\n+\n                 buf.append(\" localgw=\").append(dest.getPod().getGateway());\n                 buf.append(\" private.network.device=\").append(\"eth\").append(deviceId);\n             } else if (nic.getTrafficType() == TrafficType.Public) {\n@@ -916,17 +902,16 @@ public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<SecondaryStor\n     }\n \n     @Override\n-    public boolean finalizeDeployment(Commands cmds, VirtualMachineProfile<SecondaryStorageVmVO> profile, DeployDestination dest,\n-            ReservationContext context) {\n-        \n+    public boolean finalizeDeployment(Commands cmds, VirtualMachineProfile<SecondaryStorageVmVO> profile, DeployDestination dest, ReservationContext context) {\n+\n         finalizeCommandsOnStart(cmds, profile);\n \n         SecondaryStorageVmVO secVm = profile.getVirtualMachine();\n         DataCenter dc = dest.getDataCenter();\n         List<NicProfile> nics = profile.getNics();\n         for (NicProfile nic : nics) {\n             if ((nic.getTrafficType() == TrafficType.Public && dc.getNetworkType() == NetworkType.Advanced)\n-                || (nic.getTrafficType() == TrafficType.Guest && (dc.getNetworkType() == NetworkType.Basic || dc.isSecurityGroupEnabled()))) {\n+                    || (nic.getTrafficType() == TrafficType.Guest && (dc.getNetworkType() == NetworkType.Basic || dc.isSecurityGroupEnabled()))) {\n                 secVm.setPublicIpAddress(nic.getIp4Address());\n                 secVm.setPublicNetmask(nic.getNetmask());\n                 secVm.setPublicMacAddress(nic.getMacAddress());\n@@ -938,28 +923,31 @@ public boolean finalizeDeployment(Commands cmds, VirtualMachineProfile<Secondary\n         _secStorageVmDao.update(secVm.getId(), secVm);\n         return true;\n     }\n-    \n+\n     @Override\n     public boolean finalizeCommandsOnStart(Commands cmds, VirtualMachineProfile<SecondaryStorageVmVO> profile) {\n-        \n+\n         NicProfile managementNic = null;\n         NicProfile controlNic = null;\n         for (NicProfile nic : profile.getNics()) {\n-           if (nic.getTrafficType() == TrafficType.Management) {\n-               managementNic = nic;\n-           } else if (nic.getTrafficType() == TrafficType.Control && nic.getIp4Address() != null) {\n-               controlNic = nic;\n-           }\n+            if (nic.getTrafficType() == TrafficType.Management) {\n+                managementNic = nic;\n+            } else if (nic.getTrafficType() == TrafficType.Control && nic.getIp4Address() != null) {\n+                controlNic = nic;\n+            }\n         }\n \n         if (controlNic == null) {\n-          assert (managementNic != null);\n-          controlNic = managementNic;\n+            if (managementNic == null) {\n+                s_logger.error(\"Management network doesn't exist for the secondaryStorageVm \" + profile.getVirtualMachine());\n+                return false;\n+            }\n+            controlNic = managementNic;\n         }\n \n         CheckSshCommand check = new CheckSshCommand(profile.getInstanceName(), controlNic.getIp4Address(), 3922, 5, 20);\n         cmds.addCommand(\"checkSsh\", check);\n-        \n+\n         return true;\n     }\n \n@@ -977,88 +965,86 @@ public boolean finalizeStart(VirtualMachineProfile<SecondaryStorageVmVO> profile\n     @Override\n     public void finalizeStop(VirtualMachineProfile<SecondaryStorageVmVO> profile, StopAnswer answer) {\n     }\n-    \n+\n     @Override\n     public void finalizeExpunge(SecondaryStorageVmVO vm) {\n     }\n-    \n+\n     @Override\n-\tpublic String getScanHandlerName() {\n-\t\treturn \"secstorage\";\n-\t}\n-    \n+    public String getScanHandlerName() {\n+        return \"secstorage\";\n+    }\n+\n     @Override\n-\tpublic boolean canScan() {\n-\t\treturn true;\n-\t}\n+    public boolean canScan() {\n+        return true;\n+    }\n \n     @Override\n-\tpublic void onScanStart() {\n+    public void onScanStart() {\n         _zoneHostInfoMap = getZoneHostInfo();\n-\t}\n-\t\n+    }\n+\n     @Override\n-\tpublic Long[] getScannablePools() {\n-\t\tList<DataCenterVO> zones = _dcDao.listEnabledZones();\n-\n-\t\tLong[] dcIdList = new Long[zones.size()];\n-\t\tint i = 0;\n-\t\tfor(DataCenterVO dc : zones) {\n-\t\t\tdcIdList[i++] = dc.getId();\n-\t\t}\n-\t\t\n-\t\treturn dcIdList;\n-\t}\n-\t\n+    public Long[] getScannablePools() {\n+        List<DataCenterVO> zones = _dcDao.listEnabledZones();\n+\n+        Long[] dcIdList = new Long[zones.size()];\n+        int i = 0;\n+        for (DataCenterVO dc : zones) {\n+            dcIdList[i++] = dc.getId();\n+        }\n+\n+        return dcIdList;\n+    }\n+\n     @Override\n-\tpublic boolean isPoolReadyForScan(Long pool) {\n-\t\t// pool is at zone basis\n-\t\tlong dataCenterId = pool.longValue();\n-\t\t\n-\t\tif(!isZoneReady(_zoneHostInfoMap, dataCenterId)) {\n-\t\t\tif(s_logger.isDebugEnabled())\n-\t\t\t\ts_logger.debug(\"Zone \" + dataCenterId + \" is not ready to launch secondary storage VM yet\");\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\tif(s_logger.isDebugEnabled())\n-\t\t\ts_logger.debug(\"Zone \" + dataCenterId + \" is ready to launch secondary storage VM\");\n-\t\treturn true;\n-\t}\n-\t\n+    public boolean isPoolReadyForScan(Long pool) {\n+        // pool is at zone basis\n+        long dataCenterId = pool.longValue();\n+\n+        if (!isZoneReady(_zoneHostInfoMap, dataCenterId)) {\n+            if (s_logger.isDebugEnabled())\n+                s_logger.debug(\"Zone \" + dataCenterId + \" is not ready to launch secondary storage VM yet\");\n+            return false;\n+        }\n+\n+        if (s_logger.isDebugEnabled())\n+            s_logger.debug(\"Zone \" + dataCenterId + \" is ready to launch secondary storage VM\");\n+        return true;\n+    }\n+\n     @Override\n-\tpublic Pair<AfterScanAction, Object> scanPool(Long pool) {\n-\t\tlong dataCenterId = pool.longValue();\n-    \t\n-        List<SecondaryStorageVmVO> alreadyRunning = _secStorageVmDao.getSecStorageVmListInStates(SecondaryStorageVm.Role.templateProcessor, dataCenterId, State.Running,\n-                State.Migrating, State.Starting);\n-        List<SecondaryStorageVmVO> stopped = _secStorageVmDao.getSecStorageVmListInStates(SecondaryStorageVm.Role.templateProcessor, dataCenterId, State.Stopped,\n-                State.Stopping);\n+    public Pair<AfterScanAction, Object> scanPool(Long pool) {\n+        long dataCenterId = pool.longValue();\n+\n+        List<SecondaryStorageVmVO> alreadyRunning = _secStorageVmDao.getSecStorageVmListInStates(SecondaryStorageVm.Role.templateProcessor, dataCenterId, State.Running, State.Migrating,\n+                State.Starting);\n+        List<SecondaryStorageVmVO> stopped = _secStorageVmDao.getSecStorageVmListInStates(SecondaryStorageVm.Role.templateProcessor, dataCenterId, State.Stopped, State.Stopping);\n         if (alreadyRunning.size() == 0) {\n             if (stopped.size() == 0) {\n                 s_logger.info(\"No secondary storage vms found in datacenter id=\" + dataCenterId + \", starting a new one\");\n-            \treturn new Pair<AfterScanAction, Object>(AfterScanAction.expand, SecondaryStorageVm.Role.templateProcessor);\n+                return new Pair<AfterScanAction, Object>(AfterScanAction.expand, SecondaryStorageVm.Role.templateProcessor);\n             } else {\n-                s_logger.warn(\"Stopped secondary storage vms found in datacenter id=\" + dataCenterId\n-                        + \", not restarting them automatically\");\n+                s_logger.warn(\"Stopped secondary storage vms found in datacenter id=\" + dataCenterId + \", not restarting them automatically\");\n             }\n         }\n-        \n+\n         return new Pair<AfterScanAction, Object>(AfterScanAction.nop, SecondaryStorageVm.Role.templateProcessor);\n-\t}\n-\t\n+    }\n+\n     @Override\n-\tpublic void expandPool(Long pool, Object actionArgs) {\n-\t\tlong dataCenterId = pool.longValue();\n-        allocCapacity(dataCenterId, (SecondaryStorageVm.Role)actionArgs);\n-\t}\n-\t\n+    public void expandPool(Long pool, Object actionArgs) {\n+        long dataCenterId = pool.longValue();\n+        allocCapacity(dataCenterId, (SecondaryStorageVm.Role) actionArgs);\n+    }\n+\n     @Override\n-\tpublic void shrinkPool(Long pool, Object actionArgs) {\n-\t}\n-\t\n+    public void shrinkPool(Long pool, Object actionArgs) {\n+    }\n+\n     @Override\n-\tpublic void onScanEnd() {\n-\t}\n-    \n+    public void onScanEnd() {\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/22ee7117f52ef639009711ce015ac7c5a64b8751/server/src/com/cloud/storage/secondary/SecondaryStorageManagerImpl.java",
                "sha": "ed73a2db36806bc78b2360b1801a4d133681ab31",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/22ee7117f52ef639009711ce015ac7c5a64b8751/server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=22ee7117f52ef639009711ce015ac7c5a64b8751",
                "deletions": 0,
                "filename": "server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -96,6 +96,7 @@\n import com.cloud.hypervisor.Hypervisor.HypervisorType;\n import com.cloud.hypervisor.HypervisorGuru;\n import com.cloud.hypervisor.HypervisorGuruManager;\n+import com.cloud.network.Network;\n import com.cloud.network.NetworkManager;\n import com.cloud.network.NetworkVO;\n import com.cloud.org.Cluster;\n@@ -1480,6 +1481,12 @@ protected Command compareState(VMInstanceVO vm, final AgentVmInfo info, final bo\n                     vm = vmGuru.findById(vm.getId());\n \n                     VirtualMachineProfile<VMInstanceVO> profile = new VirtualMachineProfileImpl<VMInstanceVO>(vm);\n+                    List<NicVO> nics = _nicsDao.listByVmId(profile.getId());\n+                    for (NicVO nic : nics) {\n+                        Network network = _networkMgr.getNetwork(nic.getNetworkId());\n+                        NicProfile nicProfile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), null);\n+                        profile.addNic(nicProfile);\n+                    }\n \n                     Commands cmds = new Commands(OnError.Revert);\n                     s_logger.debug(\"Finalizing commands that need to be send to complete Start process for the vm \" + vm);",
                "raw_url": "https://github.com/apache/cloudstack/raw/22ee7117f52ef639009711ce015ac7c5a64b8751/server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "d120d87555d970cc7ed8d44b140cf5ac7ce69faf",
                "status": "modified"
            }
        ],
        "message": "bug 9521: fixed NPE in finalizeCommandsOnStart() method by adding vm's nic to vm profile during the vm to vmProfile conversion.\nstatus 9521: resolved fixed\nConflicts:\n\n\tserver/src/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java\n\tserver/src/com/cloud/storage/secondary/SecondaryStorageManagerImpl.java\n\tserver/src/com/cloud/vm/VirtualMachineManagerImpl.java",
        "parent": "https://github.com/apache/cloudstack/commit/f881d394e252a2bf68570b3c80ea2a9f1c19a5e4",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_238c483": {
        "bug_id": "cloudstack_238c483",
        "commit": "https://github.com/apache/cloudstack/commit/238c483a7ca744191972e3bb3404a1a506dcb2e1",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/238c483a7ca744191972e3bb3404a1a506dcb2e1/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java?ref=238c483a7ca744191972e3bb3404a1a506dcb2e1",
                "deletions": 4,
                "filename": "server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "patch": "@@ -1013,10 +1013,12 @@ protected void updateRoutersRedundantState(final List<DomainRouterVO> routers) {\n                         s_logger.warn(\"Unable to update router \" + router.getHostName() + \"'s status\");\n                     }\n                     RedundantState state = RedundantState.UNKNOWN;\n-                    if (answer != null && answer.getResult()) {\n-                        state = answer.getState();\n-                    } else {\n-                        s_logger.info(\"Agent response doesn't seem to be correct ==> \" + answer.getResult());\n+                    if (answer != null) {\n+                        if (answer.getResult()) {\n+                            state = answer.getState();\n+                        } else {\n+                            s_logger.info(\"Agent response doesn't seem to be correct ==> \" + answer.getResult());\n+                        }\n                     }\n                     router.setRedundantState(state);\n                     updated = true;",
                "raw_url": "https://github.com/apache/cloudstack/raw/238c483a7ca744191972e3bb3404a1a506dcb2e1/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "sha": "ca1f67dbb69b7b98ae38a851e54398cd05075875",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #1073 from ustcweizhou/CLOUDSTACK-9055\n\nCLOUDSTACK-9055: fix NPE in updating Redundant State of VPC networksThis issue happened when the KVM nodes is down.It might also happen when the cloudstack-agent is killed unexpectedly.\n\n* pr/1073:\n  CLOUDSTACK-9055: fix NPE in updating Redundant State of VPC networks\n\nSigned-off-by: Remi Bergsma <github@remi.nl>",
        "parent": "https://github.com/apache/cloudstack/commit/401693eafbe940c8fc349eec950779cf3e3f2717",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualNetworkApplianceManagerImplTest.java"
        ]
    },
    "cloudstack_24435dd": {
        "bug_id": "cloudstack_24435dd",
        "commit": "https://github.com/apache/cloudstack/commit/24435dd6bc2424da18277ca00229d1d3bb0ec284",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/24435dd6bc2424da18277ca00229d1d3bb0ec284/server/src/com/cloud/deploy/DeploymentPlanningManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/deploy/DeploymentPlanningManagerImpl.java?ref=24435dd6bc2424da18277ca00229d1d3bb0ec284",
                "deletions": 1,
                "filename": "server/src/com/cloud/deploy/DeploymentPlanningManagerImpl.java",
                "patch": "@@ -1208,7 +1208,7 @@ protected boolean hostCanAccessSPool(Host host, StoragePool pool) {\n             // volume is ready and the pool should be reused.\n             // In this case, also check if rest of the volumes are ready and can\n             // be reused.\n-            if (plan.getPoolId() != null) {\n+            if (plan.getPoolId() != null || (toBeCreated.getVolumeType() == Volume.Type.DATADISK && toBeCreated.getPoolId() != null && toBeCreated.getState() == Volume.State.Ready)) {\n                 s_logger.debug(\"Volume has pool already allocated, checking if pool can be reused, poolId: \" + toBeCreated.getPoolId());\n                 List<StoragePool> suitablePools = new ArrayList<StoragePool>();\n                 StoragePool pool = null;",
                "raw_url": "https://github.com/apache/cloudstack/raw/24435dd6bc2424da18277ca00229d1d3bb0ec284/server/src/com/cloud/deploy/DeploymentPlanningManagerImpl.java",
                "sha": "7986b3a2decad2c43cb6adac066120c9ab3e78db",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/cloudstack/blob/24435dd6bc2424da18277ca00229d1d3bb0ec284/server/src/com/cloud/ha/HighAvailabilityManagerImpl.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/ha/HighAvailabilityManagerImpl.java?ref=24435dd6bc2424da18277ca00229d1d3bb0ec284",
                "deletions": 1,
                "filename": "server/src/com/cloud/ha/HighAvailabilityManagerImpl.java",
                "patch": "@@ -634,6 +634,9 @@ public Long migrate(final HaWorkVO work) {\n             _haDao.update(work.getId(), work);\n \n             VMInstanceVO vm = _instanceDao.findById(vmId);\n+            if (vm == null) {\n+                return null;\n+            }\n             // First try starting the vm with its original planner, if it doesn't succeed send HAPlanner as its an emergency.\n             _itMgr.migrateAway(vm.getUuid(), srcHostId);\n             return null;\n@@ -753,7 +756,10 @@ public void cancelScheduledMigrations(final HostVO host) {\n         List<HaWorkVO> works = _haDao.findTakenWorkItems(WorkType.Migration);\n         List<VMInstanceVO> vms = new ArrayList<VMInstanceVO>(works.size());\n         for (HaWorkVO work : works) {\n-            vms.add(_instanceDao.findById(work.getInstanceId()));\n+            VMInstanceVO vm = _instanceDao.findById(work.getInstanceId());\n+            if (vm != null) {\n+                vms.add(vm);\n+            }\n         }\n         return vms;\n     }\n@@ -913,6 +919,7 @@ private void runWithContext() {\n                     } else {\n                         s_logger.info(\"Rescheduling \" + work + \" to try again at \" + new Date(nextTime << 10));\n                         work.setTimeToTry(nextTime);\n+                        work.setTimesTried(work.getTimesTried() + 1);\n                         work.setServerId(null);\n                         work.setDateTaken(null);\n                     }\n@@ -923,6 +930,7 @@ private void runWithContext() {\n \n                     s_logger.info(\"Rescheduling \" + work + \" to try again at \" + new Date(nextTime << 10));\n                     work.setTimeToTry(nextTime);\n+                    work.setTimesTried(work.getTimesTried() + 1);\n                     work.setServerId(null);\n                     work.setDateTaken(null);\n \n@@ -931,6 +939,10 @@ private void runWithContext() {\n                     VMInstanceVO vm = _instanceDao.findById(work.getInstanceId());\n                     work.setUpdateTime(vm.getUpdated());\n                     work.setPreviousState(vm.getState());\n+                    if (!Step.Done.equals(work.getStep()) && work.getTimesTried() >= _maxRetries) {\n+                        s_logger.warn(\"Giving up, retries max times for work: \" + work);\n+                        work.setStep(Step.Done);\n+                    }\n                 }\n                 _haDao.update(work.getId(), work);\n             } catch (final Throwable th) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/24435dd6bc2424da18277ca00229d1d3bb0ec284/server/src/com/cloud/ha/HighAvailabilityManagerImpl.java",
                "sha": "ce6239ae83f61461784a3b71dd1aaa0e031fb327",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/cloudstack/blob/24435dd6bc2424da18277ca00229d1d3bb0ec284/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/UserVmManagerImpl.java?ref=24435dd6bc2424da18277ca00229d1d3bb0ec284",
                "deletions": 0,
                "filename": "server/src/com/cloud/vm/UserVmManagerImpl.java",
                "patch": "@@ -1010,6 +1010,9 @@ public UserVm addNicToVirtualMachine(AddNicToVMCmd cmd) throws InvalidParameterV\n \n         NicProfile profile = new NicProfile(null, null);\n         if (ipAddress != null) {\n+            if (!(NetUtils.isValidIp(ipAddress) || NetUtils.isValidIpv6(ipAddress))) {\n+                throw new InvalidParameterValueException(\"Invalid format for IP address parameter: \" + ipAddress);\n+            }\n             profile = new NicProfile(ipAddress, null);\n         }\n \n@@ -2874,6 +2877,19 @@ protected UserVm createVirtualMachine(DataCenter zone, ServiceOffering serviceOf\n                 }\n \n                 profile.setDefaultNic(true);\n+                if (!_networkModel.areServicesSupportedInNetwork(network.getId(), new Service[]{Service.UserData})) {\n+                    if ((userData != null) && (!userData.isEmpty())) {\n+                        throw new InvalidParameterValueException(\"Unable to deploy VM as UserData is provided while deploying the VM, but there is no support for \" + Network.Service.UserData.getName() + \" service in the default network \" + network.getId());\n+                    }\n+\n+                    if ((sshPublicKey != null) && (!sshPublicKey.isEmpty())) {\n+                        throw new InvalidParameterValueException(\"Unable to deploy VM as SSH keypair is provided while deploying the VM, but there is no support for \" + Network.Service.UserData.getName() + \" service in the default network \" + network.getId());\n+                    }\n+\n+                    if (template.getEnablePassword()) {\n+                        throw new InvalidParameterValueException(\"Unable to deploy VM as template \" + template.getId() + \" is password enabled, but there is no support for \" + Network.Service.UserData.getName() + \" service in the default network \" + network.getId());\n+                    }\n+                }\n             }\n \n             networks.add(new Pair<NetworkVO, NicProfile>(network, profile));",
                "raw_url": "https://github.com/apache/cloudstack/raw/24435dd6bc2424da18277ca00229d1d3bb0ec284/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "sha": "13ed97ecbca14944328a55612193f436e00e5cfc",
                "status": "modified"
            }
        ],
        "message": "server: NPE checks and improved case checking\n\n- pool allocation checks for both root and data disks\n- NPE checks to not add null object in collection or try to migrate null VM\n- HA work tries need to increment and be given up when max retries are crossed\n- VM creation should check IP address format for IPv4 and IPv6\n- If userdata is not supported by a network, then fail early if userdata, ssh key,\n  or password enabled template is passed/used\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/752d784d92b4ce461ec6a19a6b54220bb967d4d0",
        "repo": "cloudstack",
        "unit_tests": [
            "UserVmManagerImplTest.java"
        ]
    },
    "cloudstack_2548269": {
        "bug_id": "cloudstack_2548269",
        "commit": "https://github.com/apache/cloudstack/commit/2548269238a5de897e1f1a52a5dba4f473b7ed92",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/2548269238a5de897e1f1a52a5dba4f473b7ed92/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=2548269238a5de897e1f1a52a5dba4f473b7ed92",
                "deletions": 6,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -822,12 +822,14 @@ public VolumeResponse createVolumeResponse(Volume volume) {\n         Long instanceId = volume.getInstanceId();\n         if (instanceId != null && volume.getState() != Volume.State.Destroy) {\n             VMInstanceVO vm = ApiDBUtils.findVMInstanceById(instanceId);\n-            volResponse.setVirtualMachineId(vm.getId());\n-            volResponse.setVirtualMachineName(vm.getHostName());\n-            UserVm userVm = ApiDBUtils.findUserVmById(vm.getId());\n-            if (userVm != null) {\n-                volResponse.setVirtualMachineDisplayName(userVm.getDisplayName());\n-                volResponse.setVirtualMachineState(vm.getState().toString());\n+            if (vm != null) {\n+                volResponse.setVirtualMachineId(vm.getId());\n+                volResponse.setVirtualMachineName(vm.getHostName());\n+                UserVm userVm = ApiDBUtils.findUserVmById(vm.getId());\n+                if (userVm != null) {\n+                    volResponse.setVirtualMachineDisplayName(userVm.getDisplayName());\n+                    volResponse.setVirtualMachineState(vm.getState().toString());\n+                }\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/2548269238a5de897e1f1a52a5dba4f473b7ed92/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "f0b232b3d88c90013dece8a1de8729684fd91219",
                "status": "modified"
            }
        ],
        "message": "fix NPE when listvolume if vm got destroyed",
        "parent": "https://github.com/apache/cloudstack/commit/7ac3c818a97a7b8404ca85ae63bfa07352abf91e",
        "repo": "cloudstack",
        "unit_tests": [
            "ApiResponseHelperTest.java"
        ]
    },
    "cloudstack_25ddb22": {
        "bug_id": "cloudstack_25ddb22",
        "commit": "https://github.com/apache/cloudstack/commit/25ddb22724114c79a9ad5de78a30e098070c7513",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/25ddb22724114c79a9ad5de78a30e098070c7513/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=25ddb22724114c79a9ad5de78a30e098070c7513",
                "deletions": 8,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -822,14 +822,12 @@ public VolumeResponse createVolumeResponse(Volume volume) {\n         Long instanceId = volume.getInstanceId();\n         if (instanceId != null && volume.getState() != Volume.State.Destroy) {\n             VMInstanceVO vm = ApiDBUtils.findVMInstanceById(instanceId);\n-            if (vm != null) {\n-                volResponse.setVirtualMachineId(vm.getId());\n-                volResponse.setVirtualMachineName(vm.getHostName());\n-                UserVm userVm = ApiDBUtils.findUserVmById(vm.getId());\n-                if (userVm != null) {\n-                    volResponse.setVirtualMachineDisplayName(userVm.getDisplayName());\n-                    volResponse.setVirtualMachineState(vm.getState().toString());\n-                }\n+            volResponse.setVirtualMachineId(vm.getId());\n+            volResponse.setVirtualMachineName(vm.getHostName());\n+            UserVm userVm = ApiDBUtils.findUserVmById(vm.getId());\n+            if (userVm != null) {\n+                volResponse.setVirtualMachineDisplayName(userVm.getDisplayName());\n+                volResponse.setVirtualMachineState(vm.getState().toString());\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/25ddb22724114c79a9ad5de78a30e098070c7513/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "37e794ddcd55402292b23a9d97bceae283ea8b89",
                "status": "modified"
            }
        ],
        "message": "Revert \"fix NPE when listvolume if vm got destroyed\"\n\nThis reverts commit b6518399987a17c791f22b991dcea36d57866269.",
        "parent": "https://github.com/apache/cloudstack/commit/a8424da076a149a53301aaa0bc86ad8c8b0345ca",
        "repo": "cloudstack",
        "unit_tests": [
            "ApiResponseHelperTest.java"
        ]
    },
    "cloudstack_2694ad7": {
        "bug_id": "cloudstack_2694ad7",
        "commit": "https://github.com/apache/cloudstack/commit/2694ad7bd91671629831f9feede879cb24d05d69",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/2694ad7bd91671629831f9feede879cb24d05d69/server/src/com/cloud/api/ApiServlet.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiServlet.java?ref=2694ad7bd91671629831f9feede879cb24d05d69",
                "deletions": 3,
                "filename": "server/src/com/cloud/api/ApiServlet.java",
                "patch": "@@ -201,9 +201,6 @@ void processRequestInContext(final HttpServletRequest req, final HttpServletResp\n                             } catch (final IllegalStateException ignored) {\n                             }\n                         }\n-                    } else {\n-                        auditTrailSb.insert(0, \"(userId=\" + session.getAttribute(\"userid\") + \" accountId=\" + ((Account) session.getAttribute(\"accountobj\")).getId() +\n-                                \" sessionId=\" + session.getId() + \")\");\n                     }\n                     HttpUtils.writeHttpResponse(resp, responseString, httpResponseCode, responseType);\n                     return;",
                "raw_url": "https://github.com/apache/cloudstack/raw/2694ad7bd91671629831f9feede879cb24d05d69/server/src/com/cloud/api/ApiServlet.java",
                "sha": "8dff6ebc952241a88f9cd9e99399f8f5ffab8613",
                "status": "modified"
            }
        ],
        "message": "ApiServlet: Fix NPE while inserting to auditTrail\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/a1dc9e8189ebdab3f7e8b849f1777f282a7a295b",
        "repo": "cloudstack",
        "unit_tests": [
            "ApiServletTest.java"
        ]
    },
    "cloudstack_27ba020": {
        "bug_id": "cloudstack_27ba020",
        "commit": "https://github.com/apache/cloudstack/commit/27ba0208f068e60f588d25a5d0ad9c4d6503ad14",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/27ba0208f068e60f588d25a5d0ad9c4d6503ad14/server/src/com/cloud/network/ExternalLoadBalancerDeviceManagerImpl.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/ExternalLoadBalancerDeviceManagerImpl.java?ref=27ba0208f068e60f588d25a5d0ad9c4d6503ad14",
                "deletions": 4,
                "filename": "server/src/com/cloud/network/ExternalLoadBalancerDeviceManagerImpl.java",
                "patch": "@@ -819,7 +819,8 @@ private MappingNic getLoadBalancingIpNic(DataCenterVO zone, Network network, lon\n                 }\n             } else {\n                 s_logger.debug(\"Revoking a rule for an inline load balancer that has not been programmed yet.\");\n-                return null;\n+                nic.setNic(null);\n+                return nic;\n             }\n         }\n         \n@@ -877,9 +878,9 @@ public boolean applyLoadBalancerRules(Network network, List<? extends FirewallRu\n                 MappingNic nic = getLoadBalancingIpNic(zone, network, rule.getSourceIpAddressId(), revoked, null);\n                 mappingStates.add(nic.getState());\n                 NicVO loadBalancingIpNic = nic.getNic();\n-                        if (loadBalancingIpNic == null) {\n-                        continue;\n-                    }\n+                if (loadBalancingIpNic == null) {\n+                \tcontinue;\n+                }\n \n                 // Change the source IP address for the load balancing rule to be the load balancing IP address\n                 srcIp = loadBalancingIpNic.getIp4Address();",
                "raw_url": "https://github.com/apache/cloudstack/raw/27ba0208f068e60f588d25a5d0ad9c4d6503ad14/server/src/com/cloud/network/ExternalLoadBalancerDeviceManagerImpl.java",
                "sha": "d7b6d78c9bba1540919f62f96c54c7679780ec16",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-1315: Fix NPE when try to upgrade network from VR to SRX-F5\n\nStill return a valid object when reverting non-existed rules.",
        "parent": "https://github.com/apache/cloudstack/commit/e31cd2b3d20fcd6f7e42bb44fe38f714aae04003",
        "repo": "cloudstack",
        "unit_tests": [
            "ExternalLoadBalancerDeviceManagerImplTest.java"
        ]
    },
    "cloudstack_287a695": {
        "bug_id": "cloudstack_287a695",
        "commit": "https://github.com/apache/cloudstack/commit/287a695664dfddebd600385210ba80be5b5b76ef",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/287a695664dfddebd600385210ba80be5b5b76ef/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=287a695664dfddebd600385210ba80be5b5b76ef",
                "deletions": 8,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -824,14 +824,12 @@ public VolumeResponse createVolumeResponse(Volume volume) {\n         Long instanceId = volume.getInstanceId();\n         if (instanceId != null && volume.getState() != Volume.State.Destroy) {\n             VMInstanceVO vm = ApiDBUtils.findVMInstanceById(instanceId);\n-            if (vm != null) {\n-                volResponse.setVirtualMachineId(vm.getId());\n-                volResponse.setVirtualMachineName(vm.getHostName());\n-                UserVm userVm = ApiDBUtils.findUserVmById(vm.getId());\n-                if (userVm != null) {\n-                    volResponse.setVirtualMachineDisplayName(userVm.getDisplayName());\n-                    volResponse.setVirtualMachineState(vm.getState().toString());\n-                }\n+            volResponse.setVirtualMachineId(vm.getId());\n+            volResponse.setVirtualMachineName(vm.getHostName());\n+            UserVm userVm = ApiDBUtils.findUserVmById(vm.getId());\n+            if (userVm != null) {\n+                volResponse.setVirtualMachineDisplayName(userVm.getDisplayName());\n+                volResponse.setVirtualMachineState(vm.getState().toString());\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/287a695664dfddebd600385210ba80be5b5b76ef/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "cb7a3a5521960098b06a97cf7ad26908ca42d1f0",
                "status": "modified"
            }
        ],
        "message": "Revert \"fix NPE when listvolume if vm got destroyed\"\n\nThis reverts commit d028454ab46f1e901e2517dd64a0b8a9780c9968.",
        "parent": "https://github.com/apache/cloudstack/commit/4df7423f70e6dc31f1ab5040e17f63f4c2103c4c",
        "repo": "cloudstack",
        "unit_tests": [
            "ApiResponseHelperTest.java"
        ]
    },
    "cloudstack_2b7b837": {
        "bug_id": "cloudstack_2b7b837",
        "commit": "https://github.com/apache/cloudstack/commit/2b7b837b28f847eedf3cd7bd034dc23ba43d8a63",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/2b7b837b28f847eedf3cd7bd034dc23ba43d8a63/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=2b7b837b28f847eedf3cd7bd034dc23ba43d8a63",
                "deletions": 1,
                "filename": "engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -1843,7 +1843,7 @@ protected void migrate(VMInstanceVO vm, long srcHostId, DeployDestination dest)\n             vmSrc.addNic(nic);\n         }\n \n-        VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n+        VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm, null, _offeringDao.findById(vm.getId(), vm.getServiceOfferingId()), null, null);\n         _networkMgr.prepareNicForMigration(profile, dest);\n         volumeMgr.prepareForMigration(profile, dest);\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/2b7b837b28f847eedf3cd7bd034dc23ba43d8a63/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "0e12bcb26740c976cdb4a21845ff23ebe212cb8c",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-6099 live migration is failing for vm deployed using dynaic compute offerings with NPE",
        "parent": "https://github.com/apache/cloudstack/commit/70142c4acb84a2d2b1fe8806c159493e4a556532",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_2c31f38": {
        "bug_id": "cloudstack_2c31f38",
        "commit": "https://github.com/apache/cloudstack/commit/2c31f38c05c16d661812cb89317eb2d4e6c8faf3",
        "file": [
            {
                "additions": 45,
                "blob_url": "https://github.com/apache/cloudstack/blob/2c31f38c05c16d661812cb89317eb2d4e6c8faf3/server/src/com/cloud/storage/StorageManagerImpl.java",
                "changes": 156,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/StorageManagerImpl.java?ref=2c31f38c05c16d661812cb89317eb2d4e6c8faf3",
                "deletions": 111,
                "filename": "server/src/com/cloud/storage/StorageManagerImpl.java",
                "patch": "@@ -42,7 +42,6 @@\n import javax.naming.ConfigurationException;\n \n import org.apache.cloudstack.api.command.admin.storage.AddImageStoreCmd;\n-import com.cloud.server.ConfigurationServer;\n import org.apache.cloudstack.api.command.admin.storage.CancelPrimaryStorageMaintenanceCmd;\n import org.apache.cloudstack.api.command.admin.storage.CreateCacheStoreCmd;\n import org.apache.cloudstack.api.command.admin.storage.CreateStoragePoolCmd;\n@@ -55,25 +54,21 @@\n import org.apache.cloudstack.engine.subsystem.api.storage.DataStoreManager;\n import org.apache.cloudstack.engine.subsystem.api.storage.DataStoreProvider;\n import org.apache.cloudstack.engine.subsystem.api.storage.DataStoreProviderManager;\n-import org.apache.cloudstack.engine.subsystem.api.storage.EndPoint;\n import org.apache.cloudstack.engine.subsystem.api.storage.EndPointSelector;\n import org.apache.cloudstack.engine.subsystem.api.storage.HostScope;\n import org.apache.cloudstack.engine.subsystem.api.storage.HypervisorHostListener;\n-import org.apache.cloudstack.engine.subsystem.api.storage.SnapshotInfo;\n-import org.apache.cloudstack.engine.subsystem.api.storage.TemplateDataFactory;\n import org.apache.cloudstack.engine.subsystem.api.storage.ImageStoreProvider;\n import org.apache.cloudstack.engine.subsystem.api.storage.PrimaryDataStoreInfo;\n import org.apache.cloudstack.engine.subsystem.api.storage.SnapshotDataFactory;\n+import org.apache.cloudstack.engine.subsystem.api.storage.SnapshotInfo;\n import org.apache.cloudstack.engine.subsystem.api.storage.StoragePoolAllocator;\n-import org.apache.cloudstack.engine.subsystem.api.storage.TemplateInfo;\n+import org.apache.cloudstack.engine.subsystem.api.storage.TemplateDataFactory;\n import org.apache.cloudstack.engine.subsystem.api.storage.TemplateService;\n import org.apache.cloudstack.engine.subsystem.api.storage.VolumeDataFactory;\n-import org.apache.cloudstack.engine.subsystem.api.storage.VolumeInfo;\n import org.apache.cloudstack.engine.subsystem.api.storage.VolumeService;\n import org.apache.cloudstack.engine.subsystem.api.storage.VolumeService.VolumeApiResult;\n import org.apache.cloudstack.engine.subsystem.api.storage.ZoneScope;\n import org.apache.cloudstack.framework.async.AsyncCallFuture;\n-import org.apache.cloudstack.storage.command.DeleteCommand;\n import org.apache.cloudstack.storage.datastore.db.ImageStoreDao;\n import org.apache.cloudstack.storage.datastore.db.ImageStoreDetailsDao;\n import org.apache.cloudstack.storage.datastore.db.ImageStoreVO;\n@@ -132,9 +127,9 @@\n import com.cloud.org.Grouping;\n import com.cloud.org.Grouping.AllocationState;\n import com.cloud.resource.ResourceState;\n+import com.cloud.server.ConfigurationServer;\n import com.cloud.server.ManagementServer;\n import com.cloud.server.StatsCollector;\n-import com.cloud.service.dao.ServiceOfferingDao;\n import com.cloud.service.ServiceOfferingVO;\n import com.cloud.storage.Storage.ImageFormat;\n import com.cloud.storage.Storage.StoragePoolType;\n@@ -146,9 +141,6 @@\n import com.cloud.storage.dao.VMTemplatePoolDao;\n import com.cloud.storage.dao.VMTemplateZoneDao;\n import com.cloud.storage.dao.VolumeDao;\n-import com.cloud.storage.dao.VolumeHostDao;\n-import com.cloud.storage.DiskOfferingVO;\n-import com.cloud.storage.download.DownloadMonitor;\n import com.cloud.storage.listener.StoragePoolMonitor;\n import com.cloud.storage.listener.VolumeStateListener;\n import com.cloud.template.TemplateManager;\n@@ -631,7 +623,7 @@ public DataStore createLocalStorage(Host host, StoragePoolInfo pInfo) throws Con\n \n                 store = lifeCycle.initialize(params);\n             } else {\n-                store = (DataStore) dataStoreMgr.getDataStore(pool.getId(), DataStoreRole.Primary);\n+                store = dataStoreMgr.getDataStore(pool.getId(), DataStoreRole.Primary);\n             }\n \n             HostScope scope = new HostScope(host.getId(), host.getDataCenterId());\n@@ -641,13 +633,13 @@ public DataStore createLocalStorage(Host host, StoragePoolInfo pInfo) throws Con\n             throw new ConnectionException(true, \"Unable to setup the local storage pool for \" + host, e);\n         }\n \n-        return (DataStore) dataStoreMgr.getDataStore(store.getId(), DataStoreRole.Primary);\n+        return dataStoreMgr.getDataStore(store.getId(), DataStoreRole.Primary);\n     }\n \n     @Override\n     @SuppressWarnings(\"rawtypes\")\n     public PrimaryDataStoreInfo createPool(CreateStoragePoolCmd cmd) throws ResourceInUseException, IllegalArgumentException, UnknownHostException,\n-            ResourceUnavailableException {\n+    ResourceUnavailableException {\n         String providerName = cmd.getStorageProviderName();\n         DataStoreProvider storeProvider = dataStoreProviderMgr.getDataStoreProvider(providerName);\n \n@@ -695,7 +687,7 @@ public PrimaryDataStoreInfo createPool(CreateStoragePoolCmd cmd) throws Resource\n                         \"Missing parameter hypervisor. Hypervisor type is required to create zone wide primary storage.\");\n             }\n             if (hypervisorType != HypervisorType.KVM && hypervisorType != HypervisorType.VMware &&\n-                hypervisorType != HypervisorType.Any) {\n+                    hypervisorType != HypervisorType.Any) {\n                 throw new InvalidParameterValueException(\n                         \"zone wide storage pool is not supported for hypervisor type \" + hypervisor);\n             }\n@@ -883,16 +875,16 @@ public void createCapacityEntry(StoragePoolVO storagePool, short capacityType, l\n         if (storagePool.getPoolType() == StoragePoolType.NetworkFilesystem) {\n             BigDecimal overProvFactor = getStorageOverProvisioningFactor(storagePool.getDataCenterId());\n             totalOverProvCapacity = overProvFactor.multiply(new BigDecimal(storagePool.getCapacityBytes())).longValue();// All\n-                                                                                                                        // this\n-                                                                                                                        // for\n-                                                                                                                        // the\n-                                                                                                                        // inaccuracy\n-                                                                                                                        // of\n-                                                                                                                        // floats\n-                                                                                                                        // for\n-                                                                                                                        // big\n-                                                                                                                        // number\n-                                                                                                                        // multiplication.\n+            // this\n+            // for\n+            // the\n+            // inaccuracy\n+            // of\n+            // floats\n+            // for\n+            // big\n+            // number\n+            // multiplication.\n         } else {\n             totalOverProvCapacity = storagePool.getCapacityBytes();\n         }\n@@ -1103,63 +1095,34 @@ public void cleanupStorage(boolean recurring) {\n     @Override\n     @DB\n     public void cleanupSecondaryStorage(boolean recurring) {\n+        // NOTE that object_store refactor will immediately delete the object from secondary storage when deleteTemplate etc api is issued.\n+        // so here we don't need to issue DeleteCommand to resource anymore, only need to remove db entry.\n         try {\n-            // Cleanup templates in secondary storage hosts\n+            // Cleanup templates in template_store_ref\n             List<DataStore> imageStores = this.dataStoreMgr.getImageStoresByScope(new ZoneScope(null));\n             for (DataStore store : imageStores) {\n                 try {\n                     long storeId = store.getId();\n                     List<TemplateDataStoreVO> destroyedTemplateStoreVOs = this._templateStoreDao.listDestroyed(storeId);\n                     s_logger.debug(\"Secondary storage garbage collector found \" + destroyedTemplateStoreVOs.size()\n-                            + \" templates to cleanup on secondary storage host: \" + store.getName());\n+                            + \" templates to cleanup on template_store_ref for store: \" + store.getName());\n                     for (TemplateDataStoreVO destroyedTemplateStoreVO : destroyedTemplateStoreVOs) {\n-                        if (!_tmpltMgr.templateIsDeleteable(destroyedTemplateStoreVO.getTemplateId())) {\n-                            if (s_logger.isDebugEnabled()) {\n-                                s_logger.debug(\"Not deleting template at: \" + destroyedTemplateStoreVO);\n-                            }\n-                            continue;\n-                        }\n-\n                         if (s_logger.isDebugEnabled()) {\n-                            s_logger.debug(\"Deleting template store: \" + destroyedTemplateStoreVO);\n-                        }\n-\n-                        VMTemplateVO destroyedTemplate = this._vmTemplateDao.findById(destroyedTemplateStoreVO.getTemplateId());\n-                        if (destroyedTemplate == null) {\n-                            s_logger.error(\"Cannot find template : \" + destroyedTemplateStoreVO.getTemplateId() + \" from template table\");\n-                            throw new CloudRuntimeException(\"Template \" + destroyedTemplateStoreVO.getTemplateId()\n-                                    + \" is found in secondary storage, but not found in template table\");\n-                        }\n-                        String installPath = destroyedTemplateStoreVO.getInstallPath();\n-\n-                        TemplateInfo tmpl = tmplFactory.getTemplate(destroyedTemplateStoreVO.getTemplateId(), store);\n-                        if (installPath != null) {\n-                            EndPoint ep = _epSelector.select(store);\n-                            Command cmd = new DeleteCommand(tmpl.getTO());\n-                            Answer answer = ep.sendMessage(cmd);\n-\n-                            if (answer == null || !answer.getResult()) {\n-                                s_logger.debug(\"Failed to delete \" + destroyedTemplateStoreVO + \" due to \"\n-                                        + ((answer == null) ? \"answer is null\" : answer.getDetails()));\n-                            } else {\n-                                _templateStoreDao.remove(destroyedTemplateStoreVO.getId());\n-                                s_logger.debug(\"Deleted template at: \" + destroyedTemplateStoreVO.getInstallPath());\n-                            }\n-                        } else {\n-                            _templateStoreDao.remove(destroyedTemplateStoreVO.getId());\n+                            s_logger.debug(\"Deleting template store DB entry: \" + destroyedTemplateStoreVO);\n                         }\n+                        _templateStoreDao.remove(destroyedTemplateStoreVO.getId());\n                     }\n                 } catch (Exception e) {\n-                    s_logger.warn(\"problem cleaning up templates in secondary storage store \" + store.getName(), e);\n+                    s_logger.warn(\"problem cleaning up templates in template_store_ref for store: \" + store.getName(), e);\n                 }\n             }\n \n-            // CleanUp snapshots on Secondary Storage.\n+            // CleanUp snapshots on snapshot_store_ref\n             for (DataStore store : imageStores) {\n                 try {\n                     List<SnapshotDataStoreVO> destroyedSnapshotStoreVOs = _snapshotStoreDao.listDestroyed(store.getId());\n                     s_logger.debug(\"Secondary storage garbage collector found \" + destroyedSnapshotStoreVOs.size()\n-                            + \" snapshots to cleanup on secondary storage host: \" + store.getName());\n+                            + \" snapshots to cleanup on snapshot_store_ref for store: \" + store.getName());\n                     for (SnapshotDataStoreVO destroyedSnapshotStoreVO : destroyedSnapshotStoreVOs) {\n                         // check if this snapshot has child\n                         SnapshotInfo snap = snapshotFactory.getSnapshot(destroyedSnapshotStoreVO.getSnapshotId(), store);\n@@ -1169,70 +1132,37 @@ public void cleanupSecondaryStorage(boolean recurring) {\n                         }\n \n                         if (s_logger.isDebugEnabled()) {\n-                            s_logger.debug(\"Deleting snapshot on store: \" + destroyedSnapshotStoreVO);\n+                            s_logger.debug(\"Deleting snapshot store DB entry: \" + destroyedSnapshotStoreVO);\n                         }\n \n-                        String installPath = destroyedSnapshotStoreVO.getInstallPath();\n-\n-                        if (installPath != null) {\n-                            EndPoint ep = _epSelector.select(store);\n-                            DeleteCommand cmd = new DeleteCommand(snap.getTO());\n-                            Answer answer = ep.sendMessage(cmd);\n-                            if (answer == null || !answer.getResult()) {\n-                                s_logger.debug(\"Failed to delete \" + destroyedSnapshotStoreVO + \" due to \"\n-                                        + ((answer == null) ? \"answer is null\" : answer.getDetails()));\n-                            } else {\n-                                _volumeStoreDao.remove(destroyedSnapshotStoreVO.getId());\n-                                s_logger.debug(\"Deleted snapshot at: \" + destroyedSnapshotStoreVO.getInstallPath());\n-                            }\n-                        } else {\n-                            _snapshotStoreDao.remove(destroyedSnapshotStoreVO.getId());\n-                        }\n+                        _snapshotStoreDao.remove(destroyedSnapshotStoreVO.getId());\n                     }\n \n                 } catch (Exception e2) {\n-                    s_logger.warn(\"problem cleaning up snapshots in secondary storage store \" + store.getName(), e2);\n+                    s_logger.warn(\"problem cleaning up snapshots in snapshot_store_ref for store: \" + store.getName(), e2);\n                 }\n \n             }\n \n-            // CleanUp volumes on Secondary Storage.\n+            // CleanUp volumes on volume_store_ref\n             for (DataStore store : imageStores) {\n                 try {\n                     List<VolumeDataStoreVO> destroyedStoreVOs = _volumeStoreDao.listDestroyed(store.getId());\n                     s_logger.debug(\"Secondary storage garbage collector found \" + destroyedStoreVOs.size()\n-                            + \" volumes to cleanup on secondary storage host: \" + store.getName());\n+                            + \" volumes to cleanup on volume_store_ref for store: \" + store.getName());\n                     for (VolumeDataStoreVO destroyedStoreVO : destroyedStoreVOs) {\n                         if (s_logger.isDebugEnabled()) {\n-                            s_logger.debug(\"Deleting volume on store: \" + destroyedStoreVO);\n-                        }\n-\n-                        String installPath = destroyedStoreVO.getInstallPath();\n-\n-                        VolumeInfo vol = this.volFactory.getVolume(destroyedStoreVO.getVolumeId(), store);\n-\n-                        if (installPath != null) {\n-                            EndPoint ep = _epSelector.select(store);\n-                            DeleteCommand cmd = new DeleteCommand(vol.getTO());\n-                            Answer answer = ep.sendMessage(cmd);\n-                            if (answer == null || !answer.getResult()) {\n-                                s_logger.debug(\"Failed to delete \" + destroyedStoreVO + \" due to \"\n-                                        + ((answer == null) ? \"answer is null\" : answer.getDetails()));\n-                            } else {\n-                                _volumeStoreDao.remove(destroyedStoreVO.getId());\n-                                s_logger.debug(\"Deleted volume at: \" + destroyedStoreVO.getInstallPath());\n-                            }\n-                        } else {\n-                            _volumeStoreDao.remove(destroyedStoreVO.getId());\n+                            s_logger.debug(\"Deleting volume store DB entry: \" + destroyedStoreVO);\n                         }\n+                        _volumeStoreDao.remove(destroyedStoreVO.getId());\n                     }\n \n                 } catch (Exception e2) {\n-                    s_logger.warn(\"problem cleaning up volumes in secondary storage store \" + store.getName(), e2);\n+                    s_logger.warn(\"problem cleaning up volumes in volume_store_ref for store: \" + store.getName(), e2);\n                 }\n             }\n         } catch (Exception e3) {\n-            s_logger.warn(\"problem cleaning up secondary storage \", e3);\n+            s_logger.warn(\"problem cleaning up secondary storage DB entries. \", e3);\n         }\n     }\n \n@@ -1251,7 +1181,7 @@ public String getPrimaryStorageNameLabel(VolumeVO volume) {\n     @Override\n     @DB\n     public PrimaryDataStoreInfo preparePrimaryStorageForMaintenance(Long primaryStorageId) throws ResourceUnavailableException,\n-            InsufficientCapacityException {\n+    InsufficientCapacityException {\n         Long userId = UserContext.current().getCallerUserId();\n         User user = _userDao.findById(userId);\n         Account account = UserContext.current().getCaller();\n@@ -1356,7 +1286,7 @@ public void onManagementNodeLeft(List<ManagementServerHostVO> nodeList, long sel\n                         if (pool != null\n                                 && (pool.getStatus().equals(StoragePoolStatus.ErrorInMaintenance)\n                                         || pool.getStatus().equals(StoragePoolStatus.PrepareForMaintenance) || pool.getStatus().equals(\n-                                        StoragePoolStatus.CancelMaintenance))) {\n+                                                StoragePoolStatus.CancelMaintenance))) {\n                             _storagePoolWorkDao.removePendingJobsOnMsRestart(vo.getMsid(), poolId);\n                             pool.setStatus(StoragePoolStatus.ErrorInMaintenance);\n                             _storagePoolDao.update(poolId, pool);\n@@ -1567,8 +1497,9 @@ private boolean checkUsagedSpace(StoragePool pool) {\n     @Override\n     public boolean storagePoolHasEnoughIops(List<Volume> requestedVolumes,\n             StoragePool pool) {\n-        if (requestedVolumes == null || requestedVolumes.isEmpty() || pool == null)\n+        if (requestedVolumes == null || requestedVolumes.isEmpty() || pool == null) {\n             return false;\n+        }\n \n         long currentIops = 0;\n \n@@ -1600,11 +1531,13 @@ public boolean storagePoolHasEnoughIops(List<Volume> requestedVolumes,\n     @Override\n     public boolean storagePoolHasEnoughSpace(List<Volume> volumes,\n             StoragePool pool) {\n-        if (volumes == null || volumes.isEmpty())\n+        if (volumes == null || volumes.isEmpty()){\n             return false;\n+        }\n \n-        if (!checkUsagedSpace(pool))\n+        if (!checkUsagedSpace(pool)) {\n             return false;\n+        }\n \n         // allocated space includes template of specified volume\n         StoragePoolVO poolVO = _storagePoolDao.findById(pool.getId());\n@@ -1617,8 +1550,9 @@ public boolean storagePoolHasEnoughSpace(List<Volume> volumes,\n                     allocatedSizeWithtemplate = _capacityMgr.getAllocatedPoolCapacity(poolVO, tmpl);\n                 }\n             }\n-            if (volume.getState() != Volume.State.Ready)\n+            if (volume.getState() != Volume.State.Ready) {\n                 totalAskingSize = totalAskingSize + volume.getSize();\n+            }\n         }\n \n         long totalOverProvCapacity;",
                "raw_url": "https://github.com/apache/cloudstack/raw/2c31f38c05c16d661812cb89317eb2d4e6c8faf3/server/src/com/cloud/storage/StorageManagerImpl.java",
                "sha": "ff323cbbedfb03a16f65510d8e6e1d72d23076ae",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-3145:StorageManager-Scavenger NPEs when cleaning up\ntemplates.",
        "parent": "https://github.com/apache/cloudstack/commit/1659ee225c936b074bae1ede955194f60c546c02",
        "repo": "cloudstack",
        "unit_tests": [
            "StorageManagerImplTest.java"
        ]
    },
    "cloudstack_2c3c88e": {
        "bug_id": "cloudstack_2c3c88e",
        "commit": "https://github.com/apache/cloudstack/commit/2c3c88e2092dae44de823cf52cb3e2cc787bb3a1",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/2c3c88e2092dae44de823cf52cb3e2cc787bb3a1/core/src/main/java/com/cloud/info/ConsoleProxyInfo.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/core/src/main/java/com/cloud/info/ConsoleProxyInfo.java?ref=2c3c88e2092dae44de823cf52cb3e2cc787bb3a1",
                "deletions": 9,
                "filename": "core/src/main/java/com/cloud/info/ConsoleProxyInfo.java",
                "patch": "@@ -55,18 +55,16 @@ public ConsoleProxyInfo(boolean sslEnabled, String proxyIpAddress, int port, int\n \n     private String formatProxyAddress(String consoleProxyUrlDomain, String proxyIpAddress) {\n         StringBuffer sb = new StringBuffer();\n-        // Domain in format *.example.com, proxy IP is 1.2.3.4 --> 1-2-3-4.example.com\n-        if (consoleProxyUrlDomain.startsWith(\"*\")) {\n+        if (StringUtils.isBlank(consoleProxyUrlDomain)) {\n+            // Blank config, we use the proxy IP\n+            sb.append(proxyIpAddress);\n+        } else if (consoleProxyUrlDomain.startsWith(\"*\")) {\n+            // Domain in format *.example.com, proxy IP is 1.2.3.4 --> 1-2-3-4.example.com\n             sb.append(proxyIpAddress.replaceAll(\"\\\\.\", \"-\"));\n             sb.append(consoleProxyUrlDomain.substring(1)); // skip the *\n-\n-        // Otherwise we assume a valid domain if config not blank\n-        } else if (StringUtils.isNotBlank(consoleProxyUrlDomain)) {\n-            sb.append(consoleProxyUrlDomain);\n-\n-        // Blank config, we use the proxy IP\n         } else {\n-            sb.append(proxyIpAddress);\n+            // Otherwise we assume a valid domain if config not blank\n+            sb.append(consoleProxyUrlDomain);\n         }\n         return sb.toString();\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/2c3c88e2092dae44de823cf52cb3e2cc787bb3a1/core/src/main/java/com/cloud/info/ConsoleProxyInfo.java",
                "sha": "7e1be6a9cadbad623e2a745c161a4ccde22d7765",
                "status": "modified"
            }
        ],
        "message": "console-proxy: fix potential NPE condition (#3419)\n\nWhen checking if the console proxy URL domain starts with *, the code\r\ndoes not check if the provided string is null. When domain is not\r\nconfigured the IP address should be used.\r\n\r\nFixes #3164\r\n\r\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/6784cc516b76fb73b9f454c1ffaddb9a6c928a82",
        "repo": "cloudstack",
        "unit_tests": [
            "ConsoleProxyInfoTest.java"
        ]
    },
    "cloudstack_2e29c89": {
        "bug_id": "cloudstack_2e29c89",
        "commit": "https://github.com/apache/cloudstack/commit/2e29c89b841f6c00e30ea8fdc02510c2dbb41d39",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/2e29c89b841f6c00e30ea8fdc02510c2dbb41d39/framework/config/src/org/apache/cloudstack/framework/config/impl/ConfigDepotImpl.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/config/src/org/apache/cloudstack/framework/config/impl/ConfigDepotImpl.java?ref=2e29c89b841f6c00e30ea8fdc02510c2dbb41d39",
                "deletions": 5,
                "filename": "framework/config/src/org/apache/cloudstack/framework/config/impl/ConfigDepotImpl.java",
                "patch": "@@ -25,13 +25,13 @@\n import javax.inject.Inject;\n \n import org.apache.log4j.Logger;\n-\n import org.apache.cloudstack.framework.config.ConfigDepot;\n import org.apache.cloudstack.framework.config.ConfigDepotAdmin;\n import org.apache.cloudstack.framework.config.ConfigKey;\n import org.apache.cloudstack.framework.config.Configurable;\n import org.apache.cloudstack.framework.config.ScopedConfigStorage;\n import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n+import org.apache.commons.lang.ObjectUtils;\n \n import com.cloud.utils.Pair;\n import com.cloud.utils.component.SystemIntegrityChecker;\n@@ -97,10 +97,8 @@ public void populateConfigurations() {\n                     _configDao.persist(vo);\n                 } else {\n                     if (vo.isDynamic() != key.isDynamic() ||\n-                        !vo.getDescription().equals(key.description()) ||\n-                        ((vo.getDefaultValue() != null && key.defaultValue() == null) ||\n-                         (vo.getDefaultValue() == null && key.defaultValue() != null) ||\n-                        !vo.getDefaultValue().equals(key.defaultValue()))) {\n+                        !ObjectUtils.equals(vo.getDescription(), vo.getDescription()) ||\n+                        !ObjectUtils.equals(vo.getDefaultValue(), key.defaultValue())) {\n                         vo.setDynamic(key.isDynamic());\n                         vo.setDescription(key.description());\n                         vo.setDefaultValue(key.defaultValue());",
                "raw_url": "https://github.com/apache/cloudstack/raw/2e29c89b841f6c00e30ea8fdc02510c2dbb41d39/framework/config/src/org/apache/cloudstack/framework/config/impl/ConfigDepotImpl.java",
                "sha": "97430ef91f927b1a852ca12556d4a772cce3245e",
                "status": "modified"
            }
        ],
        "message": "Default null value in ConfigKey results in NPE on second start",
        "parent": "https://github.com/apache/cloudstack/commit/13e7a7308b75bfccd1f3fb9686244ad2129ef7f0",
        "repo": "cloudstack",
        "unit_tests": [
            "ConfigDepotImplTest.java"
        ]
    },
    "cloudstack_2f832fd": {
        "bug_id": "cloudstack_2f832fd",
        "commit": "https://github.com/apache/cloudstack/commit/2f832fddff4786dbc3cafd5934cf65e3c6f2db99",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/2f832fddff4786dbc3cafd5934cf65e3c6f2db99/server/src/com/cloud/user/AccountManagerImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/user/AccountManagerImpl.java?ref=2f832fddff4786dbc3cafd5934cf65e3c6f2db99",
                "deletions": 1,
                "filename": "server/src/com/cloud/user/AccountManagerImpl.java",
                "patch": "@@ -1406,7 +1406,9 @@ public boolean deleteUserAccount(long accountId) {\n         AccountVO account = _accountDao.findById(accountId);\n \n         if (account == null || account.getRemoved() != null) {\n-            s_logger.info(\"The account:\" + account.getAccountName() + \" is already removed\");\n+            if (account != null) {\n+                s_logger.info(\"The account:\" + account.getAccountName() + \" is already removed\");\n+            }\n             return true;\n         }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/2f832fddff4786dbc3cafd5934cf65e3c6f2db99/server/src/com/cloud/user/AccountManagerImpl.java",
                "sha": "75a97bc29f9a8b51fe6cf76c71613be7f1b9029f",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-7164: fix NPE",
        "parent": "https://github.com/apache/cloudstack/commit/165618ac9ac2937fbb1d7ff0da89de1abba4ccc1",
        "repo": "cloudstack",
        "unit_tests": [
            "AccountManagerImplTest.java"
        ]
    },
    "cloudstack_2fca9d0": {
        "bug_id": "cloudstack_2fca9d0",
        "commit": "https://github.com/apache/cloudstack/commit/2fca9d0a49ff1747256537b49baafd1d991ef41b",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/2fca9d0a49ff1747256537b49baafd1d991ef41b/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=2fca9d0a49ff1747256537b49baafd1d991ef41b",
                "deletions": 1,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -1304,7 +1304,7 @@ public TemplateResponse createIsoResponse(VirtualMachineTemplate result) {\n     @Override\n     public List<TemplateResponse> createTemplateResponses(long templateId, Long zoneId, boolean readyOnly) {\n         List<DataCenterVO> dcs = new ArrayList<DataCenterVO>();\n-        if (zoneId == -1) {\n+        if (zoneId == null || zoneId == -1) {\n             dcs.addAll(ApiDBUtils.listZones());\n             List<TemplateResponse> response = new ArrayList<TemplateResponse>();\n             for (DataCenterVO dc : dcs ) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/2fca9d0a49ff1747256537b49baafd1d991ef41b/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "25b7d7140dab58d7ad9abbd87175ea4fbf34302a",
                "status": "modified"
            }
        ],
        "message": "bug 10603: fixed NPE in listTemplates\nstatus 10603: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/01a47e0717d5db995ce6b7c72325e19a45a6018b",
        "repo": "cloudstack",
        "unit_tests": [
            "ApiResponseHelperTest.java"
        ]
    },
    "cloudstack_31df729": {
        "bug_id": "cloudstack_31df729",
        "commit": "https://github.com/apache/cloudstack/commit/31df729008c748e6eafe49ff86e1da618013c551",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/31df729008c748e6eafe49ff86e1da618013c551/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/UserVmManagerImpl.java?ref=31df729008c748e6eafe49ff86e1da618013c551",
                "deletions": 1,
                "filename": "server/src/com/cloud/vm/UserVmManagerImpl.java",
                "patch": "@@ -1782,7 +1782,7 @@ public UserVm updateVirtualMachine(UpdateVMCmd cmd)\n \n         String description = \"\";\n \n-        if (!displayName.equals(vmInstance.getDisplayName())) {\n+        if (displayName != null && !displayName.equals(vmInstance.getDisplayName())) {\n             description += \"New display name: \" + displayName + \". \";\n         }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/31df729008c748e6eafe49ff86e1da618013c551/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "sha": "e5faaf142e02798a8dd1e94221b5652619ff48e5",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-3184: updateVirtualMachine api gives java NPE.\n\nSigned-off-by: Prasanna Santhanam <tsp@apache.org>",
        "parent": "https://github.com/apache/cloudstack/commit/c49674300a84f65395db003f2250b987c61f05f6",
        "repo": "cloudstack",
        "unit_tests": [
            "UserVmManagerImplTest.java"
        ]
    },
    "cloudstack_32e84fe": {
        "bug_id": "cloudstack_32e84fe",
        "commit": "https://github.com/apache/cloudstack/commit/32e84feeccf5342dcb1bb39fb3ecc9077a7d89a5",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/32e84feeccf5342dcb1bb39fb3ecc9077a7d89a5/agent/src/com/cloud/agent/resource/computing/LibvirtComputingResource.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/agent/src/com/cloud/agent/resource/computing/LibvirtComputingResource.java?ref=32e84feeccf5342dcb1bb39fb3ecc9077a7d89a5",
                "deletions": 2,
                "filename": "agent/src/com/cloud/agent/resource/computing/LibvirtComputingResource.java",
                "patch": "@@ -1836,12 +1836,13 @@ protected Answer execute(final PrimaryStorageDownloadCommand cmd) {\n \t\t\t\t}\n \n \t\t\t\tif (secondaryPool != null) {\n-\t\t\t\t\tsynchronized (getStoragePool(secondaryPool.getUUIDString())) {\n+\t\t\t\t\tString uuid = secondaryPool.getUUIDString();\n+\t\t\t\t\tsynchronized (getStoragePool(uuid)) {\n \t\t\t\t\t\tsecondaryPool.destroy();\n \t\t\t\t\t\tsecondaryPool.undefine();\n \t\t\t\t\t\tsecondaryPool.free();\n \t\t\t\t\t}\n-\t\t\t\t\trmStoragePool(secondaryPool.getUUIDString());\n+\t\t\t\t\trmStoragePool(uuid);\n \t\t\t\t}\n \t\t\t} catch (LibvirtException l) {\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/32e84feeccf5342dcb1bb39fb3ecc9077a7d89a5/agent/src/com/cloud/agent/resource/computing/LibvirtComputingResource.java",
                "sha": "3157bd86c35d2d16e505d1fa0a91a2db7d1861db",
                "status": "modified"
            }
        ],
        "message": "bug 7308: fix NPE when downloading primarystorage\nstatus 7308: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/85cc68a74226cc09d16ee3ab9e70bca15ea220c9",
        "repo": "cloudstack",
        "unit_tests": [
            "LibvirtComputingResourceTest.java"
        ]
    },
    "cloudstack_3455a0f": {
        "bug_id": "cloudstack_3455a0f",
        "commit": "https://github.com/apache/cloudstack/commit/3455a0f563d364cfb51816f0ba52461fef136ea8",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/3455a0f563d364cfb51816f0ba52461fef136ea8/server/src/com/cloud/server/ManagementServerImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/ManagementServerImpl.java?ref=3455a0f563d364cfb51816f0ba52461fef136ea8",
                "deletions": 1,
                "filename": "server/src/com/cloud/server/ManagementServerImpl.java",
                "patch": "@@ -4012,7 +4012,8 @@ protected boolean updateTemplateOrIsoPermissions(UpdateTemplateOrIsoPermissionsC\n         \n         _templateDao.update(template.getId(), updatedTemplate);\n \n-        Long domainId = account.getDomainId();\n+        Long domainId;\n+        domainId =  (null == account) ?  DomainVO.ROOT_DOMAIN : account.getDomainId(); // Account == null for 8096 and so its safe for domainid = ROOT\n         if (\"add\".equalsIgnoreCase(operation)) {\n             txn.start();\n             for (String accountName : accountNames) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/3455a0f563d364cfb51816f0ba52461fef136ea8/server/src/com/cloud/server/ManagementServerImpl.java",
                "sha": "2f2b5ab10c87cfc44d66b8d451d2371fd5c9a004",
                "status": "modified"
            }
        ],
        "message": "bug 7114: Fix NPE for  updateTemplatePermissions when accessed via 8096. This was happening due to accountObj being null in User Context when accessed via 8096. Why we set it to null seems to be a hack to me.\nstatus 7114: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/351f98ceef78154a4ad9eceedd59b3104e85e6b6",
        "repo": "cloudstack",
        "unit_tests": [
            "ManagementServerImplTest.java"
        ]
    },
    "cloudstack_346a6fe": {
        "bug_id": "cloudstack_346a6fe",
        "commit": "https://github.com/apache/cloudstack/commit/346a6fe80a2dba71fbca15283155cfbc0d36ff98",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/346a6fe80a2dba71fbca15283155cfbc0d36ff98/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=346a6fe80a2dba71fbca15283155cfbc0d36ff98",
                "deletions": 2,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -2383,8 +2383,10 @@ public UserVmResponse newUserVmResponse(UserVmData userVmData, boolean caller_is\n                 sgr.setDescription(sgd.getDescription());\n                 \n                 Account account = ApiDBUtils.findAccountByNameDomain(sgd.getAccountName(), sgd.getDomainId());\n-                populateAccount(sgr, account.getId());\n-                populateDomain(sgr, sgd.getDomainId());\n+                if (account != null) {\n+                    populateAccount(sgr, account.getId());\n+                    populateDomain(sgr, account.getDomainId());\n+                }\n                 \n                 sgr.setObjectName(sgd.getObjectName());\n                 securityGroupResponse.add(sgr);",
                "raw_url": "https://github.com/apache/cloudstack/raw/346a6fe80a2dba71fbca15283155cfbc0d36ff98/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "4c22de4318ad342092e5b268029952d8cd4379b5",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE.",
        "parent": "https://github.com/apache/cloudstack/commit/80dc2c0b1ab1124468dc13c6b88123ea10d579dd",
        "repo": "cloudstack",
        "unit_tests": [
            "ApiResponseHelperTest.java"
        ]
    },
    "cloudstack_364e1e1": {
        "bug_id": "cloudstack_364e1e1",
        "commit": "https://github.com/apache/cloudstack/commit/364e1e1c4a64036497d47b71708ec75bb5b592bc",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/364e1e1c4a64036497d47b71708ec75bb5b592bc/server/src/com/cloud/network/NetworkManagerImpl.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/NetworkManagerImpl.java?ref=364e1e1c4a64036497d47b71708ec75bb5b592bc",
                "deletions": 2,
                "filename": "server/src/com/cloud/network/NetworkManagerImpl.java",
                "patch": "@@ -1180,8 +1180,13 @@ public void assignToLoadBalancer(AssignToLoadBalancerRuleCmd cmd)  throws Networ\n         }\n \n         DomainRouterVO syncObject = _routerMgr.getRouter(loadBalancer.getIpAddress());\n-        cmd.synchronizeCommand(\"Router\", syncObject.getId());\n-\n+        if(syncObject == null){\n+        \tthrow new InvalidParameterValueException(\"Failed to assign to load balancer \" + loadBalancerId + \", the domain router was not found at \"+loadBalancer.getIpAddress());\n+        }\n+        else{\n+        \tcmd.synchronizeCommand(\"Router\", syncObject.getId());\n+        }\n+        \n         // Permission check...\n         Account account = UserContext.current().getAccount();\n         if (account != null) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/364e1e1c4a64036497d47b71708ec75bb5b592bc/server/src/com/cloud/network/NetworkManagerImpl.java",
                "sha": "7c4982a741b202bdfdc323efc11ff6c7597f073c",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/364e1e1c4a64036497d47b71708ec75bb5b592bc/server/src/com/cloud/storage/StorageManagerImpl.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/StorageManagerImpl.java?ref=364e1e1c4a64036497d47b71708ec75bb5b592bc",
                "deletions": 11,
                "filename": "server/src/com/cloud/storage/StorageManagerImpl.java",
                "patch": "@@ -2160,17 +2160,10 @@ public synchronized StoragePoolVO preparePrimaryStorageForMaintenance(PreparePri\n \t\t\t\ts_logger.error(msg);\n \t\t\t\tthrow new ResourceUnavailableException(msg);\n \t\t\t}\n-\t\t\t\n-        \tprimaryStorage = _storagePoolDao.findById(primaryStorageId);\n-        \tif(primaryStorage == null)\n-        \t{\n-        \t\ts_logger.warn(\"The primary storage does not exist\");\n-        \t\tthrow new InvalidParameterValueException(\"Primary storage doesn't exist\");\n-        \t}\t\n         \t\n-//        \tif (!primaryStorage.getStatus().equals(Status.Up)) {\n-//    \t\t\tthrow new InvalidParameterValueException(\"Primary storage with id \" + primaryStorageId + \" is not ready for migration, as the status is:\" + primaryStorage.getStatus().toString());\n-//        \t}        \n+        \tif (!primaryStorage.getStatus().equals(Status.Up) && !primaryStorage.getStatus().equals(Status.ErrorInMaintenance)) {\n+    \t\t\tthrow new InvalidParameterValueException(\"Primary storage with id \" + primaryStorageId + \" is not ready for migration, as the status is:\" + primaryStorage.getStatus().toString());\n+        \t}        \n         \t//set the pool state to prepare for maintenance\n         \tprimaryStorage.setStatus(Status.PrepareForMaintenance);\n         \t_storagePoolDao.persist(primaryStorage);\n@@ -2195,7 +2188,7 @@ public synchronized StoragePoolVO preparePrimaryStorageForMaintenance(PreparePri\n         \t\t\tcontinue;\n         \t\t\n         \t\t//shut down the running vms\n-        \t\tif(vmInstance.getState().equals(State.Running) || vmInstance.getState().equals(State.Stopped) || vmInstance.getState().equals(State.Stopping) || vmInstance.getState().equals(State.Starting))\n+        \t\tif(vmInstance.getState().equals(State.Running) || vmInstance.getState().equals(State.Starting))\n         \t\t{\n         \t\t\t\n         \t\t\t//if the instance is of type consoleproxy, call the console proxy",
                "raw_url": "https://github.com/apache/cloudstack/raw/364e1e1c4a64036497d47b71708ec75bb5b592bc/server/src/com/cloud/storage/StorageManagerImpl.java",
                "sha": "1c84aca230798cacfef391071c28bf360cba6595",
                "status": "modified"
            }
        ],
        "message": "bug 7034,6869: fixing the storage pools issue, and the npe at load balancer if the router is not found.\nstatus 7034, 6869: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/1eef924c6c68b91f7404d129792655c3c2c288bd",
        "repo": "cloudstack",
        "unit_tests": [
            "StorageManagerImplTest.java"
        ]
    },
    "cloudstack_3817178": {
        "bug_id": "cloudstack_3817178",
        "commit": "https://github.com/apache/cloudstack/commit/381717854c3ad9f2b3450a5195b7457bb453f296",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/381717854c3ad9f2b3450a5195b7457bb453f296/api/src/com/cloud/user/AccountService.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/user/AccountService.java?ref=381717854c3ad9f2b3450a5195b7457bb453f296",
                "deletions": 1,
                "filename": "api/src/com/cloud/user/AccountService.java",
                "patch": "@@ -145,7 +145,8 @@\n \t\n \tAccount getActiveAccount(String accountName, Long domainId);\n \t\n-\tAccount getAccount(Long accountId);\n+\tAccount getActiveAccount(Long accountId);\n \t\n+\tAccount getAccount(Long accountId);\n \n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/381717854c3ad9f2b3450a5195b7457bb453f296/api/src/com/cloud/user/AccountService.java",
                "sha": "49fa836369c18822bbc000aa24fd1213a368698c",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/381717854c3ad9f2b3450a5195b7457bb453f296/server/src/com/cloud/network/NetworkManagerImpl.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/NetworkManagerImpl.java?ref=381717854c3ad9f2b3450a5195b7457bb453f296",
                "deletions": 7,
                "filename": "server/src/com/cloud/network/NetworkManagerImpl.java",
                "patch": "@@ -1121,7 +1121,7 @@ public void release(VirtualMachineProfile<? extends VMInstanceVO> vmProfile, boo\n     private Account findAccountByIpAddress(Ip ipAddress) {\n         IPAddressVO address = _ipAddressDao.findById(ipAddress);\n         if ((address != null) && (address.getAllocatedToAccountId() != null)) {\n-            return _accountMgr.getAccount(address.getAllocatedToAccountId());\n+            return _accountMgr.getActiveAccount(address.getAllocatedToAccountId());\n         }\n         return null;\n     }\n@@ -1160,14 +1160,14 @@ public boolean disassociateIpAddress(DisassociateIPAddrCmd cmd) throws Permissio\n                 return true;\n             }\n \n-            Account Account = _accountMgr.getAccount(accountId);\n-            if (Account == null) {\n+            Account account = _accountMgr.getAccount(accountId);\n+            if (account == null) {\n                 return false;\n             }\n \n             if ((ipVO.getAllocatedToAccountId() == null) || (ipVO.getAllocatedToAccountId().longValue() != accountId)) {\n                 // FIXME: is the user visible in the admin account's domain????\n-                if (!BaseCmd.isAdmin(Account.getType())) {\n+                if (!BaseCmd.isAdmin(account.getType())) {\n                     if (s_logger.isDebugEnabled()) {\n                         s_logger.debug(\"permission denied disassociating IP address \" + ipAddress + \"; acct: \" + accountId + \"; ip (acct / dc / dom / alloc): \"\n                                 + ipVO.getAllocatedToAccountId() + \" / \" + ipVO.getDataCenterId() + \" / \" + ipVO.getAllocatedInDomainId() + \" / \" + ipVO.getAllocatedTime());\n@@ -1566,8 +1566,7 @@ public boolean deleteNetwork(long networkId) throws InvalidParameterValueExcepti\n             }\n         } else {\n             Account owner = _accountMgr.getAccount(network.getAccountId());\n-            Domain domain = _domainDao.findById(owner.getDomainId());\n-            _accountMgr.checkAccess(caller, domain);\n+            _accountMgr.checkAccess(caller, owner);\n         }\n         \n         //Don't allow to remove network if there are non-destroyed vms using it\n@@ -1747,7 +1746,7 @@ public boolean restartNetwork(RestartNetworkCmd cmd) throws ConcurrentOperationE\n             }\n         }\n         \n-        Account owner = _accountMgr.getAccount(cmd.getEntityOwnerId());\n+        Account owner = _accountMgr.getActiveAccount(cmd.getEntityOwnerId());\n         if (!_accountMgr.isAdmin(caller.getType())) {\n             _accountMgr.checkAccess(caller, network);\n         } else {",
                "raw_url": "https://github.com/apache/cloudstack/raw/381717854c3ad9f2b3450a5195b7457bb453f296/server/src/com/cloud/network/NetworkManagerImpl.java",
                "sha": "ffcae31a0631b345fb4b6e968cc5df8603ce6593",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cloudstack/blob/381717854c3ad9f2b3450a5195b7457bb453f296/server/src/com/cloud/user/AccountManagerImpl.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/user/AccountManagerImpl.java?ref=381717854c3ad9f2b3450a5195b7457bb453f296",
                "deletions": 1,
                "filename": "server/src/com/cloud/user/AccountManagerImpl.java",
                "patch": "@@ -1613,12 +1613,22 @@ public Account getActiveAccount(String accountName, Long domainId) {\n        } \n     }\n     \n+    \n     @Override\n-    public Account getAccount(Long accountId) {\n+    public Account getActiveAccount(Long accountId) {\n        if (accountId == null) {\n            throw new InvalidParameterValueException(\"AccountId is required by account search\");\n        } else {\n           return  _accountDao.findById(accountId);\n        } \n     }\n+    \n+    @Override\n+    public Account getAccount(Long accountId) {\n+       if (accountId == null) {\n+           throw new InvalidParameterValueException(\"AccountId is required by account search\");\n+       } else {\n+          return  _accountDao.findByIdIncludingRemoved(accountId);\n+       } \n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/381717854c3ad9f2b3450a5195b7457bb453f296/server/src/com/cloud/user/AccountManagerImpl.java",
                "sha": "f0dbd1f403f57703753f71996973722cd4fabc0c",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE in deleteAccount - search for all accounts (instead of searching for active accounts only)  when do deleteNetwork",
        "parent": "https://github.com/apache/cloudstack/commit/158ed4c622fac32fc04be3f7f5d490f02350810f",
        "repo": "cloudstack",
        "unit_tests": [
            "AccountManagerImplTest.java"
        ]
    },
    "cloudstack_3a14357": {
        "bug_id": "cloudstack_3a14357",
        "commit": "https://github.com/apache/cloudstack/commit/3a143577b9827bd5ab7aaf77e619437f46519b8e",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/3a143577b9827bd5ab7aaf77e619437f46519b8e/scripts/vm/network/security_group.py",
                "changes": 62,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/scripts/vm/network/security_group.py?ref=3a143577b9827bd5ab7aaf77e619437f46519b8e",
                "deletions": 57,
                "filename": "scripts/vm/network/security_group.py",
                "patch": "@@ -116,7 +116,7 @@ def destroy_network_rules_for_vm(vm_name):\n     delete_rules_for_vm_in_bridge_firewall_chain(vm_name)\n     if vm_name.startswith('i-') or vm_name.startswith('r-'):\n         vmchain =  '-'.join(vm_name.split('-')[:-1])\n-        vmchain_default =  '-'.join(vm_name.split('-')[:-2]) + \"-def\"\n+        vmchain_default =  '-'.join(vm_name.split('-')[:-1]) + \"-def\"\n \n     destroy_ebtables_rules(vmchain)\n     \n@@ -201,8 +201,6 @@ def default_network_rules_systemvm(vm_name):\n     vifs = getVifs(vm_name)\n     domid = getvmId(vm_name)\n     vmchain = vm_name\n-    if vm_name.startswith('r-'):\n-        vmchain = '-'.join(vm_name.split('-')[:-1])\n  \n     delete_rules_for_vm_in_bridge_firewall_chain(vm_name)\n   \n@@ -234,7 +232,6 @@ def default_network_rules(vm_name, vm_ip, vm_id, vm_mac):\n     vmName = vm_name \n     domID = getvmId(vm_name)\n     delete_rules_for_vm_in_bridge_firewall_chain(vmName)\n-    vm_name =  '-'.join(vm_name.split('-')[:-1])\n     vmchain = vm_name\n     vmchain_default = '-'.join(vmchain.split('-')[:-1]) + \"-def\"\n     \n@@ -282,7 +279,7 @@ def default_network_rules(vm_name, vm_ip, vm_id, vm_mac):\n def delete_rules_for_vm_in_bridge_firewall_chain(vmName):\n     vm_name = vmName\n     if vm_name.startswith('i-') or vm_name.startswith('r-'):\n-        vm_name =  '-'.join(vm_name.split('-')[:-2])\n+        vm_name =  '-'.join(vm_name.split('-')[:-1])\n     \n     vmchain = vm_name\n     \n@@ -295,52 +292,6 @@ def delete_rules_for_vm_in_bridge_firewall_chain(vmName):\n         except:\n               logging.exception(\"Ignoring failure to delete rules for vm \" + vmName)\n \n-'''  \n-def network_rules_for_rebooted_vm(vmName):\n-    vm_name = vmName\n-    vifs = getVifs(vmName) \n-    logging.debug(\"Found a rebooted VM -- reprogramming rules for  \" + vmName)\n-    \n-    delete_rules_for_vm_in_bridge_firewall_chain(vmName)\n-    if 1 in [ vm_name.startswith(c) for c in ['r-', 's-', 'v-'] ]:\n-        default_network_rules_systemvm(session, {\"vmName\":vmName})\n-        return True\n-    \n-    vmchain = '-'.join(vm_name.split('-')[:-1])\n-    vmchain_default = '-'.join(vm_name.split('-')[:-2]) + \"-def\"\n-\n-    for v in vifs:\n-        iptables('-A', 'BRIDGE-FIREWALL', '-m', 'physdev', '--physdev-is-bridged', '--physdev-out', v, '-j', vmchain_default)\n-        iptables('-A', 'BRIDGE-FIREWALL', '-m', 'physdev', '--physdev-is-bridged', '--physdev-in', v, '-j', vmchain_default)\n-\n-    #change antispoof rule in vmchain\n-    try:\n-        delcmd = \"iptables -S \" +  vmchain_default + \" | grep  physdev-in | sed 's/-A/-D/'\"\n-        inscmd = \"iptables -S \" +  vmchain_default + \" | grep  physdev-in | grep vif | sed -r 's/vif[0-9]+.0/\" + vif + \"/' | sed 's/-A/-I/'\"\n-        inscmd2 = \"iptables -S \" +  vmchain_default + \" | grep  physdev-in | grep tap | sed -r 's/tap[0-9]+.0/\" + tap + \"/' | sed 's/-A/-I/'\"\n-        \n-        ipts = []\n-        for cmd in [delcmd, inscmd, inscmd2]:\n-            cmds = bash('-c', cmd.split(' ')).split('\\n')\n-            cmds.pop()\n-            for c in cmds:\n-                    ipt = c.split(' ')\n-                    ipt.pop()\n-                    ipts.append(ipt)\n-        \n-        for ipt in ipts:\n-            try:\n-                iptables(ipt)\n-            except:\n-                logging.debug(\"Failed to rewrite antispoofing rules for vm \" + vmName)\n-    except:\n-        logging.debug(\"No rules found for vm \" + vmchain)\n-\n-\n-    rewrite_rule_log_for_vm(vmName, curr_domid)\n-    return True\n-'''  \n-\n def rewrite_rule_log_for_vm(vm_name, new_domid):\n     logfilename = \"/var/run/cloud/\" + vm_name +\".log\"\n     if not os.path.exists(logfilename):\n@@ -395,16 +346,13 @@ def cleanup_rules_for_dead_vms():\n def cleanup_rules():\n   try:\n \n-    chainscmd = \"iptables-save | grep '^:' | grep '.*-def' | awk '{print $1}' | cut -d':' -f2\"\n+    chainscmd = \"iptables-save | grep '^:' | grep -v '.*-def' | awk '{print $1}' | cut -d':' -f2\"\n     chains = execute(chainscmd).split('\\n')\n     cleaned = 0\n     cleanup = []\n     for chain in chains:\n         if 1 in [ chain.startswith(c) for c in ['r-', 'i-', 's-', 'v-'] ]:\n-            if chain.startswith('i-') or chain.startswith('r-'):\n-                vm_name = chain + '-untagged'\n-            else:\n-                vm_name = chain\n+            vm_name = chain\n                 \n             cmd = \"virsh list |grep \" + vm_name \n             try:\n@@ -421,7 +369,7 @@ def cleanup_rules():\n                 cleanup.append(vm_name)\n                 \n     for vmname in cleanup:\n-        destroy_network_rules_for_vm({'vmName':vmname})\n+        destroy_network_rules_for_vm(vmname)\n                     \n     logging.debug(\"Cleaned up rules for \" + str(len(cleanup)) + \" chains\")                \n   except:",
                "raw_url": "https://github.com/apache/cloudstack/raw/3a143577b9827bd5ab7aaf77e619437f46519b8e/scripts/vm/network/security_group.py",
                "sha": "abd7da8c4419519fd02172fd74b81c254563019d",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cloudstack/blob/3a143577b9827bd5ab7aaf77e619437f46519b8e/server/src/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java?ref=3a143577b9827bd5ab7aaf77e619437f46519b8e",
                "deletions": 10,
                "filename": "server/src/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java",
                "patch": "@@ -2010,16 +2010,6 @@ public boolean finalizeDeployment(Commands cmds, VirtualMachineProfile<ConsolePr\n     \tNicProfile controlNic = (NicProfile)profile.getParameter(\"control.nic\");\n         CheckSshCommand check = new CheckSshCommand(profile.getInstanceName(), controlNic.getIp4Address(), 3922, 5, 20);\n         cmds.addCommand(\"checkSsh\", check);\n-        return true;\n-    }\n-    \n-    @Override\n-    public boolean finalizeStart(Commands cmds, VirtualMachineProfile<ConsoleProxyVO> profile, DeployDestination dest, ReservationContext context) {\n-        CheckSshAnswer answer = (CheckSshAnswer)cmds.getAnswer(\"checkSsh\");\n-        if (!answer.getResult()) {\n-            s_logger.warn(\"Unable to ssh to the VM: \" + answer.getDetails());\n-            return false;\n-        }\n         \n         ConsoleProxyVO proxy = profile.getVirtualMachine();\n         List<NicVO> nics = _nicDao.listBy(proxy.getId());\n@@ -2039,6 +2029,17 @@ public boolean finalizeStart(Commands cmds, VirtualMachineProfile<ConsoleProxyVO\n         \t\tproxy.setPrivateMacAddress(nic.getMacAddress());\n         \t}\n         }\n+        _consoleProxyDao.update(proxy.getId(), proxy);\n+        return true;\n+    }\n+    \n+    @Override\n+    public boolean finalizeStart(Commands cmds, VirtualMachineProfile<ConsoleProxyVO> profile, DeployDestination dest, ReservationContext context) {\n+        CheckSshAnswer answer = (CheckSshAnswer)cmds.getAnswer(\"checkSsh\");\n+        if (!answer.getResult()) {\n+            s_logger.warn(\"Unable to ssh to the VM: \" + answer.getDetails());\n+            return false;\n+        }\n         \n         return true;\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/3a143577b9827bd5ab7aaf77e619437f46519b8e/server/src/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java",
                "sha": "da41b0e05b14897065dfeaddf671cd6f41bc85f4",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/3a143577b9827bd5ab7aaf77e619437f46519b8e/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java?ref=3a143577b9827bd5ab7aaf77e619437f46519b8e",
                "deletions": 0,
                "filename": "server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "patch": "@@ -1524,6 +1524,7 @@ public boolean finalizeDeployment(Commands cmds, VirtualMachineProfile<DomainRou\n         \t\trouter.setPrivateMacAddress(nic.getMacAddress());\n         \t}\n         }\n+        _routerDao.update(router.getId(), router);\n         //source NAT address is stored in /proc/cmdline of the domR and gets\n \t\t//reassigned upon powerup. Source NAT rule gets configured in StartRouter command\n         //The command should be sent for domR only, skip for DHCP",
                "raw_url": "https://github.com/apache/cloudstack/raw/3a143577b9827bd5ab7aaf77e619437f46519b8e/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "sha": "e913d48d65be81a1df49db9c7c0b67852060342e",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/cloudstack/blob/3a143577b9827bd5ab7aaf77e619437f46519b8e/server/src/com/cloud/storage/secondary/SecondaryStorageManagerImpl.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/secondary/SecondaryStorageManagerImpl.java?ref=3a143577b9827bd5ab7aaf77e619437f46519b8e",
                "deletions": 18,
                "filename": "server/src/com/cloud/storage/secondary/SecondaryStorageManagerImpl.java",
                "patch": "@@ -1509,6 +1509,26 @@ public boolean finalizeDeployment(Commands cmds,\n \t\tNicProfile controlNic = (NicProfile)profile.getParameter(\"control.nic\");\n         CheckSshCommand check = new CheckSshCommand(profile.getInstanceName(), controlNic.getIp4Address(), 3922, 5, 20);\n         cmds.addCommand(\"checkSsh\", check);\n+        \n+        SecondaryStorageVmVO secVm = profile.getVirtualMachine();\n+\t\t List<NicVO> nics = _nicDao.listBy(secVm.getId());\n+        for (NicVO nic : nics) {\n+        \tNetworkVO network = _networkDao.findById(nic.getNetworkId());\n+        \tif (network.getTrafficType() == TrafficType.Public) {\n+        \t\tsecVm.setPublicIpAddress(nic.getIp4Address());\n+        \t\tsecVm.setPublicNetmask(nic.getNetmask());\n+        \t\tsecVm.setPublicMacAddress(nic.getMacAddress());\n+        \t} else if (network.getTrafficType() == TrafficType.Control) {\n+        \t\tsecVm.setGuestIpAddress(nic.getIp4Address());\n+        \t\tsecVm.setGuestNetmask(nic.getNetmask());\n+        \t\tsecVm.setGuestMacAddress(nic.getMacAddress());\n+        \t} else if (network.getTrafficType() == TrafficType.Management) {\n+        \t\tsecVm.setPrivateIpAddress(nic.getIp4Address());\n+        \t\tsecVm.setPrivateNetmask(nic.getNetmask());\n+        \t\tsecVm.setPrivateMacAddress(nic.getMacAddress());\n+        \t}\n+        }\n+        _secStorageVmDao.update(secVm.getId(), secVm);\n         return true;\n \t}\n \n@@ -1521,24 +1541,7 @@ public boolean finalizeStart(Commands cmds,\n \t\t\ts_logger.warn(\"Unable to ssh to the VM: \" + answer.getDetails());\n \t\t\treturn false;\n \t\t}\n-\t\tSecondaryStorageVmVO secVm = profile.getVirtualMachine();\n-\t\t List<NicVO> nics = _nicDao.listBy(secVm.getId());\n-         for (NicVO nic : nics) {\n-         \tNetworkVO network = _networkDao.findById(nic.getNetworkId());\n-         \tif (network.getTrafficType() == TrafficType.Public) {\n-         \t\tsecVm.setPublicIpAddress(nic.getIp4Address());\n-         \t\tsecVm.setPublicNetmask(nic.getNetmask());\n-         \t\tsecVm.setPublicMacAddress(nic.getMacAddress());\n-         \t} else if (network.getTrafficType() == TrafficType.Control) {\n-         \t\tsecVm.setGuestIpAddress(nic.getIp4Address());\n-         \t\tsecVm.setGuestNetmask(nic.getNetmask());\n-         \t\tsecVm.setGuestMacAddress(nic.getMacAddress());\n-         \t} else if (network.getTrafficType() == TrafficType.Management) {\n-         \t\tsecVm.setPrivateIpAddress(nic.getIp4Address());\n-         \t\tsecVm.setPrivateNetmask(nic.getNetmask());\n-         \t\tsecVm.setPrivateMacAddress(nic.getMacAddress());\n-         \t}\n-         }\n+\t\t\n \t\treturn true;\n \t}\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/3a143577b9827bd5ab7aaf77e619437f46519b8e/server/src/com/cloud/storage/secondary/SecondaryStorageManagerImpl.java",
                "sha": "b2f7dc294feb561e7222d848e1013c819df7e7af",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/cloudstack/blob/3a143577b9827bd5ab7aaf77e619437f46519b8e/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/UserVmManagerImpl.java?ref=3a143577b9827bd5ab7aaf77e619437f46519b8e",
                "deletions": 14,
                "filename": "server/src/com/cloud/vm/UserVmManagerImpl.java",
                "patch": "@@ -2495,23 +2495,25 @@ public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<UserVmVO> pro\n \t\treturn true;\n \t}\n \t\n-    @Override\n-    public boolean finalizeDeployment(Commands cmds, VirtualMachineProfile<UserVmVO> profile, DeployDestination dest, ReservationContext context) {\n-        return true;\n-    }\n+\t@Override\n+\tpublic boolean finalizeDeployment(Commands cmds, VirtualMachineProfile<UserVmVO> profile, DeployDestination dest, ReservationContext context) {\n+\t\tUserVmVO userVm = profile.getVirtualMachine();\n+\t\tList<NicVO> nics = _nicDao.listBy(userVm.getId());\n+\t\tfor (NicVO nic : nics) {\n+\t\t\tNetworkVO network = _networkDao.findById(nic.getNetworkId());\n+\t\t\tif (network.getTrafficType() == TrafficType.Guest) {\n+\t\t\t\tuserVm.setPrivateIpAddress(nic.getIp4Address());\n+\t\t\t\tuserVm.setPrivateNetmask(nic.getNetmask());\n+\t\t\t\tuserVm.setPrivateMacAddress(nic.getMacAddress());\n+\t\t\t}\n+\t\t}\n+\t\t_vmDao.update(userVm.getId(), userVm);\n+\t\n+\t\treturn true;\n+\t}\n \n     @Override\n     public boolean finalizeStart(Commands cmds, VirtualMachineProfile<UserVmVO> profile, DeployDestination dest, ReservationContext context) {\n-    \tUserVmVO userVm = profile.getVirtualMachine();\n-\t\t List<NicVO> nics = _nicDao.listBy(userVm.getId());\n-        for (NicVO nic : nics) {\n-        \tNetworkVO network = _networkDao.findById(nic.getNetworkId());\n-        \tif (network.getTrafficType() == TrafficType.Guest) {\n-        \t\tuserVm.setPrivateIpAddress(nic.getIp4Address());\n-        \t\tuserVm.setPrivateNetmask(nic.getNetmask());\n-        \t\tuserVm.setPrivateMacAddress(nic.getMacAddress());\n-        \t}\n-        }\n         return true;\n     }\n     ",
                "raw_url": "https://github.com/apache/cloudstack/raw/3a143577b9827bd5ab7aaf77e619437f46519b8e/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "sha": "36ba50a218aab2f93a6705fefbf767c889b580fc",
                "status": "modified"
            }
        ],
        "message": "bug 7659: fix the race condition that agent inside systemvm connecting to mgt server at the head of startcommand returning to mgt server, then got a NPE. and fix bugs in security group of KVM\nstatus 7659: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/960b91acc58bf6a9dfb9c3f5031c5bbe992851ad",
        "repo": "cloudstack",
        "unit_tests": [
            "UserVmManagerImplTest.java"
        ]
    },
    "cloudstack_3d9d73e": {
        "bug_id": "cloudstack_3d9d73e",
        "commit": "https://github.com/apache/cloudstack/commit/3d9d73e6277cc7b9b864ba19db6411191f736448",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/3d9d73e6277cc7b9b864ba19db6411191f736448/server/src/com/cloud/server/ManagementServerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/ManagementServerImpl.java?ref=3d9d73e6277cc7b9b864ba19db6411191f736448",
                "deletions": 1,
                "filename": "server/src/com/cloud/server/ManagementServerImpl.java",
                "patch": "@@ -4360,7 +4360,7 @@ public Long extractVolume(ExtractVolumeCmd cmd) throws URISyntaxException {\n                 return uploadJob.getId();\n             }else{ // Volume is copied now make it visible under apache and create a URL.\n                 _uploadMonitor.createVolumeDownloadURL(volumeId, volumeLocalPath, Upload.Type.VOLUME, zoneId, uploadJob.getId());                \n-                EventUtils.saveEvent(userId, accountId, EventVO.LEVEL_INFO, cmd.getEventType(), \"Completed extraction of \"+volume.getName()+ \" in mode:\" +mode, null, cmd.getStartEventId());\n+                EventUtils.saveEvent(userId, accountId, EventVO.LEVEL_INFO, cmd.getEventType(), \"Completed extraction of \"+volume.getName()+ \" in mode:\" +mode, null, cmd.getStartEventId() == null ? 0:cmd.getStartEventId());\n                 return uploadJob.getId();\n             }\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/3d9d73e6277cc7b9b864ba19db6411191f736448/server/src/com/cloud/server/ManagementServerImpl.java",
                "sha": "32ddef4fea4749702137238fc651a692d8b38298",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/cloudstack/blob/3d9d73e6277cc7b9b864ba19db6411191f736448/server/src/com/cloud/storage/upload/UploadMonitorImpl.java",
                "changes": 48,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/upload/UploadMonitorImpl.java?ref=3d9d73e6277cc7b9b864ba19db6411191f736448",
                "deletions": 21,
                "filename": "server/src/com/cloud/storage/upload/UploadMonitorImpl.java",
                "patch": "@@ -186,14 +186,19 @@ public UploadVO createEntityDownloadURL(VMTemplateVO template, VMTemplateHostVO\n \t    \n \t    Type type = (template.getFormat() == ImageFormat.ISO) ? Type.ISO : Type.TEMPLATE ;\n \t    \n+\t    //Check if ssvm is up\n+\t    HostVO sserver = storageServers.get(0);\n+\t    if(sserver.getStatus() != com.cloud.host.Status.Up){\n+\t    \tthrow new CloudRuntimeException(\"Couldnt create extract link - Secondary Storage Vm is not up\");\n+\t    }\n+\t    \n \t    //Check if it already exists.\n \t    List<UploadVO> extractURLList = _uploadDao.listByTypeUploadStatus(template.getId(), type, UploadVO.Status.DOWNLOAD_URL_CREATED);\t    \n \t    if (extractURLList.size() > 0) {\n             return extractURLList.get(0);\n         }\n \t    \n-\t    // It doesn't exist so create a DB entry.\n-\t    HostVO sserver = storageServers.get(0);\n+\t    // It doesn't exist so create a DB entry.\t    \n \t    UploadVO uploadTemplateObj = new UploadVO(sserver.getId(), template.getId(), new Date(), \n \t                                                Status.DOWNLOAD_URL_NOT_CREATED, 0, type, Mode.HTTP_DOWNLOAD); \n \t    uploadTemplateObj.setInstallPath(vmTemplateHost.getInstallPath());\t                                                \n@@ -259,6 +264,11 @@ public void createVolumeDownloadURL(Long entityId, String path, Type type, Long\n             uploadJob.setLastUpdated(new Date());\n             _uploadDao.update(uploadJob.getId(), uploadJob);\n             \n+            List<SecondaryStorageVmVO> ssVms = _secStorageVmDao.getSecStorageVmListInStates(dataCenterId, State.Running);\n+            if (ssVms.size() == 0){\n+            \terrorString = \"Couldnt find a running SSVM in the zone\" + dataCenterId+ \". Couldnt create the extraction URL.\";\n+                throw new CloudRuntimeException(errorString);\n+            }\n             // Create Symlink at ssvm\n             String uuid = UUID.randomUUID().toString() + \".vhd\";\n             CreateEntityDownloadURLCommand cmd = new CreateEntityDownloadURLCommand(path, uuid);\n@@ -269,26 +279,22 @@ public void createVolumeDownloadURL(Long entityId, String path, Type type, Long\n                 throw new CloudRuntimeException(errorString);\n             }\n             \n-            //Construct actual URL locally now that the symlink exists at SSVM\n-            List<SecondaryStorageVmVO> ssVms = _secStorageVmDao.getSecStorageVmListInStates(dataCenterId, State.Running);\n-            if (ssVms.size() > 0) {\n-                SecondaryStorageVmVO ssVm = ssVms.get(0);\n-                if (ssVm.getPublicIpAddress() == null) {\n-                    errorString = \"A running secondary storage vm has a null public ip?\";\n-                    s_logger.warn(errorString);\n-                    throw new CloudRuntimeException(errorString);\n-                }\n-                String extractURL = generateCopyUrl(ssVm.getPublicIpAddress(), uuid);\n-                UploadVO vo = _uploadDao.createForUpdate();\n-                vo.setLastUpdated(new Date());\n-                vo.setUploadUrl(extractURL);\n-                vo.setUploadState(Status.DOWNLOAD_URL_CREATED);\n-                _uploadDao.update(uploadId, vo);\n-                success = true;\n-                return;\n+            //Construct actual URL locally now that the symlink exists at SSVM            \n+            SecondaryStorageVmVO ssVm = ssVms.get(0);\n+            if (ssVm.getPublicIpAddress() == null) {\n+                errorString = \"A running secondary storage vm has a null public ip?\";\n+                s_logger.warn(errorString);\n+                throw new CloudRuntimeException(errorString);\n             }\n-            errorString = \"Couldnt find a running SSVM in the zone\" + dataCenterId+ \". Couldnt create the extraction URL.\";\n-            throw new CloudRuntimeException(errorString);\n+            String extractURL = generateCopyUrl(ssVm.getPublicIpAddress(), uuid);\n+            UploadVO vo = _uploadDao.createForUpdate();\n+            vo.setLastUpdated(new Date());\n+            vo.setUploadUrl(extractURL);\n+            vo.setUploadState(Status.DOWNLOAD_URL_CREATED);\n+            _uploadDao.update(uploadId, vo);\n+            success = true;\n+            return;\n+                        \n \t    }finally{\n \t        if(!success){\n \t            UploadVO uploadJob = _uploadDao.createForUpdate(uploadId);",
                "raw_url": "https://github.com/apache/cloudstack/raw/3d9d73e6277cc7b9b864ba19db6411191f736448/server/src/com/cloud/storage/upload/UploadMonitorImpl.java",
                "sha": "2258d0ba6b8b3044fe06a087efaac3aa28921406",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/3d9d73e6277cc7b9b864ba19db6411191f736448/server/src/com/cloud/template/TemplateManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/template/TemplateManagerImpl.java?ref=3d9d73e6277cc7b9b864ba19db6411191f736448",
                "deletions": 1,
                "filename": "server/src/com/cloud/template/TemplateManagerImpl.java",
                "patch": "@@ -493,7 +493,7 @@ private Long extract(Account account, Long templateId, String url, Long zoneId,\n         if (isISO) {\n             desc = \"ISO\";\n         }\n-\n+        eventId = eventId == null ? 0:eventId;\n         VMTemplateVO template = _tmpltDao.findById(templateId);\n         if (template == null) {\n             throw new InvalidParameterValueException(\"Unable to find \" +desc+ \" with id \" + templateId);",
                "raw_url": "https://github.com/apache/cloudstack/raw/3d9d73e6277cc7b9b864ba19db6411191f736448/server/src/com/cloud/template/TemplateManagerImpl.java",
                "sha": "654d35c281a9a59f4e9646c7fde555fbd6a4ae5a",
                "status": "modified"
            }
        ],
        "message": "bug 7519 : Correcting the NPE getting thrown due to a recent rewrite of events. Also improving the logging when ssvm is not up.\nstatus 7519 : resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/03a66d4b90ee6640c65925e45fee6b3b70d30699",
        "repo": "cloudstack",
        "unit_tests": [
            "TemplateManagerImplTest.java"
        ]
    },
    "cloudstack_3e4b83d": {
        "bug_id": "cloudstack_3e4b83d",
        "commit": "https://github.com/apache/cloudstack/commit/3e4b83db86ab961d4857a1e3e8aa2b7f67bfe5b8",
        "file": [
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/cloudstack/blob/3e4b83db86ab961d4857a1e3e8aa2b7f67bfe5b8/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java?ref=3e4b83db86ab961d4857a1e3e8aa2b7f67bfe5b8",
                "deletions": 18,
                "filename": "server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "patch": "@@ -1638,6 +1638,12 @@ public boolean finalizeCommandsOnStart(Commands cmds, VirtualMachineProfile<Doma\n \n         cmds.addCommand(\"checkSsh\", new CheckSshCommand(profile.getInstanceName(), controlNic.getIp4Address(), 3922, 5, 20));\n \n+        // Update router template/scripts version\n+        final GetDomRVersionCmd command = new GetDomRVersionCmd();\n+        command.setAccessDetail(NetworkElementCommand.ROUTER_IP, router.getPrivateIpAddress());\n+        command.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n+        cmds.addCommand(\"getDomRVersion\", command);\n+\n         // Network usage command to create iptables rules\n         cmds.addCommand(\"networkUsage\", new NetworkUsageCommand(controlNic.getIp4Address(), router.getHostName(), \"create\"));\n         \n@@ -1753,35 +1759,39 @@ public boolean finalizeCommandsOnStart(Commands cmds, VirtualMachineProfile<Doma\n         s_logger.debug(\"Reapplying vm data (userData and metaData) entries as a part of domR \" + router + \" start...\");\n         createVmDataCommands(router, cmds);\n \n-        // Update router template/scripts version\n-        final GetDomRVersionCmd command = new GetDomRVersionCmd();\n-        command.setAccessDetail(NetworkElementCommand.ROUTER_IP, router.getPrivateIpAddress());\n-        command.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n-        cmds.addCommand(\"getDomRVersion\", command);\n-\n         return true;\n     }\n \n     @Override\n     public boolean finalizeStart(VirtualMachineProfile<DomainRouterVO> profile, long hostId, Commands cmds, ReservationContext context) {\n         DomainRouterVO router = profile.getVirtualMachine();\n+        boolean result = true;\n         \n-        CheckSshAnswer answer = (CheckSshAnswer) cmds.getAnswer(\"checkSsh\");\n-        if (answer == null || !answer.getResult()) {\n-            s_logger.warn(\"Unable to ssh to the VM: \" + answer.getDetails());\n-            return false;\n+        Answer answer = cmds.getAnswer(\"checkSsh\");\n+        if (answer != null && answer instanceof CheckSshAnswer) {\n+            CheckSshAnswer sshAnswer = (CheckSshAnswer) answer;\n+            if (sshAnswer == null || !sshAnswer.getResult()) {\n+                s_logger.warn(\"Unable to ssh to the VM: \" + sshAnswer.getDetails());\n+                result = false;\n+            }\n+        } else {\n+            result = false;\n         }\n         \n-        GetDomRVersionAnswer versionAnswer = (GetDomRVersionAnswer) cmds.getAnswer(\"getDomRVersion\");\n-        if (answer == null || !answer.getResult()) {\n-            s_logger.warn(\"Unable to get the template/scripts version of router \" + router.getInstanceName() + \" due to: \" + versionAnswer.getDetails() + \", but we would continue\");\n-            return true;\n+        answer = cmds.getAnswer(\"getDomRVersion\");\n+        if (answer != null && answer instanceof GetDomRVersionAnswer) {\n+            GetDomRVersionAnswer versionAnswer = (GetDomRVersionAnswer)answer;\n+            if (answer == null || !answer.getResult()) {\n+                /* Try to push on because it's not a critical error */\n+                s_logger.warn(\"Unable to get the template/scripts version of router \" + router.getInstanceName() + \" due to: \" + versionAnswer.getDetails() + \", but we would continue\");\n+            } else {\n+                router.setTemplateVersion(versionAnswer.getTemplateVersion());\n+                router.setScriptsVersion(versionAnswer.getScriptsVersion());\n+                router = _routerDao.persist(router);\n+            }\n         }\n-        router.setTemplateVersion(versionAnswer.getTemplateVersion());\n-        router.setScriptsVersion(versionAnswer.getScriptsVersion());\n-        router = _routerDao.persist(router);\n \n-        return true;\n+        return result;\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/cloudstack/raw/3e4b83db86ab961d4857a1e3e8aa2b7f67bfe5b8/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "sha": "d33ab633f334867309daaafbf26c928e2b10a6aa",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in finalizeStart()\n\nThe command can be only failure Answer, rather than CheckSshAnswer or\nGetDomRVersionAnswer, then casting may fail.",
        "parent": "https://github.com/apache/cloudstack/commit/4a4abac1418bd9b98598374fec5f3dc8eb544277",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualNetworkApplianceManagerImplTest.java"
        ]
    },
    "cloudstack_40c3a0a": {
        "bug_id": "cloudstack_40c3a0a",
        "commit": "https://github.com/apache/cloudstack/commit/40c3a0afa2c721f36f5aeb05631ca0a7bbd81e31",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/40c3a0afa2c721f36f5aeb05631ca0a7bbd81e31/server/src/com/cloud/storage/StorageManagerImpl.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/StorageManagerImpl.java?ref=40c3a0afa2c721f36f5aeb05631ca0a7bbd81e31",
                "deletions": 0,
                "filename": "server/src/com/cloud/storage/StorageManagerImpl.java",
                "patch": "@@ -823,6 +823,7 @@ public VolumeVO createVolume(VolumeVO volume, VMInstanceVO vm, VMTemplateVO temp\n             volume.setPoolType(pool.getPoolType());\n             volume.setPoolId(pool.getId());\n             volume.setPodId(pod.getId());\n+            volume.setState(Volume.State.Ready);\n             _volsDao.persist(volume);\n         }\n         txn.commit();",
                "raw_url": "https://github.com/apache/cloudstack/raw/40c3a0afa2c721f36f5aeb05631ca0a7bbd81e31/server/src/com/cloud/storage/StorageManagerImpl.java",
                "sha": "4dc3eb3559469357dfc53dc151b739ca7fcf8327",
                "status": "modified"
            }
        ],
        "message": "bug 7249: during volume creation (root and data) for a vm, there was no state being set (we need to set it to ready). Hence, whilst re-attaching a detached vol, we hit a NPE. Fixed the root cause of the state not being set during vm creation, and consequently, fixed this npe\nstatus 7249: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/69ce2a090e68c10d961da7b6bece2800fb6f99f1",
        "repo": "cloudstack",
        "unit_tests": [
            "StorageManagerImplTest.java"
        ]
    },
    "cloudstack_4312d88": {
        "bug_id": "cloudstack_4312d88",
        "commit": "https://github.com/apache/cloudstack/commit/4312d884629d4a9e7716da4c869433cdaa8181b8",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/4312d884629d4a9e7716da4c869433cdaa8181b8/server/src/com/cloud/capacity/CapacityManagerImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/capacity/CapacityManagerImpl.java?ref=4312d884629d4a9e7716da4c869433cdaa8181b8",
                "deletions": 0,
                "filename": "server/src/com/cloud/capacity/CapacityManagerImpl.java",
                "patch": "@@ -188,6 +188,11 @@ public boolean releaseVmCapacity(VirtualMachine vm, final boolean moveFromReserv\n         Long clusterId = null;\n         if (hostId != null) {\n             HostVO host = _hostDao.findById(hostId);\n+            if (host == null) {\n+                s_logger.warn(\"Host \" + hostId + \" no long exist anymore!\");\n+                return true;\n+            }\n+\n             clusterId = host.getClusterId();\n         }\n         if (capacityCpu == null || capacityMemory == null || svo == null) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/4312d884629d4a9e7716da4c869433cdaa8181b8/server/src/com/cloud/capacity/CapacityManagerImpl.java",
                "sha": "69e8cfa169b9f064718461b2acac8aa6f66b431c",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/4312d884629d4a9e7716da4c869433cdaa8181b8/server/src/com/cloud/ha/HighAvailabilityManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/ha/HighAvailabilityManagerImpl.java?ref=4312d884629d4a9e7716da4c869433cdaa8181b8",
                "deletions": 0,
                "filename": "server/src/com/cloud/ha/HighAvailabilityManagerImpl.java",
                "patch": "@@ -701,6 +701,7 @@ protected Long stopVM(final HaWorkVO work) throws ConcurrentOperationException {\n                         (vm.getHostId() != null ? vm.getHostId() : \"none\") + \" State: \" + vm.getState());\n                     return null;\n                 }\n+\n                 _itMgr.advanceStop(vm.getUuid(), false);\n                 s_logger.info(\"Stop for \" + vm + \" was successful\");\n                 return null;\n@@ -711,6 +712,7 @@ protected Long stopVM(final HaWorkVO work) throws ConcurrentOperationException {\n                         (vm.getHostId() != null ? vm.getHostId() : \"none\") + \" State: \" + vm.getState());\n                     return null;\n                 }\n+\n                 _itMgr.advanceStop(vm.getUuid(), true);\n                 s_logger.info(\"Stop for \" + vm + \" was successful\");\n                 return null;",
                "raw_url": "https://github.com/apache/cloudstack/raw/4312d884629d4a9e7716da4c869433cdaa8181b8/server/src/com/cloud/ha/HighAvailabilityManagerImpl.java",
                "sha": "8bd569a96a7749533dec558189bfc2acc05df1c0",
                "status": "modified"
            }
        ],
        "message": "HA manager to check target state of the VM to make decisions on whether or not to carry on a cheduled step. Fix NPE in capacity manager when releasing capacity of a stopped VM.",
        "parent": "https://github.com/apache/cloudstack/commit/3d5fbe7073d4b7234611e972ca030088bff2f3f2",
        "repo": "cloudstack",
        "unit_tests": [
            "HighAvailabilityManagerImplTest.java"
        ]
    },
    "cloudstack_433c28f": {
        "bug_id": "cloudstack_433c28f",
        "commit": "https://github.com/apache/cloudstack/commit/433c28fb16118fe744b4df73487a58a3254dbff2",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/433c28fb16118fe744b4df73487a58a3254dbff2/api/src/com/cloud/storage/Storage.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/storage/Storage.java?ref=433c28fb16118fe744b4df73487a58a3254dbff2",
                "deletions": 2,
                "filename": "api/src/com/cloud/storage/Storage.java",
                "patch": "@@ -80,8 +80,8 @@ public String getFileExtension() {\n     }\n     \n     public static enum TemplateType {\n-    \tSYSTEM,\n-    \tBUILTIN\n+    \tSYSTEM, /*routing, system vm template*/\n+    \tBUILTIN /*buildin template*/\n     }\n     \n     public static enum StoragePoolType {",
                "raw_url": "https://github.com/apache/cloudstack/raw/433c28fb16118fe744b4df73487a58a3254dbff2/api/src/com/cloud/storage/Storage.java",
                "sha": "98137a3cca376f0fa45c11ac8babcb4466bed6c1",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/433c28fb16118fe744b4df73487a58a3254dbff2/server/src/com/cloud/server/ManagementServerImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/ManagementServerImpl.java?ref=433c28fb16118fe744b4df73487a58a3254dbff2",
                "deletions": 1,
                "filename": "server/src/com/cloud/server/ManagementServerImpl.java",
                "patch": "@@ -231,6 +231,7 @@\n import com.cloud.storage.SnapshotVO;\n import com.cloud.storage.Storage;\n import com.cloud.storage.Storage.ImageFormat;\n+import com.cloud.storage.Storage.TemplateType;\n import com.cloud.storage.StorageManager;\n import com.cloud.storage.StoragePoolHostVO;\n import com.cloud.storage.StoragePoolVO;\n@@ -3723,7 +3724,7 @@ public IPAddressVO findIPAddressById(String ipAddress) {\n         for(VolumeVO v:allVolumes)\n         {\n         \tVMTemplateVO template = _templateDao.findById(v.getTemplateId());\n-        \tif(template!=null && template.getUniqueName().startsWith(\"routing\"))\n+        \tif(template!=null && (template.getTemplateType() == TemplateType.SYSTEM))\n         \t{\n         \t\t//do nothing\n         \t}",
                "raw_url": "https://github.com/apache/cloudstack/raw/433c28fb16118fe744b4df73487a58a3254dbff2/server/src/com/cloud/server/ManagementServerImpl.java",
                "sha": "cae27f3c542e73e2de6a09296bdfbab98174c71e",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/433c28fb16118fe744b4df73487a58a3254dbff2/server/src/com/cloud/template/TemplateManagerImpl.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/template/TemplateManagerImpl.java?ref=433c28fb16118fe744b4df73487a58a3254dbff2",
                "deletions": 6,
                "filename": "server/src/com/cloud/template/TemplateManagerImpl.java",
                "patch": "@@ -953,10 +953,10 @@ public boolean delete(long userId, long templateId, Long zoneId) {\n \t\tList<VMTemplateStoragePoolVO> allTemplatesInPool = _tmpltPoolDao.listByPoolId(pool.getId());\n \t\t\n \t\tfor (VMTemplateStoragePoolVO templatePoolVO : allTemplatesInPool) {\n-\t\t\tVMTemplateVO template = _tmpltDao.findById(templatePoolVO.getTemplateId());\n-\t\t\t\n+\t\t\tVMTemplateVO template = _tmpltDao.findByIdIncludingRemoved(templatePoolVO.getTemplateId());\t\t\t\n+\t\t\n \t\t\t// If this is a routing template, consider it in use\n-\t\t\tif (template.getUniqueName().equals(\"routing\")) {\n+\t\t\tif (template.getTemplateType() == TemplateType.SYSTEM) {\n \t\t\t\tcontinue;\n \t\t\t}\n \t\t\t\n@@ -976,7 +976,7 @@ public boolean delete(long userId, long templateId, Long zoneId) {\n     @Override\n     public void evictTemplateFromStoragePool(VMTemplateStoragePoolVO templatePoolVO) {\n \t\tStoragePoolVO pool = _poolDao.findById(templatePoolVO.getPoolId());\n-\t\tVMTemplateVO template = _tmpltDao.findById(templatePoolVO.getTemplateId());\n+\t\tVMTemplateVO template = _tmpltDao.findByIdIncludingRemoved(templatePoolVO.getTemplateId());\n \t\t\n \t\tlong hostId;\n \t\tList<StoragePoolHostVO> poolHostVOs = _poolHostDao.listByPoolId(pool.getId());\n@@ -1096,7 +1096,7 @@ public Long createInZone(long zoneId, long userId, String displayText,\n \t\n \t@Override\n     public boolean templateIsDeleteable(VMTemplateHostVO templateHostRef) {\n-\t\tVMTemplateVO template = _tmpltDao.findById(templateHostRef.getTemplateId());\n+\t\tVMTemplateVO template = _tmpltDao.findByIdIncludingRemoved(templateHostRef.getTemplateId());\n \t\tlong templateId = template.getId();\n \t\tHostVO secondaryStorageHost = _hostDao.findById(templateHostRef.getHostId());\n \t\tlong zoneId = secondaryStorageHost.getDataCenterId();\n@@ -1284,7 +1284,7 @@ public boolean deleteTemplate(DeleteTemplateCmd cmd) {\n     \t\tthrow new InvalidParameterValueException(\"Please specify a valid template.\");\n     \t}\n     \t\n-    \tif (template.getUniqueName().equals(\"routing\")) {\n+    \tif (template.getTemplateType() == TemplateType.SYSTEM) {\n     \t\tthrow new InvalidParameterValueException(\"The DomR template cannot be deleted.\");\n     \t}\n     \t",
                "raw_url": "https://github.com/apache/cloudstack/raw/433c28fb16118fe744b4df73487a58a3254dbff2/server/src/com/cloud/template/TemplateManagerImpl.java",
                "sha": "a1fb6f0dae7f951208e2c789d40a3e04b20a1f99",
                "status": "modified"
            }
        ],
        "message": "bug 7041: fix npe in delete template from storage pool, if the template already marked as removed\nstatus 7041: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/e2aa4738ecf99aebf8b9bba3b96a0f803326ec81",
        "repo": "cloudstack",
        "unit_tests": [
            "TemplateManagerImplTest.java"
        ]
    },
    "cloudstack_43cf1da": {
        "bug_id": "cloudstack_43cf1da",
        "commit": "https://github.com/apache/cloudstack/commit/43cf1da865c1e4ed6523fb5b2ba315a547fac79f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/api/src/org/apache/cloudstack/api/response/VMSnapshotResponse.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/response/VMSnapshotResponse.java?ref=43cf1da865c1e4ed6523fb5b2ba315a547fac79f",
                "deletions": 1,
                "filename": "api/src/org/apache/cloudstack/api/response/VMSnapshotResponse.java",
                "patch": "@@ -192,7 +192,7 @@ public void setParent(String parent) {\n       this.parent = parent;\n     }\n \n-  public String getType() {\n+    public String getType() {\n         return type;\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/api/src/org/apache/cloudstack/api/response/VMSnapshotResponse.java",
                "sha": "1285f73f633eb66e65e1cfb1211a5e03bd459ab3",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDao.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDao.java?ref=43cf1da865c1e4ed6523fb5b2ba315a547fac79f",
                "deletions": 0,
                "filename": "engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDao.java",
                "patch": "@@ -36,4 +36,6 @@\n     List<VMSnapshotVO> listByParent(Long vmSnapshotId);\n \n     VMSnapshotVO findByName(Long vmId, String name);\n+\n+    List<VMSnapshotVO> listByAccountId(Long accountId);\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDao.java",
                "sha": "31999ef15d66e3dcc6e5a18fddfd0a20fb81e0ec",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDaoImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDaoImpl.java?ref=43cf1da865c1e4ed6523fb5b2ba315a547fac79f",
                "deletions": 0,
                "filename": "engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDaoImpl.java",
                "patch": "@@ -121,6 +121,12 @@ public VMSnapshotVO findByName(Long vmId, String name) {\n         return null;\n     }\n \n+    public List<VMSnapshotVO> listByAccountId(Long accountId) {\n+        SearchCriteria sc = this.AllFieldsSearch.create();\n+        sc.setParameters(\"accountId\", new Object[] { accountId });\n+        return listBy(sc, null);\n+    }\n+\n     @Override\n     public boolean updateState(State currentState, Event event, State nextState, VMSnapshot vo, Object data) {\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDaoImpl.java",
                "sha": "a87d284dc12161d367481e56f739cfe70b203665",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=43cf1da865c1e4ed6523fb5b2ba315a547fac79f",
                "deletions": 0,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -472,6 +472,10 @@ public SnapshotResponse createSnapshotResponse(Snapshot snapshot) {\n             snapshotResponse.setVolumeId(volume.getUuid());\n             snapshotResponse.setVolumeName(volume.getName());\n             snapshotResponse.setVolumeType(volume.getVolumeType().name());\n+            DataCenter zone = ApiDBUtils.findZoneById(volume.getDeviceId());\n+            if (zone != null) {\n+                snapshotResponse.setZoneId(zone.getUuid());\n+            }\n         }\n         snapshotResponse.setCreated(snapshot.getCreated());\n         snapshotResponse.setName(snapshot.getName());",
                "raw_url": "https://github.com/apache/cloudstack/raw/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "b17b5cc67c87056860eb7a2299426353d849b6b4",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/ha/dao/HighAvailabilityDaoImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/ha/dao/HighAvailabilityDaoImpl.java?ref=43cf1da865c1e4ed6523fb5b2ba315a547fac79f",
                "deletions": 0,
                "filename": "server/src/com/cloud/ha/dao/HighAvailabilityDaoImpl.java",
                "patch": "@@ -63,6 +63,7 @@ protected HighAvailabilityDaoImpl() {\n         TBASearch.and(\"server\", TBASearch.entity().getServerId(), Op.NULL);\n         TBASearch.and(\"taken\", TBASearch.entity().getDateTaken(), Op.NULL);\n         TBASearch.and(\"time\", TBASearch.entity().getTimeToTry(), Op.LTEQ);\n+        TBASearch.and(\"step\", TBASearch.entity().getStep(), Op.NIN);\n         TBASearch.done();\n \n         PreviousInstanceSearch = createSearchBuilder();\n@@ -151,6 +152,7 @@ public HaWorkVO take(final long serverId) {\n         try {\n             final SearchCriteria<HaWorkVO> sc = TBASearch.create();\n             sc.setParameters(\"time\", System.currentTimeMillis() >> 10);\n+            sc.setParameters(\"step\", Step.Done, Step.Cancelled);\n \n             final Filter filter = new Filter(HaWorkVO.class, null, true, 0l, 1l);\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/ha/dao/HighAvailabilityDaoImpl.java",
                "sha": "724f4f6d7c9ee6fc32c42aa0ec5feed77ba71bde",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/hypervisor/HypervisorGuruBase.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/hypervisor/HypervisorGuruBase.java?ref=43cf1da865c1e4ed6523fb5b2ba315a547fac79f",
                "deletions": 2,
                "filename": "server/src/com/cloud/hypervisor/HypervisorGuruBase.java",
                "patch": "@@ -35,6 +35,7 @@\n import com.cloud.resource.ResourceManager;\n import com.cloud.server.ConfigurationServer;\n import com.cloud.service.ServiceOfferingDetailsVO;\n+import com.cloud.service.dao.ServiceOfferingDao;\n import com.cloud.service.dao.ServiceOfferingDetailsDao;\n import com.cloud.storage.dao.VMTemplateDetailsDao;\n import com.cloud.utils.Pair;\n@@ -71,6 +72,8 @@\n     ResourceManager _resourceMgr;\n     @Inject\n     ServiceOfferingDetailsDao _serviceOfferingDetailsDao;\n+    @Inject\n+    ServiceOfferingDao _serviceOfferingDao;\n \n     protected HypervisorGuruBase() {\n         super();\n@@ -125,8 +128,7 @@ public NicTO toNicTO(NicProfile profile) {\n     }\n \n     protected VirtualMachineTO toVirtualMachineTO(VirtualMachineProfile vmProfile) {\n-\n-        ServiceOffering offering = vmProfile.getServiceOffering();\n+        ServiceOffering offering = _serviceOfferingDao.findById(vmProfile.getId(), vmProfile.getServiceOfferingId());\n         VirtualMachine vm = vmProfile.getVirtualMachine();\n         Long minMemory = (long)(offering.getRamSize() / vmProfile.getMemoryOvercommitRatio());\n         int minspeed = (int)(offering.getSpeed() / vmProfile.getCpuOvercommitRatio());",
                "raw_url": "https://github.com/apache/cloudstack/raw/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/hypervisor/HypervisorGuruBase.java",
                "sha": "0188778e7641a45080e3bfe73ad79cd651a76377",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/cloudstack/blob/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/hypervisor/KVMGuru.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/hypervisor/KVMGuru.java?ref=43cf1da865c1e4ed6523fb5b2ba315a547fac79f",
                "deletions": 7,
                "filename": "server/src/com/cloud/hypervisor/KVMGuru.java",
                "patch": "@@ -16,24 +16,25 @@\n // under the License.\n package com.cloud.hypervisor;\n \n-import java.util.Map;\n-\n-import javax.ejb.Local;\n-import javax.inject.Inject;\n-\n-import org.apache.cloudstack.storage.command.StorageSubSystemCommand;\n-\n import com.cloud.agent.api.Command;\n+import com.cloud.agent.api.to.DataObjectType;\n import com.cloud.agent.api.to.VirtualMachineTO;\n import com.cloud.host.HostVO;\n import com.cloud.host.dao.HostDao;\n import com.cloud.hypervisor.Hypervisor.HypervisorType;\n+import com.cloud.storage.DataStoreRole;\n import com.cloud.storage.GuestOSHypervisorVO;\n import com.cloud.storage.GuestOSVO;\n import com.cloud.storage.dao.GuestOSDao;\n import com.cloud.storage.dao.GuestOSHypervisorDao;\n import com.cloud.utils.Pair;\n import com.cloud.vm.VirtualMachineProfile;\n+import org.apache.cloudstack.storage.command.CopyCommand;\n+import org.apache.cloudstack.storage.command.StorageSubSystemCommand;\n+\n+import javax.ejb.Local;\n+import javax.inject.Inject;\n+import java.util.Map;\n \n @Local(value = HypervisorGuru.class)\n public class KVMGuru extends HypervisorGuruBase implements HypervisorGuru {\n@@ -77,6 +78,18 @@ public VirtualMachineTO implement(VirtualMachineProfile vm) {\n \n     @Override\n     public Pair<Boolean, Long> getCommandHostDelegation(long hostId, Command cmd) {\n+        if (cmd instanceof CopyCommand) {\n+            CopyCommand c = (CopyCommand) cmd;\n+            boolean inSeq = true;\n+            if (c.getSrcTO().getObjectType() == DataObjectType.SNAPSHOT ||\n+                    c.getDestTO().getObjectType() == DataObjectType.SNAPSHOT) {\n+                inSeq = false;\n+            } else if (c.getDestTO().getDataStore().getRole() == DataStoreRole.Image ||\n+                    c.getDestTO().getDataStore().getRole() == DataStoreRole.ImageCache) {\n+                inSeq = false;\n+            }\n+            c.setExecuteInSequence(inSeq);\n+        }\n         if (cmd instanceof StorageSubSystemCommand) {\n             StorageSubSystemCommand c = (StorageSubSystemCommand)cmd;\n             c.setExecuteInSequence(false);",
                "raw_url": "https://github.com/apache/cloudstack/raw/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/hypervisor/KVMGuru.java",
                "sha": "e15a41752e6f673e01c1055d1243e997b3c823c0",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/resource/ResourceManagerImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/resource/ResourceManagerImpl.java?ref=43cf1da865c1e4ed6523fb5b2ba315a547fac79f",
                "deletions": 3,
                "filename": "server/src/com/cloud/resource/ResourceManagerImpl.java",
                "patch": "@@ -30,7 +30,6 @@\n import javax.inject.Inject;\n import javax.naming.ConfigurationException;\n \n-import com.cloud.capacity.CapacityState;\n import com.cloud.vm.VirtualMachine;\n \n import org.apache.cloudstack.api.ApiConstants;\n@@ -71,6 +70,7 @@\n import com.cloud.agent.transport.Request;\n import com.cloud.capacity.Capacity;\n import com.cloud.capacity.CapacityManager;\n+import com.cloud.capacity.CapacityState;\n import com.cloud.capacity.CapacityVO;\n import com.cloud.capacity.dao.CapacityDao;\n import com.cloud.cluster.ClusterManager;\n@@ -1174,12 +1174,13 @@ private boolean doMaintain(final long hostId) {\n         MaintainAnswer answer = (MaintainAnswer)_agentMgr.easySend(hostId, new MaintainCommand());\n         if (answer == null || !answer.getResult()) {\n             s_logger.warn(\"Unable to send MaintainCommand to host: \" + hostId);\n+            return false;\n         }\n \n         try {\n             resourceStateTransitTo(host, ResourceState.Event.AdminAskMaintenace, _nodeId);\n         } catch (NoTransitionException e) {\n-            String err = \"Cannot transimit resource state of host \" + host.getId() + \" to \" + ResourceState.Maintenance;\n+            String err = \"Cannot transmit resource state of host \" + host.getId() + \" to \" + ResourceState.Maintenance;\n             s_logger.debug(err, e);\n             throw new CloudRuntimeException(err + e.getMessage());\n         }\n@@ -1210,7 +1211,6 @@ private boolean doMaintain(final long hostId) {\n                 }\n             }\n         }\n-\n         return true;\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/resource/ResourceManagerImpl.java",
                "sha": "6beea231c053100e35be863bf5b05f3166f96118",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/resourcelimit/ResourceLimitManagerImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/resourcelimit/ResourceLimitManagerImpl.java?ref=43cf1da865c1e4ed6523fb5b2ba315a547fac79f",
                "deletions": 1,
                "filename": "server/src/com/cloud/resourcelimit/ResourceLimitManagerImpl.java",
                "patch": "@@ -868,8 +868,9 @@ public Long doInTransaction(TransactionStatus status) {\n \n         // this lock guards against the updates to user_vm, volume, snapshot, public _ip and template table\n         // as any resource creation precedes with the resourceLimitExceeded check which needs this lock too\n+        Set rowIdsToLock = _resourceCountDao.listAllRowsToUpdate(accountId, Resource.ResourceOwnerType.Account, type);\n         SearchCriteria<ResourceCountVO> sc = ResourceCountSearch.create();\n-        sc.setParameters(\"accountId\", accountId);\n+        sc.setParameters(\"id\", rowIdsToLock.toArray());\n         _resourceCountDao.lockRows(sc, null, true);\n \n         ResourceCountVO accountRC = _resourceCountDao.findByOwnerAndType(accountId, ResourceOwnerType.Account, type);",
                "raw_url": "https://github.com/apache/cloudstack/raw/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/resourcelimit/ResourceLimitManagerImpl.java",
                "sha": "1651ad7ba2881cb546565afc14054e36b7d6b387",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/server/ConfigurationServerImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/ConfigurationServerImpl.java?ref=43cf1da865c1e4ed6523fb5b2ba315a547fac79f",
                "deletions": 0,
                "filename": "server/src/com/cloud/server/ConfigurationServerImpl.java",
                "patch": "@@ -219,6 +219,9 @@ public void persistDefaultValues() throws InternalErrorException {\n             _configDao.update(\"secstorage.secure.copy.cert\", \"realhostip\");\n             s_logger.debug(\"ConfigurationServer made secondary storage copy use realhostip.\");\n \n+            _configDao.update(\"user.password.encoders.exclude\", \"MD5,LDAP,PLAINTEXT\");\n+            s_logger.debug(\"Configuration server excluded insecure encoders\");\n+\n             // Save default service offerings\n             createServiceOffering(User.UID_SYSTEM, \"Small Instance\", 1, 512, 500, \"Small Instance\", ProvisioningType.THIN, false, false, null);\n             createServiceOffering(User.UID_SYSTEM, \"Medium Instance\", 1, 1024, 1000, \"Medium Instance\", ProvisioningType.THIN, false, false, null);",
                "raw_url": "https://github.com/apache/cloudstack/raw/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/server/ConfigurationServerImpl.java",
                "sha": "a3bd14ad9b0044807968c638d1218083c84098f6",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/cloudstack/blob/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/user/AccountManagerImpl.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/user/AccountManagerImpl.java?ref=43cf1da865c1e4ed6523fb5b2ba315a547fac79f",
                "deletions": 1,
                "filename": "server/src/com/cloud/user/AccountManagerImpl.java",
                "patch": "@@ -117,6 +117,10 @@\n import com.cloud.vm.dao.InstanceGroupDao;\n import com.cloud.vm.dao.UserVmDao;\n import com.cloud.vm.dao.VMInstanceDao;\n+import com.cloud.vm.snapshot.VMSnapshot;\n+import com.cloud.vm.snapshot.VMSnapshotManager;\n+import com.cloud.vm.snapshot.VMSnapshotVO;\n+import com.cloud.vm.snapshot.dao.VMSnapshotDao;\n import org.apache.cloudstack.acl.ControlledEntity;\n import org.apache.cloudstack.acl.QuerySelector;\n import org.apache.cloudstack.acl.RoleType;\n@@ -201,6 +205,10 @@\n     @Inject\n     private SnapshotManager _snapMgr;\n     @Inject\n+    private VMSnapshotManager _vmSnapshotMgr;\n+    @Inject\n+    private VMSnapshotDao _vmSnapshotDao;\n+    @Inject\n     private UserVmManager _vmMgr;\n     @Inject\n     private TemplateManager _tmpltMgr;\n@@ -730,6 +738,16 @@ protected boolean cleanupAccount(AccountVO account, long callerUserId, Account c\n                 accountCleanupNeeded = true;\n             }\n \n+            // Destroy VM Snapshots\n+            List<VMSnapshotVO> vmSnapshots = _vmSnapshotDao.listByAccountId(Long.valueOf(accountId));\n+            for (VMSnapshot vmSnapshot : vmSnapshots) {\n+                try {\n+                    _vmSnapshotMgr.deleteVMSnapshot(vmSnapshot.getId());\n+                } catch (Exception e) {\n+                    s_logger.debug(\"Failed to cleanup vm snapshot \" + vmSnapshot.getId() + \" due to \" + e.toString());\n+                }\n+            }\n+\n             // Destroy the account's VMs\n             List<UserVmVO> vms = _userVmDao.listByAccountId(accountId);\n             if (s_logger.isDebugEnabled()) {\n@@ -1169,6 +1187,9 @@ public UserAccount updateUser(Long userId, String firstName, String lastName, St\n         }\n \n         if (password != null) {\n+            if (password.isEmpty()) {\n+                throw new InvalidParameterValueException(\"Password cannot be empty\");\n+            }\n             String encodedPassword = null;\n             for (Iterator<UserAuthenticator> en = _userPasswordEncoders.iterator(); en.hasNext();) {\n                 UserAuthenticator authenticator = en.next();\n@@ -1977,7 +1998,7 @@ public void logoutUser(long userId) {\n     @Override\n     public UserAccount authenticateUser(String username, String password, Long domainId, InetAddress loginIpAddress, Map<String, Object[]> requestParameters) {\n         UserAccount user = null;\n-        if (password != null) {\n+        if (password != null && !password.isEmpty()) {\n             user = getUserAccount(username, password, domainId, requestParameters);\n         } else {\n             String key = _configDao.getValue(\"security.singlesignon.key\");",
                "raw_url": "https://github.com/apache/cloudstack/raw/43cf1da865c1e4ed6523fb5b2ba315a547fac79f/server/src/com/cloud/user/AccountManagerImpl.java",
                "sha": "f40cd8f898de7933aa6d0c9344c3d2f2bdb75204",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-5238: password checks, NPE fixes and minor fixes\n\n- insecure authenticators excluded in configuration\n- snapshot response should have zone\n- remove vmsnapshots when removing accounts\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n(cherry picked from commit 5481485a083957ff58da3b6fea9d7b6d20f06875)\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n\nConflicts:\n\tapi/src/org/apache/cloudstack/api/response/VMSnapshotResponse.java\n\tserver/src/com/cloud/api/ApiResponseHelper.java\n\tserver/src/com/cloud/storage/download/DownloadActiveState.java",
        "parent": "https://github.com/apache/cloudstack/commit/8829a0d4a7f396549af9ce6071c75eac86ae0bfe",
        "repo": "cloudstack",
        "unit_tests": [
            "AccountManagerImplTest.java"
        ]
    },
    "cloudstack_45c6111": {
        "bug_id": "cloudstack_45c6111",
        "commit": "https://github.com/apache/cloudstack/commit/45c611100a9e103e991c5afaf286484e8f2f0bef",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/45c611100a9e103e991c5afaf286484e8f2f0bef/server/src/com/cloud/user/AccountManagerImpl.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/user/AccountManagerImpl.java?ref=45c611100a9e103e991c5afaf286484e8f2f0bef",
                "deletions": 6,
                "filename": "server/src/com/cloud/user/AccountManagerImpl.java",
                "patch": "@@ -471,13 +471,15 @@ public ResourceLimitVO updateResourceLimit(UpdateResourceLimitCmd cmd) throws In\n \n         if (domainId == null) {\n             throw new ServerApiException(BaseCmd.PARAM_ERROR, \"Unable to update resource limit, unable to determine domain in which to update limit.\");\n-        } else if (account.getAccountName() != null) {\n-            Account userAccount = _accountDao.findActiveAccount(account.getAccountName(), domainId);\n-            if (userAccount == null) {\n-                throw new ServerApiException(BaseCmd.PARAM_ERROR, \"unable to find account by name \" + account.getAccountName() + \" in domain with id \" + domainId);\n+        } else if (account != null) {\n+            if (account.getAccountName() != null) {\n+                Account userAccount = _accountDao.findActiveAccount(account.getAccountName(), domainId);\n+                if (userAccount == null) {\n+                    throw new ServerApiException(BaseCmd.PARAM_ERROR, \"unable to find account by name \" + account.getAccountName() + \" in domain with id \" + domainId);\n+                }\n+                accountId = userAccount.getId();\n+                domainId = userAccount.getDomainId();\n             }\n-            accountId = userAccount.getId();\n-            domainId = userAccount.getDomainId();\n         }               \n \n         if (accountId != null) domainId = null;",
                "raw_url": "https://github.com/apache/cloudstack/raw/45c611100a9e103e991c5afaf286484e8f2f0bef/server/src/com/cloud/user/AccountManagerImpl.java",
                "sha": "19b95442d030b2ab92cb9ab3a3c55b73a6d987f7",
                "status": "modified"
            }
        ],
        "message": "fix NPE when updating a resource limit using the internal API port",
        "parent": "https://github.com/apache/cloudstack/commit/55201432f61e874b1848aba6eade8afebb365547",
        "repo": "cloudstack",
        "unit_tests": [
            "AccountManagerImplTest.java"
        ]
    },
    "cloudstack_4727b12": {
        "bug_id": "cloudstack_4727b12",
        "commit": "https://github.com/apache/cloudstack/commit/4727b1229eba6bcc53aa8e7b1223db179034a31d",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/4727b1229eba6bcc53aa8e7b1223db179034a31d/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=4727b1229eba6bcc53aa8e7b1223db179034a31d",
                "deletions": 1,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -1263,7 +1263,7 @@ public TemplateResponse createIsoResponse(VirtualMachineTemplate result) {\n     @Override\n     public List<TemplateResponse> createTemplateResponses(long templateId, Long zoneId, boolean readyOnly) {\n         List<DataCenterVO> dcs = new ArrayList<DataCenterVO>();\n-        if (zoneId == -1) {\n+        if (zoneId == null || zoneId == -1) {\n             dcs.addAll(ApiDBUtils.listZones());\n             List<TemplateResponse> response = new ArrayList<TemplateResponse>();\n             for (DataCenterVO dc : dcs ) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/4727b1229eba6bcc53aa8e7b1223db179034a31d/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "7ab1d3fdd18ae254becbd6312cead34cc413e8ab",
                "status": "modified"
            }
        ],
        "message": "bug 10603: fixed NPE in listTemplates\nstatus 10603: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/a8a9b37824cfe4e83d463f676f673dc466b0e17a",
        "repo": "cloudstack",
        "unit_tests": [
            "ApiResponseHelperTest.java"
        ]
    },
    "cloudstack_473c3d3": {
        "bug_id": "cloudstack_473c3d3",
        "commit": "https://github.com/apache/cloudstack/commit/473c3d33c31fb96952d5dcc3539153eaa25be79a",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/473c3d33c31fb96952d5dcc3539153eaa25be79a/server/src/com/cloud/server/ManagementServerImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/ManagementServerImpl.java?ref=473c3d33c31fb96952d5dcc3539153eaa25be79a",
                "deletions": 1,
                "filename": "server/src/com/cloud/server/ManagementServerImpl.java",
                "patch": "@@ -3210,8 +3210,10 @@ public FirewallRuleVO updatePortForwardingRule(UpdateIPForwardingRuleCmd cmd) th\n             _firewallRulesDao.update(fwRule.getId(), fwRule);\n             _networkMgr.updateFirewallRule(fwRule, oldPrivateIP, oldPrivatePort);\n             return fwRule;\n+        }else{\n+        \ts_logger.warn(\"Unable to find the rule to be updated for public ip:public port\"+publicIp+\":\"+publicPort+ \"private ip:private port:\"+privateIp+\":\"+privatePort);\n+        \tthrow new InvalidParameterValueException(\"Unable to find the rule to be updated for public ip:public port\"+publicIp+\":\"+publicPort+ \" private ip:private port:\"+privateIp+\":\"+privatePort);\n         }\n-        return null;\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/cloudstack/raw/473c3d33c31fb96952d5dcc3539153eaa25be79a/server/src/com/cloud/server/ManagementServerImpl.java",
                "sha": "e747e9a58cb19755ead1b6d021052e50d39c5eb5",
                "status": "modified"
            }
        ],
        "message": "bug 6870: during updating of pf rules, it is possible one might try to update a non existing rule via the api cmd. hitherto, we were returning a null which was assumed as a success by the cmd api, which failed with a npe. instead, we ought to throw back an error since we did not find any rule to be updated. i am checking in the same change. this also will fix the npe.\nstatus 6870: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/95c99a5c6e3bc3b67126d5617cd6330ff4aca12d",
        "repo": "cloudstack",
        "unit_tests": [
            "ManagementServerImplTest.java"
        ]
    },
    "cloudstack_47d6a64": {
        "bug_id": "cloudstack_47d6a64",
        "commit": "https://github.com/apache/cloudstack/commit/47d6a64b319ab064c4b855346f2bfdb250fb9ad8",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/cloudstack/blob/47d6a64b319ab064c4b855346f2bfdb250fb9ad8/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java?ref=47d6a64b319ab064c4b855346f2bfdb250fb9ad8",
                "deletions": 2,
                "filename": "engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "patch": "@@ -925,7 +925,7 @@ protected NicTO toNicTO(NicVO nic, NicProfile profile, NetworkVO config) {\n \n     boolean isNetworkImplemented(NetworkVO network) {\n         Network.State state = network.getState();\n-        if (state == Network.State.Implemented || state == Network.State.Implementing) {\n+        if (state == Network.State.Implemented) {\n             return true;\n         } else if (state == Network.State.Setup) {\n             DataCenterVO zone = _dcDao.findById(network.getDataCenterId());\n@@ -1277,7 +1277,19 @@ public int compare(NicVO nic1, NicVO nic2) {\n         });\n \n         for (NicVO nic : nics) {\n-            Pair<NetworkGuru, NetworkVO> implemented = implementNetwork(nic.getNetworkId(), dest, context);\n+            Pair<NetworkGuru, NetworkVO> implemented = null;\n+            if (vmProfile.getVirtualMachine().getType() != Type.DomainRouter) {\n+                implemented = implementNetwork(nic.getNetworkId(), dest, context);\n+            } else {\n+                // At the time of implementing network (using implementNetwork() method), if the VR needs to be deployed then\n+                // it follows the same path of regular VM deployment. This leads to a nested call to implementNetwork() while\n+                // preparing VR nics. This flow creates issues in dealing with network state transitions. The original call\n+                // puts network in \"Implementing\" state and then the nested call again tries to put it into same state resulting\n+                // in issues. In order to avoid it, implementNetwork() call for VR is replaced with below code.\n+                NetworkVO network = _networksDao.findById(nic.getNetworkId());\n+                NetworkGuru guru = AdapterBase.getAdapterByName(networkGurus, network.getGuruName());\n+                implemented = new Pair<NetworkGuru, NetworkVO>(guru, network);\n+            }\n             if (implemented == null || implemented.first() == null) {\n                 s_logger.warn(\"Failed to implement network id=\" + nic.getNetworkId() + \" as a part of preparing nic id=\" + nic.getId());\n                 throw new CloudRuntimeException(\"Failed to implement network id=\" + nic.getNetworkId() + \" as a part preparing nic id=\" + nic.getId());",
                "raw_url": "https://github.com/apache/cloudstack/raw/47d6a64b319ab064c4b855346f2bfdb250fb9ad8/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "sha": "265515c50b54707a1223418f8348071d0a398232",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-7182: NPE while trying to deploy VMs in parallel in isolated network\nThe following changes are made:\n- Check to see if network is implemented changed from 'state == Implementing||Implemented' to 'state == Implemented'.\nThe earlier check was a hack to prevent the issue described below.\n- At the time of implementing network (using implementNetwork() method), if the VR needs to be deployed then\nit follows the same path of regular VM deployment. This leads to a nested call to implementNetwork() while\npreparing VR nics. This flow creates issues in dealing with network state transitions. The original call\nputs network in \"Implementing\" state and then the nested call again tries to put it into same state resulting\nin issues. In order to avoid it, implementNetwork() call for VR is replaced with below code.",
        "parent": "https://github.com/apache/cloudstack/commit/ea740aa0e10e22da751ff1d0405ac307f2f7e7ce",
        "repo": "cloudstack",
        "unit_tests": [
            "NetworkOrchestratorTest.java"
        ]
    },
    "cloudstack_47f43df": {
        "bug_id": "cloudstack_47f43df",
        "commit": "https://github.com/apache/cloudstack/commit/47f43df01b1f64e6798eb0155175936b5fd206ae",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/cloudstack/blob/47f43df01b1f64e6798eb0155175936b5fd206ae/server/src/com/cloud/storage/StorageManagerImpl.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/StorageManagerImpl.java?ref=47f43df01b1f64e6798eb0155175936b5fd206ae",
                "deletions": 0,
                "filename": "server/src/com/cloud/storage/StorageManagerImpl.java",
                "patch": "@@ -2477,6 +2477,18 @@ public void prepareForMigration(VirtualMachineProfile<? extends VirtualMachine>\n \n     @Override\n     public void prepare(VirtualMachineProfile<? extends VirtualMachine> vm, DeployDestination dest) throws StorageUnavailableException, InsufficientStorageCapacityException {\n+    \t\n+    \tif(dest == null){\n+            if (s_logger.isDebugEnabled()) {\n+                s_logger.debug(\"DeployDestination cannot be null, cannot prepare Volumes for the vm: \"+ vm);\n+            }\n+            throw new CloudRuntimeException(\"Unable to prepare Volume for vm because DeployDestination is null\");\n+    \t}else if(dest.getStorageForDisks() == null){\n+            if (s_logger.isDebugEnabled()) {\n+                s_logger.debug(\"DeployDestination has no storage pools specified, cannot prepare Volumes for the vm: \"+ vm);\n+            }\n+            throw new CloudRuntimeException(\"Unable to prepare Volume for vm because DeployDestination DeployDestination has no storage pools specified\");\n+    \t}\n         List<VolumeVO> vols = _volsDao.findUsableVolumesForInstance(vm.getId());\n         if (s_logger.isDebugEnabled()) {\n             s_logger.debug(\"Preparing \" + vols.size() + \" volumes for \" + vm);\n@@ -2489,6 +2501,9 @@ public void prepare(VirtualMachineProfile<? extends VirtualMachine> vm, DeployDe\n         \t\t recreateVols.add(vol);\n         \t}else{\n         \t\tStoragePool assignedPool = dest.getStorageForDisks().get(vol);\n+        \t\tif(assignedPool == null){\n+        \t\t\tthrow new StorageUnavailableException(\"No storage pool assigned in DeployDestination, Unable to create \" + vol,  -1L);\n+        \t\t}\n         \t\tif(vol.getPoolId() != assignedPool.getId()){\n         \t\t\tif (vol.isRecreatable()) {\n                         if (s_logger.isDebugEnabled()) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/47f43df01b1f64e6798eb0155175936b5fd206ae/server/src/com/cloud/storage/StorageManagerImpl.java",
                "sha": "31e70cbc7bd0e72a73ff83b9af033df549a1b562",
                "status": "modified"
            }
        ],
        "message": "More changes for 9387:\n\nChecks in StorageManagerImpl :: prepare() method to avoid NPE's if DeployDestination passed in is null.",
        "parent": "https://github.com/apache/cloudstack/commit/47c31a077a614d425910b69d339fb427ae054782",
        "repo": "cloudstack",
        "unit_tests": [
            "StorageManagerImplTest.java"
        ]
    },
    "cloudstack_497e586": {
        "bug_id": "cloudstack_497e586",
        "commit": "https://github.com/apache/cloudstack/commit/497e5863297c97c3e621b29758664af67a9eb05b",
        "file": [
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/cloudstack/blob/497e5863297c97c3e621b29758664af67a9eb05b/server/src/com/cloud/server/StatsCollector.java",
                "changes": 54,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/StatsCollector.java?ref=497e5863297c97c3e621b29758664af67a9eb05b",
                "deletions": 26,
                "filename": "server/src/com/cloud/server/StatsCollector.java",
                "patch": "@@ -339,32 +339,34 @@ public void run() {\n \t\t\t\t}\r\n \t\t\t\tConcurrentHashMap<Long, VolumeStats> volumeStats = new ConcurrentHashMap<Long, VolumeStats>();\r\n \t\t\t\tfor (Iterator<Long> iter = commandsByPool.keySet().iterator(); iter.hasNext();) {\r\n-\t\t\t\t\tLong poolId = iter.next();\r\n-\t\t\t\t\tList<VolumeCommand> commandsList = commandsByPool.get(poolId);\r\n-\t\t\t\t\t\r\n-\t\t\t\t\tlong[] volumeIdArray = new long[commandsList.size()];\r\n-\t\t\t\t\tCommands commands = new Commands(OnError.Continue);\r\n-\t\t\t\t\tfor (int i = 0; i < commandsList.size(); i++) {\r\n-\t\t\t\t\t\tVolumeCommand vCommand = commandsList.get(i);\r\n-\t\t\t\t\t\tvolumeIdArray[i] = vCommand.volumeId;\r\n-\t\t\t\t\t\tcommands.addCommand(vCommand.command);\r\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t            List<StoragePoolHostVO> poolhosts = _storagePoolHostDao.listByPoolId(poolId);\n-\t\t            for(StoragePoolHostVO poolhost : poolhosts) {\n-    \t\t\t\t\tAnswer[] answers = _agentMgr.send(poolhost.getHostId(), commands);\r\n-    \t\t\t\t\tif (answers != null) {\r\n-    \t\t\t\t\t    long totalBytes = 0L;\r\n-    \t\t\t\t\t\tfor (int i = 0; i < answers.length; i++) {\r\n-    \t\t\t\t\t\t\tif (answers[i].getResult()) {\r\n-    \t\t\t\t\t\t\t    VolumeStats vStats = (VolumeStats)answers[i];\r\n-    \t\t\t\t\t\t\t\tvolumeStats.put(volumeIdArray[i], vStats);\r\n-    \t\t\t\t\t\t\t\ttotalBytes += vStats.getBytesUsed();\r\n-    \t\t\t\t\t\t\t}\r\n-    \t\t\t\t\t\t}\n-    \t\t\t\t\t\tbreak;\n-                        }\n-\t\t            }\r\n+\t\t\t\t\tLong poolId = iter.next();\n+\t\t\t\t\tif(poolId != null) {\r\n+\t\t\t\t\t\tList<VolumeCommand> commandsList = commandsByPool.get(poolId);\r\n+\t\t\t\t\t\t\r\n+\t\t\t\t\t\tlong[] volumeIdArray = new long[commandsList.size()];\r\n+\t\t\t\t\t\tCommands commands = new Commands(OnError.Continue);\r\n+\t\t\t\t\t\tfor (int i = 0; i < commandsList.size(); i++) {\r\n+\t\t\t\t\t\t\tVolumeCommand vCommand = commandsList.get(i);\r\n+\t\t\t\t\t\t\tvolumeIdArray[i] = vCommand.volumeId;\r\n+\t\t\t\t\t\t\tcommands.addCommand(vCommand.command);\r\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\t\n+\t\t\t            List<StoragePoolHostVO> poolhosts = _storagePoolHostDao.listByPoolId(poolId);\n+\t\t\t            for(StoragePoolHostVO poolhost : poolhosts) {\n+\t    \t\t\t\t\tAnswer[] answers = _agentMgr.send(poolhost.getHostId(), commands);\r\n+\t    \t\t\t\t\tif (answers != null) {\r\n+\t    \t\t\t\t\t    long totalBytes = 0L;\r\n+\t    \t\t\t\t\t\tfor (int i = 0; i < answers.length; i++) {\r\n+\t    \t\t\t\t\t\t\tif (answers[i].getResult()) {\r\n+\t    \t\t\t\t\t\t\t    VolumeStats vStats = (VolumeStats)answers[i];\r\n+\t    \t\t\t\t\t\t\t\tvolumeStats.put(volumeIdArray[i], vStats);\r\n+\t    \t\t\t\t\t\t\t\ttotalBytes += vStats.getBytesUsed();\r\n+\t    \t\t\t\t\t\t\t}\r\n+\t    \t\t\t\t\t\t}\n+\t    \t\t\t\t\t\tbreak;\n+\t                        }\n+\t\t\t            }\n+\t\t\t\t\t}\r\n \t\t\t\t}\r\n \r\n \t\t\t\t// We replace the existing volumeStats so that it does not grow with no bounds\r",
                "raw_url": "https://github.com/apache/cloudstack/raw/497e5863297c97c3e621b29758664af67a9eb05b/server/src/com/cloud/server/StatsCollector.java",
                "sha": "cb2ce49a1cdacfc8bcf75a0e6cab3240ef4cccea",
                "status": "modified"
            }
        ],
        "message": "Fix the annoying NPE in StatsCollector",
        "parent": "https://github.com/apache/cloudstack/commit/b828af8f58b7fdd9efb741637cdefec4e7a41b8e",
        "repo": "cloudstack",
        "unit_tests": [
            "StatsCollectorTest.java"
        ]
    },
    "cloudstack_49999bf": {
        "bug_id": "cloudstack_49999bf",
        "commit": "https://github.com/apache/cloudstack/commit/49999bf609e29b85f86581c3cb4b02ad496edb84",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/49999bf609e29b85f86581c3cb4b02ad496edb84/core/src/com/cloud/storage/resource/NfsSecondaryStorageResource.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/core/src/com/cloud/storage/resource/NfsSecondaryStorageResource.java?ref=49999bf609e29b85f86581c3cb4b02ad496edb84",
                "deletions": 1,
                "filename": "core/src/com/cloud/storage/resource/NfsSecondaryStorageResource.java",
                "patch": "@@ -192,7 +192,8 @@ private Answer execute(ComputeChecksumCommand cmd) {\n         }\n         finally {\n             try {\n-                is.close();\n+            \tif(is != null)\n+            \t\tis.close();\n             } catch (IOException e) {\n                 if(s_logger.isDebugEnabled()){\n                   s_logger.debug(\"Could not close the file \" +absoluteTemplatePath);   ",
                "raw_url": "https://github.com/apache/cloudstack/raw/49999bf609e29b85f86581c3cb4b02ad496edb84/core/src/com/cloud/storage/resource/NfsSecondaryStorageResource.java",
                "sha": "855ceb9b40c2297d534fe4f49b842c735c549972",
                "status": "modified"
            }
        ],
        "message": "bug 10618: another place that could possibly throw NPE",
        "parent": "https://github.com/apache/cloudstack/commit/62a570484c4565254e4dda0370cae2ef713b366b",
        "repo": "cloudstack",
        "unit_tests": [
            "NfsSecondaryStorageResourceTest.java"
        ]
    },
    "cloudstack_4b21650": {
        "bug_id": "cloudstack_4b21650",
        "commit": "https://github.com/apache/cloudstack/commit/4b21650e233261cc9cf2464d3a5babf7bc80a49b",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/4b21650e233261cc9cf2464d3a5babf7bc80a49b/api/src/com/cloud/capacity/Capacity.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/capacity/Capacity.java?ref=4b21650e233261cc9cf2464d3a5babf7bc80a49b",
                "deletions": 2,
                "filename": "api/src/com/cloud/capacity/Capacity.java",
                "patch": "@@ -26,11 +26,11 @@\n     public static final short CAPACITY_TYPE_CPU = 1;\n     public static final short CAPACITY_TYPE_STORAGE = 2;\n     public static final short CAPACITY_TYPE_STORAGE_ALLOCATED = 3;\n-    public static final short CAPACITY_TYPE_PUBLIC_IP = 4;\n+    public static final short CAPACITY_TYPE_VIRTUAL_NETWORK_PUBLIC_IP = 4;\n     public static final short CAPACITY_TYPE_PRIVATE_IP = 5;\n     public static final short CAPACITY_TYPE_SECONDARY_STORAGE = 6;\n     public static final short CAPACITY_TYPE_VLAN = 7;\n-    \n+    public static final short CAPACITY_TYPE_DIRECT_ATTACHED_PUBLIC_IP = 8;\n     \n     public long getId();\n     ",
                "raw_url": "https://github.com/apache/cloudstack/raw/4b21650e233261cc9cf2464d3a5babf7bc80a49b/api/src/com/cloud/capacity/Capacity.java",
                "sha": "2151a86c3f83f38907cee291d18604aea4bb2724",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/4b21650e233261cc9cf2464d3a5babf7bc80a49b/core/src/com/cloud/alert/AlertManager.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/core/src/com/cloud/alert/AlertManager.java?ref=4b21650e233261cc9cf2464d3a5babf7bc80a49b",
                "deletions": 1,
                "filename": "core/src/com/cloud/alert/AlertManager.java",
                "patch": "@@ -26,8 +26,9 @@\n     public static final short ALERT_TYPE_CPU = CapacityVO.CAPACITY_TYPE_CPU;\n     public static final short ALERT_TYPE_STORAGE = CapacityVO.CAPACITY_TYPE_STORAGE;\n     public static final short ALERT_TYPE_STORAGE_ALLOCATED = CapacityVO.CAPACITY_TYPE_STORAGE_ALLOCATED;\n-    public static final short ALERT_TYPE_PUBLIC_IP = CapacityVO.CAPACITY_TYPE_PUBLIC_IP;\n+    public static final short ALERT_TYPE_VIRTUAL_NETWORK_PUBLIC_IP = CapacityVO.CAPACITY_TYPE_VIRTUAL_NETWORK_PUBLIC_IP;\n     public static final short ALERT_TYPE_PRIVATE_IP = CapacityVO.CAPACITY_TYPE_PRIVATE_IP;\n+    public static final short ALERT_TYPE_SECONDARY_STORAGE = CapacityVO.CAPACITY_TYPE_SECONDARY_STORAGE;\n     public static final short ALERT_TYPE_HOST = 6;\n     public static final short ALERT_TYPE_USERVM = 7;\n     public static final short ALERT_TYPE_DOMAIN_ROUTER = 8;",
                "raw_url": "https://github.com/apache/cloudstack/raw/4b21650e233261cc9cf2464d3a5babf7bc80a49b/core/src/com/cloud/alert/AlertManager.java",
                "sha": "ecb52e92f805db269786672ed1b7a5f61197a3c2",
                "status": "modified"
            },
            {
                "additions": 51,
                "blob_url": "https://github.com/apache/cloudstack/blob/4b21650e233261cc9cf2464d3a5babf7bc80a49b/server/src/com/cloud/alert/AlertManagerImpl.java",
                "changes": 68,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/alert/AlertManagerImpl.java?ref=4b21650e233261cc9cf2464d3a5babf7bc80a49b",
                "deletions": 17,
                "filename": "server/src/com/cloud/alert/AlertManagerImpl.java",
                "patch": "@@ -31,11 +31,11 @@\n \n import javax.ejb.Local;\n import javax.mail.Authenticator;\n-import javax.mail.Message.RecipientType;\n import javax.mail.MessagingException;\n import javax.mail.PasswordAuthentication;\n import javax.mail.Session;\n import javax.mail.URLName;\n+import javax.mail.Message.RecipientType;\n import javax.mail.internet.InternetAddress;\n import javax.naming.ConfigurationException;\n \n@@ -53,18 +53,15 @@\n import com.cloud.dc.ClusterVO;\n import com.cloud.dc.DataCenterVO;\n import com.cloud.dc.HostPodVO;\n+import com.cloud.dc.Vlan.VlanType;\n import com.cloud.dc.dao.ClusterDao;\n import com.cloud.dc.dao.DataCenterDao;\n import com.cloud.dc.dao.DataCenterIpAddressDao;\n-import com.cloud.dc.dao.DataCenterVnetDaoImpl;\n import com.cloud.dc.dao.HostPodDao;\n import com.cloud.host.Host;\n import com.cloud.host.HostVO;\n-import com.cloud.host.Status;\n import com.cloud.host.dao.HostDao;\n import com.cloud.network.dao.IPAddressDao;\n-import com.cloud.service.ServiceOfferingVO;\n-import com.cloud.service.dao.ServiceOfferingDao;\n import com.cloud.storage.StorageManager;\n import com.cloud.storage.StoragePoolVO;\n import com.cloud.storage.dao.StoragePoolDao;\n@@ -75,7 +72,6 @@\n import com.cloud.utils.component.Inject;\n import com.cloud.utils.db.DB;\n import com.cloud.utils.db.SearchCriteria;\n-import com.cloud.utils.db.Transaction;\n import com.sun.mail.smtp.SMTPMessage;\n import com.sun.mail.smtp.SMTPSSLTransport;\n import com.sun.mail.smtp.SMTPTransport;\n@@ -114,6 +110,8 @@\n     private double _publicIPCapacityThreshold = 0.75;\r\n     private double _privateIPCapacityThreshold = 0.75;\n     private double _secondaryStorageCapacityThreshold = 0.75; \n+\tprivate double _vlanCapacityThreshold = 0.75;\n+\tprivate double _directNetworkPublicIpCapacityThreshold = 0.75;\n     Map<Short,Double> _capacityTypeThresholdMap = new HashMap<Short, Double>();\r\n \r\n     @Override\r\n@@ -157,7 +155,9 @@ public boolean configure(String name, Map<String, Object> params) throws Configu\n         String storageAllocCapacityThreshold = configs.get(\"storage.allocated.capacity.threshold\");\r\n         String publicIPCapacityThreshold = configs.get(\"public.ip.capacity.threshold\");\r\n         String privateIPCapacityThreshold = configs.get(\"private.ip.capacity.threshold\");\n-        String secondaryStorageCapacityThreshold = configs.get(\"secondarystorage.capacity.threshold\");\r\n+        String secondaryStorageCapacityThreshold = configs.get(\"secondarystorage.capacity.threshold\");\n+        String vlanCapacityThreshold = configs.get(\"vlan.capacity.threshold\");\n+        String directNetworkPublicIpCapacityThreshold = configs.get(\"directnetwork.public.ip.capacity.threshold\");\r\n         \r\n         if (storageCapacityThreshold != null) {\r\n             _storageCapacityThreshold = Double.parseDouble(storageCapacityThreshold);\r\n@@ -180,14 +180,22 @@ public boolean configure(String name, Map<String, Object> params) throws Configu\n         if (secondaryStorageCapacityThreshold != null) {\n             _secondaryStorageCapacityThreshold = Double.parseDouble(secondaryStorageCapacityThreshold);\n         }\n+        if (vlanCapacityThreshold != null) {\n+            _vlanCapacityThreshold = Double.parseDouble(vlanCapacityThreshold);\n+        }\n+        if (directNetworkPublicIpCapacityThreshold != null) {\n+            _directNetworkPublicIpCapacityThreshold = Double.parseDouble(directNetworkPublicIpCapacityThreshold);\n+        }\n         \n         _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_STORAGE, _storageCapacityThreshold);\n         _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED, _storageAllocCapacityThreshold);\r\n         _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_CPU, _cpuCapacityThreshold);\n         _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_MEMORY, _memoryCapacityThreshold);\n-        _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_PUBLIC_IP, _publicIPCapacityThreshold);\n+        _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_VIRTUAL_NETWORK_PUBLIC_IP, _publicIPCapacityThreshold);\n         _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_PRIVATE_IP, _privateIPCapacityThreshold);\n         _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_SECONDARY_STORAGE, _secondaryStorageCapacityThreshold);\n+        _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_VLAN, _vlanCapacityThreshold);\n+        _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_DIRECT_ATTACHED_PUBLIC_IP, _directNetworkPublicIpCapacityThreshold);\n         \r\n         String capacityCheckPeriodStr = configs.get(\"capacity.check.period\");\r\n         if (capacityCheckPeriodStr != null) {\r\n@@ -291,10 +299,15 @@ public void recalculateCapacity() {\n \t\t        //ideal way would be to remove out the vlan param, and filter only on dcId\n \t\t        //implementing the same\n         \t\t\r\n-            \t// Calculate new Public IP capacity\n-            \ts_logger.trace(\"Executing public ip capacity update\");\n-\t\t        createOrUpdateIpCapacity(dcId, null, CapacityVO.CAPACITY_TYPE_PUBLIC_IP);\n-                s_logger.trace(\"Done with public ip capacity update\");\n+            \t// Calculate new Public IP capacity for Virtual Network\n+            \ts_logger.trace(\"Executing public ip capacity update for Virtual Network\");\n+\t\t        createOrUpdateIpCapacity(dcId, null, CapacityVO.CAPACITY_TYPE_VIRTUAL_NETWORK_PUBLIC_IP);\n+                s_logger.trace(\"Done with public ip capacity update for Virtual Network\");\n+                \n+            \t// Calculate new Public IP capacity for Direct Attached Network\n+            \ts_logger.trace(\"Executing public ip capacity update for Direct Attached Network\");\n+\t\t        createOrUpdateIpCapacity(dcId, null, CapacityVO.CAPACITY_TYPE_DIRECT_ATTACHED_PUBLIC_IP);\n+                s_logger.trace(\"Done with public ip capacity update for Direct Attached Network\");\n                 \n                 //Calculate VLAN's capacity\n             \ts_logger.trace(\"Executing VLAN capacity update\");\n@@ -364,9 +377,12 @@ public void createOrUpdateIpCapacity(Long dcId, Long podId, short capacityType){\n         if (capacityType == CapacityVO.CAPACITY_TYPE_PRIVATE_IP){\n         \ttotalIPs = _privateIPAddressDao.countIPs(podId, dcId, false);\n         \tallocatedIPs = _privateIPAddressDao.countIPs(podId, dcId, true);\n-        }else{\n-        \ttotalIPs = _publicIPAddressDao.countIPsForDashboard(dcId, false);\n-            allocatedIPs = _publicIPAddressDao.countIPsForDashboard(dcId, true);\n+        }else if (capacityType == CapacityVO.CAPACITY_TYPE_VIRTUAL_NETWORK_PUBLIC_IP){\n+        \ttotalIPs = _publicIPAddressDao.countIPsForNetwork(dcId, false, VlanType.VirtualNetwork);\n+            allocatedIPs = _publicIPAddressDao.countIPsForNetwork(dcId, true, VlanType.VirtualNetwork);\n+        }else {\n+        \ttotalIPs = _publicIPAddressDao.countIPsForNetwork(dcId, false, VlanType.DirectAttached);\n+            allocatedIPs = _publicIPAddressDao.countIPsForNetwork(dcId, true, VlanType.DirectAttached);\n         }\n         \n         if (capacities.size() == 0){\n@@ -416,6 +432,9 @@ public void checkForAlerts(){\n         for(DataCenterVO dc : dataCenterList){\n         \tfor (Short capacityType : dataCenterCapacityTypes){\n         \t\tList<SummedCapacity> capacity = _capacityDao.findCapacityBy(capacityType.intValue(), dc.getId(), null, null);\n+        \t\tif (capacity == null || capacity.size() == 0){\n+        \t\t\tcontinue;\n+        \t\t}\n         \t\tdouble totalCapacity = capacity.get(0).getTotalCapacity(); \n                 double usedCapacity =  capacity.get(0).getUsedCapacity();\n                 if (totalCapacity != 0 && usedCapacity/totalCapacity > _capacityTypeThresholdMap.get(capacityType)){\n@@ -428,6 +447,9 @@ public void checkForAlerts(){\n         for( HostPodVO pod : podList){\n         \tfor (Short capacityType : podCapacityTypes){\n         \t\tList<SummedCapacity> capacity = _capacityDao.findCapacityBy(capacityType.intValue(), pod.getDataCenterId(), pod.getId(), null);\n+        \t\tif (capacity == null || capacity.size() == 0){\n+        \t\t\tcontinue;\n+        \t\t}\n         \t\tdouble totalCapacity = capacity.get(0).getTotalCapacity(); \n                 double usedCapacity =  capacity.get(0).getUsedCapacity();\n                 if (totalCapacity != 0 && usedCapacity/totalCapacity > _capacityTypeThresholdMap.get(capacityType)){\n@@ -441,6 +463,9 @@ public void checkForAlerts(){\n         for( ClusterVO cluster : clusterList){\n         \tfor (Short capacityType : clusterCapacityTypes){\n         \t\tList<SummedCapacity> capacity = _capacityDao.findCapacityBy(capacityType.intValue(), cluster.getDataCenterId(), null, cluster.getId());\n+        \t\tif (capacity == null || capacity.size() == 0){\n+        \t\t\tcontinue;\n+        \t\t}\n         \t\tdouble totalCapacity = capacity.get(0).getTotalCapacity(); \n                 double usedCapacity =  capacity.get(0).getUsedCapacity();\n                 if (totalCapacity != 0 && usedCapacity/totalCapacity > _capacityTypeThresholdMap.get(capacityType)){\n@@ -485,7 +510,7 @@ private void generateEmailAlert(DataCenterVO dc, HostPodVO pod, ClusterVO cluste\n             usedStr = formatBytesToMegabytes(usedCapacity);\n             msgContent = \"Unallocated storage space is low, total: \" + totalStr + \" MB, allocated: \" + usedStr + \" MB (\" + pctStr + \"%)\";\n             break;\n-        case CapacityVO.CAPACITY_TYPE_PUBLIC_IP:\n+        case CapacityVO.CAPACITY_TYPE_VIRTUAL_NETWORK_PUBLIC_IP:\n             msgSubject = \"System Alert: Number of unallocated public IPs is low in availablity zone \" + dc.getName();\n             totalStr = Double.toString(totalCapacity);\n             usedStr = Double.toString(usedCapacity);\n@@ -497,6 +522,13 @@ private void generateEmailAlert(DataCenterVO dc, HostPodVO pod, ClusterVO cluste\n             usedStr = Double.toString(usedCapacity);\n         \tmsgContent = \"Number of unallocated private IPs is low, total: \" + totalStr + \", allocated: \" + usedStr + \" (\" + pctStr + \"%)\";\n         \tbreak;\n+        \t\n+        case CapacityVO.CAPACITY_TYPE_SECONDARY_STORAGE:        \t\n+        \tmsgSubject = \"System Alert: Low Available Storage in availablity zone \" + dc.getName();\n+        \ttotalStr = Double.toString(totalCapacity);\n+            usedStr = Double.toString(usedCapacity);\n+        \tmsgContent = \"Available secondary storage space is low, total: \" + totalStr + \" MB, used: \" + usedStr + \" MB (\" + pctStr + \"%)\";\n+        \tbreak;        \n         }\n     \t\n     \ttry {\n@@ -509,8 +541,10 @@ private void generateEmailAlert(DataCenterVO dc, HostPodVO pod, ClusterVO cluste\n     private List<Short> getCapacityTypesAtZoneLevel(){\n     \t\n     \tList<Short> dataCenterCapacityTypes = new ArrayList<Short>();\n-    \tdataCenterCapacityTypes.add(Capacity.CAPACITY_TYPE_PUBLIC_IP);\n+    \tdataCenterCapacityTypes.add(Capacity.CAPACITY_TYPE_VIRTUAL_NETWORK_PUBLIC_IP);\n+    \tdataCenterCapacityTypes.add(Capacity.CAPACITY_TYPE_DIRECT_ATTACHED_PUBLIC_IP);\n     \tdataCenterCapacityTypes.add(Capacity.CAPACITY_TYPE_SECONDARY_STORAGE);\n+    \tdataCenterCapacityTypes.add(Capacity.CAPACITY_TYPE_VLAN);\n \t\treturn dataCenterCapacityTypes;\n     \t\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/4b21650e233261cc9cf2464d3a5babf7bc80a49b/server/src/com/cloud/alert/AlertManagerImpl.java",
                "sha": "d8f1d78eb1ca30b7324985d0af4d2e3f4da5d4ef",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/4b21650e233261cc9cf2464d3a5babf7bc80a49b/server/src/com/cloud/configuration/Config.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/configuration/Config.java?ref=4b21650e233261cc9cf2464d3a5babf7bc80a49b",
                "deletions": 0,
                "filename": "server/src/com/cloud/configuration/Config.java",
                "patch": "@@ -101,6 +101,8 @@\n \tPublicIpCapacityThreshold(\"Usage\", ManagementServer.class, Float.class, \"public.ip.capacity.threshold\", \"0.85\", \"Percentage (as a value between 0 and 1) of public IP address space utilization above which alerts will be sent.\", null),\n \tPrivateIpCapacityThreshold(\"Usage\", ManagementServer.class, Float.class, \"private.ip.capacity.threshold\", \"0.85\", \"Percentage (as a value between 0 and 1) of private IP address space utilization above which alerts will be sent.\", null),\n \tSecondaryStorageCapacityThreshold(\"Usage\", ManagementServer.class, Float.class, \"secondarystorage.capacity.threshold\", \"0.85\", \"Percentage (as a value between 0 and 1) of secondary storage utilization above which alerts will be sent about low storage available.\", null),\n+\tVlanCapacityThreshold(\"Usage\", ManagementServer.class, Float.class, \"vlan.capacity.threshold\", \"0.85\", \"Percentage (as a value between 0 and 1) of Zone Vlan utilization above which alerts will be sent about low number of Zone Vlans.\", null),\n+\tDirectNetworkPublicIpCapacityThreshold(\"Usage\", ManagementServer.class, Float.class, \"directnetwork.public.ip.capacity.threshold\", \"0.85\", \"Percentage (as a value between 0 and 1) of Direct Network Public Ip Utilization above which alerts will be sent about low number of direct network public ips.\", null),\n \t\n \t// Console Proxy\n \tConsoleProxyCapacityStandby(\"Console Proxy\", AgentManager.class, String.class, \"consoleproxy.capacity.standby\", \"10\", \"The minimal number of console proxy viewer sessions that system is able to serve immediately(standby capacity)\", null),",
                "raw_url": "https://github.com/apache/cloudstack/raw/4b21650e233261cc9cf2464d3a5babf7bc80a49b/server/src/com/cloud/configuration/Config.java",
                "sha": "40ebebbca86e3dae5acda9f13784eb870272cfb2",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/4b21650e233261cc9cf2464d3a5babf7bc80a49b/server/src/com/cloud/network/dao/IPAddressDao.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/dao/IPAddressDao.java?ref=4b21650e233261cc9cf2464d3a5babf7bc80a49b",
                "deletions": 1,
                "filename": "server/src/com/cloud/network/dao/IPAddressDao.java",
                "patch": "@@ -20,6 +20,7 @@\n \r\n import java.util.List;\n \n+import com.cloud.dc.Vlan.VlanType;\n import com.cloud.network.IPAddressVO;\n import com.cloud.utils.db.GenericDao;\n import com.cloud.utils.net.Ip;\n@@ -48,7 +49,7 @@\n \t\r\n \tboolean mark(long dcId, Ip ip);\n \n-\tint countIPsForDashboard(long dcId, boolean onlyCountAllocated);\n+\tint countIPsForNetwork(long dcId, boolean onlyCountAllocated, VlanType vlanType);\n \t\n \tIPAddressVO findByAssociatedVmId(long vmId);\n \t",
                "raw_url": "https://github.com/apache/cloudstack/raw/4b21650e233261cc9cf2464d3a5babf7bc80a49b/server/src/com/cloud/network/dao/IPAddressDao.java",
                "sha": "8352dbbd95e99bb0c91a0f830ba815ebe0dbc9b5",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/4b21650e233261cc9cf2464d3a5babf7bc80a49b/server/src/com/cloud/network/dao/IPAddressDaoImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/dao/IPAddressDaoImpl.java?ref=4b21650e233261cc9cf2464d3a5babf7bc80a49b",
                "deletions": 2,
                "filename": "server/src/com/cloud/network/dao/IPAddressDaoImpl.java",
                "patch": "@@ -245,16 +245,17 @@ public int countIPs(long dcId, long vlanId, boolean onlyCountAllocated) {\n     }\n \n     @Override\n-    public int countIPsForDashboard(long dcId, boolean onlyCountAllocated) {\n+    public int countIPsForNetwork(long dcId, boolean onlyCountAllocated, VlanType vlanType) {\n         SearchCriteria<Integer> sc = AllIpCountForDashboard.create();\n         sc.setParameters(\"dc\", dcId);\n         if (onlyCountAllocated){\n         \tsc.setParameters(\"state\", State.Free);\n         }\n-        sc.setJoinParameters(\"vlan\", \"vlanType\", VlanType.VirtualNetwork.toString());\n+        sc.setJoinParameters(\"vlan\", \"vlanType\", vlanType.toString());\n         return customSearch(sc, null).get(0);\n     }\n \n+    \n     @Override\n     @DB\n     public int countIPs(long dcId, Long accountId, String vlanId, String vlanGateway, String vlanNetmask) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/4b21650e233261cc9cf2464d3a5babf7bc80a49b/server/src/com/cloud/network/dao/IPAddressDaoImpl.java",
                "sha": "fac3f748b6e1b4a4ac0b158e17fe606245d32e11",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/4b21650e233261cc9cf2464d3a5babf7bc80a49b/server/src/com/cloud/server/ManagementServerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/ManagementServerImpl.java?ref=4b21650e233261cc9cf2464d3a5babf7bc80a49b",
                "deletions": 1,
                "filename": "server/src/com/cloud/server/ManagementServerImpl.java",
                "patch": "@@ -2484,7 +2484,7 @@ private void updateDomainChildren(DomainVO domain, String updatedDomainPrefix) {\n         \t\t\tsummedCapacity.getUsedCapacity() + summedCapacity.getReservedCapacity(), \n         \t\t\tsummedCapacity.getTotalCapacity(), summedCapacity.getCapacityType());\n         \t\n-        \tif (capacityType == Capacity.CAPACITY_TYPE_CPU){\n+        \tif ( summedCapacity.getCapacityType() == Capacity.CAPACITY_TYPE_CPU){\n         \t\tcapacity.setTotalCapacity((long)(summedCapacity.getTotalCapacity() * ApiDBUtils.getCpuOverprovisioningFactor()));\n         \t}\n         \tcapacities.add(capacity);\t\t",
                "raw_url": "https://github.com/apache/cloudstack/raw/4b21650e233261cc9cf2464d3a5babf7bc80a49b/server/src/com/cloud/server/ManagementServerImpl.java",
                "sha": "e7472d0720da007703ea32e6966e36cea29baea2",
                "status": "modified"
            }
        ],
        "message": "bug 10848: Removing NPE from listCapacity and new alert code. Adding CAPACITY_TYPE_DIRECT_ATTACHED_PUBLIC_IP. Introducing thresholds for vlan and direct attached public ips.",
        "parent": "https://github.com/apache/cloudstack/commit/3921421ce56a4de11ddf00f79ba84d7943f6a0fd",
        "repo": "cloudstack",
        "unit_tests": [
            "ManagementServerImplTest.java"
        ]
    },
    "cloudstack_4b8bfe2": {
        "bug_id": "cloudstack_4b8bfe2",
        "commit": "https://github.com/apache/cloudstack/commit/4b8bfe26275f7eb6e98abe77849153eaa93e8205",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/4b8bfe26275f7eb6e98abe77849153eaa93e8205/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=4b8bfe26275f7eb6e98abe77849153eaa93e8205",
                "deletions": 5,
                "filename": "engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -1873,7 +1873,8 @@ protected void migrate(VMInstanceVO vm, long srcHostId, DeployDestination dest)\n         try {\n             pfma = _agentMgr.send(dstHostId, pfmc);\n             if (pfma == null || !pfma.getResult()) {\n-                String msg = \"Unable to prepare for migration due to \" + pfma.getDetails();\n+                String details = (pfma != null) ? pfma.getDetails() : \"null answer returned\";\n+                String msg = \"Unable to prepare for migration due to \" + details;\n                 pfma = null;\n                 throw new AgentUnavailableException(msg, dstHostId);\n             }\n@@ -1909,7 +1910,8 @@ protected void migrate(VMInstanceVO vm, long srcHostId, DeployDestination dest)\n             try {\n                 Answer ma = _agentMgr.send(vm.getLastHostId(), mc);\n                 if (ma == null || !ma.getResult()) {\n-                    throw new CloudRuntimeException(\"Unable to migrate due to \" + ma.getDetails());\n+                    String details = (ma != null) ? ma.getDetails() : \"null answer returned\";\n+                    throw new CloudRuntimeException(\"Unable to migrate due to \" + details);\n                 }\n             } catch (OperationTimedoutException e) {\n                 if (e.isActive()) {\n@@ -3263,7 +3265,8 @@ private void orchestrateMigrateForScale(String vmUuid, long srcHostId, DeployDes\n         try {\n             pfma = _agentMgr.send(dstHostId, pfmc);\n             if (pfma == null || !pfma.getResult()) {\n-                String msg = \"Unable to prepare for migration due to \" + pfma.getDetails();\n+                String details = (pfma != null) ? pfma.getDetails() : \"null answer returned\";\n+                String msg = \"Unable to prepare for migration due to \" + details;\n                 pfma = null;\n                 throw new AgentUnavailableException(msg, dstHostId);\n             }\n@@ -3296,8 +3299,10 @@ private void orchestrateMigrateForScale(String vmUuid, long srcHostId, DeployDes\n             try {\n                 Answer ma = _agentMgr.send(vm.getLastHostId(), mc);\n                 if (ma == null || !ma.getResult()) {\n-                    s_logger.error(\"Unable to migrate due to \" + ma.getDetails());\n-                    throw new CloudRuntimeException(\"Unable to migrate due to \" + ma.getDetails());\n+                    String details = (ma != null) ? ma.getDetails() : \"null answer returned\";\n+                    String msg = \"Unable to migrate due to \" + details;\n+                    s_logger.error(msg);\n+                    throw new CloudRuntimeException(msg);\n                 }\n             } catch (OperationTimedoutException e) {\n                 if (e.isActive()) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/4b8bfe26275f7eb6e98abe77849153eaa93e8205/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "de2fd28e3a18af0c114553e6dcfaf9485036aaee",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-7563: Fix potential NPE from FingBugs.",
        "parent": "https://github.com/apache/cloudstack/commit/771d05238160764b4eb222d80696a3dce1422fa6",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_4c42aaf": {
        "bug_id": "cloudstack_4c42aaf",
        "commit": "https://github.com/apache/cloudstack/commit/4c42aafae0d3286a38d796a7c69a6aec6810cf79",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/4c42aafae0d3286a38d796a7c69a6aec6810cf79/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java?ref=4c42aafae0d3286a38d796a7c69a6aec6810cf79",
                "deletions": 0,
                "filename": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java",
                "patch": "@@ -499,6 +499,9 @@ public VolumeInfo copyVolumeFromSecToPrimary(VolumeInfo volume, VirtualMachine v\n \n         // Find a suitable storage to create volume on\n         StoragePool destPool = findStoragePool(dskCh, dc, pod, clusterId, null, vm, avoidPools);\n+        if (destPool == null) {\n+            throw new CloudRuntimeException(\"Failed to find a suitable storage pool to create Volume in the pod/cluster of the provided VM \"+ vm.getUuid());\n+        }\n         DataStore destStore = dataStoreMgr.getDataStore(destPool.getId(), DataStoreRole.Primary);\n         AsyncCallFuture<VolumeApiResult> future = volService.copyVolume(volume, destStore);\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/4c42aafae0d3286a38d796a7c69a6aec6810cf79/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java",
                "sha": "c8279ff3f99c85b0fdcce52ba5d3dbc4ae6db1e4",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/4c42aafae0d3286a38d796a7c69a6aec6810cf79/engine/schema/src/main/java/com/cloud/configuration/dao/ResourceCountDao.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/main/java/com/cloud/configuration/dao/ResourceCountDao.java?ref=4c42aafae0d3286a38d796a7c69a6aec6810cf79",
                "deletions": 3,
                "filename": "engine/schema/src/main/java/com/cloud/configuration/dao/ResourceCountDao.java",
                "patch": "@@ -39,9 +39,6 @@\n      */\n     void setResourceCount(long ownerId, ResourceOwnerType ownerType, ResourceType type, long count);\n \n-    @Deprecated\n-    void updateDomainCount(long domainId, ResourceType type, boolean increment, long delta);\n-\n     boolean updateById(long id, boolean increment, long delta);\n \n     void createResourceCounts(long ownerId, ResourceOwnerType ownerType);",
                "raw_url": "https://github.com/apache/cloudstack/raw/4c42aafae0d3286a38d796a7c69a6aec6810cf79/engine/schema/src/main/java/com/cloud/configuration/dao/ResourceCountDao.java",
                "sha": "28f2a53607162264d07361027e3a24a0d0c53161",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/4c42aafae0d3286a38d796a7c69a6aec6810cf79/engine/schema/src/main/java/com/cloud/configuration/dao/ResourceCountDaoImpl.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/main/java/com/cloud/configuration/dao/ResourceCountDaoImpl.java?ref=4c42aafae0d3286a38d796a7c69a6aec6810cf79",
                "deletions": 10,
                "filename": "engine/schema/src/main/java/com/cloud/configuration/dao/ResourceCountDaoImpl.java",
                "patch": "@@ -120,16 +120,6 @@ public void setResourceCount(long ownerId, ResourceOwnerType ownerType, Resource\n         }\n     }\n \n-    @Override\n-    @Deprecated\n-    public void updateDomainCount(long domainId, ResourceType type, boolean increment, long delta) {\n-        delta = increment ? delta : delta * -1;\n-\n-        ResourceCountVO resourceCountVO = findByOwnerAndType(domainId, ResourceOwnerType.Domain, type);\n-        resourceCountVO.setCount(resourceCountVO.getCount() + delta);\n-        update(resourceCountVO.getId(), resourceCountVO);\n-    }\n-\n     @Override\n     public boolean updateById(long id, boolean increment, long delta) {\n         delta = increment ? delta : delta * -1;",
                "raw_url": "https://github.com/apache/cloudstack/raw/4c42aafae0d3286a38d796a7c69a6aec6810cf79/engine/schema/src/main/java/com/cloud/configuration/dao/ResourceCountDaoImpl.java",
                "sha": "dbf2228183bc8fd89f9b897bb3efeb86863a6781",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/4c42aafae0d3286a38d796a7c69a6aec6810cf79/plugins/deployment-planners/implicit-dedication/src/main/java/com/cloud/deploy/ImplicitDedicationPlanner.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/deployment-planners/implicit-dedication/src/main/java/com/cloud/deploy/ImplicitDedicationPlanner.java?ref=4c42aafae0d3286a38d796a7c69a6aec6810cf79",
                "deletions": 5,
                "filename": "plugins/deployment-planners/implicit-dedication/src/main/java/com/cloud/deploy/ImplicitDedicationPlanner.java",
                "patch": "@@ -39,6 +39,7 @@\n import com.cloud.utils.NumbersUtil;\n import com.cloud.vm.VMInstanceVO;\n import com.cloud.vm.VirtualMachineProfile;\n+import org.springframework.util.CollectionUtils;\n \n public class ImplicitDedicationPlanner extends FirstFitPlanner implements DeploymentClusterPlanner {\n \n@@ -256,14 +257,15 @@ public PlannerResourceUsage getResourceUsage(VirtualMachineProfile vmProfile, De\n \n             // Get the list of all the hosts in the given clusters\n             List<Long> allHosts = new ArrayList<Long>();\n-            for (Long cluster : clusterList) {\n-                List<HostVO> hostsInCluster = resourceMgr.listAllHostsInCluster(cluster);\n-                for (HostVO hostVO : hostsInCluster) {\n+            if (!CollectionUtils.isEmpty(clusterList)) {\n+                for (Long cluster : clusterList) {\n+                    List<HostVO> hostsInCluster = resourceMgr.listAllHostsInCluster(cluster);\n+                    for (HostVO hostVO : hostsInCluster) {\n \n-                    allHosts.add(hostVO.getId());\n+                        allHosts.add(hostVO.getId());\n+                    }\n                 }\n             }\n-\n             // Go over all the hosts in the cluster and get a list of\n             // 1. All empty hosts, not running any vms.\n             // 2. Hosts running vms for this account and created by a service",
                "raw_url": "https://github.com/apache/cloudstack/raw/4c42aafae0d3286a38d796a7c69a6aec6810cf79/plugins/deployment-planners/implicit-dedication/src/main/java/com/cloud/deploy/ImplicitDedicationPlanner.java",
                "sha": "45f16abd2af678266ec011300a582afde0b4b7c3",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/4c42aafae0d3286a38d796a7c69a6aec6810cf79/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java?ref=4c42aafae0d3286a38d796a7c69a6aec6810cf79",
                "deletions": 2,
                "filename": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "patch": "@@ -2339,7 +2339,10 @@ public int compare(final DiskTO arg0, final DiskTO arg1) {\n                     disk.setCacheMode(DiskDef.DiskCacheMode.valueOf(volumeObjectTO.getCacheMode().toString().toUpperCase()));\n                 }\n             }\n-\n+            if (vm.getDevices() == null) {\n+                s_logger.error(\"There is no devices for\" + vm);\n+                throw new RuntimeException(\"There is no devices for\" + vm);\n+            }\n             vm.getDevices().addDevice(disk);\n         }\n \n@@ -2393,7 +2396,10 @@ private void createVif(final LibvirtVMDef vm, final NicTO nic, final String nicA\n                         + \") is \" + nic.getType() + \" traffic type. So, vsp-vr-ip \" + vrIp + \" is set in the metadata\");\n             }\n         }\n-\n+        if (vm.getDevices() == null) {\n+            s_logger.error(\"LibvirtVMDef object get devices with null result\");\n+            throw new InternalErrorException(\"LibvirtVMDef object get devices with null result\");\n+        }\n         vm.getDevices().addDevice(getVifDriver(nic.getType(), nic.getName()).plug(nic, vm.getPlatformEmulator(), nicAdapter));\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/4c42aafae0d3286a38d796a7c69a6aec6810cf79/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "sha": "f26d8ded0a453038f0bf5d6aaa621fbd8c00ebe6",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/4c42aafae0d3286a38d796a7c69a6aec6810cf79/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/LibvirtStorageAdaptor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/LibvirtStorageAdaptor.java?ref=4c42aafae0d3286a38d796a7c69a6aec6810cf79",
                "deletions": 1,
                "filename": "plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/LibvirtStorageAdaptor.java",
                "patch": "@@ -522,7 +522,9 @@ public KVMStoragePool createStoragePool(String name, String host, int port, Stri\n                     s_logger.debug(\"Checking path of existing pool \" + poolname + \" against pool we want to create\");\n                     StoragePool p = conn.storagePoolLookupByName(poolname);\n                     LibvirtStoragePoolDef pdef = getStoragePoolDef(conn, p);\n-\n+                    if (pdef == null) {\n+                        throw new CloudRuntimeException(\"Unable to parse the storage pool definition for storage pool \" + poolname);\n+                    }\n                     String targetPath = pdef.getTargetPath();\n                     if (targetPath != null && targetPath.equals(path)) {\n                         s_logger.debug(\"Storage pool utilizing path '\" + path + \"' already exists as pool \" + poolname +",
                "raw_url": "https://github.com/apache/cloudstack/raw/4c42aafae0d3286a38d796a7c69a6aec6810cf79/plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/LibvirtStorageAdaptor.java",
                "sha": "63f7872d05e8fb88b9e54e8593b47e3e8cdcdf1e",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/4c42aafae0d3286a38d796a7c69a6aec6810cf79/server/src/main/java/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java?ref=4c42aafae0d3286a38d796a7c69a6aec6810cf79",
                "deletions": 0,
                "filename": "server/src/main/java/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "patch": "@@ -2139,6 +2139,12 @@ public boolean startRemoteAccessVpn(final Network network, final RemoteAccessVpn\n             }\n \n             Answer answer = cmds.getAnswer(\"users\");\n+            if (answer == null) {\n+                s_logger.error(\"Unable to start vpn: unable add users to vpn in zone \" + router.getDataCenterId() + \" for account \" + vpn.getAccountId() + \" on domR: \"\n+                        + router.getInstanceName() + \" due to null answer\");\n+                throw new ResourceUnavailableException(\"Unable to start vpn in zone \" + router.getDataCenterId() + \" for account \" + vpn.getAccountId() + \" on domR: \"\n+                        + router.getInstanceName() + \" due to null answer\", DataCenter.class, router.getDataCenterId());\n+            }\n             if (!answer.getResult()) {\n                 s_logger.error(\"Unable to start vpn: unable add users to vpn in zone \" + router.getDataCenterId() + \" for account \" + vpn.getAccountId() + \" on domR: \"\n                         + router.getInstanceName() + \" due to \" + answer.getDetails());",
                "raw_url": "https://github.com/apache/cloudstack/raw/4c42aafae0d3286a38d796a7c69a6aec6810cf79/server/src/main/java/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "sha": "63587a898359568c0a95956755d406773ce1194b",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/4c42aafae0d3286a38d796a7c69a6aec6810cf79/server/src/main/java/com/cloud/network/router/VpcVirtualNetworkApplianceManagerImpl.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/network/router/VpcVirtualNetworkApplianceManagerImpl.java?ref=4c42aafae0d3286a38d796a7c69a6aec6810cf79",
                "deletions": 6,
                "filename": "server/src/main/java/com/cloud/network/router/VpcVirtualNetworkApplianceManagerImpl.java",
                "patch": "@@ -740,18 +740,20 @@ public boolean startRemoteAccessVpn(final RemoteAccessVpn vpn, final VirtualRout\n             throw new AgentUnavailableException(\"Unable to send commands to virtual router \", router.getHostId(), e);\n         }\n         Answer answer = cmds.getAnswer(\"users\");\n-        if (!answer.getResult()) {\n+        if (answer == null || !answer.getResult()) {\n+            String errorMessage = (answer == null) ? \"null answer object\" : answer.getDetails();\n             s_logger.error(\"Unable to start vpn: unable add users to vpn in zone \" + router.getDataCenterId() + \" for account \" + vpn.getAccountId() + \" on domR: \"\n-                    + router.getInstanceName() + \" due to \" + answer.getDetails());\n+                    + router.getInstanceName() + \" due to \" + errorMessage);\n             throw new ResourceUnavailableException(\"Unable to start vpn: Unable to add users to vpn in zone \" + router.getDataCenterId() + \" for account \" + vpn.getAccountId()\n-            + \" on domR: \" + router.getInstanceName() + \" due to \" + answer.getDetails(), DataCenter.class, router.getDataCenterId());\n+            + \" on domR: \" + router.getInstanceName() + \" due to \" + errorMessage, DataCenter.class, router.getDataCenterId());\n         }\n         answer = cmds.getAnswer(\"startVpn\");\n-        if (!answer.getResult()) {\n+        if (answer == null || !answer.getResult()) {\n+            String errorMessage = (answer == null) ? \"null answer object\" : answer.getDetails();\n             s_logger.error(\"Unable to start vpn in zone \" + router.getDataCenterId() + \" for account \" + vpn.getAccountId() + \" on domR: \" + router.getInstanceName() + \" due to \"\n-                    + answer.getDetails());\n+                    + errorMessage);\n             throw new ResourceUnavailableException(\"Unable to start vpn in zone \" + router.getDataCenterId() + \" for account \" + vpn.getAccountId() + \" on domR: \"\n-                    + router.getInstanceName() + \" due to \" + answer.getDetails(), DataCenter.class, router.getDataCenterId());\n+                    + router.getInstanceName() + \" due to \" + errorMessage, DataCenter.class, router.getDataCenterId());\n         }\n \n         return true;",
                "raw_url": "https://github.com/apache/cloudstack/raw/4c42aafae0d3286a38d796a7c69a6aec6810cf79/server/src/main/java/com/cloud/network/router/VpcVirtualNetworkApplianceManagerImpl.java",
                "sha": "eabfb4337f4ef4b0d719f7b3888abcac98188bc0",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/4c42aafae0d3286a38d796a7c69a6aec6810cf79/server/src/main/java/com/cloud/projects/ProjectManagerImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/projects/ProjectManagerImpl.java?ref=4c42aafae0d3286a38d796a7c69a6aec6810cf79",
                "deletions": 0,
                "filename": "server/src/main/java/com/cloud/projects/ProjectManagerImpl.java",
                "patch": "@@ -479,6 +479,10 @@ public void doInTransactionWithoutResult(TransactionStatus status) throws Resour\n                 throw new InvalidParameterValueException(\"Unable to find account name=\" + newOwnerName + \" in domain id=\" + project.getDomainId());\n             }\n             Account currentOwnerAccount = getProjectOwner(projectId);\n+            if (currentOwnerAccount == null) {\n+                s_logger.error(\"Unable to find the current owner for the project id=\" + projectId);\n+                throw new InvalidParameterValueException(\"Unable to find the current owner for the project id=\" + projectId);\n+            }\n             if (currentOwnerAccount.getId() != futureOwnerAccount.getId()) {\n                 ProjectAccountVO futureOwner = _projectAccountDao.findByProjectIdAccountId(projectId, futureOwnerAccount.getAccountId());\n                 if (futureOwner == null) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/4c42aafae0d3286a38d796a7c69a6aec6810cf79/server/src/main/java/com/cloud/projects/ProjectManagerImpl.java",
                "sha": "48d65189476fd034368461e1458f006fad17a387",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/4c42aafae0d3286a38d796a7c69a6aec6810cf79/server/src/main/java/com/cloud/template/TemplateManagerImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/template/TemplateManagerImpl.java?ref=4c42aafae0d3286a38d796a7c69a6aec6810cf79",
                "deletions": 1,
                "filename": "server/src/main/java/com/cloud/template/TemplateManagerImpl.java",
                "patch": "@@ -1232,7 +1232,10 @@ private boolean attachISOToVM(long vmId, long isoId, boolean attach) {\n \n         // prepare ISO ready to mount on hypervisor resource level\n         TemplateInfo tmplt = prepareIso(isoId, vm.getDataCenterId(), vm.getHostId(), null);\n-\n+        if (tmplt == null) {\n+            s_logger.error(\"Failed to prepare ISO ready to mount on hypervisor resource level\");\n+            throw new CloudRuntimeException(\"Failed to prepare ISO ready to mount on hypervisor resource level\");\n+        }\n         String vmName = vm.getInstanceName();\n \n         HostVO host = _hostDao.findById(vm.getHostId());",
                "raw_url": "https://github.com/apache/cloudstack/raw/4c42aafae0d3286a38d796a7c69a6aec6810cf79/server/src/main/java/com/cloud/template/TemplateManagerImpl.java",
                "sha": "c862adae61fc0d71428b0baadf9186fccbfb1789",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/4c42aafae0d3286a38d796a7c69a6aec6810cf79/server/src/main/java/org/apache/cloudstack/region/gslb/GlobalLoadBalancingRulesServiceImpl.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/org/apache/cloudstack/region/gslb/GlobalLoadBalancingRulesServiceImpl.java?ref=4c42aafae0d3286a38d796a7c69a6aec6810cf79",
                "deletions": 3,
                "filename": "server/src/main/java/org/apache/cloudstack/region/gslb/GlobalLoadBalancingRulesServiceImpl.java",
                "patch": "@@ -650,9 +650,12 @@ private boolean applyGlobalLoadBalancerRuleConfig(long gslbRuleId, boolean revok\n             SiteLoadBalancerConfig siteLb =\n                 new SiteLoadBalancerConfig(gslbLbMapVo.isRevoke(), serviceType, ip.getAddress().addr(), Integer.toString(loadBalancer.getDefaultPortStart()),\n                     dataCenterId);\n-\n-            siteLb.setGslbProviderPublicIp(lookupGslbServiceProvider().getZoneGslbProviderPublicIp(dataCenterId, physicalNetworkId));\n-            siteLb.setGslbProviderPrivateIp(lookupGslbServiceProvider().getZoneGslbProviderPrivateIp(dataCenterId, physicalNetworkId));\n+            GslbServiceProvider gslbProvider = lookupGslbServiceProvider();\n+            if (gslbProvider == null) {\n+                throw new CloudRuntimeException(\"No GSLB provider is available\");\n+            }\n+            siteLb.setGslbProviderPublicIp(gslbProvider.getZoneGslbProviderPublicIp(dataCenterId, physicalNetworkId));\n+            siteLb.setGslbProviderPrivateIp(gslbProvider.getZoneGslbProviderPrivateIp(dataCenterId, physicalNetworkId));\n             siteLb.setWeight(gslbLbMapVo.getWeight());\n \n             zoneSiteLoadbalancerMap.put(network.getDataCenterId(), siteLb);",
                "raw_url": "https://github.com/apache/cloudstack/raw/4c42aafae0d3286a38d796a7c69a6aec6810cf79/server/src/main/java/org/apache/cloudstack/region/gslb/GlobalLoadBalancingRulesServiceImpl.java",
                "sha": "baa3ba02562202bb9a04a2db7c764fcaabb38ade",
                "status": "modified"
            }
        ],
        "message": "[CLOUDSTACK-10356] Fix NPE in Cloudstack found with NPEDetector  (#2573)\n\n* fix https://issues.apache.org/jira/browse/CLOUDSTACK-10356\r\n\r\n* del patch file\r\n\r\n* Update ResourceCountDaoImpl.java\r\n\r\n* fix some format\r\n\r\n* fix code\r\n\r\n* fix error message in VolumeOrchestrator\r\n\r\n* add check null stmt\r\n\r\n* del import unuse class\r\n\r\n* use BooleanUtils to check Boolean\r\n\r\n* fix error message\r\n\r\n* delete unuse function\r\n\r\n* delete the deprecated function  updateDomainCount\r\n\r\n* add error log and throw exception in ProjectManagerImpl.java",
        "parent": "https://github.com/apache/cloudstack/commit/efcd24c2a2cdc5d04b3f6d424305288b1cf88852",
        "repo": "cloudstack",
        "unit_tests": [
            "GlobalLoadBalancingRulesServiceImplTest.java"
        ]
    },
    "cloudstack_4d4fb9c": {
        "bug_id": "cloudstack_4d4fb9c",
        "commit": "https://github.com/apache/cloudstack/commit/4d4fb9c95964d1981c7ac497fe317f997d367193",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/4d4fb9c95964d1981c7ac497fe317f997d367193/server/src/com/cloud/server/ConfigurationServerImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/ConfigurationServerImpl.java?ref=4d4fb9c95964d1981c7ac497fe317f997d367193",
                "deletions": 2,
                "filename": "server/src/com/cloud/server/ConfigurationServerImpl.java",
                "patch": "@@ -341,8 +341,8 @@ protected void saveUser() {\n         }\n \n         // now insert the user\n-        insertSql = \"INSERT INTO `cloud`.`user` (id, uuid, username, account_id, firstname, lastname, created, state) \" +\n-                \"VALUES (\" + id + \", UUID(), '\" + username + \"', 2, '\" + firstname + \"','\" + lastname + \"',now(), 'disabled')\";\n+        insertSql = \"INSERT INTO `cloud`.`user` (id, username, password, account_id, firstname, lastname, created, state) \" +\n+                \"VALUES (\" + id + \",'\" + username + \"', RAND(), 2, '\" + firstname + \"','\" + lastname + \"',now(), 'disabled')\";\n \n         txn = Transaction.currentTxn();\n         try {",
                "raw_url": "https://github.com/apache/cloudstack/raw/4d4fb9c95964d1981c7ac497fe317f997d367193/server/src/com/cloud/server/ConfigurationServerImpl.java",
                "sha": "74fba8967531e5d0f5566708803aab23a1fbe23d",
                "status": "modified"
            }
        ],
        "message": "https://issues.apache.org/jira/browse/CLOUDSTACK-993\n\nChanges:\n- Introduction of maven skipped the java code that inserts the admin user. This causes the NPE in management server while trying to find the user and also, admin user cannot login as expected.\n- Fixing the insertion of the admin user as part of startup.",
        "parent": "https://github.com/apache/cloudstack/commit/cadca5fc0cfdbdcdf6cd193b02f097155f3a7377",
        "repo": "cloudstack",
        "unit_tests": [
            "ConfigurationServerImplTest.java"
        ]
    },
    "cloudstack_4df7423": {
        "bug_id": "cloudstack_4df7423",
        "commit": "https://github.com/apache/cloudstack/commit/4df7423f70e6dc31f1ab5040e17f63f4c2103c4c",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/4df7423f70e6dc31f1ab5040e17f63f4c2103c4c/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=4df7423f70e6dc31f1ab5040e17f63f4c2103c4c",
                "deletions": 6,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -824,12 +824,14 @@ public VolumeResponse createVolumeResponse(Volume volume) {\n         Long instanceId = volume.getInstanceId();\n         if (instanceId != null && volume.getState() != Volume.State.Destroy) {\n             VMInstanceVO vm = ApiDBUtils.findVMInstanceById(instanceId);\n-            volResponse.setVirtualMachineId(vm.getId());\n-            volResponse.setVirtualMachineName(vm.getHostName());\n-            UserVm userVm = ApiDBUtils.findUserVmById(vm.getId());\n-            if (userVm != null) {\n-                volResponse.setVirtualMachineDisplayName(userVm.getDisplayName());\n-                volResponse.setVirtualMachineState(vm.getState().toString());\n+            if (vm != null) {\n+                volResponse.setVirtualMachineId(vm.getId());\n+                volResponse.setVirtualMachineName(vm.getHostName());\n+                UserVm userVm = ApiDBUtils.findUserVmById(vm.getId());\n+                if (userVm != null) {\n+                    volResponse.setVirtualMachineDisplayName(userVm.getDisplayName());\n+                    volResponse.setVirtualMachineState(vm.getState().toString());\n+                }\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/4df7423f70e6dc31f1ab5040e17f63f4c2103c4c/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "f668f5a7f3c8e718c7946dc49b97ed2f64c27088",
                "status": "modified"
            }
        ],
        "message": "fix NPE when listvolume if vm got destroyed",
        "parent": "https://github.com/apache/cloudstack/commit/407b45ee2e9981c45b91c99598dc557b9d3acc84",
        "repo": "cloudstack",
        "unit_tests": [
            "ApiResponseHelperTest.java"
        ]
    },
    "cloudstack_4e07dd1": {
        "bug_id": "cloudstack_4e07dd1",
        "commit": "https://github.com/apache/cloudstack/commit/4e07dd1dc4b4618fff2ef25c846ce6b95a8e580d",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/4e07dd1dc4b4618fff2ef25c846ce6b95a8e580d/server/src/com/cloud/api/dispatch/ParamProcessWorker.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/dispatch/ParamProcessWorker.java?ref=4e07dd1dc4b4618fff2ef25c846ce6b95a8e580d",
                "deletions": 2,
                "filename": "server/src/com/cloud/api/dispatch/ParamProcessWorker.java",
                "patch": "@@ -329,8 +329,6 @@ private void setFieldValue(final Field field, final BaseCmd cmdObj, final Object\n                     field.set(cmdObj, listParam);\n                     break;\n                 case UUID:\n-                    if (paramObj.toString().isEmpty())\n-                        break;\n                     final Long internalId = translateUuidToInternalId(paramObj.toString(), annotation);\n                     field.set(cmdObj, internalId);\n                     break;",
                "raw_url": "https://github.com/apache/cloudstack/raw/4e07dd1dc4b4618fff2ef25c846ce6b95a8e580d/server/src/com/cloud/api/dispatch/ParamProcessWorker.java",
                "sha": "ff6d666a8fe9aa27fd6aa256fea8774008b29a4c",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-7581: Empty 'ID' parameters allowed in API calls\nFix is to fail API calls with empty 'id' parameter value upfront rather than going ahead and failing with NPE later on",
        "parent": "https://github.com/apache/cloudstack/commit/7f440854f7bcd41a1bd6581c0239cde2e98261b7",
        "repo": "cloudstack",
        "unit_tests": [
            "ParamProcessWorkerTest.java"
        ]
    },
    "cloudstack_4e21948": {
        "bug_id": "cloudstack_4e21948",
        "commit": "https://github.com/apache/cloudstack/commit/4e21948f5c73e10cf5d9731b16da3e47a8d46093",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/4e21948f5c73e10cf5d9731b16da3e47a8d46093/server/src/com/cloud/network/router/NetworkHelperImpl.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/NetworkHelperImpl.java?ref=4e21948f5c73e10cf5d9731b16da3e47a8d46093",
                "deletions": 18,
                "filename": "server/src/com/cloud/network/router/NetworkHelperImpl.java",
                "patch": "@@ -372,14 +372,6 @@ protected DomainRouterVO waitRouter(final DomainRouterVO router) {\n         return null;\n     }\n \n-    // @Override\n-    /*\n-     * (non-Javadoc)\n-     * \n-     * @see\n-     * com.cloud.network.router.NetworkHelper#startRouters(org.cloud.network\n-     * .router.deployment.RouterDeploymentDefinition)\n-     */\n     @Override\n     public List<DomainRouterVO> startRouters(final RouterDeploymentDefinition routerDeploymentDefinition) throws StorageUnavailableException, InsufficientCapacityException,\n             ConcurrentOperationException, ResourceUnavailableException {\n@@ -407,15 +399,6 @@ protected DomainRouterVO waitRouter(final DomainRouterVO router) {\n         return runningRouters;\n     }\n \n-    // @Override\n-    /*\n-     * (non-Javadoc)\n-     * \n-     * @see\n-     * com.cloud.network.router.NetworkHelper#startVirtualRouter(com.cloud.vm\n-     * .DomainRouterVO, com.cloud.user.User, com.cloud.user.Account,\n-     * java.util.Map)\n-     */\n     @Override\n     public DomainRouterVO startVirtualRouter(final DomainRouterVO router, final User user, final Account caller, final Map<Param, Object> params)\n             throws StorageUnavailableException, InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {\n@@ -513,7 +496,16 @@ protected String retrieveTemplateName(HypervisorType hType, final long datacente\n             }\n         }\n \n-        return hypervisorsMap.get(hType).valueIn(datacenterId);\n+        // Returning NULL is fine because the simulator will need it when being\n+        // used instead of a real hypervisor.\n+        // The hypervisorsMap contains only real hypervisors.\n+        String templateName = null;\n+        ConfigKey<String> hypervisorConfigKey = hypervisorsMap.get(hType);\n+\n+        if (hypervisorConfigKey != null) {\n+            templateName = hypervisorConfigKey.valueIn(datacenterId);\n+        }\n+        return templateName;\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/cloudstack/raw/4e21948f5c73e10cf5d9731b16da3e47a8d46093/server/src/com/cloud/network/router/NetworkHelperImpl.java",
                "sha": "f589394103ee1f4c1a366e5c9f9b4e91551ed581",
                "status": "modified"
            }
        ],
        "message": "Fixing the NetworkHelperImpl class. It was throwing a NPE due to a hypervisor type SIMULATOR not being in the hashmap.\n\nWhen the refactor took place, we should have changed first structure, then behaviour. By refactoring the deployRouter method\nwe changed how the templateName was retrieved.\nFixed and tested using the simulator and the following Marvin tests\n\ntest_privategateway_acl\ntest_routers\ntest_vpc_vpn\ntest_service_offerings\ntest_volumes\ntest_reset_vm_on_reboot\ntest_multipleips_per_nic\n\nConflicts:\n\tserver/src/com/cloud/network/router/NetworkHelperImpl.java",
        "parent": "https://github.com/apache/cloudstack/commit/025ff72410385941c5da40ad42247f672af50bbe",
        "repo": "cloudstack",
        "unit_tests": [
            "NetworkHelperImplTest.java"
        ]
    },
    "cloudstack_4e823e3": {
        "bug_id": "cloudstack_4e823e3",
        "commit": "https://github.com/apache/cloudstack/commit/4e823e3a3e0c571de10e2675107da52fbc0b9eff",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/4e823e3a3e0c571de10e2675107da52fbc0b9eff/server/src/com/cloud/storage/StorageManagerImpl.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/StorageManagerImpl.java?ref=4e823e3a3e0c571de10e2675107da52fbc0b9eff",
                "deletions": 1,
                "filename": "server/src/com/cloud/storage/StorageManagerImpl.java",
                "patch": "@@ -1522,7 +1522,13 @@ public boolean storagePoolHasEnoughIops(List<Volume> requestedVolumes,\n         }\n \n         long futureIops = currentIops + requestedIops;\n-\n+        \n+        // getCapacityIops returns a Long so we need to check for null\n+        if (pool.getCapacityIops() == null) {\n+            s_logger.warn(\"Storage pool \" + pool.getName() + \" (\" + pool.getId() + \") does not supply Iops capacity, assuming enough capacity\");\n+            return true;\n+        }\n+        \n         return futureIops <= pool.getCapacityIops();\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/4e823e3a3e0c571de10e2675107da52fbc0b9eff/server/src/com/cloud/storage/StorageManagerImpl.java",
                "sha": "9ddcb7866fdf7af994fcf8abf2a04f7302fa2d5e",
                "status": "modified"
            }
        ],
        "message": "Workaround for NPE",
        "parent": "https://github.com/apache/cloudstack/commit/5396dfa55c343a146667b7148a66864ef6093cc2",
        "repo": "cloudstack",
        "unit_tests": [
            "StorageManagerImplTest.java"
        ]
    },
    "cloudstack_53ca0b1": {
        "bug_id": "cloudstack_53ca0b1",
        "commit": "https://github.com/apache/cloudstack/commit/53ca0b1861c743caf61ec04f776c87eac334f185",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/53ca0b1861c743caf61ec04f776c87eac334f185/engine/storage/image/src/org/apache/cloudstack/storage/image/store/TemplateObject.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/storage/image/src/org/apache/cloudstack/storage/image/store/TemplateObject.java?ref=53ca0b1861c743caf61ec04f776c87eac334f185",
                "deletions": 1,
                "filename": "engine/storage/image/src/org/apache/cloudstack/storage/image/store/TemplateObject.java",
                "patch": "@@ -190,7 +190,9 @@ public void processEvent(ObjectInDataStoreStateMachine.Event event, Answer answe\n                     TemplateObjectTO newTemplate = (TemplateObjectTO)cpyAnswer.getNewData();\n                     VMTemplateStoragePoolVO templatePoolRef = templatePoolDao.findByPoolTemplate(getDataStore().getId(), getId());\n                     templatePoolRef.setDownloadPercent(100);\n-                    templatePoolRef.setTemplateSize(newTemplate.getSize());\n+                    if (newTemplate.getSize() != null) {\n+                        templatePoolRef.setTemplateSize(newTemplate.getSize());\n+                    }\n                     templatePoolRef.setDownloadState(Status.DOWNLOADED);\n                     templatePoolRef.setLocalDownloadPath(newTemplate.getPath());\n                     templatePoolRef.setInstallPath(newTemplate.getPath());",
                "raw_url": "https://github.com/apache/cloudstack/raw/53ca0b1861c743caf61ec04f776c87eac334f185/engine/storage/image/src/org/apache/cloudstack/storage/image/store/TemplateObject.java",
                "sha": "fa2c80b0ed9388e542c05f9c66765b45878f7bcf",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/53ca0b1861c743caf61ec04f776c87eac334f185/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/XenServerStorageProcessor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/XenServerStorageProcessor.java?ref=53ca0b1861c743caf61ec04f776c87eac334f185",
                "deletions": 1,
                "filename": "plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/XenServerStorageProcessor.java",
                "patch": "@@ -843,7 +843,9 @@ public Answer copyTemplateToPrimaryStorage(CopyCommand cmd) {\n \n                 newVol.setUuid(uuidToReturn);\n                 newVol.setPath(uuidToReturn);\n-                newVol.setSize(physicalSize);\n+                if (physicalSize != null) {\n+                    newVol.setSize(physicalSize);\n+                }\n                 newVol.setFormat(ImageFormat.VHD);\n \n                 return new CopyCmdAnswer(newVol);",
                "raw_url": "https://github.com/apache/cloudstack/raw/53ca0b1861c743caf61ec04f776c87eac334f185/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/XenServerStorageProcessor.java",
                "sha": "c3c36d0a4888ff290bc100252f6c21d17448483e",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/53ca0b1861c743caf61ec04f776c87eac334f185/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/Xenserver625StorageProcessor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/Xenserver625StorageProcessor.java?ref=53ca0b1861c743caf61ec04f776c87eac334f185",
                "deletions": 1,
                "filename": "plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/Xenserver625StorageProcessor.java",
                "patch": "@@ -263,7 +263,9 @@ public Answer copyTemplateToPrimaryStorage(CopyCommand cmd) {\n \n                 newVol.setUuid(uuidToReturn);\n                 newVol.setPath(uuidToReturn);\n-                newVol.setSize(physicalSize);\n+                if (physicalSize != null) {\n+                    newVol.setSize(physicalSize);\n+                }\n                 newVol.setFormat(Storage.ImageFormat.VHD);\n \n                 return new CopyCmdAnswer(newVol);",
                "raw_url": "https://github.com/apache/cloudstack/raw/53ca0b1861c743caf61ec04f776c87eac334f185/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/Xenserver625StorageProcessor.java",
                "sha": "6e000efe559d6f6b36b7f7286e7535bb49cfc21d",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-8312: Fix NPE regression, copy template can have NULL volume size\n\nThe copy command reply can have null size returned, so check and set values\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/d70937aeb92e89efa8fcc39d7f89bdd8c885b2a2",
        "repo": "cloudstack",
        "unit_tests": [
            "Xenserver625StorageProcessorTest.java"
        ]
    },
    "cloudstack_542230f": {
        "bug_id": "cloudstack_542230f",
        "commit": "https://github.com/apache/cloudstack/commit/542230fc2621ed3951a6af74bdc586606b902790",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/542230fc2621ed3951a6af74bdc586606b902790/server/src/com/cloud/storage/StorageManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/StorageManagerImpl.java?ref=542230fc2621ed3951a6af74bdc586606b902790",
                "deletions": 1,
                "filename": "server/src/com/cloud/storage/StorageManagerImpl.java",
                "patch": "@@ -308,7 +308,7 @@ public VolumeVO allocateSystemVm(VMInstanceVO vm, VMTemplateVO template, DiskOff\n             {\n             \tStoragePoolVO sp = _storagePoolDao.findById(vol.getPoolId());\n             \t\n-            \tif(sp.getStatus().equals(Status.PrepareForMaintenance))\n+            \tif(sp!=null && sp.getStatus().equals(Status.PrepareForMaintenance))\n             \t{\n             \t\trecreateVols.add(vol);\n             \t\tcontinue;",
                "raw_url": "https://github.com/apache/cloudstack/raw/542230fc2621ed3951a6af74bdc586606b902790/server/src/com/cloud/storage/StorageManagerImpl.java",
                "sha": "4f8176eada9eaae18cb0334ea3731539e06e9c21",
                "status": "modified"
            }
        ],
        "message": "null check for the npe",
        "parent": "https://github.com/apache/cloudstack/commit/f82e73b861b4d0f32994b6a588d262c5a4c477f2",
        "repo": "cloudstack",
        "unit_tests": [
            "StorageManagerImplTest.java"
        ]
    },
    "cloudstack_5481485": {
        "bug_id": "cloudstack_5481485",
        "commit": "https://github.com/apache/cloudstack/commit/5481485a083957ff58da3b6fea9d7b6d20f06875",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/5481485a083957ff58da3b6fea9d7b6d20f06875/api/src/org/apache/cloudstack/api/response/VMSnapshotResponse.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/response/VMSnapshotResponse.java?ref=5481485a083957ff58da3b6fea9d7b6d20f06875",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/api/response/VMSnapshotResponse.java",
                "patch": "@@ -184,6 +184,14 @@ public String getParentName() {\n         return parentName;\n     }\n \n+    public String getParent() {\n+        return parent;\n+    }\n+\n+    public void setParent(String parent) {\n+        this.parent = parent;\n+    }\n+\n     public String getType() {\n         return type;\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/5481485a083957ff58da3b6fea9d7b6d20f06875/api/src/org/apache/cloudstack/api/response/VMSnapshotResponse.java",
                "sha": "4d430a5d64474a7da220bb89f359ba403923896f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/5481485a083957ff58da3b6fea9d7b6d20f06875/engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDao.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDao.java?ref=5481485a083957ff58da3b6fea9d7b6d20f06875",
                "deletions": 0,
                "filename": "engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDao.java",
                "patch": "@@ -36,4 +36,6 @@\n     List<VMSnapshotVO> listByParent(Long vmSnapshotId);\n \n     VMSnapshotVO findByName(Long vmId, String name);\n+\n+    List<VMSnapshotVO> listByAccountId(Long accountId);\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/5481485a083957ff58da3b6fea9d7b6d20f06875/engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDao.java",
                "sha": "31999ef15d66e3dcc6e5a18fddfd0a20fb81e0ec",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/5481485a083957ff58da3b6fea9d7b6d20f06875/engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDaoImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDaoImpl.java?ref=5481485a083957ff58da3b6fea9d7b6d20f06875",
                "deletions": 0,
                "filename": "engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDaoImpl.java",
                "patch": "@@ -121,6 +121,12 @@ public VMSnapshotVO findByName(Long vmId, String name) {\n         return null;\n     }\n \n+    public List<VMSnapshotVO> listByAccountId(Long accountId) {\n+        SearchCriteria sc = this.AllFieldsSearch.create();\n+        sc.setParameters(\"accountId\", new Object[] { accountId });\n+        return listBy(sc, null);\n+    }\n+\n     @Override\n     public boolean updateState(State currentState, Event event, State nextState, VMSnapshot vo, Object data) {\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/5481485a083957ff58da3b6fea9d7b6d20f06875/engine/schema/src/com/cloud/vm/snapshot/dao/VMSnapshotDaoImpl.java",
                "sha": "a87d284dc12161d367481e56f739cfe70b203665",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=5481485a083957ff58da3b6fea9d7b6d20f06875",
                "deletions": 3,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -452,6 +452,10 @@ public SnapshotResponse createSnapshotResponse(Snapshot snapshot) {\n             snapshotResponse.setVolumeId(volume.getUuid());\n             snapshotResponse.setVolumeName(volume.getName());\n             snapshotResponse.setVolumeType(volume.getVolumeType().name());\n+            DataCenter zone = ApiDBUtils.findZoneById(volume.getDeviceId());\n+            if (zone != null) {\n+                snapshotResponse.setZoneId(zone.getUuid());\n+            }\n         }\n         snapshotResponse.setCreated(snapshot.getCreated());\n         snapshotResponse.setName(snapshot.getName());\n@@ -502,6 +506,7 @@ public VMSnapshotResponse createVMSnapshotResponse(VMSnapshot vmSnapshot) {\n         if (vmSnapshot.getParent() != null) {\n             VMSnapshot vmSnapshotParent = ApiDBUtils.getVMSnapshotById(vmSnapshot.getParent());\n             if (vmSnapshotParent != null) {\n+                vmSnapshotResponse.setParent(vmSnapshotParent.getUuid());\n                 vmSnapshotResponse.setParentName(vmSnapshotParent.getDisplayName());\n             }\n         }\n@@ -3096,9 +3101,11 @@ public UsageRecordResponse createUsageResponse(Usage usageRecord) {\n                 }\n             }\n             //Network ID\n-            NetworkVO network = _entityMgr.findByIdIncludingRemoved(NetworkVO.class, usageRecord.getNetworkId().toString());\n-            if (network != null) {\n-                usageRecResponse.setNetworkId(network.getUuid());\n+            if (usageRecord.getNetworkId() != null && usageRecord.getNetworkId() != 0L) {\n+                NetworkVO network = _entityMgr.findByIdIncludingRemoved(NetworkVO.class, usageRecord.getNetworkId().toString());\n+                if (network != null) {\n+                    usageRecResponse.setNetworkId(network.getUuid());\n+                }\n             }\n \n         } else if (usageRecord.getUsageType() == UsageTypes.VM_DISK_IO_READ || usageRecord.getUsageType() == UsageTypes.VM_DISK_IO_WRITE",
                "raw_url": "https://github.com/apache/cloudstack/raw/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "c943f6f223a117376cf7beb2e0b51a33ff924f66",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/ha/dao/HighAvailabilityDaoImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/ha/dao/HighAvailabilityDaoImpl.java?ref=5481485a083957ff58da3b6fea9d7b6d20f06875",
                "deletions": 0,
                "filename": "server/src/com/cloud/ha/dao/HighAvailabilityDaoImpl.java",
                "patch": "@@ -63,6 +63,7 @@ protected HighAvailabilityDaoImpl() {\n         TBASearch.and(\"server\", TBASearch.entity().getServerId(), Op.NULL);\n         TBASearch.and(\"taken\", TBASearch.entity().getDateTaken(), Op.NULL);\n         TBASearch.and(\"time\", TBASearch.entity().getTimeToTry(), Op.LTEQ);\n+        TBASearch.and(\"step\", TBASearch.entity().getStep(), Op.NIN);\n         TBASearch.done();\n \n         PreviousInstanceSearch = createSearchBuilder();\n@@ -151,6 +152,7 @@ public HaWorkVO take(final long serverId) {\n         try {\n             final SearchCriteria<HaWorkVO> sc = TBASearch.create();\n             sc.setParameters(\"time\", System.currentTimeMillis() >> 10);\n+            sc.setParameters(\"step\", Step.Done, Step.Cancelled);\n \n             final Filter filter = new Filter(HaWorkVO.class, null, true, 0l, 1l);\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/ha/dao/HighAvailabilityDaoImpl.java",
                "sha": "724f4f6d7c9ee6fc32c42aa0ec5feed77ba71bde",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/hypervisor/HypervisorGuruBase.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/hypervisor/HypervisorGuruBase.java?ref=5481485a083957ff58da3b6fea9d7b6d20f06875",
                "deletions": 2,
                "filename": "server/src/com/cloud/hypervisor/HypervisorGuruBase.java",
                "patch": "@@ -35,6 +35,7 @@\n import com.cloud.resource.ResourceManager;\n import com.cloud.server.ConfigurationServer;\n import com.cloud.service.ServiceOfferingDetailsVO;\n+import com.cloud.service.dao.ServiceOfferingDao;\n import com.cloud.service.dao.ServiceOfferingDetailsDao;\n import com.cloud.storage.dao.VMTemplateDetailsDao;\n import com.cloud.utils.Pair;\n@@ -71,6 +72,8 @@\n     ResourceManager _resourceMgr;\n     @Inject\n     ServiceOfferingDetailsDao _serviceOfferingDetailsDao;\n+    @Inject\n+    ServiceOfferingDao _serviceOfferingDao;\n \n     protected HypervisorGuruBase() {\n         super();\n@@ -125,8 +128,7 @@ public NicTO toNicTO(NicProfile profile) {\n     }\n \n     protected VirtualMachineTO toVirtualMachineTO(VirtualMachineProfile vmProfile) {\n-\n-        ServiceOffering offering = vmProfile.getServiceOffering();\n+        ServiceOffering offering = _serviceOfferingDao.findById(vmProfile.getId(), vmProfile.getServiceOfferingId());\n         VirtualMachine vm = vmProfile.getVirtualMachine();\n         Long minMemory = (long)(offering.getRamSize() / vmProfile.getMemoryOvercommitRatio());\n         int minspeed = (int)(offering.getSpeed() / vmProfile.getCpuOvercommitRatio());",
                "raw_url": "https://github.com/apache/cloudstack/raw/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/hypervisor/HypervisorGuruBase.java",
                "sha": "0188778e7641a45080e3bfe73ad79cd651a76377",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/cloudstack/blob/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/hypervisor/KVMGuru.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/hypervisor/KVMGuru.java?ref=5481485a083957ff58da3b6fea9d7b6d20f06875",
                "deletions": 7,
                "filename": "server/src/com/cloud/hypervisor/KVMGuru.java",
                "patch": "@@ -16,24 +16,25 @@\n // under the License.\n package com.cloud.hypervisor;\n \n-import java.util.Map;\n-\n-import javax.ejb.Local;\n-import javax.inject.Inject;\n-\n-import org.apache.cloudstack.storage.command.StorageSubSystemCommand;\n-\n import com.cloud.agent.api.Command;\n+import com.cloud.agent.api.to.DataObjectType;\n import com.cloud.agent.api.to.VirtualMachineTO;\n import com.cloud.host.HostVO;\n import com.cloud.host.dao.HostDao;\n import com.cloud.hypervisor.Hypervisor.HypervisorType;\n+import com.cloud.storage.DataStoreRole;\n import com.cloud.storage.GuestOSHypervisorVO;\n import com.cloud.storage.GuestOSVO;\n import com.cloud.storage.dao.GuestOSDao;\n import com.cloud.storage.dao.GuestOSHypervisorDao;\n import com.cloud.utils.Pair;\n import com.cloud.vm.VirtualMachineProfile;\n+import org.apache.cloudstack.storage.command.CopyCommand;\n+import org.apache.cloudstack.storage.command.StorageSubSystemCommand;\n+\n+import javax.ejb.Local;\n+import javax.inject.Inject;\n+import java.util.Map;\n \n @Local(value = HypervisorGuru.class)\n public class KVMGuru extends HypervisorGuruBase implements HypervisorGuru {\n@@ -77,6 +78,18 @@ public VirtualMachineTO implement(VirtualMachineProfile vm) {\n \n     @Override\n     public Pair<Boolean, Long> getCommandHostDelegation(long hostId, Command cmd) {\n+        if (cmd instanceof CopyCommand) {\n+            CopyCommand c = (CopyCommand) cmd;\n+            boolean inSeq = true;\n+            if (c.getSrcTO().getObjectType() == DataObjectType.SNAPSHOT ||\n+                    c.getDestTO().getObjectType() == DataObjectType.SNAPSHOT) {\n+                inSeq = false;\n+            } else if (c.getDestTO().getDataStore().getRole() == DataStoreRole.Image ||\n+                    c.getDestTO().getDataStore().getRole() == DataStoreRole.ImageCache) {\n+                inSeq = false;\n+            }\n+            c.setExecuteInSequence(inSeq);\n+        }\n         if (cmd instanceof StorageSubSystemCommand) {\n             StorageSubSystemCommand c = (StorageSubSystemCommand)cmd;\n             c.setExecuteInSequence(false);",
                "raw_url": "https://github.com/apache/cloudstack/raw/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/hypervisor/KVMGuru.java",
                "sha": "e15a41752e6f673e01c1055d1243e997b3c823c0",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/resource/ResourceManagerImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/resource/ResourceManagerImpl.java?ref=5481485a083957ff58da3b6fea9d7b6d20f06875",
                "deletions": 3,
                "filename": "server/src/com/cloud/resource/ResourceManagerImpl.java",
                "patch": "@@ -30,7 +30,6 @@\n import javax.inject.Inject;\n import javax.naming.ConfigurationException;\n \n-import com.cloud.capacity.CapacityState;\n import com.cloud.vm.VirtualMachine;\n \n import org.apache.cloudstack.api.ApiConstants;\n@@ -71,6 +70,7 @@\n import com.cloud.agent.transport.Request;\n import com.cloud.capacity.Capacity;\n import com.cloud.capacity.CapacityManager;\n+import com.cloud.capacity.CapacityState;\n import com.cloud.capacity.CapacityVO;\n import com.cloud.capacity.dao.CapacityDao;\n import com.cloud.cluster.ClusterManager;\n@@ -1174,12 +1174,13 @@ private boolean doMaintain(final long hostId) {\n         MaintainAnswer answer = (MaintainAnswer)_agentMgr.easySend(hostId, new MaintainCommand());\n         if (answer == null || !answer.getResult()) {\n             s_logger.warn(\"Unable to send MaintainCommand to host: \" + hostId);\n+            return false;\n         }\n \n         try {\n             resourceStateTransitTo(host, ResourceState.Event.AdminAskMaintenace, _nodeId);\n         } catch (NoTransitionException e) {\n-            String err = \"Cannot transimit resource state of host \" + host.getId() + \" to \" + ResourceState.Maintenance;\n+            String err = \"Cannot transmit resource state of host \" + host.getId() + \" to \" + ResourceState.Maintenance;\n             s_logger.debug(err, e);\n             throw new CloudRuntimeException(err + e.getMessage());\n         }\n@@ -1210,7 +1211,6 @@ private boolean doMaintain(final long hostId) {\n                 }\n             }\n         }\n-\n         return true;\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/resource/ResourceManagerImpl.java",
                "sha": "b0b18490cab7a1d1a12f57207ae0098da14f3103",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/resourcelimit/ResourceLimitManagerImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/resourcelimit/ResourceLimitManagerImpl.java?ref=5481485a083957ff58da3b6fea9d7b6d20f06875",
                "deletions": 1,
                "filename": "server/src/com/cloud/resourcelimit/ResourceLimitManagerImpl.java",
                "patch": "@@ -847,8 +847,9 @@ public Long doInTransaction(TransactionStatus status) {\n \n         // this lock guards against the updates to user_vm, volume, snapshot, public _ip and template table\n         // as any resource creation precedes with the resourceLimitExceeded check which needs this lock too\n+        Set rowIdsToLock = _resourceCountDao.listAllRowsToUpdate(accountId, Resource.ResourceOwnerType.Account, type);\n         SearchCriteria<ResourceCountVO> sc = ResourceCountSearch.create();\n-        sc.setParameters(\"accountId\", accountId);\n+        sc.setParameters(\"id\", rowIdsToLock.toArray());\n         _resourceCountDao.lockRows(sc, null, true);\n \n         ResourceCountVO accountRC = _resourceCountDao.findByOwnerAndType(accountId, ResourceOwnerType.Account, type);",
                "raw_url": "https://github.com/apache/cloudstack/raw/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/resourcelimit/ResourceLimitManagerImpl.java",
                "sha": "8bf091811bdabf9e2398c3a4b32b36c82f080bdd",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/server/ConfigurationServerImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/ConfigurationServerImpl.java?ref=5481485a083957ff58da3b6fea9d7b6d20f06875",
                "deletions": 0,
                "filename": "server/src/com/cloud/server/ConfigurationServerImpl.java",
                "patch": "@@ -219,6 +219,9 @@ public void persistDefaultValues() throws InternalErrorException {\n             _configDao.update(\"secstorage.secure.copy.cert\", \"realhostip\");\n             s_logger.debug(\"ConfigurationServer made secondary storage copy use realhostip.\");\n \n+            _configDao.update(\"user.password.encoders.exclude\", \"MD5,LDAP,PLAINTEXT\");\n+            s_logger.debug(\"Configuration server excluded insecure encoders\");\n+\n             // Save default service offerings\n             createServiceOffering(User.UID_SYSTEM, \"Small Instance\", 1, 512, 500, \"Small Instance\", ProvisioningType.THIN, false, false, null);\n             createServiceOffering(User.UID_SYSTEM, \"Medium Instance\", 1, 1024, 1000, \"Medium Instance\", ProvisioningType.THIN, false, false, null);",
                "raw_url": "https://github.com/apache/cloudstack/raw/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/server/ConfigurationServerImpl.java",
                "sha": "b85f13764b0901aad36e9eeb3aa23f8e721c3041",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/storage/download/DownloadActiveState.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/download/DownloadActiveState.java?ref=5481485a083957ff58da3b6fea9d7b6d20f06875",
                "deletions": 0,
                "filename": "server/src/com/cloud/storage/download/DownloadActiveState.java",
                "patch": "@@ -59,6 +59,7 @@ public String handleAnswer(DownloadAnswer answer) {\n \n     @Override\n     public void onEntry(String prevState, DownloadEvent event, Object evtObj) {\n+        super.onEntry(prevState, event, evtObj);\n         if (s_logger.isTraceEnabled()) {\n             getDownloadListener().log(\"onEntry, prev state= \" + prevState + \", curr state=\" + getName() + \", event=\" + event, Level.TRACE);\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/storage/download/DownloadActiveState.java",
                "sha": "d202d9add3162582c9b65211ee4dd6016df9bfe3",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/cloudstack/blob/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/user/AccountManagerImpl.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/user/AccountManagerImpl.java?ref=5481485a083957ff58da3b6fea9d7b6d20f06875",
                "deletions": 1,
                "filename": "server/src/com/cloud/user/AccountManagerImpl.java",
                "patch": "@@ -115,6 +115,10 @@\n import com.cloud.vm.dao.InstanceGroupDao;\n import com.cloud.vm.dao.UserVmDao;\n import com.cloud.vm.dao.VMInstanceDao;\n+import com.cloud.vm.snapshot.VMSnapshot;\n+import com.cloud.vm.snapshot.VMSnapshotManager;\n+import com.cloud.vm.snapshot.VMSnapshotVO;\n+import com.cloud.vm.snapshot.dao.VMSnapshotDao;\n import org.apache.cloudstack.acl.ControlledEntity;\n import org.apache.cloudstack.acl.QuerySelector;\n import org.apache.cloudstack.acl.RoleType;\n@@ -198,6 +202,10 @@\n     @Inject\n     private SnapshotManager _snapMgr;\n     @Inject\n+    private VMSnapshotManager _vmSnapshotMgr;\n+    @Inject\n+    private VMSnapshotDao _vmSnapshotDao;\n+    @Inject\n     private UserVmManager _vmMgr;\n     @Inject\n     private TemplateManager _tmpltMgr;\n@@ -727,6 +735,16 @@ protected boolean cleanupAccount(AccountVO account, long callerUserId, Account c\n                 accountCleanupNeeded = true;\n             }\n \n+            // Destroy VM Snapshots\n+            List<VMSnapshotVO> vmSnapshots = _vmSnapshotDao.listByAccountId(Long.valueOf(accountId));\n+            for (VMSnapshot vmSnapshot : vmSnapshots) {\n+                try {\n+                    _vmSnapshotMgr.deleteVMSnapshot(vmSnapshot.getId());\n+                } catch (Exception e) {\n+                    s_logger.debug(\"Failed to cleanup vm snapshot \" + vmSnapshot.getId() + \" due to \" + e.toString());\n+                }\n+            }\n+\n             // Destroy the account's VMs\n             List<UserVmVO> vms = _userVmDao.listByAccountId(accountId);\n             if (s_logger.isDebugEnabled()) {\n@@ -1166,6 +1184,9 @@ public UserAccount updateUser(Long userId, String firstName, String lastName, St\n         }\n \n         if (password != null) {\n+            if (password.isEmpty()) {\n+                throw new InvalidParameterValueException(\"Password cannot be empty\");\n+            }\n             String encodedPassword = null;\n             for (Iterator<UserAuthenticator> en = _userPasswordEncoders.iterator(); en.hasNext();) {\n                 UserAuthenticator authenticator = en.next();\n@@ -1974,7 +1995,7 @@ public void logoutUser(long userId) {\n     @Override\n     public UserAccount authenticateUser(String username, String password, Long domainId, String loginIpAddress, Map<String, Object[]> requestParameters) {\n         UserAccount user = null;\n-        if (password != null) {\n+        if (password != null && !password.isEmpty()) {\n             user = getUserAccount(username, password, domainId, requestParameters);\n         } else {\n             String key = _configDao.getValue(\"security.singlesignon.key\");",
                "raw_url": "https://github.com/apache/cloudstack/raw/5481485a083957ff58da3b6fea9d7b6d20f06875/server/src/com/cloud/user/AccountManagerImpl.java",
                "sha": "3d818ab0239f7c1eeaa764ea64a8863dc4e29b8d",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-5238: password checks, NPE fixes and minor fixes\n\n- insecure authenticators excluded in configuration\n- snapshot response should have zone\n- remove vmsnapshots when removing accounts\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/e000646790597cb6c245311f57761b41d23a4e34",
        "repo": "cloudstack",
        "unit_tests": [
            "AccountManagerImplTest.java"
        ]
    },
    "cloudstack_55447c2": {
        "bug_id": "cloudstack_55447c2",
        "commit": "https://github.com/apache/cloudstack/commit/55447c25720b929c4544789542e0c87e88430d23",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/55447c25720b929c4544789542e0c87e88430d23/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/UserVmManagerImpl.java?ref=55447c25720b929c4544789542e0c87e88430d23",
                "deletions": 1,
                "filename": "server/src/com/cloud/vm/UserVmManagerImpl.java",
                "patch": "@@ -1763,7 +1763,7 @@ public UserVm updateVirtualMachine(UpdateVMCmd cmd)\n         Boolean ha = cmd.getHaEnable();\n         Long id = cmd.getId();\n         Long osTypeId = cmd.getOsTypeId();\n-        String userData = cmd.getUserData().replace(\"\\\\n\", \"\");\n+        String userData = cmd.getUserData();\n \n         // Input validation\n         UserVmVO vmInstance = null;\n@@ -1802,6 +1802,8 @@ public UserVm updateVirtualMachine(UpdateVMCmd cmd)\n \n         boolean updateUserdata = false;\n         if (userData != null) {\n+            // check and replace newlines\n+            userData = userData.replace(\"\\\\n\", \"\");\n             validateUserData(userData);\n             // update userData on domain router.\n             updateUserdata = true;",
                "raw_url": "https://github.com/apache/cloudstack/raw/55447c25720b929c4544789542e0c87e88430d23/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "sha": "687f521e08c5362ed805f2a29c99f8f0a5b08833",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-424: Fix NPE while updating user data\n\nReplace newlines in userdata only when it's not null.\n\nSigned-off-by: Rohit Yadav <bhaisaab@apache.org>",
        "parent": "https://github.com/apache/cloudstack/commit/6d200c5021171a0f5e7452e1c7d00ee21b2c2351",
        "repo": "cloudstack",
        "unit_tests": [
            "UserVmManagerImplTest.java"
        ]
    },
    "cloudstack_55c059c": {
        "bug_id": "cloudstack_55c059c",
        "commit": "https://github.com/apache/cloudstack/commit/55c059c09887651cab59e292bedafbbf9f1699df",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/55c059c09887651cab59e292bedafbbf9f1699df/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=55c059c09887651cab59e292bedafbbf9f1699df",
                "deletions": 4,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -2365,12 +2365,18 @@ public static void populateOwner(ControlledViewEntityResponse response, Controll\n \n     private void populateAccount(ControlledEntityResponse response, long accountId) {\n         Account account = ApiDBUtils.findAccountById(accountId);\n-        if (account.getType() == Account.ACCOUNT_TYPE_PROJECT) {\n+        if (account == null) {\n+            s_logger.debug(\"Unable to find account with id: \" + accountId);\n+        } else if (account.getType() == Account.ACCOUNT_TYPE_PROJECT) {\n             // find the project\n             Project project = ApiDBUtils.findProjectByProjectAccountId(account.getId());\n-            response.setProjectId(project.getUuid());\n-            response.setProjectName(project.getName());\n-            response.setAccountName(account.getAccountName());\n+            if (project != null) {\n+                response.setProjectId(project.getUuid());\n+                response.setProjectName(project.getName());\n+                response.setAccountName(account.getAccountName());\n+            } else {\n+                s_logger.debug(\"Unable to find project with id: \" + account.getId());\n+            }\n         } else {\n             response.setAccountName(account.getAccountName());\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/55c059c09887651cab59e292bedafbbf9f1699df/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "0081b9d209a0a79f90314553933989c5a768bf61",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-10144: fix possible NPE in listVlanIpRanges",
        "parent": "https://github.com/apache/cloudstack/commit/7f6ae15972fde879bb13efce105f9cca515b638f",
        "repo": "cloudstack",
        "unit_tests": [
            "ApiResponseHelperTest.java"
        ]
    },
    "cloudstack_57f6b16": {
        "bug_id": "cloudstack_57f6b16",
        "commit": "https://github.com/apache/cloudstack/commit/57f6b16cdb94ce2b5bfff657b32552c9bf22fae4",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/cloudstack/blob/57f6b16cdb94ce2b5bfff657b32552c9bf22fae4/server/src/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java?ref=57f6b16cdb94ce2b5bfff657b32552c9bf22fae4",
                "deletions": 16,
                "filename": "server/src/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java",
                "patch": "@@ -1388,8 +1388,6 @@ public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<ConsoleProxyV\n             externalDhcp = true;\n         }\n         \n-        NicProfile controlNic = null;\n-        NicProfile managementNic = null;\n         for (NicProfile nic : profile.getNics()) {\n             int deviceId = nic.getDeviceId();\n             if(nic.getIp4Address() == null) {\n@@ -1410,31 +1408,19 @@ public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<ConsoleProxyV\n             \n             if (nic.getTrafficType() == TrafficType.Management) {\n                 buf.append(\" localgw=\").append(dest.getPod().getGateway());\n-                managementNic = nic;\n-            } else if (nic.getTrafficType() == TrafficType.Control) {\n-                if(nic.getIp4Address() != null) {\n-                    controlNic = nic;\n-                }\n-            }\n+            } \n         }\n \n \t\t/*External DHCP mode*/\n \t\tif(externalDhcp) {\n             buf.append(\" bootproto=dhcp\");\n         }\n         \n-        if(controlNic == null) {\n-        \tassert(managementNic != null);\n-        \tcontrolNic = managementNic;\n-        }\n-        \n         String bootArgs = buf.toString();\n         if (s_logger.isDebugEnabled()) {\n             s_logger.debug(\"Boot Args for \" + profile + \": \" + bootArgs);\n         }\n         \n-        profile.setParameter(VirtualMachineProfile.Param.ControlNic, controlNic);\n-        \n         return true;\n     }\n \n@@ -1462,7 +1448,22 @@ public boolean finalizeDeployment(Commands cmds, VirtualMachineProfile<ConsolePr\n     \n     @Override\n     public boolean finalizeCommandsOnStart(Commands cmds, VirtualMachineProfile<ConsoleProxyVO> profile) {\n-        NicProfile controlNic = (NicProfile)profile.getParameter(VirtualMachineProfile.Param.ControlNic);\n+        \n+        NicProfile managementNic = null;\n+        NicProfile controlNic = null;\n+        for (NicProfile nic : profile.getNics()) {\n+           if (nic.getTrafficType() == TrafficType.Management) {\n+               managementNic = nic;\n+           } else if (nic.getTrafficType() == TrafficType.Control && nic.getIp4Address() != null) {\n+               controlNic = nic;\n+           }\n+        }\n+\n+        if (controlNic == null) {\n+          assert (managementNic != null);\n+          controlNic = managementNic;\n+        }\n+\n         CheckSshCommand check = new CheckSshCommand(profile.getInstanceName(), controlNic.getIp4Address(), 3922, 5, 20);\n         cmds.addCommand(\"checkSsh\", check);\n         ",
                "raw_url": "https://github.com/apache/cloudstack/raw/57f6b16cdb94ce2b5bfff657b32552c9bf22fae4/server/src/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java",
                "sha": "d45c1bea35b81ede686bf2b31894f269cbf504dd",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/cloudstack/blob/57f6b16cdb94ce2b5bfff657b32552c9bf22fae4/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java?ref=57f6b16cdb94ce2b5bfff657b32552c9bf22fae4",
                "deletions": 5,
                "filename": "server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "patch": "@@ -934,8 +934,6 @@ public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<DomainRouterV\n             throw new CloudRuntimeException(\"Didn't start a control port\");\n         }\n \n-        profile.setParameter(VirtualMachineProfile.Param.ControlNic, controlNic);\n-\n         return true;\n     }\n \n@@ -964,9 +962,21 @@ public boolean finalizeDeployment(Commands cmds, VirtualMachineProfile<DomainRou\n     \n     @Override\n     public boolean finalizeCommandsOnStart(Commands cmds, VirtualMachineProfile<DomainRouterVO> profile) {\n-        DomainRouterVO router = profile.getVirtualMachine();\n-        NicProfile controlNic = (NicProfile) profile.getParameter(VirtualMachineProfile.Param.ControlNic);\n-        cmds.addCommand(\"checkSsh\", new CheckSshCommand(profile.getInstanceName(), controlNic.getIp4Address(), 3922, 5, 20));\n+       DomainRouterVO router = profile.getVirtualMachine();\n+        \n+       NicProfile controlNic = null;\n+       for (NicProfile nic : profile.getNics()) {\n+           if (nic.getTrafficType() == TrafficType.Control && nic.getIp4Address() != null) {\n+               controlNic = nic;\n+           }\n+       }\n+\n+       if (controlNic == null) {\n+           s_logger.error(\"Control network doesn't exist for the router \" + router);\n+           return false;\n+       }\n+        \n+       cmds.addCommand(\"checkSsh\", new CheckSshCommand(profile.getInstanceName(), controlNic.getIp4Address(), 3922, 5, 20));\n         \n         //restart network if restartNetwork = false is not specified in profile parameters\n         boolean restartNetwork = true;",
                "raw_url": "https://github.com/apache/cloudstack/raw/57f6b16cdb94ce2b5bfff657b32552c9bf22fae4/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "sha": "cad6914b161de7adca34357a4cdf784161db6ef6",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/cloudstack/blob/57f6b16cdb94ce2b5bfff657b32552c9bf22fae4/server/src/com/cloud/storage/secondary/SecondaryStorageManagerImpl.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/secondary/SecondaryStorageManagerImpl.java?ref=57f6b16cdb94ce2b5bfff657b32552c9bf22fae4",
                "deletions": 16,
                "filename": "server/src/com/cloud/storage/secondary/SecondaryStorageManagerImpl.java",
                "patch": "@@ -984,9 +984,6 @@ public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<SecondaryStor\n         buf.append(\" instance=SecStorage\");\n         buf.append(\" sslcopy=\").append(Boolean.toString(_useSSlCopy));\n \n-        NicProfile controlNic = null;\n-        NicProfile managementNic = null;\n-\n         boolean externalDhcp = false;\n         String externalDhcpStr = _configDao.getValue(\"direct.attach.network.externalIpAllocator.enabled\");\n         if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(\"true\")) {\n@@ -1009,12 +1006,7 @@ public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<SecondaryStor\n             }\n             if (nic.getTrafficType() == TrafficType.Management) {\n                 buf.append(\" localgw=\").append(dest.getPod().getGateway());\n-                managementNic = nic;\n                 buf.append(\" private.network.device=\").append(\"eth\").append(deviceId);\n-            } else if (nic.getTrafficType() == TrafficType.Control) {\n-                if (nic.getIp4Address() != null) {\n-                    controlNic = nic;\n-                }\n             } else if (nic.getTrafficType() == TrafficType.Public) {\n                 buf.append(\" public.network.device=\").append(\"eth\").append(deviceId);\n             }\n@@ -1025,11 +1017,6 @@ public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<SecondaryStor\n             buf.append(\" bootproto=dhcp\");\n         }\n \n-        if (controlNic == null) {\n-            assert (managementNic != null);\n-            controlNic = managementNic;\n-        }\n-\n         DataCenterVO dc = _dcDao.findById(profile.getVirtualMachine().getDataCenterId());\n         buf.append(\" dns1=\").append(dc.getInternalDns1());\n         if (dc.getInternalDns2() != null) {\n@@ -1041,8 +1028,6 @@ public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<SecondaryStor\n             s_logger.debug(\"Boot Args for \" + profile + \": \" + bootArgs);\n         }\n \n-        profile.setParameter(VirtualMachineProfile.Param.ControlNic, controlNic);\n-\n         return true;\n     }\n \n@@ -1072,7 +1057,22 @@ public boolean finalizeDeployment(Commands cmds, VirtualMachineProfile<Secondary\n     \n     @Override\n     public boolean finalizeCommandsOnStart(Commands cmds, VirtualMachineProfile<SecondaryStorageVmVO> profile) {\n-        NicProfile controlNic = (NicProfile) profile.getParameter(VirtualMachineProfile.Param.ControlNic);\n+        \n+        NicProfile managementNic = null;\n+        NicProfile controlNic = null;\n+        for (NicProfile nic : profile.getNics()) {\n+           if (nic.getTrafficType() == TrafficType.Management) {\n+               managementNic = nic;\n+           } else if (nic.getTrafficType() == TrafficType.Control && nic.getIp4Address() != null) {\n+               controlNic = nic;\n+           }\n+        }\n+\n+        if (controlNic == null) {\n+          assert (managementNic != null);\n+          controlNic = managementNic;\n+        }\n+\n         CheckSshCommand check = new CheckSshCommand(profile.getInstanceName(), controlNic.getIp4Address(), 3922, 5, 20);\n         cmds.addCommand(\"checkSsh\", check);\n         ",
                "raw_url": "https://github.com/apache/cloudstack/raw/57f6b16cdb94ce2b5bfff657b32552c9bf22fae4/server/src/com/cloud/storage/secondary/SecondaryStorageManagerImpl.java",
                "sha": "8e5eaf17f22785ed8c2582e6523c5b133272acd3",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/cloudstack/blob/57f6b16cdb94ce2b5bfff657b32552c9bf22fae4/server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=57f6b16cdb94ce2b5bfff657b32552c9bf22fae4",
                "deletions": 14,
                "filename": "server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -1331,26 +1331,33 @@ protected Command compareState(VMInstanceVO vm, final AgentVmInfo info, final bo\n                     \n                     Commands cmds = new Commands(OnError.Revert);\n                     s_logger.debug(\"Finalizing commands that need to be send to complete Start process for the vm \" + vm);\n-                    vmGuru.finalizeCommandsOnStart(cmds, profile);\n                     \n-                    if (cmds.size() != 0) {\n-                        try {\n-                            _agentMgr.send(vm.getHostId(), cmds);\n-                        } catch (OperationTimedoutException e){\n-                            s_logger.error(\"Exception during update for running vm: \" + vm, e);                        \n-                            return null;\n-                        } catch (ResourceUnavailableException e) {\n-                            s_logger.error(\"Exception during update for running vm: \" + vm, e); \n+                    \n+                    if (vmGuru.finalizeCommandsOnStart(cmds, profile)) {\n+                        if (cmds.size() != 0) {\n+                            try {\n+                                _agentMgr.send(vm.getHostId(), cmds);\n+                            } catch (OperationTimedoutException e){\n+                                s_logger.error(\"Exception during update for running vm: \" + vm, e);                        \n+                                return null;\n+                            } catch (ResourceUnavailableException e) {\n+                                s_logger.error(\"Exception during update for running vm: \" + vm, e); \n+                                return null;\n+                            }\n+                        }\n+                        \n+                        if (vmGuru.finalizeStart(profile, vm.getHostId(), cmds, null)) {\n+                            stateTransitTo(vm, Event.AgentReportRunning, vm.getHostId());\n+                        } else {\n+                            s_logger.error(\"Exception during update for running vm: \" + vm); \n                             return null;\n                         }\n-                    }\n-                    \n-                    if (vmGuru.finalizeStart(profile, vm.getHostId(), cmds, null)) {\n-                        stateTransitTo(vm, Event.AgentReportRunning, vm.getHostId());\n                     } else {\n-                        s_logger.error(\"Exception during update for running vm: \" + vm); \n+                        s_logger.error(\"Unable to finalize commands on start for vm: \" + vm);\n                         return null;\n                     }\n+                    \n+                    \n                 }\n             } else if (serverState == State.Stopping) {\n                 s_logger.debug(\"Scheduling a stop command for \" + vm);",
                "raw_url": "https://github.com/apache/cloudstack/raw/57f6b16cdb94ce2b5bfff657b32552c9bf22fae4/server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "d544eb01673ead7efeb6c37ca629336501145c69",
                "status": "modified"
            }
        ],
        "message": "bug 8719: fixed NPE happening during HA process - get control nic infrormation in finalizeCommandsOnStart() method instead of setting it in caller methods\nstatus 8719: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/54b3fff12340dbc5150ce82ecd4ada3bfc63b834",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_5881dfa": {
        "bug_id": "cloudstack_5881dfa",
        "commit": "https://github.com/apache/cloudstack/commit/5881dfafa67cfe56411b1dd98e63035aa9e707f7",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/5881dfafa67cfe56411b1dd98e63035aa9e707f7/core/src/com/cloud/hypervisor/xen/resource/CitrixResourceBase.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/core/src/com/cloud/hypervisor/xen/resource/CitrixResourceBase.java?ref=5881dfafa67cfe56411b1dd98e63035aa9e707f7",
                "deletions": 0,
                "filename": "core/src/com/cloud/hypervisor/xen/resource/CitrixResourceBase.java",
                "patch": "@@ -1674,8 +1674,15 @@ protected GetVmStatsAnswer execute(GetVmStatsCommand cmd) {\n         try {\n             doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(statsSource);\n         } catch (Exception e) {\n+        \ts_logger.warn(\"Exception caught whilst processing the document via document factory:\"+e);\n+        \treturn null;\n         }\n \n+        if(doc==null){\n+        \ts_logger.warn(\"Null document found after tryinh to parse the stats source\");\n+        \treturn null;\n+        }\n+        \n         NodeList firstLevelChildren = doc.getChildNodes();\n         NodeList secondLevelChildren = (firstLevelChildren.item(0)).getChildNodes();\n         Node metaNode = secondLevelChildren.item(0);",
                "raw_url": "https://github.com/apache/cloudstack/raw/5881dfafa67cfe56411b1dd98e63035aa9e707f7/core/src/com/cloud/hypervisor/xen/resource/CitrixResourceBase.java",
                "sha": "2aef2983f241067f2ae6dac1cadc92086946dee2",
                "status": "modified"
            }
        ],
        "message": "bug 5119: fixing the npe, the document obj we parse might be null, as a result of which there can be a npe. adding a check against the same\nstatus 5119: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/33d97d32c79e3eb6a5883b1157490c755714f802",
        "repo": "cloudstack",
        "unit_tests": [
            "CitrixResourceBaseTest.java"
        ]
    },
    "cloudstack_5a0ed87": {
        "bug_id": "cloudstack_5a0ed87",
        "commit": "https://github.com/apache/cloudstack/commit/5a0ed8764be12cbf028f829d2db1d1af01a8a283",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/5a0ed8764be12cbf028f829d2db1d1af01a8a283/utils/src/org/apache/cloudstack/utils/auth/SAMLUtils.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/org/apache/cloudstack/utils/auth/SAMLUtils.java?ref=5a0ed8764be12cbf028f829d2db1d1af01a8a283",
                "deletions": 0,
                "filename": "utils/src/org/apache/cloudstack/utils/auth/SAMLUtils.java",
                "patch": "@@ -218,6 +218,9 @@ public static Response decodeSAMLResponse(String responseMessage)\n \n     public static String generateSAMLRequestSignature(String urlEncodedString, PrivateKey signingKey)\n             throws NoSuchAlgorithmException, SignatureException, InvalidKeyException, UnsupportedEncodingException {\n+        if (signingKey == null || urlEncodedString == null) {\n+            return null;\n+        }\n         String url = urlEncodedString + \"&SigAlg=\" + URLEncoder.encode(SignatureConstants.ALGO_ID_SIGNATURE_RSA_SHA1, HttpUtils.UTF_8);\n         Signature signature = Signature.getInstance(\"SHA1withRSA\");\n         signature.initSign(signingKey);",
                "raw_url": "https://github.com/apache/cloudstack/raw/5a0ed8764be12cbf028f829d2db1d1af01a8a283/utils/src/org/apache/cloudstack/utils/auth/SAMLUtils.java",
                "sha": "b085e49f4ea406208f323a41a9bc93ed2bb7a6a0",
                "status": "modified"
            }
        ],
        "message": "SAMLUtils: Fix NPE incase signature is generated with a null privateKey\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/a66127dfb12476d098dfbdcc12dbc0beb29c92ee",
        "repo": "cloudstack",
        "unit_tests": [
            "SAMLUtilsTest.java"
        ]
    },
    "cloudstack_5bee237": {
        "bug_id": "cloudstack_5bee237",
        "commit": "https://github.com/apache/cloudstack/commit/5bee237972b84cc8cb5b588cb1dca95cc98ab8e4",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/5bee237972b84cc8cb5b588cb1dca95cc98ab8e4/agent/src/com/cloud/agent/resource/computing/LibvirtComputingResource.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/agent/src/com/cloud/agent/resource/computing/LibvirtComputingResource.java?ref=5bee237972b84cc8cb5b588cb1dca95cc98ab8e4",
                "deletions": 6,
                "filename": "agent/src/com/cloud/agent/resource/computing/LibvirtComputingResource.java",
                "patch": "@@ -1988,12 +1988,6 @@ protected Answer execute(StopCommand cmd) {\n         try {\n         \tConnect conn = LibvirtConnection.getConnection();\n         \t\n-        \tString macAddress = null;\n-        \tif (vmName.startsWith(\"i-\")) {\n-        \t    List<InterfaceDef> nics = getInterfaces(conn, vmName);\n-        \t    macAddress = nics.get(0).getMacAddress();\n-        \t}\n-        \t\n         \tdestroy_network_rules_for_vm(conn, vmName);\n             String result = stopVM(conn, vmName, defineOps.UNDEFINE_VM);\n             ",
                "raw_url": "https://github.com/apache/cloudstack/raw/5bee237972b84cc8cb5b588cb1dca95cc98ab8e4/agent/src/com/cloud/agent/resource/computing/LibvirtComputingResource.java",
                "sha": "0caa6ff15e581dbb0b809fe2f4791aae926e681d",
                "status": "modified"
            }
        ],
        "message": "fix NPE when stopvm",
        "parent": "https://github.com/apache/cloudstack/commit/902f8172e39d7b007168a0537fa3f4d26ba163d4",
        "repo": "cloudstack",
        "unit_tests": [
            "LibvirtComputingResourceTest.java"
        ]
    },
    "cloudstack_5c2bbf4": {
        "bug_id": "cloudstack_5c2bbf4",
        "commit": "https://github.com/apache/cloudstack/commit/5c2bbf48f0cdcf3988193e679c2089a6527f11ee",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/5c2bbf48f0cdcf3988193e679c2089a6527f11ee/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=5c2bbf48f0cdcf3988193e679c2089a6527f11ee",
                "deletions": 2,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -1789,8 +1789,11 @@ public AsyncJobResponse createAsyncJobResponse(AsyncJob job) {\n         jobResponse.setCmd(job.getCmd());\n         jobResponse.setCreated(job.getCreated());\n         jobResponse.setId(job.getId());\n-        jobResponse.setJobInstanceId(job.getInstanceId());\n-        jobResponse.setJobInstanceType(job.getInstanceType().toString());\n+\n+        if (job.getInstanceType() != null && job.getInstanceId() != null) {\n+            jobResponse.setJobInstanceId(job.getInstanceId());\n+            jobResponse.setJobInstanceType(job.getInstanceType().toString());\n+        } \n         jobResponse.setJobProcStatus(job.getProcessStatus());\n         jobResponse.setJobResult((ResponseObject)ApiSerializerHelper.fromSerializedString(job.getResult()));\n         jobResponse.setJobResultCode(job.getResultCode());",
                "raw_url": "https://github.com/apache/cloudstack/raw/5c2bbf48f0cdcf3988193e679c2089a6527f11ee/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "ebb447ad075385384b2bb3720953b77c297c1ced",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE in listAsyncJob apis: don't include instanceId/instanceType in the response when these values are null",
        "parent": "https://github.com/apache/cloudstack/commit/c6fe6f2f45a63e36375813e85ba49b891b198437",
        "repo": "cloudstack",
        "unit_tests": [
            "ApiResponseHelperTest.java"
        ]
    },
    "cloudstack_5f06654": {
        "bug_id": "cloudstack_5f06654",
        "commit": "https://github.com/apache/cloudstack/commit/5f06654b389db31179858f785735db8c99d45764",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/5f06654b389db31179858f785735db8c99d45764/server/src/com/cloud/storage/StorageManagerImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/StorageManagerImpl.java?ref=5f06654b389db31179858f785735db8c99d45764",
                "deletions": 1,
                "filename": "server/src/com/cloud/storage/StorageManagerImpl.java",
                "patch": "@@ -2441,7 +2441,12 @@ public boolean deleteVolume(DeleteVolumeCmd cmd) throws ConcurrentOperationExcep\n             destroyVolume(volume);\n         }\n         \n-        expungeVolume(volume);\n+        try {\n+\t\t\texpungeVolume(volume);\n+\t\t} catch (Exception e) {\n+\t\t\ts_logger.warn(\"Failed to expunge volume:\"+e);\n+\t\t\treturn false;\n+\t\t}\n         \n         return true;\n \t}",
                "raw_url": "https://github.com/apache/cloudstack/raw/5f06654b389db31179858f785735db8c99d45764/server/src/com/cloud/storage/StorageManagerImpl.java",
                "sha": "550bc7cdcbc350d039e17beddb4a263ff873de88",
                "status": "modified"
            }
        ],
        "message": "bug 7960: the npe should be fixed with my previous fix. adding better logging and some exception handling\nstatus 7960: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/9f9b838c4118aaea5cc6e5b577740003c5b15900",
        "repo": "cloudstack",
        "unit_tests": [
            "StorageManagerImplTest.java"
        ]
    },
    "cloudstack_62a71e0": {
        "bug_id": "cloudstack_62a71e0",
        "commit": "https://github.com/apache/cloudstack/commit/62a71e055bbd69a195258f6fc871378070efdcc2",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/62a71e055bbd69a195258f6fc871378070efdcc2/plugins/hypervisors/vmware/src/com/cloud/hypervisor/guru/VMwareGuru.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/com/cloud/hypervisor/guru/VMwareGuru.java?ref=62a71e055bbd69a195258f6fc871378070efdcc2",
                "deletions": 2,
                "filename": "plugins/hypervisors/vmware/src/com/cloud/hypervisor/guru/VMwareGuru.java",
                "patch": "@@ -300,6 +300,11 @@ public int compare(NicTO arg0, NicTO arg1) {\n     public Pair<Boolean, Long> getCommandHostDelegation(long hostId, Command cmd) {\n         boolean needDelegation = false;\n \n+        HostVO host = _hostDao.findById(hostId);\n+        if (host.getHypervisorType() != HypervisorType.VMware) {\n+            return new Pair<Boolean, Long>(Boolean.FALSE, new Long(hostId));\n+        }\n+\n         if (cmd instanceof CopyCommand) {\n             CopyCommand cpyCommand = (CopyCommand)cmd;\n             DataTO srcData = cpyCommand.getSrcTO();\n@@ -343,9 +348,7 @@ public int compare(NicTO arg0, NicTO arg1) {\n             return new Pair<Boolean, Long>(Boolean.FALSE, new Long(hostId));\n         }\n \n-        HostVO host = _hostDao.findById(hostId);\n         long dcId = host.getDataCenterId();\n-\n         Pair<HostVO, SecondaryStorageVmVO> cmdTarget = _secStorageMgr.assignSecStorageVm(dcId, cmd);\n         if(cmdTarget != null) {\n             // TODO, we need to make sure agent is actually connected too",
                "raw_url": "https://github.com/apache/cloudstack/raw/62a71e055bbd69a195258f6fc871378070efdcc2/plugins/hypervisors/vmware/src/com/cloud/hypervisor/guru/VMwareGuru.java",
                "sha": "7d0c12a9433723284f448128c3a3b51bbacb8274",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-3937: Attaching uploaded volume is failing\nThe method getCommandHostDelegation(long hostId, Command cmid) got overidden in VmwareGuru.java as part of\ncommit bfe30cd2e31906365a306d87fe331ccdcec5c33c. Earlier there was no HV specific implementation and copy\nvolume from secondary to primary worked fine. With the Vmware specific change the code was getting hit even\nin case of XS and other hypervisors and failed with NPE.\nNow there is a check in the Vmware implementation to check if the HV is of type Vmware.",
        "parent": "https://github.com/apache/cloudstack/commit/452176c0b43c9122e73f89d6ccd86cb36823ec68",
        "repo": "cloudstack",
        "unit_tests": [
            "VMwareGuruTest.java"
        ]
    },
    "cloudstack_6397f1c": {
        "bug_id": "cloudstack_6397f1c",
        "commit": "https://github.com/apache/cloudstack/commit/6397f1c82ef52fb23b4040f8836b3757cce63769",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/6397f1c82ef52fb23b4040f8836b3757cce63769/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=6397f1c82ef52fb23b4040f8836b3757cce63769",
                "deletions": 1,
                "filename": "engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -290,7 +290,7 @@\n     }\n \n     public void setHostAllocators(List<HostAllocator> hostAllocators) {\n-        hostAllocators = hostAllocators;\n+        this.hostAllocators = hostAllocators;\n     }\n \n     protected List<StoragePoolAllocator> _storagePoolAllocators;",
                "raw_url": "https://github.com/apache/cloudstack/raw/6397f1c82ef52fb23b4040f8836b3757cce63769/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "db3e7c2f695b58895e7cbb0f672374e0148db056",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-6329 [Automation] Changing service offering of VM from medium to small failing with NPE\n\n- The hostAllocators were not getting set",
        "parent": "https://github.com/apache/cloudstack/commit/7819775bb81f713d564ba0f49d67044885e03998",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_640a3dc": {
        "bug_id": "cloudstack_640a3dc",
        "commit": "https://github.com/apache/cloudstack/commit/640a3dc239a2f5fb8ad03ee6792a166d48c67c7d",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/640a3dc239a2f5fb8ad03ee6792a166d48c67c7d/server/src/com/cloud/server/ManagementServerImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/ManagementServerImpl.java?ref=640a3dc239a2f5fb8ad03ee6792a166d48c67c7d",
                "deletions": 1,
                "filename": "server/src/com/cloud/server/ManagementServerImpl.java",
                "patch": "@@ -4535,7 +4535,9 @@ public UserAccount authenticateUser(String username, String password, Long domai\n     @Override\n     public void logoutUser(Long userId) {\n         UserAccount userAcct = _userAccountDao.findById(userId);\n-        EventUtils.saveEvent(userId, userAcct.getAccountId(), EventTypes.EVENT_USER_LOGOUT, \"user has logged out\");\n+        if (userAcct != null) {\n+            EventUtils.saveEvent(userId, userAcct.getAccountId(), EventTypes.EVENT_USER_LOGOUT, \"user has logged out\");\n+        } // else log some kind of error event?  This likely means the user doesn't exist, or has been deleted...\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/cloudstack/raw/640a3dc239a2f5fb8ad03ee6792a166d48c67c7d/server/src/com/cloud/server/ManagementServerImpl.java",
                "sha": "adf6fc98160419e719dfe52863257520fe26d885",
                "status": "modified"
            }
        ],
        "message": "bug 6818:  if the userAccount is null, the user is either removed or does not exist.  Since we can't log them out in those cases, just skip saving the logout event (and hence avoid the NPE).\n\nstatus 6818: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/e2f725308d5e372a954c2be618a318b28e807aa6",
        "repo": "cloudstack",
        "unit_tests": [
            "ManagementServerImplTest.java"
        ]
    },
    "cloudstack_64e938b": {
        "bug_id": "cloudstack_64e938b",
        "commit": "https://github.com/apache/cloudstack/commit/64e938b7014da9994185dfe80120254cd96d4f7a",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/64e938b7014da9994185dfe80120254cd96d4f7a/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/CitrixResourceBase.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/CitrixResourceBase.java?ref=64e938b7014da9994185dfe80120254cd96d4f7a",
                "deletions": 6,
                "filename": "plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/CitrixResourceBase.java",
                "patch": "@@ -6232,11 +6232,11 @@ private long getVMSnapshotChainSize(Connection conn, VolumeObjectTO volumeTo, St\n                     // add size of snapshot vdi node, usually this only contains meta data\n                     size = size + vdi.getPhysicalUtilisation(conn);\n                     // add size of snapshot vdi parent, this contains data\n-                    if (parentVDI != null)\n+                    if (!isRefNull(parentVDI))\n                         size = size + parentVDI.getPhysicalUtilisation(conn).longValue();\n                 }\n             } catch (Exception e) {\n-                s_logger.debug(\"Exception occurs when calculate \" + \"snapshot capacity for volumes: \" + e.getMessage());\n+                s_logger.debug(\"Exception occurs when calculate snapshot capacity for volumes: due to \" + e.toString());\n                 continue;\n             }\n         }\n@@ -6248,13 +6248,17 @@ private long getVMSnapshotChainSize(Connection conn, VolumeObjectTO volumeTo, St\n                     try {\n                         String vName = vmr.getNameLabel(conn);\n                         if (vName != null && vName.contains(vmName) && vmr.getIsASnapshot(conn)) {\n-\n                             VDI memoryVDI = vmr.getSuspendVDI(conn);\n-                            size = size + memoryVDI.getParent(conn).getPhysicalUtilisation(conn);\n-                            size = size + memoryVDI.getPhysicalUtilisation(conn);\n+                            if (!isRefNull(memoryVDI)) {\n+                                size = size + memoryVDI.getPhysicalUtilisation(conn);\n+                                VDI pMemoryVDI = memoryVDI.getParent(conn);\n+                                if (!isRefNull(pMemoryVDI)) {\n+                                    size = size + pMemoryVDI.getPhysicalUtilisation(conn);\n+                                }\n+                            }\n                         }\n                     } catch (Exception e) {\n-                        s_logger.debug(\"Exception occurs when calculate \" + \"snapshot capacity for memory: \" + e.getMessage());\n+                        s_logger.debug(\"Exception occurs when calculate snapshot capacity for memory: due to \" + e.toString());\n                         continue;\n                     }\n                 }",
                "raw_url": "https://github.com/apache/cloudstack/raw/64e938b7014da9994185dfe80120254cd96d4f7a/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/CitrixResourceBase.java",
                "sha": "a90f99d0fc2e7665c66efdb21efdb918474b697b",
                "status": "modified"
            }
        ],
        "message": "fixed NPE on calculating vm snasphot volume size\n\n(cherry picked from commit 95c7ffbd46f9f674b8813a7b992c17019eb00137)\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/86fe713ab9ca40f0be1b0d6a8142352a54dc6079",
        "repo": "cloudstack",
        "unit_tests": [
            "CitrixResourceBaseTest.java"
        ]
    },
    "cloudstack_66fc7c6": {
        "bug_id": "cloudstack_66fc7c6",
        "commit": "https://github.com/apache/cloudstack/commit/66fc7c62f4b21e770ecc6d6dfa99b3b06f410e89",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/66fc7c62f4b21e770ecc6d6dfa99b3b06f410e89/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java?ref=66fc7c62f4b21e770ecc6d6dfa99b3b06f410e89",
                "deletions": 4,
                "filename": "server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "patch": "@@ -1013,10 +1013,12 @@ protected void updateRoutersRedundantState(final List<DomainRouterVO> routers) {\n                         s_logger.warn(\"Unable to update router \" + router.getHostName() + \"'s status\");\n                     }\n                     RedundantState state = RedundantState.UNKNOWN;\n-                    if (answer != null && answer.getResult()) {\n-                        state = answer.getState();\n-                    } else {\n-                        s_logger.info(\"Agent response doesn't seem to be correct ==> \" + answer.getResult());\n+                    if (answer != null) {\n+                        if (answer.getResult()) {\n+                            state = answer.getState();\n+                        } else {\n+                            s_logger.info(\"Agent response doesn't seem to be correct ==> \" + answer.getResult());\n+                        }\n                     }\n                     router.setRedundantState(state);\n                     updated = true;",
                "raw_url": "https://github.com/apache/cloudstack/raw/66fc7c62f4b21e770ecc6d6dfa99b3b06f410e89/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "sha": "ca1f67dbb69b7b98ae38a851e54398cd05075875",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-9055: fix NPE in updating Redundant State of VPC networks",
        "parent": "https://github.com/apache/cloudstack/commit/f6db0a2a4948753c9ff584c20b5ae45ada6486f4",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualNetworkApplianceManagerImplTest.java"
        ]
    },
    "cloudstack_6715f98": {
        "bug_id": "cloudstack_6715f98",
        "commit": "https://github.com/apache/cloudstack/commit/6715f98087541440f1737912f15d9e3408793834",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/6715f98087541440f1737912f15d9e3408793834/server/src/com/cloud/resource/ResourceManagerImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/resource/ResourceManagerImpl.java?ref=6715f98087541440f1737912f15d9e3408793834",
                "deletions": 0,
                "filename": "server/src/com/cloud/resource/ResourceManagerImpl.java",
                "patch": "@@ -770,6 +770,13 @@ public S3 discoverS3(final AddS3Cmd cmd) throws DiscoveryException {\n                 }\n             }\n             clusterId = cluster.getId();\n+            if (_clusterDetailsDao.findDetail(clusterId,\"cpuOvercommitRatio\") == null) {\n+            ClusterDetailsVO cluster_cpu_detail = new ClusterDetailsVO(clusterId,\"cpuOvercommitRatio\",\"1\");\n+            ClusterDetailsVO cluster_memory_detail = new ClusterDetailsVO(clusterId,\"memoryOvercommitRatio\",\"1\");\n+            _clusterDetailsDao.persist(cluster_cpu_detail);\n+            _clusterDetailsDao.persist(cluster_memory_detail);\n+            }\n+\n         }\n \n         try {",
                "raw_url": "https://github.com/apache/cloudstack/raw/6715f98087541440f1737912f15d9e3408793834/server/src/com/cloud/resource/ResourceManagerImpl.java",
                "sha": "15d32e0640d377d50d54983dabca2d0f322e85af",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-1551: Failed to list clusters due to NPE at createClusterResponse(ApiResponseHelper.java:837) when cluster is added automatically as a part of addHostCommand\n\nSigned-off-by: Abhinandan Prateek <aprateek@apache.org>",
        "parent": "https://github.com/apache/cloudstack/commit/27b753a434de087a9cd8ec50bfa1deb2de7a7925",
        "repo": "cloudstack",
        "unit_tests": [
            "ResourceManagerImplTest.java"
        ]
    },
    "cloudstack_6765e97": {
        "bug_id": "cloudstack_6765e97",
        "commit": "https://github.com/apache/cloudstack/commit/6765e9797678a9867f113f42b0fcf7caf83aba2a",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cloudstack/blob/6765e9797678a9867f113f42b0fcf7caf83aba2a/api/src/com/cloud/api/ResponseGenerator.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/api/ResponseGenerator.java?ref=6765e9797678a9867f113f42b0fcf7caf83aba2a",
                "deletions": 12,
                "filename": "api/src/com/cloud/api/ResponseGenerator.java",
                "patch": "@@ -12,7 +12,7 @@\n  * GNU General Public License for more details.\n  * \n  * You should have received a copy of the GNU General Public License\n- * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ * aLong with this program.  If not, see <http://www.gnu.org/licenses/>.\n  * \n  */\n package com.cloud.api;\n@@ -147,17 +147,17 @@\n \n     SystemVmResponse createSystemVm2Response(VirtualMachine systemVM);\n \n-    void synchronizeCommand(Object job, String syncObjType, long syncObjId);\n+    void synchronizeCommand(Object job, String syncObjType, Long syncObjId);\n \n-    User findUserById(long userId);\n+    User findUserById(Long userId);\n \n-    UserVm findUserVmById(long vmId);\n+    UserVm findUserVmById(Long vmId);\n \n-    Volume findVolumeById(long volumeId);\n+    Volume findVolumeById(Long volumeId);\n \n-    Account findAccountByNameDomain(String accountName, long domainId);\n+    Account findAccountByNameDomain(String accountName, Long domainId);\n \n-    VirtualMachineTemplate findTemplateById(long templateId);\n+    VirtualMachineTemplate findTemplateById(Long templateId);\n \n     VpnUsersResponse createVpnUserResponse(VpnUser user);\n \n@@ -174,17 +174,17 @@ void createTemplateResponse(List<TemplateResponse> responses, VirtualMachineTemp\n \n     NetworkGroupResponse createNetworkGroupResponse(NetworkGroup group);\n \n-    ExtractResponse createExtractResponse(long uploadId, long id, long zoneId, long accountId, String mode);\n+    ExtractResponse createExtractResponse(Long uploadId, Long id, Long zoneId, Long accountId, String mode);\n \n-    TemplateResponse createTemplateResponse(VirtualMachineTemplate template, long destZoneId);\n+    TemplateResponse createTemplateResponse(VirtualMachineTemplate template, Long destZoneId);\n \n-    TemplateResponse createIsoResponse3(VirtualMachineTemplate iso, long destZoneId);\n+    TemplateResponse createIsoResponse3(VirtualMachineTemplate iso, Long destZoneId);\n \n     String toSerializedString(CreateCmdResponse response, String responseType);\n \n     AsyncJobResponse createAsyncJobResponse(AsyncJob job);\n \n-    TemplateResponse createTemplateResponse(VirtualMachineTemplate template, Long snapshotId, long volumeId);\n+    TemplateResponse createTemplateResponse(VirtualMachineTemplate template, Long snapshotId, Long volumeId);\n \n     EventResponse createEventResponse(Event event);\n \n@@ -195,7 +195,7 @@ void createTemplateResponse(List<TemplateResponse> responses, VirtualMachineTemp\n \n     List<CapacityResponse> createCapacityResponse(List<? extends Capacity> result, DecimalFormat format);\n \n-    TemplatePermissionsResponse createTemplatePermissionsResponse(List<String> accountNames, long id, boolean isAdmin);\n+    TemplatePermissionsResponse createTemplatePermissionsResponse(List<String> accountNames, Long id, boolean isAdmin);\n \n     AsyncJobResponse queryJobResult(QueryAsyncJobResultCmd cmd);\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/6765e9797678a9867f113f42b0fcf7caf83aba2a/api/src/com/cloud/api/ResponseGenerator.java",
                "sha": "504054b22a724f7a32e5dc65d6458392aa19140b",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/6765e9797678a9867f113f42b0fcf7caf83aba2a/api/src/com/cloud/api/commands/DetachIsoCmd.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/api/commands/DetachIsoCmd.java?ref=6765e9797678a9867f113f42b0fcf7caf83aba2a",
                "deletions": 1,
                "filename": "api/src/com/cloud/api/commands/DetachIsoCmd.java",
                "patch": "@@ -40,7 +40,7 @@\n     //////////////// API parameters /////////////////////\n     /////////////////////////////////////////////////////\n \n-    @Parameter(name=ApiConstants.VIRTUAL_MACHINE_ID, type=CommandType.LONG, required=true, description=\"\tThe ID of the virtual machine\")\n+    @Parameter(name=ApiConstants.VIRTUAL_MACHINE_ID, type=CommandType.LONG, required=true, description=\"The ID of the virtual machine\")\n     private Long virtualMachineId;\n \n     /////////////////////////////////////////////////////",
                "raw_url": "https://github.com/apache/cloudstack/raw/6765e9797678a9867f113f42b0fcf7caf83aba2a/api/src/com/cloud/api/commands/DetachIsoCmd.java",
                "sha": "44b78ff4e8ed82ee4a5f1da464c1487069a627f8",
                "status": "modified"
            },
            {
                "additions": 48,
                "blob_url": "https://github.com/apache/cloudstack/blob/6765e9797678a9867f113f42b0fcf7caf83aba2a/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 96,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=6765e9797678a9867f113f42b0fcf7caf83aba2a",
                "deletions": 48,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -12,7 +12,7 @@\n  * GNU General Public License for more details.\n  * \n  * You should have received a copy of the GNU General Public License\n- * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ * aLong with this program.  If not, see <http://www.gnu.org/licenses/>.\n  * \n  */\n package com.cloud.api;\n@@ -188,11 +188,11 @@ public AccountResponse createAccountResponse(Account account) {\n             throw new ServerApiException(BaseCmd.INTERNAL_ERROR, \"Internal error searching for user stats\");\n         }\n \n-        long bytesSent = 0;\n-        long bytesReceived = 0;\n+        Long bytesSent = 0L;\n+        Long bytesReceived = 0L;\n         for (UserStatisticsVO stat : stats) {\n-            long rx = stat.getNetBytesReceived() + stat.getCurrentBytesReceived();\n-            long tx = stat.getNetBytesSent() + stat.getCurrentBytesSent();\n+            Long rx = stat.getNetBytesReceived() + stat.getCurrentBytesReceived();\n+            Long tx = stat.getNetBytesSent() + stat.getCurrentBytesSent();\n             bytesReceived = bytesReceived + Long.valueOf(rx);\n             bytesSent = bytesSent + Long.valueOf(tx);\n         }\n@@ -201,41 +201,41 @@ public AccountResponse createAccountResponse(Account account) {\n \n         // Get resource limits and counts\n \n-        long vmLimit = ApiDBUtils.findCorrectResourceLimit(ResourceType.user_vm, account.getId());\n+        Long vmLimit = ApiDBUtils.findCorrectResourceLimit(ResourceType.user_vm, account.getId());\n         String vmLimitDisplay = (accountIsAdmin || vmLimit == -1) ? \"Unlimited\" : String.valueOf(vmLimit);\n-        long vmTotal = ApiDBUtils.getResourceCount(ResourceType.user_vm, account.getId());\n+        Long vmTotal = ApiDBUtils.getResourceCount(ResourceType.user_vm, account.getId());\n         String vmAvail = (accountIsAdmin || vmLimit == -1) ? \"Unlimited\" : String.valueOf(vmLimit - vmTotal);\n         accountResponse.setVmLimit(vmLimitDisplay);\n         accountResponse.setVmTotal(vmTotal);\n         accountResponse.setVmAvailable(vmAvail);\n \n-        long ipLimit = ApiDBUtils.findCorrectResourceLimit(ResourceType.public_ip, account.getId());\n+        Long ipLimit = ApiDBUtils.findCorrectResourceLimit(ResourceType.public_ip, account.getId());\n         String ipLimitDisplay = (accountIsAdmin || ipLimit == -1) ? \"Unlimited\" : String.valueOf(ipLimit);\n-        long ipTotal = ApiDBUtils.getResourceCount(ResourceType.public_ip, account.getId());\n+        Long ipTotal = ApiDBUtils.getResourceCount(ResourceType.public_ip, account.getId());\n         String ipAvail = (accountIsAdmin || ipLimit == -1) ? \"Unlimited\" : String.valueOf(ipLimit - ipTotal);\n         accountResponse.setIpLimit(ipLimitDisplay);\n         accountResponse.setIpTotal(ipTotal);\n         accountResponse.setIpAvailable(ipAvail);\n \n-        long volumeLimit = ApiDBUtils.findCorrectResourceLimit(ResourceType.volume, account.getId());\n+        Long volumeLimit = ApiDBUtils.findCorrectResourceLimit(ResourceType.volume, account.getId());\n         String volumeLimitDisplay = (accountIsAdmin || volumeLimit == -1) ? \"Unlimited\" : String.valueOf(volumeLimit);\n-        long volumeTotal = ApiDBUtils.getResourceCount(ResourceType.volume, account.getId());\n+        Long volumeTotal = ApiDBUtils.getResourceCount(ResourceType.volume, account.getId());\n         String volumeAvail = (accountIsAdmin || volumeLimit == -1) ? \"Unlimited\" : String.valueOf(volumeLimit - volumeTotal);\n         accountResponse.setVolumeLimit(volumeLimitDisplay);\n         accountResponse.setVolumeTotal(volumeTotal);\n         accountResponse.setVolumeAvailable(volumeAvail);\n \n-        long snapshotLimit = ApiDBUtils.findCorrectResourceLimit(ResourceType.snapshot, account.getId());\n+        Long snapshotLimit = ApiDBUtils.findCorrectResourceLimit(ResourceType.snapshot, account.getId());\n         String snapshotLimitDisplay = (accountIsAdmin || snapshotLimit == -1) ? \"Unlimited\" : String.valueOf(snapshotLimit);\n-        long snapshotTotal = ApiDBUtils.getResourceCount(ResourceType.snapshot, account.getId());\n+        Long snapshotTotal = ApiDBUtils.getResourceCount(ResourceType.snapshot, account.getId());\n         String snapshotAvail = (accountIsAdmin || snapshotLimit == -1) ? \"Unlimited\" : String.valueOf(snapshotLimit - snapshotTotal);\n         accountResponse.setSnapshotLimit(snapshotLimitDisplay);\n         accountResponse.setSnapshotTotal(snapshotTotal);\n         accountResponse.setSnapshotAvailable(snapshotAvail);\n \n-        long templateLimit = ApiDBUtils.findCorrectResourceLimit(ResourceType.template, account.getId());\n+        Long templateLimit = ApiDBUtils.findCorrectResourceLimit(ResourceType.template, account.getId());\n         String templateLimitDisplay = (accountIsAdmin || templateLimit == -1) ? \"Unlimited\" : String.valueOf(templateLimit);\n-        long templateTotal = ApiDBUtils.getResourceCount(ResourceType.template, account.getId());\n+        Long templateTotal = ApiDBUtils.getResourceCount(ResourceType.template, account.getId());\n         String templateAvail = (accountIsAdmin || templateLimit == -1) ? \"Unlimited\" : String.valueOf(templateLimit - templateTotal);\n         accountResponse.setTemplateLimit(templateLimitDisplay);\n         accountResponse.setTemplateTotal(templateTotal);\n@@ -483,7 +483,7 @@ public UserVmResponse createUserVmResponse(UserVm userVm) {\n \n         // ISO Info\n         if (userVm.getIsoId() != null) {\n-            VMTemplateVO iso = ApiDBUtils.findTemplateById(userVm.getIsoId().longValue());\n+            VMTemplateVO iso = ApiDBUtils.findTemplateById(userVm.getIsoId());\n             if (iso != null) {\n                 userVmResponse.setIsoId(userVm.getIsoId());\n                 userVmResponse.setIsoName(iso.getName());\n@@ -519,10 +519,10 @@ public UserVmResponse createUserVmResponse(UserVm userVm) {\n             cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n             userVmResponse.setCpuUsed(cpuUsed);\n \n-            long networkKbRead = (long) vmStats.getNetworkReadKBs();\n+            Long networkKbRead = Double.doubleToLongBits(vmStats.getNetworkReadKBs());\n             userVmResponse.setNetworkKbsRead(networkKbRead);\n \n-            long networkKbWrite = (long) vmStats.getNetworkWriteKBs();\n+            Long networkKbWrite = Double.doubleToLongBits(vmStats.getNetworkWriteKBs());\n             userVmResponse.setNetworkKbsWrite(networkKbWrite);\n         }\n \n@@ -702,16 +702,16 @@ public HostResponse createHostResponse(Host host) {\n             float cpuUtil = (float) hostStats.getCpuUtilization();\n             cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n             hostResponse.setCpuUsed(cpuUsed);\n-            hostResponse.setAverageLoad((long) hostStats.getAverageLoad());\n-            hostResponse.setNetworkKbsRead((long) hostStats.getNetworkReadKBs());\n-            hostResponse.setNetworkKbsWrite((long) hostStats.getNetworkWriteKBs());\n+            hostResponse.setAverageLoad(Double.doubleToLongBits(hostStats.getAverageLoad()));\n+            hostResponse.setNetworkKbsRead(Double.doubleToLongBits(hostStats.getNetworkReadKBs()));\n+            hostResponse.setNetworkKbsWrite(Double.doubleToLongBits(hostStats.getNetworkWriteKBs()));\n         }\n \n         if (host.getType() == Host.Type.Routing) {\n             hostResponse.setMemoryTotal(host.getTotalMemory());\n \n             // calculate memory allocated by systemVM and userVm\n-            long mem = ApiDBUtils.getMemoryUsagebyHost(host.getId());\n+            Long mem = ApiDBUtils.getMemoryUsagebyHost(host.getId());\n             hostResponse.setMemoryAllocated(mem);\n             hostResponse.setMemoryUsed(mem);\n         } else if (host.getType().toString().equals(\"Storage\")) {\n@@ -1028,9 +1028,9 @@ public StoragePoolResponse createStoragePoolResponse(StoragePool pool) {\n         }\n \n         StorageStats stats = ApiDBUtils.getStoragePoolStatistics(pool.getId());\n-        long capacity = pool.getCapacityBytes();\n-        long available = pool.getAvailableBytes();\n-        long used = capacity - available;\n+        Long capacity = pool.getCapacityBytes();\n+        Long available = pool.getAvailableBytes();\n+        Long used = capacity - available;\n \n         if (stats != null) {\n             used = stats.getByteUsed();\n@@ -1177,7 +1177,7 @@ public UserVmResponse createUserVm2Response(UserVm userVm) {\n \n         // ISO Info\n         if (userVm.getIsoId() != null) {\n-            VMTemplateVO iso = ApiDBUtils.findTemplateById(userVm.getIsoId().longValue());\n+            VMTemplateVO iso = ApiDBUtils.findTemplateById(userVm.getIsoId());\n             if (iso != null) {\n                 userVmResponse.setIsoId(userVm.getIsoId());\n                 userVmResponse.setIsoName(iso.getName());\n@@ -1212,10 +1212,10 @@ public UserVmResponse createUserVm2Response(UserVm userVm) {\n             cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n             userVmResponse.setCpuUsed(cpuUsed);\n \n-            long networkKbRead = (long) vmStats.getNetworkReadKBs();\n+            Long networkKbRead = Double.doubleToLongBits(vmStats.getNetworkReadKBs());\n             userVmResponse.setNetworkKbsRead(networkKbRead);\n \n-            long networkKbWrite = (long) vmStats.getNetworkWriteKBs();\n+            Long networkKbWrite = Double.doubleToLongBits(vmStats.getNetworkWriteKBs());\n             userVmResponse.setNetworkKbsWrite(networkKbWrite);\n         }\n \n@@ -1225,7 +1225,7 @@ public UserVmResponse createUserVm2Response(UserVm userVm) {\n \n         List<? extends Nic> nics = ApiDBUtils.getNics(userVm);\n         for (Nic singleNic : nics) {\n-            long configId = singleNic.getNetworkId();\n+            Long configId = singleNic.getNetworkId();\n             Network networkConf = ApiDBUtils.getNetwork(configId);\n             if (networkConf.getTrafficType() == TrafficType.Guest) {\n                 userVmResponse.setIpAddress(singleNic.getIp4Address());\n@@ -1268,7 +1268,7 @@ public DomainRouterResponse createDomainRouter2Response(VirtualRouter router) {\n \n         List<? extends Nic> nics = ApiDBUtils.getNics(router);\n         for (Nic singleNic : nics) {\n-            long configId = singleNic.getNetworkId();\n+            Long configId = singleNic.getNetworkId();\n             Network networkConf = ApiDBUtils.getNetwork(configId);\n \n             if (networkConf.getTrafficType() == TrafficType.Guest) {\n@@ -1359,7 +1359,7 @@ public SystemVmResponse createSystemVm2Response(VirtualMachine systemVM) {\n \n             List<? extends Nic> nics = ApiDBUtils.getNics(systemVM);\n             for (Nic singleNic : nics) {\n-                long configId = singleNic.getNetworkId();\n+                Long configId = singleNic.getNetworkId();\n                 Network networkConf = ApiDBUtils.getNetwork(configId);\n \n                 if (networkConf.getTrafficType() == TrafficType.Management) {\n@@ -1382,33 +1382,33 @@ public SystemVmResponse createSystemVm2Response(VirtualMachine systemVM) {\n     }\n     \n     @Override\n-    public void synchronizeCommand(Object job, String syncObjType, long syncObjId) {\n+    public void synchronizeCommand(Object job, String syncObjType, Long syncObjId) {\n         ApiDBUtils.synchronizeCommand(job, syncObjType, syncObjId);\n     }\n     \n     @Override\n-    public User findUserById(long userId) {\n+    public User findUserById(Long userId) {\n         return ApiDBUtils.findUserById(userId);\n     }\n     \n     @Override\n-    public UserVm findUserVmById(long vmId) {\n+    public UserVm findUserVmById(Long vmId) {\n         return ApiDBUtils.findUserVmById(vmId);\n \n     }\n \n     @Override\n-    public Volume findVolumeById(long volumeId) {\n+    public Volume findVolumeById(Long volumeId) {\n         return ApiDBUtils.findVolumeById(volumeId);\n     }\n     \n     @Override\n-    public Account findAccountByNameDomain(String accountName, long domainId) {\n+    public Account findAccountByNameDomain(String accountName, Long domainId) {\n         return ApiDBUtils.findAccountByNameDomain(accountName, domainId);        \n     }\n     \n     @Override\n-    public VirtualMachineTemplate findTemplateById(long templateId) {\n+    public VirtualMachineTemplate findTemplateById(Long templateId) {\n         return ApiDBUtils.findTemplateById(templateId);\n     }\n     \n@@ -1536,7 +1536,7 @@ public void createTemplateResponse(List<TemplateResponse> responses, VirtualMach\n                 }\n             }\n             \n-            long templateSize = templateHostRef.getSize();\n+            Long templateSize = templateHostRef.getSize();\n             if (templateSize > 0) {\n                 templateResponse.setSize(templateSize);\n             }\n@@ -1727,7 +1727,7 @@ public NetworkGroupResponse createNetworkGroupResponse(NetworkGroup group) {\n     }\n     \n     @Override\n-    public ExtractResponse createExtractResponse(long uploadId, long id, long zoneId, long accountId, String mode) {\n+    public ExtractResponse createExtractResponse(Long uploadId, Long id, Long zoneId, Long accountId, String mode) {\n         UploadVO uploadInfo = ApiDBUtils.findUploadById(uploadId);\n         ExtractResponse response = new ExtractResponse();\n         response.setObjectName(\"template\");\n@@ -1747,7 +1747,7 @@ public ExtractResponse createExtractResponse(long uploadId, long id, long zoneId\n     }\n \n     @Override\n-    public TemplateResponse createTemplateResponse(VirtualMachineTemplate template, long destZoneId) {\n+    public TemplateResponse createTemplateResponse(VirtualMachineTemplate template, Long destZoneId) {\n         TemplateResponse templateResponse = new TemplateResponse();\n         if (template != null) {\n             templateResponse.setId(template.getId());\n@@ -1821,7 +1821,7 @@ public TemplateResponse createTemplateResponse(VirtualMachineTemplate template,\n     }\n     \n     @Override\n-    public TemplateResponse createIsoResponse3(VirtualMachineTemplate iso, long destZoneId) {\n+    public TemplateResponse createIsoResponse3(VirtualMachineTemplate iso, Long destZoneId) {\n         TemplateResponse isoResponse = new TemplateResponse();\n         if (iso != null) {\n             isoResponse.setId(iso.getId());\n@@ -1917,7 +1917,7 @@ public AsyncJobResponse createAsyncJobResponse(AsyncJob job) {\n     }\n     \n     @Override\n-    public TemplateResponse createTemplateResponse(VirtualMachineTemplate template, Long snapshotId, long volumeId) {\n+    public TemplateResponse createTemplateResponse(VirtualMachineTemplate template, Long snapshotId, Long volumeId) {\n         TemplateResponse response = new TemplateResponse();\n         response.setId(template.getId());\n         response.setName(template.getName());\n@@ -2080,7 +2080,7 @@ public EventResponse createEventResponse(Event event) {\n                     }\n                 }\n \n-                long isoSize = isoHost.getSize();\n+                Long isoSize = isoHost.getSize();\n                 if (isoSize > 0) {\n                     isoResponse.setSize(isoSize);\n                 }\n@@ -2137,13 +2137,13 @@ public EventResponse createEventResponse(Event event) {\n             if (totalCapacity == null) {\n                 totalCapacity = new Long(capacity.getTotalCapacity());\n             } else {\n-                totalCapacity = new Long(capacity.getTotalCapacity() + totalCapacity.longValue());\n+                totalCapacity = new Long(capacity.getTotalCapacity() + totalCapacity);\n             }\n \n             if (usedCapacity == null) {\n                 usedCapacity = new Long(capacity.getUsedCapacity());\n             } else {\n-                usedCapacity = new Long(capacity.getUsedCapacity() + usedCapacity.longValue());\n+                usedCapacity = new Long(capacity.getUsedCapacity() + usedCapacity);\n             }\n \n             totalCapacityMap.put(key, totalCapacity);\n@@ -2156,13 +2156,13 @@ public EventResponse createEventResponse(Event event) {\n                 if (totalCapacity == null) {\n                     totalCapacity = new Long(capacity.getTotalCapacity());\n                 } else {\n-                    totalCapacity = new Long(capacity.getTotalCapacity() + totalCapacity.longValue());\n+                    totalCapacity = new Long(capacity.getTotalCapacity() + totalCapacity);\n                 }\n \n                 if (usedCapacity == null) {\n                     usedCapacity = new Long(capacity.getUsedCapacity());\n                 } else {\n-                    usedCapacity = new Long(capacity.getUsedCapacity() + usedCapacity.longValue());\n+                    usedCapacity = new Long(capacity.getUsedCapacity() + usedCapacity);\n                 }\n \n                 totalCapacityMap.put(keyForPodTotal, totalCapacity);\n@@ -2224,7 +2224,7 @@ public EventResponse createEventResponse(Event event) {\n     }\n \n     @Override\n-    public TemplatePermissionsResponse createTemplatePermissionsResponse(List<String> accountNames, long id, boolean isAdmin) {\n+    public TemplatePermissionsResponse createTemplatePermissionsResponse(List<String> accountNames, Long id, boolean isAdmin) {\n         Long templateOwnerDomain = null;\n         VirtualMachineTemplate template = ApiDBUtils.findTemplateById(id);\n         if (isAdmin) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/6765e9797678a9867f113f42b0fcf7caf83aba2a/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "1205efcfdbd8deb35ab0deff11ab7799237bdbd1",
                "status": "modified"
            }
        ],
        "message": "Made ApiResponseHelper to use Long instead of long for response parameters to eliminate possible NPEs during building an api response.",
        "parent": "https://github.com/apache/cloudstack/commit/cdea2d210d07eb14d7a04a2b45a739bd5b0d025d",
        "repo": "cloudstack",
        "unit_tests": [
            "ApiResponseHelperTest.java"
        ]
    },
    "cloudstack_67e2f13": {
        "bug_id": "cloudstack_67e2f13",
        "commit": "https://github.com/apache/cloudstack/commit/67e2f130d02226f12e2d9f7f374e0d6f9e693793",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/67e2f130d02226f12e2d9f7f374e0d6f9e693793/server/src/com/cloud/server/StatsCollector.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/StatsCollector.java?ref=67e2f130d02226f12e2d9f7f374e0d6f9e693793",
                "deletions": 1,
                "filename": "server/src/com/cloud/server/StatsCollector.java",
                "patch": "@@ -265,7 +265,10 @@ public void run() {\n                 ConcurrentHashMap<Long, StorageStats> storageStats = new ConcurrentHashMap<Long, StorageStats>();\r\n                 for (HostVO host : hosts) {\r\n                     GetStorageStatsCommand command = new GetStorageStatsCommand(host.getStorageUrl());\n-        \t\t\tHostVO ssAhost = _agentMgr.getSSAgent(host);\n+                    HostVO ssAhost = _agentMgr.getSSAgent(host);\n+                    if (ssAhost == null) {\n+                        return;\n+                    }\n                     long hostId = host.getId();\r\n                     Answer answer = _agentMgr.easySend(ssAhost.getId(), command);\r\n                     if (answer != null && answer.getResult()) {\r",
                "raw_url": "https://github.com/apache/cloudstack/raw/67e2f130d02226f12e2d9f7f374e0d6f9e693793/server/src/com/cloud/server/StatsCollector.java",
                "sha": "fb9a0104c87fe1d503a621719485444a16f5b692",
                "status": "modified"
            }
        ],
        "message": "fixed a NPE",
        "parent": "https://github.com/apache/cloudstack/commit/79f5ece7dc6c603ded3ab5faf3eb682960f1f44c",
        "repo": "cloudstack",
        "unit_tests": [
            "StatsCollectorTest.java"
        ]
    },
    "cloudstack_694b723": {
        "bug_id": "cloudstack_694b723",
        "commit": "https://github.com/apache/cloudstack/commit/694b7238998a8f7b03662fe50017de9d80d969c0",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/694b7238998a8f7b03662fe50017de9d80d969c0/engine/storage/image/src/org/apache/cloudstack/storage/image/store/TemplateObject.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/storage/image/src/org/apache/cloudstack/storage/image/store/TemplateObject.java?ref=694b7238998a8f7b03662fe50017de9d80d969c0",
                "deletions": 1,
                "filename": "engine/storage/image/src/org/apache/cloudstack/storage/image/store/TemplateObject.java",
                "patch": "@@ -190,7 +190,9 @@ public void processEvent(ObjectInDataStoreStateMachine.Event event, Answer answe\n                     TemplateObjectTO newTemplate = (TemplateObjectTO)cpyAnswer.getNewData();\n                     VMTemplateStoragePoolVO templatePoolRef = templatePoolDao.findByPoolTemplate(getDataStore().getId(), getId());\n                     templatePoolRef.setDownloadPercent(100);\n-                    templatePoolRef.setTemplateSize(newTemplate.getSize());\n+                    if (newTemplate.getSize() != null) {\n+                        templatePoolRef.setTemplateSize(newTemplate.getSize());\n+                    }\n                     templatePoolRef.setDownloadState(Status.DOWNLOADED);\n                     templatePoolRef.setLocalDownloadPath(newTemplate.getPath());\n                     templatePoolRef.setInstallPath(newTemplate.getPath());",
                "raw_url": "https://github.com/apache/cloudstack/raw/694b7238998a8f7b03662fe50017de9d80d969c0/engine/storage/image/src/org/apache/cloudstack/storage/image/store/TemplateObject.java",
                "sha": "c5ca5b9990af10cdf3ea6b9e3b3394545205fdb6",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/694b7238998a8f7b03662fe50017de9d80d969c0/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/XenServerStorageProcessor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/XenServerStorageProcessor.java?ref=694b7238998a8f7b03662fe50017de9d80d969c0",
                "deletions": 1,
                "filename": "plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/XenServerStorageProcessor.java",
                "patch": "@@ -877,7 +877,9 @@ public Answer copyTemplateToPrimaryStorage(CopyCommand cmd) {\n \n                 newVol.setUuid(uuidToReturn);\n                 newVol.setPath(uuidToReturn);\n-                newVol.setSize(physicalSize);\n+                if (physicalSize != null) {\n+                    newVol.setSize(physicalSize);\n+                }\n                 newVol.setFormat(ImageFormat.VHD);\n \n                 return new CopyCmdAnswer(newVol);",
                "raw_url": "https://github.com/apache/cloudstack/raw/694b7238998a8f7b03662fe50017de9d80d969c0/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/XenServerStorageProcessor.java",
                "sha": "10a97a21c125c0c41edcee0ebf8d6e0a2c1a2cbc",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/694b7238998a8f7b03662fe50017de9d80d969c0/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/Xenserver625StorageProcessor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/Xenserver625StorageProcessor.java?ref=694b7238998a8f7b03662fe50017de9d80d969c0",
                "deletions": 1,
                "filename": "plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/Xenserver625StorageProcessor.java",
                "patch": "@@ -292,7 +292,9 @@ public Answer copyTemplateToPrimaryStorage(CopyCommand cmd) {\n \n                 newVol.setUuid(uuidToReturn);\n                 newVol.setPath(uuidToReturn);\n-                newVol.setSize(physicalSize);\n+                if (physicalSize != null) {\n+                    newVol.setSize(physicalSize);\n+                }\n                 newVol.setFormat(Storage.ImageFormat.VHD);\n \n                 return new CopyCmdAnswer(newVol);",
                "raw_url": "https://github.com/apache/cloudstack/raw/694b7238998a8f7b03662fe50017de9d80d969c0/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/Xenserver625StorageProcessor.java",
                "sha": "c4f2dc916ea1fa185ea7d24c94133cca20327a2d",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-8312: Fix NPE regression, copy template can have NULL volume size\n\nThe copy command reply can have null size returned, so check and set values\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n(cherry picked from commit 53ca0b1861c743caf61ec04f776c87eac334f185)\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/62a733e8cf7a2a29517d17c158a8271ce20a74cc",
        "repo": "cloudstack",
        "unit_tests": [
            "Xenserver625StorageProcessorTest.java"
        ]
    },
    "cloudstack_6a18cdd": {
        "bug_id": "cloudstack_6a18cdd",
        "commit": "https://github.com/apache/cloudstack/commit/6a18cdd6ef969cca3a063356d4a9a68163b5ff6e",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/6a18cdd6ef969cca3a063356d4a9a68163b5ff6e/engine/schema/src/com/cloud/storage/dao/VolumeDao.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/storage/dao/VolumeDao.java?ref=6a18cdd6ef969cca3a063356d4a9a68163b5ff6e",
                "deletions": 1,
                "filename": "engine/schema/src/com/cloud/storage/dao/VolumeDao.java",
                "patch": "@@ -80,7 +80,7 @@\n \n     List<VolumeVO> listVolumesToBeDestroyed();\n \n-    List<VolumeVO> listVolumesToBeDestroyed(Date date);\n+    List<VolumeVO> listNonRootVolumesToBeDestroyed(Date date);\n \n     ImageFormat getImageFormat(Long volumeId);\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/6a18cdd6ef969cca3a063356d4a9a68163b5ff6e/engine/schema/src/com/cloud/storage/dao/VolumeDao.java",
                "sha": "f2d5fc735207a0c267a05d3e5e2d147c6f06cc1f",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/6a18cdd6ef969cca3a063356d4a9a68163b5ff6e/engine/schema/src/com/cloud/storage/dao/VolumeDaoImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/storage/dao/VolumeDaoImpl.java?ref=6a18cdd6ef969cca3a063356d4a9a68163b5ff6e",
                "deletions": 1,
                "filename": "engine/schema/src/com/cloud/storage/dao/VolumeDaoImpl.java",
                "patch": "@@ -325,6 +325,7 @@ public VolumeDaoImpl() {\n         AllFieldsSearch.and(\"deviceId\", AllFieldsSearch.entity().getDeviceId(), Op.EQ);\n         AllFieldsSearch.and(\"poolId\", AllFieldsSearch.entity().getPoolId(), Op.EQ);\n         AllFieldsSearch.and(\"vType\", AllFieldsSearch.entity().getVolumeType(), Op.EQ);\n+        AllFieldsSearch.and(\"notVolumeType\", AllFieldsSearch.entity().getVolumeType(), Op.NEQ);\n         AllFieldsSearch.and(\"id\", AllFieldsSearch.entity().getId(), Op.EQ);\n         AllFieldsSearch.and(\"destroyed\", AllFieldsSearch.entity().getState(), Op.EQ);\n         AllFieldsSearch.and(\"notDestroyed\", AllFieldsSearch.entity().getState(), Op.NEQ);\n@@ -481,9 +482,10 @@ public SumCount() {\n     }\n \n     @Override\n-    public List<VolumeVO> listVolumesToBeDestroyed(Date date) {\n+    public List<VolumeVO> listNonRootVolumesToBeDestroyed(Date date) {\n         SearchCriteria<VolumeVO> sc = AllFieldsSearch.create();\n         sc.setParameters(\"state\", Volume.State.Destroy);\n+        sc.setParameters(\"notVolumeType\", Volume.Type.ROOT.toString());\n         sc.setParameters(\"updateTime\", date);\n \n         return listBy(sc);",
                "raw_url": "https://github.com/apache/cloudstack/raw/6a18cdd6ef969cca3a063356d4a9a68163b5ff6e/engine/schema/src/com/cloud/storage/dao/VolumeDaoImpl.java",
                "sha": "4f5b613ddd156049079df8f22fd1d62e6d5ce35d",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/6a18cdd6ef969cca3a063356d4a9a68163b5ff6e/engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeObject.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeObject.java?ref=6a18cdd6ef969cca3a063356d4a9a68163b5ff6e",
                "deletions": 3,
                "filename": "engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeObject.java",
                "patch": "@@ -174,11 +174,11 @@ public long getVolumeId() {\n     }\n \n     @Override\n-    public boolean  stateTransit(Volume.Event event) {\n+    public boolean stateTransit(Volume.Event event) {\n         boolean result = false;\n         try {\n             volumeVO = volumeDao.findById(volumeVO.getId());\n-            if(volumeVO != null) {\n+            if (volumeVO != null) {\n                 result = _volStateMachine.transitTo(volumeVO, event, null, volumeDao);\n                 volumeVO = volumeDao.findById(volumeVO.getId());\n             }\n@@ -332,8 +332,9 @@ public void processEvent(ObjectInDataStoreStateMachine.Event event) {\n             throw new CloudRuntimeException(\"Failed to update state:\" + e.toString());\n         } finally {\n             // in case of OperationFailed, expunge the entry\n+            // state transit call reloads the volume from DB and so check for null as well\n             if (event == ObjectInDataStoreStateMachine.Event.OperationFailed &&\n-                (volumeVO.getState() != Volume.State.Copying && volumeVO.getState() != Volume.State.Uploaded && volumeVO.getState() != Volume.State.UploadError)) {\n+                (volumeVO != null && volumeVO.getState() != Volume.State.Copying && volumeVO.getState() != Volume.State.Uploaded && volumeVO.getState() != Volume.State.UploadError)) {\n                 objectInStoreMgr.deleteIfNotReady(this);\n             }\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/6a18cdd6ef969cca3a063356d4a9a68163b5ff6e/engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeObject.java",
                "sha": "b7f459227aaa6843124912d204385957bbe77cff",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/6a18cdd6ef969cca3a063356d4a9a68163b5ff6e/engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java?ref=6a18cdd6ef969cca3a063356d4a9a68163b5ff6e",
                "deletions": 0,
                "filename": "engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java",
                "patch": "@@ -316,6 +316,11 @@ private boolean canVolumeBeRemoved(long volumeId) {\n         }\n \n         VolumeVO vol = volDao.findById(volume.getId());\n+        if (vol == null) {\n+            s_logger.debug(\"Volume \" + volume.getId() + \" is not found\");\n+            future.complete(result);\n+            return future;\n+        }\n \n         if (!volumeExistsOnPrimary(vol)) {\n             // not created on primary store",
                "raw_url": "https://github.com/apache/cloudstack/raw/6a18cdd6ef969cca3a063356d4a9a68163b5ff6e/engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java",
                "sha": "2e72286b2224c9fd7b471a6dc734813a43957a1b",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/6a18cdd6ef969cca3a063356d4a9a68163b5ff6e/server/src/com/cloud/storage/StorageManagerImpl.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/StorageManagerImpl.java?ref=6a18cdd6ef969cca3a063356d4a9a68163b5ff6e",
                "deletions": 3,
                "filename": "server/src/com/cloud/storage/StorageManagerImpl.java",
                "patch": "@@ -1080,8 +1080,8 @@ public void cleanupStorage(boolean recurring) {\n \n                     cleanupSecondaryStorage(recurring);\n \n-                    List<VolumeVO> vols = _volsDao.listVolumesToBeDestroyed(new Date(System.currentTimeMillis() - ((long) StorageCleanupDelay.value() << 10)));\n-\n+                    // ROOT volumes will be destroyed as part of VM cleanup\n+                    List<VolumeVO> vols = _volsDao.listNonRootVolumesToBeDestroyed(new Date(System.currentTimeMillis() - ((long) StorageCleanupDelay.value() << 10)));\n                     for (VolumeVO vol : vols) {\n                         try {\n                             // If this fails, just log a warning. It's ideal if we clean up the host-side clustered file\n@@ -1092,7 +1092,12 @@ public void cleanupStorage(boolean recurring) {\n                         }\n \n                         try {\n-                            volService.expungeVolumeAsync(volFactory.getVolume(vol.getId()));\n+                            VolumeInfo volumeInfo = volFactory.getVolume(vol.getId());\n+                            if (volumeInfo != null) {\n+                                volService.expungeVolumeAsync(volumeInfo);\n+                            } else {\n+                                s_logger.debug(\"Volume \" + vol.getUuid() + \" is already destroyed\");\n+                            }\n                         } catch (Exception e) {\n                             s_logger.warn(\"Unable to destroy volume \" + vol.getUuid(), e);\n                         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/6a18cdd6ef969cca3a063356d4a9a68163b5ff6e/server/src/com/cloud/storage/StorageManagerImpl.java",
                "sha": "5d1ee584ad4897f39be42e3fb7beec25a3aadf37",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #1825 from Accelerite/CLOUDSTACK-9660\n\nCLOUDSTACK-9660: NPE while destroying volumes during 1000 VMs deploy and destroy tests\n\nNPE is seen as VM destroy and storage cleanup threads try to remove the same root volume. Fix is to handle\nonly non-root volumes in storage cleanup thread, root volumes will be handled as part of VM destroy.\n\n* pr/1825:\n  CLOUDSTACK-9660: NPE while destroying volumes during 1000 VMs deploy and destroy tests NPE is seen as VM destroy and storage cleanup threads try to remove the same root volume. Fix is to handle only non-root volumes in storage cleanup thread, root volumes will be handled as part of VM destroy.\n\nSigned-off-by: Rajani Karuturi <rajani.karuturi@accelerite.com>",
        "parent": "https://github.com/apache/cloudstack/commit/017c42b6251ea095a7879fd2e8df1138f8b57380",
        "repo": "cloudstack",
        "unit_tests": [
            "StorageManagerImplTest.java"
        ]
    },
    "cloudstack_6a5d3e9": {
        "bug_id": "cloudstack_6a5d3e9",
        "commit": "https://github.com/apache/cloudstack/commit/6a5d3e96c96c0cd5ec9e1ec1e1c4ed42dc73f84f",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/6a5d3e96c96c0cd5ec9e1ec1e1c4ed42dc73f84f/server/src/com/cloud/server/StatsCollector.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/StatsCollector.java?ref=6a5d3e96c96c0cd5ec9e1ec1e1c4ed42dc73f84f",
                "deletions": 1,
                "filename": "server/src/com/cloud/server/StatsCollector.java",
                "patch": "@@ -343,7 +343,9 @@ protected void runInContext() {\n                 }\n                 for (HostVO host : gpuEnabledHosts) {\n                     HashMap<String, HashMap<String, Long>> groupDetails = _resourceMgr.getGPUStatistics(host);\n-                    _resourceMgr.updateGPUDetails(host.getId(), groupDetails);\n+                    if (groupDetails != null) {\n+                        _resourceMgr.updateGPUDetails(host.getId(), groupDetails);\n+                    }\n                 }\n                 hostIds = _hostGpuGroupsDao.listHostIds();\n             } catch (Throwable t) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/6a5d3e96c96c0cd5ec9e1ec1e1c4ed42dc73f84f/server/src/com/cloud/server/StatsCollector.java",
                "sha": "50aa93cd5ee424395314c4db57b69742396c3db7",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-6238: NPE in HostStatsCollector.",
        "parent": "https://github.com/apache/cloudstack/commit/286974488eab03efddfea35962161a224e997ab0",
        "repo": "cloudstack",
        "unit_tests": [
            "StatsCollectorTest.java"
        ]
    },
    "cloudstack_6a7fd4d": {
        "bug_id": "cloudstack_6a7fd4d",
        "commit": "https://github.com/apache/cloudstack/commit/6a7fd4d96c01a25220fffde74be0de226d39ac20",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/6a7fd4d96c01a25220fffde74be0de226d39ac20/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java?ref=6a7fd4d96c01a25220fffde74be0de226d39ac20",
                "deletions": 3,
                "filename": "server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "patch": "@@ -24,6 +24,7 @@\n import java.util.Date;\n import java.util.HashMap;\n import java.util.HashSet;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -1340,7 +1341,10 @@ private HypervisorType getClusterToStartDomainRouterForOvm(long podId) {\n                 \n                 int allocateRetry = 0;\n                 int startRetry = 0;\n-                for (HypervisorType hType : supportedHypervisors) {\n+                \n+                \n+                for (Iterator<HypervisorType> iter = supportedHypervisors.iterator();iter.hasNext();) {\n+                    HypervisorType hType = iter.next();\n                     try {\n                         s_logger.debug(\"Allocating the domR with the hypervisor type \" + hType);\n                         VMTemplateVO template = _templateDao.findRoutingTemplate(hType);\n@@ -1361,7 +1365,7 @@ private HypervisorType getClusterToStartDomainRouterForOvm(long podId) {\n                         router.setRole(Role.VIRTUAL_ROUTER);\n                         router = _itMgr.allocate(router, template, routerOffering, networks, plan, null, owner);\n                     } catch (InsufficientCapacityException ex) {\n-                        if (allocateRetry < 2) {\n+                        if (allocateRetry < 2 && iter.hasNext()) {\n                             s_logger.debug(\"Failed to allocate the domR with hypervisor type \" + hType + \", retrying one more time\");\n                             continue;\n                         } else {\n@@ -1375,7 +1379,7 @@ private HypervisorType getClusterToStartDomainRouterForOvm(long podId) {\n                         router = startVirtualRouter(router, _accountMgr.getSystemUser(), _accountMgr.getSystemAccount(), params);\n                         break;\n                     } catch (InsufficientCapacityException ex) {\n-                        if (startRetry < 2) {\n+                        if (startRetry < 2 && iter.hasNext()) {\n                             s_logger.debug(\"Failed to start the domR  \" + router + \" with hypervisor type \" + hType + \", destroying it and recreating one more time\");\n                             //destroy the router\n                             destroyRouter(router.getId());",
                "raw_url": "https://github.com/apache/cloudstack/raw/6a7fd4d96c01a25220fffde74be0de226d39ac20/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "sha": "4fde78c1b54fab58e4d7d957323d6a2a2f6572eb",
                "status": "modified"
            }
        ],
        "message": "Bug 13248 - NPE: DeployVMCmd fired during 2.2.x regression test on Acton build\n\nChanges:\n- After deployment of Router failed, we did not throw out the error inorder to retry the start using another hypervisorType.\n- But there is no other hypervisor to try, causing the failed and expunged router to be passed on further leading to an NPE later\n- So in case there are no more hypervisors to retry the router start, we should throw out the original error.",
        "parent": "https://github.com/apache/cloudstack/commit/e87e30bc3d57ba0a94ac9d83fb87bcbdc58ababf",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualNetworkApplianceManagerImplTest.java"
        ]
    },
    "cloudstack_6b79945": {
        "bug_id": "cloudstack_6b79945",
        "commit": "https://github.com/apache/cloudstack/commit/6b7994512d77f235296fa05baa0ba4a82897165a",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cloudstack/blob/6b7994512d77f235296fa05baa0ba4a82897165a/api/src/com/cloud/storage/StoragePool.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/storage/StoragePool.java?ref=6b7994512d77f235296fa05baa0ba4a82897165a",
                "deletions": 5,
                "filename": "api/src/com/cloud/storage/StoragePool.java",
                "patch": "@@ -18,6 +18,7 @@\n \n import java.util.Date;\n \n+import com.cloud.hypervisor.Hypervisor;\n import org.apache.cloudstack.api.Identity;\n import org.apache.cloudstack.api.InternalIdentity;\n \n@@ -98,10 +99,13 @@\n \n     Long getPodId();\n \n-    /**\n-     * @return\n-     */\n-    String getStorageProviderName();\n+\t/**\n+\t * @return\n+\t */\n+\tString getStorageProviderName();\n+\t\n+\tboolean isInMaintenance();\n+\n+    Hypervisor.HypervisorType getHypervisor();\n \n-    boolean isInMaintenance();\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/6b7994512d77f235296fa05baa0ba4a82897165a/api/src/com/cloud/storage/StoragePool.java",
                "sha": "7d541623256125a7d739c159413c6c997bf3ad5d",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/6b7994512d77f235296fa05baa0ba4a82897165a/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/UserVmManagerImpl.java?ref=6b7994512d77f235296fa05baa0ba4a82897165a",
                "deletions": 1,
                "filename": "server/src/com/cloud/vm/UserVmManagerImpl.java",
                "patch": "@@ -35,6 +35,7 @@\n import javax.inject.Inject;\n import javax.naming.ConfigurationException;\n \n+\n import org.apache.commons.codec.binary.Base64;\n import org.apache.log4j.Logger;\n \n@@ -3731,7 +3732,12 @@ public VirtualMachine vmStorageMigration(Long vmId, StoragePool destPool) {\n             throw new InvalidParameterValueException(\"Data disks attached to the vm, can not migrate. Need to dettach data disks at first\");\n         }\n \n-        HypervisorType destHypervisorType = _clusterDao.findById(destPool.getClusterId()).getHypervisorType();\n+        HypervisorType destHypervisorType = destPool.getHypervisor();\n+        if (destHypervisorType == null) {\n+            destHypervisorType = _clusterDao.findById(\n+                destPool.getClusterId()).getHypervisorType();\n+        }\n+\n         if (vm.getHypervisorType() != destHypervisorType) {\n             throw new InvalidParameterValueException(\"hypervisor is not compatible: dest: \" + destHypervisorType.toString() + \", vm: \" + vm.getHypervisorType().toString());\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/6b7994512d77f235296fa05baa0ba4a82897165a/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "sha": "741b21c640fdef3a2beae2504c53fd6c5f074109",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-5329: fix NPE, in case of zone wide primary storage\n\nConflicts:\n\n\tapi/src/com/cloud/storage/StoragePool.java\n\tserver/src/com/cloud/vm/UserVmManagerImpl.java",
        "parent": "https://github.com/apache/cloudstack/commit/a1762a6e7e716a205c6e4eab1b20b8ebeb9caff6",
        "repo": "cloudstack",
        "unit_tests": [
            "UserVmManagerImplTest.java"
        ]
    },
    "cloudstack_6cf0c56": {
        "bug_id": "cloudstack_6cf0c56",
        "commit": "https://github.com/apache/cloudstack/commit/6cf0c5683d518bd6dcd6c51bfa0290e96c6804f3",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/6cf0c5683d518bd6dcd6c51bfa0290e96c6804f3/plugins/network-elements/nicira-nvp/src/com/cloud/network/element/NiciraNvpElement.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nicira-nvp/src/com/cloud/network/element/NiciraNvpElement.java?ref=6cf0c5683d518bd6dcd6c51bfa0290e96c6804f3",
                "deletions": 1,
                "filename": "plugins/network-elements/nicira-nvp/src/com/cloud/network/element/NiciraNvpElement.java",
                "patch": "@@ -173,7 +173,7 @@ public Provider getProvider() {\n \t\treturn Provider.NiciraNvp;\n \t}\n \n-\tprivate boolean canHandle(Network network, Service service) {\n+\tprotected boolean canHandle(Network network, Service service) {\n \t\ts_logger.debug(\"Checking if NiciraNvpElement can handle service \"\n \t\t\t\t+ service.getName() + \" on network \" + network.getDisplayText());\n \t\tif (network.getBroadcastDomainType() != BroadcastDomainType.Lswitch) {\n@@ -845,6 +845,7 @@ public boolean applyIps(Network network,\n \t\t\tConfigurePublicIpsOnLogicalRouterCommand cmd = new ConfigurePublicIpsOnLogicalRouterCommand(routermapping.getLogicalRouterUuid(), \n \t\t\t\t\tniciraNvpHost.getDetail(\"l3gatewayserviceuuid\"), cidrs);\n \t\t\tConfigurePublicIpsOnLogicalRouterAnswer answer = (ConfigurePublicIpsOnLogicalRouterAnswer) _agentMgr.easySend(niciraNvpHost.getId(), cmd);\n+\t\t\t//FIXME answer can be null if the host is down\n \t\t\treturn answer.getResult();\n \t\t}\n \t\telse {",
                "raw_url": "https://github.com/apache/cloudstack/raw/6cf0c5683d518bd6dcd6c51bfa0290e96c6804f3/plugins/network-elements/nicira-nvp/src/com/cloud/network/element/NiciraNvpElement.java",
                "sha": "0a7d042a96d7b4debb79f230946732232d544d80",
                "status": "modified"
            }
        ],
        "message": "Summary: Make canHandle protected\n\nChange access to canHandle so it's easier to unittest. \n\nMake a note that answers can be null if the host is down, there should\nbe a way to deal with this, but for now an NPE is an adequate indication\nthat something is wrong.",
        "parent": "https://github.com/apache/cloudstack/commit/9122809e00949230cb18211c3a3af0a44f57fd28",
        "repo": "cloudstack",
        "unit_tests": [
            "NiciraNvpElementTest.java"
        ]
    },
    "cloudstack_6e63f10": {
        "bug_id": "cloudstack_6e63f10",
        "commit": "https://github.com/apache/cloudstack/commit/6e63f10a4f4f77c1b57f1e804b44445a443c6b75",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/6e63f10a4f4f77c1b57f1e804b44445a443c6b75/plugins/storage/volume/default/src/org/apache/cloudstack/storage/datastore/lifecycle/CloudStackPrimaryDataStoreLifeCycleImpl.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/storage/volume/default/src/org/apache/cloudstack/storage/datastore/lifecycle/CloudStackPrimaryDataStoreLifeCycleImpl.java?ref=6e63f10a4f4f77c1b57f1e804b44445a443c6b75",
                "deletions": 0,
                "filename": "plugins/storage/volume/default/src/org/apache/cloudstack/storage/datastore/lifecycle/CloudStackPrimaryDataStoreLifeCycleImpl.java",
                "patch": "@@ -364,6 +364,7 @@ public boolean attachCluster(DataStore store, ClusterScope scope) {\n         List<HostVO> allHosts = _resourceMgr.listAllUpAndEnabledHosts(Host.Type.Routing, primarystore.getClusterId(),\n                 primarystore.getPodId(), primarystore.getDataCenterId());\n         if (allHosts.isEmpty()) {\n+            primaryDataStoreDao.expunge(primarystore.getId());\n             throw new CloudRuntimeException(\"No host up to associate a storage pool with in cluster \"\n                     + primarystore.getClusterId());\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/6e63f10a4f4f77c1b57f1e804b44445a443c6b75/plugins/storage/volume/default/src/org/apache/cloudstack/storage/datastore/lifecycle/CloudStackPrimaryDataStoreLifeCycleImpl.java",
                "sha": "17e80b843820322dc3eea3e54d645549c409e1f5",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-2510: Getting NPE while executinng listStoragePools API command.",
        "parent": "https://github.com/apache/cloudstack/commit/34c6c023e64a874b06cbd147c23fe04848699b75",
        "repo": "cloudstack",
        "unit_tests": [
            "CloudStackPrimaryDataStoreLifeCycleImplTest.java"
        ]
    },
    "cloudstack_6eacc11": {
        "bug_id": "cloudstack_6eacc11",
        "commit": "https://github.com/apache/cloudstack/commit/6eacc112221265bdbc5acbbd092f9be2ee872daf",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/6eacc112221265bdbc5acbbd092f9be2ee872daf/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=6eacc112221265bdbc5acbbd092f9be2ee872daf",
                "deletions": 1,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -1174,7 +1174,10 @@ public SystemVmResponse createSystemVmResponse(VirtualMachine vm) {\n             // for console proxies, add the active sessions\n             if (vm.getType() == Type.ConsoleProxy) {\n                 ConsoleProxyVO proxy = ApiDBUtils.findConsoleProxy(vm.getId());\n-                vmResponse.setActiveViewerSessions(proxy.getActiveSession());\n+                //proxy can be already destroyed\n+                if (proxy != null) {\n+                    vmResponse.setActiveViewerSessions(proxy.getActiveSession());\n+                } \n             }\n \n             DataCenter zone = ApiDBUtils.findZoneById(vm.getDataCenterIdToDeployIn());",
                "raw_url": "https://github.com/apache/cloudstack/raw/6eacc112221265bdbc5acbbd092f9be2ee872daf/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "0fb45aa819f9bd6809faf5c7716efbbc2fd4f808",
                "status": "modified"
            }
        ],
        "message": "bug 10994: Fixed NPE in destroySystemVm api\nstatus 10994: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/ee6236125070bd41e24665fb9918d3a85fe7f19a",
        "repo": "cloudstack",
        "unit_tests": [
            "ApiResponseHelperTest.java"
        ]
    },
    "cloudstack_6f98fcd": {
        "bug_id": "cloudstack_6f98fcd",
        "commit": "https://github.com/apache/cloudstack/commit/6f98fcd3a5b1b498a9c1f53e85522282b1cc2b28",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/6f98fcd3a5b1b498a9c1f53e85522282b1cc2b28/server/src/com/cloud/template/TemplateManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/template/TemplateManagerImpl.java?ref=6f98fcd3a5b1b498a9c1f53e85522282b1cc2b28",
                "deletions": 1,
                "filename": "server/src/com/cloud/template/TemplateManagerImpl.java",
                "patch": "@@ -1740,7 +1740,7 @@ public VMTemplateVO createPrivateTemplateRecord(CreateTemplateCmd cmd, Account t\n \n             if (sourceTemplateId != null) {\n                 VMTemplateVO sourceTemplate = _tmpltDao.findById(sourceTemplateId);\n-                if(sourceTemplate != null){\n+                if (sourceTemplate != null && sourceTemplate.getDetails() != null) {\n                     details.putAll(sourceTemplate.getDetails());\n                 }\n             }",
                "raw_url": "https://github.com/apache/cloudstack/raw/6f98fcd3a5b1b498a9c1f53e85522282b1cc2b28/server/src/com/cloud/template/TemplateManagerImpl.java",
                "sha": "7130042bc5c8153324989d7a956fb46ce8a3bfe0",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-9688: Fix failing smoke tests\n\nFixes failing smoke tests due to enviroment issues or corner cases:\n- Fixes NPE in Template Manager\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/5e19e64f2f24d90d8f15d30b82d2a066061425a7",
        "repo": "cloudstack",
        "unit_tests": [
            "TemplateManagerImplTest.java"
        ]
    },
    "cloudstack_7089e1c": {
        "bug_id": "cloudstack_7089e1c",
        "commit": "https://github.com/apache/cloudstack/commit/7089e1ce44151702f36a8135e3b74752631a1894",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/7089e1ce44151702f36a8135e3b74752631a1894/server/src/com/cloud/storage/StorageManagerImpl.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/StorageManagerImpl.java?ref=7089e1ce44151702f36a8135e3b74752631a1894",
                "deletions": 2,
                "filename": "server/src/com/cloud/storage/StorageManagerImpl.java",
                "patch": "@@ -1499,11 +1499,15 @@ public boolean storagePoolHasEnoughIops(List<Volume> requestedVolumes,\n         if (requestedVolumes == null || requestedVolumes.isEmpty() || pool == null) {\n             return false;\n         }\n-\n+        // Only Solidfire type primary storage is using/setting Iops.\n+        // This check will fix to return the storage has enough Iops when capacityIops is set to NULL for any PS Storage provider\n+        if (pool.getCapacityIops() == null ) {\n+            return true;\n+        }\n         long currentIops = 0;\n-\n         List<VolumeVO> volumesInPool = _volumeDao.findByPoolId(pool.getId(), null);\n \n+\n         for (VolumeVO volumeInPool : volumesInPool) {\n             Long minIops = volumeInPool.getMinIops();\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/7089e1ce44151702f36a8135e3b74752631a1894/server/src/com/cloud/storage/StorageManagerImpl.java",
                "sha": "7378708a420432ecacc27bf026fd30fbe2816324",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-3301 NPE wile deployVM in kvm Only solidfire type PS is setting/using the capacityIops, This check will fix to return the storage has enough Iops when capacityIops is set to NULL for any PS Storage provider",
        "parent": "https://github.com/apache/cloudstack/commit/7eb3d49e8e0a9b247ea974cad744803420982eda",
        "repo": "cloudstack",
        "unit_tests": [
            "StorageManagerImplTest.java"
        ]
    },
    "cloudstack_7120c1e": {
        "bug_id": "cloudstack_7120c1e",
        "commit": "https://github.com/apache/cloudstack/commit/7120c1eb975cdee4b861f904c6bd9dcd379c2a7c",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/cloudstack/blob/7120c1eb975cdee4b861f904c6bd9dcd379c2a7c/plugins/hypervisors/xen/src/com/cloud/hypervisor/xen/resource/XenServer56FP1Resource.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/xen/src/com/cloud/hypervisor/xen/resource/XenServer56FP1Resource.java?ref=7120c1eb975cdee4b861f904c6bd9dcd379c2a7c",
                "deletions": 12,
                "filename": "plugins/hypervisors/xen/src/com/cloud/hypervisor/xen/resource/XenServer56FP1Resource.java",
                "patch": "@@ -169,7 +169,6 @@ protected VM createVmFromTemplate(Connection conn, VirtualMachineTO vmSpec, Host\n         vmr.actionsAfterCrash = Types.OnCrashBehaviour.DESTROY;\n         vmr.actionsAfterShutdown = Types.OnNormalExit.DESTROY;\n \n-        Map<String, String> details = vmSpec.getDetails();\n         if (isDmcEnabled(conn, host) && vmSpec.isEnableDynamicallyScaleVm()) {\n             //scaling is allowed\n             vmr.memoryStaticMin = getStaticMin(vmSpec.getOs(), vmSpec.getBootloader() == BootloaderType.CD, vmSpec.getMinRam(), vmSpec.getMaxRam());\n@@ -193,18 +192,21 @@ protected VM createVmFromTemplate(Connection conn, VirtualMachineTO vmSpec, Host\n             vmr.VCPUsMax = 32L;\n         }\n \n-        String timeoffset = details.get(\"timeoffset\");\n-        if (timeoffset != null) {\n-            Map<String, String> platform = vmr.platform;\n-            platform.put(\"timeoffset\", timeoffset);\n-            vmr.platform = platform;\n-        }\n+        Map<String, String> details = vmSpec.getDetails();\n+        if ( details != null ) {\n+            String timeoffset = details.get(\"timeoffset\");\n+            if (timeoffset != null) {\n+                Map<String, String> platform = vmr.platform;\n+                platform.put(\"timeoffset\", timeoffset);\n+                vmr.platform = platform;\n+            }\n \n-        String coresPerSocket = details.get(\"cpu.corespersocket\");\n-        if (coresPerSocket != null) {\n-            Map<String, String> platform = vmr.platform;\n-            platform.put(\"cores-per-socket\", coresPerSocket);\n-            vmr.platform = platform;\n+            String coresPerSocket = details.get(\"cpu.corespersocket\");\n+            if (coresPerSocket != null) {\n+                Map<String, String> platform = vmr.platform;\n+                platform.put(\"cores-per-socket\", coresPerSocket);\n+                vmr.platform = platform;\n+            }            \n         }\n \n         vmr.VCPUsAtStartup = (long) vmSpec.getCpus();",
                "raw_url": "https://github.com/apache/cloudstack/raw/7120c1eb975cdee4b861f904c6bd9dcd379c2a7c/plugins/hypervisors/xen/src/com/cloud/hypervisor/xen/resource/XenServer56FP1Resource.java",
                "sha": "4a9b526766ee4ba973ef2afad0adb7f07487860c",
                "status": "modified"
            }
        ],
        "message": "fixed NPE",
        "parent": "https://github.com/apache/cloudstack/commit/891b85d5168ebe1fe7fa0522e3191c30d3fb01db",
        "repo": "cloudstack",
        "unit_tests": [
            "XenServer56FP1ResourceTest.java"
        ]
    },
    "cloudstack_71a0148": {
        "bug_id": "cloudstack_71a0148",
        "commit": "https://github.com/apache/cloudstack/commit/71a01485657420da5b2a8dc05d11be18bb927494",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/71a01485657420da5b2a8dc05d11be18bb927494/developer/developer-prefill.sql",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/developer/developer-prefill.sql?ref=71a01485657420da5b2a8dc05d11be18bb927494",
                "deletions": 16,
                "filename": "developer/developer-prefill.sql",
                "patch": "@@ -62,22 +62,6 @@ INSERT INTO `cloud`.`configuration` (category, instance, component, name, value)\n             VALUES ('Advanced', 'DEFAULT', 'management-server',\n             'expunge.interval', '60');\n \n-INSERT INTO `cloud`.`configuration` (category, instance, component, name, value)\n-            VALUES ('Advanced', 'DEFAULT', 'management-server',\n-            'cluster.cpu.allocated.capacity.disablethreshold', '0.95');\n-\n-INSERT INTO `cloud`.`configuration` (category, instance, component, name, value)\n-            VALUES ('Advanced', 'DEFAULT', 'management-server',\n-            'cluster.memory.allocated.capacity.disablethreshold ', '0.95');\n-\n-INSERT INTO `cloud`.`configuration` (category, instance, component, name, value)\n-            VALUES ('Advanced', 'DEFAULT', 'management-server',\n-            'pool.storage.allocated.capacity.disablethreshold ', '0.95');\n-\n-INSERT INTO `cloud`.`configuration` (category, instance, component, name, value)\n-            VALUES ('Advanced', 'DEFAULT', 'management-server',\n-            'pool.storage.capacity.disablethreshold ', '0.95');\n-\n -- Add developer configuration entry; allows management server to be run as a user other than \"cloud\"\n INSERT INTO `cloud`.`configuration` (category, instance, component, name, value)\n             VALUES ('Advanced', 'DEFAULT', 'management-server',",
                "raw_url": "https://github.com/apache/cloudstack/raw/71a01485657420da5b2a8dc05d11be18bb927494/developer/developer-prefill.sql",
                "sha": "89d9c7ebe28402f53b3dd5f10d852107ae6711af",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cloudstack/blob/71a01485657420da5b2a8dc05d11be18bb927494/server/src/com/cloud/server/ManagementServerImpl.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/ManagementServerImpl.java?ref=71a01485657420da5b2a8dc05d11be18bb927494",
                "deletions": 3,
                "filename": "server/src/com/cloud/server/ManagementServerImpl.java",
                "patch": "@@ -1709,9 +1709,18 @@ private boolean hasSuitablePoolsForVolume(VolumeVO volume, Host host, VirtualMac\n             List<ConfigurationVO> configVOList = new ArrayList<ConfigurationVO>();\n             for (ConfigurationVO param : result.first()) {\n                 ConfigurationVO configVo = _configDao.findByName(param.getName());\n-                configVo.setValue(_configDepot.get(param.getName()).valueIn(id).toString());\n-                configVOList.add(configVo);\n-    }\n+                if (configVo != null) {\n+                    ConfigKey<?> key = _configDepot.get(param.getName());\n+                    if (key != null) {\n+                        configVo.setValue(key.valueIn(id).toString());\n+                        configVOList.add(configVo);\n+                    } else {\n+                        s_logger.warn(\"ConfigDepot could not find parameter \" + param.getName() + \" for scope \" + scope);\n+                    }\n+                } else {\n+                    s_logger.warn(\"Configuration item  \" + param.getName() + \" not found in \" + scope);\n+                }\n+            }\n \n             return new Pair<List<? extends Configuration>, Integer>(configVOList, configVOList.size());\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/71a01485657420da5b2a8dc05d11be18bb927494/server/src/com/cloud/server/ManagementServerImpl.java",
                "sha": "e61a9f42dc082f74dcc29db8abef24de557380e2",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-7219: Fix NPE, log warning when config item is missing from scope\n\n- Cherry picked from Daan's fix 63fbd16dd11388bd93cdbec4ea7fe6de37aa7fc5\n- Added another check if configDepot returned null\n- Removed developer prefill values\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n(cherry picked from commit 188924751ed87a01541a094e03e958cd8d01653b)\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/3fddfe0e1081e505ad270439658729ca0d4486cf",
        "repo": "cloudstack",
        "unit_tests": [
            "ManagementServerImplTest.java"
        ]
    },
    "cloudstack_71b8f60": {
        "bug_id": "cloudstack_71b8f60",
        "commit": "https://github.com/apache/cloudstack/commit/71b8f6061f187d9b8fb555731c051bc9f074d430",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/71b8f6061f187d9b8fb555731c051bc9f074d430/patches/systemvm/debian/config/etc/init.d/cloud-early-config",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/patches/systemvm/debian/config/etc/init.d/cloud-early-config?ref=71b8f6061f187d9b8fb555731c051bc9f074d430",
                "deletions": 4,
                "filename": "patches/systemvm/debian/config/etc/init.d/cloud-early-config",
                "patch": "@@ -196,6 +196,7 @@ patch() {\n \n patch_log4j() {\n log_it \"Updating log4j-cloud.xml\"\n+mkdir -p /usr/local/cloud/systemvm/conf\n cat << \"EOF\" > /usr/local/cloud/systemvm/conf/temp.xml\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n@@ -936,10 +937,6 @@ setup_router() {\n setup_vpcrouter() {\n   log_it \"Setting up VPC virtual router system vm\"\n \n-  if [ \"$hyp\" == \"vmware\" ]; then\n-    setup_vmware_extra_nics\n-  fi\n-\n   if [ -f /etc/hosts ]; then\n     grep -q $NAME /etc/hosts || echo \"127.0.0.1 $NAME\" >> /etc/hosts;\n   fi\n@@ -984,6 +981,11 @@ EOF\n      if [ \"$hyp\" == \"vmware\" ]\n      then\n          ip route add $MGMTNET via $LOCAL_GW dev eth0\n+         \n+          # a hacking way to activate vSwitch under VMware\n+         ping -n -c 3 $LOCAL_GW &\n+         sleep 3\n+         pkill ping\n      fi\n   fi\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/71b8f6061f187d9b8fb555731c051bc9f074d430/patches/systemvm/debian/config/etc/init.d/cloud-early-config",
                "sha": "88ecc119b61874db5ca026e97a86db1f2533904c",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/71b8f6061f187d9b8fb555731c051bc9f074d430/server/src/com/cloud/agent/manager/DirectAgentAttache.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/agent/manager/DirectAgentAttache.java?ref=71b8f6061f187d9b8fb555731c051bc9f074d430",
                "deletions": 0,
                "filename": "server/src/com/cloud/agent/manager/DirectAgentAttache.java",
                "patch": "@@ -184,6 +184,10 @@ public void run() {\n                     try {\n                         if (resource != null) {\n                             answer = resource.executeRequest(cmds[i]);\n+                            if(answer == null) {\n+                            \ts_logger.warn(\"Resource returned null answer!\");\n+                                answer = new Answer(cmds[i], false, \"Resource returned null answer\");\n+                            }\n                         } else {\n                             answer = new Answer(cmds[i], false, \"Agent is disconnected\");\n                         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/71b8f6061f187d9b8fb555731c051bc9f074d430/server/src/com/cloud/agent/manager/DirectAgentAttache.java",
                "sha": "5b5d8d212894f2aabbbe3d7aff07f980ff66f1b2",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-4376: fix cloud-early-config to workaround vSwitch stall in VPC mode. fix potential NPE in DirectAgentAttache in processing answers from resource",
        "parent": "https://github.com/apache/cloudstack/commit/c528e71fec9f81c9475a8ae427ef95e9550909ad",
        "repo": "cloudstack",
        "unit_tests": [
            "DirectAgentAttacheTest.java"
        ]
    },
    "cloudstack_737edd9": {
        "bug_id": "cloudstack_737edd9",
        "commit": "https://github.com/apache/cloudstack/commit/737edd90dc253789e442634b389ca5db835ee6e0",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/737edd90dc253789e442634b389ca5db835ee6e0/api/src/org/apache/cloudstack/api/command/admin/network/UpdatePhysicalNetworkCmd.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/command/admin/network/UpdatePhysicalNetworkCmd.java?ref=737edd90dc253789e442634b389ca5db835ee6e0",
                "deletions": 3,
                "filename": "api/src/org/apache/cloudstack/api/command/admin/network/UpdatePhysicalNetworkCmd.java",
                "patch": "@@ -97,9 +97,11 @@ public long getEntityOwnerId() {\n     @Override\n     public void execute() {\n         PhysicalNetwork result = _networkService.updatePhysicalNetwork(getId(), getNetworkSpeed(), getTags(), getVlan(), getState());\n-        PhysicalNetworkResponse response = _responseGenerator.createPhysicalNetworkResponse(result);\n-        response.setResponseName(getCommandName());\n-        this.setResponseObject(response);\n+        if (result != null) {\n+            PhysicalNetworkResponse response = _responseGenerator.createPhysicalNetworkResponse(result);\n+            response.setResponseName(getCommandName());\n+            this.setResponseObject(response);\n+        }\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/cloudstack/raw/737edd90dc253789e442634b389ca5db835ee6e0/api/src/org/apache/cloudstack/api/command/admin/network/UpdatePhysicalNetworkCmd.java",
                "sha": "ed3fa97ce7a965be55b928498467c848f9ef67ea",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/737edd90dc253789e442634b389ca5db835ee6e0/api/src/org/apache/cloudstack/api/command/user/firewall/DeleteFirewallRuleCmd.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/command/user/firewall/DeleteFirewallRuleCmd.java?ref=737edd90dc253789e442634b389ca5db835ee6e0",
                "deletions": 1,
                "filename": "api/src/org/apache/cloudstack/api/command/user/firewall/DeleteFirewallRuleCmd.java",
                "patch": "@@ -113,7 +113,10 @@ public String getSyncObjType() {\n \n     @Override\n     public Long getSyncObjId() {\n-        return _firewallService.getFirewallRule(id).getNetworkId();\n+        FirewallRule fwlrule = _firewallService.getFirewallRule(id);\n+        if (fwlrule != null)\n+            return fwlrule.getNetworkId();\n+        return null;\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/cloudstack/raw/737edd90dc253789e442634b389ca5db835ee6e0/api/src/org/apache/cloudstack/api/command/user/firewall/DeleteFirewallRuleCmd.java",
                "sha": "0f1001246109e2f330db7339e0b1c6bf3833b2d1",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/737edd90dc253789e442634b389ca5db835ee6e0/api/src/org/apache/cloudstack/api/command/user/vpn/UpdateVpnGatewayCmd.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/command/user/vpn/UpdateVpnGatewayCmd.java?ref=737edd90dc253789e442634b389ca5db835ee6e0",
                "deletions": 2,
                "filename": "api/src/org/apache/cloudstack/api/command/user/vpn/UpdateVpnGatewayCmd.java",
                "patch": "@@ -85,8 +85,10 @@ public String getEventType() {\n     @Override\n     public void execute() {\n         Site2SiteVpnGateway result = _s2sVpnService.updateVpnGateway(id, this.getCustomId(), getDisplay());\n-        Site2SiteVpnGatewayResponse response = _responseGenerator.createSite2SiteVpnGatewayResponse(result);\n-        response.setResponseName(getCommandName());\n+        if (result != null) {\n+            Site2SiteVpnGatewayResponse response = _responseGenerator.createSite2SiteVpnGatewayResponse(result);\n+            response.setResponseName(getCommandName());\n+        }\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/cloudstack/raw/737edd90dc253789e442634b389ca5db835ee6e0/api/src/org/apache/cloudstack/api/command/user/vpn/UpdateVpnGatewayCmd.java",
                "sha": "bbe820a83c44a688dd782f249b6ebcd78715731d",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/cloudstack/blob/737edd90dc253789e442634b389ca5db835ee6e0/engine/orchestration/src/com/cloud/agent/manager/ClusteredAgentManagerImpl.java",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/agent/manager/ClusteredAgentManagerImpl.java?ref=737edd90dc253789e442634b389ca5db835ee6e0",
                "deletions": 21,
                "filename": "engine/orchestration/src/com/cloud/agent/manager/ClusteredAgentManagerImpl.java",
                "patch": "@@ -195,35 +195,36 @@ private void scanDirectAgentToLoad() {\n         long cutSeconds = (System.currentTimeMillis() >> 10) - getTimeout();\n         List<HostVO> hosts = _hostDao.findAndUpdateDirectAgentToLoad(cutSeconds, LoadSize.value().longValue(), _nodeId);\n         List<HostVO> appliances = _hostDao.findAndUpdateApplianceToLoad(cutSeconds, _nodeId);\n-        hosts.addAll(appliances);\n \n-        if (hosts != null && hosts.size() > 0) {\n-            s_logger.debug(\"Found \" + hosts.size() + \" unmanaged direct hosts, processing connect for them...\");\n-            for (HostVO host : hosts) {\n-                try {\n-                    AgentAttache agentattache = findAttache(host.getId());\n-                    if (agentattache != null) {\n-                        // already loaded, skip\n-                        if (agentattache.forForward()) {\n-                            if (s_logger.isInfoEnabled()) {\n-                                s_logger.info(host + \" is detected down, but we have a forward attache running, disconnect this one before launching the host\");\n+       if (hosts != null) {\n+            hosts.addAll(appliances);\n+            if (hosts.size() > 0) {\n+                s_logger.debug(\"Found \" + hosts.size() + \" unmanaged direct hosts, processing connect for them...\");\n+                for (HostVO host : hosts) {\n+                    try {\n+                        AgentAttache agentattache = findAttache(host.getId());\n+                        if (agentattache != null) {\n+                            // already loaded, skip\n+                            if (agentattache.forForward()) {\n+                                if (s_logger.isInfoEnabled()) {\n+                                    s_logger.info(host + \" is detected down, but we have a forward attache running, disconnect this one before launching the host\");\n+                                }\n+                                removeAgent(agentattache, Status.Disconnected);\n+                            } else {\n+                                continue;\n                             }\n-                            removeAgent(agentattache, Status.Disconnected);\n-                        } else {\n-                            continue;\n                         }\n-                    }\n \n-                    if (s_logger.isDebugEnabled()) {\n-                        s_logger.debug(\"Loading directly connected host \" + host.getId() + \"(\" + host.getName() + \")\");\n+                        if (s_logger.isDebugEnabled()) {\n+                            s_logger.debug(\"Loading directly connected host \" + host.getId() + \"(\" + host.getName() + \")\");\n+                        }\n+                        loadDirectlyConnectedHost(host, false);\n+                    } catch (Throwable e) {\n+                        s_logger.warn(\" can not load directly connected host \" + host.getId() + \"(\" + host.getName() + \") due to \", e);\n                     }\n-                    loadDirectlyConnectedHost(host, false);\n-                } catch (Throwable e) {\n-                    s_logger.warn(\" can not load directly connected host \" + host.getId() + \"(\" + host.getName() + \") due to \", e);\n                 }\n             }\n         }\n-\n         if (s_logger.isTraceEnabled()) {\n             s_logger.trace(\"End scanning directly connected hosts\");\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/737edd90dc253789e442634b389ca5db835ee6e0/engine/orchestration/src/com/cloud/agent/manager/ClusteredAgentManagerImpl.java",
                "sha": "600dca262fbef86cc2c7137c30b02fd8674ed8fc",
                "status": "modified"
            },
            {
                "additions": 56,
                "blob_url": "https://github.com/apache/cloudstack/blob/737edd90dc253789e442634b389ca5db835ee6e0/framework/db/src/com/cloud/utils/db/GenericDaoBase.java",
                "changes": 122,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/db/src/com/cloud/utils/db/GenericDaoBase.java?ref=737edd90dc253789e442634b389ca5db835ee6e0",
                "deletions": 66,
                "filename": "framework/db/src/com/cloud/utils/db/GenericDaoBase.java",
                "patch": "@@ -1641,81 +1641,71 @@ protected void toEntityBean(final ResultSet result, final T entity) throws SQLEx\n     @SuppressWarnings(\"unchecked\")\n     protected void loadCollection(T entity, Attribute attr) {\n         EcInfo ec = (EcInfo)attr.attache;\n-\n         TransactionLegacy txn = TransactionLegacy.currentTxn();\n-        ResultSet rs = null;\n-        PreparedStatement pstmt = null;\n-        try {\n-            pstmt = txn.prepareStatement(ec.selectSql);\n+        try(PreparedStatement pstmt = txn.prepareStatement(ec.selectSql);)\n+        {\n             pstmt.setObject(1, _idField.get(entity));\n-            rs = pstmt.executeQuery();\n-            ArrayList lst = new ArrayList();\n-            if (ec.targetClass == Integer.class) {\n-                while (rs.next()) {\n-                    lst.add(rs.getInt(1));\n-                }\n-            } else if (ec.targetClass == Long.class) {\n-                while (rs.next()) {\n-                    lst.add(rs.getLong(1));\n-                }\n-            } else if (ec.targetClass == String.class) {\n-                while (rs.next()) {\n-                    lst.add(rs.getString(1));\n-                }\n-            } else if (ec.targetClass == Short.class) {\n-                while (rs.next()) {\n-                    lst.add(rs.getShort(1));\n-                }\n-            } else if (ec.targetClass == Date.class) {\n-                while (rs.next()) {\n-                    lst.add(DateUtil.parseDateString(s_gmtTimeZone, rs.getString(1)));\n+            try(ResultSet rs = pstmt.executeQuery();)\n+            {\n+                ArrayList lst = new ArrayList();\n+                if (ec.targetClass == Integer.class) {\n+                    while (rs.next()) {\n+                        lst.add(rs.getInt(1));\n+                    }\n+                } else if (ec.targetClass == Long.class) {\n+                    while (rs.next()) {\n+                        lst.add(rs.getLong(1));\n+                    }\n+                } else if (ec.targetClass == String.class) {\n+                    while (rs.next()) {\n+                        lst.add(rs.getString(1));\n+                    }\n+                } else if (ec.targetClass == Short.class) {\n+                    while (rs.next()) {\n+                        lst.add(rs.getShort(1));\n+                    }\n+                } else if (ec.targetClass == Date.class) {\n+                    while (rs.next()) {\n+                        lst.add(DateUtil.parseDateString(s_gmtTimeZone, rs.getString(1)));\n+                    }\n+                } else if (ec.targetClass == Boolean.class) {\n+                    while (rs.next()) {\n+                        lst.add(rs.getBoolean(1));\n+                    }\n+                } else {\n+                    assert (false) : \"You'll need to add more classeses\";\n                 }\n-            } else if (ec.targetClass == Boolean.class) {\n-                while (rs.next()) {\n-                    lst.add(rs.getBoolean(1));\n+                if (ec.rawClass == null) {\n+                    Object[] array = (Object[]) Array.newInstance(ec.targetClass);\n+                    lst.toArray(array);\n+                    try {\n+                        attr.field.set(entity, array);\n+                    } catch (IllegalArgumentException e) {\n+                        throw new CloudRuntimeException(\"Come on we screen for this stuff, don't we?\", e);\n+                    } catch (IllegalAccessException e) {\n+                        throw new CloudRuntimeException(\"Come on we screen for this stuff, don't we?\", e);\n+                    }\n+                } else {\n+                    try {\n+                        Collection coll = (Collection) ec.rawClass.newInstance();\n+                        coll.addAll(lst);\n+                        attr.field.set(entity, coll);\n+                    } catch (IllegalAccessException e) {\n+                        throw new CloudRuntimeException(\"Come on we screen for this stuff, don't we?\", e);\n+                    } catch (InstantiationException e) {\n+                        throw new CloudRuntimeException(\"Never should happen\", e);\n+                    }\n                 }\n-            } else {\n-                assert (false) : \"You'll need to add more classeses\";\n             }\n-\n-            if (ec.rawClass == null) {\n-                Object[] array = (Object[])Array.newInstance(ec.targetClass);\n-                lst.toArray(array);\n-                try {\n-                    attr.field.set(entity, array);\n-                } catch (IllegalArgumentException e) {\n-                    throw new CloudRuntimeException(\"Come on we screen for this stuff, don't we?\", e);\n-                } catch (IllegalAccessException e) {\n-                    throw new CloudRuntimeException(\"Come on we screen for this stuff, don't we?\", e);\n-                }\n-            } else {\n-                try {\n-                    Collection coll = (Collection)ec.rawClass.newInstance();\n-                    coll.addAll(lst);\n-                    attr.field.set(entity, coll);\n-                } catch (IllegalAccessException e) {\n-                    throw new CloudRuntimeException(\"Come on we screen for this stuff, don't we?\", e);\n-                } catch (InstantiationException e) {\n-                    throw new CloudRuntimeException(\"Never should happen\", e);\n-                }\n+            catch (SQLException e) {\n+                throw new CloudRuntimeException(\"loadCollection: Exception : \" +e.getMessage(), e);\n             }\n         } catch (SQLException e) {\n-            throw new CloudRuntimeException(\"Error executing \" + pstmt, e);\n+            throw new CloudRuntimeException(\"loadCollection: Exception : \" +e.getMessage(), e);\n         } catch (IllegalArgumentException e) {\n-            throw new CloudRuntimeException(\"Error executing \" + pstmt, e);\n+            throw new CloudRuntimeException(\"loadCollection: Exception : \" +e.getMessage(), e);\n         } catch (IllegalAccessException e) {\n-            throw new CloudRuntimeException(\"Error executing \" + pstmt, e);\n-        } finally {\n-            try {\n-                if (rs != null) {\n-                    rs.close();\n-                }\n-                if (pstmt != null) {\n-                    pstmt.close();\n-                }\n-            } catch (SQLException e) {\n-                s_logger.error(\"Why are we getting an exception at close? \", e);\n-            }\n+            throw new CloudRuntimeException(\"loadCollection: Exception : \" +e.getMessage(), e);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/737edd90dc253789e442634b389ca5db835ee6e0/framework/db/src/com/cloud/utils/db/GenericDaoBase.java",
                "sha": "e75646a79fab4febe15bf62d47ef8db0679e3a49",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/cloudstack/blob/737edd90dc253789e442634b389ca5db835ee6e0/plugins/api/discovery/test/org/apache/cloudstack/discovery/ApiDiscoveryTest.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/api/discovery/test/org/apache/cloudstack/discovery/ApiDiscoveryTest.java?ref=737edd90dc253789e442634b389ca5db835ee6e0",
                "deletions": 10,
                "filename": "plugins/api/discovery/test/org/apache/cloudstack/discovery/ApiDiscoveryTest.java",
                "patch": "@@ -82,21 +82,25 @@ public static void setUp() throws ConfigurationException {\n     @Test\n     public void verifyListSingleApi() throws Exception {\n         ListResponse<ApiDiscoveryResponse> responses = (ListResponse<ApiDiscoveryResponse>)s_discoveryService.listApis(testUser, testApiName);\n-        ApiDiscoveryResponse response = responses.getResponses().get(0);\n-        assertTrue(\"No. of response items should be one\", responses.getCount() == 1);\n-        assertEquals(\"Error in api name\", testApiName, response.getName());\n-        assertEquals(\"Error in api description\", testApiDescription, response.getDescription());\n-        assertEquals(\"Error in api since\", testApiSince, response.getSince());\n-        assertEquals(\"Error in api isAsync\", testApiAsync, response.getAsync());\n+        if (responses != null) {\n+            ApiDiscoveryResponse response = responses.getResponses().get(0);\n+            assertTrue(\"No. of response items should be one\", responses.getCount() == 1);\n+            assertEquals(\"Error in api name\", testApiName, response.getName());\n+            assertEquals(\"Error in api description\", testApiDescription, response.getDescription());\n+            assertEquals(\"Error in api since\", testApiSince, response.getSince());\n+            assertEquals(\"Error in api isAsync\", testApiAsync, response.getAsync());\n+        }\n     }\n \n     @Test\n     public void verifyListApis() throws Exception {\n         ListResponse<ApiDiscoveryResponse> responses = (ListResponse<ApiDiscoveryResponse>)s_discoveryService.listApis(testUser, null);\n-        assertTrue(\"No. of response items > 1\", responses.getCount() == 1);\n-        for (ApiDiscoveryResponse response : responses.getResponses()) {\n-            assertFalse(\"API name is empty\", response.getName().isEmpty());\n-            assertFalse(\"API description is empty\", response.getDescription().isEmpty());\n+        if (responses != null) {\n+            assertTrue(\"No. of response items > 1\", responses.getCount().intValue() == 1);\n+            for (ApiDiscoveryResponse response : responses.getResponses()) {\n+                assertFalse(\"API name is empty\", response.getName().isEmpty());\n+                assertFalse(\"API description is empty\", response.getDescription().isEmpty());\n+            }\n         }\n     }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/737edd90dc253789e442634b389ca5db835ee6e0/plugins/api/discovery/test/org/apache/cloudstack/discovery/ApiDiscoveryTest.java",
                "sha": "49bf5a55dc57bc5057f9b6089ba1a017853f69f1",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/737edd90dc253789e442634b389ca5db835ee6e0/plugins/network-elements/nuage-vsp/src/com/cloud/network/element/NuageVspElement.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/network-elements/nuage-vsp/src/com/cloud/network/element/NuageVspElement.java?ref=737edd90dc253789e442634b389ca5db835ee6e0",
                "deletions": 2,
                "filename": "plugins/network-elements/nuage-vsp/src/com/cloud/network/element/NuageVspElement.java",
                "patch": "@@ -405,13 +405,15 @@ public boolean applyFWRules(Network network, List<? extends FirewallRule> rules)\n \n     @Override\n     public boolean applyNetworkACLs(Network network, List<? extends NetworkACLItem> rules) throws ResourceUnavailableException {\n-        s_logger.debug(\"Handling applyNetworkACLs for network \" + network.getName() + \" with \" + rules.size() + \" Network ACLs\");\n         if (rules == null || rules.isEmpty()) {\n             s_logger.debug(\"No rules to apply. So, delete all the existing ACL in VSP from Subnet with uuid \" + network.getUuid());\n         } else {\n             s_logger.debug(\"New rules has to applied. So, delete all the existing ACL in VSP from Subnet with uuid \" + network.getUuid());\n         }\n-        applyACLRules(network, rules, true);\n+        if (rules != null) {\n+            s_logger.debug(\"Handling applyNetworkACLs for network \" + network.getName() + \" with \" + rules.size() + \" Network ACLs\");\n+            applyACLRules(network, rules, true);\n+        }\n         return true;\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/737edd90dc253789e442634b389ca5db835ee6e0/plugins/network-elements/nuage-vsp/src/com/cloud/network/element/NuageVspElement.java",
                "sha": "e777268e4245c196071d7675a1d7ab97ecdf0b4e",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cloudstack/blob/737edd90dc253789e442634b389ca5db835ee6e0/utils/src/com/cloud/utils/script/Script.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/com/cloud/utils/script/Script.java?ref=737edd90dc253789e442634b389ca5db835ee6e0",
                "deletions": 12,
                "filename": "utils/src/com/cloud/utils/script/Script.java",
                "patch": "@@ -313,19 +313,19 @@ public Task(OutputInterpreter interpreter, BufferedReader reader) {\n \n         @Override\n         public void run() {\n-            done = false;\n-            try {\n-                result = interpreter.interpret(reader);\n-            } catch (IOException ex) {\n-                result = stackTraceAsString(ex);\n-            } catch (Exception ex) {\n-                result = stackTraceAsString(ex);\n-            } finally {\n-                synchronized (this) {\n-                    done = true;\n-                    notifyAll();\n+            synchronized(this) {\n+                done = false;\n+                try {\n+                    result = interpreter.interpret(reader);\n+                } catch (IOException ex) {\n+                    result = stackTraceAsString(ex);\n+                } catch (Exception ex) {\n+                    result = stackTraceAsString(ex);\n+                } finally {\n+                        done = true;\n+                        notifyAll();\n+                        IOUtils.closeQuietly(reader);\n                 }\n-                IOUtils.closeQuietly(reader);\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/737edd90dc253789e442634b389ca5db835ee6e0/utils/src/com/cloud/utils/script/Script.java",
                "sha": "49734ae808a7510984db37b644c7b1b40aec34ec",
                "status": "modified"
            }
        ],
        "message": "Fixed few coverity patches\n\nNPE in delete firewall rules observed, cherry-picking fix from master.\n\n(cherry picked from commit 31a42d2b7a5a9d3dbf10dc680d7e8877ed4e40c6)\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/1bab1d0855f8813a54028aa58715db75d9c06ca0",
        "repo": "cloudstack",
        "unit_tests": [
            "ScriptTest.java"
        ]
    },
    "cloudstack_7795cfd": {
        "bug_id": "cloudstack_7795cfd",
        "commit": "https://github.com/apache/cloudstack/commit/7795cfd75986874f9a947260379a761b0f3bde82",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/7795cfd75986874f9a947260379a761b0f3bde82/utils/src/com/cloud/utils/db/Transaction.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/com/cloud/utils/db/Transaction.java?ref=7795cfd75986874f9a947260379a761b0f3bde82",
                "deletions": 4,
                "filename": "utils/src/com/cloud/utils/db/Transaction.java",
                "patch": "@@ -1006,10 +1006,7 @@ public String toString() {\n \n     public static void initDataSource(String propsFileName) {\n         try {\n-            File dbPropsFile = new File(propsFileName);\n-            if (!dbPropsFile.exists()) {\n-                dbPropsFile = PropertiesUtil.findConfigFile(propsFileName);\n-            }\n+            File dbPropsFile = PropertiesUtil.findConfigFile(propsFileName);\n             final Properties dbProps;\n             if (EncryptionSecretKeyChecker.useEncryption()) {\n                 StandardPBEStringEncryptor encryptor = EncryptionSecretKeyChecker.getEncryptor();\n@@ -1022,6 +1019,9 @@ public static void initDataSource(String propsFileName) {\n             } catch (IOException e) {\n                 s_logger.fatal(\"Unable to load db properties file, pl. check the classpath and file path configuration\", e);\n                 return;\n+            } catch (NullPointerException e) {\n+                s_logger.fatal(\"Unable to load and read db properties file \" + propsFileName + \"Error: \" + e);\n+                return;\n             }\n \n             // FIXME:  If params are missing...default them????",
                "raw_url": "https://github.com/apache/cloudstack/raw/7795cfd75986874f9a947260379a761b0f3bde82/utils/src/com/cloud/utils/db/Transaction.java",
                "sha": "8bc2a04f0979b713d96140e252e4becbaa3ed1c8",
                "status": "modified"
            }
        ],
        "message": "Transaction: Fix NPE while reading db.properties file\n\nHandle NPE while setting up data source in Transaction\n\n- This occured as Transaction is called it would run the following which\n  assumed db.properties file, which may not be in one's classpath;\n\n        // Initialize with assumed db.properties file\n        initDataSource(\"db.properties\");\n- So, while this would be logged in logs, this is ignored for DatabaseCreator's\n  case. In DatabaseCreator we call initDataSource with full path anyway.\n\nSigned-off-by: Rohit Yadav <bhaisaab@apache.org>",
        "parent": "https://github.com/apache/cloudstack/commit/c61156e9651d42295a5dca554af2de73cd442ec7",
        "repo": "cloudstack",
        "unit_tests": [
            "TestTransaction.java"
        ]
    },
    "cloudstack_78849c2": {
        "bug_id": "cloudstack_78849c2",
        "commit": "https://github.com/apache/cloudstack/commit/78849c29593781170534dd6ed47781776ad074d0",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/78849c29593781170534dd6ed47781776ad074d0/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=78849c29593781170534dd6ed47781776ad074d0",
                "deletions": 8,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -822,14 +822,12 @@ public VolumeResponse createVolumeResponse(Volume volume) {\n         Long instanceId = volume.getInstanceId();\n         if (instanceId != null && volume.getState() != Volume.State.Destroy) {\n             VMInstanceVO vm = ApiDBUtils.findVMInstanceById(instanceId);\n-            if (vm != null) {\n-                volResponse.setVirtualMachineId(vm.getId());\n-                volResponse.setVirtualMachineName(vm.getHostName());\n-                UserVm userVm = ApiDBUtils.findUserVmById(vm.getId());\n-                if (userVm != null) {\n-                    volResponse.setVirtualMachineDisplayName(userVm.getDisplayName());\n-                    volResponse.setVirtualMachineState(vm.getState().toString());\n-                }\n+            volResponse.setVirtualMachineId(vm.getId());\n+            volResponse.setVirtualMachineName(vm.getHostName());\n+            UserVm userVm = ApiDBUtils.findUserVmById(vm.getId());\n+            if (userVm != null) {\n+                volResponse.setVirtualMachineDisplayName(userVm.getDisplayName());\n+                volResponse.setVirtualMachineState(vm.getState().toString());\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/78849c29593781170534dd6ed47781776ad074d0/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "37e794ddcd55402292b23a9d97bceae283ea8b89",
                "status": "modified"
            }
        ],
        "message": "Revert \"fix NPE when listvolume if vm got destroyed\"\n\nThis reverts commit 9bdaa9d967a6390cc1655ce7344d5af474890e4c.",
        "parent": "https://github.com/apache/cloudstack/commit/4a3635ee348d245293cdc44219386854e8000dbe",
        "repo": "cloudstack",
        "unit_tests": [
            "ApiResponseHelperTest.java"
        ]
    },
    "cloudstack_7972632": {
        "bug_id": "cloudstack_7972632",
        "commit": "https://github.com/apache/cloudstack/commit/797263265eb3f8e775f40b295c2a96f6467e677d",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/797263265eb3f8e775f40b295c2a96f6467e677d/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=797263265eb3f8e775f40b295c2a96f6467e677d",
                "deletions": 1,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -1176,7 +1176,10 @@ public SystemVmResponse createSystemVmResponse(VirtualMachine vm) {\n             // for console proxies, add the active sessions\n             if (vm.getType() == Type.ConsoleProxy) {\n                 ConsoleProxyVO proxy = ApiDBUtils.findConsoleProxy(vm.getId());\n-                vmResponse.setActiveViewerSessions(proxy.getActiveSession());\n+                //proxy can be already destroyed\n+                if (proxy != null) {\n+                    vmResponse.setActiveViewerSessions(proxy.getActiveSession());\n+                } \n             }\n \n             DataCenter zone = ApiDBUtils.findZoneById(vm.getDataCenterIdToDeployIn());",
                "raw_url": "https://github.com/apache/cloudstack/raw/797263265eb3f8e775f40b295c2a96f6467e677d/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "779319c870c730ec1c87c9264f35923b11f388c7",
                "status": "modified"
            }
        ],
        "message": "bug 10994: Fixed NPE in destroySystemVm api\nstatus 10994: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/7a3edd74d5734d14387888c0fc0fbfe0eee84b9e",
        "repo": "cloudstack",
        "unit_tests": [
            "ApiResponseHelperTest.java"
        ]
    },
    "cloudstack_79f5ece": {
        "bug_id": "cloudstack_79f5ece",
        "commit": "https://github.com/apache/cloudstack/commit/79f5ece7dc6c603ded3ab5faf3eb682960f1f44c",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/79f5ece7dc6c603ded3ab5faf3eb682960f1f44c/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/UserVmManagerImpl.java?ref=79f5ece7dc6c603ded3ab5faf3eb682960f1f44c",
                "deletions": 1,
                "filename": "server/src/com/cloud/vm/UserVmManagerImpl.java",
                "patch": "@@ -2808,7 +2808,7 @@ public UserVm stopVirtualMachine(long vmId, boolean forced) throws ConcurrentOpe\n \n     @Override\n     public void finalizeStop(VirtualMachineProfile<UserVmVO> profile, StopAnswer answer) {\n-        if(\"VM does not exist\".equals(answer.getDetails())){\n+        if(answer != null && \"VM does not exist\".equals(answer.getDetails())){\n             // Stop answer returns true when Vm does not exist.\n             // This is a hack to avoid logging usage events\n             return;",
                "raw_url": "https://github.com/apache/cloudstack/raw/79f5ece7dc6c603ded3ab5faf3eb682960f1f44c/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "sha": "067b638cdfdafad8a1deed1d2b6e75d91fb28f5e",
                "status": "modified"
            }
        ],
        "message": "fix NPE in put primary storage into maintainance mode",
        "parent": "https://github.com/apache/cloudstack/commit/b0d64033693082a66b7607c5659210ffc5d45780",
        "repo": "cloudstack",
        "unit_tests": [
            "UserVmManagerImplTest.java"
        ]
    },
    "cloudstack_7ada4ad": {
        "bug_id": "cloudstack_7ada4ad",
        "commit": "https://github.com/apache/cloudstack/commit/7ada4ad50b683268f4031ff05e9d19d15d2c35f1",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/7ada4ad50b683268f4031ff05e9d19d15d2c35f1/utils/src/com/cloud/utils/net/NetUtils.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/com/cloud/utils/net/NetUtils.java?ref=7ada4ad50b683268f4031ff05e9d19d15d2c35f1",
                "deletions": 1,
                "filename": "utils/src/com/cloud/utils/net/NetUtils.java",
                "patch": "@@ -191,7 +191,12 @@ public static String getDefaultHostIp() {\n                 return null;\n             }\n \n-            String[] info = NetUtils.getNetworkParams(nic);\n+            String[] info = null;\n+            try {\n+                info = NetUtils.getNetworkParams(nic);\n+            } catch (NullPointerException ignored) {\n+                s_logger.debug(\"Caught NullPointerException when trying to getDefaultHostIp\");\n+            }\n             if (info != null) {\n                 return info[0];\n             }",
                "raw_url": "https://github.com/apache/cloudstack/raw/7ada4ad50b683268f4031ff05e9d19d15d2c35f1/utils/src/com/cloud/utils/net/NetUtils.java",
                "sha": "016ad470d0b013b5911a505fb48c67aea0b7d0eb",
                "status": "modified"
            }
        ],
        "message": "NetUtils: Check for NPE in getDefaultHostIp method when processing nic/mac\n\nOn hosts or containers where they don't have valid mac address on nic resulting\nin null, NetUtils.getNetworkParam can throw NPE.\n\nThis was a case found on TravisCI where OpenVZ containers are used. This method\n(getDefaultHostIp) is used at several other places within the ACS codebase to\nget the host IP and if null is caught we fallback to localhost or 127.0.0.1, so\nwe therefore set info to null before trying to process network param and if we\nfail we return null and expect other layers to use localhost.\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/e3b3a18aefb8364543cb162a289dabd3ff8293a5",
        "repo": "cloudstack",
        "unit_tests": [
            "NetUtilsTest.java"
        ]
    },
    "cloudstack_7c58c37": {
        "bug_id": "cloudstack_7c58c37",
        "commit": "https://github.com/apache/cloudstack/commit/7c58c37f08cca55ab7ea5a37031a91e9d84b693a",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/7c58c37f08cca55ab7ea5a37031a91e9d84b693a/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java?ref=7c58c37f08cca55ab7ea5a37031a91e9d84b693a",
                "deletions": 0,
                "filename": "engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "patch": "@@ -1351,6 +1351,8 @@ public NicProfile prepareNic(final VirtualMachineProfile vmProfile, final Deploy\n             nic.setIPv4Address(profile.getIPv4Address());\n             nic.setAddressFormat(profile.getFormat());\n             nic.setIPv6Address(profile.getIPv6Address());\n+            nic.setIPv6Cidr(profile.getIPv6Cidr());\n+            nic.setIPv6Gateway(profile.getIPv6Gateway());\n             nic.setMacAddress(profile.getMacAddress());\n             nic.setIsolationUri(profile.getIsolationUri());\n             nic.setBroadcastUri(profile.getBroadCastUri());",
                "raw_url": "https://github.com/apache/cloudstack/raw/7c58c37f08cca55ab7ea5a37031a91e9d84b693a/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "sha": "c4c344dddcc20c1fabc28a7a9d978c8167c9e142",
                "status": "modified"
            }
        ],
        "message": "ipv6: Set IPv6 CIDR and Gateway in 'nic' profile\n\nWithout this information a NPE might be triggered when starting a VR, SSVM or CP\nas this information is read from the 'nics' table and causes a NPE.\n\nDuring deployment we should set the IPv6 Gateway and CIDR for the NIC object so that\nit is persisted to the database.\n\nSigned-off-by: Wido den Hollander <wido@widodh.nl>\n(cherry picked from commit f661b631a13ba7f0c501eb5d1915eab3d097a37e)\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/c2060987830ab14ba92e2dd9fc66fb5a56c5fed3",
        "repo": "cloudstack",
        "unit_tests": [
            "NetworkOrchestratorTest.java"
        ]
    },
    "cloudstack_7cc82db": {
        "bug_id": "cloudstack_7cc82db",
        "commit": "https://github.com/apache/cloudstack/commit/7cc82db345b341f4be3695dfd2406169fedba2c1",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/7cc82db345b341f4be3695dfd2406169fedba2c1/plugins/storage/volume/default/src/org/apache/cloudstack/storage/datastore/lifecycle/CloudStackPrimaryDataStoreLifeCycleImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/storage/volume/default/src/org/apache/cloudstack/storage/datastore/lifecycle/CloudStackPrimaryDataStoreLifeCycleImpl.java?ref=7cc82db345b341f4be3695dfd2406169fedba2c1",
                "deletions": 2,
                "filename": "plugins/storage/volume/default/src/org/apache/cloudstack/storage/datastore/lifecycle/CloudStackPrimaryDataStoreLifeCycleImpl.java",
                "patch": "@@ -532,8 +532,7 @@ public boolean deleteDataStore(DataStore store) {\n             throw new CloudRuntimeException(\"Failed to delete storage pool on host\");\n         }\n         \n-        this.dataStoreHelper.deletePrimaryDataStore(store);\n-        return false;\n+        return this.dataStoreHelper.deletePrimaryDataStore(store);\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/cloudstack/raw/7cc82db345b341f4be3695dfd2406169fedba2c1/plugins/storage/volume/default/src/org/apache/cloudstack/storage/datastore/lifecycle/CloudStackPrimaryDataStoreLifeCycleImpl.java",
                "sha": "a0c991b5ad6be9aac7275aa3b41c26c8f7f53d52",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/7cc82db345b341f4be3695dfd2406169fedba2c1/server/src/com/cloud/storage/StorageManagerImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/StorageManagerImpl.java?ref=7cc82db345b341f4be3695dfd2406169fedba2c1",
                "deletions": 3,
                "filename": "server/src/com/cloud/storage/StorageManagerImpl.java",
                "patch": "@@ -963,9 +963,7 @@ public boolean deletePool(DeletePoolCmd cmd) {\n         DataStoreLifeCycle lifeCycle = storeProvider.getDataStoreLifeCycle();\n         DataStore store = dataStoreMgr.getDataStore(\n                 sPool.getId(), DataStoreRole.Primary);\n-        lifeCycle.deleteDataStore(store);\n-\n-        return false;\n+        return lifeCycle.deleteDataStore(store);\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/cloudstack/raw/7cc82db345b341f4be3695dfd2406169fedba2c1/server/src/com/cloud/storage/StorageManagerImpl.java",
                "sha": "a182e39dd86e1e88455e0a97b8ccac314945f754",
                "status": "modified"
            }
        ],
        "message": "Fix CLOUDSTACK-2062 NPE while deleting the primary storage[Added with scope=cluster]",
        "parent": "https://github.com/apache/cloudstack/commit/167781ec0184f1332c0b45ca599f460d7d7b5c92",
        "repo": "cloudstack",
        "unit_tests": [
            "StorageManagerImplTest.java"
        ]
    },
    "cloudstack_7ea8c5f": {
        "bug_id": "cloudstack_7ea8c5f",
        "commit": "https://github.com/apache/cloudstack/commit/7ea8c5fd9a19b9f34158e2ab8db840967db6663d",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/7ea8c5fd9a19b9f34158e2ab8db840967db6663d/api/src/org/apache/cloudstack/api/command/admin/storage/CreateStoragePoolCmd.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/command/admin/storage/CreateStoragePoolCmd.java?ref=7ea8c5fd9a19b9f34158e2ab8db840967db6663d",
                "deletions": 0,
                "filename": "api/src/org/apache/cloudstack/api/command/admin/storage/CreateStoragePoolCmd.java",
                "patch": "@@ -182,6 +182,8 @@ public void execute(){\n         } catch (UnknownHostException ex3) {\n             s_logger.warn(\"Exception: \", ex3);\n             throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex3.getMessage());\n+        } catch (Exception ex4) {\n+            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex4.getMessage());\n         }\n     }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/7ea8c5fd9a19b9f34158e2ab8db840967db6663d/api/src/org/apache/cloudstack/api/command/admin/storage/CreateStoragePoolCmd.java",
                "sha": "c26d1991f61cb58411cb69503e2976819fea5801",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cloudstack/blob/7ea8c5fd9a19b9f34158e2ab8db840967db6663d/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/storage/LibvirtStorageAdaptor.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/storage/LibvirtStorageAdaptor.java?ref=7ea8c5fd9a19b9f34158e2ab8db840967db6663d",
                "deletions": 2,
                "filename": "plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/storage/LibvirtStorageAdaptor.java",
                "patch": "@@ -128,7 +128,7 @@ public void storagePoolRefresh(StoragePool pool) {\n     }\n \n     private StoragePool createNfsStoragePool(Connect conn, String uuid,\n-            String host, String path) {\n+            String host, String path) throws LibvirtException {\n         String targetPath = _mountPoint + File.separator + uuid;\n         LibvirtStoragePoolDef spd = new LibvirtStoragePoolDef(poolType.NETFS,\n                 uuid, uuid, host, path, targetPath);\n@@ -156,6 +156,9 @@ private StoragePool createNfsStoragePool(Connect conn, String uuid,\n                 } else {\n                     s_logger.error(\"Failed in unmounting and redefining storage\");\n                 }\n+            } else {\n+                s_logger.error(\"Internal error occurred when attempting to mount: specified path may be invalid\");\n+                throw e;\n             }\n             if (sp != null) {\n                 try {\n@@ -496,7 +499,13 @@ public KVMStoragePool createStoragePool(String name, String host, int port,\n             s_logger.debug(\"Attempting to create storage pool \" + name);\n \n             if (type == StoragePoolType.NetworkFilesystem) {\n-                sp = createNfsStoragePool(conn, name, host, path);\n+                try {\n+                        sp = createNfsStoragePool(conn, name, host, path);\n+                } catch (LibvirtException e) {\n+                        s_logger.error(\"Failed to create mount\");\n+                        s_logger.error(e.getStackTrace());\n+                        throw new CloudRuntimeException(e.toString());\n+                }\n             } else if (type == StoragePoolType.SharedMountPoint\n                     || type == StoragePoolType.Filesystem) {\n                 sp = createSharedStoragePool(conn, name, host, path);",
                "raw_url": "https://github.com/apache/cloudstack/raw/7ea8c5fd9a19b9f34158e2ab8db840967db6663d/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/storage/LibvirtStorageAdaptor.java",
                "sha": "db1811e6a59949e448fd39457b1191514d5e051b",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/7ea8c5fd9a19b9f34158e2ab8db840967db6663d/plugins/storage/volume/default/src/org/apache/cloudstack/storage/datastore/lifecycle/CloudStackPrimaryDataStoreLifeCycleImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/storage/volume/default/src/org/apache/cloudstack/storage/datastore/lifecycle/CloudStackPrimaryDataStoreLifeCycleImpl.java?ref=7ea8c5fd9a19b9f34158e2ab8db840967db6663d",
                "deletions": 1,
                "filename": "plugins/storage/volume/default/src/org/apache/cloudstack/storage/datastore/lifecycle/CloudStackPrimaryDataStoreLifeCycleImpl.java",
                "patch": "@@ -60,6 +60,7 @@\n import com.cloud.storage.StoragePoolAutomation;\n import com.cloud.storage.StoragePoolDiscoverer;\n import com.cloud.storage.StoragePoolHostVO;\n+import com.cloud.storage.StoragePoolStatus;\n import com.cloud.storage.dao.StoragePoolHostDao;\n import com.cloud.storage.dao.StoragePoolWorkDao;\n import com.cloud.storage.dao.VolumeDao;\n@@ -396,7 +397,7 @@ public boolean attachCluster(DataStore store, ClusterScope scope) {\n             s_logger.warn(\"No host can access storage pool \" + primarystore + \" on cluster \"\n                     + primarystore.getClusterId());\n             primaryDataStoreDao.expunge(primarystore.getId());\n-            return false;\n+            throw new CloudRuntimeException(\"Failed to access storage pool\");\n         }\n \n         this.dataStoreHelper.attachCluster(store);\n@@ -437,6 +438,10 @@ public boolean deleteDataStore(DataStore store) {\n         List<StoragePoolHostVO> hostPoolRecords = this._storagePoolHostDao.listByPoolId(store.getId());\n         StoragePool pool = (StoragePool) store;\n         boolean deleteFlag = false;\n+        // If datastore is not in ready state, simply delete its db entry.\n+        if (pool.getStatus() != StoragePoolStatus.Up) {\n+            return this.dataStoreHelper.deletePrimaryDataStore(store);\n+        }\n         // Remove the SR associated with the Xenserver\n         for (StoragePoolHostVO host : hostPoolRecords) {\n             DeleteStoragePoolCommand deleteCmd = new DeleteStoragePoolCommand(pool);",
                "raw_url": "https://github.com/apache/cloudstack/raw/7ea8c5fd9a19b9f34158e2ab8db840967db6663d/plugins/storage/volume/default/src/org/apache/cloudstack/storage/datastore/lifecycle/CloudStackPrimaryDataStoreLifeCycleImpl.java",
                "sha": "26733d443ebcc566314ac72c181b454971e9432f",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/7ea8c5fd9a19b9f34158e2ab8db840967db6663d/server/src/com/cloud/storage/StorageManagerImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/StorageManagerImpl.java?ref=7ea8c5fd9a19b9f34158e2ab8db840967db6663d",
                "deletions": 1,
                "filename": "server/src/com/cloud/storage/StorageManagerImpl.java",
                "patch": "@@ -717,7 +717,7 @@ public PrimaryDataStoreInfo createPool(CreateStoragePoolCmd cmd) throws Resource\n         params.put(\"capacityIops\", cmd.getCapacityIops());\n \n         DataStoreLifeCycle lifeCycle = storeProvider.getDataStoreLifeCycle();\n-        DataStore store;\n+        DataStore store = null;\n         try {\n             store = lifeCycle.initialize(params);\n             if (scopeType == ScopeType.CLUSTER) {\n@@ -729,6 +729,10 @@ public PrimaryDataStoreInfo createPool(CreateStoragePoolCmd cmd) throws Resource\n             }\n         } catch (Exception e) {\n             s_logger.debug(\"Failed to add data store\", e);\n+            // clean up the db\n+            if (store != null) {\n+                lifeCycle.deleteDataStore(store);\n+            }\n             throw new CloudRuntimeException(\"Failed to add data store\", e);\n         }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/7ea8c5fd9a19b9f34158e2ab8db840967db6663d/server/src/com/cloud/storage/StorageManagerImpl.java",
                "sha": "830fd368fed757002f54a595c1be4f56da9d2dfa",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-1510: NPE when primary storage is added with wrong path\n\nDescription:\n\n\ta) Fixing NPE when wrong path is provided for primary datastore.\n\tb) No error dialog shows up in GUI when wrong path is provided,\n\t   after NPE fix - propagating exception upward.\n\tc) If the KVM agent is down, an invalid datastore gets logged in\n\t   storage_pool table and doesn't get removed, so it shows up\n\t   in the GUI in the list of datastores - fixing this as well.",
        "parent": "https://github.com/apache/cloudstack/commit/7089e1ce44151702f36a8135e3b74752631a1894",
        "repo": "cloudstack",
        "unit_tests": [
            "StorageManagerImplTest.java"
        ]
    },
    "cloudstack_807562d": {
        "bug_id": "cloudstack_807562d",
        "commit": "https://github.com/apache/cloudstack/commit/807562da50743438d78efff17d58401f43abb7a4",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/807562da50743438d78efff17d58401f43abb7a4/server/src/com/cloud/network/rules/RulesManagerImpl.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/rules/RulesManagerImpl.java?ref=807562da50743438d78efff17d58401f43abb7a4",
                "deletions": 1,
                "filename": "server/src/com/cloud/network/rules/RulesManagerImpl.java",
                "patch": "@@ -358,6 +358,8 @@ public boolean revokePortForwardingRule(long ruleId, boolean apply) {\n             throw new InvalidParameterValueException(\"Unable to find \" + ruleId);\n         }\n         \n+        long ownerId = rule.getAccountId();\n+        \n         _accountMgr.checkAccess(caller, rule);\n         revokeRule(rule, caller, ctx.getCallerUserId());\n         \n@@ -369,7 +371,7 @@ public boolean revokePortForwardingRule(long ruleId, boolean apply) {\n             success = true;\n         }\n         if(success){\n-            UsageEventVO usageEvent = new UsageEventVO(EventTypes.EVENT_NET_RULE_DELETE, rule.getAccountId(), 0, rule.getId(), null);\n+            UsageEventVO usageEvent = new UsageEventVO(EventTypes.EVENT_NET_RULE_DELETE, ownerId, 0, ruleId, null);\n             _usageEventDao.persist(usageEvent);\n         }\n         return success;\n@@ -383,6 +385,11 @@ public boolean revokePortForwardingRule(long vmId) {\n     \t}\n     \t\n     \tList<PortForwardingRuleVO> rules = _forwardingDao.listByVm(vmId);\n+    \t\n+    \tif (rules == null || rules.isEmpty()) {\n+            return true;\n+        }\n+    \t\n     \tfor (PortForwardingRuleVO rule : rules) {\n     \t\trevokePortForwardingRule(rule.getId(), true);\n     \t}",
                "raw_url": "https://github.com/apache/cloudstack/raw/807562da50743438d78efff17d58401f43abb7a4/server/src/com/cloud/network/rules/RulesManagerImpl.java",
                "sha": "7eb22e694c10ef5d9f56e6f1d74f40273d81322f",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/807562da50743438d78efff17d58401f43abb7a4/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/UserVmManagerImpl.java?ref=807562da50743438d78efff17d58401f43abb7a4",
                "deletions": 0,
                "filename": "server/src/com/cloud/vm/UserVmManagerImpl.java",
                "patch": "@@ -1111,6 +1111,9 @@ public UserVm startUserVm(long vmId) throws ConcurrentOperationException, Execut\n \n     @Override\n     public boolean expunge(UserVmVO vm, long callerUserId, Account caller) {\n+        UserContext ctx = UserContext.current();\n+        ctx.setAccountId(vm.getAccountId());\n+        \n \t    try {\n \t        \n \t        if (!_itMgr.advanceExpunge(vm, _accountMgr.getSystemUser(), caller)) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/807562da50743438d78efff17d58401f43abb7a4/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "sha": "3e8ee037aef833a51872da367936ef29522800e2",
                "status": "modified"
            }
        ],
        "message": "bug 8424: fixed NPE in vmExpunge thread - set accountId for UserContext to the vm's ownerId (this value is being read by UsageEvents generator)\nstatus 8424: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/87b3f4a17da3ee8dcbb36586d03a6f2fce316171",
        "repo": "cloudstack",
        "unit_tests": [
            "UserVmManagerImplTest.java"
        ]
    },
    "cloudstack_81b4731": {
        "bug_id": "cloudstack_81b4731",
        "commit": "https://github.com/apache/cloudstack/commit/81b4731e3b5265943017f88b850421154184f7c5",
        "file": [
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/cloudstack/blob/81b4731e3b5265943017f88b850421154184f7c5/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=81b4731e3b5265943017f88b850421154184f7c5",
                "deletions": 18,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -2968,7 +2968,7 @@ public UsageRecordResponse createUsageResponse(Usage usageRecord) {\n         usageRecResponse.setUsage(usageRecord.getUsageDisplay());\n         usageRecResponse.setUsageType(usageRecord.getUsageType());\n         if (usageRecord.getVmInstanceId() != null) {\n-            VMInstanceVO vm = _entityMgr.findById(VMInstanceVO.class, usageRecord.getVmInstanceId());\n+            VMInstanceVO vm = _entityMgr.findByIdIncludingRemoved(VMInstanceVO.class, usageRecord.getVmInstanceId());\n             if (vm != null) {\n                 usageRecResponse.setVirtualMachineId(vm.getUuid());\n             }\n@@ -2986,7 +2986,7 @@ public UsageRecordResponse createUsageResponse(Usage usageRecord) {\n             //Service Offering Id\n             usageRecResponse.setOfferingId(svcOffering.getUuid());\n             //VM Instance ID\n-            VMInstanceVO vm = _entityMgr.findById(VMInstanceVO.class, usageRecord.getUsageId().toString());\n+            VMInstanceVO vm = _entityMgr.findByIdIncludingRemoved(VMInstanceVO.class, usageRecord.getUsageId().toString());\n             if (vm != null) {\n                 usageRecResponse.setUsageId(vm.getUuid());\n             }\n@@ -2999,7 +2999,7 @@ public UsageRecordResponse createUsageResponse(Usage usageRecord) {\n             //isSystem\n             usageRecResponse.setSystem((usageRecord.getSize() == 1) ? true : false);\n             //IP Address ID\n-            IPAddressVO ip = _entityMgr.findById(IPAddressVO.class, usageRecord.getUsageId().toString());\n+            IPAddressVO ip = _entityMgr.findByIdIncludingRemoved(IPAddressVO.class, usageRecord.getUsageId().toString());\n             if (ip != null) {\n                 usageRecResponse.setUsageId(ip.getUuid());\n             }\n@@ -3009,19 +3009,19 @@ public UsageRecordResponse createUsageResponse(Usage usageRecord) {\n             usageRecResponse.setType(usageRecord.getType());\n             if (usageRecord.getType().equals(\"DomainRouter\")) {\n                 //Domain Router Id\n-                VMInstanceVO vm = _entityMgr.findById(VMInstanceVO.class, usageRecord.getUsageId().toString());\n+                VMInstanceVO vm = _entityMgr.findByIdIncludingRemoved(VMInstanceVO.class, usageRecord.getUsageId().toString());\n                 if (vm != null) {\n                     usageRecResponse.setUsageId(vm.getUuid());\n                 }\n             } else {\n                 //External Device Host Id\n-                HostVO host = _entityMgr.findById(HostVO.class, usageRecord.getUsageId().toString());\n+                HostVO host = _entityMgr.findByIdIncludingRemoved(HostVO.class, usageRecord.getUsageId().toString());\n                 if (host != null) {\n                     usageRecResponse.setUsageId(host.getUuid());\n                 }\n             }\n             //Network ID\n-            NetworkVO network = _entityMgr.findById(NetworkVO.class, usageRecord.getNetworkId().toString());\n+            NetworkVO network = _entityMgr.findByIdIncludingRemoved(NetworkVO.class, usageRecord.getNetworkId().toString());\n             if (network != null) {\n                 usageRecResponse.setNetworkId(network.getUuid());\n             }\n@@ -3031,33 +3031,33 @@ public UsageRecordResponse createUsageResponse(Usage usageRecord) {\n             //Device Type\n             usageRecResponse.setType(usageRecord.getType());\n             //VM Instance Id\n-            VMInstanceVO vm = _entityMgr.findById(VMInstanceVO.class, usageRecord.getVmInstanceId().toString());\n+            VMInstanceVO vm = _entityMgr.findByIdIncludingRemoved(VMInstanceVO.class, usageRecord.getVmInstanceId().toString());\n             if (vm != null) {\n                 usageRecResponse.setVirtualMachineId(vm.getUuid());\n             }\n             //Volume ID\n-            VolumeVO volume = _entityMgr.findById(VolumeVO.class, usageRecord.getUsageId().toString());\n+            VolumeVO volume = _entityMgr.findByIdIncludingRemoved(VolumeVO.class, usageRecord.getUsageId().toString());\n             if (volume != null) {\n                 usageRecResponse.setUsageId(volume.getUuid());\n             }\n \n         } else if (usageRecord.getUsageType() == UsageTypes.VOLUME) {\n             //Volume ID\n-            VolumeVO volume = _entityMgr.findById(VolumeVO.class, usageRecord.getUsageId().toString());\n+            VolumeVO volume = _entityMgr.findByIdIncludingRemoved(VolumeVO.class, usageRecord.getUsageId().toString());\n             if (volume != null) {\n                 usageRecResponse.setUsageId(volume.getUuid());\n             }\n             //Volume Size\n             usageRecResponse.setSize(usageRecord.getSize());\n             //Disk Offering Id\n             if (usageRecord.getOfferingId() != null) {\n-                DiskOfferingVO diskOff = _entityMgr.findById(DiskOfferingVO.class, usageRecord.getOfferingId().toString());\n+                DiskOfferingVO diskOff = _entityMgr.findByIdIncludingRemoved(DiskOfferingVO.class, usageRecord.getOfferingId().toString());\n                 usageRecResponse.setOfferingId(diskOff.getUuid());\n             }\n \n         } else if (usageRecord.getUsageType() == UsageTypes.TEMPLATE || usageRecord.getUsageType() == UsageTypes.ISO) {\n             //Template/ISO ID\n-            VMTemplateVO tmpl = _entityMgr.findById(VMTemplateVO.class, usageRecord.getUsageId().toString());\n+            VMTemplateVO tmpl = _entityMgr.findByIdIncludingRemoved(VMTemplateVO.class, usageRecord.getUsageId().toString());\n             usageRecResponse.setUsageId(tmpl.getUuid());\n             if (tmpl != null) {\n                 usageRecResponse.setUsageId(tmpl.getUuid());\n@@ -3072,7 +3072,7 @@ public UsageRecordResponse createUsageResponse(Usage usageRecord) {\n \n         } else if (usageRecord.getUsageType() == UsageTypes.SNAPSHOT) {\n             //Snapshot ID\n-            SnapshotVO snap = _entityMgr.findById(SnapshotVO.class, usageRecord.getUsageId().toString());\n+            SnapshotVO snap = _entityMgr.findByIdIncludingRemoved(SnapshotVO.class, usageRecord.getUsageId().toString());\n             if (snap != null) {\n                 usageRecResponse.setUsageId(snap.getUuid());\n             }\n@@ -3081,39 +3081,39 @@ public UsageRecordResponse createUsageResponse(Usage usageRecord) {\n \n         } else if (usageRecord.getUsageType() == UsageTypes.LOAD_BALANCER_POLICY) {\n             //Load Balancer Policy ID\n-            LoadBalancerVO lb = _entityMgr.findById(LoadBalancerVO.class, usageRecord.getUsageId().toString());\n+            LoadBalancerVO lb = _entityMgr.findByIdIncludingRemoved(LoadBalancerVO.class, usageRecord.getUsageId().toString());\n             if (lb != null) {\n                 usageRecResponse.setUsageId(lb.getUuid());\n             }\n         } else if (usageRecord.getUsageType() == UsageTypes.PORT_FORWARDING_RULE) {\n             //Port Forwarding Rule ID\n-            PortForwardingRuleVO pf = _entityMgr.findById(PortForwardingRuleVO.class, usageRecord.getUsageId().toString());\n+            PortForwardingRuleVO pf = _entityMgr.findByIdIncludingRemoved(PortForwardingRuleVO.class, usageRecord.getUsageId().toString());\n             if (pf != null) {\n                 usageRecResponse.setUsageId(pf.getUuid());\n             }\n \n         } else if (usageRecord.getUsageType() == UsageTypes.NETWORK_OFFERING) {\n             //Network Offering Id\n-            NetworkOfferingVO netOff = _entityMgr.findById(NetworkOfferingVO.class, usageRecord.getOfferingId().toString());\n+            NetworkOfferingVO netOff = _entityMgr.findByIdIncludingRemoved(NetworkOfferingVO.class, usageRecord.getOfferingId().toString());\n             usageRecResponse.setOfferingId(netOff.getUuid());\n             //is Default\n             usageRecResponse.setDefault((usageRecord.getUsageId() == 1) ? true : false);\n \n         } else if (usageRecord.getUsageType() == UsageTypes.VPN_USERS) {\n             //VPN User ID\n-            VpnUserVO vpnUser = _entityMgr.findById(VpnUserVO.class, usageRecord.getUsageId().toString());\n+            VpnUserVO vpnUser = _entityMgr.findByIdIncludingRemoved(VpnUserVO.class, usageRecord.getUsageId().toString());\n             if (vpnUser != null) {\n                 usageRecResponse.setUsageId(vpnUser.getUuid());\n             }\n \n         } else if (usageRecord.getUsageType() == UsageTypes.SECURITY_GROUP) {\n             //Security Group Id\n-            SecurityGroupVO sg = _entityMgr.findById(SecurityGroupVO.class, usageRecord.getUsageId().toString());\n+            SecurityGroupVO sg = _entityMgr.findByIdIncludingRemoved(SecurityGroupVO.class, usageRecord.getUsageId().toString());\n             if (sg != null) {\n                 usageRecResponse.setUsageId(sg.getUuid());\n             }\n         } else if (usageRecord.getUsageType() == UsageTypes.VM_SNAPSHOT) {\n-            VMInstanceVO vm = _entityMgr.findById(VMInstanceVO.class, usageRecord.getVmInstanceId().toString());\n+            VMInstanceVO vm = _entityMgr.findByIdIncludingRemoved(VMInstanceVO.class, usageRecord.getVmInstanceId().toString());\n             if (vm != null) {\n                 usageRecResponse.setVmName(vm.getInstanceName());\n                 usageRecResponse.setUsageId(vm.getUuid());",
                "raw_url": "https://github.com/apache/cloudstack/raw/81b4731e3b5265943017f88b850421154184f7c5/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "12d09b23c4a62467d845f63946f6ca9f5e9c5872",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-6472 listUsageRecords: Pull information from removed items as well, fixing NPEs/Null UUIDs with usage API calls.\n\nSigned-off-by: Sebastien Goasguen <runseb@gmail.com>",
        "parent": "https://github.com/apache/cloudstack/commit/178240a7da4915541c64d675398f6b8b8715b7bf",
        "repo": "cloudstack",
        "unit_tests": [
            "ApiResponseHelperTest.java"
        ]
    },
    "cloudstack_852cf0e": {
        "bug_id": "cloudstack_852cf0e",
        "commit": "https://github.com/apache/cloudstack/commit/852cf0e6c7a06bb9fc9a4c6695a0b27fd8825ec8",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/852cf0e6c7a06bb9fc9a4c6695a0b27fd8825ec8/server/src/com/cloud/ha/HighAvailabilityManagerImpl.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/ha/HighAvailabilityManagerImpl.java?ref=852cf0e6c7a06bb9fc9a4c6695a0b27fd8825ec8",
                "deletions": 3,
                "filename": "server/src/com/cloud/ha/HighAvailabilityManagerImpl.java",
                "patch": "@@ -261,9 +261,11 @@ protected void wakeupWorkers() {\n \n     @Override\n     public boolean scheduleMigration(final VMInstanceVO vm) {\n-        final HaWorkVO work = new HaWorkVO(vm.getId(), vm.getType(), WorkType.Migration, Step.Scheduled, vm.getHostId(), vm.getState(), 0, vm.getUpdated());\n-        _haDao.persist(work);\n-        wakeupWorkers();\n+        if (vm.getHostId() != null) {\n+            final HaWorkVO work = new HaWorkVO(vm.getId(), vm.getType(), WorkType.Migration, Step.Scheduled, vm.getHostId(), vm.getState(), 0, vm.getUpdated());\n+            _haDao.persist(work);\n+            wakeupWorkers();\n+        }\n         return true;\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/852cf0e6c7a06bb9fc9a4c6695a0b27fd8825ec8/server/src/com/cloud/ha/HighAvailabilityManagerImpl.java",
                "sha": "cf0bd0bcba5cb8ef0add75faf229851927e07638",
                "status": "modified"
            }
        ],
        "message": "fix migration npe when recovering",
        "parent": "https://github.com/apache/cloudstack/commit/ccc12793c63a9388f6503d5447519c6ef1c06859",
        "repo": "cloudstack",
        "unit_tests": [
            "HighAvailabilityManagerImplTest.java"
        ]
    },
    "cloudstack_85bb685": {
        "bug_id": "cloudstack_85bb685",
        "commit": "https://github.com/apache/cloudstack/commit/85bb685662507897dd6238c3ec723c5258eb54e4",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/85bb685662507897dd6238c3ec723c5258eb54e4/server/src/com/cloud/network/vpc/NetworkACLServiceImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/vpc/NetworkACLServiceImpl.java?ref=85bb685662507897dd6238c3ec723c5258eb54e4",
                "deletions": 3,
                "filename": "server/src/com/cloud/network/vpc/NetworkACLServiceImpl.java",
                "patch": "@@ -612,13 +612,14 @@ public boolean revokeNetworkACLItem(long ruleId) {\n \n             Vpc vpc = _entityMgr.findById(Vpc.class, acl.getVpcId());\n \n+            if((aclItem.getAclId() == NetworkACL.DEFAULT_ALLOW) || (aclItem.getAclId() == NetworkACL.DEFAULT_DENY)){\n+                throw new InvalidParameterValueException(\"ACL Items in default ACL cannot be deleted\");\n+            }\n+\n             Account caller = CallContext.current().getCallingAccount();\n \n             _accountMgr.checkAccess(caller, null, true, vpc);\n \n-            if((aclItem.getAclId() == NetworkACL.DEFAULT_ALLOW) || (aclItem.getAclId() == NetworkACL.DEFAULT_DENY)){\n-                throw new InvalidParameterValueException(\"ACL Items in default ACL cannot be deleted\");\n-            }\n         }\n         return _networkAclMgr.revokeNetworkACLItem(ruleId);\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/85bb685662507897dd6238c3ec723c5258eb54e4/server/src/com/cloud/network/vpc/NetworkACLServiceImpl.java",
                "sha": "bee4018145d28f58d16b77d5cf2d12cf3e704db2",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-8072: Fixed NPE in deleting default ACL items in default ACL",
        "parent": "https://github.com/apache/cloudstack/commit/6fb9746e5eeacadc10b7d0977b03959683058b33",
        "repo": "cloudstack",
        "unit_tests": [
            "NetworkACLServiceImplTest.java"
        ]
    },
    "cloudstack_86df2c1": {
        "bug_id": "cloudstack_86df2c1",
        "commit": "https://github.com/apache/cloudstack/commit/86df2c1f8022bbd4417a06aea22693f14b1db733",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/86df2c1f8022bbd4417a06aea22693f14b1db733/vmware-base/src/com/cloud/hypervisor/vmware/mo/DatastoreMO.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/vmware-base/src/com/cloud/hypervisor/vmware/mo/DatastoreMO.java?ref=86df2c1f8022bbd4417a06aea22693f14b1db733",
                "deletions": 2,
                "filename": "vmware-base/src/com/cloud/hypervisor/vmware/mo/DatastoreMO.java",
                "patch": "@@ -32,6 +32,7 @@\n import com.vmware.vim25.SelectionSpec;\n import com.vmware.vim25.TraversalSpec;\n \n+import com.cloud.exception.CloudException;\n import com.cloud.hypervisor.vmware.util.VmwareContext;\n import com.cloud.utils.Pair;\n \n@@ -181,7 +182,7 @@ public boolean deleteFile(String path, ManagedObjectReference morDc, boolean tes\n     }\n \n     public boolean copyDatastoreFile(String srcFilePath, ManagedObjectReference morSrcDc, ManagedObjectReference morDestDs, String destFilePath,\n-        ManagedObjectReference morDestDc, boolean forceOverwrite) throws Exception {\n+            ManagedObjectReference morDestDc, boolean forceOverwrite) throws Exception {\n \n         String srcDsName = getName();\n         DatastoreMO destDsMo = new DatastoreMO(_context, morDestDs);\n@@ -209,7 +210,7 @@ public boolean copyDatastoreFile(String srcFilePath, ManagedObjectReference morS\n     }\n \n     public boolean moveDatastoreFile(String srcFilePath, ManagedObjectReference morSrcDc, ManagedObjectReference morDestDs, String destFilePath,\n-        ManagedObjectReference morDestDc, boolean forceOverwrite) throws Exception {\n+            ManagedObjectReference morDestDc, boolean forceOverwrite) throws Exception {\n \n         String srcDsName = getName();\n         DatastoreMO destDsMo = new DatastoreMO(_context, morDestDs);\n@@ -342,6 +343,10 @@ public String searchFileInSubFolders(String fileName, boolean caseInsensitive) t\n         ArrayList<HostDatastoreBrowserSearchResults> results = browserMo.searchDatastoreSubFolders(\"[\" + getName() + \"]\", fileName, caseInsensitive);\n         if (results != null && results.size() > 1) {\n             s_logger.warn(\"Multiple files with name \" + fileName + \" exists in datastore \" + datastorePath + \". Trying to choose first file found in search attempt.\");\n+        } else if (results == null) {\n+            String msg = \"No file found with name \" + fileName + \" found in datastore \" + datastorePath;\n+            s_logger.error(msg);\n+            throw new CloudException(msg);\n         }\n         for (HostDatastoreBrowserSearchResults result : results) {\n             List<FileInfo> info = result.getFile();",
                "raw_url": "https://github.com/apache/cloudstack/raw/86df2c1f8022bbd4417a06aea22693f14b1db733/vmware-base/src/com/cloud/hypervisor/vmware/mo/DatastoreMO.java",
                "sha": "363b91f9c68e395d8a804c9d537877379b7a1d18",
                "status": "modified"
            }
        ],
        "message": "Findbugs finding: Fix potential NPE",
        "parent": "https://github.com/apache/cloudstack/commit/e668c3f4e5cd7b1ea38ff5b8b5808b6c0879cb55",
        "repo": "cloudstack",
        "unit_tests": [
            "DatastoreMOTest.java"
        ]
    },
    "cloudstack_88c6072": {
        "bug_id": "cloudstack_88c6072",
        "commit": "https://github.com/apache/cloudstack/commit/88c6072b4dd4d4bdea196e915a8c7b2bb27feba0",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/88c6072b4dd4d4bdea196e915a8c7b2bb27feba0/utils/src/org/apache/cloudstack/utils/auth/SAMLUtils.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/org/apache/cloudstack/utils/auth/SAMLUtils.java?ref=88c6072b4dd4d4bdea196e915a8c7b2bb27feba0",
                "deletions": 1,
                "filename": "utils/src/org/apache/cloudstack/utils/auth/SAMLUtils.java",
                "patch": "@@ -225,7 +225,11 @@ public static String generateSAMLRequestSignature(String urlEncodedString, Priva\n         Signature signature = Signature.getInstance(\"SHA1withRSA\");\n         signature.initSign(signingKey);\n         signature.update(url.getBytes());\n-        return url + \"&Signature=\" + URLEncoder.encode(Base64.encodeBytes(signature.sign(), Base64.DONT_BREAK_LINES), HttpUtils.UTF_8);\n+        String signatureString = Base64.encodeBytes(signature.sign(), Base64.DONT_BREAK_LINES);\n+        if (signatureString != null) {\n+            return url + \"&Signature=\" + URLEncoder.encode(signatureString, HttpUtils.UTF_8);\n+        }\n+        return url;\n     }\n \n     public static KeyFactory getKeyFactory() {",
                "raw_url": "https://github.com/apache/cloudstack/raw/88c6072b4dd4d4bdea196e915a8c7b2bb27feba0/utils/src/org/apache/cloudstack/utils/auth/SAMLUtils.java",
                "sha": "36c4d0f90c49f90260225384bc1b3e684d91e428",
                "status": "modified"
            }
        ],
        "message": "CID-1237196: Fix potential NPE in SAMLUtils\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/ba93200917cc54317010c5f54c00fcfb5a5f9d23",
        "repo": "cloudstack",
        "unit_tests": [
            "SAMLUtilsTest.java"
        ]
    },
    "cloudstack_898051e": {
        "bug_id": "cloudstack_898051e",
        "commit": "https://github.com/apache/cloudstack/commit/898051ecff5c10540ea9a0933a0df3f752d87826",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cloudstack/blob/898051ecff5c10540ea9a0933a0df3f752d87826/server/src/com/cloud/network/element/VirtualRouterElement.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/element/VirtualRouterElement.java?ref=898051ecff5c10540ea9a0933a0df3f752d87826",
                "deletions": 3,
                "filename": "server/src/com/cloud/network/element/VirtualRouterElement.java",
                "patch": "@@ -63,6 +63,7 @@\n import com.cloud.vm.UserVmManager;\n import com.cloud.vm.VirtualMachine;\n import com.cloud.vm.VirtualMachineProfile;\n+import com.cloud.vm.VirtualMachine.State;\n import com.cloud.vm.dao.DomainRouterDao;\n import com.cloud.vm.dao.UserVmDao;\n \n@@ -153,17 +154,22 @@ public boolean restart(Network network, ReservationContext context) throws Concu\n         }\n \n         /* Get the host_id in order to find the cluster */\n-        long host_id = 0;\n+        Long host_id = new Long(0);\n         for (DomainRouterVO router : routers) {\n-            host_id = router.getHostId();\n+            if (host_id == null || host_id == 0) {\n+                host_id = (router.getHostId() != null ? router.getHostId() : router.getLastHostId());\n+            }\n             /* FIXME it's not completely safe to ignore these failure, but we would try to push on now */\n-            if (_routerMgr.stopRouter(router.getId(), false) == null) {\n+            if (router.getState() != State.Stopped || _routerMgr.stopRouter(router.getId(), false) == null) {\n                 s_logger.warn(\"Failed to stop virtual router element \" + router + \" as a part of network \" + network + \" restart\");\n             }\n             if (!_routerMgr.destroyRouter(router.getId())) {\n                 s_logger.warn(\"Failed to destroy virtual router element \" + router + \" as a part of network \" + network + \" restart\");\n             }\n         }\n+        if (host_id == null || host_id == 0) {\n+            throw new ResourceUnavailableException(\"Fail to locate virtual router element in network \" + network.getId(), this.getClass(), 0);\n+        }\n         \n         /* The cluster here is only used to determine hypervisor type, not the real deployment */\n         Cluster cluster = _configMgr.getCluster(_hostDao.findById(host_id).getClusterId());",
                "raw_url": "https://github.com/apache/cloudstack/raw/898051ecff5c10540ea9a0933a0df3f752d87826/server/src/com/cloud/network/element/VirtualRouterElement.java",
                "sha": "4cfc3fccbaaf1e71e4816446c7b13ab5a8a7f3c5",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/898051ecff5c10540ea9a0933a0df3f752d87826/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java?ref=898051ecff5c10540ea9a0933a0df3f752d87826",
                "deletions": 1,
                "filename": "server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "patch": "@@ -1066,7 +1066,9 @@ private DomainRouterVO startVirtualRouter(DomainRouterVO router, User user, Acco\n                 if (state != State.Running) {\n                     router = startVirtualRouter(router, _accountService.getSystemUser(), _accountService.getSystemAccount(), params);\n                 }\n-                runningRouters.add(router);\n+                if (router != null) {\n+                    runningRouters.add(router);\n+                }\n             }\n         }\n         return runningRouters;",
                "raw_url": "https://github.com/apache/cloudstack/raw/898051ecff5c10540ea9a0933a0df3f752d87826/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "sha": "85e7236a4bb2de2a49f98219c59ef5b203ea8454",
                "status": "modified"
            }
        ],
        "message": "Fix NPE when a router is fail to start\n\nAlso enforce the check for restartNetworkCommand",
        "parent": "https://github.com/apache/cloudstack/commit/bc8c78f102a2eeeb184a1d350f6e08997058cdd3",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualNetworkApplianceManagerImplTest.java"
        ]
    },
    "cloudstack_898990a": {
        "bug_id": "cloudstack_898990a",
        "commit": "https://github.com/apache/cloudstack/commit/898990a11dd86b7682a06a9fdf5e888c325a3d4a",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/898990a11dd86b7682a06a9fdf5e888c325a3d4a/server/src/com/cloud/server/ManagementServerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/ManagementServerImpl.java?ref=898990a11dd86b7682a06a9fdf5e888c325a3d4a",
                "deletions": 1,
                "filename": "server/src/com/cloud/server/ManagementServerImpl.java",
                "patch": "@@ -1988,7 +1988,7 @@ public DomainRouterVO findDomainRouterById(long domainRouterId) {\n     \t\t//right now, we made the decision to only list zones associated with this domain\n     \t\tdcs  = _dcDao.findZonesByDomainId(domainId); //private zones\n     \t}\n-    \telse if((account.getType() ==  Account.ACCOUNT_TYPE_ADMIN)){\n+    \telse if((account == null || account.getType() ==  Account.ACCOUNT_TYPE_ADMIN)){\n     \t\tdcs = _dcDao.listAll(); //all zones\n     \t}else if(account.getType() ==  Account.ACCOUNT_TYPE_NORMAL){\n     \t\t//it was decided to return all zones for the user's domain, and everything above till root",
                "raw_url": "https://github.com/apache/cloudstack/raw/898990a11dd86b7682a06a9fdf5e888c325a3d4a/server/src/com/cloud/server/ManagementServerImpl.java",
                "sha": "6910478c99c285760c89eaeae6fa4563b3792002",
                "status": "modified"
            }
        ],
        "message": "fixing the npe which occurs when we list zones from 8096. this has a null account.",
        "parent": "https://github.com/apache/cloudstack/commit/01154ebf0fcd3ff6d21c21d8647d28ac597cc24d",
        "repo": "cloudstack",
        "unit_tests": [
            "ManagementServerImplTest.java"
        ]
    },
    "cloudstack_8bc7ae6": {
        "bug_id": "cloudstack_8bc7ae6",
        "commit": "https://github.com/apache/cloudstack/commit/8bc7ae695d621b67e1e5d1916a1852cad1f4dda0",
        "file": [
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/cloudstack/blob/8bc7ae695d621b67e1e5d1916a1852cad1f4dda0/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java?ref=8bc7ae695d621b67e1e5d1916a1852cad1f4dda0",
                "deletions": 5,
                "filename": "engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "patch": "@@ -928,7 +928,7 @@ protected NicTO toNicTO(NicVO nic, NicProfile profile, NetworkVO config) {\n \n     boolean isNetworkImplemented(NetworkVO network) {\n         Network.State state = network.getState();\n-        if (state == Network.State.Implemented || state == Network.State.Implementing) {\n+        if (state == Network.State.Implemented) {\n             return true;\n         } else if (state == Network.State.Setup) {\n             DataCenterVO zone = _dcDao.findById(network.getDataCenterId());\n@@ -939,6 +939,24 @@ boolean isNetworkImplemented(NetworkVO network) {\n         return false;\n     }\n \n+    Pair<NetworkGuru, NetworkVO> implementNetwork(long networkId, DeployDestination dest, ReservationContext context, boolean isRouter) throws ConcurrentOperationException,\n+    ResourceUnavailableException, InsufficientCapacityException {\n+        Pair<NetworkGuru, NetworkVO> implemented = null;\n+        if (!isRouter) {\n+            implemented = implementNetwork(networkId, dest, context);\n+        } else {\n+            // At the time of implementing network (using implementNetwork() method), if the VR needs to be deployed then\n+            // it follows the same path of regular VM deployment. This leads to a nested call to implementNetwork() while\n+            // preparing VR nics. This flow creates issues in dealing with network state transitions. The original call\n+            // puts network in \"Implementing\" state and then the nested call again tries to put it into same state resulting\n+            // in issues. In order to avoid it, implementNetwork() call for VR is replaced with below code.\n+            NetworkVO network = _networksDao.findById(networkId);\n+            NetworkGuru guru = AdapterBase.getAdapterByName(networkGurus, network.getGuruName());\n+            implemented = new Pair<NetworkGuru, NetworkVO>(guru, network);\n+        }\n+        return implemented;\n+    }\n+\n     @Override\n     @DB\n     public Pair<NetworkGuru, NetworkVO> implementNetwork(long networkId, DeployDestination dest, ReservationContext context) throws ConcurrentOperationException,\n@@ -1280,7 +1298,7 @@ public int compare(NicVO nic1, NicVO nic2) {\n         });\n \n         for (NicVO nic : nics) {\n-            Pair<NetworkGuru, NetworkVO> implemented = implementNetwork(nic.getNetworkId(), dest, context);\n+            Pair<NetworkGuru, NetworkVO> implemented = implementNetwork(nic.getNetworkId(), dest, context, vmProfile.getVirtualMachine().getType() == Type.DomainRouter);\n             if (implemented == null || implemented.first() == null) {\n                 s_logger.warn(\"Failed to implement network id=\" + nic.getNetworkId() + \" as a part of preparing nic id=\" + nic.getId());\n                 throw new CloudRuntimeException(\"Failed to implement network id=\" + nic.getNetworkId() + \" as a part preparing nic id=\" + nic.getId());\n@@ -3082,9 +3100,10 @@ public NicProfile createNicForVm(Network network, NicProfile requested, Reservat\n \n         //2) prepare nic\n         if (prepare) {\n-            Pair<NetworkGuru, NetworkVO> implemented = implementNetwork(nic.getNetworkId(), dest, context);\n-            if (implemented == null) {\n-                throw new CloudRuntimeException(\"Failed to prepare the nic as a part of creating nic \" + nic + \" for vm \"+ vm + \" due to network \" + network + \" implement failure\");\n+            Pair<NetworkGuru, NetworkVO> implemented = implementNetwork(nic.getNetworkId(), dest, context, vmProfile.getVirtualMachine().getType() == Type.DomainRouter);\n+            if (implemented == null || implemented.first() == null) {\n+                s_logger.warn(\"Failed to implement network id=\" + nic.getNetworkId() + \" as a part of preparing nic id=\" + nic.getId());\n+                throw new CloudRuntimeException(\"Failed to implement network id=\" + nic.getNetworkId() + \" as a part preparing nic id=\" + nic.getId());\n             }\n             nic = prepareNic(vmProfile, dest, context, nic.getId(), implemented.second());\n             s_logger.debug(\"Nic is prepared successfully for vm \" + vm + \" in network \" + network);",
                "raw_url": "https://github.com/apache/cloudstack/raw/8bc7ae695d621b67e1e5d1916a1852cad1f4dda0/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "sha": "ca0b86d0e168b38e885d69f22a272f6c883c092d",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-7182: NPE while trying to deploy VMs in parallel in isolated network\n- Check to see if network is implemented changed from 'state == Implementing||Implemented' to 'state == Implemented'.\nThe earlier check was a hack to prevent the issue described below.\n- At the time of implementing network (using implementNetwork() method), if the VR needs to be deployed then it follows\nthe same path of regular VM deployment. This leads to a nested call to implementNetwork() while preparing VR nics. This\nflow creates issues in dealing with network state transitions. The original call puts network in \"Implementing\" state\nand then the nested call again tries to put it into same state resulting in issues. In order to avoid it, implementNetwork()\ncall for VR is replaced with below code.",
        "parent": "https://github.com/apache/cloudstack/commit/59ea2e2960b3447344365d2dfce745e0a7ba7816",
        "repo": "cloudstack",
        "unit_tests": [
            "NetworkOrchestratorTest.java"
        ]
    },
    "cloudstack_8c387f9": {
        "bug_id": "cloudstack_8c387f9",
        "commit": "https://github.com/apache/cloudstack/commit/8c387f9de6d76cfa983b6fa7f39b2e9df4be4266",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/8c387f9de6d76cfa983b6fa7f39b2e9df4be4266/vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java?ref=8c387f9de6d76cfa983b6fa7f39b2e9df4be4266",
                "deletions": 1,
                "filename": "vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java",
                "patch": "@@ -3281,7 +3281,7 @@ public boolean isMemoryHotAddSupported(String guestOsId) throws Exception {\n         virtualHardwareVersion = getVirtualHardwareVersion();\n \n         // Check if guest operating system supports memory hotadd\n-        if (guestOsDescriptor.isSupportsMemoryHotAdd()) {\n+        if (guestOsDescriptor != null && guestOsDescriptor.isSupportsMemoryHotAdd()) {\n             guestOsSupportsMemoryHotAdd = true;\n         }\n         // Check if virtual machine is using hardware version 7 or later.",
                "raw_url": "https://github.com/apache/cloudstack/raw/8c387f9de6d76cfa983b6fa7f39b2e9df4be4266/vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java",
                "sha": "1ab325be14ccf37bbcf91f20c39ae7d9b922f931",
                "status": "modified"
            }
        ],
        "message": "vmware: fix potential NPE when memory hotplug capability is checked (#3362)\n\nThis fixes potential NPE case when memory hotpluggability is checked\r\nbased on the guest OS descriptor.\r\n\r\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/f6f381fc68dc4a27a6ec212966f55c58264596bc",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineMOTest.java"
        ]
    },
    "cloudstack_8c5cd42": {
        "bug_id": "cloudstack_8c5cd42",
        "commit": "https://github.com/apache/cloudstack/commit/8c5cd42b56c3161c6dbac714f4ba82f6b183b2ff",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/8c5cd42b56c3161c6dbac714f4ba82f6b183b2ff/server/src/com/cloud/server/ManagementServerImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/ManagementServerImpl.java?ref=8c5cd42b56c3161c6dbac714f4ba82f6b183b2ff",
                "deletions": 1,
                "filename": "server/src/com/cloud/server/ManagementServerImpl.java",
                "patch": "@@ -1819,8 +1819,9 @@ public static boolean isAdmin(short accountType) {\n \n     @Override\n     public List<Class<?>> getCommands() {\n+        List<Class<?>> cmdList = new ArrayList<Class<?>>();\n         //TODO: Add cmd classes\n-        return null;\n+        return cmdList;\n     }\n \n     protected class EventPurgeTask implements Runnable {",
                "raw_url": "https://github.com/apache/cloudstack/raw/8c5cd42b56c3161c6dbac714f4ba82f6b183b2ff/server/src/com/cloud/server/ManagementServerImpl.java",
                "sha": "5306bc0928db7e9869a15587af5f1eff33e46c4a",
                "status": "modified"
            }
        ],
        "message": "ManagementServerImpl: Fix NPE, PluggableService should not return null list\n\nSigned-off-by: Rohit Yadav <bhaisaab@apache.org>",
        "parent": "https://github.com/apache/cloudstack/commit/d99f836d5d72fee807569bfb27ba53d2492ccfc8",
        "repo": "cloudstack",
        "unit_tests": [
            "ManagementServerImplTest.java"
        ]
    },
    "cloudstack_8ce576d": {
        "bug_id": "cloudstack_8ce576d",
        "commit": "https://github.com/apache/cloudstack/commit/8ce576dde56a6477378f0da36416355277120b8b",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/8ce576dde56a6477378f0da36416355277120b8b/server/src/com/cloud/user/AccountManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/user/AccountManagerImpl.java?ref=8ce576dde56a6477378f0da36416355277120b8b",
                "deletions": 1,
                "filename": "server/src/com/cloud/user/AccountManagerImpl.java",
                "patch": "@@ -197,7 +197,7 @@ public void incrementResourceCount(long accountId, ResourceType type, Long...del\n \n                 // on a per-domain basis, increment the count\n                 // FIXME:  can this increment be done on the database side in a custom update statement?\n-                Account account = _accountDao.findById(accountId);\n+                Account account = _accountDao.findByIdIncludingRemoved(accountId);\n                 Long domainId = account.getDomainId();\n                 while (domainId != null) {\n                     _resourceCountDao.updateDomainCount(domainId, type, true, numToIncrement);",
                "raw_url": "https://github.com/apache/cloudstack/raw/8ce576dde56a6477378f0da36416355277120b8b/server/src/com/cloud/user/AccountManagerImpl.java",
                "sha": "1d64994f1bcc98f3056d35854b1008eefc4a8172",
                "status": "modified"
            }
        ],
        "message": "bug 8239: NPE while executing CreateSnapshotCmd\nstatus 8239: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/222c865975235ef0220098d0e866ba71f0504ce4",
        "repo": "cloudstack",
        "unit_tests": [
            "AccountManagerImplTest.java"
        ]
    },
    "cloudstack_8e4644e": {
        "bug_id": "cloudstack_8e4644e",
        "commit": "https://github.com/apache/cloudstack/commit/8e4644e413777d0a58edd5405a928df8256fdbd9",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/8e4644e413777d0a58edd5405a928df8256fdbd9/api/src/com/cloud/vm/VmDetailConstants.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/vm/VmDetailConstants.java?ref=8e4644e413777d0a58edd5405a928df8256fdbd9",
                "deletions": 1,
                "filename": "api/src/com/cloud/vm/VmDetailConstants.java",
                "patch": "@@ -19,7 +19,7 @@\n public interface VmDetailConstants {\n     public static final String KEYBOARD = \"keyboard\";\n     public static final String NIC_ADAPTER = \"nicAdapter\";\n-    public static final String ROOK_DISK_CONTROLLER = \"rootDiskController\";\n+    public static final String ROOT_DISK_CONTROLLER = \"rootDiskController\";\n     public static final String NESTED_VIRTUALIZATION_FLAG = \"nestedVirtualizationFlag\";\n     public static final String HYPERVISOR_TOOLS_VERSION = \"hypervisortoolsversion\";\n     public static final String DATA_DISK_CONTROLLER = \"dataDiskController\";",
                "raw_url": "https://github.com/apache/cloudstack/raw/8e4644e413777d0a58edd5405a928df8256fdbd9/api/src/com/cloud/vm/VmDetailConstants.java",
                "sha": "d34afc13a1696aa00ebd9c047bd3a3af137656cf",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/8e4644e413777d0a58edd5405a928df8256fdbd9/plugins/hypervisors/vmware/src/com/cloud/hypervisor/guru/VMwareGuru.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/com/cloud/hypervisor/guru/VMwareGuru.java?ref=8e4644e413777d0a58edd5405a928df8256fdbd9",
                "deletions": 2,
                "filename": "plugins/hypervisors/vmware/src/com/cloud/hypervisor/guru/VMwareGuru.java",
                "patch": "@@ -200,10 +200,10 @@ public VirtualMachineTO implement(VirtualMachineProfile vm) {\n             }\n         }\n \n-        String diskDeviceType = details.get(VmDetailConstants.ROOK_DISK_CONTROLLER);\n+        String diskDeviceType = details.get(VmDetailConstants.ROOT_DISK_CONTROLLER);\n         if (userVm) {\n             if (diskDeviceType == null) {\n-                details.put(VmDetailConstants.ROOK_DISK_CONTROLLER, _vmwareMgr.getRootDiskController());\n+                details.put(VmDetailConstants.ROOT_DISK_CONTROLLER, _vmwareMgr.getRootDiskController());\n             }\n         }\n         String diskController = details.get(VmDetailConstants.DATA_DISK_CONTROLLER);",
                "raw_url": "https://github.com/apache/cloudstack/raw/8e4644e413777d0a58edd5405a928df8256fdbd9/plugins/hypervisors/vmware/src/com/cloud/hypervisor/guru/VMwareGuru.java",
                "sha": "986000aa9389cf2e67953631a20eecbb5344a4fe",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/8e4644e413777d0a58edd5405a928df8256fdbd9/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java?ref=8e4644e413777d0a58edd5405a928df8256fdbd9",
                "deletions": 9,
                "filename": "plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "patch": "@@ -236,7 +236,7 @@\n import com.cloud.hypervisor.vmware.mo.NetworkDetails;\n import com.cloud.hypervisor.vmware.mo.TaskMO;\n import com.cloud.hypervisor.vmware.mo.VirtualEthernetCardType;\n-import com.cloud.hypervisor.vmware.mo.VirtualMachineDiskInfo;\n+import org.apache.cloudstack.utils.volume.VirtualMachineDiskInfo;\n import com.cloud.hypervisor.vmware.mo.VirtualMachineDiskInfoBuilder;\n import com.cloud.hypervisor.vmware.mo.VirtualMachineMO;\n import com.cloud.hypervisor.vmware.mo.VirtualSwitchType;\n@@ -1412,7 +1412,7 @@ protected StartAnswer execute(StartCommand cmd) {\n         String vmInternalCSName = names.first();\n         String vmNameOnVcenter = names.second();\n         String dataDiskController = vmSpec.getDetails().get(VmDetailConstants.DATA_DISK_CONTROLLER);\n-        String rootDiskController = vmSpec.getDetails().get(VmDetailConstants.ROOK_DISK_CONTROLLER);\n+        String rootDiskController = vmSpec.getDetails().get(VmDetailConstants.ROOT_DISK_CONTROLLER);\n \n         // If root disk controller is scsi, then data disk controller would also be scsi instead of using 'osdefault'\n         // This helps avoid mix of different scsi subtype controllers in instance.\n@@ -1451,7 +1451,7 @@ protected StartAnswer execute(StartCommand cmd) {\n                 s_logger.error(msg);\n                 throw new Exception(msg);\n             }\n-\n+            String guestOsId = translateGuestOsIdentifier(vmSpec.getArch(), vmSpec.getOs(), vmSpec.getPlatformEmulator()).value();\n             DiskTO[] disks = validateDisks(vmSpec.getDisks());\n             assert (disks.length > 0);\n             NicTO[] nics = vmSpec.getNics();\n@@ -1564,7 +1564,7 @@ protected StartAnswer execute(StartCommand cmd) {\n                         tearDownVm(vmMo);\n                     }else if (!hyperHost.createBlankVm(vmNameOnVcenter, vmInternalCSName, vmSpec.getCpus(), vmSpec.getMaxSpeed().intValue(),\n                             getReservedCpuMHZ(vmSpec), vmSpec.getLimitCpuUse(), (int)(vmSpec.getMaxRam() / (1024 * 1024)), getReservedMemoryMb(vmSpec),\n-                            translateGuestOsIdentifier(vmSpec.getArch(), vmSpec.getOs(), vmSpec.getPlatformEmulator()).value(), rootDiskDataStoreDetails.first(), false, controllerInfo, systemVm)) {\n+                            guestOsId, rootDiskDataStoreDetails.first(), false, controllerInfo, systemVm)) {\n                         throw new Exception(\"Failed to create VM. vmName: \" + vmInternalCSName);\n                     }\n                 }\n@@ -1588,7 +1588,6 @@ protected StartAnswer execute(StartCommand cmd) {\n             }\n \n             VirtualMachineConfigSpec vmConfigSpec = new VirtualMachineConfigSpec();\n-            String guestOsId = translateGuestOsIdentifier(vmSpec.getArch(), vmSpec.getOs(), vmSpec.getPlatformEmulator()).value();\n \n             VmwareHelper.setBasicVmConfig(vmConfigSpec, vmSpec.getCpus(), vmSpec.getMaxSpeed(),\n                     getReservedCpuMHZ(vmSpec), (int)(vmSpec.getMaxRam() / (1024 * 1024)), getReservedMemoryMb(vmSpec),\n@@ -2322,14 +2321,14 @@ private int getDiskController(VirtualMachineDiskInfo matchingExistingDisk, DiskT\n \n         if (vol.getType() == Volume.Type.ROOT) {\n             Map<String, String> vmDetails = vmSpec.getDetails();\n-            if (vmDetails != null && vmDetails.get(VmDetailConstants.ROOK_DISK_CONTROLLER) != null) {\n-                if (vmDetails.get(VmDetailConstants.ROOK_DISK_CONTROLLER).equalsIgnoreCase(\"scsi\")) {\n+            if (vmDetails != null && vmDetails.get(VmDetailConstants.ROOT_DISK_CONTROLLER) != null) {\n+                if (vmDetails.get(VmDetailConstants.ROOT_DISK_CONTROLLER).equalsIgnoreCase(\"scsi\")) {\n                     s_logger.info(\"Chose disk controller for vol \" + vol.getType() + \" -> scsi, based on root disk controller settings: \" +\n-                            vmDetails.get(VmDetailConstants.ROOK_DISK_CONTROLLER));\n+                            vmDetails.get(VmDetailConstants.ROOT_DISK_CONTROLLER));\n                     controllerKey = scsiControllerKey;\n                 } else {\n                     s_logger.info(\"Chose disk controller for vol \" + vol.getType() + \" -> ide, based on root disk controller settings: \" +\n-                            vmDetails.get(VmDetailConstants.ROOK_DISK_CONTROLLER));\n+                            vmDetails.get(VmDetailConstants.ROOT_DISK_CONTROLLER));\n                     controllerKey = ideControllerKey;\n                 }\n             } else {",
                "raw_url": "https://github.com/apache/cloudstack/raw/8e4644e413777d0a58edd5405a928df8256fdbd9/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "sha": "dd419f2574ff61a1063af69fe313df34ff5cad52",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/8e4644e413777d0a58edd5405a928df8256fdbd9/plugins/hypervisors/vmware/src/com/cloud/storage/resource/VmwareStorageProcessor.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/com/cloud/storage/resource/VmwareStorageProcessor.java?ref=8e4644e413777d0a58edd5405a928df8256fdbd9",
                "deletions": 18,
                "filename": "plugins/hypervisors/vmware/src/com/cloud/storage/resource/VmwareStorageProcessor.java",
                "patch": "@@ -33,6 +33,7 @@\n import java.util.concurrent.Executors;\n import java.util.concurrent.TimeUnit;\n \n+import com.google.common.base.Strings;\n import org.apache.commons.lang.StringUtils;\n import org.apache.log4j.Logger;\n \n@@ -88,7 +89,7 @@\n import com.cloud.hypervisor.vmware.mo.HostStorageSystemMO;\n import com.cloud.hypervisor.vmware.mo.HypervisorHostHelper;\n import com.cloud.hypervisor.vmware.mo.NetworkDetails;\n-import com.cloud.hypervisor.vmware.mo.VirtualMachineDiskInfo;\n+import org.apache.cloudstack.utils.volume.VirtualMachineDiskInfo;\n import com.cloud.hypervisor.vmware.mo.VirtualMachineMO;\n import com.cloud.hypervisor.vmware.mo.VmwareHypervisorHost;\n import com.cloud.hypervisor.vmware.resource.VmwareResource;\n@@ -1363,24 +1364,15 @@ private Answer attachVolume(Command cmd, DiskTO disk, boolean isAttach, boolean\n             AttachAnswer answer = new AttachAnswer(disk);\n \n             if (isAttach) {\n-                String dataDiskController = controllerInfo.get(VmDetailConstants.DATA_DISK_CONTROLLER);\n-                String rootDiskController = controllerInfo.get(VmDetailConstants.ROOK_DISK_CONTROLLER);\n-                DiskControllerType rootDiskControllerType = DiskControllerType.getType(rootDiskController);\n-\n-                if (dataDiskController == null) {\n-                    dataDiskController = getLegacyVmDataDiskController();\n-                } else if ((rootDiskControllerType == DiskControllerType.lsilogic) ||\n-                           (rootDiskControllerType == DiskControllerType.lsisas1068) ||\n-                           (rootDiskControllerType == DiskControllerType.pvscsi) ||\n-                           (rootDiskControllerType == DiskControllerType.buslogic)) {\n-                    //TODO: Support mix of SCSI controller types for single VM. If root disk is already over\n-                    //a SCSI controller then use the same for data volume as well. This limitation will go once mix\n-                    //of SCSI controller types for single VM.\n-                    dataDiskController = rootDiskController;\n-                } else if (DiskControllerType.getType(dataDiskController) == DiskControllerType.osdefault) {\n-                    dataDiskController = vmMo.getRecommendedDiskController(null);\n+                String diskController = getLegacyVmDataDiskController();\n+                if (controllerInfo != null &&\n+                        !Strings.isNullOrEmpty(controllerInfo.get(VmDetailConstants.DATA_DISK_CONTROLLER))) {\n+                    diskController = controllerInfo.get(VmDetailConstants.DATA_DISK_CONTROLLER);\n                 }\n-                vmMo.attachDisk(new String[] {datastoreVolumePath}, morDs, dataDiskController);\n+                if (DiskControllerType.getType(diskController) == DiskControllerType.osdefault) {\n+                    diskController = vmMo.getRecommendedDiskController(null);\n+                }\n+                vmMo.attachDisk(new String[] {datastoreVolumePath}, morDs, diskController);\n             } else {\n                 vmMo.removeAllSnapshots();\n                 vmMo.detachDisk(datastoreVolumePath, false);",
                "raw_url": "https://github.com/apache/cloudstack/raw/8e4644e413777d0a58edd5405a928df8256fdbd9/plugins/hypervisors/vmware/src/com/cloud/storage/resource/VmwareStorageProcessor.java",
                "sha": "567f8576d7bea6632df4a84b508660c1e28682bf",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/8e4644e413777d0a58edd5405a928df8256fdbd9/pom.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/pom.xml?ref=8e4644e413777d0a58edd5405a928df8256fdbd9",
                "deletions": 1,
                "filename": "pom.xml",
                "patch": "@@ -92,7 +92,7 @@\n     <cs.servlet.version>2.5</cs.servlet.version>\n     <cs.jstl.version>1.2</cs.jstl.version>\n     <cs.selenium.server.version>1.0-20081010.060147</cs.selenium.server.version>\n-    <cs.vmware.api.version>5.5</cs.vmware.api.version>\n+    <cs.vmware.api.version>6.0</cs.vmware.api.version>\n     <org.springframework.version>3.2.12.RELEASE</org.springframework.version>\n     <cs.mockito.version>1.9.5</cs.mockito.version>\n     <cs.powermock.version>1.5.3</cs.powermock.version>",
                "raw_url": "https://github.com/apache/cloudstack/raw/8e4644e413777d0a58edd5405a928df8256fdbd9/pom.xml",
                "sha": "af9eb765665e23a9594250a27d12185a902663a3",
                "status": "modified"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/cloudstack/blob/8e4644e413777d0a58edd5405a928df8256fdbd9/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/VolumeApiServiceImpl.java?ref=8e4644e413777d0a58edd5405a928df8256fdbd9",
                "deletions": 1,
                "filename": "server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "patch": "@@ -30,15 +30,18 @@\n \n import com.cloud.utils.EncryptionUtil;\n import com.cloud.utils.db.TransactionCallbackWithException;\n+import com.google.common.base.Strings;\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonParseException;\n \n import org.apache.cloudstack.api.command.user.volume.GetUploadParamsForVolumeCmd;\n import org.apache.cloudstack.api.response.GetUploadParamsResponse;\n import org.apache.cloudstack.engine.subsystem.api.storage.DataObject;\n import org.apache.cloudstack.engine.subsystem.api.storage.EndPoint;\n import org.apache.cloudstack.storage.command.TemplateOrVolumePostUploadCommand;\n import org.apache.cloudstack.utils.imagestore.ImageStoreUtil;\n+import org.apache.cloudstack.utils.volume.VirtualMachineDiskInfo;\n import org.apache.log4j.Logger;\n import org.apache.cloudstack.api.command.user.volume.AttachVolumeCmd;\n import org.apache.cloudstack.api.command.user.volume.CreateVolumeCmd;\n@@ -112,12 +115,14 @@\n import com.cloud.hypervisor.HypervisorCapabilitiesVO;\n import com.cloud.hypervisor.dao.HypervisorCapabilitiesDao;\n import com.cloud.org.Grouping;\n+import com.cloud.serializer.GsonHelper;\n import com.cloud.service.dao.ServiceOfferingDetailsDao;\n import com.cloud.storage.Storage.ImageFormat;\n import com.cloud.storage.dao.DiskOfferingDao;\n import com.cloud.storage.dao.SnapshotDao;\n import com.cloud.storage.dao.VMTemplateDao;\n import com.cloud.storage.dao.VolumeDao;\n+import com.cloud.storage.dao.VolumeDetailsDao;\n import com.cloud.storage.snapshot.SnapshotApiService;\n import com.cloud.storage.snapshot.SnapshotManager;\n import com.cloud.template.TemplateManager;\n@@ -146,6 +151,7 @@\n import com.cloud.utils.exception.CloudRuntimeException;\n import com.cloud.utils.fsm.NoTransitionException;\n import com.cloud.utils.fsm.StateMachine2;\n+import com.cloud.vm.UserVmManager;\n import com.cloud.vm.UserVmVO;\n import com.cloud.vm.VMInstanceVO;\n import com.cloud.vm.VirtualMachine;\n@@ -191,6 +197,8 @@\n     @Inject\n     VolumeDao _volsDao;\n     @Inject\n+    VolumeDetailsDao _volDetailDao;\n+    @Inject\n     HostDao _hostDao;\n     @Inject\n     SnapshotDao _snapshotDao;\n@@ -240,6 +248,9 @@\n     VmWorkJobDao _workJobDao;\n     @Inject\n     ClusterDetailsDao _clusterDetailsDao;\n+    @Inject\n+    UserVmManager _userVmMgr;\n+    protected Gson _gson;\n \n     private List<StoragePoolAllocator> _storagePoolAllocators;\n \n@@ -253,6 +264,7 @@\n \n     protected VolumeApiServiceImpl() {\n         _volStateMachine = Volume.State.getStateMachine();\n+        _gson = GsonHelper.getGsonLogger();\n     }\n \n     /*\n@@ -1835,6 +1847,26 @@ private Volume orchestrateDetachVolumeFromVM(long vmId, long volumeId) {\n         }\n     }\n \n+    public void updateMissingRootDiskController(final VMInstanceVO vm, final String rootVolChainInfo) {\n+        if (vm == null || !VirtualMachine.Type.User.equals(vm.getType()) || Strings.isNullOrEmpty(rootVolChainInfo)) {\n+            return;\n+        }\n+        String rootDiskController = null;\n+        try {\n+            final VirtualMachineDiskInfo infoInChain = _gson.fromJson(rootVolChainInfo, VirtualMachineDiskInfo.class);\n+            if (infoInChain != null) {\n+                rootDiskController = infoInChain.getControllerFromDeviceBusName();\n+            }\n+            final UserVmVO userVmVo = _userVmDao.findById(vm.getId());\n+            if ((rootDiskController != null) && (!rootDiskController.isEmpty())) {\n+                _userVmDao.loadDetails(userVmVo);\n+                _userVmMgr.persistDeviceBusInfo(userVmVo, rootDiskController);\n+            }\n+        } catch (JsonParseException e) {\n+            s_logger.debug(\"Error parsing chain info json: \" + e.getMessage());\n+        }\n+    }\n+\n     @DB\n     @Override\n     @ActionEvent(eventType = EventTypes.EVENT_VOLUME_MIGRATE, eventDescription = \"migrating volume\", async = true)\n@@ -1924,6 +1956,7 @@ public Volume migrateVolume(MigrateVolumeCmd cmd) {\n                                 throw new InvalidParameterValueException(\"Cannot migrate ROOT volume of a stopped VM to a storage pool in a different VMware datacenter\");\n                             }\n                         }\n+                        updateMissingRootDiskController(vm, vol.getChainInfo());\n                     }\n                 }\n             }\n@@ -2472,9 +2505,10 @@ private VolumeVO sendAttachVolumeCommand(UserVmVO vm, VolumeVO volumeToAttach, L\n             }\n             _userVmDao.loadDetails(vm);\n             Map<String, String> controllerInfo = new HashMap<String, String>();\n-            controllerInfo.put(VmDetailConstants.ROOK_DISK_CONTROLLER, vm.getDetail(VmDetailConstants.ROOK_DISK_CONTROLLER));\n+            controllerInfo.put(VmDetailConstants.ROOT_DISK_CONTROLLER, vm.getDetail(VmDetailConstants.ROOT_DISK_CONTROLLER));\n             controllerInfo.put(VmDetailConstants.DATA_DISK_CONTROLLER, vm.getDetail(VmDetailConstants.DATA_DISK_CONTROLLER));\n             cmd.setControllerInfo(controllerInfo);\n+            s_logger.debug(\"Attach volume id:\" + volumeToAttach.getId() +  \" on VM id:\" + vm.getId() + \" has controller info:\" + controllerInfo);\n \n             try {\n                 answer = (AttachAnswer)_agentMgr.send(hostId, cmd);",
                "raw_url": "https://github.com/apache/cloudstack/raw/8e4644e413777d0a58edd5405a928df8256fdbd9/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "sha": "fdd237cecaf38be359377203de70216a61bafeb9",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/8e4644e413777d0a58edd5405a928df8256fdbd9/server/src/com/cloud/vm/UserVmManager.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/UserVmManager.java?ref=8e4644e413777d0a58edd5405a928df8256fdbd9",
                "deletions": 0,
                "filename": "server/src/com/cloud/vm/UserVmManager.java",
                "patch": "@@ -114,4 +114,6 @@ UserVm updateVirtualMachine(long id, String displayName, String group, Boolean h\n     public void removeCustomOfferingDetails(long vmId);\n \n     void generateUsageEvent(VirtualMachine vm, boolean isDisplay, String eventType);\n+\n+    void persistDeviceBusInfo(UserVmVO paramUserVmVO, String paramString);\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/8e4644e413777d0a58edd5405a928df8256fdbd9/server/src/com/cloud/vm/UserVmManager.java",
                "sha": "fe0e98c8cd593f67a307918d06c29c2d09d6340d",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/cloudstack/blob/8e4644e413777d0a58edd5405a928df8256fdbd9/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/UserVmManagerImpl.java?ref=8e4644e413777d0a58edd5405a928df8256fdbd9",
                "deletions": 3,
                "filename": "server/src/com/cloud/vm/UserVmManagerImpl.java",
                "patch": "@@ -89,6 +89,7 @@\n import org.apache.cloudstack.storage.datastore.db.TemplateDataStoreDao;\n import org.apache.cloudstack.storage.datastore.db.TemplateDataStoreVO;\n import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.lang.StringUtils;\n import org.apache.log4j.Logger;\n \n import com.cloud.agent.AgentManager;\n@@ -3509,15 +3510,15 @@ public UserVmVO doInTransaction(TransactionStatus status) throws InsufficientCap\n                 if (hypervisorType.equals(HypervisorType.VMware)) {\n                     if (guestOS.getDisplayName().toLowerCase().contains(\"apple mac os\")) {\n                         vm.setDetail(\"smc.present\", \"TRUE\");\n-                        vm.setDetail(VmDetailConstants.ROOK_DISK_CONTROLLER, \"scsi\");\n+                        vm.setDetail(VmDetailConstants.ROOT_DISK_CONTROLLER, \"scsi\");\n                         vm.setDetail(VmDetailConstants.DATA_DISK_CONTROLLER, \"scsi\");\n                         vm.setDetail(\"firmware\", \"efi\");\n                         s_logger.info(\"guestOS is OSX : overwrite root disk controller to scsi, use smc and efi\");\n                     } else {\n                         String controllerSetting = _configDao.getValue(\"vmware.root.disk.controller\");\n                         // Don't override if VM already has root/data disk controller detail\n-                        if (vm.getDetail(VmDetailConstants.ROOK_DISK_CONTROLLER) == null) {\n-                            vm.setDetail(VmDetailConstants.ROOK_DISK_CONTROLLER, controllerSetting);\n+                        if (vm.getDetail(VmDetailConstants.ROOT_DISK_CONTROLLER) == null) {\n+                            vm.setDetail(VmDetailConstants.ROOT_DISK_CONTROLLER, controllerSetting);\n                         }\n                         if (vm.getDetail(VmDetailConstants.DATA_DISK_CONTROLLER) == null) {\n                             if (controllerSetting.equalsIgnoreCase(\"scsi\")) {\n@@ -5455,6 +5456,17 @@ private void encryptAndStorePassword(UserVmVO vm, String password) {\n         }\n     }\n \n+    public void persistDeviceBusInfo(UserVmVO vm, String rootDiskController) {\n+        String existingVmRootDiskController = vm.getDetail(VmDetailConstants.ROOT_DISK_CONTROLLER);\n+        if (StringUtils.isEmpty(existingVmRootDiskController) && !StringUtils.isEmpty(rootDiskController)) {\n+            vm.setDetail(VmDetailConstants.ROOT_DISK_CONTROLLER, rootDiskController);\n+            _vmDao.saveDetails(vm);\n+            if (s_logger.isDebugEnabled()) {\n+                s_logger.debug(\"Persisted device bus information rootDiskController=\" + rootDiskController + \" for vm: \" + vm.getDisplayName());\n+            }\n+        }\n+    }\n+\n     @Override\n     public String getConfigComponentName() {\n         return UserVmManager.class.getSimpleName();",
                "raw_url": "https://github.com/apache/cloudstack/raw/8e4644e413777d0a58edd5405a928df8256fdbd9/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "sha": "832a94881765ccf2455a6daab7a0026b7f88299f",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/cloudstack/blob/8e4644e413777d0a58edd5405a928df8256fdbd9/server/test/com/cloud/storage/VolumeApiServiceImplTest.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/test/com/cloud/storage/VolumeApiServiceImplTest.java?ref=8e4644e413777d0a58edd5405a928df8256fdbd9",
                "deletions": 0,
                "filename": "server/test/com/cloud/storage/VolumeApiServiceImplTest.java",
                "patch": "@@ -18,7 +18,11 @@\n \n import static org.mockito.Matchers.any;\n import static org.mockito.Matchers.anyLong;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n import java.lang.reflect.Field;\n@@ -28,7 +32,10 @@\n \n import javax.inject.Inject;\n \n+import com.cloud.serializer.GsonHelper;\n import com.cloud.user.User;\n+import com.cloud.vm.UserVmManager;\n+import com.cloud.vm.VirtualMachine;\n import junit.framework.Assert;\n import org.apache.cloudstack.api.command.user.volume.CreateVolumeCmd;\n import org.junit.After;\n@@ -101,6 +108,8 @@\n     VolumeService volService;\n     @Mock\n     CreateVolumeCmd createVol;\n+    @Mock\n+    UserVmManager _userVmMgr;\n \n     DetachVolumeCmd detachCmd = new DetachVolumeCmd();\n     Class<?> _detachCmdClass = detachCmd.getClass();\n@@ -118,6 +127,8 @@ public void setup() throws Exception {\n         _svc._jobMgr = _jobMgr;\n         _svc.volFactory = _volFactory;\n         _svc.volService = volService;\n+        _svc._userVmMgr = _userVmMgr;\n+        _svc._gson = GsonHelper.getGsonLogger();\n \n         // mock caller context\n         AccountVO account = new AccountVO(\"admin\", 1L, \"networkDomain\", Account.ACCOUNT_TYPE_NORMAL, \"uuid\");\n@@ -383,6 +394,20 @@ public void testNonEmptyGetVolumeNameFromCmd() {\n         Assert.assertSame(_svc.getVolumeNameFromCommand(createVol), \"abc\");\n     }\n \n+    @Test\n+    public void testUpdateMissingRootDiskControllerWithNullChainInfo() {\n+        _svc.updateMissingRootDiskController(null, null);\n+        verify(_svc._userVmMgr, times(0)).persistDeviceBusInfo(any(UserVmVO.class), anyString());\n+    }\n+\n+    @Test\n+    public void testUpdateMissingRootDiskControllerWithValidChainInfo() {\n+        UserVmVO vm = _svc._userVmDao.findById(1L);\n+        assert vm.getType() == VirtualMachine.Type.User;\n+        _svc.updateMissingRootDiskController(vm, \"{\\\"diskDeviceBusName\\\":\\\"scsi0:0\\\",\\\"diskChain\\\":[\\\"[somedatastore] i-3-VM-somePath/ROOT-1.vmdk\\\"]}\");\n+        verify(_svc._userVmMgr, times(1)).persistDeviceBusInfo(any(UserVmVO.class), eq(\"scsi\"));\n+    }\n+\n     @After\n     public void tearDown() {\n         CallContext.unregister();",
                "raw_url": "https://github.com/apache/cloudstack/raw/8e4644e413777d0a58edd5405a928df8256fdbd9/server/test/com/cloud/storage/VolumeApiServiceImplTest.java",
                "sha": "71f6deddf60c0ba6b6a1cb2ac869b78cf6ce9c75",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/cloudstack/blob/8e4644e413777d0a58edd5405a928df8256fdbd9/server/test/com/cloud/vm/UserVmManagerTest.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/test/com/cloud/vm/UserVmManagerTest.java?ref=8e4644e413777d0a58edd5405a928df8256fdbd9",
                "deletions": 0,
                "filename": "server/test/com/cloud/vm/UserVmManagerTest.java",
                "patch": "@@ -928,4 +928,25 @@ public void testUpdateVmNicIpFailure3() throws Exception {\n             CallContext.unregister();\n         }\n     }\n+\n+    @Test\n+    public void testPersistDeviceBusInfoWithNullController() {\n+        when(_vmMock.getDetail(any(String.class))).thenReturn(null);\n+        _userVmMgr.persistDeviceBusInfo(_vmMock, null);\n+        verify(_vmDao, times(0)).saveDetails(any(UserVmVO.class));\n+    }\n+\n+    @Test\n+    public void testPersistDeviceBusInfoWithEmptyController() {\n+        when(_vmMock.getDetail(any(String.class))).thenReturn(\"\");\n+        _userVmMgr.persistDeviceBusInfo(_vmMock, \"\");\n+        verify(_vmDao, times(0)).saveDetails(any(UserVmVO.class));\n+    }\n+\n+    @Test\n+    public void testPersistDeviceBusInfo() {\n+        when(_vmMock.getDetail(any(String.class))).thenReturn(null);\n+        _userVmMgr.persistDeviceBusInfo(_vmMock, \"lsilogic\");\n+        verify(_vmDao, times(1)).saveDetails(any(UserVmVO.class));\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/8e4644e413777d0a58edd5405a928df8256fdbd9/server/test/com/cloud/vm/UserVmManagerTest.java",
                "sha": "637a30922190c69d90a99b57c8d73229aaf8ff7a",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cloudstack/blob/8e4644e413777d0a58edd5405a928df8256fdbd9/utils/src/main/java/org/apache/cloudstack/utils/volume/VirtualMachineDiskInfo.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/main/java/org/apache/cloudstack/utils/volume/VirtualMachineDiskInfo.java?ref=8e4644e413777d0a58edd5405a928df8256fdbd9",
                "deletions": 6,
                "filename": "utils/src/main/java/org/apache/cloudstack/utils/volume/VirtualMachineDiskInfo.java",
                "patch": "@@ -15,14 +15,13 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-package com.cloud.hypervisor.vmware.mo;\n+package org.apache.cloudstack.utils.volume;\n \n-public class VirtualMachineDiskInfo {\n-    String diskDeviceBusName;\n-    String[] diskChain;\n+import org.apache.commons.lang.StringUtils;\n \n-    public VirtualMachineDiskInfo() {\n-    }\n+public class VirtualMachineDiskInfo {\n+    private String diskDeviceBusName;\n+    private String[] diskChain;\n \n     public String getDiskDeviceBusName() {\n         return diskDeviceBusName;\n@@ -39,4 +38,11 @@ public void setDiskDeviceBusName(String diskDeviceBusName) {\n     public void setDiskChain(String[] diskChain) {\n         this.diskChain = diskChain;\n     }\n+\n+    public String getControllerFromDeviceBusName() {\n+        if (StringUtils.isEmpty(diskDeviceBusName) || !diskDeviceBusName.contains(\":\")) {\n+            return null;\n+        }\n+        return diskDeviceBusName.substring(0, diskDeviceBusName.indexOf(\":\") - 1);\n+    }\n }",
                "previous_filename": "vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineDiskInfo.java",
                "raw_url": "https://github.com/apache/cloudstack/raw/8e4644e413777d0a58edd5405a928df8256fdbd9/utils/src/main/java/org/apache/cloudstack/utils/volume/VirtualMachineDiskInfo.java",
                "sha": "c158f10d3a392df789838acbeab3ad4a5a754fa6",
                "status": "renamed"
            },
            {
                "additions": 55,
                "blob_url": "https://github.com/apache/cloudstack/blob/8e4644e413777d0a58edd5405a928df8256fdbd9/utils/src/test/java/org/apache/cloudstack/utils/volume/VirtualMachineDiskInfoTest.java",
                "changes": 55,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/test/java/org/apache/cloudstack/utils/volume/VirtualMachineDiskInfoTest.java?ref=8e4644e413777d0a58edd5405a928df8256fdbd9",
                "deletions": 0,
                "filename": "utils/src/test/java/org/apache/cloudstack/utils/volume/VirtualMachineDiskInfoTest.java",
                "patch": "@@ -0,0 +1,55 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+\n+package org.apache.cloudstack.utils.volume;\n+\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonParseException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class VirtualMachineDiskInfoTest {\n+\n+    @Test\n+    public void testGetControllerFromDeviceBusName() {\n+        VirtualMachineDiskInfo vmDiskInfo = new VirtualMachineDiskInfo();\n+        vmDiskInfo.setDiskDeviceBusName(\"scsi0:0\");\n+        String[] diskChain = new String[]{\"[somedatastore] i-3-VM-somePath/ROOT-1.vmdk\"};\n+        vmDiskInfo.setDiskChain(diskChain);\n+        Assert.assertEquals(vmDiskInfo.getControllerFromDeviceBusName(), \"scsi\");\n+        Assert.assertArrayEquals(vmDiskInfo.getDiskChain(), diskChain);\n+    }\n+\n+    @Test\n+    public void testGetControllerFromDeviceBusNameWithInvalidBusName() {\n+        VirtualMachineDiskInfo vmDiskInfo = new VirtualMachineDiskInfo();\n+        vmDiskInfo.setDiskDeviceBusName(\"scsi0\");\n+        Assert.assertEquals(vmDiskInfo.getControllerFromDeviceBusName(), null);\n+    }\n+\n+    @Test\n+    public void testGSonDeserialization() throws JsonParseException {\n+        VirtualMachineDiskInfo infoInChain = new GsonBuilder().create().fromJson(\"{\\\"diskDeviceBusName\\\":\\\"scsi0:0\\\",\\\"diskChain\\\":[\\\"[somedatastore] i-3-VM-somePath/ROOT-1.vmdk\\\"]}\", VirtualMachineDiskInfo.class);\n+        Assert.assertEquals(infoInChain.getDiskDeviceBusName(), \"scsi0:0\");\n+        Assert.assertEquals(infoInChain.getControllerFromDeviceBusName(), \"scsi\");\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/8e4644e413777d0a58edd5405a928df8256fdbd9/utils/src/test/java/org/apache/cloudstack/utils/volume/VirtualMachineDiskInfoTest.java",
                "sha": "8b858d4c9ab6afce8f6c00ec99f734543bc57016",
                "status": "added"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/8e4644e413777d0a58edd5405a928df8256fdbd9/vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineDiskInfoBuilder.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineDiskInfoBuilder.java?ref=8e4644e413777d0a58edd5405a928df8256fdbd9",
                "deletions": 0,
                "filename": "vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineDiskInfoBuilder.java",
                "patch": "@@ -17,6 +17,8 @@\n \n package com.cloud.hypervisor.vmware.mo;\n \n+import org.apache.cloudstack.utils.volume.VirtualMachineDiskInfo;\n+\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;",
                "raw_url": "https://github.com/apache/cloudstack/raw/8e4644e413777d0a58edd5405a928df8256fdbd9/vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineDiskInfoBuilder.java",
                "sha": "3b310fb586e34b88212d7f222b5ccdd863efe3d7",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/8e4644e413777d0a58edd5405a928df8256fdbd9/vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java?ref=8e4644e413777d0a58edd5405a928df8256fdbd9",
                "deletions": 1,
                "filename": "vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java",
                "patch": "@@ -2137,7 +2137,7 @@ public int getScsiDiskControllerKey(String diskController) throws Exception {\n         }\n \n         assert (false);\n-        throw new Exception(diskController + \" Controller Not Found\");\n+        throw new IllegalStateException(\"Scsi disk controller of type \" + diskController + \" not found among configured devices.\");\n     }\n \n     public int getScsiDiskControllerKeyNoException(String diskController) throws Exception {",
                "raw_url": "https://github.com/apache/cloudstack/raw/8e4644e413777d0a58edd5405a928df8256fdbd9/vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java",
                "sha": "8b9d4e73beaa1dedcf10ecd09765a687658b0d06",
                "status": "modified"
            }
        ],
        "message": "vmware: improve support for disks\n\n- Improve disk chain usage while attaching, migrating disks\n- Gets root disk controller based diskDeviceBusName from volume's chain info\n- Refactor and move VirtualMachineDiskInfo to cloud-utils\n- Allows mixing of scsi controller types\n- Fixes a NPE case with map passed as null, for example in case of detach volume\n  command\n- Use a osdefault translator that allow use of recent os types added (enums of\n  which) are not available in the sdk\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/6f703c4cdc32f4edbf95a5c8f0959fab9beea01b",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineMOTest.java"
        ]
    },
    "cloudstack_8f6fdc3": {
        "bug_id": "cloudstack_8f6fdc3",
        "commit": "https://github.com/apache/cloudstack/commit/8f6fdc3efc37a2e97d1b745e9109e1fc85a990f4",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/8f6fdc3efc37a2e97d1b745e9109e1fc85a990f4/plugins/hypervisors/xen/src/com/cloud/hypervisor/xen/resource/CitrixResourceBase.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/xen/src/com/cloud/hypervisor/xen/resource/CitrixResourceBase.java?ref=8f6fdc3efc37a2e97d1b745e9109e1fc85a990f4",
                "deletions": 2,
                "filename": "plugins/hypervisors/xen/src/com/cloud/hypervisor/xen/resource/CitrixResourceBase.java",
                "patch": "@@ -4333,8 +4333,13 @@ protected boolean getHostInfo(Connection conn) throws IllegalArgumentException{\n             }\n             XsLocalNetwork storageNic1 = null;\n             storageNic1 = getNetworkByName(conn, _storageNetworkName1);\n-            _host.storageNetwork1 = storageNic1.getNetworkRecord(conn).uuid;\n-            _host.storagePif1 = storageNic1.getPifRecord(conn).uuid;\n+            if (storageNic1 == null) {\n+                s_logger.warn(\"Unable to find storage network \" + _storageNetworkName1 + \" for host \" + _host.ip);\n+                throw new IllegalArgumentException(\"Unable to find storage network \" + _storageNetworkName1 + \" for host \" + _host.ip);\n+            } else {\n+                _host.storageNetwork1 = storageNic1.getNetworkRecord(conn).uuid;\n+                _host.storagePif1 = storageNic1.getPifRecord(conn).uuid;\n+            }\n \n             XsLocalNetwork storageNic2 = null;\n             if (_storageNetworkName2 != null) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/8f6fdc3efc37a2e97d1b745e9109e1fc85a990f4/plugins/hypervisors/xen/src/com/cloud/hypervisor/xen/resource/CitrixResourceBase.java",
                "sha": "36a12b1b4fa8163248daf5000e8c36dec2990574",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-227: Fix NPE and throw an exception if the network is not found in Xen\n\nSigned-off-by: Rohit Yadav <bhaisaab@apache.org>",
        "parent": "https://github.com/apache/cloudstack/commit/f0c3b4c62a7a1a440d723696d61b42dad58f6faf",
        "repo": "cloudstack",
        "unit_tests": [
            "CitrixResourceBaseTest.java"
        ]
    },
    "cloudstack_8f9f39f": {
        "bug_id": "cloudstack_8f9f39f",
        "commit": "https://github.com/apache/cloudstack/commit/8f9f39fa39867467d73b58cd4b7de118cd8fa47f",
        "file": [
            {
                "additions": 808,
                "blob_url": "https://github.com/apache/cloudstack/blob/8f9f39fa39867467d73b58cd4b7de118cd8fa47f/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 1591,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=8f9f39fa39867467d73b58cd4b7de118cd8fa47f",
                "deletions": 783,
                "filename": "engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "raw_url": "https://github.com/apache/cloudstack/raw/8f9f39fa39867467d73b58cd4b7de118cd8fa47f/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "d6b2da5f45e23aba5915f643a7f014dcbeeec35f",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/cloudstack/blob/8f9f39fa39867467d73b58cd4b7de118cd8fa47f/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java?ref=8f9f39fa39867467d73b58cd4b7de118cd8fa47f",
                "deletions": 15,
                "filename": "server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "patch": "@@ -169,13 +169,13 @@\n import com.cloud.network.router.VirtualRouter.Role;\n import com.cloud.network.rules.FirewallRule;\n import com.cloud.network.rules.FirewallRule.Purpose;\n+import com.cloud.network.rules.FirewallRuleVO;\n import com.cloud.network.rules.LoadBalancerContainer.Scheme;\n import com.cloud.network.rules.PortForwardingRule;\n import com.cloud.network.rules.RulesManager;\n import com.cloud.network.rules.StaticNat;\n import com.cloud.network.rules.StaticNatImpl;\n import com.cloud.network.rules.StaticNatRule;\n-import com.cloud.network.rules.FirewallRuleVO;\n import com.cloud.network.rules.dao.PortForwardingRulesDao;\n import com.cloud.network.vpn.Site2SiteVpnManager;\n import com.cloud.offering.NetworkOffering;\n@@ -745,10 +745,14 @@ protected void runInContext() {\n                         final List<? extends Nic> routerNics = _nicDao.listByVmId(router.getId());\n                         for (final Nic routerNic : routerNics) {\n                             final Network network = _networkModel.getNetwork(routerNic.getNetworkId());\n-                            // Send network usage command for public nic in VPC\n-                            // VR\n-                            // Send network usage command for isolated guest nic\n-                            // of non VPC VR\n+                            // Send network usage command for public nic in VPC VR\n+                            // Send network usage command for isolated guest nic of non) VPC VR\n+\n+                            //[TODO] Avoiding the NPE now, but I have to find out what is going on with the network. - Wilder Rodrigues\n+                            if (network == null) {\n+                                s_logger.error(\"Could not find a network with ID => \" + routerNic.getNetworkId() + \". It might be a problem!\");\n+                                continue;\n+                            }\n                             if (forVpc && network.getTrafficType() == TrafficType.Public || !forVpc && network.getTrafficType() == TrafficType.Guest\n                                     && network.getGuestType() == Network.GuestType.Isolated) {\n                                 final NetworkUsageCommand usageCmd = new NetworkUsageCommand(privateIP, router.getHostName(), forVpc, routerNic.getIp4Address());\n@@ -1917,23 +1921,23 @@ protected void finalizeNetworkRulesForNetwork(final Commands cmds, final DomainR\n         }\n     }\n \n-    private void createDefaultEgressFirewallRule(List<FirewallRule> rules, long networkId) {\n+    private void createDefaultEgressFirewallRule(final List<FirewallRule> rules, final long networkId) {\n         String systemRule = null;\n \n         Boolean defaultEgressPolicy = false;\n-        NetworkVO network = _networkDao.findById(networkId);\n-        NetworkOfferingVO offering = _networkOfferingDao.findById(network.getNetworkOfferingId());\n+        final NetworkVO network = _networkDao.findById(networkId);\n+        final NetworkOfferingVO offering = _networkOfferingDao.findById(network.getNetworkOfferingId());\n         defaultEgressPolicy = offering.getEgressDefaultPolicy();\n \n \n         // construct rule when egress policy is true. In true case for VR we default allow rule need to be added\n         if (!defaultEgressPolicy) {\n             systemRule = String.valueOf(FirewallRule.FirewallRuleType.System);\n \n-            List<String> sourceCidr = new ArrayList<String>();\n+            final List<String> sourceCidr = new ArrayList<String>();\n \n             sourceCidr.add(NetUtils.ALL_CIDRS);\n-            FirewallRule rule = new FirewallRuleVO(null, null, null, null, \"all\", networkId, network.getAccountId(), network.getDomainId(), Purpose.Firewall, sourceCidr,\n+            final FirewallRule rule = new FirewallRuleVO(null, null, null, null, \"all\", networkId, network.getAccountId(), network.getDomainId(), Purpose.Firewall, sourceCidr,\n                     null, null, null, FirewallRule.TrafficType.Egress, FirewallRule.FirewallRuleType.System);\n \n             rules.add(rule);\n@@ -2023,6 +2027,7 @@ public boolean finalizeStart(final VirtualMachineProfile profile, final long hos\n                 final String errorDetails = \"Details: \" + answer.getDetails() + \" \" + answer.toString();\n                 // add alerts for the failed commands\n                 _alertMgr.sendAlert(AlertService.AlertType.ALERT_TYPE_DOMAIN_ROUTER, router.getDataCenterId(), router.getPodIdToDeployIn(), errorMessage, errorDetails);\n+                s_logger.error(answer.getDetails());\n                 s_logger.warn(errorMessage);\n                 // Stop the router if any of the commands failed\n                 return false;\n@@ -2590,20 +2595,20 @@ public boolean postStateTransitionEvent(final StateMachine2.Transition<State, Vi\n             if (vo.getType() == VirtualMachine.Type.DomainRouter) {\n                 // opaque -> <hostId, powerHostId>\n                 if (opaque != null && opaque instanceof Pair<?, ?>) {\n-                    Pair<?, ?> pair = (Pair<?, ?>)opaque;\n-                    Object first = pair.first();\n-                    Object second = pair.second();\n+                    final Pair<?, ?> pair = (Pair<?, ?>)opaque;\n+                    final Object first = pair.first();\n+                    final Object second = pair.second();\n                     // powerHostId cannot be null in case of out-of-band VM movement\n                     if (second != null && second instanceof Long) {\n-                        Long powerHostId = (Long)second;\n+                        final Long powerHostId = (Long)second;\n                         Long hostId = null;\n                         if (first != null && first instanceof Long) {\n                             hostId = (Long)first;\n                         }\n                         // The following scenarios are due to out-of-band VM movement\n                         // 1. If VM is in stopped state in CS due to 'PowerMissing' report from old host (hostId is null) and then there is a 'PowerOn' report from new host\n                         // 2. If VM is in running state in CS and there is a 'PowerOn' report from new host\n-                        if (hostId == null || (hostId.longValue() != powerHostId.longValue())) {\n+                        if (hostId == null || hostId.longValue() != powerHostId.longValue()) {\n                             s_logger.info(\"Schedule a router reboot task as router \" + vo.getId() + \" is powered-on out-of-band, need to reboot to refresh network rules\");\n                             _executor.schedule(new RebootTask(vo.getId()), 1000, TimeUnit.MICROSECONDS);\n                         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/8f9f39fa39867467d73b58cd4b7de118cd8fa47f/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "sha": "37abd7182a7e5ffb1fd0959154e6e70a86b6582a",
                "status": "modified"
            }
        ],
        "message": "[TK-3119] Fix NPEs and improve exception handling + error messages",
        "parent": "https://github.com/apache/cloudstack/commit/406af7e855f39adb4cb72486575ac90ecf57c873",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualNetworkApplianceManagerImplTest.java"
        ]
    },
    "cloudstack_901f52e": {
        "bug_id": "cloudstack_901f52e",
        "commit": "https://github.com/apache/cloudstack/commit/901f52eb99ea82effc8b50e6db8528ed42424681",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/901f52eb99ea82effc8b50e6db8528ed42424681/server/src/com/cloud/server/ManagementServerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/ManagementServerImpl.java?ref=901f52eb99ea82effc8b50e6db8528ed42424681",
                "deletions": 1,
                "filename": "server/src/com/cloud/server/ManagementServerImpl.java",
                "patch": "@@ -821,7 +821,7 @@ private boolean deleteUserInternal(long userId) {\n                 s_logger.debug(\"Remove account \" + accountId);\n             }\n \n-            AccountVO account = _accountDao.findById(accountId);\n+            AccountVO account = _accountDao.findByIdIncludingRemoved(accountId);\n             deleteAccount(account);\n             EventUtils.saveEvent(Long.valueOf(1), Long.valueOf(1), EventVO.LEVEL_INFO, EventTypes.EVENT_USER_DELETE, \"User \" + username + \" (id: \" + userId\n                     + \") for accountId = \" + accountId + \" and domainId = \" + userAccount.getDomainId() + \" was deleted.\");",
                "raw_url": "https://github.com/apache/cloudstack/raw/901f52eb99ea82effc8b50e6db8528ed42424681/server/src/com/cloud/server/ManagementServerImpl.java",
                "sha": "b346e2fa2747808224c94d0423fdd7b240d0a600",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/901f52eb99ea82effc8b50e6db8528ed42424681/server/src/com/cloud/user/AccountManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/user/AccountManagerImpl.java?ref=901f52eb99ea82effc8b50e6db8528ed42424681",
                "deletions": 1,
                "filename": "server/src/com/cloud/user/AccountManagerImpl.java",
                "patch": "@@ -125,7 +125,7 @@ public void decrementResourceCount(long accountId, ResourceType type, Long...del\n \n                 // on a per-domain basis, decrement the count\n                 // FIXME:  can this decrement be done on the database side in a custom update statement?\n-                Account account = _accountDao.findById(accountId);\n+                Account account = _accountDao.findByIdIncludingRemoved(accountId);  // find all accounts, even removed accounts if this happens to be for an account that's being deleted\n                 Long domainId = account.getDomainId();\n                 while (domainId != null) {\n                     _resourceCountDao.updateDomainCount(domainId, type, false, numToDecrement);",
                "raw_url": "https://github.com/apache/cloudstack/raw/901f52eb99ea82effc8b50e6db8528ed42424681/server/src/com/cloud/user/AccountManagerImpl.java",
                "sha": "05b2f75e68e3d712be2783e0824aaeb0f6fa808d",
                "status": "modified"
            }
        ],
        "message": "bug 6782:  incremental checkin for deleting an account.  Since there was a change to findById to not find removed objects, these NPEs pop up from time to time where we expected to find the object previously and now it's not found.  Since the account is getting deleted, do a findByIdIncludingRemoved to make sure the actual account object is retrieved.",
        "parent": "https://github.com/apache/cloudstack/commit/f26f40c04956f3fb429fcd0d98346aff38ba8c05",
        "repo": "cloudstack",
        "unit_tests": [
            "AccountManagerImplTest.java"
        ]
    },
    "cloudstack_91a87f9": {
        "bug_id": "cloudstack_91a87f9",
        "commit": "https://github.com/apache/cloudstack/commit/91a87f9d8f34231dd7b580ed72ad7f0edef28acf",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/91a87f9d8f34231dd7b580ed72ad7f0edef28acf/server/src/com/cloud/api/ApiServlet.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiServlet.java?ref=91a87f9d8f34231dd7b580ed72ad7f0edef28acf",
                "deletions": 1,
                "filename": "server/src/com/cloud/api/ApiServlet.java",
                "patch": "@@ -97,8 +97,12 @@ private void processRequest(HttpServletRequest req, HttpServletResponse resp) {\n                     if (session != null) {  \r\n                         Long userId = (Long)session.getAttribute(\"userid\");\n                         Account account = (Account)session.getAttribute(\"accountobj\");\n+                        Long accountId = null;\n+                        if (account != null) {\n+                            accountId = account.getId();\n+                        }\n                         auditTrailSb.insert(0, \"(userId=\"+userId+ \n-                                \" accountId=\"+ account==null ? null:account.getId()+ \n+                                \" accountId=\"+ accountId + \n                                 \" sessionId=\"+session.getId() +\")\" );\r\n                         if (userId != null) {\r\n                             _apiServer.logoutUser(userId);\r",
                "raw_url": "https://github.com/apache/cloudstack/raw/91a87f9d8f34231dd7b580ed72ad7f0edef28acf/server/src/com/cloud/api/ApiServlet.java",
                "sha": "5620015508fe6744661896fe23c125437b2f1337",
                "status": "modified"
            }
        ],
        "message": "bug 7155: fixed NPE in AuditTrial which used to happen when logout command was executed when session was already invalidated.\nstatus 7155: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/28dd8185ddb950e0c216eeef31efde3ce0fc3e56",
        "repo": "cloudstack",
        "unit_tests": [
            "ApiServletTest.java"
        ]
    },
    "cloudstack_91bfedd": {
        "bug_id": "cloudstack_91bfedd",
        "commit": "https://github.com/apache/cloudstack/commit/91bfedd2c7ed7db86a5b1167bb955977da0f1817",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/91bfedd2c7ed7db86a5b1167bb955977da0f1817/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=91bfedd2c7ed7db86a5b1167bb955977da0f1817",
                "deletions": 4,
                "filename": "engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -744,14 +744,17 @@ protected boolean checkWorkItems(final VMInstanceVO vm, final State state) throw\n \n     protected <T extends VMInstanceVO> boolean changeState(final T vm, final Event event, final Long hostId, final ItWorkVO work, final Step step) throws NoTransitionException {\n         // FIXME: We should do this better.\n-        final Step previousStep = work.getStep();\n-        _workDao.updateStep(work, step);\n+        Step previousStep = null;\n+        if (work != null) {\n+            previousStep = work.getStep();\n+            _workDao.updateStep(work, step);\n+        }\n         boolean result = false;\n         try {\n             result = stateTransitTo(vm, event, hostId);\n             return result;\n         } finally {\n-            if (!result) {\n+            if (!result && work != null) {\n                 _workDao.updateStep(work, previousStep);\n             }\n         }\n@@ -1507,12 +1510,13 @@ private void advanceStop(final VMInstanceVO vm, final boolean cleanUpEvenIfUnabl\n             if (doCleanup) {\n                 if (cleanup(vmGuru, new VirtualMachineProfileImpl(vm), work, Event.StopRequested, cleanUpEvenIfUnableToStop)) {\n                     try {\n-                        if (s_logger.isDebugEnabled()) {\n+                        if (s_logger.isDebugEnabled() && work != null) {\n                             s_logger.debug(\"Updating work item to Done, id:\" + work.getId());\n                         }\n                         if (!changeState(vm, Event.AgentReportStopped, null, work, Step.Done)) {\n                             throw new CloudRuntimeException(\"Unable to stop \" + vm);\n                         }\n+\n                     } catch (final NoTransitionException e) {\n                         s_logger.warn(\"Unable to cleanup \" + vm);\n                         throw new CloudRuntimeException(\"Unable to stop \" + vm, e);",
                "raw_url": "https://github.com/apache/cloudstack/raw/91bfedd2c7ed7db86a5b1167bb955977da0f1817/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "03a37987752f51590c78c40fa7a65f5052aa7fa1",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-9796 - Fix NPE in VirtualMachineManagerImpl.java\n\nThis checks the work variable for NULL in all cases where it is\nused.  Fixes CLOUDSTACK-9796.",
        "parent": "https://github.com/apache/cloudstack/commit/e860249e4f0cfc8b93b46f870efa2eeace8bb703",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_92ad6ab": {
        "bug_id": "cloudstack_92ad6ab",
        "commit": "https://github.com/apache/cloudstack/commit/92ad6abab0063771dffaabb7c9d6d8256083c5be",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/92ad6abab0063771dffaabb7c9d6d8256083c5be/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java?ref=92ad6abab0063771dffaabb7c9d6d8256083c5be",
                "deletions": 1,
                "filename": "server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "patch": "@@ -2609,7 +2609,7 @@ public void finalizeStop(VirtualMachineProfile<DomainRouterVO> profile, StopAnsw\n             List<? extends Nic> routerNics = _nicDao.listByVmId(profile.getId());\n             for (Nic nic : routerNics) {\n             \tNetwork network = _networkModel.getNetwork(nic.getNetworkId());\n-            \tif (network.getTrafficType() == TrafficType.Guest && nic.getBroadcastUri().getScheme().equals(\"pvlan\")) {\n+            \tif (network.getTrafficType() == TrafficType.Guest && nic.getBroadcastUri() != null && nic.getBroadcastUri().getScheme().equals(\"pvlan\")) {\n                 \tNicProfile nicProfile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), 0, false, \"pvlan-nic\");\n             \t\tsetupDhcpForPvlan(false, domR, domR.getHostId(), nicProfile);\n             \t}",
                "raw_url": "https://github.com/apache/cloudstack/raw/92ad6abab0063771dffaabb7c9d6d8256083c5be/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "sha": "b969be25fde564eb02b0a6eb0b120e94b5560ebf",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/92ad6abab0063771dffaabb7c9d6d8256083c5be/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/UserVmManagerImpl.java?ref=92ad6abab0063771dffaabb7c9d6d8256083c5be",
                "deletions": 1,
                "filename": "server/src/com/cloud/vm/UserVmManagerImpl.java",
                "patch": "@@ -3059,7 +3059,7 @@ public void finalizeStop(VirtualMachineProfile<UserVmVO> profile,\n         for (NicVO nic : nics) {\n             NetworkVO network = _networkDao.findById(nic.getNetworkId());\n             if (network.getTrafficType() == TrafficType.Guest) {\n-                if (nic.getBroadcastUri().getScheme().equals(\"pvlan\")) {\n+                if (nic.getBroadcastUri() != null && nic.getBroadcastUri().getScheme().equals(\"pvlan\")) {\n                 \tNicProfile nicProfile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), 0, false, \"pvlan-nic\");\n                 \tsetupVmForPvlan(false, vm.getHostId(), nicProfile);\n                 }",
                "raw_url": "https://github.com/apache/cloudstack/raw/92ad6abab0063771dffaabb7c9d6d8256083c5be/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "sha": "5e206567beda74e90f425ac2274512dc41b9c608",
                "status": "modified"
            }
        ],
        "message": "PVLAN: Fix NPE when VM are in allocated state\n\nIf vlan is not assigned for VM, nic.getBroadcastUri() would be null. Then just\nignore it.",
        "parent": "https://github.com/apache/cloudstack/commit/a75cf9a79d9f3f3c6c399b03e73362523e3d815a",
        "repo": "cloudstack",
        "unit_tests": [
            "UserVmManagerImplTest.java"
        ]
    },
    "cloudstack_9366290": {
        "bug_id": "cloudstack_9366290",
        "commit": "https://github.com/apache/cloudstack/commit/93662904236e3b888f07ad77d506d5d656d20b33",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cloudstack/blob/93662904236e3b888f07ad77d506d5d656d20b33/server/src/com/cloud/network/element/VirtualRouterElement.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/element/VirtualRouterElement.java?ref=93662904236e3b888f07ad77d506d5d656d20b33",
                "deletions": 3,
                "filename": "server/src/com/cloud/network/element/VirtualRouterElement.java",
                "patch": "@@ -62,6 +62,7 @@\n import com.cloud.vm.UserVmManager;\n import com.cloud.vm.VirtualMachine;\n import com.cloud.vm.VirtualMachineProfile;\n+import com.cloud.vm.VirtualMachine.State;\n import com.cloud.vm.dao.DomainRouterDao;\n import com.cloud.vm.dao.UserVmDao;\n \n@@ -152,17 +153,22 @@ public boolean restart(Network network, ReservationContext context) throws Concu\n         }\n         \n         /* Get the host_id in order to find the cluster */\n-        long host_id = 0;\n+        Long host_id = new Long(0);\n         for (DomainRouterVO router : routers) {\n-            host_id = router.getHostId();\n+            if (host_id == null || host_id == 0) {\n+                host_id = (router.getHostId() != null ? router.getHostId() : router.getLastHostId());\n+            }\n             /* FIXME it's not completely safe to ignore these failure, but we would try to push on now */\n-            if (_routerMgr.stopRouter(router.getId(), false) == null) {\n+            if (router.getState() != State.Stopped || _routerMgr.stopRouter(router.getId(), false) == null) {\n                 s_logger.warn(\"Failed to stop virtual router element \" + router + \" as a part of network \" + network + \" restart\");\n             }\n             if (!_routerMgr.destroyRouter(router.getId())) {\n                 s_logger.warn(\"Failed to destroy virtual router element \" + router + \" as a part of network \" + network + \" restart\");\n             }\n         }\n+        if (host_id == null || host_id == 0) {\n+            throw new ResourceUnavailableException(\"Fail to locate virtual router element in network \" + network.getId(), this.getClass(), 0);\n+        }\n         \n         /* The cluster here is only used to determine hypervisor type, not the real deployment */\n         Cluster cluster = _configMgr.getCluster(_hostDao.findById(host_id).getClusterId());",
                "raw_url": "https://github.com/apache/cloudstack/raw/93662904236e3b888f07ad77d506d5d656d20b33/server/src/com/cloud/network/element/VirtualRouterElement.java",
                "sha": "661930a51d744d7719be65dbd25d3e75381273c4",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/93662904236e3b888f07ad77d506d5d656d20b33/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java?ref=93662904236e3b888f07ad77d506d5d656d20b33",
                "deletions": 1,
                "filename": "server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "patch": "@@ -1061,7 +1061,9 @@ private DomainRouterVO startVirtualRouter(DomainRouterVO router, User user, Acco\n                 if (state != State.Running) {\n                     router = startVirtualRouter(router, _accountService.getSystemUser(), _accountService.getSystemAccount(), params);\n                 }\n-                runningRouters.add(router);\n+                if (router != null) {\n+                    runningRouters.add(router);\n+                }\n             }\n         }\n         return runningRouters;",
                "raw_url": "https://github.com/apache/cloudstack/raw/93662904236e3b888f07ad77d506d5d656d20b33/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "sha": "9cfba5d02fa92f19f725dad40b675e54d1e14561",
                "status": "modified"
            }
        ],
        "message": "Fix NPE when a router is fail to start\n\nAlso enforce the check for restartNetworkCommand",
        "parent": "https://github.com/apache/cloudstack/commit/92131e985975c2d8930875c2168e18ff8364041d",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualNetworkApplianceManagerImplTest.java"
        ]
    },
    "cloudstack_954dacd": {
        "bug_id": "cloudstack_954dacd",
        "commit": "https://github.com/apache/cloudstack/commit/954dacdbda8ab41bcd5dca12f2b19fbc55c11ec9",
        "file": [
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/cloudstack/blob/954dacdbda8ab41bcd5dca12f2b19fbc55c11ec9/agent/src/com/cloud/agent/resource/computing/LibvirtDomainXMLParser.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/agent/src/com/cloud/agent/resource/computing/LibvirtDomainXMLParser.java?ref=954dacdbda8ab41bcd5dca12f2b19fbc55c11ec9",
                "deletions": 14,
                "filename": "agent/src/com/cloud/agent/resource/computing/LibvirtDomainXMLParser.java",
                "patch": "@@ -137,21 +137,27 @@ public boolean parseDomainXML(String domXML) {\n         return false;\n \t}\n \t\n-\t private static String getTagValue(String tag, Element eElement){\n-\t        NodeList nlList= eElement.getElementsByTagName(tag).item(0).getChildNodes();\n-\t        Node nValue = (Node) nlList.item(0); \n-\t     \n-\t        return nValue.getNodeValue();    \n-\t     }\n+\tprivate static String getTagValue(String tag, Element eElement){\n+\t    NodeList tagNodeList = eElement.getElementsByTagName(tag);\n+\t    if (tagNodeList == null || tagNodeList.getLength() == 0) {\n+\t        return null;\n+\t    }\n \t    \n-\t    private static String getAttrValue(String tag, String attr, Element eElement){\n-\t        NodeList tagNode = eElement.getElementsByTagName(tag);\n-\t        if (tagNode.getLength() == 0) {\n-\t            return null;\n-\t        }\n-\t        Element node = (Element)tagNode.item(0);\n-\t        return node.getAttribute(attr);\n-\t     }\n+\t    NodeList nlList= tagNodeList.item(0).getChildNodes();\n+\n+\t    Node nValue = (Node) nlList.item(0); \n+\n+\t    return nValue.getNodeValue();    \n+\t}\n+\n+\tprivate static String getAttrValue(String tag, String attr, Element eElement){\n+\t    NodeList tagNode = eElement.getElementsByTagName(tag);\n+\t    if (tagNode.getLength() == 0) {\n+\t        return null;\n+\t    }\n+\t    Element node = (Element)tagNode.item(0);\n+\t    return node.getAttribute(attr);\n+\t}\n \t\n \tpublic Integer getVncPort() {\n \t\treturn vncPort;",
                "raw_url": "https://github.com/apache/cloudstack/raw/954dacdbda8ab41bcd5dca12f2b19fbc55c11ec9/agent/src/com/cloud/agent/resource/computing/LibvirtDomainXMLParser.java",
                "sha": "59a7c99face56673cc556c6fdcd55ec4482800f5",
                "status": "modified"
            }
        ],
        "message": "fix NPE on centos when dumpxml",
        "parent": "https://github.com/apache/cloudstack/commit/c93abe014c54a07de3ec63a177c7d2a3f22db1c9",
        "repo": "cloudstack",
        "unit_tests": [
            "LibvirtDomainXMLParserTest.java"
        ]
    },
    "cloudstack_95c7ffb": {
        "bug_id": "cloudstack_95c7ffb",
        "commit": "https://github.com/apache/cloudstack/commit/95c7ffbd46f9f674b8813a7b992c17019eb00137",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/95c7ffbd46f9f674b8813a7b992c17019eb00137/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/CitrixResourceBase.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/CitrixResourceBase.java?ref=95c7ffbd46f9f674b8813a7b992c17019eb00137",
                "deletions": 6,
                "filename": "plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/CitrixResourceBase.java",
                "patch": "@@ -6241,11 +6241,11 @@ private long getVMSnapshotChainSize(Connection conn, VolumeObjectTO volumeTo, St\n                     // add size of snapshot vdi node, usually this only contains meta data\n                     size = size + vdi.getPhysicalUtilisation(conn);\n                     // add size of snapshot vdi parent, this contains data\n-                    if (parentVDI != null)\n+                    if (!isRefNull(parentVDI))\n                         size = size + parentVDI.getPhysicalUtilisation(conn).longValue();\n                 }\n             } catch (Exception e) {\n-                s_logger.debug(\"Exception occurs when calculate \" + \"snapshot capacity for volumes: \" + e.getMessage());\n+                s_logger.debug(\"Exception occurs when calculate snapshot capacity for volumes: due to \" + e.toString());\n                 continue;\n             }\n         }\n@@ -6257,13 +6257,17 @@ private long getVMSnapshotChainSize(Connection conn, VolumeObjectTO volumeTo, St\n                     try {\n                         String vName = vmr.getNameLabel(conn);\n                         if (vName != null && vName.contains(vmName) && vmr.getIsASnapshot(conn)) {\n-\n                             VDI memoryVDI = vmr.getSuspendVDI(conn);\n-                            size = size + memoryVDI.getParent(conn).getPhysicalUtilisation(conn);\n-                            size = size + memoryVDI.getPhysicalUtilisation(conn);\n+                            if (!isRefNull(memoryVDI)) {\n+                                size = size + memoryVDI.getPhysicalUtilisation(conn);\n+                                VDI pMemoryVDI = memoryVDI.getParent(conn);\n+                                if (!isRefNull(pMemoryVDI)) {\n+                                    size = size + pMemoryVDI.getPhysicalUtilisation(conn);\n+                                }\n+                            }\n                         }\n                     } catch (Exception e) {\n-                        s_logger.debug(\"Exception occurs when calculate \" + \"snapshot capacity for memory: \" + e.getMessage());\n+                        s_logger.debug(\"Exception occurs when calculate snapshot capacity for memory: due to \" + e.toString());\n                         continue;\n                     }\n                 }",
                "raw_url": "https://github.com/apache/cloudstack/raw/95c7ffbd46f9f674b8813a7b992c17019eb00137/plugins/hypervisors/xenserver/src/com/cloud/hypervisor/xenserver/resource/CitrixResourceBase.java",
                "sha": "b669181932eaa4df9a713125b11fab0c63164a18",
                "status": "modified"
            }
        ],
        "message": "fixed NPE on calculating vm snasphot volume size",
        "parent": "https://github.com/apache/cloudstack/commit/e717450e0edd2406c4c3fc7341b3669c4390d507",
        "repo": "cloudstack",
        "unit_tests": [
            "CitrixResourceBaseTest.java"
        ]
    },
    "cloudstack_95daa14": {
        "bug_id": "cloudstack_95daa14",
        "commit": "https://github.com/apache/cloudstack/commit/95daa14e2ac4bec09cfad890220e98eaa577c134",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/95daa14e2ac4bec09cfad890220e98eaa577c134/server/src/com/cloud/server/StatsCollector.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/StatsCollector.java?ref=95daa14e2ac4bec09cfad890220e98eaa577c134",
                "deletions": 1,
                "filename": "server/src/com/cloud/server/StatsCollector.java",
                "patch": "@@ -260,7 +260,7 @@ private void init(Map<String, String> configs) {\n \n         /* URI to send statistics to. Currently only Graphite is supported */\n         String externalStatsUri = configs.get(\"stats.output.uri\");\n-        if (externalStatsUri != null) {\n+        if (externalStatsUri != null && !externalStatsUri.equals(\"\")) {\n             try {\n                 URI uri = new URI(externalStatsUri);\n                 String scheme = uri.getScheme();",
                "raw_url": "https://github.com/apache/cloudstack/raw/95daa14e2ac4bec09cfad890220e98eaa577c134/server/src/com/cloud/server/StatsCollector.java",
                "sha": "cd4475f90be99f99401c18ac9f402b5b19d15695",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-7583: Fix NPE caused by previous commit",
        "parent": "https://github.com/apache/cloudstack/commit/69ee01af9df8d72ccd8901d146726e74edda95d7",
        "repo": "cloudstack",
        "unit_tests": [
            "StatsCollectorTest.java"
        ]
    },
    "cloudstack_96b5c08": {
        "bug_id": "cloudstack_96b5c08",
        "commit": "https://github.com/apache/cloudstack/commit/96b5c08250984b50369eafe4a850fdad902ce70f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/96b5c08250984b50369eafe4a850fdad902ce70f/server/src/com/cloud/server/ManagementServerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/ManagementServerImpl.java?ref=96b5c08250984b50369eafe4a850fdad902ce70f",
                "deletions": 1,
                "filename": "server/src/com/cloud/server/ManagementServerImpl.java",
                "patch": "@@ -1152,7 +1152,7 @@ public boolean deleteEvents(DeleteEventsCmd cmd) {\n         }\n \n         // Check if the vm is using any disks on local storage.\n-        VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vm);\n+        VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vm, null, _offeringDao.findById(vm.getId(), vm.getServiceOfferingId()), null, null);\n         List<VolumeVO> volumes = _volumeDao.findCreatedByInstance(vmProfile.getId());\n         boolean usesLocal = false;\n         for (VolumeVO volume : volumes) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/96b5c08250984b50369eafe4a850fdad902ce70f/server/src/com/cloud/server/ManagementServerImpl.java",
                "sha": "2227c995ad018e53d5efe2c83162f68dda7e3a92",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-7136. While listing hosts for migration, the offering details were\nnot correctly initialized in the vmprofile. With a custom offering the cpu,\ncpu-speed and memory were getting initialized to null which caused a NPE in\nthe allocator. Fixed it by explicitly initializing the offering details in the\nvm profile before calling into the allocator for listing suitable hosts.",
        "parent": "https://github.com/apache/cloudstack/commit/fc14fe1132d03ad8828faf434989d3cd394d023b",
        "repo": "cloudstack",
        "unit_tests": [
            "ManagementServerImplTest.java"
        ]
    },
    "cloudstack_96bb6a7": {
        "bug_id": "cloudstack_96bb6a7",
        "commit": "https://github.com/apache/cloudstack/commit/96bb6a7b7cca090b6347a3a581828f2b670a5f61",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/96bb6a7b7cca090b6347a3a581828f2b670a5f61/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/UserVmManagerImpl.java?ref=96bb6a7b7cca090b6347a3a581828f2b670a5f61",
                "deletions": 3,
                "filename": "server/src/com/cloud/vm/UserVmManagerImpl.java",
                "patch": "@@ -289,7 +289,7 @@ public UserVm resetVMPassword(ResetVMPasswordCmd cmd, String password) throws Re\n     \t    throw new InvalidParameterValueException(\"unable to find a virtual machine with id \" + cmd.getId());\n     \t}\n     \t\n-    \tVMTemplateVO template = _templateDao.findById(userVm.getTemplateId());\n+    \tVMTemplateVO template = _templateDao.findByIdIncludingRemoved(userVm.getTemplateId());\n     \tif (template == null || !template.getEnablePassword()) {\n     \t    throw new InvalidParameterValueException(\"Fail to reset password for the virtual machine, the template is not password enabled\");\n     \t}\n@@ -319,7 +319,7 @@ private boolean resetVMPasswordInternal(ResetVMPasswordCmd cmd, String password)\n             return false;\n         }\n \n-        VMTemplateVO template = _templateDao.findById(vmInstance.getTemplateId());\n+        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n         if (template.getEnablePassword()) {\n             Nic defaultNic = _networkMgr.getDefaultNic(vmId);\n             if (defaultNic == null) {\n@@ -2240,7 +2240,7 @@ protected UserVm startVirtualMachine(DeployVMCmd cmd, Map<VirtualMachineProfile.\n \t    _vmDao.loadDetails(vm);\n \t    \n         // Check that the password was passed in and is valid\n-        VMTemplateVO template = _templateDao.findById(vm.getTemplateId());\n+        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vm.getTemplateId());\n         \n         String password = \"saved_password\";\n         if (template.getEnablePassword()) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/96bb6a7b7cca090b6347a3a581828f2b670a5f61/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "sha": "8618b01d511d808b143bccd4f1ef9446f6f2019f",
                "status": "modified"
            }
        ],
        "message": "fix NPE that template was deleted",
        "parent": "https://github.com/apache/cloudstack/commit/a5816ce48e15d07897a9ab21d8c95a91adc3c415",
        "repo": "cloudstack",
        "unit_tests": [
            "UserVmManagerImplTest.java"
        ]
    },
    "cloudstack_972caf1": {
        "bug_id": "cloudstack_972caf1",
        "commit": "https://github.com/apache/cloudstack/commit/972caf1936f338d5f10c6bca7d32d29b785182d7",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/972caf1936f338d5f10c6bca7d32d29b785182d7/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=972caf1936f338d5f10c6bca7d32d29b785182d7",
                "deletions": 1,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -1479,7 +1479,10 @@ public TemplateResponse createIsoResponse(VirtualMachineTemplate result) {\n             isoResponse.setChecksum(iso.getChecksum());\n             isoResponse.setPasswordEnabled(false);\n             \n-            populateOwner(isoResponse, iso);\n+            // add account ID and name\n+            Account owner = ApiDBUtils.findAccountById(iso.getAccountId());\n+            populateAccount(isoResponse, owner.getId());\n+            populateDomain(isoResponse, owner.getDomainId());\n             \n             isoResponse.setObjectName(\"iso\");\n             isoResponses.add(isoResponse);",
                "raw_url": "https://github.com/apache/cloudstack/raw/972caf1936f338d5f10c6bca7d32d29b785182d7/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "c449232e910220ad3587730f937ae6b53fc5fa4c",
                "status": "modified"
            }
        ],
        "message": "bug 11777: resolved NPE in listIsos - get domain id from the iso's account owner object\nstatus 11777: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/cd929e69fadec0fdd5fdd42f0e56f75b6d7273fd",
        "repo": "cloudstack",
        "unit_tests": [
            "ApiResponseHelperTest.java"
        ]
    },
    "cloudstack_97cdf2e": {
        "bug_id": "cloudstack_97cdf2e",
        "commit": "https://github.com/apache/cloudstack/commit/97cdf2eccd9b50eb58bf1531d17b078676496839",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/97cdf2eccd9b50eb58bf1531d17b078676496839/core/src/com/cloud/storage/resource/NfsSecondaryStorageResource.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/core/src/com/cloud/storage/resource/NfsSecondaryStorageResource.java?ref=97cdf2eccd9b50eb58bf1531d17b078676496839",
                "deletions": 1,
                "filename": "core/src/com/cloud/storage/resource/NfsSecondaryStorageResource.java",
                "patch": "@@ -192,7 +192,8 @@ private Answer execute(ComputeChecksumCommand cmd) {\n         }\n         finally {\n             try {\n-                is.close();\n+            \tif(is != null)\n+            \t\tis.close();\n             } catch (IOException e) {\n                 if(s_logger.isDebugEnabled()){\n                   s_logger.debug(\"Could not close the file \" +absoluteTemplatePath);   ",
                "raw_url": "https://github.com/apache/cloudstack/raw/97cdf2eccd9b50eb58bf1531d17b078676496839/core/src/com/cloud/storage/resource/NfsSecondaryStorageResource.java",
                "sha": "855ceb9b40c2297d534fe4f49b842c735c549972",
                "status": "modified"
            }
        ],
        "message": "bug 10618: another place that could possibly throw NPE",
        "parent": "https://github.com/apache/cloudstack/commit/70b1c69ef3a1c5f56bab0921670df74735581226",
        "repo": "cloudstack",
        "unit_tests": [
            "NfsSecondaryStorageResourceTest.java"
        ]
    },
    "cloudstack_98b416b": {
        "bug_id": "cloudstack_98b416b",
        "commit": "https://github.com/apache/cloudstack/commit/98b416b7f07220cc765be14e30382feb25dd3e75",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/98b416b7f07220cc765be14e30382feb25dd3e75/server/src/com/cloud/resource/ResourceManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/resource/ResourceManagerImpl.java?ref=98b416b7f07220cc765be14e30382feb25dd3e75",
                "deletions": 1,
                "filename": "server/src/com/cloud/resource/ResourceManagerImpl.java",
                "patch": "@@ -2107,7 +2107,7 @@ private boolean doCancelMaintenance(long hostId) {\n         _haMgr.cancelScheduledMigrations(host);\n         List<VMInstanceVO> vms = _haMgr.findTakenMigrationWork();\n         for (VMInstanceVO vm : vms) {\n-            if (vm.getHostId() != null && vm.getHostId() == hostId) {\n+            if (vm != null && vm.getHostId() != null && vm.getHostId() == hostId) {\n                 s_logger.info(\"Unable to cancel migration because the vm is being migrated: \" + vm);\n                 return false;\n             }",
                "raw_url": "https://github.com/apache/cloudstack/raw/98b416b7f07220cc765be14e30382feb25dd3e75/server/src/com/cloud/resource/ResourceManagerImpl.java",
                "sha": "430a51664d3c6e1cd131b489a904e21c426a7a4b",
                "status": "modified"
            }
        ],
        "message": "fixed NPE\n\n(cherry picked from commit c78f14cbc2fd45fc587f4a238c0a0bfc1d753be8)\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/bf17f640c679bab1bd740d4eb068deb1bc2eb3af",
        "repo": "cloudstack",
        "unit_tests": [
            "ResourceManagerImplTest.java"
        ]
    },
    "cloudstack_9961e1c": {
        "bug_id": "cloudstack_9961e1c",
        "commit": "https://github.com/apache/cloudstack/commit/9961e1ca2a2e0e678871b8ef8a526e15fa5be755",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/9961e1ca2a2e0e678871b8ef8a526e15fa5be755/server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=9961e1ca2a2e0e678871b8ef8a526e15fa5be755",
                "deletions": 1,
                "filename": "server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -1319,12 +1319,12 @@ public boolean isVirtualMachineUpgradable(UserVm vm, ServiceOffering offering) {\n         T rebootedVm = null;\n \n         DataCenter dc = _configMgr.getZone(vm.getDataCenterId());\n-        HostPodVO pod = _configMgr.getPod(vm.getPodId());\n         Host host = _hostDao.findById(vm.getHostId());\n         Cluster cluster = null;\n         if (host != null) {\n             cluster = _configMgr.getCluster(host.getClusterId());\n         }\n+        HostPodVO pod = _configMgr.getPod(host.getPodId());\n         DeployDestination dest = new DeployDestination(dc, pod, cluster, host);\n \n         try {",
                "raw_url": "https://github.com/apache/cloudstack/raw/9961e1ca2a2e0e678871b8ef8a526e15fa5be755/server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "3f582ed5264fce7bded7d6529c2d9c64ada2088a",
                "status": "modified"
            }
        ],
        "message": "Fix NPE when reboot vm\nvm.podId has different meaning than you think",
        "parent": "https://github.com/apache/cloudstack/commit/d9b61f26da2ae8407917ba910c163b12e58b45d6",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_9b64008": {
        "bug_id": "cloudstack_9b64008",
        "commit": "https://github.com/apache/cloudstack/commit/9b640085ab19b42e1d062634f244bf10b8cc37b1",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/9b640085ab19b42e1d062634f244bf10b8cc37b1/server/src/com/cloud/server/StatsCollector.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/StatsCollector.java?ref=9b640085ab19b42e1d062634f244bf10b8cc37b1",
                "deletions": 9,
                "filename": "server/src/com/cloud/server/StatsCollector.java",
                "patch": "@@ -267,16 +267,17 @@ public void run() {\n \t            }\n \t\t\t\t\r\n                 List<HostVO> hosts = _hostDao.listSecondaryStorageHosts();\n-                ConcurrentHashMap<Long, StorageStats> storageStats = new ConcurrentHashMap<Long, StorageStats>();\n-                \r\n-                for (HostVO host : hosts) {\r\n+                ConcurrentHashMap<Long, StorageStats> storageStats = new ConcurrentHashMap<Long, StorageStats>();\r\n+                for (HostVO host : hosts) {\n+                    if ( host.getStorageUrl() == null ) {\n+                        continue;\n+                    }\r\n                     GetStorageStatsCommand command = new GetStorageStatsCommand(host.getStorageUrl());\n-        \t\t\tHostVO ssAhost = _agentMgr.getSSAgent(host);\n-        \t\t\tif( ssAhost == null ) {\n-        \t\t\t\ts_logger.warn(\"There is no secondary storage VM for secondary storage host \" + host.getName());\n-        \t\t\t\tcontinue;\n-        \t\t\t}\n-        \t\t\t\n+                    HostVO ssAhost = _agentMgr.getSSAgent(host);\n+                    if (ssAhost == null) {\n+                        s_logger.warn(\"There is no secondary storage VM for secondary storage host \" + host.getName());\n+                        continue;\n+                    }\n                     long hostId = host.getId();\r\n                     Answer answer = _agentMgr.easySend(ssAhost.getId(), command);\r\n                     if (answer != null && answer.getResult()) {\r",
                "raw_url": "https://github.com/apache/cloudstack/raw/9b640085ab19b42e1d062634f244bf10b8cc37b1/server/src/com/cloud/server/StatsCollector.java",
                "sha": "95243cb47a87fc34fc982f846268fb27c6ac7053",
                "status": "modified"
            }
        ],
        "message": "bug 10618: fixed NPE\n\nstatus 10618: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/9f13b46d61c483a8f9caf6d9677abc86212ee599",
        "repo": "cloudstack",
        "unit_tests": [
            "StatsCollectorTest.java"
        ]
    },
    "cloudstack_9ca379f": {
        "bug_id": "cloudstack_9ca379f",
        "commit": "https://github.com/apache/cloudstack/commit/9ca379fc61e3e9370806cbba4c8ac17afbcd6c01",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/9ca379fc61e3e9370806cbba4c8ac17afbcd6c01/api/src/com/cloud/api/response/PhysicalNetworkResponse.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/api/response/PhysicalNetworkResponse.java?ref=9ca379fc61e3e9370806cbba4c8ac17afbcd6c01",
                "deletions": 0,
                "filename": "api/src/com/cloud/api/response/PhysicalNetworkResponse.java",
                "patch": "@@ -25,6 +25,7 @@\n import com.cloud.serializer.Param;\n import com.google.gson.annotations.SerializedName;\n \n+@SuppressWarnings(\"unused\")\n public class PhysicalNetworkResponse extends BaseResponse{\n     \n     @SerializedName(ApiConstants.ID) @Param(description=\"the uuid of the physical network\")",
                "raw_url": "https://github.com/apache/cloudstack/raw/9ca379fc61e3e9370806cbba4c8ac17afbcd6c01/api/src/com/cloud/api/response/PhysicalNetworkResponse.java",
                "sha": "be37d9606756e80cd770cca2bbe0aa42935e338b",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/cloudstack/blob/9ca379fc61e3e9370806cbba4c8ac17afbcd6c01/server/src/com/cloud/network/NetworkManagerImpl.java",
                "changes": 61,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/NetworkManagerImpl.java?ref=9ca379fc61e3e9370806cbba4c8ac17afbcd6c01",
                "deletions": 28,
                "filename": "server/src/com/cloud/network/NetworkManagerImpl.java",
                "patch": "@@ -2610,7 +2610,7 @@ public boolean restartNetwork(RestartNetworkCmd cmd, boolean cleanup) throws Con\n \n         _accountMgr.checkAccess(callerAccount, null, network);\n \n-        boolean success = restartNetwork(networkId, callerAccount, callerUser, null, cleanup);\n+        boolean success = restartNetwork(networkId, callerAccount, callerUser, cleanup);\n \n         if (success) {\n             s_logger.debug(\"Network id=\" + networkId + \" is restarted successfully.\");\n@@ -2641,7 +2641,7 @@ public boolean startNetwork(long networkId, DeployDestination dest, ReservationC\n         }\n     }\n \n-    private boolean restartNetwork(long networkId, Account callerAccount, User callerUser, Long newNetworkOfferingId, boolean cleanup) throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {\n+    private boolean restartNetwork(long networkId, Account callerAccount, User callerUser, boolean cleanup) throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {\n \n         NetworkVO network = _networksDao.findById(networkId);\n \n@@ -2656,13 +2656,6 @@ private boolean restartNetwork(long networkId, Account callerAccount, User calle\n             return false;\n         }\n         \n-        //Only after network was shutdown properly, change the network offering\n-        if (newNetworkOfferingId != null) {\n-            s_logger.debug(\"Updating network \" + network + \" with the new network offering id=\" + newNetworkOfferingId + \" as a part of network restart\");\n-            network.setNetworkOfferingId(newNetworkOfferingId);\n-            _networksDao.update(networkId, network, finalizeServicesAndProvidersForNetwork(_configMgr.getNetworkOffering(newNetworkOfferingId), network.getPhysicalNetworkId()));\n-        }\n-        \n         //implement the network elements and rules again\n         DeployDestination dest = new DeployDestination(_dcDao.findById(network.getDataCenterId()), null, null, null);\n         \n@@ -3332,31 +3325,43 @@ public Network updateNetwork(long networkId, String name, String displayText, Ac\n             //have to restart the network\n             restartNetwork = true;\n         }\n+        \n+        //1) Shutdown all the elements and cleanup all the rules\n+        ReservationContext context = new ReservationContextImpl(null, null, callerUser, callerAccount);\n+        if (restartNetwork) {\n+            s_logger.debug(\"Shutting down elements and resources for network id=\" + networkId + \" as a part of network update\");\n             \n-        _networksDao.update(networkId, network); \n-\n-        boolean success = true;\n-        if (restartNetwork && (network.getState() == Network.State.Implemented || network.getState() == Network.State.Setup)) {\n-        \t//network offering id will be updated in the restartNetowrk call aftet the network elements are shutdown properly\n-            s_logger.info(\"Restarting network \" + network + \" as a part of update network call\");\n-\n-            try {\n-                success = restartNetwork(networkId, callerAccount, callerUser, networkOfferingId, true);\n-            } catch (Exception e) {\n-                success = false;\n+            if (!shutdownNetworkElementsAndResources(context, true, network)) {\n+                s_logger.warn(\"Failed to shutdown the network elements and resources as a part of network restart: \" + network.getState());\n+                throw new CloudRuntimeException(\"Failed to shutdown the network elements and resources as a part of network restart: \" + network.getState());\n             }\n-\n-            if (success) {\n-                s_logger.debug(\"Successully restarted the network \" + network + \" as a part of updateNetwork call\");\n-            } else {\n-                s_logger.warn(\"Failed to restart the network \" + network + \" as a part of updateNetwork call\");\n-            }\n-        } else if (networkOfferingId != null) {\n+        }\n+        \n+        //2) Only after all the elements and rules are shutdown properly, update the network VO\n+        if (networkOfferingId != null) {\n         \tnetwork.setNetworkOfferingId(networkOfferingId);\n         \t_networksDao.update(networkId, network, finalizeServicesAndProvidersForNetwork(_configMgr.getNetworkOffering(networkOfferingId), network.getPhysicalNetworkId()));\n+        } else {\n+            _networksDao.update(networkId, network); \n         }\n         \n-        return network;\n+        //get updated network\n+        network = _networksDao.findById(networkId);\n+        \n+        //3) Implement the elements and rules again\n+        if (restartNetwork) {\n+        \t DeployDestination dest = new DeployDestination(_dcDao.findById(network.getDataCenterId()), null, null, null);\n+             \n+             s_logger.debug(\"Implementing the network \" + network + \" elements and resources as a part of network update\");        \n+             try {\n+                 implementNetworkElementsAndResources(dest, context, network, _networkOfferingDao.findById(network.getNetworkOfferingId()));\n+             } catch (Exception ex) {\n+                 s_logger.warn(\"Failed to implement network \" + network + \" elements and resources as a part of network update due to \", ex);\n+                 throw new CloudRuntimeException(\"Failed to implement network \" + network + \" elements and resources as a part of network update\");\n+             }\n+        }\n+        \n+        return getNetwork(network.getId());\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/cloudstack/raw/9ca379fc61e3e9370806cbba4c8ac17afbcd6c01/server/src/com/cloud/network/NetworkManagerImpl.java",
                "sha": "fb3f282e4673350fe48ebf4425458e2e2853462c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/9ca379fc61e3e9370806cbba4c8ac17afbcd6c01/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java?ref=9ca379fc61e3e9370806cbba4c8ac17afbcd6c01",
                "deletions": 1,
                "filename": "server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "patch": "@@ -1156,8 +1156,8 @@ private HypervisorType getAClusterToStartDomainRouterForOvm(long podId) {\n         if (publicNetwork) {\n             routers = _routerDao.listByNetworkAndRole(guestNetwork.getId(), Role.VIRTUAL_ROUTER);\n         } else {\n-            Long podId = dest.getPod().getId();\n             if (isPodBased) {\n+            \tLong podId = dest.getPod().getId();\n                 routers = _routerDao.listByNetworkAndPodAndRole(guestNetwork.getId(), podId, Role.VIRTUAL_ROUTER);\n                 plan = new DataCenterDeployment(dcId, podId, null, null, null, null);\n             } else {",
                "raw_url": "https://github.com/apache/cloudstack/raw/9ca379fc61e3e9370806cbba4c8ac17afbcd6c01/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "sha": "6231038f9c82b870d1fd1fda5b50cb5c235b47df",
                "status": "modified"
            }
        ],
        "message": "Changes to updateNetwork command:\n\n* update network with new networkOfferingId only after the network is shutdown\n* fixed NPE happenining when updateNetwork with the networkOffering w/o soucrceNat service in Advance zone",
        "parent": "https://github.com/apache/cloudstack/commit/cdfac9a5e16633cf9ad219c359ffdcfd6695b331",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualNetworkApplianceManagerImplTest.java"
        ]
    },
    "cloudstack_9cb37ec": {
        "bug_id": "cloudstack_9cb37ec",
        "commit": "https://github.com/apache/cloudstack/commit/9cb37ec349a6740a2f012ef4e6ac58a6c3b13907",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cloudstack/blob/9cb37ec349a6740a2f012ef4e6ac58a6c3b13907/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/UserVmManagerImpl.java?ref=9cb37ec349a6740a2f012ef4e6ac58a6c3b13907",
                "deletions": 7,
                "filename": "server/src/com/cloud/vm/UserVmManagerImpl.java",
                "patch": "@@ -71,6 +71,7 @@\n import org.apache.cloudstack.engine.subsystem.api.storage.TemplateDataFactory;\n import org.apache.cloudstack.engine.subsystem.api.storage.TemplateInfo;\n import org.apache.cloudstack.engine.subsystem.api.storage.VolumeDataFactory;\n+import org.apache.cloudstack.engine.subsystem.api.storage.VolumeInfo;\n import org.apache.cloudstack.engine.subsystem.api.storage.VolumeService;\n import org.apache.cloudstack.engine.subsystem.api.storage.VolumeService.VolumeApiResult;\n import org.apache.cloudstack.framework.async.AsyncCallFuture;\n@@ -4737,14 +4738,17 @@ public UserVm restoreVMInternal(Account caller, UserVmVO vm, Long newTemplateId)\n         _volsDao.detachVolume(root.getId());\n         volumeMgr.destroyVolume(root);\n \n-        // For VMware hypervisor since the old root volume is replaced by the new root volume in storage, force expunge old root volume\n+        // For VMware hypervisor since the old root volume is replaced by the new root volume, force expunge old root volume if it has been created in storage\n         if (vm.getHypervisorType() == HypervisorType.VMware) {\n-            s_logger.info(\"Expunging volume \" + root.getId() + \" from primary data store\");\n-            AsyncCallFuture<VolumeApiResult> future = _volService.expungeVolumeAsync(volFactory.getVolume(root.getId()));\n-            try {\n-                future.get();\n-            } catch (Exception e) {\n-                s_logger.debug(\"Failed to expunge volume:\" + root.getId(), e);\n+            VolumeInfo volumeInStorage = volFactory.getVolume(root.getId());\n+            if (volumeInStorage != null) {\n+                s_logger.info(\"Expunging volume \" + root.getId() + \" from primary data store\");\n+                AsyncCallFuture<VolumeApiResult> future = _volService.expungeVolumeAsync(volFactory.getVolume(root.getId()));\n+                try {\n+                    future.get();\n+                } catch (Exception e) {\n+                    s_logger.debug(\"Failed to expunge volume:\" + root.getId(), e);\n+                }\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/9cb37ec349a6740a2f012ef4e6ac58a6c3b13907/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "sha": "82b9bfbda47ebb8970effa7730f15c40fefd2d9c",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-6007. Restore VM command fails with NPE.\nIf a VM instance is deployed with startVm=false, then calling restoreVm on the instance fails with NPE\nbecause CS tries to expunge a volume that has not been created in primary store.",
        "parent": "https://github.com/apache/cloudstack/commit/9cb2458a5871307efa6f18143c241b32a9e79540",
        "repo": "cloudstack",
        "unit_tests": [
            "UserVmManagerImplTest.java"
        ]
    },
    "cloudstack_9ddebcf": {
        "bug_id": "cloudstack_9ddebcf",
        "commit": "https://github.com/apache/cloudstack/commit/9ddebcfa166547839f07664226b46de603a6b6a5",
        "file": [
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/cloudstack/blob/9ddebcfa166547839f07664226b46de603a6b6a5/server/src/com/cloud/server/StatsCollector.java",
                "changes": 54,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/StatsCollector.java?ref=9ddebcfa166547839f07664226b46de603a6b6a5",
                "deletions": 26,
                "filename": "server/src/com/cloud/server/StatsCollector.java",
                "patch": "@@ -339,32 +339,34 @@ public void run() {\n \t\t\t\t}\r\n \t\t\t\tConcurrentHashMap<Long, VolumeStats> volumeStats = new ConcurrentHashMap<Long, VolumeStats>();\r\n \t\t\t\tfor (Iterator<Long> iter = commandsByPool.keySet().iterator(); iter.hasNext();) {\r\n-\t\t\t\t\tLong poolId = iter.next();\r\n-\t\t\t\t\tList<VolumeCommand> commandsList = commandsByPool.get(poolId);\r\n-\t\t\t\t\t\r\n-\t\t\t\t\tlong[] volumeIdArray = new long[commandsList.size()];\r\n-\t\t\t\t\tCommands commands = new Commands(OnError.Continue);\r\n-\t\t\t\t\tfor (int i = 0; i < commandsList.size(); i++) {\r\n-\t\t\t\t\t\tVolumeCommand vCommand = commandsList.get(i);\r\n-\t\t\t\t\t\tvolumeIdArray[i] = vCommand.volumeId;\r\n-\t\t\t\t\t\tcommands.addCommand(vCommand.command);\r\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t            List<StoragePoolHostVO> poolhosts = _storagePoolHostDao.listByPoolId(poolId);\n-\t\t            for(StoragePoolHostVO poolhost : poolhosts) {\n-    \t\t\t\t\tAnswer[] answers = _agentMgr.send(poolhost.getHostId(), commands);\r\n-    \t\t\t\t\tif (answers != null) {\r\n-    \t\t\t\t\t    long totalBytes = 0L;\r\n-    \t\t\t\t\t\tfor (int i = 0; i < answers.length; i++) {\r\n-    \t\t\t\t\t\t\tif (answers[i].getResult()) {\r\n-    \t\t\t\t\t\t\t    VolumeStats vStats = (VolumeStats)answers[i];\r\n-    \t\t\t\t\t\t\t\tvolumeStats.put(volumeIdArray[i], vStats);\r\n-    \t\t\t\t\t\t\t\ttotalBytes += vStats.getBytesUsed();\r\n-    \t\t\t\t\t\t\t}\r\n-    \t\t\t\t\t\t}\n-    \t\t\t\t\t\tbreak;\n-                        }\n-\t\t            }\r\n+\t\t\t\t\tLong poolId = iter.next();\n+\t\t\t\t\tif(poolId != null) {\r\n+\t\t\t\t\t\tList<VolumeCommand> commandsList = commandsByPool.get(poolId);\r\n+\t\t\t\t\t\t\r\n+\t\t\t\t\t\tlong[] volumeIdArray = new long[commandsList.size()];\r\n+\t\t\t\t\t\tCommands commands = new Commands(OnError.Continue);\r\n+\t\t\t\t\t\tfor (int i = 0; i < commandsList.size(); i++) {\r\n+\t\t\t\t\t\t\tVolumeCommand vCommand = commandsList.get(i);\r\n+\t\t\t\t\t\t\tvolumeIdArray[i] = vCommand.volumeId;\r\n+\t\t\t\t\t\t\tcommands.addCommand(vCommand.command);\r\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\t\n+\t\t\t            List<StoragePoolHostVO> poolhosts = _storagePoolHostDao.listByPoolId(poolId);\n+\t\t\t            for(StoragePoolHostVO poolhost : poolhosts) {\n+\t    \t\t\t\t\tAnswer[] answers = _agentMgr.send(poolhost.getHostId(), commands);\r\n+\t    \t\t\t\t\tif (answers != null) {\r\n+\t    \t\t\t\t\t    long totalBytes = 0L;\r\n+\t    \t\t\t\t\t\tfor (int i = 0; i < answers.length; i++) {\r\n+\t    \t\t\t\t\t\t\tif (answers[i].getResult()) {\r\n+\t    \t\t\t\t\t\t\t    VolumeStats vStats = (VolumeStats)answers[i];\r\n+\t    \t\t\t\t\t\t\t\tvolumeStats.put(volumeIdArray[i], vStats);\r\n+\t    \t\t\t\t\t\t\t\ttotalBytes += vStats.getBytesUsed();\r\n+\t    \t\t\t\t\t\t\t}\r\n+\t    \t\t\t\t\t\t}\n+\t    \t\t\t\t\t\tbreak;\n+\t                        }\n+\t\t\t            }\n+\t\t\t\t\t}\r\n \t\t\t\t}\r\n \r\n \t\t\t\t// We replace the existing volumeStats so that it does not grow with no bounds\r",
                "raw_url": "https://github.com/apache/cloudstack/raw/9ddebcfa166547839f07664226b46de603a6b6a5/server/src/com/cloud/server/StatsCollector.java",
                "sha": "cb2ce49a1cdacfc8bcf75a0e6cab3240ef4cccea",
                "status": "modified"
            }
        ],
        "message": "Fix the annoying NPE in StatsCollector",
        "parent": "https://github.com/apache/cloudstack/commit/dae72c26b0aee7ba0289c2a0bb0d9c5c3a9af9cb",
        "repo": "cloudstack",
        "unit_tests": [
            "StatsCollectorTest.java"
        ]
    },
    "cloudstack_9eef604": {
        "bug_id": "cloudstack_9eef604",
        "commit": "https://github.com/apache/cloudstack/commit/9eef604f2bc1564427691faf002ae00a4b26eff1",
        "file": [
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/cloudstack/blob/9eef604f2bc1564427691faf002ae00a4b26eff1/utils/src/com/cloud/utils/db/DbUtil.java",
                "changes": 60,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/com/cloud/utils/db/DbUtil.java?ref=9eef604f2bc1564427691faf002ae00a4b26eff1",
                "deletions": 33,
                "filename": "utils/src/com/cloud/utils/db/DbUtil.java",
                "patch": "@@ -49,39 +49,33 @@\n     private static Map<String, Connection> s_connectionForGlobalLocks = new HashMap<String, Connection>();\n     \n     public static Connection getConnectionForGlobalLocks(String name, boolean forLock) {\n-    \twhile(true) {\n-\t    \tsynchronized(s_connectionForGlobalLocks) {\n-\t    \t\tif(forLock) {\n-\t    \t\t\tif(s_connectionForGlobalLocks.get(name) != null) {\n-\t    \t\t\t\ts_logger.error(\"Sanity check failed, global lock name \" + name + \" is in already in use\");\n-\t    \t\t\t}\n-\t    \t\t\t\n-\t    \t\t\tConnection connection = Transaction.getStandaloneConnection();\n-\t    \t\t\tif(connection != null) {\n-\t    \t\t\t\ttry {\n-\t\t\t\t\t\t\tconnection.setAutoCommit(true);\n-\t\t\t\t\t\t} catch (SQLException e) {\n-\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\tconnection.close();\n-\t\t\t\t\t\t\t} catch(SQLException sqlException) {\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\treturn null;\n+    \tsynchronized(s_connectionForGlobalLocks) {\n+    \t\tif(forLock) {\n+    \t\t\tif(s_connectionForGlobalLocks.get(name) != null) {\n+    \t\t\t\ts_logger.error(\"Sanity check failed, global lock name \" + name + \" is already in use\");\n+    \t\t\t\tassert(false);\n+    \t\t\t}\n+    \t\t\t\n+    \t\t\tConnection connection = Transaction.getStandaloneConnection();\n+    \t\t\tif(connection != null) {\n+    \t\t\t\ttry {\n+\t\t\t\t\t\tconnection.setAutoCommit(true);\n+\t\t\t\t\t} catch (SQLException e) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tconnection.close();\n+\t\t\t\t\t\t} catch(SQLException sqlException) {\n \t\t\t\t\t\t}\n-\t\t\t\t\t\ts_connectionForGlobalLocks.put(name, connection);\n-\t\t\t\t\t\treturn connection;\n-\t    \t\t\t}\n-\t    \t\t} else {\n-\t    \t\t\tConnection connection = s_connectionForGlobalLocks.get(name);\n-\t    \t\t\ts_connectionForGlobalLocks.remove(name);\n-\t    \t\t\treturn connection;\n-\t    \t\t}\n-\t    \t}\n-\t    \t\n-\t\t\ts_logger.warn(\"Unable to acquire dabase connection for global lock \" + name + \", waiting for someone to release and retrying...\");\n-\t    \ttry {\n-\t\t\t\tThread.sleep(1000);\n-\t\t\t} catch (InterruptedException e) {\n-\t\t\t}\n+\t\t\t\t\t\treturn null;\n+\t\t\t\t\t}\n+\t\t\t\t\ts_connectionForGlobalLocks.put(name, connection);\n+\t\t\t\t\treturn connection;\n+    \t\t\t}\n+    \t    \treturn null;\n+    \t\t} else {\n+    \t\t\tConnection connection = s_connectionForGlobalLocks.get(name);\n+    \t\t\ts_connectionForGlobalLocks.remove(name);\n+    \t\t\treturn connection;\n+    \t\t}\n     \t}\n     }\n     \n@@ -237,7 +231,7 @@ public static boolean getGlobalLock(String name, int timeoutSeconds) {\n         \tif (pstmt != null) {\n         \t\ttry {\n         \t\t\tpstmt.close();\n-        \t\t} catch (SQLException e) {\n+        \t\t} catch (Throwable e) {\n         \t\t\ts_logger.error(\"What the heck? \", e);\n         \t\t}\n         \t}",
                "raw_url": "https://github.com/apache/cloudstack/raw/9eef604f2bc1564427691faf002ae00a4b26eff1/utils/src/com/cloud/utils/db/DbUtil.java",
                "sha": "a7dc8f4c5409ecbe3387925f403c89183caf3b7b",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/cloudstack/blob/9eef604f2bc1564427691faf002ae00a4b26eff1/utils/src/com/cloud/utils/db/GlobalLock.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/com/cloud/utils/db/GlobalLock.java?ref=9eef604f2bc1564427691faf002ae00a4b26eff1",
                "deletions": 16,
                "filename": "utils/src/com/cloud/utils/db/GlobalLock.java",
                "patch": "@@ -45,9 +45,9 @@\n     protected final static Logger s_logger = Logger.getLogger(GlobalLock.class);\r\n \r\n \tprivate String name;\r\n-\tprivate volatile int lockCount = 0;\r\n+\tprivate int lockCount = 0;\r\n \tprivate Thread ownerThread = null;\r\n-\t\r\n+\t\n \tprivate int referenceCount = 0;\r\n \tprivate long holdingStartTick = 0;\r\n \t\r\n@@ -65,21 +65,21 @@ public int addRef() {\n \t}\r\n \t\r\n \tpublic int releaseRef() {\r\n-\t\tboolean releaseInternLock = false;\r\n-\t\tint refCount;\r\n-\t\tsynchronized(this) {\r\n-\t\t\treferenceCount--;\r\n-\t\t\trefCount = referenceCount;\r\n-\t\t\t\r\n-\t\t\tif(referenceCount < 0)\r\n-\t\t\t\ts_logger.warn(\"Unmatched Global lock \" + name + \" reference usage detected, check your code!\");\r\n-\t\t\t\r\n-\t\t\tif(referenceCount == 0)\r\n-\t\t\t\treleaseInternLock = true;\r\n+\t\tint refCount;\n+\t\t\n+\t\tsynchronized(s_lockMap) {\t// // lock in sequence to prevent deadlock\r\n+\t\t\tsynchronized(this) {\r\n+\t\t\t\treferenceCount--;\r\n+\t\t\t\trefCount = referenceCount;\r\n+\t\t\t\t\r\n+\t\t\t\tif(referenceCount < 0)\r\n+\t\t\t\t\ts_logger.warn(\"Unmatched Global lock \" + name + \" reference usage detected, check your code!\");\r\n+\t\t\t\t\r\n+\t\t\t\tif(referenceCount == 0)\r\n+\t\t\t\t\treleaseInternLock(name);\n+\t\t\t}\n \t\t}\r\n \t\t\r\n-\t\tif(releaseInternLock)\r\n-\t\t\treleaseInternLock(name);\r\n \t\treturn refCount;\r\n \t}\r\n \n@@ -137,9 +137,9 @@ public boolean lock(int timeoutSeconds) {\n \t\t\t\t\t\tcontinue;\r\n \t\t\t\t\t} else {\r\n \t\t\t\t\t\t// we will discount the time that has been spent in previous waiting\r\n+\t\t\t\t\t\townerThread = Thread.currentThread();\n \t\t\t\t\t\tif(DbUtil.getGlobalLock(name, remainingMilliSeconds / 1000)) {\r\n \t\t\t\t\t\t\tlockCount++;\r\n-\t\t\t\t\t\t\townerThread = Thread.currentThread();\r\n \t\t\t\t\t\t\tholdingStartTick = System.currentTimeMillis();\r\n \t\t\t\t\t\t\t\r\n \t\t\t\t\t\t\t// keep the lock in the intern map when we got the lock from database\r\n@@ -148,6 +148,8 @@ public boolean lock(int timeoutSeconds) {\n \t\t\t\t\t\t\tif(s_logger.isTraceEnabled())\r\n \t\t\t\t\t\t\t\ts_logger.trace(\"lock \" + name + \" is acquired, lock count :\" + lockCount);\r\n \t\t\t\t\t\t\treturn true;\r\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\townerThread = null;\n \t\t\t\t\t\t}\r\n \t\t\t\t\t\treturn false;\r\n \t\t\t\t\t}\r",
                "raw_url": "https://github.com/apache/cloudstack/raw/9eef604f2bc1564427691faf002ae00a4b26eff1/utils/src/com/cloud/utils/db/GlobalLock.java",
                "sha": "789da2deb252d37701a57043f4a9259a1c2ae6aa",
                "status": "modified"
            }
        ],
        "message": "bug 7685: a race condition caused DB connection from the pool to be left alone which can trigger mysql driver NPE exception",
        "parent": "https://github.com/apache/cloudstack/commit/49281a27dcd58b4899059364ae38f6507ed8a8e3",
        "repo": "cloudstack",
        "unit_tests": [
            "GlobalLockTest.java"
        ]
    },
    "cloudstack_9f13b46": {
        "bug_id": "cloudstack_9f13b46",
        "commit": "https://github.com/apache/cloudstack/commit/9f13b46d61c483a8f9caf6d9677abc86212ee599",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cloudstack/blob/9f13b46d61c483a8f9caf6d9677abc86212ee599/server/src/com/cloud/server/StatsCollector.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/StatsCollector.java?ref=9f13b46d61c483a8f9caf6d9677abc86212ee599",
                "deletions": 7,
                "filename": "server/src/com/cloud/server/StatsCollector.java",
                "patch": "@@ -262,21 +262,26 @@ public VmStats getVmStats(long id) {\n \t\t@Override\n         public void run() {\r\n \t\t\ttry {\n-\t\t\t\ts_logger.debug(\"StorageCollector is running...\");\n+\t            if (s_logger.isDebugEnabled()) {\n+\t            \ts_logger.debug(\"StorageCollector is running...\");\n+\t            }\n \t\t\t\t\r\n                 List<HostVO> hosts = _hostDao.listSecondaryStorageHosts();\n-                ConcurrentHashMap<Long, StorageStats> storageStats = new ConcurrentHashMap<Long, StorageStats>();\r\n+                ConcurrentHashMap<Long, StorageStats> storageStats = new ConcurrentHashMap<Long, StorageStats>();\n+                \r\n                 for (HostVO host : hosts) {\r\n                     GetStorageStatsCommand command = new GetStorageStatsCommand(host.getStorageUrl());\n-                    HostVO ssAhost = _agentMgr.getSSAgent(host);\n-                    if (ssAhost == null) {\n-                        return;\n-                    }\n+        \t\t\tHostVO ssAhost = _agentMgr.getSSAgent(host);\n+        \t\t\tif( ssAhost == null ) {\n+        \t\t\t\ts_logger.warn(\"There is no secondary storage VM for secondary storage host \" + host.getName());\n+        \t\t\t\tcontinue;\n+        \t\t\t}\n+        \t\t\t\n                     long hostId = host.getId();\r\n                     Answer answer = _agentMgr.easySend(ssAhost.getId(), command);\r\n                     if (answer != null && answer.getResult()) {\r\n                         storageStats.put(hostId, (StorageStats)answer);\n-                        s_logger.debug(\"HostId: \"+hostId+ \" Used: \" + ((StorageStats)answer).getByteUsed() + \" Total Available: \" + ((StorageStats)answer).getCapacityBytes());\n+                        s_logger.trace(\"HostId: \"+hostId+ \" Used: \" + ((StorageStats)answer).getByteUsed() + \" Total Available: \" + ((StorageStats)answer).getCapacityBytes());\n                         //Seems like we have dynamically updated the sec. storage as prev. size and the current do not match\n                         if (_storageStats.get(hostId)!=null &&\n                         \t\t_storageStats.get(hostId).getCapacityBytes() != ((StorageStats)answer).getCapacityBytes()){",
                "raw_url": "https://github.com/apache/cloudstack/raw/9f13b46d61c483a8f9caf6d9677abc86212ee599/server/src/com/cloud/server/StatsCollector.java",
                "sha": "7da47e3a51e3fb3e69b7bb52c778be477c3f06ac",
                "status": "modified"
            }
        ],
        "message": "bug 10602: Fix NPE in StatsCollector - ssvm might not be up so check for that.\nstatus 10602: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/6b7279598e926472c371ba2eb6c75db393f6dd62",
        "repo": "cloudstack",
        "unit_tests": [
            "StatsCollectorTest.java"
        ]
    },
    "cloudstack_9f94a17": {
        "bug_id": "cloudstack_9f94a17",
        "commit": "https://github.com/apache/cloudstack/commit/9f94a178d6663eb1451bf632de5e92c46884f874",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/9f94a178d6663eb1451bf632de5e92c46884f874/utils/src/com/cloud/utils/db/GlobalLock.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/com/cloud/utils/db/GlobalLock.java?ref=9f94a178d6663eb1451bf632de5e92c46884f874",
                "deletions": 4,
                "filename": "utils/src/com/cloud/utils/db/GlobalLock.java",
                "patch": "@@ -103,10 +103,12 @@ public static GlobalLock getInternLock(String name) {\n \tprivate static void releaseInternLock(String name) {\r\n \t\tsynchronized(s_lockMap) {\n \t\t\tGlobalLock lock = s_lockMap.get(name);\n-\t\t\tassert(lock != null);\n-\t\t\t\n-\t\t\tif(lock.referenceCount == 0)\n-\t\t\t\ts_lockMap.remove(name);\n+\t\t\tif(lock != null) {\n+\t\t\t\tif(lock.referenceCount == 0)\n+\t\t\t\t\ts_lockMap.remove(name);\n+\t\t\t} else {\n+\t\t\t\ts_logger.warn(\"Releasing \" + name + \", but it is already released.\");\n+\t\t\t}\n \t\t}\r\n \t}\r\n \t\r",
                "raw_url": "https://github.com/apache/cloudstack/raw/9f94a178d6663eb1451bf632de5e92c46884f874/utils/src/com/cloud/utils/db/GlobalLock.java",
                "sha": "067ad57de3067b298706c05c2299877985ce02fb",
                "status": "modified"
            }
        ],
        "message": "bug 10976: NPE fix to avoid blocking shutdown process",
        "parent": "https://github.com/apache/cloudstack/commit/797263265eb3f8e775f40b295c2a96f6467e677d",
        "repo": "cloudstack",
        "unit_tests": [
            "GlobalLockTest.java"
        ]
    },
    "cloudstack_a07497b": {
        "bug_id": "cloudstack_a07497b",
        "commit": "https://github.com/apache/cloudstack/commit/a07497b3731372bf902aae9569e6d579abaec3f8",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/a07497b3731372bf902aae9569e6d579abaec3f8/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/VolumeApiServiceImpl.java?ref=a07497b3731372bf902aae9569e6d579abaec3f8",
                "deletions": 2,
                "filename": "server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "patch": "@@ -1650,12 +1650,12 @@ private Volume orchestrateDetachVolumeFromVM(long vmId, long volumeId) {\n         }\n \n         HostVO host = null;\n-        StoragePoolVO volumePool = _storagePoolDao.findById(volume.getPoolId());\n+        StoragePoolVO volumePool = _storagePoolDao.findByIdIncludingRemoved(volume.getPoolId());\n \n         if (hostId != null) {\n             host = _hostDao.findById(hostId);\n \n-            if (host != null && host.getHypervisorType() == HypervisorType.XenServer && volumePool.isManaged()) {\n+            if (host != null && host.getHypervisorType() == HypervisorType.XenServer && volumePool != null && volumePool.isManaged()) {\n                 sendCommand = true;\n             }\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/a07497b3731372bf902aae9569e6d579abaec3f8/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "sha": "dbae1946a367d7d51e56b298db5e74ed0b5e6a06",
                "status": "modified"
            }
        ],
        "message": "server: fix NPE case in VolumeApiServiceImpl\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n(cherry picked from commit df934c954106a618f8b0aca7e7dfbac890d78244)\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/48ef7e5f280b8eecfa59537cbb1b3d887517b8dc",
        "repo": "cloudstack",
        "unit_tests": [
            "VolumeApiServiceImplTest.java"
        ]
    },
    "cloudstack_a216046": {
        "bug_id": "cloudstack_a216046",
        "commit": "https://github.com/apache/cloudstack/commit/a2160461911bec0365c5a6a2eaff84cc396661ad",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/a2160461911bec0365c5a6a2eaff84cc396661ad/server/src/com/cloud/api/dispatch/ParamProcessWorker.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/dispatch/ParamProcessWorker.java?ref=a2160461911bec0365c5a6a2eaff84cc396661ad",
                "deletions": 4,
                "filename": "server/src/com/cloud/api/dispatch/ParamProcessWorker.java",
                "patch": "@@ -33,7 +33,6 @@\n \n import javax.inject.Inject;\n \n-\n import org.apache.log4j.Logger;\n \n import org.apache.cloudstack.acl.ControlledEntity;\n@@ -220,16 +219,17 @@ public void processParameters(final BaseCmd cmd, final Map params) {\n \n     private void doAccessChecks(BaseCmd cmd, Map<Object, AccessType> entitiesToAccess) {\n         Account caller = CallContext.current().getCallingAccount();\n-        Account owner = _accountMgr.getActiveAccountById(cmd.getEntityOwnerId());\n+        // due to deleteAccount design flaw CLOUDSTACK-6588, we should still include those removed account as well to clean up leftover resources from that account\n+        Account owner = _accountMgr.getAccount(cmd.getEntityOwnerId());\n \n         if (cmd instanceof BaseAsyncCreateCmd) {\n             // check that caller can access the owner account.\n-            _accountMgr.checkAccess(caller, null, true, owner);\n+            _accountMgr.checkAccess(caller, null, false, owner);\n         }\n \n         if (!entitiesToAccess.isEmpty()) {\n             // check that caller can access the owner account.\n-            _accountMgr.checkAccess(caller, null, true, owner);\n+            _accountMgr.checkAccess(caller, null, false, owner);\n             for (Map.Entry<Object,AccessType>entry : entitiesToAccess.entrySet()) {\n                 Object entity = entry.getKey();\n                 if (entity instanceof ControlledEntity) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/a2160461911bec0365c5a6a2eaff84cc396661ad/server/src/com/cloud/api/dispatch/ParamProcessWorker.java",
                "sha": "ad90812c6c586154c291c33507fe1927105bcd29",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-7165:[Automation] NPE observed during restart and expunge VM.",
        "parent": "https://github.com/apache/cloudstack/commit/f4757a198a95e71dc3b5f8d42ac2c88e0b74d590",
        "repo": "cloudstack",
        "unit_tests": [
            "ParamProcessWorkerTest.java"
        ]
    },
    "cloudstack_a3b8657": {
        "bug_id": "cloudstack_a3b8657",
        "commit": "https://github.com/apache/cloudstack/commit/a3b86573b921ee470ac60b3e801a6d18f7939658",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/a3b86573b921ee470ac60b3e801a6d18f7939658/server/src/com/cloud/network/NetworkManagerImpl.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/NetworkManagerImpl.java?ref=a3b86573b921ee470ac60b3e801a6d18f7939658",
                "deletions": 7,
                "filename": "server/src/com/cloud/network/NetworkManagerImpl.java",
                "patch": "@@ -2236,33 +2236,32 @@ public void release(VirtualMachineProfile vmProfile, boolean forced) throws\n             ConcurrentOperationException, ResourceUnavailableException {\n         List<NicVO> nics = _nicDao.listByVmId(vmProfile.getId());\n         for (NicVO nic : nics) {\n-            releaseNic(vmProfile, nic);\n+            releaseNic(vmProfile, nic.getId());\n         }\n     }\n \n-\n+    \n     @Override\n     @DB\n     public void releaseNic(VirtualMachineProfile vmProfile, Nic nic)\n             throws ConcurrentOperationException, ResourceUnavailableException {\n-        NicVO nicVO = _nicDao.findById(nic.getId());\n-        releaseNic(vmProfile, nicVO);\n+        releaseNic(vmProfile, nic.getId());\n     }\n \n     @DB\n-    protected void releaseNic(VirtualMachineProfile vmProfile, NicVO nicVO)\n+    protected void releaseNic(VirtualMachineProfile vmProfile, long nicId)\n             throws ConcurrentOperationException, ResourceUnavailableException {\n         //lock the nic\n         Transaction txn = Transaction.currentTxn();\n         txn.start();\n \n-        NicVO nic = _nicDao.lockRow(nicVO.getId(), true);\n+        NicVO nic = _nicDao.lockRow(nicId, true);\n         if (nic == null) {\n             throw new ConcurrentOperationException(\"Unable to acquire lock on nic \" + nic);\n         }\n \n         Nic.State originalState = nic.getState();\n-        NetworkVO network = _networksDao.findById(nicVO.getNetworkId());\n+        NetworkVO network = _networksDao.findById(nic.getNetworkId());\n \n         if (originalState == Nic.State.Reserved || originalState == Nic.State.Reserving) {\n             if (nic.getReservationStrategy() == Nic.ReservationStrategy.Start) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/a3b86573b921ee470ac60b3e801a6d18f7939658/server/src/com/cloud/network/NetworkManagerImpl.java",
                "sha": "ea3d552ca80b13f14a85ab66f4d7b728b7d9f3d3",
                "status": "modified"
            },
            {
                "additions": 55,
                "blob_url": "https://github.com/apache/cloudstack/blob/a3b86573b921ee470ac60b3e801a6d18f7939658/server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 84,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=a3b86573b921ee470ac60b3e801a6d18f7939658",
                "deletions": 29,
                "filename": "server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -2953,6 +2953,7 @@ public boolean removeNicFromVm(VirtualMachine vm, NicVO nic) throws ConcurrentOp\n     }\n \n     @Override\n+    @DB\n     public boolean removeVmFromNetwork(VirtualMachine vm, Network network, URI broadcastUri) throws ConcurrentOperationException, ResourceUnavailableException {\n         VMInstanceVO vmVO = _vmDao.findById(vm.getId());\n         ReservationContext context = new ReservationContextImpl(null, null, _accountMgr.getActiveUser(User.UID_SYSTEM),\n@@ -2968,53 +2969,78 @@ public boolean removeVmFromNetwork(VirtualMachine vm, Network network, URI broad\n         VirtualMachineTO vmTO = hvGuru.implement(vmProfile);\n \n         Nic nic = null;\n-\n         if (broadcastUri != null) {\n             nic = _nicsDao.findByNetworkIdInstanceIdAndBroadcastUri(network.getId(), vm.getId(), broadcastUri.toString());\n         } else {\n             nic = _networkModel.getNicInNetwork(vm.getId(), network.getId());\n         }\n-\n-        if (nic == null) {\n+        \n+        if (nic == null){\n             s_logger.warn(\"Could not get a nic with \" + network);\n             return false;\n         }\n-\n+        \n         // don't delete default NIC on a user VM\n         if (nic.isDefaultNic() && vm.getType() == VirtualMachine.Type.User) {\n             s_logger.warn(\"Failed to remove nic from \" + vm + \" in \" + network + \", nic is default.\");\n             throw new CloudRuntimeException(\"Failed to remove nic from \" + vm + \" in \" + network + \", nic is default.\");\n         }\n \n-        NicProfile nicProfile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(),\n-                _networkModel.getNetworkRate(network.getId(), vm.getId()),\n-                _networkModel.isSecurityGroupSupportedInNetwork(network),\n-                _networkModel.getNetworkTag(vmProfile.getVirtualMachine().getHypervisorType(), network));\n-\n-        //1) Unplug the nic\n-        if (vm.getState() == State.Running) {\n-            NicTO nicTO = toNicTO(nicProfile, vmProfile.getVirtualMachine().getHypervisorType());\n-            s_logger.debug(\"Un-plugging nic for vm \" + vm + \" from network \" + network);\n-            boolean result = unplugNic(network, nicTO, vmTO, context, dest);\n-            if (result) {\n-                s_logger.debug(\"Nic is unplugged successfully for vm \" + vm + \" in network \" + network);\n-            } else {\n-                s_logger.warn(\"Failed to unplug nic for the vm \" + vm + \" from network \" + network);\n-                return false;\n+        //Lock on nic is needed here\n+        Nic lock = _nicsDao.acquireInLockTable(nic.getId());\n+        if (lock == null) {\n+            //check if nic is still there. Return if it was released already\n+            if (_nicsDao.findById(nic.getId()) == null) {\n+                if (s_logger.isDebugEnabled()) {\n+                    s_logger.debug(\"Not need to remove the vm \" + vm + \" from network \" + network + \" as the vm doesn't have nic in this network\");\n+                }\n+                return true;\n             }\n-        } else if (vm.getState() != State.Stopped) {\n-            s_logger.warn(\"Unable to remove vm \" + vm + \" from network  \" + network);\n-            throw new ResourceUnavailableException(\"Unable to remove vm \" + vm + \" from network, is not in the right state\",\n-                    DataCenter.class, vm.getDataCenterId());\n+            throw new ConcurrentOperationException(\"Unable to lock nic \" + nic.getId());\n+        }\n+        \n+        if (s_logger.isDebugEnabled()) {\n+            s_logger.debug(\"Lock is acquired for nic id \" + lock.getId() + \" as a part of remove vm \" + vm + \" from network \" + network);\n         }\n+        \n+        try {\n+            NicProfile nicProfile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(),\n+                    _networkModel.getNetworkRate(network.getId(), vm.getId()),\n+                    _networkModel.isSecurityGroupSupportedInNetwork(network),\n+                    _networkModel.getNetworkTag(vmProfile.getVirtualMachine().getHypervisorType(), network));\n+\n+            //1) Unplug the nic\n+            if (vm.getState() == State.Running) {\n+                NicTO nicTO = toNicTO(nicProfile, vmProfile.getVirtualMachine().getHypervisorType());\n+                s_logger.debug(\"Un-plugging nic for vm \" + vm + \" from network \" + network);\n+                boolean result = unplugNic(network, nicTO, vmTO, context, dest);\n+                if (result) {\n+                    s_logger.debug(\"Nic is unplugged successfully for vm \" + vm + \" in network \" + network );\n+                } else {\n+                    s_logger.warn(\"Failed to unplug nic for the vm \" + vm + \" from network \" + network);\n+                    return false;\n+                }\n+            } else if (vm.getState() != State.Stopped) {\n+                s_logger.warn(\"Unable to remove vm \" + vm + \" from network  \" + network);\n+                throw new ResourceUnavailableException(\"Unable to remove vm \" + vm + \" from network, is not in the right state\",\n+                        DataCenter.class, vm.getDataCenterId());\n+            }\n \n-        //2) Release the nic\n-        _networkMgr.releaseNic(vmProfile, nic);\n-        s_logger.debug(\"Successfully released nic \" + nic + \"for vm \" + vm);\n+            //2) Release the nic\n+            _networkMgr.releaseNic(vmProfile, nic);\n+            s_logger.debug(\"Successfully released nic \" + nic +  \"for vm \" + vm);\n \n-        //3) Remove the nic\n-        _networkMgr.removeNic(vmProfile, nic);\n-        return true;\n+            //3) Remove the nic\n+            _networkMgr.removeNic(vmProfile, nic);\n+            return true;\n+        } finally {\n+            if (lock != null) {\n+                _nicsDao.releaseFromLockTable(lock.getId());\n+                if (s_logger.isDebugEnabled()) {\n+                    s_logger.debug(\"Lock is released for nic id \" + lock.getId() + \" as a part of remove vm \" + vm + \" from network \" + network);\n+                }\n+            }\n+        }\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/cloudstack/raw/a3b86573b921ee470ac60b3e801a6d18f7939658/server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "08bca43e733cf26eb0af9a7a73184a511d211c61",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-4020: lock nic entry in releaseNic method. Otherwise multiple threads can try to release the same nic at the same time, and it will lead to NPEs and backend failures\n\nConflicts:\n\tserver/src/com/cloud/network/NetworkManagerImpl.java\n\tserver/src/com/cloud/vm/VirtualMachineManagerImpl.java",
        "parent": "https://github.com/apache/cloudstack/commit/3587127df6eac5429dd4f10609a2d09a17e1a5fa",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_a4e6784": {
        "bug_id": "cloudstack_a4e6784",
        "commit": "https://github.com/apache/cloudstack/commit/a4e6784e0b5bbef8135271a0c1c5f990ed2115b3",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/a4e6784e0b5bbef8135271a0c1c5f990ed2115b3/plugins/storage/image/default/src/org/apache/cloudstack/storage/datastore/driver/CloudStackImageStoreDriverImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/storage/image/default/src/org/apache/cloudstack/storage/datastore/driver/CloudStackImageStoreDriverImpl.java?ref=a4e6784e0b5bbef8135271a0c1c5f990ed2115b3",
                "deletions": 2,
                "filename": "plugins/storage/image/default/src/org/apache/cloudstack/storage/datastore/driver/CloudStackImageStoreDriverImpl.java",
                "patch": "@@ -276,8 +276,9 @@ private void deleteTemplate(DataObject data, AsyncCompletionCallback<CommandResu\n         // TODO: need to understand why we need to mark destroyed in\n         // template_store_ref table here instead of in callback.\n         // Currently I did that in callback, so I removed previous code to mark template_host_ref\n-\n-        UsageEventUtils.publishUsageEvent(eventType, account.getId(), sZoneId, templateId, null, null, null);\n+        if ( sZoneId != null ){\n+            UsageEventUtils.publishUsageEvent(eventType, account.getId(), sZoneId, templateId, null, null, null);\n+        }\n \n         // get installpath of this template on image store\n         TemplateDataStoreVO tmplStore = _templateStoreDao.findByStoreTemplate(storeId, templateId);",
                "raw_url": "https://github.com/apache/cloudstack/raw/a4e6784e0b5bbef8135271a0c1c5f990ed2115b3/plugins/storage/image/default/src/org/apache/cloudstack/storage/datastore/driver/CloudStackImageStoreDriverImpl.java",
                "sha": "71afc13e13cdacbf4e1bc9365eef4074659e0cd7",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/a4e6784e0b5bbef8135271a0c1c5f990ed2115b3/plugins/storage/image/s3/src/org/apache/cloudstack/storage/datastore/driver/S3ImageStoreDriverImpl.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/storage/image/s3/src/org/apache/cloudstack/storage/datastore/driver/S3ImageStoreDriverImpl.java?ref=a4e6784e0b5bbef8135271a0c1c5f990ed2115b3",
                "deletions": 5,
                "filename": "plugins/storage/image/s3/src/org/apache/cloudstack/storage/datastore/driver/S3ImageStoreDriverImpl.java",
                "patch": "@@ -286,11 +286,10 @@ private void deleteTemplate(DataObject data, AsyncCompletionCallback<CommandResu\n             eventType = EventTypes.EVENT_TEMPLATE_DELETE;\n         }\n \n-        // TODO: need to understand why we need to mark destroyed in\n-        // template_store_ref table here instead of in callback.\n-        // Currently I did that in callback, so I removed previous code to mark template_host_ref\n-\n-        UsageEventUtils.publishUsageEvent(eventType, account.getId(), sZoneId, templateId, null, null, null);\n+        if ( sZoneId != null ){\n+            //TODO: how to handle region wide usage data where sZoneId == null\n+            UsageEventUtils.publishUsageEvent(eventType, account.getId(), sZoneId, templateId, null, null, null);\n+        }\n \n         List<UserVmJoinVO> userVmUsingIso = _userVmJoinDao.listActiveByIsoId(templateId);\n         // check if there is any VM using this ISO.",
                "raw_url": "https://github.com/apache/cloudstack/raw/a4e6784e0b5bbef8135271a0c1c5f990ed2115b3/plugins/storage/image/s3/src/org/apache/cloudstack/storage/datastore/driver/S3ImageStoreDriverImpl.java",
                "sha": "1c6e17e8e1bb619deb9fada4eb3eb5d6e850856a",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/a4e6784e0b5bbef8135271a0c1c5f990ed2115b3/plugins/storage/image/swift/src/org/apache/cloudstack/storage/datastore/driver/SwiftImageStoreDriverImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/storage/image/swift/src/org/apache/cloudstack/storage/datastore/driver/SwiftImageStoreDriverImpl.java?ref=a4e6784e0b5bbef8135271a0c1c5f990ed2115b3",
                "deletions": 2,
                "filename": "plugins/storage/image/swift/src/org/apache/cloudstack/storage/datastore/driver/SwiftImageStoreDriverImpl.java",
                "patch": "@@ -281,8 +281,9 @@ private void deleteTemplate(DataObject data, AsyncCompletionCallback<CommandResu\n         // TODO: need to understand why we need to mark destroyed in\n         // template_store_ref table here instead of in callback.\n         // Currently I did that in callback, so I removed previous code to mark template_host_ref\n-\n-        UsageEventUtils.publishUsageEvent(eventType, account.getId(), sZoneId, templateId, null, null, null);\n+        if (sZoneId != null){\n+            UsageEventUtils.publishUsageEvent(eventType, account.getId(), sZoneId, templateId, null, null, null);\n+        }\n \n         List<UserVmJoinVO> userVmUsingIso = _userVmJoinDao.listActiveByIsoId(templateId);\n         // check if there is any VM using this ISO.",
                "raw_url": "https://github.com/apache/cloudstack/raw/a4e6784e0b5bbef8135271a0c1c5f990ed2115b3/plugins/storage/image/swift/src/org/apache/cloudstack/storage/datastore/driver/SwiftImageStoreDriverImpl.java",
                "sha": "590b653bdff4e456a08e2d0752666ff9cc948876",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/a4e6784e0b5bbef8135271a0c1c5f990ed2115b3/services/secondary-storage/src/org/apache/cloudstack/storage/resource/NfsSecondaryStorageResource.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/services/secondary-storage/src/org/apache/cloudstack/storage/resource/NfsSecondaryStorageResource.java?ref=a4e6784e0b5bbef8135271a0c1c5f990ed2115b3",
                "deletions": 1,
                "filename": "services/secondary-storage/src/org/apache/cloudstack/storage/resource/NfsSecondaryStorageResource.java",
                "patch": "@@ -1535,7 +1535,7 @@ protected Answer execute(final DeleteTemplateCommand cmd) {\n             final String bucket = s3.getBucketName();\n             try {\n                 S3Utils.deleteDirectory(s3, bucket, path);\n-                return new Answer(cmd, true, String.format(\"Deleted template %1%s from bucket %2$s.\", path, bucket));\n+                return new Answer(cmd, true, String.format(\"Deleted template %1$s from bucket %2$s.\", path, bucket));\n             } catch (Exception e) {\n                 final String errorMessage = String.format(\"Failed to delete template %1$s from bucket %2$s due to the following error: %3$s\", path,\n                         bucket, e.getMessage());",
                "raw_url": "https://github.com/apache/cloudstack/raw/a4e6784e0b5bbef8135271a0c1c5f990ed2115b3/services/secondary-storage/src/org/apache/cloudstack/storage/resource/NfsSecondaryStorageResource.java",
                "sha": "6fbb06b3f2cfb66f42b58a5e1bf54967618d67ac",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-2578: NPE in deleting template from S3.",
        "parent": "https://github.com/apache/cloudstack/commit/cb0659ab33fcb0b0b0b8daeadd0fd41576d11db4",
        "repo": "cloudstack",
        "unit_tests": [
            "NfsSecondaryStorageResourceTest.java"
        ]
    },
    "cloudstack_a5004e3": {
        "bug_id": "cloudstack_a5004e3",
        "commit": "https://github.com/apache/cloudstack/commit/a5004e37ad4609b98e5d5a78452e6fb8858f6504",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/a5004e37ad4609b98e5d5a78452e6fb8858f6504/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/VolumeApiServiceImpl.java?ref=a5004e37ad4609b98e5d5a78452e6fb8858f6504",
                "deletions": 2,
                "filename": "server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "patch": "@@ -343,8 +343,11 @@ public VolumeVO doInTransaction(TransactionStatus status) {\n                 volume.setDomainId((owner == null) ? Domain.ROOT_DOMAIN : owner.getDomainId());\n \n                 if (diskOfferingId == null) {\n-                    long defaultDiskOfferingId = _diskOfferingDao.findByUniqueName(\"Cloud.com-Custom\").getId();\n-                    volume.setDiskOfferingId(defaultDiskOfferingId);\n+                    DiskOfferingVO diskOfferingVO = _diskOfferingDao.findByUniqueName(\"Cloud.com-Custom\");\n+                    if (diskOfferingVO != null) {\n+                        long defaultDiskOfferingId = diskOfferingVO.getId();\n+                        volume.setDiskOfferingId(defaultDiskOfferingId);\n+                    }\n                 } else {\n                     volume.setDiskOfferingId(diskOfferingId);\n                 }",
                "raw_url": "https://github.com/apache/cloudstack/raw/a5004e37ad4609b98e5d5a78452e6fb8858f6504/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "sha": "cf18555bfcac7694822d1f88e6600bd6555c7583",
                "status": "modified"
            }
        ],
        "message": "CID-1233084: Fix NPE in persisting volume in VolumeApiServiceImpl\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/bdee5e37343f6f4e5be2acd6cbc6e172e0d1fe36",
        "repo": "cloudstack",
        "unit_tests": [
            "VolumeApiServiceImplTest.java"
        ]
    },
    "cloudstack_a5a65c7": {
        "bug_id": "cloudstack_a5a65c7",
        "commit": "https://github.com/apache/cloudstack/commit/a5a65c7b551ee5cc32588997937267b716eff681",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/a5a65c7b551ee5cc32588997937267b716eff681/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java?ref=a5a65c7b551ee5cc32588997937267b716eff681",
                "deletions": 2,
                "filename": "engine/orchestration/src/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java",
                "patch": "@@ -937,10 +937,10 @@ public Volume migrateVolume(Volume volume, StoragePool destPool) throws StorageU\n             return result.getVolume();\n         } catch (InterruptedException e) {\n             s_logger.debug(\"migrate volume failed\", e);\n-            return null;\n+            throw new CloudRuntimeException(e.getMessage());\n         } catch (ExecutionException e) {\n             s_logger.debug(\"migrate volume failed\", e);\n-            return null;\n+            throw new CloudRuntimeException(e.getMessage());\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/a5a65c7b551ee5cc32588997937267b716eff681/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java",
                "sha": "1b87ccf44900af0389b059cabde8d333610b48ee",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/cloudstack/blob/a5a65c7b551ee5cc32588997937267b716eff681/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/VolumeApiServiceImpl.java?ref=a5a65c7b551ee5cc32588997937267b716eff681",
                "deletions": 10,
                "filename": "server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "patch": "@@ -1795,6 +1795,8 @@ public Volume migrateVolume(MigrateVolumeCmd cmd) {\n                 if (jobResult != null) {\n                     if (jobResult instanceof ConcurrentOperationException)\n                         throw (ConcurrentOperationException)jobResult;\n+                    else if (jobResult instanceof RuntimeException)\n+                        throw (RuntimeException)jobResult;\n                     else if (jobResult instanceof Throwable)\n                         throw new RuntimeException(\"Unexpected exception\", (Throwable)jobResult);\n                 }\n@@ -1817,35 +1819,39 @@ private Volume orchestrateMigrateVolume(long volumeId, long destPoolId, boolean\n         assert (destPool != null);\n \n         Volume newVol = null;\n-        if (liveMigrateVolume) {\n-            newVol = liveMigrateVolume(vol, destPool);\n-        } else {\n-            try {\n+        try {\n+            if (liveMigrateVolume) {\n+                newVol = liveMigrateVolume(vol, destPool);\n+            } else {\n                 newVol = _volumeMgr.migrateVolume(vol, destPool);\n-            } catch (StorageUnavailableException e) {\n-                s_logger.debug(\"Failed to migrate volume\", e);\n             }\n+        } catch (StorageUnavailableException e) {\n+            s_logger.debug(\"Failed to migrate volume\", e);\n+            throw new CloudRuntimeException(e.getMessage());\n+        }  catch (Exception e) {\n+            s_logger.debug(\"Failed to migrate volume\", e);\n+            throw new CloudRuntimeException(e.getMessage());\n         }\n         return newVol;\n     }\n \n     @DB\n-    protected Volume liveMigrateVolume(Volume volume, StoragePool destPool) {\n+    protected Volume liveMigrateVolume(Volume volume, StoragePool destPool) throws StorageUnavailableException {\n         VolumeInfo vol = volFactory.getVolume(volume.getId());\n         AsyncCallFuture<VolumeApiResult> future = volService.migrateVolume(vol, (DataStore)destPool);\n         try {\n             VolumeApiResult result = future.get();\n             if (result.isFailed()) {\n                 s_logger.debug(\"migrate volume failed:\" + result.getResult());\n-                return null;\n+                throw new StorageUnavailableException(\"Migrate volume failed: \" + result.getResult(), destPool.getId());\n             }\n             return result.getVolume();\n         } catch (InterruptedException e) {\n             s_logger.debug(\"migrate volume failed\", e);\n-            return null;\n+            throw new CloudRuntimeException(e.getMessage());\n         } catch (ExecutionException e) {\n             s_logger.debug(\"migrate volume failed\", e);\n-            return null;\n+            throw new CloudRuntimeException(e.getMessage());\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/a5a65c7b551ee5cc32588997937267b716eff681/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "sha": "7fa600a8f36f9654cc8030c590b8a26e94892180",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-8122. Handle NPE thrown during migration failures.\nWhen migration fails instead of returning NULL, throw the exception.",
        "parent": "https://github.com/apache/cloudstack/commit/ac491c96075d65e35157380fe7d28fdd917c0e90",
        "repo": "cloudstack",
        "unit_tests": [
            "VolumeApiServiceImplTest.java"
        ]
    },
    "cloudstack_a6a774f": {
        "bug_id": "cloudstack_a6a774f",
        "commit": "https://github.com/apache/cloudstack/commit/a6a774f6c05f98a862ef81ab309dc9b274afc278",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/a6a774f6c05f98a862ef81ab309dc9b274afc278/server/src/com/cloud/server/ManagementServerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/ManagementServerImpl.java?ref=a6a774f6c05f98a862ef81ab309dc9b274afc278",
                "deletions": 1,
                "filename": "server/src/com/cloud/server/ManagementServerImpl.java",
                "patch": "@@ -5196,7 +5196,7 @@ public Long extractVolume(ExtractVolumeCmd cmd) throws URISyntaxException {\n         }\n         \n         VMTemplateVO template = ApiDBUtils.findTemplateById(volume.getTemplateId());    \t\n-    \tboolean isExtractable = template != null && template.isExtractable() && !(template.getTemplateType()== Storage.TemplateType.SYSTEM || template.getTemplateType()== Storage.TemplateType.BUILTIN);\n+    \tboolean isExtractable = template != null && template.isExtractable() && template.getTemplateType() != Storage.TemplateType.SYSTEM;\n         if( !isExtractable && account!=null && account.getType() != Account.ACCOUNT_TYPE_ADMIN){ // Global admins are allowed to extract\n         \tthrow new PermissionDeniedException(\"The volume:\" +volumeId+ \" is not allowed to be extracted\");\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/a6a774f6c05f98a862ef81ab309dc9b274afc278/server/src/com/cloud/server/ManagementServerImpl.java",
                "sha": "31df6ab1c933bc3ab5205b8c6ebfd8c3920abd41",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cloudstack/blob/a6a774f6c05f98a862ef81ab309dc9b274afc278/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/UserVmManagerImpl.java?ref=a6a774f6c05f98a862ef81ab309dc9b274afc278",
                "deletions": 8,
                "filename": "server/src/com/cloud/vm/UserVmManagerImpl.java",
                "patch": "@@ -2487,7 +2487,7 @@ public VMTemplateVO createPrivateTemplateRecord(CreateTemplateCmd cmd) throws In\n     \tLong nextTemplateId = _templateDao.getNextInSequence(Long.class, \"id\");\n     \tString description = cmd.getDisplayText();\n     \tVMTemplateVO template = ApiDBUtils.findTemplateById(volume.getTemplateId());    \t\n-    \tboolean isExtractable = template != null && template.isExtractable() && !(template.getTemplateType()== Storage.TemplateType.SYSTEM || template.getTemplateType()== Storage.TemplateType.BUILTIN);\n+    \tboolean isExtractable = template != null && template.isExtractable() && template.getTemplateType() != Storage.TemplateType.SYSTEM ;\n \n         privateTemplate = new VMTemplateVO(nextTemplateId,\n                                            uniqueName,\n@@ -2591,13 +2591,14 @@ public VMTemplateVO createPrivateTemplate(CreateTemplateCmd command) throws Clou\n             if( volume == null ) {\n                 throw new CloudRuntimeException(\"Unable to find volume for Id \" + volumeId);\n             }\n-            long instanceId = volume.getInstanceId();\n-            VMInstanceVO vm = _vmDao.findById(instanceId);\n-            State vmState = vm.getState();\n-            if( !vmState.equals(State.Stopped) && !vmState.equals(State.Destroyed)) {\n-                throw new CloudRuntimeException(\"Please put VM \" + vm.getHostName() + \" into Stopped state first\");\n-            }\n-                           \n+            Long instanceId = volume.getInstanceId();\n+            if (instanceId != null){\n+            \tVMInstanceVO vm = _vmDao.findById(instanceId);\n+            \tState vmState = vm.getState();\n+            \tif( !vmState.equals(State.Stopped) && !vmState.equals(State.Destroyed)) {\n+            \t\tthrow new CloudRuntimeException(\"Please put VM \" + vm.getHostName() + \" into Stopped state first\");\n+            \t}\n+            }           \n             cmd = new CreatePrivateTemplateFromVolumeCommand(secondaryStorageURL, templateId, volume.getAccountId(),\n                     command.getTemplateName(), uniqueName, volume.getPath(), vmName);\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/a6a774f6c05f98a862ef81ab309dc9b274afc278/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "sha": "af6470c4100e06f8364577bc52f347dd74483150",
                "status": "modified"
            }
        ],
        "message": "bug 7369 : Resolving NPE while creating a private template from detached volume. The instance id is null when it is detached which was the culprit here.\nstatus 7369: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/b2ba0521df3d12ac72e38fc976748ca32cc919c8",
        "repo": "cloudstack",
        "unit_tests": [
            "UserVmManagerImplTest.java"
        ]
    },
    "cloudstack_a785373": {
        "bug_id": "cloudstack_a785373",
        "commit": "https://github.com/apache/cloudstack/commit/a78537398cca223f657f89994c9ef5a32180e86e",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/a78537398cca223f657f89994c9ef5a32180e86e/api/src/com/cloud/capacity/Capacity.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/capacity/Capacity.java?ref=a78537398cca223f657f89994c9ef5a32180e86e",
                "deletions": 1,
                "filename": "api/src/com/cloud/capacity/Capacity.java",
                "patch": "@@ -37,7 +37,7 @@\n \n     public Long getHostOrPoolId();\n \n-    public long getDataCenterId();\n+    public Long getDataCenterId();\n \n     public Long getPodId();\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/a78537398cca223f657f89994c9ef5a32180e86e/api/src/com/cloud/capacity/Capacity.java",
                "sha": "16d67fc122d639e5865610089d159e66d4850580",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/a78537398cca223f657f89994c9ef5a32180e86e/core/src/com/cloud/capacity/CapacityVO.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/core/src/com/cloud/capacity/CapacityVO.java?ref=a78537398cca223f657f89994c9ef5a32180e86e",
                "deletions": 5,
                "filename": "core/src/com/cloud/capacity/CapacityVO.java",
                "patch": "@@ -44,7 +44,7 @@\n     private Long hostOrPoolId;\r\n \r\n     @Column(name=\"data_center_id\")\r\n-    private long dataCenterId;\r\n+    private Long dataCenterId;\r\n \r\n     @Column(name=\"pod_id\")\r\n     private Long podId;\r\n@@ -79,7 +79,7 @@\n     \r\n     public CapacityVO() {}\r\n \r\n-    public CapacityVO(Long hostId, long dataCenterId, Long podId, Long clusterId, long usedCapacity, long totalCapacity, short capacityType) {\r\n+    public CapacityVO(Long hostId, Long dataCenterId, Long podId, Long clusterId, long usedCapacity, long totalCapacity, short capacityType) {\r\n         this.hostOrPoolId = hostId;\r\n         this.dataCenterId = dataCenterId;\r\n         this.podId = podId;\n@@ -90,7 +90,7 @@ public CapacityVO(Long hostId, long dataCenterId, Long podId, Long clusterId, lo\n         this.updateTime = new Date();\r\n     }\n     \n-    public CapacityVO(long dataCenterId, Long podId, Long clusterId, short capacityType, float usedPercentage) {        \n+    public CapacityVO(Long dataCenterId, Long podId, Long clusterId, short capacityType, float usedPercentage) {        \n         this.dataCenterId = dataCenterId;\n         this.podId = podId;\n         this.clusterId = clusterId;\n@@ -112,10 +112,10 @@ public void setHostId(Long hostId) {\n         this.hostOrPoolId = hostId;\r\n     }\r\n     @Override\n-    public long getDataCenterId() {\r\n+    public Long getDataCenterId() {\r\n         return dataCenterId;\r\n     }\r\n-    public void setDataCenterId(long dataCenterId) {\r\n+    public void setDataCenterId(Long dataCenterId) {\r\n         this.dataCenterId = dataCenterId;\r\n     }\r\n     \r",
                "raw_url": "https://github.com/apache/cloudstack/raw/a78537398cca223f657f89994c9ef5a32180e86e/core/src/com/cloud/capacity/CapacityVO.java",
                "sha": "5c2d43861fa2d1bb87b3b515cb3e5941b9f5afb7",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/a78537398cca223f657f89994c9ef5a32180e86e/server/src/com/cloud/server/ManagementServerImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/ManagementServerImpl.java?ref=a78537398cca223f657f89994c9ef5a32180e86e",
                "deletions": 0,
                "filename": "server/src/com/cloud/server/ManagementServerImpl.java",
                "patch": "@@ -2121,6 +2121,11 @@ public int compare(SummedCapacity arg0, SummedCapacity arg1) {\n         } else if (zoneId != null) {\n             dcList.add(ApiDBUtils.findZoneById(zoneId));\n         } else {\n+        \tif (clusterId != null){\n+        \t\tzoneId = ApiDBUtils.findClusterById(clusterId).getDataCenterId();\n+        \t}else{\n+        \t\tzoneId = ApiDBUtils.findPodById(podId).getDataCenterId();\n+        \t}\n             if (capacityType == null || capacityType == Capacity.CAPACITY_TYPE_STORAGE) {\n                 capacities.add(_storageMgr.getStoragePoolUsedStats(null, clusterId, podId, zoneId));\n             }",
                "raw_url": "https://github.com/apache/cloudstack/raw/a78537398cca223f657f89994c9ef5a32180e86e/server/src/com/cloud/server/ManagementServerImpl.java",
                "sha": "ae0c8dc0ef005312ebceb57f35a9526577930ce2",
                "status": "modified"
            }
        ],
        "message": "Bug 14490: Fix NPE in ListCapacity",
        "parent": "https://github.com/apache/cloudstack/commit/a5a7be4c7e30edaf8db3f241ec03524755ba69d2",
        "repo": "cloudstack",
        "unit_tests": [
            "ManagementServerImplTest.java"
        ]
    },
    "cloudstack_a7953c1": {
        "bug_id": "cloudstack_a7953c1",
        "commit": "https://github.com/apache/cloudstack/commit/a7953c1e7a837a4dd75b23dc28e9a2f51997b5d2",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/a7953c1e7a837a4dd75b23dc28e9a2f51997b5d2/server/src/com/cloud/template/TemplateManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/template/TemplateManagerImpl.java?ref=a7953c1e7a837a4dd75b23dc28e9a2f51997b5d2",
                "deletions": 1,
                "filename": "server/src/com/cloud/template/TemplateManagerImpl.java",
                "patch": "@@ -941,7 +941,7 @@ public boolean delete(long userId, long templateId, Long zoneId) {\n \t\t\t}\n \t\t}\n \t\t\n-\t\tAccount account = _accountDao.findById(template.getAccountId());\n+\t\tAccount account = _accountDao.findByIdIncludingRemoved(template.getAccountId());\n \t\tString eventType = \"\";\n \t\t\n \t\tif (template.getFormat().equals(ImageFormat.ISO)){",
                "raw_url": "https://github.com/apache/cloudstack/raw/a7953c1e7a837a4dd75b23dc28e9a2f51997b5d2/server/src/com/cloud/template/TemplateManagerImpl.java",
                "sha": "5408358aadf4479ab3da0a874d93d0d21d110270",
                "status": "modified"
            }
        ],
        "message": "bug 9205: resolved fixed\nstatus 9205: fix NPE in usageEvent",
        "parent": "https://github.com/apache/cloudstack/commit/6bd978abfe4e68fa62b708fd5eb4b8eb2b5c19f8",
        "repo": "cloudstack",
        "unit_tests": [
            "TemplateManagerImplTest.java"
        ]
    },
    "cloudstack_a8360e4": {
        "bug_id": "cloudstack_a8360e4",
        "commit": "https://github.com/apache/cloudstack/commit/a8360e41c0c99793b1f6b0a4e0cb10dbc3d00a9c",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cloudstack/blob/a8360e41c0c99793b1f6b0a4e0cb10dbc3d00a9c/server/src/com/cloud/storage/StorageManagerImpl.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/StorageManagerImpl.java?ref=a8360e41c0c99793b1f6b0a4e0cb10dbc3d00a9c",
                "deletions": 1,
                "filename": "server/src/com/cloud/storage/StorageManagerImpl.java",
                "patch": "@@ -403,14 +403,24 @@ public boolean isLocalStorageActiveOnHost(Long hostId) {\n     @Override\n     public StoragePool findStoragePool(DiskProfile dskCh, final DataCenterVO dc, Pod pod, Long clusterId, Long hostId, VMInstanceVO vm,\n             final Set<StoragePool> avoid) {\n+        Long podId = null;\n+        if (pod != null) {\n+            podId = pod.getId();\n+        } else if (clusterId != null) {\n+            ClusterVO cluster = _clusterDao.findById(clusterId);\n+            if (cluster != null) {\n+                podId = cluster.getPodId();\n+            }\n+        }\n+\n         VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n         for (StoragePoolAllocator allocator : _storagePoolAllocators) {\n \n             ExcludeList avoidList = new ExcludeList();\n             for (StoragePool pool : avoid) {\n                 avoidList.addPool(pool.getId());\n             }\n-            DataCenterDeployment plan = new DataCenterDeployment(dc.getId(), pod.getId(), clusterId, hostId, null, null);\n+            DataCenterDeployment plan = new DataCenterDeployment(dc.getId(), podId, clusterId, hostId, null, null);\n \n             final List<StoragePool> poolList = allocator.allocateToPool(dskCh, profile, plan, avoidList, 1);\n             if (poolList != null && !poolList.isEmpty()) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/a8360e41c0c99793b1f6b0a4e0cb10dbc3d00a9c/server/src/com/cloud/storage/StorageManagerImpl.java",
                "sha": "25ef70ba95d30be5eddc9ca47ef10a7edf010dd7",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-3942 NPE from findStoragePool method\n\nChanges:\n- Added null checks for podId\n\nConflicts:\n\n\tserver/src/com/cloud/storage/StorageManagerImpl.java",
        "parent": "https://github.com/apache/cloudstack/commit/c2192808aa5f7a391a79fb6c84592819c032fa45",
        "repo": "cloudstack",
        "unit_tests": [
            "StorageManagerImplTest.java"
        ]
    },
    "cloudstack_aca0f79": {
        "bug_id": "cloudstack_aca0f79",
        "commit": "https://github.com/apache/cloudstack/commit/aca0f7959274d4cc3d6a8a727c65977952d66dce",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/aca0f7959274d4cc3d6a8a727c65977952d66dce/server/src/com/cloud/network/vpc/NetworkACLServiceImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/vpc/NetworkACLServiceImpl.java?ref=aca0f7959274d4cc3d6a8a727c65977952d66dce",
                "deletions": 3,
                "filename": "server/src/com/cloud/network/vpc/NetworkACLServiceImpl.java",
                "patch": "@@ -612,13 +612,14 @@ public boolean revokeNetworkACLItem(long ruleId) {\n \n             Vpc vpc = _entityMgr.findById(Vpc.class, acl.getVpcId());\n \n+            if((aclItem.getAclId() == NetworkACL.DEFAULT_ALLOW) || (aclItem.getAclId() == NetworkACL.DEFAULT_DENY)){\n+                throw new InvalidParameterValueException(\"ACL Items in default ACL cannot be deleted\");\n+            }\n+\n             Account caller = CallContext.current().getCallingAccount();\n \n             _accountMgr.checkAccess(caller, null, true, vpc);\n \n-            if((aclItem.getAclId() == NetworkACL.DEFAULT_ALLOW) || (aclItem.getAclId() == NetworkACL.DEFAULT_DENY)){\n-                throw new InvalidParameterValueException(\"ACL Items in default ACL cannot be deleted\");\n-            }\n         }\n         return _networkAclMgr.revokeNetworkACLItem(ruleId);\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/aca0f7959274d4cc3d6a8a727c65977952d66dce/server/src/com/cloud/network/vpc/NetworkACLServiceImpl.java",
                "sha": "bee4018145d28f58d16b77d5cf2d12cf3e704db2",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-8072: Fixed NPE in deleting default ACL items in default ACL",
        "parent": "https://github.com/apache/cloudstack/commit/6321a29e4336de9ffe96e27968f896ec5a8bf37d",
        "repo": "cloudstack",
        "unit_tests": [
            "NetworkACLServiceImplTest.java"
        ]
    },
    "cloudstack_b10f560": {
        "bug_id": "cloudstack_b10f560",
        "commit": "https://github.com/apache/cloudstack/commit/b10f560be52c4dc448a484917caf8c553b67b77c",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cloudstack/blob/b10f560be52c4dc448a484917caf8c553b67b77c/server/src/com/cloud/network/element/VirtualRouterElement.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/element/VirtualRouterElement.java?ref=b10f560be52c4dc448a484917caf8c553b67b77c",
                "deletions": 3,
                "filename": "server/src/com/cloud/network/element/VirtualRouterElement.java",
                "patch": "@@ -63,6 +63,7 @@\n import com.cloud.vm.UserVmManager;\n import com.cloud.vm.VirtualMachine;\n import com.cloud.vm.VirtualMachineProfile;\n+import com.cloud.vm.VirtualMachine.State;\n import com.cloud.vm.dao.DomainRouterDao;\n import com.cloud.vm.dao.UserVmDao;\n \n@@ -153,17 +154,22 @@ public boolean restart(Network network, ReservationContext context) throws Concu\n         }\n \n         /* Get the host_id in order to find the cluster */\n-        long host_id = 0;\n+        Long host_id = new Long(0);\n         for (DomainRouterVO router : routers) {\n-            host_id = router.getHostId();\n+            if (host_id == null || host_id == 0) {\n+                host_id = (router.getHostId() != null ? router.getHostId() : router.getLastHostId());\n+            }\n             /* FIXME it's not completely safe to ignore these failure, but we would try to push on now */\n-            if (_routerMgr.stopRouter(router.getId(), false) == null) {\n+            if (router.getState() != State.Stopped || _routerMgr.stopRouter(router.getId(), false) == null) {\n                 s_logger.warn(\"Failed to stop virtual router element \" + router + \" as a part of network \" + network + \" restart\");\n             }\n             if (!_routerMgr.destroyRouter(router.getId())) {\n                 s_logger.warn(\"Failed to destroy virtual router element \" + router + \" as a part of network \" + network + \" restart\");\n             }\n         }\n+        if (host_id == null || host_id == 0) {\n+            throw new ResourceUnavailableException(\"Fail to locate virtual router element in network \" + network.getId(), this.getClass(), 0);\n+        }\n         \n         /* The cluster here is only used to determine hypervisor type, not the real deployment */\n         Cluster cluster = _configMgr.getCluster(_hostDao.findById(host_id).getClusterId());",
                "raw_url": "https://github.com/apache/cloudstack/raw/b10f560be52c4dc448a484917caf8c553b67b77c/server/src/com/cloud/network/element/VirtualRouterElement.java",
                "sha": "4cfc3fccbaaf1e71e4816446c7b13ab5a8a7f3c5",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/b10f560be52c4dc448a484917caf8c553b67b77c/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java?ref=b10f560be52c4dc448a484917caf8c553b67b77c",
                "deletions": 1,
                "filename": "server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "patch": "@@ -1066,7 +1066,9 @@ private DomainRouterVO startVirtualRouter(DomainRouterVO router, User user, Acco\n                 if (state != State.Running) {\n                     router = startVirtualRouter(router, _accountService.getSystemUser(), _accountService.getSystemAccount(), params);\n                 }\n-                runningRouters.add(router);\n+                if (router != null) {\n+                    runningRouters.add(router);\n+                }\n             }\n         }\n         return runningRouters;",
                "raw_url": "https://github.com/apache/cloudstack/raw/b10f560be52c4dc448a484917caf8c553b67b77c/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "sha": "8a72e400eda5372b6bbe38ae02fe1c50b215dc34",
                "status": "modified"
            }
        ],
        "message": "Fix NPE when a router is fail to start\n\nAlso enforce the check for restartNetworkCommand",
        "parent": "https://github.com/apache/cloudstack/commit/356728ae19063e04273b12ced0baa44b7e6e9599",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualNetworkApplianceManagerImplTest.java"
        ]
    },
    "cloudstack_b294257": {
        "bug_id": "cloudstack_b294257",
        "commit": "https://github.com/apache/cloudstack/commit/b2942572e7a07812c5338c723db54a405383b6dd",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/b2942572e7a07812c5338c723db54a405383b6dd/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java?ref=b2942572e7a07812c5338c723db54a405383b6dd",
                "deletions": 7,
                "filename": "server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "patch": "@@ -685,11 +685,7 @@ public static boolean isAdmin(short accountType) {\n     }\n     \n     @DB\n-    protected DomainRouterVO findOrCreateVirtualRouter(Network guestNetwork, DataCenterDeployment plan, HypervisorType type, Account owner) throws ConcurrentOperationException, InsufficientCapacityException {\n-        DomainRouterVO router = _routerDao.findByNetwork(guestNetwork.getId());\n-        if (router != null) {\n-            return router;\n-        }\n+    protected DomainRouterVO createVirtualRouter(Network guestNetwork, DataCenterDeployment plan, HypervisorType type, Account owner) throws ConcurrentOperationException, InsufficientCapacityException {\n \n         /* Before starting router, already know the hypervisor type */\n         VMTemplateVO template = _templateDao.findRoutingTemplate(type);\n@@ -708,6 +704,7 @@ protected DomainRouterVO findOrCreateVirtualRouter(Network guestNetwork, DataCen\n             throw new ConcurrentOperationException(\"Unable to acquire lock on \" + guestNetwork.getId());\n         }\n         \n+        DomainRouterVO router = null;\n         try {\n             txn.start();\n             \n@@ -780,8 +777,11 @@ public DomainRouterVO deployVirtualRouter(Network guestNetwork, DeployDestinatio\n         assert guestNetwork.getTrafficType() == TrafficType.Guest;\n \n         DataCenterDeployment plan = new DataCenterDeployment(dcId);\n-\n-        DomainRouterVO router = findOrCreateVirtualRouter(guestNetwork, plan, dest.getCluster().getHypervisorType(), owner);\n+        \n+        DomainRouterVO router = _routerDao.findByNetwork(guestNetwork.getId());\n+        if (router == null) {\n+            router = createVirtualRouter(guestNetwork, plan, dest.getCluster().getHypervisorType(), owner);\n+        }\n         \n         State state = router.getState();\n         if (state != State.Running) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/b2942572e7a07812c5338c723db54a405383b6dd/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "sha": "7f705664b19cf2fcc5e4040d1baf7275bccf7095",
                "status": "modified"
            }
        ],
        "message": "bug 10453: fixed NPE in startRouter command - used to happen when domR start was called for existing domR as a part of networkImplement\nstatus 10453: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/ae665d4b113487926358803e3ca9b0cd87d45856",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualNetworkApplianceManagerImplTest.java"
        ]
    },
    "cloudstack_b363fd4": {
        "bug_id": "cloudstack_b363fd4",
        "commit": "https://github.com/apache/cloudstack/commit/b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/api/src/main/java/com/cloud/hypervisor/HypervisorGuru.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/main/java/com/cloud/hypervisor/HypervisorGuru.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 1,
                "filename": "api/src/main/java/com/cloud/hypervisor/HypervisorGuru.java",
                "patch": "@@ -19,6 +19,7 @@\n import java.util.List;\n import java.util.Map;\n \n+import com.cloud.storage.StoragePool;\n import org.apache.cloudstack.framework.config.ConfigKey;\n \n import com.cloud.agent.api.Command;\n@@ -32,7 +33,7 @@\n import com.cloud.vm.VirtualMachineProfile;\n \n public interface HypervisorGuru extends Adapter {\n-    static final ConfigKey<Boolean> VmwareFullClone = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"vmware.create.full.clone\", \"true\",\n+    ConfigKey<Boolean> VmwareFullClone = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"vmware.create.full.clone\", \"true\",\n             \"If set to true, creates guest VMs as full clones on ESX\", false);\n     HypervisorType getHypervisorType();\n \n@@ -84,4 +85,13 @@\n     List<Command> finalizeExpungeVolumes(VirtualMachine vm);\n \n     Map<String, String> getClusterSettings(long vmId);\n+\n+    /**\n+     * Will generate commands to migrate a vm to a pool. For now this will only work for stopped VMs on Vmware.\n+     *\n+     * @param vm the stopped vm to migrate\n+     * @param destination the primary storage pool to migrate to\n+     * @return a list of commands to perform for a successful migration\n+     */\n+    List<Command> finalizeMigrate(VirtualMachine vm, StoragePool destination);\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/api/src/main/java/com/cloud/hypervisor/HypervisorGuru.java",
                "sha": "da2c7d04eb335cbbd94490685838709415570c2e",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/api/src/main/java/com/cloud/storage/VolumeApiService.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/main/java/com/cloud/storage/VolumeApiService.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 0,
                "filename": "api/src/main/java/com/cloud/storage/VolumeApiService.java",
                "patch": "@@ -29,11 +29,21 @@\n import org.apache.cloudstack.api.command.user.volume.ResizeVolumeCmd;\n import org.apache.cloudstack.api.command.user.volume.UploadVolumeCmd;\n import org.apache.cloudstack.api.response.GetUploadParamsResponse;\n+import org.apache.cloudstack.framework.config.ConfigKey;\n \n import com.cloud.exception.ResourceAllocationException;\n import com.cloud.user.Account;\n \n public interface VolumeApiService {\n+\n+    ConfigKey<Long> ConcurrentMigrationsThresholdPerDatastore = new ConfigKey<Long>(\"Advanced\"\n+            , Long.class\n+            , \"concurrent.migrations.per.target.datastore\"\n+            , \"0\"\n+            , \"Limits number of migrations that can be handled per datastore concurrently; default is 0 - unlimited\"\n+            , true // not sure if this is to be dynamic\n+            , ConfigKey.Scope.Global);\n+\n     /**\n      * Creates the database object for a volume based on the given criteria\n      *",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/api/src/main/java/com/cloud/storage/VolumeApiService.java",
                "sha": "7b38a6b1af101f941b73071b916b5a9fee0e79af",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/api/src/main/java/org/apache/cloudstack/api/BaseAsyncCmd.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/main/java/org/apache/cloudstack/api/BaseAsyncCmd.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 0,
                "filename": "api/src/main/java/org/apache/cloudstack/api/BaseAsyncCmd.java",
                "patch": "@@ -27,6 +27,7 @@\n     public static final String ipAddressSyncObject = \"ipaddress\";\n     public static final String networkSyncObject = \"network\";\n     public static final String vpcSyncObject = \"vpc\";\n+    public static final String migrationSyncObject = \"migration\";\n     public static final String snapshotHostSyncObject = \"snapshothost\";\n     public static final String gslbSyncObject = \"globalserverloadbalancer\";\n     private static final Logger s_logger = Logger.getLogger(BaseAsyncCmd.class.getName());",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/api/src/main/java/org/apache/cloudstack/api/BaseAsyncCmd.java",
                "sha": "1c3822c1057c0c8ab2d3702bed13c36bcd2f7c6a",
                "status": "modified"
            },
            {
                "additions": 43,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/api/src/main/java/org/apache/cloudstack/api/command/admin/vm/MigrateVMCmd.java",
                "changes": 71,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/main/java/org/apache/cloudstack/api/command/admin/vm/MigrateVMCmd.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 28,
                "filename": "api/src/main/java/org/apache/cloudstack/api/command/admin/vm/MigrateVMCmd.java",
                "patch": "@@ -43,10 +43,10 @@\n import com.cloud.vm.VirtualMachine;\n \n @APICommand(name = \"migrateVirtualMachine\",\n-            description = \"Attempts Migration of a VM to a different host or Root volume of the vm to a different storage pool\",\n+        description = \"Attempts Migration of a VM to a different host or Root volume of the vm to a different storage pool\",\n         responseObject = UserVmResponse.class, entityType = {VirtualMachine.class},\n-            requestHasSensitiveInfo = false,\n-            responseHasSensitiveInfo = true)\n+        requestHasSensitiveInfo = false,\n+        responseHasSensitiveInfo = true)\n public class MigrateVMCmd extends BaseAsyncCmd {\n     public static final Logger s_logger = Logger.getLogger(MigrateVMCmd.class.getName());\n \n@@ -57,24 +57,24 @@\n     /////////////////////////////////////////////////////\n \n     @Parameter(name = ApiConstants.HOST_ID,\n-               type = CommandType.UUID,\n-               entityType = HostResponse.class,\n-               required = false,\n-               description = \"Destination Host ID to migrate VM to. Required for live migrating a VM from host to host\")\n+            type = CommandType.UUID,\n+            entityType = HostResponse.class,\n+            required = false,\n+            description = \"Destination Host ID to migrate VM to. Required for live migrating a VM from host to host\")\n     private Long hostId;\n \n     @Parameter(name = ApiConstants.VIRTUAL_MACHINE_ID,\n-               type = CommandType.UUID,\n-               entityType = UserVmResponse.class,\n-               required = true,\n-               description = \"the ID of the virtual machine\")\n+            type = CommandType.UUID,\n+            entityType = UserVmResponse.class,\n+            required = true,\n+            description = \"the ID of the virtual machine\")\n     private Long virtualMachineId;\n \n     @Parameter(name = ApiConstants.STORAGE_ID,\n-               type = CommandType.UUID,\n-               entityType = StoragePoolResponse.class,\n-               required = false,\n-               description = \"Destination storage pool ID to migrate VM volumes to. Required for migrating the root disk volume\")\n+            type = CommandType.UUID,\n+            entityType = StoragePoolResponse.class,\n+            required = false,\n+            description = \"Destination storage pool ID to migrate VM volumes to. Required for migrating the root disk volume\")\n     private Long storageId;\n \n     /////////////////////////////////////////////////////\n@@ -119,13 +119,15 @@ public String getEventType() {\n \n     @Override\n     public String getEventDescription() {\n+        String eventDescription;\n         if (getHostId() != null) {\n-            return \"Attempting to migrate VM Id: \" + this._uuidMgr.getUuid(VirtualMachine.class, getVirtualMachineId()) + \" to host Id: \" + this._uuidMgr.getUuid(Host.class, getHostId());\n+            eventDescription = String.format(\"Attempting to migrate VM id: %s to host Id: %s\", getVirtualMachineId(), getHostId());\n         } else if (getStoragePoolId() != null) {\n-            return \"Attempting to migrate VM Id: \" + this._uuidMgr.getUuid(VirtualMachine.class, getVirtualMachineId()) + \" to storage pool Id: \" + this._uuidMgr.getUuid(StoragePool.class, getStoragePoolId());\n+            eventDescription = String.format(\"Attempting to migrate VM id: %s to storage pool Id: %s\", getVirtualMachineId(), getStoragePoolId());\n         } else {\n-            return \"Attempting to migrate VM Id: \" + this._uuidMgr.getUuid(VirtualMachine.class, getVirtualMachineId());\n+            eventDescription = String.format(\"Attempting to migrate VM id: %s\", getVirtualMachineId());\n         }\n+        return eventDescription;\n     }\n \n     @Override\n@@ -152,16 +154,17 @@ public void execute() {\n             if (destinationHost.getType() != Host.Type.Routing) {\n                 throw new InvalidParameterValueException(\"The specified host(\" + destinationHost.getName() + \") is not suitable to migrate the VM, please specify another one\");\n             }\n-            CallContext.current().setEventDetails(\"VM Id: \" + this._uuidMgr.getUuid(VirtualMachine.class, getVirtualMachineId()) + ((getHostId() != null) ?  \" to host Id: \" + this._uuidMgr.getUuid(Host.class, getHostId()) : \"\" ));\n+            CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to host Id: \" + getHostId());\n         }\n \n+        // OfflineMigration performed when this parameter is specified\n         StoragePool destStoragePool = null;\n         if (getStoragePoolId() != null) {\n             destStoragePool = _storageService.getStoragePool(getStoragePoolId());\n             if (destStoragePool == null) {\n                 throw new InvalidParameterValueException(\"Unable to find the storage pool to migrate the VM\");\n             }\n-            CallContext.current().setEventDetails(\"VM Id: \" + this._uuidMgr.getUuid(VirtualMachine.class, getVirtualMachineId()) + \" to storage pool Id: \" + this._uuidMgr.getUuid(StoragePool.class, getStoragePoolId()));\n+            CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to storage pool Id: \" + getStoragePoolId());\n         }\n \n         try {\n@@ -172,7 +175,7 @@ public void execute() {\n                 migratedVm = _userVmService.vmStorageMigration(getVirtualMachineId(), destStoragePool);\n             }\n             if (migratedVm != null) {\n-                UserVmResponse response = _responseGenerator.createUserVmResponse(ResponseView.Full, \"virtualmachine\", (UserVm)migratedVm).get(0);\n+                UserVmResponse response = _responseGenerator.createUserVmResponse(ResponseView.Full, \"virtualmachine\", (UserVm) migratedVm).get(0);\n                 response.setResponseName(getCommandName());\n                 setResponseObject(response);\n             } else {\n@@ -181,15 +184,27 @@ public void execute() {\n         } catch (ResourceUnavailableException ex) {\n             s_logger.warn(\"Exception: \", ex);\n             throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n-        } catch (ConcurrentOperationException e) {\n-            s_logger.warn(\"Exception: \", e);\n-            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n-        } catch (ManagementServerException e) {\n-            s_logger.warn(\"Exception: \", e);\n-            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n-        } catch (VirtualMachineMigrationException e) {\n+        } catch (VirtualMachineMigrationException | ConcurrentOperationException | ManagementServerException e) {\n             s_logger.warn(\"Exception: \", e);\n             throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n         }\n     }\n+\n+    @Override\n+    public String getSyncObjType() {\n+        return (getSyncObjId() != null) ? BaseAsyncCmd.migrationSyncObject : null;\n+    }\n+\n+    @Override\n+    public Long getSyncObjId() {\n+        if (getStoragePoolId() != null) {\n+            return getStoragePoolId();\n+        }\n+        // OfflineVmwareMigrations: undocumented feature;\n+        // OfflineVmwareMigrations: on implementing a maximum queue size for per storage migrations it seems counter intuitive for the user to not enforce it for hosts as well.\n+        if (getHostId() != null) {\n+            return getHostId();\n+        }\n+        return null;\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/api/src/main/java/org/apache/cloudstack/api/command/admin/vm/MigrateVMCmd.java",
                "sha": "9f73ae586a0835a79c71263cff68db714bf3c324",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/api/src/main/java/org/apache/cloudstack/api/command/admin/vm/MigrateVirtualMachineWithVolumeCmd.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/main/java/org/apache/cloudstack/api/command/admin/vm/MigrateVirtualMachineWithVolumeCmd.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 8,
                "filename": "api/src/main/java/org/apache/cloudstack/api/command/admin/vm/MigrateVirtualMachineWithVolumeCmd.java",
                "patch": "@@ -46,7 +46,7 @@\n \n @APICommand(name = \"migrateVirtualMachineWithVolume\",\n             description = \"Attempts Migration of a VM with its volumes to a different host\",\n-        responseObject = UserVmResponse.class, entityType = {VirtualMachine.class},\n+            responseObject = UserVmResponse.class, entityType = {VirtualMachine.class},\n             requestHasSensitiveInfo = false,\n             responseHasSensitiveInfo = true)\n public class MigrateVirtualMachineWithVolumeCmd extends BaseAsyncCmd {\n@@ -147,6 +147,7 @@ public void execute() {\n         }\n \n         Host destinationHost = _resourceService.getHost(getHostId());\n+        // OfflineVmwareMigration: destination host would have to not be a required parameter for stopped VMs\n         if (destinationHost == null) {\n             throw new InvalidParameterValueException(\"Unable to find the host to migrate the VM, host id =\" + getHostId());\n         }\n@@ -163,13 +164,7 @@ public void execute() {\n         } catch (ResourceUnavailableException ex) {\n             s_logger.warn(\"Exception: \", ex);\n             throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n-        } catch (ConcurrentOperationException e) {\n-            s_logger.warn(\"Exception: \", e);\n-            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n-        } catch (ManagementServerException e) {\n-            s_logger.warn(\"Exception: \", e);\n-            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n-        } catch (VirtualMachineMigrationException e) {\n+        } catch (ConcurrentOperationException | ManagementServerException | VirtualMachineMigrationException e) {\n             s_logger.warn(\"Exception: \", e);\n             throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/api/src/main/java/org/apache/cloudstack/api/command/admin/vm/MigrateVirtualMachineWithVolumeCmd.java",
                "sha": "65d71cc1300a90d71224066c28a1c28065e25787",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/api/src/main/java/org/apache/cloudstack/api/command/user/volume/MigrateVolumeCmd.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/main/java/org/apache/cloudstack/api/command/user/volume/MigrateVolumeCmd.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 0,
                "filename": "api/src/main/java/org/apache/cloudstack/api/command/user/volume/MigrateVolumeCmd.java",
                "patch": "@@ -120,4 +120,16 @@ public void execute() {\n         }\n     }\n \n+    @Override\n+    public String getSyncObjType() {\n+        return (getSyncObjId() != null) ? BaseAsyncCmd.migrationSyncObject : null;\n+    }\n+\n+    @Override\n+    public Long getSyncObjId() {\n+        if (getStoragePoolId() != null) {\n+            return getStoragePoolId();\n+        }\n+        return null;\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/api/src/main/java/org/apache/cloudstack/api/command/user/volume/MigrateVolumeCmd.java",
                "sha": "f5d5e8c86ee95b8a88e712d3cdc25b6f0d7a0a34",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/api/src/test/java/org/apache/cloudstack/api/command/test/UpdateRoleCmdTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/test/java/org/apache/cloudstack/api/command/test/UpdateRoleCmdTest.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 0,
                "filename": "api/src/test/java/org/apache/cloudstack/api/command/test/UpdateRoleCmdTest.java",
                "previous_filename": "api/test/org/apache/cloudstack/api/command/test/UpdateRoleCmdTest.java",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/api/src/test/java/org/apache/cloudstack/api/command/test/UpdateRoleCmdTest.java",
                "sha": "c0bd390c1963d15bd77307f9ac457fb990e878e5",
                "status": "renamed"
            },
            {
                "additions": 43,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/core/src/main/java/com/cloud/agent/api/MigrateVmToPoolAnswer.java",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/core/src/main/java/com/cloud/agent/api/MigrateVmToPoolAnswer.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 0,
                "filename": "core/src/main/java/com/cloud/agent/api/MigrateVmToPoolAnswer.java",
                "patch": "@@ -0,0 +1,43 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+\n+package com.cloud.agent.api;\n+\n+import org.apache.cloudstack.storage.to.VolumeObjectTO;\n+\n+import java.util.List;\n+\n+public class MigrateVmToPoolAnswer extends Answer {\n+\n+    List<VolumeObjectTO> volumeTos;\n+\n+    public MigrateVmToPoolAnswer(MigrateVmToPoolCommand cmd, Exception ex) {\n+        super(cmd, ex);\n+        volumeTos = null;\n+    }\n+\n+    public MigrateVmToPoolAnswer(MigrateVmToPoolCommand cmd, List<VolumeObjectTO> volumeTos) {\n+        super(cmd, true, null);\n+        this.volumeTos = volumeTos;\n+    }\n+\n+    public List<VolumeObjectTO> getVolumeTos() {\n+        return volumeTos;\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/core/src/main/java/com/cloud/agent/api/MigrateVmToPoolAnswer.java",
                "sha": "bc9ae6fd08257af32d6ca7de2f292ed6b68d73e4",
                "status": "added"
            },
            {
                "additions": 70,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/core/src/main/java/com/cloud/agent/api/MigrateVmToPoolCommand.java",
                "changes": 70,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/core/src/main/java/com/cloud/agent/api/MigrateVmToPoolCommand.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 0,
                "filename": "core/src/main/java/com/cloud/agent/api/MigrateVmToPoolCommand.java",
                "patch": "@@ -0,0 +1,70 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package com.cloud.agent.api;\n+\n+import com.cloud.agent.api.to.VolumeTO;\n+\n+import java.util.Collection;\n+\n+/**\n+ * used to tell the agent to migrate a vm to a different primary storage pool.\n+ * It is for now only implemented on Vmware and is supposed to work irrespective of whether the VM is started or not.\n+ *\n+ */\n+public class MigrateVmToPoolCommand extends Command {\n+    private Collection<VolumeTO> volumes;\n+    private String vmName;\n+    private String destinationPool;\n+    private boolean executeInSequence = false;\n+\n+    protected MigrateVmToPoolCommand() {\n+    }\n+\n+    /**\n+     *\n+     * @param vmName the name of the VM to migrate\n+     * @param volumes used to supply feedback on vmware generated names\n+     * @param destinationPool the primary storage pool to migrate the VM to\n+     * @param executeInSequence\n+     */\n+    public MigrateVmToPoolCommand(String vmName, Collection<VolumeTO> volumes, String destinationPool, boolean executeInSequence) {\n+        this.vmName = vmName;\n+        this.volumes = volumes;\n+        this.destinationPool = destinationPool;\n+        this.executeInSequence = executeInSequence;\n+    }\n+\n+    public Collection<VolumeTO> getVolumes() {\n+        return volumes;\n+    }\n+\n+    public String getDestinationPool() {\n+        return destinationPool;\n+    }\n+\n+    public String getVmName() {\n+        return vmName;\n+    }\n+\n+    @Override\n+    public boolean executeInSequence() {\n+        return executeInSequence;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/core/src/main/java/com/cloud/agent/api/MigrateVmToPoolCommand.java",
                "sha": "91a911d7c18170d73ef50bc2934453c2101f5d94",
                "status": "added"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/core/src/main/java/com/cloud/agent/api/UnregisterVMCommand.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/core/src/main/java/com/cloud/agent/api/UnregisterVMCommand.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 1,
                "filename": "core/src/main/java/com/cloud/agent/api/UnregisterVMCommand.java",
                "patch": "@@ -22,14 +22,19 @@\n public class UnregisterVMCommand extends Command {\n     String vmName;\n     boolean cleanupVmFiles = false;\n+    boolean executeInSequence;\n \n     public UnregisterVMCommand(String vmName) {\n+        this(vmName, false);\n+    }\n+    public UnregisterVMCommand(String vmName, boolean executeInSequence) {\n         this.vmName = vmName;\n+        this.executeInSequence = executeInSequence;\n     }\n \n     @Override\n     public boolean executeInSequence() {\n-        return false;\n+        return executeInSequence;\n     }\n \n     public String getVmName() {",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/core/src/main/java/com/cloud/agent/api/UnregisterVMCommand.java",
                "sha": "4c5f138a63c73f08ab638af65b6482a4d809788e",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/core/src/main/java/com/cloud/agent/api/storage/MigrateVolumeCommand.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/core/src/main/java/com/cloud/agent/api/storage/MigrateVolumeCommand.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 3,
                "filename": "core/src/main/java/com/cloud/agent/api/storage/MigrateVolumeCommand.java",
                "patch": "@@ -31,6 +31,7 @@\n     long volumeId;\n     String volumePath;\n     StorageFilerTO pool;\n+    StorageFilerTO sourcePool;\n     String attachedVmName;\n     Volume.Type volumeType;\n \n@@ -47,14 +48,17 @@ public MigrateVolumeCommand(long volumeId, String volumePath, StoragePool pool,\n     }\n \n     public MigrateVolumeCommand(long volumeId, String volumePath, StoragePool pool, String attachedVmName, Volume.Type volumeType, int timeout) {\n-        this.volumeId = volumeId;\n-        this.volumePath = volumePath;\n-        this.pool = new StorageFilerTO(pool);\n+        this(volumeId,volumePath,pool,timeout);\n         this.attachedVmName = attachedVmName;\n         this.volumeType = volumeType;\n         this.setWait(timeout);\n     }\n \n+    public MigrateVolumeCommand(long volumeId, String volumePath, StoragePool sourcePool, StoragePool targetPool) {\n+        this(volumeId,volumePath,targetPool, null, Volume.Type.UNKNOWN, -1);\n+        this.sourcePool = new StorageFilerTO(sourcePool);\n+    }\n+\n     public MigrateVolumeCommand(DataTO srcData, DataTO destData, Map<String, String> srcDetails, Map<String, String> destDetails, int timeout) {\n         this.srcData = srcData;\n         this.destData = destData;\n@@ -81,6 +85,14 @@ public StorageFilerTO getPool() {\n         return pool;\n     }\n \n+    public StorageFilerTO getSourcePool() {\n+        return sourcePool;\n+    }\n+\n+    public StorageFilerTO getTargetPool() {\n+        return pool;\n+    }\n+\n     public String getAttachedVmName() {\n         return attachedVmName;\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/core/src/main/java/com/cloud/agent/api/storage/MigrateVolumeCommand.java",
                "sha": "9902a86fb8938f8de61fd65f3af9e28f7e0ba5b4",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/engine/api/src/main/java/org/apache/cloudstack/engine/subsystem/api/storage/DataMotionStrategy.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/api/src/main/java/org/apache/cloudstack/engine/subsystem/api/storage/DataMotionStrategy.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 0,
                "filename": "engine/api/src/main/java/org/apache/cloudstack/engine/subsystem/api/storage/DataMotionStrategy.java",
                "patch": "@@ -25,11 +25,28 @@\n import com.cloud.agent.api.to.VirtualMachineTO;\n import com.cloud.host.Host;\n \n+/**\n+ * Interface to query how to move data around and to commision the moving\n+ */\n public interface DataMotionStrategy {\n+    /**\n+     * Reports whether this instance can do a move from source to destination\n+     * @param srcData object to move\n+     * @param destData location to move it to\n+     * @return the expertise level with which this instance knows how to handle the move\n+     */\n     StrategyPriority canHandle(DataObject srcData, DataObject destData);\n \n     StrategyPriority canHandle(Map<VolumeInfo, DataStore> volumeMap, Host srcHost, Host destHost);\n \n+    /**\n+     * Copy the source volume to its destination (on a host if not null)\n+     *\n+     * @param srcData volume to move\n+     * @param destData volume description as intended after the move\n+     * @param destHost if not null destData should be reachable from here\n+     * @param callback where to report completion or failure to\n+     */\n     void copyAsync(DataObject srcData, DataObject destData, Host destHost, AsyncCompletionCallback<CopyCommandResult> callback);\n \n     void copyAsync(Map<VolumeInfo, DataStore> volumeMap, VirtualMachineTO vmTo, Host srcHost, Host destHost, AsyncCompletionCallback<CopyCommandResult> callback);",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/engine/api/src/main/java/org/apache/cloudstack/engine/subsystem/api/storage/DataMotionStrategy.java",
                "sha": "2afece483c65b4f3c0d852200c4d5e143b2a8539",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/engine/components-api/src/main/java/com/cloud/storage/StorageManager.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/components-api/src/main/java/com/cloud/storage/StorageManager.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 1,
                "filename": "engine/components-api/src/main/java/com/cloud/storage/StorageManager.java",
                "patch": "@@ -106,7 +106,14 @@\n      * @param poolId\n      * @return comma separated list of tags\n      */\n-    public String getStoragePoolTags(long poolId);\n+    String getStoragePoolTags(long poolId);\n+\n+    /**\n+     * Returns a list of Strings with tags for the specified storage pool\n+     * @param poolId\n+     * @return comma separated list of tags\n+     */\n+    List<String> getStoragePoolTagList(long poolId);\n \n     Answer sendToPool(long poolId, Command cmd) throws StorageUnavailableException;\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/engine/components-api/src/main/java/com/cloud/storage/StorageManager.java",
                "sha": "c9c24d8ad730d4b08f1731bc2dd868c5673fe34a",
                "status": "modified"
            },
            {
                "additions": 247,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 334,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 87,
                "filename": "engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -41,6 +41,9 @@\n \n import org.apache.cloudstack.api.ApiConstants;\n import org.apache.cloudstack.affinity.dao.AffinityGroupVMMapDao;\n+import org.apache.cloudstack.api.command.admin.vm.MigrateVMCmd;\n+import org.apache.cloudstack.api.command.admin.volume.MigrateVolumeCmdByAdmin;\n+import org.apache.cloudstack.api.command.user.volume.MigrateVolumeCmd;\n import org.apache.cloudstack.ca.CAManager;\n import org.apache.cloudstack.context.CallContext;\n import org.apache.cloudstack.engine.orchestration.service.NetworkOrchestrationService;\n@@ -86,6 +89,7 @@\n import com.cloud.agent.api.ClusterVMMetaDataSyncCommand;\n import com.cloud.agent.api.Command;\n import com.cloud.agent.api.MigrateCommand;\n+import com.cloud.agent.api.MigrateVmToPoolAnswer;\n import com.cloud.agent.api.ModifyTargetsCommand;\n import com.cloud.agent.api.PingRoutingCommand;\n import com.cloud.agent.api.PlugNicAnswer;\n@@ -138,10 +142,8 @@\n import com.cloud.exception.AgentUnavailableException;\n import com.cloud.exception.ConcurrentOperationException;\n import com.cloud.exception.ConnectionException;\n-import com.cloud.exception.InsufficientAddressCapacityException;\n import com.cloud.exception.InsufficientCapacityException;\n import com.cloud.exception.InsufficientServerCapacityException;\n-import com.cloud.exception.InsufficientVirtualNetworkCapacityException;\n import com.cloud.exception.InvalidParameterValueException;\n import com.cloud.exception.OperationTimedoutException;\n import com.cloud.exception.ResourceUnavailableException;\n@@ -171,10 +173,12 @@\n import com.cloud.storage.DiskOfferingVO;\n import com.cloud.storage.ScopeType;\n import com.cloud.storage.Storage.ImageFormat;\n+import com.cloud.storage.StorageManager;\n import com.cloud.storage.StoragePool;\n import com.cloud.storage.VMTemplateVO;\n import com.cloud.storage.Volume;\n import com.cloud.storage.Volume.Type;\n+import com.cloud.storage.VolumeApiService;\n import com.cloud.storage.VolumeVO;\n import com.cloud.storage.dao.DiskOfferingDao;\n import com.cloud.storage.dao.GuestOSCategoryDao;\n@@ -314,6 +318,8 @@\n     private VmWorkJobDao _workJobDao;\n     @Inject\n     private AsyncJobManager _jobMgr;\n+    @Inject\n+    private StorageManager storageMgr;\n \n     VmWorkJobHandlerProxy _jobHandlerProxy = new VmWorkJobHandlerProxy(this);\n \n@@ -1820,14 +1826,6 @@ private void setStateMachine() {\n     protected boolean stateTransitTo(final VMInstanceVO vm, final VirtualMachine.Event e, final Long hostId, final String reservationId) throws NoTransitionException {\n         // if there are active vm snapshots task, state change is not allowed\n \n-        // Disable this hacking thing, VM snapshot task need to be managed by its orchestartion flow istelf instead of\n-        // hacking it here at general VM manager\n-        /*\n-                if (_vmSnapshotMgr.hasActiveVMSnapshotTasks(vm.getId())) {\n-                    s_logger.error(\"State transit with event: \" + e + \" failed due to: \" + vm.getInstanceName() + \" has active VM snapshots tasks\");\n-                    return false;\n-                }\n-         */\n         vm.setReservationId(reservationId);\n         return _stateMachine.transitTo(vm, e, new Pair<Long, Long>(vm.getHostId(), hostId), _vmDao);\n     }\n@@ -1836,15 +1834,6 @@ protected boolean stateTransitTo(final VMInstanceVO vm, final VirtualMachine.Eve\n     public boolean stateTransitTo(final VirtualMachine vm1, final VirtualMachine.Event e, final Long hostId) throws NoTransitionException {\n         final VMInstanceVO vm = (VMInstanceVO)vm1;\n \n-        /*\n-         *  Remove the hacking logic here.\n-                // if there are active vm snapshots task, state change is not allowed\n-                if (_vmSnapshotMgr.hasActiveVMSnapshotTasks(vm.getId())) {\n-                    s_logger.error(\"State transit with event: \" + e + \" failed due to: \" + vm.getInstanceName() + \" has active VM snapshots tasks\");\n-                    return false;\n-                }\n-         */\n-\n         final State oldState = vm.getState();\n         if (oldState == State.Starting) {\n             if (e == Event.OperationSucceeded) {\n@@ -1988,92 +1977,246 @@ public void storageMigration(final String vmUuid, final StoragePool destPool) {\n     private void orchestrateStorageMigration(final String vmUuid, final StoragePool destPool) {\n         final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n \n-        if (destPool == null) {\n-            throw new CloudRuntimeException(\"Unable to migrate vm: missing destination storage pool\");\n-        }\n+        preStorageMigrationStateCheck(destPool, vm);\n \n         try {\n-            stateTransitTo(vm, VirtualMachine.Event.StorageMigrationRequested, null);\n-        } catch (final NoTransitionException e) {\n-            s_logger.debug(\"Unable to migrate vm: \" + e.toString());\n-            throw new CloudRuntimeException(\"Unable to migrate vm: \" + e.toString());\n+            if(s_logger.isDebugEnabled()) {\n+                s_logger.debug(String.format(\"Offline migration of %s vm %s with volumes\",\n+                                vm.getHypervisorType().toString(),\n+                                vm.getInstanceName()));\n+            }\n+\n+            migrateThroughHypervisorOrStorage(destPool, vm);\n+\n+        } catch (ConcurrentOperationException\n+                | InsufficientCapacityException // possibly InsufficientVirtualNetworkCapacityException or InsufficientAddressCapacityException\n+                | StorageUnavailableException e) {\n+            String msg = String.format(\"Failed to migrate VM: %s\", vmUuid);\n+            s_logger.debug(msg);\n+            throw new CloudRuntimeException(msg, e);\n+        } finally {\n+            try {\n+                stateTransitTo(vm, Event.AgentReportStopped, null);\n+            } catch (final NoTransitionException e) {\n+                String anotherMEssage = String.format(\"failed to change vm state of VM: %s\", vmUuid);\n+                s_logger.debug(anotherMEssage);\n+                throw new CloudRuntimeException(anotherMEssage, e);\n+            }\n         }\n+    }\n \n+    private Answer[] attemptHypervisorMigration(StoragePool destPool, VMInstanceVO vm) {\n+        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vm.getHypervisorType());\n+        // OfflineVmwareMigration: in case of vmware call vcenter to do it for us.\n+        // OfflineVmwareMigration: should we check the proximity of source and destination\n+        // OfflineVmwareMigration: if we are in the same cluster/datacentre/pool or whatever?\n+        // OfflineVmwareMigration: we are checking on success to optionally delete an old vm if we are not\n+        List<Command> commandsToSend = hvGuru.finalizeMigrate(vm, destPool);\n+\n+        Long hostId = vm.getHostId();\n+        // OfflineVmwareMigration: probably this is null when vm is stopped\n+        if(hostId == null) {\n+            hostId = vm.getLastHostId();\n+            if (s_logger.isDebugEnabled()) {\n+                s_logger.debug(String.format(\"host id is null, using last host id %d\", hostId) );\n+            }\n+        }\n+\n+        if(CollectionUtils.isNotEmpty(commandsToSend)) {\n+            Commands commandsContainer = new Commands(Command.OnError.Stop);\n+            commandsContainer.addCommands(commandsToSend);\n+            try {\n+                // OfflineVmwareMigration: change to the call back variety?\n+                // OfflineVmwareMigration: getting a Long seq to be filled with _agentMgr.send(hostId, commandsContainer, this)\n+                return  _agentMgr.send(hostId, commandsContainer);\n+            } catch (AgentUnavailableException | OperationTimedoutException e) {\n+                throw new CloudRuntimeException(String.format(\"Failed to migrate VM: %s\", vm.getUuid()),e);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private void afterHypervisorMigrationCleanup(StoragePool destPool, VMInstanceVO vm, HostVO srcHost, Long srcClusterId, Answer[] hypervisorMigrationResults) throws InsufficientCapacityException {\n+        boolean isDebugEnabled = s_logger.isDebugEnabled();\n+        if(isDebugEnabled) {\n+            String msg = String.format(\"cleaning up after hypervisor pool migration volumes for VM %s(%s) to pool %s(%s)\", vm.getInstanceName(), vm.getUuid(), destPool.getName(), destPool.getUuid());\n+            s_logger.debug(msg);\n+        }\n+        setDestinationPoolAndReallocateNetwork(destPool, vm);\n+        // OfflineVmwareMigration: don't set this to null or have another way to address the command; twice migrating will lead to an NPE\n+        Long destPodId = destPool.getPodId();\n+        Long vmPodId = vm.getPodIdToDeployIn();\n+        if (destPodId == null || ! destPodId.equals(vmPodId)) {\n+            if(isDebugEnabled) {\n+                String msg = String.format(\"resetting lasHost for VM %s(%s) as pod (%s) is no good.\", vm.getInstanceName(), vm.getUuid(), destPodId);\n+                s_logger.debug(msg);\n+            }\n+\n+            vm.setLastHostId(null);\n+            vm.setPodIdToDeployIn(destPodId);\n+            // OfflineVmwareMigration: a consecutive migration will fail probably (no host not pod)\n+        }// else keep last host set for this vm\n+        markVolumesInPool(vm,destPool, hypervisorMigrationResults);\n+        // OfflineVmwareMigration: deal with answers, if (hypervisorMigrationResults.length > 0)\n+        // OfflineVmwareMigration: iterate over the volumes for data updates\n+    }\n+\n+    private void markVolumesInPool(VMInstanceVO vm, StoragePool destPool, Answer[] hypervisorMigrationResults) {\n+        MigrateVmToPoolAnswer relevantAnswer = null;\n+        for (Answer answer : hypervisorMigrationResults) {\n+            if (s_logger.isTraceEnabled()) {\n+                s_logger.trace(String.format(\"received an %s: %s\", answer.getClass().getSimpleName(), answer));\n+            }\n+            if (answer instanceof MigrateVmToPoolAnswer) {\n+                relevantAnswer = (MigrateVmToPoolAnswer) answer;\n+            }\n+        }\n+        if (relevantAnswer == null) {\n+            throw new CloudRuntimeException(\"no relevant migration results found\");\n+        }\n+        List<VolumeVO> volumes = _volsDao.findUsableVolumesForInstance(vm.getId());\n+        if(s_logger.isDebugEnabled()) {\n+            String msg = String.format(\"found %d volumes for VM %s(uuid:%s, id:%d)\", volumes.size(), vm.getInstanceName(), vm.getUuid(), vm.getId());\n+            s_logger.debug(msg);\n+        }\n+        for (VolumeObjectTO result : relevantAnswer.getVolumeTos() ) {\n+            if(s_logger.isDebugEnabled()) {\n+                s_logger.debug(String.format(\"updating volume (%d) with path '%s' on pool '%d'\", result.getId(), result.getPath(), destPool.getId()));\n+            }\n+            VolumeVO volume = _volsDao.findById(result.getId());\n+            volume.setPath(result.getPath());\n+            volume.setPoolId(destPool.getId());\n+            _volsDao.update(volume.getId(), volume);\n+        }\n+    }\n+\n+    private void migrateThroughHypervisorOrStorage(StoragePool destPool, VMInstanceVO vm) throws StorageUnavailableException, InsufficientCapacityException {\n         final VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n+        final Long srchostId = vm.getHostId() != null ? vm.getHostId() : vm.getLastHostId();\n+        final HostVO srcHost = _hostDao.findById(srchostId);\n+        final Long srcClusterId = srcHost.getClusterId();\n+        Answer[] hypervisorMigrationResults = attemptHypervisorMigration(destPool, vm);\n         boolean migrationResult = false;\n-        try {\n+        if (hypervisorMigrationResults == null) {\n+            // OfflineVmwareMigration: if the HypervisorGuru can't do it, let the volume manager take care of it.\n             migrationResult = volumeMgr.storageMigration(profile, destPool);\n-\n             if (migrationResult) {\n-                //if the vm is migrated to different pod in basic mode, need to reallocate ip\n+                afterStorageMigrationCleanup(destPool, vm, srcHost, srcClusterId);\n+            } else {\n+                s_logger.debug(\"Storage migration failed\");\n+            }\n+        } else {\n+            afterHypervisorMigrationCleanup(destPool, vm, srcHost, srcClusterId, hypervisorMigrationResults);\n+        }\n+    }\n \n-                if (destPool.getPodId() != null && !destPool.getPodId().equals(vm.getPodIdToDeployIn())) {\n-                    final DataCenterDeployment plan = new DataCenterDeployment(vm.getDataCenterId(), destPool.getPodId(), null, null, null, null);\n-                    final VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vm, null, null, null, null);\n-                    _networkMgr.reallocate(vmProfile, plan);\n-                }\n+    private void preStorageMigrationStateCheck(StoragePool destPool, VMInstanceVO vm) {\n+        if (destPool == null) {\n+            throw new CloudRuntimeException(\"Unable to migrate vm: missing destination storage pool\");\n+        }\n \n-                //when start the vm next time, don;'t look at last_host_id, only choose the host based on volume/storage pool\n-                vm.setLastHostId(null);\n-                vm.setPodIdToDeployIn(destPool.getPodId());\n-\n-                // If VM was cold migrated between clusters belonging to two different VMware DCs,\n-                // unregister the VM from the source host and cleanup the associated VM files.\n-                if (vm.getHypervisorType().equals(HypervisorType.VMware)) {\n-                    Long srcClusterId = null;\n-                    Long srcHostId = vm.getHostId() != null ? vm.getHostId() : vm.getLastHostId();\n-                    if (srcHostId != null) {\n-                        HostVO srcHost = _hostDao.findById(srcHostId);\n-                        srcClusterId = srcHost.getClusterId();\n-                    }\n+        checkDestinationForTags(destPool, vm);\n+        try {\n+            stateTransitTo(vm, Event.StorageMigrationRequested, null);\n+        } catch (final NoTransitionException e) {\n+            String msg = String.format(\"Unable to migrate vm: %s\", vm.getUuid());\n+            s_logger.debug(msg);\n+            throw new CloudRuntimeException(msg, e);\n+        }\n+    }\n \n-                    final Long destClusterId = destPool.getClusterId();\n-                    if (srcClusterId != null && destClusterId != null && ! srcClusterId.equals(destClusterId)) {\n-                        final String srcDcName = _clusterDetailsDao.getVmwareDcName(srcClusterId);\n-                        final String destDcName = _clusterDetailsDao.getVmwareDcName(destClusterId);\n-                        if (srcDcName != null && destDcName != null && !srcDcName.equals(destDcName)) {\n-                            s_logger.debug(\"Since VM's storage was successfully migrated across VMware Datacenters, unregistering VM: \" + vm.getInstanceName() +\n-                                    \" from source host: \" + srcHostId);\n-                            final UnregisterVMCommand uvc = new UnregisterVMCommand(vm.getInstanceName());\n-                            uvc.setCleanupVmFiles(true);\n-                            try {\n-                                _agentMgr.send(srcHostId, uvc);\n-                            } catch (final AgentUnavailableException | OperationTimedoutException e) {\n-                                throw new CloudRuntimeException(\"Failed to unregister VM: \" + vm.getInstanceName() + \" from source host: \" + srcHostId +\n-                                        \" after successfully migrating VM's storage across VMware Datacenters\");\n-                            }\n-                        }\n-                    }\n+    private void checkDestinationForTags(StoragePool destPool, VMInstanceVO vm) {\n+        List<VolumeVO> vols = _volsDao.findUsableVolumesForInstance(vm.getId());\n+        // OfflineVmwareMigration: iterate over volumes\n+        // OfflineVmwareMigration: get disk offering\n+        List<String> storageTags = storageMgr.getStoragePoolTagList(destPool.getId());\n+        for(Volume vol : vols) {\n+            DiskOfferingVO diskOffering = _diskOfferingDao.findById(vol.getDiskOfferingId());\n+            List<String> volumeTags = StringUtils.csvTagsToList(diskOffering.getTags());\n+            if(! matches(volumeTags, storageTags)) {\n+                String msg = String.format(\"destination pool '%s' with tags '%s', does not support the volume diskoffering for volume '%s' (tags: '%s') \",\n+                        destPool.getName(),\n+                        StringUtils.listToCsvTags(storageTags),\n+                        vol.getName(),\n+                        StringUtils.listToCsvTags(volumeTags)\n+                );\n+                throw new CloudRuntimeException(msg);\n+            }\n+        }\n+    }\n+\n+    static boolean matches(List<String> volumeTags, List<String> storagePoolTags) {\n+        // OfflineVmwareMigration: commons collections 4 allows for Collections.containsAll(volumeTags,storagePoolTags);\n+        boolean result = true;\n+        if (volumeTags != null) {\n+            for (String tag : volumeTags) {\n+                // there is a volume tags so\n+                if (storagePoolTags == null || !storagePoolTags.contains(tag)) {\n+                    result = false;\n+                    break;\n                 }\n+            }\n+        }\n+        return result;\n+    }\n \n-            } else {\n-                s_logger.debug(\"Storage migration failed\");\n+\n+    private void afterStorageMigrationCleanup(StoragePool destPool, VMInstanceVO vm, HostVO srcHost, Long srcClusterId) throws InsufficientCapacityException {\n+        setDestinationPoolAndReallocateNetwork(destPool, vm);\n+\n+        //when start the vm next time, don;'t look at last_host_id, only choose the host based on volume/storage pool\n+        vm.setLastHostId(null);\n+        vm.setPodIdToDeployIn(destPool.getPodId());\n+\n+        // If VM was cold migrated between clusters belonging to two different VMware DCs,\n+        // unregister the VM from the source host and cleanup the associated VM files.\n+        if (vm.getHypervisorType().equals(HypervisorType.VMware)) {\n+            afterStorageMigrationVmwareVMcleanup(destPool, vm, srcHost, srcClusterId);\n+        }\n+    }\n+\n+    private void setDestinationPoolAndReallocateNetwork(StoragePool destPool, VMInstanceVO vm) throws InsufficientCapacityException {\n+        //if the vm is migrated to different pod in basic mode, need to reallocate ip\n+\n+        if (destPool.getPodId() != null && !destPool.getPodId().equals(vm.getPodIdToDeployIn())) {\n+            if (s_logger.isDebugEnabled()) {\n+                String msg = String.format(\"as the pod for vm %s has changed we are reallocating its network\", vm.getInstanceName());\n+                s_logger.debug(msg);\n             }\n-        } catch (final ConcurrentOperationException e) {\n-            s_logger.debug(\"Failed to migration: \" + e.toString());\n-            throw new CloudRuntimeException(\"Failed to migration: \" + e.toString());\n-        } catch (final InsufficientVirtualNetworkCapacityException e) {\n-            s_logger.debug(\"Failed to migration: \" + e.toString());\n-            throw new CloudRuntimeException(\"Failed to migration: \" + e.toString());\n-        } catch (final InsufficientAddressCapacityException e) {\n-            s_logger.debug(\"Failed to migration: \" + e.toString());\n-            throw new CloudRuntimeException(\"Failed to migration: \" + e.toString());\n-        } catch (final InsufficientCapacityException e) {\n-            s_logger.debug(\"Failed to migration: \" + e.toString());\n-            throw new CloudRuntimeException(\"Failed to migration: \" + e.toString());\n-        } catch (final StorageUnavailableException e) {\n-            s_logger.debug(\"Failed to migration: \" + e.toString());\n-            throw new CloudRuntimeException(\"Failed to migration: \" + e.toString());\n-        } finally {\n-            try {\n-                stateTransitTo(vm, VirtualMachine.Event.AgentReportStopped, null);\n-            } catch (final NoTransitionException e) {\n-                s_logger.debug(\"Failed to change vm state: \" + e.toString());\n-                throw new CloudRuntimeException(\"Failed to change vm state: \" + e.toString());\n+            final DataCenterDeployment plan = new DataCenterDeployment(vm.getDataCenterId(), destPool.getPodId(), null, null, null, null);\n+            final VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vm, null, null, null, null);\n+            _networkMgr.reallocate(vmProfile, plan);\n+        }\n+    }\n+\n+    private void afterStorageMigrationVmwareVMcleanup(StoragePool destPool, VMInstanceVO vm, HostVO srcHost, Long srcClusterId) {\n+        // OfflineVmwareMigration: this should only happen on storage migration, else the guru would already have issued the command\n+        final Long destClusterId = destPool.getClusterId();\n+        if (srcClusterId != null && destClusterId != null && ! srcClusterId.equals(destClusterId)) {\n+            final String srcDcName = _clusterDetailsDao.getVmwareDcName(srcClusterId);\n+            final String destDcName = _clusterDetailsDao.getVmwareDcName(destClusterId);\n+            if (srcDcName != null && destDcName != null && !srcDcName.equals(destDcName)) {\n+                removeStaleVmFromSource(vm, srcHost);\n             }\n         }\n     }\n \n+    // OfflineVmwareMigration: on port forward refator this to be done in two\n+    // OfflineVmwareMigration: command creation in the guru.migrat method\n+    // OfflineVmwareMigration: sending up in the attemptHypevisorMigration with execute in sequence (responsibility of the guru)\n+    private void removeStaleVmFromSource(VMInstanceVO vm, HostVO srcHost) {\n+        s_logger.debug(\"Since VM's storage was successfully migrated across VMware Datacenters, unregistering VM: \" + vm.getInstanceName() +\n+                \" from source host: \" + srcHost.getId());\n+        final UnregisterVMCommand uvc = new UnregisterVMCommand(vm.getInstanceName());\n+        uvc.setCleanupVmFiles(true);\n+        try {\n+            _agentMgr.send(srcHost.getId(), uvc);\n+        } catch (final Exception e) {\n+            throw new CloudRuntimeException(\"Failed to unregister VM: \" + vm.getInstanceName() + \" from source host: \" + srcHost.getId() +\n+                    \" after successfully migrating VM's storage across VMware Datacenters\");\n+        }\n+    }\n+\n     @Override\n     public void migrate(final String vmUuid, final long srcHostId, final DeployDestination dest)\n             throws ResourceUnavailableException, ConcurrentOperationException {\n@@ -4577,6 +4720,13 @@ protected VirtualMachine retrieve() {\n         final User user = context.getCallingUser();\n         final Account account = context.getCallingAccount();\n \n+        Map<Volume, StoragePool> volumeStorageMap = dest.getStorageForDisks();\n+        if (volumeStorageMap != null) {\n+            for (Volume vol : volumeStorageMap.keySet()) {\n+                checkConcurrentJobsPerDatastoreThreshhold(volumeStorageMap.get(vol));\n+            }\n+        }\n+\n         final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n \n         final List<VmWorkJobVO> pendingWorkJobs = _workJobDao.listPendingWorkJobs(\n@@ -4738,6 +4888,16 @@ protected VirtualMachine retrieve() {\n         return new VmJobVirtualMachineOutcome(workJob, vm.getId());\n     }\n \n+    private void checkConcurrentJobsPerDatastoreThreshhold(final StoragePool destPool) {\n+        final Long threshold = VolumeApiService.ConcurrentMigrationsThresholdPerDatastore.value();\n+        if (threshold != null && threshold > 0) {\n+            long count = _jobMgr.countPendingJobs(\"\\\"storageid\\\":\\\"\" + destPool.getUuid() + \"\\\"\", MigrateVMCmd.class.getName(), MigrateVolumeCmd.class.getName(), MigrateVolumeCmdByAdmin.class.getName());\n+            if (count > threshold) {\n+                throw new CloudRuntimeException(\"Number of concurrent migration jobs per datastore exceeded the threshold: \" + threshold.toString() + \". Please try again after some time.\");\n+            }\n+        }\n+    }\n+\n     public Outcome<VirtualMachine> migrateVmStorageThroughJobQueue(\n             final String vmUuid, final StoragePool destPool) {\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "7d218e226d50a4ea8ad6d0dfaf12d69bdb6d85fc",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 0,
                "filename": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java",
                "patch": "@@ -30,6 +30,10 @@\n import javax.inject.Inject;\n import javax.naming.ConfigurationException;\n \n+import com.cloud.storage.VolumeApiService;\n+import org.apache.cloudstack.api.command.admin.vm.MigrateVMCmd;\n+import org.apache.cloudstack.api.command.admin.volume.MigrateVolumeCmdByAdmin;\n+import org.apache.cloudstack.api.command.user.volume.MigrateVolumeCmd;\n import org.apache.cloudstack.engine.orchestration.service.VolumeOrchestrationService;\n import org.apache.cloudstack.engine.subsystem.api.storage.ChapInfo;\n import org.apache.cloudstack.engine.subsystem.api.storage.DataObject;\n@@ -953,10 +957,29 @@ public void revokeAccess(long vmId, long hostId) {\n         }\n     }\n \n+    private void checkConcurrentJobsPerDatastoreThreshhold(final StoragePool destPool) {\n+        final Long threshold = VolumeApiService.ConcurrentMigrationsThresholdPerDatastore.value();\n+        if (threshold != null && threshold > 0) {\n+            long count = _jobMgr.countPendingJobs(\"\\\"storageid\\\":\\\"\" + destPool.getUuid() + \"\\\"\", MigrateVMCmd.class.getName(), MigrateVolumeCmd.class.getName(), MigrateVolumeCmdByAdmin.class.getName());\n+            if (count > threshold) {\n+                throw new CloudRuntimeException(\"Number of concurrent migration jobs per datastore exceeded the threshold: \" + threshold.toString() + \". Please try again after some time.\");\n+            }\n+        }\n+    }\n+\n+\n     @Override\n     @DB\n     public Volume migrateVolume(Volume volume, StoragePool destPool) throws StorageUnavailableException {\n         VolumeInfo vol = volFactory.getVolume(volume.getId());\n+        if (vol == null){\n+            throw new CloudRuntimeException(\"Migrate volume failed because volume object of volume \" + volume.getName()+ \"is null\");\n+        }\n+        if (destPool == null) {\n+            throw new CloudRuntimeException(\"Migrate volume failed because destination storage pool is not available!!\");\n+        }\n+\n+        checkConcurrentJobsPerDatastoreThreshhold(destPool);\n \n         DataStore dataStoreTarget = dataStoreMgr.getDataStore(destPool.getId(), DataStoreRole.Primary);\n         AsyncCallFuture<VolumeApiResult> future = volService.copyVolume(vol, dataStoreTarget);\n@@ -1062,6 +1085,10 @@ public boolean storageMigration(VirtualMachineProfile vm, StoragePool destPool)\n             return true;\n         }\n \n+        // OfflineVmwareMigration: in case we can (vmware?) don't itterate over volumes but tell the hypervisor to do the thing\n+        if (s_logger.isDebugEnabled()) {\n+            s_logger.debug(\"Offline vm migration was not done up the stack in VirtualMachineManager so trying here.\");\n+        }\n         for (Volume vol : volumesNeedToMigrate) {\n             Volume result = migrateVolume(vol, destPool);\n             if (result == null) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java",
                "sha": "6e71864c4473741d0ff7842e7133a348fd76cb29",
                "status": "modified"
            },
            {
                "additions": 44,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/engine/orchestration/src/test/java/com/cloud/vm/VirtualMachineManagerImplTest.java",
                "changes": 52,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/test/java/com/cloud/vm/VirtualMachineManagerImplTest.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 8,
                "filename": "engine/orchestration/src/test/java/com/cloud/vm/VirtualMachineManagerImplTest.java",
                "patch": "@@ -17,6 +17,7 @@\n \n package com.cloud.vm;\n \n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n import static org.mockito.Matchers.any;\n import static org.mockito.Matchers.anyLong;\n@@ -25,6 +26,7 @@\n import static org.mockito.Mockito.when;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -178,7 +180,7 @@ public void testSendStopWithFailAnswer() throws Exception {\n \n         boolean actual = virtualMachineManagerImpl.sendStop(guru, profile, false, false);\n \n-        Assert.assertFalse(actual);\n+        assertFalse(actual);\n     }\n \n     @Test\n@@ -192,7 +194,7 @@ public void testSendStopWithNullAnswer() throws Exception {\n \n         boolean actual = virtualMachineManagerImpl.sendStop(guru, profile, false, false);\n \n-        Assert.assertFalse(actual);\n+        assertFalse(actual);\n     }\n \n     @Test\n@@ -242,7 +244,7 @@ public void isStorageCrossClusterMigrationTestStorageSameCluster() {\n \n         boolean returnedValue = virtualMachineManagerImpl.isStorageCrossClusterMigration(hostMock, storagePoolVoMock);\n \n-        Assert.assertFalse(returnedValue);\n+        assertFalse(returnedValue);\n     }\n \n     @Test\n@@ -253,7 +255,7 @@ public void isStorageCrossClusterMigrationTestStorageTypeEqualsZone() {\n \n         boolean returnedValue = virtualMachineManagerImpl.isStorageCrossClusterMigration(hostMock, storagePoolVoMock);\n \n-        Assert.assertFalse(returnedValue);\n+        assertFalse(returnedValue);\n     }\n \n     @Test\n@@ -317,7 +319,7 @@ public void buildMapUsingUserInformationTestTargetHostHasAccessToPool() {\n \n         Map<Volume, StoragePool> volumeToPoolObjectMap = virtualMachineManagerImpl.buildMapUsingUserInformation(virtualMachineProfileMock, hostMock, userDefinedVolumeToStoragePoolMap);\n \n-        Assert.assertFalse(volumeToPoolObjectMap.isEmpty());\n+        assertFalse(volumeToPoolObjectMap.isEmpty());\n         Assert.assertEquals(storagePoolVoMock, volumeToPoolObjectMap.get(volumeVoMock));\n \n         Mockito.verify(userDefinedVolumeToStoragePoolMap, times(1)).keySet();\n@@ -501,7 +503,7 @@ public void createVolumeToStoragePoolMappingIfPossibleTestTargetHostDoesNotAcces\n         HashMap<Volume, StoragePool> volumeToPoolObjectMap = new HashMap<>();\n         virtualMachineManagerImpl.createVolumeToStoragePoolMappingIfPossible(virtualMachineProfileMock, hostMock, volumeToPoolObjectMap, volumeVoMock, storagePoolVoMock);\n \n-        Assert.assertFalse(volumeToPoolObjectMap.isEmpty());\n+        assertFalse(volumeToPoolObjectMap.isEmpty());\n         Assert.assertEquals(storagePoolMockOther, volumeToPoolObjectMap.get(volumeVoMock));\n     }\n \n@@ -558,7 +560,7 @@ public void createStoragePoolMappingsForVolumesTestNotCrossCluterMigrationWithCl\n \n         virtualMachineManagerImpl.createStoragePoolMappingsForVolumes(virtualMachineProfileMock, hostMock, volumeToPoolObjectMap, allVolumes);\n \n-        Assert.assertFalse(volumeToPoolObjectMap.isEmpty());\n+        assertFalse(volumeToPoolObjectMap.isEmpty());\n         Assert.assertEquals(storagePoolVoMock, volumeToPoolObjectMap.get(volumeVoMock));\n \n         Mockito.verify(virtualMachineManagerImpl).executeManagedStorageChecksWhenTargetStoragePoolNotProvided(hostMock, storagePoolVoMock, volumeVoMock);\n@@ -587,4 +589,38 @@ public void createMappingVolumeAndStoragePoolTest() {\n         inOrder.verify(virtualMachineManagerImpl).findVolumesThatWereNotMappedByTheUser(virtualMachineProfileMock, volumeToPoolObjectMap);\n         inOrder.verify(virtualMachineManagerImpl).createStoragePoolMappingsForVolumes(virtualMachineProfileMock, hostMock, volumeToPoolObjectMap, volumesNotMapped);\n     }\n-}\n\\ No newline at end of file\n+\n+    @Test\n+    public void matchesOfSorts() {\n+        List<String> nothing = null;\n+        List<String> empty = new ArrayList<>();\n+        List<String> tag = Arrays.asList(\"bla\");\n+        List<String> tags = Arrays.asList(\"bla\", \"blob\");\n+        List<String> others = Arrays.asList(\"bla\", \"blieb\");\n+        List<String> three = Arrays.asList(\"bla\", \"blob\", \"blieb\");\n+\n+        // single match\n+        assertTrue(VirtualMachineManagerImpl.matches(tag,tags));\n+        assertTrue(VirtualMachineManagerImpl.matches(tag,others));\n+\n+        // no requirements\n+        assertTrue(VirtualMachineManagerImpl.matches(nothing,tags));\n+        assertTrue(VirtualMachineManagerImpl.matches(empty,tag));\n+\n+        // mis(sing)match\n+        assertFalse(VirtualMachineManagerImpl.matches(tags,tag));\n+        assertFalse(VirtualMachineManagerImpl.matches(tag,nothing));\n+        assertFalse(VirtualMachineManagerImpl.matches(tag,empty));\n+\n+        // disjunct sets\n+        assertFalse(VirtualMachineManagerImpl.matches(tags,others));\n+        assertFalse(VirtualMachineManagerImpl.matches(others,tags));\n+\n+        // everything matches the larger set\n+        assertTrue(VirtualMachineManagerImpl.matches(nothing,three));\n+        assertTrue(VirtualMachineManagerImpl.matches(empty,three));\n+        assertTrue(VirtualMachineManagerImpl.matches(tag,three));\n+        assertTrue(VirtualMachineManagerImpl.matches(tags,three));\n+        assertTrue(VirtualMachineManagerImpl.matches(others,three));\n+    }\n+}",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/engine/orchestration/src/test/java/com/cloud/vm/VirtualMachineManagerImplTest.java",
                "sha": "0e7579ea5fd3782c101e59841b92df8987dddde4",
                "status": "modified"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/DataMotionServiceImpl.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/DataMotionServiceImpl.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 2,
                "filename": "engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/DataMotionServiceImpl.java",
                "patch": "@@ -18,12 +18,17 @@\n  */\n package org.apache.cloudstack.storage.motion;\n \n+import java.util.Date;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n \n import javax.inject.Inject;\n \n+import com.cloud.storage.Volume;\n+import com.cloud.storage.VolumeVO;\n+import com.cloud.storage.dao.VolumeDao;\n+import org.apache.log4j.Logger;\n import org.springframework.stereotype.Component;\n \n import org.apache.cloudstack.engine.subsystem.api.storage.CopyCommandResult;\n@@ -40,10 +45,15 @@\n import com.cloud.utils.StringUtils;\n import com.cloud.utils.exception.CloudRuntimeException;\n \n+\n @Component\n public class DataMotionServiceImpl implements DataMotionService {\n+    private static final Logger LOGGER = Logger.getLogger(DataMotionServiceImpl.class);\n+\n     @Inject\n     StorageStrategyFactory storageStrategyFactory;\n+    @Inject\n+    VolumeDao volDao;\n \n     @Override\n     public void copyAsync(DataObject srcData, DataObject destData, Host destHost, AsyncCompletionCallback<CopyCommandResult> callback) {\n@@ -61,13 +71,33 @@ public void copyAsync(DataObject srcData, DataObject destData, Host destHost, As\n \n         DataMotionStrategy strategy = storageStrategyFactory.getDataMotionStrategy(srcData, destData);\n         if (strategy == null) {\n+            // OfflineVmware volume migration\n+            // Cleanup volumes from target and reset the state of volume at source\n+            cleanUpVolumesForFailedMigrations(srcData, destData);\n             throw new CloudRuntimeException(\"Can't find strategy to move data. \" + \"Source: \" + srcData.getType().name() + \" '\" + srcData.getUuid() + \", Destination: \" +\n-                destData.getType().name() + \" '\" + destData.getUuid() + \"'\");\n+                    destData.getType().name() + \" '\" + destData.getUuid() + \"'\");\n         }\n \n         strategy.copyAsync(srcData, destData, destHost, callback);\n     }\n \n+    /**\n+     * Offline Vmware volume migration\n+     * Cleanup volumes after failed migrations and reset state of source volume\n+     *\n+     * @param srcData\n+     * @param destData\n+     */\n+    private void cleanUpVolumesForFailedMigrations(DataObject srcData, DataObject destData) {\n+        VolumeVO destinationVO = volDao.findById(destData.getId());\n+        VolumeVO sourceVO = volDao.findById(srcData.getId());\n+        sourceVO.setState(Volume.State.Ready);\n+        volDao.update(sourceVO.getId(), sourceVO);\n+        destinationVO.setState(Volume.State.Expunged);\n+        destinationVO.setRemoved(new Date());\n+        volDao.update(destinationVO.getId(), destinationVO);\n+    }\n+\n     @Override\n     public void copyAsync(DataObject srcData, DataObject destData, AsyncCompletionCallback<CopyCommandResult> callback) {\n         copyAsync(srcData, destData, null, callback);\n@@ -84,7 +114,7 @@ public void copyAsync(Map<VolumeInfo, DataStore> volumeMap, VirtualMachineTO vmT\n             }\n \n             throw new CloudRuntimeException(\"Can't find strategy to move data. \" + \"Source Host: \" + srcHost.getName() + \", Destination Host: \" + destHost.getName() +\n-                \", Volume UUIDs: \" + StringUtils.join(volumeIds, \",\"));\n+                    \", Volume UUIDs: \" + StringUtils.join(volumeIds, \",\"));\n         }\n \n         strategy.copyAsync(volumeMap, vmTo, srcHost, destHost, callback);",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/DataMotionServiceImpl.java",
                "sha": "c2724e648241283368a698707b07a993d9b85065",
                "status": "modified"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/engine/storage/volume/src/main/java/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java",
                "changes": 56,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/storage/volume/src/main/java/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 20,
                "filename": "engine/storage/volume/src/main/java/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java",
                "patch": "@@ -1408,6 +1408,19 @@ protected Void copyVolumeFromPrimaryToImageCallback(AsyncCallbackDispatcher<Volu\n \n     @Override\n     public AsyncCallFuture<VolumeApiResult> copyVolume(VolumeInfo srcVolume, DataStore destStore) {\n+        if (s_logger.isDebugEnabled()) {\n+            DataStore srcStore = srcVolume.getDataStore();\n+            String srcRole = (srcStore != null && srcStore.getRole() != null ? srcVolume.getDataStore().getRole().toString() : \"<unknown role>\");\n+\n+            String msg = String.format(\"copying %s(id=%d, role=%s) to %s (id=%d, role=%s)\"\n+                    , srcVolume.getName()\n+                    , srcVolume.getId()\n+                    , srcRole\n+                    , destStore.getName()\n+                    , destStore.getId()\n+                    , destStore.getRole());\n+            s_logger.debug(msg);\n+        }\n \n         if (srcVolume.getState() == Volume.State.Uploaded) {\n             return copyVolumeFromImageToPrimary(srcVolume, destStore);\n@@ -1417,6 +1430,8 @@ protected Void copyVolumeFromPrimaryToImageCallback(AsyncCallbackDispatcher<Volu\n             return copyVolumeFromPrimaryToImage(srcVolume, destStore);\n         }\n \n+        // OfflineVmwareMigration: aren't we missing secondary to secondary in this logic?\n+\n         AsyncCallFuture<VolumeApiResult> future = new AsyncCallFuture<VolumeApiResult>();\n         VolumeApiResult res = new VolumeApiResult(srcVolume);\n         try {\n@@ -1438,7 +1453,10 @@ protected Void copyVolumeFromPrimaryToImageCallback(AsyncCallbackDispatcher<Volu\n             caller.setCallback(caller.getTarget().copyVolumeCallBack(null, null)).setContext(context);\n             motionSrv.copyAsync(srcVolume, destVolume, caller);\n         } catch (Exception e) {\n-            s_logger.debug(\"Failed to copy volume\" + e);\n+            s_logger.error(\"Failed to copy volume:\" + e);\n+            if(s_logger.isDebugEnabled()) {\n+                s_logger.debug(\"Failed to copy volume.\", e);\n+            }\n             res.setResult(e.toString());\n             future.complete(res);\n         }\n@@ -1461,27 +1479,25 @@ protected Void copyVolumeCallBack(AsyncCallbackDispatcher<VolumeServiceImpl, Cop\n                 AsyncCallFuture<VolumeApiResult> destroyFuture = expungeVolumeAsync(destVolume);\n                 destroyFuture.get();\n                 future.complete(res);\n-                return null;\n-            }\n-            srcVolume.processEvent(Event.OperationSuccessed);\n-            destVolume.processEvent(Event.MigrationCopySucceeded, result.getAnswer());\n-            volDao.updateUuid(srcVolume.getId(), destVolume.getId());\n-            _volumeStoreDao.updateVolumeId(srcVolume.getId(), destVolume.getId());\n-            try {\n-                destroyVolume(srcVolume.getId());\n-                srcVolume = volFactory.getVolume(srcVolume.getId());\n-                AsyncCallFuture<VolumeApiResult> destroyFuture = expungeVolumeAsync(srcVolume);\n-                // If volume destroy fails, this could be because of vdi is still in use state, so wait and retry.\n-                if (destroyFuture.get().isFailed()) {\n-                    Thread.sleep(5 * 1000);\n-                    destroyFuture = expungeVolumeAsync(srcVolume);\n-                    destroyFuture.get();\n+            } else {\n+                srcVolume.processEvent(Event.OperationSuccessed);\n+                destVolume.processEvent(Event.MigrationCopySucceeded, result.getAnswer());\n+                volDao.updateUuid(srcVolume.getId(), destVolume.getId());\n+                try {\n+                    destroyVolume(srcVolume.getId());\n+                    srcVolume = volFactory.getVolume(srcVolume.getId());\n+                    AsyncCallFuture<VolumeApiResult> destroyFuture = expungeVolumeAsync(srcVolume);\n+                    // If volume destroy fails, this could be because of vdi is still in use state, so wait and retry.\n+                    if (destroyFuture.get().isFailed()) {\n+                        Thread.sleep(5 * 1000);\n+                        destroyFuture = expungeVolumeAsync(srcVolume);\n+                        destroyFuture.get();\n+                    }\n+                    future.complete(res);\n+                } catch (Exception e) {\n+                    s_logger.debug(\"failed to clean up volume on storage\", e);\n                 }\n-                future.complete(res);\n-            } catch (Exception e) {\n-                s_logger.debug(\"failed to clean up volume on storage\", e);\n             }\n-            return null;\n         } catch (Exception e) {\n             s_logger.debug(\"Failed to process copy volume callback\", e);\n             res.setResult(e.toString());",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/engine/storage/volume/src/main/java/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java",
                "sha": "8ff0bd20815b233e26f4ad74ec3c3f57a0030f9f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/AsyncJobManager.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/AsyncJobManager.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 0,
                "filename": "framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/AsyncJobManager.java",
                "patch": "@@ -131,4 +131,6 @@ void joinJob(long jobId, long joinJobId, String wakeupHandler, String wakupDispa\n     Object unmarshallResultObject(AsyncJob job);\n \n     List<AsyncJobVO> findFailureAsyncJobs(String... cmds);\n+\n+    long countPendingJobs(String havingInfo, String... cmds);\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/AsyncJobManager.java",
                "sha": "8542407524b1184e0f8c16a85df83a8eaa35aa5f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/dao/AsyncJobDao.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/dao/AsyncJobDao.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 0,
                "filename": "framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/dao/AsyncJobDao.java",
                "patch": "@@ -44,4 +44,6 @@\n     List<AsyncJobVO> getResetJobs(long msid);\n \n     List<AsyncJobVO> getFailureJobsSinceLastMsStart(long msId, String... cmds);\n+\n+    long countPendingJobs(String havingInfo, String... cmds);\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/dao/AsyncJobDao.java",
                "sha": "2696e105cce440933e48ed6fbe2bc927abc4f1c8",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/dao/AsyncJobDaoImpl.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/dao/AsyncJobDaoImpl.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 0,
                "filename": "framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/dao/AsyncJobDaoImpl.java",
                "patch": "@@ -30,6 +30,7 @@\n import com.cloud.utils.db.DB;\n import com.cloud.utils.db.Filter;\n import com.cloud.utils.db.GenericDaoBase;\n+import com.cloud.utils.db.GenericSearchBuilder;\n import com.cloud.utils.db.SearchBuilder;\n import com.cloud.utils.db.SearchCriteria;\n import com.cloud.utils.db.SearchCriteria.Op;\n@@ -46,6 +47,7 @@\n     private final SearchBuilder<AsyncJobVO> expiringUnfinishedAsyncJobSearch;\n     private final SearchBuilder<AsyncJobVO> expiringCompletedAsyncJobSearch;\n     private final SearchBuilder<AsyncJobVO> failureMsidAsyncJobSearch;\n+    private final GenericSearchBuilder<AsyncJobVO, Long> asyncJobTypeSearch;\n \n     public AsyncJobDaoImpl() {\n         pendingAsyncJobSearch = createSearchBuilder();\n@@ -94,6 +96,13 @@ public AsyncJobDaoImpl() {\n         failureMsidAsyncJobSearch.and(\"job_cmd\", failureMsidAsyncJobSearch.entity().getCmd(), Op.IN);\n         failureMsidAsyncJobSearch.done();\n \n+        asyncJobTypeSearch = createSearchBuilder(Long.class);\n+        asyncJobTypeSearch.select(null, SearchCriteria.Func.COUNT, asyncJobTypeSearch.entity().getId());\n+        asyncJobTypeSearch.and(\"job_info\", asyncJobTypeSearch.entity().getCmdInfo(),Op.LIKE);\n+        asyncJobTypeSearch.and(\"job_cmd\", asyncJobTypeSearch.entity().getCmd(), Op.IN);\n+        asyncJobTypeSearch.and(\"status\", asyncJobTypeSearch.entity().getStatus(), SearchCriteria.Op.EQ);\n+        asyncJobTypeSearch.done();\n+\n     }\n \n     @Override\n@@ -227,4 +236,14 @@ public void resetJobProcess(long msid, int jobResultCode, String jobResultMessag\n         sc.setParameters(\"job_cmd\", (Object[])cmds);\n         return listBy(sc);\n     }\n+\n+    @Override\n+    public long countPendingJobs(String havingInfo, String... cmds) {\n+        SearchCriteria<Long> sc = asyncJobTypeSearch.create();\n+        sc.setParameters(\"status\", JobInfo.Status.IN_PROGRESS);\n+        sc.setParameters(\"job_cmd\", (Object[])cmds);\n+        sc.setParameters(\"job_info\", \"%\" + havingInfo + \"%\");\n+        List<Long> results = customSearch(sc, null);\n+        return results.get(0);\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/dao/AsyncJobDaoImpl.java",
                "sha": "6ca698b7589a953bd392c7717cc197cc61a1e791",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/impl/AsyncJobManagerImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/impl/AsyncJobManagerImpl.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 0,
                "filename": "framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/impl/AsyncJobManagerImpl.java",
                "patch": "@@ -1122,4 +1122,9 @@ private void publishOnEventBus(AsyncJob job, String jobEvent) {\n     public List<AsyncJobVO> findFailureAsyncJobs(String... cmds) {\n         return _jobDao.getFailureJobsSinceLastMsStart(getMsid(), cmds);\n     }\n+\n+    @Override\n+    public long countPendingJobs(String havingInfo, String... cmds) {\n+        return _jobDao.countPendingJobs(havingInfo, cmds);\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/impl/AsyncJobManagerImpl.java",
                "sha": "1be3eedaf23d9101f8a2bf166c9d84d46d3f8cb6",
                "status": "modified"
            },
            {
                "additions": 39,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/guru/VMwareGuru.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/guru/VMwareGuru.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 1,
                "filename": "plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/guru/VMwareGuru.java",
                "patch": "@@ -26,6 +26,11 @@\n \n import javax.inject.Inject;\n \n+import com.cloud.agent.api.MigrateVmToPoolCommand;\n+import com.cloud.agent.api.UnregisterVMCommand;\n+import com.cloud.agent.api.to.VolumeTO;\n+import com.cloud.dc.ClusterDetailsDao;\n+import com.cloud.storage.StoragePool;\n import org.apache.cloudstack.engine.subsystem.api.storage.PrimaryDataStore;\n import org.apache.cloudstack.engine.subsystem.api.storage.VolumeDataFactory;\n import org.apache.cloudstack.engine.subsystem.api.storage.VolumeInfo;\n@@ -115,12 +120,14 @@\n     @Inject\n     private GuestOSDao _guestOsDao;\n     @Inject\n-    GuestOSHypervisorDao _guestOsHypervisorDao;\n+    private GuestOSHypervisorDao _guestOsHypervisorDao;\n     @Inject\n     private HostDao _hostDao;\n     @Inject\n     private HostDetailsDao _hostDetailsDao;\n     @Inject\n+    private ClusterDetailsDao _clusterDetailsDao;\n+    @Inject\n     private CommandExecLogDao _cmdExecLogDao;\n     @Inject\n     private VmwareManager _vmwareMgr;\n@@ -640,4 +647,35 @@ public String getConfigComponentName() {\n         details.put(VmwareReserveMemory.key(), VmwareReserveMemory.valueIn(clusterId).toString());\n         return details;\n     }\n+\n+    @Override\n+    public List<Command> finalizeMigrate(VirtualMachine vm, StoragePool destination) {\n+        List<Command> commands = new ArrayList<Command>();\n+\n+        // OfflineVmwareMigration: specialised migration command\n+        List<VolumeVO> volumes = _volumeDao.findByInstance(vm.getId());\n+        List<VolumeTO> vols = new ArrayList<>();\n+        for (Volume volume : volumes) {\n+            VolumeTO vol = new VolumeTO(volume,destination);\n+            vols.add(vol);\n+        }\n+        MigrateVmToPoolCommand migrateVmToPoolCommand = new MigrateVmToPoolCommand(vm.getInstanceName(), vols, destination.getUuid(), true);\n+        commands.add(migrateVmToPoolCommand);\n+\n+        // OfflineVmwareMigration: cleanup if needed\n+        final Long destClusterId = destination.getClusterId();\n+        final Long srcClusterId = getClusterId(vm.getId());\n+\n+        if (srcClusterId != null && destClusterId != null && ! srcClusterId.equals(destClusterId)) {\n+            final String srcDcName = _clusterDetailsDao.getVmwareDcName(srcClusterId);\n+            final String destDcName = _clusterDetailsDao.getVmwareDcName(destClusterId);\n+            if (srcDcName != null && destDcName != null && !srcDcName.equals(destDcName)) {\n+                final UnregisterVMCommand unregisterVMCommand = new UnregisterVMCommand(vm.getInstanceName(), true);\n+                unregisterVMCommand.setCleanupVmFiles(true);\n+\n+                commands.add(unregisterVMCommand);\n+            }\n+        }\n+        return commands;\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/guru/VMwareGuru.java",
                "sha": "10c3feb2609eea89da41442b1d87e5da793b6c92",
                "status": "modified"
            },
            {
                "additions": 327,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "changes": 340,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/resource/VmwareResource.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 13,
                "filename": "plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "patch": "@@ -43,8 +43,8 @@\n \n import javax.naming.ConfigurationException;\n \n-import org.apache.commons.lang.StringUtils;\n import org.apache.commons.lang.math.NumberUtils;\n+import org.apache.commons.lang.StringUtils;\n import org.apache.log4j.Logger;\n import org.apache.log4j.NDC;\n import org.joda.time.Duration;\n@@ -163,6 +163,8 @@\n import com.cloud.agent.api.ManageSnapshotCommand;\n import com.cloud.agent.api.MigrateAnswer;\n import com.cloud.agent.api.MigrateCommand;\n+import com.cloud.agent.api.MigrateVmToPoolAnswer;\n+import com.cloud.agent.api.MigrateVmToPoolCommand;\n import com.cloud.agent.api.MigrateWithStorageAnswer;\n import com.cloud.agent.api.MigrateWithStorageCommand;\n import com.cloud.agent.api.ModifySshKeysCommand;\n@@ -311,6 +313,7 @@\n \n public class VmwareResource implements StoragePoolResource, ServerResource, VmwareHostService, VirtualRouterDeployer {\n     private static final Logger s_logger = Logger.getLogger(VmwareResource.class);\n+    public static final String VMDK_EXTENSION = \".vmdk\";\n \n     private static final Random RANDOM = new Random(System.nanoTime());\n \n@@ -442,6 +445,8 @@ public Answer executeRequest(Command cmd) {\n                 answer = execute((PrepareForMigrationCommand)cmd);\n             } else if (clz == MigrateCommand.class) {\n                 answer = execute((MigrateCommand)cmd);\n+            } else if (clz == MigrateVmToPoolCommand.class) {\n+                answer = execute((MigrateVmToPoolCommand)cmd);\n             } else if (clz == MigrateWithStorageCommand.class) {\n                 answer = execute((MigrateWithStorageCommand)cmd);\n             } else if (clz == MigrateVolumeCommand.class) {\n@@ -699,30 +704,38 @@ private Answer execute(ResizeVolumeCommand cmd) {\n             }\n \n             if (vmName.equalsIgnoreCase(\"none\")) {\n+                // OfflineVmwareMigration: we need to refactor the worker vm creation out for use in migration methods as well as here\n+                // OfflineVmwareMigration: this method is 100 lines and needs refactorring anyway\n                 // we need to spawn a worker VM to attach the volume to and resize the volume.\n                 useWorkerVm = true;\n                 vmName = getWorkerName(getServiceContext(), cmd, 0);\n \n                 String poolId = cmd.getPoolUuid();\n \n+                // OfflineVmwareMigration: refactor for re-use\n+                // OfflineVmwareMigration: 1. find data(store)\n                 ManagedObjectReference morDS = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, poolId);\n                 DatastoreMO dsMo = new DatastoreMO(hyperHost.getContext(), morDS);\n \n                 s_logger.info(\"Create worker VM \" + vmName);\n \n+                // OfflineVmwareMigration: 2. create the worker with access to the data(store)\n                 vmMo = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, vmName);\n \n                 if (vmMo == null) {\n+                    // OfflineVmwareMigration: don't throw a general Exception but think of a specific one\n                     throw new Exception(\"Unable to create a worker VM for volume resize\");\n                 }\n \n                 synchronized (this) {\n-                    vmdkDataStorePath = VmwareStorageLayoutHelper.getLegacyDatastorePathFromVmdkFileName(dsMo, path + \".vmdk\");\n+                    // OfflineVmwareMigration: 3. attach the disk to the worker\n+                    vmdkDataStorePath = VmwareStorageLayoutHelper.getLegacyDatastorePathFromVmdkFileName(dsMo, path + VMDK_EXTENSION);\n \n                     vmMo.attachDisk(new String[] { vmdkDataStorePath }, morDS);\n                 }\n             }\n \n+            // OfflineVmwareMigration: 4. find the (worker-) VM\n             // find VM through datacenter (VM is not at the target host yet)\n             vmMo = hyperHost.findVmOnPeerHyperHost(vmName);\n \n@@ -734,6 +747,7 @@ private Answer execute(ResizeVolumeCommand cmd) {\n                 throw new Exception(msg);\n             }\n \n+            // OfflineVmwareMigration: 5. ignore/replace the rest of the try-block; It is the functional bit\n             Pair<VirtualDisk, String> vdisk = vmMo.getDiskDevice(path);\n \n             if (vdisk == null) {\n@@ -813,6 +827,7 @@ private Answer execute(ResizeVolumeCommand cmd) {\n \n             return new ResizeVolumeAnswer(cmd, false, error);\n         } finally {\n+            // OfflineVmwareMigration: 6. check if a worker was used and destroy it if needed\n             try {\n                 if (useWorkerVm) {\n                     s_logger.info(\"Destroy worker VM after volume resize\");\n@@ -2313,7 +2328,7 @@ private String appendFileType(String path, String fileType) {\n     }\n \n     private void resizeRootDiskOnVMStart(VirtualMachineMO vmMo, DiskTO rootDiskTO, VmwareHypervisorHost hyperHost, VmwareContext context) throws Exception {\n-        final Pair<VirtualDisk, String> vdisk = getVirtualDiskInfo(vmMo, appendFileType(rootDiskTO.getPath(), \".vmdk\"));\n+        final Pair<VirtualDisk, String> vdisk = getVirtualDiskInfo(vmMo, appendFileType(rootDiskTO.getPath(), VMDK_EXTENSION));\n         assert(vdisk != null);\n \n         Long reqSize = 0L;\n@@ -2536,7 +2551,7 @@ int getReservedCpuMHZ(VirtualMachineTO vmSpec) {\n                     vmdkPath = dsMo.getName();\n                 }\n \n-                datastoreDiskPath = dsMo.getDatastorePath(vmdkPath + \".vmdk\");\n+                datastoreDiskPath = dsMo.getDatastorePath(vmdkPath + VMDK_EXTENSION);\n             }\n         } else {\n             datastoreDiskPath = VmwareStorageLayoutHelper.syncVolumeToVmDefaultFolder(dcMo, vmMo.getName(), dsMo, volumeTO.getPath(), VmwareManager.s_vmwareSearchExcludeFolder.value());\n@@ -3061,7 +3076,7 @@ public int compare(DiskTO arg0, DiskTO arg1) {\n      * Ex. \"[-iqn.2010-01.com.solidfire:4nhe.vol-1.27-0] i-2-18-VM/ROOT-18.vmdk\" should return \"i-2-18-VM/ROOT-18\"\n      */\n     public String getVmdkPath(String path) {\n-        if (!com.cloud.utils.StringUtils.isNotBlank(path)) {\n+        if (!StringUtils.isNotBlank(path)) {\n             return null;\n         }\n \n@@ -3075,7 +3090,7 @@ public String getVmdkPath(String path) {\n \n         path = path.substring(startIndex + search.length());\n \n-        final String search2 = \".vmdk\";\n+        final String search2 = VMDK_EXTENSION;\n \n         int endIndex = path.indexOf(search2);\n \n@@ -3128,10 +3143,10 @@ public String getVmdkPath(String path) {\n                             final String datastoreVolumePath;\n \n                             if (vmdkPath != null) {\n-                                datastoreVolumePath = dsMo.getDatastorePath(vmdkPath + \".vmdk\");\n+                                datastoreVolumePath = dsMo.getDatastorePath(vmdkPath + VMDK_EXTENSION);\n                             }\n                             else {\n-                                datastoreVolumePath = dsMo.getDatastorePath(dsMo.getName() + \".vmdk\");\n+                                datastoreVolumePath = dsMo.getDatastorePath(dsMo.getName() + VMDK_EXTENSION);\n                             }\n \n                             volumeTO.setPath(datastoreVolumePath);\n@@ -3780,12 +3795,172 @@ protected Answer execute(PrepareForMigrationCommand cmd) {\n                 invalidateServiceContext();\n             }\n \n-            String msg = \"Unexcpeted exception \" + VmwareHelper.getExceptionMessage(e);\n+            String msg = \"Unexpected exception \" + VmwareHelper.getExceptionMessage(e);\n             s_logger.error(msg, e);\n             return new PrepareForMigrationAnswer(cmd, msg);\n         }\n     }\n \n+    protected Answer execute(MigrateVmToPoolCommand cmd) {\n+        if (s_logger.isInfoEnabled()) {\n+            s_logger.info(String.format(\"excuting MigrateVmToPoolCommand %s -> %s\", cmd.getVmName(), cmd.getDestinationPool()));\n+            if (s_logger.isDebugEnabled()) {\n+                s_logger.debug(\"MigrateVmToPoolCommand: \" + _gson.toJson(cmd));\n+            }\n+        }\n+\n+        final String vmName = cmd.getVmName();\n+\n+        VmwareHypervisorHost hyperHost = getHyperHost(getServiceContext());\n+        try {\n+            VirtualMachineMO vmMo = getVirtualMachineMO(vmName, hyperHost);\n+            if (vmMo == null) {\n+                String msg = \"VM \" + vmName + \" does not exist in VMware datacenter\";\n+                s_logger.error(msg);\n+                throw new CloudRuntimeException(msg);\n+            }\n+\n+            String poolUuid = cmd.getDestinationPool();\n+            return migrateAndAnswer(vmMo, poolUuid, hyperHost, cmd);\n+        } catch (Throwable e) { // hopefully only CloudRuntimeException :/\n+            if (e instanceof Exception) {\n+                return new Answer(cmd, (Exception) e);\n+            }\n+            if (s_logger.isDebugEnabled()) {\n+                s_logger.debug(\"problem\" , e);\n+            }\n+            s_logger.error(e.getLocalizedMessage());\n+            return new Answer(cmd, false, \"unknown problem: \" + e.getLocalizedMessage());\n+        }\n+    }\n+\n+    private Answer migrateAndAnswer(VirtualMachineMO vmMo, String poolUuid, VmwareHypervisorHost hyperHost, Command cmd) throws Exception {\n+        ManagedObjectReference morDs = getTargetDatastoreMOReference(poolUuid, hyperHost);\n+\n+        try {\n+            // OfflineVmwareMigration: getVolumesFromCommand(cmd);\n+            Map<Integer, Long> volumeDeviceKey = getVolumesFromCommand(vmMo, cmd);\n+            if (s_logger.isTraceEnabled()) {\n+                for (Integer diskId: volumeDeviceKey.keySet()) {\n+                    s_logger.trace(String.format(\"disk to migrate has disk id %d and volumeId %d\", diskId, volumeDeviceKey.get(diskId)));\n+                }\n+            }\n+            if (vmMo.changeDatastore(morDs)) {\n+                // OfflineVmwareMigration: create target specification to include in answer\n+                // Consolidate VM disks after successful VM migration\n+                // In case of a linked clone VM, if VM's disks are not consolidated, further VM operations such as volume snapshot, VM snapshot etc. will result in DB inconsistencies.\n+                if (!vmMo.consolidateVmDisks()) {\n+                    s_logger.warn(\"VM disk consolidation failed after storage migration. Yet proceeding with VM migration.\");\n+                } else {\n+                    s_logger.debug(\"Successfully consolidated disks of VM \" + vmMo.getVmName() + \".\");\n+                }\n+                return createAnswerForCmd(vmMo, poolUuid, cmd, volumeDeviceKey);\n+            } else {\n+                return new Answer(cmd, false, \"failed to changes data store for VM\" + vmMo.getVmName());\n+            }\n+        } catch (Exception e) {\n+            String msg = \"change data store for VM \" + vmMo.getVmName() + \" failed\";\n+            s_logger.error(msg + \": \" + e.getLocalizedMessage());\n+            throw new CloudRuntimeException(msg,e);\n+        }\n+    }\n+\n+    Answer createAnswerForCmd(VirtualMachineMO vmMo, String poolUuid, Command cmd, Map<Integer, Long> volumeDeviceKey) throws Exception {\n+        List<VolumeObjectTO> volumeToList =  new ArrayList<>();\n+        VirtualMachineDiskInfoBuilder diskInfoBuilder = vmMo.getDiskInfoBuilder();\n+        VirtualDisk[] disks = vmMo.getAllDiskDevice();\n+        Answer answer;\n+        if (s_logger.isTraceEnabled()) {\n+            s_logger.trace(String.format(\"creating answer for %s\", cmd.getClass().getSimpleName()));\n+        }\n+        if (cmd instanceof MigrateVolumeCommand) {\n+            if (disks.length == 1) {\n+                String volumePath = vmMo.getVmdkFileBaseName(disks[0]);\n+                return new MigrateVolumeAnswer(cmd, true, null, volumePath);\n+            }\n+            throw new CloudRuntimeException(\"not expecting more then  one disk after migrate volume command\");\n+        } else if (cmd instanceof MigrateVmToPoolCommand) {\n+            for (VirtualDisk disk : disks) {\n+                VolumeObjectTO newVol = new VolumeObjectTO();\n+                String newPath = vmMo.getVmdkFileBaseName(disk);\n+                VirtualMachineDiskInfo diskInfo = diskInfoBuilder.getDiskInfoByBackingFileBaseName(newPath, poolUuid);\n+                newVol.setId(volumeDeviceKey.get(disk.getKey()));\n+                newVol.setPath(newPath);\n+                newVol.setChainInfo(_gson.toJson(diskInfo));\n+                volumeToList.add(newVol);\n+            }\n+            return new MigrateVmToPoolAnswer((MigrateVmToPoolCommand)cmd, volumeToList);\n+        }\n+        return new Answer(cmd, false, null);\n+    }\n+\n+    private Map<Integer, Long> getVolumesFromCommand(VirtualMachineMO vmMo, Command cmd) throws Exception {\n+        Map<Integer, Long> volumeDeviceKey = new HashMap<Integer, Long>();\n+        if (cmd instanceof MigrateVmToPoolCommand) {\n+            MigrateVmToPoolCommand mcmd = (MigrateVmToPoolCommand)cmd;\n+            for (VolumeTO volume : mcmd.getVolumes()) {\n+                addVolumeDiskmapping(vmMo, volumeDeviceKey, volume.getPath(), volume.getId());\n+            }\n+        } else if (cmd instanceof MigrateVolumeCommand) {\n+            MigrateVolumeCommand mcmd = (MigrateVolumeCommand)cmd;\n+            addVolumeDiskmapping(vmMo, volumeDeviceKey, mcmd.getVolumePath(), mcmd.getVolumeId());\n+        }\n+        return volumeDeviceKey;\n+    }\n+\n+    private void addVolumeDiskmapping(VirtualMachineMO vmMo, Map<Integer, Long> volumeDeviceKey, String volumePath, long volumeId) throws Exception {\n+        if (s_logger.isDebugEnabled()) {\n+            s_logger.debug(String.format(\"locating disk for volume (%d) using path %s\", volumeId, volumePath));\n+        }\n+        Pair<VirtualDisk, String> diskInfo = getVirtualDiskInfo(vmMo, volumePath + VMDK_EXTENSION);\n+        String vmdkAbsFile = getAbsoluteVmdkFile(diskInfo.first());\n+        if (vmdkAbsFile != null && !vmdkAbsFile.isEmpty()) {\n+            vmMo.updateAdapterTypeIfRequired(vmdkAbsFile);\n+        }\n+        int diskId = diskInfo.first().getKey();\n+        volumeDeviceKey.put(diskId, volumeId);\n+    }\n+\n+    private ManagedObjectReference getTargetDatastoreMOReference(String destinationPool, VmwareHypervisorHost hyperHost) {\n+        ManagedObjectReference morDs;\n+        try {\n+            if(s_logger.isDebugEnabled()) {\n+                s_logger.debug(String.format(\"finding datastore %s\", destinationPool));\n+            }\n+            morDs = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, destinationPool);\n+        } catch (Exception e) {\n+            String msg = \"exception while finding data store  \" + destinationPool;\n+            s_logger.error(msg);\n+            throw new CloudRuntimeException(msg + \": \" + e.getLocalizedMessage());\n+        }\n+        return morDs;\n+    }\n+\n+    private ManagedObjectReference getDataCenterMOReference(String vmName, VmwareHypervisorHost hyperHost) {\n+        ManagedObjectReference morDc;\n+        try {\n+            morDc = hyperHost.getHyperHostDatacenter();\n+        } catch (Exception e) {\n+            String msg = \"exception while finding VMware datacenter to search for VM \" + vmName;\n+            s_logger.error(msg);\n+            throw new CloudRuntimeException(msg + \": \" + e.getLocalizedMessage());\n+        }\n+        return morDc;\n+    }\n+\n+    private VirtualMachineMO getVirtualMachineMO(String vmName, VmwareHypervisorHost hyperHost) {\n+        VirtualMachineMO vmMo = null;\n+        try {\n+            // find VM through datacenter (VM is not at the target host yet)\n+            vmMo = hyperHost.findVmOnPeerHyperHost(vmName);\n+        } catch (Exception e) {\n+            String msg = \"exception while searching for VM \" + vmName + \" in VMware datacenter\";\n+            s_logger.error(msg);\n+            throw new CloudRuntimeException(msg + \": \" + e.getLocalizedMessage());\n+        }\n+        return vmMo;\n+    }\n+\n     protected Answer execute(MigrateCommand cmd) {\n         if (s_logger.isInfoEnabled()) {\n             s_logger.info(\"Executing resource MigrateCommand: \" + _gson.toJson(cmd));\n@@ -3946,7 +4121,7 @@ protected Answer execute(MigrateWithStorageCommand cmd) {\n                 }\n                 diskLocator = new VirtualMachineRelocateSpecDiskLocator();\n                 diskLocator.setDatastore(morDsAtSource);\n-                Pair<VirtualDisk, String> diskInfo = getVirtualDiskInfo(vmMo, appendFileType(volume.getPath(), \".vmdk\"));\n+                Pair<VirtualDisk, String> diskInfo = getVirtualDiskInfo(vmMo, appendFileType(volume.getPath(), VMDK_EXTENSION));\n                 String vmdkAbsFile = getAbsoluteVmdkFile(diskInfo.first());\n                 if (vmdkAbsFile != null && !vmdkAbsFile.isEmpty()) {\n                     vmMo.updateAdapterTypeIfRequired(vmdkAbsFile);\n@@ -4074,6 +4249,141 @@ protected Answer execute(MigrateWithStorageCommand cmd) {\n         }\n     }\n \n+    private Answer migrateVolume(MigrateVolumeCommand cmd) {\n+        Answer answer = null;\n+        String path = cmd.getVolumePath();\n+\n+        VmwareHypervisorHost hyperHost = getHyperHost(getServiceContext());\n+        VirtualMachineMO vmMo = null;\n+        DatastoreMO dsMo = null;\n+        ManagedObjectReference morSourceDS = null;\n+        String vmdkDataStorePath = null;\n+\n+        String vmName = null;\n+        try {\n+            // OfflineVmwareMigration: we need to refactor the worker vm creation out for use in migration methods as well as here\n+            // OfflineVmwareMigration: this method is 100 lines and needs refactorring anyway\n+            // we need to spawn a worker VM to attach the volume to and move it\n+            vmName = getWorkerName(getServiceContext(), cmd, 0);\n+\n+                // OfflineVmwareMigration: refactor for re-use\n+                // OfflineVmwareMigration: 1. find data(store)\n+            // OfflineVmwareMigration: more robust would be to find the store given the volume as it might have been moved out of band or due to error\n+// example:            DatastoreMO existingVmDsMo = new DatastoreMO(dcMo.getContext(), dcMo.findDatastore(fileInDatastore.getDatastoreName()));\n+\n+            morSourceDS = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, cmd.getSourcePool().getUuid());\n+            dsMo = new DatastoreMO(hyperHost.getContext(), morSourceDS);\n+            s_logger.info(\"Create worker VM \" + vmName);\n+                // OfflineVmwareMigration: 2. create the worker with access to the data(store)\n+            vmMo = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, vmName);\n+            if (vmMo == null) {\n+                // OfflineVmwareMigration: don't throw a general Exception but think of a specific one\n+                throw new CloudRuntimeException(\"Unable to create a worker VM for volume operation\");\n+            }\n+\n+            synchronized (this) {\n+                // OfflineVmwareMigration: 3. attach the disk to the worker\n+                String vmdkFileName = path + VMDK_EXTENSION;\n+                vmdkDataStorePath = VmwareStorageLayoutHelper.getLegacyDatastorePathFromVmdkFileName(dsMo, vmdkFileName);\n+                if (!dsMo.fileExists(vmdkDataStorePath)) {\n+                    if(s_logger.isDebugEnabled()) {\n+                        s_logger.debug(String.format(\"path not found (%s), trying under '%s'\", vmdkFileName, path));\n+                    }\n+                    vmdkDataStorePath = VmwareStorageLayoutHelper.getVmwareDatastorePathFromVmdkFileName(dsMo, path, vmdkFileName);\n+                }\n+                if (!dsMo.fileExists(vmdkDataStorePath)) {\n+                    if(s_logger.isDebugEnabled()) {\n+                        s_logger.debug(String.format(\"path not found (%s), trying under '%s'\", vmdkFileName, vmName));\n+                    }\n+                    vmdkDataStorePath = VmwareStorageLayoutHelper.getVmwareDatastorePathFromVmdkFileName(dsMo, vmName, vmdkFileName);\n+                }\n+                if(s_logger.isDebugEnabled()) {\n+                    s_logger.debug(String.format(\"attaching %s to %s for migration\", vmdkDataStorePath, vmMo.getVmName()));\n+                }\n+                vmMo.attachDisk(new String[] { vmdkDataStorePath }, morSourceDS);\n+            }\n+\n+            // OfflineVmwareMigration: 4. find the (worker-) VM\n+            // find VM through datacenter (VM is not at the target host yet)\n+            vmMo = hyperHost.findVmOnPeerHyperHost(vmName);\n+            if (vmMo == null) {\n+                String msg = \"VM \" + vmName + \" does not exist in VMware datacenter\";\n+                s_logger.error(msg);\n+                throw new Exception(msg);\n+            }\n+\n+            if (s_logger.isTraceEnabled()) {\n+                VirtualDisk[] disks = vmMo.getAllDiskDevice();\n+                String format = \"disk %d is attached as %s\";\n+                for (VirtualDisk disk : disks) {\n+                    s_logger.trace(String.format(format,disk.getKey(),vmMo.getVmdkFileBaseName(disk)));\n+                }\n+            }\n+\n+            // OfflineVmwareMigration: 5. create a relocate spec and perform\n+            Pair<VirtualDisk, String> vdisk = vmMo.getDiskDevice(path);\n+            if (vdisk == null) {\n+                if (s_logger.isTraceEnabled())\n+                    s_logger.trace(\"migrate volume done (failed)\");\n+                throw new CloudRuntimeException(\"No such disk device: \" + path);\n+            }\n+\n+            VirtualDisk disk = vdisk.first();\n+            String vmdkAbsFile = getAbsoluteVmdkFile(disk);\n+            if (vmdkAbsFile != null && !vmdkAbsFile.isEmpty()) {\n+                vmMo.updateAdapterTypeIfRequired(vmdkAbsFile);\n+            }\n+\n+            // OfflineVmwareMigration: this may have to be disected and executed in separate steps\n+            answer = migrateAndAnswer(vmMo, cmd.getTargetPool().getUuid(), hyperHost, cmd);\n+        } catch (Exception e) {\n+            String msg = String.format(\"Migration of volume '%s' failed due to %s\", cmd.getVolumePath(), e.getLocalizedMessage());\n+            s_logger.error(msg, e);\n+            answer = new Answer(cmd, false, msg);\n+        } finally {\n+            try {\n+                // OfflineVmwareMigration: worker *may* have been renamed\n+                vmName = vmMo.getVmName();\n+                morSourceDS = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, cmd.getTargetPool().getUuid());\n+                dsMo = new DatastoreMO(hyperHost.getContext(), morSourceDS);\n+                s_logger.info(\"Dettaching disks before destroying worker VM '\" + vmName + \"' after volume migration\");\n+                VirtualDisk[] disks = vmMo.getAllDiskDevice();\n+                String format = \"disk %d was migrated to %s\";\n+                for (VirtualDisk disk : disks) {\n+                    if (s_logger.isTraceEnabled()) {\n+                        s_logger.trace(String.format(format, disk.getKey(), vmMo.getVmdkFileBaseName(disk)));\n+                    }\n+                    vmdkDataStorePath = VmwareStorageLayoutHelper.getLegacyDatastorePathFromVmdkFileName(dsMo, vmMo.getVmdkFileBaseName(disk) + VMDK_EXTENSION);\n+                    vmMo.detachDisk(vmdkDataStorePath, false);\n+                }\n+                s_logger.info(\"Destroy worker VM '\" + vmName + \"' after volume migration\");\n+                vmMo.destroy();\n+            } catch (Throwable e) {\n+                s_logger.info(\"Failed to destroy worker VM: \" + vmName);\n+            }\n+        }\n+        if (answer instanceof MigrateVolumeAnswer) {\n+            String newPath = ((MigrateVolumeAnswer)answer).getVolumePath();\n+            String vmdkFileName = newPath + VMDK_EXTENSION;\n+            try {\n+                VmwareStorageLayoutHelper.syncVolumeToRootFolder(dsMo.getOwnerDatacenter().first(), dsMo, newPath, vmName);\n+                vmdkDataStorePath = VmwareStorageLayoutHelper.getLegacyDatastorePathFromVmdkFileName(dsMo, vmdkFileName);\n+\n+                if (!dsMo.fileExists(vmdkDataStorePath)) {\n+                    String msg = String.format(\"Migration of volume '%s' failed; file (%s) not found as path '%s'\", cmd.getVolumePath(), vmdkFileName, vmdkDataStorePath);\n+                    s_logger.error(msg);\n+                    answer = new Answer(cmd, false, msg);\n+                }\n+            } catch (Exception e) {\n+                String msg = String.format(\"Migration of volume '%s' failed due to %s\", cmd.getVolumePath(), e.getLocalizedMessage());\n+                s_logger.error(msg, e);\n+                answer = new Answer(cmd, false, msg);\n+            }\n+        }\n+        return answer;\n+    }\n+\n+    // OfflineVmwareMigration: refactor to be able to handle a detached volume\n     private Answer execute(MigrateVolumeCommand cmd) {\n         String volumePath = cmd.getVolumePath();\n         StorageFilerTO poolTo = cmd.getPool();\n@@ -4087,6 +4397,10 @@ private Answer execute(MigrateVolumeCommand cmd) {\n         VirtualMachineMO vmMo = null;\n         VmwareHypervisorHost srcHyperHost = null;\n \n+        // OfflineVmwareMigration: ifhost is null ???\n+        if (org.apache.commons.lang.StringUtils.isBlank(cmd.getAttachedVmName())) {\n+            return migrateVolume(cmd);\n+        }\n         ManagedObjectReference morDs = null;\n         ManagedObjectReference morDc = null;\n         VirtualMachineRelocateSpec relocateSpec = new VirtualMachineRelocateSpec();\n@@ -4107,7 +4421,7 @@ private Answer execute(MigrateVolumeCommand cmd) {\n             if (vmMo == null) {\n                 String msg = \"VM \" + vmName + \" does not exist in VMware datacenter \" + morDc.getValue();\n                 s_logger.error(msg);\n-                throw new Exception(msg);\n+                throw new CloudRuntimeException(msg);\n             }\n             vmName = vmMo.getName();\n             morDs = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(srcHyperHost, tgtDsName);\n@@ -4119,8 +4433,8 @@ private Answer execute(MigrateVolumeCommand cmd) {\n             }\n \n             DatastoreMO targetDsMo = new DatastoreMO(srcHyperHost.getContext(), morDs);\n-            String fullVolumePath = VmwareStorageLayoutHelper.getVmwareDatastorePathFromVmdkFileName(targetDsMo, vmName, volumePath + \".vmdk\");\n-            Pair<VirtualDisk, String> diskInfo = getVirtualDiskInfo(vmMo, appendFileType(volumePath, \".vmdk\"));\n+            String fullVolumePath = VmwareStorageLayoutHelper.getVmwareDatastorePathFromVmdkFileName(targetDsMo, vmName, volumePath + VMDK_EXTENSION);\n+            Pair<VirtualDisk, String> diskInfo = getVirtualDiskInfo(vmMo, appendFileType(volumePath, VMDK_EXTENSION));\n             String vmdkAbsFile = getAbsoluteVmdkFile(diskInfo.first());\n             if (vmdkAbsFile != null && !vmdkAbsFile.isEmpty()) {\n                 vmMo.updateAdapterTypeIfRequired(vmdkAbsFile);",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "sha": "37d27c855bc4c44ff95888b430fded00311990ba",
                "status": "modified"
            },
            {
                "additions": 180,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/plugins/hypervisors/vmware/src/main/java/org/apache/cloudstack/storage/motion/VmwareStorageMotionStrategy.java",
                "changes": 199,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/main/java/org/apache/cloudstack/storage/motion/VmwareStorageMotionStrategy.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 19,
                "filename": "plugins/hypervisors/vmware/src/main/java/org/apache/cloudstack/storage/motion/VmwareStorageMotionStrategy.java",
                "patch": "@@ -20,42 +20,51 @@\n package org.apache.cloudstack.storage.motion;\n \n import java.util.ArrayList;\n+import java.util.Date;\n import java.util.List;\n import java.util.Map;\n \n import javax.inject.Inject;\n \n-import org.apache.cloudstack.engine.subsystem.api.storage.CopyCommandResult;\n-import org.apache.cloudstack.engine.subsystem.api.storage.DataMotionStrategy;\n-import org.apache.cloudstack.engine.subsystem.api.storage.DataObject;\n-import org.apache.cloudstack.engine.subsystem.api.storage.DataStore;\n-import org.apache.cloudstack.engine.subsystem.api.storage.StrategyPriority;\n-import org.apache.cloudstack.engine.subsystem.api.storage.VolumeDataFactory;\n-import org.apache.cloudstack.engine.subsystem.api.storage.VolumeInfo;\n-import org.apache.cloudstack.framework.async.AsyncCompletionCallback;\n-import org.apache.cloudstack.storage.datastore.db.PrimaryDataStoreDao;\n-import org.apache.cloudstack.storage.to.VolumeObjectTO;\n-import org.apache.log4j.Logger;\n-import org.springframework.stereotype.Component;\n-\n import com.cloud.agent.AgentManager;\n import com.cloud.agent.api.Answer;\n import com.cloud.agent.api.MigrateWithStorageAnswer;\n import com.cloud.agent.api.MigrateWithStorageCommand;\n+import com.cloud.agent.api.storage.MigrateVolumeAnswer;\n+import com.cloud.agent.api.storage.MigrateVolumeCommand;\n+import com.cloud.agent.api.to.DataObjectType;\n import com.cloud.agent.api.to.StorageFilerTO;\n import com.cloud.agent.api.to.VirtualMachineTO;\n import com.cloud.agent.api.to.VolumeTO;\n import com.cloud.exception.AgentUnavailableException;\n import com.cloud.exception.OperationTimedoutException;\n import com.cloud.host.Host;\n+import com.cloud.host.HostVO;\n+import com.cloud.host.Status;\n+import com.cloud.host.dao.HostDao;\n import com.cloud.hypervisor.Hypervisor.HypervisorType;\n+import com.cloud.storage.DataStoreRole;\n+import com.cloud.storage.ScopeType;\n import com.cloud.storage.StoragePool;\n+import com.cloud.storage.Volume;\n import com.cloud.storage.VolumeVO;\n import com.cloud.storage.dao.VolumeDao;\n import com.cloud.utils.Pair;\n import com.cloud.utils.exception.CloudRuntimeException;\n import com.cloud.vm.VMInstanceVO;\n import com.cloud.vm.dao.VMInstanceDao;\n+import org.apache.cloudstack.engine.subsystem.api.storage.CopyCommandResult;\n+import org.apache.cloudstack.engine.subsystem.api.storage.DataMotionStrategy;\n+import org.apache.cloudstack.engine.subsystem.api.storage.DataObject;\n+import org.apache.cloudstack.engine.subsystem.api.storage.DataStore;\n+import org.apache.cloudstack.engine.subsystem.api.storage.StrategyPriority;\n+import org.apache.cloudstack.engine.subsystem.api.storage.VolumeDataFactory;\n+import org.apache.cloudstack.engine.subsystem.api.storage.VolumeInfo;\n+import org.apache.cloudstack.framework.async.AsyncCompletionCallback;\n+import org.apache.cloudstack.storage.datastore.db.PrimaryDataStoreDao;\n+import org.apache.cloudstack.storage.to.VolumeObjectTO;\n+import org.apache.log4j.Logger;\n+import org.springframework.stereotype.Component;\n \n @Component\n public class VmwareStorageMotionStrategy implements DataMotionStrategy {\n@@ -70,12 +79,77 @@\n     PrimaryDataStoreDao storagePoolDao;\n     @Inject\n     VMInstanceDao instanceDao;\n+    @Inject\n+    private HostDao hostDao;\n \n     @Override\n     public StrategyPriority canHandle(DataObject srcData, DataObject destData) {\n+        // OfflineVmwareMigration: return StrategyPriority.HYPERVISOR when destData is in a storage pool in the same vmware-cluster and both are volumes\n+        if (isOnVmware(srcData, destData)\n+                && isOnPrimary(srcData, destData)\n+                && isVolumesOnly(srcData, destData)\n+                && isDettached(srcData)\n+                && isIntraCluster(srcData, destData)\n+                && isStoreScopeEqual(srcData, destData)) {\n+            if (s_logger.isDebugEnabled()) {\n+                String msg = String.format(\"%s can handle the request because %d(%s) and %d(%s) share the VMware cluster %s (== %s)\"\n+                        , this.getClass()\n+                        , srcData.getId()\n+                        , srcData.getUuid()\n+                        , destData.getId()\n+                        , destData.getUuid()\n+                        , storagePoolDao.findById(srcData.getDataStore().getId()).getClusterId()\n+                        , storagePoolDao.findById(destData.getDataStore().getId()).getClusterId());\n+                s_logger.debug(msg);\n+            }\n+            return StrategyPriority.HYPERVISOR;\n+        }\n         return StrategyPriority.CANT_HANDLE;\n     }\n \n+    private boolean isDettached(DataObject srcData) {\n+        VolumeVO volume = volDao.findById(srcData.getId());\n+        return volume.getInstanceId() == null;\n+    }\n+\n+    private boolean isVolumesOnly(DataObject srcData, DataObject destData) {\n+        return DataObjectType.VOLUME.equals(srcData.getType())\n+                && DataObjectType.VOLUME.equals(destData.getType());\n+    }\n+\n+    private boolean isOnPrimary(DataObject srcData, DataObject destData) {\n+        return DataStoreRole.Primary.equals(srcData.getDataStore().getRole())\n+                && DataStoreRole.Primary.equals(destData.getDataStore().getRole());\n+    }\n+\n+    private boolean isOnVmware(DataObject srcData, DataObject destData) {\n+        return HypervisorType.VMware.equals(srcData.getTO().getHypervisorType())\n+                && HypervisorType.VMware.equals(destData.getTO().getHypervisorType());\n+    }\n+\n+    private boolean isIntraCluster(DataObject srcData, DataObject destData) {\n+        DataStore srcStore = srcData.getDataStore();\n+        StoragePool srcPool = storagePoolDao.findById(srcStore.getId());\n+        DataStore destStore = destData.getDataStore();\n+        StoragePool destPool = storagePoolDao.findById(destStore.getId());\n+        return srcPool.getClusterId().equals(destPool.getClusterId());\n+    }\n+\n+    /**\n+     * Ensure that the scope of source and destination storage pools match\n+     *\n+     * @param srcData\n+     * @param destData\n+     * @return\n+     */\n+    private boolean isStoreScopeEqual(DataObject srcData, DataObject destData) {\n+        DataStore srcStore = srcData.getDataStore();\n+        DataStore destStore = destData.getDataStore();\n+        String msg = String.format(\"Storage scope of source pool is %s and of destination pool is %s\", srcStore.getScope().toString(), destStore.getScope().toString());\n+        s_logger.debug(msg);\n+        return srcStore.getScope().getScopeType() == (destStore.getScope().getScopeType());\n+    }\n+\n     @Override\n     public StrategyPriority canHandle(Map<VolumeInfo, DataStore> volumeMap, Host srcHost, Host destHost) {\n         if (srcHost.getHypervisorType() == HypervisorType.VMware && destHost.getHypervisorType() == HypervisorType.VMware) {\n@@ -85,9 +159,96 @@ public StrategyPriority canHandle(Map<VolumeInfo, DataStore> volumeMap, Host src\n         return StrategyPriority.CANT_HANDLE;\n     }\n \n+    /**\n+     * the Vmware storageMotion strategy allows to copy to a destination pool but not to a destination host\n+     *\n+     * @param srcData  volume to move\n+     * @param destData volume description as intended after the move\n+     * @param destHost null or else\n+     * @param callback where to report completion or failure to\n+     */\n     @Override\n     public void copyAsync(DataObject srcData, DataObject destData, Host destHost, AsyncCompletionCallback<CopyCommandResult> callback) {\n-        throw new UnsupportedOperationException();\n+        if (destHost != null) {\n+            String format = \"%s cannot target a host in moving an object from {%s}\\n to {%s}\";\n+            String msg = String.format(format\n+                    , this.getClass().getName()\n+                    , srcData.toString()\n+                    , destData.toString()\n+            );\n+            s_logger.error(msg);\n+            throw new CloudRuntimeException(msg);\n+        }\n+        // OfflineVmwareMigration: extract the destination pool from destData and construct a migrateVolume command\n+        if (!isOnPrimary(srcData, destData)) {\n+            // OfflineVmwareMigration: we shouldn't be here as we would have refused in the canHandle call\n+            throw new UnsupportedOperationException();\n+        }\n+        StoragePool sourcePool = (StoragePool) srcData.getDataStore();\n+        StoragePool targetPool = (StoragePool) destData.getDataStore();\n+        MigrateVolumeCommand cmd = new MigrateVolumeCommand(srcData.getId()\n+                , srcData.getTO().getPath()\n+                , sourcePool\n+                , targetPool);\n+        // OfflineVmwareMigration: should be ((StoragePool)srcData.getDataStore()).getHypervisor() but that is NULL, so hardcoding\n+        Answer answer;\n+        ScopeType scopeType = srcData.getDataStore().getScope().getScopeType();\n+        if (ScopeType.CLUSTER == scopeType) {\n+            // Find Volume source cluster and select any Vmware hypervisor host to attach worker VM\n+            Long hostId = findSuitableHostIdForWorkerVmPlacement(sourcePool.getClusterId());\n+            if (hostId == null) {\n+                throw new CloudRuntimeException(\"Offline Migration failed, unable to find suitable host for worker VM placement in cluster: \" + sourcePool.getName());\n+            }\n+            answer = agentMgr.easySend(hostId, cmd);\n+        } else {\n+            answer = agentMgr.sendTo(sourcePool.getDataCenterId(), HypervisorType.VMware, cmd);\n+        }\n+        updateVolumeAfterMigration(answer, srcData, destData);\n+        CopyCommandResult result = new CopyCommandResult(null, answer);\n+        callback.complete(result);\n+    }\n+\n+    /**\n+     * Selects a host from the cluster housing the source storage pool\n+     * Assumption is that Primary Storage is cluster-wide\n+     * <p>\n+     * returns any host ID within the cluster if storage-pool is cluster-wide, and exception is thrown otherwise\n+     *\n+     * @param clusterId\n+     * @return\n+     */\n+    private Long findSuitableHostIdForWorkerVmPlacement(Long clusterId) {\n+        List<HostVO> hostLists = hostDao.findByClusterId(clusterId);\n+        Long hostId = null;\n+        for (HostVO hostVO : hostLists) {\n+            if (hostVO.getHypervisorType().equals(HypervisorType.VMware) && hostVO.getStatus() == Status.Up) {\n+                hostId = hostVO.getId();\n+                break;\n+            }\n+        }\n+        return hostId;\n+    }\n+\n+    private void updateVolumeAfterMigration(Answer answer, DataObject srcData, DataObject destData) {\n+        VolumeVO destinationVO = volDao.findById(destData.getId());\n+        if (!(answer instanceof MigrateVolumeAnswer)) {\n+            // OfflineVmwareMigration: reset states and such\n+            VolumeVO sourceVO = volDao.findById(srcData.getId());\n+            sourceVO.setState(Volume.State.Ready);\n+            volDao.update(sourceVO.getId(), sourceVO);\n+            destinationVO.setState(Volume.State.Expunged);\n+            destinationVO.setRemoved(new Date());\n+            volDao.update(destinationVO.getId(), destinationVO);\n+            throw new CloudRuntimeException(\"unexpected answer from hypervisor agent: \" + answer.getDetails());\n+        }\n+        MigrateVolumeAnswer ans = (MigrateVolumeAnswer) answer;\n+        if (s_logger.isDebugEnabled()) {\n+            String format = \"retrieved '%s' as new path for volume(%d)\";\n+            s_logger.debug(String.format(format, ans.getVolumePath(), destData.getId()));\n+        }\n+        // OfflineVmwareMigration: update the volume with new pool/volume path\n+        destinationVO.setPath(ans.getVolumePath());\n+        volDao.update(destinationVO.getId(), destinationVO);\n     }\n \n     @Override\n@@ -124,7 +285,7 @@ private Answer migrateVmWithVolumesAcrossCluster(VMInstanceVO vm, VirtualMachine\n             for (Map.Entry<VolumeInfo, DataStore> entry : volumeToPool.entrySet()) {\n                 VolumeInfo volume = entry.getKey();\n                 VolumeTO volumeTo = new VolumeTO(volume, storagePoolDao.findById(volume.getPoolId()));\n-                StorageFilerTO filerTo = new StorageFilerTO((StoragePool)entry.getValue());\n+                StorageFilerTO filerTo = new StorageFilerTO((StoragePool) entry.getValue());\n                 volumeToFilerto.add(new Pair<VolumeTO, StorageFilerTO>(volumeTo, filerTo));\n             }\n \n@@ -133,7 +294,7 @@ private Answer migrateVmWithVolumesAcrossCluster(VMInstanceVO vm, VirtualMachine\n             //      Run validations against target!!\n             // 2. Complete the process. Update the volume details.\n             MigrateWithStorageCommand migrateWithStorageCmd = new MigrateWithStorageCommand(to, volumeToFilerto, destHost.getGuid());\n-            MigrateWithStorageAnswer migrateWithStorageAnswer = (MigrateWithStorageAnswer)agentMgr.send(srcHost.getId(), migrateWithStorageCmd);\n+            MigrateWithStorageAnswer migrateWithStorageAnswer = (MigrateWithStorageAnswer) agentMgr.send(srcHost.getId(), migrateWithStorageCmd);\n             if (migrateWithStorageAnswer == null) {\n                 s_logger.error(\"Migration with storage of vm \" + vm + \" to host \" + destHost + \" failed.\");\n                 throw new CloudRuntimeException(\"Error while migrating the vm \" + vm + \" to host \" + destHost);\n@@ -162,12 +323,12 @@ private Answer migrateVmWithVolumesWithinCluster(VMInstanceVO vm, VirtualMachine\n             for (Map.Entry<VolumeInfo, DataStore> entry : volumeToPool.entrySet()) {\n                 VolumeInfo volume = entry.getKey();\n                 VolumeTO volumeTo = new VolumeTO(volume, storagePoolDao.findById(volume.getPoolId()));\n-                StorageFilerTO filerTo = new StorageFilerTO((StoragePool)entry.getValue());\n+                StorageFilerTO filerTo = new StorageFilerTO((StoragePool) entry.getValue());\n                 volumeToFilerto.add(new Pair<VolumeTO, StorageFilerTO>(volumeTo, filerTo));\n             }\n \n             MigrateWithStorageCommand command = new MigrateWithStorageCommand(to, volumeToFilerto, destHost.getGuid());\n-            MigrateWithStorageAnswer answer = (MigrateWithStorageAnswer)agentMgr.send(srcHost.getId(), command);\n+            MigrateWithStorageAnswer answer = (MigrateWithStorageAnswer) agentMgr.send(srcHost.getId(), command);\n             if (answer == null) {\n                 s_logger.error(\"Migration with storage of vm \" + vm + \" failed.\");\n                 throw new CloudRuntimeException(\"Error while migrating the vm \" + vm + \" to host \" + destHost);\n@@ -190,7 +351,7 @@ private void updateVolumesAfterMigration(Map<VolumeInfo, DataStore> volumeToPool\n         for (Map.Entry<VolumeInfo, DataStore> entry : volumeToPool.entrySet()) {\n             boolean updated = false;\n             VolumeInfo volume = entry.getKey();\n-            StoragePool pool = (StoragePool)entry.getValue();\n+            StoragePool pool = (StoragePool) entry.getValue();\n             for (VolumeObjectTO volumeTo : volumeTos) {\n                 if (volume.getId() == volumeTo.getId()) {\n                     VolumeVO volumeVO = volDao.findById(volume.getId());",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/plugins/hypervisors/vmware/src/main/java/org/apache/cloudstack/storage/motion/VmwareStorageMotionStrategy.java",
                "sha": "2463e75c01d3da48cb2a91ea96c391d7b7640f68",
                "status": "modified"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/plugins/hypervisors/vmware/src/test/java/org/apache/cloudstack/storage/motion/VmwareStorageMotionStrategyTest.java",
                "changes": 66,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/test/java/org/apache/cloudstack/storage/motion/VmwareStorageMotionStrategyTest.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 30,
                "filename": "plugins/hypervisors/vmware/src/test/java/org/apache/cloudstack/storage/motion/VmwareStorageMotionStrategyTest.java",
                "patch": "@@ -16,20 +16,36 @@\n // under the License.\n package org.apache.cloudstack.storage.motion;\n \n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-import static org.mockito.Matchers.anyLong;\n-import static org.mockito.Matchers.isA;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-\n import java.io.IOException;\n import java.util.HashMap;\n import java.util.Map;\n \n import javax.inject.Inject;\n import javax.naming.ConfigurationException;\n \n+import com.cloud.agent.AgentManager;\n+import com.cloud.agent.api.MigrateWithStorageAnswer;\n+import com.cloud.agent.api.MigrateWithStorageCommand;\n+import com.cloud.agent.api.to.VirtualMachineTO;\n+import com.cloud.host.Host;\n+import com.cloud.host.dao.HostDao;\n+import com.cloud.hypervisor.Hypervisor.HypervisorType;\n+import com.cloud.storage.dao.VolumeDao;\n+import com.cloud.utils.component.ComponentContext;\n+import com.cloud.vm.VMInstanceVO;\n+import com.cloud.vm.dao.VMInstanceDao;\n+import org.apache.cloudstack.engine.subsystem.api.storage.CopyCommandResult;\n+import org.apache.cloudstack.engine.subsystem.api.storage.DataStore;\n+import org.apache.cloudstack.engine.subsystem.api.storage.StrategyPriority;\n+import org.apache.cloudstack.engine.subsystem.api.storage.VolumeDataFactory;\n+import org.apache.cloudstack.engine.subsystem.api.storage.VolumeInfo;\n+import org.apache.cloudstack.framework.async.AsyncCallFuture;\n+import org.apache.cloudstack.framework.async.AsyncCallbackDispatcher;\n+import org.apache.cloudstack.framework.async.AsyncCompletionCallback;\n+import org.apache.cloudstack.framework.async.AsyncRpcContext;\n+import org.apache.cloudstack.storage.command.CommandResult;\n+import org.apache.cloudstack.storage.datastore.db.PrimaryDataStoreDao;\n+import org.apache.cloudstack.test.utils.SpringUtils;\n import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.Test;\n@@ -47,29 +63,12 @@\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n import org.springframework.test.context.support.AnnotationConfigContextLoader;\n \n-import org.apache.cloudstack.engine.subsystem.api.storage.CopyCommandResult;\n-import org.apache.cloudstack.engine.subsystem.api.storage.DataStore;\n-import org.apache.cloudstack.engine.subsystem.api.storage.StrategyPriority;\n-import org.apache.cloudstack.engine.subsystem.api.storage.VolumeDataFactory;\n-import org.apache.cloudstack.engine.subsystem.api.storage.VolumeInfo;\n-import org.apache.cloudstack.framework.async.AsyncCallFuture;\n-import org.apache.cloudstack.framework.async.AsyncCallbackDispatcher;\n-import org.apache.cloudstack.framework.async.AsyncCompletionCallback;\n-import org.apache.cloudstack.framework.async.AsyncRpcContext;\n-import org.apache.cloudstack.storage.command.CommandResult;\n-import org.apache.cloudstack.storage.datastore.db.PrimaryDataStoreDao;\n-import org.apache.cloudstack.test.utils.SpringUtils;\n-\n-import com.cloud.agent.AgentManager;\n-import com.cloud.agent.api.MigrateWithStorageAnswer;\n-import com.cloud.agent.api.MigrateWithStorageCommand;\n-import com.cloud.agent.api.to.VirtualMachineTO;\n-import com.cloud.host.Host;\n-import com.cloud.hypervisor.Hypervisor.HypervisorType;\n-import com.cloud.storage.dao.VolumeDao;\n-import com.cloud.utils.component.ComponentContext;\n-import com.cloud.vm.VMInstanceVO;\n-import com.cloud.vm.dao.VMInstanceDao;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Matchers.anyLong;\n+import static org.mockito.Matchers.isA;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(loader = AnnotationConfigContextLoader.class)\n@@ -87,6 +86,8 @@\n     PrimaryDataStoreDao storagePoolDao;\n     @Inject\n     VMInstanceDao instanceDao;\n+    @Inject\n+    private HostDao hostDao;\n \n     CopyCommandResult result;\n \n@@ -262,6 +263,11 @@ public AgentManager agentManager() {\n             return Mockito.mock(AgentManager.class);\n         }\n \n+        @Bean\n+        public HostDao hostDao() {\n+            return Mockito.mock(HostDao.class);\n+        }\n+\n         public static class Library implements TypeFilter {\n             @Override\n             public boolean match(MetadataReader mdr, MetadataReaderFactory arg1) throws IOException {",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/plugins/hypervisors/vmware/src/test/java/org/apache/cloudstack/storage/motion/VmwareStorageMotionStrategyTest.java",
                "sha": "4cc3a77baaaf6de8e385c6ff670928447a3998b5",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/api/ApiDispatcher.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/api/ApiDispatcher.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 2,
                "filename": "server/src/main/java/com/cloud/api/ApiDispatcher.java",
                "patch": "@@ -49,6 +49,7 @@\n     private static final Logger s_logger = Logger.getLogger(ApiDispatcher.class.getName());\n \n     Long _createSnapshotQueueSizeLimit;\n+    Long migrateQueueSizeLimit;\n \n     @Inject\n     AsyncJobManager _asyncMgr;\n@@ -79,6 +80,9 @@ public void setCreateSnapshotQueueSizeLimit(final Long snapshotLimit) {\n         _createSnapshotQueueSizeLimit = snapshotLimit;\n     }\n \n+    public void setMigrateQueueSizeLimit(final Long migrateLimit) {\n+        migrateQueueSizeLimit = migrateLimit;\n+    }\n \n     public void dispatchCreateCmd(final BaseAsyncCreateCmd cmd, final Map<String, String> params) throws Exception {\n         asyncCreationDispatchChain.dispatch(new DispatchTask(cmd, params));\n@@ -123,7 +127,9 @@ public void dispatch(final BaseCmd cmd, final Map<String, String> params, final\n             if (asyncCmd.getJob() != null && asyncCmd.getSyncObjId() != null && asyncCmd.getSyncObjType() != null) {\n                 Long queueSizeLimit = null;\n                 if (asyncCmd.getSyncObjType() != null && asyncCmd.getSyncObjType().equalsIgnoreCase(BaseAsyncCmd.snapshotHostSyncObject)) {\n-                    queueSizeLimit = _createSnapshotQueueSizeLimit;\n+                        queueSizeLimit = _createSnapshotQueueSizeLimit;\n+                } else if (asyncCmd.getSyncObjType() != null && asyncCmd.getSyncObjType().equalsIgnoreCase(BaseAsyncCmd.migrationSyncObject)) {\n+                        queueSizeLimit = migrateQueueSizeLimit;\n                 } else {\n                     queueSizeLimit = 1L;\n                 }\n@@ -148,6 +154,6 @@ public void dispatch(final BaseCmd cmd, final Map<String, String> params, final\n         }\n \n         cmd.execute();\n-                            }\n+    }\n \n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/api/ApiDispatcher.java",
                "sha": "11615ea3f54b7601408c447e1b61ad1cfa46ade2",
                "status": "modified"
            },
            {
                "additions": 81,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/api/ApiServer.java",
                "changes": 125,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/api/ApiServer.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 44,
                "filename": "server/src/main/java/com/cloud/api/ApiServer.java",
                "patch": "@@ -19,7 +19,6 @@\n import com.cloud.api.dispatch.DispatchChainFactory;\n import com.cloud.api.dispatch.DispatchTask;\n import com.cloud.api.response.ApiResponseSerializer;\n-import com.cloud.configuration.Config;\n import com.cloud.domain.Domain;\n import com.cloud.domain.DomainVO;\n import com.cloud.domain.dao.DomainDao;\n@@ -35,6 +34,7 @@\n import com.cloud.exception.ResourceAllocationException;\n import com.cloud.exception.ResourceUnavailableException;\n import com.cloud.exception.UnavailableCommandException;\n+import com.cloud.storage.VolumeApiService;\n import com.cloud.user.Account;\n import com.cloud.user.AccountManager;\n import com.cloud.user.DomainManager;\n@@ -44,7 +44,6 @@\n import com.cloud.utils.ConstantTimeComparator;\n import com.cloud.utils.DateUtil;\n import com.cloud.utils.HttpUtils;\n-import com.cloud.utils.NumbersUtil;\n import com.cloud.utils.Pair;\n import com.cloud.utils.ReflectUtil;\n import com.cloud.utils.StringUtils;\n@@ -54,7 +53,6 @@\n import com.cloud.utils.component.PluggableService;\n import com.cloud.utils.concurrency.NamedThreadFactory;\n import com.cloud.utils.db.EntityManager;\n-import com.cloud.utils.db.SearchCriteria;\n import com.cloud.utils.db.TransactionLegacy;\n import com.cloud.utils.db.UUIDManager;\n import com.cloud.utils.exception.CloudRuntimeException;\n@@ -100,8 +98,6 @@\n import org.apache.cloudstack.context.CallContext;\n import org.apache.cloudstack.framework.config.ConfigKey;\n import org.apache.cloudstack.framework.config.Configurable;\n-import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n-import org.apache.cloudstack.framework.config.impl.ConfigurationVO;\n import org.apache.cloudstack.framework.events.EventBus;\n import org.apache.cloudstack.framework.events.EventBusException;\n import org.apache.cloudstack.framework.jobs.AsyncJob;\n@@ -209,8 +205,6 @@\n     @Inject\n     private AsyncJobManager asyncMgr;\n     @Inject\n-    private ConfigurationDao configDao;\n-    @Inject\n     private EntityManager entityMgr;\n     @Inject\n     private APIAuthenticationManager authManager;\n@@ -228,14 +222,60 @@\n     private static ExecutorService s_executor = new ThreadPoolExecutor(10, 150, 60, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(), new NamedThreadFactory(\n             \"ApiServer\"));\n \n-    static final ConfigKey<Boolean> EnableSecureSessionCookie = new ConfigKey<Boolean>(\"Advanced\", Boolean.class, \"enable.secure.session.cookie\", \"false\",\n-            \"Session cookie is marked as secure if this is enabled. Secure cookies only work when HTTPS is used.\", false);\n-\n-    static final ConfigKey<String> JSONcontentType = new ConfigKey<String>(String.class, \"json.content.type\", \"Advanced\", \"application/json; charset=UTF-8\",\n-            \"Http response content type for .js files (default is text/javascript)\", false, ConfigKey.Scope.Global, null);\n     @Inject\n     private MessageBus messageBus;\n \n+    private static final ConfigKey<Integer> IntegrationAPIPort = new ConfigKey<Integer>(\"Advanced\"\n+            , Integer.class\n+            , \"integration.api.port\"\n+            , \"8096\"\n+            , \"Default API port\"\n+            , false\n+            , ConfigKey.Scope.Global);\n+    private static final ConfigKey<Long> ConcurrentSnapshotsThresholdPerHost = new ConfigKey<Long>(\"Advanced\"\n+            , Long.class\n+            , \"concurrent.snapshots.threshold.perhost\"\n+            , null\n+            , \"Limits number of snapshots that can be handled by the host concurrently; default is NULL - unlimited\"\n+            , true // not sure if this is to be dynamic\n+            , ConfigKey.Scope.Global);\n+    private static final ConfigKey<Boolean> EncodeApiResponse = new ConfigKey<Boolean>(\"Advanced\"\n+            , Boolean.class\n+            , \"encode.api.response\"\n+            , \"false\"\n+            , \"Do URL encoding for the api response, false by default\"\n+            , false\n+            , ConfigKey.Scope.Global);\n+    static final ConfigKey<String> JSONcontentType = new ConfigKey<String>( \"Advanced\"\n+            , String.class\n+            , \"json.content.type\"\n+            , \"application/json; charset=UTF-8\"\n+            , \"Http response content type for .js files (default is text/javascript)\"\n+            , false\n+            , ConfigKey.Scope.Global);\n+    static final ConfigKey<Boolean> EnableSecureSessionCookie = new ConfigKey<Boolean>(\"Advanced\"\n+            , Boolean.class\n+            , \"enable.secure.session.cookie\"\n+            , \"false\"\n+            , \"Session cookie is marked as secure if this is enabled. Secure cookies only work when HTTPS is used.\"\n+            , false\n+            , ConfigKey.Scope.Global);\n+    private static final ConfigKey<String> JSONDefaultContentType = new ConfigKey<String> (\"Advanced\"\n+            , String.class\n+            , \"json.content.type\"\n+            , \"application/json; charset=UTF-8\"\n+            , \"Http response content type for JSON\"\n+            , false\n+            , ConfigKey.Scope.Global);\n+\n+    private static final ConfigKey<Boolean> UseEventAccountInfo = new ConfigKey<Boolean>( \"advanced\"\n+            , Boolean.class\n+            , \"event.accountinfo\"\n+            , \"false\"\n+            , \"use account info in event logging\"\n+            , true\n+            , ConfigKey.Scope.Global);\n+\n     @Override\n     public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n         messageBus.subscribe(AsyncJob.Topics.JOB_EVENT_PUBLISH, MessageDispatcher.getDispatcher(this));\n@@ -305,8 +345,7 @@ public void handleAsyncJobPublishEvent(String subject, String senderAddress, Obj\n         eventDescription.put(\"cmdInfo\", job.getCmdInfo());\n         eventDescription.put(\"status\", \"\" + job.getStatus() );\n         // If the event.accountinfo boolean value is set, get the human readable value for the username / domainname\n-        Map<String, String> configs = configDao.getConfiguration(\"management-server\", new HashMap<String, String>());\n-        if (Boolean.valueOf(configs.get(\"event.accountinfo\"))) {\n+        if (UseEventAccountInfo.value()) {\n             DomainVO domain = domainDao.findById(jobOwner.getDomainId());\n             eventDescription.put(\"username\", userJobOwner.getUsername());\n             eventDescription.put(\"accountname\", jobOwner.getAccountName());\n@@ -325,27 +364,20 @@ public void handleAsyncJobPublishEvent(String subject, String senderAddress, Obj\n     @Override\n     public boolean start() {\n         Security.addProvider(new BouncyCastleProvider());\n-        Integer apiPort = null; // api port, null by default\n-        final SearchCriteria<ConfigurationVO> sc = configDao.createSearchCriteria();\n-        sc.addAnd(\"name\", SearchCriteria.Op.EQ, Config.IntegrationAPIPort.key());\n-        final List<ConfigurationVO> values = configDao.search(sc, null);\n-        if ((values != null) && (values.size() > 0)) {\n-            final ConfigurationVO apiPortConfig = values.get(0);\n-            if (apiPortConfig.getValue() != null) {\n-                apiPort = Integer.parseInt(apiPortConfig.getValue());\n-                apiPort = (apiPort <= 0) ? null : apiPort;\n-            }\n+        Integer apiPort = IntegrationAPIPort.value(); // api port, null by default\n+\n+        final Long snapshotLimit = ConcurrentSnapshotsThresholdPerHost.value();\n+        if (snapshotLimit == null || snapshotLimit.longValue() <= 0) {\n+            s_logger.debug(\"Global concurrent snapshot config parameter \" + ConcurrentSnapshotsThresholdPerHost.value() + \" is less or equal 0; defaulting to unlimited\");\n+        } else {\n+            dispatcher.setCreateSnapshotQueueSizeLimit(snapshotLimit);\n         }\n \n-        final Map<String, String> configs = configDao.getConfiguration();\n-        final String strSnapshotLimit = configs.get(Config.ConcurrentSnapshotsThresholdPerHost.key());\n-        if (strSnapshotLimit != null) {\n-            final Long snapshotLimit = NumbersUtil.parseLong(strSnapshotLimit, 1L);\n-            if (snapshotLimit.longValue() <= 0) {\n-                s_logger.debug(\"Global config parameter \" + Config.ConcurrentSnapshotsThresholdPerHost.toString() + \" is less or equal 0; defaulting to unlimited\");\n-            } else {\n-                dispatcher.setCreateSnapshotQueueSizeLimit(snapshotLimit);\n-            }\n+        final Long migrationLimit = VolumeApiService.ConcurrentMigrationsThresholdPerDatastore.value();\n+        if (migrationLimit == null || migrationLimit.longValue() <= 0) {\n+            s_logger.debug(\"Global concurrent migration config parameter \" + VolumeApiService.ConcurrentMigrationsThresholdPerDatastore.value() + \" is less or equal 0; defaulting to unlimited\");\n+        } else {\n+            dispatcher.setMigrateQueueSizeLimit(migrationLimit);\n         }\n \n         final Set<Class<?>> cmdClasses = new HashSet<Class<?>>();\n@@ -372,7 +404,7 @@ public boolean start() {\n \n         }\n \n-        setEncodeApiResponse(Boolean.valueOf(configDao.getValue(Config.EncodeApiResponse.key())));\n+        setEncodeApiResponse(EncodeApiResponse.value());\n \n         if (apiPort != null) {\n             final ListenerThread listenerThread = new ListenerThread(this, apiPort);\n@@ -1200,16 +1232,6 @@ private void writeResponse(final HttpResponse resp, final String responseText, f\n         }\n     }\n \n-    @Override\n-    public String getConfigComponentName() {\n-        return ApiServer.class.getSimpleName();\n-    }\n-\n-    @Override\n-    public ConfigKey<?>[] getConfigKeys() {\n-        return new ConfigKey<?>[] { EnableSecureSessionCookie, JSONcontentType };\n-    }\n-\n     // FIXME: the following two threads are copied from\n     // http://svn.apache.org/repos/asf/httpcomponents/httpcore/trunk/httpcore/src/examples/org/apache/http/examples/ElementalHttpServer.java\n     // we have to cite a license if we are using this code directly, so we need to add the appropriate citation or\n@@ -1413,4 +1435,19 @@ private static void setEncodeApiResponse(final boolean encodeApiResponse) {\n         ApiServer.encodeApiResponse = encodeApiResponse;\n     }\n \n+    @Override\n+    public String getConfigComponentName() {\n+        return ApiServer.class.getSimpleName();\n+    }\n+\n+    @Override\n+    public ConfigKey<?>[] getConfigKeys() {\n+        return new ConfigKey<?>[] {\n+                IntegrationAPIPort,\n+                ConcurrentSnapshotsThresholdPerHost,\n+                EncodeApiResponse,\n+                EnableSecureSessionCookie,\n+                JSONDefaultContentType\n+        };\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/api/ApiServer.java",
                "sha": "a8ab7b095c67a9f0c1f455b73185375668eb41e9",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/configuration/Config.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/configuration/Config.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 10,
                "filename": "server/src/main/java/com/cloud/configuration/Config.java",
                "patch": "@@ -566,7 +566,6 @@\n             \"The interval (in milliseconds) when host stats are retrieved from agents.\",\n             null),\n     HostRetry(\"Advanced\", AgentManager.class, Integer.class, \"host.retry\", \"2\", \"Number of times to retry hosts for creating a volume\", null),\n-    IntegrationAPIPort(\"Advanced\", ManagementServer.class, Integer.class, \"integration.api.port\", null, \"Default API port. To disable set it to 0 or negative.\", null),\n     InvestigateRetryInterval(\n             \"Advanced\",\n             HighAvailabilityManager.class,\n@@ -1439,7 +1438,6 @@\n             \"true\",\n             \"Allow subdomains to use networks dedicated to their parent domain(s)\",\n             null),\n-    EncodeApiResponse(\"Advanced\", ManagementServer.class, Boolean.class, \"encode.api.response\", \"false\", \"Do URL encoding for the api response, false by default\", null),\n     DnsBasicZoneUpdates(\n             \"Advanced\",\n             NetworkOrchestrationService.class,\n@@ -1693,14 +1691,6 @@\n             null),\n     VpcMaxNetworks(\"Advanced\", ManagementServer.class, Integer.class, \"vpc.max.networks\", \"3\", \"Maximum number of networks per vpc\", null),\n     DetailBatchQuerySize(\"Advanced\", ManagementServer.class, Integer.class, \"detail.batch.query.size\", \"2000\", \"Default entity detail batch query size for listing\", null),\n-    ConcurrentSnapshotsThresholdPerHost(\n-            \"Advanced\",\n-            ManagementServer.class,\n-            Long.class,\n-            \"concurrent.snapshots.threshold.perhost\",\n-            null,\n-            \"Limits number of snapshots that can be handled by the host concurrently; default is NULL - unlimited\",\n-            null),\n     NetworkIPv6SearchRetryMax(\n             \"Network\",\n             ManagementServer.class,",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/configuration/Config.java",
                "sha": "eda34e5970478656a65e61e4bdffce459a3e2f31",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/deploy/DeploymentPlanningManagerImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/deploy/DeploymentPlanningManagerImpl.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 1,
                "filename": "server/src/main/java/com/cloud/deploy/DeploymentPlanningManagerImpl.java",
                "patch": "@@ -1342,7 +1342,8 @@ protected boolean hostCanAccessSPool(Host host, StoragePool pool) {\n \n         // There should be atleast the ROOT volume of the VM in usable state\n         if (volumesTobeCreated.isEmpty()) {\n-            throw new CloudRuntimeException(\"Unable to create deployment, no usable volumes found for the VM\");\n+            // OfflineVmwareMigration: find out what is wrong with the id of the vm we try to start\n+            throw new CloudRuntimeException(\"Unable to create deployment, no usable volumes found for the VM: \" + vmProfile.getId());\n         }\n \n         // don't allow to start vm that doesn't have a root volume",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/deploy/DeploymentPlanningManagerImpl.java",
                "sha": "a95f4ef2d694002612e1f1bc3067c366f0f18102",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/hypervisor/HypervisorGuruBase.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/hypervisor/HypervisorGuruBase.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 0,
                "filename": "server/src/main/java/com/cloud/hypervisor/HypervisorGuruBase.java",
                "patch": "@@ -40,6 +40,7 @@\n import com.cloud.service.ServiceOfferingDetailsVO;\n import com.cloud.service.dao.ServiceOfferingDao;\n import com.cloud.service.dao.ServiceOfferingDetailsDao;\n+import com.cloud.storage.StoragePool;\n import com.cloud.utils.Pair;\n import com.cloud.utils.component.AdapterBase;\n import com.cloud.vm.NicProfile;\n@@ -225,4 +226,8 @@ protected VirtualMachineTO toVirtualMachineTO(VirtualMachineProfile vmProfile) {\n         return null;\n     }\n \n+    @Override\n+    public List<Command> finalizeMigrate(VirtualMachine vm, StoragePool destination) {\n+        return null;\n+    }\n }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/hypervisor/HypervisorGuruBase.java",
                "sha": "445997a6d065877ce8313a64d0562272d23201a5",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/server/ManagementServerImpl.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/server/ManagementServerImpl.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 1,
                "filename": "server/src/main/java/com/cloud/server/ManagementServerImpl.java",
                "patch": "@@ -37,6 +37,7 @@\n import javax.inject.Inject;\n import javax.naming.ConfigurationException;\n \n+import com.cloud.storage.ScopeType;\n import org.apache.cloudstack.acl.ControlledEntity;\n import org.apache.cloudstack.affinity.AffinityGroupProcessor;\n import org.apache.cloudstack.affinity.dao.AffinityGroupVMMapDao;\n@@ -1103,6 +1104,32 @@ public boolean deleteEvents(final DeleteEventsCmd cmd) {\n         return new Pair<List<? extends Cluster>, Integer>(result.first(), result.second());\n     }\n \n+    private HypervisorType getHypervisorType(VMInstanceVO vm, StoragePool srcVolumePool, VirtualMachineProfile profile) {\n+        HypervisorType type = null;\n+        if (vm == null) {\n+            StoragePoolVO poolVo = _poolDao.findById(srcVolumePool.getId());\n+            if (ScopeType.CLUSTER.equals(poolVo.getScope())) {\n+                Long clusterId = poolVo.getClusterId();\n+                if (clusterId != null) {\n+                    ClusterVO cluster = _clusterDao.findById(clusterId);\n+                    type = cluster.getHypervisorType();\n+                }\n+            } else if (ScopeType.ZONE.equals(poolVo.getScope())) {\n+                Long zoneId = poolVo.getDataCenterId();\n+                if (zoneId != null) {\n+                    DataCenterVO dc = _dcDao.findById(zoneId);\n+                }\n+            }\n+\n+            if (null == type) {\n+                type = srcVolumePool.getHypervisor();\n+            }\n+        } else {\n+            type = profile.getHypervisorType();\n+        }\n+        return type;\n+    }\n+\n     @Override\n     public Pair<List<? extends Host>, Integer> searchForServers(final ListHostsCmd cmd) {\n \n@@ -1433,10 +1460,12 @@ private boolean hasSuitablePoolsForVolume(final VolumeVO volume, final Host host\n \n         DataCenterDeployment plan = new DataCenterDeployment(volume.getDataCenterId(), srcVolumePool.getPodId(), srcVolumePool.getClusterId(), null, null, null);\n         VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n+        // OfflineVmwareMigration: vm might be null here; deal!\n+        HypervisorType type = getHypervisorType(vm, srcVolumePool, profile);\n \n         DiskOfferingVO diskOffering = _diskOfferingDao.findById(volume.getDiskOfferingId());\n         //This is an override mechanism so we can list the possible local storage pools that a volume in a shared pool might be able to be migrated to\n-        DiskProfile diskProfile = new DiskProfile(volume, diskOffering, profile.getHypervisorType());\n+        DiskProfile diskProfile = new DiskProfile(volume, diskOffering, type);\n         diskProfile.setUseLocalStorage(true);\n \n         for (StoragePoolAllocator allocator : _storagePoolAllocators) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/server/ManagementServerImpl.java",
                "sha": "d54e84fd6d201929a13818d1ecbf7c0d81bd43fb",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/storage/StorageManagerImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/storage/StorageManagerImpl.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 1,
                "filename": "server/src/main/java/com/cloud/storage/StorageManagerImpl.java",
                "patch": "@@ -522,7 +522,12 @@ public boolean configure(String name, Map<String, Object> params) {\n \n     @Override\n     public String getStoragePoolTags(long poolId) {\n-        return com.cloud.utils.StringUtils.listToCsvTags(_storagePoolDao.searchForStoragePoolTags(poolId));\n+        return StringUtils.listToCsvTags(getStoragePoolTagList(poolId));\n+    }\n+\n+    @Override\n+    public List<String> getStoragePoolTagList(long poolId) {\n+        return _storagePoolDao.searchForStoragePoolTags(poolId);\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/storage/StorageManagerImpl.java",
                "sha": "1f704eb8aec0abf05bef86ab868b23c39b02a422",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/storage/VolumeApiServiceImpl.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/storage/VolumeApiServiceImpl.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 5,
                "filename": "server/src/main/java/com/cloud/storage/VolumeApiServiceImpl.java",
                "patch": "@@ -56,6 +56,7 @@\n import org.apache.cloudstack.engine.subsystem.api.storage.VolumeService.VolumeApiResult;\n import org.apache.cloudstack.framework.async.AsyncCallFuture;\n import org.apache.cloudstack.framework.config.ConfigKey;\n+import org.apache.cloudstack.framework.config.Configurable;\n import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n import org.apache.cloudstack.framework.jobs.AsyncJob;\n import org.apache.cloudstack.framework.jobs.AsyncJobExecutionContext;\n@@ -178,7 +179,7 @@\n import com.google.gson.GsonBuilder;\n import com.google.gson.JsonParseException;\n \n-public class VolumeApiServiceImpl extends ManagerBase implements VolumeApiService, VmWorkJobHandler {\n+public class VolumeApiServiceImpl extends ManagerBase implements VolumeApiService, VmWorkJobHandler, Configurable {\n     private final static Logger s_logger = Logger.getLogger(VolumeApiServiceImpl.class);\n     public static final String VM_WORK_JOB_HANDLER = VolumeApiServiceImpl.class.getSimpleName();\n \n@@ -2028,10 +2029,12 @@ public Volume migrateVolume(MigrateVolumeCmd cmd) {\n         }\n \n         // Check that Vm to which this volume is attached does not have VM Snapshots\n+        // OfflineVmwareMigration: considder if this is needed and desirable\n         if (vm != null && _vmSnapshotDao.findByVm(vm.getId()).size() > 0) {\n             throw new InvalidParameterValueException(\"Volume cannot be migrated, please remove all VM snapshots for VM to which this volume is attached\");\n         }\n \n+        // OfflineVmwareMigration: extract this block as method and check if it is subject to regression\n         if (vm != null && vm.getState() == State.Running) {\n             // Check if the VM is GPU enabled.\n             if (_serviceOfferingDetailsDao.findDetail(vm.getServiceOfferingId(), GPU.Keys.pciDevice.toString()) != null) {\n@@ -2073,6 +2076,16 @@ public Volume migrateVolume(MigrateVolumeCmd cmd) {\n             throw new CloudRuntimeException(\"Storage pool \" + destPool.getName() + \" does not have enough space to migrate volume \" + vol.getName());\n         }\n \n+        // OfflineVmwareMigration: check storage tags on disk(offering)s in comparison to destination storage pool\n+        // OfflineVmwareMigration: if no match return a proper error now\n+        DiskOfferingVO diskOffering = _diskOfferingDao.findById(vol.getDiskOfferingId());\n+        if(diskOffering.equals(null)) {\n+            throw new CloudRuntimeException(\"volume '\" + vol.getUuid() +\"', has no diskoffering. Migration target cannot be checked.\");\n+        }\n+        if(! doesTargetStorageSupportDiskOffering(destPool, diskOffering)) {\n+            throw new CloudRuntimeException(\"Migration target has no matching tags for volume '\" +vol.getName() + \"(\" + vol.getUuid() + \")'\");\n+        }\n+\n         if (liveMigrateVolume && destPool.getClusterId() != null && srcClusterId != null) {\n             if (!srcClusterId.equals(destPool.getClusterId())) {\n                 throw new InvalidParameterValueException(\"Cannot migrate a volume of a virtual machine to a storage pool in a different cluster\");\n@@ -2191,7 +2204,7 @@ protected void validateConditionsToReplaceDiskOfferingOfVolume(VolumeVO volume,\n         if ((destPool.isShared() && newDiskOffering.isUseLocalStorage()) || destPool.isLocal() && newDiskOffering.isShared()) {\n             throw new InvalidParameterValueException(\"You cannot move the volume to a shared storage and assing a disk offering for local storage and vice versa.\");\n         }\n-        if (!doesTargetStorageSupportNewDiskOffering(destPool, newDiskOffering)) {\n+        if (!doesTargetStorageSupportDiskOffering(destPool, newDiskOffering)) {\n             throw new InvalidParameterValueException(String.format(\"Target Storage [id=%s] tags [%s] does not match new disk offering [id=%s] tags [%s].\", destPool.getUuid(),\n                     getStoragePoolTags(destPool), newDiskOffering.getUuid(), newDiskOffering.getTags()));\n         }\n@@ -2236,9 +2249,9 @@ protected void validateConditionsToReplaceDiskOfferingOfVolume(VolumeVO volume,\n      *      </body>\n      *   </table>\n      */\n-    protected boolean doesTargetStorageSupportNewDiskOffering(StoragePool destPool, DiskOfferingVO newDiskOffering) {\n-        String newDiskOfferingTags = newDiskOffering.getTags();\n-        return doesTargetStorageSupportDiskOffering(destPool, newDiskOfferingTags);\n+    protected boolean doesTargetStorageSupportDiskOffering(StoragePool destPool, DiskOfferingVO diskOffering) {\n+        String targetStoreTags = diskOffering.getTags();\n+        return doesTargetStorageSupportDiskOffering(destPool, targetStoreTags);\n     }\n \n     @Override\n@@ -3350,4 +3363,13 @@ private VmWorkJobVO createPlaceHolderWork(long instanceId) {\n         return workJob;\n     }\n \n+    @Override\n+    public String getConfigComponentName() {\n+        return VolumeApiService.class.getSimpleName();\n+    }\n+\n+    @Override\n+    public ConfigKey<?>[] getConfigKeys() {\n+        return new ConfigKey<?>[] {ConcurrentMigrationsThresholdPerDatastore};\n+    }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/storage/VolumeApiServiceImpl.java",
                "sha": "23b56e98da389ad1e9beb7e87976f0c2649574a3",
                "status": "modified"
            },
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/vm/UserVmManagerImpl.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/vm/UserVmManagerImpl.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 8,
                "filename": "server/src/main/java/com/cloud/vm/UserVmManagerImpl.java",
                "patch": "@@ -5065,19 +5065,33 @@ public VirtualMachine vmStorageMigration(Long vmId, StoragePool destPool) {\n         }\n \n         if (vm.getType() != VirtualMachine.Type.User) {\n+            // OffLineVmwareMigration: *WHY* ?\n             throw new InvalidParameterValueException(\"can only do storage migration on user vm\");\n         }\n \n         List<VolumeVO> vols = _volsDao.findByInstance(vm.getId());\n         if (vols.size() > 1) {\n-            throw new InvalidParameterValueException(\"Data disks attached to the vm, can not migrate. Need to detach data disks first\");\n+            // OffLineVmwareMigration: data disks are not permitted, here!\n+            if (vols.size() > 1 &&\n+                    // OffLineVmwareMigration: allow multiple disks for vmware\n+                    !HypervisorType.VMware.equals(vm.getHypervisorType())) {\n+                throw new InvalidParameterValueException(\"Data disks attached to the vm, can not migrate. Need to detach data disks first\");\n+            }\n         }\n \n         // Check that Vm does not have VM Snapshots\n         if (_vmSnapshotDao.findByVm(vmId).size() > 0) {\n             throw new InvalidParameterValueException(\"VM's disk cannot be migrated, please remove all the VM Snapshots for this VM\");\n         }\n \n+        checkDestinationHypervisorType(destPool, vm);\n+\n+        _itMgr.storageMigration(vm.getUuid(), destPool);\n+        return _vmDao.findById(vm.getId());\n+\n+    }\n+\n+    private void checkDestinationHypervisorType(StoragePool destPool, VMInstanceVO vm) {\n         HypervisorType destHypervisorType = destPool.getHypervisor();\n         if (destHypervisorType == null) {\n             destHypervisorType = _clusterDao.findById(\n@@ -5087,8 +5101,6 @@ public VirtualMachine vmStorageMigration(Long vmId, StoragePool destPool) {\n         if (vm.getHypervisorType() != destHypervisorType && destHypervisorType != HypervisorType.Any) {\n             throw new InvalidParameterValueException(\"hypervisor is not compatible: dest: \" + destHypervisorType.toString() + \", vm: \" + vm.getHypervisorType().toString());\n         }\n-        _itMgr.storageMigration(vm.getUuid(), destPool);\n-        return _vmDao.findById(vm.getId());\n \n     }\n \n@@ -5144,12 +5156,9 @@ public VirtualMachine migrateVirtualMachine(Long vmId, Host destinationHost) thr\n             throw new InvalidParameterValueException(\"Live Migration of GPU enabled VM is not supported\");\n         }\n \n-        if (!vm.getHypervisorType().equals(HypervisorType.XenServer) && !vm.getHypervisorType().equals(HypervisorType.VMware) && !vm.getHypervisorType().equals(HypervisorType.KVM)\n-                && !vm.getHypervisorType().equals(HypervisorType.Ovm) && !vm.getHypervisorType().equals(HypervisorType.Hyperv)\n-                && !vm.getHypervisorType().equals(HypervisorType.LXC) && !vm.getHypervisorType().equals(HypervisorType.Simulator)\n-                && !vm.getHypervisorType().equals(HypervisorType.Ovm3)) {\n+        if (!isOnSupportedHypevisorForMigration(vm)) {\n             if (s_logger.isDebugEnabled()) {\n-                s_logger.debug(vm + \" is not XenServer/VMware/KVM/Ovm/Hyperv, cannot migrate this VM.\");\n+                s_logger.debug(vm + \" is not XenServer/VMware/KVM/Ovm/Hyperv, cannot migrate this VM form hypervisor type \" + vm.getHypervisorType());\n             }\n             throw new InvalidParameterValueException(\"Unsupported Hypervisor Type for VM migration, we support XenServer/VMware/KVM/Ovm/Hyperv/Ovm3 only\");\n         }\n@@ -5227,6 +5236,17 @@ public VirtualMachine migrateVirtualMachine(Long vmId, Host destinationHost) thr\n         }\n     }\n \n+    private boolean isOnSupportedHypevisorForMigration(VMInstanceVO vm) {\n+        return (vm.getHypervisorType().equals(HypervisorType.XenServer) ||\n+                vm.getHypervisorType().equals(HypervisorType.VMware) ||\n+                vm.getHypervisorType().equals(HypervisorType.KVM) ||\n+                vm.getHypervisorType().equals(HypervisorType.Ovm) ||\n+                vm.getHypervisorType().equals(HypervisorType.Hyperv) ||\n+                vm.getHypervisorType().equals(HypervisorType.LXC) ||\n+                vm.getHypervisorType().equals(HypervisorType.Simulator) ||\n+                vm.getHypervisorType().equals(HypervisorType.Ovm3));\n+    }\n+\n     private boolean checkIfHostIsDedicated(HostVO host) {\n         long hostId = host.getId();\n         DedicatedResourceVO dedicatedHost = _dedicatedDao.findByHostId(hostId);\n@@ -5469,7 +5489,9 @@ public VirtualMachine migrateVirtualMachineWithVolume(Long vmId, Host destinatio\n             throw new InvalidParameterValueException(\"Unable to find the vm by id \" + vmId);\n         }\n \n+        // OfflineVmwareMigration: this would be it ;) if multiple paths exist: unify\n         if (vm.getState() != State.Running) {\n+            // OfflineVmwareMigration: and not vmware\n             if (s_logger.isDebugEnabled()) {\n                 s_logger.debug(\"VM is not Running, unable to migrate the vm \" + vm);\n             }\n@@ -5482,6 +5504,7 @@ public VirtualMachine migrateVirtualMachineWithVolume(Long vmId, Host destinatio\n             throw new InvalidParameterValueException(\"Live Migration of GPU enabled VM is not supported\");\n         }\n \n+        // OfflineVmwareMigration: this condition is to complicated. (already a method somewhere)\n         if (!vm.getHypervisorType().equals(HypervisorType.XenServer) && !vm.getHypervisorType().equals(HypervisorType.VMware) && !vm.getHypervisorType().equals(HypervisorType.KVM)\n                 && !vm.getHypervisorType().equals(HypervisorType.Ovm) && !vm.getHypervisorType().equals(HypervisorType.Hyperv)\n                 && !vm.getHypervisorType().equals(HypervisorType.Simulator)) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/main/java/com/cloud/vm/UserVmManagerImpl.java",
                "sha": "68b45e1af7c3b5c442bc0dc09dec1aeb5256a58d",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/test/java/com/cloud/storage/VolumeApiServiceImplTest.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/test/java/com/cloud/storage/VolumeApiServiceImplTest.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 7,
                "filename": "server/src/test/java/com/cloud/storage/VolumeApiServiceImplTest.java",
                "patch": "@@ -1004,7 +1004,7 @@ public void doesTargetStorageSupportDiskOfferingTestDiskOfferingMoreTagsThanStor\n         StoragePool storagePoolMock = Mockito.mock(StoragePool.class);\n         Mockito.doReturn(\"A\").when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n \n-        boolean result = volumeApiServiceImpl.doesTargetStorageSupportNewDiskOffering(storagePoolMock, diskOfferingVoMock);\n+        boolean result = volumeApiServiceImpl.doesTargetStorageSupportDiskOffering(storagePoolMock, diskOfferingVoMock);\n \n         Assert.assertFalse(result);\n     }\n@@ -1017,7 +1017,7 @@ public void doesTargetStorageSupportDiskOfferingTestDiskOfferingTagsIsSubSetOfSt\n         StoragePool storagePoolMock = Mockito.mock(StoragePool.class);\n         Mockito.doReturn(\"A,B,C,D,X,Y\").when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n \n-        boolean result = volumeApiServiceImpl.doesTargetStorageSupportNewDiskOffering(storagePoolMock, diskOfferingVoMock);\n+        boolean result = volumeApiServiceImpl.doesTargetStorageSupportDiskOffering(storagePoolMock, diskOfferingVoMock);\n \n         Assert.assertTrue(result);\n     }\n@@ -1030,7 +1030,7 @@ public void doesTargetStorageSupportDiskOfferingTestDiskOfferingTagsEmptyAndStor\n         StoragePool storagePoolMock = Mockito.mock(StoragePool.class);\n         Mockito.doReturn(\"A,B,C,D,X,Y\").when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n \n-        boolean result = volumeApiServiceImpl.doesTargetStorageSupportNewDiskOffering(storagePoolMock, diskOfferingVoMock);\n+        boolean result = volumeApiServiceImpl.doesTargetStorageSupportDiskOffering(storagePoolMock, diskOfferingVoMock);\n \n         Assert.assertTrue(result);\n     }\n@@ -1043,7 +1043,7 @@ public void doesTargetStorageSupportDiskOfferingTestDiskOfferingTagsNotEmptyAndS\n         StoragePool storagePoolMock = Mockito.mock(StoragePool.class);\n         Mockito.doReturn(\"\").when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n \n-        boolean result = volumeApiServiceImpl.doesTargetStorageSupportNewDiskOffering(storagePoolMock, diskOfferingVoMock);\n+        boolean result = volumeApiServiceImpl.doesTargetStorageSupportDiskOffering(storagePoolMock, diskOfferingVoMock);\n \n         Assert.assertFalse(result);\n     }\n@@ -1056,7 +1056,7 @@ public void doesTargetStorageSupportDiskOfferingTestDiskOfferingTagsEmptyAndStor\n         StoragePool storagePoolMock = Mockito.mock(StoragePool.class);\n         Mockito.doReturn(\"\").when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n \n-        boolean result = volumeApiServiceImpl.doesTargetStorageSupportNewDiskOffering(storagePoolMock, diskOfferingVoMock);\n+        boolean result = volumeApiServiceImpl.doesTargetStorageSupportDiskOffering(storagePoolMock, diskOfferingVoMock);\n \n         Assert.assertTrue(result);\n     }\n@@ -1069,7 +1069,7 @@ public void doesTargetStorageSupportDiskOfferingTestDiskOfferingTagsDifferentFro\n         StoragePool storagePoolMock = Mockito.mock(StoragePool.class);\n         Mockito.doReturn(\"C,D\").when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n \n-        boolean result = volumeApiServiceImpl.doesTargetStorageSupportNewDiskOffering(storagePoolMock, diskOfferingVoMock);\n+        boolean result = volumeApiServiceImpl.doesTargetStorageSupportDiskOffering(storagePoolMock, diskOfferingVoMock);\n \n         Assert.assertFalse(result);\n     }\n@@ -1082,7 +1082,7 @@ public void doesTargetStorageSupportDiskOfferingTestDiskOfferingTagsEqualsStorag\n         StoragePool storagePoolMock = Mockito.mock(StoragePool.class);\n         Mockito.doReturn(\"A\").when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n \n-        boolean result = volumeApiServiceImpl.doesTargetStorageSupportNewDiskOffering(storagePoolMock, diskOfferingVoMock);\n+        boolean result = volumeApiServiceImpl.doesTargetStorageSupportDiskOffering(storagePoolMock, diskOfferingVoMock);\n \n         Assert.assertTrue(result);\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/server/src/test/java/com/cloud/storage/VolumeApiServiceImplTest.java",
                "sha": "693b437079ba479f47d2d14ed4e2611ffdd883c0",
                "status": "modified"
            },
            {
                "additions": 177,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/test/integration/smoke/test_primary_storage.py",
                "changes": 363,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/test/integration/smoke/test_primary_storage.py?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 186,
                "filename": "test/integration/smoke/test_primary_storage.py",
                "patch": "@@ -16,21 +16,19 @@\n # under the License.\n \"\"\" BVT tests for Primary Storage\n \"\"\"\n-#Import Local Modules\n-import marvin\n+\n+# Import System modules\n+# Import Local Modules\n from marvin.cloudstackTestCase import *\n-from marvin.cloudstackAPI import *\n-from marvin.lib.utils import *\n from marvin.lib.base import *\n from marvin.lib.common import *\n-from nose.plugins.attrib import attr\n-import logging\n from marvin.lib.decoratorGenerators import skipTestIf\n+from marvin.lib.utils import *\n+from nose.plugins.attrib import attr\n \n-#Import System modules\n-import time\n _multiprocess_shared_ = True\n \n+\n class TestPrimaryStorageServices(cloudstackTestCase):\n \n     def setUp(self):\n@@ -49,54 +47,51 @@ def setUp(self):\n \n     def tearDown(self):\n         try:\n-            #Clean up, terminate the created templates\n+            # Clean up, terminate the created templates\n             cleanup_resources(self.apiclient, self.cleanup)\n \n         except Exception as e:\n             raise Exception(\"Warning: Exception during cleanup : %s\" % e)\n         return\n \n-    @attr(tags = [\"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n+    @attr(tags=[\"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n     def test_01_primary_storage_nfs(self):\n         \"\"\"Test primary storage pools - XEN, KVM, VMWare. Not Supported for hyperv\n         \"\"\"\n \n         if self.hypervisor.lower() in [\"hyperv\"]:\n             raise self.skipTest(\"NFS primary storage not supported for Hyper-V\")\n \n-\n         # Validate the following:\n         # 1. List Clusters\n         # 2. verify that the cluster is in 'Enabled' allocation state\n         # 3. verify that the host is added successfully and\n         #    in Up state with listHosts api response\n \n-        #Create NFS storage pools with on XEN/KVM/VMWare clusters\n-\n+        # Create NFS storage pools with on XEN/KVM/VMWare clusters\n \n         clusters = list_clusters(\n             self.apiclient,\n             zoneid=self.zone.id\n         )\n-        assert isinstance(clusters,list) and len(clusters)>0\n+        assert isinstance(clusters, list) and len(clusters) > 0\n         for cluster in clusters:\n-\n-            #Host should be present before adding primary storage\n+            # Host should be present before adding primary storage\n             list_hosts_response = list_hosts(\n-                                             self.apiclient,\n-                                             clusterid=cluster.id\n-                                             )\n+                self.apiclient,\n+                clusterid=cluster.id\n+            )\n             self.assertEqual(\n-                            isinstance(list_hosts_response, list),\n-                            True,\n-                            \"Check list response returns a valid list\"\n-                        )\n+                isinstance(list_hosts_response, list),\n+                True,\n+                \"Check list response returns a valid list\"\n+            )\n \n             self.assertNotEqual(\n-                        len(list_hosts_response),\n-                        0,\n-                        \"Check list Hosts in the cluster: \" + cluster.name\n-                        )\n+                len(list_hosts_response),\n+                0,\n+                \"Check list Hosts in the cluster: \" + cluster.name\n+            )\n \n             storage = StoragePool.create(self.apiclient,\n                                          self.services[\"nfs\"],\n@@ -112,53 +107,52 @@ def test_01_primary_storage_nfs(self):\n                 storage.state,\n                 'Up',\n                 \"Check primary storage state \"\n-                )\n+            )\n \n             self.assertEqual(\n                 storage.type,\n                 'NetworkFilesystem',\n                 \"Check storage pool type \"\n-                )\n+            )\n \n-            #Verify List Storage pool Response has newly added storage pool\n+            # Verify List Storage pool Response has newly added storage pool\n             storage_pools_response = list_storage_pools(\n-                                                        self.apiclient,\n-                                                        id=storage.id,\n-                                                        )\n+                self.apiclient,\n+                id=storage.id,\n+            )\n             self.assertEqual(\n-                            isinstance(storage_pools_response, list),\n-                            True,\n-                            \"Check list response returns a valid list\"\n-                        )\n+                isinstance(storage_pools_response, list),\n+                True,\n+                \"Check list response returns a valid list\"\n+            )\n             self.assertNotEqual(\n-                            len(storage_pools_response),\n-                            0,\n-                            \"Check list Hosts response\"\n-                        )\n+                len(storage_pools_response),\n+                0,\n+                \"Check list Hosts response\"\n+            )\n \n             storage_response = storage_pools_response[0]\n             self.assertEqual(\n-                    storage_response.id,\n-                    storage.id,\n-                    \"Check storage pool ID\"\n-                    )\n+                storage_response.id,\n+                storage.id,\n+                \"Check storage pool ID\"\n+            )\n             self.assertEqual(\n-                    storage.type,\n-                    storage_response.type,\n-                    \"Check storage pool type \"\n-                )\n+                storage.type,\n+                storage_response.type,\n+                \"Check storage pool type \"\n+            )\n             # Call cleanup for reusing primary storage\n             cleanup_resources(self.apiclient, self.cleanup)\n             self.cleanup = []\n             return\n \n-\n-    @attr(tags = [\"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"true\")\n+    @attr(tags=[\"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"true\")\n     def test_01_primary_storage_iscsi(self):\n         \"\"\"Test primary storage pools - XEN. Not Supported for kvm,hyperv,vmware\n         \"\"\"\n \n-        if self.hypervisor.lower() in [\"kvm\",\"hyperv\", \"vmware\", \"lxc\"]:\n+        if self.hypervisor.lower() in [\"kvm\", \"hyperv\", \"vmware\", \"lxc\"]:\n             raise self.skipTest(\"iscsi primary storage not supported on kvm, VMWare, Hyper-V, or LXC\")\n \n         if not self.services[\"configurableData\"][\"iscsi\"][\"url\"]:\n@@ -175,26 +169,24 @@ def test_01_primary_storage_iscsi(self):\n             self.apiclient,\n             zoneid=self.zone.id\n         )\n-        assert isinstance(clusters,list) and len(clusters)>0\n+        assert isinstance(clusters, list) and len(clusters) > 0\n         for cluster in clusters:\n-\n-            #Host should be present before adding primary storage\n+            # Host should be present before adding primary storage\n             list_hosts_response = list_hosts(\n-                                             self.apiclient,\n-                                             clusterid=cluster.id\n-                                             )\n+                self.apiclient,\n+                clusterid=cluster.id\n+            )\n             self.assertEqual(\n-                            isinstance(list_hosts_response, list),\n-                            True,\n-                            \"Check list response returns a valid list\"\n-                        )\n+                isinstance(list_hosts_response, list),\n+                True,\n+                \"Check list response returns a valid list\"\n+            )\n \n             self.assertNotEqual(\n-                        len(list_hosts_response),\n-                        0,\n-                        \"Check list Hosts in the cluster: \" + cluster.name\n-                        )\n-\n+                len(list_hosts_response),\n+                0,\n+                \"Check list Hosts in the cluster: \" + cluster.name\n+            )\n \n             storage = StoragePool.create(self.apiclient,\n                                          self.services[\"configurableData\"][\"iscsi\"],\n@@ -210,99 +202,97 @@ def test_01_primary_storage_iscsi(self):\n                 storage.state,\n                 'Up',\n                 \"Check primary storage state \"\n-                )\n+            )\n \n             self.assertEqual(\n                 storage.type,\n                 'IscsiLUN',\n                 \"Check storage pool type \"\n-                )\n+            )\n \n-            #Verify List Storage pool Response has newly added storage pool\n+            # Verify List Storage pool Response has newly added storage pool\n             storage_pools_response = list_storage_pools(\n-                                                        self.apiclient,\n-                                                        id=storage.id,\n-                                                        )\n+                self.apiclient,\n+                id=storage.id,\n+            )\n             self.assertEqual(\n-                            isinstance(storage_pools_response, list),\n-                            True,\n-                            \"Check list response returns a valid list\"\n-                        )\n+                isinstance(storage_pools_response, list),\n+                True,\n+                \"Check list response returns a valid list\"\n+            )\n             self.assertNotEqual(\n-                            len(storage_pools_response),\n-                            0,\n-                            \"Check list Hosts response\"\n-                        )\n+                len(storage_pools_response),\n+                0,\n+                \"Check list Hosts response\"\n+            )\n \n             storage_response = storage_pools_response[0]\n             self.assertEqual(\n-                    storage_response.id,\n-                    storage.id,\n-                    \"Check storage pool ID\"\n-                    )\n+                storage_response.id,\n+                storage.id,\n+                \"Check storage pool ID\"\n+            )\n             self.assertEqual(\n-                    storage.type,\n-                    storage_response.type,\n-                    \"Check storage pool type \"\n-                )\n+                storage.type,\n+                storage_response.type,\n+                \"Check storage pool type \"\n+            )\n             # Call cleanup for reusing primary storage\n             cleanup_resources(self.apiclient, self.cleanup)\n             self.cleanup = []\n \n         return\n \n-    @attr(tags = [\"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n+    @attr(tags=[\"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n     def test_01_add_primary_storage_disabled_host(self):\n         \"\"\"Test add primary storage pool with disabled host\n         \"\"\"\n \n-        #Disable a host\n+        # Disable a host\n         clusters = list_clusters(\n             self.apiclient,\n             zoneid=self.zone.id\n         )\n-        assert isinstance(clusters,list) and len(clusters)>0\n+        assert isinstance(clusters, list) and len(clusters) > 0\n         for cluster in clusters:\n \n             list_hosts_response = list_hosts(\n                 self.apiclient,\n                 clusterid=cluster.id,\n                 type=\"Routing\"\n             )\n-            assert isinstance(list_hosts_response,list)\n+            assert isinstance(list_hosts_response, list)\n             if len(list_hosts_response) < 2:\n                 continue\n             selected_cluster = cluster\n             selected_host = list_hosts_response[0]\n             Host.update(self.apiclient, id=selected_host.id, allocationstate=\"Disable\")\n \n-\n-            #create a pool\n+            # create a pool\n             storage_pool_2 = StoragePool.create(\n                 self.apiclient,\n                 self.services[\"nfs2\"],\n                 clusterid=selected_cluster.id,\n                 zoneid=self.zone.id,\n                 podid=self.pod.id\n             )\n-            #self.cleanup.append(storage_pool_2)\n+            # self.cleanup.append(storage_pool_2)\n \n-            #Enable host and disable others\n+            # Enable host and disable others\n             Host.update(self.apiclient, id=selected_host.id, allocationstate=\"Enable\")\n-            for host in list_hosts_response :\n-                if(host.id == selected_host.id) :\n+            for host in list_hosts_response:\n+                if (host.id == selected_host.id):\n                     continue\n                 Host.update(self.apiclient, id=host.id, allocationstate=\"Disable\")\n \n-\n-            #put other pools in maintenance\n-            storage_pool_list = StoragePool.list(self.apiclient, zoneid = self.zone.id)\n-            for pool in storage_pool_list :\n-                if(pool.id == storage_pool_2.id) :\n+            # put other pools in maintenance\n+            storage_pool_list = StoragePool.list(self.apiclient, zoneid=self.zone.id)\n+            for pool in storage_pool_list:\n+                if (pool.id == storage_pool_2.id):\n                     continue\n-                StoragePool.update(self.apiclient,id=pool.id, enabled=False)\n+                StoragePool.update(self.apiclient, id=pool.id, enabled=False)\n \n-            #deployvm\n+            # deployvm\n             try:\n                 # Create Account\n                 account = Account.create(\n@@ -329,20 +319,20 @@ def test_01_add_primary_storage_disabled_host(self):\n                 self.cleanup.append(self.virtual_machine)\n                 self.cleanup.append(account)\n             finally:\n-                #cancel maintenance\n-                for pool in storage_pool_list :\n-                    if(pool.id == storage_pool_2.id) :\n+                # cancel maintenance\n+                for pool in storage_pool_list:\n+                    if (pool.id == storage_pool_2.id):\n                         continue\n-                    StoragePool.update(self.apiclient,id=pool.id, enabled=True)\n-                #Enable all hosts\n-                for host in list_hosts_response :\n-                    if(host.id == selected_host.id) :\n+                    StoragePool.update(self.apiclient, id=pool.id, enabled=True)\n+                # Enable all hosts\n+                for host in list_hosts_response:\n+                    if (host.id == selected_host.id):\n                         continue\n                     Host.update(self.apiclient, id=host.id, allocationstate=\"Enable\")\n \n                 cleanup_resources(self.apiclient, self.cleanup)\n                 self.cleanup = []\n-                StoragePool.enableMaintenance(self.apiclient,storage_pool_2.id)\n+                StoragePool.enableMaintenance(self.apiclient, storage_pool_2.id)\n                 time.sleep(30);\n                 cmd = deleteStoragePool.deleteStoragePoolCmd()\n                 cmd.id = storage_pool_2.id\n@@ -355,21 +345,23 @@ def test_01_add_primary_storage_disabled_host(self):\n class StorageTagsServices:\n     \"\"\"Test Storage Tags Data Class.\n     \"\"\"\n+\n     def __init__(self):\n         self.storage_tags = {\n-            \"a\" : \"NFS-A\",\n-            \"b\" : \"NFS-B\"\n+            \"a\": \"NFS-A\",\n+            \"b\": \"NFS-B\"\n         }\n-    \n+\n+\n class TestStorageTags(cloudstackTestCase):\n-    \n+\n     @classmethod\n     def setUpClass(cls):\n         cls.logger = logging.getLogger('TestStorageTags')\n         cls.stream_handler = logging.StreamHandler()\n         cls.logger.setLevel(logging.DEBUG)\n         cls.logger.addHandler(cls.stream_handler)\n-        \n+\n         test_case = super(TestStorageTags, cls)\n         testClient = test_case.getClsTestClient()\n         cls.config = test_case.getClsConfig()\n@@ -383,36 +375,35 @@ def setUpClass(cls):\n         cls.services[\"virtual_machine\"][\"zoneid\"] = cls.zone.id\n         cls.services[\"virtual_machine\"][\"template\"] = cls.template.id\n         cls.services[\"storage_tags\"] = StorageTagsServices().storage_tags\n-        \n+\n         cls.hypervisorNotSupported = False\n         if cls.hypervisor.lower() in [\"hyperv\"]:\n             cls.hypervisorNotSupported = True\n         cls._cleanup = []\n-        \n+\n         if not cls.hypervisorNotSupported:\n-            \n             cls.clusters = list_clusters(\n                 cls.apiclient,\n                 zoneid=cls.zone.id\n             )\n             assert isinstance(cls.clusters, list) and len(cls.clusters) > 0\n-    \n+\n             # Create PS with Storage Tag\n             cls.storage_pool_1 = StoragePool.create(cls.apiclient,\n-                                         cls.services[\"nfs\"],\n-                                         clusterid=cls.clusters[0].id,\n-                                         zoneid=cls.zone.id,\n-                                         podid=cls.pod.id,\n-                                         tags=cls.services[\"storage_tags\"][\"a\"]\n-            )\n-            #PS not appended to _cleanup, it is removed on tearDownClass before cleaning up resources\n+                                                    cls.services[\"nfs\"],\n+                                                    clusterid=cls.clusters[0].id,\n+                                                    zoneid=cls.zone.id,\n+                                                    podid=cls.pod.id,\n+                                                    tags=cls.services[\"storage_tags\"][\"a\"]\n+                                                    )\n+            # PS not appended to _cleanup, it is removed on tearDownClass before cleaning up resources\n             assert cls.storage_pool_1.state == 'Up'\n             storage_pools_response = list_storage_pools(cls.apiclient,\n                                                         id=cls.storage_pool_1.id)\n             assert isinstance(storage_pools_response, list) and len(storage_pools_response) > 0\n             storage_response = storage_pools_response[0]\n             assert storage_response.id == cls.storage_pool_1.id and storage_response.type == cls.storage_pool_1.type\n-            \n+\n             # Create Service Offerings with different Storage Tags\n             cls.service_offering_1 = ServiceOffering.create(\n                 cls.apiclient,\n@@ -426,7 +417,7 @@ def setUpClass(cls):\n                 tags=cls.services[\"storage_tags\"][\"b\"]\n             )\n             cls._cleanup.append(cls.service_offering_2)\n-            \n+\n             # Create Disk Offerings with different Storage Tags\n             cls.disk_offering_1 = DiskOffering.create(\n                 cls.apiclient,\n@@ -440,15 +431,15 @@ def setUpClass(cls):\n                 tags=cls.services[\"storage_tags\"][\"b\"]\n             )\n             cls._cleanup.append(cls.disk_offering_2)\n-            \n+\n             # Create Account\n             cls.account = Account.create(\n                 cls.apiclient,\n                 cls.services[\"account\"],\n                 domainid=cls.domain.id\n             )\n             cls._cleanup.append(cls.account)\n-            \n+\n             # Create VM-1 with using Service Offering 1\n             cls.virtual_machine_1 = VirtualMachine.create(\n                 cls.apiclient,\n@@ -461,9 +452,9 @@ def setUpClass(cls):\n                 mode=cls.zone.networktype\n             )\n             # VM-1 not appended to _cleanup, it is expunged on tearDownClass before cleaning up resources\n-            \n+\n         return\n-    \n+\n     @classmethod\n     def tearDownClass(cls):\n         try:\n@@ -484,7 +475,7 @@ def tearDownClass(cls):\n             cleanup_resources(cls.apiclient, cls._cleanup)\n         except Exception as e:\n             raise Exception(\"Cleanup failed with %s\" % e)\n-    \n+\n     def setUp(self):\n         self.dbclient = self.testClient.getDbConnection()\n         self.cleanup = []\n@@ -495,16 +486,16 @@ def tearDown(self):\n             cleanup_resources(self.apiclient, self.cleanup)\n         except Exception as e:\n             raise Exception(\"Warning: Exception during cleanup : %s\" % e)\n-    \n+\n     @attr(tags=[\"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n     @skipTestIf(\"hypervisorNotSupported\")\n     def test_01_deploy_vms_storage_tags(self):\n         \"\"\"Test Deploy VMS using different Service Offerings with Storage Tags\n         \"\"\"\n-        \n+\n         # Save cleanup size before trying to deploy VM-2\n         cleanup_size = len(self.cleanup)\n-        \n+\n         # Try deploying VM-2 using CO-2 -> Should fail to find storage and fail deployment\n         try:\n             self.virtual_machine_2 = VirtualMachine.create(\n@@ -519,32 +510,32 @@ def test_01_deploy_vms_storage_tags(self):\n             self.cleanup.append(self.virtual_machine_2)\n         except Exception as e:\n             self.debug(\"Expected exception %s: \" % e)\n-        \n+\n         self.debug(\"Asssert that vm2 was not deployed, so it couldn't be appended to cleanup\")\n         self.assertEquals(cleanup_size, len(self.cleanup))\n-        \n+\n         # Create V-1 using DO-1\n         self.volume_1 = Volume.create(\n-           self.apiclient,\n-           self.services,\n-           zoneid=self.zone.id,\n-           account=self.account.name,\n-           domainid=self.account.domainid,\n-           diskofferingid=self.disk_offering_1.id\n+            self.apiclient,\n+            self.services,\n+            zoneid=self.zone.id,\n+            account=self.account.name,\n+            domainid=self.account.domainid,\n+            diskofferingid=self.disk_offering_1.id\n         )\n         self.cleanup.append(self.volume_1)\n-        \n+\n         # Create V-2 using DO-2\n         self.volume_2 = Volume.create(\n-           self.apiclient,\n-           self.services,\n-           zoneid=self.zone.id,\n-           account=self.account.name,\n-           domainid=self.account.domainid,\n-           diskofferingid=self.disk_offering_2.id\n+            self.apiclient,\n+            self.services,\n+            zoneid=self.zone.id,\n+            account=self.account.name,\n+            domainid=self.account.domainid,\n+            diskofferingid=self.disk_offering_2.id\n         )\n         self.cleanup.append(self.volume_2)\n-        \n+\n         # Try attaching V-2 to VM-1 -> Should fail finding storage and fail attachment\n         try:\n             self.virtual_machine_1.attach_volume(\n@@ -553,7 +544,7 @@ def test_01_deploy_vms_storage_tags(self):\n             )\n         except Exception as e:\n             self.debug(\"Expected exception %s: \" % e)\n-        \n+\n         vm_1_volumes = Volume.list(\n             self.apiclient,\n             virtualmachineid=self.virtual_machine_1.id,\n@@ -562,9 +553,9 @@ def test_01_deploy_vms_storage_tags(self):\n         )\n         self.debug(\"VM-1 Volumes: %s\" % vm_1_volumes)\n         self.assertEquals(None, vm_1_volumes, \"Check that volume V-2 has not been attached to VM-1\")\n-        \n+\n         # Attach V_1 to VM_1\n-        self.virtual_machine_1.attach_volume(self.apiclient,self.volume_1)\n+        self.virtual_machine_1.attach_volume(self.apiclient, self.volume_1)\n         vm_1_volumes = Volume.list(\n             self.apiclient,\n             virtualmachineid=self.virtual_machine_1.id,\n@@ -574,74 +565,74 @@ def test_01_deploy_vms_storage_tags(self):\n         self.debug(\"VM-1 Volumes: %s\" % vm_1_volumes)\n         self.assertEquals(vm_1_volumes[0].id, self.volume_1.id, \"Check that volume V-1 has been attached to VM-1\")\n         self.virtual_machine_1.detach_volume(self.apiclient, self.volume_1)\n-        \n+\n         return\n-    \n+\n     def check_storage_pool_tag(self, poolid, tag):\n         cmd = listStorageTags.listStorageTagsCmd()\n         storage_tags_response = self.apiclient.listStorageTags(cmd)\n         pool_tags = filter(lambda x: x.poolid == poolid, storage_tags_response)\n         self.assertEquals(1, len(pool_tags), \"Check storage tags size\")\n         self.assertEquals(tag, pool_tags[0].name, \"Check storage tag on storage pool\")\n-    \n+\n     @attr(tags=[\"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n     @skipTestIf(\"hypervisorNotSupported\")\n     def test_02_edit_primary_storage_tags(self):\n         \"\"\" Test Edit Storage Tags\n         \"\"\"\n-        \n+\n         qresultset = self.dbclient.execute(\n             \"select id from storage_pool where uuid = '%s';\"\n             % str(self.storage_pool_1.id)\n         )\n         self.assertEquals(1, len(qresultset), \"Check DB Query result set\")\n         qresult = qresultset[0]\n         storage_pool_db_id = qresult[0]\n-        \n+\n         self.check_storage_pool_tag(storage_pool_db_id, self.services[\"storage_tags\"][\"a\"])\n-        \n+\n         # Update Storage Tag\n         StoragePool.update(\n             self.apiclient,\n             id=self.storage_pool_1.id,\n             tags=self.services[\"storage_tags\"][\"b\"]\n         )\n-        \n+\n         self.check_storage_pool_tag(storage_pool_db_id, self.services[\"storage_tags\"][\"b\"])\n-        \n+\n         # Revert Storage Tag\n         StoragePool.update(\n             self.apiclient,\n             id=self.storage_pool_1.id,\n             tags=self.services[\"storage_tags\"][\"a\"]\n         )\n-        \n+\n         self.check_storage_pool_tag(storage_pool_db_id, self.services[\"storage_tags\"][\"a\"])\n-        \n+\n         return\n-    \n+\n     @attr(tags=[\"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n     @skipTestIf(\"hypervisorNotSupported\")\n     def test_03_migration_options_storage_tags(self):\n         \"\"\" Test Volume migration options for Storage Pools with different Storage Tags\n         \"\"\"\n-        \n+\n         # Create PS-2 using Storage Tag\n         storage_pool_2 = StoragePool.create(self.apiclient,\n-                                             self.services[\"nfs2\"],\n-                                             clusterid=self.clusters[0].id,\n-                                             zoneid=self.zone.id,\n-                                             podid=self.pod.id,\n-                                             tags=self.services[\"storage_tags\"][\"a\"]\n-        )\n+                                            self.services[\"nfs2\"],\n+                                            clusterid=self.clusters[0].id,\n+                                            zoneid=self.zone.id,\n+                                            podid=self.pod.id,\n+                                            tags=self.services[\"storage_tags\"][\"a\"]\n+                                            )\n         self.cleanup.append(storage_pool_2)\n         assert storage_pool_2.state == 'Up'\n         storage_pools_response = list_storage_pools(self.apiclient,\n                                                     id=storage_pool_2.id)\n         assert isinstance(storage_pools_response, list) and len(storage_pools_response) > 0\n         storage_response = storage_pools_response[0]\n         assert storage_response.id == storage_pool_2.id and storage_response.type == storage_pool_2.type\n-        \n+\n         vm_1_volumes = Volume.list(\n             self.apiclient,\n             virtualmachineid=self.virtual_machine_1.id,\n@@ -667,27 +658,27 @@ def test_03_migration_options_storage_tags(self):\n             self.apiclient,\n             id=vol.id\n         )\n-        pools_suitable = filter(lambda p : p.suitableformigration, pools_response)\n-        \n+        pools_suitable = filter(lambda p: p.suitableformigration, pools_response)\n+\n         self.debug(\"Suitable storage pools found: %s\" % len(pools_suitable))\n         self.assertEquals(1, len(pools_suitable), \"Check that there is only one item on the list\")\n         self.assertEquals(pools_suitable[0].id, storage_pool_2.id, \"Check that PS-2 is the migration option for volume\")\n-        \n+\n         # Update PS-2 Storage Tags\n         StoragePool.update(\n             self.apiclient,\n             id=storage_pool_2.id,\n             tags=self.services[\"storage_tags\"][\"b\"]\n         )\n-        \n+\n         # Check migration options for volume after updating PS-2 Storage Tags\n         pools_response = StoragePool.listForMigration(\n             self.apiclient,\n             id=vol.id\n         )\n-        pools_suitable = filter(lambda p : p.suitableformigration, pools_response)\n-        \n+        pools_suitable = filter(lambda p: p.suitableformigration, pools_response)\n+\n         self.debug(\"Suitable storage pools found: %s\" % len(pools_suitable))\n         self.assertEquals(0, len(pools_suitable), \"Check that there is no migration option for volume\")\n-        \n-        return\n\\ No newline at end of file\n+\n+        return",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/test/integration/smoke/test_primary_storage.py",
                "sha": "d397c773b12ba5417428d8fb5e9f1e08a1053d31",
                "status": "modified"
            },
            {
                "additions": 473,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/test/integration/smoke/test_vm_life_cycle.py",
                "changes": 732,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/test/integration/smoke/test_vm_life_cycle.py?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 259,
                "filename": "test/integration/smoke/test_vm_life_cycle.py",
                "patch": "@@ -16,36 +16,40 @@\n # under the License.\n \"\"\" BVT tests for Virtual Machine Life Cycle\n \"\"\"\n-#Import Local Modules\n+# Import Local Modules\n from marvin.cloudstackTestCase import cloudstackTestCase\n from marvin.cloudstackAPI import (recoverVirtualMachine,\n                                   destroyVirtualMachine,\n                                   attachIso,\n                                   detachIso,\n                                   provisionCertificate,\n-                                  updateConfiguration)\n-from marvin.lib.utils import *\n-\n+                                  updateConfiguration,\n+                                  migrateVirtualMachine)\n+from marvin.lib.utils import (cleanup_resources,\n+                              validateList,\n+                              SshClient)\n from marvin.lib.base import (Account,\n                              ServiceOffering,\n                              VirtualMachine,\n                              Host,\n                              Iso,\n                              Router,\n                              Configurations,\n+                             StoragePool,\n                              Volume,\n                              DiskOffering)\n from marvin.lib.common import (get_domain,\n-                                get_zone,\n-                                get_template,\n+                               get_zone,\n+                               get_template,\n                                list_hosts)\n from marvin.codes import FAILED, PASS\n from nose.plugins.attrib import attr\n-#Import System modules\n+# Import System modules\n import time\n-import re\n \n _multiprocess_shared_ = True\n+\n+\n class TestDeployVM(cloudstackTestCase):\n \n     @classmethod\n@@ -59,8 +63,8 @@ def setUpClass(cls):\n         cls.zone = get_zone(cls.apiclient, testClient.getZoneForTests())\n         cls.services['mode'] = cls.zone.networktype\n \n-        #If local storage is enabled, alter the offerings to use localstorage\n-        #this step is needed for devcloud\n+        # If local storage is enabled, alter the offerings to use localstorage\n+        # this step is needed for devcloud\n         if cls.zone.localstorageenabled == True:\n             cls.services[\"service_offerings\"][\"tiny\"][\"storagetype\"] = 'local'\n             cls.services[\"service_offerings\"][\"small\"][\"storagetype\"] = 'local'\n@@ -118,56 +122,54 @@ def setUp(self):\n         self.dbclient = self.testClient.getDbConnection()\n         self.cleanup = []\n \n-\n-    @attr(tags = [\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n+    @attr(tags=[\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n     def test_deploy_vm(self):\n         \"\"\"Test Deploy Virtual Machine\n         \"\"\"\n         # Validate the following:\n         # 1. Virtual Machine is accessible via SSH\n         # 2. listVirtualMachines returns accurate information\n         list_vm_response = VirtualMachine.list(\n-                                                 self.apiclient,\n-                                                 id=self.virtual_machine.id\n-                                                 )\n+            self.apiclient,\n+            id=self.virtual_machine.id\n+        )\n \n         self.debug(\n-                \"Verify listVirtualMachines response for virtual machine: %s\" \\\n-                % self.virtual_machine.id\n-            )\n+            \"Verify listVirtualMachines response for virtual machine: %s\" \\\n+            % self.virtual_machine.id\n+        )\n         self.assertEqual(\n-                            isinstance(list_vm_response, list),\n-                            True,\n-                            \"Check list response returns a valid list\"\n-                        )\n+            isinstance(list_vm_response, list),\n+            True,\n+            \"Check list response returns a valid list\"\n+        )\n         self.assertNotEqual(\n-                            len(list_vm_response),\n-                            0,\n-                            \"Check VM available in List Virtual Machines\"\n-                        )\n+            len(list_vm_response),\n+            0,\n+            \"Check VM available in List Virtual Machines\"\n+        )\n         vm_response = list_vm_response[0]\n         self.assertEqual(\n \n-                            vm_response.id,\n-                            self.virtual_machine.id,\n-                            \"Check virtual machine id in listVirtualMachines\"\n-                        )\n+            vm_response.id,\n+            self.virtual_machine.id,\n+            \"Check virtual machine id in listVirtualMachines\"\n+        )\n         self.assertEqual(\n-                    vm_response.name,\n-                    self.virtual_machine.name,\n-                    \"Check virtual machine name in listVirtualMachines\"\n-                    )\n+            vm_response.name,\n+            self.virtual_machine.name,\n+            \"Check virtual machine name in listVirtualMachines\"\n+        )\n         self.assertEqual(\n             vm_response.state,\n             'Running',\n-             msg=\"VM is not in Running state\"\n+            msg=\"VM is not in Running state\"\n         )\n         return\n \n-\n-    @attr(tags = [\"advanced\"], required_hardware=\"false\")\n+    @attr(tags=[\"advanced\"], required_hardware=\"false\")\n     def test_advZoneVirtualRouter(self):\n-        #TODO: SIMENH: duplicate test, remove it\n+        # TODO: SIMENH: duplicate test, remove it\n         \"\"\"\n         Test advanced zone virtual router\n         1. Is Running\n@@ -176,35 +178,34 @@ def test_advZoneVirtualRouter(self):\n         @return:\n         \"\"\"\n         routers = Router.list(self.apiclient, account=self.account.name)\n-        self.assertTrue(len(routers) > 0, msg = \"No virtual router found\")\n+        self.assertTrue(len(routers) > 0, msg=\"No virtual router found\")\n         router = routers[0]\n \n         self.assertEqual(router.state, 'Running', msg=\"Router is not in running state\")\n         self.assertEqual(router.account, self.account.name, msg=\"Router does not belong to the account\")\n \n-        #Has linklocal, public and guest ips\n+        # Has linklocal, public and guest ips\n         self.assertIsNotNone(router.linklocalip, msg=\"Router has no linklocal ip\")\n         self.assertIsNotNone(router.publicip, msg=\"Router has no public ip\")\n         self.assertIsNotNone(router.guestipaddress, msg=\"Router has no guest ip\")\n \n-\n-    @attr(mode = [\"basic\"], required_hardware=\"false\")\n+    @attr(mode=[\"basic\"], required_hardware=\"false\")\n     def test_basicZoneVirtualRouter(self):\n-        #TODO: SIMENH: duplicate test, remove it\n+        # TODO: SIMENH: duplicate test, remove it\n         \"\"\"\n         Tests for basic zone virtual router\n         1. Is Running\n         2. is in the account the VM was deployed in\n         @return:\n         \"\"\"\n         routers = Router.list(self.apiclient, account=self.account.name)\n-        self.assertTrue(len(routers) > 0, msg = \"No virtual router found\")\n+        self.assertTrue(len(routers) > 0, msg=\"No virtual router found\")\n         router = routers[0]\n \n         self.assertEqual(router.state, 'Running', msg=\"Router is not in running state\")\n         self.assertEqual(router.account, self.account.name, msg=\"Router does not belong to the account\")\n \n-    @attr(tags = ['advanced','basic','sg'], required_hardware=\"false\")\n+    @attr(tags=['advanced', 'basic', 'sg'], required_hardware=\"false\")\n     def test_deploy_vm_multiple(self):\n         \"\"\"Test Multiple Deploy Virtual Machine\n \n@@ -236,7 +237,8 @@ def test_deploy_vm_multiple(self):\n \n         list_vms = VirtualMachine.list(self.apiclient, ids=[virtual_machine1.id, virtual_machine2.id], listAll=True)\n         self.debug(\n-            \"Verify listVirtualMachines response for virtual machines: %s, %s\" % (virtual_machine1.id, virtual_machine2.id)\n+            \"Verify listVirtualMachines response for virtual machines: %s, %s\" % (\n+                virtual_machine1.id, virtual_machine2.id)\n         )\n         self.assertEqual(\n             isinstance(list_vms, list),\n@@ -271,18 +273,18 @@ def setUpClass(cls):\n         cls.zone = get_zone(cls.apiclient, cls.testClient.getZoneForTests())\n         cls.services['mode'] = cls.zone.networktype\n \n-        #if local storage is enabled, alter the offerings to use localstorage\n-        #this step is needed for devcloud\n+        # if local storage is enabled, alter the offerings to use localstorage\n+        # this step is needed for devcloud\n         if cls.zone.localstorageenabled == True:\n             cls.services[\"service_offerings\"][\"tiny\"][\"storagetype\"] = 'local'\n             cls.services[\"service_offerings\"][\"small\"][\"storagetype\"] = 'local'\n             cls.services[\"service_offerings\"][\"medium\"][\"storagetype\"] = 'local'\n \n         template = get_template(\n-                            cls.apiclient,\n-                            cls.zone.id,\n-                            cls.services[\"ostype\"]\n-                            )\n+            cls.apiclient,\n+            cls.zone.id,\n+            cls.services[\"ostype\"]\n+        )\n         if template == FAILED:\n             assert False, \"get_template() failed to return template with description %s\" % cls.services[\"ostype\"]\n \n@@ -294,50 +296,50 @@ def setUpClass(cls):\n \n         # Create VMs, NAT Rules etc\n         cls.account = Account.create(\n-                            cls.apiclient,\n-                            cls.services[\"account\"],\n-                            domainid=domain.id\n-                            )\n+            cls.apiclient,\n+            cls.services[\"account\"],\n+            domainid=domain.id\n+        )\n \n         cls.small_offering = ServiceOffering.create(\n-                                    cls.apiclient,\n-                                    cls.services[\"service_offerings\"][\"small\"]\n-                                    )\n+            cls.apiclient,\n+            cls.services[\"service_offerings\"][\"small\"]\n+        )\n \n         cls.medium_offering = ServiceOffering.create(\n-                                    cls.apiclient,\n-                                    cls.services[\"service_offerings\"][\"medium\"]\n-                                    )\n-        #create small and large virtual machines\n+            cls.apiclient,\n+            cls.services[\"service_offerings\"][\"medium\"]\n+        )\n+        # create small and large virtual machines\n         cls.small_virtual_machine = VirtualMachine.create(\n-                                        cls.apiclient,\n-                                        cls.services[\"small\"],\n-                                        accountid=cls.account.name,\n-                                        domainid=cls.account.domainid,\n-                                        serviceofferingid=cls.small_offering.id,\n-                                        mode=cls.services[\"mode\"]\n-                                        )\n+            cls.apiclient,\n+            cls.services[\"small\"],\n+            accountid=cls.account.name,\n+            domainid=cls.account.domainid,\n+            serviceofferingid=cls.small_offering.id,\n+            mode=cls.services[\"mode\"]\n+        )\n         cls.medium_virtual_machine = VirtualMachine.create(\n-                                       cls.apiclient,\n-                                       cls.services[\"small\"],\n-                                       accountid=cls.account.name,\n-                                       domainid=cls.account.domainid,\n-                                       serviceofferingid=cls.medium_offering.id,\n-                                       mode=cls.services[\"mode\"]\n-                                    )\n+            cls.apiclient,\n+            cls.services[\"small\"],\n+            accountid=cls.account.name,\n+            domainid=cls.account.domainid,\n+            serviceofferingid=cls.medium_offering.id,\n+            mode=cls.services[\"mode\"]\n+        )\n         cls.virtual_machine = VirtualMachine.create(\n-                                        cls.apiclient,\n-                                        cls.services[\"small\"],\n-                                        accountid=cls.account.name,\n-                                        domainid=cls.account.domainid,\n-                                        serviceofferingid=cls.small_offering.id,\n-                                        mode=cls.services[\"mode\"]\n-                                        )\n+            cls.apiclient,\n+            cls.services[\"small\"],\n+            accountid=cls.account.name,\n+            domainid=cls.account.domainid,\n+            serviceofferingid=cls.small_offering.id,\n+            mode=cls.services[\"mode\"]\n+        )\n         cls._cleanup = [\n-                        cls.small_offering,\n-                        cls.medium_offering,\n-                        cls.account\n-                        ]\n+            cls.small_offering,\n+            cls.medium_offering,\n+            cls.account\n+        ]\n \n     @classmethod\n     def tearDownClass(cls):\n@@ -355,14 +357,13 @@ def setUp(self):\n \n     def tearDown(self):\n         try:\n-            #Clean up, terminate the created ISOs\n+            # Clean up, terminate the created ISOs\n             cleanup_resources(self.apiclient, self.cleanup)\n         except Exception as e:\n             raise Exception(\"Warning: Exception during cleanup : %s\" % e)\n         return\n \n-\n-    @attr(tags = [\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n+    @attr(tags=[\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n     def test_01_stop_vm(self):\n         \"\"\"Test Stop Virtual Machine\n         \"\"\"\n@@ -377,8 +378,7 @@ def test_01_stop_vm(self):\n             self.fail(\"Failed to stop VM: %s\" % e)\n         return\n \n-\n-    @attr(tags = [\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n+    @attr(tags=[\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n     def test_01_stop_vm_forced(self):\n         \"\"\"Test Force Stop Virtual Machine\n         \"\"\"\n@@ -388,30 +388,29 @@ def test_01_stop_vm_forced(self):\n             self.fail(\"Failed to stop VM: %s\" % e)\n \n         list_vm_response = VirtualMachine.list(\n-                                            self.apiclient,\n-                                            id=self.small_virtual_machine.id\n-                                            )\n+            self.apiclient,\n+            id=self.small_virtual_machine.id\n+        )\n         self.assertEqual(\n-                            isinstance(list_vm_response, list),\n-                            True,\n-                            \"Check list response returns a valid list\"\n-                        )\n+            isinstance(list_vm_response, list),\n+            True,\n+            \"Check list response returns a valid list\"\n+        )\n \n         self.assertNotEqual(\n-                            len(list_vm_response),\n-                            0,\n-                            \"Check VM avaliable in List Virtual Machines\"\n-                        )\n+            len(list_vm_response),\n+            0,\n+            \"Check VM avaliable in List Virtual Machines\"\n+        )\n \n         self.assertEqual(\n-                            list_vm_response[0].state,\n-                            \"Stopped\",\n-                            \"Check virtual machine is in stopped state\"\n-                        )\n+            list_vm_response[0].state,\n+            \"Stopped\",\n+            \"Check virtual machine is in stopped state\"\n+        )\n         return\n \n-\n-    @attr(tags = [\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n+    @attr(tags=[\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n     def test_02_start_vm(self):\n         \"\"\"Test Start Virtual Machine\n         \"\"\"\n@@ -423,33 +422,33 @@ def test_02_start_vm(self):\n         self.small_virtual_machine.start(self.apiclient)\n \n         list_vm_response = VirtualMachine.list(\n-                                            self.apiclient,\n-                                            id=self.small_virtual_machine.id\n-                                            )\n+            self.apiclient,\n+            id=self.small_virtual_machine.id\n+        )\n         self.assertEqual(\n-                            isinstance(list_vm_response, list),\n-                            True,\n-                            \"Check list response returns a valid list\"\n-                        )\n+            isinstance(list_vm_response, list),\n+            True,\n+            \"Check list response returns a valid list\"\n+        )\n \n         self.assertNotEqual(\n-                            len(list_vm_response),\n-                            0,\n-                            \"Check VM avaliable in List Virtual Machines\"\n-                        )\n+            len(list_vm_response),\n+            0,\n+            \"Check VM avaliable in List Virtual Machines\"\n+        )\n \n         self.debug(\n-                \"Verify listVirtualMachines response for virtual machine: %s\" \\\n-                % self.small_virtual_machine.id\n-                )\n+            \"Verify listVirtualMachines response for virtual machine: %s\" \\\n+            % self.small_virtual_machine.id\n+        )\n         self.assertEqual(\n-                            list_vm_response[0].state,\n-                            \"Running\",\n-                            \"Check virtual machine is in running state\"\n-                        )\n+            list_vm_response[0].state,\n+            \"Running\",\n+            \"Check virtual machine is in running state\"\n+        )\n         return\n \n-    @attr(tags = [\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n+    @attr(tags=[\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n     def test_03_reboot_vm(self):\n         \"\"\"Test Reboot Virtual Machine\n         \"\"\"\n@@ -463,30 +462,29 @@ def test_03_reboot_vm(self):\n         self.small_virtual_machine.reboot(self.apiclient)\n \n         list_vm_response = VirtualMachine.list(\n-                                            self.apiclient,\n-                                            id=self.small_virtual_machine.id\n-                                            )\n+            self.apiclient,\n+            id=self.small_virtual_machine.id\n+        )\n         self.assertEqual(\n-                            isinstance(list_vm_response, list),\n-                            True,\n-                            \"Check list response returns a valid list\"\n-                        )\n+            isinstance(list_vm_response, list),\n+            True,\n+            \"Check list response returns a valid list\"\n+        )\n \n         self.assertNotEqual(\n-                            len(list_vm_response),\n-                            0,\n-                            \"Check VM avaliable in List Virtual Machines\"\n-                        )\n+            len(list_vm_response),\n+            0,\n+            \"Check VM available in List Virtual Machines\"\n+        )\n \n         self.assertEqual(\n-                            list_vm_response[0].state,\n-                            \"Running\",\n-                            \"Check virtual machine is in running state\"\n-                        )\n+            list_vm_response[0].state,\n+            \"Running\",\n+            \"Check virtual machine is in running state\"\n+        )\n         return\n \n-\n-    @attr(tags = [\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n+    @attr(tags=[\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n     def test_06_destroy_vm(self):\n         \"\"\"Test destroy Virtual Machine\n         \"\"\"\n@@ -500,31 +498,31 @@ def test_06_destroy_vm(self):\n         self.small_virtual_machine.delete(self.apiclient, expunge=False)\n \n         list_vm_response = VirtualMachine.list(\n-                                            self.apiclient,\n-                                            id=self.small_virtual_machine.id\n-                                            )\n+            self.apiclient,\n+            id=self.small_virtual_machine.id\n+        )\n         self.assertEqual(\n-                            isinstance(list_vm_response, list),\n-                            True,\n-                            \"Check list response returns a valid list\"\n-                        )\n+            isinstance(list_vm_response, list),\n+            True,\n+            \"Check list response returns a valid list\"\n+        )\n \n         self.assertNotEqual(\n-                            len(list_vm_response),\n-                            0,\n-                            \"Check VM avaliable in List Virtual Machines\"\n-                        )\n+            len(list_vm_response),\n+            0,\n+            \"Check VM avaliable in List Virtual Machines\"\n+        )\n \n         self.assertEqual(\n-                            list_vm_response[0].state,\n-                            \"Destroyed\",\n-                            \"Check virtual machine is in destroyed state\"\n-                        )\n+            list_vm_response[0].state,\n+            \"Destroyed\",\n+            \"Check virtual machine is in destroyed state\"\n+        )\n         return\n \n-    @attr(tags = [\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n+    @attr(tags=[\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n     def test_07_restore_vm(self):\n-        #TODO: SIMENH: add another test the data on the restored VM.\n+        # TODO: SIMENH: add another test the data on the restored VM.\n         \"\"\"Test recover Virtual Machine\n         \"\"\"\n \n@@ -540,30 +538,30 @@ def test_07_restore_vm(self):\n         self.apiclient.recoverVirtualMachine(cmd)\n \n         list_vm_response = VirtualMachine.list(\n-                                            self.apiclient,\n-                                            id=self.small_virtual_machine.id\n-                                            )\n+            self.apiclient,\n+            id=self.small_virtual_machine.id\n+        )\n         self.assertEqual(\n-                            isinstance(list_vm_response, list),\n-                            True,\n-                            \"Check list response returns a valid list\"\n-                        )\n+            isinstance(list_vm_response, list),\n+            True,\n+            \"Check list response returns a valid list\"\n+        )\n \n         self.assertNotEqual(\n-                            len(list_vm_response),\n-                            0,\n-                            \"Check VM avaliable in List Virtual Machines\"\n-                        )\n+            len(list_vm_response),\n+            0,\n+            \"Check VM avaliable in List Virtual Machines\"\n+        )\n \n         self.assertEqual(\n-                            list_vm_response[0].state,\n-                            \"Stopped\",\n-                            \"Check virtual machine is in Stopped state\"\n-                        )\n+            list_vm_response[0].state,\n+            \"Stopped\",\n+            \"Check virtual machine is in Stopped state\"\n+        )\n \n         return\n \n-    @attr(tags = [\"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\", \"multihost\"], required_hardware=\"false\")\n+    @attr(tags=[\"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\", \"multihost\"], required_hardware=\"false\")\n     def test_08_migrate_vm(self):\n         \"\"\"Test migrate VM\n         \"\"\"\n@@ -591,10 +589,10 @@ def test_08_migrate_vm(self):\n         # For XenServer and VMware, migration is possible between hosts belonging to different clusters\n         # with the help of XenMotion and Vmotion respectively.\n \n-        if self.hypervisor.lower() in [\"kvm\",\"simulator\"]:\n-            #identify suitable host\n+        if self.hypervisor.lower() in [\"kvm\", \"simulator\"]:\n+            # identify suitable host\n             clusters = [h.clusterid for h in hosts]\n-            #find hosts withe same clusterid\n+            # find hosts withe same clusterid\n             clusters = [cluster for index, cluster in enumerate(clusters) if clusters.count(cluster) > 1]\n \n             if len(clusters) <= 1:\n@@ -607,8 +605,8 @@ def test_08_migrate_vm(self):\n         target_host = suitable_hosts[0]\n         migrate_host = suitable_hosts[1]\n \n-        #deploy VM on target host\n-        self.vm_to_migrate = VirtualMachine.create(\n+        # deploy VM on target host\n+        vm_to_migrate = VirtualMachine.create(\n             self.apiclient,\n             self.services[\"small\"],\n             accountid=self.account.name,\n@@ -618,30 +616,30 @@ def test_08_migrate_vm(self):\n             hostid=target_host.id\n         )\n         self.debug(\"Migrating VM-ID: %s to Host: %s\" % (\n-                                        self.vm_to_migrate.id,\n-                                        migrate_host.id\n-                                        ))\n+            vm_to_migrate.id,\n+            migrate_host.id\n+        ))\n \n-        self.vm_to_migrate.migrate(self.apiclient, migrate_host.id)\n+        vm_to_migrate.migrate(self.apiclient, migrate_host.id)\n \n         retries_cnt = 3\n-        while retries_cnt >=0:\n+        while retries_cnt >= 0:\n             list_vm_response = VirtualMachine.list(self.apiclient,\n-                                                   id=self.vm_to_migrate.id)\n+                                                   id=vm_to_migrate.id)\n             self.assertNotEqual(\n-                                list_vm_response,\n-                                None,\n-                                \"Check virtual machine is listed\"\n-                               )\n+                list_vm_response,\n+                None,\n+                \"Check virtual machine is listed\"\n+            )\n             vm_response = list_vm_response[0]\n-            self.assertEqual(vm_response.id,self.vm_to_migrate.id,\"Check virtual machine ID of migrated VM\")\n-            self.assertEqual(vm_response.hostid,migrate_host.id,\"Check destination hostID of migrated VM\")\n+            self.assertEqual(vm_response.id, vm_to_migrate.id, \"Check virtual machine ID of migrated VM\")\n+            self.assertEqual(vm_response.hostid, migrate_host.id, \"Check destination hostID of migrated VM\")\n             retries_cnt = retries_cnt - 1\n         return\n \n-    @attr(configuration = \"expunge.interval\")\n-    @attr(configuration = \"expunge.delay\")\n-    @attr(tags = [\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n+    @attr(configuration=\"expunge.interval\")\n+    @attr(configuration=\"expunge.delay\")\n+    @attr(tags=[\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n     def test_09_expunge_vm(self):\n         \"\"\"Test destroy(expunge) Virtual Machine\n         \"\"\"\n@@ -655,26 +653,26 @@ def test_09_expunge_vm(self):\n         self.apiclient.destroyVirtualMachine(cmd)\n \n         config = Configurations.list(\n-                                     self.apiclient,\n-                                     name='expunge.delay'\n-                                     )\n+            self.apiclient,\n+            name='expunge.delay'\n+        )\n \n         expunge_delay = int(config[0].value)\n         time.sleep(expunge_delay * 2)\n \n-        #VM should be destroyed unless expunge thread hasn't run\n-        #Wait for two cycles of the expunge thread\n+        # VM should be destroyed unless expunge thread hasn't run\n+        # Wait for two cycles of the expunge thread\n         config = Configurations.list(\n-                                     self.apiclient,\n-                                     name='expunge.interval'\n-                                     )\n+            self.apiclient,\n+            name='expunge.interval'\n+        )\n         expunge_cycle = int(config[0].value)\n         wait_time = expunge_cycle * 4\n         while wait_time >= 0:\n             list_vm_response = VirtualMachine.list(\n-                                                self.apiclient,\n-                                                id=self.small_virtual_machine.id\n-                                                )\n+                self.apiclient,\n+                id=self.small_virtual_machine.id\n+            )\n             if not list_vm_response:\n                 break\n             self.debug(\"Waiting for VM to expunge\")\n@@ -683,10 +681,10 @@ def test_09_expunge_vm(self):\n \n         self.debug(\"listVirtualMachines response: %s\" % list_vm_response)\n \n-        self.assertEqual(list_vm_response,None,\"Check Expunged virtual machine is in listVirtualMachines response\")\n+        self.assertEqual(list_vm_response, None, \"Check Expunged virtual machine is in listVirtualMachines response\")\n         return\n \n-    @attr(tags = [\"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"true\")\n+    @attr(tags=[\"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"true\")\n     def test_10_attachAndDetach_iso(self):\n         \"\"\"Test for attach and detach ISO to virtual machine\"\"\"\n \n@@ -702,24 +700,24 @@ def test_10_attachAndDetach_iso(self):\n             self.skipTest(\"ISOs are not supported on LXC\")\n \n         iso = Iso.create(\n-                         self.apiclient,\n-                         self.services[\"iso1\"],\n-                         account=self.account.name,\n-                         domainid=self.account.domainid\n-                         )\n+            self.apiclient,\n+            self.services[\"iso1\"],\n+            account=self.account.name,\n+            domainid=self.account.domainid\n+        )\n \n         self.debug(\"Successfully created ISO with ID: %s\" % iso.id)\n         try:\n             iso.download(self.apiclient)\n         except Exception as e:\n-            self.fail(\"Exception while downloading ISO %s: %s\"\\\n+            self.fail(\"Exception while downloading ISO %s: %s\" \\\n                       % (iso.id, e))\n \n         self.debug(\"Attach ISO with ID: %s to VM ID: %s\" % (\n-                                                    iso.id,\n-                                                    self.virtual_machine.id\n-                                                    ))\n-        #Attach ISO to virtual machine\n+            iso.id,\n+            self.virtual_machine.id\n+        ))\n+        # Attach ISO to virtual machine\n         cmd = attachIso.attachIsoCmd()\n         cmd.id = iso.id\n         cmd.virtualmachineid = self.virtual_machine.id\n@@ -729,7 +727,7 @@ def test_10_attachAndDetach_iso(self):\n             ssh_client = self.virtual_machine.get_ssh_client()\n         except Exception as e:\n             self.fail(\"SSH failed for virtual machine: %s - %s\" %\n-                                (self.virtual_machine.ipaddress, e))\n+                      (self.virtual_machine.ipaddress, e))\n \n         mount_dir = \"/mnt/tmp\"\n         cmds = \"mkdir -p %s\" % mount_dir\n@@ -750,24 +748,24 @@ def test_10_attachAndDetach_iso(self):\n \n         # Get ISO size\n         iso_response = Iso.list(\n-                                 self.apiclient,\n-                                 id=iso.id\n-                                 )\n+            self.apiclient,\n+            id=iso.id\n+        )\n         self.assertEqual(\n-                            isinstance(iso_response, list),\n-                            True,\n-                            \"Check list response returns a valid list\"\n-                        )\n+            isinstance(iso_response, list),\n+            True,\n+            \"Check list response returns a valid list\"\n+        )\n \n         try:\n-            #Unmount ISO\n+            # Unmount ISO\n             command = \"umount %s\" % mount_dir\n             ssh_client.execute(command)\n         except Exception as e:\n             self.fail(\"SSH failed for virtual machine: %s - %s\" %\n-                                (self.virtual_machine.ipaddress, e))\n+                      (self.virtual_machine.ipaddress, e))\n \n-        #Detach from VM\n+        # Detach from VM\n         cmd = detachIso.detachIsoCmd()\n         cmd.virtualmachineid = self.virtual_machine.id\n         self.apiclient.detachIso(cmd)\n@@ -776,16 +774,16 @@ def test_10_attachAndDetach_iso(self):\n             res = ssh_client.execute(c)\n         except Exception as e:\n             self.fail(\"SSH failed for virtual machine: %s - %s\" %\n-                                (self.virtual_machine.ipaddress, e))\n+                      (self.virtual_machine.ipaddress, e))\n \n         # Check if ISO is properly detached from VM (using fdisk)\n         result = self.services[\"mount\"] in str(res)\n \n         self.assertEqual(\n-                         result,\n-                         False,\n-                         \"Check if ISO is detached from virtual machine\"\n-                         )\n+            result,\n+            False,\n+            \"Check if ISO is detached from virtual machine\"\n+        )\n         return\n \n     @attr(tags = [\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\"], required_hardware=\"false\")\n@@ -825,6 +823,7 @@ def test_11_destroy_vm_and_volumes(self):\n \n         self.assertEqual(Volume.list(self.apiclient, id=vol1.id), None, \"List response contains records when it should not\")\n \n+\n class TestSecuredVmMigration(cloudstackTestCase):\n \n     @classmethod\n@@ -842,14 +841,15 @@ def setUpClass(cls):\n         domain = get_domain(cls.apiclient)\n         cls.zone = get_zone(cls.apiclient, cls.testClient.getZoneForTests())\n         cls.services['mode'] = cls.zone.networktype\n-        cls.hostConfig = cls.config.__dict__[\"zones\"][0].__dict__[\"pods\"][0].__dict__[\"clusters\"][0].__dict__[\"hosts\"][0].__dict__\n+        cls.hostConfig = cls.config.__dict__[\"zones\"][0].__dict__[\"pods\"][0].__dict__[\"clusters\"][0].__dict__[\"hosts\"][\n+            0].__dict__\n         cls.management_ip = cls.config.__dict__[\"mgtSvr\"][0].__dict__[\"mgtSvrIp\"]\n \n         template = get_template(\n-                            cls.apiclient,\n-                            cls.zone.id,\n-                            cls.services[\"ostype\"]\n-                            )\n+            cls.apiclient,\n+            cls.zone.id,\n+            cls.services[\"ostype\"]\n+        )\n         if template == FAILED:\n             assert False, \"get_template() failed to return template with description %s\" % cls.services[\"ostype\"]\n \n@@ -861,20 +861,20 @@ def setUpClass(cls):\n \n         # Create VMs, NAT Rules etc\n         cls.account = Account.create(\n-                            cls.apiclient,\n-                            cls.services[\"account\"],\n-                            domainid=domain.id\n-                            )\n+            cls.apiclient,\n+            cls.services[\"account\"],\n+            domainid=domain.id\n+        )\n \n         cls.small_offering = ServiceOffering.create(\n-                                    cls.apiclient,\n-                                    cls.services[\"service_offerings\"][\"small\"]\n-                                    )\n+            cls.apiclient,\n+            cls.services[\"service_offerings\"][\"small\"]\n+        )\n \n         cls._cleanup = [\n-                        cls.small_offering,\n-                        cls.account\n-                        ]\n+            cls.small_offering,\n+            cls.account\n+        ]\n \n     @classmethod\n     def tearDownClass(cls):\n@@ -916,19 +916,20 @@ def get_target_host(self, secured, virtualmachineid):\n         target_hosts = Host.listForMigration(self.apiclient,\n                                              virtualmachineid=virtualmachineid)\n         for host in target_hosts:\n-            h = list_hosts(self.apiclient,type='Routing', id=host.id)[0]\n+            h = list_hosts(self.apiclient, type='Routing', id=host.id)[0]\n             if h.details.secured == secured:\n                 return h\n \n         cloudstackTestCase.skipTest(self, \"No target hosts available, skipping test.\")\n \n     def check_migration_protocol(self, protocol, host):\n-        resp = SshClient(host.ipaddress, port=22, user=self.hostConfig[\"username\"],passwd=self.hostConfig[\"password\"])\\\n+        resp = SshClient(host.ipaddress, port=22, user=self.hostConfig[\"username\"], passwd=self.hostConfig[\"password\"]) \\\n             .execute(\"grep -a listen_%s=1 /etc/libvirt/libvirtd.conf | tail -1\" % protocol)\n \n         if protocol not in resp[0]:\n             cloudstackTestCase.fail(self, \"Libvirt listen protocol expected: '\" + protocol + \"\\n\"\n-                                    \"does not match actual: \" + resp[0])\n+                                                                                             \"does not match actual: \" +\n+                                    resp[0])\n \n     def migrate_and_check(self, vm, src_host, dest_host, proto='tls'):\n         \"\"\"\n@@ -940,7 +941,7 @@ def migrate_and_check(self, vm, src_host, dest_host, proto='tls'):\n         self.assertEqual(vm_response.hostid, dest_host.id, \"Check destination host ID of migrated VM\")\n \n     def unsecure_host(self, host):\n-        SshClient(host.ipaddress, port=22, user=self.hostConfig[\"username\"], passwd=self.hostConfig[\"password\"])\\\n+        SshClient(host.ipaddress, port=22, user=self.hostConfig[\"username\"], passwd=self.hostConfig[\"password\"]) \\\n             .execute(\"rm -f /etc/cloudstack/agent/cloud* && \\\n                       sed -i 's/listen_tls.*/listen_tls=0/g' /etc/libvirt/libvirtd.conf && \\\n                       sed -i 's/listen_tcp.*/listen_tcp=1/g' /etc/libvirt/libvirtd.conf && \\\n@@ -1051,7 +1052,8 @@ def test_03_secured_to_nonsecured_vm_migration(self):\n             self.migrate_and_check(vm, secure_host, unsecure_host, proto='tls')\n         except Exception:\n             pass\n-        else: self.fail(\"Migration succeeded, instead it should fail\")\n+        else:\n+            self.fail(\"Migration succeeded, instead it should fail\")\n \n     @attr(tags=[\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\", \"security\"], required_hardware=\"false\")\n     def test_04_nonsecured_to_secured_vm_migration(self):\n@@ -1072,5 +1074,217 @@ def test_04_nonsecured_to_secured_vm_migration(self):\n             self.migrate_and_check(vm, unsecure_host, secure_host, proto='tcp')\n         except Exception:\n             pass\n-        else: self.fail(\"Migration succeeded, instead it should fail\")\n+        else:\n+            self.fail(\"Migration succeeded, instead it should fail\")\n+\n+\n+class TestMigrateVMwithVolume(cloudstackTestCase):\n+\n+    @classmethod\n+    def setUpClass(cls):\n+        testClient = super(TestMigrateVMwithVolume, cls).getClsTestClient()\n+        cls.apiclient = testClient.getApiClient()\n+        cls.services = testClient.getParsedTestDataConfig()\n+        cls.hypervisor = testClient.getHypervisorInfo()\n+        cls._cleanup = []\n+\n+        # Get Zone, Domain and templates\n+        domain = get_domain(cls.apiclient)\n+        cls.zone = get_zone(cls.apiclient, cls.testClient.getZoneForTests())\n+        cls.services['mode'] = cls.zone.networktype\n+        cls.hostConfig = cls.config.__dict__[\"zones\"][0].__dict__[\"pods\"][0].__dict__[\"clusters\"][0].__dict__[\"hosts\"][\n+            0].__dict__\n+        cls.management_ip = cls.config.__dict__[\"mgtSvr\"][0].__dict__[\"mgtSvrIp\"]\n+\n+        template = get_template(\n+            cls.apiclient,\n+            cls.zone.id,\n+            cls.services[\"ostype\"]\n+        )\n+        if template == FAILED:\n+            assert False, \"get_template() failed to return template with description %s\" % cls.services[\"ostype\"]\n+\n+        # Set Zones and disk offerings\n+        cls.services[\"small\"][\"zoneid\"] = cls.zone.id\n+        cls.services[\"small\"][\"template\"] = template.id\n+\n+        cls.services[\"iso1\"][\"zoneid\"] = cls.zone.id\n+\n+        # Create VMs, NAT Rules etc\n+        cls.account = Account.create(\n+            cls.apiclient,\n+            cls.services[\"account\"],\n+            domainid=domain.id\n+        )\n+\n+        cls.small_offering = ServiceOffering.create(\n+            cls.apiclient,\n+            cls.services[\"service_offerings\"][\"small\"]\n+        )\n+\n+        cls._cleanup = [\n+            cls.small_offering,\n+            cls.account\n+        ]\n+\n+    @classmethod\n+    def tearDownClass(cls):\n+        cls.apiclient = super(TestMigrateVMwithVolume, cls).getClsTestClient().getApiClient()\n+        try:\n+            cleanup_resources(cls.apiclient, cls._cleanup)\n+        except Exception as e:\n+            raise Exception(\"Warning: Exception during cleanup : %s\" % e)\n+\n+    def setUp(self):\n+        self.apiclient = self.testClient.getApiClient()\n+        self.dbclient = self.testClient.getDbConnection()\n+        self.cleanup = []\n+\n+        if self.hypervisor.lower() not in [\"vmware\"]:\n+            self.skipTest(\"VM Migration with Volumes is not supported on other than VMware\")\n+\n+            self.hosts = Host.list(\n+                self.apiclient,\n+                zoneid=self.zone.id,\n+                type='Routing',\n+                hypervisor='KVM')\n+\n+            if len(self.hosts) < 2:\n+                self.skipTest(\"Requires at least two hosts for performing migration related tests\")\n+\n+    def tearDown(self):\n+        try:\n+            cleanup_resources(self.apiclient, self.cleanup)\n+        except Exception as e:\n+            raise Exception(\"Warning: Exception during cleanup : %s\" % e)\n+\n+    def get_target_host(self, virtualmachineid):\n+        target_hosts = Host.listForMigration(self.apiclient,\n+                                             virtualmachineid=virtualmachineid)[0]\n+        if len(target_hosts) < 1:\n+            self.skipTest(\"No target hosts found\")\n+\n+        return target_hosts[0]\n+\n+    def get_target_pool(self, volid):\n+        target_pools = StoragePool.listForMigration(self.apiclient, id=volid)\n+\n+        if len(target_pools) < 1:\n+            self.skipTest(\"Not enough storage pools found\")\n+\n+        return target_pools[0]\n+\n+    def get_vm_volumes(self, id):\n+        return Volume.list(self.apiclient, virtualmachineid=id, listall=True)\n+\n+    def deploy_vm(self):\n+        return VirtualMachine.create(\n+            self.apiclient,\n+            self.services[\"small\"],\n+            accountid=self.account.name,\n+            domainid=self.account.domainid,\n+            serviceofferingid=self.small_offering.id,\n+            mode=self.services[\"mode\"])\n+\n+    def migrate_vm_with_pools(self, target_pool, id):\n+        cmd = migrateVirtualMachine.migrateVirtualMachineCmd()\n+\n+        cmd.storageid = target_pool.id\n+        cmd.virtualmachineid = id\n+\n+        return self.apiclient.migrateVirtualMachine(cmd)\n+\n+    def create_volume(self):\n+        small_disk_offering = DiskOffering.list(self.apiclient, name='Small')[0]\n+\n+        return Volume.create(\n+            self.apiclient,\n+            self.services,\n+            account=self.account.name,\n+            diskofferingid=small_disk_offering.id,\n+            domainid=self.account.domainid,\n+            zoneid=self.zone.id\n+        )\n+\n+    \"\"\"\n+    BVT for Vmware Offline VM and Volume Migration\n+    \"\"\"\n+\n+    @attr(tags=[\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\", \"security\"], required_hardware=\"false\")\n+    def test_01_migrate_VM_and_root_volume(self):\n+        \"\"\"Test VM will be migrated with it's root volume\"\"\"\n+        # Validate the following\n+        # 1. Deploys a VM\n+        # 2. Finds suitable host for migration\n+        # 3. Finds suitable storage pool for root volume\n+        # 4. Migrate the VM to new host and storage pool and assert migration successful\n+\n+        vm = self.deploy_vm()\n+\n+        root_volume = self.get_vm_volumes(vm.id)[0]\n+\n+        target_pool = self.get_target_pool(root_volume.id)\n+\n+        vm.stop(self.apiclient)\n+\n+        self.migrate_vm_with_pools(target_pool, vm.id)\n+\n+        root_volume = self.get_vm_volumes(vm.id)[0]\n+        self.assertEqual(root_volume.storageid, target_pool.id, \"Pool ID was not as expected\")\n+\n+    @attr(tags=[\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\", \"security\"], required_hardware=\"false\")\n+    def test_02_migrate_VM_with_two_data_disks(self):\n+        \"\"\"Test VM will be migrated with it's root volume\"\"\"\n+        # Validate the following\n+        # 1. Deploys a VM and attaches 2 data disks\n+        # 2. Finds suitable host for migration\n+        # 3. Finds suitable storage pool for volumes\n+        # 4. Migrate the VM to new host and storage pool and assert migration successful\n+\n+        vm = self.deploy_vm()\n+\n+        volume1 = self.create_volume()\n+        volume2 = self.create_volume()\n+\n+        vm.attach_volume(self.apiclient, volume1)\n+        vm.attach_volume(self.apiclient, volume2)\n+\n+        root_volume = self.get_vm_volumes(vm.id)[0]\n+\n+        target_pool = self.get_target_pool(root_volume.id)\n+\n+        vm.stop(self.apiclient)\n+\n+        self.migrate_vm_with_pools(target_pool, vm.id)\n+\n+        volume1 = Volume.list(self.apiclient, id=volume1.id)[0]\n+        volume2 = Volume.list(self.apiclient, id=volume2.id)[0]\n+        root_volume = self.get_vm_volumes(vm.id)[0]\n+\n+        self.assertEqual(root_volume.storageid, target_pool.id, \"Pool ID was not as expected\")\n+        self.assertEqual(volume1.storageid, target_pool.id, \"Pool ID was not as expected\")\n+        self.assertEqual(volume2.storageid, target_pool.id, \"Pool ID was not as expected\")\n+\n+    @attr(tags=[\"devcloud\", \"advanced\", \"advancedns\", \"smoke\", \"basic\", \"sg\", \"security\"], required_hardware=\"false\")\n+    def test_03_migrate_detached_volume(self):\n+        \"\"\"Test VM will be migrated with it's root volume\"\"\"\n+        # Validate the following\n+        # 1. Deploys a VM and attaches 1 data disk\n+        # 2. Detaches the Disk\n+        # 3. Finds suitable storage pool for the Disk\n+        # 4. Migrate the storage pool and assert migration successful\n+\n+        vm = self.deploy_vm()\n+\n+        volume1 = self.create_volume()\n+\n+        vm.attach_volume(self.apiclient, volume1)\n+        vm.detach_volume(self.apiclient, volume1)\n+\n+        target_pool = self.get_target_pool(volume1.id)\n+\n+        Volume.migrate(self.apiclient, storageid=target_pool.id, volumeid=volume1.id)\n+\n+        vol = Volume.list(self.apiclient, volume=volume1.id)[0]\n \n+        self.assertEqual(vol.storageid, target_pool.id, \"Storage pool was not the same as expected\")",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/test/integration/smoke/test_vm_life_cycle.py",
                "sha": "32e917444c02c4eebf45044456f95900f8359611",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/utils/src/main/java/com/cloud/utils/StringUtils.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/main/java/com/cloud/utils/StringUtils.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 0,
                "filename": "utils/src/main/java/com/cloud/utils/StringUtils.java",
                "patch": "@@ -73,6 +73,14 @@ public static String join(final Iterable<? extends Object> iterable, final Strin\n     public static String join(final String delimiter, final Object... components) {\n         return org.apache.commons.lang.StringUtils.join(components, delimiter);\n     }\n+    /**\n+     * @deprecated\n+     * Please use org.apache.commons.lang.StringUtils.isBlank() as a replacement\n+     */\n+    @Deprecated\n+    public static boolean isBlank(String str) {\n+        return org.apache.commons.lang.StringUtils.isBlank(str);\n+    }\n \n     /**\n      * @deprecated",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/utils/src/main/java/com/cloud/utils/StringUtils.java",
                "sha": "e858bee74a02d3d654f9972e7644c3df25b94f55",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/cloudstack/blob/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java?ref=b363fd49f70ac2092ebe6226a72a3d911dc99e1f",
                "deletions": 0,
                "filename": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java",
                "patch": "@@ -447,6 +447,23 @@ public boolean changeHost(VirtualMachineRelocateSpec relocateSpec) throws Except\n         return false;\n     }\n \n+    public boolean changeDatastore(ManagedObjectReference morDataStore) throws Exception {\n+        VirtualMachineRelocateSpec relocateSpec = new VirtualMachineRelocateSpec();\n+        relocateSpec.setDatastore(morDataStore);\n+\n+        ManagedObjectReference morTask = _context.getService().relocateVMTask(_mor, relocateSpec, null);\n+\n+        boolean result = _context.getVimClient().waitForTask(morTask);\n+        if (result) {\n+            _context.waitForTaskProgressDone(morTask);\n+            return true;\n+        } else {\n+            s_logger.error(\"VMware change datastore relocateVM_Task failed due to \" + TaskMO.getTaskFailureInfo(_context, morTask));\n+        }\n+\n+        return false;\n+    }\n+\n     public boolean relocate(ManagedObjectReference morTargetHost) throws Exception {\n         VirtualMachineRelocateSpec relocateSpec = new VirtualMachineRelocateSpec();\n         relocateSpec.setHost(morTargetHost);",
                "raw_url": "https://github.com/apache/cloudstack/raw/b363fd49f70ac2092ebe6226a72a3d911dc99e1f/vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java",
                "sha": "52ead5c8535e50ecb2f323ec70dbb64f53a3e3e3",
                "status": "modified"
            }
        ],
        "message": "Vmware offline migration (#2848)\n\n* - Offline VM and Volume migration on Vmware hypervisor hosts\r\n- Also add VM disk consolidation call on successful VM migrations\r\n\r\n* Fix indentation of marvin test file and reformat against PEP8\r\n\r\n* * Fix few comment typos\r\n* Refactor debug messages to use String.format() when debug log level is enabled.\r\n\r\n* Send list of commands returned by hypervisor Guru instead of explicitly selecting the first one\r\n\r\n* Fix unhandled NPE during VM migration\r\n\r\n* Revert back to distinct event descriptions for VM to host or storage pool migration\r\n\r\n* Reformat test_primary_storage file against PEP-8 and Remove unused imports\r\n\r\n* Revert back the deprecation messages in the custom StringUtils class to favour the use of the ApacheUtils",
        "parent": "https://github.com/apache/cloudstack/commit/d68712eb7b0a53f6426f3bff157b14eee40c368e",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineMOTest.java"
        ]
    },
    "cloudstack_b3b56e2": {
        "bug_id": "cloudstack_b3b56e2",
        "commit": "https://github.com/apache/cloudstack/commit/b3b56e2cd84a7d716735c4b684f271247192dff3",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/b3b56e2cd84a7d716735c4b684f271247192dff3/engine/schema/src/com/cloud/upgrade/dao/Upgrade442to450.java",
                "changes": 151,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/upgrade/dao/Upgrade442to450.java?ref=b3b56e2cd84a7d716735c4b684f271247192dff3",
                "deletions": 150,
                "filename": "engine/schema/src/com/cloud/upgrade/dao/Upgrade442to450.java",
                "patch": "@@ -25,16 +25,12 @@\n import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.HashMap;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n-\n-import com.cloud.hypervisor.Hypervisor;\n-import com.cloud.utils.crypt.DBEncryptionUtil;\n \n import org.apache.log4j.Logger;\n \n+import com.cloud.utils.crypt.DBEncryptionUtil;\n import com.cloud.utils.exception.CloudRuntimeException;\n import com.cloud.utils.script.Script;\n \n@@ -68,7 +64,6 @@ public boolean supportsRollingUpgrade() {\n \n     @Override\n     public void performDataMigration(Connection conn) {\n-        updateSystemVmTemplates(conn);\n         dropInvalidKeyFromStoragePoolTable(conn);\n         dropDuplicatedForeignKeyFromAsyncJobTable(conn);\n         updateMaxRouterSizeConfig(conn);\n@@ -152,150 +147,6 @@ private void upgradeMemoryOfInternalLoadBalancervmOffering(Connection conn) {\n         return new File[] {new File(script)};\n     }\n \n-    private void updateSystemVmTemplates(Connection conn) {\n-        s_logger.debug(\"Updating System Vm template IDs\");\n-        //Get all hypervisors in use\n-        Set<Hypervisor.HypervisorType> hypervisorsListInUse = new HashSet<Hypervisor.HypervisorType>();\n-        try (PreparedStatement pstmt = conn.prepareStatement(\"select distinct(hypervisor_type) from `cloud`.`cluster` where removed is null\");\n-             ResultSet rs = pstmt.executeQuery()\n-           ) {\n-            while(rs.next()){\n-                switch (Hypervisor.HypervisorType.getType(rs.getString(1))) {\n-                case XenServer: hypervisorsListInUse.add(Hypervisor.HypervisorType.XenServer);\n-                    break;\n-                case KVM:       hypervisorsListInUse.add(Hypervisor.HypervisorType.KVM);\n-                    break;\n-                case VMware:    hypervisorsListInUse.add(Hypervisor.HypervisorType.VMware);\n-                    break;\n-                case Hyperv:    hypervisorsListInUse.add(Hypervisor.HypervisorType.Hyperv);\n-                    break;\n-                case LXC:       hypervisorsListInUse.add(Hypervisor.HypervisorType.LXC);\n-                    break;\n-                default:  // no action on cases Any, BareMetal, None, Ovm, Parralels, Simulator and VirtualBox:\n-                    break;\n-                }\n-            }\n-        } catch (SQLException e) {\n-            s_logger.error(\"updateSystemVmTemplates:Exception while getting hypervisor types from clusters: \"+e.getMessage());\n-            throw new CloudRuntimeException(\"updateSystemVmTemplates:Exception while getting hypervisor types from clusters\", e);\n-        }\n-\n-        Map<Hypervisor.HypervisorType, String> NewTemplateNameList = new HashMap<Hypervisor.HypervisorType, String>() {\n-            {\n-                put(Hypervisor.HypervisorType.XenServer, \"systemvm-xenserver-4.5\");\n-                put(Hypervisor.HypervisorType.VMware, \"systemvm-vmware-4.5\");\n-                put(Hypervisor.HypervisorType.KVM, \"systemvm-kvm-4.5\");\n-                put(Hypervisor.HypervisorType.LXC, \"systemvm-lxc-4.5\");\n-                put(Hypervisor.HypervisorType.Hyperv, \"systemvm-hyperv-4.5\");\n-            }\n-        };\n-\n-        Map<Hypervisor.HypervisorType, String> routerTemplateConfigurationNames = new HashMap<Hypervisor.HypervisorType, String>() {\n-            {\n-                put(Hypervisor.HypervisorType.XenServer, \"router.template.xen\");\n-                put(Hypervisor.HypervisorType.VMware, \"router.template.vmware\");\n-                put(Hypervisor.HypervisorType.KVM, \"router.template.kvm\");\n-                put(Hypervisor.HypervisorType.LXC, \"router.template.lxc\");\n-                put(Hypervisor.HypervisorType.Hyperv, \"router.template.hyperv\");\n-            }\n-        };\n-\n-        Map<Hypervisor.HypervisorType, String> newTemplateUrl = new HashMap<Hypervisor.HypervisorType, String>() {\n-            {\n-                put(Hypervisor.HypervisorType.XenServer, \"http://download.cloud.com/templates/4.5/systemvm64template-4.5-xen.vhd.bz2\");\n-                put(Hypervisor.HypervisorType.VMware, \"http://download.cloud.com/templates/4.5/systemvm64template-4.5-vmware.ova\");\n-                put(Hypervisor.HypervisorType.KVM, \"http://download.cloud.com/templates/4.5/systemvm64template-4.5-kvm.qcow2.bz2\");\n-                put(Hypervisor.HypervisorType.LXC, \"http://download.cloud.com/templates/4.5/systemvm64template-4.5-kvm.qcow2.bz2\");\n-                put(Hypervisor.HypervisorType.Hyperv, \"http://download.cloud.com/templates/4.5/systemvm64template-4.5-hyperv.vhd.zip\");\n-            }\n-        };\n-\n-        Map<Hypervisor.HypervisorType, String> newTemplateChecksum = new HashMap<Hypervisor.HypervisorType, String>() {\n-            {\n-                put(Hypervisor.HypervisorType.XenServer, \"2b15ab4401c2d655264732d3fc600241\");\n-                put(Hypervisor.HypervisorType.VMware, \"3106a79a4ce66cd7f6a7c50e93f2db57\");\n-                put(Hypervisor.HypervisorType.KVM, \"aa9f501fecd3de1daeb9e2f357f6f002\");\n-                put(Hypervisor.HypervisorType.LXC, \"aa9f501fecd3de1daeb9e2f357f6f002\");\n-                put(Hypervisor.HypervisorType.Hyperv, \"70bd30ea02ee9ed67d2c6b85c179cee9\");\n-            }\n-        };\n-\n-        for (Map.Entry<Hypervisor.HypervisorType, String> hypervisorAndTemplateName : NewTemplateNameList.entrySet()) {\n-            s_logger.debug(\"Updating \" + hypervisorAndTemplateName.getKey() + \" System Vms\");\n-            try  (PreparedStatement pstmt = conn.prepareStatement(\"select id from `cloud`.`vm_template` where name = ? and removed is null order by id desc limit 1\")) {\n-                //Get 4.5.0 system Vm template Id for corresponding hypervisor\n-                long templateId = -1;\n-                pstmt.setString(1, hypervisorAndTemplateName.getValue());\n-                try (ResultSet rs = pstmt.executeQuery()) {\n-                    if(rs.next()){\n-                        templateId = rs.getLong(1);\n-                    }\n-                } catch (SQLException e)\n-                {\n-                    s_logger.error(\"updateSystemVmTemplates:Exception while getting ids of templates: \"+e.getMessage());\n-                    throw new CloudRuntimeException(\"updateSystemVmTemplates:Exception while getting ids of templates\", e);\n-                }\n-\n-                // change template type to SYSTEM\n-                if (templateId != -1) {\n-                    try(PreparedStatement templ_type_pstmt = conn.prepareStatement(\"update `cloud`.`vm_template` set type='SYSTEM' where id = ?\");)\n-                    {\n-                        templ_type_pstmt.setLong(1, templateId);\n-                        templ_type_pstmt.executeUpdate();\n-                    }\n-                    catch (SQLException e)\n-                    {\n-                        s_logger.error(\"updateSystemVmTemplates:Exception while updating template with id \" + templateId + \" to be marked as 'system': \"+e.getMessage());\n-                        throw new CloudRuntimeException(\"updateSystemVmTemplates:Exception while updating template with id \" + templateId + \" to be marked as 'system'\", e);\n-                    }\n-                    // update template ID of system Vms\n-                    try(PreparedStatement update_templ_id_pstmt = conn.prepareStatement(\"update `cloud`.`vm_instance` set vm_template_id = ? where type <> 'User' and hypervisor_type = ?\");)\n-                    {\n-                        update_templ_id_pstmt.setLong(1, templateId);\n-                        update_templ_id_pstmt.setString(2, hypervisorAndTemplateName.getKey().toString());\n-                        update_templ_id_pstmt.executeUpdate();\n-                    }catch (Exception e)\n-                    {\n-                        s_logger.error(\"updateSystemVmTemplates:Exception while setting template for \" + hypervisorAndTemplateName.getKey().toString() + \" to \" + templateId + \": \"+e.getMessage());\n-                        throw new CloudRuntimeException(\"updateSystemVmTemplates:Exception while setting template for \" + hypervisorAndTemplateName.getKey().toString() + \" to \" + templateId, e);\n-                    }\n-                    // Change value of global configuration parameter router.template.* for the corresponding hypervisor\n-                    try(PreparedStatement update_pstmt = conn.prepareStatement(\"UPDATE `cloud`.`configuration` SET value = ? WHERE name = ?\");) {\n-                        update_pstmt.setString(1, hypervisorAndTemplateName.getValue());\n-                        update_pstmt.setString(2, routerTemplateConfigurationNames.get(hypervisorAndTemplateName.getKey()));\n-                        update_pstmt.executeUpdate();\n-                    }catch (SQLException e)\n-                    {\n-                        s_logger.error(\"updateSystemVmTemplates:Exception while setting \" + routerTemplateConfigurationNames.get(hypervisorAndTemplateName.getKey()) + \" to \" + hypervisorAndTemplateName.getValue() + \": \"+e.getMessage());\n-                        throw new CloudRuntimeException(\"updateSystemVmTemplates:Exception while setting \" + routerTemplateConfigurationNames.get(hypervisorAndTemplateName.getKey()) + \" to \" + hypervisorAndTemplateName.getValue(), e);\n-                    }\n-                } else {\n-                    if (hypervisorsListInUse.contains(hypervisorAndTemplateName.getKey())){\n-                        throw new CloudRuntimeException(\"4.5.0 \" + hypervisorAndTemplateName.getKey() + \" SystemVm template not found. Cannot upgrade system Vms\");\n-                    } else {\n-                        s_logger.warn(\"4.5.0 \" + hypervisorAndTemplateName.getKey() + \" SystemVm template not found. \" + hypervisorAndTemplateName.getKey() + \" hypervisor is not used, so not failing upgrade\");\n-                        // Update the latest template URLs for corresponding hypervisor\n-                        try(PreparedStatement update_templ_url_pstmt = conn.prepareStatement(\"UPDATE `cloud`.`vm_template` SET url = ? , checksum = ? WHERE hypervisor_type = ? AND type = 'SYSTEM' AND removed is null order by id desc limit 1\");) {\n-                            update_templ_url_pstmt.setString(1, newTemplateUrl.get(hypervisorAndTemplateName.getKey()));\n-                            update_templ_url_pstmt.setString(2, newTemplateChecksum.get(hypervisorAndTemplateName.getKey()));\n-                            update_templ_url_pstmt.setString(3, hypervisorAndTemplateName.getKey().toString());\n-                            update_templ_url_pstmt.executeUpdate();\n-                        }catch (SQLException e)\n-                        {\n-                            s_logger.error(\"updateSystemVmTemplates:Exception while updating 'url' and 'checksum' for hypervisor type \" + hypervisorAndTemplateName.getKey().toString() + \": \"+e.getMessage());\n-                            throw new CloudRuntimeException(\"updateSystemVmTemplates:Exception while updating 'url' and 'checksum' for hypervisor type \" + hypervisorAndTemplateName.getKey().toString(), e);\n-                        }\n-                    }\n-                }\n-            } catch (SQLException e) {\n-                s_logger.error(\"updateSystemVmTemplates:Exception while getting ids of templates: \"+e.getMessage());\n-                throw new CloudRuntimeException(\"updateSystemVmTemplates:Exception while getting ids of templates\", e);\n-            }\n-        }\n-        s_logger.debug(\"Updating System Vm Template IDs Complete\");\n-    }\n-\n-\n     private void dropInvalidKeyFromStoragePoolTable(Connection conn) {\n         HashMap<String, List<String>> uniqueKeys = new HashMap<String, List<String>>();\n         List<String> keys = new ArrayList<String>();",
                "raw_url": "https://github.com/apache/cloudstack/raw/b3b56e2cd84a7d716735c4b684f271247192dff3/engine/schema/src/com/cloud/upgrade/dao/Upgrade442to450.java",
                "sha": "a9fb08905be2d9b9a34a62bae1dfe75a4cda49a2",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/b3b56e2cd84a7d716735c4b684f271247192dff3/pom.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/pom.xml?ref=b3b56e2cd84a7d716735c4b684f271247192dff3",
                "deletions": 1,
                "filename": "pom.xml",
                "patch": "@@ -60,7 +60,7 @@\n     <cs.pool.version>1.6</cs.pool.version>\n     <cs.codec.version>1.10</cs.codec.version>\n     <cs.configuration.version>1.10</cs.configuration.version>\n-    <cs.collections.version>3.2.1</cs.collections.version>\n+    <cs.collections.version>3.2.2</cs.collections.version>\n     <cs.logging.version>1.1.1</cs.logging.version>\n     <cs.discovery.version>0.5</cs.discovery.version>\n     <cs.ejb.version>3.0</cs.ejb.version>",
                "raw_url": "https://github.com/apache/cloudstack/raw/b3b56e2cd84a7d716735c4b684f271247192dff3/pom.xml",
                "sha": "5ded8b4f70f99a326020f5649d3885c712e9620c",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/b3b56e2cd84a7d716735c4b684f271247192dff3/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java?ref=b3b56e2cd84a7d716735c4b684f271247192dff3",
                "deletions": 4,
                "filename": "server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "patch": "@@ -1013,10 +1013,12 @@ protected void updateRoutersRedundantState(final List<DomainRouterVO> routers) {\n                         s_logger.warn(\"Unable to update router \" + router.getHostName() + \"'s status\");\n                     }\n                     RedundantState state = RedundantState.UNKNOWN;\n-                    if (answer != null && answer.getResult()) {\n-                        state = answer.getState();\n-                    } else {\n-                        s_logger.info(\"Agent response doesn't seem to be correct ==> \" + answer.getResult());\n+                    if (answer != null) {\n+                        if (answer.getResult()) {\n+                            state = answer.getState();\n+                        } else {\n+                            s_logger.info(\"Agent response doesn't seem to be correct ==> \" + answer.getResult());\n+                        }\n                     }\n                     router.setRedundantState(state);\n                     updated = true;",
                "raw_url": "https://github.com/apache/cloudstack/raw/b3b56e2cd84a7d716735c4b684f271247192dff3/server/src/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java",
                "sha": "ca1f67dbb69b7b98ae38a851e54398cd05075875",
                "status": "modified"
            }
        ],
        "message": "Merge release branch 4.6 to master\n\n* 4.6:\n  CLOUDSTACK-9053 security upgrade as per COLLECTIONS-580\n  CLOUDSTACK-9055: fix NPE in updating Redundant State of VPC networks\n  CLOUDSTACK-9057 remove old system vm upgrade code",
        "parent": "https://github.com/apache/cloudstack/commit/76f430cfc3e525d3442b036739442e7abe084b1d",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualNetworkApplianceManagerImplTest.java"
        ]
    },
    "cloudstack_b41a78c": {
        "bug_id": "cloudstack_b41a78c",
        "commit": "https://github.com/apache/cloudstack/commit/b41a78ce0f9cbc2981f6038e3e020ebab564ba0b",
        "file": [
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/cloudstack/blob/b41a78ce0f9cbc2981f6038e3e020ebab564ba0b/vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java",
                "changes": 60,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java?ref=b41a78ce0f9cbc2981f6038e3e020ebab564ba0b",
                "deletions": 28,
                "filename": "vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java",
                "patch": "@@ -1056,25 +1056,27 @@ public void attachDisk(String[] vmdkDatastorePathChain, ManagedObjectReference m\n             s_logger.trace(\"vCenter API trace - attachDisk(). target MOR: \" + _mor.getValue() + \", vmdkDatastorePath: \" + new Gson().toJson(vmdkDatastorePathChain) +\n                     \", datastore: \" + morDs.getValue());\n \n-        VirtualDevice newDisk = VmwareHelper.prepareDiskDevice(this, null, getScsiDeviceControllerKey(), vmdkDatastorePathChain, morDs, -1, 1);\n-        VirtualMachineConfigSpec reConfigSpec = new VirtualMachineConfigSpec();\n-        VirtualDeviceConfigSpec deviceConfigSpec = new VirtualDeviceConfigSpec();\n+        synchronized (_mor.getValue().intern()) {\n+            VirtualDevice newDisk = VmwareHelper.prepareDiskDevice(this, null, getScsiDeviceControllerKey(), vmdkDatastorePathChain, morDs, -1, 1);\n+            VirtualMachineConfigSpec reConfigSpec = new VirtualMachineConfigSpec();\n+            VirtualDeviceConfigSpec deviceConfigSpec = new VirtualDeviceConfigSpec();\n \n-        deviceConfigSpec.setDevice(newDisk);\n-        deviceConfigSpec.setOperation(VirtualDeviceConfigSpecOperation.ADD);\n+            deviceConfigSpec.setDevice(newDisk);\n+            deviceConfigSpec.setOperation(VirtualDeviceConfigSpecOperation.ADD);\n \n-        reConfigSpec.getDeviceChange().add(deviceConfigSpec);\n+            reConfigSpec.getDeviceChange().add(deviceConfigSpec);\n \n-        ManagedObjectReference morTask = _context.getService().reconfigVMTask(_mor, reConfigSpec);\n-        boolean result = _context.getVimClient().waitForTask(morTask);\n+            ManagedObjectReference morTask = _context.getService().reconfigVMTask(_mor, reConfigSpec);\n+            boolean result = _context.getVimClient().waitForTask(morTask);\n \n-        if (!result) {\n-            if (s_logger.isTraceEnabled())\n-                s_logger.trace(\"vCenter API trace - attachDisk() done(failed)\");\n-            throw new Exception(\"Failed to attach disk due to \" + TaskMO.getTaskFailureInfo(_context, morTask));\n-        }\n+            if (!result) {\n+                if (s_logger.isTraceEnabled())\n+                    s_logger.trace(\"vCenter API trace - attachDisk() done(failed)\");\n+                throw new Exception(\"Failed to attach disk due to \" + TaskMO.getTaskFailureInfo(_context, morTask));\n+            }\n \n-        _context.waitForTaskProgressDone(morTask);\n+            _context.waitForTaskProgressDone(morTask);\n+        }\n \n         if (s_logger.isTraceEnabled())\n             s_logger.trace(\"vCenter API trace - attachDisk() done(successfully)\");\n@@ -1085,25 +1087,27 @@ public void attachDisk(Pair<String, ManagedObjectReference>[] vmdkDatastorePathC\n         if (s_logger.isTraceEnabled())\n             s_logger.trace(\"vCenter API trace - attachDisk(). target MOR: \" + _mor.getValue() + \", vmdkDatastorePath: \" + new Gson().toJson(vmdkDatastorePathChain));\n \n-        VirtualDevice newDisk = VmwareHelper.prepareDiskDevice(this, controllerKey, vmdkDatastorePathChain, -1, 1);\n-        VirtualMachineConfigSpec reConfigSpec = new VirtualMachineConfigSpec();\n-        VirtualDeviceConfigSpec deviceConfigSpec = new VirtualDeviceConfigSpec();\n+        synchronized (_mor.getValue().intern()) {\n+            VirtualDevice newDisk = VmwareHelper.prepareDiskDevice(this, controllerKey, vmdkDatastorePathChain, -1, 1);\n+            VirtualMachineConfigSpec reConfigSpec = new VirtualMachineConfigSpec();\n+            VirtualDeviceConfigSpec deviceConfigSpec = new VirtualDeviceConfigSpec();\n \n-        deviceConfigSpec.setDevice(newDisk);\n-        deviceConfigSpec.setOperation(VirtualDeviceConfigSpecOperation.ADD);\n+            deviceConfigSpec.setDevice(newDisk);\n+            deviceConfigSpec.setOperation(VirtualDeviceConfigSpecOperation.ADD);\n \n-        reConfigSpec.getDeviceChange().add(deviceConfigSpec);\n+            reConfigSpec.getDeviceChange().add(deviceConfigSpec);\n \n-        ManagedObjectReference morTask = _context.getService().reconfigVMTask(_mor, reConfigSpec);\n-        boolean result = _context.getVimClient().waitForTask(morTask);\n+            ManagedObjectReference morTask = _context.getService().reconfigVMTask(_mor, reConfigSpec);\n+            boolean result = _context.getVimClient().waitForTask(morTask);\n \n-        if (!result) {\n-            if (s_logger.isTraceEnabled())\n-                s_logger.trace(\"vCenter API trace - attachDisk() done(failed)\");\n-            throw new Exception(\"Failed to attach disk due to \" + TaskMO.getTaskFailureInfo(_context, morTask));\n-        }\n+            if (!result) {\n+                if (s_logger.isTraceEnabled())\n+                    s_logger.trace(\"vCenter API trace - attachDisk() done(failed)\");\n+                throw new Exception(\"Failed to attach disk due to \" + TaskMO.getTaskFailureInfo(_context, morTask));\n+            }\n \n-        _context.waitForTaskProgressDone(morTask);\n+            _context.waitForTaskProgressDone(morTask);\n+        }\n \n         if (s_logger.isTraceEnabled())\n             s_logger.trace(\"vCenter API trace - attachDisk() done(successfully)\");",
                "raw_url": "https://github.com/apache/cloudstack/raw/b41a78ce0f9cbc2981f6038e3e020ebab564ba0b/vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java",
                "sha": "c2e9d7f8ee7e5631d8e4b97271e7705f3324b365",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-7248. [VMware] Extract volume fails with an NPE.\nSynchronize attach disk to VM on the VM object value instead of using a DB lock.",
        "parent": "https://github.com/apache/cloudstack/commit/bb7fc5994761cb56b142d418deb9080d59b3a3c3",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineMOTest.java"
        ]
    },
    "cloudstack_b4ef066": {
        "bug_id": "cloudstack_b4ef066",
        "commit": "https://github.com/apache/cloudstack/commit/b4ef066846b6eb9d94204fb421ae9eccdbf914b8",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/b4ef066846b6eb9d94204fb421ae9eccdbf914b8/core/src/com/cloud/user/dao/AccountDaoImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/core/src/com/cloud/user/dao/AccountDaoImpl.java?ref=b4ef066846b6eb9d94204fb421ae9eccdbf914b8",
                "deletions": 1,
                "filename": "core/src/com/cloud/user/dao/AccountDaoImpl.java",
                "patch": "@@ -174,7 +174,7 @@ public Account findActiveAccountByName(String accountName) {\n \t\n \t@Override\n \tpublic void markForCleanup(long accountId) {\n-\t\tAccountVO account = findById(accountId);\n+\t\tAccountVO account = findByIdIncludingRemoved(accountId);\n \t\tif (!account.getNeedsCleanup()) {\n \t\t\taccount.setNeedsCleanup(true);\n         \tupdate(accountId, account);",
                "raw_url": "https://github.com/apache/cloudstack/raw/b4ef066846b6eb9d94204fb421ae9eccdbf914b8/core/src/com/cloud/user/dao/AccountDaoImpl.java",
                "sha": "5715ac585155a8f69b74e339eb6f2a5c807e6eef",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/b4ef066846b6eb9d94204fb421ae9eccdbf914b8/utils/src/com/cloud/utils/db/GenericDaoBase.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/com/cloud/utils/db/GenericDaoBase.java?ref=b4ef066846b6eb9d94204fb421ae9eccdbf914b8",
                "deletions": 1,
                "filename": "utils/src/com/cloud/utils/db/GenericDaoBase.java",
                "patch": "@@ -1137,7 +1137,7 @@ public T persist(final T entity) {\n             }\n         }\n         \n-        return _idField != null ? findById(id) : null;\n+        return _idField != null ? findByIdIncludingRemoved(id) : null;\n     }\n \n     @DB(txn=false)",
                "raw_url": "https://github.com/apache/cloudstack/raw/b4ef066846b6eb9d94204fb421ae9eccdbf914b8/utils/src/com/cloud/utils/db/GenericDaoBase.java",
                "sha": "236d49980bb507b71fd3fdf2045162859c36d5b3",
                "status": "modified"
            }
        ],
        "message": "bug 6782:  fix NPEs associated with looking up the account after it's been deleted.  When cleaning up the account, we delete the accountVO first, then stop/destroy VMs, routers, etc.  During this cleanup, there are times when the account needs to be retrieved, and since it's been removed it has to be found by id 'including removed' in order to find it.\n\nstatus 6782: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/50c175d6c1d66b6d74dc6126d9e9f98ff36fe87b",
        "repo": "cloudstack",
        "unit_tests": [
            "GenericDaoBaseTest.java"
        ]
    },
    "cloudstack_b5db68e": {
        "bug_id": "cloudstack_b5db68e",
        "commit": "https://github.com/apache/cloudstack/commit/b5db68e2d1aa8e44b01a4298ffd2696987606afd",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/b5db68e2d1aa8e44b01a4298ffd2696987606afd/plugins/storage/volume/default/src/org/apache/cloudstack/storage/datastore/lifecycle/CloudStackPrimaryDataStoreLifeCycleImpl.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/storage/volume/default/src/org/apache/cloudstack/storage/datastore/lifecycle/CloudStackPrimaryDataStoreLifeCycleImpl.java?ref=b5db68e2d1aa8e44b01a4298ffd2696987606afd",
                "deletions": 14,
                "filename": "plugins/storage/volume/default/src/org/apache/cloudstack/storage/datastore/lifecycle/CloudStackPrimaryDataStoreLifeCycleImpl.java",
                "patch": "@@ -80,7 +80,6 @@\n     private static final Logger s_logger = Logger.getLogger(CloudStackPrimaryDataStoreLifeCycleImpl.class);\n     @Inject\n     protected ResourceManager _resourceMgr;\n-    protected List<StoragePoolDiscoverer> _discoverers;\n     @Inject\n     PrimaryDataStoreDao primaryDataStoreDao;\n     @Inject\n@@ -260,19 +259,7 @@ public DataStore initialize(Map<String, Object> dsInfos) {\n                 parameters.setPort(port);\n                 parameters.setPath(hostPath);\n             } else {\n-                for (StoragePoolDiscoverer discoverer : _discoverers) {\n-                    Map<? extends StoragePool, Map<String, String>> pools;\n-                    try {\n-                        pools = discoverer.find(zoneId, podId, uri, details);\n-                    } catch (DiscoveryException e) {\n-                        throw new IllegalArgumentException(\"Not enough information for discovery \" + uri, e);\n-                    }\n-                    if (pools != null) {\n-                        Map.Entry<? extends StoragePool, Map<String, String>> entry = pools.entrySet().iterator().next();\n-                        details = entry.getValue();\n-                        break;\n-                    }\n-                }\n+                throw new IllegalArgumentException(\"iSCSI needs to have LUN number\");\n             }\n         } else if (scheme.equalsIgnoreCase(\"iso\")) {\n             if (port == -1) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/b5db68e2d1aa8e44b01a4298ffd2696987606afd/plugins/storage/volume/default/src/org/apache/cloudstack/storage/datastore/lifecycle/CloudStackPrimaryDataStoreLifeCycleImpl.java",
                "sha": "ca60bc17b7e5446d45baf3b9f9a7052fbe7931d4",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-7226: in case lun number is not provided, addprimarystorage cmd should report error instead of NPE",
        "parent": "https://github.com/apache/cloudstack/commit/685a58a8433f914f788d5bbdbabd41662d3dd2f4",
        "repo": "cloudstack",
        "unit_tests": [
            "CloudStackPrimaryDataStoreLifeCycleImplTest.java"
        ]
    },
    "cloudstack_b666a1f": {
        "bug_id": "cloudstack_b666a1f",
        "commit": "https://github.com/apache/cloudstack/commit/b666a1f3a5bcd17663af1675e82759c3ff8cbeb9",
        "file": [
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/cloudstack/blob/b666a1f3a5bcd17663af1675e82759c3ff8cbeb9/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 49,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=b666a1f3a5bcd17663af1675e82759c3ff8cbeb9",
                "deletions": 22,
                "filename": "engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -773,8 +773,9 @@ public void advanceStart(String vmUuid, Map<VirtualMachineProfile.Param, Object>\n             try {\n                 orchestrateStart(vmUuid, params, planToDeploy, planner);\n             } finally {\n-                if (VmJobEnabled.value())\n+                if (placeHolder != null) {\n                     _workJobDao.expunge(placeHolder.getId());\n+                }\n             }\n         } else {\n             Outcome<VirtualMachine> outcome = startVmThroughJobQueue(vmUuid, params, planToDeploy, planner);\n@@ -1350,8 +1351,9 @@ public void advanceStop(String vmUuid, boolean cleanUpEvenIfUnableToStop)\n             try {\n                 orchestrateStop(vmUuid, cleanUpEvenIfUnableToStop);\n             } finally {\n-                if (VmJobEnabled.value())\n+                if (placeHolder != null) {\n                     _workJobDao.expunge(placeHolder.getId());\n+                }\n             }\n \n         } else {\n@@ -1449,7 +1451,7 @@ private void advanceStop(VMInstanceVO vm, boolean cleanUpEvenIfUnableToStop) thr\n             if (s_logger.isDebugEnabled()) {\n                 s_logger.debug(\"Unable to transition the state but we're moving on because it's forced stop\");\n             }\n-            if (state == State.Starting || state == State.Migrating) {\n+            if ((state == State.Starting) || (state == State.Migrating) || (state == State.Stopping)) {\n                 if (work != null) {\n                     doCleanup = true;\n                 } else {\n@@ -1458,8 +1460,6 @@ private void advanceStop(VMInstanceVO vm, boolean cleanUpEvenIfUnableToStop) thr\n                     }\n                     throw new CloudRuntimeException(\"Work item not found, We cannot stop \" + vm + \" when it is in state \" + vm.getState());\n                 }\n-            } else if (state == State.Stopping) {\n-                doCleanup = true;\n             }\n \n             if (doCleanup) {\n@@ -1679,8 +1679,9 @@ public void storageMigration(String vmUuid, StoragePool destPool) {\n             try {\n                 orchestrateStorageMigration(vmUuid, destPool);\n             } finally {\n-                if (VmJobEnabled.value())\n+                if (placeHolder != null) {\n                     _workJobDao.expunge(placeHolder.getId());\n+                }\n             }\n         } else {\n             Outcome<VirtualMachine> outcome = migrateVmStorageThroughJobQueue(vmUuid, destPool);\n@@ -1773,8 +1774,9 @@ public void migrate(String vmUuid, long srcHostId, DeployDestination dest)\n             try {\n                 orchestrateMigrate(vmUuid, srcHostId, dest);\n             } finally {\n-                if (VmJobEnabled.value())\n+                if (placeHolder != null) {\n                     _workJobDao.expunge(placeHolder.getId());\n+                }\n             }\n         } else {\n             Outcome<VirtualMachine> outcome = migrateVmThroughJobQueue(vmUuid, srcHostId, dest);\n@@ -2071,8 +2073,9 @@ public void migrateWithStorage(String vmUuid, long srcHostId, long destHostId, M\n             try {\n                 orchestrateMigrateWithStorage(vmUuid, srcHostId, destHostId, volumeToPool);\n             } finally {\n-                if (VmJobEnabled.value())\n+                if (placeHolder != null) {\n                     _workJobDao.expunge(placeHolder.getId());\n+                }\n             }\n \n         } else {\n@@ -2417,8 +2420,9 @@ public void advanceReboot(String vmUuid, Map<VirtualMachineProfile.Param, Object\n             try {\n                 orchestrateReboot(vmUuid, params);\n             } finally {\n-                if (VmJobEnabled.value())\n+                if (placeHolder != null) {\n                     _workJobDao.expunge(placeHolder.getId());\n+                }\n             }\n         } else {\n             Outcome<VirtualMachine> outcome = rebootVmThroughJobQueue(vmUuid, params);\n@@ -3230,12 +3234,11 @@ protected void runInContext() {\n         public String hostUuid;\n         public VMInstanceVO vm;\n \n-        @SuppressWarnings(\"unchecked\")\n         public AgentVmInfo(String name, VMInstanceVO vm, State state, String host) {\n-            name = name;\n-            state = state;\n-            vm = vm;\n-            hostUuid = host;\n+            this.name = name;\n+            this.state = state;\n+            this.vm = vm;\n+            this.hostUuid = host;\n         }\n \n         public AgentVmInfo(String name, VMInstanceVO vm, State state) {\n@@ -3340,8 +3343,9 @@ public NicProfile addVmToNetwork(VirtualMachine vm, Network network, NicProfile\n             try {\n                 return orchestrateAddVmToNetwork(vm, network, requested);\n             } finally {\n-                if (VmJobEnabled.value())\n+                if (placeHolder != null) {\n                     _workJobDao.expunge(placeHolder.getId());\n+                }\n             }\n         } else {\n             Outcome<VirtualMachine> outcome = addVmToNetworkThroughJobQueue(vm, network, requested);\n@@ -3351,7 +3355,7 @@ public NicProfile addVmToNetwork(VirtualMachine vm, Network network, NicProfile\n             } catch (InterruptedException e) {\n                 throw new RuntimeException(\"Operation is interrupted\", e);\n             } catch (java.util.concurrent.ExecutionException e) {\n-                throw new RuntimeException(\"Execution excetion\", e);\n+                throw new RuntimeException(\"Execution exception\", e);\n             }\n \n             Object jobException = _jobMgr.unmarshallResultObject(outcome.getJob());\n@@ -3454,8 +3458,9 @@ public boolean removeNicFromVm(VirtualMachine vm, Nic nic)\n             try {\n                 return orchestrateRemoveNicFromVm(vm, nic);\n             } finally {\n-                if (VmJobEnabled.value())\n+                if (placeHolder != null) {\n                     _workJobDao.expunge(placeHolder.getId());\n+                }\n             }\n \n         } else {\n@@ -3706,8 +3711,9 @@ public void migrateForScale(String vmUuid, long srcHostId, DeployDestination des\n             try {\n                 orchestrateMigrateForScale(vmUuid, srcHostId, dest, oldSvcOfferingId);\n             } finally {\n-                if (VmJobEnabled.value())\n+                if (placeHolder != null) {\n                     _workJobDao.expunge(placeHolder.getId());\n+                }\n             }\n         } else {\n             Outcome<VirtualMachine> outcome = migrateVmForScaleThroughJobQueue(vmUuid, srcHostId, dest, oldSvcOfferingId);\n@@ -3970,8 +3976,9 @@ public VMInstanceVO reConfigureVm(String vmUuid, ServiceOffering oldServiceOffer\n             try {\n                 return orchestrateReConfigureVm(vmUuid, oldServiceOffering, reconfiguringOnExistingHost);\n             } finally {\n-                if (VmJobEnabled.value())\n+                if (placeHolder != null) {\n                     _workJobDao.expunge(placeHolder.getId());\n+                }\n             }\n         } else {\n             Outcome<VirtualMachine> outcome = reconfigureVmThroughJobQueue(vmUuid, oldServiceOffering, reconfiguringOnExistingHost);\n@@ -4023,7 +4030,7 @@ private VMInstanceVO orchestrateReConfigureVm(String vmUuid, ServiceOffering old\n         work.setStep(Step.Prepare);\n         work.setResourceType(ItWorkVO.ResourceType.Host);\n         work.setResourceId(vm.getHostId());\n-        work = _workDao.persist(work);\n+        _workDao.persist(work);\n         boolean success = false;\n         try {\n             if (reconfiguringOnExistingHost) {\n@@ -4045,8 +4052,6 @@ private VMInstanceVO orchestrateReConfigureVm(String vmUuid, ServiceOffering old\n         } catch (AgentUnavailableException e) {\n             throw e;\n         } finally {\n-            // work.setStep(Step.Done);\n-            //_workDao.update(work.getId(), work);\n             if (!success) {\n                 _capacityMgr.releaseVmCapacity(vm, false, false, vm.getHostId()); // release the new capacity\n                 vm.setServiceOfferingId(oldServiceOffering.getId());",
                "raw_url": "https://github.com/apache/cloudstack/raw/b666a1f3a5bcd17663af1675e82759c3ff8cbeb9/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "4aa5fc80d9660d2f985db98124c33465bd99767f",
                "status": "modified"
            }
        ],
        "message": "Fixed issues reported by coverity NPEs, unwritten field access and self assignment\n\nSigned-off-by: Koushik Das <koushik@apache.org>",
        "parent": "https://github.com/apache/cloudstack/commit/a5902f1db4b14012ecd1d5660257655e9dfe4354",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_b727001": {
        "bug_id": "cloudstack_b727001",
        "commit": "https://github.com/apache/cloudstack/commit/b727001f483012012c061e8c352c1ebfe7d3fecd",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/b727001f483012012c061e8c352c1ebfe7d3fecd/server/src/com/cloud/network/element/VirtualRouterElement.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/element/VirtualRouterElement.java?ref=b727001f483012012c061e8c352c1ebfe7d3fecd",
                "deletions": 20,
                "filename": "server/src/com/cloud/network/element/VirtualRouterElement.java",
                "patch": "@@ -28,10 +28,10 @@\n import org.apache.cloudstack.api.command.admin.router.ConfigureVirtualRouterElementCmd;\n import org.apache.cloudstack.api.command.admin.router.CreateVirtualRouterElementCmd;\n import org.apache.cloudstack.api.command.admin.router.ListVirtualRouterElementsCmd;\n+import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n \n import org.apache.log4j.Logger;\n \n-import com.cloud.agent.api.PvlanSetupCommand;\n import com.cloud.agent.api.to.LoadBalancerTO;\n import com.cloud.configuration.ConfigurationManager;\n import com.cloud.dc.DataCenter;\n@@ -50,7 +50,6 @@\n import com.cloud.network.NetworkMigrationResponder;\n import com.cloud.network.NetworkModel;\n import com.cloud.network.Networks;\n-import com.cloud.network.Networks.BroadcastDomainType;\n import com.cloud.network.Networks.TrafficType;\n import com.cloud.network.PhysicalNetworkServiceProvider;\n import com.cloud.network.PublicIpAddress;\n@@ -87,7 +86,6 @@\n import com.cloud.utils.exception.CloudRuntimeException;\n import com.cloud.vm.DomainRouterVO;\n import com.cloud.vm.NicProfile;\n-import com.cloud.vm.NicVO;\n import com.cloud.vm.ReservationContext;\n import com.cloud.vm.UserVmManager;\n import com.cloud.vm.UserVmVO;\n@@ -100,22 +98,6 @@\n \n import com.google.gson.Gson;\n \n-import org.apache.cloudstack.api.command.admin.router.ConfigureVirtualRouterElementCmd;\n-import org.apache.cloudstack.api.command.admin.router.CreateVirtualRouterElementCmd;\n-import org.apache.cloudstack.api.command.admin.router.ListVirtualRouterElementsCmd;\n-import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n-\n-import org.apache.log4j.Logger;\n-\n-import javax.ejb.Local;\n-import javax.inject.Inject;\n-\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-\n @Local(value = {NetworkElement.class, FirewallServiceProvider.class, \n \t\t        DhcpServiceProvider.class, UserDataServiceProvider.class, \n \t\t        StaticNatServiceProvider.class, LoadBalancingServiceProvider.class,\n@@ -390,7 +372,7 @@ public boolean applyLBRules(Network network, List<LoadBalancingRule> rules) thro\n             \n             List<DomainRouterVO> routers = _routerDao.listByNetworkAndRole(network.getId(), Role.VIRTUAL_ROUTER);\n             if (routers == null || routers.isEmpty()) {\n-                s_logger.debug(\"Virtual router elemnt doesn't need to apply firewall rules on the backend; virtual \" +\n+                s_logger.debug(\"Virtual router elemnt doesn't need to apply lb rules on the backend; virtual \" +\n                 \t\t\"router doesn't exist in the network \" + network.getId());\n                 return true;\n             }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b727001f483012012c061e8c352c1ebfe7d3fecd/server/src/com/cloud/network/element/VirtualRouterElement.java",
                "sha": "3607284dbe4f3b102109a8d146afad31b1bcf529",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/b727001f483012012c061e8c352c1ebfe7d3fecd/server/src/com/cloud/network/element/VpcVirtualRouterElement.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/element/VpcVirtualRouterElement.java?ref=b727001f483012012c061e8c352c1ebfe7d3fecd",
                "deletions": 1,
                "filename": "server/src/com/cloud/network/element/VpcVirtualRouterElement.java",
                "patch": "@@ -464,7 +464,6 @@ public boolean applyACLItemsToPrivateGw(PrivateGateway gateway,List<? extends Ne\n         } else {\n             return true;\n         }\n-\n     }\n \n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/b727001f483012012c061e8c352c1ebfe7d3fecd/server/src/com/cloud/network/element/VpcVirtualRouterElement.java",
                "sha": "b45d1c1dc9e0b189932a7ef82482d4e47642ab31",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/cloudstack/blob/b727001f483012012c061e8c352c1ebfe7d3fecd/server/src/com/cloud/network/router/VpcVirtualNetworkApplianceManagerImpl.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/router/VpcVirtualNetworkApplianceManagerImpl.java?ref=b727001f483012012c061e8c352c1ebfe7d3fecd",
                "deletions": 15,
                "filename": "server/src/com/cloud/network/router/VpcVirtualNetworkApplianceManagerImpl.java",
                "patch": "@@ -287,23 +287,27 @@ public boolean removeVpcRouterFromGuestNetwork(VirtualRouter router, Network net\n             return false;\n         }\n         \n-        //Check if router is a part of the Guest network\n-        if (!_networkModel.isVmPartOfNetwork(router.getId(), network.getId())) {\n-            s_logger.debug(\"Router \" + router + \" is not a part of the Guest network \" + network);\n-            return true;\n-        }\n-        \n-        boolean result = setupVpcGuestNetwork(network, router, false, _networkModel.getNicProfile(router, network.getId(), null));\n-        if (!result) {\n-            s_logger.warn(\"Failed to destroy guest network config \" + network + \" on router \" + router);\n-            return false;\n-        }\n-        \n-        result = result && _itMgr.removeVmFromNetwork(router, network, null);\n-        \n-        if (result) {\n+        boolean result = true;\n+        try {\n+            //Check if router is a part of the Guest network\n+            if (!_networkModel.isVmPartOfNetwork(router.getId(), network.getId())) {\n+                s_logger.debug(\"Router \" + router + \" is not a part of the Guest network \" + network);\n+                return result;\n+            }\n+            \n+            result = setupVpcGuestNetwork(network, router, false, _networkModel.getNicProfile(router, network.getId(), null));\n+            if (!result) {\n+                s_logger.warn(\"Failed to destroy guest network config \" + network + \" on router \" + router);\n+                return false;\n+            }\n+            \n+            result = result && _itMgr.removeVmFromNetwork(router, network, null);\n+        } finally {\n+            if (result) {\n                 _routerDao.removeRouterFromGuestNetwork(router.getId(), network.getId());\n             }\n+        }\n+        \n         return result;\n     }\n     ",
                "raw_url": "https://github.com/apache/cloudstack/raw/b727001f483012012c061e8c352c1ebfe7d3fecd/server/src/com/cloud/network/router/VpcVirtualNetworkApplianceManagerImpl.java",
                "sha": "95b92aa9806352d392a55f0c5d8daa0d4b54f061",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/b727001f483012012c061e8c352c1ebfe7d3fecd/server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=b727001f483012012c061e8c352c1ebfe7d3fecd",
                "deletions": 1,
                "filename": "server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -2799,7 +2799,9 @@ public NicProfile addVmToNetwork(VirtualMachine vm, Network network, NicProfile\n                     return null;\n                 }\n             } finally {\n-                if (!result) {\n+                if (!result){\n+                    s_logger.debug(\"Removing nic \" + nic + \" from vm \" + vmProfile.getVirtualMachine()\n+                            + \" as nic plug failed on the backend\");\n                     _networkMgr.removeNic(vmProfile, _nicsDao.findById(nic.getId()));\n                 }\n             }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b727001f483012012c061e8c352c1ebfe7d3fecd/server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "7c19c28f990cec71bcc95b25ef217938f9531400",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-4315: VPC - when fail to add nic to the VR, a) remove the nic b) remove the reference to nic from router_network_ref table. Before the fix b) was missing, and it caused NPEs when tried to apply the rules on the routers not having nic in the network\n\nConflicts:\n\tserver/src/com/cloud/network/element/VirtualRouterElement.java\n\tserver/src/com/cloud/vm/VirtualMachineManagerImpl.java",
        "parent": "https://github.com/apache/cloudstack/commit/bea095fa477bb2780da5c741f8b1d23ebcfdc477",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_b7470bc": {
        "bug_id": "cloudstack_b7470bc",
        "commit": "https://github.com/apache/cloudstack/commit/b7470bc51c7d74be301f5fa12d7090e8b646e6bb",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/b7470bc51c7d74be301f5fa12d7090e8b646e6bb/server/src/main/java/com/cloud/server/ManagementServerImpl.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/server/ManagementServerImpl.java?ref=b7470bc51c7d74be301f5fa12d7090e8b646e6bb",
                "deletions": 3,
                "filename": "server/src/main/java/com/cloud/server/ManagementServerImpl.java",
                "patch": "@@ -37,8 +37,6 @@\n import javax.inject.Inject;\n import javax.naming.ConfigurationException;\n \n-import com.cloud.storage.ScopeType;\n-import com.cloud.hypervisor.kvm.dpdk.DpdkHelper;\n import org.apache.cloudstack.acl.ControlledEntity;\n import org.apache.cloudstack.affinity.AffinityGroupProcessor;\n import org.apache.cloudstack.affinity.dao.AffinityGroupVMMapDao;\n@@ -613,6 +611,7 @@\n import com.cloud.hypervisor.HypervisorCapabilities;\n import com.cloud.hypervisor.HypervisorCapabilitiesVO;\n import com.cloud.hypervisor.dao.HypervisorCapabilitiesDao;\n+import com.cloud.hypervisor.kvm.dpdk.DpdkHelper;\n import com.cloud.info.ConsoleProxyInfo;\n import com.cloud.network.IpAddress;\n import com.cloud.network.dao.IPAddressDao;\n@@ -639,6 +638,7 @@\n import com.cloud.storage.GuestOSHypervisorVO;\n import com.cloud.storage.GuestOSVO;\n import com.cloud.storage.GuestOsCategory;\n+import com.cloud.storage.ScopeType;\n import com.cloud.storage.StorageManager;\n import com.cloud.storage.StoragePool;\n import com.cloud.storage.Volume;\n@@ -1442,7 +1442,11 @@ private boolean hasSuitablePoolsForVolume(final VolumeVO volume, final Host host\n         StoragePool srcVolumePool = _poolDao.findById(volume.getPoolId());\n         allPools = getAllStoragePoolCompatileWithVolumeSourceStoragePool(srcVolumePool);\n         allPools.remove(srcVolumePool);\n-        suitablePools = findAllSuitableStoragePoolsForVm(volume, vm, srcVolumePool);\n+        if (vm != null) {\n+            suitablePools = findAllSuitableStoragePoolsForVm(volume, vm, srcVolumePool);\n+        } else {\n+            suitablePools = allPools;\n+        }\n \n         return new Pair<List<? extends StoragePool>, List<? extends StoragePool>>(allPools, suitablePools);\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/b7470bc51c7d74be301f5fa12d7090e8b646e6bb/server/src/main/java/com/cloud/server/ManagementServerImpl.java",
                "sha": "6cb457471064abe30116e52f28131eda96e9671c",
                "status": "modified"
            }
        ],
        "message": "server: fix NPE for the case where volume is not attached to a VM (#3566)\n\nFixes NPE when trying to find suitable storage pools for a volume\r\nwhen the volume is not attached to a VM.\r\n\r\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/77f9ab27277cd1a5569b41b5acd425ecc46693e3",
        "repo": "cloudstack",
        "unit_tests": [
            "ManagementServerImplTest.java"
        ]
    },
    "cloudstack_b8adb96": {
        "bug_id": "cloudstack_b8adb96",
        "commit": "https://github.com/apache/cloudstack/commit/b8adb96ae1d1ce0066ce8c937fa0e15434c4acc4",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/b8adb96ae1d1ce0066ce8c937fa0e15434c4acc4/engine/schema/src/com/cloud/service/ServiceOfferingVO.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/service/ServiceOfferingVO.java?ref=b8adb96ae1d1ce0066ce8c937fa0e15434c4acc4",
                "deletions": 1,
                "filename": "engine/schema/src/com/cloud/service/ServiceOfferingVO.java",
                "patch": "@@ -176,7 +176,7 @@ public ServiceOfferingVO(ServiceOfferingVO offering) {\n             offering.getUseLocalStorage(),\n             offering.getSystemUse(),\n             true,\n-            offering.isCustomizedIops(),\n+            offering.isCustomizedIops()== null ? false:offering.isCustomizedIops(),\n             offering.getDomainId());\n         cpu = offering.getCpu();\n         ramSize = offering.getRamSize();",
                "raw_url": "https://github.com/apache/cloudstack/raw/b8adb96ae1d1ce0066ce8c937fa0e15434c4acc4/engine/schema/src/com/cloud/service/ServiceOfferingVO.java",
                "sha": "df68fb8ed04906f144c487fe8bb35e1e08b2e5ef",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-6575: Deploy VM failed with NPE while using custom compute offering",
        "parent": "https://github.com/apache/cloudstack/commit/b7b89b1297c0cf5e8599f28d54f28003502d80b5",
        "repo": "cloudstack",
        "unit_tests": [
            "ServiceOfferingVOTest.java"
        ]
    },
    "cloudstack_b9932a0": {
        "bug_id": "cloudstack_b9932a0",
        "commit": "https://github.com/apache/cloudstack/commit/b9932a0129c565db185e8f5ee03d68dbc7bce107",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/b9932a0129c565db185e8f5ee03d68dbc7bce107/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java?ref=b9932a0129c565db185e8f5ee03d68dbc7bce107",
                "deletions": 2,
                "filename": "engine/orchestration/src/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java",
                "patch": "@@ -934,10 +934,10 @@ public Volume migrateVolume(Volume volume, StoragePool destPool) throws StorageU\n             return result.getVolume();\n         } catch (InterruptedException e) {\n             s_logger.debug(\"migrate volume failed\", e);\n-            return null;\n+            throw new CloudRuntimeException(e.getMessage());\n         } catch (ExecutionException e) {\n             s_logger.debug(\"migrate volume failed\", e);\n-            return null;\n+            throw new CloudRuntimeException(e.getMessage());\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/b9932a0129c565db185e8f5ee03d68dbc7bce107/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java",
                "sha": "e439b33b2bf38e715963c18be6d445a2489923f9",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/cloudstack/blob/b9932a0129c565db185e8f5ee03d68dbc7bce107/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/VolumeApiServiceImpl.java?ref=b9932a0129c565db185e8f5ee03d68dbc7bce107",
                "deletions": 10,
                "filename": "server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "patch": "@@ -1817,6 +1817,8 @@ public Volume migrateVolume(MigrateVolumeCmd cmd) {\n                 if (jobResult != null) {\n                     if (jobResult instanceof ConcurrentOperationException)\n                         throw (ConcurrentOperationException)jobResult;\n+                    else if (jobResult instanceof RuntimeException)\n+                        throw (RuntimeException)jobResult;\n                     else if (jobResult instanceof Throwable)\n                         throw new RuntimeException(\"Unexpected exception\", (Throwable)jobResult);\n                 }\n@@ -1839,35 +1841,39 @@ private Volume orchestrateMigrateVolume(long volumeId, long destPoolId, boolean\n         assert (destPool != null);\n \n         Volume newVol = null;\n-        if (liveMigrateVolume) {\n-            newVol = liveMigrateVolume(vol, destPool);\n-        } else {\n-            try {\n+        try {\n+            if (liveMigrateVolume) {\n+                newVol = liveMigrateVolume(vol, destPool);\n+            } else {\n                 newVol = _volumeMgr.migrateVolume(vol, destPool);\n-            } catch (StorageUnavailableException e) {\n-                s_logger.debug(\"Failed to migrate volume\", e);\n             }\n+        } catch (StorageUnavailableException e) {\n+            s_logger.debug(\"Failed to migrate volume\", e);\n+            throw new CloudRuntimeException(e.getMessage());\n+        }  catch (Exception e) {\n+            s_logger.debug(\"Failed to migrate volume\", e);\n+            throw new CloudRuntimeException(e.getMessage());\n         }\n         return newVol;\n     }\n \n     @DB\n-    protected Volume liveMigrateVolume(Volume volume, StoragePool destPool) {\n+    protected Volume liveMigrateVolume(Volume volume, StoragePool destPool) throws StorageUnavailableException {\n         VolumeInfo vol = volFactory.getVolume(volume.getId());\n         AsyncCallFuture<VolumeApiResult> future = volService.migrateVolume(vol, (DataStore)destPool);\n         try {\n             VolumeApiResult result = future.get();\n             if (result.isFailed()) {\n                 s_logger.debug(\"migrate volume failed:\" + result.getResult());\n-                return null;\n+                throw new StorageUnavailableException(\"Migrate volume failed: \" + result.getResult(), destPool.getId());\n             }\n             return result.getVolume();\n         } catch (InterruptedException e) {\n             s_logger.debug(\"migrate volume failed\", e);\n-            return null;\n+            throw new CloudRuntimeException(e.getMessage());\n         } catch (ExecutionException e) {\n             s_logger.debug(\"migrate volume failed\", e);\n-            return null;\n+            throw new CloudRuntimeException(e.getMessage());\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/b9932a0129c565db185e8f5ee03d68dbc7bce107/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "sha": "6d74fa43eb7cabeea0fdde7faa72a8902886c4e5",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-8122. Handle NPE thrown during migration failures.\nWhen migration fails instead of returning NULL, throw the exception.\n\n(cherry picked from commit a5a65c7b551ee5cc32588997937267b716eff681)\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/bcbfe3bdeefedf4f53e1b5bade4e220fb8d23a57",
        "repo": "cloudstack",
        "unit_tests": [
            "VolumeApiServiceImplTest.java"
        ]
    },
    "cloudstack_bb1f000": {
        "bug_id": "cloudstack_bb1f000",
        "commit": "https://github.com/apache/cloudstack/commit/bb1f00041479d8a13c7c0e2300521575d57a0bd7",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/cloudstack/blob/bb1f00041479d8a13c7c0e2300521575d57a0bd7/api/src/com/cloud/api/commands/RegisterSSHKeyPairCmd.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/api/commands/RegisterSSHKeyPairCmd.java?ref=bb1f00041479d8a13c7c0e2300521575d57a0bd7",
                "deletions": 0,
                "filename": "api/src/com/cloud/api/commands/RegisterSSHKeyPairCmd.java",
                "patch": "@@ -24,6 +24,7 @@\n import com.cloud.api.BaseCmd;\n import com.cloud.api.Implementation;\n import com.cloud.api.Parameter;\n+import com.cloud.api.BaseCmd.CommandType;\n import com.cloud.api.response.SSHKeyPairResponse;\n import com.cloud.user.Account;\n import com.cloud.user.SSHKeyPair;\n@@ -45,6 +46,12 @@\n     @Parameter(name=\"publickey\", type=CommandType.STRING, required=true, description=\"Public key material of the keypair\") \n     private String publicKey;\n \n+    //Owner information\n+    @Parameter(name=ApiConstants.ACCOUNT, type=CommandType.STRING, description=\"an optional account for the ssh key. Must be used with domainId.\")\n+    private String accountName;\n+    \n+    @Parameter(name=ApiConstants.DOMAIN_ID, type=CommandType.LONG, description=\"an optional domainId for the ssh key. If the account parameter is used, domainId must also be used.\")\n+    private Long domainId;\n     \n     /////////////////////////////////////////////////////\n     /////////////////// Accessors ///////////////////////\n@@ -58,6 +65,13 @@ public String getPublicKey() {\n \t\treturn publicKey;\n \t}\n \n+\tpublic String getAccountName() {\n+\t    return accountName;\n+\t}\n+\t    \n+    public Long getDomainId() {\n+        return domainId;\n+    }\n     \n     /////////////////////////////////////////////////////\n     /////////////// API Implementation///////////////////",
                "raw_url": "https://github.com/apache/cloudstack/raw/bb1f00041479d8a13c7c0e2300521575d57a0bd7/api/src/com/cloud/api/commands/RegisterSSHKeyPairCmd.java",
                "sha": "243df8b54c15fa6db06e693e1f16dc9e0621f524",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/cloudstack/blob/bb1f00041479d8a13c7c0e2300521575d57a0bd7/server/src/com/cloud/server/ManagementServerImpl.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/ManagementServerImpl.java?ref=bb1f00041479d8a13c7c0e2300521575d57a0bd7",
                "deletions": 10,
                "filename": "server/src/com/cloud/server/ManagementServerImpl.java",
                "patch": "@@ -4613,7 +4613,7 @@ public SSHKeyPair createSSHKeyPair(CreateSSHKeyPairCmd cmd) {\n         String fingerprint = keys.getPublicKeyFingerPrint();\n         String privateKey = keys.getPrivateKey();\n \n-        return createAndSaveSSHKeyPair(name, fingerprint, publicKey, privateKey);\n+        return createAndSaveSSHKeyPair(name, fingerprint, publicKey, privateKey, owner);\n     }\n \n     @Override\n@@ -4685,29 +4685,32 @@ public boolean deleteSSHKeyPair(DeleteSSHKeyPairCmd cmd) {\n \n     @Override\n     public SSHKeyPair registerSSHKeyPair(RegisterSSHKeyPairCmd cmd) {\n-        Account account = UserContext.current().getCaller();\n-        SSHKeyPairVO s = _sshKeyPairDao.findByName(account.getAccountId(), account.getDomainId(), cmd.getName());\n+        Account caller = UserContext.current().getCaller();\n+        \n+        Account owner = _accountMgr.finalizeOwner(caller, cmd.getAccountName(), cmd.getDomainId());\n+        \n+        SSHKeyPairVO s = _sshKeyPairDao.findByName(owner.getAccountId(), owner.getDomainId(), cmd.getName());\n         if (s != null) {\n             throw new InvalidParameterValueException(\"A key pair with name '\" + cmd.getName() + \"' already exists.\");\n         }\n \n         String name = cmd.getName();\n         String publicKey = SSHKeysHelper.getPublicKeyFromKeyMaterial(cmd.getPublicKey());\n-        String fingerprint = SSHKeysHelper.getPublicKeyFingerprint(publicKey);\n-\n+        \n         if (publicKey == null) {\n             throw new InvalidParameterValueException(\"Public key is invalid\");\n         }\n+        \n+        String fingerprint = SSHKeysHelper.getPublicKeyFingerprint(publicKey);\n \n-        return createAndSaveSSHKeyPair(name, fingerprint, publicKey, null);\n+        return createAndSaveSSHKeyPair(name, fingerprint, publicKey, null, owner);\n     }\n \n-    private SSHKeyPair createAndSaveSSHKeyPair(String name, String fingerprint, String publicKey, String privateKey) {\n-        Account account = UserContext.current().getCaller();\n+    private SSHKeyPair createAndSaveSSHKeyPair(String name, String fingerprint, String publicKey, String privateKey, Account owner) {\n         SSHKeyPairVO newPair = new SSHKeyPairVO();\n \n-        newPair.setAccountId(account.getAccountId());\n-        newPair.setDomainId(account.getDomainId());\n+        newPair.setAccountId(owner.getAccountId());\n+        newPair.setDomainId(owner.getDomainId());\n         newPair.setName(name);\n         newPair.setFingerprint(fingerprint);\n         newPair.setPublicKey(publicKey);",
                "raw_url": "https://github.com/apache/cloudstack/raw/bb1f00041479d8a13c7c0e2300521575d57a0bd7/server/src/com/cloud/server/ManagementServerImpl.java",
                "sha": "54115ec898904a7b2e5dbecb05831bdff4aeaf27",
                "status": "modified"
            }
        ],
        "message": "createSshKeys command - fixed the case when admin couldn't create a key for another user via 8096 port.\nregisterSshKeys command - added ability for admin to register key for another user\n\nFixed NPE in registerUserKeys command - used to happen in failure case, when invalid publicKey was specified",
        "parent": "https://github.com/apache/cloudstack/commit/6137a6582da1ec1444d9dda0a093416053b5b20f",
        "repo": "cloudstack",
        "unit_tests": [
            "ManagementServerImplTest.java"
        ]
    },
    "cloudstack_bb790b4": {
        "bug_id": "cloudstack_bb790b4",
        "commit": "https://github.com/apache/cloudstack/commit/bb790b41f7fa8c8efd5e1beead15819c9f126bac",
        "file": [
            {
                "additions": 48,
                "blob_url": "https://github.com/apache/cloudstack/blob/bb790b41f7fa8c8efd5e1beead15819c9f126bac/core/src/com/cloud/agent/resource/virtualnetwork/VirtualRoutingResource.java",
                "changes": 61,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/core/src/com/cloud/agent/resource/virtualnetwork/VirtualRoutingResource.java?ref=bb790b41f7fa8c8efd5e1beead15819c9f126bac",
                "deletions": 13,
                "filename": "core/src/com/cloud/agent/resource/virtualnetwork/VirtualRoutingResource.java",
                "patch": "@@ -447,19 +447,54 @@ public void cleanupPrivateNetwork(String privNwName, String privBrName){\n     }\n     \n     protected Answer execute(final SetFirewallRuleCommand cmd) {\n-        final String result = setFirewallRules(cmd.isEnable(),\n-        \t\t\t\t\t\t\t\t cmd.getRouterName(),\n-                                         cmd.getRouterIpAddress(),\n-                                         cmd.getProtocol().toLowerCase(),\n-                                         cmd.getPublicIpAddress(),\n-                                         cmd.getPublicPort(),\n-                                         cmd.getPrivateIpAddress(),\n-                                         cmd.getPrivatePort(),\n-                                         cmd.getOldPrivateIP(),\n-                                         cmd.getOldPrivatePort(),\n-                                         cmd.getVlanNetmask());\n-                                         \n-        return new Answer(cmd, result == null, result);\n+    \tString args;\n+\n+    \tif(cmd.isNat()){\n+    \t\t//1:1 NAT needs instanceip;publicip;domrip;op\n+    \t\tif(cmd.isCreate())\n+    \t\t\targs = \"-A\";\n+    \t\telse\n+    \t\t\targs = \"-D\";\n+\n+    \t\targs += \" -l \" + cmd.getPublicIpAddress();\n+    \t\targs += \" -i \" + cmd.getRouterIpAddress();\n+    \t\targs += \" -r \" + cmd.getPrivateIpAddress();\n+    \t\targs += \" -G \" + cmd.getProtocol();\n+    \t}else{\n+    \t\tif (cmd.isEnable()) {\n+    \t\t\targs = \"-A\";\n+    \t\t} else {\n+    \t\t\targs = \"-D\";\n+    \t\t}\n+\n+    \t\targs += \" -P \" + cmd.getProtocol().toLowerCase();\n+    \t\targs += \" -l \" + cmd.getPublicIpAddress();\n+    \t\targs += \" -p \" + cmd.getPublicPort();\n+    \t\targs += \" -n \" + cmd.getRouterName();\n+    \t\targs += \" -i \" + cmd.getRouterIpAddress();\n+    \t\targs += \" -r \" + cmd.getPrivateIpAddress();\n+    \t\targs += \" -d \" + cmd.getPrivatePort();\n+    \t\targs += \" -N \" + cmd.getVlanNetmask();\n+\n+    \t\tString oldPrivateIP = cmd.getOldPrivateIP();\n+    \t\tString oldPrivatePort = cmd.getOldPrivatePort();\n+\n+    \t\tif (oldPrivateIP != null) {\n+    \t\t\targs += \" -w \" + oldPrivateIP;\n+    \t\t}\n+\n+    \t\tif (oldPrivatePort != null) {\n+    \t\t\targs += \" -x \" + oldPrivatePort;\n+    \t\t}\n+    \t}\n+\n+    \tfinal Script command = new Script(_firewallPath, _timeout, s_logger);\n+    \tString [] argsArray = args.split(\" \");\n+    \tfor (String param : argsArray) {\n+    \t\tcommand.add(param);\n+    \t}\n+    \tString result = command.execute();\n+    \treturn new Answer(cmd, result == null, result);\n     }\n     \n     protected String getDefaultScriptsDir() {",
                "raw_url": "https://github.com/apache/cloudstack/raw/bb790b41f7fa8c8efd5e1beead15819c9f126bac/core/src/com/cloud/agent/resource/virtualnetwork/VirtualRoutingResource.java",
                "sha": "8463db98a099f96b9d987a5e6c233aab07385822",
                "status": "modified"
            }
        ],
        "message": "bug 7322: fix NPE when setting firewall rule for 1:1 NAT on kvm\nstatus 7322: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/1ce538b6a9560b96843714e70b60ccbd21f606e2",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualRoutingResourceTest.java"
        ]
    },
    "cloudstack_bd034e0": {
        "bug_id": "cloudstack_bd034e0",
        "commit": "https://github.com/apache/cloudstack/commit/bd034e0b9f471ca1d0c3a18e135926380dc76e1c",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/bd034e0b9f471ca1d0c3a18e135926380dc76e1c/server/src/com/cloud/user/AccountManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/user/AccountManagerImpl.java?ref=bd034e0b9f471ca1d0c3a18e135926380dc76e1c",
                "deletions": 1,
                "filename": "server/src/com/cloud/user/AccountManagerImpl.java",
                "patch": "@@ -218,7 +218,7 @@\n     private IPAddressDao _ipAddressDao;\n     @Inject\n     private RegionManager _regionMgr;\n-    \n+    @Inject\n     private VpcManager _vpcMgr;\n     @Inject\n     private DomainRouterDao _routerDao;",
                "raw_url": "https://github.com/apache/cloudstack/raw/bd034e0b9f471ca1d0c3a18e135926380dc76e1c/server/src/com/cloud/user/AccountManagerImpl.java",
                "sha": "a3f9505c3df39eb07c1ec63bc0e5c48b4a1320d2",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-1243: Add @Inject to fix NPE in AccountManagerImpl\n\nSigned-off-by: Rohit Yadav <bhaisaab@apache.org>",
        "parent": "https://github.com/apache/cloudstack/commit/c809d057efd42bf01d585326e09e51e0c0ff1cee",
        "repo": "cloudstack",
        "unit_tests": [
            "AccountManagerImplTest.java"
        ]
    },
    "cloudstack_bdee5e3": {
        "bug_id": "cloudstack_bdee5e3",
        "commit": "https://github.com/apache/cloudstack/commit/bdee5e37343f6f4e5be2acd6cbc6e172e0d1fe36",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/bdee5e37343f6f4e5be2acd6cbc6e172e0d1fe36/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/UserVmManagerImpl.java?ref=bdee5e37343f6f4e5be2acd6cbc6e172e0d1fe36",
                "deletions": 2,
                "filename": "server/src/com/cloud/vm/UserVmManagerImpl.java",
                "patch": "@@ -2544,7 +2544,9 @@ public UserVm createAdvancedVirtualMachine(DataCenter zone, ServiceOffering serv\n                     s_logger.debug(\"Creating network for account \" + owner + \" from the network offering id=\" + requiredOfferings.get(0).getId() + \" as a part of deployVM process\");\n                     Network newNetwork = _networkMgr.createGuestNetwork(requiredOfferings.get(0).getId(), owner.getAccountName() + \"-network\", owner.getAccountName() + \"-network\",\n                             null, null, null, null, owner, null, physicalNetwork, zone.getId(), ACLType.Account, null, null, null, null, true, null);\n-                    defaultNetwork = _networkDao.findById(newNetwork.getId());\n+                    if (newNetwork != null) {\n+                        defaultNetwork = _networkDao.findById(newNetwork.getId());\n+                    }\n                 } else if (virtualNetworks.size() > 1) {\n                     throw new InvalidParameterValueException(\"More than 1 default Isolated networks are found for account \" + owner + \"; please specify networkIds\");\n                 } else {\n@@ -2554,7 +2556,9 @@ public UserVm createAdvancedVirtualMachine(DataCenter zone, ServiceOffering serv\n                 throw new InvalidParameterValueException(\"Required network offering id=\" + requiredOfferings.get(0).getId() + \" is not in \" + NetworkOffering.State.Enabled);\n             }\n \n-            networkList.add(defaultNetwork);\n+            if (defaultNetwork != null) {\n+                networkList.add(defaultNetwork);\n+            }\n \n         } else {\n             for (Long networkId : networkIdList) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/bdee5e37343f6f4e5be2acd6cbc6e172e0d1fe36/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "sha": "2636096d03d7cfa097605ac066b8bd66b24972b7",
                "status": "modified"
            }
        ],
        "message": "CID-1233086: Fix potential NPE blowup in UserVmManagerImpl\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/65608e99495007183bb8e4043b0f1efe527a7e85",
        "repo": "cloudstack",
        "unit_tests": [
            "UserVmManagerImplTest.java"
        ]
    },
    "cloudstack_be3a39e": {
        "bug_id": "cloudstack_be3a39e",
        "commit": "https://github.com/apache/cloudstack/commit/be3a39ea4fcb1f758d72c4e4abc43f428845c4d1",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/be3a39ea4fcb1f758d72c4e4abc43f428845c4d1/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java?ref=be3a39ea4fcb1f758d72c4e4abc43f428845c4d1",
                "deletions": 1,
                "filename": "plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "patch": "@@ -3478,7 +3478,9 @@ public boolean addNetworkRules(final String vmName, final String vmId, final Str\n         cmd.add(\"--vmname\", vmName);\n         cmd.add(\"--vmid\", vmId);\n         cmd.add(\"--vmip\", guestIP);\n-        cmd.add(\"--vmip6\", guestIP6);\n+        if (StringUtils.isNotBlank(guestIP6)) {\n+            cmd.add(\"--vmip6\", guestIP6);\n+        }\n         cmd.add(\"--sig\", sig);\n         cmd.add(\"--seq\", seq);\n         cmd.add(\"--vmmac\", mac);",
                "raw_url": "https://github.com/apache/cloudstack/raw/be3a39ea4fcb1f758d72c4e4abc43f428845c4d1/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "sha": "952fe9e7cc9e1e37a51c238fa6f17e94f413c76d",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-10177: Only pass IPv6 address to Security Group Python script if present (#2355)\n\nOtherwise we send down a 'null' to a ProcessBuilder in Java instead of a String and this\r\ncauses a NPE.\r\n\r\nWe should check first if the Instance has a IPv6 address before sending it there.\r\n\r\nSigned-off-by: Wido den Hollander <wido@widodh.nl>",
        "parent": "https://github.com/apache/cloudstack/commit/637d9a62c54a7b6eac939d7569fcafc0d2a075bd",
        "repo": "cloudstack",
        "unit_tests": [
            "LibvirtComputingResourceTest.java"
        ]
    },
    "cloudstack_bf987c5": {
        "bug_id": "cloudstack_bf987c5",
        "commit": "https://github.com/apache/cloudstack/commit/bf987c57d9c3b14c189e52a1e2f284d008a37d33",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/bf987c57d9c3b14c189e52a1e2f284d008a37d33/server/src/com/cloud/storage/StorageManagerImpl.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/StorageManagerImpl.java?ref=bf987c57d9c3b14c189e52a1e2f284d008a37d33",
                "deletions": 0,
                "filename": "server/src/com/cloud/storage/StorageManagerImpl.java",
                "patch": "@@ -2658,6 +2658,11 @@ protected DiskProfile toDiskProfile(VolumeVO vol, DiskOfferingVO offering) {\n             vol.setInstanceId(vm.getId());\n         }\n         \n+        if(type.equals(VolumeType.ROOT))\n+        \tvol.setDeviceId(0l);\n+        else\n+        \tvol.setDeviceId(1l);\n+        \n         vol = _volsDao.persist(vol);\n         \n         return toDiskProfile(vol, offering);\n@@ -2684,6 +2689,11 @@ protected DiskProfile toDiskProfile(VolumeVO vol, DiskOfferingVO offering) {\n         }\n         vol.setTemplateId(template.getId());\n         \n+        if(type.equals(VolumeType.ROOT))\n+        \tvol.setDeviceId(0l);\n+        else\n+        \tvol.setDeviceId(1l);\n+        \n         vol = _volsDao.persist(vol);\n         \n         return toDiskProfile(vol, offering);",
                "raw_url": "https://github.com/apache/cloudstack/raw/bf987c57d9c3b14c189e52a1e2f284d008a37d33/server/src/com/cloud/storage/StorageManagerImpl.java",
                "sha": "a991c0eab1cfcb1e1c3b5ce1e7951ce0114d522c",
                "status": "modified"
            }
        ],
        "message": "bug 6838: during vm creation, the volume's device id wasn't set leading to npe during attaching a new vol to the vm (it checks for device ids)\nstatus 6838: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/01b4af30068b7d08f86ce2fd09557cf349888637",
        "repo": "cloudstack",
        "unit_tests": [
            "StorageManagerImplTest.java"
        ]
    },
    "cloudstack_c08d151": {
        "bug_id": "cloudstack_c08d151",
        "commit": "https://github.com/apache/cloudstack/commit/c08d151e0572ce105b71658ea40978b66c5c0f69",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/c08d151e0572ce105b71658ea40978b66c5c0f69/server/src/com/cloud/server/ConfigurationServerImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/ConfigurationServerImpl.java?ref=c08d151e0572ce105b71658ea40978b66c5c0f69",
                "deletions": 2,
                "filename": "server/src/com/cloud/server/ConfigurationServerImpl.java",
                "patch": "@@ -341,8 +341,8 @@ protected void saveUser() {\n         }\n \n         // now insert the user\n-        insertSql = \"INSERT INTO `cloud`.`user` (id, uuid, username, account_id, firstname, lastname, created, state) \" +\n-                \"VALUES (\" + id + \", UUID(), '\" + username + \"', 2, '\" + firstname + \"','\" + lastname + \"',now(), 'disabled')\";\n+        insertSql = \"INSERT INTO `cloud`.`user` (id, username, password, account_id, firstname, lastname, created, state) \" +\n+                \"VALUES (\" + id + \",'\" + username + \"', RAND(), 2, '\" + firstname + \"','\" + lastname + \"',now(), 'disabled')\";\n \n         txn = Transaction.currentTxn();\n         try {",
                "raw_url": "https://github.com/apache/cloudstack/raw/c08d151e0572ce105b71658ea40978b66c5c0f69/server/src/com/cloud/server/ConfigurationServerImpl.java",
                "sha": "74fba8967531e5d0f5566708803aab23a1fbe23d",
                "status": "modified"
            }
        ],
        "message": "https://issues.apache.org/jira/browse/CLOUDSTACK-993\n\nChanges:\n- Introduction of maven skipped the java code that inserts the admin user. This causes the NPE in management server while trying to find the user and also, admin user cannot login as expected.\n- Fixing the insertion of the admin user as part of startup.",
        "parent": "https://github.com/apache/cloudstack/commit/975021dda1aeee24c8729407e323a5e884e9ad31",
        "repo": "cloudstack",
        "unit_tests": [
            "ConfigurationServerImplTest.java"
        ]
    },
    "cloudstack_c27dd62": {
        "bug_id": "cloudstack_c27dd62",
        "commit": "https://github.com/apache/cloudstack/commit/c27dd6293e6600e4253aa09b00d515a55ee533c1",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/c27dd6293e6600e4253aa09b00d515a55ee533c1/server/src/com/cloud/network/vpc/VpcManagerImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/vpc/VpcManagerImpl.java?ref=c27dd6293e6600e4253aa09b00d515a55ee533c1",
                "deletions": 1,
                "filename": "server/src/com/cloud/network/vpc/VpcManagerImpl.java",
                "patch": "@@ -1421,7 +1421,9 @@ public void doInTransactionWithoutResult(TransactionStatus status) {\n \n     @Override\n     public List<? extends Vpc> getVpcsForAccount(long accountId) {\n-        return _vpcDao.listByAccountId(accountId);\n+        List<Vpc> vpcs = new ArrayList<Vpc>();\n+        vpcs.addAll(_vpcDao.listByAccountId(accountId));\n+        return vpcs;\n     }\n \n     public boolean cleanupVpcResources(long vpcId, Account caller, long callerUserId) throws ResourceUnavailableException, ConcurrentOperationException {",
                "raw_url": "https://github.com/apache/cloudstack/raw/c27dd6293e6600e4253aa09b00d515a55ee533c1/server/src/com/cloud/network/vpc/VpcManagerImpl.java",
                "sha": "c49da15d024f3cffe6fbfdc957957254a63b259d",
                "status": "modified"
            }
        ],
        "message": "CID-1233085: Fix potential NPE in AccountManagerImpl from VpcManagerImpl\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/33a6640c04137ccdfc6d9b8bfbcd70c6ddeb369d",
        "repo": "cloudstack",
        "unit_tests": [
            "VpcManagerImplTest.java"
        ]
    },
    "cloudstack_c31605d": {
        "bug_id": "cloudstack_c31605d",
        "commit": "https://github.com/apache/cloudstack/commit/c31605d51fad79c05469e663e5fb8606ef613d56",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/cloudstack/blob/c31605d51fad79c05469e663e5fb8606ef613d56/api/src/com/cloud/api/commands/RegisterSSHKeyPairCmd.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/com/cloud/api/commands/RegisterSSHKeyPairCmd.java?ref=c31605d51fad79c05469e663e5fb8606ef613d56",
                "deletions": 0,
                "filename": "api/src/com/cloud/api/commands/RegisterSSHKeyPairCmd.java",
                "patch": "@@ -24,6 +24,7 @@\n import com.cloud.api.BaseCmd;\n import com.cloud.api.Implementation;\n import com.cloud.api.Parameter;\n+import com.cloud.api.BaseCmd.CommandType;\n import com.cloud.api.response.SSHKeyPairResponse;\n import com.cloud.user.Account;\n import com.cloud.user.SSHKeyPair;\n@@ -45,6 +46,12 @@\n     @Parameter(name=\"publickey\", type=CommandType.STRING, required=true, description=\"Public key material of the keypair\") \n     private String publicKey;\n \n+    //Owner information\n+    @Parameter(name=ApiConstants.ACCOUNT, type=CommandType.STRING, description=\"an optional account for the ssh key. Must be used with domainId.\")\n+    private String accountName;\n+    \n+    @Parameter(name=ApiConstants.DOMAIN_ID, type=CommandType.LONG, description=\"an optional domainId for the ssh key. If the account parameter is used, domainId must also be used.\")\n+    private Long domainId;\n     \n     /////////////////////////////////////////////////////\n     /////////////////// Accessors ///////////////////////\n@@ -58,6 +65,13 @@ public String getPublicKey() {\n \t\treturn publicKey;\n \t}\n \n+\tpublic String getAccountName() {\n+\t    return accountName;\n+\t}\n+\t    \n+    public Long getDomainId() {\n+        return domainId;\n+    }\n     \n     /////////////////////////////////////////////////////\n     /////////////// API Implementation///////////////////",
                "raw_url": "https://github.com/apache/cloudstack/raw/c31605d51fad79c05469e663e5fb8606ef613d56/api/src/com/cloud/api/commands/RegisterSSHKeyPairCmd.java",
                "sha": "243df8b54c15fa6db06e693e1f16dc9e0621f524",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/cloudstack/blob/c31605d51fad79c05469e663e5fb8606ef613d56/server/src/com/cloud/server/ManagementServerImpl.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/ManagementServerImpl.java?ref=c31605d51fad79c05469e663e5fb8606ef613d56",
                "deletions": 10,
                "filename": "server/src/com/cloud/server/ManagementServerImpl.java",
                "patch": "@@ -4598,7 +4598,7 @@ public SSHKeyPair createSSHKeyPair(CreateSSHKeyPairCmd cmd) {\n         String fingerprint = keys.getPublicKeyFingerPrint();\n         String privateKey = keys.getPrivateKey();\n \n-        return createAndSaveSSHKeyPair(name, fingerprint, publicKey, privateKey);\n+        return createAndSaveSSHKeyPair(name, fingerprint, publicKey, privateKey, owner);\n     }\n \n     @Override\n@@ -4670,29 +4670,32 @@ public boolean deleteSSHKeyPair(DeleteSSHKeyPairCmd cmd) {\n \n     @Override\n     public SSHKeyPair registerSSHKeyPair(RegisterSSHKeyPairCmd cmd) {\n-        Account account = UserContext.current().getCaller();\n-        SSHKeyPairVO s = _sshKeyPairDao.findByName(account.getAccountId(), account.getDomainId(), cmd.getName());\n+        Account caller = UserContext.current().getCaller();\n+        \n+        Account owner = _accountMgr.finalizeOwner(caller, cmd.getAccountName(), cmd.getDomainId());\n+        \n+        SSHKeyPairVO s = _sshKeyPairDao.findByName(owner.getAccountId(), owner.getDomainId(), cmd.getName());\n         if (s != null) {\n             throw new InvalidParameterValueException(\"A key pair with name '\" + cmd.getName() + \"' already exists.\");\n         }\n \n         String name = cmd.getName();\n         String publicKey = SSHKeysHelper.getPublicKeyFromKeyMaterial(cmd.getPublicKey());\n-        String fingerprint = SSHKeysHelper.getPublicKeyFingerprint(publicKey);\n-\n+        \n         if (publicKey == null) {\n             throw new InvalidParameterValueException(\"Public key is invalid\");\n         }\n+        \n+        String fingerprint = SSHKeysHelper.getPublicKeyFingerprint(publicKey);\n \n-        return createAndSaveSSHKeyPair(name, fingerprint, publicKey, null);\n+        return createAndSaveSSHKeyPair(name, fingerprint, publicKey, null, owner);\n     }\n \n-    private SSHKeyPair createAndSaveSSHKeyPair(String name, String fingerprint, String publicKey, String privateKey) {\n-        Account account = UserContext.current().getCaller();\n+    private SSHKeyPair createAndSaveSSHKeyPair(String name, String fingerprint, String publicKey, String privateKey, Account owner) {\n         SSHKeyPairVO newPair = new SSHKeyPairVO();\n \n-        newPair.setAccountId(account.getAccountId());\n-        newPair.setDomainId(account.getDomainId());\n+        newPair.setAccountId(owner.getAccountId());\n+        newPair.setDomainId(owner.getDomainId());\n         newPair.setName(name);\n         newPair.setFingerprint(fingerprint);\n         newPair.setPublicKey(publicKey);",
                "raw_url": "https://github.com/apache/cloudstack/raw/c31605d51fad79c05469e663e5fb8606ef613d56/server/src/com/cloud/server/ManagementServerImpl.java",
                "sha": "78aa072f1086b068962797979fb366be53540291",
                "status": "modified"
            }
        ],
        "message": "createSshKeys command - fixed the case when admin couldn't create a key for another user via 8096 port.\nregisterSshKeys command - added ability for admin to register key for another user\n\nFixed NPE in registerUserKeys command - used to happen in failure case, when invalid publicKey was specified",
        "parent": "https://github.com/apache/cloudstack/commit/857f8ca0f9a0c6edf6429e4c5ae60e2d45458e88",
        "repo": "cloudstack",
        "unit_tests": [
            "ManagementServerImplTest.java"
        ]
    },
    "cloudstack_c377763": {
        "bug_id": "cloudstack_c377763",
        "commit": "https://github.com/apache/cloudstack/commit/c3777632c5817cc1e635ee59eb18d6cb4f210e29",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cloudstack/blob/c3777632c5817cc1e635ee59eb18d6cb4f210e29/server/src/com/cloud/api/query/dao/VolumeJoinDaoImpl.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/query/dao/VolumeJoinDaoImpl.java?ref=c3777632c5817cc1e635ee59eb18d6cb4f210e29",
                "deletions": 4,
                "filename": "server/src/com/cloud/api/query/dao/VolumeJoinDaoImpl.java",
                "patch": "@@ -83,22 +83,28 @@ public VolumeResponse newVolumeResponse(ResponseView view, VolumeJoinVO volume)\n         volResponse.setZoneId(volume.getDataCenterUuid());\n         volResponse.setZoneName(volume.getDataCenterName());\n \n-        volResponse.setVolumeType(volume.getVolumeType().toString());\n+        if (volume.getVolumeType() != null) {\n+            volResponse.setVolumeType(volume.getVolumeType().toString());\n+        }\n         volResponse.setDeviceId(volume.getDeviceId());\n \n         long instanceId = volume.getVmId();\n         if (instanceId > 0 && volume.getState() != Volume.State.Destroy) {\n             volResponse.setVirtualMachineId(volume.getVmUuid());\n             volResponse.setVirtualMachineName(volume.getVmName());\n-            volResponse.setVirtualMachineState(volume.getVmState().toString());\n+            if (volume.getVmState() != null) {\n+                volResponse.setVirtualMachineState(volume.getVmState().toString());\n+            }\n             if (volume.getVmDisplayName() != null) {\n                 volResponse.setVirtualMachineDisplayName(volume.getVmDisplayName());\n             } else {\n                 volResponse.setVirtualMachineDisplayName(volume.getVmName());\n             }\n         }\n \n-        volResponse.setProvisioningType(volume.getProvisioningType().toString());\n+        if (volume.getProvisioningType() != null) {\n+            volResponse.setProvisioningType(volume.getProvisioningType().toString());\n+        }\n \n         // Show the virtual size of the volume\n         volResponse.setSize(volume.getSize());\n@@ -107,7 +113,9 @@ public VolumeResponse newVolumeResponse(ResponseView view, VolumeJoinVO volume)\n         volResponse.setMaxIops(volume.getMaxIops());\n \n         volResponse.setCreated(volume.getCreated());\n-        volResponse.setState(volume.getState().toString());\n+        if (volume.getState() != null) {\n+            volResponse.setState(volume.getState().toString());\n+        }\n         if (volume.getState() == Volume.State.UploadOp) {\n             // com.cloud.storage.VolumeHostVO volumeHostRef =\n             // ApiDBUtils.findVolumeHostRef(volume.getId(),",
                "raw_url": "https://github.com/apache/cloudstack/raw/c3777632c5817cc1e635ee59eb18d6cb4f210e29/server/src/com/cloud/api/query/dao/VolumeJoinDaoImpl.java",
                "sha": "7540d247a43629fb3639fd6e95f691332b2c1d42",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-8858: listVolumes API fails for a particular domain with NPE.\n\nSummary: listVolumes API fails when volume associated vm instance has NULL or invalid state. Fix the code to guard this situation since this should not block volume listing.",
        "parent": "https://github.com/apache/cloudstack/commit/06cefaf493423c953a95ee92482a2d0a20a21095",
        "repo": "cloudstack",
        "unit_tests": [
            "VolumeJoinDaoImplTest.java"
        ]
    },
    "cloudstack_c3c8baf": {
        "bug_id": "cloudstack_c3c8baf",
        "commit": "https://github.com/apache/cloudstack/commit/c3c8baf259ab3aa695e7a425b33fe9d44d8549dd",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/c3c8baf259ab3aa695e7a425b33fe9d44d8549dd/api/src/org/apache/cloudstack/api/command/admin/host/UpdateHostPasswordCmd.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/api/src/org/apache/cloudstack/api/command/admin/host/UpdateHostPasswordCmd.java?ref=c3c8baf259ab3aa695e7a425b33fe9d44d8549dd",
                "deletions": 1,
                "filename": "api/src/org/apache/cloudstack/api/command/admin/host/UpdateHostPasswordCmd.java",
                "patch": "@@ -67,7 +67,7 @@ public Long getClusterId() {\n     }\n \n     public Boolean getUpdatePasswdOnHost() {\n-        return updatePasswdOnHost;\n+        return updatePasswdOnHost == null ? false : true;\n     }\n \n     public String getPassword() {",
                "raw_url": "https://github.com/apache/cloudstack/raw/c3c8baf259ab3aa695e7a425b33fe9d44d8549dd/api/src/org/apache/cloudstack/api/command/admin/host/UpdateHostPasswordCmd.java",
                "sha": "5a884cf72ab7eb9adbc8c759ef5acd26240bbf6a",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-8641 - When calling \"update hostpassword\" API it throws NPE if the update_passwd_on_host if not informed\n\n   - On getUpdatePasswdOnHost() method, if updatePasswdOnHost is null then return false.\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/b29d8e72801173e7a3d868c7badaefe8872e4736",
        "repo": "cloudstack",
        "unit_tests": [
            "UpdateHostPasswordCmdTest.java"
        ]
    },
    "cloudstack_c614c6a": {
        "bug_id": "cloudstack_c614c6a",
        "commit": "https://github.com/apache/cloudstack/commit/c614c6a424f33f582e6ce4a0e7bf4d72f5606bda",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/c614c6a424f33f582e6ce4a0e7bf4d72f5606bda/engine/storage/image/src/org/apache/cloudstack/storage/image/TemplateServiceImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/storage/image/src/org/apache/cloudstack/storage/image/TemplateServiceImpl.java?ref=c614c6a424f33f582e6ce4a0e7bf4d72f5606bda",
                "deletions": 3,
                "filename": "engine/storage/image/src/org/apache/cloudstack/storage/image/TemplateServiceImpl.java",
                "patch": "@@ -87,6 +87,7 @@\n import com.cloud.storage.download.DownloadMonitor;\n import com.cloud.storage.template.TemplateConstants;\n import com.cloud.storage.template.TemplateProp;\n+import com.cloud.template.TemplateManager;\n import com.cloud.user.AccountManager;\n import com.cloud.user.ResourceLimitService;\n import com.cloud.utils.UriUtils;\n@@ -138,6 +139,8 @@\n     EndPointSelector _epSelector;\n     @Inject\n     ImageDataManager imageMgr;\n+    @Inject\n+    TemplateManager _tmpltMgr;\n \n \n     class TemplateOpContext<T> extends AsyncRpcConext<T> {\n@@ -430,9 +433,7 @@ public void handleTemplateSync(DataStore store) {\n \n        for (String uniqueName : templateInfos.keySet()) {\n             TemplateProp tInfo = templateInfos.get(uniqueName);\n-            List<UserVmJoinVO> userVmUsingIso = _userVmJoinDao.listActiveByIsoId(tInfo.getId());\n-            //check if there is any Vm using this ISO.\n-            if (userVmUsingIso == null || userVmUsingIso.isEmpty()) {\n+            if (_tmpltMgr.templateIsDeleteable(tInfo.getId())) {\n                 //TODO: we cannot directly call deleteTemplateSync here to reuse delete logic since in this case, our db does not have this template at all.\n                 VMTemplateVO template = _templateDao.findById(tInfo.getId());\n                 DeleteTemplateCommand dtCommand = new DeleteTemplateCommand(store.getTO(), tInfo.getInstallPath(), null, null);",
                "raw_url": "https://github.com/apache/cloudstack/raw/c614c6a424f33f582e6ce4a0e7bf4d72f5606bda/engine/storage/image/src/org/apache/cloudstack/storage/image/TemplateServiceImpl.java",
                "sha": "fd349710193ae5bdf4597ebad482009ff7133e17",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/c614c6a424f33f582e6ce4a0e7bf4d72f5606bda/server/src/com/cloud/storage/StorageManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/StorageManagerImpl.java?ref=c614c6a424f33f582e6ce4a0e7bf4d72f5606bda",
                "deletions": 1,
                "filename": "server/src/com/cloud/storage/StorageManagerImpl.java",
                "patch": "@@ -1133,7 +1133,7 @@ public void cleanupSecondaryStorage(boolean recurring) {\n                     s_logger.debug(\"Secondary storage garbage collector found \" + destroyedTemplateStoreVOs.size()\n                             + \" templates to cleanup on secondary storage host: \" + store.getName());\n                     for (TemplateDataStoreVO destroyedTemplateStoreVO : destroyedTemplateStoreVOs) {\n-                        if (!_tmpltMgr.templateIsDeleteable(destroyedTemplateStoreVO)) {\n+                        if (!_tmpltMgr.templateIsDeleteable(destroyedTemplateStoreVO.getTemplateId())) {\n                             if (s_logger.isDebugEnabled()) {\n                                 s_logger.debug(\"Not deleting template at: \" + destroyedTemplateStoreVO);\n                             }",
                "raw_url": "https://github.com/apache/cloudstack/raw/c614c6a424f33f582e6ce4a0e7bf4d72f5606bda/server/src/com/cloud/storage/StorageManagerImpl.java",
                "sha": "cbbbe94abe79c5d433d0593fb14dd33d56ff7290",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/c614c6a424f33f582e6ce4a0e7bf4d72f5606bda/server/src/com/cloud/template/TemplateManager.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/template/TemplateManager.java?ref=c614c6a424f33f582e6ce4a0e7bf4d72f5606bda",
                "deletions": 1,
                "filename": "server/src/com/cloud/template/TemplateManager.java",
                "patch": "@@ -92,7 +92,7 @@\n \n     boolean templateIsDeleteable(VMTemplateHostVO templateHostRef);\n \n-    boolean templateIsDeleteable(TemplateDataStoreVO templateStoreRef);\n+    boolean templateIsDeleteable(long templateId);\n \n     Pair<String, String> getAbsoluteIsoPath(long templateId, long dataCenterId);\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/c614c6a424f33f582e6ce4a0e7bf4d72f5606bda/server/src/com/cloud/template/TemplateManager.java",
                "sha": "af71d30d9e9cc3fb23a7dd1cd5b0dd7d1978e579",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cloudstack/blob/c614c6a424f33f582e6ce4a0e7bf4d72f5606bda/server/src/com/cloud/template/TemplateManagerImpl.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/template/TemplateManagerImpl.java?ref=c614c6a424f33f582e6ce4a0e7bf4d72f5606bda",
                "deletions": 28,
                "filename": "server/src/com/cloud/template/TemplateManagerImpl.java",
                "patch": "@@ -945,35 +945,15 @@ public boolean templateIsDeleteable(VMTemplateHostVO templateHostRef) {\n \t}\n \n     @Override\n-    public boolean templateIsDeleteable(TemplateDataStoreVO templateStoreRef) {\n-        VMTemplateVO template = _tmpltDao.findByIdIncludingRemoved(templateStoreRef.getTemplateId());\n-        long templateId = template.getId();\n-        ImageStoreVO imageStore = _imageStoreDao.findById(templateStoreRef.getDataStoreId());\n-        long zoneId = imageStore.getDataCenterId();\n-        DataCenterVO zone = _dcDao.findById(zoneId);\n-\n-        // Check if there are VMs running in the template host ref's zone that use the template\n-        List<VMInstanceVO> nonExpungedVms = _vmInstanceDao.listNonExpungedByZoneAndTemplate(zoneId, templateId);\n-\n-        if (!nonExpungedVms.isEmpty()) {\n-            s_logger.debug(\"Template \" + template.getName() + \" in zone \" + zone.getName() + \" is not deleteable because there are non-expunged VMs deployed from this template.\");\n-            return false;\n-        }\n-        List<UserVmVO> userVmUsingIso = _userVmDao.listByIsoId(templateId);\n-        //check if there is any VM using this ISO.\n+    public boolean templateIsDeleteable(long templateId) {\n+        List<UserVmJoinVO> userVmUsingIso = _userVmJoinDao.listActiveByIsoId(templateId);\n+        //check if there is any Vm using this ISO. We only need to check the case where templateId is an ISO since\n+        // VM can be launched from ISO in secondary storage, while template will always be copied to\n+        // primary storage before deploying VM.\n         if (!userVmUsingIso.isEmpty()) {\n-            s_logger.debug(\"ISO \" + template.getName() + \" in zone \" + zone.getName() + \" is not deleteable because it is attached to \" + userVmUsingIso.size() + \" VMs\");\n+            s_logger.debug(\"ISO \" + templateId + \" is not deleteable because it is attached to \" + userVmUsingIso.size() + \" VMs\");\n             return false;\n         }\n-        // Check if there are any snapshots for the template in the template host ref's zone\n-        List<VolumeVO> volumes = _volumeDao.findByTemplateAndZone(templateId, zoneId);\n-        for (VolumeVO volume : volumes) {\n-            List<SnapshotVO> snapshots = _snapshotDao.listByVolumeIdVersion(volume.getId(), \"2.1\");\n-            if (!snapshots.isEmpty()) {\n-                s_logger.debug(\"Template \" + template.getName() + \" in zone \" + zone.getName() + \" is not deleteable because there are 2.1 snapshots using this template.\");\n-                return false;\n-            }\n-        }\n \n         return true;\n     }\n@@ -1153,9 +1133,8 @@ public boolean deleteIso(DeleteIsoCmd cmd) {\n     \t\tthrow new InvalidParameterValueException(\"Please specify a valid iso.\");\n     \t}\n \n-    \t List<UserVmJoinVO> userVmUsingIso = _userVmJoinDao.listActiveByIsoId(templateId);\n          // check if there is any VM using this ISO.\n-         if (userVmUsingIso != null && !userVmUsingIso.isEmpty()) {\n+         if (!templateIsDeleteable(templateId)) {\n         \t throw new InvalidParameterValueException(\"Unable to delete iso, as it's used by other vms\");\n          }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/c614c6a424f33f582e6ce4a0e7bf4d72f5606bda/server/src/com/cloud/template/TemplateManagerImpl.java",
                "sha": "c828773bff4082e02c78aad93301750fd5c8d589",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-2674: Secondary Storage garbage collector failed with NPE in\ncase of S3 storage provider.",
        "parent": "https://github.com/apache/cloudstack/commit/3c7fb2f790bcef6f86ccb735e25f9ef27f1e039a",
        "repo": "cloudstack",
        "unit_tests": [
            "TemplateManagerImplTest.java"
        ]
    },
    "cloudstack_c78f14c": {
        "bug_id": "cloudstack_c78f14c",
        "commit": "https://github.com/apache/cloudstack/commit/c78f14cbc2fd45fc587f4a238c0a0bfc1d753be8",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/c78f14cbc2fd45fc587f4a238c0a0bfc1d753be8/server/src/com/cloud/resource/ResourceManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/resource/ResourceManagerImpl.java?ref=c78f14cbc2fd45fc587f4a238c0a0bfc1d753be8",
                "deletions": 1,
                "filename": "server/src/com/cloud/resource/ResourceManagerImpl.java",
                "patch": "@@ -2101,7 +2101,7 @@ private boolean doCancelMaintenance(long hostId) {\n         _haMgr.cancelScheduledMigrations(host);\n         List<VMInstanceVO> vms = _haMgr.findTakenMigrationWork();\n         for (VMInstanceVO vm : vms) {\n-            if (vm.getHostId() != null && vm.getHostId() == hostId) {\n+            if (vm != null && vm.getHostId() != null && vm.getHostId() == hostId) {\n                 s_logger.info(\"Unable to cancel migration because the vm is being migrated: \" + vm);\n                 return false;\n             }",
                "raw_url": "https://github.com/apache/cloudstack/raw/c78f14cbc2fd45fc587f4a238c0a0bfc1d753be8/server/src/com/cloud/resource/ResourceManagerImpl.java",
                "sha": "a3413eb3b1c56ffdc074acf134a0cdd783aa9a92",
                "status": "modified"
            }
        ],
        "message": "fixed NPE",
        "parent": "https://github.com/apache/cloudstack/commit/9d5b7b73a21c307a6514f90f8674a4ff231c0bbc",
        "repo": "cloudstack",
        "unit_tests": [
            "ResourceManagerImplTest.java"
        ]
    },
    "cloudstack_c8cf17f": {
        "bug_id": "cloudstack_c8cf17f",
        "commit": "https://github.com/apache/cloudstack/commit/c8cf17f6da186d565244d372fcc0285d0818f195",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/c8cf17f6da186d565244d372fcc0285d0818f195/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=c8cf17f6da186d565244d372fcc0285d0818f195",
                "deletions": 8,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -822,14 +822,12 @@ public VolumeResponse createVolumeResponse(Volume volume) {\n         Long instanceId = volume.getInstanceId();\n         if (instanceId != null && volume.getState() != Volume.State.Destroy) {\n             VMInstanceVO vm = ApiDBUtils.findVMInstanceById(instanceId);\n-            if (vm != null) {\n-                volResponse.setVirtualMachineId(vm.getId());\n-                volResponse.setVirtualMachineName(vm.getHostName());\n-                UserVm userVm = ApiDBUtils.findUserVmById(vm.getId());\n-                if (userVm != null) {\n-                    volResponse.setVirtualMachineDisplayName(userVm.getDisplayName());\n-                    volResponse.setVirtualMachineState(vm.getState().toString());\n-                }\n+            volResponse.setVirtualMachineId(vm.getId());\n+            volResponse.setVirtualMachineName(vm.getHostName());\n+            UserVm userVm = ApiDBUtils.findUserVmById(vm.getId());\n+            if (userVm != null) {\n+                volResponse.setVirtualMachineDisplayName(userVm.getDisplayName());\n+                volResponse.setVirtualMachineState(vm.getState().toString());\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/c8cf17f6da186d565244d372fcc0285d0818f195/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "37e794ddcd55402292b23a9d97bceae283ea8b89",
                "status": "modified"
            }
        ],
        "message": "Revert \"fix NPE when listvolume if vm got destroyed\"\n\nThis reverts commit 9bdaa9d967a6390cc1655ce7344d5af474890e4c.",
        "parent": "https://github.com/apache/cloudstack/commit/d8a9612ef718a72d5ab2c73bf1fe9bfd3842172f",
        "repo": "cloudstack",
        "unit_tests": [
            "ApiResponseHelperTest.java"
        ]
    },
    "cloudstack_ca99603": {
        "bug_id": "cloudstack_ca99603",
        "commit": "https://github.com/apache/cloudstack/commit/ca9960332183f3b13e16e432f0e14f3156efc39f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/ca9960332183f3b13e16e432f0e14f3156efc39f/server/src/com/cloud/deploy/DeploymentPlanningManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/deploy/DeploymentPlanningManagerImpl.java?ref=ca9960332183f3b13e16e432f0e14f3156efc39f",
                "deletions": 1,
                "filename": "server/src/com/cloud/deploy/DeploymentPlanningManagerImpl.java",
                "patch": "@@ -1215,7 +1215,7 @@ protected boolean hostCanAccessSPool(Host host, StoragePool pool) {\n             // volume is ready and the pool should be reused.\n             // In this case, also check if rest of the volumes are ready and can\n             // be reused.\n-            if (plan.getPoolId() != null) {\n+            if (plan.getPoolId() != null || (toBeCreated.getVolumeType() == Volume.Type.DATADISK && toBeCreated.getPoolId() != null && toBeCreated.getState() == Volume.State.Ready)) {\n                 s_logger.debug(\"Volume has pool already allocated, checking if pool can be reused, poolId: \" + toBeCreated.getPoolId());\n                 List<StoragePool> suitablePools = new ArrayList<StoragePool>();\n                 StoragePool pool = null;",
                "raw_url": "https://github.com/apache/cloudstack/raw/ca9960332183f3b13e16e432f0e14f3156efc39f/server/src/com/cloud/deploy/DeploymentPlanningManagerImpl.java",
                "sha": "7345c2a99f142d7e2010da1a3294104c39530861",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/cloudstack/blob/ca9960332183f3b13e16e432f0e14f3156efc39f/server/src/com/cloud/ha/HighAvailabilityManagerImpl.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/ha/HighAvailabilityManagerImpl.java?ref=ca9960332183f3b13e16e432f0e14f3156efc39f",
                "deletions": 1,
                "filename": "server/src/com/cloud/ha/HighAvailabilityManagerImpl.java",
                "patch": "@@ -638,6 +638,9 @@ public Long migrate(final HaWorkVO work) {\n             _haDao.update(work.getId(), work);\n \n             VMInstanceVO vm = _instanceDao.findById(vmId);\n+            if (vm == null) {\n+                return null;\n+            }\n             // First try starting the vm with its original planner, if it doesn't succeed send HAPlanner as its an emergency.\n             _itMgr.migrateAway(vm.getUuid(), srcHostId);\n             return null;\n@@ -757,7 +760,10 @@ public void cancelScheduledMigrations(final HostVO host) {\n         List<HaWorkVO> works = _haDao.findTakenWorkItems(WorkType.Migration);\n         List<VMInstanceVO> vms = new ArrayList<VMInstanceVO>(works.size());\n         for (HaWorkVO work : works) {\n-            vms.add(_instanceDao.findById(work.getInstanceId()));\n+            VMInstanceVO vm = _instanceDao.findById(work.getInstanceId());\n+            if (vm != null) {\n+                vms.add(vm);\n+            }\n         }\n         return vms;\n     }\n@@ -917,6 +923,7 @@ private void runWithContext() {\n                     } else {\n                         s_logger.info(\"Rescheduling \" + work + \" to try again at \" + new Date(nextTime << 10));\n                         work.setTimeToTry(nextTime);\n+                        work.setTimesTried(work.getTimesTried() + 1);\n                         work.setServerId(null);\n                         work.setDateTaken(null);\n                     }\n@@ -927,6 +934,7 @@ private void runWithContext() {\n \n                     s_logger.info(\"Rescheduling \" + work + \" to try again at \" + new Date(nextTime << 10));\n                     work.setTimeToTry(nextTime);\n+                    work.setTimesTried(work.getTimesTried() + 1);\n                     work.setServerId(null);\n                     work.setDateTaken(null);\n \n@@ -935,6 +943,10 @@ private void runWithContext() {\n                     VMInstanceVO vm = _instanceDao.findById(work.getInstanceId());\n                     work.setUpdateTime(vm.getUpdated());\n                     work.setPreviousState(vm.getState());\n+                    if (!Step.Done.equals(work.getStep()) && work.getTimesTried() >= _maxRetries) {\n+                        s_logger.warn(\"Giving up, retries max times for work: \" + work);\n+                        work.setStep(Step.Done);\n+                    }\n                 }\n                 _haDao.update(work.getId(), work);\n             } catch (final Throwable th) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/ca9960332183f3b13e16e432f0e14f3156efc39f/server/src/com/cloud/ha/HighAvailabilityManagerImpl.java",
                "sha": "1ecdfcdc17c0a25a4b4be30099f97ee61cbcb28b",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/cloudstack/blob/ca9960332183f3b13e16e432f0e14f3156efc39f/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/UserVmManagerImpl.java?ref=ca9960332183f3b13e16e432f0e14f3156efc39f",
                "deletions": 0,
                "filename": "server/src/com/cloud/vm/UserVmManagerImpl.java",
                "patch": "@@ -1016,6 +1016,9 @@ public UserVm addNicToVirtualMachine(AddNicToVMCmd cmd) throws InvalidParameterV\n \n         NicProfile profile = new NicProfile(null, null);\n         if (ipAddress != null) {\n+            if (!(NetUtils.isValidIp(ipAddress) || NetUtils.isValidIpv6(ipAddress))) {\n+                throw new InvalidParameterValueException(\"Invalid format for IP address parameter: \" + ipAddress);\n+            }\n             profile = new NicProfile(ipAddress, null);\n         }\n \n@@ -2892,6 +2895,19 @@ protected UserVm createVirtualMachine(DataCenter zone, ServiceOffering serviceOf\n                 }\n \n                 profile.setDefaultNic(true);\n+                if (!_networkModel.areServicesSupportedInNetwork(network.getId(), new Service[]{Service.UserData})) {\n+                    if ((userData != null) && (!userData.isEmpty())) {\n+                        throw new InvalidParameterValueException(\"Unable to deploy VM as UserData is provided while deploying the VM, but there is no support for \" + Network.Service.UserData.getName() + \" service in the default network \" + network.getId());\n+                    }\n+\n+                    if ((sshPublicKey != null) && (!sshPublicKey.isEmpty())) {\n+                        throw new InvalidParameterValueException(\"Unable to deploy VM as SSH keypair is provided while deploying the VM, but there is no support for \" + Network.Service.UserData.getName() + \" service in the default network \" + network.getId());\n+                    }\n+\n+                    if (template.getEnablePassword()) {\n+                        throw new InvalidParameterValueException(\"Unable to deploy VM as template \" + template.getId() + \" is password enabled, but there is no support for \" + Network.Service.UserData.getName() + \" service in the default network \" + network.getId());\n+                    }\n+                }\n             }\n \n             networks.add(new Pair<NetworkVO, NicProfile>(network, profile));",
                "raw_url": "https://github.com/apache/cloudstack/raw/ca9960332183f3b13e16e432f0e14f3156efc39f/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "sha": "38ca3903ac5a1ac5a3c92d33be1e2abf5ac60999",
                "status": "modified"
            }
        ],
        "message": "server: NPE checks and improved case checking\n\n- pool allocation checks for both root and data disks\n- NPE checks to not add null object in collection or try to migrate null VM\n- HA work tries need to increment and be given up when max retries are crossed\n- VM creation should check IP address format for IPv4 and IPv6\n- If userdata is not supported by a network, then fail early if userdata, ssh key,\n  or password enabled template is passed/used\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n(cherry picked from commit 24435dd6bc2424da18277ca00229d1d3bb0ec284)\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/06e353e5c75a39799dbb1d79790baaeb3678b947",
        "repo": "cloudstack",
        "unit_tests": [
            "UserVmManagerImplTest.java"
        ]
    },
    "cloudstack_cc18ca7": {
        "bug_id": "cloudstack_cc18ca7",
        "commit": "https://github.com/apache/cloudstack/commit/cc18ca79fc6d58fb639ffbb455791caeb021589a",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/cc18ca79fc6d58fb639ffbb455791caeb021589a/vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java?ref=cc18ca79fc6d58fb639ffbb455791caeb021589a",
                "deletions": 1,
                "filename": "vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java",
                "patch": "@@ -2205,7 +2205,8 @@ public int getCoresPerSocket() throws Exception {\n         if (apiVersion.compareTo(\"5.0\") < 0) {\n             return 1;\n         }\n-        return (Integer)_context.getVimClient().getDynamicProperty(_mor, \"config.hardware.numCoresPerSocket\");\n+        Integer coresPerSocket = (Integer) _context.getVimClient().getDynamicProperty(_mor, \"config.hardware.numCoresPerSocket\");\n+        return coresPerSocket != null? coresPerSocket : 1;\n     }\n \n     public int getVirtualHardwareVersion() throws Exception {",
                "raw_url": "https://github.com/apache/cloudstack/raw/cc18ca79fc6d58fb639ffbb455791caeb021589a/vmware-base/src/com/cloud/hypervisor/vmware/mo/VirtualMachineMO.java",
                "sha": "e8cbe8f03d1e87693f2de885fd4bf285841311a1",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-3851 [VMWare] VM start fails with NPE while trying to retrieve cores per socket\n\nIf VMware host version is ESXi 4.1 and vCenter version is 5.0 or later, number of cores per socket of a VM running on ESXi 4.1 host would be undefined as it's not supported for versions prior to 5.0.\nHence expecting undefined/null value for that and handling it.\n\nSigned-off-by: Sateesh Chodapuneedi <sateesh@apache.org>",
        "parent": "https://github.com/apache/cloudstack/commit/a5ada3f363276f575122402feb6d8ab16964e7ae",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineMOTest.java"
        ]
    },
    "cloudstack_cc4b612": {
        "bug_id": "cloudstack_cc4b612",
        "commit": "https://github.com/apache/cloudstack/commit/cc4b612bf604addb1ad903ef8adc504c569abe55",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/cloudstack/blob/cc4b612bf604addb1ad903ef8adc504c569abe55/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/UserVmManagerImpl.java?ref=cc4b612bf604addb1ad903ef8adc504c569abe55",
                "deletions": 0,
                "filename": "server/src/com/cloud/vm/UserVmManagerImpl.java",
                "patch": "@@ -73,6 +73,10 @@\n import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n import org.apache.cloudstack.framework.jobs.AsyncJobManager;\n import org.apache.cloudstack.managed.context.ManagedContextRunnable;\n+import org.apache.cloudstack.engine.subsystem.api.storage.VolumeDataFactory;\n+import org.apache.cloudstack.engine.subsystem.api.storage.VolumeService;\n+import org.apache.cloudstack.engine.subsystem.api.storage.VolumeService.VolumeApiResult;\n+import org.apache.cloudstack.framework.async.AsyncCallFuture;\n import org.apache.cloudstack.storage.datastore.db.PrimaryDataStoreDao;\n import org.apache.cloudstack.storage.datastore.db.StoragePoolVO;\n import org.apache.cloudstack.storage.to.TemplateObjectTO;\n@@ -437,6 +441,10 @@\n     PlannerHostReservationDao _plannerHostReservationDao;\n     @Inject\n     private ServiceOfferingDetailsDao serviceOfferingDetailsDao;\n+    @Inject\n+    VolumeService _volService;\n+    @Inject\n+    VolumeDataFactory volFactory;\n \n     protected ScheduledExecutorService _executor = null;\n     protected int _expungeInterval;\n@@ -4914,6 +4922,17 @@ public UserVm restoreVMInternal(Account caller, UserVmVO vm, Long newTemplateId)\n         _volsDao.detachVolume(root.getId());\n         volumeMgr.destroyVolume(root);\n \n+        // For VMware hypervisor since the old root volume is replaced by the new root volume in storage, force expunge old root volume\n+        if (vm.getHypervisorType() == HypervisorType.VMware) {\n+            s_logger.info(\"Expunging volume \" + root.getId() + \" from primary data store\");\n+            AsyncCallFuture<VolumeApiResult> future = _volService.expungeVolumeAsync(volFactory.getVolume(root.getId()));\n+            try {\n+                future.get();\n+            } catch (Exception e) {\n+                s_logger.debug(\"Failed to expunge volume:\" + root.getId(), e);\n+            }\n+        }\n+\n         if (template.getEnablePassword()) {\n             String password = generateRandomPassword();\n             boolean result = resetVMPasswordInternal(vmId, password);",
                "raw_url": "https://github.com/apache/cloudstack/raw/cc4b612bf604addb1ad903ef8adc504c569abe55/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "sha": "f20278498ac80fe04359483d521b23f171ef4abe",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-4985. NPE while deleting old root volumes of a restored VM during storage garbage collection.\nIn case of VMware, once the state of the old root volume has been updated to destroyed force expunge it from primary storage to avoid the garbage collector from trying to delete the new root volume",
        "parent": "https://github.com/apache/cloudstack/commit/6be228a438e5ce3fba831be8130c73603cb0457b",
        "repo": "cloudstack",
        "unit_tests": [
            "UserVmManagerImplTest.java"
        ]
    },
    "cloudstack_ce9014d": {
        "bug_id": "cloudstack_ce9014d",
        "commit": "https://github.com/apache/cloudstack/commit/ce9014d2ec8e7111ae8080b7d08cc167363acccb",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cloudstack/blob/ce9014d2ec8e7111ae8080b7d08cc167363acccb/plugins/hypervisors/kvm/resources/META-INF/cloudstack/kvm-compute/spring-kvm-compute-context.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/kvm/resources/META-INF/cloudstack/kvm-compute/spring-kvm-compute-context.xml?ref=ce9014d2ec8e7111ae8080b7d08cc167363acccb",
                "deletions": 3,
                "filename": "plugins/hypervisors/kvm/resources/META-INF/cloudstack/kvm-compute/spring-kvm-compute-context.xml",
                "patch": "@@ -31,7 +31,4 @@\n         <property name=\"name\" value=\"KVMInvestigator\" />\n     </bean>\n     \n-    <bean id=\"libvirtUtilitiesHelper\"\n-        class=\"com.cloud.hypervisor.kvm.resource.wrapper.LibvirtUtilitiesHelper\" />\n-    \n </beans>",
                "raw_url": "https://github.com/apache/cloudstack/raw/ce9014d2ec8e7111ae8080b7d08cc167363acccb/plugins/hypervisors/kvm/resources/META-INF/cloudstack/kvm-compute/spring-kvm-compute-context.xml",
                "sha": "ce596f22bbf118da9118016208f35d43de4226bd",
                "status": "modified"
            },
            {
                "additions": 46,
                "blob_url": "https://github.com/apache/cloudstack/blob/ce9014d2ec8e7111ae8080b7d08cc167363acccb/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "changes": 92,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java?ref=ce9014d2ec8e7111ae8080b7d08cc167363acccb",
                "deletions": 46,
                "filename": "plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "patch": "@@ -16,6 +16,51 @@\n // under the License.\n package com.cloud.hypervisor.kvm.resource;\n \n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.net.InetAddress;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.ejb.Local;\n+import javax.naming.ConfigurationException;\n+\n+import org.apache.cloudstack.storage.to.PrimaryDataStoreTO;\n+import org.apache.cloudstack.storage.to.VolumeObjectTO;\n+import org.apache.cloudstack.utils.linux.CPUStat;\n+import org.apache.cloudstack.utils.linux.MemStat;\n+import org.apache.cloudstack.utils.qemu.QemuImg.PhysicalDiskFormat;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.log4j.Logger;\n+import org.libvirt.Connect;\n+import org.libvirt.Domain;\n+import org.libvirt.DomainBlockStats;\n+import org.libvirt.DomainInfo;\n+import org.libvirt.DomainInfo.DomainState;\n+import org.libvirt.DomainInterfaceStats;\n+import org.libvirt.LibvirtException;\n+import org.libvirt.NodeInfo;\n+\n import com.cloud.agent.api.Answer;\n import com.cloud.agent.api.Command;\n import com.cloud.agent.api.HostVmStateReportEntry;\n@@ -95,50 +140,6 @@\n import com.cloud.utils.ssh.SshHelper;\n import com.cloud.vm.VirtualMachine;\n import com.cloud.vm.VirtualMachine.PowerState;\n-import org.apache.cloudstack.storage.to.PrimaryDataStoreTO;\n-import org.apache.cloudstack.storage.to.VolumeObjectTO;\n-import org.apache.cloudstack.utils.linux.CPUStat;\n-import org.apache.cloudstack.utils.linux.MemStat;\n-import org.apache.cloudstack.utils.qemu.QemuImg.PhysicalDiskFormat;\n-import org.apache.commons.io.FileUtils;\n-import org.apache.commons.io.IOUtils;\n-import org.apache.log4j.Logger;\n-import org.libvirt.Connect;\n-import org.libvirt.Domain;\n-import org.libvirt.DomainBlockStats;\n-import org.libvirt.DomainInfo;\n-import org.libvirt.DomainInfo.DomainState;\n-import org.libvirt.DomainInterfaceStats;\n-import org.libvirt.LibvirtException;\n-import org.libvirt.NodeInfo;\n-\n-import javax.ejb.Local;\n-import javax.inject.Inject;\n-import javax.naming.ConfigurationException;\n-import java.io.BufferedReader;\n-import java.io.File;\n-import java.io.FileNotFoundException;\n-import java.io.FileReader;\n-import java.io.IOException;\n-import java.io.Reader;\n-import java.net.InetAddress;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Calendar;\n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n-import java.util.Set;\n-import java.util.UUID;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n \n /**\n  * LibvirtComputingResource execute requests on the computing/routing host using\n@@ -264,8 +265,7 @@\n     protected CPUStat _cpuStat = new CPUStat();\n     protected MemStat _memStat = new MemStat();\n \n-    @Inject\n-    private LibvirtUtilitiesHelper libvirtUtilitiesHelper;\n+    private final LibvirtUtilitiesHelper libvirtUtilitiesHelper = new LibvirtUtilitiesHelper();\n \n     @Override\n     public ExecutionResult executeInVR(final String routerIp, final String script, final String args) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/ce9014d2ec8e7111ae8080b7d08cc167363acccb/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "sha": "7bd02d09c9a851d5e88b93995b3ad25998b097b3",
                "status": "modified"
            }
        ],
        "message": "Fix the NPE tht was being caught by the executeRequest() method. - The LibvirtUtilitiesHelper should have been injected, but it did not work on the Agent side. Due to that, when sending a StartCommand we were experiencing NPE, which made impossible to get SSVM/CPVM started. - The LibvirtUtilitiesHelper class is now being instantiated withing the LibvirtComputingResource\n\nSigned-off-by: Daan Hoogland <daan.hoogland@gmail.com>\n\nThis closes #318",
        "parent": "https://github.com/apache/cloudstack/commit/a7ab79405228e4894b1b2f68e2105b8d0cb5d34a",
        "repo": "cloudstack",
        "unit_tests": [
            "LibvirtComputingResourceTest.java"
        ]
    },
    "cloudstack_d1a14fb": {
        "bug_id": "cloudstack_d1a14fb",
        "commit": "https://github.com/apache/cloudstack/commit/d1a14fbf9549aa6c25526729fc32c6a5fb20b364",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/d1a14fbf9549aa6c25526729fc32c6a5fb20b364/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/VolumeApiServiceImpl.java?ref=d1a14fbf9549aa6c25526729fc32c6a5fb20b364",
                "deletions": 1,
                "filename": "server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "patch": "@@ -757,7 +757,7 @@ public VolumeVO resizeVolume(ResizeVolumeCmd cmd) throws ResourceAllocationExcep\n             }\n \n             if (diskOffering.getTags() != null) {\n-                if (!newDiskOffering.getTags().equals(diskOffering.getTags())) {\n+                if (newDiskOffering.getTags() == null || !newDiskOffering.getTags().equals(diskOffering.getTags())) {\n                     throw new InvalidParameterValueException(\"Tags on new and old disk offerings must match\");\n                 }\n             } else if (newDiskOffering.getTags() != null) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/d1a14fbf9549aa6c25526729fc32c6a5fb20b364/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "sha": "16eecd60bc318b1fbe67316083901aa518e863cc",
                "status": "modified"
            }
        ],
        "message": "  disk resize NPE, if the new disk offering doesn't have tags, then NPE",
        "parent": "https://github.com/apache/cloudstack/commit/0eb3944fc8108b3a8bf161bad692f6f58fb5835b",
        "repo": "cloudstack",
        "unit_tests": [
            "VolumeApiServiceImplTest.java"
        ]
    },
    "cloudstack_d367350": {
        "bug_id": "cloudstack_d367350",
        "commit": "https://github.com/apache/cloudstack/commit/d3673506cf3aec8ef9f4f8e0a172f6ebec448505",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/d3673506cf3aec8ef9f4f8e0a172f6ebec448505/server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=d3673506cf3aec8ef9f4f8e0a172f6ebec448505",
                "deletions": 5,
                "filename": "server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -1602,13 +1602,10 @@ public Commands fullHostSync(final long hostId, StartupRoutingCommand startup) {\n             VMInstanceVO castedVm = null;\n             if (info == null) {\n                 info = new AgentVmInfo(vm.getInstanceName(), getVmGuru(vm), vm, State.Stopped);\n-                castedVm = info.guru.findById(vm.getId());\n-            } else {\n-                castedVm = info.vm;\n-            }\n+            } \n+            castedVm = info.guru.findById(vm.getId());\n \n             HypervisorGuru hvGuru = _hvGuruMgr.getGuru(castedVm.getHypervisorType());\n-\n             Command command = compareState(hostId, castedVm, info, true, hvGuru.trackVmHostChange());\n             if (command != null) {\n                 commands.addCommand(command);",
                "raw_url": "https://github.com/apache/cloudstack/raw/d3673506cf3aec8ef9f4f8e0a172f6ebec448505/server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "650ced468b4e24ffa241b0a7016608056ff18b16",
                "status": "modified"
            }
        ],
        "message": "bug 14216: rightly initializing to avoid NPE",
        "parent": "https://github.com/apache/cloudstack/commit/99000f5d6e3a137c69039988ae0d5a4d488e2b4c",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_d42e3df": {
        "bug_id": "cloudstack_d42e3df",
        "commit": "https://github.com/apache/cloudstack/commit/d42e3df9cf43b0ad46d406c6ab5b1d8c811d0239",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/d42e3df9cf43b0ad46d406c6ab5b1d8c811d0239/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=d42e3df9cf43b0ad46d406c6ab5b1d8c811d0239",
                "deletions": 1,
                "filename": "engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -1247,7 +1247,8 @@ protected boolean sendStop(VirtualMachineGuru guru, VirtualMachineProfile profil\n                     _resourceMgr.updateGPUDetails(vm.getHostId(), gpuDevice.getGroupDetails());\n                 }\n                 if (answer == null || !answer.getResult()) {\n-                    s_logger.debug(\"Unable to stop VM due to \" + answer.getDetails());\n+                    String details = (answer != null) ? answer.getDetails() : \"null answer returned\";\n+                    s_logger.debug(\"Unable to stop VM due to \" + details);\n                     return false;\n                 }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/d42e3df9cf43b0ad46d406c6ab5b1d8c811d0239/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "83779064f493a13bfc89061fc179be5310e999de",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-7563: Fix potential NPE in checking answer\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/4c21172f3b3b9dd26a66fa03e246da7a4e4b9e8a",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_d6b41d9": {
        "bug_id": "cloudstack_d6b41d9",
        "commit": "https://github.com/apache/cloudstack/commit/d6b41d9ac21a9740494bfcfd58ea51d712e52f4e",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/d6b41d9ac21a9740494bfcfd58ea51d712e52f4e/engine/schema/src/com/cloud/storage/dao/VolumeDao.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/storage/dao/VolumeDao.java?ref=d6b41d9ac21a9740494bfcfd58ea51d712e52f4e",
                "deletions": 1,
                "filename": "engine/schema/src/com/cloud/storage/dao/VolumeDao.java",
                "patch": "@@ -80,7 +80,7 @@\n \n     List<VolumeVO> listVolumesToBeDestroyed();\n \n-    List<VolumeVO> listVolumesToBeDestroyed(Date date);\n+    List<VolumeVO> listNonRootVolumesToBeDestroyed(Date date);\n \n     ImageFormat getImageFormat(Long volumeId);\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/d6b41d9ac21a9740494bfcfd58ea51d712e52f4e/engine/schema/src/com/cloud/storage/dao/VolumeDao.java",
                "sha": "f2d5fc735207a0c267a05d3e5e2d147c6f06cc1f",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/d6b41d9ac21a9740494bfcfd58ea51d712e52f4e/engine/schema/src/com/cloud/storage/dao/VolumeDaoImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/storage/dao/VolumeDaoImpl.java?ref=d6b41d9ac21a9740494bfcfd58ea51d712e52f4e",
                "deletions": 1,
                "filename": "engine/schema/src/com/cloud/storage/dao/VolumeDaoImpl.java",
                "patch": "@@ -325,6 +325,7 @@ public VolumeDaoImpl() {\n         AllFieldsSearch.and(\"deviceId\", AllFieldsSearch.entity().getDeviceId(), Op.EQ);\n         AllFieldsSearch.and(\"poolId\", AllFieldsSearch.entity().getPoolId(), Op.EQ);\n         AllFieldsSearch.and(\"vType\", AllFieldsSearch.entity().getVolumeType(), Op.EQ);\n+        AllFieldsSearch.and(\"notVolumeType\", AllFieldsSearch.entity().getVolumeType(), Op.NEQ);\n         AllFieldsSearch.and(\"id\", AllFieldsSearch.entity().getId(), Op.EQ);\n         AllFieldsSearch.and(\"destroyed\", AllFieldsSearch.entity().getState(), Op.EQ);\n         AllFieldsSearch.and(\"notDestroyed\", AllFieldsSearch.entity().getState(), Op.NEQ);\n@@ -481,9 +482,10 @@ public SumCount() {\n     }\n \n     @Override\n-    public List<VolumeVO> listVolumesToBeDestroyed(Date date) {\n+    public List<VolumeVO> listNonRootVolumesToBeDestroyed(Date date) {\n         SearchCriteria<VolumeVO> sc = AllFieldsSearch.create();\n         sc.setParameters(\"state\", Volume.State.Destroy);\n+        sc.setParameters(\"notVolumeType\", Volume.Type.ROOT.toString());\n         sc.setParameters(\"updateTime\", date);\n \n         return listBy(sc);",
                "raw_url": "https://github.com/apache/cloudstack/raw/d6b41d9ac21a9740494bfcfd58ea51d712e52f4e/engine/schema/src/com/cloud/storage/dao/VolumeDaoImpl.java",
                "sha": "4f5b613ddd156049079df8f22fd1d62e6d5ce35d",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/d6b41d9ac21a9740494bfcfd58ea51d712e52f4e/engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeObject.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeObject.java?ref=d6b41d9ac21a9740494bfcfd58ea51d712e52f4e",
                "deletions": 3,
                "filename": "engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeObject.java",
                "patch": "@@ -174,11 +174,11 @@ public long getVolumeId() {\n     }\n \n     @Override\n-    public boolean  stateTransit(Volume.Event event) {\n+    public boolean stateTransit(Volume.Event event) {\n         boolean result = false;\n         try {\n             volumeVO = volumeDao.findById(volumeVO.getId());\n-            if(volumeVO != null) {\n+            if (volumeVO != null) {\n                 result = _volStateMachine.transitTo(volumeVO, event, null, volumeDao);\n                 volumeVO = volumeDao.findById(volumeVO.getId());\n             }\n@@ -332,8 +332,9 @@ public void processEvent(ObjectInDataStoreStateMachine.Event event) {\n             throw new CloudRuntimeException(\"Failed to update state:\" + e.toString());\n         } finally {\n             // in case of OperationFailed, expunge the entry\n+            // state transit call reloads the volume from DB and so check for null as well\n             if (event == ObjectInDataStoreStateMachine.Event.OperationFailed &&\n-                (volumeVO.getState() != Volume.State.Copying && volumeVO.getState() != Volume.State.Uploaded && volumeVO.getState() != Volume.State.UploadError)) {\n+                (volumeVO != null && volumeVO.getState() != Volume.State.Copying && volumeVO.getState() != Volume.State.Uploaded && volumeVO.getState() != Volume.State.UploadError)) {\n                 objectInStoreMgr.deleteIfNotReady(this);\n             }\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/d6b41d9ac21a9740494bfcfd58ea51d712e52f4e/engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeObject.java",
                "sha": "b7f459227aaa6843124912d204385957bbe77cff",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/d6b41d9ac21a9740494bfcfd58ea51d712e52f4e/engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java?ref=d6b41d9ac21a9740494bfcfd58ea51d712e52f4e",
                "deletions": 0,
                "filename": "engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java",
                "patch": "@@ -316,6 +316,11 @@ private boolean canVolumeBeRemoved(long volumeId) {\n         }\n \n         VolumeVO vol = volDao.findById(volume.getId());\n+        if (vol == null) {\n+            s_logger.debug(\"Volume \" + volume.getId() + \" is not found\");\n+            future.complete(result);\n+            return future;\n+        }\n \n         String volumePath = vol.getPath();\n         Long poolId = vol.getPoolId();",
                "raw_url": "https://github.com/apache/cloudstack/raw/d6b41d9ac21a9740494bfcfd58ea51d712e52f4e/engine/storage/volume/src/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java",
                "sha": "0b58bf2fecb323c27425dd1dac28b8bd94b517ab",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/d6b41d9ac21a9740494bfcfd58ea51d712e52f4e/server/src/com/cloud/storage/StorageManagerImpl.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/StorageManagerImpl.java?ref=d6b41d9ac21a9740494bfcfd58ea51d712e52f4e",
                "deletions": 3,
                "filename": "server/src/com/cloud/storage/StorageManagerImpl.java",
                "patch": "@@ -1113,8 +1113,8 @@ public void cleanupStorage(boolean recurring) {\n \n                     cleanupSecondaryStorage(recurring);\n \n-                    List<VolumeVO> vols = _volsDao.listVolumesToBeDestroyed(new Date(System.currentTimeMillis() - ((long) StorageCleanupDelay.value() << 10)));\n-\n+                    // ROOT volumes will be destroyed as part of VM cleanup\n+                    List<VolumeVO> vols = _volsDao.listNonRootVolumesToBeDestroyed(new Date(System.currentTimeMillis() - ((long) StorageCleanupDelay.value() << 10)));\n                     for (VolumeVO vol : vols) {\n                         try {\n                             // If this fails, just log a warning. It's ideal if we clean up the host-side clustered file\n@@ -1125,7 +1125,12 @@ public void cleanupStorage(boolean recurring) {\n                         }\n \n                         try {\n-                            volService.expungeVolumeAsync(volFactory.getVolume(vol.getId()));\n+                            VolumeInfo volumeInfo = volFactory.getVolume(vol.getId());\n+                            if (volumeInfo != null) {\n+                                volService.expungeVolumeAsync(volumeInfo);\n+                            } else {\n+                                s_logger.debug(\"Volume \" + vol.getUuid() + \" is already destroyed\");\n+                            }\n                         } catch (Exception e) {\n                             s_logger.warn(\"Unable to destroy volume \" + vol.getUuid(), e);\n                         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/d6b41d9ac21a9740494bfcfd58ea51d712e52f4e/server/src/com/cloud/storage/StorageManagerImpl.java",
                "sha": "3dc62b648267ca5f62d5213a7d812911a44e3311",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-9660: NPE while destroying volumes during 1000 VMs deploy and destroy tests\nNPE is seen as VM destroy and storage cleanup threads try to remove the same root volume. Fix is to handle\nonly non-root volumes in storage cleanup thread, root volumes will be handled as part of VM destroy.",
        "parent": "https://github.com/apache/cloudstack/commit/f2798403b58c26ef26227a26485e9266e7ef84c5",
        "repo": "cloudstack",
        "unit_tests": [
            "StorageManagerImplTest.java"
        ]
    },
    "cloudstack_d7d9a25": {
        "bug_id": "cloudstack_d7d9a25",
        "commit": "https://github.com/apache/cloudstack/commit/d7d9a251be46020597cffc7878a06c1dfacaf951",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/d7d9a251be46020597cffc7878a06c1dfacaf951/server/src/com/cloud/storage/StorageManagerImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/StorageManagerImpl.java?ref=d7d9a251be46020597cffc7878a06c1dfacaf951",
                "deletions": 2,
                "filename": "server/src/com/cloud/storage/StorageManagerImpl.java",
                "patch": "@@ -2623,14 +2623,14 @@ public void prepare(VirtualMachineProfile<? extends VirtualMachine> vm, DeployDe\n             }\n             Pair<VolumeTO, StoragePool> created = createVolume(newVol, _diskOfferingDao.findById(newVol.getDiskOfferingId()), vm, vols, dest);\n             if (created == null) {\n-                long poolId = newVol.getPoolId();\n+                Long poolId = newVol.getPoolId();\n                 newVol.setPoolId(null);\n                 try {\n                     _volsDao.update(newVol, Volume.Event.OperationFailed);\n                 } catch (ConcurrentOperationException e) {\n                     throw new CloudRuntimeException(\"Unable to update the failure on a volume: \" + newVol, e);\n                 }\n-                throw new StorageUnavailableException(\"Unable to create \" + newVol, poolId);\n+                throw new StorageUnavailableException(\"Unable to create \" + newVol, poolId==null?-1L:poolId);\n             }\n             created.first().setDeviceId(newVol.getDeviceId().intValue());\n             newVol.setStatus(AsyncInstanceCreateStatus.Created);",
                "raw_url": "https://github.com/apache/cloudstack/raw/d7d9a251be46020597cffc7878a06c1dfacaf951/server/src/com/cloud/storage/StorageManagerImpl.java",
                "sha": "4bd229a82cd750b72312a25201e1252e231bd1d2",
                "status": "modified"
            }
        ],
        "message": "bug 7993: fix npe\nstatus 7993: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/389e77fc465bac8fea4ffad7fd5e49a5e9eac7e8",
        "repo": "cloudstack",
        "unit_tests": [
            "StorageManagerImplTest.java"
        ]
    },
    "cloudstack_d9ce49b": {
        "bug_id": "cloudstack_d9ce49b",
        "commit": "https://github.com/apache/cloudstack/commit/d9ce49b1f18c14a7acfb7a81316d4f6555717851",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/d9ce49b1f18c14a7acfb7a81316d4f6555717851/engine/storage/src/org/apache/cloudstack/storage/allocator/AbstractStoragePoolAllocator.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/storage/src/org/apache/cloudstack/storage/allocator/AbstractStoragePoolAllocator.java?ref=d9ce49b1f18c14a7acfb7a81316d4f6555717851",
                "deletions": 0,
                "filename": "engine/storage/src/org/apache/cloudstack/storage/allocator/AbstractStoragePoolAllocator.java",
                "patch": "@@ -145,6 +145,9 @@ public boolean configure(String name, Map<String, Object> params) throws Configu\n \n     protected List<StoragePool> reOrder(List<StoragePool> pools,\n             VirtualMachineProfile<? extends VirtualMachine> vmProfile, DeploymentPlan plan) {\n+        if (pools == null) {\n+            return null;\n+        }\n         Account account = null;\n         if (vmProfile.getVirtualMachine() != null) {\n             account = vmProfile.getOwner();",
                "raw_url": "https://github.com/apache/cloudstack/raw/d9ce49b1f18c14a7acfb7a81316d4f6555717851/engine/storage/src/org/apache/cloudstack/storage/allocator/AbstractStoragePoolAllocator.java",
                "sha": "89e09748ea3029dd525f4a1e6339b60fd8ebbf69",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/d9ce49b1f18c14a7acfb7a81316d4f6555717851/engine/storage/src/org/apache/cloudstack/storage/allocator/ClusterScopeStoragePoolAllocator.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/storage/src/org/apache/cloudstack/storage/allocator/ClusterScopeStoragePoolAllocator.java?ref=d9ce49b1f18c14a7acfb7a81316d4f6555717851",
                "deletions": 0,
                "filename": "engine/storage/src/org/apache/cloudstack/storage/allocator/ClusterScopeStoragePoolAllocator.java",
                "patch": "@@ -59,6 +59,9 @@\n         Long podId = plan.getPodId();\n         Long clusterId = plan.getClusterId();\n \n+\t\tif (clusterId == null) {\n+\t\t\treturn null;\n+\t\t}\n         if (dskCh.getTags() != null && dskCh.getTags().length != 0) {\n             s_logger.debug(\"Looking for pools in dc: \" + dcId + \"  pod:\" + podId + \"  cluster:\" + clusterId\n                     + \" having tags:\" + Arrays.toString(dskCh.getTags()));",
                "raw_url": "https://github.com/apache/cloudstack/raw/d9ce49b1f18c14a7acfb7a81316d4f6555717851/engine/storage/src/org/apache/cloudstack/storage/allocator/ClusterScopeStoragePoolAllocator.java",
                "sha": "41afa837b52cdb2cebeb5919227fc3e99e9ba6cb",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/d9ce49b1f18c14a7acfb7a81316d4f6555717851/engine/storage/src/org/apache/cloudstack/storage/allocator/LocalStoragePoolAllocator.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/storage/src/org/apache/cloudstack/storage/allocator/LocalStoragePoolAllocator.java?ref=d9ce49b1f18c14a7acfb7a81316d4f6555717851",
                "deletions": 0,
                "filename": "engine/storage/src/org/apache/cloudstack/storage/allocator/LocalStoragePoolAllocator.java",
                "patch": "@@ -96,6 +96,9 @@\n                 }\n             }\n         } else {\n+            if (plan.getClusterId() == null) {\n+                return null;\n+            }\n             List<StoragePoolVO> availablePools = _storagePoolDao.findLocalStoragePoolsByTags(plan.getDataCenterId(),\n                     plan.getPodId(), plan.getClusterId(), dskCh.getTags());\n             for (StoragePoolVO pool : availablePools) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/d9ce49b1f18c14a7acfb7a81316d4f6555717851/engine/storage/src/org/apache/cloudstack/storage/allocator/LocalStoragePoolAllocator.java",
                "sha": "4056fe756a1a0fa100bd3e3419dc5d7c30865003",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/d9ce49b1f18c14a7acfb7a81316d4f6555717851/plugins/storage-allocators/random/src/org/apache/cloudstack/storage/allocator/RandomStoragePoolAllocator.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/storage-allocators/random/src/org/apache/cloudstack/storage/allocator/RandomStoragePoolAllocator.java?ref=d9ce49b1f18c14a7acfb7a81316d4f6555717851",
                "deletions": 0,
                "filename": "plugins/storage-allocators/random/src/org/apache/cloudstack/storage/allocator/RandomStoragePoolAllocator.java",
                "patch": "@@ -46,6 +46,11 @@\n         long dcId = plan.getDataCenterId();\n         Long podId = plan.getPodId();\n         Long clusterId = plan.getClusterId();\n+\n+\t\tif (clusterId == null) {\n+\t\t\treturn null;\n+\t\t}\n+\n         s_logger.debug(\"Looking for pools in dc: \" + dcId + \"  pod:\" + podId + \"  cluster:\" + clusterId);\n         List<StoragePoolVO> pools = _storagePoolDao.listBy(dcId, podId, clusterId, ScopeType.CLUSTER);\n         if (pools.size() == 0) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/d9ce49b1f18c14a7acfb7a81316d4f6555717851/plugins/storage-allocators/random/src/org/apache/cloudstack/storage/allocator/RandomStoragePoolAllocator.java",
                "sha": "fda787f479d8ca571761b60df03fd925818b2bd2",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/d9ce49b1f18c14a7acfb7a81316d4f6555717851/server/src/com/cloud/server/ManagementServerImpl.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/ManagementServerImpl.java?ref=d9ce49b1f18c14a7acfb7a81316d4f6555717851",
                "deletions": 2,
                "filename": "server/src/com/cloud/server/ManagementServerImpl.java",
                "patch": "@@ -1258,8 +1258,14 @@ private Date massageDate(Date date, int hourOfDay, int minute, int second) {\n \n             // Get all the pools available. Only shared pools are considered because only a volume on a shared pools\n             // can be live migrated while the virtual machine stays on the same host.\n-            List<StoragePoolVO> storagePools = _poolDao.findPoolsByTags(volume.getDataCenterId(),\n-                    volume.getPodId(), srcVolumePool.getClusterId(), null);\n+            List<StoragePoolVO> storagePools = null;\n+\n+            if (srcVolumePool.getClusterId() == null) {\n+                storagePools = _poolDao.findZoneWideStoragePoolsByTags(volume.getDataCenterId(), null);\n+            } else {\n+                storagePools = _poolDao.findPoolsByTags(volume.getDataCenterId(), volume.getPodId(), srcVolumePool.getClusterId(), null);\n+            }\n+\n             storagePools.remove(srcVolumePool);\n             for (StoragePoolVO pool : storagePools) {\n                 if (pool.isShared()) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/d9ce49b1f18c14a7acfb7a81316d4f6555717851/server/src/com/cloud/server/ManagementServerImpl.java",
                "sha": "58e4b44ac8bd8a01c2dbe1935a2681c2125871e4",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-3264: [ZWPS]NPE while finding storage pools for migration\n\nDescription:\n\n    Filter primary storage pools based on zonewide/clusterwide configuration\n    when considering pools to list for storage migration of volumes.",
        "parent": "https://github.com/apache/cloudstack/commit/505ab2eebe7292cd275be17401dde51b1e43ced8",
        "repo": "cloudstack",
        "unit_tests": [
            "ManagementServerImplTest.java"
        ]
    },
    "cloudstack_db5afa4": {
        "bug_id": "cloudstack_db5afa4",
        "commit": "https://github.com/apache/cloudstack/commit/db5afa4994cbe4795238d40df075977bd7ad6f4f",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/db5afa4994cbe4795238d40df075977bd7ad6f4f/server/src/com/cloud/ha/HighAvailabilityManagerImpl.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/ha/HighAvailabilityManagerImpl.java?ref=db5afa4994cbe4795238d40df075977bd7ad6f4f",
                "deletions": 3,
                "filename": "server/src/com/cloud/ha/HighAvailabilityManagerImpl.java",
                "patch": "@@ -261,9 +261,11 @@ protected void wakeupWorkers() {\n \n     @Override\n     public boolean scheduleMigration(final VMInstanceVO vm) {\n-        final HaWorkVO work = new HaWorkVO(vm.getId(), vm.getType(), WorkType.Migration, Step.Scheduled, vm.getHostId(), vm.getState(), 0, vm.getUpdated());\n-        _haDao.persist(work);\n-        wakeupWorkers();\n+        if (vm.getHostId() != null) {\n+            final HaWorkVO work = new HaWorkVO(vm.getId(), vm.getType(), WorkType.Migration, Step.Scheduled, vm.getHostId(), vm.getState(), 0, vm.getUpdated());\n+            _haDao.persist(work);\n+            wakeupWorkers();\n+        }\n         return true;\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/db5afa4994cbe4795238d40df075977bd7ad6f4f/server/src/com/cloud/ha/HighAvailabilityManagerImpl.java",
                "sha": "cf0bd0bcba5cb8ef0add75faf229851927e07638",
                "status": "modified"
            }
        ],
        "message": "fix migration npe when recovering",
        "parent": "https://github.com/apache/cloudstack/commit/e8f317243f3b1d51a71c73119935400539e11e30",
        "repo": "cloudstack",
        "unit_tests": [
            "HighAvailabilityManagerImplTest.java"
        ]
    },
    "cloudstack_db6aa76": {
        "bug_id": "cloudstack_db6aa76",
        "commit": "https://github.com/apache/cloudstack/commit/db6aa765a39341ca2d5be7d8e555dfd7ec2af7e1",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cloudstack/blob/db6aa765a39341ca2d5be7d8e555dfd7ec2af7e1/server/src/com/cloud/storage/StorageManagerImpl.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/StorageManagerImpl.java?ref=db6aa765a39341ca2d5be7d8e555dfd7ec2af7e1",
                "deletions": 5,
                "filename": "server/src/com/cloud/storage/StorageManagerImpl.java",
                "patch": "@@ -298,7 +298,7 @@\n     protected int _pingInterval = 60; // seconds\n     protected int _hostRetry;\n     protected float _overProvisioningFactor = 1;\n-    private int _maxVolumeSizeInGb;\n+    private long _maxVolumeSizeInGb;\n     private long _serverId;\n \n     private int _snapshotTimeout;\n@@ -851,7 +851,7 @@ public boolean configure(String name, Map<String, Object> params) throws Configu\n         }\n \n         String maxVolumeSizeInGbString = configDao.getValue(\"storage.max.volume.size\");\n-        _maxVolumeSizeInGb = NumbersUtil.parseInt(maxVolumeSizeInGbString, 2000);\n+        _maxVolumeSizeInGb = NumbersUtil.parseLong(maxVolumeSizeInGbString, 2000);\n \n         HostTemplateStatesSearch = _vmTemplateHostDao.createSearchBuilder();\n         HostTemplateStatesSearch.and(\"id\", HostTemplateStatesSearch.entity().getTemplateId(), SearchCriteria.Op.EQ);\n@@ -1611,7 +1611,14 @@ public VolumeVO allocVolume(CreateVolumeCmd cmd) throws ResourceAllocationExcept\n             }\n \n             diskOfferingId = cmd.getDiskOfferingId();\n-            size = cmd.getSize() * 1024 * 1024 * 1024; // user specify size in GB\n+            size = cmd.getSize();\n+            if ( size != null ) {\n+                if ( size > 0 ) {\n+                    size = size * 1024 * 1024 * 1024; // user specify size in GB\n+                } else {\n+                    throw new InvalidParameterValueException(\"Disk size must be larger than 0\");\n+                }\n+            }\n             if (diskOfferingId == null) {\n                 throw new InvalidParameterValueException(\"Missing parameter(s),either a positive volume size or a valid disk offering id must be specified.\");\n             }\n@@ -2439,8 +2446,8 @@ public boolean deleteVolume(DeleteVolumeCmd cmd) throws ConcurrentOperationExcep\n     private boolean validateVolumeSizeRange(long size) {\n         if (size < 0 || (size > 0 && size < (1024 * 1024 * 1024))) {\n             throw new InvalidParameterValueException(\"Please specify a size of at least 1 Gb.\");\n-        } else if (size > _maxVolumeSizeInGb) {\n-            throw new InvalidParameterValueException(\"The maximum size allowed is \" + _maxVolumeSizeInGb + \" Gb.\");\n+        } else if (size > (_maxVolumeSizeInGb * 1024 * 1024 * 1024) ) {\n+            throw new InvalidParameterValueException(\"volume size \" + size + \", but the maximum size allowed is \" + _maxVolumeSizeInGb + \" Gb.\");\n         }\n \n         return true;",
                "raw_url": "https://github.com/apache/cloudstack/raw/db6aa765a39341ca2d5be7d8e555dfd7ec2af7e1/server/src/com/cloud/storage/StorageManagerImpl.java",
                "sha": "a336db369f4a23e853b2b5bf0888bbe70b33c1da",
                "status": "modified"
            }
        ],
        "message": "bug 10146 : fixed NPE\n\nstatus 10146 : resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/94b389054278e64ef05808eb1799cdd4a47e6372",
        "repo": "cloudstack",
        "unit_tests": [
            "StorageManagerImplTest.java"
        ]
    },
    "cloudstack_db97bb8": {
        "bug_id": "cloudstack_db97bb8",
        "commit": "https://github.com/apache/cloudstack/commit/db97bb8e8905feb8e1444fb5136ba893e304670c",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/db97bb8e8905feb8e1444fb5136ba893e304670c/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/UserVmManagerImpl.java?ref=db97bb8e8905feb8e1444fb5136ba893e304670c",
                "deletions": 1,
                "filename": "server/src/com/cloud/vm/UserVmManagerImpl.java",
                "patch": "@@ -2450,7 +2450,12 @@ protected UserVm createVirtualMachine(DataCenter zone, ServiceOffering serviceOf\n \n         // check if account/domain is with in resource limits to create a new vm\n         boolean isIso = Storage.ImageFormat.ISO == template.getFormat();\n-        long size = _templateDao.findById(template.getId()).getSize();\n+        // For baremetal, size can be null\n+        Long tmp = _templateDao.findById(template.getId()).getSize();\n+        long size = 0;\n+        if (tmp != null) {\n+        \tsize = tmp;\n+        }\n         if (diskOfferingId != null) {\n             size += _diskOfferingDao.findById(diskOfferingId).getDiskSize();\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/db97bb8e8905feb8e1444fb5136ba893e304670c/server/src/com/cloud/vm/UserVmManagerImpl.java",
                "sha": "7b3b1bc975820101812189d369fa3f2b04973261",
                "status": "modified"
            }
        ],
        "message": "Fix NPE when using baremetal template\n\nTemplate size is NULL for baremetal, which caused NPE when unboxing",
        "parent": "https://github.com/apache/cloudstack/commit/64c5266ec5ab197ffa81de4476d47ce508cde63d",
        "repo": "cloudstack",
        "unit_tests": [
            "UserVmManagerImplTest.java"
        ]
    },
    "cloudstack_dd6972e": {
        "bug_id": "cloudstack_dd6972e",
        "commit": "https://github.com/apache/cloudstack/commit/dd6972ee07763b4d16b572a025027c13545742ee",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/dd6972ee07763b4d16b572a025027c13545742ee/server/src/com/cloud/server/StatsCollector.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/StatsCollector.java?ref=dd6972ee07763b4d16b572a025027c13545742ee",
                "deletions": 9,
                "filename": "server/src/com/cloud/server/StatsCollector.java",
                "patch": "@@ -264,16 +264,17 @@ public void run() {\n \t            }\n \t\t\t\t\r\n                 List<HostVO> hosts = _hostDao.listSecondaryStorageHosts();\n-                ConcurrentHashMap<Long, StorageStats> storageStats = new ConcurrentHashMap<Long, StorageStats>();\n-                \r\n-                for (HostVO host : hosts) {\r\n+                ConcurrentHashMap<Long, StorageStats> storageStats = new ConcurrentHashMap<Long, StorageStats>();\r\n+                for (HostVO host : hosts) {\n+                    if ( host.getStorageUrl() == null ) {\n+                        continue;\n+                    }\r\n                     GetStorageStatsCommand command = new GetStorageStatsCommand(host.getStorageUrl());\n-        \t\t\tHostVO ssAhost = _agentMgr.getSSAgent(host);\n-        \t\t\tif( ssAhost == null ) {\n-        \t\t\t\ts_logger.warn(\"There is no secondary storage VM for secondary storage host \" + host.getName());\n-        \t\t\t\tcontinue;\n-        \t\t\t}\n-        \t\t\t\n+                    HostVO ssAhost = _agentMgr.getSSAgent(host);\n+                    if (ssAhost == null) {\n+                        s_logger.warn(\"There is no secondary storage VM for secondary storage host \" + host.getName());\n+                        continue;\n+                    }\n                     long hostId = host.getId();\r\n                     Answer answer = _agentMgr.easySend(ssAhost.getId(), command);\r\n                     if (answer != null && answer.getResult()) {\r",
                "raw_url": "https://github.com/apache/cloudstack/raw/dd6972ee07763b4d16b572a025027c13545742ee/server/src/com/cloud/server/StatsCollector.java",
                "sha": "59091bf9c80995a0f00e6b093483a53749f9ea47",
                "status": "modified"
            }
        ],
        "message": "bug 10618: fixed NPE\n\nstatus 10618: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/17e4e7014fed8bd010c7858e5bd086c4f479ba1f",
        "repo": "cloudstack",
        "unit_tests": [
            "StatsCollectorTest.java"
        ]
    },
    "cloudstack_dd7ff1d": {
        "bug_id": "cloudstack_dd7ff1d",
        "commit": "https://github.com/apache/cloudstack/commit/dd7ff1d8db3a374b1a1569bd2e8ba0338ae7505e",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/dd7ff1d8db3a374b1a1569bd2e8ba0338ae7505e/server/src/com/cloud/resource/ResourceManagerImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/resource/ResourceManagerImpl.java?ref=dd7ff1d8db3a374b1a1569bd2e8ba0338ae7505e",
                "deletions": 0,
                "filename": "server/src/com/cloud/resource/ResourceManagerImpl.java",
                "patch": "@@ -706,6 +706,12 @@ private boolean doDeleteHost(long hostId, boolean isForced, boolean isForceDelet\n         List<StoragePoolHostVO> pools = _storagePoolHostDao.listByHostIdIncludingRemoved(hostId);\n         \n         ResourceStateAdapter.DeleteHostAnswer answer = (ResourceStateAdapter.DeleteHostAnswer) dispatchToStateAdapters(ResourceStateAdapter.Event.DELETE_HOST, false, host, new Boolean(isForced), new Boolean(isForceDeleteStorage));\n+        \n+        if (answer == null) {\n+            s_logger.warn(\"Unable to delete host: \" + hostId);\n+            return false;\n+        }\n+        \n         if (answer.getIsException()) {\n             return false;\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/dd7ff1d8db3a374b1a1569bd2e8ba0338ae7505e/server/src/com/cloud/resource/ResourceManagerImpl.java",
                "sha": "31b689768932d17828d9ad98e3c53b932e5445d3",
                "status": "modified"
            }
        ],
        "message": "bug 12404: Fix NPE when delete host\n\nBut it's not enough. This happened because delete host logic is missing for Xen. Frank would add it.",
        "parent": "https://github.com/apache/cloudstack/commit/b3f861bf8f8cc068a2126e7b9ccf510d2e156e4d",
        "repo": "cloudstack",
        "unit_tests": [
            "ResourceManagerImplTest.java"
        ]
    },
    "cloudstack_df934c9": {
        "bug_id": "cloudstack_df934c9",
        "commit": "https://github.com/apache/cloudstack/commit/df934c954106a618f8b0aca7e7dfbac890d78244",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/df934c954106a618f8b0aca7e7dfbac890d78244/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/VolumeApiServiceImpl.java?ref=df934c954106a618f8b0aca7e7dfbac890d78244",
                "deletions": 2,
                "filename": "server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "patch": "@@ -1636,12 +1636,12 @@ private Volume orchestrateDetachVolumeFromVM(long vmId, long volumeId) {\n         }\n \n         HostVO host = null;\n-        StoragePoolVO volumePool = _storagePoolDao.findById(volume.getPoolId());\n+        StoragePoolVO volumePool = _storagePoolDao.findByIdIncludingRemoved(volume.getPoolId());\n \n         if (hostId != null) {\n             host = _hostDao.findById(hostId);\n \n-            if (host != null && host.getHypervisorType() == HypervisorType.XenServer && volumePool.isManaged()) {\n+            if (host != null && host.getHypervisorType() == HypervisorType.XenServer && volumePool != null && volumePool.isManaged()) {\n                 sendCommand = true;\n             }\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/df934c954106a618f8b0aca7e7dfbac890d78244/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "sha": "0f17a57ad4b27bbb0712c8565ca5ab7f55697636",
                "status": "modified"
            }
        ],
        "message": "server: fix NPE case in VolumeApiServiceImpl\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/d2471df0be35c9af928c682c961ac0544b347159",
        "repo": "cloudstack",
        "unit_tests": [
            "VolumeApiServiceImplTest.java"
        ]
    },
    "cloudstack_dfbe113": {
        "bug_id": "cloudstack_dfbe113",
        "commit": "https://github.com/apache/cloudstack/commit/dfbe11355c40a5dbe022f022426c100c53428901",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/dfbe11355c40a5dbe022f022426c100c53428901/server/src/com/cloud/network/element/VirtualRouterElement.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/element/VirtualRouterElement.java?ref=dfbe11355c40a5dbe022f022426c100c53428901",
                "deletions": 1,
                "filename": "server/src/com/cloud/network/element/VirtualRouterElement.java",
                "patch": "@@ -876,8 +876,8 @@ public boolean addPasswordAndUserdata(Network network, NicProfile nic, VirtualMa\n         if (publicNetwork) {\n             routers = _routerDao.listByNetworkAndRole(network.getId(), Role.VIRTUAL_ROUTER);\n         } else {\n-            Long podId = dest.getPod().getId();\n             if (isPodBased) {\n+                Long podId = dest.getPod().getId();\n                 routers = _routerDao.listByNetworkAndPodAndRole(network.getId(), podId, Role.VIRTUAL_ROUTER);\n             } else {\n                 routers = _routerDao.listByNetworkAndRole(network.getId(), Role.VIRTUAL_ROUTER);",
                "raw_url": "https://github.com/apache/cloudstack/raw/dfbe11355c40a5dbe022f022426c100c53428901/server/src/com/cloud/network/element/VirtualRouterElement.java",
                "sha": "f601f4fa2e494d20a90e1ea7628fea2fae777771",
                "status": "modified"
            }
        ],
        "message": "fix CLOUDSTACK-2061 Hitting java NPE in addNicToVirtualMachine api when trying to add a shared network to a VM",
        "parent": "https://github.com/apache/cloudstack/commit/985b2aa88d4d02db98a2e9be7ac081e4efbff879",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualRouterElementTest.java"
        ]
    },
    "cloudstack_e0aef28": {
        "bug_id": "cloudstack_e0aef28",
        "commit": "https://github.com/apache/cloudstack/commit/e0aef28910eb9d8a8ba4e21f30138b241ca00349",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/e0aef28910eb9d8a8ba4e21f30138b241ca00349/server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=e0aef28910eb9d8a8ba4e21f30138b241ca00349",
                "deletions": 0,
                "filename": "server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -594,6 +594,7 @@ protected boolean checkWorkItems(VMInstanceVO vm, State state) throws Concurrent\n                 cmds.addCommand(new StartCommand(vmTO));\n                 \n                 vmGuru.finalizeDeployment(cmds, vmProfile, dest, ctx);\n+                vm.setPodId(dest.getPod().getId());\n                 try {\n                     Answer[] answers = _agentMgr.send(dest.getHost().getId(), cmds);\n                     if (getStartAnswer(answers).getResult() && vmGuru.finalizeStart(cmds, vmProfile, dest, ctx)) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/e0aef28910eb9d8a8ba4e21f30138b241ca00349/server/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "aed78db60469b4ddaf8181306860c42d79b7c472",
                "status": "modified"
            }
        ],
        "message": "bug 7975: we were missing the podid for a user vm, and this is used during vol attach. Adding the same, this fixes the NPE\nstatus 7975: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/55f28c3a2b42f7c99aefec03bcfce1a479baddaf",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_e168760": {
        "bug_id": "cloudstack_e168760",
        "commit": "https://github.com/apache/cloudstack/commit/e168760295c1488befbaf254897a4c3671e8d32f",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/e168760295c1488befbaf254897a4c3671e8d32f/server/src/com/cloud/agent/manager/DirectAgentAttache.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/agent/manager/DirectAgentAttache.java?ref=e168760295c1488befbaf254897a4c3671e8d32f",
                "deletions": 5,
                "filename": "server/src/com/cloud/agent/manager/DirectAgentAttache.java",
                "patch": "@@ -125,11 +125,11 @@ public synchronized void run() {\n \t        try {\n \t            ServerResource resource = _resource;\n \t            \n-\t            if (resource.IsRemoteAgent()) {\n-\t            \treturn;\n-\t            }\n-\t            \n-\t            if (resource != null) {\n+                if (resource != null) {\n+                    if (resource.IsRemoteAgent()) {\n+                        return;\n+                    }\n+\n         \t        PingCommand cmd = resource.getCurrentStatus(_id);\n         \t        if (cmd == null) {\n         \t            s_logger.warn(\"Unable to get current status on \" + _id);",
                "raw_url": "https://github.com/apache/cloudstack/raw/e168760295c1488befbaf254897a4c3671e8d32f/server/src/com/cloud/agent/manager/DirectAgentAttache.java",
                "sha": "cb7fcfbc1477f9b4d9acbb46296134e3e06ac8eb",
                "status": "modified"
            }
        ],
        "message": "The code implies resource could be null, and yet de-references resource before the null check.  As I was experiencing a NPE because if this exact scenario, put the remote agent check inside the check for null to avoid problems.  If resource is null we log that we were unable to send ping due to agent disconnected...",
        "parent": "https://github.com/apache/cloudstack/commit/2185adc08694485df901909d5491c2b32bca075f",
        "repo": "cloudstack",
        "unit_tests": [
            "DirectAgentAttacheTest.java"
        ]
    },
    "cloudstack_e1c5d4e": {
        "bug_id": "cloudstack_e1c5d4e",
        "commit": "https://github.com/apache/cloudstack/commit/e1c5d4ef55f3b55c7b9c1baf34823c7943b1ee88",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/e1c5d4ef55f3b55c7b9c1baf34823c7943b1ee88/server/src/com/cloud/network/lb/ElasticLoadBalancerManagerImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/network/lb/ElasticLoadBalancerManagerImpl.java?ref=e1c5d4ef55f3b55c7b9c1baf34823c7943b1ee88",
                "deletions": 2,
                "filename": "server/src/com/cloud/network/lb/ElasticLoadBalancerManagerImpl.java",
                "patch": "@@ -163,8 +163,7 @@ public long deployLoadBalancerVM(Long networkId, Long accountId) {  /* ELB_TODO\n \n             s_logger.debug(\"ELB  vm = \" + elbVm);\n             if (elbVm == null) {\n-                throw new InvalidParameterValueException(\"No VM with id '\"\n-                        + elbVm + \"' found.\");\n+                throw new InvalidParameterValueException(\"Could not deploy or find existing ELB VM\");\n             }\n             DomainRouterVO elbRouterVm = _routerDao.findById(elbVm.getId());\n             String publicIp = elbRouterVm.getGuestIpAddress();",
                "raw_url": "https://github.com/apache/cloudstack/raw/e1c5d4ef55f3b55c7b9c1baf34823c7943b1ee88/server/src/com/cloud/network/lb/ElasticLoadBalancerManagerImpl.java",
                "sha": "33047ad3219c1e95e09a6cef075197d02e79047b",
                "status": "modified"
            }
        ],
        "message": "fix npe",
        "parent": "https://github.com/apache/cloudstack/commit/2447830c554a59a3c4265091585950c4f60314be",
        "repo": "cloudstack",
        "unit_tests": [
            "ElasticLoadBalancerManagerImplTest.java"
        ]
    },
    "cloudstack_e4a1d49": {
        "bug_id": "cloudstack_e4a1d49",
        "commit": "https://github.com/apache/cloudstack/commit/e4a1d491c1982f966c2bfc64edcf0ea692e6521f",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/e4a1d491c1982f966c2bfc64edcf0ea692e6521f/utils/src/com/cloud/utils/db/GlobalLock.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/utils/src/com/cloud/utils/db/GlobalLock.java?ref=e4a1d491c1982f966c2bfc64edcf0ea692e6521f",
                "deletions": 4,
                "filename": "utils/src/com/cloud/utils/db/GlobalLock.java",
                "patch": "@@ -103,10 +103,12 @@ public static GlobalLock getInternLock(String name) {\n \tprivate static void releaseInternLock(String name) {\r\n \t\tsynchronized(s_lockMap) {\n \t\t\tGlobalLock lock = s_lockMap.get(name);\n-\t\t\tassert(lock != null);\n-\t\t\t\n-\t\t\tif(lock.referenceCount == 0)\n-\t\t\t\ts_lockMap.remove(name);\n+\t\t\tif(lock != null) {\n+\t\t\t\tif(lock.referenceCount == 0)\n+\t\t\t\t\ts_lockMap.remove(name);\n+\t\t\t} else {\n+\t\t\t\ts_logger.warn(\"Releasing \" + name + \", but it is already released.\");\n+\t\t\t}\n \t\t}\r\n \t}\r\n \t\r",
                "raw_url": "https://github.com/apache/cloudstack/raw/e4a1d491c1982f966c2bfc64edcf0ea692e6521f/utils/src/com/cloud/utils/db/GlobalLock.java",
                "sha": "067ad57de3067b298706c05c2299877985ce02fb",
                "status": "modified"
            }
        ],
        "message": "bug 10976: NPE fix to avoid blocking shutdown process",
        "parent": "https://github.com/apache/cloudstack/commit/6eacc112221265bdbc5acbbd092f9be2ee872daf",
        "repo": "cloudstack",
        "unit_tests": [
            "GlobalLockTest.java"
        ]
    },
    "cloudstack_e59dac2": {
        "bug_id": "cloudstack_e59dac2",
        "commit": "https://github.com/apache/cloudstack/commit/e59dac201dc66ac80728632d7218b9a787142243",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/e59dac201dc66ac80728632d7218b9a787142243/server/src/com/cloud/storage/StorageManagerImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/StorageManagerImpl.java?ref=e59dac201dc66ac80728632d7218b9a787142243",
                "deletions": 2,
                "filename": "server/src/com/cloud/storage/StorageManagerImpl.java",
                "patch": "@@ -1576,8 +1576,8 @@ public boolean storagePoolHasEnoughSpace(List<Volume> volumes, StoragePool pool)\n         long totalAskingSize = 0;\n         for (Volume volume : volumes) {\n             if (volume.getTemplateId() != null) {\n-                VMTemplateVO tmpl = _templateDao.findById(volume.getTemplateId());\n-                if (tmpl.getFormat() != ImageFormat.ISO) {\n+                VMTemplateVO tmpl = _templateDao.findByIdIncludingRemoved(volume.getTemplateId());\n+                if (tmpl != null && tmpl.getFormat() != ImageFormat.ISO) {\n                     allocatedSizeWithtemplate = _capacityMgr.getAllocatedPoolCapacity(poolVO, tmpl);\n                 }\n             }",
                "raw_url": "https://github.com/apache/cloudstack/raw/e59dac201dc66ac80728632d7218b9a787142243/server/src/com/cloud/storage/StorageManagerImpl.java",
                "sha": "1feea016202999f706ff345319f28acaf4077e53",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-8014: Fix NPE searching including removed templates\n\nSteps to reproduce if you have this issue:\n- Create a VM's volume snapshot\n- Remove VM's template and mark the template as removed with timestamp in DB\n- Restart mgmt server and create a volume out of snapshot you should get NPE\n\nFix: In `storagePoolHasEnoughSpace`, we're only searching for a VM's volume's\nsnapshot's template by Id and not including removed templates. This is a corner\ncase and NPE hits when template has been marked removed for a VM's volume's\ntemplate so we should search including removed templates.\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n(cherry picked from commit f189c105d8dde5491697b171b969e757f8f15858)\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/40f26142b38bda5b10b01b2a2aad77d1b0b5f36e",
        "repo": "cloudstack",
        "unit_tests": [
            "StorageManagerImplTest.java"
        ]
    },
    "cloudstack_e7f4bfe": {
        "bug_id": "cloudstack_e7f4bfe",
        "commit": "https://github.com/apache/cloudstack/commit/e7f4bfe1b8277f33e663c31744bc9f30d150fdbf",
        "file": [
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/cloudstack/blob/e7f4bfe1b8277f33e663c31744bc9f30d150fdbf/server/src/com/cloud/deploy/FirstFitPlanner.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/deploy/FirstFitPlanner.java?ref=e7f4bfe1b8277f33e663c31744bc9f30d150fdbf",
                "deletions": 17,
                "filename": "server/src/com/cloud/deploy/FirstFitPlanner.java",
                "patch": "@@ -731,37 +731,43 @@ protected boolean hostCanAccessSPool(Host host, StoragePool pool){\n             //If the plan specifies a poolId, it means that this VM's ROOT volume is ready and the pool should be reused.\n             //In this case, also check if rest of the volumes are ready and can be reused.\n             if(plan.getPoolId() != null){\n-                s_logger.debug(\"Volume has pool already allocated, checking if pool can be reused, poolId: \"+toBeCreated.getPoolId());\n+                s_logger.debug(\"Volume has pool(\" + plan.getPoolId() + \") already allocated, checking if pool can be reused, poolId: \"+toBeCreated.getPoolId());\n                 List<StoragePool> suitablePools = new ArrayList<StoragePool>();\n                 StoragePool pool = null;\n                 if(toBeCreated.getPoolId() != null){\n+                    s_logger.debug(\"finding pool by id '\" + toBeCreated.getPoolId() + \"'\");\n                     pool = (StoragePool)this.dataStoreMgr.getPrimaryDataStore(toBeCreated.getPoolId());\n                 }else{\n+                    s_logger.debug(\"finding pool by id '\" + plan.getPoolId() + \"'\");\n                     pool = (StoragePool)this.dataStoreMgr.getPrimaryDataStore(plan.getPoolId());\n                 }\n \n-                if(!pool.isInMaintenance()){\n-                    if(!avoid.shouldAvoid(pool)){\n-                        long exstPoolDcId = pool.getDataCenterId();\n-\n-                        long exstPoolPodId = pool.getPodId() != null ? pool.getPodId() : -1;\n-                        long exstPoolClusterId = pool.getClusterId() != null ? pool.getClusterId() : -1;\n-                        if(plan.getDataCenterId() == exstPoolDcId && plan.getPodId() == exstPoolPodId && plan.getClusterId() == exstPoolClusterId){\n-                            s_logger.debug(\"Planner need not allocate a pool for this volume since its READY\");\n-                            suitablePools.add(pool);\n-                            suitableVolumeStoragePools.put(toBeCreated, suitablePools);\n-                            if (!(toBeCreated.getState() == Volume.State.Allocated || toBeCreated.getState() == Volume.State.Creating)) {\n-                                readyAndReusedVolumes.add(toBeCreated);\n+                if(pool != null){\n+                    if(!pool.isInMaintenance()){\n+                        if(!avoid.shouldAvoid(pool)){\n+                            long exstPoolDcId = pool.getDataCenterId();\n+\n+                            long exstPoolPodId = pool.getPodId() != null ? pool.getPodId() : -1;\n+                            long exstPoolClusterId = pool.getClusterId() != null ? pool.getClusterId() : -1;\n+                            if(plan.getDataCenterId() == exstPoolDcId && plan.getPodId() == exstPoolPodId && plan.getClusterId() == exstPoolClusterId){\n+                                s_logger.debug(\"Planner need not allocate a pool for this volume since its READY\");\n+                                suitablePools.add(pool);\n+                                suitableVolumeStoragePools.put(toBeCreated, suitablePools);\n+                                if (!(toBeCreated.getState() == Volume.State.Allocated || toBeCreated.getState() == Volume.State.Creating)) {\n+                                    readyAndReusedVolumes.add(toBeCreated);\n+                                }\n+                                continue;\n+                            }else{\n+                                s_logger.debug(\"Pool of the volume does not fit the specified plan, need to reallocate a pool for this volume\");\n                             }\n-                            continue;\n                         }else{\n-                            s_logger.debug(\"Pool of the volume does not fit the specified plan, need to reallocate a pool for this volume\");\n+                            s_logger.debug(\"Pool of the volume is in avoid set, need to reallocate a pool for this volume\");\n                         }\n                     }else{\n-                        s_logger.debug(\"Pool of the volume is in avoid set, need to reallocate a pool for this volume\");\n+                        s_logger.debug(\"Pool of the volume is in maintenance, need to reallocate a pool for this volume\");\n                     }\n                 }else{\n-                    s_logger.debug(\"Pool of the volume is in maintenance, need to reallocate a pool for this volume\");\n+                    s_logger.debug(\"Unable to find pool by provided id\");\n                 }\n             }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/e7f4bfe1b8277f33e663c31744bc9f30d150fdbf/server/src/com/cloud/deploy/FirstFitPlanner.java",
                "sha": "e8504a991c1906f3ccef97dc01a99714df5323e7",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in the planner, in the case that pool ID cannot be looked up in database\nwhen deploying a VM\n\nBUG-ID: CLOUdSTACK-2281\nBugfix-for: 4.2\nReviewed-by: Prachi Damle\nSigned-off-by: Marcus Sorensen <marcus@betterservers.com> 1367280909 -0600",
        "parent": "https://github.com/apache/cloudstack/commit/d44e25efba72b03b114b5662c60d94ddcc3264f8",
        "repo": "cloudstack",
        "unit_tests": [
            "FirstFitPlannerTest.java"
        ]
    },
    "cloudstack_e7fa3a2": {
        "bug_id": "cloudstack_e7fa3a2",
        "commit": "https://github.com/apache/cloudstack/commit/e7fa3a29594eb748b201865dac3a85f8da024075",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cloudstack/blob/e7fa3a29594eb748b201865dac3a85f8da024075/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=e7fa3a29594eb748b201865dac3a85f8da024075",
                "deletions": 5,
                "filename": "engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -1871,7 +1871,8 @@ protected void migrate(VMInstanceVO vm, long srcHostId, DeployDestination dest)\n         try {\n             pfma = _agentMgr.send(dstHostId, pfmc);\n             if (pfma == null || !pfma.getResult()) {\n-                String msg = \"Unable to prepare for migration due to \" + pfma.getDetails();\n+                String details = (pfma != null) ? pfma.getDetails() : \"null answer returned\";\n+                String msg = \"Unable to prepare for migration due to \" + details;\n                 pfma = null;\n                 throw new AgentUnavailableException(msg, dstHostId);\n             }\n@@ -1907,7 +1908,8 @@ protected void migrate(VMInstanceVO vm, long srcHostId, DeployDestination dest)\n             try {\n                 Answer ma = _agentMgr.send(vm.getLastHostId(), mc);\n                 if (ma == null || !ma.getResult()) {\n-                    throw new CloudRuntimeException(\"Unable to migrate due to \" + ma.getDetails());\n+                    String details = (ma != null) ? ma.getDetails() : \"null answer returned\";\n+                    throw new CloudRuntimeException(\"Unable to migrate due to \" + details);\n                 }\n             } catch (OperationTimedoutException e) {\n                 if (e.isActive()) {\n@@ -3261,7 +3263,8 @@ private void orchestrateMigrateForScale(String vmUuid, long srcHostId, DeployDes\n         try {\n             pfma = _agentMgr.send(dstHostId, pfmc);\n             if (pfma == null || !pfma.getResult()) {\n-                String msg = \"Unable to prepare for migration due to \" + pfma.getDetails();\n+                String details = (pfma != null) ? pfma.getDetails() : \"null answer returned\";\n+                String msg = \"Unable to prepare for migration due to \" + details;\n                 pfma = null;\n                 throw new AgentUnavailableException(msg, dstHostId);\n             }\n@@ -3294,8 +3297,10 @@ private void orchestrateMigrateForScale(String vmUuid, long srcHostId, DeployDes\n             try {\n                 Answer ma = _agentMgr.send(vm.getLastHostId(), mc);\n                 if (ma == null || !ma.getResult()) {\n-                    s_logger.error(\"Unable to migrate due to \" + ma.getDetails());\n-                    throw new CloudRuntimeException(\"Unable to migrate due to \" + ma.getDetails());\n+                    String details = (ma != null) ? ma.getDetails() : \"null answer returned\";\n+                    String msg = \"Unable to migrate due to \" + details;\n+                    s_logger.error(msg);\n+                    throw new CloudRuntimeException(msg);\n                 }\n             } catch (OperationTimedoutException e) {\n                 if (e.isActive()) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/e7fa3a29594eb748b201865dac3a85f8da024075/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "0eafe1374450d60d59593b626ce1eb062a4a4656",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-7563: Fix potential NPE from FingBugs.",
        "parent": "https://github.com/apache/cloudstack/commit/176e0d47bb86fcc4ab0cdb33f95f73d751f2d814",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_e8ea6b1": {
        "bug_id": "cloudstack_e8ea6b1",
        "commit": "https://github.com/apache/cloudstack/commit/e8ea6b1abdb78e8f789571d562cd2d37f03f336a",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/e8ea6b1abdb78e8f789571d562cd2d37f03f336a/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/manager/VmwareStorageManagerImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/manager/VmwareStorageManagerImpl.java?ref=e8ea6b1abdb78e8f789571d562cd2d37f03f336a",
                "deletions": 0,
                "filename": "plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/manager/VmwareStorageManagerImpl.java",
                "patch": "@@ -74,6 +74,7 @@\n import com.cloud.utils.StringUtils;\n import com.cloud.utils.Ternary;\n import com.cloud.utils.script.Script;\n+import com.cloud.utils.exception.CloudRuntimeException;\n import com.cloud.vm.VirtualMachine;\n import com.cloud.vm.snapshot.VMSnapshot;\n import com.vmware.vim25.ManagedObjectReference;\n@@ -1090,6 +1091,9 @@ private String deleteSnapshotOnSecondaryStorge(long accountId, long volumeId, St\n     private String getVolumePathInDatastore(DatastoreMO dsMo, String volumeFileName) throws Exception {\n         String datastoreVolumePath = dsMo.searchFileInSubFolders(volumeFileName, true);\n         assert (datastoreVolumePath != null) : \"Virtual disk file missing from datastore.\";\n+        if (datastoreVolumePath == null) {\n+            throw new CloudRuntimeException(\"Unable to find file \" + volumeFileName + \" in datastore \" + dsMo.getName());\n+        }\n         return datastoreVolumePath;\n     }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/e8ea6b1abdb78e8f789571d562cd2d37f03f336a/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/manager/VmwareStorageManagerImpl.java",
                "sha": "fee3e0afc711d7c83e74968d8bb5de3b8635b01f",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/e8ea6b1abdb78e8f789571d562cd2d37f03f336a/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java?ref=e8ea6b1abdb78e8f789571d562cd2d37f03f336a",
                "deletions": 1,
                "filename": "plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "patch": "@@ -3984,7 +3984,9 @@ protected Answer execute(AttachVolumeCommand cmd) {\n             DatastoreMO dsMo = new DatastoreMO(getServiceContext(), morDs);\n             String datastoreVolumePath = dsMo.searchFileInSubFolders(cmd.getVolumePath() + \".vmdk\", true);\n             assert (datastoreVolumePath != null) : \"Virtual disk file must exist in specified datastore for attach/detach operations.\";\n-\n+            if (datastoreVolumePath == null) {\n+                throw new CloudRuntimeException(\"Unable to find file \" + cmd.getVolumePath() + \".vmdk in datastore \" + dsMo.getName());\n+            }\n             AttachVolumeAnswer answer = new AttachVolumeAnswer(cmd, cmd.getDeviceId(), datastoreVolumePath);\n             if (cmd.getAttach()) {\n                 vmMo.attachDisk(new String[] { datastoreVolumePath }, morDs);",
                "raw_url": "https://github.com/apache/cloudstack/raw/e8ea6b1abdb78e8f789571d562cd2d37f03f336a/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "sha": "968e095bde1ccda33aa403f16bb86c6b7a6190ea",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/e8ea6b1abdb78e8f789571d562cd2d37f03f336a/vmware-base/src/com/cloud/hypervisor/vmware/mo/DatastoreMO.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/vmware-base/src/com/cloud/hypervisor/vmware/mo/DatastoreMO.java?ref=e8ea6b1abdb78e8f789571d562cd2d37f03f336a",
                "deletions": 1,
                "filename": "vmware-base/src/com/cloud/hypervisor/vmware/mo/DatastoreMO.java",
                "patch": "@@ -335,7 +335,7 @@ public String searchFileInSubFolders(String fileName, boolean caseInsensitive) t\n \n         HostDatastoreBrowserMO browserMo = getHostDatastoreBrowserMO();\n         ArrayList<HostDatastoreBrowserSearchResults> results = browserMo.searchDatastoreSubFolders(\"[\" + getName() + \"]\", fileName, caseInsensitive);\n-        if (results.size() > 1) {\n+        if (results != null && results.size() > 1) {\n             s_logger.warn(\"Multiple files with name \" + fileName + \" exists in datastore \" + datastorePath + \". Trying to choose first file found in search attempt.\");\n         }\n         for (HostDatastoreBrowserSearchResults result : results) {",
                "raw_url": "https://github.com/apache/cloudstack/raw/e8ea6b1abdb78e8f789571d562cd2d37f03f336a/vmware-base/src/com/cloud/hypervisor/vmware/mo/DatastoreMO.java",
                "sha": "a1f2506ca1f3ac9f786267286781a5ecdeea91d9",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-3260\nFixing NPE.",
        "parent": "https://github.com/apache/cloudstack/commit/15a6844784142141af22224489a57d7d748c6687",
        "repo": "cloudstack",
        "unit_tests": [
            "DatastoreMOTest.java"
        ]
    },
    "cloudstack_ec978f0": {
        "bug_id": "cloudstack_ec978f0",
        "commit": "https://github.com/apache/cloudstack/commit/ec978f0716bf6f21de38513a6f368b9b84e197aa",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/ec978f0716bf6f21de38513a6f368b9b84e197aa/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=ec978f0716bf6f21de38513a6f368b9b84e197aa",
                "deletions": 6,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -822,12 +822,14 @@ public VolumeResponse createVolumeResponse(Volume volume) {\n         Long instanceId = volume.getInstanceId();\n         if (instanceId != null && volume.getState() != Volume.State.Destroy) {\n             VMInstanceVO vm = ApiDBUtils.findVMInstanceById(instanceId);\n-            volResponse.setVirtualMachineId(vm.getId());\n-            volResponse.setVirtualMachineName(vm.getHostName());\n-            UserVm userVm = ApiDBUtils.findUserVmById(vm.getId());\n-            if (userVm != null) {\n-                volResponse.setVirtualMachineDisplayName(userVm.getDisplayName());\n-                volResponse.setVirtualMachineState(vm.getState().toString());\n+            if (vm != null) {\n+                volResponse.setVirtualMachineId(vm.getId());\n+                volResponse.setVirtualMachineName(vm.getHostName());\n+                UserVm userVm = ApiDBUtils.findUserVmById(vm.getId());\n+                if (userVm != null) {\n+                    volResponse.setVirtualMachineDisplayName(userVm.getDisplayName());\n+                    volResponse.setVirtualMachineState(vm.getState().toString());\n+                }\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/ec978f0716bf6f21de38513a6f368b9b84e197aa/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "f0b232b3d88c90013dece8a1de8729684fd91219",
                "status": "modified"
            }
        ],
        "message": "fix NPE when listvolume if vm got destroyed",
        "parent": "https://github.com/apache/cloudstack/commit/891f02f4d459980aea31071e6fd894880f6bf891",
        "repo": "cloudstack",
        "unit_tests": [
            "ApiResponseHelperTest.java"
        ]
    },
    "cloudstack_ee3d6f5": {
        "bug_id": "cloudstack_ee3d6f5",
        "commit": "https://github.com/apache/cloudstack/commit/ee3d6f5ceaa058c4675f93f5a753ee00ffd9e408",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/ee3d6f5ceaa058c4675f93f5a753ee00ffd9e408/server/src/com/cloud/template/TemplateManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/template/TemplateManagerImpl.java?ref=ee3d6f5ceaa058c4675f93f5a753ee00ffd9e408",
                "deletions": 1,
                "filename": "server/src/com/cloud/template/TemplateManagerImpl.java",
                "patch": "@@ -941,7 +941,7 @@ public boolean delete(long userId, long templateId, Long zoneId) {\n \t\t\t}\n \t\t}\n \t\t\n-\t\tAccount account = _accountDao.findById(template.getAccountId());\n+\t\tAccount account = _accountDao.findByIdIncludingRemoved(template.getAccountId());\n \t\tString eventType = \"\";\n \t\t\n \t\tif (template.getFormat().equals(ImageFormat.ISO)){",
                "raw_url": "https://github.com/apache/cloudstack/raw/ee3d6f5ceaa058c4675f93f5a753ee00ffd9e408/server/src/com/cloud/template/TemplateManagerImpl.java",
                "sha": "5408358aadf4479ab3da0a874d93d0d21d110270",
                "status": "modified"
            }
        ],
        "message": "bug 9205: resolved fixed\nstatus 9205: fix NPE in usageEvent",
        "parent": "https://github.com/apache/cloudstack/commit/6ff40b7e887813483ffa8eb0f5eeb65cf64c5067",
        "repo": "cloudstack",
        "unit_tests": [
            "TemplateManagerImplTest.java"
        ]
    },
    "cloudstack_f1bee86": {
        "bug_id": "cloudstack_f1bee86",
        "commit": "https://github.com/apache/cloudstack/commit/f1bee862638e79678f7fb47f63db17bb8974ab7a",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/f1bee862638e79678f7fb47f63db17bb8974ab7a/server/src/com/cloud/server/StatsCollector.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/server/StatsCollector.java?ref=f1bee862638e79678f7fb47f63db17bb8974ab7a",
                "deletions": 1,
                "filename": "server/src/com/cloud/server/StatsCollector.java",
                "patch": "@@ -268,7 +268,10 @@ public void run() {\n                 ConcurrentHashMap<Long, StorageStats> storageStats = new ConcurrentHashMap<Long, StorageStats>();\r\n                 for (HostVO host : hosts) {\r\n                     GetStorageStatsCommand command = new GetStorageStatsCommand(host.getStorageUrl());\n-        \t\t\tHostVO ssAhost = _agentMgr.getSSAgent(host);\n+                    HostVO ssAhost = _agentMgr.getSSAgent(host);\n+                    if (ssAhost == null) {\n+                        return;\n+                    }\n                     long hostId = host.getId();\r\n                     Answer answer = _agentMgr.easySend(ssAhost.getId(), command);\r\n                     if (answer != null && answer.getResult()) {\r",
                "raw_url": "https://github.com/apache/cloudstack/raw/f1bee862638e79678f7fb47f63db17bb8974ab7a/server/src/com/cloud/server/StatsCollector.java",
                "sha": "7ba30a65a2aef1b2a1b5d48f9763743fd2aedadd",
                "status": "modified"
            }
        ],
        "message": "fixed a NPE",
        "parent": "https://github.com/apache/cloudstack/commit/90cb2dea6af064d5527554db8f8358dba96c6cb8",
        "repo": "cloudstack",
        "unit_tests": [
            "StatsCollectorTest.java"
        ]
    },
    "cloudstack_f1c63df": {
        "bug_id": "cloudstack_f1c63df",
        "commit": "https://github.com/apache/cloudstack/commit/f1c63df6657e6ae697e4e586f1fbc5497a5e46fb",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/cloudstack/blob/f1c63df6657e6ae697e4e586f1fbc5497a5e46fb/engine/schema/src/com/cloud/vm/dao/VMInstanceDaoImpl.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/com/cloud/vm/dao/VMInstanceDaoImpl.java?ref=f1c63df6657e6ae697e4e586f1fbc5497a5e46fb",
                "deletions": 15,
                "filename": "engine/schema/src/com/cloud/vm/dao/VMInstanceDaoImpl.java",
                "patch": "@@ -228,6 +228,19 @@ protected void init() {\n \n         _updateTimeAttr = _allAttributes.get(\"updateTime\");\n         assert _updateTimeAttr != null : \"Couldn't get this updateTime attribute\";\n+        \n+        SearchBuilder<NicVO> nicSearch = _nicDao.createSearchBuilder();\n+        nicSearch.and(\"networkId\", nicSearch.entity().getNetworkId(), SearchCriteria.Op.EQ);\n+\n+        DistinctHostNameSearch = createSearchBuilder(String.class);\n+        DistinctHostNameSearch.selectField(DistinctHostNameSearch.entity().getHostName());\n+\n+        DistinctHostNameSearch.and(\"types\", DistinctHostNameSearch.entity().getType(), SearchCriteria.Op.IN);\n+        DistinctHostNameSearch.and(\"removed\", DistinctHostNameSearch.entity().getRemoved(), SearchCriteria.Op.NULL);\n+        DistinctHostNameSearch.join(\"nicSearch\", nicSearch, DistinctHostNameSearch.entity().getId(),\n+                nicSearch.entity().getInstanceId(), JoinBuilder.JoinType.INNER);\n+        DistinctHostNameSearch.done();\n+        \n     }\n \n     @Override\n@@ -629,21 +642,6 @@ public Long countRunningByAccount(long accountId){\n \n     @Override\n     public List<String> listDistinctHostNames(long networkId, VirtualMachine.Type... types) {\n-        if (DistinctHostNameSearch == null) {\n-\n-            SearchBuilder<NicVO> nicSearch = _nicDao.createSearchBuilder();\n-            nicSearch.and(\"networkId\", nicSearch.entity().getNetworkId(), SearchCriteria.Op.EQ);\n-\n-            DistinctHostNameSearch = createSearchBuilder(String.class);\n-            DistinctHostNameSearch.selectField(DistinctHostNameSearch.entity().getHostName());\n-\n-            DistinctHostNameSearch.and(\"types\", DistinctHostNameSearch.entity().getType(), SearchCriteria.Op.IN);\n-            DistinctHostNameSearch.and(\"removed\", DistinctHostNameSearch.entity().getRemoved(), SearchCriteria.Op.NULL);\n-            DistinctHostNameSearch.join(\"nicSearch\", nicSearch, DistinctHostNameSearch.entity().getId(),\n-                    nicSearch.entity().getInstanceId(), JoinBuilder.JoinType.INNER);\n-            DistinctHostNameSearch.done();\n-        }\n-\n         SearchCriteria<String> sc = DistinctHostNameSearch.create();\n         if (types != null && types.length != 0) {\n             sc.setParameters(\"types\", (Object[]) types);",
                "raw_url": "https://github.com/apache/cloudstack/raw/f1c63df6657e6ae697e4e586f1fbc5497a5e46fb/engine/schema/src/com/cloud/vm/dao/VMInstanceDaoImpl.java",
                "sha": "3a7dde78a6d2bfca9bc0d530f0542955cf18678b",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-4403: vmInstanceDao - initialize the SearchBuilder in init() method instead of the search dao method which wasn't thread safe, and could cause NPEs during search builder initializing.",
        "parent": "https://github.com/apache/cloudstack/commit/17b6f1c5708001f48fd12e2553b9d8dfdc60152b",
        "repo": "cloudstack",
        "unit_tests": [
            "VMInstanceDaoImplTest.java"
        ]
    },
    "cloudstack_f280bbe": {
        "bug_id": "cloudstack_f280bbe",
        "commit": "https://github.com/apache/cloudstack/commit/f280bbe9e4cd8bdcc59f73e32885fa8f7616e342",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cloudstack/blob/f280bbe9e4cd8bdcc59f73e32885fa8f7616e342/server/src/com/cloud/api/query/dao/VolumeJoinDaoImpl.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/query/dao/VolumeJoinDaoImpl.java?ref=f280bbe9e4cd8bdcc59f73e32885fa8f7616e342",
                "deletions": 4,
                "filename": "server/src/com/cloud/api/query/dao/VolumeJoinDaoImpl.java",
                "patch": "@@ -81,22 +81,28 @@ public VolumeResponse newVolumeResponse(ResponseView view, VolumeJoinVO volume)\n         volResponse.setZoneId(volume.getDataCenterUuid());\n         volResponse.setZoneName(volume.getDataCenterName());\n \n-        volResponse.setVolumeType(volume.getVolumeType().toString());\n+        if (volume.getVolumeType() != null) {\n+            volResponse.setVolumeType(volume.getVolumeType().toString());\n+        }\n         volResponse.setDeviceId(volume.getDeviceId());\n \n         long instanceId = volume.getVmId();\n         if (instanceId > 0 && volume.getState() != Volume.State.Destroy) {\n             volResponse.setVirtualMachineId(volume.getVmUuid());\n             volResponse.setVirtualMachineName(volume.getVmName());\n-            volResponse.setVirtualMachineState(volume.getVmState().toString());\n+            if (volume.getVmState() != null) {\n+                volResponse.setVirtualMachineState(volume.getVmState().toString());\n+            }\n             if (volume.getVmDisplayName() != null) {\n                 volResponse.setVirtualMachineDisplayName(volume.getVmDisplayName());\n             } else {\n                 volResponse.setVirtualMachineDisplayName(volume.getVmName());\n             }\n         }\n \n-        volResponse.setProvisioningType(volume.getProvisioningType().toString());\n+        if (volume.getProvisioningType() != null) {\n+            volResponse.setProvisioningType(volume.getProvisioningType().toString());\n+        }\n \n         // Show the virtual size of the volume\n         volResponse.setSize(volume.getSize());\n@@ -105,7 +111,9 @@ public VolumeResponse newVolumeResponse(ResponseView view, VolumeJoinVO volume)\n         volResponse.setMaxIops(volume.getMaxIops());\n \n         volResponse.setCreated(volume.getCreated());\n-        volResponse.setState(volume.getState().toString());\n+        if (volume.getState() != null) {\n+            volResponse.setState(volume.getState().toString());\n+        }\n         if (volume.getState() == Volume.State.UploadOp) {\n             // com.cloud.storage.VolumeHostVO volumeHostRef =\n             // ApiDBUtils.findVolumeHostRef(volume.getId(),",
                "raw_url": "https://github.com/apache/cloudstack/raw/f280bbe9e4cd8bdcc59f73e32885fa8f7616e342/server/src/com/cloud/api/query/dao/VolumeJoinDaoImpl.java",
                "sha": "54d1ca164e29fcb4dd44d49ba1af285888238821",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #830 from sureshanaparti/CLOUDSTACK-8858\n\nCLOUDSTACK-8858: listVolumes API fails for a particular domain with NPE.CLOUDSTACK-8858: listVolumes API fails for a particular domain with NPE.\n\nSummary: listVolumes API fails when volume associated vm instance has NULL or invalid state. Fix the code to guard this situation since this should not block volume listing.\n\n* pr/830:\n  CLOUDSTACK-8858: listVolumes API fails for a particular domain with NPE.\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/c07c850dff913c38b72ca35b34b1b0fc9fc423cb",
        "repo": "cloudstack",
        "unit_tests": [
            "VolumeJoinDaoImplTest.java"
        ]
    },
    "cloudstack_f2951d9": {
        "bug_id": "cloudstack_f2951d9",
        "commit": "https://github.com/apache/cloudstack/commit/f2951d9560cadd3e5420f206ca69e309abd4b8fd",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cloudstack/blob/f2951d9560cadd3e5420f206ca69e309abd4b8fd/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=f2951d9560cadd3e5420f206ca69e309abd4b8fd",
                "deletions": 4,
                "filename": "engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -744,14 +744,17 @@ protected boolean checkWorkItems(final VMInstanceVO vm, final State state) throw\n \n     protected <T extends VMInstanceVO> boolean changeState(final T vm, final Event event, final Long hostId, final ItWorkVO work, final Step step) throws NoTransitionException {\n         // FIXME: We should do this better.\n-        final Step previousStep = work.getStep();\n-        _workDao.updateStep(work, step);\n+        Step previousStep = null;\n+        if (work != null) {\n+            previousStep = work.getStep();\n+            _workDao.updateStep(work, step);\n+        }\n         boolean result = false;\n         try {\n             result = stateTransitTo(vm, event, hostId);\n             return result;\n         } finally {\n-            if (!result) {\n+            if (!result && work != null) {\n                 _workDao.updateStep(work, previousStep);\n             }\n         }\n@@ -1507,12 +1510,13 @@ private void advanceStop(final VMInstanceVO vm, final boolean cleanUpEvenIfUnabl\n             if (doCleanup) {\n                 if (cleanup(vmGuru, new VirtualMachineProfileImpl(vm), work, Event.StopRequested, cleanUpEvenIfUnableToStop)) {\n                     try {\n-                        if (s_logger.isDebugEnabled()) {\n+                        if (s_logger.isDebugEnabled() && work != null) {\n                             s_logger.debug(\"Updating work item to Done, id:\" + work.getId());\n                         }\n                         if (!changeState(vm, Event.AgentReportStopped, null, work, Step.Done)) {\n                             throw new CloudRuntimeException(\"Unable to stop \" + vm);\n                         }\n+\n                     } catch (final NoTransitionException e) {\n                         s_logger.warn(\"Unable to cleanup \" + vm);\n                         throw new CloudRuntimeException(\"Unable to stop \" + vm, e);",
                "raw_url": "https://github.com/apache/cloudstack/raw/f2951d9560cadd3e5420f206ca69e309abd4b8fd/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "03a37987752f51590c78c40fa7a65f5052aa7fa1",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #1956 from myENA/bug/49npe_vmimpl\n\nCLOUDSTACK-9796 - Fix NPE in VirtualMachineManagerImpl.java",
        "parent": "https://github.com/apache/cloudstack/commit/5fcf648e7e6ed352a5d95d6c81db2c95ff824c5e",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_f40e31e": {
        "bug_id": "cloudstack_f40e31e",
        "commit": "https://github.com/apache/cloudstack/commit/f40e31e061a6e10c67fc3c4db997138e071f9fa2",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/f40e31e061a6e10c67fc3c4db997138e071f9fa2/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=f40e31e061a6e10c67fc3c4db997138e071f9fa2",
                "deletions": 1,
                "filename": "engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -1254,7 +1254,8 @@ protected boolean sendStop(VirtualMachineGuru guru, VirtualMachineProfile profil\n                     _resourceMgr.updateGPUDetails(vm.getHostId(), gpuDevice.getGroupDetails());\n                 }\n                 if (answer == null || !answer.getResult()) {\n-                    s_logger.debug(\"Unable to stop VM due to \" + answer.getDetails());\n+                    String details = (answer != null) ? answer.getDetails() : \"null answer returned\";\n+                    s_logger.debug(\"Unable to stop VM due to \" + details);\n                     return false;\n                 }\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/f40e31e061a6e10c67fc3c4db997138e071f9fa2/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "d772848779bcca53dad2eaf1413d591c24eab122",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-7563: Fix potential NPE in checking answer\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n(cherry picked from commit d42e3df9cf43b0ad46d406c6ab5b1d8c811d0239)\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/0407fb334f3a79f570217f35636b47076b06d500",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_f47cfc6": {
        "bug_id": "cloudstack_f47cfc6",
        "commit": "https://github.com/apache/cloudstack/commit/f47cfc6eb16bf0fa5830327207a2d3fdf24ab700",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/f47cfc6eb16bf0fa5830327207a2d3fdf24ab700/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java?ref=f47cfc6eb16bf0fa5830327207a2d3fdf24ab700",
                "deletions": 14,
                "filename": "engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "patch": "@@ -925,7 +925,7 @@ protected NicTO toNicTO(NicVO nic, NicProfile profile, NetworkVO config) {\n \n     boolean isNetworkImplemented(NetworkVO network) {\n         Network.State state = network.getState();\n-        if (state == Network.State.Implemented) {\n+        if (state == Network.State.Implemented || state == Network.State.Implementing) {\n             return true;\n         } else if (state == Network.State.Setup) {\n             DataCenterVO zone = _dcDao.findById(network.getDataCenterId());\n@@ -1277,19 +1277,7 @@ public int compare(NicVO nic1, NicVO nic2) {\n         });\n \n         for (NicVO nic : nics) {\n-            Pair<NetworkGuru, NetworkVO> implemented = null;\n-            if (vmProfile.getVirtualMachine().getType() != Type.DomainRouter) {\n-                implemented = implementNetwork(nic.getNetworkId(), dest, context);\n-            } else {\n-                // At the time of implementing network (using implementNetwork() method), if the VR needs to be deployed then\n-                // it follows the same path of regular VM deployment. This leads to a nested call to implementNetwork() while\n-                // preparing VR nics. This flow creates issues in dealing with network state transitions. The original call\n-                // puts network in \"Implementing\" state and then the nested call again tries to put it into same state resulting\n-                // in issues. In order to avoid it, implementNetwork() call for VR is replaced with below code.\n-                NetworkVO network = _networksDao.findById(nic.getNetworkId());\n-                NetworkGuru guru = AdapterBase.getAdapterByName(networkGurus, network.getGuruName());\n-                implemented = new Pair<NetworkGuru, NetworkVO>(guru, network);\n-            }\n+            Pair<NetworkGuru, NetworkVO> implemented = implementNetwork(nic.getNetworkId(), dest, context);\n             if (implemented == null || implemented.first() == null) {\n                 s_logger.warn(\"Failed to implement network id=\" + nic.getNetworkId() + \" as a part of preparing nic id=\" + nic.getId());\n                 throw new CloudRuntimeException(\"Failed to implement network id=\" + nic.getNetworkId() + \" as a part preparing nic id=\" + nic.getId());",
                "raw_url": "https://github.com/apache/cloudstack/raw/f47cfc6eb16bf0fa5830327207a2d3fdf24ab700/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "sha": "64a1f3a49946cfdff4f8d23003a5e94ba7a12980",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-7186: Revert \"CLOUDSTACK-7182: NPE while trying to deploy VMs in parallel in isolated network\"\n\nThis reverts commit 47d6a64b319ab064c4b855346f2bfdb250fb9ad8, which broke VPC\ncompletely.",
        "parent": "https://github.com/apache/cloudstack/commit/45c9f03e14ec956a6ccb952b6d98189adcb3c8ae",
        "repo": "cloudstack",
        "unit_tests": [
            "NetworkOrchestratorTest.java"
        ]
    },
    "cloudstack_f4a96d4": {
        "bug_id": "cloudstack_f4a96d4",
        "commit": "https://github.com/apache/cloudstack/commit/f4a96d4c853bd4f60539b9b9e9218b42640652a9",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/f4a96d4c853bd4f60539b9b9e9218b42640652a9/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/VolumeApiServiceImpl.java?ref=f4a96d4c853bd4f60539b9b9e9218b42640652a9",
                "deletions": 5,
                "filename": "server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "patch": "@@ -1382,6 +1382,11 @@ public Volume detachVolumeFromVM(DetachVolumeCmd cmmd) {\n             volume = _volsDao.findByInstanceAndDeviceId(cmmd.getVirtualMachineId(), cmmd.getDeviceId()).get(0);\n         }\n \n+        // Check that the volume ID is valid\n+        if (volume == null) {\n+            throw new InvalidParameterValueException(\"Unable to find volume with ID: \" + volumeId);\n+        }\n+\n         Long vmId = null;\n \n         if (cmmd.getVirtualMachineId() == null) {\n@@ -1390,11 +1395,6 @@ public Volume detachVolumeFromVM(DetachVolumeCmd cmmd) {\n             vmId = cmmd.getVirtualMachineId();\n         }\n \n-        // Check that the volume ID is valid\n-        if (volume == null) {\n-            throw new InvalidParameterValueException(\"Unable to find volume with ID: \" + volumeId);\n-        }\n-\n         // Permissions check\n         _accountMgr.checkAccess(caller, null, true, volume);\n ",
                "raw_url": "https://github.com/apache/cloudstack/raw/f4a96d4c853bd4f60539b9b9e9218b42640652a9/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "sha": "69558250da3336a909ea45c78ac91bc8579fd04f",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-6011 . When detach is called on a deleted volume, avoid the NPE and throw an appropriate exception instead",
        "parent": "https://github.com/apache/cloudstack/commit/9cb37ec349a6740a2f012ef4e6ac58a6c3b13907",
        "repo": "cloudstack",
        "unit_tests": [
            "VolumeApiServiceImplTest.java"
        ]
    },
    "cloudstack_f4f00cb": {
        "bug_id": "cloudstack_f4f00cb",
        "commit": "https://github.com/apache/cloudstack/commit/f4f00cbe2dd240ff7604b3c1743a817c660346a5",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/f4f00cbe2dd240ff7604b3c1743a817c660346a5/server/src/com/cloud/api/ApiServer.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiServer.java?ref=f4f00cbe2dd240ff7604b3c1743a817c660346a5",
                "deletions": 18,
                "filename": "server/src/com/cloud/api/ApiServer.java",
                "patch": "@@ -436,7 +436,7 @@ private void buildAuditTrail(StringBuffer auditTrailSb, String command, String r\n         */\r\n     }\r\n     \r\n-    public boolean verifyRequest(Map<String, Object[]> requestParameters, String userId) {\n+    public boolean verifyRequest(Map<String, Object[]> requestParameters, Long userId) {\n         try {\r\n             String apiKey = null;\r\n             String secretKey = null;\r\n@@ -453,7 +453,7 @@ public boolean verifyRequest(Map<String, Object[]> requestParameters, String use\n             \r\n             //if userId not null, that mean that user is logged in\r\n             if (userId != null) {\r\n-            \tLong accountId = ApiDBUtils.findUserById(Long.valueOf(userId)).getAccountId();\r\n+            \tLong accountId = ApiDBUtils.findUserById(userId).getAccountId();\r\n             \tAccount userAccount = _ms.findAccountById(accountId);\r\n             \tshort accountType = userAccount.getType();\r\n             \t\r\n@@ -519,22 +519,7 @@ public boolean verifyRequest(Map<String, Object[]> requestParameters, String use\n                 return false;\r\n             }\r\n \r\n-            if (account.getType() == Account.ACCOUNT_TYPE_NORMAL) {\r\n-                UserContext.updateContext(user.getId(), account, account.getAccountName(), account.getId(), account.getDomainId(), null);\r\n-\r\n-                /*\r\n-    \t\t\trequestParameters.put(BaseCmd.Properties.USER_ID.getName(), new String[] { user.getId().toString() });\r\n-                requestParameters.put(BaseCmd.Properties.ACCOUNT.getName(), new String[] { account.getAccountName() });\r\n-                requestParameters.put(BaseCmd.Properties.DOMAIN_ID.getName(), new String[] { Long.toString(account.getDomainId()) });\r\n-        \t\trequestParameters.put(BaseCmd.Properties.ACCOUNT_OBJ.getName(), new Object[] { account });\r\n-        \t\t*/\r\n-    \t\t} else {\r\n-                UserContext.updateContext(user.getId(), account, null, null, null, null);\r\n-                /*\r\n-    \t\t\trequestParameters.put(BaseCmd.Properties.USER_ID.getName(), new String[] { user.getId().toString() });\r\n-    \t\t\trequestParameters.put(BaseCmd.Properties.ACCOUNT_OBJ.getName(), new Object[] { account });\r\n-    \t\t\t*/\r\n-    \t\t}\r\n+            UserContext.updateContext(user.getId(), account, account.getAccountName(), account.getId(), account.getDomainId(), null);\r\n \r\n             if (!isCommandAvailable(account.getType(), commandName)) {\r\n         \t\treturn false;\r",
                "raw_url": "https://github.com/apache/cloudstack/raw/f4f00cbe2dd240ff7604b3c1743a817c660346a5/server/src/com/cloud/api/ApiServer.java",
                "sha": "aca838d980e57200fb5e74f36a772532798ff67c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/f4f00cbe2dd240ff7604b3c1743a817c660346a5/server/src/com/cloud/api/ApiServlet.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiServlet.java?ref=f4f00cbe2dd240ff7604b3c1743a817c660346a5",
                "deletions": 1,
                "filename": "server/src/com/cloud/api/ApiServlet.java",
                "patch": "@@ -209,7 +209,7 @@ private void processRequest(HttpServletRequest req, HttpServletResponse resp) {\n                 }\r\n             }\r\n \n-            if (_apiServer.verifyRequest(params, userId.toString())) {\n+            if (_apiServer.verifyRequest(params, userId)) {\n                 /*\n             \tif (accountObj != null) {\r\n             \t\tAccount userAccount = (Account)accountObj;\r",
                "raw_url": "https://github.com/apache/cloudstack/raw/f4f00cbe2dd240ff7604b3c1743a817c660346a5/server/src/com/cloud/api/ApiServlet.java",
                "sha": "f72ae272c92bd5fef825c7b8e786bf903626dea3",
                "status": "modified"
            }
        ],
        "message": "bug 6655:  when verifying request signature for API requests that use keys, pass the userId of the requester as a Long to avoid NPEs when converting it to a string.  Also set up the UserContext for both normal users and admins.\n\nstatus 6655: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/408822e3582c01c0d7a8733e445c8e908e092c4b",
        "repo": "cloudstack",
        "unit_tests": [
            "ApiServletTest.java"
        ]
    },
    "cloudstack_f5279e7": {
        "bug_id": "cloudstack_f5279e7",
        "commit": "https://github.com/apache/cloudstack/commit/f5279e74a6d0165d63d33845533092f178ebde9a",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/f5279e74a6d0165d63d33845533092f178ebde9a/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=f5279e74a6d0165d63d33845533092f178ebde9a",
                "deletions": 3,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -1948,8 +1948,7 @@ public EventResponse createEventResponse(Event event) {\n     }\n     \n     @Override\n-    public ListResponse<TemplateResponse> createIsoResponse(List<? extends VirtualMachineTemplate> isos, Long zoneId, boolean onlyReady, boolean isAdmin, Account account)  {\n-        Map<Long, List<VMTemplateHostVO>> isoHostsMap = new HashMap<Long, List<VMTemplateHostVO>>();\n+    public ListResponse<TemplateResponse> createIsoResponse(List<? extends VirtualMachineTemplate> isos, Long zoneId, boolean onlyReady, boolean isAdmin, Account account)  {        \n \n         ListResponse<TemplateResponse> response = new ListResponse<TemplateResponse>();\n         List<TemplateResponse> isoResponses = new ArrayList<TemplateResponse>();\n@@ -1971,7 +1970,7 @@ public EventResponse createEventResponse(Event event) {\n                 continue;\n             }\n            \n-            List<VMTemplateHostVO> isoHosts = isoHostsMap.get(iso.getId());\n+            List<VMTemplateHostVO> isoHosts = ApiDBUtils.listTemplateHostBy(iso.getId(), zoneId);\n             for (VMTemplateHostVO isoHost : isoHosts) {\n                 if (onlyReady && isoHost.getDownloadState() != Status.DOWNLOADED) {\n                     continue;",
                "raw_url": "https://github.com/apache/cloudstack/raw/f5279e74a6d0165d63d33845533092f178ebde9a/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "8219165c0836c1dfcb5bb3fcd24be9c004c28092",
                "status": "modified"
            }
        ],
        "message": "bug 7403 : Correct NPE for ListIso command.\nstatus 7403: resolved fixed",
        "parent": "https://github.com/apache/cloudstack/commit/ad571eef3609546b3c62194d6355c575cdfd15d4",
        "repo": "cloudstack",
        "unit_tests": [
            "ApiResponseHelperTest.java"
        ]
    },
    "cloudstack_f661b63": {
        "bug_id": "cloudstack_f661b63",
        "commit": "https://github.com/apache/cloudstack/commit/f661b631a13ba7f0c501eb5d1915eab3d097a37e",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/f661b631a13ba7f0c501eb5d1915eab3d097a37e/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java?ref=f661b631a13ba7f0c501eb5d1915eab3d097a37e",
                "deletions": 0,
                "filename": "engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "patch": "@@ -1523,6 +1523,8 @@ public NicProfile prepareNic(final VirtualMachineProfile vmProfile, final Deploy\n             nic.setIPv4Address(profile.getIPv4Address());\n             nic.setAddressFormat(profile.getFormat());\n             nic.setIPv6Address(profile.getIPv6Address());\n+            nic.setIPv6Cidr(profile.getIPv6Cidr());\n+            nic.setIPv6Gateway(profile.getIPv6Gateway());\n             nic.setMacAddress(profile.getMacAddress());\n             nic.setIsolationUri(profile.getIsolationUri());\n             nic.setBroadcastUri(profile.getBroadCastUri());",
                "raw_url": "https://github.com/apache/cloudstack/raw/f661b631a13ba7f0c501eb5d1915eab3d097a37e/engine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java",
                "sha": "a2505fbe638e95ca16fabbeb1e09488b9514b973",
                "status": "modified"
            }
        ],
        "message": "ipv6: Set IPv6 CIDR and Gateway in 'nic' profile\n\nWithout this information a NPE might be triggered when starting a VR, SSVM or CP\nas this information is read from the 'nics' table and causes a NPE.\n\nDuring deployment we should set the IPv6 Gateway and CIDR for the NIC object so that\nit is persisted to the database.\n\nSigned-off-by: Wido den Hollander <wido@widodh.nl>",
        "parent": "https://github.com/apache/cloudstack/commit/17787a194a54f218aacbd443909313041d7a69c3",
        "repo": "cloudstack",
        "unit_tests": [
            "NetworkOrchestratorTest.java"
        ]
    },
    "cloudstack_f68b6e8": {
        "bug_id": "cloudstack_f68b6e8",
        "commit": "https://github.com/apache/cloudstack/commit/f68b6e831221a892f312fac380b39c8b18bc57d5",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/f68b6e831221a892f312fac380b39c8b18bc57d5/server/src/com/cloud/template/TemplateManagerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/template/TemplateManagerImpl.java?ref=f68b6e831221a892f312fac380b39c8b18bc57d5",
                "deletions": 1,
                "filename": "server/src/com/cloud/template/TemplateManagerImpl.java",
                "patch": "@@ -1740,7 +1740,7 @@ public VMTemplateVO createPrivateTemplateRecord(CreateTemplateCmd cmd, Account t\n \n             if (sourceTemplateId != null) {\n                 VMTemplateVO sourceTemplate = _tmpltDao.findById(sourceTemplateId);\n-                if(sourceTemplate != null){\n+                if (sourceTemplate != null && sourceTemplate.getDetails() != null) {\n                     details.putAll(sourceTemplate.getDetails());\n                 }\n             }",
                "raw_url": "https://github.com/apache/cloudstack/raw/f68b6e831221a892f312fac380b39c8b18bc57d5/server/src/com/cloud/template/TemplateManagerImpl.java",
                "sha": "7130042bc5c8153324989d7a956fb46ce8a3bfe0",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #1846 from shapeblue/49smoketest-fixes\n\nCLOUDSTACK-9688: Fix failing smoke testsFixes failing smoke tests due to enviroment issues or corner cases:\n- Fixes NPE in Template Manager\n\n@blueorangutan package\n\n* pr/1846:\n  CLOUDSTACK-9688: Fix failing smoke tests\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/5e19e64f2f24d90d8f15d30b82d2a066061425a7",
        "repo": "cloudstack",
        "unit_tests": [
            "TemplateManagerImplTest.java"
        ]
    },
    "cloudstack_f803100": {
        "bug_id": "cloudstack_f803100",
        "commit": "https://github.com/apache/cloudstack/commit/f8031008139978abb6831a1d7cb240c993fbf8f5",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cloudstack/blob/f8031008139978abb6831a1d7cb240c993fbf8f5/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java?ref=f8031008139978abb6831a1d7cb240c993fbf8f5",
                "deletions": 1,
                "filename": "plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "patch": "@@ -1899,7 +1899,7 @@ public Answer execute(ResizeVolumeCommand cmd) {\n             s_logger.debug(\"after resize, size reports as \" + finalSize + \", requested \" + newSize);\n             return new ResizeVolumeAnswer(cmd, true, \"success\", finalSize);\n         } catch (CloudRuntimeException e) {\n-            String error = \"failed to resize volume: \" + e;\n+            String error = \"Failed to resize volume: \" + e.getMessage();\n             s_logger.debug(error);\n             return new ResizeVolumeAnswer(cmd, false, error);\n         }",
                "raw_url": "https://github.com/apache/cloudstack/raw/f8031008139978abb6831a1d7cb240c993fbf8f5/plugins/hypervisors/kvm/src/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java",
                "sha": "f6fe75cd5911e9c5576c622eb2743a264249c05d",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cloudstack/blob/f8031008139978abb6831a1d7cb240c993fbf8f5/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java?ref=f8031008139978abb6831a1d7cb240c993fbf8f5",
                "deletions": 2,
                "filename": "plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "patch": "@@ -564,7 +564,8 @@ private Answer execute(ResizeVolumeCommand cmd) {\n             VirtualDisk disk = vdisk.first();\n             long oldSize = disk.getCapacityInKB();\n             if (newSize < oldSize) {\n-                throw new Exception(\"VMware doesn't support shrinking volume from larger size: \" + oldSize + \" MB to a smaller size: \" + newSize + \" MB\");\n+                throw new Exception(\"VMware doesn't support shrinking volume from larger size: \" + oldSize/(1024*1024) + \" GB to a smaller size: \"\n+                        + newSize/(1024*1024) + \" GB\");\n             } else if (newSize == oldSize) {\n                 return new ResizeVolumeAnswer(cmd, true, \"success\", newSize * 1024);\n             }\n@@ -582,7 +583,7 @@ private Answer execute(ResizeVolumeCommand cmd) {\n             return new ResizeVolumeAnswer(cmd, true, \"success\", newSize * 1024);\n         } catch (Exception e) {\n             s_logger.error(\"Unable to resize volume\", e);\n-            String error = \"failed to resize volume:\" + e;\n+            String error = \"Failed to resize volume: \" + e.getMessage();\n             return new ResizeVolumeAnswer(cmd, false, error);\n         }\n     }",
                "raw_url": "https://github.com/apache/cloudstack/raw/f8031008139978abb6831a1d7cb240c993fbf8f5/plugins/hypervisors/vmware/src/com/cloud/hypervisor/vmware/resource/VmwareResource.java",
                "sha": "8a2488dd3f88601b646f76420c8f19af3c8593ef",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cloudstack/blob/f8031008139978abb6831a1d7cb240c993fbf8f5/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/VolumeApiServiceImpl.java?ref=f8031008139978abb6831a1d7cb240c993fbf8f5",
                "deletions": 6,
                "filename": "server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "patch": "@@ -925,6 +925,9 @@ public VolumeVO resizeVolume(ResizeVolumeCmd cmd) throws ResourceAllocationExcep\n                     if (jobResult instanceof ConcurrentOperationException) {\n                         throw (ConcurrentOperationException)jobResult;\n                     }\n+                    else if (jobResult instanceof RuntimeException) {\n+                        throw (RuntimeException)jobResult;\n+                    }\n                     else if (jobResult instanceof Throwable) {\n                         throw new RuntimeException(\"Unexpected exception\", (Throwable)jobResult);\n                     }\n@@ -1000,7 +1003,11 @@ private VolumeVO orchestrateResizeVolume(long volumeId, long currentSize, long n\n             VolumeApiResult result = future.get();\n             if (result.isFailed()) {\n                 s_logger.warn(\"Failed to resize the volume \" + volume);\n-                return null;\n+                String details = \"\";\n+                if (result.getResult() != null && !result.getResult().isEmpty()) {\n+                    details = result.getResult();\n+                }\n+                throw new CloudRuntimeException(details);\n             }\n \n             volume = _volsDao.findById(volume.getId());\n@@ -1029,16 +1036,12 @@ private VolumeVO orchestrateResizeVolume(long volumeId, long currentSize, long n\n             } else {\n                 _resourceLimitMgr.decrementResourceCount(volume.getAccountId(), ResourceType.primary_storage, volume.isDisplayVolume(), new Long(currentSize - newSize));\n             }\n-            return volume;\n         } catch (InterruptedException e) {\n             s_logger.warn(\"failed get resize volume result\", e);\n         } catch (ExecutionException e) {\n             s_logger.warn(\"failed get resize volume result\", e);\n-        } catch (Exception e) {\n-            s_logger.warn(\"failed get resize volume result\", e);\n         }\n-\n-        return null;\n+        return volume;\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/cloudstack/raw/f8031008139978abb6831a1d7cb240c993fbf8f5/server/src/com/cloud/storage/VolumeApiServiceImpl.java",
                "sha": "5a83ac9d0550fedf26f1b64c6b8ee9545a4e9d9a",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-6969. Data Volume Shrink operation failing with \"Unexpected Exception\".\nFor ResizeVolume API command -\n1. If hypervisor resource throws an exception, handle the NPE thrown by the job framework.\n2. Improve user error message in case of RuntimeException by throwing the exception instead of 'Unexpected Exception'.",
        "parent": "https://github.com/apache/cloudstack/commit/fca41bf527372018dc2faaae03b9d37eb564b66a",
        "repo": "cloudstack",
        "unit_tests": [
            "VolumeApiServiceImplTest.java"
        ]
    },
    "cloudstack_f8e40ad": {
        "bug_id": "cloudstack_f8e40ad",
        "commit": "https://github.com/apache/cloudstack/commit/f8e40ad43ffd6ead9cf764426c1684bf3b679367",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cloudstack/blob/f8e40ad43ffd6ead9cf764426c1684bf3b679367/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java?ref=f8e40ad43ffd6ead9cf764426c1684bf3b679367",
                "deletions": 1,
                "filename": "engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "patch": "@@ -1748,6 +1748,10 @@ private void orchestrateStorageMigration(final String vmUuid, final StoragePool\n         final HostVO srcHost = _hostDao.findById(srchostId);\n         final Long srcClusterId = srcHost.getClusterId();\n \n+        if (destPool == null) {\n+            throw new CloudRuntimeException(\"Unable to migrate vm: missing destination storage pool\");\n+        }\n+\n         try {\n             stateTransitTo(vm, VirtualMachine.Event.StorageMigrationRequested, null);\n         } catch (final NoTransitionException e) {\n@@ -1763,7 +1767,7 @@ private void orchestrateStorageMigration(final String vmUuid, final StoragePool\n             if (migrationResult) {\n                 //if the vm is migrated to different pod in basic mode, need to reallocate ip\n \n-                if (!vm.getPodIdToDeployIn().equals(destPool.getPodId())) {\n+                if (destPool.getPodId() != null && !destPool.getPodId().equals(vm.getPodIdToDeployIn())) {\n                     final DataCenterDeployment plan = new DataCenterDeployment(vm.getDataCenterId(), destPool.getPodId(), null, null, null, null);\n                     final VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vm, null, null, null, null);\n                     _networkMgr.reallocate(vmProfile, plan);",
                "raw_url": "https://github.com/apache/cloudstack/raw/f8e40ad43ffd6ead9cf764426c1684bf3b679367/engine/orchestration/src/com/cloud/vm/VirtualMachineManagerImpl.java",
                "sha": "f972539fc7dd430bfd448200a5daac51f4a393dc",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #918 from ustcweizhou/NPE-storage-migration\n\nCLOUDSTACK-8941: fix NPE when migrate vm to other zone-wide pools the second timeThis is because the pod_id is set to NULL at the first time when I migrate the instance to a zone-wide pool (not cluster-wide).\n\n* pr/918:\n  CLOUDSTACK-8941: fix NPE when migrate vm to other zone-wide pools the second time\n\nSigned-off-by: Remi Bergsma <github@remi.nl>",
        "parent": "https://github.com/apache/cloudstack/commit/d538e438e77d4514cf452b453dcbc72ebdfe0dc4",
        "repo": "cloudstack",
        "unit_tests": [
            "VirtualMachineManagerImplTest.java"
        ]
    },
    "cloudstack_fae4fda": {
        "bug_id": "cloudstack_fae4fda",
        "commit": "https://github.com/apache/cloudstack/commit/fae4fdae5386a517bf417da1f06c5bf11499364b",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cloudstack/blob/fae4fdae5386a517bf417da1f06c5bf11499364b/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=fae4fdae5386a517bf417da1f06c5bf11499364b",
                "deletions": 2,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -548,8 +548,10 @@ public VMSnapshotResponse createVMSnapshotResponse(VMSnapshot vmSnapshot) {\n         }\n         if (vmSnapshot.getParent() != null) {\n             VMSnapshot vmSnapshotParent = ApiDBUtils.getVMSnapshotById(vmSnapshot.getParent());\n-            vmSnapshotResponse.setParent(vmSnapshotParent.getUuid());\n-            vmSnapshotResponse.setParentName(vmSnapshotParent.getDisplayName());\n+            if (vmSnapshotParent != null) {\n+                vmSnapshotResponse.setParent(vmSnapshotParent.getUuid());\n+                vmSnapshotResponse.setParentName(vmSnapshotParent.getDisplayName());\n+            }\n         }\n         vmSnapshotResponse.setCurrent(vmSnapshot.getCurrent());\n         vmSnapshotResponse.setType(vmSnapshot.getType().toString());",
                "raw_url": "https://github.com/apache/cloudstack/raw/fae4fdae5386a517bf417da1f06c5bf11499364b/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "f7059ef39939109878a560f406b151219bb236b7",
                "status": "modified"
            }
        ],
        "message": "ApiResponseHelper: fix NPE when parent of snapshot is null\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/7c41a1184cb4566a6337b8e50978c1e550b601c6",
        "repo": "cloudstack",
        "unit_tests": [
            "ApiResponseHelperTest.java"
        ]
    },
    "cloudstack_fc2b95d": {
        "bug_id": "cloudstack_fc2b95d",
        "commit": "https://github.com/apache/cloudstack/commit/fc2b95d9c3ecfd3819703ebb77993ad27ecd42bc",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cloudstack/blob/fc2b95d9c3ecfd3819703ebb77993ad27ecd42bc/server/src/com/cloud/api/ApiResponseHelper.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/api/ApiResponseHelper.java?ref=fc2b95d9c3ecfd3819703ebb77993ad27ecd42bc",
                "deletions": 4,
                "filename": "server/src/com/cloud/api/ApiResponseHelper.java",
                "patch": "@@ -2015,11 +2015,13 @@ public TemplateResponse createIsoResponse(VirtualMachineTemplate result) {\n             isoResponse.setOsTypeName(\"\");\r\n         }\r\n         \r\n-        populateOwner(isoResponse, iso);\r\n+        Account account = ApiDBUtils.findAccountByIdIncludingRemoved(iso.getAccountId());\r\n+        populateAccount(isoResponse, account.getId());\r\n+        populateDomain(isoResponse, account.getDomainId());\r\n \r\n-        Account account = UserContext.current().getCaller();\r\n+        Account caller = UserContext.current().getCaller();\r\n         boolean isAdmin = false;\r\n-        if ((account == null) || BaseCmd.isAdmin(account.getType())) {\r\n+        if ((caller == null) || BaseCmd.isAdmin(caller.getType())) {\r\n             isAdmin = true;\r\n         }\r\n         // Add the zone ID\r\n@@ -2028,7 +2030,7 @@ public TemplateResponse createIsoResponse(VirtualMachineTemplate result) {\n         isoResponse.setZoneName(datacenter.getName());\r\n \r\n         // If the user is an admin, add the template download status\r\n-        if (isAdmin || account.getId() == iso.getAccountId()) {\r\n+        if (isAdmin || caller.getId() == iso.getAccountId()) {\r\n             // add download status\r\n             if (isoHost.getDownloadState() != Status.DOWNLOADED) {\r\n                 String isoStatus = \"Processing\";\r",
                "raw_url": "https://github.com/apache/cloudstack/raw/fc2b95d9c3ecfd3819703ebb77993ad27ecd42bc/server/src/com/cloud/api/ApiResponseHelper.java",
                "sha": "7d791b9a3e8d51625b92e859fe7efc25af6ab227",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE in listIso API",
        "parent": "https://github.com/apache/cloudstack/commit/655a9805f3be0ab55e6c6f3ffea2a6526f032cf9",
        "repo": "cloudstack",
        "unit_tests": [
            "ApiResponseHelperTest.java"
        ]
    },
    "cloudstack_fdb782f": {
        "bug_id": "cloudstack_fdb782f",
        "commit": "https://github.com/apache/cloudstack/commit/fdb782ffcbd612cc1b44f827087267eb43e8687a",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cloudstack/blob/fdb782ffcbd612cc1b44f827087267eb43e8687a/server/src/com/cloud/storage/StorageManagerImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/com/cloud/storage/StorageManagerImpl.java?ref=fdb782ffcbd612cc1b44f827087267eb43e8687a",
                "deletions": 2,
                "filename": "server/src/com/cloud/storage/StorageManagerImpl.java",
                "patch": "@@ -1576,8 +1576,8 @@ public boolean storagePoolHasEnoughSpace(List<Volume> volumes, StoragePool pool)\n         long totalAskingSize = 0;\n         for (Volume volume : volumes) {\n             if (volume.getTemplateId() != null) {\n-                VMTemplateVO tmpl = _templateDao.findById(volume.getTemplateId());\n-                if (tmpl.getFormat() != ImageFormat.ISO) {\n+                VMTemplateVO tmpl = _templateDao.findByIdIncludingRemoved(volume.getTemplateId());\n+                if (tmpl != null && tmpl.getFormat() != ImageFormat.ISO) {\n                     allocatedSizeWithtemplate = _capacityMgr.getAllocatedPoolCapacity(poolVO, tmpl);\n                 }\n             }",
                "raw_url": "https://github.com/apache/cloudstack/raw/fdb782ffcbd612cc1b44f827087267eb43e8687a/server/src/com/cloud/storage/StorageManagerImpl.java",
                "sha": "c603c4d70eb2aee22b37d3c8477c09f77d4797ca",
                "status": "modified"
            }
        ],
        "message": "CLOUDSTACK-8014: Fix NPE searching including removed templates\n\nSteps to reproduce if you have this issue:\n- Create a VM's volume snapshot\n- Remove VM's template and mark the template as removed with timestamp in DB\n- Restart mgmt server and create a volume out of snapshot you should get NPE\n\nFix: In `storagePoolHasEnoughSpace`, we're only searching for a VM's volume's\nsnapshot's template by Id and not including removed templates. This is a corner\ncase and NPE hits when template has been marked removed for a VM's volume's\ntemplate so we should search including removed templates.\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n(cherry picked from commit f189c105d8dde5491697b171b969e757f8f15858)\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>",
        "parent": "https://github.com/apache/cloudstack/commit/ec478c49a69ce7db9dc6598d8c05973d2def67bf",
        "repo": "cloudstack",
        "unit_tests": [
            "StorageManagerImplTest.java"
        ]
    }
}