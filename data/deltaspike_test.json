{
    "deltaspike_e60776c": {
        "repo": "deltaspike",
        "message": "DELTASPIKE-1139 also fix a NPE if the configured value is not set and logValues is enabled",
        "commit": "https://github.com/apache/deltaspike/commit/e60776cc76c12e10b214db5950fcbf0d80f883e3",
        "parent": "https://github.com/apache/deltaspike/commit/07f5199529a0e2cdb6dfbda20e4b16f060378b84",
        "bug_id": "deltaspike_e60776c",
        "file": [
            {
                "sha": "a2b8ed6ae8a8ff9055d29b9a9bd055e93380fe99",
                "filename": "deltaspike/core/api/src/main/java/org/apache/deltaspike/core/api/config/ConfigResolver.java",
                "blob_url": "https://github.com/apache/deltaspike/blob/e60776cc76c12e10b214db5950fcbf0d80f883e3/deltaspike/core/api/src/main/java/org/apache/deltaspike/core/api/config/ConfigResolver.java",
                "raw_url": "https://github.com/apache/deltaspike/raw/e60776cc76c12e10b214db5950fcbf0d80f883e3/deltaspike/core/api/src/main/java/org/apache/deltaspike/core/api/config/ConfigResolver.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/deltaspike/contents/deltaspike/core/api/src/main/java/org/apache/deltaspike/core/api/config/ConfigResolver.java?ref=e60776cc76c12e10b214db5950fcbf0d80f883e3",
                "patch": "@@ -900,15 +900,16 @@ public T getValue()\n \n             value = fallbackToDefaultIfEmpty(keyResolved, value, defaultValue);\n \n-            if (logChanges && (value != null && lastValue == null || !value.equals(lastValue)) )\n+            if (logChanges && (value != null && !value.equals(lastValue) || (value == null && lastValue != null)) )\n             {\n                 LOG.log(Level.INFO, \"New value {0} for key {1}.\",\n                     new Object[]{filterConfigValueForLog(keyOriginal, valueStr), keyOriginal});\n             }\n \n+            lastValue = value;\n+\n             if (cacheTimeMs > 0)\n             {\n-                lastValue = value;\n                 reloadAfter = now + cacheTimeMs;\n             }\n ",
                "deletions": 2
            },
            {
                "sha": "6afdce763ca1ba2d1be9f4f795771f707f89cc54",
                "filename": "deltaspike/core/api/src/test/java/org/apache/deltaspike/test/api/config/ConfigResolverTest.java",
                "blob_url": "https://github.com/apache/deltaspike/blob/e60776cc76c12e10b214db5950fcbf0d80f883e3/deltaspike/core/api/src/test/java/org/apache/deltaspike/test/api/config/ConfigResolverTest.java",
                "raw_url": "https://github.com/apache/deltaspike/raw/e60776cc76c12e10b214db5950fcbf0d80f883e3/deltaspike/core/api/src/test/java/org/apache/deltaspike/test/api/config/ConfigResolverTest.java",
                "status": "modified",
                "changes": 42,
                "additions": 41,
                "contents_url": "https://api.github.com/repos/apache/deltaspike/contents/deltaspike/core/api/src/test/java/org/apache/deltaspike/test/api/config/ConfigResolverTest.java?ref=e60776cc76c12e10b214db5950fcbf0d80f883e3",
                "patch": "@@ -21,6 +21,7 @@\n import org.apache.deltaspike.core.api.config.ConfigResolver;\n import org.apache.deltaspike.core.api.projectstage.ProjectStage;\n import org.apache.deltaspike.core.spi.config.ConfigFilter;\n+import org.apache.deltaspike.core.spi.config.ConfigSource;\n import org.apache.deltaspike.core.util.ProjectStageProducer;\n import org.junit.Assert;\n import org.junit.Before;\n@@ -160,8 +161,8 @@ public void testConfigVariableNotExisting()\n             String url = ConfigResolver.getPropertyValue(\"deltaspike.test.nonexisting.variable\", true);\n             Assert.assertEquals(\"${does.not.exist}/someservice/myendpoint\", url);\n         }\n-\n     }\n+\n     @Test\n     public void testConfigVariableRecursiveDeclaration()\n     {\n@@ -173,6 +174,44 @@ public void testConfigVariableRecursiveDeclaration()\n         Assert.assertEquals(\"pre-crazy-post/ohgosh/crazy\", tr.getValue());\n     }\n \n+    @Test\n+    public void testTypedResolver_NonExistingValue()\n+    {\n+        final String key = \"non.existing.key\";\n+\n+        ConfigResolver.TypedResolver<String> resolver = ConfigResolver.resolve(key)\n+            .logChanges(true);\n+\n+        Assert.assertNull(resolver.getValue());\n+\n+        setTestConfigSourceValue(key, \"somevalue\");\n+        Assert.assertEquals(\"somevalue\", resolver.getValue());\n+\n+        setTestConfigSourceValue(key, null);\n+        Assert.assertNull(resolver.getValue());\n+    }\n+\n+    private void setTestConfigSourceValue(String key, String value)\n+    {\n+        ConfigSource[] configSources = ConfigResolver.getConfigSources();\n+        for (ConfigSource configSource : configSources)\n+        {\n+            if (configSource instanceof TestConfigSource)\n+            {\n+                if (value == null)\n+                {\n+                    configSource.getProperties().remove(key);\n+                }\n+                else\n+                {\n+                    configSource.getProperties().put(key, value);\n+                }\n+\n+                break;\n+            }\n+        }\n+    }\n+\n     public static class TestConfigFilter implements ConfigFilter\n     {\n         @Override\n@@ -195,4 +234,5 @@ public String filterValueForLog(String key, String value)\n             return value;\n         }\n     }\n+\n }",
                "deletions": 1
            },
            {
                "sha": "84d58751f5921ee5699a33a4799a996701b348b8",
                "filename": "deltaspike/core/api/src/test/resources/META-INF/services/org.apache.deltaspike.core.spi.config.ConfigSource",
                "blob_url": "https://github.com/apache/deltaspike/blob/e60776cc76c12e10b214db5950fcbf0d80f883e3/deltaspike/core/api/src/test/resources/META-INF/services/org.apache.deltaspike.core.spi.config.ConfigSource",
                "raw_url": "https://github.com/apache/deltaspike/raw/e60776cc76c12e10b214db5950fcbf0d80f883e3/deltaspike/core/api/src/test/resources/META-INF/services/org.apache.deltaspike.core.spi.config.ConfigSource",
                "status": "modified",
                "changes": 57,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/deltaspike/contents/deltaspike/core/api/src/test/resources/META-INF/services/org.apache.deltaspike.core.spi.config.ConfigSource?ref=e60776cc76c12e10b214db5950fcbf0d80f883e3",
                "patch": "@@ -1,60 +1,3 @@\n-#\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements. See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership. The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License. You may obtain a copy of the License at\n-#\n-# http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied. See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-#\n-\n-#\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements. See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership. The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License. You may obtain a copy of the License at\n-#\n-# http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-#\n-\n-#\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-# http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-#\n-\n #####################################################################################\n # Licensed to the Apache Software Foundation (ASF) under one\n # or more contributor license agreements. See the NOTICE file",
                "deletions": 57
            }
        ],
        "patched_files": [
            "ConfigResolver.java"
        ],
        "unit_tests": [
            "ConfigResolverTest.java"
        ]
    }
}