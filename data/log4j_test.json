{
    "log4j_0e1cc4a": {
        "bug_id": "log4j_0e1cc4a",
        "commit": "https://github.com/apache/log4j/commit/0e1cc4a10b28f3f119baded6b3f00683faf2a2de",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/log4j/blob/0e1cc4a10b28f3f119baded6b3f00683faf2a2de/src/java/org/apache/log4j/Hierarchy.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/Hierarchy.java?ref=0e1cc4a10b28f3f119baded6b3f00683faf2a2de",
                "deletions": 1,
                "filename": "src/java/org/apache/log4j/Hierarchy.java",
                "patch": "@@ -32,6 +32,7 @@\n import org.apache.log4j.spi.LoggerRepositoryEx;\n import org.apache.log4j.spi.LoggerRepositoryEventListener;\n import org.apache.log4j.spi.RendererSupport;\n+import org.apache.log4j.spi.RootLogger;\n \n import java.util.ArrayList;\n import java.util.Enumeration;\n@@ -98,7 +99,7 @@\n   boolean pristine = true;\n \n   /**\n-     Create a new logger hierarchy.\n+     Constructs a new logger hierarchy.\n \n      @param root The root of the new hierarchy.\n \n@@ -118,6 +119,13 @@ public Hierarchy(Logger root) {\n     loggerFactory = new DefaultLoggerFactory();\n   }\n \n+  /**\n+   * Constructs a new logger hierarchy with a default {@link RootLogger}.\n+   */\n+  public Hierarchy() {\n+    this(new RootLogger());\n+  }\n+\n   /**\n      Add an object renderer for a specific class.\n    */",
                "raw_url": "https://github.com/apache/log4j/raw/0e1cc4a10b28f3f119baded6b3f00683faf2a2de/src/java/org/apache/log4j/Hierarchy.java",
                "sha": "bb273b6b7568cfd3f9d99ce687966bf145778d6b",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/log4j/blob/0e1cc4a10b28f3f119baded6b3f00683faf2a2de/src/java/org/apache/log4j/LogManager.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/LogManager.java?ref=0e1cc4a10b28f3f119baded6b3f00683faf2a2de",
                "deletions": 6,
                "filename": "src/java/org/apache/log4j/LogManager.java",
                "patch": "@@ -209,16 +209,23 @@\n        within JBoss, then JBoss will install its own repository selector\n        and Tomcat will use the repository selector set by its container,\n        JBoss.  \n+       \n+       @param selector new selector, cannot be null\n+       @param guard new guard value, or existing guard, or null\n+       @throws IllegalArgumentException if a non-null guard is not the same as the old\n+       @throws IllegalArgumentException if the selector is null\n+       @throws IllegalArgumentException if {@link RepositorySelector#getLoggerRepository()} returns null \n     */\n-    public static void setRepositorySelector(\n-                                             RepositorySelector selector, Object guard) throws IllegalArgumentException {\n+    public static void setRepositorySelector(RepositorySelector selector, Object guard) {\n         if ((LogManager.guard != null) && (LogManager.guard != guard)) {\n-            throw new IllegalArgumentException(\n-                                               \"Attempted to reset the LoggerFactory without possessing the guard.\");\n+            throw new IllegalArgumentException(\"Attempted to reset the LoggerFactory without possessing the guard.\");\n         }\n         if (selector == null) {\n-            throw new IllegalArgumentException(\n-                                               \"RepositorySelector must be non-null.\");\n+            throw new IllegalArgumentException(\"RepositorySelector must be non-null.\");\n+        }\n+        if (selector.getLoggerRepository() == null) {\n+          String s = \"RepositorySelector.getLoggerRepository() must return non-null.\";\n+          throw new IllegalArgumentException(s);\n         }\n         \n         LogManager.guard = guard;\n@@ -236,6 +243,9 @@ public static RepositorySelector getRepositorySelector() {\n         return  LogManager.repositorySelector;\n     } \n     \n+    /**\n+     * Returns the logger repository currently in use.\n+     */\n     public static LoggerRepository getLoggerRepository() {\n         return repositorySelector.getLoggerRepository();\n     }",
                "raw_url": "https://github.com/apache/log4j/raw/0e1cc4a10b28f3f119baded6b3f00683faf2a2de/src/java/org/apache/log4j/LogManager.java",
                "sha": "0d15efd9402dcc60cb6e269472b47e1eacc5b6a7",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/log4j/blob/0e1cc4a10b28f3f119baded6b3f00683faf2a2de/src/java/org/apache/log4j/spi/DefaultRepositorySelector.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/spi/DefaultRepositorySelector.java?ref=0e1cc4a10b28f3f119baded6b3f00683faf2a2de",
                "deletions": 4,
                "filename": "src/java/org/apache/log4j/spi/DefaultRepositorySelector.java",
                "patch": "@@ -16,16 +16,25 @@\n \n package org.apache.log4j.spi;\n \n-import org.apache.log4j.helpers.Constants;\n-\n+/**\n+ * Trivial implementation of RepositorySelectorEx which takes\n+ * a fixed repository.\n+ */\n public class DefaultRepositorySelector implements RepositorySelectorEx {\n-  LoggerRepository defaultRepository;\n+  \n+  private LoggerRepository defaultRepository;\n \n+  /**\n+   * Constructs a new instance.\n+   * @param repository cannot be null\n+   */\n   public DefaultRepositorySelector(final LoggerRepository repository) {\n+    if (repository == null)\n+      throw new NullPointerException();\n     this.defaultRepository = repository;\n   }\n \n-  public LoggerRepository  getLoggerRepository() {\n+  public LoggerRepository getLoggerRepository() {\n     return defaultRepository;\n   }\n   ",
                "raw_url": "https://github.com/apache/log4j/raw/0e1cc4a10b28f3f119baded6b3f00683faf2a2de/src/java/org/apache/log4j/spi/DefaultRepositorySelector.java",
                "sha": "157098a066e45152802784e82d428ce6f74a7daf",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/log4j/blob/0e1cc4a10b28f3f119baded6b3f00683faf2a2de/src/java/org/apache/log4j/spi/RootLogger.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/spi/RootLogger.java?ref=0e1cc4a10b28f3f119baded6b3f00683faf2a2de",
                "deletions": 2,
                "filename": "src/java/org/apache/log4j/spi/RootLogger.java",
                "patch": "@@ -35,15 +35,24 @@\n \n  */\n public final class RootLogger extends Logger {\n+  \n   /**\n-     The root category names itself as \"root\". However, the root\n-     category cannot be retrieved by name.\n+   * Constructs using a level.\n+   * The root category names itself as \"root\". However, the root\n+   * category cannot be retrieved by name.\n   */\n   public RootLogger(Level level) {\n     super(\"root\");\n     setLevel(level);\n   }\n \n+  /**\n+   * Constructs using a default {@link Level#DEBUG} threshold level.\n+   */\n+  public RootLogger() {\n+    this(Level.DEBUG);\n+  }\n+\n   /**\n      Return the assigned level value without walking the category\n      hierarchy.",
                "raw_url": "https://github.com/apache/log4j/raw/0e1cc4a10b28f3f119baded6b3f00683faf2a2de/src/java/org/apache/log4j/spi/RootLogger.java",
                "sha": "1215dcb04f1ece5a7d674559f65ddabebeece2be",
                "status": "modified"
            },
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/log4j/blob/0e1cc4a10b28f3f119baded6b3f00683faf2a2de/tests/src/java/org/apache/log4j/LogManagerTest.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/tests/src/java/org/apache/log4j/LogManagerTest.java?ref=0e1cc4a10b28f3f119baded6b3f00683faf2a2de",
                "deletions": 2,
                "filename": "tests/src/java/org/apache/log4j/LogManagerTest.java",
                "patch": "@@ -16,15 +16,24 @@\n \n package org.apache.log4j;\n \n+import org.apache.log4j.spi.DefaultRepositorySelector;\n+import org.apache.log4j.spi.LoggerRepository;\n+import org.apache.log4j.spi.RepositorySelector;\n+\n import junit.framework.TestCase;\n \n \n /**\n- *    Tests for LogManager\n+ * Tests for {@link LogManager}.\n  *\n  * @author Curt Arnold\n- **/\n+ */\n public class LogManagerTest extends TestCase {\n+\n+  private static final Object sharedGuard = new Object();\n+\n+  private Hierarchy h = new Hierarchy();\n+  \n   /**\n    * Create new instance of LogManagerTest.\n    * @param testName test name\n@@ -72,4 +81,33 @@ public void testConfiguratorClassKey() {\n   public void testDefaultInitOverrideKey() {\n      assertEquals(\"log4j.defaultInitOverride\", LogManager.DEFAULT_INIT_OVERRIDE_KEY);\n   }\n+  \n+  public void testValidSelector() {\n+    RepositorySelector selector = new DefaultRepositorySelector(h);\n+    LogManager.setRepositorySelector(selector, sharedGuard);\n+    Logger log = Logger.getLogger(\"TestValidSelector\");\n+    log.info(\"Logger obtained\");\n+    \n+    try {\n+      LogManager.setRepositorySelector(selector, \"joe\");\n+      fail(\"cannot cheat guard\");\n+    } catch (IllegalArgumentException e) {}\n+  }\n+\n+  public void testInvalidSelector() {\n+    try {\n+      RepositorySelector selector = new RepositorySelector() {\n+\n+        public LoggerRepository getLoggerRepository() {\n+          return null;\n+        }\n+        \n+      };\n+      LogManager.setRepositorySelector(selector, sharedGuard);\n+      Logger.getLogger(\"TestInvalidSelector\");      \n+      fail(\"Invalid repository selector should have generated IllegalArgumentException\");\n+    } catch (IllegalArgumentException iae) {\n+    }\n+  }\n+\n }",
                "raw_url": "https://github.com/apache/log4j/raw/0e1cc4a10b28f3f119baded6b3f00683faf2a2de/tests/src/java/org/apache/log4j/LogManagerTest.java",
                "sha": "c1dfacd79e0d047a927983e41e7aa9266c6ca804",
                "status": "modified"
            }
        ],
        "message": "Bug 32536 - Guard against NPE by checking passed in RepositorySelector\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@500473 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/log4j/commit/bc7ace697b7097329c5f4f7ffb978b0bd7f4dda2",
        "patched_files": [
            "RootLogger.java",
            "LogManager.java",
            "Hierarchy.java",
            "DefaultRepositorySelector.java"
        ],
        "repo": "log4j",
        "unit_tests": [
            "LogManagerTest.java"
        ]
    },
    "log4j_269f78a": {
        "bug_id": "log4j_269f78a",
        "commit": "https://github.com/apache/log4j/commit/269f78adefdb4294c1a999a5566a82d0f51b244e",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/log4j/blob/269f78adefdb4294c1a999a5566a82d0f51b244e/src/changes/changes.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/changes/changes.xml?ref=269f78adefdb4294c1a999a5566a82d0f51b244e",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -86,6 +86,7 @@\n        <action action=\"fix\" issue=\"46539\">The QuietWriter class does not live up to its published contract.</action>\n        <action action=\"add\" issue=\"46983\">More Debug output for log4j auto-configure requested.</action>\n        <action action=\"add\" issue=\"47107\">Add MDC.clear().</action>\n+       <action action=\"fix\" issue=\"47547\">NullPointerException when calling Category.removeAllAppenders().</action>\n     </release>\n \n   ",
                "raw_url": "https://github.com/apache/log4j/raw/269f78adefdb4294c1a999a5566a82d0f51b244e/src/changes/changes.xml",
                "sha": "39d7b610ed39c3fb619e206ba1ea494924b9c547",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/log4j/blob/269f78adefdb4294c1a999a5566a82d0f51b244e/src/main/java/org/apache/log4j/Category.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/main/java/org/apache/log4j/Category.java?ref=269f78adefdb4294c1a999a5566a82d0f51b244e",
                "deletions": 1,
                "filename": "src/main/java/org/apache/log4j/Category.java",
                "patch": "@@ -885,7 +885,7 @@ private void fireRemoveAppenderEvent(final Appender appender) {\n   void removeAllAppenders() {\n     if(aai != null) {\n       Vector appenders = new Vector();\n-      for (Enumeration iter = aai.getAllAppenders(); iter.hasMoreElements();) {\n+      for (Enumeration iter = aai.getAllAppenders(); iter != null && iter.hasMoreElements();) {\n           appenders.add(iter.nextElement());\n       }\n       aai.removeAllAppenders();",
                "raw_url": "https://github.com/apache/log4j/raw/269f78adefdb4294c1a999a5566a82d0f51b244e/src/main/java/org/apache/log4j/Category.java",
                "sha": "e0cb56108cf52d99eed0f58c984b3d95820d696a",
                "status": "modified"
            }
        ],
        "message": "Big 47547: NPE in Category.removeAllAppenders\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@824000 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/log4j/commit/6e43ab6237576accc58e4c220403e01415829777",
        "patched_files": [
            "Category.java"
        ],
        "repo": "log4j",
        "unit_tests": [
            "CategoryTest.java"
        ]
    },
    "log4j_2e42a97": {
        "bug_id": "log4j_2e42a97",
        "commit": "https://github.com/apache/log4j/commit/2e42a97e9fd77698cf0d302092eed429ea5be573",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/log4j/blob/2e42a97e9fd77698cf0d302092eed429ea5be573/src/java/org/apache/log4j/FileAppender.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/FileAppender.java?ref=2e42a97e9fd77698cf0d302092eed429ea5be573",
                "deletions": 1,
                "filename": "src/java/org/apache/log4j/FileAppender.java",
                "patch": "@@ -289,7 +289,7 @@ public synchronized void setFile(\n     Writer fw = createWriter(ostream);\n \n     if (bufferedIO) {\n-      fw = new BufferedWriter(this.qw, bufferSize);\n+      fw = new BufferedWriter(fw, bufferSize);\n     }\n     setQWForFiles(fw);\n ",
                "raw_url": "https://github.com/apache/log4j/raw/2e42a97e9fd77698cf0d302092eed429ea5be573/src/java/org/apache/log4j/FileAppender.java",
                "sha": "34f47fc8c2c6d867ebd5c65c02b65ddabf23835b",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/log4j/blob/2e42a97e9fd77698cf0d302092eed429ea5be573/tests/src/java/org/apache/log4j/FileAppenderTest.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/tests/src/java/org/apache/log4j/FileAppenderTest.java?ref=2e42a97e9fd77698cf0d302092eed429ea5be573",
                "deletions": 0,
                "filename": "tests/src/java/org/apache/log4j/FileAppenderTest.java",
                "patch": "@@ -101,4 +101,13 @@ public void testIsAsSevereAsThreshold() {\n     Priority debug = Level.DEBUG;\n     assertTrue(appender.isAsSevereAsThreshold(debug));\n   }\n+\n+    /**\n+     * Test for bug 38993.\n+     * @throws java.io.IOException if IOException\n+     */\n+  public void testSetFileBuffered() throws java.io.IOException {\n+      FileAppender appender = new FileAppender();\n+      appender.setFile(\"output/setFileBuffered.log\", false, true, 100);\n+  }\n }",
                "raw_url": "https://github.com/apache/log4j/raw/2e42a97e9fd77698cf0d302092eed429ea5be573/tests/src/java/org/apache/log4j/FileAppenderTest.java",
                "sha": "1610828b31314d7aef04f98a8715121189a0be06",
                "status": "modified"
            }
        ],
        "message": "Bug 38993: NPE in FileAppender.setFile\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@386250 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/log4j/commit/a3ef177ea888e397dbc4ab675e7afd0e3de5b638",
        "patched_files": [
            "FileAppender.java"
        ],
        "repo": "log4j",
        "unit_tests": [
            "FileAppenderTest.java"
        ]
    },
    "log4j_397e5f5": {
        "bug_id": "log4j_397e5f5",
        "commit": "https://github.com/apache/log4j/commit/397e5f50c3313f8c757495beb771d6ed9db92838",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/log4j/blob/397e5f50c3313f8c757495beb771d6ed9db92838/src/java/org/apache/log4j/spi/LocationInfo.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/spi/LocationInfo.java?ref=397e5f50c3313f8c757495beb771d6ed9db92838",
                "deletions": 1,
                "filename": "src/java/org/apache/log4j/spi/LocationInfo.java",
                "patch": "@@ -105,7 +105,7 @@\n \n     */\n     public LocationInfo(Throwable t, String fqnOfCallingClass) {\n-      if(t == null)\n+      if(t == null || fqnOfCallingClass == null)\n \treturn;\n \n       String s;",
                "raw_url": "https://github.com/apache/log4j/raw/397e5f50c3313f8c757495beb771d6ed9db92838/src/java/org/apache/log4j/spi/LocationInfo.java",
                "sha": "dcd03e6b7c6260cd4d1a24f944d5eb3036e36149",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/log4j/blob/397e5f50c3313f8c757495beb771d6ed9db92838/tests/src/java/org/apache/log4j/spi/LoggingEventTest.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/tests/src/java/org/apache/log4j/spi/LoggingEventTest.java?ref=397e5f50c3313f8c757495beb771d6ed9db92838",
                "deletions": 0,
                "filename": "tests/src/java/org/apache/log4j/spi/LoggingEventTest.java",
                "patch": "@@ -215,5 +215,29 @@ public void testLevel() {\n       assertEquals(Level.ERROR, event.level);\n   }\n \n+    /**\n+     * Tests LoggingEvent.getLocationInfo() when no FQCN is specified.\n+     * See bug 41186.\n+     */\n+  public void testLocationInfoNoFQCN() {\n+      Category root = Logger.getRootLogger();\n+\t  Priority level = Level.INFO;\n+      LoggingEvent event =\n+        new LoggingEvent(\n+          null, root, 0L,  level, \"Hello, world.\", null);\n+      LocationInfo info = event.getLocationInformation();\n+\t  //\n+\t  //  log4j 1.2 returns an object, its layout doesn't check for nulls.\n+\t  //  log4j 1.3 returns a null.\n+\t  //\n+\t  assertNotNull(info);\n+\t  if (info != null) {\n+\t     assertEquals(\"?\", info.getLineNumber());\n+\t\t assertEquals(\"?\", info.getClassName());\n+\t\t assertEquals(\"?\", info.getFileName());\n+\t\t assertEquals(\"?\", info.getMethodName());\n+\t  }\n+  }\n+\n \n }",
                "raw_url": "https://github.com/apache/log4j/raw/397e5f50c3313f8c757495beb771d6ed9db92838/tests/src/java/org/apache/log4j/spi/LoggingEventTest.java",
                "sha": "f8a78a349c2a851b131d2cb51a515ccbc7519400",
                "status": "modified"
            }
        ],
        "message": "Bug 41186: Eliminate NPE on getLocationInfo() when FQCN is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/branches/v1_2-branch@530974 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/log4j/commit/25d6aed165192bba00212628c572597e48e4d91c",
        "patched_files": [
            "LocationInfo.java",
            "LoggingEvent.java"
        ],
        "repo": "log4j",
        "unit_tests": [
            "LoggingEventTest.java",
            "LocationInfoTest.java"
        ]
    },
    "log4j_437a2a9": {
        "bug_id": "log4j_437a2a9",
        "commit": "https://github.com/apache/log4j/commit/437a2a9f957072af18835320b886c5fa565ea8d7",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/build.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/build.xml?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "deletions": 1,
                "filename": "build.xml",
                "patch": "@@ -260,6 +260,8 @@\n     </javac>\n     <copy file=\"${BSTEM}/xml/log4j.dtd\"\n     tofile=\"${javac.dest}/${stem}/xml/log4j.dtd\" />\n+    <copy file=\"${BSTEM}/xml/logger.dtd\"\n+    tofile=\"${javac.dest}/${stem}/xml/logger.dtd\" />\n   </target>\n \n   <target name=\"build.avalonFramework\" depends=\"init, avalonFramework\" if=\"avalonFramework-present\">\n@@ -446,7 +448,7 @@\n     </delete>\n \n     <jar jarfile=\"${jar.dest}/${log4j.jar}\" basedir=\"${javac.dest}\"\n-      includes=\"${stem}/*.class, ${stem}/xml/log4j.dtd,\n+      includes=\"${stem}/*.class, ${stem}/xml/log4j.dtd, ${stem}/xml/logger.dtd,\n                 org/apache/joran/**/*.class,\n                 ${stem}/joran/**/*.class,\n                 ${stem}/config/*.class,",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/build.xml",
                "sha": "77370cedf3a53375a14709cf48fc37f6b2a1fe2b",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/UtilLoggingLevel.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/UtilLoggingLevel.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "deletions": 8,
                "filename": "src/java/org/apache/log4j/UtilLoggingLevel.java",
                "patch": "@@ -62,14 +62,14 @@\n \n public class UtilLoggingLevel extends Level {\n \n-  public static final int SEVERE_INT = 1000;\n-  public static final int WARNING_INT = 900;\n-  public static final int INFO_INT = 800;\n-  public static final int CONFIG_INT = 700;\n-  public static final int FINE_INT = 500;\n-  public static final int FINER_INT = 400;\n-  public static final int FINEST_INT = 300;\n-  public static final int UNKNOWN_INT = 200;\n+  public static final int SEVERE_INT = 17000;\n+  public static final int WARNING_INT = 16000;\n+  public static final int INFO_INT = 15000;\n+  public static final int CONFIG_INT = 14000;\n+  public static final int FINE_INT = 13000;\n+  public static final int FINER_INT = 12000;\n+  public static final int FINEST_INT = 11000;\n+  public static final int UNKNOWN_INT = 10000;\n   \n   public static final UtilLoggingLevel SEVERE = new UtilLoggingLevel(SEVERE_INT, \"SEVERE\", 0);\n   public static final UtilLoggingLevel WARNING = new UtilLoggingLevel(WARNING_INT, \"WARNING\", 4);",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/UtilLoggingLevel.java",
                "sha": "16908c1333e01cfbbf5de52293aa3bfcaf079d62",
                "status": "modified"
            },
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/ChainsawAppenderHandler.java",
                "changes": 164,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/ChainsawAppenderHandler.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "deletions": 126,
                "filename": "src/java/org/apache/log4j/chainsaw/ChainsawAppenderHandler.java",
                "patch": "@@ -54,20 +54,15 @@\n import org.apache.log4j.helpers.LogLog;\n import org.apache.log4j.net.SocketReceiver;\n import org.apache.log4j.plugins.PluginRegistry;\n-import org.apache.log4j.spi.LocationInfo;\n import org.apache.log4j.spi.LoggingEvent;\n \n import java.beans.PropertyChangeListener;\n import java.beans.PropertyChangeSupport;\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Date;\n-import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n import java.util.Vector;\n \n import javax.swing.event.EventListenerList;\n@@ -135,97 +130,6 @@ public boolean requiresLayout() {\n     return false;\n   }\n \n-  /**\n-   * Converts a LoggingEvent into a Vector of element (columns really).\n-   * @param event\n-   * @return\n-   *\n-   * @deprecated\n-   */\n-  public static Vector convert(LoggingEvent event) {\n-    Vector v = new Vector();\n-    LocationInfo info = event.getLocationInformation();\n-    String className = \"\";\n-    String methodName = \"\";\n-    String fileName = \"\";\n-    String lineNum = \"\";\n-\n-    if (info != null) {\n-      try {\n-        className = info.getClassName();\n-        methodName = info.getMethodName();\n-        fileName = info.getFileName();\n-        lineNum = info.getLineNumber();\n-      } catch (NullPointerException npe) {\n-      }\n-\n-      //ignore..malformed info\n-    }\n-\n-    StringBuffer MDC = new StringBuffer();\n-    Set mdc = event.getMDCKeySet();\n-    Iterator iter = mdc.iterator();\n-\n-    while (iter.hasNext()) {\n-      if (MDC.length() != 0) {\n-        MDC.append(\",\");\n-      }\n-\n-      String propName = (String) iter.next();\n-      MDC.append(propName);\n-      MDC.append(\"=\");\n-\n-      String propValue = (String) event.getMDC(propName);\n-      MDC.append(propValue);\n-    }\n-\n-    StringBuffer prop = new StringBuffer();\n-    Set properties = event.getPropertyKeySet();\n-\n-    if (properties != null) {\n-      Iterator iter2 = properties.iterator();\n-\n-      while (iter2.hasNext()) {\n-        if (prop.length() != 0) {\n-          prop.append(\",\");\n-        }\n-\n-        String propName = (String) iter2.next();\n-        prop.append(propName);\n-        prop.append(\"=\");\n-\n-        String propValue = (String) event.getProperty(propName);\n-        prop.append(propValue);\n-      }\n-    }\n-\n-    v.add(event.getLoggerName());\n-    v.add(new Date(event.timeStamp));\n-    v.add(event.getLevel().toString());\n-    v.add(event.getThreadName());\n-    v.add(event.getRenderedMessage());\n-    v.add(event.getNDC());\n-    v.add(MDC.toString());\n-\n-    StringBuffer exc = new StringBuffer();\n-    String[] excarray = event.getThrowableStrRep();\n-\n-    if (excarray != null) {\n-      for (int i = 0; i < excarray.length; i++) {\n-        exc.append(excarray[i]);\n-      }\n-    }\n-\n-    v.add(exc.toString());\n-    v.add(className);\n-    v.add(methodName);\n-    v.add(fileName);\n-    v.add(lineNum);\n-    v.add(prop.toString());\n-\n-    return v;\n-  }\n-\n   public int getQueueInterval() {\n     return sleepInterval;\n   }\n@@ -251,9 +155,10 @@ private static String getTabIdentifier(LoggingEvent e) {\n     String appname = e.getProperty(ChainsawConstants.LOG4J_APP_KEY);\n \n     if (appname != null) {\n-      if(ident.length()>0){\n-          ident.append(\"-\");\n+      if (ident.length() > 0) {\n+        ident.append(\"-\");\n       }\n+\n       ident.append(appname);\n     }\n \n@@ -378,21 +283,23 @@ public synchronized void removePropertyChangeListener(\n    */\n   class WorkQueue {\n     private final ArrayList queue = new ArrayList();\n-    private boolean stopped = false;\n+    Thread workerThread;\n \n     protected WorkQueue() {\n-      new WorkerThread().start();\n+      workerThread = new WorkerThread();\n+      workerThread.start();\n     }\n \n     public final void enqueue(LoggingEvent event) {\n       synchronized (mutex) {\n         queue.add(event);\n+        mutex.notify();\n       }\n     }\n \n     public final void stop() {\n       synchronized (mutex) {\n-        stopped = true;\n+        workerThread.interrupt();\n       }\n     }\n \n@@ -409,59 +316,64 @@ public WorkerThread() {\n       public void run() {\n         List innerList = new ArrayList();\n \n-        while (isAlive()) {\n+        while (true) {\n           long timeStart = System.currentTimeMillis();\n \n           synchronized (mutex) {\n-            if (stopped) {\n-              return;\n-            } else {\n+            try {\n+              while (queue.size() == 0) {\n+                mutex.wait();\n+              }\n+\n               if (queue.size() > 0) {\n                 innerList.addAll(queue);\n                 queue.clear();\n               }\n+            } catch (InterruptedException ie) {\n             }\n           }\n \n           int size = innerList.size();\n \n-          if (innerList.size() > 0) {\n+          if (size > 0) {\n             Iterator iter = innerList.iterator();\n-            Map identifiersEventsMap = new HashMap();\n             ChainsawEventBatch eventBatch = new ChainsawEventBatch();\n \n             while (iter.hasNext()) {\n               LoggingEvent e = (LoggingEvent) iter.next();\n-              String eventType =\n-                e.getProperty(ChainsawConstants.EVENT_TYPE_KEY);\n-\n-              if (eventType == null) {\n-                eventType = ChainsawConstants.LOG4J_EVENT_TYPE;\n+              Vector properties = new Vector();\n+              Iterator iterx = e.getPropertyKeySet().iterator();\n+              while (iterx.hasNext()) {\n+                  String thisProp = iterx.next().toString();\n+                  properties.add(thisProp +\" \" + e.getProperty(thisProp));\n               }\n-\n-              String ident = getTabIdentifier(e);\n-              eventBatch.addEvent(ident, eventType, e);\n+              eventBatch.addEvent(\n+                getTabIdentifier(e),\n+                (e.getProperty(ChainsawConstants.EVENT_TYPE_KEY) == null)\n+                ? ChainsawConstants.LOG4J_EVENT_TYPE\n+                : e.getProperty(ChainsawConstants.EVENT_TYPE_KEY), e);\n             }\n \n             dispatchEventBatch(eventBatch);\n \n             innerList.clear();\n           }\n \n-\n-\n           try {\n-            Thread.sleep(getQueueInterval());\n+            synchronized (this) {\n+              wait(getQueueInterval());\n+            }\n           } catch (InterruptedException ie) {\n           }\n-\t\t  if (size == 0) {\n-\t\t\tsetDataRate(0.0);\n-\t\t  } else {\n-\t\t\tlong timeEnd = System.currentTimeMillis();\n-\t\t\tlong diffInSeconds = (timeEnd - timeStart)/1000;\n-\t\t\tdouble rate = (((double) size) / diffInSeconds);\n-\t\t\tsetDataRate(rate);\n-\t\t  }\n+\n+          if (size == 0) {\n+            setDataRate(0.0);\n+          } else {\n+            long timeEnd = System.currentTimeMillis();\n+            long diffInSeconds = (timeEnd - timeStart) / 1000;\n+            double rate = (((double) size) / diffInSeconds);\n+            setDataRate(rate);\n+          }\n         }\n       }\n ",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/ChainsawAppenderHandler.java",
                "sha": "68fa480e41b16664cf53cb4a24b39ed06573ff8c",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/ChainsawCyclicBufferTableModel.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/ChainsawCyclicBufferTableModel.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "deletions": 12,
                "filename": "src/java/org/apache/log4j/chainsaw/ChainsawCyclicBufferTableModel.java",
                "patch": "@@ -90,9 +90,11 @@\n class ChainsawCyclicBufferTableModel extends AbstractTableModel\n   implements EventContainer, PropertyChangeListener {\n   private boolean cyclic = true;\n-  private final int INITIAL_CAPACITY = 5000;\n-  List unfilteredList = new CyclicBufferList(INITIAL_CAPACITY);\n-  List filteredList = new CyclicBufferList(INITIAL_CAPACITY);\n+  private final int DEFAULT_CAPACITY = 5000;\n+  private int capacity = DEFAULT_CAPACITY;\n+  private static final String PANEL_CAPACITY = \"CHAINSAW_CAPACITY\";\n+  List unfilteredList = new CyclicBufferList(capacity);\n+  List filteredList = new CyclicBufferList(capacity);\n   private boolean currentSortAscending;\n   private int currentSortColumn;\n   private EventListenerList eventListenerList = new EventListenerList();\n@@ -115,6 +117,11 @@\n \n   public ChainsawCyclicBufferTableModel() {\n     propertySupport.addPropertyChangeListener(\"cyclic\", new ModelChanger());\n+    if (System.getProperty(PANEL_CAPACITY) != null) {\n+        try {\n+            capacity = Integer.parseInt(System.getProperty(PANEL_CAPACITY));\n+        } catch (NumberFormatException nfe) {}\n+    }\n   }\n \n   /**\n@@ -330,7 +337,10 @@ public Object getValueAt(int rowIndex, int columnIndex) {\n       return null;\n     }\n \n-    LocationInfo info = event.getLocationInformation();\n+    LocationInfo info = null;\n+    if (event.locationInformationExists()) {\n+        info = event.getLocationInformation();\n+    }\n \n     if (event == null) {\n       LogLog.error(\"Invalid rowindex=\" + rowIndex);\n@@ -376,16 +386,16 @@ public Object getValueAt(int rowIndex, int columnIndex) {\n       return event.getThrowableStrRep();\n \n     case ChainsawColumns.INDEX_CLASS_COL_NAME:\n-      return (info != null) ? info.getClassName() : \"\";\n+      return (info == null) ?  \"\" : info.getClassName();\n \n     case ChainsawColumns.INDEX_FILE_COL_NAME:\n-      return (info != null) ? info.getFileName() : \"\";\n+      return (info == null) ? \"\" : info.getFileName();\n \n     case ChainsawColumns.INDEX_LINE_COL_NAME:\n-      return (info != null) ? info.getLineNumber() : \"\";\n+      return (info == null) ? \"\" : info.getLineNumber();\n \n     case ChainsawColumns.INDEX_METHOD_COL_NAME:\n-      return (info != null) ? info.getMethodName() : \"\";\n+      return (info == null) ? \"\" : info.getMethodName();\n \n     default:\n \n@@ -594,9 +604,9 @@ public synchronized void run() {\n         List newFilteredList = null;\n \n         if (isCyclic()) {\n-          newFilteredList = new CyclicBufferList(INITIAL_CAPACITY);\n+          newFilteredList = new CyclicBufferList(capacity);\n         } else {\n-          newFilteredList = new ArrayList(INITIAL_CAPACITY);\n+          newFilteredList = new ArrayList(capacity);\n         }\n \n         synchronized (unfilteredList) {\n@@ -669,9 +679,9 @@ public void run() {\n                   List newUnfilteredList = null;\n \n                   if (isCyclic()) {\n-                    newUnfilteredList = new CyclicBufferList(INITIAL_CAPACITY);\n+                    newUnfilteredList = new CyclicBufferList(capacity);\n                   } else {\n-                    newUnfilteredList = new ArrayList(INITIAL_CAPACITY);\n+                    newUnfilteredList = new ArrayList(capacity);\n                   }\n \n                   for (Iterator iter = unfilteredList.iterator();",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/ChainsawCyclicBufferTableModel.java",
                "sha": "28676159ea623d5e8b908bb89a0a2967d57b20f0",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/ChainsawEventBatchEntry.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/ChainsawEventBatchEntry.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "deletions": 15,
                "filename": "src/java/org/apache/log4j/chainsaw/ChainsawEventBatchEntry.java",
                "patch": "@@ -57,9 +57,6 @@\n \n import org.apache.log4j.spi.LoggingEvent;\n \n-import java.util.Vector;\n-\n-\n /**\n  * A simple container of Events, mapped to an identifier\n  * @author Paul Smith <psmith@apache.org>\n@@ -82,18 +79,6 @@ String getEventType() {\n     return eventType;\n   }\n \n-  /**\n-   * @deprecated\n-   * @return\n-   */\n-  Vector getEventVector() {\n-    return ChainsawAppenderHandler.convert(getEvent());\n-//    throw new UnsupportedOperationException(\n-//      \"Transistion to non Vector based model\");\n-\n-    //    return eventVector;\n-  }\n-\n   public LoggingEvent getEvent() {\n     return event;\n   }",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/ChainsawEventBatchEntry.java",
                "sha": "c547e618f66acc410860bd09f83ae3c86adbf331",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/ColumnComparator.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/ColumnComparator.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "deletions": 6,
                "filename": "src/java/org/apache/log4j/chainsaw/ColumnComparator.java",
                "patch": "@@ -100,8 +100,8 @@ public int compare(Object o1, Object o2) {\n       case ChainsawColumns.INDEX_METHOD_COL_NAME:\n \n         if (\n-          (e1.getLocationInformation() != null)\n-            & (e2.getLocationInformation() != null)) {\n+          (e1.locationInformationExists())\n+            & (e2.locationInformationExists())) {\n           sort =\n             e1.getLocationInformation().getMethodName().compareToIgnoreCase(\n               e2.getLocationInformation().getMethodName());\n@@ -112,8 +112,8 @@ public int compare(Object o1, Object o2) {\n       case ChainsawColumns.INDEX_CLASS_COL_NAME:\n \n         if (\n-          (e1.getLocationInformation() != null)\n-            & (e2.getLocationInformation() != null)) {\n+          (e1.locationInformationExists())\n+            & (e2.locationInformationExists())) {\n           sort =\n             e1.getLocationInformation().getClassName().compareToIgnoreCase(\n               e2.getLocationInformation().getClassName());\n@@ -124,8 +124,8 @@ public int compare(Object o1, Object o2) {\n       case ChainsawColumns.INDEX_FILE_COL_NAME:\n \n         if (\n-          (e1.getLocationInformation() != null)\n-            & (e2.getLocationInformation() != null)) {\n+          (e1.locationInformationExists())\n+            & (e2.locationInformationExists())) {\n           sort =\n             e1.getLocationInformation().getFileName().compareToIgnoreCase(\n               e2.getLocationInformation().getFileName());",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/ColumnComparator.java",
                "sha": "1dbfff8e88b3596d691f351eb9f3d53e9b218495",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/Details_XMLSocketReceiver.html",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/Details_XMLSocketReceiver.html?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "deletions": 0,
                "filename": "src/java/org/apache/log4j/chainsaw/Details_XMLSocketReceiver.html",
                "patch": "@@ -0,0 +1,21 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n+<html>\n+<Head><link rel=\"stylesheet\" href=\"stylesheet.css\" type=\"text/css\"></head>\n+<body>\n+<B>XML Socket Receiver</b>\n+<p>XMLSocketReceiver compliments externally provided SocketAppenders. <br>\n+XMLSocketReceiver supports Log4J's log4j.dtd and Java 1.4's logger.dtd.<br>\n+However, only Log4J's log4j.dtd is currently supported when defining the receiver \n+through this panel.\n+</p>\n+\n+<p>XMLSocketReceiver listens\n+on a specified port, accepting connections from remote sockets\n+, converts the XML into logging events received from these sockets,\n+and posts them into Chainsaw's local Log4j environment allowing you \n+to view them.</p>\n+<p>Click here to see more information about XMLSocketReceiver.</p>\n+\n+<p>Click <a href=\"http://jakarta.apache.org/log4j/docs/api/org/apache/log4j/net/XMLSocketAppender.html\">here</a> to see more information about SocketAppender.</p>\n+</body>\n+</html>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/Details_XMLSocketReceiver.html",
                "sha": "62aafa78233aa85807eecceed4be1690bbfa0d13",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/FileLoadAction.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/FileLoadAction.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "deletions": 1,
                "filename": "src/java/org/apache/log4j/chainsaw/FileLoadAction.java",
                "patch": "@@ -135,7 +135,7 @@ public void actionPerformed(ActionEvent e) {\n     chooser.setFileFilter(\n       new FileFilter() {\n         public boolean accept(File f) {\n-          return f.getName().toLowerCase().endsWith(\".xml\");\n+          return (f.getName().toLowerCase().endsWith(\".xml\")|| f.isDirectory());\n         }\n \n         public String getDescription() {",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/FileLoadAction.java",
                "sha": "37086c8e2e93bbb0f1e7c5a11d513ec42f7af115",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/LogPanel.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/LogPanel.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "deletions": 2,
                "filename": "src/java/org/apache/log4j/chainsaw/LogPanel.java",
                "patch": "@@ -253,7 +253,7 @@ public void propertyChange(PropertyChangeEvent evt) {\n           boolean newValue = ((Boolean) evt.getNewValue()).booleanValue();\n \n           if (newValue) {\n-            lowerPanel.setDividerLocation(150);\n+            lowerPanel.setDividerLocation(400);\n           }\n \n           detailPanel.setVisible(newValue);\n@@ -904,7 +904,7 @@ public void actionPerformed(ActionEvent e) {\n       new JSplitPane(\n         JSplitPane.VERTICAL_SPLIT, eventsAndStatusPanel, detailPanel);\n     lowerPanel.setBorder(null);\n-    lowerPanel.setDividerLocation(150);\n+    lowerPanel.setDividerLocation(400);\n     lowerPanel.setLastDividerLocation(-1);\n     lowerPanel.setOneTouchExpandable(true);\n ",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/LogPanel.java",
                "sha": "bf33ef9572dea15f1c6368cf70e49b7cd1bdb34a",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/LoggingEventFieldResolver.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/LoggingEventFieldResolver.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "deletions": 5,
                "filename": "src/java/org/apache/log4j/chainsaw/LoggingEventFieldResolver.java",
                "patch": "@@ -49,6 +49,7 @@\n \n package org.apache.log4j.chainsaw;\n \n+import org.apache.log4j.spi.LocationInfo;\n import org.apache.log4j.spi.LoggingEvent;\n \n import java.util.ArrayList;\n@@ -139,19 +140,22 @@ public boolean isField(String fieldName) {\n \n   public Object getValue(String fieldName, LoggingEvent event) {\n     String upperField = fieldName.toUpperCase();\n-\n+    LocationInfo info = null;\n+    if (event.locationInformationExists()) {\n+        info = event.getLocationInformation();\n+    }\n     if (LOGGER_FIELD.equals(upperField)) {\n       return event.getLoggerName();\n     } else if (LEVEL_FIELD.equals(upperField)) {\n       return event.getLevel();\n     } else if (CLASS_FIELD.equals(upperField)) {\n-      return event.getLocationInformation().getClassName();\n+      return ((info == null) ? \"\" : info.getClassName());\n     } else if (FILE_FIELD.equals(upperField)) {\n-      return event.getLocationInformation().getFileName();\n+      return ((info == null) ? \"\" : info.getFileName());\n     } else if (LINE_FIELD.equals(upperField)) {\n-      return event.getLocationInformation().getLineNumber();\n+      return ((info == null) ? \"\" : info.getLineNumber());\n     } else if (METHOD_FIELD.equals(upperField)) {\n-      return event.getLocationInformation().getMethodName();\n+      return ((info == null) ? \"\" : info.getMethodName());\n     } else if (MSG_FIELD.equals(upperField)) {\n       return event.getMessage();\n     } else if (NDC_FIELD.equals(upperField)) {",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/LoggingEventFieldResolver.java",
                "sha": "829a32ec4f3bde1aa9df25a207ff78689e0c24e3",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/ReceiversPanel.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/ReceiversPanel.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "deletions": 1,
                "filename": "src/java/org/apache/log4j/chainsaw/ReceiversPanel.java",
                "patch": "@@ -123,6 +123,7 @@\n import org.apache.log4j.net.SocketReceiver;\n import org.apache.log4j.net.UDPAppender;\n import org.apache.log4j.net.UDPReceiver;\n+import org.apache.log4j.net.XMLSocketReceiver;\n import org.apache.log4j.plugins.Pauseable;\n import org.apache.log4j.plugins.PluginRegistry;\n import org.apache.log4j.plugins.Receiver;\n@@ -664,6 +665,13 @@ private List createSortedDialogMapEntryList() throws IOException {\n           new SimplePortBasedReceiverDialogPanel(\n             UDPReceiver.class, \"UDPReceiver\", UDPAppender.DEFAULT_PORT)));\n \n+        dialogMap.put(\n+          XMLSocketReceiver.class,\n+          new CreateReceiverDialog(\n+            XMLSocketReceiver.class, \"XMLSocketReceiver\", \"XML Socket Receiver (log4j.dtd)\",\n+            new SimplePortBasedReceiverDialogPanel(\n+              XMLSocketReceiver.class, \"XMLSocketReceiver\", XMLSocketReceiver.DEFAULT_PORT)));\n+\n       List dialogMapEntryList = new ArrayList();\n \n       for (Iterator iter = dialogMap.entrySet().iterator(); iter.hasNext();) {\n@@ -715,8 +723,10 @@ public void show(Component invoker, int x, int y) {\n \n       if (userObject == getRootOfTree().getUserObject()) {\n         buildForReceiversRoot();\n-      } else {\n+      } else if (getCurrentlySelectedReceiver() != null) {\n         buildForReceiverNode();\n+      } else {\n+          return;\n       }\n \n       this.invalidate();",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/ReceiversPanel.java",
                "sha": "babebf60856bf8c7577c3e7665515fd9f94045c4",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/ReceiversTreeModel.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/ReceiversTreeModel.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "deletions": 6,
                "filename": "src/java/org/apache/log4j/chainsaw/ReceiversTreeModel.java",
                "patch": "@@ -173,16 +173,18 @@ public void pluginStopped(PluginEvent e) {\n       Receiver receiver = (Receiver) e.getPlugin();\n       DefaultMutableTreeNode node =\n         (DefaultMutableTreeNode) resolvePluginNode(receiver);\n-      int index = getRootNode().getIndex(node);\n-      getRootNode().remove(node);\n-      nodesWereRemoved(\n-        getRootNode(), new int[] { index }, new Object[] { node });\n-      pluginNodeMap.remove(receiver);\n+        if (node != null) {\n+            int index = getRootNode().getIndex(node);\n+            getRootNode().remove(node);\n+            nodesWereRemoved(\n+                getRootNode(), new int[] { index }, new Object[] { node });\n+            pluginNodeMap.remove(receiver);\n+        }\n \n       if (getRootNode().getChildCount() == 0) {\n         getRootNode().add(NoReceiversNode);\n \n-        index = getRootNode().getIndex(NoReceiversNode);\n+        int index = getRootNode().getIndex(NoReceiversNode);\n         nodesWereInserted(getRootNode(), new int[] { index });\n       }\n     }",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/ReceiversTreeModel.java",
                "sha": "f88a2a78610e003f4cf243a63489d3f7be84b5e9",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/filter/FilterModel.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/filter/FilterModel.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "deletions": 1,
                "filename": "src/java/org/apache/log4j/chainsaw/filter/FilterModel.java",
                "patch": "@@ -77,7 +77,7 @@ public void processNewLoggingEvent(String eventType, LoggingEvent event) {\n     container.addNDC(event.getNDC());\n     container.addMDCKeys(event.getMDCKeySet());\n \n-    if (event.getLocationInformation() != null) {\n+    if (event.locationInformationExists()) {\n       LocationInfo info = event.getLocationInformation();\n       container.addClass(info.getClassName());\n       container.addMethod(info.getMethodName());",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/filter/FilterModel.java",
                "sha": "997f8872d87531036d1551332a790715502dacb5",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/layout/EventDetailLayout.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/layout/EventDetailLayout.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "deletions": 1,
                "filename": "src/java/org/apache/log4j/chainsaw/layout/EventDetailLayout.java",
                "patch": "@@ -219,7 +219,10 @@ private static LoggingEvent copyForHTML(LoggingEvent event) {\n     String ndc = event.getNDC();\n     Hashtable mdc = formatMDC(event);\n     String[] throwableStringRep = event.getThrowableStrRep();\n-    LocationInfo li = formatLocationInfo(event);\n+    LocationInfo li = null;\n+    if (event.locationInformationExists()) {\n+        formatLocationInfo(event);\n+    }\n     Hashtable properties = formatProperties(event);\n     LoggingEvent copy =\n       new LoggingEvent(",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/layout/EventDetailLayout.java",
                "sha": "f2b0ef7a78ce45a4fa50324352a9ba574b4e274c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/rule/RuleTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/rule/RuleTest.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "deletions": 0,
                "filename": "src/java/org/apache/log4j/chainsaw/rule/RuleTest.java",
                "patch": "@@ -233,6 +233,7 @@ public static void main(String[] args) {\n     String lastField = null;\n     JPopupMenu contextMenu = new JPopupMenu();\n     JList list = new JList();\n+ \n     JScrollPane scrollPane = new JScrollPane(list);\n     final JTextField textField;\n     private DefaultListModel fieldModel = new DefaultListModel();",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/rule/RuleTest.java",
                "sha": "d644e7a47698e727994fdb5f40e4b23ed2d5c212",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/net/MulticastAppender.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/net/MulticastAppender.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "deletions": 6,
                "filename": "src/java/org/apache/log4j/net/MulticastAppender.java",
                "patch": "@@ -49,17 +49,16 @@\n \n package org.apache.log4j.net;\n \n-import org.apache.log4j.AppenderSkeleton;\n-import org.apache.log4j.helpers.LogLog;\n-import org.apache.log4j.spi.LoggingEvent;\n-\n import java.io.IOException;\n-\n import java.net.DatagramPacket;\n import java.net.InetAddress;\n import java.net.MulticastSocket;\n import java.net.UnknownHostException;\n \n+import org.apache.log4j.AppenderSkeleton;\n+import org.apache.log4j.helpers.LogLog;\n+import org.apache.log4j.spi.LoggingEvent;\n+\n \n /**\n  *  Multicast-based Appender.  Works in conjunction with the MulticastReceiver, which expects\n@@ -109,6 +108,7 @@ InetAddress so that it can be returned via getOption().\n   int reconnectionDelay = DEFAULT_RECONNECTION_DELAY;\n   boolean locationInfo = false;\n   int count = 0;\n+  private String encoding;\n   \n   public MulticastAppender() {\n   }\n@@ -232,9 +232,13 @@ public void append(LoggingEvent event) {\n         if (buf.length() < PACKET_LENGTH) {\n           buf.append(new char[PACKET_LENGTH - buf.length()]);\n         }\n+        //the implementation of string.getBytes accepts a null encoding and uses the system charset\n         DatagramPacket dp =\n-          new DatagramPacket(buf.toString().getBytes(\"ASCII\"), buf.length(), address, port);\n+          new DatagramPacket(buf.toString().getBytes(encoding), buf.length(), address, port);\n         outSocket.send(dp);\n+        //remove these properties, in case other appenders need to set them to different values \n+        event.setProperty(\"log4jmachinename\", null);\n+        event.setProperty(\"log4japp\", null);\n       } catch (IOException e) {\n         outSocket = null;\n         LogLog.warn(\"Detected problem with Multicast connection: \" + e);\n@@ -277,6 +281,20 @@ public String getRemoteHost() {\n     return remoteHost;\n   }\n \n+  /**\n+      The <b>Encoding</b> option specifies how the bytes are encoded.  If this option is not specified, \n+      the System encoding is used.\n+    */\n+   public void setEncoding(String encoding) {\n+     this.encoding = encoding;\n+   }\n+\n+   /**\n+      Returns value of the <b>Encoding</b> option.\n+    */\n+   public String getEncoding() {\n+     return encoding;\n+   }\n   /**\n      The <b>App</b> option takes a string value which should be the name of the application getting logged.\n      If property was already set (via system property), don't set here.",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/net/MulticastAppender.java",
                "sha": "ab467d6e92352409b4c291265c185613c866fdf8",
                "status": "modified"
            },
            {
                "additions": 75,
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/net/MulticastReceiver.java",
                "changes": 96,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/net/MulticastReceiver.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "deletions": 21,
                "filename": "src/java/org/apache/log4j/net/MulticastReceiver.java",
                "patch": "@@ -51,6 +51,7 @@\n \n import org.apache.log4j.Decoder;\n import org.apache.log4j.helpers.LogLog;\n+import org.apache.log4j.plugins.Pauseable;\n import org.apache.log4j.plugins.Receiver;\n import org.apache.log4j.spi.LoggingEvent;\n \n@@ -66,6 +67,7 @@\n import java.util.Iterator;\n import java.util.List;\n \n+\n /**\n  *  Multicast-based receiver.  Accepts LoggingEvents encoded using\n  *  MulticastAppender and XMLLayout. The the XML data is converted\n@@ -74,18 +76,22 @@\n  *  @author Scott Deboy <sdeboy@apache.org>\n  *\n  */\n-public class MulticastReceiver extends Receiver implements PortBased, AddressBased {\n+public class MulticastReceiver extends Receiver implements PortBased,\n+  AddressBased, Pauseable {\n   private static final int PACKET_LENGTH = 16384;\n   private boolean isActive = false;\n   private int port;\n   private String address;\n+  private String encoding;\n   private MulticastSocket socket = null;\n \n   //default to log4j xml decoder\n   private String decoder = \"org.apache.log4j.xml.XMLDecoder\";\n   private Decoder decoderImpl;\n   private MulticastHandlerThread handlerThread;\n-  \n+  private MulticastReceiverThread receiverThread;\n+  private boolean paused;\n+\n   public String getDecoder() {\n     return decoder;\n   }\n@@ -106,19 +112,44 @@ public String getAddress() {\n     return address;\n   }\n \n+  /**\n+      The <b>Encoding</b> option specifies how the bytes are encoded.  If this option is not specified,\n+      the system encoding will be used.\n+    */\n+  public void setEncoding(String encoding) {\n+    this.encoding = encoding;\n+  }\n+\n+  /**\n+     Returns value of the <b>Encoding</b> option.\n+   */\n+  public String getEncoding() {\n+    return encoding;\n+  }\n+\n   public synchronized void shutdown() {\n     isActive = false;\n+    handlerThread.interrupt();\n+    receiverThread.interrupt();\n     socket.close();\n   }\n \n   public void setAddress(String address) {\n     this.address = address;\n   }\n \n+  public boolean isPaused() {\n+    return paused;\n+  }\n+\n+  public void setPaused(boolean b) {\n+    paused = b;\n+  }\n+\n   /**\n-    Sets the flag to indicate if receiver is active or not. */\n-  public synchronized void setActive(boolean isActive) {\n-    this.isActive = isActive;\n+    Returns true if this receiver is active. */\n+  public synchronized boolean isActive() {\n+    return isActive;\n   }\n \n   public void activateOptions() {\n@@ -132,11 +163,11 @@ public void activateOptions() {\n         this.decoderImpl = (Decoder) o;\n       }\n     } catch (ClassNotFoundException cnfe) {\n-    \tLogLog.warn(\"Unable to find decoder\", cnfe);\n+      LogLog.warn(\"Unable to find decoder\", cnfe);\n     } catch (IllegalAccessException iae) {\n-    \tLogLog.warn(\"Could not construct decoder\", iae);\n+      LogLog.warn(\"Could not construct decoder\", iae);\n     } catch (InstantiationException ie) {\n-    \tLogLog.warn(\"Could not construct decoder\", ie);\n+      LogLog.warn(\"Could not construct decoder\", ie);\n     }\n \n     try {\n@@ -146,12 +177,13 @@ public void activateOptions() {\n     }\n \n     try {\n+      isActive = true;\n       socket = new MulticastSocket(port);\n       socket.joinGroup(addr);\n-      new MulticastReceiverThread().start();\n+      receiverThread = new MulticastReceiverThread();\n+      receiverThread.start();\n       handlerThread = new MulticastHandlerThread();\n       handlerThread.start();\n-      setActive(true);\n     } catch (IOException ioe) {\n       ioe.printStackTrace();\n     }\n@@ -167,17 +199,25 @@ public MulticastHandlerThread() {\n     public void append(String data) {\n       synchronized (list) {\n         list.add(data);\n+        list.notify();\n       }\n     }\n \n-    public synchronized void run() {\n+    public void run() {\n       ArrayList list2 = new ArrayList();\n \n       while (isAlive()) {\n         synchronized (list) {\n-          if (list.size() > 0) {\n-            list2.addAll(list);\n-            list.clear();\n+          try {\n+            while (list.size() == 0) {\n+              list.wait();\n+            }\n+\n+            if (list.size() > 0) {\n+              list2.addAll(list);\n+              list.clear();\n+            }\n+          } catch (InterruptedException ie) {\n           }\n         }\n \n@@ -186,20 +226,25 @@ public synchronized void run() {\n \n           while (iter.hasNext()) {\n             String data = (String) iter.next();\n-\t\t\tList v= decoderImpl.decodeEvents(data);\n+            List v = decoderImpl.decodeEvents(data);\n \n             if (v != null) {\n               Iterator eventIter = v.iterator();\n+\n               while (eventIter.hasNext()) {\n-\t\t\t\tdoPost((LoggingEvent)eventIter.next());\n+                if (!isPaused()) {\n+                  doPost((LoggingEvent) eventIter.next());\n+                }\n               }\n             }\n           }\n \n           list2.clear();\n         } else {\n           try {\n-            wait(1000);\n+            synchronized (this) {\n+              wait(1000);\n+            }\n           } catch (InterruptedException ie) {\n           }\n         }\n@@ -213,7 +258,7 @@ public MulticastReceiverThread() {\n     }\n \n     public void run() {\n-      setActive(true);\n+      isActive = true;\n \n       byte[] b = new byte[PACKET_LENGTH];\n       DatagramPacket p = new DatagramPacket(b, b.length);\n@@ -222,14 +267,23 @@ public void run() {\n         try {\n           socket.receive(p);\n \n-          String data = new String(p.getData(), 0, p.getLength()).trim();\n-          handlerThread.append(data);\n+          //this string constructor which accepts a charset throws an exception if it is \n+          //null\n+            if (encoding == null) {\n+            handlerThread.append(\n+              new String(p.getData(), 0, p.getLength()).trim());\n+          } else {\n+            handlerThread.append(\n+              new String(p.getData(), 0, p.getLength(), encoding).trim());\n+          }\n         } catch (SocketException se) {\n-\t    \t//disconnected\n+          //disconnected\n         } catch (IOException ioe) {\n           ioe.printStackTrace();\n         }\n       }\n+\n+      LogLog.debug(MulticastReceiver.this.getName() + \"'s thread is ending.\");\n     }\n   }\n }",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/net/MulticastReceiver.java",
                "sha": "919f214c467ee036e54133e298c5625d0d5ecb83",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/net/UDPAppender.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/net/UDPAppender.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "deletions": 6,
                "filename": "src/java/org/apache/log4j/net/UDPAppender.java",
                "patch": "@@ -49,17 +49,16 @@\n \n package org.apache.log4j.net;\n \n-import org.apache.log4j.AppenderSkeleton;\n-import org.apache.log4j.helpers.LogLog;\n-import org.apache.log4j.spi.LoggingEvent;\n-\n import java.io.IOException;\n-\n import java.net.DatagramPacket;\n import java.net.DatagramSocket;\n import java.net.InetAddress;\n import java.net.UnknownHostException;\n \n+import org.apache.log4j.AppenderSkeleton;\n+import org.apache.log4j.helpers.LogLog;\n+import org.apache.log4j.spi.LoggingEvent;\n+\n \n /**\n  * \n@@ -102,6 +101,7 @@ InetAddress so that it can be returned via getOption().\n   String localMachine;\n   String remoteHost;\n   String log4japp;\n+  String encoding;\n   String overrideProperties = \"true\";\n   InetAddress address;\n   int port = DEFAULT_PORT;\n@@ -243,9 +243,13 @@ public void append(LoggingEvent event) {\n         if (buf.length() < PACKET_LENGTH) {        \n            buf.append(new char[PACKET_LENGTH - buf.length()]);\n         }\n+        //the implementation of string.getBytes accepts a null encoding and uses the system charset\n         DatagramPacket dp =\n-           new DatagramPacket(buf.toString().getBytes(\"ASCII\"), buf.length(), address, port);\n+           new DatagramPacket(buf.toString().getBytes(encoding), buf.length(), address, port);\n         outSocket.send(dp);\n+        //remove these properties, in case other appenders need to set them to different values \n+        event.setProperty(\"log4jmachinename\", null);\n+        event.setProperty(\"log4japp\", null);\n       } catch (IOException e) {\n         outSocket = null;\n         LogLog.warn(\"Detected problem with UDP connection: \" + e);\n@@ -316,6 +320,21 @@ public String getLog4JApp() {\n     return log4japp;\n   }\n \n+  /**\n+     The <b>Encoding</b> option specifies how the bytes are encoded.  If this option is not specified, \n+     the System encoding is used.\n+   */\n+  public void setEncoding(String encoding) {\n+    this.encoding = encoding;\n+  }\n+\n+  /**\n+     Returns value of the <b>Encoding</b> option.\n+   */\n+  public String getEncoding() {\n+    return encoding;\n+  }\n+\n   /**\n      The <b>OverrideProperties</b> option allows configurations where the appender does not apply\n      the machinename/appname properties - the properties will be used as provided.",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/net/UDPAppender.java",
                "sha": "2ce3c6e35fbb22e5d9be20ffead9e3cb64f97f22",
                "status": "modified"
            },
            {
                "additions": 78,
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/net/UDPReceiver.java",
                "changes": 111,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/net/UDPReceiver.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "deletions": 33,
                "filename": "src/java/org/apache/log4j/net/UDPReceiver.java",
                "patch": "@@ -49,21 +49,20 @@\n \n package org.apache.log4j.net;\n \n-import org.apache.log4j.Decoder;\n-import org.apache.log4j.helpers.LogLog;\n-import org.apache.log4j.plugins.Receiver;\n-import org.apache.log4j.spi.LoggingEvent;\n-\n import java.io.IOException;\n-\n import java.net.DatagramPacket;\n import java.net.DatagramSocket;\n import java.net.SocketException;\n-\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n \n+import org.apache.log4j.Decoder;\n+import org.apache.log4j.helpers.LogLog;\n+import org.apache.log4j.plugins.Pauseable;\n+import org.apache.log4j.plugins.Receiver;\n+import org.apache.log4j.spi.LoggingEvent;\n+\n \n /**\n  *  Receive LoggingEvents encoded with an XMLLayout, convert the XML data to a\n@@ -72,14 +71,15 @@\n  *  @author Scott Deboy <sdeboy@apache.org>\n  *\n  */\n-public class UDPReceiver extends Receiver implements PortBased{\n-  private UDPReceiverThread receiverThread;\n-\n+public class UDPReceiver extends Receiver implements PortBased, Pauseable {\n   private static final int PACKET_LENGTH = 16384;\n+  private UDPReceiverThread receiverThread;\n+  private String encoding;\n \n   //default to log4j xml decoder\n   private String decoder = \"org.apache.log4j.xml.XMLDecoder\";\n   private Decoder decoderImpl;\n+  protected boolean paused;\n   private boolean isActive = false;\n   private int port;\n   private DatagramSocket socket;\n@@ -93,6 +93,21 @@ public void setPort(int port) {\n     this.port = port;\n   }\n \n+  /**\n+      The <b>Encoding</b> option specifies how the bytes are encoded.  If this option is not specified,\n+      the system encoding will be used.\n+    */\n+  public void setEncoding(String encoding) {\n+    this.encoding = encoding;\n+  }\n+\n+  /**\n+     Returns value of the <b>Encoding</b> option.\n+   */\n+  public String getEncoding() {\n+    return encoding;\n+  }\n+\n   public String getDecoder() {\n     return decoder;\n   }\n@@ -101,6 +116,14 @@ public void setDecoder(String decoder) {\n     this.decoder = decoder;\n   }\n \n+  public boolean isPaused() {\n+    return paused;\n+  }\n+\n+  public void setPaused(boolean b) {\n+    paused = b;\n+  }\n+\n   public synchronized void shutdown() {\n     isActive = false;\n     handlerThread.interrupt();\n@@ -114,7 +137,6 @@ public synchronized boolean isActive() {\n     return isActive;\n   }\n \n-\n   public void activateOptions() {\n     try {\n       Class c = Class.forName(decoder);\n@@ -124,20 +146,20 @@ public void activateOptions() {\n         this.decoderImpl = (Decoder) o;\n       }\n     } catch (ClassNotFoundException cnfe) {\n-    \tLogLog.warn(\"Unable to find decoder\", cnfe);\n+      LogLog.warn(\"Unable to find decoder\", cnfe);\n     } catch (IllegalAccessException iae) {\n-    \tLogLog.warn(\"Could not construct decoder\", iae);\n+      LogLog.warn(\"Could not construct decoder\", iae);\n     } catch (InstantiationException ie) {\n-    \tLogLog.warn(\"Could not construct decoder\", ie);\n+      LogLog.warn(\"Could not construct decoder\", ie);\n     }\n \n     try {\n-      isActive=true;\n+      isActive = true;\n       socket = new DatagramSocket(port);\n       receiverThread = new UDPReceiverThread();\n       receiverThread.start();\n-\t  handlerThread = new UDPHandlerThread();\n-\t  handlerThread.start();\n+      handlerThread = new UDPHandlerThread();\n+      handlerThread.start();\n     } catch (IOException ioe) {\n       ioe.printStackTrace();\n     }\n@@ -153,17 +175,25 @@ public UDPHandlerThread() {\n     public void append(String data) {\n       synchronized (list) {\n         list.add(data);\n+        list.notify();\n       }\n     }\n \n-    public synchronized void run() {\n+    public void run() {\n       ArrayList list2 = new ArrayList();\n \n       while (isAlive() && isActive()) {\n         synchronized (list) {\n-          if (list.size() > 0) {\n-            list2.addAll(list);\n-            list.clear();\n+          try {\n+            while (list.size() == 0) {\n+              list.wait();\n+            }\n+\n+            if (list.size() > 0) {\n+              list2.addAll(list);\n+              list.clear();\n+            }\n+          } catch (InterruptedException ie) {\n           }\n         }\n \n@@ -172,28 +202,36 @@ public synchronized void run() {\n \n           while (iter.hasNext()) {\n             String data = (String) iter.next();\n-\t\t\tList v= decoderImpl.decodeEvents(data);\n+            List v = decoderImpl.decodeEvents(data);\n \n             if (v != null) {\n               Iterator eventIter = v.iterator();\n+\n               while (eventIter.hasNext()) {\n-\t\t\t\tdoPost((LoggingEvent)eventIter.next());;\n+                if (!isPaused()) {\n+                  doPost((LoggingEvent) eventIter.next());\n+                }\n               }\n             }\n           }\n \n           list2.clear();\n         } else {\n           try {\n-            wait(1000);\n+            synchronized (this) {\n+              wait(1000);\n+            }\n           } catch (InterruptedException ie) {\n+          }\n         }\n       }\n+\n+      if (!isActive()) {\n+        LogLog.debug(\n+          UDPReceiver.this.getName()\n+          + \"'s handler thread is exiting because of shutdown\");\n+      }\n     }\n-    if(!isActive()){\n-      LogLog.debug(UDPReceiver.this.getName() + \"'s handler thread is exiting because of shutdown\");\n-    }\n-  }\n   }\n \n   class UDPReceiverThread extends Thread {\n@@ -211,15 +249,22 @@ public void run() {\n         try {\n           socket.receive(p);\n \n-          String data = new String(p.getData(), 0, p.getLength()).trim();\n-          handlerThread.append(data);\n-        }\n-        catch (SocketException se) {\n-        \t//disconnected\n+          //this string constructor which accepts a charset throws an exception if it is \n+          //null\n+          if (encoding == null) {\n+            handlerThread.append(\n+              new String(p.getData(), 0, p.getLength()).trim());\n+          } else {\n+            handlerThread.append(\n+              new String(p.getData(), 0, p.getLength(), encoding).trim());\n+          }\n+        } catch (SocketException se) {\n+          //disconnected\n         } catch (IOException ioe) {\n           ioe.printStackTrace();\n         }\n       }\n+\n       LogLog.debug(UDPReceiver.this.getName() + \"'s thread is ending.\");\n     }\n   }",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/net/UDPReceiver.java",
                "sha": "4e6210bf1e06776f9598f50c5fa20f95000aada7",
                "status": "modified"
            },
            {
                "additions": 105,
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/net/XMLSocketReceiver.java",
                "changes": 135,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/net/XMLSocketReceiver.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "deletions": 30,
                "filename": "src/java/org/apache/log4j/net/XMLSocketReceiver.java",
                "patch": "@@ -49,17 +49,18 @@\n \n package org.apache.log4j.net;\n \n-import org.apache.log4j.helpers.LogLog;\n-import org.apache.log4j.plugins.Receiver;\n-import org.apache.log4j.plugins.Plugin;\n-import org.apache.log4j.spi.LoggerRepository;\n-\n import java.net.ServerSocket;\n import java.net.Socket;\n-\n import java.util.List;\n import java.util.Vector;\n \n+import org.apache.log4j.helpers.LogLog;\n+import org.apache.log4j.plugins.Pauseable;\n+import org.apache.log4j.plugins.Plugin;\n+import org.apache.log4j.plugins.Receiver;\n+import org.apache.log4j.spi.LoggerRepository;\n+import org.apache.log4j.spi.LoggingEvent;\n+\n \n /**\n   XMLSocketReceiver receives a remote logging event via XML on a configured\n@@ -73,14 +74,17 @@ the XMLSocketAppender class (or classes that send compatible events).\n   @author Mark Womack\n   @since 1.3\n */\n-public class XMLSocketReceiver extends Receiver implements Runnable, PortBased {\n+public class XMLSocketReceiver extends Receiver implements Runnable, PortBased, Pauseable {\n   protected int port;\n   protected boolean active = false;\n-\n+  private boolean paused;\n+  private boolean shutdown;\n   //default to log4j xml decoder\n   protected String decoder = \"org.apache.log4j.xml.XMLDecoder\";\n   private ServerSocket serverSocket;\n   private List socketList = new Vector();\n+  private Thread rThread;\n+  public static int DEFAULT_PORT = 4448;\n \n   public XMLSocketReceiver() {\n   }\n@@ -114,6 +118,14 @@ public void setDecoder(String _decoder) {\n     decoder = _decoder;\n   }\n \n+  public boolean isPaused() {\n+    return paused;\n+  }\n+\n+  public void setPaused(boolean b) {\n+    paused = b;\n+  }\n+\n   /**\n    * Returns true if the receiver is the same class and they are\n    * configured for the same properties, and super class also considers\n@@ -150,7 +162,7 @@ public synchronized boolean isActive() {\n     Starts the SocketReceiver with the current options. */\n   public void activateOptions() {\n     if (!isActive()) {\n-      Thread rThread = new Thread(this);\n+      rThread = new Thread(this);\n       rThread.setDaemon(true);\n       rThread.start();\n       active = true;\n@@ -164,32 +176,82 @@ public synchronized void shutdown() {\n     // mark this as no longer running\n     active = false;\n \n-    // close the server socket\n-    try {\n-      if (serverSocket != null) {\n-        serverSocket.close();\n-      }\n-    } catch (Exception e) {\n-    \t//ignore for now\n+    if (rThread != null) {\n+      rThread.interrupt();\n+      rThread = null;\n     }\n+    doShutdown();\n+  }\n \n-    // close all of the accepted sockets\n-    for (int x = 0; x < socketList.size(); x++) {\n-      try {\n-        ((Socket) socketList.get(x)).close();\n-      } catch (Exception e) {\n-    \t//ignore for now\n-      }\n+    /**\n+     * Does the actual shutting down by closing the server socket\n+     * and any connected sockets that have been created.\n+     */\n+    private synchronized void doShutdown() {\n+      active = false;\n+\n+      LogLog.debug(getName() + \" doShutdown called\");\n+\n+      // close the server socket\n+      closeServerSocket();\n+\n+      // close all of the accepted sockets\n+      closeAllAcceptedSockets();\n+\n+      setShutdown(true);\n     }\n \n-    // clear member variables\n-    serverSocket = null;\n-    socketList.clear();\n-  }\n+    /**\n+     * @param b\n+     */\n+    private void setShutdown(boolean b) {\n+      shutdown = b;\n+    }\n+\n+\n+    /**\n+      * Closes the server socket, if created.\n+      */\n+     private void closeServerSocket() {\n+       LogLog.debug(getName() + \" closing server socket\");\n+\n+       try {\n+         if (serverSocket != null) {\n+           serverSocket.close();\n+         }\n+       } catch (Exception e) {\n+         // ignore for now\n+       }\n+\n+       serverSocket = null;\n+     }\n+\n+    /**\n+      * Closes all the connected sockets in the List.\n+      */\n+     private synchronized void closeAllAcceptedSockets() {\n+       for (int x = 0; x < socketList.size(); x++) {\n+         try {\n+           ((Socket) socketList.get(x)).close();\n+         } catch (Exception e) {\n+           // ignore for now\n+         }\n+       }\n+\n+       // clear member variables\n+       socketList.clear();\n+     }\n \n   /**\n     Loop, accepting new socket connections. */\n   public void run() {\n+      /**\n+        * Ensure we start fresh.\n+        */\n+    LogLog.debug(\"performing socket cleanup prior to entering loop for \" + name);\n+    closeServerSocket();\n+    closeAllAcceptedSockets();\n+    LogLog.debug(\"socket cleanup complete for \" + name);       \n     active = true;\n \n     // start the server socket\n@@ -200,15 +262,19 @@ public void run() {\n         \"error starting SocketReceiver (\" + this.getName()\n         + \"), receiver did not start\", e);\n       active = false;\n+      setShutdown(true);\n \n       return;\n     }\n \n+    Socket socket = null;\n+\n     try {\n-      Socket socket = null;\n       LogLog.debug(\"in run-about to enter while isactiveloop\");\n \n-      while (isActive()) {\n+      active = true;\n+\n+      while (!rThread.isInterrupted()) {\n         // if we have a socket, start watching it\n         if (socket != null) {\n           LogLog.debug(\"socket not null - creating and starting socketnode\");\n@@ -236,7 +302,16 @@ public void run() {\n         \"exception while watching socket server in SocketReceiver (\"\n         + this.getName() + \"), stopping\", e);\n     }\n+  }\n \n-    active = false;\n+  /* (non-Javadoc)\n+   * @see org.apache.log4j.plugins.Receiver#doPost(org.apache.log4j.spi.LoggingEvent)\n+   */\n+  public void doPost(LoggingEvent event) {\n+    if(!isPaused()){\n+      super.doPost(event);\n+    }\n   }\n+\n+\n }",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/net/XMLSocketReceiver.java",
                "sha": "7c157d72f0be3fc453f31ec780d1e23c613f4ef1",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/spi/LocationInfo.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/spi/LocationInfo.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "deletions": 4,
                "filename": "src/java/org/apache/log4j/spi/LocationInfo.java",
                "patch": "@@ -214,7 +214,7 @@ public LocationInfo(Throwable t, String fqnOfCallingClass) {\n      logging request.\n   */\n   public String getClassName() {\n-    if (!locationInfoAvailable) {\n+    if ((!locationInfoAvailable) || (className == null && fullInfo == null)) {\n       return NA;\n     }\n \n@@ -259,7 +259,7 @@ public String getClassName() {\n      <p>This information is not always available.\n   */\n   public String getFileName() {\n-    if (!locationInfoAvailable) {\n+    if ((!locationInfoAvailable) || (fileName == null && fullInfo == null)) {\n       return NA;\n     }\n \n@@ -283,7 +283,7 @@ public String getFileName() {\n      <p>This information is not always available.\n   */\n   public String getLineNumber() {\n-    if (!locationInfoAvailable) {\n+    if ((!locationInfoAvailable) || (lineNumber == null && fullInfo == null)) {\n       return NA;\n     }\n \n@@ -305,7 +305,7 @@ public String getLineNumber() {\n      Returns the method name of the caller.\n   */\n   public String getMethodName() {\n-    if (!locationInfoAvailable) {\n+    if ((!locationInfoAvailable) || (methodName == null && fullInfo == null)) {\n       return NA;\n     }\n ",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/spi/LocationInfo.java",
                "sha": "b1420d2762320cfd19565105f89c3083b92ee6bb",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/spi/LoggingEvent.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/spi/LoggingEvent.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "deletions": 2,
                "filename": "src/java/org/apache/log4j/spi/LoggingEvent.java",
                "patch": "@@ -294,6 +294,14 @@ public LoggingEvent(\n     this.properties = properties;\n   }\n \n+  /**\n+   * Check for the existence of location information without creating it (a byproduct of calling\n+   * getLocationInformation).\n+   */\n+  public boolean locationInformationExists() {\n+    return (locationInfo != null);\n+  }\n+  \n   /**\n    * Set the location information for this logging event. The collected\n    * information is cached for future use.\n@@ -566,8 +574,11 @@ public void setProperty(String key, String value) {\n     if (properties == null) {\n       properties = new Hashtable(5); // create a small hashtable\n     }\n-\n-    properties.put(key, value);\n+    if (value != null) { \n+        properties.put(key, value);        \n+    } else {\n+        properties.remove(key);\n+    }\n   }\n \n   private void writeObject(ObjectOutputStream oos) throws java.io.IOException {",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/spi/LoggingEvent.java",
                "sha": "d15a769fed85011ddf9dfb53b3d43be7c7bc67f5",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/xml/UtilLoggingXMLDecoder.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/xml/UtilLoggingXMLDecoder.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "deletions": 3,
                "filename": "src/java/org/apache/log4j/xml/UtilLoggingXMLDecoder.java",
                "patch": "@@ -402,15 +402,17 @@ private Vector decodeEvents(Document document) {\n           properties.putAll(additionalProperties);\n         }\n       }\n-\n+      LocationInfo info = null;\n+      if ((fileName != null) || (className != null) || (methodName != null) || (lineNumber != null)) {\n+          info = new LocationInfo(fileName, className, methodName, lineNumber);\n+      } \n       events.add(\n         new LoggingEvent(\n           logger.getName(), logger, timeStamp, level, threadName, message, ndc,\n           mdc, exception,\n-          new LocationInfo(fileName, className, methodName, lineNumber),\n+          info,\n           properties));\n     }\n-\n     return events;\n   }\n ",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/xml/UtilLoggingXMLDecoder.java",
                "sha": "ab92d338eb4df5b33d6032f22766f8077b974e8e",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/xml/XMLDecoder.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/xml/XMLDecoder.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "deletions": 3,
                "filename": "src/java/org/apache/log4j/xml/XMLDecoder.java",
                "patch": "@@ -237,7 +237,6 @@ public Vector decodeEvents(String document) {\n \t\t\tnewDoc=partialEvent + newDoc;\n \t\t}\t      \t\t\n       \tpartialEvent=newPartialEvent;\n-      \t\n         Document doc = parse(newDoc);\n         if (doc == null) {\n           return null;\n@@ -407,12 +406,15 @@ private Vector decodeEvents(Document document) {\n       if (levelImpl==null) {\n       \tlevelImpl=Level.toLevel(level);\n       }\n-      \t\t\n+      LocationInfo info = null;\n+      if ((fileName != null) || (className != null) || (methodName != null) || (lineNumber != null)) {\n+          info = new LocationInfo(fileName, className, methodName, lineNumber);\n+      } \n       events.add(\n         new LoggingEvent(\n           logger.getName(), logger, timeStamp, levelImpl, threadName, message, ndc,\n           mdc, exception,\n-          new LocationInfo(fileName, className, methodName, lineNumber),\n+          info,\n           properties));\n     }\n ",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/xml/XMLDecoder.java",
                "sha": "73524fb934bc833978a13a21dbe078668f69c0b9",
                "status": "modified"
            }
        ],
        "message": "Bug fix commit\nChanges:\n\n* build.xml - copy logger.dtd into jar\n* locationinfo - non-log4j apps may only specify a subset of the locationinfo fields (the rest would be null), a check was added to prevent an NPE on each accessor\n* loggingevent - Added locationInformationExists method (getLocationInfo creates a location info if it does not exist), and added exist checks to code as needed to prevent location info construction\n* loggingevent - modified setProperty behavior, if value is null, the property is removed\n* receiverpanel - add xmlsocketreceiver support(built-in support for reception of xml-formatted log4j events via tcp socket)\n* utillogginglevel - modified intvalues so that the lowest value is greater than log4j's debug level intvalue (so the appender skeleton would forward the events correctly with threshold set to debug)\n* fileloadaction - when attempting to load an xml file, directories are displayed as well as xml files\n* modified thread code in chainsawappenderhandler in an attempt to improve performance\n* multicastappender/udpappender - removing internally specified properties (log4japp/log4jmachine name) so the rest of the appenders in the appender chain could specify these properties themselves or the default behavior of using the remote machine could be used\n* multicastappender/receiver, udpappender/receiver added encoding support (chartset) as a property.  If none set, the default system encoding is used.\n* xmlsocketreceiver/udpreceiver/multicastreceiver - added pausable support (useful in receiver panel)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@310152 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/log4j/commit/5f07b1b2911a4f02a75e01c3d3a2cf33787c7458",
        "patched_files": [
            "ChainsawAppenderHandler.java",
            "LoggingEvent.java",
            "UtilLoggingLevel.java",
            "LogPanel.java",
            "UDPAppender.java",
            "Details_XMLSocketReceiver.java",
            "ReceiversPanel.java",
            "ColumnComparator.java",
            "ChainsawEventBatchEntry.java",
            "LoggingEventFieldResolver.java",
            "MulticastAppender.java",
            "FilterModel.java",
            "ChainsawCyclicBufferTableModel.java",
            "ReceiversTreeModel.java",
            "MulticastReceiver.java",
            "UDPReceiver.java",
            "XMLDecoder.java",
            "UtilLoggingXMLDecoder.java",
            "XMLSocketReceiver.java",
            "LocationInfo.java",
            "FileLoadAction.java",
            "EventDetailLayout.java",
            "build.java"
        ],
        "repo": "log4j",
        "unit_tests": [
            "RuleTest.java",
            "LoggingEventTest.java",
            "LocationInfoTest.java",
            "UtilLoggingLevelTest.java"
        ]
    },
    "log4j_5b78ffe": {
        "bug_id": "log4j_5b78ffe",
        "commit": "https://github.com/apache/log4j/commit/5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/log4j/blob/5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f/src/java/org/apache/log4j/BasicConfigurator.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/BasicConfigurator.java?ref=5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f",
                "deletions": 6,
                "filename": "src/java/org/apache/log4j/BasicConfigurator.java",
                "patch": "@@ -98,7 +98,7 @@ void addRenderer(String renderedClassName, String renderingClassName) {\n     } else {\n       try {\n \tClass renderedClass = Class.forName(renderedClassName);\n-\tHierarchy._default.rendererMap.put(renderedClass, renderer);\n+\tCategory._default.rendererMap.put(renderedClass, renderer);\n       } catch(ClassNotFoundException e) {\n \tLogLog.error(\"Could not find class [\"+renderedClassName+\"].\", e);\n       }\n@@ -268,15 +268,16 @@ void overrideAsNeeded(String override) {\n   public\n   static\n   void resetConfiguration() {\n-    Hierarchy._default.getRoot().setPriority(Priority.DEBUG);\n-    Hierarchy._default.getRoot().removeAllAppenders();\n-    Hierarchy._default.root.setResourceBundle(null);\n+\n+    Category._default.getRoot().setPriority(Priority.DEBUG);\n+    Category._default.getRoot().removeAllAppenders();\n+    Category._default.root.setResourceBundle(null);\n \n     Category.disable =  Category.DISABLE_OFF;\n     \n     // the synchronization is needed to prevent JDK 1.2.x hashtable\n     // surprises\n-    synchronized(Hierarchy._default.ht) {\n+    synchronized(Category._default.ht) {\n       Enumeration cats = Category.getCurrentCategories();\n       while(cats.hasMoreElements()) {\n \tCategory c = (Category) cats.nextElement();\n@@ -286,6 +287,6 @@ void resetConfiguration() {\n \tc.removeAllAppenders();\n       }\n     }\n-    Hierarchy._default.rendererMap.clear();\n+    Category._default.rendererMap.clear();\n   }\n }",
                "raw_url": "https://github.com/apache/log4j/raw/5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f/src/java/org/apache/log4j/BasicConfigurator.java",
                "sha": "4355371830b46e6be2468a13d970073f86f21baa",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/log4j/blob/5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f/src/java/org/apache/log4j/Category.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/Category.java?ref=5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f",
                "deletions": 7,
                "filename": "src/java/org/apache/log4j/Category.java",
                "patch": "@@ -65,6 +65,13 @@\n \n   static boolean emittedNoAppenderWarning = false;\n   static boolean emittedNoResourceBundleWarning = false;  \n+\n+  // default is a language reserved term, we exceptionally prefix with\n+  // an undescore.\n+  static \n+  public \n+  final Hierarchy _default = new Hierarchy( new RootCategory(Priority.DEBUG));\n+\n   \n   protected ResourceBundle resourceBundle;\n   \n@@ -379,7 +386,7 @@ If the named category exists (in the default hierarchy) then it\n   public\n   static\n   Category exists(String name) {    \n-    return Hierarchy._default.exists(name);\n+    return _default.exists(name);\n   }\n \n   /** \n@@ -506,9 +513,9 @@ Enumeration getCurrentCategories() {\n     // The accumlation in v is necessary because not all elements in\n     // HierarchyMaintainer.ht are Category objects as there might be some\n     // ProvisionNodes as well.       \n-    Vector v = new Vector(Hierarchy._default.ht.size());\n+    Vector v = new Vector(_default.ht.size());\n     \n-    Enumeration elems = Hierarchy._default.ht.elements();\n+    Enumeration elems = _default.ht.elements();\n     while(elems.hasMoreElements()) {\n       Object o = elems.nextElement();\n       if(o instanceof Category) {\n@@ -517,6 +524,19 @@ Enumeration getCurrentCategories() {\n     }\n     return v.elements();\n   }\n+\n+\n+  /**\n+     Return the default Hierarchy instance.\n+\n+     @since 1.0\n+   */\n+  public \n+  static \n+  Hierarchy getDefaultHierarchy() {\n+    return _default;\n+  }\n+\n   \n  /**\n      Retrieve a category with named as the <code>name</code>\n@@ -532,7 +552,7 @@ Enumeration getCurrentCategories() {\n   public\n   static\n   Category getInstance(String name) {\n-    return Hierarchy._default.getInstance(name);\n+    return _default.getInstance(name);\n   }\t\n \n  /**\n@@ -567,7 +587,7 @@ Category getInstance(Class clazz) {\n   public\n   static\n   Category getInstance(String name, CategoryFactory factory) {\n-    return Hierarchy._default.getInstance(name, factory);\n+    return _default.getInstance(name, factory);\n   }\t\n \n   \n@@ -605,7 +625,7 @@ Priority getPriority() {\n   public\n   static\n   Category getRoot() {\n-    return Hierarchy._default.getRoot();\n+    return _default.getRoot();\n   }\n \n   /**\n@@ -958,7 +978,7 @@ void setResourceBundle(ResourceBundle bundle) {\n   public\n   static\n   void shutdown() {\n-    Hierarchy._default.shutdown();\n+    _default.shutdown();\n   }\n \n   ",
                "raw_url": "https://github.com/apache/log4j/raw/5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f/src/java/org/apache/log4j/Category.java",
                "sha": "4fe42f12b41307961e2b6f021101a420725f95e5",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/log4j/blob/5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f/src/java/org/apache/log4j/Hierarchy.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/Hierarchy.java?ref=5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f",
                "deletions": 18,
                "filename": "src/java/org/apache/log4j/Hierarchy.java",
                "patch": "@@ -46,12 +46,6 @@\n \n */\n public class Hierarchy {\n-\n-  // default is a language reserved term, we exceptionally prefix with\n-  // an undescore.\n-  static \n-  public \n-  final Hierarchy _default =  new Hierarchy(new RootCategory(Priority.DEBUG));\n   \n   static \n   private\n@@ -184,17 +178,6 @@ else if (o instanceof ProvisionNode) {\n   }\n \n \n-  /**\n-     Return the default Hierarchy instance.\n-\n-     @since 0.9.0\n-   */\n-  public \n-  static \n-  Hierarchy getDefaultHierarchy() {\n-    return _default;\n-  }\n-\n   /**\n      Get the root of this hierarchy.\n      \n@@ -345,7 +328,7 @@ void shutdown() {\n     // begin by closing nested appenders\n     root.closeNestedAppenders();\n \n-    synchronized(Hierarchy._default.ht) {\n+    synchronized(ht) {\n       Enumeration cats = Category.getCurrentCategories();\n       while(cats.hasMoreElements()) {\n \tCategory c = (Category) cats.nextElement();",
                "raw_url": "https://github.com/apache/log4j/raw/5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f/src/java/org/apache/log4j/Hierarchy.java",
                "sha": "a1c2084bd41faf471fbbe1f057db1108e1f0b8c8",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/log4j/blob/5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f/src/java/org/apache/log4j/PropertyConfigurator.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/PropertyConfigurator.java?ref=5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f",
                "deletions": 1,
                "filename": "src/java/org/apache/log4j/PropertyConfigurator.java",
                "patch": "@@ -471,7 +471,7 @@ void parseCatsAndRenderers(Properties props) {\n       if(key.startsWith(CATEGORY_PREFIX)) {\n \tString categoryName = key.substring(CATEGORY_PREFIX.length());\t\n \tString value =  OptionConverter.findAndSubst(key, props);\n-\tCategory cat = Hierarchy._default.getInstance(categoryName, \n+\tCategory cat = Category._default.getInstance(categoryName, \n \t\t\t\t\t\t     categoryFactory);\n \tsynchronized(cat) {\n \t  parseCategory(props, cat, key, categoryName, value);",
                "raw_url": "https://github.com/apache/log4j/raw/5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f/src/java/org/apache/log4j/PropertyConfigurator.java",
                "sha": "21b2b640d60747307a88e371ddf4c914311f04dc",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/log4j/blob/5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f/src/java/org/apache/log4j/StressCategory.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/StressCategory.java?ref=5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f",
                "deletions": 1,
                "filename": "src/java/org/apache/log4j/StressCategory.java",
                "patch": "@@ -111,7 +111,7 @@ void createLoop(int n) {\n       }\n       test();\n       // Clear hash table for next round\n-      Hierarchy._default.clear();\n+      Category._default.clear();\n     }\n     else {      \n       ct[n]  = null;",
                "raw_url": "https://github.com/apache/log4j/raw/5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f/src/java/org/apache/log4j/StressCategory.java",
                "sha": "fe007ff9cd970194a6ff42ee38817c35410739cf",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/log4j/blob/5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f/src/java/org/apache/log4j/test/UnitTestCategory.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/test/UnitTestCategory.java?ref=5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f",
                "deletions": 1,
                "filename": "src/java/org/apache/log4j/test/UnitTestCategory.java",
                "patch": "@@ -64,7 +64,7 @@ void setUp() {\n   public\n   void tearDown() {\n     // Regular users should not use the clear method lightly!\n-    Hierarchy.getDefaultHierarchy().clear();\n+    Category.getDefaultHierarchy().clear();\n     BasicConfigurator.resetConfiguration();\n     a1 = null;\n     a2 = null;",
                "raw_url": "https://github.com/apache/log4j/raw/5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f/src/java/org/apache/log4j/test/UnitTestCategory.java",
                "sha": "b084d0636b2a783e339a333cbf8d6b6f3964a475",
                "status": "modified"
            }
        ],
        "message": "Moved the Hiearchy._default variable to Category._default such that the Hiearchy class does no longer\nhave a static initiliazer. This fixes a very confusing NullPointerException occuring on rare occasions.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@308898 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/log4j/commit/fdcb56270f83fee9c310d2914d4aba13a60925b8",
        "patched_files": [
            "PropertyConfigurator.java",
            "Category.java"
        ],
        "repo": "log4j",
        "unit_tests": [
            "CategoryTest.java",
            "PropertyConfiguratorTest.java"
        ]
    },
    "log4j_8d99ce2": {
        "bug_id": "log4j_8d99ce2",
        "commit": "https://github.com/apache/log4j/commit/8d99ce2467199fc18ee30ec5d67d81ee3e4e1c6e",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/log4j/blob/8d99ce2467199fc18ee30ec5d67d81ee3e4e1c6e/docs/HISTORY.txt",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/docs/HISTORY.txt?ref=8d99ce2467199fc18ee30ec5d67d81ee3e4e1c6e",
                "deletions": 3,
                "filename": "docs/HISTORY.txt",
                "patch": "@@ -8,24 +8,31 @@\n    [D] Changes affect a method or property which was previously marked as \n        deprecated.\n \n+  December XX, 2004\n+ - Release of version 1.3alpha-4\n+\n+ - Fixed Bugzilla 15198: TelnetAppender: NullPointerException if\n+   SocketHandler not initialized.\n+\n+\n   November 25, 2004\n \n- - Release of version 1.3apha-3\n+ - Release of version 1.3alpha-3\n  \n  - Classes are built with the javac debug setting on.\n  - Fixed unset activeFile bug in SlidingWindowRollingPolicy.\n  \n   November 25, 2004\n \n- - Release of version 1.3apha-2\n+ - Release of version 1.3alpha-2\n  \n  - The deprecated DOMConfigrator was mistakenly left as the default\n    configrator for XML files.  This has been fixed and JoranConfigrator\n    now is the default configrator for XML files.\n  \n  November 24th, 2004\n \n- - Release of version 1.3apha-1\n+ - Release of version 1.3alpha-1\n \n  - Log4j now uses itself for its own logging. For more details refer to\n    ",
                "raw_url": "https://github.com/apache/log4j/raw/8d99ce2467199fc18ee30ec5d67d81ee3e4e1c6e/docs/HISTORY.txt",
                "sha": "8244bb12dcc505893f41663ceca42a5f5acae23e",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/log4j/blob/8d99ce2467199fc18ee30ec5d67d81ee3e4e1c6e/src/java/org/apache/log4j/net/TelnetAppender.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/net/TelnetAppender.java?ref=8d99ce2467199fc18ee30ec5d67d81ee3e4e1c6e",
                "deletions": 2,
                "filename": "src/java/org/apache/log4j/net/TelnetAppender.java",
                "patch": "@@ -73,7 +73,7 @@ public void activateOptions() {\n       sh = new SocketHandler(port);\n       sh.start();\n     } catch (Exception e) {\n-      e.printStackTrace();\n+        getLogger().error(\"Could not active TelnetAppender options: \", e);\n     }\n   }\n \n@@ -87,12 +87,19 @@ public void setPort(int port) {\n \n   /** shuts down the appender. */\n   public void close() {\n-    sh.finalize();\n+      if(sh != null) {\n+          sh.finalize();\n+      }\n   }\n \n   /** Handles a log event.  For this appender, that means writing the\n     message to each connected client.  */\n   protected void append(LoggingEvent event) {\n+      if(sh == null) {\n+          getLogger().warn(\"SocketHandler is null, not sending event.\");\n+          return;\n+      }\n+\n     sh.send(this.layout.format(event));\n \n     if (layout.ignoresThrowable()) {",
                "raw_url": "https://github.com/apache/log4j/raw/8d99ce2467199fc18ee30ec5d67d81ee3e4e1c6e/src/java/org/apache/log4j/net/TelnetAppender.java",
                "sha": "af514c08c75996278a1788a123971b826b298fac",
                "status": "modified"
            }
        ],
        "message": "Bugzilla 15198: TelnetAppender: NullPointerException if SocketHandler not initialized.\n\nPR:\nObtained from:\nSubmitted by:\nReviewed by:\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@311037 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/log4j/commit/7817b8477a40ae2831fc76dc2f347c04171da803",
        "patched_files": [
            "TelnetAppender.java"
        ],
        "repo": "log4j",
        "unit_tests": [
            "TelnetAppenderTest.java"
        ]
    },
    "log4j_e87c632": {
        "bug_id": "log4j_e87c632",
        "commit": "https://github.com/apache/log4j/commit/e87c632e10235c397fcc485cca3b94b8d9fed593",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/log4j/blob/e87c632e10235c397fcc485cca3b94b8d9fed593/build.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/build.xml?ref=e87c632e10235c397fcc485cca3b94b8d9fed593",
                "deletions": 1,
                "filename": "build.xml",
                "patch": "@@ -17,7 +17,7 @@\n   <!-- prefixed with \"env\". -->\n   <property environment=\"env\"/>\n \n-  <property name=\"version\" value=\"1.2.7\"/>\n+  <property name=\"version\" value=\"1.2.8\"/>\n \n   <!-- The base directory relative to which most targets are built -->\n   <property name=\"base\" value=\".\"/>",
                "raw_url": "https://github.com/apache/log4j/raw/e87c632e10235c397fcc485cca3b94b8d9fed593/build.xml",
                "sha": "7ddc86b541ab344874c56e6aa37242b279b2c741",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/log4j/blob/e87c632e10235c397fcc485cca3b94b8d9fed593/docs/HISTORY",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/docs/HISTORY?ref=e87c632e10235c397fcc485cca3b94b8d9fed593",
                "deletions": 0,
                "filename": "docs/HISTORY",
                "patch": "@@ -5,6 +5,23 @@\n        client code. \n  [***] Changes requiring important modifications to existing client code.\n \n+ - February 18th, 2003\n+\n+http://nagoya.apache.org/bugzilla/show_bug.cgi?id=11570\n+\n+\n+XML Appender throws NullPointerException when logging null\n+\n+ - Fixed bug #11570 whereby XMLAppender would throw a\n+   NullPointerException if the input message was null. Many thanks to\n+   David Vandegrift for reporting the bug and to Hendrik Brummermann for\n+   supplying the patch. [*]\n+\n+ - Fixed bug #12366 whereby various versions of Xerces would not parse\n+   log4j configuration scripts expressed in XML format. [*]\n+\n+ - Fixed bug #15599. SocketAppender now honors ReconnectionDelay of 0.\n+   Many thanks to Scott Schram for reporting the bug and providing the fix. [*]\n \n  October 9th, 2002\n ",
                "raw_url": "https://github.com/apache/log4j/raw/e87c632e10235c397fcc485cca3b94b8d9fed593/docs/HISTORY",
                "sha": "524ea9d394233ef6d87a00baf86b21608822dcab",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/log4j/blob/e87c632e10235c397fcc485cca3b94b8d9fed593/docs/manual.html",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/docs/manual.html?ref=e87c632e10235c397fcc485cca3b94b8d9fed593",
                "deletions": 5,
                "filename": "docs/manual.html",
                "patch": "@@ -22,11 +22,12 @@ <h1>Short introduction to log4j</h1>\n       distribution. This document is based on the article <a\n       href=\"http://www.javaworld.com/jw-11-2000/jw-1122-log4j.html\">\"Log4j\n       delivers control over logging\"</a> published in November 2000\n-      edition of <a\n-      href=\"http://www.javaworld.com\">JavaWorld</a>. However, the\n-      present article contains more detailed and up to date\n-      information. The short manual also borrows some text from the\n-      book \"log4j: the Manual\" by the same author (yours truly).\n+      edition of JavaWorld. However, the present article contains more\n+      detailed and up to date information. The present short manual\n+      also borrows some text from <a\n+      href=\"http://www.flashline.com/components/view.jsp?prodid=4702&affiliateid=657173\">\n+      \"<em>The complete log4j manual</em>\"</a> by the same author\n+      (yours truly).\n \n \n <h2>Abstract</h2>",
                "raw_url": "https://github.com/apache/log4j/raw/e87c632e10235c397fcc485cca3b94b8d9fed593/docs/manual.html",
                "sha": "e946f9d9abf3d4e546dfe7c988a4aee39ad42b8b",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/log4j/blob/e87c632e10235c397fcc485cca3b94b8d9fed593/src/java/org/apache/log4j/helpers/Transform.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/helpers/Transform.java?ref=e87c632e10235c397fcc485cca3b94b8d9fed593",
                "deletions": 1,
                "filename": "src/java/org/apache/log4j/helpers/Transform.java",
                "patch": "@@ -71,8 +71,12 @@ static public String escapeTags(String input) {\n   * @param str The String that is inserted into an existing CDATA Section within buf.  \n   * */\n   static public void appendEscapingCDATA(StringBuffer buf, String str) {\n-    int end = str.indexOf(CDATA_END);\n+    if(str == null) {\n+      buf.append(\"\");\n+      return;\n+    } \n     \n+    int end = str.indexOf(CDATA_END);\n     if (end < 0) {\n       buf.append(str);\n       return;",
                "raw_url": "https://github.com/apache/log4j/raw/e87c632e10235c397fcc485cca3b94b8d9fed593/src/java/org/apache/log4j/helpers/Transform.java",
                "sha": "d02b63ed751daf4b0dacbf2f57d7258b2a3b14a1",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/log4j/blob/e87c632e10235c397fcc485cca3b94b8d9fed593/src/java/org/apache/log4j/net/SocketAppender.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/net/SocketAppender.java?ref=e87c632e10235c397fcc485cca3b94b8d9fed593",
                "deletions": 3,
                "filename": "src/java/org/apache/log4j/net/SocketAppender.java",
                "patch": "@@ -194,9 +194,14 @@ void connect(InetAddress address, int port) {\n       cleanUp();\n       oos = new ObjectOutputStream(new Socket(address, port).getOutputStream());\n     } catch(IOException e) {\n-      LogLog.error(\"Could not connect to remote log4j server at [\"\n-\t\t   +address.getHostName()+\"]. We will try again later.\", e);\n-      fireConnector();\n+\n+      String msg = \"Could not connect to remote log4j server at [\"\n+\t+address.getHostName()+\"].\";\n+      if(reconnectionDelay > 0) {\n+        msg += \" We will try again later.\";\n+\tfireConnector(); // fire the connector thread\n+      } \n+      LogLog.error(msg, e);\n     }\n   }\n ",
                "raw_url": "https://github.com/apache/log4j/raw/e87c632e10235c397fcc485cca3b94b8d9fed593/src/java/org/apache/log4j/net/SocketAppender.java",
                "sha": "ddb4145e61de38205d0a162dbf70f54274c1b030",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/log4j/blob/e87c632e10235c397fcc485cca3b94b8d9fed593/src/xdocs/documentation.xml",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/xdocs/documentation.xml?ref=e87c632e10235c397fcc485cca3b94b8d9fed593",
                "deletions": 6,
                "filename": "src/xdocs/documentation.xml",
                "patch": "@@ -10,18 +10,22 @@\n \n     <section name=\"Official log4j documentation\">\n \n-      <p>The following documentation is included with the standard log4j\n-\tdistribution and also browsable online:</p>\n+      <p>With the exception of the complete manual, the following\n+\tdocumentation is included with the standard log4j distribution\n+\tand also browsable online:\n+      </p>\n       \n       <ul>\n \t<p>\n-\t  <a href=\"http://www.flashline.com/components/view.jsp?prodid=4702&amp;affiliateid=657173\"><img align=\"right\" src=\"images/coverSmall.png\"></img></a>\n-\t  <li><a href=\"manual.html\"><b>short manual</b></a>,\n+\t  <a\n+\t  href=\"https://www.qos.ch/shop/products/clm_t.jsp\"><img\n+\t  align=\"right\" src=\"images/coverSmall.png\"></img></a> <li><a\n+\t  href=\"manual.html\"><b>short manual</b></a>,\n \t  </li>\n \t</p>\n \n \t<p>\n-\t  <li><a href=\"http://www.flashline.com/components/view.jsp?prodid=4702&amp;affiliateid=657173\"><b>complete manual</b></a> (commercial), \n+\t  <li><a href=\"https://www.qos.ch/shop/products/clm_t.jsp\"><b>complete manual</b></a> (commercial), \n \t  </li>\n \t</p>\n \t\n@@ -72,6 +76,9 @@\n \t    Build Flexible Logs With log4j</a> by Vikram Goyal\n \t</li></p>\n \n+\t<p><li><a\n+\thref=\"http://supportweb.cs.bham.ac.uk/documentation/tutorials/docsystem/build/tutorials/log4j/log4j.html\">log4j</a>\n+\tby Ashley J.S Mills, University Of Birmingham</li></p>\n \n \t<p><li><a href=\"http://www.builder.com.com/article.jhtml?id=u00820020124kev01.htm\">\n \t    Add logging to your Java Applications</a> by Kevin Brown\n@@ -94,7 +101,19 @@\n \n \t</li></p>\n \n-      </ul>\n+\t<p><li> <a href=\"http://qos.ch/logging/sc.html\">Supporting the\n+\t  log4j <code>RepositorySelector</code></a> by Ceki\n+\t  G&#252;lc&#252;\n+\t</li></p>\n+\n+         <p><li> <a href=\"http://rei1.m-plify.com/log4j/\">Log4j class\n+         diagrams</a>, courtesy of David Tonhofer\n+            </li>\n+         </p>\n+\n+\t<p><li> <a href=\"http://www.jug-l.org/log4j.html\">Advanced\n+\t  Log4j</a> Louisville JUG presentation by Jonathan Cowherd </li></p>\n+      </ul> \n \n       <p>If you would like your log4j-relateed article to be listed\n \t  here, then please send a note to the <a",
                "raw_url": "https://github.com/apache/log4j/raw/e87c632e10235c397fcc485cca3b94b8d9fed593/src/xdocs/documentation.xml",
                "sha": "293419bd71d69be26fd1c3682cc38b754409fce4",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/log4j/blob/e87c632e10235c397fcc485cca3b94b8d9fed593/src/xdocs/download.xml",
                "changes": 48,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/xdocs/download.xml?ref=e87c632e10235c397fcc485cca3b94b8d9fed593",
                "deletions": 27,
                "filename": "src/xdocs/download.xml",
                "patch": "@@ -9,14 +9,14 @@\n   <meta name=\"keywords\" content=\"java, logging, tracing, component, framework, API, log4j\"/>\n <body>\n \n-    <section name=\"log4j version 1.2.7\">\n-      <p>log4j 1.2.7 is available in <a\n-\thref=\"../jakarta-log4j-1.2.7.tar.gz\"><b>TAR.GZ</b></a> format\n-\tor in <a href=\"../jakarta-log4j-1.2.7.zip\"><b>ZIP</b></a>\n+    <section name=\"log4j version 1.2.8\">\n+      <p>log4j 1.2.8 is available in <a\n+\thref=\"../jakarta-log4j-1.2.8.tar.gz\"><b>TAR.GZ</b></a> format\n+\tor in <a href=\"../jakarta-log4j-1.2.8.zip\"><b>ZIP</b></a>\n \tformat.\n       </p>\n \n-      <p>As of release 1.2.7 log4j now searches for the file log4j.xml\n+      <p>As of release 1.2.8 log4j now searches for the file log4j.xml\n         as well as the file log4j.properties during\n         initialization. See the <a href=\"HISTORY\">HISTORY</a> file for\n         the firther details.\n@@ -42,14 +42,15 @@\n \trenaming of the <code>CategoryFactory</code> class to\n \t<code>LoggerFactory</code> class such that subclasses of\n \t<code>Category</code> class must be modified and\n-\trecompiled. By the way, <b>we strongly discourage casual users\n-\tfrom subclassing the <code>Category</code> or\n-\t<code>Logger</code> classes.</b>\n+\trecompiled. <em>The recommended pattern for extending the\n+\t<code>Logger</code> class is wrapping. Moreover, we strongly\n+\tdiscourage casual users from subclassing the\n+\t<code>Category</code> or <code>Logger</code> classes. </em>\n       </p>\n \n       <p>We also maintain a list of <a href=\"earlier.html\">earlier\n \t  versions</a> of log4j for download, intended for the curious\n-\t  paleontologist -- there seems to be thousands of them!\n+\t  paleontologist -- there seems to be quite a few of them!\n       </p>\n \n \n@@ -76,33 +77,26 @@\n \n \t<!-- ============================================================================== -->\n \n-\t<dt><a href=\"http://www.japhy.de/configLog4j\"><b>configLog4j</b></a></dt>\n+<!--\t<dt><a href=\"http://www.japhy.de/configLog4j\"><b>configLog4j</b></a></dt>\n \n \t<dd>A graphical log4j configuration editor by Tobias\n \tDezulian.</dd>\n-\n+-->\n \t<!-- ============================================================================== -->\n \n \t<dt>\n \t  <a\n-\thref=\"http://support.klopotek.de/log4j/jdbc/index.html\"><b>JDBCAppender</b></a>\n+\thref=\"http://www.mannhaupt.com/danko/projects/\"><b>JDBCAppender</b></a>\n+\t</dt> \n \n-\t</dt> <dd>A <code>JDBCAppender</code> by <a\n-\thref=\"mailto:t.fenner@klopotek.de\">Thomas Fenner</a>. Note\n-\tthat log4j 1.2 ships with another <code>JDBCAppender</code>\n-\twritten by Kevin Steppe.\n+        <dd>A powerful <code>JDBCAppender</code> by Danko Mannhaupt\n+\t  who continues the work of Thomas Fenner. You might find\n+\t  this JDBCAppender more suitable then the one that ships with\n+\t  log4j 1.2. \n \t</dd>\n \n \t<!-- ============================================================================== -->\t\n \t\n-\t<dt><a\n-\thref=\"http://developer.jini.org/exchange/projects/log\"><b>JINI\n-\tlogging service</b></a> (registration required)</dt>\n-\n-\t<dd>A log4j wrapper for JINI by Jerome Bernard.</dd>\n-\n-\t<!-- ============================================================================== -->\n-\n \t<dt><a href=\"http://qos.ch/\"><b>log4j<em>ME</em></b></a></dt>\n \n \t<dd>Log4j<em>ME</em>, or log4j MiniEdition, is based on the\n@@ -139,9 +133,9 @@\n \t</dt> \n \n \t<dd>Another full-featured graphical log viewer. After a merger\n-\t  with a service-orinted company and a change in\n-\t  business-orientation, the owners of LogFactor5 have decided\n-\t  to donate their product to the log4j project.\n+\t  and the subsequent change in business-orientation, the\n+\t  owners of LogFactor5 have decided to donate their product to\n+\t  the log4j project.\n \t</dd>\n \n \t<!-- ============================================================================== -->",
                "raw_url": "https://github.com/apache/log4j/raw/e87c632e10235c397fcc485cca3b94b8d9fed593/src/xdocs/download.xml",
                "sha": "c6e4b3c23e56457b16789e59a35431107b8965b0",
                "status": "modified"
            }
        ],
        "message": " - Fixed bug #11570 whereby XMLAppender would throw a\n   NullPointerException if the input message was null. Many thanks to\n   David Vandegrift for reporting the bug and to Hendrik Brummermann for\n   supplying the patch. [*]\n\n - Fixed bug #12366 whereby various versions of Xerces would not parse\n   log4j configuration scripts expressed in XML format. [*]\n\n - Fixed bug #15599. SocketAppender now honors ReconnectionDelay of 0.\n   Many thanks to Scott Schram for reporting the bug and providing the fix. [*]\n\n\nPR:\nObtained from:\nSubmitted by:\nReviewed by:\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/branches/v1_2-branch@309738 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/log4j/commit/680d100f2796942ce90262035bf757a9fc6421df",
        "patched_files": [
            "SocketAppender.java"
        ],
        "repo": "log4j",
        "unit_tests": [
            "SocketAppenderTest.java"
        ]
    }
}