{
    "log4j_269f78a": {
        "repo": "log4j",
        "message": "Big 47547: NPE in Category.removeAllAppenders\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@824000 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/269f78adefdb4294c1a999a5566a82d0f51b244e",
        "parent": "https://github.com/apache/log4j/commit/6e43ab6237576accc58e4c220403e01415829777",
        "bug_id": "log4j_269f78a",
        "file": [
            {
                "sha": "39d7b610ed39c3fb619e206ba1ea494924b9c547",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/log4j/blob/269f78adefdb4294c1a999a5566a82d0f51b244e/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/log4j/raw/269f78adefdb4294c1a999a5566a82d0f51b244e/src/changes/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/changes/changes.xml?ref=269f78adefdb4294c1a999a5566a82d0f51b244e",
                "patch": "@@ -86,6 +86,7 @@\n        <action action=\"fix\" issue=\"46539\">The QuietWriter class does not live up to its published contract.</action>\n        <action action=\"add\" issue=\"46983\">More Debug output for log4j auto-configure requested.</action>\n        <action action=\"add\" issue=\"47107\">Add MDC.clear().</action>\n+       <action action=\"fix\" issue=\"47547\">NullPointerException when calling Category.removeAllAppenders().</action>\n     </release>\n \n   ",
                "deletions": 0
            },
            {
                "sha": "e0cb56108cf52d99eed0f58c984b3d95820d696a",
                "filename": "src/main/java/org/apache/log4j/Category.java",
                "blob_url": "https://github.com/apache/log4j/blob/269f78adefdb4294c1a999a5566a82d0f51b244e/src/main/java/org/apache/log4j/Category.java",
                "raw_url": "https://github.com/apache/log4j/raw/269f78adefdb4294c1a999a5566a82d0f51b244e/src/main/java/org/apache/log4j/Category.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/main/java/org/apache/log4j/Category.java?ref=269f78adefdb4294c1a999a5566a82d0f51b244e",
                "patch": "@@ -885,7 +885,7 @@ private void fireRemoveAppenderEvent(final Appender appender) {\n   void removeAllAppenders() {\n     if(aai != null) {\n       Vector appenders = new Vector();\n-      for (Enumeration iter = aai.getAllAppenders(); iter.hasMoreElements();) {\n+      for (Enumeration iter = aai.getAllAppenders(); iter != null && iter.hasMoreElements();) {\n           appenders.add(iter.nextElement());\n       }\n       aai.removeAllAppenders();",
                "deletions": 1
            }
        ],
        "patched_files": [
            "Category.java"
        ],
        "unit_tests": [
            "CategoryTest.java"
        ]
    },
    "log4j_16d943b": {
        "repo": "log4j",
        "message": "Bug 41186: DiscardSummary events create NPE in layouts\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/branches/v1_2-branch@487724 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/16d943b19781ee83ae9a276debcf1139f89a6d5c",
        "parent": "https://github.com/apache/log4j/commit/6e4da7fcdfb8504c627278ac564957555db105e2",
        "bug_id": "log4j_16d943b",
        "file": [
            {
                "sha": "967dd135443bcebebb0bceec6097d2b29ab9a678",
                "filename": "src/java/org/apache/log4j/AsyncAppender.java",
                "blob_url": "https://github.com/apache/log4j/blob/16d943b19781ee83ae9a276debcf1139f89a6d5c/src/java/org/apache/log4j/AsyncAppender.java",
                "raw_url": "https://github.com/apache/log4j/raw/16d943b19781ee83ae9a276debcf1139f89a6d5c/src/java/org/apache/log4j/AsyncAppender.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/AsyncAppender.java?ref=16d943b19781ee83ae9a276debcf1139f89a6d5c",
                "patch": "@@ -466,7 +466,11 @@ public LoggingEvent createEvent() {\n           new Object[] { new Integer(count), maxEvent.getMessage() });\n \n       return new LoggingEvent(\n-        null, Logger.getLogger(maxEvent.getLoggerName()), maxEvent.getLevel(), msg, null);\n+              \"org.apache.log4j.AsyncAppender.DONT_REPORT_LOCATION\",\n+              Logger.getLogger(maxEvent.getLoggerName()),\n+              maxEvent.getLevel(),\n+              msg,\n+              null);\n     }\n   }\n ",
                "deletions": 1
            },
            {
                "sha": "027e6ea640538a06d981b3f348079df104fb6852",
                "filename": "tests/src/java/org/apache/log4j/AsyncAppenderTestCase.java",
                "blob_url": "https://github.com/apache/log4j/blob/16d943b19781ee83ae9a276debcf1139f89a6d5c/tests/src/java/org/apache/log4j/AsyncAppenderTestCase.java",
                "raw_url": "https://github.com/apache/log4j/raw/16d943b19781ee83ae9a276debcf1139f89a6d5c/tests/src/java/org/apache/log4j/AsyncAppenderTestCase.java",
                "status": "modified",
                "changes": 174,
                "additions": 174,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/tests/src/java/org/apache/log4j/AsyncAppenderTestCase.java?ref=16d943b19781ee83ae9a276debcf1139f89a6d5c",
                "patch": "@@ -23,6 +23,7 @@\n import java.util.Vector;\n \n import org.apache.log4j.*;\n+import org.apache.log4j.spi.LoggingEvent;\n import org.apache.log4j.varia.NullAppender;\n \n /**\n@@ -151,4 +152,177 @@ public void testBadAppender() throws Exception {\n \n         }\n     }\n+\n+    /**\n+     * Tests location processing when buffer is full and locationInfo=true.\n+     * See bug 41186.\n+     */\n+    public void testLocationInfoTrue() {\n+        BlockableVectorAppender blockableAppender = new BlockableVectorAppender();\n+        AsyncAppender async = new AsyncAppender();\n+        async.addAppender(blockableAppender);\n+        async.setBufferSize(5);\n+        async.setLocationInfo(true);\n+        async.setBlocking(false);\n+        async.activateOptions();\n+        Logger rootLogger = Logger.getRootLogger();\n+        rootLogger.addAppender(async);\n+        Greeter greeter = new Greeter(rootLogger, 100);\n+        synchronized(blockableAppender.getMonitor()) {\n+            greeter.run();\n+            rootLogger.error(\"That's all folks.\");\n+        }\n+        async.close();\n+        Vector events = blockableAppender.getVector();\n+        LoggingEvent initialEvent = (LoggingEvent) events.get(0);\n+        LoggingEvent discardEvent = (LoggingEvent) events.get(events.size() - 1);\n+        PatternLayout layout = new PatternLayout();\n+        layout.setConversionPattern(\"%C:%L %m%n\");\n+        layout.activateOptions();\n+        String initialStr = layout.format(initialEvent);\n+        assertEquals(AsyncAppenderTestCase.class.getName(),\n+                initialStr.substring(0, AsyncAppenderTestCase.class.getName().length()));\n+        String discardStr = layout.format(discardEvent);\n+        assertEquals(\"?:? \", discardStr.substring(0, 4));\n+    }\n+\n+\n+    /**\n+     * Tests location processing when buffer is full and locationInfo=false.\n+     * See bug 41186.\n+     */\n+    public void testLocationInfoFalse() {\n+        BlockableVectorAppender blockableAppender = new BlockableVectorAppender();\n+        AsyncAppender async = new AsyncAppender();\n+        async.addAppender(blockableAppender);\n+        async.setBufferSize(5);\n+        async.setLocationInfo(false);\n+        async.setBlocking(false);\n+        async.activateOptions();\n+        Logger rootLogger = Logger.getRootLogger();\n+        rootLogger.addAppender(async);\n+        Greeter greeter = new Greeter(rootLogger, 100);\n+        synchronized(blockableAppender.getMonitor()) {\n+            greeter.run();\n+            rootLogger.error(\"That's all folks.\");\n+        }\n+        async.close();\n+        Vector events = blockableAppender.getVector();\n+        LoggingEvent initialEvent = (LoggingEvent) events.get(0);\n+        LoggingEvent discardEvent = (LoggingEvent) events.get(events.size() - 1);\n+        PatternLayout layout = new PatternLayout();\n+        layout.setConversionPattern(\"%C:%L %m%n\");\n+        layout.activateOptions();\n+        String initialStr = layout.format(initialEvent);\n+        assertEquals(\"?:? \", initialStr.substring(0, 4));\n+        String discardStr = layout.format(discardEvent);\n+        assertEquals(\"?:? \", discardStr.substring(0, 4));\n+    }\n+\n+    /**\n+     *  Logging request runnable.\n+     */\n+    private static final class Greeter implements Runnable {\n+      /**\n+       * Logger.\n+       */\n+      private final Logger logger;\n+\n+      /**\n+       * Repetitions.\n+       */\n+      private final int repetitions;\n+\n+      /**\n+       * Create new instance.\n+       * @param logger logger, may not be null.\n+       * @param repetitions repetitions.\n+       */\n+      public Greeter(final Logger logger, final int repetitions) {\n+        if (logger == null) {\n+          throw new IllegalArgumentException(\"logger\");\n+        }\n+\n+        this.logger = logger;\n+        this.repetitions = repetitions;\n+      }\n+\n+      /**\n+       * {@inheritDoc}\n+       */\n+      public void run() {\n+        try {\n+          for (int i = 0; i < repetitions; i++) {\n+            logger.info(\"Hello, World\");\n+            Thread.sleep(1);\n+          }\n+        } catch (InterruptedException ex) {\n+          Thread.currentThread().interrupt();\n+        }\n+      }\n+    }\n+\n+\n+\n+    /**\n+     * Vector appender that can be explicitly blocked.\n+     */\n+    private static final class BlockableVectorAppender extends VectorAppender {\n+      /**\n+       * Monitor object used to block appender.\n+       */\n+      private final Object monitor = new Object();\n+\n+      /**\n+       * Thread of last call to append.\n+       */\n+      private Thread dispatcher;\n+\n+      /**\n+       * Create new instance.\n+       */\n+      public BlockableVectorAppender() {\n+        super();\n+      }\n+\n+      /**\n+       * {@inheritDoc}\n+       */\n+      public void append(final LoggingEvent event) {\n+        synchronized (monitor) {\n+          dispatcher = Thread.currentThread();\n+          super.append(event);\n+            //\n+            //   if fatal, echo messages for testLoggingInDispatcher\n+            //\n+            if (event.getLevel() == Level.FATAL) {\n+                Logger logger = Logger.getLogger(event.getLoggerName());\n+                logger.error(event.getMessage().toString());\n+                logger.warn(event.getMessage().toString());\n+                logger.info(event.getMessage().toString());\n+                logger.debug(event.getMessage().toString());\n+            }\n+        }\n+      }\n+\n+      /**\n+       * Get monitor object.\n+       * @return monitor.\n+       */\n+      public Object getMonitor() {\n+        return monitor;\n+      }\n+\n+      /**\n+       * Get thread of previous call to append.\n+       * @return thread, may be null.\n+       */\n+      public Thread getDispatcher() {\n+        synchronized (monitor) {\n+          return dispatcher;\n+        }\n+      }\n+    }\n+\n+\n }",
                "deletions": 0
            }
        ],
        "patched_files": [
            "AsyncAppender.java"
        ],
        "unit_tests": [
            "AsyncAppenderTest.java"
        ]
    },
    "log4j_397e5f5": {
        "repo": "log4j",
        "message": "Bug 41186: Eliminate NPE on getLocationInfo() when FQCN is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/branches/v1_2-branch@530974 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/397e5f50c3313f8c757495beb771d6ed9db92838",
        "parent": "https://github.com/apache/log4j/commit/25d6aed165192bba00212628c572597e48e4d91c",
        "bug_id": "log4j_397e5f5",
        "file": [
            {
                "sha": "dcd03e6b7c6260cd4d1a24f944d5eb3036e36149",
                "filename": "src/java/org/apache/log4j/spi/LocationInfo.java",
                "blob_url": "https://github.com/apache/log4j/blob/397e5f50c3313f8c757495beb771d6ed9db92838/src/java/org/apache/log4j/spi/LocationInfo.java",
                "raw_url": "https://github.com/apache/log4j/raw/397e5f50c3313f8c757495beb771d6ed9db92838/src/java/org/apache/log4j/spi/LocationInfo.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/spi/LocationInfo.java?ref=397e5f50c3313f8c757495beb771d6ed9db92838",
                "patch": "@@ -105,7 +105,7 @@\n \n     */\n     public LocationInfo(Throwable t, String fqnOfCallingClass) {\n-      if(t == null)\n+      if(t == null || fqnOfCallingClass == null)\n \treturn;\n \n       String s;",
                "deletions": 1
            },
            {
                "sha": "f8a78a349c2a851b131d2cb51a515ccbc7519400",
                "filename": "tests/src/java/org/apache/log4j/spi/LoggingEventTest.java",
                "blob_url": "https://github.com/apache/log4j/blob/397e5f50c3313f8c757495beb771d6ed9db92838/tests/src/java/org/apache/log4j/spi/LoggingEventTest.java",
                "raw_url": "https://github.com/apache/log4j/raw/397e5f50c3313f8c757495beb771d6ed9db92838/tests/src/java/org/apache/log4j/spi/LoggingEventTest.java",
                "status": "modified",
                "changes": 24,
                "additions": 24,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/tests/src/java/org/apache/log4j/spi/LoggingEventTest.java?ref=397e5f50c3313f8c757495beb771d6ed9db92838",
                "patch": "@@ -215,5 +215,29 @@ public void testLevel() {\n       assertEquals(Level.ERROR, event.level);\n   }\n \n+    /**\n+     * Tests LoggingEvent.getLocationInfo() when no FQCN is specified.\n+     * See bug 41186.\n+     */\n+  public void testLocationInfoNoFQCN() {\n+      Category root = Logger.getRootLogger();\n+\t  Priority level = Level.INFO;\n+      LoggingEvent event =\n+        new LoggingEvent(\n+          null, root, 0L,  level, \"Hello, world.\", null);\n+      LocationInfo info = event.getLocationInformation();\n+\t  //\n+\t  //  log4j 1.2 returns an object, its layout doesn't check for nulls.\n+\t  //  log4j 1.3 returns a null.\n+\t  //\n+\t  assertNotNull(info);\n+\t  if (info != null) {\n+\t     assertEquals(\"?\", info.getLineNumber());\n+\t\t assertEquals(\"?\", info.getClassName());\n+\t\t assertEquals(\"?\", info.getFileName());\n+\t\t assertEquals(\"?\", info.getMethodName());\n+\t  }\n+  }\n+\n \n }",
                "deletions": 0
            }
        ],
        "patched_files": [
            "LocationInfo.java",
            "LoggingEvent.java"
        ],
        "unit_tests": [
            "LoggingEventTest.java"
        ]
    },
    "log4j_2e42a97": {
        "repo": "log4j",
        "message": "Bug 38993: NPE in FileAppender.setFile\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@386250 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/2e42a97e9fd77698cf0d302092eed429ea5be573",
        "parent": "https://github.com/apache/log4j/commit/a3ef177ea888e397dbc4ab675e7afd0e3de5b638",
        "bug_id": "log4j_2e42a97",
        "file": [
            {
                "sha": "34f47fc8c2c6d867ebd5c65c02b65ddabf23835b",
                "filename": "src/java/org/apache/log4j/FileAppender.java",
                "blob_url": "https://github.com/apache/log4j/blob/2e42a97e9fd77698cf0d302092eed429ea5be573/src/java/org/apache/log4j/FileAppender.java",
                "raw_url": "https://github.com/apache/log4j/raw/2e42a97e9fd77698cf0d302092eed429ea5be573/src/java/org/apache/log4j/FileAppender.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/FileAppender.java?ref=2e42a97e9fd77698cf0d302092eed429ea5be573",
                "patch": "@@ -289,7 +289,7 @@ public synchronized void setFile(\n     Writer fw = createWriter(ostream);\n \n     if (bufferedIO) {\n-      fw = new BufferedWriter(this.qw, bufferSize);\n+      fw = new BufferedWriter(fw, bufferSize);\n     }\n     setQWForFiles(fw);\n ",
                "deletions": 1
            },
            {
                "sha": "1610828b31314d7aef04f98a8715121189a0be06",
                "filename": "tests/src/java/org/apache/log4j/FileAppenderTest.java",
                "blob_url": "https://github.com/apache/log4j/blob/2e42a97e9fd77698cf0d302092eed429ea5be573/tests/src/java/org/apache/log4j/FileAppenderTest.java",
                "raw_url": "https://github.com/apache/log4j/raw/2e42a97e9fd77698cf0d302092eed429ea5be573/tests/src/java/org/apache/log4j/FileAppenderTest.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/tests/src/java/org/apache/log4j/FileAppenderTest.java?ref=2e42a97e9fd77698cf0d302092eed429ea5be573",
                "patch": "@@ -101,4 +101,13 @@ public void testIsAsSevereAsThreshold() {\n     Priority debug = Level.DEBUG;\n     assertTrue(appender.isAsSevereAsThreshold(debug));\n   }\n+\n+    /**\n+     * Test for bug 38993.\n+     * @throws java.io.IOException if IOException\n+     */\n+  public void testSetFileBuffered() throws java.io.IOException {\n+      FileAppender appender = new FileAppender();\n+      appender.setFile(\"output/setFileBuffered.log\", false, true, 100);\n+  }\n }",
                "deletions": 0
            }
        ],
        "patched_files": [
            "FileAppender.java"
        ],
        "unit_tests": [
            "FileAppenderTest.java"
        ]
    },
    "log4j_0e1cc4a": {
        "repo": "log4j",
        "message": "Bug 32536 - Guard against NPE by checking passed in RepositorySelector\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@500473 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/0e1cc4a10b28f3f119baded6b3f00683faf2a2de",
        "parent": "https://github.com/apache/log4j/commit/bc7ace697b7097329c5f4f7ffb978b0bd7f4dda2",
        "bug_id": "log4j_0e1cc4a",
        "file": [
            {
                "sha": "bb273b6b7568cfd3f9d99ce687966bf145778d6b",
                "filename": "src/java/org/apache/log4j/Hierarchy.java",
                "blob_url": "https://github.com/apache/log4j/blob/0e1cc4a10b28f3f119baded6b3f00683faf2a2de/src/java/org/apache/log4j/Hierarchy.java",
                "raw_url": "https://github.com/apache/log4j/raw/0e1cc4a10b28f3f119baded6b3f00683faf2a2de/src/java/org/apache/log4j/Hierarchy.java",
                "status": "modified",
                "changes": 10,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/Hierarchy.java?ref=0e1cc4a10b28f3f119baded6b3f00683faf2a2de",
                "patch": "@@ -32,6 +32,7 @@\n import org.apache.log4j.spi.LoggerRepositoryEx;\n import org.apache.log4j.spi.LoggerRepositoryEventListener;\n import org.apache.log4j.spi.RendererSupport;\n+import org.apache.log4j.spi.RootLogger;\n \n import java.util.ArrayList;\n import java.util.Enumeration;\n@@ -98,7 +99,7 @@\n   boolean pristine = true;\n \n   /**\n-     Create a new logger hierarchy.\n+     Constructs a new logger hierarchy.\n \n      @param root The root of the new hierarchy.\n \n@@ -118,6 +119,13 @@ public Hierarchy(Logger root) {\n     loggerFactory = new DefaultLoggerFactory();\n   }\n \n+  /**\n+   * Constructs a new logger hierarchy with a default {@link RootLogger}.\n+   */\n+  public Hierarchy() {\n+    this(new RootLogger());\n+  }\n+\n   /**\n      Add an object renderer for a specific class.\n    */",
                "deletions": 1
            },
            {
                "sha": "0d15efd9402dcc60cb6e269472b47e1eacc5b6a7",
                "filename": "src/java/org/apache/log4j/LogManager.java",
                "blob_url": "https://github.com/apache/log4j/blob/0e1cc4a10b28f3f119baded6b3f00683faf2a2de/src/java/org/apache/log4j/LogManager.java",
                "raw_url": "https://github.com/apache/log4j/raw/0e1cc4a10b28f3f119baded6b3f00683faf2a2de/src/java/org/apache/log4j/LogManager.java",
                "status": "modified",
                "changes": 22,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/LogManager.java?ref=0e1cc4a10b28f3f119baded6b3f00683faf2a2de",
                "patch": "@@ -209,16 +209,23 @@\n        within JBoss, then JBoss will install its own repository selector\n        and Tomcat will use the repository selector set by its container,\n        JBoss.  \n+       \n+       @param selector new selector, cannot be null\n+       @param guard new guard value, or existing guard, or null\n+       @throws IllegalArgumentException if a non-null guard is not the same as the old\n+       @throws IllegalArgumentException if the selector is null\n+       @throws IllegalArgumentException if {@link RepositorySelector#getLoggerRepository()} returns null \n     */\n-    public static void setRepositorySelector(\n-                                             RepositorySelector selector, Object guard) throws IllegalArgumentException {\n+    public static void setRepositorySelector(RepositorySelector selector, Object guard) {\n         if ((LogManager.guard != null) && (LogManager.guard != guard)) {\n-            throw new IllegalArgumentException(\n-                                               \"Attempted to reset the LoggerFactory without possessing the guard.\");\n+            throw new IllegalArgumentException(\"Attempted to reset the LoggerFactory without possessing the guard.\");\n         }\n         if (selector == null) {\n-            throw new IllegalArgumentException(\n-                                               \"RepositorySelector must be non-null.\");\n+            throw new IllegalArgumentException(\"RepositorySelector must be non-null.\");\n+        }\n+        if (selector.getLoggerRepository() == null) {\n+          String s = \"RepositorySelector.getLoggerRepository() must return non-null.\";\n+          throw new IllegalArgumentException(s);\n         }\n         \n         LogManager.guard = guard;\n@@ -236,6 +243,9 @@ public static RepositorySelector getRepositorySelector() {\n         return  LogManager.repositorySelector;\n     } \n     \n+    /**\n+     * Returns the logger repository currently in use.\n+     */\n     public static LoggerRepository getLoggerRepository() {\n         return repositorySelector.getLoggerRepository();\n     }",
                "deletions": 6
            },
            {
                "sha": "157098a066e45152802784e82d428ce6f74a7daf",
                "filename": "src/java/org/apache/log4j/spi/DefaultRepositorySelector.java",
                "blob_url": "https://github.com/apache/log4j/blob/0e1cc4a10b28f3f119baded6b3f00683faf2a2de/src/java/org/apache/log4j/spi/DefaultRepositorySelector.java",
                "raw_url": "https://github.com/apache/log4j/raw/0e1cc4a10b28f3f119baded6b3f00683faf2a2de/src/java/org/apache/log4j/spi/DefaultRepositorySelector.java",
                "status": "modified",
                "changes": 17,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/spi/DefaultRepositorySelector.java?ref=0e1cc4a10b28f3f119baded6b3f00683faf2a2de",
                "patch": "@@ -16,16 +16,25 @@\n \n package org.apache.log4j.spi;\n \n-import org.apache.log4j.helpers.Constants;\n-\n+/**\n+ * Trivial implementation of RepositorySelectorEx which takes\n+ * a fixed repository.\n+ */\n public class DefaultRepositorySelector implements RepositorySelectorEx {\n-  LoggerRepository defaultRepository;\n+  \n+  private LoggerRepository defaultRepository;\n \n+  /**\n+   * Constructs a new instance.\n+   * @param repository cannot be null\n+   */\n   public DefaultRepositorySelector(final LoggerRepository repository) {\n+    if (repository == null)\n+      throw new NullPointerException();\n     this.defaultRepository = repository;\n   }\n \n-  public LoggerRepository  getLoggerRepository() {\n+  public LoggerRepository getLoggerRepository() {\n     return defaultRepository;\n   }\n   ",
                "deletions": 4
            },
            {
                "sha": "1215dcb04f1ece5a7d674559f65ddabebeece2be",
                "filename": "src/java/org/apache/log4j/spi/RootLogger.java",
                "blob_url": "https://github.com/apache/log4j/blob/0e1cc4a10b28f3f119baded6b3f00683faf2a2de/src/java/org/apache/log4j/spi/RootLogger.java",
                "raw_url": "https://github.com/apache/log4j/raw/0e1cc4a10b28f3f119baded6b3f00683faf2a2de/src/java/org/apache/log4j/spi/RootLogger.java",
                "status": "modified",
                "changes": 13,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/spi/RootLogger.java?ref=0e1cc4a10b28f3f119baded6b3f00683faf2a2de",
                "patch": "@@ -35,15 +35,24 @@\n \n  */\n public final class RootLogger extends Logger {\n+  \n   /**\n-     The root category names itself as \"root\". However, the root\n-     category cannot be retrieved by name.\n+   * Constructs using a level.\n+   * The root category names itself as \"root\". However, the root\n+   * category cannot be retrieved by name.\n   */\n   public RootLogger(Level level) {\n     super(\"root\");\n     setLevel(level);\n   }\n \n+  /**\n+   * Constructs using a default {@link Level#DEBUG} threshold level.\n+   */\n+  public RootLogger() {\n+    this(Level.DEBUG);\n+  }\n+\n   /**\n      Return the assigned level value without walking the category\n      hierarchy.",
                "deletions": 2
            },
            {
                "sha": "c1dfacd79e0d047a927983e41e7aa9266c6ca804",
                "filename": "tests/src/java/org/apache/log4j/LogManagerTest.java",
                "blob_url": "https://github.com/apache/log4j/blob/0e1cc4a10b28f3f119baded6b3f00683faf2a2de/tests/src/java/org/apache/log4j/LogManagerTest.java",
                "raw_url": "https://github.com/apache/log4j/raw/0e1cc4a10b28f3f119baded6b3f00683faf2a2de/tests/src/java/org/apache/log4j/LogManagerTest.java",
                "status": "modified",
                "changes": 42,
                "additions": 40,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/tests/src/java/org/apache/log4j/LogManagerTest.java?ref=0e1cc4a10b28f3f119baded6b3f00683faf2a2de",
                "patch": "@@ -16,15 +16,24 @@\n \n package org.apache.log4j;\n \n+import org.apache.log4j.spi.DefaultRepositorySelector;\n+import org.apache.log4j.spi.LoggerRepository;\n+import org.apache.log4j.spi.RepositorySelector;\n+\n import junit.framework.TestCase;\n \n \n /**\n- *    Tests for LogManager\n+ * Tests for {@link LogManager}.\n  *\n  * @author Curt Arnold\n- **/\n+ */\n public class LogManagerTest extends TestCase {\n+\n+  private static final Object sharedGuard = new Object();\n+\n+  private Hierarchy h = new Hierarchy();\n+  \n   /**\n    * Create new instance of LogManagerTest.\n    * @param testName test name\n@@ -72,4 +81,33 @@ public void testConfiguratorClassKey() {\n   public void testDefaultInitOverrideKey() {\n      assertEquals(\"log4j.defaultInitOverride\", LogManager.DEFAULT_INIT_OVERRIDE_KEY);\n   }\n+  \n+  public void testValidSelector() {\n+    RepositorySelector selector = new DefaultRepositorySelector(h);\n+    LogManager.setRepositorySelector(selector, sharedGuard);\n+    Logger log = Logger.getLogger(\"TestValidSelector\");\n+    log.info(\"Logger obtained\");\n+    \n+    try {\n+      LogManager.setRepositorySelector(selector, \"joe\");\n+      fail(\"cannot cheat guard\");\n+    } catch (IllegalArgumentException e) {}\n+  }\n+\n+  public void testInvalidSelector() {\n+    try {\n+      RepositorySelector selector = new RepositorySelector() {\n+\n+        public LoggerRepository getLoggerRepository() {\n+          return null;\n+        }\n+        \n+      };\n+      LogManager.setRepositorySelector(selector, sharedGuard);\n+      Logger.getLogger(\"TestInvalidSelector\");      \n+      fail(\"Invalid repository selector should have generated IllegalArgumentException\");\n+    } catch (IllegalArgumentException iae) {\n+    }\n+  }\n+\n }",
                "deletions": 2
            }
        ],
        "patched_files": [
            "RootLogger.java",
            "LogManager.java",
            "Hierarchy.java",
            "DefaultRepositorySelector.java"
        ],
        "unit_tests": [
            "LogManagerTest.java"
        ]
    }
}