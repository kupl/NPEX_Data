{
    "maven-pmd-plugin_6c1f0a2": {
        "bug_id": "maven-pmd-plugin_6c1f0a2",
        "commit": "https://github.com/apache/maven-pmd-plugin/commit/6c1f0a25d5af6a403b4e851c18caf5d084c4a3d9",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/maven-pmd-plugin/blob/6c1f0a25d5af6a403b4e851c18caf5d084c4a3d9/src/main/java/org/apache/maven/plugins/pmd/PmdReport.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/maven-pmd-plugin/contents/src/main/java/org/apache/maven/plugins/pmd/PmdReport.java?ref=6c1f0a25d5af6a403b4e851c18caf5d084c4a3d9",
                "deletions": 1,
                "filename": "src/main/java/org/apache/maven/plugins/pmd/PmdReport.java",
                "patch": "@@ -769,7 +769,9 @@ private void configureTypeResolution( PMDConfiguration configuration ) throws Ma\n                         for ( String path : projectCompileClasspath )\n                         {\n                             File pathFile = new File( path );\n-                            if ( !pathFile.exists() || pathFile.list().length == 0 )\n+                            String[] children = pathFile.list();\n+\n+                            if ( !pathFile.exists() || ( children != null && children.length == 0 ) )\n                             {\n                                 getLog().warn( \"The project \" + localProject.getArtifactId()\n                                     + \" does not seem to be compiled. PMD results might be inaccurate.\" );",
                "raw_url": "https://github.com/apache/maven-pmd-plugin/raw/6c1f0a25d5af6a403b4e851c18caf5d084c4a3d9/src/main/java/org/apache/maven/plugins/pmd/PmdReport.java",
                "sha": "b3c513538c8ecb97f61ee25fd32379c92af376de",
                "status": "modified"
            }
        ],
        "message": "[MPMD-288] - NullPointerException when File.list() returns null\n\nCloses #11\n\nFixed NullPointerException\nthis line throws NPE when file.list is null\nhttps://docs.oracle.com/javase/8/docs/api/java/io/File.html#list--\nFor me this occurs on jar files like `~/.m2/repository/org/apache/logging/log4j/log4j-api/2.11.1/log4j-api-2.11.1.jar`\n\nContributed by: Wil Carmon",
        "parent": "https://github.com/apache/maven-pmd-plugin/commit/e79d6fc25c6b87ada698551e75c70fe9ada3adf9",
        "patched_files": [
            "PmdReport.java"
        ],
        "repo": "maven-pmd-plugin",
        "unit_tests": [
            "PmdReportTest.java"
        ]
    },
    "maven-pmd-plugin_7b8f288": {
        "bug_id": "maven-pmd-plugin_7b8f288",
        "commit": "https://github.com/apache/maven-pmd-plugin/commit/7b8f28809f1688f9bca52b441a765e485581f280",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/maven-pmd-plugin/blob/7b8f28809f1688f9bca52b441a765e485581f280/src/main/java/org/apache/maven/plugin/pmd/PmdReport.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/maven-pmd-plugin/contents/src/main/java/org/apache/maven/plugin/pmd/PmdReport.java?ref=7b8f28809f1688f9bca52b441a765e485581f280",
                "deletions": 2,
                "filename": "src/main/java/org/apache/maven/plugin/pmd/PmdReport.java",
                "patch": "@@ -203,7 +203,7 @@ private Report generateReport( Locale locale )\n         Sink sink = getSink();\n \n         PMDConfiguration pmdConfiguration = getPMDConfiguration();\n-        final PmdReportListener reportSink = new PmdReportListener( sink, getBundle( locale ), aggregate );\n+        final PmdReportListener reportSink = new PmdReportListener( getLog(), sink, getBundle( locale ), aggregate );\n         RuleContext ruleContext = new RuleContext()\n         {\n             @Override\n@@ -272,7 +272,7 @@ public void setReport( Report report )\n         List<DataSource> dataSources = new ArrayList<DataSource>( files.size() );\n         for ( File f : files.keySet() )\n         {\n-            dataSources.add( new FileDataSource( f ) );\n+            dataSources.add( new FileDataSource( f.getAbsoluteFile() ) );\n         }\n \n         try",
                "raw_url": "https://github.com/apache/maven-pmd-plugin/raw/7b8f28809f1688f9bca52b441a765e485581f280/src/main/java/org/apache/maven/plugin/pmd/PmdReport.java",
                "sha": "370b2d9e9603cf16aeeef9bbccb3f8d098a5b7a2",
                "status": "modified"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/maven-pmd-plugin/blob/7b8f28809f1688f9bca52b441a765e485581f280/src/main/java/org/apache/maven/plugin/pmd/PmdReportListener.java",
                "changes": 58,
                "contents_url": "https://api.github.com/repos/apache/maven-pmd-plugin/contents/src/main/java/org/apache/maven/plugin/pmd/PmdReportListener.java?ref=7b8f28809f1688f9bca52b441a765e485581f280",
                "deletions": 26,
                "filename": "src/main/java/org/apache/maven/plugin/pmd/PmdReportListener.java",
                "patch": "@@ -19,21 +19,22 @@\n  * under the License.\n  */\n \n-import net.sourceforge.pmd.ReportListener;\n-import net.sourceforge.pmd.RuleViolation;\n-import net.sourceforge.pmd.stat.Metric;\n-import org.apache.maven.doxia.sink.Sink;\n-import org.codehaus.plexus.util.StringUtils;\n-\n import java.io.File;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Comparator;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.ResourceBundle;\n \n+import net.sourceforge.pmd.ReportListener;\n+import net.sourceforge.pmd.RuleViolation;\n+import net.sourceforge.pmd.stat.Metric;\n+\n+import org.apache.maven.doxia.sink.Sink;\n+import org.apache.maven.plugin.logging.Log;\n+import org.codehaus.plexus.util.StringUtils;\n+\n /**\n  * Handle events from PMD, converting them into Doxia events.\n  *\n@@ -43,14 +44,14 @@\n public class PmdReportListener\n     implements ReportListener\n {\n+    private Log log;\n+\n     private Sink sink;\n \n     private String currentFilename;\n \n     private ResourceBundle bundle;\n \n-    private PmdFileInfo fileInfo;\n-\n     private List<RuleViolation> violations = new ArrayList<RuleViolation>();\n \n     private boolean aggregate;\n@@ -62,8 +63,9 @@\n \n //    private List<Metric> metrics = new ArrayList<Metric>();\n \n-    public PmdReportListener( Sink sink, ResourceBundle bundle, boolean aggregate )\n+    public PmdReportListener(Log log, Sink sink, ResourceBundle bundle, boolean aggregate )\n     {\n+        this.log = log;\n         this.sink = sink;\n         this.bundle = bundle;\n         this.aggregate = aggregate;\n@@ -93,14 +95,20 @@ private void startFileSection( String currentFilename, PmdFileInfo fileInfo )\n         sink.sectionTitle2();\n \n         // prepare the filename\n-        this.currentFilename =\n-            StringUtils.substring( currentFilename, fileInfo.getSourceDirectory().getAbsolutePath().length() + 1 );\n+        this.currentFilename = currentFilename;\n+        if ( fileInfo != null && fileInfo.getSourceDirectory() != null ) {\n+            this.currentFilename =\n+                    StringUtils.substring( currentFilename, fileInfo.getSourceDirectory().getAbsolutePath().length() + 1 );\n+        } else {\n+            log.warn( \"Unfortunately there was no PmdFileInfo available or the SourceDirectory is not known for \"\n+                    + \" file \" + currentFilename );\n+        }\n         this.currentFilename = StringUtils.replace( this.currentFilename, \"\\\\\", \"/\" );\n \n         String title = this.currentFilename;\n         if ( aggregate )\n         {\n-            title = fileInfo.getProject().getName() + \" - \" + currentFilename;\n+            title = fileInfo.getProject().getName() + \" - \" + this.currentFilename;\n         }\n         sink.text( title );\n         sink.sectionTitle2_();\n@@ -122,7 +130,7 @@ private void endFileSection()\n         sink.section2_();\n     }\n \n-    private void processSingleRuleViolation( RuleViolation ruleViolation )\n+    private void processSingleRuleViolation( RuleViolation ruleViolation, PmdFileInfo fileInfo )\n     {\n         sink.tableRow();\n         sink.tableCell();\n@@ -131,12 +139,12 @@ private void processSingleRuleViolation( RuleViolation ruleViolation )\n         sink.tableCell();\n \n         int beginLine = ruleViolation.getBeginLine();\n-        outputLineLink( beginLine );\n+        outputLineLink( beginLine, fileInfo );\n         int endLine = ruleViolation.getEndLine();\n         if ( endLine != beginLine )\n         {\n             sink.text( \" - \" );\n-            outputLineLink( endLine );\n+            outputLineLink( endLine, fileInfo );\n         }\n \n         sink.tableCell_();\n@@ -166,30 +174,24 @@ public int compare( RuleViolation o1, RuleViolation o2 )\n             }\n         } );\n \n-        Map<String, PmdFileInfo> fileLookup = new HashMap<String, PmdFileInfo>( fileCount );\n-        for ( Map.Entry<File, PmdFileInfo> entry : files.entrySet() )\n-        {\n-            fileLookup.put( entry.getKey().getAbsolutePath(), entry.getValue() );\n-        }\n-\n         boolean fileSectionStarted = false;\n         String previousFilename = null;\n         for ( RuleViolation ruleViolation : violations )\n         {\n             String currentFn = ruleViolation.getFilename();\n+            PmdFileInfo fileInfo = files.get( new File ( currentFn ) );\n             if ( !currentFn.equalsIgnoreCase( previousFilename ) && fileSectionStarted )\n             {\n                 endFileSection();\n                 fileSectionStarted = false;\n             }\n             if ( !fileSectionStarted )\n             {\n-                fileInfo = fileLookup.get( currentFn );\n                 startFileSection( currentFn, fileInfo );\n                 fileSectionStarted = true;\n             }\n \n-            processSingleRuleViolation( ruleViolation );\n+            processSingleRuleViolation( ruleViolation, fileInfo );\n \n             previousFilename = currentFn;\n         }\n@@ -200,9 +202,13 @@ public int compare( RuleViolation o1, RuleViolation o2 )\n         }\n     }\n \n-    private void outputLineLink( int line )\n+    private void outputLineLink( int line, PmdFileInfo fileInfo )\n     {\n-        String xrefLocation = fileInfo.getXrefLocation();\n+        String xrefLocation = null;\n+        if ( fileInfo != null ) {\n+            xrefLocation = fileInfo.getXrefLocation();\n+        }\n+\n         if ( xrefLocation != null )\n         {\n             sink.link( xrefLocation + \"/\" + currentFilename.replaceAll( \"\\\\.java$\", \".html\" ) + \"#\" + line );",
                "raw_url": "https://github.com/apache/maven-pmd-plugin/raw/7b8f28809f1688f9bca52b441a765e485581f280/src/main/java/org/apache/maven/plugin/pmd/PmdReportListener.java",
                "sha": "21ca69c98a7dab93e17aec16ed906dcfddfeac09",
                "status": "modified"
            }
        ],
        "message": "[MPMD-149] Fix Potential NPE in PmdReportListener\nSubmitted by Andreas Dangel.\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1342953 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/maven-pmd-plugin/commit/9c9fb8d50bb273d68938b9f7b2ecbc84111ac830",
        "patched_files": [
            "PmdReport.java"
        ],
        "repo": "maven-pmd-plugin",
        "unit_tests": [
            "PmdReportTest.java"
        ]
    }
}