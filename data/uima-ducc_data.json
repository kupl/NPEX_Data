[{"commit": "https://github.com/apache/uima-ducc/commit/4d7616bdb305205cf6392e4c0ecdda360ccfb187", "parent": "https://github.com/apache/uima-ducc/commit/884fd33c2819c1e63aa2995e589d87541bbf99e9", "message": "UIMA-6080 DUCC Job Driver (JD) NPE doing status exchange with Orchestrator (OR)\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/uima-ducc/trunk@1862012 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_1", "file": [{"additions": 27, "raw_url": "https://github.com/apache/uima-ducc/raw/4d7616bdb305205cf6392e4c0ecdda360ccfb187/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configuration/jd/JobDriverStateExchanger.java", "blob_url": "https://github.com/apache/uima-ducc/blob/4d7616bdb305205cf6392e4c0ecdda360ccfb187/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configuration/jd/JobDriverStateExchanger.java", "sha": "46d7e05f410c9a82f7a28e92851863e8ca1c6503", "changes": 46, "status": "modified", "deletions": 19, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configuration/jd/JobDriverStateExchanger.java?ref=4d7616bdb305205cf6392e4c0ecdda360ccfb187", "patch": "@@ -180,24 +180,17 @@ private JdRequestEvent getJdRequestEvent() {\n \t\n \tprivate void abortIfTold(JdReplyEvent jdReplyEvent) {\n \t\tString location = \"abortIfTold\";\n-\t\tif(jdReplyEvent != null) {\n-\t\t\tif(jdReplyEvent.isDuccHeadMaster()) {\n-\t\t\t\tString killDriverReason = jdReplyEvent.getKillDriverReason();\n-\t\t\t\tif(killDriverReason != null) {\n-\t\t\t\t\tint code = 255;\n-\t\t\t\t\tStringBuffer sb = new StringBuffer();\n-\t\t\t\t\tsb.append(\"System Exit\");\n-\t\t\t\t\tsb.append(\" \");\n-\t\t\t\t\tsb.append(\"code=\"+code);\n-\t\t\t\t\tsb.append(\" \");\n-\t\t\t\t\tsb.append(\"reason=\"+killDriverReason);\n-\t\t\t\t\tlogger.warn(location, jobid, sb.toString());\n-\t\t\t\t\tSystem.exit(code);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tlogger.warn(location, jobid, \"not master\");\n-\t\t\t}\n+\t\tString killDriverReason = jdReplyEvent.getKillDriverReason();\n+\t\tif(killDriverReason != null) {\n+\t\t\tint code = 255;\n+\t\t\tStringBuffer sb = new StringBuffer();\n+\t\t\tsb.append(\"System Exit\");\n+\t\t\tsb.append(\" \");\n+\t\t\tsb.append(\"code=\"+code);\n+\t\t\tsb.append(\" \");\n+\t\t\tsb.append(\"reason=\"+killDriverReason);\n+\t\t\tlogger.warn(location, jobid, sb.toString());\n+\t\t\tSystem.exit(code);\n \t\t}\n \t}\n \t\n@@ -316,7 +309,22 @@ private void exchange() {\n \t\ttry {\n \t\t\tJdRequestEvent jdRequestEvent = getJdRequestEvent();\n \t\t\tJdReplyEvent jdReplyEvent = request(jdRequestEvent);\n-\t\t\thandle(jdReplyEvent);\n+\t\t\tif(jdReplyEvent != null) {\n+\t\t\t\tif(jdReplyEvent.isDuccHeadMaster()) {\n+\t\t\t\t\tif(jdReplyEvent.getProcessMap() != null) {\n+\t\t\t\t\t\thandle(jdReplyEvent);\n+\t\t\t\t\t}\n+\t\t\t\t\telse {\n+\t\t\t\t\t\tlogger.warn(location, jobid, \"no map\");\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tlogger.warn(location, jobid, \"not master\");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tlogger.warn(location, jobid, \"null reply\");\n+\t\t\t}\n \t\t\tif(!communications_ok) {\n \t\t\t\tlogger.warn(location, jobid, \"Status reporting resumed.\");\n \t\t\t\tcommunications_ok = true;", "filename": "uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configuration/jd/JobDriverStateExchanger.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/966cd725117c3353b74234eb382623aa81b4c484", "parent": "https://github.com/apache/uima-ducc/commit/1a783c88ba8ed25384171475cc48426ab46c8b10", "message": "UIMA-5973 guard against NPE in call() when service is stopping\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/uima-ducc/trunk@1852550 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_2", "file": [{"additions": 9, "raw_url": "https://github.com/apache/uima-ducc/raw/966cd725117c3353b74234eb382623aa81b4c484/uima-ducc-pullservice/src/main/java/org/apache/uima/ducc/ps/service/protocol/builtin/DefaultServiceProtocolHandler.java", "blob_url": "https://github.com/apache/uima-ducc/blob/966cd725117c3353b74234eb382623aa81b4c484/uima-ducc-pullservice/src/main/java/org/apache/uima/ducc/ps/service/protocol/builtin/DefaultServiceProtocolHandler.java", "sha": "d60712e3907b68137057bd367c6394ab201401ac", "changes": 10, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-pullservice/src/main/java/org/apache/uima/ducc/ps/service/protocol/builtin/DefaultServiceProtocolHandler.java?ref=966cd725117c3353b74234eb382623aa81b4c484", "patch": "@@ -261,7 +261,15 @@ public String call() throws ServiceInitializationException, ServiceException {\n \t\t\t\t\tbreak;\n \t\t\t\t}\n \t\t\t\tlogger.log(Level.INFO, \".............. Thread \"+Thread.currentThread().getId() + \" processing new task\");\n-                \n+\t\t\t\tif ( Objects.isNull(transaction.getMetaTask()) ) {\n+\t\t\t\t\t// this should only be the case when the service is stopping and transport is shutdown\n+\t\t\t\t    if ( running ) {\n+\t\t\t\t    \tlogger.log(Level.INFO, \".............. Thread \"+Thread.currentThread().getId() + \" GET returned null MetaTask while service is in a running state - this is unexpected\");\n+\t\t\t\t    }\n+\t\t\t\t    // if !running, the while loop above will terminate\n+\t\t\t\t    continue;\n+\t\t\t\t}\n+\n \t\t\t\tObject task = transaction.getMetaTask().getUserSpaceTask();\n \t\t\t\t\n \t\t\t\t// send ACK ", "filename": "uima-ducc-pullservice/src/main/java/org/apache/uima/ducc/ps/service/protocol/builtin/DefaultServiceProtocolHandler.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/f9cbc1db0d606559034aa0395e06972b2132cae6", "parent": "https://github.com/apache/uima-ducc/commit/ad197e56b92a0ed54506bf792005230ec05b7410", "message": "UIMA-5860 DUCC Orchestrator (OR) NullPointerException (NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/uima-ducc/trunk@1839370 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_3", "file": [{"additions": 9, "raw_url": "https://github.com/apache/uima-ducc/raw/f9cbc1db0d606559034aa0395e06972b2132cae6/uima-ducc-orchestrator/src/main/java/org/apache/uima/ducc/orchestrator/OrchestratorComponent.java", "blob_url": "https://github.com/apache/uima-ducc/blob/f9cbc1db0d606559034aa0395e06972b2132cae6/uima-ducc-orchestrator/src/main/java/org/apache/uima/ducc/orchestrator/OrchestratorComponent.java", "sha": "f5df361e8542347fc12eab6101334600383ca242", "changes": 10, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-orchestrator/src/main/java/org/apache/uima/ducc/orchestrator/OrchestratorComponent.java?ref=f9cbc1db0d606559034aa0395e06972b2132cae6", "patch": "@@ -657,6 +657,7 @@ public void reconcileAgentProcessLifecycleReport(AgentProcessLifecycleReportDucc\n \t\tIDuccProcess process = duccEvent.getProcess();\n \t\tDuccId processDuccId = getProcessDuccId(duccEvent);\n \t\tlogger.debug(location, processDuccId, \"process\");\n+\t\tDuccId dwId = OrchestratorCommonArea.getInstance().getProcessAccounting().getJobId(processDuccId);\n \t\tif(process == null) {\n \t\t\tsb.append(\"process:\"+process+\" \");\n \t\t\tsb.append(\"node:\"+node+\" \");\n@@ -688,9 +689,16 @@ else if(processType == null) {\n \t\t\tsb.append(\"processType:\"+processType+\" \");\n \t\t\tlogger.error(location, jobid, sb.toString());\n \t\t}\n+\t\telse if(dwId == null) {\n+\t\t\tsb.append(\"id:\"+id+\" \");\n+\t\t\tsb.append(\"node:\"+node+\" \");\n+\t\t\tsb.append(\"lifefcycleEvent:\"+lifecycleEvent.name()+\" \");\n+\t\t\tsb.append(\"processType:\"+processType+\" \");\n+\t\t\tsb.append(\"dwId:\"+dwId+\" \");\n+\t\t\tlogger.error(location, jobid, sb.toString());\n+\t\t}\n \t\telse {\n \t\t\tDuccWorkMap workMap = orchestratorCommonArea.getWorkMap();\n-\t\t\tDuccId dwId = OrchestratorCommonArea.getInstance().getProcessAccounting().getJobId(processDuccId);\n \t\t\tIDuccWork dw = workMap.findDuccWork(dwId);\n \t\t\tDuccType dwType = dw.getDuccType();\n \t\t\tsb.append(\"dwId:\"+dwId+\" \");", "filename": "uima-ducc-orchestrator/src/main/java/org/apache/uima/ducc/orchestrator/OrchestratorComponent.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/665beb581ed834a2d35acbef83a382f84ba722dc", "parent": "https://github.com/apache/uima-ducc/commit/61f94ac54164dc8f527c2b3f9cbaac1c934eed7b", "message": "UIMA-5756 fixed NPE caused by a previous change. \n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/uima-ducc/trunk@1831205 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_4", "file": [{"additions": 0, "raw_url": "https://github.com/apache/uima-ducc/raw/665beb581ed834a2d35acbef83a382f84ba722dc/uima-ducc-pullservice/src/main/java/org/apache/uima/ducc/ps/service/transport/http/HttpServiceTransport.java", "blob_url": "https://github.com/apache/uima-ducc/blob/665beb581ed834a2d35acbef83a382f84ba722dc/uima-ducc-pullservice/src/main/java/org/apache/uima/ducc/ps/service/transport/http/HttpServiceTransport.java", "sha": "9cc90148bb374b3658fb4776e98d50f58e38035b", "changes": 3, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-pullservice/src/main/java/org/apache/uima/ducc/ps/service/transport/http/HttpServiceTransport.java?ref=665beb581ed834a2d35acbef83a382f84ba722dc", "patch": "@@ -226,9 +226,6 @@ public void initialize() throws ServiceInitializationException {\n     //    \t\tsetDefaultRequestConfig(requestConfig).build();\n         \n \t\thttpClient = HttpClients.custom().setConnectionManager(cMgr).build();\n-\t\tif ( logger.isLoggable(Level.INFO)) {\n-\t\t\tlogger.log(Level.INFO,\"Cmgr SoTimeout=\"+cMgr.getDefaultSocketConfig().getSoTimeout());\n-\t\t}\n \t\trunning = true;\n \n \t}", "filename": "uima-ducc-pullservice/src/main/java/org/apache/uima/ducc/ps/service/transport/http/HttpServiceTransport.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/0a07ba9cb4ecd151b006d46fcead1359df9b5638", "parent": "https://github.com/apache/uima-ducc/commit/a811ebe33733c5ff446407014f64376e05f5076e", "message": "UIMA-5684 DUCC Web Server (WS) NPE when request for non-existant job details arrives\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/uima-ducc/trunk@1819724 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_5", "file": [{"additions": 8, "raw_url": "https://github.com/apache/uima-ducc/raw/0a07ba9cb4ecd151b006d46fcead1359df9b5638/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandler.java", "blob_url": "https://github.com/apache/uima-ducc/blob/0a07ba9cb4ecd151b006d46fcead1359df9b5638/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandler.java", "sha": "3d58b5935fea0a18bc85a9e566dad53e0bc09d83", "changes": 14, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandler.java?ref=0a07ba9cb4ecd151b006d46fcead1359df9b5638", "patch": "@@ -1737,13 +1737,15 @@ private void handleDuccServletJobSpecificationData(String target,Request baseReq\n \t\tString methodName = \"handleDuccServletJobSpecificationData\";\n \t\tduccLogger.trace(methodName, null, messages.fetch(\"enter\"));\n \t\tString jobNo = request.getParameter(\"id\");\n-\t\tDuccWorkJob dwj = getJob(jobNo);\n-\t\tString resOwner = dwj.getStandardInfo().getUser();\n-\t\tEffectiveUser eu = EffectiveUser.create(request);\n-\t\tString reqUser = eu.get();\n \t\tMap<String,Properties> map = null;\n-\t\tif(HandlersHelper.isResourceAuthorized(resOwner, reqUser)) {\n-\t\t\tmap = helperSpecifications.getJobSpecificationProperties(dwj, eu);\n+\t\tDuccWorkJob dwj = getJob(jobNo);\n+\t\tif(dwj != null) {\n+\t\t\tString resOwner = dwj.getStandardInfo().getUser();\n+\t\t\tEffectiveUser eu = EffectiveUser.create(request);\n+\t\t\tString reqUser = eu.get();\n+\t\t\tif(HandlersHelper.isResourceAuthorized(resOwner, reqUser)) {\n+\t\t\t\tmap = helperSpecifications.getJobSpecificationProperties(dwj, eu);\n+\t\t\t}\n \t\t}\n \t\tif(map != null) {\n \t\t\tProperties propertiesUser = map.get(PType.user.name());", "filename": "uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandler.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/b200bb1fdc19c7ab9908d00fcccd8c9527e4d38b", "parent": "https://github.com/apache/uima-ducc/commit/ebecb022fb9b156ffa274bdb1cb4b97e0d08e747", "message": "UIMA-5537 fixed NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/uima-ducc/trunk@1805319 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_6", "file": [{"additions": 10, "raw_url": "https://github.com/apache/uima-ducc/raw/b200bb1fdc19c7ab9908d00fcccd8c9527e4d38b/uima-ducc-agent/src/main/java/org/apache/uima/ducc/agent/processors/DefaultNodeInventoryProcessor.java", "blob_url": "https://github.com/apache/uima-ducc/blob/b200bb1fdc19c7ab9908d00fcccd8c9527e4d38b/uima-ducc-agent/src/main/java/org/apache/uima/ducc/agent/processors/DefaultNodeInventoryProcessor.java", "sha": "20c36c9651d13203e5733311684c5ee991576360", "changes": 15, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-agent/src/main/java/org/apache/uima/ducc/agent/processors/DefaultNodeInventoryProcessor.java?ref=b200bb1fdc19c7ab9908d00fcccd8c9527e4d38b", "patch": "@@ -213,22 +213,27 @@ public void process(Exchange outgoingMessage) throws Exception {\n \t\t\t\t\tint pipelineInitStats = (p.getValue()\n \t\t\t\t\t\t\t.getUimaPipelineComponents() == null) ? 0 : p\n \t\t\t\t\t\t\t.getValue().getUimaPipelineComponents().size();\n+\t\t\t\t\tStringBuffer gcInfo = new StringBuffer();\n+\t\t\t\t\tif (p.getValue().getGarbageCollectionStats() != null ) {\n+\t\t\t\t\t\tgcInfo.append(\" GC Total=\")\n+\t\t\t\t\t\t\t\t.append(p.getValue().getGarbageCollectionStats().getCollectionCount())\n+\t\t\t\t\t\t\t\t.append(\" GC Time=\")\n+\t\t\t\t\t\t\t\t.append(p.getValue().getGarbageCollectionStats().getCollectionTime())\n+\t\t\t\t\t\t\t\t.append(\" \");\n \n+\n+\t\t\t\t\t}\n \t\t\t\t\tsb.append(\"\\n\\t[Process Type=\")\n \t\t\t\t\t\t\t.append(p.getValue().getProcessType())\n \t\t\t\t\t\t\t.append(\" DUCC ID=\")\n \t\t\t\t\t\t\t.append(p.getValue().getDuccId())\n \t\t\t\t\t\t\t.append(\" PID=\")\n \t\t\t\t\t\t\t.append(p.getValue().getPID())\n \t\t\t\t\t\t\t.append(\" State=\")\n-\t\t\t\t\t\t\t.append(\" GC Total=\")\n-\t\t\t\t\t\t\t.append(p.getValue().getGarbageCollectionStats().getCollectionCount())\n-\t\t\t\t\t\t\t.append(\" GC Time=\")\n-\t\t\t\t\t\t\t.append(p.getValue().getGarbageCollectionStats().getCollectionTime())\n-\n \t\t\t\t\t\t\t.append(p.getValue().getProcessState())\n \t\t\t\t\t\t\t.append(\" Resident Memory=\")\n \t\t\t\t\t\t\t.append(p.getValue().getResidentMemory())\n+\t\t\t\t\t\t\t.append(gcInfo.toString())\n \t\t\t\t\t\t\t.append(\" Init Stats List Size:\"\n \t\t\t\t\t\t\t\t\t+ pipelineInitStats)\n \t\t\t\t\t\t\t.append(\" Reason: \"+p.getValue().getReasonForStoppingProcess())\t\t", "filename": "uima-ducc-agent/src/main/java/org/apache/uima/ducc/agent/processors/DefaultNodeInventoryProcessor.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/362164d9c0ad475b5ed2ab5162be9830499c4e81", "parent": "https://github.com/apache/uima-ducc/commit/3f1aeb1ffed89c7e2a0104b1a6aef368b6cbf7bd", "message": "UIMA-5522 DUCC Web Server (WS) NPE handling JobSpecificationData requests\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/uima-ducc/trunk@1803653 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_7", "file": [{"additions": 18, "raw_url": "https://github.com/apache/uima-ducc/raw/362164d9c0ad475b5ed2ab5162be9830499c4e81/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandler.java", "blob_url": "https://github.com/apache/uima-ducc/blob/362164d9c0ad475b5ed2ab5162be9830499c4e81/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandler.java", "sha": "626a8daeb2d9266a45ceb7319603704dce0fe08d", "changes": 29, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandler.java?ref=362164d9c0ad475b5ed2ab5162be9830499c4e81", "patch": "@@ -2190,17 +2190,24 @@ private void handleDuccServletJobSpecificationData(String target,Request baseReq\n \t\tduccLogger.trace(methodName, null, messages.fetch(\"enter\"));\n \t\tString jobNo = request.getParameter(\"id\");\n \t\tDuccWorkJob work = getJob(jobNo);\n-\t\tEffectiveUser eu = EffectiveUser.create(request);\n-        String path = work.getUserLogDir() + DuccUiConstants.job_specification_properties;\n-        Properties usProperties;\n-        Properties properties;\n-        try {\n-            usProperties = DuccFile.getUserSpecifiedProperties(eu, work);\n-            properties = DuccFile.getProperties(eu, path);\n-        } catch (Throwable e) {\n-            throw new IOException(e);\n-        }\n-\t\tprocessSpecificationData(request, response, usProperties, properties, null);\n+\t\tif(work != null) {\n+\t\t\tEffectiveUser eu = EffectiveUser.create(request);\n+\t        String path = work.getUserLogDir() + DuccUiConstants.job_specification_properties;\n+\t        Properties usProperties;\n+\t        Properties properties;\n+\t        try {\n+\t            usProperties = DuccFile.getUserSpecifiedProperties(eu, work);\n+\t            properties = DuccFile.getProperties(eu, path);\n+\t        } catch (Throwable e) {\n+\t            throw new IOException(e);\n+\t        }\n+\t\t\tprocessSpecificationData(request, response, usProperties, properties, null);\n+\t\t}\n+\t\telse {\n+\t\t\tString msg = \"(data not found)\";\n+            response.getWriter().println(msg);\n+            duccLogger.warn(methodName, null, request.getParameter(\"id\") + \" failed: \" + msg);\n+\t\t}\n \t\tduccLogger.trace(methodName, null, messages.fetch(\"exit\"));\n \t}\n ", "filename": "uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandler.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/fb270df7f1e18092bf8b1446344c04a4263f979a", "parent": "https://github.com/apache/uima-ducc/commit/e433ecb13f6e8675324010288a9c0864382c73d8", "message": "UIMA-5048 Fixed NPE when launching Services\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/uima-ducc/trunk@1756533 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_8", "file": [{"additions": 5, "raw_url": "https://github.com/apache/uima-ducc/raw/fb270df7f1e18092bf8b1446344c04a4263f979a/uima-ducc-agent/src/main/java/org/apache/uima/ducc/agent/event/AgentEventListener.java", "blob_url": "https://github.com/apache/uima-ducc/blob/fb270df7f1e18092bf8b1446344c04a4263f979a/uima-ducc-agent/src/main/java/org/apache/uima/ducc/agent/event/AgentEventListener.java", "sha": "2a376f7b330332b931d5fc42f844ed0a87d6a0ad", "changes": 20, "status": "modified", "deletions": 15, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-agent/src/main/java/org/apache/uima/ducc/agent/event/AgentEventListener.java?ref=fb270df7f1e18092bf8b1446344c04a4263f979a", "patch": "@@ -135,32 +135,22 @@ public void onDuccJobsStateEvent(@Body DuccJobsStateEvent duccEvent) throws Exce\n \t\t\t\t\t//\tcheck if this node is a target for this job's JD \n \t\t\t\t\tif ( isTargetNodeForProcess(jobDeployment.getJdProcess()) ) {\n \t\t\t\t\t\t// agent will check the state of JD process and either start, stop, or take no action\n-//\t\t\t\t\t\tICommandLine jdCommandLine = jobDeployment.getJdCmdLine();\n \t\t\t\t\t\tagent.reconcileProcessStateAndTakeAction(lifecycleController, jobDeployment.getJdProcess(), jobDeployment.getJdCmdLine(), \n \t\t\t\t\t\t\t\tjobDeployment.getStandardInfo(), jobDeployment.getProcessMemoryAssignment(), jobDeployment.getJobId());\n-/*\t\t\t\t\t\t\n-\t\t\t\t\t\tif(jdCommandLine != null) {\n-\t\t\t\t\t\t\tagent.reconcileProcessStateAndTakeAction(lifecycleController, jobDeployment.getJdProcess(), jobDeployment.getJdCmdLine(), \n-\t\t\t\t\t\t\t\tjobDeployment.getStandardInfo(), jobDeployment.getProcessMemoryAssignment(), jobDeployment.getJobId());\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\telse {\n-\t\t\t\t\t\t\tlogger.error(\"onDuccJobsStateEvent\", null, \"job is service\");\n-\t\t\t\t\t\t}\n-*/\t\t\t\t\t\t\n \t\t\t\t\t} \n-\t\t\t\t\t// reconcile JP procees only if JD is OK\n-\t\t\t\t\tif ( !jobDeployment.getJdProcess().getProcessState().equals(ProcessState.Failed) )  {\n-\t\t\t\t\t\t// check JPs\n+\t\t\t\t\t// check JPs\n+\t\t\t\t\tif ( jobDeployment.getJpProcessList() != null ) {\n \t\t\t\t\t\tfor( IDuccProcess process : jobDeployment.getJpProcessList() ) {\n \t\t\t\t\t\t\tif ( isTargetNodeForProcess(process) ) {\n-\t\t\t          // agent will check the state of JP process and either start, stop, or take no action \n+\t\t\t\t          // agent will check the state of JP process and either start, stop, or take no action \n \t\t\t\t\t\t\t\tagent.reconcileProcessStateAndTakeAction(lifecycleController, process, jobDeployment.getJpCmdLine(), \n \t\t\t\t\t\t\t\t\t\tjobDeployment.getStandardInfo(), jobDeployment.getProcessMemoryAssignment(), jobDeployment.getJobId());\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlogger.error(\"onDuccJobsStateEvent\", jobDeployment.getJobId(), \"Procss List is NULL\");\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t  \n \t\t  }\n \t\t  // \treceived at least one Ducc State\n \t\t  if ( !agent.receivedDuccState ) {", "filename": "uima-ducc-agent/src/main/java/org/apache/uima/ducc/agent/event/AgentEventListener.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/07ec690919e2206849cfb429d0834508fa8e91a7", "parent": "https://github.com/apache/uima-ducc/commit/c66b79f080f7903255ca19c1c9ab9cea6d1acbff", "message": "UIMA-5289 DUCC Web Server (WS) NPE DuccHandler.java:1621\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/uima-ducc/trunk@1781272 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_9", "file": [{"additions": 16, "raw_url": "https://github.com/apache/uima-ducc/raw/07ec690919e2206849cfb429d0834508fa8e91a7/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandler.java", "blob_url": "https://github.com/apache/uima-ducc/blob/07ec690919e2206849cfb429d0834508fa8e91a7/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandler.java", "sha": "7573815ab77fb88a756b2fd7d8c2a0c7c5e42e37", "changes": 26, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandler.java?ref=07ec690919e2206849cfb429d0834508fa8e91a7", "patch": "@@ -1610,20 +1610,26 @@ private void handleDuccServletJobWorkitemsCountData(String target,Request baseRe\n \t}\n \t\n \tprivate IDuccWorkJob findJob(String jobno) {\n+\t\tString methodName = \"findJob\";\n \t\tIDuccWorkJob job = null;\n-\t\tIDuccWorkMap duccWorkMap = DuccData.getInstance().get();\n-\t\tif(duccWorkMap.getJobKeySet().size()> 0) {\n-\t\t\tIterator<DuccId> iterator = null;\n-\t\t\titerator = duccWorkMap.getJobKeySet().iterator();\n-\t\t\twhile(iterator.hasNext()) {\n-\t\t\t\tDuccId jobId = iterator.next();\n-\t\t\t\tString fid = \"\"+jobId.getFriendly();\n-\t\t\t\tif(jobno.equals(fid)) {\n-\t\t\t\t\tjob = (DuccWorkJob) duccWorkMap.findDuccWork(jobId);\n-\t\t\t\t\tbreak;\n+\t\ttry {\n+\t\t\tIDuccWorkMap duccWorkMap = DuccData.getInstance().get();\n+\t\t\tif(duccWorkMap.getJobKeySet().size()> 0) {\n+\t\t\t\tIterator<DuccId> iterator = null;\n+\t\t\t\titerator = duccWorkMap.getJobKeySet().iterator();\n+\t\t\t\twhile(iterator.hasNext()) {\n+\t\t\t\t\tDuccId jobId = iterator.next();\n+\t\t\t\t\tString fid = \"\"+jobId.getFriendly();\n+\t\t\t\t\tif(jobno.equals(fid)) {\n+\t\t\t\t\t\tjob = (DuccWorkJob) duccWorkMap.findDuccWork(jobId);\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}\n+\t\tcatch(Exception e) {\n+\t\t\tduccLogger.trace(methodName, null, \"jobno=\"+jobno, e);\n+\t\t}\n \t\treturn job;\n \t}\n \t", "filename": "uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandler.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/0d9d1fcc18a1529107d8d65a0469d96e507043b7", "parent": "https://github.com/apache/uima-ducc/commit/f546e0e6003f1a0e79e2835f84a8240e31ed05f1", "message": "UIMA-5182 Avoid NPEs and report when access denied to specification files\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/uima-ducc/trunk@1773235 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_10", "file": [{"additions": 3, "raw_url": "https://github.com/apache/uima-ducc/raw/0d9d1fcc18a1529107d8d65a0469d96e507043b7/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccFile.java", "blob_url": "https://github.com/apache/uima-ducc/blob/0d9d1fcc18a1529107d8d65a0469d96e507043b7/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccFile.java", "sha": "b741771d15b12226a937cc5ba01ccdd8604e5900", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccFile.java?ref=0d9d1fcc18a1529107d8d65a0469d96e507043b7", "patch": "@@ -31,6 +31,9 @@\n \n public class DuccFile {\n \t\n+    /*\n+     * Returns null if file is missing or inaccessible\n+     */\n \tpublic static Properties getUserSpecifiedProperties(EffectiveUser eu, IDuccWorkJob job) throws Throwable {\n \t\tString directory = job.getUserLogsDir()+job.getDuccId().getFriendly()+File.separator;\n \t\tString name = DuccUiConstants.user_specified_properties;", "filename": "uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccFile.java"}, {"additions": 13, "raw_url": "https://github.com/apache/uima-ducc/raw/0d9d1fcc18a1529107d8d65a0469d96e507043b7/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandler.java", "blob_url": "https://github.com/apache/uima-ducc/blob/0d9d1fcc18a1529107d8d65a0469d96e507043b7/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandler.java", "sha": "551179f93247e8f959c7b58787229e6462ab3ec9", "changes": 15, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandler.java?ref=0d9d1fcc18a1529107d8d65a0469d96e507043b7", "patch": "@@ -2040,6 +2040,7 @@ private void putJobSpecEntry(Properties properties, String provider, String key,\n \t\n \t/**\n \t * Format job & reservation & service specification files\n+\t * If no properties provided then the files may be inaccessible or missing\n \t * \n \t * @param request - servlet request\n \t * @param response - generated response\n@@ -2051,14 +2052,25 @@ private void putJobSpecEntry(Properties properties, String provider, String key,\n     private void processSpecificationData(HttpServletRequest request, HttpServletResponse response, \n             Properties usProperties, Properties properties, String buttonHint) throws IOException {\n         String methodName = \"ProcessSpecificationData\";\n+        if (usProperties == null || properties == null) {\n+            String msg = isAuthenticated(request, response) ? \"(data missing or unreadable)\" : \"(not visible - try logging in)\";\n+            response.getWriter().println(msg);\n+            duccLogger.warn(methodName, null, request.getParameter(\"id\") + \" failed: \" + msg);\n+            return;\n+        }\n         StringBuffer sb = new StringBuffer();\n         // Create a sorted list of all properties\n         TreeSet<String> list = new TreeSet<String>(properties.stringPropertyNames());\n         if (buttonHint != null) {\n             list.addAll(usProperties.stringPropertyNames());  // Include the service user values as well as the meta ones\n             // Move autostart to the user properties where it should have been all along\n             if (!usProperties.contains(\"autostart\")) {\n-                usProperties.put(\"autostart\", properties.remove(\"autostart\"));\n+                Object val = properties.remove(\"autostart\");   // Should never be null ??\n+                if (val != null) {\n+                    usProperties.put(\"autostart\", val);\n+                } else {\n+                    duccLogger.warn(methodName, null, \"Service \"+properties.getProperty(\"numeric_id\")+\" has no autostart setting?\");\n+                }\n             }\n         }\n         int i = 0;\n@@ -2111,7 +2123,6 @@ private void processSpecificationData(HttpServletRequest request, HttpServletRes\n         }\n \n         response.getWriter().println(sb);\n-        duccLogger.trace(methodName, null, messages.fetch(\"exit\"));\n     }\n \t\n \tprivate void handleDuccServletJobSpecificationData(String target,Request baseRequest,HttpServletRequest request,HttpServletResponse response) ", "filename": "uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandler.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/26f17bd4449eb3f80b40fc3798dcff90ec7fe173", "parent": "https://github.com/apache/uima-ducc/commit/72413a2c5d616593d8867709d43bd1a7e881a2a7", "message": "UIMA-5047 Fixed NPE when computing CPU Usage while a process state=Initializing\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/uima-ducc/trunk@1766707 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_11", "file": [{"additions": 9, "raw_url": "https://github.com/apache/uima-ducc/raw/26f17bd4449eb3f80b40fc3798dcff90ec7fe173/uima-ducc-agent/src/main/java/org/apache/uima/ducc/agent/processors/LinuxProcessMetricsProcessor.java", "blob_url": "https://github.com/apache/uima-ducc/blob/26f17bd4449eb3f80b40fc3798dcff90ec7fe173/uima-ducc-agent/src/main/java/org/apache/uima/ducc/agent/processors/LinuxProcessMetricsProcessor.java", "sha": "90af38d099c13f2b83eb32be0de456e322bb61c5", "changes": 10, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-agent/src/main/java/org/apache/uima/ducc/agent/processors/LinuxProcessMetricsProcessor.java?ref=26f17bd4449eb3f80b40fc3798dcff90ec7fe173", "patch": "@@ -320,8 +320,16 @@ public void process(Exchange e) {\n \t\t\t\t\t\t.equals(ProcessState.Initializing)\t\n \t\t\t\t\t\t) {\n \t\t\t\t\tif (agent.useCgroups && totalCpuUsageInMillis != -1) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tlong timeRunning = 1;\n+\t\t\t\t\t\tif ( process.getTimeWindowInit() != null ) {\n+\t\t\t\t\t\t\ttimeRunning = process.getTimeWindowInit().getElapsedMillis();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif ( process.getTimeWindowRun() != null ) {\n+\t\t\t\t\t\t\ttimeRunning += process.getTimeWindowRun().getElapsedMillis();\n+\t\t\t\t\t\t}\n \t\t\t\t\t\t// normalize time in running state into seconds\n-\t\t\t\t\t\tpercentCPU = Math.round(100*( (totalCpuUsageInMillis*1.0)/ (process.getTimeWindowRun().getElapsedMillis()*1.0)));\n+\t\t\t\t\t\tpercentCPU = Math.round(100*( (totalCpuUsageInMillis*1.0)/ (timeRunning*1.0)));\n \t\t\t\t\t\tprocess.setCpuTime( percentCPU );\n \t\t\t\t\t} else {\n \t\t\t\t\t\tprocess.setCpuTime(-1);   // -1 stands for N/A", "filename": "uima-ducc-agent/src/main/java/org/apache/uima/ducc/agent/processors/LinuxProcessMetricsProcessor.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/72413a2c5d616593d8867709d43bd1a7e881a2a7", "parent": "https://github.com/apache/uima-ducc/commit/cb2591c9e764052f0d1fcac9a84dc32020d43f2d", "message": "UIMA-5047 Fix NPE when cgroups are not configured and agent tries to determine if CPU reporting is available\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/uima-ducc/trunk@1766684 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_12", "file": [{"additions": 4, "raw_url": "https://github.com/apache/uima-ducc/raw/72413a2c5d616593d8867709d43bd1a7e881a2a7/uima-ducc-agent/src/main/java/org/apache/uima/ducc/agent/NodeAgent.java", "blob_url": "https://github.com/apache/uima-ducc/blob/72413a2c5d616593d8867709d43bd1a7e881a2a7/uima-ducc-agent/src/main/java/org/apache/uima/ducc/agent/NodeAgent.java", "sha": "40ade8dd575bc544db70b3a10d1f9ae0564d5232", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-agent/src/main/java/org/apache/uima/ducc/agent/NodeAgent.java?ref=72413a2c5d616593d8867709d43bd1a7e881a2a7", "patch": "@@ -222,8 +222,6 @@ public NodeAgent(NodeIdentity nodeIdentity, Launcher launcher, CamelContext cont\n     // fetch Page Size from the OS and cache it\n     pageSize = getOSPageSize();\n     \n-    // begin publishing node metrics\n-    factory.startNodeMetrics(this);\n     \n     numProcessors = getNodeProcessors();\n     \n@@ -373,6 +371,10 @@ public NodeAgent(NodeIdentity nodeIdentity, Launcher launcher, CamelContext cont\n       logger.info(\"nodeAgent\", null, \"------- CGroups Not Enabled on this Machine\");\n       cgroupFailureReason = \"------- CGroups Not Enabled on this Machine - check ducc.properties: ducc.agent.launcher.cgroups.enable \";\n     }\n+    \n+    // begin publishing node metrics\n+    factory.startNodeMetrics(this);\n+\n     logger.info(\"nodeAgent\", null, \"CGroup Support=\" + useCgroups + \" excludeNodeFromCGroups=\"\n             + excludeNodeFromCGroups + \" excludeAPs=\" + excludeAPs+\" CGroups utils Dir:\"+cgUtilsPath);\n ", "filename": "uima-ducc-agent/src/main/java/org/apache/uima/ducc/agent/NodeAgent.java"}, {"additions": 4, "raw_url": "https://github.com/apache/uima-ducc/raw/72413a2c5d616593d8867709d43bd1a7e881a2a7/uima-ducc-agent/src/main/java/org/apache/uima/ducc/agent/processors/LinuxNodeMetricsProcessor.java", "blob_url": "https://github.com/apache/uima-ducc/blob/72413a2c5d616593d8867709d43bd1a7e881a2a7/uima-ducc-agent/src/main/java/org/apache/uima/ducc/agent/processors/LinuxNodeMetricsProcessor.java", "sha": "5d9c81707457b9688093e40190870bee3353d283", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-agent/src/main/java/org/apache/uima/ducc/agent/processors/LinuxNodeMetricsProcessor.java?ref=72413a2c5d616593d8867709d43bd1a7e881a2a7", "patch": "@@ -153,7 +153,10 @@ public void process(Exchange e) {\n \t\t\t\tusers = new TreeMap<String, NodeUsersInfo>();\n \t\t\t}\n \t\t\tNodeLoadAverage lav = loadFuture.get();\n-\t\t\tboolean cpuReportingEnabled = agent.cgroupsManager.isCpuReportingEnabled();\n+\t\t\tboolean cpuReportingEnabled = false;\n+\t\t\tif ( agent.cgroupsManager != null ) {\n+\t\t\t\tcpuReportingEnabled = agent.cgroupsManager.isCpuReportingEnabled();\n+\t\t\t}\n             NodeMetrics nodeMetrics = new NodeMetrics(agent.getIdentity(), memInfo, lav,\n               cpuInfo, users, cpuReportingEnabled);\n       ", "filename": "uima-ducc-agent/src/main/java/org/apache/uima/ducc/agent/processors/LinuxNodeMetricsProcessor.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/dc645d1a908073a5acafe3623f03e1b16c1face7", "parent": "https://github.com/apache/uima-ducc/commit/e35f56dba0c86c090c79cf0790178c13c7e8a3b4", "message": "UIMA-5060 DUCC Orchestrator (OR) \"warm\" restart issues\n\n- fix orchestrator NPE due to shared code path for Service and Job\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/uima-ducc/trunk@1765890 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_13", "file": [{"additions": 6, "raw_url": "https://github.com/apache/uima-ducc/raw/dc645d1a908073a5acafe3623f03e1b16c1face7/uima-ducc-orchestrator/src/main/java/org/apache/uima/ducc/orchestrator/StateManager.java", "blob_url": "https://github.com/apache/uima-ducc/blob/dc645d1a908073a5acafe3623f03e1b16c1face7/uima-ducc-orchestrator/src/main/java/org/apache/uima/ducc/orchestrator/StateManager.java", "sha": "64edf476b43d47ca3464163bc5d273740ccd1af1", "changes": 8, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-orchestrator/src/main/java/org/apache/uima/ducc/orchestrator/StateManager.java?ref=dc645d1a908073a5acafe3623f03e1b16c1face7", "patch": "@@ -283,8 +283,12 @@ public int prune(DuccWorkMap workMap) {\n \t\t\tcase Service:\n \t\t\t\tDuccWorkJob duccWorkJob = (DuccWorkJob)duccWork;\n \t\t\t\tif(duccWorkJob != null) {\n-\t\t\t\t\tif(jobDriverTerminated(duccWorkJob)) {\n-\t\t\t\t\t\tOrchestratorHelper.jdDeallocate(duccWorkJob);\n+\t\t\t\t\tswitch(duccType) {\n+\t\t\t\t\tcase Job:\n+\t\t\t\t\t\tif(jobDriverTerminated(duccWorkJob)) {\n+\t\t\t\t\t\t\tOrchestratorHelper.jdDeallocate(duccWorkJob);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tbreak;\n \t\t\t\t\t}\n \t\t\t\t\tif(duccWorkJob.isCompleting() && allProcessesTerminated(duccWorkJob)) {\n \t\t\t\t\t\tstateJobAccounting.stateChange(duccWorkJob, JobState.Completed);", "filename": "uima-ducc-orchestrator/src/main/java/org/apache/uima/ducc/orchestrator/StateManager.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/983bbcbef5ac657520ed4283941d3e738076e524", "parent": "https://github.com/apache/uima-ducc/commit/83e2bb6463969aa75bbadfa594cf0e1a2a47648c", "message": "UIMA-4966 add check for null on httpClient to avoice NPE when process is killed before it is fully initialized\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/uima-ducc/trunk@1752345 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_14", "file": [{"additions": 3, "raw_url": "https://github.com/apache/uima-ducc/raw/983bbcbef5ac657520ed4283941d3e738076e524/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configuration/jp/JobProcessComponent.java", "blob_url": "https://github.com/apache/uima-ducc/blob/983bbcbef5ac657520ed4283941d3e738076e524/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configuration/jp/JobProcessComponent.java", "sha": "ffdef76953a8bdf3d0cee092bae6581ac58960a3", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configuration/jp/JobProcessComponent.java?ref=983bbcbef5ac657520ed4283941d3e738076e524", "patch": "@@ -394,7 +394,9 @@ public void stop() {\n         \tif ( agent != null) {\r\n             \tagent.stop();\r\n         \t}\r\n-        \thttpClient.stop();\r\n+        \tif ( httpClient != null ) {\r\n+            \thttpClient.stop();\r\n+        \t}\r\n \t    } catch( Exception e) {\r\n \t    \te.printStackTrace();\r\n \t    } finally {\r", "filename": "uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configuration/jp/JobProcessComponent.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/c3414e36d254690e1daa81b5fc60e7293548bda3", "parent": "https://github.com/apache/uima-ducc/commit/b6c3c9977e57f4caf4844c49482506bae4dfa2ce", "message": "UIMA-4989 added check to make sure NPE is not thrown\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/uima-ducc/trunk@1751794 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_15", "file": [{"additions": 8, "raw_url": "https://github.com/apache/uima-ducc/raw/c3414e36d254690e1daa81b5fc60e7293548bda3/uima-ducc-container/src/test/java/org/apache/uima/ducc/container/jd/test/helper/Utilities.java", "blob_url": "https://github.com/apache/uima-ducc/blob/c3414e36d254690e1daa81b5fc60e7293548bda3/uima-ducc-container/src/test/java/org/apache/uima/ducc/container/jd/test/helper/Utilities.java", "sha": "358019d401c99fac00f78793f8c414edbc109bc9", "changes": 11, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-container/src/test/java/org/apache/uima/ducc/container/jd/test/helper/Utilities.java?ref=c3414e36d254690e1daa81b5fc60e7293548bda3", "patch": "@@ -44,9 +44,14 @@ private Utilities() {\n \t\tuserCP = resource(\"/\");\n \t\tStringBuilder sb = new StringBuilder(userCP);\n \t\tFile dir = new File(userCP);\n-\t\tfor (File file : dir.listFiles()) {\n-\t\t\tif (file.getName().endsWith(\".jar\")) {\n-\t\t\t\tsb.append(':').append(file.getPath());\n+\t\tif ( dir != null ) {\n+\t\t\tFile[] files = dir.listFiles();\n+\t\t\tif ( files != null ) {\n+\t\t\t\tfor (File file : files) {\n+\t\t\t\t\tif (file.getName().endsWith(\".jar\")) {\n+\t\t\t\t\t\tsb.append(':').append(file.getPath());\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t\tuserCP = sb.toString();", "filename": "uima-ducc-container/src/test/java/org/apache/uima/ducc/container/jd/test/helper/Utilities.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/508d5acba75ce0cd36613c3aa5f29c254ebe21f3", "parent": "https://github.com/apache/uima-ducc/commit/4c1505a61a24a0d98ac6a3032a3e06fd96c10b96", "message": "UIMA-5372 Avoid unregister NPE by removing the name from a name->id map and leaving the id in the id->service map\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/uima-ducc/trunk@1788108 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_16", "file": [{"additions": 49, "raw_url": "https://github.com/apache/uima-ducc/raw/508d5acba75ce0cd36613c3aa5f29c254ebe21f3/uima-ducc-sm/src/main/java/org/apache/uima/ducc/sm/ServiceHandler.java", "blob_url": "https://github.com/apache/uima-ducc/blob/508d5acba75ce0cd36613c3aa5f29c254ebe21f3/uima-ducc-sm/src/main/java/org/apache/uima/ducc/sm/ServiceHandler.java", "sha": "6577b8ce848f0e920bc1ac469408d83f60b3eaac", "changes": 164, "status": "modified", "deletions": 115, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-sm/src/main/java/org/apache/uima/ducc/sm/ServiceHandler.java?ref=508d5acba75ce0cd36613c3aa5f29c254ebe21f3", "patch": "@@ -263,30 +263,17 @@ void addApiTask(ApiHandler apih)\n         String[] deps = w.getServiceDependencies();\n \n         // New services, if any are discovered\n+        // Put them into the global map of known services if needed and up the ref count\n         boolean fatal = false;\n         Map<String, ServiceSet> jobServices = new HashMap<String, ServiceSet>();\n         for ( String dep : deps ) {\n-\n-            // put it into the global map of known services if needed and up the ref count\n             ServiceSet sset = serviceStateHandler.getServiceByUrl(dep);\n             if ( sset == null ) {\n-\n-                // Not good.  Lets see if it's a terminating service so we can at least tell the poor guy.\n-                sset = serviceStateHandler.getUnregisteredServiceByUrl(dep);\n-                if ( sset == null ) {\n-                    // Still null, never h'oid of de guy\n-                    s.addMessage(dep, \"Service is unknown.\");\n-                    s.setState(ServiceState.NotAvailable);\n-                } else {\n-                    // The service is deregistered but not yet purged, may as well tell him. It can\n-                    // take a while for these guys to go away.\n-                    s.addMessage(dep, \"Service has been deregistered and is terminating.\");\n-                    s.setState(ServiceState.NotAvailable);\n-                }\n+                s.addMessage(dep, \"Service is unknown.\");\n+                s.setState(ServiceState.NotAvailable);\n                 fatal = true;\n                 continue;\n             }\n-\n             jobServices.put(dep, sset);\n         }\n \n@@ -568,15 +555,10 @@ protected void handleModifiedServices(Map<DuccId, IDuccWork> work)\n             }\n \n             ServiceSet sset = serviceStateHandler.getServiceByImplementor(id.getFriendly());\n-            if ( sset == null ) {\n-                sset = serviceStateHandler.getUnregisteredServiceByUrl(url);\n-                if ( sset == null ) {\n-                    // leftover junk publication maybe? can't tell\n-                    logger.info(methodName, id, \"Update for active service instance\", id.toString(),\n-                                \"but have no registration for it. Job state:\", w.getJobState());\n-                    continue;\n-                }\n-                logger.info(methodName, id, \"Update for unregistered service, continuing shutdown of service. Job State:\", w.getJobState());\n+            if (sset == null) {\n+                // leftover junk publication maybe? can't tell\n+                logger.info(methodName, id, \"Update for active service instance\", id.toString(), \"but have no registration for it. Job state:\", w.getJobState());\n+                continue;\n             }\n \n             if ( !sset.containsImplementor(id) ) {\n@@ -1219,26 +1201,25 @@ void doModify(ServiceModifyEvent sme)\n \n     synchronized ServiceReplyEvent unregister(ServiceUnregisterEvent ev)\n     {\n-        //String methodName = \"unregister\";\n+        String methodName = \"unregister\";\n         long id = ev.getFriendly();\n         String url = ev.getEndpoint();\n         ServiceSet sset = serviceStateHandler.getServiceForApi(id, url);\n         if ( sset == null ) {\n+            logger.info(methodName, null, \"Unknown service\", id, url);\n             return ServiceManagerComponent.makeResponse(false, \"Unknown service\",  url, id);\n         }\n \n-        id = sset.getId().getFriendly();           // must insure the ev has the numeric id because we work entirely with that from now ow\n-        url = sset.getKey();         // also insure url is there for messages\n-        ev.setEndpoint(url);\n-        ev.setFriendly(id);\n-\n         if ( ! authorized(\"unregister\", sset, ev) ) {\n             return ServiceManagerComponent.makeResponse(false, \"Owned by \" + sset.getUser(),  url, sset.getId().getFriendly());\n         }\n \n+        // Ensure that the event has the id as the name will be removed from the name->id map\n+        ev.setFriendly(sset.getId().getFriendly());\n         serviceStateHandler.unregister(sset);\n-        sset.deregister();          // just sets a flag so we know how to handle it when it starts to die\n         pendingRequests.add(new ApiHandler(ev, this));\n+        logger.info(methodName, null, \"Unregistering service\", id, url);\n+\n         return ServiceManagerComponent.makeResponse(true, \"Shutting down implementors\", sset.getKey(), sset.getId().getFriendly());\n     }\n \n@@ -1249,14 +1230,15 @@ void doUnregister(ServiceUnregisterEvent ev)\n     {\n     \tString methodName = \"doUnregister\";\n         long friendly = ev.getFriendly();\n-        String url = ev.getEndpoint();\n \n-        ServiceSet sset = serviceStateHandler.getUnregisteredService(friendly);\n-        if ( sset == null ) {\n-            logger.error(methodName, null, \"Service\", friendly, \"(\" + url + \") is not a known, unregistereed service. No action taken.\");\n+        // Can only get by id when unregistering as the name has been removed from the name=>id map\n+        ServiceSet sset = serviceStateHandler.getServiceById(friendly);\n+        if ( sset == null ) {  // Should never happen\n+            logger.error(methodName, null, \"Service\", friendly, \"is not a known, service. No action taken.\");\n             return;\n         }\n \n+        String url = sset.getKey();\n         sset.disableAndStop(\"Disabled by unregister from id \" + ev.getUser());\n         if ( sset.isPingOnly() ) {\n             logger.info(methodName, sset.getId(), \"Unregister ping-only setvice:\", friendly, url);\n@@ -1287,12 +1269,7 @@ void removeImplementor(ServiceSet sset, ServiceInstance inst)\n \n     void removeService(ServiceSet sset)\n     {\n-       String methodName = \"deleteService\";\n-       if ( serviceStateHandler.hasService(sset.getId()) ) {\n-           logger.error(methodName, sset.getId(), \"Attempt to delete service while it is still registered: refused.\");\n-       } else {\n-           serviceStateHandler.removeService(sset);\n-       }\n+        serviceStateHandler.removeService(sset);\n     }\n \n     /**\n@@ -1453,54 +1430,31 @@ public void run()\n      class ServiceStateHandler\n      {\n \n-//         // Map of active service descriptors by endpoint.  For UIMA services, key is the endpoint.\n-         private Map<String,  ServiceSet>  registeredServicesByUrl         = new HashMap<String,  ServiceSet>();\n+         // Map of active service descriptors by endpoint.  For UIMA services, key is the endpoint.\n+         // Map from name->id and from id->service so can quickly unregister by removing from the 1st map UIMA-5372\n+         private Map<String,  Long>        registeredServiceIdsByUrl       = new HashMap<String,  Long>();\n          private Map<Long,    ServiceSet>  registeredServicesById          = new HashMap<Long,    ServiceSet>();\n-         private Map<Long,    ServiceSet>  unregisteredServicesById        = new HashMap<Long,    ServiceSet>();\n-         private Map<String,  ServiceSet>  unregisteredServicesByUrl       = new HashMap<String,  ServiceSet>();\n \n+         // Map from instance-id -> service (each instance has a unique ID)\n          private Map<Long,    ServiceSet>  servicesByImplementor           = new HashMap<Long, ServiceSet>();\n \n-         //         private Map<Long,    ServiceSet>  servicesByFriendly = new HashMap<Long,    ServiceSet>();\n-\n //         // For each job, the collection of services it is dependent upon\n //         // DUccId is a Job Id (or id for serice that has dependencies)\n          private Map<DuccId, Map<Long, ServiceSet>>  servicesByJob = new HashMap<DuccId, Map<Long, ServiceSet>>();\n \n-//         ServiceStateHandler()\n-//         {\n-//         }\n-\n-//         /**\n-//          * Return a copy of the keys so we can fetch the services in an orderly manner.\n-//          */\n-//         synchronized ArrayList<String> getServiceNames()\n-//         {\n-//             ArrayList<String> answer = new ArrayList<String>();\n-//             for ( String k : servicesByName.keySet() ) {\n-//                 answer.add(k);\n-//             }\n-//             return answer;\n-//         }\n-\n+         /*\n+          * Simply remove the name from the name->id map so the name can be re-used quickly.\n+          * The now-orphaned id will be used for the remainder of the shutdown steps. UIMA-5372\n+          */\n          synchronized void unregister(ServiceSet sset)\n          {\n         \t String methodName = \"ServiceStateHandler.unregister\";\n              String key = sset.getKey();\n-             long   fid = sset.getId().getFriendly();\n-             logger.info(methodName, sset.getId(), \"Removing\", key, fid);\n-             registeredServicesByUrl.remove(key);\n-             registeredServicesById.remove(fid);\n-\n-             unregisteredServicesById.put(fid, sset);\n-             unregisteredServicesByUrl.put(key, sset);\n+             logger.info(methodName, sset.getId(), \"Removing\", key, \"from name->id map\");\n+             registeredServiceIdsByUrl.remove(key);\n+             sset.deregister();          // just sets a flag so we know how to handle it when it starts to die\n          }\n \n-//          synchronized ServiceSet getUnregisteredService(String url)\n-//          {\n-//              return unRegisteredServicesByUrl.get(url);\n-//          }\n-\n          synchronized boolean hasService(DuccId id)\n          {\n         \t String methodName = \"ServiceStateHandler.hasService\";\n@@ -1515,20 +1469,30 @@ synchronized void registerService(Long id, String ep, ServiceSet sset)\n \n              logger.info(methodName, sset.getId(), \"adding\", ep, id);\n \n-             registeredServicesByUrl.put(ep, sset);\n+             registeredServiceIdsByUrl.put(ep, id);\n              registeredServicesById.put(id, sset);\n          }\n \n+         // Must map url->id then id->service\n          synchronized ServiceSet getServiceByUrl(String n)\n          {\n-             return registeredServicesByUrl.get(n);\n+             Long id = registeredServiceIdsByUrl.get(n);\n+             return id == null ? null : registeredServicesById.get(id);\n+         }\n+\n+         synchronized ServiceSet getServiceById(long id)\n+         {\n+             return registeredServicesById.get(id);\n          }\n \n+         // Note: must exclude services being unregistered\n          synchronized List<ServiceSet> getServices()\n          {\n              ArrayList<ServiceSet> answer = new ArrayList<ServiceSet>();\n-             for ( ServiceSet sset : registeredServicesByUrl.values() ) {\n-                 answer.add(sset);\n+             for ( ServiceSet sset : registeredServicesById.values() ) {\n+                 if (!sset.isDeregistered()) {\n+                     answer.add(sset);\n+                 }\n              }\n              return answer;\n          }\n@@ -1538,56 +1502,26 @@ synchronized void addImplementorFor(ServiceSet sset, ServiceInstance inst)\n              servicesByImplementor.put(inst.getId(), sset);\n          }\n \n-         synchronized ServiceSet getServiceByImplementor(long id)\n+         synchronized ServiceSet getServiceByImplementor(long instId)\n          {\n-             return servicesByImplementor.get(id);\n+             return servicesByImplementor.get(instId);\n          }\n \n          synchronized void removeImplementorFor(ServiceSet sset, ServiceInstance inst)\n          {\n              servicesByImplementor.remove(inst.getId());\n          }\n \n-//         synchronized ServiceSet getServiceByFriendly(long id)\n-//         {\n-//             return servicesByFriendly.get( id );\n-//         }\n-\n-         // API passes in a friendly (maybe) and an endpiont (maybe) but only one of these\n-         // Here we look up the service by whatever was passed in.\n+         // API passes in either an id or an endpoint but not both.\n          synchronized ServiceSet  getServiceForApi(long id, String n)\n          {\n-             if ( n == null ) return registeredServicesById.get(id);\n-             return registeredServicesByUrl.get(n);\n-         }\n-\n-         synchronized ServiceSet getUnregisteredService(long id)\n-         {\n-             return unregisteredServicesById.get(id);\n+             return id == -1 ? getServiceByUrl(n) : getServiceById(id);\n          }\n \n-         synchronized ServiceSet getUnregisteredServiceByUrl(String url)\n-         {\n-             return unregisteredServicesByUrl.get(url);\n-         }\n-\n-\n-//         synchronized void putServiceByName(String n, ServiceSet s)\n-//         {\n-//             servicesByName.put(n, s);\n-//             DuccId id = s.getId();\n-//             if ( id != null ) {\n-//                 servicesByFriendly.put(id.getFriendly(), s);\n-//             }\n-//         }\n-\n-\n          synchronized void removeService(ServiceSet sset)\n          {\n-             String key = sset.getKey();\n              long id = sset.getId().getFriendly();\n-             unregisteredServicesById.remove(id);\n-             unregisteredServicesByUrl.remove(key);\n+             registeredServicesById.remove(id);   // The name has already been removed\n \n              // The registeredServices need to have been removed during unregister which is the only way\n              // to get rid of a service.", "filename": "uima-ducc-sm/src/main/java/org/apache/uima/ducc/sm/ServiceHandler.java"}, {"additions": 1, "raw_url": "https://github.com/apache/uima-ducc/raw/508d5acba75ce0cd36613c3aa5f29c254ebe21f3/uima-ducc-sm/src/main/java/org/apache/uima/ducc/sm/ServiceManagerComponent.java", "blob_url": "https://github.com/apache/uima-ducc/blob/508d5acba75ce0cd36613c3aa5f29c254ebe21f3/uima-ducc-sm/src/main/java/org/apache/uima/ducc/sm/ServiceManagerComponent.java", "sha": "2d0adb7846d405c74a4e181f1ced4adcacd9d95e", "changes": 6, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-sm/src/main/java/org/apache/uima/ducc/sm/ServiceManagerComponent.java?ref=508d5acba75ce0cd36613c3aa5f29c254ebe21f3", "patch": "@@ -846,7 +846,7 @@ public synchronized void register(ServiceRegisterEvent ev)\n         ServiceReplyEvent reply = handler.register(id, props, meta, false);\n         ev.setReply(reply);\n \n-        // Draw attentipn in the log on registration failures\n+        // Draw attention in the log on registration failures\n         if ( reply.getReturnCode() ) {\n             logger.info(methodName, id, ev.toString());\n         } else {\n@@ -856,13 +856,9 @@ public synchronized void register(ServiceRegisterEvent ev)\n \n     public synchronized void unregister(ServiceUnregisterEvent ev)\n     {\n-        String methodName = \"unregister\";\n-        long id = ev.getFriendly();\n-\n         if ( ! validate_user(\"Unregister\", ev) ) return;   // necessary messages emitted in here\n         if ( ! orchestratorAlive(\"Unregister\", ev) ) return;\n \n-        logger.info(methodName, null, \"De-registering service\", id);\n         ServiceReplyEvent reply = handler.unregister(ev);\n         ev.setReply(reply);\n     }", "filename": "uima-ducc-sm/src/main/java/org/apache/uima/ducc/sm/ServiceManagerComponent.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/b928ed701574f955ca656e4ae40ad689ad58dabf", "parent": "https://github.com/apache/uima-ducc/commit/1d5b0540424ceadbe4d32d257229f396f805215c", "message": "UIMA-4303 DUCC Web Server (WS) fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1668962 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_17", "file": [{"additions": 3, "raw_url": "https://github.com/apache/uima-ducc/raw/b928ed701574f955ca656e4ae40ad689ad58dabf/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebServerHelper.java", "blob_url": "https://github.com/apache/uima-ducc/blob/b928ed701574f955ca656e4ae40ad689ad58dabf/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebServerHelper.java", "sha": "7bca47d1cfcb23f98d05b8684799e03632f034fb", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebServerHelper.java?ref=b928ed701574f955ca656e4ae40ad689ad58dabf", "patch": "@@ -49,14 +49,14 @@ public static String getDuccWeb() {\n \t\tString ducc_web_env = System.getenv(\"DUCC_WEB\");\n \t\tif(ducc_web_property != null) {\n \t\t\tducc_web = ducc_web_property;\n-\t\t\tlogger.info(location, jobid, WsStandardize.Label.DUCC_WEB_PROPERTY.get()+ducc_web);\n+\t\t\tlogger.debug(location, jobid, WsStandardize.Label.DUCC_WEB_PROPERTY.get()+ducc_web);\n \t\t}\n \t\telse if(ducc_web_env != null) {\n \t\t\tducc_web = ducc_web_env;\n-\t\t\tlogger.info(location, jobid, WsStandardize.Label.DUCC_WEB_ENV.get()+ducc_web);\n+\t\t\tlogger.debug(location, jobid, WsStandardize.Label.DUCC_WEB_ENV.get()+ducc_web);\n \t\t}\n \t\telse {\n-\t\t\tlogger.info(location, jobid, WsStandardize.Label.DUCC_WEB.get()+ducc_web);\n+\t\t\tlogger.debug(location, jobid, WsStandardize.Label.DUCC_WEB.get()+ducc_web);\n \t\t}\n \t\treturn ducc_web;\n \t}", "filename": "uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebServerHelper.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/a857f32f8e638149676e184f211e1e33931868e9", "parent": "https://github.com/apache/uima-ducc/commit/460358f0ce990c082bdfcabef269210a3bea3327", "message": "UIMA-4060 fixed NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1646529 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_18", "file": [{"additions": 3, "raw_url": "https://github.com/apache/uima-ducc/raw/a857f32f8e638149676e184f211e1e33931868e9/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configuration/jp/HttpWorkerThread.java", "blob_url": "https://github.com/apache/uima-ducc/blob/a857f32f8e638149676e184f211e1e33931868e9/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configuration/jp/HttpWorkerThread.java", "sha": "789d2a2ef7335d31641f46b5897291b686200ee9", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configuration/jp/HttpWorkerThread.java?ref=a857f32f8e638149676e184f211e1e33931868e9", "patch": "@@ -280,7 +280,9 @@ public void run() {\n \t\t\t\t\tcommand = Type.Get.name();\n //\t\t\t\t\ttransaction = httpClient.post(transaction);\n \t\t\t\t\ttransaction = httpClient.execute(transaction, postMethod);\n-                    logger.info(\"run\", null,\"Thread:\"+Thread.currentThread().getId()+\" Recv'd WI:\"+transaction.getMetaCas().getSystemKey());\n+                    if ( transaction.getMetaCas()!= null) {\n+    \t\t\t\t\tlogger.info(\"run\", null,\"Thread:\"+Thread.currentThread().getId()+\" Recv'd WI:\"+transaction.getMetaCas().getSystemKey());\n+                    }\n \n \t\t\t\t\t// Confirm receipt of the CAS. \n \t\t\t\t\ttransaction.setType(Type.Ack);", "filename": "uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configuration/jp/HttpWorkerThread.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/e425634ecc12a92ac7047de6dd5c1340f6404cfd", "parent": "https://github.com/apache/uima-ducc/commit/6cb04d09cd50bf81ce49030894cc3c95788dcf72", "message": "UIMA-4066 fixed NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1645719 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_19", "file": [{"additions": 3, "raw_url": "https://github.com/apache/uima-ducc/raw/e425634ecc12a92ac7047de6dd5c1340f6404cfd/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configuration/jp/HttpWorkerThread.java", "blob_url": "https://github.com/apache/uima-ducc/blob/e425634ecc12a92ac7047de6dd5c1340f6404cfd/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configuration/jp/HttpWorkerThread.java", "sha": "c2b057acaa3ec3623c7c8aa2241b7ac29e1449c8", "changes": 5, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configuration/jp/HttpWorkerThread.java?ref=e425634ecc12a92ac7047de6dd5c1340f6404cfd", "patch": "@@ -276,8 +276,6 @@ public void run() {\n \t\t\t\t\tcommand = Type.Get.name();\n //\t\t\t\t\ttransaction = httpClient.post(transaction);\n \t\t\t\t\ttransaction = httpClient.execute(transaction, postMethod);\n-                    logger.info(\"run\", null,\"Thread:\"+Thread.currentThread().getId()+\" Recv'd New WI:\"+transaction.getMetaCas().getSystemKey());\n-\t\t\t\t\tSystem.out.println(\"Thread:\"+Thread.currentThread().getId()+\" Recv'd New WI:\"+transaction.getMetaCas().getSystemKey());\n                     // Confirm receipt of the CAS. \n \t\t\t\t\ttransaction.setType(Type.Ack);\n \t\t\t\t\tcommand = Type.Ack.name();\n@@ -308,6 +306,9 @@ public void run() {\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t} else {\n+\t                    logger.info(\"run\", null,\"Thread:\"+Thread.currentThread().getId()+\" Recv'd New WI:\"+transaction.getMetaCas().getSystemKey());\n+\t\t\t\t\t\tSystem.out.println(\"Thread:\"+Thread.currentThread().getId()+\" Recv'd New WI:\"+transaction.getMetaCas().getSystemKey());\n+\n \t\t\t\t\t\t// process the CAS\n \t\t\t\t\t\t@SuppressWarnings(\"unchecked\")\n \t\t\t\t\t\tList<Properties> metrics = (List<Properties>) ", "filename": "uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configuration/jp/HttpWorkerThread.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/bb04b4d23c9dc13c7500939ea403b1bacdfeb4be", "parent": "https://github.com/apache/uima-ducc/commit/d26f5f6f4ebee68fdca42d0fc1f6cd1540168757", "message": "UIMA-4800 DUCC Job Driver (JD) CR error causes NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1734234 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_20", "file": [{"additions": 17, "raw_url": "https://github.com/apache/uima-ducc/raw/bb04b4d23c9dc13c7500939ea403b1bacdfeb4be/uima-ducc-container/src/main/java/org/apache/uima/ducc/container/jd/JobDriver.java", "blob_url": "https://github.com/apache/uima-ducc/blob/bb04b4d23c9dc13c7500939ea403b1bacdfeb4be/uima-ducc-container/src/main/java/org/apache/uima/ducc/container/jd/JobDriver.java", "sha": "3e0a06907a5f409f4bbcd1e3f891a596bda115bd", "changes": 21, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-container/src/main/java/org/apache/uima/ducc/container/jd/JobDriver.java?ref=bb04b4d23c9dc13c7500939ea403b1bacdfeb4be", "patch": "@@ -20,6 +20,7 @@\n \n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.CountDownLatch;\n \n import org.apache.uima.ducc.common.jd.files.workitem.IRemoteLocation;\n import org.apache.uima.ducc.common.jd.files.workitem.IWorkItemStateKeeper;\n@@ -55,20 +56,32 @@\n \t\n \tprivate static JobDriver instance = null;\n \t\n+\tprivate static CountDownLatch latch = new CountDownLatch(1);\n+\t\n \tpublic synchronized static JobDriver getInstance() {\n \t\tString location = \"getInstance\";\n-\t\tif(instance == null) {\n+\t\twhile(true) {\n \t\t\ttry {\n-\t\t\t\tinstance = new JobDriver();\n-\t\t\t} catch (JobDriverException e) {\n+\t\t\t\tlatch.await();\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcatch(Exception e) {\n \t\t\t\tlogger.error(location, ILogger.null_id, e);\n \t\t\t}\n \t\t}\n \t\treturn instance;\n \t}\n \t\n-\tpublic synchronized static JobDriver getNewInstance() {\n+\tpublic synchronized static JobDriver getNewInstance() throws JobDriverException {\n+\t\tString location = \"getNewInstance\";\n \t\tinstance = null;\n+\t\ttry {\n+\t\t\tinstance = new JobDriver();\n+\t\t\tlatch.countDown();\n+\t\t} catch (JobDriverException e) {\n+\t\t\tlogger.error(location, ILogger.null_id, e);\n+\t\t\tthrow e;\n+\t\t}\n \t\treturn getInstance();\n \t}\n \t", "filename": "uima-ducc-container/src/main/java/org/apache/uima/ducc/container/jd/JobDriver.java"}, {"additions": 1, "raw_url": "https://github.com/apache/uima-ducc/raw/bb04b4d23c9dc13c7500939ea403b1bacdfeb4be/uima-ducc-container/src/test/java/org/apache/uima/ducc/container/jd/test/Test0.java", "blob_url": "https://github.com/apache/uima-ducc/blob/bb04b4d23c9dc13c7500939ea403b1bacdfeb4be/uima-ducc-container/src/test/java/org/apache/uima/ducc/container/jd/test/Test0.java", "sha": "ed1578a2e133abf5f9edbff2f644ba6898e7bb5a", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-container/src/test/java/org/apache/uima/ducc/container/jd/test/Test0.java?ref=bb04b4d23c9dc13c7500939ea403b1bacdfeb4be", "patch": "@@ -30,7 +30,7 @@\n \t@Before\n     public void setUp() throws JobDriverException {\n         initialize();\n-        jd = JobDriver.getInstance();\n+        jd = JobDriver.getNewInstance();\n     }\n \t\n \t@Test", "filename": "uima-ducc-container/src/test/java/org/apache/uima/ducc/container/jd/test/Test0.java"}, {"additions": 1, "raw_url": "https://github.com/apache/uima-ducc/raw/bb04b4d23c9dc13c7500939ea403b1bacdfeb4be/uima-ducc-container/src/test/java/org/apache/uima/ducc/container/jd/test/Test1.java", "blob_url": "https://github.com/apache/uima-ducc/blob/bb04b4d23c9dc13c7500939ea403b1bacdfeb4be/uima-ducc-container/src/test/java/org/apache/uima/ducc/container/jd/test/Test1.java", "sha": "a1c7fa2616189625127d0ea3215990dae5a04d6a", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-container/src/test/java/org/apache/uima/ducc/container/jd/test/Test1.java?ref=bb04b4d23c9dc13c7500939ea403b1bacdfeb4be", "patch": "@@ -33,7 +33,7 @@\n \t@Before\n     public void setUp() throws JobDriverException {\n         initialize();\n-        jd = JobDriver.getInstance();\n+        jd = JobDriver.getNewInstance();\n     }\n \t\n \t@Test", "filename": "uima-ducc-container/src/test/java/org/apache/uima/ducc/container/jd/test/Test1.java"}, {"additions": 1, "raw_url": "https://github.com/apache/uima-ducc/raw/bb04b4d23c9dc13c7500939ea403b1bacdfeb4be/uima-ducc-container/src/test/java/org/apache/uima/ducc/container/jd/test/Test2.java", "blob_url": "https://github.com/apache/uima-ducc/blob/bb04b4d23c9dc13c7500939ea403b1bacdfeb4be/uima-ducc-container/src/test/java/org/apache/uima/ducc/container/jd/test/Test2.java", "sha": "101fb2a775a79d00b5abbccf4885896124bd6194", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-container/src/test/java/org/apache/uima/ducc/container/jd/test/Test2.java?ref=bb04b4d23c9dc13c7500939ea403b1bacdfeb4be", "patch": "@@ -42,7 +42,7 @@\n \t@Before\n     public void setUp() throws JobDriverException {\n         initialize();\n-        jd = JobDriver.getInstance();\n+        jd = JobDriver.getNewInstance();\n     }\n \t\n \t@Test", "filename": "uima-ducc-container/src/test/java/org/apache/uima/ducc/container/jd/test/Test2.java"}, {"additions": 1, "raw_url": "https://github.com/apache/uima-ducc/raw/bb04b4d23c9dc13c7500939ea403b1bacdfeb4be/uima-ducc-container/src/test/java/org/apache/uima/ducc/container/jd/test/classloading/TestClassLoading.java", "blob_url": "https://github.com/apache/uima-ducc/blob/bb04b4d23c9dc13c7500939ea403b1bacdfeb4be/uima-ducc-container/src/test/java/org/apache/uima/ducc/container/jd/test/classloading/TestClassLoading.java", "sha": "42b84f8307ef8e9b5ab013cc7b7aedc455d52f37", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-container/src/test/java/org/apache/uima/ducc/container/jd/test/classloading/TestClassLoading.java?ref=bb04b4d23c9dc13c7500939ea403b1bacdfeb4be", "patch": "@@ -53,7 +53,7 @@\n \t@Before\n     public void setUp() throws JobDriverException {\n         initialize();\n-        jd = JobDriver.getInstance();\n+        jd = JobDriver.getNewInstance();\n     }\n \t\n \t@Test", "filename": "uima-ducc-container/src/test/java/org/apache/uima/ducc/container/jd/test/classloading/TestClassLoading.java"}, {"additions": 1, "raw_url": "https://github.com/apache/uima-ducc/raw/bb04b4d23c9dc13c7500939ea403b1bacdfeb4be/uima-ducc-container/src/test/java/org/apache/uima/ducc/container/jd/test/wi/fsm/TestWiFsm.java", "blob_url": "https://github.com/apache/uima-ducc/blob/bb04b4d23c9dc13c7500939ea403b1bacdfeb4be/uima-ducc-container/src/test/java/org/apache/uima/ducc/container/jd/test/wi/fsm/TestWiFsm.java", "sha": "c38e4ef17a3cc19cffb92c6d1bf9b6a6333190aa", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-container/src/test/java/org/apache/uima/ducc/container/jd/test/wi/fsm/TestWiFsm.java?ref=bb04b4d23c9dc13c7500939ea403b1bacdfeb4be", "patch": "@@ -49,7 +49,7 @@\n \t@Before\n     public void setUp() throws JobDriverException {\n         initialize();\n-        jd = JobDriver.getInstance();\n+        jd = JobDriver.getNewInstance();\n     }\n \t\n \t@Test", "filename": "uima-ducc-container/src/test/java/org/apache/uima/ducc/container/jd/test/wi/fsm/TestWiFsm.java"}, {"additions": 1, "raw_url": "https://github.com/apache/uima-ducc/raw/bb04b4d23c9dc13c7500939ea403b1bacdfeb4be/uima-ducc-container/src/test/java/org/apache/uima/ducc/container/jd/test/wi/statefile/TestWiStateFile.java", "blob_url": "https://github.com/apache/uima-ducc/blob/bb04b4d23c9dc13c7500939ea403b1bacdfeb4be/uima-ducc-container/src/test/java/org/apache/uima/ducc/container/jd/test/wi/statefile/TestWiStateFile.java", "sha": "8f54723aa09e41f7caf0e695f209c5a0f34c782a", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-container/src/test/java/org/apache/uima/ducc/container/jd/test/wi/statefile/TestWiStateFile.java?ref=bb04b4d23c9dc13c7500939ea403b1bacdfeb4be", "patch": "@@ -40,7 +40,7 @@\n \t@Before\n     public void setUp() throws JobDriverException {\n         initialize();\n-        jd = JobDriver.getInstance();\n+        jd = JobDriver.getNewInstance();\n     }\n \t\n \t@Test", "filename": "uima-ducc-container/src/test/java/org/apache/uima/ducc/container/jd/test/wi/statefile/TestWiStateFile.java"}, {"additions": 6, "raw_url": "https://github.com/apache/uima-ducc/raw/bb04b4d23c9dc13c7500939ea403b1bacdfeb4be/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configuration/jd/JobDriverComponent.java", "blob_url": "https://github.com/apache/uima-ducc/blob/bb04b4d23c9dc13c7500939ea403b1bacdfeb4be/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configuration/jd/JobDriverComponent.java", "sha": "d7106616b3f84be1d02330a0cdfc9fb36b2a27b5", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configuration/jd/JobDriverComponent.java?ref=bb04b4d23c9dc13c7500939ea403b1bacdfeb4be", "patch": "@@ -30,6 +30,8 @@\n import org.apache.uima.ducc.common.utils.DuccLoggerComponents;\r\n import org.apache.uima.ducc.common.utils.id.DuccId;\r\n import org.apache.uima.ducc.container.jd.JobDriver;\r\n+import org.apache.uima.ducc.container.jd.cas.CasManager;\r\n+import org.apache.uima.ducc.container.jd.cas.CasManagerStats;\r\n import org.apache.uima.ducc.container.jd.mh.IMessageHandler;\r\n import org.apache.uima.ducc.container.net.iface.IMetaCasTransaction;\r\n import org.apache.uima.ducc.transport.configuration.jd.iface.IJobDriverComponent;\r\n@@ -83,7 +85,10 @@ private void verifySystemProperties() {\n \tprivate void createInstance() {\r\n \t\tString location = \"createInstance\";\r\n \t\ttry {\r\n-\t\t\tint total = JobDriver.getInstance().getCasManager().getCasManagerStats().getCrTotal();\r\n+\t\t\tJobDriver jobDriver = JobDriver.getNewInstance();\r\n+\t\t\tCasManager casManager = jobDriver.getCasManager();\r\n+\t\t\tCasManagerStats casManagerStats = casManager.getCasManagerStats();\r\n+\t\t\tint total = casManagerStats.getCrTotal();\r\n \t\t\tlogger.info(location, jobid, \"total: \"+total);\r\n \t\t}\r\n \t\tcatch(Exception e) {\r", "filename": "uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configuration/jd/JobDriverComponent.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/d26f5f6f4ebee68fdca42d0fc1f6cd1540168757", "parent": "https://github.com/apache/uima-ducc/commit/48df455e4c499f91ddb3bc4d156fb792dccb1a85", "message": "UIMA-4800 DUCC Job Driver (JD) CR error causes NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1734233 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_21", "file": [{"additions": 8, "raw_url": "https://github.com/apache/uima-ducc/raw/d26f5f6f4ebee68fdca42d0fc1f6cd1540168757/uima-ducc-orchestrator/src/main/java/org/apache/uima/ducc/orchestrator/StateManager.java", "blob_url": "https://github.com/apache/uima-ducc/blob/d26f5f6f4ebee68fdca42d0fc1f6cd1540168757/uima-ducc-orchestrator/src/main/java/org/apache/uima/ducc/orchestrator/StateManager.java", "sha": "304af0634073c552e680f4b6cbe43211d1fb4344", "changes": 11, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-orchestrator/src/main/java/org/apache/uima/ducc/orchestrator/StateManager.java?ref=d26f5f6f4ebee68fdca42d0fc1f6cd1540168757", "patch": "@@ -629,19 +629,20 @@ else if(jdStatusReport.isKillJob()) {\n \t\t\t\t\t\t\tcase EndOfJob:\n \t\t\t\t\t\t\t\ttry {\n \t\t\t\t\t\t\t\t\tint errors = jdStatusReport.getWorkItemsProcessingError();\n+\t\t\t\t\t\t\t\t\tint done = jdStatusReport.getWorkItemsProcessingCompleted();\n \t\t\t\t\t\t\t\t\tif(errors > 0) {\n \t\t\t\t\t\t\t\t\t\tsetCompletionIfNotAlreadySet(duccWorkJob, JobCompletionType.Error, new Rationale(\"state manager detected error work items=\"+errors));\n \t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\telse if(done == 0) {\n+\t\t\t\t\t\t\t\t\t\tsetCompletionIfNotAlreadySet(duccWorkJob, JobCompletionType.EndOfJob, new Rationale(\"state manager detected no work items processed\"));\n+\t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t\telse {\n \t\t\t\t\t\t\t\t\t\tsetCompletionIfNotAlreadySet(duccWorkJob, JobCompletionType.EndOfJob, new Rationale(\"state manager detected normal completion\"));\n \t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\tcatch(Exception e) {\n \t\t\t\t\t\t\t\t\tlogger.error(methodName, duccId, e);\n \t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\tfinally {\n-\t\t\t\t\t\t\t\t\tsetCompletionIfNotAlreadySet(duccWorkJob, JobCompletionType.EndOfJob, new Rationale(\"state manager detected normal completion\"));\n-\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\tbreak;\n \t\t\t\t\t\t\tdefault:\n \t\t\t\t\t\t\t\tsetCompletionIfNotAlreadySet(duccWorkJob, jdStatusReport);\n@@ -1484,9 +1485,13 @@ public void reconcileState(HashMap<DuccId, IDuccProcess> inventoryProcessMap) {\n \t\t\t\t\t\t\t\t\t\t\tOrchestratorCommonArea.getInstance().getProcessAccounting().deallocate(job,ProcessDeallocationType.Stopped);\n \t\t\t\t\t\t\t\t\t\t\tIRationale rationale = new Rationale(\"state manager reported as normal completion\");\n \t\t\t\t\t\t\t\t\t\t\tint errors = job.getSchedulingInfo().getIntWorkItemsError();\n+\t\t\t\t\t\t\t\t\t\t\tint done = job.getSchedulingInfo().getIntWorkItemsCompleted();\n \t\t\t\t\t\t\t\t\t\t\tif(errors > 0) {\n \t\t\t\t\t\t\t\t\t\t\t\tsetCompletionIfNotAlreadySet(job, JobCompletionType.Error, new Rationale(\"state manager detected error work items=\"+errors));\n \t\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t\t\telse if(done == 0) {\n+\t\t\t\t\t\t\t\t\t\t\t\tsetCompletionIfNotAlreadySet(job, JobCompletionType.EndOfJob, new Rationale(\"state manager detected no work items processed\"));\n+\t\t\t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t\t\t\t// <UIMA-3337>\n \t\t\t\t\t\t\t\t\t\t\telse {\n \t\t\t\t\t\t\t\t\t\t\t\tsetCompletionIfNotAlreadySet(job, JobCompletionType.EndOfJob, rationale);", "filename": "uima-ducc-orchestrator/src/main/java/org/apache/uima/ducc/orchestrator/StateManager.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/4e35883231f46f5035236230cbdb459ae90aed96", "parent": "https://github.com/apache/uima-ducc/commit/9dc686e61d0112704924a63ad271fe5708ac02e0", "message": "UIMA-4775 DUCC Resource Manager (RM) NPE in JobManagerConverter (during mega test)\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1727623 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_22", "file": [{"additions": 20, "raw_url": "https://github.com/apache/uima-ducc/raw/4e35883231f46f5035236230cbdb459ae90aed96/uima-ducc-rm/src/main/java/org/apache/uima/ducc/rm/JobManagerConverter.java", "blob_url": "https://github.com/apache/uima-ducc/blob/4e35883231f46f5035236230cbdb459ae90aed96/uima-ducc-rm/src/main/java/org/apache/uima/ducc/rm/JobManagerConverter.java", "sha": "180a04172333942520f4be338a8b9f5270d30947", "changes": 35, "status": "modified", "deletions": 15, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-rm/src/main/java/org/apache/uima/ducc/rm/JobManagerConverter.java?ref=4e35883231f46f5035236230cbdb459ae90aed96", "patch": "@@ -725,21 +725,26 @@ public void reconcileProcesses(DuccId jobid, IDuccWork l, IDuccWork r)\n \n             Share s = scheduler.getShare(p.getDuccId());\n \n-            long mem = p.getResidentMemory();\n-            long investment = p.getWiMillisInvestment();\n-            ProcessState state = p.getProcessState();\n-            String pid = p.getPID();\n-\n-            logger.info(methodName, jobid, \"New process \", s.toString(), mem, state, pid);\n-            if ( ! s.update(jobid, mem, investment, state, p.getTimeWindowInit(), pid) ) {\n-                // TODO: probably change to just a warning and cancel the job - for now I want an attention-getter\n-                throw new SchedulingException(jobid, \"Process assignemnt arrives for share \" + s.toString() +\n-                                              \" but jobid \" + jobid + \" does not match share \" + s.getJob().getId());\n+            if(s != null) {\n+            \tlong mem = p.getResidentMemory();\n+                long investment = p.getWiMillisInvestment();\n+                ProcessState state = p.getProcessState();\n+                String pid = p.getPID();\n+\n+                logger.info(methodName, jobid, \"New process \", s.toString(), mem, state, pid);\n+                if ( ! s.update(jobid, mem, investment, state, p.getTimeWindowInit(), pid) ) {\n+                    // TODO: probably change to just a warning and cancel the job - for now I want an attention-getter\n+                    throw new SchedulingException(jobid, \"Process assignemnt arrives for share \" + s.toString() +\n+                                                  \" but jobid \" + jobid + \" does not match share \" + s.getJob().getId());\n+                }\n+                //scheduler.signalGrowth(jobid, s);\n+                // sadly, the pid is almost always null here\n+                //logger.info(methodName, jobid, \n+                //            \"New process arrives for share\", s.toString(), \"PID\", pid);\n+            }\n+            else {\n+            \tlogger.warn(methodName, jobid, p.getDuccId(), \"share not found?\");\n             }\n-            //scheduler.signalGrowth(jobid, s);\n-            // sadly, the pid is almost always null here\n-            //logger.info(methodName, jobid, \n-            //            \"New process arrives for share\", s.toString(), \"PID\", pid);\n         }\n             \n         // gone stuff in in the right side of the map\n@@ -809,7 +814,7 @@ public void reconcileProcesses(DuccId jobid, IDuccWork l, IDuccWork r)\n                 }\n                 if ( pl.getProcessState() != pr.getProcessState() ) {\n                     logger.info(methodName, jobid, \n-                                String.format(\"Process %5s\", pl.getPID()), sl.toString(),\n+                                String.format(\"Process %5s\", pl.getPID()), shareL,\n                                 \"State:\", pr.getProcessState(), \"->\", pl.getProcessState(),\n                                 getElapsedTime(pr.getTimeWindowInit()), getElapsedTime(pr.getTimeWindowRun()));\n                 }", "filename": "uima-ducc-rm/src/main/java/org/apache/uima/ducc/rm/JobManagerConverter.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/5c15ff50c85e729945c61459cd9690cbd76de729", "parent": "https://github.com/apache/uima-ducc/commit/dcf98339a3c77ad2ecbdf0f3501d6fafa29c5758", "message": "UIMA-4532 DUCC OR+WS expunge \"shares\"\n\nFix exceptions (NPE) when using legacy ckpt and history.\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1703993 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_23", "file": [{"additions": 17, "raw_url": "https://github.com/apache/uima-ducc/raw/5c15ff50c85e729945c61459cd9690cbd76de729/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/event/common/DuccSchedulingInfo.java", "blob_url": "https://github.com/apache/uima-ducc/blob/5c15ff50c85e729945c61459cd9690cbd76de729/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/event/common/DuccSchedulingInfo.java", "sha": "aa0c1219528aad503ede54beb6b22f110e9165b1", "changes": 22, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/event/common/DuccSchedulingInfo.java?ref=5c15ff50c85e729945c61459cd9690cbd76de729", "patch": "@@ -141,14 +141,18 @@ public long getMemorySizeInBytes() {\n \t\t}\n \t\treturn retVal;\n \t}\n-\t\n+*/\n \t\n \t@Deprecated\n \tpublic String getMemorySize() {\n-\t\treturn memorySize;\n+\t\tString retVal = defaultMemorySize;\n+\t\tif(memorySize != null) {\n+\t\t\tretVal = memorySize;\n+\t\t}\n+\t\treturn retVal;\n \t}\n \n-\t\n+/*\n \t@Deprecated\n \tpublic void setMemorySize(String size) {\n \t\tif(size != null) {\n@@ -159,7 +163,11 @@ public void setMemorySize(String size) {\n \t\n \t\n \tpublic String getMemorySizeRequested() {\n-\t\treturn memorySizeRequested;\n+\t\tString retVal = memorySizeRequested;\n+\t\tif(retVal == null) {\n+\t\t\tretVal = getMemorySize();\n+\t\t}\n+\t\treturn retVal;\n \t}\n \n \t\n@@ -181,7 +189,11 @@ public void setMemorySizeAllocatedInBytes(long value) {\n \t\n \t\n \tpublic MemoryUnits getMemoryUnits() {\n-\t\treturn memoryUnits;\n+\t\tMemoryUnits retVal = MemoryUnits.GB;\n+\t\tif(memoryUnits != null) {\n+\t\t\tretVal = memoryUnits;\n+\t\t}\n+\t\treturn retVal;\n \t}\n \n \t", "filename": "uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/event/common/DuccSchedulingInfo.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/2cf8e8b919a3553a6c211ee5a4d267ba9368d5f9", "parent": "https://github.com/apache/uima-ducc/commit/7cb13d831b982b9cc3246b9433c8de7dc99e9d5d", "message": "UIMA-4498 DUCC Web Server (WS) NPE during monitor processing\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1688654 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_24", "file": [{"additions": 7, "raw_url": "https://github.com/apache/uima-ducc/raw/2cf8e8b919a3553a6c211ee5a4d267ba9368d5f9/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebMonitorJob.java", "blob_url": "https://github.com/apache/uima-ducc/blob/2cf8e8b919a3553a6c211ee5a4d267ba9368d5f9/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebMonitorJob.java", "sha": "2acdb5fc1642e7bc33beacb6ee0ee266701cfb9a", "changes": 11, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebMonitorJob.java?ref=2cf8e8b919a3553a6c211ee5a4d267ba9368d5f9", "patch": "@@ -122,10 +122,13 @@ protected void monitor(OrchestratorStateDuccEvent duccEvent) {\n \t\t\t}\n \t\t\t\n \t\t\tArrayList<String> stateSequence = monitorInfo.stateSequence;\n-\t\t\tString state = dwj.getJobState().toString();\n-\t\t\tif(!stateSequence.contains(state)) {\n-\t\t\t\tduccLogger.info(location, duccId, \"state: \"+state);\n-\t\t\t\tstateSequence.add(state);\n+\t\t\tJobState jobState = dwj.getJobState();\n+\t\t\tif(jobState != null) {\n+\t\t\t\tString state = jobState.toString();\n+\t\t\t\tif(!stateSequence.contains(state)) {\n+\t\t\t\t\tduccLogger.info(location, duccId, \"state: \"+state);\n+\t\t\t\t\tstateSequence.add(state);\n+\t\t\t\t}\n \t\t\t}\n \t\t\t\n \t\t\tIRationale rationale = dwj.getCompletionRationale();", "filename": "uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebMonitorJob.java"}, {"additions": 7, "raw_url": "https://github.com/apache/uima-ducc/raw/2cf8e8b919a3553a6c211ee5a4d267ba9368d5f9/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebMonitorManagedReservation.java", "blob_url": "https://github.com/apache/uima-ducc/blob/2cf8e8b919a3553a6c211ee5a4d267ba9368d5f9/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebMonitorManagedReservation.java", "sha": "1a1bbcdea11c39b0797a81e03c655dbd93a19713", "changes": 11, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebMonitorManagedReservation.java?ref=2cf8e8b919a3553a6c211ee5a4d267ba9368d5f9", "patch": "@@ -113,10 +113,13 @@ protected void monitor(OrchestratorStateDuccEvent duccEvent) {\n \t\t\tmonitorInfo.remotePids = DuccWebUtil.getRemotePids(duccId, map);\n \t\t\t\n \t\t\tArrayList<String> stateSequence = monitorInfo.stateSequence;\n-\t\t\tString state = dwr.getJobState().toString();\n-\t\t\tif(!stateSequence.contains(state)) {\n-\t\t\t\tduccLogger.info(location, duccId, \"state: \"+state);\n-\t\t\t\tstateSequence.add(state);\n+\t\t\tJobState jobState = dwr.getJobState();\n+\t\t\tif(jobState != null) {\n+\t\t\t\tString state = jobState.toString();\n+\t\t\t\tif(!stateSequence.contains(state)) {\n+\t\t\t\t\tduccLogger.info(location, duccId, \"state: \"+state);\n+\t\t\t\t\tstateSequence.add(state);\n+\t\t\t\t}\n \t\t\t}\n \t\t\t\n \t\t\tString text = null;", "filename": "uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebMonitorManagedReservation.java"}, {"additions": 8, "raw_url": "https://github.com/apache/uima-ducc/raw/2cf8e8b919a3553a6c211ee5a4d267ba9368d5f9/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebMonitorReservation.java", "blob_url": "https://github.com/apache/uima-ducc/blob/2cf8e8b919a3553a6c211ee5a4d267ba9368d5f9/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebMonitorReservation.java", "sha": "1b8c0cdc985b032b261a8daaaf65fb3563ceed60", "changes": 12, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebMonitorReservation.java?ref=2cf8e8b919a3553a6c211ee5a4d267ba9368d5f9", "patch": "@@ -36,6 +36,7 @@\n import org.apache.uima.ducc.transport.event.common.DuccWorkReservation;\n import org.apache.uima.ducc.transport.event.common.IDuccProcess;\n import org.apache.uima.ducc.transport.event.common.IDuccState.JobState;\n+import org.apache.uima.ducc.transport.event.common.IDuccState.ReservationState;\n import org.apache.uima.ducc.transport.event.common.IDuccWork;\n import org.apache.uima.ducc.transport.event.common.IDuccWorkMap;\n import org.apache.uima.ducc.transport.event.common.IRationale;\n@@ -227,10 +228,13 @@ public MonitorInfo renew(String jobId, AtomicInteger updateCounter) {\n \t\tDuccWorkReservation dwr = (DuccWorkReservation) dw;\n \t\t\n \t\tArrayList<String> stateSequence = monitorInfo.stateSequence;\n-\t\tString state = dwr.getReservationState().toString();\n-\t\tif(!stateSequence.contains(state)) {\n-\t\t\tduccLogger.info(location, duccId, \"state: \"+state);\n-\t\t\tstateSequence.add(state);\n+\t\tReservationState reservationState = dwr.getReservationState();\n+\t\tif(reservationState != null) {\n+\t\t\tString state = reservationState.toString();\n+\t\t\tif(!stateSequence.contains(state)) {\n+\t\t\t\tduccLogger.info(location, duccId, \"state: \"+state);\n+\t\t\t\tstateSequence.add(state);\n+\t\t\t}\n \t\t}\n \t\t\n \t\tmonitorInfo.nodes = dwr.getNodes();", "filename": "uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebMonitorReservation.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/233550f8746bf5db21497047a59130d381b6ce46", "parent": "https://github.com/apache/uima-ducc/commit/0581f85b71bde3b7084485c9e723281b165505ca", "message": "UIMA-4404 DUCC Orchestrator (OR) reduce publication size comprising command line & especially classpath\n\nFix another NPE in ProcessManagerComponent.\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1683148 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_25", "file": [{"additions": 7, "raw_url": "https://github.com/apache/uima-ducc/raw/233550f8746bf5db21497047a59130d381b6ce46/uima-ducc-pm/src/main/java/org/apache/uima/ducc/pm/ProcessManagerComponent.java", "blob_url": "https://github.com/apache/uima-ducc/blob/233550f8746bf5db21497047a59130d381b6ce46/uima-ducc-pm/src/main/java/org/apache/uima/ducc/pm/ProcessManagerComponent.java", "sha": "4433925782b6829ee70ade911ff04dc4033f21e2", "changes": 13, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-pm/src/main/java/org/apache/uima/ducc/pm/ProcessManagerComponent.java?ref=233550f8746bf5db21497047a59130d381b6ce46", "patch": "@@ -277,17 +277,18 @@ private void dumpState(Map<DuccId, IDuccWork> workMap) {\n \t\t\t\tIDuccWork duccWork = job.getValue();\n \t\t\t\tif ( duccWork instanceof DuccWorkJob ) {\n \t\t\t\t\tDuccWorkJob duccWorkJob = (DuccWorkJob)duccWork;\n-\t\t\t\t\t//\tBelow should never be null\n-\t\t\t\t\tIDuccProcess driverProcess =\n-\t\t\t\t\t\t\tduccWorkJob.getDriver().getProcessMap().entrySet().iterator().next().getValue();\n \t\t\t\t\tsb.append(\"\\n\").append(tbl).\n \t\t\t\t\t   append(\"\\nJob ID: \").append(duccWorkJob.getDuccId().getFriendly()).\n \t\t\t\t\t   append(\"\\tJobState: \").append(duccWorkJob.getStateObject()).\n \t\t\t\t\t   append(\"\\tJobSubmittedBy: \").append(duccWorkJob.getStandardInfo().getUser()).\n \t\t\t\t\t   append(\"\\n\\n\").\n-\t\t\t\t\t   append(header).append(tbl).append(\"\\n\").\n-\t\t\t\t\t   append(formatProcess(driverProcess));\n-\t\t\t\t\t\n+\t\t\t\t\t   append(header).append(tbl).append(\"\\n\");\n+\t\t\t\t\tDuccWorkPopDriver driver = duccWorkJob.getDriver();\n+\t\t\t\t\tif(driver != null) {\n+\t\t\t\t\t\tIDuccProcess driverProcess =\n+\t\t\t\t\t\t\tdriver.getProcessMap().entrySet().iterator().next().getValue();\n+\t\t\t\t\t\t\tsb.append(formatProcess(driverProcess));\n+\t\t\t\t\t}\n \t\t\t\t\tfor(Entry<DuccId,IDuccProcess> process : ((DuccWorkJob)job.getValue()).getProcessMap().entrySet()) {\n \t\t\t\t\t\tsb.append(\"\\n\").append(formatProcess(process.getValue()));\n \t\t\t\t\t}", "filename": "uima-ducc-pm/src/main/java/org/apache/uima/ducc/pm/ProcessManagerComponent.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/ade4815f80f5b5be9450feaf9526707064e3e897", "parent": "https://github.com/apache/uima-ducc/commit/88b89085ed7b981e382783948d687c064dcabf66", "message": "UIMA-4404 DUCC Orchestrator (OR) reduce publication size comprising command line & especially classpath\n\nFix NPE in ProcessManagerComponent.\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1683122 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_26", "file": [{"additions": 6, "raw_url": "https://github.com/apache/uima-ducc/raw/ade4815f80f5b5be9450feaf9526707064e3e897/uima-ducc-pm/src/main/java/org/apache/uima/ducc/pm/ProcessManagerComponent.java", "blob_url": "https://github.com/apache/uima-ducc/blob/ade4815f80f5b5be9450feaf9526707064e3e897/uima-ducc-pm/src/main/java/org/apache/uima/ducc/pm/ProcessManagerComponent.java", "sha": "65f2b9cdc44a8d3a37a492ac751d0d274c741a9e", "changes": 8, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-pm/src/main/java/org/apache/uima/ducc/pm/ProcessManagerComponent.java?ref=ade4815f80f5b5be9450feaf9526707064e3e897", "patch": "@@ -40,6 +40,7 @@\n import org.apache.uima.ducc.transport.event.common.DuccUserReservation;\n import org.apache.uima.ducc.transport.event.common.DuccWorkJob;\n import org.apache.uima.ducc.transport.event.common.DuccWorkPop;\n+import org.apache.uima.ducc.transport.event.common.DuccWorkPopDriver;\n import org.apache.uima.ducc.transport.event.common.DuccWorkReservation;\n import org.apache.uima.ducc.transport.event.common.IDuccJobDeployment;\n import org.apache.uima.ducc.transport.event.common.IDuccProcess;\n@@ -191,9 +192,12 @@ public void dispatchStateUpdateToAgents(Map<DuccId, IDuccWork> workMap, long seq\n \t          logger.debug(methodName, dcj.getDuccId(), \"case: Job\");\n \t          dw = dwHelper.fetch(dcj.getDuccId());\n \t          IDuccWorkJob job = (IDuccWorkJob) dw;\n-\t          driverCmdLine = job.getDriver().getCommandLine();\n+\t          DuccWorkPopDriver driver = job.getDriver();\n+\t\t\t  if(driver != null) {\n+\t\t\t\t  driverCmdLine = driver.getCommandLine();\n+\t\t\t\t  driverProcess = driver.getProcessMap().entrySet().iterator().next().getValue();\n+\t\t\t  }\n \t          processCmdLine = job.getCommandLine();\n-\t          driverProcess = dcj.getDriver().getProcessMap().entrySet().iterator().next().getValue();\n \t          break;\n \t        case Service:\n \t          logger.debug(methodName, dcj.getDuccId(), \"case: Service\");", "filename": "uima-ducc-pm/src/main/java/org/apache/uima/ducc/pm/ProcessManagerComponent.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/133f242fc6a7ba0b2e7eab1314e79f994c64e089", "parent": "https://github.com/apache/uima-ducc/commit/ad5264b9c71c0af5a2665ca5540ef39f950d38e7", "message": "UIMA-4066 Fixed NPE triggered by an empty msg sent by JD\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1673178 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_27", "file": [{"additions": 9, "raw_url": "https://github.com/apache/uima-ducc/raw/133f242fc6a7ba0b2e7eab1314e79f994c64e089/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configuration/jp/HttpWorkerThread.java", "blob_url": "https://github.com/apache/uima-ducc/blob/133f242fc6a7ba0b2e7eab1314e79f994c64e089/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configuration/jp/HttpWorkerThread.java", "sha": "32d12364d3bbd149e1a7277b0c41cbcf40496524", "changes": 18, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configuration/jp/HttpWorkerThread.java?ref=133f242fc6a7ba0b2e7eab1314e79f994c64e089", "patch": "@@ -164,19 +164,19 @@ public void run() {\n                     // The JD may not provide a Work Item to process.\n \t\t\t    \tif ( transaction.getMetaCas()!= null) {\n     \t\t\t\t\tlogger.info(\"run\", null,\"Thread:\"+Thread.currentThread().getId()+\" Recv'd WI:\"+transaction.getMetaCas().getSystemKey());\n+    \t\t\t\t\t// Confirm receipt of the CAS. \n+    \t\t\t\t\ttransaction.setType(Type.Ack);\n+    \t\t\t\t\tcommand = Type.Ack.name();\n+    \t\t\t\t\ttid = new TransactionId(major, minor++);\n+    \t\t\t\t\ttransaction.setTransactionId(tid);\n+    \t\t\t\t\tlogger.debug(\"run\", null,\"Thread:\"+Thread.currentThread().getId()+\" Sending ACK request - WI:\"+transaction.getMetaCas().getSystemKey());\n+    \t\t\t\t\thttpClient.execute(transaction, postMethod); \n+    \t\t\t\t\t\n+                        logger.debug(\"run\", null,\"Thread:\"+Thread.currentThread().getId()+\" ACK reply recv'd\");\n                     } else {\n     \t\t\t\t\tlogger.debug(\"run\", null,\"Thread:\"+Thread.currentThread().getId()+\" Recv'd JD Response, however there is no MetaCas. Sleeping for \"+duccComponent.getThreadSleepTime());\n                     }\n \n-\t\t\t\t\t// Confirm receipt of the CAS. \n-\t\t\t\t\ttransaction.setType(Type.Ack);\n-\t\t\t\t\tcommand = Type.Ack.name();\n-\t\t\t\t\ttid = new TransactionId(major, minor++);\n-\t\t\t\t\ttransaction.setTransactionId(tid);\n-\t\t\t\t\tlogger.debug(\"run\", null,\"Thread:\"+Thread.currentThread().getId()+\" Sending ACK request - WI:\"+transaction.getMetaCas().getSystemKey());\n-\t\t\t\t\thttpClient.execute(transaction, postMethod); \n-\t\t\t\t\t\n-                    logger.debug(\"run\", null,\"Thread:\"+Thread.currentThread().getId()+\" ACK reply recv'd\");\n                     \n \t\t\t\t\t// if the JD did not provide a Work Item, most likely the CR is\n \t\t\t\t\t// done. In such case, reduce frequency of Get requests", "filename": "uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configuration/jp/HttpWorkerThread.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/1d5b0540424ceadbe4d32d257229f396f805215c", "parent": "https://github.com/apache/uima-ducc/commit/0e794fa4f784913446119d4e77136ce169fefa8b", "message": "UIMA-4303 DUCC Web Server (WS) fix NPE\n\n[or]\n\n- default (machine) reservation class should be Reserve, not Fixed\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1668961 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_28", "file": [{"additions": 48, "raw_url": "https://github.com/apache/uima-ducc/raw/1d5b0540424ceadbe4d32d257229f396f805215c/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/event/common/DuccProcessWorkItems.java", "blob_url": "https://github.com/apache/uima-ducc/blob/1d5b0540424ceadbe4d32d257229f396f805215c/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/event/common/DuccProcessWorkItems.java", "sha": "941b3720568810486cfe157c55f9109e59a8725d", "changes": 57, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/event/common/DuccProcessWorkItems.java?ref=1d5b0540424ceadbe4d32d257229f396f805215c", "patch": "@@ -129,35 +129,74 @@ public void setMillisMin(long value) {\n \t}\n \t@Override\n \tpublic long getMillisAvg() {\n-\t\treturn doneMillisAvg.get();\n+\t\tlong retVal = 0;\n+\t\ttry {\n+\t\t\tretVal = doneMillisAvg.get();\n+\t\t}\n+\t\tcatch(Exception e) {\n+\t\t\t// oh well\n+\t\t}\n+\t\treturn retVal;\n \t}\n \n \t@Override\n \tpublic long getMillisMax() {\n-\t\treturn doneMillisMax.get();\n+\t\tlong retVal = 0;\n+\t\ttry {\n+\t\t\tretVal = doneMillisMax.get();\n+\t\t}\n+\t\tcatch(Exception e) {\n+\t\t\t// oh well\n+\t\t}\n+\t\treturn retVal;\n \t}\n \n \t@Override\n \tpublic long getMillisMin() {\n-\t\treturn doneMillisMin.get();\n+\t\tlong retVal = 0;\n+\t\ttry {\n+\t\t\tretVal = doneMillisMin.get();\n+\t\t}\n+\t\tcatch(Exception e) {\n+\t\t\t// oh well\n+\t\t}\n+\t\treturn retVal;\n \t}\n \n \t@Override\n \tpublic long getSecsAvg() {\n-\t\tdouble value = doneMillisAvg.get()/1000.0;\n-\t\treturn (long) value;\n+\t\tdouble retVal = 0;\n+\t\ttry {\n+\t\t\tretVal = doneMillisAvg.get()/1000.0;\n+\t\t}\n+\t\tcatch(Exception e) {\n+\t\t\t// oh well\n+\t\t}\n+\t\treturn (long) retVal;\n \t}\n \n \t@Override\n \tpublic long getSecsMax() {\n-\t\tdouble value = doneMillisMax.get()/1000.0;\n-\t\treturn (long) value;\n+\t\tdouble retVal = 0;\n+\t\ttry {\n+\t\t\tretVal = doneMillisMax.get()/1000.0;\n+\t\t}\n+\t\tcatch(Exception e) {\n+\t\t\t// oh well\n+\t\t}\n+\t\treturn (long) retVal;\n \t}\n \n \t@Override\n \tpublic long getSecsMin() {\n-\t\tdouble value = doneMillisMin.get()/1000.0;\n-\t\treturn (long) value;\n+\t\tdouble retVal = 0;\n+\t\ttry {\n+\t\t\tretVal = doneMillisMin.get()/1000.0;\n+\t\t}\n+\t\tcatch(Exception e) {\n+\t\t\t// oh well\n+\t\t}\n+\t\treturn (long) retVal;\n \t}\n \n }", "filename": "uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/event/common/DuccProcessWorkItems.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/c728f2a336cabdf4afeb4d73583713cba8672334", "parent": "https://github.com/apache/uima-ducc/commit/fc9cee25337205373ac6d3e1fb5bd7191ad2d404", "message": "UIMA-4275 Fix NPE if ducc.users is not passed in to configuration.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1664995 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_29", "file": [{"additions": 1, "raw_url": "https://github.com/apache/uima-ducc/raw/c728f2a336cabdf4afeb4d73583713cba8672334/uima-ducc-common/src/main/java/org/apache/uima/ducc/common/NodeConfiguration.java", "blob_url": "https://github.com/apache/uima-ducc/blob/c728f2a336cabdf4afeb4d73583713cba8672334/uima-ducc-common/src/main/java/org/apache/uima/ducc/common/NodeConfiguration.java", "sha": "fab8479bbe547e2777a740f8bbf9c45c8a6c330d", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-common/src/main/java/org/apache/uima/ducc/common/NodeConfiguration.java?ref=c728f2a336cabdf4afeb4d73583713cba8672334", "patch": "@@ -159,6 +159,7 @@ public NodeConfiguration(String config_file_name, String ducc_nodes, String ducc\n     String resolve(String file)\n         throws IllegalConfigurationException\n     {\n+    \t\tif ( file == null ) return null;\n         if ( !file.startsWith(\"/\") ) {\n             file = ducc_home + \"/resources/\" + file;\n         }", "filename": "uima-ducc-common/src/main/java/org/apache/uima/ducc/common/NodeConfiguration.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/4a08f9fb18df7dbbb84b8d96da3784f3069314fc", "parent": "https://github.com/apache/uima-ducc/commit/8f5850dcfbbc9d092abf0e6bfcced2048d39f6e7", "message": "UIMA-4066 fixed NPE when the DD job deploy fails due to missing descriptor\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1653964 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_30", "file": [{"additions": 25, "raw_url": "https://github.com/apache/uima-ducc/raw/4a08f9fb18df7dbbb84b8d96da3784f3069314fc/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configurator/jp/JobProcessComponent.java", "blob_url": "https://github.com/apache/uima-ducc/blob/4a08f9fb18df7dbbb84b8d96da3784f3069314fc/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configurator/jp/JobProcessComponent.java", "sha": "f0450ab64804de858d9a8745c4506b7b30c14297", "changes": 45, "status": "modified", "deletions": 20, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configurator/jp/JobProcessComponent.java?ref=4a08f9fb18df7dbbb84b8d96da3784f3069314fc", "patch": "@@ -239,25 +239,28 @@ public void start(DuccService service, String[] args) throws Exception {\n \t\t    \t\ttpe.shutdown();\r\n \t\t    \t\ttpe.awaitTermination(0, TimeUnit.MILLISECONDS);\r\n \t\t    \t}\r\n-\t\t    \tworkerThreadCount.await();\r\n \t\t    \t\r\n-\t\t    \t// Determine if the process container requires thread affinity to AE instance.\r\n-\t\t    \t// If it does, the worker thread has already called stop() which in\r\n-\t\t    \t// turn called AE.destroy(). If the process container has no thread \r\n-\t\t    \t// affinity, call stop() here to make sure the cleanup code shuts down\r\n-\t\t    \t// internal components.\r\n-\t\t    \tMethod useThreadAffinityMethod = processorInstance.getClass().getDeclaredMethod(\"useThreadAffinity\");\t\r\n-\t\t\t\tboolean useThreadAffinity =\r\n-\t\t\t\t\t\t(Boolean)useThreadAffinityMethod.invoke(processorInstance);\r\n-\t\t\t\tif ( !useThreadAffinity) {\r\n-\t\t\t\t\tMethod deployMethod = processorInstance.getClass().getDeclaredMethod(\"stop\");\r\n-\t\t\t\t\tdeployMethod.invoke(processorInstance);\r\n-\t\t\t\t}\r\n-\t\t    \t\r\n-\t\t    \t\r\n-\t\t    \t// Stop process container\r\n-\t\t\t\tMethod stopMethod = processorInstance.getClass().getDeclaredMethod(\"stop\");\r\n-\t\t\t\tstopMethod.invoke(processorInstance);\r\n+\t\t    \tif ( workerThreadCount != null ) {\r\n+\t\t\t    \tworkerThreadCount.await();\r\n+\t\t\t    \t\r\n+\t\t\t    \t// Determine if the process container requires thread affinity to AE instance.\r\n+\t\t\t    \t// If it does, the worker thread has already called stop() which in\r\n+\t\t\t    \t// turn called AE.destroy(). If the process container has no thread \r\n+\t\t\t    \t// affinity, call stop() here to make sure the cleanup code shuts down\r\n+\t\t\t    \t// internal components.\r\n+\t\t\t    \tMethod useThreadAffinityMethod = processorInstance.getClass().getDeclaredMethod(\"useThreadAffinity\");\t\r\n+\t\t\t\t\tboolean useThreadAffinity =\r\n+\t\t\t\t\t\t\t(Boolean)useThreadAffinityMethod.invoke(processorInstance);\r\n+\t\t\t\t\tif ( !useThreadAffinity) {\r\n+\t\t\t\t\t\tMethod deployMethod = processorInstance.getClass().getDeclaredMethod(\"stop\");\r\n+\t\t\t\t\t\tdeployMethod.invoke(processorInstance);\r\n+\t\t\t\t\t}\r\n+\t\t\t    \t\r\n+\t\t\t    \t\r\n+\t\t\t    \t// Stop process container\r\n+\t\t\t\t\tMethod stopMethod = processorInstance.getClass().getDeclaredMethod(\"stop\");\r\n+\t\t\t\t\tstopMethod.invoke(processorInstance);\r\n+\t\t    \t}\r\n \t\t\t\tstop();\r\n \t\t    }\r\n \t\t} catch( Exception e) {\r\n@@ -287,8 +290,10 @@ public void stop() {\n \r\n \t\tSystem.out.println(\"... JobProcessComponent - Stopping Service Adapter\");\r\n \t    try {\r\n-        \t// block until all worker threads exit run()\r\n-        \tworkerThreadCount.await();\r\n+\t    \tif ( workerThreadCount != null ) {\r\n+\t        \t// block until all worker threads exit run()\r\n+\t        \tworkerThreadCount.await();\r\n+\t    \t}\r\n         \t\r\n \t\t\t// Stop executor. It was only needed to poll AE initialization status.\r\n \t\t\t// Since deploy() completed\r", "filename": "uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configurator/jp/JobProcessComponent.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/e9aef20c9258ac2a9eab66b54c9c1783a3f2bae8", "parent": "https://github.com/apache/uima-ducc/commit/a76ac6b44cca47d04a07d35587f89c5e13ce5bd1", "message": "UIMA-4066 fixed NPE caused by misconfiguration in UimaASProcessContainer\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1651384 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_31", "file": [{"additions": 2, "raw_url": "https://github.com/apache/uima-ducc/raw/e9aef20c9258ac2a9eab66b54c9c1783a3f2bae8/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configurator/jp/HttpWorkerThread.java", "blob_url": "https://github.com/apache/uima-ducc/blob/e9aef20c9258ac2a9eab66b54c9c1783a3f2bae8/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configurator/jp/HttpWorkerThread.java", "sha": "2557fe7d1f373d83ddbb52573d1eb582bf72233e", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configurator/jp/HttpWorkerThread.java?ref=e9aef20c9258ac2a9eab66b54c9c1783a3f2bae8", "patch": "@@ -261,8 +261,8 @@ public void run() {\n \t\t\t\tboolean useThreadAffinity =\n \t\t\t\t\t\t(Boolean)useThreadAffinityMethod.invoke(processorInstance);\n \t\t\t\tif ( useThreadAffinity) {\n-\t\t\t\t\tMethod deployMethod = processorInstance.getClass().getDeclaredMethod(\"stop\");\n-\t\t\t\t\tdeployMethod.invoke(processorInstance);\n+\t\t\t\t\tMethod stopMethod = processorInstance.getClass().getDeclaredMethod(\"stop\");\n+\t\t\t\t\tstopMethod.invoke(processorInstance);\n \t\t\t\t}\n \t\t   \t} catch( Throwable t) {\n \t\t   \t\tt.printStackTrace();", "filename": "uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configurator/jp/HttpWorkerThread.java"}, {"additions": 1, "raw_url": "https://github.com/apache/uima-ducc/raw/e9aef20c9258ac2a9eab66b54c9c1783a3f2bae8/uima-ducc-user/src/main/java/org/apache/uima/ducc/user/jp/UimaASProcessContainer.java", "blob_url": "https://github.com/apache/uima-ducc/blob/e9aef20c9258ac2a9eab66b54c9c1783a3f2bae8/uima-ducc-user/src/main/java/org/apache/uima/ducc/user/jp/UimaASProcessContainer.java", "sha": "d3b3a5d6cbd26765a05a2f00c9f9e3f137504d9a", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-user/src/main/java/org/apache/uima/ducc/user/jp/UimaASProcessContainer.java?ref=e9aef20c9258ac2a9eab66b54c9c1783a3f2bae8", "patch": "@@ -76,7 +76,7 @@\n     private String[] deploymentDescriptors = null;\n \tprivate String[] ids = null;\n    \n-    private volatile boolean threadAffinity=true;\n+    private volatile boolean threadAffinity=false;\n \t    \n \tpublic boolean useThreadAffinity() {\n \t  return threadAffinity;", "filename": "uima-ducc-user/src/main/java/org/apache/uima/ducc/user/jp/UimaASProcessContainer.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/e633bc1704737b1f8c0f862327f34d1a346c426d", "parent": "https://github.com/apache/uima-ducc/commit/9a646e2439df86846ce9ab1a968e62a758647cc6", "message": "UIMA-4069 DUCC Job Driver (JD) system classpath\n\nDon't NPE when Perf. Metrics missing\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1650144 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_32", "file": [{"additions": 38, "raw_url": "https://github.com/apache/uima-ducc/raw/e633bc1704737b1f8c0f862327f34d1a346c426d/uima-ducc-container/src/main/java/org/apache/uima/ducc/container/jd/fsm/wi/ActionEnd.java", "blob_url": "https://github.com/apache/uima-ducc/blob/e633bc1704737b1f8c0f862327f34d1a346c426d/uima-ducc-container/src/main/java/org/apache/uima/ducc/container/jd/fsm/wi/ActionEnd.java", "sha": "6683d21d4eb8474fc41e526d9ed501b8c64d7cdf", "changes": 68, "status": "modified", "deletions": 30, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-container/src/main/java/org/apache/uima/ducc/container/jd/fsm/wi/ActionEnd.java?ref=e633bc1704737b1f8c0f862327f34d1a346c426d", "patch": "@@ -132,39 +132,47 @@ private void updateStatistics(IActionData actionData, IWorkItem wi) {\n \t\n \tprivate void updatePerformanceMetrics(IActionData actionData, IWorkItem wi) {\n \t\tString location = \"updatePerformanceMetrics\";\n-\t\tIMetaCas metaCas = wi.getMetaCas();\n-\t\tIPerformanceMetrics performanceMetrics = metaCas.getPerformanceMetrics();\n-\t\tList<Properties> list = performanceMetrics.get();\n-\t\tint size = 0;\n-\t\tif(list !=  null) {\n-\t\t\tsize = list.size();\n-\t\t\tJobDriver jd = JobDriver.getInstance();\n-\t\t\tIWorkItemPerformanceKeeper wipk = jd.getWorkItemPerformanceKeeper();\n-\t\t\tfor(Properties properties : list) {\n-\t\t\t\tString name = properties.getProperty(keyName);\n-\t\t\t\tString uniqueName = properties.getProperty(keyUniqueName);\n-\t\t\t\tString analysisTime = properties.getProperty(keyAnalysisTime);\n-\t\t\t\tlong time = 0;\n-\t\t\t\ttry {\n-\t\t\t\t\ttime = Long.parseLong(analysisTime);\n-\t\t\t\t}\n-\t\t\t\tcatch(Exception e) {\n-\t\t\t\t\tlogger.error(location, ILogger.null_id, e);\n-\t\t\t\t}\n-\t\t\t\twipk.dataAdd(name, uniqueName, time);\n-\t\t\t\tfor(Entry<Object, Object> entry : properties.entrySet()) {\n-\t\t\t\t\tString key = (String) entry.getKey();\n-\t\t\t\t\tString value = (String) entry.getValue();\n-\t\t\t\t\tMessageBuffer mb = LoggerHelper.getMessageBuffer(actionData);\n-\t\t\t\t\tmb.append(Standardize.Label.key.get()+key);\n-\t\t\t\t\tmb.append(Standardize.Label.value.get()+value);\n-\t\t\t\t\tlogger.debug(location, ILogger.null_id, mb.toString());\n+\t\tif(wi != null) {\n+\t\t\tIMetaCas metaCas = wi.getMetaCas();\n+\t\t\tif(metaCas != null) {\n+\t\t\t\tIPerformanceMetrics performanceMetrics = metaCas.getPerformanceMetrics();\n+\t\t\t\tif(performanceMetrics != null) {\n+\t\t\t\t\tList<Properties> list = performanceMetrics.get();\n+\t\t\t\t\tif(list != null) {\n+\t\t\t\t\t\tint size = 0;\n+\t\t\t\t\t\tif(list !=  null) {\n+\t\t\t\t\t\t\tsize = list.size();\n+\t\t\t\t\t\t\tJobDriver jd = JobDriver.getInstance();\n+\t\t\t\t\t\t\tIWorkItemPerformanceKeeper wipk = jd.getWorkItemPerformanceKeeper();\n+\t\t\t\t\t\t\tfor(Properties properties : list) {\n+\t\t\t\t\t\t\t\tString name = properties.getProperty(keyName);\n+\t\t\t\t\t\t\t\tString uniqueName = properties.getProperty(keyUniqueName);\n+\t\t\t\t\t\t\t\tString analysisTime = properties.getProperty(keyAnalysisTime);\n+\t\t\t\t\t\t\t\tlong time = 0;\n+\t\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\t\ttime = Long.parseLong(analysisTime);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tcatch(Exception e) {\n+\t\t\t\t\t\t\t\t\tlogger.error(location, ILogger.null_id, e);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\twipk.dataAdd(name, uniqueName, time);\n+\t\t\t\t\t\t\t\tfor(Entry<Object, Object> entry : properties.entrySet()) {\n+\t\t\t\t\t\t\t\t\tString key = (String) entry.getKey();\n+\t\t\t\t\t\t\t\t\tString value = (String) entry.getValue();\n+\t\t\t\t\t\t\t\t\tMessageBuffer mb = LoggerHelper.getMessageBuffer(actionData);\n+\t\t\t\t\t\t\t\t\tmb.append(Standardize.Label.key.get()+key);\n+\t\t\t\t\t\t\t\t\tmb.append(Standardize.Label.value.get()+value);\n+\t\t\t\t\t\t\t\t\tlogger.debug(location, ILogger.null_id, mb.toString());\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tMessageBuffer mb = LoggerHelper.getMessageBuffer(actionData);\n+\t\t\t\t\t\tmb.append(Standardize.Label.size.get()+size);\n+\t\t\t\t\t\tlogger.debug(location, ILogger.null_id, mb.toString());\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}\n-\t\tMessageBuffer mb = LoggerHelper.getMessageBuffer(actionData);\n-\t\tmb.append(Standardize.Label.size.get()+size);\n-\t\tlogger.debug(location, ILogger.null_id, mb.toString());\n \t}\n \t\n \tprivate void jdExhausted(IActionData actionData) {", "filename": "uima-ducc-container/src/main/java/org/apache/uima/ducc/container/jd/fsm/wi/ActionEnd.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/b833a1bc214129f4215de4e4a6b196ca5d75ba17", "parent": "https://github.com/apache/uima-ducc/commit/0533f371b204ba62dbb18c422dbc0427553377a2", "message": "UIMA-4130 Fixes NPE when no DD is specified\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1641816 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_33", "file": [{"additions": 5, "raw_url": "https://github.com/apache/uima-ducc/raw/b833a1bc214129f4215de4e4a6b196ca5d75ba17/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configuration/jp/JobProcessComponent.java", "blob_url": "https://github.com/apache/uima-ducc/blob/b833a1bc214129f4215de4e4a6b196ca5d75ba17/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configuration/jp/JobProcessComponent.java", "sha": "5f032a3549a9bef5fd1b928581e254e9f4c960ed", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configuration/jp/JobProcessComponent.java?ref=b833a1bc214129f4215de4e4a6b196ca5d75ba17", "patch": "@@ -112,6 +112,10 @@ public void start(DuccService service, String[] args) throws Exception {\n \t\tsuper.start(service, args);\r\n \t\t\r\n \t\ttry {\r\n+\t\t\tif ( args == null || args[0] == null || args.length == 0) {\r\n+\t\t\t\tlogger.warn(\"start\", null, \"Missing Deployment Descriptor - the JP Requires DD argument\");\r\n+                throw new RuntimeException(\"Missing Deployment Descriptor - the JP Requires DD argument\");\r\n+\t\t\t}\r\n \t\t\t// the JobProcessConfiguration checked if the below property exists\r\n \t\t\tString jps = System.getProperty(FlagsHelper.Name.UserClasspath.pname());\r\n \r\n@@ -140,7 +144,7 @@ public void start(DuccService service, String[] args) throws Exception {\n \t\t\t\t\t};\r\n \t\t\t\tfinal DuccHttpClient client = new DuccHttpClient();\r\n \r\n-\t\t\t\tString jdURL = System.getProperty(\"jdURL\");\r\n+\t\t\t\tString jdURL = System.getProperty(FlagsHelper.Name.JdURL.pname());\r\n \t\t\t\tString url = jdURL.substring(jdURL.indexOf(\"http://\")+7 );  // skip protocol\r\n \t\t\t\tString host = url.substring(0, url.indexOf(\":\"));\r\n \t\t\t\tString port = url.substring(url.indexOf(\":\") + 1);\r", "filename": "uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/configuration/jp/JobProcessComponent.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/0bd02df8cda09213e03d7fe686cae9c2697e5dbb", "parent": "https://github.com/apache/uima-ducc/commit/9fd9c1ff57a64c1220afc0c78f439a17b8ff50da", "message": "UIMA-4006 DUCC Web Server (WS) NPE in DuccHandlerClassic\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1623992 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_34", "file": [{"additions": 1, "raw_url": "https://github.com/apache/uima-ducc/raw/0bd02df8cda09213e03d7fe686cae9c2697e5dbb/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebUtil.java", "blob_url": "https://github.com/apache/uima-ducc/blob/0bd02df8cda09213e03d7fe686cae9c2697e5dbb/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebUtil.java", "sha": "1f28620f031abaf72c196a898d9e2cdedcbfa6b4", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebUtil.java?ref=0bd02df8cda09213e03d7fe686cae9c2697e5dbb", "patch": "@@ -145,7 +145,7 @@ public static final boolean isListable(HttpServletRequest request, ArrayList<Str\n \t\tboolean list = false;\n \t\tDuccCookies.FilterUsersStyle filterUsersStyle = DuccCookies.getFilterUsersStyle(request);\n \t\tif(!users.isEmpty()) {\n-\t\t\tString user = propertiesMeta.getProperty(key_user).trim();\n+\t\t\tString user = propertiesMeta.getProperty(key_user);\n \t\t\tif(user != null) {\n \t\t\t\tuser = user.trim();\n \t\t\t\tswitch(filterUsersStyle) {", "filename": "uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebUtil.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/9fd9c1ff57a64c1220afc0c78f439a17b8ff50da", "parent": "https://github.com/apache/uima-ducc/commit/a3db3e9f6aa98f4190e72b386cd1ae4d933f19b3", "message": "UIMA-4006 DUCC Web Server (WS) NPE in DuccHandlerClassic\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1623991 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_35", "file": [{"additions": 46, "raw_url": "https://github.com/apache/uima-ducc/raw/9fd9c1ff57a64c1220afc0c78f439a17b8ff50da/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebUtil.java", "blob_url": "https://github.com/apache/uima-ducc/blob/9fd9c1ff57a64c1220afc0c78f439a17b8ff50da/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebUtil.java", "sha": "f5ed6f058cd47a717f952e30ccb4a3e6e98fc58b", "changes": 94, "status": "modified", "deletions": 48, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebUtil.java?ref=9fd9c1ff57a64c1220afc0c78f439a17b8ff50da", "patch": "@@ -145,65 +145,63 @@ public static final boolean isListable(HttpServletRequest request, ArrayList<Str\n \t\tboolean list = false;\n \t\tDuccCookies.FilterUsersStyle filterUsersStyle = DuccCookies.getFilterUsersStyle(request);\n \t\tif(!users.isEmpty()) {\n-\t\t\tif(propertiesMeta != null) {\n-\t\t\t\tString user = propertiesMeta.getProperty(key_user);\n-\t\t\t\tif(user != null) {\n-\t\t\t\t\tuser = user.trim();\n-\t\t\t\t\tswitch(filterUsersStyle) {\n-\t\t\t\t\tcase IncludePlusActive:\n-\t\t\t\t\t\tif(isAvailable(propertiesMeta)) {\n-\t\t\t\t\t\t\tlist = true;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\telse if(users.contains(user)) {\n-\t\t\t\t\t\t\tif(maxRecords > 0) {\n-\t\t\t\t\t\t\t\tif (counter < maxRecords) {\n-\t\t\t\t\t\t\t\t\tlist = true;\n-\t\t\t\t\t\t\t\t}\n+\t\t\tString user = propertiesMeta.getProperty(key_user).trim();\n+\t\t\tif(user != null) {\n+\t\t\t\tuser = user.trim();\n+\t\t\t\tswitch(filterUsersStyle) {\n+\t\t\t\tcase IncludePlusActive:\n+\t\t\t\t\tif(isAvailable(propertiesMeta)) {\n+\t\t\t\t\t\tlist = true;\n+\t\t\t\t\t}\n+\t\t\t\t\telse if(users.contains(user)) {\n+\t\t\t\t\t\tif(maxRecords > 0) {\n+\t\t\t\t\t\t\tif (counter < maxRecords) {\n+\t\t\t\t\t\t\t\tlist = true;\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase ExcludePlusActive:\n-\t\t\t\t\t\tif(isAvailable(propertiesMeta)) {\n-\t\t\t\t\t\t\tlist = true;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\telse if(!users.contains(user)) {\n-\t\t\t\t\t\t\tif(maxRecords > 0) {\n-\t\t\t\t\t\t\t\tif (counter < maxRecords) {\n-\t\t\t\t\t\t\t\t\tlist = true;\n-\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase ExcludePlusActive:\n+\t\t\t\t\tif(isAvailable(propertiesMeta)) {\n+\t\t\t\t\t\tlist = true;\n+\t\t\t\t\t}\n+\t\t\t\t\telse if(!users.contains(user)) {\n+\t\t\t\t\t\tif(maxRecords > 0) {\n+\t\t\t\t\t\t\tif (counter < maxRecords) {\n+\t\t\t\t\t\t\t\tlist = true;\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Include:\n-\t\t\t\t\t\tif(users.contains(user)) {\n-\t\t\t\t\t\t\tif(maxRecords > 0) {\n-\t\t\t\t\t\t\t\tif (counter < maxRecords) {\n-\t\t\t\t\t\t\t\t\tlist = true;\n-\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase Include:\n+\t\t\t\t\tif(users.contains(user)) {\n+\t\t\t\t\t\tif(maxRecords > 0) {\n+\t\t\t\t\t\t\tif (counter < maxRecords) {\n+\t\t\t\t\t\t\t\tlist = true;\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Exclude:\n-\t\t\t\t\t\tif(!users.contains(user)) {\n-\t\t\t\t\t\t\tif(maxRecords > 0) {\n-\t\t\t\t\t\t\t\tif (counter < maxRecords) {\n-\t\t\t\t\t\t\t\t\tlist = true;\n-\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase Exclude:\n+\t\t\t\t\tif(!users.contains(user)) {\n+\t\t\t\t\t\tif(maxRecords > 0) {\n+\t\t\t\t\t\t\tif (counter < maxRecords) {\n+\t\t\t\t\t\t\t\tlist = true;\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\t}\t\n-\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\t\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\tif(isAvailable(propertiesMeta)) {\n+\t\t\t\tlist = true;\n \t\t\t}\n-\t\t\telse {\n-\t\t\t\tif(isAvailable(propertiesMeta)) {\n+\t\t\telse if(maxRecords > 0) {\n+\t\t\t\tif (counter < maxRecords) {\n \t\t\t\t\tlist = true;\n \t\t\t\t}\n-\t\t\t\telse if(maxRecords > 0) {\n-\t\t\t\t\tif (counter < maxRecords) {\n-\t\t\t\t\t\tlist = true;\n-\t\t\t\t\t}\n-\t\t\t\t}\n \t\t\t}\n \t\t}\n \t\treturn list;", "filename": "uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebUtil.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/a3db3e9f6aa98f4190e72b386cd1ae4d933f19b3", "parent": "https://github.com/apache/uima-ducc/commit/68213d1b2d9d42e209bfcc309496ea69d569ce63", "message": "UIMA-4006 DUCC Web Server (WS) NPE in DuccHandlerClassic\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1623982 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_36", "file": [{"additions": 48, "raw_url": "https://github.com/apache/uima-ducc/raw/a3db3e9f6aa98f4190e72b386cd1ae4d933f19b3/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebUtil.java", "blob_url": "https://github.com/apache/uima-ducc/blob/a3db3e9f6aa98f4190e72b386cd1ae4d933f19b3/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebUtil.java", "sha": "09c3a30455c9cf3537c74a9a4ccb65c4a122c651", "changes": 94, "status": "modified", "deletions": 46, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebUtil.java?ref=a3db3e9f6aa98f4190e72b386cd1ae4d933f19b3", "patch": "@@ -145,63 +145,65 @@ public static final boolean isListable(HttpServletRequest request, ArrayList<Str\n \t\tboolean list = false;\n \t\tDuccCookies.FilterUsersStyle filterUsersStyle = DuccCookies.getFilterUsersStyle(request);\n \t\tif(!users.isEmpty()) {\n-\t\t\tString user = propertiesMeta.getProperty(key_user).trim();\n-\t\t\tif(user != null) {\n-\t\t\t\tuser = user.trim();\n-\t\t\t\tswitch(filterUsersStyle) {\n-\t\t\t\tcase IncludePlusActive:\n-\t\t\t\t\tif(isAvailable(propertiesMeta)) {\n-\t\t\t\t\t\tlist = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if(users.contains(user)) {\n-\t\t\t\t\t\tif(maxRecords > 0) {\n-\t\t\t\t\t\t\tif (counter < maxRecords) {\n-\t\t\t\t\t\t\t\tlist = true;\n+\t\t\tif(propertiesMeta != null) {\n+\t\t\t\tString user = propertiesMeta.getProperty(key_user);\n+\t\t\t\tif(user != null) {\n+\t\t\t\t\tuser = user.trim();\n+\t\t\t\t\tswitch(filterUsersStyle) {\n+\t\t\t\t\tcase IncludePlusActive:\n+\t\t\t\t\t\tif(isAvailable(propertiesMeta)) {\n+\t\t\t\t\t\t\tlist = true;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse if(users.contains(user)) {\n+\t\t\t\t\t\t\tif(maxRecords > 0) {\n+\t\t\t\t\t\t\t\tif (counter < maxRecords) {\n+\t\t\t\t\t\t\t\t\tlist = true;\n+\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase ExcludePlusActive:\n-\t\t\t\t\tif(isAvailable(propertiesMeta)) {\n-\t\t\t\t\t\tlist = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if(!users.contains(user)) {\n-\t\t\t\t\t\tif(maxRecords > 0) {\n-\t\t\t\t\t\t\tif (counter < maxRecords) {\n-\t\t\t\t\t\t\t\tlist = true;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase ExcludePlusActive:\n+\t\t\t\t\t\tif(isAvailable(propertiesMeta)) {\n+\t\t\t\t\t\t\tlist = true;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse if(!users.contains(user)) {\n+\t\t\t\t\t\t\tif(maxRecords > 0) {\n+\t\t\t\t\t\t\t\tif (counter < maxRecords) {\n+\t\t\t\t\t\t\t\t\tlist = true;\n+\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase Include:\n-\t\t\t\t\tif(users.contains(user)) {\n-\t\t\t\t\t\tif(maxRecords > 0) {\n-\t\t\t\t\t\t\tif (counter < maxRecords) {\n-\t\t\t\t\t\t\t\tlist = true;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase Include:\n+\t\t\t\t\t\tif(users.contains(user)) {\n+\t\t\t\t\t\t\tif(maxRecords > 0) {\n+\t\t\t\t\t\t\t\tif (counter < maxRecords) {\n+\t\t\t\t\t\t\t\t\tlist = true;\n+\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase Exclude:\n-\t\t\t\t\tif(!users.contains(user)) {\n-\t\t\t\t\t\tif(maxRecords > 0) {\n-\t\t\t\t\t\t\tif (counter < maxRecords) {\n-\t\t\t\t\t\t\t\tlist = true;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase Exclude:\n+\t\t\t\t\t\tif(!users.contains(user)) {\n+\t\t\t\t\t\t\tif(maxRecords > 0) {\n+\t\t\t\t\t\t\t\tif (counter < maxRecords) {\n+\t\t\t\t\t\t\t\t\tlist = true;\n+\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\t\n-\t\t\t}\n-\t\t}\n-\t\telse {\n-\t\t\tif(isAvailable(propertiesMeta)) {\n-\t\t\t\tlist = true;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\t\n+\t\t\t\t}\n \t\t\t}\n-\t\t\telse if(maxRecords > 0) {\n-\t\t\t\tif (counter < maxRecords) {\n+\t\t\telse {\n+\t\t\t\tif(isAvailable(propertiesMeta)) {\n \t\t\t\t\tlist = true;\n \t\t\t\t}\n+\t\t\t\telse if(maxRecords > 0) {\n+\t\t\t\t\tif (counter < maxRecords) {\n+\t\t\t\t\t\tlist = true;\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t\treturn list;", "filename": "uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebUtil.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/0c18166863b22ae445786503abbf7e1f65239feb", "parent": "https://github.com/apache/uima-ducc/commit/539c73d2467bd2c28d95b119cf91bf95adc8696f", "message": "UIMA-3972 Throw IllegalArgumentException instead of NPE when scheduling_class is unknown\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1616304 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_37", "file": [{"additions": 13, "raw_url": "https://github.com/apache/uima-ducc/raw/0c18166863b22ae445786503abbf7e1f65239feb/uima-ducc-common/src/main/java/org/apache/uima/ducc/common/utils/DuccSchedulerClasses.java", "blob_url": "https://github.com/apache/uima-ducc/blob/0c18166863b22ae445786503abbf7e1f65239feb/uima-ducc-common/src/main/java/org/apache/uima/ducc/common/utils/DuccSchedulerClasses.java", "sha": "4e5520ae043c09bba612b295e6ff9d24eb75d5bd", "changes": 25, "status": "modified", "deletions": 12, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-common/src/main/java/org/apache/uima/ducc/common/utils/DuccSchedulerClasses.java?ref=0c18166863b22ae445786503abbf7e1f65239feb", "patch": "@@ -98,19 +98,20 @@ public NodeConfiguration readConfiguration()\n         return nodeConfiguration.getClasses();\n     }\n \n-\tpublic boolean isPreemptable(String class_name)\n-\t\tthrows Exception\n-\t{\n-\t\tboolean retVal = false;\n-        readConfiguration();\n+  public boolean isPreemptable(String class_name) throws Exception {\n+    boolean retVal = false;\n+    readConfiguration();\n \n-        DuccProperties properties = nodeConfiguration.getClass(class_name);\n-\t\tString policy = getProperty(properties, \"policy\");\n-\t\tif(policy.equals(FAIR_SHARE)) {\n-\t\t\tretVal = true;\n-\t\t}\n-\t\treturn retVal;\n-\t}\n+    DuccProperties properties = nodeConfiguration.getClass(class_name);\n+    if (properties == null) {\n+      throw new IllegalArgumentException(\"Invalid scheduling_class: \" + class_name);\n+    }\n+    String policy = getProperty(properties, \"policy\");\n+    if (policy.equals(FAIR_SHARE)) {\n+      retVal = true;\n+    }\n+    return retVal;\n+  }\n \t\n \tpublic String getDefaultClassName() \n \t    throws Exception", "filename": "uima-ducc-common/src/main/java/org/apache/uima/ducc/common/utils/DuccSchedulerClasses.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/2bb339bca2e4f18a26333c97b56e8b1578967312", "parent": "https://github.com/apache/uima-ducc/commit/c52b5f5fc5480a606fddd497027072a9ef5e0c51", "message": "UIMA-3900 Fix NPE when machines data returns null node.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1616000 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_38", "file": [{"additions": 9, "raw_url": "https://github.com/apache/uima-ducc/raw/2bb339bca2e4f18a26333c97b56e8b1578967312/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/nodeviz/NodeViz.java", "blob_url": "https://github.com/apache/uima-ducc/blob/2bb339bca2e4f18a26333c97b56e8b1578967312/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/nodeviz/NodeViz.java", "sha": "aae8f01dba675937b1f60901401a3f6a11116864", "changes": 11, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/nodeviz/NodeViz.java?ref=2bb339bca2e4f18a26333c97b56e8b1578967312", "patch": "@@ -247,8 +247,15 @@ public void generateVisualization(OrchestratorStateDuccEvent ev)\n             s = strip(s);\n             if ( ! hosts.containsKey(s) ) {\n                 // System.out.println(\"Set host from MachineInfo with key :\" + s + \":\");\n-                VisualizedHost vh = new VisualizedHost(m.get(s), quantum);\n-                hosts.put(s, vh);\n+\n+                // NOTE: the map changes all the time so the value may be gone.  This situation\n+                //       will be fixed one day but for now just forget the node, it will show up \n+                //       next time we get here.\n+                MachineInfo mi = m.get(s);\n+                if ( mi != null ) {\n+                    VisualizedHost vh = new VisualizedHost(mi, quantum);\n+                    hosts.put(s, vh);\n+                }\n             }\n         }\n ", "filename": "uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/nodeviz/NodeViz.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/15d14d1e97a983a38e37cf15ab08bfb5700038de", "parent": "https://github.com/apache/uima-ducc/commit/708e59466f8582aef91479be437b51864bfc3881", "message": "UIMA-3959 DUCC Web Server (WS) takes NPE in DuccHandlerJsonFormat\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1613115 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_39", "file": [{"additions": 39, "raw_url": "https://github.com/apache/uima-ducc/raw/15d14d1e97a983a38e37cf15ab08bfb5700038de/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebUtil.java", "blob_url": "https://github.com/apache/uima-ducc/blob/15d14d1e97a983a38e37cf15ab08bfb5700038de/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebUtil.java", "sha": "57cc15517456d0fa1c1ddee054175ac10aeca3bc", "changes": 75, "status": "modified", "deletions": 36, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebUtil.java?ref=15d14d1e97a983a38e37cf15ab08bfb5700038de", "patch": "@@ -140,50 +140,53 @@ public static final boolean isListable(HttpServletRequest request, ArrayList<Str\n \t\tDuccCookies.FilterUsersStyle filterUsersStyle = DuccCookies.getFilterUsersStyle(request);\n \t\tif(!users.isEmpty()) {\n \t\t\tString user = propertiesMeta.getProperty(key_user).trim();\n-\t\t\tswitch(filterUsersStyle) {\n-\t\t\tcase IncludePlusActive:\n-\t\t\t\tif(isAvailable(propertiesMeta)) {\n-\t\t\t\t\tlist = true;\n-\t\t\t\t}\n-\t\t\t\telse if(users.contains(user)) {\n-\t\t\t\t\tif(maxRecords > 0) {\n-\t\t\t\t\t\tif (counter < maxRecords) {\n-\t\t\t\t\t\t\tlist = true;\n+\t\t\tif(user != null) {\n+\t\t\t\tuser = user.trim();\n+\t\t\t\tswitch(filterUsersStyle) {\n+\t\t\t\tcase IncludePlusActive:\n+\t\t\t\t\tif(isAvailable(propertiesMeta)) {\n+\t\t\t\t\t\tlist = true;\n+\t\t\t\t\t}\n+\t\t\t\t\telse if(users.contains(user)) {\n+\t\t\t\t\t\tif(maxRecords > 0) {\n+\t\t\t\t\t\t\tif (counter < maxRecords) {\n+\t\t\t\t\t\t\t\tlist = true;\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-\t\t\tcase ExcludePlusActive:\n-\t\t\t\tif(isAvailable(propertiesMeta)) {\n-\t\t\t\t\tlist = true;\n-\t\t\t\t}\n-\t\t\t\telse if(!users.contains(user)) {\n-\t\t\t\t\tif(maxRecords > 0) {\n-\t\t\t\t\t\tif (counter < maxRecords) {\n-\t\t\t\t\t\t\tlist = true;\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase ExcludePlusActive:\n+\t\t\t\t\tif(isAvailable(propertiesMeta)) {\n+\t\t\t\t\t\tlist = true;\n+\t\t\t\t\t}\n+\t\t\t\t\telse if(!users.contains(user)) {\n+\t\t\t\t\t\tif(maxRecords > 0) {\n+\t\t\t\t\t\t\tif (counter < maxRecords) {\n+\t\t\t\t\t\t\t\tlist = true;\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-\t\t\tcase Include:\n-\t\t\t\tif(users.contains(user)) {\n-\t\t\t\t\tif(maxRecords > 0) {\n-\t\t\t\t\t\tif (counter < maxRecords) {\n-\t\t\t\t\t\t\tlist = true;\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase Include:\n+\t\t\t\t\tif(users.contains(user)) {\n+\t\t\t\t\t\tif(maxRecords > 0) {\n+\t\t\t\t\t\t\tif (counter < maxRecords) {\n+\t\t\t\t\t\t\t\tlist = true;\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-\t\t\tcase Exclude:\n-\t\t\t\tif(!users.contains(user)) {\n-\t\t\t\t\tif(maxRecords > 0) {\n-\t\t\t\t\t\tif (counter < maxRecords) {\n-\t\t\t\t\t\t\tlist = true;\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase Exclude:\n+\t\t\t\t\tif(!users.contains(user)) {\n+\t\t\t\t\t\tif(maxRecords > 0) {\n+\t\t\t\t\t\t\tif (counter < maxRecords) {\n+\t\t\t\t\t\t\t\tlist = true;\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-\t\t\t}\t\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\t\n+\t\t\t}\n \t\t}\n \t\telse {\n \t\t\tif(isAvailable(propertiesMeta)) {", "filename": "uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccWebUtil.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/3dc5744b2ecb8b8bec84c30f955ec48660140952", "parent": "https://github.com/apache/uima-ducc/commit/83ba748e5817e0bd62ba4daa9dd5115bb3b10009", "message": "UIMA-3945 DUCC Web Server (WS) takes NPE in DUccHandler\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1610954 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_40", "file": [{"additions": 100, "raw_url": "https://github.com/apache/uima-ducc/raw/3dc5744b2ecb8b8bec84c30f955ec48660140952/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandler.java", "blob_url": "https://github.com/apache/uima-ducc/blob/3dc5744b2ecb8b8bec84c30f955ec48660140952/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandler.java", "sha": "2cc0b2d6d1b3a36bd935edf5d8a3ce4da7fd66cd", "changes": 185, "status": "modified", "deletions": 85, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandler.java?ref=3dc5744b2ecb8b8bec84c30f955ec48660140952", "patch": "@@ -1027,102 +1027,117 @@ private void handleDuccServletJobWorkitemsCountData(String target,Request baseRe\n \t\t// job state\n \t\tsb.append(\"<th title=\\\"The current state of this job\\\">\");\n \t\tsb.append(\"State: \");\n-\t\tString state = job.getStateObject().toString();\n-\t\tsb.append(state);\n-\t\tsb.append(\"</th>\");\n-\t\tthSep(sb);\n-\t\t// job reason\n-\t\tif(job.isCompleted()) {\n-\t\t\tsb.append(\"<th title=\\\"The reason for the final state of this job, normally EndOfJob\\\">\");\n-\t\t\tsb.append(\"Reason: \");\n-\t\t\tString reason = getReason(job, DuccType.Job).toString();\n-\t\t\tsb.append(reason);\n-\t\t\tthSep(sb);\n-\t\t}\n-\t\t// workitems\n-\t\tString jobWorkitemsCount = \"?\";\n \t\tif(job != null) {\n-\t\t\tjobWorkitemsCount = job.getSchedulingInfo().getWorkItemsTotal();\n-\t\t}\n-\t\tsb.append(\"<th title=\\\"The total number of work items for this job\\\">\");\n-\t\tsb.append(\"Workitems: \");\n-\t\tsb.append(jobWorkitemsCount);\n-\t\tsb.append(\"</th>\");\n-\t\tthSep(sb);\n-\t\t// done\n-\t\tsb.append(\"<th title=\\\"The number of work items that completed successfully\\\">\");\n-\t\tsb.append(\"Done: \");\n-\t\tString done = \"0\";\n-\t\ttry {\n-\t\t\tdone = \"\"+job.getSchedulingInfo().getIntWorkItemsCompleted();\n-\t\t}\n-\t\tcatch(Exception e) {\n-\t\t}\n-\t\tsb.append(done);\n-\t\tsb.append(\"</th>\");\n-\t\tthSep(sb);\n-\t\t// error & lost\n-\t\tint eCount = 0;\n-\t\tint lCount = 0;\n-\t\ttry {\n-\t\t\teCount = job.getSchedulingInfo().getIntWorkItemsError();\n-\t\t\tlCount = job.getSchedulingInfo().getIntWorkItemsLost();\n-\t\t}\n-\t\tcatch(Exception e) {\n-\t\t}\n-\t\tString error = \"\"+eCount;\n-\t\tsb.append(\"<th title=\\\"The number of work items that failed to complete successfully\\\">\");\n-\t\tsb.append(\"Error: \");\n-\t\tsb.append(error);\n-\t\tsb.append(\"</th>\");\n-\t\tif(lCount > 0) {\n+\t\t\tObject stateObject = job.getStateObject();\n+\t\t\tif(stateObject != null) {\n+\t\t\t\tString state = stateObject.toString();\n+\t\t\t\tsb.append(state);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tString state = JobState.Undefined.name();\n+\t\t\t\tsb.append(state);\n+\t\t\t\tduccLogger.warn(methodName, job.getDuccId(), state);\n+\t\t\t}\n+\t\t\tsb.append(\"</th>\");\n \t\t\tthSep(sb);\n-\t\t\tString lost = \"\"+lCount;\n-\t\t\tsb.append(\"<th title=\\\"The number of work items that were lost\\\">\");\n-\t\t\tsb.append(\"Lost: \");\n-\t\t\tsb.append(lost);\n+\t\t\t// job reason\n+\t\t\tif(job.isCompleted()) {\n+\t\t\t\tsb.append(\"<th title=\\\"The reason for the final state of this job, normally EndOfJob\\\">\");\n+\t\t\t\tsb.append(\"Reason: \");\n+\t\t\t\tString reason = getReason(job, DuccType.Job).toString();\n+\t\t\t\tsb.append(reason);\n+\t\t\t\tthSep(sb);\n+\t\t\t}\n+\t\t\t// workitems\n+\t\t\tString jobWorkitemsCount = \"?\";\n+\t\t\tif(job != null) {\n+\t\t\t\tjobWorkitemsCount = job.getSchedulingInfo().getWorkItemsTotal();\n+\t\t\t}\n+\t\t\tsb.append(\"<th title=\\\"The total number of work items for this job\\\">\");\n+\t\t\tsb.append(\"Workitems: \");\n+\t\t\tsb.append(jobWorkitemsCount);\n \t\t\tsb.append(\"</th>\");\n-\t\t}\n-\t\t// extended info live jobs\n-\t\tthSep(sb);\n-\t\tJobState jobState = JobState.Undefined;\n-\t\ttry {\n-\t\t\tjobState = job.getJobState();\n-\t\t}\n-\t\tcatch(Exception e) {\n-\t\t}\n-\t\tswitch(jobState) {\n-\t\tcase Completed:\n-\t\tcase Undefined:\n-\t\t\tbreak;\n-\t\tdefault:\n-\t\t\tint dispatch = 0;\n-\t\t\tint unassigned = job.getSchedulingInfo().getCasQueuedMap().size();\n-\t\t\tint limbo = job.getSchedulingInfo().getLimboMap().size();\n+\t\t\tthSep(sb);\n+\t\t\t// done\n+\t\t\tsb.append(\"<th title=\\\"The number of work items that completed successfully\\\">\");\n+\t\t\tsb.append(\"Done: \");\n+\t\t\tString done = \"0\";\n \t\t\ttry {\n-\t\t\t\tdispatch = Integer.parseInt(job.getSchedulingInfo().getWorkItemsDispatched())-unassigned;\n+\t\t\t\tdone = \"\"+job.getSchedulingInfo().getIntWorkItemsCompleted();\n \t\t\t}\n \t\t\tcatch(Exception e) {\n \t\t\t}\n-\t\t\t// dispatch\n-\t\t\tsb.append(\"<th title=\\\"The number of work items currently dispatched\\\">\");\n-\t\t\tsb.append(\"Dispatch: \");\n-\t\t\tsb.append(dispatch);\n-\t\t\tsb.append(\"</th>\");\n-\t\t\tthSep(sb);\n-\t\t\t// unassigned\n-\t\t\tsb.append(\"<th title=\\\"The number of work items currently dispatched for which acknowledgement is yet to be received\\\">\");\n-\t\t\tsb.append(\"Unassigned: \");\n-\t\t\tsb.append(unassigned);\n+\t\t\tsb.append(done);\n \t\t\tsb.append(\"</th>\");\n \t\t\tthSep(sb);\n-\t\t\t// limbo\n-\t\t\tsb.append(\"<th title=\\\"The number of work items pending re-dispatch to an alternate Job Process. Each of these work items is essentially stuck waiting for its previous JP to terminate.\\\">\");\n-\t\t\tsb.append(\"Limbo: \");\n-\t\t\tsb.append(limbo);\n+\t\t\t// error & lost\n+\t\t\tint eCount = 0;\n+\t\t\tint lCount = 0;\n+\t\t\ttry {\n+\t\t\t\teCount = job.getSchedulingInfo().getIntWorkItemsError();\n+\t\t\t\tlCount = job.getSchedulingInfo().getIntWorkItemsLost();\n+\t\t\t}\n+\t\t\tcatch(Exception e) {\n+\t\t\t}\n+\t\t\tString error = \"\"+eCount;\n+\t\t\tsb.append(\"<th title=\\\"The number of work items that failed to complete successfully\\\">\");\n+\t\t\tsb.append(\"Error: \");\n+\t\t\tsb.append(error);\n \t\t\tsb.append(\"</th>\");\n+\t\t\tif(lCount > 0) {\n+\t\t\t\tthSep(sb);\n+\t\t\t\tString lost = \"\"+lCount;\n+\t\t\t\tsb.append(\"<th title=\\\"The number of work items that were lost\\\">\");\n+\t\t\t\tsb.append(\"Lost: \");\n+\t\t\t\tsb.append(lost);\n+\t\t\t\tsb.append(\"</th>\");\n+\t\t\t}\n+\t\t\t// extended info live jobs\n \t\t\tthSep(sb);\n-\t\t\tbreak;\n+\t\t\tJobState jobState = JobState.Undefined;\n+\t\t\ttry {\n+\t\t\t\tjobState = job.getJobState();\n+\t\t\t}\n+\t\t\tcatch(Exception e) {\n+\t\t\t}\n+\t\t\tswitch(jobState) {\n+\t\t\tcase Completed:\n+\t\t\tcase Undefined:\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tint dispatch = 0;\n+\t\t\t\tint unassigned = job.getSchedulingInfo().getCasQueuedMap().size();\n+\t\t\t\tint limbo = job.getSchedulingInfo().getLimboMap().size();\n+\t\t\t\ttry {\n+\t\t\t\t\tdispatch = Integer.parseInt(job.getSchedulingInfo().getWorkItemsDispatched())-unassigned;\n+\t\t\t\t}\n+\t\t\t\tcatch(Exception e) {\n+\t\t\t\t}\n+\t\t\t\t// dispatch\n+\t\t\t\tsb.append(\"<th title=\\\"The number of work items currently dispatched\\\">\");\n+\t\t\t\tsb.append(\"Dispatch: \");\n+\t\t\t\tsb.append(dispatch);\n+\t\t\t\tsb.append(\"</th>\");\n+\t\t\t\tthSep(sb);\n+\t\t\t\t// unassigned\n+\t\t\t\tsb.append(\"<th title=\\\"The number of work items currently dispatched for which acknowledgement is yet to be received\\\">\");\n+\t\t\t\tsb.append(\"Unassigned: \");\n+\t\t\t\tsb.append(unassigned);\n+\t\t\t\tsb.append(\"</th>\");\n+\t\t\t\tthSep(sb);\n+\t\t\t\t// limbo\n+\t\t\t\tsb.append(\"<th title=\\\"The number of work items pending re-dispatch to an alternate Job Process. Each of these work items is essentially stuck waiting for its previous JP to terminate.\\\">\");\n+\t\t\t\tsb.append(\"Limbo: \");\n+\t\t\t\tsb.append(limbo);\n+\t\t\t\tsb.append(\"</th>\");\n+\t\t\t\tthSep(sb);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\tString state = \"NotFound\";\n+\t\t\tsb.append(state);\n+\t\t\tduccLogger.warn(methodName, jobid, jobId);\n \t\t}\n \t\tsb.append(\"</table>\");\n \t\tresponse.getWriter().println(sb);", "filename": "uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandler.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/28cd1a843bcc0bcecb5010028169fb5f973c89ed", "parent": "https://github.com/apache/uima-ducc/commit/17e946d14a1b822d17dcecc7ef0cd919cf38785f", "message": "UIMA-3717 DUCC Job Driver (JD) NPE when processing getState\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1584031 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_41", "file": [{"additions": 24, "raw_url": "https://github.com/apache/uima-ducc/raw/28cd1a843bcc0bcecb5010028169fb5f973c89ed/uima-ducc-jd/src/main/java/org/apache/uima/ducc/jd/JobDriver.java", "blob_url": "https://github.com/apache/uima-ducc/blob/28cd1a843bcc0bcecb5010028169fb5f973c89ed/uima-ducc-jd/src/main/java/org/apache/uima/ducc/jd/JobDriver.java", "sha": "541cfc173d8c4ed1491eb27ec6e5ec8357ac8e54", "changes": 33, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-jd/src/main/java/org/apache/uima/ducc/jd/JobDriver.java?ref=28cd1a843bcc0bcecb5010028169fb5f973c89ed", "patch": "@@ -31,6 +31,7 @@\n import java.util.concurrent.Future;\n import java.util.concurrent.LinkedBlockingQueue;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n \n import org.apache.uima.aae.client.UimaAsynchronousEngine;\n@@ -1705,16 +1706,30 @@ private void workItemError(WorkItem workItem, Throwable t, Directive directive)\n \t\t}\n \t}\n \n+\tpublic AtomicBoolean rectifyErrorLogged = new AtomicBoolean(false);\n+\t\n \tpublic void rectifyStatus() {\n-\t\tif(casSource != null) {\n-\t\t\tcasSource.rectifyStatus();\n-\t\t}\n-\t\tWorkItemStatistics stats = workItemStateKeeper.getStatistics();\n-\t\tdriverStatusReport.setWiMillisMin(stats.millisMin);\n-\t\tdriverStatusReport.setWiMillisMax(stats.millisMax);\n-\t\tdriverStatusReport.setWiMillisAvg(stats.millisAvg);\n-\t\tdriverStatusReport.setWiMillisOperatingLeast(stats.millisOperatingLeast);\n-\t\tdriverStatusReport.setWiMillisCompletedMost(stats.millisCompletedMost);\n+\t\tString location = \"rectifyStatus\";\n+\t\tDuccId djid = null;\n+\t\ttry {\n+\t\t\tif(casSource != null) {\n+\t\t\t\tcasSource.rectifyStatus();\n+\t\t\t}\n+\t\t\tif(workItemStateKeeper != null) {\n+\t\t\t\tWorkItemStatistics stats = workItemStateKeeper.getStatistics();\n+\t\t\t\tdriverStatusReport.setWiMillisMin(stats.millisMin);\n+\t\t\t\tdriverStatusReport.setWiMillisMax(stats.millisMax);\n+\t\t\t\tdriverStatusReport.setWiMillisAvg(stats.millisAvg);\n+\t\t\t\tdriverStatusReport.setWiMillisOperatingLeast(stats.millisOperatingLeast);\n+\t\t\t\tdriverStatusReport.setWiMillisCompletedMost(stats.millisCompletedMost);\n+\t\t\t}\n+\t\t}\n+\t\tcatch(Exception e) {\n+\t\t\tif(!rectifyErrorLogged.get()) {\n+\t\t\t\tduccOut.error(location, djid, e);\n+\t\t\t\trectifyErrorLogged.set(true);\n+\t\t\t}\n+\t\t}\n \t}\n \n \tpublic boolean callbackRegister(String casId, String name) {", "filename": "uima-ducc-jd/src/main/java/org/apache/uima/ducc/jd/JobDriver.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/11773b7689d01845281cdf49ffb1c6885bf0757b", "parent": "https://github.com/apache/uima-ducc/commit/b27e88faf5e746c75c495a16d7adaececf13d865", "message": "UIMA-3365 DUCC job driver (JD) NPE in class WorkItemListener\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1535022 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_42", "file": [{"additions": 1, "raw_url": "https://github.com/apache/uima-ducc/raw/11773b7689d01845281cdf49ffb1c6885bf0757b/uima-ducc-jd/src/main/java/org/apache/uima/ducc/jd/JobDriver.java", "blob_url": "https://github.com/apache/uima-ducc/blob/11773b7689d01845281cdf49ffb1c6885bf0757b/uima-ducc-jd/src/main/java/org/apache/uima/ducc/jd/JobDriver.java", "sha": "07937da2b4f1ed40b88774aa2cade95bdc042d83", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-jd/src/main/java/org/apache/uima/ducc/jd/JobDriver.java?ref=11773b7689d01845281cdf49ffb1c6885bf0757b", "patch": "@@ -424,7 +424,7 @@ private void uimaAsClientInitialize() throws JobDriverTerminateException {\n \t\t\t\tduccOut.warn(location, jobid, JobRequestProperties.key_process_per_item_time_max+\":\"+wiTimeout);\n \t\t\t}\n \t\t\tappCtx.put(UimaAsynchronousEngine.ServerUri, serverUri);\n-\t\t\tappCtx.put(UimaAsynchronousEngine.Endpoint, endPoint);\n+\t\t\tappCtx.put(UimaAsynchronousEngine.ENDPOINT, endPoint);\n \t\t\tappCtx.put(UimaAsynchronousEngine.CasPoolSize, 1);\n \t\t\tappCtx.put(UimaAsynchronousEngine.GetMetaTimeout, metaTimeout*60*1000);\n \t\t\tappCtx.put(UimaAsynchronousEngine.Timeout, wiTimeout*60*1000);", "filename": "uima-ducc-jd/src/main/java/org/apache/uima/ducc/jd/JobDriver.java"}, {"additions": 113, "raw_url": "https://github.com/apache/uima-ducc/raw/11773b7689d01845281cdf49ffb1c6885bf0757b/uima-ducc-jd/src/main/java/org/apache/uima/ducc/jd/client/WorkItemListener.java", "blob_url": "https://github.com/apache/uima-ducc/blob/11773b7689d01845281cdf49ffb1c6885bf0757b/uima-ducc-jd/src/main/java/org/apache/uima/ducc/jd/client/WorkItemListener.java", "sha": "7d4d3418ca58b5934500f7fdf3c96bb1102ff816", "changes": 150, "status": "modified", "deletions": 37, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-jd/src/main/java/org/apache/uima/ducc/jd/client/WorkItemListener.java?ref=11773b7689d01845281cdf49ffb1c6885bf0757b", "patch": "@@ -34,25 +34,68 @@\n \t//private static Messages duccMsg = JobDriverContext.getInstance().getSystemMessages();\n \t\n \tprivate IJobDriver jobDriver;\n+\tprivate DuccId jobid;\n \t\n \t// <for testing only!!!>\n+\tboolean synchronous = false;\n \tboolean injectLost = false;\n+\tboolean injectDelay = false;\n \t// </for testing only!!!>\n \t\n \tpublic WorkItemListener(IJobDriver jobDriver) {\n \t\tsuper();\n \t\tthis.jobDriver = jobDriver;\n+\t\tthis.jobid = jobDriver.getJob().getDuccId();\n \t}\n \t\n \t@Override\n \tpublic void onBeforeMessageSend(UimaASProcessStatus status) {\n \t\tString methodName = \"onBeforeMessageSend\";\n \t\ttry {\n-\t\t\tonBeforeMessageSendHandler(status);\n+\t\t\tThread thread = new OnBeforeMessageSendHandler(status);\n+\t\t\tif(synchronous) {\n+\t\t\t\tthread.run();\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tthread.start();\n+\t\t\t}\n \t\t}\n \t\tcatch(Exception e) {\n-\t\t\tduccOut.error(methodName, null, e);\n+\t\t\tduccOut.error(methodName, jobid, e);\n+\t\t}\n+\t}\n+\t\n+\tprivate class OnBeforeMessageSendHandler extends Thread {\n+\t\tprivate UimaASProcessStatus status;\n+\t\tpublic OnBeforeMessageSendHandler(UimaASProcessStatus status) {\n+\t\t\tthis.status = status;\n \t\t}\n+\t\tpublic void run() {\n+\t\t\tString methodName = \"OnBeforeMessageSendHandler\";\n+\t\t\ttry {\n+\t\t\t\t// <for testing only!!!>\n+\t\t\t\tif(injectLost) {\n+\t\t\t\t\tString casId = null;\n+\t\t\t\t\tcasId = \"\"+status.getCAS().hashCode();\n+\t\t\t\t\tWorkItem wi = jobDriver.getWorkItem(casId);\n+\t\t\t\t\twi.getCallbackState().statePendingAssigned();\n+\t\t\t\t\tduccOut.warn(methodName, jobid, \"seqNo:\"+wi.getSeqNo()+\" \"+wi.getCallbackState().getState());\n+\t\t\t\t\tint seqNo = wi.getSeqNo();\n+\t\t\t\t\tif(seqNo <= 1) {\n+\t\t\t\t\t\tduccOut.warn(methodName, jobid, \"callback #1 discarded seqNo:\"+seqNo+\" \"+\"casId:\"+casId);\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t// </for testing only!!!>\n+\t\t\t\tonBeforeMessageSendHandler(status);\n+\t\t\t}\n+\t\t\tcatch(Exception e) {\n+\t\t\t\tduccOut.error(methodName, jobid, e);\n+\t\t\t}\n+\t\t\tfinally {\n+\t\t\t\tduccOut.debug(methodName, jobid, \"exit\");\n+\t\t\t}\n+\t    }\n \t}\n \t\n \tprivate void onBeforeMessageSendHandler(UimaASProcessStatus status) {\n@@ -61,71 +104,104 @@ private void onBeforeMessageSendHandler(UimaASProcessStatus status) {\n \t\tThreadLocation threadLocation = null;\n \t\ttry {\n \t\t\tcasId = \"\"+status.getCAS().hashCode();\n-\t\t\t// <for testing only!!!>\n-\t\t\tif(injectLost) {\n-\t\t\t\tWorkItem wi = jobDriver.getWorkItem(casId);\n-\t\t\t\twi.getCallbackState().statePendingAssigned();\n-\t\t\t\tduccOut.warn(methodName, null, \"seqNo:\"+wi.getSeqNo()+\" \"+wi.getCallbackState().getState());\n-\t\t\t\tint seqNo = wi.getSeqNo();\n-\t\t\t\tif(seqNo <= 1) {\n-\t\t\t\t\tduccOut.warn(methodName, null, \"callback #1 discarded seqNo:\"+seqNo+\" \"+\"casId:\"+casId);\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t// </for testing only!!!>\n \t\t\tjobDriver.queued(jobDriver.getWorkItem(casId));\n \t\t\tthreadLocation = jobDriver.getCasDispatchMap().get(casId);\n-\t\t\tDuccId jobid = jobDriver.getJob().getDuccId();\n \t\t\tduccOut.debug(methodName, jobid, \"action:send \"+threadLocation.getInfo());\n \t\t\tjobDriver.getDriverStatusReportLive().workItemQueued(casId,jobid);\n \t\t\tjobDriver.getWorkItemStateManager().queued(threadLocation.getSeqNo());\n-\t\t\tduccOut.debug(methodName, null, \"seqNo:\"+threadLocation.getSeqNo()+\" \"+\"casId:\"+casId);\n+\t\t\tduccOut.debug(methodName, jobid, \"seqNo:\"+threadLocation.getSeqNo()+\" \"+\"casId:\"+casId);\n \t\t}\n \t\tcatch(Exception e) {\n-\t\t\tduccOut.error(methodName, null, \"seqNo:\"+threadLocation.getSeqNo()+\" \"+\"casId:\"+casId, e);\n+\t\t\tduccOut.error(methodName, jobid, \"seqNo:\"+threadLocation.getSeqNo()+\" \"+\"casId:\"+casId, e);\n \t\t}\n \t}\n \t\n \t@Override\n \tpublic void onBeforeProcessCAS(UimaASProcessStatus status, String nodeIP, String pid) {\n \t\tString methodName = \"onBeforeProcessCAS\";\n \t\ttry {\n-\t\t\tonBeforeProcessCASHandler(status, nodeIP, pid);\n+\t\t\tThread thread = new OnBeforeProcessCASHandler(status, nodeIP, pid);\n+\t\t\tif(synchronous) {\n+\t\t\t\tthread.run();\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tthread.start();\n+\t\t\t}\n \t\t}\n \t\tcatch(Exception e) {\n-\t\t\tduccOut.error(methodName, null, e);\n+\t\t\tduccOut.error(methodName, jobid, e);\n \t\t}\n \t}\n \t\n+\tprivate class OnBeforeProcessCASHandler extends Thread {\n+\t\tprivate UimaASProcessStatus status;\n+\t\tprivate String nodeIP;\n+\t\tprivate String pid;\n+\t\tpublic OnBeforeProcessCASHandler(UimaASProcessStatus status, String nodeIP, String pid) {\n+\t\t\tthis.status = status;\n+\t\t\tthis.nodeIP = nodeIP;\n+\t\t\tthis.pid = pid;\n+\t\t}\n+\t\tpublic void run() {\n+\t\t\tString methodName = \"OnBeforeProcessCASHandler\";\n+\t\t\ttry {\n+\t\t\t\t// <for testing only!!!>\n+\t\t\t\tif(injectLost) {\n+\t\t\t\t\tString casId = null;\n+\t\t\t\t\tcasId = \"\"+status.getCAS().hashCode();\n+\t\t\t\t\tWorkItem wi = jobDriver.getWorkItem(casId);\n+\t\t\t\t\twi.getCallbackState().statePendingAssigned();\n+\t\t\t\t\tduccOut.warn(methodName, jobid, \"seqNo:\"+wi.getSeqNo()+\" \"+wi.getCallbackState().getState());\n+\t\t\t\t\tint seqNo = wi.getSeqNo();\n+\t\t\t\t\tif(seqNo <= 3) {\n+\t\t\t\t\t\tduccOut.warn(methodName, jobid, \"callback #2 discarded seqNo:\"+seqNo+\" \"+\"casId:\"+casId);\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tif(injectDelay) {\n+\t\t\t\t\tString casId = null;\n+\t\t\t\t\tcasId = \"\"+status.getCAS().hashCode();\n+\t\t\t\t\tWorkItem wi = jobDriver.getWorkItem(casId);\n+\t\t\t\t\tint seqNo = wi.getSeqNo();\n+\t\t\t\t\tif((seqNo > 4) && (seqNo < 8)){\n+\t\t\t\t\t\tduccOut.warn(methodName, jobid, \"callback delayed seqNo:\"+seqNo+\" \"+\"casId:\"+casId);\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tThread.sleep(70*1000);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tcatch(Exception e) {\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t// </for testing only!!!>\n+\t\t\t\tonBeforeProcessCASHandler(status, nodeIP, pid);\n+\t\t\t}\n+\t\t\tcatch(Exception e) {\n+\t\t\t\tduccOut.error(methodName, jobid, e);\n+\t\t\t}\n+\t\t\tfinally {\n+\t\t\t\tduccOut.debug(methodName, jobid, \"exit\");\n+\t\t\t}\n+\t    }\n+\t}\n+\t\n \tprivate void onBeforeProcessCASHandler(UimaASProcessStatus status, String nodeIP, String pid) {\n \t\tString methodName = \"onBeforeProcessCASHandler\";\n \t\tString casId = null;\n \t\tThreadLocation threadLocation = null;\n \t\ttry {\n \t\t\tcasId = \"\"+status.getCAS().hashCode();\n \t\t\tWorkItem wi = jobDriver.getWorkItem(casId);\n-\t\t\t// <for testing only!!!>\n-\t\t\tif(injectLost) {\n-\t\t\t\twi.getCallbackState().statePendingAssigned();\n-\t\t\t\tduccOut.warn(methodName, null, \"seqNo:\"+wi.getSeqNo()+\" \"+wi.getCallbackState().getState());\n-\t\t\t\tint seqNo = wi.getSeqNo();\n-\t\t\t\tif(seqNo <= 3) {\n-\t\t\t\t\tduccOut.warn(methodName, null, \"callback #2 discarded seqNo:\"+seqNo+\" \"+\"casId:\"+casId);\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t// </for testing only!!!>\n \t\t\twi.getCallbackState().stateNotPending();\n-\t\t\tduccOut.debug(methodName, null, \"seqNo:\"+wi.getSeqNo()+\" \"+wi.getCallbackState().getState());\n+\t\t\tduccOut.debug(methodName, jobid, \"seqNo:\"+wi.getSeqNo()+\" \"+wi.getCallbackState().getState());\n \t\t\tString PID = pid.split(\":\")[0];\n \t\t\tjobDriver.dequeued(jobDriver.getWorkItem(casId), nodeIP, PID);\n \t\t\tthreadLocation = jobDriver.getCasDispatchMap().get(casId);\n \t\t\tthreadLocation.setNodeId(nodeIP);\n \t\t\tthreadLocation.setProcessId(pid);\n-\t\t\tduccOut.debug(methodName, jobDriver.getJob().getDuccId(), \"action:process \"+threadLocation.getInfo());\n+\t\t\tduccOut.debug(methodName, jobid, \"action:process \"+threadLocation.getInfo());\n \t\t\tjobDriver.assignLocation(jobDriver, casId, nodeIP, PID);\n \t\t\tjobDriver.getDriverStatusReportLive().workItemOperatingStart(casId, nodeIP, PID);\n-\t\t\tduccOut.debug(methodName, null, \"seqNo:\"+threadLocation.getSeqNo()+\" \"+\"casId:\"+casId+\" \"+\"node:\"+nodeIP+\" \"+\"PID:\"+pid);\n+\t\t\tduccOut.debug(methodName, jobid, \"seqNo:\"+threadLocation.getSeqNo()+\" \"+\"casId:\"+casId+\" \"+\"node:\"+nodeIP+\" \"+\"PID:\"+pid);\n \t\t\tjobDriver.getCasDispatchMap().update(casId, nodeIP, pid);\n \t\t\tjobDriver.getDriverStatusReportLive().workItemPendingProcessAssignmentRemove(casId);\n \t\t\tjobDriver.getWorkItemStateManager().operating(threadLocation.getSeqNo());\n@@ -136,25 +212,25 @@ private void onBeforeProcessCASHandler(UimaASProcessStatus status, String nodeIP\n \t\t\tif(threadLocation != null) {\n \t\t\t\tseqNo = threadLocation.getSeqNo();\n \t\t\t}\n-\t\t\tduccOut.error(methodName, null, \"seqNo:\"+seqNo+\" \"+\"casId:\"+casId, e);\n+\t\t\tduccOut.error(methodName, jobid, \"seqNo:\"+seqNo+\" \"+\"casId:\"+casId, e);\n \t\t}\n \t}\n \t\n \t@Override\n \tpublic void initializationComplete(EntityProcessStatus aStatus) {\n \t\tString methodName = \"initializationComplete\";\n-\t\tduccOut.debug(methodName, null, \"status!\");\n+\t\tduccOut.debug(methodName, jobid, \"status!\");\n \t}\n \n \t@Override\n \tpublic void entityProcessComplete(CAS aCas, EntityProcessStatus aStatus) {\n \t\tString methodName = \"entityProcessComplete\";\n-\t\tduccOut.debug(methodName, null, \"status!\");\n+\t\tduccOut.debug(methodName, jobid, \"status!\");\n \t}\n \n \t@Override\n \tpublic void collectionProcessComplete(EntityProcessStatus aStatus) {\n \t\tString methodName = \"collectionProcessComplete\";\n-\t\tduccOut.debug(methodName, null, \"status!\");\n+\t\tduccOut.debug(methodName, jobid, \"status!\");\n \t}\n }", "filename": "uima-ducc-jd/src/main/java/org/apache/uima/ducc/jd/client/WorkItemListener.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/13b1d5de42b4709e8a227f775359c067bec57a9e", "parent": "https://github.com/apache/uima-ducc/commit/e440dc8070eca9f4ae1b5303edefcc7ff9587bc9", "message": "UIMA-3324 DUCC webserver (WS) NPE when no services are registered\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1528086 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_43", "file": [{"additions": 69, "raw_url": "https://github.com/apache/uima-ducc/raw/13b1d5de42b4709e8a227f775359c067bec57a9e/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandler.java", "blob_url": "https://github.com/apache/uima-ducc/blob/13b1d5de42b4709e8a227f775359c067bec57a9e/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandler.java", "sha": "daeeda0595cb3c5148ca5d30b05364b32a6ad608", "changes": 128, "status": "modified", "deletions": 59, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandler.java?ref=13b1d5de42b4709e8a227f775359c067bec57a9e", "patch": "@@ -1690,41 +1690,46 @@ private void handleDuccServletServiceFilesData(String target,Request baseRequest\n \t\tduccLogger.trace(methodName, null, messages.fetch(\"enter\"));\n \t\tStringBuffer sb = new StringBuffer();\n \t\t\n-\t\tString name = request.getParameter(\"name\");\n-\t\tServicesRegistry servicesRegistry = new ServicesRegistry();\n-\t\tServicesRegistryMapPayload payload = servicesRegistry.findService(name);\n-\t\tProperties properties;\n-\t\tproperties = payload.meta;\n-\t\t\n-\t\tArrayList<String> implementors = servicesRegistry.getArrayList(properties.getProperty(IServicesRegistry.implementors));\n-\t\t\n-\t\tDuccWorkJob service = null;\n-\t\tDuccWorkMap duccWorkMap = DuccData.getInstance().get();\n-\t\tif(duccWorkMap.getServiceKeySet().size()> 0) {\n-\t\t\tIterator<DuccId> iterator = null;\n-\t\t\titerator = duccWorkMap.getServiceKeySet().iterator();\n-\t\t\tint counter = 0;\n-\t\t\tString type = \"SPU\";\n-\t\t\tString service_type = properties.getProperty(IServicesRegistry.service_type);\n-\t\t\tif(service_type != null) {\n-\t\t\t\tif(service_type.equalsIgnoreCase(IServicesRegistry.service_type_CUSTOM)) {\n-\t\t\t\t\ttype = \"SPC\";\n+\t\ttry {\n+\t\t\tString name = request.getParameter(\"name\");\n+\t\t\tServicesRegistry servicesRegistry = new ServicesRegistry();\n+\t\t\tServicesRegistryMapPayload payload = servicesRegistry.findService(name);\n+\t\t\tProperties properties;\n+\t\t\tproperties = payload.meta;\n+\t\t\t\n+\t\t\tArrayList<String> implementors = servicesRegistry.getArrayList(properties.getProperty(IServicesRegistry.implementors));\n+\t\t\t\n+\t\t\tDuccWorkJob service = null;\n+\t\t\tDuccWorkMap duccWorkMap = DuccData.getInstance().get();\n+\t\t\tif(duccWorkMap.getServiceKeySet().size()> 0) {\n+\t\t\t\tIterator<DuccId> iterator = null;\n+\t\t\t\titerator = duccWorkMap.getServiceKeySet().iterator();\n+\t\t\t\tint counter = 0;\n+\t\t\t\tString type = \"SPU\";\n+\t\t\t\tString service_type = properties.getProperty(IServicesRegistry.service_type);\n+\t\t\t\tif(service_type != null) {\n+\t\t\t\t\tif(service_type.equalsIgnoreCase(IServicesRegistry.service_type_CUSTOM)) {\n+\t\t\t\t\t\ttype = \"SPC\";\n+\t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t}\n-\t\t\twhile(iterator.hasNext()) {\n-\t\t\t\tDuccId serviceId = iterator.next();\n-\t\t\t\tString fid = \"\"+serviceId.getFriendly();\n-\t\t\t\tif(implementors.contains(fid)) {\n-\t\t\t\t\tservice = (DuccWorkJob) duccWorkMap.findDuccWork(serviceId);\n-\t\t\t\t\tIDuccProcessMap map = service.getProcessMap();\n-\t\t\t\t\tfor(DuccId key : map.keySet()) {\n-\t\t\t\t\t\tIDuccProcess process = map.get(key);\n-\t\t\t\t\t\tbuildServiceFilesListEntry(baseRequest,request,sb, service, process, type, ++counter);\n+\t\t\t\twhile(iterator.hasNext()) {\n+\t\t\t\t\tDuccId serviceId = iterator.next();\n+\t\t\t\t\tString fid = \"\"+serviceId.getFriendly();\n+\t\t\t\t\tif(implementors.contains(fid)) {\n+\t\t\t\t\t\tservice = (DuccWorkJob) duccWorkMap.findDuccWork(serviceId);\n+\t\t\t\t\t\tIDuccProcessMap map = service.getProcessMap();\n+\t\t\t\t\t\tfor(DuccId key : map.keySet()) {\n+\t\t\t\t\t\t\tIDuccProcess process = map.get(key);\n+\t\t\t\t\t\t\tbuildServiceFilesListEntry(baseRequest,request,sb, service, process, type, ++counter);\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}\n-\t\t\n+\t\tcatch(Throwable t) {\n+\t\t\t// no worries\n+\t\t}\n+\n \t\tif(sb.length() == 0) {\n \t\t\tsb.append(\"<tr>\");\n \t\t\tsb.append(\"<td>\");\n@@ -1969,40 +1974,45 @@ private void handleDuccServletServiceDeploymentsData(String target,Request baseR\n \t\tduccLogger.trace(methodName, null, messages.fetch(\"enter\"));\n \t\tStringBuffer sb = new StringBuffer();\n \t\t\n-\t\tString name = request.getParameter(\"name\");\n-\t\tServicesRegistry servicesRegistry = new ServicesRegistry();\n-\t\tServicesRegistryMapPayload payload = servicesRegistry.findService(name);\n-\t\tProperties properties;\n-\t\tproperties = payload.meta;\n-\t\t\n-\t\tArrayList<String> implementors = servicesRegistry.getArrayList(properties.getProperty(IServicesRegistry.implementors));\n-\t\t\n-\t\tDuccWorkJob service = null;\n-\t\tDuccWorkMap duccWorkMap = DuccData.getInstance().get();\n-\t\tif(duccWorkMap.getServiceKeySet().size()> 0) {\n-\t\t\tIterator<DuccId> iterator = null;\n-\t\t\titerator = duccWorkMap.getServiceKeySet().iterator();\n-\t\t\tint counter = 0;\n-\t\t\tString type = \"SPU\";\n-\t\t\tString service_type = properties.getProperty(IServicesRegistry.service_type);\n-\t\t\tif(service_type != null) {\n-\t\t\t\tif(service_type.equalsIgnoreCase(IServicesRegistry.service_type_CUSTOM)) {\n-\t\t\t\t\ttype = \"SPC\";\n+\t\ttry {\n+\t\t\tString name = request.getParameter(\"name\");\n+\t\t\tServicesRegistry servicesRegistry = new ServicesRegistry();\n+\t\t\tServicesRegistryMapPayload payload = servicesRegistry.findService(name);\n+\t\t\tProperties properties;\n+\t\t\tproperties = payload.meta;\n+\t\t\t\n+\t\t\tArrayList<String> implementors = servicesRegistry.getArrayList(properties.getProperty(IServicesRegistry.implementors));\n+\t\t\t\n+\t\t\tDuccWorkJob service = null;\n+\t\t\tDuccWorkMap duccWorkMap = DuccData.getInstance().get();\n+\t\t\tif(duccWorkMap.getServiceKeySet().size()> 0) {\n+\t\t\t\tIterator<DuccId> iterator = null;\n+\t\t\t\titerator = duccWorkMap.getServiceKeySet().iterator();\n+\t\t\t\tint counter = 0;\n+\t\t\t\tString type = \"SPU\";\n+\t\t\t\tString service_type = properties.getProperty(IServicesRegistry.service_type);\n+\t\t\t\tif(service_type != null) {\n+\t\t\t\t\tif(service_type.equalsIgnoreCase(IServicesRegistry.service_type_CUSTOM)) {\n+\t\t\t\t\t\ttype = \"SPC\";\n+\t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t}\n-\t\t\twhile(iterator.hasNext()) {\n-\t\t\t\tDuccId serviceId = iterator.next();\n-\t\t\t\tString fid = \"\"+serviceId.getFriendly();\n-\t\t\t\tif(implementors.contains(fid)) {\n-\t\t\t\t\tservice = (DuccWorkJob) duccWorkMap.findDuccWork(serviceId);\n-\t\t\t\t\tIDuccProcessMap map = service.getProcessMap();\n-\t\t\t\t\tfor(DuccId key : map.keySet()) {\n-\t\t\t\t\t\tIDuccProcess process = map.get(key);\n-\t\t\t\t\t\tbuildServiceProcessListEntry(sb, service, process, type, ++counter);\n+\t\t\t\twhile(iterator.hasNext()) {\n+\t\t\t\t\tDuccId serviceId = iterator.next();\n+\t\t\t\t\tString fid = \"\"+serviceId.getFriendly();\n+\t\t\t\t\tif(implementors.contains(fid)) {\n+\t\t\t\t\t\tservice = (DuccWorkJob) duccWorkMap.findDuccWork(serviceId);\n+\t\t\t\t\t\tIDuccProcessMap map = service.getProcessMap();\n+\t\t\t\t\t\tfor(DuccId key : map.keySet()) {\n+\t\t\t\t\t\t\tIDuccProcess process = map.get(key);\n+\t\t\t\t\t\t\tbuildServiceProcessListEntry(sb, service, process, type, ++counter);\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}\n+\t\tcatch(Throwable t) {\n+\t\t\t// no worries\n+\t\t}\n \t\t\n \t\tif(sb.length() == 0) {\n \t\t\tsb.append(\"<tr>\");", "filename": "uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandler.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/eb65c484dfc4fa5cb0dd0eb1df2e89a1ca792bbd", "parent": "https://github.com/apache/uima-ducc/commit/c5cd3981d984c3ad9974d7a7ae2742fbb9578118", "message": "UIMA-2924 Avoid NPE when no JVM args or env vars\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1512041 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_44", "file": [{"additions": 23, "raw_url": "https://github.com/apache/uima-ducc/raw/eb65c484dfc4fa5cb0dd0eb1df2e89a1ca792bbd/uima-ducc-cli/src/main/java/org/apache/uima/ducc/cli/DuccUiUtilities.java", "blob_url": "https://github.com/apache/uima-ducc/blob/eb65c484dfc4fa5cb0dd0eb1df2e89a1ca792bbd/uima-ducc-cli/src/main/java/org/apache/uima/ducc/cli/DuccUiUtilities.java", "sha": "2605e2f9cc5899b80ecf0483012d2cc5e5d830d7", "changes": 37, "status": "modified", "deletions": 14, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-cli/src/main/java/org/apache/uima/ducc/cli/DuccUiUtilities.java?ref=eb65c484dfc4fa5cb0dd0eb1df2e89a1ca792bbd", "patch": "@@ -439,6 +439,12 @@ private static String resolvePlaceholders(String contents, Map<String,String> ar\n      * @return - array of options\n      */\n     public static ArrayList<String> tokenizeList(String options, boolean stripQuotes) {\n+        \n+      ArrayList<String> tokens = new ArrayList<String>();\n+      if (options == null) {\n+        return tokens;\n+      }\n+      \n       // Pattern matches a non-quoted region or a double-quoted region or a single-quoted region\n       // 1st part matches one or more non-whitespace characters but not \" or '\n       // 2nd part matches a \"quoted\" region containing any character except \"\n@@ -449,10 +455,8 @@ private static String resolvePlaceholders(String contents, Map<String,String> ar\n       String doubleQuoteRegex = \"\\\"([^\\\"]*)\\\"\";\n       String singleQuoteRegex = \"'([^']*)'\";\n       final String regex = noSpaceRegex + \"|\" + doubleQuoteRegex + \"|\" + singleQuoteRegex;     \n-      \n       Pattern patn = Pattern.compile(regex);\n       Matcher matcher = patn.matcher(options);\n-      ArrayList<String> tokens = new ArrayList<String>();\n       StringBuilder sb = new StringBuilder();\n       \n       // If stripping quotes extract the capturing group (without the quotes)\n@@ -523,18 +527,23 @@ private static String resolvePlaceholders(String contents, Map<String,String> ar\n      * Test the quote handling and optional stripping \n      */\n     public static void main(String[] args) {\n-      String list = \"SINGLE_QUOTED='single quoted'\\tDOUBLE_QUOTED=\\\"double quoted\\\"     SINGLE_QUOTE=\\\"'\\\" \\r DOUBLE_QUOTE='\\\"'\";\n-      System.out.println(\"List: \" + list);\n-      System.out.println(\"\\n  quotes preserved:\");\n-      ArrayList<String> tokens = tokenizeList(list, false);\n-      for (String token : tokens) {\n-        System.out.println(\"~\" + token + \"~\");\n-      }\n-\n-      System.out.println(\"\\n  quotes stripped:\");\n-      tokens = tokenizeList(list, true);\n-      for (String token : tokens) {\n-        System.out.println(\"~\" + token + \"~\");\n+      String[] lists = { \"SINGLE_QUOTED='single quoted'\\tDOUBLE_QUOTED=\\\"double quoted\\\"     SINGLE_QUOTE=\\\"'\\\" \\r DOUBLE_QUOTE='\\\"'\",\n+                         \"\",\n+                         \"            \",\n+                         null };\n+      \n+      for (String list : lists) { \n+        System.out.println(\"List: \" + list);\n+        ArrayList<String> tokens = tokenizeList(list, false);\n+        System.out.println(\"\\n  quotes preserved on \" + tokens.size());\n+        for (String token : tokens) {\n+          System.out.println(\"~\" + token + \"~\");\n+        }\n+        tokens = tokenizeList(list, true);\n+        System.out.println(\"\\n  quotes stripped from \" + tokens.size());\n+        for (String token : tokens) {\n+          System.out.println(\"~\" + token + \"~\");\n+        }\n       }\n     }\n }", "filename": "uima-ducc-cli/src/main/java/org/apache/uima/ducc/cli/DuccUiUtilities.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/d1f35b6f99bdac6ffbfbbf176dcd916c81824af5", "parent": "https://github.com/apache/uima-ducc/commit/f7fc1b9cdce590bc9efb973b4da5c6c0d7746733", "message": "UIMA-3128 DUCC job driver (JD) may get NPE when logging an exception\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1508201 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_45", "file": [{"additions": 5, "raw_url": "https://github.com/apache/uima-ducc/raw/d1f35b6f99bdac6ffbfbbf176dcd916c81824af5/uima-ducc-jd/src/main/java/org/apache/uima/ducc/jd/client/WorkItemListener.java", "blob_url": "https://github.com/apache/uima-ducc/blob/d1f35b6f99bdac6ffbfbbf176dcd916c81824af5/uima-ducc-jd/src/main/java/org/apache/uima/ducc/jd/client/WorkItemListener.java", "sha": "6f5f73db1019c7e48b786cf8c2de487dfe6a64b7", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-jd/src/main/java/org/apache/uima/ducc/jd/client/WorkItemListener.java?ref=d1f35b6f99bdac6ffbfbbf176dcd916c81824af5", "patch": "@@ -132,7 +132,11 @@ private void onBeforeProcessCASHandler(UimaASProcessStatus status, String nodeIP\n \t\t\tjobDriver.getWorkItemStateManager().location(threadLocation.getSeqNo(),nodeIP, PID);\n \t\t}\n \t\tcatch(Exception e) {\n-\t\t\tduccOut.error(methodName, null, \"seqNo:\"+threadLocation.getSeqNo()+\" \"+\"casId:\"+casId, e);\n+\t\t\tString seqNo = null;\n+\t\t\tif(threadLocation != null) {\n+\t\t\t\tseqNo = threadLocation.getSeqNo();\n+\t\t\t}\n+\t\t\tduccOut.error(methodName, null, \"seqNo:\"+seqNo+\" \"+\"casId:\"+casId, e);\n \t\t}\n \t}\n \t", "filename": "uima-ducc-jd/src/main/java/org/apache/uima/ducc/jd/client/WorkItemListener.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/de3f3d89aaade16517dc27b920ae41cd3c17184a", "parent": "https://github.com/apache/uima-ducc/commit/ccabb0e3f368e8ad6c08353fa94c64a509e38628", "message": "UIMA-2691 DUCC webserver (WS) support for \"managed reservations\", fix NPE when service type is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1450169 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_46", "file": [{"additions": 14, "raw_url": "https://github.com/apache/uima-ducc/raw/de3f3d89aaade16517dc27b920ae41cd3c17184a/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandlerJsonFormat.java", "blob_url": "https://github.com/apache/uima-ducc/blob/de3f3d89aaade16517dc27b920ae41cd3c17184a/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandlerJsonFormat.java", "sha": "42bfebb542fca88de1f9a13ff4aad8d268e4fc3c", "changes": 26, "status": "modified", "deletions": 12, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandlerJsonFormat.java?ref=de3f3d89aaade16517dc27b920ae41cd3c17184a", "patch": "@@ -899,19 +899,21 @@ private void handleServletJsonFormatReservationsAaData(String target,Request bas\n \t\t\t\tJobInfo jobInfo = iS.next().getValue();\n \t\t\t\tDuccWorkJob job = jobInfo.getJob();\n \t\t\t\tServiceDeploymentType sdt = job.getServiceDeploymentType();\n-\t\t\t\tswitch(sdt) {\n-\t\t\t\tcase uima:\n-\t\t\t\tcase custom:\n-\t\t\t\tdefault:\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase other:\n-\t\t\t\t\tString user = job.getStandardInfo().getUser().trim();\n-\t\t\t\t\tboolean completed = job.isCompleted();\n-\t\t\t\t\tif(isListEligible(users, filterUsersStyle, user, completed)) {\n-\t\t\t\t\t\tLong key = new Long(job.getDuccId().getFriendly());\n-\t\t\t\t\t\tsortedCombined.put(key, job);\n+\t\t\t\tif(sdt != null) {\n+\t\t\t\t\tswitch(sdt) {\n+\t\t\t\t\tcase uima:\n+\t\t\t\t\tcase custom:\n+\t\t\t\t\tdefault:\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase other:\n+\t\t\t\t\t\tString user = job.getStandardInfo().getUser().trim();\n+\t\t\t\t\t\tboolean completed = job.isCompleted();\n+\t\t\t\t\t\tif(isListEligible(users, filterUsersStyle, user, completed)) {\n+\t\t\t\t\t\t\tLong key = new Long(job.getDuccId().getFriendly());\n+\t\t\t\t\t\t\tsortedCombined.put(key, job);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tbreak;\n \t\t\t\t\t}\n-\t\t\t\t\tbreak;\n \t\t\t\t}\n \t\t\t}\n \t\t\tif(sortedCombined.size() > 0) {", "filename": "uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandlerJsonFormat.java"}, {"additions": 14, "raw_url": "https://github.com/apache/uima-ducc/raw/de3f3d89aaade16517dc27b920ae41cd3c17184a/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandlerLegacy.java", "blob_url": "https://github.com/apache/uima-ducc/blob/de3f3d89aaade16517dc27b920ae41cd3c17184a/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandlerLegacy.java", "sha": "84b79effc140ee6f4e1ee1db4ae66d421e478c32", "changes": 26, "status": "modified", "deletions": 12, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandlerLegacy.java?ref=de3f3d89aaade16517dc27b920ae41cd3c17184a", "patch": "@@ -804,19 +804,21 @@ private void handleServletLegacyReservations(String target,Request baseRequest,H\n \t\t\t\tJobInfo jobInfo = iS.next().getValue();\n \t\t\t\tDuccWorkJob job = jobInfo.getJob();\n \t\t\t\tServiceDeploymentType sdt = job.getServiceDeploymentType();\n-\t\t\t\tswitch(sdt) {\n-\t\t\t\tcase uima:\n-\t\t\t\tcase custom:\n-\t\t\t\tdefault:\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase other:\n-\t\t\t\t\tString user = job.getStandardInfo().getUser().trim();\n-\t\t\t\t\tboolean completed = job.isCompleted();\n-\t\t\t\t\tif(isListEligible(users, filterUsersStyle, user, completed)) {\n-\t\t\t\t\t\tLong key = new Long(job.getDuccId().getFriendly());\n-\t\t\t\t\t\tsortedCombined.put(key, job);\n+\t\t\t\tif(sdt != null) {\n+\t\t\t\t\tswitch(sdt) {\n+\t\t\t\t\tcase uima:\n+\t\t\t\t\tcase custom:\n+\t\t\t\t\tdefault:\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase other:\n+\t\t\t\t\t\tString user = job.getStandardInfo().getUser().trim();\n+\t\t\t\t\t\tboolean completed = job.isCompleted();\n+\t\t\t\t\t\tif(isListEligible(users, filterUsersStyle, user, completed)) {\n+\t\t\t\t\t\t\tLong key = new Long(job.getDuccId().getFriendly());\n+\t\t\t\t\t\t\tsortedCombined.put(key, job);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tbreak;\n \t\t\t\t\t}\n-\t\t\t\t\tbreak;\n \t\t\t\t}\n \t\t\t}\n \t\t\tif(sortedCombined.size() > 0) {", "filename": "uima-ducc-web/src/main/java/org/apache/uima/ducc/ws/server/DuccHandlerLegacy.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/aa023bee6a0aa5349f5acb5cfec1d1cc628c44bc", "parent": "https://github.com/apache/uima-ducc/commit/f8772ba6997dc109b7054159983cf416d1fbb15f", "message": "UIMA-2645\nNeed to move check for bad log file to AFTER finding what that file is! (NPE).\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1444196 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_47", "file": [{"additions": 8, "raw_url": "https://github.com/apache/uima-ducc/raw/aa023bee6a0aa5349f5acb5cfec1d1cc628c44bc/uima-ducc-cli/src/main/java/org/apache/uima/ducc/cli/DuccServiceSubmit.java", "blob_url": "https://github.com/apache/uima-ducc/blob/aa023bee6a0aa5349f5acb5cfec1d1cc628c44bc/uima-ducc-cli/src/main/java/org/apache/uima/ducc/cli/DuccServiceSubmit.java", "sha": "e75e1b70784b9e4be31bf873e16fb49f0c35e018", "changes": 16, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-cli/src/main/java/org/apache/uima/ducc/cli/DuccServiceSubmit.java?ref=aa023bee6a0aa5349f5acb5cfec1d1cc628c44bc", "patch": "@@ -442,14 +442,7 @@ public int run(String[] args) throws Exception {\n \t\t\tif (DuccUiUtilities.duplicate_options(duccMessageProcessor, commandLine)) {\n \t\t\t\treturn DuccUiConstants.ERROR;\n \t\t\t}\n-\t\t\t\n-\t\t\t/*\n-\t\t\t * check for writable log directory\n-\t\t\t */\n-\t\t\tif (!has_writable_log_directory(serviceRequestProperties)) {\n-\t\t\t\treturn DuccUiConstants.ERROR;\n-\t\t\t}\n-\t\t\t\n+\t\t\t\t\t\t\n \t\t\t/*\n \t\t\t * marshal user\n \t\t\t */\n@@ -542,6 +535,13 @@ public int run(String[] args) throws Exception {\n \t\t\t\t}\n \t\t\t}\n \t\t}\n+        /*\n+         * make sure the logdir is actually legal.\n+         */\n+        if (!has_writable_log_directory(serviceRequestProperties)) {\n+            return DuccUiConstants.ERROR;\n+        }\n+\n \n \t\t// tack on \"services\" or \"processes\" to complete logging directory\n         String log_extension = \"services\";", "filename": "uima-ducc-cli/src/main/java/org/apache/uima/ducc/cli/DuccServiceSubmit.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/67f3466b17ad0432a27d765b3687f3b1bd00a20d", "parent": "https://github.com/apache/uima-ducc/commit/899528c9b81ec46d005f28fefb6d7c4d94d064f3", "message": "UIMA-2629 DUCC orchestrator (OR) takes NPE when cancel is attempted to non-existing reservation\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1441148 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_48", "file": [{"additions": 7, "raw_url": "https://github.com/apache/uima-ducc/raw/67f3466b17ad0432a27d765b3687f3b1bd00a20d/uima-ducc-orchestrator/src/main/java/org/apache/uima/ducc/orchestrator/OrchestratorComponent.java", "blob_url": "https://github.com/apache/uima-ducc/blob/67f3466b17ad0432a27d765b3687f3b1bd00a20d/uima-ducc-orchestrator/src/main/java/org/apache/uima/ducc/orchestrator/OrchestratorComponent.java", "sha": "53ac207ae5348b0bddc9173a4e57f555ed782518", "changes": 14, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-orchestrator/src/main/java/org/apache/uima/ducc/orchestrator/OrchestratorComponent.java?ref=67f3466b17ad0432a27d765b3687f3b1bd00a20d", "patch": "@@ -849,8 +849,8 @@ public void stopReservation(CancelReservationDuccEvent duccEvent) {\n \t\t\tif(elapsed > Constants.SYNC_LIMIT) {\n \t\t\t\tlogger.debug(methodName, dwid, \"elapsed msecs: \"+elapsed);\n \t\t\t}\n-\t\t\tif(Validate.request(duccEvent,duccWorkReservation)) {\n-\t\t\t\tif(duccWorkReservation != null) {\n+\t\t\tif(duccWorkReservation != null) {\n+\t\t\t\tif(Validate.request(duccEvent,duccWorkReservation)) {\n \t\t\t\t\tdwid = duccWorkReservation.getDuccId();\n \t\t\t\t\tString reqUser = properties.getProperty(JobRequestProperties.key_user).trim();\n \t\t\t\t\tString reqRole = getRole(properties);\n@@ -884,16 +884,16 @@ public void stopReservation(CancelReservationDuccEvent duccEvent) {\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\telse {\n-\t\t\t\t\t// prepare undefined reply \n-\t\t\t\t\tproperties.put(ReservationReplyProperties.key_message, ReservationReplyProperties.msg_not_found);\n+\t\t\t\t\tproperties.put(ReservationReplyProperties.key_message, ReservationReplyProperties.msg_user_not_authorized);\n \t\t\t\t\tduccEvent.setProperties(properties);\n-\t\t\t\t\tlogger.info(methodName, dwid, id+\" : \"+messages.fetch(\"reservation not found\"));\n+\t\t\t\t\tlogger.info(methodName, dwid, id+\" : \"+messages.fetch(\"not authorized\"));\n \t\t\t\t}\n \t\t\t}\n \t\t\telse {\n-\t\t\t\tproperties.put(ReservationReplyProperties.key_message, ReservationReplyProperties.msg_user_not_authorized);\n+\t\t\t\t// prepare undefined reply \n+\t\t\t\tproperties.put(ReservationReplyProperties.key_message, ReservationReplyProperties.msg_not_found);\n \t\t\t\tduccEvent.setProperties(properties);\n-\t\t\t\tlogger.info(methodName, dwid, id+\" : \"+messages.fetch(\"not authorized\"));\n+\t\t\t\tlogger.info(methodName, dwid, id+\" : \"+messages.fetch(\"reservation not found\"));\n \t\t\t}\n \t\t}\n \t\tlogger.trace(methodName, dwid, messages.fetch(\"exit\"));", "filename": "uima-ducc-orchestrator/src/main/java/org/apache/uima/ducc/orchestrator/OrchestratorComponent.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/214fb8159fb489b536e7f28d9cb7faead2c29e34", "parent": "https://github.com/apache/uima-ducc/commit/3077ab6054ef8a5e76219261acabfab8cac3c9c6", "message": "UIMA-2627 Fix NPE in OR when submitting Job/Reservation/Service with missing value(s)\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1440914 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_49", "file": [{"additions": 24, "raw_url": "https://github.com/apache/uima-ducc/raw/214fb8159fb489b536e7f28d9cb7faead2c29e34/uima-ducc-cli/src/main/java/org/apache/uima/ducc/cli/DuccJobSubmit.java", "blob_url": "https://github.com/apache/uima-ducc/blob/214fb8159fb489b536e7f28d9cb7faead2c29e34/uima-ducc-cli/src/main/java/org/apache/uima/ducc/cli/DuccJobSubmit.java", "sha": "7471cb7ef3ec199b6db631df2061f6f4fdcc0e2d", "changes": 24, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-cli/src/main/java/org/apache/uima/ducc/cli/DuccJobSubmit.java?ref=214fb8159fb489b536e7f28d9cb7faead2c29e34", "patch": "@@ -36,6 +36,7 @@\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.Properties;\n+import java.util.Set;\n \n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.CommandLineParser;\n@@ -898,6 +899,29 @@ public int run(String[] args) throws Exception {\n             return DuccUiConstants.ERROR;\n         }\n \n+        boolean missingValue = false;\n+        Set<Object> keys = jobRequestProperties.keySet();\n+        for(Object key : keys) {\n+        \tif(JobRequestProperties.keys_requiring_values.contains(key)) {\n+        \t\tObject oValue = jobRequestProperties.get(key);\n+        \t\tif(oValue == null) {\n+        \t\t\tduccMessageProcessor.err(\"missing value for: \"+key);\n+        \t\t\tmissingValue = true;\n+        \t\t}\n+        \t\telse if(oValue instanceof String) {\n+        \t\t\tString sValue = (String)oValue;\n+        \t\t\tif(sValue.trim().length() < 1) {\n+            \t\t\tduccMessageProcessor.err(\"missing value for: \"+key);\n+            \t\t\tmissingValue = true;\n+            \t\t}\n+        \t\t}\n+        \t\t\n+        \t}\n+        }\n+        if(missingValue) {\n+        \treturn DuccUiConstants.ERROR;\n+        }\n+        \n \t\t/*\n \t\t * send to JM & get reply\n \t\t */", "filename": "uima-ducc-cli/src/main/java/org/apache/uima/ducc/cli/DuccJobSubmit.java"}, {"additions": 26, "raw_url": "https://github.com/apache/uima-ducc/raw/214fb8159fb489b536e7f28d9cb7faead2c29e34/uima-ducc-cli/src/main/java/org/apache/uima/ducc/cli/DuccReservationSubmit.java", "blob_url": "https://github.com/apache/uima-ducc/blob/214fb8159fb489b536e7f28d9cb7faead2c29e34/uima-ducc-cli/src/main/java/org/apache/uima/ducc/cli/DuccReservationSubmit.java", "sha": "adb9d952a840fda042c5ad704ab573a5e96862ff", "changes": 26, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-cli/src/main/java/org/apache/uima/ducc/cli/DuccReservationSubmit.java?ref=214fb8159fb489b536e7f28d9cb7faead2c29e34", "patch": "@@ -24,6 +24,7 @@\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.Properties;\n+import java.util.Set;\n \n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.CommandLineParser;\n@@ -41,6 +42,7 @@\n import org.apache.uima.ducc.transport.event.DuccEvent;\n import org.apache.uima.ducc.transport.event.SubmitReservationDuccEvent;\n import org.apache.uima.ducc.transport.event.SubmitReservationReplyDuccEvent;\n+import org.apache.uima.ducc.transport.event.cli.JobSpecificationProperties;\n import org.apache.uima.ducc.transport.event.cli.ReservationRequestProperties;\n import org.apache.uima.ducc.transport.event.cli.ReservationSpecificationProperties;\n import org.apache.uima.ducc.transport.event.cli.SpecificationProperties;\n@@ -220,6 +222,30 @@ public int run(String[] args) throws Exception {\n \t\t * identify invoker\n \t\t */\n \t\treservationRequestProperties.setProperty(ReservationRequestProperties.key_submitter_pid_at_host, ManagementFactory.getRuntimeMXBean().getName());\n+\t\t\n+        boolean missingValue = false;\n+        Set<Object> keys = reservationRequestProperties.keySet();\n+        for(Object key : keys) {\n+        \tif(ReservationRequestProperties.keys_requiring_values.contains(key)) {\n+        \t\tObject oValue = reservationRequestProperties.get(key);\n+        \t\tif(oValue == null) {\n+        \t\t\tduccMessageProcessor.err(\"missing value for: \"+key);\n+        \t\t\tmissingValue = true;\n+        \t\t}\n+        \t\telse if(oValue instanceof String) {\n+        \t\t\tString sValue = (String)oValue;\n+        \t\t\tif(sValue.trim().length() < 1) {\n+            \t\t\tduccMessageProcessor.err(\"missing value for: \"+key);\n+            \t\t\tmissingValue = true;\n+            \t\t}\n+        \t\t}\n+        \t\t\n+        \t}\n+        }\n+        if(missingValue) {\n+        \treturn DuccUiConstants.ERROR;\n+        }\n+\t\t\n \t\t/*\n \t\t * send to Orchestrator & get reply\n \t\t */", "filename": "uima-ducc-cli/src/main/java/org/apache/uima/ducc/cli/DuccReservationSubmit.java"}, {"additions": 26, "raw_url": "https://github.com/apache/uima-ducc/raw/214fb8159fb489b536e7f28d9cb7faead2c29e34/uima-ducc-cli/src/main/java/org/apache/uima/ducc/cli/DuccServiceSubmit.java", "blob_url": "https://github.com/apache/uima-ducc/blob/214fb8159fb489b536e7f28d9cb7faead2c29e34/uima-ducc-cli/src/main/java/org/apache/uima/ducc/cli/DuccServiceSubmit.java", "sha": "02f5b6f32e1879cd9783889875aa811bb96ee4ee", "changes": 26, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-cli/src/main/java/org/apache/uima/ducc/cli/DuccServiceSubmit.java?ref=214fb8159fb489b536e7f28d9cb7faead2c29e34", "patch": "@@ -28,6 +28,7 @@\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Set;\n import java.util.Map.Entry;\n import java.util.Properties;\n \n@@ -50,6 +51,7 @@\n import org.apache.uima.ducc.transport.event.DuccEvent;\n import org.apache.uima.ducc.transport.event.SubmitServiceDuccEvent;\n import org.apache.uima.ducc.transport.event.SubmitServiceReplyDuccEvent;\n+import org.apache.uima.ducc.transport.event.cli.JobRequestProperties;\n import org.apache.uima.ducc.transport.event.cli.ServiceRequestProperties;\n import org.apache.uima.ducc.transport.event.cli.ServiceSpecificationProperties;\n import org.apache.uima.ducc.transport.event.cli.SpecificationProperties;\n@@ -669,6 +671,30 @@ public int run(String[] args) throws Exception {\n \t\t * identify invoker\n \t\t */\n \t\tserviceRequestProperties.setProperty(ServiceRequestProperties.key_submitter_pid_at_host, ManagementFactory.getRuntimeMXBean().getName());\n+\t\t\n+        boolean missingValue = false;\n+        Set<Object> keys = serviceRequestProperties.keySet();\n+        for(Object key : keys) {\n+        \tif(ServiceRequestProperties.keys_requiring_values.contains(key)) {\n+        \t\tObject oValue = serviceRequestProperties.get(key);\n+        \t\tif(oValue == null) {\n+        \t\t\tduccMessageProcessor.err(\"missing value for: \"+key);\n+        \t\t\tmissingValue = true;\n+        \t\t}\n+        \t\telse if(oValue instanceof String) {\n+        \t\t\tString sValue = (String)oValue;\n+        \t\t\tif(sValue.trim().length() < 1) {\n+            \t\t\tduccMessageProcessor.err(\"missing value for: \"+key);\n+            \t\t\tmissingValue = true;\n+            \t\t}\n+        \t\t}\n+        \t\t\n+        \t}\n+        }\n+        if(missingValue) {\n+        \treturn DuccUiConstants.ERROR;\n+        }\n+\t\t\n \t\t/*\n \t\t * send to JM & get reply\n \t\t */", "filename": "uima-ducc-cli/src/main/java/org/apache/uima/ducc/cli/DuccServiceSubmit.java"}, {"additions": 46, "raw_url": "https://github.com/apache/uima-ducc/raw/214fb8159fb489b536e7f28d9cb7faead2c29e34/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/event/cli/JobRequestProperties.java", "blob_url": "https://github.com/apache/uima-ducc/blob/214fb8159fb489b536e7f28d9cb7faead2c29e34/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/event/cli/JobRequestProperties.java", "sha": "c2c99df4633fbd8deb4d0b28ee8ace00a7544880", "changes": 46, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/event/cli/JobRequestProperties.java?ref=214fb8159fb489b536e7f28d9cb7faead2c29e34", "patch": "@@ -19,7 +19,9 @@\n package org.apache.uima.ducc.transport.event.cli;\n \n import java.io.Serializable;\n+import java.util.Arrays;\n import java.util.Enumeration;\n+import java.util.List;\n \n import org.apache.uima.ducc.common.utils.DuccLogger;\n \n@@ -56,6 +58,50 @@\n \tpublic static String key_id = \"id\";\t\n \tpublic static String key_dpid = \"dpid\";\t\n \t\n+\tpublic static List<String> keys_requiring_values = Arrays.asList(\n+\t\t\tJobRequestProperties.key_signature,\n+\t\t\tJobRequestProperties.key_job_broker,\n+\t\t\tJobRequestProperties.key_job_endpoint,\n+\t\t\tJobRequestProperties.key_service_broker,\n+\t\t\tJobRequestProperties.key_service_endpoint,\n+\t\t\tJobRequestProperties.key_description,\n+\t\t\tJobRequestProperties.key_scheduling_class,\n+\t\t\tJobRequestProperties.key_submitter_pid_at_host,\n+\t\t\tkey_user,\n+\t\t\tkey_specification,\n+\t\t\tkey_notifications,\n+\t\t\tkey_log_directory,\n+\t\t\tkey_working_directory,\n+\t\t\tkey_scheduling_priority,\n+\t\t\tkey_jvm,\n+\t\t\tkey_driver_jvm_args,\n+\t\t\tkey_driver_classpath,\n+\t\t\tkey_driver_environment,\n+\t\t\tkey_driver_memory_size,\n+\t\t\tkey_driver_descriptor_CR,\n+\t\t\tkey_driver_descriptor_CR_overrides,\n+\t\t\tkey_driver_exception_handler,\n+\t\t\tkey_process_jvm_args,\n+\t\t\tkey_process_classpath,\n+\t\t\tkey_process_environment,\n+\t\t\tkey_process_memory_size,\n+\t\t\tkey_process_DD,\n+\t\t\tkey_process_descriptor_CM,\n+\t\t\tkey_process_descriptor_CM_overrides,\n+\t\t\tkey_process_descriptor_AE,\n+\t\t\tkey_process_descriptor_AE_overrides,\n+\t\t\tkey_process_descriptor_CC,\n+\t\t\tkey_process_descriptor_CC_overrides,\n+\t\t\tkey_process_deployments_max,\n+\t\t\tkey_process_deployments_min,\n+\t\t\tkey_process_initialization_failures_cap,\n+\t\t\tkey_process_failures_limit,\n+\t\t\tkey_process_thread_count,\n+\t\t\tkey_process_get_meta_time_max,\n+\t\t\tkey_process_per_item_time_max,\n+\t        key_service_dependency\n+\t        );\n+\t\n \tpublic void specification(DuccLogger logger) {\n \t\tString methodName = \"specification\";\n \t\tEnumeration<Object> keys = keys();", "filename": "uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/event/cli/JobRequestProperties.java"}, {"additions": 16, "raw_url": "https://github.com/apache/uima-ducc/raw/214fb8159fb489b536e7f28d9cb7faead2c29e34/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/event/cli/ReservationRequestProperties.java", "blob_url": "https://github.com/apache/uima-ducc/blob/214fb8159fb489b536e7f28d9cb7faead2c29e34/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/event/cli/ReservationRequestProperties.java", "sha": "cdff6ba5c1a02773641e38965d86e053c16391f2", "changes": 16, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/event/cli/ReservationRequestProperties.java?ref=214fb8159fb489b536e7f28d9cb7faead2c29e34", "patch": "@@ -19,6 +19,8 @@\n package org.apache.uima.ducc.transport.event.cli;\n \n import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n \n /**\n  * Request characteristics provided by user.\n@@ -55,4 +57,18 @@\n \t * node_list: list of assigned nodes\n \t */\n \tpublic static String key_node_list = \"node_list\";\t\n+\t\n+\tpublic static List<String> keys_requiring_values = Arrays.asList(\n+\t\t\tJobRequestProperties.key_signature,\n+\t\t\tJobRequestProperties.key_job_broker,\n+\t\t\tJobRequestProperties.key_job_endpoint,\n+\t\t\tJobRequestProperties.key_service_broker,\n+\t\t\tJobRequestProperties.key_service_endpoint,\n+\t\t\tJobRequestProperties.key_description,\n+\t\t\tJobRequestProperties.key_scheduling_class,\n+\t\t\tJobRequestProperties.key_submitter_pid_at_host,\n+\t\t\tkey_user,\n+\t\t\tkey_specification\n+\t        );\n+\t\n }", "filename": "uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/event/cli/ReservationRequestProperties.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/ab62db3555dc3af3417ae2ccf312362e5b1fbb9d", "parent": "https://github.com/apache/uima-ducc/commit/9e442feba1f798cb0ff7deedcb1ef7d3640a5f41", "message": "UIMA-4532 DUCC OR+WS expunge \"shares\"\n\nFix exceptions (NPE) when using legacy ckpt, convert \"deprecated\" Long values into new SizeByte values for sizes of Reservation and Slice\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1704615 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_50", "file": [{"additions": 12, "raw_url": "https://github.com/apache/uima-ducc/raw/ab62db3555dc3af3417ae2ccf312362e5b1fbb9d/uima-ducc-orchestrator/src/main/java/org/apache/uima/ducc/orchestrator/OrchestratorCheckpoint.java", "blob_url": "https://github.com/apache/uima-ducc/blob/ab62db3555dc3af3417ae2ccf312362e5b1fbb9d/uima-ducc-orchestrator/src/main/java/org/apache/uima/ducc/orchestrator/OrchestratorCheckpoint.java", "sha": "92a5b7c118fb9752aa0c0676e8882132c4c3e196", "changes": 17, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-orchestrator/src/main/java/org/apache/uima/ducc/orchestrator/OrchestratorCheckpoint.java?ref=ab62db3555dc3af3417ae2ccf312362e5b1fbb9d", "patch": "@@ -237,7 +237,7 @@ public boolean saveState()\n \n     private boolean restoreStateDb()\n     {\n-\t\tString methodName = \"restoreState\";\n+\t\tString methodName = \"restoreStateDb\";\n \t\tlogger.trace(methodName, null, messages.fetch(\"enter\"));\n         IHistoryPersistenceManager saver = HistoryFactory.getInstance(this.getClass().getName());\n \t\tboolean retVal = false;\n@@ -276,7 +276,7 @@ private boolean restoreStateDb()\n     }\n \n \tprivate boolean restoreStateFile() {\n-\t\tString methodName = \"restoreState\";\n+\t\tString methodName = \"restoreStateFile\";\n \t\tlogger.trace(methodName, null, messages.fetch(\"enter\"));\n \t\tboolean retVal = false;\n \t\tif(saveEnabled) {\n@@ -326,11 +326,18 @@ private boolean restoreStateFile() {\n \t\n     public boolean restoreState()\n     {\n+    \tString methodName = \"restoreState\";\n+    \tboolean retVal = false;\n         // we can resolve these into just one call by allowing the checkpointable to be saved in its parts for\n         // the file implementation, to avoid circular dependencies\n-\n-        if ( useDb ) return restoreStateDb();\n-        else         return restoreStateFile();\n+    \ttry {\n+    \t\tif ( useDb ) retVal = restoreStateDb();\n+            else         retVal = restoreStateFile();\n+    \t}\n+        catch(Exception e) {\n+        \tlogger.error(methodName, null, e);\n+        }\n+    \treturn retVal;\n     }\n \n }", "filename": "uima-ducc-orchestrator/src/main/java/org/apache/uima/ducc/orchestrator/OrchestratorCheckpoint.java"}, {"additions": 11, "raw_url": "https://github.com/apache/uima-ducc/raw/ab62db3555dc3af3417ae2ccf312362e5b1fbb9d/uima-ducc-orchestrator/src/main/java/org/apache/uima/ducc/orchestrator/jd/scheduler/JdReservation.java", "blob_url": "https://github.com/apache/uima-ducc/blob/ab62db3555dc3af3417ae2ccf312362e5b1fbb9d/uima-ducc-orchestrator/src/main/java/org/apache/uima/ducc/orchestrator/jd/scheduler/JdReservation.java", "sha": "660cfc42e5da3061ac0383e1e835445bdddde4c8", "changes": 22, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-orchestrator/src/main/java/org/apache/uima/ducc/orchestrator/jd/scheduler/JdReservation.java?ref=ab62db3555dc3af3417ae2ccf312362e5b1fbb9d", "patch": "@@ -35,21 +35,21 @@\n \tprivate static DuccLogger logger = new DuccLogger(JdReservation.class);\n \tprivate static DuccId jobid = null;\n \t\n-\tpublic JdReservation(IDuccWorkReservation dwr, SizeBytes reservationSize, SizeBytes sliceSize) {\n-\t\tinitialize(dwr, reservationSize, sliceSize);\n+\tpublic JdReservation(IDuccWorkReservation dwr, SizeBytes sizeOfReservation, SizeBytes sizeOfSlice) {\n+\t\tinitialize(dwr, sizeOfReservation, sizeOfSlice);\n \t}\n \t\n-\tprivate void initialize(IDuccWorkReservation dwr, SizeBytes reservationSize, SizeBytes sliceSize) {\n+\tprivate void initialize(IDuccWorkReservation dwr, SizeBytes sizeOfReservation, SizeBytes sizeOfSlice) {\n \t\tif(dwr != null) {\n \t\t\tDuccId jdReservationId = (DuccId) dwr.getDuccId();\n \t\t\tsetJdReservationId(jdReservationId);\n \t\t\tsetNodeIdentity(JdHelper.getNodeIdentity(dwr));\n \t\t\tsetReservationState(dwr.getReservationState());\n-\t\t\tif(reservationSize != null) {\n-\t\t\t\tsetReservationSize(reservationSize);\n+\t\t\tif(sizeOfReservation != null) {\n+\t\t\t\tsetSizeOfReservation(sizeOfReservation);\n \t\t\t}\n-\t\t\tif(sliceSize != null) {\n-\t\t\t\tsetSliceSize(sliceSize);\n+\t\t\tif(sizeOfSlice != null) {\n+\t\t\t\tsetSizeOfSlice(sizeOfSlice);\n \t\t\t}\n \t\t}\n \t}\n@@ -80,9 +80,9 @@ public boolean isUp() {\n \t\n \tpublic Long getSlicesTotal() {\n \t\tString location = \"getSlicesTotal\";\n-\t\tSizeBytes reservationSize = getReservationSize();\n-\t\tSizeBytes sliceSize = getSliceSize();\n-\t\tLong retVal = (long) (reservationSize.getBytes() / (1.0 * sliceSize.getBytes()));\n+\t\tSizeBytes sizeOfReservation = getSizeOfReservation();\n+\t\tSizeBytes sizeOfSlice = getSizeOfSlice();\n+\t\tLong retVal = (long) (sizeOfReservation.getBytes() / (1.0 * sizeOfSlice.getBytes()));\n \t\tlogger.trace(location, jobid, retVal);\n \t\treturn retVal;\n \t}\n@@ -113,7 +113,7 @@ public boolean isEmpty() {\n \t}\n \t\n \tprotected NodeIdentity allocate(DuccId jdId, DuccId jobId) {\n-\t\tNodeIdentity retVal = allocate(jdId, jobId, getSliceSize());\n+\t\tNodeIdentity retVal = allocate(jdId, jobId, getSizeOfSlice());\n \t\treturn retVal;\n \t}\n \t", "filename": "uima-ducc-orchestrator/src/main/java/org/apache/uima/ducc/orchestrator/jd/scheduler/JdReservation.java"}, {"additions": 26, "raw_url": "https://github.com/apache/uima-ducc/raw/ab62db3555dc3af3417ae2ccf312362e5b1fbb9d/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/event/common/JdReservationBean.java", "blob_url": "https://github.com/apache/uima-ducc/blob/ab62db3555dc3af3417ae2ccf312362e5b1fbb9d/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/event/common/JdReservationBean.java", "sha": "ded16b0b08e80b32330a4e9b6122ba0c9d2a02eb", "changes": 37, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/event/common/JdReservationBean.java?ref=ab62db3555dc3af3417ae2ccf312362e5b1fbb9d", "patch": "@@ -23,6 +23,7 @@\n \n import org.apache.uima.ducc.common.NodeIdentity;\n import org.apache.uima.ducc.common.SizeBytes;\n+import org.apache.uima.ducc.common.SizeBytes.Type;\n import org.apache.uima.ducc.common.utils.id.DuccId;\n import org.apache.uima.ducc.transport.event.common.IDuccState.ReservationState;\n \n@@ -33,8 +34,13 @@\n \tprivate DuccId jdReservationDuccId = null;\n \tprivate NodeIdentity nodeIdentity;\n \tprivate ReservationState reservationState = null;\n-\tprivate SizeBytes reservationSize = new SizeBytes(SizeBytes.Type.GBytes,30);\n-\tprivate SizeBytes sliceSize = new SizeBytes(SizeBytes.Type.MBytes,300);\n+\tprivate SizeBytes sizeOfReservation = new SizeBytes(SizeBytes.Type.GBytes,30);\n+\tprivate SizeBytes sizeOfSlice = new SizeBytes(SizeBytes.Type.MBytes,300);\n+\t\n+\t@Deprecated\n+\tprivate Long reservationSize = new Long(0);\n+\t@Deprecated\n+\tprivate Long sliceSize = new Long(0);\n \t\n \tprivate ConcurrentHashMap<DuccId, SizeBytes> map = new ConcurrentHashMap<DuccId, SizeBytes>();\n \t\n@@ -70,20 +76,29 @@ public ReservationState getReservationState() {\n \t\treturn reservationState;\n \t}\n \t\n-\tpublic void setReservationSize(SizeBytes value) {\n-\t\treservationSize = value;\n+\tpublic void setSizeOfReservation(SizeBytes value) {\n+\t\treservationSize = new Long(0);\n+\t\tsizeOfReservation = value;\n \t}\n \t\n-\tpublic SizeBytes getReservationSize() {\n-\t\treturn reservationSize;\n+\tpublic SizeBytes getSizeOfReservation() {\n+\t\tif(reservationSize > 0) {\n+\t\t\tsizeOfReservation = new SizeBytes(Type.Bytes, reservationSize);\n+\t\t\treservationSize = new Long(0);\n+\t\t}\n+\t\treturn sizeOfReservation;\n \t}\n \t\n-\tpublic void setSliceSize(SizeBytes value) {\n-\t\tsliceSize = value;\n+\tpublic void setSizeOfSlice(SizeBytes value) {\n+\t\tsliceSize = new Long(0);\n+\t\tsizeOfSlice = value;\n \t}\n \t\n-\tpublic SizeBytes getSliceSize() {\n-\t\treturn sliceSize;\n+\tpublic SizeBytes getSizeOfSlice() {\n+\t\tif(sliceSize > 0) {\n+\t\t\tsizeOfSlice = new SizeBytes(Type.Bytes, sliceSize);\n+\t\t\tsliceSize = new Long(0);\n+\t\t}\n+\t\treturn sizeOfSlice;\n \t}\n-\t\n }", "filename": "uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/event/common/JdReservationBean.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/850aab300ff24e415e88b55ee9ca9f7fd8bff92e", "parent": "https://github.com/apache/uima-ducc/commit/bfad4a091b892f970895ced73abb0eda7ccb6dd7", "message": "UIMA-3193 DUCC job driver (JD) NPE at JobDriverComponent.java:194 \n\nDon't try to export something that does not exist!\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1515566 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_51", "file": [{"additions": 4, "raw_url": "https://github.com/apache/uima-ducc/raw/850aab300ff24e415e88b55ee9ca9f7fd8bff92e/uima-ducc-jd/src/main/java/org/apache/uima/ducc/jd/JobDriverComponent.java", "blob_url": "https://github.com/apache/uima-ducc/blob/850aab300ff24e415e88b55ee9ca9f7fd8bff92e/uima-ducc-jd/src/main/java/org/apache/uima/ducc/jd/JobDriverComponent.java", "sha": "b885531237a15326ad0eee9109525aebd9cd9c78", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-jd/src/main/java/org/apache/uima/ducc/jd/JobDriverComponent.java?ref=850aab300ff24e415e88b55ee9ca9f7fd8bff92e", "patch": "@@ -191,8 +191,10 @@ protected void process(OrchestratorAbbreviatedStateDuccEvent duccEvent) {\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\ttry {\n-\t\t\t\t\tConcurrentSkipListMap<Long, JobProcessData> map = jpc.transform(job);\n-\t\t\t\t\tjpc.exportData(map);\n+\t\t\t\t\tif(jpc != null) {\n+\t\t\t\t\t\tConcurrentSkipListMap<Long, JobProcessData> map = jpc.transform(job);\n+\t\t\t\t\t\tjpc.exportData(map);\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tcatch(Exception e) {\n \t\t\t\t\tduccOut.error(methodName, job.getDuccId(), summarize(e), e);", "filename": "uima-ducc-jd/src/main/java/org/apache/uima/ducc/jd/JobDriverComponent.java"}], "repo": "uima-ducc"}, {"commit": "https://github.com/apache/uima-ducc/commit/cba24077175a076bc18ce9e4296ad00ccbdecb95", "parent": "https://github.com/apache/uima-ducc/commit/3bdefbd37aefba8e8998ab7a2d9bd82e3c58f688", "message": "UIMA-2960 DUCC Job Driver (JD) NPE when timeout occurs for queued work item (CAS) for which no JP has been assigned\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uima-ducc/trunk@1489381 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-ducc_52", "file": [{"additions": 2, "raw_url": "https://github.com/apache/uima-ducc/raw/cba24077175a076bc18ce9e4296ad00ccbdecb95/uima-ducc-jd/src/main/java/org/apache/uima/ducc/jd/JobDriver.java", "blob_url": "https://github.com/apache/uima-ducc/blob/cba24077175a076bc18ce9e4296ad00ccbdecb95/uima-ducc-jd/src/main/java/org/apache/uima/ducc/jd/JobDriver.java", "sha": "f03f65551b4fab577c6189868797dba26dc04126", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-jd/src/main/java/org/apache/uima/ducc/jd/JobDriver.java?ref=cba24077175a076bc18ce9e4296ad00ccbdecb95", "patch": "@@ -1214,6 +1214,7 @@ private void employPluginExceptionHandler(WorkItem workItem, Exception e) {\n \t\tswitch(directive) {\n \t\tcase ProcessContinue_CasNoRetry:\n \t\t\tduccOut.info(location, workItem.getJobId(), workItem.getProcessId(), message);\n+\t\t\tworkItemStateManager.error(workItem.getSeqNo());\n \t\t\tworkItemError(workItem, e, directive);\n \t\t\tremove(workItem);\n \t\t\tcasSource.recycle(workItem.getCAS());\n@@ -1230,6 +1231,7 @@ private void employPluginExceptionHandler(WorkItem workItem, Exception e) {\n \t\t\tbreak;\n \t\tcase ProcessStop_CasNoRetry:\n \t\t\tduccOut.info(location, workItem.getJobId(), workItem.getProcessId(), message);\n+\t\t\tworkItemStateManager.error(workItem.getSeqNo());\n \t\t\tworkItemError(workItem, e, directive);\n \t\t\tremove(workItem);\n \t\t\tcasSource.recycle(workItem.getCAS());", "filename": "uima-ducc-jd/src/main/java/org/apache/uima/ducc/jd/JobDriver.java"}, {"additions": 15, "raw_url": "https://github.com/apache/uima-ducc/raw/cba24077175a076bc18ce9e4296ad00ccbdecb95/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/event/jd/DuccProcessWorkItemsMap.java", "blob_url": "https://github.com/apache/uima-ducc/blob/cba24077175a076bc18ce9e4296ad00ccbdecb95/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/event/jd/DuccProcessWorkItemsMap.java", "sha": "77a620b25085d9301cd0a315fceb39737e52a6b0", "changes": 20, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/uima-ducc/contents/uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/event/jd/DuccProcessWorkItemsMap.java?ref=cba24077175a076bc18ce9e4296ad00ccbdecb95", "patch": "@@ -45,27 +45,37 @@ private IDuccProcessWorkItems get(DuccId duccId) {\n \t}\n \t\n \tpublic void done(DuccId processId, long time) {\n-\t\tget(processId).done(time);\n \t\tgetTotals().done(time);\n+\t\tif(processId != null) {\n+\t\t\tget(processId).done(time);\n+\t\t}\n \t}\n \n \tpublic void dispatch(DuccId processId) {\n-\t\tget(processId).dispatch();\n \t\tgetTotals().dispatch();\n+\t\tif(processId != null) {\n+\t\t\tget(processId).dispatch();\n+\t\t}\n \t}\n \t\n \tpublic void error(DuccId processId) {\n-\t\tget(processId).error();\n \t\tgetTotals().error();\n+\t\tif(processId != null) {\n+\t\t\tget(processId).error();\n+\t\t}\n \t}\n \t\n \tpublic void retry(DuccId processId) {\n-\t\tget(processId).retry();\n \t\tgetTotals().retry();\n+\t\tif(processId != null) {\n+\t\t\tget(processId).retry();\n+\t\t}\n \t}\n \t\n \tpublic void preempt(DuccId processId) {\n-\t\tget(processId).preempt();\n \t\tgetTotals().preempt();\n+\t\tif(processId != null) {\n+\t\t\tget(processId).preempt();\n+\t\t}\n \t}\n }", "filename": "uima-ducc-transport/src/main/java/org/apache/uima/ducc/transport/event/jd/DuccProcessWorkItemsMap.java"}], "repo": "uima-ducc"}]
