{
    "james-project_b0d973c": {
        "repo": "james-project",
        "message": "improved fix for JAMES-1815, also fixes potential NPE",
        "commit": "https://github.com/apache/james-project/commit/b0d973c0d86395789e2f2036750d2f8bfaa5fdc3",
        "parent": "https://github.com/apache/james-project/commit/cbd2bdf62ff989a18de614de389568a604968814",
        "bug_id": "james-project_b0d973c",
        "file": [
            {
                "sha": "c84e836c205d97fba8bb53fcd43d7a2b03ad3bda",
                "filename": "server/data/data-library/src/main/java/org/apache/james/domainlist/lib/AbstractDomainList.java",
                "blob_url": "https://github.com/apache/james-project/blob/b0d973c0d86395789e2f2036750d2f8bfaa5fdc3/server/data/data-library/src/main/java/org/apache/james/domainlist/lib/AbstractDomainList.java",
                "raw_url": "https://github.com/apache/james-project/raw/b0d973c0d86395789e2f2036750d2f8bfaa5fdc3/server/data/data-library/src/main/java/org/apache/james/domainlist/lib/AbstractDomainList.java",
                "status": "modified",
                "changes": 12,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/james-project/contents/server/data/data-library/src/main/java/org/apache/james/domainlist/lib/AbstractDomainList.java?ref=b0d973c0d86395789e2f2036750d2f8bfaa5fdc3",
                "patch": "@@ -119,7 +119,7 @@ public String getDefaultDomain() throws DomainListException {\n         if (domains != null) {\n \n             // create mutable copy, some subclasses return ImmutableList\n-            domains = new ArrayList<String>(domains);\n+            ArrayList<String> mutableDomains = new ArrayList<String>(domains);\n \n             String hostName;\n             try {\n@@ -131,20 +131,22 @@ public String getDefaultDomain() throws DomainListException {\n             getLogger().info(\"Local host is: \" + hostName);\n \n             if (autoDetect && (!hostName.equals(\"localhost\"))) {\n-                domains.add(hostName.toLowerCase(Locale.US));\n+                mutableDomains.add(hostName.toLowerCase(Locale.US));\n             }\n \n             if (autoDetectIP) {\n-                domains.addAll(getDomainsIP(domains, dns, getLogger()));\n+                mutableDomains.addAll(getDomainsIP(mutableDomains, dns, getLogger()));\n             }\n \n             if (getLogger().isInfoEnabled()) {\n-                for (String domain : domains) {\n+                for (String domain : mutableDomains) {\n                     getLogger().debug(\"Handling mail for: \" + domain);\n                 }\n             }\n+\n+            return ImmutableList.copyOf(mutableDomains);\n         }\n-        return ImmutableList.copyOf(domains);\n+        return ImmutableList.of();// empty list\n     }\n \n     /**",
                "deletions": 5
            }
        ],
        "patched_files": [
            "AbstractDomainList.java"
        ],
        "unit_tests": [
            "AbstractDomainListTest.java"
        ]
    },
    "james-project_5709962": {
        "repo": "james-project",
        "message": "JAMES-2223 NPE in MessageContantExtractor when no content dispostion",
        "commit": "https://github.com/apache/james-project/commit/570996295199e4212bac6d9192ecaad93d64570b",
        "parent": "https://github.com/apache/james-project/commit/9fc7e722d415b95ce2898c6419de44b86110c11e",
        "bug_id": "james-project_5709962",
        "file": [
            {
                "sha": "09d2916e4d619e0acd8257ffd3057b6eb993577c",
                "filename": "server/container/util-java8/src/main/java/org/apache/james/util/mime/MessageContentExtractor.java",
                "blob_url": "https://github.com/apache/james-project/blob/570996295199e4212bac6d9192ecaad93d64570b/server/container/util-java8/src/main/java/org/apache/james/util/mime/MessageContentExtractor.java",
                "raw_url": "https://github.com/apache/james-project/raw/570996295199e4212bac6d9192ecaad93d64570b/server/container/util-java8/src/main/java/org/apache/james/util/mime/MessageContentExtractor.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/james-project/contents/server/container/util-java8/src/main/java/org/apache/james/util/mime/MessageContentExtractor.java?ref=570996295199e4212bac6d9192ecaad93d64570b",
                "patch": "@@ -173,7 +173,8 @@ private boolean isNotAttachment(Entity part) {\n     }\n \n     private boolean isInlinedWithoutCid(Entity part) {\n-        return part.getDispositionType().equals(MimeMessage.INLINE) && part.getHeader().getField(CONTENT_ID) == null;\n+        return Objects.equals(part.getDispositionType(), MimeMessage.INLINE)\n+            && part.getHeader().getField(CONTENT_ID) == null;\n     }\n \n     public static class MessageContent {",
                "deletions": 1
            },
            {
                "sha": "2717d7eb0a9ca7ac02417981d2ac0ee22fc28c94",
                "filename": "server/protocols/jmap-integration-testing/jmap-integration-testing-common/src/test/java/org/apache/james/jmap/methods/integration/cucumber/GetMessagesMethodStepdefs.java",
                "blob_url": "https://github.com/apache/james-project/blob/570996295199e4212bac6d9192ecaad93d64570b/server/protocols/jmap-integration-testing/jmap-integration-testing-common/src/test/java/org/apache/james/jmap/methods/integration/cucumber/GetMessagesMethodStepdefs.java",
                "raw_url": "https://github.com/apache/james-project/raw/570996295199e4212bac6d9192ecaad93d64570b/server/protocols/jmap-integration-testing/jmap-integration-testing-common/src/test/java/org/apache/james/jmap/methods/integration/cucumber/GetMessagesMethodStepdefs.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/james-project/contents/server/protocols/jmap-integration-testing/jmap-integration-testing-common/src/test/java/org/apache/james/jmap/methods/integration/cucumber/GetMessagesMethodStepdefs.java?ref=570996295199e4212bac6d9192ecaad93d64570b",
                "patch": "@@ -327,6 +327,11 @@ public void appendMessageWithSameInlinedAttachmentsToMailbox(String messageName,\n         appendMessage(messageName, mailbox, \"eml/sameInlinedImages.eml\");\n     }\n \n+    @Given(\"^\\\"([^\\\"]*)\\\" has a message \\\"([^\\\"]*)\\\" in the \\\"([^\\\"]*)\\\" mailbox with inlined attachments without content disposition$\")\n+    public void test(String username, String messageName, String mailbox) throws Exception {\n+        userStepdefs.execWithUser(username, () -> appendMessage(messageName, mailbox, \"eml/inlinedWithoutContentDisposition.eml\"));\n+    }\n+\n     @Given(\"^\\\"([^\\\"]*)\\\" has a message \\\"([^\\\"]*)\\\" in \\\"([^\\\"]*)\\\" mailbox with specific charset$\")\n     public void appendMessageWithSpecificCharset(String username, String messageName, String mailbox) throws Throwable {\n         userStepdefs.execWithUser(username, () -> appendMessageWithSpecificCharset(messageName, mailbox));",
                "deletions": 0
            },
            {
                "sha": "fcf952f956529502525b462ce32c1767ca148de5",
                "filename": "server/protocols/jmap-integration-testing/jmap-integration-testing-common/src/test/resources/cucumber/GetMessages.feature",
                "blob_url": "https://github.com/apache/james-project/blob/570996295199e4212bac6d9192ecaad93d64570b/server/protocols/jmap-integration-testing/jmap-integration-testing-common/src/test/resources/cucumber/GetMessages.feature",
                "raw_url": "https://github.com/apache/james-project/raw/570996295199e4212bac6d9192ecaad93d64570b/server/protocols/jmap-integration-testing/jmap-integration-testing-common/src/test/resources/cucumber/GetMessages.feature",
                "status": "modified",
                "changes": 10,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/james-project/contents/server/protocols/jmap-integration-testing/jmap-integration-testing-common/src/test/resources/cucumber/GetMessages.feature?ref=570996295199e4212bac6d9192ecaad93d64570b",
                "patch": "@@ -419,4 +419,12 @@ Feature: GetMessages method\n     When \"alice@domain.tld\" ask for messages \"m1\"\n     Then no error is returned\n     And the list should contain 1 message\n-    And the isForwarded property of the message is \"false\"\n\\ No newline at end of file\n+    And the isForwarded property of the message is \"false\"\n+\n+  Scenario: Retrieving message should be possible when message with inlined attachment but without content disposition\n+    Given \"alice@domain.tld\" has a message \"m1\" in the \"INBOX\" mailbox with inlined attachments without content disposition\n+    When \"alice@domain.tld\" ask for messages \"m1\"\n+    Then no error is returned\n+    And the list should contain 1 message\n+    And the hasAttachment of the message is \"true\"\n+    And the list of attachments of the message contains 1 attachments",
                "deletions": 1
            },
            {
                "sha": "a3713d6ee4e52f496942ad19d603e162dc0110ff",
                "filename": "server/protocols/jmap-integration-testing/jmap-integration-testing-common/src/test/resources/eml/inlinedWithoutContentDisposition.eml",
                "blob_url": "https://github.com/apache/james-project/blob/570996295199e4212bac6d9192ecaad93d64570b/server/protocols/jmap-integration-testing/jmap-integration-testing-common/src/test/resources/eml/inlinedWithoutContentDisposition.eml",
                "raw_url": "https://github.com/apache/james-project/raw/570996295199e4212bac6d9192ecaad93d64570b/server/protocols/jmap-integration-testing/jmap-integration-testing-common/src/test/resources/eml/inlinedWithoutContentDisposition.eml",
                "status": "added",
                "changes": 69,
                "additions": 69,
                "contents_url": "https://api.github.com/repos/apache/james-project/contents/server/protocols/jmap-integration-testing/jmap-integration-testing-common/src/test/resources/eml/inlinedWithoutContentDisposition.eml?ref=570996295199e4212bac6d9192ecaad93d64570b",
                "patch": "@@ -0,0 +1,69 @@\n+FCC: imap://user@localhost.com/Sent\n+X-Identity-Key: id6\n+X-Account-Key: account7\n+Subject: Re: Excuse pour vendredi dernier\n+To: To User <to@localhost.com>\n+From: From User <from@localhost.com>\n+X-Enigmail-Draft-Status: N1110\n+Message-ID: <55AE39CD.8050802>\n+Date: Tue, 21 Jul 2015 14:23:41 +0200\n+X-Mozilla-Draft-Info: internal/draft; vcard=0; receipt=0; DSN=0; uuencode=0;\n+ attachmentreminder=0\n+User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:38.0) Gecko/20100101\n+ Thunderbird/38.1.0\n+MIME-Version: 1.0\n+In-Reply-To: <dcc6e01637bbd527c411f34de96e6326>\n+Content-Type: multipart/encrypted;\n+ protocol=\"application/pgp-encrypted\";\n+ boundary=\"09AtNRN8t1bkTL9UtJde8HAiXSJ7dIX0X\"\n+\n+This is an OpenPGP/MIME encrypted message (RFC 4880 and 3156)\n+--09AtNRN8t1bkTL9UtJde8HAiXSJ7dIX0X\n+Content-Type: application/pgp-encrypted\n+Content-Description: PGP/MIME version identification\n+\n+Version: 1\n+\n+--09AtNRN8t1bkTL9UtJde8HAiXSJ7dIX0X\n+Content-Type: application/octet-stream; name=\"encrypted.asc\"\n+Content-Description: OpenPGP encrypted message\n+Content-Disposition: inline; filename=\"encrypted.asc\"\n+\n+-----BEGIN PGP MESSAGE-----\n+Version: GnuPG v2\n+\n+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\n+=4I6B\n+-----END PGP MESSAGE-----\n+\n+--09AtNRN8t1bkTL9UtJde8HAiXSJ7dIX0X--\n\\ No newline at end of file",
                "deletions": 0
            }
        ],
        "patched_files": [
            "MessageContentExtractor.java"
        ],
        "unit_tests": [
            "MessageContentExtractorTest.java"
        ]
    },
    "james-project_33ca2a6": {
        "repo": "james-project",
        "message": "JAMES-2384 When there is no body, getting a NullPointerException",
        "commit": "https://github.com/apache/james-project/commit/33ca2a62c6c7f1af8738ef0351f5c90dad8aaec3",
        "parent": "https://github.com/apache/james-project/commit/5883efbfd8d2f1ff282d1f12e27f2b64fe6c71a5",
        "bug_id": "james-project_33ca2a6",
        "file": [
            {
                "sha": "816380d4502be030bd760c0f94a0c5d5dc9a6e0f",
                "filename": "mailbox/jpa/src/main/java/org/apache/james/mailbox/jpa/mail/model/openjpa/JPAMailboxMessage.java",
                "blob_url": "https://github.com/apache/james-project/blob/33ca2a62c6c7f1af8738ef0351f5c90dad8aaec3/mailbox/jpa/src/main/java/org/apache/james/mailbox/jpa/mail/model/openjpa/JPAMailboxMessage.java",
                "raw_url": "https://github.com/apache/james-project/raw/33ca2a62c6c7f1af8738ef0351f5c90dad8aaec3/mailbox/jpa/src/main/java/org/apache/james/mailbox/jpa/mail/model/openjpa/JPAMailboxMessage.java",
                "status": "modified",
                "changes": 13,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/james-project/contents/mailbox/jpa/src/main/java/org/apache/james/mailbox/jpa/mail/model/openjpa/JPAMailboxMessage.java?ref=33ca2a62c6c7f1af8738ef0351f5c90dad8aaec3",
                "patch": "@@ -39,10 +39,14 @@\n import org.apache.james.mailbox.store.mail.model.MailboxMessage;\n import org.apache.james.mailbox.store.mail.model.impl.PropertyBuilder;\n \n+import com.google.common.annotations.VisibleForTesting;\n+\n @Entity(name = \"MailboxMessage\")\n @Table(name = \"JAMES_MAIL\")\n public class JPAMailboxMessage extends AbstractJPAMailboxMessage {\n \n+    private static final byte[] EMPTY_BODY = new byte[] {};\n+\n     /** The value for the body field. Lazy loaded */\n     /** We use a max length to represent 1gb data. Thats prolly overkill, but who knows */\n     @Basic(optional = false, fetch = FetchType.LAZY)\n@@ -61,6 +65,12 @@ public JPAMailboxMessage() {\n         \n     }\n \n+    @VisibleForTesting\n+    protected JPAMailboxMessage(byte[] header, byte[] body) {\n+        this.header = header;\n+        this.body = body;\n+    }\n+\n     public JPAMailboxMessage(JPAMailbox mailbox, Date internalDate, int size, Flags flags, SharedInputStream content, int bodyStartOctet, PropertyBuilder propertyBuilder) throws MailboxException {\n         super(mailbox, internalDate, flags, size, bodyStartOctet, propertyBuilder);\n         try {\n@@ -91,6 +101,9 @@ public JPAMailboxMessage(JPAMailbox mailbox, MessageUid uid, long modSeq, Mailbo\n \n     @Override\n     public InputStream getBodyContent() throws IOException {\n+        if (body == null) {\n+            return new ByteArrayInputStream(EMPTY_BODY);\n+        }\n         return new ByteArrayInputStream(body);\n     }\n ",
                "deletions": 0
            },
            {
                "sha": "3c598c7e4eaafdef6b76bb96895a249053010a0a",
                "filename": "mailbox/jpa/src/test/java/org/apache/james/mailbox/jpa/mail/model/openjpa/JPAMailboxMessageTest.java",
                "blob_url": "https://github.com/apache/james-project/blob/33ca2a62c6c7f1af8738ef0351f5c90dad8aaec3/mailbox/jpa/src/test/java/org/apache/james/mailbox/jpa/mail/model/openjpa/JPAMailboxMessageTest.java",
                "raw_url": "https://github.com/apache/james-project/raw/33ca2a62c6c7f1af8738ef0351f5c90dad8aaec3/mailbox/jpa/src/test/java/org/apache/james/mailbox/jpa/mail/model/openjpa/JPAMailboxMessageTest.java",
                "status": "added",
                "changes": 45,
                "additions": 45,
                "contents_url": "https://api.github.com/repos/apache/james-project/contents/mailbox/jpa/src/test/java/org/apache/james/mailbox/jpa/mail/model/openjpa/JPAMailboxMessageTest.java?ref=33ca2a62c6c7f1af8738ef0351f5c90dad8aaec3",
                "patch": "@@ -0,0 +1,45 @@\n+/****************************************************************\n+ * Licensed to the Apache Software Foundation (ASF) under one   *\n+ * or more contributor license agreements.  See the NOTICE file *\n+ * distributed with this work for additional information        *\n+ * regarding copyright ownership.  The ASF licenses this file   *\n+ * to you under the Apache License, Version 2.0 (the            *\n+ * \"License\"); you may not use this file except in compliance   *\n+ * with the License.  You may obtain a copy of the License at   *\n+ *                                                              *\n+ *   http://www.apache.org/licenses/LICENSE-2.0                 *\n+ *                                                              *\n+ * Unless required by applicable law or agreed to in writing,   *\n+ * software distributed under the License is distributed on an  *\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *\n+ * KIND, either express or implied.  See the License for the    *\n+ * specific language governing permissions and limitations      *\n+ * under the License.                                           *\n+ ****************************************************************/\n+package org.apache.james.mailbox.jpa.mail.model.openjpa;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.charset.StandardCharsets;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Test;\n+\n+public class JPAMailboxMessageTest {\n+\n+    /**\n+     * Even though there should never be a null body, it does happen. See JAMES-2384\n+     */\n+    @Test\n+    public void getFullContentShouldReturnOriginalContentWhenBodyFieldIsNull() throws Exception {\n+\n+        // Prepare the message\n+        byte[] content = \"Subject: the null message\".getBytes(StandardCharsets.UTF_8);\n+        JPAMailboxMessage message = new JPAMailboxMessage(content, null);\n+\n+        // Get and check\n+        assertThat(IOUtils.toByteArray(message.getFullContent())).containsExactly(content);\n+\n+    }\n+\n+}",
                "deletions": 0
            }
        ],
        "patched_files": [
            "JPAMailboxMessage.java"
        ],
        "unit_tests": [
            "JPAMailboxMessageTest.java"
        ]
    },
    "james-project_b10fa18": {
        "repo": "james-project",
        "message": "JAMES-2437 When the publickey is missing in the keystore a NPE is thrown",
        "commit": "https://github.com/apache/james-project/commit/b10fa18aa252624ce178e064919d92c7929d7d50",
        "parent": "https://github.com/apache/james-project/commit/25e9a11be2ea06617b1a7bc3b2c41ead9d0c3f0b",
        "bug_id": "james-project_b10fa18",
        "file": [
            {
                "sha": "5d3dd4fd2a17fd39c08362d60baac15ba41c881d",
                "filename": "server/protocols/jmap/src/main/java/org/apache/james/jmap/crypto/JamesSignatureHandler.java",
                "blob_url": "https://github.com/apache/james-project/blob/b10fa18aa252624ce178e064919d92c7929d7d50/server/protocols/jmap/src/main/java/org/apache/james/jmap/crypto/JamesSignatureHandler.java",
                "raw_url": "https://github.com/apache/james-project/raw/b10fa18aa252624ce178e064919d92c7929d7d50/server/protocols/jmap/src/main/java/org/apache/james/jmap/crypto/JamesSignatureHandler.java",
                "status": "modified",
                "changes": 16,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/james-project/contents/server/protocols/jmap/src/main/java/org/apache/james/jmap/crypto/JamesSignatureHandler.java?ref=b10fa18aa252624ce178e064919d92c7929d7d50",
                "patch": "@@ -23,11 +23,14 @@\n import java.security.InvalidKeyException;\n import java.security.Key;\n import java.security.KeyStore;\n+import java.security.KeyStoreException;\n import java.security.NoSuchAlgorithmException;\n import java.security.PrivateKey;\n import java.security.PublicKey;\n import java.security.Signature;\n import java.security.SignatureException;\n+import java.security.cert.Certificate;\n+import java.util.Optional;\n \n import javax.inject.Inject;\n \n@@ -65,11 +68,16 @@\n     public void init() throws Exception {\n         KeyStore keystore = KeyStore.getInstance(JKS);\n         InputStream fis = fileSystem.getResource(jmapConfiguration.getKeystore());\n-        keystore.load(fis, jmapConfiguration.getSecret().toCharArray());\n-        publicKey = keystore.getCertificate(ALIAS).getPublicKey();\n-        Key key = keystore.getKey(ALIAS, jmapConfiguration.getSecret().toCharArray());\n+        char[] secret = jmapConfiguration.getSecret().toCharArray();\n+        keystore.load(fis, secret);\n+        Certificate aliasCertificate = Optional\n+                .ofNullable(keystore.getCertificate(ALIAS))\n+                .orElseThrow(() -> new KeyStoreException(\"Alias '\" + ALIAS + \"' keystore can't be found\"));\n+\n+        publicKey = aliasCertificate.getPublicKey();\n+        Key key = keystore.getKey(ALIAS, secret);\n         if (! (key instanceof PrivateKey)) {\n-            throw new Exception(\"Provided key is not a PrivateKey\");\n+            throw new KeyStoreException(\"Provided key is not a PrivateKey\");\n         }\n         privateKey = (PrivateKey) key;\n     }",
                "deletions": 4
            },
            {
                "sha": "c531581535ee0e0b23d99f81921bd9b78b100de1",
                "filename": "server/protocols/jmap/src/test/java/org/apache/james/jmap/crypto/JamesSignatureHandlerProvider.java",
                "blob_url": "https://github.com/apache/james-project/blob/b10fa18aa252624ce178e064919d92c7929d7d50/server/protocols/jmap/src/test/java/org/apache/james/jmap/crypto/JamesSignatureHandlerProvider.java",
                "raw_url": "https://github.com/apache/james-project/raw/b10fa18aa252624ce178e064919d92c7929d7d50/server/protocols/jmap/src/test/java/org/apache/james/jmap/crypto/JamesSignatureHandlerProvider.java",
                "status": "modified",
                "changes": 33,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/james-project/contents/server/protocols/jmap/src/test/java/org/apache/james/jmap/crypto/JamesSignatureHandlerProvider.java?ref=b10fa18aa252624ce178e064919d92c7929d7d50",
                "patch": "@@ -27,8 +27,10 @@\n \n import org.apache.james.filesystem.api.FileSystem;\n import org.apache.james.jmap.JMAPConfiguration;\n+import org.apache.james.jmap.JMAPConfiguration.Builder;\n \n public class JamesSignatureHandlerProvider {\n+\n     private static final String JWT_PUBLIC_KEY = \"-----BEGIN PUBLIC KEY-----\\n\" +\n         \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtlChO/nlVP27MpdkG0Bh\\n\" +\n         \"16XrMRf6M4NeyGa7j5+1UKm42IKUf3lM28oe82MqIIRyvskPc11NuzSor8HmvH8H\\n\" +\n@@ -39,11 +41,29 @@\n         \"kwIDAQAB\\n\" +\n         \"-----END PUBLIC KEY-----\";\n \n+    public JamesSignatureHandlerProvider() {\n+    }\n+\n     public JamesSignatureHandler provide() throws Exception {\n-        FileSystem fileSystem = new FileSystem() {\n+        JamesSignatureHandler signatureHandler = new JamesSignatureHandler(newFileSystem(),\n+                newConfigurationBuilder().build());\n+        signatureHandler.init();\n+        return signatureHandler;\n+    }\n+\n+    public static Builder newConfigurationBuilder() {\n+        return JMAPConfiguration.builder()\n+            .enable()\n+            .keystore(\"keystore\")\n+            .secret(\"james72laBalle\")\n+            .jwtPublicKeyPem(Optional.of(JWT_PUBLIC_KEY));\n+    }\n+\n+    public static FileSystem newFileSystem() {\n+        return new FileSystem() {\n             @Override\n             public InputStream getResource(String url) throws IOException {\n-                return ClassLoader.getSystemResourceAsStream(\"keystore\");\n+                return ClassLoader.getSystemResourceAsStream(url);\n             }\n \n             @Override\n@@ -56,15 +76,6 @@ public File getBasedir() throws FileNotFoundException {\n                 return null;\n             }\n         };\n-        JamesSignatureHandler signatureHandler = new JamesSignatureHandler(fileSystem, \n-                JMAPConfiguration.builder()\n-                    .enable()\n-                    .keystore(\"keystore\")\n-                    .secret(\"james72laBalle\")\n-                    .jwtPublicKeyPem(Optional.of(JWT_PUBLIC_KEY))\n-                    .build());\n-        signatureHandler.init();\n-        return signatureHandler;\n     }\n \n }",
                "deletions": 11
            },
            {
                "sha": "e885f415ef174239c74e27cdf0104f543a573336",
                "filename": "server/protocols/jmap/src/test/java/org/apache/james/jmap/crypto/JamesSignatureHandlerTest.java",
                "blob_url": "https://github.com/apache/james-project/blob/b10fa18aa252624ce178e064919d92c7929d7d50/server/protocols/jmap/src/test/java/org/apache/james/jmap/crypto/JamesSignatureHandlerTest.java",
                "raw_url": "https://github.com/apache/james-project/raw/b10fa18aa252624ce178e064919d92c7929d7d50/server/protocols/jmap/src/test/java/org/apache/james/jmap/crypto/JamesSignatureHandlerTest.java",
                "status": "modified",
                "changes": 17,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/james-project/contents/server/protocols/jmap/src/test/java/org/apache/james/jmap/crypto/JamesSignatureHandlerTest.java?ref=b10fa18aa252624ce178e064919d92c7929d7d50",
                "patch": "@@ -21,6 +21,9 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n+import java.security.KeyStoreException;\n+\n+import org.apache.james.jmap.JMAPConfiguration;\n import org.junit.Before;\n import org.junit.Test;\n \n@@ -34,7 +37,19 @@\n \n     @Before\n     public void setUp() throws Exception {\n-        signatureHandler = new JamesSignatureHandlerProvider().provide();\n+       signatureHandler = new JamesSignatureHandlerProvider().provide();\n+    }\n+\n+    @Test(expected = KeyStoreException.class)\n+    public void initShouldThrowOnUnknownKeystore() throws Exception {\n+        JMAPConfiguration jmapConfiguration = JamesSignatureHandlerProvider.newConfigurationBuilder()\n+            .keystore(\"badAliasKeystore\")\n+            .secret(\"password\")\n+            .build();\n+\n+        JamesSignatureHandler signatureHandler = new JamesSignatureHandler(JamesSignatureHandlerProvider.newFileSystem(),\n+                jmapConfiguration);\n+        signatureHandler.init();\n     }\n \n     @Test",
                "deletions": 1
            },
            {
                "sha": "0a4de224f8f3f8dc59ea84b6f45ad3abbfc1434b",
                "filename": "server/protocols/jmap/src/test/resources/badAliasKeystore",
                "blob_url": "https://github.com/apache/james-project/blob/b10fa18aa252624ce178e064919d92c7929d7d50/server/protocols/jmap/src/test/resources/badAliasKeystore",
                "raw_url": "https://github.com/apache/james-project/raw/b10fa18aa252624ce178e064919d92c7929d7d50/server/protocols/jmap/src/test/resources/badAliasKeystore",
                "status": "added",
                "changes": 0,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/james-project/contents/server/protocols/jmap/src/test/resources/badAliasKeystore?ref=b10fa18aa252624ce178e064919d92c7929d7d50",
                "deletions": 0
            }
        ],
        "patched_files": [
            "JamesSignatureHandler.java",
            "JamesSignatureHandlerProvider.java"
        ],
        "unit_tests": [
            "JamesSignatureHandlerTest.java"
        ]
    },
    "james-project_0978270": {
        "repo": "james-project",
        "message": "JAMES-1732 Introducing the problem\nExpected behaviour:\nConfigure A\nConfigure B\nconfigured\nBut getting:\nConfigure B\njava.lang.NullPointerException",
        "commit": "https://github.com/apache/james-project/commit/0978270d57a46016dc141430dac25801fbd34c68",
        "parent": "https://github.com/apache/james-project/commit/def9199099c90e1d28fe0deed0b73f40f3f6c3f0",
        "bug_id": "james-project_0978270",
        "file": [
            {
                "sha": "d234d9238e7a36452e163e2dc52979faeb483fe1",
                "filename": "server/container/guice/memory-guice/src/test/java/org/apache/james/A.java",
                "blob_url": "https://github.com/apache/james-project/blob/0978270d57a46016dc141430dac25801fbd34c68/server/container/guice/memory-guice/src/test/java/org/apache/james/A.java",
                "raw_url": "https://github.com/apache/james-project/raw/0978270d57a46016dc141430dac25801fbd34c68/server/container/guice/memory-guice/src/test/java/org/apache/james/A.java",
                "status": "added",
                "changes": 48,
                "additions": 48,
                "contents_url": "https://api.github.com/repos/apache/james-project/contents/server/container/guice/memory-guice/src/test/java/org/apache/james/A.java?ref=0978270d57a46016dc141430dac25801fbd34c68",
                "patch": "@@ -0,0 +1,48 @@\n+/****************************************************************\n+ * Licensed to the Apache Software Foundation (ASF) under one   *\n+ * or more contributor license agreements.  See the NOTICE file *\n+ * distributed with this work for additional information        *\n+ * regarding copyright ownership.  The ASF licenses this file   *\n+ * to you under the Apache License, Version 2.0 (the            *\n+ * \"License\"); you may not use this file except in compliance   *\n+ * with the License.  You may obtain a copy of the License at   *\n+ *                                                              *\n+ *   http://www.apache.org/licenses/LICENSE-2.0                 *\n+ *                                                              *\n+ * Unless required by applicable law or agreed to in writing,   *\n+ * software distributed under the License is distributed on an  *\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *\n+ * KIND, either express or implied.  See the License for the    *\n+ * specific language governing permissions and limitations      *\n+ * under the License.                                           *\n+ ****************************************************************/\n+\n+package org.apache.james;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.HierarchicalConfiguration;\n+import org.apache.james.lifecycle.api.Configurable;\n+\n+public class A implements Configurable {\n+\n+    @SuppressWarnings(\"unused\")\n+    private final C c;\n+    private String domain;\n+\n+    @Inject\n+    private A(C c) {\n+        this.c = c;\n+    }\n+\n+    @Override\n+    public void configure(HierarchicalConfiguration config) throws ConfigurationException {\n+        System.out.println(\"Configure A\");\n+        domain = \"configured\";\n+    }\n+\n+    public String getDomain() {\n+        return domain.toLowerCase();\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "2576d43828fb0fe17a9bd840ddbc5bdd36f59232",
                "filename": "server/container/guice/memory-guice/src/test/java/org/apache/james/B.java",
                "blob_url": "https://github.com/apache/james-project/blob/0978270d57a46016dc141430dac25801fbd34c68/server/container/guice/memory-guice/src/test/java/org/apache/james/B.java",
                "raw_url": "https://github.com/apache/james-project/raw/0978270d57a46016dc141430dac25801fbd34c68/server/container/guice/memory-guice/src/test/java/org/apache/james/B.java",
                "status": "added",
                "changes": 46,
                "additions": 46,
                "contents_url": "https://api.github.com/repos/apache/james-project/contents/server/container/guice/memory-guice/src/test/java/org/apache/james/B.java?ref=0978270d57a46016dc141430dac25801fbd34c68",
                "patch": "@@ -0,0 +1,46 @@\n+/****************************************************************\n+ * Licensed to the Apache Software Foundation (ASF) under one   *\n+ * or more contributor license agreements.  See the NOTICE file *\n+ * distributed with this work for additional information        *\n+ * regarding copyright ownership.  The ASF licenses this file   *\n+ * to you under the Apache License, Version 2.0 (the            *\n+ * \"License\"); you may not use this file except in compliance   *\n+ * with the License.  You may obtain a copy of the License at   *\n+ *                                                              *\n+ *   http://www.apache.org/licenses/LICENSE-2.0                 *\n+ *                                                              *\n+ * Unless required by applicable law or agreed to in writing,   *\n+ * software distributed under the License is distributed on an  *\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *\n+ * KIND, either express or implied.  See the License for the    *\n+ * specific language governing permissions and limitations      *\n+ * under the License.                                           *\n+ ****************************************************************/\n+\n+package org.apache.james;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.HierarchicalConfiguration;\n+import org.apache.james.lifecycle.api.Configurable;\n+\n+public class B implements Configurable {\n+\n+    private final A a;\n+    @SuppressWarnings(\"unused\")\n+    private final C c;\n+\n+    @Inject\n+    private B(A a, C c) {\n+        this.a = a;\n+        this.c = c;\n+    }\n+\n+    @Override\n+    public void configure(HierarchicalConfiguration config) throws ConfigurationException {\n+        System.out.println(\"Configure B\");\n+        System.out.println(a.getDomain());\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "c6f20dfc8fa5d70c22974c8d47c2ce5153e22a48",
                "filename": "server/container/guice/memory-guice/src/test/java/org/apache/james/C.java",
                "blob_url": "https://github.com/apache/james-project/blob/0978270d57a46016dc141430dac25801fbd34c68/server/container/guice/memory-guice/src/test/java/org/apache/james/C.java",
                "raw_url": "https://github.com/apache/james-project/raw/0978270d57a46016dc141430dac25801fbd34c68/server/container/guice/memory-guice/src/test/java/org/apache/james/C.java",
                "status": "added",
                "changes": 24,
                "additions": 24,
                "contents_url": "https://api.github.com/repos/apache/james-project/contents/server/container/guice/memory-guice/src/test/java/org/apache/james/C.java?ref=0978270d57a46016dc141430dac25801fbd34c68",
                "patch": "@@ -0,0 +1,24 @@\n+/****************************************************************\n+ * Licensed to the Apache Software Foundation (ASF) under one   *\n+ * or more contributor license agreements.  See the NOTICE file *\n+ * distributed with this work for additional information        *\n+ * regarding copyright ownership.  The ASF licenses this file   *\n+ * to you under the Apache License, Version 2.0 (the            *\n+ * \"License\"); you may not use this file except in compliance   *\n+ * with the License.  You may obtain a copy of the License at   *\n+ *                                                              *\n+ *   http://www.apache.org/licenses/LICENSE-2.0                 *\n+ *                                                              *\n+ * Unless required by applicable law or agreed to in writing,   *\n+ * software distributed under the License is distributed on an  *\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *\n+ * KIND, either express or implied.  See the License for the    *\n+ * specific language governing permissions and limitations      *\n+ * under the License.                                           *\n+ ****************************************************************/\n+\n+package org.apache.james;\n+\n+public class C {\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "3ebd55d92b6ea3cc215336128715cc34dba1d8f6",
                "filename": "server/container/guice/memory-guice/src/test/java/org/apache/james/MemoryJamesServerTest.java",
                "blob_url": "https://github.com/apache/james-project/blob/0978270d57a46016dc141430dac25801fbd34c68/server/container/guice/memory-guice/src/test/java/org/apache/james/MemoryJamesServerTest.java",
                "raw_url": "https://github.com/apache/james-project/raw/0978270d57a46016dc141430dac25801fbd34c68/server/container/guice/memory-guice/src/test/java/org/apache/james/MemoryJamesServerTest.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/james-project/contents/server/container/guice/memory-guice/src/test/java/org/apache/james/MemoryJamesServerTest.java?ref=0978270d57a46016dc141430dac25801fbd34c68",
                "patch": "@@ -38,7 +38,8 @@\n         return new GuiceJamesServer<>(new TypeLiteral<InMemoryId>(){})\n                 .combineWith(MemoryJamesServerMain.inMemoryServerModule)\n                 .overrideWith(new TestFilesystemModule(temporaryFolder),\n-                        new TestJMAPServerModule(GetMessageListMethod.DEFAULT_MAXIMUM_LIMIT));\n+                        new TestJMAPServerModule(GetMessageListMethod.DEFAULT_MAXIMUM_LIMIT),\n+                        new TestModule());\n     }\n     \n }",
                "deletions": 1
            },
            {
                "sha": "1a8f4a804d195fee6467823326e8c66e019f913b",
                "filename": "server/container/guice/memory-guice/src/test/java/org/apache/james/TestModule.java",
                "blob_url": "https://github.com/apache/james-project/blob/0978270d57a46016dc141430dac25801fbd34c68/server/container/guice/memory-guice/src/test/java/org/apache/james/TestModule.java",
                "raw_url": "https://github.com/apache/james-project/raw/0978270d57a46016dc141430dac25801fbd34c68/server/container/guice/memory-guice/src/test/java/org/apache/james/TestModule.java",
                "status": "added",
                "changes": 81,
                "additions": 81,
                "contents_url": "https://api.github.com/repos/apache/james-project/contents/server/container/guice/memory-guice/src/test/java/org/apache/james/TestModule.java?ref=0978270d57a46016dc141430dac25801fbd34c68",
                "patch": "@@ -0,0 +1,81 @@\n+/****************************************************************\n+ * Licensed to the Apache Software Foundation (ASF) under one   *\n+ * or more contributor license agreements.  See the NOTICE file *\n+ * distributed with this work for additional information        *\n+ * regarding copyright ownership.  The ASF licenses this file   *\n+ * to you under the Apache License, Version 2.0 (the            *\n+ * \"License\"); you may not use this file except in compliance   *\n+ * with the License.  You may obtain a copy of the License at   *\n+ *                                                              *\n+ *   http://www.apache.org/licenses/LICENSE-2.0                 *\n+ *                                                              *\n+ * Unless required by applicable law or agreed to in writing,   *\n+ * software distributed under the License is distributed on an  *\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *\n+ * KIND, either express or implied.  See the License for the    *\n+ * specific language governing permissions and limitations      *\n+ * under the License.                                           *\n+ ****************************************************************/\n+\n+package org.apache.james;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.james.utils.ConfigurationPerformer;\n+\n+import com.google.inject.AbstractModule;\n+import com.google.inject.Scopes;\n+import com.google.inject.multibindings.Multibinder;\n+\n+public class TestModule extends AbstractModule {\n+\n+    @Override\n+    protected void configure() {\n+        bind(B.class).in(Scopes.SINGLETON);\n+        bind(A.class).in(Scopes.SINGLETON);\n+        bind(C.class).in(Scopes.SINGLETON);\n+\n+        Multibinder.newSetBinder(binder(), ConfigurationPerformer.class).addBinding().to(BConfigurationPerformer.class);\n+        Multibinder.newSetBinder(binder(), ConfigurationPerformer.class).addBinding().to(AConfigurationPerformer.class);\n+    }\n+\n+    public static class AConfigurationPerformer implements ConfigurationPerformer<A> {\n+\n+        private A a;\n+\n+        @Inject\n+        private AConfigurationPerformer(A a) {\n+            this.a = a;\n+        }\n+\n+        @Override\n+        public void initModule() throws Exception {\n+            a.configure(null);\n+        }\n+\n+        @Override\n+        public Class<A> forClass() {\n+            return A.class;\n+        }\n+    }\n+\n+    public static class BConfigurationPerformer implements ConfigurationPerformer<B> {\n+\n+        private B b;\n+\n+        @Inject\n+        private BConfigurationPerformer(B b) {\n+            this.b = b;\n+        }\n+\n+        @Override\n+        public void initModule() throws Exception {\n+            b.configure(null);\n+        }\n+\n+        @Override\n+        public Class<B> forClass() {\n+            return B.class;\n+        }\n+    }\n+}",
                "deletions": 0
            }
        ],
        "patched_files": [
            "A.java",
            "C.java",
            "B.java"
        ],
        "unit_tests": [
            "MemoryJamesServerTest.java",
            "TestModule.java"
        ]
    }
}